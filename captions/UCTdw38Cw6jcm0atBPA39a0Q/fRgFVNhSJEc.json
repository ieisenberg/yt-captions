[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "how y'all doing today awesome any NDC first-timers just out of curiosity okay",
    "start": "4880",
    "end": "11840"
  },
  {
    "text": "cool awesome well welcome to the conference I hope you're having a great time my name is Spencer and I'm here to talk to you today a little bit about typescript not",
    "start": "11840",
    "end": "19369"
  },
  {
    "text": "only give you a little bit of history and background of why typescript is awesome and why you should use it but",
    "start": "19369",
    "end": "24710"
  },
  {
    "text": "talk specifically not only about the features it gives you but the type system and break that down a little bit more anybody who's into functional",
    "start": "24710",
    "end": "31460"
  },
  {
    "text": "programming will especially appreciate some of these some of the things that I'm going to show you but if not it's a kind of almost a good entryway into that",
    "start": "31460",
    "end": "37970"
  },
  {
    "text": "but we'll get to that in a moment first thing I need to tell you just because I",
    "start": "37970",
    "end": "43040"
  },
  {
    "start": "39000",
    "end": "82000"
  },
  {
    "text": "step off the stage leave and you never see me again doesn't mean this conversation has to end today first you",
    "start": "43040",
    "end": "48290"
  },
  {
    "text": "can find me on Twitter at night and Bach just put an ad you know just put me at my last name on the schedule don't",
    "start": "48290",
    "end": "53960"
  },
  {
    "text": "expect you to remember how to spell it find me on Twitter at night in Baucom you can also find slide the slides for",
    "start": "53960",
    "end": "59329"
  },
  {
    "text": "this presentation as well as some of the Articles that I mentioned you can find them at typescript nines net I'm gonna",
    "start": "59329",
    "end": "64820"
  },
  {
    "text": "pay to say that that's my website I don't have any ads it is purely for your entertainment and purely for your value",
    "start": "64820",
    "end": "70130"
  },
  {
    "text": "and if you have any questions at all after this presentation and you don't find me at the conference feel free to reach out to me on Twitter or you can go",
    "start": "70130",
    "end": "75590"
  },
  {
    "text": "to my website and you can find all my contact information I'm pretty much an open book so just let me know if you have any questions so I wanted to start",
    "start": "75590",
    "end": "83509"
  },
  {
    "start": "82000",
    "end": "145000"
  },
  {
    "text": "by talking a little bit about typescript and what it is and kind of where it came from how many people use typescript in your day to day ok fair amount of you",
    "start": "83509",
    "end": "90409"
  },
  {
    "text": "good how many people use not typescript but maybe like es6 using babel or something similar to that okay a few of",
    "start": "90409",
    "end": "96829"
  },
  {
    "text": "you how many people are just still using you know plain es5 no shame you can",
    "start": "96829",
    "end": "102289"
  },
  {
    "text": "raise your hand it's okay okay just a couple of people I saw a couple of little hands kind of little a little bit",
    "start": "102289",
    "end": "107299"
  },
  {
    "text": "of which is totally cool so typescript",
    "start": "107299",
    "end": "112399"
  },
  {
    "text": "is a superset of JavaScript created by Microsoft several years ago and it was designed and engineered to really bring",
    "start": "112399",
    "end": "119389"
  },
  {
    "text": "structure and meaning to your javascript code it's supposed to it's supposed to help you by providing some compile time",
    "start": "119389",
    "end": "125450"
  },
  {
    "text": "guarantees for your JavaScript are the most important takeaway from typescript is that it is a superset of JavaScript",
    "start": "125450",
    "end": "131990"
  },
  {
    "text": "that means all valid JavaScript is also valid typescript and that's really important to kind of understand and",
    "start": "131990",
    "end": "137900"
  },
  {
    "text": "there's a lot of great reasons if you're not using typescript already with men which many of you are there's a lot of great reasons to start using typescript first",
    "start": "137900",
    "end": "145350"
  },
  {
    "start": "145000",
    "end": "445000"
  },
  {
    "text": "thing is that it's the future of JavaScript today javascript is developed and maintained by a Standards Board",
    "start": "145350",
    "end": "151650"
  },
  {
    "text": "called tc39 I don't know where they came up with the name but it's called tc39 and when a proposal goes into TC 39 it",
    "start": "151650",
    "end": "158340"
  },
  {
    "text": "usually starts at stage zero which is like basically like an idea and it goes all the way up to stage 4 stage 4 means",
    "start": "158340",
    "end": "164489"
  },
  {
    "text": "this is gonna go into the language right so it's a series of steps and those steps take a long time to execute on so",
    "start": "164489",
    "end": "171590"
  },
  {
    "text": "async/await is a great example of something that went through tc39 got all the way to stage 4 and is now a feature",
    "start": "171590",
    "end": "177180"
  },
  {
    "text": "that is going to be in a future version of JavaScript I think it's probably already available in using Babel as",
    "start": "177180",
    "end": "183180"
  },
  {
    "text": "extensions or something like that but the problem with that is is a couple of things first of all browser support",
    "start": "183180",
    "end": "189390"
  },
  {
    "text": "chief among them just because a feature has been said that that is going to be the part of the next version of",
    "start": "189390",
    "end": "195540"
  },
  {
    "text": "JavaScript doesn't mean that chrome or edge or Firefox is going to support it right away right so the other problem with that is",
    "start": "195540",
    "end": "201690"
  },
  {
    "text": "it takes a long time for that to happen it can take it literally take years for those features to be developed and added",
    "start": "201690",
    "end": "207540"
  },
  {
    "text": "to a browser but typescript isn't isn't developed in the same manner as JavaScript it's developed by Microsoft",
    "start": "207540",
    "end": "213060"
  },
  {
    "text": "so if something is in stage 3 let's say and they're pretty sure that it's going to make it in typescript can just add it",
    "start": "213060",
    "end": "218940"
  },
  {
    "text": "to its own language and then it's just available it's available today because Java or sorry typescript trans piles",
    "start": "218940",
    "end": "224970"
  },
  {
    "text": "down to es 5 typically which means that it can run just about anywhere right it's not you're not running typescript",
    "start": "224970",
    "end": "230820"
  },
  {
    "text": "in your browser you can but typically when you're deploying production code you're going to boil it down and it's",
    "start": "230820",
    "end": "236760"
  },
  {
    "text": "going to come by just going to transpile down to es 5 right so gives you all of the it gives you all of the modern",
    "start": "236760",
    "end": "242820"
  },
  {
    "text": "features of the next version of JavaScript without actually having to worry about Java without having to worry about browser",
    "start": "242820",
    "end": "250110"
  },
  {
    "text": "support probably my favorite reason to use typescript is better tooling so",
    "start": "250110",
    "end": "256620"
  },
  {
    "text": "let's take extends for example how many people are dotnet developers probably a fair amount of Awesome okay so",
    "start": "256620",
    "end": "262289"
  },
  {
    "text": "intellisense is like my favorite feature of dotnet because it causes me it keeps me from thinking too much about it I could just hit the dot and then to see",
    "start": "262289",
    "end": "268620"
  },
  {
    "text": "what methods and properties are available on a given object right which is really useful if",
    "start": "268620",
    "end": "274500"
  },
  {
    "text": "you try to do that in JavaScript how many people use resharper while we're talking about it okay good a lot of you",
    "start": "274500",
    "end": "279960"
  },
  {
    "text": "resharper is a productivity tool for dotnet developers and one of the things that it can do is extend and tell us a",
    "start": "279960",
    "end": "285630"
  },
  {
    "text": "little bit and it can also allow you to refactor really easily refactor your dotnet code really easily and that's",
    "start": "285630",
    "end": "291810"
  },
  {
    "text": "really cool because well I mean that's it's it's great to have the those refactoring those it's great because",
    "start": "291810",
    "end": "298740"
  },
  {
    "text": "dotnet provides all that provides a really comprehensive type system that allows makes refactoring really easy",
    "start": "298740",
    "end": "304200"
  },
  {
    "text": "no JetBrains can build really nice tooling on top of that so what type but if you try Java Script if you if you use",
    "start": "304200",
    "end": "310950"
  },
  {
    "text": "resharper with just dot JS files oftentimes it will try to add intellisense onto it but it really can't",
    "start": "310950",
    "end": "316890"
  },
  {
    "text": "very well because javascript has a very weak runtime type system it doesn't even have a really good compile time type",
    "start": "316890",
    "end": "322950"
  },
  {
    "text": "system it really can't really tell resharper does its best but it doesn't it's not perfect where typescript shines",
    "start": "322950",
    "end": "331170"
  },
  {
    "text": "is because you're adding structured meaning to your code because you're defining your types ahead of time you",
    "start": "331170",
    "end": "336690"
  },
  {
    "text": "can add in those things like refactoring and it better intellisense really easily",
    "start": "336690",
    "end": "341940"
  },
  {
    "text": "because it's just baked into type scripts type system how many people have ever tried to like rename a variable in",
    "start": "341940",
    "end": "347640"
  },
  {
    "text": "JavaScript and have their whole like oh they run their asp net project and the whole thing just fails you know you just",
    "start": "347640",
    "end": "352950"
  },
  {
    "text": "suddenly get undefined it's not a function okay yes plenty of you and if you and if you've tried to do the Find and Replace",
    "start": "352950",
    "end": "358520"
  },
  {
    "text": "refactoring that sucks to write like no that's not that's not a really good way to refactor and in JavaScript you really",
    "start": "358520",
    "end": "365220"
  },
  {
    "text": "don't have much of a choice but to do that but if you have typescript it gives you returned deterministic refactoring",
    "start": "365220",
    "end": "371010"
  },
  {
    "text": "it makes refactoring a lot safer and a lot more guaranteed and finally it's JavaScript that scales now it's",
    "start": "371010",
    "end": "377970"
  },
  {
    "text": "important to say that I don't mean it's scales from a performance perspective it outputs JavaScript that runs just the",
    "start": "377970",
    "end": "383520"
  },
  {
    "text": "same as every other kind of JavaScript it is JavaScript that scales from a maintenance perspective",
    "start": "383520",
    "end": "388890"
  },
  {
    "text": "so really typescript really starts to shine when you start to get into medium to large size projects if you're",
    "start": "388890",
    "end": "395070"
  },
  {
    "text": "creating an application with if you're creating a small web app with maybe five with two or three pages maybe it's a",
    "start": "395070",
    "end": "400620"
  },
  {
    "text": "front end for something maybe it's just a basic business website and you wanted to use it as excuse to learn typescript and you're",
    "start": "400620",
    "end": "406680"
  },
  {
    "text": "not gonna really be using that much JavaScript to begin with that's not typescripts best use case type scripts best use case is those large JavaScript",
    "start": "406680",
    "end": "415080"
  },
  {
    "text": "projects where you're getting to 20 30 50 100 200 plus files that you need to",
    "start": "415080",
    "end": "421169"
  },
  {
    "text": "maintain it's also very useful on a team if everybody's bought into typescript everybody's using typescript it's it",
    "start": "421169",
    "end": "428550"
  },
  {
    "text": "adds a lot of errors that you just wouldn't catch if you were just using javascript it has a lot of errors that",
    "start": "428550",
    "end": "433699"
  },
  {
    "text": "that make it really easy to tell when you've made a typo or when you've typed something that you've made a typo where",
    "start": "433699",
    "end": "440220"
  },
  {
    "text": "you've types or you've missed typed something or maybe even deleted a line of code typescript will help by adding",
    "start": "440220",
    "end": "445410"
  },
  {
    "start": "445000",
    "end": "538000"
  },
  {
    "text": "those guarantees best thing about typescript how many people have ever",
    "start": "445410",
    "end": "450509"
  },
  {
    "text": "used CoffeeScript CoffeeScript it's kind of an old Erlang a little bit older it's",
    "start": "450509",
    "end": "455550"
  },
  {
    "text": "kind of kind of died away how many people have heard of CoffeeScript okay great so CoffeeScript is a ruby ish",
    "start": "455550",
    "end": "461699"
  },
  {
    "text": "syntax kind of language that's what the rubyists tell me I've never you I don't use Ruby so I wouldn't know",
    "start": "461699",
    "end": "468150"
  },
  {
    "text": "and CoffeeScript was something that also transpiled down to JavaScript and it was popular I don't know seven eight years",
    "start": "468150",
    "end": "475259"
  },
  {
    "text": "ago and I and I tried using it a little bit back when I was you know new to web development and I really couldn't get",
    "start": "475259",
    "end": "482280"
  },
  {
    "text": "bought into it the main difference that typescript does is it doesn't try to not",
    "start": "482280",
    "end": "487409"
  },
  {
    "text": "be JavaScript it just takes JavaScript for what it is so one of the things that CoffeeScript",
    "start": "487409",
    "end": "492840"
  },
  {
    "text": "did was it tried to like obscure polish away consigned it kind of some of the JavaScript oddities that you know you",
    "start": "492840",
    "end": "499469"
  },
  {
    "text": "encounter in your day to day like double equals versus triple equals because at the end of the day javascript is just",
    "start": "499469",
    "end": "505680"
  },
  {
    "text": "straight weird javascript is just a weird language it has a lot of idiosyncrasies that don't make a lot of",
    "start": "505680",
    "end": "511650"
  },
  {
    "text": "sense like PHP used to be you know 10 15 20 years ago but that's okay because typescript is like bring me the weird I",
    "start": "511650",
    "end": "518490"
  },
  {
    "text": "want the weird I love the weird it doesn't try to not be JavaScript it just tries to make JavaScript better and when I I remember thinking to this and being",
    "start": "518490",
    "end": "525089"
  },
  {
    "text": "like oh this must have been a quote and actually it was something that I must have come up with because I've never been able to attribute it to anybody else but myself but I was I had this",
    "start": "525089",
    "end": "531870"
  },
  {
    "text": "moment where I was like Java typescript is just JavaScript trying to make JavaScript better and I was like ah",
    "start": "531870",
    "end": "536910"
  },
  {
    "text": "that's perfect way to describe it major companies are using typescript so how many people have heard of Google so",
    "start": "536910",
    "end": "545470"
  },
  {
    "start": "538000",
    "end": "618000"
  },
  {
    "text": "Google when back when I was developing angular 2 plus whatever it's up to angular 900 for all I know back when it",
    "start": "545470",
    "end": "552310"
  },
  {
    "text": "was developing angular it created a new language to kind of button on top to use that complimented angular called AK",
    "start": "552310",
    "end": "558610"
  },
  {
    "text": "script and it was essentially es6 with decorators or attributes and whatever",
    "start": "558610",
    "end": "564370"
  },
  {
    "text": "you would call attributes in c-sharp and vb.net it would add decorators into the language and Google you know at Google",
    "start": "564370",
    "end": "570880"
  },
  {
    "text": "was kind of like you know this is kind of strange because they had they were they were developing something that looked an awful lot like typescript and",
    "start": "570880",
    "end": "576520"
  },
  {
    "text": "eventually Google just kind of decided like you know instead of like creating two different languages that are kind of",
    "start": "576520",
    "end": "582220"
  },
  {
    "text": "developed in you know separate of each other why don't we just embrace typescript so they got together at the Microsoft team and they added in",
    "start": "582220",
    "end": "589410"
  },
  {
    "text": "experimental support for decorators or attributes whatever you want to call them when so Google's really embraced",
    "start": "589410",
    "end": "594880"
  },
  {
    "text": "typescript for what it is which is good and good that they threw away the Apps Script idea pretty early on too because",
    "start": "594880",
    "end": "600010"
  },
  {
    "text": "otherwise we'd end up with something like this famous xkcd comic where you have 14 standards and let's just create",
    "start": "600010",
    "end": "605320"
  },
  {
    "text": "a 15th one to cover all the use cases and now there's 15 competing standards right that's the kind of stuff that",
    "start": "605320",
    "end": "611860"
  },
  {
    "text": "happens but Google embraced typescript and really avoided that other major",
    "start": "611860",
    "end": "618850"
  },
  {
    "start": "618000",
    "end": "663000"
  },
  {
    "text": "companies are using it as well so slack and reddit are great examples where their engineering team has gone on to",
    "start": "618850",
    "end": "625600"
  },
  {
    "text": "blog about why what what they what caused them to transition a typescript and the the reddit article in particular",
    "start": "625600",
    "end": "632230"
  },
  {
    "text": "was really interesting because they evaluated a lot of languages they evaluated 10 plus languages to replace",
    "start": "632230",
    "end": "639490"
  },
  {
    "text": "you know or to button on top of their JavaScript ecosystem and they ultimately chose typescript these articles are",
    "start": "639490",
    "end": "644680"
  },
  {
    "text": "really interesting read I'll go ahead and click on them I'll wait if you go to my website and go to types kryptonite's",
    "start": "644680",
    "end": "650500"
  },
  {
    "text": "net you can follow through to the the links in these articles I absolutely if you're not a typescript fanatic or you",
    "start": "650500",
    "end": "655750"
  },
  {
    "text": "know are just curious about it I would recommend reading those because a lot of what they say is probably what I say too but they provide they go into a little",
    "start": "655750",
    "end": "662590"
  },
  {
    "text": "more detail so a little bit of a soapbox moment ok we're all a lot of us are",
    "start": "662590",
    "end": "668410"
  },
  {
    "start": "663000",
    "end": "699000"
  },
  {
    "text": "dotnet developers and one of the things that I have a couple of friends who talk about JavaScript a lot",
    "start": "668410",
    "end": "674500"
  },
  {
    "text": "they're huge into JavaScript but they kind of look on - they look onto Microsoft kind of like with a weird eye",
    "start": "674500",
    "end": "680080"
  },
  {
    "text": "and they say that typescript was just Microsoft's way of C scharping all the things and that really frustrated me",
    "start": "680080",
    "end": "686230"
  },
  {
    "text": "because typescript is really a separate thing from dotnet and it really it if",
    "start": "686230",
    "end": "691510"
  },
  {
    "text": "you look at it if you start to compare it it kind of you know it adds a type system but that's really where the commonalities end it really isn't a way",
    "start": "691510",
    "end": "697930"
  },
  {
    "text": "to just see Sharpe all the things as they said what typescript isn't right it's not manifestly about turning",
    "start": "697930",
    "end": "703810"
  },
  {
    "start": "699000",
    "end": "731000"
  },
  {
    "text": "JavaScript into c-sharp you will never be the best of breed in one ecosystem by attempting to retrofit another on top of",
    "start": "703810",
    "end": "709810"
  },
  {
    "text": "it and so I so I went to a conference where somebody somebody asked a question",
    "start": "709810",
    "end": "715810"
  },
  {
    "text": "of one of the designers of typescript that said yeah so I know the typescript was designed to appeal to dotnet",
    "start": "715810",
    "end": "721870"
  },
  {
    "text": "developers went on to ants asked the question I don't remember what the question was and he said well let me let me address the first part of what you",
    "start": "721870",
    "end": "727360"
  },
  {
    "text": "said because typescript was decidedly not designed to do that and the guy who",
    "start": "727360",
    "end": "732970"
  },
  {
    "start": "731000",
    "end": "761000"
  },
  {
    "text": "said this was Anders Helzberg the guy who designed c-sharp and the guy who designed typescript so from the man",
    "start": "732970",
    "end": "739690"
  },
  {
    "text": "himself right I actually gave this presentation about a year ago and I emailed him and was like can you provide",
    "start": "739690",
    "end": "745300"
  },
  {
    "text": "a quote to like back this up something that I can cite and he within a half an hour the guy had emailed me back with",
    "start": "745300",
    "end": "751240"
  },
  {
    "text": "this great quote saying that it's not just c-sharp all the things so if you're doubtful of typescript if you think that it's just Microsoft's way of adding",
    "start": "751240",
    "end": "757300"
  },
  {
    "text": "dotnet to JavaScript it's not okay soapbox over all right so a lot of",
    "start": "757300",
    "end": "763779"
  },
  {
    "start": "761000",
    "end": "831000"
  },
  {
    "text": "people talk about when they talk about typescript they talk about a lot of the a lot of the benefits including like okay yeah if you it's it's very natural",
    "start": "763779",
    "end": "771130"
  },
  {
    "text": "to use if you're if you're using webpack or other things same the same thing with",
    "start": "771130",
    "end": "776709"
  },
  {
    "text": "babel and then it becomes very easy to use like all the cool features that are in that are in es6 you can add them to",
    "start": "776709",
    "end": "784089"
  },
  {
    "text": "type scripts as well a single weight is a great example something to unwrap promises you can stay out of a callback",
    "start": "784089",
    "end": "789130"
  },
  {
    "text": "hell or promise hell whatever they call it a sync away it's a great reason to use it classes which are syntactic sugar",
    "start": "789130",
    "end": "795040"
  },
  {
    "text": "on top of constructor functions in JavaScript another great reason to use typescript arrow functions or lambda",
    "start": "795040",
    "end": "801910"
  },
  {
    "text": "kind of like lambdas and c-sharp pretty similar another good reason and then some basic",
    "start": "801910",
    "end": "807550"
  },
  {
    "text": "type usage but a lot a lot of folks get excited about these things and those are great reasons to use typescript",
    "start": "807550",
    "end": "814420"
  },
  {
    "text": "but they're not the reason to use typescript in my opinion the best reason to use typescript is the fantastic type",
    "start": "814420",
    "end": "819910"
  },
  {
    "text": "system that it provides and I'm gonna go over some examples and wrap it all up with a cool example at the end to really showcase all the power and awesomeness",
    "start": "819910",
    "end": "827260"
  },
  {
    "text": "that typescript has we gotta start somewhere though let's dive in so let's",
    "start": "827260",
    "end": "834340"
  },
  {
    "start": "831000",
    "end": "865000"
  },
  {
    "text": "talk basic so javascript has a concept a very primitive concept of types right so",
    "start": "834340",
    "end": "842140"
  },
  {
    "text": "if you if you do typeof and you give it a variable or an object it will output a",
    "start": "842140",
    "end": "847990"
  },
  {
    "text": "string to say this is a string this is a number this is an object this is a function so on and so forth so you have",
    "start": "847990",
    "end": "853090"
  },
  {
    "text": "all the same types that you have in JavaScript which makes sense because typescript just is JavaScript right you",
    "start": "853090",
    "end": "858490"
  },
  {
    "text": "also have Nolan undefined which of course we could write papers about and then of course we have the array type so none of that's really new but one of the",
    "start": "858490",
    "end": "867880"
  },
  {
    "text": "cool things in typescript provides is it automatically in in infers the type of a",
    "start": "867880",
    "end": "873460"
  },
  {
    "text": "variable based on what you're setting it to when you first declare it so in this",
    "start": "873460",
    "end": "878470"
  },
  {
    "text": "case we're declaring a number equal to 42 typescript automatically says okay this variable is of type number which is",
    "start": "878470",
    "end": "884980"
  },
  {
    "text": "cool and if you try to mix types types Grif will show an error so if you try to take that a number and assign it to a",
    "start": "884980",
    "end": "890950"
  },
  {
    "text": "string type script will send an error back to you and complain and say no this is invalid now the interesting thing",
    "start": "890950",
    "end": "896830"
  },
  {
    "text": "about errors in typescript is because all valid typescript they're valid javascript is valid typescript this will",
    "start": "896830",
    "end": "902560"
  },
  {
    "text": "still transpile this will still output some JavaScript but typescript is just",
    "start": "902560",
    "end": "908020"
  },
  {
    "text": "giving you an error it's giving you something to telling you it's sending up a red flag saying hey by the way this",
    "start": "908020",
    "end": "913420"
  },
  {
    "text": "thing that you've declared isn't you you said it was a number just implicitly so you can't set it to a string so that's",
    "start": "913420",
    "end": "920770"
  },
  {
    "text": "good that's good the type scripts giving you those warnings you can also be explicit about it so we could declare",
    "start": "920770",
    "end": "926440"
  },
  {
    "start": "923000",
    "end": "967000"
  },
  {
    "text": "our a number equal to 42 and give it what's called a type annotation now you can do that in c-sharp and by using by",
    "start": "926440",
    "end": "933730"
  },
  {
    "text": "replacing the var if you're a fan of var like I am replacing the var with the type of course but that's really",
    "start": "933730",
    "end": "939160"
  },
  {
    "text": "be altering like a JavaScript in a fundamental way so instead they gave it syntax for easily and conveniently",
    "start": "939160",
    "end": "945490"
  },
  {
    "text": "adding a type and what's called a type annotation and you could say that this variable is of type number now most of",
    "start": "945490",
    "end": "952300"
  },
  {
    "text": "the time you don't need to do this if you if you declare it on the same line you don't have to do this explicitly but",
    "start": "952300",
    "end": "958089"
  },
  {
    "text": "it is useful if you declare a variable and you're not setting it in the same line right you're saying that this variable will be of this type cool",
    "start": "958089",
    "end": "965800"
  },
  {
    "text": "awesome explicit types are really useful for",
    "start": "965800",
    "end": "970990"
  },
  {
    "start": "967000",
    "end": "1055000"
  },
  {
    "text": "when you're a refactoring so let's say that you you you took in what I'm talking about today and you were like",
    "start": "970990",
    "end": "977050"
  },
  {
    "text": "you know what I'm bought in I want to I want to know about typescript and you start renaming all your JS files to TS",
    "start": "977050",
    "end": "982089"
  },
  {
    "text": "right so you're gonna start getting errors you're gonna start getting things that are kind of kind of make you kind of make you feel bad about yourself a",
    "start": "982089",
    "end": "987730"
  },
  {
    "text": "little bit but what you can do is add in you can add in a type annotation for",
    "start": "987730",
    "end": "993790"
  },
  {
    "text": "what's called the any type and any type how many people use dynamic and c-sharp or late binding and vb.net okay a few of",
    "start": "993790",
    "end": "1000149"
  },
  {
    "text": "you so it basically the dynamic keyword says I'm not in c-sharp says this variable I don't know I'm just gonna",
    "start": "1000149",
    "end": "1005910"
  },
  {
    "text": "assume that you're gonna type and know what you're talking about and I'm not going to do any compile time checking on this variable you can declare it a",
    "start": "1005910",
    "end": "1011430"
  },
  {
    "text": "dynamic and it's basically you can start calling methods and properties on it now if they did exist if they don't exist that'll throw a runtime error right same",
    "start": "1011430",
    "end": "1018209"
  },
  {
    "text": "concept applies here the any type just says you know what J is its type scripts way of saying you throw up your hands and you say this thing could be anything",
    "start": "1018209",
    "end": "1025530"
  },
  {
    "text": "right you don't commonly use it in what I would call Greenfield type script development but it's really useful here",
    "start": "1025530",
    "end": "1031470"
  },
  {
    "text": "when you're doing that gradual refactoring so you want to see some of those errors disappear you want to you want to get them you want to take away",
    "start": "1031470",
    "end": "1037380"
  },
  {
    "text": "the most critical ones maybe you're looking at a variable that you know is gonna have XYZ behavior after you after",
    "start": "1037380",
    "end": "1043860"
  },
  {
    "text": "you've run it because you've run that piece of code a million times so you might add the any type to just get that error out of there right it's a good way",
    "start": "1043860",
    "end": "1049169"
  },
  {
    "text": "of gradual refactoring so that way you can really focus and hone in on the things that really matter",
    "start": "1049169",
    "end": "1055490"
  },
  {
    "start": "1055000",
    "end": "1120000"
  },
  {
    "text": "functions functions in JavaScript are kind of a free for all javascript is weird javascript is a free for all i I don't know what drugs Brendan Eich",
    "start": "1057059",
    "end": "1064020"
  },
  {
    "text": "was on when he designed it in ten days but there it is right so when you declare a function inside of JavaScript",
    "start": "1064020",
    "end": "1069780"
  },
  {
    "text": "you can't you're not really bound like see sharper vb.net to pass in all the",
    "start": "1069780",
    "end": "1075000"
  },
  {
    "text": "arguments to that function so you can pass in so we haven't we have a function that takes that takes a name and an age",
    "start": "1075000",
    "end": "1081240"
  },
  {
    "text": "and prints them to the console and you would expect that name would probably be a string if you're looking at it the Aged probably be a number so you call it",
    "start": "1081240",
    "end": "1088650"
  },
  {
    "text": "the first time with print age and you give it the name spencer and a number 30 which makes which makes sense right you",
    "start": "1088650",
    "end": "1094470"
  },
  {
    "text": "don't know ahead of time that that's exactly what they wanted but it makes sense you can also call it without foot",
    "start": "1094470",
    "end": "1100470"
  },
  {
    "text": "without arguments right and so you know you're leaving yourself open to you know possible runtime errors if it tries to",
    "start": "1100470",
    "end": "1106110"
  },
  {
    "text": "access a property on what is now an undefined variable or you can just give it as many arguments as you want right",
    "start": "1106110",
    "end": "1111570"
  },
  {
    "text": "it's a free-for-all JavaScript you can just call functions all day just like this right you don't have to you're not beholden to the proper to the parameters",
    "start": "1111570",
    "end": "1118950"
  },
  {
    "text": "that the function declares but in typescript this is better enforced right so you can do you can add in those type",
    "start": "1118950",
    "end": "1125550"
  },
  {
    "start": "1120000",
    "end": "1187000"
  },
  {
    "text": "annotations this is another use this is a really important use of type annotations right notice that when I switched from this",
    "start": "1125550",
    "end": "1132060"
  },
  {
    "text": "this is just JavaScript back to this which is typescript the the parameters in that function I've given them some",
    "start": "1132060",
    "end": "1137730"
  },
  {
    "text": "type annotations I said this is supposed to this name is supposed to be of type string and this age is supposed to be of",
    "start": "1137730",
    "end": "1143430"
  },
  {
    "text": "type number and now suddenly that first call to print name and age Spencer 30 typescript interprets that is great",
    "start": "1143430",
    "end": "1149670"
  },
  {
    "text": "you've you've you've met the contract for this function and then of course it will throw it will not throw it will",
    "start": "1149670",
    "end": "1155790"
  },
  {
    "text": "print a couple of errors too you know the error log or wherever your errors are being displayed for type script to",
    "start": "1155790",
    "end": "1161400"
  },
  {
    "text": "say you're not calling this function with any arguments and you've not declared any of these arguments as optional so I'm gonna I'm gonna show you",
    "start": "1161400",
    "end": "1166620"
  },
  {
    "text": "an error and then you've declared you've you've sent in way too many arguments to this function and so I'm gonna also",
    "start": "1166620",
    "end": "1173100"
  },
  {
    "text": "throw an error right or give you an error inside your console again this will still transpile down to JavaScript",
    "start": "1173100",
    "end": "1178350"
  },
  {
    "text": "but typescript is now warning you ahead of time it's providing those guarantees at compile time at Build time to say",
    "start": "1178350",
    "end": "1184560"
  },
  {
    "text": "that these things aren't valid so you",
    "start": "1184560",
    "end": "1189690"
  },
  {
    "start": "1187000",
    "end": "1255000"
  },
  {
    "text": "can also add a type annotation to a function to set its return type so really useful if you want to say if you",
    "start": "1189690",
    "end": "1195780"
  },
  {
    "text": "want to make sure that you return ace to always return a string from a function or always return a number or ease return",
    "start": "1195780",
    "end": "1202260"
  },
  {
    "text": "an object of a certain shape or in this case return void which means to say that we're just printing to a console we don't expect to do",
    "start": "1202260",
    "end": "1208260"
  },
  {
    "text": "anything with this thing other than just you know add some data to the console so we'll just say return type void and then",
    "start": "1208260",
    "end": "1213900"
  },
  {
    "text": "if you do add in a return type if you say return 42 or whatever type script will give you yet another error saying",
    "start": "1213900",
    "end": "1219659"
  },
  {
    "text": "well you declared this as void but you're returning a value you know pick one pick one right so to be useful again",
    "start": "1219659",
    "end": "1228419"
  },
  {
    "text": "compile-time enforced if you don't if you do the other way right if you declare a function as returning a number and let's say you created a function",
    "start": "1228419",
    "end": "1235500"
  },
  {
    "text": "called operate and you just take two numbers and then you give them an operation and you say I want to add them I want to subtract them whatever if",
    "start": "1235500",
    "end": "1241770"
  },
  {
    "text": "operation equals add then return num1 plus num2 but if you don't return anything else from this function it will",
    "start": "1241770",
    "end": "1248730"
  },
  {
    "text": "give you an error right it'll it'll print an error for you telling you that this is invalid that it expects you to have a return type interfaces really",
    "start": "1248730",
    "end": "1257490"
  },
  {
    "start": "1255000",
    "end": "1298000"
  },
  {
    "text": "important probably the types you'll use the most certainly the types I use the most inside of my type script they are",
    "start": "1257490",
    "end": "1262559"
  },
  {
    "text": "similar but they're not the same as types in Earth's our interfaces inside of dotnet and Java sorry dotnet and Java",
    "start": "1262559",
    "end": "1269210"
  },
  {
    "text": "so they're not the same but they're pretty similar here's an example of an interface so we've declared a person",
    "start": "1269210",
    "end": "1275850"
  },
  {
    "text": "interface right so this person interface has a first name and has a last name and notice that we have some type",
    "start": "1275850",
    "end": "1281429"
  },
  {
    "text": "annotations this looks really similar to one that we would declare in c-sharp right except the except the type of",
    "start": "1281429",
    "end": "1287820"
  },
  {
    "text": "arguments in after the variable as opposed to in front of it so we say we have a first name and a last name",
    "start": "1287820",
    "end": "1294179"
  },
  {
    "text": "that is what defines a person interface right the thing about the thing about",
    "start": "1294179",
    "end": "1300240"
  },
  {
    "start": "1298000",
    "end": "1373000"
  },
  {
    "text": "JavaScript is that javascript is very structurally typed and I that's a really weird way of saying that structure",
    "start": "1300240",
    "end": "1306870"
  },
  {
    "text": "matters more to JavaScript than type information because you do type of and you pass in an object you're just gonna",
    "start": "1306870",
    "end": "1312870"
  },
  {
    "text": "get object it doesn't know that it's a person right so structural typing is really important",
    "start": "1312870",
    "end": "1318929"
  },
  {
    "text": "so let's say we declare a function called add person and that takes a person argument it takes a person argument and the part and you've",
    "start": "1318929",
    "end": "1324690"
  },
  {
    "text": "declared your person as an interface up there the first name and last name it's more the shape of the op de because",
    "start": "1324690",
    "end": "1329820"
  },
  {
    "text": "object literals are so common in JavaScript it's more the shape of the shape of the object matters more than its tight because typing typing in",
    "start": "1329820",
    "end": "1336390"
  },
  {
    "text": "JavaScript practically is just very primitive right it's looking at compile-time but build",
    "start": "1336390",
    "end": "1341730"
  },
  {
    "text": "time to say hey did you given me a person argument that has a furtive you given me an argument that has a first",
    "start": "1341730",
    "end": "1347850"
  },
  {
    "text": "name and a last name in this case this is totally valid right because we're passing an object literal it fits that contract it fits the shape",
    "start": "1347850",
    "end": "1355529"
  },
  {
    "text": "of that interface if you try to leave off the first name if you give it or the last name and you give it just a first",
    "start": "1355529",
    "end": "1360929"
  },
  {
    "text": "name with Mac and you give it an object literal it will give you an error and say no you this is this doesn't meet the",
    "start": "1360929",
    "end": "1367230"
  },
  {
    "text": "contract this doesn't meet the defined contract that you've given me that you've declared for this interface it's",
    "start": "1367230",
    "end": "1374309"
  },
  {
    "start": "1373000",
    "end": "1385000"
  },
  {
    "text": "called a quality called duck typing if it quacks like a duck walks like a duck and looks like a duck it's probably a",
    "start": "1374309",
    "end": "1380700"
  },
  {
    "text": "duck usually never fails to get a laugh or two all right so the thing about the",
    "start": "1380700",
    "end": "1388890"
  },
  {
    "start": "1385000",
    "end": "1440000"
  },
  {
    "text": "thing about interfaces is that you may want to you you want to be able to define something that optionally has a",
    "start": "1388890",
    "end": "1394590"
  },
  {
    "text": "property it may or may not have a property you may check that it you want to check that at runtime right so maybe",
    "start": "1394590",
    "end": "1399659"
  },
  {
    "text": "we have a person who as who always has a first name every person in your you know domain has a first name but doesn't",
    "start": "1399659",
    "end": "1405960"
  },
  {
    "text": "always have a last name so we add a question mark just in front of the last name or yeah after the last name declaration to say this property is",
    "start": "1405960",
    "end": "1412679"
  },
  {
    "text": "optional what that gives us as we go",
    "start": "1412679",
    "end": "1418020"
  },
  {
    "text": "back to that example where we were just calling ad person in with Matt we changed our declaration our interface",
    "start": "1418020",
    "end": "1423419"
  },
  {
    "text": "declaration a little bit to make that last name property optional and then we call add person and give it just a first",
    "start": "1423419",
    "end": "1429270"
  },
  {
    "text": "name and now that's totally valid typescript is like awesome doesn't expect it's not expecting it it's not expecting last name to always be there",
    "start": "1429270",
    "end": "1435750"
  },
  {
    "text": "you've declared a deception all right so very useful actual properties but think",
    "start": "1435750",
    "end": "1442740"
  },
  {
    "start": "1440000",
    "end": "1464000"
  },
  {
    "text": "about objects in JavaScript is that they can take all kinds of shapes I mean object or sorry functions are",
    "start": "1442740",
    "end": "1449460"
  },
  {
    "text": "first class citizens in Java there are objects and functions are objects and can have properties and even other",
    "start": "1449460",
    "end": "1455039"
  },
  {
    "text": "functions attached to them right so we want to be able to declare an interface that really treat that really says that",
    "start": "1455039",
    "end": "1461460"
  },
  {
    "text": "hey this thing that I'm declaring can also maybe be a function so let's take this syntax just a little bit different",
    "start": "1461460",
    "end": "1467549"
  },
  {
    "start": "1464000",
    "end": "1582000"
  },
  {
    "text": "right instead of declaring a property name we give it a we give it a parenthesis at the beginning and end give it some parameters",
    "start": "1467549",
    "end": "1473610"
  },
  {
    "text": "with some type annotations and then we say : void right so this is declaring the shape of a logger function right so",
    "start": "1473610",
    "end": "1481350"
  },
  {
    "text": "this is what that might look like if you declared your logger interface and you said oh this is gonna be a function it takes in two strings and doesn't return",
    "start": "1481350",
    "end": "1487620"
  },
  {
    "text": "anything so now we can set that logger function too we could set we can set a",
    "start": "1487620",
    "end": "1493140"
  },
  {
    "text": "new variable to a logger function give it a type annotation that says this is a logger and then type script will say oh",
    "start": "1493140",
    "end": "1498450"
  },
  {
    "text": "you said that this will be a logger so I expect this function will have this particular shape it takes these",
    "start": "1498450",
    "end": "1504090"
  },
  {
    "text": "arguments and doesn't return anything so pretty cool it's really important when you get into things like jQuery how many",
    "start": "1504090",
    "end": "1510450"
  },
  {
    "text": "people have used jQuery how many people still extensively use it or use it at all okay no shame no shame just to be",
    "start": "1510450",
    "end": "1517080"
  },
  {
    "text": "clear right jQuery is like duct-tape it fixes everything so I still use it",
    "start": "1517080",
    "end": "1522360"
  },
  {
    "text": "occasionally too so in this case jQuery can have a light has a lot of different things in it and it it at its core is a",
    "start": "1522360",
    "end": "1530400"
  },
  {
    "text": "function where you give it a selector and it returns a list of elements right and it could return you can give it a",
    "start": "1530400",
    "end": "1536010"
  },
  {
    "text": "context as well you know this is we're just keeping this example simple give it a selector you know an ID tag or",
    "start": "1536010",
    "end": "1541560"
  },
  {
    "text": "something like that and then it returns a jQuery element but jQuery also defines functions that are really useful it",
    "start": "1541560",
    "end": "1548160"
  },
  {
    "text": "defines dot jQuery dot H acts which allows you to conveniently make Ajax calls without you know mooing up an",
    "start": "1548160",
    "end": "1554070"
  },
  {
    "text": "xmlhttprequest it also has extends where you give it to objects and it returns a new object that gives you that gives you",
    "start": "1554070",
    "end": "1561570"
  },
  {
    "text": "the the properties of those objects of those of the object that you passed in first it gives you all the second and",
    "start": "1561570",
    "end": "1566760"
  },
  {
    "text": "third and fourth and so on so really important for declaring the this",
    "start": "1566760",
    "end": "1572850"
  },
  {
    "text": "now this jQuery interface can now represent everything that jQuery represents if you're importing the",
    "start": "1572850",
    "end": "1578550"
  },
  {
    "text": "jQuery library if you're using that duct-tape to patch together your web application index types so index types",
    "start": "1578550",
    "end": "1585960"
  },
  {
    "start": "1582000",
    "end": "1652000"
  },
  {
    "text": "is another kind of interface declaration really useful mostly so index is so a",
    "start": "1585960",
    "end": "1591870"
  },
  {
    "text": "property a an object in JavaScript is basically a dictionary it's basically a",
    "start": "1591870",
    "end": "1597330"
  },
  {
    "text": "bag of properties and you can use index and pass it in a string and that same thing as do it's pretty much the same",
    "start": "1597330",
    "end": "1603060"
  },
  {
    "text": "thing as doing dot name you can say bracket Kuo name and quote bracket right you can",
    "start": "1603060",
    "end": "1608860"
  },
  {
    "text": "pass in the name string to get back that name property off of that object but this is really useful this is really",
    "start": "1608860",
    "end": "1616030"
  },
  {
    "text": "useful if you want to be able to say the type of the thing that you're returning let's say that you have a number yeah",
    "start": "1616030",
    "end": "1622810"
  },
  {
    "text": "number dictionary where you give it a string and you give it a string and you say that I want to base if I type in the",
    "start": "1622810",
    "end": "1629650"
  },
  {
    "text": "string 100 any I want to return back a number I expect this thing to literally",
    "start": "1629650",
    "end": "1635290"
  },
  {
    "text": "look up numbers right so it's really useful if you want to constrain your indexes to return a certain type not",
    "start": "1635290",
    "end": "1640960"
  },
  {
    "text": "super common to use a my in my in my most of my types trip development but useful when I need it runtime impact of",
    "start": "1640960",
    "end": "1649030"
  },
  {
    "text": "interfaces so interfaces is strictly a typescript concept not a JavaScript concept so when you transpile when your",
    "start": "1649030",
    "end": "1655870"
  },
  {
    "start": "1652000",
    "end": "1696000"
  },
  {
    "text": "interfaces are transpiled because i usually declare interfaces and separate files like I wouldn't see sharp it",
    "start": "1655870",
    "end": "1662380"
  },
  {
    "text": "doesn't compile down it doesn't transpile down to anything because there is no runtime impact of interfaces it's",
    "start": "1662380",
    "end": "1669460"
  },
  {
    "text": "all about providing guarantees upfront compared providing guarantees as your code is being developed as it's being",
    "start": "1669460",
    "end": "1675430"
  },
  {
    "text": "compiled and built but there is no such thing as an interface once you get once you cross from typescript into",
    "start": "1675430",
    "end": "1680800"
  },
  {
    "text": "JavaScript it's no man's land again it's a free-for-all there's no such thing but it gives you those guarantees ahead of",
    "start": "1680800",
    "end": "1686410"
  },
  {
    "text": "time those still make it really useful but they have no runtime impact really important kind of a distinction to make between interfaces and c-sharp and",
    "start": "1686410",
    "end": "1693040"
  },
  {
    "text": "interfaces and JavaScript or sorry Tex crap generics so generics",
    "start": "1693040",
    "end": "1699130"
  },
  {
    "start": "1696000",
    "end": "1756000"
  },
  {
    "text": "are really one of my favorite typing features of dotnet and of course they made their way into typescript",
    "start": "1699130",
    "end": "1705880"
  },
  {
    "text": "appropriately right we have a cool type system why wouldn't we have generics first and most important use case",
    "start": "1705880",
    "end": "1712230"
  },
  {
    "text": "certainly the most common is providing an array of things so an array in",
    "start": "1712230",
    "end": "1717250"
  },
  {
    "text": "JavaScript can contain anything it can contain any type it can you can push a string on to it and then a number and",
    "start": "1717250",
    "end": "1722740"
  },
  {
    "text": "then an object and then a function totally valid but in typescript case it could be useful at build time to say I",
    "start": "1722740",
    "end": "1729790"
  },
  {
    "text": "want to constrain this array to only take in things that are of the person",
    "start": "1729790",
    "end": "1735130"
  },
  {
    "text": "type that fit the shape of the person object such that if we are first you",
    "start": "1735130",
    "end": "1740920"
  },
  {
    "text": "to the push where we press in an object literal and we give it a first name in the last name that's totally valid right",
    "start": "1740920",
    "end": "1747640"
  },
  {
    "text": "it's that's totally valid code and typescript passes it is totally valid but as soon as we try to push in just a",
    "start": "1747640",
    "end": "1752950"
  },
  {
    "text": "string with the first in the last name it looks like a first and a last name but as soon as we push in a string that's when typescript complains and",
    "start": "1752950",
    "end": "1759160"
  },
  {
    "start": "1756000",
    "end": "1772000"
  },
  {
    "text": "says no you told me that this array is going to be an array of person not an array of anis in this case an array of",
    "start": "1759160",
    "end": "1766060"
  },
  {
    "text": "any would be appropriate to do that right so again typescript giving you",
    "start": "1766060",
    "end": "1771220"
  },
  {
    "text": "that nice compile time information of",
    "start": "1771220",
    "end": "1776440"
  },
  {
    "start": "1772000",
    "end": "1868000"
  },
  {
    "text": "course can't mention interface without mentioning classes at least a little bit so classes can protect contain",
    "start": "1776440",
    "end": "1782080"
  },
  {
    "text": "properties and behaviors they're basically like I said syntactic sugar over constructor functions you can",
    "start": "1782080",
    "end": "1787570"
  },
  {
    "text": "declare properties on them and you can create a declared behaviors they can also implement interfaces so that such",
    "start": "1787570",
    "end": "1793870"
  },
  {
    "text": "that you can say that this class is implements this interface and then it'll say you know I expect you to have this",
    "start": "1793870",
    "end": "1800440"
  },
  {
    "text": "property on this class interesting thing you don't need to do that if you want your class to be usable on top of a",
    "start": "1800440",
    "end": "1807010"
  },
  {
    "text": "person interface right because it's structural it's just looking for structure you could literally just have a first and last name property this is",
    "start": "1807010",
    "end": "1813010"
  },
  {
    "text": "just to kind of help you along right as you're writing your code just kind of helps you to know oh I want to declare in a concrete employee object and I'm",
    "start": "1813010",
    "end": "1819820"
  },
  {
    "text": "just gonna extend person right I'm just gonna give it that interface such such that you know I know it you know that's",
    "start": "1819820",
    "end": "1825430"
  },
  {
    "text": "that's my way of protecting myself and making sure that I'm thinking through everything classes can also inherit from",
    "start": "1825430",
    "end": "1831730"
  },
  {
    "text": "other classes just like just like in C sharp or vb.net or Java they can inherit",
    "start": "1831730",
    "end": "1837700"
  },
  {
    "text": "from other classes which is pretty useful if you have an employee but you have a specifically a sales",
    "start": "1837700",
    "end": "1842920"
  },
  {
    "text": "representative that has a sales code something like that right it depends on your domain use strongest use case for",
    "start": "1842920",
    "end": "1849190"
  },
  {
    "text": "classes is inheritance and reusing code but JavaScript isn't really you know",
    "start": "1849190",
    "end": "1854260"
  },
  {
    "text": "classes were kind of added to JavaScript because people asked for them they don't",
    "start": "1854260",
    "end": "1861220"
  },
  {
    "text": "necessarily make sense in a prototype in a proto type of language like JavaScript they are really useful you don't want to",
    "start": "1861220",
    "end": "1868300"
  },
  {
    "start": "1868000",
    "end": "1912000"
  },
  {
    "text": "end up with something like this where you have well you're having a class that does I",
    "start": "1868300",
    "end": "1873720"
  },
  {
    "text": "don't even know what that is but you the the most important thing is I would keep your I object hierarchies as flat as you",
    "start": "1873720",
    "end": "1879870"
  },
  {
    "text": "can right it's like just don't overdo it don't overdo it if I use I use a lot of react react is one of my favorite is",
    "start": "1879870",
    "end": "1886440"
  },
  {
    "text": "probably my favorite front-end framework and when I use types on top of react I use I inherit from react component which",
    "start": "1886440",
    "end": "1894419"
  },
  {
    "text": "provides me with some typing information inside of that component to make it more useful that's one of the good use cases",
    "start": "1894419",
    "end": "1900840"
  },
  {
    "text": "for classes but you know don't create I would not I would stick with a simple object hierarchy I wouldn't try to",
    "start": "1900840",
    "end": "1906090"
  },
  {
    "text": "overdo it that's my opinion and you're free to disagree many people do union",
    "start": "1906090",
    "end": "1913710"
  },
  {
    "start": "1912000",
    "end": "1968000"
  },
  {
    "text": "types okay super super awesome now we're getting into the nitty-gritty now we're getting into the really good stuff so",
    "start": "1913710",
    "end": "1920100"
  },
  {
    "text": "Union types allow you to in JavaScript of course you declare a variable it can be of any type because JavaScript",
    "start": "1920100",
    "end": "1926309"
  },
  {
    "text": "doesn't care as long it just has a variable as a storage mechanism but in typescript you could say well hey I want",
    "start": "1926309",
    "end": "1932730"
  },
  {
    "text": "this variable to be a number or a string so use that little pipe operator you've got that input you get a number pipe",
    "start": "1932730",
    "end": "1939269"
  },
  {
    "text": "string is saying number or string it's literally saying number or string so those first two when we're setting that",
    "start": "1939269",
    "end": "1944850"
  },
  {
    "text": "input we're setting it to a string that's totally valid typescript says that's great we send it to a number same",
    "start": "1944850",
    "end": "1950309"
  },
  {
    "text": "thing typescript says that's awesome but as soon as we try to declare it set it to anything else that doesn't meet the",
    "start": "1950309",
    "end": "1956009"
  },
  {
    "text": "the shape of a string or a number we get a we get an error right we're declaring it we're setting it to an object literal",
    "start": "1956009",
    "end": "1962159"
  },
  {
    "text": "and we are getting an error I'm really cool the very basic use case but wait",
    "start": "1962159",
    "end": "1967379"
  },
  {
    "text": "till you see what we wait to see there's like way more to it right so I'll give you an example",
    "start": "1967379",
    "end": "1972509"
  },
  {
    "start": "1968000",
    "end": "2062000"
  },
  {
    "text": "jQuery dot H axe is a function on jQuery that can take a couple of different",
    "start": "1972509",
    "end": "1978029"
  },
  {
    "text": "arguments in a couple of different shapes first thing it can taken is just a string to say I'm just doing a get request or something to this URL it can",
    "start": "1978029",
    "end": "1985590"
  },
  {
    "text": "also take a flat object that said that has properties on it right then it says I want to do a post instead I want to do",
    "start": "1985590",
    "end": "1992879"
  },
  {
    "text": "here's the URL of that of that request so you can actually you know make it so you can it's it's convenient for the",
    "start": "1992879",
    "end": "1998159"
  },
  {
    "text": "developer because then you can just make a request using a URL and that's great but you can also pass in a set of Ajax",
    "start": "1998159",
    "end": "2004639"
  },
  {
    "text": "options like the URL and the type get post put whatever that's really useful when you're wanting",
    "start": "2004639",
    "end": "2009990"
  },
  {
    "text": "to declare a function called Ajax request you want to say hey I want you to give it a string because I'm convenient I'm I'm another an awesome",
    "start": "2009990",
    "end": "2016410"
  },
  {
    "text": "developer I want to make it easy on you give it a string or you could say I want to give it an ajax option well you can",
    "start": "2016410",
    "end": "2023100"
  },
  {
    "text": "do something like this here might be the body of your function right if got if the type of the type of the variable",
    "start": "2023100",
    "end": "2030330"
  },
  {
    "text": "that's being passed in that's a JavaScript construct type of is equal to string then I want to do dollar sign",
    "start": "2030330",
    "end": "2036630"
  },
  {
    "text": "duck get and just pass that in or if it's not if it is of type Ajax options I",
    "start": "2036630",
    "end": "2043170"
  },
  {
    "text": "want to give it the URL and then I want to pass in an object an object to",
    "start": "2043170",
    "end": "2048570"
  },
  {
    "text": "represent the options and there's many options that can be on Ajax this is totally oversimplified this is totally",
    "start": "2048570",
    "end": "2054388"
  },
  {
    "text": "simplified but you get the point right because this is a totally valid thing in JavaScript so of course you're able to do it in typescript this is one",
    "start": "2054389",
    "end": "2060270"
  },
  {
    "text": "of the core types of typescript string literal types and we got a new syntax",
    "start": "2060270",
    "end": "2065638"
  },
  {
    "start": "2062000",
    "end": "2135000"
  },
  {
    "text": "right I've declared something called a type a type of suit in JavaScript enums",
    "start": "2065639",
    "end": "2071940"
  },
  {
    "text": "don't exist conceptually you can kind of create them not exactly like any new in",
    "start": "2071940",
    "end": "2079080"
  },
  {
    "text": "C sharp or vb.net or Java but you can make them but a lot of times in JavaScript you pass around strings you",
    "start": "2079080",
    "end": "2086040"
  },
  {
    "text": "just pass around strings to specify I want to do a get request or a post request right that's very common so",
    "start": "2086040",
    "end": "2092128"
  },
  {
    "text": "string literal types are really convenient because you could say hey I want to constrain this particular type",
    "start": "2092129",
    "end": "2097980"
  },
  {
    "text": "to be one of these four strings there's a lot of cool uses but for this example",
    "start": "2097980",
    "end": "2104070"
  },
  {
    "text": "let's declare a variable called a suit and give it the type annotation that says this is a suit as soon as we set it",
    "start": "2104070",
    "end": "2110100"
  },
  {
    "text": "equal to heart that's totally valid typescript loves it but as soon as we do the same thing on the next line where we",
    "start": "2110100",
    "end": "2115290"
  },
  {
    "text": "try to set it to four write a card rank as opposed to a suit that's when",
    "start": "2115290",
    "end": "2121050"
  },
  {
    "text": "typescript gives us an error and says this is invalid and again this is really this is really respecting what",
    "start": "2121050",
    "end": "2127500"
  },
  {
    "text": "JavaScript is right a lot of string literals being passed around to modify the behavior of a certain function so",
    "start": "2127500",
    "end": "2134550"
  },
  {
    "text": "really cool a real-world example of that let's say that your return see you're creating a web api an ASP net",
    "start": "2134550",
    "end": "2143190"
  },
  {
    "text": "or asp net core and you're wanting to return an enum called security clearance and say whether or not this particular",
    "start": "2143190",
    "end": "2149279"
  },
  {
    "text": "person has a particular security of clearance you want to serialize it an enum - in JavaScript unless you're",
    "start": "2149279",
    "end": "2155970"
  },
  {
    "text": "keeping track of top secret equals zero lowest equals one you probably don't want to do that right like it's just",
    "start": "2155970",
    "end": "2162180"
  },
  {
    "text": "it's you want to serialize it down to a string it's probably in the JavaScript ecosystem that's what it would expect so",
    "start": "2162180",
    "end": "2167940"
  },
  {
    "text": "this would be a perfect use case to say like okay now I can declare the same thing at ight a string literal called",
    "start": "2167940",
    "end": "2173789"
  },
  {
    "text": "security clearance and set it equal to top secret or lowest right and you can get those same compile time guarantees",
    "start": "2173789",
    "end": "2178829"
  },
  {
    "text": "when you're when you do those compile time guarantees when you model your typescript object after your C sharp one",
    "start": "2178829",
    "end": "2183980"
  },
  {
    "text": "so really world use case I always deserialize enums as string literals",
    "start": "2183980",
    "end": "2189809"
  },
  {
    "text": "when I'm consuming them in JavaScript almost always as a rule so now we got to",
    "start": "2189809",
    "end": "2197009"
  },
  {
    "text": "talk about when to the real into the into the hardcore like type stuff that typescript has and we want to talk about",
    "start": "2197009",
    "end": "2203279"
  },
  {
    "text": "this thing's called a type certian and type guard but before we do just a quick JavaScript lesson let's talk about",
    "start": "2203279",
    "end": "2208920"
  },
  {
    "text": "instance of and type of a little bit just a little bit so type of when you do it as an operation on an object or",
    "start": "2208920",
    "end": "2215549"
  },
  {
    "start": "2211000",
    "end": "2427000"
  },
  {
    "text": "something on an operation on a particular variable or declaration it returns a string and it's used to",
    "start": "2215549",
    "end": "2222059"
  },
  {
    "text": "compare primitive types this is a chart of what you should expect to get back if you pass in a particular thing to two",
    "start": "2222059",
    "end": "2231210"
  },
  {
    "text": "type of type of quote a SDF end quote returns a string one two three number",
    "start": "2231210",
    "end": "2238619"
  },
  {
    "text": "function returns function of course my favorite one is type of undefined equals undefined and then typeof null equals",
    "start": "2238619",
    "end": "2245700"
  },
  {
    "text": "object which makes sense but another part of Java scripts weirdness right it's a really basic type comparison",
    "start": "2245700",
    "end": "2252509"
  },
  {
    "text": "that's available in JavaScript typescript is contextually aware of when",
    "start": "2252509",
    "end": "2257730"
  },
  {
    "text": "you're in a type of block now this is really cool you don't get this in c-sharp you don't get this VB done that this is like really cool stuff so let's",
    "start": "2257730",
    "end": "2264390"
  },
  {
    "text": "say that you've gotten a function that has an argument where you just give it any argument you just wanted to be able to throw anything at it maybe you're",
    "start": "2264390",
    "end": "2270450"
  },
  {
    "text": "refactoring and you've said that if this if this argument is of type string",
    "start": "2270450",
    "end": "2277500"
  },
  {
    "text": "then I want to log that thing to in lower case of the console now hold on a",
    "start": "2277500",
    "end": "2282970"
  },
  {
    "text": "second check out that block this is really cool typescript knows because you've said if",
    "start": "2282970",
    "end": "2288070"
  },
  {
    "text": "typeof ardh equals string it knows that within that block that variable is guaranteed to be a string right so tie",
    "start": "2288070",
    "end": "2294970"
  },
  {
    "text": "it so now you can have intellisense and typescript accepts this it says oh you've said this is a string so argument",
    "start": "2294970",
    "end": "2300280"
  },
  {
    "text": "I obviously now we have the myriad of functions that are available on strings including dot to lowercase so really",
    "start": "2300280",
    "end": "2306400"
  },
  {
    "text": "useful or just call you know constant console dot log and just log that argument to the console so really cool",
    "start": "2306400",
    "end": "2311830"
  },
  {
    "text": "it's be able to derive the context using that context it's able to derive the",
    "start": "2311830",
    "end": "2317050"
  },
  {
    "text": "type as you're typing it at compile time so really useful and you don't have to do that you know if type is string and then",
    "start": "2317050",
    "end": "2323920"
  },
  {
    "text": "declare a separate variable like you do in c-sharp vb.net type script just knows really awesome instance of inspects the",
    "start": "2323920",
    "end": "2331960"
  },
  {
    "text": "prototype chain so if you have a constructor function or a class that has",
    "start": "2331960",
    "end": "2337390"
  },
  {
    "text": "you know maybe your maybe your inheriting person to employee you can",
    "start": "2337390",
    "end": "2342490"
  },
  {
    "text": "say you know blood person equals new person in JavaScript and then you could say is it an instance of a person true",
    "start": "2342490",
    "end": "2347830"
  },
  {
    "text": "yes is it instance of a date false okay so far so good a couple of weird things",
    "start": "2347830",
    "end": "2353560"
  },
  {
    "text": "about it though first of all there's really just no again there's no sophisticated runtime introspection on",
    "start": "2353560",
    "end": "2361270"
  },
  {
    "text": "types in JavaScript and especially when you start mixing in typescript it doesn't really make sense so if you",
    "start": "2361270",
    "end": "2367630"
  },
  {
    "text": "wanted to say let's say we haven't a new employee object and we just give it a first name John and then we declare an",
    "start": "2367630",
    "end": "2373510"
  },
  {
    "text": "interface where or we declare another variable where it's structurally an employee but technically is not an",
    "start": "2373510",
    "end": "2379990"
  },
  {
    "text": "employee type in JavaScript if you did type of employee it would return object",
    "start": "2379990",
    "end": "2385150"
  },
  {
    "text": "if you did employee instance of is it an instance of the employee class yes it is",
    "start": "2385150",
    "end": "2390160"
  },
  {
    "text": "is employee structurally an instance of employee no because it's looking at the",
    "start": "2390160",
    "end": "2395320"
  },
  {
    "text": "prototype chain it's looking at the prototype of that object literal and saying oh and nope and no place does",
    "start": "2395320",
    "end": "2400600"
  },
  {
    "text": "this have the employee prototype on it so this is not an employee so again not incredibly useful especially when",
    "start": "2400600",
    "end": "2407210"
  },
  {
    "text": "javascript is like declaring and passing around object literals and of course",
    "start": "2407210",
    "end": "2412520"
  },
  {
    "text": "interfaces can't use instance of because they don't exist instance of is a runtime construct of JavaScript if you",
    "start": "2412520",
    "end": "2418160"
  },
  {
    "text": "try to do instance of an a person interface it's gonna you get an error saying that is that interfaces don't",
    "start": "2418160",
    "end": "2423920"
  },
  {
    "text": "exist in JavaScript so you can't do that either so what's the solution use type",
    "start": "2423920",
    "end": "2429470"
  },
  {
    "start": "2427000",
    "end": "2510000"
  },
  {
    "text": "guards type guards are really it's it's it's using that same type of argument",
    "start": "2429470",
    "end": "2435140"
  },
  {
    "text": "equal string it's using that same logic but it allows you to declare declare functions that allow you to then spaz to",
    "start": "2435140",
    "end": "2443119"
  },
  {
    "text": "constrain that type within a certain block of whatever argument you pass in so let's say we have an animal object I",
    "start": "2443119",
    "end": "2449780"
  },
  {
    "text": "know so class so cliche right an animal and we have two inheritance things we can either be a fish or a bird right so",
    "start": "2449780",
    "end": "2456410"
  },
  {
    "text": "we declare what's with this type guard a function and it's just returning a little bit of information bool but we",
    "start": "2456410",
    "end": "2462380"
  },
  {
    "text": "give it a little bit more right we say weird this thing is determining whether or not pet is of type fish and by doing",
    "start": "2462380",
    "end": "2470359"
  },
  {
    "text": "that and the way to do that is to cast it and see if it has a swim function right to see if it's not undefined",
    "start": "2470359",
    "end": "2475609"
  },
  {
    "text": "because if it has a swim function then that runtime it's a fish right this is using runtime this is now runtime intro",
    "start": "2475609",
    "end": "2482660"
  },
  {
    "text": "this is now runtime introspective but it's also compile time so when we call",
    "start": "2482660",
    "end": "2487700"
  },
  {
    "text": "that is fish function on pet we know it can be one of two types it can be a fish or a bird so if we say that it is a fish",
    "start": "2487700",
    "end": "2495500"
  },
  {
    "text": "and we pass in that pet argument we know that that pet can swim otherwise we know that it can fly because it's a bird if",
    "start": "2495500",
    "end": "2501680"
  },
  {
    "text": "it's not a fish it's a bird so really useful type guards super useful a compile-time and run-time as well then",
    "start": "2501680",
    "end": "2508460"
  },
  {
    "text": "really necessary to so how many people",
    "start": "2508460",
    "end": "2513650"
  },
  {
    "start": "2510000",
    "end": "2606000"
  },
  {
    "text": "have seen something like this dollar sign dot extend I know I love jQuery what can I say or object out a",
    "start": "2513650",
    "end": "2520190"
  },
  {
    "text": "sign where you want to take the properties in one object and assign them to another super common in JavaScript",
    "start": "2520190",
    "end": "2525470"
  },
  {
    "text": "right yeah everybody's JavaScript most at some point you've probably done something like this the result is the",
    "start": "2525470",
    "end": "2531770"
  },
  {
    "text": "same here that object one no matter what are these one of these functions they all do the same thing right object one",
    "start": "2531770",
    "end": "2537200"
  },
  {
    "text": "now has all the properties that object two has",
    "start": "2537200",
    "end": "2542049"
  },
  {
    "text": "so we have an intersection type where we combined where we can combine two types",
    "start": "2542570",
    "end": "2547619"
  },
  {
    "text": "into one notice that at the top notice that function declaration our return type is T and you that's intersection",
    "start": "2547619",
    "end": "2554640"
  },
  {
    "text": "types that is being able to combine things together just like you can in JavaScript it's like you do commonly",
    "start": "2554640",
    "end": "2559880"
  },
  {
    "text": "here's a funny example where we have a dog interface and a dinosaur interface and we declare a new dog that has a",
    "start": "2559880",
    "end": "2566099"
  },
  {
    "text": "breed of poodle and we declare a new a dinosaur that has a sharp teeth equals true and then we use we declare",
    "start": "2566099",
    "end": "2572339"
  },
  {
    "text": "something called abomination where we use that extends function to make the dog to take all the properties from the",
    "start": "2572339",
    "end": "2578099"
  },
  {
    "text": "Velociraptor and put them on the dog and now typescript knows ahead of time because it's an intersection type and",
    "start": "2578099",
    "end": "2584460"
  },
  {
    "text": "because if you're the the the shape and the return type of this extend function",
    "start": "2584460",
    "end": "2589650"
  },
  {
    "text": "T and you write that it is a dog and a velociraptor so now you can do console",
    "start": "2589650",
    "end": "2595589"
  },
  {
    "text": "dot log and get the breed and get the has sharp teeth right so now you have those things that you can do on top of",
    "start": "2595589",
    "end": "2602220"
  },
  {
    "text": "Toyota and typescript gives you those guarantees it knows that at compile time",
    "start": "2602220",
    "end": "2606890"
  },
  {
    "start": "2606000",
    "end": "2643000"
  },
  {
    "text": "here's a cool example that I really like so you can have some type recursion inside of typescript because I mean well",
    "start": "2607520",
    "end": "2614430"
  },
  {
    "text": "why not right so you get to clear something called a linked list where it's of type T and it is a it has a next",
    "start": "2614430",
    "end": "2622680"
  },
  {
    "text": "a property on it called next where you then to say that it has a linked list it has the it has the next part of the list",
    "start": "2622680",
    "end": "2629609"
  },
  {
    "text": "of type T so you can have recursive types where you could do people dot name and then people dot next dot name and",
    "start": "2629609",
    "end": "2636359"
  },
  {
    "text": "people dot next next next next so you can declare types and really really odd and really creative ways type alias is",
    "start": "2636359",
    "end": "2646700"
  },
  {
    "start": "2643000",
    "end": "2778000"
  },
  {
    "text": "super super super useful and it goes",
    "start": "2646700",
    "end": "2652500"
  },
  {
    "text": "into a concept called type capture which we'll get into in a moment but a type in a type in a type alias allows you to",
    "start": "2652500",
    "end": "2659040"
  },
  {
    "text": "declare well an alias for a given type so let's say you wanted the Union type you wanted to say I use string or number",
    "start": "2659040",
    "end": "2665640"
  },
  {
    "text": "everywhere in my application so I want to do so I want to declare a type called string or number and just set it to",
    "start": "2665640",
    "end": "2671910"
  },
  {
    "text": "equal to string or number right it's a union type of during a number but you want to give it an alias so that way you can use it in",
    "start": "2671910",
    "end": "2678130"
  },
  {
    "text": "your application it's consistent right so you don't have to type always string or number for type arguments super useful you can also create intersection",
    "start": "2678130",
    "end": "2686080"
  },
  {
    "text": "types so this is really cool so if you have a jQuery interface and you have an angular interface you can say type of",
    "start": "2686080",
    "end": "2691540"
  },
  {
    "text": "jQuery so it'll actually take and capture all of the the the shape of that jQuery function and the shape",
    "start": "2691540",
    "end": "2698410"
  },
  {
    "text": "and all of the functions and property that it has and take the type of angular if you haven't if you have that angular",
    "start": "2698410",
    "end": "2703660"
  },
  {
    "text": "object and combined them together and then of course you can just capture something where it's where you just say",
    "start": "2703660",
    "end": "2708700"
  },
  {
    "text": "hey that I expect that this it's an it's an anonymous interface kind of where you say it's evil and you can set it to true",
    "start": "2708700",
    "end": "2714730"
  },
  {
    "text": "or false and of course if you're doing a if you're creating something called jangle ER it is equal should all is evil",
    "start": "2714730",
    "end": "2720520"
  },
  {
    "text": "should always be true not really useful so now you can take this and you can use",
    "start": "2720520",
    "end": "2726430"
  },
  {
    "text": "this in any part of your application to say that an argument or a function always return something so this is this",
    "start": "2726430",
    "end": "2732970"
  },
  {
    "text": "is really useful when you get into something like strict null checks if you're doing any green green field type script development you should always",
    "start": "2732970",
    "end": "2738850"
  },
  {
    "text": "have strict to null checks on well that basically says is that nothing said in",
    "start": "2738850",
    "end": "2743890"
  },
  {
    "text": "in in JavaScript anything can be undefined but you want to be explicit sometimes about your use of undefined so",
    "start": "2743890",
    "end": "2751030"
  },
  {
    "text": "you want to declare an a number and set it to number and you want to set it to undefined cuz you don't know that you don't know the you don't know the value",
    "start": "2751030",
    "end": "2757870"
  },
  {
    "text": "right now what that isn't allowed JavaScript that isn't that that isn't allowed in typescript typescript will",
    "start": "2757870",
    "end": "2763810"
  },
  {
    "text": "give you an error right but you can declare something called number or undefined it's a union type of number",
    "start": "2763810",
    "end": "2769060"
  },
  {
    "text": "and undefined right and then you're able to declare a number as number undefined and now you're able to use undefined on",
    "start": "2769060",
    "end": "2775390"
  },
  {
    "text": "that variable so really useful type",
    "start": "2775390",
    "end": "2780670"
  },
  {
    "start": "2778000",
    "end": "2802000"
  },
  {
    "text": "aliases are just as useful as interfaces if not maybe a little more in my opinion",
    "start": "2780670",
    "end": "2788820"
  },
  {
    "text": "but they have a few differences right so interfaces can be used in extends or",
    "start": "2788820",
    "end": "2793960"
  },
  {
    "text": "implements and type aliases cannot and interfaces can have multiple merged",
    "start": "2793960",
    "end": "2799000"
  },
  {
    "text": "declarations and type aliases cannot and this is what emerged declaration looks like I don't use them perfectly you know",
    "start": "2799000",
    "end": "2805510"
  },
  {
    "start": "2802000",
    "end": "2808000"
  },
  {
    "text": "it's like a partial class I did but I just don't use them but it is a difference so this is really",
    "start": "2805510",
    "end": "2812410"
  },
  {
    "start": "2808000",
    "end": "2887000"
  },
  {
    "text": "cool type capture I showed you an example of that but just to give it a more more explicit example let's say you've declared an animal and has a name",
    "start": "2812410",
    "end": "2819940"
  },
  {
    "text": "and it has a number of legs right and it's this is an object literal it's not an interface it's an object literal you",
    "start": "2819940",
    "end": "2825040"
  },
  {
    "text": "could literally at compile time use the type of keyword to capture that type such that when you declared the captures",
    "start": "2825040",
    "end": "2832990"
  },
  {
    "text": "type variable and you give it a type annotation to say this is a type of an animal it's gonna expect when you make",
    "start": "2832990",
    "end": "2838240"
  },
  {
    "text": "that declaration that you're assigning it to an object that has name property that's a string and a leg property",
    "start": "2838240",
    "end": "2843520"
  },
  {
    "text": "that's for okay bear with me because I'm gonna show an example that really wraps this all up and it does use this you can",
    "start": "2843520",
    "end": "2852460"
  },
  {
    "text": "use the so Kiev is another useful thing so capturing the keys or the property names of something on an object in",
    "start": "2852460",
    "end": "2858520"
  },
  {
    "text": "JavaScript super super useful and super handy and you do it in a lot of places",
    "start": "2858520",
    "end": "2864010"
  },
  {
    "text": "so you can say that I that you could declare a variable called animal key where it says I want to give it a tiki",
    "start": "2864010",
    "end": "2869770"
  },
  {
    "text": "of and you can give it an interface or you can give it in this case you can capture the type and then you could say",
    "start": "2869770",
    "end": "2875980"
  },
  {
    "text": "well I expect that animal key I can set it equal to name and legs because that's a key on that object but as soon as I",
    "start": "2875980",
    "end": "2884020"
  },
  {
    "text": "set it to anything else I get in there so super useful super useful especially",
    "start": "2884020",
    "end": "2889450"
  },
  {
    "start": "2887000",
    "end": "2932000"
  },
  {
    "text": "when you're using it with things like plucked here's kind of a weird example I think I think I took this from the typescript documentation but essentially",
    "start": "2889450",
    "end": "2896470"
  },
  {
    "text": "I can create an descriptions object that allows me to describe the different the",
    "start": "2896470",
    "end": "2903220"
  },
  {
    "text": "different variables or into different properties that are a ver of available on top of a person object so in this",
    "start": "2903220",
    "end": "2909730"
  },
  {
    "text": "case I've said descriptions of person and I say that I this object the first",
    "start": "2909730",
    "end": "2914890"
  },
  {
    "text": "name is the person's first name right it's taking that straight from that person interface right it's using that key of to take that straight from the",
    "start": "2914890",
    "end": "2920860"
  },
  {
    "text": "person interface and then I set it to the age and I say how old the person is so a pretty cool example of using key of",
    "start": "2920860",
    "end": "2929070"
  },
  {
    "text": "and especially with index types really creative how about a type that takes the",
    "start": "2929070",
    "end": "2934900"
  },
  {
    "start": "2932000",
    "end": "2972000"
  },
  {
    "text": "properties an object and makes them read-only so you can capture a type and then make that object immutable",
    "start": "2934900",
    "end": "2939970"
  },
  {
    "text": "immutability is this cleanliness is godliness as far as I'm concerned so this is awesome so if I",
    "start": "2939970",
    "end": "2946180"
  },
  {
    "text": "want to create a read only person I can get it I can get that person interface capture it and then say all of the you",
    "start": "2946180",
    "end": "2952420"
  },
  {
    "text": "can't reset later after declaration you can't set any properties on this person this read-only person object because",
    "start": "2952420",
    "end": "2958210"
  },
  {
    "text": "I've declared this thing as read-only syntax it gets a little confusing it practice makes perfect right like I",
    "start": "2958210",
    "end": "2963640"
  },
  {
    "text": "would suggest going to the typescript playground if you're not familiar with this and look at it don't don't get too keyed up on the on the syntax now",
    "start": "2963640",
    "end": "2969880"
  },
  {
    "text": "because it does get rather esoteric here's a not here's an example of using",
    "start": "2969880",
    "end": "2976839"
  },
  {
    "start": "2972000",
    "end": "3013000"
  },
  {
    "text": "plucks so if we wanted to take a pluck is a fairly common operation that you",
    "start": "2976839",
    "end": "2982690"
  },
  {
    "text": "may do on an object where you just want to take some properties from that object and return them to you right so you",
    "start": "2982690",
    "end": "2989800"
  },
  {
    "text": "might from the person you might want to take the first name right and just return an array that has that that has",
    "start": "2989800",
    "end": "2995829"
  },
  {
    "text": "that first name property or you want to take the age and the unknown right age you want to take the age properties",
    "start": "2995829",
    "end": "3001920"
  },
  {
    "text": "well the first name and the age property but if you give it an age and an unknown you've declared your pluck function such that you pass in a person there is no",
    "start": "3001920",
    "end": "3009359"
  },
  {
    "text": "key called unknown so it gives you an error super useful it does use a generic",
    "start": "3009359",
    "end": "3016079"
  },
  {
    "start": "3013000",
    "end": "3037000"
  },
  {
    "text": "constraint yes typescript has generic constraints as well same thing as c-sharp you know when you do the where T",
    "start": "3016079",
    "end": "3021599"
  },
  {
    "text": "is a class or has a new cos a genetic parameter as parameter list constructor",
    "start": "3021599",
    "end": "3028880"
  },
  {
    "text": "has the same thing yeah and don't do get don't get worried too much about the syntax worry more about the capability",
    "start": "3028880",
    "end": "3035430"
  },
  {
    "text": "which is really awesome have you got that I don't use things like pluck I don't use them very often but it's nice",
    "start": "3035430",
    "end": "3041160"
  },
  {
    "start": "3037000",
    "end": "3108000"
  },
  {
    "text": "to know that they're they're discriminating unions is possibly the most one of the most useful things in",
    "start": "3041160",
    "end": "3046950"
  },
  {
    "text": "any language ever so let's say we have an interface we notice that instead of declaring a kind of a type right like a",
    "start": "3046950",
    "end": "3052800"
  },
  {
    "text": "number on this property we have a kind property that is a string right so this",
    "start": "3052800",
    "end": "3058800"
  },
  {
    "text": "is a discriminative Union literally if we declare something called Square and we give it a kind property equal to",
    "start": "3058800",
    "end": "3064950"
  },
  {
    "text": "square that's a square interface and this allows us to do some really cool stuff so let's we've got a square which",
    "start": "3064950",
    "end": "3071490"
  },
  {
    "text": "has a size because you know squares all equal sides rectangle which has a width that could be different and then we",
    "start": "3071490",
    "end": "3077259"
  },
  {
    "text": "declare a union type that says circle or rectangle or square when we do that when we take let's take let's say we declare",
    "start": "3077259",
    "end": "3083799"
  },
  {
    "text": "a function called that that takes in a shape and then we do a switch statement on that kind property discriminated",
    "start": "3083799",
    "end": "3090609"
  },
  {
    "text": "Union typescript knows ahead of time hey if it's a of type square then I know that I need to take for the area of that",
    "start": "3090609",
    "end": "3096969"
  },
  {
    "text": "square I know I need to multiply size by size or for the case of a rectangle I need to multiply height by width and",
    "start": "3096969",
    "end": "3102969"
  },
  {
    "text": "that's really cool because typescript does this all at compile time really awesome it allows you to get exhaustive",
    "start": "3102969",
    "end": "3110769"
  },
  {
    "start": "3108000",
    "end": "3121000"
  },
  {
    "text": "type type-checking kind of like pattern matching and f-sharp it gives you exhaustive type matching using the never",
    "start": "3110769",
    "end": "3116049"
  },
  {
    "text": "type it is basically something that can never be which is really kind of a strange thing until you look at that",
    "start": "3116049",
    "end": "3121359"
  },
  {
    "start": "3121000",
    "end": "3152000"
  },
  {
    "text": "previous example let's say that we have a certain ever function that basically we pass in and we say we know the",
    "start": "3121359",
    "end": "3128469"
  },
  {
    "text": "typescript compiler knows that this thing that's passed in this function will basically never be called should",
    "start": "3128469",
    "end": "3133599"
  },
  {
    "text": "never be called because it's taken in an ever type so as soon as we do switch s",
    "start": "3133599",
    "end": "3139089"
  },
  {
    "text": "kind we can get exhaustive checking at compile time to make sure that we've covered all of our circles squared and",
    "start": "3139089",
    "end": "3145140"
  },
  {
    "text": "rectangle use cases by saying a certain ever because that that shape does not",
    "start": "3145140",
    "end": "3150819"
  },
  {
    "text": "exist and that is important because as soon as you do something like triangle you add triangle to your union type",
    "start": "3150819",
    "end": "3155919"
  },
  {
    "start": "3152000",
    "end": "3173000"
  },
  {
    "text": "that's when you get that's when this really protects you because now typescript says hey you haven't handled",
    "start": "3155919",
    "end": "3161140"
  },
  {
    "text": "the triangle kind gives you that exhaustive checking at compile time really really useful so let's wrap it",
    "start": "3161140",
    "end": "3169449"
  },
  {
    "text": "all together with a real world example and I do do this stuff this is what I this is like what I do in typescript all",
    "start": "3169449",
    "end": "3174909"
  },
  {
    "start": "3173000",
    "end": "3210000"
  },
  {
    "text": "the time so let's say I'm a I'm a dotnet guy I'm mostly ernet Foulke so let's say",
    "start": "3174909",
    "end": "3180999"
  },
  {
    "text": "we have a post request where we're creating a person we want to create a person object we say the first name and last name are required fields on that",
    "start": "3180999",
    "end": "3186969"
  },
  {
    "text": "object right and we have a controller declaration that says well once we get",
    "start": "3186969",
    "end": "3192009"
  },
  {
    "text": "that post request we're gonna process it if model state is valid then we're gonna create the new person and then return",
    "start": "3192009",
    "end": "3198099"
  },
  {
    "text": "the ID of that person to the client or if any of these variables are not let's",
    "start": "3198099",
    "end": "3204069"
  },
  {
    "text": "say we passed in null for a first name we didn't pass in anything at all that required thing that we're",
    "start": "3204069",
    "end": "3209140"
  },
  {
    "text": "acquired thing on model dot is valid triggers and says this is not a valid thing so I am going to return a bad",
    "start": "3209140",
    "end": "3215650"
  },
  {
    "start": "3210000",
    "end": "3252000"
  },
  {
    "text": "request like I need the first name I need the last name right so already we've declared something that",
    "start": "3215650",
    "end": "3222880"
  },
  {
    "text": "can return two different objects in two different shapes as it were we declare",
    "start": "3222880",
    "end": "3227890"
  },
  {
    "text": "something that returns an object that has an ID property or we return a bad request and you know whatever shape that",
    "start": "3227890",
    "end": "3233650"
  },
  {
    "text": "comes in this is what it would look like right this is how the object would be",
    "start": "3233650",
    "end": "3238900"
  },
  {
    "text": "returned in the JavaScript you got an ID property on one and model state and then",
    "start": "3238900",
    "end": "3245529"
  },
  {
    "text": "like they know the key value of like first name is not is missing so return that error message saying you know the",
    "start": "3245529",
    "end": "3251230"
  },
  {
    "text": "first name is not there so now we model that request in typescript we have the same thing person post request it's just",
    "start": "3251230",
    "end": "3256390"
  },
  {
    "start": "3252000",
    "end": "3327000"
  },
  {
    "text": "an interface the first name and last name yes there are libraries that will read your c-sharp classes and generate",
    "start": "3256390",
    "end": "3261460"
  },
  {
    "text": "typescript for you that's another show but let's just say for example that we're modeling it ourselves so we model",
    "start": "3261460",
    "end": "3267400"
  },
  {
    "text": "that person post request in typescript and then we moderate we model the responses right we've modeled that the",
    "start": "3267400",
    "end": "3274059"
  },
  {
    "text": "person okay response will return an ID that returns a number or will have a bad",
    "start": "3274059",
    "end": "3279990"
  },
  {
    "text": "bad request response that returns a message or it can return a model state",
    "start": "3279990",
    "end": "3285519"
  },
  {
    "text": "now this is really interesting that model state is using that key of in and using it in an index type to say well",
    "start": "3285519",
    "end": "3292769"
  },
  {
    "text": "the person post request has a first name so I expect that the first name property should be on this model state could be",
    "start": "3292769",
    "end": "3299740"
  },
  {
    "text": "on this model state and then it will return an array of string just like and just like it does right there right we modeled that in typescript",
    "start": "3299740",
    "end": "3307299"
  },
  {
    "text": "we've got it in c-sharp we've got it in typescript and now we say we've got our post request we've got our bad request",
    "start": "3307299",
    "end": "3313390"
  },
  {
    "text": "response and then we say that well we wrap that all up we know that the person responds when we're creating that object",
    "start": "3313390",
    "end": "3319960"
  },
  {
    "text": "will either have an ID response or a bad request response so we create a union type to model that in typescript right",
    "start": "3319960",
    "end": "3327269"
  },
  {
    "start": "3327000",
    "end": "3346000"
  },
  {
    "text": "so we create our request method that does something right it goes and does a post request and then it returns the",
    "start": "3327269",
    "end": "3334329"
  },
  {
    "text": "JSON as a promise and then it returns a promise that says this is a person response it's either at this point we",
    "start": "3334329",
    "end": "3340509"
  },
  {
    "text": "only know that it returns something response or a bad request right so now",
    "start": "3340509",
    "end": "3348390"
  },
  {
    "start": "3346000",
    "end": "3491000"
  },
  {
    "text": "notice that we are now declaring we can declare a type guard to say that if this",
    "start": "3348390",
    "end": "3355030"
  },
  {
    "text": "is the I'm gonna be able to tell if this is a bad request by just casting it to a",
    "start": "3355030",
    "end": "3360100"
  },
  {
    "text": "bad request and seeing and checking to see if the model state property is no or",
    "start": "3360100",
    "end": "3365710"
  },
  {
    "text": "is not know if it's not undefined or null or sorry if it's not undefined that",
    "start": "3365710",
    "end": "3371440"
  },
  {
    "text": "means that this thing is probably a bad request this is good enough this is good enough for us to tell at runtime and a",
    "start": "3371440",
    "end": "3376720"
  },
  {
    "text": "compile time that this thing is a bad request and now when we handle our response we can say is error response",
    "start": "3376720",
    "end": "3382240"
  },
  {
    "text": "okay then I want to know the the model states first name property I'm just gonna assume that this person always",
    "start": "3382240",
    "end": "3387820"
  },
  {
    "text": "typed in a first name and that I want to see the error message that that returns or I want to log the ID to the console",
    "start": "3387820",
    "end": "3394810"
  },
  {
    "text": "right and this is all done typescript does all of this type checking for you at compile time so you",
    "start": "3394810",
    "end": "3400060"
  },
  {
    "text": "get intellisense you get the good tooling you get intellisense and you get protections yes sir yes sir absolutely",
    "start": "3400060",
    "end": "3408810"
  },
  {
    "text": "so the question was and I and if I didn't capture it properly let me know",
    "start": "3426359",
    "end": "3431589"
  },
  {
    "text": "why if from people that have have an object-oriented background why wouldn't you have an interface that inherited",
    "start": "3431589",
    "end": "3437229"
  },
  {
    "text": "from that implemented on your person response and your person okay responds the the answer is is is likely just",
    "start": "3437229",
    "end": "3444400"
  },
  {
    "text": "because I mean this is I this is a horrible this is not a great answer but it's just kind of how JavaScript",
    "start": "3444400",
    "end": "3450220"
  },
  {
    "text": "developers expect it to be done an object orientation is not something that",
    "start": "3450220",
    "end": "3455920"
  },
  {
    "text": "is super strong in JavaScript right it does have objects this is just a different style in other words it's an",
    "start": "3455920",
    "end": "3462190"
  },
  {
    "text": "opinion so if you did it that way that would be totally valid in a good use case for discriminated unions in fact so",
    "start": "3462190",
    "end": "3468220"
  },
  {
    "text": "good question good question so we did it we done we've modeled in c-sharp we've modeled our responses in",
    "start": "3468220",
    "end": "3474160"
  },
  {
    "text": "typescript and now we're handling that response and we're doing it with all type safety and we're getting all the typescript cool tooling we're getting",
    "start": "3474160",
    "end": "3480039"
  },
  {
    "text": "all the intellisense that we need and it's awesome and that's pretty cool so",
    "start": "3480039",
    "end": "3486359"
  },
  {
    "text": "that's just the tip of the iceberg I would highly recommend you I would",
    "start": "3486359",
    "end": "3492940"
  },
  {
    "start": "3491000",
    "end": "3562000"
  },
  {
    "text": "highly recommend that you check out the typescript documentation and kind of look through it I mean it is exhaustive",
    "start": "3492940",
    "end": "3499059"
  },
  {
    "text": "and reading it all can be exhausting but it's got a lot of cool information and it can really showcase the the power of",
    "start": "3499059",
    "end": "3505749"
  },
  {
    "text": "typescript typescript is changing all the time they just released 2.9 version",
    "start": "3505749",
    "end": "3511150"
  },
  {
    "text": "2.9 and it's just getting better and better in my opinion but those core types those core things that it has as",
    "start": "3511150",
    "end": "3517779"
  },
  {
    "text": "part of as part of the typescript language really important and super",
    "start": "3517779",
    "end": "3522969"
  },
  {
    "text": "super useful so starting on a greenfield",
    "start": "3522969",
    "end": "3528190"
  },
  {
    "text": "project for typescript use strict null checks you know to start it off with as",
    "start": "3528190",
    "end": "3533829"
  },
  {
    "text": "much protection as you can at runtime brownfield you don't have that if you've got a hundred JavaScript files in",
    "start": "3533829",
    "end": "3539410"
  },
  {
    "text": "already and you start renaming them to typescript you're gonna find some difficulties right you're gonna find some errors that you kind of want to get",
    "start": "3539410",
    "end": "3545079"
  },
  {
    "text": "around so just communicate with your team right just say this is what I",
    "start": "3545079",
    "end": "3551739"
  },
  {
    "text": "expect to be doing as far as implementing typescript you know come up with a plan right if you're doing Bronx",
    "start": "3551739",
    "end": "3557319"
  },
  {
    "text": "development on an existing project you want to add typescript to it more",
    "start": "3557319",
    "end": "3562930"
  },
  {
    "start": "3562000",
    "end": "3582000"
  },
  {
    "text": "resources you can go to typescript is net again has links to all of the stuff that I mentioned read those articles",
    "start": "3562930",
    "end": "3568839"
  },
  {
    "text": "really cool get the slides you know copy/paste those code snippets into into",
    "start": "3568839",
    "end": "3574719"
  },
  {
    "text": "the typescript playground online I guarantee that not that only some of them will work but at least you can see",
    "start": "3574719",
    "end": "3580869"
  },
  {
    "text": "the examples right well if you have any other questions hit me up my name is Spencer Steinbach my twitter handle is",
    "start": "3580869",
    "end": "3586329"
  },
  {
    "start": "3582000",
    "end": "3600000"
  },
  {
    "text": "at Schneider balk go to my website fine find me anywhere you want find me at the conference just ask me questions I'm",
    "start": "3586329",
    "end": "3591549"
  },
  {
    "text": "happy to answer any questions but it's been a real pleasure and I hope that this has given you a little bit of information about typescript and a",
    "start": "3591549",
    "end": "3597279"
  },
  {
    "text": "little bit of usability or a little bit of you a really an illustration of how and why typescript is so useful and",
    "start": "3597279",
    "end": "3604569"
  },
  {
    "text": "awesome thank you very much [Applause]",
    "start": "3604569",
    "end": "3615070"
  }
]