[
  {
    "text": "all right are we all good perfect",
    "start": "2240",
    "end": "8400"
  },
  {
    "text": "hello everyone and welcome to this talk on c-sharp 8 9 and 10 and 11 and 12 and",
    "start": "8400",
    "end": "14559"
  },
  {
    "text": "whatever is coming next in this amazing programming language which is slowly turning into f sharp",
    "start": "14559",
    "end": "21680"
  },
  {
    "text": "it is amazing though that the programming language has evolved quite a lot over the past 10 years there's been",
    "start": "21760",
    "end": "28160"
  },
  {
    "text": "so many changes to the language it can be a little bit hard to keep track on what's happening with c sharp and why",
    "start": "28160",
    "end": "34160"
  },
  {
    "text": "you would want to use some of the new language features but just because there's a new language feature doesn't mean that you have to",
    "start": "34160",
    "end": "40320"
  },
  {
    "text": "use it it's there to use for the purpose that where you might need it in your",
    "start": "40320",
    "end": "45440"
  },
  {
    "text": "applications so let's get through a few of those really amazing language features that will hopefully help you build really",
    "start": "45440",
    "end": "51600"
  },
  {
    "text": "great applications before that my name is phillip eckberg if you have any questions feel free to",
    "start": "51600",
    "end": "57360"
  },
  {
    "text": "ping me on twitter afterwards i have a free book on c-sharp that you can download as well just ping me afterwards",
    "start": "57360",
    "end": "63039"
  },
  {
    "text": "if there's anything that you want to discuss in terms of c-sharp so with that out of the way let's talk about all the really great features of",
    "start": "63039",
    "end": "69840"
  },
  {
    "text": "c-sharp this here is a tag cloud of all the language features added up until let's say c sharp eight",
    "start": "69840",
    "end": "76479"
  },
  {
    "text": "and there's really quite some of the features that were added over the years that change the way",
    "start": "76479",
    "end": "82479"
  },
  {
    "text": "that we build software that changes the fundamental way of how we look at expressing ourselves",
    "start": "82479",
    "end": "88240"
  },
  {
    "text": "in terms of working with generics that change the way how we work with collections maybe before that was added to the",
    "start": "88240",
    "end": "94400"
  },
  {
    "text": "language many developers thought that maybe we don't need that we can go by by using",
    "start": "94400",
    "end": "100479"
  },
  {
    "text": "the old arraylist that we used in the past and the same goes for async and await that was added to the language",
    "start": "100479",
    "end": "106159"
  },
  {
    "text": "quite late but it changed the way that we consume asynchronous apis it changed the way that we express ourselves and",
    "start": "106159",
    "end": "112960"
  },
  {
    "text": "it's an addition to the language that let us build more powerful applications and i guess that's true for all the new",
    "start": "112960",
    "end": "119600"
  },
  {
    "text": "language features as well they seem to add new features that help us express ourselves in ways that requires less",
    "start": "119600",
    "end": "127119"
  },
  {
    "text": "code but if it's used improperly that may tend to make the applications unreadable",
    "start": "127119",
    "end": "133280"
  },
  {
    "text": "so with as with any language feature use it with caution what's great about the development of",
    "start": "133280",
    "end": "138800"
  },
  {
    "text": "c-sharp as a programming language is that it's open source you can participate in the discussions around",
    "start": "138800",
    "end": "144720"
  },
  {
    "text": "which features do you want what's the purpose of one of these new language features what's the the ideas behind it and how",
    "start": "144720",
    "end": "151920"
  },
  {
    "text": "are they going to implement that maybe you want to participate in talking about how you would like to see new",
    "start": "151920",
    "end": "157680"
  },
  {
    "text": "features in the language as well i tend to spend some time here just looking at what's coming in the next",
    "start": "157680",
    "end": "163680"
  },
  {
    "text": "versions of the language just to keep track on really what's happening but one of the things that i learned",
    "start": "163680",
    "end": "169200"
  },
  {
    "text": "from the early on when they did this when they open source c sharp is that even if they talk about new language",
    "start": "169200",
    "end": "174800"
  },
  {
    "text": "features being added to the language unless it's actually shipped there's no guarantee that it will make it into the",
    "start": "174800",
    "end": "181040"
  },
  {
    "text": "next version so you might read a lot about features that might be coming in c sharp 11 and",
    "start": "181040",
    "end": "186480"
  },
  {
    "text": "12 but until they actually ship that version of the compiler together with a runtime",
    "start": "186480",
    "end": "192480"
  },
  {
    "text": "don't just expect that that's going to make it into the language we'll talk about one of those features in just a moment",
    "start": "192480",
    "end": "198879"
  },
  {
    "text": "that's been caught up cut out of the language so what's happened over the years i have",
    "start": "198879",
    "end": "204879"
  },
  {
    "text": "some highlights from c sharp 7 that's fundamental to what's happening in the new versions of c sharp and one of the",
    "start": "204879",
    "end": "211280"
  },
  {
    "text": "really big changes they made in c sharp 7 is changing the way that we look at tuples or tuples depending on where",
    "start": "211280",
    "end": "218480"
  },
  {
    "text": "you're from we really talk about the same same thing so in the early days we had this type in",
    "start": "218480",
    "end": "224720"
  },
  {
    "text": "c sharp that allowed us to work with this container of multiple different values but as of c 7 this became a first class",
    "start": "224720",
    "end": "232560"
  },
  {
    "text": "citizen so now we can just define this this tuple in line like this here and",
    "start": "232560",
    "end": "238319"
  },
  {
    "text": "it's a first class citizen in the language it's a really small change but it's one",
    "start": "238319",
    "end": "243599"
  },
  {
    "text": "of the fundamental things that helped us then get other really great features into the language in terms of pattern",
    "start": "243599",
    "end": "249680"
  },
  {
    "text": "matching and deconstruction and working with with containers of data",
    "start": "249680",
    "end": "255120"
  },
  {
    "text": "so with this introduced in the language it also meant that we can now look at how types can be deconstructed and turn",
    "start": "255120",
    "end": "261040"
  },
  {
    "text": "into something that looks like tuples which is where this new concept of adding a method to any given type in",
    "start": "261040",
    "end": "268240"
  },
  {
    "text": "your applications called the construct as long as you have a method called deconstruct and you have a few out",
    "start": "268240",
    "end": "274160"
  },
  {
    "text": "parameters that means that you can take this object and pull it apart in different ways so if i have this on a person class for",
    "start": "274160",
    "end": "281120"
  },
  {
    "text": "instance that would mean that i can take an instance of my person and deconstruct that into two new local variables",
    "start": "281120",
    "end": "288479"
  },
  {
    "text": "looks very much like a tuple but it isn't this here is in fact declaring two local variables and i can then use them",
    "start": "288479",
    "end": "294000"
  },
  {
    "text": "in my context and again this is something which is in its own maybe not very useful but when",
    "start": "294000",
    "end": "300240"
  },
  {
    "text": "it comes to combining this with the concept of pattern matching and writing more expressive code this is becoming",
    "start": "300240",
    "end": "306560"
  },
  {
    "text": "really interesting to work with another example to with where this is used together with",
    "start": "306560",
    "end": "312160"
  },
  {
    "text": "tuples and and deconstructions is if we have this concept of the right hand side is declaring a tuple and i'm then",
    "start": "312160",
    "end": "318639"
  },
  {
    "text": "deconstructing that into two nuclear new local variables i can then use this in my context as the",
    "start": "318639",
    "end": "325120"
  },
  {
    "text": "properly named types and again that might not seem very useful but when it comes to",
    "start": "325120",
    "end": "330960"
  },
  {
    "text": "deconstructing an actual type that declares exactly what this contains we could then deconstruct deconstruct that",
    "start": "330960",
    "end": "338080"
  },
  {
    "text": "object and this is all done by just introducing this method on your type you can have multiple different deconstruct",
    "start": "338080",
    "end": "344880"
  },
  {
    "text": "methods on your type and that would allow you to pull that object apart and the reason you want to do this is",
    "start": "344880",
    "end": "351120"
  },
  {
    "text": "because then you can look at the exact thing that you deconstruct an object to",
    "start": "351120",
    "end": "356639"
  },
  {
    "text": "when it comes to pattern matching which was in its turn introducing c sharp seven as well",
    "start": "356639",
    "end": "362400"
  },
  {
    "text": "pattern matching we'll get into that as well but it's a way for us to look at an object and how that is expressed and",
    "start": "362400",
    "end": "368240"
  },
  {
    "text": "what it contains and what the attributes are of that object and while that was introduced in c sharp",
    "start": "368240",
    "end": "373520"
  },
  {
    "text": "7 it was kind of a first first attempt at just making that into the language",
    "start": "373520",
    "end": "378720"
  },
  {
    "text": "and making people aware of how to use patterns and pattern matching so with two of these highlights out of",
    "start": "378720",
    "end": "384479"
  },
  {
    "text": "the way in c sharp seven there's many more features that was introduced in this language version but these are the",
    "start": "384479",
    "end": "389840"
  },
  {
    "text": "ones that we need to keep in mind to fully understand some of the the rest of the work that has gone into the compiler",
    "start": "389840",
    "end": "396400"
  },
  {
    "text": "so if we talk about c sharp 8 and kind of what's beyond that which is the purpose of this talk there's been a lot",
    "start": "396400",
    "end": "402319"
  },
  {
    "text": "of changes in the language they've introduced a lot of language features and if we just look at the list of",
    "start": "402319",
    "end": "407759"
  },
  {
    "text": "features that they've added we can start off by talking about the read-only members and there's default interface",
    "start": "407759",
    "end": "413440"
  },
  {
    "text": "implementations i'll show an example of this soon but it's this is kind of a divider of either you love it or you",
    "start": "413440",
    "end": "420240"
  },
  {
    "text": "hate it which isn't really true for many language features i personally don't like it but we'll",
    "start": "420240",
    "end": "425840"
  },
  {
    "text": "talk about that soon they did some pattern matching enhancements i'm not going to talk about all of these here",
    "start": "425840",
    "end": "430880"
  },
  {
    "text": "but the highlighted ones are the ones that i want to talk about we have pattern matching enhancements really",
    "start": "430880",
    "end": "436479"
  },
  {
    "text": "it's the i would say this is the pattern matching 1.0 because it made it really",
    "start": "436479",
    "end": "441520"
  },
  {
    "text": "purposeful in the language we've got something called nullable reference types and asynchronous streams",
    "start": "441520",
    "end": "447280"
  },
  {
    "text": "those three features that's what we're going to be focusing on for a little while here before we go on to the next",
    "start": "447280",
    "end": "452319"
  },
  {
    "text": "version of c sharp so as you see here like as of c sharp 8 which is the eighth eighth is",
    "start": "452319",
    "end": "458240"
  },
  {
    "text": "iteration of the language there's still a lot of features being added to the language some of them are improvements",
    "start": "458240",
    "end": "463599"
  },
  {
    "text": "to what was already added before but some of them are really new concepts as well and what i like about the",
    "start": "463599",
    "end": "469840"
  },
  {
    "text": "additions to c-sharp is that the language team looks at earlier or other versions of other programming languages",
    "start": "469840",
    "end": "476800"
  },
  {
    "text": "and take inspiration from f-sharp kotlin swift and they even talk to the other",
    "start": "476800",
    "end": "482319"
  },
  {
    "text": "language designers on those teams to get inspiration of what do we want to add to the language",
    "start": "482319",
    "end": "487919"
  },
  {
    "text": "and when it makes the cut to c-sharp they also need to make sure that it feels like a c-sharp language version or",
    "start": "487919",
    "end": "494400"
  },
  {
    "text": "c-sharp feature so it doesn't feel like it's a kotlin version of a language feature just add",
    "start": "494400",
    "end": "500080"
  },
  {
    "text": "it into the language it needs to feel like it's a feature built for c-sharp developers",
    "start": "500080",
    "end": "506160"
  },
  {
    "text": "so if i want to use all of these new things in c sharp how do i go about that",
    "start": "506160",
    "end": "511840"
  },
  {
    "text": "a change that i've also made is that some of the newer versions of the language require you to jump on a new",
    "start": "511840",
    "end": "517120"
  },
  {
    "text": "runtime and that means if you want to use c sharp 8 9 and 10 you have to use the",
    "start": "517120",
    "end": "522360"
  },
  {
    "text": "corresponding.net runtime now given that we have net framework before and now.netcore and",
    "start": "522360",
    "end": "529399"
  },
  {
    "text": "then.net.net again it can be a little bit confusing which one you want to use if you want to use c sharp eight you",
    "start": "529399",
    "end": "535600"
  },
  {
    "text": "have to do visual studio 2019 or later and dot net course 3.0 and 4.95 it's c",
    "start": "535600",
    "end": "541120"
  },
  {
    "text": "sharp 9 and so forth so every version or every long term support version of the runtime",
    "start": "541120",
    "end": "548800"
  },
  {
    "text": "will have a corresponding c-sharp language version with features added and the reason the they're doing this is",
    "start": "548800",
    "end": "555120"
  },
  {
    "text": "because they can now also make changes to how things work in the runtime they can add language features that depend on",
    "start": "555120",
    "end": "560880"
  },
  {
    "text": "runtime changes as well and i guess that's not really a problem anymore back in the in the day when you",
    "start": "560880",
    "end": "566959"
  },
  {
    "text": "had to update your dotnet framework on a physical server that was a little bit",
    "start": "566959",
    "end": "572000"
  },
  {
    "text": "more of a risk doing that but nowadays when you just deploy a new docker container with a new version of",
    "start": "572000",
    "end": "577920"
  },
  {
    "text": "net and if that doesn't work you just fall back there's really not a risk anymore just",
    "start": "577920",
    "end": "583360"
  },
  {
    "text": "upgrading your net runtime at least not as much as in the past",
    "start": "583360",
    "end": "589040"
  },
  {
    "text": "so given that we have to work with dot net core or dot net five or six and onwards it also means that they had to",
    "start": "589040",
    "end": "594959"
  },
  {
    "text": "update the the templates for wpf and winforms so we can create wpf apps and winforms",
    "start": "594959",
    "end": "601360"
  },
  {
    "text": "applications or xamarin or maui versions that are able to target dot net core and",
    "start": "601360",
    "end": "606560"
  },
  {
    "text": "later so that means that pretty much every version of of c sharp cannot be",
    "start": "606560",
    "end": "611600"
  },
  {
    "text": "used in the different types of projects now i did mention that there's one language feature that they introduced",
    "start": "611600",
    "end": "617920"
  },
  {
    "text": "that i don't particularly like so if we create one of these new projects and i decide to use this new thing called",
    "start": "617920",
    "end": "624240"
  },
  {
    "text": "default interface implementations that means that i can now add implementation details to my to my",
    "start": "624240",
    "end": "632160"
  },
  {
    "text": "interface so look here this is an interface and then i have an implementation of that while i'm using an",
    "start": "632160",
    "end": "637760"
  },
  {
    "text": "expression-bodied member here i'm still i still have implementation details about what happens when i call this",
    "start": "637760",
    "end": "643680"
  },
  {
    "text": "method that means that whoever implements this interface don't have to implement this method",
    "start": "643680",
    "end": "650320"
  },
  {
    "text": "themselves which can be a little bit weird right because it means that",
    "start": "650320",
    "end": "655839"
  },
  {
    "text": "the interface now has logic on it which we didn't we weren't able to do that in the past",
    "start": "655839",
    "end": "662320"
  },
  {
    "text": "the only difference between this and multiple inheritance is that we don't have the actual instance to work with",
    "start": "662320",
    "end": "669200"
  },
  {
    "text": "this is great for library developers that want to introduce breaking changes or update their libraries without",
    "start": "669200",
    "end": "674880"
  },
  {
    "text": "breaking everyone there's very few things that are more annoying than updating a new get package",
    "start": "674880",
    "end": "680480"
  },
  {
    "text": "and you're required to implement like 10 different interfaces or additional methods on an interface",
    "start": "680480",
    "end": "686640"
  },
  {
    "text": "so this is a great option for that but it also means that if there's already an implementation the compiler won't tell",
    "start": "686640",
    "end": "692720"
  },
  {
    "text": "you that you have to implement that method so you wouldn't know that there's a new method available on the interface",
    "start": "692720",
    "end": "699040"
  },
  {
    "text": "that you just updated which can be a little bit problematic now if we're targeting multiple",
    "start": "699040",
    "end": "705120"
  },
  {
    "text": "different types of applications and multiple different types of runtimes this might not be available so if we're",
    "start": "705120",
    "end": "711120"
  },
  {
    "text": "using a shared library like i'm doing here it's going to tell me that",
    "start": "711120",
    "end": "716720"
  },
  {
    "text": "the target runtime that you're now compiling for doesn't support default implement default interface",
    "start": "716720",
    "end": "722160"
  },
  {
    "text": "implementations so while you can still write the actual code here and the compiler tells you",
    "start": "722160",
    "end": "728160"
  },
  {
    "text": "that if you're targeting let's say.net framework with the same.net standard library it will tell you that you can't",
    "start": "728160",
    "end": "733920"
  },
  {
    "text": "compile for that particular target but you can still use that language feature in a shared library and compile for the",
    "start": "733920",
    "end": "739360"
  },
  {
    "text": "particular platform that it works on so as i said earlier this here is kind",
    "start": "739360",
    "end": "745519"
  },
  {
    "text": "of a divider like either you love this or you really hate it but for library developers it's a great",
    "start": "745519",
    "end": "751839"
  },
  {
    "text": "language feature all right so probably one of my favorite language features added for a very long time is",
    "start": "751839",
    "end": "758880"
  },
  {
    "text": "something called nullable reference types now i take it that most of you have had",
    "start": "758880",
    "end": "763920"
  },
  {
    "text": "a null reference exception in the past anyone that hasn't have a null reference exception you are lying",
    "start": "763920",
    "end": "771440"
  },
  {
    "text": "because that never happens right you're gonna have get a no reference exception unless it's maybe your first day as a developer like then i totally accept",
    "start": "771440",
    "end": "778480"
  },
  {
    "text": "that you haven't had this but maybe tomorrow so what do we do if we cannot go back in",
    "start": "778480",
    "end": "784399"
  },
  {
    "text": "time and fix the mistake of adding nulls in the language like adding a null or making it easy to add null in c sharp is",
    "start": "784399",
    "end": "791360"
  },
  {
    "text": "really a design flaw now i'm not i'm not a language designer but i can still",
    "start": "791360",
    "end": "797120"
  },
  {
    "text": "appreciate that it is a fault to the language making it easy to add that to the languages or in",
    "start": "797120",
    "end": "803120"
  },
  {
    "text": "your applications is really not good so what do we do we add",
    "start": "803120",
    "end": "808160"
  },
  {
    "text": "support in the language to let us know when there is a potential problem and this is where nullable reference",
    "start": "808160",
    "end": "814160"
  },
  {
    "text": "types come into play now the naming here is in my opinion not very good",
    "start": "814160",
    "end": "820000"
  },
  {
    "text": "because it nullable reference types has always been nullable so what does this actually mean",
    "start": "820000",
    "end": "828000"
  },
  {
    "text": "they gave it this name because we had nullable value types which means that you can add a little question mark to",
    "start": "828000",
    "end": "833040"
  },
  {
    "text": "your value types and all of a sudden you they're now reference types and you can set them to null but since reference",
    "start": "833040",
    "end": "838880"
  },
  {
    "text": "types has always been able to be null this should really be called non-nullable reference types",
    "start": "838880",
    "end": "844560"
  },
  {
    "text": "because that's what's going to happen so let's go and have a look at what that looks like in just a moment",
    "start": "844560",
    "end": "850240"
  },
  {
    "text": "we're all familiar with this problem here right if you haven't seen this it's just a matter of time",
    "start": "850240",
    "end": "857519"
  },
  {
    "text": "but really why did we get a null reference exception in some of these applications obviously we we can't go in",
    "start": "857519",
    "end": "863199"
  },
  {
    "text": "and check all of these problems but what's the problem with nullability except or",
    "start": "863199",
    "end": "869360"
  },
  {
    "text": "despite of the fact that it it costs a lot of money to fix the problem is that",
    "start": "869360",
    "end": "875920"
  },
  {
    "text": "we we're going to make our code harder to read we're going to have null checks everywhere and and writing code just for the",
    "start": "875920",
    "end": "882000"
  },
  {
    "text": "purpose of there might be a problem that i haven't designed my application for i don't particularly like that",
    "start": "882000",
    "end": "888959"
  },
  {
    "text": "it would be much better if i had to explicitly determine when could something be null when could this potentially be a problem when is it my",
    "start": "888959",
    "end": "895760"
  },
  {
    "text": "intent that this could be null but when something can be null what does",
    "start": "895760",
    "end": "901600"
  },
  {
    "text": "that actually mean it's pretty ambiguous right because if i return knowledge from a method call",
    "start": "901600",
    "end": "908800"
  },
  {
    "text": "did something happen was there a problem i expected maybe a result coming back from a database and if that returns null",
    "start": "908800",
    "end": "915680"
  },
  {
    "text": "does it mean the the record didn't exist does it mean that there was a problem in my my particular method",
    "start": "915680",
    "end": "922800"
  },
  {
    "text": "who knows it's an ambiguous thing right so we want to be very explicit about what null actually means",
    "start": "922800",
    "end": "928720"
  },
  {
    "text": "and it also encourages mutability and that means we can have issues with when it comes to multi-threaded",
    "start": "928720",
    "end": "934560"
  },
  {
    "text": "applications or asynchronous programming so really all of this is telling us that we want to avoid nulls in the indie",
    "start": "934560",
    "end": "941120"
  },
  {
    "text": "language and we're in our applications we want to go ahead and use something else but we also want to get the help of",
    "start": "941120",
    "end": "947680"
  },
  {
    "text": "c-sharp as a programming language to tell us when there might be a problem",
    "start": "947680",
    "end": "952800"
  },
  {
    "text": "because we want to avoid this here so obviously this here checks if my object is null it then checks a property and",
    "start": "952800",
    "end": "958639"
  },
  {
    "text": "then another property on that we can simplify this by using the null conditional operator or we can use",
    "start": "958639",
    "end": "964320"
  },
  {
    "text": "pattern matching we can write this in like as many people there are in this room we can probably express this in a",
    "start": "964320",
    "end": "970079"
  },
  {
    "text": "different manner the solution to this is to enable a nullable context",
    "start": "970079",
    "end": "977199"
  },
  {
    "text": "we can do this by using a compiler directive or we can do this on the project level",
    "start": "977199",
    "end": "982800"
  },
  {
    "text": "if i do this it's going to change the way the compiler looks at all my reference types",
    "start": "982800",
    "end": "988480"
  },
  {
    "text": "what happens is that all reference types are now assumed to have a value if they don't the compiler is going to give us a",
    "start": "988480",
    "end": "995120"
  },
  {
    "text": "warning and there's very much help in the language that are going to tell us if",
    "start": "995120",
    "end": "1000160"
  },
  {
    "text": "there is something that could potentially cause a problem it sounds awesome it sounds like it's going to fix all of our problems",
    "start": "1000160",
    "end": "1007839"
  },
  {
    "text": "but of course i'm going to show you how we break this later so what it does is that",
    "start": "1007839",
    "end": "1014320"
  },
  {
    "text": "in this case here i have my string here very simple example string name is equal to null and right off the back you can",
    "start": "1014320",
    "end": "1020720"
  },
  {
    "text": "see here that it's this little squiggly here and that is now indicating that we have a warning it's",
    "start": "1020720",
    "end": "1026400"
  },
  {
    "text": "warning me that you should probably not set this to null because the compiler is now looking at the string here as something that should",
    "start": "1026400",
    "end": "1032880"
  },
  {
    "text": "never be set to null it's even telling us here that name here",
    "start": "1032880",
    "end": "1038319"
  },
  {
    "text": "could potentially be null so calling dot split here will most likely cause a problem",
    "start": "1038319",
    "end": "1045120"
  },
  {
    "text": "so how did this fix anything well it didn't but we at least we found",
    "start": "1045120",
    "end": "1050640"
  },
  {
    "text": "a place where it could potentially be an issue so how about we jump into visual studio",
    "start": "1050640",
    "end": "1056559"
  },
  {
    "text": "and just look at an application and i'm going to enable notable reference types",
    "start": "1056559",
    "end": "1062640"
  },
  {
    "text": "font size good in the back perfect so if we go into the project file",
    "start": "1063039",
    "end": "1070960"
  },
  {
    "text": "you'll see here that i can enable something called nullable",
    "start": "1070960",
    "end": "1077919"
  },
  {
    "text": "and if i do that it's going to change the way the compiler looks at the application",
    "start": "1077919",
    "end": "1083120"
  },
  {
    "text": "if we just comment that out again and just look at the application",
    "start": "1083120",
    "end": "1088160"
  },
  {
    "text": "if we look at these two classes there's nothing in here that looks odd there's nothing in here that looks out of the",
    "start": "1088160",
    "end": "1094559"
  },
  {
    "text": "way or out of the ordinary but as soon as i enable this",
    "start": "1094559",
    "end": "1100640"
  },
  {
    "text": "this this nullable context and just save this here",
    "start": "1100640",
    "end": "1106080"
  },
  {
    "text": "and go back hopefully it's going to give us some squiggles here to tell us that well",
    "start": "1106080",
    "end": "1112640"
  },
  {
    "text": "details here should probably contain a value so to get rid of this here we need to",
    "start": "1112640",
    "end": "1118640"
  },
  {
    "text": "ensure that both my property details and the first name and the last name that they're all",
    "start": "1118640",
    "end": "1124000"
  },
  {
    "text": "set to a value to get rid of this warning we could simply say that i really allow this to be null",
    "start": "1124000",
    "end": "1131520"
  },
  {
    "text": "and all of a sudden the warning just disappeared now i'm not suggesting that we should have question marks all over the place",
    "start": "1131520",
    "end": "1138480"
  },
  {
    "text": "just to get rid of all the warnings instead there's an alternative approach",
    "start": "1138480",
    "end": "1144000"
  },
  {
    "text": "so what we can do let's do this for let's do it for the person or the details down here at the bottom i'm",
    "start": "1144000",
    "end": "1150240"
  },
  {
    "text": "going to introduce a constructor and if i do that",
    "start": "1150240",
    "end": "1155280"
  },
  {
    "text": "and if i can scroll down here we go the warnings disappeared from first name",
    "start": "1155280",
    "end": "1160320"
  },
  {
    "text": "and last name and that's really great but they're now giving a warning on the constructor instead and telling me that",
    "start": "1160320",
    "end": "1166240"
  },
  {
    "text": "you have two properties that are marked as not being allowed to be null and you should probably set them to a value",
    "start": "1166240",
    "end": "1172240"
  },
  {
    "text": "i could add them to to my constructor and let's say last name",
    "start": "1172240",
    "end": "1179039"
  },
  {
    "text": "and i could set first name and last name to the corresponding first name come on",
    "start": "1179039",
    "end": "1185679"
  },
  {
    "text": "writing and talking at the same time always very easy here we go and last lasting",
    "start": "1185679",
    "end": "1193440"
  },
  {
    "text": "so of course now i don't have a problem here anymore but the issue with this is that i've now",
    "start": "1193520",
    "end": "1198799"
  },
  {
    "text": "changed the contracts so every anyone in the application that is now using this class they're now required to",
    "start": "1198799",
    "end": "1204559"
  },
  {
    "text": "instantiate this with these two with these two these two constructor parameters",
    "start": "1204559",
    "end": "1210320"
  },
  {
    "text": "and that's not very good because now i probably have a lot more issues in the application and honestly",
    "start": "1210320",
    "end": "1216480"
  },
  {
    "text": "null wouldn't be a problem in this case here there are",
    "start": "1216480",
    "end": "1221760"
  },
  {
    "text": "many ways that we can approach this as as i said earlier as many developers that there are in here we can approach",
    "start": "1221760",
    "end": "1226799"
  },
  {
    "text": "this in different ways but changing the contract we could probably agree that sure this is a great approach if it's",
    "start": "1226799",
    "end": "1232640"
  },
  {
    "text": "the first version of the the code base it's a new application that we are coding but if this is a five-year-old",
    "start": "1232640",
    "end": "1238400"
  },
  {
    "text": "application that we are updating it's probably not a good idea to just go in and change all your your classes",
    "start": "1238400",
    "end": "1244559"
  },
  {
    "text": "is it gonna have a lot of compiler errors and honestly in here the problem with",
    "start": "1244559",
    "end": "1250080"
  },
  {
    "text": "nullability or being null was probably not first name last time in details so in this case i'm going to allow these to",
    "start": "1250080",
    "end": "1256400"
  },
  {
    "text": "be null now of course i have three question marks here but at least",
    "start": "1256400",
    "end": "1263039"
  },
  {
    "text": "we got rid of the warnings so what did this change change now anyone that's using these different",
    "start": "1263039",
    "end": "1269520"
  },
  {
    "text": "properties will now be warned that you should probably go ahead and do a null check",
    "start": "1269520",
    "end": "1277120"
  },
  {
    "text": "let me zoom out here just a little bit here we go so now since i'm accessing details here",
    "start": "1277120",
    "end": "1283840"
  },
  {
    "text": "the compiler doesn't know that this could potentially be set to an instance so this here would be causing a null",
    "start": "1283840",
    "end": "1290159"
  },
  {
    "text": "reference exception if we have just a new instance of this this class or if we have if we didn't have an",
    "start": "1290159",
    "end": "1296240"
  },
  {
    "text": "instance of the class it would this would cause a problem again there are multiple ways to solve this we could say that well if if",
    "start": "1296240",
    "end": "1302640"
  },
  {
    "text": "details is null don't go ahead and get the first name and we've we've fixed that problem so now we're",
    "start": "1302640",
    "end": "1308240"
  },
  {
    "text": "not going to get a null reference exception but of course is that if that was an input parameter to another method this",
    "start": "1308240",
    "end": "1314159"
  },
  {
    "text": "would this expression would yield null and we could have more problems you see where we're getting at we have to really",
    "start": "1314159",
    "end": "1319679"
  },
  {
    "text": "think about the architecture and how we approach this but at least the compiler told us that",
    "start": "1319679",
    "end": "1324799"
  },
  {
    "text": "if you're not sure that this is null checked you're going to have a problem we could also do we could call argument",
    "start": "1324799",
    "end": "1332799"
  },
  {
    "text": "null exception throw if null and pass in person dot details",
    "start": "1332799",
    "end": "1339840"
  },
  {
    "text": "and all of a sudden the the warning disappeared",
    "start": "1339840",
    "end": "1344960"
  },
  {
    "text": "this is because there's something called the the attributes for null state static analysis which is quite a mouthful to",
    "start": "1344960",
    "end": "1351360"
  },
  {
    "text": "say so what it does is that it knows that i've performed a null check it knows",
    "start": "1351360",
    "end": "1356559"
  },
  {
    "text": "that if this throws an exception it's properly done in null check",
    "start": "1356559",
    "end": "1361919"
  },
  {
    "text": "so that's why the warning disappeared here but now i've explicitly said that this is going to throw an exception",
    "start": "1361919",
    "end": "1367520"
  },
  {
    "text": "because i don't expect this to ever be no if that happens it's going to tell",
    "start": "1367520",
    "end": "1372640"
  },
  {
    "text": "whoever's consuming this that we had a problem and they can go ahead and handle that",
    "start": "1372640",
    "end": "1377760"
  },
  {
    "text": "so we fixed this method here but i know that there's still another warning",
    "start": "1377760",
    "end": "1384000"
  },
  {
    "text": "this is not really a good idea right returning null here is quite ambiguous",
    "start": "1384000",
    "end": "1389679"
  },
  {
    "text": "so what i can do to get rid of this warning like i can't add a question mark here because i guess that doesn't make",
    "start": "1389679",
    "end": "1394880"
  },
  {
    "text": "any sense but what i can do i can promise the compiler that this",
    "start": "1394880",
    "end": "1400159"
  },
  {
    "text": "isn't null and there's no warning",
    "start": "1400159",
    "end": "1404640"
  },
  {
    "text": "but again i guess this is not the best approach so what i want to do is that i want to i",
    "start": "1407120",
    "end": "1412400"
  },
  {
    "text": "really want to fix this problem using the the exclamation mark to solve this is just for cases where you really know",
    "start": "1412400",
    "end": "1418880"
  },
  {
    "text": "better than the compiler which is never so try not to use the exclamation mark",
    "start": "1418880",
    "end": "1424880"
  },
  {
    "text": "instead we are going to fix this by creating a new instance of a person can",
    "start": "1424880",
    "end": "1430400"
  },
  {
    "text": "do our person is equal to new person and i'll i'll show you a pretty cool",
    "start": "1430400",
    "end": "1435760"
  },
  {
    "text": "language feature called target type new expression so if i don't want to",
    "start": "1435760",
    "end": "1442000"
  },
  {
    "text": "explicitly say that this is a new details i could instead say that this is just a new",
    "start": "1442000",
    "end": "1447840"
  },
  {
    "text": "and it would just automatically figure out which type it is which in this case",
    "start": "1447840",
    "end": "1454720"
  },
  {
    "text": "well just writing out details wouldn't make like wouldn't use very many characters but if this was a very",
    "start": "1454720",
    "end": "1460080"
  },
  {
    "text": "complex generic type being able to just use a shorthand would be really nice i could say first first",
    "start": "1460080",
    "end": "1466000"
  },
  {
    "text": "name is philip i can't even spell my own name i'm not going to bother with last name",
    "start": "1466000",
    "end": "1472880"
  },
  {
    "text": "and then i can do yield return person",
    "start": "1472880",
    "end": "1478320"
  },
  {
    "text": "this is a pretty cool hack so whenever you have an i innumerable of person or innumerable of t",
    "start": "1478320",
    "end": "1483919"
  },
  {
    "text": "you don't have to explicitly declare a new list or you don't have to use a temporary array or anything like",
    "start": "1483919",
    "end": "1490559"
  },
  {
    "text": "that you can use a yield keyword to create an iterator which is a pretty cool shorthand way of",
    "start": "1490559",
    "end": "1496400"
  },
  {
    "text": "approaching this here so now we've fixed all the null reference exception in the application",
    "start": "1496400",
    "end": "1502320"
  },
  {
    "text": "right and we learned that if we if we really have a no we'll use the exclamation mark to",
    "start": "1502320",
    "end": "1508000"
  },
  {
    "text": "just force this to um to work now there's one more setting that we can change which is treat",
    "start": "1508000",
    "end": "1513520"
  },
  {
    "text": "warnings as errors if i uncomment this here and let's just",
    "start": "1513520",
    "end": "1519840"
  },
  {
    "text": "do verb or do person is equal to p is equal to no",
    "start": "1519840",
    "end": "1525600"
  },
  {
    "text": "again i can't even spell look here what's going to happen now it's going to give me a compiler warning",
    "start": "1525600",
    "end": "1532640"
  },
  {
    "text": "because we're not allowed to set this to null anymore now all the warnings in the application",
    "start": "1532640",
    "end": "1538799"
  },
  {
    "text": "are going to be treated as non-nullable all the reference types are going to be treated as non-nullable and as long as",
    "start": "1538799",
    "end": "1544799"
  },
  {
    "text": "there is a warning it's going to give us an error instead",
    "start": "1544799",
    "end": "1550640"
  },
  {
    "text": "so this is a good idea if you know that you don't have many warnings in the application i mostly don't look at the warnings tab",
    "start": "1550640",
    "end": "1557360"
  },
  {
    "text": "because there's too many so treating them as errors is probably not the best approach for me personally",
    "start": "1557360",
    "end": "1563279"
  },
  {
    "text": "but i know that many projects or many larger organizations like to keep the warnings at a minimum make sure that",
    "start": "1563279",
    "end": "1570400"
  },
  {
    "text": "everything is done explicitly because a warning is there for a reason so what you want to do here is that you just want to go ahead and fix the",
    "start": "1570400",
    "end": "1576320"
  },
  {
    "text": "problems and again i guess if we have an exclamation mark here and just promise that this isn't null",
    "start": "1576320",
    "end": "1582880"
  },
  {
    "text": "um that is going to just get rid of that compiler warning",
    "start": "1582880",
    "end": "1588480"
  },
  {
    "text": "all right so this is a very good option you can do",
    "start": "1588480",
    "end": "1594080"
  },
  {
    "text": "this in the project settings as well the same goes for turning on the nullable context you can do that inside",
    "start": "1594080",
    "end": "1599600"
  },
  {
    "text": "each project it's a per project setting and actually what i didn't show you",
    "start": "1599600",
    "end": "1605360"
  },
  {
    "text": "i forgot you can enable and disable this with a compiler directive so you can say nullable disable if you really don't",
    "start": "1605360",
    "end": "1612799"
  },
  {
    "text": "want to go ahead and fix that particular method at this time it might be that this method is too complex to sort out",
    "start": "1612799",
    "end": "1619840"
  },
  {
    "text": "or you look at it the other way around if you just disable the nullable nullable reference types for the entire",
    "start": "1619840",
    "end": "1625840"
  },
  {
    "text": "project you can enable this for one method at a time",
    "start": "1625840",
    "end": "1630880"
  },
  {
    "text": "which will help you slowly refactor parts of the application i guess that this is the the second best",
    "start": "1630880",
    "end": "1638640"
  },
  {
    "text": "thing that we can get if we can't go back in time because we can't go back and just remove nulls from the language",
    "start": "1638640",
    "end": "1644399"
  },
  {
    "text": "completely right so this is pretty much my favorite feature from c sharp 8.",
    "start": "1644399",
    "end": "1650159"
  },
  {
    "text": "actually i love this feature as well asynchro streams is also one of those things that is going to make our lives a little bit easier",
    "start": "1650159",
    "end": "1656640"
  },
  {
    "text": "i i really like asynchronous programming and if you've seen any of my courses on pluralsight you know that i i've done",
    "start": "1656640",
    "end": "1663200"
  },
  {
    "text": "quite a bit of courses on asynchronous programming and it's because it's one of those things that let us express ourselves in",
    "start": "1663200",
    "end": "1669840"
  },
  {
    "text": "a way that was really hard before async and await and task and all of that was introduced in the language",
    "start": "1669840",
    "end": "1675919"
  },
  {
    "text": "so being able to stream data synchronously retrieve items in a way",
    "start": "1675919",
    "end": "1681760"
  },
  {
    "text": "that really is fluent to read and easy to understand i think that's a really great",
    "start": "1681760",
    "end": "1686880"
  },
  {
    "text": "addition to the language it all comes down to this pattern here so",
    "start": "1686880",
    "end": "1692480"
  },
  {
    "text": "again we have this we have this method here where you have an async keyword if you",
    "start": "1692480",
    "end": "1698640"
  },
  {
    "text": "have if you've ever used asynchronous programming in c sharp before you know that the async keyword is is most of the",
    "start": "1698640",
    "end": "1703840"
  },
  {
    "text": "time it's paired with a task like object now in this case here i have something called i",
    "start": "1703840",
    "end": "1709200"
  },
  {
    "text": "innumerable of a string what this means here is that it's going to give me strings",
    "start": "1709200",
    "end": "1715039"
  },
  {
    "text": "streaming strings into my application and it's going to give me each item asynchronously",
    "start": "1715039",
    "end": "1720559"
  },
  {
    "text": "right so each item is going to be retrieved maybe from a file on disk maybe it's going to give me this from a",
    "start": "1720559",
    "end": "1726640"
  },
  {
    "text": "database or an api we don't know so this here indicates that the data",
    "start": "1726640",
    "end": "1733440"
  },
  {
    "text": "will be streamed right and how do we stream something back well we introduce what i just showed you the",
    "start": "1733440",
    "end": "1740159"
  },
  {
    "text": "yield keyword so the yield keyword will tell the iterator that there's now an item to be processed",
    "start": "1740159",
    "end": "1746240"
  },
  {
    "text": "and we only use the yield keyword once we've in fact retrieved some data so what i'm going to",
    "start": "1746240",
    "end": "1753120"
  },
  {
    "text": "do here is that i'm going to use readline async just to read one line at a time from a file on my disk and then",
    "start": "1753120",
    "end": "1759039"
  },
  {
    "text": "i'm going to await that to just do this asynchronously and then i i have this this fake task.delay to just simulate",
    "start": "1759039",
    "end": "1766960"
  },
  {
    "text": "that this is done from a web call or something like that if i ran this code on an old machine",
    "start": "1766960",
    "end": "1772480"
  },
  {
    "text": "like my when i was a kid which is those spinning hard drives this would have i wouldn't have needed that test ideally",
    "start": "1772480",
    "end": "1778960"
  },
  {
    "text": "because everything took so much time but nowadays with all the fast ssds and fast computers",
    "start": "1778960",
    "end": "1784960"
  },
  {
    "text": "i really have to fake the deal just to show exactly how this works so this here is producing a stream of",
    "start": "1784960",
    "end": "1791039"
  },
  {
    "text": "data but what's important to know as well as with any innumerables it doesn't really start iterating through the data",
    "start": "1791039",
    "end": "1797760"
  },
  {
    "text": "unless you consume it and you consume this together with the for reach keyword right",
    "start": "1797760",
    "end": "1803520"
  },
  {
    "text": "so to do this we have a wait for each and we retrieve each element from that",
    "start": "1803520",
    "end": "1809120"
  },
  {
    "text": "method let me show you how this works",
    "start": "1809120",
    "end": "1813440"
  },
  {
    "text": "so i've created i'm using visual studio code now just to",
    "start": "1814559",
    "end": "1819600"
  },
  {
    "text": "spice it up a little bit i have this this this to produce a stream i've introduced an async",
    "start": "1819600",
    "end": "1825039"
  },
  {
    "text": "innumerable offstring called get lyrics and what it's it's going to do here is that it's also using one of the new",
    "start": "1825039",
    "end": "1830720"
  },
  {
    "text": "language features called a using declaration notice how it doesn't open and close the using declaration that's",
    "start": "1830720",
    "end": "1837679"
  },
  {
    "text": "because it's going to make sure that it's disposed of when this method completes and this method is going to stream data",
    "start": "1837679",
    "end": "1843840"
  },
  {
    "text": "back to whoever consumes this stream of data so this using block won't or this",
    "start": "1843840",
    "end": "1849039"
  },
  {
    "text": "using statement won't dispose until all of that is done right and then",
    "start": "1849039",
    "end": "1854880"
  },
  {
    "text": "we have this while away stream dot reline async is a string line",
    "start": "1854880",
    "end": "1860399"
  },
  {
    "text": "so this here i'm combining the await keyword with a pattern matching to check that whatever this returns",
    "start": "1860399",
    "end": "1868559"
  },
  {
    "text": "it needs to be an instance of a string and i'm going to capture that into a local variable that's only available in",
    "start": "1868559",
    "end": "1875600"
  },
  {
    "text": "this for in this in this while loop and then i'm going to have a task delay and then yield return now this here is",
    "start": "1875600",
    "end": "1881919"
  },
  {
    "text": "going to to stream this data back to whoever consumed that consumes this stream of data",
    "start": "1881919",
    "end": "1888000"
  },
  {
    "text": "so to do that i'm going to say await for each var line and get lyrics",
    "start": "1888000",
    "end": "1897200"
  },
  {
    "text": "copy that and oh this here is the new top level",
    "start": "1898320",
    "end": "1903519"
  },
  {
    "text": "statements introduced in csharp9 it means that you don't have to use the public static void main",
    "start": "1903519",
    "end": "1909440"
  },
  {
    "text": "stuff anymore it makes it much more streamlined to produce your applications or produce your program files which is",
    "start": "1909440",
    "end": "1916000"
  },
  {
    "text": "nice for something called minimal apis if we have some time over i can show you that as well",
    "start": "1916000",
    "end": "1921440"
  },
  {
    "text": "so now this here is a little bit different the await keyword is in in front of the for each now normally",
    "start": "1921440",
    "end": "1928000"
  },
  {
    "text": "if you use the async and away keywords and test the test parallel library you would have had the await keyword in",
    "start": "1928000",
    "end": "1933840"
  },
  {
    "text": "front of the method call that would mean that it would wait for that entire chunk of data to be completed",
    "start": "1933840",
    "end": "1939679"
  },
  {
    "text": "but what this means now if we move it to the front means that for each element that we are going to",
    "start": "1939679",
    "end": "1945279"
  },
  {
    "text": "get that is going to be retrieved asynchronously so i can do console.writeline",
    "start": "1945279",
    "end": "1952039"
  },
  {
    "text": "and i'll print the line like this here and now it's going to stream this to my",
    "start": "1953039",
    "end": "1959519"
  },
  {
    "text": "console let's do this dot net run hopefully each item is now streamed into",
    "start": "1959519",
    "end": "1966399"
  },
  {
    "text": "the console while this is compiled and executed",
    "start": "1966399",
    "end": "1971200"
  },
  {
    "text": "or maybe it just doesn't work look at that it works world's best song",
    "start": "1973919",
    "end": "1981360"
  },
  {
    "text": "perfect now so for sure this is a little bit",
    "start": "1982720",
    "end": "1988159"
  },
  {
    "text": "different now there's one thing i want to tell you here which is kind of true for all i enumerables",
    "start": "1988159",
    "end": "1993200"
  },
  {
    "text": "you never really know how much data is going to be inside of it so whenever you do for instance two",
    "start": "1993200",
    "end": "1999519"
  },
  {
    "text": "array how would it know when to stop how would it know",
    "start": "1999519",
    "end": "2005120"
  },
  {
    "text": "when to finish producing this array of data we don't know if this here is a this is a",
    "start": "2005120",
    "end": "2010320"
  },
  {
    "text": "database call or if this is a file that's just filled with text as we read it right so",
    "start": "2010320",
    "end": "2015679"
  },
  {
    "text": "never do two array or two lists on your innumerables unless you know that it's it's filled with data",
    "start": "2015679",
    "end": "2022320"
  },
  {
    "text": "that's a little bit tip all right so now we're going to be talking about",
    "start": "2022320",
    "end": "2028640"
  },
  {
    "text": "syrup 9. we've actually looked at a few features from both c sharp 9 10 um in this demo",
    "start": "2028640",
    "end": "2035440"
  },
  {
    "text": "as well but i'd like to talk about something called record types which is one of the features that was the",
    "start": "2035440",
    "end": "2042559"
  },
  {
    "text": "the idea behind bringing c sharp and vb as open source and rebuilding the compilers one of the first projects they",
    "start": "2042559",
    "end": "2049760"
  },
  {
    "text": "wanted to do with this or the first language features they wanted to introduce was at the time called primary",
    "start": "2049760",
    "end": "2054878"
  },
  {
    "text": "constructors which really is what record types are all about it took quite a long time to get this",
    "start": "2054879",
    "end": "2061440"
  },
  {
    "text": "language feature done and get it to a state where it makes sense for everyone or some trade-offs that they had to make",
    "start": "2061440",
    "end": "2067599"
  },
  {
    "text": "now this here provides a concise syntax of defining your your types or your",
    "start": "2067599",
    "end": "2072720"
  },
  {
    "text": "reference types it can also sfc sharp 10 be used with structs what it also does is that it comes with",
    "start": "2072720",
    "end": "2078638"
  },
  {
    "text": "a lot of built-in functionality out of the box it provides value-based equality it",
    "start": "2078639",
    "end": "2083919"
  },
  {
    "text": "allows you to print the object in all its properties as a string in a very nice nice format",
    "start": "2083919",
    "end": "2091599"
  },
  {
    "text": "what also came with c sharp nine unless when you can't do records records are immutable as well",
    "start": "2091599",
    "end": "2097520"
  },
  {
    "text": "and i'll show an example of that but what they also introduce is something called init only setters",
    "start": "2097520",
    "end": "2103040"
  },
  {
    "text": "so let me just bring this over here let's see here there we go i didn't show you this but what we have",
    "start": "2103040",
    "end": "2109839"
  },
  {
    "text": "is on if we look at the details there's this this little thing here called init",
    "start": "2109839",
    "end": "2115520"
  },
  {
    "text": "that means that once you've set this to a value using the object initializer you cannot change this anymore",
    "start": "2115520",
    "end": "2122320"
  },
  {
    "text": "so it's like you set it once and then it's set forever until you create a new instance and copy the value",
    "start": "2122320",
    "end": "2128240"
  },
  {
    "text": "so that was introduced in c sharp nine as well and called init only setters",
    "start": "2128240",
    "end": "2133440"
  },
  {
    "text": "and we just looked at what's called top level statements that's the idea behind just allowing you",
    "start": "2133680",
    "end": "2139520"
  },
  {
    "text": "to just write code in your program.cs why would you have to write all the boilerplate stuff inside your program",
    "start": "2139520",
    "end": "2145359"
  },
  {
    "text": "that doesn't really make sense and it's it's not only meant for new developers",
    "start": "2145359",
    "end": "2150560"
  },
  {
    "text": "to easily get into c-sharp but as i mentioned it's also one of those things that makes it easy for us to write very",
    "start": "2150560",
    "end": "2156480"
  },
  {
    "text": "minimal applications that might be deployed as a small docker container it's very self-contained in a small very",
    "start": "2156480",
    "end": "2162720"
  },
  {
    "text": "small file we also got really pattern matching enhancement there's a lot of changes to",
    "start": "2162720",
    "end": "2169200"
  },
  {
    "text": "pattern matching and pattern matching is one of those things that's being changed i i would say that with every version of",
    "start": "2169200",
    "end": "2175280"
  },
  {
    "text": "c sharp coming forward there's going to be changes to pattern matching we're going to spend some time showing you all",
    "start": "2175280",
    "end": "2180480"
  },
  {
    "text": "the patterns that have been added we looked at the target type new expression as well which is a nice",
    "start": "2180480",
    "end": "2185520"
  },
  {
    "text": "addition to c sharp does it it removes the idea of just having to explicitly define the type when you",
    "start": "2185520",
    "end": "2192480"
  },
  {
    "text": "create an instance and there's a lot more added to the language again like this here is quite a",
    "start": "2192480",
    "end": "2199200"
  },
  {
    "text": "lot of features to add to one iteration of the language",
    "start": "2199200",
    "end": "2204960"
  },
  {
    "text": "and i just want to emphasize that you don't have to use all of this you don't have to understand all the language features but if you find yourself in a",
    "start": "2204960",
    "end": "2212000"
  },
  {
    "text": "situation where you feel like is there a smarter way to solve my particular problem or express myself in a different",
    "start": "2212000",
    "end": "2218160"
  },
  {
    "text": "way there might be a new language feature that allows you to do that and also give you some some",
    "start": "2218160",
    "end": "2224079"
  },
  {
    "text": "nice code generated out of the box that's probably more more fault safe than what you could potentially write yourself",
    "start": "2224079",
    "end": "2231760"
  },
  {
    "text": "so i've mentioned pattern matching quite a lot and we haven't discussed exactly what this entails or what that means to",
    "start": "2231760",
    "end": "2237200"
  },
  {
    "text": "the language pattern matching as a concept is really simple it's the idea of being able to",
    "start": "2237200",
    "end": "2243359"
  },
  {
    "text": "determine what certain things are is it a yellow fruit is it a banana is",
    "start": "2243359",
    "end": "2248960"
  },
  {
    "text": "it a puzzle piece that looks in this particular way is it an ikea poster that's",
    "start": "2248960",
    "end": "2254240"
  },
  {
    "text": "extremely incorrect it actually looks like the furniture that i tend to build myself but",
    "start": "2254240",
    "end": "2260480"
  },
  {
    "text": "so we can use pattern matching to determine those different things it's not all only for determining the color",
    "start": "2260480",
    "end": "2266400"
  },
  {
    "text": "but it's it's for so much more we can use it to drill down into an object and determine exactly what it contains what",
    "start": "2266400",
    "end": "2274000"
  },
  {
    "text": "it inherits from and so forth but matching on a given type and the attributes i have the attributes in",
    "start": "2274000",
    "end": "2280800"
  },
  {
    "text": "quotes here because it's not the attributes that you put on your your methods or on your classes it's the",
    "start": "2280800",
    "end": "2286960"
  },
  {
    "text": "attributes in terms of what is this right so in c sharp one through six the",
    "start": "2286960",
    "end": "2292400"
  },
  {
    "text": "way that you would build this is that would you would get the type and compare that to whatever you're looking for then you would check the property of that",
    "start": "2292400",
    "end": "2299200"
  },
  {
    "text": "given type and if you have to use this as the concrete type you would have to cast this yourself",
    "start": "2299200",
    "end": "2305760"
  },
  {
    "text": "there's nothing wrong with this piece of code here it's just a little bit more code than we have than what we have to",
    "start": "2305760",
    "end": "2311920"
  },
  {
    "text": "write so as of c sharp 7 they introduced a way for us to use a switch the switch",
    "start": "2311920",
    "end": "2317280"
  },
  {
    "text": "statement to determine sort of this the same thing but in a little bit more of a concise manner well",
    "start": "2317280",
    "end": "2323760"
  },
  {
    "text": "i wouldn't say concise because it's a lot more code but you get the idea right we can express ourselves in a similar",
    "start": "2323760",
    "end": "2330640"
  },
  {
    "text": "way but what we don't have here there's no casting involved here",
    "start": "2330640",
    "end": "2335839"
  },
  {
    "text": "we don't have to cast this particular type into the concrete type before we use this inside the",
    "start": "2335839",
    "end": "2342720"
  },
  {
    "text": "inside of the case here so it's a little bit different so personally sfc sharp 7 i wouldn't",
    "start": "2342720",
    "end": "2350000"
  },
  {
    "text": "really use this because it didn't make my code much more readable but then",
    "start": "2350000",
    "end": "2355760"
  },
  {
    "text": "something called switch expressions was introduced this is a new way of looking at",
    "start": "2355760",
    "end": "2361040"
  },
  {
    "text": "at an object so here we say i want to get a result based off what this this object is and",
    "start": "2361040",
    "end": "2367839"
  },
  {
    "text": "we can create patterns to determine that so we have the the input here could be",
    "start": "2367839",
    "end": "2373839"
  },
  {
    "text": "anything and i want to create a switch block that contains a lot of expressions",
    "start": "2373839",
    "end": "2381599"
  },
  {
    "text": "the expressions will then or the patterns will then determine what this is",
    "start": "2381599",
    "end": "2387200"
  },
  {
    "text": "to make it simple we could say that if the fruit here is an apple i'm going to return the string this is an apple",
    "start": "2387200",
    "end": "2394079"
  },
  {
    "text": "and for everything else this here is a discard the discard will in fact match on nulls",
    "start": "2394079",
    "end": "2401200"
  },
  {
    "text": "as well it will match on anything that is not of that particular type",
    "start": "2401200",
    "end": "2407440"
  },
  {
    "text": "they don't even have to share the same base type when it comes to pattern matching if you have an object passed into the method that's using the type",
    "start": "2407440",
    "end": "2414240"
  },
  {
    "text": "object it could match on anything you could imagine strings ends and whatnot",
    "start": "2414240",
    "end": "2419599"
  },
  {
    "text": "so this here looks a little bit more tidy right and this here is what's returned",
    "start": "2419599",
    "end": "2425200"
  },
  {
    "text": "so we're going to be spending some time looking at different ways of writing patterns because it's much more powerful",
    "start": "2425200",
    "end": "2430240"
  },
  {
    "text": "than just returning strings like this here so in c sharp there are multiple different patterns and as i",
    "start": "2430240",
    "end": "2436960"
  },
  {
    "text": "mentioned they are adding much more to this as well what we just saw here was a type pattern it matches the particular",
    "start": "2436960",
    "end": "2443520"
  },
  {
    "text": "type that we're looking for we have something called a positional pattern which uses the deconstruct",
    "start": "2443520",
    "end": "2449359"
  },
  {
    "text": "method imagine that i deconstruct an object and i know that the first parameter is the first name the second",
    "start": "2449359",
    "end": "2454640"
  },
  {
    "text": "one is the last name i could say find all the people in this list of of people",
    "start": "2454640",
    "end": "2459680"
  },
  {
    "text": "that have the last name of ekberg for instance which is my last name it would then be able to match that",
    "start": "2459680",
    "end": "2465119"
  },
  {
    "text": "because it could be deconstructed that's the positional pattern we can look at different properties to",
    "start": "2465119",
    "end": "2470160"
  },
  {
    "text": "determine what they contain we can match on tuples or tuples",
    "start": "2470160",
    "end": "2476400"
  },
  {
    "text": "we can use a relational pattern imagine that i could say give me all the people inside this array here that are",
    "start": "2476400",
    "end": "2482880"
  },
  {
    "text": "between the age 20 and 40. right that's where the conjunctive and",
    "start": "2482880",
    "end": "2489200"
  },
  {
    "text": "and disjunctive or patterns come into play as well because then i could say give me everyone from",
    "start": "2489200",
    "end": "2494400"
  },
  {
    "text": "from the age of 20 to 40 or the people that are in this other age range",
    "start": "2494400",
    "end": "2500160"
  },
  {
    "text": "and i can use something called parenthesis pattern and i can negate patterns using a knot pattern and i can use recursive patterns recursive",
    "start": "2500160",
    "end": "2507200"
  },
  {
    "text": "patterns simply put means that we're combining multiple patterns together for instance give me a person that is",
    "start": "2507200",
    "end": "2514160"
  },
  {
    "text": "also this age let's have a look at a few of these different patterns",
    "start": "2514160",
    "end": "2520480"
  },
  {
    "text": "so pattern matching alone there's a lot of patterns available in c sharp",
    "start": "2520480",
    "end": "2528400"
  },
  {
    "text": "but we're going to look at a few of them i'm going to just add a new project",
    "start": "2528400",
    "end": "2534078"
  },
  {
    "text": "just to show you the new project template again i'll add a new console application",
    "start": "2534880",
    "end": "2541040"
  },
  {
    "text": "let's use dot net six doesn't matter but we can do dotnet six and this here is now the new project",
    "start": "2541040",
    "end": "2547520"
  },
  {
    "text": "template available in net six c sharp c-sharp nine",
    "start": "2547520",
    "end": "2552880"
  },
  {
    "text": "what this allows us to do is is write some very nice code without having to introduce um all of that boilerplate",
    "start": "2552880",
    "end": "2560000"
  },
  {
    "text": "code that we had before i'm going to bring in a file here called test results",
    "start": "2560000",
    "end": "2565839"
  },
  {
    "text": "this is not kovi test results this here is like for a university or something like that so",
    "start": "2565839",
    "end": "2572319"
  },
  {
    "text": "if you're like me you kind of had to take the test multiple time to pass especially if it's math that's not",
    "start": "2572319",
    "end": "2577440"
  },
  {
    "text": "really my thing so therefore i have a property called number of tests if it was a valid or if it was a past",
    "start": "2577440",
    "end": "2584240"
  },
  {
    "text": "test say that which date that was tested on this is a very just simple simple object just to represent some data and",
    "start": "2584240",
    "end": "2590160"
  },
  {
    "text": "give you an idea of what we can do with pattern matching then i have this deconstruct method which deconstructs this object it takes",
    "start": "2590160",
    "end": "2596560"
  },
  {
    "text": "a test result and it allows you to give you how many days ago did you take this test and was this a valid or a passed",
    "start": "2596560",
    "end": "2603520"
  },
  {
    "text": "test and as you see here when you build this deconstruct method it doesn't have to correspond exactly with the properties",
    "start": "2603520",
    "end": "2610640"
  },
  {
    "text": "or fields that you have on your class we can build this uh we can we can do computation in here to determine uh for",
    "start": "2610640",
    "end": "2618720"
  },
  {
    "text": "in this case how many days since we took the test so if we have an instance let's say that we",
    "start": "2618720",
    "end": "2624880"
  },
  {
    "text": "have a test result we are now going to assume that we got this out of a method call",
    "start": "2624880",
    "end": "2630640"
  },
  {
    "text": "test result it's using the base base test result because i also have a negative and a",
    "start": "2630640",
    "end": "2636079"
  },
  {
    "text": "positive test result should be passed or failed um",
    "start": "2636079",
    "end": "2641119"
  },
  {
    "text": "could also be password failsory so if i just instantiate this with a new positive",
    "start": "2641119",
    "end": "2647040"
  },
  {
    "text": "test of course in this case here i know that it's positive but we could again imagine that this came",
    "start": "2647040",
    "end": "2653119"
  },
  {
    "text": "out of a method called i can use pattern matching in multiple different ways i could say that if the test result",
    "start": "2653119",
    "end": "2660240"
  },
  {
    "text": "if the test results is positive",
    "start": "2660240",
    "end": "2665680"
  },
  {
    "text": "i could then enter this if block here so i don't have to use this with the switch or the switch expression i can use this",
    "start": "2665680",
    "end": "2671440"
  },
  {
    "text": "with that as well here i could say that if this test result is not positive",
    "start": "2671440",
    "end": "2676480"
  },
  {
    "text": "right so i can negate that type pattern using the not in front of all the patterns that you have on the right hand",
    "start": "2676480",
    "end": "2682880"
  },
  {
    "text": "side means that it will negate that entire thing it doesn't just negate the first part of the pattern it negates",
    "start": "2682880",
    "end": "2689520"
  },
  {
    "text": "everything you have to the right hand side that's very important to keep in mind now obviously it would be better to just",
    "start": "2689520",
    "end": "2696079"
  },
  {
    "text": "swap that around i don't really want to see you doing like if it's not false",
    "start": "2696079",
    "end": "2701119"
  },
  {
    "text": "because that doesn't make any sense so again you can abuse the language features but you shouldn't",
    "start": "2701119",
    "end": "2706160"
  },
  {
    "text": "but what i can do here is that i can say if it's positive and then to do ticket property",
    "start": "2706160",
    "end": "2712720"
  },
  {
    "text": "i can say if the number of tests actually listed not if the number of",
    "start": "2712720",
    "end": "2718800"
  },
  {
    "text": "tests are more than than say more than two",
    "start": "2718800",
    "end": "2725119"
  },
  {
    "text": "then i want to enter this this if block here but as we don't know if this here is in",
    "start": "2725119",
    "end": "2731280"
  },
  {
    "text": "fact like i'd have to in this case i'd have to cast the let's do this just to show you exactly",
    "start": "2731280",
    "end": "2739040"
  },
  {
    "text": "where result is equal to test result",
    "start": "2739040",
    "end": "2744480"
  },
  {
    "text": "i'd have to do this right to be able to access the properties that are only available on the particular on that",
    "start": "2744480",
    "end": "2750560"
  },
  {
    "text": "particular type as the concrete type but what i can do with pattern matching is that i can",
    "start": "2750560",
    "end": "2755680"
  },
  {
    "text": "use something called a var pattern or declaration pattern sorry to say that i want to capture this",
    "start": "2755680",
    "end": "2762480"
  },
  {
    "text": "once you've validated all the patterns i can then capture this as a local variable called positive and i can now",
    "start": "2762480",
    "end": "2768800"
  },
  {
    "text": "access all the properties that are available on this actual type and if i zoom in here",
    "start": "2768800",
    "end": "2775440"
  },
  {
    "text": "you'll see that it's in fact the type positive so it cast that for me automatically this won't work for every",
    "start": "2775440",
    "end": "2781760"
  },
  {
    "text": "different case when it cannot determine like if you're using an or pattern to say if this is positive or negative it",
    "start": "2781760",
    "end": "2787760"
  },
  {
    "text": "wouldn't know exactly what that would be at compile time",
    "start": "2787760",
    "end": "2792560"
  },
  {
    "text": "then you would have to cast it yourself again i can then combine these different",
    "start": "2793040",
    "end": "2798400"
  },
  {
    "text": "patterns by using and or ors it's a mouthful to say that so i could say if it's positive",
    "start": "2798400",
    "end": "2806240"
  },
  {
    "text": "maybe this is hard to read but let's see here and",
    "start": "2806240",
    "end": "2812560"
  },
  {
    "text": "let's do it on one line sorry and it's less than five less than or",
    "start": "2812880",
    "end": "2818880"
  },
  {
    "text": "equal to five i can say that when this is positive and it's between two and five",
    "start": "2818880",
    "end": "2824720"
  },
  {
    "text": "so i could use this with ifs i could use it with the with the switch expression as well i'll show you a few more",
    "start": "2826240",
    "end": "2831280"
  },
  {
    "text": "patterns as well so i mentioned that the test result here introduces something called this deconstruct and i want to",
    "start": "2831280",
    "end": "2837920"
  },
  {
    "text": "use that now to write a pattern that matches this particular test result to show you an example of of",
    "start": "2837920",
    "end": "2844400"
  },
  {
    "text": "how to write unreadable code what you should avoid so let's say that we want to want to figure out the outcome of",
    "start": "2844400",
    "end": "2850000"
  },
  {
    "text": "this of this test result so i could say based on the test result we're going to create a switch expression",
    "start": "2850000",
    "end": "2857119"
  },
  {
    "text": "and when i cannot determine what this is i'm going to say that this is incon",
    "start": "2857119",
    "end": "2864240"
  },
  {
    "text": "not available i can even spell inconclusive so i'm not going to attempt that now this works",
    "start": "2864240",
    "end": "2870240"
  },
  {
    "text": "like a normal switch block so if i try to add something after the disc card it's going to tell me that it's already been pas already been matched on so you",
    "start": "2870240",
    "end": "2877839"
  },
  {
    "text": "have to use the the more granular ones at the top so since",
    "start": "2877839",
    "end": "2882960"
  },
  {
    "text": "discard is a catch all you'd have to to move this one one line above",
    "start": "2882960",
    "end": "2888640"
  },
  {
    "text": "i can catch all the positive ones or i can also say that when this here can be",
    "start": "2888640",
    "end": "2894160"
  },
  {
    "text": "deconstructed into something that where i don't care about the first parameter but the second one needs to be let's say",
    "start": "2894160",
    "end": "2900240"
  },
  {
    "text": "false whatever this is",
    "start": "2900240",
    "end": "2905280"
  },
  {
    "text": "so this here how would we know what that is like i have no idea if surely enough when i",
    "start": "2906319",
    "end": "2913040"
  },
  {
    "text": "write the code it makes sense because i look at the deconstruct method i write my patterns but then tomorrow when i go",
    "start": "2913040",
    "end": "2918160"
  },
  {
    "text": "back to this code i'm not going to have any idea at all what this means so you can use name parameters as well",
    "start": "2918160",
    "end": "2925280"
  },
  {
    "text": "you could say is valid because that's what that that is called the",
    "start": "2925280",
    "end": "2930720"
  },
  {
    "text": "as you'll see here it's called it's valid in the deconstruct it uses the deconstruct to pull that object apart",
    "start": "2930720",
    "end": "2938319"
  },
  {
    "text": "and then i say for every test that is that is not valid and again i could",
    "start": "2938319",
    "end": "2944640"
  },
  {
    "text": "negate that to find all the ones that are positive",
    "start": "2944640",
    "end": "2949920"
  },
  {
    "text": "avoid that please so now invalid",
    "start": "2950640",
    "end": "2957079"
  },
  {
    "text": "and again if i don't want to use the deconstruct because it can get hard to read if you have to use the deconstruct",
    "start": "2958160",
    "end": "2963359"
  },
  {
    "text": "or if you want to do that the same goes for the tuple pattern they look the same way you should try to use name parameters",
    "start": "2963359",
    "end": "2970160"
  },
  {
    "text": "because otherwise it won't make any sense at all i could also combine this like i don't",
    "start": "2970160",
    "end": "2975839"
  },
  {
    "text": "have to use the deconstruct for all of these different ones i could say that if it's a positive test",
    "start": "2975839",
    "end": "2981760"
  },
  {
    "text": "where the number of tests the same that we had earlier the number of tests are more than or equal to two and less than",
    "start": "2981760",
    "end": "2988480"
  },
  {
    "text": "or equal to five i can capture that as well and i can do something with that value again it",
    "start": "2988480",
    "end": "2994000"
  },
  {
    "text": "doesn't have to return a string it could also construct a complex type as well",
    "start": "2994000",
    "end": "2999200"
  },
  {
    "text": "so as you'll see here you can combine the different types of pattern matching or the different types of patterns available",
    "start": "2999200",
    "end": "3004880"
  },
  {
    "text": "you will probably find yourself using this type pattern together with the property pattern the",
    "start": "3004880",
    "end": "3010839"
  },
  {
    "text": "most or if you have a topple use the tuple pattern which looks exactly like this here",
    "start": "3010839",
    "end": "3016960"
  },
  {
    "text": "okay",
    "start": "3016960",
    "end": "3019280"
  },
  {
    "text": "let's go ahead so for c sharp 10 oh sorry let's go",
    "start": "3022400",
    "end": "3027520"
  },
  {
    "text": "through this so for c sharp 10 they made sure that we can use record structs which is i'm",
    "start": "3027520",
    "end": "3033440"
  },
  {
    "text": "going to show you records that as the last thing that we go through the records tracks allows us to also use the",
    "start": "3033440",
    "end": "3038480"
  },
  {
    "text": "same syntax for producing value value types that are records which comes with the record type or all the record stuff",
    "start": "3038480",
    "end": "3044960"
  },
  {
    "text": "out of the box in honest honestly one of like one of the most important things in c sharp 10",
    "start": "3044960",
    "end": "3051520"
  },
  {
    "text": "is probably the global using directives and the file scope names type namespace declarations that means that you no",
    "start": "3051520",
    "end": "3057440"
  },
  {
    "text": "longer have to you no longer have to declare your namespace and wrap",
    "start": "3057440",
    "end": "3063599"
  },
  {
    "text": "everything like we do here in a namespace so i can say that this here is now going to be a part of the",
    "start": "3063599",
    "end": "3069839"
  },
  {
    "text": "namespace namespace ndc",
    "start": "3069839",
    "end": "3075520"
  },
  {
    "text": "and now this entire file is going to be inside the namespace of ndc instead of having to wrap this entire class inside",
    "start": "3075520",
    "end": "3082160"
  },
  {
    "text": "this this namespace it's just a matter of indenting your code making it easier i guess when reading this through",
    "start": "3082160",
    "end": "3087839"
  },
  {
    "text": "different types of tooling and you can also say that if you want to you can introduce a file or you can do",
    "start": "3087839",
    "end": "3093680"
  },
  {
    "text": "it anywhere in the application but you can use something called global using directives so you could say that i want",
    "start": "3093680",
    "end": "3099040"
  },
  {
    "text": "to be using ndc for instance but i can also say that this here is a global using",
    "start": "3099040",
    "end": "3105680"
  },
  {
    "text": "to say that everything inside doesn't make any sense here but",
    "start": "3105680",
    "end": "3110720"
  },
  {
    "text": "gives you an idea of this here we could say that everywhere in the",
    "start": "3110720",
    "end": "3115760"
  },
  {
    "text": "application you no longer have to introduce the using statement for ndc it's just automatically going to be used",
    "start": "3115760",
    "end": "3121760"
  },
  {
    "text": "inside the entire application can be confusing because what happens if",
    "start": "3121760",
    "end": "3127440"
  },
  {
    "text": "you bring in extension methods for example you will have no idea where they're coming from",
    "start": "3127440",
    "end": "3132800"
  },
  {
    "text": "so again just keep in mind that some of these language features you should use them with caution",
    "start": "3132800",
    "end": "3139480"
  },
  {
    "text": "all right so that's the global using statements and file scope namespace declarations they also make it easier to",
    "start": "3140880",
    "end": "3146160"
  },
  {
    "text": "do some property pattern for for further down like their extended property pattern so if we were looking",
    "start": "3146160",
    "end": "3153359"
  },
  {
    "text": "at for example the test result and that had a a property was also an in a reference type that had a property that",
    "start": "3153359",
    "end": "3160079"
  },
  {
    "text": "you wanted to check on you can just do you can just check the property using the dot accessor i'll show you",
    "start": "3160079",
    "end": "3168480"
  },
  {
    "text": "let's get rid of this here let's say that we had a a property on here let's say that that",
    "start": "3169440",
    "end": "3176400"
  },
  {
    "text": "the is valid was a reference type in the past you'd have to do something like this here which wasn't very nice",
    "start": "3176400",
    "end": "3182480"
  },
  {
    "text": "you could say that it's valid that object had a certain value",
    "start": "3182480",
    "end": "3188640"
  },
  {
    "text": "right would make it much more more flexible so being cautious of time i want to show",
    "start": "3188640",
    "end": "3195359"
  },
  {
    "text": "you the final thing which is a really great feature and that's the record types record types",
    "start": "3195359",
    "end": "3201280"
  },
  {
    "text": "let's say that i want to create a new class called person which has a first name and a last name",
    "start": "3201280",
    "end": "3209359"
  },
  {
    "text": "when i did this here now what happens is that this here behind the scenes introduces a new reference type it",
    "start": "3209359",
    "end": "3217680"
  },
  {
    "text": "creates or it generates a class a class that has a deconstruct method on it",
    "start": "3217680",
    "end": "3222880"
  },
  {
    "text": "based on the different the different properties that i defined here it has two properties with backing",
    "start": "3222880",
    "end": "3228559"
  },
  {
    "text": "fields generated it has value-based equality which means that if i create an instance of this",
    "start": "3228559",
    "end": "3235440"
  },
  {
    "text": "new person whoops new person",
    "start": "3235599",
    "end": "3240960"
  },
  {
    "text": "this will require me to enter my first name and my last name",
    "start": "3243040",
    "end": "3249520"
  },
  {
    "text": "like this here this pus this is called a positional record so when i have this this primary",
    "start": "3249520",
    "end": "3256079"
  },
  {
    "text": "constructor is what it's called it requires me to pass those those different fields i could add a body to",
    "start": "3256079",
    "end": "3262160"
  },
  {
    "text": "my record to introduce more things more properties more constructors more methods more whatever",
    "start": "3262160",
    "end": "3268640"
  },
  {
    "text": "you want the purpose of a record is to hold data it's for replacing dtos and",
    "start": "3268640",
    "end": "3274000"
  },
  {
    "text": "making it easy to compare data but the place where you cannot use it is with entity framework because entity",
    "start": "3274000",
    "end": "3280400"
  },
  {
    "text": "framework relies on reference type equality and as i mentioned uh record",
    "start": "3280400",
    "end": "3285839"
  },
  {
    "text": "types this is value based equality and my last name is equity here we go so",
    "start": "3285839",
    "end": "3291280"
  },
  {
    "text": "what does that mean to be value-based equality let's say that i have two instances",
    "start": "3291280",
    "end": "3297200"
  },
  {
    "text": "i have philip and phillip two they're both references or new instances",
    "start": "3297200",
    "end": "3302319"
  },
  {
    "text": "like this here normally if we compare",
    "start": "3302319",
    "end": "3307680"
  },
  {
    "text": "to reference types this would yield false but when it comes to record types",
    "start": "3307680",
    "end": "3314720"
  },
  {
    "text": "this will compare the properties of those generated classes so this here would in fact yield true",
    "start": "3314720",
    "end": "3322480"
  },
  {
    "text": "of course if i change one of the one of the",
    "start": "3322480",
    "end": "3327119"
  },
  {
    "text": "one of the properties or one of the values this is going to be false which kind of makes sense",
    "start": "3327520",
    "end": "3333040"
  },
  {
    "text": "what i can also do here if i don't want to do this this entire new person if i just want to copy this here or create a",
    "start": "3333200",
    "end": "3339440"
  },
  {
    "text": "new instance as i mentioned it's immutable which means that i couldn't say let's say that i want to change my",
    "start": "3339440",
    "end": "3344880"
  },
  {
    "text": "last name to to something else or i want to change my i want to create my wife's an instance",
    "start": "3344880",
    "end": "3350720"
  },
  {
    "text": "of my wife here now instead of having to to create that new instance i can use a",
    "start": "3350720",
    "end": "3357680"
  },
  {
    "text": "language feature called with expression so instead of having to create this all of that code i could say or sophie is",
    "start": "3357680",
    "end": "3364240"
  },
  {
    "text": "equal to philip with a first name of",
    "start": "3364240",
    "end": "3369359"
  },
  {
    "text": "right and this here will now create a copy of",
    "start": "3370319",
    "end": "3375359"
  },
  {
    "text": "all the values that are on my instance and create this this separate instance here as well",
    "start": "3375359",
    "end": "3380640"
  },
  {
    "text": "because i couldn't change the name if i wanted to because all the properties are read only and i can prove that to you by going",
    "start": "3380640",
    "end": "3386799"
  },
  {
    "text": "over to a place called sharplab.io if that still works",
    "start": "3386799",
    "end": "3393920"
  },
  {
    "text": "here we go so i've entered the same code here this little thing here is in the way but i",
    "start": "3394640",
    "end": "3400000"
  },
  {
    "text": "promise it's it's the same thing it's the record of person with a first name and last name and the right hand",
    "start": "3400000",
    "end": "3406319"
  },
  {
    "text": "side here is all the code that's generated when i enter this code here let me scroll down just a little bit",
    "start": "3406319",
    "end": "3412160"
  },
  {
    "text": "here we have a class here you see here class person it implements i equatable of person",
    "start": "3412160",
    "end": "3419200"
  },
  {
    "text": "the interface gives us a value-based equality it then has two backing fields that are read only means that we can",
    "start": "3419200",
    "end": "3425280"
  },
  {
    "text": "only set them once it has properties that are exposing these backing fields which means that we",
    "start": "3425280",
    "end": "3431359"
  },
  {
    "text": "can access them just us and and they're marked as init which means that they can be changed with that with expression",
    "start": "3431359",
    "end": "3438640"
  },
  {
    "text": "it then if we scroll down a little bit here we have the operator overloads as well for",
    "start": "3438640",
    "end": "3444720"
  },
  {
    "text": "inequality for equality and this will compare all the backing fields with each other",
    "start": "3444720",
    "end": "3450720"
  },
  {
    "text": "i'm just going to scroll over to one of them and show you first name backing field is equals to the other person's backing",
    "start": "3450720",
    "end": "3456480"
  },
  {
    "text": "field so there's quite a lot of code coming into this here by just writing record person",
    "start": "3456480",
    "end": "3462880"
  },
  {
    "text": "so i would recommend that you use this for everything that's a data transmission or you have something that's going over the wire you have some",
    "start": "3462880",
    "end": "3469040"
  },
  {
    "text": "really simple data containers in the application but don't use it for entity framework because that's not going to",
    "start": "3469040",
    "end": "3475200"
  },
  {
    "text": "work i do expect that they're going to make some changes with that later on",
    "start": "3475200",
    "end": "3481760"
  },
  {
    "text": "all right um let's see here they've also made some other changes to c-sharp ten not as much",
    "start": "3481760",
    "end": "3488160"
  },
  {
    "text": "as in terms of c sharp eight nine and so forth and the same really goes for c sharp eleven",
    "start": "3488160",
    "end": "3494160"
  },
  {
    "text": "but we've looked at quite a few of the features that are coming in c sharp ten and one of them that they're adding which is a preview feature in c sharp",
    "start": "3494160",
    "end": "3500559"
  },
  {
    "text": "ten that's also a concept they're trying to do in in versions of c sharp coming up it's adding preview features you can",
    "start": "3500559",
    "end": "3506559"
  },
  {
    "text": "enable the preview flag in both the runtime and as well as the language this here is static abstract members and",
    "start": "3506559",
    "end": "3513520"
  },
  {
    "text": "interfaces so i can change this static t instance here to become abstract",
    "start": "3513520",
    "end": "3519200"
  },
  {
    "text": "right and then that requires that whoever implements the interface also",
    "start": "3519200",
    "end": "3524559"
  },
  {
    "text": "implements that that method but this here is a dotnetpreview.6 preview feature and it's going to be a part of c",
    "start": "3524559",
    "end": "3530880"
  },
  {
    "text": "sharp 11. right so if we don't do that it's going to tell us that we're if we're not implementing it it's going to give us a",
    "start": "3530880",
    "end": "3536799"
  },
  {
    "text": "warning another cool feature they're doing is that we can use constant strings in",
    "start": "3536799",
    "end": "3542640"
  },
  {
    "text": "and using string interpolation it's a nice addition we couldn't do this previously",
    "start": "3542640",
    "end": "3547920"
  },
  {
    "text": "and the natural type of the lambda which is this called here so we have to",
    "start": "3547920",
    "end": "3554079"
  },
  {
    "text": "explicitly in c sharp nine we have to explicitly determine what is this this lambda going to be compiled to we have",
    "start": "3554079",
    "end": "3561359"
  },
  {
    "text": "to say well this is a func of string and int but the compiler could probably figure this out by looking at the input",
    "start": "3561359",
    "end": "3567520"
  },
  {
    "text": "parameters and what it returns so that's what they introduced here the natural type of the lambda",
    "start": "3567520",
    "end": "3574400"
  },
  {
    "text": "and this here is that you cannot figure that out in c sharp 10. and with that",
    "start": "3574400",
    "end": "3580640"
  },
  {
    "text": "we also got something called attributes on lambdas this here is a minimal api",
    "start": "3580640",
    "end": "3587839"
  },
  {
    "text": "i have this in a program.cs file and it just spawns up a website for me list is",
    "start": "3587839",
    "end": "3593280"
  },
  {
    "text": "for this slash id path allows me to pass in data which is gets from from some of",
    "start": "3593280",
    "end": "3598480"
  },
  {
    "text": "the headers so i have about seven seconds left",
    "start": "3598480",
    "end": "3604079"
  },
  {
    "text": "so what's next we've already talked about the fact that whatever comes in c 11",
    "start": "3604079",
    "end": "3610480"
  },
  {
    "text": "might not even really get into the language but they're looking at more patterns how",
    "start": "3610480",
    "end": "3617040"
  },
  {
    "text": "do we match lists how do we use slices of a list and look at that how can we use something called a span pattern",
    "start": "3617040",
    "end": "3623920"
  },
  {
    "text": "there's something called name of parameters we're going to be now finally caching delegates so if you have a um",
    "start": "3623920",
    "end": "3630559"
  },
  {
    "text": "static method group it's no longer going to have you have to create an instance of that and do allocations even if it's",
    "start": "3630559",
    "end": "3637440"
  },
  {
    "text": "just for very high performance applications where you would notice this still a nice addition they're",
    "start": "3637440",
    "end": "3642559"
  },
  {
    "text": "introducing something called required or required properties which means that we could say that when you create an",
    "start": "3642559",
    "end": "3648319"
  },
  {
    "text": "instance of this using the object initializer you are now required to set this value",
    "start": "3648319",
    "end": "3654160"
  },
  {
    "text": "right again we're working towards a a way of immutability and where we force people",
    "start": "3654160",
    "end": "3659599"
  },
  {
    "text": "to correspond to what our types should be there's nothing called raw string",
    "start": "3659599",
    "end": "3665440"
  },
  {
    "text": "literals static members and interfaces is going to be added now as a real feature which",
    "start": "3665440",
    "end": "3670720"
  },
  {
    "text": "they've added as a preview feature in c sharp 10. this is called utf-8 string literals i",
    "start": "3670720",
    "end": "3676559"
  },
  {
    "text": "can take my string name here and just map that into a span of bytes so i don't have to manually cast that",
    "start": "3676559",
    "end": "3683359"
  },
  {
    "text": "into an utf-8 string this is really handy if you have a lot of data that comes over networking",
    "start": "3683359",
    "end": "3690400"
  },
  {
    "text": "generic attributes are also part of the c-sharp 11 promised feature list",
    "start": "3690400",
    "end": "3696640"
  },
  {
    "text": "and then they've actually removed one of the features that they've been previewing for quite some time",
    "start": "3696640",
    "end": "3701839"
  },
  {
    "text": "they wanted to add double bangs bang bang on input parameters to methods and if that was",
    "start": "3701839",
    "end": "3707920"
  },
  {
    "text": "null it threw an exception and a lot of people didn't like this",
    "start": "3707920",
    "end": "3713119"
  },
  {
    "text": "so they listened and they removed the feature so if you've been hoping for whatever what this was called parameter null",
    "start": "3713119",
    "end": "3719440"
  },
  {
    "text": "checking if you really wanted that i'm sorry to say that they've removed that but again this language is being worked",
    "start": "3719440",
    "end": "3725119"
  },
  {
    "text": "on in the open so it means that you can give input on things that you want and don't want",
    "start": "3725119",
    "end": "3732319"
  },
  {
    "text": "if you like my stuff go ahead and check out my courses on pluralsight i have a lot of content on c sharp and i think",
    "start": "3732319",
    "end": "3737920"
  },
  {
    "text": "i'm out of time so with that being said i hope you like this i hope you like c sharp don't forget to vote on your way",
    "start": "3737920",
    "end": "3743520"
  },
  {
    "text": "out if you have any questions ping me on twitter i'm phil beckberg thank you so much",
    "start": "3743520",
    "end": "3749880"
  }
]