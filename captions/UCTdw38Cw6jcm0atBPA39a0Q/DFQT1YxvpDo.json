[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "okay I think we'll start welcome to this talk about fussing with AFL this will be",
    "start": "30",
    "end": "8400"
  },
  {
    "text": "a kind of introductory talk - fussing so if you're already a AFL expert you won't get that much out of it I think a little",
    "start": "8400",
    "end": "17400"
  },
  {
    "text": "bit about myself I work at a company called Blanc in Oslo I usually do",
    "start": "17400",
    "end": "22410"
  },
  {
    "text": "development but also some security testing security architecture brontÃ« stuff and I build open-source security",
    "start": "22410",
    "end": "28890"
  },
  {
    "text": "tools and I'm also head of the OS Norway chapter I had been wanting to get into a",
    "start": "28890",
    "end": "38850"
  },
  {
    "start": "34000",
    "end": "34000"
  },
  {
    "text": "first thing for quite some time because I had a lot of colleagues and friends that were doing fussing but I never really got around to it until I did a an",
    "start": "38850",
    "end": "46230"
  },
  {
    "text": "online course I guess about a year ago it was two guys from lift security and",
    "start": "46230",
    "end": "51960"
  },
  {
    "text": "they didn't online training about fussing native nodejs modules and that really inspired me to get started with",
    "start": "51960",
    "end": "58500"
  },
  {
    "text": "fussing and it's actually quite fun to do and it's something that can be really useful for making robust applications so",
    "start": "58500",
    "end": "66060"
  },
  {
    "text": "the problem with with testing when we normally write tests ourselves as developers we know the code so we know",
    "start": "66060",
    "end": "72240"
  },
  {
    "text": "what the code is supposed to do and we kind of tend to think in that way when",
    "start": "72240",
    "end": "77369"
  },
  {
    "text": "we write our tests we write a lot of happy path tests and then we try to be smart and clever and write some tests",
    "start": "77369",
    "end": "83159"
  },
  {
    "text": "that test the edge cases but we tend to forget some things and then we have the",
    "start": "83159",
    "end": "88710"
  },
  {
    "text": "testers and a lot of testers they are quite smart at doing all kinds of edge",
    "start": "88710",
    "end": "93840"
  },
  {
    "text": "cases and work things like this but they don't necessarily know the code so they",
    "start": "93840",
    "end": "99689"
  },
  {
    "text": "don't know what the coach should do or could do so there's or some of them do of course there are different types of",
    "start": "99689",
    "end": "105479"
  },
  {
    "text": "testers different types of developers but again we're going to test a set of",
    "start": "105479",
    "end": "111030"
  },
  {
    "text": "the actual inputs we might have some oblique ode like this there and the more",
    "start": "111030",
    "end": "117930"
  },
  {
    "text": "branches we had this might be deep down in some parser somewhere we might have a lot of different branches so if we were",
    "start": "117930",
    "end": "124290"
  },
  {
    "text": "to like draw out the entire set of branches in our application it would look something like this because there",
    "start": "124290",
    "end": "129569"
  },
  {
    "text": "would be a lot of different ways that we could get to different paths in our code and what we want to do is try to test as",
    "start": "129569",
    "end": "136320"
  },
  {
    "text": "many of these as possible and see if we can find make our application crash in some way and this is what fussing can help us with often we use code coverage",
    "start": "136320",
    "end": "144360"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "as a way to figure out how much of the code that we've been testing with code coverage is not necessarily the same as",
    "start": "144360",
    "end": "149760"
  },
  {
    "text": "path coverage like the lines might have been marked as green but we haven't tested these two green bits at the same",
    "start": "149760",
    "end": "156300"
  },
  {
    "text": "time we might have tested one of them in one test and one of them in another test and we don't necessarily know that we have tested everything this is why code",
    "start": "156300",
    "end": "163770"
  },
  {
    "text": "coverage is not necessarily a good measure for how well tested our code is it just tells us which code isn't tested",
    "start": "163770",
    "end": "172520"
  },
  {
    "text": "so fussing first thing is generally the idea of throwing a lot of input at an",
    "start": "172520",
    "end": "179160"
  },
  {
    "text": "application and see how it responds so we could we could do this all night long",
    "start": "179160",
    "end": "184290"
  },
  {
    "text": "if we can get a computer to do it so Craig Young who's done a talk on AFL earlier at B sides is that you can find",
    "start": "184290",
    "end": "190560"
  },
  {
    "text": "bugs in you in your sleep because you don't have to do it anymore you can make the computer do it which is nice and",
    "start": "190560",
    "end": "197850"
  },
  {
    "text": "I've been doing this for quite some time now finding bugs in my sleep so basic",
    "start": "197850",
    "end": "203100"
  },
  {
    "start": "202000",
    "end": "202000"
  },
  {
    "text": "fussing we could just take the random and pipe it into the application and see what's happening and this might actually",
    "start": "203100",
    "end": "208920"
  },
  {
    "text": "work for some applications but it's also kind of a stupid fussing because if we",
    "start": "208920",
    "end": "213930"
  },
  {
    "text": "get a crash we don't necessarily know what caused the application to crash which input was it that made the",
    "start": "213930",
    "end": "218940"
  },
  {
    "text": "application crash and we might run the same thing all over and over again so we",
    "start": "218940",
    "end": "224130"
  },
  {
    "text": "might get hard to reproduce bugs like we knew the application crashed at some point Jerry Knight but we have no idea what what what was going on so we can",
    "start": "224130",
    "end": "232410"
  },
  {
    "start": "232000",
    "end": "232000"
  },
  {
    "text": "get some smarter fuzzers so we can get a mutational fuzzer and a mutational for us sir we'll take a valid input like a",
    "start": "232410",
    "end": "238920"
  },
  {
    "text": "valid file of some kind like if this was an image parser we could take a valid image and then we could flick bits or",
    "start": "238920",
    "end": "245190"
  },
  {
    "text": "relocate data within this image and see how the application responds this is of",
    "start": "245190",
    "end": "251489"
  },
  {
    "text": "course a lot more effective than random but we still have no insight into what's going on inside the application we might",
    "start": "251489",
    "end": "257010"
  },
  {
    "text": "try the same thing over and over again and try and so we're fast and we're trying and we're testing but we're just",
    "start": "257010",
    "end": "262919"
  },
  {
    "text": "testing the same thing we don't know what's really going on inside the application there's also something called a grammar",
    "start": "262919",
    "end": "269669"
  },
  {
    "start": "267000",
    "end": "267000"
  },
  {
    "text": "fuzzer and with a grammar faster we're typically then testing the application with some type of grammar this could be",
    "start": "269669",
    "end": "276150"
  },
  {
    "text": "a protocol or this could be a way to to handle some type of text or input of",
    "start": "276150",
    "end": "281400"
  },
  {
    "text": "some kind and then we have to kind of define rules for how this input can be changed and this can be really good for",
    "start": "281400",
    "end": "289979"
  },
  {
    "text": "for for like really structured data but it can also be quite hard to get it",
    "start": "289979",
    "end": "295800"
  },
  {
    "text": "right because we need to have a lot of knowledge to build and configure the parser correctly so what if we could",
    "start": "295800",
    "end": "303659"
  },
  {
    "text": "just have a buzzer that would look inside our application and then apply inputs at the same time that would be",
    "start": "303659",
    "end": "310590"
  },
  {
    "text": "really nice so we wouldn't have to come up with everything up front so we have something called a feedback based buzzer",
    "start": "310590",
    "end": "317689"
  },
  {
    "start": "314000",
    "end": "314000"
  },
  {
    "text": "so with the feedback based processor we're going to use coverage so we're going to compile in or add in",
    "start": "317689",
    "end": "325430"
  },
  {
    "text": "instrumentation into the application and so the buzzer can talk to the running",
    "start": "325430",
    "end": "331469"
  },
  {
    "text": "binary and see which branches are being hit and then it can mutate the input and then you can see what what happens if I",
    "start": "331469",
    "end": "337710"
  },
  {
    "text": "mutate this input and by doing that it can know when it's doing the same thing all over again and it can stop doing",
    "start": "337710",
    "end": "343229"
  },
  {
    "text": "that and it can start muting mutating something else instead which makes it a lot more efficient so this is a bit",
    "start": "343229",
    "end": "351270"
  },
  {
    "text": "slower because we have to have the instrumentation in place and we have to we have to compile things and do things",
    "start": "351270",
    "end": "356939"
  },
  {
    "text": "in a little bit of a different manner but of course the effectiveness is higher because we're removing all these",
    "start": "356939",
    "end": "363259"
  },
  {
    "text": "repetitions that we might be doing if we were just doing like one of the other types of buzzers so the best best result",
    "start": "363259",
    "end": "370560"
  },
  {
    "text": "we is we get if we use we actually compile the application we have the",
    "start": "370560",
    "end": "375779"
  },
  {
    "text": "source code available and we compile in the instrumentation we can also with AFL we can add it later to a binary if we",
    "start": "375779",
    "end": "382379"
  },
  {
    "text": "want to so AFL AFL was developed by a guy called",
    "start": "382379",
    "end": "388680"
  },
  {
    "text": "Michael Saluki who works at Google his inspiration for building it I think came",
    "start": "388680",
    "end": "393719"
  },
  {
    "text": "from some stuff that Tavis Ormandy of Google was was doing and it's open",
    "start": "393719",
    "end": "399330"
  },
  {
    "text": "source and it's quite cleverly made I have to say I'm no C or C++ expert at all so I",
    "start": "399330",
    "end": "406750"
  },
  {
    "text": "can't vouch for the code but I've been using it to test code and it's let's say",
    "start": "406750",
    "end": "412960"
  },
  {
    "text": "highly effective and this is a Hall of Fame from the AFL website where it is",
    "start": "412960",
    "end": "419949"
  },
  {
    "start": "415000",
    "end": "415000"
  },
  {
    "text": "there a lot of these like you can see Firefox you can see iOS kernel you can see MySQL you can see all kinds of of",
    "start": "419949",
    "end": "426810"
  },
  {
    "text": "applications and and the OSS and things like that where AFL has found vulnerabilities by by fussing so it has",
    "start": "426810",
    "end": "435219"
  },
  {
    "text": "quite a good reputation for finding finding Hart or finding bugs basically",
    "start": "435219",
    "end": "442210"
  },
  {
    "text": "in everything that's written in C or C++ this picture is from a blog post written",
    "start": "442210",
    "end": "448870"
  },
  {
    "text": "by the the author of FL where he created an empty file or not an empty file the",
    "start": "448870",
    "end": "454599"
  },
  {
    "text": "file said hello that was the input so it wasn't the valid JPEG and then he started fussing that file and for a widow with a JPEG",
    "start": "454599",
    "end": "461439"
  },
  {
    "text": "parser and eventually because a FL is so smart it would eventually start producing valid JPEG images just",
    "start": "461439",
    "end": "468190"
  },
  {
    "text": "starting from the string hello so we don't have to even give it a valid input but of course that makes it faster if we",
    "start": "468190",
    "end": "474520"
  },
  {
    "text": "can give it a proper startup but we could just give it an empty file and it would actually eventually figure out how",
    "start": "474520",
    "end": "479860"
  },
  {
    "text": "to make in this case a valid JPEG installing it is fairly easy you just",
    "start": "479860",
    "end": "487180"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "download it compile it and it's super fast its small I think it's like 53",
    "start": "487180",
    "end": "492370"
  },
  {
    "text": "kilobytes or something and then you have what you need you need you might need some dependencies here like if you're",
    "start": "492370",
    "end": "498699"
  },
  {
    "text": "gonna use the LLVM mode you need LLVM config and things like that but it's",
    "start": "498699",
    "end": "503770"
  },
  {
    "text": "generally really fast to download install and then you're up and running",
    "start": "503770",
    "end": "509430"
  },
  {
    "text": "you can't fuss things that are non x86 as well because the instrumentation is",
    "start": "509430",
    "end": "514839"
  },
  {
    "start": "510000",
    "end": "510000"
  },
  {
    "text": "in LLVM mode is supposed to be a CPU independent I have never tried it but I know a lot of you are probably working",
    "start": "514839",
    "end": "521620"
  },
  {
    "text": "in the embedded space so it's it it is supposed to be possible to fuss things that aren't x86 so the workflow of",
    "start": "521620",
    "end": "531149"
  },
  {
    "start": "529000",
    "end": "529000"
  },
  {
    "text": "fussing something is we to compile the binary or we could instrument an existing binary but",
    "start": "531149",
    "end": "537250"
  },
  {
    "text": "usually I will compile the binary with AFL I will then find a test corpus like a set of test files that I can use I'll",
    "start": "537250",
    "end": "544330"
  },
  {
    "text": "run the faster which is of course the thing that takes the most time then triage the findings figure out what",
    "start": "544330",
    "end": "550240"
  },
  {
    "text": "happened what was happening here what caused the crashes and things like that and then maybe there's some profit at the end but before all of this we need",
    "start": "550240",
    "end": "557440"
  },
  {
    "start": "556000",
    "end": "556000"
  },
  {
    "text": "to get some hardware and when I wanted to start the first thing I was thinking",
    "start": "557440",
    "end": "563170"
  },
  {
    "text": "well what what kind of hardware do I actually need and usually it's good to have a like a multi-core CPU and a",
    "start": "563170",
    "end": "569500"
  },
  {
    "text": "decent amount of RAM so I started poking around and I asked some friends and they said well you cannot use like a cloud",
    "start": "569500",
    "end": "574810"
  },
  {
    "text": "VPS you can't go to to digitalocean or or abs and then just buy every VPS because they usually don't allow you to",
    "start": "574810",
    "end": "581350"
  },
  {
    "text": "run at a hundred percent CPU all the time because of course they over commit on CPU that's the part of the deal so if",
    "start": "581350",
    "end": "587710"
  },
  {
    "text": "you run your VPS on 100% CPU for an extended period of time they're going to reboot it and eventually if you keep",
    "start": "587710",
    "end": "594490"
  },
  {
    "text": "doing that they're going to kick you out so what I did instead I went to a company called hetner and I rented a",
    "start": "594490",
    "end": "602080"
  },
  {
    "text": "server there and I'm paying I think it's 20 euros per month for this which i",
    "start": "602080",
    "end": "607120"
  },
  {
    "text": "think is a fairly decent price I was actually thinking of buying something",
    "start": "607120",
    "end": "612580"
  },
  {
    "text": "and putting it in my house but then I saw the prices here and because what they're doing is like they're taking",
    "start": "612580",
    "end": "618190"
  },
  {
    "text": "servers that have been used by their clients that are not using them anymore and then they're like they're renting",
    "start": "618190",
    "end": "623560"
  },
  {
    "text": "them for for cheap price for from so you can find something there I actually paid",
    "start": "623560",
    "end": "629350"
  },
  {
    "text": "more but then I found a new server that was exactly the same specs but with a cheaper monthly price so I switched recently next you have to compile the",
    "start": "629350",
    "end": "638230"
  },
  {
    "start": "636000",
    "end": "636000"
  },
  {
    "text": "binary which is also quite easy you're using the exact same commands as you would do for for compiling a standard",
    "start": "638230",
    "end": "644610"
  },
  {
    "text": "standard binary the first thing you have you do is you tell it which of the compilers you want to use so AFL comes",
    "start": "644610",
    "end": "651370"
  },
  {
    "start": "646000",
    "end": "646000"
  },
  {
    "text": "with I guess six different compilers but there's a GCC compliant one and then",
    "start": "651370",
    "end": "656740"
  },
  {
    "text": "there's a seal on another sealing fast which is the LLVM one and that's generally the best one to use if you can",
    "start": "656740",
    "end": "663750"
  },
  {
    "text": "there's something called AFL instrumentation radio which tells it how much instrumentation do you",
    "start": "663750",
    "end": "669399"
  },
  {
    "text": "want to add to your code and usually I set this to 100% but you might want to change it if if it's too slow or if it",
    "start": "669399",
    "end": "676240"
  },
  {
    "text": "doesn't find anything for an extended period of time you could also set AF el jardÃ­n which is also something I",
    "start": "676240",
    "end": "682449"
  },
  {
    "text": "recommend you do because this adds some some code hardening so we can provoke",
    "start": "682449",
    "end": "688360"
  },
  {
    "text": "crashes quicker so it adds stack Canaries and things like that",
    "start": "688360",
    "end": "693180"
  },
  {
    "start": "693000",
    "end": "693000"
  },
  {
    "text": "once you found a test corpus which is what I usually do is if I'm gonna fuss",
    "start": "693480",
    "end": "698709"
  },
  {
    "text": "something I find online I go to the github repo and I find the test folder and I grab the files there because they're usually a good set of test cases",
    "start": "698709",
    "end": "705189"
  },
  {
    "text": "and I use those as the corpus but once you found that you probably want to minimize it because the larger files you",
    "start": "705189",
    "end": "712509"
  },
  {
    "text": "have the slower it will go and of course if you have a lot of files that are essentially the same that won't help you",
    "start": "712509",
    "end": "718540"
  },
  {
    "text": "either so atha comes with two tools for you to use there's something called a FL seaman",
    "start": "718540",
    "end": "723579"
  },
  {
    "text": "where you can you can take a lot of a list of files within the folder and you",
    "start": "723579",
    "end": "729279"
  },
  {
    "text": "can tell it to minimize this list so it removes all the things that aren't interesting and then you can minimize a",
    "start": "729279",
    "end": "735670"
  },
  {
    "text": "certain test case with teaming so you you basically it will chop off things",
    "start": "735670",
    "end": "741550"
  },
  {
    "text": "and normalize bits and try to figure out what's the smallest file I can use where I still get the same code coverage so",
    "start": "741550",
    "end": "748180"
  },
  {
    "text": "it's pretty smart about that as well and then you can get so a small set of files which are small and that will make it",
    "start": "748180",
    "end": "753610"
  },
  {
    "text": "run fast once we run the faster on the",
    "start": "753610",
    "end": "758829"
  },
  {
    "start": "755000",
    "end": "755000"
  },
  {
    "text": "top here you see a single faster running where where you specify the folder name",
    "start": "758829",
    "end": "764860"
  },
  {
    "text": "where you have the test cases you specify an output folder and then you can specify options if you want to and then you specify - - and the binary and",
    "start": "764860",
    "end": "772360"
  },
  {
    "text": "the options - the binary and then the at-at at the end means that it's going",
    "start": "772360",
    "end": "777519"
  },
  {
    "text": "to take input from a file because you can also use AFL with input from standard out if you or a standard a and",
    "start": "777519",
    "end": "783370"
  },
  {
    "text": "I guess if you want that in the second block here you see me running a fuzzer",
    "start": "783370",
    "end": "788499"
  },
  {
    "text": "in in multi-core mode so or I have a master which is the one with the - M at",
    "start": "788499",
    "end": "794679"
  },
  {
    "text": "the top which is faster cr1 and then you can add slaves to it you they all just have to point to the same directory",
    "start": "794679",
    "end": "800840"
  },
  {
    "text": "three and and that works perfectly as well and that's probably what he what you want to do if you if you going to",
    "start": "800840",
    "end": "807170"
  },
  {
    "text": "fuss something that's that's bigger if it's slow or just generally if you have enough CPU for it you can specify some options there are a",
    "start": "807170",
    "end": "814550"
  },
  {
    "text": "lot more of options that you can you can use but the normal ones are - m4 how",
    "start": "814550",
    "end": "821420"
  },
  {
    "text": "much memory do you want to limit the each test case to use or each run of the",
    "start": "821420",
    "end": "827270"
  },
  {
    "text": "application to use so it will crash if use it's using more memory or get an out",
    "start": "827270",
    "end": "832640"
  },
  {
    "text": "of memory you can also specify a timeout because you don't want it if it's hanging for extended period of time",
    "start": "832640",
    "end": "838520"
  },
  {
    "text": "maybe you're doing something and and it goes into a while loop or something that it never is exits from so you can have a",
    "start": "838520",
    "end": "845390"
  },
  {
    "text": "you can specify how much time what's the maximum runtime for for each of these runs or you can just let it figure it",
    "start": "845390",
    "end": "852710"
  },
  {
    "text": "out itself this is the the interface that you get it's very ASCII or ANSI",
    "start": "852710",
    "end": "857960"
  },
  {
    "text": "maybe I'm gonna get back to this in a little bit because we're going to do a",
    "start": "857960",
    "end": "863660"
  },
  {
    "text": "demo but that this is basically the way it looks once you start running it you",
    "start": "863660",
    "end": "870740"
  },
  {
    "text": "get an output folder once one for each of the faster so if you're running like a master and three slaves you're gonna",
    "start": "870740",
    "end": "876860"
  },
  {
    "text": "get one folder for each of them in the output folder and inside there you're gonna get one folder that's called",
    "start": "876860",
    "end": "882500"
  },
  {
    "text": "crashes this is where inputs that cause the applications to crash will be you're",
    "start": "882500",
    "end": "887570"
  },
  {
    "text": "going to get one with Hanks that's where yeah things that cause it to hang and then the queue is anything that it",
    "start": "887570",
    "end": "893480"
  },
  {
    "text": "hasn't been tried yet the next things that it will test inside this crashes",
    "start": "893480",
    "end": "898700"
  },
  {
    "text": "folder you'll find a lot of files in this format it's a bit of an annoying format to type but what you see here is",
    "start": "898700",
    "end": "907070"
  },
  {
    "text": "like every crash gets an identifier and then it's there's the exit signal that it got when it crashed",
    "start": "907070",
    "end": "912580"
  },
  {
    "text": "it's which what was the source branch and then what kind of operation it was",
    "start": "912580",
    "end": "919040"
  },
  {
    "text": "doing and on which bit it was working on because if we go back here we can see some of the strategies that it's using",
    "start": "919040",
    "end": "925550"
  },
  {
    "text": "hair down here so it can do bit flips by flips or it mythix known in dictionary and then Havoc",
    "start": "925550",
    "end": "931100"
  },
  {
    "text": "which i guess is just moving things around and then trim so it's doing all kinds of stuff there",
    "start": "931100",
    "end": "938740"
  },
  {
    "text": "once we've found some crashes we want to try edge them figure out what what what",
    "start": "940720",
    "end": "946640"
  },
  {
    "start": "941000",
    "end": "941000"
  },
  {
    "text": "are these crashes actually so what I normally start doing is then I compiled",
    "start": "946640",
    "end": "952550"
  },
  {
    "text": "a binary once more but without AFL just with a normal compiler and then I run",
    "start": "952550",
    "end": "957710"
  },
  {
    "text": "the test case with the normal executable which of course if it doesn't crash there then it might be something with",
    "start": "957710",
    "end": "964100"
  },
  {
    "text": "the fussing setup that's causing it to crash but often times it will crash with the normal binary as well you could use",
    "start": "964100",
    "end": "971120"
  },
  {
    "text": "something like address sanitizer a memory sanitizer and run it through there to see what's going on or you",
    "start": "971120",
    "end": "976520"
  },
  {
    "text": "could even use gdb and there's a plugin called exploitable which is a nice plugin if I have time I'll show you that",
    "start": "976520",
    "end": "983180"
  },
  {
    "text": "one which we can use to figure out if this is likely to be something that would be exploitable from a security",
    "start": "983180",
    "end": "989060"
  },
  {
    "text": "perspective something you can also do here is use T min once more you can use",
    "start": "989060",
    "end": "994490"
  },
  {
    "text": "that to minimize the test case so if you want if you have a large file maybe you want to make it a bit smaller before you",
    "start": "994490",
    "end": "1000220"
  },
  {
    "text": "start to or submit it to your your set of test cases or report it to whoever",
    "start": "1000220",
    "end": "1006190"
  },
  {
    "text": "wrote the code so profit well if this is",
    "start": "1006190",
    "end": "1012310"
  },
  {
    "start": "1009000",
    "end": "1009000"
  },
  {
    "text": "if you're fussing your insertable binary stuff that you're building yourself of course reporting it to the to the dev",
    "start": "1012310",
    "end": "1017860"
  },
  {
    "text": "team or if you are the dev team fix them and add them as test cases to your application if this is external software",
    "start": "1017860",
    "end": "1023920"
  },
  {
    "text": "well you might want to do some kind of responsible disclosure I was hoping for this conference to be able to present",
    "start": "1023920",
    "end": "1030699"
  },
  {
    "text": "some of the stuff that I found but none of it has been fixed yet so I can't really talk about that",
    "start": "1030699",
    "end": "1036280"
  },
  {
    "text": "unfortunately so I'm gonna do a short",
    "start": "1036280",
    "end": "1041920"
  },
  {
    "text": "demo of afo so what I've done before",
    "start": "1041920",
    "end": "1047189"
  },
  {
    "text": "before you guys came in here is that I've I've downloaded FL and compile it",
    "start": "1047190",
    "end": "1053740"
  },
  {
    "text": "I've downloaded a tool called sassy",
    "start": "1053740",
    "end": "1059080"
  },
  {
    "text": "which is a sass to CSS converter and I've download the the downloaded the the",
    "start": "1059080",
    "end": "1067510"
  },
  {
    "text": "stuff that it needs to to run or to compile so I'm just going to compile it first or before that even",
    "start": "1067510",
    "end": "1073300"
  },
  {
    "text": "I'm gonna here you can see my current settings up there AFL Harden is set to one AFL instrumentation radio is set to",
    "start": "1073300",
    "end": "1080230"
  },
  {
    "text": "100 and then I'm using the C length fast compiler so I'm going to compile it now",
    "start": "1080230",
    "end": "1086850"
  },
  {
    "text": "what you'll see here is that it's it's except from all these warnings you'll",
    "start": "1086850",
    "end": "1092080"
  },
  {
    "text": "see that it says maybe I can pause it a bit you'll see that it actually it's",
    "start": "1092080",
    "end": "1097690"
  },
  {
    "text": "actually you can see that it's using the correct compiler because you see here LLVM pass and in the new version of AFL",
    "start": "1097690",
    "end": "1105309"
  },
  {
    "text": "so you can see that it's printing this AFL KC line fast down here and it will also say how many how many we are",
    "start": "1105309",
    "end": "1111150"
  },
  {
    "text": "instrumentations it was adding so you can you'll you'll see that eventually so",
    "start": "1111150",
    "end": "1117280"
  },
  {
    "text": "now I'm just compiling it normally just like I would with any other compiler and",
    "start": "1117280",
    "end": "1122410"
  },
  {
    "text": "it shouldn't take too long what I've also done is I in this this github repo",
    "start": "1122410",
    "end": "1130780"
  },
  {
    "text": "that I downloaded there was a set of test cases so let's see",
    "start": "1130780",
    "end": "1136179"
  },
  {
    "text": "you're clear to get it up on the top so if we look in in my current folder here",
    "start": "1136179",
    "end": "1141460"
  },
  {
    "text": "I have actually gonna there is a SAS",
    "start": "1141460",
    "end": "1147460"
  },
  {
    "text": "spec which is a list of test files and there's a lot of so called",
    "start": "1147460",
    "end": "1155200"
  },
  {
    "text": "SAS files in there so I just picked a set of those I picked those that were in the basic folder and I put them in a",
    "start": "1155200",
    "end": "1162100"
  },
  {
    "text": "folder that I've called corpus pre so in",
    "start": "1162100",
    "end": "1168850"
  },
  {
    "text": "here I have a set of files now I want to to shorten that list and compress it a",
    "start": "1168850",
    "end": "1174880"
  },
  {
    "text": "bit so I'm going to use AFL C mini fire",
    "start": "1174880",
    "end": "1182260"
  },
  {
    "text": "and like this so I'm putting it to the corpus pre folder that's the folder",
    "start": "1182260",
    "end": "1187870"
  },
  {
    "text": "where you have the test cases I want its output into the corpus folder then - - and then this is the binary and it just",
    "start": "1187870",
    "end": "1194230"
  },
  {
    "text": "takes a file like this it doesn't take any other options or it doesn't have to so I can do like this so now it's going",
    "start": "1194230",
    "end": "1202030"
  },
  {
    "text": "to look through all of these files and it's going to try to figure out which of these files have similar branches which",
    "start": "1202030",
    "end": "1209290"
  },
  {
    "text": "of these files are actually giving it something new and try to reduce the number of files that it that it needs or",
    "start": "1209290",
    "end": "1215590"
  },
  {
    "text": "that it recommends that you use as you see this takes a little bit of time but",
    "start": "1215590",
    "end": "1221620"
  },
  {
    "text": "it's definitely worth it for later because we don't want it to sort of run through all kinds of stuff all over and",
    "start": "1221620",
    "end": "1228100"
  },
  {
    "text": "over and over and over again and the the the inputs and outputs that I gave it",
    "start": "1228100",
    "end": "1235600"
  },
  {
    "text": "already the parameters that I gave it are exactly the same as for AFL fuss so",
    "start": "1235600",
    "end": "1242520"
  },
  {
    "text": "yeah there's 66 files and you can see it still takes a bit of time to run through it even though it's it's a kind of fight",
    "start": "1242520",
    "end": "1251080"
  },
  {
    "text": "it's fast enough binary I think but it takes a bit of time just to work itself through all of these so for those of you",
    "start": "1251080",
    "end": "1262660"
  },
  {
    "text": "who don't know what SAS is SAS is a way of writing CSS but you kind of compile it to CSS so a browser could understand",
    "start": "1262660",
    "end": "1269230"
  },
  {
    "text": "it but you write it in a more dense format and you can have functions and things like that inside it so you can",
    "start": "1269230",
    "end": "1275230"
  },
  {
    "text": "call a function and then that would output some new CSS and this this",
    "start": "1275230",
    "end": "1281290"
  },
  {
    "text": "library has been first many times before and people have published results from fasting it before maybe we'll find",
    "start": "1281290",
    "end": "1288460"
  },
  {
    "text": "something maybe we won't we'll see I know if at least a couple of crashes that I found before so I can show you",
    "start": "1288460",
    "end": "1295150"
  },
  {
    "text": "just how that looks because I have them in a folder here should be finished soon",
    "start": "1295150",
    "end": "1303180"
  },
  {
    "text": "and now it what it's going to tell us now is how many of these files that we",
    "start": "1303180",
    "end": "1308350"
  },
  {
    "text": "originally had that it needed so it took away only five of these so that that was a pretty decent set of test cases",
    "start": "1308350",
    "end": "1314860"
  },
  {
    "text": "actually the next next thing that we want to do is to use a tool to figure",
    "start": "1314860",
    "end": "1320200"
  },
  {
    "text": "out how much CPU how many foster should we run and of course AFL comes with the tool phrase so AFL got CPU we run this",
    "start": "1320200",
    "end": "1332140"
  },
  {
    "text": "and it's as well four of your course they are already busy doing stuff because I'm",
    "start": "1332140",
    "end": "1338320"
  },
  {
    "text": "running a couple of fosters already on this server but I have four course available as well so course six five",
    "start": "1338320",
    "end": "1343690"
  },
  {
    "text": "four and seven or confessors that I can use this is pretty practical so you",
    "start": "1343690",
    "end": "1349150"
  },
  {
    "text": "don't end up running stuff and then it everything goes slow and then yeah",
    "start": "1349150",
    "end": "1354510"
  },
  {
    "text": "instead of starting them all one by one I have created a small script here to",
    "start": "1354510",
    "end": "1361120"
  },
  {
    "text": "start them because I want to run them each in the screen so I can disconnect",
    "start": "1361120",
    "end": "1366370"
  },
  {
    "text": "from the server at any time and they will keep running so I'm starting a master fessor called fuzzy one I'm cause",
    "start": "1366370",
    "end": "1372880"
  },
  {
    "text": "and then I'm starting three slaves for search two and three and four and I'm",
    "start": "1372880",
    "end": "1378130"
  },
  {
    "text": "pointing it to the corpus this is where I'm we just now minified all the test cases into that folder and it's going to store its output in output let's start",
    "start": "1378130",
    "end": "1387100"
  },
  {
    "text": "this and now we can go in and look at the first buzzer now we get back to this",
    "start": "1387100",
    "end": "1398290"
  },
  {
    "text": "this screen I'm going to show you a couple of things that's important here you can see that it's finding paths up",
    "start": "1398290",
    "end": "1404830"
  },
  {
    "text": "here at the right side of the screen here if it doesn't find paths that might",
    "start": "1404830",
    "end": "1411280"
  },
  {
    "text": "mean that you're running against the non instrumented binary so you might want to go back and check double check if you're",
    "start": "1411280",
    "end": "1417100"
  },
  {
    "text": "actually running it against the compiled the binary that you compiled with AFL you should also see here last new path",
    "start": "1417100",
    "end": "1422890"
  },
  {
    "text": "if this one keeps just going higher and higher that might mean that it either already found all the paths or that",
    "start": "1422890",
    "end": "1429670"
  },
  {
    "text": "you're running against the non instrumented binary as you can see in this case it's it's finding a lot of new",
    "start": "1429670",
    "end": "1435760"
  },
  {
    "text": "paths you can see down here as I mentioned here you can see the strategies and you'll see which ones",
    "start": "1435760",
    "end": "1441910"
  },
  {
    "text": "that yielded new paths here you will see the execution speed generally that",
    "start": "1441910",
    "end": "1447970"
  },
  {
    "text": "should be pretty high and we'll get back to some of the Malaysians and you'd see the total executions as well up on the",
    "start": "1447970",
    "end": "1456880"
  },
  {
    "text": "right here you see cycles done that's how many times has it been running through all the paths that it's found",
    "start": "1456880",
    "end": "1463240"
  },
  {
    "text": "and you usually want to stop fussing our weight with stopping until it's been",
    "start": "1463240",
    "end": "1468610"
  },
  {
    "text": "running a few cycles or maybe multiple cycles because you might run it through one",
    "start": "1468610",
    "end": "1473890"
  },
  {
    "text": "cycle but then it's going to find new parts the next time around because it's it's got a new set of test cases for it",
    "start": "1473890",
    "end": "1479970"
  },
  {
    "text": "so that's that's it but that's not the easiest way to figure out because now",
    "start": "1479970",
    "end": "1486100"
  },
  {
    "text": "we're running we're running four parts four faster it's not just one and of course the guys who made a fellas have",
    "start": "1486100",
    "end": "1493780"
  },
  {
    "text": "thought about that as well so we have a nice little command called AFL what's up and we just point it to the to the",
    "start": "1493780",
    "end": "1502330"
  },
  {
    "text": "output folder that all the fosters are now using to synchronize so we can do like this and then we'll see the output",
    "start": "1502330",
    "end": "1509590"
  },
  {
    "text": "for each fessor fuzzer one is doing this first or two is doing this and we can see the speed of each faster and we have",
    "start": "1509590",
    "end": "1517300"
  },
  {
    "text": "a summary down here so this is the amount of of executions that it's been running so far so we'll just leave that",
    "start": "1517300",
    "end": "1525400"
  },
  {
    "text": "running and come back to it in a in a while and see if it's found anything and",
    "start": "1525400",
    "end": "1530500"
  },
  {
    "text": "if it hasn't then I'll show you some some samples that I already have so",
    "start": "1530500",
    "end": "1537480"
  },
  {
    "text": "optimization we really want the fussing to be as fast as possible and we also",
    "start": "1537480",
    "end": "1543280"
  },
  {
    "text": "want it to crash as fast as possible if there is something wrong so anything",
    "start": "1543280",
    "end": "1548560"
  },
  {
    "start": "1545000",
    "end": "1545000"
  },
  {
    "text": "that we can do to make it crash if it tries to do things that it shouldn't if it tries to read outside a buffer if we",
    "start": "1548560",
    "end": "1554800"
  },
  {
    "text": "try to write outside a buffer if it tries to read or write stuff that it's already freed etc we want it to crash",
    "start": "1554800",
    "end": "1560370"
  },
  {
    "text": "and we want it to be fast so the the first thing we do is of course to use these tools to minimize the test cases",
    "start": "1560370",
    "end": "1567540"
  },
  {
    "start": "1563000",
    "end": "1563000"
  },
  {
    "text": "and if we have large inputs we generally want to try to remove stuff if we can",
    "start": "1567540",
    "end": "1573880"
  },
  {
    "text": "because it's going to be slow in some cases we might want to isolate the code",
    "start": "1573880",
    "end": "1579460"
  },
  {
    "text": "that we're testing let's say we have a large application and the code that we're really interested in fussing is just a tiny part of it maybe we have a",
    "start": "1579460",
    "end": "1585450"
  },
  {
    "text": "parser of some kind somewhere in the code we can break that out and just write a small wrapper around it and then",
    "start": "1585450",
    "end": "1591640"
  },
  {
    "text": "test that instead so we don't have to like bring up the whole system if that's if that's a big thing for you but at the",
    "start": "1591640",
    "end": "1600580"
  },
  {
    "start": "1599000",
    "end": "1599000"
  },
  {
    "text": "LLVM mode comes with some clever trick tricks what AFL will do is it will try as good",
    "start": "1600580",
    "end": "1607179"
  },
  {
    "text": "as possible to start the binary and it will find a point in time where things that okay this is where I'm going to",
    "start": "1607179",
    "end": "1613990"
  },
  {
    "text": "start fussing from and then it will make a copy of itself so it doesn't have to do the initialization again and again",
    "start": "1613990",
    "end": "1620409"
  },
  {
    "text": "and again but you can help it and tell it where it should stop if you want to by adding this this will tell AFL that",
    "start": "1620409",
    "end": "1628900"
  },
  {
    "text": "when you come to this point this is where you can make a copy and then for the next execution you just bring you",
    "start": "1628900",
    "end": "1634750"
  },
  {
    "text": "just use this piece of memory and then run it again so we have a fork server basically you could also use something",
    "start": "1634750",
    "end": "1642640"
  },
  {
    "start": "1641000",
    "end": "1641000"
  },
  {
    "text": "called LLVM persistent mode and this is something that can be useful for let's",
    "start": "1642640",
    "end": "1647770"
  },
  {
    "text": "say you have a a petition that takes a really long time to start up and then there's a small piece that you want to",
    "start": "1647770",
    "end": "1653080"
  },
  {
    "text": "test but you can't really isolate it in any clever way you could do something like this you can add a loop to it and",
    "start": "1653080",
    "end": "1658270"
  },
  {
    "text": "then you have to make sure that you read the input data do the stuff that needs to be first and then you reset the state",
    "start": "1658270",
    "end": "1665039"
  },
  {
    "text": "cleverly inside there by yourself and this will make it a lot faster of",
    "start": "1665039",
    "end": "1670960"
  },
  {
    "text": "course because now we can do a lot of fussing on a single single process AFL",
    "start": "1670960",
    "end": "1678100"
  },
  {
    "start": "1676000",
    "end": "1676000"
  },
  {
    "text": "also comes with something called Lib dislocator live this locator is a drop-in for the",
    "start": "1678100",
    "end": "1685419"
  },
  {
    "text": "ellipse e alligator and what it's going to do is quite clever it's going to add these guard pages around everything that",
    "start": "1685419",
    "end": "1692320"
  },
  {
    "text": "you allocate in your code so if you if you allocate a piece of on the heap it's",
    "start": "1692320",
    "end": "1698289"
  },
  {
    "text": "gonna add a guard page so it's going to allocate it just next to a guard page so if you try to read outside this piece of",
    "start": "1698289",
    "end": "1705250"
  },
  {
    "text": "heap that you've allocate it is going to crash because it's going to hit the guard page similarly if you free",
    "start": "1705250",
    "end": "1711429"
  },
  {
    "text": "something it's going to mark that as a guard page so you can't really go back",
    "start": "1711429",
    "end": "1716799"
  },
  {
    "text": "and read something that you're already freed and so it adds a lot of these things to your codes the problem with",
    "start": "1716799",
    "end": "1722559"
  },
  {
    "text": "using this locator is that a lot of binaries they just won't work when you add it because I don't know they're",
    "start": "1722559",
    "end": "1727780"
  },
  {
    "text": "doing things that they shouldn't already so when you try to start AFL with live dislocator it might just crash",
    "start": "1727780",
    "end": "1733990"
  },
  {
    "text": "immediately and it's just going to crashing and/or it's gonna say I can't really start this in a proper way",
    "start": "1733990",
    "end": "1739970"
  },
  {
    "text": "because it keeps on crashing but it's a clever it's really useful for",
    "start": "1739970",
    "end": "1745700"
  },
  {
    "text": "applications where it actually works and it's it probably works for a lot of things I just had it crash a lot lately",
    "start": "1745700",
    "end": "1750860"
  },
  {
    "text": "with things that are fast so I've had to run without it for some time you can",
    "start": "1750860",
    "end": "1758119"
  },
  {
    "start": "1757000",
    "end": "1757000"
  },
  {
    "text": "also add dictionaries and these are this is an example dictionary from from the github repo where you can add stuff that",
    "start": "1758119",
    "end": "1765559"
  },
  {
    "text": "so it doesn't have to discover everything itself so you could either have a directory full of files with",
    "start": "1765559",
    "end": "1771740"
  },
  {
    "text": "tokens in them or you can just have a single file with key value pairs and generally it's going to ignore the names",
    "start": "1771740",
    "end": "1777440"
  },
  {
    "text": "it's just gonna use the the values and you can hex encode stuff that's not",
    "start": "1777440",
    "end": "1783110"
  },
  {
    "text": "ASCII so as you can see at the bottom there this can also help it to become faster so when I when I'm now fussing",
    "start": "1783110",
    "end": "1790309"
  },
  {
    "text": "this sass compiler I could have added stuff that was common in a you know in a",
    "start": "1790309",
    "end": "1796970"
  },
  {
    "text": "sass or CSS file to help it along this can be useful if if needed so first",
    "start": "1796970",
    "end": "1804950"
  },
  {
    "text": "thing is not an excuse for writing bad code of course but it might help you detect that your written bad code or",
    "start": "1804950",
    "end": "1810559"
  },
  {
    "text": "that your colleagues a written bad code or that someone else I've written a bad library so it can be useful to maybe",
    "start": "1810559",
    "end": "1817249"
  },
  {
    "text": "fuss libraries that you have first your own code first things that just generally first stuff it's it's fun this",
    "start": "1817249",
    "end": "1826279"
  },
  {
    "text": "is a slide from Patricia Oz she did a talk at NDC oslo called secure program",
    "start": "1826279",
    "end": "1831679"
  },
  {
    "text": "practices in c++ where she brought up a lot of things that we should do and one of them was i'd really rather you didn't",
    "start": "1831679",
    "end": "1838190"
  },
  {
    "text": "use pointers a lot and i've first quite a lot of applications and i've seen a",
    "start": "1838190",
    "end": "1843799"
  },
  {
    "text": "lot of as I said I know no C or C++ programmer but I've seen a lot of code",
    "start": "1843799",
    "end": "1849289"
  },
  {
    "text": "that looks kind of iffy when you look at it with lots of pointers and things going around and then you seem like more modern C++ like Patricia is recommending",
    "start": "1849289",
    "end": "1857269"
  },
  {
    "text": "you write and when I first these things I generally find of course a lot more bugs in the poetry code stuff than in",
    "start": "1857269",
    "end": "1863809"
  },
  {
    "text": "the properly written C C++ modern stuff that she's recommending so",
    "start": "1863809",
    "end": "1869990"
  },
  {
    "text": "there's a big truth to this so let's go back to the fuzzer now and see what's going on it might not have found",
    "start": "1869990",
    "end": "1879350"
  },
  {
    "text": "anything probably not because it hasn't been running for a very long time so says our fuzzers are still alive but it",
    "start": "1879350",
    "end": "1887240"
  },
  {
    "text": "hasn't found any crashes yet okay of course I prepared for this so I have a",
    "start": "1887240",
    "end": "1892790"
  },
  {
    "text": "folder here called output 2 which is a folder of some crashes that I found earlier so we have",
    "start": "1892790",
    "end": "1900500"
  },
  {
    "text": "all our four fosters here let's go into faster first one and see what's going on",
    "start": "1900500",
    "end": "1907370"
  },
  {
    "text": "in there we'll see that in the crashes folders folder there are a good set of",
    "start": "1907370",
    "end": "1914150"
  },
  {
    "text": "crashes in here what you see all the way to the bottom here is a readme file what",
    "start": "1914150",
    "end": "1920300"
  },
  {
    "text": "that file tells you is what kind of command was being run where when were",
    "start": "1920300",
    "end": "1925309"
  },
  {
    "text": "you were creating this crash so you see here this is the this is the command on",
    "start": "1925309",
    "end": "1931220"
  },
  {
    "text": "the center of the screen so you can easily okay what was I doing when I found this crash ok I was running the",
    "start": "1931220",
    "end": "1937190"
  },
  {
    "text": "faster like this ok that's fine so let's look at one of these crashes",
    "start": "1937190",
    "end": "1945610"
  },
  {
    "text": "so there it looks like kind of a normal file the thing I'm reacting to here is",
    "start": "1953430",
    "end": "1958809"
  },
  {
    "text": "that there's like a variable and then the percentage up there that looks a bit odd and it says there's a flip of",
    "start": "1958809",
    "end": "1965530"
  },
  {
    "text": "something in a early place in the code so maybe there's something wrong here let's see",
    "start": "1965530",
    "end": "1970780"
  },
  {
    "text": "so I mentioned exploitable so what we can do then is we can open up the the",
    "start": "1970780",
    "end": "1977680"
  },
  {
    "text": "binary in gdb and then we can run it",
    "start": "1977680",
    "end": "1985510"
  },
  {
    "text": "against this let's see if I can find my mouse pointer there it is we can run it",
    "start": "1985510",
    "end": "1991210"
  },
  {
    "text": "against this file and it's in the output oops output to folder like this and we",
    "start": "1991210",
    "end": "2004050"
  },
  {
    "text": "run it and we see we get a segmentation fault down here what we can do then is",
    "start": "2004050",
    "end": "2011190"
  },
  {
    "text": "to use this so-called exploitable plug in 4 for gdb so I have that flying",
    "start": "2011190",
    "end": "2016620"
  },
  {
    "text": "around here of course you can download it from github it's a bit let's see here it's a Python script that you just",
    "start": "2016620",
    "end": "2023100"
  },
  {
    "text": "import like this and then you can run exploitable so now it tells me what was",
    "start": "2023100",
    "end": "2031230"
  },
  {
    "text": "happening it's an access violation during a branch instruction and it says exploitability classification",
    "start": "2031230",
    "end": "2036660"
  },
  {
    "text": "exploitable so this might be a good find for someone who wants to attack this",
    "start": "2036660",
    "end": "2041940"
  },
  {
    "text": "this binary of course this is a binary that you usually run locally on your",
    "start": "2041940",
    "end": "2047220"
  },
  {
    "text": "server so it it's not really a big problem maybe but but if this was like",
    "start": "2047220",
    "end": "2052350"
  },
  {
    "text": "like a an image parser or something that would parse data coming in from a network that might be a big problem so",
    "start": "2052350",
    "end": "2063200"
  },
  {
    "text": "see what's going on now did it find anything no it didn't okay",
    "start": "2063200",
    "end": "2071870"
  },
  {
    "text": "this is generally the way I use it I set up the fuzzers and I I go in and check regularly to see",
    "start": "2072320",
    "end": "2079679"
  },
  {
    "text": "what's going on of course now it's just been running for for a short period of time but if it was running for",
    "start": "2079679",
    "end": "2086700"
  },
  {
    "text": "I usually leave it running for quite a few days to get the cycle counter I'm",
    "start": "2086700",
    "end": "2093750"
  },
  {
    "text": "going to show you one more thing if we go into one of these odd slave fuzzers Dame out if it might have found more",
    "start": "2093750",
    "end": "2100020"
  },
  {
    "text": "paths let's see compare this this one has 3000 this one has let's see that wasn't the",
    "start": "2100020",
    "end": "2108300"
  },
  {
    "text": "same one sorry there we go so this one has over",
    "start": "2108300",
    "end": "2114740"
  },
  {
    "text": "4,000 paths so they're doing a bit it working a bit in a different way or doing different different type of",
    "start": "2114740",
    "end": "2121050"
  },
  {
    "text": "fussing strategies so our in a different order so it might find things faster and",
    "start": "2121050",
    "end": "2126480"
  },
  {
    "text": "usually you'll see that the slave Buster's they will go they will cycle faster because they're not doing the",
    "start": "2126480",
    "end": "2132240"
  },
  {
    "text": "full thing while the master faster is trying to go through everything and then it will generally take a lot longer to",
    "start": "2132240",
    "end": "2138530"
  },
  {
    "text": "to go through one cycle I normally wait until the master faster has been running",
    "start": "2138530",
    "end": "2144119"
  },
  {
    "text": "for maybe five ten cycles before I quit well the the slavers are they might have",
    "start": "2144119",
    "end": "2150599"
  },
  {
    "text": "run like 40 cycles or something like that generally you want the execution",
    "start": "2150599",
    "end": "2156630"
  },
  {
    "text": "speed to be quite high so a thousand executions per second or over 500 executions per second that's fine",
    "start": "2156630",
    "end": "2163099"
  },
  {
    "text": "actually if you run something that's really slow AFL will tell you and it will be like a snoring sign next to the",
    "start": "2163099",
    "end": "2170010"
  },
  {
    "text": "execution speed and this is a slow binary we're actually say so under startup as well so what I'm hoping by by",
    "start": "2170010",
    "end": "2178500"
  },
  {
    "text": "doing this talk for you is that this will get you into fussing and I hope I've shown you that it's not really that",
    "start": "2178500",
    "end": "2184200"
  },
  {
    "text": "hard to get started it's actually quite easy I was kind of surprised because you",
    "start": "2184200",
    "end": "2190020"
  },
  {
    "text": "don't have to know that much to get started that's what I was dreading when I first like okay I'm gonna start",
    "start": "2190020",
    "end": "2196500"
  },
  {
    "text": "fussing but I don't know anything about it what do I need to know to start and it's it's not that much some resources",
    "start": "2196500",
    "end": "2203099"
  },
  {
    "start": "2202000",
    "end": "2202000"
  },
  {
    "text": "that you might find useful there's a blog post from foxglove security called fussing works flow a first job from",
    "start": "2203099",
    "end": "2209460"
  },
  {
    "text": "start to finish which kind of goes through the running the minification of test cases and all that kind of stuff",
    "start": "2209460",
    "end": "2214470"
  },
  {
    "text": "others to good talks from from one from rusik this year",
    "start": "2214470",
    "end": "2219730"
  },
  {
    "text": "1.the from Craig Jung the one that I quoted earlier is which is from 2016 and",
    "start": "2219730",
    "end": "2225700"
  },
  {
    "text": "these at least the the b-sides talked it goes a bit deeper into how the how the",
    "start": "2225700",
    "end": "2232830"
  },
  {
    "text": "instrumentation works while the one from 2018 ADA actually explains how you can",
    "start": "2232830",
    "end": "2237850"
  },
  {
    "text": "fuss Windows binaries and not just Linux binaries so in summary I think fuzzing",
    "start": "2237850",
    "end": "2245920"
  },
  {
    "start": "2243000",
    "end": "2243000"
  },
  {
    "text": "is quite easy to get started with and it can be really useful for making robust applications and if you're fussing other",
    "start": "2245920",
    "end": "2252670"
  },
  {
    "text": "stuff it might even earn you a bug bounty questions yes yep",
    "start": "2252670",
    "end": "2278980"
  },
  {
    "text": "so the input files are I was using our actual files from from the test cases",
    "start": "2278980",
    "end": "2285340"
  },
  {
    "text": "for the the binary down testing so I went to the github repo I grabbed a set of test files and I used that as an",
    "start": "2285340",
    "end": "2290680"
  },
  {
    "text": "input and that kind of primes the fuzzer so it makes it start fuzzing properly sooner but you could have used like a",
    "start": "2290680",
    "end": "2296290"
  },
  {
    "text": "hello file like like Michael did with JPEG for sir parser you could just use",
    "start": "2296290",
    "end": "2301600"
  },
  {
    "text": "like an empty file if that's what you need but it's generally better to have a",
    "start": "2301600",
    "end": "2306609"
  },
  {
    "text": "good set of test cases because that makes it or puts it faster into a place",
    "start": "2306609",
    "end": "2312400"
  },
  {
    "text": "where it can start finding stuff no you",
    "start": "2312400",
    "end": "2325869"
  },
  {
    "text": "could but I mean the way FL works is that it takes some input and sends it",
    "start": "2325869",
    "end": "2331540"
  },
  {
    "text": "into the application and then sees what happens so you need some way to like",
    "start": "2331540",
    "end": "2337090"
  },
  {
    "text": "invoke the application and that's usually for a file or a three standard in so if you're fussing something I",
    "start": "2337090",
    "end": "2343540"
  },
  {
    "text": "don't know if you're fussing something that where you can't like give it a file or give it some some input and make it processes then it might be hard a bit",
    "start": "2343540",
    "end": "2349930"
  },
  {
    "text": "harder to fuzz it",
    "start": "2349930",
    "end": "2352710"
  },
  {
    "text": "[Music]",
    "start": "2357190",
    "end": "2360260"
  },
  {
    "text": "right so there are there are other smart processors in AFL so I'm introducing AFL",
    "start": "2364060",
    "end": "2371810"
  },
  {
    "text": "here but there are a lot of other Fosters as well and some of them are faster at doing other stuff and some of them are you might find in a case where",
    "start": "2371810",
    "end": "2379130"
  },
  {
    "text": "they're much faster than than AFL for instance the Michael or I think it was",
    "start": "2379130",
    "end": "2392870"
  },
  {
    "text": "Michael Sulu ski who went back after both or at least after heart beat and figured out how they could have found",
    "start": "2392870",
    "end": "2398630"
  },
  {
    "text": "heartbeat using fuzzing and then without actually knowing anything about the heartbeat functionality that cost",
    "start": "2398630",
    "end": "2404480"
  },
  {
    "text": "Hartley but it wasn't found originally using AFL but it could have been found I",
    "start": "2404480",
    "end": "2411250"
  },
  {
    "text": "[Music] would do it or I wouldn't run it as a",
    "start": "2419870",
    "end": "2425840"
  },
  {
    "text": "part of a normal build pipeline because it takes a lot of time so I would rather say this is something that you you you",
    "start": "2425840",
    "end": "2433370"
  },
  {
    "text": "fuss binary's at a pace like once every",
    "start": "2433370",
    "end": "2438830"
  },
  {
    "text": "it depends on how long it takes for you to get enough cycles but maybe maybe you",
    "start": "2438830",
    "end": "2444170"
  },
  {
    "text": "fuzz every if you're releasing a new version every day you can't fuss them all because it takes",
    "start": "2444170",
    "end": "2450200"
  },
  {
    "text": "it might take more than a day it might take a week to fuss properly but like I would just continuously fuss and then",
    "start": "2450200",
    "end": "2457040"
  },
  {
    "text": "when I when I release a new version I would wait a bit because I want to previous faster to start but then I'll",
    "start": "2457040",
    "end": "2462830"
  },
  {
    "text": "start fussing the newest binary from there on so it's something I would do continuously but I wouldn't do it as a",
    "start": "2462830",
    "end": "2468530"
  },
  {
    "text": "part of a normal CI pipeline other",
    "start": "2468530",
    "end": "2474620"
  },
  {
    "text": "questions",
    "start": "2474620",
    "end": "2477010"
  },
  {
    "text": "I think stalk and look at the throw towards the end he has some he has some",
    "start": "2501359",
    "end": "2507940"
  },
  {
    "text": "some statistics from stuff that he's done to optimize stuff where you can see that he goes he he at least gets double",
    "start": "2507940",
    "end": "2514960"
  },
  {
    "text": "the speed and more than that but it it will take well it depends on the size of",
    "start": "2514960",
    "end": "2520300"
  },
  {
    "text": "the binary the number of branches like there's no good answer sorry so how well organized are the the",
    "start": "2520300",
    "end": "2536200"
  },
  {
    "text": "fastest when you run multiple of them so they don't run in the same case well I think they're pretty well organized I",
    "start": "2536200",
    "end": "2542170"
  },
  {
    "text": "don't really have a good answer for it but it seems to me that they find different crashes from the different",
    "start": "2542170",
    "end": "2549130"
  },
  {
    "text": "buzzers so it seems to work pretty well because they're using this output folder as a sync folder so they kind of write",
    "start": "2549130",
    "end": "2556089"
  },
  {
    "text": "stuff there for the queue and then they pick stuff out you can even you could even I've seen setups from this where",
    "start": "2556089",
    "end": "2562119"
  },
  {
    "text": "you can run it across multiple nodes so you could have but then you have to copy the sync folder or sink the sink fold",
    "start": "2562119",
    "end": "2568660"
  },
  {
    "text": "basically between the nodes at a certain pace but there's there are scripts for",
    "start": "2568660",
    "end": "2574030"
  },
  {
    "text": "that as well I have never tried it I've just run it on a single node",
    "start": "2574030",
    "end": "2579059"
  },
  {
    "text": "[Music]",
    "start": "2591170",
    "end": "2594359"
  },
  {
    "text": "I'm not sure what I when I got into this I started because of this training where",
    "start": "2598690",
    "end": "2607010"
  },
  {
    "text": "they were fussing nodejs native binaries so it's section so that there you had",
    "start": "2607010",
    "end": "2612410"
  },
  {
    "text": "what I would do then is I compiled nodejs with instrumentation radio set to zero because is because you need to compile",
    "start": "2612410",
    "end": "2619190"
  },
  {
    "text": "it with with AFL but then you don't want to instrument note itself because I wanted to actually test these these",
    "start": "2619190",
    "end": "2626500"
  },
  {
    "text": "libraries so what I did then I compiled nodejs and then I had a small JavaScript that was just like pulling in a file and",
    "start": "2626500",
    "end": "2632960"
  },
  {
    "text": "calling the library and then I compiled the library itself with AFL but it still",
    "start": "2632960",
    "end": "2638390"
  },
  {
    "text": "was C and C++ so I don't know if you can you could probably Foss Java itself but",
    "start": "2638390",
    "end": "2644420"
  },
  {
    "text": "I know I don't know if you could fast like a java application because I think you would still faster runtime and not",
    "start": "2644420",
    "end": "2649460"
  },
  {
    "text": "the actual application I don't know if that answered your question good",
    "start": "2649460",
    "end": "2669920"
  },
  {
    "text": "question I don't I don't actually know the internals of AFL so I need more",
    "start": "2669920",
    "end": "2676400"
  },
  {
    "text": "questions yes",
    "start": "2676400",
    "end": "2679059"
  },
  {
    "text": "all right thank you for coming [Applause]",
    "start": "2692250",
    "end": "2703260"
  }
]