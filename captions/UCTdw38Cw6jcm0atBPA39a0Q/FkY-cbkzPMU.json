[
  {
    "text": "I'm sure I'll be able to recover so I thought it was a good idea to switch to a Mac just recently and apparently that",
    "start": "7220",
    "end": "14219"
  },
  {
    "text": "was not such a good idea I'm just kidding let me just log back into my machine here we're going to be talking about c-sharp and what's new in",
    "start": "14219",
    "end": "20580"
  },
  {
    "text": "c-sharp as a programming language I generally joke that c-sharp is turning",
    "start": "20580",
    "end": "25859"
  },
  {
    "text": "into F sharp and that's not necessarily A Bad Thing because taking inspiration from other",
    "start": "25859",
    "end": "32640"
  },
  {
    "text": "programming languages that are available on the market like F sharp switch kotlin Java and so forth it's a good",
    "start": "32640",
    "end": "40140"
  },
  {
    "text": "thing that the language designers keep talking to each other and looking at each other's programming languages so",
    "start": "40140",
    "end": "45899"
  },
  {
    "text": "hopefully in the next few years what we'll see is that we'll get more features in c-sharp that are inspired by",
    "start": "45899",
    "end": "52620"
  },
  {
    "text": "programming languages like F-sharp and taking inspiration from all of that which is not necessarily a bad idea",
    "start": "52620",
    "end": "59460"
  },
  {
    "text": "so fortunately enough this machine booted up rather quickly and hopefully I've recovered this",
    "start": "59460",
    "end": "67519"
  },
  {
    "text": "let's just resume this as well all right",
    "start": "69119",
    "end": "76200"
  },
  {
    "text": "so we're going to be talking about what's new in C sharp and things that have been added to c-sharp as a programming language over the past few",
    "start": "76200",
    "end": "82920"
  },
  {
    "text": "years we're going to be going back a little bit further than c-sharp nine just to get a little bit of an understanding of some of the features",
    "start": "82920",
    "end": "89340"
  },
  {
    "text": "that have kind of built up to what we're going to see in the next coming versions of c-sharp as well",
    "start": "89340",
    "end": "94740"
  },
  {
    "text": "my name is Philip Ekberg I've written a book on c-sharp I've got plenty of plural side courses on the topic so if",
    "start": "94740",
    "end": "101159"
  },
  {
    "text": "you like my stuff feel free to reach out and ask questions afterwards if you don't like my stuff you can tell me as",
    "start": "101159",
    "end": "107520"
  },
  {
    "text": "well send me an email talk to me about what's what's bothering you what what kind of things you're you're facing in",
    "start": "107520",
    "end": "112740"
  },
  {
    "text": "your daily work that you'd like some help with I love discussing programming languages a lot of talking about c-sharp",
    "start": "112740",
    "end": "117780"
  },
  {
    "text": "and Dot net in the future of mobile development and all of that but today we're going to be focusing on",
    "start": "117780",
    "end": "124140"
  },
  {
    "text": "c-sharp and what this language is becoming in things that have changed over the past decade or so if you're a",
    "start": "124140",
    "end": "131459"
  },
  {
    "text": "developer that have worked in c-sharp for the past 10 years and maybe been out of it for a while it can be quite hard",
    "start": "131459",
    "end": "138420"
  },
  {
    "text": "to get back into it and understand where these new language features all make sense",
    "start": "138420",
    "end": "144239"
  },
  {
    "text": "so hopefully after this session you will get a little bit of an inspiration as to where these features make sense and how",
    "start": "144239",
    "end": "150180"
  },
  {
    "text": "to add them to your application some of these language features will change how we look at the architecture",
    "start": "150180",
    "end": "156660"
  },
  {
    "text": "of an application some of them change because of the available tools to us and",
    "start": "156660",
    "end": "162599"
  },
  {
    "text": "the available machines and where we want to Target our applications to to be on as an example of that",
    "start": "162599",
    "end": "168599"
  },
  {
    "text": "15 years ago maybe mobile development wasn't as big as it is today obviously it wasn't because it wasn't as",
    "start": "168599",
    "end": "174599"
  },
  {
    "text": "accessible so now when we have mobile applications we have iot devices they all need to",
    "start": "174599",
    "end": "180840"
  },
  {
    "text": "consume resources asynchronously so why not make it a part of the language to allow us to do that so async in a way it",
    "start": "180840",
    "end": "187739"
  },
  {
    "text": "was introduced in c-sharp to make that easier and there are more language features like this that quite quite",
    "start": "187739",
    "end": "193500"
  },
  {
    "text": "drastically change how we build our software ultimately it means that we can write less code to do the same thing",
    "start": "193500",
    "end": "200700"
  },
  {
    "text": "hopefully it's going to be less error prone and we can achieve the same result with less code and less errors but that",
    "start": "200700",
    "end": "207360"
  },
  {
    "text": "also means that we need to understand exactly what all of these features are doing another example of that is pattern",
    "start": "207360",
    "end": "212879"
  },
  {
    "text": "matching it's also generics they drastically change how we look at building our c-sharp applications",
    "start": "212879",
    "end": "219360"
  },
  {
    "text": "so how do we keep track of all of these different language features and what about if I have opinions on",
    "start": "219360",
    "end": "224819"
  },
  {
    "text": "what they're adding to c-sharp I know we're developers we all have opinions but if we have opinions on what's coming",
    "start": "224819",
    "end": "230400"
  },
  {
    "text": "in C sharp and we want to participate maybe even help build the next version of the compiler we can jump on to GitHub",
    "start": "230400",
    "end": "236280"
  },
  {
    "text": "and do that there's a Rosslyn repository which was the code name for the rewrite",
    "start": "236280",
    "end": "241500"
  },
  {
    "text": "of the c-sharp and VB compilers we can participate in discussions and look at the language design meeting",
    "start": "241500",
    "end": "247860"
  },
  {
    "text": "notes and understand the reasoning behind why certain language features are added to c-sharp",
    "start": "247860",
    "end": "254159"
  },
  {
    "text": "this is also a good place to learn exactly how to use them and where they would fit in different types of",
    "start": "254159",
    "end": "259260"
  },
  {
    "text": "applications there are many developers that join the discussions to just learn from others how this would be applicable",
    "start": "259260",
    "end": "265080"
  },
  {
    "text": "in their applications so if I'm not interested in just jumping on GitHub and implementing language",
    "start": "265080",
    "end": "271259"
  },
  {
    "text": "features in the compilers I just want to use these in my new applications it's a little bit different than what it used",
    "start": "271259",
    "end": "277320"
  },
  {
    "text": "to be so now we have to be on a very particular version of both.net",
    "start": "277320",
    "end": "283560"
  },
  {
    "text": "and visual studio to be able to leverage these language features if only you see Sharp 8 and you see",
    "start": "283560",
    "end": "289560"
  },
  {
    "text": "nullable reference types for example we have to be on dot net core 3.01 later",
    "start": "289560",
    "end": "294620"
  },
  {
    "text": "the reason for this is because some of the features that the language allows you to use requires both updates or for",
    "start": "294620",
    "end": "302040"
  },
  {
    "text": "the SDK as well as the runtime the runtime will help to understand exactly how to run certain things",
    "start": "302040",
    "end": "308520"
  },
  {
    "text": "but most of the language features that we're using C sharp they're just a compiler magic or it's just what the",
    "start": "308520",
    "end": "315120"
  },
  {
    "text": "compiler is doing it's just translating your c-sharp code into IL so what if the IL that it produces would",
    "start": "315120",
    "end": "321840"
  },
  {
    "text": "be compatible with an older framework or an older runtime while it's an unsupported case you could",
    "start": "321840",
    "end": "327539"
  },
  {
    "text": "use c-sharp 12 for a dotnet framework 2.0 application as long as you're using",
    "start": "327539",
    "end": "332820"
  },
  {
    "text": "features that are compatible with that runtime it's not saying that you should do this",
    "start": "332820",
    "end": "338160"
  },
  {
    "text": "but you can which means that the only reason for upgrading for the new.net versions would",
    "start": "338160",
    "end": "344699"
  },
  {
    "text": "of course be performance but if it's for the language versions you only need to update or jump onto the newer version",
    "start": "344699",
    "end": "350160"
  },
  {
    "text": "of.net if you're using one of those features that are requiring a runtime change",
    "start": "350160",
    "end": "356960"
  },
  {
    "text": "so before we jump on to C sharp 9 10 11 and possibly what's happening in 12. I'd",
    "start": "357360",
    "end": "362580"
  },
  {
    "text": "like to just talk about a few highlights from c-sharp 8 which set the scene for what's going to be developed on for the",
    "start": "362580",
    "end": "368699"
  },
  {
    "text": "next few years so in C sharp eight we got a few quite a lot of language features read-only",
    "start": "368699",
    "end": "375180"
  },
  {
    "text": "members default interface methods or default interface implementations depending on where in the documentations",
    "start": "375180",
    "end": "380880"
  },
  {
    "text": "you read about this we've got something called a switch expression which changes how we use pattern matching pattern matching is a",
    "start": "380880",
    "end": "387660"
  },
  {
    "text": "concept that's been available in many other programming languages for a very long time and just in in C sharp 7 it",
    "start": "387660",
    "end": "393960"
  },
  {
    "text": "became a first Cloud citizen in the language but it's constantly being developed so that's why we're going to",
    "start": "393960",
    "end": "399479"
  },
  {
    "text": "take a look at exactly what this is as well reducing declaration static local functions nullable reference types which",
    "start": "399479",
    "end": "405780"
  },
  {
    "text": "changes how the compiler looks at all your reference types you know if you're creating an instance of a class that can",
    "start": "405780",
    "end": "412800"
  },
  {
    "text": "be set to null with this language feature turned on the compiler will now assume that you've always set this to an",
    "start": "412800",
    "end": "419160"
  },
  {
    "text": "instance which is good because then we can avoid potential problems but we'll get into that soon we also got a way for us to",
    "start": "419160",
    "end": "426300"
  },
  {
    "text": "work with streams of data disposables for synchronous programming rain this analysis and not equalizing assignment",
    "start": "426300",
    "end": "432240"
  },
  {
    "text": "so being the eighth iteration of the language we're not going to be looking at all of these features but being the eighth iteration of the language there's",
    "start": "432240",
    "end": "438780"
  },
  {
    "text": "still quite a lot that's been added to it and we'll continue to see more and more features added to c-sharp",
    "start": "438780",
    "end": "446099"
  },
  {
    "text": "now before we get to the more useful language features there's an interesting language feature that kind of",
    "start": "446099",
    "end": "451500"
  },
  {
    "text": "illustrates why you would need to be on the a later version of the runtime so with c-sharp eight we got this thing",
    "start": "451500",
    "end": "458039"
  },
  {
    "text": "called a default interface implementation or method depending on where you read about this",
    "start": "458039",
    "end": "464280"
  },
  {
    "text": "so what this is in why this is interesting is because it kind of divides developers into two different camps",
    "start": "464280",
    "end": "469979"
  },
  {
    "text": "some Developers really just don't like this language feature at all and the rest really don't",
    "start": "469979",
    "end": "476400"
  },
  {
    "text": "like it I'm kidding there are some use cases for this so",
    "start": "476400",
    "end": "481740"
  },
  {
    "text": "default interface methods means that I can now change my interface and Supply it with a default method implementation",
    "start": "481740",
    "end": "489780"
  },
  {
    "text": "while I'm using an expression body member I've now extended my interface with an implementation detail",
    "start": "489780",
    "end": "497400"
  },
  {
    "text": "so why is this such a big deal and why why would this require a runtime change",
    "start": "497400",
    "end": "502680"
  },
  {
    "text": "so prior to dotnet core 3.0 the the runtime didn't know anything about how",
    "start": "502680",
    "end": "508860"
  },
  {
    "text": "to execute a method from an interface because that was just a contract to determine what the actual implementation",
    "start": "508860",
    "end": "515219"
  },
  {
    "text": "the class the instance what that would have so while this is this is a good idea",
    "start": "515219",
    "end": "523320"
  },
  {
    "text": "the problem is that the Tooling in visual studio for example it doesn't tell you if this is available",
    "start": "523320",
    "end": "528360"
  },
  {
    "text": "so imagine pulling down a nuget package and update there's a default interface implementation on that nuget package the",
    "start": "528360",
    "end": "535980"
  },
  {
    "text": "visual studio won't tell you that it's there so instead it will just use the default implementation",
    "start": "535980",
    "end": "541740"
  },
  {
    "text": "so to solve this you all have to read the documentations like we all do when we're updating our packages everyone's",
    "start": "541740",
    "end": "547680"
  },
  {
    "text": "reading the change logs if you're saying that you are I don't know you're lying",
    "start": "547680",
    "end": "554220"
  },
  {
    "text": "now an important feature added to c-sharp 8 which has been changed now over the the last few language versions",
    "start": "554220",
    "end": "560339"
  },
  {
    "text": "as well we improved upon by adding more features to c-sharp it's now coming to a state where we can write applications",
    "start": "560339",
    "end": "567060"
  },
  {
    "text": "where we really avoid having null reference exceptions and all null at all in our language in our programs",
    "start": "567060",
    "end": "574200"
  },
  {
    "text": "the nullable reference types was introduced to help us avoid a very specific problem",
    "start": "574200",
    "end": "579660"
  },
  {
    "text": "as anyone here never seen this happen you're lying if you're",
    "start": "579660",
    "end": "586500"
  },
  {
    "text": "I think all of us have probably ran into a null reference exception otherwise maybe this is your first week",
    "start": "586500",
    "end": "592860"
  },
  {
    "text": "as a developer and I welcome you to this world tomorrow you're going to see this in one of your Solutions",
    "start": "592860",
    "end": "598560"
  },
  {
    "text": "so this isn't only the problem with allowing nulls in in the language other languages like kotlin make it really",
    "start": "598560",
    "end": "604500"
  },
  {
    "text": "hard for us to use nulls the compiler will smack you on the fingers if you try to you have to explicitly say that this",
    "start": "604500",
    "end": "610800"
  },
  {
    "text": "here can be null and I can use null in this context but the problem with null ability is also that it encourages that we add null",
    "start": "610800",
    "end": "618779"
  },
  {
    "text": "checks all over our code which clutters the code it makes it harder to read and understand exactly what's going on what",
    "start": "618779",
    "end": "624120"
  },
  {
    "text": "about if I can turn this around and put the responsibility somewhere else I could tell the consumer that you have to",
    "start": "624120",
    "end": "631500"
  },
  {
    "text": "explicitly say that you're passing null here and I've handled that case",
    "start": "631500",
    "end": "636680"
  },
  {
    "text": "and honestly quite it's quite ambiguous right so what does it actually mean to return null from a method",
    "start": "637019",
    "end": "642720"
  },
  {
    "text": "so imagine implementing a repository you communicate with your database I know many developers myself included",
    "start": "642720",
    "end": "649680"
  },
  {
    "text": "wrap everything a try catch block and just return all from the method if there was a problem now how would the consumer of my",
    "start": "649680",
    "end": "656040"
  },
  {
    "text": "repository know if the object wasn't found or if there was a problem now obviously it's a bad design from my",
    "start": "656040",
    "end": "662640"
  },
  {
    "text": "part but I know this happens quite a lot there are better alternative ways to do this we can with pattern matching now",
    "start": "662640",
    "end": "668940"
  },
  {
    "text": "say that we return a not found use it unauthorized user removed or whatever",
    "start": "668940",
    "end": "675000"
  },
  {
    "text": "so many different ways to build this architecture it also encourages mutability if I allow",
    "start": "675000",
    "end": "680160"
  },
  {
    "text": "a property to be set to null then there's an assumption that sometimes this is going to be changed to in fact",
    "start": "680160",
    "end": "686040"
  },
  {
    "text": "have a value if that's not the Assumption then you can remove the property completely",
    "start": "686040",
    "end": "692940"
  },
  {
    "text": "and of course this is a problem with multi-threaded applications especially if you're doing async in a",
    "start": "692940",
    "end": "698160"
  },
  {
    "text": "way done a lot of multi-threading so of course this here isn't a big",
    "start": "698160",
    "end": "704040"
  },
  {
    "text": "problem like I can now check I can have a lot of code like this here and someone in here much more than myself is going",
    "start": "704040",
    "end": "710040"
  },
  {
    "text": "to tell me that I can write this a little bit prettier sure enough I can use the null conditional operator and write this a little bit better",
    "start": "710040",
    "end": "716579"
  },
  {
    "text": "but what if I can indicate to the compiler that I promise that person",
    "start": "716579",
    "end": "721980"
  },
  {
    "text": "address and Suite will never be no at least that's my assumption how about I I tell the compiler that you",
    "start": "721980",
    "end": "729060"
  },
  {
    "text": "can try and keep track of the state of nulls we can do this by enabling the nullable",
    "start": "729060",
    "end": "734760"
  },
  {
    "text": "reference types and this is the default since a few versions back so if you do file new project this is going to be",
    "start": "734760",
    "end": "740940"
  },
  {
    "text": "turned on this here is the compiler directive to turn it on or off for one line one method an entire file",
    "start": "740940",
    "end": "748440"
  },
  {
    "text": "but per default it's enabled in your csront file so let's uh jump over to um",
    "start": "748440",
    "end": "755100"
  },
  {
    "text": "Visual Studio which I had started earlier but now then",
    "start": "755100",
    "end": "760200"
  },
  {
    "text": "at this crashed let's see if I can boot this up pretty quickly so in the um",
    "start": "760200",
    "end": "766019"
  },
  {
    "text": "and the Cs project file this is now hopefully still turned on or",
    "start": "766019",
    "end": "772079"
  },
  {
    "text": "turned off and we can enable and disable this wherever we want so let's say that I",
    "start": "772079",
    "end": "778079"
  },
  {
    "text": "have a project here called nullable reference types I'm going to go into this project file and I have these two properties I can",
    "start": "778079",
    "end": "785760"
  },
  {
    "text": "say nullable enable it's all commented now before I enable this I just want to show you the the file itself or the class so",
    "start": "785760",
    "end": "792600"
  },
  {
    "text": "this is a very simple code file there's no issues there's no compiler warnings no errors no nothing like that",
    "start": "792600",
    "end": "799019"
  },
  {
    "text": "simple class it's a simple usage I'm returning null here because that's always a great idea",
    "start": "799019",
    "end": "806279"
  },
  {
    "text": "so at the first glance like this looks like code that we've all written for a very long time",
    "start": "806279",
    "end": "812100"
  },
  {
    "text": "but if I now enable this language feature which is the default from",
    "start": "812100",
    "end": "817700"
  },
  {
    "text": "c-sharp.net6 so going to be turned on by default now",
    "start": "817700",
    "end": "822899"
  },
  {
    "text": "I have a couple of warnings look at this so now to tell me that you have some",
    "start": "822899",
    "end": "829980"
  },
  {
    "text": "non-nullable properties you should probably attend to these and fix this",
    "start": "829980",
    "end": "835079"
  },
  {
    "text": "how many of you are always fixing your warnings right",
    "start": "835079",
    "end": "841800"
  },
  {
    "text": "I don't trust that at all I'm kidding so you can have style cops and whatever enabled that tells you that this is a",
    "start": "841920",
    "end": "848459"
  },
  {
    "text": "problem but what I like to do is that I'd like to go back to this to really ensure that this is visible",
    "start": "848459",
    "end": "855480"
  },
  {
    "text": "I'm going to treat warnings as errors and now if I go back to the correct file",
    "start": "855480",
    "end": "862139"
  },
  {
    "text": "this will now be a compiler error instead so now I can't even compile my solution",
    "start": "862139",
    "end": "868440"
  },
  {
    "text": "so if you brought your laptop with you today and you're using an older version of",
    "start": "868440",
    "end": "874620"
  },
  {
    "text": "c-sharp or net go into your company projects enable this check in the code",
    "start": "874620",
    "end": "880260"
  },
  {
    "text": "and take a long weekend and then when you come back on Tuesday or Wednesday",
    "start": "880260",
    "end": "885600"
  },
  {
    "text": "either someone's fixed all the null reference problems or you're out of a job the first would probably be better",
    "start": "885600",
    "end": "892380"
  },
  {
    "text": "but now that I've enabled this here sure enough it's great that it's telling me that there's a problem the problem here",
    "start": "892380",
    "end": "898019"
  },
  {
    "text": "is that the compiler can't ensure that I've set this to a proper instance and the way to do that is of course to",
    "start": "898019",
    "end": "904380"
  },
  {
    "text": "introduce a Constructor now the compiler error removed somewhere else because the the",
    "start": "904380",
    "end": "910800"
  },
  {
    "text": "the constructors should be in charge of setting these values but if I start adding you know first tier and string",
    "start": "910800",
    "end": "917699"
  },
  {
    "text": "last I have to set these two I can't even type and talk at the same time let's do first name is equal to First",
    "start": "917699",
    "end": "924360"
  },
  {
    "text": "last name is equal to last and now there's no more compiler warnings or errors the problem with this approach is that",
    "start": "924360",
    "end": "930959"
  },
  {
    "text": "I've now changed the contract so whoever's using this class will now have to go ahead and change all over the",
    "start": "930959",
    "end": "936180"
  },
  {
    "text": "place which is not necessarily a great idea so how do we solve this well with C",
    "start": "936180",
    "end": "943560"
  },
  {
    "text": "sharp eight it wasn't really possible to solve this in a nice way you could of course say that well I want",
    "start": "943560",
    "end": "950940"
  },
  {
    "text": "to allow this to be null so nullable reference types you know nullable value types you can just add the question mark",
    "start": "950940",
    "end": "956279"
  },
  {
    "text": "and now that can be set to null so if I start adding question marks all over my code base now all of a sudden I went",
    "start": "956279",
    "end": "962579"
  },
  {
    "text": "back to where I were prior to enabling this language feature which is slightly true because now I've",
    "start": "962579",
    "end": "968220"
  },
  {
    "text": "moved this warning to somewhere else so whoever's using first name will have to ensure that it's properly null checked",
    "start": "968220",
    "end": "976740"
  },
  {
    "text": "I don't particularly like adding the question mark like this here so instead we'll do it for one of them but I'm",
    "start": "976740",
    "end": "983100"
  },
  {
    "text": "going to add two more language features one that was added in C sharp nine and one that's been added in C sharp 11. so",
    "start": "983100",
    "end": "988680"
  },
  {
    "text": "let's say for first name first name should be required if I add that the warning has now",
    "start": "988680",
    "end": "995279"
  },
  {
    "text": "disappeared so whoever's creating an instance of this class are now required to set this to a to an instance",
    "start": "995279",
    "end": "1003639"
  },
  {
    "text": "and I can also introduce a C sharp 9 feature called init only to ensure that once you've set this to a value you",
    "start": "1003920",
    "end": "1010459"
  },
  {
    "text": "cannot change this so effectively I made this immutable should probably do that down here for",
    "start": "1010459",
    "end": "1016579"
  },
  {
    "text": "for last name as well it's better to create a new instance of this detailed class rather than changing",
    "start": "1016579",
    "end": "1023240"
  },
  {
    "text": "the existing properties and then for for this here it's complaining up here as well so let's",
    "start": "1023240",
    "end": "1028938"
  },
  {
    "text": "just make that nullable to illustrate what's going to happen next so another another place in the",
    "start": "1028939",
    "end": "1034520"
  },
  {
    "text": "application I'm accessing the last name and now the compiler knows that hey you",
    "start": "1034520",
    "end": "1040040"
  },
  {
    "text": "should probably have set this to a value what's interesting is that the compiler",
    "start": "1040040",
    "end": "1046100"
  },
  {
    "text": "if I set this person.details if I set this to a new instance",
    "start": "1046100",
    "end": "1052960"
  },
  {
    "text": "this here is going to complain that I haven't supplied everything necessary",
    "start": "1053419",
    "end": "1059000"
  },
  {
    "text": "because it requires me to also set the first name right which is great that's what I want so if I say that I",
    "start": "1059000",
    "end": "1067039"
  },
  {
    "text": "want to create a new instance of this first name is required I'm going to set that to a value",
    "start": "1067039",
    "end": "1073179"
  },
  {
    "text": "then what happens if I said last name to something now it knows that I've set this to a",
    "start": "1073700",
    "end": "1078740"
  },
  {
    "text": "value because it keeps track of this it's called null State static analysis which I'm not going to repeat again",
    "start": "1078740",
    "end": "1084320"
  },
  {
    "text": "because it's the hardest thing to say so that's a great thing the compiler knows that I've now set this to a value",
    "start": "1084320",
    "end": "1093159"
  },
  {
    "text": "so what else can the compiler track well it knows that if I perform a null check",
    "start": "1093320",
    "end": "1099679"
  },
  {
    "text": "in another way I can say person.details dot last name if that is null",
    "start": "1099679",
    "end": "1105500"
  },
  {
    "text": "I can continue to the next one that's not what I want",
    "start": "1105500",
    "end": "1110539"
  },
  {
    "text": "can do this probably have to do details like that",
    "start": "1110539",
    "end": "1115820"
  },
  {
    "text": "now it knows that I've performed this null check but I can take it one step further to",
    "start": "1115820",
    "end": "1121220"
  },
  {
    "text": "say that well what about if I use a helper method so I can do argument null exception throw if",
    "start": "1121220",
    "end": "1127640"
  },
  {
    "text": "null person dot details and I'm going to do the same just to",
    "start": "1127640",
    "end": "1133760"
  },
  {
    "text": "show you how this works for last name so the same thing here this method that",
    "start": "1133760",
    "end": "1139460"
  },
  {
    "text": "that checks if it's null or not how can the compiler know that it's performed in null check how does it know that there's",
    "start": "1139460",
    "end": "1145460"
  },
  {
    "text": "an attribute used on this method to indicate to whoever's Now using this and and to the compiler that if this throws",
    "start": "1145460",
    "end": "1152840"
  },
  {
    "text": "an exception you won't be coming to the next line and I promise that it's not null obviously we can trick the compiler",
    "start": "1152840",
    "end": "1158900"
  },
  {
    "text": "into thinking that we've performed a null check but that kind of defeats the purpose so it's very flexible and it's a really",
    "start": "1158900",
    "end": "1165679"
  },
  {
    "text": "great way for us to try to avoid these null reference exceptions and with the required keyword added in C sharp 11",
    "start": "1165679",
    "end": "1173020"
  },
  {
    "text": "this became kind of complete because what you had to do earlier",
    "start": "1173020",
    "end": "1178039"
  },
  {
    "text": "was quite nasty so if I remove the required keyword and I want to say that this shouldn't be null but I also want",
    "start": "1178039",
    "end": "1184520"
  },
  {
    "text": "to get rid of this warning so I could say well I'm going to set this to the default value and I promise that default",
    "start": "1184520",
    "end": "1191299"
  },
  {
    "text": "isn't going to be null and now the warning disappeared but whoever is using this here doesn't know",
    "start": "1191299",
    "end": "1197720"
  },
  {
    "text": "so to show you why that is a problem we could say that",
    "start": "1197720",
    "end": "1203600"
  },
  {
    "text": "this here returns null the compiler now expects this to be set to an instance",
    "start": "1203600",
    "end": "1210020"
  },
  {
    "text": "but you know I can promise the compiler that I'm not returning null",
    "start": "1210020",
    "end": "1216559"
  },
  {
    "text": "so why is this a problem obviously we're not smarter than the compiler so the damage operator",
    "start": "1216559",
    "end": "1223039"
  },
  {
    "text": "we should avoid that especially with the new keywords in c-verp 11.",
    "start": "1223039",
    "end": "1229220"
  },
  {
    "text": "so instead of course we should return I'm going to use yield return new I keep the target type new expression which was",
    "start": "1229220",
    "end": "1235640"
  },
  {
    "text": "added in C sharp 10 so I don't have to explicitly say which type I need to create",
    "start": "1235640",
    "end": "1242740"
  },
  {
    "text": "and since I remove the required keyword from down here I'm going to set that to a required again",
    "start": "1242780",
    "end": "1248299"
  },
  {
    "text": "now it tells me that I should probably set first name first name to a value right",
    "start": "1248299",
    "end": "1256460"
  },
  {
    "text": "there we go so the nullable reference types is a",
    "start": "1256460",
    "end": "1261799"
  },
  {
    "text": "great addition addition to the language but was only really in my opinion completed now with c-sharp 11 released",
    "start": "1261799",
    "end": "1268100"
  },
  {
    "text": "last year and together with the target type new expression that reduces the amount of characters that we have to",
    "start": "1268100",
    "end": "1273200"
  },
  {
    "text": "write the code becomes rather rather nice and before we go any further so this",
    "start": "1273200",
    "end": "1279799"
  },
  {
    "text": "here is a program.cs file so before I jump back this here is a top level statement notice how you don't have to",
    "start": "1279799",
    "end": "1285559"
  },
  {
    "text": "have that public static void main stuff it doesn't have to be wrapped in a namespace nothing like that anymore no",
    "start": "1285559",
    "end": "1290720"
  },
  {
    "text": "usings at the top for the standard system stuff this is the new way of building your console applications or",
    "start": "1290720",
    "end": "1297020"
  },
  {
    "text": "also what's known as minimal apis so again I do encourage you to um to try",
    "start": "1297020",
    "end": "1304220"
  },
  {
    "text": "this out and tweet warnings as errors you can turn this on as well in the project settings as well as with the nullable reference types",
    "start": "1304220",
    "end": "1311720"
  },
  {
    "text": "and another just small note here on C sharp a they introduce something called asynchronous Stream So they continue to",
    "start": "1311720",
    "end": "1318860"
  },
  {
    "text": "add capabilities to language features that have been introduced over the past years like async and await was first",
    "start": "1318860",
    "end": "1325159"
  },
  {
    "text": "introduced in in dotnet 4.5 so quite a long time ago in c-sharp 5. but now",
    "start": "1325159",
    "end": "1331400"
  },
  {
    "text": "they're they're keep adding things to the language to make it easier to consume resources so for for example I",
    "start": "1331400",
    "end": "1337940"
  },
  {
    "text": "can add the await keyword in front of a for each Loop to indicate that I expect",
    "start": "1337940",
    "end": "1343039"
  },
  {
    "text": "each element in this for each Loop to retrieved asynchronously which is extremely useful imagine having",
    "start": "1343039",
    "end": "1350840"
  },
  {
    "text": "a message box in Azure for example or a message queue you can say that I want to iterate over each message I have no idea",
    "start": "1350840",
    "end": "1358280"
  },
  {
    "text": "when they arrive but I could basically say a wait for each message in my message queue and the body of that for",
    "start": "1358280",
    "end": "1364280"
  },
  {
    "text": "each Loop would then run for each message as it's added in azure quite handy we've been able to write",
    "start": "1364280",
    "end": "1370520"
  },
  {
    "text": "this code in different ways before but now it's a little bit less code it's more understandable but you also have to",
    "start": "1370520",
    "end": "1377480"
  },
  {
    "text": "understand exactly what async in a way does and how it affects performance in your application",
    "start": "1377480",
    "end": "1382880"
  },
  {
    "text": "so with C sharp eight out of the way we can talk a little bit more about C sharp 9 which introduced a really important",
    "start": "1382880",
    "end": "1388220"
  },
  {
    "text": "language feature called records or record types this is a way to more",
    "start": "1388220",
    "end": "1393640"
  },
  {
    "text": "easily Define a reference type in a little bit more of a concise syntax",
    "start": "1393640",
    "end": "1399799"
  },
  {
    "text": "it added the init only Setter that I just showed you we had the top level statement which is",
    "start": "1399799",
    "end": "1405080"
  },
  {
    "text": "a new way of writing that program.cs file we've got pattern matching enhancements",
    "start": "1405080",
    "end": "1411500"
  },
  {
    "text": "I haven't even showed you pattern matching yet but that's a big topic and we'll call that cover that in just a",
    "start": "1411500",
    "end": "1416539"
  },
  {
    "text": "second with C sharp 9 they introduced more patterns to the language to make this a viable feature",
    "start": "1416539",
    "end": "1422900"
  },
  {
    "text": "they also added the target type new expression that I just showed you as well and there's a whole bunch of more",
    "start": "1422900",
    "end": "1428419"
  },
  {
    "text": "language features more targeted towards I would say lower level stuff",
    "start": "1428419",
    "end": "1435080"
  },
  {
    "text": "but again like in the ninth version of the language there's quite a lot added right",
    "start": "1435080",
    "end": "1440179"
  },
  {
    "text": "it can't be easy maintaining such an old compiler and still adding really",
    "start": "1440179",
    "end": "1445280"
  },
  {
    "text": "important language features but that's why c-sharp is still so popular because it keeps adapting to the",
    "start": "1445280",
    "end": "1452000"
  },
  {
    "text": "types of applications that we need to build and the types of tools available and the the different platforms that",
    "start": "1452000",
    "end": "1458299"
  },
  {
    "text": "require it so we're going to be looking at records and and pattern matching next pattern",
    "start": "1458299",
    "end": "1463820"
  },
  {
    "text": "matching has been around in many other programming languages for a long time kotlin Swift among others",
    "start": "1463820",
    "end": "1470480"
  },
  {
    "text": "what this allows us to do is to look at an object or an instance and determine what that is it could be in this case we",
    "start": "1470480",
    "end": "1476360"
  },
  {
    "text": "could look at if the fruit is edible if it has a certain shape or if it's you know anything you can think of",
    "start": "1476360",
    "end": "1483679"
  },
  {
    "text": "and I like to talk about pattern matching as a way for you to take a little bit of your code snippet and",
    "start": "1483679",
    "end": "1489380"
  },
  {
    "text": "share that with the non-techies in your project maybe they shouldn't be allowed to add",
    "start": "1489380",
    "end": "1494480"
  },
  {
    "text": "things to your patterns but you can still talk about the the Expressions that you're using a much more better way",
    "start": "1494480",
    "end": "1500240"
  },
  {
    "text": "than it used to be as an example we can match on a type and",
    "start": "1500240",
    "end": "1505340"
  },
  {
    "text": "what I like to call an attribute and I'm not talking about the attribute that you have on top of a method or or a class",
    "start": "1505340",
    "end": "1510559"
  },
  {
    "text": "but an attribute in terms of what something is so in C sharp one through six we've been",
    "start": "1510559",
    "end": "1516440"
  },
  {
    "text": "able to do this we can say get give me the type if it's type of what I'm looking for and I can compare a certain",
    "start": "1516440",
    "end": "1522140"
  },
  {
    "text": "property now the problem here would be if that property only lived on the specific type that I'm looking for I",
    "start": "1522140",
    "end": "1528260"
  },
  {
    "text": "first have to perform that typecasting and then I have to cast it to the",
    "start": "1528260",
    "end": "1533299"
  },
  {
    "text": "correct type if I'm using it in some way inside that if statement something wrong with this like all of us",
    "start": "1533299",
    "end": "1539419"
  },
  {
    "text": "probably write this type of code and sometimes I still do because I forget that pattern matching is so powerful",
    "start": "1539419",
    "end": "1545539"
  },
  {
    "text": "but with C sharp 7 they made this a little bit easier and the goal here is to make it so easy for anyone to express",
    "start": "1545539",
    "end": "1551659"
  },
  {
    "text": "themselves without having to write two complex code and making it a little bit",
    "start": "1551659",
    "end": "1557120"
  },
  {
    "text": "more extensible as well we all know that it can be hard if you want to add it just one extra Clause",
    "start": "1557120",
    "end": "1563539"
  },
  {
    "text": "here to the if statement or one extra thing to it we have to write lots of tests to ensure that that it works",
    "start": "1563539",
    "end": "1570679"
  },
  {
    "text": "but with pattern matching it kind of quickly becomes obvious unless you're abusing the language feature which I'm",
    "start": "1570679",
    "end": "1576919"
  },
  {
    "text": "also going to show you how you do so you can avoid doing that now with C sharp 7 they introduced the",
    "start": "1576919",
    "end": "1583220"
  },
  {
    "text": "first version of this so with a switch or the normal switch statement we can pass an instance and say that for the",
    "start": "1583220",
    "end": "1589940"
  },
  {
    "text": "case of this being the type that I'm looking for this is a type pattern I'm going to capture this as the correct",
    "start": "1589940",
    "end": "1595640"
  },
  {
    "text": "type the compiler already knows that I'm looking for in this case an apple it can then capture it to that particular type",
    "start": "1595640",
    "end": "1602539"
  },
  {
    "text": "without me having to do anything I can then access properties in that one expression",
    "start": "1602539",
    "end": "1608840"
  },
  {
    "text": "and then it's the concrete type or the correct type inside the case",
    "start": "1608840",
    "end": "1614299"
  },
  {
    "text": "obviously with C sharp 7 no one really wrote this because there's a lot more code to express the same thing",
    "start": "1614299",
    "end": "1621140"
  },
  {
    "text": "but this was the first iteration of pattern matching in c-sharp so with C sharp a they intro is a switch",
    "start": "1621140",
    "end": "1627200"
  },
  {
    "text": "expression which drastically changed how we write this so instead we have this line of code here where I expect a",
    "start": "1627200",
    "end": "1633620"
  },
  {
    "text": "result coming out of my pattern matching code snippet So based on my input that's",
    "start": "1633620",
    "end": "1640640"
  },
  {
    "text": "the object I wanted to create patterns for I create this switch expression which I fill with expression body",
    "start": "1640640",
    "end": "1646700"
  },
  {
    "text": "members that's an example how this would look let's say that I want to get a string",
    "start": "1646700",
    "end": "1653240"
  },
  {
    "text": "representation of my type I can say well based on my instance of a fruit create",
    "start": "1653240",
    "end": "1658820"
  },
  {
    "text": "these different switch Expressions if it's the type of apple then I'm going to return a string so the right hand side",
    "start": "1658820",
    "end": "1664580"
  },
  {
    "text": "is what's returned out of this here could be a method call doesn't have to return a string this is just a very",
    "start": "1664580",
    "end": "1670159"
  },
  {
    "text": "simple simple way of doing this hopefully no one's now thinking that oh you can only imagine a particular type",
    "start": "1670159",
    "end": "1677419"
  },
  {
    "text": "but surely enough that's the that's the most simple thing that's a type pattern so there's many different patterns",
    "start": "1677419",
    "end": "1683539"
  },
  {
    "text": "available in C sharp there's something called a positional pattern if you use a method called a deconstruct you can pull",
    "start": "1683539",
    "end": "1690140"
  },
  {
    "text": "an object apart and use it with what's called positional pattern it's not used as often as the other ones",
    "start": "1690140",
    "end": "1696020"
  },
  {
    "text": "but I can show you that as well we have a property pattern to match on property values we can have a tuple",
    "start": "1696020",
    "end": "1702320"
  },
  {
    "text": "pattern to match tuples with each other we can do relational patterns for",
    "start": "1702320",
    "end": "1707659"
  },
  {
    "text": "example let's say that I'm looking for users and I'm matching on an authorized",
    "start": "1707659",
    "end": "1712700"
  },
  {
    "text": "user where it's logged in within the last few days then I can do a relational pattern to",
    "start": "1712700",
    "end": "1718640"
  },
  {
    "text": "say that you have to have logged in within 10 days which you can still Express with a",
    "start": "1718640",
    "end": "1724580"
  },
  {
    "text": "normal if statement what with pattern matching that little code snippet becomes a little bit more fluent and nice to read and I can even use",
    "start": "1724580",
    "end": "1731240"
  },
  {
    "text": "something called a conjunctive ant pattern to say that well the user have to have logged in within the last 10 or",
    "start": "1731240",
    "end": "1737779"
  },
  {
    "text": "and 100 days we can do the list patterns to say that",
    "start": "1737779",
    "end": "1743840"
  },
  {
    "text": "I'm looking for a list where the start of the list contains something or the end I can slice off a portion of the",
    "start": "1743840",
    "end": "1750559"
  },
  {
    "text": "list if it's the correct thing I'm looking for and I can group these together with parenthesis and I can I can negate them",
    "start": "1750559",
    "end": "1757880"
  },
  {
    "text": "with a knot pattern and there's all of these used together produces what's known as a recursive pattern",
    "start": "1757880",
    "end": "1763520"
  },
  {
    "text": "so surely enough there's quite a lot of patterns available in c-sharp and we're going to be exploring some of them now",
    "start": "1763520",
    "end": "1770720"
  },
  {
    "text": "so let's jump back over to visual studio and before we explore the patterns I want to go through this this",
    "start": "1770720",
    "end": "1779059"
  },
  {
    "text": "file that I have here so there's a couple of things happening in here so first of all",
    "start": "1779059",
    "end": "1784880"
  },
  {
    "text": "there's not really a namespace declaration that you you normally see I'm using a file scope namespace at the",
    "start": "1784880",
    "end": "1792020"
  },
  {
    "text": "top here to indicate that all the types available in this file now lives in this namespace",
    "start": "1792020",
    "end": "1797480"
  },
  {
    "text": "no more indentation no more useless white space passed up to GitHub",
    "start": "1797480",
    "end": "1802580"
  },
  {
    "text": "right perfect and then I have something called a record so this was also",
    "start": "1802580",
    "end": "1807620"
  },
  {
    "text": "introduced in C sharp nine the record type produces a reference type it's a class with quite a lot of functionality",
    "start": "1807620",
    "end": "1814940"
  },
  {
    "text": "behind the scenes here so what this actually does and let me see if I still have my browser open",
    "start": "1814940",
    "end": "1822440"
  },
  {
    "text": "probably don't since my computer crashed let's do to sharplab.io",
    "start": "1822440",
    "end": "1829480"
  },
  {
    "text": "do a dare press restore probably not probably not so just trust me what this",
    "start": "1830240",
    "end": "1836240"
  },
  {
    "text": "is doing here so what it's doing is that it's generating first of all it generates a reference type",
    "start": "1836240",
    "end": "1841820"
  },
  {
    "text": "each of the the things you see here or the the properties",
    "start": "1841820",
    "end": "1847940"
  },
  {
    "text": "this here is known as the primary Constructor or default Constructor",
    "start": "1847940",
    "end": "1853039"
  },
  {
    "text": "so with a record doesn't have to have a body let's say we have record person",
    "start": "1853039",
    "end": "1858320"
  },
  {
    "text": "I can say string first name String last name what this here is now doing it's",
    "start": "1858320",
    "end": "1863659"
  },
  {
    "text": "producing a class with two backing fields that are in it only so it's immutable it exposes them using a public",
    "start": "1863659",
    "end": "1870440"
  },
  {
    "text": "property so I can access first and last name it also gives me value-based equality so if I compare two instances",
    "start": "1870440",
    "end": "1877580"
  },
  {
    "text": "with each other it will compare the values of first name and last name which is tremendously useful",
    "start": "1877580",
    "end": "1883520"
  },
  {
    "text": "it also gives me a way to get a string representation of this entire instance not Json but it looks similar great for",
    "start": "1883520",
    "end": "1891620"
  },
  {
    "text": "logging for example just be careful so you don't log any sensitive data",
    "start": "1891620",
    "end": "1897679"
  },
  {
    "text": "so with that being said I've created this test result that has two primary parameters or two two properties that",
    "start": "1897679",
    "end": "1904880"
  },
  {
    "text": "are required for this Constructor I've also introduced a body because it's normal reference type it's a normal",
    "start": "1904880",
    "end": "1910399"
  },
  {
    "text": "class behind the hoods so I can add methods Fields properties and whatever I want",
    "start": "1910399",
    "end": "1915679"
  },
  {
    "text": "I've introduced a separate method here called deconstruct now this here is a magic method as long as you",
    "start": "1915679",
    "end": "1922700"
  },
  {
    "text": "have a publicly exposed method called deconstruct spelled exactly like this with two or more out parameters",
    "start": "1922700",
    "end": "1931100"
  },
  {
    "text": "what you will be able to do is let me show you",
    "start": "1931100",
    "end": "1936200"
  },
  {
    "text": "let me show you I can take an instance of a test result so I've already prepared that I have a couple of test",
    "start": "1936200",
    "end": "1941419"
  },
  {
    "text": "results or test results is equal to results this is an array of",
    "start": "1941419",
    "end": "1947480"
  },
  {
    "text": "of test results if I do this and I can't spell",
    "start": "1947480",
    "end": "1953000"
  },
  {
    "text": "now if I want to get these different so the test day sends an",
    "start": "1953000",
    "end": "1958460"
  },
  {
    "text": "archived if I want to get that into separate variables I can deconstruct this object",
    "start": "1958460",
    "end": "1964399"
  },
  {
    "text": "so I can do a b c is equal to test result test result",
    "start": "1964399",
    "end": "1972039"
  },
  {
    "text": "now this doesn't make any sense at all so this we should probably avoid",
    "start": "1972200",
    "end": "1977840"
  },
  {
    "text": "such shorthand variable names the problem here is Visual Studio isn't really telling me what it's being",
    "start": "1977840",
    "end": "1982940"
  },
  {
    "text": "deconstructed into except that I can hover this here and I can see that well the first thing is a daytime offset so",
    "start": "1982940",
    "end": "1988820"
  },
  {
    "text": "that's probably the test date I think the second one is an integer so that would probably be the number of",
    "start": "1988820",
    "end": "1994760"
  },
  {
    "text": "tests and the last one is is archived it",
    "start": "1994760",
    "end": "1999799"
  },
  {
    "text": "doesn't have to be the same name that I use for my deconstruct method but basically if I have this here",
    "start": "1999799",
    "end": "2005140"
  },
  {
    "text": "I can take my object or my instance and I can deconstruct that into separate variables which is handy when it comes",
    "start": "2005140",
    "end": "2010659"
  },
  {
    "text": "to pattern matching so we can leave that for now but",
    "start": "2010659",
    "end": "2016120"
  },
  {
    "text": "that illustrates exactly what what is generated by a record type",
    "start": "2016120",
    "end": "2021519"
  },
  {
    "text": "now there are multiple different ways that I can use pattern matching I can use it",
    "start": "2021519",
    "end": "2026559"
  },
  {
    "text": "with if statements I can use them with my switch expression so for example let's say that instead of test result",
    "start": "2026559",
    "end": "2032200"
  },
  {
    "text": "being my actual instance here so I have created this method called get tests",
    "start": "2032200",
    "end": "2037779"
  },
  {
    "text": "just returns a couple of failed ones and then finally a past test doesn't really matter exactly what this",
    "start": "2037779",
    "end": "2043840"
  },
  {
    "text": "is doing we can move that down there now let's say that I want this variable",
    "start": "2043840",
    "end": "2049540"
  },
  {
    "text": "here to contain a string representation of the result I can instead say well based on what the first thing is that I",
    "start": "2049540",
    "end": "2056440"
  },
  {
    "text": "get out of this I can produce patterns to determine if it's a failed test",
    "start": "2056440",
    "end": "2063659"
  },
  {
    "text": "I can capture this this here is called a declaration pattern to to declare that as a variable",
    "start": "2064119",
    "end": "2070358"
  },
  {
    "text": "so failed there we go",
    "start": "2070359",
    "end": "2076240"
  },
  {
    "text": "and I can find past ones right so I can use the type pattern and",
    "start": "2076240",
    "end": "2082419"
  },
  {
    "text": "then I can use a Discord the discard means everything else",
    "start": "2082419",
    "end": "2088658"
  },
  {
    "text": "it means null it means whatever it's the same as VAR so if I do the Vore pattern that will",
    "start": "2088659",
    "end": "2095260"
  },
  {
    "text": "also match on nulls that's something that you should keep in mind",
    "start": "2095260",
    "end": "2101640"
  },
  {
    "text": "so if I undo that I'm going to use the Discord and I'm going to say if it's failed past and in con",
    "start": "2101800",
    "end": "2109300"
  },
  {
    "text": "oh wow look at that I think it's the first time actually succeeded spelling this word perfect so it's inconclusive now I can",
    "start": "2109300",
    "end": "2116920"
  },
  {
    "text": "fill this with more patterns so I mentioned that well this here is now using the type pattern but maybe I want to be a little bit more granular maybe I",
    "start": "2116920",
    "end": "2123700"
  },
  {
    "text": "want to also check a property so we could say that well if it's failed",
    "start": "2123700",
    "end": "2128800"
  },
  {
    "text": "or rather if it's if it's failed let's just remove this here to make it a",
    "start": "2128800",
    "end": "2135280"
  },
  {
    "text": "little bit easier or I don't care about the type so this here will first of all it will",
    "start": "2135280",
    "end": "2143020"
  },
  {
    "text": "ensure that it sets to an instance and then I can access a property to say well if the number of attempts are more than",
    "start": "2143020",
    "end": "2149800"
  },
  {
    "text": "10 I'm going to consider that you failed this test",
    "start": "2149800",
    "end": "2154839"
  },
  {
    "text": "right so this here not having set passed failed or whatever here this will match",
    "start": "2154839",
    "end": "2161500"
  },
  {
    "text": "on anything where that property is set to to 10. I could also say that well it has to be",
    "start": "2161500",
    "end": "2167920"
  },
  {
    "text": "less than 20 because if you've done this more than more than 20 actually should be less than right less than 10.",
    "start": "2167920",
    "end": "2174820"
  },
  {
    "text": "more than 10 and less than 20. you get the idea if you've done this more than 20 times like I don't care",
    "start": "2174820",
    "end": "2182260"
  },
  {
    "text": "then I don't want to see or you're doing this test again so between 10 and 20. so this is a very",
    "start": "2182260",
    "end": "2188260"
  },
  {
    "text": "easy way for me to construct a way for me to express what I'm looking for like I can do this with an if statement but",
    "start": "2188260",
    "end": "2194619"
  },
  {
    "text": "it gets a little bit easier on the eyes just to look at it like this here now I could also",
    "start": "2194619",
    "end": "2201700"
  },
  {
    "text": "parenthesize this here and this is something that you should",
    "start": "2201700",
    "end": "2206800"
  },
  {
    "text": "probably avoid because what happens if I negate this entire pattern similar to any language feature of C",
    "start": "2206800",
    "end": "2213520"
  },
  {
    "text": "sharp you should avoid abusing the language features and avoid writing code that doesn't make any sense",
    "start": "2213520",
    "end": "2220619"
  },
  {
    "text": "I've seen people abuse pattern matching to instead of saying false for a Boolean",
    "start": "2220780",
    "end": "2225880"
  },
  {
    "text": "they do not true which works but it's just more characters to to say the same thing",
    "start": "2225880",
    "end": "2233440"
  },
  {
    "text": "so now this here is doing two things we have the type pattern it's recursively looking up the next thing because it's",
    "start": "2233440",
    "end": "2239020"
  },
  {
    "text": "an or pattern we're looking at the the property and we're using a relational and pattern",
    "start": "2239020",
    "end": "2245560"
  },
  {
    "text": "so pattern matching in this case here is really powerful now surely enough that's on one object and I can do the same thing I can take",
    "start": "2245560",
    "end": "2252220"
  },
  {
    "text": "this out it doesn't have to be with a switch expression I can say well if if results",
    "start": "2252220",
    "end": "2258660"
  },
  {
    "text": "is results Dot first is",
    "start": "2258660",
    "end": "2265480"
  },
  {
    "text": "there we go I can do that as well I can use it with the if statement I can use it with a switch expression I can use this",
    "start": "2265480",
    "end": "2271300"
  },
  {
    "text": "wherever I want if you want a fancy way of performing a null check",
    "start": "2271300",
    "end": "2277420"
  },
  {
    "text": "you can say well if if I can't even spell if results first",
    "start": "2277420",
    "end": "2285339"
  },
  {
    "text": "is set to an instance that's the same as saying it's not null",
    "start": "2285339",
    "end": "2291099"
  },
  {
    "text": "quite handy all right and now with C sharp 11 what",
    "start": "2291099",
    "end": "2296920"
  },
  {
    "text": "we got is something called a list pattern so we got the normal type patterns checking property values the Tuple",
    "start": "2296920",
    "end": "2304300"
  },
  {
    "text": "patterns and so forth you can use all of that and explore that on your own now but another thing in C sharp 11 is a way",
    "start": "2304300",
    "end": "2310480"
  },
  {
    "text": "for me to look at this array so I've I've produced an array here instead of an i enumerable because it has to be an",
    "start": "2310480",
    "end": "2317020"
  },
  {
    "text": "array in order for me to slice off some information because I'm going to use more than one thing",
    "start": "2317020",
    "end": "2322660"
  },
  {
    "text": "so I could for instance say that well if let's do it uh let's do if results",
    "start": "2322660",
    "end": "2331599"
  },
  {
    "text": "or result is equal to results switch and now I'm going to produce patterns",
    "start": "2332859",
    "end": "2339400"
  },
  {
    "text": "for this if I can spell there we go",
    "start": "2339400",
    "end": "2345640"
  },
  {
    "text": "now I'm going to produce patterns for this array instead and what I can do now is to say well if",
    "start": "2345640",
    "end": "2351099"
  },
  {
    "text": "the first value has failed and I don't care about the rest then I'm going to enter this this",
    "start": "2351099",
    "end": "2358680"
  },
  {
    "text": "get this result right if it's whatever like I don't care I can",
    "start": "2358680",
    "end": "2366220"
  },
  {
    "text": "use a discard again I can also say well if the first one is",
    "start": "2366220",
    "end": "2371560"
  },
  {
    "text": "failed I don't care about the last one but I'd like to get the middle elements",
    "start": "2371560",
    "end": "2377980"
  },
  {
    "text": "so now it skips the first and the last element and I'm getting everything else in the middle so why is this a big thing or a",
    "start": "2377980",
    "end": "2385359"
  },
  {
    "text": "big deal imagine instead of having this made up test results already it could have been the payload coming in from",
    "start": "2385359",
    "end": "2391240"
  },
  {
    "text": "data I know how how long the header is there's a couple of bytes that I'm looking for this here could be the value",
    "start": "2391240",
    "end": "2397300"
  },
  {
    "text": "of those first couple of bytes and then it could be slicing off the information in the middle and if this was a span",
    "start": "2397300",
    "end": "2404740"
  },
  {
    "text": "that would be a very memory efficient way to do that so this was introduced in C sharp 11.",
    "start": "2404740",
    "end": "2412599"
  },
  {
    "text": "so patterns in in C sharp is powerful and I promise that we'll see even more",
    "start": "2412599",
    "end": "2418180"
  },
  {
    "text": "patterns being added in the next versions of c-sharp as well so with C sharp 9 out of the way we can",
    "start": "2418180",
    "end": "2425380"
  },
  {
    "text": "take a look at some more things from C sharp 10. now given that C sharp 9 introduced record that produces",
    "start": "2425380",
    "end": "2431200"
  },
  {
    "text": "reference types and classes obviously it would be a good idea to also allow us to do record structs value types",
    "start": "2431200",
    "end": "2438220"
  },
  {
    "text": "they work similar to to the reference types but by default the record strikes",
    "start": "2438220",
    "end": "2443500"
  },
  {
    "text": "aren't immutable so you have to mark them as read only if you're creating a record struct a little gotcha",
    "start": "2443500",
    "end": "2450880"
  },
  {
    "text": "there's some other improvements there's something called a global using directive so if you add the global keyword in",
    "start": "2450880",
    "end": "2456820"
  },
  {
    "text": "front of your using then it will become available for all your classes in your solution or in your project",
    "start": "2456820",
    "end": "2463420"
  },
  {
    "text": "we saw the file scope namespace declaration and this is a way well and was introduced because of minimal apis",
    "start": "2463420",
    "end": "2470380"
  },
  {
    "text": "minimal apis is a way for you to produce on asp.net core application in a",
    "start": "2470380",
    "end": "2476020"
  },
  {
    "text": "program.cs file with just a couple of lines of code like less than 10 lines of code many of these features are added to",
    "start": "2476020",
    "end": "2483280"
  },
  {
    "text": "cater for that to make it easier for many other developers to to jump in and learn c-sharp and use it for",
    "start": "2483280",
    "end": "2489660"
  },
  {
    "text": "microservices or or Nano services or whatever you want to call the the new cool thing",
    "start": "2489660",
    "end": "2496060"
  },
  {
    "text": "there's an extended property pattern so if I if I were to go back to my solution here and this here's a property pattern",
    "start": "2496060",
    "end": "2502780"
  },
  {
    "text": "if I were to access another thing here let's just say",
    "start": "2502780",
    "end": "2508540"
  },
  {
    "text": "get type for example or if that was let's just say that it had a length",
    "start": "2508540",
    "end": "2514359"
  },
  {
    "text": "if this had the property length it would automatically perform a null check when I do a DOT here which is quite handy so",
    "start": "2514359",
    "end": "2521200"
  },
  {
    "text": "you don't have to do multiple null checks",
    "start": "2521200",
    "end": "2524760"
  },
  {
    "text": "they've improved some some improvements to Lambda Expressions you can do constant interpolated strings which is a",
    "start": "2529180",
    "end": "2534640"
  },
  {
    "text": "tiny feature but still important so imagine you have two constant strings and you want to interpolate that for",
    "start": "2534640",
    "end": "2540099"
  },
  {
    "text": "example in this case the version number you couldn't do this prior to C sharp 10. which was a little bit odd but a more",
    "start": "2540099",
    "end": "2547720"
  },
  {
    "text": "important feature is inferring the delegate type so this is the Improvement to well this isn't the Improvement",
    "start": "2547720",
    "end": "2553960"
  },
  {
    "text": "because this is from C sharp nine but in C sharp nine you were required to specify explicitly which delegate type",
    "start": "2553960",
    "end": "2560500"
  },
  {
    "text": "that you were using so I could say funk string of integer here but instead why couldn't just the",
    "start": "2560500",
    "end": "2567220"
  },
  {
    "text": "compiler figure this out it knows that I'm expecting a string to be passed into this Anonymous method and it knows that",
    "start": "2567220",
    "end": "2573820"
  },
  {
    "text": "I'm returning an integer so why couldn't it just infer that and surely enough that's what C sharp 10",
    "start": "2573820",
    "end": "2580420"
  },
  {
    "text": "is doing so here is an example of a minimal API",
    "start": "2580420",
    "end": "2587319"
  },
  {
    "text": "now the minimal apis is a way for you to create this asp.net core application in",
    "start": "2587319",
    "end": "2593500"
  },
  {
    "text": "a very tiny program.cs file but they've added one feature at a time",
    "start": "2593500",
    "end": "2600220"
  },
  {
    "text": "to the different versions of c-sharp into.net and they constantly improve upon this so with C sharp 9 we got the",
    "start": "2600220",
    "end": "2607119"
  },
  {
    "text": "top level statements which made this possible but now with C sharp 10 they added attributes in Lambda so that we",
    "start": "2607119",
    "end": "2613900"
  },
  {
    "text": "can in this case here I can say that the parameter passed into this get method is",
    "start": "2613900",
    "end": "2619540"
  },
  {
    "text": "coming from a header for example which is quite handy so while C sharp 10",
    "start": "2619540",
    "end": "2624880"
  },
  {
    "text": "didn't introduce groundbreaking features like nullable reference types or record classes it's still quite a lot of tiny",
    "start": "2624880",
    "end": "2632859"
  },
  {
    "text": "changes to cater for the future C sharp 11 on the other hand introduced",
    "start": "2632859",
    "end": "2638560"
  },
  {
    "text": "what I showed you earlier the list patterns and I have another example of this as well what I didn't tell you is that I sliced",
    "start": "2638560",
    "end": "2644859"
  },
  {
    "text": "off a portion using the slice pattern so the patterns introducing C sharp 11 allows you to grab that middle portion",
    "start": "2644859",
    "end": "2651880"
  },
  {
    "text": "of the array and slice it off in a very memory efficient manner you can name of parameter which isn't",
    "start": "2651880",
    "end": "2658599"
  },
  {
    "text": "such a big deal a big deal though is that they're now caching the Delegate for static method",
    "start": "2658599",
    "end": "2664300"
  },
  {
    "text": "groups which is if you've ever run into this this could have caused a performance hit or a performance penalty",
    "start": "2664300",
    "end": "2669339"
  },
  {
    "text": "another finally caching that the required property we're introduced in c-sharp 11 to allow you to now use",
    "start": "2669339",
    "end": "2675880"
  },
  {
    "text": "nullable reference types A little bit better so I can say that this property is now required the compiler in the visual",
    "start": "2675880",
    "end": "2682300"
  },
  {
    "text": "studio will tell you that it's required so that you're when you're creating this instance either with a Constructor or",
    "start": "2682300",
    "end": "2688960"
  },
  {
    "text": "you know with a with expression for example it will tell you that you should do that there's something called a raw string",
    "start": "2688960",
    "end": "2694780"
  },
  {
    "text": "literal static members and interfaces utf-8 string literals everything that's coming",
    "start": "2694780",
    "end": "2700180"
  },
  {
    "text": "over the web is basically utf-8 c-sharp by default is utf-16 so whenever you get",
    "start": "2700180",
    "end": "2706000"
  },
  {
    "text": "a string into your application and you tell your aceput.net.net core endpoint to expect a",
    "start": "2706000",
    "end": "2712480"
  },
  {
    "text": "string it has to convert that into UTF 16 from utf-8 might sound silly but in",
    "start": "2712480",
    "end": "2719319"
  },
  {
    "text": "the grand scheme of things that is a little bit time consuming it requires a couple of CPU Cycles to do so which is",
    "start": "2719319",
    "end": "2726160"
  },
  {
    "text": "not necessarily what you want so instead we can have a utf-8 string literal I can",
    "start": "2726160",
    "end": "2731440"
  },
  {
    "text": "say that I expect this string or I have this constant string in my case here I append the u8 after this ring and now",
    "start": "2731440",
    "end": "2738220"
  },
  {
    "text": "this here is a span of bytes which again is really handy if you're",
    "start": "2738220",
    "end": "2743800"
  },
  {
    "text": "working with interop with Hardware where everything comes in as bytes and you're looking for a particular payload for",
    "start": "2743800",
    "end": "2750280"
  },
  {
    "text": "example I use this extensively so I don't have to convert back and forth to Strings makes the code a little bit more clean",
    "start": "2750280",
    "end": "2757540"
  },
  {
    "text": "there's generic math support generic attribute so I can now say that my class has a generic attribute for example I've",
    "start": "2757540",
    "end": "2765099"
  },
  {
    "text": "wanted this feature since I started with asp.net MVC probably 10 years ago it took a long time to implement maybe",
    "start": "2765099",
    "end": "2772180"
  },
  {
    "text": "it wasn't important earlier but now it is there was something called parameter",
    "start": "2772180",
    "end": "2777220"
  },
  {
    "text": "null checking I don't know if anyone's ever seen this but they removed this from the language so let's go into let's",
    "start": "2777220",
    "end": "2785500"
  },
  {
    "text": "say this method here who is here doesn't matter what it's doing and that's a parameter imagine so they",
    "start": "2785500",
    "end": "2792579"
  },
  {
    "text": "removed this feature imagine if I just did double bangs they had this in a preview version of",
    "start": "2792579",
    "end": "2798640"
  },
  {
    "text": "the compiler they were very sure that they were going to ship this",
    "start": "2798640",
    "end": "2803800"
  },
  {
    "text": "many of the internal teams at Microsoft refactored all their Solutions on GitHub to use this",
    "start": "2803800",
    "end": "2809560"
  },
  {
    "text": "what it did was that it automatically null checked on the parameter so",
    "start": "2809560",
    "end": "2814660"
  },
  {
    "text": "basically what this introduced was an argument null exception throw if null",
    "start": "2814660",
    "end": "2819760"
  },
  {
    "text": "people so this way you can do double bangs",
    "start": "2819760",
    "end": "2824800"
  },
  {
    "text": "instead of having to write that entire code snippet many people didn't like this for the reason that it adds it adds a little bit",
    "start": "2824800",
    "end": "2833020"
  },
  {
    "text": "too much code that's potentially crashing right so this isn't really the best adding double bangs had a much",
    "start": "2833020",
    "end": "2839980"
  },
  {
    "text": "bigger side effect than you might have hoped for so again like if we go into GitHub and",
    "start": "2839980",
    "end": "2846160"
  },
  {
    "text": "participate in the discussions we can influence what they're doing and and why they would want to focus on a feature or",
    "start": "2846160",
    "end": "2853300"
  },
  {
    "text": "why they might not that might not be a good idea so many people reach out and",
    "start": "2853300",
    "end": "2858640"
  },
  {
    "text": "now they remove that so if you've been out of the game and you haven't followed what's happened for the past",
    "start": "2858640",
    "end": "2865240"
  },
  {
    "text": "few years they had to remove that because no one wanted it so the list patterns here's another",
    "start": "2865240",
    "end": "2871900"
  },
  {
    "text": "example of that from c-sharp 11. so I have a list of names here",
    "start": "2871900",
    "end": "2877180"
  },
  {
    "text": "I can now say that well if the first one is Philip I'm going to grab all the middle names and then if the last one",
    "start": "2877180",
    "end": "2883540"
  },
  {
    "text": "matches what I'm looking for I can say that at the second pattern here I can say I don't care about the first one as",
    "start": "2883540",
    "end": "2888880"
  },
  {
    "text": "long as the second one is a particular value and then it also followed by more of them so I can do a lot of interesting",
    "start": "2888880",
    "end": "2895420"
  },
  {
    "text": "things with list patterns with with all the other types of patterns as well and this here uses works with the array as",
    "start": "2895420",
    "end": "2901780"
  },
  {
    "text": "well which is why I can also slice off a portion of of the middle part",
    "start": "2901780",
    "end": "2907599"
  },
  {
    "text": "and I think in C sharp 13 14 15 and how much longer we're going to go we're going to see more patterns added to the",
    "start": "2907599",
    "end": "2913480"
  },
  {
    "text": "language as well which is good now raw spring literals allows us to",
    "start": "2913480",
    "end": "2919359"
  },
  {
    "text": "produce a string here I have a a three double quotes and that allows me to then in this case write XML which also has a",
    "start": "2919359",
    "end": "2927160"
  },
  {
    "text": "capability of doing string interpolation so I can inject my connection string into this into this XML here",
    "start": "2927160",
    "end": "2935140"
  },
  {
    "text": "looks very much like XML literals or whatever you want to call them from from VB",
    "start": "2935140",
    "end": "2940900"
  },
  {
    "text": "but you can write Json and visual studio has syntax highlighting for the code that you write in your rostering literal",
    "start": "2940900",
    "end": "2946780"
  },
  {
    "text": "quite handy so the utf-8 string electorals here's an",
    "start": "2946780",
    "end": "2951880"
  },
  {
    "text": "example of how to take my name and convert that into a read-only spot span",
    "start": "2951880",
    "end": "2957099"
  },
  {
    "text": "of bytes I can then use this payload to say that I want to find the index of",
    "start": "2957099",
    "end": "2963579"
  },
  {
    "text": "the utf-8 space that's a very quick operation to look for it and then I can",
    "start": "2963579",
    "end": "2969280"
  },
  {
    "text": "say I want to at the at line seven here I can say I want to grab my first name so I'm using a a range syntax to say",
    "start": "2969280",
    "end": "2977200"
  },
  {
    "text": "that give me all the characters up until the space and then on the next line on line nine I'm saying jump over the space",
    "start": "2977200",
    "end": "2984160"
  },
  {
    "text": "and give me the rest and what's interesting with this code snippet is that it's pretty much",
    "start": "2984160",
    "end": "2990280"
  },
  {
    "text": "allocation free there's a couple of variables declared on the stack and obviously my name is allocated somewhere",
    "start": "2990280",
    "end": "2996880"
  },
  {
    "text": "but the slicing operation the looking for the index none of that has to copy any data over to another memory position",
    "start": "2996880",
    "end": "3004160"
  },
  {
    "text": "so they've done this extensively in in.net and then asp.net core and the",
    "start": "3004160",
    "end": "3010800"
  },
  {
    "text": "performance is just shooting through the roof because they don't have to copy any memory over",
    "start": "3010800",
    "end": "3016020"
  },
  {
    "text": "there are some God chests with this but you know it's it's a really great way to work with uh with data",
    "start": "3016020",
    "end": "3024260"
  },
  {
    "text": "so abstract members and interfaces was also introduced in c-sharp 11. in this case here I have an interface that",
    "start": "3024839",
    "end": "3030480"
  },
  {
    "text": "dictates that you should have an instance defined on your on your classes but in older versions of c-sharp this",
    "start": "3030480",
    "end": "3037140"
  },
  {
    "text": "didn't really give us a warning or didn't tell me anything much like the default interface implementations it",
    "start": "3037140",
    "end": "3042540"
  },
  {
    "text": "doesn't tell me that I have to add something but if I mark it as abstract",
    "start": "3042540",
    "end": "3047819"
  },
  {
    "text": "with c-sharp 11 this is now going to tell me that the class person here doesn't Implement that particular",
    "start": "3047819",
    "end": "3053599"
  },
  {
    "text": "interface which is a good addition so now with C sharp 8 through 11 out of",
    "start": "3053599",
    "end": "3061680"
  },
  {
    "text": "the way we've looked at some of the really important language features a heavy workload that's been put into",
    "start": "3061680",
    "end": "3068099"
  },
  {
    "text": "doing pattern matching well to get nullable reference types built really well and adding support in the language",
    "start": "3068099",
    "end": "3074220"
  },
  {
    "text": "to to avoid nulls and hopefully we can all agree that it's a good investment in",
    "start": "3074220",
    "end": "3079980"
  },
  {
    "text": "the language and what I think is great about all of these language features added to c-sharp is that most of them",
    "start": "3079980",
    "end": "3086040"
  },
  {
    "text": "feel like they belong in C sharp and that's probably one of the challenges working on the compiler that they have",
    "start": "3086040",
    "end": "3092640"
  },
  {
    "text": "to make sure that it feels like a c-sharp language feature surely they can take inspiration from",
    "start": "3092640",
    "end": "3098520"
  },
  {
    "text": "kotlin Swift Java and many other programming languages but it still has to for a c-sharp developer feel familiar",
    "start": "3098520",
    "end": "3106680"
  },
  {
    "text": "and I believe most of these does so what's next we can jump onto to GitHub",
    "start": "3106680",
    "end": "3111960"
  },
  {
    "text": "and look through all of the different features that are coming but out of experience I know that many",
    "start": "3111960",
    "end": "3117960"
  },
  {
    "text": "of the language features that are talked about and worked upon they might be coming in the next version of like after",
    "start": "3117960",
    "end": "3124800"
  },
  {
    "text": "so we have C sharp 12 coming in in November but I would be surprised if the change",
    "start": "3124800",
    "end": "3131400"
  },
  {
    "text": "that they've released now stays the same like they have to ensure that the tooling is there everything has to work",
    "start": "3131400",
    "end": "3136980"
  },
  {
    "text": "perfectly well and no bugs and and no Community backlash for some of these features",
    "start": "3136980",
    "end": "3142079"
  },
  {
    "text": "but with c-sharp 12 we're going to see some interesting additions",
    "start": "3142079",
    "end": "3148280"
  },
  {
    "text": "so how about we take inspiration from records and introduce something called primary Constructors on classes",
    "start": "3148440",
    "end": "3156059"
  },
  {
    "text": "now if someone's really sharp on the eyes here you'll notice that I haven't written these in upper case",
    "start": "3156059",
    "end": "3163380"
  },
  {
    "text": "so I have my class user and there's a primary Constructor that expects a name and a registration date",
    "start": "3163380",
    "end": "3169619"
  },
  {
    "text": "but with a record I made them uppercase is this a spelling mistake on my hand or is it just that they're different the",
    "start": "3169619",
    "end": "3176700"
  },
  {
    "text": "fact is that they are actually different with a primary Constructor on a class all that's generated here are backing",
    "start": "3176700",
    "end": "3183119"
  },
  {
    "text": "fields so if I fire up IL spy we can see that this here introduced The Constructor",
    "start": "3183119",
    "end": "3189240"
  },
  {
    "text": "and it also introduced the backing fields but with a record it introduced publicly",
    "start": "3189240",
    "end": "3195000"
  },
  {
    "text": "exposed properties that were set to init only but with this we they didn't want to make such a big change to your class",
    "start": "3195000",
    "end": "3202680"
  },
  {
    "text": "or what's generated so you have to add that yourself I mean as you'll see here I can I can access these fields inside",
    "start": "3202680",
    "end": "3209760"
  },
  {
    "text": "my override of two strings so I could just as well have exposed a publicly exposed property and set these to the",
    "start": "3209760",
    "end": "3216119"
  },
  {
    "text": "default value they're also making lambdas a little bit",
    "start": "3216119",
    "end": "3221339"
  },
  {
    "text": "better by introducing something called optional parameters or default Lambda parameters",
    "start": "3221339",
    "end": "3227280"
  },
  {
    "text": "it's a small addition but you know since we're doing a lot of minimal apis and that's the next big thing this is a good",
    "start": "3227280",
    "end": "3233040"
  },
  {
    "text": "addition to it so in this case here I can say that my Lambda has a default parameter and if I call it with or",
    "start": "3233040",
    "end": "3238800"
  },
  {
    "text": "without a particular value that just works so now there's",
    "start": "3238800",
    "end": "3247319"
  },
  {
    "text": "two more features in C sharp 12 that I think are are going to make make the cut there's there's this thing called Alias",
    "start": "3247319",
    "end": "3254339"
  },
  {
    "text": "any type so I could say somewhere in my code file I could say using point is equal to this Tuple or",
    "start": "3254339",
    "end": "3261960"
  },
  {
    "text": "Tuple depending on how you like to pronounce that so if it's the first time you see a tuple",
    "start": "3261960",
    "end": "3268140"
  },
  {
    "text": "this here creates a value toppled behind the scenes with which has two Fields a",
    "start": "3268140",
    "end": "3273720"
  },
  {
    "text": "field X and field y but instead of having to create a wrapper structure wrapper class I can",
    "start": "3273720",
    "end": "3279540"
  },
  {
    "text": "simply say whenever I refer to a point that's going to then use my my topple",
    "start": "3279540",
    "end": "3285540"
  },
  {
    "text": "which is great and if I append the global keyword in front of that it's going to be globally",
    "start": "3285540",
    "end": "3290640"
  },
  {
    "text": "available for my entire project that's why I didn't have to do anything inside my my program.cs file to use Link",
    "start": "3290640",
    "end": "3298380"
  },
  {
    "text": "for example because they are inferring where the namespaces are coming from and they're doing a lot of that compiler",
    "start": "3298380",
    "end": "3305160"
  },
  {
    "text": "magic that we love behind the scenes another feature that are is possibly",
    "start": "3305160",
    "end": "3312000"
  },
  {
    "text": "coming to C sharp 12 it's something called interceptors which is also an inspiration from other",
    "start": "3312000",
    "end": "3317040"
  },
  {
    "text": "programming languages like Objective C for example has had this for a very long time imagine that I have this little code",
    "start": "3317040",
    "end": "3323400"
  },
  {
    "text": "snippet here super simple class called a logger which has a publicly exposed method called log which takes a message",
    "start": "3323400",
    "end": "3329940"
  },
  {
    "text": "it then calls an internal method which is simply throwing an exception",
    "start": "3329940",
    "end": "3336000"
  },
  {
    "text": "now I'd like to intercept this method call I'd like to intercept what happens when you call log internal so what I can",
    "start": "3336000",
    "end": "3343800"
  },
  {
    "text": "do is that I can create something called an interceptor simply apply an attribute called",
    "start": "3343800",
    "end": "3349260"
  },
  {
    "text": "intercept location in this case and in this state of this language feature I have to know the line inside this file",
    "start": "3349260",
    "end": "3356520"
  },
  {
    "text": "so line number five I have to also know the column or or how many characters in",
    "start": "3356520",
    "end": "3361619"
  },
  {
    "text": "that method signature starts but I can write code that figures this out for me and then what I'm doing is that I'm",
    "start": "3361619",
    "end": "3367920"
  },
  {
    "text": "intercepting this using my console.writeline code snippet that I have here so it takes the class of",
    "start": "3367920",
    "end": "3374099"
  },
  {
    "text": "logger it takes the same parameter called a message as an input and then I can use this",
    "start": "3374099",
    "end": "3380040"
  },
  {
    "text": "so the interesting thing with this imagine that I pulled down a nuget package and it just magically intercepts some of",
    "start": "3380040",
    "end": "3387240"
  },
  {
    "text": "my method calls without me having to know about it sounds dangerous but it's probably not",
    "start": "3387240",
    "end": "3392579"
  },
  {
    "text": "you can very easily say which kind of of interceptors you allow in your",
    "start": "3392579",
    "end": "3398160"
  },
  {
    "text": "application so there's no really not really any security concerns but it's interesting because this here",
    "start": "3398160",
    "end": "3404760"
  },
  {
    "text": "now allows me to intercept this call and and do other things so with Source generators and interceptors I can use",
    "start": "3404760",
    "end": "3411119"
  },
  {
    "text": "this to replace functionality or add functionality quite easily",
    "start": "3411119",
    "end": "3416160"
  },
  {
    "text": "and I do have one more feature I want to show you I'll have to jump over to visual studio and hopefully it's still",
    "start": "3416160",
    "end": "3422339"
  },
  {
    "text": "there there's this thing called a collection expression I'm almost out of time so",
    "start": "3422339",
    "end": "3428940"
  },
  {
    "text": "I'll show you this quite quickly so here I've constructed an integer array of with data and an innumerable of integer",
    "start": "3428940",
    "end": "3436380"
  },
  {
    "text": "I'd like to concatenate these two together previously you had to write a little bit",
    "start": "3436380",
    "end": "3442980"
  },
  {
    "text": "of a particular code to do this create a temporary list add all the elements or use Link to produce this now I can use a",
    "start": "3442980",
    "end": "3449520"
  },
  {
    "text": "collection expression to say hey I want to grab everything from data and",
    "start": "3449520",
    "end": "3454740"
  },
  {
    "text": "everything for more data and just create me a new collection and this now produces",
    "start": "3454740",
    "end": "3460619"
  },
  {
    "text": "if I run this here that should produce uh one through ten so as you'll see here",
    "start": "3460619",
    "end": "3467220"
  },
  {
    "text": "it prints one to ten because I took all the data one through six and seven to",
    "start": "3467220",
    "end": "3472980"
  },
  {
    "text": "ten and put them together in one array so just a little bit of a shorthand way of writing something that's that's quite",
    "start": "3472980",
    "end": "3480119"
  },
  {
    "text": "nice so with these features being added to C sharp 12 there's there's quite a lot",
    "start": "3480119",
    "end": "3486300"
  },
  {
    "text": "happening happening to C sharp it can be quite tricky to keep up I've got a lot",
    "start": "3486300",
    "end": "3491339"
  },
  {
    "text": "of courses on pluralsight that I'll have to go back and update with some of these really new interesting language features",
    "start": "3491339",
    "end": "3497280"
  },
  {
    "text": "but if you like my stuff you can always check out my course on plural side and it's interesting because I I always end",
    "start": "3497280",
    "end": "3503880"
  },
  {
    "text": "with the slides and I tell people to hey send me an email if you have any questions and and for the past 10 years",
    "start": "3503880",
    "end": "3509160"
  },
  {
    "text": "like I've never got any emails do you know why because I forgot to put",
    "start": "3509160",
    "end": "3514500"
  },
  {
    "text": "my email on the slide not the best thing so now my email is here take a photo of that if you want to",
    "start": "3514500",
    "end": "3520380"
  },
  {
    "text": "I'm happy to discuss everything around c-sharp and what's happening with dotnet performance there's a lot happening and",
    "start": "3520380",
    "end": "3527819"
  },
  {
    "text": "I just love talking about these different things I hope you've enjoyed this and the conference remember to vote",
    "start": "3527819",
    "end": "3533819"
  },
  {
    "text": "on your way out and thank you so much for for spending this hour with me [Applause]",
    "start": "3533819",
    "end": "3542909"
  }
]