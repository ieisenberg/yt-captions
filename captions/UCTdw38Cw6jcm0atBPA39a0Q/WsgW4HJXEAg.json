[
  {
    "start": "0",
    "end": "280000"
  },
  {
    "text": "okay thank you my 30 second rule was um you know",
    "start": "8240",
    "end": "14320"
  },
  {
    "text": "like you don't watch the first 30 seconds of any talk because it's like f nothing interesting so you just skip the",
    "start": "14320",
    "end": "20680"
  },
  {
    "text": "first 30 30 seconds and you're still good you have the talk um my rule was to",
    "start": "20680",
    "end": "27599"
  },
  {
    "text": "make the 30 seconds the most interesting of the talk by starting with a bang but all this",
    "start": "27599",
    "end": "32800"
  },
  {
    "text": "microphone thing kind of messed that up so there goes the plan um I'm going to talk about just change the title a bit",
    "start": "32800",
    "end": "40200"
  },
  {
    "text": "uh because yeah kind of UNS you know unexpectedly success whatever so I'm going to tell you three stories related",
    "start": "40200",
    "end": "47160"
  },
  {
    "text": "to the D language that I think are just very interesting uh to Wi I have like you",
    "start": "47160",
    "end": "53280"
  },
  {
    "text": "know um kind of half a dozen folks in the audience which is Awesome by this uh by this conferen standard this is not a",
    "start": "53280",
    "end": "60079"
  },
  {
    "text": "this is not a languages conference um I'm very happy you came I hope nobody's going to leave before it's like oh I",
    "start": "60079",
    "end": "66360"
  },
  {
    "text": "can't put up with this anymore so um I'm going to uh give a bit of introduction what the D programing language is all",
    "start": "66360",
    "end": "73200"
  },
  {
    "text": "about and then I'm going to um uh give you like a few anecdotes about it that I",
    "start": "73200",
    "end": "78640"
  },
  {
    "text": "think are just interesting in general not related to the D language in particular or even to any language",
    "start": "78640",
    "end": "84560"
  },
  {
    "text": "they're kind of uh uh kind of you know telling about program psychology",
    "start": "84560",
    "end": "90320"
  },
  {
    "text": "so uh let me bring to uh your attention a company called the red",
    "start": "90320",
    "end": "96399"
  },
  {
    "text": "telephone company and it was a company developing itself in",
    "start": "96399",
    "end": "102640"
  },
  {
    "text": "Australia in the 60s and 70s and um they had this like you know",
    "start": "102640",
    "end": "110360"
  },
  {
    "text": "um their typical phone was literally red and they had going and they had a brand",
    "start": "110360",
    "end": "116240"
  },
  {
    "text": "it was a nice it was a nice company and they would uh uh they would do good business there until some regulation",
    "start": "116240",
    "end": "124680"
  },
  {
    "text": "changed and the way the regulation changed was the um U the",
    "start": "124680",
    "end": "131920"
  },
  {
    "text": "competition and sort of the the way the phone regulation worked at that time impose that there's a constant cost per",
    "start": "131920",
    "end": "140000"
  },
  {
    "text": "talk not per minute so you would as a as a subscriber",
    "start": "140000",
    "end": "145160"
  },
  {
    "text": "to a phone company you would pay the same amount of money whether you talk for a minute or 10 or half an hour okay",
    "start": "145160",
    "end": "153040"
  },
  {
    "text": "um so that was a problem for their particular cost model which was they would pay the provider of cable whatever they would pay by the minute so um the",
    "start": "153040",
    "end": "161440"
  },
  {
    "text": "year was like 19971 and they were looking desperately for a solution to that",
    "start": "161440",
    "end": "166760"
  },
  {
    "text": "problem and you know how do we make our customers talk",
    "start": "166760",
    "end": "172319"
  },
  {
    "text": "less which is kind of an interesting problem to think about because you know what would you do like you know ideas",
    "start": "172319",
    "end": "178840"
  },
  {
    "text": "please from the vast audience in this room yes sorry stop the stop the yeah",
    "start": "178840",
    "end": "185920"
  },
  {
    "text": "break the call and then of course you're going to have the risk of losing customers if you kept on doing that so that was not a very good solution but",
    "start": "185920",
    "end": "192920"
  },
  {
    "text": "definitely it's one one of the things you may think about as a possible solution what other ideas do do you guys",
    "start": "192920",
    "end": "203640"
  },
  {
    "text": "yes make the phone call what oh yeah so kind of make the phone",
    "start": "204200",
    "end": "210080"
  },
  {
    "text": "call of poor quality so people get tired of of that so that was that's actually very interesting it's a kind of it's a",
    "start": "210080",
    "end": "217080"
  },
  {
    "text": "it's very telling that you came up with this idea because it's actually related to what they end up ended up doing so",
    "start": "217080",
    "end": "223120"
  },
  {
    "text": "they brought a consultant and the guy said you know what make the phone the handset",
    "start": "223120",
    "end": "234239"
  },
  {
    "text": "heavier so they put like a piece of lead in the handset I'm not kidding so they",
    "start": "236120",
    "end": "242360"
  },
  {
    "text": "put like they made the handset heavier and people would like talk for a while and they're like ah you know what I'm tired like ah I'll talk to you",
    "start": "242360",
    "end": "248840"
  },
  {
    "text": "tomorrow right because it's just starting to hold so that was very successful and it kind of prolonged the",
    "start": "248840",
    "end": "254400"
  },
  {
    "text": "lifetime of that company and and then it was acquired etc etc but it was a very nice idea coming from a completely",
    "start": "254400",
    "end": "261000"
  },
  {
    "text": "unexpected angle and uh ultimately realizing uh the the the goal so my",
    "start": "261000",
    "end": "267440"
  },
  {
    "text": "purpose here is to tell you three similar stories and you know my hope is that by",
    "start": "267440",
    "end": "274039"
  },
  {
    "text": "the end of of this talk you're going to be like oh yeah so that was kind of an interesting segue into these three",
    "start": "274039",
    "end": "280320"
  },
  {
    "start": "280000",
    "end": "280000"
  },
  {
    "text": "stories awesome so um let me talk a bit about the uh in sort of in a in a general sense so systems level",
    "start": "280320",
    "end": "288000"
  },
  {
    "text": "programming are still a necessity um there's quite a few application categories with what people call like if",
    "start": "288000",
    "end": "294880"
  },
  {
    "text": "if I were an economist I would say elastic demand for performance so what does you mean like elastic demand for",
    "start": "294880",
    "end": "301240"
  },
  {
    "text": "performance who knows like who's been who's been doing economics in college",
    "start": "301240",
    "end": "306440"
  },
  {
    "text": "nobody okay great I'm very happy me neither but I happen to know this term which is elastic demand means the more",
    "start": "306440",
    "end": "313680"
  },
  {
    "text": "you have the more you want right like you know to some extent what can you",
    "start": "313680",
    "end": "319919"
  },
  {
    "text": "think of that is has elastic demand drugs awesome that's a good one",
    "start": "319919",
    "end": "327000"
  },
  {
    "text": "so I hope the camera is not going to see who that guy was um but well something okay something",
    "start": "327000",
    "end": "333639"
  },
  {
    "text": "of more of a staple that would would have a elastic demand uh to some extent",
    "start": "333639",
    "end": "338680"
  },
  {
    "text": "actually food uh kind of the big food companies have shown that demand for food is a bit elastic in the sense that",
    "start": "338680",
    "end": "345720"
  },
  {
    "text": "they keep on increasing those Coca-Cola like uh glass cups right um but for",
    "start": "345720",
    "end": "351800"
  },
  {
    "text": "example taxi rides the cheaper it gets the more you ride and that's what that's that's Uber",
    "start": "351800",
    "end": "359720"
  },
  {
    "text": "like uber was successful because they figured that out it's amazing so they figure out people are not going to stop",
    "start": "359720",
    "end": "365199"
  },
  {
    "text": "using cabs if they get less and less experience they oh they're going to use more and more cabs which is",
    "start": "365199",
    "end": "370880"
  },
  {
    "text": "amazing now there's a there are quite a few domains in our realm in Computing",
    "start": "370880",
    "end": "376520"
  },
  {
    "text": "where the demand for performance is elastic can you give me examples",
    "start": "376520",
    "end": "382240"
  },
  {
    "text": "Sean Photoshop thank you very much genius yes I bow to you so of course in",
    "start": "382240",
    "end": "388880"
  },
  {
    "text": "Photoshop you have task you you you mentioned there's one particular task that took 8 minutes to complete and in",
    "start": "388880",
    "end": "394720"
  },
  {
    "text": "all likelihood it you know the there's an iteration going on so people wanted to do continue doing other things after",
    "start": "394720",
    "end": "400960"
  },
  {
    "text": "the 8 minutes have passed so if you reduce those 8 minutes to 642 that would be a very uh significant",
    "start": "400960",
    "end": "408000"
  },
  {
    "text": "increase of productivity so and there there's actually literally no limit to how much you want to uh crank up that",
    "start": "408000",
    "end": "415039"
  },
  {
    "text": "computation because then you get to do a lot more things with Photoshop uh other",
    "start": "415039",
    "end": "420080"
  },
  {
    "text": "um other applications other domains in which there's not enough power I",
    "start": "420080",
    "end": "426919"
  },
  {
    "text": "can Graphics yes so that would be related yes animation what have you yes",
    "start": "426919",
    "end": "432400"
  },
  {
    "text": "I mean yes Broadband Broadband the more you get the more you want definitely and actually you know there may be a",
    "start": "432400",
    "end": "438479"
  },
  {
    "text": "saturation point I'm thinking like to me like uh resolution like you know 5K how",
    "start": "438479",
    "end": "444879"
  },
  {
    "text": "much more do you want so probably there's kind of an eye limit there but then you want low latency so yeah indeed",
    "start": "444879",
    "end": "450919"
  },
  {
    "text": "um but there would be like more money-making kind of alternative kind of things oh come on huh memory memory no",
    "start": "450919",
    "end": "459639"
  },
  {
    "text": "in Computing what algorithms what kind of domains of uh Computing what applications of computers have this",
    "start": "459639",
    "end": "466639"
  },
  {
    "text": "elastic demand for performance I was saying money making trading money money you know market",
    "start": "466639",
    "end": "474440"
  },
  {
    "text": "analysis I mean here's the thing when the market closes a lot of compan have",
    "start": "474440",
    "end": "480159"
  },
  {
    "text": "until the open the market next day to crunch numbers and the more numbers you",
    "start": "480159",
    "end": "485199"
  },
  {
    "text": "get to Crunch the better models you have and it's like the relationship is clear there's no limit to how much you can do",
    "start": "485199",
    "end": "492520"
  },
  {
    "text": "um there'll be like uh a lot of other um applications um uh such as um like",
    "start": "492520",
    "end": "500520"
  },
  {
    "text": "pretty much any like compilation speed like if you use C++ there's there's no",
    "start": "500520",
    "end": "506000"
  },
  {
    "text": "limit to how much speed you want in compilation because it's so terrible to start with with um all right so then we",
    "start": "506000",
    "end": "513039"
  },
  {
    "text": "have um this one Tendencies like you know we have U assistance level program",
    "start": "513039",
    "end": "518719"
  },
  {
    "text": "is still necessary because of this elastic performance demand and then we have um evergrain modeling need so we",
    "start": "518719",
    "end": "525800"
  },
  {
    "text": "not we don't want only like Fast applications we also want larger and",
    "start": "525800",
    "end": "531120"
  },
  {
    "text": "more uh complex applications to develop and um for a for a language that",
    "start": "531120",
    "end": "538360"
  },
  {
    "text": "uh uh that is assistance you want to kind of keep all in the same language as opposed to string across multiple",
    "start": "538360",
    "end": "544000"
  },
  {
    "text": "language uh languages and um the alternatives to D are missing for one or",
    "start": "544000",
    "end": "549399"
  },
  {
    "text": "more of fast compilation fast generated code which is a complete different matter modularity of",
    "start": "549399",
    "end": "556920"
  },
  {
    "text": "code uh expressive power enabling parad paradigms and safety so if you look at",
    "start": "556920",
    "end": "562519"
  },
  {
    "text": "uh the landscape of of systems program languages or program language in general you're going to find that some are going",
    "start": "562519",
    "end": "569079"
  },
  {
    "text": "to fill fulfill some of these points but not others uh for",
    "start": "569079",
    "end": "574440"
  },
  {
    "text": "example um you know a common friend uh C++ which of these it doesn't quite",
    "start": "574440",
    "end": "580600"
  },
  {
    "text": "fulfill and which does it very well at uh fast",
    "start": "580600",
    "end": "586880"
  },
  {
    "text": "compilation I'm seeing like nopes uh speed of generated code awesome like really nice right so",
    "start": "586880",
    "end": "594959"
  },
  {
    "text": "here's like modularity I'm kind of translating for the camera",
    "start": "594959",
    "end": "602120"
  },
  {
    "text": "the the body language I'm getting from the vast audience here um so majority",
    "start": "602120",
    "end": "607399"
  },
  {
    "text": "has like a number of things to it one of them being like the compilation model is",
    "start": "607399",
    "end": "612959"
  },
  {
    "text": "against modularity for the you know that pound include model which kind of exposes everything and this white box uh",
    "start": "612959",
    "end": "619240"
  },
  {
    "text": "boxing of files and that kind of stuff so you know there's multiple aspects to modularity and C+ has quite a few issues",
    "start": "619240",
    "end": "625640"
  },
  {
    "text": "there uh expressive powers and uh enabled paradigms C C++ pretty good pretty good not bad at",
    "start": "625640",
    "end": "632839"
  },
  {
    "text": "all compared to like a lot of the competition uh",
    "start": "632839",
    "end": "637880"
  },
  {
    "text": "safety you're being very nice there I mean come on right you're being super nice okay so all right so there are",
    "start": "638279",
    "end": "646040"
  },
  {
    "text": "other languages such as rust which comes with from the safety angle and but kind of the fast mod fast compilation",
    "start": "646040",
    "end": "652120"
  },
  {
    "text": "expressive power kind of just squeaks at all right great so we're looking uh we're looking um with D4 Lang that would",
    "start": "652120",
    "end": "659880"
  },
  {
    "text": "kind of light up these uh these basic uh these fundamental",
    "start": "659880",
    "end": "664959"
  },
  {
    "text": "requirements and uh my personal story goes the following way as some of you",
    "start": "664959",
    "end": "670320"
  },
  {
    "start": "665000",
    "end": "665000"
  },
  {
    "text": "may know I'm a big U kind of C+ pundit from years back and I'm I've been coming",
    "start": "670320",
    "end": "676480"
  },
  {
    "text": "from that from that uh from that angle so I was very happy that c has good modeling capabilities as an efficient um",
    "start": "676480",
    "end": "684360"
  },
  {
    "text": "underpinning um very nice again the whole C memory model and kind of Paradigm was uh is very nice the problem",
    "start": "684360",
    "end": "691519"
  },
  {
    "text": "I I'm kind of found like for example the metod programming C++ even though it",
    "start": "691519",
    "end": "696600"
  },
  {
    "text": "does things that at the time were like pretty awesome it's very Arcane for example there's no if during",
    "start": "696600",
    "end": "704560"
  },
  {
    "text": "compilation and I picture this you're using any language and they say whenever you need an if you need to call a",
    "start": "704920",
    "end": "710320"
  },
  {
    "text": "different function it you would say please don't do this to me because I have a life to",
    "start": "710320",
    "end": "717279"
  },
  {
    "text": "tend to so no you don't want that you don't want to recurse or overload or kind of go somewhere else whenever you",
    "start": "717279",
    "end": "723279"
  },
  {
    "text": "need to do a a branch in your program like if is sort of the most basic thing you may want to want as a facility in a",
    "start": "723279",
    "end": "729920"
  },
  {
    "text": "language unfortunately for compiled time C+ there's no there is no such",
    "start": "729920",
    "end": "736199"
  },
  {
    "text": "thing um and you have this led to a phenomenon because of the AR Arcana involved in in doing meta programming",
    "start": "736199",
    "end": "742480"
  },
  {
    "text": "C++ it led to this like not use a serviceable library such as good portions of the Boost Library like you",
    "start": "742480",
    "end": "749440"
  },
  {
    "text": "know essentially inscrutable from user perspective you have no idea I've um I've had quite a few experiences with",
    "start": "749440",
    "end": "755000"
  },
  {
    "text": "Boost where I'm like where is work being so I'm having a problem I want to look at the source code to see where the how",
    "start": "755000",
    "end": "761279"
  },
  {
    "text": "hard can it be how difficult can it be to say I'm using this Library it has the",
    "start": "761279",
    "end": "766880"
  },
  {
    "text": "source available all I need to do is look where the source the work is being done so I can figure out what's",
    "start": "766880",
    "end": "773399"
  },
  {
    "text": "happening well yeah I'm seeing this oh oh my God so I'm kind of again I'm doing for the camera unsuccessfully your",
    "start": "773399",
    "end": "780959"
  },
  {
    "text": "beautiful face here um so you know this and there's this whole um uh what's the",
    "start": "780959",
    "end": "789320"
  },
  {
    "text": "word like Scaffolding in boost that you look at and you go through and you have no idea",
    "start": "789320",
    "end": "795160"
  },
  {
    "text": "where the work is being done because the lies of code that actually do work are very",
    "start": "795160",
    "end": "801480"
  },
  {
    "text": "few uh by by sheer numbers by as a fraction of the the total code because all it's all like you know redirection",
    "start": "801480",
    "end": "807959"
  },
  {
    "text": "and templates and you know that stuff so um I didn't like that I didn't like that C++ say poor introspection which I I",
    "start": "807959",
    "end": "815120"
  },
  {
    "text": "think introspection is one of the fundamental things that allow you to write good and fast",
    "start": "815120",
    "end": "821240"
  },
  {
    "text": "software uh introspection meaning you you have like code and you get to actually inspect the code and see you",
    "start": "821240",
    "end": "828720"
  },
  {
    "text": "know uh how many what are your methods you look at the St class say what are",
    "start": "828720",
    "end": "834199"
  },
  {
    "text": "methods enumerate the methods for me please so I can see them by name and what argument they take Etc and all of",
    "start": "834199",
    "end": "840920"
  },
  {
    "text": "this should be done during compilation so you can use the object hey feel so um",
    "start": "840920",
    "end": "846360"
  },
  {
    "text": "and the compilation model is Impractical uh we have a whole um uh team at",
    "start": "846360",
    "end": "851839"
  },
  {
    "text": "Facebook of which I was a part of for a while which you know it was a full team",
    "start": "851839",
    "end": "857959"
  },
  {
    "text": "of good engineers and me plus me right uh who",
    "start": "857959",
    "end": "864120"
  },
  {
    "text": "had as the only task like make builds work in C++ there a parallel system",
    "start": "864120",
    "end": "870800"
  },
  {
    "text": "thousands of machines dedicated to making all the engineers in the at Facebook right C++ code and build it",
    "start": "870800",
    "end": "876800"
  },
  {
    "text": "fast it had a lot of caching going on there's a lot there's a lot of engineering that went into that parallel",
    "start": "876800",
    "end": "882519"
  },
  {
    "text": "build system simply because the model of compilation you start with in C plusus",
    "start": "882519",
    "end": "887560"
  },
  {
    "text": "is bankrupt it's it's terrible it's it's a actually it's it's an amazing fit of",
    "start": "887560",
    "end": "893240"
  },
  {
    "text": "technology that hello world works and so many things happen if you just pre-process hello world do you know how",
    "start": "893240",
    "end": "899440"
  },
  {
    "text": "many lines you get huh 90,000 depends like I got 55",
    "start": "899440",
    "end": "904880"
  },
  {
    "text": "57,000 with clang which is awesome it's very little but it's like a feliner and you look at the compile has",
    "start": "904880",
    "end": "911959"
  },
  {
    "text": "has rumage through um tens of thousands of line megabytes of code to get to the",
    "start": "911959",
    "end": "918279"
  },
  {
    "text": "point where actually generates an object file and you an Arcane format it to itself that's a diff kind of a whole",
    "start": "918279",
    "end": "925000"
  },
  {
    "text": "different problem and then it gets linked with another Arcane format and then it gets in exec that actually works",
    "start": "925000",
    "end": "930800"
  },
  {
    "text": "the the fact that that whole pipeline even works is an amazing fit of",
    "start": "930800",
    "end": "937440"
  },
  {
    "text": "engineering congratulations we're amazing I mean the sheer fact that we got this to work is",
    "start": "937440",
    "end": "944360"
  },
  {
    "text": "fantastic all right so okay um and then I kind of concluded as a COR to these",
    "start": "944360",
    "end": "951279"
  },
  {
    "text": "issues I was having I was trying to express these uh difficult meta programs in C++ and I figured out actually uh",
    "start": "951279",
    "end": "958600"
  },
  {
    "text": "what I getting his modest results with disproportionate effort so there's kind of this um uh this misalignment between",
    "start": "958600",
    "end": "966880"
  },
  {
    "text": "what you put in it and what you get so I was not happy with that so I you know I said you know let me uh let me actually",
    "start": "966880",
    "end": "973639"
  },
  {
    "text": "uh try uh this other language and work on it and improve it so the principles of of D are we want",
    "start": "973639",
    "end": "982120"
  },
  {
    "text": "to leave no room below so you don't need to escape into a different language to do performance work which makes sense um",
    "start": "982120",
    "end": "989120"
  },
  {
    "text": "it's multi Paradigm and balanced it's practical and principal and aoid Arcana",
    "start": "989120",
    "end": "995680"
  },
  {
    "text": "and why would you want to look at it well the party line is three things",
    "start": "995680",
    "end": "1001279"
  },
  {
    "text": "convenience modeling power and efficiency which again are difficult to find together they're easy to find like",
    "start": "1001279",
    "end": "1007480"
  },
  {
    "text": "two of them are easy to find in other languages the actual reasons I've been discussing with people are actually what",
    "start": "1007480",
    "end": "1014560"
  },
  {
    "text": "I like is that it compiles quickly and produces fast binaries so that's what that was on that a lot of people",
    "start": "1014560",
    "end": "1020480"
  },
  {
    "text": "appreciate uh it's easier to get into than other languages and it's fun to work in so the",
    "start": "1020480",
    "end": "1027038"
  },
  {
    "text": "fun factor is definitely there so it's not it's not something negligible you know the fact that uh the language is",
    "start": "1027039",
    "end": "1033400"
  },
  {
    "text": "fun to work with is definitely a good sign why not why don't you want to get I",
    "start": "1033400",
    "end": "1038480"
  },
  {
    "text": "mean every language proponent has got to have the slide if a language if a program",
    "start": "1038480",
    "end": "1044480"
  },
  {
    "text": "language has only pluses and or minuses that's a lie it that can't be right so",
    "start": "1044480",
    "end": "1050559"
  },
  {
    "text": "definitely there's minuses there's no party line to why you shouldn't use the right that's why I left an empty bullet",
    "start": "1050559",
    "end": "1057000"
  },
  {
    "text": "there right um and uh the actual reasons I uh heard from people was actually",
    "start": "1057000",
    "end": "1062840"
  },
  {
    "text": "these Pon formal specification uh it's unclear you know it's not very well defined uh there's little corporate",
    "start": "1062840",
    "end": "1069679"
  },
  {
    "text": "pickup and support there are only a handful of large companies using the at the moment um along with larger but not",
    "start": "1069679",
    "end": "1077280"
  },
  {
    "text": "huge um sort of grass Community I would estimate that um the user base of of",
    "start": "1077280",
    "end": "1083520"
  },
  {
    "text": "these couple of world of magnitude behind the likes of java CN C++ which is",
    "start": "1083520",
    "end": "1089559"
  },
  {
    "text": "still a lot of folks but it's it's not as as huge as as the consecrated",
    "start": "1089559",
    "end": "1094679"
  },
  {
    "text": "languages uh not many libraries it's a large language to learn",
    "start": "1094679",
    "end": "1099840"
  },
  {
    "text": "now first anecdote from Turtles to dependency",
    "start": "1099840",
    "end": "1105360"
  },
  {
    "text": "caring code all right who knows the the joke with the turtles turtles all the way",
    "start": "1105360",
    "end": "1112320"
  },
  {
    "text": "down tell it to us actually I'm going to tell you because I have the microphone it's",
    "start": "1112320",
    "end": "1118039"
  },
  {
    "text": "difficult yeah so the way it goes I I need to repeat everything you say so the the joke goes",
    "start": "1118039",
    "end": "1124360"
  },
  {
    "text": "um phys a scientist gives a talk a phys physicist right gives a talk at kind of",
    "start": "1124360",
    "end": "1130799"
  },
  {
    "text": "layman audience and gives a talk about universe and physics and you know kind of planet whatever kind of big things",
    "start": "1130799",
    "end": "1136880"
  },
  {
    "text": "astronomy whatnot um and the you know talk there's this old lady coming to him and says oh you're all wrong young man",
    "start": "1136880",
    "end": "1143320"
  },
  {
    "text": "you got it wrong the whole universe sits on on a turtle on the back of a",
    "start": "1143320",
    "end": "1149600"
  },
  {
    "text": "turtle and the guy says okay so I have some I have a fun conversation ahead of me the the scientist thinks so he says",
    "start": "1149600",
    "end": "1157400"
  },
  {
    "text": "well what's that turtle sitting on oh it's a different it's another",
    "start": "1157400",
    "end": "1162679"
  },
  {
    "text": "turtle and uh the guy say how about the other turt and the old lady says Ah you're trying to fool me young man it",
    "start": "1162679",
    "end": "1169000"
  },
  {
    "text": "startles all the way down so she had this nice infinite regression in going",
    "start": "1169000",
    "end": "1174240"
  },
  {
    "text": "on in her mind so that's uh the story with the total soil going going all down is a good examples of what's called",
    "start": "1174240",
    "end": "1181880"
  },
  {
    "text": "infinite regression uh in science and it it's one of those things that kind of go like",
    "start": "1181880",
    "end": "1188400"
  },
  {
    "text": "fractally all the way down and um I'm going to show you an example of using",
    "start": "1188400",
    "end": "1193760"
  },
  {
    "text": "this principle in programming language design and I'm going to take that to",
    "start": "1193760",
    "end": "1199159"
  },
  {
    "text": "dependency car and code and I'm going to Define that so let's start with Hello World okay um so hello world has um I",
    "start": "1199159",
    "end": "1208360"
  },
  {
    "text": "put like a scripting line there so you can actually use run it like a script with a shebang line and everything uh",
    "start": "1208360",
    "end": "1215120"
  },
  {
    "text": "very nice has an import which is you can imagine it's like pretty much like in Python like pound include in in C++ or",
    "start": "1215120",
    "end": "1221840"
  },
  {
    "text": "what have you um or in Java and any other C whatever and we have a program",
    "start": "1221840",
    "end": "1227200"
  },
  {
    "text": "that's void man and does the right line and just that's pretty much the program and um well there is a few",
    "start": "1227200",
    "end": "1235120"
  },
  {
    "text": "questions why didn't you import for everything why don't I have just one liner that does it all for me there are",
    "start": "1235120",
    "end": "1240440"
  },
  {
    "text": "answers to that um but I don't want to focus on that I want to focus on something different which is a slight",
    "start": "1240440",
    "end": "1247240"
  },
  {
    "text": "change to this program which goes this way what is the",
    "start": "1247240",
    "end": "1253799"
  },
  {
    "start": "1249000",
    "end": "1249000"
  },
  {
    "text": "change I oh yeah I push the I push the import inside the main function so I",
    "start": "1254520",
    "end": "1261080"
  },
  {
    "text": "kind of made like kind of sort of a file inclusion or whatever Library whatever the hell lookup thing I put the library",
    "start": "1261080",
    "end": "1268640"
  },
  {
    "text": "use inside the place where it's used which is odd I mean if you do this in",
    "start": "1268640",
    "end": "1275559"
  },
  {
    "text": "C kind of a pound include inside of function it may actually almost",
    "start": "1275559",
    "end": "1281080"
  },
  {
    "text": "work but you you would not be up for promotion after the next review cycle at",
    "start": "1281080",
    "end": "1286440"
  },
  {
    "text": "your employer this is not going to push your career forward my friends right it's Pond included inside of function is",
    "start": "1286440",
    "end": "1292600"
  },
  {
    "text": "a no no in C and C++ gets even weirder see it actually can make a lot of things",
    "start": "1292600",
    "end": "1298159"
  },
  {
    "text": "work if you pound include inside a function among which uh structs are non local can you define a struct inside of",
    "start": "1298159",
    "end": "1305200"
  },
  {
    "text": "scope in C you can but not in C++ because you count it's different it's a the",
    "start": "1305200",
    "end": "1311240"
  },
  {
    "text": "whole huh yeah you can but there are different semantics what I'm saying right as",
    "start": "1311240",
    "end": "1317080"
  },
  {
    "text": "opposed to because usually when you include something is you include for linking purposes so then the whole",
    "start": "1317080",
    "end": "1322520"
  },
  {
    "text": "symbol mangling is going to be different all right all right um awesome",
    "start": "1322520",
    "end": "1330520"
  },
  {
    "text": "now in Python actually there's a threat there's a discussion going on about the",
    "start": "1330520",
    "end": "1335640"
  },
  {
    "text": "merits and demerits of doing this in Python which is undecided at this point my understanding is uh and in Java and C",
    "start": "1335640",
    "end": "1342520"
  },
  {
    "text": "it just straight doesn't work right so now the fact that I'm putting the the",
    "start": "1342520",
    "end": "1348640"
  },
  {
    "text": "import inside the scope is I want to do anything everywhere and that's the way uh the way of the D language is you put",
    "start": "1348640",
    "end": "1355559"
  },
  {
    "text": "anything anywhere in D you can actually put functions inste functions types instead inside functions you can put",
    "start": "1355559",
    "end": "1362120"
  },
  {
    "text": "generics you can put whatever you want inside everywhere else and that's infinite regression because you get to",
    "start": "1362120",
    "end": "1367760"
  },
  {
    "text": "put like in any scope no matter how um deep down it goes you can still put",
    "start": "1367760",
    "end": "1373600"
  },
  {
    "text": "anything in there and that's a nice design principle this uh fractality of",
    "start": "1373600",
    "end": "1378919"
  },
  {
    "text": "uh of language constructs but it didn't apply for import and one morning I sat",
    "start": "1378919",
    "end": "1384159"
  },
  {
    "text": "down and I I did this and I tried it and it didn't compile so I called Walter brgh the",
    "start": "1384159",
    "end": "1389919"
  },
  {
    "text": "inventor of the D language and I said Walter I tried this and it doesn't work",
    "start": "1389919",
    "end": "1395159"
  },
  {
    "text": "and he said let me look through the compiler Source said well the first line in the compiler source is when you type",
    "start": "1395159",
    "end": "1400440"
  },
  {
    "text": "check import you check that it's at the global level otherwise it's it's just an error it just aborts",
    "start": "1400440",
    "end": "1407200"
  },
  {
    "text": "compilation and I said well why don't you comment that check out and see what",
    "start": "1407200",
    "end": "1413159"
  },
  {
    "text": "happens so he commented out and the rest I mean essentially it worked so we got",
    "start": "1413159",
    "end": "1418600"
  },
  {
    "text": "it working like it it was a removal of a limitation that what made things work as",
    "start": "1418600",
    "end": "1424039"
  },
  {
    "text": "opposed to uh consciously designing a new feature so he remove the limitation it",
    "start": "1424039",
    "end": "1431200"
  },
  {
    "text": "worked and we had you know we did some more work with type lookup with the name lookup and stuff to make things uh",
    "start": "1431200",
    "end": "1436240"
  },
  {
    "text": "proper so it just worked so that was it how how big do a deal do you think this",
    "start": "1436240",
    "end": "1442520"
  },
  {
    "text": "is is it big or is it small it looked like the small deal all right so and",
    "start": "1442520",
    "end": "1447960"
  },
  {
    "text": "then we we said well how about you put Imports in structs and classes and wherever you have a scope you can put an",
    "start": "1447960",
    "end": "1454480"
  },
  {
    "text": "import that should be natural and it is so that goes um that goes for those uh",
    "start": "1454480",
    "end": "1460760"
  },
  {
    "text": "two and it got to a very interesting point where you can say actually the",
    "start": "1460760",
    "end": "1466799"
  },
  {
    "text": "definition it's the import is actually a dependency is what makes this particular",
    "start": "1466799",
    "end": "1472039"
  },
  {
    "text": "widget or function or whatever work is it's conditioned by the existence of",
    "start": "1472039",
    "end": "1477279"
  },
  {
    "text": "that particular import it doesn't have to be a standard import it can import any other library that you may have or",
    "start": "1477279",
    "end": "1484000"
  },
  {
    "text": "may not have so that means the definition of widget here is carrying its own",
    "start": "1484000",
    "end": "1491880"
  },
  {
    "text": "dependencies and if you move it around it's going the dependencies are going to go with it",
    "start": "1491880",
    "end": "1499120"
  },
  {
    "text": "which is fascinating because you don't this is not traditional traditionally people think of dependencies this file",
    "start": "1499120",
    "end": "1506039"
  },
  {
    "text": "depends of this file and that's how make works and that's how all the tools like make work right it's like oh I have this",
    "start": "1506039",
    "end": "1512880"
  },
  {
    "text": "file and what what are the dependencies of this file oh it's like these other files and these other files in turn",
    "start": "1512880",
    "end": "1518600"
  },
  {
    "text": "depend on these other files but actually with this you get to completely change",
    "start": "1518600",
    "end": "1524000"
  },
  {
    "text": "that put it on its head and say actually it's not the file that depends on the file it's a definition inside the file",
    "start": "1524000",
    "end": "1530000"
  },
  {
    "text": "that depends on a different Library file so you know that's kind of",
    "start": "1530000",
    "end": "1536520"
  },
  {
    "text": "weird so you know in all likelihood there's consequences to that and indeed they are when you get into templates so",
    "start": "1536520",
    "end": "1544320"
  },
  {
    "start": "1540000",
    "end": "1540000"
  },
  {
    "text": "now we have a template called functional log like not mathematical log but I'm I'm talking about logging something to",
    "start": "1544320",
    "end": "1551440"
  },
  {
    "text": "an console or whatever so I'm going to uh write a generic function called log",
    "start": "1551440",
    "end": "1557679"
  },
  {
    "text": "which takes two sets of parentheses and that's how you define a template function in D it's much more concise",
    "start": "1557679",
    "end": "1563960"
  },
  {
    "text": "than in C++ with a template keyword so you say uh the first round of parenthesis are like my compile time",
    "start": "1563960",
    "end": "1570840"
  },
  {
    "text": "parameters and the second is like my classic runtime parameter so I'm taking any type T and I'm taking one value of",
    "start": "1570840",
    "end": "1576960"
  },
  {
    "text": "that any type T so okay fine inside the along I'm going to import these guys and",
    "start": "1576960",
    "end": "1582919"
  },
  {
    "text": "I'm going to do whatever you know the right I'm going to write the current time and I'm going to write some stuff",
    "start": "1582919",
    "end": "1588480"
  },
  {
    "text": "and I'm going to Cog within the file uh within the main fine now the question is",
    "start": "1588480",
    "end": "1595640"
  },
  {
    "text": "for everybody of the vast audience in this room if I comment out the call to",
    "start": "1595640",
    "end": "1601000"
  },
  {
    "text": "log should I even look up those particular libraries that log",
    "start": "1601000",
    "end": "1606120"
  },
  {
    "text": "is using I shouldn't right I'm seeing I'm seeing negative nods here indeed I there",
    "start": "1606120",
    "end": "1613120"
  },
  {
    "text": "should be no business if I'm not actually following the tree in the forest if if I'm not cutting the tree if",
    "start": "1613120",
    "end": "1619360"
  },
  {
    "text": "I'm not using the function log that's a pun log right trees come on you guys",
    "start": "1619360",
    "end": "1625279"
  },
  {
    "text": "come on what's happening there huh J hand yeah joke hand yeah I gota I got to",
    "start": "1625279",
    "end": "1631480"
  },
  {
    "text": "get my joke hand going uh joke hand going there so if I comment out the cult to log it means the dependencies are not",
    "start": "1631480",
    "end": "1638559"
  },
  {
    "text": "even realized they're not looked up there those files could be missing is what I'm",
    "start": "1638559",
    "end": "1645480"
  },
  {
    "text": "saying which is very awesome because hey at this point I I get to this point where I I'm like oh okay so what I could",
    "start": "1645480",
    "end": "1651799"
  },
  {
    "text": "do is deploy a large library of artifacts Each of which may depend has",
    "start": "1651799",
    "end": "1657360"
  },
  {
    "text": "its own dependency whatever it is whatever Necessities I have but if I",
    "start": "1657360",
    "end": "1663320"
  },
  {
    "text": "it's pay as you go if I use nothing of that library to start with uh I pay",
    "start": "1663320",
    "end": "1668880"
  },
  {
    "text": "nothing because I just paying the parsing of that particular code which is nothing like in the economy of a build",
    "start": "1668880",
    "end": "1675320"
  },
  {
    "text": "parsing of the decode is like nothing uh it's actually nothing in C+ plus parsing",
    "start": "1675320",
    "end": "1680720"
  },
  {
    "text": "with Improvement in technology has gotten to the point where it's uh it's very low very low cost even the",
    "start": "1680720",
    "end": "1686519"
  },
  {
    "text": "tradition it it was very high um so now we have this um this nice setup in which",
    "start": "1686519",
    "end": "1692120"
  },
  {
    "text": "I deploy libraries I don't think of file dependencies and stuff I all all my focus is I'm going to give you the the",
    "start": "1692120",
    "end": "1698120"
  },
  {
    "text": "generic components and you instantiate whatever you want and at that point the dependencies will be realized meaning",
    "start": "1698120",
    "end": "1704320"
  },
  {
    "text": "the files are going to be looked up and imported which is where the big cost is",
    "start": "1704320",
    "end": "1709360"
  },
  {
    "text": "is very interesting uh of course with a bit of engineering you get to kind of once you actually open an imported file",
    "start": "1709360",
    "end": "1717440"
  },
  {
    "text": "you cach it so you don't need to open it twice in two different functions yes like if you import like that STD date",
    "start": "1717440",
    "end": "1724080"
  },
  {
    "text": "time in two different functions and instantiate both of course you don't want to open the whole file again and",
    "start": "1724080",
    "end": "1729799"
  },
  {
    "text": "parse it again and everything you just cash it and that's that's uh trivial",
    "start": "1729799",
    "end": "1734919"
  },
  {
    "text": "engineering so now we have like generics that are faster to build an import and",
    "start": "1734919",
    "end": "1739960"
  },
  {
    "text": "uh which leads to an interesting thing which is less less pressure on the Linker uh which goes the following way",
    "start": "1739960",
    "end": "1747039"
  },
  {
    "text": "um who knows how Linker Works Sean there should be nobody",
    "start": "1747039",
    "end": "1754440"
  },
  {
    "text": "because you have a life to live right you should not know how a Linker works",
    "start": "1754440",
    "end": "1759559"
  },
  {
    "text": "I'm really sorry for you and myself that we know a bit right because it's like kind of this right a little so let's see",
    "start": "1759559",
    "end": "1767880"
  },
  {
    "text": "what does the linking process look",
    "start": "1767880",
    "end": "1773240"
  },
  {
    "text": "like so you have object files and you have Library files How does it",
    "start": "1773559",
    "end": "1778880"
  },
  {
    "text": "go have a bunch of",
    "start": "1780120",
    "end": "1783679"
  },
  {
    "text": "tables right so but the point being that with the object files whatever symbols",
    "start": "1785279",
    "end": "1791159"
  },
  {
    "text": "get resolved inside the object file that's a quick process because there it's there right it's in memory but when",
    "start": "1791159",
    "end": "1797559"
  },
  {
    "text": "you whatever whatever unresolved symbols you get those remain for the Second Step which",
    "start": "1797559",
    "end": "1803799"
  },
  {
    "text": "is looking at in other tables which are archive they kind of there's an archive format for libraries and there are many",
    "start": "1803799",
    "end": "1809799"
  },
  {
    "text": "object files kind of collapse together and uh you kind of look up load a bunch",
    "start": "1809799",
    "end": "1814919"
  },
  {
    "text": "of files large files and look up those tables and stuff and so on and so forth that is the long part of the run the",
    "start": "1814919",
    "end": "1820480"
  },
  {
    "text": "link process that is why linking takes a long time because you you have this you have these uh these large files to",
    "start": "1820480",
    "end": "1827039"
  },
  {
    "text": "consult if you get to resolve most um uh of your symbols within your object file",
    "start": "1827039",
    "end": "1833279"
  },
  {
    "text": "you're good and guess what with this model of compilation that's what you get to do you get to resolve a bunch of your",
    "start": "1833279",
    "end": "1839399"
  },
  {
    "text": "symbols immediately and it cost you more to comp compile those functions but it",
    "start": "1839399",
    "end": "1844480"
  },
  {
    "text": "takes you less to link and it turns out which guess which is faster than the other right so compilation have a bunch",
    "start": "1844480",
    "end": "1852720"
  },
  {
    "text": "more control of and you can it can actually make it a lot faster so that's less pressure on the Linker to um uh",
    "start": "1852720",
    "end": "1859519"
  },
  {
    "text": "essentially let time spent linking code and more time compiling code which is a good trade-off to make so we got to this",
    "start": "1859519",
    "end": "1865600"
  },
  {
    "text": "point that is uh completely weird because we started with something completely innocent which is like I want to put an import inside the scope it was",
    "start": "1865600",
    "end": "1873360"
  },
  {
    "text": "a very uh one of those nicey nicy things to do and it led us to some unexpected",
    "start": "1873360",
    "end": "1879120"
  },
  {
    "start": "1879000",
    "end": "1879000"
  },
  {
    "text": "point but wait there's more I can to measured what happened if you take a",
    "start": "1879120",
    "end": "1884279"
  },
  {
    "text": "large library and uh convert it to this approach",
    "start": "1884279",
    "end": "1889840"
  },
  {
    "text": "and uh there's one obvious large library in the dang which is its own standard Library so a lot of people have done a",
    "start": "1889840",
    "end": "1897399"
  },
  {
    "text": "lot of work in converting the standard library to the new format which everybody now recognizes is superior and",
    "start": "1897399",
    "end": "1903880"
  },
  {
    "text": "sorry for bothering with the camera there but I got to walk here because I think this is very interesting so that",
    "start": "1903880",
    "end": "1909559"
  },
  {
    "text": "led to the reduction of 4.45 times",
    "start": "1909559",
    "end": "1914639"
  },
  {
    "text": "in the speed of importing a library so just you type import you do nothing else",
    "start": "1914639",
    "end": "1920519"
  },
  {
    "text": "and it just accelerated so it got to down to 64 milliseconds which is next to",
    "start": "1920519",
    "end": "1927240"
  },
  {
    "text": "negligible and even better it got when you do this uh kind of uh dependency uh",
    "start": "1927240",
    "end": "1933480"
  },
  {
    "text": "track carrying code it got to actually smaller object files because when you",
    "start": "1933480",
    "end": "1938880"
  },
  {
    "text": "import the library it's going to get its static initialization yes you know libraries",
    "start": "1938880",
    "end": "1944440"
  },
  {
    "text": "have like these you need to initialize some things in some libraries and it leads you to additional code that you",
    "start": "1944440",
    "end": "1949880"
  },
  {
    "text": "need to build in and it leads you to more dependencies being realized and it leads to kind of an avalanche of other",
    "start": "1949880",
    "end": "1955320"
  },
  {
    "text": "things and guess what you get to reduce the object file size because dependencies are On Demand only not uh",
    "start": "1955320",
    "end": "1962480"
  },
  {
    "text": "compulsive so you got to reduce the object file size as well and of course that means faster linking and everything",
    "start": "1962480",
    "end": "1969159"
  },
  {
    "text": "so that's actually a a pretty hard uh measurement of something that looked very wishy-washy in the beginning so",
    "start": "1969159",
    "end": "1977200"
  },
  {
    "start": "1977000",
    "end": "1977000"
  },
  {
    "text": "that's pretty awesome so the consequences now are that we have definitions that carry their own their",
    "start": "1977200",
    "end": "1982519"
  },
  {
    "text": "own dependencies to them that means refactoring is a lot easier because you get to move the code wherever you want",
    "start": "1982519",
    "end": "1988480"
  },
  {
    "text": "in the application without wor oh I need to go to the top and you know pluck",
    "start": "1988480",
    "end": "1994440"
  },
  {
    "text": "those Imports as well yes now you have like you you get to do",
    "start": "1994440",
    "end": "1999600"
  },
  {
    "text": "physical design meaning layout of files any way you want you don't have dependency constraints anymore they're",
    "start": "1999600",
    "end": "2005120"
  },
  {
    "text": "all automatic it's just by by yes",
    "start": "2005120",
    "end": "2009760"
  },
  {
    "text": "does it mean we're going to have runtime exceptions if the dependency is not um is incorrect no you're going to have",
    "start": "2013039",
    "end": "2018159"
  },
  {
    "text": "compilation time uh kind of instantiation time which is during compilation exceptions for example if",
    "start": "2018159",
    "end": "2024519"
  },
  {
    "text": "you use log and the dependency is not there for example it's missing a file or whatever you try to build it's not going",
    "start": "2024519",
    "end": "2030559"
  },
  {
    "text": "to build so it's not going to be delayed all the way through runtime but if you're like imagine like my point here",
    "start": "2030559",
    "end": "2038480"
  },
  {
    "text": "is that log function could be one of thousands of function in a large library right and if you use like you don't use",
    "start": "2038480",
    "end": "2046399"
  },
  {
    "text": "like all thousands of functions you use like five right and only dependencies for those five that you actually use are",
    "start": "2046399",
    "end": "2053000"
  },
  {
    "text": "going to be uh executed tried instantiated so that is where you win",
    "start": "2053000",
    "end": "2058800"
  },
  {
    "text": "you win during build time not not that it's not a runtime issue great so now I have the space you go Paradigm and",
    "start": "2058800",
    "end": "2066240"
  },
  {
    "text": "um uh it led to fast and scalable builds for large projects because it turns out",
    "start": "2066240",
    "end": "2071800"
  },
  {
    "text": "that in it's a very common pattern in projects to import a whole Library use a small part of it and then you you have a",
    "start": "2071800",
    "end": "2078960"
  },
  {
    "text": "different module import the whole large Library it use another part of it and so on and that's the way that's the way the",
    "start": "2078960",
    "end": "2084320"
  },
  {
    "text": "the cookie crumbles and then you you just get this PIR as a go structure for large projects which is uh amazingly uh",
    "start": "2084320",
    "end": "2091919"
  },
  {
    "text": "efficient you're looking at you know um orders of magnitude in the limit improvements of um",
    "start": "2091919",
    "end": "2098440"
  },
  {
    "text": "of of build speed which is awesome so we had this uh heavy handset",
    "start": "2098440",
    "end": "2107560"
  },
  {
    "text": "effect remember the red Telephone Company story have this weird consequence which is you know the heavy",
    "start": "2107560",
    "end": "2114480"
  },
  {
    "text": "you know shorter call times natural lexical scoping leads to F faster builds and small object files which is highly",
    "start": "2114480",
    "end": "2123200"
  },
  {
    "text": "surprising great story number two",
    "start": "2123200",
    "end": "2129640"
  },
  {
    "text": "to Big laugh this brought down the house this like Immaculate Conception thing it's like oh my God this so funny I",
    "start": "2130079",
    "end": "2136280"
  },
  {
    "text": "can't can't stand myself all right so what do I mean by that well um let's um recall the",
    "start": "2136280",
    "end": "2144440"
  },
  {
    "text": "definition of a pure function pure function like you know hcll right",
    "start": "2144440",
    "end": "2151680"
  },
  {
    "text": "function programming what is a pure function doesn't have any side defects thank you so pure P function is like",
    "start": "2151680",
    "end": "2158319"
  },
  {
    "text": "produces the same output from the same input now or whenever it's independent of U typical examples of pure",
    "start": "2158319",
    "end": "2167640"
  },
  {
    "text": "functions sorry all of math s cosine log X what have you although that's not",
    "start": "2168160",
    "end": "2175200"
  },
  {
    "text": "entirely true because some set are no that's ridiculous but anyhow so in general like pure math does not what",
    "start": "2175200",
    "end": "2181800"
  },
  {
    "text": "else print print no print print the screen you can't it's going to do a",
    "start": "2181800",
    "end": "2187079"
  },
  {
    "text": "different thing so two string oh two string yes it bring",
    "start": "2187079",
    "end": "2192119"
  },
  {
    "text": "produce the same string from the same uh from the same as print F yes s print F would be okay print F would be the the",
    "start": "2192119",
    "end": "2198720"
  },
  {
    "text": "sort of the anti-thesis of a pure function because it does something every time you call it and does it puts in a",
    "start": "2198720",
    "end": "2204960"
  },
  {
    "text": "different place or whatever great so my thesis is is the following um it is difficult to write",
    "start": "2204960",
    "end": "2212640"
  },
  {
    "text": "the whole program in kind of in a pure manner it requires advanced",
    "start": "2212640",
    "end": "2217680"
  },
  {
    "text": "understanding of type systems such as monads and uh things like that and so it's it's kind of a difficult thing",
    "start": "2217680",
    "end": "2224640"
  },
  {
    "text": "however I sustain that if you get to write fragments of programs in pure style this is easy and",
    "start": "2224640",
    "end": "2231040"
  },
  {
    "text": "useful because it it's it allows you to very easily analyze and understand those pure functions much easier than if they",
    "start": "2231040",
    "end": "2238000"
  },
  {
    "text": "were kind of part of a big mess that was like all globals and all crap so that's my my thesis here and",
    "start": "2238000",
    "end": "2246200"
  },
  {
    "text": "um you know now kind of to add uh a nice effect here pure functions",
    "start": "2246200",
    "end": "2253000"
  },
  {
    "text": "uh generate better code because for example the same pure function called twice you get to do",
    "start": "2253000",
    "end": "2260240"
  },
  {
    "text": "what there's a keyword here memorize yes right memorize you get to",
    "start": "2260240",
    "end": "2267119"
  },
  {
    "text": "memorize the function because you know it's going to return the same result every time so if you call it the same",
    "start": "2267119",
    "end": "2272359"
  },
  {
    "text": "the two times with the same argument you just remember the first call and you're done so right right the problem is how",
    "start": "2272359",
    "end": "2278720"
  },
  {
    "text": "do you interface pure with impure code because they work very",
    "start": "2278720",
    "end": "2284920"
  },
  {
    "text": "differently all right so let's take an example here we have a functional",
    "start": "2284920",
    "end": "2290599"
  },
  {
    "text": "factorial so if you actually I'm going to try this stunt right now",
    "start": "2290599",
    "end": "2297319"
  },
  {
    "text": "right where's my cursor okay I've never done this okay",
    "start": "2297319",
    "end": "2304480"
  },
  {
    "text": "functional programming examples which are the top",
    "start": "2307880",
    "end": "2314000"
  },
  {
    "text": "three results you think quick",
    "start": "2314000",
    "end": "2320319"
  },
  {
    "text": "sort factorial which is the one we're discussing and factorial again and there there's",
    "start": "2320319",
    "end": "2327880"
  },
  {
    "text": "there's one different one huh binary search uh maybe not but I I bet you that",
    "start": "2327880",
    "end": "2333880"
  },
  {
    "text": "within the first page we're going to see Fibonacci all right let's see all right this",
    "start": "2333880",
    "end": "2341319"
  },
  {
    "text": "should be fun all right so function programming a practical introduction function PR by",
    "start": "2341319",
    "end": "2349200"
  },
  {
    "text": "example all right okay this is kind of a long",
    "start": "2349200",
    "end": "2357480"
  },
  {
    "text": "chapter all right let's go to the Wikipedia page here and let's see let's go down to an",
    "start": "2357480",
    "end": "2365000"
  },
  {
    "text": "example here history recursion all right length Ty systems data",
    "start": "2365000",
    "end": "2372160"
  },
  {
    "text": "structures so come on okay printing first 10 Fibonacci numbers iterative printing first function expression",
    "start": "2372160",
    "end": "2379280"
  },
  {
    "text": "style all right very nice all right uh Fibonacci again come",
    "start": "2379280",
    "end": "2387119"
  },
  {
    "text": "on something else oh it's the same Fibonacci all over",
    "start": "2387119",
    "end": "2393839"
  },
  {
    "text": "like oh D oh there you go somebody introduced that as well so okay",
    "start": "2393839",
    "end": "2400960"
  },
  {
    "text": "let me try uh the second hit here I don't know what is this function",
    "start": "2400960",
    "end": "2407240"
  },
  {
    "text": "program",
    "start": "2407240",
    "end": "2409599"
  },
  {
    "text": "Basics squint okay this is not an example squares of okay",
    "start": "2412400",
    "end": "2421880"
  },
  {
    "text": "awesome okay this goes on to show if you if you try something like this kind of going online in the middle of your talk",
    "start": "2423680",
    "end": "2429880"
  },
  {
    "text": "and um uh try to prove something is never going to work so we we have the",
    "start": "2429880",
    "end": "2435280"
  },
  {
    "text": "Fibonacci we have the increment come on squares [Music]",
    "start": "2435280",
    "end": "2441720"
  },
  {
    "text": "range people height oh come on man this is",
    "start": "2441720",
    "end": "2447440"
  },
  {
    "text": "incredible funct program",
    "start": "2447440",
    "end": "2451318"
  },
  {
    "text": "examples examples oh okay that should be interesting but I suppose these are rather",
    "start": "2454680",
    "end": "2461319"
  },
  {
    "text": "Advanced reduce okay awesome well I'm going to declare this as a qualified failure because my Hope was within the",
    "start": "2461319",
    "end": "2468319"
  },
  {
    "start": "2464000",
    "end": "2464000"
  },
  {
    "text": "first page I'm going to see factorial Fibonacci and um quick sort all of which",
    "start": "2468319",
    "end": "2474480"
  },
  {
    "text": "are computationally problematic so they're not too wi this is not the way",
    "start": "2474480",
    "end": "2479520"
  },
  {
    "text": "you do factorial functionally this is the wrong way of doing it and that comes with sort of the advanced like okay",
    "start": "2479520",
    "end": "2486079"
  },
  {
    "text": "here's how do fiban recurs recursively nicely but actually this is not the the right way of doing",
    "start": "2486079",
    "end": "2493040"
  },
  {
    "text": "it what do you think is bad about this particular",
    "start": "2493040",
    "end": "2498240"
  },
  {
    "text": "function well uh it's what they call ppace it takes space proportional to the",
    "start": "2500359",
    "end": "2506920"
  },
  {
    "text": "input because in order to actually compute a factorial you need to compute all of the previous values and have them",
    "start": "2506920",
    "end": "2513119"
  },
  {
    "text": "as Temporaries the problem being I need to compute factorial and then then I need to compute the multiplication and",
    "start": "2513119",
    "end": "2518920"
  },
  {
    "text": "only then I have access to the result so it's going to take me space proportional to the input and that's not efficient",
    "start": "2518920",
    "end": "2526119"
  },
  {
    "text": "it's not computationally smart it's not a right thing to do so that's",
    "start": "2526119",
    "end": "2531960"
  },
  {
    "text": "terrible um however the nice thing about it it's pure because it doesn't change any variable it doesn't use any any uh",
    "start": "2531960",
    "end": "2539760"
  },
  {
    "text": "assignment or anything it's just compus the thing and it goes so it's pure so notice I put like put like the pure",
    "start": "2539760",
    "end": "2545520"
  },
  {
    "text": "attribute there onto it which is great um the way it's actually taught like the",
    "start": "2545520",
    "end": "2552119"
  },
  {
    "start": "2547000",
    "end": "2547000"
  },
  {
    "text": "right way of doing factorial is to use a helper function which I call conveniently",
    "start": "2552119",
    "end": "2558960"
  },
  {
    "text": "crutch like it's a helper which is going to actually thread the temporary result",
    "start": "2558960",
    "end": "2565760"
  },
  {
    "text": "through the computation in such a way that it allows me to use what's called",
    "start": "2565760",
    "end": "2570920"
  },
  {
    "text": "tail recursion and therefore get rid of the space cost so the way this works is",
    "start": "2570920",
    "end": "2576079"
  },
  {
    "text": "I'm going to start cring with n and one which is my first intermediate result and then I'm passing that into the",
    "start": "2576079",
    "end": "2581960"
  },
  {
    "text": "function and then crutch is going to recurse to to itself with n minus one",
    "start": "2581960",
    "end": "2587319"
  },
  {
    "text": "now um the question to you for you is what is the difference between crutch",
    "start": "2587319",
    "end": "2592960"
  },
  {
    "text": "and uh this approach and the previous approach that makes this more efficient and",
    "start": "2592960",
    "end": "2599440"
  },
  {
    "text": "desirable yes recursive why is it tail recursive how can you tell because you",
    "start": "2599559",
    "end": "2605400"
  },
  {
    "text": "either returning a direct result or the result of recursive do not need to score PR right so the thank you so the how you",
    "start": "2605400",
    "end": "2614040"
  },
  {
    "text": "identify this cases is that a function ends up with a call to itself or a a",
    "start": "2614040",
    "end": "2619280"
  },
  {
    "text": "final result it doesn't end up with a call to itself plus some more computation like here because here it",
    "start": "2619280",
    "end": "2626119"
  },
  {
    "text": "calls itself factorial and minus one but it needs to do multiplication after it knows the result factor and that breaks",
    "start": "2626119",
    "end": "2632400"
  },
  {
    "text": "that spoil the whole party so all right so you know what this is not how it's",
    "start": "2632400",
    "end": "2637680"
  },
  {
    "text": "defined in the math manual in the math manual is defined with a big",
    "start": "2637680",
    "end": "2642760"
  },
  {
    "text": "PI right it says PI from n equals ials 1 to n of I it's a product it's an",
    "start": "2642760",
    "end": "2651040"
  },
  {
    "text": "iteration it's not the in math they don't teach you this they then then they say oh if",
    "start": "2651040",
    "end": "2658119"
  },
  {
    "text": "you're if you're really among the smarter students you're going to get to do this which I think is ridiculous because",
    "start": "2658119",
    "end": "2664000"
  },
  {
    "text": "you know as you know as a student I want to see like the I want to see the ma mapping of the math in software so I",
    "start": "2664000",
    "end": "2670559"
  },
  {
    "text": "want to actually see an iteration and this is how like this is the iteration",
    "start": "2670559",
    "end": "2677400"
  },
  {
    "start": "2672000",
    "end": "2672000"
  },
  {
    "text": "it's a product of all numbers between two and N right so that is that's what",
    "start": "2677400",
    "end": "2685559"
  },
  {
    "text": "it should look like but it's not pure because it changes the result",
    "start": "2685559",
    "end": "2691240"
  },
  {
    "text": "during the working of the function it changes the result iteratively many times until it gets it and then but",
    "start": "2691240",
    "end": "2697640"
  },
  {
    "text": "that's not pure because it changed it has uh it kind of has assignment it has this star equal I which destroys the",
    "start": "2697640",
    "end": "2706119"
  },
  {
    "text": "whole mood here right well now you know",
    "start": "2706119",
    "end": "2711640"
  },
  {
    "text": "what I got to a point in my life where I got to question everything you know I can I'm saying you",
    "start": "2711640",
    "end": "2718400"
  },
  {
    "text": "know what I'm not going to accept any of these preconceive Notions of Purity and things and whatnot so therefore allow me",
    "start": "2718400",
    "end": "2725440"
  },
  {
    "text": "to retort",
    "start": "2725440",
    "end": "2728599"
  },
  {
    "start": "2729000",
    "end": "2729000"
  },
  {
    "text": "what does a pure function look like cultural reference yes you get it",
    "start": "2730599",
    "end": "2737319"
  },
  {
    "text": "you know oh come on you guys you're too young Pulp Fiction the the movie to",
    "start": "2737319",
    "end": "2743119"
  },
  {
    "text": "watch okay after this homework you you got to go and watch it okay all right by",
    "start": "2743119",
    "end": "2749319"
  },
  {
    "text": "the way we have like uh 12 minutes 12 minutes to go thank you all right so what does a pure function look like I",
    "start": "2749319",
    "end": "2756200"
  },
  {
    "text": "mean what is what is pure really well we said pure functions always return the",
    "start": "2756200",
    "end": "2761240"
  },
  {
    "text": "same result for the same argument which is sort of the telogical the purpose oriented definition of Purity is not the",
    "start": "2761240",
    "end": "2767880"
  },
  {
    "text": "implementation uh minded version it's like you should modify globals because otherwise you know the big the you know",
    "start": "2767880",
    "end": "2774319"
  },
  {
    "text": "the big boohoo is going to come and get you right it's not it's not that it's you should think of it in terms of",
    "start": "2774319",
    "end": "2780880"
  },
  {
    "text": "effects pure functions always return the same result for the same inputs nice uh",
    "start": "2780880",
    "end": "2786480"
  },
  {
    "text": "that means you you shouldn't read and write Global variables Global cons are okay you shouldn't call impure functions",
    "start": "2786480",
    "end": "2792880"
  },
  {
    "text": "but who said anything about local and trans and state inside the function that nobody gets to",
    "start": "2792880",
    "end": "2799040"
  },
  {
    "text": "see who said anything about that stuff why can't I actually be a little",
    "start": "2799040",
    "end": "2804640"
  },
  {
    "text": "imp here in my bedroom I mean as long as I appear to",
    "start": "2804640",
    "end": "2810319"
  },
  {
    "text": "the society as a pure law abiding tax paying citizen who cares what I'm doing in",
    "start": "2810319",
    "end": "2817559"
  },
  {
    "text": "within my own quarters right I me come I'm looking at the the vast audience you're like left",
    "start": "2817559",
    "end": "2822839"
  },
  {
    "text": "and right yes thank you very much so I mean pure is as pure does it's effect",
    "start": "2822839",
    "end": "2828480"
  },
  {
    "text": "oriented it's not implementation you shouldn't worry about the way implementation goes and actually you",
    "start": "2828480",
    "end": "2835520"
  },
  {
    "text": "know so once we got to this point um in the D language we had a chance of",
    "start": "2835520",
    "end": "2840559"
  },
  {
    "text": "redefining what pure means so we said you know what actually this should be pure this is a pure function it does",
    "start": "2840559",
    "end": "2847720"
  },
  {
    "text": "iteration it does mutation but that's of private state by the end you get to see",
    "start": "2847720",
    "end": "2852920"
  },
  {
    "text": "any effect of any result of the function the fact that it's implemented with iteration recursion crutches or",
    "start": "2852920",
    "end": "2859640"
  },
  {
    "text": "whatnot is irrelevant and therefore I'm going to be",
    "start": "2859640",
    "end": "2864760"
  },
  {
    "text": "able to put pure so the type Checker in the D language has actually a verifier",
    "start": "2864760",
    "end": "2870440"
  },
  {
    "text": "that make sure that anything you modify is local and private and you're good because it's",
    "start": "2870440",
    "end": "2878720"
  },
  {
    "text": "look at result it's kind of a local variable so pretty awesome all right",
    "start": "2878720",
    "end": "2884160"
  },
  {
    "start": "2882000",
    "end": "2882000"
  },
  {
    "text": "let's push this one one up uh let's write a function that reverses an array like STD reverse in",
    "start": "2884160",
    "end": "2891880"
  },
  {
    "text": "STL in C++ yes reverse an array and my question to you this is kind of a",
    "start": "2891880",
    "end": "2898319"
  },
  {
    "text": "classic implementation but my question to you is should reversing an array be a",
    "start": "2898319",
    "end": "2903839"
  },
  {
    "text": "pure function or not no it shouldn't why shouldn't",
    "start": "2903839",
    "end": "2911440"
  },
  {
    "text": "it it changes state that outside the function is not private yes however",
    "start": "2911440",
    "end": "2918440"
  },
  {
    "text": "however let me ask you this um if I pass the same array to a function a million",
    "start": "2918440",
    "end": "2925000"
  },
  {
    "text": "times is he going to do the reverse is he going to do the same thing if I pass",
    "start": "2925000",
    "end": "2931119"
  },
  {
    "text": "the array Shan parent a million times I'm going am I going to get the same",
    "start": "2931119",
    "end": "2936200"
  },
  {
    "text": "result like can't pronounce it but it's going to be the same like deterministic but it's",
    "start": "2936200",
    "end": "2942319"
  },
  {
    "text": "deterministic so we have kind of an interesting concept here which is how do you define the same inputs is it the",
    "start": "2942319",
    "end": "2948480"
  },
  {
    "text": "same pointer is the same address of or is the same content of the array so",
    "start": "2948480",
    "end": "2953599"
  },
  {
    "text": "actually get to push and relax Purity even further and say actually this is pure as well because it has the same",
    "start": "2953599",
    "end": "2959920"
  },
  {
    "text": "effects for the same input so long as you define the input as",
    "start": "2959920",
    "end": "2965760"
  },
  {
    "text": "the you know the reachable content from the the the parameters it does not use any globals it the what it does is not",
    "start": "2965760",
    "end": "2973599"
  },
  {
    "text": "influenced by the time you call it right so obviously possibilities to disallow",
    "start": "2973599",
    "end": "2979440"
  },
  {
    "text": "but actually we exper we experimented with this and we figure that it's amazingly uh effective to just relax the",
    "start": "2979440",
    "end": "2985839"
  },
  {
    "text": "rule and operate with the transitive closure of State reachable through parameter which kind of a simple way to",
    "start": "2985839",
    "end": "2992480"
  },
  {
    "text": "put it is whatever we get to starting from a there the array",
    "start": "2992480",
    "end": "2997799"
  },
  {
    "text": "is your you define as your input and as long as all you use is the input and all globals you're good so this is an",
    "start": "2997799",
    "end": "3004559"
  },
  {
    "text": "interesting superet of Purity and it's all in the signature so there's no need for other kind of you",
    "start": "3004559",
    "end": "3010839"
  },
  {
    "text": "know super pure you know weekly pure whatever you just put pure there and it's",
    "start": "3010839",
    "end": "3016280"
  },
  {
    "start": "3016000",
    "end": "3016000"
  },
  {
    "text": "understood so you get to very interesting points where actually you can Implement pure functions for user",
    "start": "3016280",
    "end": "3021839"
  },
  {
    "text": "defined types such as big in which is like an unlimited Precision integer in the D language is a St Library so you",
    "start": "3021839",
    "end": "3028559"
  },
  {
    "text": "get to say oh I'm defining a vectorial for big in and big in is written properly with the appropriate pure",
    "start": "3028559",
    "end": "3034359"
  },
  {
    "text": "Primitives and then it this just works so that's pretty awesome and uh",
    "start": "3034359",
    "end": "3040280"
  },
  {
    "text": "actually you don't even need to put put the pure uh attribute there by hand because for a bunch of functions the",
    "start": "3040280",
    "end": "3047640"
  },
  {
    "text": "pure attribute is deduced instead of being written by the user we figured that if we ask people to write pure",
    "start": "3047640",
    "end": "3055040"
  },
  {
    "text": "they're just not going to do it there you know people you know they don't want to put in an investment now",
    "start": "3055040",
    "end": "3061799"
  },
  {
    "text": "for a future possible benefit so the compil is the best tool to just do it for",
    "start": "3061799",
    "end": "3068040"
  },
  {
    "text": "you so very interesting the after my the after my here of Purity is like if",
    "start": "3068040",
    "end": "3073160"
  },
  {
    "text": "perometer reach mutable State then we have this relaxed pure notion no globals no input and output and no impure calls",
    "start": "3073160",
    "end": "3079799"
  },
  {
    "text": "and if parameters are indeed immutable then you have like pure like in hasal",
    "start": "3079799",
    "end": "3085359"
  },
  {
    "text": "it's the same thing so this is very interesting because you can use the relax pure functions to",
    "start": "3085359",
    "end": "3091040"
  },
  {
    "text": "implement the strongly pure functions so that's pretty awesome um this has been a",
    "start": "3091040",
    "end": "3096359"
  },
  {
    "text": "very interesting um very interesting uh uh exercise in kind of questioning the",
    "start": "3096359",
    "end": "3102559"
  },
  {
    "text": "the pre preconceived Authority on what Pur is and what it isn't shouldn't be",
    "start": "3102559",
    "end": "3107680"
  },
  {
    "text": "and we fig out you know as long as it's private and and then we got to the parameter and it got to combining Purity",
    "start": "3107680",
    "end": "3112839"
  },
  {
    "text": "with mutability improves both because you get to write more elegant implementations of uh sort of classic",
    "start": "3112839",
    "end": "3120119"
  },
  {
    "text": "pure functions so suddenly we have this the last question I'm going to say in",
    "start": "3120119",
    "end": "3126119"
  },
  {
    "text": "like five six minutes we have left is a stringly generative programming this joke brought down the house you know",
    "start": "3126119",
    "end": "3131640"
  },
  {
    "text": "about stringly typed yes in like number of languages stringly type programming",
    "start": "3131640",
    "end": "3137520"
  },
  {
    "text": "as opposed to strongly type it's a play on words because they use strings to express",
    "start": "3137520",
    "end": "3143200"
  },
  {
    "text": "types that was completely useless because you all knew that right right apologies all right it's for the general",
    "start": "3143200",
    "end": "3149440"
  },
  {
    "text": "audience I'm I'm sure millions of billions of people are going to watch this and you know I'm explaining for the sake of them so what is generative",
    "start": "3149440",
    "end": "3159200"
  },
  {
    "start": "3155000",
    "end": "3155000"
  },
  {
    "text": "programming code that generates other code and for my money this is the most fascinating area of computer science I",
    "start": "3159280",
    "end": "3166200"
  },
  {
    "text": "would highly recommend you consider looking into this deeply because there's just a lot of generous interesting",
    "start": "3166200",
    "end": "3173799"
  },
  {
    "text": "things there so all right so that's generative for you and uh the specification of",
    "start": "3173799",
    "end": "3181040"
  },
  {
    "text": "these uh the scod that gener scodes is often present in what I call a d what's called a DSL which",
    "start": "3181040",
    "end": "3187799"
  },
  {
    "text": "is thank you domain specific language so can you give me examples of domain",
    "start": "3187799",
    "end": "3193720"
  },
  {
    "text": "specific language thank you that you may use on a daily basis",
    "start": "3193720",
    "end": "3200280"
  },
  {
    "text": "huh gr Gradle that's a build system right yes build systems make gradal and",
    "start": "3200280",
    "end": "3206640"
  },
  {
    "text": "what have you right amazing cake what it's all dsls it's have what",
    "start": "3206640",
    "end": "3213400"
  },
  {
    "text": "others huh Lex Yak thank you excellent SQL domain specific language",
    "start": "3214040",
    "end": "3221720"
  },
  {
    "text": "awesome actually get to embed sometimes SQL you have uh you have even like in C you have this this awesome link with a Q",
    "start": "3221720",
    "end": "3228359"
  },
  {
    "text": "right very nice embedded language others okay you didn't you didn't tell",
    "start": "3228359",
    "end": "3233760"
  },
  {
    "text": "my like my favorite which is regular expressions yes it's a very concise DSL for",
    "start": "3233760",
    "end": "3240720"
  },
  {
    "text": "expressing patterns in strings and stuff automata and stuff like that so there's just PL plenty of it even print f is a",
    "start": "3240720",
    "end": "3247799"
  },
  {
    "start": "3245000",
    "end": "3245000"
  },
  {
    "text": "DSL because you get like the percents and you know the those all those weird formatting flags that everybody knows or",
    "start": "3247799",
    "end": "3254359"
  },
  {
    "text": "needs to look up every time they use them reg Expressions BNF grammars youc Port of",
    "start": "3254359",
    "end": "3261720"
  },
  {
    "text": "expression grammar a newer thing that is like BNF SQL oh every body mentioned",
    "start": "3261720",
    "end": "3267000"
  },
  {
    "text": "this like this is amazing so now if you don't if you get to express this in your own language",
    "start": "3267000",
    "end": "3273160"
  },
  {
    "text": "such as Ruby C+ plus Pearl or python or what have you you're going to get the same Syntax for all of these languages",
    "start": "3273160",
    "end": "3279960"
  },
  {
    "text": "which is unpleasant yes here what we want to do is use with their own native grammar",
    "start": "3279960",
    "end": "3286359"
  },
  {
    "text": "process during compilation and generate decode which would be comparable with a",
    "start": "3286359",
    "end": "3291680"
  },
  {
    "text": "sort of a static compile time jitting just in time compilation let me",
    "start": "3291680",
    "end": "3297400"
  },
  {
    "start": "3296000",
    "end": "3296000"
  },
  {
    "text": "explain first of all a bunch of these usable during",
    "start": "3297400",
    "end": "3302760"
  },
  {
    "text": "compilation which has been cargo culted into other languages as well and this is awesome because I get",
    "start": "3302760",
    "end": "3309520"
  },
  {
    "text": "to compile factor of 10 during runtime or I get to uh say static here or enum",
    "start": "3309520",
    "end": "3314640"
  },
  {
    "text": "and in that case it's going to actually run the function in interpretation mode during",
    "start": "3314640",
    "end": "3320440"
  },
  {
    "text": "compilation and this is very nice because I get to decide when things are done yes",
    "start": "3320440",
    "end": "3327200"
  },
  {
    "text": "it's a very nice artifact that we can oh so it has a has a loop it has mutation",
    "start": "3327200",
    "end": "3332400"
  },
  {
    "text": "it has things and all of these are going to be interpreted and actually there's a there's a guy in Germany who works on a",
    "start": "3332400",
    "end": "3338400"
  },
  {
    "text": "jit during compilation which is going to be like thousand times more more um fast",
    "start": "3338400",
    "end": "3344240"
  },
  {
    "text": "than just interpreting the St of the function so very nice all right and then",
    "start": "3344240",
    "end": "3349880"
  },
  {
    "start": "3349000",
    "end": "3349000"
  },
  {
    "text": "we have like another thing which I'm going to say is the stringly part in D",
    "start": "3349880",
    "end": "3355039"
  },
  {
    "text": "you have this uh keyword called mix in and what you get is like like an idiot you get to put a string in it and you",
    "start": "3355039",
    "end": "3361200"
  },
  {
    "text": "know give it to the compiler to compile it for you which sounds ridiculous",
    "start": "3361200",
    "end": "3366640"
  },
  {
    "text": "right so the first mix in there I'm saying mix in right line and with the escapes and everything I get to right",
    "start": "3366640",
    "end": "3372880"
  },
  {
    "text": "line hello world which is nothing of interest but the second use is more",
    "start": "3372880",
    "end": "3378920"
  },
  {
    "text": "interesting because I get to call a function during",
    "start": "3378920",
    "end": "3384680"
  },
  {
    "text": "compilation it gives me a string and I compile that string into into ass into",
    "start": "3384680",
    "end": "3391000"
  },
  {
    "text": "machine code so wait a second wait a second I mean we have we",
    "start": "3391000",
    "end": "3399200"
  },
  {
    "text": "can evaluate most any function during compilation and we can transform any",
    "start": "3399200",
    "end": "3404960"
  },
  {
    "text": "string into code wait a minute I mean",
    "start": "3404960",
    "end": "3411760"
  },
  {
    "text": "there's I mean there's something here right you have like any function and you you have any string any any function",
    "start": "3411760",
    "end": "3417880"
  },
  {
    "text": "that produces any string you get to make into code that sounds Al like like you know asm.js M script and it kind of",
    "start": "3417880",
    "end": "3425280"
  },
  {
    "text": "generate a string that's going to be interpreted by the you know JavaScript compiler and it's going to be very fast",
    "start": "3425280",
    "end": "3431400"
  },
  {
    "text": "and very nice and uh so something similar is going on here and all of a sudden um it opens you the door for a",
    "start": "3431400",
    "end": "3439119"
  },
  {
    "start": "3434000",
    "end": "3434000"
  },
  {
    "text": "bunch of generative libraries such as bit fields which are not present in D but are present in CN C++",
    "start": "3439119",
    "end": "3446599"
  },
  {
    "text": "and with uh this way bitfields like that bank syntax is instantiating is",
    "start": "3446599",
    "end": "3453000"
  },
  {
    "text": "instantiating a template which in turn is going to generate a string which is going to be compiled by the compiler and",
    "start": "3453000",
    "end": "3459559"
  },
  {
    "text": "I'm giving to bitfields I'm G please uh lay me out a u in called X of two bits",
    "start": "3459559",
    "end": "3465039"
  },
  {
    "text": "long an INT called y three bits long an in Z and so on and so forth and the uh",
    "start": "3465039",
    "end": "3471079"
  },
  {
    "text": "the mixing is a user level function not a compiler trick it's a user level",
    "start": "3471079",
    "end": "3476680"
  },
  {
    "text": "function is going to generate me guess what strings for all that shifting and masking that's needed for doing all that",
    "start": "3476680",
    "end": "3483319"
  },
  {
    "text": "bitwise work and then I'm saying mix mixing here is generating me the string the string I",
    "start": "3483319",
    "end": "3488960"
  },
  {
    "text": "compile and I get code that I use like regular code so okay so that's a good start",
    "start": "3488960",
    "end": "3496760"
  },
  {
    "text": "pretty awesome and there comes a guy who write wrote a whole parer like that thank you",
    "start": "3496760",
    "end": "3504480"
  },
  {
    "text": "so he wrote a whole parser that does the that whole thing and you get to use it",
    "start": "3504480",
    "end": "3510480"
  },
  {
    "text": "you put a grammar you write the native ebnf sorry that's the peg syntax you write the grammar in a kind of DSL",
    "start": "3510480",
    "end": "3517599"
  },
  {
    "text": "syntax and it generates the parsel for you and it actually scales because you",
    "start": "3517599",
    "end": "3523359"
  },
  {
    "text": "get from 1,000 lines of concise de grammar you get to generate the parts that has three 3,000 lines so it's like",
    "start": "3523359",
    "end": "3529720"
  },
  {
    "text": "a compressor and it's much easier to maintain so you can think of it as a highly integrated Lex andak and another",
    "start": "3529720",
    "end": "3536200"
  },
  {
    "text": "last point I wanted to make is the work of dimetri so all regular Expressions so in",
    "start": "3536200",
    "end": "3545119"
  },
  {
    "start": "3543000",
    "end": "3543000"
  },
  {
    "text": "um the D Library you get two kinds of regular Expressions one is like the classic reject and the second is compile",
    "start": "3545119",
    "end": "3552200"
  },
  {
    "text": "time Rex which takes the string during compilation and generates a specialized",
    "start": "3552200",
    "end": "3557960"
  },
  {
    "text": "automaton exactly for that string for that pattern how much faster do you think it",
    "start": "3557960",
    "end": "3564039"
  },
  {
    "text": "is compare these two so this is like a generic AUM for all strings and this is",
    "start": "3564039",
    "end": "3571319"
  },
  {
    "text": "kind of a specialized for one particular Rex which is",
    "start": "3571319",
    "end": "3576838"
  },
  {
    "text": "faster Sean I see utos of magnitude it can be a lot",
    "start": "3577079",
    "end": "3584039"
  },
  {
    "text": "faster of course depending on the Rex and uh with this I'm going to",
    "start": "3584039",
    "end": "3589400"
  },
  {
    "text": "finish re2 is the main Contender and I'm actually using old results here because uh the diit just sent me literally like",
    "start": "3590799",
    "end": "3597680"
  },
  {
    "text": "last night he sent me an he said I'm beating everybody I'm beating everybody so um the decomil time um U engine is",
    "start": "3597680",
    "end": "3606200"
  },
  {
    "text": "the blue and right now it's kind of a par with re2 but actually with with Dimitri",
    "start": "3606200",
    "end": "3612520"
  },
  {
    "text": "latest work which is not committed so I didn't show it um it's actually the fast the fastest possible I'm talking about",
    "start": "3612520",
    "end": "3618640"
  },
  {
    "text": "parsing URLs emails and uh and dates the typical benchmarks for Rex so with this",
    "start": "3618640",
    "end": "3625079"
  },
  {
    "text": "we actually get to that regular expression for dates for example for URLs into a very specific",
    "start": "3625079",
    "end": "3631319"
  },
  {
    "text": "piece of code that's going to know exactly that pattern and uh with this you actually get results that are better",
    "start": "3631319",
    "end": "3640280"
  },
  {
    "text": "than the best in the world in a very highly competitive area with this I'm done thank you very",
    "start": "3640280",
    "end": "3647559"
  },
  {
    "text": "much you've been great thank you thanks",
    "start": "3647559",
    "end": "3652599"
  }
]