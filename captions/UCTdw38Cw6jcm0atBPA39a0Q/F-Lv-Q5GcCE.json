[
  {
    "start": "0",
    "end": "105000"
  },
  {
    "text": "so welcome to wonderful dotnet API design and to get started I'm just going",
    "start": "9590",
    "end": "16040"
  },
  {
    "text": "to talk about Who I am my name is James Noonan King I'm a donut developer from Wellington",
    "start": "16040",
    "end": "22340"
  },
  {
    "text": "New Zealand and these slides were originally made for in DC Oslo I'm a",
    "start": "22340",
    "end": "29419"
  },
  {
    "text": "developer at a New Zealand company called antigen if your Institute interested in working in New Zealand you",
    "start": "29419",
    "end": "36020"
  },
  {
    "text": "could come work for us but what I'm best known for is Jason Don is aka the",
    "start": "36020",
    "end": "42650"
  },
  {
    "text": "library that forced you to learn what binding redirect is and today I'm going",
    "start": "42650",
    "end": "48020"
  },
  {
    "text": "to be talking about Donette API design and I'm gonna be talking about lessons I've learned both from my day-to-day job",
    "start": "48020",
    "end": "55700"
  },
  {
    "text": "working on products and websites and also Jason Donette so to get started",
    "start": "55700",
    "end": "62960"
  },
  {
    "text": "what is don''t API design well what is it don't need API first don't need API",
    "start": "62960",
    "end": "68810"
  },
  {
    "text": "is types so its classes it strikes at interfaces",
    "start": "68810",
    "end": "73909"
  },
  {
    "text": "it's the properties that you put on most types its methods its constructors its",
    "start": "73909",
    "end": "79100"
  },
  {
    "text": "events I don't know a dotnet API is the public boundary between your internal",
    "start": "79100",
    "end": "84950"
  },
  {
    "text": "implementation and what a user sees when they consume your code so you can think",
    "start": "84950",
    "end": "91009"
  },
  {
    "text": "of it as a user interface it's a difference between asking someone to make toast with a toaster or giving them",
    "start": "91009",
    "end": "97039"
  },
  {
    "text": "the internals of a toaster and asking them to make so this one will lead them to success the other will probably burn",
    "start": "97039",
    "end": "102649"
  },
  {
    "text": "the house down and electrocute them so",
    "start": "102649",
    "end": "108289"
  },
  {
    "start": "105000",
    "end": "203000"
  },
  {
    "text": "the goal worth don''t API design is to create an API that communicates with developers if you could stand over the",
    "start": "108289",
    "end": "115249"
  },
  {
    "text": "shoulder of everyone who used your code you wouldn't need to worry about Donnie API design because if they did something",
    "start": "115249",
    "end": "121069"
  },
  {
    "text": "wrong if you just say hey that's not how you do it you use this method rather than that method so the aim is to create",
    "start": "121069",
    "end": "127090"
  },
  {
    "text": "don''t types and methods and short of ly communicate with developers about how they should be used so let's just",
    "start": "127090",
    "end": "134150"
  },
  {
    "text": "imagine an example we're talking to the database someone's used single connection and they have over met",
    "start": "134150",
    "end": "140239"
  },
  {
    "text": "connection they've created a command in their return something so they're successfully used the a do not near API to do something",
    "start": "140239",
    "end": "147770"
  },
  {
    "text": "but there's a problem with this code and the problem is they're opening a connection but they're not closing a",
    "start": "147770",
    "end": "153380"
  },
  {
    "text": "connection the user might be inexperienced with using sequel data they don't know that this is something",
    "start": "153380",
    "end": "158660"
  },
  {
    "text": "they need to do so how do we communicate with the developer that there are resources that they need to clean up and",
    "start": "158660",
    "end": "164870"
  },
  {
    "text": "the answer is I disposable so I disposable indicates there are unmanaged resources that you need to handle",
    "start": "164870",
    "end": "171230"
  },
  {
    "text": "cleaning up by placing I disposable on these types and these types do have i disposable we indicate to the developer",
    "start": "171230",
    "end": "179570"
  },
  {
    "text": "via documentation and also maybe via code analysis something like FX co-op or",
    "start": "179570",
    "end": "185540"
  },
  {
    "text": "resharper all say hey you're creating this sequel connection you're never cleaning it up you need to do that for your program to succeed and",
    "start": "185540",
    "end": "191990"
  },
  {
    "text": "of course they see that they wrap it and using statements and now they're successfully cleaning up their",
    "start": "191990",
    "end": "197180"
  },
  {
    "text": "connection as an example of dotnet API design and practice",
    "start": "197180",
    "end": "203200"
  },
  {
    "start": "203000",
    "end": "229000"
  },
  {
    "text": "why is API design important so I've just seen a brief example as the difference",
    "start": "203200",
    "end": "209390"
  },
  {
    "text": "between happy developers and confused and discouraged developers or wasting",
    "start": "209390",
    "end": "215090"
  },
  {
    "text": "time through trial and error if we created an API that works that does stuff they they get stuff done they're",
    "start": "215090",
    "end": "223430"
  },
  {
    "text": "achieving their tasks good API design creates productive and happy users API",
    "start": "223430",
    "end": "231080"
  },
  {
    "start": "229000",
    "end": "424000"
  },
  {
    "text": "design is important because API is good api's are forever so you might have",
    "start": "231080",
    "end": "236780"
  },
  {
    "text": "heard about URL design and there's some things which make good URL versus a bad",
    "start": "236780",
    "end": "243410"
  },
  {
    "text": "URL one of the things people talk about is cool URLs don't change if you have a",
    "start": "243410",
    "end": "248630"
  },
  {
    "text": "website and you've got a login page from that website and you sent perhaps in an email to all your customers with the",
    "start": "248630",
    "end": "256640"
  },
  {
    "text": "links to that login page two years later they would expect to be able to come to that email click on that link and go",
    "start": "256640",
    "end": "262610"
  },
  {
    "text": "directly to the login page if you send them to a 404 that's not a good experience likewise if people are using your donate",
    "start": "262610",
    "end": "270260"
  },
  {
    "text": "framework your library whatever and you update to a new version and suddenly everything",
    "start": "270260",
    "end": "275390"
  },
  {
    "text": "greg's that's not a good experience for them so ideally like obviously you can't do this all the time but ideally I",
    "start": "275390",
    "end": "281050"
  },
  {
    "text": "shouldn't break and putting some design effort upfront can help reduce the",
    "start": "281050",
    "end": "287450"
  },
  {
    "text": "amount of breakages that you'll put upon them there's sort of a gradient of how",
    "start": "287450",
    "end": "292790"
  },
  {
    "text": "easy it is to break an API if you're using something within a project say for example you're talking to a database and",
    "start": "292790",
    "end": "300170"
  },
  {
    "text": "you've got a user repository so the user repository people can interact with their bake the user repository will go",
    "start": "300170",
    "end": "306890"
  },
  {
    "text": "off to the database and return a strongly typed object if you're using that within your project you're both creating your API and you're consuming",
    "start": "306890",
    "end": "313850"
  },
  {
    "text": "it it's quite easy for you to break it because you're fixing it at the same time now if you're taking your user",
    "start": "313850",
    "end": "320240"
  },
  {
    "text": "repository and maybe you're putting it on nougat for other people to consume or some other way of distributing your",
    "start": "320240",
    "end": "326240"
  },
  {
    "text": "library suddenly things are a bit harder you're breaking it but other people are responsible for fixing it so in that",
    "start": "326240",
    "end": "332990"
  },
  {
    "text": "case avoiding breakages and keeping your API stable becomes more important it",
    "start": "332990",
    "end": "340490"
  },
  {
    "text": "becomes even more important when you're new yet library isn't isn't not just out",
    "start": "340490",
    "end": "345590"
  },
  {
    "text": "there but it's also become a dependency for other libraries now if you break it the user is in a position where they",
    "start": "345590",
    "end": "353330"
  },
  {
    "text": "can't they can't fix the nougat library that was subpoena upon your library to fix it themselves they need to wait on",
    "start": "353330",
    "end": "358820"
  },
  {
    "text": "someone else so they have to just not update to your new version so the older",
    "start": "358820",
    "end": "365180"
  },
  {
    "text": "mental ultimate example of this situation is me so Newton soft are Jason",
    "start": "365180",
    "end": "372020"
  },
  {
    "text": "this is a graphic that was put together by someone on my nougat team and at the bottom of every single NuGet package",
    "start": "372020",
    "end": "379040"
  },
  {
    "text": "hierarchy Jason Don it exists now if I introduce a sudden break and change and Jason Don it I can just knock the bottom",
    "start": "379040",
    "end": "386810"
  },
  {
    "text": "card out of that entire stack and everything falls over to give you an idea of scale",
    "start": "386810",
    "end": "392360"
  },
  {
    "text": "Jason Don editors depended upon by about 10,000 other new gear libraries if I",
    "start": "392360",
    "end": "397760"
  },
  {
    "text": "introduce a breaking change that's 10,000 new get libraries that need to be updated before people can successfully",
    "start": "397760",
    "end": "406370"
  },
  {
    "text": "use it again it's important to think about when you're designing an API every piece of",
    "start": "406370",
    "end": "413600"
  },
  {
    "text": "code that uses it is a further investment on that it's enhancing the value of that API and you don't want to",
    "start": "413600",
    "end": "419930"
  },
  {
    "text": "destroy that value by introducing unnecessary breaking changes so API",
    "start": "419930",
    "end": "428480"
  },
  {
    "start": "424000",
    "end": "485000"
  },
  {
    "text": "design is also important because everyone is an API designer so obviously the team at Microsoft at the dhaniya",
    "start": "428480",
    "end": "436070"
  },
  {
    "text": "framework when medizone your base class library the API designers the asp.net team when they're designing asp.net core",
    "start": "436070",
    "end": "443570"
  },
  {
    "text": "their API designers when I'm designing jacent on it I'm an API designer but",
    "start": "443570",
    "end": "449270"
  },
  {
    "text": "every developer is creating code that other developers are consuming or that",
    "start": "449270",
    "end": "454730"
  },
  {
    "text": "they're using but they're using it in multiple places they're reusing it so",
    "start": "454730",
    "end": "460040"
  },
  {
    "text": "it's important to put thought into this so you create the most easy to use library for your fellow developers you",
    "start": "460040",
    "end": "466970"
  },
  {
    "text": "keep them happy there they are confident and using your code when you say hey here's this user repository via",
    "start": "466970",
    "end": "472640"
  },
  {
    "text": "confident that it's well-designed and that they can get up and running with it quickly and it's not some awful thing",
    "start": "472640",
    "end": "479390"
  },
  {
    "text": "that a junior graduate developer put together and they need to completely remake so what makes a good API so the",
    "start": "479390",
    "end": "491270"
  },
  {
    "start": "485000",
    "end": "693000"
  },
  {
    "text": "first thing that makes it makes a good API is it's easy to learn so an easy to",
    "start": "491270",
    "end": "496790"
  },
  {
    "text": "learn API is consistent with the platform that it's on so it follows and",
    "start": "496790",
    "end": "502790"
  },
  {
    "text": "the case of Donaire it follows the donut naming centers it uses similar terminology as the dotnet framework so",
    "start": "502790",
    "end": "509780"
  },
  {
    "text": "if Oracle is introducing a new way of well F Oracle's writing an Oracle",
    "start": "509780",
    "end": "516469"
  },
  {
    "text": "connection object they call it Oracle connection they don't call it oracle DB",
    "start": "516469",
    "end": "522140"
  },
  {
    "text": "pipe for words only they use similar terminology also a good API it should be",
    "start": "522140",
    "end": "530000"
  },
  {
    "text": "consistent with itself so if you have a user class and it has is disabled and",
    "start": "530000",
    "end": "535700"
  },
  {
    "text": "then you have a subscription class which has is disabled and then something else which has",
    "start": "535700",
    "end": "542090"
  },
  {
    "text": "enabled that's confusing for people you want to try and try and strive to be consistent you want to strive to",
    "start": "542090",
    "end": "548540"
  },
  {
    "text": "minimize the number of logical concepts that new users of an API need to worry about also an API should be easy to use",
    "start": "548540",
    "end": "558460"
  },
  {
    "text": "so it should be well named you should try and use strong typing as",
    "start": "558460",
    "end": "564740"
  },
  {
    "text": "much as possible and tele sense is a fantastic way for people to explore an",
    "start": "564740",
    "end": "570170"
  },
  {
    "text": "API and discover what is on it conversely an API should be hard to",
    "start": "570170",
    "end": "576560"
  },
  {
    "text": "misuse so if a user does something wrong you should tell them straight away you",
    "start": "576560",
    "end": "583490"
  },
  {
    "text": "shouldn't sit on an error or hide it away and when you give them an error so if you throw an exception you give an a",
    "start": "583490",
    "end": "590420"
  },
  {
    "text": "descriptive excrete descriptive expression exception you tell them what we've done wrong so they can then fix it",
    "start": "590420",
    "end": "597980"
  },
  {
    "text": "themselves so a couple of years ago I needed to implement this program which",
    "start": "597980",
    "end": "606500"
  },
  {
    "text": "use XSLT - so the dotnet framework the",
    "start": "606500",
    "end": "611510"
  },
  {
    "text": "XML library supports XSLT one but version two I needed to go off and find",
    "start": "611510",
    "end": "616760"
  },
  {
    "text": "this Java port to do the same task and as soon as I started working with it",
    "start": "616760",
    "end": "622339"
  },
  {
    "text": "I knew I was in a lot of trouble so the naming was slightly off so this is a",
    "start": "622339",
    "end": "629420"
  },
  {
    "text": "fairly faithful port of the Java library",
    "start": "629420",
    "end": "634430"
  },
  {
    "text": "that the naming it fired Java's naming standards used constant",
    "start": "634430",
    "end": "641360"
  },
  {
    "text": "strings and set of enumerations Java supports enumerations now but back when they port of its library it doesn't so I",
    "start": "641360",
    "end": "647959"
  },
  {
    "text": "needed to look at what these strings were where to find them they had copied it and cross this custom",
    "start": "647959",
    "end": "654320"
  },
  {
    "text": "file adapter way of working with files rather than reused the don''t stream way of doing it so I need to learn about",
    "start": "654320",
    "end": "660500"
  },
  {
    "text": "that and just little stuff like you use getters and setters instead of properties I mean other stuff which you",
    "start": "660500",
    "end": "667880"
  },
  {
    "text": "can't see in this code example so there was no intellisense documentation because they hadn't ported over the Java",
    "start": "667880",
    "end": "672980"
  },
  {
    "text": "Docs and I used its own custom configuration files so I need to learn that so",
    "start": "672980",
    "end": "678650"
  },
  {
    "text": "obviously as soon as I say I working with us my immediate reaction was oh god I hate this please let me find something",
    "start": "678650",
    "end": "685700"
  },
  {
    "text": "else but unfortunately I had to use this thing as much as I hated it so also when",
    "start": "685700",
    "end": "695980"
  },
  {
    "start": "693000",
    "end": "834000"
  },
  {
    "text": "you have an API you want to encourage code that consumes it to be easy to",
    "start": "695980",
    "end": "702050"
  },
  {
    "text": "understand and then maintain so this is a slightly advanced topic but an example",
    "start": "702050",
    "end": "709070"
  },
  {
    "text": "that I've come across back when I first started working with dotnet is in",
    "start": "709070",
    "end": "714500"
  },
  {
    "text": "hibernate so in hibernate that's another copy from Java so in hibernated say object relational",
    "start": "714500",
    "end": "721310"
  },
  {
    "text": "mapper so I'll map database tables to donate classes and you need to map",
    "start": "721310",
    "end": "728120"
  },
  {
    "text": "between the two of those in the way in hibernate did it at least some initial versions as it had an XML mapping file",
    "start": "728120",
    "end": "734750"
  },
  {
    "text": "so here you can see we've got a class and we're mapping it to a table we're mapping or properties and we've defined",
    "start": "734750",
    "end": "740870"
  },
  {
    "text": "an ID there are a couple of problems with this first is as verbose so we're",
    "start": "740870",
    "end": "747020"
  },
  {
    "text": "forcing people to have a database table in a c-sharp class then a mapping file",
    "start": "747020",
    "end": "752210"
  },
  {
    "text": "that sort of duplicates everything in between it's also brittle so if we come along and change our c-sharp class later",
    "start": "752210",
    "end": "759040"
  },
  {
    "text": "our application is going to break because it no longer matches up what's on this mapping file so a better way of",
    "start": "759040",
    "end": "766760"
  },
  {
    "text": "doing it in my opinion is you could use attributes so you could take your c shop",
    "start": "766760",
    "end": "773510"
  },
  {
    "text": "class that you've already got you put attributes on it and the case that a map store table that this column is an ID",
    "start": "773510",
    "end": "780710"
  },
  {
    "text": "this is a property and then using reflection it's able to infer the name",
    "start": "780710",
    "end": "787430"
  },
  {
    "text": "of the database table or my database columns so we've just straight away we've reduced the amount of typing by a",
    "start": "787430",
    "end": "793430"
  },
  {
    "text": "third or reduce the chance that people can introduce an error and also there",
    "start": "793430",
    "end": "799130"
  },
  {
    "text": "are other benefits like by having this information in one place if some other",
    "start": "799130",
    "end": "805370"
  },
  {
    "text": "developer who's not familiar with in hibernate comes along with future we may see the C",
    "start": "805370",
    "end": "810800"
  },
  {
    "text": "sharp file it's immediately obvious them that if they introduce a new property they need to put an attribute on that",
    "start": "810800",
    "end": "815870"
  },
  {
    "text": "property meanwhile if we look at our mapping file that's sitting off in a",
    "start": "815870",
    "end": "822139"
  },
  {
    "text": "completely different directory people don't know about it until probably they run their application up and either the",
    "start": "822139",
    "end": "828709"
  },
  {
    "text": "new property isn't populated or they get an error so an API should also be",
    "start": "828709",
    "end": "838040"
  },
  {
    "start": "834000",
    "end": "906000"
  },
  {
    "text": "sufficiently powerful to meet requirements so obviously your API needs to do what you want it to do if you've",
    "start": "838040",
    "end": "845000"
  },
  {
    "text": "got a user repository it can actually get users from the database but API design is quite often a balance it's a",
    "start": "845000",
    "end": "851839"
  },
  {
    "text": "balance between conflicting alternatives of simplicity and power so it's a bit of",
    "start": "851839",
    "end": "857449"
  },
  {
    "text": "a challenge to create a library that's powerful enough to meet the broad to",
    "start": "857449",
    "end": "864199"
  },
  {
    "text": "meet the needs of a broad range of developers but also still keep it simple for that generalized use case and we",
    "start": "864199",
    "end": "871819"
  },
  {
    "text": "imagine if we've got a pocketknife we can go absolutely crazy introducing more features to it we can add a nail file we",
    "start": "871819",
    "end": "878899"
  },
  {
    "text": "can add a magnifying glass we can add a pair of scissors but our pocketknife can",
    "start": "878899",
    "end": "884300"
  },
  {
    "text": "no longer fit in our pocket so it's important not ruined simplicity by being",
    "start": "884300",
    "end": "890630"
  },
  {
    "text": "overly powerful and if you do want that power hide it away I keep your like a",
    "start": "890630",
    "end": "897490"
  },
  {
    "text": "and easy to use primary user face and then hide their power where people who",
    "start": "897490",
    "end": "904220"
  },
  {
    "text": "need it can access it a good API can also evolve so we talked earlier about",
    "start": "904220",
    "end": "910910"
  },
  {
    "start": "906000",
    "end": "976000"
  },
  {
    "text": "we don't to break things when we possibly can avoid it so good API will",
    "start": "910910",
    "end": "916279"
  },
  {
    "text": "allow bugs be fixed and features to be added without breaking existing users so",
    "start": "916279",
    "end": "922009"
  },
  {
    "text": "an example of this as the dotnet framework so we don't need framework it's about 15 years old now so since",
    "start": "922009",
    "end": "928069"
  },
  {
    "text": "don't net two or even even back to dhaniya one Microsoft has just been continually been",
    "start": "928069",
    "end": "934879"
  },
  {
    "text": "able to add new features and fix bugs without introducing major breaking changes obviously now at",
    "start": "934879",
    "end": "941270"
  },
  {
    "text": "cawww babe they put a line in the sand and they said we can we can't evolve this any further but 15 years that's a",
    "start": "941270",
    "end": "946550"
  },
  {
    "text": "pretty good run and now that they have put in a breaking change we've had to put an incredible amount of work with",
    "start": "946550",
    "end": "953150"
  },
  {
    "text": "knit standard which has just come out and it's standard to to be able to allow developers who have been investing and",
    "start": "953150",
    "end": "959930"
  },
  {
    "text": "missed previous Stoney inversion previous donut framework version to move their code across to donate core so yes",
    "start": "959930",
    "end": "967640"
  },
  {
    "text": "good good API so they can evolve and by evolving you preserve the investment that people have made in earth so I'm",
    "start": "967640",
    "end": "979130"
  },
  {
    "start": "976000",
    "end": "1070000"
  },
  {
    "text": "going to talk about a couple of general design principles when designing a",
    "start": "979130",
    "end": "984230"
  },
  {
    "text": "doughnut API now these are generalized any language but we'll talk about them in the context of Donette so I think one",
    "start": "984230",
    "end": "991100"
  },
  {
    "text": "of the most important ones is what's known as a pit of success so the pit of success was termed by a Microsoft",
    "start": "991100",
    "end": "997970"
  },
  {
    "text": "employee so it's up there I'll read through it the pit of success and stark",
    "start": "997970",
    "end": "1004540"
  },
  {
    "text": "contrast to a summit a peak or a journey across a desert to find victory through many trials and surprises we want our",
    "start": "1004540",
    "end": "1011380"
  },
  {
    "text": "customers to simply fall into winning practices by using our platforms and frameworks to the extent that we make it",
    "start": "1011380",
    "end": "1017590"
  },
  {
    "text": "easy to get into trouble we fail so when you're designing a framework when you're",
    "start": "1017590",
    "end": "1024010"
  },
  {
    "text": "designing an API you don't want to force users have to trek across a huge",
    "start": "1024010",
    "end": "1029410"
  },
  {
    "text": "mountain so then figuring out incredibly complex configuration or processes you",
    "start": "1029410",
    "end": "1035380"
  },
  {
    "text": "don't want your users to have to trek across a desert write tons of bought boilerplate code like that in hibernate",
    "start": "1035380",
    "end": "1042730"
  },
  {
    "text": "mapping file we saw earlier or maybe wade through swabs of documentation to find the right method instead what we",
    "start": "1042730",
    "end": "1050200"
  },
  {
    "text": "want is we want users to just be able to simply fall into a pet of success it's",
    "start": "1050200",
    "end": "1055600"
  },
  {
    "text": "easy to fall into a pet we want to make it easy for our users to be successful",
    "start": "1055600",
    "end": "1060720"
  },
  {
    "text": "so our goal when designing dhania api's is to make it easy to succeed and make",
    "start": "1060720",
    "end": "1067090"
  },
  {
    "text": "it hard to fail that's the idea of the pit of success so another general",
    "start": "1067090",
    "end": "1072910"
  },
  {
    "start": "1070000",
    "end": "1109000"
  },
  {
    "text": "principle is the wall of complexity so the wall of complexity is the idea",
    "start": "1072910",
    "end": "1078790"
  },
  {
    "text": "that you should your API should offer developers a steadily a steady CRO",
    "start": "1078790",
    "end": "1084210"
  },
  {
    "text": "should offer developers a steady slope of increasing difficulty as their needs",
    "start": "1084210",
    "end": "1089710"
  },
  {
    "text": "become more complex so if you offer like a sudden jump in the difficulty and",
    "start": "1089710",
    "end": "1096730"
  },
  {
    "text": "using your API just so perform a minor additional task that's an indication",
    "start": "1096730",
    "end": "1102670"
  },
  {
    "text": "that you've got a wall of complexity so I'll give an example of that who has",
    "start": "1102670",
    "end": "1110830"
  },
  {
    "start": "1109000",
    "end": "1358000"
  },
  {
    "text": "used web forms or still using wave forms there's a lot of people so I used wave",
    "start": "1110830",
    "end": "1116590"
  },
  {
    "text": "forms a lot so the idea behind web forms that Microsoft came out worth many years",
    "start": "1116590",
    "end": "1122440"
  },
  {
    "text": "ago is we want to make web development really simple we want to make it as simple was developing a VBS except and",
    "start": "1122440",
    "end": "1131310"
  },
  {
    "text": "just our developers they won't even need to worry about the fact that we were on the web it will just be as far as",
    "start": "1131310",
    "end": "1136630"
  },
  {
    "text": "they're concerned they're making AV b6f but it's sitting in the cloud and they did this by hiding a huge amount of",
    "start": "1136630",
    "end": "1143350"
  },
  {
    "text": "complexity behind web forms like a huge amount of thought within two web forms and it's a fascinating technology but",
    "start": "1143350",
    "end": "1150940"
  },
  {
    "text": "the idea was our users should be able to see at what you see is what you get HTML editor within visual CEO there should be",
    "start": "1150940",
    "end": "1157300"
  },
  {
    "text": "a tool box with controls and our users should be able to drag a text box onto a",
    "start": "1157300",
    "end": "1163000"
  },
  {
    "text": "web page and they should be able to drag a button on the web page and they double click that button and now they're on the",
    "start": "1163000",
    "end": "1168400"
  },
  {
    "text": "code behind and there's an event handler and they just type the code for handling the event in there and as far as they're",
    "start": "1168400",
    "end": "1174610"
  },
  {
    "text": "concerned HTTP and post spec sets or stuff it doesn't really exist",
    "start": "1174610",
    "end": "1180390"
  },
  {
    "text": "the problem with web forms as as soon as you had a moderately complex task so for",
    "start": "1180390",
    "end": "1187000"
  },
  {
    "text": "me that moderately complex task was I have a repeating list of dropdowns that",
    "start": "1187000",
    "end": "1192010"
  },
  {
    "text": "I'm data binding so I want to post back to that page and I want to have the new",
    "start": "1192010",
    "end": "1197710"
  },
  {
    "text": "values that I selected be populated in most dropdowns now as soon as I try to",
    "start": "1197710",
    "end": "1202840"
  },
  {
    "text": "do this I'd fail and that's because suddenly you need to worry about all of this",
    "start": "1202840",
    "end": "1208419"
  },
  {
    "text": "you need to worry about the web forms page lifecycle you need to think about when initialization is happening when",
    "start": "1208419",
    "end": "1216159"
  },
  {
    "text": "viewstate starts being tracked when data bind happens when unload happens when",
    "start": "1216159",
    "end": "1221440"
  },
  {
    "text": "the form values are applied to the web forms web page you need to worry about",
    "start": "1221440",
    "end": "1228850"
  },
  {
    "text": "all this stuff just so that you can get your drop down to buy in correctly so this is an example of the wall of",
    "start": "1228850",
    "end": "1234639"
  },
  {
    "text": "complex so you want to try and avoid this so a library which does avoid this",
    "start": "1234639",
    "end": "1240309"
  },
  {
    "text": "and does a better in my opinion is asp.net MVC so the successor for web",
    "start": "1240309",
    "end": "1245830"
  },
  {
    "text": "forms so MVC it requires a bit more knowledge from the developer it assumes",
    "start": "1245830",
    "end": "1252820"
  },
  {
    "text": "that you're going to know how to do HTML it assumes that you know a bit about HTTP and URLs but beyond that if you",
    "start": "1252820",
    "end": "1262840"
  },
  {
    "text": "start doing more complex things the slope of difficulty is relatively steadily increasing so if you need to",
    "start": "1262840",
    "end": "1269649"
  },
  {
    "text": "start worried about custom routing and having pretty routes you go off and",
    "start": "1269649",
    "end": "1274960"
  },
  {
    "text": "learn about routes and you can introduce that into your app if you need to worry about maybe returning JSON rather than",
    "start": "1274960",
    "end": "1281679"
  },
  {
    "text": "HTML you can learn about action results if you want to think about authorization now you just start putting authorization",
    "start": "1281679",
    "end": "1287859"
  },
  {
    "text": "attributes on your on your controllers and actions the slope of difficulty is",
    "start": "1287859",
    "end": "1293049"
  },
  {
    "text": "steadily increasing there's no sudden huge monumental jump like there is and",
    "start": "1293049",
    "end": "1298090"
  },
  {
    "text": "web forms and of course there's the anti-pattern or putting all the",
    "start": "1298090",
    "end": "1304389"
  },
  {
    "text": "complexity upfront so an example of that entity pattern with them the dotnet",
    "start": "1304389",
    "end": "1309940"
  },
  {
    "text": "ecosystem as WCF so I don't know about you but whenever I work with WC if I",
    "start": "1309940",
    "end": "1317769"
  },
  {
    "text": "could I just don't know how to do about configuration often told my head I'll go off to maybe Stack Overflow or the last",
    "start": "1317769",
    "end": "1324399"
  },
  {
    "text": "project they use WCF worth I'll copy and paste the configuration and and I'll sort of try and cross my fingers and",
    "start": "1324399",
    "end": "1330519"
  },
  {
    "text": "hope that it all works so WCF assumes just to do a simplest thing just to get",
    "start": "1330519",
    "end": "1337659"
  },
  {
    "text": "a like a simple post Dora sample gate using basic soap with",
    "start": "1337659",
    "end": "1343870"
  },
  {
    "text": "north indication even that requires a huge amount of knowledge about um addresses and contracts and bindings so",
    "start": "1343870",
    "end": "1351010"
  },
  {
    "text": "of course WCF the the f sense of fail windows communication fail so the last",
    "start": "1351010",
    "end": "1359440"
  },
  {
    "start": "1358000",
    "end": "1466000"
  },
  {
    "text": "general principle we'll talk about is the power of sameness so the power of sameness this is another one from a",
    "start": "1359440",
    "end": "1365590"
  },
  {
    "text": "Microsoft employee and the idea behind the power of sameness is by creating an",
    "start": "1365590",
    "end": "1370899"
  },
  {
    "text": "API that by creating API is that use features that developers already know",
    "start": "1370899",
    "end": "1377399"
  },
  {
    "text": "developers can get up and running faster than having to learn new features so a",
    "start": "1377399",
    "end": "1384309"
  },
  {
    "text": "real-world example of this when you sit down to drive in your car or you're getting into a new car like do you need",
    "start": "1384309",
    "end": "1390760"
  },
  {
    "text": "to read a manual about how the door works like locking and unlocking like",
    "start": "1390760",
    "end": "1395950"
  },
  {
    "text": "every car it's pretty much exactly the same like there's probably exceptions but 99% of cars the way the doors work",
    "start": "1395950",
    "end": "1403600"
  },
  {
    "text": "locking unlocking it's just exactly the same you don't really need to read a",
    "start": "1403600",
    "end": "1409000"
  },
  {
    "text": "manual when you rent a new car so this is the power of sameness by reusing",
    "start": "1409000",
    "end": "1415779"
  },
  {
    "text": "existing concepts by making our locks and work the same as other cars locks we're not introducing a new concept that",
    "start": "1415779",
    "end": "1422590"
  },
  {
    "text": "people need to learn and we're able to get them going faster we can play the",
    "start": "1422590",
    "end": "1427840"
  },
  {
    "text": "same thing to add donate api's so we want to do things like we want to use features from our framework in this case",
    "start": "1427840",
    "end": "1435309"
  },
  {
    "text": "dotnet we want to use its naming standard we want to use its interfaces",
    "start": "1435309",
    "end": "1441789"
  },
  {
    "text": "like I disposable to indicate the vero resources we want to clear up clean up if you need to use configuration we want",
    "start": "1441789",
    "end": "1449380"
  },
  {
    "text": "to use web config if or a speed on it korkin fig if you're using that so the",
    "start": "1449380",
    "end": "1456850"
  },
  {
    "text": "more that you keep somewhere the faster people are able to master your api the",
    "start": "1456850",
    "end": "1462279"
  },
  {
    "text": "list new concepts you're making them learn",
    "start": "1462279",
    "end": "1466500"
  },
  {
    "start": "1466000",
    "end": "1690000"
  },
  {
    "text": "okay so jumping into getting started with creating an API so when you start I",
    "start": "1467900",
    "end": "1475490"
  },
  {
    "text": "recommend you start small and focus on a solid foundation so for a couple of",
    "start": "1475490",
    "end": "1482210"
  },
  {
    "text": "reasons why you want to start small and focus on a solid foundation so the first one is like generally incremental",
    "start": "1482210",
    "end": "1490040"
  },
  {
    "text": "improvement is better than delay perfection and the reason that's a bit of a delay perfection is why starting",
    "start": "1490040",
    "end": "1495800"
  },
  {
    "text": "small and getting something out there you're getting your users using your library you're starting to get feedback",
    "start": "1495800",
    "end": "1501380"
  },
  {
    "text": "about what they like what works what doesn't now if you focus instead on a big bang",
    "start": "1501380",
    "end": "1508730"
  },
  {
    "text": "like in one year I will introduce a new thing which does a speech you complete",
    "start": "1508730",
    "end": "1514910"
  },
  {
    "text": "the problem is your idea of perfection might not match up with what a user's",
    "start": "1514910",
    "end": "1520520"
  },
  {
    "text": "idea of perfection is so by incrementally improving your getting that feedback quicker and you're able to",
    "start": "1520520",
    "end": "1526370"
  },
  {
    "text": "implement that feedback into your app as you're making it so by starting small you're also giving yourself with freedom",
    "start": "1526370",
    "end": "1532100"
  },
  {
    "text": "to do things right by doing this little as possible at the beginning and then when you no more do",
    "start": "1532100",
    "end": "1537860"
  },
  {
    "text": "it better so obviously you want to listen to user feedback in my experience",
    "start": "1537860",
    "end": "1544760"
  },
  {
    "text": "of JSON Deneb is a bit of an art as a maintainer of jacent on it there's a bit of an art of listening to user feedback",
    "start": "1544760",
    "end": "1551300"
  },
  {
    "text": "and deciphering what they ask for versus what they mean so let's just imagine we",
    "start": "1551300",
    "end": "1560450"
  },
  {
    "text": "have our list API with some names on it and we have a sort on it so by default",
    "start": "1560450",
    "end": "1567650"
  },
  {
    "text": "this sort alphabetically so users will quite often we may have a problem they",
    "start": "1567650",
    "end": "1572900"
  },
  {
    "text": "all suggest a very specific solution to their problem so say for example where someone out there alphabetical sorting",
    "start": "1572900",
    "end": "1578690"
  },
  {
    "text": "doesn't work for them and instead they want to sort by whoever has the most valves in their name goes first or the",
    "start": "1578690",
    "end": "1586220"
  },
  {
    "text": "most litter II some crazy user sort what they'll do is they'll say you've got",
    "start": "1586220",
    "end": "1591890"
  },
  {
    "text": "their sort method I want a crazy user sort method it's always exactly my problem so as someone who's building the",
    "start": "1591890",
    "end": "1599270"
  },
  {
    "text": "API it's your job to take user feedback and try and generalize it",
    "start": "1599270",
    "end": "1604310"
  },
  {
    "text": "so it fixes not just their problem but everyone's problem well everyone who has this issue with doing customized sorting",
    "start": "1604310",
    "end": "1611800"
  },
  {
    "text": "so what we're saying is rather than I need a method which does exactly what they want is I have a need to be able to",
    "start": "1611800",
    "end": "1621080"
  },
  {
    "text": "extend sorting to plug in my own functionality so in this case we would introduce a delegate which takes two",
    "start": "1621080",
    "end": "1628610"
  },
  {
    "text": "parameters and they can plug in their own sorting functionality and they can go crazy so that handles not just the 99% use",
    "start": "1628610",
    "end": "1636410"
  },
  {
    "text": "case of people doing alphabetical sorting but all those different 1% people they now have the freedom the",
    "start": "1636410",
    "end": "1642260"
  },
  {
    "text": "ability to plug in their own sorting functionality so an example of that",
    "start": "1642260",
    "end": "1648080"
  },
  {
    "text": "within json dotnet quite often when we serialize an object from c-sharp to",
    "start": "1648080",
    "end": "1654230"
  },
  {
    "text": "jason c-sharp tends to use pascal case with properties JavaScript people tend",
    "start": "1654230",
    "end": "1659990"
  },
  {
    "text": "to prefer a camel case with properties people would always ask hey I want the ability to do camel case can you",
    "start": "1659990",
    "end": "1666530"
  },
  {
    "text": "introduce a camel case equals true çetin and that would just so exactly what I",
    "start": "1666530",
    "end": "1671960"
  },
  {
    "text": "want instead I saw gradually introduced things first I introduced the ability for the customization of any property",
    "start": "1671960",
    "end": "1679070"
  },
  {
    "text": "name where an attribute and then later once I was more confident I introduced a contract resolver which could change all",
    "start": "1679070",
    "end": "1686270"
  },
  {
    "text": "properties to be camel case so expects",
    "start": "1686270",
    "end": "1693650"
  },
  {
    "start": "1690000",
    "end": "1788000"
  },
  {
    "text": "make mistakes so in your initial release",
    "start": "1693650",
    "end": "1699100"
  },
  {
    "text": "you're really just guessing what a user want once like it might be an educated",
    "start": "1699100",
    "end": "1704870"
  },
  {
    "text": "guess you might have a pretty good idea but like you're just like hoping that this does the thing that they want to",
    "start": "1704870",
    "end": "1711650"
  },
  {
    "text": "have happen so again starting small and releasing early means you give that feedback as quickly as possible",
    "start": "1711650",
    "end": "1718600"
  },
  {
    "text": "so there are always cases when yes you do legitimately make a mistake and you have stuff that you want to remove like",
    "start": "1718600",
    "end": "1725720"
  },
  {
    "text": "it's completely broken people shouldn't be using this how do you handle that situation so what I do with JSON Donette",
    "start": "1725720",
    "end": "1731840"
  },
  {
    "text": "is if I have an API that I no longer want people to use or market with the",
    "start": "1731840",
    "end": "1738250"
  },
  {
    "text": "obsolete attribute so obsolete attribute is natural you becomes Werth's done it and you place it on a class or a method",
    "start": "1738250",
    "end": "1746710"
  },
  {
    "text": "and you can give an optional message and when people compile their code and they're referencing those obsoletes",
    "start": "1746710",
    "end": "1754070"
  },
  {
    "text": "methods or properties or classes Visual Studio will give them a warning and it will give the message that you put a",
    "start": "1754070",
    "end": "1761600"
  },
  {
    "text": "meta attribute to the user so you can say so the user hey this thing's obsolete how about you use this thing",
    "start": "1761600",
    "end": "1768290"
  },
  {
    "text": "and said and then people will just gradually move over to using that new not obsolete API and then a year or two",
    "start": "1768290",
    "end": "1775760"
  },
  {
    "text": "later and once I'm fairly confident then people are no longer using it and then at that point I remove it so that sort",
    "start": "1775760",
    "end": "1781970"
  },
  {
    "text": "of reduces that Big Bang of people update jacent on it and then suddenly everything's broken so don't be afraid",
    "start": "1781970",
    "end": "1791090"
  },
  {
    "start": "1788000",
    "end": "1870000"
  },
  {
    "text": "to say no so I've seen some people who are very open source they're big open",
    "start": "1791090",
    "end": "1798050"
  },
  {
    "text": "source advocates since they're talking about how to grow your open source project and I'll say you should accept",
    "start": "1798050",
    "end": "1803660"
  },
  {
    "text": "every single pull request if you get a pull request you should have that accept button straight away that idea scares me",
    "start": "1803660",
    "end": "1811460"
  },
  {
    "text": "a bit there are some features and pull requests that are just not a good idea maybe like that the other person",
    "start": "1811460",
    "end": "1818780"
  },
  {
    "text": "probably has the best of intentions they're doing something which solves their problem and they think it will solve other people's problems as a",
    "start": "1818780",
    "end": "1825380"
  },
  {
    "text": "domain expert of the API you might know better you might know that hey if you introduce this feature and your pull",
    "start": "1825380",
    "end": "1831680"
  },
  {
    "text": "requests performance for everyone else is going to drop by 20% or by introducing this new API into JSON",
    "start": "1831680",
    "end": "1839930"
  },
  {
    "text": "Donette it will prevent all these other scenarios that I'm thinking about adding",
    "start": "1839930",
    "end": "1844940"
  },
  {
    "text": "in the future so although people are suggesting features it's up to you to",
    "start": "1844940",
    "end": "1850850"
  },
  {
    "text": "exercise common sense and your knowledge to say what will work and what is really",
    "start": "1850850",
    "end": "1856970"
  },
  {
    "text": "actually a bad idea and probably shouldn't be done you're taking responsibility of that and just be",
    "start": "1856970",
    "end": "1862730"
  },
  {
    "text": "cautious when people do suggest stuff whether it's a good idea or not at the",
    "start": "1862730",
    "end": "1867770"
  },
  {
    "text": "end of the day you're responsible okay so let's jump into some dotnet specific",
    "start": "1867770",
    "end": "1874370"
  },
  {
    "start": "1870000",
    "end": "1933000"
  },
  {
    "text": "recommendations so but don't need naming guidelines generally I recommend",
    "start": "1874370",
    "end": "1880760"
  },
  {
    "text": "following all of them as closely as you possibly can and the first couple we'll",
    "start": "1880760",
    "end": "1885919"
  },
  {
    "text": "talk about is pascal case parameters no camelcase parameters pascal case",
    "start": "1885919",
    "end": "1891530"
  },
  {
    "text": "everything else it's actually quite simple when you think about it so given some code we've got some parameters",
    "start": "1891530",
    "end": "1898070"
  },
  {
    "text": "there those are camel case everything else is pascal case so you'll notice i didn't",
    "start": "1898070",
    "end": "1908360"
  },
  {
    "text": "talk about our private field so i I happen to prefer prefixing them with an",
    "start": "1908360",
    "end": "1914210"
  },
  {
    "text": "underscore the fact that it's private it doesn't really matter what you name it it's not part of your API users don't",
    "start": "1914210",
    "end": "1920030"
  },
  {
    "text": "see it only you see it so within the privacy of your own classes you can do",
    "start": "1920030",
    "end": "1925370"
  },
  {
    "text": "whatever you want but if you use Hungarian notation I'm not going to contribute to your",
    "start": "1925370",
    "end": "1931190"
  },
  {
    "text": "project I want to make a special shout out about no shouting constants so this",
    "start": "1931190",
    "end": "1939169"
  },
  {
    "text": "is something which people coming from Java tend to do with Annette we just use",
    "start": "1939169",
    "end": "1946669"
  },
  {
    "text": "Pascal case they're just properties so we have string dot MD and Dom X value add a time now we don't have strings",
    "start": "1946669",
    "end": "1954260"
  },
  {
    "text": "shouty md shouting max value shouting now while I have this platform I want to",
    "start": "1954260",
    "end": "1960530"
  },
  {
    "text": "say to my coworker Ben Fox is a big JavaScript developer I'm sick of seeing your shouting Constance Maidana code",
    "start": "1960530",
    "end": "1966530"
  },
  {
    "text": "stop it so when you're naming your types",
    "start": "1966530",
    "end": "1974330"
  },
  {
    "start": "1971000",
    "end": "2125000"
  },
  {
    "text": "and your properties avoid acronyms so acronyms can be confusing for people who aren't familiar",
    "start": "1974330",
    "end": "1980059"
  },
  {
    "text": "with the acronym so some acronyms are okay well knowin acronyms things like",
    "start": "1980059",
    "end": "1987080"
  },
  {
    "text": "HTML XML HTTP a few PS SSL FTP like",
    "start": "1987080",
    "end": "1993169"
  },
  {
    "text": "these are all well known acronyms and you're probably thinking to yourself what makes a well-known acronym there's",
    "start": "1993169",
    "end": "1998419"
  },
  {
    "text": "a simple test just go to google put in the acronym ever gets tens of thousands of results and",
    "start": "1998419",
    "end": "2004270"
  },
  {
    "text": "the front page is dominated by the acronym chances are it's a well-known Akram and you can use it if it isn't",
    "start": "2004270",
    "end": "2011070"
  },
  {
    "text": "like within New Zealand we have SAS and GCSB those are spy agencies since you",
    "start": "2011070",
    "end": "2019330"
  },
  {
    "text": "guys are from Australia mostly you're probably not familiar with them there's maybe an example of a not well-known",
    "start": "2019330",
    "end": "2024789"
  },
  {
    "text": "acronym so yeah if it's well known use that otherwise just don't try and save",
    "start": "2024789",
    "end": "2031360"
  },
  {
    "text": "keystrokes and just type out the entire thing and don't abbreviate at all so we",
    "start": "2031360",
    "end": "2038350"
  },
  {
    "text": "live in a world of ideas with auto-completion C sharp is a strongly typed language we have four K jewel",
    "start": "2038350",
    "end": "2045429"
  },
  {
    "text": "monitors with enormous resolutions don't",
    "start": "2045429",
    "end": "2051099"
  },
  {
    "text": "abbreviate just to save some space or just keystrokes we write code once we",
    "start": "2051099",
    "end": "2057460"
  },
  {
    "text": "read it maybe dozens of times so can anyone tell me what this method does it",
    "start": "2057460",
    "end": "2065108"
  },
  {
    "text": "comes from C does anyone know what it does so that method is multi byte string",
    "start": "2065109",
    "end": "2076030"
  },
  {
    "text": "to white character string so NBS multi byte string to mean WCS white character",
    "start": "2076030",
    "end": "2082270"
  },
  {
    "text": "string so now that I told you you know what it is but someone coming along to this code or this method for very first",
    "start": "2082270",
    "end": "2088658"
  },
  {
    "text": "time they're going to be very confused they're going to have no idea what's going on they're going to need to look up documentation they're going to need",
    "start": "2088659",
    "end": "2095108"
  },
  {
    "text": "to ask their coworker so abbreviations and like it's you're just saving keystrokes to introduce confusion and",
    "start": "2095109",
    "end": "2103300"
  },
  {
    "text": "then is just a whole bunch of other naming guidelines stuff prefix and faces with an eyetie parameters of a T you",
    "start": "2103300",
    "end": "2110080"
  },
  {
    "text": "might have noticed all exceptions in with the word exception all streams in with the word stream like always follow",
    "start": "2110080",
    "end": "2117490"
  },
  {
    "text": "these things that just as just the power of sameness it produces a number of things people need to learn when they're",
    "start": "2117490",
    "end": "2122589"
  },
  {
    "text": "looking at your api's so interface some base abstract based",
    "start": "2122589",
    "end": "2129500"
  },
  {
    "start": "2125000",
    "end": "2340000"
  },
  {
    "text": "class design service interfaces and abstract base classes are one sort of",
    "start": "2129500",
    "end": "2134930"
  },
  {
    "text": "the primary way of introducing extensibility would to a donate API and",
    "start": "2134930",
    "end": "2143170"
  },
  {
    "text": "they're hard to get right so I'll just talk about some common pitfalls you can",
    "start": "2143170",
    "end": "2149510"
  },
  {
    "text": "have when introducing interfaces and abstract base classes so the first one is too many methods or properties so I",
    "start": "2149510",
    "end": "2158380"
  },
  {
    "text": "don't know about you has anyone used membership provider from donut to sew",
    "start": "2158380",
    "end": "2165530"
  },
  {
    "text": "some hands going up so membership provider sort of provided a an abstract",
    "start": "2165530",
    "end": "2172069"
  },
  {
    "text": "base class for talking to any form of membership like we're back in sort of",
    "start": "2172069",
    "end": "2177740"
  },
  {
    "text": "met it like it could be a sequel database it could be Active Directory and this is something the donut team",
    "start": "2177740",
    "end": "2183559"
  },
  {
    "text": "provided that asp.net team and it had a huge number of abstract properties and",
    "start": "2183559",
    "end": "2190490"
  },
  {
    "text": "methods on it so this is resharper saying hey if you want to implement this class you need to generate all of these",
    "start": "2190490",
    "end": "2197540"
  },
  {
    "text": "different abstract methods and properties now every time i've implemented this class a type of",
    "start": "2197540",
    "end": "2205549"
  },
  {
    "text": "membership provider say for example i'm giving it to some other library so I bet other library knows how to talk to my",
    "start": "2205549",
    "end": "2211510"
  },
  {
    "text": "database I've only ever implemented two proper methods on us so I validate user",
    "start": "2211510",
    "end": "2217430"
  },
  {
    "text": "and get user everything else I've been leaving is not implemented exception",
    "start": "2217430",
    "end": "2222440"
  },
  {
    "text": "just because they're not being used so if you're if you're hit with your solid the iron solid is interface segregation",
    "start": "2222440",
    "end": "2229520"
  },
  {
    "text": "principle so this is an indication that your your interface is doing too much",
    "start": "2229520",
    "end": "2235250"
  },
  {
    "text": "you want to you want to focus it down and asp.net identity the asp.net team",
    "start": "2235250",
    "end": "2245000"
  },
  {
    "text": "they've reflected it from one enormous abstract base class and to many smaller",
    "start": "2245000",
    "end": "2251119"
  },
  {
    "text": "ones so they've realized that this is a problem effects",
    "start": "2251119",
    "end": "2255970"
  },
  {
    "text": "so another common pitfall worth interfaces or abstract based class design is creating one which is",
    "start": "2256290",
    "end": "2262860"
  },
  {
    "text": "impossible complex for someone else to implement so you're probably asking what what does that mean so the example I",
    "start": "2262860",
    "end": "2270210"
  },
  {
    "text": "think of is writing a link provider so a",
    "start": "2270210",
    "end": "2275550"
  },
  {
    "text": "link provider has a like it kind of has a God method on it saying given an",
    "start": "2275550",
    "end": "2281600"
  },
  {
    "text": "arbitrarily complex query I met query could have anything in it you can call any method you can do aggregation within",
    "start": "2281600",
    "end": "2288810"
  },
  {
    "text": "it you can do skips and takes all kinds of crazy stuff expecting people to be",
    "start": "2288810",
    "end": "2295830"
  },
  {
    "text": "able to implement that method it's really hard like even Microsoft with the",
    "start": "2295830",
    "end": "2301050"
  },
  {
    "text": "in TV framework when they're converting from our c-sharp expressions to sequel",
    "start": "2301050",
    "end": "2306990"
  },
  {
    "text": "like may a lot of scenarios they don't care what probably most scenarios they don't cover so that's an example of hey",
    "start": "2306990",
    "end": "2313590"
  },
  {
    "text": "maybe you're trying to get a person to do too much so a link provider someone",
    "start": "2313590",
    "end": "2320670"
  },
  {
    "text": "just carefully suggesting hey just write a link provider that's really tough ask not saying that iqueryable is a bad",
    "start": "2320670",
    "end": "2327540"
  },
  {
    "text": "design maybe it's appropriate in this case but if your interface or abstract base class make similar requirements of",
    "start": "2327540",
    "end": "2334740"
  },
  {
    "text": "people just take a moment and think is this a good idea so there are a couple",
    "start": "2334740",
    "end": "2342720"
  },
  {
    "start": "2340000",
    "end": "2474000"
  },
  {
    "text": "of tips to some help you avoid problems when designing an interface or an",
    "start": "2342720",
    "end": "2348450"
  },
  {
    "text": "abstract base class so the first one is you want to provide an implementation and you want to provide consumers of",
    "start": "2348450",
    "end": "2355740"
  },
  {
    "text": "that implementation so by doing both you're thinking about both sides you're",
    "start": "2355740",
    "end": "2361050"
  },
  {
    "text": "thinking both about both how someone would implement it and how someone else",
    "start": "2361050",
    "end": "2366840"
  },
  {
    "text": "maybe it's just you will consume it there's an example with them the donate",
    "start": "2366840",
    "end": "2372240"
  },
  {
    "text": "framework of where this didn't happen so I cloneable so i cloneable was",
    "start": "2372240",
    "end": "2377910"
  },
  {
    "text": "introduced and on yet one and the idea behind i cloneable the guy who thought it up was hey let's just provide a",
    "start": "2377910",
    "end": "2383940"
  },
  {
    "text": "method that classes can implement and I'll just create a clone of themselves I",
    "start": "2383940",
    "end": "2389670"
  },
  {
    "text": "I'm sure that's going to be useful and a whole bunch of teams they went ahead and",
    "start": "2389670",
    "end": "2395280"
  },
  {
    "text": "make implemented I cloneable like the ad on it team um you can try and clone like",
    "start": "2395280",
    "end": "2400290"
  },
  {
    "text": "a data table or a data set I believe the other thing is as we may introduce Tonia one no one actually used I cloneable",
    "start": "2400290",
    "end": "2408510"
  },
  {
    "text": "like there was no API with Annette they said I take an AI cloneable when I need to do Cloney things and because no",
    "start": "2408510",
    "end": "2416099"
  },
  {
    "text": "one had used it no one was consuming it not a lot of thought well not enough thought had been",
    "start": "2416099",
    "end": "2422549"
  },
  {
    "text": "put into how it should work and I cloneable like it obviously takes a",
    "start": "2422549",
    "end": "2427619"
  },
  {
    "text": "clone of the object you pass on to it but what about the objects therefore it references say for example we've got a",
    "start": "2427619",
    "end": "2433740"
  },
  {
    "text": "customer object I mean our customer has a collection of products on them if we",
    "start": "2433740",
    "end": "2440010"
  },
  {
    "text": "clone their customer are we also cloning the products and that as an answer that",
    "start": "2440010",
    "end": "2445680"
  },
  {
    "text": "wasn't thought about when they designed I cloneable and part of a reason was is",
    "start": "2445680",
    "end": "2450839"
  },
  {
    "text": "because no one was actually using AI cloneable so now I have an interface where we don't exactly know what it will",
    "start": "2450839",
    "end": "2456059"
  },
  {
    "text": "do will it clone just the top-level object or look coin or all objects and because of that and that lack of thought",
    "start": "2456059",
    "end": "2463200"
  },
  {
    "text": "for when into I cloneable when it was designed no one's ever used cyclone of all it's just a didn't face as in interface",
    "start": "2463200",
    "end": "2469589"
  },
  {
    "text": "because people they just don't know how it works in um the signs or enumerations",
    "start": "2469589",
    "end": "2477770"
  },
  {
    "start": "2474000",
    "end": "2534000"
  },
  {
    "text": "so enumerations are great for closed small sets of choices so let's give an",
    "start": "2477770",
    "end": "2485040"
  },
  {
    "text": "example dev week it's seven days of a week and it probably won't be an eighth we're probably not going to introduce",
    "start": "2485040",
    "end": "2491160"
  },
  {
    "text": "friend day or schmooze day an example",
    "start": "2491160",
    "end": "2496380"
  },
  {
    "text": "that isn't a closed set might be windows version so they're always going to be new versions of Windows I've got Windows",
    "start": "2496380",
    "end": "2502290"
  },
  {
    "text": "10 now we've got a new service pack for Windows 10 now of God creators edition of Windows 10 the number of Windows",
    "start": "2502290",
    "end": "2509520"
  },
  {
    "text": "versions is constantly going to grow that indicates that it's probably not a good choice for enumeration if someone",
    "start": "2509520",
    "end": "2516109"
  },
  {
    "text": "does have Windows version as an enumeration and a new version of Windows has put out",
    "start": "2516109",
    "end": "2522150"
  },
  {
    "text": "like how do you indicate that it's a new version until you update library like you're kind of stuck like a better way",
    "start": "2522150",
    "end": "2528960"
  },
  {
    "text": "of representing Windows version might be a version number method design so put",
    "start": "2528960",
    "end": "2537390"
  },
  {
    "start": "2534000",
    "end": "2588000"
  },
  {
    "text": "some thought into obviously the the name of the method but also the name of its parameters so this is important today",
    "start": "2537390",
    "end": "2544380"
  },
  {
    "text": "more than ever obviously you have intellisense so we can see down there we've got name we've",
    "start": "2544380",
    "end": "2551069"
  },
  {
    "text": "got URL we've got default we've got constraints showing up in the intellisense but now with named arguments and c-sharp they also show up",
    "start": "2551069",
    "end": "2557970"
  },
  {
    "text": "in our code so like renaming a parameter name has",
    "start": "2557970",
    "end": "2563250"
  },
  {
    "text": "always been a bit of a breaking change because of reflection now it's real breaking change because you can have",
    "start": "2563250",
    "end": "2568890"
  },
  {
    "text": "these named arguments and putting thought into parameter names there's a",
    "start": "2568890",
    "end": "2575190"
  },
  {
    "text": "difference between someone having no idea how to use a method and someone getting it right the first time those",
    "start": "2575190",
    "end": "2580650"
  },
  {
    "text": "parameter names they can help them succeed first time without having to go look at documentation so prefer",
    "start": "2580650",
    "end": "2591420"
  },
  {
    "start": "2588000",
    "end": "2665000"
  },
  {
    "text": "enumeration over boolean parameters so an enumeration enum perimeter with a",
    "start": "2591420",
    "end": "2597990"
  },
  {
    "text": "descriptive name is much much more obvious and what it does than a boolean parameter so here we've got string",
    "start": "2597990",
    "end": "2605760"
  },
  {
    "text": "equals like we've got a an action which is a string we've got to get we're",
    "start": "2605760",
    "end": "2611400"
  },
  {
    "text": "comparing them like what what does that true do is it saying ignore culture",
    "start": "2611400",
    "end": "2616470"
  },
  {
    "text": "it's like saying ignore case they're saying ignore lead leading and trailing whitespace like just reading my method",
    "start": "2616470",
    "end": "2624119"
  },
  {
    "text": "unless you know how strings are equals works as an immediately obvious it's off we then take that same code and we",
    "start": "2624119",
    "end": "2629940"
  },
  {
    "text": "replace it with an enumeration now it's immediately obvious that we're ignoring",
    "start": "2629940",
    "end": "2636089"
  },
  {
    "text": "case if it's a little bit more work for you as an API designer you need to",
    "start": "2636089",
    "end": "2641190"
  },
  {
    "text": "create a state enumeration that's been passed in and you need to put some documentation on us and you need to then",
    "start": "2641190",
    "end": "2648809"
  },
  {
    "text": "use it I guess it's a bit more work compared to just taking a boolean I mean to whether it's true or not but like we",
    "start": "2648809",
    "end": "2655209"
  },
  {
    "text": "want to focus on making it readable and usable rather than a few keystrokes when",
    "start": "2655209",
    "end": "2660640"
  },
  {
    "text": "we're writing it don't be afraid to",
    "start": "2660640",
    "end": "2667689"
  },
  {
    "start": "2665000",
    "end": "2728000"
  },
  {
    "text": "create helper methods so the goal of the pet of success is to prevent users from",
    "start": "2667689",
    "end": "2673929"
  },
  {
    "text": "making mistakes and if we're making them write lots of boilerplate code and that's just more work for them it's more",
    "start": "2673929",
    "end": "2680469"
  },
  {
    "text": "work for them to consume your library it's also more opportunity for them to get things wrong so this code example",
    "start": "2680469",
    "end": "2688619"
  },
  {
    "text": "we're loading a J schema services from JSON Donette it's a JSON schema from a",
    "start": "2688619",
    "end": "2694390"
  },
  {
    "text": "string so we've got a schema JSON string we're wrapping in a stream reader string",
    "start": "2694390",
    "end": "2699459"
  },
  {
    "text": "reader within wrapping their string reader in a JSON text reader we're building a schema builder I've got a J",
    "start": "2699459",
    "end": "2705640"
  },
  {
    "text": "schema resolver when building a JSON schema it's all boilerplate code we",
    "start": "2705640",
    "end": "2710709"
  },
  {
    "text": "could get rid of all of that we could introduce a J's schema as method it does",
    "start": "2710709",
    "end": "2715749"
  },
  {
    "text": "exactly the same thing but we do it for the developer and they don't have to",
    "start": "2715749",
    "end": "2720999"
  },
  {
    "text": "write a vet and after remember they don't have to learn it we're just helping them fall into a bit of a success by providing one helper method",
    "start": "2720999",
    "end": "2728819"
  },
  {
    "start": "2728000",
    "end": "2882000"
  },
  {
    "text": "so designing properties properties require a bit more thought than you",
    "start": "2728819",
    "end": "2735219"
  },
  {
    "text": "would think so although internally properties are really just a getter and a setter I",
    "start": "2735219",
    "end": "2742349"
  },
  {
    "text": "means metadata to indicate a very property users don't have that",
    "start": "2742349",
    "end": "2747880"
  },
  {
    "text": "expectation developers don't have that expectation developers expect a property to behave like a field because it looks",
    "start": "2747880",
    "end": "2753939"
  },
  {
    "text": "like a field they expect it to behave like a field so how does the field behave the first one is a field as fast",
    "start": "2753939",
    "end": "2761619"
  },
  {
    "text": "if you're trying to get a value from it it should be instantaneous imagine if we had a DB context object and we've got a",
    "start": "2761619",
    "end": "2769749"
  },
  {
    "text": "a products property on it now a user looking at that class so it would expect",
    "start": "2769749",
    "end": "2777219"
  },
  {
    "text": "properties to be fast because there's a property products be fast because there's a property but say if products",
    "start": "2777219",
    "end": "2784449"
  },
  {
    "text": "was loading the database from the database every time you access sir now we have got a four loop which is",
    "start": "2784449",
    "end": "2791500"
  },
  {
    "text": "accessing the database every single time we're accessing it and if it takes a second to get the properties from the",
    "start": "2791500",
    "end": "2798549"
  },
  {
    "text": "database the products from the database then this loop might take seconds",
    "start": "2798549",
    "end": "2804280"
  },
  {
    "text": "minutes depending upon how big of a collection is instead of having a",
    "start": "2804280",
    "end": "2809559"
  },
  {
    "text": "property for someone which is slow you should have a method now if we change it",
    "start": "2809559",
    "end": "2814990"
  },
  {
    "text": "to a method and we look about same code it starts to look a little dodgy like I",
    "start": "2814990",
    "end": "2820119"
  },
  {
    "text": "don't know about you but if I saw that code I would probably rewrite it and my initial impulse would be to take for a",
    "start": "2820119",
    "end": "2828430"
  },
  {
    "text": "result of that method put it on a local variable and now use that variable so what could have previously taken minutes",
    "start": "2828430",
    "end": "2834430"
  },
  {
    "text": "and ground the application to a hold now it takes one second because we're fetching the products once and we're",
    "start": "2834430",
    "end": "2840549"
  },
  {
    "text": "just using that and memory cache so",
    "start": "2840549",
    "end": "2846930"
  },
  {
    "text": "another aspect of fields as fields are also consistent we may return a value so",
    "start": "2846930",
    "end": "2852970"
  },
  {
    "text": "your property should tend to want to be consistent when they get a value if you get a value and then a second later you",
    "start": "2852970",
    "end": "2859210"
  },
  {
    "text": "get another value from it property you may be a little confused if it suddenly changed so example gooood new good",
    "start": "2859210",
    "end": "2867339"
  },
  {
    "text": "I bet probably every time you call it it returns a brand new good which is",
    "start": "2867339",
    "end": "2872559"
  },
  {
    "text": "randomly generated that isn't really what a property is for if you've got that situation you should probably just",
    "start": "2872559",
    "end": "2879160"
  },
  {
    "text": "change it onto a method and another aspect we have with fields is there's no",
    "start": "2879160",
    "end": "2885849"
  },
  {
    "start": "2882000",
    "end": "2955000"
  },
  {
    "text": "such thing really as a field but you can set a value on and you can't get a value from like we have the opposite we have",
    "start": "2885849",
    "end": "2891819"
  },
  {
    "text": "read-only fields so and we also have constant fields but a set only field",
    "start": "2891819",
    "end": "2898150"
  },
  {
    "text": "doesn't really exist and likewise you should avoid a set on your property so say for example we've got a user and he",
    "start": "2898150",
    "end": "2905890"
  },
  {
    "text": "has a password property on it and when you set it we hash that value and store",
    "start": "2905890",
    "end": "2912339"
  },
  {
    "text": "save the hash value like obviously if we added a gator to password like I would",
    "start": "2912339",
    "end": "2918309"
  },
  {
    "text": "return the hash value you can't undo the Heche because as a hash but like the users expectation is",
    "start": "2918309",
    "end": "2925100"
  },
  {
    "text": "when they see that properly on me user class they're they're expecting both to be able to set the value to it and get",
    "start": "2925100",
    "end": "2931490"
  },
  {
    "text": "the value from it and we're sort of breaking user expectation and it's always a good clue when you're breaking",
    "start": "2931490",
    "end": "2936710"
  },
  {
    "text": "the users expectation it's chances are you're making something uninsured of and you're making it harder for them so the",
    "start": "2936710",
    "end": "2943070"
  },
  {
    "text": "way around that is quite simple you just change it to a set of property and now a user it's immediately obvious to them",
    "start": "2943070",
    "end": "2949730"
  },
  {
    "text": "that you can set the password but there's no way for you to then get the password so constructor design so this",
    "start": "2949730",
    "end": "2958940"
  },
  {
    "start": "2955000",
    "end": "3047000"
  },
  {
    "text": "is about performance this one constructors should be lazy so the idea what the constructors is you",
    "start": "2958940",
    "end": "2965420"
  },
  {
    "text": "really want to defer the work until you need to do it and generally that isn't with them a constructor so let's come",
    "start": "2965420",
    "end": "2971750"
  },
  {
    "text": "back to another example say for example we've got an XML file so this is of like an abstraction over how",
    "start": "2971750",
    "end": "2978040"
  },
  {
    "text": "we load XML files from disk I doesn't really do much all we're doing is I'm a",
    "start": "2978040",
    "end": "2984740"
  },
  {
    "text": "constructor we're giving it a path to a file and then with them a constructor we're loading that file from disk I mean you can call get XML later and it's",
    "start": "2984740",
    "end": "2991820"
  },
  {
    "text": "returning that XML document the problem with this is then a few maybe right links Eamonn like this maybe their",
    "start": "2991820",
    "end": "2998600"
  },
  {
    "text": "directory has hundreds or thousands of XML documents within it there's some",
    "start": "2998600",
    "end": "3005380"
  },
  {
    "text": "simple looking links a man is now loading hundreds of files from disk it could be killing performance and if then",
    "start": "3005380",
    "end": "3012160"
  },
  {
    "text": "we then only use one or two of those XML file objects so you can get the XML from",
    "start": "3012160",
    "end": "3017950"
  },
  {
    "text": "them and we load it we're loading a whole bunch of stuff from disk we're doing a whole bunch of work that we never really use it's of a way to fix",
    "start": "3017950",
    "end": "3025060"
  },
  {
    "text": "that is we've change it so that we load",
    "start": "3025060",
    "end": "3030670"
  },
  {
    "text": "when we need it we defer the work until we actually need to do it so our",
    "start": "3030670",
    "end": "3036190"
  },
  {
    "text": "constructor is now just initializing the path and when we call dot get Excel we actually use the path to load the XML",
    "start": "3036190",
    "end": "3042460"
  },
  {
    "text": "document and we just cache it just so that we don't need to load it multiple times",
    "start": "3042460",
    "end": "3047790"
  },
  {
    "start": "3047000",
    "end": "3197000"
  },
  {
    "text": "so throwing exceptions this is a bit of a passion of mine with Jason Donette I'm",
    "start": "3048850",
    "end": "3054400"
  },
  {
    "text": "of the opinion that failure is important and specifically how you fail is important so in my experience users",
    "start": "3054400",
    "end": "3063550"
  },
  {
    "text": "don't read documentation users they learn through experimentation and",
    "start": "3063550",
    "end": "3069430"
  },
  {
    "text": "failure and if they can't experiment their way out of a problem and they keep",
    "start": "3069430",
    "end": "3074680"
  },
  {
    "text": "getting failure then they'll go off to stack overflow so the most common error",
    "start": "3074680",
    "end": "3080980"
  },
  {
    "text": "but people tend to get with Jason on it is there's a mismatch between the type",
    "start": "3080980",
    "end": "3087940"
  },
  {
    "text": "that they're deserializing onto and the value of a vide serializing so in this case we've got a person object we have a",
    "start": "3087940",
    "end": "3094180"
  },
  {
    "text": "collection of hobbies the person's trying to do serialize a string into a collection that's not going to work like",
    "start": "3094180",
    "end": "3100600"
  },
  {
    "text": "the user thinks it's a collection because it's got commas in it and then like in their head they're thinking I've got a collection of hobbies I'll be",
    "start": "3100600",
    "end": "3106780"
  },
  {
    "text": "sterilized so a list of strings but in the end this will fail because there's no way that Jason and Donna can reliably",
    "start": "3106780",
    "end": "3113200"
  },
  {
    "text": "you convert from one to the other and the original version of Jason on it way",
    "start": "3113200",
    "end": "3118990"
  },
  {
    "text": "back when you used to get this kind of error expected Jason or a contract got JSON string contract which to a user",
    "start": "3118990",
    "end": "3127450"
  },
  {
    "text": "like to me is the guy who wrote Jason on never like that makes sense I know what's going on to a you person who's",
    "start": "3127450",
    "end": "3133990"
  },
  {
    "text": "using this library like they've been if it isn't helpful there's something about strings and something about arrays like",
    "start": "3133990",
    "end": "3140020"
  },
  {
    "text": "I I don't see any array in there I was I've got a list but I'm got an array so",
    "start": "3140020",
    "end": "3147580"
  },
  {
    "text": "by far and away this was the most common complaint the fix was to improve that",
    "start": "3147580",
    "end": "3153160"
  },
  {
    "text": "exception message I improved it to error converting system that string to type list of string which improved the amount",
    "start": "3153160",
    "end": "3161980"
  },
  {
    "text": "of support requests and number of people asking you for help around this issue but it didn't completely solve it so I",
    "start": "3161980",
    "end": "3167290"
  },
  {
    "text": "went further and I change it to this so error converting value then I give them",
    "start": "3167290",
    "end": "3172420"
  },
  {
    "text": "the actual value to the type and then I give them a path to that value so it's",
    "start": "3172420",
    "end": "3177520"
  },
  {
    "text": "the hobbyist property and then because some JSON documents can be enormous thousands of lines I gave them the line",
    "start": "3177520",
    "end": "3183350"
  },
  {
    "text": "number in the position so if you compare those two exception messages one a users",
    "start": "3183350",
    "end": "3188900"
  },
  {
    "text": "not gonna have a clue what to do with it and the other one tells them what they did wrong and they're able to fix it in",
    "start": "3188900",
    "end": "3194300"
  },
  {
    "text": "themselves so also with throwing exceptions as you want to fail fast so",
    "start": "3194300",
    "end": "3201440"
  },
  {
    "text": "don't let an object get into an invalid state and then fail later you want to",
    "start": "3201440",
    "end": "3206690"
  },
  {
    "text": "fail when you get into that invalid state when the user does something wrong with your API you want to tell them as soon as possible not sort of hide it",
    "start": "3206690",
    "end": "3213230"
  },
  {
    "text": "away and let it come out later where it's like completely separated from where the original coding bug was",
    "start": "3213230",
    "end": "3219860"
  },
  {
    "text": "introduced so this summation example we've got a report service so our report",
    "start": "3219860",
    "end": "3225260"
  },
  {
    "text": "service takes some credentials so our credentials in this case we're accidentally passing a null if we then",
    "start": "3225260",
    "end": "3234350"
  },
  {
    "text": "at a later date want to validate want to actually generate a report using a customer and we do that and then at that",
    "start": "3234350",
    "end": "3242600"
  },
  {
    "text": "point we get a null reference error so and you developers immediate impulses",
    "start": "3242600",
    "end": "3247880"
  },
  {
    "text": "just find the line where the error happened within their code and I'll see if it happen to generate report now",
    "start": "3247880",
    "end": "3254000"
  },
  {
    "text": "thank Oh silly me I've passed in an old customer and to generate report the customer's valid the problem was as they",
    "start": "3254000",
    "end": "3260750"
  },
  {
    "text": "passed a null credentials so what you want to do when you're designing your API is you want to fail as soon as",
    "start": "3260750",
    "end": "3267230"
  },
  {
    "text": "possible as soon as someone does something wrong does something wrong you want to tell them you don't want to wait",
    "start": "3267230",
    "end": "3273290"
  },
  {
    "text": "until a later date where the kids taking is shopping cart full of muesli and",
    "start": "3273290",
    "end": "3279320"
  },
  {
    "text": "sweets up to a checkout and tell them that we've done something wrong there you want to tell them as soon as they",
    "start": "3279320",
    "end": "3285290"
  },
  {
    "text": "put it in no you can't have that okay so",
    "start": "3285290",
    "end": "3290390"
  },
  {
    "start": "3288000",
    "end": "3463000"
  },
  {
    "text": "designing for extensibility this is actually quite complex so there's a",
    "start": "3290390",
    "end": "3295730"
  },
  {
    "text": "choice between having interfaces and abstract base classes we as developers we love interfaces interfaces are a pure",
    "start": "3295730",
    "end": "3302900"
  },
  {
    "text": "representation of exactly what we want anyone can implement our interface",
    "start": "3302900",
    "end": "3308560"
  },
  {
    "text": "abstract base classes they're dirty like you have to inherit from our class",
    "start": "3308560",
    "end": "3314599"
  },
  {
    "text": "maybe there's some yucky behavior that's along for a ride there's a problem with interfaces meds interfaces don't version",
    "start": "3314599",
    "end": "3321170"
  },
  {
    "text": "at all so there are some ways you can get around this so if you have a user",
    "start": "3321170",
    "end": "3329059"
  },
  {
    "text": "service so v1 the red one over on the left and you have a couple of methods on",
    "start": "3329059",
    "end": "3334849"
  },
  {
    "text": "it like you can't just go and introduce the lis user onto it because everyone who's implemented I user they don't have",
    "start": "3334849",
    "end": "3343160"
  },
  {
    "text": "they're not guaranteed to have a delete user method on their on the interface and if someone then tries to call delete",
    "start": "3343160",
    "end": "3349009"
  },
  {
    "text": "user on a method which doesn't have it you'll get a miss missing method exception so the way to get around this",
    "start": "3349009",
    "end": "3355160"
  },
  {
    "text": "as like you have I use a service and I use a service to which implements I use a service I use a service 3 which",
    "start": "3355160",
    "end": "3362059"
  },
  {
    "text": "implements the previous two and then people at runtime can sort of interrogate these type to discover",
    "start": "3362059",
    "end": "3369019"
  },
  {
    "text": "exactly watch what interface of implements I mean sort of try and like",
    "start": "3369019",
    "end": "3374180"
  },
  {
    "text": "work out exactly the behavior at that point I it's not simple to version an",
    "start": "3374180",
    "end": "3379460"
  },
  {
    "text": "interface the alternative is abstract base classes now I've yet to actually",
    "start": "3379460",
    "end": "3389839"
  },
  {
    "text": "regret implementing something is an abstract base class rather than and face like I've regretted implementing an",
    "start": "3389839",
    "end": "3395420"
  },
  {
    "text": "interface because a later date I've wanted to add something so it I've never really regretted implementing an",
    "start": "3395420",
    "end": "3400910"
  },
  {
    "text": "abstract base class so something which I chose to have as an abstract base class",
    "start": "3400910",
    "end": "3406309"
  },
  {
    "text": "and Jason Donaire is Jason convertor so Jason bird is probably the most popular way that people used to extend Jason on",
    "start": "3406309",
    "end": "3413989"
  },
  {
    "text": "it and I needed to add the ability to have Jason convert of it was only used",
    "start": "3413989",
    "end": "3420200"
  },
  {
    "text": "for reading Jason and a Jason a bit of it was only used for writing Jason now because this is an abstract base class I",
    "start": "3420200",
    "end": "3427099"
  },
  {
    "text": "can just introduce virtual methods onto it so in this case I introduced two virtual properties and in this case they",
    "start": "3427099",
    "end": "3434450"
  },
  {
    "text": "just do nothing but return true because the default behavior of all existing Jason converters as they can both read",
    "start": "3434450",
    "end": "3441739"
  },
  {
    "text": "and write Jason but then if someone wants to say this jes converter it only",
    "start": "3441739",
    "end": "3447289"
  },
  {
    "text": "reads they can override Kenwright and they can return false and set and then materializer will look at Ken right it",
    "start": "3447289",
    "end": "3454460"
  },
  {
    "text": "will see false and we'll skip over it so that's an example of abstract base classes versioning and interfaces not so",
    "start": "3454460",
    "end": "3461300"
  },
  {
    "text": "much and finally we'll just talk about",
    "start": "3461300",
    "end": "3466450"
  },
  {
    "start": "3463000",
    "end": "3599000"
  },
  {
    "text": "this is like we're getting into my opinion a little bit but I much prefer composition over inheritance for",
    "start": "3466450",
    "end": "3473540"
  },
  {
    "text": "extensibility so Jason serializer it's the main",
    "start": "3473540",
    "end": "3478820"
  },
  {
    "text": "probably the main most used class within Jason Bohn it jason serializer is",
    "start": "3478820",
    "end": "3484400"
  },
  {
    "text": "incredibly customizable and composable and extensible but if you actually look",
    "start": "3484400",
    "end": "3489590"
  },
  {
    "text": "at Jason's sterilizer there isn't a single virtual method on it everything",
    "start": "3489590",
    "end": "3494690"
  },
  {
    "text": "is done by a configuration and composition so if you start with a Jason",
    "start": "3494690",
    "end": "3500840"
  },
  {
    "text": "sterilizer but default behavior you can plug in your own custom converters say",
    "start": "3500840",
    "end": "3506150"
  },
  {
    "text": "you want your in ohms as strings rather than numbers you can plug in a camel",
    "start": "3506150",
    "end": "3512240"
  },
  {
    "text": "case contract resolver so you want your properties camel cased you can pay plug",
    "start": "3512240",
    "end": "3517580"
  },
  {
    "text": "in a memory trace Rider so you want trace messages written to a coming in memories for you to look at default",
    "start": "3517580",
    "end": "3525800"
  },
  {
    "text": "serialization binder svet spool mapping between type names and strings and type names at runtime but by having",
    "start": "3525800",
    "end": "3534140"
  },
  {
    "text": "composition is allows people to easily swap in and out behavior of they want someone might want Java Script a",
    "start": "3534140",
    "end": "3540380"
  },
  {
    "text": "converter to convert Doni dates of JavaScript dates someone else might want them converted to ISO strings if we try",
    "start": "3540380",
    "end": "3548900"
  },
  {
    "text": "to do all of this worth inheritance you look at all the different permutations that you can see like it might take a",
    "start": "3548900",
    "end": "3555560"
  },
  {
    "text": "dozen inheritant classes inheriting from Jason serializer to be able to handle",
    "start": "3555560",
    "end": "3562550"
  },
  {
    "text": "all these different situations well with composition we can just plug in behavior as we wanted and the great thing is",
    "start": "3562550",
    "end": "3569270"
  },
  {
    "text": "about composition as in other people can come along they can implement their own",
    "start": "3569270",
    "end": "3574340"
  },
  {
    "text": "trace writer maybe someone wants a log4net trace writer they can write",
    "start": "3574340",
    "end": "3579380"
  },
  {
    "text": "their own version they can put that within a new package and you could consume it and now Jason Don it is writing trace messages",
    "start": "3579380",
    "end": "3586670"
  },
  {
    "text": "and will get written to your logging framework and this has happened with",
    "start": "3586670",
    "end": "3594000"
  },
  {
    "text": "Jason Garnett so people who use F sharp they have written their own set of",
    "start": "3594000",
    "end": "3599670"
  },
  {
    "text": "extensions for Jason Don it there put it in their own NuGet package Newton soft",
    "start": "3599670",
    "end": "3604980"
  },
  {
    "text": "Jason dot F sharp and then people are able to reference that NuGet package and",
    "start": "3604980",
    "end": "3610530"
  },
  {
    "text": "then use those converters with JSON dotnet so it's it's a lot easier and",
    "start": "3610530",
    "end": "3617099"
  },
  {
    "text": "provides a much better way of providing customization compared to just monolithic inheritance of Jason",
    "start": "3617099",
    "end": "3624210"
  },
  {
    "text": "serializer so that's all I have for you today if",
    "start": "3624210",
    "end": "3630240"
  },
  {
    "text": "you're interested in learning more about API design I really recommend this book so it was written by a couple of guys",
    "start": "3630240",
    "end": "3636810"
  },
  {
    "text": "who work for Microsoft it's quite old now a lot of the concepts like the power",
    "start": "3636810",
    "end": "3644280"
  },
  {
    "text": "of sameness the pit of success like I was ice will last forever there is some",
    "start": "3644280",
    "end": "3649410"
  },
  {
    "text": "out-of-date stuff in it and you won't see new topics talked about like there's nothing about async or link or dynamic",
    "start": "3649410",
    "end": "3656780"
  },
  {
    "text": "but so I recommend looking at it if you're curious and there's also a great",
    "start": "3656780",
    "end": "3662569"
  },
  {
    "text": "presentation I have seen from someone who works for Google so there's some",
    "start": "3662569",
    "end": "3668760"
  },
  {
    "text": "Java examples in there but like this API design everything you've learned today",
    "start": "3668760",
    "end": "3674040"
  },
  {
    "text": "well not everything but most of what you've learned today you can apply both net you can apply to JavaScript you",
    "start": "3674040",
    "end": "3679560"
  },
  {
    "text": "apply to Java you can apply to any language and that's it I hope everyone",
    "start": "3679560",
    "end": "3686880"
  },
  {
    "text": "has learned something enjoy the rest of in DC I'll be sticking around for come the rest of a conference if you want to",
    "start": "3686880",
    "end": "3693540"
  },
  {
    "text": "ask me any questions I think we're running pretty short on time but yeah thank you very much",
    "start": "3693540",
    "end": "3700670"
  },
  {
    "text": "you [Applause]",
    "start": "3700720",
    "end": "3706930"
  }
]