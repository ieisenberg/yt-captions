[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "hello everyone this is the talk called lazy programmers guide to writing",
    "start": "1639",
    "end": "8429"
  },
  {
    "text": "thousands of tests it's about property based testing if you're if you're not a lazy programmer",
    "start": "8429",
    "end": "14839"
  },
  {
    "text": "maybe this talk will not be of interest to you but like most people I'm in fact",
    "start": "14839",
    "end": "21060"
  },
  {
    "text": "a lazy programmer so I don't want to write lots of code if I don't have to and it's probably based testing is one",
    "start": "21060",
    "end": "26519"
  },
  {
    "text": "way to avoid doing that so my name is Scott lotion and there we go Scott",
    "start": "26519",
    "end": "36059"
  },
  {
    "text": "flushing f shot fun and profit calm so the examples in this talk will be can f-sharp code but it's the language is",
    "start": "36059",
    "end": "42390"
  },
  {
    "text": "not really important that is the concepts that importance and these concepts apply to pretty much any",
    "start": "42390",
    "end": "48420"
  },
  {
    "text": "programming language so here we are the NDC community unfortunately is a social",
    "start": "48420",
    "end": "54449"
  },
  {
    "text": "distancing so I'm working from home like you are hopefully we can all stay safe",
    "start": "54449",
    "end": "59760"
  },
  {
    "text": "and still have some fun right so um in order to set this up I'm going to tell",
    "start": "59760",
    "end": "66570"
  },
  {
    "start": "62000",
    "end": "167000"
  },
  {
    "text": "you a story it's a semi made-up story part of it's true and part of it isn't I",
    "start": "66570",
    "end": "72060"
  },
  {
    "text": "kind of exaggerated but I mean I was working with the remote developer a long",
    "start": "72060",
    "end": "78240"
  },
  {
    "text": "time ago in a galaxy far far away and for the benefit the story I'm just going",
    "start": "78240",
    "end": "84000"
  },
  {
    "text": "to say that we needed a function that would add two numbers together okay it was more complicated in reality but",
    "start": "84000",
    "end": "89970"
  },
  {
    "text": "they'll go how do you add two numbers together and so the remote developer says sure I've just finished adding the",
    "start": "89970",
    "end": "95939"
  },
  {
    "text": "add function I'm happy and I say have you written unit tests and they say you",
    "start": "95939",
    "end": "102630"
  },
  {
    "text": "want unit tests as well yeah okay they",
    "start": "102630",
    "end": "107759"
  },
  {
    "text": "kind of sent us a price so they wrote a test you know given inputs of one and three I would expect the output is four",
    "start": "107759",
    "end": "114180"
  },
  {
    "text": "that was their unit test and then they say I think can we call it done and I",
    "start": "114180",
    "end": "119490"
  },
  {
    "text": "would say or actually you know that's only one test how do you know it doesn't fail for other inputs it's just like one",
    "start": "119490",
    "end": "126210"
  },
  {
    "text": "and three so they say okay let me write another unit test and they said okay I just wrote another",
    "start": "126210",
    "end": "132750"
  },
  {
    "text": "awesome unit test they thought they were you know certain kind of develop who said that kind of thing two and two is four and that's an",
    "start": "132750",
    "end": "139860"
  },
  {
    "text": "awesome unit test and I wasn't so impressed I said you know you're testing",
    "start": "139860",
    "end": "147480"
  },
  {
    "text": "for special cases how do you know it doesn't fail for other tests do you haven't thought of I know and he was",
    "start": "147480",
    "end": "153720"
  },
  {
    "text": "like you want more tests I've only written to well how much do you want and",
    "start": "153720",
    "end": "159870"
  },
  {
    "text": "that is a good question how do you know they have written enough tests and this is quite a deep question",
    "start": "159870",
    "end": "167190"
  },
  {
    "text": "how do you know that you have enough tests is to test enough five tests a hundred tests how the top point of",
    "start": "167190",
    "end": "174359"
  },
  {
    "text": "testing is to gain confidence in the implementation and you can have 100%",
    "start": "174359",
    "end": "182129"
  },
  {
    "text": "test coverage and still have you know bad implementation and you can have you know a small test coverage but still",
    "start": "182129",
    "end": "187829"
  },
  {
    "text": "have very high confidence in the implementation and so that's one of the things that we're going to try and talk",
    "start": "187829",
    "end": "193230"
  },
  {
    "text": "about so in this case I didn't trust this person to write unit tests so I",
    "start": "193230",
    "end": "200699"
  },
  {
    "text": "thought I'd write them myself so I had a look at the existing test this is f sharp code here when I add one and three",
    "start": "200699",
    "end": "207540"
  },
  {
    "text": "I expect four I now do the add function and I assert that the the answer is four",
    "start": "207540",
    "end": "213359"
  },
  {
    "text": "and that passed okay and then let me write another tester for two and two and",
    "start": "213359",
    "end": "219120"
  },
  {
    "text": "I call the add function and I expect the answer to be four okay so that's good that one passed the test",
    "start": "219120",
    "end": "225290"
  },
  {
    "text": "so let me write a test okay so when I add minus one and three let me do",
    "start": "225290",
    "end": "231090"
  },
  {
    "text": "something tricky I have minus 103 and I'll expect the answer to be two and",
    "start": "231090",
    "end": "236340"
  },
  {
    "text": "this test fails so I thought okay well that's kind of funny let me go and look",
    "start": "236340",
    "end": "242579"
  },
  {
    "text": "at the implementation let's just check and see how everything is so here's the implementation",
    "start": "242579",
    "end": "248110"
  },
  {
    "text": "to add your numbers together return for okay and in F sharp you don't need a",
    "start": "248110",
    "end": "253750"
  },
  {
    "text": "return keyword so that was the entire implementation and I was like what what",
    "start": "253750",
    "end": "260019"
  },
  {
    "text": "is this this is terrible so I wrote back and I said I'm gonna write the tests and",
    "start": "260019",
    "end": "266320"
  },
  {
    "text": "you're gonna make them class okay I don't trust him and he said sure no worries",
    "start": "266320",
    "end": "271330"
  },
  {
    "text": "so let me write some more tests I'm gonna two and three I expect five and he",
    "start": "271330",
    "end": "277960"
  },
  {
    "text": "wrote his implementation past that that okay and then if I do let's say one and",
    "start": "277960",
    "end": "283480"
  },
  {
    "text": "forty one I'd expect forty two and that test also passed so okay maybe maybe",
    "start": "283480",
    "end": "290740"
  },
  {
    "text": "he's a implementation is getting better so let me just check the implementation",
    "start": "290740",
    "end": "295750"
  },
  {
    "text": "though just to be sure so this is the implementation and if the if the input",
    "start": "295750",
    "end": "303490"
  },
  {
    "text": "is 2 and 3 the answer is five and if the input is 1 and 41 the answer is 42 and",
    "start": "303490",
    "end": "309490"
  },
  {
    "text": "in all other cases the input the answers for and you know like this is not a very",
    "start": "309490",
    "end": "317080"
  },
  {
    "text": "good implementation this is not a very good implementation and I'm saying so I",
    "start": "317080",
    "end": "322540"
  },
  {
    "text": "said you what are you even doing you haven't even implemented anything yet you've just made the test pass and he",
    "start": "322540",
    "end": "329800"
  },
  {
    "text": "said chill out I'm totally following TDD best practices which is you write only",
    "start": "329800",
    "end": "336550"
  },
  {
    "start": "334000",
    "end": "390000"
  },
  {
    "text": "enough code to make the failing unit test pass and that's exactly what he was doing and you know I think this sir I'm",
    "start": "336550",
    "end": "345070"
  },
  {
    "text": "not sure that's quite what they meant when they said that but you know he's following it literally okay so I thought",
    "start": "345070",
    "end": "353979"
  },
  {
    "text": "let me just try and make it more complicated I'm gonna have a whole set of test data a whole array of test data",
    "start": "353979",
    "end": "361150"
  },
  {
    "text": "and for each answer in the array I'm going to see if the the actual answer",
    "start": "361150",
    "end": "367870"
  },
  {
    "text": "matches the expected answer and that passed and I",
    "start": "367870",
    "end": "374200"
  },
  {
    "text": "look at implementation again and of course you can guess what he did basically every possible thing that was",
    "start": "374200",
    "end": "380680"
  },
  {
    "text": "in the input was hard-coded so this we",
    "start": "380680",
    "end": "387130"
  },
  {
    "text": "have a problem houston we have a problem here it dawned on me that I was dealing with a certain",
    "start": "387130",
    "end": "393250"
  },
  {
    "start": "390000",
    "end": "536000"
  },
  {
    "text": "kind of person the legendary burned-out lazy malicious",
    "start": "393250",
    "end": "399220"
  },
  {
    "text": "programmer called the enterprise developer from hell and you might have",
    "start": "399220",
    "end": "405010"
  },
  {
    "text": "in your life of developer you've fully met people like this they are lazy and they're also malicious and they also are",
    "start": "405010",
    "end": "412030"
  },
  {
    "text": "not they sometimes they just try and make life worse for everybody else so and I've used the evil Garfield's as the",
    "start": "412030",
    "end": "420900"
  },
  {
    "text": "symbol for this person so I gotta rethink my approach the enterprise",
    "start": "420900",
    "end": "428320"
  },
  {
    "text": "developer from hell will always make specific examples pass no matter what I do so what can I do I have to not use",
    "start": "428320",
    "end": "436150"
  },
  {
    "text": "specific examples but how can I write a test without having any examples of what",
    "start": "436150",
    "end": "441940"
  },
  {
    "text": "I want okay so let's use random numbers so this way",
    "start": "441940",
    "end": "447700"
  },
  {
    "text": "he can't guess what they are so I take a random integer and another random integer and I put down the expected",
    "start": "447700",
    "end": "453760"
  },
  {
    "text": "answer and I put the actual answer that I got from calling this function and I",
    "start": "453760",
    "end": "458920"
  },
  {
    "text": "check that the answers are equal and this is fantastic let me just do it a hundred times just",
    "start": "458920",
    "end": "464710"
  },
  {
    "text": "in case he gets lucky with the two random numbers so I'm gonna do a hundred times it's just so it's not a",
    "start": "464710",
    "end": "471010"
  },
  {
    "text": "coincidence okay so there's the final test at a hundred times take two random integers add them together and make sure",
    "start": "471010",
    "end": "477610"
  },
  {
    "text": "that when we call our new add function that the the same answer so this is",
    "start": "477610",
    "end": "482860"
  },
  {
    "text": "break this is great that the enterprise developer for hell cannot possibly beat this implementation this test however",
    "start": "482860",
    "end": "490980"
  },
  {
    "text": "however we have a bit of a problem because I have basically re-implemented",
    "start": "490980",
    "end": "496750"
  },
  {
    "text": "I'm using the built in addition function and if if it was a brand new kind of",
    "start": "496750",
    "end": "502390"
  },
  {
    "text": "functionality I'd have to re-implement the functionality in the tests to check whether I got",
    "start": "502390",
    "end": "507969"
  },
  {
    "text": "my answer and this is a really common problem interesting is you'd basically have to re-implement what you want in",
    "start": "507969",
    "end": "513729"
  },
  {
    "text": "order to test it and that's you know that's an anti-pattern you do not want to be reimplemented things to check that",
    "start": "513729",
    "end": "519339"
  },
  {
    "text": "they work so this is a problem so how can we fix this how can we fix the",
    "start": "519339",
    "end": "524949"
  },
  {
    "text": "problem of implementing ads without using the add function all right so if",
    "start": "524949",
    "end": "532240"
  },
  {
    "text": "you can't test it by comparing it with something what you know how can we test it so how would you write this is a",
    "start": "532240",
    "end": "538600"
  },
  {
    "start": "536000",
    "end": "556000"
  },
  {
    "text": "question for everyone listening how would you write a test for an ad function without Eitri implementing a",
    "start": "538600",
    "end": "545980"
  },
  {
    "text": "door without using any of the built-in libraries and without using any specific examples like two plus two equals four",
    "start": "545980",
    "end": "553089"
  },
  {
    "text": "so that's the challenge and this leads us to property based testing so in order",
    "start": "553089",
    "end": "563290"
  },
  {
    "start": "556000",
    "end": "569000"
  },
  {
    "text": "to implement it we need to know what the requirements are and what are the requirements for the add function it's",
    "start": "563290",
    "end": "571569"
  },
  {
    "text": "hard to know to get started with these things but one way is to think about if you don't know what the arts are my",
    "start": "571569",
    "end": "577059"
  },
  {
    "text": "answer is you could often compare it with the wrong answer so we don't know what ads should do but we know that our",
    "start": "577059",
    "end": "583629"
  },
  {
    "text": "Edition is different from subtraction how does addition differ from subtraction well one simple thing is",
    "start": "583629",
    "end": "590350"
  },
  {
    "text": "that the parameter order makes difference so in addition it doesn't matter which order the parameters are but its attraction it does you know five",
    "start": "590350",
    "end": "597339"
  },
  {
    "text": "minus two is not the same as two minus five so we could write a test for that okay so that's a little difference we",
    "start": "597339",
    "end": "603879"
  },
  {
    "text": "can write a test for so here's our test that checks that little thing so we say",
    "start": "603879",
    "end": "610629"
  },
  {
    "text": "that whatever the thing is it doesn't depend on parameter order so we take a we do what we did before we take a",
    "start": "610629",
    "end": "615639"
  },
  {
    "text": "hundred different random numbers and we add them together and we also add them",
    "start": "615639",
    "end": "621519"
  },
  {
    "text": "together with the parameters reversed okay and then we check that we have the same answer and if we do have the same",
    "start": "621519",
    "end": "629769"
  },
  {
    "text": "answer you know it's a it's a it's a quite good test it's not a hundred percent perfect but it certainly",
    "start": "629769",
    "end": "635199"
  },
  {
    "text": "lemonade's through the so of subtraction and it's a whole bunch of incorrect",
    "start": "635199",
    "end": "640250"
  },
  {
    "text": "implementations have been eliminated this way now of course the enterprise",
    "start": "640250",
    "end": "645860"
  },
  {
    "text": "developer from hell is clever and they're evil and they will respond with this implementation to add two numbers",
    "start": "645860",
    "end": "652790"
  },
  {
    "text": "together you multiply them now this passes the the test is particularly easy",
    "start": "652790",
    "end": "658370"
  },
  {
    "text": "as being a very very evil today unfortunately this test passes with this",
    "start": "658370",
    "end": "666050"
  },
  {
    "text": "bad implementation but we get the hang of it here we can keep doing the same",
    "start": "666050",
    "end": "671750"
  },
  {
    "start": "670000",
    "end": "807000"
  },
  {
    "text": "thing so what's the difference between addition and multiplication well that's a bit trickier but you know a simple one",
    "start": "671750",
    "end": "677959"
  },
  {
    "text": "is if you add one just and you do it twice that's the same as adding two but",
    "start": "677959",
    "end": "684589"
  },
  {
    "text": "if you multiply by one twice that's not the same as multiplying by two so let's",
    "start": "684589",
    "end": "689750"
  },
  {
    "text": "turn that into a test as well we're going to call it to adding ones two of",
    "start": "689750",
    "end": "695930"
  },
  {
    "text": "adding ones is the same as one or two so here you go so again we'll take our",
    "start": "695930",
    "end": "702290"
  },
  {
    "text": "random number we'll add one and we'll add one again and the second one is we'll add two and they should be the",
    "start": "702290",
    "end": "711320"
  },
  {
    "text": "same answer now this will eliminate the multiplication implementation so that",
    "start": "711320",
    "end": "716959"
  },
  {
    "text": "passes but the enterprise developer then says ok I'm going to implement this with minus y with subtraction and and this",
    "start": "716959",
    "end": "725149"
  },
  {
    "text": "part it says because subtracting 1 twice is the same as subtracting 2 so when I",
    "start": "725149",
    "end": "731810"
  },
  {
    "text": "try and do this test this test will now pass with subtraction as the implementation but we have the previous",
    "start": "731810",
    "end": "738860"
  },
  {
    "text": "test as well so when I add two numbers that number that doesn't depend on parameter order so that the previous",
    "start": "738860",
    "end": "745760"
  },
  {
    "text": "test now fails so if the combination of these two tests is what narrows it down each individual test eliminates a set of",
    "start": "745760",
    "end": "753140"
  },
  {
    "text": "things and when you combine the two tests they they really start narrowing it down a lot so can the interface",
    "start": "753140",
    "end": "761029"
  },
  {
    "text": "developer from he'll come up with a",
    "start": "761029",
    "end": "766160"
  },
  {
    "text": "a test that implementation that will fail let's see but yes he can",
    "start": "766160",
    "end": "775579"
  },
  {
    "text": "this is his implementation to add two numbers together you return zero and actually this passes all the tests",
    "start": "775579",
    "end": "782290"
  },
  {
    "text": "because you know doing it twice that passes and it doesn't depend on the",
    "start": "782290",
    "end": "789230"
  },
  {
    "text": "parameter that passes so okay how can we write another kind of test that",
    "start": "789230",
    "end": "796540"
  },
  {
    "text": "eliminates this kind of implementation and the problem is that we're not we",
    "start": "796540",
    "end": "803899"
  },
  {
    "text": "haven't really understood addition because there is somehow the addition",
    "start": "803899",
    "end": "809360"
  },
  {
    "start": "807000",
    "end": "916000"
  },
  {
    "text": "function is the output has to be connected to the input somehow right it does depend on the input but we don't",
    "start": "809360",
    "end": "815569"
  },
  {
    "text": "want to have we don't always know how it depends on the input because without actually we implementing it but is there",
    "start": "815569",
    "end": "822829"
  },
  {
    "text": "a trivial input that we do know the answer to like without having to be implementing a thing is there enough is",
    "start": "822829",
    "end": "828949"
  },
  {
    "text": "there an input of add that we always know what the answer will be and the answer is yes if you add zero to",
    "start": "828949",
    "end": "835250"
  },
  {
    "text": "something that's the same as doing nothing so let's write a test for that okay so",
    "start": "835250",
    "end": "842389"
  },
  {
    "text": "we're going to take do it for a hundred times to do a random integer we're going to add zero to it and then we're also",
    "start": "842389",
    "end": "849139"
  },
  {
    "text": "going to have the original number and they should be the same I you should be untouched so if we add this extra test",
    "start": "849139",
    "end": "859370"
  },
  {
    "text": "to it this actually will pretty much defeat the enterprise developer from hell we have this tests we have this",
    "start": "859370",
    "end": "866660"
  },
  {
    "text": "test and we have this test and if you combine these three tests together any",
    "start": "866660",
    "end": "872449"
  },
  {
    "text": "particular implementation will be much harder to use much harder to have a",
    "start": "872449",
    "end": "878990"
  },
  {
    "text": "sneaky thing in fact this is not hundred percent perfect I mean this is pretty true there is actually one one way of",
    "start": "878990",
    "end": "885740"
  },
  {
    "text": "making this fail but we can extend this idea to make it so it's literally impossible to fail",
    "start": "885740",
    "end": "890830"
  },
  {
    "text": "so that's the idea of property based testing we're not tasting individual examples we're testing properties of the",
    "start": "890830",
    "end": "898660"
  },
  {
    "text": "function the fact that the this independent of parameter order that's a property of the function no matter what the inputs are is always true it's an",
    "start": "898660",
    "end": "906250"
  },
  {
    "text": "invariant of them of the function adding zero is the same as doing nothing that's always true no matter what number you",
    "start": "906250",
    "end": "912070"
  },
  {
    "text": "have is input so without using specific examples we've narrowed down the implementation of ads so let's refactor",
    "start": "912070",
    "end": "918430"
  },
  {
    "start": "916000",
    "end": "1066000"
  },
  {
    "text": "this out let's extract the shared code we've got a lot of common code here so what we're going to do is write a method",
    "start": "918430",
    "end": "924760"
  },
  {
    "text": "or a function called property check and it has a parameter which is the property function this is what we're going to be",
    "start": "924760",
    "end": "931000"
  },
  {
    "text": "passing in then in this particular case the property function takes a pair of",
    "start": "931000",
    "end": "936280"
  },
  {
    "text": "integers as input and returns a boolean is out but it always returns true or false and so our generic property",
    "start": "936280",
    "end": "944080"
  },
  {
    "text": "function looks like this we take a random integer we take another round of integer and we call this property",
    "start": "944080",
    "end": "950020"
  },
  {
    "text": "function with these two integers and the result is either true or false okay and we always want the result to be true",
    "start": "950020",
    "end": "956020"
  },
  {
    "text": "this property should always be true and if it is always true then we have a good",
    "start": "956020",
    "end": "961750"
  },
  {
    "text": "then the property we have a good idea that the property passes okay so this property function technically as a",
    "start": "961750",
    "end": "969280"
  },
  {
    "text": "function we just generally call it a property it's like something that's always true the set of inputs and so",
    "start": "969280",
    "end": "976450"
  },
  {
    "text": "this is basically probably pieces are basically we've written our property based testing framework right here it's",
    "start": "976450",
    "end": "981610"
  },
  {
    "text": "not a favor because it's a single function but that's how simple it is right so this is what the test looked",
    "start": "981610",
    "end": "987010"
  },
  {
    "text": "like we have a property function which is like the cumulative property where the parameter order doesn't matter and",
    "start": "987010",
    "end": "992520"
  },
  {
    "text": "the property function just like takes the two inputs calls the function with with the infants reversed and the answer",
    "start": "992520",
    "end": "999580"
  },
  {
    "text": "should be the same and then our tests are actual tests look like this we have",
    "start": "999580",
    "end": "1004920"
  },
  {
    "text": "a test for the particular thing and we just check that that particular property function is always true for random",
    "start": "1004920",
    "end": "1010620"
  },
  {
    "text": "inputs so this is the second property now we",
    "start": "1010620",
    "end": "1018290"
  },
  {
    "text": "only need one of the two inputs but here's the example he's written as a property we add it once where it twice",
    "start": "1018290",
    "end": "1023870"
  },
  {
    "text": "and the answer should be the same so it always always returns a billion these properties are always boolean returning",
    "start": "1023870",
    "end": "1029959"
  },
  {
    "text": "functions and again if we want to use it in a tests we take this boolean",
    "start": "1029959",
    "end": "1035720"
  },
  {
    "text": "returning function and we pass it into our property checking thing which has been it checks that property for a",
    "start": "1035720",
    "end": "1041240"
  },
  {
    "text": "hundred random inputs okay now if you're a mathematician you'd recognize adding",
    "start": "1041240",
    "end": "1047630"
  },
  {
    "text": "one twice it's basically a very crude version of associativity so the real prop the real addition property is",
    "start": "1047630",
    "end": "1054350"
  },
  {
    "text": "associative it'll and the third one adding zero we call this the identity property if you add zero it's the same",
    "start": "1054350",
    "end": "1061760"
  },
  {
    "text": "as doing nothing and we're going to test using that and there we go so let's",
    "start": "1061760",
    "end": "1068000"
  },
  {
    "start": "1066000",
    "end": "1110000"
  },
  {
    "text": "review what we've got the parameter order doesn't matter doing add one twice is the same as doing it that's adding",
    "start": "1068000",
    "end": "1074150"
  },
  {
    "text": "two and adding zero doing nothing these properties apply to all the inputs no matter what they are no matter how",
    "start": "1074150",
    "end": "1080540"
  },
  {
    "text": "random they are these things are always true so we have a very high confidence going back to my original statement we",
    "start": "1080540",
    "end": "1087140"
  },
  {
    "text": "haven't tested all four billion inputs but by choice by choosing random inputs",
    "start": "1087140",
    "end": "1093740"
  },
  {
    "text": "and they always work out we have a high confidence that the implementation is",
    "start": "1093740",
    "end": "1098750"
  },
  {
    "text": "correct so these we basically written three tests and rather than three",
    "start": "1098750",
    "end": "1105679"
  },
  {
    "text": "example tests we actually have three property tests now these things have",
    "start": "1105679",
    "end": "1113090"
  },
  {
    "start": "1110000",
    "end": "1186000"
  },
  {
    "text": "words in in in mathematics we call this community to commutativity associativity and identity and this is not just a test",
    "start": "1113090",
    "end": "1121400"
  },
  {
    "text": "this is actually now a specification and anything that implements these three properties is addition and that actually",
    "start": "1121400",
    "end": "1128090"
  },
  {
    "text": "defines addition so by defining it you literally can't if you pass these three tests of these",
    "start": "1128090",
    "end": "1135200"
  },
  {
    "text": "three properties that meets the specification of what addition is so you literally cannot create an incorrect",
    "start": "1135200",
    "end": "1141890"
  },
  {
    "text": "implementation so that's the idea behind property based testing you can see it's pretty",
    "start": "1141890",
    "end": "1148360"
  },
  {
    "text": "straightforward it's something you could write yourself in a few minutes if you wanted to but yeah I just want to",
    "start": "1148360",
    "end": "1155620"
  },
  {
    "text": "re-emphasize that by using this kind of property specification approach we've",
    "start": "1155620",
    "end": "1160870"
  },
  {
    "text": "actually understood the requirements in a much deeper way if we just said that two plus two is four that's just an",
    "start": "1160870",
    "end": "1166299"
  },
  {
    "text": "example of what addition is because two times two is also four it doesn't really",
    "start": "1166299",
    "end": "1171970"
  },
  {
    "text": "narrow it down it doesn't really tell you what it's a true meaning of the thing is if we use specifications like",
    "start": "1171970",
    "end": "1178809"
  },
  {
    "text": "this we it really helps to understand drive a deeper understanding of what we",
    "start": "1178809",
    "end": "1184240"
  },
  {
    "text": "really really want the system to do right so why bother with this example",
    "start": "1184240",
    "end": "1190629"
  },
  {
    "start": "1186000",
    "end": "1312000"
  },
  {
    "text": "you know this kind of malicious programmer is realistic very unrealistic",
    "start": "1190629",
    "end": "1195909"
  },
  {
    "text": "very over-the-top nobody would ever do this surely so",
    "start": "1195909",
    "end": "1202480"
  },
  {
    "text": "here's a way of thinking about it we have evil people we have stupid people and we have lazy people and it doesn't",
    "start": "1202480",
    "end": "1211480"
  },
  {
    "text": "actually matter which kind of person you're dealing with because whether they're evil stupid or lazy they will",
    "start": "1211480",
    "end": "1217600"
  },
  {
    "text": "still mess up your codes stupid people can cause bad bugs just as much as evil",
    "start": "1217600",
    "end": "1223149"
  },
  {
    "text": "people so you know it doesn't really make any difference and there's actually",
    "start": "1223149",
    "end": "1229330"
  },
  {
    "text": "one person I've always had to deal with one particular stupid person in my career that I've dealt with a lot which",
    "start": "1229330",
    "end": "1236500"
  },
  {
    "text": "is kind of frustrating is the stupid person it's me and when I'm writing code",
    "start": "1236500",
    "end": "1243009"
  },
  {
    "text": "for the first time in a new project I often don't understand the requirements and I often write code that I'm not",
    "start": "1243009",
    "end": "1249639"
  },
  {
    "text": "happy with and it often has bugs because they didn't understand something properly and so I am really am the wheel",
    "start": "1249639",
    "end": "1255370"
  },
  {
    "text": "enterprise developer help myself especially myself from six months ago who was too lazy or too stupid to do",
    "start": "1255370",
    "end": "1262389"
  },
  {
    "text": "something and I'm sure that a lot of you have the same experience you look at old code and you think yeah I could have",
    "start": "1262389",
    "end": "1269500"
  },
  {
    "text": "done this complete in a different way because now that I'm older and I understand the system better I could",
    "start": "1269500",
    "end": "1274990"
  },
  {
    "text": "probably write it in a much better way so that just comes from you know there's nothing wrong that happens to all of us",
    "start": "1274990",
    "end": "1280670"
  },
  {
    "text": "this just comes with learning about the system better right so it's not because",
    "start": "1280670",
    "end": "1286730"
  },
  {
    "text": "I'm evil but just because I'm unaware and I'm blind sometimes so doing the",
    "start": "1286730",
    "end": "1291740"
  },
  {
    "text": "thinking and this is the lazy thing we're too lazy to think if right if I had spent more time thinking about the",
    "start": "1291740",
    "end": "1299150"
  },
  {
    "text": "properties that would probably help me get better tests and also it ask helps me understand the requirements better if",
    "start": "1299150",
    "end": "1304940"
  },
  {
    "text": "I ask well what is a property that always has to be true if I can't come up with a good answer it means that I",
    "start": "1304940",
    "end": "1310130"
  },
  {
    "text": "probably don't understand the system yet all right so that's the home home made way of doing probably based testing but",
    "start": "1310130",
    "end": "1318110"
  },
  {
    "start": "1312000",
    "end": "1484000"
  },
  {
    "text": "let's look at a a library you don't really want to write your own test this",
    "start": "1318110",
    "end": "1323810"
  },
  {
    "text": "way and the library is called quick check and it's a toolkit for doing property based testing it was originally",
    "start": "1323810",
    "end": "1331940"
  },
  {
    "text": "developed for Haskell but the ideas are now available pretty much every",
    "start": "1331940",
    "end": "1338000"
  },
  {
    "text": "programming language has a property based testing framework or sometimes it's called quick check framework very",
    "start": "1338000",
    "end": "1346310"
  },
  {
    "text": "very good I highly recommend that you look into these so this is how it works you have this library has an API and",
    "start": "1346310",
    "end": "1354700"
  },
  {
    "text": "inside there's two things called a generator and a shrinker which I will talk about so you have your property",
    "start": "1354700",
    "end": "1362000"
  },
  {
    "text": "which remember is a function and it's a function that returns boolean you pass",
    "start": "1362000",
    "end": "1367850"
  },
  {
    "text": "it in to this API and the first thing is that the generator part generates random",
    "start": "1367850",
    "end": "1373730"
  },
  {
    "text": "inputs to you know to generate random",
    "start": "1373730",
    "end": "1379940"
  },
  {
    "text": "inputs for your function but then the second part the shrinker is crates minimal failing inputs the problem with",
    "start": "1379940",
    "end": "1386720"
  },
  {
    "text": "having completely random inputs is they might be some incredibly random large number and it doesn't really tell you",
    "start": "1386720",
    "end": "1392140"
  },
  {
    "text": "what's gone wrong you know says yeah well this thing failed if you pass in 475 billion or something but yeah that's",
    "start": "1392140",
    "end": "1398600"
  },
  {
    "text": "not very helpful in understanding what's going on so having a minimal failing input is really really useful",
    "start": "1398600",
    "end": "1404050"
  },
  {
    "text": "so let's start off with showing you some codes so here is our correct",
    "start": "1404050",
    "end": "1409210"
  },
  {
    "text": "implementation of ads using the built-in library so here's our property that",
    "start": "1409210",
    "end": "1415300"
  },
  {
    "text": "should always be true no matter what the inputs are and then in F sharp which is",
    "start": "1415300",
    "end": "1421300"
  },
  {
    "text": "what I'm using you just say check this property using the built in quick check",
    "start": "1421300",
    "end": "1426670"
  },
  {
    "text": "library so that's its that's how simple doing it is it sounds like it's",
    "start": "1426670",
    "end": "1433150"
  },
  {
    "text": "something kind of complicated but it's actually really simple it's just a few lines of code and when we do this test",
    "start": "1433150",
    "end": "1439270"
  },
  {
    "text": "if everything runs well we'll say a message like this we passed a hundred tests so we put it is a generator 200",
    "start": "1439270",
    "end": "1446410"
  },
  {
    "text": "random inputs for this property and every single one of them return true",
    "start": "1446410",
    "end": "1451680"
  },
  {
    "text": "right so let's look at how the generator works because it's kind of interesting first of all those generators for all",
    "start": "1451680",
    "end": "1458470"
  },
  {
    "text": "the primitive types is an int generator there's a string generator which is",
    "start": "1458470",
    "end": "1463630"
  },
  {
    "text": "really useful because it generates random unicode strings with non-printable characters and all sorts",
    "start": "1463630",
    "end": "1469480"
  },
  {
    "text": "of weird things in it which you might not normally think about if you're testing your strings is a billion",
    "start": "1469480",
    "end": "1476230"
  },
  {
    "text": "generators it just generates random billions true and false whatever so there's the kind of basic primitive",
    "start": "1476230",
    "end": "1483250"
  },
  {
    "text": "generators and then what you can do is you can generate compound types so if",
    "start": "1483250",
    "end": "1489520"
  },
  {
    "start": "1484000",
    "end": "1623000"
  },
  {
    "text": "you want to generate pairs of integers you just say I want you to generate pairs of integers and it will it will do",
    "start": "1489520",
    "end": "1495580"
  },
  {
    "text": "that you know each part of the pair is going to be a different integer in functional program we have the optional",
    "start": "1495580",
    "end": "1501790"
  },
  {
    "text": "type and so you can generate optional types the same way it'll sometimes it'll be something and sometimes would be",
    "start": "1501790",
    "end": "1507370"
  },
  {
    "text": "nothing and if you have your own custom type so I'm here I'm defining a custom",
    "start": "1507370",
    "end": "1513280"
  },
  {
    "text": "type in F sharp and it's three different choices it's just kind of like an enum you can think of it there's a red case",
    "start": "1513280",
    "end": "1519670"
  },
  {
    "text": "there's a green case and a blue case and green case there's an integer associated with it and in the blue case there's a",
    "start": "1519670",
    "end": "1526450"
  },
  {
    "text": "boolean associated with it so this custom type the quick check Lloyd we",
    "start": "1526450",
    "end": "1531880"
  },
  {
    "text": "will normally be able to handle it nicely it'll just generate random implement instances of this thing too so",
    "start": "1531880",
    "end": "1538340"
  },
  {
    "text": "a random green a random red around and blue another round of green and so on so",
    "start": "1538340",
    "end": "1544670"
  },
  {
    "text": "in functional languages we have something called algebraic data types or I like to call them composable data",
    "start": "1544670",
    "end": "1551000"
  },
  {
    "text": "types because in a composable type system bigger types are built from smaller types just like using Lego and",
    "start": "1551000",
    "end": "1558010"
  },
  {
    "text": "because they're built from smaller types if you can generate random data for the",
    "start": "1558010",
    "end": "1563030"
  },
  {
    "text": "smaller types you can also generate random data for the bigger types because they're just composed from the smaller",
    "start": "1563030",
    "end": "1568880"
  },
  {
    "text": "types so it really really fits well with property based testing unlike the",
    "start": "1568880",
    "end": "1575420"
  },
  {
    "text": "object-oriented style of defining classes which doesn't really fit so well right so here is our property of any",
    "start": "1575420",
    "end": "1583730"
  },
  {
    "text": "users property again and we have these two parameters X and y and when you pass",
    "start": "1583730",
    "end": "1590630"
  },
  {
    "text": "it in to the checker it says it's figures out these are integers so it will generate it automatically figure",
    "start": "1590630",
    "end": "1597620"
  },
  {
    "text": "out I need to generate pairs of integers so it generates pairs of integers and then it passes them into the property",
    "start": "1597620",
    "end": "1604160"
  },
  {
    "text": "and it does it for a hundred times and then it sees if it's true for every time so this is how the the checker works at",
    "start": "1604160",
    "end": "1612410"
  },
  {
    "text": "the crude level basically so again it's something you could write quite easily right now here's the here's the nice",
    "start": "1612410",
    "end": "1618500"
  },
  {
    "text": "part which is this shrinker components for dealing with failure I'm going to",
    "start": "1618500",
    "end": "1626840"
  },
  {
    "start": "1623000",
    "end": "1807000"
  },
  {
    "text": "demonstrate this I'm going to use a very crude example which is we have a property called the number is smaller",
    "start": "1626840",
    "end": "1633860"
  },
  {
    "text": "than 81 now this property will obviously fail for numbers that are bigger than 81",
    "start": "1633860",
    "end": "1640810"
  },
  {
    "text": "so we we know this property will fail but let's see if the shrinker can help",
    "start": "1640810",
    "end": "1647330"
  },
  {
    "text": "us figure out exactly what the boundary saw if we did this property with our random one that we we implemented by",
    "start": "1647330",
    "end": "1654200"
  },
  {
    "text": "ourselves it would just generate random integers and it might fail with you know like say some very large random number",
    "start": "1654200",
    "end": "1660470"
  },
  {
    "text": "which really wouldn't be very helpful to help us narrow down what good problem is",
    "start": "1660470",
    "end": "1666040"
  },
  {
    "text": "so let's see what we can do here so we know this is going to fail so the quick check will generate a whole",
    "start": "1666040",
    "end": "1672619"
  },
  {
    "text": "bunch of random integers and it's up to hundred now all the other ones pass and",
    "start": "1672619",
    "end": "1678320"
  },
  {
    "text": "when it gets to hundreds it fails right now well than just saying it failed with",
    "start": "1678320",
    "end": "1683419"
  },
  {
    "text": "the hundreds we're gonna start again and see if we can narrow it down okay",
    "start": "1683419",
    "end": "1688429"
  },
  {
    "text": "so what can we do well what we do is we generate numbers smaller than 100 which",
    "start": "1688429",
    "end": "1694759"
  },
  {
    "text": "is why it's called shrinking so we generate numbers up to a hundred and see see how it works so when you generate",
    "start": "1694759",
    "end": "1701029"
  },
  {
    "text": "numbers up to a hundred it doesn't generate all of them it checks kind of very a serial kind of a diminishing",
    "start": "1701029",
    "end": "1707749"
  },
  {
    "text": "series that it Domitian insecure close to the answer so in this case it generates 0 50 75 88 94 97 and 99 now in",
    "start": "1707749",
    "end": "1717889"
  },
  {
    "text": "this case when we run those numbers through the property it fails at 88 okay",
    "start": "1717889",
    "end": "1724639"
  },
  {
    "text": "well that's good we're just going to start again so now we're going to start shrinking from 88 and this will generate",
    "start": "1724639",
    "end": "1730309"
  },
  {
    "text": "all the numbers up to 88 44 66 77 83 and",
    "start": "1730309",
    "end": "1735789"
  },
  {
    "text": "83 it fails so let's do it again so here's our list for 83 and we have 42",
    "start": "1735789",
    "end": "1744320"
  },
  {
    "text": "63 70 381 so it fails at 81 all right and now we",
    "start": "1744320",
    "end": "1751099"
  },
  {
    "text": "do it again so we generate all numbers up to 81 now if we want this these ones",
    "start": "1751099",
    "end": "1758269"
  },
  {
    "text": "all pass so we know that all the ones up to 8 up to 81 pass but 81 fails so it",
    "start": "1758269",
    "end": "1767690"
  },
  {
    "text": "has figured out that 81 is the smallest failing input which is great so when we",
    "start": "1767690",
    "end": "1773210"
  },
  {
    "text": "run this thing if we if we if we ran it interactively it actually says the",
    "start": "1773210",
    "end": "1778429"
  },
  {
    "text": "answer is its falsifiable meaning that there are some values where the property is false",
    "start": "1778429",
    "end": "1783619"
  },
  {
    "text": "it did 23 tests it did three shrinks and the smallest failing one is 81 so it",
    "start": "1783619",
    "end": "1789019"
  },
  {
    "text": "literally tells us where the boundaries are in our airplane our errors which is really really really nice and it works",
    "start": "1789019",
    "end": "1796399"
  },
  {
    "text": "for more compound types obviously I used integers as a simple example but it will work for more complicated types as well",
    "start": "1796399",
    "end": "1802729"
  },
  {
    "text": "to try and find a smallest thing that will fail the test right so",
    "start": "1802729",
    "end": "1808240"
  },
  {
    "start": "1807000",
    "end": "2326000"
  },
  {
    "text": "that's how property testing works and people when they see this they say this",
    "start": "1808240",
    "end": "1813850"
  },
  {
    "text": "is great but when it actually when they try and do something they kind of get stuck it's like how do I even choose a",
    "start": "1813850",
    "end": "1820419"
  },
  {
    "text": "property for my system so you know what",
    "start": "1820419",
    "end": "1827710"
  },
  {
    "text": "properties should I use I can't think of any when you actually try and do it so I'm going to show you some properties",
    "start": "1827710",
    "end": "1833919"
  },
  {
    "text": "that you can use to get some ideas from so the first one this is probably the",
    "start": "1833919",
    "end": "1840400"
  },
  {
    "text": "most useful one in general is that you take different paths but you get to the same destination so if you start off",
    "start": "1840400",
    "end": "1847690"
  },
  {
    "text": "with ABC and you do something and you do something you end up at 1 2 3 and if",
    "start": "1847690",
    "end": "1853990"
  },
  {
    "text": "you'd go in a different direction you also end up 1 2 3 so for example",
    "start": "1853990",
    "end": "1859330"
  },
  {
    "text": "commutativity which is if you do in one order you get art so if you do it in a",
    "start": "1859330",
    "end": "1864700"
  },
  {
    "text": "different order you would get the same answer associativity is another example map Monad laws front two laws these are",
    "start": "1864700",
    "end": "1871240"
  },
  {
    "text": "all the same kinds of things I'm not going to get into that right now but let me show you a concrete example let's say",
    "start": "1871240",
    "end": "1877690"
  },
  {
    "text": "that you wanted you've got an implementation for sorting a list and you want to check whether your",
    "start": "1877690",
    "end": "1884110"
  },
  {
    "text": "implementation is correct now as sue said you don't want to write a whole bunch of examples to see if",
    "start": "1884110",
    "end": "1889780"
  },
  {
    "text": "you're if you're sorting implementation it's correct you want to have it whole you know when a different random data so",
    "start": "1889780",
    "end": "1897190"
  },
  {
    "text": "how can we do that well if we if we take this approach what we're going to do is",
    "start": "1897190",
    "end": "1903520"
  },
  {
    "text": "we're going to manipulate the list and then sort it that's going to be one way and then in the other way we're going to",
    "start": "1903520",
    "end": "1909070"
  },
  {
    "text": "sort it first and then manipulate the list and hopefully we end up at the same answer so what we're going to do is",
    "start": "1909070",
    "end": "1915640"
  },
  {
    "text": "we're going to manipulate the list by in negating all the numbers in the list and then sorting it and now you know minus",
    "start": "1915640",
    "end": "1922480"
  },
  {
    "text": "three should be the first answer now if we do the only around if we sort the list first and then we negate all the",
    "start": "1922480",
    "end": "1929020"
  },
  {
    "text": "numbers and then we have to reverse the list as well we should end up with the same sorted list the same answer",
    "start": "1929020",
    "end": "1935210"
  },
  {
    "text": "and if this is if this is always true then we probably have a good implementation of sorting the list let's",
    "start": "1935210",
    "end": "1942860"
  },
  {
    "text": "say you want to map something so the map is a transform applied to an object of a",
    "start": "1942860",
    "end": "1949309"
  },
  {
    "text": "type and I'm going to use an example from Kent Beck's unit testing book a",
    "start": "1949309",
    "end": "1956059"
  },
  {
    "text": "long time ago where he used currency as an example so I want to check that um if",
    "start": "1956059",
    "end": "1961520"
  },
  {
    "text": "I manipulate currencies that it's my code is working and again I don't want to wait some unit tests",
    "start": "1961520",
    "end": "1967370"
  },
  {
    "text": "I want to be sure that it's pretty much working for everything so if I create a currency and then I transform it somehow",
    "start": "1967370",
    "end": "1975460"
  },
  {
    "text": "that should be the same as transforming the data before I create the currency so",
    "start": "1975460",
    "end": "1981169"
  },
  {
    "text": "let's say the transformation I'm going to do is just multiply by three so if I if I create a currency with two in it",
    "start": "1981169",
    "end": "1987500"
  },
  {
    "text": "and then I map it to multiply it by three that should be a currency with six",
    "start": "1987500",
    "end": "1993830"
  },
  {
    "text": "in it hopefully and then if I do they around if I start off with two and I",
    "start": "1993830",
    "end": "1998870"
  },
  {
    "text": "multiply by three and then I create that currency I should end up at the same point so if I don't end up at the same",
    "start": "1998870",
    "end": "2004840"
  },
  {
    "text": "point my map function is probably wrong and so this is a nice for things like",
    "start": "2004840",
    "end": "2010630"
  },
  {
    "text": "mapping or you know in length this would be called select it's a great way to",
    "start": "2010630",
    "end": "2016059"
  },
  {
    "text": "test these kinds of functions because you don't really care what the inputs are so another common pattern for",
    "start": "2016059",
    "end": "2022450"
  },
  {
    "text": "properties is doing something and then going backwards there and back again let's say you want to serialize",
    "start": "2022450",
    "end": "2030130"
  },
  {
    "text": "something and then you deserialize it you should end up at the same place if you add something and subtract something",
    "start": "2030130",
    "end": "2035590"
  },
  {
    "text": "you should end up at the same place if you write something and then read it you should have the same data they're not",
    "start": "2035590",
    "end": "2041440"
  },
  {
    "text": "exact they're not little inverses but it's basically going in one direction and coming back in the other direction setting a property and then getting the",
    "start": "2041440",
    "end": "2048099"
  },
  {
    "text": "property you know you would expect these two it to work so very very common ways",
    "start": "2048099",
    "end": "2054398"
  },
  {
    "text": "of doing testing class examples doing a list if you reverse a list and universes",
    "start": "2054399",
    "end": "2059408"
  },
  {
    "text": "again you should end up with the original answer now obviously there's you know you could also just do nothing",
    "start": "2059409",
    "end": "2065320"
  },
  {
    "text": "to list so this is not the only property that you need but it's a useful very",
    "start": "2065320",
    "end": "2071020"
  },
  {
    "text": "easy property to test and this is a very important point it's very rare that one",
    "start": "2071020",
    "end": "2076658"
  },
  {
    "text": "individual property will do everything you often need a combination of",
    "start": "2076659",
    "end": "2081970"
  },
  {
    "text": "properties not just one just like we had for addition the individual properties",
    "start": "2081970",
    "end": "2087580"
  },
  {
    "text": "you know they eliminated some of them but the combination of the three properties together was what really narrowed it down so here's a really",
    "start": "2087580",
    "end": "2095980"
  },
  {
    "text": "helpful property for this kind of thing which is when you transform something something about it is still same for",
    "start": "2095980",
    "end": "2105340"
  },
  {
    "text": "example the size of a collection you know if you sort a collection the size is the same if you map over flexion the",
    "start": "2105340",
    "end": "2111970"
  },
  {
    "text": "size is the same if you reverse a flexion the size is the same the contents of a collection they don't change when you sort it they don't",
    "start": "2111970",
    "end": "2118570"
  },
  {
    "text": "change when you reverse it you often have you know things like balance trees would have there's some property that",
    "start": "2118570",
    "end": "2124300"
  },
  {
    "text": "even if you add things that are bound to trees or move things around streets that they're still balanced that's but the definition some you know invariant they",
    "start": "2124300",
    "end": "2132340"
  },
  {
    "text": "have so we had this list sorting example",
    "start": "2132340",
    "end": "2137560"
  },
  {
    "text": "before and I said that was a pretty good test but of course we haven't taken into",
    "start": "2137560",
    "end": "2143380"
  },
  {
    "text": "account the enterprise developer from hell who will try and come up with an implementation that passes this tests in",
    "start": "2143380",
    "end": "2151120"
  },
  {
    "text": "an evil way right so this is the we can even beat this test if you're evil so",
    "start": "2151120",
    "end": "2157540"
  },
  {
    "text": "the evil sorts the implementation of evil sort is literally just returning an empty lists so if you negate it and then",
    "start": "2157540",
    "end": "2164980"
  },
  {
    "text": "sort it you get an empty list if you sort it first you get an empty lists so no matter what you do you get an empty",
    "start": "2164980",
    "end": "2170710"
  },
  {
    "text": "lists and so these paths are the same thing so this is one property but there's a workaround you know to make it",
    "start": "2170710",
    "end": "2178840"
  },
  {
    "text": "a bad implementation so how can we improve this property so that the",
    "start": "2178840",
    "end": "2188010"
  },
  {
    "text": "enterprise developer from Hell can not have an evil sort implementation so this",
    "start": "2188010",
    "end": "2195370"
  },
  {
    "text": "passes the tests okay so bad Garfield's well we can say some things never change no",
    "start": "2195370",
    "end": "2203130"
  },
  {
    "text": "matter what you do when you sort a list the output is going to be a permutation",
    "start": "2203130",
    "end": "2208469"
  },
  {
    "text": "of the original list it has to have the same context and this will kill their",
    "start": "2208469",
    "end": "2215789"
  },
  {
    "text": "evil sort so anyway so the evil the the the salting thing will check whether it's sorted and then this extra property",
    "start": "2215789",
    "end": "2222180"
  },
  {
    "text": "that the list is has the same contents will also stop the evil implementation",
    "start": "2222180",
    "end": "2227640"
  },
  {
    "text": "so these two properties together will pretty much prove that list is sorted",
    "start": "2227640",
    "end": "2232819"
  },
  {
    "text": "okay so that beats the enterprise Darrell from hell and this is the kind",
    "start": "2232819",
    "end": "2238380"
  },
  {
    "text": "of thing you have to do is you have to have multiple properties here's another one when you do something twice you end",
    "start": "2238380",
    "end": "2248219"
  },
  {
    "text": "up with the same answer so if you if you make a distinct if you make a distinct collection and then you make it another",
    "start": "2248219",
    "end": "2254609"
  },
  {
    "text": "missing collection it's the same as the first time idempotence this is a good property sorting if you sort it and you",
    "start": "2254609",
    "end": "2261599"
  },
  {
    "text": "saw it again is still sorted if you do a filter and then you filter in it it's like doing it the first time if you",
    "start": "2261599",
    "end": "2267630"
  },
  {
    "text": "process an event and then you process that same event again really nothing should happen if you're doing any kind",
    "start": "2267630",
    "end": "2273569"
  },
  {
    "text": "of distributed design this is a really really important property that some it's been you know handling events twice",
    "start": "2273569",
    "end": "2279769"
  },
  {
    "text": "don't it's the same as handling event once Smalling a solver problem solving",
    "start": "2279769",
    "end": "2287910"
  },
  {
    "text": "AF solving a small problem is a very common thing if you can have a property which works for a small bit and you can",
    "start": "2287910",
    "end": "2294420"
  },
  {
    "text": "extend it to the big bit that's a nice way of doing it and it really often works when it when that when this",
    "start": "2294420",
    "end": "2299729"
  },
  {
    "text": "solution is also done the same way though for example quicksort in that of a list is you sought smaller lists and",
    "start": "2299729",
    "end": "2307349"
  },
  {
    "text": "then you add them together to make a bigger list so if you have those kinds of implementations you can also have",
    "start": "2307349",
    "end": "2313049"
  },
  {
    "text": "those kinds of properties so any kind of divide and conquer algorithm will be",
    "start": "2313049",
    "end": "2319049"
  },
  {
    "text": "amenable to this kind of property any kind of structural induction like your recursive data structure you can use",
    "start": "2319049",
    "end": "2325410"
  },
  {
    "text": "this kind of thing for it so very useful here's another",
    "start": "2325410",
    "end": "2330990"
  },
  {
    "start": "2326000",
    "end": "2616000"
  },
  {
    "text": "one issue one into quite a lot which is there are things which are quite hard to prove but they're quite easy to verify",
    "start": "2330990",
    "end": "2338910"
  },
  {
    "text": "so if I have an algorithm that figures out how to get through a maze you know",
    "start": "2338910",
    "end": "2345570"
  },
  {
    "text": "it's hard to know it's hard to prove that algorithm works however if it does",
    "start": "2345570",
    "end": "2351090"
  },
  {
    "text": "give me a path it's really easy to check whether that path goes through the maze or not so it's often easy to check",
    "start": "2351090",
    "end": "2358530"
  },
  {
    "text": "things even though it's hard to implement them and the classic example",
    "start": "2358530",
    "end": "2363570"
  },
  {
    "text": "of this is prime number factorization you know it's really easy it's very hard",
    "start": "2363570",
    "end": "2369450"
  },
  {
    "text": "to factorize numbers but if you do have them if someone gives you some factors it's really easy to multiply them and prove that they add up to the big number",
    "start": "2369450",
    "end": "2375980"
  },
  {
    "text": "many many examples of this I'm not even going to go into them but this is just to show you some gives you some ideas of",
    "start": "2375980",
    "end": "2382050"
  },
  {
    "text": "different kinds of things you can do so here's an example let's say you have two tokenize a string in two with using",
    "start": "2382050",
    "end": "2390060"
  },
  {
    "text": "commas or any kind of token or any kind of parsing organization it's kind of hard to prove that the tokenizer",
    "start": "2390060",
    "end": "2397560"
  },
  {
    "text": "works especially if it's a complicated parsing thing these are various it's if one let's say you just need to split",
    "start": "2397560",
    "end": "2403410"
  },
  {
    "text": "something at the commas and you get after you split it you get three different sub strings now testing the",
    "start": "2403410",
    "end": "2411600"
  },
  {
    "text": "implementation is quite hard but testing the outputs it's quite easy you just take these three strings and you combine them and you should get the same string",
    "start": "2411600",
    "end": "2419490"
  },
  {
    "text": "as what the input was and so there's an example where it's easy to verify that",
    "start": "2419490",
    "end": "2425609"
  },
  {
    "text": "the output is correct even though it's quite hard to implement it and then a more complicated thing if you have a parser that builds up sort of",
    "start": "2425609",
    "end": "2431910"
  },
  {
    "text": "complicated parse tree you know it can be quite complicated to check the parser but if you take the parse tree and you",
    "start": "2431910",
    "end": "2437609"
  },
  {
    "text": "regenerate the original source codes you know that's a good way of checking",
    "start": "2437609",
    "end": "2442710"
  },
  {
    "text": "whether your part is working on",
    "start": "2442710",
    "end": "2445730"
  },
  {
    "text": "look at the sorting thing again people unfortunately with probably based testing people use very simple examples",
    "start": "2448130",
    "end": "2453710"
  },
  {
    "text": "and I'm not going to be an exception the reason is it's hard to explain the stuff",
    "start": "2453710",
    "end": "2458870"
  },
  {
    "text": "on the slide so people use lists sorting and list reversing and things real world",
    "start": "2458870",
    "end": "2465140"
  },
  {
    "text": "property based testing is much more complicated in that and I will give you",
    "start": "2465140",
    "end": "2470690"
  },
  {
    "text": "some resources for that at the end of the talk we can check them out all right so let's say that we want to have",
    "start": "2470690",
    "end": "2476750"
  },
  {
    "text": "something is really easy to prove that a list is sorted well it's kind of hard to prove that an entire list is sorted however it's really easy to check that",
    "start": "2476750",
    "end": "2483890"
  },
  {
    "text": "the pairs the adjacent pairs are you know the first one is less than the",
    "start": "2483890",
    "end": "2488930"
  },
  {
    "text": "second one so it for each pair of numbers in the list it's pretty easy to check that they're you know they're",
    "start": "2488930",
    "end": "2496520"
  },
  {
    "text": "related that way so if the individual pairs are related that way then",
    "start": "2496520",
    "end": "2501950"
  },
  {
    "text": "hopefully the list as a whole is sorted but again we need the property that the",
    "start": "2501950",
    "end": "2507410"
  },
  {
    "text": "the entire contents is a it's the same as again we could have the evil sort way just return an empty lists and that",
    "start": "2507410",
    "end": "2514070"
  },
  {
    "text": "would pass too so that's a quick way of verifying that something sorted now the",
    "start": "2514070",
    "end": "2521360"
  },
  {
    "text": "final one is something called the test Oracle and test article is where you",
    "start": "2521360",
    "end": "2528500"
  },
  {
    "text": "have a system under tests and you have some other system the test Oracle the",
    "start": "2528500",
    "end": "2534380"
  },
  {
    "text": "that does have the right answer and what you do is you run the system under tests",
    "start": "2534380",
    "end": "2540890"
  },
  {
    "text": "and then you run the test Oracle and you compare the answers and if you think about that's really what example based",
    "start": "2540890",
    "end": "2546950"
  },
  {
    "text": "testing is to you your brain knows what the right answer is and you compare it with what your system says but in in",
    "start": "2546950",
    "end": "2552740"
  },
  {
    "text": "real world you have to have much more complicated test articles for example",
    "start": "2552740",
    "end": "2558130"
  },
  {
    "text": "you have an optimized version of an algorithm and you have the brute force version and you know that the",
    "start": "2558130",
    "end": "2564920"
  },
  {
    "text": "proportional works but it's really slow so you can compare the brute force",
    "start": "2564920",
    "end": "2570200"
  },
  {
    "text": "version with the optimized version and if they give the same answer for every input then you have confidence that your",
    "start": "2570200",
    "end": "2576680"
  },
  {
    "text": "optimized one is actually correct what and another example is parallel versus single threads so you have a",
    "start": "2576680",
    "end": "2582860"
  },
  {
    "text": "single thread version that you know works but you want to parallelize it are",
    "start": "2582860",
    "end": "2588710"
  },
  {
    "text": "you sure it still works we'll just check it using you know compare them side-by-side and see if you still get",
    "start": "2588710",
    "end": "2594260"
  },
  {
    "text": "the same answer and this is really common when you're trying to get rid of a legacy system and with a replacement",
    "start": "2594260",
    "end": "2601850"
  },
  {
    "text": "system and you basically use the legacy system as an Oracle for the replacement system and you keep comparing the",
    "start": "2601850",
    "end": "2607610"
  },
  {
    "text": "outputs and if the outputs are always the same then you have a good confidence that your replacement system is actually",
    "start": "2607610",
    "end": "2613520"
  },
  {
    "text": "working the same way right so let me talk about model-based testing all these",
    "start": "2613520",
    "end": "2622160"
  },
  {
    "start": "2616000",
    "end": "2795000"
  },
  {
    "text": "all these things have been property based testing but sometimes any progress",
    "start": "2622160",
    "end": "2627590"
  },
  {
    "text": "testing we're dealing with pure functions with you know they're very deterministic they're very explicit in",
    "start": "2627590",
    "end": "2639470"
  },
  {
    "text": "terms you have this input you always get this output so in the real world",
    "start": "2639470",
    "end": "2644750"
  },
  {
    "text": "sometimes you have things that aren't that deterministic like a database anything to do with it you know the real",
    "start": "2644750",
    "end": "2650540"
  },
  {
    "text": "world is sometimes more complicated and so that we can use something called model-based testing which is the test",
    "start": "2650540",
    "end": "2655850"
  },
  {
    "text": "Oracle approach for sort of real-world things so let me show you how this works let's say that you have a simple",
    "start": "2655850",
    "end": "2663080"
  },
  {
    "text": "database and you want to tests whether it works a lot okay now a real database",
    "start": "2663080",
    "end": "2669440"
  },
  {
    "text": "is incredibly complex but we're going to test our database with just four operations open the database connection close the",
    "start": "2669440",
    "end": "2676970"
  },
  {
    "text": "database connection increment a field in a record and decrement a field in the record and we're gonna have two",
    "start": "2676970",
    "end": "2684109"
  },
  {
    "text": "different clients because we want to testaments currency and what we're going to do is generate a random list of those",
    "start": "2684109",
    "end": "2689840"
  },
  {
    "text": "operations and so here we go fine a it's",
    "start": "2689840",
    "end": "2695420"
  },
  {
    "text": "just randomly says I pay you open and then you increment and close and you increment and you open and you close you",
    "start": "2695420",
    "end": "2702230"
  },
  {
    "text": "know and for client be open and then decrement and open again and open again",
    "start": "2702230",
    "end": "2707630"
  },
  {
    "text": "and increment and so on so just a random list of these four",
    "start": "2707630",
    "end": "2712670"
  },
  {
    "text": "equations now how do we actually use",
    "start": "2712670",
    "end": "2717980"
  },
  {
    "text": "this to check that our our database actually works well what we do is we",
    "start": "2717980",
    "end": "2724520"
  },
  {
    "text": "take these operations and we run it on the real system but at the same time we",
    "start": "2724520",
    "end": "2731480"
  },
  {
    "text": "take the same operations and we test it on a very very simple model like an",
    "start": "2731480",
    "end": "2736940"
  },
  {
    "text": "in-memory accumulator in our case so we're just adding and subtracting one in the memory you know so for example in",
    "start": "2736940",
    "end": "2744680"
  },
  {
    "text": "our in our model we start off with zero and then a increments it by one and then",
    "start": "2744680",
    "end": "2752119"
  },
  {
    "text": "be decremented by one now a tries to increment it but a has closed their",
    "start": "2752119",
    "end": "2757460"
  },
  {
    "text": "database connections so nothing happens and then you know so this is a our model",
    "start": "2757460",
    "end": "2763190"
  },
  {
    "text": "takes in the count whether the connections open or closed and then finally be tries to open it tries to increment again and everything",
    "start": "2763190",
    "end": "2771440"
  },
  {
    "text": "works so if we do in our model after running this we should expect that the answer is 1 and if we went on a real",
    "start": "2771440",
    "end": "2778819"
  },
  {
    "text": "system we should also get the answer 1 and if we don't get the answer 1 then our real-world database has at",
    "start": "2778819",
    "end": "2786440"
  },
  {
    "text": "concurrency bug in it so that's a quick way of testing real-world systems and",
    "start": "2786440",
    "end": "2795910"
  },
  {
    "start": "2795000",
    "end": "2917000"
  },
  {
    "text": "there's a great example from John Hughes who was one of the traitors of quick check they had an airline library and",
    "start": "2795910",
    "end": "2804460"
  },
  {
    "text": "they there was this really painful bug and they spent months trying to find out",
    "start": "2804460",
    "end": "2810109"
  },
  {
    "text": "what the buggy's and John Hughes basically were tests to see if they",
    "start": "2810109",
    "end": "2816680"
  },
  {
    "text": "could reproduce it and he did reproduce it and the steps were super bizarre to reproduce you had to open and then",
    "start": "2816680",
    "end": "2824540"
  },
  {
    "text": "closed and then open a file and then they had to three different operations running in parallel to cause the problem",
    "start": "2824540",
    "end": "2832579"
  },
  {
    "text": "I'll actually show you this is actually a slide from his presentation you open a file close a file open a file in the",
    "start": "2832579",
    "end": "2838490"
  },
  {
    "text": "three different clients one client does a lookup another client doesn't insert and the third client also doesn't insert",
    "start": "2838490",
    "end": "2845720"
  },
  {
    "text": "at the time and if this happens the database",
    "start": "2845720",
    "end": "2851720"
  },
  {
    "text": "file gets corrupted okay now what's interesting is we have these bizarre",
    "start": "2851720",
    "end": "2858410"
  },
  {
    "text": "steps no human would ever think of writing a test for this very very",
    "start": "2858410",
    "end": "2864320"
  },
  {
    "text": "bizarre you know why would you open and close and reopen straightaway you know so this was the the test case that the",
    "start": "2864320",
    "end": "2873980"
  },
  {
    "text": "quick check will found this issue pretty fast and the shrinker is really",
    "start": "2873980",
    "end": "2879290"
  },
  {
    "text": "important part of this because you could prolly find a test case where you do 20 different things in random order that's",
    "start": "2879290",
    "end": "2885590"
  },
  {
    "text": "not very helpful to understanding what the problem is by using a shrinker you can actually find the minimum test case",
    "start": "2885590",
    "end": "2891380"
  },
  {
    "text": "so in this case if you did two different operations in parallel to clients that wouldn't reproduce it you had to have",
    "start": "2891380",
    "end": "2896750"
  },
  {
    "text": "three different people doing these things at the same time and that would be the minimal thing that would have",
    "start": "2896750",
    "end": "2901880"
  },
  {
    "text": "fail so there's great John Hughes talked about this from NGC Oslo to 2013 there's",
    "start": "2901880",
    "end": "2910580"
  },
  {
    "text": "the link if you want it by the way I will put these slides on slack so you can look at these slides later right so",
    "start": "2910580",
    "end": "2918290"
  },
  {
    "start": "2917000",
    "end": "3016000"
  },
  {
    "text": "let's just to finish up let's look at the difference between example based testing and probably based testing again",
    "start": "2918290",
    "end": "2923950"
  },
  {
    "text": "in probably based tests they're much more general we're testing hundreds of random inputs right which means that one",
    "start": "2923950",
    "end": "2930830"
  },
  {
    "text": "test one property based test can actually have placed many example based tests also they can reveal Ovilus",
    "start": "2930830",
    "end": "2939050"
  },
  {
    "text": "educators like when you're doing rant when you're doing your example test you tend not to think about strings with non-printable characters you tend not to",
    "start": "2939050",
    "end": "2945590"
  },
  {
    "text": "think about massively negative numbers or massively positive numbers and stuff you know these things should be thought",
    "start": "2945590",
    "end": "2953180"
  },
  {
    "text": "about and nulls and so on probably based testing they don't care they can just",
    "start": "2953180",
    "end": "2958220"
  },
  {
    "text": "randomly generate the stuff and they're not human you know and the more of a",
    "start": "2958220",
    "end": "2963580"
  },
  {
    "text": "kind of deeper thought here is that understanding requirements is tricky and",
    "start": "2963580",
    "end": "2968840"
  },
  {
    "text": "property taste tests force you to think which is obviously a bad thing but if",
    "start": "2968840",
    "end": "2974630"
  },
  {
    "text": "you do want to think property based tests will definitely make you think about what",
    "start": "2974630",
    "end": "2980080"
  },
  {
    "text": "important when you're testing now example based tests are still helpful it's not it's not either/or it's and so",
    "start": "2980080",
    "end": "2987250"
  },
  {
    "text": "example based tests are great because they are very easy to understand they're less abstract they're very explicit sand",
    "start": "2987250",
    "end": "2993970"
  },
  {
    "text": "you know two plus two equals four is a very nice little test to show me what addition does in a very simple way so",
    "start": "2993970",
    "end": "3000530"
  },
  {
    "text": "it's a great way is in terms of documentation if you really want to have a thorough thorough testing they're not",
    "start": "3000530",
    "end": "3007410"
  },
  {
    "text": "so good for that but they're they both have their place it's not either you have to this one all the other one you can use both example based tests and",
    "start": "3007410",
    "end": "3014010"
  },
  {
    "text": "probably based tests so to sum up be lazy don't like tests generate them and",
    "start": "3014010",
    "end": "3022550"
  },
  {
    "start": "3016000",
    "end": "3139000"
  },
  {
    "text": "use property based tests thinking to gain deeper insight into the",
    "start": "3022550",
    "end": "3027660"
  },
  {
    "text": "requirements so there's a bunch of resources out there on the internet if you search for property based testing",
    "start": "3027660",
    "end": "3033570"
  },
  {
    "text": "and your language you will find almost certainly find something all the functional languages have them a Python",
    "start": "3033570",
    "end": "3039690"
  },
  {
    "text": "has a really excellent one and I don't know about PHP and so on but I'm sure there is one a lot of a lot of the posts",
    "start": "3039690",
    "end": "3048120"
  },
  {
    "text": "you'll see on the Internet are kind of theoretical but just like my one with very simple examples but there are some",
    "start": "3048120",
    "end": "3053640"
  },
  {
    "text": "good real-world examples out there all the John Hughes talks are great that's the link to that one again he's got a",
    "start": "3053640",
    "end": "3059880"
  },
  {
    "text": "couple on property based testing there's a really nice series of blog posts",
    "start": "3059880",
    "end": "3065020"
  },
  {
    "text": "[Music] probably based testing in a screencast editor like this is a real-world thing",
    "start": "3065020",
    "end": "3071790"
  },
  {
    "text": "with video how would you test that your video editor is working pretty you're watching it and there's an e-book there",
    "start": "3071790",
    "end": "3078390"
  },
  {
    "text": "as well too and also worth checking out is metamorphic testing bye hello Wayne and metamorphic testing is related to",
    "start": "3078390",
    "end": "3085800"
  },
  {
    "text": "property based testing in the sense that you change things you don't know what the right answer is",
    "start": "3085800",
    "end": "3091100"
  },
  {
    "text": "but again two different routes should give you the same answer and the example there is let's say you're doing image",
    "start": "3091100",
    "end": "3099600"
  },
  {
    "text": "recognition you're trying to do facial recognition in an image well you don't really know where the face is but if you",
    "start": "3099600",
    "end": "3106440"
  },
  {
    "text": "if you rotate the the source image the facial recognition part should also be",
    "start": "3106440",
    "end": "3111510"
  },
  {
    "text": "rotated and if you make the input image back and whites that shouldn't change you know that should give you the same",
    "start": "3111510",
    "end": "3118050"
  },
  {
    "text": "location for the face and if you you know change the colors on the input that",
    "start": "3118050",
    "end": "3124050"
  },
  {
    "text": "shouldn't change the output and so and so you can actually do a lot of testing to check the algorithms of correct even",
    "start": "3124050",
    "end": "3130290"
  },
  {
    "text": "without knowing what the right answer is it's really knowing that two different paths give to the same give you the same",
    "start": "3130290",
    "end": "3135320"
  },
  {
    "text": "answer just like that before so that's worth reading so thank you very much that's",
    "start": "3135320",
    "end": "3142170"
  },
  {
    "start": "3139000",
    "end": "3170000"
  },
  {
    "text": "the end of the talk if you want to have any I'll be on slack off of this talk to",
    "start": "3142170",
    "end": "3147210"
  },
  {
    "text": "answer any questions I'll also post these links on slack so it's easier to read I have the slides and the video",
    "start": "3147210",
    "end": "3154410"
  },
  {
    "text": "will be up at my website F sharp on a profit slash PBT I think I'm not sure if",
    "start": "3154410",
    "end": "3162510"
  },
  {
    "text": "we can do QA at this time I think well I'm not sure and you hear me Martin",
    "start": "3162510",
    "end": "3170480"
  }
]