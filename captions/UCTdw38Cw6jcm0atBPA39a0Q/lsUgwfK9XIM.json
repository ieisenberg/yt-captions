[
  {
    "text": "in January of this year Robert C Martin the author of a lot of good books such as clean code uh wrote a a blog post",
    "start": "2520",
    "end": "10800"
  },
  {
    "text": "comparing type systems and unit testing um it was a rather controversial blog",
    "start": "10800",
    "end": "16840"
  },
  {
    "text": "post given that he suggested that people that prefer types should quit their jobs and never be a programmer again um and",
    "start": "16840",
    "end": "25119"
  },
  {
    "text": "you know as social media as we all know is a really good place to get reasonable rational balanced",
    "start": "25119",
    "end": "31200"
  },
  {
    "text": "debate uh I thought maybe we could look at some of the responses to this uh to this controversial blog post so uh Alpa",
    "start": "31200",
    "end": "38719"
  },
  {
    "text": "on Twitter says everybody who shared this should be ashamed of themselves uh on Reddit 1792 says yeah",
    "start": "38719",
    "end": "47079"
  },
  {
    "text": "Uncle Bob off you're obviously a narcissistic who thinks too highly of",
    "start": "47079",
    "end": "52199"
  },
  {
    "text": "himself this one's my favorite this is from someone called combinatory logic who says he is the Nigel farage or",
    "start": "52199",
    "end": "57840"
  },
  {
    "text": "Donald Trump of the software world",
    "start": "57840",
    "end": "61920"
  },
  {
    "text": "uh I'm Benjamin I work at stack overflow with the team that brought you stack Overflow um and this debate piqued my",
    "start": "63280",
    "end": "70119"
  },
  {
    "text": "interest because I'm interested in um in programming language design and type systems and that sort of thing I find",
    "start": "70119",
    "end": "76119"
  },
  {
    "text": "that stuff really fascinating um and one of the things that really struck me about the more reasonable comments uh on the in the",
    "start": "76119",
    "end": "83600"
  },
  {
    "text": "debate on social media that this post generated was that um the people that",
    "start": "83600",
    "end": "89240"
  },
  {
    "text": "stepped into the defend type systems and the people that uh were siding with Robert C Martin on the side of tests",
    "start": "89240",
    "end": "95720"
  },
  {
    "text": "they weren't even really talking the same language right um so for examp well so Thomas Petri kind of agrees with me",
    "start": "95720",
    "end": "102360"
  },
  {
    "text": "he says like um it's they're incommensurable these two world views right the backgrounds of the people that",
    "start": "102360",
    "end": "108560"
  },
  {
    "text": "uh that program in strongly typed languages and like to use that is completely different than the background",
    "start": "108560",
    "end": "114159"
  },
  {
    "text": "of dynamically typed uh programmers who prefer to use tests and it leads to posts like this one for example um who",
    "start": "114159",
    "end": "122320"
  },
  {
    "text": "uh this guy Jake Warton I think he's he's done something remarkable he's both sort of underselling and overselling the",
    "start": "122320",
    "end": "128160"
  },
  {
    "text": "uh the value of a type system in the same post right he says um type systems are a form of tests well they're really",
    "start": "128160",
    "end": "134319"
  },
  {
    "text": "not I don't I mean I don't use a type system like I use a test Suite I use a test Suite to verify the behavior of my",
    "start": "134319",
    "end": "139599"
  },
  {
    "text": "code whereas I use a typ type system to help me make sure my code is designed well um uh and so like if you're if",
    "start": "139599",
    "end": "147680"
  },
  {
    "text": "you're a um if you're someone that really believes in the value of unit tests uh rather than type systems you're",
    "start": "147680",
    "end": "153519"
  },
  {
    "text": "not even really going to like understand what this is about that you're going to just say well what's the point in like having a uh having if I can write test",
    "start": "153519",
    "end": "160239"
  },
  {
    "text": "then why would I bother writing types for me a type system is a lot more about um driving the design of a system um and",
    "start": "160239",
    "end": "168319"
  },
  {
    "text": "that's what I'm going to hopefully demonstrate to you uh today um oh yeah",
    "start": "168319",
    "end": "174280"
  },
  {
    "text": "the other thing that struck me as absurd about this debate was uh it's not like types are the opposite of tests right in",
    "start": "174280",
    "end": "180080"
  },
  {
    "text": "many ways they're complimentary you need both of them to build a reliable system that continues working as you grow it",
    "start": "180080",
    "end": "186200"
  },
  {
    "text": "right there's an idea called The Swiss Cheese model um the Swiss Cheese model perceives a system as a layer a",
    "start": "186200",
    "end": "193000"
  },
  {
    "text": "collection of layers um Each of which are in perfect right um each of these",
    "start": "193000",
    "end": "198519"
  },
  {
    "text": "layers has a hole in it or some holes in it but bugs only get through to production when the holes in all of these layers line up so the game of",
    "start": "198519",
    "end": "205360"
  },
  {
    "text": "software engineering really is to have as many of these layers as you can to use them as effectively as you can in",
    "start": "205360",
    "end": "211680"
  },
  {
    "text": "order to minimize the number of holes in this uh in in your in order to minimize the likelihood of a bug getting through",
    "start": "211680",
    "end": "218080"
  },
  {
    "text": "all through all of the holes in in a system to production so um some of these",
    "start": "218080",
    "end": "223360"
  },
  {
    "text": "uh layers of cheese that you might want to use types unit tests certainly but also um code reviews continuous",
    "start": "223360",
    "end": "230360"
  },
  {
    "text": "integration production monitoring all of these are important and necessary um uh",
    "start": "230360",
    "end": "235519"
  },
  {
    "text": "tools that we humans use to reason about uh about code and keep it correct as we",
    "start": "235519",
    "end": "241079"
  },
  {
    "text": "grow a system so like I said um this talk is about using types to drive the design of",
    "start": "241079",
    "end": "247480"
  },
  {
    "text": "of a system really weaving types into the programming workflow and so in order",
    "start": "247480",
    "end": "252720"
  },
  {
    "text": "to illustrate that I thought we could build um I work at stack Overflow and I thought we could build one of Stack overflows features um which I think uh",
    "start": "252720",
    "end": "260560"
  },
  {
    "text": "gives a particularly um potent uh illustration of what I'm going to try",
    "start": "260560",
    "end": "266160"
  },
  {
    "text": "and impress upon you so the feature I'm just going to quickly demo what the feature does does it's very simple um",
    "start": "266160",
    "end": "271479"
  },
  {
    "text": "you guys probably can't see that right let me ambulate it uh is that big enough I guess so so",
    "start": "271479",
    "end": "282080"
  },
  {
    "text": "um stock overflow as you all know is a Q&A site um but you may be less familiar",
    "start": "282080",
    "end": "287520"
  },
  {
    "text": "with um our other product which is a job board a programmer jobs board right so here's what the jobs board uh looks like",
    "start": "287520",
    "end": "293400"
  },
  {
    "text": "it's a stackoverflow.com jobs and the thing that I'm going to demonstrate to you is our advanced search feature right",
    "start": "293400",
    "end": "299400"
  },
  {
    "text": "so so um this uh this this is uh the the search box here supports um a query",
    "start": "299400",
    "end": "307000"
  },
  {
    "text": "syntax right so I can say I can write a tag I can look for C jobs and I can also say I want a job that's uh uh pay that's",
    "start": "307000",
    "end": "315120"
  },
  {
    "text": "either a remote job I want to be able to work from home um or it uh pays",
    "start": "315120",
    "end": "321639"
  },
  {
    "text": "um uh or it pays I know 50,000 right and so if I look for this like uh oh it's I",
    "start": "321639",
    "end": "328440"
  },
  {
    "text": "guess it's in chroner uh yeah so this one for example this is a this is this job's worth more than 55k",
    "start": "328440",
    "end": "334840"
  },
  {
    "text": "this one can be worth more than 55k if I'm good let me look for a remote one",
    "start": "334840",
    "end": "340960"
  },
  {
    "text": "uh this one oh well this one's remote but it's also worth more than 50k anyway",
    "start": "340960",
    "end": "346400"
  },
  {
    "text": "um so I thought we could Implement like a a miniaturized version of this feature",
    "start": "346400",
    "end": "351720"
  },
  {
    "text": "together does that sound good um some nodding Goods uh so let me just um so",
    "start": "351720",
    "end": "359000"
  },
  {
    "text": "this is kind of this this little query language it's kind of a miniature programming language yeah um so it",
    "start": "359000",
    "end": "365080"
  },
  {
    "text": "shouldn't surprise you that in the stack Overflow code base we have a miniature compiler for our miniature programming",
    "start": "365080",
    "end": "370120"
  },
  {
    "text": "language so let me um so this is uh a very sort of thousand",
    "start": "370120",
    "end": "376160"
  },
  {
    "text": "foot overview of what a compiler does right source code comes in a text you",
    "start": "376160",
    "end": "381520"
  },
  {
    "text": "know some a string uh a file text file comes in we run it through a process",
    "start": "381520",
    "end": "386560"
  },
  {
    "text": "called aaza which extracts structured data from the syntax of your Source",
    "start": "386560",
    "end": "391639"
  },
  {
    "text": "codes um then uh the paa produces what's called an abstract syntax tree I'll give",
    "start": "391639",
    "end": "397120"
  },
  {
    "text": "you a demonstration of what one of those looks like in a minute but it's basically an in-memory tree structure",
    "start": "397120",
    "end": "402160"
  },
  {
    "text": "that reflects the source of the code that you wrote right in your file and then the compiler itself after the paa",
    "start": "402160",
    "end": "409360"
  },
  {
    "text": "is structured as uh either a short or long whatever series of operations on this abstract syntax tree some of them",
    "start": "409360",
    "end": "416400"
  },
  {
    "text": "uh for example an Optimizer uh that like for examp examp kills dead code that would um consume an abstract syntax tree",
    "start": "416400",
    "end": "423680"
  },
  {
    "text": "and produce a different one one with the dead code removed but other ones U for example the code generator that produces",
    "start": "423680",
    "end": "429520"
  },
  {
    "text": "machine code or lrvm or SQL or whatever it is that you're targeting with your programming language um that's a that's",
    "start": "429520",
    "end": "436919"
  },
  {
    "text": "an operation that takes an abstract syntax tree and produces maybe um a binary stream for the machine code that",
    "start": "436919",
    "end": "443680"
  },
  {
    "text": "you're generating or something or um some ASM that that you'll later run through and assem something like that um",
    "start": "443680",
    "end": "449199"
  },
  {
    "text": "and another another uh possibility for an abstract syntax tree after you've optimized it Etc would be to run it in",
    "start": "449199",
    "end": "454720"
  },
  {
    "text": "memory right over a collection of objects or um so uh so that would be an",
    "start": "454720",
    "end": "460240"
  },
  {
    "text": "interpreted language like python or something like that so here is the program that we're going to write this",
    "start": "460240",
    "end": "465720"
  },
  {
    "text": "is way too small Let's",
    "start": "465720",
    "end": "469840"
  },
  {
    "text": "uh uh that's not the program we're going to write anyway uh here's the program we're going to write no that's not it",
    "start": "470960",
    "end": "476400"
  },
  {
    "text": "either",
    "start": "476400",
    "end": "479400"
  },
  {
    "text": "that's better okay so can you guys read that all right at the",
    "start": "481560",
    "end": "486720"
  },
  {
    "text": "back good um okay so here I've got uh a list of jobs with tags oh I should say",
    "start": "486720",
    "end": "493720"
  },
  {
    "text": "um obviously we're not going to implement the whole feature because it's um quite a big feature right um we're",
    "start": "493720",
    "end": "499759"
  },
  {
    "text": "I'm going to implement three syntactic constructs I'm going to implement Tags I'm going to implement anding of two",
    "start": "499759",
    "end": "506159"
  },
  {
    "text": "queries and I'm going to implement um not right so um Boolean",
    "start": "506159",
    "end": "512200"
  },
  {
    "text": "negation um so here's a here's an example right of a of an input query that has a tag c a tag Java uh it's",
    "start": "512200",
    "end": "520039"
  },
  {
    "text": "negating the Java tag and it's using and to join them together right any",
    "start": "520039",
    "end": "525240"
  },
  {
    "text": "questions so far so uh here I'm running I'm running this input input string through the paa",
    "start": "525240",
    "end": "533160"
  },
  {
    "text": "and then I'm running the uh resulting query this is going to be an abstract syntax tree which I'll show you in a",
    "start": "533160",
    "end": "538839"
  },
  {
    "text": "minute I'm running it through uh an interpreter uh and I'm running that for every job in our list and so since I'm",
    "start": "538839",
    "end": "545920"
  },
  {
    "text": "looking for c c jobs and not Java jobs uh I'm expecting I'm not expecting job",
    "start": "545920",
    "end": "552000"
  },
  {
    "text": "two to make it through because that's got Java in the um in the list of tags",
    "start": "552000",
    "end": "557279"
  },
  {
    "text": "and I'm not expecting job 3 to make it through because that doesn't have C right so we when we run this program",
    "start": "557279",
    "end": "562839"
  },
  {
    "text": "eventually um only job one should appear on the on the screen any questions about",
    "start": "562839",
    "end": "569200"
  },
  {
    "text": "what about to happen we're going to implement a miniature compiler and we're going to do it in a type driven",
    "start": "569200",
    "end": "575760"
  },
  {
    "text": "way okay so first things first uh what does an abstract syntax tree actually",
    "start": "575760",
    "end": "581640"
  },
  {
    "text": "look like right so here's an example um an example input string and uh here's",
    "start": "581640",
    "end": "587720"
  },
  {
    "text": "the abstract syntax tree that we are expecting a paa to produce out of it so as you can see the outermost um layer of",
    "start": "587720",
    "end": "595240"
  },
  {
    "text": "the tree of the inmemory tree is the and operator right that corresponds to this and in the middle of our query um uh and",
    "start": "595240",
    "end": "603519"
  },
  {
    "text": "what and what this and is doing is it's taking the left query here and it's anding it with the right query here",
    "start": "603519",
    "end": "609000"
  },
  {
    "text": "right um on the left hand side we see another and right this one uh and that's",
    "start": "609000",
    "end": "615000"
  },
  {
    "text": "got the C tag and not Java not is another is another operation another",
    "start": "615000",
    "end": "620240"
  },
  {
    "text": "node in our syntax tree and on the right hand side we've got the or node with the remote and celery um",
    "start": "620240",
    "end": "627240"
  },
  {
    "text": "operators any questions about what this abstract syntax tree does don't be shy",
    "start": "627240",
    "end": "633600"
  },
  {
    "text": "if you have a question it's likely that the person sitting next to you has the same question so okay so what does one of these",
    "start": "633600",
    "end": "641200"
  },
  {
    "text": "abstract syntax trees actually look like in code right um let me jump back to",
    "start": "641200",
    "end": "647120"
  },
  {
    "text": "visual studio make that a bit smaller okay so an abstract syntax tree",
    "start": "647120",
    "end": "653160"
  },
  {
    "text": "is a type right if I give you an abstract syntax tree um all I can say is",
    "start": "653160",
    "end": "658200"
  },
  {
    "text": "that I don't know necessarily what the user typed but I do know that they typed a query right so we're going to",
    "start": "658200",
    "end": "665120"
  },
  {
    "text": "represent this as uh a base class an abstract based class and for each of these types of node and Knots and tags",
    "start": "665120",
    "end": "673240"
  },
  {
    "text": "we're going to represent that as a subass of said abstract based class so",
    "start": "673240",
    "end": "678639"
  },
  {
    "text": "here's for example the tag subass it contains a string which is the actual tab that you type DG C or Java",
    "start": "678639",
    "end": "687000"
  },
  {
    "text": "um and uh so here's and right it contains two uh recursive occurrences of",
    "start": "687000",
    "end": "693279"
  },
  {
    "text": "a jql a jql syntax jql by the way I should say is Job's query language jql um I'm going to probably repeat the word",
    "start": "693279",
    "end": "699760"
  },
  {
    "text": "jql quite a lot or Jal um uh so uh an and node contains the",
    "start": "699760",
    "end": "707560"
  },
  {
    "text": "left hand side of the and operator so in this example uh this and the left hand",
    "start": "707560",
    "end": "713279"
  },
  {
    "text": "side of this and would be tag C right that's this end here and the right hand side would be not with a Java uh uh tag",
    "start": "713279",
    "end": "720519"
  },
  {
    "text": "inside it so and is a is a binary operator and it's got two sub trees right it's got two jql syntaxes inside",
    "start": "720519",
    "end": "726920"
  },
  {
    "text": "it again we don't know what sort of node those jqr syntaxes can be because syntactic clear is valid to have anything um and here's not right not",
    "start": "726920",
    "end": "733760"
  },
  {
    "text": "only has a single operand but again it's a sub tree it's not necessarily like a a particular type of",
    "start": "733760",
    "end": "740800"
  },
  {
    "text": "node um one thing I wanted to draw your attention to here is um I've given these",
    "start": "740800",
    "end": "745880"
  },
  {
    "text": "I've made these classes immutable right none of these uh none of these properties have public sets they're all",
    "start": "745880",
    "end": "751560"
  },
  {
    "text": "just get only properties and I'm initializing them in the Constructor and I'm making sure that the uh that the",
    "start": "751560",
    "end": "758000"
  },
  {
    "text": "argument of the Constructor is not n in each of these cases um I do this as a matter of course for pretty much every",
    "start": "758000",
    "end": "763800"
  },
  {
    "text": "class I write not necessarily like compiler stuff just like uh if I'm",
    "start": "763800",
    "end": "768920"
  },
  {
    "text": "writing a construct a NVC controller or something I will give it a Constructor and I'll will check that the arguments are not null the reason for that is like",
    "start": "768920",
    "end": "775800"
  },
  {
    "text": "if you if I were to give these public sets um I see this sort of code a lot just like Get Set no Constructor and",
    "start": "775800",
    "end": "781600"
  },
  {
    "text": "then like um I'll say like new and and uh left equals you know",
    "start": "781600",
    "end": "789720"
  },
  {
    "text": "Fu uh right equals bar um the problem is though it's very easy to forget one of",
    "start": "789720",
    "end": "796680"
  },
  {
    "text": "the fields right and then you end up with nulls in your system uh and it's and you have to check it you know",
    "start": "796680",
    "end": "802040"
  },
  {
    "text": "everywhere if if you if you have a Constructor and you have um null checks inside your Constructor you can be",
    "start": "802040",
    "end": "807600"
  },
  {
    "text": "guaranteed that you haven't forgotten in any of the fields this is especially important I find when you're adding things to an existing class um it's very",
    "start": "807600",
    "end": "815279"
  },
  {
    "text": "easy to um add a new field that should always be set and forget to set it everywhere so if if you uh you know um",
    "start": "815279",
    "end": "822959"
  },
  {
    "text": "public int I know size or something like that um uh if I if I uh just do get set",
    "start": "822959",
    "end": "830040"
  },
  {
    "text": "I then have to manually find all the places in the code base where this um node is being created uh and make sure",
    "start": "830040",
    "end": "837000"
  },
  {
    "text": "that the size has always been set right um it's a lot simpler to say in size uh",
    "start": "837000",
    "end": "842639"
  },
  {
    "text": "and then set the set the thing in the Constructor and then just literally Chase all the compiler errors right this is like a big part of my workflow when",
    "start": "842639",
    "end": "849360"
  },
  {
    "text": "I'm programming I literally just I I make a change which I know will break the type Checker and then I just go",
    "start": "849360",
    "end": "855079"
  },
  {
    "text": "through and Chase all the erors any questions about about that that's a very a very simple lesson yeah",
    "start": "855079",
    "end": "864639"
  },
  {
    "text": "do I have C do the question was uh since I do this a lot do I have custom exceptions for when an argument is null",
    "start": "871160",
    "end": "877279"
  },
  {
    "text": "is that is that what you're saying I think the um system. argument null exception is a perfectly good uh thing",
    "start": "877279",
    "end": "883320"
  },
  {
    "text": "to use here it's it's what it's for yeah and everyone understands it if I had a",
    "start": "883320",
    "end": "888399"
  },
  {
    "text": "Benjamin null exception uh people would be confused when they saw that in the in",
    "start": "888399",
    "end": "893880"
  },
  {
    "text": "the code base um at my last job we had a class called the boap recommendations",
    "start": "893880",
    "end": "899120"
  },
  {
    "text": "engine uh because the person that wrote it was called bll and we couldn't bring ourselves to change it even years after he",
    "start": "899120",
    "end": "904600"
  },
  {
    "text": "left uh because it was too too good of a name okay right so that's um that's what",
    "start": "904600",
    "end": "912759"
  },
  {
    "text": "a syntax tree looks",
    "start": "912759",
    "end": "915680"
  },
  {
    "text": "like uh okay back to the slides um oh yeah I just wanted to um draw your",
    "start": "918399",
    "end": "924199"
  },
  {
    "text": "attention to a possibility here right um in most cases right if you're",
    "start": "924199",
    "end": "929800"
  },
  {
    "text": "implementing something like a programming language um you know all of the uh types of nodes in your system",
    "start": "929800",
    "end": "936000"
  },
  {
    "text": "types of syntax tree nodes in your system right in this instance there are three and only three we don't necessarily want this uh Base Class to",
    "start": "936000",
    "end": "942720"
  },
  {
    "text": "be open to F further subclassing in another module and so a trick I occasionally do it's a little bit heavyweight um so it kind of depends on",
    "start": "942720",
    "end": "950480"
  },
  {
    "text": "you know Personal Taste uh is uh I make the jql I would make this Base Class I",
    "start": "950480",
    "end": "955720"
  },
  {
    "text": "would have it I give it a private Constructor and then I would Nest these subclasses inside it right that means",
    "start": "955720",
    "end": "961399"
  },
  {
    "text": "you can't add a subass of the jql syntax because you have to be able to call your base classes Constructor you can't add a",
    "start": "961399",
    "end": "966720"
  },
  {
    "text": "subclass without um modifying the actual jql syntax class um that's just a little",
    "start": "966720",
    "end": "974040"
  },
  {
    "text": "trick that I sometimes like to use okay any more questions about the representation of an abstract syntax",
    "start": "974040",
    "end": "981880"
  },
  {
    "text": "tree no okay how much time have I got good um okay so now that we have written",
    "start": "981880",
    "end": "989319"
  },
  {
    "text": "this abstract syntax tree we need to be able to process it right we need a way of uh taking an abstract syntax tree and",
    "start": "989319",
    "end": "996079"
  },
  {
    "text": "um I mentioned earlier that a compiler a typical compiler like Roslin is structured as a sequence of operations",
    "start": "996079",
    "end": "1001959"
  },
  {
    "text": "that modify a syntax Tree in some way and then eventually another operation that generates uh in roslin's case it's",
    "start": "1001959",
    "end": "1007440"
  },
  {
    "text": "I in many other cases it's like native code or llvm or something like that um so what do these operations actually",
    "start": "1007440",
    "end": "1014759"
  },
  {
    "text": "look like we need a way of implementing uh a function which um looks at a syntax tree and perhaps",
    "start": "1014759",
    "end": "1021560"
  },
  {
    "text": "performs a transformation returning a new syntax tree or um generates code or you know whatever uh type checks it or",
    "start": "1021560",
    "end": "1029959"
  },
  {
    "text": "runs some diagnostic depending on depending on the requirements of your programming language so um given that",
    "start": "1029959",
    "end": "1036798"
  },
  {
    "text": "there are three types of nodes right and or and Knots and tags each of those",
    "start": "1036799",
    "end": "1042240"
  },
  {
    "text": "nodes has has its own meaning and uh an operation on the syntax tree should",
    "start": "1042240",
    "end": "1047918"
  },
  {
    "text": "treat each of those noes is a as its own case yeah um so we need a way of",
    "start": "1047919",
    "end": "1054799"
  },
  {
    "text": "examining the type of node that you're looking at right one simple way of doing this would be to just use the is or as",
    "start": "1054799",
    "end": "1061080"
  },
  {
    "text": "operators the C is or as operators isn't uh isn't check is in cast I should say",
    "start": "1061080",
    "end": "1066760"
  },
  {
    "text": "or as in check um or we could uh use the new c 7 pattern matching stuff um all of",
    "start": "1066760",
    "end": "1076039"
  },
  {
    "text": "the or or we could equip our Base Class with a an enum like the the node type and then switch on that and then",
    "start": "1076039",
    "end": "1082360"
  },
  {
    "text": "downcast it to the actual noes um all of these suffer from a problem right the main problem in my opinion is that um",
    "start": "1082360",
    "end": "1089679"
  },
  {
    "text": "you don't get any checking to ensure that you have covered all of the cases all of the possibilities all the",
    "start": "1089679",
    "end": "1096360"
  },
  {
    "text": "different types of node in your operation right so if I want if I were to come back here and add another type",
    "start": "1096360",
    "end": "1102520"
  },
  {
    "text": "of node called or or like salary or remote or whatever um I need to make sure that I've updated all of the",
    "start": "1102520",
    "end": "1108840"
  },
  {
    "text": "operations in my compiler because otherwise a user could type an or query and then suddenly I don't know what to do with it and I throw an exception and",
    "start": "1108840",
    "end": "1114960"
  },
  {
    "text": "then the user's unhappy right and I would like compile time feedback for that right and so if I'm saying like if",
    "start": "1114960",
    "end": "1121640"
  },
  {
    "text": "node is and then do this if node is not if node is tag whatever um uh likewise",
    "start": "1121640",
    "end": "1128679"
  },
  {
    "text": "the c 7 pattern matching switch I don't get any feedback from the compiler when I add a new node and I forget to update",
    "start": "1128679",
    "end": "1135080"
  },
  {
    "text": "one of the functions yeah any questions about the shortcoming of if of uh is as and",
    "start": "1135080",
    "end": "1142840"
  },
  {
    "text": "switch the other downside of um of is and as is that you could forget",
    "start": "1142840",
    "end": "1149799"
  },
  {
    "text": "to in the case of is you could you could downcast it to the wrong type in the case of eyes you could forget to check",
    "start": "1149799",
    "end": "1155720"
  },
  {
    "text": "it for null um either way it's a bit sort of syntactically clunky in my opinion this the pattern matching stuff",
    "start": "1155720",
    "end": "1161039"
  },
  {
    "text": "does make a big Improvement on this um but like I said it doesn't it doesn't um",
    "start": "1161039",
    "end": "1167280"
  },
  {
    "text": "uh it doesn't it still has the shortcoming that it doesn't require you to cover all",
    "start": "1167280",
    "end": "1172400"
  },
  {
    "text": "cases um okay so uh the design I came up with here is um uh something that I",
    "start": "1172400",
    "end": "1179159"
  },
  {
    "text": "think is quite syntactically lightweight but it does require you to uh rewire your brain a little bit and think think",
    "start": "1179159",
    "end": "1184360"
  },
  {
    "text": "a little bit more abstractly about the um about the evaluation model of your program right so it looks a bit like",
    "start": "1184360",
    "end": "1190280"
  },
  {
    "text": "this I'm calling it match just for um to um uh to evoke the the notion of pattern",
    "start": "1190280",
    "end": "1197640"
  },
  {
    "text": "matching c 7 patter matching um but it's uh it's very sort of syntactically lightweight and I'm leaning on lambas to",
    "start": "1197640",
    "end": "1204120"
  },
  {
    "text": "do this right so um the idea is that if I'm so this is a this is a function that",
    "start": "1204120",
    "end": "1209640"
  },
  {
    "text": "takes a query and a job and it tells you if the job satisfies the query right",
    "start": "1209640",
    "end": "1217640"
  },
  {
    "text": "um so this is called continuation passing style right the way I Define an",
    "start": "1217640",
    "end": "1223559"
  },
  {
    "text": "operation on a jql uh node is um I say well there are three possibilities right",
    "start": "1223559",
    "end": "1229840"
  },
  {
    "text": "it could be a tag it could be and or it could be not and I need to define a way to to handle each of those cases right",
    "start": "1229840",
    "end": "1237360"
  },
  {
    "text": "the way I'm doing it is I'm writing those out as lambdas and then I'm passing it into the into the node so the",
    "start": "1237360",
    "end": "1242640"
  },
  {
    "text": "node can decide which um which of these lambas to call based on its own type",
    "start": "1242640",
    "end": "1248120"
  },
  {
    "text": "right any questions so far I'm about to I'm about to type it out so uh if you're",
    "start": "1248120",
    "end": "1253480"
  },
  {
    "text": "confused now hopefully seeing it written out will will simplify that okay",
    "start": "1253480",
    "end": "1260400"
  },
  {
    "text": "so um we want to write um should I write I'll write I'll write the implementation",
    "start": "1260400",
    "end": "1265760"
  },
  {
    "text": "first right so I'm going to write an abstract method um and we want the",
    "start": "1265760",
    "end": "1271520"
  },
  {
    "text": "caller of this method to be able to choose the return type of the operation",
    "start": "1271520",
    "end": "1277120"
  },
  {
    "text": "that they're writing right it wouldn't be very good if we were to hardcode BU as the return type because then that",
    "start": "1277120",
    "end": "1282320"
  },
  {
    "text": "would preclude us from um compiling it into an elastic search query which is something that we do um as like flow or",
    "start": "1282320",
    "end": "1289240"
  },
  {
    "text": "like performing any sort of tree rewriting because then the return type would be jql syntax again um so we need",
    "start": "1289240",
    "end": "1295840"
  },
  {
    "text": "to we need a generic type here we need to parameterize the return type so abstract T and I'm going to call it match as I said to um evoke pattern",
    "start": "1295840",
    "end": "1304320"
  },
  {
    "text": "matching um so uh when you're calling this function you need to provide a",
    "start": "1304320",
    "end": "1311200"
  },
  {
    "text": "Lambda that covers each of these two cases um so the first uh case is is a tag right so I'm going to um so this is",
    "start": "1311200",
    "end": "1318279"
  },
  {
    "text": "going to a funk a Lambda which returns a u uh",
    "start": "1318279",
    "end": "1323559"
  },
  {
    "text": "oops and its argument is um whatever was inside the tag right so this is a a funk",
    "start": "1323559",
    "end": "1330080"
  },
  {
    "text": "from a string to a u and I'm going to call it tag uh not a u a",
    "start": "1330080",
    "end": "1336559"
  },
  {
    "text": "t um help me out if I type something wrong because I am actually typing this and I probably will get something",
    "start": "1336720",
    "end": "1342480"
  },
  {
    "text": "wrong um what about the the second possibility the second possibility is that I gave you an and node right so um",
    "start": "1342480",
    "end": "1349679"
  },
  {
    "text": "and has two sub trees inside it and so the continuation that you're that I'm",
    "start": "1349679",
    "end": "1354799"
  },
  {
    "text": "going to pass uh once I've check that you that you gave me an an node I'm going to have two sub trees to give you",
    "start": "1354799",
    "end": "1361120"
  },
  {
    "text": "right so I'm going to this is going to be a function of two jql nodes to a t",
    "start": "1361120",
    "end": "1369640"
  },
  {
    "text": "right and then of course not has a single sub tree inside it and so if I",
    "start": "1369640",
    "end": "1376000"
  },
  {
    "text": "perform my type test and uh learn that it's a not I have one sub tree to give",
    "start": "1376000",
    "end": "1381880"
  },
  {
    "text": "you any questions so far about how this is going to go",
    "start": "1381880",
    "end": "1386720"
  },
  {
    "text": "down okay so now we need to this is an abstract method so now of course we need it needs to be public of course um so",
    "start": "1387120",
    "end": "1393720"
  },
  {
    "text": "now we need to go ahead and implement this abstract method in the three sub classes so if we're looking at a tab a",
    "start": "1393720",
    "end": "1400960"
  },
  {
    "text": "tag node uh override T match oh God",
    "start": "1400960",
    "end": "1408720"
  },
  {
    "text": "sometimes computers are too",
    "start": "1408919",
    "end": "1412200"
  },
  {
    "text": "helpful okay so we're looking at TAG we've got this is the tag class and so",
    "start": "1416720",
    "end": "1422799"
  },
  {
    "text": "the method the the funk that you need to continue the method with is the tag Funk",
    "start": "1422799",
    "end": "1428640"
  },
  {
    "text": "right and the thing that we pass it is the value of the tag any questions so",
    "start": "1428640",
    "end": "1434840"
  },
  {
    "text": "far okay I'm just going to copy and paste this",
    "start": "1434840",
    "end": "1440320"
  },
  {
    "text": "right so now we're looking at an and node I have two jql syntaxes to give you and the correct Funk to call here is and",
    "start": "1440320",
    "end": "1447440"
  },
  {
    "text": "right and uh left and right and uh in this instance we're",
    "start": "1447440",
    "end": "1454679"
  },
  {
    "text": "looking at a not and so the correct fun to call is not and it's going to be oper",
    "start": "1454679",
    "end": "1463159"
  },
  {
    "text": "end okay any questions about how how we're using we're using this virtual",
    "start": "1463159",
    "end": "1468559"
  },
  {
    "text": "methods to allow the subclasses to choose which Funk to",
    "start": "1468559",
    "end": "1474840"
  },
  {
    "text": "call any questions okay so now what remains is to",
    "start": "1475159",
    "end": "1482120"
  },
  {
    "text": "actually Implement that checking operation right the the operation that takes uh a query and a job and tells you",
    "start": "1482120",
    "end": "1488360"
  },
  {
    "text": "whether the job matches the query so this is in interpreter so I left this as a to-do um",
    "start": "1488360",
    "end": "1496240"
  },
  {
    "text": "right so I've got I've got this node um and so what can I do with a node well",
    "start": "1496240",
    "end": "1501559"
  },
  {
    "text": "the only thing I can uh well that's obviously a recursive call to this um the only I can do with a node that's not",
    "start": "1501559",
    "end": "1507760"
  },
  {
    "text": "one of these extension methods which I'm going to show you the other one in a minute uh is is match match the type of",
    "start": "1507760",
    "end": "1513919"
  },
  {
    "text": "the node right and in order to match something I need to give it three functions so the first function is the tag",
    "start": "1513919",
    "end": "1519720"
  },
  {
    "text": "function so what do I do if you gave me a query which is just like C I've got a",
    "start": "1519720",
    "end": "1525720"
  },
  {
    "text": "job and I've got a tag what do I do do with it right so this is a Lambda as I as I uh",
    "start": "1525720",
    "end": "1533559"
  },
  {
    "text": "Illustrated earlier so I want to see if the tag is in the job's list of tags yeah so j.",
    "start": "1533559",
    "end": "1542080"
  },
  {
    "text": "tags. contains tag",
    "start": "1542080",
    "end": "1547159"
  },
  {
    "text": "whoops right if it's an and node I've got two jql syntax uh sub",
    "start": "1547159",
    "end": "1555559"
  },
  {
    "text": "trees and I want to look at each of the sub trees and see if they uh if if the",
    "start": "1555559",
    "end": "1561600"
  },
  {
    "text": "job matches that query yeah um so I need to recursively check the left sub tree",
    "start": "1561600",
    "end": "1567919"
  },
  {
    "text": "against the job and the uh check the right sub tree against the",
    "start": "1567919",
    "end": "1573120"
  },
  {
    "text": "job and I need to and those two the Bulls that those two return I need to and them together yeah and finally uh",
    "start": "1573120",
    "end": "1581960"
  },
  {
    "text": "not uh takes an upper and and again I want to recursively",
    "start": "1581960",
    "end": "1587000"
  },
  {
    "text": "check that um operand against the job and then I just need to negate",
    "start": "1587000",
    "end": "1593640"
  },
  {
    "text": "it any questions about this about the recursive traversal of",
    "start": "1594039",
    "end": "1600880"
  },
  {
    "text": "this of this syntax tree no",
    "start": "1600880",
    "end": "1606919"
  },
  {
    "text": "sure um uh okay so uh what I wanted to illustrate here was that um this is uh a",
    "start": "1607000",
    "end": "1616080"
  },
  {
    "text": "a a type driven sty of programming right so we've uh the first thing I did was I",
    "start": "1616080",
    "end": "1621919"
  },
  {
    "text": "wrote down the the signature of this uh of this check function you know I wrote that it takes a jql syntax and it takes",
    "start": "1621919",
    "end": "1628399"
  },
  {
    "text": "a job and it returns a ball and uh knowing that I need to scrutinize the jql syntax in some manner to find out",
    "start": "1628399",
    "end": "1634559"
  },
  {
    "text": "what type of thing it is the only thing I can do with it is match it right and then in each of these three um",
    "start": "1634559",
    "end": "1639960"
  },
  {
    "text": "continuations in each of these three branches of the methods um there's only really one thing I can do it's kind of",
    "start": "1639960",
    "end": "1646039"
  },
  {
    "text": "obvious what's correct at this point because I have a string for for the tag in scope it's kind of obvious that I need to uh",
    "start": "1646039",
    "end": "1653120"
  },
  {
    "text": "Implement I need to call contains right and likewise for and and not um uh it's",
    "start": "1653120",
    "end": "1659679"
  },
  {
    "text": "kind of obvious which which ball I need to return right there's nothing in the type system that stops me from saying",
    "start": "1659679",
    "end": "1665760"
  },
  {
    "text": "right this always returns false right that's a bug um the type Checker doesn't",
    "start": "1665760",
    "end": "1671000"
  },
  {
    "text": "help me here and I think it would be unreasonable to expect a type system to do so um this is what unit tests are for",
    "start": "1671000",
    "end": "1678440"
  },
  {
    "text": "right but the type system nonetheless helped me think about what I needed to do in each case right I I split the",
    "start": "1678440",
    "end": "1685279"
  },
  {
    "text": "split the node into three the split the the method into three branches and then in each branch it was kind of obvious",
    "start": "1685279",
    "end": "1690399"
  },
  {
    "text": "what I had to do thereafter once I'd done that bit of work",
    "start": "1690399",
    "end": "1696039"
  },
  {
    "text": "um any questions about about this fake pattern matching",
    "start": "1696039",
    "end": "1701080"
  },
  {
    "text": "thing okay uh what did I have next um uh oh yeah right so last time I give",
    "start": "1701080",
    "end": "1708320"
  },
  {
    "text": "this talk this turned out to be this proved to be a little bit controversial right the classic o object-oriented",
    "start": "1708320",
    "end": "1713720"
  },
  {
    "text": "style of um writing this code would be to put a virtual method on the base",
    "start": "1713720",
    "end": "1719519"
  },
  {
    "text": "class jql syntax called check that returns a bull and allow each of those three subclasses to override that",
    "start": "1719519",
    "end": "1725880"
  },
  {
    "text": "virtual method and return that return that bull right what I don't like about",
    "start": "1725880",
    "end": "1731200"
  },
  {
    "text": "that in in this instance is um first of all it couples knowledge of like if you",
    "start": "1731200",
    "end": "1736880"
  },
  {
    "text": "if you have a lot of operation like generating an elastic search query or like doing an optimization uh the jql",
    "start": "1736880",
    "end": "1745519"
  },
  {
    "text": "syntax nodes have to know how to do that right the knowledge has to be inside the syntax tree where the syntax tree's job",
    "start": "1745519",
    "end": "1751799"
  },
  {
    "text": "is really just to be a syntax tree but more importantly um it's about what",
    "start": "1751799",
    "end": "1758039"
  },
  {
    "text": "operations do you want to make easy for future developers right which uh uh",
    "start": "1758039",
    "end": "1764519"
  },
  {
    "text": "which which um direction do you want it to be to be open in right so the virtual",
    "start": "1764519",
    "end": "1769679"
  },
  {
    "text": "method style uh makes it easy to add new types for example if I wanted to add like or or salary or remote to to my jql",
    "start": "1769679",
    "end": "1778320"
  },
  {
    "text": "um syntax class that would be easy all I have to do is um override the virtual",
    "start": "1778320",
    "end": "1784120"
  },
  {
    "text": "virtual method for each of the operations that I have because like I've got a virtual method for check and I've got a virtual method for Generate",
    "start": "1784120",
    "end": "1789640"
  },
  {
    "text": "elastic and I've got a virtual method for like reite you know um I just have to override each of those virtual",
    "start": "1789640",
    "end": "1795440"
  },
  {
    "text": "methods in uh in the the new subass that I'm adding but what it makes difficult",
    "start": "1795440",
    "end": "1801720"
  },
  {
    "text": "is to add a new virtual method because if you have lots of data types you have to go through and change every single data type in order to um add the new the",
    "start": "1801720",
    "end": "1809840"
  },
  {
    "text": "new uh the new operation to the to the uh to the type yeah lots of lots of lots of possible cases um I have to add I",
    "start": "1809840",
    "end": "1817159"
  },
  {
    "text": "have to override the new virtual method in each one of those the the pattern that I um",
    "start": "1817159",
    "end": "1823440"
  },
  {
    "text": "implemented the lightweight visitor I call it um makes it easy to add new operations because the uh operations are",
    "start": "1823440",
    "end": "1829919"
  },
  {
    "text": "decoupled from the from the syntax tree itself but it makes it hard to add new",
    "start": "1829919",
    "end": "1835000"
  },
  {
    "text": "uh types of data because I have to go through and change every function that's been written already right this is",
    "start": "1835000",
    "end": "1841360"
  },
  {
    "text": "called the expression problem it was named by Phil wadler who is um one of the Towering figures of the programming",
    "start": "1841360",
    "end": "1847679"
  },
  {
    "text": "language uh design Community um he uh he he implemented Java generics and he and",
    "start": "1847679",
    "end": "1855039"
  },
  {
    "text": "he invented um uh type classes and stuff like that so youve probably used his",
    "start": "1855039",
    "end": "1860200"
  },
  {
    "text": "work at least in in indirectly um he called it the expression problem because uh it's",
    "start": "1860200",
    "end": "1867080"
  },
  {
    "text": "particularly relevant to this sort of code right where you have an expression tree a syntax tree and you want to be",
    "start": "1867080",
    "end": "1872399"
  },
  {
    "text": "able to add new types and new operations because you want to be able to evolve your language but you also want to be",
    "start": "1872399",
    "end": "1877519"
  },
  {
    "text": "able to uh write new optimizations for your language or add a new backend to your compiler or something like that",
    "start": "1877519",
    "end": "1883320"
  },
  {
    "text": "yeah um don't underestimate how big of a deal the expression problem is it's one of the central tensions of software",
    "start": "1883320",
    "end": "1890279"
  },
  {
    "text": "engineering if I've published my base class and I have a bunch of sub classes",
    "start": "1890279",
    "end": "1895679"
  },
  {
    "text": "uh in consumers of my library who I've never even met if it's an open source Library um I can't just go ahead and add",
    "start": "1895679",
    "end": "1902039"
  },
  {
    "text": "a new operation that they have to override because I'll upset everyone right that I'll I'll break all all of",
    "start": "1902039",
    "end": "1907159"
  },
  {
    "text": "their code as soon as they update and likewise if I have operations that are defined in uh in other people's codes if",
    "start": "1907159",
    "end": "1913840"
  },
  {
    "text": "I add a new if if I'm using the um functional style of of writing code uh",
    "start": "1913840",
    "end": "1918880"
  },
  {
    "text": "if I add a new operation if I add a new subtype I should say all of my clients",
    "start": "1918880",
    "end": "1924120"
  },
  {
    "text": "have to change all of their existing functions right any questions about the expression",
    "start": "1924120",
    "end": "1931840"
  },
  {
    "text": "problem okay right so let me just go back to my um table of contents uh so I've shown you what an",
    "start": "1932960",
    "end": "1939880"
  },
  {
    "text": "abstract syntax tree looks like and I've shown you what a simple interpreter looks like um what's the time have I got",
    "start": "1939880",
    "end": "1945360"
  },
  {
    "text": "time to no not really um so now I'll show you what AA looks like okay now AA",
    "start": "1945360",
    "end": "1951279"
  },
  {
    "text": "differs from an interpreter or a type Checker or a code generator in that um",
    "start": "1951279",
    "end": "1957320"
  },
  {
    "text": "it doesn't operate on an abstract syntax tree it produces an abstract syntax tree from a string right so I can't I",
    "start": "1957320",
    "end": "1963600"
  },
  {
    "text": "obviously can't hope to use that match method that I just wrote to produce an abstract syntax tree because it's a",
    "start": "1963600",
    "end": "1970159"
  },
  {
    "text": "method on the abstract syntax tree already right um so this is going to require a new approach um I wanted to",
    "start": "1970159",
    "end": "1975720"
  },
  {
    "text": "show you a style which um first of all illustrates the so I showed you the",
    "start": "1975720",
    "end": "1981159"
  },
  {
    "text": "visitor pattern I want to illustrate the other way of Flipping The Matrix right um the reason for this the reason um I",
    "start": "1981159",
    "end": "1988600"
  },
  {
    "text": "went for the visitor pattern in in the uh in the syntax tree is that there's a",
    "start": "1988600",
    "end": "1994720"
  },
  {
    "text": "small enclosed set of nodes but there's a potentially large number of operations on the tree right for a paa there's a",
    "start": "1994720",
    "end": "2001559"
  },
  {
    "text": "lot of ways of um of building a a lot of a lot of paas in the world a lot of",
    "start": "2001559",
    "end": "2008000"
  },
  {
    "text": "different ways of producing a a structured data from a string but you can only once you've got a PA you can",
    "start": "2008000",
    "end": "2013159"
  },
  {
    "text": "only really do one thing with it you can pause a string right so the style of paa I um want I uh",
    "start": "2013159",
    "end": "2022639"
  },
  {
    "text": "like to use is something called a paa combinator library now this idea it's an",
    "start": "2022639",
    "end": "2027960"
  },
  {
    "text": "old idea it's not it's not my idea at all um but it's about representing aaza as",
    "start": "2027960",
    "end": "2035679"
  },
  {
    "text": "objects um which you can which um do a simple thing and then uh a number of",
    "start": "2035679",
    "end": "2042559"
  },
  {
    "text": "operations to combine those simple paers into more complex and interesting PES right um the code that it kind of looks",
    "start": "2042559",
    "end": "2049440"
  },
  {
    "text": "like with the Cod the code that um it produces when you write a PA com uh when you write code using a p combinator",
    "start": "2049440",
    "end": "2055320"
  },
  {
    "text": "Library um looks kind of like a script like an embedded domain specific",
    "start": "2055320",
    "end": "2060720"
  },
  {
    "text": "language in C um which sort of uh defines a script for a given P to follow",
    "start": "2060720",
    "end": "2066839"
  },
  {
    "text": "so let me um I've put a sort of miniature example at the top but I'm going to show you a more interesting",
    "start": "2066839",
    "end": "2073158"
  },
  {
    "text": "one um let me shrink this okay so for example here's a paer that paes um that",
    "start": "2073159",
    "end": "2080638"
  },
  {
    "text": "paes a not jql node right a not jql node is the string not and then some other",
    "start": "2080639",
    "end": "2088760"
  },
  {
    "text": "jql node right so that might be a tag or it might be like a parenthesized um group of other nodes",
    "start": "2088760",
    "end": "2094638"
  },
  {
    "text": "right likewise and um I'll show you so the way we pause this is we pause",
    "start": "2094639",
    "end": "2100560"
  },
  {
    "text": "like a single um expression and then we pause the word and and then we pause the next expression okay",
    "start": "2100560",
    "end": "2108000"
  },
  {
    "text": "um so for example a tag this is probably a better example um I'm going to PA a",
    "start": "2108000",
    "end": "2114640"
  },
  {
    "text": "sequence of characters uh I'm going to do it in between two square",
    "start": "2114640",
    "end": "2121040"
  },
  {
    "text": "brackets and uh once I've done that I'm going to produce a tag node right",
    "start": "2121040",
    "end": "2129640"
  },
  {
    "text": "any questions about what this um what this paa combinator idea looks like for",
    "start": "2129640",
    "end": "2134680"
  },
  {
    "text": "a consumer I'm going to implement it in a minute so",
    "start": "2134680",
    "end": "2140078"
  },
  {
    "text": "um so basically it's about building an expression a c object um using this paa",
    "start": "2140560",
    "end": "2147720"
  },
  {
    "text": "type um using a like a collection of uh of",
    "start": "2147720",
    "end": "2153680"
  },
  {
    "text": "methods that the the the paing library provides that kind of looks a bit like a domain specific",
    "start": "2153680",
    "end": "2160920"
  },
  {
    "text": "language okay so let's think about the design of what a paa does so um first of",
    "start": "2160920",
    "end": "2168240"
  },
  {
    "text": "all uh there are a few ways to create very small paas that do like exactly one",
    "start": "2168240",
    "end": "2174000"
  },
  {
    "text": "simple thing uh the first paa we uh we implement the first pza that we provide",
    "start": "2174000",
    "end": "2179880"
  },
  {
    "text": "is we call it I'm calling it return and it does nothing right all it does is um",
    "start": "2179880",
    "end": "2185280"
  },
  {
    "text": "produces a value right and this instance it's the integer three but it might be like a string or it might be uh it might",
    "start": "2185280",
    "end": "2191800"
  },
  {
    "text": "be like it might be a tag right or a not node",
    "start": "2191800",
    "end": "2196880"
  },
  {
    "text": "um another paa we we want to support is a paa that always fails and produces a",
    "start": "2196880",
    "end": "2202160"
  },
  {
    "text": "PA error okay um it doesn't doesn't do anything to the input stream of characters it just fails and then the",
    "start": "2202160",
    "end": "2208800"
  },
  {
    "text": "third uh the third um primitive paer is one that consumes a character from the",
    "start": "2208800",
    "end": "2215319"
  },
  {
    "text": "input string um callws along the input string by one character uh and returns",
    "start": "2215319",
    "end": "2222280"
  },
  {
    "text": "that character yeah there are also a few operations to",
    "start": "2222280",
    "end": "2227800"
  },
  {
    "text": "um take these simple operations and build more complex ones out of them right oops um we want to be able to sequence",
    "start": "2227800",
    "end": "2235200"
  },
  {
    "text": "two paes right so if I pa the string Fu and then I need if if I'm trying to recognize the string fo bar I might",
    "start": "2235200",
    "end": "2241800"
  },
  {
    "text": "structure that as like pass the string Fu then pass the string bar yeah uh um I",
    "start": "2241800",
    "end": "2248200"
  },
  {
    "text": "I'll go into a bit more detail of how that works right um there's also the possibility",
    "start": "2248200",
    "end": "2255240"
  },
  {
    "text": "that uh I'm looking at if if uh so when I'm paing uh a jql syntax tree I don't",
    "start": "2255240",
    "end": "2261839"
  },
  {
    "text": "know what the user's going to type right they could type a tag they could type an and uh query they could type salary uh",
    "start": "2261839",
    "end": "2268400"
  },
  {
    "text": "all of those are possibilities that my P is going to have to handle it doesn't know which one to expect right so we",
    "start": "2268400",
    "end": "2273520"
  },
  {
    "text": "need a way of choosing between two paers right based on what the user typed so if the user typed a tag then I should",
    "start": "2273520",
    "end": "2279280"
  },
  {
    "text": "delegate to the tag paer if the user typed an and quer then I should delegate to the and paer and so that would be",
    "start": "2279280",
    "end": "2285280"
  },
  {
    "text": "like um had it here so this like this um expression paa says like uh a jql node",
    "start": "2285280",
    "end": "2292880"
  },
  {
    "text": "is either a tag or it's a not node or it's a expression uh a parenthesized",
    "start": "2292880",
    "end": "2298760"
  },
  {
    "text": "expression I forgot and there um oh no I didn't notice uh and then for an expression it's a single term uh and",
    "start": "2298760",
    "end": "2306200"
  },
  {
    "text": "then it's um it's an and an uh then it's the word and and then it's the rest of",
    "start": "2306200",
    "end": "2311599"
  },
  {
    "text": "the expression okay",
    "start": "2311599",
    "end": "2318119"
  },
  {
    "text": "um right so let's think about how about what this how are we going to implement this P right what type are we going to",
    "start": "2318160",
    "end": "2324079"
  },
  {
    "text": "use to represent AA well aaza is a function that takes a string and",
    "start": "2324079",
    "end": "2329319"
  },
  {
    "text": "produces some sort of structured data of a given type right so aaza for Bulls would take like the string true or the",
    "start": "2329319",
    "end": "2335400"
  },
  {
    "text": "string false and then it would produce this t would be a bull yeah um and it would fail on any on any other string",
    "start": "2335400",
    "end": "2342800"
  },
  {
    "text": "but if you actually get down to thinking about how we're going to support the",
    "start": "2342800",
    "end": "2348520"
  },
  {
    "text": "operations particularly then and or it turns out that this simple type is not quite",
    "start": "2348520",
    "end": "2353839"
  },
  {
    "text": "enough so let's think about how you would um pass two puzles in sequence right so the uh the string Fu bar Fu",
    "start": "2353839",
    "end": "2360359"
  },
  {
    "text": "then bar if I pass the string F uh I then need to look at the rest of the",
    "start": "2360359",
    "end": "2366839"
  },
  {
    "text": "string after after I paused Fu in order to pause the word bar right does that make",
    "start": "2366839",
    "end": "2372440"
  },
  {
    "text": "sense so actually it turns out that it consumes uh so here's here's fuba right",
    "start": "2372440",
    "end": "2379640"
  },
  {
    "text": "um the first paer has to leave something behind after it's consumed its part of",
    "start": "2379640",
    "end": "2384920"
  },
  {
    "text": "the input string has to leave something behind so that the second paer has something to look at yeah um so instead",
    "start": "2384920",
    "end": "2391560"
  },
  {
    "text": "of returning just a t i need to return uh a pair right I need to return the",
    "start": "2391560",
    "end": "2396640"
  },
  {
    "text": "structured data that I passed the value and I need to return the leftovers from the paa yeah the remaining input string",
    "start": "2396640",
    "end": "2402920"
  },
  {
    "text": "for the uh for the second P of the then method to uh to",
    "start": "2402920",
    "end": "2408839"
  },
  {
    "text": "consume okay um another subtlety about the then methods is that once I've",
    "start": "2408839",
    "end": "2415000"
  },
  {
    "text": "passed the string Fu that is a successful PA by itself right I have a result to give you right so if it was",
    "start": "2415000",
    "end": "2421200"
  },
  {
    "text": "like um Fu and then return three uh By the time I've passed the word f I have a",
    "start": "2421200",
    "end": "2428079"
  },
  {
    "text": "three for the uh uh before I've even thought about what the next paa is right so the general version of this then",
    "start": "2428079",
    "end": "2434359"
  },
  {
    "text": "method actually uh takes a paa which returns T's and then it's able to use",
    "start": "2434359",
    "end": "2439440"
  },
  {
    "text": "that t to choose what the next paa is right I'm seeing some confused faces do",
    "start": "2439440",
    "end": "2445680"
  },
  {
    "text": "you have any questions don't be",
    "start": "2445680",
    "end": "2453040"
  },
  {
    "text": "shy I'm going to implement this in a minute so if you think about how to articulate your question and then come back to",
    "start": "2454359",
    "end": "2461960"
  },
  {
    "text": "me um okay what about the or method right um this one the one which chooses",
    "start": "2461960",
    "end": "2467520"
  },
  {
    "text": "between a a pair of paas right well in general in the presence of or um so so",
    "start": "2467520",
    "end": "2475119"
  },
  {
    "text": "here at the top is a paa that can either PA Fu or bar right those are two the two valid inputs for this paa um in the",
    "start": "2475119",
    "end": "2482200"
  },
  {
    "text": "presence of or each uh each a given input string may have more than one",
    "start": "2482200",
    "end": "2487800"
  },
  {
    "text": "valid PA right so here's a sort of slightly pathological ADV example but",
    "start": "2487800",
    "end": "2493000"
  },
  {
    "text": "here's a paa which paes Fu and Returns the value one or it can pass through and return the value two how do you know uh",
    "start": "2493000",
    "end": "2500599"
  },
  {
    "text": "which one is the correct one to return right the simplest way is to just return both of them right Each of which has",
    "start": "2500599",
    "end": "2506200"
  },
  {
    "text": "their own leftovers yeah so in fact rather than uh",
    "start": "2506200",
    "end": "2511640"
  },
  {
    "text": "returning a pair of T and string we're going to return a list of uh T's and strings yeah",
    "start": "2511640",
    "end": "2518359"
  },
  {
    "text": "um this is also how we Implement failing a a failure paa we just return no",
    "start": "2518359",
    "end": "2523400"
  },
  {
    "text": "results and it's also how we implement the DU nothing return P we just return a single result and don't consume any",
    "start": "2523400",
    "end": "2530839"
  },
  {
    "text": "input yeah so um this is the this is the type we're going to be working with uh",
    "start": "2530960",
    "end": "2536720"
  },
  {
    "text": "and um hopefully you'll never forget it because there's a nice nursery rhyme thanks to Fritz rer a paa for things is",
    "start": "2536720",
    "end": "2543119"
  },
  {
    "text": "a function from strings to lists of pairs of things and strings okay so uh let's uh let's actually sit",
    "start": "2543119",
    "end": "2549920"
  },
  {
    "text": "down and write those functions that I uh that I wanted to write like so here they are um I've just got them all returning",
    "start": "2549920",
    "end": "2555200"
  },
  {
    "text": "null at the moment so here's my here's my paa type my delegate a function from",
    "start": "2555200",
    "end": "2561720"
  },
  {
    "text": "strings to lists of pairs and things and strings okay so how are we going to implement uh a paa that doesn't consume",
    "start": "2561720",
    "end": "2568960"
  },
  {
    "text": "any input but returns a single value okay well so like I said it's a delegate which means it's a function and it takes",
    "start": "2568960",
    "end": "2575640"
  },
  {
    "text": "a string as an input so let's say input Arrow um and what's the return value",
    "start": "2575640",
    "end": "2580880"
  },
  {
    "text": "right well I said uh it we we don't consume anything from the input string so the remaining input is literally the",
    "start": "2580880",
    "end": "2587880"
  },
  {
    "text": "string that we were given right there's no there's no difference between the input and the uh and the leftovers and",
    "start": "2587880",
    "end": "2594760"
  },
  {
    "text": "the value that we return is the value that we were given right so I'm going to return a single a Singleton list",
    "start": "2594760",
    "end": "2601480"
  },
  {
    "text": "containing uh the value that I was given this value and the same input that you gave",
    "start": "2601480",
    "end": "2608720"
  },
  {
    "text": "me to pause yeah any questions so far about return do shout out if you have any",
    "start": "2608720",
    "end": "2615599"
  },
  {
    "text": "questions interrupt me okay a paa that fails uh again this is a function because PES are functions from strings",
    "start": "2615599",
    "end": "2621559"
  },
  {
    "text": "to results a paa that fails is a paa that doesn't have any results to give me",
    "start": "2621559",
    "end": "2627160"
  },
  {
    "text": "yeah so I'm just going to turn and uh empty inable empty of and it's this",
    "start": "2627160",
    "end": "2635160"
  },
  {
    "text": "juple type yeah I'm using the c 7 tups here by the",
    "start": "2635160",
    "end": "2642599"
  },
  {
    "text": "way um it's a it's a pretty nice new c 7 language feature okay this one's a bit more",
    "start": "2642599",
    "end": "2648920"
  },
  {
    "text": "interesting what about a paa which consumes a single character of any any",
    "start": "2648920",
    "end": "2654319"
  },
  {
    "text": "character right and returns that character right so this is a pza which returns a Char um so again it's a function from an",
    "start": "2654319",
    "end": "2661839"
  },
  {
    "text": "input string to right well if the input string is empty then I can't",
    "start": "2661839",
    "end": "2667839"
  },
  {
    "text": "uh I can't give you a character right so uh input. length is",
    "start": "2667839",
    "end": "2675440"
  },
  {
    "text": "zero if it's zero then I can't do anything right so I'm just going to",
    "start": "2675440",
    "end": "2683200"
  },
  {
    "text": "fail if if you did in fact give me input then um I want to so the the I want to",
    "start": "2683240",
    "end": "2690559"
  },
  {
    "text": "pop a c off the input and that's my result and the leftovers the remaining input is the rest of the string apart",
    "start": "2690559",
    "end": "2696880"
  },
  {
    "text": "from from the first character yeah so I'm going to return a Singleton",
    "start": "2696880",
    "end": "2703359"
  },
  {
    "text": "thing um so this is going to be the first character of the input and the",
    "start": "2703359",
    "end": "2709400"
  },
  {
    "text": "leftovers are going to be the remaining input uh I get that right I do",
    "start": "2709400",
    "end": "2717640"
  },
  {
    "text": "wrong uh oh I need to um I need to cast that to an ion",
    "start": "2717640",
    "end": "2723359"
  },
  {
    "text": "mobile I think maybe what have I",
    "start": "2723359",
    "end": "2729880"
  },
  {
    "text": "done input of zero it should be it should be uh that should be a Char and",
    "start": "2730200",
    "end": "2735359"
  },
  {
    "text": "that should be a Char I think I think I got my type annotation wrong oh it's because that yeah that's not a Char either there we go that's that's what it",
    "start": "2735359",
    "end": "2741880"
  },
  {
    "text": "is I think I don't need that c after to all okay so there's a paa which consumes",
    "start": "2741880",
    "end": "2747359"
  },
  {
    "text": "a character from the input string and then it passes passes the rest of the string to the following paa which I will",
    "start": "2747359",
    "end": "2754480"
  },
  {
    "text": "show you now so how do we Implement a paa with which runs a first paa and then runs the it uses right so this is a paa",
    "start": "2754480",
    "end": "2761839"
  },
  {
    "text": "that runs we're going to return a paa and it's going it's going to what that PA is going to do it's going to run this",
    "start": "2761839",
    "end": "2767880"
  },
  {
    "text": "p paa and then it's going to use the result of P pass it to F and then run",
    "start": "2767880",
    "end": "2775160"
  },
  {
    "text": "the the resulting paer on the leftovers that the P paer produced",
    "start": "2775160",
    "end": "2781359"
  },
  {
    "text": "okay so uh it's going to be a function of course because PES are functions so",
    "start": "2781359",
    "end": "2787079"
  },
  {
    "text": "to run the P paer we give it the input string right and so this is going to be a ion numerable a collection of things",
    "start": "2787079",
    "end": "2794640"
  },
  {
    "text": "so and this second p is going to return a collection of things so I want to select",
    "start": "2794640",
    "end": "2800800"
  },
  {
    "text": "many I'm just using the normal link select manyu here um so this is uh this",
    "start": "2800800",
    "end": "2806800"
  },
  {
    "text": "is going to be a tuple whoops each result in the output of aaza",
    "start": "2806800",
    "end": "2814760"
  },
  {
    "text": "is a is a pair of result and leftovers right so I have uh a function which",
    "start": "2814760",
    "end": "2822119"
  },
  {
    "text": "needs a t and the tupal it that is a is a pair of a t and some leftovers so the",
    "start": "2822119",
    "end": "2827839"
  },
  {
    "text": "only thing I can do with f is give it the T from the Tuple",
    "start": "2827839",
    "end": "2835559"
  },
  {
    "text": "yeah now what do I do with the resulting paraa um I want to see no it's not going",
    "start": "2835559",
    "end": "2841359"
  },
  {
    "text": "to this expression right we took a funk of T to P of you we gave it a t so now this expression is a PA r view yeah what",
    "start": "2841359",
    "end": "2848760"
  },
  {
    "text": "do we do with a PA view well we it's a function so we apply it to something what do we apply it to we apply it to",
    "start": "2848760",
    "end": "2853800"
  },
  {
    "text": "the rest the the the remaining input from the first paer right which is jup do",
    "start": "2853800",
    "end": "2861079"
  },
  {
    "text": "leftovers okay any questions about then it's a little bit um it's very tur so",
    "start": "2861200",
    "end": "2867960"
  },
  {
    "text": "there might be some questions about it",
    "start": "2867960",
    "end": "2875200"
  },
  {
    "text": "sure okay what about a paa which um can run two paas well this one's pretty",
    "start": "2875200",
    "end": "2881800"
  },
  {
    "text": "simple um again it's a function paas are functions um we are going to run p on",
    "start": "2881800",
    "end": "2887480"
  },
  {
    "text": "the input and then we're going to run Q on the input what do we do with p and Q",
    "start": "2887480",
    "end": "2892800"
  },
  {
    "text": "well each of them returns an innumerable of results and so we just want to return all of the results right so we just want",
    "start": "2892800",
    "end": "2898280"
  },
  {
    "text": "to concat the two innumerables so p input. concat q input",
    "start": "2898280",
    "end": "2906800"
  },
  {
    "text": "so those are our um six six five primitive operations right it turns out",
    "start": "2909359",
    "end": "2916119"
  },
  {
    "text": "that this is enough to allow us to now work at a much higher level we can talk about combining paas using these five",
    "start": "2916119",
    "end": "2922680"
  },
  {
    "text": "Primitives rather than talking about like looking at an input string using you know writing a function that looks",
    "start": "2922680",
    "end": "2928200"
  },
  {
    "text": "an input string and then produces a result from that thing produces some leftovers right so yeah",
    "start": "2928200",
    "end": "2936400"
  },
  {
    "text": "okay okay okay um the question was why does this oraz use the con I obviously didn't explain it clearly enough Okay so",
    "start": "2938559",
    "end": "2944960"
  },
  {
    "text": "we've got two paas right p and Q and A paa is a function right that",
    "start": "2944960",
    "end": "2950520"
  },
  {
    "text": "takes an input string so uh uh we want to write a",
    "start": "2950520",
    "end": "2955720"
  },
  {
    "text": "function from an input string to a collection of results right each of these PES produces a collection of",
    "start": "2955720",
    "end": "2961079"
  },
  {
    "text": "results right once I've applied so so the first thing I do is I apply P to the input string and I apply Q to the input",
    "start": "2961079",
    "end": "2966400"
  },
  {
    "text": "string to see what results those two paes returned right um but as I said",
    "start": "2966400",
    "end": "2971599"
  },
  {
    "text": "earlier in the presence of Alternatives a given input string may have multiple valid paes right so it's possible that",
    "start": "2971599",
    "end": "2977440"
  },
  {
    "text": "this P just failed and didn't return any results or this Q failed and didn't return any results but in general they may each return multiple results yeah",
    "start": "2977440",
    "end": "2986240"
  },
  {
    "text": "and so the result of uh combining two paes in this manner is all of the results of the first PA and all of the",
    "start": "2986240",
    "end": "2992400"
  },
  {
    "text": "results of the second paer does that make any sense yeah any more questions",
    "start": "2992400",
    "end": "2997720"
  },
  {
    "text": "have I done a good good enough job of explaining that now there might be some are you sure there aren't any questions about this then",
    "start": "2997720",
    "end": "3005040"
  },
  {
    "text": "method okay all right all right so I I was talking about how um these five",
    "start": "3005839",
    "end": "3011200"
  },
  {
    "text": "Primitives uh allow us to combine to talk about combining paes right not about um not about examining an input",
    "start": "3011200",
    "end": "3020240"
  },
  {
    "text": "string and like doing a character at a time we can talk we can work at a much higher level and combine paes right so",
    "start": "3020240",
    "end": "3026720"
  },
  {
    "text": "for example um what's a good example okay so here's one which Maps um a",
    "start": "3026720",
    "end": "3033440"
  },
  {
    "text": "function over the result of a paa right so uh this aaza which Maps the function",
    "start": "3033440",
    "end": "3039640"
  },
  {
    "text": "over the result of AA runs the first paa on the input string takes its result",
    "start": "3039640",
    "end": "3044760"
  },
  {
    "text": "remember then is a takes a takes a funk as its argument so it takes the result and the paa that we return doesn't do",
    "start": "3044760",
    "end": "3052359"
  },
  {
    "text": "anything it doesn't change the input string at all all it returns is the result of applying the function to the",
    "start": "3052359",
    "end": "3057920"
  },
  {
    "text": "results yeah likewise we can do we can do a linky there um which takes a predicate",
    "start": "3057920",
    "end": "3065040"
  },
  {
    "text": "and fails uh returns no results if the predicate does not",
    "start": "3065040",
    "end": "3072000"
  },
  {
    "text": "um if the if the result of the paa does not match the predicate right so again we're going to use the then method we're",
    "start": "3072000",
    "end": "3077480"
  },
  {
    "text": "going to run the predicate over the results of the paa if it succeeded then",
    "start": "3077480",
    "end": "3082960"
  },
  {
    "text": "we don't do anything but if it failed then the paa fails yeah um one more thing I wanted to show",
    "start": "3082960",
    "end": "3089200"
  },
  {
    "text": "you was um I guess you guys probably know that um the uh link query syntax",
    "start": "3089200",
    "end": "3096559"
  },
  {
    "text": "the from select thing um is not bound to I numerable any type that implements a",
    "start": "3096559",
    "end": "3101839"
  },
  {
    "text": "select many method with the correct signature you can use from X in thing so",
    "start": "3101839",
    "end": "3108000"
  },
  {
    "text": "I've written select many here it's basically an alias for then with a little bit of um a little bit more stuff at the end of it um but that allows us",
    "start": "3108000",
    "end": "3115520"
  },
  {
    "text": "to write a quite a nice um sort of script style um way of writing aaza",
    "start": "3115520",
    "end": "3121960"
  },
  {
    "text": "right we can use um so so what so the way you read a from select thing for a",
    "start": "3121960",
    "end": "3127359"
  },
  {
    "text": "paa is you just read it from top to bottom so this says run the before paa run the paa and then run the after PA",
    "start": "3127359",
    "end": "3134119"
  },
  {
    "text": "this is a a paa this is a function which takes a paa and runs it surrounded by",
    "start": "3134119",
    "end": "3139680"
  },
  {
    "text": "two other paas right so that would be like parentheses so uh in fact in this",
    "start": "3139680",
    "end": "3144920"
  },
  {
    "text": "example so I'm for a tag I'm saying it's a a bunch of characters in between an",
    "start": "3144920",
    "end": "3150000"
  },
  {
    "text": "Open Bracket and a closing bracket yeah um so that's kind of nice anyway uh",
    "start": "3150000",
    "end": "3156880"
  },
  {
    "text": "the point of this though is that this is a this is a library this is reusable codes right it I haven't mentioned jql",
    "start": "3156880",
    "end": "3163559"
  },
  {
    "text": "syntax in anywhere in this it's the the client code that that talks about jql",
    "start": "3163559",
    "end": "3169119"
  },
  {
    "text": "syntaxes um but the design of this library is the type really we wrote down",
    "start": "3169119",
    "end": "3174760"
  },
  {
    "text": "a type which supported the operations we wanted um and then these operations kind of wrote themselves given what we",
    "start": "3174760",
    "end": "3180720"
  },
  {
    "text": "expected of the type yeah so",
    "start": "3180720",
    "end": "3186720"
  },
  {
    "text": "um so yeah so we we kind of let the type system Drive the design of this uh of",
    "start": "3186720",
    "end": "3192280"
  },
  {
    "text": "this paing Library um there was one more thing I wanted to say but I forgot what it was it was down",
    "start": "3192280",
    "end": "3199640"
  },
  {
    "text": "here I think uh no it's gone never mind um",
    "start": "3199640",
    "end": "3208040"
  },
  {
    "text": "okay uh are there any more questions about this paing",
    "start": "3208040",
    "end": "3213559"
  },
  {
    "text": "Library no okay so uh that's I've shown you all",
    "start": "3214680",
    "end": "3221799"
  },
  {
    "text": "this uh okay oh yeah I just wanted to talk about um I've written a a library which does this but um but it's",
    "start": "3221799",
    "end": "3228720"
  },
  {
    "text": "basically faster than the the the stupid thing about this implementation the really stupid thing is that I return a",
    "start": "3228720",
    "end": "3235240"
  },
  {
    "text": "string of leftovers right a string is a sequence of utf16 characters packed into",
    "start": "3235240",
    "end": "3240359"
  },
  {
    "text": "an array and so that means every time I consume a character I copy almost the",
    "start": "3240359",
    "end": "3245960"
  },
  {
    "text": "entire string right so this is a this is a really awful P it's got really awful ASM totic because every time you consume",
    "start": "3245960",
    "end": "3251839"
  },
  {
    "text": "a single C you copy the rest of the string into a new string and then send it onto the next one which is just it's just appalling um uh so um in my library",
    "start": "3251839",
    "end": "3261920"
  },
  {
    "text": "which is on GitHub I'll put the slide back up um all I do really is I keep the string as it is and I have a pointer",
    "start": "3261920",
    "end": "3268599"
  },
  {
    "text": "saying where am I in the string currently and I just move it left and right as as necessary um I also have",
    "start": "3268599",
    "end": "3274720"
  },
  {
    "text": "tools for uh paing expressions in a in a slightly nicer way like the this jql",
    "start": "3274720",
    "end": "3280160"
  },
  {
    "text": "syntax um is an expression so uh in the um real implementation in our codebase",
    "start": "3280160",
    "end": "3285760"
  },
  {
    "text": "we're using my expression paing stuff uh and I also support um lazy pausing so I",
    "start": "3285760",
    "end": "3291200"
  },
  {
    "text": "can pause a stream or a text reader rather than just a a string which I know is fully in memory",
    "start": "3291200",
    "end": "3297640"
  },
  {
    "text": "um there's a I have a couple of competitors in the in the paraa combinator space there's fpac which is",
    "start": "3297640",
    "end": "3303319"
  },
  {
    "text": "an F Library that's very good but um it's not easy to consume from C because it's an F Library you have to pull in",
    "start": "3303319",
    "end": "3309440"
  },
  {
    "text": "the full the whole F standard library and some of the operators have really strange names if you uh if you look at",
    "start": "3309440",
    "end": "3314760"
  },
  {
    "text": "them in C there's also a library called spater which I guess is probably a German word I don't know um have I have",
    "start": "3314760",
    "end": "3322400"
  },
  {
    "text": "I pronounced it wrong spraker thank you um uh I basically um we were looking at uh",
    "start": "3322400",
    "end": "3330400"
  },
  {
    "text": "tools for paing for this jql uh feature and uh we looked at spra and I basically",
    "start": "3330400",
    "end": "3336799"
  },
  {
    "text": "said I can do a better job than spra um there I think I think spra has some um",
    "start": "3336799",
    "end": "3343480"
  },
  {
    "text": "some uh efficiency problems which basically can't be fixed without rewriting the whole library in a",
    "start": "3343480",
    "end": "3348920"
  },
  {
    "text": "backwards incompatible way so that's what I did I rewrote it um and I called it pigeon oh jeez I've got to wrap up um",
    "start": "3348920",
    "end": "3356039"
  },
  {
    "text": "I just wanted to very quickly um talk about the downside of this match method",
    "start": "3356039",
    "end": "3361960"
  },
  {
    "text": "this match method right uh uh this one right so each of these uh lambdas is a",
    "start": "3361960",
    "end": "3368480"
  },
  {
    "text": "closure we reference the job right um if you look at the uh com the the the I",
    "start": "3368480",
    "end": "3374920"
  },
  {
    "text": "that Roslin produces for a closure um what it what it does is it create it uh",
    "start": "3374920",
    "end": "3381880"
  },
  {
    "text": "lambdas basically compile into a class right and when you invoke when you pass",
    "start": "3381880",
    "end": "3388039"
  },
  {
    "text": "pass a Lambda around what you're actually passing around is a reference to the classes method right so the",
    "start": "3388039",
    "end": "3394640"
  },
  {
    "text": "problem with the match method is that every time you call this check uh thing",
    "start": "3394640",
    "end": "3400599"
  },
  {
    "text": "you allocate a new closure on the Heap um the idea uh that the so um that's",
    "start": "3400599",
    "end": "3406920"
  },
  {
    "text": "what produces such bad performance right it's like it's like 10 times worse than the uh than the than the um the fastest",
    "start": "3406920",
    "end": "3413799"
  },
  {
    "text": "implementation that I benchmarked and it and it has heat residency whereas all the others just live on the stack um so",
    "start": "3413799",
    "end": "3420200"
  },
  {
    "text": "my idea was basically um let's write a compiler plugin that looks at looks for calls to this match method and rewrites",
    "start": "3420200",
    "end": "3426799"
  },
  {
    "text": "them into the switch statement that you would have written in the naive way right the uh untyped switch statement",
    "start": "3426799",
    "end": "3433400"
  },
  {
    "text": "that you would have written in a naive way here's a very simple algorithm I haven't really got time to go through it um but this is this is what the sort of",
    "start": "3433400",
    "end": "3439319"
  },
  {
    "text": "generated code looks like right so you'd write this match method on the left and I'm going to generate a method which",
    "start": "3439319",
    "end": "3444640"
  },
  {
    "text": "just does like a switch statement um and uh does the switch and cast and",
    "start": "3444640",
    "end": "3451119"
  },
  {
    "text": "and Returns the right thing the code on the right hand Sid has no allocations right but the code on the left hand side",
    "start": "3451119",
    "end": "3457160"
  },
  {
    "text": "does because I'm closing over this y variable um uh this is kind of a crap example because um I should have used",
    "start": "3457160",
    "end": "3464200"
  },
  {
    "text": "the jql thing but uh this is this is like a different language which uses um",
    "start": "3464200",
    "end": "3469400"
  },
  {
    "text": "uh which does like arithmetic Expressions plus and times or something like that um uh the problem is really",
    "start": "3469400",
    "end": "3475880"
  },
  {
    "text": "that uh Roslin is not at the moment set up for writing compiler plugins writing optim user defined optimization passes",
    "start": "3475880",
    "end": "3483039"
  },
  {
    "text": "passes um uh so I basically I'll show you kind of what the code looks like",
    "start": "3483039",
    "end": "3488200"
  },
  {
    "text": "it's a bit messy um I basically had to",
    "start": "3488200",
    "end": "3493880"
  },
  {
    "text": "uh there's a load of crap in this top level method which um you know I have to",
    "start": "3493880",
    "end": "3499359"
  },
  {
    "text": "manually import all the right C references and I have to look sort of manually invoke the compiler after",
    "start": "3499359",
    "end": "3505400"
  },
  {
    "text": "having like run my my own stuff um I would like to see a future osin API",
    "start": "3505400",
    "end": "3511000"
  },
  {
    "text": "which um supports plugins in the meantime at stack exchange my steam colleague Sam has written uh We've",
    "start": "3511000",
    "end": "3516359"
  },
  {
    "text": "written our own bit of infrastructure which supports um compiler plugins and what we're using it for stack exchange",
    "start": "3516359",
    "end": "3521920"
  },
  {
    "text": "is um localization so rather than look up a translated string at runtime we",
    "start": "3521920",
    "end": "3527559"
  },
  {
    "text": "literally just rewrite the calls to uh localize we rewrite those into a big switch statement based on the user's",
    "start": "3527559",
    "end": "3533520"
  },
  {
    "text": "current language um uh okay that's more or less it I the the",
    "start": "3533520",
    "end": "3540119"
  },
  {
    "text": "takeaway from this talk is um uh is that a type um isn't like a",
    "start": "3540119",
    "end": "3547920"
  },
  {
    "text": "test right a type is a design tool it's a thinking tool um if you allow the types to drive or even in the case of",
    "start": "3547920",
    "end": "3555000"
  },
  {
    "text": "that paing Library the type kind of was the library uh and we just had a bunch of methods which the the type sort of",
    "start": "3555000",
    "end": "3561920"
  },
  {
    "text": "naturally supports right um uh and you can you can use that to produce",
    "start": "3561920",
    "end": "3568280"
  },
  {
    "text": "some very simple code or at least some very tur and readable code",
    "start": "3568280",
    "end": "3574200"
  },
  {
    "text": "um uh often though that requires sort of uh rewiring your brain to think outside",
    "start": "3574400",
    "end": "3580319"
  },
  {
    "text": "of the imperative mode of thinking right so um the uh the paing stuff uh this is",
    "start": "3580319",
    "end": "3586839"
  },
  {
    "text": "quite sort of this doesn't necessarily look that much like C it's kind of it's very sort of expression and not very",
    "start": "3586839",
    "end": "3592359"
  },
  {
    "text": "like uh you don't you know you'd expect to see some for Loops if you're uh it's ating over a string right um uh and like",
    "start": "3592359",
    "end": "3599319"
  },
  {
    "text": "this is kind of slight a slight abuse of the uh of the link syntax so my advice would be um try learning a functional",
    "start": "3599319",
    "end": "3606559"
  },
  {
    "text": "language if you could follow um what I was doing today then functional languages are well within your grasp I promise you um don't be don't be scared",
    "start": "3606559",
    "end": "3615319"
  },
  {
    "text": "uh the downsides of this style of uh of writing code I touched upon slightly um",
    "start": "3615319",
    "end": "3622200"
  },
  {
    "text": "if you're using a lot of closures as uh as I was um earlier then you're going to",
    "start": "3622200",
    "end": "3627359"
  },
  {
    "text": "um you're going to end up uh allocating a lot as I showed you um I would love to see uh Roslin tool I would love to see",
    "start": "3627359",
    "end": "3635440"
  },
  {
    "text": "support in Roslin for um writing sort of pluggable compiler optimizations so for",
    "start": "3635440",
    "end": "3640640"
  },
  {
    "text": "example I could write like uh I could I could um ship uh some code like jql",
    "start": "3640640",
    "end": "3647480"
  },
  {
    "text": "syntax in a library and together I could ship a compiler plugin which um allows you to write type safe code but",
    "start": "3647480",
    "end": "3653599"
  },
  {
    "text": "generates fast imperative code you know um uh also I wanted to um bring to your",
    "start": "3653599",
    "end": "3660799"
  },
  {
    "text": "attention uh the fact that um there's some interesting um language design",
    "start": "3660799",
    "end": "3667839"
  },
  {
    "text": "going on right now particularly in like the rust and go um uh languages where",
    "start": "3667839",
    "end": "3673039"
  },
  {
    "text": "they're using the type system to help you reason about the performance of your code and the correctness of your code right so rust has what's called a borrow",
    "start": "3673039",
    "end": "3678839"
  },
  {
    "text": "Checker which basically make sure you don't um leak memory that's a performance issue but they're using the type system to help you reason about it",
    "start": "3678839",
    "end": "3686640"
  },
  {
    "text": "um okay uh I've got maybe a couple of minutes for questions no I've got minus one minute for questions um so uh see me",
    "start": "3686640",
    "end": "3693920"
  },
  {
    "text": "after if you have any questions uh thank you very much [Applause]",
    "start": "3693920",
    "end": "3703549"
  }
]