[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "all right well that sounds like the sounds like the Bell we'll go ahead and get started here so",
    "start": "5620",
    "end": "13170"
  },
  {
    "text": "my name is Aaron Stannard and I'm one of the cofounders of the aqua dot net project and today we're going to talk a",
    "start": "13170",
    "end": "20259"
  },
  {
    "text": "little bit about iodine net actress systems and the future of distributed computing in.net so quick show of hands",
    "start": "20259",
    "end": "27550"
  },
  {
    "text": "from everyone in the room who's actually used akkad on that before all right so we got a little bit who is familiar with",
    "start": "27550",
    "end": "34180"
  },
  {
    "text": "the actor model who's heard of that before quick show hands did bigger group great and who's currently working on",
    "start": "34180",
    "end": "40989"
  },
  {
    "text": "what you would call like distributed systems development but today a quick show of hands all right cool so they",
    "start": "40989",
    "end": "46869"
  },
  {
    "text": "want to get a little level set for sort of who's attending today so I'll tell",
    "start": "46869",
    "end": "52180"
  },
  {
    "start": "51000",
    "end": "51000"
  },
  {
    "text": "you why you should care about anything that I'm gonna say over the next hour or so and that's that if you're a back-end",
    "start": "52180",
    "end": "58269"
  },
  {
    "text": "developer today the expectations for you and what you are expected to deliver at work have never been higher than they",
    "start": "58269",
    "end": "64628"
  },
  {
    "text": "are right now in the Big Data space there's this phrase called the three V's",
    "start": "64629",
    "end": "69700"
  },
  {
    "text": "you have to worry about so the first one is velocity which is that's the amount",
    "start": "69700",
    "end": "76090"
  },
  {
    "text": "of work our servers are expected to do is increasing in terms of the amount of",
    "start": "76090",
    "end": "81250"
  },
  {
    "text": "requests per minute or requests per second we have to serve so the velocity with which people are beginning to",
    "start": "81250",
    "end": "86800"
  },
  {
    "text": "access our services and the way in which the beginning to use them is increasing",
    "start": "86800",
    "end": "91810"
  },
  {
    "text": "all the time the second V is the concept of variety and we're going to hear of a variety of",
    "start": "91810",
    "end": "98230"
  },
  {
    "text": "different experiences people want to have with our back-end services so a couple of good examples of things we",
    "start": "98230",
    "end": "104320"
  },
  {
    "text": "have to do today we didn't have to ten years ago we have the service mobile clients now who want access to their",
    "start": "104320",
    "end": "110470"
  },
  {
    "text": "data in real time on a device that has much more limited bandwidth than what you'd normally get from a desktop or a",
    "start": "110470",
    "end": "116590"
  },
  {
    "text": "laptop so you have to cater and experience to suit them as well as our existing sort of web clients - another",
    "start": "116590",
    "end": "123430"
  },
  {
    "text": "example of variety who is using signal are today quick show of hands the",
    "start": "123430",
    "end": "128679"
  },
  {
    "text": "real-time web is a totally new type of experience that's only really been possible for the past five years or so",
    "start": "128679",
    "end": "134440"
  },
  {
    "text": "and that's yet another class of experience we might be asked to deliver to our end users at some point I'm in",
    "start": "134440",
    "end": "141639"
  },
  {
    "text": "the lasts of the three V's you have to worry about is volume so this velocity volume and variety volume refers to the sheer",
    "start": "141639",
    "end": "148989"
  },
  {
    "text": "amount of data we're expected to use retain and analyze in order to produce the most value for our end users sir",
    "start": "148989",
    "end": "156819"
  },
  {
    "text": "expected to maintain a system that can be available during all three of these sort of increasing demands on us with no",
    "start": "156819",
    "end": "164560"
  },
  {
    "text": "downtime at all and so what all this amounts to is that a chief concern that",
    "start": "164560",
    "end": "170620"
  },
  {
    "text": "back-end developers have had to get acquainted with over the past 10 years or so is the concept of scalability and",
    "start": "170620",
    "end": "177400"
  },
  {
    "text": "availability and what I'm going to tell you in the next few minutes here is that the reason why technology is like a",
    "start": "177400",
    "end": "183370"
  },
  {
    "text": "cadet and the actor/model are taking off is because the obvious ways of achieving this are all inherently wrong let me",
    "start": "183370",
    "end": "190959"
  },
  {
    "text": "give you some examples so your traditional cred as followed this sort",
    "start": "190959",
    "end": "196810"
  },
  {
    "start": "193000",
    "end": "193000"
  },
  {
    "text": "of design over the past 20 20 30 years you have a load balancer that",
    "start": "196810",
    "end": "202389"
  },
  {
    "text": "round-robin some requests to a couple of web servers then you might have a private zone with a sequel database",
    "start": "202389",
    "end": "208930"
  },
  {
    "text": "sitting in it that might have a slave that it can fail over to you might have a little ol lot process that goes and",
    "start": "208930",
    "end": "215590"
  },
  {
    "text": "you know grinds out all of your business intelligence and analytics and then you have your internal line of business",
    "start": "215590",
    "end": "221560"
  },
  {
    "text": "applications that all consume that data for the different business units in your organization so your analyst your",
    "start": "221560",
    "end": "227799"
  },
  {
    "text": "marketing team your finance people your sales folks etc so this is sort of what",
    "start": "227799",
    "end": "232840"
  },
  {
    "text": "the traditional architecture has looked like even today for your typical enterprise application well let's take a",
    "start": "232840",
    "end": "241150"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "look at how some of the different changes and you have lost the volume or variety might put this system under",
    "start": "241150",
    "end": "248109"
  },
  {
    "text": "stress so based on this diagram if we experienced the giant surge and user",
    "start": "248109",
    "end": "254109"
  },
  {
    "text": "activity so we experienced an order of magnitude increase in the velocity of the requests that we're handling any",
    "start": "254109",
    "end": "260320"
  },
  {
    "text": "given moment which part of this system is going to be your bottleneck shout it out if you know the answer sequel server",
    "start": "260320",
    "end": "268030"
  },
  {
    "text": "all the arrows are pointing there so it's pretty obvious that's going to be where the problem is well",
    "start": "268030",
    "end": "275280"
  },
  {
    "text": "the obvious solution for scaling this problem is to do what throw more",
    "start": "275280",
    "end": "280830"
  },
  {
    "start": "280000",
    "end": "280000"
  },
  {
    "text": "hardware at the problem we're going to use sharding so the idea behind sharding",
    "start": "280830",
    "end": "286680"
  },
  {
    "text": "is we take the same master slave system that we had you're running one database",
    "start": "286680",
    "end": "292170"
  },
  {
    "text": "and one slave and we run multiple copies of it in parallel and then we have a",
    "start": "292170",
    "end": "297300"
  },
  {
    "text": "router or coordinator help us partition data equally amongst the different shards so if you're partitioning data",
    "start": "297300",
    "end": "304920"
  },
  {
    "text": "that belongs to your customers you might shard by the first letter of their last name so shard number one here",
    "start": "304920",
    "end": "311280"
  },
  {
    "text": "might have customers a through D this might be e through G etc and then we",
    "start": "311280",
    "end": "317040"
  },
  {
    "text": "have all of our actual clients in this case our web applications all connect to the coordinator so they can get their",
    "start": "317040",
    "end": "322080"
  },
  {
    "text": "requests routed to the right shard so this is the obvious way of trying to solve that bottleneck problem that we're",
    "start": "322080",
    "end": "327780"
  },
  {
    "text": "going to run into as our volume and velocity as our velocity increases well there's a couple of issues with this",
    "start": "327780",
    "end": "334500"
  },
  {
    "text": "design the first is that downtime is inherent in this model if a master goes",
    "start": "334500",
    "end": "340830"
  },
  {
    "text": "down one of the new slaves needs to be elected to become the new master what's",
    "start": "340830",
    "end": "346440"
  },
  {
    "text": "going to happen during the period in which there is no master for all those requests he guesses anarchy they're all",
    "start": "346440",
    "end": "354510"
  },
  {
    "text": "going to be failed so any requests that tempted to go through during that period of time to that shard will all be",
    "start": "354510",
    "end": "361080"
  },
  {
    "text": "unavailable but that's not the most insidious problem the real failure of",
    "start": "361080",
    "end": "366720"
  },
  {
    "start": "364000",
    "end": "364000"
  },
  {
    "text": "this design and this was state of the art like 2003-2004 is the fact that it's brittle who's familiar with the concept",
    "start": "366720",
    "end": "374190"
  },
  {
    "text": "of a network partition quick show of hands all right this is what a network partition looks like so imagine there's",
    "start": "374190",
    "end": "382140"
  },
  {
    "text": "a hardware switch in your on-premise data center that fails briefly you can might only need to be down for a handful",
    "start": "382140",
    "end": "388140"
  },
  {
    "text": "of seconds in order for this to happen these masters can't communicate with their slaves on the other side of the",
    "start": "388140",
    "end": "394050"
  },
  {
    "text": "partition anymore all the server's are still running so there's no machine that's down but they just can't contact",
    "start": "394050",
    "end": "399780"
  },
  {
    "text": "each other what do you think is gonna happen with these slaves can't see their master anymore we're going to end up",
    "start": "399780",
    "end": "407820"
  },
  {
    "text": "with two mad for one shard this is a specific type of network partition known as a split brain",
    "start": "407820",
    "end": "413850"
  },
  {
    "text": "is the name of this and it's the most dangerous type of partition because most of the time if you don't have good",
    "start": "413850",
    "end": "419580"
  },
  {
    "text": "monitoring tools you won't even know that it happened is it's a software error it's not a hardware error so what",
    "start": "419580",
    "end": "427020"
  },
  {
    "text": "can happen when you have a split brain is data corruption so imagine you're using like auto incrementing IDs and",
    "start": "427020",
    "end": "432630"
  },
  {
    "text": "sequel server well one record might go to one master and another record might go to the other",
    "start": "432630",
    "end": "437970"
  },
  {
    "text": "they both have the same ID but they're totally different pieces of data that's data corruption data loss is also",
    "start": "437970",
    "end": "445710"
  },
  {
    "text": "possible so this is a pretty dangerous design but this was the obvious way to try to scale that system we had before",
    "start": "445710",
    "end": "452630"
  },
  {
    "text": "but its weakness is that it can't detect and handle partitions very well now",
    "start": "452630",
    "end": "459090"
  },
  {
    "start": "459000",
    "end": "459000"
  },
  {
    "text": "another scenario we're going to look at the variety aspect here let's say you get asked to take your existing",
    "start": "459090",
    "end": "465270"
  },
  {
    "text": "application and add a component of real-time user interactivity to it so here's the little data flow for what",
    "start": "465270",
    "end": "471300"
  },
  {
    "text": "that might look like user generates an event let's say it's a click stream on your website so someone's clicking",
    "start": "471300",
    "end": "477390"
  },
  {
    "text": "through buttons and links and you go ahead and record an event for each one of those if the user produces four",
    "start": "477390",
    "end": "483870"
  },
  {
    "text": "events four particular events out of a possible set of hundreds of thousands you want to send that user a specific",
    "start": "483870",
    "end": "490650"
  },
  {
    "text": "message maybe if you're running an e-commerce site you check to see if the user is clicked on these four products",
    "start": "490650",
    "end": "496170"
  },
  {
    "text": "and if they have you offer them a fifth one that might be related to them that's one example of how this might look if",
    "start": "496170",
    "end": "502680"
  },
  {
    "text": "the user hasn't produced those four events you just want to keep waiting and try to observe in real time are they",
    "start": "502680",
    "end": "508740"
  },
  {
    "text": "gonna do it or not and I had to actually build this system in production to handle hundreds of thousands of users",
    "start": "508740",
    "end": "514620"
  },
  {
    "text": "simultaneously and this is part of the origins story of akkad on net two so the",
    "start": "514620",
    "end": "521070"
  },
  {
    "start": "520000",
    "end": "520000"
  },
  {
    "text": "obvious solution of this problem is to keep using our database that we had before and use a strategy called read",
    "start": "521070",
    "end": "526860"
  },
  {
    "text": "after write so we have our same little hardware setup and here's what we're",
    "start": "526860",
    "end": "532950"
  },
  {
    "text": "going to do a users going to produce the four events are looking for so we go",
    "start": "532950",
    "end": "538590"
  },
  {
    "text": "ahead and write the first event to our sequel database and then we what are the range of events that have",
    "start": "538590",
    "end": "543839"
  },
  {
    "text": "been written back out so we write zero we read zero back we write one on the",
    "start": "543839",
    "end": "549300"
  },
  {
    "text": "next server we read zero one one back and so forth until eventually when the",
    "start": "549300",
    "end": "555000"
  },
  {
    "text": "fourth and final event is written we read back the full set of events we are expecting and fire off our notification",
    "start": "555000",
    "end": "562199"
  },
  {
    "text": "now the way this actually works in the real world if you try this design which",
    "start": "562199",
    "end": "567720"
  },
  {
    "text": "I did is you can actually predict the order in which anything on the network will happen even under ideal",
    "start": "567720",
    "end": "574529"
  },
  {
    "text": "circumstances your database can't be responsible for the level of concurrency",
    "start": "574529",
    "end": "579660"
  },
  {
    "text": "that's happening above it in the application layer so the truth of the matter was eat them with very high",
    "start": "579660",
    "end": "586290"
  },
  {
    "text": "consistency settings if I went and started writing events and reading them back out I'd get totally different",
    "start": "586290",
    "end": "591990"
  },
  {
    "text": "results back than what I expected and so the truth was was just frustration was all that I got for my as",
    "start": "591990",
    "end": "597899"
  },
  {
    "text": "the fruit of my efforts here so read after write is not a practical solution",
    "start": "597899",
    "end": "603540"
  },
  {
    "text": "for doing for doing real time user and activity and the other reason why doesn't work very well is because it's",
    "start": "603540",
    "end": "609899"
  },
  {
    "text": "slow round tripping to a database incurs network i/o overhead disk i/o overhead",
    "start": "609899",
    "end": "616649"
  },
  {
    "text": "of the database layer serialization overhead in both directions and on top of that you usually have some IO",
    "start": "616649",
    "end": "622110"
  },
  {
    "text": "completion port overhead - and all that adds up to be something that may not necessarily work very well quickly at",
    "start": "622110",
    "end": "628800"
  },
  {
    "text": "scale so these are the sorts of problems that we're being asked to deal with and the obvious ways of solving them don't",
    "start": "628800",
    "end": "635370"
  },
  {
    "text": "work so distributed programming is hard for the following reasons the first is",
    "start": "635370",
    "end": "642149"
  },
  {
    "start": "637000",
    "end": "637000"
  },
  {
    "text": "dealing with state that was fundamentally what we were trying to do in the last diagram was we were trying",
    "start": "642149",
    "end": "647250"
  },
  {
    "text": "to build a stateful application that could observe a stream of events and react appropriately dealing with state",
    "start": "647250",
    "end": "654389"
  },
  {
    "text": "in a web application is hard because why who can guess HTTP is a stateless",
    "start": "654389",
    "end": "661529"
  },
  {
    "text": "protocol makes it very difficult to guarantee your state ends up in the right place in the network so that's one",
    "start": "661529",
    "end": "668670"
  },
  {
    "text": "reason and we'll explore a couple of others who makes this concurrency raise",
    "start": "668670",
    "end": "673920"
  },
  {
    "text": "your hand if you think shared state currency with locks semaphores critical regions is easy good that's the correct",
    "start": "673920",
    "end": "681420"
  },
  {
    "text": "answer no one concurrency sucks it provides tremendous benefits but doing it right",
    "start": "681420",
    "end": "687780"
  },
  {
    "text": "is hard at least it used to be next is topology and discovery both of",
    "start": "687780",
    "end": "694170"
  },
  {
    "text": "those architecture diagrams I showed you earlier followed what's called a tree architecture where you sort of have your load balancer at the very top of the",
    "start": "694170",
    "end": "700950"
  },
  {
    "text": "tree then one layer leaf nodes your web server and then you have your database server underneath that none of your web",
    "start": "700950",
    "end": "707190"
  },
  {
    "text": "servers know about each other under the load balancer as far as they know they exist in isolation from everything else",
    "start": "707190",
    "end": "712980"
  },
  {
    "text": "that lack of topology awareness makes it very difficult to deal with state",
    "start": "712980",
    "end": "718800"
  },
  {
    "text": "appropriately in a distributed system that's one problem in and of itself the",
    "start": "718800",
    "end": "723900"
  },
  {
    "text": "other is discovering who's available to do work in your network it's not only knowing like which addresses should",
    "start": "723900",
    "end": "730710"
  },
  {
    "text": "servers be at but who is still there who's died in the past few minutes who's",
    "start": "730710",
    "end": "736860"
  },
  {
    "text": "come alive again that sort of thing we have a module and akkad on net called akka dot cluster that deals with this",
    "start": "736860",
    "end": "743580"
  },
  {
    "text": "problem very specifically next is recovering from failures so one of you",
    "start": "743580",
    "end": "750000"
  },
  {
    "text": "probably attended some may be a micro service talk before and they talked about this notion of fault isolation",
    "start": "750000",
    "end": "755450"
  },
  {
    "text": "that's one category of problems you have to deal with on the network which is what happens if a one service crashes",
    "start": "755450",
    "end": "763290"
  },
  {
    "text": "you want to have some sort of partial failure mode so the rest of your application can continue what about more",
    "start": "763290",
    "end": "768930"
  },
  {
    "text": "insidious types of problems like that network partition what happens if those services aren't completely unavailable",
    "start": "768930",
    "end": "775140"
  },
  {
    "text": "they're just not reachable right now how do you deal with that appropriately how",
    "start": "775140",
    "end": "780600"
  },
  {
    "text": "do you deal with more localized failures like what happens if one particular stateful entity in your system suddenly",
    "start": "780600",
    "end": "786960"
  },
  {
    "text": "crashes as a result of a software failure how do you heal from that and recover well the actor model has an",
    "start": "786960",
    "end": "794490"
  },
  {
    "text": "answer to that next is bottlenecks so people like these sort of master oriented systems like",
    "start": "794490",
    "end": "801360"
  },
  {
    "text": "sequel server because conceptually they're easy to understand there's one node who dictates what the right answer",
    "start": "801360",
    "end": "807690"
  },
  {
    "text": "is for each transaction it's pretty easy to follow but what you give up in order to do that",
    "start": "807690",
    "end": "813300"
  },
  {
    "text": "is you give up the ability to scale linearly you're stuck with this one sort of bottleneck node that has to be there",
    "start": "813300",
    "end": "819660"
  },
  {
    "text": "at all times in order for you to be available and as soon as the capacitor load on your system exceeds that nodes",
    "start": "819660",
    "end": "825900"
  },
  {
    "text": "capacity to stay up you have a problem then on top of that there's the matter",
    "start": "825900",
    "end": "831990"
  },
  {
    "text": "of consistency this means all nodes seeing the same data at the same time now the truth of",
    "start": "831990",
    "end": "838290"
  },
  {
    "text": "the matter is once you have more than two computers in a network its varied it's not possible to have perfect",
    "start": "838290",
    "end": "844140"
  },
  {
    "text": "consistency the speed of light is your minimum bound there but you do have to",
    "start": "844140",
    "end": "849780"
  },
  {
    "text": "keep in mind sort of what levels of inconsistency can you tolerate temporarily from nodes this is the",
    "start": "849780",
    "end": "855630"
  },
  {
    "text": "concept of eventual consistency that's another issue that we have to deal with and lastly there's availability this",
    "start": "855630",
    "end": "862590"
  },
  {
    "text": "means the ability to stay up and be able to successfully respond to requests so",
    "start": "862590",
    "end": "868680"
  },
  {
    "text": "you have a service to be available it has to be able to go ahead and return the equivalent of like HTTP 200",
    "start": "868680",
    "end": "874710"
  },
  {
    "text": "something like that these are all hard problems in and of themselves one gonna tell you today is that they're hard with",
    "start": "874710",
    "end": "882780"
  },
  {
    "text": "the tools and what we've used been used to using as web developers primarily we have to look at these problems from a",
    "start": "882780",
    "end": "889710"
  },
  {
    "text": "different perspective and they become a little bit easier to manage so what",
    "start": "889710",
    "end": "895140"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "we're going to use to sort of solve some of these problems today first is we're gonna embrace state state is no longer a",
    "start": "895140",
    "end": "901110"
  },
  {
    "text": "bad thing and it's not going to live in our database anymore it's going to become part of our application next is",
    "start": "901110",
    "end": "907800"
  },
  {
    "text": "we're gonna embrace a concept known as protocol driven design these are ways of building distributed systems that plan",
    "start": "907800",
    "end": "914640"
  },
  {
    "text": "for a failure as an eventualities not something we sort of you know stick our heads in the sand and hope to avoid we",
    "start": "914640",
    "end": "921690"
  },
  {
    "text": "go ahead and base they anticipate the failure of the network is something that is inevitable and we factor that into",
    "start": "921690",
    "end": "927030"
  },
  {
    "text": "the design of our protocols fault and resource isolation is another thing",
    "start": "927030",
    "end": "932070"
  },
  {
    "text": "we're going to use we're gonna come up with a strategy for dealing with failures locally so they don't become some problem that a central coordinator",
    "start": "932070",
    "end": "939150"
  },
  {
    "text": "node has to handle decentralized architectures are another thing we're going to this means no more masters actually the",
    "start": "939150",
    "end": "946230"
  },
  {
    "text": "right way to really phrase what a decentralized architecture is is it's a peer-to-peer network but on the server side that's what that is and then the",
    "start": "946230",
    "end": "954240"
  },
  {
    "text": "cap theorem this is our decision-making framework we're going to use for deciding what sort of compromises need",
    "start": "954240",
    "end": "960899"
  },
  {
    "text": "to be in our distributed system in order to fulfill our business requirements so these are the you know consistency",
    "start": "960899",
    "end": "966749"
  },
  {
    "text": "availability and partition tolerance now one thing I'm gonna state before we dive into the gist of what the actor model is",
    "start": "966749",
    "end": "973230"
  },
  {
    "text": "and how it helps with these issues is that don't assign any moral weights to any of the cap categories I meet a lot",
    "start": "973230",
    "end": "980160"
  },
  {
    "text": "of DBA s or turn programmers now who think consistency belongs like an altar above the other two it's not true",
    "start": "980160",
    "end": "987269"
  },
  {
    "text": "they're just different currencies you have to balance and then design your system according to what your business",
    "start": "987269",
    "end": "992490"
  },
  {
    "text": "requirements are so enter the actor model this is gonna be the tool that",
    "start": "992490",
    "end": "998519"
  },
  {
    "start": "995000",
    "end": "995000"
  },
  {
    "text": "we're going to use to try to address some of these problems the actor model dates back to the early 70s the original",
    "start": "998519",
    "end": "1005449"
  },
  {
    "text": "actor model white paper by Crowell Hewitt is only a couple of years younger than the original relational database",
    "start": "1005449",
    "end": "1011360"
  },
  {
    "text": "white paper 1973 was when the virginal actor model white paper was written so",
    "start": "1011360",
    "end": "1017059"
  },
  {
    "text": "it's a fairly old concept and where the actor model originally came from was this vision in the 1970s of how big",
    "start": "1017059",
    "end": "1023929"
  },
  {
    "text": "servers are going to be designed it was gonna be a single machine that had thousands of very small CPUs built into",
    "start": "1023929",
    "end": "1030860"
  },
  {
    "text": "it so lots of 486 processors and that sort of thing and that's not how reality",
    "start": "1030860",
    "end": "1036350"
  },
  {
    "text": "turned out for how computers are going to be designed Moore's law saw to that instead we have servers that have a",
    "start": "1036350",
    "end": "1041990"
  },
  {
    "text": "relatively small number of course maybe as many as 64 rather than the thousands that crawl Hewitt and his team were",
    "start": "1041990",
    "end": "1048438"
  },
  {
    "text": "imagining and they can are much more powerful than anything that was imagined back then but the actor model sort of",
    "start": "1048439",
    "end": "1055669"
  },
  {
    "text": "found its place in the late 80s and early 90s when we needed to develop some",
    "start": "1055669",
    "end": "1061340"
  },
  {
    "start": "1056000",
    "end": "1056000"
  },
  {
    "text": "modern telephony software for the first digital networks so Ericsson had an",
    "start": "1061340",
    "end": "1066770"
  },
  {
    "text": "engineer named Joe Armstrong who was tasked with developing some software to handle these sort of modern data",
    "start": "1066770",
    "end": "1072289"
  },
  {
    "text": "networks think of it as like a big backplane for handling all the phone calls will not text messages but other types",
    "start": "1072289",
    "end": "1079220"
  },
  {
    "text": "of data packets that be going through the network they had to come up with a system for routing all this this is the",
    "start": "1079220",
    "end": "1084350"
  },
  {
    "text": "original web-scale sort of problem back in the day so Joe invented a commercial",
    "start": "1084350",
    "end": "1091400"
  },
  {
    "text": "implementation of the active model known as Ericsson language later renamed to Erlang so this is the real first",
    "start": "1091400",
    "end": "1098450"
  },
  {
    "text": "implementation of the actor model that was really accessible by developers and it allowed them to build telephony",
    "start": "1098450",
    "end": "1104480"
  },
  {
    "text": "networks but a little bit later let's say we jumped forward 10 years - the first dot-com boom where Erlang and the",
    "start": "1104480",
    "end": "1111860"
  },
  {
    "text": "actor model saw some action again where some of the first really big publicly traded online companies doing things",
    "start": "1111860",
    "end": "1117890"
  },
  {
    "text": "like real-time advertising networks or doing multiplayer games that sort of thing those models were all pretty",
    "start": "1117890",
    "end": "1125030"
  },
  {
    "text": "naturally suited to the same sort of design concerns that Erlang had namely",
    "start": "1125030",
    "end": "1130130"
  },
  {
    "text": "you have massive concurrency so millions of operations happening in parallel cross the network at once but you also",
    "start": "1130130",
    "end": "1137330"
  },
  {
    "text": "have this sort of real-time component to it how useful would a telephony system be if it delivered all of your of voice",
    "start": "1137330",
    "end": "1143960"
  },
  {
    "text": "packets in batch 30 minutes later it'd be utterly useless right it'd be like",
    "start": "1143960",
    "end": "1149060"
  },
  {
    "text": "AT&T the United States sorry there I always make fun of them they didn't",
    "start": "1149060",
    "end": "1155030"
  },
  {
    "text": "deserve that but the gist of it is all these systems have these sort of real-time concurrent scaling issues that",
    "start": "1155030",
    "end": "1162830"
  },
  {
    "text": "they had to solve well jump forward another 10 years to the advent of cloud computing a lot of the applications you",
    "start": "1162830",
    "end": "1169430"
  },
  {
    "text": "work on whether you're in insurance or e-commerce or healthcare or doing Internet of Things which is a category",
    "start": "1169430",
    "end": "1175910"
  },
  {
    "text": "that didn't even exist all that long ago you're all subject to a lot of the same sort of forces that",
    "start": "1175910",
    "end": "1183140"
  },
  {
    "text": "these other older applications like the telephony networks and advertising systems all had to deal with 10 20 years",
    "start": "1183140",
    "end": "1189440"
  },
  {
    "text": "ago the difference is today that the actor model is now available on more runtimes there's akka on the JVM akkad",
    "start": "1189440",
    "end": "1197840"
  },
  {
    "text": "net and the CLR and if you attended the Orleans talk earlier today that's another implementation of the actor",
    "start": "1197840",
    "end": "1203180"
  },
  {
    "text": "model so here's the core concepts that make the actor model simplify a lot of",
    "start": "1203180",
    "end": "1210050"
  },
  {
    "start": "1205000",
    "end": "1205000"
  },
  {
    "text": "these distributed Gaming problems I spelled out earlier the first is that actors are a",
    "start": "1210050",
    "end": "1216110"
  },
  {
    "text": "fundamental unit of work and concurrency you could think of them as sort of a self-contained little micro process all",
    "start": "1216110",
    "end": "1225760"
  },
  {
    "text": "communication between micro processes is done via message passing kind of like how IPC would work with a normal full",
    "start": "1225760",
    "end": "1232730"
  },
  {
    "text": "blown Windows process so these are how actors communicate all messages the",
    "start": "1232730",
    "end": "1238700"
  },
  {
    "text": "actors share are immutable and there's a very important reason for that that will touch on a next sender and receiver are",
    "start": "1238700",
    "end": "1246800"
  },
  {
    "text": "always decoupled from each other and are fully asynchronous so when you tell an actor a message you don't get a task",
    "start": "1246800",
    "end": "1254330"
  },
  {
    "text": "back in alkanet that doesn't mean it's not asynchronous just that we typically",
    "start": "1254330",
    "end": "1260090"
  },
  {
    "text": "don't give you a handle back for waiting on what a message was received there's a lot of what Erlang and the sort of",
    "start": "1260090",
    "end": "1265820"
  },
  {
    "text": "original active model implementations try to encourage our things like one-way messaging because they're fast and",
    "start": "1265820",
    "end": "1271790"
  },
  {
    "text": "they're cheap next in terms of what actors can do they can process messages",
    "start": "1271790",
    "end": "1278080"
  },
  {
    "text": "actors do work by chewing through the contents of their mailbox so these are all the messages that have been sent to",
    "start": "1278080",
    "end": "1284210"
  },
  {
    "text": "them sit and a little cue that the actor processes actors can also spawn other",
    "start": "1284210",
    "end": "1290150"
  },
  {
    "text": "actors and and acha this concept is known as sort of like a family tree when I create an actor I'm",
    "start": "1290150",
    "end": "1297020"
  },
  {
    "text": "creating a child of myself that actor can go on to create its own children and so forth you can have these sort of",
    "start": "1297020",
    "end": "1303560"
  },
  {
    "text": "hierarchies that go several layers deep actors also have the ability to change",
    "start": "1303560",
    "end": "1308600"
  },
  {
    "text": "their behavior between messages so imagine you have a bunch of what are called receivers little statements you",
    "start": "1308600",
    "end": "1314660"
  },
  {
    "text": "declare specifying how to handle certain types of messages you could switch those depending on the state of your actor so",
    "start": "1314660",
    "end": "1322400"
  },
  {
    "text": "this is where the concept of a finite state machine comes into play so here's a good example of a finite state machine",
    "start": "1322400",
    "end": "1328130"
  },
  {
    "text": "with as far as actors are concerned let's say you're building a chat system and you had an actor represent every",
    "start": "1328130",
    "end": "1334490"
  },
  {
    "text": "user who is trying to connect your chat server that user could be in one of three possible states at any given time",
    "start": "1334490",
    "end": "1341110"
  },
  {
    "text": "unauthenticated authenticating or fully authenticated and the unauthenticated state do we want",
    "start": "1341110",
    "end": "1348710"
  },
  {
    "text": "to allow that user to send messages to the chatroom no we want to discard them",
    "start": "1348710",
    "end": "1353840"
  },
  {
    "text": "if a user starts to authenticate we transition to an authenticating state",
    "start": "1353840",
    "end": "1359419"
  },
  {
    "text": "and now let's say a user tries to send some messages of the chatroom then what do we want to do with those maybe we",
    "start": "1359419",
    "end": "1365629"
  },
  {
    "text": "want to buffer them and hang on to them in case the user successfully authenticates then we can deliver them",
    "start": "1365629",
    "end": "1370789"
  },
  {
    "text": "and if the users fully authenticated we just want to deliver the message at that point that's an example of behavior",
    "start": "1370789",
    "end": "1376909"
  },
  {
    "text": "switching in action the last thing actors can do and this is key is they",
    "start": "1376909",
    "end": "1382370"
  },
  {
    "text": "can contain private state actors can have their own internal members and data structures that they use and you can use",
    "start": "1382370",
    "end": "1389210"
  },
  {
    "text": "those to accumulate state inside an actor over time this is what makes actors effective for building these sort",
    "start": "1389210",
    "end": "1396080"
  },
  {
    "text": "of stateful systems now actors also make some promises - the first promise and",
    "start": "1396080",
    "end": "1403580"
  },
  {
    "text": "the most important is that actors only process one message at a time so if they have a queue of messages in their",
    "start": "1403580",
    "end": "1409490"
  },
  {
    "text": "mailbox they're only ever handling one of them at any given time next those",
    "start": "1409490",
    "end": "1415159"
  },
  {
    "text": "messages are always processed in first-in first-out order otherwise known and the order in which they're received",
    "start": "1415159",
    "end": "1421330"
  },
  {
    "text": "so actors make a guarantee that's how they'll process their messages now you as the developer using akka Dannette can",
    "start": "1421330",
    "end": "1428480"
  },
  {
    "text": "modify that for instance we have this concept known as the mailbox this is where actors cue their messages that can",
    "start": "1428480",
    "end": "1434960"
  },
  {
    "text": "be overridden by you as the developer to use a priority queue if you want so you can prioritize certain messages ahead of",
    "start": "1434960",
    "end": "1441080"
  },
  {
    "text": "others the last guarantee the actors make is at most once message delivery so",
    "start": "1441080",
    "end": "1448370"
  },
  {
    "text": "when we send have an actor send a message to another that's it by default",
    "start": "1448370",
    "end": "1453379"
  },
  {
    "text": "we don't go and check to see if that message got delivered the reason why that is is because the core akka",
    "start": "1453379",
    "end": "1459799"
  },
  {
    "text": "philosophy is to be extremely dumb and fast so the reason why we do that is",
    "start": "1459799",
    "end": "1466940"
  },
  {
    "text": "because we view akka as infrastructure we don't try to guess what you want to",
    "start": "1466940",
    "end": "1472370"
  },
  {
    "text": "do is the end user you explicitly tell akka what you want our philosophy is that it's a lot easier to add and",
    "start": "1472370",
    "end": "1478970"
  },
  {
    "text": "elegance where you need it than to go through and turn it off where you don't that's the reason for that philosophy",
    "start": "1478970",
    "end": "1485140"
  },
  {
    "text": "the last thing is that every actor even in a big Network where you might have millions of actors and thousands of",
    "start": "1485140",
    "end": "1491480"
  },
  {
    "text": "servers every actor has a global unique address their own unique URI you could use to send them a message but typically",
    "start": "1491480",
    "end": "1498919"
  },
  {
    "text": "you don't need to know that you or I is the way you communicate with actors is through a construct known as an actor",
    "start": "1498919",
    "end": "1505130"
  },
  {
    "text": "reference it's a handle to an actor now I'm sort of spelling all this out now before I go into detail in each subject",
    "start": "1505130",
    "end": "1511070"
  },
  {
    "text": "so if you're worried about all the information don't worry about it we're gonna cover it a little bit more",
    "start": "1511070",
    "end": "1516380"
  },
  {
    "text": "extensively as we move on so these are all the core concepts at work here and",
    "start": "1516380",
    "end": "1521480"
  },
  {
    "text": "I'm going to spell out for you sort of how these give you some benefits for being able to build these distributed systems so algodón that gives you all",
    "start": "1521480",
    "end": "1529070"
  },
  {
    "text": "this for.net and akka dinette consists of a handful of modules we're gonna be",
    "start": "1529070",
    "end": "1535730"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "spending most of our time talking about the core actor library which is akka this gives you all the core actor",
    "start": "1535730",
    "end": "1541370"
  },
  {
    "text": "functionality all the ability to send messages the ability to go ahead and have actors that are stateful actors",
    "start": "1541370",
    "end": "1547370"
  },
  {
    "text": "that can run on the UI thread of a windows forms application that sort of thing so that's what the core akka",
    "start": "1547370",
    "end": "1552919"
  },
  {
    "text": "library gives you Alka dub remote gives actors the ability to communicate with each other across different windows",
    "start": "1552919",
    "end": "1559309"
  },
  {
    "text": "processes on the network so that's sort of the next layer up when you want to start doing some networked work with",
    "start": "1559309",
    "end": "1564830"
  },
  {
    "text": "actors then we have aqua dot cluster which is a module that gives multiple akka dot remote nodes the ability to",
    "start": "1564830",
    "end": "1570770"
  },
  {
    "text": "form a decentralized network with each other then we have a cadet persistence which is a library that allows actors to",
    "start": "1570770",
    "end": "1577730"
  },
  {
    "text": "use events sourcing to record their state to some durable store and we support like 12 different databases",
    "start": "1577730",
    "end": "1583340"
  },
  {
    "text": "right now everything from sequel server to Cassandra to events store to raven DB",
    "start": "1583340",
    "end": "1589580"
  },
  {
    "text": "have even seen out in the wild so there's a lot of different targets we support for that if you have questions",
    "start": "1589580",
    "end": "1594710"
  },
  {
    "text": "about some of the other modules on here I'll take those at the end now what's an",
    "start": "1594710",
    "end": "1599750"
  },
  {
    "start": "1599000",
    "end": "1599000"
  },
  {
    "text": "actor actually look like this is an example of what's called an untyped actor it's just a class that haratz than",
    "start": "1599750",
    "end": "1605990"
  },
  {
    "text": "this untyped actor base class so there's multiple different base classes that",
    "start": "1605990",
    "end": "1611270"
  },
  {
    "text": "akka Dianetics poses untyped actor is the dumbest does the least amount of work for you typically in production I use an actor",
    "start": "1611270",
    "end": "1618910"
  },
  {
    "text": "that's known as a receive actor this gives me these sort of typed predicate functions I can use for matching messages in c-sharp 7 when we get",
    "start": "1618910",
    "end": "1626590"
  },
  {
    "text": "pattern matching a first sort of first class language constructs you'll probably see the untyped actor get used",
    "start": "1626590",
    "end": "1633040"
  },
  {
    "text": "more commonly again now the most important method on this class is this one on receive every time an actor",
    "start": "1633040",
    "end": "1642160"
  },
  {
    "text": "receives a message when the actor is ready to process that message it'll be handled inside that method lets him to",
    "start": "1642160",
    "end": "1649540"
  },
  {
    "text": "keep eclis what you do when you receive a message is you do some work so that might be maybe making a web service call",
    "start": "1649540",
    "end": "1657640"
  },
  {
    "text": "over the network maybe it's doing some sort of validation maybe it's just transforming the message into some new",
    "start": "1657640",
    "end": "1663670"
  },
  {
    "text": "type of object and sending a reply back to the original actor you could do any number of things that's the most",
    "start": "1663670",
    "end": "1670030"
  },
  {
    "text": "important method the other ones up here pre-start pre restart post stop and post",
    "start": "1670030",
    "end": "1675370"
  },
  {
    "text": "restart these are what are called life cycle methods these are built for having",
    "start": "1675370",
    "end": "1681130"
  },
  {
    "text": "an actor initialize certain resources it might need when it first starts so you might put that in your pre start method",
    "start": "1681130",
    "end": "1686920"
  },
  {
    "text": "or imagine what would happen if an actor through an unhandled exception if you",
    "start": "1686920",
    "end": "1693580"
  },
  {
    "text": "had a process crash on your Windows PC what would you do with it what would you",
    "start": "1693580",
    "end": "1699010"
  },
  {
    "text": "hope the process would do if it was critically important restart it right",
    "start": "1699010",
    "end": "1704280"
  },
  {
    "text": "one of the things that actors do is they have this philosophy of when you run",
    "start": "1704280",
    "end": "1709330"
  },
  {
    "text": "into an unhandled exception or some type of failure you're much better off just",
    "start": "1709330",
    "end": "1714550"
  },
  {
    "text": "letting the actor crash and restart back into its initial original state and the",
    "start": "1714550",
    "end": "1719770"
  },
  {
    "text": "reason for that sort of philosophy is this idea of all the error handling code you typically have in your application",
    "start": "1719770",
    "end": "1725680"
  },
  {
    "text": "how well tested you think that is it's simply in that area where if you're",
    "start": "1725680",
    "end": "1731140"
  },
  {
    "text": "using dot cover it's typically in the area with all the red highlighting that error modes and fault paths typically",
    "start": "1731140",
    "end": "1737440"
  },
  {
    "text": "aren't covered very well so lot of them try to go and come up with these intricate and typically brittle error",
    "start": "1737440",
    "end": "1743380"
  },
  {
    "text": "recovery systems why don't we just go and reboot the components of our application that faulted back into the",
    "start": "1743380",
    "end": "1749889"
  },
  {
    "text": "original safe state in the state they were when they failed and that's the akka philosophy buying how we typically",
    "start": "1749889",
    "end": "1756399"
  },
  {
    "text": "handle failures you just let it crash let it restart and so with actors that",
    "start": "1756399",
    "end": "1761529"
  },
  {
    "text": "are using things like akkad uh persistence the original state of that actor will include whatever its last",
    "start": "1761529",
    "end": "1766720"
  },
  {
    "text": "recorded the state to the database was of the time it crashed and actors don't lose their messages when they crash",
    "start": "1766720",
    "end": "1772179"
  },
  {
    "text": "either the as you'll see in a moment the mailbox which is the sort of cue that holds the actors messages is separate",
    "start": "1772179",
    "end": "1778509"
  },
  {
    "text": "from the actors state itself so we'll go ahead and destroy this simple actor",
    "start": "1778509",
    "end": "1783730"
  },
  {
    "text": "instance and replace it with a brand new copy of it when we restart so that's sort of how the actor lifecycle works in",
    "start": "1783730",
    "end": "1790480"
  },
  {
    "text": "those sort of failure states now when it comes to actually doing with state and",
    "start": "1790480",
    "end": "1795610"
  },
  {
    "text": "being able to manipulate it sort of concurrently in a distributed system actors really simplify that problem",
    "start": "1795610",
    "end": "1801519"
  },
  {
    "text": "pretty dramatically so internal state of an actor looks just like any other",
    "start": "1801519",
    "end": "1806740"
  },
  {
    "text": "normal net object it's just some field or a property that you set inside an",
    "start": "1806740",
    "end": "1811990"
  },
  {
    "text": "actor no more complicated than that now what's interesting about this state is",
    "start": "1811990",
    "end": "1817950"
  },
  {
    "text": "that it's always designed to be private actors don't expose their state as a property that anything can go and access",
    "start": "1817950",
    "end": "1824980"
  },
  {
    "text": "anywhere else moreover that simple actor instance we saw earlier when you start",
    "start": "1824980",
    "end": "1831220"
  },
  {
    "text": "that actor you can't get a reference to that object anymore it's hidden inside this sleeve known as the actor self this",
    "start": "1831220",
    "end": "1838990"
  },
  {
    "text": "gives us the layer of isolation from other processes in our system in order to make sure that actors can experience",
    "start": "1838990",
    "end": "1845169"
  },
  {
    "text": "what's known as a side effect who's heard of that before that term side effects Kolb's about third of the room",
    "start": "1845169",
    "end": "1851110"
  },
  {
    "text": "the side effect is what happens in a concurrent system where one process modifies another state of a something",
    "start": "1851110",
    "end": "1858999"
  },
  {
    "text": "else that process B is depending on we try to avoid side effects that's how you end up with unpredictable havior in a",
    "start": "1858999",
    "end": "1865149"
  },
  {
    "text": "concurrent system so actor state is private and it's only ever shared or",
    "start": "1865149",
    "end": "1870369"
  },
  {
    "text": "modified by sending messages or or receiving them so actors when they go",
    "start": "1870369",
    "end": "1877659"
  },
  {
    "start": "1875000",
    "end": "1875000"
  },
  {
    "text": "ahead and build like sort of flush themselves live in this family tree structure you have a rude actor in this case this is a",
    "start": "1877659",
    "end": "1884059"
  },
  {
    "text": "built-in system actor called user this will create some top-level actors then",
    "start": "1884059",
    "end": "1890240"
  },
  {
    "text": "we have some children underneath them so this is sort of what an actor construct",
    "start": "1890240",
    "end": "1896030"
  },
  {
    "text": "looks like in production and here's what's kind of interesting about this is that every single actors address its",
    "start": "1896030",
    "end": "1903530"
  },
  {
    "text": "unique your rhyme is a composition of who is above it in the family tree so",
    "start": "1903530",
    "end": "1908720"
  },
  {
    "text": "this grandchild has the name of its parent baked into its address and so the",
    "start": "1908720",
    "end": "1913940"
  },
  {
    "text": "way akka tends to work itself is there's no central registry or coordinator no that keeps track of where all the actors",
    "start": "1913940",
    "end": "1920090"
  },
  {
    "text": "are all that information is decentralized into very small bits eat only this actor knows who all of its",
    "start": "1920090",
    "end": "1926870"
  },
  {
    "text": "children are and so whenever we want to try to deliver a message to an actor via its address we sort of recursively",
    "start": "1926870",
    "end": "1933290"
  },
  {
    "text": "iterate down the tree until we find the correct actor this is designed to help allow al Qaeda yet to be very lean and",
    "start": "1933290",
    "end": "1939740"
  },
  {
    "text": "memory efficient that's why we do that now giving back to this idea of processing messages I mentioned that",
    "start": "1939740",
    "end": "1947059"
  },
  {
    "start": "1944000",
    "end": "1944000"
  },
  {
    "text": "actors have internal state and they're considered to be a fundamental unit of concurrency the big goal of the actors",
    "start": "1947059",
    "end": "1954410"
  },
  {
    "text": "system from the point of view of disk concurrency in your application is to allow you to have state inside your app",
    "start": "1954410",
    "end": "1960200"
  },
  {
    "text": "with no locks no critical regions and no synchronization mechanisms and no",
    "start": "1960200",
    "end": "1965270"
  },
  {
    "text": "contention and the way we achieve that is through our one message at a time processing guarantee so imagine this",
    "start": "1965270",
    "end": "1972590"
  },
  {
    "text": "sort of initial state of the system we have a mailbox with three messages in it and an actor and then this sort of",
    "start": "1972590",
    "end": "1979490"
  },
  {
    "text": "sleeve right here represents the actor cell the actor will begin processing",
    "start": "1979490",
    "end": "1985400"
  },
  {
    "text": "message zero at that point in time maybe another message message three gets queued into the back of the mailbox",
    "start": "1985400",
    "end": "1991960"
  },
  {
    "text": "message one does not get processed until this actors on receive method exits once",
    "start": "1991960",
    "end": "1999470"
  },
  {
    "text": "it does that the next message will begin getting processed so quick question for",
    "start": "1999470",
    "end": "2005440"
  },
  {
    "text": "someone in the room to answer if an actor can only process one message at a",
    "start": "2005440",
    "end": "2010630"
  },
  {
    "text": "time that's guaranteed by the system if we modify the state of our actors and we're processing messages what can never",
    "start": "2010630",
    "end": "2017880"
  },
  {
    "text": "happen if we're only processing one message at a time the state can never be",
    "start": "2017880",
    "end": "2024179"
  },
  {
    "text": "modified concurrently it's safe all actors state is inherently thread-safe",
    "start": "2024179",
    "end": "2029570"
  },
  {
    "text": "this is what allows us to build distributed systems that can be stateful and can avoid all the classic pitfalls",
    "start": "2029570",
    "end": "2036270"
  },
  {
    "text": "of shared state synchronization what you do is you divide your state across a",
    "start": "2036270",
    "end": "2042539"
  },
  {
    "text": "large number of actors each one holding on to only a tiny fraction of it well",
    "start": "2042539",
    "end": "2048480"
  },
  {
    "text": "people tend to do if we go back to the previous diagram what people typically tend to do when they're modeling an",
    "start": "2048480",
    "end": "2053849"
  },
  {
    "text": "actor system is let's say you're building an e-commerce application you",
    "start": "2053849",
    "end": "2059128"
  },
  {
    "text": "might go ahead and model a sort of actor hierarchy like this well let's say this part of the hierarchy represented all",
    "start": "2059129",
    "end": "2065099"
  },
  {
    "text": "the products in your catalog and you want to have one actor represent each in vain' pH piece of inventory you're",
    "start": "2065099",
    "end": "2071790"
  },
  {
    "text": "carrying so this actor might represent all the total inventory for one product",
    "start": "2071790",
    "end": "2077070"
  },
  {
    "text": "then it might have another sibling named after another product and another like that and you tend to sort of flesh out",
    "start": "2077070",
    "end": "2083730"
  },
  {
    "text": "your state across a small number of actors they'll all have the exact same code but they represent different",
    "start": "2083730",
    "end": "2089010"
  },
  {
    "text": "entities this allows you to write code that is very simple and easy to follow but also work scales beautifully in",
    "start": "2089010",
    "end": "2095790"
  },
  {
    "text": "production now the next thing",
    "start": "2095790",
    "end": "2101849"
  },
  {
    "start": "2101000",
    "end": "2101000"
  },
  {
    "text": "unfortunately actors are not magic they do run on threads so the way actors tend",
    "start": "2101849",
    "end": "2108450"
  },
  {
    "text": "to work in production oops so I just realized I forgot to start the timer on here the way actors work in production",
    "start": "2108450",
    "end": "2115200"
  },
  {
    "text": "is that they typically split time across threads but that's sort of done under",
    "start": "2115200",
    "end": "2120359"
  },
  {
    "text": "the covers that you need to know about it so a one on this case going on core",
    "start": "2120359",
    "end": "2126180"
  },
  {
    "text": "one might have a message to process and so my a two and they'll go ahead and go through the core and finish there",
    "start": "2126180",
    "end": "2133380"
  },
  {
    "text": "basically they'll finish their processing they'll have finished a run of messages typically an actor will do a",
    "start": "2133380",
    "end": "2138780"
  },
  {
    "text": "batch of like 30 messages or so each time they're scheduled and they'll go ahead and yield the thread to the next",
    "start": "2138780",
    "end": "2144089"
  },
  {
    "text": "actor in line then the rest of the actors might go through gets in you're processing and",
    "start": "2144089",
    "end": "2149450"
  },
  {
    "text": "you'll see a one whoops a one gets scheduled again to execute so actors",
    "start": "2149450",
    "end": "2155030"
  },
  {
    "text": "share threads the reason why I mentioned this is that in order to process one",
    "start": "2155030",
    "end": "2161090"
  },
  {
    "text": "message at a time with an actor we still need to use a thread but what we do is we basically guarantee that for",
    "start": "2161090",
    "end": "2167750"
  },
  {
    "text": "a brief period of time an actor can hold on to a thread whether it's in the TPL thread pool whether it's running on the",
    "start": "2167750",
    "end": "2174110"
  },
  {
    "text": "UI thread if you're using a synchronized dispatcher the actor will go ahead and basically complete a run of messages and",
    "start": "2174110",
    "end": "2180650"
  },
  {
    "text": "then yield and wait for the rest of the system to go so these are how actors fundamentally work so I'm giving you all",
    "start": "2180650",
    "end": "2187550"
  },
  {
    "text": "this as background to talk about just the concurrency and state part of distributed systems so far we haven't",
    "start": "2187550",
    "end": "2193070"
  },
  {
    "text": "touched on any of the other major classes of problems you described yet it's one thing that's really important",
    "start": "2193070",
    "end": "2198260"
  },
  {
    "text": "to note about akka actors is that you don't necessarily need them just for building distributed systems there's",
    "start": "2198260",
    "end": "2204830"
  },
  {
    "text": "lots of folks who use them in client-side applications and even some folks who have them running on xamarin",
    "start": "2204830",
    "end": "2209870"
  },
  {
    "text": "Android and iOS right now for basically just handling UI events that might percolate up concurrently akka scales",
    "start": "2209870",
    "end": "2217310"
  },
  {
    "text": "down to support that use case as well too now when it comes to the network we",
    "start": "2217310",
    "end": "2224390"
  },
  {
    "start": "2224000",
    "end": "2224000"
  },
  {
    "text": "deal with messages as sort of the primary way actors communicate messages versus the so there's a couple different",
    "start": "2224390",
    "end": "2231110"
  },
  {
    "text": "ways you can think about communicating over the network most of us are web developers I'm assuming in the room and",
    "start": "2231110",
    "end": "2237020"
  },
  {
    "text": "the primary way I think a lot of us tend to think about the network is in the form of like our PCs remote procedure",
    "start": "2237020",
    "end": "2242900"
  },
  {
    "text": "calls well I'll go ahead and send HTTP verb and some state to a web api method",
    "start": "2242900",
    "end": "2248900"
  },
  {
    "text": "and I expect some response back so these are these sort of request response driven systems messages when you work in",
    "start": "2248900",
    "end": "2257210"
  },
  {
    "text": "message oriented programming and this is the sort of thing you'd get with actor systems or the message bus like rabbitmq",
    "start": "2257210",
    "end": "2263390"
  },
  {
    "text": "and service bus these allow for a couple of different modes of communication you can't normally achieve which is plain",
    "start": "2263390",
    "end": "2269690"
  },
  {
    "text": "old RPC so messages are always comprised of two parts the payload and they're",
    "start": "2269690",
    "end": "2275780"
  },
  {
    "text": "applied to address the actor that sends a message to someone else on the network might not",
    "start": "2275780",
    "end": "2282560"
  },
  {
    "text": "be the same actor that gets the response back at the end this allows us to decouple who the sender the receiver and",
    "start": "2282560",
    "end": "2289010"
  },
  {
    "text": "the final destination for a response might be and allows for some communication patterns they're a little bit more flexible than what we're used",
    "start": "2289010",
    "end": "2295160"
  },
  {
    "text": "to with RPC message sending is always asynchronous the other thing that's cool",
    "start": "2295160",
    "end": "2302990"
  },
  {
    "text": "about messages is they can be serialized and stored so one of the reasons why we use event sourcing as the model for",
    "start": "2302990",
    "end": "2310310"
  },
  {
    "text": "allowing akhada persistence to work is you can have a persistent actor decide to journal messages it's been receiving",
    "start": "2310310",
    "end": "2316880"
  },
  {
    "text": "as part of its state when it needs to rebuild its state down the road what does it do it DC realizes those messages",
    "start": "2316880",
    "end": "2324350"
  },
  {
    "text": "back out of the database and replays them during our recovery phase that allows it to go ahead and rehydrate its",
    "start": "2324350",
    "end": "2330410"
  },
  {
    "text": "state back up from nothing so these sort of message driven systems over the network play very nicely with that as a",
    "start": "2330410",
    "end": "2336440"
  },
  {
    "text": "persistence model now the other thing that's cool about messages is you can exercise what's called a deferment of",
    "start": "2336440",
    "end": "2343160"
  },
  {
    "text": "processing a message so that finite state machine example I had earlier remember when I mentioned that during",
    "start": "2343160",
    "end": "2349850"
  },
  {
    "text": "the authenticating state we might want to buffer some messages before until we get their reply back as to whether the",
    "start": "2349850",
    "end": "2356450"
  },
  {
    "text": "user successfully authenticated or not that's an example of a deferment we're deferring processing of those messages",
    "start": "2356450",
    "end": "2362540"
  },
  {
    "text": "even though they arrived first because we're not on a state where we can handle them properly yet this gives us some",
    "start": "2362540",
    "end": "2369140"
  },
  {
    "text": "more flexible message processing capabilities - you can't really defer processing of an HTTP request you have",
    "start": "2369140",
    "end": "2376130"
  },
  {
    "text": "to serve it and move on so the client is in timeout the actor model allows for more flexible modes of communication",
    "start": "2376130",
    "end": "2381770"
  },
  {
    "text": "than that which is another reason why I can help us solve some of our network topology and communication woes the",
    "start": "2381770",
    "end": "2390920"
  },
  {
    "text": "other thing we can do with messages is we can delegate who executes them to someone else one of the things you",
    "start": "2390920",
    "end": "2396170"
  },
  {
    "text": "typically see in these actor hierarchies is the parent actor closer to the top of the hierarchy usually delegates",
    "start": "2396170",
    "end": "2402170"
  },
  {
    "text": "processing of messages to its children so you tend to see these sort of messages trickle down from the top of an",
    "start": "2402170",
    "end": "2407870"
  },
  {
    "text": "actor hierarchy down towards the bottom that's very common",
    "start": "2407870",
    "end": "2412940"
  },
  {
    "text": "and the last thing you can do with the message is you can do broadcasts or multicast messages where a message can",
    "start": "2412940",
    "end": "2419030"
  },
  {
    "text": "be sent to multiple parties for processing so a good example of that is in a couple of systems that helped some",
    "start": "2419030",
    "end": "2427010"
  },
  {
    "text": "akkad ainít users design they have to have control messages but these are particularly true for some of our I Oh",
    "start": "2427010",
    "end": "2432710"
  },
  {
    "text": "tea customers well what they need to do is be able to send a like kill message",
    "start": "2432710",
    "end": "2437750"
  },
  {
    "text": "out to a number of devices when a controller goes down this is part of like a safety regulation we have people",
    "start": "2437750",
    "end": "2443210"
  },
  {
    "text": "using akkad on net in the oil and gas industry for instance being able to go and broadcast that and confirm that",
    "start": "2443210",
    "end": "2448670"
  },
  {
    "text": "everyone received it is a very useful communication pattern in that sense so these are all types of more flexible",
    "start": "2448670",
    "end": "2454670"
  },
  {
    "text": "modes of communication you can get with these message driven systems that you can't very easily do with RPC what this",
    "start": "2454670",
    "end": "2463220"
  },
  {
    "start": "2463000",
    "end": "2463000"
  },
  {
    "text": "allows us to do is use some types of messaging patterns we can use to communicate over the network so",
    "start": "2463220",
    "end": "2469070"
  },
  {
    "text": "broadcast is one example one node can take the same message and broadcast it to multiple destinations proxy is",
    "start": "2469070",
    "end": "2476390"
  },
  {
    "text": "another example where a node can go ahead and by the way node in this case can also mean actor I'm sort of using",
    "start": "2476390",
    "end": "2481640"
  },
  {
    "text": "the term interchangeably here I can basically proxy the message down to a different node than who originally",
    "start": "2481640",
    "end": "2487370"
  },
  {
    "text": "received it and they can fulfill the request and reply back this allows for more flexible types of routing in our",
    "start": "2487370",
    "end": "2493460"
  },
  {
    "text": "system pub/sub is another great example so we can have a couple of nodes",
    "start": "2493460",
    "end": "2499130"
  },
  {
    "text": "subscribe to a publisher who will go ahead and notify them when a message of",
    "start": "2499130",
    "end": "2504500"
  },
  {
    "text": "interest arrives and then they can go and do some work with it the way people tend to design a lot of big scale actor",
    "start": "2504500",
    "end": "2510740"
  },
  {
    "text": "systems is they have lots of little layers of pub/sub they use to construct a protocol and that allows the system to",
    "start": "2510740",
    "end": "2516530"
  },
  {
    "text": "be very reactive we're an actor at the top of the publishing chain receives a message and causes the sort of Cascade",
    "start": "2516530",
    "end": "2522770"
  },
  {
    "text": "of work to flow down from it those systems are very easy to design and debug that's why this pattern has to be",
    "start": "2522770",
    "end": "2528620"
  },
  {
    "text": "popular and then my personal favorite because it's fast one-way messaging when",
    "start": "2528620",
    "end": "2533720"
  },
  {
    "text": "I go ahead and I fire it's like fire-and-forget messaging I send a message and I don't care what happens to it I used to work on analytic systems",
    "start": "2533720",
    "end": "2541100"
  },
  {
    "text": "and the majority of our communication looked like this because it was too expensive to build in requests for Bonz so these are types of communication",
    "start": "2541100",
    "end": "2548780"
  },
  {
    "text": "patterns you can use between individual actors well this allows us to construct",
    "start": "2548780",
    "end": "2554300"
  },
  {
    "start": "2553000",
    "end": "2553000"
  },
  {
    "text": "a proper messaging protocols the way you want to treat with issues over the",
    "start": "2554300",
    "end": "2560120"
  },
  {
    "text": "network isn't by thinking about the design of specific actor classes or the design of specific messages rather you",
    "start": "2560120",
    "end": "2567230"
  },
  {
    "text": "want to design a protocol for communication between actors that can account for failure so this protocol",
    "start": "2567230",
    "end": "2573440"
  },
  {
    "text": "about to show you I think as it can sends this protocol I think that's what this example is where right comes into",
    "start": "2573440",
    "end": "2579920"
  },
  {
    "text": "one actor and this actor needs to coordinate with some replicas of itself over the network hey are all three of us",
    "start": "2579920",
    "end": "2587540"
  },
  {
    "text": "in a state where we can accept this right is this a valid and consistent thing we can do and the other two nodes",
    "start": "2587540",
    "end": "2594890"
  },
  {
    "text": "reply back with yes then we can go ahead and commit the right in all three places this is design to achieve a measure of",
    "start": "2594890",
    "end": "2602180"
  },
  {
    "text": "consistency and all the data that's being modified over our network the reason why I show this as an example is",
    "start": "2602180",
    "end": "2608660"
  },
  {
    "text": "this is the way people think about designing systems and actors there could",
    "start": "2608660",
    "end": "2613760"
  },
  {
    "text": "actually be a whole hierarchy of actors underneath any one of these nodes participating in fulfilling this",
    "start": "2613760",
    "end": "2619370"
  },
  {
    "text": "operation but that detail is abstract it away from the protocol itself if you",
    "start": "2619370",
    "end": "2625160"
  },
  {
    "text": "treat the protocol as your specification for how individual actors talk to each other",
    "start": "2625160",
    "end": "2630320"
  },
  {
    "text": "whether the local or over the network it gives you a very flexible design so I",
    "start": "2630320",
    "end": "2637400"
  },
  {
    "start": "2636000",
    "end": "2636000"
  },
  {
    "text": "haven't shown this yet but how actors actually talk is they communicate via reference so this is an actor system",
    "start": "2637400",
    "end": "2643700"
  },
  {
    "text": "this is the sort of shared namespace actors used for talking with each other it sort of provides a little fabric a",
    "start": "2643700",
    "end": "2650180"
  },
  {
    "text": "context that they can use for naming themselves for being able to go and address other actors on remote systems",
    "start": "2650180",
    "end": "2656360"
  },
  {
    "text": "etc then we go ahead and we actually create an actor here this will be a",
    "start": "2656360",
    "end": "2661790"
  },
  {
    "text": "little greeting actor and we're giving it a name greeter when we want to have an actor actually process a message we",
    "start": "2661790",
    "end": "2668120"
  },
  {
    "text": "get this thing called an actor reference back right here and I can tell the actor reference any arbitrary dotnet object",
    "start": "2668120",
    "end": "2674720"
  },
  {
    "text": "and that object will be delivered to that actor regardless of where it is on the network this is because this actor reference",
    "start": "2674720",
    "end": "2681860"
  },
  {
    "text": "object has an important property known as location transparency who can name",
    "start": "2681860",
    "end": "2688280"
  },
  {
    "start": "2685000",
    "end": "2685000"
  },
  {
    "text": "something you use every day that also has a transparent location well got an",
    "start": "2688280",
    "end": "2694340"
  },
  {
    "text": "example on the slide your cell phone number has a transparent location so if I want to give you know my best friend",
    "start": "2694340",
    "end": "2700850"
  },
  {
    "text": "from childhood a call he's in Washington DC and I'm here in Sydney I don't need",
    "start": "2700850",
    "end": "2706370"
  },
  {
    "text": "to tell AT&T how to manually route all my voice packets to him in Washington DC I just need to know his phone number and",
    "start": "2706370",
    "end": "2714040"
  },
  {
    "text": "his transparent is location in the world physically is transparent to me as a detail there another example of",
    "start": "2714040",
    "end": "2721220"
  },
  {
    "text": "something that has a transparent location is the domain name system we imagine a world would you had to",
    "start": "2721220",
    "end": "2726950"
  },
  {
    "text": "manually memorize all the IP addresses for Google home servers that'd be pretty",
    "start": "2726950",
    "end": "2732260"
  },
  {
    "text": "awful right the DNS system helps make the location of where those servers are in the world relative to us",
    "start": "2732260",
    "end": "2738320"
  },
  {
    "text": "transparent and the load balancer sitting beneath those does the same thing again what the idea of location",
    "start": "2738320",
    "end": "2745220"
  },
  {
    "text": "transparency is really about is being able to go and interact with systems",
    "start": "2745220",
    "end": "2750380"
  },
  {
    "text": "without needing to explicitly program in your code whether they are a local or remote system so this code I showed you",
    "start": "2750380",
    "end": "2758720"
  },
  {
    "text": "in the previous slide I could specify in Houk on the configuration form at the",
    "start": "2758720",
    "end": "2764090"
  },
  {
    "text": "akkad on it uses that this actor is actually gonna live on a remote process in another datacenter this operation",
    "start": "2764090",
    "end": "2772130"
  },
  {
    "text": "would still work even if that actor lived you know on a totally different machine thousands of miles away might",
    "start": "2772130",
    "end": "2779600"
  },
  {
    "text": "take it a little bit longer to get my message but it would still work and the reason why this is a good thing for",
    "start": "2779600",
    "end": "2785750"
  },
  {
    "text": "building distributed systems is it solves the problem of topology if you",
    "start": "2785750",
    "end": "2791030"
  },
  {
    "text": "don't need to care where an actor is on the network in order to interact with it it makes it very simple for you as the",
    "start": "2791030",
    "end": "2797570"
  },
  {
    "text": "developer to go ahead and build an actor system that implements a protocol for achieving some goal without having to",
    "start": "2797570",
    "end": "2804590"
  },
  {
    "text": "worry about editing configuration files without having to go and spin up a bunch of machines to test it you can design",
    "start": "2804590",
    "end": "2810620"
  },
  {
    "text": "code that works locally and expect that to still work over the network as long as your protocol is",
    "start": "2810620",
    "end": "2816489"
  },
  {
    "text": "designed to account for failure so in a NACA dotnet cluster what you tend to",
    "start": "2816489",
    "end": "2823779"
  },
  {
    "text": "have is you have a number of different these are actual like let's say these are servers for argument's sake these",
    "start": "2823779",
    "end": "2830019"
  },
  {
    "text": "servers can each have actor systems that have hundreds of thousands of actors in them in memory any given time I can have",
    "start": "2830019",
    "end": "2837099"
  },
  {
    "text": "an actor on system a get a reference to an actor on system II and they can send",
    "start": "2837099",
    "end": "2843009"
  },
  {
    "text": "a message back to it without needing to know that node II even exists under the",
    "start": "2843009",
    "end": "2848650"
  },
  {
    "text": "hood akka dot cluster and Nakada promote give me that transparent location on the actor reference and that's all I need to",
    "start": "2848650",
    "end": "2855219"
  },
  {
    "text": "worry about I just have an actor ref and I send it a message so this is the next",
    "start": "2855219",
    "end": "2860680"
  },
  {
    "text": "big thing that akka dontoh actors give us is the ability to go ahead and transparently extend code that works",
    "start": "2860680",
    "end": "2866499"
  },
  {
    "text": "locally over the network it's not magic just good design one of the other things",
    "start": "2866499",
    "end": "2872529"
  },
  {
    "text": "that helps us I'm sure that's possible is each one of these connections here so",
    "start": "2872529",
    "end": "2877809"
  },
  {
    "text": "these are aqua dot remote associations is what these are in order for them to work and preserve all these actor model",
    "start": "2877809",
    "end": "2884709"
  },
  {
    "text": "guarantees I showed you earlier one of the things we have to do is preserve message order on the wire so messages",
    "start": "2884709",
    "end": "2891400"
  },
  {
    "text": "written from node a to node E also obey a FIFO ordering so that means that any",
    "start": "2891400",
    "end": "2897910"
  },
  {
    "text": "actor on node e receiving messages from node a will receive the messages and the",
    "start": "2897910",
    "end": "2903369"
  },
  {
    "text": "order in which that actor on node a sent them that's guaranteed by the way the framework is designed now let's talk a",
    "start": "2903369",
    "end": "2912279"
  },
  {
    "text": "little bit about state one more time of these two architectures I have on screen here we have this sort of stateless app",
    "start": "2912279",
    "end": "2919569"
  },
  {
    "text": "that does request response to a database server whereas we have a stateful application server that has all the same",
    "start": "2919569",
    "end": "2926140"
  },
  {
    "text": "information but it's available locally in memory which of these two",
    "start": "2926140",
    "end": "2931479"
  },
  {
    "text": "architectures will produce the fastest response time given the same data sorry stateful right",
    "start": "2931479",
    "end": "2940140"
  },
  {
    "text": "by an order of magnitude at least maybe two orders of magnitude",
    "start": "2940140",
    "end": "2946029"
  },
  {
    "start": "2946000",
    "end": "2946000"
  },
  {
    "text": "the idea behind stateful applications is that base or the single source of truth",
    "start": "2946029",
    "end": "2951399"
  },
  {
    "text": "is in your applications memory so you might have a stateless web server that",
    "start": "2951399",
    "end": "2956559"
  },
  {
    "text": "does some work and it goes and talks to a stateful app server the APIs over will",
    "start": "2956559",
    "end": "2962919"
  },
  {
    "text": "go ahead and serve a response available immediately from its own memory but it'll asynchronously flush and read data",
    "start": "2962919",
    "end": "2970119"
  },
  {
    "text": "from the database server as it needs it here's what this model is really all about",
    "start": "2970119",
    "end": "2975189"
  },
  {
    "text": "we're inverting the role of a database from being the single source of truth that we depend on for every single",
    "start": "2975189",
    "end": "2981189"
  },
  {
    "text": "request to treating it like a dumb backup that's the idea behind stateful",
    "start": "2981189",
    "end": "2986469"
  },
  {
    "text": "application design you still have a database but its role is different it's just there for recovery purposes now and",
    "start": "2986469",
    "end": "2993269"
  },
  {
    "text": "so this actually this type of design is capable of achieving speeds that are unheard of in traditional stateless crud",
    "start": "2993269",
    "end": "2999849"
  },
  {
    "text": "designs and this is because we benefit from a principle known as state locality",
    "start": "2999849",
    "end": "3004979"
  },
  {
    "text": "raise your hand if you've heard this term before okay good this will be new then what",
    "start": "3004979",
    "end": "3010769"
  },
  {
    "text": "state locality refers to is this idea of the data your application needs to run",
    "start": "3010769",
    "end": "3017099"
  },
  {
    "text": "is adjacent in memory to the code that runs it so this means that you don't have to go very far to get the data you",
    "start": "3017099",
    "end": "3023609"
  },
  {
    "text": "need to do your work so remember that second scenario I showed you the real time event processing how fast would",
    "start": "3023609",
    "end": "3031019"
  },
  {
    "text": "that be if all the data for processing those events was available inside the Actor's memory who was processing them",
    "start": "3031019",
    "end": "3038149"
  },
  {
    "text": "it means that's the difference between getting the data you need much looking at a register adjacent to you in memory",
    "start": "3038149",
    "end": "3044539"
  },
  {
    "text": "versus serializing a message going over the network to a database having that",
    "start": "3044539",
    "end": "3049829"
  },
  {
    "text": "database read something from disk serialize it but you get you get the idea state locality allows you to build",
    "start": "3049829",
    "end": "3055799"
  },
  {
    "text": "extremely fast systems and this is what all these real-time systems tend to use now so the full stream processing",
    "start": "3055799",
    "end": "3063029"
  },
  {
    "text": "example I showed earlier would only really be able to achieve its goals by leveraging this principle and actors",
    "start": "3063029",
    "end": "3069599"
  },
  {
    "text": "make that very easy by allowing all the state to be something that resides locally inside it so that's the idea",
    "start": "3069599",
    "end": "3076319"
  },
  {
    "text": "there now the reason why I bring up state is state",
    "start": "3076319",
    "end": "3082010"
  },
  {
    "start": "3078000",
    "end": "3078000"
  },
  {
    "text": "as well allows these protocols we talked about to work during that consensus protocol example I showed earlier what's",
    "start": "3082010",
    "end": "3089060"
  },
  {
    "text": "really going on under the hood is that each of those actors who are participating in that operation all have",
    "start": "3089060",
    "end": "3094790"
  },
  {
    "text": "some data about the current state of the object there they're modifying and about",
    "start": "3094790",
    "end": "3100490"
  },
  {
    "text": "all the other requests that might be happening in parallel for that same object where is an example of state at",
    "start": "3100490",
    "end": "3107000"
  },
  {
    "text": "work and a different type of protocol who's heard of at least ones delivery",
    "start": "3107000",
    "end": "3112040"
  },
  {
    "text": "protocol before raise your hands or exactly once delivery all right cool",
    "start": "3112040",
    "end": "3117609"
  },
  {
    "text": "those are protocols that use state to guarantee that messages are received and",
    "start": "3117609",
    "end": "3122990"
  },
  {
    "text": "processed by their destination so a lot of people who use Akkad on network in finance and they're paranoid about",
    "start": "3122990",
    "end": "3128840"
  },
  {
    "text": "transaction never going through right for good reason usually they end up losing so on often themselves a lot of money if they",
    "start": "3128840",
    "end": "3135440"
  },
  {
    "text": "don't do it so at most once message delivery requires no state that's why",
    "start": "3135440",
    "end": "3141020"
  },
  {
    "text": "Akkad on it uses it by default but the consequences messages will be lost",
    "start": "3141020",
    "end": "3147200"
  },
  {
    "text": "eventually as soon as there's a network failure well let's say we want to make sure we have reach viable delivery of",
    "start": "3147200",
    "end": "3153859"
  },
  {
    "text": "messages so we have a technique known as at least once delivery well what we do",
    "start": "3153859",
    "end": "3159770"
  },
  {
    "text": "there is we go ahead and have some state on the sender about which messages we've sent and to whom and how long has it",
    "start": "3159770",
    "end": "3167150"
  },
  {
    "text": "been since we've sent them we expect with some form of acknowledgment back from the receiver letting us know it got",
    "start": "3167150",
    "end": "3172730"
  },
  {
    "text": "the message if we don't get acknowledgment back we'll go ahead and redeliver the message that's the state",
    "start": "3172730",
    "end": "3178550"
  },
  {
    "text": "the sender has in this under this protocol and as a consequence of that you might have duplicate messages",
    "start": "3178550",
    "end": "3184760"
  },
  {
    "text": "potentially but at least you can guarantee that messages are never lost in exactly once messaging protocol we",
    "start": "3184760",
    "end": "3192530"
  },
  {
    "text": "have state on both sides of the wire the sender has the exact same state it did before an hour at least once delivery",
    "start": "3192530",
    "end": "3199130"
  },
  {
    "text": "scenario but now the sender also has to keep track of which messages is observed before this is what's known as an",
    "start": "3199130",
    "end": "3205760"
  },
  {
    "text": "acknowledgement buffer has to keep track of which messages it seen because why would you want to keep track of which",
    "start": "3205760",
    "end": "3211730"
  },
  {
    "text": "messages you've seen before scenario what are we trying to avoid duplicates we don't want to process the",
    "start": "3211730",
    "end": "3219260"
  },
  {
    "text": "same message twice do you think it might be a problem if we process the same trade twice on a stock exchange probably",
    "start": "3219260",
    "end": "3226700"
  },
  {
    "text": "so the receiver also has to have the state here so we design your protocol",
    "start": "3226700",
    "end": "3232730"
  },
  {
    "text": "between these different actors in your distributed system thinking about the role that state plays is pretty",
    "start": "3232730",
    "end": "3239510"
  },
  {
    "text": "important actors still make that really easy but you just have to sort of exercise a bit of a sort of awareness of",
    "start": "3239510",
    "end": "3246800"
  },
  {
    "text": "what you're gonna need to make it work then the last part will sort of close",
    "start": "3246800",
    "end": "3251840"
  },
  {
    "start": "3250000",
    "end": "3250000"
  },
  {
    "text": "out with here in terms of talking about distributed systems with actors is the cap theorem it's a quick show of hands",
    "start": "3251840",
    "end": "3258050"
  },
  {
    "text": "who's heard of this before okay cool about half the room so the cap",
    "start": "3258050",
    "end": "3263120"
  },
  {
    "text": "theorem I really think of as just a decision-making framework that allows they sort of offers some trade offs",
    "start": "3263120",
    "end": "3268850"
  },
  {
    "text": "between different quantities and distributed system I think incorrectly people state that you have these three",
    "start": "3268850",
    "end": "3275570"
  },
  {
    "text": "quantities CA and P pick - it's really a lot of sense is a little bit more like a",
    "start": "3275570",
    "end": "3280610"
  },
  {
    "text": "gradient to some extent where you might have some systems that are more strongly consistent some that are more available",
    "start": "3280610",
    "end": "3287590"
  },
  {
    "text": "etc well each of the terminologies mean is first consistency different than the",
    "start": "3287590",
    "end": "3293930"
  },
  {
    "start": "3290000",
    "end": "3290000"
  },
  {
    "text": "consistency in acid this refers to all nodes seeing the same data at the same time an eventually consistent system is",
    "start": "3293930",
    "end": "3301010"
  },
  {
    "text": "one where the time between the is the current state of an object on one node is gonna be there's some lead time",
    "start": "3301010",
    "end": "3307910"
  },
  {
    "text": "between that among the other nodes get updated availability is a guaranteed every request receives an explicit",
    "start": "3307910",
    "end": "3314420"
  },
  {
    "text": "response and partition tolerance is the system being able to continue despite",
    "start": "3314420",
    "end": "3320330"
  },
  {
    "text": "arbitrary partitioning due to failures on the network so that the split-brain was an example of partition intolerance",
    "start": "3320330",
    "end": "3327770"
  },
  {
    "text": "right essentially our system wasn't able to tolerate that partition and as a result our consistency suffered mightily",
    "start": "3327770",
    "end": "3333980"
  },
  {
    "text": "for well what the worldís plays a role",
    "start": "3333980",
    "end": "3339740"
  },
  {
    "start": "3337000",
    "end": "3337000"
  },
  {
    "text": "in terms of this sort of the cap theorem is it affects the way we design our protocols a proto",
    "start": "3339740",
    "end": "3346010"
  },
  {
    "text": "have to basically be designed in such a way that it takes into account our businesses cap requirements so quick",
    "start": "3346010",
    "end": "3354710"
  },
  {
    "text": "example reddit they have a system that",
    "start": "3354710",
    "end": "3360050"
  },
  {
    "text": "basically values being able to serve up content on their home page no matter what the vote count that you see in the",
    "start": "3360050",
    "end": "3366650"
  },
  {
    "text": "right hand corner whenever you look at an article ever refresh the page notice that value jumps all over the place",
    "start": "3366650",
    "end": "3372280"
  },
  {
    "text": "there an example of a system that really values availability way more than consistency because they can't serve ads",
    "start": "3372280",
    "end": "3379369"
  },
  {
    "text": "they can't serve content and they can't keep users on the site that ever changes an example of a system that really",
    "start": "3379369",
    "end": "3385760"
  },
  {
    "text": "values consistency would be a patient record system could you imagine a scenario where let's say you have two",
    "start": "3385760",
    "end": "3392090"
  },
  {
    "text": "members of a hospital staff treating the same patient one hospital staff member",
    "start": "3392090",
    "end": "3397220"
  },
  {
    "text": "makes a record of a medicine that they just dosed a patient with and the next",
    "start": "3397220",
    "end": "3402350"
  },
  {
    "text": "hospital worker comes along and can't see that state in the system yet did you see their potentially being some some",
    "start": "3402350",
    "end": "3408500"
  },
  {
    "text": "accidents that could occur as I was little aback that's an example of a system that values consistency you'd be",
    "start": "3408500",
    "end": "3414440"
  },
  {
    "text": "way better off having your patient record system go down and force the actual you know caregivers to talk to",
    "start": "3414440",
    "end": "3420980"
  },
  {
    "text": "each other in real life then you are serving up an incorrect result and having the patient get the same medicine",
    "start": "3420980",
    "end": "3426710"
  },
  {
    "text": "twice right this is an example of how cap effects are protocols to on the top",
    "start": "3426710",
    "end": "3433010"
  },
  {
    "text": "I'm gonna have you guys guess which one is higher consistency versus lower on the top we have a sort of a consensus",
    "start": "3433010",
    "end": "3439310"
  },
  {
    "text": "protocol again we're basically a write comes in for a given entity and we go",
    "start": "3439310",
    "end": "3444440"
  },
  {
    "text": "ahead and have a couple of actors agree that this white can be done consistently across all three and then then the",
    "start": "3444440",
    "end": "3452270"
  },
  {
    "text": "transaction gets committed at that point on the bottom we have a slightly different design where the protocol",
    "start": "3452270",
    "end": "3458930"
  },
  {
    "text": "basically states that a write can come in this node will immediately accept it and then notify other nodes who are",
    "start": "3458930",
    "end": "3466100"
  },
  {
    "text": "subscribed to this information after the fact this is called a commit and notify model so quick show hands who thinks the",
    "start": "3466100",
    "end": "3474140"
  },
  {
    "text": "diagram on top is the more consistent of the two",
    "start": "3474140",
    "end": "3479170"
  },
  {
    "text": "all right who thinks the bottom one is the more consistent of the two who has",
    "start": "3479310",
    "end": "3484440"
  },
  {
    "text": "no idea what I'm talking about got a couple hands alright so the answer",
    "start": "3484440",
    "end": "3490380"
  },
  {
    "text": "is the diagram on top is the more consistent the one on the bottom is the more available now the reason why that",
    "start": "3490380",
    "end": "3496140"
  },
  {
    "text": "is in a high consistency system where you basically only allow a certain so",
    "start": "3496140",
    "end": "3502920"
  },
  {
    "text": "there's this concept of interleavings of writes in a given system so quick",
    "start": "3502920",
    "end": "3509520"
  },
  {
    "text": "question for people in the audience to have a relational background could I update a record in a database after I've",
    "start": "3509520",
    "end": "3515850"
  },
  {
    "text": "deleted it so we'll want to shout out the answer no you can't right that's",
    "start": "3515850",
    "end": "3522180"
  },
  {
    "text": "part of sequels consistency model the data has to exist in order to be updated in Cassandra which is a more a database",
    "start": "3522180",
    "end": "3531330"
  },
  {
    "text": "with more relaxed consistency requirements if I have a delete on one node and I have an update on another",
    "start": "3531330",
    "end": "3537960"
  },
  {
    "text": "node it happened at the same time let's say if I'm running on relatively low consistency settings what's going to",
    "start": "3537960",
    "end": "3543930"
  },
  {
    "text": "happen well yeah he shrugged that's",
    "start": "3543930",
    "end": "3549000"
  },
  {
    "text": "actually the right answer probably who knows what's gonna happen the answer is if the update happened last that will",
    "start": "3549000",
    "end": "3555510"
  },
  {
    "text": "override the delete so you basically have this last right wins issue the idea",
    "start": "3555510",
    "end": "3561570"
  },
  {
    "text": "was consistency is that and that first design you're going to be unavailable during your update command you have to",
    "start": "3561570",
    "end": "3567420"
  },
  {
    "text": "give that a negative response you're choosing not to be available then because that would violate your consistency model and that's the right",
    "start": "3567420",
    "end": "3574200"
  },
  {
    "text": "thing for that business but if you read it you're kind of a little bit more yellow about it you just want to serve",
    "start": "3574200",
    "end": "3580890"
  },
  {
    "text": "ads it doesn't really matter if an upvote overrode a downvote or whatever that's not really the business that",
    "start": "3580890",
    "end": "3586860"
  },
  {
    "text": "you're in so the reason why I bring this up these are the sorts of trade-offs",
    "start": "3586860",
    "end": "3592830"
  },
  {
    "text": "that you want to think about when you're designing the protocols your actors use to talk to communicate is you want to",
    "start": "3592830",
    "end": "3598320"
  },
  {
    "text": "say okay what's more important to my business do I want to make sure that patient gets exactly one dose for their",
    "start": "3598320",
    "end": "3604020"
  },
  {
    "text": "medicine or I want to keep serving up cat photos and never go down not I said",
    "start": "3604020",
    "end": "3609750"
  },
  {
    "text": "there's no value judgment on either of these right these are just quantities you have to battle what actors helped you do is very",
    "start": "3609750",
    "end": "3616390"
  },
  {
    "text": "precisely design these protocols and even test them using stuff like the akkad on that test kit last but I wanted",
    "start": "3616390",
    "end": "3625150"
  },
  {
    "text": "to touch on is a little bit about fault and resource isolation with actors so",
    "start": "3625150",
    "end": "3630700"
  },
  {
    "text": "academia activists follow a life cycle during the starting phase and actor will initialize and run its pre start routine",
    "start": "3630700",
    "end": "3637890"
  },
  {
    "text": "then an actor will enter its receiving phase this is when the actor can begin processing its messages and that's same",
    "start": "3637890",
    "end": "3645730"
  },
  {
    "text": "the actor too stops it might stop because it was intentionally turned off",
    "start": "3645730",
    "end": "3651070"
  },
  {
    "text": "you might terminate an actor or maybe the actor shot that needed to stop",
    "start": "3651070",
    "end": "3656080"
  },
  {
    "text": "because it crashed through an exception well what will happen in this case is the actor will go ahead and restart in",
    "start": "3656080",
    "end": "3662170"
  },
  {
    "text": "place and that can happen transparently to everything else in the system well this allows you to do and here's where",
    "start": "3662170",
    "end": "3668470"
  },
  {
    "text": "the sort of the the idea behind the actor model comes in is you can treat errors locally in a cadet one of the",
    "start": "3668470",
    "end": "3676150"
  },
  {
    "text": "core concepts behind how actors fail is this notion of and it's kind of a real-life analogy here parental",
    "start": "3676150",
    "end": "3682030"
  },
  {
    "text": "supervision parents supervise their children so when a child actor fails the",
    "start": "3682030",
    "end": "3687700"
  },
  {
    "text": "parent will receive a message indicating hey your child failed and here's the reason why what do you want to do with",
    "start": "3687700",
    "end": "3693670"
  },
  {
    "text": "it in response you might be a tolerant parent you might go ahead and tell the",
    "start": "3693670",
    "end": "3698800"
  },
  {
    "text": "actor just to restart or to resume which is effectively a way of ignoring the error and keep going or you might be a",
    "start": "3698800",
    "end": "3705580"
  },
  {
    "text": "parent who is a little harsher and you might kill your child you might do that my hearken back to the sort of Roman",
    "start": "3705580",
    "end": "3712570"
  },
  {
    "text": "Empire days there or you can also be a parent who believes in collective punishment you can go ahead and kill all",
    "start": "3712570",
    "end": "3718420"
  },
  {
    "text": "of your children in one of them misbehaves so there's all sorts of different ways you can treat failure in",
    "start": "3718420",
    "end": "3724120"
  },
  {
    "text": "your system typically you don't see that sort of collective treatment of actors unless the children are executing a",
    "start": "3724120",
    "end": "3730270"
  },
  {
    "text": "cooperative algorithm or something mostly you deal with actors one-to-one this is an important idea behind the",
    "start": "3730270",
    "end": "3736780"
  },
  {
    "text": "failure models that a cadet allows you to detect is it gives you the ability to",
    "start": "3736780",
    "end": "3742000"
  },
  {
    "text": "deal with errors locally and just restart the parts of your system that failed so isolate errors down to individual",
    "start": "3742000",
    "end": "3748450"
  },
  {
    "text": "actors and then either restart or kill them depending on how severe the error was this might be the only time in your",
    "start": "3748450",
    "end": "3754690"
  },
  {
    "text": "career is a Donna developer that typed exceptions are actually useful so yeah just let it crash is sort of the",
    "start": "3754690",
    "end": "3762280"
  },
  {
    "text": "Erlang philosophy now part of akkad net Anaka the last thing I'll talk about is",
    "start": "3762280",
    "end": "3768190"
  },
  {
    "text": "detecting network partitions and failures over the network there's a really important tool the Akkad on it",
    "start": "3768190",
    "end": "3774040"
  },
  {
    "text": "has known as Deathwatch what Deathwatch is is it's an ability to subscribe to",
    "start": "3774040",
    "end": "3780100"
  },
  {
    "text": "another actor's life cycle and know when it dies there's all sorts of McCobb analogies we use in Akkad on it I guess",
    "start": "3780100",
    "end": "3787600"
  },
  {
    "text": "this one is watched people die the sort of the idea behind this so this these two actors here just sort of part of an",
    "start": "3787600",
    "end": "3794200"
  },
  {
    "text": "application I designed this actor on the right is being watched by this actor on",
    "start": "3794200",
    "end": "3799330"
  },
  {
    "text": "the left across the network now if the server process crashes this is a type of network failure right this",
    "start": "3799330",
    "end": "3806020"
  },
  {
    "text": "is one category possible failure that can occur on the network where software happens",
    "start": "3806020",
    "end": "3811090"
  },
  {
    "text": "yeah happens the crash what will happen is alkyd up remote will detect that it's",
    "start": "3811090",
    "end": "3816430"
  },
  {
    "text": "association of this node is failed we can't we're here we don't get any heartbeats back from it anymore so this",
    "start": "3816430",
    "end": "3822820"
  },
  {
    "text": "remote death watch your actor here will go ahead and mark all the actors we were watching and that server is dead and",
    "start": "3822820",
    "end": "3828870"
  },
  {
    "text": "we'll get a termination notification and at that point we can decide we want to",
    "start": "3828870",
    "end": "3834040"
  },
  {
    "text": "try reconnecting back to that node or you can try connecting to a different node redirect our work somewhere else",
    "start": "3834040",
    "end": "3839490"
  },
  {
    "text": "this is the idea of being able to route around a failure so akka dinettes sort of built on this",
    "start": "3839490",
    "end": "3845200"
  },
  {
    "text": "idea of being able to react to these sorts of events and just simply redirect",
    "start": "3845200",
    "end": "3850240"
  },
  {
    "text": "our work somewhere else if we need to not so you'll see this show up time and time again sort of larger distributed",
    "start": "3850240",
    "end": "3855970"
  },
  {
    "text": "systems built on a connect so what I've tried to sort of give you during this",
    "start": "3855970",
    "end": "3861070"
  },
  {
    "text": "talk is not so much a prescriptive like here's how you design actors and ATC it's more of here's the conceptual",
    "start": "3861070",
    "end": "3867940"
  },
  {
    "text": "framework for how actors are used to build distributed systems and how I think and how some of the other folks",
    "start": "3867940",
    "end": "3873790"
  },
  {
    "text": "who work on akka Donette think about how you actually design for these sort of networked applications",
    "start": "3873790",
    "end": "3880820"
  },
  {
    "text": "okay let's say that the equivalent of a hook coming to pull me off stage but the",
    "start": "3880820",
    "end": "3888000"
  },
  {
    "text": "idea behind this is just sort of give you an overview of akkad on net what it does and the concepts that are behind it",
    "start": "3888000",
    "end": "3895200"
  },
  {
    "text": "one thing I recommend checking out I don't think I have a slide on this one thing I recommend checking out is if you",
    "start": "3895200",
    "end": "3900660"
  },
  {
    "text": "go to get Akkad net we have our documentation there and the last thing we're looking at is go to learn Akkad",
    "start": "3900660",
    "end": "3907260"
  },
  {
    "text": "net that'll actually put you through Akkad on at bootcamp where you'll learn how to write a few Akkad ina",
    "start": "3907260",
    "end": "3912450"
  },
  {
    "text": "applications on your own sort of using a kinesthetic learning learn by doing and we've had about 5000 developers go",
    "start": "3912450",
    "end": "3919230"
  },
  {
    "text": "through that over the past year or so so definitely give that a try and if you have any questions about acha acha",
    "start": "3919230",
    "end": "3924990"
  },
  {
    "text": "dotnet I'll stand here and answer your questions so thank you very much and we",
    "start": "3924990",
    "end": "3933840"
  },
  {
    "text": "have microphones so people are asking questions okay cool go ahead and raise your hand and the one of the folks will",
    "start": "3933840",
    "end": "3938880"
  },
  {
    "text": "bring one by hi I have a quick question",
    "start": "3938880",
    "end": "3945030"
  },
  {
    "text": "actually two questions it does acta provide a consensus implementation out-of-the-box",
    "start": "3945030",
    "end": "3950130"
  },
  {
    "text": "out-of-the-box it does not I've seen someone implement raft before and they published a blog post on how to do it so",
    "start": "3950130",
    "end": "3957119"
  },
  {
    "text": "that's available but no we don't have any out-of-the-box components for that right the second part of the question is",
    "start": "3957119",
    "end": "3963330"
  },
  {
    "text": "if we were to build a custom consensus our protocol among a cluster of acronyms",
    "start": "3963330",
    "end": "3971780"
  },
  {
    "text": "can it can be dynamically scale out that cluster yeah you can scale out that cluster Aqueduct clusters just appear to",
    "start": "3971780",
    "end": "3978869"
  },
  {
    "text": "peer network and what will happen is it uses a gossip protocol to sort of determine what a new node joins you can",
    "start": "3978869",
    "end": "3984780"
  },
  {
    "text": "basically subscribe to a notification for that and so you'll receive an event and that actor let's say you needed to",
    "start": "3984780",
    "end": "3989970"
  },
  {
    "text": "have the list of all the addresses of nodes participating in transaction you can just go and add that to your set if",
    "start": "3989970",
    "end": "3995490"
  },
  {
    "text": "you wanted to fantastic thank you very much you're welcome I know yes yes it's",
    "start": "3995490",
    "end": "4003500"
  },
  {
    "text": "on cool so could you compare and contrast quickly quickly to assure a service",
    "start": "4003500",
    "end": "4009590"
  },
  {
    "text": "fabric so sure service fabric actors were Saku net well I would say one big",
    "start": "4009590",
    "end": "4017000"
  },
  {
    "text": "conceptual difference is the service fabric actors kind of a adopt a different philosophy than Aki dinette",
    "start": "4017000",
    "end": "4022400"
  },
  {
    "text": "which is that they try to do a lot of work for you in order to build reliable systems but you pay for that with",
    "start": "4022400",
    "end": "4027530"
  },
  {
    "text": "overhead and essentially a lot of choices that were made for you by service fabric itself it's a good",
    "start": "4027530",
    "end": "4034040"
  },
  {
    "text": "example we had someone who was evaluating service fabric actors versus akkad on net and akkad on that receive",
    "start": "4034040",
    "end": "4040460"
  },
  {
    "text": "actor can handle about six point seven million messages per second service fabric was about a hundred and forty",
    "start": "4040460",
    "end": "4046040"
  },
  {
    "text": "messages a second that's one big difference between the two there and that's because service fabric actors are",
    "start": "4046040",
    "end": "4051320"
  },
  {
    "text": "serializing each message and persisting them it's not because they're inherently bad they're just trying to do a thorough",
    "start": "4051320",
    "end": "4057680"
  },
  {
    "text": "job of basically persisting everything for you and giving you some reliable state recovery mechanisms whereas akkad",
    "start": "4057680",
    "end": "4063590"
  },
  {
    "text": "on net by default is dumb and fast that's it the other thing that service fabric a naka dinette having common",
    "start": "4063590",
    "end": "4069380"
  },
  {
    "text": "actually is if you look at the docs for how the deployment model works like let's say you want to go and update a",
    "start": "4069380",
    "end": "4074690"
  },
  {
    "text": "reliable service filled with service fabric actors that deployment process looks very similar to how a naka dinette",
    "start": "4074690",
    "end": "4080359"
  },
  {
    "text": "cluster would work the difference is that service fabric gives you the orchestration tools for doing that right",
    "start": "4080359",
    "end": "4085369"
  },
  {
    "text": "out of the box whereas with a KU net actually kind of ironically you'd want to plug into something like service fabric to help",
    "start": "4085369",
    "end": "4091010"
  },
  {
    "text": "you do that the service proud but really also has the concept of a runtime built into it whereas Aki dotnet does not it's",
    "start": "4091010",
    "end": "4097160"
  },
  {
    "text": "just a new get package you install and whatever else you're using whether that's a console app windows service and",
    "start": "4097160",
    "end": "4102830"
  },
  {
    "text": "asp.net application etc the answer your question good any others any good",
    "start": "4102830",
    "end": "4109970"
  },
  {
    "text": "anecdotes riddles one last thing I should mention Linux and dotnet core",
    "start": "4109970",
    "end": "4116028"
  },
  {
    "text": "support the core akka library will be available on dotnet core pretty soon we have an alpha of it already and we'll be",
    "start": "4116029",
    "end": "4122660"
  },
  {
    "text": "publishing that the new get within the next week or so and we already do fully support mono so we have people using",
    "start": "4122660",
    "end": "4128420"
  },
  {
    "text": "academic clusters on mono as of a couple of years ago actually so we've been supporting that for a while but we do",
    "start": "4128420",
    "end": "4135710"
  },
  {
    "text": "want to get on top of dotnet core quickly and so we're working on doing that now might take a little while particularly akkad up persistence we",
    "start": "4135710",
    "end": "4141950"
  },
  {
    "text": "have to support about ten different database drivers for that so that's a bit of a bit of a mission as I guess you guys",
    "start": "4141950",
    "end": "4147880"
  },
  {
    "text": "would say so all right one more question",
    "start": "4147880",
    "end": "4153150"
  },
  {
    "text": "we don't have a document DB driver we do have table storage and blob barakatuh",
    "start": "4158009",
    "end": "4163330"
  },
  {
    "text": "persistence but I don't think anyone's done a document DB one yet no don't think so that'd be a good",
    "start": "4163330",
    "end": "4168970"
  },
  {
    "text": "opportunity to contribute though all right yes",
    "start": "4168970",
    "end": "4174900"
  },
  {
    "text": "so if I understood your question correctly one of those some way for actors to sort of broadcast their like",
    "start": "4185260",
    "end": "4191900"
  },
  {
    "text": "telemetry sort of being able to say like okay well actors working on this out of the box know what you can do though is",
    "start": "4191900",
    "end": "4198560"
  },
  {
    "text": "you can actually go and override some of the built-in like message handlers inside actors and go ahead and base the",
    "start": "4198560",
    "end": "4204560"
  },
  {
    "text": "in should put some instrumentation in there and do one of your own base classes we have some folks have had to",
    "start": "4204560",
    "end": "4209630"
  },
  {
    "text": "do things like write auditing systems that are run on top of their actors and they'll have like a little filter that",
    "start": "4209630",
    "end": "4215330"
  },
  {
    "text": "basically checks to see if this message has the AI auditable flag on it and when it does they all perform the special",
    "start": "4215330",
    "end": "4221210"
  },
  {
    "text": "audit action you can have a special like telemetry tracing action do the same thing if you wanted to but out of the",
    "start": "4221210",
    "end": "4227450"
  },
  {
    "text": "box yeah we don't provide a lot of out-of-the-box tooling for doing that stuff right away just as part of the",
    "start": "4227450",
    "end": "4232670"
  },
  {
    "text": "keep it simple sort of design right well good question what type of transport do",
    "start": "4232670",
    "end": "4242510"
  },
  {
    "text": "we use the transport layer is pluggable but by default we use a TCP transport so essentially it's a single TCP connection",
    "start": "4242510",
    "end": "4249320"
  },
  {
    "text": "and it's running on top of a socket server called helios today we're gonna be redesigning that to use an even",
    "start": "4249320",
    "end": "4255530"
  },
  {
    "text": "lighter weight transport that's designed to be just a simple sort of I guess we're calling it the network stream",
    "start": "4255530",
    "end": "4260780"
  },
  {
    "text": "transport its Helios - a lot of the infrastructure that it has and it's designed to be much faster and lighter",
    "start": "4260780",
    "end": "4267020"
  },
  {
    "text": "weight so the transport layer is pluggable though the craziest one I've ever seen was we had some Wall Street",
    "start": "4267020",
    "end": "4273830"
  },
  {
    "text": "users who needed to support IBM WebSphere MQ as a transport those think",
    "start": "4273830",
    "end": "4279950"
  },
  {
    "text": "by the way the licenses for that are about a hundred thousand dollars a box so they were they basically had an",
    "start": "4279950",
    "end": "4285530"
  },
  {
    "text": "existing like auditing system built into that and they're able to rewrite their transport to use that under the hood so I've seen that before",
    "start": "4285530",
    "end": "4291860"
  },
  {
    "text": "I've seen folks do a do a UDP base transport before which is a little bit",
    "start": "4291860",
    "end": "4297830"
  },
  {
    "text": "risky because that message ordering guarantee can be easily implemented over UDP we've also seen people try to do",
    "start": "4297830",
    "end": "4304310"
  },
  {
    "text": "things like a named pipe transport before I've seen that personally the TCP",
    "start": "4304310",
    "end": "4310730"
  },
  {
    "text": "one is what I've seen like 99 point nine percent of applications use keeps things simple JVM dotnet Interop",
    "start": "4310730",
    "end": "4324050"
  },
  {
    "text": "that's actually been at a interesting topic because it's come up on the JVM side a lot to it'd be possible to do",
    "start": "4324050",
    "end": "4330949"
  },
  {
    "text": "that the difficult part isn't actually the network protocol it's actually the object representation taking an object",
    "start": "4330949",
    "end": "4337760"
  },
  {
    "text": "serializing it in the CLR deserializing as a JVM object the way you could solve",
    "start": "4337760",
    "end": "4343699"
  },
  {
    "text": "that though would be something like defining your own Google protocol buffer where you basically define all the",
    "start": "4343699",
    "end": "4348949"
  },
  {
    "text": "message types that can be interchanged and that will solve the object representation problem for you so that's",
    "start": "4348949",
    "end": "4354590"
  },
  {
    "text": "one approach that we've recommended you'd also maybe have to customize some parts of the transport a little bit JVM",
    "start": "4354590",
    "end": "4361639"
  },
  {
    "text": "akka is moving towards a new remoting implementation that's built on top of air on if you've heard of that before",
    "start": "4361639",
    "end": "4367849"
  },
  {
    "text": "and that thing is blazingly fast they're trying to hit a million messages per",
    "start": "4367849",
    "end": "4373039"
  },
  {
    "text": "second per connection they're at about a hundred and sixty thousand per connection right now so they're still",
    "start": "4373039",
    "end": "4379280"
  },
  {
    "text": "working on that but that uses I think multicast UDP under the hood so multi ply basically a bunch of UDP connections",
    "start": "4379280",
    "end": "4386059"
  },
  {
    "text": "that are multiplexed so in order for us to interrupt with that we'd have to have something that can deal with negotiate",
    "start": "4386059",
    "end": "4392030"
  },
  {
    "text": "the Aeron protocol as well and there are attempts to port that to dotnet today but I'm not aware of sort of what the",
    "start": "4392030",
    "end": "4398570"
  },
  {
    "text": "progress of those are yeah all right well I'm actually gonna be giving the",
    "start": "4398570",
    "end": "4403699"
  },
  {
    "text": "next talk in this room too so the stay-put here but thank you all for attending and for the great questions",
    "start": "4403699",
    "end": "4409099"
  },
  {
    "text": "thank you very much yeah",
    "start": "4409099",
    "end": "4415690"
  }
]