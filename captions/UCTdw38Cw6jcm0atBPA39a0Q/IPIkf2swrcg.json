[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "am I on I'm on y hi good afternoon everyone",
    "start": "719",
    "end": "5720"
  },
  {
    "text": "uh firstly big thank you uh for you all coming along this afternoon uh my name is Steve I'm a Microsoft MVP plasite",
    "start": "5720",
    "end": "12440"
  },
  {
    "text": "oror and engineer at elastic uh today we're going to be talking about writing code with code specifically we're going",
    "start": "12440",
    "end": "17960"
  },
  {
    "text": "to look at something called Roslin um before I move off this slide I do want to highlight there's a bitly link there",
    "start": "17960",
    "end": "23000"
  },
  {
    "text": "so if you want to access the slides after the session to recap anything if you've got that bitly link written down",
    "start": "23000",
    "end": "28800"
  },
  {
    "text": "uh you'll be able to do that I'll show it again at the end as well um if you have any questions that we don't get to today uh or during the rest of the",
    "start": "28800",
    "end": "35239"
  },
  {
    "text": "conference then you can find me online I'm stevej Gordon on most social media um possibly wanted by the police um and",
    "start": "35239",
    "end": "42960"
  },
  {
    "text": "I blog at stevej gordon. co.uk as well so um some of the stuff that I'm going to cover today is also covered there on",
    "start": "42960",
    "end": "48960"
  },
  {
    "text": "my blog so just to go through what we're going to talk about just so that",
    "start": "48960",
    "end": "54520"
  },
  {
    "start": "51000",
    "end": "101000"
  },
  {
    "text": "everyone's expectations are Set uh the first thing we're going to do is introduce Roslin so there's no need to know what Roslin is before this session",
    "start": "54520",
    "end": "60640"
  },
  {
    "text": "we'll go through some of the basics and then we'll start to explore some of its apis uh that we're going to use to",
    "start": "60640",
    "end": "66280"
  },
  {
    "text": "ultimately build something called a syntax tree to generate some C code all of these uh sort of bits that I'm going",
    "start": "66280",
    "end": "73119"
  },
  {
    "text": "to be talking about are grounded in a practical application that I had to co-generate uh a new version of the",
    "start": "73119",
    "end": "78960"
  },
  {
    "text": "client for elastic search um and so I'm going to talk a little bit towards the end about the specifics of that around",
    "start": "78960",
    "end": "84560"
  },
  {
    "text": "how we came up with a schema to Define what that um API needs to do how we",
    "start": "84560",
    "end": "89680"
  },
  {
    "text": "trans transform that spec into something that we can sort of Define in a strongly tight language like C how we build up",
    "start": "89680",
    "end": "95520"
  },
  {
    "text": "the syntax trees emit the c s source files and ultimately what I've learned along the way so let's begin with uh",
    "start": "95520",
    "end": "102920"
  },
  {
    "start": "101000",
    "end": "150000"
  },
  {
    "text": "Roslin itself so Roslin is actually a code name it's a code name for a project that Microsoft kicked off in around 2010",
    "start": "102920",
    "end": "110119"
  },
  {
    "text": "um and normally Microsoft are pretty good at coming up with uh good code names for their their products and",
    "start": "110119",
    "end": "115200"
  },
  {
    "text": "projects that they're working on and then giving them a really sort of bland boring microsof in name when they release them",
    "start": "115200",
    "end": "120479"
  },
  {
    "text": "uh Roslin is actually stuck so if you search for Roslin and.net you will find the documentation you'll find the GitHub",
    "start": "120479",
    "end": "125920"
  },
  {
    "text": "repository you'll find um sort of examples and blog posts uh online um so",
    "start": "125920",
    "end": "131239"
  },
  {
    "text": "that's great uh Microsoft couldn't resist though giving it a Microsoft name as well so you may occasionally see it",
    "start": "131239",
    "end": "136720"
  },
  {
    "text": "referred to as the net compiler platform SDK which uh just runs off the tongue um but it's worth knowing that because it",
    "start": "136720",
    "end": "142920"
  },
  {
    "text": "does appear that way in a few places in the tooling so this as I say kicked off in 2010 uh was finally released in 2015",
    "start": "142920",
    "end": "150120"
  },
  {
    "start": "150000",
    "end": "308000"
  },
  {
    "text": "so what is it so ultimately what Roslin is is a set of open- source openbox",
    "start": "150120",
    "end": "155640"
  },
  {
    "text": "compilers uh specifically for C and vb.net um open source is pretty self-evident so this code is up on",
    "start": "155640",
    "end": "162400"
  },
  {
    "text": "GitHub you can view it Fork it modify it um and contribute back to it as well",
    "start": "162400",
    "end": "167599"
  },
  {
    "text": "that's actually quite easy because one of the things that this project did is rewrite the C compiler in C which sounds",
    "start": "167599",
    "end": "174400"
  },
  {
    "text": "a bit like Inception to compile the compiler you use the compiler that you've just created um but this this is",
    "start": "174400",
    "end": "180159"
  },
  {
    "text": "useful this is a way of testing languages and their maturity because if you can write something that's a relatively complex system like a",
    "start": "180159",
    "end": "186360"
  },
  {
    "text": "compiler using the language then you know your language is pretty capable it's also a great way for the team to",
    "start": "186360",
    "end": "191879"
  },
  {
    "text": "dog food their language uh they can test um what it's like to write the C code and they look can look at possible",
    "start": "191879",
    "end": "197760"
  },
  {
    "text": "enhancements that they might want to make that makes writing that compiler code more tur or more sort of",
    "start": "197760",
    "end": "203159"
  },
  {
    "text": "readable um the open box part is also pretty useful so traditionally compilers have been quite closed box systems you",
    "start": "203159",
    "end": "209480"
  },
  {
    "text": "put bunch of source files in at one end you get back some kind of executable or binary dll some kind of output but what",
    "start": "209480",
    "end": "216040"
  },
  {
    "text": "happens in that middle phase is pretty opaque to the user what the rosin uh compiler system does is open that box",
    "start": "216040",
    "end": "222640"
  },
  {
    "text": "and it gives you access to the various phases that the compiler goes through in the form of apis that we can use to",
    "start": "222640",
    "end": "228599"
  },
  {
    "text": "access the metadata and the information that the compiler has because the compiler knows a lot about our code it has to in order to compile it so it",
    "start": "228599",
    "end": "235680"
  },
  {
    "text": "knows about the syntax it knows about possible errors it knows about the semantic meaning mean of the code and how all of the symbols are defined and",
    "start": "235680",
    "end": "241840"
  },
  {
    "text": "relate and so that's why this is referred to as a compiler platform because we're given now access to all of",
    "start": "241840",
    "end": "247159"
  },
  {
    "text": "those apis to work with different phases of the compiler if we need to and this is something that's used heavily in",
    "start": "247159",
    "end": "253159"
  },
  {
    "text": "tooling like Visual Studio to drive some of the features that we use daily um I summarize it as kind of like the maker",
    "start": "253159",
    "end": "259000"
  },
  {
    "text": "of the squiggles and the finder of the things it does a lot more obviously but uh the squiggles are are kind of thing",
    "start": "259000",
    "end": "264360"
  },
  {
    "text": "that we've probably all seen in our code um I mean I'm sure you get less red squiggles than I do but you see a",
    "start": "264360",
    "end": "270000"
  },
  {
    "text": "squiggle it usually means that either there's an error uh so maybe you've made a syntax error you've missed a semicolon",
    "start": "270000",
    "end": "276199"
  },
  {
    "text": "or you've got too many braces whatever uh that's something that the compiler can detect because it pauses the code",
    "start": "276199",
    "end": "281400"
  },
  {
    "text": "and it understands the syntax that you've provided it um but we get squiggles for other things we get squiggles that give us suggestions for",
    "start": "281400",
    "end": "287840"
  },
  {
    "text": "how we can improve our code by maybe refactoring it or moving to New C's language features or maybe applying",
    "start": "287840",
    "end": "293919"
  },
  {
    "text": "rules that we've defined in things like an editor config finder of things is things like going to definition find all",
    "start": "293919",
    "end": "300199"
  },
  {
    "text": "references the ability to kind of navigate through our source code and the symbols that we've defined within it and",
    "start": "300199",
    "end": "305520"
  },
  {
    "text": "find how things uh interrelate with one another there's another feature of",
    "start": "305520",
    "end": "310600"
  },
  {
    "start": "308000",
    "end": "396000"
  },
  {
    "text": "Roslin that we probably also use daily in our code bases it's analyzers so these are built into the net runtime but",
    "start": "310600",
    "end": "317560"
  },
  {
    "text": "you can also bring in analyzers from new get packages or build them yourself and within your organizations so an analyzer",
    "start": "317560",
    "end": "324039"
  },
  {
    "text": "is ultimately something that basically contains some code that recogniz recognizes a violation of some rule",
    "start": "324039",
    "end": "330039"
  },
  {
    "text": "within our code um so what that rule can be is pretty much anything that you could infer after paing the code and",
    "start": "330039",
    "end": "336280"
  },
  {
    "text": "understanding the syntax and some of the semantic meaning so it can be things around the coding structure that you want to enforce maybe a coding style",
    "start": "336280",
    "end": "343080"
  },
  {
    "text": "maybe even things like how you want things to be named a lot of this can be controlled through simpler methods like editor config but for certain scenarios",
    "start": "343080",
    "end": "350360"
  },
  {
    "text": "analyzers are a great way to go the other side of this is the code",
    "start": "350360",
    "end": "355800"
  },
  {
    "text": "fix so if we can detect that there's an error in the code or something isn't being done done right um that's one nice",
    "start": "355800",
    "end": "361880"
  },
  {
    "text": "feature but what's really useful is that if we've got a fixer for that we can automatically update the code behind the",
    "start": "361880",
    "end": "367599"
  },
  {
    "text": "scenes to apply that change so as developers we can be uh less concerned with all of those minor improvements",
    "start": "367599",
    "end": "373280"
  },
  {
    "text": "that we need to make we can just have the talling make changes for us so as I say you can um you can ship the or build",
    "start": "373280",
    "end": "380199"
  },
  {
    "text": "these yourself and ship them within your organization so if you really wanted to mess with colleagues for example you could have an analyzer that checks all",
    "start": "380199",
    "end": "386319"
  },
  {
    "text": "class declarations in your cbase and make sure that they don't have the word builder in them for example um anything",
    "start": "386319",
    "end": "391520"
  },
  {
    "text": "you could possibly think about around what the code looks like um you can potentially flag up so just to see what",
    "start": "391520",
    "end": "397720"
  },
  {
    "start": "396000",
    "end": "506000"
  },
  {
    "text": "analyzers look like in action I'm going to jump over to uh an example in this repository good that's something on",
    "start": "397720",
    "end": "403720"
  },
  {
    "text": "screen hopefully that text is clear enough for everyone at the back y cool um so the code here is completely",
    "start": "403720",
    "end": "410319"
  },
  {
    "text": "unimportant for the demo um this is part of our elastic transport Library there's a there's a method here that's doing",
    "start": "410319",
    "end": "415599"
  },
  {
    "text": "some stuff um but the bid I'm interested in is this right async call here so on here at the moment I've got an awake",
    "start": "415599",
    "end": "421919"
  },
  {
    "text": "keyword which makes sense if I remove that I immediately get a red squiggle under underneath my code and if I hover",
    "start": "421919",
    "end": "427360"
  },
  {
    "text": "on that I get told that this is being highlighted because the call is not awaited execution of the current method",
    "start": "427360",
    "end": "432840"
  },
  {
    "text": "continues before the call is completed consider applying the await operator so this identifies a potential common",
    "start": "432840",
    "end": "438759"
  },
  {
    "text": "mistake that you could have if you forget to put the await operator on here um for most scenarios that's what you want to do because you want this thing",
    "start": "438759",
    "end": "444919"
  },
  {
    "text": "to complete successfully first um in some scenarios you might have far and forget and you would want to ignore this",
    "start": "444919",
    "end": "450360"
  },
  {
    "text": "but for most scenarios this makes sense you see we get this little tool tip here this kind of screwdriver so if I can",
    "start": "450360",
    "end": "455560"
  },
  {
    "text": "click on there I can apply the fix for that um which then puts that keyword back in another example is down here so",
    "start": "455560",
    "end": "463240"
  },
  {
    "text": "if I remove the configur a we false here which we don't have time to go into why that's useful in libraries but we're doing it here and you can see I get",
    "start": "463240",
    "end": "469759"
  },
  {
    "text": "another squiggle and this time I'm getting this possibly missing figur weight false this is uh got a code here",
    "start": "469759",
    "end": "476159"
  },
  {
    "text": "CAC 001 so this one isn't coming from the net framework itself this is coming",
    "start": "476159",
    "end": "481360"
  },
  {
    "text": "because I've got uh an external net package pulled in that's adding this feature so again I'll just let it apply",
    "start": "481360",
    "end": "486879"
  },
  {
    "text": "the fix quickly and I'll show you where we reference that package it's just a regular net package here this configur",
    "start": "486879",
    "end": "492319"
  },
  {
    "text": "we Checker analyzer uh that we're referencing in all of our project so that just enforces a rule that we want",
    "start": "492319",
    "end": "497440"
  },
  {
    "text": "to have within our specific code base here close that down save some memory",
    "start": "497440",
    "end": "505120"
  },
  {
    "start": "506000",
    "end": "713000"
  },
  {
    "text": "right so that's kind of analyzes and fixes in action uh another cool feature that's a more recent feature of c and",
    "start": "506000",
    "end": "512760"
  },
  {
    "text": "Roslin is Source generators now I'm not going to go into depth in Source generators they can and are a whole",
    "start": "512760",
    "end": "518159"
  },
  {
    "text": "conference session of their own um but I will sort of highlight what these are so these were introduced in C 9 so around",
    "start": "518159",
    "end": "524080"
  },
  {
    "text": "Net 5 time frame and um what they ultimately do is um provide us a",
    "start": "524080",
    "end": "529560"
  },
  {
    "text": "compiler feature that lets developers inspect the user code uh while it's being compiled Now that statement alone",
    "start": "529560",
    "end": "535839"
  },
  {
    "text": "is probably not enough to really explain their benefits so I'll go on so what we we can do once we have Source generators",
    "start": "535839",
    "end": "541240"
  },
  {
    "text": "is we can develop these components that run during compilation and they have access to all of the metadata about the",
    "start": "541240",
    "end": "546680"
  },
  {
    "text": "user's code the application code so this is the syntax and the meaning of that code now again you might be wondering is",
    "start": "546680",
    "end": "553600"
  },
  {
    "text": "that useful to me what it lets us do is inject C source files directly into that",
    "start": "553600",
    "end": "559240"
  },
  {
    "text": "compilation that's happening so we can build up new C source files that become part of the compilation so logically",
    "start": "559240",
    "end": "565440"
  },
  {
    "text": "when the compiler starts it passes the code understands what's there and text if any Source generators need to be run",
    "start": "565440",
    "end": "571480"
  },
  {
    "text": "it runs them that might produce some additional sort of virtual C files that are now going to be part of that",
    "start": "571480",
    "end": "577040"
  },
  {
    "text": "compilation and then it finishes doing the whole compilation with those new files included and where this can be",
    "start": "577040",
    "end": "582519"
  },
  {
    "text": "really useful is doing things that either reduce sort of manual repetitive code like following patterns um or maybe",
    "start": "582519",
    "end": "589959"
  },
  {
    "text": "optimizing code for scenarios that sometimes have an impact at runtime so for reducing boiler plate one example",
    "start": "589959",
    "end": "596160"
  },
  {
    "text": "would be if you're doing sort of the mvvm pattern and you're using I if I property changed uh you know that that",
    "start": "596160",
    "end": "601800"
  },
  {
    "text": "interface is relatively straightforward to implement and it's just boilerplate that you kind of have to follow a pattern anywhere that you need to use it",
    "start": "601800",
    "end": "609480"
  },
  {
    "text": "um there's actually a source generator provided now in the MVP mvvm toolkit uh",
    "start": "609480",
    "end": "614519"
  },
  {
    "text": "that just allows you to put an attribute on your code and it does most of that heavy lifting for you so it's a bit of a time-saving effort another example is",
    "start": "614519",
    "end": "622120"
  },
  {
    "text": "doing um high performance logging in aspnet core so the logging uh features in I logger have an optimized mechanism",
    "start": "622120",
    "end": "628480"
  },
  {
    "text": "for how you write those if you want to have low allocation code pass for your logging doing that",
    "start": "628480",
    "end": "633640"
  },
  {
    "text": "manually takes a little bit of effort most people wouldn't bother doing it but with the source generator you can actually get that uh same effect with",
    "start": "633640",
    "end": "640200"
  },
  {
    "text": "just a new attribute um um on your code which makes things a lot easier the other scenario is that optimization of",
    "start": "640200",
    "end": "646160"
  },
  {
    "text": "code at runtime so there's certain scenarios where there are slower paths in our code at runtime because we need to know things about the code and a",
    "start": "646160",
    "end": "653000"
  },
  {
    "text": "typical example of that is serializers um so something like system text Json is a library that Microsoft write and it",
    "start": "653000",
    "end": "659560"
  },
  {
    "text": "needs to be able to serialize code um to and from Json to types that the application is going to Define so it",
    "start": "659560",
    "end": "666800"
  },
  {
    "text": "doesn't know what those types look like so the only way it can access that information is to use reflection and it",
    "start": "666800",
    "end": "672200"
  },
  {
    "text": "uses reflection the first time a new uh new types being serialized to find all of the properties on there to find all",
    "start": "672200",
    "end": "678200"
  },
  {
    "text": "of the Json attributes and figure out how it's going to serialize and deserialize that thing now that work happens uh in historically at least",
    "start": "678200",
    "end": "685040"
  },
  {
    "text": "happens at runtime and it's a small performance penalty that first time that type is serialized with Source",
    "start": "685040",
    "end": "690200"
  },
  {
    "text": "generators because they have the same information at compile time that can run now ahead of time during compilation so",
    "start": "690200",
    "end": "697440"
  },
  {
    "text": "the source generator can inspect the code inspect all of the types that have Json attributes and figure out how it",
    "start": "697440",
    "end": "702720"
  },
  {
    "text": "would serialize those to and from Json and spit out the code needed to do that ahead of time at compilation so there's",
    "start": "702720",
    "end": "708680"
  },
  {
    "text": "no longer a runtime cost if you use the source generator for Json serialization now this isn't a full",
    "start": "708680",
    "end": "714920"
  },
  {
    "start": "713000",
    "end": "845000"
  },
  {
    "text": "session on like compiler Theory but I do want to highlight the compiler pipeline that Ros has it's a pretty familiar",
    "start": "714920",
    "end": "720480"
  },
  {
    "text": "pipeline to most compilers the first phase is paing so ultimately you know source files are just text the compiler",
    "start": "720480",
    "end": "726880"
  },
  {
    "text": "needs to interpret that and work out what are the language keywords are in here what are the structures and the",
    "start": "726880",
    "end": "732279"
  },
  {
    "text": "Declarations that are occurring within that code what's the syntactic and the semantic meaning that's being defined in there so pausing is that process and",
    "start": "732279",
    "end": "739040"
  },
  {
    "text": "ultimately it's going to build up something that we'll look at in a moment called a syntax tree the other part is identifying all of the symbols that we",
    "start": "739040",
    "end": "745279"
  },
  {
    "text": "Define in our code all of the types and the properties and the methods and things um including those that we import",
    "start": "745279",
    "end": "750480"
  },
  {
    "text": "from new get packages and also binding those to all of the other components in",
    "start": "750480",
    "end": "755519"
  },
  {
    "text": "our code so what is the uh type of a resulting expression in our code what is the type of a variable binding that",
    "start": "755519",
    "end": "762040"
  },
  {
    "text": "information back to the symbols and the Final Phase is emitting the IL code so most uh C and net applications vb.net F",
    "start": "762040",
    "end": "770800"
  },
  {
    "text": "by default will compile to I code Intermediate Language I is this Middle",
    "start": "770800",
    "end": "776000"
  },
  {
    "text": "Ground between the high level C code that we write dayto day and the lowlevel machine code and what's nice about it is",
    "start": "776000",
    "end": "781519"
  },
  {
    "text": "it's entirely crossplatform so if we compile a dll on a Windows machine we can still execute that on a Linux",
    "start": "781519",
    "end": "788160"
  },
  {
    "text": "machine because the I code is only actually interpreted to the ex the architecture and the platform by the run",
    "start": "788160",
    "end": "795240"
  },
  {
    "text": "time when it's first needed so this is called thej in time compilation process just in time because methods only get",
    "start": "795240",
    "end": "801279"
  },
  {
    "text": "compiled as they're needed and accessed now of course uh more recently it's becoming quite popular to uh consider",
    "start": "801279",
    "end": "807720"
  },
  {
    "text": "doing ahead of time compilation and in that scenario the jit is not involved we don't just in time compile we compile",
    "start": "807720",
    "end": "813320"
  },
  {
    "text": "our code directly into machine code for a particular Target architecture um so in that scenario the IL phase would be",
    "start": "813320",
    "end": "820040"
  },
  {
    "text": "uh not required because we'd be going straight through to the actual runtime code so the rosin API includes um",
    "start": "820040",
    "end": "827600"
  },
  {
    "text": "various different sort of API levels that kind of roughly align with those compiler pipeline phases and this is",
    "start": "827600",
    "end": "832920"
  },
  {
    "text": "what gives us access to those different capabilities and those different types of information that the compiler builds",
    "start": "832920",
    "end": "838120"
  },
  {
    "text": "up about code over time um we're specifically going to be focusing on syntax tree API uh for the rest of the",
    "start": "838120",
    "end": "845920"
  },
  {
    "start": "845000",
    "end": "1067000"
  },
  {
    "text": "session so what are syntax trees syntax trees are basically the",
    "start": "845920",
    "end": "852320"
  },
  {
    "text": "result of that paing uh and Analysis phase that the compiler is going through when it first reads our code so as I say",
    "start": "852320",
    "end": "858120"
  },
  {
    "text": "cop files are nothing more than just a text document they contain text it just so happens that it conforms to",
    "start": "858120",
    "end": "863600"
  },
  {
    "text": "particular specifications that make it valid C so the the uh the compiler first",
    "start": "863600",
    "end": "869320"
  },
  {
    "text": "job is to pause all of the individual elements in there into the tokens that make up that file so it's things like",
    "start": "869320",
    "end": "875519"
  },
  {
    "text": "identifying all of the keywords uh the language keywords that have been defined and used all of the identifiers and",
    "start": "875519",
    "end": "881040"
  },
  {
    "text": "things that people have used so all of the Declarations of things that occur uh within that code",
    "start": "881040",
    "end": "886800"
  },
  {
    "text": "base ultimately then it builds up this tree representation which is the the syntactic structure of the code so it's",
    "start": "886800",
    "end": "893880"
  },
  {
    "text": "represented by three main elements there are nodes which basically are the con language constructs um if you will so",
    "start": "893880",
    "end": "900920"
  },
  {
    "text": "there's a construct a declaration for what a class looks like what a property looks like what a method looks like",
    "start": "900920",
    "end": "906759"
  },
  {
    "text": "those are the higher level Concepts and they're defined as syntax nodes syntax nodes can have child nodes below them",
    "start": "906759",
    "end": "912880"
  },
  {
    "text": "that belong logically within them um and they can also have tokens attached to them that provide additional information",
    "start": "912880",
    "end": "919800"
  },
  {
    "text": "so by default a class declaration syntax node uh doesn't have an accessibility",
    "start": "919800",
    "end": "925040"
  },
  {
    "text": "modifier applied to it but you can add one by adding a token and in this case that's just adding the public keyword or",
    "start": "925040",
    "end": "930639"
  },
  {
    "text": "the internal keyword at the start of that declaration and so those pieces of information get picked up by the",
    "start": "930639",
    "end": "936600"
  },
  {
    "text": "compiler and attach as tokens within the tree tokens are essentially the Terminator in the tree they don't have",
    "start": "936600",
    "end": "941720"
  },
  {
    "text": "children directly but they do have something called trivia below them um and this is optional additional",
    "start": "941720",
    "end": "947040"
  },
  {
    "text": "information that isn't relevant for compiling the code um but it's information that is is contain within",
    "start": "947040",
    "end": "953399"
  },
  {
    "text": "the file so it's things like where is the white space in the file what are the uh new Lines within the files for how",
    "start": "953399",
    "end": "959079"
  },
  {
    "text": "it's formatted and it's also things like code comments or XML documentation comments those aren't needed to compile",
    "start": "959079",
    "end": "964920"
  },
  {
    "text": "the code um but they are useful pieces of information contained within the C file and therefore they get represented",
    "start": "964920",
    "end": "971120"
  },
  {
    "text": "in the syntax tree so once we have a syntax tree it gives us this capability to interact",
    "start": "971120",
    "end": "977440"
  },
  {
    "text": "with our code on a more deep and meaningful level because it's no longer just a text file we now have this data",
    "start": "977440",
    "end": "982959"
  },
  {
    "text": "structure that represents all of the elements that we've defined within our program and so if we want to start using",
    "start": "982959",
    "end": "988720"
  },
  {
    "text": "those apis we can do some slightly Advanced things with them now there's two important points to highlight about",
    "start": "988720",
    "end": "993920"
  },
  {
    "text": "syntax trees before I go on so the first is that all of the nodes the tokens the tree itself um are immutable structures",
    "start": "993920",
    "end": "1001000"
  },
  {
    "text": "it's done in as optimized way as possible um but the main reason it's done this way is to ensure Fred safety",
    "start": "1001000",
    "end": "1007160"
  },
  {
    "text": "um because the compiler and all of its apis and all of the state about the syntax tree uh may be accessed by",
    "start": "1007160",
    "end": "1013000"
  },
  {
    "text": "multiple threads if you imagine an ID it's checking lots and lots of things about our code at the same time um we",
    "start": "1013000",
    "end": "1018279"
  },
  {
    "text": "don't want any changes to that state to cause sort of Fring issues so anytime you work with its elements if you make",
    "start": "1018279",
    "end": "1023600"
  },
  {
    "text": "changes to them you create a copy with the changes applied the other important fact is that it's round triable so we",
    "start": "1023600",
    "end": "1030160"
  },
  {
    "text": "can we can pause a c Source far um and as a result we get the syntax tree that represents it and because we've got that",
    "start": "1030160",
    "end": "1037079"
  },
  {
    "text": "syntax tree including things like the trivia about the white space and the new lines and the comments Etc we can",
    "start": "1037079",
    "end": "1042558"
  },
  {
    "text": "entirely reconstruct a c source file directly from that syntax tree so that's kind of nice we can take a C file pause",
    "start": "1042559",
    "end": "1049480"
  },
  {
    "text": "it and then return it to a C file what we can also do is use the API directly to in memory Define a syntax tree and",
    "start": "1049480",
    "end": "1056799"
  },
  {
    "text": "then have that um emit a C file that represents what that um describes um and",
    "start": "1056799",
    "end": "1062559"
  },
  {
    "text": "so that's what we're going to basically see as we move through the rest of this session so to work with this inv Visual",
    "start": "1062559",
    "end": "1069240"
  },
  {
    "start": "1067000",
    "end": "1112000"
  },
  {
    "text": "Studio I want to show you a couple of things just to help visualize this this concept um so there is some tooling and",
    "start": "1069240",
    "end": "1074640"
  },
  {
    "text": "visual studio uh to help us with that so this slide is probably a little small but hopefully you can kind of see it",
    "start": "1074640",
    "end": "1080799"
  },
  {
    "text": "I'll describe what it's showing um what we're doing here is adding in a workload for the visual studio extensions",
    "start": "1080799",
    "end": "1086480"
  },
  {
    "text": "development and the reason I'm adding that is because on the right hand side here you can see it includes the net compiler platform SDK so that's the",
    "start": "1086480",
    "end": "1093400"
  },
  {
    "text": "Microsoft name for Roslin so we're adding in the components they needed to work with um Roslin and uh view some of",
    "start": "1093400",
    "end": "1101240"
  },
  {
    "text": "its features directly in the IDE the other thing that I've added um for the purpose of the next demo is I thing",
    "start": "1101240",
    "end": "1106559"
  },
  {
    "text": "called the dgml editor this is just an individual component you can add in and you'll see what it does in a moment so",
    "start": "1106559",
    "end": "1112679"
  },
  {
    "start": "1112000",
    "end": "1335000"
  },
  {
    "text": "let's take a quick look at a demo of what it looks like to visualize um syntax",
    "start": "1112679",
    "end": "1119039"
  },
  {
    "text": "trees so I've got a very boring un exciting uh program file here um so this",
    "start": "1119039",
    "end": "1125559"
  },
  {
    "text": "is an entire program it's in a names space called examples we have a program class main method creates an instance of",
    "start": "1125559",
    "end": "1131559"
  },
  {
    "text": "a data type writes some data app the code itself is unexciting and un um uninteresting um but it hopefully is",
    "start": "1131559",
    "end": "1137640"
  },
  {
    "text": "basic enough to demonstrate uh the concepts that I want to show so the first thing I want to do is visualize",
    "start": "1137640",
    "end": "1143000"
  },
  {
    "text": "what the syntax tree for this code looks like and I can do that because I've added in that um net compiler platform",
    "start": "1143000",
    "end": "1149039"
  },
  {
    "text": "SDK feature I can open up this other window here called syntax visualizer and I'm hoping this is going",
    "start": "1149039",
    "end": "1155799"
  },
  {
    "text": "to be big enough if I pin it uh big enough on the screen you see um so if I",
    "start": "1155799",
    "end": "1162159"
  },
  {
    "text": "now open this and click anywhere within the code you'll see that this side refreshes here and I'm just going to",
    "start": "1162159",
    "end": "1167760"
  },
  {
    "text": "collapse this down so we can see what it's showing so at the top here we've got this logical thing called a",
    "start": "1167760",
    "end": "1172799"
  },
  {
    "text": "compilation unit that just logically represents a C file it's an input to the to the um to the compiler and you can",
    "start": "1172799",
    "end": "1179799"
  },
  {
    "text": "see indented under that because it's part logically of that um as a as a child we have this file scope namespace",
    "start": "1179799",
    "end": "1186720"
  },
  {
    "text": "declaration and we can see that we've got a file scope namespace declaration at the top of this uh file and that's represented here so this blue represents",
    "start": "1186720",
    "end": "1193600"
  },
  {
    "text": "a node so this is a sort of language construct uh in the syntax Tree in",
    "start": "1193600",
    "end": "1198679"
  },
  {
    "text": "indented below that we have more elements and that's indented because logically a file scope namespace declaration encompasses everything",
    "start": "1198679",
    "end": "1205480"
  },
  {
    "text": "within it in the file below it so everything belongs to this namespace and therefore is a child of it in the syntax",
    "start": "1205480",
    "end": "1210919"
  },
  {
    "text": "tree and so we can see that this far scope namespace declaration here is made up of this namespace keyword which if I",
    "start": "1210919",
    "end": "1217159"
  },
  {
    "text": "click on this here highlights over here tells us you know the characters position in the file as well and you can",
    "start": "1217159",
    "end": "1222840"
  },
  {
    "text": "see that this namespace keyword which is a language keyword therefore it's a token in the tree which is green um also",
    "start": "1222840",
    "end": "1228640"
  },
  {
    "text": "includes trailing Whit space which is the space character that follows it so you can see the tree is very you know",
    "start": "1228640",
    "end": "1234240"
  },
  {
    "text": "verbosely describing our code here we then have this identifier name uh syntax node and in that they have a token which",
    "start": "1234240",
    "end": "1241000"
  },
  {
    "text": "is The Logical token that represents the identifier for the name of this so this isn't a keyword this isn't something uh",
    "start": "1241000",
    "end": "1246520"
  },
  {
    "text": "C specifically knows about it's something we've defined as part of our declaration it's followed by a semicolon token that has here End of Line trivia",
    "start": "1246520",
    "end": "1254640"
  },
  {
    "text": "that is a traditional sort of pattern that we would have a new line after a semicolon and then it goes into the",
    "start": "1254640",
    "end": "1259760"
  },
  {
    "text": "class declaration if I just expand the internal keyword of that class declaration you can see this one has",
    "start": "1259760",
    "end": "1264799"
  },
  {
    "text": "leading trivia which is this a new line here and then trailing trivia which is the space after it so that's a a way",
    "start": "1264799",
    "end": "1272200"
  },
  {
    "text": "that you can kind of start to understand syntax trees and what they look like um in representing your code uh because I",
    "start": "1272200",
    "end": "1278240"
  },
  {
    "text": "installed that dgml editor the way other thing I can do here is right click on this um this particular node and say",
    "start": "1278240",
    "end": "1283799"
  },
  {
    "text": "view directed syntax graph and if I do that I'm going to get a new window which",
    "start": "1283799",
    "end": "1289120"
  },
  {
    "text": "I'll zoom into and this really is just a graph-based representation of that same tree it's just a little bit easier to",
    "start": "1289120",
    "end": "1295480"
  },
  {
    "text": "sort of see the in a visual nature of the entire uh tree and you you see that's a relatively simple C file",
    "start": "1295480",
    "end": "1301360"
  },
  {
    "text": "there's only a few lines of code in there but already we've got a very complex and Rich syntax tree that knows",
    "start": "1301360",
    "end": "1307080"
  },
  {
    "text": "everything about what's in that file so again we can see you know at the top of this we have this filos scope namespace",
    "start": "1307080",
    "end": "1312559"
  },
  {
    "text": "declaration it's got some children one of those is the namespace token one of them is the identifier and we can see",
    "start": "1312559",
    "end": "1318279"
  },
  {
    "text": "the uh trailing Whit space in Gray and leading Whit space um in white here in these boxes so if you want to start",
    "start": "1318279",
    "end": "1324880"
  },
  {
    "text": "learning what the syntax tree and what the different nodes are um this is one way you can go about",
    "start": "1324880",
    "end": "1331200"
  },
  {
    "start": "1335000",
    "end": "1654000"
  },
  {
    "text": "that so I'm going to talk a little bit more now about the Practical use case of of some of this information so um the",
    "start": "1335320",
    "end": "1341799"
  },
  {
    "text": "the reason I started looking at this API and and star and learning about things like syntax trees was that through my",
    "start": "1341799",
    "end": "1346880"
  },
  {
    "text": "work on uh the elastic search language client for.net um so this is something I sort of joined the team um about four",
    "start": "1346880",
    "end": "1353480"
  },
  {
    "text": "years ago um and took over the language client I've moved on from there but one of the jobs I had during those kind of",
    "start": "1353480",
    "end": "1358799"
  },
  {
    "text": "two years that I was on the team was thinking about how we would move to the next generation of client so elastic",
    "start": "1358799",
    "end": "1364919"
  },
  {
    "text": "search itself is a very rich uh service and it's entirely managed through rest-based apis so everything you can do",
    "start": "1364919",
    "end": "1371440"
  },
  {
    "text": "with elastic search you do through that rest API that's includ you know things like indexing documents and searching them back but it's also managing the",
    "start": "1371440",
    "end": "1377760"
  },
  {
    "text": "server um checking its Health setting up how you want to map data Etc and over",
    "start": "1377760",
    "end": "1383279"
  },
  {
    "text": "time that's grown from a small number of tens of endpoints to well over 420 endpoints now um and to represent all of",
    "start": "1383279",
    "end": "1391159"
  },
  {
    "text": "the data in and out of the endpoints um there's over 4,000 data structures involved all of the different requests",
    "start": "1391159",
    "end": "1396799"
  },
  {
    "text": "and responses all of the sub objects that they may need to contain there's some fairly Rich Json um structures that",
    "start": "1396799",
    "end": "1403360"
  },
  {
    "text": "you might need to send in and out of elastic search including things are like all the specific queries and aggregation",
    "start": "1403360",
    "end": "1408640"
  },
  {
    "text": "you can perform and so one of the problems for the V7 client which is the previous version of the client and",
    "start": "1408640",
    "end": "1414360"
  },
  {
    "text": "elastic search um was that it was almost entirely handwritten small bit of Cen but mostly",
    "start": "1414360",
    "end": "1420080"
  },
  {
    "text": "handwritten now in the early days of elastic search uh sort of when the client was first created 10 even 11",
    "start": "1420080",
    "end": "1425760"
  },
  {
    "text": "years ago um that wasn't too much of a headache because there were only tens of end points and it wasn't evolving that",
    "start": "1425760",
    "end": "1432120"
  },
  {
    "text": "quickly because it was a small team but now elastic search is a much larger company we've got a huge number of",
    "start": "1432120",
    "end": "1437200"
  },
  {
    "text": "people working on the product adding new features and the API evolves very rapidly in each uh minor release and",
    "start": "1437200",
    "end": "1443080"
  },
  {
    "text": "that means that for a single language client developer it was very hard to keep Pace just with those API changes just checking what's gone into the",
    "start": "1443080",
    "end": "1449279"
  },
  {
    "text": "server and remodeling that on the client so that you can interact with the API and all the new endpoints or changes to",
    "start": "1449279",
    "end": "1455200"
  },
  {
    "text": "endpoints um it also meant there's a lot of just maintenance work just keeping track of those things and it meant that",
    "start": "1455200",
    "end": "1460880"
  },
  {
    "text": "a lot of my time wasn't spent doing what I wanted to do which was value ad features to make it easier to work with",
    "start": "1460880",
    "end": "1465919"
  },
  {
    "text": "the client to document things better wasn't really happening because I was spending all my time just kind of keeping Pace with elastic search itself",
    "start": "1465919",
    "end": "1473360"
  },
  {
    "text": "so for V8 we needed to address this and one of the things we wanted to do is think about what the new generation of a language client for elastic uh would",
    "start": "1473360",
    "end": "1480039"
  },
  {
    "text": "look like and the main thing is that we decided that they needed to be co-generated we needed to automate a lot",
    "start": "1480039",
    "end": "1485440"
  },
  {
    "text": "of the um code writing part and allow us to focus more on the higher level",
    "start": "1485440",
    "end": "1491039"
  },
  {
    "text": "Concepts the the usability of the API the documentation uh thinking about features like helpers that can make it",
    "start": "1491039",
    "end": "1496919"
  },
  {
    "text": "easier to do certain things within in elastic and so we decided we'd do this based on a formal spec and we'll get",
    "start": "1496919",
    "end": "1502880"
  },
  {
    "text": "more into that spec later but for now imagine that you're given this sort of",
    "start": "1502880",
    "end": "1507960"
  },
  {
    "text": "when you go back to work uh next week your your manager comes to you they say we're going to give you this J Json spec",
    "start": "1507960",
    "end": "1513520"
  },
  {
    "text": "don't worry too much about the structure of it but it's going to Define some types that you'll need to Define in C and the properties that they have and",
    "start": "1513520",
    "end": "1519760"
  },
  {
    "text": "various information that we want you to generate what are your options for code generation the most simple that comes to",
    "start": "1519760",
    "end": "1526200"
  },
  {
    "text": "most people and it's a valid approach is just using string like you could just logically build up a string that represents the entire contents of the C",
    "start": "1526200",
    "end": "1532679"
  },
  {
    "text": "file um you could do this with string Builder to be slightly more efficient and you can have placeholders for anything that's kind of varies so you",
    "start": "1532679",
    "end": "1539480"
  },
  {
    "text": "would logically Define you know what it looks like to define a class and maybe have a placeholder for the name um and",
    "start": "1539480",
    "end": "1545520"
  },
  {
    "text": "that would just be a string that you can catenate with the next part of the the class definition that's fine it works um",
    "start": "1545520",
    "end": "1551720"
  },
  {
    "text": "it's not particularly efficient but code generation doesn't necessarily need to be um but it is open to sort of error if",
    "start": "1551720",
    "end": "1557360"
  },
  {
    "text": "you make a typo in the the string you're not going to get any sort of identifi identification that you've made a",
    "start": "1557360",
    "end": "1563360"
  },
  {
    "text": "mistake until you generate the code and then try and compile the generated code so it doesn't give you a great feedback",
    "start": "1563360",
    "end": "1569480"
  },
  {
    "text": "templates is kind of the The Next Step it's a slightly better scenario because now you know once you get your template",
    "start": "1569480",
    "end": "1575120"
  },
  {
    "text": "that represents what your C file and a class needs to look like logically you can just fill in the blanks by passing",
    "start": "1575120",
    "end": "1581000"
  },
  {
    "text": "in some kind of model so that could be something like T4 or even something like razor in the V7 client the lowlevel",
    "start": "1581000",
    "end": "1587120"
  },
  {
    "text": "components that we did code used razor which is an unusual use case for it so instead of like razor where it's",
    "start": "1587120",
    "end": "1593279"
  },
  {
    "text": "traditionally used in MVC for views and models that you're rendering to a web page for us the view was the",
    "start": "1593279",
    "end": "1599240"
  },
  {
    "text": "representation of the structure of a C file so we'd have you know public class and then a placeholder that would get",
    "start": "1599240",
    "end": "1605600"
  },
  {
    "text": "filled in from the model uh the model we built up from the information that's contained within the",
    "start": "1605600",
    "end": "1611520"
  },
  {
    "text": "spec and then we just let the model binding of Razer kick in and produce the resulting file that we needed um that's",
    "start": "1611520",
    "end": "1618720"
  },
  {
    "text": "kind of nice it does avoid some of the the risk of repetition it's a little bit easier to to code against because you",
    "start": "1618720",
    "end": "1624480"
  },
  {
    "text": "can see the structure of the thing that you're about to generate rather than just having lots of strings that you have to try and piece together in your",
    "start": "1624480",
    "end": "1630320"
  },
  {
    "text": "mind the third option and it's not necessarily the the definitive list here but the third option that I thought",
    "start": "1630320",
    "end": "1635559"
  },
  {
    "text": "about was Roslin so I learn I knew Roslin existed I knew it had apis could these be a solution and so just as we",
    "start": "1635559",
    "end": "1642200"
  },
  {
    "text": "can pass that c source file to the syntax tree as I said we can create a syntax Tree in memory so why not do that",
    "start": "1642200",
    "end": "1647760"
  },
  {
    "text": "why not use its apis to build up a valid syntax tree and then have it produce the C",
    "start": "1647760",
    "end": "1653480"
  },
  {
    "text": "file and so I'm going to give you a quick demo of what that looks like um in",
    "start": "1653480",
    "end": "1659440"
  },
  {
    "start": "1654000",
    "end": "2131000"
  },
  {
    "text": "code so if I come over to uh save this um if I come over to this file so this",
    "start": "1660559",
    "end": "1666919"
  },
  {
    "text": "file normally this is a horrendous font size but on a normal screen this pretty much fits on one screen and it's the",
    "start": "1666919",
    "end": "1672360"
  },
  {
    "text": "entire code needed to code generate something from a basic spec so I'll go through what most of this is this first",
    "start": "1672360",
    "end": "1678399"
  },
  {
    "text": "portion actually here all these first lines are all are just about reading the spec itself the actual Cogen is only a",
    "start": "1678399",
    "end": "1683640"
  },
  {
    "text": "few lines here so the spec that I'm using is a very cutdown version of our",
    "start": "1683640",
    "end": "1688799"
  },
  {
    "text": "elastic search specification that we'll go into more detail of later but all this spec does is just Define some types",
    "start": "1688799",
    "end": "1694480"
  },
  {
    "text": "that we want to code generate and the properties that they have so the only information we know about the types is what the type name should be and what",
    "start": "1694480",
    "end": "1701000"
  },
  {
    "text": "its properties are for a property we obviously need to know what is the type of the property and what's the name so that's like the Bare Bones smallest spec",
    "start": "1701000",
    "end": "1707640"
  },
  {
    "text": "that we can sort of ort of come up with the project itself um has a package",
    "start": "1707640",
    "end": "1712679"
  },
  {
    "text": "reference here to this uh this is yet another name that you need to know about so this brings in the Roslin apis for",
    "start": "1712679",
    "end": "1719039"
  },
  {
    "text": "the compiler platform um but it's under this Microsoft code analysis C uh nugget package so this lets us work with C",
    "start": "1719039",
    "end": "1726559"
  },
  {
    "text": "files and the syntax trees in code so the first Cod piece of code here",
    "start": "1726559",
    "end": "1731840"
  },
  {
    "text": "really as I say is just reading the Json far deserializing it into this strongly tight representation of what the spec",
    "start": "1731840",
    "end": "1738360"
  },
  {
    "text": "file defines which is just a collection of types each type has a name and the collection of properties the property have a type and a name so that bits",
    "start": "1738360",
    "end": "1745720"
  },
  {
    "text": "pretty basic um but the actual generation code starts here so this is where we start to create the syntax tree",
    "start": "1745720",
    "end": "1752120"
  },
  {
    "text": "pieces so in this case what we do is for all of the types we do a select here and for each type we're going to generate a",
    "start": "1752120",
    "end": "1758200"
  },
  {
    "text": "class uh or class declaration so this result here is a class declaration syntax array so it's a set of",
    "start": "1758200",
    "end": "1764519"
  },
  {
    "text": "declarations about all of the classes we want to produce create class down here it's pretty straightforward it takes the",
    "start": "1764519",
    "end": "1770559"
  },
  {
    "text": "name of the class and its properties and then we call this Factory method here to start defining that so this is available",
    "start": "1770559",
    "end": "1778039"
  },
  {
    "text": "as you can see it's part of the syntax Factory uh which is the preferred way of building up a syntax tree and its nodes",
    "start": "1778039",
    "end": "1783880"
  },
  {
    "text": "and its tokens because it enforces constraints around how you model those things um you can actually new up a",
    "start": "1783880",
    "end": "1789919"
  },
  {
    "text": "class declaration syntax object yourself if you want to but it's recommended that you use the factory this is available to",
    "start": "1789919",
    "end": "1795480"
  },
  {
    "text": "me because I've got the static using up here for the Sy tax Factory so I can just call this method here so what this",
    "start": "1795480",
    "end": "1801960"
  },
  {
    "text": "does is say Okay I want to define a class declaration for a class declaration the minimum thing we need to provide is the identifier for the class",
    "start": "1801960",
    "end": "1808200"
  },
  {
    "text": "and so in this case that identifier is coming in as the string here that we added to this ident syntax token this",
    "start": "1808200",
    "end": "1814240"
  },
  {
    "text": "identifier this gives me back a class declaration syntax as I said uh we need to then provide any additional tokens",
    "start": "1814240",
    "end": "1820640"
  },
  {
    "text": "that modify the Declaration so in this case I'm adding a modifier which is the public keyword token so this says Okay I",
    "start": "1820640",
    "end": "1827320"
  },
  {
    "text": "want this to be a public class declaration next I iterate for all the properties for each property I call add",
    "start": "1827320",
    "end": "1833559"
  },
  {
    "text": "members to add members to that class declaration in this case our member is a property declaration again this is",
    "start": "1833559",
    "end": "1838760"
  },
  {
    "text": "coming from the syntax Factory this needs an identify name for the type and an identify token for the uh the type uh",
    "start": "1838760",
    "end": "1845720"
  },
  {
    "text": "for the name of the property again I'm going to make it public here and I need to define the accesses that we want on",
    "start": "1845720",
    "end": "1850919"
  },
  {
    "text": "this property as well in this case the get accessor with a semicolon token after it and then the set accessor so it's quite a verose way of defining what",
    "start": "1850919",
    "end": "1858159"
  },
  {
    "text": "the code needs to be in the syntax tree I will point out I'm using these add methods here um there is an alternative",
    "start": "1858159",
    "end": "1864080"
  },
  {
    "text": "which you can use which is something like add sorry with um modifiers or with members if I do with members or is that",
    "start": "1864080",
    "end": "1870320"
  },
  {
    "text": "not one with access a list uh for example and you can see what this takes is this access a list syntax this",
    "start": "1870320",
    "end": "1877000"
  },
  {
    "text": "approach is just results in more of a Bose code so I tend to avoid the with methods and prefer the ad methods",
    "start": "1877000",
    "end": "1882080"
  },
  {
    "text": "because they're just um Tura for defining code the other important Point here is this reassignment so this code",
    "start": "1882080",
    "end": "1887960"
  },
  {
    "text": "would be valid or looks valid if I do that um I'm adding members to this class declaration I'm returning it the problem",
    "start": "1887960",
    "end": "1894720"
  },
  {
    "text": "here is the immutability so because everything like a syntax node a class declaration syntax is immutable when we",
    "start": "1894720",
    "end": "1900880"
  },
  {
    "text": "call add members we don't modify that instance referenced by this variable we get a new one this class declaration",
    "start": "1900880",
    "end": "1907159"
  },
  {
    "text": "syntax we get back is a new copy with the change applied with the new member added to it and so if I want to be able",
    "start": "1907159",
    "end": "1912279"
  },
  {
    "text": "to return that later on I need to reassign my local variable each time remembering that we're working with immutable types here",
    "start": "1912279",
    "end": "1918399"
  },
  {
    "text": "after defining the class declaration up here we get an array of those we then create the file scope namespace declaration and to that we add as",
    "start": "1918399",
    "end": "1924960"
  },
  {
    "text": "members all of those class declarations and that's all we need for a minimum scenario here next thing I do is open a",
    "start": "1924960",
    "end": "1930600"
  },
  {
    "text": "stream to where I want to generate my file and then you can generate uh to a file from any node in the tree so here",
    "start": "1930600",
    "end": "1936919"
  },
  {
    "text": "I'm just using that namespace uh declaration and I'm calling right to to the Stream So if I run this code",
    "start": "1936919",
    "end": "1943480"
  },
  {
    "text": "hopefully it will run it should be pretty quick I'm going to open up uh Visual Studio code here this is the uh",
    "start": "1943480",
    "end": "1949240"
  },
  {
    "text": "code window in the location where I'm generating to minimize that but after",
    "start": "1949240",
    "end": "1954480"
  },
  {
    "text": "that runs we get our generated file and if I jump into that file you can see it's not exactly what we were hoping for",
    "start": "1954480",
    "end": "1960600"
  },
  {
    "text": "but it's close so we have we do have a namespace code gen we have the public class defined we have the pieces that",
    "start": "1960600",
    "end": "1966639"
  },
  {
    "text": "we'd expect to see uh but this is not valid C A paer can't pause this because there's no spaces it doesn't know what's",
    "start": "1966639",
    "end": "1972080"
  },
  {
    "text": "a keyword and what's an identifier and what's in there the problem here is that we haven't defined any trivia on our",
    "start": "1972080",
    "end": "1977519"
  },
  {
    "text": "tree so I go back here there's a couple of options to this well there's three main options one is that we could add trivia",
    "start": "1977519",
    "end": "1984159"
  },
  {
    "text": "to any token that we want so we can do with leading trivia here on our uh public token and we can add a new line",
    "start": "1984159",
    "end": "1990480"
  },
  {
    "text": "before or a space after it with a trailing trivia that would obviously get very verose because every space every",
    "start": "1990480",
    "end": "1996639"
  },
  {
    "text": "new line then would need to be defined another option uh that's really simple and just gets us going for demo purposes",
    "start": "1996639",
    "end": "2003240"
  },
  {
    "text": "is we can call normalize whites space before we write this out and this will add basic whites space rules that cop",
    "start": "2003240",
    "end": "2008600"
  },
  {
    "text": "has around spaces after tokens uh new lines after semicolons Etc it's not very",
    "start": "2008600",
    "end": "2014240"
  },
  {
    "text": "rich it's good for sort of demo um you tend to evolve from this to using a formatter where you can provide specific",
    "start": "2014240",
    "end": "2019679"
  },
  {
    "text": "rules for how you format your code and that can even be driven by passing in an edit config file that contains the",
    "start": "2019679",
    "end": "2025120"
  },
  {
    "text": "formatting that rules that you want to apply to your codebase as well but I'm just going to stick with this one for",
    "start": "2025120",
    "end": "2030559"
  },
  {
    "text": "now and I will Rerun did I close the program I bet I didn't no I did uh and",
    "start": "2030559",
    "end": "2036840"
  },
  {
    "text": "I'll run this again and this time if I go to the output directory it's a bit too huge that um if",
    "start": "2036840",
    "end": "2043240"
  },
  {
    "text": "you can see there we have a valid C file now we have a class we have a property on there we have an empty second class",
    "start": "2043240",
    "end": "2049118"
  },
  {
    "text": "here and it's it's good enough this would pa pa and be valid C that the compiler can can run so that's the the",
    "start": "2049119",
    "end": "2056800"
  },
  {
    "text": "very basics of things um I'm going to copy this code and just show you a big cheat that's really useful um trying to",
    "start": "2056800",
    "end": "2062760"
  },
  {
    "text": "understand how you build up this Roslin work with this rosin API to write the code is quite painful if you first start doing this this site is where I spent a",
    "start": "2062760",
    "end": "2069440"
  },
  {
    "text": "lot of my time in the early days rosener your websites. net so what this lets us do is pass paste in some valid C code",
    "start": "2069440",
    "end": "2076720"
  },
  {
    "text": "and then just go down and click a button once it runs it will give us um the rosling code using the rosling apis",
    "start": "2076720",
    "end": "2083040"
  },
  {
    "text": "that's needed to generate that which is a big time saer the main difference here it's longer than what I wrote myself and",
    "start": "2083040",
    "end": "2088240"
  },
  {
    "text": "you can see that's because it prefers the with methods and so you end up with this create with members which needs a",
    "start": "2088240",
    "end": "2094079"
  },
  {
    "text": "list of members which is Created from a new array so it's not particularly efficient code it's not tur enough for",
    "start": "2094079",
    "end": "2100079"
  },
  {
    "text": "what I like but it does functionally work um and so that's one way that you can kind of say well here's a snippet of",
    "start": "2100079",
    "end": "2106119"
  },
  {
    "text": "something that I want to be able to code generate in its sort of templated form let me see what apis I need to call what",
    "start": "2106119",
    "end": "2111880"
  },
  {
    "text": "declarations I need to create to do that we could even if we want to ask it to preserve orig original Whit space here",
    "start": "2111880",
    "end": "2118000"
  },
  {
    "text": "and now you can see it's going to be way longer and that's because it now manually puts all that trivia in and this just is an example of why you",
    "start": "2118000",
    "end": "2124040"
  },
  {
    "text": "wouldn't really want to be defining trivia manually in your code yourself unless you're sort of a glutton for",
    "start": "2124040",
    "end": "2130680"
  },
  {
    "text": "punishment so that's um generating uh some code and basic",
    "start": "2130680",
    "end": "2137359"
  },
  {
    "start": "2131000",
    "end": "2622000"
  },
  {
    "text": "examples so the next thing I want to do is is then talk about the practicalities of what it looked like to start working",
    "start": "2139320",
    "end": "2144599"
  },
  {
    "text": "on generating the net client because it's obviously a bit more complex than that little example I showed you so the",
    "start": "2144599",
    "end": "2150119"
  },
  {
    "text": "first thing that we need to think about as a team was what spec have we got that defines elastic search we need to know",
    "start": "2150119",
    "end": "2155480"
  },
  {
    "text": "about all of its endpoints and all of its types uh that are sent in and out to those endpoints in order to be able to",
    "start": "2155480",
    "end": "2160800"
  },
  {
    "text": "Define you know a a cent language client that lets you interact with those so the first all because this is a rest based",
    "start": "2160800",
    "end": "2166560"
  },
  {
    "text": "API the first thing that might start coming to people's minds is open API right this is a spec uh that's already",
    "start": "2166560",
    "end": "2171760"
  },
  {
    "text": "sort of a way of specifying restful endpoints already and it's probably a good choice for simple scenarios um at",
    "start": "2171760",
    "end": "2178560"
  },
  {
    "text": "the time this project kicked off which is over four years ago um open API was just too limited to express everything",
    "start": "2178560",
    "end": "2183800"
  },
  {
    "text": "we needed to about elastic searches API our main problem was not really defining endpoints um themselves it was defining",
    "start": "2183800",
    "end": "2191119"
  },
  {
    "text": "those those types that go in and out as as the search requests and search response uh sorry the requests and the",
    "start": "2191119",
    "end": "2196599"
  },
  {
    "text": "uh response bodies because those are complex data structures some of them involve like polymorphic types there's",
    "start": "2196599",
    "end": "2202920"
  },
  {
    "text": "some sort of will quirks of um elastic search where it can take and receive a union of things um some of those are",
    "start": "2202920",
    "end": "2208960"
  },
  {
    "text": "really hard to Define and if you can imagine the idea of maintaining in yamal or Json manually 420 end points and",
    "start": "2208960",
    "end": "2215119"
  },
  {
    "text": "4,000 data structures it wouldn't be particularly fun so we as a team wanted something that was kind of a bit of a middle ground for us to work against and",
    "start": "2215119",
    "end": "2221560"
  },
  {
    "text": "we landed on typescript so typescript already has a typescript system that allows us to do things like static type",
    "start": "2221560",
    "end": "2227640"
  },
  {
    "text": "checking and it's designed and built to represent Json and JavaScript quite nicely there's a lot of tooling around",
    "start": "2227640",
    "end": "2233119"
  },
  {
    "text": "it um it includes features like inheritance and generics so we can Define these more complex uh Concepts",
    "start": "2233119",
    "end": "2239079"
  },
  {
    "text": "more easily in a sort of intermediate form that we can all work with it also has its own compiler platform apis as",
    "start": "2239079",
    "end": "2245720"
  },
  {
    "text": "well so that you can hook into its syntax tree and through its compiler pipeline as well and there's a library",
    "start": "2245720",
    "end": "2250960"
  },
  {
    "text": "called T morph that we relied upon uh to do some of the compilation at the end that we'll talk about so what does our",
    "start": "2250960",
    "end": "2257440"
  },
  {
    "text": "actual spec kind of look like this is a little outd little outdated now but it's still um kind of pretty relevant to how",
    "start": "2257440",
    "end": "2263400"
  },
  {
    "text": "I was generating things about a year or so ago so this in typescript represents a search request it's a search request",
    "start": "2263400",
    "end": "2270000"
  },
  {
    "text": "because it's logically going to be below a search namespace that we don't see here and it also has this meta",
    "start": "2270000",
    "end": "2275359"
  },
  {
    "text": "information that we attach in the uh the Cod comment here through these apps tags and these are things that our um",
    "start": "2275359",
    "end": "2281359"
  },
  {
    "text": "compiler for this um spec will know about and be able to use so in this case",
    "start": "2281359",
    "end": "2286680"
  },
  {
    "text": "it's defining the search request it's been elastic search since day one so hence zero onwards um it's a stable",
    "start": "2286680",
    "end": "2293240"
  },
  {
    "text": "API um that defines the Met information about the endpoint um and then we also have the request type itself so there's",
    "start": "2293240",
    "end": "2299960"
  },
  {
    "text": "various parts of a request that I want to talk about um on a request you can have path Parts which are in the URL you",
    "start": "2299960",
    "end": "2305680"
  },
  {
    "text": "can have query string data um and you can have obviously a body and elastic search uses all three elements in",
    "start": "2305680",
    "end": "2312200"
  },
  {
    "text": "various ways to give you different um options for how you perform a search or how you perform a particular operation",
    "start": "2312200",
    "end": "2318079"
  },
  {
    "text": "so in the case of search we have path parts and in this case we have a single path part named index it's optional",
    "start": "2318079",
    "end": "2323920"
  },
  {
    "text": "because of the question mark um and this is logically where we can um where elastic search lets you limit your",
    "start": "2323920",
    "end": "2330640"
  },
  {
    "text": "search to a particular index or set of indices um and so this is optional because you can perform a search against",
    "start": "2330640",
    "end": "2336520"
  },
  {
    "text": "everything and you don't need to to provide it um but if you want to limit to an index or data stream set then you can do so and so the way we've modeled",
    "start": "2336520",
    "end": "2343240"
  },
  {
    "text": "this in the typescript is we said well okay it's optional it's of type indices which itself is a union of either an",
    "start": "2343240",
    "end": "2349440"
  },
  {
    "text": "index name or a set of index names an array um we Define it explicitly there",
    "start": "2349440",
    "end": "2354480"
  },
  {
    "text": "with the Union in in C you probably say well you just have an array or a list and it can contain one or many things and that's kind of fine but here we're",
    "start": "2354480",
    "end": "2360560"
  },
  {
    "text": "being very explicit this API accepts one thing or many things as an option and then the index name itself is this kind",
    "start": "2360560",
    "end": "2367480"
  },
  {
    "text": "of Alias over the string um so it's not it Just represents a string logically um but it allows the code generators to",
    "start": "2367480",
    "end": "2373839"
  },
  {
    "text": "attach additional logic to that if they need to I'm going to skip over query parameters um the body here defines all",
    "start": "2373839",
    "end": "2380680"
  },
  {
    "text": "of the possible properties on the search request body um these are all optional you can see question mark so you don't",
    "start": "2380680",
    "end": "2385920"
  },
  {
    "text": "have to provide a body when you do a search um but you normally you attach certain things that you want to control",
    "start": "2385920",
    "end": "2391119"
  },
  {
    "text": "that search request so here for example aggregations is defined as one of the possible things you can do on a search",
    "start": "2391119",
    "end": "2396359"
  },
  {
    "text": "request um aggregations through a quirk of the design of elastic search can either be passed in the Json either",
    "start": "2396359",
    "end": "2401880"
  },
  {
    "text": "through um a property named aggregations or just AGS and so we need to be able to model that so we do that again through",
    "start": "2401880",
    "end": "2408119"
  },
  {
    "text": "these kind of Alias tags in the uh in the model and then an aggregation in elastic search is logically just a",
    "start": "2408119",
    "end": "2414599"
  },
  {
    "text": "dictionary and you provide a string which names the aggregation that you're performing and then you provide one of many possible data structures that's a",
    "start": "2414599",
    "end": "2421720"
  },
  {
    "text": "valid aggregation for elastic search this is where the polymorphic nature of elastic search kind of comes in and we'll see what a container",
    "start": "2421720",
    "end": "2427839"
  },
  {
    "text": "does in a minute but we also have here like regular code comments and these can be used by the code generators to add in",
    "start": "2427839",
    "end": "2435680"
  },
  {
    "text": "sort of like XML documentation comments in the case of uh the C generator search response is pretty much",
    "start": "2435680",
    "end": "2442200"
  },
  {
    "text": "the same idea um here we've got a a response and we have a response body on",
    "start": "2442200",
    "end": "2447319"
  },
  {
    "text": "that response and you can see here we've got generics so that's useful because a search response is going to include data",
    "start": "2447319",
    "end": "2453079"
  },
  {
    "text": "in the Json that is stuff we don't know about in our model here because it's going to return the results the actual",
    "start": "2453079",
    "end": "2458280"
  },
  {
    "text": "user documents that you've searched and so we we can use generics in typescript to represent that um potential nature",
    "start": "2458280",
    "end": "2465720"
  },
  {
    "text": "and so the response body add a bunch of stuff on it but one of those is the hits hits is of types hit metadata that",
    "start": "2465720",
    "end": "2471880"
  },
  {
    "text": "includes things like the total which again is another Union scenario where it might return you just a long or it might",
    "start": "2471880",
    "end": "2477560"
  },
  {
    "text": "return an object that repr represents the hits information that's controlled by your search request itself so how",
    "start": "2477560",
    "end": "2483440"
  },
  {
    "text": "that comes back is controlled by the request um so we need to model the scenario that this response could",
    "start": "2483440",
    "end": "2488599"
  },
  {
    "text": "include either of those and then in the actual hit itself which is hit of T document you can see we've got the the",
    "start": "2488599",
    "end": "2494680"
  },
  {
    "text": "source which is the actual result the actual data that you've searched coming back the rest of that's the kind of metadata about how it's scored in the",
    "start": "2494680",
    "end": "2501240"
  },
  {
    "text": "search and its ID and things like that but that's how we model the um acest responses for those polymorphic",
    "start": "2501240",
    "end": "2507520"
  },
  {
    "text": "scenarios we use those this concept of a container which isn't a real object on the end of the server but it's a logical",
    "start": "2507520",
    "end": "2514520"
  },
  {
    "text": "construct that we have in the um typescript here that's going to represent that this thing could be one of many things and so for a query when",
    "start": "2514520",
    "end": "2521760"
  },
  {
    "text": "you do a query against the search uh endpoint you could provide a b query or you might provide an exists query um and",
    "start": "2521760",
    "end": "2528800"
  },
  {
    "text": "so we just model all of the possible query options that we know are valid here and we use this variance tag here",
    "start": "2528800",
    "end": "2534040"
  },
  {
    "text": "to identify that this is a container which contains all of the possible variants we know about it's non-exhaustive because custom um plugins",
    "start": "2534040",
    "end": "2540839"
  },
  {
    "text": "and things can add custom query types that we might not know about so we allow for the fact that the uh generated code",
    "start": "2540839",
    "end": "2546920"
  },
  {
    "text": "has to be um flexible enough that you could have provide a custom version of one of these as",
    "start": "2546920",
    "end": "2552599"
  },
  {
    "text": "well now once you've got a spec um how do you test it how do you make sure it's aligned to the server uh we could have",
    "start": "2552599",
    "end": "2559480"
  },
  {
    "text": "written a bunch of tests ourself but that would have been really painful so we just cheated a bit and we piggybacked onto elastic search's own integration",
    "start": "2559480",
    "end": "2566119"
  },
  {
    "text": "test we wrote a thing called the flight recorder that runs and collects all the requests and responses during the integration tests that occur as part of",
    "start": "2566119",
    "end": "2572680"
  },
  {
    "text": "the elastic search build um which is something like 5,000 plus tests um and",
    "start": "2572680",
    "end": "2577720"
  },
  {
    "text": "so this means we're hitting all of the possible endpoints with various different search bodies and getting back various different search responses and",
    "start": "2577720",
    "end": "2584400"
  },
  {
    "text": "all we do is record the Json parts of that and then just check it can be serialized to and from the spec that",
    "start": "2584400",
    "end": "2589680"
  },
  {
    "text": "we've defined in the typescript so if something comes back that we haven't got as a property on our typescript that's",
    "start": "2589680",
    "end": "2594880"
  },
  {
    "text": "going to be an error because we don't have a property for it so we need to add that or if we've got something that's marked as required but it doesn't occur",
    "start": "2594880",
    "end": "2601520"
  },
  {
    "text": "in all the responses that's obviously wrong in the spec it should be marked optional those kind of things and so these run as part part of our our PR",
    "start": "2601520",
    "end": "2608319"
  },
  {
    "text": "process so if someone submits a PR to the spec it works out all of the endpoints that type used in or against",
    "start": "2608319",
    "end": "2614800"
  },
  {
    "text": "runs uh or gathers the Json that's recorded from the integration test and then validates it against that new",
    "start": "2614800",
    "end": "2620839"
  },
  {
    "text": "change that's being made once we've got a valid spec uh we need to like generate something from it",
    "start": "2620839",
    "end": "2628880"
  },
  {
    "start": "2622000",
    "end": "2798000"
  },
  {
    "text": "so at the moment everything's defined in this typescript and so the first possibility um because we're now getting",
    "start": "2628880",
    "end": "2634839"
  },
  {
    "text": "all excited about sort of compiler apis is that we could actually hook into types script's own compiler and access its syntax tree uh and start uh piecing",
    "start": "2634839",
    "end": "2642839"
  },
  {
    "text": "together enough information that we then take to generate the cops in tax true the reason we don't do that is it's",
    "start": "2642839",
    "end": "2648800"
  },
  {
    "text": "quite low level each language client generator would need to know how to pause you know typescript syntax tree",
    "start": "2648800",
    "end": "2653920"
  },
  {
    "text": "and and work with its API um and it's also not constrained enough there's things that could be inferred from the",
    "start": "2653920",
    "end": "2659319"
  },
  {
    "text": "typescript code which aren't um sort of fully modeled yet um and we wanted to be able to sort of tighten that down with a",
    "start": "2659319",
    "end": "2665160"
  },
  {
    "text": "a single me simple metadata model so what we do is as part of the comp compilation phase of typescript is",
    "start": "2665160",
    "end": "2671680"
  },
  {
    "text": "generate a simpler schema which is a Json file say simpler it's it's some two",
    "start": "2671680",
    "end": "2676920"
  },
  {
    "text": "200,000 lines of Json um but it it's a a model that's tailor fit to the needs that we have of all the things we need",
    "start": "2676920",
    "end": "2683000"
  },
  {
    "text": "to know about endpoints and the types and it's unambiguous it's you know it has a set of rules that as long as you follow them in a certain pattern when",
    "start": "2683000",
    "end": "2689400"
  },
  {
    "text": "you're generating the code the Java code and the cop code will be roughly aligned in terms of how they've modeled things",
    "start": "2689400",
    "end": "2695319"
  },
  {
    "text": "and so what we do as part of our code generation pipeline is the we have the the typescript files that we're creating",
    "start": "2695319",
    "end": "2701000"
  },
  {
    "text": "that represent all of our types that represent what the elastic search endpoints accept the typescript compiler",
    "start": "2701000",
    "end": "2706680"
  },
  {
    "text": "runs and then we hook in using that TS morph Library a phase where rather than generating a typical output of",
    "start": "2706680",
    "end": "2712319"
  },
  {
    "text": "typescript uh compilation we want to generate our schema file and so we take all of the information that we can then",
    "start": "2712319",
    "end": "2718119"
  },
  {
    "text": "read from the syntax tree during that compilation phase and spit out this Json file that includes all of the endpoints",
    "start": "2718119",
    "end": "2724040"
  },
  {
    "text": "all of the request response bodies all of the types um in the Json and so that's then the input to the the C",
    "start": "2724040",
    "end": "2730559"
  },
  {
    "text": "language generator that's going to spit out the the net client and of course we'll have other generators and we do we",
    "start": "2730559",
    "end": "2737040"
  },
  {
    "text": "have ones for Java and go and node that generate those clients as well obviously",
    "start": "2737040",
    "end": "2743079"
  },
  {
    "text": "you know dynamic and static languages will have different challenges and how they model some of these things but each of them have a strict meta model in in",
    "start": "2743079",
    "end": "2749920"
  },
  {
    "text": "the form of that schema to to use as their starting point we uh also plan to take that further as well so one of the",
    "start": "2749920",
    "end": "2756160"
  },
  {
    "text": "things our doc team needed was an open API spec for elastic search that we didn't have well actually our scheme",
    "start": "2756160",
    "end": "2761280"
  },
  {
    "text": "adjacent is kind of a superet of that information so we could actually cenate the open API spec from it and in the",
    "start": "2761280",
    "end": "2767760"
  },
  {
    "text": "future we could even get spec driven so right now the elastic search team make a code change in the Java codebase for",
    "start": "2767760",
    "end": "2773960"
  },
  {
    "text": "elastic search and then they update the schema or the typescript model that represents what they've just done the new endpoint or the the changes to a",
    "start": "2773960",
    "end": "2780599"
  },
  {
    "text": "particular type now obviously that has a risk of getting out of sync if they forget that phase and so what we could",
    "start": "2780599",
    "end": "2787119"
  },
  {
    "text": "do is have them actually just update the schema in typescript that they want to Define and then have that even generate",
    "start": "2787119",
    "end": "2792800"
  },
  {
    "text": "the Java codebase for elastic search as well for the the request response side of things so I'm going to have a just a",
    "start": "2792800",
    "end": "2799880"
  },
  {
    "start": "2798000",
    "end": "2913000"
  },
  {
    "text": "quick look at the schema Json um that actually gets generated the real scheme of Json I've got some cheat line numbers",
    "start": "2799880",
    "end": "2806079"
  },
  {
    "text": "here because it's a huge file so this is the file um as I say like",
    "start": "2806079",
    "end": "2811440"
  },
  {
    "text": "20 12,000 lines of of java JavaScript or Json um I'm going to go to this line",
    "start": "2811440",
    "end": "2817880"
  },
  {
    "text": "number here so this is where the uh definition for search endpoint appears in this file so we can",
    "start": "2817880",
    "end": "2824640"
  },
  {
    "text": "see that it's available in our serverless product as well as our main stack uh we have a description for it we",
    "start": "2824640",
    "end": "2829680"
  },
  {
    "text": "have the doc URL um for it we know its name what privileges are needed to run it and then we know what its request",
    "start": "2829680",
    "end": "2836040"
  },
  {
    "text": "type is so the request here is this request type defined in theor global. search namespace um it's not required um",
    "start": "2836040",
    "end": "2845359"
  },
  {
    "text": "it's application Json and then we have the URLs for this so there's two possible URLs this path which searches",
    "start": "2845359",
    "end": "2851440"
  },
  {
    "text": "against everything um or this path where we use that index path part that's defined in the model uh to have a",
    "start": "2851440",
    "end": "2857960"
  },
  {
    "text": "placeholder for one or many indices that we want to search against both of these except get and post if I just get my",
    "start": "2857960",
    "end": "2864359"
  },
  {
    "text": "other line number here uh lost me Place uh so this is",
    "start": "2864359",
    "end": "2872520"
  },
  {
    "text": "where the search request body Json starts to appear um so there's a lot of",
    "start": "2872520",
    "end": "2877640"
  },
  {
    "text": "properties involved in the search request it's alphabetical so body appears quite early here and you can see that it defines the set of properties",
    "start": "2877640",
    "end": "2883720"
  },
  {
    "text": "that this request has and at the top here you can see that aggregations one so the name here aggregations but we",
    "start": "2883720",
    "end": "2889559"
  },
  {
    "text": "also Define that Alias or aliases that might exist for it um it's not required",
    "start": "2889559",
    "end": "2895040"
  },
  {
    "text": "on the body um and if it is included it's of kind dictionary and that has a key which is instance of string and the",
    "start": "2895040",
    "end": "2902680"
  },
  {
    "text": "value is instance of aggregation container so these are the pieces of information that you saw in that typescript being moved and transformed",
    "start": "2902680",
    "end": "2909520"
  },
  {
    "text": "into a jar a Json",
    "start": "2909520",
    "end": "2913319"
  },
  {
    "text": "representation so what's the job of the net code generator well first thing obviously we have to read in that schema",
    "start": "2917520",
    "end": "2923079"
  },
  {
    "text": "uh so we just deize the Json then we start to build up some contextual information about what it what it's",
    "start": "2923079",
    "end": "2928920"
  },
  {
    "text": "representing so what are all the endpoints it's defining what are all the types it's defining and then we do a further phase where I call it kind of",
    "start": "2928920",
    "end": "2935400"
  },
  {
    "text": "marking and enrichment and we'll disc discuss what that does in a second but once we've got a lot of information",
    "start": "2935400",
    "end": "2940839"
  },
  {
    "text": "built up from the schema and the rules around how we're going to model that in C that are defined through that sort of",
    "start": "2940839",
    "end": "2946160"
  },
  {
    "text": "marking and enrichment phase we can then actually build up the the syntax tree for each cop file that we want to",
    "start": "2946160",
    "end": "2951319"
  },
  {
    "text": "produce and we do it kind of file by file uh some files will have multiple classes some may just have one um so we",
    "start": "2951319",
    "end": "2957520"
  },
  {
    "text": "build up the syntax tree and then we simply write out the Cs file pretty much as we saw in the simplified example just",
    "start": "2957520",
    "end": "2963520"
  },
  {
    "text": "is obviously more um rosling code so that marking and enrichment phase is",
    "start": "2963520",
    "end": "2968680"
  },
  {
    "text": "kind of a critical step because some of the things that are defined in that typescript um don't map particularly",
    "start": "2968680",
    "end": "2974520"
  },
  {
    "text": "well to how we want to do things in C so one of those was that underscore global. search namespace that's not how you",
    "start": "2974520",
    "end": "2980440"
  },
  {
    "text": "would write a namespace in C you wouldn't have an underscore you wouldn't lowercase the first letters so we we",
    "start": "2980440",
    "end": "2985760"
  },
  {
    "text": "transform those we remove or simplify the name spaces as much as possible so we don't even bother with the global",
    "start": "2985760",
    "end": "2991200"
  },
  {
    "text": "part because that's not necessary but we do make sure that the the rest of the name case is correctly cas for C",
    "start": "2991200",
    "end": "2997920"
  },
  {
    "text": "conventions we also check whether any of the types that are defined in typescript um are potentially invalid C type names",
    "start": "2997920",
    "end": "3004720"
  },
  {
    "text": "if they conflict with a keyword for example they can't be used and so we need to detect that and then we have two mechanisms to deal with it we either",
    "start": "3004720",
    "end": "3011119"
  },
  {
    "text": "have a rule based mechanism where the rename does a particular sort of pattern to resolve the problem or we have",
    "start": "3011119",
    "end": "3017960"
  },
  {
    "text": "specific um sort of essentially lookups of this for this name as you see it in typescript we want to call it this in C",
    "start": "3017960",
    "end": "3024920"
  },
  {
    "text": "usually those sort of static ones are to provide some backward compatibility with the V7 naming",
    "start": "3024920",
    "end": "3030720"
  },
  {
    "text": "conventions we then walk the type hierarchy so what are all of the requests and responses what are all",
    "start": "3030720",
    "end": "3035920"
  },
  {
    "text": "their properties what are the types of those we start attaching things so you can navigate this um schema quite nicely",
    "start": "3035920",
    "end": "3041160"
  },
  {
    "text": "through the C code behind the scenes we then identify all the relationships we Mark everything that",
    "start": "3041160",
    "end": "3047040"
  },
  {
    "text": "might be used in a request because those need to be user setable uh properties we",
    "start": "3047040",
    "end": "3052119"
  },
  {
    "text": "then look for those containers and the VAR different variant types that we have to find in our back and work out how",
    "start": "3052119",
    "end": "3057799"
  },
  {
    "text": "we're going to deal with those so we have to build up some additional information for them we try and simplify type aliases so where we had that like",
    "start": "3057799",
    "end": "3063559"
  },
  {
    "text": "index name that was a type Alias basically over a string um if we did that if we modeled that in C in for all",
    "start": "3063559",
    "end": "3070720"
  },
  {
    "text": "aliases it would end up with a lot of these little wrapper classes that ultimately just wrap one field a string",
    "start": "3070720",
    "end": "3076040"
  },
  {
    "text": "and that wouldn't be particularly efficient because of the allocations and it wouldn't be particularly nice to work with as an API so most of those we",
    "start": "3076040",
    "end": "3081359"
  },
  {
    "text": "flatten back to the to the Primitive type the integer or the string index name is one of the ceptions to that",
    "start": "3081359",
    "end": "3087200"
  },
  {
    "text": "because we have a richer model for allowing you to pause an index name from a a bigger string or to um perform other",
    "start": "3087200",
    "end": "3094480"
  },
  {
    "text": "operations on it we actually model those as a class and so we don't uh simplify",
    "start": "3094480",
    "end": "3100838"
  },
  {
    "text": "them uh one other scenario is the bulk apis are a bit special they don't return regular Json they return new Line Del",
    "start": "3101200",
    "end": "3108079"
  },
  {
    "text": "limited Json so we need to know about those serialization needs so we can generate the serializer code for them so",
    "start": "3108079",
    "end": "3113559"
  },
  {
    "start": "3113000",
    "end": "3310000"
  },
  {
    "text": "what does the generator code look like in real world so when we're generating uh the syntax tree and the code for what",
    "start": "3113559",
    "end": "3120839"
  },
  {
    "text": "is a request in our spec we actually end up with between three and five classes",
    "start": "3120839",
    "end": "3125880"
  },
  {
    "text": "uh that actually get generated we have a request parameters class that this code generates that is just going to contain",
    "start": "3125880",
    "end": "3131240"
  },
  {
    "text": "all of the possible query string parameters and it's a way of us making the API easier to work with later on so this class just needs to know the query",
    "start": "3131240",
    "end": "3137839"
  },
  {
    "text": "string parameters it follows the same convention though is what we saw in the pre previous simplified example creates",
    "start": "3137839",
    "end": "3144240"
  },
  {
    "text": "a class declaration adds in this case the public and sealed keyword to it adds a base type which allows us to attach",
    "start": "3144240",
    "end": "3150559"
  },
  {
    "text": "The Inheritance in this case request parameters is going to be a manually created file that we have in the uh in",
    "start": "3150559",
    "end": "3156200"
  },
  {
    "text": "the project and then we add the members in this case all of the query uh query parameters to it that gets added that",
    "start": "3156200",
    "end": "3163000"
  },
  {
    "text": "add class just kind of adds that to the uh the name space that's getting built up behind the scenes for the actual request itself we",
    "start": "3163000",
    "end": "3169839"
  },
  {
    "text": "need to model it in two ways we model it as a regular kind of C object based class that just has properties for each",
    "start": "3169839",
    "end": "3175200"
  },
  {
    "text": "of the body properties and then we have a fluent syntax in the elastic search API that lets you use do notation to",
    "start": "3175200",
    "end": "3180720"
  },
  {
    "text": "kind of build up a search request more fluently um for the request itself we",
    "start": "3180720",
    "end": "3185799"
  },
  {
    "text": "just need a regular class for the descriptor as we call them um we need a different structure of cop um class for",
    "start": "3185799",
    "end": "3192079"
  },
  {
    "text": "that so this is the request class but the constructors we have to first pre-calculate so certain apis will",
    "start": "3192079",
    "end": "3198520"
  },
  {
    "text": "enforce things on the path that we need to be user provided and so in that case we'd want the Constructor to enforce",
    "start": "3198520",
    "end": "3204160"
  },
  {
    "text": "that rule as well so that users can't misuse the and create something without enough of the expected data on it so we",
    "start": "3204160",
    "end": "3210359"
  },
  {
    "text": "first pre-compute the constructors we're going to need and in this case we then create another class declaration uh and",
    "start": "3210359",
    "end": "3215760"
  },
  {
    "text": "then we add a bunch of members to it that includes those Constructors a bunch of things that are common to all requests and if we've got a generic",
    "start": "3215760",
    "end": "3222200"
  },
  {
    "text": "property then we need to add a property that can hold that then we add the query string parameters and the body",
    "start": "3222200",
    "end": "3227400"
  },
  {
    "text": "properties the body properties uses my own Factory method which is a serializable property syntax and what",
    "start": "3227400",
    "end": "3232839"
  },
  {
    "text": "that factory method looks like is first it does some type resolution so for the property it finds the full type spec um",
    "start": "3232839",
    "end": "3239880"
  },
  {
    "text": "in the hierarchy or from that we've paused in from the schema uh so that it knows about the type information and all",
    "start": "3239880",
    "end": "3245720"
  },
  {
    "text": "of our enriching that we did to it and once we've got that then it can create the property declaration uh with the",
    "start": "3245720",
    "end": "3251280"
  },
  {
    "text": "public keyword here crucially it's adding the Json attributes needed to control how the serialization of that",
    "start": "3251280",
    "end": "3256799"
  },
  {
    "text": "will work the Json include the Json property name which again a sourced from the spec and then if it's a request type",
    "start": "3256799",
    "end": "3263760"
  },
  {
    "text": "we add a getter in a Setter because you need to be able to set those things before you send it if it's something that's used on a response we make it",
    "start": "3263760",
    "end": "3269839"
  },
  {
    "text": "read only and have in it um accesses on there so ultimately uh you know this is",
    "start": "3269839",
    "end": "3276280"
  },
  {
    "text": "just a small Peak into the code base for the code generator but it's not that much more complex than what I showed you",
    "start": "3276280",
    "end": "3282160"
  },
  {
    "text": "in the basic demo it's just you need to know about more of the conventions and the way I dealt with that was through",
    "start": "3282160",
    "end": "3287440"
  },
  {
    "text": "that rosling Cota website I would Define what I wanted roughly to be able to generate in a c fold in the first place",
    "start": "3287440",
    "end": "3294359"
  },
  {
    "text": "put that into rosin quota look at of the pieces that make that up all of the Declarations and the nodes and the",
    "start": "3294359",
    "end": "3299640"
  },
  {
    "text": "tokens and then model that in little Snippets or in this case like I did just showed you of like my own little helper",
    "start": "3299640",
    "end": "3305480"
  },
  {
    "text": "method that could make um one of those elements",
    "start": "3305480",
    "end": "3310599"
  },
  {
    "start": "3310000",
    "end": "3543000"
  },
  {
    "text": "up so before I left the team I had a working code generator that was generating about 80% of the API um",
    "start": "3311000",
    "end": "3318240"
  },
  {
    "text": "sufficiently um and I had a big plan for it but then I decided to switch teams at elastic so I didn't get to work on it",
    "start": "3318240",
    "end": "3324359"
  },
  {
    "text": "and I I'm rather guilty for the code that I handed over to uh Floren who's taken over my role on the client's team",
    "start": "3324359",
    "end": "3330319"
  },
  {
    "text": "because it's it's clever code but it's not particularly well structured so I had some things that I was planning to address I just never got to do them",
    "start": "3330319",
    "end": "3337160"
  },
  {
    "text": "first was refactoring we'll come across this if you if you build something and you're figuring out how it's going to",
    "start": "3337160",
    "end": "3342440"
  },
  {
    "text": "work you learn a lot along the way I learned a lot about the Roslin API how to be more efficient how to sort of",
    "start": "3342440",
    "end": "3348119"
  },
  {
    "text": "simplify the amount of Roslin API code that I needed to write and package it up into reusable sort of functions um so",
    "start": "3348119",
    "end": "3355280"
  },
  {
    "text": "there was a lot of refactoring that I wanted to do there but I had some sort of grander ideas so the first one was",
    "start": "3355280",
    "end": "3361240"
  },
  {
    "text": "around making this more usable by non-developers so right now or or when I",
    "start": "3361240",
    "end": "3367799"
  },
  {
    "text": "left it uh if you wanted to change like how a rename occurred and model the rule or the static rename you would have to",
    "start": "3367799",
    "end": "3374559"
  },
  {
    "text": "do that in the C code generator code itself that obviously means it's only a c developer can really maintain the code",
    "start": "3374559",
    "end": "3381720"
  },
  {
    "text": "generator and adjust how it works what I wanted to do is actually make it more pluggable so ra as well as accepting the",
    "start": "3381720",
    "end": "3387720"
  },
  {
    "text": "scheme adjacent it could accept other Json inputs that would define the rules for renaming or the rules for which",
    "start": "3387720",
    "end": "3394160"
  },
  {
    "text": "mpoint should be included in a particular code generator run and that then would mean that non-developers could just take this um code generator",
    "start": "3394160",
    "end": "3401359"
  },
  {
    "text": "and execute it with a bunch of inputs and then produce uh hopefully a valid you know project at the end of it the",
    "start": "3401359",
    "end": "3408119"
  },
  {
    "text": "other big thing that I wanted to do that I didn't get time to do um and was one of the main reasons that I uh planned to",
    "start": "3408119",
    "end": "3415039"
  },
  {
    "text": "you know use Roslin in the first first place was actually going just beyond the syntax tree API so one of the other apis",
    "start": "3415039",
    "end": "3421520"
  },
  {
    "text": "in Roslin is called the workspace apis and these are quite powerful what these let you do is load up a uh cop or Net",
    "start": "3421520",
    "end": "3429440"
  },
  {
    "text": "Solution file um and and read it in in memory um and interpret it so it can actually read the solution file that",
    "start": "3429440",
    "end": "3435920"
  },
  {
    "text": "will find all of the projects that that solution has in it and then you can work your way for each of those projects and",
    "start": "3435920",
    "end": "3441319"
  },
  {
    "text": "you can um inspect the syntax trees of their code and see how they interrelate",
    "start": "3441319",
    "end": "3446359"
  },
  {
    "text": "and basically control everything programmatically that you could do with the solution in something like visual studio and so one of the big things that",
    "start": "3446359",
    "end": "3453079"
  },
  {
    "text": "we could have done and we would be moving towards is kind of uh being a bit more intelligent the existing generator",
    "start": "3453079",
    "end": "3458839"
  },
  {
    "text": "basically deleted the generated folder each run and then regenerated every C file for every uh type defined on the",
    "start": "3458839",
    "end": "3465440"
  },
  {
    "text": "spec it wasn't particularly inefficient it only took about like 50 seconds I think to run maybe even less um but it",
    "start": "3465440",
    "end": "3472079"
  },
  {
    "text": "it's a bit bit sort of a blunt tool bit of a Brute Force way of doing things what would be is actually to read in",
    "start": "3472079",
    "end": "3478000"
  },
  {
    "text": "this the existing solution the current version of the client then read in the spec and see its model and then you",
    "start": "3478000",
    "end": "3484480"
  },
  {
    "text": "could actually inspect the existing code against the spec and work out what changes are going to occur here what",
    "start": "3484480",
    "end": "3489760"
  },
  {
    "text": "what types are being added or which types are being modified and then you could even see if some of those modifications might be breaking to C",
    "start": "3489760",
    "end": "3495920"
  },
  {
    "text": "users we might remove something in the spec but we might want to deal with that more gracefully with an obsolete",
    "start": "3495920",
    "end": "3501079"
  },
  {
    "text": "attribute in the C code for some for something like that so we could determine those differences and also",
    "start": "3501079",
    "end": "3506520"
  },
  {
    "text": "with the workspace apis you can actually have Roslin compile that then in memory so once you have the solution loaded up",
    "start": "3506520",
    "end": "3512920"
  },
  {
    "text": "um you could have ask um the compiler to compile it all and make sure that it does compile um one of the steps in",
    "start": "3512920",
    "end": "3519039"
  },
  {
    "text": "that's also quite brute force and blunt at the moment is that you generate those C files you load up the solution",
    "start": "3519039",
    "end": "3524920"
  },
  {
    "text": "yourself and then check it compiles by running it uh locally or let it do it through the CI process but it would be",
    "start": "3524920",
    "end": "3530720"
  },
  {
    "text": "nicer if we could actually do all of that as part of the code generation phase so that we know everything we output is at least valid valid",
    "start": "3530720",
    "end": "3537280"
  },
  {
    "text": "compilable c um so that would have been quite",
    "start": "3537280",
    "end": "3542680"
  },
  {
    "text": "powerful so I learned a lot um I hope I've shared some of the starting points",
    "start": "3542680",
    "end": "3547799"
  },
  {
    "start": "3543000",
    "end": "3599000"
  },
  {
    "text": "with you if you have this need in your own code base some of what I've shown you would be useful if you're also considering getting started with Source",
    "start": "3547799",
    "end": "3554319"
  },
  {
    "text": "generators because it's similar apis you might be using a source generator ultimately is going to modify that syntax tree behind the scenes to make",
    "start": "3554319",
    "end": "3560880"
  },
  {
    "text": "changes uh to code as part of an analyzer and a fixer for example uh would also use that",
    "start": "3560880",
    "end": "3566640"
  },
  {
    "text": "so um leave you with the resources again this is the link to the slide deck if you want to kind of recap on it um the",
    "start": "3566640",
    "end": "3573039"
  },
  {
    "text": "demos that I've showed you are up on my GitHub repository there um some documentation for Roslin itself uh this",
    "start": "3573039",
    "end": "3580039"
  },
  {
    "text": "is the main one yeah this is my cheat sheet for working out things in the early days the rosin quoter website um I",
    "start": "3580039",
    "end": "3586160"
  },
  {
    "text": "I think I did bring it down a few times by pasting in too much C but it's generally pretty good um this is the",
    "start": "3586160",
    "end": "3592200"
  },
  {
    "text": "generated code so this is the actual generated language client if you want to look at the generated folder you can see",
    "start": "3592200",
    "end": "3597240"
  },
  {
    "text": "everything that's being generated there the spec is also online and on GitHub if you want to look at the typescript",
    "start": "3597240",
    "end": "3602839"
  },
  {
    "text": "definitions and how we you know how our compiler and stuff works in there the only thing that isn't public",
    "start": "3602839",
    "end": "3608280"
  },
  {
    "text": "unfortunately is the code generator itself for various reasons um but hopefully the code I've shown you today is enough for you to understand that",
    "start": "3608280",
    "end": "3614520"
  },
  {
    "text": "actually once you understand what syntax nodes and tokens you need generating uh the rosin code isn't that",
    "start": "3614520",
    "end": "3621359"
  },
  {
    "text": "complicated um so that's pretty much it I don't have time for questions on stage but feel free to grab me at the side",
    "start": "3621359",
    "end": "3626880"
  },
  {
    "text": "afterwards um I hope this has been useful and thank you for coming",
    "start": "3626880",
    "end": "3632720"
  }
]