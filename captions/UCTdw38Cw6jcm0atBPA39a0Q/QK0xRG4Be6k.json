[
  {
    "text": "welcome everybody to the last session of the first day of NDC Sydney welcome to this session",
    "start": "9240",
    "end": "14940"
  },
  {
    "text": "today I'm going to talk more about serverless.net development on AWS",
    "start": "14940",
    "end": "20220"
  },
  {
    "text": "first let me introduce myself my name is Rob Van pamil and I'm a net consultant for Access access is a Belgium IT",
    "start": "20220",
    "end": "28019"
  },
  {
    "text": "company so this already explains why I don't have a native English",
    "start": "28019",
    "end": "35719"
  },
  {
    "text": "um I'm working as a developer since 2007 and I'm started as a net developer",
    "start": "36360",
    "end": "41879"
  },
  {
    "text": "working in winforms applications I got soon attracted towards web applications and nowadays I'm working more and more",
    "start": "41879",
    "end": "49200"
  },
  {
    "text": "in the clouds working as a cloud architect for different projects",
    "start": "49200",
    "end": "54980"
  },
  {
    "text": "I got interested into AWS and its Cloud when I was working on a Greenfield",
    "start": "55320",
    "end": "61079"
  },
  {
    "text": "project in 2015 and at that moment I got the opportunity to take a look at all the different",
    "start": "61079",
    "end": "66540"
  },
  {
    "text": "Cloud providers which were available at that moment and then with an open Vision we selected AWS above Microsoft Azure or",
    "start": "66540",
    "end": "75060"
  },
  {
    "text": "Google Cloud which is actually not a very obvious decision because you know.net",
    "start": "75060",
    "end": "81360"
  },
  {
    "text": "development tends to go immediately towards Azure but till now I don't regret the choice I have made at that",
    "start": "81360",
    "end": "87540"
  },
  {
    "text": "moment if you look now as well AWS is also supporting the.net foundation and they",
    "start": "87540",
    "end": "93780"
  },
  {
    "text": "are a big sponsor of it means that they are really into net development as well if you want to reach out to me you can",
    "start": "93780",
    "end": "100259"
  },
  {
    "text": "you can go to my Twitter handle or just send me an email if you want",
    "start": "100259",
    "end": "107159"
  },
  {
    "text": "now today I was going to tell you more about serverless Computing but I think all of you in the room already know what serverless Computing is it's yeah",
    "start": "107159",
    "end": "114240"
  },
  {
    "text": "running code without having the hassle of managing infrastructures managing patches of updates of service etc etc",
    "start": "114240",
    "end": "123240"
  },
  {
    "text": "but I'd like to take a step back and take a look why serverless has become a",
    "start": "123240",
    "end": "128340"
  },
  {
    "text": "buzzword like it is nowadays as well and I'd like to take a look at the Google Trends from that moment as well",
    "start": "128340",
    "end": "134879"
  },
  {
    "text": "because if you take a look at the Google Trends in 2016 they started and you can",
    "start": "134879",
    "end": "140940"
  },
  {
    "text": "see that serverless starts around 2015 to become a real hype when I compare this with for example AWS",
    "start": "140940",
    "end": "148500"
  },
  {
    "text": "Lambda you can see that it follows the same Trend but it starts a little bit earlier in 2015.",
    "start": "148500",
    "end": "154260"
  },
  {
    "text": "and I started to wonder well it will slander serverless so why is this in that same Trend actually and is there",
    "start": "154260",
    "end": "160980"
  },
  {
    "text": "real of difference now I'd like to take a step back to that day and let's see how Alias Lambda was",
    "start": "160980",
    "end": "168420"
  },
  {
    "text": "introduced it will be a slender was introduced at re invent 2014 by Buena Vos which is the",
    "start": "168420",
    "end": "175080"
  },
  {
    "text": "city of Illinois but it was not introduced by something like a serverless Computing no",
    "start": "175080",
    "end": "181560"
  },
  {
    "text": "it was introduced as an event-driven Computing service for dynamic applications",
    "start": "181560",
    "end": "187379"
  },
  {
    "text": "of course he was mentioning that you don't have to provide any infrastructure and you don't have to manage the servers",
    "start": "187379",
    "end": "192840"
  },
  {
    "text": "etc etc but we got my intention as well is that he was talking about an event driven Computing service",
    "start": "192840",
    "end": "201440"
  },
  {
    "text": "now around the same moment some other people for example Dave Farley who has",
    "start": "202200",
    "end": "207780"
  },
  {
    "text": "written the book of continuous delivery or thinking about something the same and they wrote the reactive Manifesto",
    "start": "207780",
    "end": "214800"
  },
  {
    "text": "I was a directive Manifesto reactive Manifesto is about building reactive applications",
    "start": "214800",
    "end": "220560"
  },
  {
    "text": "and what are now reactive applications well reactive applications are reactive or applications Who Remain responsive at",
    "start": "220560",
    "end": "228239"
  },
  {
    "text": "all time and when we developers hear about responsive applications we immediately",
    "start": "228239",
    "end": "233340"
  },
  {
    "text": "think about low latency having immediately feedback to your application but it's all not only that",
    "start": "233340",
    "end": "241019"
  },
  {
    "text": "responsive applications is also about how you can tackle problems which are occurring in your application as well",
    "start": "241019",
    "end": "247260"
  },
  {
    "text": "and if you can give if you then still can give a good feedback",
    "start": "247260",
    "end": "252780"
  },
  {
    "text": "to your users you will raise the quality of your application and you will boost your end user experience",
    "start": "252780",
    "end": "259260"
  },
  {
    "text": "now how can we build such responsive applications well first of all we have to build",
    "start": "259260",
    "end": "264600"
  },
  {
    "text": "applications which are resilient as well now resiliency what does it mean it",
    "start": "264600",
    "end": "269940"
  },
  {
    "text": "means that you can remain responsive while there are errors which are happening inside your application",
    "start": "269940",
    "end": "275880"
  },
  {
    "text": "now how can you do this you can make sure that for example you're going to replicate your application into different instances so",
    "start": "275880",
    "end": "282900"
  },
  {
    "text": "if one instance is failing you still have the other instance who can take over your application or you can start separating your",
    "start": "282900",
    "end": "290759"
  },
  {
    "text": "applications into different parts which on which have their own responsibility and each responsibility has a different",
    "start": "290759",
    "end": "297600"
  },
  {
    "text": "service so if a service is going to crash for example it's only that part of the application is going to crash as",
    "start": "297600",
    "end": "304199"
  },
  {
    "text": "only that part who is going to face a problem so by delegating responsibilities and by",
    "start": "304199",
    "end": "309780"
  },
  {
    "text": "isolating failures we can create applications which are much more resilient",
    "start": "309780",
    "end": "315979"
  },
  {
    "text": "another thing where we have to take care of is making sure that our applications are elastic and when we developers here",
    "start": "316020",
    "end": "321660"
  },
  {
    "text": "elastic applications really media think about scaling up it's not only scaling up it's also scaling down",
    "start": "321660",
    "end": "328380"
  },
  {
    "text": "to make sure and how can we do this we can make sure that we are going to add more resources to our computer to our",
    "start": "328380",
    "end": "334860"
  },
  {
    "text": "services or we can take the resources back if you're in need but also making sure that there are",
    "start": "334860",
    "end": "341880"
  },
  {
    "text": "no bottlenecks anymore inside our applications and",
    "start": "341880",
    "end": "347880"
  },
  {
    "text": "creating message driven is also a very important part message driven applications are",
    "start": "347880",
    "end": "353880"
  },
  {
    "text": "asynchronous communication that we are going to apply to our services as we ensure that we have loose coupling and",
    "start": "353880",
    "end": "360660"
  },
  {
    "text": "we can control the flow of messages which are going from one part of the service towards another part of the",
    "start": "360660",
    "end": "365699"
  },
  {
    "text": "service if we do all these kind of uh things",
    "start": "365699",
    "end": "371100"
  },
  {
    "text": "then we will have applications which end up being more maintainable and end up",
    "start": "371100",
    "end": "376199"
  },
  {
    "text": "being more extensible as well and this is what actually we want as developers that we can easily add more features and",
    "start": "376199",
    "end": "381960"
  },
  {
    "text": "that we don't have to spend a lot of time in maintaining applications but rather add more features",
    "start": "381960",
    "end": "390120"
  },
  {
    "text": "now why were people like The Farley and all the other guys thinking about these",
    "start": "390120",
    "end": "396419"
  },
  {
    "text": "things well in 2014 a lot of developers including myself were still working in a",
    "start": "396419",
    "end": "403319"
  },
  {
    "text": "synchronous communication Style really a request and response time for",
    "start": "403319",
    "end": "408600"
  },
  {
    "text": "example if you had a webshop we had a checkout service and even an invoice service and the checkout service was",
    "start": "408600",
    "end": "414960"
  },
  {
    "text": "saying to the invoice service well let's create an invoice okay this looks fine",
    "start": "414960",
    "end": "421800"
  },
  {
    "text": "but what happens afterwards well we are going to add some more services the shipping service but also the contact",
    "start": "421800",
    "end": "427620"
  },
  {
    "text": "service what happens now that the checkout service has to call not only the invoice",
    "start": "427620",
    "end": "433139"
  },
  {
    "text": "service but he also has to call the shipping service and the contact service so more services are going to be added",
    "start": "433139",
    "end": "439080"
  },
  {
    "text": "over time which means that the checkout service is gaining more and more responsibility",
    "start": "439080",
    "end": "445440"
  },
  {
    "text": "but it's not only the checkout service who is gaining more and more responsibility it's also the team who is creating the checkout service who is",
    "start": "445440",
    "end": "452039"
  },
  {
    "text": "going to have more responsibility because when something goes wrong inside the",
    "start": "452039",
    "end": "457860"
  },
  {
    "text": "shipping service for example if they have a breaking change well at that moment it's up to the",
    "start": "457860",
    "end": "463139"
  },
  {
    "text": "checkout service to implement the changes that they have so they can't continue working so more responsibility",
    "start": "463139",
    "end": "468780"
  },
  {
    "text": "lastly goes to the team as well on top of that another side effect is that the latency will increase there as",
    "start": "468780",
    "end": "474840"
  },
  {
    "text": "well because he has to go more and more services because what happens in reality it doesn't stay with those three services",
    "start": "474840",
    "end": "480900"
  },
  {
    "text": "which are going to be added we are not very keen to ourselves as developers and what we like to do is for",
    "start": "480900",
    "end": "486120"
  },
  {
    "text": "example is you like to squeeze in another service for example the stock service and add even another service on",
    "start": "486120",
    "end": "491520"
  },
  {
    "text": "top of that and if everything goes fine you can say well we have a working solution and the",
    "start": "491520",
    "end": "497940"
  },
  {
    "text": "architecture looks fine but what happens if there is no stock available",
    "start": "497940",
    "end": "503220"
  },
  {
    "text": "now who is responsible for creating the invoice or saying that the invoice cannot be created is it then the stock",
    "start": "503220",
    "end": "510539"
  },
  {
    "text": "service who has to call the invoice service or should the checkout service call then the invoice service or does",
    "start": "510539",
    "end": "517919"
  },
  {
    "text": "the stock service has to call the contact service itself to say that cannot be delivered etc etc",
    "start": "517919",
    "end": "523020"
  },
  {
    "text": "you can already see that something's going wrong over here that's why that message driven architecture or event-driven",
    "start": "523020",
    "end": "529920"
  },
  {
    "text": "architecture will be a better solution now I'm not going to talk as",
    "start": "529920",
    "end": "536000"
  },
  {
    "text": "event-driven architecture like creating event sourcing or cqrs more about",
    "start": "536000",
    "end": "541980"
  },
  {
    "text": "creating the event more about the communication between the different services",
    "start": "541980",
    "end": "548399"
  },
  {
    "text": "now let me introduce first what an event is I think you all know that an event is a change in state that already happened",
    "start": "548399",
    "end": "554339"
  },
  {
    "text": "in the past so it's not something that you can change anymore which is in contrast to a command that we just send out in the",
    "start": "554339",
    "end": "560459"
  },
  {
    "text": "synchronous communication that we had if we're going to use that message driven architecture we will make sure",
    "start": "560459",
    "end": "566580"
  },
  {
    "text": "that we are going to use asynchronous communication as well which is going to decouple our services from each other",
    "start": "566580",
    "end": "573360"
  },
  {
    "text": "now how can we do this we can do this by adding like mentioned over here a",
    "start": "573360",
    "end": "578700"
  },
  {
    "text": "service bus or component likewise in between which is going to reverse the flow",
    "start": "578700",
    "end": "585420"
  },
  {
    "text": "instead of the checkout service who is going to say um he needs to call the shipping service",
    "start": "585420",
    "end": "591420"
  },
  {
    "text": "or the invoice service or the contract Service we will inverse the flow in such a way that the shipping service now has",
    "start": "591420",
    "end": "596940"
  },
  {
    "text": "to show his interest and subscribe to the event that the checkout service is going to publish",
    "start": "596940",
    "end": "604320"
  },
  {
    "text": "so the checkout service will then broadcast the message and then it's the service bus sorry the checkout service",
    "start": "604320",
    "end": "610740"
  },
  {
    "text": "will send out a message and it's took to the service bus to broadcast the message towards the different",
    "start": "610740",
    "end": "616399"
  },
  {
    "text": "Services which you have interested in it now how does this actually apply towards our",
    "start": "616399",
    "end": "624120"
  },
  {
    "text": "different components in AWS I've created the basic serverless architecture where you have front-end applications a",
    "start": "624120",
    "end": "632519"
  },
  {
    "text": "Cognito which is for identity management API Gateway a Lambda function and a",
    "start": "632519",
    "end": "637860"
  },
  {
    "text": "dynamodb let us first take a look at a Lambda function",
    "start": "637860",
    "end": "643740"
  },
  {
    "text": "now we've already mentioned that an Lambda was introduced in reinvent 2014",
    "start": "643740",
    "end": "649260"
  },
  {
    "text": "and it was an event driven application now what's important over here is that",
    "start": "649260",
    "end": "655680"
  },
  {
    "text": "event driven is very present because it's going to be executed by Any Given",
    "start": "655680",
    "end": "660779"
  },
  {
    "text": "trigger that you're going to assign to it which means that every time you're going",
    "start": "660779",
    "end": "666480"
  },
  {
    "text": "to execute your application it's going to scale up a new version of your Lambda function which means that",
    "start": "666480",
    "end": "673620"
  },
  {
    "text": "the first part that we discussed about elasticity elasticity is already there it can scale up and scale down when it's",
    "start": "673620",
    "end": "680279"
  },
  {
    "text": "going to give some new when it's going to get new requests on top of that we have some other advantages as well like",
    "start": "680279",
    "end": "686760"
  },
  {
    "text": "it can reduce your costs because it will not um run when it's not needed anymore",
    "start": "686760",
    "end": "693060"
  },
  {
    "text": "most of the time you will not squeeze in a complete monolith inside a Lambda function so it will make the life of the",
    "start": "693060",
    "end": "698459"
  },
  {
    "text": "developer a little bit easier because it's just less code to maintain",
    "start": "698459",
    "end": "704279"
  },
  {
    "text": "and you don't have to worry about is anymore or something different it's just",
    "start": "704279",
    "end": "709440"
  },
  {
    "text": "your code so deployments can go faster and easier as well but there are some drawbacks as well",
    "start": "709440",
    "end": "715800"
  },
  {
    "text": "you have your response latency which can increase and this is something that we don't want",
    "start": "715800",
    "end": "721860"
  },
  {
    "text": "looking at reactive applications so welcome back to that in a later phase on top of that because we have more",
    "start": "721860",
    "end": "728399"
  },
  {
    "text": "Lambda functions which are running inside our application you will see that debugging and",
    "start": "728399",
    "end": "734339"
  },
  {
    "text": "monitoring will become a little bit harder as well but over there as well there are solutions present",
    "start": "734339",
    "end": "741500"
  },
  {
    "text": "now if we're going to look how such an AWS Lambda function looks like in c-sharp for example you will see this",
    "start": "741600",
    "end": "748019"
  },
  {
    "text": "very easy and it comes down or it boils down to this four or five lines",
    "start": "748019",
    "end": "753180"
  },
  {
    "text": "the for each Loop that we have is actually the business logic that we're going to execute",
    "start": "753180",
    "end": "758880"
  },
  {
    "text": "then we have an sqls event over there let's be this is the event this is going",
    "start": "758880",
    "end": "765000"
  },
  {
    "text": "to be triggered so for each integration that you have this will be different now",
    "start": "765000",
    "end": "770519"
  },
  {
    "text": "in this example I picked an sqls event but if you have an API Gateway or you have a dynamodb stream that event will",
    "start": "770519",
    "end": "777600"
  },
  {
    "text": "look a little bit different now the other part that we have is the Lambda context",
    "start": "777600",
    "end": "783440"
  },
  {
    "text": "Lambda context doing well it's giving you more and more runtime information on",
    "start": "783440",
    "end": "789060"
  },
  {
    "text": "what is happening inside your Lambda function for example how many memory is being",
    "start": "789060",
    "end": "794279"
  },
  {
    "text": "used um which version is it how long is your Lambda function already running because",
    "start": "794279",
    "end": "800940"
  },
  {
    "text": "there is a timeout of 15 minutes etc etc all this information is available in Atlanta context",
    "start": "800940",
    "end": "808079"
  },
  {
    "text": "now important to here to note is that this function Handler will be executed",
    "start": "808079",
    "end": "813540"
  },
  {
    "text": "every time a new request is going to kick in now how can these requests be invocated",
    "start": "813540",
    "end": "821519"
  },
  {
    "text": "well there are three styles the first one is a synchronous style which is the request and response style",
    "start": "821519",
    "end": "828120"
  },
  {
    "text": "that we had earlier as well and that we have for example an API Gateway who can trigger a Lambda",
    "start": "828120",
    "end": "835440"
  },
  {
    "text": "function or a load balancer who can trigger a Lambda function but important here to know for your for",
    "start": "835440",
    "end": "841019"
  },
  {
    "text": "your resiliency is that the error handling for that Lambda function as a responsibility of the client in this",
    "start": "841019",
    "end": "847920"
  },
  {
    "text": "example if you're going to use an API Gateway and your Lambda function fails then it's up to the API Gateway to make",
    "start": "847920",
    "end": "855000"
  },
  {
    "text": "sure that for example HTTP status 500 is returned to the client as well it's not something that Lambda will do",
    "start": "855000",
    "end": "862079"
  },
  {
    "text": "on the other hand we have some asynchronous invocation models as well for example for S3 or SNS those will be",
    "start": "862079",
    "end": "870720"
  },
  {
    "text": "event based over there for your resiliency Lambda will retry to uh",
    "start": "870720",
    "end": "877320"
  },
  {
    "text": "will retry your function two times before it's going to move your event towards that letter queue or towards a",
    "start": "877320",
    "end": "884940"
  },
  {
    "text": "Lambda destination from where another Lambda can pick it up and move forward",
    "start": "884940",
    "end": "890180"
  },
  {
    "text": "then the third and last invocation model that you have on Lambda is pulling what",
    "start": "890220",
    "end": "895500"
  },
  {
    "text": "is polling going to do for example um oh that was too fast",
    "start": "895500",
    "end": "900959"
  },
  {
    "text": "on sqs or a dynamodb stream it will accumulate all the events which",
    "start": "900959",
    "end": "906959"
  },
  {
    "text": "are on the Queue and will then move those events to your Lambda",
    "start": "906959",
    "end": "912480"
  },
  {
    "text": "function so over here it's also important that you know that for resiliency",
    "start": "912480",
    "end": "919019"
  },
  {
    "text": "if you haven't configured yours ask rescue with an athletic queue that's your Lambda function will keep retrying",
    "start": "919019",
    "end": "925320"
  },
  {
    "text": "to handle those messages as long as the data is valid so if you haven't configured that that letter queue it's",
    "start": "925320",
    "end": "931320"
  },
  {
    "text": "possible that will keep retrying it for for example four days which is not what you would like to do",
    "start": "931320",
    "end": "938959"
  },
  {
    "text": "now I talked earlier that when you're going to use alus Lambda that it can",
    "start": "940199",
    "end": "945420"
  },
  {
    "text": "increase your latency as well this is because of gold starts I think all of us",
    "start": "945420",
    "end": "951420"
  },
  {
    "text": "have already heard about cold starts but let me take a closer look at to what a",
    "start": "951420",
    "end": "956579"
  },
  {
    "text": "call start actually is inside the AWS land what happens when your Lambda function",
    "start": "956579",
    "end": "964320"
  },
  {
    "text": "is going to be executed are four different steps the first thing that your Lambda function will do it will it will",
    "start": "964320",
    "end": "970620"
  },
  {
    "text": "download your code afterwards it will start a new execution environment and afterwards it will start executing your",
    "start": "970620",
    "end": "977160"
  },
  {
    "text": "initialization code and as last step it will execute your Handler codes",
    "start": "977160",
    "end": "982620"
  },
  {
    "text": "this is what we call a call start what we actually want is a warm start we",
    "start": "982620",
    "end": "988500"
  },
  {
    "text": "don't want all these startup of new execution environment etc etc",
    "start": "988500",
    "end": "994079"
  },
  {
    "text": "but whenever we cannot predict when that execution environment is going to be thrown away by AWS we only know that",
    "start": "994079",
    "end": "1002420"
  },
  {
    "text": "when your Lambda function is not receiving any requests for a long period of time it will throw a rated",
    "start": "1002420",
    "end": "1007459"
  },
  {
    "text": "environments so what has the community already done at that moment well they started to",
    "start": "1007459",
    "end": "1012800"
  },
  {
    "text": "invent some what they call Lambda warmers so what are those those are going to send requests to your Lambda",
    "start": "1012800",
    "end": "1020300"
  },
  {
    "text": "function so it remains warm and you don't face the issue of a cold start",
    "start": "1020300",
    "end": "1025880"
  },
  {
    "text": "however this is not a Holy Grail just because yeah Lambda is a service which is",
    "start": "1025880",
    "end": "1032600"
  },
  {
    "text": "running inside your region which means it's re it's running inside multiple availability zones",
    "start": "1032600",
    "end": "1038540"
  },
  {
    "text": "which means that the first time you're paying to your Lambda function can end up in availability Zone one next time it",
    "start": "1038540",
    "end": "1046699"
  },
  {
    "text": "can end up in availability Zone 2 which means that you're going to have a cold start in either or two availability",
    "start": "1046699",
    "end": "1052520"
  },
  {
    "text": "zones so it's not a Holy Grail on top of that if you have concurrent",
    "start": "1052520",
    "end": "1059799"
  },
  {
    "text": "executions of your function you will face a cold start anyway because you're holding only one Lambda Function One",
    "start": "1059799",
    "end": "1068480"
  },
  {
    "text": "now what a solution for this what's AWS has provided for us is provision concurrency",
    "start": "1068480",
    "end": "1075559"
  },
  {
    "text": "what does this mean is that instead of having those Lambda warmers you're going to pay actually for keeping",
    "start": "1075559",
    "end": "1082940"
  },
  {
    "text": "in this example six instances of your function one so they will have a cold boot at the",
    "start": "1082940",
    "end": "1089360"
  },
  {
    "text": "first stop at the first point but afterwards they will make sure that your function is ready to be executed",
    "start": "1089360",
    "end": "1094760"
  },
  {
    "text": "whenever a request is going to kick in",
    "start": "1094760",
    "end": "1098860"
  },
  {
    "text": "now when we come back to our signature of a Lambda Handler and we have in this knowledge we can take advantage of this",
    "start": "1100280",
    "end": "1105679"
  },
  {
    "text": "as well if your business logic is going to create for example or is going to",
    "start": "1105679",
    "end": "1111320"
  },
  {
    "text": "instantiate some clients or making some connections or doing some hard work",
    "start": "1111320",
    "end": "1116480"
  },
  {
    "text": "which is only going to be executed once we can move this part to the initialization or to the Constructor of",
    "start": "1116480",
    "end": "1123140"
  },
  {
    "text": "our class as well so there's only going to be executed once and we can already trim down that function Handler with",
    "start": "1123140",
    "end": "1129260"
  },
  {
    "text": "only the execution of our business logic that we would like to have but be careful when you're going to have",
    "start": "1129260",
    "end": "1135799"
  },
  {
    "text": "some initializations which are going to be done inside your Constructor and they're going to happen some exceptions",
    "start": "1135799",
    "end": "1141620"
  },
  {
    "text": "and then that initialized code is going to be correct then if you're having a warm function it will keep on throwing",
    "start": "1141620",
    "end": "1148160"
  },
  {
    "text": "because yeah that client is just correct",
    "start": "1148160",
    "end": "1152380"
  },
  {
    "text": "now I mentioned before that you cannot predict whenever that execution environment is going to be thrown away",
    "start": "1154700",
    "end": "1160340"
  },
  {
    "text": "well there are some things that you can do about it the more memory you're going to assign",
    "start": "1160340",
    "end": "1166100"
  },
  {
    "text": "to your function the longer it will remain warm but",
    "start": "1166100",
    "end": "1171799"
  },
  {
    "text": "on top of that you get the benefit that it will raise the CPU and network as well but also it's going to raise your",
    "start": "1171799",
    "end": "1178100"
  },
  {
    "text": "bill as well so it will be more expensive if you're going to add more memory which is kind of logical as well",
    "start": "1178100",
    "end": "1184580"
  },
  {
    "text": "but we don't want to bring the bank of course so there are some tuning application available on GitHub so if",
    "start": "1184580",
    "end": "1190220"
  },
  {
    "text": "you want to find out how you can tune your applications so it's most cost effectively take a look at those GitHub",
    "start": "1190220",
    "end": "1196360"
  },
  {
    "text": "repositories so you can then tune your applications to make sure that you have a good solution for your application",
    "start": "1196360",
    "end": "1205659"
  },
  {
    "text": "okay now it's time to move on and take a look at the next step and when we're building reactive applications next step",
    "start": "1207320",
    "end": "1213440"
  },
  {
    "text": "that we have is dynamodb I mentioned before that you should not build in any bottlenecks into your",
    "start": "1213440",
    "end": "1219860"
  },
  {
    "text": "application and what we see most of the time is that when we're speaking about data storage for serverless applications",
    "start": "1219860",
    "end": "1226100"
  },
  {
    "text": "that we kind of tend towards making use of relational databases and this can be",
    "start": "1226100",
    "end": "1231860"
  },
  {
    "text": "a bottleneck relational databases were actually designed in the 70s and they are still",
    "start": "1231860",
    "end": "1238039"
  },
  {
    "text": "used at this moment um but they were designed by for um",
    "start": "1238039",
    "end": "1243320"
  },
  {
    "text": "Edward cot for example um you might have heard of him because he has a normalization form and what",
    "start": "1243320",
    "end": "1249559"
  },
  {
    "text": "have they done at that moment well he took a look at the statistics of that moment and in the 70s what was",
    "start": "1249559",
    "end": "1255740"
  },
  {
    "text": "expensive at that moment well it was not CPU well it was also expensive but storage was even more expensive",
    "start": "1255740",
    "end": "1262520"
  },
  {
    "text": "so they started to normalize that data or to compress that data so it didn't took a lot of",
    "start": "1262520",
    "end": "1268520"
  },
  {
    "text": "storage to store a lot of data",
    "start": "1268520",
    "end": "1273039"
  },
  {
    "text": "while we also see with relational databases is that they are harder to scale",
    "start": "1274100",
    "end": "1279799"
  },
  {
    "text": "we need the elasticity of our applications well relational databases they don't fit into that you can add",
    "start": "1279799",
    "end": "1285799"
  },
  {
    "text": "wheat replicas to your database but it's a little bit harder to scale them down as well",
    "start": "1285799",
    "end": "1290840"
  },
  {
    "text": "and you can even add um other things like sharding but it's just",
    "start": "1290840",
    "end": "1296360"
  },
  {
    "text": "very hard to do it which doesn't mean that relational databases are not useful anymore",
    "start": "1296360",
    "end": "1301820"
  },
  {
    "text": "but I think they are more useful for olap applications for example if you want to do analytics at that moment you",
    "start": "1301820",
    "end": "1307760"
  },
  {
    "text": "can still make use of relational databases what we saw at the same moment with the",
    "start": "1307760",
    "end": "1313159"
  },
  {
    "text": "rise of the cloud and that from 2000 to 2010 is that we had more and more demanding requirements for our",
    "start": "1313159",
    "end": "1319700"
  },
  {
    "text": "applications our applications were running 24 24 7 at",
    "start": "1319700",
    "end": "1325340"
  },
  {
    "text": "that moment they were globally accessible so everybody should be able to reach them so we had more and higher requirements",
    "start": "1325340",
    "end": "1333080"
  },
  {
    "text": "like they needed to have higher performance they needed to be scaled better they needed to be more reliable",
    "start": "1333080",
    "end": "1340460"
  },
  {
    "text": "and what we also saw is that the CPU performance at that moment started to Flat normally you had more slow which",
    "start": "1340460",
    "end": "1347960"
  },
  {
    "text": "was dictating that every two years the number of transistors that you had in the CPU was doubling so if you had an",
    "start": "1347960",
    "end": "1353299"
  },
  {
    "text": "application which was not that performant you could wait for two years and then you could double the performance of the application which was",
    "start": "1353299",
    "end": "1359240"
  },
  {
    "text": "fine but at that moment that started to stop a little bit",
    "start": "1359240",
    "end": "1364340"
  },
  {
    "text": "what we saw on the other hand is that the storage was getting cheaper and cheaper as well we had some veterans",
    "start": "1364340",
    "end": "1369620"
  },
  {
    "text": "which were saying that you could have a gigabyte of online storage for about one",
    "start": "1369620",
    "end": "1374659"
  },
  {
    "text": "dollar and then it even went for 10 cents and got cheaper and cheaper all the time so that's when database vendors started",
    "start": "1374659",
    "end": "1381559"
  },
  {
    "text": "to invent themselves and they started to work on nosql databases",
    "start": "1381559",
    "end": "1386659"
  },
  {
    "text": "and that's where dynamodb kicks in dynamodb is actually the",
    "start": "1386659",
    "end": "1392240"
  },
  {
    "text": "preferred database or preferred nosql database of AWS which is mainly built for online",
    "start": "1392240",
    "end": "1398539"
  },
  {
    "text": "transactional processing so if you want to do analytics don't take a look at dynamodb because it will",
    "start": "1398539",
    "end": "1404240"
  },
  {
    "text": "not fit for you only use it for transactional processing what they offer you is a single milled",
    "start": "1404240",
    "end": "1411320"
  },
  {
    "text": "digit response time for any given API action that you're going to execute",
    "start": "1411320",
    "end": "1416960"
  },
  {
    "text": "now how can this do this well they can do it because dynamodb has been built",
    "start": "1416960",
    "end": "1422120"
  },
  {
    "text": "for scalability from day one you will have to configure your read and your right capacity units so you have to",
    "start": "1422120",
    "end": "1428299"
  },
  {
    "text": "configure how much the data is going to be read and how much the data is going to be written",
    "start": "1428299",
    "end": "1433400"
  },
  {
    "text": "and they will provide or they can deliver it in that thing on the latest response time",
    "start": "1433400",
    "end": "1439700"
  },
  {
    "text": "now how can they do that you can ask well they have actually another mindset in how to store the data that",
    "start": "1439700",
    "end": "1447320"
  },
  {
    "text": "that you're going to store and dynamodb all the data is stored inside different partitions",
    "start": "1447320",
    "end": "1454640"
  },
  {
    "text": "now let us take a closer look if you have different tables like shown",
    "start": "1454640",
    "end": "1459799"
  },
  {
    "text": "over here and they're all stored inside different partitions now let's zoom in a",
    "start": "1459799",
    "end": "1464900"
  },
  {
    "text": "little bit if you have an item which is stored inside table 1 it's perfectly possible",
    "start": "1464900",
    "end": "1471320"
  },
  {
    "text": "that it starts on one partition over there but the item which is next to it is going to be stored inside another",
    "start": "1471320",
    "end": "1477380"
  },
  {
    "text": "partition and the item next to it an even knowledge partition which means that actually you're scaling",
    "start": "1477380",
    "end": "1484400"
  },
  {
    "text": "horizontally on different partitions because each partition can be handled by different servers",
    "start": "1484400",
    "end": "1490700"
  },
  {
    "text": "you can compare it a little bit with horizontal sharding that you have on relational databases but just more",
    "start": "1490700",
    "end": "1496659"
  },
  {
    "text": "scalable and much faster as well of course there are some limitations for",
    "start": "1496659",
    "end": "1501980"
  },
  {
    "text": "such a partition as well you cannot store any amount of data on that partition you",
    "start": "1501980",
    "end": "1507919"
  },
  {
    "text": "have to keep track of the maximum item collection for example in dynamodb is",
    "start": "1507919",
    "end": "1513620"
  },
  {
    "text": "around 10 gigabytes and there is a maximum throughput for each partition as well which is around 3000 reads capacity",
    "start": "1513620",
    "end": "1521000"
  },
  {
    "text": "units now let us take a look at how does such",
    "start": "1521000",
    "end": "1527059"
  },
  {
    "text": "a dynamodb table looks like then I've already mentioned that the data is going to be stored differently well it",
    "start": "1527059",
    "end": "1534080"
  },
  {
    "text": "also means there's going to be fetched differently if we want to store it we have to store",
    "start": "1534080",
    "end": "1539779"
  },
  {
    "text": "it by making use of a primary key the primary key works with a partition key and a sort key the partition key is",
    "start": "1539779",
    "end": "1546620"
  },
  {
    "text": "going to Define and which partition is going to be stored like I've shown before The Source GUI is go the sort key is",
    "start": "1546620",
    "end": "1553640"
  },
  {
    "text": "going to Define rare in that partition it's going to store your item",
    "start": "1553640",
    "end": "1559820"
  },
  {
    "text": "so these things that partition key and that sort key are also going to Define how",
    "start": "1559820",
    "end": "1565520"
  },
  {
    "text": "you're going to fetch your data out of it so it's very important that you know how you're going to access your data",
    "start": "1565520",
    "end": "1571700"
  },
  {
    "text": "later on as well not like you can do in SQL you can type a Word query afterwards",
    "start": "1571700",
    "end": "1576740"
  },
  {
    "text": "and you can fetch any attribute in dynamodb that's not the case you have to fetch your data based on your primary",
    "start": "1576740",
    "end": "1582500"
  },
  {
    "text": "key so this is a little bit uh hard to know but if you know your access patterns",
    "start": "1582500",
    "end": "1589159"
  },
  {
    "text": "then it's something which is very easy to do now if you want to make good use of the",
    "start": "1589159",
    "end": "1595460"
  },
  {
    "text": "partitions you have to choose some high cardinality attributes as well for example an order ID or a session ID can",
    "start": "1595460",
    "end": "1601820"
  },
  {
    "text": "be a good choice for a partition or a primary key",
    "start": "1601820",
    "end": "1606980"
  },
  {
    "text": "and you can compose it with other attributes so you can still fetch your data",
    "start": "1606980",
    "end": "1613039"
  },
  {
    "text": "so let us take a closer look there as well how it works",
    "start": "1613039",
    "end": "1618440"
  },
  {
    "text": "now if you want to fetch our data there are three different API action types so for example over here we have a table",
    "start": "1618440",
    "end": "1624740"
  },
  {
    "text": "which has some actors inside of it and some movies and then you have some details in it",
    "start": "1624740",
    "end": "1630500"
  },
  {
    "text": "well let us say that we want to fetch an item for example the movie of Tom Hanks with Costa Ray we can fetch it by making",
    "start": "1630500",
    "end": "1638299"
  },
  {
    "text": "use of a primary key which is going to specify the partition key which is then Tom Hanks in combination with the sword",
    "start": "1638299",
    "end": "1644299"
  },
  {
    "text": "key of costaway and that we will fetch all the details over here as well",
    "start": "1644299",
    "end": "1650200"
  },
  {
    "text": "apart from item based or primary key we can also make use of a query",
    "start": "1650299",
    "end": "1655520"
  },
  {
    "text": "which is going to be used on tables or indexes for example if you would like to know in which movies that Tom Hanks has",
    "start": "1655520",
    "end": "1662059"
  },
  {
    "text": "played we can only specify the partition key and leave the sort key out and then those records cost away and third story",
    "start": "1662059",
    "end": "1668539"
  },
  {
    "text": "will be returned as well or we can say I want to have the movie",
    "start": "1668539",
    "end": "1675860"
  },
  {
    "text": "of Tom Hanks with and something which starts with a T for example and then",
    "start": "1675860",
    "end": "1681020"
  },
  {
    "text": "that record will be returned now you also have something different",
    "start": "1681020",
    "end": "1686179"
  },
  {
    "text": "which is called a scan what is the scan coin to do well a scan can give you any",
    "start": "1686179",
    "end": "1691700"
  },
  {
    "text": "data back that you would like to have but it's very expensive it's not only",
    "start": "1691700",
    "end": "1696799"
  },
  {
    "text": "expensive compared in time because what it will do is we'll scan all the",
    "start": "1696799",
    "end": "1702080"
  },
  {
    "text": "partitions that you have and the moment it has a match on the data it will return it to you it's also very",
    "start": "1702080",
    "end": "1708380"
  },
  {
    "text": "expensive later on on your AWS bill because it's just going to do a lot of CPU Cycles where you have to pay for",
    "start": "1708380",
    "end": "1716860"
  },
  {
    "text": "now if you have your primary key and you don't can access your data for example if you",
    "start": "1717559",
    "end": "1723980"
  },
  {
    "text": "would like to know um in which which actors have played in Tor story",
    "start": "1723980",
    "end": "1729980"
  },
  {
    "text": "at that moment you can make use of secondary indexes as well what are secondary indexes secondary indexes",
    "start": "1729980",
    "end": "1737179"
  },
  {
    "text": "are indexes which are going to you which are going to enable more access patterns",
    "start": "1737179",
    "end": "1742460"
  },
  {
    "text": "for example a local secondary index local secondary index has the same partition key as you have over here but",
    "start": "1742460",
    "end": "1749299"
  },
  {
    "text": "can make use of a new sort key which can be any attribute that you specify",
    "start": "1749299",
    "end": "1754400"
  },
  {
    "text": "or you can create a global secondary index which can then have another partition",
    "start": "1754400",
    "end": "1760399"
  },
  {
    "text": "key and a new sort key as well for example now we have flipped movie and",
    "start": "1760399",
    "end": "1765500"
  },
  {
    "text": "actor as primary and sort key and now you can see Thor story has Tim Allen and",
    "start": "1765500",
    "end": "1772039"
  },
  {
    "text": "Tom Hanks as the actors who have played inside that",
    "start": "1772039",
    "end": "1776860"
  },
  {
    "text": "now a lot of developers who are looking at awos dynamodb",
    "start": "1779120",
    "end": "1785539"
  },
  {
    "text": "are missing the concept of joints between different tables which might look very scary because it's",
    "start": "1785539",
    "end": "1791779"
  },
  {
    "text": "something where we are very familiar with to join data from one table to another data table but actually it's not",
    "start": "1791779",
    "end": "1798740"
  },
  {
    "text": "and that's why they added single table design now what is single table design",
    "start": "1798740",
    "end": "1804140"
  },
  {
    "text": "single table design is about storing all multiple entities in one table we're",
    "start": "1804140",
    "end": "1810140"
  },
  {
    "text": "already using nosql database so we are free to do that but why are we doing that well joins are",
    "start": "1810140",
    "end": "1817700"
  },
  {
    "text": "actually very expensive because you have to correlate data from one table to another table and it's just costing a",
    "start": "1817700",
    "end": "1824539"
  },
  {
    "text": "lot of CPU Cycles which is expensive and that's not something that AWS would like to do and why do we actually need",
    "start": "1824539",
    "end": "1832220"
  },
  {
    "text": "joints we have already if we normalized our data then yeah we",
    "start": "1832220",
    "end": "1838820"
  },
  {
    "text": "don't need it anymore so there are some advantages over there as well that you have if you're going to",
    "start": "1838820",
    "end": "1845299"
  },
  {
    "text": "make use of a single table design you will have better performance",
    "start": "1845299",
    "end": "1850700"
  },
  {
    "text": "um you can enable more access patterns with a few API requests because you're just",
    "start": "1850700",
    "end": "1856940"
  },
  {
    "text": "going to query one single table we will have less operational overhead",
    "start": "1856940",
    "end": "1862159"
  },
  {
    "text": "because you have only one table to maintain you don't have to take backup of different tables and for your AWS",
    "start": "1862159",
    "end": "1868039"
  },
  {
    "text": "bill on the end it will be better as well because you only have to specify um one time your read and write capacity",
    "start": "1868039",
    "end": "1874640"
  },
  {
    "text": "units and you can reuse them across multiple entities as well but there are some disadvantages as well",
    "start": "1874640",
    "end": "1880159"
  },
  {
    "text": "if you would like to add new access patterns it's rather inflexible not impossible but it's a little bit harder",
    "start": "1880159",
    "end": "1887240"
  },
  {
    "text": "and overall it has a steep learning curve as well but let us take a closer look",
    "start": "1887240",
    "end": "1894080"
  },
  {
    "text": "I've already mentioned that we're going to store multiple items inside one table but how can we now recognize that for",
    "start": "1894080",
    "end": "1900440"
  },
  {
    "text": "example this one over here is a user and this one over there is an organization",
    "start": "1900440",
    "end": "1906020"
  },
  {
    "text": "well this is the concept that they're calling partition key overloading what we're going to do is we're going to add",
    "start": "1906020",
    "end": "1912559"
  },
  {
    "text": "a prefix towards that data so we can recognize if it's going to be",
    "start": "1912559",
    "end": "1918679"
  },
  {
    "text": "a user or an organization on top of that we're not going to add",
    "start": "1918679",
    "end": "1923960"
  },
  {
    "text": "some fixed table columns anymore we're just going to say this is a primary key and this is a slurkey it has a generic",
    "start": "1923960",
    "end": "1930020"
  },
  {
    "text": "name nothing more nothing less if you're going to use it like this way",
    "start": "1930020",
    "end": "1935600"
  },
  {
    "text": "we can even enable more access patterns towards data but it's not looking very intuitive at first",
    "start": "1935600",
    "end": "1942020"
  },
  {
    "text": "remember that dynamodb is built for online transactional processing and not for analytics anymore because if you",
    "start": "1942020",
    "end": "1948380"
  },
  {
    "text": "want to do analytics on this kind of data it will be a very hard time",
    "start": "1948380",
    "end": "1953720"
  },
  {
    "text": "now let us take a more uh let's take a look at more examples on",
    "start": "1953720",
    "end": "1959299"
  },
  {
    "text": "data design strategies in that single table design for example let's say that we have a customer and",
    "start": "1959299",
    "end": "1966500"
  },
  {
    "text": "these customers have different addresses they have some home addresses and they have some business addresses now how",
    "start": "1966500",
    "end": "1972200"
  },
  {
    "text": "could you design this inside dynamodb well one solution could be that",
    "start": "1972200",
    "end": "1978320"
  },
  {
    "text": "instead of storing it in a different table we are going to store it in a complex attribute",
    "start": "1978320",
    "end": "1985039"
  },
  {
    "text": "this is perfectly possible because at this moment well you have a home address you have a business address maybe you",
    "start": "1985039",
    "end": "1991220"
  },
  {
    "text": "have a third or fourth address but the amount of data is really bound",
    "start": "1991220",
    "end": "1997880"
  },
  {
    "text": "where should where should you also look at well you should also look at the data which is stored inside that complex",
    "start": "1997880",
    "end": "2004059"
  },
  {
    "text": "attribute that it doesn't contain any access patterns that you have",
    "start": "2004059",
    "end": "2009279"
  },
  {
    "text": "another example is for example if you have some authors and we have some books and we like to show on our website the",
    "start": "2009279",
    "end": "2016779"
  },
  {
    "text": "number of books that he has written along with the birth date of that author",
    "start": "2016779",
    "end": "2023159"
  },
  {
    "text": "now how can we do this well we can start denormalizing our data as well",
    "start": "2023320",
    "end": "2029620"
  },
  {
    "text": "by duplicating the birthday over here why can we do this well the verdict of",
    "start": "2029620",
    "end": "2035260"
  },
  {
    "text": "that altar that's not going to change so we can freely duplicate it and",
    "start": "2035260",
    "end": "2041620"
  },
  {
    "text": "if it can change take a look at how often does it change if it doesn't change very regularly",
    "start": "2041620",
    "end": "2047380"
  },
  {
    "text": "I think you can still look at this button to make sure that uh ah take a look at this design strategy",
    "start": "2047380",
    "end": "2056378"
  },
  {
    "text": "now a more complex example by making use of those partition key overloading is I",
    "start": "2056379",
    "end": "2062560"
  },
  {
    "text": "want to many relationship in this example we have an organization for example Microsoft we have some",
    "start": "2062560",
    "end": "2068378"
  },
  {
    "text": "metadata for the organization itself and we have some users of that organization as well",
    "start": "2068379",
    "end": "2076540"
  },
  {
    "text": "now if we want to retrieve some data out of this single table we can for example",
    "start": "2076540",
    "end": "2081760"
  },
  {
    "text": "retrieve an organization and all this metadata by specifying the partition key and the sort key for example",
    "start": "2081760",
    "end": "2087339"
  },
  {
    "text": "organization Microsoft and metadata Microsoft and then this item will be returned",
    "start": "2087339",
    "end": "2093040"
  },
  {
    "text": "if you want to retrieve the organization and all these different users we can make use of a query which is going to",
    "start": "2093040",
    "end": "2099160"
  },
  {
    "text": "specify organization Microsoft and we're going to leave yeah the sort key out and we will retrieve then the metadata",
    "start": "2099160",
    "end": "2106119"
  },
  {
    "text": "Microsoft but also the user Bill Gates and also the other users if we want to retrieve only the users",
    "start": "2106119",
    "end": "2112599"
  },
  {
    "text": "which are part of the organization at that moment we can specify the",
    "start": "2112599",
    "end": "2117640"
  },
  {
    "text": "organization and then we're going to specify that the sort key has to start or begin with user hashtag and then only",
    "start": "2117640",
    "end": "2125320"
  },
  {
    "text": "the users will be returned to our application and if you want to retrieve a specific",
    "start": "2125320",
    "end": "2130599"
  },
  {
    "text": "user we're just going to specify the organization Microsoft and user Bill Gates and then we will also have the",
    "start": "2130599",
    "end": "2136780"
  },
  {
    "text": "information of that specific user that we have",
    "start": "2136780",
    "end": "2140940"
  },
  {
    "text": "now another example of another design strategy that you can apply is that",
    "start": "2142180",
    "end": "2147579"
  },
  {
    "text": "you're going to create shallow duplications for example over here we have a class of",
    "start": "2147579",
    "end": "2153880"
  },
  {
    "text": "physics which has some students inside of it Albert Einstein and Alex debris over",
    "start": "2153880",
    "end": "2159579"
  },
  {
    "text": "here and we have the metadata of Alex debris and Albert Einstein over here if you want to fetch afterwards the the",
    "start": "2159579",
    "end": "2167260"
  },
  {
    "text": "details of the class you can just fetch the details of the Clause over here and you can add and you will see over here",
    "start": "2167260",
    "end": "2173320"
  },
  {
    "text": "all the students of course you don't have all the information of the students but this can then be done by fetching",
    "start": "2173320",
    "end": "2179320"
  },
  {
    "text": "the students over here so OnePlus One API it's not in one API anymore but with",
    "start": "2179320",
    "end": "2186460"
  },
  {
    "text": "a few apis you can get all the students out of the class",
    "start": "2186460",
    "end": "2191099"
  },
  {
    "text": "another example for a many-to-many relationship um is over here where we have multiple",
    "start": "2194020",
    "end": "2202000"
  },
  {
    "text": "entities let me first show you them we have a movie of Castaway over here so we",
    "start": "2202000",
    "end": "2207579"
  },
  {
    "text": "have a movie entity we have an active entity Tom Hanks over there",
    "start": "2207579",
    "end": "2212680"
  },
  {
    "text": "and we have a role that he has played inside a movie over here uh Natalie Portman who has played uh Nina Sayers in",
    "start": "2212680",
    "end": "2219880"
  },
  {
    "text": "the movie Black Swan now if you want to retrieve data out of",
    "start": "2219880",
    "end": "2226060"
  },
  {
    "text": "it how can we do it well if you want to move if we want to fetch a movie or an",
    "start": "2226060",
    "end": "2231880"
  },
  {
    "text": "actor we can do it by making use of the primary key movie and movie over here or",
    "start": "2231880",
    "end": "2237760"
  },
  {
    "text": "active and active over there and then the item will be returned",
    "start": "2237760",
    "end": "2243838"
  },
  {
    "text": "if you would like to fetch a movie and it's different actors at that moment we can make use of the query API and we can",
    "start": "2243940",
    "end": "2251079"
  },
  {
    "text": "say just specify movie over there and leave the sort key blank and then all the",
    "start": "2251079",
    "end": "2257740"
  },
  {
    "text": "information from the movie will be returned including its actors if you want to fetch an actor and its",
    "start": "2257740",
    "end": "2263680"
  },
  {
    "text": "roles that he has played at that moment we are not sufficient anymore with that table and then we have",
    "start": "2263680",
    "end": "2269859"
  },
  {
    "text": "to make use of that Global secondary index at that moment you can see that we",
    "start": "2269859",
    "end": "2275140"
  },
  {
    "text": "have flip the partition key over here sort key is now partition key and sort key is",
    "start": "2275140",
    "end": "2282339"
  },
  {
    "text": "now the partition key and then we can see the actor Tom Hanks has already played in Castaway and tour story",
    "start": "2282339",
    "end": "2290460"
  },
  {
    "text": "so this is actually how you can design your dynamodb table by making use of a",
    "start": "2291460",
    "end": "2297280"
  },
  {
    "text": "single table design I have not invented this myself the guys from AWS itself have created",
    "start": "2297280",
    "end": "2304420"
  },
  {
    "text": "this and if you want to learn more about it there is a very good book which is called dynamodb book from Alex debris",
    "start": "2304420",
    "end": "2311140"
  },
  {
    "text": "we're all the kind of different design patterns that you can use for your table",
    "start": "2311140",
    "end": "2316480"
  },
  {
    "text": "are listed in I highly recommend reading into that book",
    "start": "2316480",
    "end": "2322119"
  },
  {
    "text": "now back to our c-sharp application if we want to make use of dynamodb which sdks do you actually have well all the",
    "start": "2322119",
    "end": "2329980"
  },
  {
    "text": "sdks are available via nuget just go to AWS sdk.dynamodb version 2 and then you",
    "start": "2329980",
    "end": "2335980"
  },
  {
    "text": "have three different API models you have a standard data model and a particular API model",
    "start": "2335980",
    "end": "2342460"
  },
  {
    "text": "now how such a standard API model look well you have an Amazon dynamodb client",
    "start": "2342460",
    "end": "2348400"
  },
  {
    "text": "over here that you will have to specify and then you can start creating requests over here I'm going to create a query",
    "start": "2348400",
    "end": "2354099"
  },
  {
    "text": "request you specify the name of the table the key condition Expressions Etc",
    "start": "2354099",
    "end": "2360880"
  },
  {
    "text": "and then afterwards you can call your client and you're going to specify that request that you just recreated inside",
    "start": "2360880",
    "end": "2367420"
  },
  {
    "text": "your query and the results will come out as key value pairs so this is one way to fetch the data out",
    "start": "2367420",
    "end": "2374140"
  },
  {
    "text": "of dynamodb if you are the net developer and you",
    "start": "2374140",
    "end": "2380200"
  },
  {
    "text": "have already worked more with Entity framework or and hibernate then you're going to love more the data model API",
    "start": "2380200",
    "end": "2387940"
  },
  {
    "text": "what is that going to do we still have to specify the same dynamodb client but you're also going to specify another",
    "start": "2387940",
    "end": "2393400"
  },
  {
    "text": "modb context in that context you can make it a little bit easier you can specify for example",
    "start": "2393400",
    "end": "2399640"
  },
  {
    "text": "query async we're going to specify which kind of model it is and then on which partition key that you're going to",
    "start": "2399640",
    "end": "2405579"
  },
  {
    "text": "search in this example it will be Tom Hanks and then the results will come out in a type form",
    "start": "2405579",
    "end": "2411940"
  },
  {
    "text": "now how is this possible well we will have to specify as well how",
    "start": "2411940",
    "end": "2417280"
  },
  {
    "text": "the data looks like we can specify this in a different class which is a model over here where we will",
    "start": "2417280",
    "end": "2423880"
  },
  {
    "text": "add some attributes a dynamodb table attribute over here and as well a dynamodb hash key and a",
    "start": "2423880",
    "end": "2430720"
  },
  {
    "text": "dynamodb range key I don't know why they have specified it as a dynamodb hash key and dynamodb range game but they are",
    "start": "2430720",
    "end": "2437079"
  },
  {
    "text": "actually the partition key and the range key and the source key where I was talking about earlier don't know why",
    "start": "2437079",
    "end": "2442960"
  },
  {
    "text": "they did it like that then the third one is the particle API",
    "start": "2442960",
    "end": "2449920"
  },
  {
    "text": "and this is leading towards SQL that we have all seen in relational databases but I don't like this style actually",
    "start": "2449920",
    "end": "2458020"
  },
  {
    "text": "this style is good if you're going from a SQL background but it tends",
    "start": "2458020",
    "end": "2464079"
  },
  {
    "text": "to say to you well you can query On Any Given attribute that you have with the principles that I discard",
    "start": "2464079",
    "end": "2471099"
  },
  {
    "text": "discussed earlier still apply so over here you can query on an attribute called tiers 1995 over here",
    "start": "2471099",
    "end": "2478480"
  },
  {
    "text": "but what will end up is in a scan going over all the records in your dynamodb",
    "start": "2478480",
    "end": "2484480"
  },
  {
    "text": "table but it's perfectly possible and it makes maybe a little bit easier for new",
    "start": "2484480",
    "end": "2490240"
  },
  {
    "text": "developers to start using dynamodb",
    "start": "2490240",
    "end": "2494099"
  },
  {
    "text": "now another part that I'd like to discuss on serverless applications is the part of",
    "start": "2496660",
    "end": "2503520"
  },
  {
    "text": "identity management because it's something which is very present at the moment security is is a Hot Topic and",
    "start": "2503680",
    "end": "2509859"
  },
  {
    "text": "should be as well so making sure that your application is secure is something that Amazon Cognito can do for you if",
    "start": "2509859",
    "end": "2517180"
  },
  {
    "text": "you don't know Amazon Cognito if you don't know where to compare it to it you can compare it a little bit with identity servers or identity servers",
    "start": "2517180",
    "end": "2525040"
  },
  {
    "text": "from duende nowadays ah something like that",
    "start": "2525040",
    "end": "2531040"
  },
  {
    "text": "what do you have in Amazon Cognito you have either user pools and also identity",
    "start": "2531040",
    "end": "2537099"
  },
  {
    "text": "pools now what are identity pools identity pools",
    "start": "2537099",
    "end": "2542560"
  },
  {
    "text": "um if you're going to use them you can obtain some temporary AWS credentials which you can then afterwards use to",
    "start": "2542560",
    "end": "2549520"
  },
  {
    "text": "call other AWS services but that's not what we are going to discuss today we're going to discuss",
    "start": "2549520",
    "end": "2554619"
  },
  {
    "text": "more about user pools as well how about the user pools then well user pools or",
    "start": "2554619",
    "end": "2560200"
  },
  {
    "text": "like I mentioned over here a list of users or user directories and on that you can declare different",
    "start": "2560200",
    "end": "2568420"
  },
  {
    "text": "configurations like you can configure which security features that has to have",
    "start": "2568420",
    "end": "2573880"
  },
  {
    "text": "which password policies MFA should be enabled or not you can add identity",
    "start": "2573880",
    "end": "2579880"
  },
  {
    "text": "providers like Google Facebook Etc um and one nice thing that it has as well",
    "start": "2579880",
    "end": "2586420"
  },
  {
    "text": "is it has its own hosted UI so if you want to start making use of Amazon Cognito you don't have to write any",
    "start": "2586420",
    "end": "2593500"
  },
  {
    "text": "sign-in form or sign up form you can make use of that hosted UI on top of",
    "start": "2593500",
    "end": "2598540"
  },
  {
    "text": "that it also has good application integration into other applications from AWS for example inside API Gateway",
    "start": "2598540",
    "end": "2607800"
  },
  {
    "text": "now I will show a little demo how it can be used I'm going to show a little",
    "start": "2608020",
    "end": "2614560"
  },
  {
    "text": "application where we have a Swagger API we're going to call our API but he",
    "start": "2614560",
    "end": "2620020"
  },
  {
    "text": "cannot do it before he has been authenticated with Amazon cognito",
    "start": "2620020",
    "end": "2626220"
  },
  {
    "text": "and I hope it's going to stop oh it's going to start playing",
    "start": "2631180",
    "end": "2637440"
  },
  {
    "text": "yeah okay so we have actually a simple web API",
    "start": "2642640",
    "end": "2647980"
  },
  {
    "text": "created where we're going to add the different nuget packages from Amazon Cognito over there",
    "start": "2647980",
    "end": "2654720"
  },
  {
    "text": "what do we have to specify first of all in our program we have to specify which user pool that we are going to use and",
    "start": "2655599",
    "end": "2661720"
  },
  {
    "text": "in which region that we are going to edit we're still going to make use of default authentication so we'll specify that we",
    "start": "2661720",
    "end": "2668680"
  },
  {
    "text": "are going to use JWT authentication inside the JWT authentication part we're",
    "start": "2668680",
    "end": "2674680"
  },
  {
    "text": "going to specify that we're going to use Amazon Cognito we will have to specify that",
    "start": "2674680",
    "end": "2679839"
  },
  {
    "text": "it's the only valid issuer that we have on top of that over there we will add",
    "start": "2679839",
    "end": "2686079"
  },
  {
    "text": "the Cognito identity and because I'm using a Swagger as my",
    "start": "2686079",
    "end": "2691180"
  },
  {
    "text": "front-end application at that moment I will have to specify as well in Swagger that I'm going to use Cognito as our",
    "start": "2691180",
    "end": "2699180"
  },
  {
    "text": "identity provider and of course I should add the authentication and authorization part as",
    "start": "2699180",
    "end": "2705339"
  },
  {
    "text": "well otherwise it will not work now if you're going to store the application you will see that's just the",
    "start": "2705339",
    "end": "2712119"
  },
  {
    "text": "default weather controller that you will see but you will see that it's not going to work",
    "start": "2712119",
    "end": "2718780"
  },
  {
    "text": "by default so let me show you to just see that I'm not cheating you",
    "start": "2718780",
    "end": "2724900"
  },
  {
    "text": "so if you're going to the weather forecast controller if you're going to execute it",
    "start": "2724900",
    "end": "2731280"
  },
  {
    "text": "out you will see that we are ending up in a 401 which means yeah you're not allowed",
    "start": "2732099",
    "end": "2739000"
  },
  {
    "text": "to call this application at that moment so we're going to authorize we'll specify the client ID and over here you",
    "start": "2739000",
    "end": "2746260"
  },
  {
    "text": "can already see that we need to log in and this is the default user I have the",
    "start": "2746260",
    "end": "2753339"
  },
  {
    "text": "user interface of Amazon Cognito where you have a sign up and assignment page which is already hosted for you you",
    "start": "2753339",
    "end": "2758800"
  },
  {
    "text": "don't have to do anything special for that anymore you can then specify your username and",
    "start": "2758800",
    "end": "2764680"
  },
  {
    "text": "your password and afterwards you're going to login and the redirect it immediately to your Swagger application",
    "start": "2764680",
    "end": "2773140"
  },
  {
    "text": "if you're going to execute our API call now then it should work so let us try out and you can see now that for example",
    "start": "2773140",
    "end": "2780339"
  },
  {
    "text": "you see in the response that yeah we see all the different results over here back",
    "start": "2780339",
    "end": "2788640"
  },
  {
    "text": "now another part which is important for creating reactive applications a visual",
    "start": "2791980",
    "end": "2797380"
  },
  {
    "text": "serverless is API Gateway now with this API Gateway API Gateway is",
    "start": "2797380",
    "end": "2803200"
  },
  {
    "text": "actually the bridge between your front-end applications and your backend",
    "start": "2803200",
    "end": "2808240"
  },
  {
    "text": "applications and what do I think it is important well it is important because it allows you to",
    "start": "2808240",
    "end": "2814480"
  },
  {
    "text": "publish a scalable API in an easy way AWS will make sure that it handles the",
    "start": "2814480",
    "end": "2821500"
  },
  {
    "text": "responsive support of building your application so it will scale up and scale down I will make sure that it will",
    "start": "2821500",
    "end": "2827859"
  },
  {
    "text": "throttle your users if you are not allowed to go over your limits etc etc",
    "start": "2827859",
    "end": "2833619"
  },
  {
    "text": "there are three different flavors of AWS API Gateway available and you have rest",
    "start": "2833619",
    "end": "2838660"
  },
  {
    "text": "apis they can be private as well in your own AWS Cloud you have web socket apis and",
    "start": "2838660",
    "end": "2846099"
  },
  {
    "text": "you have HTTP apis HTTP apis are actually a slimmed down version of a",
    "start": "2846099",
    "end": "2852099"
  },
  {
    "text": "rest API but it tends to be the same way it tends to work the same way with just",
    "start": "2852099",
    "end": "2857800"
  },
  {
    "text": "less features a little bit cheaper as well how such a API Gateway looks like is",
    "start": "2857800",
    "end": "2864520"
  },
  {
    "text": "inside with resources you have API endpoints for your orders your get post",
    "start": "2864520",
    "end": "2871660"
  },
  {
    "text": "put methods over there for orders and users and then you have some models how such order looks like how this such a",
    "start": "2871660",
    "end": "2879760"
  },
  {
    "text": "user look like you have different stages that you can Define you have Dev test and plot for",
    "start": "2879760",
    "end": "2886900"
  },
  {
    "text": "example and then you can move from one stage to another stage in a very easy way but important over",
    "start": "2886900",
    "end": "2892839"
  },
  {
    "text": "here as well is that for each stage you can Define some caching if you want to remain uh responsive at all times or you",
    "start": "2892839",
    "end": "2899500"
  },
  {
    "text": "can Define your throttling there as well it has to be secure so it's going to add",
    "start": "2899500",
    "end": "2906040"
  },
  {
    "text": "so you can add your authorizers as well so those Cognito authorization you can add towards API",
    "start": "2906040",
    "end": "2913839"
  },
  {
    "text": "Gateway as well directly and you have Gateway responses",
    "start": "2913839",
    "end": "2919060"
  },
  {
    "text": "now other Gateway responses let's say that you are going to return a response from your backend towards your front-end",
    "start": "2919060",
    "end": "2925960"
  },
  {
    "text": "application and you need to change it a little bit well a Gateway response you can tweak the response that you returned",
    "start": "2925960",
    "end": "2932740"
  },
  {
    "text": "before it's going to go to your Frontline application so this can be",
    "start": "2932740",
    "end": "2937839"
  },
  {
    "text": "very handy if you want to mock for example some things um or do different styles as well",
    "start": "2937839",
    "end": "2946480"
  },
  {
    "text": "and then you have student direct Integrations as well and this is also very handy if for example you would like",
    "start": "2946480",
    "end": "2952240"
  },
  {
    "text": "to have an API Gateway from your API you would like to store data directly on a",
    "start": "2952240",
    "end": "2958300"
  },
  {
    "text": "queue then if you're going to use a direct integration you don't need any CPU or a",
    "start": "2958300",
    "end": "2964599"
  },
  {
    "text": "compute part anymore you can just go from API Gateway to sqs or to dynamodb table without anything",
    "start": "2964599",
    "end": "2973000"
  },
  {
    "text": "else being involved so it's very handy as well and then of course you have some core settings which",
    "start": "2973000",
    "end": "2979960"
  },
  {
    "text": "can be configured as well now we do have some other service some",
    "start": "2979960",
    "end": "2987099"
  },
  {
    "text": "other services which are available for serverless computing like Amazon x-ray I mentioned in the beginning as well that",
    "start": "2987099",
    "end": "2993280"
  },
  {
    "text": "if you're going to make use of AWS Lambda that you have a lot of moving parts inside your application landscape and it can be harder to debug or monitor",
    "start": "2993280",
    "end": "3000839"
  },
  {
    "text": "your application well Amazon x-ray is a solution for this they will make sure that you can see your distributed traces",
    "start": "3000839",
    "end": "3008579"
  },
  {
    "text": "across your application another thing is Amazon eventbridge",
    "start": "3008579",
    "end": "3014040"
  },
  {
    "text": "which can act as the service bus which I was talking about earlier or you can make use of escrows in",
    "start": "3014040",
    "end": "3020400"
  },
  {
    "text": "combination with SNS sqls is a queuing service where SNS is a notification service",
    "start": "3020400",
    "end": "3026339"
  },
  {
    "text": "Amazon S3 the most easy but a very good service about storing data inside the",
    "start": "3026339",
    "end": "3033000"
  },
  {
    "text": "cloud and then you still have a serverless component about uh",
    "start": "3033000",
    "end": "3038160"
  },
  {
    "text": "relational databases is at their own brand Amazon which can run as a",
    "start": "3038160",
    "end": "3044520"
  },
  {
    "text": "serverless service as well",
    "start": "3044520",
    "end": "3048440"
  },
  {
    "text": "now before we wrap up let me show you some different references so I mentioned earlier as well the dynamodb book if",
    "start": "3049680",
    "end": "3057059"
  },
  {
    "text": "you're more interested in how to design a database in dynamodb in a good manner",
    "start": "3057059",
    "end": "3062640"
  },
  {
    "text": "take a look especially at that one and then some more developer guides on each",
    "start": "3062640",
    "end": "3068280"
  },
  {
    "text": "part for example on Lambda Amazon dynamodb API Gateway Cognito",
    "start": "3068280",
    "end": "3074280"
  },
  {
    "text": "Etc I think that's it uh I thank you very",
    "start": "3074280",
    "end": "3080579"
  },
  {
    "text": "much for attending the last presentation for today um if there are any questions shoot",
    "start": "3080579",
    "end": "3088579"
  },
  {
    "text": "well um it depends like I mentioned you're not going to add a completely monolith",
    "start": "3094920",
    "end": "3100859"
  },
  {
    "text": "inside your Lambda function but you're going to split up into different responsibilities",
    "start": "3100859",
    "end": "3105900"
  },
  {
    "text": "and its responsibility can be a different Lambda function",
    "start": "3105900",
    "end": "3111259"
  },
  {
    "text": "you can develop a full web application as well where different Lambda functions are talking to each other with cues in",
    "start": "3113819",
    "end": "3120240"
  },
  {
    "text": "between and each application or each Lambda function has its own responsibility",
    "start": "3120240",
    "end": "3127099"
  },
  {
    "text": "for the HTML you can then if you're going to use a single page application that can be hosted on S3 for example and",
    "start": "3131760",
    "end": "3140099"
  },
  {
    "text": "from there on at that moment you can go to API Gateway and then to your Lambda function",
    "start": "3140099",
    "end": "3146960"
  },
  {
    "text": "correct S3 can be used as well for storing and hosting your web",
    "start": "3148200",
    "end": "3153300"
  },
  {
    "text": "applications okay and that in combination with the cloud front which I haven't mentioned over here but that can",
    "start": "3153300",
    "end": "3159540"
  },
  {
    "text": "be used for hosting your HTML CSS JavaScript Etc and the dynamodb",
    "start": "3159540",
    "end": "3166020"
  },
  {
    "text": "um uh the way you showed these slides there was the attribute section so",
    "start": "3166020",
    "end": "3171960"
  },
  {
    "text": "there's no concept of columns in in dynamodb well you can compare the attributes a",
    "start": "3171960",
    "end": "3178619"
  },
  {
    "text": "little bit with columns but but you have on the same column different names yes",
    "start": "3178619",
    "end": "3184020"
  },
  {
    "text": "so how does that work um there is no fixed schema if you",
    "start": "3184020",
    "end": "3189599"
  },
  {
    "text": "compare it with the relational database you have a fixed schema but when you're working with nosql databases you don't have a fixed schema",
    "start": "3189599",
    "end": "3197400"
  },
  {
    "text": "so it's perfectly possible that you have one entity who has five attributes or five columns",
    "start": "3197400",
    "end": "3203160"
  },
  {
    "text": "but another entity can have five different attributes and then those others will just not be",
    "start": "3203160",
    "end": "3208980"
  },
  {
    "text": "filled in they're not going to be known they're just not going to be there well so when you design the table",
    "start": "3208980",
    "end": "3215760"
  },
  {
    "text": "you don't specify how the the record will look like",
    "start": "3215760",
    "end": "3221099"
  },
  {
    "text": "um you will have to specify more how you will fetch and retrieve the data instead",
    "start": "3221099",
    "end": "3226559"
  },
  {
    "text": "of thinking of all the different columns that you would like to store inside your data in inside your records so is that",
    "start": "3226559",
    "end": "3234480"
  },
  {
    "text": "document it's called documents yes it's called documents yeah",
    "start": "3234480",
    "end": "3240380"
  },
  {
    "text": "I'll go back to Lambda um and when you mentioned about the warm-up groups",
    "start": "3254460",
    "end": "3261059"
  },
  {
    "text": "um if you are having a warm-up group anyway how different would that be from",
    "start": "3261059",
    "end": "3267000"
  },
  {
    "text": "for example using something like a container",
    "start": "3267000",
    "end": "3272880"
  },
  {
    "text": "base solution instead like what what would be the big difference can you",
    "start": "3272880",
    "end": "3278400"
  },
  {
    "text": "repeat so um if you have uh Lambda and you want it",
    "start": "3278400",
    "end": "3284640"
  },
  {
    "text": "to be uh warm up as much as possible yes",
    "start": "3284640",
    "end": "3290339"
  },
  {
    "text": "um the provision capacity that you yes so would it be better in this case to",
    "start": "3290339",
    "end": "3297780"
  },
  {
    "text": "have something like a container based or uh what would be the difference between",
    "start": "3297780",
    "end": "3303140"
  },
  {
    "text": "having a microservice in a container compared to a Lambda in in black case uh",
    "start": "3303140",
    "end": "3309480"
  },
  {
    "text": "it's a good question um it all depends on how much uh load you're going to expect on your",
    "start": "3309480",
    "end": "3315780"
  },
  {
    "text": "application as well if you have very unpredictable workloads it can be that AWS Lambda is",
    "start": "3315780",
    "end": "3323700"
  },
  {
    "text": "going to be a better fit just because it's going to be cheaper if you have for example at night you're not going to",
    "start": "3323700",
    "end": "3329400"
  },
  {
    "text": "have any resources which are required then you can scale down completely",
    "start": "3329400",
    "end": "3335339"
  },
  {
    "text": "various in a container that's also kind of possible but it will take a little bit longer to fetch to",
    "start": "3335339",
    "end": "3342240"
  },
  {
    "text": "Startup Etc um and another thing I",
    "start": "3342240",
    "end": "3347880"
  },
  {
    "text": "found is that if you have applications which are not going to be used a lot of times at that moment you can take a look",
    "start": "3347880",
    "end": "3354359"
  },
  {
    "text": "at Lambda as well if you don't care about for example the cold boot start then you don't have to take a look at",
    "start": "3354359",
    "end": "3360359"
  },
  {
    "text": "those uh Lambda warmers you can if you're working with asynchronous communication",
    "start": "3360359",
    "end": "3366300"
  },
  {
    "text": "and if you're working from a Queue at that moment it can be it depends on your",
    "start": "3366300",
    "end": "3371819"
  },
  {
    "text": "functionality or your business that you have to implement of course that you don't care about a cold boot of yeah 200",
    "start": "3371819",
    "end": "3379140"
  },
  {
    "text": "milliseconds or something like that so at that moment a Lambda function can still be a valid point",
    "start": "3379140",
    "end": "3384960"
  },
  {
    "text": "but if you take a look at those tuning in the application or those tunings applications that are shown you if you",
    "start": "3384960",
    "end": "3390480"
  },
  {
    "text": "take a look over there then you can see how much it's going to cost you and then you can create a calculation how much",
    "start": "3390480",
    "end": "3396359"
  },
  {
    "text": "load do you expect on your application and then compare it with the container and start AWS as well so then so then",
    "start": "3396359",
    "end": "3402780"
  },
  {
    "text": "you can see yeah what's the benefit of making use of AWS Lambda or another service like eks",
    "start": "3402780",
    "end": "3410300"
  },
  {
    "text": "anyone else sqs and event Bridge",
    "start": "3412079",
    "end": "3419220"
  },
  {
    "text": "so sqs and eventbridge both seem to be message buses",
    "start": "3419220",
    "end": "3424619"
  },
  {
    "text": "sqs is just a cue so it's just uh fifo",
    "start": "3424619",
    "end": "3431520"
  },
  {
    "text": "and ask us where you can you can leave that out if you want we're in an eventbridge you can even",
    "start": "3431520",
    "end": "3439319"
  },
  {
    "text": "specify if something happens then it has to Signal another service as well",
    "start": "3439319",
    "end": "3445500"
  },
  {
    "text": "so there's really a service bus where sqs is just a simple queue",
    "start": "3445500",
    "end": "3452720"
  },
  {
    "text": "so eventbridge also has the notice of subscribers and notifications of other",
    "start": "3453420",
    "end": "3459180"
  },
  {
    "text": "handlers where that's not the case in in a queue",
    "start": "3459180",
    "end": "3465079"
  },
  {
    "text": "so what we've done in a previous project is that we didn't at that moment even Bridge didn't exist at yet",
    "start": "3465420",
    "end": "3471980"
  },
  {
    "text": "so at that moment we were keeping track of the subscriptions ourselves and something needs to be done at that",
    "start": "3471980",
    "end": "3478920"
  },
  {
    "text": "moment to be send a message to all the queues of those different services that we had",
    "start": "3478920",
    "end": "3484980"
  },
  {
    "text": "we're making use of a of a library called Rebus and those who are",
    "start": "3484980",
    "end": "3490740"
  },
  {
    "text": "responsible for making sure that you could subscribe to a message and then handle the messages to the different queues that you had so you don't need an",
    "start": "3490740",
    "end": "3498660"
  },
  {
    "text": "event bridge if you're having a small application that's your viewers if you",
    "start": "3498660",
    "end": "3504480"
  },
  {
    "text": "like to move forward then eventbridge can be a very good Next Step",
    "start": "3504480",
    "end": "3510559"
  },
  {
    "text": "if you had your user base in Azure active directory",
    "start": "3513240",
    "end": "3518460"
  },
  {
    "text": "uh what you still use cognito",
    "start": "3518460",
    "end": "3522318"
  },
  {
    "text": "um honestly I don't know exactly how it would work in a zure active directory",
    "start": "3524040",
    "end": "3530280"
  },
  {
    "text": "um I'm not very familiar with it so I cannot answer it directly so the",
    "start": "3530280",
    "end": "3536880"
  },
  {
    "text": "there's no mention and Cognito that it works with a third party or something",
    "start": "3536880",
    "end": "3543480"
  },
  {
    "text": "like you can attach [Music] um active directory to towards towards",
    "start": "3543480",
    "end": "3549180"
  },
  {
    "text": "Cognito that's something which is possible and what we have done on premise you mean active yes ah so you",
    "start": "3549180",
    "end": "3556079"
  },
  {
    "text": "have direct Integrations for example with like Google or Facebook but also with",
    "start": "3556079",
    "end": "3562319"
  },
  {
    "text": "ldap and if your Azure active directory is supporting ldap at that moment you can attach it as well towards uh cognito",
    "start": "3562319",
    "end": "3571940"
  },
  {
    "text": "I think we'll wrap it up there are no more questions yeah awesome thank you so much Rob okay",
    "start": "3575400",
    "end": "3582860"
  },
  {
    "text": "[Applause]",
    "start": "3582860",
    "end": "3586039"
  }
]