[
  {
    "text": "questing the ride may all be in completely different time zones and so once again I got to learn a lot about",
    "start": "2919",
    "end": "8639"
  },
  {
    "text": "how painful time zones can be so I have a question for everybody I'm going to ask you some questions as we get started",
    "start": "8639",
    "end": "15480"
  },
  {
    "text": "what time is midnight on a 24-hour",
    "start": "15480",
    "end": "22240"
  },
  {
    "text": "clock zero I hear zero anybody have a different number okay",
    "start": "24199",
    "end": "30920"
  },
  {
    "text": "it's a trick question because there are two correct answers it can be zero to",
    "start": "30920",
    "end": "36079"
  },
  {
    "text": "represent Midnight at the start of the day or it can be 24 to represent",
    "start": "36079",
    "end": "41800"
  },
  {
    "text": "Midnight at the end of the day and it turns out this is actually fairly important because if you want to compare",
    "start": "41800",
    "end": "48520"
  },
  {
    "text": "times but don't want to compare dates sometimes you need to be able to do",
    "start": "48520",
    "end": "54120"
  },
  {
    "text": "that but not everything supports both of those values we're going to get into",
    "start": "54120",
    "end": "59480"
  },
  {
    "text": "that in a little bit later uh so when time complexity comes",
    "start": "59480",
    "end": "65040"
  },
  {
    "text": "into play as well things like leap seconds leap days Etc or if you only",
    "start": "65040",
    "end": "70759"
  },
  {
    "text": "have datetime objects for representation then it becomes even more important that you be able to calculate",
    "start": "70759",
    "end": "77400"
  },
  {
    "text": "changes in time within the day without necessarily changing dates and sometimes",
    "start": "77400",
    "end": "83280"
  },
  {
    "text": "we use a 12-hour clock of course with AM and PM instead of a 24-hour clock uh",
    "start": "83280",
    "end": "88479"
  },
  {
    "text": "where the am means antim meridium which is morning and PM means post meridium which is the afternoon um which do you",
    "start": "88479",
    "end": "96720"
  },
  {
    "text": "use primarily here do you use the 12-hour clock or the 24-hour clock mostly",
    "start": "96720",
    "end": "103479"
  },
  {
    "text": "24 I mostly use the 12-hour clock in the US but I use both obviously as a programmer I primarily use the 24-hour",
    "start": "103479",
    "end": "111360"
  },
  {
    "text": "clock uh so there are a lot of different aspects to representing and calculating",
    "start": "111360",
    "end": "118000"
  },
  {
    "text": "time that can come into play now you would like to think that we as",
    "start": "118000",
    "end": "124640"
  },
  {
    "text": "developers don't really need to consider all of these things but it's important to understand the kind of reasons that",
    "start": "124640",
    "end": "133120"
  },
  {
    "text": "things have gotten as complicated as they are uh we have to calculate time based upon the orbit of the sun this is",
    "start": "133120",
    "end": "139519"
  },
  {
    "text": "solar time this is what's typically done but to do that accurately you have to",
    "start": "139519",
    "end": "144840"
  },
  {
    "text": "account for things like the axial tilt and the geometry of our elliptical orbit around the sun",
    "start": "144840",
    "end": "150599"
  },
  {
    "text": "I don't want to do that math on a regular basis but that is what leads to things like leap seconds and leap",
    "start": "150599",
    "end": "159720"
  },
  {
    "text": "years we can also use atomic time which is extremely accurate but is not readily",
    "start": "159720",
    "end": "165720"
  },
  {
    "text": "accessible to us I don't have an atomic clock in my pocket nor can I have one",
    "start": "165720",
    "end": "171280"
  },
  {
    "text": "there at the moment so while my phone may synchronize",
    "start": "171280",
    "end": "176519"
  },
  {
    "text": "with an atomic clock for accuracy my phone itself is not an atomic clock for example so it's useful as a reference",
    "start": "176519",
    "end": "185000"
  },
  {
    "text": "point but it's not really useful for our day-to-day operations what is important though is how definitions have have",
    "start": "185000",
    "end": "190360"
  },
  {
    "text": "changed over time how time zones change regularly for example",
    "start": "190360",
    "end": "197760"
  },
  {
    "text": "um International politics play just as big or more important of a role for us",
    "start": "197760",
    "end": "204640"
  },
  {
    "text": "as developers and how we deal with time then the the or of the Earth around the",
    "start": "204640",
    "end": "210599"
  },
  {
    "text": "Sun for example not every country acknowledges or tracks daylight savings time the ones",
    "start": "210599",
    "end": "217959"
  },
  {
    "text": "that do very rarely change their clocks on the same date which means that",
    "start": "217959",
    "end": "224439"
  },
  {
    "text": "countries are constantly in and out of sync with one another in terms of what time it",
    "start": "224439",
    "end": "230560"
  },
  {
    "text": "is uh and while basic geometry could draw perfect lines on a map for 24 even",
    "start": "230560",
    "end": "235959"
  },
  {
    "text": "time zones humans are much much more complex than this",
    "start": "235959",
    "end": "241719"
  },
  {
    "text": "this is our Global reality at least at one point in time I make no promises for the current accuracy of this map but you",
    "start": "242439",
    "end": "249599"
  },
  {
    "text": "see all the carve outs and so while for example Copenhagen and Berlin are in",
    "start": "249599",
    "end": "254840"
  },
  {
    "text": "their approximate time zone the same cannot be said for France or",
    "start": "254840",
    "end": "260680"
  },
  {
    "text": "Spain they're completely out of line with what you would expect uh and",
    "start": "260680",
    "end": "267759"
  },
  {
    "text": "Iceland do you see Iceland way out there what you doing bud that's not your time zone look at the International Date Line",
    "start": "267759",
    "end": "274720"
  },
  {
    "text": "all the way on the right hand side line I can draw straighter lines of that",
    "start": "274720",
    "end": "280479"
  },
  {
    "text": "when I'm drunk I mean come on and but this is what we have to deal with this is the type of math we have to handle",
    "start": "280479",
    "end": "286320"
  },
  {
    "text": "when we want to deal with time zones and I assure you that nobody in the room knows all the information conveyed in",
    "start": "286320",
    "end": "293400"
  },
  {
    "text": "this map off the top of your head nor should you have to so interestingly enough because of",
    "start": "293400",
    "end": "300919"
  },
  {
    "text": "daylight savings times we can have multiple T time zones in the same time zone so I am in US eastern time which is",
    "start": "300919",
    "end": "310240"
  },
  {
    "text": "represented often as ET so part of the year it's EST and the other part of the year it's",
    "start": "310240",
    "end": "318319"
  },
  {
    "text": "EDT right so that's not confusing at all and that changes the difference between",
    "start": "318319",
    "end": "325680"
  },
  {
    "text": "uh you know where I am and the European time zone at different points in time because it turns out the United States",
    "start": "325680",
    "end": "332120"
  },
  {
    "text": "and Denmark don't change clocks for daylight savings time at the same time so sometimes there's a six-hour",
    "start": "332120",
    "end": "337160"
  },
  {
    "text": "difference and sometimes there's a s-h hour difference depending on the exact date that it is fortunately it doesn't",
    "start": "337160",
    "end": "344120"
  },
  {
    "text": "happen on this trip but I have had trips to Europe where Daylight Savings Time",
    "start": "344120",
    "end": "349759"
  },
  {
    "text": "happened during that trip so like you go from being six hours from home to 7 hours from home in the middle of the",
    "start": "349759",
    "end": "355639"
  },
  {
    "text": "trip and that's always fun um even better better are all of the",
    "start": "355639",
    "end": "361120"
  },
  {
    "text": "different time zones that are off by amounts other than 1 hour 30 minutes or",
    "start": "361120",
    "end": "367720"
  },
  {
    "text": "even 45 minutes that makes math super tricky and at this moment I feel I need",
    "start": "367720",
    "end": "374400"
  },
  {
    "text": "to remind you that time is basically a social construct at least the way we talk about and represent and work with",
    "start": "374400",
    "end": "381440"
  },
  {
    "text": "time and we have lots of different ways about talking about time zones the first",
    "start": "381440",
    "end": "387440"
  },
  {
    "text": "is of course the UTC offset which gives us a very concrete understanding of where in the world the time zone is and",
    "start": "387440",
    "end": "393639"
  },
  {
    "text": "how to calculate it and it's accurate regardless of if DST is in play or not",
    "start": "393639",
    "end": "398919"
  },
  {
    "text": "because you're going to use the correct offset for where you were at that moment in time I really like this from a",
    "start": "398919",
    "end": "406440"
  },
  {
    "text": "programmatic standpoint this is my preference because it makes it really easy for me to calculate things it is",
    "start": "406440",
    "end": "412520"
  },
  {
    "text": "not always the most useful when dealing with humans however because humans have",
    "start": "412520",
    "end": "417840"
  },
  {
    "text": "things like name and abbreviations for time zones things like EST and EDT the",
    "start": "417840",
    "end": "424400"
  },
  {
    "text": "one of the challenges though is that we have these things Eastern Standard time",
    "start": "424400",
    "end": "430319"
  },
  {
    "text": "EST is different from like British summertime which is also BST so you have",
    "start": "430319",
    "end": "437000"
  },
  {
    "text": "St and St and you think oh these are the same Concepts well it turns out one of those is actually the winter time the",
    "start": "437000",
    "end": "442720"
  },
  {
    "text": "other's the summer time it gets really comp complicated but all of these here -4 GM T EST EDT and",
    "start": "442720",
    "end": "451440"
  },
  {
    "text": "America New York those all represent eastern time in the United States",
    "start": "451440",
    "end": "457280"
  },
  {
    "text": "although sometimes eastern time is neg5 not ne4 right and so we have to kind of",
    "start": "457280",
    "end": "463000"
  },
  {
    "text": "account for all of this one of the ways that we one of the",
    "start": "463000",
    "end": "468919"
  },
  {
    "text": "big benefits we have today is we actually have Coordinated Time we have really good time coordination this is not always been the case GMT or grenwich",
    "start": "468919",
    "end": "476199"
  },
  {
    "text": "meantime was established in 1884 and time coordination between countries",
    "start": "476199",
    "end": "481639"
  },
  {
    "text": "has been continuously refined since that point in time located in Britain GMT can",
    "start": "481639",
    "end": "487759"
  },
  {
    "text": "be confused as British time but since daylight savings time is observed this yields BST which is British summertime",
    "start": "487759",
    "end": "495400"
  },
  {
    "text": "which is a different time from GMT uh right and so this is this get",
    "start": "495400",
    "end": "500879"
  },
  {
    "text": "super confusing GMT also used to be referred to as zero time which became",
    "start": "500879",
    "end": "507240"
  },
  {
    "text": "Zed time or Z time and on radios Z became a zebra or zebra but with the N",
    "start": "507240",
    "end": "515000"
  },
  {
    "text": "NATO phenetic alphabet eventually we were ref find that down to Zulu time and that is how you'll hear it referred to",
    "start": "515000",
    "end": "520760"
  },
  {
    "text": "today so when you see the Z in your time strings that refers to Zulu time which",
    "start": "520760",
    "end": "528080"
  },
  {
    "text": "is effectively GMT UTC which is what we're most",
    "start": "528080",
    "end": "533279"
  },
  {
    "text": "commonly working with is not actually a time zone it is a time standard that",
    "start": "533279",
    "end": "539200"
  },
  {
    "text": "Happ happens to align with the GMT and Zulu time zones that had previously been in use and it does utilize atomic time",
    "start": "539200",
    "end": "546920"
  },
  {
    "text": "and atomic time standard to Define precisely what UTC is for international",
    "start": "546920",
    "end": "554480"
  },
  {
    "text": "use now UTC is an international abbreviation that is the same in all languages and is a product of the",
    "start": "554480",
    "end": "560680"
  },
  {
    "text": "English coordinated universal time and the pardon my French temp Universal",
    "start": "560680",
    "end": "566440"
  },
  {
    "text": "cordon and the astute listener would notice that neither of these languages would the abbreviation be UTC despite",
    "start": "566440",
    "end": "573360"
  },
  {
    "text": "those three same letters existing in both of those abbreviations right it's you want it to be cut and you want",
    "start": "573360",
    "end": "580519"
  },
  {
    "text": "it to be this other thing and so we're just going to rearrange the letters in some other way that makes nobody happy and that's the new standard there",
    "start": "580519",
    "end": "586360"
  },
  {
    "text": "therefore U UTC was born and this is important because this is now the way we",
    "start": "586360",
    "end": "591760"
  },
  {
    "text": "do everything in terms of our calculations we have a standard point that we can calculate from if we didn't",
    "start": "591760",
    "end": "597079"
  },
  {
    "text": "have this time zone math would be borderline impossible so if you're really",
    "start": "597079",
    "end": "604120"
  },
  {
    "text": "interested in the history of how we got here with dates specifically and",
    "start": "604120",
    "end": "609560"
  },
  {
    "text": "calendars which I'm not going into calendars at all I'm focusing on time but if you're really interested in the date history uh while I was writing this",
    "start": "609560",
    "end": "616440"
  },
  {
    "text": "talk one of my friends Ben Dean gave a really fantastic do talk about dates and",
    "start": "616440",
    "end": "621519"
  },
  {
    "text": "calendars at C++ now uh last year so feel free to check that out if you're",
    "start": "621519",
    "end": "626920"
  },
  {
    "text": "really interested in nerding out about calendar so quick quiz got a few questions for",
    "start": "626920",
    "end": "634680"
  },
  {
    "text": "you first of all what time zone is this in you can't really tell and I'll zoom",
    "start": "634680",
    "end": "641639"
  },
  {
    "text": "in on it for you you still can't tell it's just a time so this is a screenshot",
    "start": "641639",
    "end": "647839"
  },
  {
    "text": "from data dog and it turns out to know what time zone this is in you have to",
    "start": "647839",
    "end": "654200"
  },
  {
    "text": "dig through your personal settings to figure that out and it uses this weird",
    "start": "654200",
    "end": "659880"
  },
  {
    "text": "combination of your server time and your own personal time choices to make a",
    "start": "659880",
    "end": "666040"
  },
  {
    "text": "decision and how to represent times but it doesn't tell you what it chose you got to kind of figure that out for your",
    "start": "666040",
    "end": "672160"
  },
  {
    "text": "own this is important because one of the big lessons and takeaways for us as",
    "start": "672160",
    "end": "678600"
  },
  {
    "text": "developers and how we handle time zones is to be super transparent with our",
    "start": "678600",
    "end": "684240"
  },
  {
    "text": "users what time they're operating in why well the that I was dealing with in this",
    "start": "684240",
    "end": "690839"
  },
  {
    "text": "situation were three time zones removed from where I was so it really mattered",
    "start": "690839",
    "end": "696959"
  },
  {
    "text": "if it was in the server time zone or in my time zone and that radically changed",
    "start": "696959",
    "end": "702399"
  },
  {
    "text": "how I was going to troubleshoot a problem when it was occurring I needed to know that and that information was",
    "start": "702399",
    "end": "707480"
  },
  {
    "text": "not readily available uh what time zone is this data in this is a Google Cloud",
    "start": "707480",
    "end": "715279"
  },
  {
    "text": "screenshot PDT Pacific Daylight Time this one is good because it's telling me",
    "start": "716360",
    "end": "723200"
  },
  {
    "text": "right off the bat what time zone the data is being presented in no ambiguity this is the type of thing that I'm",
    "start": "723200",
    "end": "729360"
  },
  {
    "text": "looking for especially in a logging application when I'm working through times so let's get into JavaScript for a",
    "start": "729360",
    "end": "736079"
  },
  {
    "text": "minute in what time zone does this code",
    "start": "736079",
    "end": "742000"
  },
  {
    "text": "output local we have consensus on local okay uh",
    "start": "743120",
    "end": "749680"
  },
  {
    "text": "no this outputs the Unix Epoch in",
    "start": "749680",
    "end": "754519"
  },
  {
    "text": "UTC not necessarily useful but that's what it does what about this one you",
    "start": "754839",
    "end": "760279"
  },
  {
    "text": "take a date you do two string what time zone is going to be included in that string",
    "start": "760279",
    "end": "766600"
  },
  {
    "text": "output local yes you're correct it is based on the device system time zone and this so",
    "start": "771720",
    "end": "778800"
  },
  {
    "text": "it's important because this means you'll get different answers on servers in different regions or on different users",
    "start": "778800",
    "end": "785199"
  },
  {
    "text": "devices and this is actually one of the challenges like I love node and I use node a lot but using JavaScript on a",
    "start": "785199",
    "end": "792040"
  },
  {
    "text": "server can have challenges with regards to recording timestamps if you use the",
    "start": "792040",
    "end": "798800"
  },
  {
    "text": "wrong method to do that uh and finally date. to ISO string",
    "start": "798800",
    "end": "804959"
  },
  {
    "text": "what time zone does this code output",
    "start": "804959",
    "end": "809240"
  },
  {
    "text": "yeah UTC yes everybody got the last two correct good job so let's take a minute to walk",
    "start": "810000",
    "end": "817160"
  },
  {
    "text": "through some real scenarios things that I have come across in most cases where",
    "start": "817160",
    "end": "822959"
  },
  {
    "text": "time zones may come into play and I would like to as we're talking through this hear about your experiences also so",
    "start": "822959",
    "end": "829720"
  },
  {
    "text": "the first couple examples I'm going to give are using US time zones because it provides some very concrete challenging",
    "start": "829720",
    "end": "836160"
  },
  {
    "text": "examples that I run into all the time my us team is in Pacific mountain in eastern times so on a daily basis I'm in",
    "start": "836160",
    "end": "843759"
  },
  {
    "text": "three different time zones um as opposed to Central European Time which basically",
    "start": "843759",
    "end": "849600"
  },
  {
    "text": "covers all of my experience in traveling to Europe Copenhagen Berlin Amsterdam Paris Rome Naples and even maresh and",
    "start": "849600",
    "end": "857399"
  },
  {
    "text": "agader are all basically the same time zone much less challenging on the day-to-day",
    "start": "857399",
    "end": "863199"
  },
  {
    "text": "basis in that situation so this probably seems somewhat ridiculous but is amazing to me",
    "start": "863199",
    "end": "870440"
  },
  {
    "text": "how many software companies Run West Coast servers regardless of where they are in the United",
    "start": "870440",
    "end": "876959"
  },
  {
    "text": "States and how many pizza chains are headquartered in Denver Colorado no idea",
    "start": "876959",
    "end": "883480"
  },
  {
    "text": "why had to look that one up but what's even weirder is you can end up with these bizarre situations where somebody",
    "start": "883480",
    "end": "890360"
  },
  {
    "text": "may live in one state and the next state over is actually the closest pizza",
    "start": "890360",
    "end": "896480"
  },
  {
    "text": "delivery and it may only be a couple month miles few kilometers super close",
    "start": "896480",
    "end": "902440"
  },
  {
    "text": "but you're actually in different states and you're in different time zones so this is not really a concocted this is a very",
    "start": "902440",
    "end": "910480"
  },
  {
    "text": "real situation that can occur so what happens if you're at home you get on the pizza website and you order use the app",
    "start": "910480",
    "end": "918160"
  },
  {
    "text": "or whatever to order the pizza and that order goes in in your",
    "start": "918160",
    "end": "923600"
  },
  {
    "text": "time zone we don't want the order to show up as an hour late",
    "start": "923600",
    "end": "929480"
  },
  {
    "text": "as second it shows up at the pizza place just because they happen to be an hour ahead nor do we want you sitting at home",
    "start": "929480",
    "end": "935680"
  },
  {
    "text": "to order your pizza and you're expecting it to arrive and you don't realize that the store closed an hour earlier because",
    "start": "935680",
    "end": "941959"
  },
  {
    "text": "you're an hour off those are not scenarios that we would like to have happen but those are very real scenarios",
    "start": "941959",
    "end": "948720"
  },
  {
    "text": "that can happen if we don't account for the time zones correctly between the",
    "start": "948720",
    "end": "954600"
  },
  {
    "text": "person placing the order the person receiving the order and of course the where the order is going to in the first",
    "start": "954600",
    "end": "960680"
  },
  {
    "text": "place which is the server itself so I have to handle all the situations and",
    "start": "960680",
    "end": "965839"
  },
  {
    "text": "even more interesting we have to account for the fact that somebody in some pizza",
    "start": "965839",
    "end": "972199"
  },
  {
    "text": "headquarters in a completely different time zone is going to want to pull up a report of all the orders that have gone",
    "start": "972199",
    "end": "977600"
  },
  {
    "text": "through their system and figure out what's going on and it needs to show correctly when the order was placed in",
    "start": "977600",
    "end": "985920"
  },
  {
    "text": "reference to when it was delivered regardless of the fact fact that that's happening in two different time",
    "start": "985920",
    "end": "991040"
  },
  {
    "text": "zones anybody run into a situation anything like this before in your code",
    "start": "991040",
    "end": "998399"
  },
  {
    "text": "yeah what's your",
    "start": "998399",
    "end": "1001800"
  },
  {
    "text": "example nice a system running on a boat and the",
    "start": "1008759",
    "end": "1013839"
  },
  {
    "text": "boat is moving between time zones love it",
    "start": "1013839",
    "end": "1018560"
  },
  {
    "text": "custom boat time zone that's that's really cool that's really cool definitely never run into that one",
    "start": "1021160",
    "end": "1029280"
  },
  {
    "text": "before all right let me talk about my own startup for a minute because this is one of the first places that I really",
    "start": "1029280",
    "end": "1034438"
  },
  {
    "text": "ran into just how painful this can be in our very first Incarnation getting off the ground we had a single serverless",
    "start": "1034439",
    "end": "1041600"
  },
  {
    "text": "provider located in the central time zone parking lots in the Eastern Time",
    "start": "1041600",
    "end": "1047079"
  },
  {
    "text": "Zone and a support team in mountain time and this doesn't sound like a",
    "start": "1047079",
    "end": "1052280"
  },
  {
    "text": "really big deal but when somebody is trying to check into a parking lot with",
    "start": "1052280",
    "end": "1058080"
  },
  {
    "text": "their app they're presumably located in the same time zone as that parking lot",
    "start": "1058080",
    "end": "1064880"
  },
  {
    "text": "is but not always if somebody travels from a different time zone and comes",
    "start": "1064880",
    "end": "1071640"
  },
  {
    "text": "there and they choose not to update their device to the local time it means",
    "start": "1071640",
    "end": "1077440"
  },
  {
    "text": "that the time on their phone is actually different from the time in the lot we have to account for",
    "start": "1077440",
    "end": "1082960"
  },
  {
    "text": "that just as importantly if my support team is two hours removed from the",
    "start": "1082960",
    "end": "1088320"
  },
  {
    "text": "parking lot and they're trying to figure out when something happened then they need to be able to",
    "start": "1088320",
    "end": "1094360"
  },
  {
    "text": "see what happened in the time zone of that lot not in their own time zone but",
    "start": "1094360",
    "end": "1100760"
  },
  {
    "text": "by default JavaScript always operates in either UTC or the local time zone of the",
    "start": "1100760",
    "end": "1107840"
  },
  {
    "text": "device that you're currently on but in this case the local time zone of the device the support team is currently on",
    "start": "1107840",
    "end": "1114440"
  },
  {
    "text": "is no relevance whatsoever to where the parking lot is or where the customer was interacting with it it's not useful to",
    "start": "1114440",
    "end": "1122480"
  },
  {
    "text": "me so it means that I have to come up with a way to work around the deficiency of JavaScript date times which is that",
    "start": "1122480",
    "end": "1129159"
  },
  {
    "text": "it's always in my time zone makes it starts to make it really really interesting in that situation so",
    "start": "1129159",
    "end": "1136080"
  },
  {
    "text": "there's a bunch of different considerations we have to come into users may use local versus home time on their device right like right now I'm in",
    "start": "1136080",
    "end": "1144520"
  },
  {
    "text": "Copenhagen but I expect to see the correct info when I pull up my support and admin tools back",
    "start": "1144520",
    "end": "1152039"
  },
  {
    "text": "there uh we need to be able to answer questions whether it's for the support team or for users is the parking lot",
    "start": "1152039",
    "end": "1158679"
  },
  {
    "text": "currently open so if there's a a period of time",
    "start": "1158679",
    "end": "1164159"
  },
  {
    "text": "that it's open I need to make sure that I am comparing the user's time within",
    "start": "1164159",
    "end": "1169400"
  },
  {
    "text": "the time range that the lot is open in the same time zone I've got to make that",
    "start": "1169400",
    "end": "1175760"
  },
  {
    "text": "correction what is the current price because our pricing changes based upon",
    "start": "1175760",
    "end": "1180880"
  },
  {
    "text": "the time of day and so that's important uh if we as we open more",
    "start": "1180880",
    "end": "1187159"
  },
  {
    "text": "parking lots in different time zones now we've just added to the complexity as we add more Cloud platform regions because",
    "start": "1187159",
    "end": "1193240"
  },
  {
    "text": "we're opening more Lots now we have even more time zones on the server side that we have to account for",
    "start": "1193240",
    "end": "1199240"
  },
  {
    "text": "same with the support team we now have support team in two different time zones and so if if we add all four major",
    "start": "1199240",
    "end": "1206679"
  },
  {
    "text": "US time zones across all of these activities of support and parking l",
    "start": "1206679",
    "end": "1212000"
  },
  {
    "text": "properties and servers we now have like 256 possible combinations of",
    "start": "1212000",
    "end": "1217720"
  },
  {
    "text": "interactions between time zones we have to make all of those things work it gets complicated fast here's a a",
    "start": "1217720",
    "end": "1225799"
  },
  {
    "text": "situation I'm sure that we're all familiar with basic AAL travel so in this example I'm starting from Denver",
    "start": "1225799",
    "end": "1232520"
  },
  {
    "text": "Colorado and I'm flying to Berlin and I have to make two layovers along the way",
    "start": "1232520",
    "end": "1237559"
  },
  {
    "text": "each of those layovers is itself in a completely different time zone why is this important because I",
    "start": "1237559",
    "end": "1244039"
  },
  {
    "text": "want my boarding pass to show the local time for my arrival and departures it's",
    "start": "1244039",
    "end": "1250760"
  },
  {
    "text": "not useful if my boarding pass had a departure time in the time zone I started in instead of in the local time",
    "start": "1250760",
    "end": "1257080"
  },
  {
    "text": "zone when I get there because now when when I arrive it's really hard to figure out when am I supposed to be there",
    "start": "1257080",
    "end": "1262120"
  },
  {
    "text": "exactly don't make me as the user do the hard work and this seems trivial but we",
    "start": "1262120",
    "end": "1269120"
  },
  {
    "text": "have to make those adjustments because I ordered the flight in one time zone and the destinations in another and now I've",
    "start": "1269120",
    "end": "1274919"
  },
  {
    "text": "got to be able to do these steps along the way JavaScript doesn't do this very",
    "start": "1274919",
    "end": "1280400"
  },
  {
    "text": "well so as we head to the back half of the talk where we actually get into the JavaScript and typescript code I want to",
    "start": "1280760",
    "end": "1286039"
  },
  {
    "text": "pause for a moment to discuss how we stored datetime objects in a database has everyone heard that the",
    "start": "1286039",
    "end": "1292960"
  },
  {
    "text": "best way to store datetime objects is in UTC right and it it makes sense for a",
    "start": "1292960",
    "end": "1300600"
  },
  {
    "text": "lot of things but I actually don't prefer this approach for all cases anymore it is not universally the best",
    "start": "1300600",
    "end": "1307440"
  },
  {
    "text": "approach I'd say it's the best default approach uh and so like for system",
    "start": "1307440",
    "end": "1312720"
  },
  {
    "text": "generated timestamps I usually prefer things like UTC because I really don't care where the server was located",
    "start": "1312720",
    "end": "1319679"
  },
  {
    "text": "I just need to know in a coordinated way when the event happened but it can be incredibly",
    "start": "1319679",
    "end": "1327360"
  },
  {
    "text": "important for me to know exactly what the time zone the user was in when they",
    "start": "1327360",
    "end": "1333320"
  },
  {
    "text": "performed an operation so for user generated times a lot of times I prefer to keep the time",
    "start": "1333320",
    "end": "1340400"
  },
  {
    "text": "zone information as part of that date time entry and then I don't have to look up",
    "start": "1340400",
    "end": "1348039"
  },
  {
    "text": "time zone information in the future when I'm trying to communicate and coordinate with that user and it doesn't mean that they're always going to be in that time",
    "start": "1348039",
    "end": "1354360"
  },
  {
    "text": "zone but they were in that time zone at the moment they created that record so I do generally prefer to keep",
    "start": "1354360",
    "end": "1360840"
  },
  {
    "text": "things with that time zone and if if if you have the offset if you store the offset you can always calculate UTC from",
    "start": "1360840",
    "end": "1367200"
  },
  {
    "text": "that it's pretty trivial to do every Library even the JavaScript data object",
    "start": "1367200",
    "end": "1373200"
  },
  {
    "text": "which is horrible can handle that much for us",
    "start": "1373200",
    "end": "1379000"
  },
  {
    "text": "so some some time representation details in JavaScript that we need to know um",
    "start": "1379360",
    "end": "1385200"
  },
  {
    "text": "Epoch is one of the formats these are the different ways we can represent time so the first one is Epoch this is the",
    "start": "1385200",
    "end": "1390559"
  },
  {
    "text": "number of milliseconds since the Unix Epoch on January 1 1970 in",
    "start": "1390559",
    "end": "1397080"
  },
  {
    "text": "UTC it's always UTC Unix Epoch is always UTC we can also have a timestamp",
    "start": "1397080",
    "end": "1406200"
  },
  {
    "text": "so I bring this up because because in the language of JavaScript timestamp",
    "start": "1406200",
    "end": "1412279"
  },
  {
    "text": "refers to the date object itself in almost all other use cases we",
    "start": "1412279",
    "end": "1418440"
  },
  {
    "text": "use timestamp to mean something completely different from this which is why I bring it up it's the date object",
    "start": "1418440",
    "end": "1424080"
  },
  {
    "text": "in the device local and time zone that's the JavaScript definition of a",
    "start": "1424080",
    "end": "1430320"
  },
  {
    "text": "timestamp ISO of course is the iso formatted string and we also have RFC 7231 one",
    "start": "1430320",
    "end": "1439240"
  },
  {
    "text": "format strings which not my favorite thing to say it can be used a decent",
    "start": "1439240",
    "end": "1445360"
  },
  {
    "text": "bit and we have finally the JavaScript datetime strings which are very much not",
    "start": "1445360",
    "end": "1451760"
  },
  {
    "text": "my favorite and they can be really hard to parse they do fortunately include the time zone offset and the time zone",
    "start": "1451760",
    "end": "1459120"
  },
  {
    "text": "abbreviation uh and the day of the week so it's the most comprehensive but they're not necessarily always completely totally standard and then",
    "start": "1459120",
    "end": "1465520"
  },
  {
    "text": "finally the local date time which you'll probably have noticed is very different from the local date time",
    "start": "1465520",
    "end": "1473159"
  },
  {
    "text": "here because in this case it's Daymon year instead of well sorry this is day",
    "start": "1473159",
    "end": "1478240"
  },
  {
    "text": "month year instead of month day year which is what we see in some places anyway the EPO is interesting we have",
    "start": "1478240",
    "end": "1487120"
  },
  {
    "text": "date. now we have date. UTC where you can pass in all these different parameters and still get an Epoch back",
    "start": "1487120",
    "end": "1494159"
  },
  {
    "text": "we can try parsing a string using date. parse hint don't ever use date. parse does",
    "start": "1494159",
    "end": "1501000"
  },
  {
    "text": "anybody know why there's no official standard",
    "start": "1501000",
    "end": "1506799"
  },
  {
    "text": "implementation for date. parse which means every single JavaScript engine",
    "start": "1506799",
    "end": "1512120"
  },
  {
    "text": "does it slightly differently which is a problem so",
    "start": "1512120",
    "end": "1517720"
  },
  {
    "text": "depending on the browser you're using the specific it can be even the specific build version of something you're going",
    "start": "1517720",
    "end": "1523360"
  },
  {
    "text": "to get different results for the exact same datetime string",
    "start": "1523360",
    "end": "1529480"
  },
  {
    "text": "uh date. value and get time is a way to take an existing instance of a date",
    "start": "1529480",
    "end": "1535120"
  },
  {
    "text": "object and get the epoch back out of it this is my least favorite I think of",
    "start": "1535120",
    "end": "1542200"
  },
  {
    "text": "all of them which is date. set time that's right date objects in",
    "start": "1542200",
    "end": "1548559"
  },
  {
    "text": "JavaScript are mutable and you can change it to a specific",
    "start": "1548559",
    "end": "1555080"
  },
  {
    "text": "Epoch so that's really not ideal uh and finally you can create a new date",
    "start": "1555080",
    "end": "1561799"
  },
  {
    "text": "object from an Epoch and this is actually something that we probably do a lot I would say date. now and new date",
    "start": "1561799",
    "end": "1568640"
  },
  {
    "text": "from an Epoch are two of the most common JavaScript date things that I see people",
    "start": "1568640",
    "end": "1573799"
  },
  {
    "text": "use and it's not horrible because they're in UTC we just have to account",
    "start": "1573799",
    "end": "1579600"
  },
  {
    "text": "for that what does get interesting though is that Epoch math I wouldn't say it",
    "start": "1579600",
    "end": "1587919"
  },
  {
    "text": "doesn't work work as expected it works exactly like you would expect it just doesn't always produce the results you",
    "start": "1587919",
    "end": "1593679"
  },
  {
    "text": "would expect so this example we're getting the",
    "start": "1593679",
    "end": "1599799"
  },
  {
    "text": "epoch out of a date we're adding one millisecond and then creating a new date",
    "start": "1599799",
    "end": "1607279"
  },
  {
    "text": "from that time and we're trying to compare them and as you can see we went back in",
    "start": "1607279",
    "end": "1613559"
  },
  {
    "text": "time we added a millisecond and rolled back 59 hours 59 minutes and 999",
    "start": "1613559",
    "end": "1620080"
  },
  {
    "text": "milliseconds why because that was the millisecond that rolled us into daylight",
    "start": "1620080",
    "end": "1625960"
  },
  {
    "text": "savings time and so nobody is going to",
    "start": "1625960",
    "end": "1631080"
  },
  {
    "text": "intuitively look at these two date time strings and say there's only one",
    "start": "1631080",
    "end": "1636440"
  },
  {
    "text": "millisecond difference between these you're were going to say there's almost an hour between these but there's",
    "start": "1636440",
    "end": "1643640"
  },
  {
    "text": "not and so regardless of which direction you're going in if you're you're doing the math in the epoch or you're",
    "start": "1643640",
    "end": "1650200"
  },
  {
    "text": "calculating the diff back into Epoch it's not going to make sense to you and this is exactly why we shouldn't be",
    "start": "1650200",
    "end": "1656880"
  },
  {
    "text": "trusted with time zone math fortunately there are a large",
    "start": "1656880",
    "end": "1662360"
  },
  {
    "text": "number of other ways we can get data information out that should probably definitely help date. get full",
    "start": "1662360",
    "end": "1670320"
  },
  {
    "text": "year date. set full year oh there we go it's not they're",
    "start": "1670320",
    "end": "1676320"
  },
  {
    "text": "mutable uh get UTC full year set UTC full year why does this matter because when",
    "start": "1676760",
    "end": "1684840"
  },
  {
    "text": "you are at the end of the year depending on the exact time it",
    "start": "1684840",
    "end": "1690679"
  },
  {
    "text": "is it may or may not be this year versus next year and the same you so in",
    "start": "1690679",
    "end": "1696880"
  },
  {
    "text": "December and January you have some overlap right you have several hours of overlap between when the year is this",
    "start": "1696880",
    "end": "1704080"
  },
  {
    "text": "year versus next year we run into this every day with what date it is but when you get to the end of the year Winer to",
    "start": "1704080",
    "end": "1709600"
  },
  {
    "text": "that what year it is so we've got to be really really careful about what time zone we're in have we accounted for leap",
    "start": "1709600",
    "end": "1715480"
  },
  {
    "text": "year have weed for leap seconds or we could actually get the year",
    "start": "1715480",
    "end": "1720360"
  },
  {
    "text": "wrong um we can get the string we can create new dates so these are all different and with the date we can pass",
    "start": "1720799",
    "end": "1727200"
  },
  {
    "text": "all kinds of things we can pass a string and ironically new date from a string is",
    "start": "1727200",
    "end": "1734000"
  },
  {
    "text": "much more closely defined than date. parses on a string this is actually a",
    "start": "1734000",
    "end": "1740960"
  },
  {
    "text": "preferable method for converting a string to a timestamp than using date.",
    "start": "1740960",
    "end": "1746440"
  },
  {
    "text": "parses which is super bizarre we can also pass in numbers so",
    "start": "1746440",
    "end": "1751960"
  },
  {
    "text": "we can pass in all of the numeric representations of the different positions so the year the month the day the hour the minute the second the",
    "start": "1751960",
    "end": "1758080"
  },
  {
    "text": "millisecond all that into the date to create a new date so you may remember that I",
    "start": "1758080",
    "end": "1765240"
  },
  {
    "text": "mentioned there are two correct answers to representing midnight a given date this is really really important with JavaScript because it",
    "start": "1765240",
    "end": "1772080"
  },
  {
    "text": "does time zones so badly and everything's in local time so at least they could get this right but they they",
    "start": "1772080",
    "end": "1780240"
  },
  {
    "text": "don't 2400 actually rolls over to the next",
    "start": "1780240",
    "end": "1786159"
  },
  {
    "text": "day so that means that now the day is no longer match and I can't do the math that I wanted because I'm not actually",
    "start": "1786159",
    "end": "1792480"
  },
  {
    "text": "comparing against 24 I'm now comparing with zero even though I told it I wanted it to be 24",
    "start": "1792480",
    "end": "1800039"
  },
  {
    "text": "so now we have to do all kinds of tricky things where I have to detect if it's actually the next day and it's zero the",
    "start": "1800039",
    "end": "1806039"
  },
  {
    "text": "next day instead of 24 this day I have to account for that through the logic in",
    "start": "1806039",
    "end": "1812279"
  },
  {
    "text": "my application I can't just do simple math to determine how many hours have passed this day for",
    "start": "1812279",
    "end": "1819720"
  },
  {
    "text": "example and no matter what you do JavaScript always handles the dates in the local time of the system it's",
    "start": "1819720",
    "end": "1825480"
  },
  {
    "text": "running in unless you happen to use a meth me that only works in UTC so you",
    "start": "1825480",
    "end": "1831760"
  },
  {
    "text": "really can't handle dates in a different region than you're currently located in that'd be ridiculous why would we ever",
    "start": "1831760",
    "end": "1837640"
  },
  {
    "text": "want to handle dates in a different time zone than we're in thanks JavaScript you're the best was anybody here for the",
    "start": "1837640",
    "end": "1844120"
  },
  {
    "text": "game show the other day I was really disappointed there weren't any time zone questions in",
    "start": "1844120",
    "end": "1850440"
  },
  {
    "text": "there but this is just kind of showing that example right you you get into all",
    "start": "1850440",
    "end": "1855679"
  },
  {
    "text": "of this why are the numbers not what I expect",
    "start": "1855679",
    "end": "1859919"
  },
  {
    "text": "so problems with JavaScript times no support for time zones other than users local in",
    "start": "1861480",
    "end": "1867080"
  },
  {
    "text": "UTC the parser behavior is so unreliable that it's effectively unusable we canot",
    "start": "1867080",
    "end": "1874279"
  },
  {
    "text": "trust it on more than a single device the date object itself is mutable",
    "start": "1874279",
    "end": "1881000"
  },
  {
    "text": "so even passing it around within our applications is unsafe the daylight savings time",
    "start": "1881000",
    "end": "1887200"
  },
  {
    "text": "Behavior with in the JavaScript date library is unpredictable it doesn't always get things right because of some",
    "start": "1887200",
    "end": "1892880"
  },
  {
    "text": "of the complexities we talked about earlier there's confusing use of date",
    "start": "1892880",
    "end": "1899559"
  },
  {
    "text": "for the day of the month and day for the day of the week that's not necessarily how we think",
    "start": "1899559",
    "end": "1906679"
  },
  {
    "text": "about things well and and date is the whole date not just the day",
    "start": "1906679",
    "end": "1913320"
  },
  {
    "text": "of the month right that's in normal language and then there's no built-in",
    "start": "1913320",
    "end": "1918799"
  },
  {
    "text": "support for calculating the difference between days and times so I cannot using",
    "start": "1918799",
    "end": "1924360"
  },
  {
    "text": "JavaScript data objects compare two dates and get a realistic number back",
    "start": "1924360",
    "end": "1930200"
  },
  {
    "text": "which is why we have such a big problem with the use of epo because what does every developer do when they need to",
    "start": "1930200",
    "end": "1937120"
  },
  {
    "text": "compare two dates they IM in JavaScript they immediately and intuitively convert it to Epoch because now I just have",
    "start": "1937120",
    "end": "1944519"
  },
  {
    "text": "numbers and I know how to do math with numbers I'm good at that but you always",
    "start": "1944519",
    "end": "1949720"
  },
  {
    "text": "get the wrong number and what's worse is you'll get the right number for certain",
    "start": "1949720",
    "end": "1955880"
  },
  {
    "text": "sets of values provided that they are close enough together and don't span a year and don't span a leap year and",
    "start": "1955880",
    "end": "1963159"
  },
  {
    "text": "don't span a leap second and don't span daylight savings time then it'll work so",
    "start": "1963159",
    "end": "1968440"
  },
  {
    "text": "it's really easy for us as developers to come up with hundreds and hundreds and hundreds of use cases where our code",
    "start": "1968440",
    "end": "1974480"
  },
  {
    "text": "works perfectly and then we put it in the wild and it doesn't work at all and then we've got to figure out why and the",
    "start": "1974480",
    "end": "1980240"
  },
  {
    "text": "why is because we're really really bad at time zones and the JavaScript date",
    "start": "1980240",
    "end": "1985480"
  },
  {
    "text": "Library makes it hard for us to do this correctly so if you've been around the",
    "start": "1985480",
    "end": "1991600"
  },
  {
    "text": "JavaScript for a while you've almost definitely heard of momentjs so we can definitely count on it to save",
    "start": "1991600",
    "end": "1998000"
  },
  {
    "text": "us here except now we can't it's totally out of date it's full of issues in",
    "start": "1998000",
    "end": "2004600"
  },
  {
    "text": "modern apps and is no longer being maintained so here are some of the problems the",
    "start": "2004600",
    "end": "2011159"
  },
  {
    "text": "objects are still mutable that can still be a problem in our apps there's a complete lack of tree shaking meaning",
    "start": "2011159",
    "end": "2017320"
  },
  {
    "text": "that moment can be quite heavy in certain applications if you're not using a lot of it it's a fairly significantly",
    "start": "2017320",
    "end": "2024159"
  },
  {
    "text": "large size especially if you're utilizing the localization and time zone features within moment and finally",
    "start": "2024159",
    "end": "2031840"
  },
  {
    "text": "there's a lack of support for modern JavaScript improvements so it's just dated at this point you should",
    "start": "2031840",
    "end": "2037159"
  },
  {
    "text": "definitely migrate off of momentjs if you're still using it",
    "start": "2037159",
    "end": "2042919"
  },
  {
    "text": "fortunately we do have something else but let's let's talk first about the criteria we should use in choosing a",
    "start": "2042919",
    "end": "2049960"
  },
  {
    "text": "datetime library first thing is it should have modular architecture it should support tree shaking we should",
    "start": "2049960",
    "end": "2055760"
  },
  {
    "text": "only pull in the pieces we actually need to our code and not increase our code weight it should have support for",
    "start": "2055760",
    "end": "2061358"
  },
  {
    "text": "ecmascript standards such as inl for internationalization and new standards",
    "start": "2061359",
    "end": "2066919"
  },
  {
    "text": "that are coming such as just temporal really important that we support the standards whenever possible and finally",
    "start": "2066919",
    "end": "2072878"
  },
  {
    "text": "it should be support focus on support for modern browsers not just all the Legacy browser support the objects",
    "start": "2072879",
    "end": "2079878"
  },
  {
    "text": "should ideally be immutable so that I can safely pass them around in my application without worry of side",
    "start": "2079879",
    "end": "2086240"
  },
  {
    "text": "effects and it should have type support because I don't know about you I really like working in typescript and having",
    "start": "2086240",
    "end": "2092560"
  },
  {
    "text": "very clean types around my data and when the only data type that you have is date",
    "start": "2092560",
    "end": "2099160"
  },
  {
    "text": "and it doesn't mean a lot that's not very helpful this is where luxon comes into",
    "start": "2099160",
    "end": "2105440"
  },
  {
    "text": "play arguably it's one of the best libraries out there for typescript it checks off all the criteria that I just",
    "start": "2105440",
    "end": "2111400"
  },
  {
    "text": "gave you and it grew out of the moment JS project so it has kind of some built-in maturity in terms of the people",
    "start": "2111400",
    "end": "2117520"
  },
  {
    "text": "that are working on it really knowing knowing their stuff so we're going to dig in just a little bit to what luxon",
    "start": "2117520",
    "end": "2124079"
  },
  {
    "text": "does for you so it has date time objects but also duration and interval types so the date",
    "start": "2124079",
    "end": "2133160"
  },
  {
    "text": "time is what you would expect it has both date and time components dur or interval is a difference between those",
    "start": "2133160",
    "end": "2139680"
  },
  {
    "text": "two and then durations are human readable things like I don't know 34",
    "start": "2139680",
    "end": "2146000"
  },
  {
    "text": "minutes because humans don't say 34 minutes as 1200 to",
    "start": "2146000",
    "end": "2153920"
  },
  {
    "text": "1234 and in fact that's not always Rel relevant because I don't necessarily",
    "start": "2153920",
    "end": "2160119"
  },
  {
    "text": "know off the top of my head when that 34 Minute time period starts I just know that it's 34",
    "start": "2160119",
    "end": "2166000"
  },
  {
    "text": "minutes um and so luxon can handle that for us so we've got the intervals and the",
    "start": "2166000",
    "end": "2171400"
  },
  {
    "text": "durations uh it's immutable and chainable and has an unambiguous API",
    "start": "2171400",
    "end": "2176560"
  },
  {
    "text": "therefore there's no confusion about things like day versus date and what they may",
    "start": "2176560",
    "end": "2181839"
  },
  {
    "text": "mean parsing and formatting for common and custom formats in other words we have reliable string pars ing of common",
    "start": "2181839",
    "end": "2188680"
  },
  {
    "text": "string date formats and it works consistently every single time the same",
    "start": "2188680",
    "end": "2193960"
  },
  {
    "text": "result has native time zone and inl support so there's no need to import",
    "start": "2193960",
    "end": "2200560"
  },
  {
    "text": "time zone files or local files it's all there right out of the",
    "start": "2200560",
    "end": "2205800"
  },
  {
    "text": "gate and so these are all the types of things that we need as JavaScript developers to do our time zone work so",
    "start": "2205800",
    "end": "2212599"
  },
  {
    "text": "here is an example of parsing an ISO string and then testing for expectations",
    "start": "2212599",
    "end": "2217680"
  },
  {
    "text": "note that the input time here is plus seven time zone at the time I was",
    "start": "2217680",
    "end": "2222800"
  },
  {
    "text": "testing this I was in the ne4 time zone running the test and so the Lux on",
    "start": "2222800",
    "end": "2227920"
  },
  {
    "text": "default is to convert everything to the user's local time which is why we see",
    "start": "2227920",
    "end": "2233680"
  },
  {
    "text": "this adjustment in numbers so it's basically doing the the unit conversion",
    "start": "2233680",
    "end": "2240079"
  },
  {
    "text": "from 16 you've got to subtract seven and then subtract another four and then we're",
    "start": "2240079",
    "end": "2245640"
  },
  {
    "text": "there and that's why you see the the number change on the hours and here we're doing the exact same thing but",
    "start": "2245640",
    "end": "2251920"
  },
  {
    "text": "you'll know that parameter set Zone true that says Hey I want you to",
    "start": "2251920",
    "end": "2261800"
  },
  {
    "text": "override sorry I want you to preserve the time zone in my local time zone so I want the",
    "start": "2262079",
    "end": "2268520"
  },
  {
    "text": "same numbers in my local time zone so what it's going to do is it's going to to preserve the time zone I'm going to",
    "start": "2268520",
    "end": "2273920"
  },
  {
    "text": "get it it's going to have the right string and it's going to give me the correct numbers I expect that date or that hour to be 9 and it is in fact",
    "start": "2273920",
    "end": "2280680"
  },
  {
    "text": "still 9 because it held on to that time zone information and didn't convert it to my local time zone you can't do this",
    "start": "2280680",
    "end": "2287920"
  },
  {
    "text": "in JavaScript date time objects this is of critical importance because it means that I can read a date out of a server",
    "start": "2287920",
    "end": "2296040"
  },
  {
    "text": "or out of a database with time zone information and use it within my client",
    "start": "2296040",
    "end": "2301560"
  },
  {
    "text": "side Javascript app with that time zone preserved this is the secret that allows",
    "start": "2301560",
    "end": "2307760"
  },
  {
    "text": "us to have a report in one time zone where I'm running in on a device in one time zone for data from a different time",
    "start": "2307760",
    "end": "2316359"
  },
  {
    "text": "zone and so let's say that you have a date time that is on 400 a.m. on August",
    "start": "2316359",
    "end": "2322119"
  },
  {
    "text": "30th in EDT but you want a date time that is at 4:00 a.m. in C right here",
    "start": "2322119",
    "end": "2329240"
  },
  {
    "text": "this is how you do that using luxon keep local time true and this means that it's going to",
    "start": "2329240",
    "end": "2336680"
  },
  {
    "text": "replace the time zone of the date with the user's local time zone but keep all the",
    "start": "2336680",
    "end": "2343040"
  },
  {
    "text": "numbers the same so if it's 400 a. in the original datetime string and I",
    "start": "2343040",
    "end": "2348319"
  },
  {
    "text": "replace the time zone it's going to be 4:00 a. in the new time that means that for example if I needed to be able to",
    "start": "2348319",
    "end": "2355079"
  },
  {
    "text": "provide a JavaScript datetime object in the current in the user's local time zone",
    "start": "2355079",
    "end": "2363119"
  },
  {
    "text": "and have that work correctly I can just move things around using this technique to whatever time",
    "start": "2363119",
    "end": "2370200"
  },
  {
    "text": "zone I want while keeping the numbers the same this is also really important if you",
    "start": "2370200",
    "end": "2375760"
  },
  {
    "text": "have made mistakes or errors with how you represent dates in your",
    "start": "2375760",
    "end": "2382680"
  },
  {
    "text": "database so one of my clients did something that is not advisable and that",
    "start": "2382680",
    "end": "2390480"
  },
  {
    "text": "is they took all of the incoming dates from their users their customers",
    "start": "2390480",
    "end": "2395839"
  },
  {
    "text": "stripped all the time zone information off of it and replaced it with",
    "start": "2395839",
    "end": "2401280"
  },
  {
    "text": "Z the problem is those weren't actually UTC",
    "start": "2401280",
    "end": "2406400"
  },
  {
    "text": "times so to get correct dates back out what we have to do is read the time",
    "start": "2406400",
    "end": "2412480"
  },
  {
    "text": "entry from the database go find the correct time zone for the user that",
    "start": "2412480",
    "end": "2417800"
  },
  {
    "text": "created the entry based upon their local information that we have in the database fortunately and then",
    "start": "2417800",
    "end": "2424920"
  },
  {
    "text": "rehydrate a time zone corrected value and this is the technique we use to do",
    "start": "2424920",
    "end": "2430359"
  },
  {
    "text": "that and so not something you want to have to do but luxon supports it right",
    "start": "2430359",
    "end": "2435400"
  },
  {
    "text": "out of the gate and it's really easy to work with this is a technique to grab now for",
    "start": "2435400",
    "end": "2443119"
  },
  {
    "text": "any time zone so if I want to know what the time is from a Time Zone on the other side of the world I can do that I",
    "start": "2443119",
    "end": "2449359"
  },
  {
    "text": "simply provide the time zone information as that first parameter and say keep local time Falls",
    "start": "2449359",
    "end": "2456640"
  },
  {
    "text": "this is how we can calculate the difference or the interval between two different datetime objects effectively",
    "start": "2458160",
    "end": "2465599"
  },
  {
    "text": "we're creating the interval we're saying date one to date two and then I can convert it to a duration and it's going",
    "start": "2465599",
    "end": "2472280"
  },
  {
    "text": "to return something that looks like this 24 hours 34 minutes 49.2 57 seconds that",
    "start": "2472280",
    "end": "2479440"
  },
  {
    "text": "is a really great output for us to hand to our users something that our users can understand and I didn't have to do",
    "start": "2479440",
    "end": "2486440"
  },
  {
    "text": "any math because luxon handled figuring out the difference between those two datetime",
    "start": "2486440",
    "end": "2492560"
  },
  {
    "text": "objects for me and correctly broke it down in terms of hours minutes and seconds without me having to do any work",
    "start": "2492560",
    "end": "2499160"
  },
  {
    "text": "as the developer that's all the code that's the output I dare you to do this using JavaScript dates on your own and",
    "start": "2499160",
    "end": "2508359"
  },
  {
    "text": "and get it correct accounting for all the different situations so another option that we",
    "start": "2508359",
    "end": "2515119"
  },
  {
    "text": "have available to us is the new temporal JavaScript spec has anybody heard of",
    "start": "2515119",
    "end": "2520920"
  },
  {
    "text": "temporal couple people most of you know okay so when I wrote this talk a little",
    "start": "2520920",
    "end": "2526920"
  },
  {
    "text": "bit over a year ago they promised that temporal was coming at the end of",
    "start": "2526920",
    "end": "2532800"
  },
  {
    "text": "2023 um it is now August 2024 and now they promising temporal will be out by",
    "start": "2532800",
    "end": "2537920"
  },
  {
    "text": "the end of 2024 so we'll see the good news is that it it was first proposed in",
    "start": "2537920",
    "end": "2544119"
  },
  {
    "text": "2020 so we're we're four years into the process of building out temporal we're",
    "start": "2544119",
    "end": "2549800"
  },
  {
    "text": "still waiting on the final version but it is in stage three which means it has been recommended for implementation and",
    "start": "2549800",
    "end": "2555720"
  },
  {
    "text": "the implementation work has started so I don't know for sure when it's going to come but we need to be aware of it",
    "start": "2555720",
    "end": "2561800"
  },
  {
    "text": "because this is going to be built into JavaScript as a replacement to the JavaScript",
    "start": "2561800",
    "end": "2567680"
  },
  {
    "text": "date here are some of the improvements from JavaScript it provides easy to use",
    "start": "2567680",
    "end": "2572920"
  },
  {
    "text": "apis for the date and time computations so that that unlike the the JavaScript",
    "start": "2572920",
    "end": "2579440"
  },
  {
    "text": "date which basically does no computational work for us at all it's going to actually provide that",
    "start": "2579440",
    "end": "2585280"
  },
  {
    "text": "functionality first class support for time zones including DST safe arithmetic",
    "start": "2585280",
    "end": "2590480"
  },
  {
    "text": "that's good now luxon does all these same things for us but it would be useful to",
    "start": "2590480",
    "end": "2596520"
  },
  {
    "text": "have this built in right dealing only with objects representing fixed dates and",
    "start": "2596520",
    "end": "2603000"
  },
  {
    "text": "times in other words well I I'll get into what that means exactly just a second um parsing strictly specified",
    "start": "2603000",
    "end": "2609800"
  },
  {
    "text": "string formats in other words they fixed all of the ambiguity and inconsistency around how we parse strings supporting",
    "start": "2609800",
    "end": "2615559"
  },
  {
    "text": "non-gregorian calendars which is a very real concern in other parts of the world it's kind of out of the scope of what",
    "start": "2615559",
    "end": "2621520"
  },
  {
    "text": "we're talking about here but it's important and so times without Zone the temporal API follows a Convention of",
    "start": "2621520",
    "end": "2626960"
  },
  {
    "text": "using types whose names start with plane like plane date plane time or plane date time for objects that have no Associated",
    "start": "2626960",
    "end": "2633280"
  },
  {
    "text": "time zone because I shouldn't always care about a time zone if all I need somebody to tell me is",
    "start": "2633280",
    "end": "2641319"
  },
  {
    "text": "what time they expect something to happen I don't always need to Anchor that to a specific date and a specific",
    "start": "2641319",
    "end": "2648599"
  },
  {
    "text": "time zone sometimes it's enough to say it happens at 1300 and for those situations we need a",
    "start": "2648599",
    "end": "2655839"
  },
  {
    "text": "way of handling that in JavaScript the only way we can handle that is effectively by treating the time as",
    "start": "2655839",
    "end": "2662160"
  },
  {
    "text": "either a number or a string there's no way to do that with something that actually represents dates and",
    "start": "2662160",
    "end": "2669760"
  },
  {
    "text": "times there are some key data types so they've kind of changed the data type structure entirely now is actually a",
    "start": "2669760",
    "end": "2676480"
  },
  {
    "text": "type and it provides methods for getting the current time and instant is kind of",
    "start": "2676480",
    "end": "2682200"
  },
  {
    "text": "a snapshot instant exists in a lot of libraries I think it existed in it exists in uh luxon and it's a fixed",
    "start": "2682200",
    "end": "2687920"
  },
  {
    "text": "point in time that's an exact time uh down to the millisecond zoned date time is now a",
    "start": "2687920",
    "end": "2694839"
  },
  {
    "text": "time zone aware date and time it's very specific specifically indicated that this is time zone aware and then you",
    "start": "2694839",
    "end": "2700640"
  },
  {
    "text": "have the plain objects which don't have time zone associated with them and now",
    "start": "2700640",
    "end": "2706520"
  },
  {
    "text": "we can tell the difference and then the duration which is very similar to a luxon duration which giving you like in",
    "start": "2706520",
    "end": "2711760"
  },
  {
    "text": "terms of hours and minutes and seconds here's what that actually looks",
    "start": "2711760",
    "end": "2716839"
  },
  {
    "text": "like this is straight out of the uh temporal documentation and it shows the relationship between those data types",
    "start": "2716839",
    "end": "2723000"
  },
  {
    "text": "but also a little bit just how complex our relationship with time is again remember time is largely at least the",
    "start": "2723000",
    "end": "2729640"
  },
  {
    "text": "way we talk about it it's very much a human construct we we use it to mean things to us in a way that we experience",
    "start": "2729640",
    "end": "2736599"
  },
  {
    "text": "time more than it is like mathematically meaningful and so you have this concept",
    "start": "2736599",
    "end": "2743160"
  },
  {
    "text": "of you have the calendar they call it the wall clock time in other words when you have a look at a wall clock you don't care what time zone it is you just",
    "start": "2743160",
    "end": "2750000"
  },
  {
    "text": "care what time it is for me right here right now when I'm looking at it uh that I'm not trying to convey time zone",
    "start": "2750000",
    "end": "2755720"
  },
  {
    "text": "information at that point in time and then you have all the way on the left the exact time types and the zones date time kind of bridges the Gap it",
    "start": "2755720",
    "end": "2763079"
  },
  {
    "text": "contains an exact specific point in time anchored to a time zone in a way that you can get other types of information",
    "start": "2763079",
    "end": "2769599"
  },
  {
    "text": "back out of it again and so broken down in a different way this shows how you can represent",
    "start": "2769599",
    "end": "2775200"
  },
  {
    "text": "these different temporal objects in terms of an ISO date string right the",
    "start": "2775200",
    "end": "2781000"
  },
  {
    "text": "plain month day is just the month in the day portion the plain year month is just",
    "start": "2781000",
    "end": "2786200"
  },
  {
    "text": "the year and the month portion and why is this important well think about you have a credit card what is your credit",
    "start": "2786200",
    "end": "2791680"
  },
  {
    "text": "card expiration your credit card expiration doesn't give me a time zone and it usually doesn't even give me a",
    "start": "2791680",
    "end": "2798000"
  },
  {
    "text": "day of the month it's just a year and a day and we have a lot of different things like that where those that's all",
    "start": "2798000",
    "end": "2803200"
  },
  {
    "text": "we care about uh so I don't necessarily need all that extra information the plain time is just the",
    "start": "2803200",
    "end": "2809400"
  },
  {
    "text": "time portion I don't always need the date Associated at the time or I might need the entire instance or the entire",
    "start": "2809400",
    "end": "2816000"
  },
  {
    "text": "Zone time with all the time zone and everything so if you're interested in",
    "start": "2816000",
    "end": "2821680"
  },
  {
    "text": "getting started with temporal you can check out the API there is a polyfill for it you can check that out on their",
    "start": "2821680",
    "end": "2828319"
  },
  {
    "text": "GitHub page it has been working for at least a year year and a half now uh and",
    "start": "2828319",
    "end": "2833720"
  },
  {
    "text": "has been available for your use if you want to get started with it if you don't want to get started with temporal yet",
    "start": "2833720",
    "end": "2838800"
  },
  {
    "text": "because it's not quite ready definitely check out luxon and give that a try for",
    "start": "2838800",
    "end": "2844240"
  },
  {
    "text": "all of your time zone math needs so in conclusion remember every application",
    "start": "2844240",
    "end": "2850079"
  },
  {
    "text": "has at least two to three time zones even if you find that you personally as a developer are not having to do time",
    "start": "2850079",
    "end": "2857720"
  },
  {
    "text": "zone math in your application your application is affected by at least two",
    "start": "2857720",
    "end": "2863000"
  },
  {
    "text": "to three time zones why the developers the users the servers period unless all",
    "start": "2863000",
    "end": "2868960"
  },
  {
    "text": "three of those things are in the exact same time zone that's at least two that means that at minimum when you're",
    "start": "2868960",
    "end": "2875839"
  },
  {
    "text": "looking at server logs or you're looking at data that's coming in from your application you have to have that",
    "start": "2875839",
    "end": "2881040"
  },
  {
    "text": "consideration even if it's not in the user facing part of your application which it usually actually",
    "start": "2881040",
    "end": "2886720"
  },
  {
    "text": "is always consider date and time expectations from the user's perspective",
    "start": "2886720",
    "end": "2891920"
  },
  {
    "text": "what is the user trying to accomplish do they care about the time zone at the time they're doing it are they just trying to give you a month and a year as",
    "start": "2891920",
    "end": "2898800"
  },
  {
    "text": "input can we figure out everything else from Context Clues without having to prompt the user for additional",
    "start": "2898800",
    "end": "2904520"
  },
  {
    "text": "information awesome let's do that let's make it as easy as possible but",
    "start": "2904520",
    "end": "2910760"
  },
  {
    "text": "also let's be super clear with the user when time zones are involved what time zones are involved like the earlier",
    "start": "2910760",
    "end": "2917599"
  },
  {
    "text": "examples that I showed with server logs it's really really important that I tell the user here's the time zone you're",
    "start": "2917599",
    "end": "2925000"
  },
  {
    "text": "currently looking at the data in so that the user can then make reasonable",
    "start": "2925000",
    "end": "2930280"
  },
  {
    "text": "determinations based upon that information don't obfuscate the the",
    "start": "2930280",
    "end": "2935799"
  },
  {
    "text": "details from the user when they're actually relevant never manually calculate time",
    "start": "2935799",
    "end": "2943359"
  },
  {
    "text": "intervals ever don't I know it's tempting to roll back to Epoch and do Epoch datetime math don't do it it's",
    "start": "2943359",
    "end": "2950400"
  },
  {
    "text": "going to be wrong I promise it's going to be wrong carefully select a datetime library that meets your needs the two",
    "start": "2950400",
    "end": "2956440"
  },
  {
    "text": "leading candidates right now are luxon and temporal and of course the temporal standard is coming soon and will",
    "start": "2956440",
    "end": "2964599"
  },
  {
    "text": "hopefully by next year be the general ener standard but luxon's going to be here for quite a while I imagine so",
    "start": "2964599",
    "end": "2970240"
  },
  {
    "text": "don't don't be afraid to use it and in conclusion that's me uh do check out",
    "start": "2970240",
    "end": "2976240"
  },
  {
    "text": "md.com that's how you can find out how to reach me I would love to talk to you if you've got some challenging projects",
    "start": "2976240",
    "end": "2982040"
  },
  {
    "text": "where you're dealing with time zones let's talk about it I'd love to hear what you're working on so thank you and enjoy the conference",
    "start": "2982040",
    "end": "2990240"
  }
]