[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "um I just I made the mistake of checking Twitter just before starting and I just",
    "start": "8080",
    "end": "13280"
  },
  {
    "text": "read a tweet saying uh top conference tip don't use the first person in in",
    "start": "13280",
    "end": "19119"
  },
  {
    "text": "your talk instead of saying I will teach say you will learn Etc I've already VI",
    "start": "19119",
    "end": "24439"
  },
  {
    "text": "violated that and I just done it again and again um and I'm afraid I'm probably going to keep doing it uh this is in",
    "start": "24439",
    "end": "30840"
  },
  {
    "text": "some ways quite a personal talk and the good thing is if I keep saying I then it means you don't have to feel any",
    "start": "30840",
    "end": "37079"
  },
  {
    "text": "association with the code that you're going to see which may be for the best um if you don't me don't know me I'm",
    "start": "37079",
    "end": "43879"
  },
  {
    "text": "John SK uh I work for Google I've worked there for about eight and a half years for the last year and a half I've been",
    "start": "43879",
    "end": "50280"
  },
  {
    "text": "working on uh the C support for Google Cloud platform it's awesome go check out our booth um I've also been abusing C",
    "start": "50280",
    "end": "59600"
  },
  {
    "start": "57000",
    "end": "225000"
  },
  {
    "text": "for a long long time uh I used to do this because I wasn't writing any production C so it was fine to write",
    "start": "59600",
    "end": "65600"
  },
  {
    "text": "awful awful code that was kind of fun uh knowing it would never end up on a production server now I need to be",
    "start": "65600",
    "end": "71680"
  },
  {
    "text": "slightly more careful that what I write will you know that I separate the abuse part from the uh regular code the idea",
    "start": "71680",
    "end": "80280"
  },
  {
    "text": "is to look at interesting bits of the C language uh which are ripe for being misused and misuse them ideally in a way",
    "start": "80280",
    "end": "88400"
  },
  {
    "text": "that isn't just well this is is crazy code no one would ever want to do this but do you know what that actually looks",
    "start": "88400",
    "end": "93920"
  },
  {
    "text": "quite appealing but no no no definitely not um I would like this to be a collaborative effort so uh in particular",
    "start": "93920",
    "end": "101799"
  },
  {
    "text": "you know Kathleen knows the the language at least as well as I do um and I'm sure some of you do as well so if you",
    "start": "101799",
    "end": "108000"
  },
  {
    "text": "suddenly spot other ways that we could abuse stuff um you know related to what I'm doing do shout out likewise if",
    "start": "108000",
    "end": "114920"
  },
  {
    "text": "you're or or just come up on stage and start typing um I've done it to other",
    "start": "114920",
    "end": "120079"
  },
  {
    "text": "people no reason people shouldn't do it to me um likewise if you don't understand what's going on then it's",
    "start": "120079",
    "end": "125960"
  },
  {
    "text": "possible you may actually learn something in this session uh and there are at least a couple of bits of code",
    "start": "125960",
    "end": "133120"
  },
  {
    "text": "that might be considered a bad idea or might be considered a good idea and uh I",
    "start": "133120",
    "end": "138640"
  },
  {
    "text": "might ask for a show of hands um but at least you need to think carefully before using but they really are appealing",
    "start": "138640",
    "end": "145440"
  },
  {
    "text": "there are some more chairs scattered around on this side by the way so folks who are standing um it doesn't bother me",
    "start": "145440",
    "end": "151040"
  },
  {
    "text": "if you walk in front of me it's fine okay uh all the code is up on GitHub I",
    "start": "151040",
    "end": "157640"
  },
  {
    "text": "have a Blog that's um almost entirely about code I have a non-code Blog that's",
    "start": "157640",
    "end": "162800"
  },
  {
    "text": "currently almost entirely about feminism um and we have I have leared that this",
    "start": "162800",
    "end": "169840"
  },
  {
    "text": "talk is better if I work out what I'm going to teach you or show you beforehand uh out of Interest this is",
    "start": "169840",
    "end": "175560"
  },
  {
    "text": "called abusing C more because I've done abusing C as a talk with some of the",
    "start": "175560",
    "end": "181640"
  },
  {
    "text": "older stuff several times how many of you have already seen an abusing c talk by",
    "start": "181640",
    "end": "187239"
  },
  {
    "text": "me okay not very many so I might revisit some of the most fun bits of that um",
    "start": "187239",
    "end": "193959"
  },
  {
    "text": "just for a laugh um and if not there's far far more code than I could possibly go over so it's really sort of picking",
    "start": "193959",
    "end": "200200"
  },
  {
    "text": "some fun things we're going to start with the Mongolian vowel separator which is my favorite Unicode character how",
    "start": "200200",
    "end": "206000"
  },
  {
    "text": "many of you were at Bill Wagner's talk about language design yesterday a few uh we talked a little bit about uh",
    "start": "206000",
    "end": "214120"
  },
  {
    "text": "breaking changes and things that the language specification refers to and I",
    "start": "214120",
    "end": "219439"
  },
  {
    "text": "mentioned Unicode and Bill was saying well that doesn't change much allow me to differ so we have a bit of code here",
    "start": "219439",
    "end": "228560"
  },
  {
    "start": "225000",
    "end": "395000"
  },
  {
    "text": "most of this code I will show you some code we'll run it and see what it does basically um so what do you think this",
    "start": "228560",
    "end": "235239"
  },
  {
    "text": "code is going to do",
    "start": "235239",
    "end": "238879"
  },
  {
    "text": "sorry do you know what I missed something sorry there were I do want to call yeah it's annoying I got a",
    "start": "246360",
    "end": "252799"
  },
  {
    "text": "different version that had the show field call but not the assignment right okay so now more usefully so I've got a",
    "start": "252799",
    "end": "259799"
  },
  {
    "text": "little framework that is just going to call Main it's going to do the obvious",
    "start": "259799",
    "end": "266080"
  },
  {
    "text": "thing any thoughts it's going to write in m okay I will prove that you're actually",
    "start": "266120",
    "end": "272880"
  },
  {
    "text": "correct and then I'll show you why you might not have been yes it prints in",
    "start": "272880",
    "end": "277960"
  },
  {
    "text": "main if I have run this and someday I would love to try to find a version of",
    "start": "277960",
    "end": "284720"
  },
  {
    "text": "uh Visual Studio 2010 but with a Roslin preview running on running on a version",
    "start": "284720",
    "end": "291160"
  },
  {
    "text": "of Windows from about 2010 um because then I think it would print an",
    "start": "291160",
    "end": "296280"
  },
  {
    "text": "initializer and those of you who are very close to the front how many of you can read the line column and CH",
    "start": "296280",
    "end": "303880"
  },
  {
    "text": "character thing on the on the status bar how many of you can see okay enough to",
    "start": "303880",
    "end": "309520"
  },
  {
    "text": "see the numbers so normally focus on the call and CH as I just scroll around so if I go to the left right as I go I'm",
    "start": "309520",
    "end": "317880"
  },
  {
    "text": "pressing pressing pressing pressing so I had to press",
    "start": "317880",
    "end": "323919"
  },
  {
    "text": "twice to go from the G to the X and that's because the thing in the middle there is the Mongolian vow",
    "start": "323919",
    "end": "331639"
  },
  {
    "text": "operator it doesn't exist here this just goes 28 28 29 29 3030 you know it's all",
    "start": "332120",
    "end": "339080"
  },
  {
    "text": "it's all there so we have a different sequence of Unicode characters here and here but",
    "start": "339080",
    "end": "346960"
  },
  {
    "text": "that's okay because the language specification says that if there are any",
    "start": "346960",
    "end": "352880"
  },
  {
    "text": "Unicode formatting characters within an identifier that's fine and they'll sort of be normalized",
    "start": "352880",
    "end": "359720"
  },
  {
    "text": "way in fact it doesn't say that you'll normalize them it'll say when you compare when you try to find an",
    "start": "359720",
    "end": "365800"
  },
  {
    "text": "identifier ignore them and in fact the way that the obvious way to do that is just by",
    "start": "365800",
    "end": "371440"
  },
  {
    "text": "normalizing them away um and so if you ask by reflection for string X you will",
    "start": "371440",
    "end": "377479"
  },
  {
    "text": "get the version without um without the uh Mongolian vow separator so why does",
    "start": "377479",
    "end": "386280"
  },
  {
    "text": "this mean in 2010 it would have printed something differently any Unicode excuse me um trivia fans out",
    "start": "386280",
    "end": "395360"
  },
  {
    "start": "395000",
    "end": "446000"
  },
  {
    "text": "there well let me show you the history of the Mongolian Vil separator it was introduced in Unicode 3.0 where it was",
    "start": "395360",
    "end": "402479"
  },
  {
    "text": "introduced as a formatting character and then in 4.0 it became a whit space",
    "start": "402479",
    "end": "408759"
  },
  {
    "text": "character and it stayed a whit space character until 2014 so if we've been running on something unic using Unicode",
    "start": "408759",
    "end": "417319"
  },
  {
    "text": "6 it would have been Whit space now let's just replace the Unicode the",
    "start": "417319",
    "end": "423319"
  },
  {
    "text": "Mongolian Val separator with a regular white space now that's still valid code but",
    "start": "423319",
    "end": "431199"
  },
  {
    "text": "it's going to print in initializer yeah so as far I don't know of any other",
    "start": "431199",
    "end": "438840"
  },
  {
    "text": "characters that have gone from one Unicode category to another and then",
    "start": "438840",
    "end": "444680"
  },
  {
    "text": "back again um and particularly to stay valid in identifiers but mean different things or rather either separate",
    "start": "444680",
    "end": "451479"
  },
  {
    "start": "446000",
    "end": "649000"
  },
  {
    "text": "identifiers or or be part of one um so you might be wondering what the specification itself itself says and for",
    "start": "451479",
    "end": "459800"
  },
  {
    "text": "every published version of the C specification um it's gone to it it's",
    "start": "459800",
    "end": "467319"
  },
  {
    "text": "specified that it uses Unicode 3 and the the old csc.exe the native one",
    "start": "467319",
    "end": "474560"
  },
  {
    "text": "used to carry alongside it within it a copy of Unicode 3",
    "start": "474560",
    "end": "481440"
  },
  {
    "text": "ecma there's an ecma standard for C the Third Edition covers c",
    "start": "481440",
    "end": "487639"
  },
  {
    "text": "2 um the fourth edition will cover C 5 when hopefully we get that out this this",
    "start": "487639",
    "end": "494840"
  },
  {
    "text": "half I really really hope and then the idea is that we can between Emma and",
    "start": "494840",
    "end": "499879"
  },
  {
    "text": "Microsoft we can get the uh C 6 specification and standard out as sort",
    "start": "499879",
    "end": "505840"
  },
  {
    "text": "of one thing um so you'll have seen that there isn't a c 6 spec publicly",
    "start": "505840",
    "end": "512440"
  },
  {
    "text": "available other than a draft version in a GitHub repository belonging to Lucian vishik who's no longer even in Microsoft",
    "start": "512440",
    "end": "519560"
  },
  {
    "text": "um but so Emma said it had to be four so if you tell the C compiler to run in ISO",
    "start": "519560",
    "end": "528480"
  },
  {
    "text": "uh so ecma is one standards body ISO is a different standards body but the Emma",
    "start": "528480",
    "end": "534839"
  },
  {
    "text": "standard was then fast-tracked to the iso standard so ISO 2 is is equivalent",
    "start": "534839",
    "end": "539959"
  },
  {
    "text": "to ecma Third Edition is somewhat equivalent to C um 2 and I think this is",
    "start": "539959",
    "end": "546399"
  },
  {
    "text": "still whoopsie going to um",
    "start": "546399",
    "end": "551040"
  },
  {
    "text": "print if I can actually run the thing come on control",
    "start": "551600",
    "end": "557800"
  },
  {
    "text": "F5 there are build errors oh okay yeah half of the rest of the code in the project doesn't work under um c 2 uh",
    "start": "558440",
    "end": "567720"
  },
  {
    "text": "let's see if I I pull up command prompt",
    "start": "567720",
    "end": "574200"
  },
  {
    "text": "um I can write the nice thing about compiling the code with main methods like this is I can compile just a single",
    "start": "574200",
    "end": "582839"
  },
  {
    "text": "um uh file so it's in odds and ends and can anyone remember the command line",
    "start": "582839",
    "end": "591320"
  },
  {
    "text": "that you use to specify the the Lang version so if I do Lang version ISO 2",
    "start": "591320",
    "end": "600360"
  },
  {
    "text": "Mongolian Val separator so it's shown in main still",
    "start": "602120",
    "end": "609000"
  },
  {
    "text": "basically this shows that the uh the compiler is not really obeying",
    "start": "609000",
    "end": "615120"
  },
  {
    "text": "the language uh choice that we've said because that should mean use Unicode",
    "start": "615120",
    "end": "621480"
  },
  {
    "text": "for as of Roslin Roslin just uses whatever version of unic code.net is",
    "start": "621480",
    "end": "628160"
  },
  {
    "text": "using um because that's the only thing that really makes sense to keep going with so in the uh fifth version of the",
    "start": "628160",
    "end": "636480"
  },
  {
    "text": "Unicode spec sorry the fourth edition uh which is C 5 the upcoming one we're just",
    "start": "636480",
    "end": "643519"
  },
  {
    "text": "waving our hands and kind of saying it uses a version of Unicode and let's hope it doesn't",
    "start": "643519",
    "end": "649160"
  },
  {
    "text": "matter let's stick with strings a bit more and type use name of so um I'm",
    "start": "649160",
    "end": "657560"
  },
  {
    "text": "going to add a class should have added before so name of intro how many of you are using C",
    "start": "657560",
    "end": "663760"
  },
  {
    "text": "6 good and you're you're aware of um name of",
    "start": "663760",
    "end": "670279"
  },
  {
    "text": "hopefully and I'll just rename into to intro which is what I meant",
    "start": "670279",
    "end": "676240"
  },
  {
    "text": "so the next thing is if you come into that ever so common scenario where your",
    "start": "676240",
    "end": "682320"
  },
  {
    "text": "shift key is broken or possibly you're working on a keyboard which uh is in a",
    "start": "682320",
    "end": "688560"
  },
  {
    "text": "different language and you don't know where the double quotes are so you're unable to type a string literal and this",
    "start": "688560",
    "end": "695480"
  },
  {
    "text": "is a problem um we often want string literals and suppose you're in a",
    "start": "695480",
    "end": "700839"
  },
  {
    "text": "slightly better situation that the O the string literal that you want to write doesn't contain any",
    "start": "700839",
    "end": "706480"
  },
  {
    "text": "spaces you've got problems well you can use name of",
    "start": "706480",
    "end": "711839"
  },
  {
    "text": "to help you so you could declare a method so suppose we want to print uh uh",
    "start": "711839",
    "end": "719720"
  },
  {
    "text": "hello world all is one one word okay we can do console. right",
    "start": "719720",
    "end": "728200"
  },
  {
    "text": "line name of hello world okay so without typing any double quotes we can now run",
    "start": "728200",
    "end": "735600"
  },
  {
    "start": "731000",
    "end": "956000"
  },
  {
    "text": "that and uh it will print hello world but you know that kind of sucks because",
    "start": "735600",
    "end": "741360"
  },
  {
    "text": "you've got to introduce a whole extra method and that's not fun um you could have you could do a variable called",
    "start": "741360",
    "end": "747800"
  },
  {
    "text": "hello world instead and then it's it's still just a bit nasty and then you think of dynamic so",
    "start": "747800",
    "end": "755079"
  },
  {
    "text": "one of the things you can do with neov is refer to instance or static methods",
    "start": "755079",
    "end": "761480"
  },
  {
    "text": "members um via a reference so normally if I do um string x equals whatever even",
    "start": "761480",
    "end": "770320"
  },
  {
    "text": "null um I can't type x dot uh give me a static method on string is",
    "start": "770320",
    "end": "777600"
  },
  {
    "text": "null or empty I can't use um X do is null or",
    "start": "777600",
    "end": "783199"
  },
  {
    "text": "empty because it's a static method and uh C made the very good decision unlike",
    "start": "783199",
    "end": "789639"
  },
  {
    "text": "Java that you shouldn't be able to call static methods on variables on any kind",
    "start": "789639",
    "end": "794680"
  },
  {
    "text": "of reference as if it's an instance method what I can do is refer to the",
    "start": "794680",
    "end": "799720"
  },
  {
    "text": "static method via an instance I",
    "start": "799720",
    "end": "805639"
  },
  {
    "text": "think no it's the other way around you can refer to an instance yes sorry you",
    "start": "805639",
    "end": "812199"
  },
  {
    "text": "can refer to an instance method um I can do x.",
    "start": "812199",
    "end": "817199"
  },
  {
    "text": "split I hope no it's because I Haven name of see I hope that you would be on",
    "start": "817800",
    "end": "824839"
  },
  {
    "text": "your toes yeah and that now works good few right so even though is null or",
    "start": "824839",
    "end": "830240"
  },
  {
    "text": "empty you can't call as X do is null or empty you can use x dots to just say",
    "start": "830240",
    "end": "835360"
  },
  {
    "text": "what type we interested in great so now that means I can write hello",
    "start": "835360",
    "end": "841399"
  },
  {
    "text": "world without ever introducing anything in my program text that says hello world",
    "start": "841399",
    "end": "848320"
  },
  {
    "text": "introducing any kind of members because this syntax also works for",
    "start": "848320",
    "end": "853880"
  },
  {
    "text": "dynamic so we can write Dynamic D is null and then do name of d. hello world",
    "start": "853880",
    "end": "861000"
  },
  {
    "text": "or d. Mongolian vow separator and as you can imagine d.",
    "start": "861000",
    "end": "866480"
  },
  {
    "text": "Mongolian Val separator has the Mongolian Val separator between the n and the V and then between the L and the",
    "start": "866480",
    "end": "873000"
  },
  {
    "text": "capital S so between the words and as a bonus feature not only is",
    "start": "873000",
    "end": "879480"
  },
  {
    "text": "it allowing us to write that text but it will also do Unicode normalization for us so this is exactly the same I'm copy",
    "start": "879480",
    "end": "888440"
  },
  {
    "text": "copy pasting into here so you might expect that that length and that length",
    "start": "888440",
    "end": "895040"
  },
  {
    "text": "will be the same but actually the length um property on string is going to",
    "start": "895040",
    "end": "900240"
  },
  {
    "text": "include the Mongolian Val separator whereas the version here is not going to",
    "start": "900240",
    "end": "905880"
  },
  {
    "text": "be the same string because it doesn't include it it's being normalized away and we can see that if we do name of anything we see that we get Mongolian",
    "start": "905880",
    "end": "914279"
  },
  {
    "text": "Val separator we have a length of 23 without the mvss and 25 with so next",
    "start": "914279",
    "end": "920959"
  },
  {
    "text": "time you're faced with a broken keyboard or you know if if Kathleen's up here and and trying to find the the double quotes",
    "start": "920959",
    "end": "927800"
  },
  {
    "text": "you no longer need to worry about it just use name of on Dynamic see always useful",
    "start": "927800",
    "end": "934759"
  },
  {
    "text": "stuff okay uh um just those next to Kathleen she",
    "start": "934759",
    "end": "941000"
  },
  {
    "text": "doesn't have anything like fruit or anything with her she just okay I may",
    "start": "941000",
    "end": "946240"
  },
  {
    "text": "need to duck uh Kathleen yesterday was saying about when not to use tle deconstruction well how about four dates",
    "start": "946240",
    "end": "954000"
  },
  {
    "text": "and times how would you deconstruct a date",
    "start": "954000",
    "end": "960120"
  },
  {
    "start": "956000",
    "end": "1067000"
  },
  {
    "text": "so this is C seven feature you can um write uh VAR XY Z equals Fu if Fu has a",
    "start": "960120",
    "end": "971560"
  },
  {
    "text": "deconstruct method with three out parameters and the trouble with dates is",
    "start": "971560",
    "end": "978360"
  },
  {
    "text": "you know we like to think of it as Daymon year and Kathleen probably likes to think of it as month day",
    "start": "978360",
    "end": "984959"
  },
  {
    "text": "year and we should really you know be open and inclusive Ive of everyone",
    "start": "984959",
    "end": "991519"
  },
  {
    "text": "so really want we want to be able to um",
    "start": "991519",
    "end": "996880"
  },
  {
    "text": "deconstruct using datetime extensions and you know have x y and Zed",
    "start": "996880",
    "end": "1003639"
  },
  {
    "text": "and who knows what X Y and Z will be maybe they will be year month day maybe",
    "start": "1003639",
    "end": "1009319"
  },
  {
    "text": "they will be uh month day year maybe they'll be Daymon year so if we run",
    "start": "1009319",
    "end": "1014920"
  },
  {
    "text": "this and run it the first time it's doing Daymon year which is you know reasonably sens sensible um if",
    "start": "1014920",
    "end": "1022839"
  },
  {
    "text": "I do uh hash Define US state",
    "start": "1022839",
    "end": "1028079"
  },
  {
    "text": "format uh sorry it was it was month day year then presumably",
    "start": "1029600",
    "end": "1036160"
  },
  {
    "text": "um and actually I don't Define it there I Define it in the extensions so I can",
    "start": "1036160",
    "end": "1043558"
  },
  {
    "text": "Define and it needs to be above the using directives again um I can Define that we want the",
    "start": "1043559",
    "end": "1051679"
  },
  {
    "text": "uh ISO date format which is kind of useful instead of the US date",
    "start": "1051679",
    "end": "1057880"
  },
  {
    "text": "format but I can do us explicitly 119 and if I do UK date",
    "start": "1058840",
    "end": "1066600"
  },
  {
    "text": "format then I don't need to change my calling code at all I can put this one place in the project and it will now do",
    "start": "1066600",
    "end": "1072120"
  },
  {
    "start": "1067000",
    "end": "1160000"
  },
  {
    "text": "191 2017 and that's just simple pre-processor thing but what I do like about this is that I haven't changed my",
    "start": "1072120",
    "end": "1078840"
  },
  {
    "text": "implementation at all my deconstruct method I've just changed the signature to have day month year or month day year",
    "start": "1078840",
    "end": "1087320"
  },
  {
    "text": "or year month day and then the body of the method in every case uses the same thing well okay that's that's fine if",
    "start": "1087320",
    "end": "1095720"
  },
  {
    "text": "you're happy to set the project uh do this defined not here but in the project",
    "start": "1095720",
    "end": "1101559"
  },
  {
    "text": "properties but what if in some source files you some of your source is written by UK developers and some of it's",
    "start": "1101559",
    "end": "1108360"
  },
  {
    "text": "written by us developers and they both want to be able to you know not write you wouldn't actually write that you",
    "start": "1108360",
    "end": "1114360"
  },
  {
    "text": "would write whatever comes naturally to you so I write uh day month year in fact I write year month day um because I'm so",
    "start": "1114360",
    "end": "1121559"
  },
  {
    "text": "used to the iso format and then in a different file Kathleen might want to write month day year well we've got her",
    "start": "1121559",
    "end": "1128240"
  },
  {
    "text": "covered too because instead of having one implementation we can have three",
    "start": "1128240",
    "end": "1133520"
  },
  {
    "text": "different implementations all still extension methods just in different classes and so",
    "start": "1133520",
    "end": "1139039"
  },
  {
    "text": "long as we use using static and say which one we want to",
    "start": "1139039",
    "end": "1144360"
  },
  {
    "text": "import we'll get the right thing so if we this will do the isodate format so we'll end up with 2017 um",
    "start": "1144360",
    "end": "1153399"
  },
  {
    "text": "119 yes and then you know if if cathine were writing some code",
    "start": "1154600",
    "end": "1160200"
  },
  {
    "start": "1160000",
    "end": "1275000"
  },
  {
    "text": "instead we could use this and she would then declare VAR um month day year and",
    "start": "1160200",
    "end": "1166880"
  },
  {
    "text": "it would all do the right thing so this allows you to uh let developers from",
    "start": "1166880",
    "end": "1172159"
  },
  {
    "text": "multiple cultures write perfectly nice code for themselves and so long as only",
    "start": "1172159",
    "end": "1177760"
  },
  {
    "text": "people from the same culture ever need to read or maintain that code then everyone's happy um don't do any of this",
    "start": "1177760",
    "end": "1183840"
  },
  {
    "text": "if I didn't make it really clear before don't do any of it um however I do really like I would recommend the using",
    "start": "1183840",
    "end": "1190600"
  },
  {
    "text": "static as a way of importing extension methods we have this in no to time I have a testing assembly which has a",
    "start": "1190600",
    "end": "1197240"
  },
  {
    "text": "bunch of extension methods um on int and double and things so that you can do uh",
    "start": "1197240",
    "end": "1202919"
  },
  {
    "text": "this won't work here but I'd be able to do uh local date um birthday equals 19.",
    "start": "1202919",
    "end": "1209799"
  },
  {
    "text": "June 1976 which I wouldn't recommend in production code but it's really clear",
    "start": "1209799",
    "end": "1214919"
  },
  {
    "text": "when you're writing test code for you know maybe you've got some analyst or whatever has said suppose the year",
    "start": "1214919",
    "end": "1220880"
  },
  {
    "text": "starts you know the business year starts on April the 1st well 1. April 2015 is",
    "start": "1220880",
    "end": "1226080"
  },
  {
    "text": "really really clear um and I've got different ones for local date or you",
    "start": "1226080",
    "end": "1232280"
  },
  {
    "text": "know another time I could write duration um uh session length equals 1. hours for example but I",
    "start": "1232280",
    "end": "1241240"
  },
  {
    "text": "don't necessarily want both the hours extension method and the June extension method at the same time and before c 7",
    "start": "1241240",
    "end": "1248880"
  },
  {
    "text": "uh sorry before c 6 this was a problem because you imported the whole of all of",
    "start": "1248880",
    "end": "1254720"
  },
  {
    "text": "the extension methods within one namespace in one Go just with using stuff now you can pick I want the",
    "start": "1254720",
    "end": "1260840"
  },
  {
    "text": "extension methods from that class please and that class but not the one in the middle um this is one of my beefs that",
    "start": "1260840",
    "end": "1267480"
  },
  {
    "text": "I've been giving feedback to Microsoft on since 2005 and as of 2015 it's all",
    "start": "1267480",
    "end": "1274159"
  },
  {
    "text": "good okay do shout if there's anything in the meantime that you want to uh come",
    "start": "1274559",
    "end": "1281039"
  },
  {
    "start": "1275000",
    "end": "1313000"
  },
  {
    "text": "up with otherwise I'll just keep moving on to the next thing so how many of you like regions hash region stuff yeah okay um I",
    "start": "1281039",
    "end": "1289559"
  },
  {
    "text": "used to like it more than I do now I sometimes use it if if I've got a huge amount of code that's sort of all boilerplate stuff that's quite handy but",
    "start": "1289559",
    "end": "1296440"
  },
  {
    "text": "I don't use it religiously all the time um the trouble is it looks a bit boring",
    "start": "1296440",
    "end": "1302640"
  },
  {
    "text": "but the great thing is uh with expression body members we can get something that looks a little bit like",
    "start": "1302640",
    "end": "1307720"
  },
  {
    "text": "that but a bit more attractive just by declaring a property or a field well a",
    "start": "1307720",
    "end": "1313039"
  },
  {
    "start": "1313000",
    "end": "1484000"
  },
  {
    "text": "property so um ignore the the implementation details for now",
    "start": "1313039",
    "end": "1319320"
  },
  {
    "text": "but look how we can write something that's a little bit like a region okay it's not going to fold but isn't that",
    "start": "1319320",
    "end": "1324600"
  },
  {
    "text": "nice we can highlight it as much as we like we could you know get rid of the middle bit so long as we've got some",
    "start": "1324600",
    "end": "1330360"
  },
  {
    "text": "balance actually I'm not even sure that the balance is required but we can you know have a bit awesome code you could",
    "start": "1330360",
    "end": "1335919"
  },
  {
    "text": "use this for different levels of headings it's great um the the name j here I couldn't",
    "start": "1335919",
    "end": "1342600"
  },
  {
    "text": "find anything any Unicode identifier that looks like a backwards semicolon and we do need to have the semicolon so",
    "start": "1342600",
    "end": "1348840"
  },
  {
    "text": "if anyone finds any Unicode characters that are valid in identifiers um and I could use as the",
    "start": "1348840",
    "end": "1355240"
  },
  {
    "text": "variable name that would be awesome but so this is a uh a property of type J",
    "start": "1355240",
    "end": "1361200"
  },
  {
    "text": "called underscore which is a get only property",
    "start": "1361200",
    "end": "1366440"
  },
  {
    "text": "that uh returns a well it's got to return a J",
    "start": "1366440",
    "end": "1372360"
  },
  {
    "text": "and J is a delegate that itself returns A J when given a middle bit as the sort",
    "start": "1372360",
    "end": "1378360"
  },
  {
    "text": "of fairly self-descriptive stuff that comes in the middle um so we've got a",
    "start": "1378360",
    "end": "1384000"
  },
  {
    "text": "Lambda expression that itself returns a lambra expression which returns um oh we've got some strings here well we've",
    "start": "1384000",
    "end": "1391240"
  },
  {
    "text": "got to have been uh given this this will have to be middle bit in order to get the the Lambda",
    "start": "1391240",
    "end": "1398480"
  },
  {
    "text": "expression for J to work so if this is a middle bit we want to return a j",
    "start": "1398480",
    "end": "1405080"
  },
  {
    "text": "given a less than or equal between a string and the middle bit well okay less",
    "start": "1405080",
    "end": "1412480"
  },
  {
    "text": "than or equal between string and middle bit we can do here we've got operator overloading uh but then we also need to",
    "start": "1412480",
    "end": "1419919"
  },
  {
    "text": "be able to convert from a middle bit to J um and that's fine we can just do an",
    "start": "1419919",
    "end": "1425320"
  },
  {
    "text": "implicit conversion and all of these do null it's not actually going to do anything um and I can't remember offhand",
    "start": "1425320",
    "end": "1433559"
  },
  {
    "text": "oh yes the reason I need the implicit conversion from a j to a middle bit is",
    "start": "1433559",
    "end": "1440240"
  },
  {
    "text": "well that's going to be a middle bit but then I need to compare that with another",
    "start": "1440240",
    "end": "1447760"
  },
  {
    "text": "middle bit it's possible that I could get away with uh less than or equal between J and",
    "start": "1447760",
    "end": "1454960"
  },
  {
    "text": "um middle bit as well but an implicit conversion is simpler the one you know the one thing that you might want to",
    "start": "1454960",
    "end": "1461240"
  },
  {
    "text": "complain about this code and obviously the only thing is that we have to include these um greater than or equal",
    "start": "1461240",
    "end": "1466480"
  },
  {
    "text": "to operators as well and that's just the compiler won't let you do less than or equal to but not greater than or equal",
    "start": "1466480",
    "end": "1472080"
  },
  {
    "text": "to um so you know maybe that's the one thing that makes you decide not to use",
    "start": "1472080",
    "end": "1478159"
  },
  {
    "text": "this code um who can tell",
    "start": "1478159",
    "end": "1484799"
  },
  {
    "start": "1484000",
    "end": "1513000"
  },
  {
    "text": "okay uh pre-processor audities this is a slightly old one and this is not new to",
    "start": "1484799",
    "end": "1489960"
  },
  {
    "text": "C at all but it's just an interesting thing around the fact that c doesn't really have a pre-processor so if you",
    "start": "1489960",
    "end": "1496960"
  },
  {
    "text": "give the C pre-process or something it sort of doesn't really care about the code it just cares about your hash",
    "start": "1496960",
    "end": "1503520"
  },
  {
    "text": "defines and your hash if etc etc C is a little bit different so you can confuse",
    "start": "1503520",
    "end": "1512640"
  },
  {
    "text": "things I won't ask what you think this will show because um actually Visual Studio is highlighting it already but",
    "start": "1512640",
    "end": "1519480"
  },
  {
    "start": "1513000",
    "end": "1676000"
  },
  {
    "text": "here we have we're we're defining Foo up at the top and then we're saying if",
    "start": "1519480",
    "end": "1525440"
  },
  {
    "text": "Fu and so we're printing out fu is defined and then we start a multi-line comment and this is the interesting bit",
    "start": "1525440",
    "end": "1532240"
  },
  {
    "text": "the hash else I believe in the C preprocessor and",
    "start": "1532240",
    "end": "1537320"
  },
  {
    "text": "someone will say I'm wrong I believe in the C pre-processor that hash else would say oh no well Fu was defined so I'll",
    "start": "1537320",
    "end": "1543840"
  },
  {
    "text": "ignore everything from here onwards the C compiler is saying no you're in a multi-line comment it's the the paa",
    "start": "1543840",
    "end": "1550840"
  },
  {
    "text": "really Lexa um you're in a a multi-line comment so that hash else is just part of the multi-line comment that's",
    "start": "1550840",
    "end": "1556520"
  },
  {
    "text": "absolutely fine so we'll keep going and this is all part of the comment and the comment ends with this with this star",
    "start": "1556520",
    "end": "1566600"
  },
  {
    "text": "slash and at that point we're out of the comment so this else means the",
    "start": "1566600",
    "end": "1571840"
  },
  {
    "text": "pre-processor is saying oh I'll just ignore everything else fine so we just print fu is",
    "start": "1571840",
    "end": "1577600"
  },
  {
    "text": "defined if we don't Define Foo let's define Foo 2 instead suddenly okay we",
    "start": "1577600",
    "end": "1584000"
  },
  {
    "text": "don't see this and we don't see the start of the comment you can write whatever you like in stuff that's",
    "start": "1584000",
    "end": "1589520"
  },
  {
    "text": "ignored by the pre-processor so it doesn't care about the start of a comment so it sees this else as the bit",
    "start": "1589520",
    "end": "1598559"
  },
  {
    "text": "that it should start caring about and now we print f is not defined and now",
    "start": "1598559",
    "end": "1603640"
  },
  {
    "text": "this little bit here that the second half of this was the end comment when Fu",
    "start": "1603640",
    "end": "1610440"
  },
  {
    "text": "was defined it's now the beginning of a multi-line comment because F isn't defined so now we're in a multi-line",
    "start": "1610440",
    "end": "1616559"
  },
  {
    "text": "comment again and this has else that was useful before is now in a",
    "start": "1616559",
    "end": "1622520"
  },
  {
    "text": "comment and we just have this comment and we end it I",
    "start": "1622520",
    "end": "1628399"
  },
  {
    "text": "suspect I suspect I could probably take that away and the whole thing would keep working either way but it's kind of more",
    "start": "1628399",
    "end": "1634880"
  },
  {
    "text": "symmetric as it is so this will print f is not defined twice can anyone think of a similar",
    "start": "1634880",
    "end": "1643000"
  },
  {
    "text": "feature we could use to demonstrate something kind of the same although it'll have a little bit more effect on",
    "start": "1643000",
    "end": "1648320"
  },
  {
    "text": "the output what else might start consuming",
    "start": "1648320",
    "end": "1655240"
  },
  {
    "text": "that hash else not as a pre-processor hash",
    "start": "1655240",
    "end": "1661760"
  },
  {
    "text": "else uh sort of",
    "start": "1662159",
    "end": "1667360"
  },
  {
    "text": "elaborate so if I leave off the end here it's just going to say well that's an",
    "start": "1668640",
    "end": "1673840"
  },
  {
    "text": "unterminated string literal multi-line strings yes for string literals",
    "start": "1673840",
    "end": "1681000"
  },
  {
    "start": "1676000",
    "end": "1730000"
  },
  {
    "text": "so this is largely similar here we have f is defined so",
    "start": "1681000",
    "end": "1687360"
  },
  {
    "text": "we're going to get a Verbatim string literal that's the at there which says f",
    "start": "1687360",
    "end": "1693120"
  },
  {
    "text": "is defined and then the string contains hash else and it also contains string x",
    "start": "1693120",
    "end": "1698600"
  },
  {
    "text": "equals at and then this double quote here is the end of the the verbatim string",
    "start": "1698600",
    "end": "1706480"
  },
  {
    "text": "literal so this will print print fu is defined else string equals at if we",
    "start": "1706480",
    "end": "1712559"
  },
  {
    "text": "don't Define Fu or Define f 2 now this isn't the end of the previous string",
    "start": "1712559",
    "end": "1719039"
  },
  {
    "text": "literal it's the start of a new verbatim string literal and now this else is",
    "start": "1719039",
    "end": "1724399"
  },
  {
    "text": "consumed and now we've got f is not",
    "start": "1724399",
    "end": "1728640"
  },
  {
    "text": "defined and this is one of those things that no it doesn't actually have any I can't pretend it could be useful in any",
    "start": "1729840",
    "end": "1735919"
  },
  {
    "start": "1730000",
    "end": "1891000"
  },
  {
    "text": "way shape or form but it is quite fun um I'll give another one of those that I haven't presented before so feedback",
    "start": "1735919",
    "end": "1742080"
  },
  {
    "text": "welcome um something I wasn't aware you could do before which was to use attributes on type parameters has anyone",
    "start": "1742080",
    "end": "1750440"
  },
  {
    "text": "ever seen and this is actually an use that maybe with a rosin analyzer which",
    "start": "1750440",
    "end": "1755600"
  },
  {
    "text": "you know is to do um you could have so fu is a generic type and it's type",
    "start": "1755600",
    "end": "1763640"
  },
  {
    "text": "parameter the type parameter itself has an attribute of must be mutable and you",
    "start": "1763640",
    "end": "1769320"
  },
  {
    "text": "can imagine writing a Rosen analyzer saying everywhere I see a fo of t or you",
    "start": "1769320",
    "end": "1774840"
  },
  {
    "text": "a fo of something I will validate that either that's a a fo of T in a generic",
    "start": "1774840",
    "end": "1781559"
  },
  {
    "text": "method or type where the T also has must be immutable or if it's a Concrete type argument I'll check that it has the",
    "start": "1781559",
    "end": "1789159"
  },
  {
    "text": "immutable attribute so here in in our usage code we've got um bar is a class",
    "start": "1789159",
    "end": "1795080"
  },
  {
    "text": "which is immutable Bas is a class which isn't and we would like this to be",
    "start": "1795080",
    "end": "1801919"
  },
  {
    "text": "fine and that not to be fine and sure we can't change the actual compiler rules",
    "start": "1801919",
    "end": "1807440"
  },
  {
    "text": "to say C says it's wrong but we could fairly easily and I well fairly easily",
    "start": "1807440",
    "end": "1813200"
  },
  {
    "text": "um writing rosin analyzers is not easy but it's feasible um I I think it would",
    "start": "1813200",
    "end": "1819440"
  },
  {
    "text": "be entirely feasible to write an analyzer so that it would come up with an error here and that could be actually useful but I'm intrigued has anyone else",
    "start": "1819440",
    "end": "1826000"
  },
  {
    "text": "seen the the bit of syntax to be clear this is the syntax that is surprising to",
    "start": "1826000",
    "end": "1833000"
  },
  {
    "text": "me anyone to you have right what was it used",
    "start": "1833000",
    "end": "1838240"
  },
  {
    "text": "for ah right uh in Core Labs it's used for",
    "start": "1839679",
    "end": "1846559"
  },
  {
    "text": "is primitive um so so that it could check endianness was",
    "start": "1846559",
    "end": "1852320"
  },
  {
    "text": "that ah right okay so so it could cope with network to host order or host Network order depending on the native",
    "start": "1853559",
    "end": "1860120"
  },
  {
    "text": "indianness cool um if anyone sees any uh",
    "start": "1860120",
    "end": "1865279"
  },
  {
    "text": "any uses in the wild beyond that please email me because I would love to collect them",
    "start": "1865279",
    "end": "1871200"
  },
  {
    "text": "somewhere uh you could right so yes you could do it for enums or delegates um",
    "start": "1873279",
    "end": "1878960"
  },
  {
    "text": "instead for unconstrained Melody type things yes yeah that would be quite a cool thing um intense won't help you",
    "start": "1878960",
    "end": "1886639"
  },
  {
    "text": "there but yeah um yeah that would be a nice way of doing things cool let me know if you",
    "start": "1886639",
    "end": "1893039"
  },
  {
    "start": "1891000",
    "end": "1915000"
  },
  {
    "text": "find anything else uh let me just shut some windows down I think we're dealing with string interpolation next yes we",
    "start": "1893039",
    "end": "1899159"
  },
  {
    "text": "are right so have you all used string interpolation in C 6 are you all aware",
    "start": "1899159",
    "end": "1906960"
  },
  {
    "text": "that it uses the current culture by default so if you're logging use invariant culture I'll come back to",
    "start": "1906960",
    "end": "1912559"
  },
  {
    "text": "logging um so Lambda expressions",
    "start": "1912559",
    "end": "1918120"
  },
  {
    "start": "1915000",
    "end": "2073000"
  },
  {
    "text": "the expression in an interpolated string literal has to be an expression okay so",
    "start": "1918120",
    "end": "1925360"
  },
  {
    "text": "you can't do this this is meant to be well I'm opening the bit that's meant to be",
    "start": "1925360",
    "end": "1933120"
  },
  {
    "text": "uh the interpolated part and then oh I'll just have a a a block here and do",
    "start": "1933120",
    "end": "1940080"
  },
  {
    "text": "stuff in the block now that's not allowed that's not an",
    "start": "1940080",
    "end": "1946158"
  },
  {
    "text": "expression Lambda expressions are expressions but they don't have a type",
    "start": "1946399",
    "end": "1951840"
  },
  {
    "text": "so you can't just write you know uh I can do",
    "start": "1951840",
    "end": "1958320"
  },
  {
    "text": "Lambda so I can't do console. right line um and then just goes to Y you",
    "start": "1961200",
    "end": "1971120"
  },
  {
    "text": "won't work okay that's not going to pass",
    "start": "1971120",
    "end": "1978639"
  },
  {
    "text": "because the Lambda expression has no type uh so it can't convert it to",
    "start": "1978639",
    "end": "1983720"
  },
  {
    "text": "anything but you can cast the Lambda expression to a delegate type um and then you can just use it on",
    "start": "1983720",
    "end": "1991120"
  },
  {
    "text": "its own so if I let me just comment everything else out",
    "start": "1991120",
    "end": "1997080"
  },
  {
    "text": "here the hideousness we'll see later so if we just have a lra",
    "start": "1997360",
    "end": "2004600"
  },
  {
    "text": "expression uh thank you [Music] uh",
    "start": "2006039",
    "end": "2012639"
  },
  {
    "text": "boom okay so this now compiles I believe and we've got the Lambda",
    "start": "2012639",
    "end": "2019840"
  },
  {
    "text": "expression we've got that in Brackets uh because precedence and then we've got a cast I",
    "start": "2019840",
    "end": "2027880"
  },
  {
    "text": "suppose I could do it probably yeah I don't think I've ever",
    "start": "2027880",
    "end": "2034000"
  },
  {
    "text": "tried to get away from casting by just using as",
    "start": "2034000",
    "end": "2039600"
  },
  {
    "text": "is that going to work no I think I think you'd still need the uh the",
    "start": "2041880",
    "end": "2047720"
  },
  {
    "text": "bracket and even then okay as operator isn't as powerful as cast fine",
    "start": "2047720",
    "end": "2055158"
  },
  {
    "text": "um right okay so this is now converting it to a funk of string and this is just",
    "start": "2055480",
    "end": "2063520"
  },
  {
    "text": "going to print uh what am I on I'm on the wrong project string interpolation I'm doing Lambda",
    "start": "2063520",
    "end": "2072118"
  },
  {
    "start": "2073000",
    "end": "2156000"
  },
  {
    "text": "expression okay so that's just printing oh it's a funk of string well once we've",
    "start": "2073280",
    "end": "2079398"
  },
  {
    "text": "got a funk of string we know how to invoke it so we can just add a couple of",
    "start": "2079399",
    "end": "2085200"
  },
  {
    "text": "brackets we can let's make it a little bit more readable by calling invoke instead and so now when we evaluate the",
    "start": "2085200",
    "end": "2094040"
  },
  {
    "text": "string um as in when at a execution time it",
    "start": "2094040",
    "end": "2100200"
  },
  {
    "text": "evaluates this argument it will create the delegate and then immediately invoke it which will print hello and then",
    "start": "2100200",
    "end": "2107640"
  },
  {
    "text": "return Why",
    "start": "2107640",
    "end": "2113079"
  },
  {
    "text": "great we can then if we want to avoid the cast if you know you're doing this regularly in code for some bizarre",
    "start": "2114880",
    "end": "2121880"
  },
  {
    "text": "reason um you can just write a method and in this case uh I",
    "start": "2121880",
    "end": "2128040"
  },
  {
    "text": "have got it in the same class but you could write it somewhere else and import static so using static it so that you",
    "start": "2128040",
    "end": "2134280"
  },
  {
    "text": "know you could use it everywhere and then you just need to pass in the um Lambda expression that will do exactly",
    "start": "2134280",
    "end": "2140280"
  },
  {
    "text": "the same thing but you can if you can stomach the",
    "start": "2140280",
    "end": "2145839"
  },
  {
    "text": "brackets you can do a whole program in our interpolated string literal so when we run this well let",
    "start": "2146160",
    "end": "2153760"
  },
  {
    "text": "let's just run it and then have a look at the code so ah what's your name John hello",
    "start": "2153760",
    "end": "2161160"
  },
  {
    "text": "John so the order of execution here is",
    "start": "2161760",
    "end": "2168160"
  },
  {
    "text": "it we have console. right line starting with hello but before we can get into the console. right line",
    "start": "2168160",
    "end": "2175400"
  },
  {
    "text": "um uh evaluation uh sorry invocation we have to evaluate this string and this",
    "start": "2175400",
    "end": "2181280"
  },
  {
    "text": "string which is a Verbatim interpolate sorry interpolated verbatim string literal",
    "start": "2181280",
    "end": "2187960"
  },
  {
    "text": "is going to need to create this delegate and then invoke it and the",
    "start": "2187960",
    "end": "2194280"
  },
  {
    "text": "delegate will print something else to the console then ask our name and then",
    "start": "2194280",
    "end": "2199440"
  },
  {
    "text": "we're returning the name so that that can be appended on to hello and that's",
    "start": "2199440",
    "end": "2204720"
  },
  {
    "text": "what ends up being called to console. rightline so I think you can see this",
    "start": "2204720",
    "end": "2210119"
  },
  {
    "text": "can radically simplify your code",
    "start": "2210119",
    "end": "2215800"
  },
  {
    "text": "yeah oh",
    "start": "2215800",
    "end": "2219520"
  },
  {
    "text": "yep oh Cy uh we'll let's noodle on that",
    "start": "2232920",
    "end": "2238839"
  },
  {
    "text": "later on I think we can definitely come up with something nastier um yeah uh but",
    "start": "2238839",
    "end": "2244200"
  },
  {
    "text": "yes I think uh trying to do that now is going to fail um but there are other",
    "start": "2244200",
    "end": "2249480"
  },
  {
    "text": "things we can do with uh string interpolation which are fun so",
    "start": "2249480",
    "end": "2255079"
  },
  {
    "start": "2254000",
    "end": "2300000"
  },
  {
    "text": "normally with regular string interpolation even if we use formattable string and this is the bit that you",
    "start": "2255079",
    "end": "2261760"
  },
  {
    "text": "might learn something more uh how many of you have used or seam formattable",
    "start": "2261760",
    "end": "2267160"
  },
  {
    "text": "string okay right brief diversion so the type of an interpolated string literal",
    "start": "2267160",
    "end": "2273560"
  },
  {
    "text": "is string formattable string is a type introduced in net 4.6 and net standard",
    "start": "2273560",
    "end": "2280839"
  },
  {
    "text": "13 there is no conversion from string the type to formattable string but there",
    "start": "2280839",
    "end": "2287760"
  },
  {
    "text": "is an implicit conversion from an interpolated string literal expression",
    "start": "2287760",
    "end": "2294440"
  },
  {
    "text": "to formattable string if that sounds crazy it isn't you've seen this before",
    "start": "2294440",
    "end": "2300880"
  },
  {
    "start": "2300000",
    "end": "2357000"
  },
  {
    "text": "if I do V xal 10 the type of X is int the type of the integer literal there is",
    "start": "2300880",
    "end": "2308319"
  },
  {
    "text": "int I cannot do bite y equal X that won't compile because there's no",
    "start": "2308319",
    "end": "2315599"
  },
  {
    "text": "implicit conversion from int to bite but I can do B yals 10 because there is an",
    "start": "2315599",
    "end": "2322440"
  },
  {
    "text": "implicit conversion from a constant expression of an integer type where the constant value is within the range of",
    "start": "2322440",
    "end": "2328520"
  },
  {
    "text": "bite to bite okay so it's worth getting in your head the the difference between",
    "start": "2328520",
    "end": "2334760"
  },
  {
    "text": "a conversion from a type to another type or a conversion from an expression to",
    "start": "2334760",
    "end": "2339839"
  },
  {
    "text": "another type and you also get that with Lambda Expressions they have no type so there has to be an implicit conversion",
    "start": "2339839",
    "end": "2346119"
  },
  {
    "text": "from a Lambda expression to some other type or you could never use them but it is a slightly subtle",
    "start": "2346119",
    "end": "2352119"
  },
  {
    "text": "difference and damic has conversions one way but not the other it's really bizarre so the point of formattable",
    "start": "2352119",
    "end": "2359640"
  },
  {
    "start": "2357000",
    "end": "2430000"
  },
  {
    "text": "string the the real usage of formattable strings is to be able to perform the",
    "start": "2359640",
    "end": "2365079"
  },
  {
    "text": "string formatting in whatever culture you want that's the intended use so obviously we're not going to bother",
    "start": "2365079",
    "end": "2370119"
  },
  {
    "text": "doing that we'll do more interesting stuff instead when you use a conversion from",
    "start": "2370119",
    "end": "2376480"
  },
  {
    "text": "uh string an interpretate string literal to formattable string um it works out",
    "start": "2376480",
    "end": "2382400"
  },
  {
    "text": "what it would do in terms of what's the format string that it's going to call string do format with so that ends up",
    "start": "2382400",
    "end": "2388319"
  },
  {
    "text": "being that you know the regular braces with numbers in um and it evaluates",
    "start": "2388319",
    "end": "2396839"
  },
  {
    "text": "value in this case and it does that once and creates an instance of formattable string that's",
    "start": "2396839",
    "end": "2403280"
  },
  {
    "text": "got the format string and the arguments as values so that's evaluated once and then",
    "start": "2403280",
    "end": "2412280"
  },
  {
    "text": "when you call format. to string it says okay I will call string dot format um",
    "start": "2412280",
    "end": "2418440"
  },
  {
    "text": "you know with whatever culture you specify if you're specifying one um and pass in the values that I evaluated",
    "start": "2418440",
    "end": "2424760"
  },
  {
    "text": "before and it does that evalu ation once in the conversion so here unlike for",
    "start": "2424760",
    "end": "2432319"
  },
  {
    "start": "2430000",
    "end": "2475000"
  },
  {
    "text": "example with link where if you had a link query imagine something like this",
    "start": "2432319",
    "end": "2437920"
  },
  {
    "text": "but as a link query um changing value if value were captured within your link",
    "start": "2437920",
    "end": "2444000"
  },
  {
    "text": "query changing the value of value would change the results of the query here if",
    "start": "2444000",
    "end": "2449160"
  },
  {
    "text": "I run this regular evaluation it's going to print before",
    "start": "2449160",
    "end": "2454480"
  },
  {
    "text": "twice and then the bit of code that's counting here well our formattable string is just oh get dat time.net at",
    "start": "2454480",
    "end": "2461680"
  },
  {
    "text": "UTC now that's evaluated once and then retained wouldn't it be nice if we could",
    "start": "2461680",
    "end": "2467440"
  },
  {
    "text": "evaluate things kind of lazily Instead at the point of formatting instead of at the point of constructing the",
    "start": "2467440",
    "end": "2474160"
  },
  {
    "text": "formattable string well we can sort of with a bit of work so this is very similar code to",
    "start": "2474160",
    "end": "2481880"
  },
  {
    "start": "2475000",
    "end": "2530000"
  },
  {
    "text": "what you saw before except for this chunk",
    "start": "2481880",
    "end": "2487920"
  },
  {
    "text": "okay so fairly obviously this is a Lambda expression and we have um a method that",
    "start": "2487920",
    "end": "2495760"
  },
  {
    "text": "accepts a funk of object and returns whatever I called it",
    "start": "2495760",
    "end": "2503359"
  },
  {
    "text": "captured capture so it remembers not well it it",
    "start": "2503359",
    "end": "2510160"
  },
  {
    "text": "is evaluating it once and it evaluates to a single delegate but the good thing is we've now got a delegate and we can",
    "start": "2510160",
    "end": "2516319"
  },
  {
    "text": "invoke that delegate as many times as we like and in particular we can Implement I",
    "start": "2516319",
    "end": "2522319"
  },
  {
    "text": "formattable which means that when string. format gets called we'll end up",
    "start": "2522319",
    "end": "2528560"
  },
  {
    "text": "in here and at that point we can then just call um our delegate so we can evaluate",
    "start": "2528560",
    "end": "2537599"
  },
  {
    "start": "2530000",
    "end": "2604000"
  },
  {
    "text": "it every time we're formatted we can re-evaluate the delegate and if we've been given uh if if it returns a value",
    "start": "2537599",
    "end": "2545000"
  },
  {
    "text": "which is also formattable then we can pass the format string to that so for example in this datetime do now I've",
    "start": "2545000",
    "end": "2553880"
  },
  {
    "text": "specified that I just want to give the hour minute second um and down to",
    "start": "2553880",
    "end": "2558960"
  },
  {
    "text": "millisecond so if we run this code instead even though just to be really clear all we're doing is printing",
    "start": "2558960",
    "end": "2565960"
  },
  {
    "text": "formattable 10 times every time we print it uh there we",
    "start": "2565960",
    "end": "2572760"
  },
  {
    "text": "go it's printing a different time",
    "start": "2572760",
    "end": "2577559"
  },
  {
    "text": "let's take uh formattable string one step further how many of you know about SQL",
    "start": "2581480",
    "end": "2587000"
  },
  {
    "text": "injections hacks anyone who didn't put their hand",
    "start": "2587000",
    "end": "2592440"
  },
  {
    "text": "up the first thing they do after this session or you're allowed to leave now is you write up uh you go and read um",
    "start": "2592440",
    "end": "2598880"
  },
  {
    "text": "Bobby tables.com or just search for SQL injection attacks um and never ever",
    "start": "2598880",
    "end": "2605440"
  },
  {
    "start": "2604000",
    "end": "2655000"
  },
  {
    "text": "write SQL that looks like",
    "start": "2605440",
    "end": "2609119"
  },
  {
    "text": "this okay let's get rid of that for the moment um but none of you",
    "start": "2611200",
    "end": "2619160"
  },
  {
    "text": "sorry none of you would ever write code like that right it's clearly going to be broken",
    "start": "2619960",
    "end": "2626359"
  },
  {
    "text": "well you know you might think that you need apostrophes around the name ID is",
    "start": "2626359",
    "end": "2632559"
  },
  {
    "text": "an integer so that's fine um but that's clearly going to break if if name has",
    "start": "2632559",
    "end": "2637640"
  },
  {
    "text": "any apostrophes in this is the one that uh I'm saying you can use this if you want it is",
    "start": "2637640",
    "end": "2645800"
  },
  {
    "text": "justifiably nice um but there are some downsides to think about but they're not",
    "start": "2645800",
    "end": "2651240"
  },
  {
    "text": "SQL injection with this code so I assert that this is safe code we're",
    "start": "2651240",
    "end": "2659720"
  },
  {
    "start": "2655000",
    "end": "2743000"
  },
  {
    "text": "not calling new SQL command we're calling new SQL command so we're not",
    "start": "2659720",
    "end": "2665200"
  },
  {
    "text": "calling the SQL command Constructor we're calling this extension method that I've created on uh SQL connection so far",
    "start": "2665200",
    "end": "2671520"
  },
  {
    "text": "so good and that doesn't accept a string it accepts a formattable",
    "start": "2671520",
    "end": "2677119"
  },
  {
    "text": "string but the interesting thing is what it does with that formattable string I'm going to sort of ruin the surprise and",
    "start": "2677119",
    "end": "2683440"
  },
  {
    "text": "and show you the results now so um when we run it I'm not going to talk to an actual database of course um instead I'm",
    "start": "2683440",
    "end": "2689440"
  },
  {
    "text": "going to print the command text and then there are two parameters and I'll print their names and their values",
    "start": "2689440",
    "end": "2697839"
  },
  {
    "text": "uh so parameter SQL okay does that look much more like something that you would",
    "start": "2697839",
    "end": "2703880"
  },
  {
    "text": "want to evaluate you know if you're not using Entity framework or whatever yeah that's that's now a",
    "start": "2703880",
    "end": "2711160"
  },
  {
    "text": "perfectly reasonable way of doing the query and the good news is you didn't",
    "start": "2711160",
    "end": "2716839"
  },
  {
    "text": "have to write command. parameters. addp 0 and make sure that the p 0 was the",
    "start": "2716839",
    "end": "2722640"
  },
  {
    "text": "same as you put in the SQL itself you never put p 0 anywhere in your code how",
    "start": "2722640",
    "end": "2728920"
  },
  {
    "text": "many people are interested in the token p 0 and want that to appear in their source code no one you know it's it's",
    "start": "2728920",
    "end": "2736839"
  },
  {
    "text": "just an artifact of I want to link this bit here to this parameter over",
    "start": "2736839",
    "end": "2742079"
  },
  {
    "text": "here so in order to do this now you've seen the results how do we do it so we",
    "start": "2742079",
    "end": "2748480"
  },
  {
    "start": "2743000",
    "end": "2847000"
  },
  {
    "text": "have our new SQL command method that takes a formattable string there are two bits in formattable",
    "start": "2748480",
    "end": "2755640"
  },
  {
    "text": "string there's the format which I've carefully documented will be this um",
    "start": "2755640",
    "end": "2761680"
  },
  {
    "text": "sorry I didn't put the mvar back in up",
    "start": "2761680",
    "end": "2766558"
  },
  {
    "text": "here okay so uh yep there's the format",
    "start": "2768200",
    "end": "2773599"
  },
  {
    "text": "and then you can go get arguments which will return you an object array with the arguments in which in our case are going",
    "start": "2773599",
    "end": "2780119"
  },
  {
    "text": "to be the name and the ID great so first",
    "start": "2780119",
    "end": "2785240"
  },
  {
    "text": "bit is pretty simple we can take that uh take the arguments and convert just the arguments",
    "start": "2785240",
    "end": "2792000"
  },
  {
    "text": "into SQL parameters wrapping those arguments and we'll use the overload of Select that accepts the position as well",
    "start": "2792000",
    "end": "2799760"
  },
  {
    "text": "and we'll use that to name our um parameters so we end up with p 0 P1 P2",
    "start": "2799760",
    "end": "2805720"
  },
  {
    "text": "Etc and we can specify the value there as",
    "start": "2805720",
    "end": "2811160"
  },
  {
    "text": "well that leaves two things we need to get the SQL itself correct and we need",
    "start": "2811160",
    "end": "2817040"
  },
  {
    "text": "to handle types so that you can specify what you want the SQL DB type to be",
    "start": "2817040",
    "end": "2823680"
  },
  {
    "text": "well both of these are done with format capturing parameter so we're we're taking our SQL",
    "start": "2823680",
    "end": "2829520"
  },
  {
    "text": "parameters so we've got p 0 Cory",
    "start": "2829520",
    "end": "2834559"
  },
  {
    "text": "p110 and wrapping each of those in a format capturing",
    "start": "2834559",
    "end": "2840599"
  },
  {
    "text": "parameter so it's a uh parameter that captures formats",
    "start": "2840599",
    "end": "2847640"
  },
  {
    "start": "2847000",
    "end": "2967000"
  },
  {
    "text": "and then all we're doing then is using those as the actual arguments to string.",
    "start": "2847640",
    "end": "2854559"
  },
  {
    "text": "format so the clearly the interesting bit is going to be what happens when you format one of these uh format capturing",
    "start": "2854559",
    "end": "2863319"
  },
  {
    "text": "parameters so a format capturing parameter in turn remembers the SQL parameter it's wrapping and then it does",
    "start": "2863319",
    "end": "2869760"
  },
  {
    "text": "two things when the string is called the first is so that we get the command text right it's just returning the name of",
    "start": "2869760",
    "end": "2876280"
  },
  {
    "text": "the parameter so where we had the placeholder in the original interpolated string literal",
    "start": "2876280",
    "end": "2882720"
  },
  {
    "text": "that's where we want the at p 0 yes great so that's what the final bit",
    "start": "2882720",
    "end": "2889599"
  },
  {
    "text": "of code is but also as a side effect and you know never ever ever make formatting",
    "start": "2889599",
    "end": "2895440"
  },
  {
    "text": "a string have side effects but in this case it's kind of useful um so we're going to see whether we've got a the bit",
    "start": "2895440",
    "end": "2903160"
  },
  {
    "text": "to the right of the colon that says how to format the value and we're saying that if you like the",
    "start": "2903160",
    "end": "2910680"
  },
  {
    "text": "format of the first parameter is that it's an envar so all we need to use is um enum",
    "start": "2910680",
    "end": "2917480"
  },
  {
    "text": "dopas and we'll say oh we don't care about casing um so we could do int here and",
    "start": "2917480",
    "end": "2925760"
  },
  {
    "text": "this will use um or let's use text instead I think and now uh if we run",
    "start": "2925760",
    "end": "2932520"
  },
  {
    "text": "this again instead of saying mvar it will say the type is text it's up with SQL DB type.",
    "start": "2932520",
    "end": "2939200"
  },
  {
    "text": "text so out of Interest I'll give you the downsides now so the upside is this",
    "start": "2939200",
    "end": "2945760"
  },
  {
    "text": "looks cleaner ignore the the diagnostic stuff this is all you need to do to end",
    "start": "2945760",
    "end": "2951119"
  },
  {
    "text": "up with a SQL command that has all the parameters and you can see where the parameters are you won't get any of",
    "start": "2951119",
    "end": "2957280"
  },
  {
    "text": "those cases where you've added the same parameter with two different names or you know you need to look back from the",
    "start": "2957280",
    "end": "2962760"
  },
  {
    "text": "SQL to the parameter filling code you've got them all in the right place that's the good bit the bad bit is you hire a",
    "start": "2962760",
    "end": "2971040"
  },
  {
    "start": "2967000",
    "end": "2994000"
  },
  {
    "text": "new developer who may be new to C they see this and they think that's the way",
    "start": "2971040",
    "end": "2976359"
  },
  {
    "text": "that I'll do SQL new SQL command connection that and suddenly bang SQL",
    "start": "2976359",
    "end": "2982400"
  },
  {
    "text": "injection attack or likewise you have you run some static tool analysis that says that",
    "start": "2982400",
    "end": "2988359"
  },
  {
    "text": "looks awfully like a SQL string that you're using string interpolation for I'm going to complain at you so if",
    "start": "2988359",
    "end": "2995599"
  },
  {
    "text": "you're not using the static tools and you're quite capable of explaining to",
    "start": "2995599",
    "end": "3000960"
  },
  {
    "text": "every member of your team how this works I think this could be a win how many people do like",
    "start": "3000960",
    "end": "3008040"
  },
  {
    "text": "this a few and how many really don't a smaller number really don't okay",
    "start": "3008040",
    "end": "3015319"
  },
  {
    "text": "and the rest of you are sort of I'm not entirely sure did everyone follow the explanation you should never ever use",
    "start": "3015319",
    "end": "3020920"
  },
  {
    "text": "this code if you don't understand it okay definitely um but this is you know",
    "start": "3020920",
    "end": "3026760"
  },
  {
    "text": "potentially useful code I see I've only got 10 minutes left I've gone through about maybe 15% of the code within this",
    "start": "3026760",
    "end": "3034000"
  },
  {
    "text": "solution um so go and have a look on GitHub later let me see what we'll",
    "start": "3034000",
    "end": "3039960"
  },
  {
    "text": "do uh are any of the rest really really fun",
    "start": "3039960",
    "end": "3045359"
  },
  {
    "text": "compared with no let's do some link everyone like link yeah um I like link",
    "start": "3045359",
    "end": "3051200"
  },
  {
    "text": "as well but the one thing I don't like about it is it's so Bose you have have",
    "start": "3051200",
    "end": "3056799"
  },
  {
    "text": "to write so much code to do anything um you know take select for instance that's six characters I'm never",
    "start": "3056799",
    "end": "3064280"
  },
  {
    "text": "going to get back from my life um so I think we we've got other",
    "start": "3064280",
    "end": "3071040"
  },
  {
    "text": "ways that we can write link queries we just need to you know write the Frameworks for them so let's there's a",
    "start": "3071040",
    "end": "3078680"
  },
  {
    "text": "an intro somewhere basic demo so I was looking at some operators um I've got",
    "start": "3078680",
    "end": "3084040"
  },
  {
    "start": "3080000",
    "end": "3125000"
  },
  {
    "text": "the evil method I might rename that to two link to operators at some point that just takes any I",
    "start": "3084040",
    "end": "3090720"
  },
  {
    "text": "numerable and then lets us work with link to operators so here we have you",
    "start": "3090720",
    "end": "3095960"
  },
  {
    "text": "know Ampersand it's a bit like bitwise operands it bitwise evaluation it's",
    "start": "3095960",
    "end": "3101280"
  },
  {
    "text": "always going to shrink things so it's very much like a filter that's going to do our wear for us and then we think of",
    "start": "3101280",
    "end": "3108200"
  },
  {
    "text": "link as a pipeline you know we we massage things the shape of the pipe changes so the pipe operator is going to",
    "start": "3108200",
    "end": "3115559"
  },
  {
    "text": "be our select so let's just look through what this is going to do um so we start off with",
    "start": "3115559",
    "end": "3121960"
  },
  {
    "text": "hello world how are you sorry get rid of the tool tip and then we'll take away",
    "start": "3121960",
    "end": "3127240"
  },
  {
    "text": "from that sequence the world so clearly that leaves hello how are you and then we'll concatenate today notice how",
    "start": "3127240",
    "end": "3134079"
  },
  {
    "text": "already this is so much simpler than it would have been in in um link to object yeah um then we'll filter it you know",
    "start": "3134079",
    "end": "3143520"
  },
  {
    "text": "you may not be terribly used to seeing Lambda expressions and as operands but hey it works um you do need the the uh",
    "start": "3143520",
    "end": "3151559"
  },
  {
    "text": "brackets I think it won't compile then um precedence again gets completely confused um so we'll convert it we'll",
    "start": "3151559",
    "end": "3159440"
  },
  {
    "text": "filter out anything that's shorter than five characters so end up with uh hello how are you sorry hello today and then",
    "start": "3159440",
    "end": "3167079"
  },
  {
    "text": "we'll convert each of those to uppercase and I'm no longer thinking about culture infos and whatever so I don't care that",
    "start": "3167079",
    "end": "3173359"
  },
  {
    "text": "it uses the current culture so I will print that query three times you know",
    "start": "3173359",
    "end": "3179559"
  },
  {
    "text": "why not multiply a sequence by a number that's clearly just going to be hello today hello today hello today um and the",
    "start": "3179559",
    "end": "3186119"
  },
  {
    "text": "other example in this basic demo is exor so exor for two sequences is fairly",
    "start": "3186119",
    "end": "3193760"
  },
  {
    "text": "obvious um it's just going to be things that are in one sequence or the other sequence but not both so this should",
    "start": "3193760",
    "end": "3200559"
  },
  {
    "text": "print uh F baz quux so we should end up with hello today hello today hello today fubas",
    "start": "3200559",
    "end": "3209280"
  },
  {
    "text": "quux basic demo hooray so that's some of the operators",
    "start": "3209680",
    "end": "3216760"
  },
  {
    "text": "and I will go into a couple of my favorites in a minute but do any of you have favorite",
    "start": "3216760",
    "end": "3223520"
  },
  {
    "text": "operators dear me no favorite Unicode character no favorite operator yeah I",
    "start": "3224200",
    "end": "3230119"
  },
  {
    "text": "tried to adopt the Mongolian Val separator um because they're they're running a scheme where you can pay 50",
    "start": "3230119",
    "end": "3235720"
  },
  {
    "text": "bucks or something to adopt a character they don't let you adopt formatting characters it's most sad um one day the",
    "start": "3235720",
    "end": "3242640"
  },
  {
    "text": "Mongolian Val separator will have a certificate on my wall um so I I've",
    "start": "3242640",
    "end": "3248040"
  },
  {
    "start": "3247000",
    "end": "3354000"
  },
  {
    "text": "overloaded everything you can overload as of C 6 I haven't yet tried to",
    "start": "3248040",
    "end": "3253680"
  },
  {
    "text": "overload the is operator which I didn't know about until Kathleen told me about it yesterday um was it you or was it",
    "start": "3253680",
    "end": "3259960"
  },
  {
    "text": "bill it was you wasn't it oh yeah um so uh there's still that to go but I've",
    "start": "3259960",
    "end": "3266079"
  },
  {
    "text": "over loed everything else let's have a look at division um before I switch to the code",
    "start": "3266079",
    "end": "3272799"
  },
  {
    "text": "when it might be a little bit more obvious what do you think it means to divide a sequence by",
    "start": "3272799",
    "end": "3279480"
  },
  {
    "text": "something sorry difference between them well",
    "start": "3283079",
    "end": "3288720"
  },
  {
    "text": "that's more subtract it's a different thing you could do with subtraction split okay what kind of",
    "start": "3288720",
    "end": "3294480"
  },
  {
    "text": "split are we talking about give us an",
    "start": "3294480",
    "end": "3298680"
  },
  {
    "text": "example right okay uh so take a collection of length six and divide it by three and you get collections uh each",
    "start": "3302720",
    "end": "3311200"
  },
  {
    "text": "with either each with three or dividing it into three collections that's one way of doing it um and that's one thing I've",
    "start": "3311200",
    "end": "3318880"
  },
  {
    "text": "implemented so that's the second part here where if we divide our sequence of",
    "start": "3318880",
    "end": "3324440"
  },
  {
    "text": "each of the words I'm splitting at the end of this this very long line um I'm calling split so we've got a bunch of",
    "start": "3324440",
    "end": "3331400"
  },
  {
    "text": "words from Hamlet and then we're dividing them by five and I've chosen to make that mean",
    "start": "3331400",
    "end": "3338240"
  },
  {
    "text": "divide them into groups of sequences of five and that nicely means that the",
    "start": "3338240",
    "end": "3343400"
  },
  {
    "text": "remainder operator is clearly you know we won't give you a batch of less than five words and the remainder operator",
    "start": "3343400",
    "end": "3349760"
  },
  {
    "text": "will give you whatever was left over after that division great um I'm more f of dividing",
    "start": "3349760",
    "end": "3357760"
  },
  {
    "text": "by a function so let's start off with our little",
    "start": "3357760",
    "end": "3363000"
  },
  {
    "text": "company where people are in different departments and if I said to someone",
    "start": "3363000",
    "end": "3368960"
  },
  {
    "text": "non- Tey at all uh here's a bunch of people in a company uh could you divide them by",
    "start": "3368960",
    "end": "3376280"
  },
  {
    "text": "department they would naturally just group them into you know well all the people from accounting over here all the",
    "start": "3376280",
    "end": "3381960"
  },
  {
    "text": "people from sales over here so we can do exactly that so we can take the employees and divide them by a Lambda",
    "start": "3381960",
    "end": "3389599"
  },
  {
    "text": "expression that shows the department I'll just show you that uh division",
    "start": "3389599",
    "end": "3395960"
  },
  {
    "text": "so it's too much stuff so we've got accounting has Dave sales has Bill and",
    "start": "3395960",
    "end": "3401160"
  },
  {
    "text": "Betty Etc and our dividing by an integer um the double commas here are where",
    "start": "3401160",
    "end": "3406680"
  },
  {
    "text": "there was a comma in the original text so we've got five where tier 2 b or not",
    "start": "3406680",
    "end": "3411839"
  },
  {
    "text": "two then B that is the question whether his nobler in the Etc um I think Shakespeare would be a lot",
    "start": "3411839",
    "end": "3419000"
  },
  {
    "text": "duller if you read it always in sections of five words it wouldn't quite have the same Zing",
    "start": "3419000",
    "end": "3425480"
  },
  {
    "text": "um I'll show you my other favorite uh this is the the operator dedicated to",
    "start": "3425480",
    "end": "3432440"
  },
  {
    "text": "Eric Lippard um Eric made a foolish statement one time he said that the UN plus",
    "start": "3432440",
    "end": "3438160"
  },
  {
    "text": "operator is kind of pointless it's only there for symmetry um what other use",
    "start": "3438160",
    "end": "3443480"
  },
  {
    "text": "could it possibly have uh it's there so that you can write plus 5 you know VAR x",
    "start": "3443480",
    "end": "3449240"
  },
  {
    "text": "equals + 5 and that still work because that's symmetric with minus 5 I say",
    "start": "3449240",
    "end": "3454280"
  },
  {
    "text": "there are interesting other things you can do with it before I get on to un plus though what about un minus what",
    "start": "3454280",
    "end": "3461680"
  },
  {
    "text": "does it mean if I have a sequence what does minus sequence mean just on its own not F minus sequence just you know V new",
    "start": "3461680",
    "end": "3469200"
  },
  {
    "text": "sequence equals minus sequence what would you like it to do reversing someone said reversing okay",
    "start": "3469200",
    "end": "3476359"
  },
  {
    "text": "anything else it could do lower lowercase okay I haven't implemented that but I'll hear that as the",
    "start": "3476359",
    "end": "3483640"
  },
  {
    "text": "equivalent of sort of negating element wise which is you know if if you view negating a capital letter to a lowercase",
    "start": "3483640",
    "end": "3490200"
  },
  {
    "text": "letter if you start with numbers instead you could have negative numbers when I asked on Twitter someone",
    "start": "3490200",
    "end": "3496720"
  },
  {
    "text": "else suggested it could pop the sequence so the return value could be the first",
    "start": "3496720",
    "end": "3502640"
  },
  {
    "text": "element of the sequence but in evaluating it you could also modify the sequence that you called it on and",
    "start": "3502640",
    "end": "3509359"
  },
  {
    "text": "remove that first element um again never ever ever do that operators should not modify",
    "start": "3509359",
    "end": "3516680"
  },
  {
    "text": "anything um however we can there's nothing to stop us from doing it so let's do it um I should show you that",
    "start": "3516680",
    "end": "3522960"
  },
  {
    "text": "some of the code for this by the way is in operator innumerable it's mostly very simple so",
    "start": "3522960",
    "end": "3529599"
  },
  {
    "start": "3526000",
    "end": "3600000"
  },
  {
    "text": "you know if we have plus we can use all our normal um",
    "start": "3529599",
    "end": "3535640"
  },
  {
    "text": "operator all the normal link operators and I have everything's kind of dynamic um but the",
    "start": "3535640",
    "end": "3541640"
  },
  {
    "text": "implementation is a lot less sort of fun because it's fairly trivial um it's a",
    "start": "3541640",
    "end": "3546799"
  },
  {
    "text": "lot less fun than the uh things you do with it so we had three different things we could do with the UN minus operator",
    "start": "3546799",
    "end": "3553799"
  },
  {
    "text": "and this is where the UN plus operator comes in I've implemented the UN plus operator as a sort of mode",
    "start": "3553799",
    "end": "3560400"
  },
  {
    "text": "selector so if you just do minor sequence I believe it reverses it yes so",
    "start": "3560400",
    "end": "3568480"
  },
  {
    "text": "minus sequence is the reverse of sequence but then if we use plus",
    "start": "3568480",
    "end": "3573720"
  },
  {
    "text": "sequence to mean the same sequence just with a different meaning for un minus so",
    "start": "3573720",
    "end": "3579160"
  },
  {
    "text": "it goes on and it go it Cycles around so you can go from reverse to negate each",
    "start": "3579160",
    "end": "3584200"
  },
  {
    "text": "individual item to popping mode which is the craziest mode so if we print minus",
    "start": "3584200",
    "end": "3590960"
  },
  {
    "text": "sequence here we'll get the reverse so these are first seven digits of pi so reverse we'll get 2951",
    "start": "3590960",
    "end": "3598559"
  },
  {
    "text": "413 if we do minus plus sequence we'll end up with um just -3 -1 -4 -1 - 5 - 9",
    "start": "3598559",
    "end": "3609680"
  },
  {
    "text": "-2 and of course we can um combine these so minus sequence we've",
    "start": "3609680",
    "end": "3616720"
  },
  {
    "text": "seen is the reverse one starting with two plus minus sequence is the reverse",
    "start": "3616720",
    "end": "3621960"
  },
  {
    "text": "one starting with two but in a different mode and minus plus minor sequence is",
    "start": "3621960",
    "end": "3628559"
  },
  {
    "text": "the uh reversed and negated so it's - 2 - 9 - 5",
    "start": "3628559",
    "end": "3634079"
  },
  {
    "text": "Etc if we want to get into popping mode uh the Plus+ operator is clearly",
    "start": "3634079",
    "end": "3639760"
  },
  {
    "text": "entirely different from plus plus that I can't remember what it does but it's you know it's bound to do something",
    "start": "3639760",
    "end": "3645559"
  },
  {
    "text": "different um so we have to have this this annoying space in there of course if the Mongolian vowel separator were",
    "start": "3645559",
    "end": "3651440"
  },
  {
    "text": "still being deemed a space I could put that in there so you would uh find it hard to tell the difference between that",
    "start": "3651440",
    "end": "3657599"
  },
  {
    "text": "and Plus+ um oh for those housian days um and then if we print popping three",
    "start": "3657599",
    "end": "3664520"
  },
  {
    "text": "times we end up with three then one then four and then if we print just popping",
    "start": "3664520",
    "end": "3671760"
  },
  {
    "text": "instead of minus popping sorry um it will print",
    "start": "3671760",
    "end": "3677000"
  },
  {
    "text": "1592 and then just to prove that it does indeed cycle if we do plus plus plus",
    "start": "3677000",
    "end": "3683359"
  },
  {
    "text": "sequence and then negate the result uh we'll go back to just",
    "start": "3683359",
    "end": "3689000"
  },
  {
    "text": "reversing so let's run that yeah we're we're that result is the",
    "start": "3689000",
    "end": "3694680"
  },
  {
    "text": "same as the straight reversing um as I say I've got all the other operators there so the the tilder operator looks",
    "start": "3694680",
    "end": "3702640"
  },
  {
    "text": "like a bit of a wavy line to me who knows exactly what it's going to do so it shuffles the elements it just",
    "start": "3702640",
    "end": "3708280"
  },
  {
    "text": "shuffles the sequence um there are other things powers and all",
    "start": "3708280",
    "end": "3713359"
  },
  {
    "text": "kinds of stuff please go and investigate on GitHub um unless I've completely misread my timing I'm now out of time uh",
    "start": "3713359",
    "end": "3720680"
  },
  {
    "text": "come and see me for any questions about details have a look on GitHub uh I haven't written explanations for any of",
    "start": "3720680",
    "end": "3726920"
  },
  {
    "text": "it um but hopefully you can get a feeling of it um and I hope you've",
    "start": "3726920",
    "end": "3732319"
  },
  {
    "text": "enjoyed it don't use any of it thank you",
    "start": "3732319",
    "end": "3736760"
  }
]