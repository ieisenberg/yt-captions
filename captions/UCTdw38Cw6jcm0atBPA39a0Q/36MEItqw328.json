[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "and we are live hello everyone um my name is yuri i hope everyone can",
    "start": "1520",
    "end": "9519"
  },
  {
    "text": "hear me just fine uh and i thank you for coming",
    "start": "9519",
    "end": "17279"
  },
  {
    "text": "today we are going to talk about static analysis and how static analyzers are",
    "start": "17279",
    "end": "22960"
  },
  {
    "text": "made and specifically about type system which we use so",
    "start": "22960",
    "end": "29439"
  },
  {
    "text": "about me just",
    "start": "29439",
    "end": "35360"
  },
  {
    "text": "i'm a c-plus plus developer at pbs studio if you don't know we are",
    "start": "36239",
    "end": "43360"
  },
  {
    "text": "developing a static analyzer for c plus plus mainly also for c sharp and",
    "start": "43360",
    "end": "49200"
  },
  {
    "text": "java i'm working on the core module uh it says here that i also write diagnostic",
    "start": "49200",
    "end": "56480"
  },
  {
    "text": "rules but not anymore mainly its core",
    "start": "56480",
    "end": "61600"
  },
  {
    "text": "and what is this talk about really well",
    "start": "61600",
    "end": "68159"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "several things well first um if",
    "start": "68159",
    "end": "73280"
  },
  {
    "text": "any of you don't know yet i'll briefly tell you what static analysis is",
    "start": "73280",
    "end": "78720"
  },
  {
    "text": "and why it's useful uh what it has inside like kind of how it's",
    "start": "78720",
    "end": "84560"
  },
  {
    "text": "built we are going to focus on the type system",
    "start": "84560",
    "end": "90159"
  },
  {
    "text": "for c and c plus because that's all the hot topic here um in pvs studio",
    "start": "90159",
    "end": "97119"
  },
  {
    "text": "right now and i'm working on it intensively",
    "start": "97119",
    "end": "102960"
  },
  {
    "text": "and i'll just give you a small comparison of",
    "start": "102960",
    "end": "108320"
  },
  {
    "text": "what it used to be and what it's going to be and what like the stage it's now",
    "start": "108320",
    "end": "116159"
  },
  {
    "text": "uh but first what's static analyzer right um i think",
    "start": "116159",
    "end": "121200"
  },
  {
    "start": "118000",
    "end": "118000"
  },
  {
    "text": "it's a term which is not so obscure these days but still",
    "start": "121200",
    "end": "126560"
  },
  {
    "text": "um it's not very common let's say",
    "start": "126560",
    "end": "132400"
  },
  {
    "text": "let's say it like that well static analysis is basically an automated code review or you can look",
    "start": "132400",
    "end": "139599"
  },
  {
    "text": "at it as well as some kind of a compiler which doesn't",
    "start": "139599",
    "end": "146000"
  },
  {
    "text": "really compile anything but it makes other useful things happen",
    "start": "146000",
    "end": "151760"
  },
  {
    "text": "so how a compiler is built we need this to understand the structure",
    "start": "151760",
    "end": "157280"
  },
  {
    "text": "of the system every compiler these days",
    "start": "157280",
    "end": "163760"
  },
  {
    "text": "basically has some parts um first and foremost it's front end it's where you feed your",
    "start": "163760",
    "end": "171760"
  },
  {
    "text": "source code and you get your syntax and semantics of your program",
    "start": "171760",
    "end": "178560"
  },
  {
    "text": "analyzed and the result of that is a syntax tree",
    "start": "178560",
    "end": "184239"
  },
  {
    "text": "it has usually some kind of intermediate representation in clang",
    "start": "184879",
    "end": "190560"
  },
  {
    "text": "it's called ir and then",
    "start": "190560",
    "end": "196319"
  },
  {
    "text": "this thing goes to the middle end so called the middle lens module",
    "start": "196319",
    "end": "201840"
  },
  {
    "text": "does some platform independent optimizations on your code on your",
    "start": "201840",
    "end": "207440"
  },
  {
    "text": "abstract representation then the ir goes",
    "start": "207440",
    "end": "212879"
  },
  {
    "text": "further and then it goes to the back end which",
    "start": "212879",
    "end": "217920"
  },
  {
    "text": "creates assembly code it does some platform dependent optimizations",
    "start": "217920",
    "end": "224480"
  },
  {
    "text": "and you get an object file which is then linked to an executable or a library",
    "start": "224480",
    "end": "232000"
  },
  {
    "text": "so uh i think everyone knows this um just a reminder",
    "start": "232000",
    "end": "238560"
  },
  {
    "text": "now what's a static analyzer basically it's the same thing",
    "start": "238560",
    "end": "243920"
  },
  {
    "text": "except for code generation and optimization so again we still have a",
    "start": "243920",
    "end": "248959"
  },
  {
    "text": "front end here which does mostly the same things",
    "start": "248959",
    "end": "255280"
  },
  {
    "text": "the compilot does and then",
    "start": "255280",
    "end": "260560"
  },
  {
    "text": "next we get instead of that",
    "start": "260560",
    "end": "266639"
  },
  {
    "text": "ir middle and backhand thing we get diagnostic rules which work on",
    "start": "266639",
    "end": "273680"
  },
  {
    "text": "your basically on the abstract syntax tree",
    "start": "273680",
    "end": "279520"
  },
  {
    "text": "it has also some mechanisms like data flow to track variable changes throughout the program",
    "start": "279520",
    "end": "288000"
  },
  {
    "text": "but it's not too important right now so diagnostic",
    "start": "288000",
    "end": "293360"
  },
  {
    "text": "rules of a static analyzer are like compilers warnings but they",
    "start": "293360",
    "end": "300320"
  },
  {
    "text": "they can afford to give you more information and complain about things a compiler won't",
    "start": "300320",
    "end": "306720"
  },
  {
    "text": "complain about because the compiler has a job of creating your executable and",
    "start": "306720",
    "end": "314240"
  },
  {
    "text": "diagnosing something which does not affect um compilation it's not really",
    "start": "314240",
    "end": "322880"
  },
  {
    "text": "its job so to speak okay so this was a short intro into what we're",
    "start": "322880",
    "end": "329440"
  },
  {
    "text": "dealing with so let's go back to types which is the main topic right",
    "start": "329440",
    "end": "335360"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "uh in c plus and c we have",
    "start": "335360",
    "end": "341840"
  },
  {
    "text": "quite a huge number of types and quite a type system",
    "start": "341840",
    "end": "347360"
  },
  {
    "text": "uh in all honesty so what do we have we have built-ins",
    "start": "347360",
    "end": "353520"
  },
  {
    "text": "we have so-called derived types we have user-defined types also",
    "start": "353520",
    "end": "359919"
  },
  {
    "text": "built-ins are your ins floats avoid is also a built-in null pointer",
    "start": "359919",
    "end": "366800"
  },
  {
    "text": "all this stuff which the compiler just knows about",
    "start": "366800",
    "end": "372720"
  },
  {
    "text": "then derived types are pointers arrays which are just pointers really in",
    "start": "373120",
    "end": "380319"
  },
  {
    "text": "these guys references they would like to be pointers but",
    "start": "380319",
    "end": "386800"
  },
  {
    "text": "they kind of cannot and functions which also boil down to pointers in the",
    "start": "386800",
    "end": "394319"
  },
  {
    "text": "end so derived types are basically pointers for the most part",
    "start": "394319",
    "end": "401440"
  },
  {
    "text": "unused defined types are structures classes unions and enumerations",
    "start": "401440",
    "end": "408880"
  },
  {
    "text": "i don't mention templates here because templates are just another language within the language",
    "start": "408880",
    "end": "416639"
  },
  {
    "text": "they make your life easier but they make life of compiler guys",
    "start": "416639",
    "end": "422960"
  },
  {
    "text": "a little bit harder i think and the best part i love about it is",
    "start": "422960",
    "end": "428400"
  },
  {
    "text": "that all the types are interconnected in weird ways sometimes",
    "start": "428400",
    "end": "434080"
  },
  {
    "text": "and they are convertible to each other so it's quite a complex system",
    "start": "434080",
    "end": "441280"
  },
  {
    "text": "this thing doesn't even start to represent the entire complexity",
    "start": "441280",
    "end": "447520"
  },
  {
    "text": "but anyway let's say you want to create",
    "start": "447520",
    "end": "453039"
  },
  {
    "text": "um a c plus plus or c compiler i don't know why but",
    "start": "453039",
    "end": "458800"
  },
  {
    "text": "let's say you want to how would you represent types in your",
    "start": "458800",
    "end": "464400"
  },
  {
    "text": "front end in order to correctly determine um",
    "start": "464400",
    "end": "470400"
  },
  {
    "text": "the way what data at which point of the program is used",
    "start": "470400",
    "end": "478080"
  },
  {
    "start": "478000",
    "end": "478000"
  },
  {
    "text": "okay so there are two schools of thought i guess you can say on this",
    "start": "478080",
    "end": "486478"
  },
  {
    "text": "there's an old way which i think started it all",
    "start": "487360",
    "end": "493440"
  },
  {
    "text": "is representing types with just encoded strings so",
    "start": "493440",
    "end": "500960"
  },
  {
    "text": "let's look at this declaration here uh it's a pointer to a const in so what",
    "start": "500960",
    "end": "508400"
  },
  {
    "text": "we do with it we just take every part of this type and put it",
    "start": "508400",
    "end": "515440"
  },
  {
    "text": "in a string so it's a pointer which is the letter p",
    "start": "515440",
    "end": "521120"
  },
  {
    "text": "in our system anyway uh const will be",
    "start": "521120",
    "end": "526640"
  },
  {
    "text": "applied to whatever is under the pointer and end is",
    "start": "526640",
    "end": "532320"
  },
  {
    "text": "kind of easy and also we've got this",
    "start": "532320",
    "end": "537600"
  },
  {
    "text": "cute character here which represent a null terminator of course",
    "start": "537680",
    "end": "544399"
  },
  {
    "text": "now the other approach you could take two types is well",
    "start": "544399",
    "end": "552240"
  },
  {
    "text": "basically this you just take",
    "start": "552240",
    "end": "557920"
  },
  {
    "text": "everything you know about types in your language and you",
    "start": "557920",
    "end": "563200"
  },
  {
    "text": "somehow implement the entire scheme with",
    "start": "563200",
    "end": "569440"
  },
  {
    "text": "interrelations in your in your front end",
    "start": "569440",
    "end": "575360"
  },
  {
    "text": "now those approaches they have",
    "start": "575360",
    "end": "580399"
  },
  {
    "text": "both have advantages and disadvantages",
    "start": "580399",
    "end": "585360"
  },
  {
    "text": "uh just a spoiler it so happens that our analyzer for c plus plus and c",
    "start": "585600",
    "end": "593279"
  },
  {
    "text": "uses the first approach because it's kind of an old code base",
    "start": "593279",
    "end": "600080"
  },
  {
    "text": "okay so let's take a quick look at encoded uh streams so",
    "start": "600080",
    "end": "607120"
  },
  {
    "start": "601000",
    "end": "601000"
  },
  {
    "text": "they of course have advantages and the advantages are",
    "start": "607120",
    "end": "614320"
  },
  {
    "text": "they are more cache friendly because your stream is always located in memory contiguously",
    "start": "615519",
    "end": "624240"
  },
  {
    "text": "i tried to think about other advantages of this approach and",
    "start": "624560",
    "end": "629839"
  },
  {
    "text": "frankly i couldn't i couldn't find any so",
    "start": "629839",
    "end": "635519"
  },
  {
    "text": "i guess that's it and of course streams are kind of slow because you have to iterate over them",
    "start": "635519",
    "end": "644000"
  },
  {
    "text": "all the time um algorithms of",
    "start": "644000",
    "end": "649440"
  },
  {
    "text": "working with strings and looking something up inside and dealing",
    "start": "649440",
    "end": "654880"
  },
  {
    "text": "with characters and so on are quite inefficient",
    "start": "654880",
    "end": "660279"
  },
  {
    "text": "you might need and probably you will need to pass over the same thing",
    "start": "661600",
    "end": "667600"
  },
  {
    "text": "multiple times in order to get all your information all the information you want otherwise",
    "start": "667600",
    "end": "674240"
  },
  {
    "text": "you'll risk losing information and if if you say cut the screen into pieces",
    "start": "674240",
    "end": "681920"
  },
  {
    "text": "uh you risk losing information unless you keep everything",
    "start": "681920",
    "end": "688959"
  },
  {
    "text": "memorized and then again it's a whole pass over the same thing",
    "start": "688959",
    "end": "694880"
  },
  {
    "text": "again and strings are not at least in c plus are",
    "start": "694880",
    "end": "702000"
  },
  {
    "text": "not the most convenient thing to work with in c plus plus is better than in c but",
    "start": "702000",
    "end": "710320"
  },
  {
    "text": "still also there is one tiny issue if you want to encode everything in a stream so",
    "start": "710320",
    "end": "719839"
  },
  {
    "start": "718000",
    "end": "718000"
  },
  {
    "text": "these are comments from our code",
    "start": "719839",
    "end": "725519"
  },
  {
    "text": "from the module which deals with encoding as you can see",
    "start": "725519",
    "end": "731360"
  },
  {
    "text": "there are quite a few letters used here and that's even not the entire",
    "start": "731360",
    "end": "737839"
  },
  {
    "text": "thing and the choice of letters",
    "start": "737839",
    "end": "743279"
  },
  {
    "text": "is sometimes questionable let's say we have that for null pointer over there at",
    "start": "743279",
    "end": "749519"
  },
  {
    "text": "the right so why is it that um where's the logic well",
    "start": "749519",
    "end": "755120"
  },
  {
    "text": "the logic is simple that was available it was free so it was used",
    "start": "755120",
    "end": "762560"
  },
  {
    "text": "in other words we are running out of letters and if you try to encode everything you will probably run out of",
    "start": "762560",
    "end": "769519"
  },
  {
    "text": "letters um just to give you an example what",
    "start": "769519",
    "end": "776880"
  },
  {
    "start": "771000",
    "end": "771000"
  },
  {
    "text": "you would be dealing with if you had encoded types in your compiler or whatever",
    "start": "776880",
    "end": "785760"
  },
  {
    "text": "is this so let's try to guess uh what",
    "start": "785760",
    "end": "791360"
  },
  {
    "text": "uh stream represent each uh each type here so for this endpointer",
    "start": "791360",
    "end": "798720"
  },
  {
    "text": "i think it's easy i think everyone can easily get this",
    "start": "798720",
    "end": "804639"
  },
  {
    "text": "um there's a different example when you declare a class",
    "start": "804639",
    "end": "810720"
  },
  {
    "text": "you want to know about this class of course you want it to know its type and",
    "start": "810720",
    "end": "815839"
  },
  {
    "text": "if you encode it you will get something like that and this little",
    "start": "815839",
    "end": "822720"
  },
  {
    "text": "group of characters in front of the name it's",
    "start": "822720",
    "end": "828399"
  },
  {
    "text": "they represent the length of the screen which will follow",
    "start": "828399",
    "end": "833680"
  },
  {
    "text": "uh of this substring okay um",
    "start": "833680",
    "end": "839199"
  },
  {
    "text": "a more elaborate example i guess so",
    "start": "839199",
    "end": "844639"
  },
  {
    "text": "it's the main function we know and love uh and what it looks like um it looks",
    "start": "844639",
    "end": "850240"
  },
  {
    "text": "like that it's kind of i think obvious here",
    "start": "850240",
    "end": "856480"
  },
  {
    "text": "or what everything represents uh if we read it left right uh we will read it",
    "start": "856480",
    "end": "862720"
  },
  {
    "text": "like that it's a function which takes int as a parameter which takes a pointer to point",
    "start": "862720",
    "end": "869519"
  },
  {
    "text": "at the cons char as the next parameter and it returns an int",
    "start": "869519",
    "end": "876320"
  },
  {
    "text": "um not the best thing in the world here because",
    "start": "876399",
    "end": "882240"
  },
  {
    "text": "if you want to get the functions return type or say the second parameter or",
    "start": "882240",
    "end": "887839"
  },
  {
    "text": "whatever parameter you want you will have to traverse the stream or",
    "start": "887839",
    "end": "893199"
  },
  {
    "text": "you will have to come up with some caching and stuff like that",
    "start": "893199",
    "end": "900319"
  },
  {
    "text": "and this is an example i really like uh it's my favorite one to",
    "start": "900480",
    "end": "907680"
  },
  {
    "text": "be honest if anyone can guess it",
    "start": "907680",
    "end": "912720"
  },
  {
    "text": "um you're genius but because i had to copy and paste it",
    "start": "912720",
    "end": "918480"
  },
  {
    "text": "from a real debugging session and it goes like that",
    "start": "918480",
    "end": "927160"
  },
  {
    "text": "so there's a lot of stuff going on here and",
    "start": "928240",
    "end": "933759"
  },
  {
    "text": "that stuff is not really obvious and",
    "start": "933759",
    "end": "939680"
  },
  {
    "text": "you really have to understand how this thing is organized",
    "start": "939680",
    "end": "944880"
  },
  {
    "text": "to do something with it which is",
    "start": "944880",
    "end": "950720"
  },
  {
    "text": "well it's not obstructed well",
    "start": "950720",
    "end": "955920"
  },
  {
    "text": "okay um those issues with encodings are really",
    "start": "955920",
    "end": "961839"
  },
  {
    "text": "minor because you can get used to everything",
    "start": "961839",
    "end": "969320"
  },
  {
    "start": "969000",
    "end": "969000"
  },
  {
    "text": "what is a more serious problem",
    "start": "969440",
    "end": "975600"
  },
  {
    "text": "is as i said at the beginning is slowness",
    "start": "975600",
    "end": "982079"
  },
  {
    "text": "and the slowness goes uh from well basically",
    "start": "982079",
    "end": "987120"
  },
  {
    "text": "the fact that you need to really understand what uh those words",
    "start": "987120",
    "end": "993519"
  },
  {
    "text": "and accordions mean here's an example it's completely synthetic",
    "start": "993519",
    "end": "1002240"
  },
  {
    "text": "we have type and fo a type info class in our code",
    "start": "1002320",
    "end": "1007839"
  },
  {
    "text": "which has some interface methods and in this specific example let's say we",
    "start": "1007839",
    "end": "1013199"
  },
  {
    "text": "get some type from somewhere and we want to know if it's a function or not",
    "start": "1013199",
    "end": "1018720"
  },
  {
    "text": "let's see what happens usually a check like that um is a quick a bug",
    "start": "1018720",
    "end": "1025520"
  },
  {
    "text": "out check so to speak so you can easily leave",
    "start": "1025520",
    "end": "1031520"
  },
  {
    "text": "if um if you don't want to run all with further",
    "start": "1031520",
    "end": "1039038"
  },
  {
    "text": "logic if something is not good for you in this case so",
    "start": "1039039",
    "end": "1044798"
  },
  {
    "text": "is it a quick backup check really um as wants to",
    "start": "1044799",
    "end": "1049840"
  },
  {
    "text": "be well let's see we'll take a look inside that specific",
    "start": "1049840",
    "end": "1055840"
  },
  {
    "text": "function and there's a lot of going on here the actual check",
    "start": "1055840",
    "end": "1061760"
  },
  {
    "text": "whether it's function or not is at the very bottom when you actually",
    "start": "1061760",
    "end": "1067440"
  },
  {
    "text": "uh check it for letter f which is as we saw uh is a marker that",
    "start": "1067440",
    "end": "1074799"
  },
  {
    "text": "we are dealing with a function it's at the start uh but",
    "start": "1074799",
    "end": "1081280"
  },
  {
    "text": "the question i usually ask people who see this first i mean people",
    "start": "1081280",
    "end": "1087440"
  },
  {
    "text": "here in our team is how many loops do you see in this",
    "start": "1087440",
    "end": "1092960"
  },
  {
    "text": "picture how many well obviously the function itself",
    "start": "1092960",
    "end": "1099200"
  },
  {
    "text": "doesn't have a loop but we have two",
    "start": "1099200",
    "end": "1104720"
  },
  {
    "text": "really suspicious calls here the first one",
    "start": "1104720",
    "end": "1110960"
  },
  {
    "text": "um i'll talk about it a little bit later the second one uh just goes over a",
    "start": "1110960",
    "end": "1117760"
  },
  {
    "text": "screen and it basically",
    "start": "1117760",
    "end": "1122799"
  },
  {
    "text": "uh skips uh every uh const volatile",
    "start": "1122799",
    "end": "1128400"
  },
  {
    "text": "markers uh ellipsis arguments and so on so it's a loop",
    "start": "1128400",
    "end": "1134400"
  },
  {
    "text": "uh we've got one at least and the normalized one the first one",
    "start": "1134400",
    "end": "1140960"
  },
  {
    "start": "1140000",
    "end": "1140000"
  },
  {
    "text": "well it's a pain so it checks",
    "start": "1140960",
    "end": "1146400"
  },
  {
    "text": "cv qualifiers of your type and it sets flags for them",
    "start": "1146400",
    "end": "1152480"
  },
  {
    "text": "for later use it resolves type devs",
    "start": "1152480",
    "end": "1158400"
  },
  {
    "text": "in your encoding you may not have this beautiful function signature you may have",
    "start": "1158400",
    "end": "1165200"
  },
  {
    "text": "something which has been some alias for phototype",
    "start": "1165200",
    "end": "1173120"
  },
  {
    "text": "it also tries to figure out your templates",
    "start": "1175200",
    "end": "1180640"
  },
  {
    "text": "and if you are you have a class it will give",
    "start": "1180640",
    "end": "1186160"
  },
  {
    "text": "you information about that class also everything the results of that function",
    "start": "1186160",
    "end": "1192640"
  },
  {
    "text": "is usually a changed encoding or additional information added to the",
    "start": "1192640",
    "end": "1199600"
  },
  {
    "text": "object itself okay so this one is obviously",
    "start": "1199600",
    "end": "1206080"
  },
  {
    "text": "goes over the stream this one",
    "start": "1206080",
    "end": "1211360"
  },
  {
    "text": "goes to the symbol table in the current in the current scope to look up the symbol",
    "start": "1211360",
    "end": "1219440"
  },
  {
    "text": "um this one will just keep because it's too",
    "start": "1219520",
    "end": "1226080"
  },
  {
    "text": "um how to say it um it's too obscure",
    "start": "1226080",
    "end": "1232320"
  },
  {
    "text": "it does some magic which doesn't always work",
    "start": "1232320",
    "end": "1237919"
  },
  {
    "text": "and for classes you again go and look at the simple table",
    "start": "1237919",
    "end": "1243760"
  },
  {
    "text": "now what do we have inside of those uh this one is obviously a loop",
    "start": "1243760",
    "end": "1251360"
  },
  {
    "text": "this one probably is just to look up in the",
    "start": "1251360",
    "end": "1256960"
  },
  {
    "text": "in the hash map right well actually not because it's recursion",
    "start": "1256960",
    "end": "1262880"
  },
  {
    "text": "because you may have type devs inside type devs inside templates and so on",
    "start": "1262880",
    "end": "1268880"
  },
  {
    "text": "and it uses this thing again this one is heavy recursion",
    "start": "1268880",
    "end": "1277200"
  },
  {
    "text": "and it loops back to type devs and usings and stuff like that",
    "start": "1277200",
    "end": "1283760"
  },
  {
    "text": "this one is also recursion because you may want to figure out all those things",
    "start": "1283760",
    "end": "1289440"
  },
  {
    "text": "first okay so",
    "start": "1289440",
    "end": "1293760"
  },
  {
    "text": "encoded strings for types may not look too bad but they are too bad",
    "start": "1294880",
    "end": "1302159"
  },
  {
    "text": "now so why am i telling you this well because because of that because if you want to",
    "start": "1302720",
    "end": "1309760"
  },
  {
    "text": "check something if you want to check if something is a function it must be",
    "start": "1309760",
    "end": "1315440"
  },
  {
    "text": "simple and quick and at some point we decided that",
    "start": "1315440",
    "end": "1322080"
  },
  {
    "text": "we need to come up with a better system so the better system how would it look like",
    "start": "1322080",
    "end": "1329280"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "uh you know at this point i'll play captain obvious and i'll say that",
    "start": "1329760",
    "end": "1336159"
  },
  {
    "text": "it was a brilliant idea um types in c plus plus and c are",
    "start": "1336159",
    "end": "1343840"
  },
  {
    "text": "sort of kind of a hierarchy so hey why don't we represent them",
    "start": "1343840",
    "end": "1350799"
  },
  {
    "text": "with a hierarchy of classes and just throw those stupid strings away",
    "start": "1350799",
    "end": "1359280"
  },
  {
    "text": "and so we did um here i want to take a moment and just",
    "start": "1359280",
    "end": "1366320"
  },
  {
    "text": "praise clan because it was an inspiration for me when i was developing the type",
    "start": "1366320",
    "end": "1374240"
  },
  {
    "text": "system i didn't copy it exactly of course because we have",
    "start": "1374240",
    "end": "1379919"
  },
  {
    "text": "different [Music] goals with clan but",
    "start": "1379919",
    "end": "1385760"
  },
  {
    "text": "it was really helpful its source code is good and the compiler itself is excellent so thank you",
    "start": "1385760",
    "end": "1392799"
  },
  {
    "text": "thank you clang now",
    "start": "1392799",
    "end": "1396880"
  },
  {
    "start": "1396000",
    "end": "1396000"
  },
  {
    "text": "this hierarchy of classes to represent a hierarchy of entities",
    "start": "1398000",
    "end": "1406080"
  },
  {
    "text": "how it looks uh what looks like so we've got the base class for type which",
    "start": "1407120",
    "end": "1414159"
  },
  {
    "text": "represents just any type and inside it it has",
    "start": "1414159",
    "end": "1420240"
  },
  {
    "text": "an id because we need to understand what we are looking at we are dealing",
    "start": "1420240",
    "end": "1425919"
  },
  {
    "text": "mostly with a pointer to the base class",
    "start": "1425919",
    "end": "1431120"
  },
  {
    "text": "so ideas are different for different types it has canonical type a so-called",
    "start": "1431120",
    "end": "1439200"
  },
  {
    "text": "canonical type i'll tell you what it is a little bit later",
    "start": "1439200",
    "end": "1445039"
  },
  {
    "text": "and all the derived classes which you can",
    "start": "1445039",
    "end": "1451360"
  },
  {
    "text": "produce for different stuff like pointers references classes and so on",
    "start": "1451360",
    "end": "1457520"
  },
  {
    "text": "they contain specific information if you take a pointer type it will",
    "start": "1457520",
    "end": "1464640"
  },
  {
    "text": "have information about the type it's pointing to so you can easily extract it",
    "start": "1464640",
    "end": "1471679"
  },
  {
    "text": "now remember our code from the beginning with the function check well",
    "start": "1471679",
    "end": "1479440"
  },
  {
    "text": "i here's basically the same fragment but",
    "start": "1480720",
    "end": "1485919"
  },
  {
    "text": "with a new type system and again it's a quick bug-out check",
    "start": "1485919",
    "end": "1491279"
  },
  {
    "text": "or is it well let's see so the function with many loops and",
    "start": "1491279",
    "end": "1497360"
  },
  {
    "text": "recursions [Music] turns into this you can check multiple types at once and",
    "start": "1497360",
    "end": "1504960"
  },
  {
    "text": "it just involves checking a single field basically",
    "start": "1504960",
    "end": "1510000"
  },
  {
    "text": "in the type class and this field is",
    "start": "1510000",
    "end": "1515679"
  },
  {
    "text": "a char essentially uh the type itself is",
    "start": "1515679",
    "end": "1521279"
  },
  {
    "text": "kind of small um so that's the idea i think it's pretty",
    "start": "1521279",
    "end": "1526799"
  },
  {
    "text": "obvious what may not be obvious is what a canonical type even is",
    "start": "1526799",
    "end": "1535279"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "so let's look at this example we have an int variable and obviously it's an int",
    "start": "1535279",
    "end": "1541520"
  },
  {
    "text": "so it's a built-in type and its canonical type will be also built in",
    "start": "1541520",
    "end": "1547039"
  },
  {
    "text": "in this case uh the type itself and its",
    "start": "1547039",
    "end": "1552880"
  },
  {
    "text": "canonical representation are the same but things get more interesting when you",
    "start": "1552880",
    "end": "1558960"
  },
  {
    "text": "move to aliases so let's say you uh want to create",
    "start": "1558960",
    "end": "1566159"
  },
  {
    "text": "an alias for int and have a variable of that",
    "start": "1566159",
    "end": "1571200"
  },
  {
    "text": "uh type of a will be here this",
    "start": "1571200",
    "end": "1576720"
  },
  {
    "text": "so the type itself is an alias it's a typedef uh we need this",
    "start": "1576720",
    "end": "1582000"
  },
  {
    "text": "information so we carry it around the canonical is what's under the type",
    "start": "1582000",
    "end": "1589039"
  },
  {
    "text": "dev the main reason for having this canonical",
    "start": "1589039",
    "end": "1595200"
  },
  {
    "text": "representation is to avoid dealing with",
    "start": "1595200",
    "end": "1600400"
  },
  {
    "text": "aliases when you don't need to it also serve",
    "start": "1600400",
    "end": "1607200"
  },
  {
    "text": "different purposes like for template specializations uh but",
    "start": "1607200",
    "end": "1614960"
  },
  {
    "text": "uh mainly it's for resolving aliases",
    "start": "1615039",
    "end": "1620720"
  },
  {
    "text": "uh so what i mean by you want uh you won't have to deal with",
    "start": "1620799",
    "end": "1627520"
  },
  {
    "text": "aliases when you don't really need to is if you take a look at that",
    "start": "1627520",
    "end": "1633520"
  },
  {
    "text": "you have quite a small alias chain here but",
    "start": "1633520",
    "end": "1638960"
  },
  {
    "text": "they can grow really long and type devs to type devs and so on",
    "start": "1638960",
    "end": "1648320"
  },
  {
    "text": "and to figure out the resulting type of a we need to take a look",
    "start": "1648320",
    "end": "1656480"
  },
  {
    "text": "basically at canonical so let's um let's take a look at a here and i'll",
    "start": "1657039",
    "end": "1664399"
  },
  {
    "text": "just show you uh what it consists of so it's an alias it's using",
    "start": "1664399",
    "end": "1670159"
  },
  {
    "text": "uh we also need to know that for different reasons in diagnostic rules",
    "start": "1670159",
    "end": "1675679"
  },
  {
    "text": "its canonical type is a built-in end and",
    "start": "1675679",
    "end": "1681360"
  },
  {
    "text": "it may look here like we are losing information that this is an alias to an",
    "start": "1681360",
    "end": "1686480"
  },
  {
    "text": "alias but no really um we have a source for the alias",
    "start": "1686480",
    "end": "1693760"
  },
  {
    "text": "uh in this case what it helps us do is",
    "start": "1693760",
    "end": "1699919"
  },
  {
    "text": "you can easily extract the underline type to which all those",
    "start": "1699919",
    "end": "1707120"
  },
  {
    "text": "chains of type devs are pointing to and also you can walk",
    "start": "1707120",
    "end": "1712320"
  },
  {
    "text": "the chain if you want to so using the source",
    "start": "1712320",
    "end": "1718398"
  },
  {
    "text": "of the alias you can just you can just unroll the entire chain if",
    "start": "1718559",
    "end": "1724080"
  },
  {
    "text": "you need to and yeah sometimes it's needed so overall",
    "start": "1724080",
    "end": "1731760"
  },
  {
    "text": "as i said we have the base type and",
    "start": "1731760",
    "end": "1736880"
  },
  {
    "text": "derived types um derived classes in our hierarchy",
    "start": "1736880",
    "end": "1742480"
  },
  {
    "text": "so here we have built-ins and don't worry um there are not too many of them uh built-ins a complex type",
    "start": "1742480",
    "end": "1750240"
  },
  {
    "text": "from c pointers arrays member pointers",
    "start": "1750240",
    "end": "1757679"
  },
  {
    "text": "also references which are of different kinds we have r",
    "start": "1758000",
    "end": "1763440"
  },
  {
    "text": "value l value and forwarding references we have classes we have class member",
    "start": "1763440",
    "end": "1768960"
  },
  {
    "text": "types because a class member is not just its type it's also",
    "start": "1768960",
    "end": "1774880"
  },
  {
    "text": "the real thing the declarator for it enums",
    "start": "1774880",
    "end": "1782799"
  },
  {
    "text": "of course elicious functions and not all functions are born equal so we",
    "start": "1783120",
    "end": "1790080"
  },
  {
    "text": "have constructors we have just plain functions constructors destructors",
    "start": "1790080",
    "end": "1795200"
  },
  {
    "text": "operators of which the assign operator is a unique thing because it can only",
    "start": "1795200",
    "end": "1801360"
  },
  {
    "text": "happen inside the class also cast operators which are not really",
    "start": "1801360",
    "end": "1806799"
  },
  {
    "text": "operators but rather conversion functions of course we need a way to represent",
    "start": "1806799",
    "end": "1814320"
  },
  {
    "text": "auto and decal types we've got templates",
    "start": "1814320",
    "end": "1819520"
  },
  {
    "text": "template variables which kind of differ from plain templates",
    "start": "1819520",
    "end": "1826000"
  },
  {
    "text": "template parameters get their own type templates specializations get their own type",
    "start": "1826000",
    "end": "1832880"
  },
  {
    "text": "also for different type conversions uh we want to track uh",
    "start": "1832880",
    "end": "1839360"
  },
  {
    "text": "how did we get to some point so we we've got adjusted types",
    "start": "1839360",
    "end": "1845600"
  },
  {
    "text": "which are basically types where that underwent some represent um",
    "start": "1845600",
    "end": "1851360"
  },
  {
    "text": "some changes some operations on them deduce types you get from auto decay to",
    "start": "1851360",
    "end": "1859440"
  },
  {
    "text": "get as a result of decaying an array for example uh",
    "start": "1859440",
    "end": "1864760"
  },
  {
    "text": "subtemplate arcs you get from of course substituting template arcs",
    "start": "1864760",
    "end": "1870880"
  },
  {
    "text": "when instantiating a template",
    "start": "1870880",
    "end": "1876080"
  },
  {
    "text": "for parameter box there is its own type",
    "start": "1876240",
    "end": "1881519"
  },
  {
    "text": "and you get template instances",
    "start": "1881519",
    "end": "1885760"
  },
  {
    "text": "it it covers pretty much everything we",
    "start": "1886880",
    "end": "1892480"
  },
  {
    "text": "need right now from our type system and",
    "start": "1892480",
    "end": "1899039"
  },
  {
    "text": "i don't know if you noticed or not but i kind of dropped the topic",
    "start": "1899039",
    "end": "1904480"
  },
  {
    "text": "which is an important one but um i just didn't talk about it",
    "start": "1904480",
    "end": "1910799"
  },
  {
    "text": "uh it's the topic of qualifiers you get all those types it it's great",
    "start": "1910799",
    "end": "1917679"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "and fine but what if you write const or",
    "start": "1917679",
    "end": "1923120"
  },
  {
    "text": "better yet if you write something like that",
    "start": "1923120",
    "end": "1928080"
  },
  {
    "text": "so here we have a built-in type which is an int but we also have two qualifiers",
    "start": "1928159",
    "end": "1934399"
  },
  {
    "text": "attached to it and in our type system we have type ids right so",
    "start": "1934399",
    "end": "1944080"
  },
  {
    "text": "would the solution for representing this thing be something like that",
    "start": "1945440",
    "end": "1952320"
  },
  {
    "text": "uh i think it's fear inducing at least it scares me when i look at that",
    "start": "1952320",
    "end": "1959120"
  },
  {
    "text": "so really no um we are not going to do",
    "start": "1959120",
    "end": "1965200"
  },
  {
    "text": "this scary thing to anyone so what shall we do",
    "start": "1965200",
    "end": "1971919"
  },
  {
    "text": "well again that's the idea i borrowed from clang and",
    "start": "1971919",
    "end": "1979279"
  },
  {
    "text": "again that's probably the best thing",
    "start": "1979279",
    "end": "1984559"
  },
  {
    "text": "i borrowed from them i like this concept very much the",
    "start": "1984559",
    "end": "1989600"
  },
  {
    "text": "concept is called call type",
    "start": "1989600",
    "end": "1993679"
  },
  {
    "text": "call type is a type to which qualifiers are applied and how it works is",
    "start": "1994720",
    "end": "2002840"
  },
  {
    "text": "interesting so under the hood it's just a type pointer",
    "start": "2002840",
    "end": "2008480"
  },
  {
    "text": "so we can look at it as a point uh what makes it special is",
    "start": "2008480",
    "end": "2016000"
  },
  {
    "text": "if i asked you uh how many bytes of address you have on a 64-bit",
    "start": "2016240",
    "end": "2023440"
  },
  {
    "text": "system what would you answer most people i think would say eight",
    "start": "2023440",
    "end": "2029519"
  },
  {
    "text": "uh we are talking systems like windows linux mac",
    "start": "2029519",
    "end": "2034720"
  },
  {
    "text": "the big three uh people who think",
    "start": "2034720",
    "end": "2040080"
  },
  {
    "text": "that we have eight bytes of address on those systems are kind of right but at",
    "start": "2040080",
    "end": "2046000"
  },
  {
    "text": "the same time they're kind of wrong because",
    "start": "2046000",
    "end": "2050000"
  },
  {
    "text": "you actually don't get to access everything in your address space",
    "start": "2051119",
    "end": "2058240"
  },
  {
    "text": "in user mode when you are in your",
    "start": "2058720",
    "end": "2063919"
  },
  {
    "text": "regular application a pointer contains an address in memory",
    "start": "2063919",
    "end": "2071358"
  },
  {
    "text": "and a byte of zeros",
    "start": "2071359",
    "end": "2076560"
  },
  {
    "text": "this is because this byte there is reserved for system users",
    "start": "2076560",
    "end": "2084240"
  },
  {
    "text": "it's not accessible it's always zeroed out i think cpus",
    "start": "2084240",
    "end": "2091440"
  },
  {
    "text": "these days either they can automatically drop it in user mode",
    "start": "2091440",
    "end": "2099200"
  },
  {
    "text": "or they are going to be able to do it at some point",
    "start": "2099200",
    "end": "2104320"
  },
  {
    "text": "so that looks like a waste of space",
    "start": "2104960",
    "end": "2110160"
  },
  {
    "text": "but really it isn't because that's what hap helps us to represent",
    "start": "2110160",
    "end": "2116160"
  },
  {
    "text": "different qualifiers on different types so",
    "start": "2116160",
    "end": "2121520"
  },
  {
    "text": "basically what we do we take this byte here we put an address",
    "start": "2121520",
    "end": "2128640"
  },
  {
    "text": "to the actual type instance to the seven bytes we have for address",
    "start": "2128640",
    "end": "2136480"
  },
  {
    "text": "and in this little zero byte we just put some bits so we",
    "start": "2136480",
    "end": "2142160"
  },
  {
    "text": "store const volatile and restrict r4c",
    "start": "2142160",
    "end": "2147839"
  },
  {
    "text": "there and we've got five spare bits really",
    "start": "2147839",
    "end": "2153119"
  },
  {
    "text": "so what i'm going to the way to represent qualifiers for",
    "start": "2153440",
    "end": "2161359"
  },
  {
    "text": "types is not to put them inside types but rather apply them to a pointer which",
    "start": "2161359",
    "end": "2167760"
  },
  {
    "text": "points to the corresponding type and it works great because",
    "start": "2167760",
    "end": "2174240"
  },
  {
    "text": "those call types they behave like pointers you can copy them around they're lightweight",
    "start": "2174240",
    "end": "2182000"
  },
  {
    "text": "they don't cost you anything and you can store them anywhere you want and so on",
    "start": "2182000",
    "end": "2187599"
  },
  {
    "text": "and so forth um yeah so it's just a pointer again",
    "start": "2187599",
    "end": "2195680"
  },
  {
    "start": "2189000",
    "end": "2189000"
  },
  {
    "text": "it has qualifiers it has pointed to base class of course it doesn't store it inside as a pointer",
    "start": "2195680",
    "end": "2203200"
  },
  {
    "text": "it reinterprets it as a number",
    "start": "2203200",
    "end": "2208960"
  },
  {
    "text": "but anyway otherwise you can just dereference it like a",
    "start": "2209520",
    "end": "2215760"
  },
  {
    "text": "regular pointer you can use the arrow operator and all that good stuff",
    "start": "2215760",
    "end": "2221119"
  },
  {
    "text": "okay so how does it fit together in the ground grant scheme of things",
    "start": "2221119",
    "end": "2228079"
  },
  {
    "start": "2222000",
    "end": "2222000"
  },
  {
    "text": "we've got our type system which is actually a factory",
    "start": "2228079",
    "end": "2235920"
  },
  {
    "text": "which produces types you cannot create a type instance",
    "start": "2235920",
    "end": "2242480"
  },
  {
    "text": "yourself you have to ask a special class to do that for you and the reason for",
    "start": "2242480",
    "end": "2248320"
  },
  {
    "text": "that is the cash why cash because you really don't want",
    "start": "2248320",
    "end": "2255119"
  },
  {
    "text": "to have a lot of instances of say int",
    "start": "2255119",
    "end": "2261520"
  },
  {
    "text": "in your inside your compiler or static analyzer because they will",
    "start": "2261520",
    "end": "2267440"
  },
  {
    "text": "clutter your memory and how how will you know if they are the same",
    "start": "2267440",
    "end": "2274960"
  },
  {
    "text": "type if you have multiples you can of course compare their ideas",
    "start": "2274960",
    "end": "2281920"
  },
  {
    "text": "and information from within them but it won't be too efficient",
    "start": "2281920",
    "end": "2288960"
  },
  {
    "text": "so this factories class which is called type system it hashes",
    "start": "2288960",
    "end": "2295920"
  },
  {
    "text": "the types it creates based on what you pass to",
    "start": "2295920",
    "end": "2301020"
  },
  {
    "text": "[Music] to its functions which actually make types",
    "start": "2301020",
    "end": "2306720"
  },
  {
    "text": "so every like every hint will be just a single",
    "start": "2306720",
    "end": "2312960"
  },
  {
    "text": "instance in your application every pointer to end will be just a single instance in your",
    "start": "2312960",
    "end": "2319200"
  },
  {
    "text": "application and so on and so forth so every function every class if they have",
    "start": "2319200",
    "end": "2324720"
  },
  {
    "text": "um if they are the same type you will have only one instance",
    "start": "2324720",
    "end": "2331599"
  },
  {
    "text": "and uh just to for convenience because we are passing",
    "start": "2331599",
    "end": "2337920"
  },
  {
    "text": "call types around you cannot really",
    "start": "2337920",
    "end": "2342480"
  },
  {
    "text": "rely on the types methods",
    "start": "2343680",
    "end": "2349200"
  },
  {
    "text": "you will lose qualifiers otherwise the type system provides trades",
    "start": "2349200",
    "end": "2355200"
  },
  {
    "text": "uh trades are like type trades from the standard library they",
    "start": "2355200",
    "end": "2362320"
  },
  {
    "text": "basically do the same things but uh during runtime",
    "start": "2362320",
    "end": "2369440"
  },
  {
    "start": "2369000",
    "end": "2369000"
  },
  {
    "text": "okay so what profit do we get from it um types are mutable once created they",
    "start": "2369440",
    "end": "2376480"
  },
  {
    "text": "can be changed and you cannot break them in any way like that",
    "start": "2376480",
    "end": "2384400"
  },
  {
    "text": "types are single instance objects not single tones but single instance",
    "start": "2386000",
    "end": "2392560"
  },
  {
    "text": "there's only one of each you can compare types really by hash",
    "start": "2392560",
    "end": "2398640"
  },
  {
    "text": "values it makes your life easier",
    "start": "2398640",
    "end": "2404400"
  },
  {
    "text": "and those call type pointers they are not nullable they have unresolved uh type",
    "start": "2404400",
    "end": "2410640"
  },
  {
    "text": "so-called under the hood if if you default construct them",
    "start": "2410640",
    "end": "2416160"
  },
  {
    "text": "you can de-reference them nothing but uh is going to happen okay so uh yes i guess it's good",
    "start": "2416160",
    "end": "2425838"
  },
  {
    "text": "let's see what we have actually inside our type classes",
    "start": "2426079",
    "end": "2432720"
  },
  {
    "text": "so the base class is really simple you can ask it for its id",
    "start": "2432720",
    "end": "2439359"
  },
  {
    "text": "which is stored here id is just an enum uh",
    "start": "2439359",
    "end": "2445440"
  },
  {
    "text": "with the unsigned charge its underline type",
    "start": "2446079",
    "end": "2452079"
  },
  {
    "text": "um this one checks for unresolved uh we can",
    "start": "2452079",
    "end": "2457599"
  },
  {
    "text": "check if it's some kind of auto and do something about it you can get it's canonical and you can",
    "start": "2457599",
    "end": "2466000"
  },
  {
    "text": "wrap it into qualifiers and produce a call type like",
    "start": "2466000",
    "end": "2471119"
  },
  {
    "text": "that and you can know its size and alignment",
    "start": "2471119",
    "end": "2478799"
  },
  {
    "text": "which are working through type system again",
    "start": "2479760",
    "end": "2486400"
  },
  {
    "text": "this hash is for for the factory",
    "start": "2486560",
    "end": "2492880"
  },
  {
    "text": "it uses it to identify types by its own means",
    "start": "2493440",
    "end": "2500000"
  },
  {
    "text": "and basically that's it so that's the whole base class for the",
    "start": "2500000",
    "end": "2506839"
  },
  {
    "text": "type and let's take a look also at some derived one uh we cannot unfortunately",
    "start": "2506839",
    "end": "2513520"
  },
  {
    "text": "go in too much detail about this but i guess i will just give you an overview",
    "start": "2513520",
    "end": "2520800"
  },
  {
    "text": "so let's take a look at the pointer type it's inherited from the base type class",
    "start": "2520800",
    "end": "2528400"
  },
  {
    "text": "and what information it adds as compared to its",
    "start": "2528400",
    "end": "2535119"
  },
  {
    "text": "base class a you can reference it and it stores a call type of the thing",
    "start": "2535119",
    "end": "2541359"
  },
  {
    "text": "it points to with all the qualifiers and this is just a",
    "start": "2541359",
    "end": "2546400"
  },
  {
    "text": "quality of life feature you can quickly check what the pointer is pointing to",
    "start": "2546400",
    "end": "2554480"
  },
  {
    "text": "in this scheme even though we have a class hierarchy we decided to go",
    "start": "2556640",
    "end": "2564079"
  },
  {
    "start": "2562000",
    "end": "2562000"
  },
  {
    "text": "really against polymorphic usage so no virtual functions there",
    "start": "2564079",
    "end": "2572000"
  },
  {
    "text": "let's take a hypothetical function which wants to know if you",
    "start": "2573280",
    "end": "2579280"
  },
  {
    "text": "have a pointer which points to an int it has a stupid name but it will do so",
    "start": "2579280",
    "end": "2587599"
  },
  {
    "text": "how the way we would do that with in",
    "start": "2587599",
    "end": "2593280"
  },
  {
    "text": "encodings we would just traverse the string character by character and try to figure",
    "start": "2593280",
    "end": "2598800"
  },
  {
    "text": "out uh what's what i hear it becomes quite simple we just try to",
    "start": "2598800",
    "end": "2607119"
  },
  {
    "text": "cast our type to a pointer if we fail we just",
    "start": "2607119",
    "end": "2612400"
  },
  {
    "text": "bug out if we don't fail we dereference it try to get it as a",
    "start": "2612400",
    "end": "2618079"
  },
  {
    "text": "built-in type and do a check like that so it's quite simple",
    "start": "2618079",
    "end": "2624160"
  },
  {
    "text": "it's less for both than it would be with uh including",
    "start": "2624160",
    "end": "2631040"
  },
  {
    "text": "and i think it works faster really um well this tri get asked function",
    "start": "2631040",
    "end": "2638640"
  },
  {
    "text": "you saw there is a dynamic cost which is not a dynamic cost really",
    "start": "2638640",
    "end": "2645520"
  },
  {
    "text": "it can cast your type pointer you get from call type",
    "start": "2645520",
    "end": "2652000"
  },
  {
    "text": "based on its id to another to the",
    "start": "2652000",
    "end": "2658160"
  },
  {
    "text": "derived class you want uh there are two",
    "start": "2658160",
    "end": "2663760"
  },
  {
    "text": "versions of it it it can",
    "start": "2663760",
    "end": "2670079"
  },
  {
    "text": "cost by type you give it or by id",
    "start": "2670079",
    "end": "2675200"
  },
  {
    "text": "uh and this two function there it just",
    "start": "2675200",
    "end": "2681599"
  },
  {
    "text": "it just does that basically so it it just utilizes static cast",
    "start": "2681599",
    "end": "2688160"
  },
  {
    "text": "otherwise it's null pointer very close to how dynamic cast would work",
    "start": "2688160",
    "end": "2694640"
  },
  {
    "text": "and this thing here is a set of",
    "start": "2694640",
    "end": "2700078"
  },
  {
    "text": "i template templates for each type which",
    "start": "2700640",
    "end": "2706960"
  },
  {
    "text": "correspond types with ids i made a cardinal scene here by creating",
    "start": "2709920",
    "end": "2717359"
  },
  {
    "text": "macros but this is what",
    "start": "2717359",
    "end": "2723520"
  },
  {
    "text": "when you create a new derived class from the base type",
    "start": "2723520",
    "end": "2729119"
  },
  {
    "text": "this is what you should call and give it the type name and the id",
    "start": "2729119",
    "end": "2735119"
  },
  {
    "text": "and remember i talked about traits there's another way to do the same thing",
    "start": "2736000",
    "end": "2743119"
  },
  {
    "start": "2741000",
    "end": "2741000"
  },
  {
    "text": "again the same stupid function you can do it like that check if it's",
    "start": "2743119",
    "end": "2749200"
  },
  {
    "text": "pointer remove pointer try get as built-in and go",
    "start": "2749200",
    "end": "2754640"
  },
  {
    "text": "just check if it's in it and those trade things",
    "start": "2754640",
    "end": "2762319"
  },
  {
    "start": "2762000",
    "end": "2762000"
  },
  {
    "text": "they mimic what we have here this this is a screenshot from cp reference",
    "start": "2762319",
    "end": "2770000"
  },
  {
    "text": "and those are screenshots from our code really",
    "start": "2770000",
    "end": "2775440"
  },
  {
    "text": "they just are the same basically which we use in",
    "start": "2775440",
    "end": "2782000"
  },
  {
    "text": "in our code and just to deal with call types in the same basically way we would do in",
    "start": "2782000",
    "end": "2789200"
  },
  {
    "text": "our code at compile time if we wanted to use type trace from the standard library",
    "start": "2789200",
    "end": "2796559"
  },
  {
    "text": "um well here's just an example of how trade is implemented let's look at decay",
    "start": "2797680",
    "end": "2805760"
  },
  {
    "text": "if we just check the way decay works we can code it quite easily",
    "start": "2805760",
    "end": "2813280"
  },
  {
    "text": "so first remove const volatile and reference",
    "start": "2813280",
    "end": "2818880"
  },
  {
    "text": "from your type functions become function pointers arrays become",
    "start": "2818880",
    "end": "2826100"
  },
  {
    "text": "[Music] pointers to underline elements",
    "start": "2826100",
    "end": "2832240"
  },
  {
    "text": "yeah this way you can manipulate all those things inside",
    "start": "2834880",
    "end": "2840240"
  },
  {
    "text": "your code base and now the final how it fits together part",
    "start": "2840240",
    "end": "2847599"
  },
  {
    "text": "so let's say we get this uh as our input",
    "start": "2847599",
    "end": "2855359"
  },
  {
    "text": "this piece of code it goes to the parser the person makes an ast",
    "start": "2855359",
    "end": "2861760"
  },
  {
    "text": "it's a declaration statement obviously then",
    "start": "2861760",
    "end": "2867839"
  },
  {
    "text": "types get determined here for a pointer we get a the",
    "start": "2867920",
    "end": "2874960"
  },
  {
    "text": "resulting type as a pointer to end this wrap there in the first line it",
    "start": "2874960",
    "end": "2882160"
  },
  {
    "text": "says create a call type which has empty qualifiers because we don't have const or volatile here or",
    "start": "2882160",
    "end": "2889760"
  },
  {
    "text": "anything this type is assigned to the",
    "start": "2889760",
    "end": "2895520"
  },
  {
    "text": "ast node which has been created and this ast note later gets into a",
    "start": "2895520",
    "end": "2901359"
  },
  {
    "text": "diagnostic rule and here you can use traits uh to work with it",
    "start": "2901359",
    "end": "2906480"
  },
  {
    "text": "uh and determine its type or you can use different ways",
    "start": "2906480",
    "end": "2911760"
  },
  {
    "text": "uh like uh addressing the type itself",
    "start": "2911760",
    "end": "2916559"
  },
  {
    "text": "and we are running out of time uh so yeah just just a summary",
    "start": "2916880",
    "end": "2923359"
  },
  {
    "start": "2920000",
    "end": "2920000"
  },
  {
    "text": "um this was a brief introduction in what we",
    "start": "2923359",
    "end": "2928480"
  },
  {
    "text": "have as a type system really and",
    "start": "2928480",
    "end": "2934800"
  },
  {
    "text": "i just don't have time to elaborate really on that uh i could talk about it for hours maybe",
    "start": "2934800",
    "end": "2942720"
  },
  {
    "text": "if this topic interests someone i can",
    "start": "2942720",
    "end": "2949119"
  },
  {
    "text": "turn it into a series of talks and",
    "start": "2949119",
    "end": "2954160"
  },
  {
    "text": "give you more information on any specifics we have inside",
    "start": "2954160",
    "end": "2960079"
  },
  {
    "text": "but in any case uh thank you everyone who was listening to me",
    "start": "2960079",
    "end": "2968240"
  },
  {
    "text": "and i think right now since we have a little bit of time i'll see if we got any",
    "start": "2968240",
    "end": "2975920"
  },
  {
    "text": "questions and then i'll just answer whatever i get otherwise thank",
    "start": "2975920",
    "end": "2981839"
  },
  {
    "text": "you and that's it i don't think we have",
    "start": "2981839",
    "end": "2990078"
  },
  {
    "text": "any questions really unless i'm missing something",
    "start": "2990800",
    "end": "2998519"
  },
  {
    "text": "and just quick check",
    "start": "3004240",
    "end": "3007359"
  },
  {
    "text": "okay so no questions so thank you again everyone uh who was",
    "start": "3010880",
    "end": "3017359"
  },
  {
    "text": "listening and that's it for me have a nice day",
    "start": "3017359",
    "end": "3024160"
  }
]