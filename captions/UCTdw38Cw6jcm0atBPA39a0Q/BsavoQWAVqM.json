[
  {
    "text": "good morning everyone thank thank you all for coming so my name is Marc seaman",
    "start": "4230",
    "end": "10030"
  },
  {
    "text": "that if you want to know more about me there's information they aren't blocked upload a DK and you can follow me on",
    "start": "10030",
    "end": "15639"
  },
  {
    "text": "Twitter if you're interested in learning what I have to say about various things what I'm gonna do today is I'll try to",
    "start": "15639",
    "end": "22900"
  },
  {
    "text": "answer a couple of frequently asked questions and we'll be - frequently",
    "start": "22900",
    "end": "28779"
  },
  {
    "text": "asked questions and we'll cover each one in well it seems like we'll cover each one in turn but what's actually going to",
    "start": "28779",
    "end": "34720"
  },
  {
    "text": "happen is that I'm gonna start with the first one so that's gonna be act 1 this is a you know three three-part talk or",
    "start": "34720",
    "end": "41050"
  },
  {
    "text": "three acts talk if you will so in Act one we'll start by talking about the first frequently asked question and I'll",
    "start": "41050",
    "end": "47110"
  },
  {
    "text": "talk about why you would you know ask that question and why you should care and at the end of that act I'm just",
    "start": "47110",
    "end": "55210"
  },
  {
    "text": "gonna let it you know simmer there for a while and then move on to Act two well I'm gonna you know start asking or",
    "start": "55210",
    "end": "61390"
  },
  {
    "text": "looking at another frequently asked question that at first glance might seem completely unrelated to the first one",
    "start": "61390",
    "end": "67840"
  },
  {
    "text": "and then we'll go through that frequently asked question in act two and once we arrive at a and a way to address",
    "start": "67840",
    "end": "74740"
  },
  {
    "text": "that question we now have enough information to go back to the first one from act 1 and so that's what's going to",
    "start": "74740",
    "end": "80950"
  },
  {
    "text": "happen in act 3 then we're going to go back and look at how those things fit together and arrive at I what I hope is",
    "start": "80950",
    "end": "87730"
  },
  {
    "text": "a nice and beautiful solution so the first frequently asked question that I'm",
    "start": "87730",
    "end": "93700"
  },
  {
    "text": "going to address is how do I combine dependency injection with a sink and a",
    "start": "93700",
    "end": "98920"
  },
  {
    "text": "weight without leaky abstractions that is because if you can accept leaky",
    "start": "98920",
    "end": "104620"
  },
  {
    "text": "abstractions you've got to be okay so we'll actually gonna start just looking at what that might look like and then",
    "start": "104620",
    "end": "109780"
  },
  {
    "text": "we'll see what else we can do so we're gonna have to look at some code in order",
    "start": "109780",
    "end": "115210"
  },
  {
    "text": "to be able to talk about these things and I have my favorite scenario that I",
    "start": "115210",
    "end": "120280"
  },
  {
    "text": "always use if I can get away with it and that is to pretend that I have to create and I have to develop an online",
    "start": "120280",
    "end": "126430"
  },
  {
    "text": "restaurant reservation system I know these are all out there but that's just my favorite example scenario so you know",
    "start": "126430",
    "end": "133360"
  },
  {
    "text": "one of those things where if you want to make a reservation at a restaurant you find a form on the restaurant",
    "start": "133360",
    "end": "140130"
  },
  {
    "text": "website on app and you fill in the details and you press submit and it creates a little JSON document that gets",
    "start": "140130",
    "end": "146400"
  },
  {
    "text": "you know posted to some HTTP based API and the code that we're going to look at",
    "start": "146400",
    "end": "151890"
  },
  {
    "text": "is that you know the backend code that will receive that JSON document and figure out what to do with it so we'll",
    "start": "151890",
    "end": "159720"
  },
  {
    "text": "start with the business logic or the domain model if we go so I'll start by just showing you some a method signature",
    "start": "159720",
    "end": "167220"
  },
  {
    "text": "here so in general just to get things to fit on the slide I'm not going to show you entire classes I'm just going to",
    "start": "167220",
    "end": "173310"
  },
  {
    "text": "show you members on classes so this is just a method signature I'm gonna fill",
    "start": "173310",
    "end": "178320"
  },
  {
    "text": "in the method in a little while and I want to talk a little bit about the method signature before I fill it in with with details so the idea here is",
    "start": "178320",
    "end": "185700"
  },
  {
    "text": "that we have a reservation as an input argument and that's just a data transfer object it's one of those things that",
    "start": "185700",
    "end": "192000"
  },
  {
    "text": "just contain whatever was in that JSON document so the date the quantity the",
    "start": "192000",
    "end": "198180"
  },
  {
    "text": "name the email address those things pretty straightforward and you'll notice it returns a non herbal int so the idea",
    "start": "198180",
    "end": "205470"
  },
  {
    "text": "here the contract of this sort of interaction is that the int is a",
    "start": "205470",
    "end": "211680"
  },
  {
    "text": "reservation ID so if you have a reservation ID you have a reservation if you get null you don't have a",
    "start": "211680",
    "end": "217110"
  },
  {
    "text": "reservation ID that means you don't have a reservation and that might be various reasons why you might not have a",
    "start": "217110",
    "end": "223470"
  },
  {
    "text": "reservation so if we do in dependency injection we could have injected some repository that's what people often do",
    "start": "223470",
    "end": "230190"
  },
  {
    "text": "so this is just you know this is something that could be injected via a constructor injection I'm not showing",
    "start": "230190",
    "end": "235890"
  },
  {
    "text": "you how that works because it's 2019 and at this point I sort of expect that people understand how constructor",
    "start": "235890",
    "end": "241980"
  },
  {
    "text": "injection works so this repository comes in via the constructor and gets assigned",
    "start": "241980",
    "end": "247079"
  },
  {
    "text": "to this read-only property and now we can access that dependency whenever we need to so we could go and query it and",
    "start": "247079",
    "end": "253019"
  },
  {
    "text": "say well give me all the reservations for that particular date once we have that we can calculate the sum of all the",
    "start": "253019",
    "end": "260190"
  },
  {
    "text": "reserved seeds that are already been you know reserved for that date and if we also know the capacity of the restaurant",
    "start": "260190",
    "end": "266729"
  },
  {
    "text": "we can now make a business decision and we can say well if the capacity if the remaining capacity is too little we'll have to",
    "start": "266729",
    "end": "273900"
  },
  {
    "text": "return null meaning unfortunately we have to reject that preservation request but if we get past that check we can now",
    "start": "273900",
    "end": "281940"
  },
  {
    "text": "call repository create with the reservation and that returns a reservation ID and we'll just you know",
    "start": "281940",
    "end": "287310"
  },
  {
    "text": "return that so at this point you'll notice that there's absolutely no a sink and a weight going on we'll get to that",
    "start": "287310",
    "end": "293160"
  },
  {
    "text": "in a moment but I just wanted to establish what the baseline might look like now I talked a little bit about",
    "start": "293160",
    "end": "298920"
  },
  {
    "text": "that try/except method as an overall abstraction so if we don't remain driven",
    "start": "298920",
    "end": "304110"
  },
  {
    "text": "design we might want to say that's actually an abstraction this is an object called the maitre d the maitre d",
    "start": "304110",
    "end": "309750"
  },
  {
    "text": "is a role in in real restaurant business based basically meaning the head waiter that's the the person who makes the",
    "start": "309750",
    "end": "316980"
  },
  {
    "text": "decisions about whether or not we have remaining tables if you walk into a restaurant so we'll call it the maitre d",
    "start": "316980",
    "end": "322160"
  },
  {
    "text": "and just to be just because we can we can actually use Unicode characters there so we can use this doodle",
    "start": "322160",
    "end": "327720"
  },
  {
    "text": "a circumflex they're very very uncomfortable to have to type that but it's just make fun all right so now we",
    "start": "327720",
    "end": "334890"
  },
  {
    "text": "have our domain model in place how do we compose all of those things what happens at the boundary when that JSON document",
    "start": "334890",
    "end": "341700"
  },
  {
    "text": "actually arrives well you can have a controller of some source and a post",
    "start": "341700",
    "end": "347610"
  },
  {
    "text": "method that will you know by convention be invoked when you get an HTTP POST and it has to return some sort of action",
    "start": "347610",
    "end": "354660"
  },
  {
    "text": "result which is basically an interface that sort of models how an HTTP response is gonna you know be rendered on the",
    "start": "354660",
    "end": "361350"
  },
  {
    "text": "wire and exactly how that works it's not really important just it's just an HTTP response polymorphically so if you're",
    "start": "361350",
    "end": "369570"
  },
  {
    "text": "doing dependency injection you tend to do that all the way through so we could take that Maitre D' domain abstraction",
    "start": "369570",
    "end": "376800"
  },
  {
    "text": "that we've created and inject that and you know make it available as a read-only property and that means we can",
    "start": "376800",
    "end": "382260"
  },
  {
    "text": "basically just you know delegate to that get inaudible ID out of it and we can just have a little look at whether it's",
    "start": "382260",
    "end": "388530"
  },
  {
    "text": "normal or not so if it's null we'll return an internal server error so it that's just a little helper method that",
    "start": "388530",
    "end": "394230"
  },
  {
    "text": "could sit on the base class of my controller controller base class and that just returns one of those action results you know 500 internal server",
    "start": "394230",
    "end": "401580"
  },
  {
    "text": "error that HTTP was otherwise we have another little helper method here called okay that returns a",
    "start": "401580",
    "end": "407070"
  },
  {
    "text": "200k response and in this case you'll notice we can go ID value because we've",
    "start": "407070",
    "end": "412620"
  },
  {
    "text": "checked whether it's null or not so it's it's safe to access the value so we want the HTTP response to include the",
    "start": "412620",
    "end": "419580"
  },
  {
    "text": "reservation ID so that any HTTP client can go and do something with that reservation ID so this is just a little",
    "start": "419580",
    "end": "428130"
  },
  {
    "text": "overview of what completely standard you know dependency injection might look like but then you go and say well the",
    "start": "428130",
    "end": "434310"
  },
  {
    "text": "reservations repository there this was something that the the try/except method",
    "start": "434310",
    "end": "440690"
  },
  {
    "text": "required as a dependency so if we follow the dependency inversion principle it's",
    "start": "440690",
    "end": "445740"
  },
  {
    "text": "the client that consumes the api that gets to decide what that api looks like",
    "start": "445740",
    "end": "452370"
  },
  {
    "text": "and right now it looks like this because try/except doesn't need it to do more than this but then you can say all right",
    "start": "452370",
    "end": "458940"
  },
  {
    "text": "it's called a repository but really who are we kidding we know that this is really just a database right and if it's",
    "start": "458940",
    "end": "465300"
  },
  {
    "text": "really just a database we might actually want to interact with this in an e synchronous fashion so we want to do you",
    "start": "465300",
    "end": "471600"
  },
  {
    "text": "know asynchronous programming against this because it might be more efficient so how do we do that in c-sharp well",
    "start": "471600",
    "end": "477630"
  },
  {
    "text": "we'll have to change the wrists those return types right now they're sort of naked values in a reservation array or",
    "start": "477630",
    "end": "483210"
  },
  {
    "text": "an INT but if we change them to tasks then we can do asynchronous programming",
    "start": "483210",
    "end": "489590"
  },
  {
    "text": "all right so that's fine I would say at this point already this is a leaky",
    "start": "489590",
    "end": "495390"
  },
  {
    "text": "abstraction because the abstraction the interface was defined in terms of what the try except what that Maitre D'",
    "start": "495390",
    "end": "500910"
  },
  {
    "text": "object needs but now we've led some implementation detail leaked through into the design base coat because we",
    "start": "500910",
    "end": "508140"
  },
  {
    "text": "have a specific implementation in mind that that we want to be asynchronous now that's actually sort of leaking through",
    "start": "508140",
    "end": "514110"
  },
  {
    "text": "into our interface design and then you might well say well but we're not really kidding anyone anyone in any way we know",
    "start": "514110",
    "end": "520919"
  },
  {
    "text": "that this is a database so it's probably okay that it's a synchronous and I would",
    "start": "520919",
    "end": "526170"
  },
  {
    "text": "probably say yeah okay fair enough let's just go with that decision but if we make that change we'll have to go back",
    "start": "526170",
    "end": "532650"
  },
  {
    "text": "to the Tri accept implementation and make some changes as well and they're small we just have to add a sink and a weight but we also",
    "start": "532650",
    "end": "539580"
  },
  {
    "text": "have to change the return type to return a task and when we do that we no longer",
    "start": "539580",
    "end": "547800"
  },
  {
    "text": "implement the interface so in order to fix that we'll have to go and also change the interface now this is where",
    "start": "547800",
    "end": "553860"
  },
  {
    "text": "I'm beginning to get a little bit annoyed with the change because this was supposed to be my domain model and now",
    "start": "553860",
    "end": "560760"
  },
  {
    "text": "the decision to have some asynchronous database into action is leaking through",
    "start": "560760",
    "end": "566250"
  },
  {
    "text": "into my domain model and why does my domain logic have to be asynchronous",
    "start": "566250",
    "end": "572720"
  },
  {
    "text": "this doesn't seem particularly reasonable but it has to be because otherwise it's not gonna compile so if",
    "start": "572720",
    "end": "581100"
  },
  {
    "text": "we make that change we also have to go and make the change to the post method on the controller again it's a small",
    "start": "581100",
    "end": "586500"
  },
  {
    "text": "change I just need to use the weight keyword and the async keyword and at this point I'm at the boundary of my",
    "start": "586500",
    "end": "592020"
  },
  {
    "text": "application so I'm done this now every one of my code still compiles so it",
    "start": "592020",
    "end": "597360"
  },
  {
    "text": "complies again so so we're sort of done with that so is this a problem no it's",
    "start": "597360",
    "end": "605190"
  },
  {
    "text": "probably okay you know that would definitely be code bases where I'd say yeah that's a compromise and it's a",
    "start": "605190",
    "end": "612450"
  },
  {
    "text": "reasonable compromise and I can live with this so don't get me wrong here I'm not saying that there's anything bad with this I just think that we need to",
    "start": "612450",
    "end": "619770"
  },
  {
    "text": "be very explicit about the trade-offs we are making and right now we are saying well we're making a trade-off we are",
    "start": "619770",
    "end": "624900"
  },
  {
    "text": "actually you know letting an implementation detail leak through into how our abstractions are designed and",
    "start": "624900",
    "end": "631700"
  },
  {
    "text": "we'll live with that trade-off because the cost is not too too high and that's",
    "start": "631700",
    "end": "637830"
  },
  {
    "text": "a reasonable enough stance to take so",
    "start": "637830",
    "end": "642870"
  },
  {
    "text": "you what I've covered here is known to everyone who's ever done in is any sort of asynchronous programming once you",
    "start": "642870",
    "end": "649110"
  },
  {
    "text": "start doing asynchronous programming it has to be acing all the way and you probably know this already it's nothing new in this there's no other way to do",
    "start": "649110",
    "end": "656820"
  },
  {
    "text": "that and you know whenever whenever someone tells me something like that oh really",
    "start": "656820",
    "end": "662610"
  },
  {
    "text": "yeah I love those assertions because there's I just have to come up with one counter-argument one example where there",
    "start": "662610",
    "end": "669179"
  },
  {
    "text": "is another way and then I can disprove something like that so of course since I'm giving this talk there is another way and I'm not saying",
    "start": "669179",
    "end": "675929"
  },
  {
    "text": "that the other way is superior to the one that I've just shown you but I believe in being able to make a choice",
    "start": "675929",
    "end": "683309"
  },
  {
    "text": "and I think a lot of people are not aware of the other way and that's why they say there is no other way so I want",
    "start": "683309",
    "end": "688709"
  },
  {
    "text": "you to know the other way and then you can make a decision is one better or the other and I think you know as always it",
    "start": "688709",
    "end": "695040"
  },
  {
    "text": "depends but you can make the decision if you know how to do it if you don't know",
    "start": "695040",
    "end": "701069"
  },
  {
    "text": "how to do it you can't make that decision so that's the end of Act one of",
    "start": "701069",
    "end": "706139"
  },
  {
    "text": "the talk we'll now go and you know put that question aside for a little while and we'll start by looking at a",
    "start": "706139",
    "end": "712499"
  },
  {
    "text": "completely different question and the seemingly completely different question",
    "start": "712499",
    "end": "717749"
  },
  {
    "text": "is how do I get the value of my monad and the short answer by the way I'm not",
    "start": "717749",
    "end": "724499"
  },
  {
    "text": "going to assume that you know what a monad is so we'll cover that in a little while but the summary of how you'd",
    "start": "724499",
    "end": "729899"
  },
  {
    "text": "answer this question is mu there is a tradition in Zen Buddhist philosophy",
    "start": "729899",
    "end": "736949"
  },
  {
    "text": "that associates the word mu this sort of means void or null or emptiness",
    "start": "736949",
    "end": "742799"
  },
  {
    "text": "something like that and there's a tradition that associated this as meaning unasked the question basically",
    "start": "742799",
    "end": "748829"
  },
  {
    "text": "you know if someone asks you a question instead of saying yes or no sometimes you might answer mu and the idea here is",
    "start": "748829",
    "end": "755939"
  },
  {
    "text": "that it means the question actually doesn't make much sense now if you're interested in a Western perspective on",
    "start": "755939",
    "end": "762059"
  },
  {
    "text": "this you could read zen and the art of motorcycle maintenance but that's sort of like a philosophy book so maybe you",
    "start": "762059",
    "end": "767339"
  },
  {
    "text": "should just go and read goodish epochal instead because that is actually you know sort of a programmers book there but both of them are pretty good and",
    "start": "767339",
    "end": "773699"
  },
  {
    "text": "they offer a Western perspective on this idea of uh Nazca the question and",
    "start": "773699",
    "end": "778919"
  },
  {
    "text": "they're just good books in themselves so why not might not want to greet them so basically sometimes we run into these",
    "start": "778919",
    "end": "785730"
  },
  {
    "text": "sort of problems where a person who's asking a question might actually ask a question that doesn't really make any",
    "start": "785730",
    "end": "791610"
  },
  {
    "text": "sense and they don't know that because they're just getting started with you know Buddhist philosophy or they're",
    "start": "791610",
    "end": "797940"
  },
  {
    "text": "just getting started with the new programming language or a new framework or maybe a new programming paradigm this",
    "start": "797940",
    "end": "805260"
  },
  {
    "text": "gives rise to what is known as the XY problem the X - problem is a question you often run into in you know when you",
    "start": "805260",
    "end": "811830"
  },
  {
    "text": "have questions and answers and people are trying to learn new stuff it's such a common thing on Stack Overflow that Stack Overflow has a FAQ about that but",
    "start": "811830",
    "end": "819090"
  },
  {
    "text": "in general the idea here is that when you're learning something new and you're sort of struggling with how to do things",
    "start": "819090",
    "end": "825030"
  },
  {
    "text": "in whatever the new way is sometimes you have a goal in mind and we could call",
    "start": "825030",
    "end": "830400"
  },
  {
    "text": "that goal Y and either consciously or unconsciously you probably have a series",
    "start": "830400",
    "end": "836970"
  },
  {
    "text": "of steps in mind that that you think will enable you to reach the goal Y so",
    "start": "836970",
    "end": "842460"
  },
  {
    "text": "if you're an object-oriented program are trying to learn functional programming for example you might may say well I I",
    "start": "842460",
    "end": "848160"
  },
  {
    "text": "know how object oriented programming I would accomplish my goal that would involve a series of steps and then it",
    "start": "848160",
    "end": "855000"
  },
  {
    "text": "turns out that you stuck on one of those steps just stuck on X and you go and ask other people how do I do X and then the",
    "start": "855000",
    "end": "862680"
  },
  {
    "text": "expert will say why would you ever want to do X and then you can get really you know you can get offended and think that",
    "start": "862680",
    "end": "869580"
  },
  {
    "text": "Stack Overflow is not a friendly place and sometimes it's not because people can ask that you know why why would you",
    "start": "869580",
    "end": "875850"
  },
  {
    "text": "want to do that if they can ask that in a really unpleasant way but sometimes if you in you know if you engage in a",
    "start": "875850",
    "end": "881640"
  },
  {
    "text": "conversation you may actually be able to arrive at what was originally implicit that you're really trying to accomplish",
    "start": "881640",
    "end": "888420"
  },
  {
    "text": "the goal why and once the expert understands that they say oh okay in",
    "start": "888420",
    "end": "894000"
  },
  {
    "text": "this case in this paradigm what you want to do is Z and set will enable you to",
    "start": "894000",
    "end": "899130"
  },
  {
    "text": "achieve your goal so there's a completely different way of doing things so this happens a lot with monads and",
    "start": "899130",
    "end": "906330"
  },
  {
    "text": "often the question is very specific but you can sort of generalize it to say how do I get the value out of my mu net or",
    "start": "906330",
    "end": "911730"
  },
  {
    "text": "you don't because you have to do that instead and getting the value out of the MU net is not the way to go about it so",
    "start": "911730",
    "end": "919110"
  },
  {
    "text": "I'm not assuming you know what a monad is so let's cover that once a monad well it's a function you can flatten them",
    "start": "919110",
    "end": "924660"
  },
  {
    "text": "okay that's very helpful once a functor I'm not assuming you know",
    "start": "924660",
    "end": "929700"
  },
  {
    "text": "the things and I know that functors and monads are some of those words that often you know sounds scary to a lot of",
    "start": "929700",
    "end": "936820"
  },
  {
    "text": "people it's really not a but it's not a difficult concept to craft so I'll see if I can make you understand that even",
    "start": "936820",
    "end": "943360"
  },
  {
    "text": "if you don't know what it is without too much fancy terminology so we'll start by",
    "start": "943360",
    "end": "950350"
  },
  {
    "text": "talking about what we could call darts a container so basically a functor is a",
    "start": "950350",
    "end": "955720"
  },
  {
    "text": "data container and I'm not talking about a docker container and I'm not talking about a dependency injection container",
    "start": "955720",
    "end": "961209"
  },
  {
    "text": "I'm not even talking about a shipping container but you can think of a data containers just a generically typed",
    "start": "961209",
    "end": "967540"
  },
  {
    "text": "container of values and in order to for that control of container to be a",
    "start": "967540",
    "end": "973089"
  },
  {
    "text": "functor it must support what we call a structure preserving map so there's some values inside of that container and you",
    "start": "973089",
    "end": "980170"
  },
  {
    "text": "can sort of translate what what's inside the container and the output of that would be a new container with the",
    "start": "980170",
    "end": "985660"
  },
  {
    "text": "translated values inside so the the most familiar example of this is just a",
    "start": "985660",
    "end": "991660"
  },
  {
    "text": "collection so here's a collection of numbers it could be an array a list of tea any ienumerable of tea whatever",
    "start": "991660",
    "end": "996940"
  },
  {
    "text": "you'd like and one of the ways you could translate that is just at one to each of the numbers and now you still have a",
    "start": "996940",
    "end": "1003209"
  },
  {
    "text": "collection so it's still the same sort of container but you translated whatever goes on inside of it and likewise you",
    "start": "1003209",
    "end": "1009600"
  },
  {
    "text": "can say well instead of add one you could turn all the numbers into strings or you could figure out whether they're",
    "start": "1009600",
    "end": "1014820"
  },
  {
    "text": "even or odd and turn them into boolean values so what we mean by structure preserving is that we're preserving the",
    "start": "1014820",
    "end": "1021329"
  },
  {
    "text": "structure of the original input container in this case collections have a size you know there's six elements in",
    "start": "1021329",
    "end": "1027000"
  },
  {
    "text": "the input so all the output collections also have a size of six and there's the there's an order the reason why you know",
    "start": "1027000",
    "end": "1034110"
  },
  {
    "text": "the output collections have the ordering that they have of the elements is because it's determined by the input and",
    "start": "1034110",
    "end": "1039630"
  },
  {
    "text": "order so that's basically what it means you know what a structure of a container is depends on what sort of container it",
    "start": "1039630",
    "end": "1046918"
  },
  {
    "text": "is and right now we're just using a collection as an example another thing we can do with those things is you'll",
    "start": "1046919",
    "end": "1053429"
  },
  {
    "text": "notice that the output is also a container it's a container of the same kind of thing so we could use that as an",
    "start": "1053429",
    "end": "1060120"
  },
  {
    "text": "input for another step so you could say well after we've added one week turn things into strings and this",
    "start": "1060120",
    "end": "1066960"
  },
  {
    "text": "shouldn't be surprising to - she - she sharp developers at all in she's sharp we would do something like this where we",
    "start": "1066960",
    "end": "1073200"
  },
  {
    "text": "can say let's create a new array for example or a list of T whatever and then you know that this structure preserving",
    "start": "1073200",
    "end": "1078630"
  },
  {
    "text": "map in c-sharp is not called map as in all the other languages it's called select so you just say let's",
    "start": "1078630",
    "end": "1085320"
  },
  {
    "text": "add one to each of the numbers inside that array and the next step is just to turn them into strings and now you have",
    "start": "1085320",
    "end": "1091409"
  },
  {
    "text": "yourself an array of strings so this is an example of a functor is a data",
    "start": "1091409",
    "end": "1098549"
  },
  {
    "text": "container that contains a structure preserving map it's just one example and we'll see some other ones later on at",
    "start": "1098549",
    "end": "1105299"
  },
  {
    "text": "this point you might probably say well why would anyone ever ask the question",
    "start": "1105299",
    "end": "1110340"
  },
  {
    "text": "how do I get the value out of my array because you understand that that is a",
    "start": "1110340",
    "end": "1115830"
  },
  {
    "text": "nonsensical question right you know in this example there's not one value there's six values so this doesn't make",
    "start": "1115830",
    "end": "1121830"
  },
  {
    "text": "sense to ask the question how to get the value out of it and even even worse you know erase all other collections might",
    "start": "1121830",
    "end": "1128340"
  },
  {
    "text": "be empty in which case there is not a D value there's no value inside of it so",
    "start": "1128340",
    "end": "1133529"
  },
  {
    "text": "no one asks that question how do I get the value out of my array so what makes people ask the question what how do I",
    "start": "1133529",
    "end": "1140039"
  },
  {
    "text": "get the value out of my monad and I believe the reason is you know if you've ever when you've ever learned link and",
    "start": "1140039",
    "end": "1147090"
  },
  {
    "text": "you written the Microsoft documentation about how link how select works there's nothing in that documentation that tells",
    "start": "1147090",
    "end": "1153960"
  },
  {
    "text": "you that what you're looking at is a functor even though it is and there's nothing that tells you that is also a",
    "start": "1153960",
    "end": "1159990"
  },
  {
    "text": "monad which it also is we haven't covered but that is we'll get back to that so I believe that what happens is",
    "start": "1159990",
    "end": "1166710"
  },
  {
    "text": "the first time people actually encounter the concept of a function and a monad it's not in this context and even though",
    "start": "1166710",
    "end": "1172590"
  },
  {
    "text": "you probably have done things like this for years you're not aware that you're working with functors no net so what I",
    "start": "1172590",
    "end": "1178590"
  },
  {
    "text": "think happens is that people often encounter the context of a monad in with",
    "start": "1178590",
    "end": "1183630"
  },
  {
    "text": "different types of containers so there there's a class of containers that we could call unit containers and that's",
    "start": "1183630",
    "end": "1190470"
  },
  {
    "text": "just my own made-up terminology there but but all of these have in common is that there can guarantee to contain",
    "start": "1190470",
    "end": "1197280"
  },
  {
    "text": "exactly one value so for that class it actually makes sense to ask the question",
    "start": "1197280",
    "end": "1202800"
  },
  {
    "text": "how do I get the value out of the container because you can in most cases",
    "start": "1202800",
    "end": "1208490"
  },
  {
    "text": "now let's look at an example so lazy of T has been around in the dotnet framework for just forever basically and",
    "start": "1208490",
    "end": "1214770"
  },
  {
    "text": "it's a generically type container it doesn't have a select method in the base",
    "start": "1214770",
    "end": "1221190"
  },
  {
    "text": "class library itself but you can easily add an extension method that takes you know lazy of T and turns it into a lazy",
    "start": "1221190",
    "end": "1228480"
  },
  {
    "text": "of TB assault you just need to have a function that can turn a tea into a tea result value and the implementation is",
    "start": "1228480",
    "end": "1234390"
  },
  {
    "text": "just a one-liner so if you if you have an extension method like this you could write code that goes like this so you",
    "start": "1234390",
    "end": "1240570"
  },
  {
    "text": "can say let's create a new lazy of int and even though it has this threat that sleep before 10 seconds inside of it",
    "start": "1240570",
    "end": "1246720"
  },
  {
    "text": "this whole expression just completes immediately because that's the idea of a lazy computation so now you have a lazy",
    "start": "1246720",
    "end": "1254010"
  },
  {
    "text": "of end you can use the new selects extension method to turn it into a lose your string and this still completes",
    "start": "1254010",
    "end": "1261540"
  },
  {
    "text": "immediately so this preserves the structure of what it means to be a lazy computation or it preserves the",
    "start": "1261540",
    "end": "1268290"
  },
  {
    "text": "invariance we could say what we expect from a lazy of string is that we'd expect it to remain lazy until we force",
    "start": "1268290",
    "end": "1276630"
  },
  {
    "text": "evaluation at which point it will block for 10 seconds and then if we try to access it again it'll give us the result",
    "start": "1276630",
    "end": "1283560"
  },
  {
    "text": "immediately because it memorizes the results that's what we be that's what we expect lazy of T to do and select",
    "start": "1283560",
    "end": "1290510"
  },
  {
    "text": "preserves those invariants so this is a structure preserving map so it's pretty",
    "start": "1290510",
    "end": "1297900"
  },
  {
    "text": "straightforward to turn lazy of T into a functor by you know creating a little",
    "start": "1297900",
    "end": "1303810"
  },
  {
    "text": "select extension method and you can do the same thing with tasks of T you will notice the implementation is a little",
    "start": "1303810",
    "end": "1309690"
  },
  {
    "text": "bit different but the idea is the same and that means you can write some code that goes like this and again it'll",
    "start": "1309690",
    "end": "1315120"
  },
  {
    "text": "return immediately even though you have that task delay and you can call you",
    "start": "1315120",
    "end": "1320280"
  },
  {
    "text": "know X dot select on your task of in to get a task of string and again that just returns immediately it's only when you",
    "start": "1320280",
    "end": "1327270"
  },
  {
    "text": "try to await it that it will block probably will blog because it's not finished running at that point and again",
    "start": "1327270",
    "end": "1334090"
  },
  {
    "text": "if you do it again it'll return immediately so everything you expect from a task of string still holds even",
    "start": "1334090",
    "end": "1339640"
  },
  {
    "text": "though you contact select method so select in this case again is a structure for serving translation if it serves",
    "start": "1339640",
    "end": "1345580"
  },
  {
    "text": "what it means to be an asynchronous computation so this means that both lacy",
    "start": "1345580",
    "end": "1351220"
  },
  {
    "text": "of tea and task of tea are other types of functors there are other examples of functors so functor is this very",
    "start": "1351220",
    "end": "1357970"
  },
  {
    "text": "abstract idea that we have some sort of container that supports a structure preserving map and so far I've just",
    "start": "1357970",
    "end": "1364929"
  },
  {
    "text": "written it with extension method syntax but it turns out that I can actually write this in query syntax as well so",
    "start": "1364929",
    "end": "1371799"
  },
  {
    "text": "normally when you see this query syntax from I in Ex select you you mostly think",
    "start": "1371799",
    "end": "1377799"
  },
  {
    "text": "of this as being something that is enabled for ienumerable so that if X designer will be loved int then Y is",
    "start": "1377799",
    "end": "1383350"
  },
  {
    "text": "inferred to be a Niner mobile of string but since we added those to select method it turns out that this syntax in",
    "start": "1383350",
    "end": "1390760"
  },
  {
    "text": "c-sharp also works for lacy event and it also works for tasks event so adding the",
    "start": "1390760",
    "end": "1397570"
  },
  {
    "text": "appropriate select method lights of that language feature and the reason it does",
    "start": "1397570",
    "end": "1402940"
  },
  {
    "text": "that is because that language feature is based on that abstraction you know Eric Meyer who was involved in creating that",
    "start": "1402940",
    "end": "1409860"
  },
  {
    "text": "feature knew all about functions known as bank when did they did that and he said well we'll just have the the",
    "start": "1409860",
    "end": "1416019"
  },
  {
    "text": "concept of a monad and a functor and that was that's what we're gonna base the language syntax on right so this",
    "start": "1416019",
    "end": "1424539"
  },
  {
    "text": "sort of hopefully I hope explains what a firm tree is so now we just need to figure out okay so what's a monad so as",
    "start": "1424539",
    "end": "1432850"
  },
  {
    "text": "I told you a monad is a functor you can flatten so what does that mean when when",
    "start": "1432850",
    "end": "1437889"
  },
  {
    "text": "it's a function not flat well we can start again we can go back to thinking about collections for a little while so",
    "start": "1437889",
    "end": "1443559"
  },
  {
    "text": "if you have a string like foo comma bar this is one string and there's an instance method on string called split",
    "start": "1443559",
    "end": "1449919"
  },
  {
    "text": "that enables you to split over a given character so if you run the ad you get an array of strings and split on the",
    "start": "1449919",
    "end": "1456730"
  },
  {
    "text": "comma now that's fine what if you have an array of comma separated strings like this one",
    "start": "1456730",
    "end": "1463210"
  },
  {
    "text": "you say I'd like to split all the comma-separated strings into separate strings so you can do a select and then",
    "start": "1463210",
    "end": "1470200"
  },
  {
    "text": "you can say s that split on the comma but if you do that you'll get an estate",
    "start": "1470200",
    "end": "1475210"
  },
  {
    "text": "array this is an array of arrays and you say well that's not what I want I would very much like to just have a flat list",
    "start": "1475210",
    "end": "1481059"
  },
  {
    "text": "so I want to flatten that listed array so there's a method for that and it's called select many and the reason it's",
    "start": "1481059",
    "end": "1487600"
  },
  {
    "text": "called sonic many is because what happens inside that lambda expression produces many values you know split produces many values and so you just say",
    "start": "1487600",
    "end": "1495070"
  },
  {
    "text": "well I have something that happens inside the lambda expression that produces many values I would like to flatten as I go and",
    "start": "1495070",
    "end": "1500950"
  },
  {
    "text": "that's what select many does and that's why it's called that and now you just have a flat list there now if you have a",
    "start": "1500950",
    "end": "1508539"
  },
  {
    "text": "select many method and it's well behaved as this one is then it's a monad because you can flatten the listed list so",
    "start": "1508539",
    "end": "1515260"
  },
  {
    "text": "that's what that's basically what a monad is there's a little bit more to it but that's the intuition you have you need to have it's nothing much more -",
    "start": "1515260",
    "end": "1521830"
  },
  {
    "text": "it's not mysterious it's just practical so could you also have a mr. task for",
    "start": "1521830",
    "end": "1528100"
  },
  {
    "text": "example well what if you want to add two tasks Vin's together and you say well",
    "start": "1528100",
    "end": "1533380"
  },
  {
    "text": "I'd like to use this new thing I've just learned about structure preserving maps so let's see if I can do that with the",
    "start": "1533380",
    "end": "1538659"
  },
  {
    "text": "Select method so you might write something like this and say well okay I'll do extra select and then that means",
    "start": "1538659",
    "end": "1543940"
  },
  {
    "text": "I can access the integer inside X and I'll call that I and then I can sort of add the other one but I have to await",
    "start": "1543940",
    "end": "1550510"
  },
  {
    "text": "that so that's a little bothersome when you notice that the output Z is a task",
    "start": "1550510",
    "end": "1556299"
  },
  {
    "text": "of tasks of int now how do you get the value out of that well you can actually go a weight away jet sort of I was a",
    "start": "1556299",
    "end": "1564070"
  },
  {
    "text": "little bit surprised when I saw that but you're safe now what of this worked it does it compiles it actually works but",
    "start": "1564070",
    "end": "1571510"
  },
  {
    "text": "you know that's not really that's really not as nice as you'd like it to be so instead you know you could have if you",
    "start": "1571510",
    "end": "1577240"
  },
  {
    "text": "have a select many method and you could just you know add an extension method for that as well I'm not going to show you that but you can look it up that",
    "start": "1577240",
    "end": "1583929"
  },
  {
    "text": "means you can now flatten as you go so you can say well Z is now just a normal task of Ind and that means I just have",
    "start": "1583929",
    "end": "1589539"
  },
  {
    "text": "to await at once and you can even now use query syntax so you can use this cartesian syntax where is",
    "start": "1589539",
    "end": "1596490"
  },
  {
    "text": "even if I have multiple sources of asynchronous computation I can just go from from multiple times and that takes",
    "start": "1596490",
    "end": "1604380"
  },
  {
    "text": "away a lot of the need for all that a sink and a wait in the only await keyword you now need is to get the value",
    "start": "1604380",
    "end": "1610260"
  },
  {
    "text": "out of out of set so that's a pretty pretty decent way to be able to have to",
    "start": "1610260",
    "end": "1615360"
  },
  {
    "text": "write these things and again the reason why they cut this syntax this language syntax lights up is because you now turn",
    "start": "1615360",
    "end": "1620880"
  },
  {
    "text": "tasks into a monad so to summarize there definitely",
    "start": "1620880",
    "end": "1626420"
  },
  {
    "text": "containers data containers that look like you can get the value out of them so if you have a lazy of string you can",
    "start": "1626420",
    "end": "1632880"
  },
  {
    "text": "get the string out of the lazy of string by forcing evaluation and sort of the same thing goes for tasks of things and",
    "start": "1632880",
    "end": "1639780"
  },
  {
    "text": "this is not even constrained to c-sharp you know you have the same situation in F sharp where we have something called",
    "start": "1639780",
    "end": "1646559"
  },
  {
    "text": "async of string and you can get the value out of that as well by running it synchronously basically means the same",
    "start": "1646559",
    "end": "1651600"
  },
  {
    "text": "thing as under waiting is and even in haskell we have all sorts of unit containers the simplest one being one",
    "start": "1651600",
    "end": "1657179"
  },
  {
    "text": "called identity where you know if you have an identity of string you can get the value out of it by running a function called run identity there are",
    "start": "1657179",
    "end": "1663450"
  },
  {
    "text": "more of those in haskell as well so it's I think what happens is that if you sort",
    "start": "1663450",
    "end": "1669870"
  },
  {
    "text": "of get your feet wet with the concept of of functors and monads in this sort of",
    "start": "1669870",
    "end": "1676650"
  },
  {
    "text": "context it's you know the brain really likes to attempt to do some pattern matching and now you think well a monad",
    "start": "1676650",
    "end": "1682650"
  },
  {
    "text": "is something where you know ultimately I can get the value out of it because it's just you know represents some sort of you know computation and this is true",
    "start": "1682650",
    "end": "1690600"
  },
  {
    "text": "for these things but not in general and and we still know that you know collections are also monads and we know",
    "start": "1690600",
    "end": "1697650"
  },
  {
    "text": "that it doesn't make any sense to ask that question for all the collections but people tend to not really realize",
    "start": "1697650",
    "end": "1702750"
  },
  {
    "text": "that collections are known as so web where yeah where we often see the people run into problems is when we encounter",
    "start": "1702750",
    "end": "1709500"
  },
  {
    "text": "what we could call semi containers these are contained again my own made-up terminology here but these are",
    "start": "1709500",
    "end": "1715110"
  },
  {
    "text": "containers that may or may not contain a single value so they sort of look like unit containers but they're not quite",
    "start": "1715110",
    "end": "1721770"
  },
  {
    "text": "because they may also be empty so that's why I call them semi containers because",
    "start": "1721770",
    "end": "1726840"
  },
  {
    "text": "semi means half so they're sort of like half one half another thing so we can",
    "start": "1726840",
    "end": "1733139"
  },
  {
    "text": "start with something that most of you probably heard about either also no level of tea so if you have an AA level",
    "start": "1733139",
    "end": "1739679"
  },
  {
    "text": "of IND for example you saw an example of that previously we can sort of try to check whether it's null and if it's not",
    "start": "1739679",
    "end": "1746519"
  },
  {
    "text": "no we know that it's safe to access ID dot value and in this case we're trying to return a new customer with an integer",
    "start": "1746519",
    "end": "1752789"
  },
  {
    "text": "you know a customer ID inside of it so that's fine but if you want to return a",
    "start": "1752789",
    "end": "1757830"
  },
  {
    "text": "customer that means you know what you need to also deal with the case where a ID is null",
    "start": "1757830",
    "end": "1763229"
  },
  {
    "text": "there is an else branch and you need to deal with that else bound so what do you do I know so a lot of people don't",
    "start": "1763229",
    "end": "1770879"
  },
  {
    "text": "really know how what to do here it's not at all clear what you should do here so people throw exceptions and now if you",
    "start": "1770879",
    "end": "1777149"
  },
  {
    "text": "package this into a little milk a helper method that method will have the return type customer and if you then say it and",
    "start": "1777149",
    "end": "1784379"
  },
  {
    "text": "tell me I haven't written this now you can just go ahead and use that helper method I'll just so I'll just go this",
    "start": "1784379",
    "end": "1790109"
  },
  {
    "text": "gives me a customer called that and that compiles fine and I'm literally unaware that when I try to run the code it's",
    "start": "1790109",
    "end": "1796919"
  },
  {
    "text": "gonna throw exceptions left and right so this is sort of like if you create code write it in this style that's just going",
    "start": "1796919",
    "end": "1801929"
  },
  {
    "text": "to create a minefield that can I explode in your face at runtime and you have absolutely no idea unless you actually",
    "start": "1801929",
    "end": "1807899"
  },
  {
    "text": "try to you know read and become very intimate with the entire code base so it",
    "start": "1807899",
    "end": "1813210"
  },
  {
    "text": "doesn't scale and it doesn't fit our brains it's not a good way to structure code so it'd be nice if we could do",
    "start": "1813210",
    "end": "1820289"
  },
  {
    "text": "something else with you know based on this idea of a structure preserving map and we can actually turn novel of T into",
    "start": "1820289",
    "end": "1827399"
  },
  {
    "text": "a functor by implementing a little extension method again called select the",
    "start": "1827399",
    "end": "1833070"
  },
  {
    "text": "trends you know a novel of T into a novel of T result you will notice one constraint here T and T be salt has to",
    "start": "1833070",
    "end": "1840330"
  },
  {
    "text": "be struct because that's how no above T is defined this does enable you to write",
    "start": "1840330",
    "end": "1846029"
  },
  {
    "text": "something like this where you can say let I can translate you know novel of int into no level of",
    "start": "1846029",
    "end": "1851309"
  },
  {
    "text": "bool and that means in this case I could return that result and I don't have to",
    "start": "1851309",
    "end": "1857429"
  },
  {
    "text": "you know throw an exception in the case where things are no you know the cola needs in the corner",
    "start": "1857429",
    "end": "1864370"
  },
  {
    "text": "we'll have to figure out what to do you know in both of those cases so it's a well that's really neat this compose is",
    "start": "1864370",
    "end": "1871090"
  },
  {
    "text": "much better can I use that also for you know creating you know if I have that ID",
    "start": "1871090",
    "end": "1876370"
  },
  {
    "text": "and can I sort of translate that into a customer that'd be really nice because then I don't have to throw an exception",
    "start": "1876370",
    "end": "1881560"
  },
  {
    "text": "and this doesn't work unfortunately this doesn't compile because T rissoles has",
    "start": "1881560",
    "end": "1888100"
  },
  {
    "text": "to be a struct and customer is not a struct that's a class it's not a value type it's a reference type so that",
    "start": "1888100",
    "end": "1894040"
  },
  {
    "text": "doesn't work but it'd be really nice if we could do this because then we would have a composable way to deal with you",
    "start": "1894040",
    "end": "1900820"
  },
  {
    "text": "know things sometimes not working so what we can do instead is we can say",
    "start": "1900820",
    "end": "1906580"
  },
  {
    "text": "well we could we can't loosen the constrain inaudible of T but we can make",
    "start": "1906580",
    "end": "1911650"
  },
  {
    "text": "our own generically type container and we'll call it maybe of T because that's",
    "start": "1911650",
    "end": "1916720"
  },
  {
    "text": "what it's typically called it also sometimes it's known as option of T but the idea is the same so this is a",
    "start": "1916720",
    "end": "1923470"
  },
  {
    "text": "generic to type container and the idea is that it may or may not contain a value so the way that we construct",
    "start": "1923470",
    "end": "1931980"
  },
  {
    "text": "classes of objects of this class is that there's two constructor overload it's",
    "start": "1931980",
    "end": "1937450"
  },
  {
    "text": "one that doesn't take any arguments and it just sets the has item flag to false and then we have another constructor",
    "start": "1937450",
    "end": "1944080"
  },
  {
    "text": "overloading item as input and sets the flag to true and remembers the item for",
    "start": "1944080",
    "end": "1949990"
  },
  {
    "text": "later on so now we have maybe of T could represent the presence of a value but also the absence of a value okay so this",
    "start": "1949990",
    "end": "1957700"
  },
  {
    "text": "is a generic type container maybe of T can we make it a functor yes of course",
    "start": "1957700",
    "end": "1962710"
  },
  {
    "text": "because otherwise I wouldn't talk about it so we'll need to add a select method now it doesn't have to be an extension",
    "start": "1962710",
    "end": "1968230"
  },
  {
    "text": "method here it's just an instance method on maybe of T that returns maybe of T result so this is another way you can",
    "start": "1968230",
    "end": "1974380"
  },
  {
    "text": "implement that and basically you just check the flag and you say well if has item is true that means item exists we",
    "start": "1974380",
    "end": "1981850"
  },
  {
    "text": "now you know item is of the type T we have a selector that turns T into T resolved and then we'll just package",
    "start": "1981850",
    "end": "1988390"
  },
  {
    "text": "that in a maybe of T result so that's a populated maybe otherwise we'll just return an empty one",
    "start": "1988390",
    "end": "1994610"
  },
  {
    "text": "so this is a structure for serving math because it translates populated Maeby's into populated maybes it translates",
    "start": "1994610",
    "end": "2001690"
  },
  {
    "text": "empty babies into empty maybe so that preserves the structure of the after maybe idea and not only can we do this",
    "start": "2001690",
    "end": "2010149"
  },
  {
    "text": "with select we can also do it with select many the implementation looks a little bit different but it turns out that maybe is also a monad good so what",
    "start": "2010149",
    "end": "2019630"
  },
  {
    "text": "we can do with maybe something like this for example so we could say let's have a little wrapper around this idea of being",
    "start": "2019630",
    "end": "2025720"
  },
  {
    "text": "able to pass a string into an integer and you'd say why do we need the wrapper why can't we just do in to try pass as",
    "start": "2025720",
    "end": "2032649"
  },
  {
    "text": "you know it's basically in the in the framework already and I say well the problem here is that again it doesn't",
    "start": "2032649",
    "end": "2038380"
  },
  {
    "text": "compose very well and often when you do that if check there and check whether",
    "start": "2038380",
    "end": "2043960"
  },
  {
    "text": "try pass returns true you know what do you do in the case where it's returns false and this is again where people",
    "start": "2043960",
    "end": "2050260"
  },
  {
    "text": "often throw exceptions and you know the way that we can do it when we're a bit to return a maybe is that we don't have",
    "start": "2050260",
    "end": "2056648"
  },
  {
    "text": "to throw exceptions so we'll just say well if in try pass returns true will return to populate it maybe otherwise we",
    "start": "2056649",
    "end": "2062290"
  },
  {
    "text": "return an empty one and you can do some the same thing with you know trying to pass a string into a date it's just call",
    "start": "2062290",
    "end": "2068440"
  },
  {
    "text": "it date time but try pass instead of in to try pass and if you have something like this I'll show you a little example",
    "start": "2068440",
    "end": "2075820"
  },
  {
    "text": "here what you can do is you imagine that you have to write a little application",
    "start": "2075820",
    "end": "2081520"
  },
  {
    "text": "that enables people to rent a car and so you will ask people they'll ask your",
    "start": "2081520",
    "end": "2087368"
  },
  {
    "text": "potential users please input the date where you'd like to to rent the car so",
    "start": "2087369",
    "end": "2093368"
  },
  {
    "text": "it may have a little function they're called collect date and that just you know asks the question you know user types in something and then you have a",
    "start": "2093369",
    "end": "2101080"
  },
  {
    "text": "string that the user typed in and then you will try to pass that into a date time value and you get a maybe update",
    "start": "2101080",
    "end": "2107109"
  },
  {
    "text": "time and then you ask the user okay for how many days would you like to rent the car and that returns the string as well",
    "start": "2107109",
    "end": "2113589"
  },
  {
    "text": "and you can use your try pass in Toba method to turn that into a maybe event and you're probably going to ask some",
    "start": "2113589",
    "end": "2120099"
  },
  {
    "text": "other questions as well and once you're done asking all those questions what you really would like to do is to collect",
    "start": "2120099",
    "end": "2125680"
  },
  {
    "text": "all those all that information into a contract because a contract has some some functionality that enables you to",
    "start": "2125680",
    "end": "2131830"
  },
  {
    "text": "calculate a price and stuff like that so you can go and use query syntax and you can say well let's translate let's map",
    "start": "2131830",
    "end": "2138310"
  },
  {
    "text": "all of this into a maybe of contract so we'll say from D and MD D is now date",
    "start": "2138310",
    "end": "2143500"
  },
  {
    "text": "time if from I and M I is now an int so again we are using this Cartesian from from",
    "start": "2143500",
    "end": "2149200"
  },
  {
    "text": "from from that is enabled by having a monad and then finally you can select the contract based on all that",
    "start": "2149200",
    "end": "2154869"
  },
  {
    "text": "information so now you have a maybe of contract if all the maybes were populated you have a populated maybe of",
    "start": "2154869",
    "end": "2161740"
  },
  {
    "text": "contracts if one of them turns out not to work you have an empty contract so this is sort of like a pretty principle",
    "start": "2161740",
    "end": "2167500"
  },
  {
    "text": "and very easy way to do some input validation there are more sophisticated ways to do this as well but this is sort",
    "start": "2167500",
    "end": "2173410"
  },
  {
    "text": "of like a pretty easy and fast way of doing things now what you probably want",
    "start": "2173410",
    "end": "2179080"
  },
  {
    "text": "to do is to show a quote to a user and this is where things start to go wrong for for a lot of people because they say",
    "start": "2179080",
    "end": "2185530"
  },
  {
    "text": "well the contract class contains some information that enables me to calculate a price so I want to show a price to",
    "start": "2185530",
    "end": "2192970"
  },
  {
    "text": "user so I might want to do something like this and say well if MC has item I know that I can you know access that",
    "start": "2192970",
    "end": "2199900"
  },
  {
    "text": "item and that's a cut that's a contract and then I can call this calculate price or rather I think I can do this but it",
    "start": "2199900",
    "end": "2205540"
  },
  {
    "text": "turns out that you can't and this is by design I deliberately design the maybe of T class so that this is not possible",
    "start": "2205540",
    "end": "2211780"
  },
  {
    "text": "now these things exist but they're private and they're not exposed and it is by design that they're not exposed",
    "start": "2211780",
    "end": "2218020"
  },
  {
    "text": "because you're not meant to do stuff like this you know because this is unsafe this is brittle you know because",
    "start": "2218020",
    "end": "2225400"
  },
  {
    "text": "what happens if has item is false where does that leave something like you will Q now be initialized to be 0 and",
    "start": "2225400",
    "end": "2232900"
  },
  {
    "text": "we'll end up having 0 prices on you know on your quotes in your quotes for the",
    "start": "2232900",
    "end": "2238690"
  },
  {
    "text": "user that's that doesn't sound like a good idea so you're not supposed to do this so let's reset the the code and see",
    "start": "2238690",
    "end": "2247240"
  },
  {
    "text": "what else can we do well maybe supports a structure preserving map so if we stay",
    "start": "2247240",
    "end": "2253119"
  },
  {
    "text": "within the context of having maybes we can actually just translate the contract into a quote into a decimal so we can do",
    "start": "2253119",
    "end": "2260170"
  },
  {
    "text": "something like this but we can just call the contracts calculate price inside the",
    "start": "2260170",
    "end": "2265250"
  },
  {
    "text": "context of maybe and the result is a maybe of decimal so I call that MQ because it's maybe quote and this is",
    "start": "2265250",
    "end": "2272180"
  },
  {
    "text": "safe this is not kind of throw exceptions there are no reason to write all that if-else code in order to do",
    "start": "2272180",
    "end": "2277550"
  },
  {
    "text": "this this is just you know you can just do C you can always safe to do this so",
    "start": "2277550",
    "end": "2284210"
  },
  {
    "text": "this sort of gives you an illustration of the answer to the question how do you get the value out of my monad well you",
    "start": "2284210",
    "end": "2289940"
  },
  {
    "text": "don't you inject the desired behavior into the monad and that's what we did here I took that you know calculate",
    "start": "2289940",
    "end": "2295310"
  },
  {
    "text": "price method and I just said well whatever happens inside that maybe context inside that container this just",
    "start": "2295310",
    "end": "2300920"
  },
  {
    "text": "needs to happen there huh and then all is good and and that just means now I",
    "start": "2300920",
    "end": "2306530"
  },
  {
    "text": "have a maybe I've decimal and it's safe and then you go yeah well okay but",
    "start": "2306530",
    "end": "2311570"
  },
  {
    "text": "ultimately I need to produce a result because I need to show that quote to the user so how to do that well let's go",
    "start": "2311570",
    "end": "2316850"
  },
  {
    "text": "back to collections for a little while here's a series of numbers sometimes you also have the same problem with",
    "start": "2316850",
    "end": "2323720"
  },
  {
    "text": "collections you need to produce a result so what you can do is for example with numbers you could add them together and",
    "start": "2323720",
    "end": "2330110"
  },
  {
    "text": "there's an extension method for that and now we just have the sum of all those numbers but sometimes maybe you want to do something else maybe you want to",
    "start": "2330110",
    "end": "2336380"
  },
  {
    "text": "multiply the numbers together instead of at them and there's no special extension method for that so what you can do",
    "start": "2336380",
    "end": "2342110"
  },
  {
    "text": "instead is you can use the general purpose method called aggregate and aggregate it enables you to give it any",
    "start": "2342110",
    "end": "2348440"
  },
  {
    "text": "sort of lambda expression that just tells it how to you know make it turn two numbers into one and in this case",
    "start": "2348440",
    "end": "2354830"
  },
  {
    "text": "we're just saying x times y so we're just you know multiply the numbers together and this works as long as the",
    "start": "2354830",
    "end": "2360920"
  },
  {
    "text": "array has values which it does in this case but if the array is empty that would fail unless we also give it some",
    "start": "2360920",
    "end": "2367700"
  },
  {
    "text": "sort of the fallback value and this is called the seed so in this case I'm using an overload to aggregate that actually says well start with one and",
    "start": "2367700",
    "end": "2374030"
  },
  {
    "text": "then add all them multiply all the numbers together because when you multiply something with one it just",
    "start": "2374030",
    "end": "2379220"
  },
  {
    "text": "stays whatever the other number is so that's the safe thing to do but that also means now I can return one if the",
    "start": "2379220",
    "end": "2384590"
  },
  {
    "text": "array was empty which it's it's not here I know but if it was now boringly this",
    "start": "2384590",
    "end": "2390710"
  },
  {
    "text": "just returns zero because there is a zero inside Rea's are not very interesting but the",
    "start": "2390710",
    "end": "2396619"
  },
  {
    "text": "concept of being able to aggregate you know potentially many values or even",
    "start": "2396619",
    "end": "2401750"
  },
  {
    "text": "zero values into a single value we can translate that concept to maybe also so",
    "start": "2401750",
    "end": "2409220"
  },
  {
    "text": "I'm going to call it match instead of just calling it aggregate for various reasons but the idea is that this is",
    "start": "2409220",
    "end": "2414770"
  },
  {
    "text": "again an instance method on maybe of tea and you can say well if the has item flag is said I know that I can access",
    "start": "2414770",
    "end": "2421069"
  },
  {
    "text": "item this is a value of the type T and I have a function called just and don't don't ask me what it why it's called",
    "start": "2421069",
    "end": "2427309"
  },
  {
    "text": "that it's just that that's the name we usually use we have a function called just that can translate a tea into a tea resolved value and you'll notice that's",
    "start": "2427309",
    "end": "2433460"
  },
  {
    "text": "what we need to return now if has item based false item is not available and we",
    "start": "2433460",
    "end": "2440359"
  },
  {
    "text": "still need to return the tea result value but then we have the fallback net value here called nothing but sort of corresponding to that seed you saw",
    "start": "2440359",
    "end": "2446750"
  },
  {
    "text": "before so that means we can always aggregate that or we can always collapse any maybe object into a single value",
    "start": "2446750",
    "end": "2453650"
  },
  {
    "text": "even though it might we don't know whether it's populated or empty right so",
    "start": "2453650",
    "end": "2460130"
  },
  {
    "text": "we can go back to now to try to answer the question how do I combine dependency injection with async and a weight without leaky abstraction that's that is",
    "start": "2460130",
    "end": "2468220"
  },
  {
    "text": "so where we left is that we said well it looks like we have to do a sync all the",
    "start": "2468220",
    "end": "2473839"
  },
  {
    "text": "way and it turns out that there may be another way so what we need to do first",
    "start": "2473839",
    "end": "2480470"
  },
  {
    "text": "it's a little maneuver that we often use when we do functional programming and that is we say we'll have to move our",
    "start": "2480470",
    "end": "2485630"
  },
  {
    "text": "impure operations to the boundary of the system so the idea here is that the core of the system is where our business",
    "start": "2485630",
    "end": "2491450"
  },
  {
    "text": "logic is and at the boundary of the system is where interaction with the real world happens so this is a type of",
    "start": "2491450",
    "end": "2497329"
  },
  {
    "text": "architecture that resembles ports and adapters quite a bit this is a well-known object oriented architecture",
    "start": "2497329",
    "end": "2504099"
  },
  {
    "text": "so what does it mean for an operation to be impure well we could say what's a pure operation what's a pure function a",
    "start": "2504099",
    "end": "2510530"
  },
  {
    "text": "pure function must may have two qualities it must be deterministic and it must have no side effects and we have",
    "start": "2510530",
    "end": "2517250"
  },
  {
    "text": "two examples of things that violate one of the other of those rules now read reservations for example goes and reads",
    "start": "2517250",
    "end": "2523069"
  },
  {
    "text": "from a database this is what we would term not deterministic because the definition of determinism is that if",
    "start": "2523069",
    "end": "2531329"
  },
  {
    "text": "I give you the same input I would always expect to get the same output back for any given input it",
    "start": "2531329",
    "end": "2536880"
  },
  {
    "text": "should always return the same output and that's not the case when you go and query the database if you go and query the database to say give me give me all",
    "start": "2536880",
    "end": "2543150"
  },
  {
    "text": "the reservations for next Friday well you'll get some reservations and then if you go and do it the next day still the",
    "start": "2543150",
    "end": "2550109"
  },
  {
    "text": "same input date now you make it it's different set of reservations so that's output so that's not deterministic and",
    "start": "2550109",
    "end": "2555779"
  },
  {
    "text": "yet then you'd say well but it's completely determined by the state of the database yes but we do not consider",
    "start": "2555779",
    "end": "2561150"
  },
  {
    "text": "the state of the database to be part of the function so from the perspective of looking at the function it is",
    "start": "2561150",
    "end": "2566249"
  },
  {
    "text": "non-deterministic so we want to move this to the boundary of the system another example of an impure operation",
    "start": "2566249",
    "end": "2573449"
  },
  {
    "text": "that we have is repository to create because this is going to create a row in the database and that's a side-effect",
    "start": "2573449",
    "end": "2579359"
  },
  {
    "text": "and functions are not supposed to have side effects so both of these we want to move and I don't want to get rid of them",
    "start": "2579359",
    "end": "2586079"
  },
  {
    "text": "I just want them to take place somewhere else I want to move them to the boundary of the system you know the post method",
    "start": "2586079",
    "end": "2592199"
  },
  {
    "text": "where we deal with the incoming JSON document and we return an HTTP response and that's where that sort of stuff",
    "start": "2592199",
    "end": "2598949"
  },
  {
    "text": "needs to happen the first one is the easiest one now you'll notice that we",
    "start": "2598949",
    "end": "2604130"
  },
  {
    "text": "unconditionally call this read reservations method here so you say well okay so why don't why does the try",
    "start": "2604130",
    "end": "2610859"
  },
  {
    "text": "accept method need to do this could we just make it a precondition for calling the method to say well someone else",
    "start": "2610859",
    "end": "2617609"
  },
  {
    "text": "needs to do this be this work upfront and then you can call the try accept method so how do you do that well it's",
    "start": "2617609",
    "end": "2623999"
  },
  {
    "text": "just if you want to make it a precondition you just make it a method argument so you just say well just give",
    "start": "2623999",
    "end": "2629189"
  },
  {
    "text": "me the reservations and I'll give you an answer now this is pretty straightforward unfortunately things get",
    "start": "2629189",
    "end": "2638099"
  },
  {
    "text": "worse and sometimes they have to get worse before they get better now the thing that gets worse is that in order",
    "start": "2638099",
    "end": "2643859"
  },
  {
    "text": "for us to compile we have to change that I met Rudy interface and then you'd say",
    "start": "2643859",
    "end": "2649199"
  },
  {
    "text": "well okay if if there ever was a leaky abstraction this must be it because now",
    "start": "2649199",
    "end": "2654479"
  },
  {
    "text": "you definitely allowed a particular implementation to leak through into the",
    "start": "2654479",
    "end": "2661019"
  },
  {
    "text": "action in itself yeah I said okay so you complain about the task but this is much worse and I completely agree this is",
    "start": "2661019",
    "end": "2667259"
  },
  {
    "text": "much worse now fortunately what I'm doing here is a series of refactoring steps and I'm not done but right now in",
    "start": "2667259",
    "end": "2674099"
  },
  {
    "text": "this step I have made something worse I completely admit that now just trust",
    "start": "2674099",
    "end": "2680189"
  },
  {
    "text": "me when I say we'll have to change this interface several times before we're done but in the end it's gonna be fine",
    "start": "2680189",
    "end": "2687479"
  },
  {
    "text": "so just trust me on that all right when we change the interface though we'll",
    "start": "2687479",
    "end": "2692759"
  },
  {
    "text": "need to also change the way that that post method the boundary of the system how that interacts with the maitre d so",
    "start": "2692759",
    "end": "2699089"
  },
  {
    "text": "we're using dependency injection and we have that injected Maitre D' object already we could also just take a",
    "start": "2699089",
    "end": "2704880"
  },
  {
    "text": "dependency on the repository here because well why not you know there's no rule that says that you can't have a",
    "start": "2704880",
    "end": "2710369"
  },
  {
    "text": "dependency appearing in multiple places so if we have a dependency on the repository we can call repository that",
    "start": "2710369",
    "end": "2717239"
  },
  {
    "text": "read reservations and now we have the reservations we can call Maitre D' to try accept and the rest of the code is the same as before you'll notice that we",
    "start": "2717239",
    "end": "2725159"
  },
  {
    "text": "still have this thing here where we're doing a check on whether or not ID is null and we are getting the value out of",
    "start": "2725159",
    "end": "2731609"
  },
  {
    "text": "the monad actually they're going ID dot value and this is sort of a style of",
    "start": "2731609",
    "end": "2736799"
  },
  {
    "text": "coding that we're trying to get rid of so we'll look at that in a little while all right so so this takes care of one",
    "start": "2736799",
    "end": "2744119"
  },
  {
    "text": "of the impure operations we've now moved that to the boundary of the application now what about repository create now",
    "start": "2744119",
    "end": "2750269"
  },
  {
    "text": "this one is a little bit harder because it doesn't always happen you know it",
    "start": "2750269",
    "end": "2755399"
  },
  {
    "text": "only happens in certain cases you will notice that there is this little if statement up there that may return null",
    "start": "2755399",
    "end": "2761249"
  },
  {
    "text": "in which case repository that create never gets cold so what we need to do is somehow if we",
    "start": "2761249",
    "end": "2769380"
  },
  {
    "text": "want to move the repository to create method to the caller they are making the caller's responsibility to make sure",
    "start": "2769380",
    "end": "2775859"
  },
  {
    "text": "that this happens we need to make sure that the caller understands that this is",
    "start": "2775859",
    "end": "2781049"
  },
  {
    "text": "what it needs to do I'm talking about the calling code the calling code of the developer who's writing the calling code",
    "start": "2781049",
    "end": "2787349"
  },
  {
    "text": "needs to understand that this is the sort of interaction that is being expected that you sort of need to call",
    "start": "2787349",
    "end": "2793229"
  },
  {
    "text": "repository create if we just to accept the reservation so how do we communicate that decision to the caller",
    "start": "2793229",
    "end": "2800010"
  },
  {
    "text": "well how do we communicate a decision in any way well what we did before was that we returned a novel image and you",
    "start": "2800010",
    "end": "2806250"
  },
  {
    "text": "remember that the idea here was they say well if you have a reservation ID you have a reservation if you get null you",
    "start": "2806250",
    "end": "2812220"
  },
  {
    "text": "don't have a reservation so this is a way we can communicate a decision what",
    "start": "2812220",
    "end": "2817380"
  },
  {
    "text": "I'd like to do is instead of return a inaudible int you know if I move repository to create that's the method",
    "start": "2817380",
    "end": "2822900"
  },
  {
    "text": "that returned that creates an integer if I move that report that method to the boundary of the system I no longer have",
    "start": "2822900",
    "end": "2829140"
  },
  {
    "text": "an int to return so what should I return instead well I'd like to return something like an inaudible of",
    "start": "2829140",
    "end": "2834360"
  },
  {
    "text": "reservation instead and but unfortunately I can't do that because this we have this problem with nullable",
    "start": "2834360",
    "end": "2840510"
  },
  {
    "text": "of tea that it it's constrained to only be struts so I can't do an audible of",
    "start": "2840510",
    "end": "2847170"
  },
  {
    "text": "reservation because that's a class so what I'd like to do is to refactor to a",
    "start": "2847170",
    "end": "2853470"
  },
  {
    "text": "maybe of tea and I'll do this in steps so I'll just start by just you know changing nullable of into maybe event",
    "start": "2853470",
    "end": "2859590"
  },
  {
    "text": "and then we'll do the other thing later on so if we make this change if you look",
    "start": "2859590",
    "end": "2865410"
  },
  {
    "text": "at the pay attention to the top line there and the return value task of knowledge into I'll now change it to",
    "start": "2865410",
    "end": "2871170"
  },
  {
    "text": "maybe event and the rest of the curve basically remains the same the new things is that instead of returning null",
    "start": "2871170",
    "end": "2877140"
  },
  {
    "text": "I'm returning an empty maybe and instead of returning an ID instead of returning",
    "start": "2877140",
    "end": "2883230"
  },
  {
    "text": "an integer I'm now returning a populated maybe event but apart from that this is basically the same now we still need to",
    "start": "2883230",
    "end": "2889800"
  },
  {
    "text": "go and change the maitre d it'll be good it's not right now but it'll be it'll be good once we're done",
    "start": "2889800",
    "end": "2895500"
  },
  {
    "text": "and we also need to change the post method so you'll notice right what what happened now is that instead of getting",
    "start": "2895500",
    "end": "2901740"
  },
  {
    "text": "a knowable int that we could check for null now we have this maybe of int and I've",
    "start": "2901740",
    "end": "2908070"
  },
  {
    "text": "deliberately designed it so that we cannot check for null here we can't write this if-else expressions that that",
    "start": "2908070",
    "end": "2914760"
  },
  {
    "text": "people seem to be so fond of but really explodes when you least expect them to we want to have something that's",
    "start": "2914760",
    "end": "2920730"
  },
  {
    "text": "actually safer so this safer way to do this is to say well okay you can't check for null but you can call that match",
    "start": "2920730",
    "end": "2927290"
  },
  {
    "text": "and that's why you know that aggregation visit and that's why I am I added that so if we use named arguments I can say",
    "start": "2927290",
    "end": "2934310"
  },
  {
    "text": "the for the nothing argument I'll return internal server error so 500 internal server and in the case where",
    "start": "2934310",
    "end": "2941990"
  },
  {
    "text": "it's populated it's called just it needs a little function so I'll just write a little lambda expression that receives",
    "start": "2941990",
    "end": "2948380"
  },
  {
    "text": "as input the ID and just returns 200 okay with that ID so I D when if I get",
    "start": "2948380",
    "end": "2954590"
  },
  {
    "text": "it if that just function runs then ID is an integer and I don't have to check for anything and both internal server error",
    "start": "2954590",
    "end": "2961910"
  },
  {
    "text": "and okay return an action results at this point I'm good alright we're now in",
    "start": "2961910",
    "end": "2970670"
  },
  {
    "text": "a position where we can move that method call to the boundary of the system so when if I do that if I take it away from",
    "start": "2970670",
    "end": "2978140"
  },
  {
    "text": "the try/except method here I no longer have an integer to return so I'll need to return a maybe of",
    "start": "2978140",
    "end": "2984860"
  },
  {
    "text": "reservation instead so I'll do that so you'll notice again if I decide not not to accept the reservation I'll",
    "start": "2984860",
    "end": "2990650"
  },
  {
    "text": "return an empty maybe a reservation if I decide to accept the reservation I'll return a populated one I'll have to",
    "start": "2990650",
    "end": "2997010"
  },
  {
    "text": "change a Maitre D' but if I do that what I now have is a maybe of reservation now",
    "start": "2997010",
    "end": "3003580"
  },
  {
    "text": "according to my contract with all the HTTP clients in the case of success I",
    "start": "3003580",
    "end": "3008880"
  },
  {
    "text": "promised the HTTP clients to return and 200 okay that contains an integer the",
    "start": "3008880",
    "end": "3015010"
  },
  {
    "text": "reservation ID now right now I don't have a reservation ID so how well should I get that from well we know that maybe",
    "start": "3015010",
    "end": "3022180"
  },
  {
    "text": "a of T is a functor so we can make a structure for serving map and we can say well we can map the reservation if it's",
    "start": "3022180",
    "end": "3029740"
  },
  {
    "text": "there to an integer by calling repository create with the reservation are so again this is safe to do because",
    "start": "3029740",
    "end": "3037750"
  },
  {
    "text": "the that lambda expression is only going to run if it's actually populated so that our will always be there so now I",
    "start": "3037750",
    "end": "3044680"
  },
  {
    "text": "have instead of having a maybe of reservation I have a maybe of int Wow actually I have a maybe of a task of an",
    "start": "3044680",
    "end": "3051040"
  },
  {
    "text": "int so that makes things a little bit more complicated but we already learned the task of T is a monad we learned that",
    "start": "3051040",
    "end": "3056470"
  },
  {
    "text": "may be of T is a monad it turns out that this stack of monad is also a monad so all we've learned",
    "start": "3056470",
    "end": "3062890"
  },
  {
    "text": "about what we can do with monads still hold right now it does make the rest of",
    "start": "3062890",
    "end": "3068950"
  },
  {
    "text": "the syntax a little bit awkward but again this is just an interim result it'll be better in a little while but",
    "start": "3068950",
    "end": "3075550"
  },
  {
    "text": "right now this match implementation looks a little bit clunky well it'll be beautiful once we're done",
    "start": "3075550",
    "end": "3081130"
  },
  {
    "text": "I promise if we go back now and look at",
    "start": "3081130",
    "end": "3086170"
  },
  {
    "text": "the try except implementation though it turns out that we have a compiler warning it says this async method lacks",
    "start": "3086170",
    "end": "3092230"
  },
  {
    "text": "a weight of raters and yes it does you know it says public async of it then",
    "start": "3092230",
    "end": "3098110"
  },
  {
    "text": "there's nothing that says a weight anywhere so why does it need to be asynchronous well it doesn't so let's",
    "start": "3098110",
    "end": "3103600"
  },
  {
    "text": "not make it anything so this is what's about bothered me all along you know that my domain logic had to be",
    "start": "3103600",
    "end": "3109330"
  },
  {
    "text": "asynchronous now it doesn't have to be asynchronous anymore so this is just much better so if I make that change I",
    "start": "3109330",
    "end": "3117130"
  },
  {
    "text": "again have to change the maitre d interface but if I make that change there's just one thing I need to change here you know if this is the picture",
    "start": "3117130",
    "end": "3123850"
  },
  {
    "text": "from before where I did you know awake Maitre D' to try accept and if I make Chagas try accept synchronous I just",
    "start": "3123850",
    "end": "3130420"
  },
  {
    "text": "removed the awake keyword so maybe you weren't where maybe you didn't know where to look so we'll just do it again",
    "start": "3130420",
    "end": "3135430"
  },
  {
    "text": "you know this was before it said a wait maitre d to try a try except and now we just remove the wait keyword it's a",
    "start": "3135430",
    "end": "3141430"
  },
  {
    "text": "pretty pretty straightforward that's not a lot of a change we can go back and look at the implementation details of",
    "start": "3141430",
    "end": "3147880"
  },
  {
    "text": "the maitre d object again and we'll notice another thing that repository there it's no longer being used we don't",
    "start": "3147880",
    "end": "3154870"
  },
  {
    "text": "need that dependency so let's get rid of that dependency so what we have now is",
    "start": "3154870",
    "end": "3160120"
  },
  {
    "text": "pretty close to what we would call a pure function it's not quite because that is a accepted flag it's set to true",
    "start": "3160120",
    "end": "3167170"
  },
  {
    "text": "so there's a little bit of state mutation going on still but the important part is so this sort of like",
    "start": "3167170",
    "end": "3172240"
  },
  {
    "text": "pure in in quotes but what goes what's important here is that this method is",
    "start": "3172240",
    "end": "3177760"
  },
  {
    "text": "now entirely deterministic what happens in this method is entirely determined by",
    "start": "3177760",
    "end": "3182980"
  },
  {
    "text": "the input arguments to the to the method itself so that means I can control exactly what happens by making sure that",
    "start": "3182980",
    "end": "3189190"
  },
  {
    "text": "it gets the appropriate arguments so if we go back and look at the",
    "start": "3189190",
    "end": "3194830"
  },
  {
    "text": "boundary of the application we'd say well okay why do we even have that Maitre D' dependency there on the top",
    "start": "3194830",
    "end": "3201470"
  },
  {
    "text": "and then you know someone else might come and say well well we still need that because we do unit testing and we",
    "start": "3201470",
    "end": "3208970"
  },
  {
    "text": "need to somehow be able to stop it out and say well we need to control how the Maitre D' behaves and we can create a",
    "start": "3208970",
    "end": "3214790"
  },
  {
    "text": "stub out of that and that enables us to control how it behaves I noticed and now I say well it is now",
    "start": "3214790",
    "end": "3220190"
  },
  {
    "text": "deterministic that means you can control how it behaves without creating a stub out of it you can control how it behaves",
    "start": "3220190",
    "end": "3227150"
  },
  {
    "text": "by making sure that it gets the appropriate input values so there's no reason to have that as a dependency",
    "start": "3227150",
    "end": "3233060"
  },
  {
    "text": "anymore we can just new up the Maitre D' object and just be done with it so now",
    "start": "3233060",
    "end": "3238460"
  },
  {
    "text": "we know no longer have the dependency on that Maitre D' interface that means we don't need it anymore",
    "start": "3238460",
    "end": "3245080"
  },
  {
    "text": "so this is why it all turned out to be well in the end because you know there's",
    "start": "3245080",
    "end": "3250490"
  },
  {
    "text": "no leaky abstraction because the interface is gone now the domain abstraction is still embedded in that",
    "start": "3250490",
    "end": "3256090"
  },
  {
    "text": "concrete class so we still have some domain modeling going on but it's just we don't need to have an interface the",
    "start": "3256090",
    "end": "3263420"
  },
  {
    "text": "object is fine an object is also an abstraction you can just look at the static you know public API of it and say",
    "start": "3263420",
    "end": "3270020"
  },
  {
    "text": "well that's how it's supposed to work and you need to know the details of it",
    "start": "3270020",
    "end": "3274900"
  },
  {
    "text": "so we into a little bit of cleanup here because it doesn't look that pretty at",
    "start": "3275080",
    "end": "3280520"
  },
  {
    "text": "the moment so we can move things around and we all might arrive at something like this now exactly how we do that I",
    "start": "3280520",
    "end": "3286670"
  },
  {
    "text": "don't have time to cover but I'll be publishing some some articles where you can go through all of this if you're",
    "start": "3286670",
    "end": "3292070"
  },
  {
    "text": "interested in how that actually works but what we'll notice now that we have some sort of a pipeline of operations",
    "start": "3292070",
    "end": "3298130"
  },
  {
    "text": "going on we'll start by calling repository table read reservations and then we go select and then we go select",
    "start": "3298130",
    "end": "3303800"
  },
  {
    "text": "many and then we go match on that you know towards the end so you say there's clearly a monad going on here because",
    "start": "3303800",
    "end": "3309980"
  },
  {
    "text": "otherwise we wouldn't be able to call select many because that's what you know sort of this sign of a monad so which",
    "start": "3309980",
    "end": "3316340"
  },
  {
    "text": "monad is it well it's the task of T monad or the asynchronous monad so",
    "start": "3316340",
    "end": "3322010"
  },
  {
    "text": "everything here is asynchronous apart from the main logic what I've done is I've",
    "start": "3322010",
    "end": "3327740"
  },
  {
    "text": "injected in a Maitre D' to try accept into this asynchronous context but that",
    "start": "3327740",
    "end": "3333650"
  },
  {
    "text": "object is entirely unaware of its context it is happily thinking that it's",
    "start": "3333650",
    "end": "3340160"
  },
  {
    "text": "doing synchronous work even though it's actually not but from its perspective it's just running synchronously but you",
    "start": "3340160",
    "end": "3346580"
  },
  {
    "text": "know in the context it's actually turns out that it is running asynchronously so everything that needs to be asynchronous",
    "start": "3346580",
    "end": "3351910"
  },
  {
    "text": "is still synchronous we call repository dot read reservations you know that",
    "start": "3351910",
    "end": "3357380"
  },
  {
    "text": "asynchronously Reif reads from the database and then we do a little bit of synchronous business logic because it",
    "start": "3357380",
    "end": "3363320"
  },
  {
    "text": "you know this is just a decision that needs to be made and it doesn't need to be long-running and then after that we",
    "start": "3363320",
    "end": "3369530"
  },
  {
    "text": "call repository dot create and that asynchronously go and communicates the database increase our role in the",
    "start": "3369530",
    "end": "3374870"
  },
  {
    "text": "database and then we return an HTTP response and all of that runs asynchronously as well because you can",
    "start": "3374870",
    "end": "3380840"
  },
  {
    "text": "see it still returns a task of I action result so everything that needs to be asynchronous is asynchronous all the",
    "start": "3380840",
    "end": "3387230"
  },
  {
    "text": "stuff that didn't have to be asynchronous because that would be a leaky abstraction it's not so now we",
    "start": "3387230",
    "end": "3393650"
  },
  {
    "text": "have the best of both worlds so we can sort of conclude that the way we can combine Ti with async and a weight",
    "start": "3393650",
    "end": "3399200"
  },
  {
    "text": "without leaky abstractions is to inject the desired behavior into the async monad or the task monad if you prefer",
    "start": "3399200",
    "end": "3405920"
  },
  {
    "text": "that and we know that because we already knew the answer to that general question",
    "start": "3405920",
    "end": "3411020"
  },
  {
    "text": "there how do I get the value out of my monad well you don't even take the desired behavior so what we could call this is we could call it behavior",
    "start": "3411020",
    "end": "3417080"
  },
  {
    "text": "injection instead of dependency injection so if you thought that you",
    "start": "3417080",
    "end": "3425000"
  },
  {
    "text": "would like to learn more about this I have tons of articles unblocked declare that DK that walks you through what a",
    "start": "3425000",
    "end": "3431030"
  },
  {
    "text": "functor is all the code that I've shown you here today I have a couple of articles written that will walk you",
    "start": "3431030",
    "end": "3437690"
  },
  {
    "text": "through this entire code example and that the code itself will be on github as well these articles are not published",
    "start": "3437690",
    "end": "3445250"
  },
  {
    "text": "yet but I have written them so it's not not an entirely empty promise to say I will soon publish them so if you want to",
    "start": "3445250",
    "end": "3451940"
  },
  {
    "text": "keep abreast of that you can subscribe to the blog or you can follow me on Twitter and I'll you know notify you",
    "start": "3451940",
    "end": "3458390"
  },
  {
    "text": "when these things are out and with that I'll conclude the talk I will not take any questions because I only have a",
    "start": "3458390",
    "end": "3464569"
  },
  {
    "text": "couple of minutes left but I'm happy to talk to you so you can come and talk to me afterwards so you can you know catch",
    "start": "3464569",
    "end": "3470930"
  },
  {
    "text": "me outside and I'll be happy to talk to you but otherwise I'll let you go two minutes before the other session stops",
    "start": "3470930",
    "end": "3477980"
  },
  {
    "text": "and you can you know go wherever you need to go well thank you so much for coming and listening to me [Applause]",
    "start": "3477980",
    "end": "3488030"
  }
]