[
  {
    "text": "okay so I think that's time hello my name is Michael Newton you can see up",
    "start": "4020",
    "end": "10120"
  },
  {
    "text": "there I'm kind of ma V double n absolutely everywhere on the internet that I exist there's a story behind that",
    "start": "10120",
    "end": "16270"
  },
  {
    "text": "but I'm not going to tell it now because that's not why you're here and why you're here is to break your code",
    "start": "16270",
    "end": "21400"
  },
  {
    "text": "because that's fun basically so I'm here",
    "start": "21400",
    "end": "27250"
  },
  {
    "text": "to talk about something called property based testing it's not a new concept it's been around for quite a long time",
    "start": "27250",
    "end": "32730"
  },
  {
    "text": "it's not even a new thing in net it's been around for pretty long time in dotnet but because it kind of has its",
    "start": "32730",
    "end": "41920"
  },
  {
    "text": "background in sort of Haskell and Erlang and some of the functional programming languages it's not something that's really kind of broken into the",
    "start": "41920",
    "end": "48520"
  },
  {
    "text": "mainstream dotnet consciousness so I wanted to kind of give you a run-through of what it is and how it works and how",
    "start": "48520",
    "end": "54489"
  },
  {
    "text": "you can use it yourself for your own code and the basic idea is is very",
    "start": "54489",
    "end": "62530"
  },
  {
    "text": "simple with property based testing rather than picking examples that are",
    "start": "62530",
    "end": "67660"
  },
  {
    "text": "true as you would in normal unit tests what you're trying to do is you're trying to identify properties about your",
    "start": "67660",
    "end": "72970"
  },
  {
    "text": "code which are tree so kind of the the archetypal example of this which",
    "start": "72970",
    "end": "81610"
  },
  {
    "text": "everyone uses in their getting started guide and even the dotnet library which I'm going to show you uses this example",
    "start": "81610",
    "end": "86619"
  },
  {
    "text": "in their getting started guide is if you want to build a reversing or a sorting",
    "start": "86619",
    "end": "93729"
  },
  {
    "text": "algorithm then properties based testing is really easy because other people have already written reversing and sorting",
    "start": "93729",
    "end": "100270"
  },
  {
    "text": "algorithms and you kind of have this property you know about it which is you",
    "start": "100270",
    "end": "105880"
  },
  {
    "text": "know something along the lines of I still want to sort things correctly I just want to do it faster for my",
    "start": "105880",
    "end": "111759"
  },
  {
    "text": "scenario so what you can do a property based testing is you can say I want my",
    "start": "111759",
    "end": "117159"
  },
  {
    "text": "new sorting method to always produce the same result as this old slow sorting",
    "start": "117159",
    "end": "122170"
  },
  {
    "text": "method and the property based testing framework that you're using will then",
    "start": "122170",
    "end": "127509"
  },
  {
    "text": "try and kind of find examples where that isn't true so for example you might find",
    "start": "127509",
    "end": "133510"
  },
  {
    "text": "out that your sorting algorithm is not stable as an if have multiple copies of the same thing in your list or things with the same key",
    "start": "133510",
    "end": "140610"
  },
  {
    "text": "in your list it might not keep them in same order and you know things like that and the even simpler example is if you",
    "start": "140610",
    "end": "149700"
  },
  {
    "text": "reverse a list and then you reversed again you have what's called an invariant property you have a property which is should be always true for any",
    "start": "149700",
    "end": "156660"
  },
  {
    "text": "input and property based testing frameworks are great with that because you can say if I reverse my list and I",
    "start": "156660",
    "end": "162480"
  },
  {
    "text": "reverse it again I should get a list which has the same items in the same order as the list that I started with",
    "start": "162480",
    "end": "167870"
  },
  {
    "text": "and so you can write a nice little property which says I always want this to be true and off you go now this is",
    "start": "167870",
    "end": "177090"
  },
  {
    "text": "great and if you're like me the first time you come across this you go that's a really powerful concept except the I'm",
    "start": "177090",
    "end": "184410"
  },
  {
    "text": "pausing badly defined data from a mainframe at the moment and I don't have any invariant properties is this",
    "start": "184410",
    "end": "191550"
  },
  {
    "text": "actually any use to me and the other thing you kind of start hitting quite",
    "start": "191550",
    "end": "197400"
  },
  {
    "text": "quickly is that what in strongly typed languages like sort of the.net languages",
    "start": "197400",
    "end": "203580"
  },
  {
    "text": "what the property based testing frameworks tend to try and do is they'll take the method that you're giving it",
    "start": "203580",
    "end": "209610"
  },
  {
    "text": "and they'll have a look at the type signature and they have a look at the input parameters and they will try and generate inputs for those functions",
    "start": "209610",
    "end": "216720"
  },
  {
    "text": "based on the types of the input parameters which is great and all except",
    "start": "216720",
    "end": "222240"
  },
  {
    "text": "that we don't have such a strong type system that our functions will always",
    "start": "222240",
    "end": "228480"
  },
  {
    "text": "accept any valid value of the types that we've said so if you are say parsing",
    "start": "228480",
    "end": "234750"
  },
  {
    "text": "something there is probably a subset of the type string which are actually valid",
    "start": "234750",
    "end": "239970"
  },
  {
    "text": "things to parse whereas all of the other strings you're not really expecting to do anything meaningful with you know you",
    "start": "239970",
    "end": "245760"
  },
  {
    "text": "might throw well you might give an error message for you might might do something else so it's a bit hard initially to",
    "start": "245760",
    "end": "253500"
  },
  {
    "text": "kind of get an idea of where to go with these so I've kind of taken two different approaches and I was",
    "start": "253500",
    "end": "259350"
  },
  {
    "text": "originally give a quite different talk that I've given before and I've decided to swap things around a bit so I will",
    "start": "259350",
    "end": "265320"
  },
  {
    "text": "give a link at the end to a talk I did I think three years ago now where I go off and I have",
    "start": "265320",
    "end": "270720"
  },
  {
    "text": "look at a whole load of different examples of kind of real business cases where I've used property based testing",
    "start": "270720",
    "end": "277770"
  },
  {
    "text": "to test things that you tend to think of a more sort of day-to-day business code rather than things like sorting lists or",
    "start": "277770",
    "end": "283620"
  },
  {
    "text": "maths algorithms or things like that whereas today I just wanted to take one",
    "start": "283620",
    "end": "289560"
  },
  {
    "text": "example and go into a bit more depth about how we can sort of build things up",
    "start": "289560",
    "end": "295160"
  },
  {
    "text": "from really simple properties that you can just drop into your code even if you know very little about property based",
    "start": "295160",
    "end": "301140"
  },
  {
    "text": "testing and kind of eliminate whole classes of unit tests so you don't have to bother writing them and also looking",
    "start": "301140",
    "end": "308280"
  },
  {
    "text": "at some of the complexities when you actually start wanting to test bits of business logic where you're wanting it",
    "start": "308280",
    "end": "314820"
  },
  {
    "text": "to sort of generate inputs for you but you also don't want to duplicate the logic from the thing you're testing in",
    "start": "314820",
    "end": "321600"
  },
  {
    "text": "your tests so that can get quite interesting and sorts of like that's not",
    "start": "321600",
    "end": "329550"
  },
  {
    "text": "big enough is it",
    "start": "329550",
    "end": "332120"
  },
  {
    "text": "and let's try that we might need to adjust with the thing slowly is that",
    "start": "338940",
    "end": "344670"
  },
  {
    "text": "fairly fairly readable to people so the",
    "start": "344670",
    "end": "354690"
  },
  {
    "text": "example I'm going to start with is a little templating library you've probably seen things like this before",
    "start": "354690",
    "end": "360710"
  },
  {
    "text": "where you can have a string with some curly braces with a name inside and you",
    "start": "360710",
    "end": "367860"
  },
  {
    "text": "can provide a dictionary that gives values to swap into those tags so that",
    "start": "367860",
    "end": "374520"
  },
  {
    "text": "you can you know do templates for your HTML or those kind of things so this is the example we're going to be working",
    "start": "374520",
    "end": "379680"
  },
  {
    "text": "with throughout and this is similar to it's not exactly the same thing I've done in real life this is similar to",
    "start": "379680",
    "end": "385380"
  },
  {
    "text": "some property based testing code I've written in real life in that it's an example where we are expecting user",
    "start": "385380",
    "end": "392340"
  },
  {
    "text": "input that we have absolutely no control over we do not know what we're going to be sent and the other thing is is that",
    "start": "392340",
    "end": "399960"
  },
  {
    "text": "we are probably going to be dealing with users where we want to be able to give some kind of meaning more meaningful",
    "start": "399960",
    "end": "405870"
  },
  {
    "text": "feedback if they give us invalid code so we don't want to just throw and crash which in many cases is actually quite a",
    "start": "405870",
    "end": "412380"
  },
  {
    "text": "valid error handling strategy here we actually want to give some feedback on what the error is why it's happened what",
    "start": "412380",
    "end": "418800"
  },
  {
    "text": "people can do about it and so this is probably a kind of thing that you're",
    "start": "418800",
    "end": "424500"
  },
  {
    "text": "fairly familiar with when you're starting a library so I've got a couple of unit tests and I've picked some",
    "start": "424500",
    "end": "430590"
  },
  {
    "text": "examples out of a hat so I've said well if I have a template which has no tags",
    "start": "430590",
    "end": "437010"
  },
  {
    "text": "in at all and a model that has no replacement values I should be able to",
    "start": "437010",
    "end": "442530"
  },
  {
    "text": "render the template with the model and I should get exactly the same string out",
    "start": "442530",
    "end": "447660"
  },
  {
    "text": "as I put in we could so far good I was hoping that you know we'd get at least",
    "start": "447660",
    "end": "453180"
  },
  {
    "text": "this far if I have a template which has a tag in and I give it a model which has",
    "start": "453180",
    "end": "459900"
  },
  {
    "text": "that tag in it named in the dictionary and has a replacement value then it",
    "start": "459900",
    "end": "466380"
  },
  {
    "text": "should replace it so we we get the the updated string",
    "start": "466380",
    "end": "471919"
  },
  {
    "text": "and we have an implementation so the actual implementation we're starting with is this one but I thought for those",
    "start": "471919",
    "end": "477949"
  },
  {
    "text": "of you haven't seen em shop before there's a slightly more imperative looking version below so this is kind of",
    "start": "477949",
    "end": "483830"
  },
  {
    "text": "in in classic TDD fashion this is kind of the simplest thing I could think of that could work kind off it doesn't work",
    "start": "483830",
    "end": "490820"
  },
  {
    "text": "for everything because we'll see later so I thought you know if I just have one tag what would I do well probably I'd write a little reg X",
    "start": "490820",
    "end": "497720"
  },
  {
    "text": "that kind of looks for - opening curly brackets optionally a space the name of",
    "start": "497720",
    "end": "506990"
  },
  {
    "text": "the tag optionally another space and then two curly closing brackets and then replace it with the replacement value",
    "start": "506990",
    "end": "512870"
  },
  {
    "text": "from the dictionary I've got more than one of these so what am I going to do I'm just going to create a new reg X object for every key in my database and",
    "start": "512870",
    "end": "520810"
  },
  {
    "text": "do a replace on the text now hopefully",
    "start": "520810",
    "end": "527360"
  },
  {
    "text": "most of you will spot very quickly that this has all kinds of different issues so for example if your replacement text",
    "start": "527360",
    "end": "533060"
  },
  {
    "text": "has tags in those tags might get triggered later by come later values going through the dictionary its",
    "start": "533060",
    "end": "540230"
  },
  {
    "text": "enormous ly inefficient and you know a few other little details like that but we don't really care this will pass our",
    "start": "540230",
    "end": "547250"
  },
  {
    "text": "unit tests and in fact hopefully this is up and running yeah hopefully you can",
    "start": "547250",
    "end": "552830"
  },
  {
    "text": "see that we have two two tests of have passed so that's that's the example",
    "start": "552830",
    "end": "563930"
  },
  {
    "text": "we're going to work with and basically what we're going to try and do is we're going to try and build up to a fairly",
    "start": "563930",
    "end": "569510"
  },
  {
    "text": "robust piece of code that we have some kind of well known good properties about",
    "start": "569510",
    "end": "576190"
  },
  {
    "text": "so so let's run out submit error handling",
    "start": "576190",
    "end": "581920"
  },
  {
    "text": "so I'm glad most of you have seen some F sharp before because I am using a few sort of languages which don't a few",
    "start": "591620",
    "end": "599130"
  },
  {
    "text": "features that don't exist in in c-sharp so I've got this idea that I want to try and classify all of my errors because in",
    "start": "599130",
    "end": "607920"
  },
  {
    "text": "the problem where I was originally sort of doing something similar to this I needed to give localized error messages so I didn't just want a string error",
    "start": "607920",
    "end": "614400"
  },
  {
    "text": "message about what had gone wrong I actually wanted something that I could sort of deal with programmatically later",
    "start": "614400",
    "end": "620100"
  },
  {
    "text": "so I've got this thing called a discriminated Union it's kind of a an",
    "start": "620100",
    "end": "625290"
  },
  {
    "text": "enum on steroids and so I can say okay well what's the",
    "start": "625290",
    "end": "630450"
  },
  {
    "text": "first level of error checking the first area of level which error checking in a dotnet library where I don't know",
    "start": "630450",
    "end": "635580"
  },
  {
    "text": "anything about the the inputs I'm getting is just checking for nulls you know null arguments and the normal",
    "start": "635580",
    "end": "643530"
  },
  {
    "text": "technique would be to throw a null argument exception but here I'm wanting to kind of give localised feedback on",
    "start": "643530",
    "end": "650550"
  },
  {
    "text": "what's going on so I'm not going to throw an exception I'm going to capture that error and and feed it back so at",
    "start": "650550",
    "end": "657000"
  },
  {
    "text": "the moment you know I can have a null model or I can have null content my original rendering library is now been",
    "start": "657000",
    "end": "665010"
  },
  {
    "text": "marked as private so it can't be called directly and is wrapped with some error handling so this is a pattern match",
    "start": "665010",
    "end": "672600"
  },
  {
    "text": "statement where I have the model and",
    "start": "672600",
    "end": "678660"
  },
  {
    "text": "some reason i've called the template content and i have absolutely no idea why my brain did that so i'll try and",
    "start": "678660",
    "end": "685650"
  },
  {
    "text": "correct that before i push the code up to github for you guys and we just do a",
    "start": "685650",
    "end": "691530"
  },
  {
    "text": "little pattern match so i check whether the model is null does this make sense to people even if you haven't seen it",
    "start": "691530",
    "end": "697380"
  },
  {
    "text": "before so I've got little guard clause there and this error and okay thing is",
    "start": "697380",
    "end": "704730"
  },
  {
    "text": "is something that's actually built into the more recent versions of of F sharp which is discriminated Union in its own",
    "start": "704730",
    "end": "710850"
  },
  {
    "text": "right where you can mark the result of a function either being okay or being an",
    "start": "710850",
    "end": "716670"
  },
  {
    "text": "error so that looks good our tests have",
    "start": "716670",
    "end": "722250"
  },
  {
    "text": "changed a little bit not a great deal so there's a couple of",
    "start": "722250",
    "end": "729300"
  },
  {
    "text": "things going on so one is I've given a type alias for this result type that I'm",
    "start": "729300",
    "end": "735210"
  },
  {
    "text": "using so it's in c-sharp it just shows up as a generic type with a success",
    "start": "735210",
    "end": "740760"
  },
  {
    "text": "result type and an error result type so in c-sharp you'll either get back in an",
    "start": "740760",
    "end": "746730"
  },
  {
    "text": "okay of string or an error of a rendering error and our tests have",
    "start": "746730",
    "end": "755750"
  },
  {
    "text": "updated slightly in that now in our comparison what we're saying here is not",
    "start": "755750",
    "end": "761880"
  },
  {
    "text": "just that the result that comes back should be the same string but that",
    "start": "761880",
    "end": "767520"
  },
  {
    "text": "actually it should be a result an okay result of the same string you know it",
    "start": "767520",
    "end": "773550"
  },
  {
    "text": "should be a successful rendering of the text and the result type has value",
    "start": "773550",
    "end": "779730"
  },
  {
    "text": "equality so this this equality will only be true if the string inside the okay",
    "start": "779730",
    "end": "784830"
  },
  {
    "text": "type is the same in both cases because the return type here is now a result and",
    "start": "784830",
    "end": "793529"
  },
  {
    "text": "again our replace text would be a result",
    "start": "793529",
    "end": "799140"
  },
  {
    "text": "of of okay as well yeah so again",
    "start": "799140",
    "end": "805500"
  },
  {
    "text": "hopefully this is all still fairly familiar terra-tory let's actually bring",
    "start": "805500",
    "end": "810510"
  },
  {
    "text": "in our property based testing framework so one of the nice things about property",
    "start": "810510",
    "end": "818310"
  },
  {
    "text": "based testing is you can kind of start with simple things and then well simple things to get properties for and then",
    "start": "818310",
    "end": "824400"
  },
  {
    "text": "you can move on to more complex things so we do actually have an invariant",
    "start": "824400",
    "end": "832800"
  },
  {
    "text": "property for our code which is that we don't want it to throw we don't ever",
    "start": "832800",
    "end": "837839"
  },
  {
    "text": "want it to throw we always want to give meaningful feedback so we can write a",
    "start": "837839",
    "end": "843240"
  },
  {
    "text": "property that says something like this",
    "start": "843240",
    "end": "846560"
  },
  {
    "text": "at",
    "start": "848329",
    "end": "850959"
  },
  {
    "text": "okay so we're adding a few things here so the property based testing library",
    "start": "858990",
    "end": "864190"
  },
  {
    "text": "that I'm using is called FS check I'll have a link to it at the end it's fairly established property based testing",
    "start": "864190",
    "end": "870250"
  },
  {
    "text": "librarian Nets been around for I think about nine years now it's been around for quite a while so I've obviously",
    "start": "870250",
    "end": "876400"
  },
  {
    "text": "added a reference to that and I'm using X you know it's it's X unit plug in so I can define properties easily so that's",
    "start": "876400",
    "end": "884710"
  },
  {
    "text": "in there there is also another newer dotnet library called Hedgehog which",
    "start": "884710",
    "end": "891190"
  },
  {
    "text": "came out last year which I haven't had a chance to play with yet but all of the concepts we're covering today should kind of apply equally equally to that",
    "start": "891190",
    "end": "899250"
  },
  {
    "text": "and having added FS check we can start writing properties like this so they look a bit like a test but there's a",
    "start": "899250",
    "end": "907360"
  },
  {
    "text": "couple of different things going on so obviously we've got different attribute",
    "start": "907360",
    "end": "912400"
  },
  {
    "text": "where we're marking it as a property and we're gonna call it does not throw",
    "start": "912400",
    "end": "918130"
  },
  {
    "text": "it's got inputs we're not specifying what those inputs should be we're not giving any example values we're just",
    "start": "918130",
    "end": "924820"
  },
  {
    "text": "saying yeah we want a string to use as a template and we want a dictionary to use as a model and then we're rendering the",
    "start": "924820",
    "end": "936640"
  },
  {
    "text": "text and we're returning true so property ffs check it has a number of",
    "start": "936640",
    "end": "942610"
  },
  {
    "text": "things that can kind of consider as to whether your property is passed or failed the simplest and the most common one is that your property returns a bool",
    "start": "942610",
    "end": "948910"
  },
  {
    "text": "and if the property holds true you return true and if it doesn't you either",
    "start": "948910",
    "end": "954370"
  },
  {
    "text": "throw an exception or return false so here we're fine because the only thing",
    "start": "954370",
    "end": "960340"
  },
  {
    "text": "we're checking is that it doesn't throw exceptions so we can just return true and if it throws an exception first then",
    "start": "960340",
    "end": "965620"
  },
  {
    "text": "hey we good now let's have a look any",
    "start": "965620",
    "end": "974350"
  },
  {
    "text": "problem with this is that our code no longer passes our new test so let's have a quick look what's going on here and so",
    "start": "974350",
    "end": "983020"
  },
  {
    "text": "are can you see that texture do you need it a bit bigger people are the back",
    "start": "983020",
    "end": "990250"
  },
  {
    "text": "you're okay there's some requests for bigger let's see if I can make it a bit",
    "start": "990250",
    "end": "995890"
  },
  {
    "text": "bigger it's gonna let me do it so we don't need the details of the stacked rest and things stacked race and things",
    "start": "995890",
    "end": "1004040"
  },
  {
    "text": "okay that's interesting so that's that's actually one of the errors that I was planning to deal with later but this is the joys of property based testing so so",
    "start": "1005270",
    "end": "1012630"
  },
  {
    "text": "what's actually happened here so it says that the property has failed it says the property is falsifiable so",
    "start": "1012630",
    "end": "1020100"
  },
  {
    "text": "it's sound is found a result where the property has not returned true that it took 12 tests to find it so what it's",
    "start": "1020100",
    "end": "1027390"
  },
  {
    "text": "done is it's generated 12 sets of input data and for the first 11 of them the",
    "start": "1027390",
    "end": "1033329"
  },
  {
    "text": "property was true but now it's generated a twelfth one and the property was not",
    "start": "1033330",
    "end": "1040020"
  },
  {
    "text": "true it then says that it's shrunk it three times so this is one of the nice",
    "start": "1040020",
    "end": "1047069"
  },
  {
    "text": "things about FS checks if we look here so the original property are found which did not work is here so what it's saying",
    "start": "1047070",
    "end": "1056220"
  },
  {
    "text": "is it generated a template which was the string xnp and then it's generated some",
    "start": "1056220",
    "end": "1062760"
  },
  {
    "text": "reason it's chosen to display the dictionary as a sequence of key value pairs I don't quite know why but hey",
    "start": "1062760",
    "end": "1069330"
  },
  {
    "text": "fair enough and so it generated a sequence one with an empty string and a couple of control characters I don't",
    "start": "1069330",
    "end": "1075630"
  },
  {
    "text": "know about you but I probably wouldn't have come up with that as a unit test anytime soon and the other one which I",
    "start": "1075630",
    "end": "1081720"
  },
  {
    "text": "suspect is the one that's causing a problem is it generated one with a key that has a asterisks in it and obviously",
    "start": "1081720",
    "end": "1091500"
  },
  {
    "text": "because all I'm doing is I'm taking my key and I'm shoving it into a regex expression and that's now generating in",
    "start": "1091500",
    "end": "1098100"
  },
  {
    "text": "invalid reg X so okay great and then I",
    "start": "1098100",
    "end": "1104100"
  },
  {
    "text": "get the stack trace and all the normal things you would get because an exception with thrown and and so on and so forth yeah so fair enough",
    "start": "1104100",
    "end": "1110400"
  },
  {
    "text": "let's have a look at my implementation it looks like I need valid keys",
    "start": "1110400",
    "end": "1116240"
  },
  {
    "text": "and so I can do something like so what",
    "start": "1122620",
    "end": "1129140"
  },
  {
    "text": "the way to one here I'm going to want to a model I'm going to cheat and take that",
    "start": "1129140",
    "end": "1138910"
  },
  {
    "text": "okay so I'm going to pull all of the keys out of the key value pairs and I'm going to say that how do we want to make",
    "start": "1144220",
    "end": "1162260"
  },
  {
    "text": "keys valid I'm going to say a couple of things about it I'm going to say that",
    "start": "1162260",
    "end": "1169179"
  },
  {
    "text": "well contact today so I'm going to say",
    "start": "1176870",
    "end": "1183620"
  },
  {
    "text": "that my identifier has to start with a letter I'm pretty gonna have to specify",
    "start": "1183620",
    "end": "1194960"
  },
  {
    "text": "that that's a string and",
    "start": "1194960",
    "end": "1199450"
  },
  {
    "text": "[Music]",
    "start": "1200080",
    "end": "1203169"
  },
  {
    "text": "so so basically why I'm just gonna go through here isn't gonna get all of the keys I'm going to check that the first",
    "start": "1214809",
    "end": "1221710"
  },
  {
    "text": "character is definitely a letter and I'm going to check that all of the let all of the characters are either letters or",
    "start": "1221710",
    "end": "1226730"
  },
  {
    "text": "digits that kind of make sense so I'm double checking the first character I don't really care so I can go",
    "start": "1226730",
    "end": "1238630"
  },
  {
    "text": "was I call it invalid key",
    "start": "1247960",
    "end": "1251919"
  },
  {
    "text": "okay so hopefully we should get a new set of tests at this point assuming I've actually written that correctly oh yeah",
    "start": "1258520",
    "end": "1270309"
  },
  {
    "text": "sorry so it's now just told me that I've tried to index the first letter of an",
    "start": "1270309",
    "end": "1275500"
  },
  {
    "text": "empty string which it doesn't like so",
    "start": "1275500",
    "end": "1280950"
  },
  {
    "text": "let's have a check before that to say",
    "start": "1280950",
    "end": "1286529"
  },
  {
    "text": "[Music]",
    "start": "1287360",
    "end": "1290559"
  },
  {
    "text": "oh yeah so so our key actually needs to have some some stuff in it",
    "start": "1308480",
    "end": "1314290"
  },
  {
    "text": "okay that passed that's slightly unexpected must emit but let's actually",
    "start": "1324790",
    "end": "1329830"
  },
  {
    "text": "have a look at the kind of things that that's doing so if we go back to our property for a moment we can actually",
    "start": "1329830",
    "end": "1344020"
  },
  {
    "text": "have a look at what's going on",
    "start": "1344020",
    "end": "1351000"
  },
  {
    "text": "oh I'm I'm doing that wrong out on time",
    "start": "1363390",
    "end": "1368090"
  },
  {
    "text": "okay so let's have a look it's not",
    "start": "1386880",
    "end": "1393300"
  },
  {
    "text": "terribly useful because it's and not showing us a very nice representation of the dictionaries but you can kind of",
    "start": "1393300",
    "end": "1400140"
  },
  {
    "text": "imagine what's going on with the dictionaries because what are we doing is it will be generating the same kind of strings that's generating for the keys so we're getting a whole load of",
    "start": "1400140",
    "end": "1406440"
  },
  {
    "text": "strings here so some of them are empty some of them are quite short some of them are starting to have weird characters in what you won't see in this",
    "start": "1406440",
    "end": "1412710"
  },
  {
    "text": "display is that it will start generating control characters and things and some",
    "start": "1412710",
    "end": "1418080"
  },
  {
    "text": "of them will be null so this is kind of what FS check does for you and let's",
    "start": "1418080",
    "end": "1427010"
  },
  {
    "text": "let's get back onto a prepared bits",
    "start": "1427010",
    "end": "1436370"
  },
  {
    "text": "yes that's fine",
    "start": "1439090",
    "end": "1442630"
  },
  {
    "text": "no that hasn't done what I wanted",
    "start": "1448960",
    "end": "1452669"
  },
  {
    "text": "let's give up something",
    "start": "1458320",
    "end": "1461309"
  },
  {
    "text": "so this is a slightly extended version of coats this is one of the things about property testing you need to watch out",
    "start": "1490660",
    "end": "1496300"
  },
  {
    "text": "for if you say add it to your CI or something is that depending what properties in what values it happens to",
    "start": "1496300",
    "end": "1502630"
  },
  {
    "text": "generate by default it runs a hundred examples you might end up getting different things put into your different",
    "start": "1502630",
    "end": "1510340"
  },
  {
    "text": "results from your tests so when I was preparing this talk at different points when I was running the code I actually",
    "start": "1510340",
    "end": "1515440"
  },
  {
    "text": "got different examples of things that it found that it didn't find the first time so for example I found out that you know",
    "start": "1515440",
    "end": "1522550"
  },
  {
    "text": "if it gave a null replacement value in the dictionary than that cause to regex",
    "start": "1522550",
    "end": "1528850"
  },
  {
    "text": "to fail and it's sort of a bunch of other things like that so one thing to be aware of with property based testing is that it does",
    "start": "1528850",
    "end": "1535150"
  },
  {
    "text": "have the the slightly annoying occasional property of you will write some code you'll get the property based",
    "start": "1535150",
    "end": "1540880"
  },
  {
    "text": "test to pass you checked into your CI and then after a while you will suddenly get a random error that you weren't",
    "start": "1540880",
    "end": "1546520"
  },
  {
    "text": "expecting fortunately it always tells you what the input was that created that error so you can go back and add a sort",
    "start": "1546520",
    "end": "1553090"
  },
  {
    "text": "of individual unit case as a regression oh sorry an individual unit test as a regression test for that kind of",
    "start": "1553090",
    "end": "1558700"
  },
  {
    "text": "particularly unusual input cool okay",
    "start": "1558700",
    "end": "1567190"
  },
  {
    "text": "that's not what I wanted I wanted my",
    "start": "1567190",
    "end": "1573190"
  },
  {
    "text": "tests again",
    "start": "1573190",
    "end": "1575820"
  },
  {
    "text": "this is great and this is actually quite kind of a useful property to be able to write for code it's just kind of being",
    "start": "1584830",
    "end": "1590260"
  },
  {
    "text": "able to say okay give me whatever inputs you like I should do something kind of meaningful with it and this is also the",
    "start": "1590260",
    "end": "1599409"
  },
  {
    "text": "kind of property that's quite easy to write if you have the kind of invariance we were talking about earlier yeah you can kind of see how you could write a",
    "start": "1599409",
    "end": "1605230"
  },
  {
    "text": "property like this saying I'll sort my list backwards and forwards and all those kind of things but we don't always",
    "start": "1605230",
    "end": "1613539"
  },
  {
    "text": "you know we can't really say very much about what results should be if we're",
    "start": "1613539",
    "end": "1619029"
  },
  {
    "text": "just saying give us any string at all because if that input template is null well hey we can't you know it's an error",
    "start": "1619029",
    "end": "1625600"
  },
  {
    "text": "but if it's something meaningful we would expect it to return okay and we're just told FS check to generate any",
    "start": "1625600",
    "end": "1631120"
  },
  {
    "text": "string at all it's it's kind of hard to know what we should be what we should be checking here so okay so the first thing",
    "start": "1631120",
    "end": "1639970"
  },
  {
    "text": "that might spring to mind is so if FS check is is generating inputs based on",
    "start": "1639970",
    "end": "1645789"
  },
  {
    "text": "the types how about if we create a type who's whose know has a constructor that makes sure that we know something about",
    "start": "1645789",
    "end": "1652210"
  },
  {
    "text": "the input so let's let's give that a go [Music]",
    "start": "1652210",
    "end": "1659299"
  },
  {
    "text": "so hopefully in here we should now have our tagless string class so our next",
    "start": "1669820",
    "end": "1677529"
  },
  {
    "text": "property we're gonna write is we're going to go okay so testing actually that we're getting the correct results is quite hard quite",
    "start": "1677529",
    "end": "1685269"
  },
  {
    "text": "new to property based testing so maybe for the moment we all have specific examples for actual genuine templates",
    "start": "1685269",
    "end": "1691299"
  },
  {
    "text": "with real models where we want to do replacements we'll kind of put some examples in for that but surely at least",
    "start": "1691299",
    "end": "1697090"
  },
  {
    "text": "we can check that property that if the input has no tags in it should be unchanged you know that's that's that's",
    "start": "1697090",
    "end": "1704289"
  },
  {
    "text": "relatively straightforward so how can we do that well all we need is a string that never has a pair of opening a double pair of",
    "start": "1704289",
    "end": "1712119"
  },
  {
    "text": "opening braces because if it doesn't have a double pair of opening braces there's no tax so cool we're programmers",
    "start": "1712119",
    "end": "1719470"
  },
  {
    "text": "we could we can do we can do logic and we need a type because we're going to kind of indicate two FS check that this",
    "start": "1719470",
    "end": "1725889"
  },
  {
    "text": "is what we want so let's create a class class is just gonna have a single property on it which we're just gonna",
    "start": "1725889",
    "end": "1732759"
  },
  {
    "text": "call value which is the stream that gets generated it takes any any input string",
    "start": "1732759",
    "end": "1740489"
  },
  {
    "text": "and then what it does is it just sits there in a little loop for as long as",
    "start": "1740489",
    "end": "1746889"
  },
  {
    "text": "the string contains a pair of opening braces it loops back round and replaces",
    "start": "1746889",
    "end": "1752470"
  },
  {
    "text": "the pair with a single one again until there's no pairs left and it also does something else which may not immediately",
    "start": "1752470",
    "end": "1759009"
  },
  {
    "text": "spring to mind but your property based testing will tell you quite quickly if you forget about it which is that later on we're going to be",
    "start": "1759009",
    "end": "1765489"
  },
  {
    "text": "kind of gluing some of these strings together to try and generate whole template inputs so if one of them ends",
    "start": "1765489",
    "end": "1773049"
  },
  {
    "text": "with an opening brace and one of them begins with an opening brace and they end up next to each other we actually",
    "start": "1773049",
    "end": "1778779"
  },
  {
    "text": "end up with an opening of a tag so we're just going to say that if if we ever",
    "start": "1778779",
    "end": "1784330"
  },
  {
    "text": "generate something that ends with a curly bracket we're going to stick an eye on the end just you know something",
    "start": "1784330",
    "end": "1791878"
  },
  {
    "text": "no you would never write code like this in production this this is this is purely tech code to generates the kind",
    "start": "1797470",
    "end": "1805419"
  },
  {
    "text": "of input that we want and and that's part of the benefit here because this",
    "start": "1805419",
    "end": "1811539"
  },
  {
    "text": "code will never have the same logic as the code you're testing so one of the things we're doing here is that you know",
    "start": "1811539",
    "end": "1817450"
  },
  {
    "text": "the logic that you need to generate a string that has no tags in is totally independent of the logic you need to",
    "start": "1817450",
    "end": "1823210"
  },
  {
    "text": "parse your template so you're never going to sort of end up with duplicating",
    "start": "1823210",
    "end": "1828429"
  },
  {
    "text": "your production code in your test generators unless you do something seriously wrong at some point yeah but",
    "start": "1828429",
    "end": "1838509"
  },
  {
    "text": "all we're doing here is we want to put some kind of constraint on the input",
    "start": "1838509",
    "end": "1845019"
  },
  {
    "text": "which means that we now know mean now know something meaningful about the output and the constraint we've put is",
    "start": "1845019",
    "end": "1851320"
  },
  {
    "text": "there's no tags and the result of that is that we know that we should get something that there doesn't change when",
    "start": "1851320",
    "end": "1859450"
  },
  {
    "text": "we feed it through our renderer and the other thing which is nice to do is to override to string to give something",
    "start": "1859450",
    "end": "1865570"
  },
  {
    "text": "nice because when our property fails what FS check will do is it will tell",
    "start": "1865570",
    "end": "1870940"
  },
  {
    "text": "you which of your tagless strings has caused the property to fail and obviously if you don't have that you",
    "start": "1870940",
    "end": "1876190"
  },
  {
    "text": "just get the class name which is not particularly helpful so I'll tack with",
    "start": "1876190",
    "end": "1883419"
  },
  {
    "text": "string and this is where we start to get into slightly more of the magic so what",
    "start": "1883419",
    "end": "1894190"
  },
  {
    "text": "we have here is we have a new property and the property is still quite simple",
    "start": "1894190",
    "end": "1902970"
  },
  {
    "text": "so we get our tag list string as a",
    "start": "1902970",
    "end": "1908590"
  },
  {
    "text": "template we extract the value give it to our rendering function and we say that",
    "start": "1908590",
    "end": "1916989"
  },
  {
    "text": "the result that comes back should be okay rather than error because that's",
    "start": "1916989",
    "end": "1923409"
  },
  {
    "text": "one of the things we can check and if it's okay the value stored in that okay result should be the",
    "start": "1923409",
    "end": "1930670"
  },
  {
    "text": "same as the value that we put in and if not we're going to throw an exception",
    "start": "1930670",
    "end": "1935790"
  },
  {
    "text": "that gives a string representation of our our error to do is that lets get",
    "start": "1935790",
    "end": "1945310"
  },
  {
    "text": "that running again",
    "start": "1945310",
    "end": "1947880"
  },
  {
    "text": "so that's great but we also have this",
    "start": "1954320",
    "end": "1959450"
  },
  {
    "text": "piece of magic here let me just check see if that runs yeah it's well it turns",
    "start": "1959450",
    "end": "1971120"
  },
  {
    "text": "out we've got two problems so one is we've got this piece of magic here which we'll explain in a moment and the other",
    "start": "1971120",
    "end": "1978530"
  },
  {
    "text": "is that it turns out as often happens in",
    "start": "1978530",
    "end": "1983840"
  },
  {
    "text": "property based testing that things are not quite as simple as they first appear because it turns out that actually our property that we thought we had of if we",
    "start": "1983840",
    "end": "1991280"
  },
  {
    "text": "give it a string that has no tags in it should always work and it should always come back unchanged isn't actually true",
    "start": "1991280",
    "end": "1997910"
  },
  {
    "text": "because we also have some constraints on what we consider a valid model so if for",
    "start": "1997910",
    "end": "2004420"
  },
  {
    "text": "example like here we generate a model that has an invalid key we still don't get an okay result out because although",
    "start": "2004420",
    "end": "2010780"
  },
  {
    "text": "our template is fine our keys in our",
    "start": "2010780",
    "end": "2017920"
  },
  {
    "text": "model are not so here we have an empty string so an invalid key is being supplied so okay so",
    "start": "2017920",
    "end": "2023740"
  },
  {
    "text": "we've got a couple of things to sort out so let's have a look at the magic first so we've got this thing here we're now",
    "start": "2023740",
    "end": "2029770"
  },
  {
    "text": "kind of configuring our property and we're saying this thing here that we want to feed a new arbitrary in so I'm",
    "start": "2029770",
    "end": "2037780"
  },
  {
    "text": "not quite sure about the naming here but in in FS checks speech an arbitrary is a",
    "start": "2037780",
    "end": "2042940"
  },
  {
    "text": "thing that knows how to create an arbitrary value of a type and it uses",
    "start": "2042940",
    "end": "2049840"
  },
  {
    "text": "reflection to do that so we have a generator class that will have members",
    "start": "2049840",
    "end": "2055240"
  },
  {
    "text": "that know how to generate types so let's have a look at our generator",
    "start": "2055240",
    "end": "2059669"
  },
  {
    "text": "if my machine doesn't crash that would be fun",
    "start": "2066010",
    "end": "2071398"
  },
  {
    "text": "okay that's them now it's it's not it's not liking that just reload that",
    "start": "2079100",
    "end": "2090400"
  },
  {
    "text": "we'll make you larger again in a moment",
    "start": "2093760",
    "end": "2097409"
  },
  {
    "text": "yeah",
    "start": "2107100",
    "end": "2109730"
  },
  {
    "text": "Oh Oh what happened there let's have a look at our generator so what we've got",
    "start": "2119770",
    "end": "2125980"
  },
  {
    "text": "is we've got this a class it's got a static member on it which is of a",
    "start": "2125980",
    "end": "2132250"
  },
  {
    "text": "generic type an arbitrary of tagless string and this is how we actually tell",
    "start": "2132250",
    "end": "2137800"
  },
  {
    "text": "FS check how to generate tagless strings because tagless strings is something it has no internal concept of you know it",
    "start": "2137800",
    "end": "2143650"
  },
  {
    "text": "has generators for many of the base class values so it can generate dates",
    "start": "2143650",
    "end": "2148840"
  },
  {
    "text": "and it can generate strings and it can generate dictionaries and lists and and those kind of things but this is this is",
    "start": "2148840",
    "end": "2155200"
  },
  {
    "text": "a class that we've created it's got no real way of knowing how we want to create it now for this one we can",
    "start": "2155200",
    "end": "2161350"
  },
  {
    "text": "actually do something fairly straightforward so what we can do is we can say actually we we've kind of added",
    "start": "2161350",
    "end": "2168940"
  },
  {
    "text": "some constraints to this but basically it's just a string so what we can do is we can tell efforts check how to convert",
    "start": "2168940",
    "end": "2175540"
  },
  {
    "text": "back and forth from something it knows how to generate already so we're going",
    "start": "2175540",
    "end": "2181090"
  },
  {
    "text": "to create a new arbitrary based on an",
    "start": "2181090",
    "end": "2186310"
  },
  {
    "text": "unknown string arbitrary so I'm saying hey I don't want null strings and this",
    "start": "2186310",
    "end": "2191830"
  },
  {
    "text": "none null generic type is actually built into FS check and basically all it does",
    "start": "2191830",
    "end": "2196960"
  },
  {
    "text": "is you can wrap any other type and say use your default generator but don't give me any null ones of that thing and",
    "start": "2196960",
    "end": "2206500"
  },
  {
    "text": "I can croute I can give a little lambda functions to convert in either direction so I can say if you give me a string which is not null sort of wrapped in",
    "start": "2206500",
    "end": "2213550"
  },
  {
    "text": "this none know thing then I can just call my constructor that does has all of the logic I need to remove the tags and",
    "start": "2213550",
    "end": "2221020"
  },
  {
    "text": "if I want to go the other way I already know that my string is not null because I'm generating this from a not null",
    "start": "2221020",
    "end": "2226840"
  },
  {
    "text": "string and so I can go okay give it I will convert it back by giving a new non",
    "start": "2226840",
    "end": "2232510"
  },
  {
    "text": "null the reason you want about to convert in both directions as you saw",
    "start": "2232510",
    "end": "2237850"
  },
  {
    "text": "before FS check had this thing where it kind of shrunk the input so it found a value that didn't work and then it made",
    "start": "2237850",
    "end": "2243670"
  },
  {
    "text": "it smaller until it found the minimal value that didn't work and so Albert",
    "start": "2243670",
    "end": "2249430"
  },
  {
    "text": "Rees are actually built up of two things in FS check they're built up of a general waiter that knows how to just generate",
    "start": "2249430",
    "end": "2256230"
  },
  {
    "text": "one of these values and a shrinker that knows how to reduce the size of the",
    "start": "2256230",
    "end": "2262030"
  },
  {
    "text": "value now the shrinker is optional so for some of there are other examples we won't be providing shrinkers but if they",
    "start": "2262030",
    "end": "2268390"
  },
  {
    "text": "are quite nice because it means that when you get the failing test you always kind of get the minimal version of it so the default string shrinker not entirely",
    "start": "2268390",
    "end": "2275980"
  },
  {
    "text": "surprisingly basically just tries to knock characters out of the string until",
    "start": "2275980",
    "end": "2282400"
  },
  {
    "text": "it finds a version that passes and then it gives you the kind of the last version that didn't and I think it",
    "start": "2282400",
    "end": "2289000"
  },
  {
    "text": "actually tries to increment back down through the characters as well so you'll quite often get a minimal error of just",
    "start": "2289000",
    "end": "2295330"
  },
  {
    "text": "the string a because what it will do is it will start up for the longest string it will not let us out until there's",
    "start": "2295330",
    "end": "2300850"
  },
  {
    "text": "only one letter left and then it will start incrementing back down through the ASCII codes until it gets back to a and then it will say a lower class a",
    "start": "2300850",
    "end": "2307240"
  },
  {
    "text": "lowercase a doesn't pass your test and so you guys that's that's kind of the",
    "start": "2307240",
    "end": "2313930"
  },
  {
    "text": "the first step of being able to tell FS check about your domain you can create",
    "start": "2313930",
    "end": "2319060"
  },
  {
    "text": "types that represent constraints on your domain and then you can tell FS check",
    "start": "2319060",
    "end": "2324340"
  },
  {
    "text": "how to generate them and we kind of thought we were done except yeah we've added these checks",
    "start": "2324340",
    "end": "2331750"
  },
  {
    "text": "that test that all of our input is valid and our model isn't valid so that's",
    "start": "2331750",
    "end": "2337450"
  },
  {
    "text": "that's slightly frustrating what can we do there well we could do something like",
    "start": "2337450",
    "end": "2342820"
  },
  {
    "text": "we could take this out and just have a sort of an empty dictionary but that's",
    "start": "2342820",
    "end": "2348640"
  },
  {
    "text": "not really what we want to test because there are going to be cases where people are going to send through models with",
    "start": "2348640",
    "end": "2354220"
  },
  {
    "text": "data in and templates that have no tags is kind of a valid use case so let's",
    "start": "2354220",
    "end": "2363880"
  },
  {
    "text": "have a think about how we can how we can generate these",
    "start": "2363880",
    "end": "2368760"
  },
  {
    "text": "No",
    "start": "2380270",
    "end": "2383270"
  },
  {
    "text": "it already",
    "start": "2386810",
    "end": "2389680"
  },
  {
    "text": "sorry I've forgotten that modifying the files would would cause issues with that",
    "start": "2396890",
    "end": "2404799"
  },
  {
    "text": "let's have a look in there we were point actually okay so this is what your",
    "start": "2418470",
    "end": "2428369"
  },
  {
    "text": "generator start looking like so we're going to have an arbitrary of I dictionary so so here we're doing",
    "start": "2428369",
    "end": "2435240"
  },
  {
    "text": "something slightly different so here we've actually defined our own class and we're using the class as kind of a flag",
    "start": "2435240",
    "end": "2442020"
  },
  {
    "text": "to F s check of sometimes we'll want to generate tankless strings and sometimes we won't the other thing you can do and",
    "start": "2442020",
    "end": "2448890"
  },
  {
    "text": "I'm kind of showing this here for ya to show that it can be done you might want",
    "start": "2448890",
    "end": "2454049"
  },
  {
    "text": "to actually wrap this if you were doing these tests for real is you can also override the default generators of",
    "start": "2454049",
    "end": "2459329"
  },
  {
    "text": "existing types so here for example I can say okay the ideation areas that I want",
    "start": "2459329",
    "end": "2464579"
  },
  {
    "text": "you to generate I always want you to generate valid input models anywhere that I use this configuration you know",
    "start": "2464579",
    "end": "2472319"
  },
  {
    "text": "so anything that asks for an Ida canary give it and give it a valid one so I'm going to override the default generator",
    "start": "2472319",
    "end": "2479900"
  },
  {
    "text": "so what does it end up looking like well I kind of I know all of the the first",
    "start": "2479900",
    "end": "2486900"
  },
  {
    "text": "characters that are valid because I've said the first character has to be a letter I know that the other characters",
    "start": "2486900",
    "end": "2493799"
  },
  {
    "text": "can be letters or numbers that's just a nasty little function for",
    "start": "2493799",
    "end": "2501420"
  },
  {
    "text": "sticking a single character and then an array of other characters together into a string and you end up writing code",
    "start": "2501420",
    "end": "2513450"
  },
  {
    "text": "like this now this is where things start to get a little bit brain hurty and and",
    "start": "2513450",
    "end": "2521220"
  },
  {
    "text": "this is probably the main concept that i want to go with for today so if you start to lose the plot totally do feel",
    "start": "2521220",
    "end": "2527250"
  },
  {
    "text": "free to stick your hand up and tell me but as you can see what we're actually doing is we're using a link expression",
    "start": "2527250",
    "end": "2533400"
  },
  {
    "text": "to generate our values and kind of the way to think about this is that in say a",
    "start": "2533400",
    "end": "2540150"
  },
  {
    "text": "link to SQL expression what you're doing is you're saying is from the context of",
    "start": "2540150",
    "end": "2546450"
  },
  {
    "text": "the database I'm connected to get me a value that matches these criteria",
    "start": "2546450",
    "end": "2553039"
  },
  {
    "text": "what we're doing here is we're saying from the context of all possible things",
    "start": "2553039",
    "end": "2560130"
  },
  {
    "text": "this generator could potentially generate get me one of them does that",
    "start": "2560130",
    "end": "2568230"
  },
  {
    "text": "kind of make sense so this generator here so gender elements is a generator",
    "start": "2568230",
    "end": "2573809"
  },
  {
    "text": "that's built into FS check and you can give it an array and it will generate at",
    "start": "2573809",
    "end": "2580380"
  },
  {
    "text": "random one of the elements of the array so what I'm saying here is I have this",
    "start": "2580380",
    "end": "2585569"
  },
  {
    "text": "array of characters that are valid first characters for my key from that space of",
    "start": "2585569",
    "end": "2597119"
  },
  {
    "text": "potential characters give me one of them that's going to be my first character and I can stick generators together so",
    "start": "2597119",
    "end": "2605789"
  },
  {
    "text": "for the rest of the characters I want I want a bunch of characters I don't care how many cuz I've got at least one character now so I've got a valid",
    "start": "2605789",
    "end": "2611369"
  },
  {
    "text": "identifier but I want to glue potentially some number of other characters onto the end to give me a",
    "start": "2611369",
    "end": "2618089"
  },
  {
    "text": "variety of different identifiers so I'm going to say okay I've got this array",
    "start": "2618089",
    "end": "2623250"
  },
  {
    "text": "that has all of the legal characters for an identifier from that array pick me",
    "start": "2623250",
    "end": "2631470"
  },
  {
    "text": "one of them and do that multiple times",
    "start": "2631470",
    "end": "2636539"
  },
  {
    "text": "to generate a random array of characters this current is this still kind of",
    "start": "2636539",
    "end": "2642420"
  },
  {
    "text": "making sense to people some people are nodding and then give me",
    "start": "2642420",
    "end": "2648480"
  },
  {
    "text": "one of those arrays so I'm saying from the so we've got this kind of generator that can generate any kind any length of",
    "start": "2648480",
    "end": "2655410"
  },
  {
    "text": "array and the elements in that array will be elements from my valid input",
    "start": "2655410",
    "end": "2661680"
  },
  {
    "text": "keys and I can also make use of FS",
    "start": "2661680",
    "end": "2668910"
  },
  {
    "text": "checks of default generators so I can say and I need a valid replacement value so from the the the generator of none",
    "start": "2668910",
    "end": "2678809"
  },
  {
    "text": "null strings that's built in I don't know how that works and I don't care give me a string that isn't null and",
    "start": "2678809",
    "end": "2684599"
  },
  {
    "text": "call it replaced and then in my select clause I can do",
    "start": "2684599",
    "end": "2690260"
  },
  {
    "text": "what I need to with these this is my merge function that just takes a character an array of characters glues",
    "start": "2690260",
    "end": "2695450"
  },
  {
    "text": "them together it turns them into a string so that becomes my key and my null string I just extract it from that",
    "start": "2695450",
    "end": "2701840"
  },
  {
    "text": "none null wrapper to get the whatever the string is so now I have a generator",
    "start": "2701840",
    "end": "2708170"
  },
  {
    "text": "of key value pairs that have valid values in but I don't want key value pairs I want an ID Ixion's",
    "start": "2708170",
    "end": "2715640"
  },
  {
    "text": "so what I can say is I can say okay generate me a none empty list again this",
    "start": "2715640",
    "end": "2724520"
  },
  {
    "text": "is built into FS check generate me a none empty list of key value pairs and then in my Select cause here we do",
    "start": "2724520",
    "end": "2735170"
  },
  {
    "text": "something a little bit nasty because we want our keys we need our keys to be unique so what we",
    "start": "2735170",
    "end": "2740780"
  },
  {
    "text": "do is if we've generated duplicate keys we just take the first value that was",
    "start": "2740780",
    "end": "2747260"
  },
  {
    "text": "generated and throw the rest away and then we build a dictionary of whatever's left and then the last thing we need to",
    "start": "2747260",
    "end": "2755630"
  },
  {
    "text": "do is now we have a generator of I dictionaries as I said before in FS check an arbitrary is a combination of a",
    "start": "2755630",
    "end": "2763430"
  },
  {
    "text": "generator and a shrinker but I'm just going to use this dot Fromm method that",
    "start": "2763430",
    "end": "2769570"
  },
  {
    "text": "basically says I don't know how to shrink this yeah I can generate these but I don't know how to shrink them so",
    "start": "2769570",
    "end": "2777140"
  },
  {
    "text": "just you know don't try basically",
    "start": "2777140",
    "end": "2781779"
  },
  {
    "text": "so this I think is you know where we really start to see the full power of FS",
    "start": "2786720",
    "end": "2793089"
  },
  {
    "text": "check because what you can do is you can start abstracting things you know about your domain out into these generators",
    "start": "2793089",
    "end": "2799440"
  },
  {
    "text": "and then you can keep your properties very simple so our property hasn't changed you know if we are given a",
    "start": "2799440",
    "end": "2808200"
  },
  {
    "text": "tankless string and a valid model then",
    "start": "2808200",
    "end": "2813759"
  },
  {
    "text": "our string shouldn't change so you know our property is still very simple",
    "start": "2813759",
    "end": "2819160"
  },
  {
    "text": "someone coming into the code base can come along they can have a look and for",
    "start": "2819160",
    "end": "2824470"
  },
  {
    "text": "someone who even someone who hasn't used property based testing this for the reader it kind of looks almost the same",
    "start": "2824470",
    "end": "2831279"
  },
  {
    "text": "as when you do a what would be in an X unit a theory where you then have a list",
    "start": "2831279",
    "end": "2836410"
  },
  {
    "text": "of example values to feed in it's just that we don't have the list of example values we're just saying it's always",
    "start": "2836410",
    "end": "2841809"
  },
  {
    "text": "true it always happens so this is lovely",
    "start": "2841809",
    "end": "2851380"
  },
  {
    "text": "and in the last 10 minutes I'm going to see if I can cover the next bit and you can get a long way using FS check in",
    "start": "2851380",
    "end": "2858490"
  },
  {
    "text": "c-sharp and as you can see the code code actually looks relatively nice there is",
    "start": "2858490",
    "end": "2863559"
  },
  {
    "text": "one issue with using FS check from C sharp which the F sharp an",
    "start": "2863559",
    "end": "2868779"
  },
  {
    "text": "implementation sorry it is the F sharp implementation the F sharp language allows you to get round slightly which",
    "start": "2868779",
    "end": "2875740"
  },
  {
    "text": "is there you have linked expressions in c-sharp but what you cannot do in a",
    "start": "2875740",
    "end": "2882579"
  },
  {
    "text": "linked expression is you cannot have a conditional so you cannot within a single linked expression say something",
    "start": "2882579",
    "end": "2888880"
  },
  {
    "text": "like generate me the first character and if it's lowercase do this and if it's uppercase do something different that",
    "start": "2888880",
    "end": "2895619"
  },
  {
    "text": "starts getting really nasty and you if you try and actually write something which does that you'll see that your your code immediately kind of explodes",
    "start": "2895619",
    "end": "2903750"
  },
  {
    "text": "but fortunately F sharp allows us to work around this so I'm going to get quickly across to the F sharp version of",
    "start": "2903750",
    "end": "2909579"
  },
  {
    "text": "this code to see if we can add something a bit more so at the moment this is basically exactly the same as the C",
    "start": "2909579",
    "end": "2917200"
  },
  {
    "text": "sharp version so I've got a few type aliases just to make the the code a",
    "start": "2917200",
    "end": "2922480"
  },
  {
    "text": "bit shorter hopefully they're fairly self-explanatory we have our type our",
    "start": "2922480",
    "end": "2927820"
  },
  {
    "text": "tagless string class still yep yeah yep",
    "start": "2927820",
    "end": "2935550"
  },
  {
    "text": "yeah so the question here is if you if you if you if you actually change a",
    "start": "2957940",
    "end": "2963309"
  },
  {
    "text": "property of your code and production you know something that was a property in the past now no longer is can that cause",
    "start": "2963309",
    "end": "2969760"
  },
  {
    "text": "issues with the generators being hard to understand the answer is yes to an",
    "start": "2969760",
    "end": "2977260"
  },
  {
    "text": "extent but part of the answer is also that if your property has changed as in",
    "start": "2977260",
    "end": "2984280"
  },
  {
    "text": "if a fundamental property of your code has changed then probably that generator is no longer what you want anyway so I",
    "start": "2984280",
    "end": "2991599"
  },
  {
    "text": "mean this is something I actually say about unit testing in general not just property based testing that I sometimes",
    "start": "2991599",
    "end": "2998250"
  },
  {
    "text": "have had conversations with people saying oh you know we're refactoring this piece of code now how bunch of our",
    "start": "2998250",
    "end": "3003390"
  },
  {
    "text": "tests don't pass anymore we've got loads of work to do and one of the first questions to always ask is does that",
    "start": "3003390",
    "end": "3009270"
  },
  {
    "text": "test even matter anymore and quite often the answer is well no because we're not",
    "start": "3009270",
    "end": "3015630"
  },
  {
    "text": "doing the same thing anymore so we don't need the same same test for it and yeah I mean it's like any other code if if no",
    "start": "3015630",
    "end": "3022650"
  },
  {
    "text": "one know if no one understands it then you have an unmaintainable piece of code",
    "start": "3022650",
    "end": "3029059"
  },
  {
    "text": "the advantage is it's test so you can always throw it away you know you can",
    "start": "3029059",
    "end": "3034410"
  },
  {
    "text": "always replace it with a bunch of examples and you're good so which is",
    "start": "3034410",
    "end": "3040589"
  },
  {
    "text": "nice for doing things like bringing in new languages like F sharp as well you know it's like you can write the properties more expressively an F sharp",
    "start": "3040589",
    "end": "3046470"
  },
  {
    "text": "for production code people have valid concerns about hey no one knows F sharp yet we don't want production code we",
    "start": "3046470",
    "end": "3052980"
  },
  {
    "text": "can't maintain for something like this it's relatively easy to argue hey isn't this a great way to learn and if I ever",
    "start": "3052980",
    "end": "3059369"
  },
  {
    "text": "leave and no one else has bothered to pick it up well you've got some code you can delete next time it breaks you know",
    "start": "3059369",
    "end": "3065069"
  },
  {
    "text": "it's not kind of a big big issue because at the end of the day most of the value in tests is actually during the creation",
    "start": "3065069",
    "end": "3071609"
  },
  {
    "text": "process I mean it's nice to have regression tests as well but the majority of the benefit is actually",
    "start": "3071609",
    "end": "3076859"
  },
  {
    "text": "upfront it's whilst you're writing the code does",
    "start": "3076859",
    "end": "3082829"
  },
  {
    "text": "that yeah yes we saw got our tackler string",
    "start": "3082829",
    "end": "3088960"
  },
  {
    "text": "here I actually wrapped the valid key in a in a type as well but it's very",
    "start": "3088960",
    "end": "3095420"
  },
  {
    "text": "similar kind of thing there's our converters back and forth",
    "start": "3095420",
    "end": "3100580"
  },
  {
    "text": "between different bits so our tackler",
    "start": "3100580",
    "end": "3108230"
  },
  {
    "text": "string generator that's kind of the",
    "start": "3108230",
    "end": "3113450"
  },
  {
    "text": "equivalent of the the valid key generator bit in F sharp so this is kind",
    "start": "3113450",
    "end": "3121040"
  },
  {
    "text": "of what I wanted to show you is that this is what the syntax starts looking like an F sharp so so f sharp has this thing that's where you would kind of do",
    "start": "3121040",
    "end": "3128510"
  },
  {
    "text": "from in a link expression you use this let bang operator I that's kind of a",
    "start": "3128510",
    "end": "3136310"
  },
  {
    "text": "choice that was made and let bang we'll do different things depending on this",
    "start": "3136310",
    "end": "3141440"
  },
  {
    "text": "name here outside the curly brackets so if that said async let bang would expect",
    "start": "3141440",
    "end": "3147800"
  },
  {
    "text": "the thing on the right here to be an async and opener would be the result",
    "start": "3147800",
    "end": "3155840"
  },
  {
    "text": "that was awaited for the async if here I have the gen computational expression",
    "start": "3155840",
    "end": "3165440"
  },
  {
    "text": "that's what these these bits are called then let bang expects a generator on the right and the thing on the left is the",
    "start": "3165440",
    "end": "3172760"
  },
  {
    "text": "thing that was generated still making sense so far and the only thing to be",
    "start": "3172760",
    "end": "3179300"
  },
  {
    "text": "aware of here is that what you're kind of doing here with these gen computational expressions is the thing",
    "start": "3179300",
    "end": "3184760"
  },
  {
    "text": "you return here is not a single value you're actually returning a generator so",
    "start": "3184760",
    "end": "3191390"
  },
  {
    "text": "what you're building in this block here is you're building the logic to generate something you're not actually generating",
    "start": "3191390",
    "end": "3198500"
  },
  {
    "text": "at a particular value you're building up the recipe for for generating things and",
    "start": "3198500",
    "end": "3207500"
  },
  {
    "text": "then different testing framework but hopefully this looks very similar so we have in fact we don't even need any",
    "start": "3207500",
    "end": "3217089"
  },
  {
    "text": "any config on that one we just want to generate any values at all and you can",
    "start": "3217089",
    "end": "3224089"
  },
  {
    "text": "also do things in FS check like you can actually label your the different cases in your in your properties so as well as",
    "start": "3224089",
    "end": "3230569"
  },
  {
    "text": "telling you the the error that failed it will give you the the label that you've",
    "start": "3230569",
    "end": "3236210"
  },
  {
    "text": "assigned there when it fails so let's see if in six minutes we can have a",
    "start": "3236210",
    "end": "3243619"
  },
  {
    "text": "quick look how would go about generating something that actually tries to prove kind of the correctness of our function",
    "start": "3243619",
    "end": "3249079"
  },
  {
    "text": "rather than just kind of a simple property about it like you know it",
    "start": "3249079",
    "end": "3254839"
  },
  {
    "text": "doesn't throw or something like that so let's",
    "start": "3254839",
    "end": "3261549"
  },
  {
    "text": "yeah you want me to reset that",
    "start": "3271690",
    "end": "3275578"
  },
  {
    "text": "okay so let's have a look here this is what you were asking before about you know isn't that code read I'll glean",
    "start": "3295500",
    "end": "3301170"
  },
  {
    "text": "something you never want to use in production yes yes it is don't write code like that in production so what",
    "start": "3301170",
    "end": "3309450"
  },
  {
    "text": "what we kind of want to do here is that we know that if we just generate a model",
    "start": "3309450",
    "end": "3315030"
  },
  {
    "text": "and a template at random even if they're valid ones what do we expect the output",
    "start": "3315030",
    "end": "3321300"
  },
  {
    "text": "to be and if we just say two FS check okay generate me a model generate me a",
    "start": "3321300",
    "end": "3327480"
  },
  {
    "text": "template they're both valid give them to me and my property if we then try to write that property to say is the result",
    "start": "3327480",
    "end": "3333480"
  },
  {
    "text": "correct what would actually end up doing is we'd end up rewriting our production code because we'd have to do exactly the",
    "start": "3333480",
    "end": "3340230"
  },
  {
    "text": "same thing we'd have to parse the input we'd have to swap in all the values and then we'd have to go do we get the same result now that that kind of can be",
    "start": "3340230",
    "end": "3347400"
  },
  {
    "text": "valid one thing I've actually done which is quite fun is you can actually get two teams and we actually did this working",
    "start": "3347400",
    "end": "3353160"
  },
  {
    "text": "in different programming languages and we just wrote two implementations of the code and property based test them against each other which was kind of fun",
    "start": "3353160",
    "end": "3360720"
  },
  {
    "text": "as an exercise but not an especially efficient use of time in actually writing real code so what we do is we",
    "start": "3360720",
    "end": "3369900"
  },
  {
    "text": "kind of reverse that logic and go okay how about if we think about this the other way around how about if if we get",
    "start": "3369900",
    "end": "3375359"
  },
  {
    "text": "FS checked not just to tell us the inputs but also to tell us the expected output because in our generator we know",
    "start": "3375359",
    "end": "3383849"
  },
  {
    "text": "what data we're generating so we can use those property we can use those values",
    "start": "3383849",
    "end": "3389670"
  },
  {
    "text": "without having to do any parsing or anything like that we already have those because we're the ones generating them",
    "start": "3389670",
    "end": "3396380"
  },
  {
    "text": "so let's kind of have a think about how we might be able to do this so let's let's say that our property is going to",
    "start": "3396380",
    "end": "3402690"
  },
  {
    "text": "take this input of of I've got a template situation or a template context",
    "start": "3402690",
    "end": "3408270"
  },
  {
    "text": "here and it's got the two input fields but it also has the expected output I don't want generates",
    "start": "3408270",
    "end": "3417740"
  },
  {
    "text": "no sorry so if we have a look to our",
    "start": "3420180",
    "end": "3427920"
  },
  {
    "text": "property our property stays very simple because we want to render the text of the model in the template and then we expect the rendered text to equal the",
    "start": "3427920",
    "end": "3436440"
  },
  {
    "text": "expected text that we were given so that's great but how do we go about",
    "start": "3436440",
    "end": "3442290"
  },
  {
    "text": "doing that and this is where the code starts to become really really ugly if you try and write it as a link",
    "start": "3442290",
    "end": "3448530"
  },
  {
    "text": "expression and so mark Seaman did a whole talk about this yesterday which",
    "start": "3448530",
    "end": "3454200"
  },
  {
    "text": "slightly sir really is called dependency injection revisited I think but it's actually about how writing this type of",
    "start": "3454200",
    "end": "3460650"
  },
  {
    "text": "code in C sharp is is a bad idea and you should actually use the right tool for the job okay so let's have a look so we",
    "start": "3460650",
    "end": "3469800"
  },
  {
    "text": "want some some input data so we want to generate some key value pairs we have",
    "start": "3469800",
    "end": "3476700"
  },
  {
    "text": "already overridden this generator to only so if you remember we over rid the",
    "start": "3476700",
    "end": "3484020"
  },
  {
    "text": "default generator for the model so we can just say go off and generate us one",
    "start": "3484020",
    "end": "3490250"
  },
  {
    "text": "using this object command and that will that will use our overriding it would",
    "start": "3490250",
    "end": "3496200"
  },
  {
    "text": "generate us valid a valid model and then",
    "start": "3496200",
    "end": "3502440"
  },
  {
    "text": "we say okay so what what can each piece of the template look like well it can either look like a string that has no",
    "start": "3502440",
    "end": "3509010"
  },
  {
    "text": "tags in in which case the output should be the same as the input or it might be",
    "start": "3509010",
    "end": "3515250"
  },
  {
    "text": "a tag in which case the input should be like curly brackets and the tag name and the output should be the replacement",
    "start": "3515250",
    "end": "3522089"
  },
  {
    "text": "value so for a tag list section we're good we kind of have a generator for",
    "start": "3522089",
    "end": "3528299"
  },
  {
    "text": "this so what we're going to do is we're going to have a generator that returns a tuple of input and output for each type",
    "start": "3528299",
    "end": "3534510"
  },
  {
    "text": "of section so for a tag list section we generate the tag list string we return",
    "start": "3534510",
    "end": "3540180"
  },
  {
    "text": "the values and for a tagged section we return a tag and the replacement",
    "start": "3540180",
    "end": "3549880"
  },
  {
    "text": "and now I can say generate me a list of either one or the other then I can build",
    "start": "3549880",
    "end": "3555670"
  },
  {
    "text": "up a string of the expected inputs and a string of the expected outputs and then",
    "start": "3555670",
    "end": "3561970"
  },
  {
    "text": "I can return a model that has my data in and basically this is the thing I wants",
    "start": "3561970",
    "end": "3567100"
  },
  {
    "text": "to get to and that's good because it's almost exactly 20 past this idea that we can yes the generators become complex",
    "start": "3567100",
    "end": "3574330"
  },
  {
    "text": "yes they end up with a lot of logic in them but it is logic which you are it is enforced upon you as the person writing",
    "start": "3574330",
    "end": "3581500"
  },
  {
    "text": "the tests that this logic is independent of your actual production logic and it",
    "start": "3581500",
    "end": "3587170"
  },
  {
    "text": "can give you really nice confidence of things that you never would have thought of in your tests and one of the things I",
    "start": "3587170",
    "end": "3593350"
  },
  {
    "text": "do in the other talk which I will put up on the screen now is I actually go through a bunch of the kinds of errors",
    "start": "3593350",
    "end": "3598630"
  },
  {
    "text": "that you get that you weren't expecting how frustrating that can be on one hand and kind of how much of a game it can",
    "start": "3598630",
    "end": "3605350"
  },
  {
    "text": "compare on the other because rather than property rather than unit tests where you keep on having to write the next one",
    "start": "3605350",
    "end": "3610420"
  },
  {
    "text": "for your TDD with property based testings you just get the next error you",
    "start": "3610420",
    "end": "3615610"
  },
  {
    "text": "just write your one property and believe me it will take a while to to get all the the errors to go away so just quick",
    "start": "3615610",
    "end": "3622330"
  },
  {
    "text": "run through FS check is there that's my blog if you search for FS check on there you'll find a number of examples",
    "start": "3622330",
    "end": "3627880"
  },
  {
    "text": "including this talk with more examples with less details from a few years ago",
    "start": "3627880",
    "end": "3634770"
  },
  {
    "text": "and just a quick plug for my employer who do not used on it but do use property based testing who are a company",
    "start": "3634770",
    "end": "3640930"
  },
  {
    "text": "called no red ink and I think that's about it I would only have time for questions I'm afraid but come and find",
    "start": "3640930",
    "end": "3647350"
  },
  {
    "text": "me afterwards if you're interested thank you very much [Applause]",
    "start": "3647350",
    "end": "3657260"
  },
  {
    "text": "like",
    "start": "3665840",
    "end": "3668840"
  }
]