[
  {
    "start": "0",
    "end": "333000"
  },
  {
    "text": "it is 4/20 exactly and the room goes mostly quiet sorry",
    "start": "1650",
    "end": "8010"
  },
  {
    "text": "excellent and at this point in a day at a conference I usually ask people to",
    "start": "8010",
    "end": "14519"
  },
  {
    "text": "stand up and jump up and down but if I remember rightly if we do that here it will sound like you're machine-gunning me to death because of the way these",
    "start": "14519",
    "end": "20610"
  },
  {
    "text": "seats work so instead I don't need to get up have any of you seen the musical",
    "start": "20610",
    "end": "26820"
  },
  {
    "text": "return to the Forbidden Planet no ok it's Shakespeare's forgotten rock and",
    "start": "26820",
    "end": "32008"
  },
  {
    "text": "roll masterpiece slash sci-fi it's the tempest set in outer space and at one point they have to reverse the polarity",
    "start": "32009",
    "end": "38309"
  },
  {
    "text": "and the polarity reversal procedure goes like this everyone has to put their hands on the head go like this and then",
    "start": "38309",
    "end": "44910"
  },
  {
    "text": "go oh okay that was a rehearsal yeah we're going to get properly now okay",
    "start": "44910",
    "end": "50789"
  },
  {
    "text": "this is just so you've got some energy because there's a lot of code to follow and I tend to talk very quickly when I",
    "start": "50789",
    "end": "57899"
  },
  {
    "text": "have far more material than time which is the case okay so ready and push",
    "start": "57899",
    "end": "62909"
  },
  {
    "text": "harder push harder and oh right okay I",
    "start": "62909",
    "end": "69510"
  },
  {
    "text": "have fooled you into revealing that you are capable of making noise and I was at",
    "start": "69510",
    "end": "75900"
  },
  {
    "text": "Kathleen's talk earlier on which was fantastic but there were no questions pretty much no questions um you will all",
    "start": "75900",
    "end": "83310"
  },
  {
    "text": "do better if any of you starts asking questions okay are any of my regular hecklers here",
    "start": "83310",
    "end": "89960"
  },
  {
    "text": "what's the question so the the t-shirt says code like a girl and this was a",
    "start": "89960",
    "end": "96360"
  },
  {
    "text": "t-shirt that was recommended to me by someone on Twitter after they'd seen me wearing a he fishy t-shirt basically I",
    "start": "96360",
    "end": "104460"
  },
  {
    "text": "am phenomenally keen on diversity in tech I was very pleased to see the MDC",
    "start": "104460",
    "end": "109890"
  },
  {
    "text": "speaker list this year was you know getting better and better and I'm frankly still disappointed in the",
    "start": "109890",
    "end": "115920"
  },
  {
    "text": "attendee ratios I think we can do a lot of a lot better and the more diverse our",
    "start": "115920",
    "end": "121440"
  },
  {
    "text": "tech community is the better the ideas will be do you want to work with the best tools the best libraries the best",
    "start": "121440",
    "end": "128399"
  },
  {
    "text": "ideas that you possibly can of course you do that won't happen if half the world",
    "start": "128399",
    "end": "134310"
  },
  {
    "text": "isn't in room and then you've got other forms of",
    "start": "134310",
    "end": "140040"
  },
  {
    "text": "discrimination as well so this is to give the message that hate code like a girl because there's nothing wrong with",
    "start": "140040",
    "end": "145799"
  },
  {
    "text": "that okay cool",
    "start": "145799",
    "end": "151310"
  },
  {
    "text": "that may be the earliest thing to a talk I've ever received applause all right okay so it sounds like I don't have any",
    "start": "153170",
    "end": "160829"
  },
  {
    "text": "particularly regular hecklers and if I could ask you to reverse heckle as it were if any of you are in Damon Edwards",
    "start": "160829",
    "end": "168030"
  },
  {
    "text": "and David Fowler's talked earlier on they blame Barry dorans when something went wrong",
    "start": "168030",
    "end": "173220"
  },
  {
    "text": "I thought this was a thoroughly good model to follow so any problems I have if it doesn't compile blame Barry Doran",
    "start": "173220",
    "end": "180239"
  },
  {
    "text": "sees blow-dart on Twitter he won't mind at all okay I promise um right more",
    "start": "180239",
    "end": "187049"
  },
  {
    "text": "seriously the worse I present this the better it is for me in a way because I'm currently writing the fourth edition of",
    "start": "187049",
    "end": "193379"
  },
  {
    "text": "c-sharp in-depth and please buy the book basically it will go into everything I'm",
    "start": "193379",
    "end": "199739"
  },
  {
    "text": "going into in a lot more detail I'm nearly finished on the C sharp seven features and it's sort of 110 pages just",
    "start": "199739",
    "end": "207209"
  },
  {
    "text": "of C chart features I cannot read 110 pages worth of book out loud in an hour",
    "start": "207209",
    "end": "212729"
  },
  {
    "text": "so clearly there's more in the book than in this talk but it's kind of the same general picture and yeah there's",
    "start": "212729",
    "end": "220260"
  },
  {
    "text": "discount code if you use the discount code CTW NBC also 17 it's 40% of all",
    "start": "220260",
    "end": "226290"
  },
  {
    "text": "Manning books or you could buy many copies of my book okay right how many of you already have",
    "start": "226290",
    "end": "234120"
  },
  {
    "text": "Visual Studio 2017 installed this is very good for years I think I gave talks",
    "start": "234120",
    "end": "240900"
  },
  {
    "text": "on async for three years in a row at NBC and the first year it was kind of",
    "start": "240900",
    "end": "246120"
  },
  {
    "text": "reasonable that no one had played with it yet but by the second I want to play with it and by the third year sort of half the",
    "start": "246120",
    "end": "251609"
  },
  {
    "text": "people have played with it and so at least you can all use C top seven all right you can't necessarily use all the",
    "start": "251609",
    "end": "260159"
  },
  {
    "text": "features if you're targeting all the versions of the framework and don't want to include extra dependencies I will try",
    "start": "260159",
    "end": "267510"
  },
  {
    "text": "to remember to bring in to explain extra dependencies as they come up how many of you are actively",
    "start": "267510",
    "end": "275849"
  },
  {
    "text": "knowingly using c-sharp 7 features already far fewer ok so you have the",
    "start": "275849",
    "end": "281789"
  },
  {
    "text": "tools but not the knowledge this is probably the ideal situation for me to hopefully give you some knowledge this",
    "start": "281789",
    "end": "288930"
  },
  {
    "text": "is what we're going to talk about today we probably won't talk about all of it because there's huge amounts I will",
    "start": "288930",
    "end": "295440"
  },
  {
    "text": "point out two things in fact I'll reorder things two things that you probably don't care about oh yeah",
    "start": "295440",
    "end": "303870"
  },
  {
    "text": "whoever's doing screen could you yeah I'm definitely I'm down here this will be a really really difficult talk",
    "start": "303870",
    "end": "310740"
  },
  {
    "text": "without anything on monitor um dum dum dum okay there we go right so",
    "start": "310740",
    "end": "318840"
  },
  {
    "text": "yeah so this makes more sense so if you if you didn't catch it earlier below",
    "start": "318840",
    "end": "324840"
  },
  {
    "text": "dart is the person to blame okay but if it's if it's good then it's all me okay",
    "start": "324840",
    "end": "331699"
  },
  {
    "text": "right so this is what we'll be talking about I'm going to mention these now because I probably won't have claimed",
    "start": "331699",
    "end": "337259"
  },
  {
    "start": "333000",
    "end": "884000"
  },
  {
    "text": "later on ref local and referee turn are things that will let you do more",
    "start": "337259",
    "end": "342810"
  },
  {
    "text": "performant code particularly if you're working with large structs I don't particularly expect to ever use it other",
    "start": "342810",
    "end": "349650"
  },
  {
    "text": "than for talks like this if you're a unity dev or someone dealing with large",
    "start": "349650",
    "end": "355080"
  },
  {
    "text": "mutable threats because it's for some reason suitable in the codebase you're working on and you want to deal with",
    "start": "355080",
    "end": "361469"
  },
  {
    "text": "them efficiently then that's for you good luck and customizing return types",
    "start": "361469",
    "end": "367879"
  },
  {
    "text": "you kind of don't need to know about the language feature here because the asp.net core has team has built the one",
    "start": "367879",
    "end": "376139"
  },
  {
    "text": "custom async return type you will need which is value task of T and the cool",
    "start": "376139",
    "end": "381779"
  },
  {
    "text": "stuff is that you can define your own something task of key food tasks of T",
    "start": "381779",
    "end": "387449"
  },
  {
    "text": "and write factories and things but basically you can have an async method",
    "start": "387449",
    "end": "392879"
  },
  {
    "text": "that returns value tasks of T and value tasks is a value type as you'd expect it's really efficient if most of the",
    "start": "392879",
    "end": "399690"
  },
  {
    "text": "time the task will already have been completed okay I could probably spend if I you",
    "start": "399690",
    "end": "405659"
  },
  {
    "text": "know researched it properly I could probably spend the whole talk talking about custom async return plates instead",
    "start": "405659",
    "end": "410929"
  },
  {
    "text": "almost no one will need to know the language details so we'll concentrate on this section let's start with tuples",
    "start": "410929",
    "end": "419569"
  },
  {
    "text": "tuples are a way of composing values",
    "start": "419569",
    "end": "424699"
  },
  {
    "text": "where you can't be bothered to write your own pipe basically you know previously if you want to have something",
    "start": "424699",
    "end": "432479"
  },
  {
    "text": "composing an x value and the y value you've kind of declared your own point",
    "start": "432479",
    "end": "437849"
  },
  {
    "text": "class or point struct or whatever you could have used system couple and but",
    "start": "437849",
    "end": "443909"
  },
  {
    "text": "that sucks it sucks because a it's a class so you know you just want these",
    "start": "443909",
    "end": "449610"
  },
  {
    "text": "things that live together to live together in a simple way and you know if it's just a pair events do you really",
    "start": "449610",
    "end": "456809"
  },
  {
    "text": "want to create an object that's going to have more overhead than the pair events and probably even the reference assuming",
    "start": "456809",
    "end": "463979"
  },
  {
    "text": "a 64-bit CLR is the same size as the pair events would be wouldn't it be nice just to have a pair of int well tuples",
    "start": "463979",
    "end": "470759"
  },
  {
    "text": "let you do that um I'll give some sort of guidance later on but basically they",
    "start": "470759",
    "end": "478019"
  },
  {
    "text": "are to do with smashing together things with no encapsulation at all and that's",
    "start": "478019",
    "end": "483269"
  },
  {
    "text": "both a good thing and a bad thing who can tell me the sort of golden rules of value types anyone please shout out so",
    "start": "483269",
    "end": "493829"
  },
  {
    "text": "copy by value is sort of what happens there was a guideline over there it in",
    "start": "493829",
    "end": "500789"
  },
  {
    "text": "you to for mutable mutable seaton no no",
    "start": "500789",
    "end": "506180"
  },
  {
    "text": "you'll never write a mutable value type they're always immutable because mutable",
    "start": "506180",
    "end": "511829"
  },
  {
    "text": "value types are evil and likewise you know when you've got fields do you make your fields private or public you use",
    "start": "511829",
    "end": "518518"
  },
  {
    "text": "properties to encapsulate your fields or just expose the fields to the world protect it is",
    "start": "518519",
    "end": "525820"
  },
  {
    "text": "no just private always private you never have public fields you never have",
    "start": "525820",
    "end": "531400"
  },
  {
    "text": "mutable value types unless your value tupple okay so um the language feature",
    "start": "531400",
    "end": "539350"
  },
  {
    "text": "of tuples revolves around a CLR type called system value tuple which is in a",
    "start": "539350",
    "end": "545230"
  },
  {
    "text": "nougat package called system value tuple and version four point three point zero four whatever is in goodness those what",
    "start": "545230",
    "end": "551860"
  },
  {
    "text": "happened to 1.0 etc it's mutable it has public fields but it's okay I'll explain",
    "start": "551860",
    "end": "559240"
  },
  {
    "text": "to you later why it's okay let's have a look at some tuples so tuples as well as being value types",
    "start": "559240",
    "end": "568170"
  },
  {
    "text": "so better than system couple and they have language support language syntax",
    "start": "568170",
    "end": "573910"
  },
  {
    "text": "support otherwise I wouldn't be talking about them so let's have a look top of construction that's at Apple a couple of",
    "start": "573910",
    "end": "583990"
  },
  {
    "text": "imps as I was saying without before so it has two fields item one and item two",
    "start": "583990",
    "end": "591990"
  },
  {
    "text": "and so this would print out one and two and this this code is if I wrote it like",
    "start": "591990",
    "end": "599980"
  },
  {
    "text": "that equivalent to this this is the c-sharp compiler just converting this",
    "start": "599980",
    "end": "606070"
  },
  {
    "text": "topple literal into a call to a constructor but don't forget this is",
    "start": "606070",
    "end": "612070"
  },
  {
    "text": "still a value double value type so it's still sitting on the stack if I put that",
    "start": "612070",
    "end": "619090"
  },
  {
    "text": "back to long and make that to L it's still okay and I will say I could do an",
    "start": "619090",
    "end": "628530"
  },
  {
    "text": "int long topple one equals one two you",
    "start": "628530",
    "end": "633850"
  },
  {
    "text": "might be expecting that to construct a couple of int int if that were the type",
    "start": "633850",
    "end": "640450"
  },
  {
    "text": "of the the literal and then convert it somehow to a tuple of int long but the",
    "start": "640450",
    "end": "647260"
  },
  {
    "text": "compiler smarter than that it says well you've got a top of literal you're trying to convert it to an int long",
    "start": "647260",
    "end": "652570"
  },
  {
    "text": "supple I will just do the right thing for you so the compiler does nice things",
    "start": "652570",
    "end": "658210"
  },
  {
    "text": "too be efficient okay these are nasty old",
    "start": "658210",
    "end": "665800"
  },
  {
    "text": "like system couple forms it becomes significantly nicer when you give tupple",
    "start": "665800",
    "end": "672009"
  },
  {
    "text": "elements names so here we have a couple literal where we have a and B so here we",
    "start": "672009",
    "end": "680139"
  },
  {
    "text": "name couple elements in the same way as we name arguments within a tuple literal",
    "start": "680139",
    "end": "687129"
  },
  {
    "text": "so remember a couple literal is like an integer literal or like a string literal it's what you can do to sort of hard",
    "start": "687129",
    "end": "694420"
  },
  {
    "text": "code I'm building a couple now likewise you can define a tuple type if you don't",
    "start": "694420",
    "end": "701620"
  },
  {
    "text": "want to use var you can give names within the tupple type so sort of as if",
    "start": "701620",
    "end": "707560"
  },
  {
    "text": "it's like a parameter list so if you think if that looks like an argument list this looks like a parameter list",
    "start": "707560",
    "end": "713980"
  },
  {
    "text": "and it's it's slightly ashamed that we can't actually call methods passing a",
    "start": "713980",
    "end": "720040"
  },
  {
    "text": "tuple that corresponds to the argument list it would be a nice sort of duality",
    "start": "720040",
    "end": "725800"
  },
  {
    "text": "but we got so we have tuples have",
    "start": "725800",
    "end": "732759"
  },
  {
    "text": "elements they have fields of item one item two item three etc up to seven",
    "start": "732759",
    "end": "739649"
  },
  {
    "text": "there are eight value couple generic overloads as it were and we've got this",
    "start": "739649",
    "end": "746620"
  },
  {
    "text": "idea of a tuple type and that can have named parameters link elements as well a",
    "start": "746620",
    "end": "754680"
  },
  {
    "text": "and B don't actually exist they are an idea in the mind of the compiler and of",
    "start": "754680",
    "end": "762130"
  },
  {
    "text": "you what they mean is there like Java generics if any of you have used Java",
    "start": "762130",
    "end": "767199"
  },
  {
    "text": "generics you should know that an ArrayList of string at execution time is",
    "start": "767199",
    "end": "772240"
  },
  {
    "text": "just an ArrayList well likewise a tuple of int and long is just sorry a couple",
    "start": "772240",
    "end": "779410"
  },
  {
    "text": "of long a int B is just couple of long int at execution time okay that's the",
    "start": "779410",
    "end": "787449"
  },
  {
    "text": "only way things to work because we have one set of tuples types if I were to do one",
    "start": "787449",
    "end": "792950"
  },
  {
    "text": "the alternatives the couple types is use anonymous types that has the benefits of",
    "start": "792950",
    "end": "799190"
  },
  {
    "text": "you get names which you don't with system dot double but it has the downside of oh then it's it's on the",
    "start": "799190",
    "end": "805640"
  },
  {
    "text": "heat it's a whole object and you can't pass it between methods and things I'll",
    "start": "805640",
    "end": "812060"
  },
  {
    "text": "show you using methods in a minute so I could have done var a non equals nu a equals 1",
    "start": "812060",
    "end": "821600"
  },
  {
    "text": "B equals 2 and that's fine but that",
    "start": "821600",
    "end": "826610"
  },
  {
    "text": "creates a whole new type an internal type that the compiler is constructing for us and that doesn't happen with",
    "start": "826610",
    "end": "833810"
  },
  {
    "text": "tuples every tuple you need is already in the system value couple DLL and it's",
    "start": "833810",
    "end": "841910"
  },
  {
    "text": "generic and you'll get different generic instantiations as it were but that's a slightly different matter but that does",
    "start": "841910",
    "end": "847130"
  },
  {
    "text": "mean that these these names can't exist at execution time the compiler converts",
    "start": "847130",
    "end": "852910"
  },
  {
    "text": "anytime that I use a here well not on the in long sight if I use couple dot a",
    "start": "852910",
    "end": "861670"
  },
  {
    "text": "couple for dot a if I look at this with il Gotham it will be using item 1 ok so",
    "start": "861670",
    "end": "873590"
  },
  {
    "text": "it's just compiler magic but it's really useful compiler magic and it's useful",
    "start": "873590",
    "end": "879140"
  },
  {
    "text": "because it's fairly obvious what what happens within a single method but what",
    "start": "879140",
    "end": "886820"
  },
  {
    "start": "884000",
    "end": "1084000"
  },
  {
    "text": "about if I call so if I call a method that returns a tuple let's do some and",
    "start": "886820",
    "end": "898340"
  },
  {
    "text": "let's do minimax so as an example of where you might want to do this we're",
    "start": "898340",
    "end": "906950"
  },
  {
    "text": "going to have some integers values 1 2 5",
    "start": "906950",
    "end": "913370"
  },
  {
    "text": "10 minus 3 what and I can get them in easily yeah I can",
    "start": "913370",
    "end": "919829"
  },
  {
    "text": "do in main equals values men in Mexicans values Max and that's fine but that's",
    "start": "919829",
    "end": "927959"
  },
  {
    "text": "evaluated its run over that sequence twice and that's not good",
    "start": "927959",
    "end": "933389"
  },
  {
    "text": "wouldn't it be nicer if I could do int min in max min max ienumerable int these",
    "start": "933389",
    "end": "943800"
  },
  {
    "text": "can be generic of course values and I'm going to do for each it's racer equals",
    "start": "943800",
    "end": "954480"
  },
  {
    "text": "values that gets a numerator and if we don't have any will throw an exception",
    "start": "954480",
    "end": "967730"
  },
  {
    "text": "we throw a proper exception normally but otherwise we're going to start with",
    "start": "968600",
    "end": "975199"
  },
  {
    "text": "let's call it something in equals iterator current and temp max equals",
    "start": "975199",
    "end": "982279"
  },
  {
    "text": "iterator current I started on this for there's a reason why names are good but",
    "start": "982279",
    "end": "987720"
  },
  {
    "text": "I'm kind of going to be evolving this example to show a bunch of things so listen for everything not just the names",
    "start": "987720",
    "end": "994079"
  },
  {
    "text": "a good and we can do while it's rated",
    "start": "994079",
    "end": "1000889"
  },
  {
    "text": "move next and took min equals math dot",
    "start": "1000889",
    "end": "1007189"
  },
  {
    "text": "min it's like to maxify and it's rated",
    "start": "1007189",
    "end": "1012259"
  },
  {
    "text": "current and some min equals no",
    "start": "1012259",
    "end": "1017860"
  },
  {
    "text": "it just screws everything up when it doesn't type what I'm saying",
    "start": "1022780",
    "end": "1028110"
  },
  {
    "text": "blame Barry right and then after that I can return and earlier when we used a",
    "start": "1030690",
    "end": "1038140"
  },
  {
    "text": "couple literal we always have one two and they were constant values they don't have to be constants it's fine you can",
    "start": "1038140",
    "end": "1043900"
  },
  {
    "text": "do to mean something ax okay and then",
    "start": "1043900",
    "end": "1050560"
  },
  {
    "text": "let's print out instead of having these",
    "start": "1050560",
    "end": "1055810"
  },
  {
    "text": "two method calls will have farm in max equals min max did I call it min and Max",
    "start": "1055810",
    "end": "1062980"
  },
  {
    "text": "no values okay how about we make it static so I can actually call it and",
    "start": "1062980",
    "end": "1068730"
  },
  {
    "text": "then we can you console dot write line min min max dot what have I got",
    "start": "1068730",
    "end": "1077770"
  },
  {
    "text": "I've got min I I don't have to remember whether item 1 is the minimum or item 2",
    "start": "1077770",
    "end": "1082870"
  },
  {
    "text": "because imagine if this were somewhere else entirely it would be confusing so",
    "start": "1082870",
    "end": "1091600"
  },
  {
    "start": "1084000",
    "end": "1219000"
  },
  {
    "text": "names are so so important and we'll see in a minute just how important the",
    "start": "1091600",
    "end": "1096760"
  },
  {
    "text": "language team believes them to be let's just prove that this works or find the",
    "start": "1096760",
    "end": "1101830"
  },
  {
    "text": "bug that we can blame both it blowed up for what did I call it min and Max right",
    "start": "1101830",
    "end": "1107740"
  },
  {
    "text": "minimum of minus 3 and maximum of 10 apologies to those near the back if that's hard to read and would take too",
    "start": "1107740",
    "end": "1114940"
  },
  {
    "text": "long to fix so yeah a min of minus 3 in a max of 10 looks kind of good right so",
    "start": "1114940",
    "end": "1122160"
  },
  {
    "text": "so far we've proved that the names here",
    "start": "1122160",
    "end": "1127900"
  },
  {
    "text": "are also available here this is a really good thing and at this point we've",
    "start": "1127900",
    "end": "1133660"
  },
  {
    "text": "already blown past what you can do with anonymous types because you can't return an anonymous type from a method because",
    "start": "1133660",
    "end": "1140530"
  },
  {
    "text": "how would you declare it you put the name and it's anonymous it doesn't have a name it's kind of the problem so this",
    "start": "1140530",
    "end": "1147940"
  },
  {
    "text": "is why this exists really now what if we",
    "start": "1147940",
    "end": "1153010"
  },
  {
    "text": "done fact that sort of imagine that you've",
    "start": "1153010",
    "end": "1159660"
  },
  {
    "text": "got lots of lines of code you know",
    "start": "1159660",
    "end": "1166890"
  },
  {
    "text": "you're meant to return it up all but you know you've got loads of stuff right well you can put the tupple names in the",
    "start": "1166890",
    "end": "1174390"
  },
  {
    "text": "literal as well so max isn't max mean is 2 min and suddenly the compiler at least",
    "start": "1174390",
    "end": "1180390"
  },
  {
    "text": "gives you a little warning saying well it's actually saying I'm ignoring it",
    "start": "1180390",
    "end": "1186800"
  },
  {
    "text": "you're allowed to do that but by the way you're giving a different couple element",
    "start": "1186800",
    "end": "1193920"
  },
  {
    "text": "name to the one that I'm about to return so this is one of those things that it's a warning you almost certainly want to",
    "start": "1193920",
    "end": "1200160"
  },
  {
    "text": "take note of and it goes away if you use the right values the right names so this",
    "start": "1200160",
    "end": "1206040"
  },
  {
    "text": "is a really good way when you're using tuples and you can do this to make sure",
    "start": "1206040",
    "end": "1211350"
  },
  {
    "text": "that you never return the wrong thing however I said that tuples are mutable",
    "start": "1211350",
    "end": "1217350"
  },
  {
    "text": "value types so why don't we just you know why have we got two variables here",
    "start": "1217350",
    "end": "1222530"
  },
  {
    "start": "1219000",
    "end": "1466000"
  },
  {
    "text": "let's have one variable that's a bag of variables how about we have var min max",
    "start": "1222530",
    "end": "1231150"
  },
  {
    "text": "equals min iterator current max iterator",
    "start": "1231150",
    "end": "1237600"
  },
  {
    "text": "current and now we can say instead of",
    "start": "1237600",
    "end": "1244980"
  },
  {
    "text": "having two assignments we can have a single assignment that says our new value is math dot min of min max dot min",
    "start": "1244980",
    "end": "1256800"
  },
  {
    "text": "and it's rated current you know what let's have a little local current equals",
    "start": "1256800",
    "end": "1262860"
  },
  {
    "text": "iterator current",
    "start": "1262860",
    "end": "1265730"
  },
  {
    "text": "and the second element is math max min",
    "start": "1268110",
    "end": "1275549"
  },
  {
    "text": "max max current I'm going to undo in a",
    "start": "1275549",
    "end": "1285090"
  },
  {
    "text": "sec because I want to demonstrate something different and now we can just return min max okay so I said I was",
    "start": "1285090",
    "end": "1296279"
  },
  {
    "text": "going to use the fact that these are mutable value types I've now failed to do so what I should have done is go via",
    "start": "1296279",
    "end": "1301769"
  },
  {
    "text": "a set a second step which you know we can make it the the third step that's fine we can just mutate a bit of we're",
    "start": "1301769",
    "end": "1312980"
  },
  {
    "text": "changing both of the variables within this couple so it kind of I prefer",
    "start": "1312980",
    "end": "1318539"
  },
  {
    "text": "changing the whole thing in one step but these are all basically equivalent so",
    "start": "1318539",
    "end": "1330059"
  },
  {
    "text": "this is a good way of saying we had two variables and this is how I want you to",
    "start": "1330059",
    "end": "1335220"
  },
  {
    "text": "be thinking about tuples we had two variables but they're related to each",
    "start": "1335220",
    "end": "1340289"
  },
  {
    "text": "other we haven't really got encapsulation but we're sort of",
    "start": "1340289",
    "end": "1345529"
  },
  {
    "text": "pretending that we have temporarily we're associating them together we could easily have some other tuples",
    "start": "1345529",
    "end": "1353220"
  },
  {
    "text": "representing other things we might have some and count those kind of belong together and you know we could smush them into",
    "start": "1353220",
    "end": "1360779"
  },
  {
    "text": "one couple of four things or two tuples of two it's fine they are bags of variables while they're variable so the",
    "start": "1360779",
    "end": "1368309"
  },
  {
    "text": "min max variable is a bag of variables the value we're returning is a bag of",
    "start": "1368309",
    "end": "1374250"
  },
  {
    "text": "values so think of a tuple as a bag with stuff in and when I think about",
    "start": "1374250",
    "end": "1382429"
  },
  {
    "text": "variables in general I think of them as like pieces of paper a piece of paper with a value and a name",
    "start": "1382429",
    "end": "1388260"
  },
  {
    "text": "and a type and a topple is like having two of those pieces of paper and instead",
    "start": "1388260",
    "end": "1394200"
  },
  {
    "text": "of each of them having their own separate type sorry separate piece of paper we're sort of joining the pieces",
    "start": "1394200",
    "end": "1400710"
  },
  {
    "text": "together say this as a whole is one thing that's got an overall name and each bit of it",
    "start": "1400710",
    "end": "1407080"
  },
  {
    "text": "can also have names but they're optional even though they are optional I would",
    "start": "1407080",
    "end": "1412360"
  },
  {
    "text": "personally recommend that you almost always use them if you find yourself using item 1 and item 2 then think about",
    "start": "1412360",
    "end": "1419919"
  },
  {
    "text": "would your code not be clearer to read if you did have names there are some",
    "start": "1419919",
    "end": "1428679"
  },
  {
    "text": "other interesting things let's let's talk a little bit more about names and plates I've mentioned that their system",
    "start": "1428679",
    "end": "1434740"
  },
  {
    "text": "value tupple and the way to think about the various types is that there are language types and there are CLR types",
    "start": "1434740",
    "end": "1443980"
  },
  {
    "text": "and the language types are different types but they there's an identity",
    "start": "1443980",
    "end": "1449409"
  },
  {
    "text": "conversion between different couple types that only differ by element names",
    "start": "1449409",
    "end": "1455830"
  },
  {
    "text": "or where there's an element-wise implicit conversion so there's a let me",
    "start": "1455830",
    "end": "1463330"
  },
  {
    "text": "show it's really easy to get this very slightly wrong and I really don't want",
    "start": "1463330",
    "end": "1469030"
  },
  {
    "start": "1466000",
    "end": "1567000"
  },
  {
    "text": "to so we can have an implicit conversion",
    "start": "1469030",
    "end": "1474250"
  },
  {
    "text": "from any tuple type to another tuple type where there's an element-wise",
    "start": "1474250",
    "end": "1481559"
  },
  {
    "text": "implicit conversion so there's in this case I'm showing from couple literals",
    "start": "1481559",
    "end": "1487179"
  },
  {
    "text": "but it could be if I created a whole couple so if I have far in stuff all",
    "start": "1487179",
    "end": "1497049"
  },
  {
    "text": "equals 10 - ok let's even make it clearer long long long double equals in",
    "start": "1497049",
    "end": "1509020"
  },
  {
    "text": "purple okay this is an implicit conversion because there's an implicit",
    "start": "1509020",
    "end": "1515110"
  },
  {
    "text": "conversion from int along and from this input this long and it can be a",
    "start": "1515110",
    "end": "1520960"
  },
  {
    "text": "user-defined implicit conversion as well so for example we can go from a pair of",
    "start": "1520960",
    "end": "1526539"
  },
  {
    "text": "names that are strings to a pair of namespaces that are x namespace because",
    "start": "1526539",
    "end": "1531940"
  },
  {
    "text": "there's an implicit conversion from string to x namespace so that's an implicit conversion but it",
    "start": "1531940",
    "end": "1538780"
  },
  {
    "text": "does say I'm taking these values and making a new bag of values okay there's",
    "start": "1538780",
    "end": "1546490"
  },
  {
    "text": "also an identity conversion and identity",
    "start": "1546490",
    "end": "1551620"
  },
  {
    "text": "conversions are not new they're they've existed for various things around",
    "start": "1551620",
    "end": "1558370"
  },
  {
    "text": "covariance and also between dynamic and object so just as you could have a",
    "start": "1558370",
    "end": "1566280"
  },
  {
    "text": "dictionary of object dynamic foo equals new dictionary dynamic object okay you",
    "start": "1566280",
    "end": "1579670"
  },
  {
    "start": "1567000",
    "end": "1649000"
  },
  {
    "text": "don't want to but you could fingers crossed",
    "start": "1579670",
    "end": "1584830"
  },
  {
    "text": "yes that's fine you could do this between two tuple types two language",
    "start": "1584830",
    "end": "1591430"
  },
  {
    "text": "tuple types where the element types are the same but the names can be different",
    "start": "1591430",
    "end": "1596560"
  },
  {
    "text": "and the way to remember this is an identity conversion is one that the CLR",
    "start": "1596560",
    "end": "1602440"
  },
  {
    "text": "has no idea about so when I do this as far as the CLR is concerned it will",
    "start": "1602440",
    "end": "1608950"
  },
  {
    "text": "create a dictionary of object to object because dynamic doesn't exist in the CLR",
    "start": "1608950",
    "end": "1614290"
  },
  {
    "text": "s mind so an identity conversion is one where if you ask at runtime you can't",
    "start": "1614290",
    "end": "1620350"
  },
  {
    "text": "tell the difference and that's where the fact that there is only system value tupple and it doesn't know whether you",
    "start": "1620350",
    "end": "1626620"
  },
  {
    "text": "originally had element names or not that's why there's an identity conversion so anywhere in the language",
    "start": "1626620",
    "end": "1633280"
  },
  {
    "text": "that requires an identity conversion we'll see it however there's this one weird anomaly which I think was probably",
    "start": "1633280",
    "end": "1640210"
  },
  {
    "text": "a good idea and would have been an even better idea if they've thought of it like 15 years ago which is in terms of",
    "start": "1640210",
    "end": "1647740"
  },
  {
    "text": "overrides so the names are preserved for well we saw calling a method you could",
    "start": "1647740",
    "end": "1654910"
  },
  {
    "text": "be calling a method in a different assembly and the names would still come across because they're preserved in",
    "start": "1654910",
    "end": "1661180"
  },
  {
    "text": "attributes and I'm not going to go into the details of how the attributes work but basically that works for return",
    "start": "1661180",
    "end": "1667630"
  },
  {
    "text": "values and for mutters you even though a value of",
    "start": "1667630",
    "end": "1673220"
  },
  {
    "text": "system values Apple doesn't have the names at execution time the metadata in the class still knows what it was meant",
    "start": "1673220",
    "end": "1679650"
  },
  {
    "text": "to be and the compiler insists that if",
    "start": "1679650",
    "end": "1687210"
  },
  {
    "text": "you're overriding something you don't start changing names so even though I",
    "start": "1687210",
    "end": "1693090"
  },
  {
    "text": "can do tuples tupple original and tupple",
    "start": "1693090",
    "end": "1699570"
  },
  {
    "text": "override okay that's okay even though it can screw up our if you if you specify",
    "start": "1699570",
    "end": "1708840"
  },
  {
    "text": "argument names it can screw things up",
    "start": "1708840",
    "end": "1714050"
  },
  {
    "text": "I'm allowed to do that what I can't do is this so the error message is couple",
    "start": "1714050",
    "end": "1722670"
  },
  {
    "text": "names and override derived foo int a and B cannot change couple element names when overriding inherited member so this",
    "start": "1722670",
    "end": "1729750"
  },
  {
    "text": "is this is kind of weird this is c-sharp being stricter about something that is",
    "start": "1729750",
    "end": "1735000"
  },
  {
    "text": "sort of a figment of our imagination than it is with stuff that's rather more",
    "start": "1735000",
    "end": "1740280"
  },
  {
    "text": "concrete and available via normal reflection and that the CLR knows about okay in the interest of time because Wow",
    "start": "1740280",
    "end": "1749340"
  },
  {
    "text": "halfway I would like to move off couples does anybody have any questions about tuples before I do yes",
    "start": "1749340",
    "end": "1759500"
  },
  {
    "text": "will the name give the right name in reflection no so if you were to get",
    "start": "1763540",
    "end": "1769970"
  },
  {
    "text": "topple over I'd as a parameter sorry Adam the member info parameter info and",
    "start": "1769970",
    "end": "1776210"
  },
  {
    "text": "asked for its type it will give you system value supple if you ask for the",
    "start": "1776210",
    "end": "1781730"
  },
  {
    "text": "attributes applied to that parameter info you will find something that is couple element names or something like",
    "start": "1781730",
    "end": "1787520"
  },
  {
    "text": "that so you can reconstruct it via reflection but you would have to be doing so yourself and it gets hairy when",
    "start": "1787520",
    "end": "1794630"
  },
  {
    "text": "there are more than eight parameters that ah right so can I get so you're",
    "start": "1794630",
    "end": "1802520"
  },
  {
    "text": "saying could I do let's a couple fields and no right so if",
    "start": "1802520",
    "end": "1810260"
  },
  {
    "text": "I do here t1 get type get field X that",
    "start": "1810260",
    "end": "1817130"
  },
  {
    "text": "will say note that doesn't exist item 1 and item 2 will exist but X does not",
    "start": "1817130",
    "end": "1823120"
  },
  {
    "text": "because it's the same t1 get type equals",
    "start": "1823120",
    "end": "1828620"
  },
  {
    "text": "t2 get tight there they are the exact same type which is system value tupple",
    "start": "1828620",
    "end": "1834320"
  },
  {
    "text": "int int okay so there's no way that they could have different things and they",
    "start": "1834320",
    "end": "1839870"
  },
  {
    "text": "could have built it that way and you have horrible type aliasing between",
    "start": "1839870",
    "end": "1844970"
  },
  {
    "text": "assemblies and all kinds of nasty stuff and it would be much more expensive in terms of loading so many more types this",
    "start": "1844970",
    "end": "1850730"
  },
  {
    "text": "is a definite pros and cons thing maybe if tuples have been seen to be",
    "start": "1850730",
    "end": "1856400"
  },
  {
    "text": "important way way ago maybe the CLR could have its own knowledge of them and have some sort",
    "start": "1856400",
    "end": "1863210"
  },
  {
    "text": "of lightweight kind of just-in-time thing but no and that's why it's it's really important to understand this is",
    "start": "1863210",
    "end": "1869540"
  },
  {
    "text": "what the language knows about and what I'll see when I'm writing source code and this is what's available an execution claim and in particular that's",
    "start": "1869540",
    "end": "1876350"
  },
  {
    "text": "one of the nice things I think about named pipes if I'm just wanting to do some Diagnostics I will stick in a named",
    "start": "1876350",
    "end": "1882380"
  },
  {
    "text": "type dump it out to the console and it comes up with property name equals property value and that's lovely value",
    "start": "1882380",
    "end": "1889250"
  },
  {
    "text": "couple does have it does equals it does structural comparison it does override",
    "start": "1889250",
    "end": "1895070"
  },
  {
    "text": "to string it can only give you item1 item2 in fact it doesn't bother showing item1 item2 it",
    "start": "1895070",
    "end": "1900260"
  },
  {
    "text": "just puts the values in a comma-separated list there was one other thing I was going to give which was some",
    "start": "1900260",
    "end": "1906559"
  },
  {
    "text": "guidance around using tuples which is don't put them in your public API yet",
    "start": "1906559",
    "end": "1912860"
  },
  {
    "text": "okay then you certainly I'm still figuring out where it makes sense to use",
    "start": "1912860",
    "end": "1918500"
  },
  {
    "text": "them and my guess is other people will be too they offer no encapsulation at",
    "start": "1918500",
    "end": "1924529"
  },
  {
    "text": "all so if you create a class to represent this thing I'm returning to you you can add extra properties to that",
    "start": "1924529",
    "end": "1932450"
  },
  {
    "text": "class later on if you return if you say you're returning a tuple that's exactly what you're returning and people will be",
    "start": "1932450",
    "end": "1940490"
  },
  {
    "text": "able to mutate stuff and it destroys a bunch of encapsulation things it's really a shorthand for I can't be",
    "start": "1940490",
    "end": "1947149"
  },
  {
    "text": "bothered to encapsulate this that's a good thing because for the effort of",
    "start": "1947149",
    "end": "1952760"
  },
  {
    "text": "encapsulating something and writing tests and it goes on and is time that you could be spent doing something else",
    "start": "1952760",
    "end": "1959590"
  },
  {
    "text": "but you don't want to pay the price for not doing it by exposing it publicly so",
    "start": "1959590",
    "end": "1965390"
  },
  {
    "text": "I would personally say keep it internal for the moment you know within one class",
    "start": "1965390",
    "end": "1970490"
  },
  {
    "text": "if you decide later on to encapsulate stuff as a class then that's going to be easy within a whole assembly it's going",
    "start": "1970490",
    "end": "1977720"
  },
  {
    "text": "to be slightly trickier but but still feasible but if your code has escaped to",
    "start": "1977720",
    "end": "1983419"
  },
  {
    "text": "other people then it's going to be much much harder okay let's talk about",
    "start": "1983419",
    "end": "1990110"
  },
  {
    "text": "deconstruction so so far I've shown you composing a bag of variables or a bag of",
    "start": "1990110",
    "end": "1996440"
  },
  {
    "text": "values what about if we want to deconstruct stuff instead let's start off by deconstructing what we have first",
    "start": "1996440",
    "end": "2003309"
  },
  {
    "text": "constructed so if we look at couple deconstruction here we have a method",
    "start": "2003309",
    "end": "2009429"
  },
  {
    "start": "2004000",
    "end": "2152000"
  },
  {
    "text": "that returns a couple okay it doesn't matter what our return statement was I'm",
    "start": "2009429",
    "end": "2015010"
  },
  {
    "text": "just creating a tuple previously let me",
    "start": "2015010",
    "end": "2020470"
  },
  {
    "text": "just show you know deconstruction our couple equals create couple with",
    "start": "2020470",
    "end": "2028169"
  },
  {
    "text": "deconstruction we are declaring three different variables in one go okay it",
    "start": "2028169",
    "end": "2038309"
  },
  {
    "text": "really is equivalent to this code here where we get the tupple and then we",
    "start": "2038309",
    "end": "2045239"
  },
  {
    "text": "deconstruct the a the B and the C you don't have to do it as far like that you",
    "start": "2045239",
    "end": "2050309"
  },
  {
    "text": "can do int a int B and let's go that's",
    "start": "2050309",
    "end": "2055648"
  },
  {
    "text": "going to be a string but let's make B along and it just says well I had a",
    "start": "2055649",
    "end": "2061440"
  },
  {
    "text": "couple with an int in I can convert into long that's fine no problem what you",
    "start": "2061440",
    "end": "2066628"
  },
  {
    "text": "can't currently do but I think they may be planning it for c-sharp 7.2 is",
    "start": "2066629",
    "end": "2074388"
  },
  {
    "text": "something like that and do partially I want to assign things and partially I",
    "start": "2074389",
    "end": "2080849"
  },
  {
    "text": "want to declare new values what you can do if I remember rightly and I really hope I do let's not bother giving",
    "start": "2080849",
    "end": "2087240"
  },
  {
    "text": "anything values to start with but you can do I don't want to declare any variables I just want to do assignments",
    "start": "2087240",
    "end": "2094040"
  },
  {
    "text": "yes/no squiggles so you know maybe you've got a B and C from other things",
    "start": "2094040",
    "end": "2100619"
  },
  {
    "text": "or maybe you've got default values or whatever it is you can assign to all three of them in one go",
    "start": "2100619",
    "end": "2106470"
  },
  {
    "text": "and that's tupple deconstruction and that has built in language support but",
    "start": "2106470",
    "end": "2115230"
  },
  {
    "text": "that's not the end of deconstruction they're unhappy with how one",
    "start": "2115230",
    "end": "2120270"
  },
  {
    "text": "deconstructs tuples I haven't gone into details of exactly when you would want to I will let you figure that out for",
    "start": "2120270",
    "end": "2126510"
  },
  {
    "text": "yourself because yeah there's a lot of features to go through but everyone happy with the idea of we took something that was about the simplest way of",
    "start": "2126510",
    "end": "2134730"
  },
  {
    "text": "composing things that you can have which is a tupple and we extracted from it either three new variables or three new",
    "start": "2134730",
    "end": "2141900"
  },
  {
    "text": "values for existing variables everyone happy okay we can go from that to",
    "start": "2141900",
    "end": "2149059"
  },
  {
    "text": "deconstructing and other things so let's have a look at",
    "start": "2149059",
    "end": "2155910"
  },
  {
    "start": "2152000",
    "end": "2335000"
  },
  {
    "text": "this D constructible class so here we've got three properties and to deconstruct",
    "start": "2155910",
    "end": "2164099"
  },
  {
    "text": "methods okay so deconstruct becomes a special name it's not a keyword or even a",
    "start": "2164099",
    "end": "2170780"
  },
  {
    "text": "contextual keyword it's a special name in the same way that gets a numerator and get away Terr",
    "start": "2170780",
    "end": "2175859"
  },
  {
    "text": "are if you have a deconstruct method that is void and only has out for",
    "start": "2175859",
    "end": "2186329"
  },
  {
    "text": "amateurs and is accessible and is non generic for complicated reasons then you",
    "start": "2186329",
    "end": "2192780"
  },
  {
    "text": "can use it for deconstruction so if I create a deconstruct a ball I can give",
    "start": "2192780",
    "end": "2198060"
  },
  {
    "text": "it a message and an X these are just regular properties I can deconstruct that to carried a message",
    "start": "2198060",
    "end": "2205619"
  },
  {
    "text": "this is assigning to existing variables here we've got new variables and notes",
    "start": "2205619",
    "end": "2214829"
  },
  {
    "text": "how I can deconstruct two different ways I've got to deconstruct methods and I",
    "start": "2214829",
    "end": "2220980"
  },
  {
    "text": "can use overload resolution or rather the compiler can use overload resolution to just say hey I'll allow get some",
    "start": "2220980",
    "end": "2227550"
  },
  {
    "text": "extra some new variables and that's just",
    "start": "2227550",
    "end": "2233270"
  },
  {
    "text": "regular and deconstructors so a regular overload resolution you may be wondering",
    "start": "2233270",
    "end": "2239579"
  },
  {
    "text": "why these are out parameters rather than why doesn't the deconstruct method just return a tuple well imagine if we wanted",
    "start": "2239579",
    "end": "2247980"
  },
  {
    "text": "to do this suppose we had suppose it was called topple deconstruct we could do public",
    "start": "2247980",
    "end": "2254160"
  },
  {
    "text": "tuples deconstruct int X in the string",
    "start": "2254160",
    "end": "2259950"
  },
  {
    "text": "message and let's just return X message",
    "start": "2259950",
    "end": "2268160"
  },
  {
    "text": "and sorry bomb this looks really weird",
    "start": "2268840",
    "end": "2277820"
  },
  {
    "text": "the first thing you you look at it okay because it looks like I've got the parameter list at the wrong place which is what I know I was falling into the",
    "start": "2277820",
    "end": "2284870"
  },
  {
    "text": "trap myself this is not a parameter list this is a return type doesn't it look",
    "start": "2284870",
    "end": "2290060"
  },
  {
    "text": "like a return type no it looks like a parameter list that's a tupple return type if I just done it as int string it",
    "start": "2290060",
    "end": "2296300"
  },
  {
    "text": "might have looked more like a return type but then it would have been kind of harder to use but if I now try to do int",
    "start": "2296300",
    "end": "2306350"
  },
  {
    "text": "X string message exception error couple deconstruct anyone see what the problem",
    "start": "2306350",
    "end": "2314570"
  },
  {
    "text": "is going to be Palin overload on return",
    "start": "2314570",
    "end": "2323660"
  },
  {
    "text": "type I heard it was that you yeah yeah so you can't do that you're not allowed to overload just by return type whereas",
    "start": "2323660",
    "end": "2330350"
  },
  {
    "text": "if you've got out parameters it's all good I would just like to point out because I",
    "start": "2330350",
    "end": "2337070"
  },
  {
    "start": "2335000",
    "end": "2730000"
  },
  {
    "text": "keep on thinking oh I wonder if I can know that's a stupid idea you can't do",
    "start": "2337070",
    "end": "2342200"
  },
  {
    "text": "if I've got D constructible D equals let's just copy this",
    "start": "2342200",
    "end": "2348190"
  },
  {
    "text": "if you do VAR d 2 equals B and think I would like to be construct and have D 2",
    "start": "2353720",
    "end": "2360170"
  },
  {
    "text": "XV 2 dot no this is just a regular assignment this isn't going to do deconstruction every so often I think",
    "start": "2360170",
    "end": "2366620"
  },
  {
    "text": "our template just use our no it clearly just isn't going to work because that",
    "start": "2366620",
    "end": "2372290"
  },
  {
    "text": "would be a regular assignment okay so this is doing exactly the same thing as",
    "start": "2372290",
    "end": "2379610"
  },
  {
    "text": "before with tuples but in this case with our own custom classes what if we wanted",
    "start": "2379610",
    "end": "2385250"
  },
  {
    "text": "to do it with somebody else's classes now I'm a date-time geek so naturally",
    "start": "2385250",
    "end": "2391100"
  },
  {
    "text": "when I start thinking examples take time immediately comes to mind but I think",
    "start": "2391100",
    "end": "2396140"
  },
  {
    "text": "it's kind of reasonable that we may well want to deconstruct a date type of some description and we'll use systems or",
    "start": "2396140",
    "end": "2401960"
  },
  {
    "text": "bake time for the moment in reality of course all of you would use no time right but if you if you have to use",
    "start": "2401960",
    "end": "2408200"
  },
  {
    "text": "system take time for some reason wouldn't it be nice if you could just say I just want to get the Year month and day out and that's clearly the order",
    "start": "2408200",
    "end": "2414980"
  },
  {
    "text": "in which it should deconstruct and we can because I mentioned that deconstruct",
    "start": "2414980",
    "end": "2422030"
  },
  {
    "text": "was a special name like get away tur and that's exactly the same Jo I have actually given that my example is for no",
    "start": "2422030",
    "end": "2430250"
  },
  {
    "text": "time but let's make it date/time and it'll all just compile and we can just",
    "start": "2430250",
    "end": "2436490"
  },
  {
    "text": "use today equals date time today",
    "start": "2436490",
    "end": "2442660"
  },
  {
    "text": "darn it yep no I need date/time there ah",
    "start": "2448150",
    "end": "2456080"
  },
  {
    "text": "function key was locked down that explains lots of things right I",
    "start": "2456080",
    "end": "2461390"
  },
  {
    "text": "feel dirty I need a shower use no dirt okay okay",
    "start": "2461390",
    "end": "2467880"
  },
  {
    "text": "and never used a time dot state anyway you can see the names that I've given",
    "start": "2467880",
    "end": "2474660"
  },
  {
    "text": "here aren't the same names as I've got in here but the fact that I think if I",
    "start": "2474660",
    "end": "2480960"
  },
  {
    "text": "hover over now it's not showing me but we're deconstructing into a year month",
    "start": "2480960",
    "end": "2486390"
  },
  {
    "text": "and day and I'm doing this just by having a deconstruct method as if I created it on the type itself but it's",
    "start": "2486390",
    "end": "2493020"
  },
  {
    "text": "an extension method and this is goodness",
    "start": "2493020",
    "end": "2499280"
  },
  {
    "text": "there is one downside of deconstruction which I still don't fully understand and",
    "start": "2499280",
    "end": "2506900"
  },
  {
    "text": "can you see any tuples here in this code",
    "start": "2506900",
    "end": "2513440"
  },
  {
    "text": "nope there are none if you try to compile this code in a new project that doesn't",
    "start": "2513440",
    "end": "2520500"
  },
  {
    "text": "have a reference assistant al you tupple the compiler will complain at you you",
    "start": "2520500",
    "end": "2525810"
  },
  {
    "text": "have to have a reference for system value couple if you're not using tuples anywhere it will happily emit an",
    "start": "2525810",
    "end": "2532170"
  },
  {
    "text": "assembly that doesn't refer to system value tupple but as a compiler implementation detail you need to have a",
    "start": "2532170",
    "end": "2539400"
  },
  {
    "text": "reference to it I filed the bug apparently it was deliberate I'm not the only one who finds this annoying so",
    "start": "2539400",
    "end": "2545850"
  },
  {
    "text": "fingers crossed it might get fixed right so that's deconstruction I'm just trying",
    "start": "2545850",
    "end": "2554430"
  },
  {
    "text": "to think of the suitable order yeah I think I know where we'll go next does anyone have any more questions on",
    "start": "2554430",
    "end": "2559950"
  },
  {
    "text": "deconstruction nope okay let's talk about out parameters I",
    "start": "2559950",
    "end": "2565320"
  },
  {
    "text": "seem to have a load of unsaved code let's just save everything hope sorry",
    "start": "2565320",
    "end": "2572220"
  },
  {
    "text": "question yeah sure ah yes sorry well done thank you if you",
    "start": "2572220",
    "end": "2581090"
  },
  {
    "text": "want to deconstruct things and you don't really care about all the beats so for a",
    "start": "2581090",
    "end": "2587750"
  },
  {
    "text": "start sometimes you should think is the construction appropriate here but there's what's called a disk our",
    "start": "2587750",
    "end": "2593600"
  },
  {
    "text": "variable of underscore and it has to be exactly underscore I think let's try underscore ohno ohno knows",
    "start": "2593600",
    "end": "2602600"
  },
  {
    "text": "that they'll have a red squiggly so underscore has become a special name which means I don't care I'm explicitly",
    "start": "2602600",
    "end": "2609740"
  },
  {
    "text": "not caring so here I'm not allowed to do this let's make it slightly clearer if I do X X and X X again that doesn't work",
    "start": "2609740",
    "end": "2617990"
  },
  {
    "text": "because that is declaring two variables called X X and that's not allowed",
    "start": "2617990",
    "end": "2623050"
  },
  {
    "text": "whereas I can have as many things as I like out of interest does it stop me from being really stupid okay if you say",
    "start": "2623050",
    "end": "2630170"
  },
  {
    "text": "I do not care about anything I am deconstructing just for the heck of it now maybe I want the side effects of",
    "start": "2630170",
    "end": "2638000"
  },
  {
    "text": "calling deconstruct because I want to see whether it will throw an exception oh I can't now right I know it really",
    "start": "2638000",
    "end": "2651620"
  },
  {
    "text": "does have a squiggle sorry and do the squiggles get bigger they do yeah so you",
    "start": "2651620",
    "end": "2656840"
  },
  {
    "text": "can just about see there is a squiggle under there it's in the error list it's fine so yeah at this point it's not",
    "start": "2656840",
    "end": "2666100"
  },
  {
    "text": "declaring a variable and you can possibly see that the underscore itself is in blue which means sort of keyword E",
    "start": "2666100",
    "end": "2673880"
  },
  {
    "text": "and if you're currently a purchaser a customer of c-sharp in depth and the the",
    "start": "2673880",
    "end": "2683210"
  },
  {
    "text": "chapter on deconstruction I think doesn't refer to this because there was",
    "start": "2683210",
    "end": "2689210"
  },
  {
    "text": "a lot of is this happening isn't this happening and it was only when I watched the build video with mAb saugus --n and",
    "start": "2689210",
    "end": "2695600"
  },
  {
    "text": "Dustin Campbell that I found out it was back in again and had actually made the cut I had tried something similar I",
    "start": "2695600",
    "end": "2701870"
  },
  {
    "text": "can't remember with what construct it wasn't working for me I think you can't",
    "start": "2701870",
    "end": "2706910"
  },
  {
    "text": "do VAR x equals can you do it with tuples 5",
    "start": "2706910",
    "end": "2715550"
  },
  {
    "text": "5 10 can you deconstruct apples like that yeah that's ok there was there was",
    "start": "2715550",
    "end": "2723470"
  },
  {
    "text": "some way in which it wouldn't work and I happen to hit that and thought that discards had gone entirely okay so and",
    "start": "2723470",
    "end": "2732110"
  },
  {
    "start": "2730000",
    "end": "2847000"
  },
  {
    "text": "the way that deconstruction is actually implemented and the reason that generics don't work with it is because it uses",
    "start": "2732110",
    "end": "2740570"
  },
  {
    "text": "another feature called out parameters or out variables and if like me you have",
    "start": "2740570",
    "end": "2746000"
  },
  {
    "text": "always been really annoyed at having to declare a variable so that you could then use it in a call to say date/time",
    "start": "2746000",
    "end": "2752900"
  },
  {
    "text": "duck fry pals fear not it is now okay you can declare out variables in line so",
    "start": "2752900",
    "end": "2759890"
  },
  {
    "text": "this is how we used to call in try pass and this is how we can do it now okay",
    "start": "2759890",
    "end": "2767740"
  },
  {
    "text": "now one of the one of the reasons that this used to be annoying was generally",
    "start": "2769270",
    "end": "2775970"
  },
  {
    "text": "if in dr. Parrs failed you don't want value one still in scope it's going to have the default",
    "start": "2775970",
    "end": "2782120"
  },
  {
    "text": "value we're kind of not interested anymore so there was some discussion",
    "start": "2782120",
    "end": "2788120"
  },
  {
    "text": "about should the out variable declared here only be sort of inside the scope of",
    "start": "2788120",
    "end": "2794660"
  },
  {
    "text": "the if itself for various reasons that basically I think dropped out as soon as",
    "start": "2794660",
    "end": "2801080"
  },
  {
    "text": "they try to use this feature it doesn't it still has the same scope as before so",
    "start": "2801080",
    "end": "2807500"
  },
  {
    "text": "we could use value to you know all the way down here and that's fine it will be",
    "start": "2807500",
    "end": "2813380"
  },
  {
    "text": "definitely assigned let me show you an example where things might not be definitely assigned so if and if not try",
    "start": "2813380",
    "end": "2821150"
  },
  {
    "text": "pars five let's call it out in live one for",
    "start": "2821150",
    "end": "2828829"
  },
  {
    "text": "live coding and in try cars six out int live - okay within here we can I don't",
    "start": "2828829",
    "end": "2842599"
  },
  {
    "text": "care about the order we can use both five one and live - out here we can",
    "start": "2842599",
    "end": "2849230"
  },
  {
    "start": "2847000",
    "end": "2950000"
  },
  {
    "text": "still do live to equal 10 so the variable still exists and is in scope",
    "start": "2849230",
    "end": "2854920"
  },
  {
    "text": "but if we try just printing live - instead we can't because it's not",
    "start": "2854920",
    "end": "2860150"
  },
  {
    "text": "definitely assigned I'm hoping everyone is familiar with what definite assignment means it's basically can you",
    "start": "2860150",
    "end": "2866510"
  },
  {
    "text": "read the local variable has the compiler checked that every way that you could get through to here will have assigned a",
    "start": "2866510",
    "end": "2872420"
  },
  {
    "text": "value and that's exactly what's wrong here live one that's fine we've definitely called in dot tripe ours so",
    "start": "2872420",
    "end": "2878900"
  },
  {
    "text": "live one is definitely assigned but we might not have called the second tripe",
    "start": "2878900",
    "end": "2884150"
  },
  {
    "text": "ours in which case live two won't have been initialized within here we know",
    "start": "2884150",
    "end": "2890329"
  },
  {
    "text": "that we will only get to the body of this statement if both of these conditions are true and evaluating that",
    "start": "2890329",
    "end": "2897020"
  },
  {
    "text": "second condition does initialize life - therefore life - is definitely assigned okay yes",
    "start": "2897020",
    "end": "2905920"
  },
  {
    "text": "indeed because and there we go so now live - is not definitely assigned of",
    "start": "2910050",
    "end": "2918250"
  },
  {
    "text": "course if you do live - equals ten yeah pointless but it is a regular variable",
    "start": "2918250",
    "end": "2923770"
  },
  {
    "text": "so you can assign to it afterwards and but it won't rules of definite",
    "start": "2923770",
    "end": "2930640"
  },
  {
    "text": "assignment they do the right thing just be aware that the scope of live one is the whole thing okay let's move on how",
    "start": "2930640",
    "end": "2940240"
  },
  {
    "text": "long have I got ten minutes oh my word there's no way we",
    "start": "2940240",
    "end": "2945670"
  },
  {
    "text": "can do pattern matching and local functions in ten minutes right quickest demonstration of pattern",
    "start": "2945670",
    "end": "2952240"
  },
  {
    "start": "2950000",
    "end": "3079000"
  },
  {
    "text": "matching ever so going from out variables being introduced with you're calling a method",
    "start": "2952240",
    "end": "2959380"
  },
  {
    "text": "with an out parameter you can declare the variable right in the method call a",
    "start": "2959380",
    "end": "2965190"
  },
  {
    "text": "similar sort of pattern is this so this",
    "start": "2965190",
    "end": "2972309"
  },
  {
    "text": "is sort of broadly like if X is int int",
    "start": "2972309",
    "end": "2977710"
  },
  {
    "text": "I equals int X so you can use this for",
    "start": "2977710",
    "end": "2983160"
  },
  {
    "text": "anywhere that you were previously using as and saying all if it's not no I'll do",
    "start": "2983160",
    "end": "2988180"
  },
  {
    "text": "this you can use is as well is with a variable so this this is a pattern and",
    "start": "2988180",
    "end": "2998040"
  },
  {
    "text": "again this declares I I believe so I is",
    "start": "2998040",
    "end": "3008970"
  },
  {
    "text": "again unassigned here because it won't be assigned anything if X isn't an",
    "start": "3008970",
    "end": "3014520"
  },
  {
    "text": "integer but it does have it is still in scope so we can do I equal 10 for",
    "start": "3014520",
    "end": "3020760"
  },
  {
    "text": "example that's one example of a pattern",
    "start": "3020760",
    "end": "3025880"
  },
  {
    "text": "patterns are a new feature in c-sharp seven which hasn't yet come to full",
    "start": "3025880",
    "end": "3031380"
  },
  {
    "text": "fruition it haven't yet blossomed it is a sapling with some interesting shoots as it were there are two places",
    "start": "3031380",
    "end": "3039540"
  },
  {
    "text": "you can use pattern one is with if expertise expressions and",
    "start": "3039540",
    "end": "3046660"
  },
  {
    "text": "they don't have to be in if I hope I believe you can do bull was an int I",
    "start": "3046660",
    "end": "3057160"
  },
  {
    "text": "equals x is int foo yes but at this",
    "start": "3057160",
    "end": "3062950"
  },
  {
    "text": "point it's kind of pointless because I can't use foo because it's not definitely assigned I can see whether",
    "start": "3062950",
    "end": "3069549"
  },
  {
    "text": "the pattern maps or not so but my point is it's not specific to if you could certainly do while X isn't food and but",
    "start": "3069549",
    "end": "3078940"
  },
  {
    "text": "it's part of the is construct the other place you can use these is in switch",
    "start": "3078940",
    "end": "3084849"
  },
  {
    "start": "3079000",
    "end": "3232000"
  },
  {
    "text": "cases and in switch case we have this",
    "start": "3084849",
    "end": "3089920"
  },
  {
    "text": "additional idea of a win guard clause so the kinds of patterns that exist so",
    "start": "3089920",
    "end": "3097869"
  },
  {
    "text": "there are two places you can use them I'll go into a little bit more detail about switch case in a minute so you can",
    "start": "3097869",
    "end": "3103180"
  },
  {
    "text": "use them for each expressions and you can use them for switch case and I suspect that maybe the only places",
    "start": "3103180",
    "end": "3110529"
  },
  {
    "text": "you'll be able to use them for a little bit but that's the idea of those are places you can use any pattern so far",
    "start": "3110529",
    "end": "3119529"
  },
  {
    "text": "there are three kinds of pattern one is the type matching pattern that we've",
    "start": "3119529",
    "end": "3126609"
  },
  {
    "text": "seen this in Thai that's a pattern that matches if they the candidate whatever",
    "start": "3126609",
    "end": "3135609"
  },
  {
    "text": "we want to call it the test value is an int and it declares a variable called I the second kind of pattern is a constant",
    "start": "3135609",
    "end": "3144160"
  },
  {
    "text": "pattern that just says is it equal to a constant okay it also has to match the",
    "start": "3144160",
    "end": "3149380"
  },
  {
    "text": "right the right type so that can be object X is five it will only work if X",
    "start": "3149380",
    "end": "3158079"
  },
  {
    "text": "isn't in 32 of five if you pass a box long this will print false or other it",
    "start": "3158079",
    "end": "3164019"
  },
  {
    "text": "won't print yes X is five and the third type of pattern that I haven't shown",
    "start": "3164019",
    "end": "3169960"
  },
  {
    "text": "here X is VAR v nope bar V V is V that's a",
    "start": "3169960",
    "end": "3185730"
  },
  {
    "text": "pattern that always matches and it declares a new variable of that type",
    "start": "3185730",
    "end": "3191870"
  },
  {
    "text": "sorry of it declares a new variable",
    "start": "3191870",
    "end": "3197970"
  },
  {
    "text": "which is implicitly defined to be the same type as X so in this case it's just",
    "start": "3197970",
    "end": "3203460"
  },
  {
    "text": "object and you may be wondering why I bother having a pattern that introduces",
    "start": "3203460",
    "end": "3208590"
  },
  {
    "text": "another variable that looks exactly the same as our previous arrabal well we might not have had a variable because we",
    "start": "3208590",
    "end": "3215190"
  },
  {
    "text": "might have been doing if some complicated method or we could be",
    "start": "3215190",
    "end": "3223890"
  },
  {
    "text": "switching on some complicated method and in an if statement it's pointless okay",
    "start": "3223890",
    "end": "3229380"
  },
  {
    "text": "I'm going to kill this example again in a switch case it can be important",
    "start": "3229380",
    "end": "3234710"
  },
  {
    "start": "3232000",
    "end": "3316000"
  },
  {
    "text": "because you can then use the variable where maybe you wouldn't have had a",
    "start": "3234710",
    "end": "3239820"
  },
  {
    "text": "variable before or we could do case var oh when Oh get type is value type for",
    "start": "3239820",
    "end": "3256020"
  },
  {
    "text": "example so we've got a guard clause here so this is the second place you can use",
    "start": "3256020",
    "end": "3261750"
  },
  {
    "text": "pattern matching is within switch case statements now there are two ways you",
    "start": "3261750",
    "end": "3267780"
  },
  {
    "text": "can think to yourself about how switch statements work and both will work for",
    "start": "3267780",
    "end": "3272850"
  },
  {
    "text": "you it's fine use whichever you find better one is I've got a switch case statement that's only got constants it's",
    "start": "3272850",
    "end": "3279690"
  },
  {
    "text": "an old-school switch statement and I've got new style",
    "start": "3279690",
    "end": "3285420"
  },
  {
    "text": "new school switch statements which have patterns in and they're entirely different kind of switch statements that",
    "start": "3285420",
    "end": "3292320"
  },
  {
    "text": "works as a model or you can say every switch statement ever has patterns",
    "start": "3292320",
    "end": "3298560"
  },
  {
    "text": "if I only had so if I had static void old school index switch X",
    "start": "3298560",
    "end": "3310320"
  },
  {
    "text": "and case three and then something and",
    "start": "3310320",
    "end": "3317760"
  },
  {
    "text": "then case ten yeah this looks exactly the same as the previous thing 3 is a",
    "start": "3317760",
    "end": "3324150"
  },
  {
    "text": "pattern it's a constant pattern that only matches the value 3 so every previous switch statement is a pattern",
    "start": "3324150",
    "end": "3331530"
  },
  {
    "text": "switch statement so if that's an easier model for you to think about then fine it is worth being aware that suddenly",
    "start": "3331530",
    "end": "3338340"
  },
  {
    "text": "order matters in switch statements it hasn't usually previously methods barring weird scoping things but here",
    "start": "3338340",
    "end": "3346670"
  },
  {
    "text": "they're tested in order so the compiler will do some optimizations if you have multiple constants and it can do so it",
    "start": "3346670",
    "end": "3355110"
  },
  {
    "text": "can do some optimizations in the same way that you see however otherwise it",
    "start": "3355110",
    "end": "3360600"
  },
  {
    "text": "will look one at Simon site well is the value of Phi X 5 no okay let's see",
    "start": "3360600",
    "end": "3366810"
  },
  {
    "text": "whether it's an odd number okay it wasn't odd is it still an integer yes it",
    "start": "3366810",
    "end": "3372630"
  },
  {
    "text": "is therefore I will return something otherwise keep going down so it's very",
    "start": "3372630",
    "end": "3378180"
  },
  {
    "text": "much like an if else if else if else however you should be thinking to yourself this feels more like all those",
    "start": "3378180",
    "end": "3384810"
  },
  {
    "text": "F sharp talks that I went to and swore afterwards that I was about to learn F sharp and nearly got as far as buying",
    "start": "3384810",
    "end": "3390690"
  },
  {
    "text": "the book and then I remembered all the previous times that I bought the book and never actually read it yeah you've all all been there all seen",
    "start": "3390690",
    "end": "3397200"
  },
  {
    "text": "those the person matching an F sharp and thought that's really beautiful I should really get round to learning that",
    "start": "3397200",
    "end": "3402780"
  },
  {
    "text": "sometime well this is C sharps sort of way of getting a little bit into that I",
    "start": "3402780",
    "end": "3408810"
  },
  {
    "text": "expect currently switches still a statement you can't implement a whole method by",
    "start": "3408810",
    "end": "3414780"
  },
  {
    "text": "saying well here's a bunch of cases that might come and it's definitely the way to start thinking about it is well I can",
    "start": "3414780",
    "end": "3422100"
  },
  {
    "text": "react to a number of different situations I will make each of those situations a case pattern that works",
    "start": "3422100",
    "end": "3428880"
  },
  {
    "text": "really really well ok am I already over time no I have three minutes to show you local functions very",
    "start": "3428880",
    "end": "3434820"
  },
  {
    "text": "very quickly let me just see the agenda make sure there isn't anything more okay numeric",
    "start": "3434820",
    "end": "3442280"
  },
  {
    "start": "3438000",
    "end": "3600000"
  },
  {
    "text": "literals you can use binary you can use underscores within numeric literals",
    "start": "3442280",
    "end": "3449120"
  },
  {
    "text": "right that was that feature done throw expressions in certain places and I",
    "start": "3449120",
    "end": "3455960"
  },
  {
    "text": "won't say exactly where because I'd have to remember it you can use throw as if it's an expression instead of a",
    "start": "3455960",
    "end": "3461000"
  },
  {
    "text": "statement so for example in the null conditional sorry the null coalescing operator you can say well either return",
    "start": "3461000",
    "end": "3469010"
  },
  {
    "text": "value or throw an exception in the regular conditional ternary operator",
    "start": "3469010",
    "end": "3475250"
  },
  {
    "text": "it's the conditional operator damn it happens to be turning then you can say",
    "start": "3475250",
    "end": "3480500"
  },
  {
    "text": "well if we get as far as the bottom tor an exception and there's another case",
    "start": "3480500",
    "end": "3485660"
  },
  {
    "text": "that I can't remember offhand I think but yeah oh you could just throw an exception anyway",
    "start": "3485660",
    "end": "3490820"
  },
  {
    "text": "now my new way of doing I want to write a method that unimplemented is to use an",
    "start": "3490820",
    "end": "3496370"
  },
  {
    "text": "expression body member and just throw an extra an ex throw an exception you couldn't do this in c-sharp six because",
    "start": "3496370",
    "end": "3503000"
  },
  {
    "text": "it wasn't an expression and strangely enough an expression body member has to have a body that is an expression now",
    "start": "3503000",
    "end": "3508850"
  },
  {
    "text": "it's an expression pray write local functions I've only got",
    "start": "3508850",
    "end": "3515060"
  },
  {
    "text": "five examples this I'm sure it won't take more than two minutes and you can write methods within methods okay it's",
    "start": "3515060",
    "end": "3524360"
  },
  {
    "text": "as simple as that so here we have a fifth method that calls itself so you couldn't do this",
    "start": "3524360",
    "end": "3531590"
  },
  {
    "text": "just with a delegate called fib because then well you could you declare it and assign a null value to it then assign a",
    "start": "3531590",
    "end": "3538400"
  },
  {
    "text": "lambda expression which could call fib and that would be horrible this is a method it can call itself and you can so",
    "start": "3538400",
    "end": "3548060"
  },
  {
    "text": "that's that's the other equivalent let's see whether we have something that captures a variable no that's just a an",
    "start": "3548060",
    "end": "3554420"
  },
  {
    "text": "example right here we go and like lambda expressions local methods can capture",
    "start": "3554420",
    "end": "3560510"
  },
  {
    "text": "state from the surrounding context so they can act as closures however they're",
    "start": "3560510",
    "end": "3567200"
  },
  {
    "text": "really interesting if you had this sorry no it's a bear that if you",
    "start": "3567200",
    "end": "3576480"
  },
  {
    "text": "implemented this as a lambda expression so suppose I have action increment and",
    "start": "3576480",
    "end": "3582930"
  },
  {
    "text": "prints I equals nothing goes to stuff",
    "start": "3582930",
    "end": "3596330"
  },
  {
    "text": "kill the local method okay in order to implement that the compiler would",
    "start": "3596330",
    "end": "3601710"
  },
  {
    "text": "generate a new class and in the main method it would create an instance of that class and that class would have a",
    "start": "3601710",
    "end": "3607110"
  },
  {
    "text": "field called I in it and it would do all kinds of stuff and the reason is by the time it's created a delegate from it",
    "start": "3607110",
    "end": "3613500"
  },
  {
    "text": "that delegate could still live after the main method has finished however think",
    "start": "3613500",
    "end": "3620070"
  },
  {
    "text": "about when I've got just a local method",
    "start": "3620070",
    "end": "3625130"
  },
  {
    "text": "unless I capture that that method somehow and I can do that like this",
    "start": "3626450",
    "end": "3632390"
  },
  {
    "text": "methyl group conversion there is no way that this method is going to increment",
    "start": "3632390",
    "end": "3638100"
  },
  {
    "text": "it sorry is going to be executed using that I variable after main has completed",
    "start": "3638100",
    "end": "3645990"
  },
  {
    "text": "or imagine it's not a main method but something that can be called several times each time you call the method you",
    "start": "3645990",
    "end": "3652080"
  },
  {
    "text": "get a new variable and you know that there will be no way that that method",
    "start": "3652080",
    "end": "3657540"
  },
  {
    "text": "will like the the nested method will execute and need to use that same variable by the time it's finished so it",
    "start": "3657540",
    "end": "3664080"
  },
  {
    "text": "can do it all on the stack this time it will still generate a new type but it will be a struct a mutable struct again",
    "start": "3664080",
    "end": "3670890"
  },
  {
    "text": "and it will generate a magic rest",
    "start": "3670890",
    "end": "3677599"
  },
  {
    "text": "generated struct struct",
    "start": "3678380",
    "end": "3683990"
  },
  {
    "text": "yes Estie let's call it and it will do",
    "start": "3684880",
    "end": "3690130"
  },
  {
    "text": "st dot I plus plus and st dot i and then it will do generated struct st equal new",
    "start": "3690130",
    "end": "3700299"
  },
  {
    "text": "generate disrupt not that this exists at the moment that you know the compiler generate it st dot i equals 10 and then",
    "start": "3700299",
    "end": "3707740"
  },
  {
    "text": "it do rest st okay what's the cool thing",
    "start": "3707740",
    "end": "3714099"
  },
  {
    "text": "about that everything's still on the stack that has not generated a single",
    "start": "3714099",
    "end": "3719200"
  },
  {
    "text": "new object and because the struct only has the same number of fields as we had local variables in scope it's only taken",
    "start": "3719200",
    "end": "3726609"
  },
  {
    "text": "the same amount of space on the stack as it would have done before it's very cool",
    "start": "3726609",
    "end": "3732150"
  },
  {
    "text": "final thing to note on local functions of i mean two minutes over already is you can refer to local variables that",
    "start": "3732150",
    "end": "3739990"
  },
  {
    "text": "are deeply nested within a method but your local method then has to be deeply",
    "start": "3739990",
    "end": "3745329"
  },
  {
    "text": "nested as well so this is declaring a method within a for loop now obviously",
    "start": "3745329",
    "end": "3750700"
  },
  {
    "text": "that's not actually going to create a new object for the method on each iteration it will create some things on",
    "start": "3750700",
    "end": "3757509"
  },
  {
    "text": "each iteration but at that point it's okay to refer to this j variable that's",
    "start": "3757509",
    "end": "3763630"
  },
  {
    "text": "new I can't do this out here",
    "start": "3763630",
    "end": "3770518"
  },
  {
    "text": "because Jay doesn't exist that will intersect there we go give me an error so you can only refer to variables when",
    "start": "3774619",
    "end": "3781799"
  },
  {
    "text": "they're in scope you can only refer to them if the call is right I can refer to",
    "start": "3781799",
    "end": "3798239"
  },
  {
    "text": "them here because Jay has been declared it has to be after the declaration for",
    "start": "3798239",
    "end": "3803999"
  },
  {
    "text": "no particularly obvious reason but even though Jay is not definitely assigned at the start of the method by the time we",
    "start": "3803999",
    "end": "3812130"
  },
  {
    "text": "actually call the local method it is definitely assigned so that's okay and the compiler makes sure that everything",
    "start": "3812130",
    "end": "3818309"
  },
  {
    "text": "works right and that is all I have time for I don't want to make you late for your next sessions as you can spot",
    "start": "3818309",
    "end": "3825359"
  },
  {
    "text": "there's a lot in c-sharp 7 the general theme where is the C sharp 5 worth of",
    "start": "3825359",
    "end": "3830400"
  },
  {
    "text": "our async C top 4 words all about dynamic feature up through is all linked and things C sharp 7 a bit like C sharp",
    "start": "3830400",
    "end": "3837059"
  },
  {
    "text": "6 was will kind of make the world a bit better we will make your code easier to",
    "start": "3837059",
    "end": "3842339"
  },
  {
    "text": "read we will give you tool sets for expressing yourself more clearly this is",
    "start": "3842339",
    "end": "3847890"
  },
  {
    "text": "no bad thing great idea huge ideas are good but a lot of little improvements",
    "start": "3847890",
    "end": "3853319"
  },
  {
    "text": "that let you express yourself better and more clearly and more concisely are also good too much more detail in C Sharman",
    "start": "3853319",
    "end": "3862319"
  },
  {
    "text": "that's a book there's loads of detail in blog posts as well and so there's plenty of room to experiment I hope if nothing",
    "start": "3862319",
    "end": "3869339"
  },
  {
    "text": "else all of you who stuck your hand up saying I've got Visual Studio 2017 but I'm not knowingly using C sharp 7",
    "start": "3869339",
    "end": "3875849"
  },
  {
    "text": "hopefully you will all go back to your hotel room tonight and start just playing you will learn far far more by playing",
    "start": "3875849",
    "end": "3882900"
  },
  {
    "text": "than you can possibly do by listening to me I'm don't eat thank you very much",
    "start": "3882900",
    "end": "3888439"
  }
]