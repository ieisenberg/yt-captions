[
  {
    "text": "coders of all ages gathered around as we gear up for the ultimate battle of",
    "start": "5839",
    "end": "11599"
  },
  {
    "text": "programming Prouds in the blue Corner we have the heavyweight champion the",
    "start": "11599",
    "end": "18199"
  },
  {
    "text": "backbone of enterprise software the tool that has powered millions of applications but wait in the Red Corner",
    "start": "18199",
    "end": "26199"
  },
  {
    "text": "enters FP the functional mic with its mathematical Elegance immutable data",
    "start": "26199",
    "end": "31960"
  },
  {
    "text": "structures it has been making waves and winning Hearts my name is Max arov",
    "start": "31960",
    "end": "37960"
  },
  {
    "text": "currently I'm shaping Solutions at epom Spain and I love both languages but fop",
    "start": "37960",
    "end": "44320"
  },
  {
    "text": "has never been my primary tool and I doubt that it'll become one somay and my name is vag abil I work for Norwegian",
    "start": "44320",
    "end": "51600"
  },
  {
    "text": "company miles in Oso I'm so old that I even programmed fortron using punch card",
    "start": "51600",
    "end": "57039"
  },
  {
    "text": "in University uh and I choose FP because of its expression based nature as opposed",
    "start": "57039",
    "end": "64280"
  },
  {
    "text": "to statement based in C code it's imitability by default and U algebraic",
    "start": "64280",
    "end": "70960"
  },
  {
    "text": "data types uh last but not least features like computation expressions and I choose cop because of three main",
    "start": "70960",
    "end": "78320"
  },
  {
    "text": "factors first of all it's a feature reach and mainstream language secondly",
    "start": "78320",
    "end": "83400"
  },
  {
    "text": "it's extremely versatile and last but not least I like convincing arguments to replace cop with something else",
    "start": "83400",
    "end": "91759"
  },
  {
    "text": "okay so C and F they both about to battle for your vots today they're both",
    "start": "91759",
    "end": "98600"
  },
  {
    "text": "donet languages they're quite pragmatic and uh they support multiple platforms C",
    "start": "98600",
    "end": "105159"
  },
  {
    "text": "has evolved since Net One adopting many functional Concepts and F remains",
    "start": "105159",
    "end": "110719"
  },
  {
    "text": "largely consistent since 2005 but it's fully interoperable with c and offers",
    "start": "110719",
    "end": "116759"
  },
  {
    "text": "similar functionality including op let's EXP exp their strengths and weaknesses",
    "start": "116759",
    "end": "121840"
  },
  {
    "text": "without bias please consider the merits of each language based on our discussion today rather than on your personal",
    "start": "121840",
    "end": "128720"
  },
  {
    "text": "preferences by the end of the talk we'll be able to identify the winner based on your votes vag tell me if C wins today",
    "start": "128720",
    "end": "137680"
  },
  {
    "text": "would you consider a shift back to it from FSH I don't think so I think it's too",
    "start": "137680",
    "end": "143480"
  },
  {
    "text": "late for me now but I'm really thrilled to know the opinions opinion of our audience yeah sure",
    "start": "143480",
    "end": "150440"
  },
  {
    "text": "uh let's gauge the A's preferences uh not for the voting this",
    "start": "150440",
    "end": "155480"
  },
  {
    "text": "time but just to understand how the voting procedure books so uh yeah you",
    "start": "155480",
    "end": "160599"
  },
  {
    "text": "can see the QR code and uh I can see that most of you took your mobile phone",
    "start": "160599",
    "end": "166360"
  },
  {
    "text": "so I don't need to explain how QR codes work so please let us know are you a c",
    "start": "166360",
    "end": "173640"
  },
  {
    "text": "person and F shop person or maybe you're a Java guy and I don't know why why I",
    "start": "173640",
    "end": "179360"
  },
  {
    "text": "decided to to with a this talk but who knows also through the competition you don't need to sort of recount QR code",
    "start": "179360",
    "end": "185680"
  },
  {
    "text": "you can just stay on this page and it will present you new questions so how",
    "start": "185680",
    "end": "190840"
  },
  {
    "text": "are we doing now okay as expected uh 8",
    "start": "190840",
    "end": "196159"
  },
  {
    "text": "88% see Sharp yeah that's going to be a tough battle for you yeah yeah but I I hope",
    "start": "196159",
    "end": "204159"
  },
  {
    "text": "you will be fair judges okay so but we also have 3% that voted for none so",
    "start": "204159",
    "end": "211360"
  },
  {
    "text": "maybe these are I will fight for their yeah so jav people can vote for f anyway",
    "start": "211360",
    "end": "216599"
  },
  {
    "text": "uh so round number one hopefully we had enough time to uh to understand how the",
    "start": "216599",
    "end": "221879"
  },
  {
    "text": "voting procedure works and uh let's begin our first round and that's about the differences in the type systems of",
    "start": "221879",
    "end": "228799"
  },
  {
    "text": "these two languages so in objectoriented programming uh we traditionally model",
    "start": "228799",
    "end": "235120"
  },
  {
    "text": "business logic using classes and interfaces and functional Lang they also",
    "start": "235120",
    "end": "240400"
  },
  {
    "text": "so called algebraic data types which consist of product types and Su types",
    "start": "240400",
    "end": "246720"
  },
  {
    "text": "product types are quite similar in both languages so these are structures classes records so in this round we'll",
    "start": "246720",
    "end": "254560"
  },
  {
    "text": "be focusing more on some types which uh uh used to represent mutually exclusive",
    "start": "254560",
    "end": "261440"
  },
  {
    "text": "forms of behavior for Simplicity and consistency",
    "start": "261440",
    "end": "266479"
  },
  {
    "text": "we'll be using just a single domain example throughout D present presentation and that's the e-commerce solution example uh presumably most of",
    "start": "266479",
    "end": "274680"
  },
  {
    "text": "you folks in this audience are familiar with this domain either as developers or",
    "start": "274680",
    "end": "280759"
  },
  {
    "text": "perhaps as customers so it's quite often for uh electronic shops to have advanced",
    "start": "280759",
    "end": "286639"
  },
  {
    "text": "notification capabilities and if I was to implement a notification subsystem",
    "start": "286639",
    "end": "292720"
  },
  {
    "text": "for an electronic shop I would create an interface like this I Dom an event so",
    "start": "292720",
    "end": "299840"
  },
  {
    "text": "that I can create uh individual classes uh for every individual domain event",
    "start": "299840",
    "end": "306400"
  },
  {
    "text": "like order placed order paid and order shipped MH and this code looks very",
    "start": "306400",
    "end": "312160"
  },
  {
    "text": "familiar to me and if I worked in cop today I would have probably written this code exactly like this but um after",
    "start": "312160",
    "end": "319919"
  },
  {
    "text": "switching to FP I find it quite lengthy first of all you see uh we need",
    "start": "319919",
    "end": "325560"
  },
  {
    "text": "to implement some interface also you know there are things like like um uh",
    "start": "325560",
    "end": "332280"
  },
  {
    "text": "method visibility accessibility of the methods Constructors so for me today it's just two ver boths well if it's",
    "start": "332280",
    "end": "339600"
  },
  {
    "text": "only the syntax that bothers here I think that I have the solution so starting from C 9 we can use records and",
    "start": "339600",
    "end": "347720"
  },
  {
    "text": "uh its syntax is much more concise and I think that I've just solved your issue with with the verbosity of the C",
    "start": "347720",
    "end": "356600"
  },
  {
    "text": "language mhm I must say that I missed record since sh completely because I switched to F before they were",
    "start": "356600",
    "end": "362520"
  },
  {
    "text": "introduced and yeah it's it's more concise still uh you have this uh",
    "start": "362520",
    "end": "367720"
  },
  {
    "text": "interface I wouldn't do it like uh like that because know what are events events",
    "start": "367720",
    "end": "374440"
  },
  {
    "text": "are mutually exclusive um things that happen so in functional languages we use",
    "start": "374440",
    "end": "380759"
  },
  {
    "text": "so called some type we use a in a Shar it's called discriminated Union so uh",
    "start": "380759",
    "end": "386199"
  },
  {
    "text": "you you have the group of mutual exclusive behaviorist in just uh you keep them you group them together in",
    "start": "386199",
    "end": "392440"
  },
  {
    "text": "discriminate discriminate Union okay uh I have a question here",
    "start": "392440",
    "end": "398680"
  },
  {
    "text": "so the open closed principle uh the O principle from solid states that program",
    "start": "398680",
    "end": "404479"
  },
  {
    "text": "entities should be closed for modification but open for extension but in this example I can see that the event",
    "start": "404479",
    "end": "411520"
  },
  {
    "text": "payload type is effectively closed for both modification and extension and this",
    "start": "411520",
    "end": "417280"
  },
  {
    "text": "looks like a major downside to me it's um yeah it's a good observation and",
    "start": "417280",
    "end": "423560"
  },
  {
    "text": "I think U actually good that you brought it here because yes sometimes you have",
    "start": "423560",
    "end": "428800"
  },
  {
    "text": "to have interfaces and typically if you publish let's say open source uh Library",
    "start": "428800",
    "end": "435639"
  },
  {
    "text": "which you want people to be able to extend then interface is a way to go but",
    "start": "435639",
    "end": "441560"
  },
  {
    "text": "how often we do that mostly the whole team controls all aspect of the code and",
    "start": "441560",
    "end": "448639"
  },
  {
    "text": "in in that case I think that the closed types like unions they give you more",
    "start": "448639",
    "end": "453919"
  },
  {
    "text": "control and better maintainability uh why what's the main difference between these two options I",
    "start": "453919",
    "end": "460120"
  },
  {
    "text": "didn't quite get it uh just let me illustrate it with u things like uh",
    "start": "460120",
    "end": "466000"
  },
  {
    "text": "exhaustive pattern matching if you have discriminated Union then you have the",
    "start": "466000",
    "end": "471360"
  },
  {
    "text": "closed uh number of uh cases so you can actually if you forget to match on on",
    "start": "471360",
    "end": "478440"
  },
  {
    "text": "one of the cases you can get compile a warning or even error so it it actually very strict",
    "start": "478440",
    "end": "483639"
  },
  {
    "text": "control well I'm afraid I'm not yet convinced you know uh what I'm seeing here is just yet another way of doing",
    "start": "483639",
    "end": "491240"
  },
  {
    "text": "kind of the same thing but you are doing it differently maybe you just don't like uh objectoriented programming anymore",
    "start": "491240",
    "end": "497879"
  },
  {
    "text": "and you just want to implement everything in a functional way okay if I can convince you let the C developer",
    "start": "497879",
    "end": "506720"
  },
  {
    "text": "Community um address this issue so kind of proof that c developers need that uh",
    "start": "506720",
    "end": "513000"
  },
  {
    "text": "you've probably heard about one of uh open source Library which has about 13",
    "start": "513000",
    "end": "518880"
  },
  {
    "text": "million downloads so head up if you heard about this",
    "start": "518880",
    "end": "524159"
  },
  {
    "text": "Library so about about 50% cor yeah okay so uh",
    "start": "524159",
    "end": "529920"
  },
  {
    "text": "let's introduce this library then so this uh the main event variable is an instance of a class that is derived from",
    "start": "529920",
    "end": "536519"
  },
  {
    "text": "the oneof uh class and uh the one of class itself has up to 31 generic",
    "start": "536519",
    "end": "543800"
  },
  {
    "text": "parameters that can be uh filled in with the different types so that it is",
    "start": "543800",
    "end": "549320"
  },
  {
    "text": "possible to overload the match function I believe that's the closest uh emulation possible at least as of now",
    "start": "549320",
    "end": "558079"
  },
  {
    "text": "yeah it's um it's kind of attempt to yes to replace oh well not to replace but to",
    "start": "558079",
    "end": "563920"
  },
  {
    "text": "give something instead of the commed Union it still feels like hack to me it supports um maximum 31 Cas and in a",
    "start": "563920",
    "end": "571279"
  },
  {
    "text": "large system you can have more domain events also it actually internally behind the scenes generates quite a lot",
    "start": "571279",
    "end": "577000"
  },
  {
    "text": "of internal code well yeah it does and uh frankly one of is more a plas on aaur",
    "start": "577000",
    "end": "584640"
  },
  {
    "text": "rather than a proper implementation perhaps this is a great example of a feature that is best implemented as a",
    "start": "584640",
    "end": "591120"
  },
  {
    "text": "language feature rather than a c p Library feature but uh the good news are",
    "start": "591120",
    "end": "597480"
  },
  {
    "text": "that discriminated unions are coming to cop so how many years has been the good",
    "start": "597480",
    "end": "602720"
  },
  {
    "text": "news uh well uh they had been originally scheduled scheduled for C 10 but then",
    "start": "602720",
    "end": "610440"
  },
  {
    "text": "more implementation options appeared and uh they were delayed and then C 11 what",
    "start": "610440",
    "end": "616680"
  },
  {
    "text": "is now SARP 12 or will it be SARP 20 when it will come uh well last December",
    "start": "616680",
    "end": "621800"
  },
  {
    "text": "I had a chance to talk to Matt sters who is the lead designer of t-shop and he",
    "start": "621800",
    "end": "626839"
  },
  {
    "text": "told me that it's perhaps cop 14ish most likely but yeah I know how it",
    "start": "626839",
    "end": "634200"
  },
  {
    "text": "sounds but uh on the other hand the introduction of discriminated Unions would be a groundbreaking change for the",
    "start": "634200",
    "end": "639959"
  },
  {
    "text": "cop type system so I believe that it's fair enough that the language team needs",
    "start": "639959",
    "end": "645120"
  },
  {
    "text": "some more time just to make sure that this feature is implemented correctly so for me it's worth waiting okay I agree",
    "start": "645120",
    "end": "653360"
  },
  {
    "text": "it will be a game changer once discriminated Union makes its way to the language but then we'll have another VA",
    "start": "653360",
    "end": "660760"
  },
  {
    "text": "and today we are where we are yeah fair enough so it's time to vote our first",
    "start": "660760",
    "end": "669560"
  },
  {
    "text": "round does discriminated Union enrich the language type system to extent that",
    "start": "669560",
    "end": "675639"
  },
  {
    "text": "it is impossible to wait until they're implemented so if you think it's",
    "start": "675639",
    "end": "680839"
  },
  {
    "text": "important enough vote then it will give point to F otherwise it will give a point to c okay yeah are we",
    "start": "680839",
    "end": "688079"
  },
  {
    "text": "going okay okay we going",
    "start": "688079",
    "end": "693320"
  },
  {
    "text": "well ah well it's it's tough one yeah okay not that",
    "start": "693360",
    "end": "700880"
  },
  {
    "text": "problem but you see F people are faster to react I mean like there are just two",
    "start": "700880",
    "end": "706959"
  },
  {
    "text": "kinds of people right those who can wait and those who cannot okay yeah that's logical they",
    "start": "706959",
    "end": "713160"
  },
  {
    "text": "can't wait so they need this now okay I think that we have a winner here yeah so",
    "start": "713160",
    "end": "718200"
  },
  {
    "text": "want is quite tough yeah see okay uh let's proceed so uh round two",
    "start": "718200",
    "end": "725440"
  },
  {
    "text": "data models and operations so we are in a quite important round um it's not just CP and",
    "start": "725440",
    "end": "733680"
  },
  {
    "text": "f that have different approach to this even within C development",
    "start": "733680",
    "end": "741399"
  },
  {
    "text": "Community uh you know the there is disagreement about uh how you should",
    "start": "741399",
    "end": "747120"
  },
  {
    "text": "write um data and operations on them so when I was learning um objectoriented",
    "start": "747120",
    "end": "752839"
  },
  {
    "text": "programming and I started from C++ then I was writing code like this where you",
    "start": "752839",
    "end": "759000"
  },
  {
    "text": "have a class with data and Method on them later I drifted towards approach",
    "start": "759000",
    "end": "764920"
  },
  {
    "text": "which we will see on the right hand side uh where I just declared Pew data and I",
    "start": "764920",
    "end": "772399"
  },
  {
    "text": "put operations on them in different classes like operation only classes because I found that it was easier to",
    "start": "772399",
    "end": "778680"
  },
  {
    "text": "maintain it it was easier to read so you know and you will find C code bases with",
    "start": "778680",
    "end": "786160"
  },
  {
    "text": "both approaches so isn't it uh you know isn't it confusing basically uh well",
    "start": "786160",
    "end": "791880"
  },
  {
    "text": "maybe kind of but I think that we are overlooking the versatility that c",
    "start": "791880",
    "end": "797040"
  },
  {
    "text": "offers if a language enables multiple options it does not necessarily make it",
    "start": "797040",
    "end": "803399"
  },
  {
    "text": "inferior I think that uh that we have option actually options is actually a good thing and",
    "start": "803399",
    "end": "809959"
  },
  {
    "text": "uh we have a wide variety of programming Styles here but uh can the variety be a",
    "start": "809959",
    "end": "817240"
  },
  {
    "text": "problem U especially when you know some there are some strong technology leaders",
    "start": "817240",
    "end": "823120"
  },
  {
    "text": "that have a very strong opinions on this topic like like Martin Fowler which you will see on the",
    "start": "823120",
    "end": "828839"
  },
  {
    "text": "slide well I'm undecided about it because uh on one hand yes uh there is",
    "start": "828839",
    "end": "836120"
  },
  {
    "text": "some friction in the community with some viewing dynamic domain model as an anti",
    "start": "836120",
    "end": "841279"
  },
  {
    "text": "pattern While others seeing it as a perfect straightforward solid driven implementation on the other hand uh this",
    "start": "841279",
    "end": "848240"
  },
  {
    "text": "is kind of decision you only need to make once per team and uh over time I",
    "start": "848240",
    "end": "855160"
  },
  {
    "text": "learned how to adapt to different points of view and uh uh how to you know use",
    "start": "855160",
    "end": "860920"
  },
  {
    "text": "different coding St standards so as of now it's not a deal breaker for me anymore mhm okay fair uh but um with",
    "start": "860920",
    "end": "870519"
  },
  {
    "text": "functional languages um you uh you are guided to uh separate data and",
    "start": "870519",
    "end": "877880"
  },
  {
    "text": "operations and I heartly agree with L Armstrong that you know these are just",
    "start": "877880",
    "end": "883880"
  },
  {
    "text": "two different things so you shouldn't be mixing them together and I find it that in functional languages you avoid this",
    "start": "883880",
    "end": "890759"
  },
  {
    "text": "confusion okay so you see that uh this is a type",
    "start": "890759",
    "end": "897079"
  },
  {
    "text": "uh where we Define our data in this particular case it's uh discriminate Union and then on the right hand side",
    "start": "897079",
    "end": "902160"
  },
  {
    "text": "you see operations we we Define some functions we have also module which uh unite them so you can use them together",
    "start": "902160",
    "end": "908800"
  },
  {
    "text": "you can Define this processing pipeline hold on what about the dependencies like",
    "start": "908800",
    "end": "913920"
  },
  {
    "text": "database calls or uh web requests to external Services why did you why did",
    "start": "913920",
    "end": "920360"
  },
  {
    "text": "you leave them out aren't you oversimplifying this example yes of course I'm oversimplifying but I do it",
    "start": "920360",
    "end": "926800"
  },
  {
    "text": "uh for for clarity because you can trap them in the startup of your application",
    "start": "926800",
    "end": "931920"
  },
  {
    "text": "and they will not structurally change your program understood I still believe",
    "start": "931920",
    "end": "937920"
  },
  {
    "text": "that the versatility C offers is not a weakness it's a strength and regarding",
    "start": "937920",
    "end": "943199"
  },
  {
    "text": "the anomic model debate um well different projects have different requirements if you only need to build a",
    "start": "943199",
    "end": "950319"
  },
  {
    "text": "simple system even a big one if your business logic is just a bunch of cruit operations on top of your database then",
    "start": "950319",
    "end": "957079"
  },
  {
    "text": "Dynamic the main model might be a good fit if you have more sophisticated business rules then a reach domain model",
    "start": "957079",
    "end": "964680"
  },
  {
    "text": "is a way to go mhm well agree to disagree so I",
    "start": "964680",
    "end": "970519"
  },
  {
    "text": "suppose we have different opinions here and we have probably made it clear enough for the audience so what do you",
    "start": "970519",
    "end": "977920"
  },
  {
    "text": "choose it's time to ask so C tends to mix data operations uh data model and",
    "start": "977920",
    "end": "985680"
  },
  {
    "text": "operations together while in FSH we have clear separation between them let's",
    "start": "985680",
    "end": "993839"
  },
  {
    "text": "[Music] vote oh they are pretty close",
    "start": "999830",
    "end": "1009680"
  },
  {
    "text": "again despite that we have so many cop people yeah actually that's a very good",
    "start": "1009680",
    "end": "1016240"
  },
  {
    "text": "thing soop Developers are very open to discussion so I'm I'm I'm very glad to",
    "start": "1016240",
    "end": "1021720"
  },
  {
    "text": "see that it looks like that some people are not quite satisfied with their",
    "start": "1021720",
    "end": "1028039"
  },
  {
    "text": "language no maybe satisfied but they find that this is uh a bit confusing",
    "start": "1029000",
    "end": "1034079"
  },
  {
    "text": "okay so probably yeah I think that we are even now right oh one one okay one",
    "start": "1034079",
    "end": "1041400"
  },
  {
    "text": "yeah okay so we got wait a little bit more maybe maybe someone didn't didn't",
    "start": "1041400",
    "end": "1047199"
  },
  {
    "text": "watch no I think yeah it's done so round three",
    "start": "1047199",
    "end": "1054799"
  },
  {
    "text": "immutability and um I guess uh before we go into details let's maybe start on a",
    "start": "1054799",
    "end": "1062400"
  },
  {
    "text": "motivation Li line why do we need to talk about imitability why is it important yeah sure it might not be such",
    "start": "1062400",
    "end": "1069280"
  },
  {
    "text": "an important topic if M's law still had been effective M law which is more",
    "start": "1069280",
    "end": "1075960"
  },
  {
    "text": "forecast than a law strictly speaking stated that the number of transistors on",
    "start": "1075960",
    "end": "1081520"
  },
  {
    "text": "an integrated circuit would double every year which is not the case anymore and uh the computer industry shifted from uh",
    "start": "1081520",
    "end": "1090159"
  },
  {
    "text": "kind of uh scaling uh thepu frequency to scaling CPUs themselves and now we have",
    "start": "1090159",
    "end": "1098520"
  },
  {
    "text": "much more multi traded applications and multiread applications are more complex",
    "start": "1098520",
    "end": "1105360"
  },
  {
    "text": "to implement to debu and to maintain and tasks run concurrently then there is",
    "start": "1105360",
    "end": "1111440"
  },
  {
    "text": "another factor which begins playing significant role also known as Amal law",
    "start": "1111440",
    "end": "1116640"
  },
  {
    "text": "in essence it helps calculating how much bottlenecks of the system affect its",
    "start": "1116640",
    "end": "1121880"
  },
  {
    "text": "performance and in short a lot every lock which uh you have in your system is",
    "start": "1121880",
    "end": "1129240"
  },
  {
    "text": "a potential performance uh break and immutable data they don't need",
    "start": "1129240",
    "end": "1135039"
  },
  {
    "text": "locks yeah they don't so uh and imitability was actually one of the key",
    "start": "1135039",
    "end": "1140440"
  },
  {
    "text": "reasons original reasons I started looking to functional programming uh so traditional objectoriented languages",
    "start": "1140440",
    "end": "1146919"
  },
  {
    "text": "they will always be mutable by default uh with the data structures and this is",
    "start": "1146919",
    "end": "1152400"
  },
  {
    "text": "what I try to avoid in F data structures uh because they are immutable unless you",
    "start": "1152400",
    "end": "1158240"
  },
  {
    "text": "explicitly ask for mutability I and you know I I never do so developers just",
    "start": "1158240",
    "end": "1163360"
  },
  {
    "text": "write type definitions in the simplest possible way like in this example and they can guarantee that will be threat",
    "start": "1163360",
    "end": "1169280"
  },
  {
    "text": "save they don't need to think about a problem related to mutations uh maybe I",
    "start": "1169280",
    "end": "1174360"
  },
  {
    "text": "have one more unpleasant surprise for you sorry for that so uh Records again",
    "start": "1174360",
    "end": "1180120"
  },
  {
    "text": "it is possible to Define them in C and uh except for some minor syntax",
    "start": "1180120",
    "end": "1186000"
  },
  {
    "text": "differences they are almost identical to their FSH counterparts yeah we can even",
    "start": "1186000",
    "end": "1192880"
  },
  {
    "text": "uh use the same with operator to uh use the copy Constructor it looks very",
    "start": "1192880",
    "end": "1198039"
  },
  {
    "text": "familiar to me but again you see you you're showing me variety but I wish that was the only way",
    "start": "1198039",
    "end": "1203159"
  },
  {
    "text": "to define data structures in C well it's not the only way and it's more common to",
    "start": "1203159",
    "end": "1208480"
  },
  {
    "text": "see classes in a standard cop codebase mainly because doet as an",
    "start": "1208480",
    "end": "1216440"
  },
  {
    "text": "infrastructure is built with presumption of mutability so most of the libraries",
    "start": "1216440",
    "end": "1222080"
  },
  {
    "text": "that we use daily they kind of think that everything is mutable by default",
    "start": "1222080",
    "end": "1227120"
  },
  {
    "text": "and when we use classes it is also possible to enforce uh the immutability",
    "start": "1227120",
    "end": "1232480"
  },
  {
    "text": "but it's not it's not beautiful anymore right we we have to think about uh some",
    "start": "1232480",
    "end": "1237960"
  },
  {
    "text": "additional keywords uh uh property modifiers and things like that so yeah I",
    "start": "1237960",
    "end": "1243080"
  },
  {
    "text": "agree that it's lengthy and it's not that beautiful so you have records but you not always can use them on the",
    "start": "1243080",
    "end": "1250760"
  },
  {
    "text": "domain boundaries yeah well uh to be fair actually it's similar situation also on FSH when it comes to domain B",
    "start": "1250760",
    "end": "1258080"
  },
  {
    "text": "boundaries like look at this attribute uh C mutable what it does like we have a",
    "start": "1258080",
    "end": "1264559"
  },
  {
    "text": "immutable uh data structure record which is still immutable while I'm working uh",
    "start": "1264559",
    "end": "1270200"
  },
  {
    "text": "with it from in inp code but for when accessed from other languages actually",
    "start": "1270200",
    "end": "1275640"
  },
  {
    "text": "it present this class uh this type as a traditional CLR type with Getters and",
    "start": "1275640",
    "end": "1281000"
  },
  {
    "text": "Setters and it's a little hack to make uh it work with libraries like database",
    "start": "1281000",
    "end": "1286480"
  },
  {
    "text": "access like Dapper for example but I don't think we should judge languages",
    "start": "1286480",
    "end": "1291880"
  },
  {
    "text": "just from the the way they work on the domain boundaries but if we focus on how",
    "start": "1291880",
    "end": "1297320"
  },
  {
    "text": "you use languages to model your domain then I think uh the essential part is",
    "start": "1297320",
    "end": "1302919"
  },
  {
    "text": "then in functional languages you have immutability by default and uh objected languages will always stay mutable well",
    "start": "1302919",
    "end": "1310520"
  },
  {
    "text": "I'm not quite sure which default choice is better and uh I'm going to explain",
    "start": "1310520",
    "end": "1316120"
  },
  {
    "text": "why in a minute uh despite fop offering uh many immutable by default collections",
    "start": "1316120",
    "end": "1324360"
  },
  {
    "text": "many fop developers still use dictionaries or immutable D dictionaries mainly because of uh performance",
    "start": "1324360",
    "end": "1332159"
  },
  {
    "text": "considerations and in cop we have both the dictionary class and the mutable",
    "start": "1332159",
    "end": "1337919"
  },
  {
    "text": "dictionary class and we can choose whichever works right in under our",
    "start": "1337919",
    "end": "1344720"
  },
  {
    "text": "specific circumstances in our concrete and specific scenar matter uh yeah uh that's that's fair",
    "start": "1344720",
    "end": "1352840"
  },
  {
    "text": "because we in our code in our code base which is entirely F sharp we still use dictionary for the reasons you just",
    "start": "1352840",
    "end": "1358799"
  },
  {
    "text": "mentioned but uh I think is what's important is not to start with premature",
    "start": "1358799",
    "end": "1364120"
  },
  {
    "text": "optimization of such things so when you see that you need to optimize particular data structure then you uh you choose",
    "start": "1364120",
    "end": "1371960"
  },
  {
    "text": "something that works better in that particular scenario but in most cases it's iio and not internal",
    "start": "1371960",
    "end": "1379000"
  },
  {
    "text": "um algorithm that that is performance breaker so that's again I I think uh",
    "start": "1379000",
    "end": "1384120"
  },
  {
    "text": "default choice is very important it is well I I would love to also uh discuss uh how immutability",
    "start": "1384120",
    "end": "1392480"
  },
  {
    "text": "affects uh memory consumption of your application but that's such a vast topic",
    "start": "1392480",
    "end": "1397600"
  },
  {
    "text": "that we just don't have time to to discuss it in in detail and uh except",
    "start": "1397600",
    "end": "1403240"
  },
  {
    "text": "for mentioning it let's just go ahead and continue yeah so uh",
    "start": "1403240",
    "end": "1409039"
  },
  {
    "text": "uh by the end of the round we have the following cop is mostly mutable by",
    "start": "1409039",
    "end": "1415000"
  },
  {
    "text": "default and uh its collections are optimized for performance and they are",
    "start": "1415000",
    "end": "1420400"
  },
  {
    "text": "um arguably more memory efficient and F you have IM immutable by defa data structures and uh you can opt for uh",
    "start": "1420400",
    "end": "1429000"
  },
  {
    "text": "more efficient collections which come from net Sr",
    "start": "1429000",
    "end": "1435919"
  },
  {
    "text": "sure let's vote",
    "start": "1435919",
    "end": "1440158"
  },
  {
    "text": "should the data structures be immutable by",
    "start": "1443200",
    "end": "1448000"
  },
  {
    "text": "default again tough fun yeah I mean it reminds me how Slow Visual Studio Studio",
    "start": "1451080",
    "end": "1457080"
  },
  {
    "text": "2015 was when they introduced Rosland analyzers that under the hood used uh",
    "start": "1457080",
    "end": "1464000"
  },
  {
    "text": "immutable collections especially when the resharper plug-in was installed because they also created uh an A3 and",
    "start": "1464000",
    "end": "1472720"
  },
  {
    "text": "uh two A3 were fighting each other within a single C to beat process you",
    "start": "1472720",
    "end": "1479039"
  },
  {
    "text": "see it's C now takes the lead um it does yes uhuh but maybe maybe very very tough",
    "start": "1479039",
    "end": "1486399"
  },
  {
    "text": "margin 51 to 49 I think maybe one extra vot may change should I vote yeah like",
    "start": "1486399",
    "end": "1492799"
  },
  {
    "text": "511 512 513 yeah Sal okay 2",
    "start": "1492799",
    "end": "1499720"
  },
  {
    "text": "no no no oh that that's FSH actually yeah yeah actually you know in the early",
    "start": "1499720",
    "end": "1507039"
  },
  {
    "text": "version of this talk we didn't have this imitability section and then when I talking to other people who switched to",
    "start": "1507039",
    "end": "1512720"
  },
  {
    "text": "F at some point they said that one of the key reasons was immutability so we decided that let let it be separate vote",
    "start": "1512720",
    "end": "1519640"
  },
  {
    "text": "okay so it's uh two to one F sh leads okay but there are tougher rounds ahead",
    "start": "1519640",
    "end": "1527080"
  },
  {
    "text": "yeah okay so round number four polymorphism versus pattern matching our",
    "start": "1527080",
    "end": "1532120"
  },
  {
    "text": "aim here is to compare two well-known techniques that both help make code more expressive and",
    "start": "1532120",
    "end": "1538240"
  },
  {
    "text": "maintainable um polymorphism is a Cornerstone of objectoriented",
    "start": "1538240",
    "end": "1543640"
  },
  {
    "text": "programming so uh quite often if I need to create a hierarchy of classes I start",
    "start": "1543640",
    "end": "1549720"
  },
  {
    "text": "with a single interface like this one I payment mhm so the point of having this",
    "start": "1549720",
    "end": "1556880"
  },
  {
    "text": "interface is that can work in the code just working with ey payment and not",
    "start": "1556880",
    "end": "1563200"
  },
  {
    "text": "concrete types like card payment or Bank payment correct yeah correct that's what",
    "start": "1563200",
    "end": "1568600"
  },
  {
    "text": "essentially polymorphism is you don't need to know the specific implementation you use abstractions Sy that and we also",
    "start": "1568600",
    "end": "1575640"
  },
  {
    "text": "have uh another uh principle that ensures that we Implement uh",
    "start": "1575640",
    "end": "1581279"
  },
  {
    "text": "polymorphism correctly the Lisk of substitution principle that requires that all sub all super classes so yeah",
    "start": "1581279",
    "end": "1589720"
  },
  {
    "text": "all super classes can be substituted with eight sub classes without affecting the correctness of the program yes a Le",
    "start": "1589720",
    "end": "1596919"
  },
  {
    "text": "Constitution principle is the way to validate if your class hierarchy is truly polymorphic and I believe that",
    "start": "1596919",
    "end": "1604000"
  },
  {
    "text": "this principle actually on my side in this competition because real world",
    "start": "1604000",
    "end": "1609200"
  },
  {
    "text": "makes developers violate all the time what I've seen numerous times in software development project based in op",
    "start": "1609200",
    "end": "1615640"
  },
  {
    "text": "is that the implementation is patched with runtime top checks to be an excessive effort like let's say we",
    "start": "1615640",
    "end": "1623120"
  },
  {
    "text": "introduced a new uh type of payment card payment uh sorry a cash payment uh where",
    "start": "1623120",
    "end": "1628799"
  },
  {
    "text": "you can pay on delivery so payment doesn't need to be completed um when you",
    "start": "1628799",
    "end": "1635159"
  },
  {
    "text": "make an order so what um developers will often do they will just patch the implementation and then they will check",
    "start": "1635159",
    "end": "1641679"
  },
  {
    "text": "okay so we can ship the order if its state is completed or payment is Cash payment and then you know Lis of is viol",
    "start": "1641679",
    "end": "1649200"
  },
  {
    "text": "I'm not buying it this is a synthetic example which you meticulously crafted",
    "start": "1649200",
    "end": "1654880"
  },
  {
    "text": "just to support your point of view you could have extended the original interface you could have introduced",
    "start": "1654880",
    "end": "1660159"
  },
  {
    "text": "another interface but you decided to do the upcasting and you know that's a new",
    "start": "1660159",
    "end": "1665679"
  },
  {
    "text": "business rule right and uh when we have business rules we have uh we we do",
    "start": "1665679",
    "end": "1671480"
  },
  {
    "text": "review our code right it's called refactoring yeah but I find the whole process is quite tedious with",
    "start": "1671480",
    "end": "1678360"
  },
  {
    "text": "unnecessary number of obstructs introduced every time we break lisu we introduce uh new obstruction new",
    "start": "1678360",
    "end": "1685720"
  },
  {
    "text": "interface and of also it affects all dependent clusters even they're not directly involved in this design change",
    "start": "1685720",
    "end": "1693679"
  },
  {
    "text": "uh what exactly do you mean by that uh well uh enter F SHP you know at first",
    "start": "1693679",
    "end": "1700120"
  },
  {
    "text": "glance this code may look similar to what we just Define in C but not the",
    "start": "1700120",
    "end": "1705279"
  },
  {
    "text": "difference concrete uh uh type stay and change no matter how you categorize them",
    "start": "1705279",
    "end": "1711039"
  },
  {
    "text": "so we don't have interfaces here we first Define our concrete types and then we have discriminated uh Union subtype",
    "start": "1711039",
    "end": "1718039"
  },
  {
    "text": "which can group them together and then uh grouping comes later and then no",
    "start": "1718039",
    "end": "1723880"
  },
  {
    "text": "matter how we group them the class stay unchange unlike in C where every",
    "start": "1723880",
    "end": "1728919"
  },
  {
    "text": "interface change actually uh make a formal change to the to the class but hold on if um individual payment options",
    "start": "1728919",
    "end": "1737399"
  },
  {
    "text": "don't share any common interface how do you get access to their shared field well in um",
    "start": "1737399",
    "end": "1744279"
  },
  {
    "text": "in function programming it's uh typically you use pattern matching so uh like in in this scenario this is called",
    "start": "1744279",
    "end": "1751080"
  },
  {
    "text": "written FP so if you need to uh write similar code and F you pattern match and",
    "start": "1751080",
    "end": "1756200"
  },
  {
    "text": "you do certain different Behavior based on for cash payment um but again what",
    "start": "1756200",
    "end": "1762720"
  },
  {
    "text": "about LSP here didn't you just violate it by you know introducing this if else",
    "start": "1762720",
    "end": "1769919"
  },
  {
    "text": "uh branching in in your business Logic No I don't because uh I don't pretend",
    "start": "1769919",
    "end": "1775279"
  },
  {
    "text": "these types to be Pol polymorphic so there is no polymorph and there is no interface so there is no violation of",
    "start": "1775279",
    "end": "1781640"
  },
  {
    "text": "Lisk subtitution principle uh function programming also supports polymorphism in other areas but no not here uh real",
    "start": "1781640",
    "end": "1789320"
  },
  {
    "text": "world not of so often truly polymorphing so let's just face it yeah such a smart",
    "start": "1789320",
    "end": "1795919"
  },
  {
    "text": "move you cannot violate something if you don't use it right uh okay I see that that's an",
    "start": "1795919",
    "end": "1802480"
  },
  {
    "text": "option it's obviously different but I don't see how it is better once again",
    "start": "1802480",
    "end": "1808440"
  },
  {
    "text": "it's not objectoriented it's functional but what's the point okay uh so you telling me that I sort of manually",
    "start": "1808440",
    "end": "1814519"
  },
  {
    "text": "crafted a type toate my point let me then show a type that everyone is",
    "start": "1814519",
    "end": "1820720"
  },
  {
    "text": "familiar with and that is one of the oldest net classes it's a class stream",
    "start": "1820720",
    "end": "1826640"
  },
  {
    "text": "you have abstract class and it's you know it's so much polymorphism going on here everything is abstract and virtual",
    "start": "1826640",
    "end": "1834120"
  },
  {
    "text": "and but by looking at these properties I can read can seek can time out can write",
    "start": "1834120",
    "end": "1839559"
  },
  {
    "text": "you may start suspecting that things actually are not going very smooth here",
    "start": "1839559",
    "end": "1844640"
  },
  {
    "text": "and actually they not because every essential mode can uh method can throw",
    "start": "1844640",
    "end": "1849799"
  },
  {
    "text": "exception so you see we we made a class we declared it's polymorphic but we in",
    "start": "1849799",
    "end": "1856120"
  },
  {
    "text": "real world in real implementation we just violated sort of by throwing exceptions",
    "start": "1856120",
    "end": "1861399"
  },
  {
    "text": "from every method so this this is actually what can be bad about uh",
    "start": "1861399",
    "end": "1866480"
  },
  {
    "text": "bringing po polymorphism to the types that actually not truly polymorphic yeah now I see a point and that's true I",
    "start": "1866480",
    "end": "1873200"
  },
  {
    "text": "agree and uh unfortunately that's not the only example of uh LSP violation in",
    "start": "1873200",
    "end": "1880519"
  },
  {
    "text": "net standard Library uh airable and Link as a whole is another great example but",
    "start": "1880519",
    "end": "1887919"
  },
  {
    "text": "in defense of cop and uh the net platform I can tell that this class is",
    "start": "1887919",
    "end": "1893240"
  },
  {
    "text": "as old as net itself and I think that if U it had been possible to recreate it",
    "start": "1893240",
    "end": "1899320"
  },
  {
    "text": "from scratch now it would be implemented differently yeah perhaps uh still this example demonstrates the pitfalls of",
    "start": "1899320",
    "end": "1906600"
  },
  {
    "text": "forcing Strong Behavior assumptions on related type of object if this happened to Microsoft developers it has happened",
    "start": "1906600",
    "end": "1912679"
  },
  {
    "text": "to you yes yeah I mean it can happen but uh I feel more like that it's not about",
    "start": "1912679",
    "end": "1920399"
  },
  {
    "text": "uh polymorphism or Pat matching classes or uh discriminated unions it's more",
    "start": "1920399",
    "end": "1926200"
  },
  {
    "text": "about some decisions that once made are very complex to to revert in the future",
    "start": "1926200",
    "end": "1931720"
  },
  {
    "text": "and this is an example of such a decision because we have so many dependencies on the stream class across",
    "start": "1931720",
    "end": "1937480"
  },
  {
    "text": "all possible uh code bases across the worldall that I don't see how we can change it anymore MH okay let's",
    "start": "1937480",
    "end": "1946080"
  },
  {
    "text": "vote so what's your preferred way to do the control flow in your",
    "start": "1946320",
    "end": "1954600"
  },
  {
    "text": "application or execution flow we can use polymorphic exe",
    "start": "1954600",
    "end": "1960559"
  },
  {
    "text": "polymorphic execution flow or we can use the execution flow based on pattern",
    "start": "1960559",
    "end": "1967720"
  },
  {
    "text": "matching so we had 21 to FP right yeah um shop is leading again",
    "start": "1967720",
    "end": "1975440"
  },
  {
    "text": "mhm people just hate object R programming now I wonder if our talk it was very early like at 9:00 if it was",
    "start": "1975960",
    "end": "1982679"
  },
  {
    "text": "like last talk in the day would the voting be different so maybe because there you know s such explor of people",
    "start": "1982679",
    "end": "1989399"
  },
  {
    "text": "coming soly okay so th those who those who have like motivation right so it's",
    "start": "1989399",
    "end": "1997639"
  },
  {
    "text": "the most motivated we have the most motivated audience so it's 56 to",
    "start": "1997639",
    "end": "2004799"
  },
  {
    "text": "44 okay let's wait a few seconds more hm",
    "start": "2004799",
    "end": "2010279"
  },
  {
    "text": "interesting what I like today is how close uh every single round",
    "start": "2010279",
    "end": "2016559"
  },
  {
    "text": "is so it looks like 3 2 one and surprisingly F sh is leading but we",
    "start": "2016559",
    "end": "2023840"
  },
  {
    "text": "still have three rounds to go so every anything can change anything can happen",
    "start": "2023840",
    "end": "2029000"
  },
  {
    "text": "yeah so um at the end of the last round we saw some exceptions thrown from the",
    "start": "2029000",
    "end": "2034200"
  },
  {
    "text": "stream class so I believe it's about time to have a close close look at error handling in both languages oh yeah",
    "start": "2034200",
    "end": "2041919"
  },
  {
    "text": "drawing exception is the standard way of dealing with errors in cop uh actually",
    "start": "2041919",
    "end": "2048079"
  },
  {
    "text": "it's even a best practice recommended by Microsoft yes and um no Scott flashen",
    "start": "2048079",
    "end": "2054919"
  },
  {
    "text": "who actually will be speaking this conference had brilliant talk called Railway oriented programming anyone has",
    "start": "2054919",
    "end": "2061000"
  },
  {
    "text": "seen this talk few hands good uh please watch it it's it's it's really good and",
    "start": "2061000",
    "end": "2067358"
  },
  {
    "text": "um uh so this is a slide from his talk and uh this slide obviously proof that",
    "start": "2067359",
    "end": "2073440"
  },
  {
    "text": "modern developers has learned recommendations to throw exceptions instead of returning error code don't",
    "start": "2073440",
    "end": "2079200"
  },
  {
    "text": "you think marks that one problem turned into another uh no I don't I don't think",
    "start": "2079200",
    "end": "2085118"
  },
  {
    "text": "so I think that the original the original problem was different and uh it was not related to exceptions or error",
    "start": "2085119",
    "end": "2092280"
  },
  {
    "text": "codes I see that the main problem is that exception handling or error",
    "start": "2092280",
    "end": "2098079"
  },
  {
    "text": "handling as a whole is a boring and tedious process and developers like to",
    "start": "2098079",
    "end": "2104320"
  },
  {
    "text": "create things Implement things and once you implemented any happy path",
    "start": "2104320",
    "end": "2110119"
  },
  {
    "text": "scenario you kind of think that you're done but then you feel like oh there's one more Corner case and this corner",
    "start": "2110119",
    "end": "2116720"
  },
  {
    "text": "case and actually I need to add another if statement here and uh oh my God no",
    "start": "2116720",
    "end": "2122400"
  },
  {
    "text": "I'll just close my laptop and and go away so so it's a question of a discipline yes it's displine what wores",
    "start": "2122400",
    "end": "2128839"
  },
  {
    "text": "me Inception handling that it complicates the code it surrounds happy past with a forest of um additional code",
    "start": "2128839",
    "end": "2137560"
  },
  {
    "text": "lines just to handle exceptions so even if you just have one happy pass code",
    "start": "2137560",
    "end": "2143160"
  },
  {
    "text": "line you know here it's surrounded with seven lies of exception handling and uh",
    "start": "2143160",
    "end": "2148480"
  },
  {
    "text": "when you have need to handle multiple exceptions error handling code becomes overwhelming what is worse is that uh it",
    "start": "2148480",
    "end": "2156160"
  },
  {
    "text": "brings challenges related to graceful recovery from from an error and then if you have uh exceptions and threads so",
    "start": "2156160",
    "end": "2164119"
  },
  {
    "text": "the error must be handled in different threat from the one that originated operation that becomes really too",
    "start": "2164119",
    "end": "2171839"
  },
  {
    "text": "complicated uh but you don't have to do it like this uh and that's not how I",
    "start": "2171839",
    "end": "2177160"
  },
  {
    "text": "deal with exceptions in my code uh Global exception handling does exist and",
    "start": "2177160",
    "end": "2183599"
  },
  {
    "text": "instead of copy pasting TR catch statements across your entire code base I see that it's much easier to implement",
    "start": "2183599",
    "end": "2190839"
  },
  {
    "text": "uh exception handling only on the global level so uh p is a library that comes to",
    "start": "2190839",
    "end": "2196560"
  },
  {
    "text": "my mind uh how many of you are familiar with P okay quite a lot so you guys know that",
    "start": "2196560",
    "end": "2204560"
  },
  {
    "text": "that you don't really catch all possible HTTP client related exceptions in your code you just set up poly you set up",
    "start": "2204560",
    "end": "2212400"
  },
  {
    "text": "your uh HTTP client Factory and you define what kind of exception you want",
    "start": "2212400",
    "end": "2217599"
  },
  {
    "text": "to catch and uh if it's possible to recover from them it only makes sense to",
    "start": "2217599",
    "end": "2223160"
  },
  {
    "text": "catch an exception in your application code if you can recover from it if you only need to log it then Global",
    "start": "2223160",
    "end": "2230480"
  },
  {
    "text": "exception handling is sufficient this may help um I'm also familiar with spoil",
    "start": "2230480",
    "end": "2235520"
  },
  {
    "text": "a little uh but we are here to explore idiomatic usage of each language their default choices not not bringing",
    "start": "2235520",
    "end": "2241839"
  },
  {
    "text": "external libraries oh I would still consider the language and its ecosystem as a whole",
    "start": "2241839",
    "end": "2248680"
  },
  {
    "text": "but you know what let's just continue I just I'd like to see where you're",
    "start": "2248680",
    "end": "2253880"
  },
  {
    "text": "getting at mhm okay now first let me just state that traditional exceptional",
    "start": "2253880",
    "end": "2259960"
  },
  {
    "text": "handling in all has been recognized as a problem there was an even article published under titled exception",
    "start": "2259960",
    "end": "2266040"
  },
  {
    "text": "handling considered harmful you are not advocating error",
    "start": "2266040",
    "end": "2271480"
  },
  {
    "text": "codes aren't you no no for statement based languages yes there is no return",
    "start": "2271480",
    "end": "2276720"
  },
  {
    "text": "to eror code so let me uh get it right but FP is an expression based language",
    "start": "2276720",
    "end": "2282839"
  },
  {
    "text": "so you can't just ignore exception uh you either have to use it or you you have to actively uh there aerator ignore",
    "start": "2282839",
    "end": "2291680"
  },
  {
    "text": "it saying that no I'm not interested in interest in processing it otherwise you will get compilation error but I mean we",
    "start": "2291680",
    "end": "2298160"
  },
  {
    "text": "do have uh an alternative to exceptions in C actually we have this option from",
    "start": "2298160",
    "end": "2304000"
  },
  {
    "text": "the very beginning it's called Tri pattern most of the um methods that",
    "start": "2304000",
    "end": "2309359"
  },
  {
    "text": "possibly control exceptions are accompanied with their uh try",
    "start": "2309359",
    "end": "2315000"
  },
  {
    "text": "equivalence and while the original methods do throw exceptions try methods",
    "start": "2315000",
    "end": "2320440"
  },
  {
    "text": "return the bllen result instead and we have an out parameter that is only",
    "start": "2320440",
    "end": "2325880"
  },
  {
    "text": "initialized if the bullin result is true and uh actually that's a good thing",
    "start": "2325880",
    "end": "2331720"
  },
  {
    "text": "because the C compiler can check whether you um initialize the out PR arer it it",
    "start": "2331720",
    "end": "2339240"
  },
  {
    "text": "it's not like it can it will yeah so it's it's a it's a compile safe design",
    "start": "2339240",
    "end": "2345560"
  },
  {
    "text": "yeah try pattern is a good thing but probably people from that slide from Scot Flash and they just didn't um know",
    "start": "2345560",
    "end": "2351440"
  },
  {
    "text": "that it exists so uh in uh function programming in particular in FP then we",
    "start": "2351440",
    "end": "2356520"
  },
  {
    "text": "have a result type which is some type which is discriminated Union that",
    "start": "2356520",
    "end": "2361880"
  },
  {
    "text": "consists of okay of some value and error of another value so this is how you",
    "start": "2361880",
    "end": "2368720"
  },
  {
    "text": "control your execution flow okay this code looks good to me but what if we",
    "start": "2368720",
    "end": "2375079"
  },
  {
    "text": "needed to chain multiple results together would this mean that I need",
    "start": "2375079",
    "end": "2382520"
  },
  {
    "text": "to like write this kind of param of Doom style of code if it's the case I would",
    "start": "2382520",
    "end": "2387839"
  },
  {
    "text": "choose C exception handling instead if it was the case I would also have done",
    "start": "2387839",
    "end": "2392920"
  },
  {
    "text": "that but uh you know in in brief you don't need to write such um horrible Cod",
    "start": "2392920",
    "end": "2399240"
  },
  {
    "text": "so uh without going deep into details uh yeah we can keep a pipeline as we had we",
    "start": "2399240",
    "end": "2406720"
  },
  {
    "text": "just need to create a different operator that will bind results together so remember our F order processing pipeline",
    "start": "2406720",
    "end": "2413040"
  },
  {
    "text": "to add er error aware awareness we um introduce new operator instead of",
    "start": "2413040",
    "end": "2419280"
  },
  {
    "text": "pipeline operator that we used uh in originally uh it looks like a fish where",
    "start": "2419280",
    "end": "2424400"
  },
  {
    "text": "and it's Error aware so it can uh control both handle both okay and error",
    "start": "2424400",
    "end": "2431000"
  },
  {
    "text": "what's the fish it's getting a bit cryptic yeah it's it's it's an operator which some overloaded functionality so",
    "start": "2431000",
    "end": "2437599"
  },
  {
    "text": "if you go to next slide uh you will see uh where I'm getting so you have on the right hand side the original pipeline",
    "start": "2437599",
    "end": "2444480"
  },
  {
    "text": "where we didn't have a uh result awareness and left hand side we have",
    "start": "2444480",
    "end": "2449839"
  },
  {
    "text": "this fish operator where we actually uh check if it's okay if it's an error and",
    "start": "2449839",
    "end": "2455359"
  },
  {
    "text": "depending on that go even uh either further or we stop our execution so the execution flow looks the same now I will",
    "start": "2455359",
    "end": "2462480"
  },
  {
    "text": "believe you I'm okay with postponing discussion about mysterious operators of your until the next round and now thank",
    "start": "2462480",
    "end": "2472480"
  },
  {
    "text": "you and now let's just vote so cop we primarily rely on exception handling and",
    "start": "2473599",
    "end": "2481119"
  },
  {
    "text": "in FSH primarily on results we can still",
    "start": "2481119",
    "end": "2486280"
  },
  {
    "text": "uh throw exceptions sharp but default choice is use result of T yeah the truth is that FSH also runs on top of net and",
    "start": "2486280",
    "end": "2494960"
  },
  {
    "text": "net is itself uh is just an infrastructure that throws exceptions",
    "start": "2494960",
    "end": "2502359"
  },
  {
    "text": "mhm I think that we have a clear winner here which is C now um so exceptions",
    "start": "2502359",
    "end": "2508839"
  },
  {
    "text": "yeah people like exceptions I mean it is interesting that the results of these rounds are",
    "start": "2508839",
    "end": "2515599"
  },
  {
    "text": "different across different confence because there are conferences uh whose audience clearly hate",
    "start": "2515599",
    "end": "2522599"
  },
  {
    "text": "exceptions yeah uh in um I think in build staff in vness we had we ask",
    "start": "2522599",
    "end": "2528400"
  },
  {
    "text": "audience and then majority was in favor of f exception handling but on the other yeah but but they all like hated",
    "start": "2528400",
    "end": "2534160"
  },
  {
    "text": "exceptions yeah okay but here we have 6040 so I think it's U probably the biggest margin",
    "start": "2534160",
    "end": "2541160"
  },
  {
    "text": "we've had in this competition yeah 3 to two F shop is leading okay it's getting",
    "start": "2541160",
    "end": "2549000"
  },
  {
    "text": "tougher okay so it's about time to talk about the operators until now we've been",
    "start": "2549000",
    "end": "2555960"
  },
  {
    "text": "um comparing the different techniques that exist in both languages and right now we are going to present a feature",
    "start": "2555960",
    "end": "2563880"
  },
  {
    "text": "that only exists in fap C handles uh similar issues very differently uh just",
    "start": "2563880",
    "end": "2571920"
  },
  {
    "text": "in case how many of you guys are familiar with computation expressions in FSH",
    "start": "2571920",
    "end": "2577599"
  },
  {
    "text": "yeah two people okay V would you mind briefly introducing F computation expression please yeah with pleasure so",
    "start": "2577599",
    "end": "2585520"
  },
  {
    "text": "remember the order processing pipeline in FSH from the previous round where we packed errow handling you know in fancy",
    "start": "2585520",
    "end": "2592400"
  },
  {
    "text": "fish operator we didn't have to do that instead we could use so called computation expression result uh it",
    "start": "2592400",
    "end": "2598559"
  },
  {
    "text": "looked like a key code uh you know it's uh it's in blue color um but FP offers",
    "start": "2598559",
    "end": "2607520"
  },
  {
    "text": "alternative technique to hide context specific internals of the ction pipeline so the main code can focus on the actual",
    "start": "2607520",
    "end": "2614599"
  },
  {
    "text": "functionality and things will happen behind the scenes so you see we have this result and the scope of result uh",
    "start": "2614599",
    "end": "2623559"
  },
  {
    "text": "you will see several let let bank it's a left with a clamation Mark it's a kind of left with some additional",
    "start": "2623559",
    "end": "2630440"
  },
  {
    "text": "functionality which in the context of result will handle okay and error so you",
    "start": "2630440",
    "end": "2637720"
  },
  {
    "text": "will focus on the main Pipeline and then it will uh uh handle the error",
    "start": "2637720",
    "end": "2644760"
  },
  {
    "text": "situations for you and this is just extension it's not a keyword of the new",
    "start": "2644760",
    "end": "2650160"
  },
  {
    "text": "version of the language so in other words um Lead Bank in is a short hand",
    "start": "2650160",
    "end": "2656720"
  },
  {
    "text": "for the bind function from the previous round and uh the bind function itself is kind of function that is capable of",
    "start": "2656720",
    "end": "2663480"
  },
  {
    "text": "overcharging other functions that only can work with regular arguments in a way that now these new functions can work",
    "start": "2663480",
    "end": "2671240"
  },
  {
    "text": "with elevated arguments such as results for example or tasks and tasks are known",
    "start": "2671240",
    "end": "2678079"
  },
  {
    "text": "as ayns in FSH yeah and I think it's a good example because uh this is",
    "start": "2678079",
    "end": "2683839"
  },
  {
    "text": "something that um you know gives almost identical code in C so this is uh the",
    "start": "2683839",
    "end": "2689680"
  },
  {
    "text": "same thing computation expression I think and if you replace this lead bank with VAR and you add a v you you will",
    "start": "2689680",
    "end": "2697720"
  },
  {
    "text": "you will get a c code um so it it's very understandable for C folks here yeah",
    "start": "2697720",
    "end": "2704680"
  },
  {
    "text": "let's just prove it so this is the C counterart uh once again apart from",
    "start": "2704680",
    "end": "2711599"
  },
  {
    "text": "minor syntax differences they are identical with the only but very",
    "start": "2711599",
    "end": "2716720"
  },
  {
    "text": "important uh difference async and A8 are keywords in C unlike in F yeah so I",
    "start": "2716720",
    "end": "2723880"
  },
  {
    "text": "think a way they were added as far remember in C four and uh in uh F it's",
    "start": "2723880",
    "end": "2730839"
  },
  {
    "text": "all uh just a part of computation Expressions which any developer can",
    "start": "2730839",
    "end": "2736160"
  },
  {
    "text": "write like here we have computation expressions for query and also we have a lot of other computation Expressions",
    "start": "2736160",
    "end": "2742880"
  },
  {
    "text": "which you can see on the next slide um so you see SEC task I think uh in our",
    "start": "2742880",
    "end": "2748960"
  },
  {
    "text": "project we use a lot of actor competion expression so uh you Empower your uh language with this extensions that will",
    "start": "2748960",
    "end": "2755160"
  },
  {
    "text": "look like keyword but you don't need to upgrade the language and you just use the power of them I don't want to",
    "start": "2755160",
    "end": "2761200"
  },
  {
    "text": "don'tplay the role of FSH computation expression but the truth is that a",
    "start": "2761200",
    "end": "2768680"
  },
  {
    "text": "computation expression is a fancy name for you know what for a Monet",
    "start": "2768680",
    "end": "2774280"
  },
  {
    "text": "comprehension and we all know that monets are evil and monets are not",
    "start": "2774280",
    "end": "2779520"
  },
  {
    "text": "beginner friendly and for a mainstream language which cop is I believe that it",
    "start": "2779520",
    "end": "2785160"
  },
  {
    "text": "should be a mon free zone well uh you said word mod I didn't because you said",
    "start": "2785160",
    "end": "2791640"
  },
  {
    "text": "bind to in order to use computation Expressions you don't need to go into details you just use um libraries",
    "start": "2791640",
    "end": "2797800"
  },
  {
    "text": "written for you if you want you can learn it you can write your own compation experation but what my point",
    "start": "2797800",
    "end": "2803040"
  },
  {
    "text": "is that you know it really lets your language to be extended uh well and my",
    "start": "2803040",
    "end": "2809440"
  },
  {
    "text": "point is that um Sometimes some features might be way too powerful like multiple",
    "start": "2809440",
    "end": "2816119"
  },
  {
    "text": "inheritance in C in C++ so computation expression I think is a similar example",
    "start": "2816119",
    "end": "2822119"
  },
  {
    "text": "and C cop uh choose another approach we have keywords and we cannot kind of",
    "start": "2822119",
    "end": "2828760"
  },
  {
    "text": "change them that's true but I'm quite happy with uh the subset of keywords that we have and 99% of the time uh I",
    "start": "2828760",
    "end": "2836599"
  },
  {
    "text": "think weight link and things like yield I'm just happy with them and I don't feel like I need anything else yeah just",
    "start": "2836599",
    "end": "2843880"
  },
  {
    "text": "want to State the C approach Lacks extensibility which is offered by FP and",
    "start": "2843880",
    "end": "2849359"
  },
  {
    "text": "maybe this fact will be reflected in the voting results yeah it does so let's see",
    "start": "2849359",
    "end": "2854599"
  },
  {
    "text": "do computation expression provide powerful language extension possibilities or are they too dangerous",
    "start": "2854599",
    "end": "2861359"
  },
  {
    "text": "do we need such a powerful",
    "start": "2861359",
    "end": "2866640"
  },
  {
    "text": "techniques I think this uh um yeah that's a clear winner across all the all",
    "start": "2866640",
    "end": "2872920"
  },
  {
    "text": "all I think it's the third or fourth time we running this U voting and that all the time make people mean again I",
    "start": "2872920",
    "end": "2880400"
  },
  {
    "text": "guess you you're scaring people with the word Mor yeah I believe I believe it's kind of it's Sucker Punch from my you're",
    "start": "2880400",
    "end": "2886240"
  },
  {
    "text": "you're playing a trick yeah so it's 74 73",
    "start": "2886240",
    "end": "2892000"
  },
  {
    "text": "okay well but but then it's 3 three yes it's okay uh well final round",
    "start": "2892000",
    "end": "2899559"
  },
  {
    "text": "communities yeah and that's going to be that's going to be a tough one sure FP",
    "start": "2899559",
    "end": "2906480"
  },
  {
    "text": "is a great language and some of its features might be the deciding fact factors despite that many people don't",
    "start": "2906480",
    "end": "2913040"
  },
  {
    "text": "want computation Expressions some uh some people just love them but how many",
    "start": "2913040",
    "end": "2918440"
  },
  {
    "text": "of them how many people use FSH here we can see the results of uh the ster flow",
    "start": "2918440",
    "end": "2926200"
  },
  {
    "text": "developer survey from 2023 and uh the Sur shows a huge gap in popularity of",
    "start": "2926200",
    "end": "2934839"
  },
  {
    "text": "these two languages and that's kind of to be reckoned with well there is definitely a huge gap but it's not",
    "start": "2934839",
    "end": "2940200"
  },
  {
    "text": "Parliament election and then once you have a team happy with the language why do you need to care like we use f",
    "start": "2940200",
    "end": "2945920"
  },
  {
    "text": "internally we're happy with that why do we need to care the fact that it's just 1% with f and 30% well well perhaps",
    "start": "2945920",
    "end": "2952760"
  },
  {
    "text": "maybe that's my inner manager speaking but uh when I think about things like",
    "start": "2952760",
    "end": "2958400"
  },
  {
    "text": "how difficult it is to find a good engineer I start thinking how difficult",
    "start": "2958400",
    "end": "2963839"
  },
  {
    "text": "it is to find an engineer who can right in F sh it looks like that it's 30 times",
    "start": "2963839",
    "end": "2970400"
  },
  {
    "text": "more difficult so your concern is that U it can be hard to find good FSH",
    "start": "2970400",
    "end": "2976280"
  },
  {
    "text": "developers and uh our approach has always been not to search for FSH",
    "start": "2976280",
    "end": "2982359"
  },
  {
    "text": "developers search for Great developers like this right attitude so we never uh",
    "start": "2982359",
    "end": "2989319"
  },
  {
    "text": "uh advertised for f developers to our teams and once we uh we got a developer",
    "start": "2989319",
    "end": "2994640"
  },
  {
    "text": "who without f or C or even net or even Windows Experience he came from embedded",
    "start": "2994640",
    "end": "3001559"
  },
  {
    "text": "development and but he was interested in uh functional programming and he quickly became very fluent and productive in M",
    "start": "3001559",
    "end": "3008040"
  },
  {
    "text": "sharp so I I think that just try to find good developers it will work fine yeah I",
    "start": "3008040",
    "end": "3013640"
  },
  {
    "text": "mean I believe that there are quick learners but people are different and would you agree that this is a valid",
    "start": "3013640",
    "end": "3019760"
  },
  {
    "text": "concern uh from management perspective probably especially for teams that never",
    "start": "3019760",
    "end": "3025799"
  },
  {
    "text": "work with project in FP uh once you uh started working whil you see how",
    "start": "3025799",
    "end": "3031520"
  },
  {
    "text": "efficient it is I don't think it it it stays as a concern okay so let's see",
    "start": "3031520",
    "end": "3036920"
  },
  {
    "text": "what the audience thinks about it okay so cop has a large developer",
    "start": "3036920",
    "end": "3044280"
  },
  {
    "text": "commun community and uh the vast majority of apis are written in C and",
    "start": "3044280",
    "end": "3050880"
  },
  {
    "text": "what about F and F uh developers have mostly both F and C skills and actually",
    "start": "3050880",
    "end": "3056000"
  },
  {
    "text": "that's also an an advantage uh don't hire F developers any c light can use from F and ecosystem is good enough you",
    "start": "3056000",
    "end": "3064319"
  },
  {
    "text": "have support Visual Studio Rider Visual Studio code so let's see the results of",
    "start": "3064319",
    "end": "3070000"
  },
  {
    "text": "the last",
    "start": "3070000",
    "end": "3072359"
  },
  {
    "text": "round so it's just jumping jumping around sides a very tough one so",
    "start": "3080040",
    "end": "3087760"
  },
  {
    "text": "I wish I could have a draw I mean it looks like",
    "start": "3087760",
    "end": "3094599"
  },
  {
    "text": "that interesting I think this is the first time where uh",
    "start": "3094599",
    "end": "3100680"
  },
  {
    "text": "F it's just run managers in this in this that's all there are only developers and",
    "start": "3100680",
    "end": "3107680"
  },
  {
    "text": "developers like fancy tools and and new toys and things like that let's wait a few more seconds but it's this one is",
    "start": "3107680",
    "end": "3114559"
  },
  {
    "text": "very surprising to me because I was quite sure that this round always goes",
    "start": "3114559",
    "end": "3120520"
  },
  {
    "text": "to yeah I think that's the first time when we see uh that F shop is leing it was very tough like almost draw 52 but",
    "start": "3120520",
    "end": "3127640"
  },
  {
    "text": "it can be hard to get good developers also it can yeah but we just have more",
    "start": "3127640",
    "end": "3133440"
  },
  {
    "text": "more people so it's easier to to to like find at least one and",
    "start": "3133440",
    "end": "3139400"
  },
  {
    "text": "surprisingly F sh is leading and the conclusion is that F wins we all have to",
    "start": "3139400",
    "end": "3146119"
  },
  {
    "text": "switch to F sh and forget about sh no we don't even though I'm a Shar guy no we don't we don't need to switch no we'",
    "start": "3146119",
    "end": "3152960"
  },
  {
    "text": "like this not to be your key takeaway cop and FSH are both great languages and",
    "start": "3152960",
    "end": "3160040"
  },
  {
    "text": "many teams have chosen them and most importantly these teams are happy with their choices and we spent quite a lot",
    "start": "3160040",
    "end": "3166760"
  },
  {
    "text": "of time time preparing material for this talk because the longer we worked the the more we understood that you know",
    "start": "3166760",
    "end": "3173240"
  },
  {
    "text": "it's quite subjective to uh uh to find this question and then I think your",
    "start": "3173240",
    "end": "3178559"
  },
  {
    "text": "Waring also proves that that you know it's really tough ones so um both are",
    "start": "3178559",
    "end": "3184599"
  },
  {
    "text": "great languages and I guess our main goal is not just uh to find the the the",
    "start": "3184599",
    "end": "3191280"
  },
  {
    "text": "best one yeah we really appreciate your activity and your votes today yeah and",
    "start": "3191280",
    "end": "3196440"
  },
  {
    "text": "uh you proved to be very fair judges because like majority of you using C I",
    "start": "3196440",
    "end": "3202160"
  },
  {
    "text": "think you're clearly open-minded so thank you for your cooperation and I",
    "start": "3202160",
    "end": "3207200"
  },
  {
    "text": "guess we still have a few minutes so if you have any questions about C Shar or F",
    "start": "3207200",
    "end": "3213839"
  },
  {
    "text": "or the meaning of life we are here on the stage yeah thank you we have this is working yeah six",
    "start": "3213839",
    "end": "3220839"
  },
  {
    "text": "minutes yeah any",
    "start": "3220839",
    "end": "3224520"
  },
  {
    "text": "questions uh other other than the syntax difference as you've just mentioned is there anything is there is there a use",
    "start": "3228559",
    "end": "3235440"
  },
  {
    "text": "case where functional programming just is a clear winner like is is there a use case where obviously you know if you're",
    "start": "3235440",
    "end": "3240880"
  },
  {
    "text": "don't building a website I would lean towards C cuz that's what I'm familiar with is there some equivalent in",
    "start": "3240880",
    "end": "3246359"
  },
  {
    "text": "functional programming where that's just obviously the choice I think that's a question to you",
    "start": "3246359",
    "end": "3252280"
  },
  {
    "text": "mhm uh you know it used to be like if if you",
    "start": "3252280",
    "end": "3258000"
  },
  {
    "text": "um Travers back in time like 10 10 years ago people say oh F it's probably like",
    "start": "3258000",
    "end": "3264559"
  },
  {
    "text": "for mathematics or um some banking system some some people",
    "start": "3264559",
    "end": "3270640"
  },
  {
    "text": "would say now actually you can write any system in FP where I think um it's a",
    "start": "3270640",
    "end": "3277000"
  },
  {
    "text": "it's a clear winner when you uh when you want uh to design your system as a set",
    "start": "3277000",
    "end": "3285440"
  },
  {
    "text": "of functional Transformations so I think the imitability actually uh really important uh Point here so we see this",
    "start": "3285440",
    "end": "3292359"
  },
  {
    "text": "execution pipeline where you sort of uh uh system goes through Transformations",
    "start": "3292359",
    "end": "3297520"
  },
  {
    "text": "without uh side effects uh so I think it really gives you a great Advantage",
    "start": "3297520",
    "end": "3303720"
  },
  {
    "text": "because uh you uh you're guaranteed by the nature of the language then there",
    "start": "3303720",
    "end": "3309280"
  },
  {
    "text": "are no nothing uh happening on on the side which you you don't observe you",
    "start": "3309280",
    "end": "3314880"
  },
  {
    "text": "don't have uh control over so um I think",
    "start": "3314880",
    "end": "3319920"
  },
  {
    "text": "that um it helped a lot to uh to us to have to build U like Titus system also",
    "start": "3319920",
    "end": "3327319"
  },
  {
    "text": "very often what we experience when we when we change design of our model we have have some compilation errors and",
    "start": "3327319",
    "end": "3334480"
  },
  {
    "text": "then once the program compiles it works so I think that a stronger type check",
    "start": "3334480",
    "end": "3340039"
  },
  {
    "text": "things like deed Union where exhaustive paring Marching for example so it's it's the models are tighter basically and so",
    "start": "3340039",
    "end": "3348520"
  },
  {
    "text": "it's it's harder sort of to fail them uh uh once once you make them them compile",
    "start": "3348520",
    "end": "3354640"
  },
  {
    "text": "so uh when it comes comes to like web services database access I don't think",
    "start": "3354640",
    "end": "3361720"
  },
  {
    "text": "FP gives you any advantages uh and maybe you even even have more advantages from",
    "start": "3361720",
    "end": "3366839"
  },
  {
    "text": "C because of the like it has longer history and uh adoption to these parts",
    "start": "3366839",
    "end": "3373440"
  },
  {
    "text": "of uh I think it's worth mentioning that you use FSH for data streaming and it was one of the main reasons why you",
    "start": "3373440",
    "end": "3379920"
  },
  {
    "text": "decided to use FSH because you needed to stream a lot of data concurrently and as far as I remember you told me that that",
    "start": "3379920",
    "end": "3386839"
  },
  {
    "text": "was one of the reasons you decided to use FSH uh yeah we decided to go for f sh when we actually had to rewrite or",
    "start": "3386839",
    "end": "3392839"
  },
  {
    "text": "extend the system which was highly um concurrent with a lot of",
    "start": "3392839",
    "end": "3398599"
  },
  {
    "text": "threads and we understood that you know it's it's really hard to write a new version of it so it's better to rewrite",
    "start": "3398599",
    "end": "3404960"
  },
  {
    "text": "it in functional language so which will be immutable and we actually wrote it in combination with the actor model which I",
    "start": "3404960",
    "end": "3411079"
  },
  {
    "text": "think provides very good uh match like functional programming and and the actor model and I can can add that um",
    "start": "3411079",
    "end": "3417640"
  },
  {
    "text": "different kind of dsls uh is the case when I would rather go with fop or",
    "start": "3417640",
    "end": "3422960"
  },
  {
    "text": "cotlin perhaps because cotlin has like fantastic support of uh dsls and cotlin",
    "start": "3422960",
    "end": "3429440"
  },
  {
    "text": "is kind of in the middle between cop and F shop in terms of it's uh being either",
    "start": "3429440",
    "end": "3435680"
  },
  {
    "text": "objectoriented or a functional language so D CS clearly uh f is better mainly",
    "start": "3435680",
    "end": "3441839"
  },
  {
    "text": "because of the computation expression support and uh discriminated uh units actually",
    "start": "3441839",
    "end": "3447359"
  },
  {
    "text": "that's that's a good point so when you uh read the domain model WR FP this some",
    "start": "3447359",
    "end": "3452599"
  },
  {
    "text": "typ Union they give you much better reability than if you had multiple interfaces scattered around yeah some",
    "start": "3452599",
    "end": "3459160"
  },
  {
    "text": "people would argue that uh domain driv design is a good uh candidate for FSH as",
    "start": "3459160",
    "end": "3465000"
  },
  {
    "text": "well mainly because of the readability that FSH offers I think uh it it's it's",
    "start": "3465000",
    "end": "3471960"
  },
  {
    "text": "um it's a good idea but at the same time uh yeah yes of course being able to show",
    "start": "3471960",
    "end": "3479079"
  },
  {
    "text": "your code to a non technical person on new developer is a is a great thing but",
    "start": "3479079",
    "end": "3485640"
  },
  {
    "text": "on the other hand uh there are way too many uh libraries that rely on um on",
    "start": "3485640",
    "end": "3491400"
  },
  {
    "text": "mutable data structures and when you try to uh kind of squeeze uh squeeze FSH",
    "start": "3491400",
    "end": "3498200"
  },
  {
    "text": "default assumptions and or merge FSH default assumptions with uh with what",
    "start": "3498200",
    "end": "3504720"
  },
  {
    "text": "the infrastructure allows sometimes it's just ugly yeah when you start interoperating it it may not look",
    "start": "3504720",
    "end": "3512319"
  },
  {
    "text": "as good as if you're just working with clean up sharp so more questions uh we",
    "start": "3512319",
    "end": "3517440"
  },
  {
    "text": "have couple of minutes uh how difficult is it to use F",
    "start": "3517440",
    "end": "3524319"
  },
  {
    "text": "and C in the same project super easy because both of them are um net languages and the only thing",
    "start": "3524319",
    "end": "3532440"
  },
  {
    "text": "you need to care about is uh to uh make sure that you have a good public interface that does not",
    "start": "3532440",
    "end": "3538839"
  },
  {
    "text": "look alien from either side so good fences make good neighborhoods make sure that you created a good fans and you uh",
    "start": "3538839",
    "end": "3545760"
  },
  {
    "text": "created a good public API from either side and and and that's it yeah Al so to",
    "start": "3545760",
    "end": "3551079"
  },
  {
    "text": "to use any csharp library from F piece of cake to use F code from C code you",
    "start": "3551079",
    "end": "3558599"
  },
  {
    "text": "have to uh specifically write uh in F some interfaces so they or classes they",
    "start": "3558599",
    "end": "3565359"
  },
  {
    "text": "will look like written in C so it's it's it's kind of more complicated but usually it goes that way F developers",
    "start": "3565359",
    "end": "3572079"
  },
  {
    "text": "use C we we had um a nice exercise I used to be a lecturer in the university and uh",
    "start": "3572079",
    "end": "3579559"
  },
  {
    "text": "uh we would uh we would decompile the FSH code code to the to uh the",
    "start": "3579559",
    "end": "3586280"
  },
  {
    "text": "intermediate bite code and then we would recompile it back to C to understand how",
    "start": "3586280",
    "end": "3591520"
  },
  {
    "text": "what the cop counterpart would look like to better understand what it does under the hood Hood I mean what the FSH",
    "start": "3591520",
    "end": "3597559"
  },
  {
    "text": "compiler does under the hood so if you want to understand how it works just do do this and uh you'll be able to",
    "start": "3597559",
    "end": "3604280"
  },
  {
    "text": "understand all the technical details that that won't necessarily be easy reading no I mean it's quite easy you don't need to to read uh the",
    "start": "3604280",
    "end": "3611440"
  },
  {
    "text": "intermediate Cod code itself you just decompile it to to to the intermediate code and then you compile it back to C",
    "start": "3611440",
    "end": "3617400"
  },
  {
    "text": "and you read the C code then yeah so I think uh we are uh exactly now at uh uh",
    "start": "3617400",
    "end": "3623520"
  },
  {
    "text": "10:00 so but we are still here if you have more question questions we are here and we are available at the rest of",
    "start": "3623520",
    "end": "3628839"
  },
  {
    "text": "conference also this evening there will be a line break show with a lot of",
    "start": "3628839",
    "end": "3634079"
  },
  {
    "text": "parody songs about it where both Max and me happen to participate so you're welcome to the Afterparty concert yep",
    "start": "3634079",
    "end": "3642160"
  },
  {
    "text": "and if you can remember we've got one more vote just outside each door we've got a little voting box so please do leave your feedback um and please join",
    "start": "3642160",
    "end": "3649440"
  },
  {
    "text": "me in thanking your speakers thank you for coming and for being fair judges",
    "start": "3649440",
    "end": "3656038"
  }
]