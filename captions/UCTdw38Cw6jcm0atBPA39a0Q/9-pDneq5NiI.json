[
  {
    "text": "well thanks for coming everyone welcome to the pre-party",
    "start": "7519",
    "end": "13519"
  },
  {
    "text": "look I don't know what brings you here to this room but if you're seeking legal advice",
    "start": "13980",
    "end": "20039"
  },
  {
    "text": "um I think it's best that you leave immediately and find yourself a lawyer",
    "start": "20039",
    "end": "25740"
  },
  {
    "text": "but if you're staying they're in for a treat because I'm quite famous for my um live demo skills and",
    "start": "25740",
    "end": "33840"
  },
  {
    "text": "I'm going to write some JavaScript on the big screen are you okay with that",
    "start": "33840",
    "end": "40379"
  },
  {
    "text": "yeah you ready so buckle up I mean JavaScript is kind of uh getting",
    "start": "40379",
    "end": "45899"
  },
  {
    "text": "a bad rep for having no and undefined right but I'll let you in on a secret",
    "start": "45899",
    "end": "53700"
  },
  {
    "text": "I'm actually okay with undefined so don't judge me okay",
    "start": "53700",
    "end": "59960"
  },
  {
    "text": "you shall be impressed",
    "start": "62219",
    "end": "65719"
  },
  {
    "text": "greatest net number one equals string one I'm actually okay with this",
    "start": "70380",
    "end": "76860"
  },
  {
    "text": "but this is even better",
    "start": "76860",
    "end": "84140"
  },
  {
    "text": "now what about this",
    "start": "86340",
    "end": "90320"
  },
  {
    "text": "now this I don't like because this breaks the law",
    "start": "97200",
    "end": "105439"
  },
  {
    "text": "my name is Heckle you can call me hacks especially after this talk",
    "start": "109200",
    "end": "114720"
  },
  {
    "text": "and today I want to give you I fought the law and the low one or did it",
    "start": "114720",
    "end": "120299"
  },
  {
    "text": "we shall see so one of my hobbies is to read martial",
    "start": "120299",
    "end": "126180"
  },
  {
    "text": "art novels and Mr Lewis child",
    "start": "126180",
    "end": "131400"
  },
  {
    "text": "who's the best author and Ode to gallantry it's one of my favorite",
    "start": "131400",
    "end": "139940"
  },
  {
    "text": "so The Story Goes in the prime time of kung fu",
    "start": "140340",
    "end": "146520"
  },
  {
    "text": "all the famous Masters and top talents in the world were captured and deferried into a",
    "start": "146520",
    "end": "153900"
  },
  {
    "text": "distant and Anno Island they thought it was an evil scheme to",
    "start": "153900",
    "end": "159720"
  },
  {
    "text": "turn the world upside down but there are fat great food",
    "start": "159720",
    "end": "165480"
  },
  {
    "text": "and they're treated really nicely like in DC to us and above all they were taking to this",
    "start": "165480",
    "end": "173700"
  },
  {
    "text": "Stone war with inscriptions on it and the character is a quite ancient",
    "start": "173700",
    "end": "180000"
  },
  {
    "text": "in the shape of tadpoles as as you can see I can't understand any of it",
    "start": "180000",
    "end": "187019"
  },
  {
    "text": "so the hosts of The Island explained ladies and gentlemen women in no harm",
    "start": "187019",
    "end": "192840"
  },
  {
    "text": "we actually need your help see for many years we have been studying the inscriptions",
    "start": "192840",
    "end": "200819"
  },
  {
    "text": "and by doing so everyone on this island became Kung Fu Masters on their own",
    "start": "200819",
    "end": "206099"
  },
  {
    "text": "right I'm talking about mad skills like this",
    "start": "206099",
    "end": "212220"
  },
  {
    "text": "I mean go easy on a bird lady and like this",
    "start": "212220",
    "end": "217319"
  },
  {
    "text": "is perfect for Sleep Quality and not to forget this",
    "start": "217319",
    "end": "222480"
  },
  {
    "text": "to be followed with an hour of manicure at least however the funny thing is",
    "start": "222480",
    "end": "229920"
  },
  {
    "text": "none no two of us share the same interpretation of the inscriptions",
    "start": "229920",
    "end": "236580"
  },
  {
    "text": "now you are the smartest people in the world surely with your help",
    "start": "236580",
    "end": "242940"
  },
  {
    "text": "we could all come to a unified interpretation of the inscriptions",
    "start": "242940",
    "end": "250080"
  },
  {
    "text": "so the talented people were really pleased and they accepted the challenge happily so they gathered in front of",
    "start": "250080",
    "end": "256739"
  },
  {
    "text": "this Stone war and spent months there without leaving obsessing over the true",
    "start": "256739",
    "end": "262199"
  },
  {
    "text": "meaning of the inscriptions as they went along their kung fu skills more than multiplies",
    "start": "262199",
    "end": "269880"
  },
  {
    "text": "and they became much better selves now the strangest thing is despite all",
    "start": "269880",
    "end": "276540"
  },
  {
    "text": "the amazing progress when they gathered and compare notes",
    "start": "276540",
    "end": "282479"
  },
  {
    "text": "the same problem happens they don't agree with each other",
    "start": "282479",
    "end": "288240"
  },
  {
    "text": "not even two of them the interpretations were completely different",
    "start": "288240",
    "end": "293880"
  },
  {
    "text": "but surely everybody was right because everybody made progress",
    "start": "293880",
    "end": "299699"
  },
  {
    "text": "how could that be well until this dude comes along",
    "start": "299699",
    "end": "305340"
  },
  {
    "text": "this lowly non-descript dude",
    "start": "305340",
    "end": "310440"
  },
  {
    "text": "he was captured by accident and taken to the island and he was also illiterate couldn't read",
    "start": "310440",
    "end": "316740"
  },
  {
    "text": "a thing so he looked at the inscriptions and was intrigued",
    "start": "316740",
    "end": "322560"
  },
  {
    "text": "not by the characters but by the tadpoles so he traced the shape of the tadpoles",
    "start": "322560",
    "end": "329940"
  },
  {
    "text": "with his mind and he could feel this weird sensation traveling around his",
    "start": "329940",
    "end": "335639"
  },
  {
    "text": "body here and there and before you know it he's mastered the ultimate by far the",
    "start": "335639",
    "end": "341699"
  },
  {
    "text": "best Kung Fu in the world that nobody ever dreamed of how's that",
    "start": "341699",
    "end": "348479"
  },
  {
    "text": "there's more to that story but it's not important",
    "start": "348479",
    "end": "354060"
  },
  {
    "text": "now what's important is the moral of the story",
    "start": "354060",
    "end": "359220"
  },
  {
    "text": "see I think the moral of the story is if you want to be the best at kung fu",
    "start": "359220",
    "end": "364440"
  },
  {
    "text": "you can't read too much into the textbook maybe the textbook is not supposed to be",
    "start": "364440",
    "end": "370500"
  },
  {
    "text": "so sophisticated maybe it's actually quite simple",
    "start": "370500",
    "end": "375380"
  },
  {
    "text": "and if we just follow the simple things the tadpoles will be better off I mean at least it",
    "start": "375660",
    "end": "382620"
  },
  {
    "text": "will argue less so there'll be less noise in the world won't you agree",
    "start": "382620",
    "end": "388520"
  },
  {
    "text": "so that's a long story and uh I hope you see where I'm getting it because I because I don't",
    "start": "388740",
    "end": "394319"
  },
  {
    "text": "um I also think maybe Luis cha Devil's in programming because I felt quite called",
    "start": "394319",
    "end": "400020"
  },
  {
    "text": "out about this story it's about you think about oop you know Ellen K didn't really think op should be you know what",
    "start": "400020",
    "end": "407280"
  },
  {
    "text": "it is today when he first envisioned it tadpoles",
    "start": "407280",
    "end": "413780"
  },
  {
    "text": "a question for you do you think we as a software engineering are a mature profession",
    "start": "415440",
    "end": "421819"
  },
  {
    "text": "of hand that's no good you're not helping me with the talk",
    "start": "421819",
    "end": "429319"
  },
  {
    "text": "um well I agree with you see I have to change my notes on the Fly it's agreed",
    "start": "431520",
    "end": "437100"
  },
  {
    "text": "but you look at solid you know what is single right is it you know make me money",
    "start": "437100",
    "end": "444240"
  },
  {
    "text": "that's single but also once one function could be a thing could be single right",
    "start": "444240",
    "end": "449639"
  },
  {
    "text": "what is single and what my favorite language doesn't even Support classes or",
    "start": "449639",
    "end": "456840"
  },
  {
    "text": "you know sometimes how do I apply you know o l",
    "start": "456840",
    "end": "462780"
  },
  {
    "text": "or d right tdd well first of all what is a unit that we don't agree",
    "start": "462780",
    "end": "470639"
  },
  {
    "text": "and honestly I just write crud microservices do I still need to do tdd right",
    "start": "470639",
    "end": "477479"
  },
  {
    "text": "and I've heard this many times look I don't know how Tesla's function because nothing can be mocked",
    "start": "477479",
    "end": "485060"
  },
  {
    "text": "lose coupling right now we have static methods in interfaces",
    "start": "487500",
    "end": "493020"
  },
  {
    "text": "I mean wtf huh how does that lose coupling I mean 2022",
    "start": "493020",
    "end": "500060"
  },
  {
    "text": "and still a lot of libraries don't provide interfaces for each single thing",
    "start": "500060",
    "end": "506160"
  },
  {
    "text": "they have this is maddening isn't it look at architecture",
    "start": "506160",
    "end": "512039"
  },
  {
    "text": "I heard many times people say react has no architecture right only proper MVP can be called architecture or MVC",
    "start": "512039",
    "end": "521159"
  },
  {
    "text": "and people criticize my code saying well your code is terrible everything must go through a dependency injector",
    "start": "521159",
    "end": "529200"
  },
  {
    "text": "what about domain-driven designs people complained Heckle your classes",
    "start": "529200",
    "end": "534240"
  },
  {
    "text": "are anemic there is no Behavior but my language tells me to use data",
    "start": "534240",
    "end": "539519"
  },
  {
    "text": "classes or value classes or record types and when you say Rich model do you mean",
    "start": "539519",
    "end": "545339"
  },
  {
    "text": "active records so imagine poor me I always find myself Dazed and",
    "start": "545339",
    "end": "551940"
  },
  {
    "text": "Confused I'm not sure about anything in my life really just like this dude",
    "start": "551940",
    "end": "559320"
  },
  {
    "text": "foreign is built on unreliable parts",
    "start": "559320",
    "end": "567720"
  },
  {
    "text": "which is true right I mean over decades some of the most",
    "start": "567720",
    "end": "572940"
  },
  {
    "text": "Brilliant Minds have built a reliable Foundation over unreliable infrastructure",
    "start": "572940",
    "end": "579420"
  },
  {
    "text": "in the hope that we Engineers would fully utilize that and build Reliable",
    "start": "579420",
    "end": "584760"
  },
  {
    "text": "Software on top of it and do we do that well maybe not as we we take all these",
    "start": "584760",
    "end": "591120"
  },
  {
    "text": "reliable goodies and and decided to build more unreliable things on top of it right that's what we do well done",
    "start": "591120",
    "end": "597120"
  },
  {
    "text": "nurse well the result of this is that we have well a few quite a few useful",
    "start": "597120",
    "end": "603839"
  },
  {
    "text": "things that really you know keep us busy but they don't necessarily make our",
    "start": "603839",
    "end": "609720"
  },
  {
    "text": "lives easier right we're faced with strange bugs or",
    "start": "609720",
    "end": "614839"
  },
  {
    "text": "mysterious crashes and production and scaling software",
    "start": "614839",
    "end": "620820"
  },
  {
    "text": "it's incredibly expensive if it's possible at all",
    "start": "620820",
    "end": "626180"
  },
  {
    "text": "now what really scales I think correctness scales have a big grease",
    "start": "626459",
    "end": "632220"
  },
  {
    "text": "Simplicity scales and I think they go hand in hand now dijkstra says the best Simplicity",
    "start": "632220",
    "end": "639779"
  },
  {
    "text": "it's a prerequisite for reliability and Tony Hall explains",
    "start": "639779",
    "end": "645899"
  },
  {
    "text": "there are two ways of constructing a software design one way is to make it so simple",
    "start": "645899",
    "end": "652760"
  },
  {
    "text": "that there are obviously no deficiencies and the other way is to make it so",
    "start": "652760",
    "end": "658620"
  },
  {
    "text": "complicated that there are no obvious deficiencies",
    "start": "658620",
    "end": "664440"
  },
  {
    "text": "I love that so smart to Tony Hall where I hear more from him later and this says the first",
    "start": "664440",
    "end": "671700"
  },
  {
    "text": "method is far more difficult good enough only gets us that far",
    "start": "671700",
    "end": "680300"
  },
  {
    "text": "we do need both Simplicity and correctness because everything simple can be represented",
    "start": "681240",
    "end": "689399"
  },
  {
    "text": "in more complex forms but not the other way around and fighting entropy",
    "start": "689399",
    "end": "697200"
  },
  {
    "text": "is easier than reversing it well in our case don't break the egg if you don't want",
    "start": "697200",
    "end": "702779"
  },
  {
    "text": "scrambled eggs right because it's nearly impossible to put scrambled eggs back",
    "start": "702779",
    "end": "707820"
  },
  {
    "text": "into the shells now if we can stick to both",
    "start": "707820",
    "end": "714680"
  },
  {
    "text": "we can benefit from this virtual Circle Simplicity makes it easier",
    "start": "714720",
    "end": "720959"
  },
  {
    "text": "to be correct and correctness empowers simplification",
    "start": "720959",
    "end": "726540"
  },
  {
    "text": "because we know when we simplify things it Still Remains correct",
    "start": "726540",
    "end": "732660"
  },
  {
    "text": "you should totally take a photo of this right because that scrambled egg yum",
    "start": "732660",
    "end": "738560"
  },
  {
    "text": "that brings us to laws and I'm not talking about wishy-washy laws",
    "start": "741240",
    "end": "747480"
  },
  {
    "text": "um that kind of stuff we have plenty in quantity but simple and sound laws",
    "start": "747480",
    "end": "755339"
  },
  {
    "text": "much like what the mathematicians use but I feel really bad that they've been",
    "start": "755339",
    "end": "761220"
  },
  {
    "text": "monopolizing this area I mean come on people share a beard so",
    "start": "761220",
    "end": "767100"
  },
  {
    "text": "it would be a stupid thing that for us to you know let them do that we should get our own share of loss right",
    "start": "767100",
    "end": "775579"
  },
  {
    "text": "laws I mean something like this right so Pito principle um which says in a hierarchy every",
    "start": "776060",
    "end": "782880"
  },
  {
    "text": "employee tends to rise to his level of incompetence I feel so caught out",
    "start": "782880",
    "end": "789360"
  },
  {
    "text": "there's higher ends law it's great you see I might look I might look young of",
    "start": "789360",
    "end": "794579"
  },
  {
    "text": "age but I've come up with my own law already right it's a wishy-washy one it zacko's love with of a thousand browser",
    "start": "794579",
    "end": "801420"
  },
  {
    "text": "windows he says if you have a thousand browser windows then over a sufficient amount of time you have the same tabs in each",
    "start": "801420",
    "end": "808440"
  },
  {
    "text": "window yeah okay let me take you back by 25 years",
    "start": "808440",
    "end": "816899"
  },
  {
    "text": "um in August 1987 so Tony Hall at chewing Award winner um and his team wrote this paper and",
    "start": "816899",
    "end": "824760"
  },
  {
    "text": "they're saying this paper many programmers may be unable to quote even a single law",
    "start": "824760",
    "end": "831420"
  },
  {
    "text": "burn and they claim that programmers do not observe any laws either",
    "start": "831420",
    "end": "838639"
  },
  {
    "text": "although the laws of programming are like laws of arithmetic and it's the",
    "start": "838639",
    "end": "844019"
  },
  {
    "text": "responsibility of programming language designers and implementors to enforce laws",
    "start": "844019",
    "end": "850860"
  },
  {
    "text": "and the laws should be useful elegant and clearly stated",
    "start": "850860",
    "end": "857720"
  },
  {
    "text": "amongst a few dozen laws being laid out in this paper they also made it clear what should be",
    "start": "860040",
    "end": "867480"
  },
  {
    "text": "the first law of programming which is a formalization of the Murphys law",
    "start": "867480",
    "end": "872940"
  },
  {
    "text": "which says if it can go wrong it will and they also go it also goes on to say",
    "start": "872940",
    "end": "880019"
  },
  {
    "text": "if the program has any problem it will not always go wrong it will only go",
    "start": "880019",
    "end": "886079"
  },
  {
    "text": "wrong when it's the most disastrous to do so evil people",
    "start": "886079",
    "end": "891720"
  },
  {
    "text": "um now it was also super sweet is the equation there right I love that we now",
    "start": "891720",
    "end": "897000"
  },
  {
    "text": "have a formalization of Murphy's Law and the funny symbol is got bottom",
    "start": "897000",
    "end": "902459"
  },
  {
    "text": "bottom people um which I translate to trouble okay and P I would translate to Glory",
    "start": "902459",
    "end": "909839"
  },
  {
    "text": "okay so it says if you have trouble or Glory you don't get Glory you always get",
    "start": "909839",
    "end": "915540"
  },
  {
    "text": "trouble sulfur jeez I thought true or false equals true so it would seem",
    "start": "915540",
    "end": "922620"
  },
  {
    "text": "that trouble is the only truth in software okay so glory is not the truth trouble is the truth",
    "start": "922620",
    "end": "930060"
  },
  {
    "text": "love that paper I think we all should read it but has anything changed over the last",
    "start": "930060",
    "end": "936120"
  },
  {
    "text": "25 years it's been a long time I believe yes",
    "start": "936120",
    "end": "941339"
  },
  {
    "text": "we actually made a bit of progress I believe at least some of us talk about laws",
    "start": "941339",
    "end": "947100"
  },
  {
    "text": "the problem though is that we don't talk about it or enforce it nearly enough",
    "start": "947100",
    "end": "953880"
  },
  {
    "text": "so here we go let me walk you through a couple of laws and don't worry they're super simple they're not like laws with",
    "start": "953880",
    "end": "959699"
  },
  {
    "text": "lawyers or judges um and the very first laws that I want to introduce is identity and equality",
    "start": "959699",
    "end": "968399"
  },
  {
    "text": "and these are the cliches right it is what it is that's identity and orange is the new red it's",
    "start": "968880",
    "end": "975480"
  },
  {
    "text": "it's also identity actually but identity means everything should be",
    "start": "975480",
    "end": "981959"
  },
  {
    "text": "everything itself see I told you to be simple right it's a nonsense everything shouldn't be",
    "start": "981959",
    "end": "987899"
  },
  {
    "text": "everything itself now true story about 10 years ago the city I lived in they announced a new traffic rule",
    "start": "987899",
    "end": "994560"
  },
  {
    "text": "so before spring festivals for about a month the busiest month in the year",
    "start": "994560",
    "end": "1001160"
  },
  {
    "text": "for people with safety the orange light will be treated just as",
    "start": "1001160",
    "end": "1006320"
  },
  {
    "text": "the red light so you drive through a orange light you'll be penalized as driving through",
    "start": "1006320",
    "end": "1012139"
  },
  {
    "text": "the red light so Orange Is the New red his best intentions isn't it",
    "start": "1012139",
    "end": "1019279"
  },
  {
    "text": "you can imagine the pedestrians and cyclists they really loved it I mean I loved it I wasn't dry",
    "start": "1019279",
    "end": "1026240"
  },
  {
    "text": "well the problem is an embarrassing percentage of drivers received at least one ticket for driving through",
    "start": "1026240",
    "end": "1033860"
  },
  {
    "text": "red lights besides there are quite a few accidents where people have to stop abruptly",
    "start": "1033860",
    "end": "1040339"
  },
  {
    "text": "because they might drive through an orange light and it was massive up for all imagine so they have to cancel the rule as well as",
    "start": "1040339",
    "end": "1047959"
  },
  {
    "text": "all the tickets within a couple of days now here's the funny bit",
    "start": "1047959",
    "end": "1053120"
  },
  {
    "text": "by the time they do that they couldn't figure out which are real red or which are real orange because they've",
    "start": "1053120",
    "end": "1058220"
  },
  {
    "text": "conflated everything into red now if I have to make a guess right how",
    "start": "1058220",
    "end": "1063860"
  },
  {
    "text": "many of these drivers that go in trouble were programmers I've been none",
    "start": "1063860",
    "end": "1070100"
  },
  {
    "text": "well why because the program is you know is the new B that's our life you know we've been there we've seen that that's",
    "start": "1070100",
    "end": "1075980"
  },
  {
    "text": "our life right no problems but they broke the law",
    "start": "1075980",
    "end": "1083539"
  },
  {
    "text": "well not the drivers but the government that broke the law that broke the law of identity",
    "start": "1083539",
    "end": "1090260"
  },
  {
    "text": "red should always be red and orange should always be orange once you say orange is the new red",
    "start": "1090260",
    "end": "1097039"
  },
  {
    "text": "we have problems so don't mess with the identity law right",
    "start": "1097039",
    "end": "1102200"
  },
  {
    "text": "now in programming entity law goes like this it well",
    "start": "1102200",
    "end": "1107539"
  },
  {
    "text": "the first one is a equals a right this is in my opinion this is both identity and the reflective law of equality",
    "start": "1107539",
    "end": "1115340"
  },
  {
    "text": "now the followers are equality loss right so if a equals B then b equals a that's symmetric",
    "start": "1115340",
    "end": "1121039"
  },
  {
    "text": "a equals b b equals c then then a equals c and the last one",
    "start": "1121039",
    "end": "1126559"
  },
  {
    "text": "or you're not laughing is the nonsense if a equals B then equals B what is that well I told you",
    "start": "1126559",
    "end": "1133280"
  },
  {
    "text": "it's simple right that means you know equality should be consistent",
    "start": "1133280",
    "end": "1138880"
  },
  {
    "text": "now intriguingly in identity inequality don't really splice",
    "start": "1140600",
    "end": "1147460"
  },
  {
    "text": "and what do I mean well",
    "start": "1148039",
    "end": "1153460"
  },
  {
    "text": "if you can follow everything works well right",
    "start": "1153740",
    "end": "1161919"
  },
  {
    "text": "because we go oh we have something strange happening right how's hexing Auckland equal to hexy",
    "start": "1162080",
    "end": "1168440"
  },
  {
    "text": "Melbourne by that doesn't mean that hex is not equal x x",
    "start": "1168440",
    "end": "1175520"
  },
  {
    "text": "right now that's not your fault it's because I kind of cheated a bit right",
    "start": "1175520",
    "end": "1182419"
  },
  {
    "text": "see were these three dots are well that means some mutation happened",
    "start": "1182419",
    "end": "1189320"
  },
  {
    "text": "the city changed in place for that object",
    "start": "1189320",
    "end": "1196000"
  },
  {
    "text": "so all the laws don't hold anymore",
    "start": "1196880",
    "end": "1202539"
  },
  {
    "text": "see this convenient but dirty trick of mutating a value in place and thus creating dependencies on the",
    "start": "1202700",
    "end": "1210080"
  },
  {
    "text": "order of execution is the cause of the most dreaded anti-pattern it's called temporal",
    "start": "1210080",
    "end": "1216380"
  },
  {
    "text": "coupling it's the worst worst kind of coupling you can ever have",
    "start": "1216380",
    "end": "1222080"
  },
  {
    "text": "and you got it this broke the LIE no good",
    "start": "1222080",
    "end": "1228020"
  },
  {
    "text": "now Dear Sir Tony Hall mentioned is the responsibility of language designers and",
    "start": "1228020",
    "end": "1234860"
  },
  {
    "text": "implementers to make sure the laws are followed how naive sir",
    "start": "1234860",
    "end": "1241779"
  },
  {
    "text": "if you pick a few of the most popular languages the State of Affairs is a sad one isn't it",
    "start": "1242240",
    "end": "1248660"
  },
  {
    "text": "and people may think oh this triple equals thing that's amateur stuff right only",
    "start": "1248660",
    "end": "1255200"
  },
  {
    "text": "JavaScript does that but wait actually it's not that's this",
    "start": "1255200",
    "end": "1261140"
  },
  {
    "text": "is actually what identity should look like JavaScript does that but kotlin picks",
    "start": "1261140",
    "end": "1266900"
  },
  {
    "text": "that off so this is this is a true identity yeah who's the amateur",
    "start": "1266900",
    "end": "1272600"
  },
  {
    "text": "a few anecdotes everything cannot be compared for equality but we're allowed to anyways",
    "start": "1272600",
    "end": "1278840"
  },
  {
    "text": "or anything equals anything it's not always hold Maybe by reference but hello reference but reference equality is",
    "start": "1278840",
    "end": "1285500"
  },
  {
    "text": "triple U closer W quotes and should equality be by birth yeah",
    "start": "1285500",
    "end": "1291460"
  },
  {
    "text": "inherited from a base class or added by necessity to know",
    "start": "1291460",
    "end": "1299019"
  },
  {
    "text": "make no mistake a lot of mainstream languages make this super hard to get right from the get-go",
    "start": "1300740",
    "end": "1307280"
  },
  {
    "text": "is not our fault that we cannot handle it language peeps you can",
    "start": "1307280",
    "end": "1315200"
  },
  {
    "text": "you know broke the law for us it's not cool",
    "start": "1315200",
    "end": "1320600"
  },
  {
    "text": "even more naivety now find the difference between the left and right for an unknown number of dollars",
    "start": "1320600",
    "end": "1329500"
  },
  {
    "text": "actually there is no difference and there is no prize I'm a cheapskate",
    "start": "1332120",
    "end": "1337240"
  },
  {
    "text": "changes either and this is a big problem change detection",
    "start": "1339559",
    "end": "1346480"
  },
  {
    "text": "right equality should compose but doesn't",
    "start": "1346880",
    "end": "1352720"
  },
  {
    "text": "and change detection is the bread and butter for front-end development or client-side applications in general",
    "start": "1353179",
    "end": "1359720"
  },
  {
    "text": "if you have a long living stage we must know when and what exactly changed and",
    "start": "1359720",
    "end": "1365659"
  },
  {
    "text": "how do we deal with this well this is age revealing but change notification is to be a way to go you",
    "start": "1365659",
    "end": "1372320"
  },
  {
    "text": "kind of inject code to notify you when things change",
    "start": "1372320",
    "end": "1377600"
  },
  {
    "text": "this case in a Setter the problem is we need to write a lot of code",
    "start": "1377600",
    "end": "1383900"
  },
  {
    "text": "to get a notification notifications coming and what if you don't control the code it's from another Library",
    "start": "1383900",
    "end": "1390320"
  },
  {
    "text": "what about complex data structures so you see it's very painful to implement and maintain it's kind of like",
    "start": "1390320",
    "end": "1398720"
  },
  {
    "text": "you know attaching a lot of bells to the view model and when a bell rings",
    "start": "1398720",
    "end": "1405080"
  },
  {
    "text": "The View could respond cute but it's intrusive very noisy so",
    "start": "1405080",
    "end": "1411799"
  },
  {
    "text": "other smart people came up with this idea let's create Watchers you know that live separately they will watch every",
    "start": "1411799",
    "end": "1418700"
  },
  {
    "text": "single value and as soon as anything changes The Watcher will tell the view to update",
    "start": "1418700",
    "end": "1424419"
  },
  {
    "text": "Watcher is there more Watchers oh you've changed",
    "start": "1425419",
    "end": "1430640"
  },
  {
    "text": "update The View well the problem is it's so creepy isn't",
    "start": "1430640",
    "end": "1436520"
  },
  {
    "text": "it but also as more and more Watchers are",
    "start": "1436520",
    "end": "1441559"
  },
  {
    "text": "created and attached the kind of overlap and trip on each other and sometimes you have a tangled mess that the Watchers",
    "start": "1441559",
    "end": "1448280"
  },
  {
    "text": "keep watching each other and the updates keep coming and the application is brought down to his knees or the browser",
    "start": "1448280",
    "end": "1456460"
  },
  {
    "text": "now the problem was eventually solved in my opinion at least partially when react came along and react basically says",
    "start": "1457039",
    "end": "1465020"
  },
  {
    "text": "screw it content equality is too hard okay but identity is easy enough so",
    "start": "1465020",
    "end": "1471980"
  },
  {
    "text": "here's the deal now you all don't mutate objects don't change things in place",
    "start": "1471980",
    "end": "1477500"
  },
  {
    "text": "but you want to change something create a new object with data copied over and just change the bit you want",
    "start": "1477500",
    "end": "1484820"
  },
  {
    "text": "so every time there's a new reference you know something's changed and the same reference should always refer to",
    "start": "1484820",
    "end": "1491900"
  },
  {
    "text": "the same data how's that identity",
    "start": "1491900",
    "end": "1497240"
  },
  {
    "text": "the law one people good for the law",
    "start": "1497240",
    "end": "1504559"
  },
  {
    "text": "but is there a way we can avoid fighting the law from the get-go with a secret sauce in",
    "start": "1504559",
    "end": "1510860"
  },
  {
    "text": "my opinion it's immutability if things never change the identity",
    "start": "1510860",
    "end": "1516500"
  },
  {
    "text": "becomes a trivial case for equality now with the help of language designers",
    "start": "1516500",
    "end": "1523340"
  },
  {
    "text": "it's actually getting easier and easier to do the right thing I'm talking about such constructs as data classes",
    "start": "1523340",
    "end": "1530059"
  },
  {
    "text": "in kotling or a c-sharp in kotlin a python records drug to C sharp I mean",
    "start": "1530059",
    "end": "1536900"
  },
  {
    "text": "JavaScript is getting record and Tuple if the proposal goes through",
    "start": "1536900",
    "end": "1542480"
  },
  {
    "text": "so the excuses are quickly disappearing and also let me point out",
    "start": "1542480",
    "end": "1548480"
  },
  {
    "text": "if equality has been so critical for front end and react basically revolutionized it",
    "start": "1548480",
    "end": "1555080"
  },
  {
    "text": "by sticking to Identity what a simple idea then language level immutability",
    "start": "1555080",
    "end": "1562340"
  },
  {
    "text": "will most certainly bring some sweeping changes okay that includes how we think and write our",
    "start": "1562340",
    "end": "1569900"
  },
  {
    "text": "code so if you're in the process of assessing Frameworks",
    "start": "1569900",
    "end": "1575419"
  },
  {
    "text": "for State Management now between those based on immutability",
    "start": "1575419",
    "end": "1581419"
  },
  {
    "text": "or those doing change detection under the hood in the disguise",
    "start": "1581419",
    "end": "1588980"
  },
  {
    "text": "of mutation now my recommendation is don't go for the convenience of mutation just because",
    "start": "1588980",
    "end": "1595820"
  },
  {
    "text": "oh that's how we've been doing it for the last decades I'm not going to change now",
    "start": "1595820",
    "end": "1602059"
  },
  {
    "text": "think again and think really hard and mark my words watch this space",
    "start": "1602059",
    "end": "1608440"
  },
  {
    "text": "let's look at composition you would think I would be talking about dependency injection",
    "start": "1608539",
    "end": "1615140"
  },
  {
    "text": "thank you no of course not I will talk about a real cool form of composition or a",
    "start": "1615140",
    "end": "1621500"
  },
  {
    "text": "function composition and this example explains it",
    "start": "1621500",
    "end": "1626659"
  },
  {
    "text": "um some friends would call it compose or pipe I like them both",
    "start": "1626659",
    "end": "1633519"
  },
  {
    "text": "it's beautiful right like how easy it is for me to create a function called string length is even I just compose two",
    "start": "1633740",
    "end": "1640580"
  },
  {
    "text": "lambdas and some people would be fumey now right",
    "start": "1640580",
    "end": "1645860"
  },
  {
    "text": "without any functions we just use the depot patterns right okay so this this",
    "start": "1645860",
    "end": "1651140"
  },
  {
    "text": "you know there you can see a tiny phone divided zooming five times you'll see what it's about but it's a trivial implementation of the adapter pattern",
    "start": "1651140",
    "end": "1659600"
  },
  {
    "text": "um I would love to explain you know how they're related but Java 8 actually spoiled it for me years ago in Lambda in",
    "start": "1659600",
    "end": "1667159"
  },
  {
    "text": "Java is actually modeled as a single method interface or SMI",
    "start": "1667159",
    "end": "1672440"
  },
  {
    "text": "um well done Java but remember that you know everything simple can be represented in more",
    "start": "1672440",
    "end": "1678740"
  },
  {
    "text": "complex forms Lambda single method interface",
    "start": "1678740",
    "end": "1684640"
  },
  {
    "text": "this is how to lay out a few examples about the law of composition now if we go from top to bottom if you",
    "start": "1685159",
    "end": "1691760"
  },
  {
    "text": "think I think it can't get any easier right unfortunately subtyping really throws in",
    "start": "1691760",
    "end": "1697580"
  },
  {
    "text": "a monkey in a monkey's wrench right if you like look at the last three examples",
    "start": "1697580",
    "end": "1703039"
  },
  {
    "text": "and you you know having the Lambda within Lambda it gets very confusing very quickly",
    "start": "1703039",
    "end": "1708980"
  },
  {
    "text": "and this is actually super hard to get right and it's definitely one for the language",
    "start": "1708980",
    "end": "1714380"
  },
  {
    "text": "designers C sharp kotlin typescript all do very well swift.java not so much",
    "start": "1714380",
    "end": "1722059"
  },
  {
    "text": "it broads lost within jump but the law we're weighing",
    "start": "1722059",
    "end": "1728320"
  },
  {
    "text": "the law of mapping is by far my favorite topic I'm sure you'll love it",
    "start": "1729980",
    "end": "1736840"
  },
  {
    "text": "okay so Tony Hall again hello do you know about the billion dollar",
    "start": "1738080",
    "end": "1744200"
  },
  {
    "text": "mistake in programming thanks",
    "start": "1744200",
    "end": "1749600"
  },
  {
    "text": "he invented okay so this engineer has a brilliant solution for",
    "start": "1749600",
    "end": "1755480"
  },
  {
    "text": "this problem in the case of a null value is given this magic mapper does not return",
    "start": "1755480",
    "end": "1761740"
  },
  {
    "text": "another now because that's a billion dollar mistake right",
    "start": "1761740",
    "end": "1767059"
  },
  {
    "text": "instead it news up a u object",
    "start": "1767059",
    "end": "1771520"
  },
  {
    "text": "this is such a beautiful solution I mean it brings a tear to my eye",
    "start": "1773179",
    "end": "1778460"
  },
  {
    "text": "are we witnessing the solution to the billion dollar mistake here could it be could it be but let's see how this uh",
    "start": "1778460",
    "end": "1785960"
  },
  {
    "text": "mapper will be used I mean now we have another engineer very experienced",
    "start": "1785960",
    "end": "1791120"
  },
  {
    "text": "engineer who memorized all the best practices and knows defensive programming like the back of his hand",
    "start": "1791120",
    "end": "1798679"
  },
  {
    "text": "so he caused the magic mapper and out of muscle memory does a no check of course defensive programming right",
    "start": "1798679",
    "end": "1806919"
  },
  {
    "text": "well guess what's going to happen I mean if this is Gmail like billions and billions of notifications",
    "start": "1809240",
    "end": "1815679"
  },
  {
    "text": "yeah you got it this broke the law",
    "start": "1815679",
    "end": "1820299"
  },
  {
    "text": "okay what is that what is this lawful mapping right this is embarrassingly simple",
    "start": "1820820",
    "end": "1828039"
  },
  {
    "text": "it basically says Mappy and null value should result in a null value a none now value should result in a",
    "start": "1828919",
    "end": "1835880"
  },
  {
    "text": "non-null value you might be surprised but this also applies to lists",
    "start": "1835880",
    "end": "1841880"
  },
  {
    "text": "empty list should always map to an empty list and now empty list should map to a",
    "start": "1841880",
    "end": "1847460"
  },
  {
    "text": "non-empty one and maybe more importantly every element should be mapped to the result list",
    "start": "1847460",
    "end": "1854059"
  },
  {
    "text": "simple now let's see a few suspects uh and can you tell me",
    "start": "1854059",
    "end": "1860059"
  },
  {
    "text": "why they're suspicious of breaking the law",
    "start": "1860059",
    "end": "1864399"
  },
  {
    "text": "okay if you want you can take a picture and tell me after a few drinks that works",
    "start": "1870919",
    "end": "1878059"
  },
  {
    "text": "allow me to stretch this just a bit further there's a special type of mapping it's",
    "start": "1878059",
    "end": "1884240"
  },
  {
    "text": "reversible so in our example you map T to U and then U to T if you combine them",
    "start": "1884240",
    "end": "1889880"
  },
  {
    "text": "you have a round trip isn't that nice the Gucci is",
    "start": "1889880",
    "end": "1895520"
  },
  {
    "text": "if we design a round trip then it's nice to have a guarantee that",
    "start": "1895520",
    "end": "1900919"
  },
  {
    "text": "the round trip loses no information a typical example is um serializers",
    "start": "1900919",
    "end": "1909260"
  },
  {
    "text": "the proper serializer does not lose any information through two kinds of round trips serialize a person then deserialize",
    "start": "1909260",
    "end": "1916520"
  },
  {
    "text": "should result in the same person deserialize and then serialize should",
    "start": "1916520",
    "end": "1921559"
  },
  {
    "text": "result in the same Json this looks trivial enough but",
    "start": "1921559",
    "end": "1926720"
  },
  {
    "text": "could your favorite language your serializer do this take a minute to think about it",
    "start": "1926720",
    "end": "1933860"
  },
  {
    "text": "the first one is actually fairly easy a lot of the serializers won't be able to do that",
    "start": "1933860",
    "end": "1939020"
  },
  {
    "text": "the second one not too much imagine if there is a field in the Json stream",
    "start": "1939020",
    "end": "1944120"
  },
  {
    "text": "that is not accounted for in the post and class or record",
    "start": "1944120",
    "end": "1949340"
  },
  {
    "text": "the information will be lost through this second round trip",
    "start": "1949340",
    "end": "1954639"
  },
  {
    "text": "because JavaScript does this perfectly of course I mean even with typescript",
    "start": "1954740",
    "end": "1961159"
  },
  {
    "text": "and strong typing in matchmaking Heaven still there's no loss of information",
    "start": "1961159",
    "end": "1967778"
  },
  {
    "text": "to add languages or civilizers they might be able to do it but it's not conventional to do so",
    "start": "1967880",
    "end": "1973580"
  },
  {
    "text": "so sorry you might be breaking the law I have another example a few that kind",
    "start": "1973580",
    "end": "1980179"
  },
  {
    "text": "of combines mapping and equality and the example is promise in JavaScript",
    "start": "1980179",
    "end": "1987740"
  },
  {
    "text": "by the way how do you read the generics anyway I used to say promise resolve of",
    "start": "1987740",
    "end": "1994399"
  },
  {
    "text": "tea but then people told me you know heck of there's a better way to read it you should say for any type T",
    "start": "1994399",
    "end": "2002279"
  },
  {
    "text": "promise resolve a value of type t more for both but I think I love this",
    "start": "2002279",
    "end": "2007539"
  },
  {
    "text": "for all for any tea right",
    "start": "2007539",
    "end": "2012779"
  },
  {
    "text": "now it would make sense for promise to resolve Foo to be equal to promise result full",
    "start": "2013000",
    "end": "2018880"
  },
  {
    "text": "right I just repeated it but can we be sure",
    "start": "2018880",
    "end": "2023980"
  },
  {
    "text": "well we can resolve them both I want one inside the other and indeed",
    "start": "2023980",
    "end": "2030220"
  },
  {
    "text": "they would be equal it's pretty nice what's the problem",
    "start": "2030220",
    "end": "2035820"
  },
  {
    "text": "oh you sweet promise so you don't know yet promise",
    "start": "2035860",
    "end": "2042640"
  },
  {
    "text": "is very eager to please if you make a promise off a promise a",
    "start": "2042640",
    "end": "2048099"
  },
  {
    "text": "result it will resolve the nested promise at once okay very eager to",
    "start": "2048099",
    "end": "2053560"
  },
  {
    "text": "please the language people are so sweet aren't they now to make the deal even sweeter they",
    "start": "2053560",
    "end": "2060398"
  },
  {
    "text": "introduces special case so if it promises resolves to an object or the then field",
    "start": "2060399",
    "end": "2067118"
  },
  {
    "text": "that is a function that function will be evaluated and hopefully just hopefully",
    "start": "2067119",
    "end": "2073419"
  },
  {
    "text": "resolves or rejects the promise well it turns out such good intentions",
    "start": "2073419",
    "end": "2078820"
  },
  {
    "text": "don't really work out to good results in the example below",
    "start": "2078820",
    "end": "2085658"
  },
  {
    "text": "I would have some value trapped forever inside I promise that it's pending",
    "start": "2085659",
    "end": "2091960"
  },
  {
    "text": "let me give you a more full-fledged example let's say I have a rule yinching right with a very fluent and intuitive",
    "start": "2091960",
    "end": "2099339"
  },
  {
    "text": "design featuring this syntax mind you they're",
    "start": "2099339",
    "end": "2104920"
  },
  {
    "text": "not keywords they're just you know labels in a Json so not using any reserved keywords",
    "start": "2104920",
    "end": "2113400"
  },
  {
    "text": "but if I give you a few seconds to read it's a well-reasoned code",
    "start": "2114280",
    "end": "2119859"
  },
  {
    "text": "our customers will be in big trouble see no water bills will be paid",
    "start": "2119859",
    "end": "2126700"
  },
  {
    "text": "not with any tax I mean water bills would be okay right",
    "start": "2126700",
    "end": "2132040"
  },
  {
    "text": "but taxes no laughing matter",
    "start": "2132040",
    "end": "2136440"
  },
  {
    "text": "subtract very carefully because special cases and JavaScript promises",
    "start": "2137079",
    "end": "2143740"
  },
  {
    "text": "definitely broke the law",
    "start": "2143740",
    "end": "2147119"
  },
  {
    "text": "now with the time for making anecdote there was an argument",
    "start": "2148780",
    "end": "2154619"
  },
  {
    "text": "that promises the promises should be allowed for everything because we should allow promises for anything and not",
    "start": "2155099",
    "end": "2162700"
  },
  {
    "text": "restrict the value a promise can represent and people say this is a circular argument what do you",
    "start": "2162700",
    "end": "2168880"
  },
  {
    "text": "think sound like a brain twister doesn't it",
    "start": "2168880",
    "end": "2174640"
  },
  {
    "text": "but luckily now we have typescript and is it easier we just lay it out in",
    "start": "2174640",
    "end": "2180040"
  },
  {
    "text": "types it's quite obvious there's no circular argument right because",
    "start": "2180040",
    "end": "2187720"
  },
  {
    "text": "remember I said that for any type T promise T is fine",
    "start": "2187720",
    "end": "2193660"
  },
  {
    "text": "which means T is fair again so it's completely valid for me to write",
    "start": "2193660",
    "end": "2198940"
  },
  {
    "text": "promise t or promise of Promise of t",
    "start": "2198940",
    "end": "2204579"
  },
  {
    "text": "say I love how typescript brings clarity but come on generics has been round for",
    "start": "2204579",
    "end": "2210339"
  },
  {
    "text": "many many years in other languages it's a bit unfortunate that people don't look",
    "start": "2210339",
    "end": "2216280"
  },
  {
    "text": "outside of their favorite language isn't it",
    "start": "2216280",
    "end": "2220560"
  },
  {
    "text": "for example typically the laws are broken when special cases are created",
    "start": "2222460",
    "end": "2227820"
  },
  {
    "text": "especially for generics because as the name says it a generic it's supposed to be generic",
    "start": "2227820",
    "end": "2235900"
  },
  {
    "text": "it should not be special cased now in this example is it partially applied",
    "start": "2235900",
    "end": "2243880"
  },
  {
    "text": "ambitious abstraction and we end up with the delete method having not implemented",
    "start": "2243880",
    "end": "2251859"
  },
  {
    "text": "exception being from it breaks law",
    "start": "2251859",
    "end": "2256900"
  },
  {
    "text": "but also if we stick to solid then it breaks list of substitution",
    "start": "2256900",
    "end": "2263880"
  },
  {
    "text": "the related a bit more code for you to read",
    "start": "2264160",
    "end": "2270900"
  },
  {
    "text": "this diffies the purpose of using generics again it sneakily inspects the type",
    "start": "2270940",
    "end": "2276400"
  },
  {
    "text": "of a genetic value by introducing a special case there's no way to know",
    "start": "2276400",
    "end": "2282520"
  },
  {
    "text": "just by looking at the method signature poor consumers of this method",
    "start": "2282520",
    "end": "2290079"
  },
  {
    "text": "and one more see this list is smartlist lucky list just to compare a generic value to",
    "start": "2290079",
    "end": "2296619"
  },
  {
    "text": "number 13. this is double whammy well first generics should be generics but",
    "start": "2296619",
    "end": "2302500"
  },
  {
    "text": "also there is a special casein Behavior so some values won't be added to the",
    "start": "2302500",
    "end": "2308260"
  },
  {
    "text": "list funny but of course uh date time is a treasure",
    "start": "2308260",
    "end": "2316300"
  },
  {
    "text": "Trove of special cases this is a small quiz which of these expressions are correct",
    "start": "2316300",
    "end": "2323320"
  },
  {
    "text": "which are these four is enough well none of them right",
    "start": "2323320",
    "end": "2330780"
  },
  {
    "text": "none of them but these are truly necessary special cases or are they that some of them",
    "start": "2331660",
    "end": "2339160"
  },
  {
    "text": "scientists must retrofit into an existing system this is kind of broken but it broke it",
    "start": "2339160",
    "end": "2344560"
  },
  {
    "text": "it's hard to say although we can't take anything for granted when it comes to daytime",
    "start": "2344560",
    "end": "2351160"
  },
  {
    "text": "and of course we must mention time zones right the True Glory of human ingenuity",
    "start": "2351160",
    "end": "2357700"
  },
  {
    "text": "um don't you just love that I mean as a software engineer you kind of hate either hate time zones or you haven't",
    "start": "2357700",
    "end": "2363940"
  },
  {
    "text": "had to deal with them yet",
    "start": "2363940",
    "end": "2367260"
  },
  {
    "text": "I saved the best for the last and you know some of you might be expecting a certain word which I won't",
    "start": "2369640",
    "end": "2377079"
  },
  {
    "text": "say but here we go conditional mapping they're everywhere believe it or not",
    "start": "2377079",
    "end": "2385240"
  },
  {
    "text": "just hidden away sometimes now take optional chaining for example",
    "start": "2385240",
    "end": "2391720"
  },
  {
    "text": "the language people really did their part at this time",
    "start": "2391720",
    "end": "2396660"
  },
  {
    "text": "don't you love this you know question mark Dalton",
    "start": "2398200",
    "end": "2404200"
  },
  {
    "text": "but if you you know owed enough then you would have had to write verbose",
    "start": "2404200",
    "end": "2411280"
  },
  {
    "text": "code like this for no checks",
    "start": "2411280",
    "end": "2415859"
  },
  {
    "text": "and this is a bonus form is actually quite revealing sometimes because if I follow it I can make a pretty neat",
    "start": "2416920",
    "end": "2424540"
  },
  {
    "text": "diagram does this remind you of anything",
    "start": "2424540",
    "end": "2432119"
  },
  {
    "text": "except draws Maybe now to me it's suspiciously similar to",
    "start": "2434260",
    "end": "2440800"
  },
  {
    "text": "how error handling Works in golang the resemblance is uncanny",
    "start": "2440800",
    "end": "2447640"
  },
  {
    "text": "oh really now especially with this diagram you can see",
    "start": "2447640",
    "end": "2453520"
  },
  {
    "text": "that the similarity now just imagine what if we can apply",
    "start": "2453520",
    "end": "2458859"
  },
  {
    "text": "the same syntax from optional for optional chaining to error handling",
    "start": "2458859",
    "end": "2465640"
  },
  {
    "text": "it's a dangerous thought isn't it I mean it's perfect for party time",
    "start": "2465640",
    "end": "2472980"
  },
  {
    "text": "so binding is really neat right but what is exactly the similarity the",
    "start": "2474160",
    "end": "2479560"
  },
  {
    "text": "shared pattern of conditional mapping from good to more good",
    "start": "2479560",
    "end": "2485079"
  },
  {
    "text": "but as soon as a bad value is encountered everything stops",
    "start": "2485079",
    "end": "2490960"
  },
  {
    "text": "and this it's called binding by other people",
    "start": "2490960",
    "end": "2496119"
  },
  {
    "text": "and Scott flashing has a great blog poster there and he called that Railway",
    "start": "2496119",
    "end": "2501280"
  },
  {
    "text": "oriented programming which we should all check it out now buying is something that I would",
    "start": "2501280",
    "end": "2507280"
  },
  {
    "text": "call useful elegant and clear I think so Tony Hall would be",
    "start": "2507280",
    "end": "2513460"
  },
  {
    "text": "very proud if we do more binding well the question is though is it easy to do",
    "start": "2513460",
    "end": "2519339"
  },
  {
    "text": "in our languages and do we get enough support and help from the language peeps",
    "start": "2519339",
    "end": "2526480"
  },
  {
    "text": "well let's take C sharp where another of my favorites conventions is to throw and try catch",
    "start": "2526480",
    "end": "2533859"
  },
  {
    "text": "exceptions we might feel very comfortable about this",
    "start": "2533859",
    "end": "2540599"
  },
  {
    "text": "but we know there are questions that we would prefer not asked because we might",
    "start": "2540700",
    "end": "2545920"
  },
  {
    "text": "not like the answers right for example are you throwing are you throwing are",
    "start": "2545920",
    "end": "2552520"
  },
  {
    "text": "you throwing or did I catch everything all right did I miss any",
    "start": "2552520",
    "end": "2558540"
  },
  {
    "text": "oh no giving a decently complex dependency graph",
    "start": "2558700",
    "end": "2563920"
  },
  {
    "text": "there's no way for us to track down all the exceptions right so sometimes we",
    "start": "2563920",
    "end": "2569020"
  },
  {
    "text": "would rather catch all or pray",
    "start": "2569020",
    "end": "2573900"
  },
  {
    "text": "there's no easy way to be sure we have to live with the fud which is",
    "start": "2574420",
    "end": "2580839"
  },
  {
    "text": "very real but actually if we squint just hard",
    "start": "2580839",
    "end": "2587800"
  },
  {
    "text": "enough right exception throwing and catching can also be considered a form of binding because as you follow from",
    "start": "2587800",
    "end": "2595780"
  },
  {
    "text": "left to right he kind of go along and as soon as a bad value is",
    "start": "2595780",
    "end": "2602920"
  },
  {
    "text": "encountered we can't assume things will work perfectly and blows up we're back to",
    "start": "2602920",
    "end": "2610180"
  },
  {
    "text": "Ground Zero and so on and so on it's not very neat",
    "start": "2610180",
    "end": "2616420"
  },
  {
    "text": "is it now if we look at go lens convention again",
    "start": "2616420",
    "end": "2621760"
  },
  {
    "text": "well it's hard to debate right you've got to give them that that it's very explicit",
    "start": "2621760",
    "end": "2627900"
  },
  {
    "text": "at no place should we worry that some unknown error will blow up our application",
    "start": "2628060",
    "end": "2633940"
  },
  {
    "text": "because we're sure and we're forced to account for every error we know they'll be accounted for",
    "start": "2633940",
    "end": "2639940"
  },
  {
    "text": "every step of the way we have the certainty because it's based on good old values",
    "start": "2639940",
    "end": "2645339"
  },
  {
    "text": "it's not based on long jumps I love Russ takes this a step further",
    "start": "2645339",
    "end": "2653319"
  },
  {
    "text": "is completely value-based and the syntax is so expressive",
    "start": "2653319",
    "end": "2658540"
  },
  {
    "text": "see the uncertainties of looming errors is gone but also I record",
    "start": "2658540",
    "end": "2663940"
  },
  {
    "text": "can be less noisy beautiful downwards",
    "start": "2663940",
    "end": "2670859"
  },
  {
    "text": "okay when it comes to error handling they're all quite lawful but",
    "start": "2671200",
    "end": "2676900"
  },
  {
    "text": "exceptions make it pretty hard to follow the laws and a value-based exception handling",
    "start": "2676900",
    "end": "2683440"
  },
  {
    "text": "system makes it much easier so here language people please make it",
    "start": "2683440",
    "end": "2689140"
  },
  {
    "text": "easier for us to be lawful because we want to be cool",
    "start": "2689140",
    "end": "2695200"
  },
  {
    "text": "imagine if we have to answer sir sir Tony hall right now",
    "start": "2695200",
    "end": "2701039"
  },
  {
    "text": "could you please raise your hand if there was anything over there that you could relate to or at any point of",
    "start": "2701200",
    "end": "2707319"
  },
  {
    "text": "time you felt a bit called out with the code examples",
    "start": "2707319",
    "end": "2713220"
  },
  {
    "text": "thank you how do you live with your conscience I'm kidding yeah thank you thank you I'm very glad",
    "start": "2715000",
    "end": "2720460"
  },
  {
    "text": "actually I hope after 25 years we're not",
    "start": "2720460",
    "end": "2726160"
  },
  {
    "text": "debating endlessly about the wishy-washy stuff and they're useful",
    "start": "2726160",
    "end": "2731920"
  },
  {
    "text": "but but they're not really specific enough but most importantly as Tony Hall said",
    "start": "2731920",
    "end": "2739359"
  },
  {
    "text": "this should be simple clear and elegant and we don't have to fight laws I mean",
    "start": "2739359",
    "end": "2746140"
  },
  {
    "text": "they're so easy they're almost dumb Muslim on the contrary there is a lot we can gain from knowing",
    "start": "2746140",
    "end": "2753460"
  },
  {
    "text": "and following them so on that note my friends I look at you in great",
    "start": "2753460",
    "end": "2760900"
  },
  {
    "text": "hope and respect um and I hope we can get the conversation started and",
    "start": "2760900",
    "end": "2767800"
  },
  {
    "text": "keep it going as soon as the first drink is handed to you",
    "start": "2767800",
    "end": "2773560"
  },
  {
    "text": "thank you very much foreign",
    "start": "2773560",
    "end": "2778780"
  }
]