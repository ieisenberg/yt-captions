[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "working on large-scale events processing before that I worked on reactive extensions and one of the original",
    "start": "9799",
    "end": "16570"
  },
  {
    "text": "developers of our X subnet and so what I'm building right now is a highly scalable distributed variant of that",
    "start": "16570",
    "end": "23020"
  },
  {
    "text": "platform and so throughout the years in building this system which we call",
    "start": "23020",
    "end": "28960"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "reactor it actually powers a whole bunch of things like Cortana on Windows 10 for",
    "start": "28960",
    "end": "34450"
  },
  {
    "text": "example in building that system of course we had some challenges with scale",
    "start": "34450",
    "end": "39700"
  },
  {
    "text": "and performance to overcome and so this is kind of a talk with tales from the trenches of things that went bad and you",
    "start": "39700",
    "end": "46629"
  },
  {
    "text": "know what we learned in doing all of that kind of stuff just to give you a sense of the scale here this thing is",
    "start": "46629",
    "end": "53170"
  },
  {
    "text": "running about up to a billion queries that are standing in memory all the time",
    "start": "53170",
    "end": "60179"
  },
  {
    "text": "across a couple of hundreds to thousands of machines so in some sense it's a relatively small service in terms of the",
    "start": "60179",
    "end": "67000"
  },
  {
    "text": "physical hardware that we have but in terms of the volume of data processing we do like thousands of events against",
    "start": "67000",
    "end": "73210"
  },
  {
    "text": "billions of queries it's actually quite quite big it's all built on top of service fabric and dotnet as well as",
    "start": "73210",
    "end": "80620"
  },
  {
    "text": "Donetsk or most recently so we are actually a pretty big consumer of the",
    "start": "80620",
    "end": "86260"
  },
  {
    "text": "common language runtime and c-sharp and all that kind of stuff especially things that have to do with system reflection",
    "start": "86260",
    "end": "92620"
  },
  {
    "text": "Ahmet and also its of runtime compilation of user quays so it's a pretty it's pretty much a big compiler",
    "start": "92620",
    "end": "98710"
  },
  {
    "text": "in the cloud if a huge optimizer on top of it you know to do a whole bunch of interesting things now it's totally",
    "start": "98710",
    "end": "105070"
  },
  {
    "text": "possible that the stuff you guys built is quite different but what I'll be talking about is general advice and how",
    "start": "105070",
    "end": "112390"
  },
  {
    "text": "to analyze certain performances use the kind of pitfalls to actually watch out",
    "start": "112390",
    "end": "117520"
  },
  {
    "text": "for now before getting started I just want to talk very briefly about this kind of you know performance engineering",
    "start": "117520",
    "end": "124480"
  },
  {
    "start": "119000",
    "end": "119000"
  },
  {
    "text": "strategy that when we're building a system like this is actually good to sort of have in check in your team so",
    "start": "124480",
    "end": "132370"
  },
  {
    "text": "one of the things we do an awful lot of of course in large-scale services like",
    "start": "132370",
    "end": "138220"
  },
  {
    "text": "being is having a lot of instrumentation and a lot of counters so we can know you know where the performance goes in a",
    "start": "138220",
    "end": "144549"
  },
  {
    "text": "production system I just and more valuable than knowing no way the liens is going a very long we trust",
    "start": "144549",
    "end": "150590"
  },
  {
    "text": "pipeline that maybe you know stretches over hundreds of many requests and hundred components that sort of happen",
    "start": "150590",
    "end": "157370"
  },
  {
    "text": "during the lifetime of a single request so you only have this this good set of measurements and there's a lot of ways",
    "start": "157370",
    "end": "163760"
  },
  {
    "text": "of doing that I'm not going to talk about you know using things like a pin sides in Azure or some other facilities",
    "start": "163760",
    "end": "169659"
  },
  {
    "text": "you know have something that that your system isn't a black box and you don't know what what the heck is going on of",
    "start": "169659",
    "end": "175489"
  },
  {
    "text": "course second thing is the performance culture and if you know that performance",
    "start": "175489",
    "end": "181159"
  },
  {
    "text": "is going to be critical for your system then of course it's good that everyone on the team has solid understanding of",
    "start": "181159",
    "end": "187400"
  },
  {
    "text": "the performance goals and you define some metrics that you will go by in in our case it's like the number of queries",
    "start": "187400",
    "end": "193579"
  },
  {
    "text": "that we can host in a single machine for example as a key metric like a theory guess that by five percent that means",
    "start": "193579",
    "end": "199519"
  },
  {
    "text": "like purchasing a couple of and some cases hundreds of extra machines like you know that's that's a lot of",
    "start": "199519",
    "end": "205129"
  },
  {
    "text": "investment you know to sort of you know recast performance so you don't want to be doing that so some general purchase",
    "start": "205129",
    "end": "211849"
  },
  {
    "text": "advice over here all common sounds in some way now second thing I know your",
    "start": "211849",
    "end": "217760"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "tools the tools that I tend to use are the ones I'm gonna list here but there are many other tools that are useful for",
    "start": "217760",
    "end": "224689"
  },
  {
    "text": "example you know jetbrains has excellent tools to do memory analysis for example the ones that I sort of stick with the",
    "start": "224689",
    "end": "232010"
  },
  {
    "text": "most right now at development time the stuff that we have in visual studio especially Visual Studio 2017 we have",
    "start": "232010",
    "end": "238790"
  },
  {
    "text": "create memory Diagnostics capabilities over there so you can actually use everything that's built in into the",
    "start": "238790",
    "end": "244939"
  },
  {
    "text": "product over there in production systems we tend to not have visual studio installed on every single machine in the",
    "start": "244939",
    "end": "251479"
  },
  {
    "text": "cloud so we use some other tools there one thing that you know we kind of",
    "start": "251479",
    "end": "257030"
  },
  {
    "text": "always tend to fall back to and it's always good to understand a little bit of that it's windy bug and SOS which is",
    "start": "257030",
    "end": "263180"
  },
  {
    "text": "a native debugger extension even if it's just you know a services caching you have a dump file the dump file is like",
    "start": "263180",
    "end": "270560"
  },
  {
    "text": "our machine some of them have 128 GB of RAM if you have a dump file of a hundred GB you're not gonna copy it to your",
    "start": "270560",
    "end": "277010"
  },
  {
    "text": "surface laptop to sort of look at it in Starbucks or your favorite coffee shop he will",
    "start": "277010",
    "end": "282260"
  },
  {
    "text": "Remote Desktop to that machine and use the tool that's available on the machine so in a lot of cases we just open up",
    "start": "282260",
    "end": "287930"
  },
  {
    "text": "when debug take a look at the dump file and see like what well what the heck was going on in this in this particular",
    "start": "287930",
    "end": "293840"
  },
  {
    "text": "system perfu how many of you have used perfume or heard of perfume yeah the",
    "start": "293840",
    "end": "300560"
  },
  {
    "text": "perfume is a tool built by the CLR team I'll show you a couple of things later about it it's a great tool a very",
    "start": "300560",
    "end": "306800"
  },
  {
    "text": "lightweight ex copyable it's just a couple of megabytes you can just copy it to the machine and take a look at you",
    "start": "306800",
    "end": "313340"
  },
  {
    "text": "know in real time at you know the stacked aces and all that kind of stuff where you know the CPU cycles are spent",
    "start": "313340",
    "end": "318710"
  },
  {
    "text": "where the memory allocations come from a great indispensable tool at this point",
    "start": "318710",
    "end": "323720"
  },
  {
    "text": "and then finally CLR MD how many have heard about CLR MD last yeah",
    "start": "323720",
    "end": "330620"
  },
  {
    "text": "CLR MD is actually a managed code wrapper on top of all the api's deep",
    "start": "330620",
    "end": "335960"
  },
  {
    "text": "inside the common language runtime that enable you to look at one time as well as on dump files at the memory",
    "start": "335960",
    "end": "342500"
  },
  {
    "text": "structures of the CLR so you can actually build your own debugging tool just like SOS allows you to take a look",
    "start": "342500",
    "end": "349580"
  },
  {
    "text": "at everything on the heap everything on the stack wrote attach pool is up to this tool actually builds on top of that",
    "start": "349580",
    "end": "355910"
  },
  {
    "text": "and provides a managed to API experience and in fact for a lot of analysis things that I have to do I always use CLR MD",
    "start": "355910",
    "end": "363620"
  },
  {
    "text": "because when you look at SOS well you can say like what's going on here in",
    "start": "363620",
    "end": "369200"
  },
  {
    "text": "terms of you know why is this object still alive but then you may have a very domain-specific problem where you see oh",
    "start": "369200",
    "end": "375710"
  },
  {
    "text": "we have like a chain of a hundred tasks that are sort of like linked together and we want to know like who's keeping",
    "start": "375710",
    "end": "381800"
  },
  {
    "text": "that life at that point it makes a lot of sense to build a custom tool that",
    "start": "381800",
    "end": "387020"
  },
  {
    "text": "says like show me all the continuation change of chains of tasks for example and as US doesn't know about tasks of T",
    "start": "387020",
    "end": "394850"
  },
  {
    "text": "it doesn't know the internal structure you can sort of go one task at a time and chase pointers but we've you know",
    "start": "394850",
    "end": "400790"
  },
  {
    "text": "CLR MD you can actually write a linked query that says like from all the objects on the heap which are of type tasks find me the continuation to that",
    "start": "400790",
    "end": "408380"
  },
  {
    "text": "task and sort of stitch it together so you can start start building linked queries on top of you know",
    "start": "408380",
    "end": "413930"
  },
  {
    "text": "debugging API if you will super-powerful little thing so I may show you a couple",
    "start": "413930",
    "end": "419930"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "of examples of that - towards the end of the talk I have a couple of slides here which I'm just gonna blast - really",
    "start": "419930",
    "end": "427100"
  },
  {
    "text": "quick and the goal is to make those slides available I think they're already available from a previous conference I",
    "start": "427100",
    "end": "433340"
  },
  {
    "text": "spoke at but this is kind of you know just a tutorial on how to get started with each of those tools you can find",
    "start": "433340",
    "end": "440000"
  },
  {
    "text": "plenty of stuff online like how to start with and debug in SOS pretty easy how to",
    "start": "440000",
    "end": "445190"
  },
  {
    "text": "start with perfu that's a UI tool so even easier and I'll show you an example",
    "start": "445190",
    "end": "450289"
  },
  {
    "text": "of that one later but this is kind of you know a little picture on how that",
    "start": "450289",
    "end": "455660"
  },
  {
    "text": "sort of looks I'll give you an example in a bit CLR MD is a new get package so",
    "start": "455660",
    "end": "460760"
  },
  {
    "start": "458000",
    "end": "458000"
  },
  {
    "text": "just create a new console application import CLR MD the main thing we have",
    "start": "460760",
    "end": "465830"
  },
  {
    "text": "those kind of libraries is if you haven't used them like where to start so all this slide is telling you look",
    "start": "465830",
    "end": "471919"
  },
  {
    "text": "for a class called data target and start partying like you can say data target attach to process and from there on you",
    "start": "471919",
    "end": "478760"
  },
  {
    "text": "can start inspecting all the memory structures in that target process if you have a dump file you can do attach you",
    "start": "478760",
    "end": "485210"
  },
  {
    "text": "know to a cache download those cache jump over there so just some some little",
    "start": "485210",
    "end": "490909"
  },
  {
    "text": "dead bits here okay now let's get started so what I have next is a menu of maybe 20 cases of",
    "start": "490909",
    "end": "498349"
  },
  {
    "text": "things that we run into and so those will actually always have some grant lesson on how to make sure that your",
    "start": "498349",
    "end": "505010"
  },
  {
    "text": "service is performant and the kind of you know mistakes we run into in the bus so the first case I want to talk about",
    "start": "505010",
    "end": "511729"
  },
  {
    "text": "is what I call the case of the taste what happens here is the following thing",
    "start": "511729",
    "end": "518080"
  },
  {
    "start": "516000",
    "end": "516000"
  },
  {
    "text": "then we built and reactor about four to five years ago we started on this effort",
    "start": "518080",
    "end": "523880"
  },
  {
    "text": "the state of the art racing system in dotnet was a source though shalt use a",
    "start": "523880",
    "end": "529459"
  },
  {
    "text": "source because that's you know the best thing since sliced bread and hot water and so we actually subscribe to that",
    "start": "529459",
    "end": "536300"
  },
  {
    "text": "notion besides using trace source and a source has this mechanism where you can just talk to the trace source and just",
    "start": "536300",
    "end": "542180"
  },
  {
    "text": "log things and then it can go to multiple taste listeners and so as we got more",
    "start": "542180",
    "end": "547400"
  },
  {
    "text": "you know convinced that this was actually working quite well we added more taste listeners and one day the",
    "start": "547400",
    "end": "552770"
  },
  {
    "text": "system kind of plummeted you know the QPS went almost to zero at some point in time and so the thing we ran into is",
    "start": "552770",
    "end": "560000"
  },
  {
    "text": "that you know this deceptively simple API that just allows you to log some strengths has a lot of custom they need",
    "start": "560000",
    "end": "567140"
  },
  {
    "text": "it in case you use space listeners which are not thread safe and this is actually the code deep inside trace source that",
    "start": "567140",
    "end": "574040"
  },
  {
    "text": "was responsible for a pretty big service issue that that particular day and so by",
    "start": "574040",
    "end": "579950"
  },
  {
    "text": "adding a new taste listener you can influence this flag call to use global lock and when you see the word global",
    "start": "579950",
    "end": "586100"
  },
  {
    "text": "and lock combined in one sentence you sort of have to start thinking something maybe maybe a float here and so we",
    "start": "586100",
    "end": "593120"
  },
  {
    "text": "actually started answering this part and so all of the tracing was now happening including going over all the listeners",
    "start": "593120",
    "end": "600260"
  },
  {
    "text": "because there was one listener that said I'm not thread safe and from that point on like all the access to all those",
    "start": "600260",
    "end": "606800"
  },
  {
    "text": "listeners which are IO bounds were of course being synchronized in the process so like you know if you have a machine",
    "start": "606800",
    "end": "613160"
  },
  {
    "text": "with 64 cores which we like to use for massive parallel processing and you tow in a global lock you could equally well",
    "start": "613160",
    "end": "619730"
  },
  {
    "text": "just and Windows 3.1 so you know nothing nothing much happens there now to make",
    "start": "619730",
    "end": "626480"
  },
  {
    "text": "matters even worse you know the formatting happens on a poor listener basis so every listener will do staying",
    "start": "626480",
    "end": "632570"
  },
  {
    "text": "formatting under that lock and staying formatting is not exactly the most cheap thing to do so the things to be aware of",
    "start": "632570",
    "end": "640640"
  },
  {
    "text": "here is you know there are sometimes deceptively simple API swear with a little bit of conflict you know you can",
    "start": "640640",
    "end": "646280"
  },
  {
    "text": "sort of caused a major avalanche in performance and I'm always very aware",
    "start": "646280",
    "end": "651710"
  },
  {
    "text": "when I see API is that they can you know params array of type object array you",
    "start": "651710",
    "end": "656900"
  },
  {
    "text": "see boxing coming around the corner all those kind of things which cause it can cause major performance issues so the",
    "start": "656900",
    "end": "663500"
  },
  {
    "text": "short term resolution there was of course you know to just you know disable that taste listener which was kind of",
    "start": "663500",
    "end": "668930"
  },
  {
    "text": "throwing an engine in the whole thing but more long-term and I'll talk about it in a moment we actually moved",
    "start": "668930",
    "end": "674930"
  },
  {
    "text": "completely away to events source how many no event source yeah so he found",
    "start": "674930",
    "end": "680360"
  },
  {
    "text": "source isn't much more interesting system to do tracing it's based on etw which also all of",
    "start": "680360",
    "end": "686900"
  },
  {
    "text": "Windows and that framework is using so very robust system and I'll show you a",
    "start": "686900",
    "end": "692030"
  },
  {
    "text": "couple of examples of that in a moment now to make matters worse we were also",
    "start": "692030",
    "end": "697520"
  },
  {
    "text": "faced with huge exceptions so exceptions are an interesting thing because this",
    "start": "697520",
    "end": "703340"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "should be exceptional and if they happen occasionally you want to put them in log so you can actually find like what's",
    "start": "703340",
    "end": "709370"
  },
  {
    "text": "happening in my system so you definitely want a log exceptions but the to string",
    "start": "709370",
    "end": "714590"
  },
  {
    "text": "method on an exception is of course virtual and if it's an arbitrary exception you don't know what that",
    "start": "714590",
    "end": "719870"
  },
  {
    "text": "virtual is gonna do for all you know the to string is overhead and to just you tattled sleep infinite right yeah most",
    "start": "719870",
    "end": "726350"
  },
  {
    "text": "of them don't do that but you know the aggregate exception for example is a notorious source of a lot",
    "start": "726350",
    "end": "731600"
  },
  {
    "text": "of allocations if you take a look at the two string of aggregate exception it's actually a loop that's kind of",
    "start": "731600",
    "end": "738110"
  },
  {
    "text": "aggregating all the end of exceptions by doing single format one at a time so you can sort of see like you know this kind",
    "start": "738110",
    "end": "745010"
  },
  {
    "text": "of this is more like you know a punishment room for the GC like you know",
    "start": "745010",
    "end": "751010"
  },
  {
    "text": "like try to print this thing and and you know a lot of stuff is going to happen so of course we were logging those",
    "start": "751010",
    "end": "756500"
  },
  {
    "text": "suckers at some point and the fact that we have millions of those queries earning per second what happens is that",
    "start": "756500",
    "end": "764080"
  },
  {
    "text": "when a service fabric replica becomes primary we load a whole engine of millions of Standing queries that will",
    "start": "764080",
    "end": "770690"
  },
  {
    "text": "happily be evaluated when that replica becomes secondary we unloaded from",
    "start": "770690",
    "end": "775730"
  },
  {
    "text": "memory because something else has you know become primary it's in primary elsewhere so we unload that thing and to",
    "start": "775730",
    "end": "781640"
  },
  {
    "text": "stop those computations we sort of inject an exception into them to bail out so we had a million of those",
    "start": "781640",
    "end": "787730"
  },
  {
    "text": "exceptions all getting a bail out exception and of course they were all being aggregated higher up in the unload",
    "start": "787730",
    "end": "793910"
  },
  {
    "text": "a sink showing an aggregate exception saying computation 17 has been unloaded 18 has been unloaded million of those",
    "start": "793910",
    "end": "800240"
  },
  {
    "text": "guys and so we ended up we have a single log file of 30 MB that's the threshold for a single log file that we upload",
    "start": "800240",
    "end": "806720"
  },
  {
    "text": "into a log store a single log file containing about only half of the single",
    "start": "806720",
    "end": "812390"
  },
  {
    "text": "to string output of a single exception Pence's and so that was also happening and being passed into that params array",
    "start": "812390",
    "end": "819950"
  },
  {
    "text": "on taste source so all of that stuff was happening under that lock so at that point you have like tons of replicas",
    "start": "819950",
    "end": "826339"
  },
  {
    "text": "running one gets unload it wants to log its single exception and all the other ones are just plain stalled not doing",
    "start": "826339",
    "end": "832550"
  },
  {
    "text": "anything because they just want to write it's sunny weather today like something very small into the log file but they",
    "start": "832550",
    "end": "838670"
  },
  {
    "text": "are all bouncing on that global lock so you know knowing that there are some",
    "start": "838670",
    "end": "844010"
  },
  {
    "text": "things underneath you is sometimes sometimes a good thing and so for example in our system we don't allow you",
    "start": "844010",
    "end": "850700"
  },
  {
    "text": "know calling to string on system exception anymore we sort of have a repository of exceptions how we want to print them",
    "start": "850700",
    "end": "856670"
  },
  {
    "text": "because in a lot of cases like printing something like you know target invocation exception well that also you",
    "start": "856670",
    "end": "863630"
  },
  {
    "text": "know has an another exception you want to print the inner exception so you know calling those virtual things like to",
    "start": "863630",
    "end": "869510"
  },
  {
    "text": "sting you know it's the return type role that he says I promise you I'm gonna allocate a lot of stuff and I'm not",
    "start": "869510",
    "end": "875839"
  },
  {
    "text": "gonna tell you how I'm gonna do it so on top of that it's even worse so you may want to like you know sort of look at",
    "start": "875839",
    "end": "882320"
  },
  {
    "text": "those things a little bit as well if you have a high density system now how did",
    "start": "882320",
    "end": "888230"
  },
  {
    "text": "we switch to event source the essence of event source is that you basically get",
    "start": "888230",
    "end": "894529"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "rid of this performance crime of making everything into a string I kind of compare event source to PowerShell right",
    "start": "894529",
    "end": "901459"
  },
  {
    "text": "like you know if you take a look at classic you know scripting languages and you know bash and CMD and all those kind",
    "start": "901459",
    "end": "908450"
  },
  {
    "text": "of things they're just passing strings long and you need to parse them at every single place so I'd like you need to gap",
    "start": "908450",
    "end": "914089"
  },
  {
    "text": "and set and all canned all that kind of stuff you know what every single stage instead if you can pass objects and",
    "start": "914089",
    "end": "919820"
  },
  {
    "text": "registers around you end up not converting of these things you never need to parse them again and you can",
    "start": "919820",
    "end": "925910"
  },
  {
    "text": "actually do structured queries on top of them and so we found source is based on etw if I'm tracing for Windows which is",
    "start": "925910",
    "end": "932570"
  },
  {
    "text": "a very low-level API and so by using this event source class inside of not",
    "start": "932570",
    "end": "937970"
  },
  {
    "text": "you can actually piggyback on that infrastructure in fact tools like perf you are purely listeners to etw events",
    "start": "937970",
    "end": "944990"
  },
  {
    "text": "so as soon as your netw you can actually start you know senior events being ordered in time",
    "start": "944990",
    "end": "951910"
  },
  {
    "text": "amongst a whole bunch of other events that are happening for example the dotnet framework will raise an e TW",
    "start": "951910",
    "end": "958220"
  },
  {
    "text": "events saying oh I'm acquiring all the locks in a concurrent dictionary for some reason which likely can be a",
    "start": "958220",
    "end": "964489"
  },
  {
    "text": "performance issue but if you don't know where that's happening in the context of your application it's kind of useless",
    "start": "964489",
    "end": "970610"
  },
  {
    "text": "but then if you also have a lot of bTW you can sort of see what caused this thing to happen so we actually use a lot",
    "start": "970610",
    "end": "978019"
  },
  {
    "text": "of etw nowadays and one thing I would recommend you to take a look at this link to traces this actually allows you",
    "start": "978019",
    "end": "984709"
  },
  {
    "text": "to use reactive extensions to write queries in real time or further ztw",
    "start": "984709",
    "end": "989869"
  },
  {
    "text": "events so you can actually do aggregations in real time on top of what comes out of etw now how do you do this",
    "start": "989869",
    "end": "996589"
  },
  {
    "text": "it's pretty simple you just inherit from a class called event source and somewhere in the system diagnostics and",
    "start": "996589",
    "end": "1003189"
  },
  {
    "text": "namespace and then you just start writing some methods and you call base class methods called",
    "start": "1003189",
    "end": "1008619"
  },
  {
    "text": "write event now you can also do it more sophisticated with a whole bunch of custom attributes on top of these things",
    "start": "1008619",
    "end": "1014679"
  },
  {
    "text": "but this is kind of the basic way that you would declare an event source and then instead of doing something like a",
    "start": "1014679",
    "end": "1021160"
  },
  {
    "text": "source or to write line and then some formats thing and the other yeah the other you will simply call this method",
    "start": "1021160",
    "end": "1026438"
  },
  {
    "text": "so you will do my source dot log dot request start and my source that logged on to a stop now there is actually a",
    "start": "1026439",
    "end": "1033668"
  },
  {
    "text": "reason that I have this start and stop pair here because if you start using start and stop in combination with event",
    "start": "1033669",
    "end": "1040000"
  },
  {
    "text": "source you actually get to some new feature in dotnet 4.6 which is called",
    "start": "1040000",
    "end": "1046089"
  },
  {
    "text": "correlation and causation so what you see here this is a screenshot of perfu",
    "start": "1046089",
    "end": "1051399"
  },
  {
    "text": "this is actually a piece of code that has been instrument to every cross start and request stop and you can now see the",
    "start": "1051399",
    "end": "1057789"
  },
  {
    "text": "duration of all those requests as well like you no longer have your code letter - if stopwatch is everywhere that you do",
    "start": "1057789",
    "end": "1064779"
  },
  {
    "text": "stop or just start stop or stop and see it elect what's the elapsed time here you just log the start and stop events",
    "start": "1064779",
    "end": "1071200"
  },
  {
    "text": "and then you derive the time it took from that and so that's how we feed it into our telemetry systems and metric",
    "start": "1071200",
    "end": "1078070"
  },
  {
    "text": "systems as opposed to like asking people you know just allocate a bag of watches and just start timing every",
    "start": "1078070",
    "end": "1084549"
  },
  {
    "text": "single thing yourself now on top of that the beauty of this thing is that you",
    "start": "1084549",
    "end": "1089769"
  },
  {
    "text": "also get nesting that's the new feature in dotnet 4.6 is that if there are",
    "start": "1089769",
    "end": "1095460"
  },
  {
    "text": "starts and stops happening as part of the same logical operation which",
    "start": "1095460",
    "end": "1100960"
  },
  {
    "text": "actually spans asynchronous calls as well so if you do an async and a weight you will not lose your causality tracing",
    "start": "1100960",
    "end": "1108039"
  },
  {
    "text": "anymore you will actually see this kind of the crusty so you see that there is an activity here called loop which can",
    "start": "1108039",
    "end": "1114070"
  },
  {
    "text": "spawn to fork join which then spawn the request and so on and so forth so you can now sort of trace that whole request",
    "start": "1114070",
    "end": "1120909"
  },
  {
    "text": "and see all the deltas and time between any consecutive starts between starts",
    "start": "1120909",
    "end": "1126399"
  },
  {
    "text": "and stop so you can have the whole timeline of the whole request you know sitting right over here and so I'll just",
    "start": "1126399",
    "end": "1133659"
  },
  {
    "text": "give you a very small example of that just to convince you it's pretty easy to do here's an event source let me just",
    "start": "1133659",
    "end": "1142659"
  },
  {
    "text": "make it slightly bigger over here so people in the back can see it it's you",
    "start": "1142659",
    "end": "1147759"
  },
  {
    "text": "know the most minimalistic demo I could actually do here but you see I'm using a",
    "start": "1147759",
    "end": "1153039"
  },
  {
    "text": "lot of async and a weight over here just to convince you that you can be jumping threats all over the place on the",
    "start": "1153039",
    "end": "1159639"
  },
  {
    "text": "tadpole and what-have-you this infrastructure will actually keep track of the causality between all those",
    "start": "1159639",
    "end": "1164859"
  },
  {
    "text": "you know things that I'm doing here but so the requests will actually of course in reality you would take in the URI",
    "start": "1164859",
    "end": "1171070"
  },
  {
    "text": "over here but I do a request start and request stop and those will be correlated together and then deep inside",
    "start": "1171070",
    "end": "1177309"
  },
  {
    "text": "of this I'm doing an IO which for example this you know load something from disk and then I'm just you know",
    "start": "1177309",
    "end": "1183159"
  },
  {
    "text": "mimicking loading things from disk but if in here I would be doing file i/o and",
    "start": "1183159",
    "end": "1188379"
  },
  {
    "text": "the file i/o subsystem in Windows is also using etw which starts and stops",
    "start": "1188379",
    "end": "1193450"
  },
  {
    "text": "and Suns and receives you will see all of that stuff being nested there so you can actually see you know the windows",
    "start": "1193450",
    "end": "1200080"
  },
  {
    "text": "etw events for the file system being sandwiched in between your etw event so",
    "start": "1200080",
    "end": "1205419"
  },
  {
    "text": "you can get a perfect you know causality chain across all sorts of parts of the stack including that framework CLR the",
    "start": "1205419",
    "end": "1212919"
  },
  {
    "text": "Windows operating system and so forth so I'll just gave a quick demo on how to to run this",
    "start": "1212919",
    "end": "1218830"
  },
  {
    "text": "thing I haven't even even saw his demo don't bat here let me actually show you what this thing does this thing just",
    "start": "1218830",
    "end": "1229750"
  },
  {
    "text": "starts perfu with a couple of parameters the only interesting parameter it adds over here is mics or demos activities",
    "start": "1229750",
    "end": "1236350"
  },
  {
    "text": "which is on my event source that's the logical identifier of my event source in reality you will have your own name over",
    "start": "1236350",
    "end": "1243040"
  },
  {
    "text": "here of course and I'm starting it to collect traces and so as I start this",
    "start": "1243040",
    "end": "1248890"
  },
  {
    "text": "thing you'll actually see my application run and perfu will be tracing will so my",
    "start": "1248890",
    "end": "1256390"
  },
  {
    "text": "application is running in the background over here and now it's actually you know collecting a taste and I'll just do stop",
    "start": "1256390",
    "end": "1262059"
  },
  {
    "text": "collection over here after a couple of seconds because it's just a while loop that's just you know keeping creating",
    "start": "1262059",
    "end": "1268450"
  },
  {
    "text": "requests and so in what perfu is doing right now is it's actually taking that",
    "start": "1268450",
    "end": "1274240"
  },
  {
    "text": "ETL file event tracing for window ctw file and it's actually analyzing it",
    "start": "1274240",
    "end": "1281350"
  },
  {
    "text": "right now and will actually start seeing on the left the CPU traces off you know everything that happened in my",
    "start": "1281350",
    "end": "1287230"
  },
  {
    "text": "application during that time and so here we go it actually finished there's a zip",
    "start": "1287230",
    "end": "1293590"
  },
  {
    "text": "file here which contains ETL file and so",
    "start": "1293590",
    "end": "1299800"
  },
  {
    "text": "here you go you have now CPU stags and all that kind of stuff the one thing I can actually go to over here is any",
    "start": "1299800",
    "end": "1306820"
  },
  {
    "text": "stacks with start/stop activities and this thing will actually show me do",
    "start": "1306820",
    "end": "1312429"
  },
  {
    "text": "start and stop events that I have now etw a system-wide so you see all the other stuff over here as well and I will",
    "start": "1312429",
    "end": "1319630"
  },
  {
    "text": "have to find my event source demoed that's this process so I can also use",
    "start": "1319630",
    "end": "1325510"
  },
  {
    "text": "this to analyze the performance of Visual Studio or any managed process of course and you see I'm completely like",
    "start": "1325510",
    "end": "1331960"
  },
  {
    "text": "surrounded by even kernel events here like you know a context switching events and all that kind of stuff but you see",
    "start": "1331960",
    "end": "1338559"
  },
  {
    "text": "over here my request start and you see all the individual requests over here and if I open one of these let me go to",
    "start": "1338559",
    "end": "1347080"
  },
  {
    "text": "the call tree I can actually just drill down into all individual requests over here and I see",
    "start": "1347080",
    "end": "1352280"
  },
  {
    "text": "I have a request over here which was doing a prefer perform IO which had to start and stop event and those kind of",
    "start": "1352280",
    "end": "1358790"
  },
  {
    "text": "things so you can start drilling down into like the causality of like what caused what and you can sort of start",
    "start": "1358790",
    "end": "1364640"
  },
  {
    "text": "analyzing you know where the where the time actually went okay and that's",
    "start": "1364640",
    "end": "1370550"
  },
  {
    "text": "actually pretty interesting if you have components that sort of come together in a big service you just ask everyone on",
    "start": "1370550",
    "end": "1376610"
  },
  {
    "text": "the boundaries of the component to do start/stop kind of you know tracing and at that point you can sort of see like",
    "start": "1376610",
    "end": "1383120"
  },
  {
    "text": "you know which component was responsible for most of the latency in the system for example now another example or",
    "start": "1383120",
    "end": "1391370"
  },
  {
    "text": "another case that we ran into is the case of the stock finalizer interesting",
    "start": "1391370",
    "end": "1397570"
  },
  {
    "text": "performance crime as well so everyone knows of the finalizer does it's you",
    "start": "1397570",
    "end": "1404390"
  },
  {
    "start": "1399000",
    "end": "1399000"
  },
  {
    "text": "know the thing in dotnet that you know when an object is ready to be garbage collected but it still has native",
    "start": "1404390",
    "end": "1409490"
  },
  {
    "text": "resources underneath it and the GC will give it a second run you know to sort of film the finalizar which can close",
    "start": "1409490",
    "end": "1415880"
  },
  {
    "text": "things like file system handles and those kind of things now what we actually ended up with is at",
    "start": "1415880",
    "end": "1421880"
  },
  {
    "text": "some point in time we saw the working set on all the machine steadily growing and so that's a disaster sort of coming",
    "start": "1421880",
    "end": "1428150"
  },
  {
    "text": "up so we had to take a look what was going on over there and also the IO was becoming incredibly sluggish like you",
    "start": "1428150",
    "end": "1434570"
  },
  {
    "text": "know Layton sees to open sockets were sort of like increasing increasing increasing all sorts of bad things are",
    "start": "1434570",
    "end": "1439850"
  },
  {
    "text": "starting to happen and so one of the first things I tend to do when analyzing such a performance issue is to look at",
    "start": "1439850",
    "end": "1446390"
  },
  {
    "text": "the finalizer queue in win debug and SOS so like I had a dump file of one of those machines being in a deep crisis",
    "start": "1446390",
    "end": "1452690"
  },
  {
    "text": "look at the finalize queue and seeing over there like well there are 80 mm",
    "start": "1452690",
    "end": "1457730"
  },
  {
    "text": "objects ready for finalization and they're not being cleaned up so we did the garbage collector is currently in",
    "start": "1457730",
    "end": "1463460"
  },
  {
    "text": "Hawaii on the beach and not doing anything but it tends to be pretty hard worker so the the GC was there so we",
    "start": "1463460",
    "end": "1471140"
  },
  {
    "text": "actually took a look at the finalized Abel objects and there you we had our answer why",
    "start": "1471140",
    "end": "1476870"
  },
  {
    "text": "io was actually becoming very sluggish we had like 627 sockets which were",
    "start": "1476870",
    "end": "1482120"
  },
  {
    "text": "finalized about holding on on to Nate resources but never got you know that native resources cleaned up",
    "start": "1482120",
    "end": "1488070"
  },
  {
    "text": "we had like 4300 Ted objects that were still in memory even though the tats were already that no longer than use but",
    "start": "1488070",
    "end": "1495930"
  },
  {
    "text": "you know they were still taking up one megabyte of stack space all of them so like the working set is is going away",
    "start": "1495930",
    "end": "1501240"
  },
  {
    "text": "there too and we are actually doing a lot of stuff we have system reflection Emmitt as you can see and conditional",
    "start": "1501240",
    "end": "1507660"
  },
  {
    "text": "week tables to sort of like have a week a Francis to objects that we don't want to stick around for a long time very",
    "start": "1507660",
    "end": "1513770"
  },
  {
    "text": "interesting data type if you're not familiar you should take a look at conditional week table but you know if",
    "start": "1513770",
    "end": "1519540"
  },
  {
    "text": "that thing doesn't get you know finalized that means that there's nothing weak about the week a Francis",
    "start": "1519540",
    "end": "1524850"
  },
  {
    "text": "anymore like everything is as strong as it ever has been so you know massive memory leak so what we found is then",
    "start": "1524850",
    "end": "1532620"
  },
  {
    "text": "that looking at tap number two which is where the fine light sets on this machine we actually found that there was",
    "start": "1532620",
    "end": "1539460"
  },
  {
    "text": "actually a lock happening you know just waiting for some native resource on the",
    "start": "1539460",
    "end": "1544560"
  },
  {
    "text": "finalizer threatened so the finalizer test was just simply stuck that locked or locked in some way for a very long",
    "start": "1544560",
    "end": "1552500"
  },
  {
    "text": "time in fact trying to do something with socket API is in a library called zmq",
    "start": "1552500",
    "end": "1558120"
  },
  {
    "text": "which we happen to use at that point in time in fact you know we have to be the beasts for it so we also found you know",
    "start": "1558120",
    "end": "1564390"
  },
  {
    "text": "the name of the developer that actually caused this problem to happen was Johnny we don't know who Johnny is because it's",
    "start": "1564390",
    "end": "1571110"
  },
  {
    "text": "an open source library from somebody else but yeah so this didn't work out so",
    "start": "1571110",
    "end": "1577020"
  },
  {
    "text": "in this case we have to do something you know to look at you know the bugs and see rmq and actually try to get around",
    "start": "1577020",
    "end": "1583410"
  },
  {
    "text": "this but beware of native resources in this case we were actually able to solve it by simply putting a using statement",
    "start": "1583410",
    "end": "1590550"
  },
  {
    "text": "around some resource so that it doesn't end up on the finalizer to clean it up over there the result of that was of",
    "start": "1590550",
    "end": "1597540"
  },
  {
    "text": "course that I'd started locking you know in the dispose call at some point so like we have managed that's being",
    "start": "1597540",
    "end": "1603330"
  },
  {
    "text": "blocked instead but not to finalize a queue so it was already a little bit better because the finalize a queue is a",
    "start": "1603330",
    "end": "1608880"
  },
  {
    "text": "precious thing but you know so ultimately we moved out this this particular library but you know anything",
    "start": "1608880",
    "end": "1616020"
  },
  {
    "text": "to do with to finalize when you want to be X be careful about if something happens over there now",
    "start": "1616020",
    "end": "1621990"
  },
  {
    "start": "1621000",
    "end": "1621000"
  },
  {
    "text": "once we solve that a couple of months later he saw something similar and that",
    "start": "1621990",
    "end": "1628190"
  },
  {
    "text": "dll was already gone so we were kind of baffled and yeah it can repeat itself",
    "start": "1628190",
    "end": "1633750"
  },
  {
    "text": "for a different reason of course we ran into this a couple of months after the previous one in this case for some",
    "start": "1633750",
    "end": "1639480"
  },
  {
    "text": "totally different thing what we have here is something called autopilot which is the infrastructure that Bing runs on",
    "start": "1639480",
    "end": "1646380"
  },
  {
    "text": "it's like you know some something very similar to Azure but much much older goes all the way back from you know to",
    "start": "1646380",
    "end": "1652830"
  },
  {
    "text": "the 90s so that thing has some clients that can be used to sort of some",
    "start": "1652830",
    "end": "1658050"
  },
  {
    "text": "telemetry to dashboards you know to warn people that something is going bad and so we actually hooked up an event",
    "start": "1658050",
    "end": "1664680"
  },
  {
    "text": "handler to the unobserved tasks exception on the task scheduler to actually send information about",
    "start": "1664680",
    "end": "1671010"
  },
  {
    "text": "exceptions we didn't handle up into the clouds now what's happening is that the star scheduler an observed tasks",
    "start": "1671010",
    "end": "1678000"
  },
  {
    "text": "exception is actually running on the finalizar it's when the task that had seen an",
    "start": "1678000",
    "end": "1684150"
  },
  {
    "text": "exception which was not observed by the application gets finalized which we know",
    "start": "1684150",
    "end": "1689700"
  },
  {
    "text": "that nobody can see it anymore at that point in time this event handler is raised on the finalize except to tell",
    "start": "1689700",
    "end": "1695820"
  },
  {
    "text": "you he is an exception that you haven't observed so on the finalizer thread now we are actually talking to an API which",
    "start": "1695820",
    "end": "1702840"
  },
  {
    "text": "encapsulates some HTTP client in a synchronous manner so in other words like the finalizer is now waiting for",
    "start": "1702840",
    "end": "1708960"
  },
  {
    "text": "those exceptions to go out now the beautiful thing that happens here is that because of that the thing that cost",
    "start": "1708960",
    "end": "1715080"
  },
  {
    "text": "is will some an observed exception on some socket API this cost pressure on the finalize of causing sockets to be",
    "start": "1715080",
    "end": "1721980"
  },
  {
    "text": "depleted causing us to have more exceptions causing us to deplete even more sockets so this was just a",
    "start": "1721980",
    "end": "1728430"
  },
  {
    "text": "spiraling effect for the system going completely down so the answer to this is of course well make sure that a you know",
    "start": "1728430",
    "end": "1736980"
  },
  {
    "text": "where this code is going around so in this case we're no longer using this DM client in that particular spot",
    "start": "1736980",
    "end": "1742680"
  },
  {
    "text": "the second thing is observe your exceptions and so it's a pretty important thing to do is to actually",
    "start": "1742680",
    "end": "1748830"
  },
  {
    "start": "1748000",
    "end": "1748000"
  },
  {
    "text": "make sure that you not lazy about like handling exceptions for a sink api's and there's one single",
    "start": "1748830",
    "end": "1756480"
  },
  {
    "text": "reason that you know a default default in the CLR has actually been changed",
    "start": "1756480",
    "end": "1762409"
  },
  {
    "text": "namely this thing starting with a sink and a weight being introduced the",
    "start": "1762409",
    "end": "1768059"
  },
  {
    "text": "default was changed for the behavior on unobserved tasks exceptions and observed tasks exceptions will no longer",
    "start": "1768059",
    "end": "1774509"
  },
  {
    "text": "terminate the process because in that case people would not be able to use you know a sink and a weight in combination",
    "start": "1774509",
    "end": "1781559"
  },
  {
    "text": "with UI applications where you have a lot of a sink voice and a sink void means nobody can see the exceptions",
    "start": "1781559",
    "end": "1787500"
  },
  {
    "text": "coming out of it because you just showed them in the air so this default has actually changed but",
    "start": "1787500",
    "end": "1792779"
  },
  {
    "text": "for server applications it's not the best change in the world so I have to say so we reverted that thing of course you",
    "start": "1792779",
    "end": "1798840"
  },
  {
    "text": "know in debug builds in a service you also want to be careful not to just you know take down your service because some",
    "start": "1798840",
    "end": "1806009"
  },
  {
    "text": "developer forgot something like you know the defaults are a little bit different in some cases but so in the debug builds",
    "start": "1806009",
    "end": "1811679"
  },
  {
    "text": "we actually have this this behavior sub to a very pessimistic mode again so like you know we'll take down the whole",
    "start": "1811679",
    "end": "1817620"
  },
  {
    "text": "service in our pre-production environment in case somebody forgets to handle an exception so that's something",
    "start": "1817620",
    "end": "1824490"
  },
  {
    "text": "you can do to to deal with that but be aware that there's actually many patterns in the BCL that don't exactly",
    "start": "1824490",
    "end": "1833100"
  },
  {
    "text": "stimulate or like you can make it easy to actually observe all exceptions",
    "start": "1833100",
    "end": "1839340"
  },
  {
    "text": "here's a good one which we actually run into quite a couple of times quite an idiomatic way of canceling",
    "start": "1839340",
    "end": "1845840"
  },
  {
    "text": "something if it takes longer than a second the task that when any pattern with some operation and then at all some",
    "start": "1845840",
    "end": "1852450"
  },
  {
    "text": "delay and so then you just look at the outcome of that to decide whether or not the first thing was hit or the second",
    "start": "1852450",
    "end": "1859019"
  },
  {
    "text": "thing but it was the time out of the operation completing now in that case if the tons of delay actually wins and that",
    "start": "1859019",
    "end": "1865500"
  },
  {
    "text": "who async is still going on at some point and like nobody may be listening to that task anymore nobody may have",
    "start": "1865500",
    "end": "1871620"
  },
  {
    "text": "attached the continuation there so you may want to do something even if the timer wins to actually observe the",
    "start": "1871620",
    "end": "1878309"
  },
  {
    "text": "exception potentially log it in a way that you're not just doing to string remember the first case",
    "start": "1878309",
    "end": "1884490"
  },
  {
    "text": "but you know you may want to do something like this a little bit more plumbing to make this work and to have",
    "start": "1884490",
    "end": "1890190"
  },
  {
    "text": "this kind of a delay now on top of that in a lot of cases is food wasting can also be canceled so I've seen a lot of",
    "start": "1890190",
    "end": "1897030"
  },
  {
    "text": "codes where people use this pattern because MSD answer so as you use this pattern but you forget that you can",
    "start": "1897030",
    "end": "1903330"
  },
  {
    "text": "actually cancel an operation that's timing out so in this case the flu a sink even two kind of cancellation token",
    "start": "1903330",
    "end": "1909630"
  },
  {
    "text": "so I can actually cancel that in case my timeout wins I can cancel the foo a sink",
    "start": "1909630",
    "end": "1914730"
  },
  {
    "text": "to try to sort of and do it so you know a little bit more code and this this kind of cases actually just make a lot",
    "start": "1914730",
    "end": "1920940"
  },
  {
    "text": "of sense okay good now continuing on the tasks will delay timers timers are an",
    "start": "1920940",
    "end": "1928920"
  },
  {
    "text": "other source of beautiful expense that's everywhere okay like as soon as you have time we're sitting underneath you and",
    "start": "1928920",
    "end": "1934679"
  },
  {
    "text": "you don't know how many there are you look for like some roller coaster right at some point in time so the timer's",
    "start": "1934679",
    "end": "1941910"
  },
  {
    "start": "1938000",
    "end": "1938000"
  },
  {
    "text": "in.net have been improved a lot over the years actually but you know if you have",
    "start": "1941910",
    "end": "1947280"
  },
  {
    "text": "a lot of them you will still want to know that something is going on deep inside you know the common language",
    "start": "1947280",
    "end": "1952530"
  },
  {
    "text": "runtime to help you being woken up because sometime it is expiring so there are actually three methods that at some",
    "start": "1952530",
    "end": "1960450"
  },
  {
    "text": "points using perfu showed up as being the high headers for CPU usage okay",
    "start": "1960450",
    "end": "1966410"
  },
  {
    "text": "three things the fire of a timer the change for a timer and the closing of",
    "start": "1966410",
    "end": "1971730"
  },
  {
    "text": "timer those three things showed up roughly 20 30 20 percent or something like most of",
    "start": "1971730",
    "end": "1977820"
  },
  {
    "text": "the CPU was going to those three methods actually and so what's actually happening deep inside the timer class is",
    "start": "1977820",
    "end": "1984540"
  },
  {
    "text": "that there is actually a global lock to manage the timer queue and the stuff that's happening under that global lock",
    "start": "1984540",
    "end": "1989910"
  },
  {
    "text": "is not super expensive it's just updating a couple of pointers but if you're actually doing a shitload of",
    "start": "1989910",
    "end": "1995220"
  },
  {
    "text": "those timers you end up in interesting situations now where do those timers come from good example it starts to",
    "start": "1995220",
    "end": "2001640"
  },
  {
    "text": "delay it's like if you have something that you're trying to timeout and you have thousands of requests per second and for all of these you want to time",
    "start": "2001640",
    "end": "2008540"
  },
  {
    "text": "them out after 100 milliseconds or something yeah it doesn't leak as per second giving birth to a thousand timers",
    "start": "2008540",
    "end": "2014480"
  },
  {
    "text": "that all need to be started and all need to be stopped at that point that starts to be some contention on this",
    "start": "2014480",
    "end": "2020029"
  },
  {
    "text": "timer queue okay so in fact if you now go to the reference source or you go to",
    "start": "2020029",
    "end": "2025970"
  },
  {
    "text": "github and actually take a look at the source code for timers you see that there is some interesting stuff over",
    "start": "2025970",
    "end": "2032870"
  },
  {
    "text": "here one thing and the perfect some shion's comment in the code is we assume that time is rarely actually do fire",
    "start": "2032870",
    "end": "2040419"
  },
  {
    "text": "okay it also says over here that it's very fast for inserting the leads but there",
    "start": "2040419",
    "end": "2046250"
  },
  {
    "text": "may be linear traversal than firing timers so like in OBS also assume that is relatively few of those guys so",
    "start": "2046250",
    "end": "2052940"
  },
  {
    "text": "there's a whole bunch of nodes here detailing like you know the sweet spot and the design that was chosen to be you",
    "start": "2052940",
    "end": "2059089"
  },
  {
    "text": "know the sweet spot at the time of building the timer code now what's happening with this timer artists are",
    "start": "2059089",
    "end": "2064760"
  },
  {
    "text": "still delay is that a lot of people in this previous pattern that I showed just a moment ago we're actually doing tasks",
    "start": "2064760",
    "end": "2072589"
  },
  {
    "text": "or delays and then the delay is actually winning so the operation is timing out which means that timers that are just",
    "start": "2072589",
    "end": "2079490"
  },
  {
    "text": "there for you know timing out something they're also expiring and you never",
    "start": "2079490",
    "end": "2084679"
  },
  {
    "text": "cancel them even if the operation itself wins the race between itself and the",
    "start": "2084679",
    "end": "2089690"
  },
  {
    "text": "time so like for everything that you're timing out in the system doesn't mean class per second all of them a timeout",
    "start": "2089690",
    "end": "2095569"
  },
  {
    "text": "of 30 seconds 30 seconds later is the hell for you know the timer queue lock",
    "start": "2095569",
    "end": "2100880"
  },
  {
    "text": "because all of those timers still expire and we didn't bother to cancel them all right so like if you do this idiomatic",
    "start": "2100880",
    "end": "2107270"
  },
  {
    "text": "pattern where you can cancel an operation because of a timeout and you can cancel a timer because of an",
    "start": "2107270",
    "end": "2112609"
  },
  {
    "text": "operation succeeding it's better that you double link them that you also cancel the timer if the operation",
    "start": "2112609",
    "end": "2118730"
  },
  {
    "text": "succeeds because otherwise 30 seconds later you're paying the price for all of those you know timeouts starting to fire",
    "start": "2118730",
    "end": "2124550"
  },
  {
    "text": "as well so you know this dance doctrine Annie is a good power but you know don't",
    "start": "2124550",
    "end": "2130640"
  },
  {
    "text": "make it a shallow pattern where you just slap that in and then you know sort of hope that everything will be good",
    "start": "2130640",
    "end": "2135920"
  },
  {
    "text": "okay so observe the exceptions try to cancel things which are cancelable and",
    "start": "2135920",
    "end": "2141440"
  },
  {
    "text": "you of course you can abstract this whole thing into a little helper method if if you like to do so okay",
    "start": "2141440",
    "end": "2147310"
  },
  {
    "text": "another interesting case is acquiring all locks that also happened one day you can",
    "start": "2147310",
    "end": "2153380"
  },
  {
    "start": "2150000",
    "end": "2150000"
  },
  {
    "text": "actually see the codename of project that we had in here so just squint and",
    "start": "2153380",
    "end": "2158480"
  },
  {
    "text": "they then she never saw that codename but what was happening here was actually",
    "start": "2158480",
    "end": "2164569"
  },
  {
    "text": "using our X and the reactive extensions but so what's happening here is that somebody wrote a query and inside that",
    "start": "2164569",
    "end": "2172670"
  },
  {
    "text": "query they were using a concurrent dictionary because concurrent dictionary as well its concurrent right you know so",
    "start": "2172670",
    "end": "2178099"
  },
  {
    "text": "it ought to be a good thing I don't have to worry about locks all that kind of stuff and that's good but there are",
    "start": "2178099",
    "end": "2184760"
  },
  {
    "text": "certain properties on even data structures like concurrent dictionary that acquire all the locks what's",
    "start": "2184760",
    "end": "2190910"
  },
  {
    "text": "happening with concurrent dictionary is that there's a lock per bucket effectively or like well not exactly",
    "start": "2190910",
    "end": "2196040"
  },
  {
    "text": "pure bucket but you know this fine gain locks so if some people are touching you know the dictionary for key a and some",
    "start": "2196040",
    "end": "2202670"
  },
  {
    "text": "other people for B they may never see each other you know acquiring the same lock but there are certain operations if",
    "start": "2202670",
    "end": "2208520"
  },
  {
    "text": "you think about it well you know something like counts it better freezes all of the buckets in order to get a",
    "start": "2208520",
    "end": "2214520"
  },
  {
    "text": "consistent County property because if it doesn't do that well you know you you may end up with a negative command of",
    "start": "2214520",
    "end": "2220099"
  },
  {
    "text": "something or like something weird so something as simple as like for every event that was flowing just checking",
    "start": "2220099",
    "end": "2226849"
  },
  {
    "text": "whether the dictionary is not empty by doing count is larger than zero was basically making the concurrent",
    "start": "2226849",
    "end": "2232400"
  },
  {
    "text": "dictionary into a non concurrent dictionary which is even way more expensive than a regular dictionary with",
    "start": "2232400",
    "end": "2239059"
  },
  {
    "text": "a single lock on top of it because now we need to acquire locks for every single bucket in the dictionary and of",
    "start": "2239059",
    "end": "2245059"
  },
  {
    "text": "course this dictionary was more often than not not empty so this check was not even worth it so you end up in this kind",
    "start": "2245059",
    "end": "2252020"
  },
  {
    "text": "of interesting situation where 31 percent of CPU that day was actually spent in the county property now you'll",
    "start": "2252020",
    "end": "2258500"
  },
  {
    "text": "actually wonder like it's a lock how can a lock spend CPU doesn't the lock just",
    "start": "2258500",
    "end": "2264829"
  },
  {
    "text": "put the Travis leap and you know it will be woken up and the lock is actually satisfied well the answer to that is",
    "start": "2264829",
    "end": "2271569"
  },
  {
    "text": "locks inside dotnet framework have a little bit of spinning inside of them like we do a little bit of spinning and",
    "start": "2271569",
    "end": "2277460"
  },
  {
    "text": "takes until the next field point such that in case you know we can acquire the lock before the CPU is gonna be swapped",
    "start": "2277460",
    "end": "2283819"
  },
  {
    "text": "out anyway or the trail is gonna be swapped out we can sort of hope for the Synod a scenario in",
    "start": "2283819",
    "end": "2288989"
  },
  {
    "text": "this case the day was never sunny at Seattle after all it's always Haney so we ended up like you know just spinning",
    "start": "2288989",
    "end": "2295739"
  },
  {
    "text": "CPU cycles all the time to acquire a lock that would not be acquired to it in this quantum anyway another day ldiot",
    "start": "2295739",
    "end": "2305430"
  },
  {
    "text": "stopped which is not good for a web service may be good for like you know something that computes prime numbers or",
    "start": "2305430",
    "end": "2311640"
  },
  {
    "text": "something but in this case like all the i/o stopped one day another beautiful",
    "start": "2311640",
    "end": "2317089"
  },
  {
    "start": "2314000",
    "end": "2314000"
  },
  {
    "text": "crisis of course another thing that you may want to look at periodically if",
    "start": "2317089",
    "end": "2323009"
  },
  {
    "text": "you're sort of tuning your applications and looking at you know applications in production finalize queue is one thing",
    "start": "2323009",
    "end": "2329069"
  },
  {
    "text": "if that thing is unhealthy you can forget all about it like you know it's it's it's gonna be the end of your career maybe not that bad but the tide",
    "start": "2329069",
    "end": "2337979"
  },
  {
    "text": "pool is another source of like precious resources if you're tapped pool is empty not much is gonna happen anymore so",
    "start": "2337979",
    "end": "2345150"
  },
  {
    "text": "here's a good example one day the tadpole the completion port sets were actually one three now what's",
    "start": "2345150",
    "end": "2352200"
  },
  {
    "text": "the completion portraits for when an asynchronous i/o is actually finished you know using overlapped i/o api's and",
    "start": "2352200",
    "end": "2359009"
  },
  {
    "text": "those kind of things attach from the i/o completion port pool threat is actually going to be woken up to serve the",
    "start": "2359009",
    "end": "2364950"
  },
  {
    "text": "continuation of the i/o so in this case nothing nothing happens anymore and nothing could happen we couldn't serve",
    "start": "2364950",
    "end": "2371309"
  },
  {
    "text": "any iOS been completed anymore that includes taking an incoming request sending outgoing i/o requests you know",
    "start": "2371309",
    "end": "2378119"
  },
  {
    "text": "hitting the file system normal that can can work anymore okay so what happened",
    "start": "2378119",
    "end": "2384150"
  },
  {
    "text": "here is the following thing again beautiful stuff you can already see at the bottom you know I want to appeal it",
    "start": "2384150",
    "end": "2390839"
  },
  {
    "text": "anymore another place where we were chasing exceptions in this case we were not doing doing that it was WCF doing it",
    "start": "2390839",
    "end": "2398190"
  },
  {
    "text": "we had a WCF setting in Ableton production system that says like some details stack trace information to the",
    "start": "2398190",
    "end": "2405690"
  },
  {
    "text": "caller when something goes bad for debugging purposes very expensive thing because when an exception happens it",
    "start": "2405690",
    "end": "2412019"
  },
  {
    "text": "needs to do is stack walk try to read symbols all sorts of things need to happen to get detailed diagnostic",
    "start": "2412019",
    "end": "2417539"
  },
  {
    "text": "information if this thing gets into a production system and things start to go bad you",
    "start": "2417539",
    "end": "2422920"
  },
  {
    "text": "can start seeing things going bad really fast because well one of those guys",
    "start": "2422920",
    "end": "2427929"
  },
  {
    "text": "being surfed and trying to send the exception back to the collar may actually cause you know some cat to be",
    "start": "2427929",
    "end": "2434859"
  },
  {
    "text": "blocked for a certain amount of time the second request comes in is also starting to timeout cause an exception you can",
    "start": "2434859",
    "end": "2441609"
  },
  {
    "text": "see this kind of snowball effect happening again so beware of your settings again this thing is a single to",
    "start": "2441609",
    "end": "2449170"
  },
  {
    "text": "false boolean flag inside a config file that cause major major kind of things so",
    "start": "2449170",
    "end": "2456249"
  },
  {
    "text": "take a good look at things that are explicitly described in a mass DNS use",
    "start": "2456249",
    "end": "2462069"
  },
  {
    "text": "this for debugging only like you know that flag says use this for debugging only so don't ship that into the",
    "start": "2462069",
    "end": "2468009"
  },
  {
    "text": "production system like you know it's not like it's a liability or something it's not in the small print you know it's",
    "start": "2468009",
    "end": "2473890"
  },
  {
    "text": "even in the big pants so you know be careful of that now what's happening here is you see stack traces that's",
    "start": "2473890",
    "end": "2481869"
  },
  {
    "text": "something you may want to do periodically as well we actually have a system that periodically takes a perfu",
    "start": "2481869",
    "end": "2488229"
  },
  {
    "text": "trace and stores it and analyze it offline you can actually do that using CLR MD just let perf you you know take",
    "start": "2488229",
    "end": "2494769"
  },
  {
    "text": "some traces and so on and then analyze them later but one of the things to look out for is Mon contention which means",
    "start": "2494769",
    "end": "2501239"
  },
  {
    "text": "monitor as in system doctor adding monitor contention that's actually the",
    "start": "2501239",
    "end": "2506799"
  },
  {
    "text": "ztw events around it as well which feeds this contention counter inside the",
    "start": "2506799",
    "end": "2512229"
  },
  {
    "text": "windows performance counters but over here if you see a stack trace containing this the word contention then well",
    "start": "2512229",
    "end": "2518949"
  },
  {
    "text": "things are quite contentious obviously and so what's happening inside this contention thing is the spin weighting",
    "start": "2518949",
    "end": "2525519"
  },
  {
    "text": "stuff that I described just a moment ago so even though all those cases in this this presentation seem to be separate",
    "start": "2525519",
    "end": "2532059"
  },
  {
    "text": "they sort of all have a boundary condition the previous thing was about spinning here's you know the explanation",
    "start": "2532059",
    "end": "2537880"
  },
  {
    "text": "on how this spinning actually happens so you can actually find that source code on github as well if you want to see how",
    "start": "2537880",
    "end": "2544359"
  },
  {
    "text": "the spin weight works but here this deep insight over here you see try spinning",
    "start": "2544359",
    "end": "2551589"
  },
  {
    "text": "and yielding before eventually blocking there's an arbitrary number in here lots of software has arbitrary numbers so in",
    "start": "2551589",
    "end": "2558670"
  },
  {
    "text": "this case you know there will be ten repetitions of spinning before we actually put it rather sleep and so",
    "start": "2558670",
    "end": "2565270"
  },
  {
    "text": "that's what's what's going on over here in in the contention coach but and so again because we were doing something",
    "start": "2565270",
    "end": "2571870"
  },
  {
    "text": "expensive namely placing exceptions which requires acquiring locks to read",
    "start": "2571870",
    "end": "2577620"
  },
  {
    "text": "resource tables to format the exception message in the proper language of the system like all that kind of expensive",
    "start": "2577620",
    "end": "2585220"
  },
  {
    "text": "stuff that we didn't need in production system because the whole bunch of lock contention causing more timeouts in the",
    "start": "2585220",
    "end": "2591550"
  },
  {
    "text": "system and so on so you see those things sort of like you know shooting yourselves and the food really really",
    "start": "2591550",
    "end": "2597400"
  },
  {
    "text": "quickly in that kind of case so be aware of like you know debug only facilities don't have debug only facilities in a",
    "start": "2597400",
    "end": "2604780"
  },
  {
    "text": "production system yeah that was actually a msconfig kind of thing using",
    "start": "2604780",
    "end": "2612370"
  },
  {
    "text": "Singleton's another beautiful source of things may not apply",
    "start": "2612370",
    "end": "2617740"
  },
  {
    "start": "2616000",
    "end": "2616000"
  },
  {
    "text": "well actually this one will apply but I have another one that may may be a little bit more specific to our workload",
    "start": "2617740",
    "end": "2624850"
  },
  {
    "text": "but this one is a pretty easy one just pointing this one out things like",
    "start": "2624850",
    "end": "2630130"
  },
  {
    "text": "programs arrays for example you know those are a locators starting with C",
    "start": "2630130",
    "end": "2635380"
  },
  {
    "text": "sharp 6 the c-sharp compiler will actually met more efficient code when you call something with a parameter a",
    "start": "2635380",
    "end": "2641110"
  },
  {
    "text": "and you don't specify any arguments that go into the params array it will actually met code using a rate of MT of",
    "start": "2641110",
    "end": "2647680"
  },
  {
    "text": "T which is a singleton instance of an empty array okay and so if you at some",
    "start": "2647680",
    "end": "2653050"
  },
  {
    "text": "point you know are inclined to do like new empty array you know somewhere you may want to know that there are",
    "start": "2653050",
    "end": "2658570"
  },
  {
    "text": "singleton types available so for example there is this thing called type dot",
    "start": "2658570",
    "end": "2663880"
  },
  {
    "text": "empty types which has been there since of not 1.0 there is a raid on empty of T",
    "start": "2663880",
    "end": "2669100"
  },
  {
    "text": "for an empty array singleton and their stars dot completed tasks as opposed to do in return tasks from his old Co",
    "start": "2669100",
    "end": "2675460"
  },
  {
    "text": "everywhere you need to return a complete a task so those Singleton's are really useful because they sort of reduce background",
    "start": "2675460",
    "end": "2682000"
  },
  {
    "text": "noise now if you're at the point of like reducing this kind of background noise likely you've already",
    "start": "2682000",
    "end": "2687730"
  },
  {
    "text": "graduated in the school of performance optimization but you know those things if they're everywhere they can start",
    "start": "2687730",
    "end": "2694060"
  },
  {
    "text": "showing up like I've had cases of the core event processing engine where you",
    "start": "2694060",
    "end": "2699160"
  },
  {
    "text": "know the cpu sample showed like allocations of a race but this thing should not be allocating anything it was",
    "start": "2699160",
    "end": "2704980"
  },
  {
    "text": "just actually calling some member with a parameter a before c-sharp 6.0 you know and it was just allocating empty erase",
    "start": "2704980",
    "end": "2711490"
  },
  {
    "text": "all over the place and of course you know if you spend five percent of time in GC may not be a big",
    "start": "2711490",
    "end": "2717760"
  },
  {
    "text": "deal but again five percent of processing billions of events means like not processing stuff while the GC is",
    "start": "2717760",
    "end": "2724330"
  },
  {
    "text": "happening so if you want to go for low-hanging fruits there's a lot of those small little things that you may",
    "start": "2724330",
    "end": "2731200"
  },
  {
    "text": "just not be aware of existing like tasks completed tasks for example okay and",
    "start": "2731200",
    "end": "2736500"
  },
  {
    "text": "Singleton's that's the other one I was talking about that may not be that relevant but this is something you",
    "start": "2736500",
    "end": "2742300"
  },
  {
    "text": "should be aware of beware of putting like static single tones inside open generic types because",
    "start": "2742300",
    "end": "2749410"
  },
  {
    "text": "you will have an instance of that single tone for every closed instantiation of the type so in this case there will be a",
    "start": "2749410",
    "end": "2755350"
  },
  {
    "text": "few instance for a bar of end bar of double bar of staying bar of date/time like because it's inside a generic type",
    "start": "2755350",
    "end": "2762730"
  },
  {
    "text": "and so it's often too easy to sort of forget the context where you are like you know let me put it statically the",
    "start": "2762730",
    "end": "2768670"
  },
  {
    "text": "only field here with shared instance but then that's sitting in an open generic and in our service well there we have a",
    "start": "2768670",
    "end": "2775780"
  },
  {
    "text": "lot of T's because every event schema is a unique T and so we are doing billions",
    "start": "2775780",
    "end": "2780880"
  },
  {
    "text": "of events you know that we're processing or like thousands of events per second that we're processing with lots of different you know schemas so if we end",
    "start": "2780880",
    "end": "2788260"
  },
  {
    "text": "up having an expensive single tone like let me cash you know the first billion prime numbers here because I will need",
    "start": "2788260",
    "end": "2794560"
  },
  {
    "text": "them all the time for something and you do it in a generic type well then you will have a billion prime numbers per",
    "start": "2794560",
    "end": "2800350"
  },
  {
    "text": "type right at some point and you don't want to to do that as well so be aware of this little caveat another one",
    "start": "2800350",
    "end": "2808540"
  },
  {
    "start": "2808000",
    "end": "2808000"
  },
  {
    "text": "subtle sources of boxing now we have sort of had you know little things that sort of show up as background radiation",
    "start": "2808540",
    "end": "2815170"
  },
  {
    "text": "the previous things were oh my god the whole system came too halt like what's going on here this is",
    "start": "2815170",
    "end": "2822369"
  },
  {
    "text": "you know when you're over that hump or ideally you're never there and you start",
    "start": "2822369",
    "end": "2827710"
  },
  {
    "text": "looking at the system and you come to the conclusion oh there's a lot of background stuff happening here and you",
    "start": "2827710",
    "end": "2833140"
  },
  {
    "text": "may want to look for those kind of things here's a good example calling",
    "start": "2833140",
    "end": "2838270"
  },
  {
    "text": "something like 'get hashcode and of the equals on an e new causes boxing you",
    "start": "2838270",
    "end": "2843430"
  },
  {
    "text": "know beware of those kind of things like you know you may actually end up causing allocations there and so the right way",
    "start": "2843430",
    "end": "2849790"
  },
  {
    "text": "of writing something that's I equatable you know to check where the two things are equal is actually to use the",
    "start": "2849790",
    "end": "2858460"
  },
  {
    "text": "Equality compare of T to default and call the equals and get hashcode methods on those kind of things in fact if you",
    "start": "2858460",
    "end": "2864760"
  },
  {
    "text": "look at the code generated for things like anonymous types and so on it actually uses equality compare of T and",
    "start": "2864760",
    "end": "2871810"
  },
  {
    "text": "if you want to score a little bit extra points on your team and you're not using net score yet even consider storing that",
    "start": "2871810",
    "end": "2879340"
  },
  {
    "text": "default result into a static you know variable that you sort of use as a",
    "start": "2879340",
    "end": "2885250"
  },
  {
    "text": "shared variable because they're all to default by itself also has some expands in it and that's often done at core you",
    "start": "2885250",
    "end": "2892330"
  },
  {
    "text": "know was pretty involved change at some level actually but but you know it's",
    "start": "2892330",
    "end": "2897970"
  },
  {
    "text": "something to be aware of that when you build those things that have deep equality use equality compare of T it's",
    "start": "2897970",
    "end": "2904869"
  },
  {
    "text": "there to help you like because in fact you know this kind of code is playing",
    "start": "2904869",
    "end": "2909910"
  },
  {
    "text": "the angels as well the previous code say this is not an in but it's not Willingham or something and you just to",
    "start": "2909910",
    "end": "2916840"
  },
  {
    "text": "get hash code or dot equals or something well know the reference exceptions are just around the corner right and so",
    "start": "2916840",
    "end": "2922300"
  },
  {
    "text": "doing it right you know also gets you better performance in this kind of case okay here's another example this is an",
    "start": "2922300",
    "end": "2931810"
  },
  {
    "text": "async lock it's actually on the DPL blog I believed the Stephen Pope actually has",
    "start": "2931810",
    "end": "2939250"
  },
  {
    "text": "at least this one a while ago as an example of how to build a sink in a synchronization primitives this is a",
    "start": "2939250",
    "end": "2945190"
  },
  {
    "text": "pretty common use case if you like to use the using statements to have some kind of a block like you know using some",
    "start": "2945190",
    "end": "2952600"
  },
  {
    "text": "timer you know or something that will measure how long this block takes consider actually",
    "start": "2952600",
    "end": "2958029"
  },
  {
    "text": "making your disposable object is struct the c-sharp compiler is smart enough not",
    "start": "2958029",
    "end": "2964839"
  },
  {
    "text": "to call the dispose method to the interface which will cause boxing it will actually cause I call the dispose",
    "start": "2964839",
    "end": "2971049"
  },
  {
    "text": "method on the struct itself knowing that that's the one that implements I disposable so it will avoid the boxing",
    "start": "2971049",
    "end": "2976930"
  },
  {
    "text": "altogether there so if you have a using statement you will actually end up you know calling you know a non-virtual",
    "start": "2976930",
    "end": "2983890"
  },
  {
    "text": "method here on the release our struct as opposed to making this thing a class or",
    "start": "2983890",
    "end": "2988960"
  },
  {
    "text": "you know whatever so this is a small one",
    "start": "2988960",
    "end": "2995440"
  },
  {
    "start": "2995000",
    "end": "2995000"
  },
  {
    "text": "read-only but with caution once you start using more structs and you know be",
    "start": "2995440",
    "end": "3000839"
  },
  {
    "text": "careful with structs especially if they're mutable don't do mutable structs but here's a good example I've seen",
    "start": "3000839",
    "end": "3007109"
  },
  {
    "text": "cases where people say oh you know I see a field and a code review right you know and it's a field that's only touched in",
    "start": "3007109",
    "end": "3013740"
  },
  {
    "text": "the constructor let me put a remark here to the developer please mark this thing as read-only there are certain stocks",
    "start": "3013740",
    "end": "3021539"
  },
  {
    "text": "which are mutable a good example is the numerator struct of list of T now this",
    "start": "3021539",
    "end": "3027150"
  },
  {
    "text": "is just to drive home a point the enumerator struct on lists of DSS structs such that for each loop doesn't",
    "start": "3027150",
    "end": "3034500"
  },
  {
    "text": "cause any additional allocations if you do a for each over list of T it will see",
    "start": "3034500",
    "end": "3039809"
  },
  {
    "text": "oh this thing implements the enumerator pattern it has a Getti numerator it has a move next it has a current all that",
    "start": "3039809",
    "end": "3046500"
  },
  {
    "text": "kind of stuff I don't need to go to the ienumerable interface which will cause the allocation of an enumerator on the",
    "start": "3046500",
    "end": "3053190"
  },
  {
    "text": "heap which is an additional object on the heap that's not needed because we're just doing the enumeration and in the",
    "start": "3053190",
    "end": "3058440"
  },
  {
    "text": "context or for each loop so it's a struct for performance reasons but it's",
    "start": "3058440",
    "end": "3063930"
  },
  {
    "text": "also a mutable structure it contains the cursor inside of it so if you end up storing this thing in a read-only field",
    "start": "3063930",
    "end": "3070680"
  },
  {
    "text": "then updates will never be persisted to it like you know we'll just make it immutable and you know the enumeration",
    "start": "3070680",
    "end": "3077880"
  },
  {
    "text": "will just be stuck and not not move forward that's just to say mutable structs are evil but you know sometimes",
    "start": "3077880",
    "end": "3084059"
  },
  {
    "text": "when you do real low-level performance tuning kind of things immutable struck can be quite",
    "start": "3084059",
    "end": "3089249"
  },
  {
    "text": "useful in fact all of the value tuples in c-sharp 7.0 are mutable structs so",
    "start": "3089249",
    "end": "3094649"
  },
  {
    "text": "like this plain advice of like never use immutable struck twelve Never Say Never",
    "start": "3094649",
    "end": "3099659"
  },
  {
    "text": "right are certain cases where it does make sense but then also be aware that certain certain things like marking",
    "start": "3099659",
    "end": "3106169"
  },
  {
    "text": "things he only all over the place may not actually preserve the correctness of",
    "start": "3106169",
    "end": "3111299"
  },
  {
    "text": "your code and that brings us to immutable data structures our system in",
    "start": "3111299",
    "end": "3117089"
  },
  {
    "start": "3113000",
    "end": "3113000"
  },
  {
    "text": "bang actually uses a lot of immutable data structures now how many of you have",
    "start": "3117089",
    "end": "3122279"
  },
  {
    "text": "actually played with system collections immutable like the immutable array type and all that kind of stuff in fact",
    "start": "3122279",
    "end": "3129779"
  },
  {
    "text": "rosslyn the.net compiler source code uses an awful lot of immutable design",
    "start": "3129779",
    "end": "3135149"
  },
  {
    "text": "and the beauty of of immutable objects is of course that you can share them across multiple threads and you don't",
    "start": "3135149",
    "end": "3140999"
  },
  {
    "text": "have to have any price to pay for synchronization now this of course like a flipside to the metal because well if",
    "start": "3140999",
    "end": "3148919"
  },
  {
    "text": "it's immutable and you want to change it you need to create a copy so you have to",
    "start": "3148919",
    "end": "3154049"
  },
  {
    "text": "be careful on how you make those copies the main thing here is actually to just raise awareness that there are immutable",
    "start": "3154049",
    "end": "3161159"
  },
  {
    "text": "api's already in existence that you can start using good example is the immutable collection stipes if you for",
    "start": "3161159",
    "end": "3168419"
  },
  {
    "text": "example have an array and it will be rarely changed and you don't want to have any costs in acquiring locks on the",
    "start": "3168419",
    "end": "3174989"
  },
  {
    "text": "array in order to read from it so that's like it is a concurrent update happening you make it like one cell update it and",
    "start": "3174989",
    "end": "3181499"
  },
  {
    "text": "the other one not updated if you want consistent reads but you don't want to pay a price for synchronization then you",
    "start": "3181499",
    "end": "3187469"
  },
  {
    "text": "can actually start using immutable collections where the mutation will create a new copy of the collection and",
    "start": "3187469",
    "end": "3193229"
  },
  {
    "text": "just replace the reference from the old copy to the new copy so there's immutable collections i've",
    "start": "3193229",
    "end": "3198299"
  },
  {
    "text": "beautiful and in fact if you're in visual studio and you're just jamming on the keyboard right",
    "start": "3198299",
    "end": "3204449"
  },
  {
    "text": "Rozlyn is allocating new data structures for every keystroke like it's just",
    "start": "3204449",
    "end": "3209609"
  },
  {
    "text": "creating new ASDs all the time and a memory efficient way by trying to reuse as much of the existing data structures",
    "start": "3209609",
    "end": "3216479"
  },
  {
    "text": "that it can and that's the other beauty immutable collections lead a lot of reuse if you have say an",
    "start": "3216479",
    "end": "3222930"
  },
  {
    "text": "immutable array and you just want insert an element well we can actually split the array you know and we can sort of",
    "start": "3222930",
    "end": "3229080"
  },
  {
    "text": "create two segments of it and sort of create the illusion of you having a new consecutive array without copying the",
    "start": "3229080",
    "end": "3235140"
  },
  {
    "text": "whole thing like we can just copy the head of it all the way to your mutation and then just point to the remaining",
    "start": "3235140",
    "end": "3241590"
  },
  {
    "text": "tail of an existing array so we can actually share all of that stuff in memory and so immutable collections can",
    "start": "3241590",
    "end": "3248850"
  },
  {
    "text": "help you to actually get rid of some some expensive synchronizations",
    "start": "3248850",
    "end": "3254130"
  },
  {
    "text": "and so a good example of that is in our service we have a lot of configuration",
    "start": "3254130",
    "end": "3259350"
  },
  {
    "text": "that barely ever changes okay a dictionary of staying to value a typical",
    "start": "3259350",
    "end": "3265710"
  },
  {
    "text": "kind of thing a lot of things can be optimized with dictionary of staying to value like if they never need to be",
    "start": "3265710",
    "end": "3271950"
  },
  {
    "text": "updated well don't make them into a concurrent collection for example like you know because then you have a huge",
    "start": "3271950",
    "end": "3276990"
  },
  {
    "text": "amount of you know lock setting underneath you that will be there in case there's a lot of writes happening",
    "start": "3276990",
    "end": "3283200"
  },
  {
    "text": "all the thing it's a read-only collection for heaven's sake nobody's gonna write to it so then don't use a concurrent collection just",
    "start": "3283200",
    "end": "3289740"
  },
  {
    "text": "because once on a day there may be an update to that collection like use something else like know the frequency",
    "start": "3289740",
    "end": "3296130"
  },
  {
    "text": "at which reads are happening writes are happening if like 99% of the time it's reads then optimize for the reads and",
    "start": "3296130",
    "end": "3303300"
  },
  {
    "text": "don't slam in like some concurrent data structure then there's no concurrency to",
    "start": "3303300",
    "end": "3308370"
  },
  {
    "text": "be expected on the right path for example so I'll give you an example of that here's something that happened a",
    "start": "3308370",
    "end": "3315210"
  },
  {
    "start": "3313000",
    "end": "3313000"
  },
  {
    "text": "couple of months ago and just take a quick look at time here yeah I still",
    "start": "3315210",
    "end": "3320970"
  },
  {
    "text": "have five minutes or will be just in time so this is an example where we had",
    "start": "3320970",
    "end": "3326850"
  },
  {
    "text": "a configuration manager at the configuration manager would reload changes dynamically from some underlying",
    "start": "3326850",
    "end": "3334350"
  },
  {
    "text": "source it's an abstraction over a configuration system in our case it would listen to an event handler and",
    "start": "3334350",
    "end": "3339960"
  },
  {
    "text": "service fabric saying somebody has deployed a config update the code keeps running we get a notification the config",
    "start": "3339960",
    "end": "3346650"
  },
  {
    "text": "has changed you can refresh the config and adapt your service to just while it's running",
    "start": "3346650",
    "end": "3351750"
  },
  {
    "text": "pick up the new config like beautiful system and so in this case you know this",
    "start": "3351750",
    "end": "3356970"
  },
  {
    "text": "configuration manager was encapsulating all of this kind of stuff and there was a lot of frequent accesses to get you",
    "start": "3356970",
    "end": "3363240"
  },
  {
    "text": "know the latest configuration settings now there's already something you have to think about there if you have config",
    "start": "3363240",
    "end": "3370110"
  },
  {
    "text": "updates how quick do you want them to be seen are you gonna say in nanosecond so",
    "start": "3370110",
    "end": "3377340"
  },
  {
    "text": "you can say milliseconds I gonna say seconds well in a lot of cases the",
    "start": "3377340",
    "end": "3382500"
  },
  {
    "text": "limiting factor is the human being able to hit the button it's maybe because the system is in a crisis so you want to be",
    "start": "3382500",
    "end": "3388440"
  },
  {
    "text": "it as soon as possible to be picked up but nanoseconds are not gonna make the difference between the human like you",
    "start": "3388440",
    "end": "3395130"
  },
  {
    "text": "know getting his coffee first and I'm saying let me let me fix the system over here like so you can actually allow a",
    "start": "3395130",
    "end": "3401040"
  },
  {
    "text": "couple of milliseconds to elapse before the convict gets picked up and so what",
    "start": "3401040",
    "end": "3406380"
  },
  {
    "text": "what's happening here is that the person right in the configuration manager had already done a lot of reading and said",
    "start": "3406380",
    "end": "3413250"
  },
  {
    "text": "like wow look we can use this reader/writer lock you know because you know these are gonna be frequent rights",
    "start": "3413250",
    "end": "3418770"
  },
  {
    "text": "are gonna be infrequent and so like you know the cost of reading should be less than the cost of writing blah blah blah",
    "start": "3418770",
    "end": "3424380"
  },
  {
    "text": "and so like you know he or she actually used the reader/writer lock around a regular dictionary so already kind of",
    "start": "3424380",
    "end": "3430950"
  },
  {
    "text": "better than using a concurrent dictionary like you know it's like one step up from that because concurrent",
    "start": "3430950",
    "end": "3436470"
  },
  {
    "text": "diction is very expensive in case you know it's ideal if you have a lot of concurrent rights but if you don't have",
    "start": "3436470",
    "end": "3442320"
  },
  {
    "text": "a lot of concurrent accesses to it you know there's no point so it's it's kind of better here but then doing some",
    "start": "3442320",
    "end": "3448620"
  },
  {
    "text": "performance analysis on this thing the person concluded that doing a regular lock as opposed to reader/writer lock",
    "start": "3448620",
    "end": "3454590"
  },
  {
    "text": "was actually faster well he the writer lock is there to assume that at some",
    "start": "3454590",
    "end": "3459990"
  },
  {
    "text": "points there will be rights and we sort of want to amortize the cost for all the reads and so on but you know there will",
    "start": "3459990",
    "end": "3465510"
  },
  {
    "text": "still be rights at some point and you know there's a lot of bookkeeping to happen by the if the lock has to be upgraded you know from shake and all",
    "start": "3465510",
    "end": "3472230"
  },
  {
    "text": "that kind of stuff like so there's bookkeeping happening in there and so we looked at that thing and we said well",
    "start": "3472230",
    "end": "3478340"
  },
  {
    "text": "why do we need this we already have a field which contains a dictionary and every single read is gonna read that",
    "start": "3478340",
    "end": "3484950"
  },
  {
    "text": "field and then go into that dictionary so then a convict change happens just prepare a new",
    "start": "3484950",
    "end": "3490200"
  },
  {
    "text": "dictionary it's a dictionary of like 20 bytes for not chanted like hundred bytes or something very small dictionary like",
    "start": "3490200",
    "end": "3497190"
  },
  {
    "text": "why try to protect against mutation inside a single shared dictionary if you",
    "start": "3497190",
    "end": "3503579"
  },
  {
    "text": "can just swap out the dictionary for another one so we just said well let's just change it like this we have our",
    "start": "3503579",
    "end": "3510390"
  },
  {
    "text": "addiction it's no longer a read-only field and when the conflict change lands we'll just create a new dictionary take",
    "start": "3510390",
    "end": "3516720"
  },
  {
    "text": "our merry time outside any kind of locks to prepare the new dictionary reflecting",
    "start": "3516720",
    "end": "3522059"
  },
  {
    "text": "the configuration and we'll just swap it into the field over there using the interlocked operation which will also",
    "start": "3522059",
    "end": "3528150"
  },
  {
    "text": "cause like flushes and those kind of things and so you know very simple thing",
    "start": "3528150",
    "end": "3534480"
  },
  {
    "text": "like you know the most naive kind of solution okay there's some interlocked stuff here but whatever but you know as",
    "start": "3534480",
    "end": "3539970"
  },
  {
    "text": "opposed to putting a locker and all of the single reads and to a dictionary that will be basically a publication",
    "start": "3539970",
    "end": "3546480"
  },
  {
    "text": "pattern like you prepare it and then you share it with the world and you never mutate after you share it very common",
    "start": "3546480",
    "end": "3552630"
  },
  {
    "text": "pattern like instead of doing that let's just you know substitute the dictionary okay that's what we did over there very",
    "start": "3552630",
    "end": "3560190"
  },
  {
    "text": "simple trick you know God has a long long way actually now to wrap up I'll just do a",
    "start": "3560190",
    "end": "3565619"
  },
  {
    "text": "key takeaways for ya okay actually that's just the key takeaways you know on this one and and we'll end over here",
    "start": "3565619",
    "end": "3572460"
  },
  {
    "text": "one interesting thing this talk is something I've been giving in a couple of presentations and different",
    "start": "3572460",
    "end": "3578130"
  },
  {
    "text": "conference it's just like my C sharp internal stock yesterday if you actually look online I think you",
    "start": "3578130",
    "end": "3583799"
  },
  {
    "text": "know there may be already one conference that has this stock posted and it's in a different order I sort of tried to",
    "start": "3583799",
    "end": "3589049"
  },
  {
    "text": "mingle the order so that like you know if I don't get to the end here in another conference the things that were",
    "start": "3589049",
    "end": "3595319"
  },
  {
    "text": "at the end we're at the front so you can sort of like get all of the stuff anyway so the key takeaway out of this thing is",
    "start": "3595319",
    "end": "3601730"
  },
  {
    "text": "okay we have a configuration manager we abstracted overheads we created a beautiful I configuration abstraction of",
    "start": "3601730",
    "end": "3608640"
  },
  {
    "text": "ilogger abstraction but it sort of contains a lot of cost inside of it because what's really happening is that",
    "start": "3608640",
    "end": "3614430"
  },
  {
    "text": "when service fabric tells us the configuration has changed it just gives",
    "start": "3614430",
    "end": "3620160"
  },
  {
    "text": "us a new config object so if you would just do it naive without some platform abstractions because at",
    "start": "3620160",
    "end": "3626530"
  },
  {
    "text": "some point we may move to a different platform it would just be storing that config object in the field and just reading",
    "start": "3626530",
    "end": "3632980"
  },
  {
    "text": "from it all over the place now this abstraction actually caused us to introduce some additional kind of",
    "start": "3632980",
    "end": "3638890"
  },
  {
    "text": "locking to copy things out of that new configuration object into our own object",
    "start": "3638890",
    "end": "3644470"
  },
  {
    "text": "model and then you know require a cost in doing so so there's some cost to abstraction you may want to have that",
    "start": "3644470",
    "end": "3650710"
  },
  {
    "text": "abstraction in place we decided to keep the abstraction but be a little bit you know",
    "start": "3650710",
    "end": "3657130"
  },
  {
    "text": "wary about like all those little abstractions that you put on top of things like you know the eye counter the",
    "start": "3657130",
    "end": "3663400"
  },
  {
    "text": "eye lager the eye configuration if you build those kind of wrappers make them",
    "start": "3663400",
    "end": "3668530"
  },
  {
    "text": "efficient because those are gonna be sitting on the critical path everywhere you know for every single request you",
    "start": "3668530",
    "end": "3674140"
  },
  {
    "text": "may be going to those little abstractions which are there because maybe in five years when your product is",
    "start": "3674140",
    "end": "3680650"
  },
  {
    "text": "irrelevant anyway but you know you were sort of thinking in five years this tingled have to move to a different",
    "start": "3680650",
    "end": "3685839"
  },
  {
    "text": "hosting infrastructure and we want to be ready for that well believe me at the point you need to move to another",
    "start": "3685839",
    "end": "3691299"
  },
  {
    "text": "hosting infrastructure and it's likely not gonna be the worst of your concerns you'll have a lot of other things to",
    "start": "3691299",
    "end": "3697270"
  },
  {
    "text": "look at and so this little configuration you tell these and so on",
    "start": "3697270",
    "end": "3702990"
  },
  {
    "text": "think twice you know like think think carefully about them okay so if that you",
    "start": "3702990",
    "end": "3708460"
  },
  {
    "text": "know I'm at the end of my talk if you have any any questions you know follow up and so on please feel free to come to",
    "start": "3708460",
    "end": "3715210"
  },
  {
    "text": "me I'll be around at the conference for the rest of today and tomorrow actually and I'll thank you for coming and please",
    "start": "3715210",
    "end": "3724180"
  },
  {
    "text": "come to me with any questions okay thank you",
    "start": "3724180",
    "end": "3728339"
  }
]