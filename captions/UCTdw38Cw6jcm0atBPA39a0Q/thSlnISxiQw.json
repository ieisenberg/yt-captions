[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "okay thanks for coming along everyone my name is Steven H and this talk is do net data security hope is not a",
    "start": "4560",
    "end": "11120"
  },
  {
    "text": "strategy so a little bit about me first so I work for a small startup in the UK called buying Butler where we aim to",
    "start": "11120",
    "end": "17640"
  },
  {
    "text": "make complex purchases like cars very simple for our customers while also providing providing high quality leads",
    "start": "17640",
    "end": "23720"
  },
  {
    "text": "to dealers and we also do a lot of work with insurance companies in handling their total loss claims and that's kind",
    "start": "23720",
    "end": "30320"
  },
  {
    "text": "of relevant to what I'm talking about today because we work with a lot of data from insurance companies and a lot of that is personal information about our",
    "start": "30320",
    "end": "37040"
  },
  {
    "text": "different customers so the security and the custodianship of that data is very",
    "start": "37040",
    "end": "42120"
  },
  {
    "text": "important so I'm also a plural site author and I've written well the but",
    "start": "42120",
    "end": "48559"
  },
  {
    "text": "yeah I've done six courses now working on my seventh and one of them is about cryptography and.net so it kind of goes along with this talk and I've also",
    "start": "48559",
    "end": "55480"
  },
  {
    "text": "written several books for the sync Fusion e-learning Library",
    "start": "55480",
    "end": "61039"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "so we're going to cover quite a lot of material quite quickly today so what I want to do is just make you aware of",
    "start": "61039",
    "end": "66720"
  },
  {
    "text": "some resources you can use after this talk um should you want to follow up on any of this so first is my book",
    "start": "66720",
    "end": "72520"
  },
  {
    "text": "cryptography and. net cnly the book's completely free I'm not trying to sell you anything you just go to syn Fusion website sign up and download it and that",
    "start": "72520",
    "end": "79520"
  },
  {
    "text": "mirrors what we're going to be talking about today and I also have the course practical cryptography and.net on plural",
    "start": "79520",
    "end": "85560"
  },
  {
    "text": "site and that covers what we're going over today but it goes into a lot more detail and it talks about the why as",
    "start": "85560",
    "end": "90799"
  },
  {
    "text": "well as the how of how to do a lot this stuff um if you don't have a plural site subscription I have some cards which",
    "start": "90799",
    "end": "96399"
  },
  {
    "text": "give you one month free access so feel free to come up and grab one after the",
    "start": "96399",
    "end": "101560"
  },
  {
    "text": "talk okay so I strongly believe that as developers is your responsibility to help secure",
    "start": "103560",
    "end": "111200"
  },
  {
    "text": "and protect your company's data and you you just have to look at the news each day or each week and you",
    "start": "111200",
    "end": "118159"
  },
  {
    "text": "hear new data breaches that are happening and it's getting quite serious so taking responsibility for your company's data",
    "start": "118159",
    "end": "124799"
  },
  {
    "text": "is more important than ever and typically companies tend to",
    "start": "124799",
    "end": "130520"
  },
  {
    "text": "make lots of excuses and I've heard a lot of these excuses in companies I've worked at so you know we're too small to be hacked no one's going to bother with",
    "start": "130520",
    "end": "136480"
  },
  {
    "text": "us that's not necessarily true it just means you're potentially an easier Target and we have a firewall no one's",
    "start": "136480",
    "end": "142400"
  },
  {
    "text": "going to get out get through that and get to our data well not necessarily it's great that you've got firewalls in place but what about your internal",
    "start": "142400",
    "end": "148720"
  },
  {
    "text": "operation staff if you have any disgruntled employees who can get access to your data and try and steal",
    "start": "148720",
    "end": "155160"
  },
  {
    "text": "it and the other one I've heard before as well is you know we've never been hacked before so why should we why",
    "start": "155160",
    "end": "160480"
  },
  {
    "text": "should we take this seriously well you know just because you've not been hacked before doesn't mean to say you won't be in the",
    "start": "160480",
    "end": "166599"
  },
  {
    "text": "future so I truly believe that hope is not a strategy when it comes to security",
    "start": "166599",
    "end": "172640"
  },
  {
    "text": "hoping that you won't get attacked or having any of your data stolen is not a good strategy for",
    "start": "172640",
    "end": "178400"
  },
  {
    "text": "Success so how how many people have worked in a company where you've got a deadline looming and you got lots of",
    "start": "178400",
    "end": "184920"
  },
  {
    "text": "features you need to get in and then security just gets pushed further and further down the list of priorities to get a product shipped has anyone had",
    "start": "184920",
    "end": "191760"
  },
  {
    "text": "that scenario before I think I've had it in just about every company I've worked",
    "start": "191760",
    "end": "197640"
  },
  {
    "text": "at and you know as a developer it's kind of your responsibility to try and push",
    "start": "198560",
    "end": "203720"
  },
  {
    "text": "on these things and try and stress how important it is to make sure security is not pushed to the bottom of the pile",
    "start": "203720",
    "end": "210840"
  },
  {
    "text": "okay so what this talk isn't about it's not about deep mathematics or how a lot of these algorithms work you know we",
    "start": "210840",
    "end": "217200"
  },
  {
    "start": "211000",
    "end": "211000"
  },
  {
    "text": "would not be able to cover that in an hour and it's 9:00 in the morning I'm sure nobody wants to do lots of complex",
    "start": "217200",
    "end": "223000"
  },
  {
    "text": "maths um this talk also isn't about Crypt analysis so Crypt analysis is the Art and Science of breaking code so the",
    "start": "223000",
    "end": "229959"
  },
  {
    "text": "sort of things that our governments probably spend a lot of their time doing every day that's not what this Talk's",
    "start": "229959",
    "end": "236480"
  },
  {
    "text": "about so what this talk is about is about people people like you and me who are regular developers we work for",
    "start": "237040",
    "end": "242920"
  },
  {
    "text": "companies and we produce code day in day out to provide value to our",
    "start": "242920",
    "end": "248720"
  },
  {
    "text": "customers so a lot of the code we're going to look at today and talk about is based around theet framework as as you",
    "start": "250040",
    "end": "256840"
  },
  {
    "text": "can now call it the traditional NET Framework so server side you web apis WCF services or client code so um you",
    "start": "256840",
    "end": "266120"
  },
  {
    "text": "know Wind forms WPF applications all that sort of thing but just because we're talking",
    "start": "266120",
    "end": "272680"
  },
  {
    "text": "about Microsoft API specifically in this talk a lot of the principles we're going to discuss are kind of relevant across",
    "start": "272680",
    "end": "278800"
  },
  {
    "text": "any platform so the principles are all the same the apis might be slightly different but what you're trying to",
    "start": "278800",
    "end": "284680"
  },
  {
    "text": "achieve is effectively the same across different languages so Java Ruby PHP python node the principles are exactly",
    "start": "284680",
    "end": "291280"
  },
  {
    "text": "the same okay so what we're going to cover so we're first going to talk about random numbers and why they're so",
    "start": "291280",
    "end": "298240"
  },
  {
    "text": "important we then going to take a look at hashing and hash message authentication codes we'll then take a deeper look at",
    "start": "298240",
    "end": "305039"
  },
  {
    "text": "secure password storage and password management we'll then take a look at symmetric",
    "start": "305039",
    "end": "310919"
  },
  {
    "text": "encryption and then we'll look at asymmetric encryption with things like RSA and then we'll look at digital",
    "start": "310919",
    "end": "317759"
  },
  {
    "text": "signatures and that will give us a lot of the building blocks that we need to go ahead and build what is called a",
    "start": "317759",
    "end": "323039"
  },
  {
    "text": "hybrid encryption scheme so it's using a lot of these building blocks together to create something more",
    "start": "323039",
    "end": "328479"
  },
  {
    "text": "powerful okay so what is cryptography so I think it'd be a good idea to cover this",
    "start": "328479",
    "end": "335080"
  },
  {
    "start": "331000",
    "end": "331000"
  },
  {
    "text": "especially if any people have accidentally walked into the wrong room and are too embarrassed to walk out so cryptography is basically about",
    "start": "335080",
    "end": "342199"
  },
  {
    "text": "protecting information and generally that's done via encryption and when you encrypt data you have encryption",
    "start": "342199",
    "end": "348319"
  },
  {
    "text": "keys and that encrypted data then becomes what's called Cipher text so this is sort of generally what we're",
    "start": "348319",
    "end": "354319"
  },
  {
    "text": "talking about with cryptography and sort the art of trying to break codes and sort work out keys to decrypt data is",
    "start": "354319",
    "end": "360680"
  },
  {
    "text": "called Crypt analysis but there's kind of more to cryptography than just encryption so there's four distinct",
    "start": "360680",
    "end": "366360"
  },
  {
    "text": "pillars that we look at with cryptography so there's confidentiality this is what we all typically think of with cryptography you know I have some",
    "start": "366360",
    "end": "373280"
  },
  {
    "text": "data I encrypt it of a key and that data's completely scrambled no one can read it but also we have the concept of",
    "start": "373280",
    "end": "379479"
  },
  {
    "text": "Integrity so if I have some data and I send it to my recipient has that data",
    "start": "379479",
    "end": "384880"
  },
  {
    "text": "been tampered with or corrupted in transit so we can use cryptography to help us um with to",
    "start": "384880",
    "end": "390560"
  },
  {
    "text": "Integrity also we have authentication so I have some encrypted data you know am I",
    "start": "390560",
    "end": "396280"
  },
  {
    "text": "allowed to view this data am I authenticated to see it and also have",
    "start": "396280",
    "end": "402199"
  },
  {
    "text": "your non-repudiation and this is all about proving that you have sent an encrypted message so it's kind of",
    "start": "402199",
    "end": "407800"
  },
  {
    "text": "similar analogy to a contract so if I send a contract to someone and they then try and dispute that I sent them that",
    "start": "407800",
    "end": "413199"
  },
  {
    "text": "contracts by using non repudiation we can actually prove that it was us that sent that contract to",
    "start": "413199",
    "end": "418400"
  },
  {
    "text": "them so cryptography is pretty much",
    "start": "418400",
    "end": "424120"
  },
  {
    "start": "422000",
    "end": "422000"
  },
  {
    "text": "everywhere you can't switch on a device or do anything without any kind of cryptography being in place so you know",
    "start": "424120",
    "end": "430080"
  },
  {
    "text": "online shopping if you're buying stuff off Amazon or any of your other favorite websites you have the little padlock in",
    "start": "430080",
    "end": "435680"
  },
  {
    "text": "the browser hopefully have the little padlock in the browser ATM machines when you're drawing",
    "start": "435680",
    "end": "441000"
  },
  {
    "text": "out cash from the wall there's a cryptographic handshake that goes on when you put your PIN number in between you and the bank mobile phones these days I mean",
    "start": "441000",
    "end": "448160"
  },
  {
    "text": "that's obviously a very hot topic at the moment especially what's been going on with the FBI and they were trying to break into the San Bernardino Killers",
    "start": "448160",
    "end": "455440"
  },
  {
    "text": "iPhone so a lot of these phones these days are heavily encrypted but also there's uses like",
    "start": "455440",
    "end": "461599"
  },
  {
    "text": "Bitcoin so Bitcoin as a currency is a cryptographic protocol so that's kind of",
    "start": "461599",
    "end": "466639"
  },
  {
    "text": "another another use for it and another um example of cryptography is in voting and vote machines so proving that you",
    "start": "466639",
    "end": "473720"
  },
  {
    "text": "voted you've only voted once and I try using cryptography so",
    "start": "473720",
    "end": "480440"
  },
  {
    "text": "that you can't cheat the voting",
    "start": "480440",
    "end": "484000"
  },
  {
    "text": "system okay so let's start off by looking at random numbers so random numbers are effectively one of the most",
    "start": "485560",
    "end": "491919"
  },
  {
    "start": "489000",
    "end": "489000"
  },
  {
    "text": "important Primitives that we need when we're dealing with cryptography and we use random numbers generally for",
    "start": "491919",
    "end": "497440"
  },
  {
    "text": "creating encryption keys and a good random number needs to be truly random and nonpredictable",
    "start": "497440",
    "end": "505000"
  },
  {
    "text": "now traditionally in net when you're doing random number generation you might use something like system. random and",
    "start": "505000",
    "end": "511520"
  },
  {
    "text": "you know that's okay if you're trying to do something simple like a you know simulating a dice roll or some lottery numbers for example but when you're",
    "start": "511520",
    "end": "518240"
  },
  {
    "text": "trying to Generate random numbers for cryptographic Keys system. random is not good enough and it's also not Fred",
    "start": "518240",
    "end": "525680"
  },
  {
    "text": "safe system. random it gives the appearance of Randomness but actually it's very deterministic so if you don't",
    "start": "525680",
    "end": "531680"
  },
  {
    "text": "change the seed every time when need create any random number you'll get the same set of numbers out of it so for cryptography it's no good so in net",
    "start": "531680",
    "end": "539600"
  },
  {
    "text": "there's a better class called RNG crypto service provider and this lives along with everything else we're talking about",
    "start": "539600",
    "end": "545240"
  },
  {
    "text": "in the system. security. cryptography namespace now RNG crypto service",
    "start": "545240",
    "end": "551360"
  },
  {
    "text": "provider is a lot slower to run than system. random but the numbers you're going to get out of it are going to be",
    "start": "551360",
    "end": "556519"
  },
  {
    "text": "non-deterministic which makes it excellent for generating encryption keys so you'll see examples as we go through",
    "start": "556519",
    "end": "562399"
  },
  {
    "text": "the talk where we generate 256 bits or 32 bytes random numbers which we use as",
    "start": "562399",
    "end": "568120"
  },
  {
    "text": "keys now RNG crypto service provider it's not",
    "start": "568120",
    "end": "573959"
  },
  {
    "text": "all implemented in net it actually uses the underlying cryptographic platform in Windows so the sort of same sort of",
    "start": "573959",
    "end": "579800"
  },
  {
    "text": "things that you'd use in lot the C++ or the operating system sort of",
    "start": "579800",
    "end": "585120"
  },
  {
    "text": "libraries so RNG crypto service provider is very easy to use and this will be a common theme everything we're talking",
    "start": "586600",
    "end": "591839"
  },
  {
    "text": "about today is actually very easy to use so in the little s bit of sample code here we have a method call Generate",
    "start": "591839",
    "end": "597959"
  },
  {
    "text": "random number where we pass pass in a length so that length is the number of bytes we want to generate so if you want a 32 by random number you pass 32 into",
    "start": "597959",
    "end": "605640"
  },
  {
    "text": "there we create an instance of the crypto service provider class and then we initialize a new array to the correct",
    "start": "605640",
    "end": "612200"
  },
  {
    "text": "length that we want and then we just call get bias and then we return that by AR a so",
    "start": "612200",
    "end": "617920"
  },
  {
    "text": "actually generating our encryption Keys is as simple as those few lines of",
    "start": "617920",
    "end": "623120"
  },
  {
    "text": "code so moving on to the next part in our sort of stack of Primitives to look",
    "start": "623480",
    "end": "629480"
  },
  {
    "text": "at we have hashing hashing you can kind of think of it as a bit like a digital fingerprint",
    "start": "629480",
    "end": "635720"
  },
  {
    "text": "of a piece of data so if you have a piece of data be you know a bite aray of data or",
    "start": "635720",
    "end": "642000"
  },
  {
    "text": "a PDF document Etc if you generate a hash code or yeah so if you generate a hash code of that piece of data you're",
    "start": "642000",
    "end": "647959"
  },
  {
    "text": "going to get a code out the end of it which is effectively the fingerprint for that piece of data if you then go and",
    "start": "647959",
    "end": "653079"
  },
  {
    "text": "change that original document in any way and then recalculate the hash code that hash will be completely different",
    "start": "653079",
    "end": "661040"
  },
  {
    "text": "so with hashing there's kind of four um kind of requirements that we",
    "start": "661720",
    "end": "667200"
  },
  {
    "text": "need from hashing so first of all a hash needs to be easy to compute so I have a piece of data run it through a hashing",
    "start": "667200",
    "end": "672720"
  },
  {
    "text": "function I get a hash code at the other end it should also be infeasible to generate a specific hash so you",
    "start": "672720",
    "end": "679160"
  },
  {
    "text": "shouldn't be able to say well if I have this hash code here what's the data I need to create that hash you shouldn't",
    "start": "679160",
    "end": "684600"
  },
  {
    "text": "be able to do that it's it's the other way around you have a piece of data you generate a hash code well well you run",
    "start": "684600",
    "end": "691480"
  },
  {
    "text": "it through a hash function and generate a hash code another requirement is it should be",
    "start": "691480",
    "end": "696600"
  },
  {
    "text": "in feasible to modify the original message without changing the hash so as I said before if you have a a piece of",
    "start": "696600",
    "end": "702120"
  },
  {
    "text": "data generate a hash code you then just change just one bit of that data that hash code should be completely different",
    "start": "702120",
    "end": "708000"
  },
  {
    "text": "not slightly different but completely different and the final requirement of a good hashing um algorithm is it should",
    "start": "708000",
    "end": "715040"
  },
  {
    "text": "be infeasible to find two identical hashes so you shouldn't have be a to get one piece of data generate a hash code",
    "start": "715040",
    "end": "721959"
  },
  {
    "text": "have a second piece of data and generate exactly the same hash code that's called a hash collision and you shouldn't be able to do",
    "start": "721959",
    "end": "728760"
  },
  {
    "text": "that so hashing is what we call a one-way operation so once you generate a",
    "start": "729120",
    "end": "734320"
  },
  {
    "text": "hash code you can't then or you shouldn't be able to then go back to the original message whereas encryption as",
    "start": "734320",
    "end": "739720"
  },
  {
    "text": "you can imagine is more like a two-way operation so we encrypt a piece of data with a key then we can use the same key",
    "start": "739720",
    "end": "744920"
  },
  {
    "text": "to decrypt that data so it's two-way it's reversible there hashing is only one",
    "start": "744920",
    "end": "751160"
  },
  {
    "text": "way the most common hashing algorithm that people have probably heard of is md5 and it's been around for a long time",
    "start": "751160",
    "end": "758040"
  },
  {
    "start": "752000",
    "end": "752000"
  },
  {
    "text": "well since 1991 and what this does is it produces a 16 by hash value and it was designed by",
    "start": "758040",
    "end": "764199"
  },
  {
    "text": "a guy called Ron rivest but the problem with this is in 1996 a hash Collision resistance vulnerability was generated",
    "start": "764199",
    "end": "771519"
  },
  {
    "text": "so someone managed to generate uh the same hash with different values or",
    "start": "771519",
    "end": "776959"
  },
  {
    "text": "different pieces of data being passed into it so md5 as a hashing algorithm these days isn't really good enough to",
    "start": "776959",
    "end": "782519"
  },
  {
    "text": "use but I still mention it here because it's if you work in a larger organization like a bank for example you",
    "start": "782519",
    "end": "789480"
  },
  {
    "text": "may still have a lot of older Legacy systems that you need to integrate with and they may still use md5 so an example of that I used to work",
    "start": "789480",
    "end": "796440"
  },
  {
    "text": "for an internet Bank in the UK and our backend banking platform was an old as400 mainframe system and whenever we",
    "start": "796440",
    "end": "804279"
  },
  {
    "text": "sent messages to and from that system we had to generate md5 hash codes",
    "start": "804279",
    "end": "809560"
  },
  {
    "text": "so it is possible you still need to use them but for a new system you wouldn't want to use",
    "start": "809560",
    "end": "815760"
  },
  {
    "text": "md5 okay so moving on from md5 then we have the secure hash family or the Sha family of",
    "start": "817839",
    "end": "823360"
  },
  {
    "text": "hashes and there's kind of three versions of this there's sha one which generates 160 bit hash",
    "start": "823360",
    "end": "829399"
  },
  {
    "text": "function and then there's sha two which can generate 256bit or 512 bit hashes",
    "start": "829399",
    "end": "836519"
  },
  {
    "text": "and those two are both implemented in The NET Framework work but there is also a new one called sha",
    "start": "836519",
    "end": "841839"
  },
  {
    "text": "three um which is now available so sha one and sha two were both designed by",
    "start": "841839",
    "end": "846959"
  },
  {
    "text": "the National Security Agency in the United States and you know rightly or wrongly",
    "start": "846959",
    "end": "852120"
  },
  {
    "text": "that makes some people a little bit nervous so there was a there was a",
    "start": "852120",
    "end": "858079"
  },
  {
    "text": "competition um a while ago and the winner was announced in 2012 to find a new variant of the Sha algorithm which",
    "start": "858079",
    "end": "865839"
  },
  {
    "text": "is non NSA based and the winner of that was an algorithm called I always get",
    "start": "865839",
    "end": "870959"
  },
  {
    "text": "this is it Kakak or Sak I'm not quite sure how you pronounce it and but currently this isn't implemented in the",
    "start": "870959",
    "end": "876920"
  },
  {
    "text": "doe framework but you can get some open source um implementations of it whether you want to trust them or not it's kind",
    "start": "876920",
    "end": "883279"
  },
  {
    "text": "of up to you um I imagine it'll be a matter of time before Microsoft implements it in the",
    "start": "883279",
    "end": "888880"
  },
  {
    "text": "framework but for what we're going to talk about today we're going to look at sha two and Sh",
    "start": "888880",
    "end": "895000"
  },
  {
    "text": "256 so it's very easy to use so in our little method here we we pass in a b array which is our data that we want to",
    "start": "895000",
    "end": "901000"
  },
  {
    "text": "generate a hash for and then we call the static method create on the sh 256",
    "start": "901000",
    "end": "906440"
  },
  {
    "text": "object and then you just call compute hash whil passing in the data you want to hash and then you get a bite array",
    "start": "906440",
    "end": "912120"
  },
  {
    "text": "back which is your hash code so again it's very very easy to use so moving on from hashing so to the",
    "start": "912120",
    "end": "920199"
  },
  {
    "text": "next level we have what are called authenticated hashes or hash message authentication",
    "start": "920199",
    "end": "926160"
  },
  {
    "start": "924000",
    "end": "924000"
  },
  {
    "text": "codes or hmx as they're often called and conceptually this is exactly the same as like a sh 256 hash so you pass",
    "start": "926160",
    "end": "933079"
  },
  {
    "text": "some data in you get a hash code out but what's different is you can also have a key which you pass in when you create",
    "start": "933079",
    "end": "939959"
  },
  {
    "text": "the hash and what this does is um it means that if I then send that hash to someone",
    "start": "939959",
    "end": "946079"
  },
  {
    "text": "else you know any any one of you for you to be able to recalculate that same hash you need to have that key this is where",
    "start": "946079",
    "end": "952560"
  },
  {
    "text": "the idea of authentication comes in you can only generate that same hash if you have the",
    "start": "952560",
    "end": "957600"
  },
  {
    "text": "key so it's commonly used for both verified",
    "start": "957600",
    "end": "963079"
  },
  {
    "start": "959000",
    "end": "959000"
  },
  {
    "text": "integrity and authentication and you can use both md5 and the Sha family of hashes or hash",
    "start": "963079",
    "end": "970680"
  },
  {
    "text": "Maxs and the strength of this is based on the key so if you use a good strong key which is say 32 bytes long 256 bits",
    "start": "970680",
    "end": "978079"
  },
  {
    "text": "it's going be quite difficult for someone to then go and brute force that same key and the most common attack against",
    "start": "978079",
    "end": "984519"
  },
  {
    "text": "this type of hashing algorithm is a Brute Force attack but as I said if you use a good strong key it makes this",
    "start": "984519",
    "end": "990160"
  },
  {
    "text": "quite hard to do so again using a hashm very very easy",
    "start": "990160",
    "end": "995920"
  },
  {
    "text": "to use so we have two pieces of information are passing into our method here so we",
    "start": "995920",
    "end": "1001079"
  },
  {
    "text": "have a bite array of data to be hashed and we have a bite array which is our key so that key was generated using the",
    "start": "1001079",
    "end": "1006880"
  },
  {
    "text": "RNG crypto service provider so we create an instance of the hmax sh 256 object whilst passing the",
    "start": "1006880",
    "end": "1013880"
  },
  {
    "text": "key into the Constructor and then you just simply call compute hash passing in the data you want on to hash and you get",
    "start": "1013880",
    "end": "1019680"
  },
  {
    "text": "a hash code back so again very very easy to",
    "start": "1019680",
    "end": "1024360"
  },
  {
    "text": "use okay so next up we want to talk about passwords and there's various different ways in which you can manage",
    "start": "1028720",
    "end": "1033880"
  },
  {
    "text": "passwords ranging from not very good up to excellent so the first one we'll just",
    "start": "1033880",
    "end": "1039640"
  },
  {
    "text": "get it out of the way and then move on is storing plain text passwords you know I don't need to spend much time on this",
    "start": "1039640",
    "end": "1045438"
  },
  {
    "text": "I'm sure everyone knows that that is completely wrong well a lot of sites out out there that do",
    "start": "1045439",
    "end": "1051400"
  },
  {
    "text": "this but you never store a plain text password in your database so the next best thing is to Hash a",
    "start": "1051400",
    "end": "1059480"
  },
  {
    "start": "1058000",
    "end": "1058000"
  },
  {
    "text": "password and the way this works is you would say have a person loging on or signing up to a system they type their",
    "start": "1059480",
    "end": "1065880"
  },
  {
    "text": "password in you create a hash say a sh 256 hash of that password and then store it in the database then the next time",
    "start": "1065880",
    "end": "1072799"
  },
  {
    "text": "they come and log on they type their password in a hash is generated on the client and it's then compared against a",
    "start": "1072799",
    "end": "1077919"
  },
  {
    "text": "hash in database if they match you put the correct password in but there's a problem with this and that problem is",
    "start": "1077919",
    "end": "1085600"
  },
  {
    "text": "that you can either Brute Force those passwords by trying lots and lots of different combinations or you can use",
    "start": "1085600",
    "end": "1090760"
  },
  {
    "text": "what's called a dictionary or rainbow table attack which is a massive pre-computed database of passwords and",
    "start": "1090760",
    "end": "1096000"
  },
  {
    "text": "different password combinations even the clever things where you try and turn the vowels into numbers to out Fox people",
    "start": "1096000",
    "end": "1101360"
  },
  {
    "text": "you know all that sort of stuff will be in there and the way a lot and the way a",
    "start": "1101360",
    "end": "1107000"
  },
  {
    "text": "lot of these attacks work is um using tools like hashcat you can use your gpus in your computer you know your",
    "start": "1107000",
    "end": "1114240"
  },
  {
    "text": "graphics processing units to actually do billions of hash attempts per second so if you imagine if you got a big powerful",
    "start": "1114240",
    "end": "1120960"
  },
  {
    "text": "machine with two NVIDIA GTX 1080s in there you imagine how many hashes you can do per",
    "start": "1120960",
    "end": "1128120"
  },
  {
    "text": "second so to give you an example of how easy a hash password is to crack there's a a screenshot of a website here called",
    "start": "1128840",
    "end": "1135480"
  },
  {
    "text": "crack station. net so if in the gray box on the left I've pasted a a hash code in",
    "start": "1135480",
    "end": "1141000"
  },
  {
    "text": "there which is two sh 256 hash and you click crack hash and then it's worked",
    "start": "1141000",
    "end": "1147240"
  },
  {
    "text": "out that the password is secret 69 I mean it's a very simple example but conceptually that's how a lot of these",
    "start": "1147240",
    "end": "1152640"
  },
  {
    "text": "sites work and you can you know if you got an md5 hash you can just paste it into Google and it'll reverse it for",
    "start": "1152640",
    "end": "1159919"
  },
  {
    "text": "you seriously give it a try it's uh it's quite scary so has anyone ever worked on a",
    "start": "1159919",
    "end": "1166919"
  },
  {
    "text": "system then where you've used hashing to store passwords in a database you know I've worked on systems that do it before",
    "start": "1166919",
    "end": "1172640"
  },
  {
    "text": "I think pretty much everyone has so what's the next best thing that you can do that's sort of the next level",
    "start": "1172640",
    "end": "1179360"
  },
  {
    "text": "on from that so you can do what is called um assaulted hash and what",
    "start": "1179360",
    "end": "1184440"
  },
  {
    "text": "assaulted hash is is the password plus assault value and assault value is just an arbitrary",
    "start": "1184440",
    "end": "1190600"
  },
  {
    "text": "random piece of data which generally you know you can it's another random number",
    "start": "1190600",
    "end": "1195679"
  },
  {
    "text": "which you generate with RNG crypto service provider and then you append that onto your password and then you create a hash of that password and the",
    "start": "1195679",
    "end": "1203200"
  },
  {
    "text": "salt and this is good it means it's much much harder or probably at the moment impossible to try and Brute Force any of",
    "start": "1203200",
    "end": "1209559"
  },
  {
    "text": "these passwords so that's great has anyone done this in any systems yeah you know again this is",
    "start": "1209559",
    "end": "1215880"
  },
  {
    "text": "quite a common way of doing it and you know there's nothing wrong with that but the problem with this is is as gpus",
    "start": "1215880",
    "end": "1223840"
  },
  {
    "text": "and processes increase over time you know a password assaulted password which is secure now who's to say it wouldn't",
    "start": "1223840",
    "end": "1230080"
  },
  {
    "text": "it might be vulnerable in 5 years time you you just don't know and this is a problem with Mo's law",
    "start": "1230080",
    "end": "1236480"
  },
  {
    "text": "you know processor speeds and GPU speeds are increasing like that so it's only a matter of time before someone comes out",
    "start": "1236480",
    "end": "1241960"
  },
  {
    "text": "of a GPU which is capable of cracking assaulted hash so what we want to do is",
    "start": "1241960",
    "end": "1248240"
  },
  {
    "text": "we want to go one step Le one step further and we want to try and mitigate this problem of trying billions of hash",
    "start": "1248240",
    "end": "1255480"
  },
  {
    "text": "attempts per second so the next best thing and sort the recommended thing to use is what's",
    "start": "1255480",
    "end": "1261200"
  },
  {
    "text": "called a password-based key derivation function well if you want to impress your friends down the pub it's a pbkdf2",
    "start": "1261200",
    "end": "1268200"
  },
  {
    "text": "if you like acronyms again this is the same as what we've been talking about so we have a",
    "start": "1268200",
    "end": "1274240"
  },
  {
    "text": "password that we want to Hash we have ass salt but what we also have here is a number of iterations number that we pass",
    "start": "1274240",
    "end": "1281000"
  },
  {
    "text": "in and what this is is it tells the algorithm how many times to rehash that",
    "start": "1281000",
    "end": "1286799"
  },
  {
    "text": "password and then the reason this is good is you know at the moment if you can say test you know B two billion",
    "start": "1286799",
    "end": "1293400"
  },
  {
    "text": "combinations per second if you have enough iterations on your password based key derivation function you might reduce",
    "start": "1293400",
    "end": "1299200"
  },
  {
    "text": "that down to the fact that you can only test say 10 per second or two per second depending on what you pass in there and",
    "start": "1299200",
    "end": "1305000"
  },
  {
    "text": "I'll show you a graph in a moment of s what the different speeds um increases look",
    "start": "1305000",
    "end": "1310919"
  },
  {
    "text": "like so but first of all show you how to use it um we have our method here we're",
    "start": "1310919",
    "end": "1316360"
  },
  {
    "text": "passing in a bite array of our data to be hashed just as before a bite array of our salt so it's you know 32 by random",
    "start": "1316360",
    "end": "1323440"
  },
  {
    "text": "number of just sort of junk that you append onto the password and we have a number of",
    "start": "1323440",
    "end": "1329159"
  },
  {
    "text": "iterations now the class in NET Framework you want to use is called RFC 2898 derived bys so you'll be forgiven",
    "start": "1329159",
    "end": "1336520"
  },
  {
    "text": "for overlooking that one in the framework because it's it's not obvious what it",
    "start": "1336520",
    "end": "1342320"
  },
  {
    "text": "does and Under the Bonnet or under the covers the way RFC uh 8 98 works it uses",
    "start": "1342559",
    "end": "1349159"
  },
  {
    "text": "sh one to do its hashing which means you get a 20 by hash value out of it so when",
    "start": "1349159",
    "end": "1354640"
  },
  {
    "text": "I call get byes only really need to get the first 20 bytes for that hash",
    "start": "1354640",
    "end": "1359960"
  },
  {
    "text": "value so if you look at the chart here so when I first created this chart I was",
    "start": "1359960",
    "end": "1365279"
  },
  {
    "text": "using a an older laptop but I tested some hashes so 100 iterations it took 2",
    "start": "1365279",
    "end": "1370799"
  },
  {
    "text": "milliseconds to Hash a password 1,000 iterations took 16 milliseconds 10,000",
    "start": "1370799",
    "end": "1377000"
  },
  {
    "text": "iterations took 196 milliseconds and as you can see it sort of scales up and then when I did 500,000 iterations it",
    "start": "1377000",
    "end": "1383320"
  },
  {
    "text": "took 7 Seconds to Hash a password now the value you put in there is a tradeoff you have to look at what",
    "start": "1383320",
    "end": "1389520"
  },
  {
    "text": "you're using the hash for and what the speed implications are going to be for you so if you have a good robust website",
    "start": "1389520",
    "end": "1396600"
  },
  {
    "text": "you may notice sometimes when you put the password in there might be a bit of a delay as you log in that's probably",
    "start": "1396600",
    "end": "1401919"
  },
  {
    "text": "because they're doing a password based key derivation function call behind the scenes so systems I've worked on you",
    "start": "1401919",
    "end": "1408039"
  },
  {
    "text": "know I've typically used anywhere between 50 and 100,000 iterations to Hash a password for login in the system",
    "start": "1408039",
    "end": "1414080"
  },
  {
    "text": "because that kind of natural delay is kind of okay well I think it's okay but if you're hashing data on",
    "start": "1414080",
    "end": "1420400"
  },
  {
    "text": "something that's sort of highspeed transactional then you know 50,000 iterations would be too slow so you need",
    "start": "1420400",
    "end": "1426200"
  },
  {
    "text": "to think about the tradeoffs of uh how many iterations you want and what the speed penalties are",
    "start": "1426200",
    "end": "1431559"
  },
  {
    "text": "going to be so whil we're on the subject of passwords this this company's been",
    "start": "1431559",
    "end": "1437240"
  },
  {
    "text": "bought up several times while we're here it's it's it's fun to talk about um there's a as as I take",
    "start": "1437240",
    "end": "1444240"
  },
  {
    "text": "everyone's heard of this everyone saw Troy's uh keynote yesterday so one of the things that",
    "start": "1444240",
    "end": "1451039"
  },
  {
    "text": "happened when Ashley Madison were hacked is the password tables were all",
    "start": "1451039",
    "end": "1457799"
  },
  {
    "text": "stolen and but Ashley M have actually been quite good so they do something called bcrypt to encrypt their passwords",
    "start": "1457799",
    "end": "1463720"
  },
  {
    "text": "now bcrypt is something that's very similar to the password based key derivation function it's iteration based hash function it's just a different type",
    "start": "1463720",
    "end": "1470039"
  },
  {
    "text": "of implementation so they' use this across their passwords and the attackers tried to you know recover a lot of the",
    "start": "1470039",
    "end": "1475600"
  },
  {
    "text": "passwords and they couldn't so that's good but they then also had access to the source code which had stolen and",
    "start": "1475600",
    "end": "1481679"
  },
  {
    "text": "what they had found was that some unwitting programmer",
    "start": "1481679",
    "end": "1487240"
  },
  {
    "text": "had probably tried to optimize the logging in system I'm not quite sure what their motive was but",
    "start": "1487240",
    "end": "1493480"
  },
  {
    "text": "um they' started storing a local token of the password and the user username which say then md5",
    "start": "1493480",
    "end": "1499799"
  },
  {
    "text": "hashed so I think think what it was is you know when you come back to relog into the system it will relog you in quicker so they probably thought they",
    "start": "1499799",
    "end": "1506080"
  },
  {
    "text": "were doing something good you know making the Rel logging in process quicker so when the hackers found this out they're like well let's not let's",
    "start": "1506080",
    "end": "1513039"
  },
  {
    "text": "not attack the bcrypt passwords let's attack the md5 hashes so they did and they managed to recover I think",
    "start": "1513039",
    "end": "1518399"
  },
  {
    "text": "something like 10 million passwords from the system so the reason why I'm saying this",
    "start": "1518399",
    "end": "1524840"
  },
  {
    "text": "story is um security is only as good as you weakest link so their password management generally was pretty good",
    "start": "1524840",
    "end": "1530799"
  },
  {
    "text": "they used bcrypt to store their passwords but they had a weak Link in the chain where they were storing this token with md5 hash passwords which",
    "start": "1530799",
    "end": "1538480"
  },
  {
    "text": "meant you know all the good stuff they' done with BCPS was basically void at that point so there's a really good article",
    "start": "1538480",
    "end": "1544919"
  },
  {
    "text": "on ARS Technica so I'll put a bitly link there which goes into that story in a lot more detail and it's quite an",
    "start": "1544919",
    "end": "1550039"
  },
  {
    "text": "entertaining read it's I definitely recommend reading",
    "start": "1550039",
    "end": "1554720"
  },
  {
    "text": "it okay so let's move on to encryption so first of all we're going to talk about",
    "start": "1556679",
    "end": "1561840"
  },
  {
    "text": "symmetric encryption and what this is is you you have some plain Text data and you",
    "start": "1561840",
    "end": "1568600"
  },
  {
    "text": "encrypt it with a key which gives you your Cipher Text data but then to decrypt the message you decrypt it the",
    "start": "1568600",
    "end": "1573880"
  },
  {
    "text": "same key that's why it's symmetric so you use the same key to encrypt and",
    "start": "1573880",
    "end": "1579278"
  },
  {
    "text": "decrypt but there is a drawback to symmetrical encryption and that is that sharing Keys is very difficult to do so",
    "start": "1580559",
    "end": "1586760"
  },
  {
    "text": "if I encrypt some data and I know I want to send that data to say five of you in the audience how do we share that key I",
    "start": "1586760",
    "end": "1594320"
  },
  {
    "text": "can't email it to you that's a bit of vulnerability I can't just put it on the network somewhere you know maybe I could",
    "start": "1594320",
    "end": "1599720"
  },
  {
    "text": "meet you all in person and hand it to you so key sharing generally is quite hard to",
    "start": "1599720",
    "end": "1605320"
  },
  {
    "text": "do and one of the things we're going to talk about later is how to mitigate the complexities of um key",
    "start": "1605320",
    "end": "1612158"
  },
  {
    "text": "sharing so this is a diagram we looked at earlier so where we're saying that hashing is is a one-way function this",
    "start": "1613520",
    "end": "1618600"
  },
  {
    "text": "just reiterates the point that encryption is a two-way um operation so you have some data you",
    "start": "1618600",
    "end": "1625559"
  },
  {
    "text": "encrypt it but you can also reverse that operation and get your data",
    "start": "1625559",
    "end": "1630279"
  },
  {
    "text": "back okay so way symmetrical encryption works is it works by getting the data you want to encrypt and it chops it up",
    "start": "1630880",
    "end": "1636080"
  },
  {
    "text": "into blocks and it encrypts several bites at a time and these blocks are",
    "start": "1636080",
    "end": "1641120"
  },
  {
    "text": "padded so they're the same size so if you have some data you chunk it up into say um 128",
    "start": "1641120",
    "end": "1648399"
  },
  {
    "text": "blocks if the block at the end isn't the same size or is is too small then you just pad it",
    "start": "1648399",
    "end": "1655080"
  },
  {
    "text": "out and there's three um symmetric encryption algorithms that are supported in net so there's AES Dez and triple Dez",
    "start": "1655080",
    "end": "1663159"
  },
  {
    "text": "so we're mostly going to focus on AES because that's the one that's recommended to use these days but the reason I've put Dez and triple Dez on",
    "start": "1663159",
    "end": "1669200"
  },
  {
    "text": "there is again if you're working with Legacy systems that used asz to encrypt",
    "start": "1669200",
    "end": "1674240"
  },
  {
    "text": "data if you need to interact with those systems you'll then need to use Dez to decp that",
    "start": "1674240",
    "end": "1680919"
  },
  {
    "text": "data so AES is what we're going to look at and it was invented by two mathematicians Joan Damon and Vincent",
    "start": "1681840",
    "end": "1688159"
  },
  {
    "start": "1682000",
    "end": "1682000"
  },
  {
    "text": "Ryman and they created what was called the ryale cipher and then in 2001 the National",
    "start": "1688159",
    "end": "1695039"
  },
  {
    "text": "Institute of Standards the National Institute of Standards and Technology adopted the ryell cipher as the AES",
    "start": "1695039",
    "end": "1701880"
  },
  {
    "text": "Advanced encryption standard and the way uh AES works is",
    "start": "1701880",
    "end": "1707880"
  },
  {
    "text": "quite simple so you pass into it your plane text so a b array of the data you want to encrypt you also pass in a bite",
    "start": "1707880",
    "end": "1714640"
  },
  {
    "text": "array of something which is called an initialization vector and what that is it's a small",
    "start": "1714640",
    "end": "1719840"
  },
  {
    "text": "bite array of data which is used to help jump start the AES encryption algorithm",
    "start": "1719840",
    "end": "1724919"
  },
  {
    "text": "the initialization Vector doesn't have to be kept secret you can send it along with your message the secrecy isn't based on the initialization",
    "start": "1724919",
    "end": "1732240"
  },
  {
    "text": "vector and then you also pass in a key so AES supports 128 92 and 256 bit",
    "start": "1732240",
    "end": "1740200"
  },
  {
    "text": "keys so I always recommend you just go straight for 256 bit Keys which is 32",
    "start": "1740200",
    "end": "1745640"
  },
  {
    "text": "bytes so you pass all those into the as algorithm and then you get your Cipher text back out the other",
    "start": "1745640",
    "end": "1751000"
  },
  {
    "text": "end and then to decrypt that data instead of passing in the plane text you pass in the encrypted data the same",
    "start": "1751000",
    "end": "1757080"
  },
  {
    "text": "initialization vector and the same key and then it decrypts your",
    "start": "1757080",
    "end": "1762360"
  },
  {
    "text": "data so in net there's two implementations of AES that you can use there's one called AES managed and",
    "start": "1762360",
    "end": "1768159"
  },
  {
    "text": "there's also one called AES crypto service provider so AES managed is natively",
    "start": "1768159",
    "end": "1775000"
  },
  {
    "text": "written in.net so it's a it's a CLR based object and you know it works fine I've",
    "start": "1775000",
    "end": "1781640"
  },
  {
    "text": "used it several times um but the main drawback is is it's not what's called fi",
    "start": "1781640",
    "end": "1787399"
  },
  {
    "text": "97-2 certified and if you're only encrypting and decrypting data between net systems",
    "start": "1787399",
    "end": "1794039"
  },
  {
    "text": "that might not be necessarily be a problem but if you're working with a lot of other systems that say written in Java node or any sort of Mainframe",
    "start": "1794039",
    "end": "1802640"
  },
  {
    "text": "systems using implementations that are fit certified means that you you're guaranteed that any data you encrypting",
    "start": "1802640",
    "end": "1808360"
  },
  {
    "text": "say. net you can then go and decrypt on a on a Mainframe so the AES crypto service",
    "start": "1808360",
    "end": "1814440"
  },
  {
    "text": "provider object in net is fips 97-2",
    "start": "1814440",
    "end": "1819879"
  },
  {
    "text": "certified and it's not written in net it uses the underlying Windows crypto",
    "start": "1820000",
    "end": "1826240"
  },
  {
    "text": "platform",
    "start": "1826240",
    "end": "1829240"
  },
  {
    "text": "so it's quite straightforward to use so we have a method here called Data to",
    "start": "1831440",
    "end": "1836480"
  },
  {
    "text": "encrypt we pass in a BTE array of our key so it's a 32 byte BTE array and we",
    "start": "1836480",
    "end": "1842640"
  },
  {
    "text": "pass in an initialization Vector which is 16 bytes and then we create an instance of",
    "start": "1842640",
    "end": "1848039"
  },
  {
    "text": "the AES crypto service provider class we pass in the key and the initialization vector and we then create a memory in a",
    "start": "1848039",
    "end": "1855000"
  },
  {
    "text": "crypto stream because it's all stream based and then you just write the data into the stream and flush it and then that",
    "start": "1855000",
    "end": "1861960"
  },
  {
    "text": "gives you your encrypted data back out the other end as a b",
    "start": "1861960",
    "end": "1867480"
  },
  {
    "text": "array so decrypting data it's very similar so you pass in the key in the initialization Vector create the crypto",
    "start": "1867480",
    "end": "1875000"
  },
  {
    "text": "service provider object pass in the key in the IV and then you create your memory stream and",
    "start": "1875000",
    "end": "1881480"
  },
  {
    "text": "crypto stream and you got a thing here called DD crypto",
    "start": "1881480",
    "end": "1889158"
  },
  {
    "text": "and then that gives you that decrypts your data back into a bite",
    "start": "1889440",
    "end": "1894000"
  },
  {
    "text": "array so the next one to look at is asymmetric encryption so what we've talked about has been symmetric so far",
    "start": "1895840",
    "end": "1901200"
  },
  {
    "text": "you use the same key to encrypt and to decrypt so the next one is asymmetric",
    "start": "1901200",
    "end": "1907320"
  },
  {
    "start": "1907000",
    "end": "1907000"
  },
  {
    "text": "encryption and you probably heard this commonly referred to as public and private key cryptography so the idea is",
    "start": "1907320",
    "end": "1913360"
  },
  {
    "text": "you have some data you want to encrypt you encrypt it with your recipient's public",
    "start": "1913360",
    "end": "1920480"
  },
  {
    "text": "key you then send them that data and then to decrypt it they use their private key now they're the only person",
    "start": "1920480",
    "end": "1926080"
  },
  {
    "text": "that will have their private key so they have to look after it but their public key anyone can have it you can post it",
    "start": "1926080",
    "end": "1931559"
  },
  {
    "text": "on your website you can hand it out it doesn't",
    "start": "1931559",
    "end": "1935799"
  },
  {
    "text": "matter so we're going to use an algorithm called RSA and it was developed by a company called RSA data",
    "start": "1937080",
    "end": "1942919"
  },
  {
    "text": "security Incorporated by three guys rivest Shamir and Adelman and the way RSA works is it's more of a",
    "start": "1942919",
    "end": "1949960"
  },
  {
    "text": "mathematical process whereas whereas AES is algorithmic it works on blocks of data and it's you know very algorithmic",
    "start": "1949960",
    "end": "1955919"
  },
  {
    "text": "in how it works RSA is more mathematical and it uses modulus",
    "start": "1955919",
    "end": "1961000"
  },
  {
    "text": "arithmetic and the way it works is that there should be no efficient way to factor very large prime numbers so if we",
    "start": "1961000",
    "end": "1968039"
  },
  {
    "text": "have a key which is 248 bits which is the current recommended minimum key",
    "start": "1968039",
    "end": "1974559"
  },
  {
    "text": "length that key length that key is basically one massive prime",
    "start": "1974559",
    "end": "1980278"
  },
  {
    "text": "number the one drawback of RSA is because it's a mathematical scheme the larger the key size you use the slower",
    "start": "1981399",
    "end": "1987960"
  },
  {
    "text": "RSA is and it is quite slow so as I saying the keys are based",
    "start": "1987960",
    "end": "1994840"
  },
  {
    "text": "on prime number factorization so if you have two prime numbers 23 and 17 you",
    "start": "1994840",
    "end": "2000000"
  },
  {
    "text": "know if I say to you multiply them together it's quite easy to do you can do it in your head on a calculator it's",
    "start": "2000000",
    "end": "2005159"
  },
  {
    "text": "very straightforward we've asked to say what two prime numbers do you need to multiply together to make",
    "start": "2005159",
    "end": "2011720"
  },
  {
    "text": "5,963 does anyone know the answer to that pretty sure someone's going to be",
    "start": "2011720",
    "end": "2018080"
  },
  {
    "text": "out to say it one day it made me look really stupid okay so so it's a lot harder to",
    "start": "2018080",
    "end": "2024039"
  },
  {
    "text": "do so the answer is 67 * 89 is 5,963 so the public key is",
    "start": "2024039",
    "end": "2033720"
  },
  {
    "text": "5,963 that's the number that that everyone else can know but the private key is those two prime",
    "start": "2033720",
    "end": "2039440"
  },
  {
    "text": "number factors 67 and 89 and that's the bit you want to keep secret so there's",
    "start": "2039440",
    "end": "2044760"
  },
  {
    "text": "there's a lot more to RSA Keys work than that but fundamentally it's all based around the complexity of factorizing prime",
    "start": "2044760",
    "end": "2051878"
  },
  {
    "text": "numbers so that all sounds quite complicated but to use it it really isn't that",
    "start": "2052079",
    "end": "2058079"
  },
  {
    "text": "hard so first of all we want to generate some keys so we have a method here",
    "start": "2058159",
    "end": "2063760"
  },
  {
    "text": "called assign new key and we create an instance of the a crypto service provider class and we pass in the key",
    "start": "2063760",
    "end": "2070320"
  },
  {
    "text": "strength that we want to use so we're going to use 248 bits in this example and then to export our public",
    "start": "2070320",
    "end": "2076800"
  },
  {
    "text": "key we just call Export parameters whilst passing in false and then to generate our private key we just call",
    "start": "2076800",
    "end": "2083960"
  },
  {
    "text": "Export parameters as well as passing in true so in the code there I mean we're just storing the keys in memory um",
    "start": "2083960",
    "end": "2089760"
  },
  {
    "text": "unfortunately we haven't got time to talk about effective Key Management strategies um but but typically",
    "start": "2089760",
    "end": "2097680"
  },
  {
    "text": "you know you don't just want to write these out to files and keep them on your server because that's not very safe you probably want to use certificates or um",
    "start": "2097680",
    "end": "2104920"
  },
  {
    "text": "Hardware security modules which are network appliances that go into your data center which is",
    "start": "2104920",
    "end": "2110040"
  },
  {
    "text": "designed for storing keys but for the for purpos this this example we just can store the keys in",
    "start": "2110040",
    "end": "2115640"
  },
  {
    "text": "memory so to encrypt some data we have our method here and we pass in our bite array of our data we want to",
    "start": "2115640",
    "end": "2123680"
  },
  {
    "text": "encrypt and we create an instance of RSA crypto provider again I passing in the strength of the key we want then we call",
    "start": "2123680",
    "end": "2130920"
  },
  {
    "text": "import parameters and we pass in our public key and then we just call RSA do",
    "start": "2130920",
    "end": "2136359"
  },
  {
    "text": "encrypt and then that encrypts the data and gives us a b array of our encrypted data",
    "start": "2136359",
    "end": "2141560"
  },
  {
    "text": "back to decrypto data very similar create an instance of RSA crypto service",
    "start": "2141560",
    "end": "2146720"
  },
  {
    "text": "provider import our private key and then it's called RSA decrypt and that gives us our decrypted",
    "start": "2146720",
    "end": "2153960"
  },
  {
    "text": "data back one particular problem with RSA is",
    "start": "2153960",
    "end": "2161079"
  },
  {
    "text": "you can only encrypt data up to the size of the key so if you got a 2048 bit key you can only encrypt a maximum of 248",
    "start": "2161079",
    "end": "2168359"
  },
  {
    "text": "bits of data so you could you know have your",
    "start": "2168359",
    "end": "2175119"
  },
  {
    "text": "data that you want to encrypt and then split it up into chunks and encrypt each of those different bits bits of data but generally you're limited on how",
    "start": "2175119",
    "end": "2182319"
  },
  {
    "text": "much you can encrypt at once with RSA that's not necessarily a problem which will come on too",
    "start": "2182319",
    "end": "2188720"
  },
  {
    "text": "later so the final primitive we're going to look at is digital",
    "start": "2188720",
    "end": "2194319"
  },
  {
    "start": "2194000",
    "end": "2194000"
  },
  {
    "text": "signatures so digital signature consists of three different algorithms that we want to use so we have a key generator",
    "start": "2194480",
    "end": "2199960"
  },
  {
    "text": "which we've just seen we have a signing algorithm so we're going to assign a piece of data and then we have a",
    "start": "2199960",
    "end": "2206000"
  },
  {
    "text": "signature verifier so if we have a digital signature of a piece of data say a PDF document and we then want to",
    "start": "2206000",
    "end": "2213359"
  },
  {
    "text": "verify that that signature is valid we use a signature verifier",
    "start": "2213359",
    "end": "2218680"
  },
  {
    "text": "and the key generator is going to be based on RSA as we've just seen and the Way Des signing algorithm",
    "start": "2218960",
    "end": "2226680"
  },
  {
    "text": "works is that we sign our data using the private key so if you look back to when",
    "start": "2226680",
    "end": "2231760"
  },
  {
    "text": "we did RSA we encrypted the data with the recipient's public key when we create a digital signature of data we're",
    "start": "2231760",
    "end": "2237920"
  },
  {
    "text": "actually going to use our own private key to create that digital signature then when the recipient wants to verify",
    "start": "2237920",
    "end": "2244240"
  },
  {
    "text": "that the signature is valid they use my private my public",
    "start": "2244240",
    "end": "2249119"
  },
  {
    "text": "key so typically the way a digital signature works is you don't create a digital signature of the actual data",
    "start": "2251400",
    "end": "2256680"
  },
  {
    "text": "itself so if you're trying to create a signature of say a large PDF document you'd create a sh 256 hash of that",
    "start": "2256680",
    "end": "2263599"
  },
  {
    "text": "document first and then you do the digital signature of that hash because the digital signatures use",
    "start": "2263599",
    "end": "2270720"
  },
  {
    "text": "RSA um under the covers it has the same limitations in the amount of data you",
    "start": "2270720",
    "end": "2276000"
  },
  {
    "text": "can um create a signature for in one go so typically you create a hash of your data and then you create a digital",
    "start": "2276000",
    "end": "2282599"
  },
  {
    "text": "signature of that hash so if we look at my expert piece of",
    "start": "2282599",
    "end": "2289240"
  },
  {
    "text": "artwork to demonstrate this so we have guy called Bob and he wants to create a digital signature so he does that using",
    "start": "2289240",
    "end": "2295880"
  },
  {
    "text": "his private key he then sends that digital signature over the Internet or The Intergalactic spiders web as my",
    "start": "2295880",
    "end": "2304040"
  },
  {
    "text": "picture shows he sends that to Alice and then she wants to verify that her signature is valid so she uses Bob's",
    "start": "2304040",
    "end": "2311040"
  },
  {
    "text": "public key with the signature verifier and if it was indeed Bob that",
    "start": "2311040",
    "end": "2317520"
  },
  {
    "text": "sent that uh signature then it'll be valid so earlier on we talked about the",
    "start": "2317520",
    "end": "2324240"
  },
  {
    "text": "concept of non-repudiation about being able to prove that someone has sent something the reason we know it was Bob",
    "start": "2324240",
    "end": "2331440"
  },
  {
    "text": "that sent this digital signature is because it used his private key so only Bob knows his private key",
    "start": "2331440",
    "end": "2337160"
  },
  {
    "text": "so if we can verify that the signature is valid when it's sent to us it can only have come from Bob unless he's um",
    "start": "2337160",
    "end": "2344839"
  },
  {
    "text": "private key has been stolen so to use digital signatures",
    "start": "2344839",
    "end": "2350920"
  },
  {
    "text": "again we need to generate a key pair so same code as what we used before we export our public and private",
    "start": "2350920",
    "end": "2357839"
  },
  {
    "text": "key then to sign some data we pass in a b array which is the hash of the data we want to sign so PDF document create a",
    "start": "2357839",
    "end": "2365240"
  },
  {
    "text": "hash of that data pass into this method we then import our private key",
    "start": "2365240",
    "end": "2371640"
  },
  {
    "text": "and we then create an instance of a class called RSA pkcs1 signature",
    "start": "2371640",
    "end": "2376880"
  },
  {
    "text": "formatter I don't know who comes up with these names but again it's one that youd probably",
    "start": "2376880",
    "end": "2383400"
  },
  {
    "text": "it's very easy to overlook it in The NET Framework so we set a hashing algorithm on that so under under the covers we're",
    "start": "2383400",
    "end": "2390079"
  },
  {
    "text": "going to use sh 256 and then you just call create signature and pass in the hasher for the",
    "start": "2390079",
    "end": "2396440"
  },
  {
    "text": "of the data you want to create the signature on and then you get a B array returned which is your digital",
    "start": "2396440",
    "end": "2402440"
  },
  {
    "text": "signature to verify the digital signature is valid we have a method here to do that so we pass in the hash of the",
    "start": "2402440",
    "end": "2409880"
  },
  {
    "text": "data to sign and the actual B aray of the digital signature itself we import",
    "start": "2409880",
    "end": "2416440"
  },
  {
    "text": "the public key because we're using the sender's public key to verify the signature we create an instance of RSA",
    "start": "2416440",
    "end": "2423599"
  },
  {
    "text": "pkcs1 signature d formatter just rolls off a tongue that one again Set uh the hashing algorithm",
    "start": "2423599",
    "end": "2431480"
  },
  {
    "text": "to be sh 256 and then you call verify signature passing in the hash of the",
    "start": "2431480",
    "end": "2436520"
  },
  {
    "text": "data that that was signed and the actual signature itself and that just returns a Boolean true or",
    "start": "2436520",
    "end": "2442200"
  },
  {
    "text": "false true it's a valid signature false it's not so if for",
    "start": "2442200",
    "end": "2449160"
  },
  {
    "text": "example when we go to generate or when we go to verify the signature that hash that we're trying to verify if that's",
    "start": "2449160",
    "end": "2454800"
  },
  {
    "text": "been changed in any way and you pass it into verify signature with the digital signature itself if",
    "start": "2454800",
    "end": "2460680"
  },
  {
    "text": "that data's been changed then verify will come back as false because it's not because it's not a valid digital",
    "start": "2460680",
    "end": "2465960"
  },
  {
    "text": "signature for that data okay so if we recap our four main",
    "start": "2465960",
    "end": "2475000"
  },
  {
    "start": "2471000",
    "end": "2471000"
  },
  {
    "text": "pillars of cryptography so first of all we had confidentiality and for confidentiality",
    "start": "2475000",
    "end": "2481800"
  },
  {
    "text": "we've used both AES and RSA for inte",
    "start": "2481800",
    "end": "2487480"
  },
  {
    "text": "we've looked at hashing and we discuss a lot about sh 256 for authentication we've used hash",
    "start": "2487480",
    "end": "2495040"
  },
  {
    "text": "message authentication codes based around sh 256 and for non-repudiation we've just",
    "start": "2495040",
    "end": "2500520"
  },
  {
    "text": "looked at digital signatures so now what we want to do is use a lot of these",
    "start": "2500520",
    "end": "2505839"
  },
  {
    "text": "together to create what's called a hybrid encryption",
    "start": "2505839",
    "end": "2510040"
  },
  {
    "text": "scheme Okay so as we discussed RSA has limits",
    "start": "2512079",
    "end": "2518319"
  },
  {
    "text": "on the amount of data you can encrypt in one go and it's quite slow but AES is very fast it's an it's",
    "start": "2518319",
    "end": "2525359"
  },
  {
    "text": "you know algorithmic it's quite efficient but exchanging Keys is very difficult so what we want to do is",
    "start": "2525359",
    "end": "2531640"
  },
  {
    "text": "combine RSA in AE to create what's called a hybrid encryption scheme so we're using the power of both these",
    "start": "2531640",
    "end": "2537880"
  },
  {
    "text": "asymmetric and symmetric encryption algorithms to encrypt data and share",
    "start": "2537880",
    "end": "2544119"
  },
  {
    "text": "keys so if we look at the example here so we create an AES session key and that's",
    "start": "2545160",
    "end": "2552520"
  },
  {
    "text": "just a first2 by random number that we can use as our key for AES we encrypt some data with that key",
    "start": "2552520",
    "end": "2559920"
  },
  {
    "text": "but then what we do is we use our public key and RSA to then encrypt that session",
    "start": "2559920",
    "end": "2566160"
  },
  {
    "text": "key we send that across to our recipient they use their private key to decrypt",
    "start": "2566160",
    "end": "2571440"
  },
  {
    "text": "that session key then once they've recovered that key they can then decrypt the message with a",
    "start": "2571440",
    "end": "2577800"
  },
  {
    "text": "yes so when we send our data to the recipient to decrypt we're sending them three pieces of information so we've got",
    "start": "2577800",
    "end": "2584000"
  },
  {
    "text": "the RSA encrypted session key we've got the initialization Vector which we use for jump starting",
    "start": "2584000",
    "end": "2590480"
  },
  {
    "text": "AES and we have the actual AES encrypted data itself so let's let's run through that",
    "start": "2590480",
    "end": "2596839"
  },
  {
    "text": "as an example so we've got Alice she generates a 32 by AES key and she",
    "start": "2596839",
    "end": "2603760"
  },
  {
    "text": "generates her 16 BYT initialization Vector she encrypts her data with",
    "start": "2603760",
    "end": "2609839"
  },
  {
    "text": "AES so using that session key we've now encrypted our data so that's good we then use Bob's public key and",
    "start": "2609839",
    "end": "2619079"
  },
  {
    "text": "RSA to encrypt that session key we can then send all that data",
    "start": "2619079",
    "end": "2625319"
  },
  {
    "text": "package it all up and then send it across to Bob so on the other end so Bob's",
    "start": "2625319",
    "end": "2630680"
  },
  {
    "text": "received this packet of information so he uses his private key to decrypt the AES session key so we've recovered the",
    "start": "2630680",
    "end": "2638319"
  },
  {
    "text": "key we can now use AES with the initialization Vector to decrypt our",
    "start": "2638319",
    "end": "2643640"
  },
  {
    "text": "data and then Bob can read the message so meet me at noon below the clock tower wear a red rose in your",
    "start": "2643640",
    "end": "2650520"
  },
  {
    "text": "button reading far to many spy novels so to reiterate this let's get",
    "start": "2650520",
    "end": "2655559"
  },
  {
    "text": "Bob to send a message back to Alice so Bob generates his own a session key",
    "start": "2655559",
    "end": "2661359"
  },
  {
    "text": "because once he's used the other one we're throwing it away we're not going to reuse it we're going to generate a new one",
    "start": "2661359",
    "end": "2666800"
  },
  {
    "text": "so he generates a new 32 by key he generates his own initialization Vector",
    "start": "2666800",
    "end": "2672280"
  },
  {
    "text": "which is 16 bytes and he uses AES and that session key and initialization",
    "start": "2672280",
    "end": "2677440"
  },
  {
    "text": "Vector to encrypt his reply he then uses Alice's public key so",
    "start": "2677440",
    "end": "2682960"
  },
  {
    "text": "we sended a message back to Alice so we're can to use her public key to encrypt that session key he packages it up and emails it or",
    "start": "2682960",
    "end": "2692680"
  },
  {
    "text": "however he's going to send it back to Alice so she then uses her private",
    "start": "2692680",
    "end": "2698760"
  },
  {
    "text": "key to recover that a session key and then she uses that recovered key with",
    "start": "2698760",
    "end": "2704800"
  },
  {
    "text": "the initialization Vector to decrypt the message reply and the message is I will meet you",
    "start": "2704800",
    "end": "2711839"
  },
  {
    "text": "I'll be wearing a blue hat and red boots which is very",
    "start": "2711839",
    "end": "2716319"
  },
  {
    "text": "fashionable so that's pretty good so we've used the flexibility of RSA to be able",
    "start": "2717920",
    "end": "2723599"
  },
  {
    "text": "to securely share Keys between our rece recipient and sender but we've also used the speed and efficiency of AES to",
    "start": "2723599",
    "end": "2730119"
  },
  {
    "text": "encrypt our actual message so we kind of fixed two of our",
    "start": "2730119",
    "end": "2735839"
  },
  {
    "text": "problems but now let's add some Integrity to that so if Alice",
    "start": "2735839",
    "end": "2742119"
  },
  {
    "start": "2736000",
    "end": "2736000"
  },
  {
    "text": "sent some data to Bob Bob wants to make sure that that data hasn't been tampered with or corrupted in",
    "start": "2742119",
    "end": "2747760"
  },
  {
    "text": "transit so as before we use a session key which we generate for AES we encrypt",
    "start": "2747760",
    "end": "2754240"
  },
  {
    "text": "our data we then use RSA and a public key to encrypt that session",
    "start": "2754240",
    "end": "2761480"
  },
  {
    "text": "key and then we also generate a hash message authentication code of the encrypted",
    "start": "2761480",
    "end": "2767559"
  },
  {
    "text": "message and because we're using a hashm we have to pass a key into it so we use the session",
    "start": "2767559",
    "end": "2772839"
  },
  {
    "text": "key so that means on the other side when we sent the message the only way that they can the recipient can check that",
    "start": "2772839",
    "end": "2779520"
  },
  {
    "text": "hash message is valid is by recovering the key so they need their private key to do that which is where the idea",
    "start": "2779520",
    "end": "2785960"
  },
  {
    "text": "authentication comes in they can only verify that that um hash is valid if they can recover the key the AES key and",
    "start": "2785960",
    "end": "2794720"
  },
  {
    "text": "then need their private key to do that so that means when we send our data",
    "start": "2794720",
    "end": "2800559"
  },
  {
    "text": "across to our recipient we've got the RSA encrypted session key we've got the AES initialization Vector we've got the",
    "start": "2800559",
    "end": "2807960"
  },
  {
    "text": "AES encrypted data and we're also sending the hashm of our encrypted",
    "start": "2807960",
    "end": "2813960"
  },
  {
    "text": "data so that's all pretty good so let's take that one step further so we've added",
    "start": "2814800",
    "end": "2820359"
  },
  {
    "start": "2815000",
    "end": "2815000"
  },
  {
    "text": "Integrity to our message we've got effective key sharing using RSA and we're using the flexibility of and the",
    "start": "2820359",
    "end": "2826480"
  },
  {
    "text": "power of AES to encrypt our message but now we want to have the ability for our recipient to be able to",
    "start": "2826480",
    "end": "2833400"
  },
  {
    "text": "prove that it was actually Alice that sent the message to him and that's where we're going to use digital",
    "start": "2833400",
    "end": "2839000"
  },
  {
    "text": "signatures so as before we generate our a session key we encrypt our data of",
    "start": "2839000",
    "end": "2844599"
  },
  {
    "text": "that session key we use oursa in the public key to encrypt that session",
    "start": "2844599",
    "end": "2850319"
  },
  {
    "text": "key we then create a hashm of the encrypted message which we've already encrypted with AES using the session key",
    "start": "2850319",
    "end": "2857040"
  },
  {
    "text": "as the hashm key and then we create a digital signature of that",
    "start": "2857040",
    "end": "2864680"
  },
  {
    "text": "hashm so we've created the hashm already we then create a digital signature using the recipient's own private",
    "start": "2864680",
    "end": "2872040"
  },
  {
    "text": "key this means when we send the data across to the recipient we have the RSA",
    "start": "2872040",
    "end": "2877359"
  },
  {
    "text": "encrypted session key we have our initialization Vector we've got our AES encrypted data we've got the hashm of",
    "start": "2877359",
    "end": "2884160"
  },
  {
    "text": "the data so that's how we're checking Integrity on the other Ends by checking the the hash and we've also created a",
    "start": "2884160",
    "end": "2890000"
  },
  {
    "text": "digital signature of that hash so when Alice sends a message to Bob Bob can be",
    "start": "2890000",
    "end": "2895160"
  },
  {
    "text": "sure that it was actually Alice that sent the message and not some other third",
    "start": "2895160",
    "end": "2900160"
  },
  {
    "text": "party so we've covered quite a lot in a short space of time there so we've covered random numbers hashing and hash",
    "start": "2902079",
    "end": "2909240"
  },
  {
    "text": "Max secure password storage AES encryption RSA encryption digital",
    "start": "2909240",
    "end": "2914720"
  },
  {
    "text": "signatures and hybrid cryptography so I'm sure you're all going to remember that by 5:00 this",
    "start": "2914720",
    "end": "2921559"
  },
  {
    "text": "afternoon so what next so you know what we've talked about today you know we we've covered a lot in an hour so really",
    "start": "2921960",
    "end": "2928359"
  },
  {
    "text": "treat this talk as the art of the possible what what can we do with the stuff that's in",
    "start": "2928359",
    "end": "2933799"
  },
  {
    "text": "net so if you are interested in using this I really do encourage you to",
    "start": "2933799",
    "end": "2939760"
  },
  {
    "start": "2936000",
    "end": "2936000"
  },
  {
    "text": "download the book it kind of mirrors what we've talked about today that book does come with a lot of sample code so",
    "start": "2939760",
    "end": "2946040"
  },
  {
    "text": "all the code Snippets I've showed you on the screen today it all comes in a solution file you can just use the code",
    "start": "2946040",
    "end": "2951079"
  },
  {
    "text": "steal it and use it in your own Solutions if you got access to plural",
    "start": "2951079",
    "end": "2957240"
  },
  {
    "text": "site say my practical cryptography and. net course covers what we've talked about in a lot more detail it talks",
    "start": "2957240",
    "end": "2962640"
  },
  {
    "text": "about the why we do a lot of this as opposed to just the how again there's lots of sample code you",
    "start": "2962640",
    "end": "2968400"
  },
  {
    "text": "can download with that course as well if you don't have access to plural site come see me afterwards and I've got some access cards which I can give",
    "start": "2968400",
    "end": "2975920"
  },
  {
    "text": "you but cryptography itself is a fascinating subject I mean when you start looking at the history of how cryptography came about",
    "start": "2975920",
    "end": "2983119"
  },
  {
    "text": "it's an absolutely fascinating subject so if you sort of want to read a bit more into it then there's some books",
    "start": "2983119",
    "end": "2988799"
  },
  {
    "text": "here that I highly recommend looking at so the first one is called the code book by Simon Singh it's a relatively short",
    "start": "2988799",
    "end": "2994119"
  },
  {
    "text": "book it's about the size of a standard novel and that covers the history from",
    "start": "2994119",
    "end": "2999319"
  },
  {
    "text": "back in the days like Mary Queen of Scots and sort of the Romans right the way through to",
    "start": "2999319",
    "end": "3005079"
  },
  {
    "text": "RSA and sort of modern digital cryptographic um protocols it's quite a good it's quite an easy read it's not",
    "start": "3005079",
    "end": "3011599"
  },
  {
    "text": "mathematical or very complicated it's you know it's written more like a novel so I highly recommend that book my",
    "start": "3011599",
    "end": "3017480"
  },
  {
    "text": "personal favorite book is a book called everyday cryptography by a guy called Keith Martin and this book split into two so",
    "start": "3017480",
    "end": "3024559"
  },
  {
    "text": "the first half goes into a lot of detail about the protocols and Primitives that we talked about today but he actually",
    "start": "3024559",
    "end": "3030119"
  },
  {
    "text": "sort of talks about how they work under the covers then the second half of the book is how they're actually applied to",
    "start": "3030119",
    "end": "3036119"
  },
  {
    "text": "real life so how sort of Wi-Fi encryption Works how SSL and TLS actually works so where we discuss",
    "start": "3036119",
    "end": "3043680"
  },
  {
    "text": "hybrid cryptography the way TLS works is very similar in how it does the key sharing handshake may not necessarily",
    "start": "3043680",
    "end": "3050079"
  },
  {
    "text": "use RSA but it's it's a very similar concept and probably the most famous",
    "start": "3050079",
    "end": "3055200"
  },
  {
    "text": "cryp cryptography book and the book that the NSA actually tried to ban back in the '90s unsuccessfully is a book by",
    "start": "3055200",
    "end": "3060599"
  },
  {
    "text": "Bruce schne called apply cryptography um this book doesn't cover AES um AES kind of came after when this",
    "start": "3060599",
    "end": "3068119"
  },
  {
    "text": "book was written it's quite a hard book to read but if you really want to get into the nitty-gritty detail of how a lot of",
    "start": "3068119",
    "end": "3074319"
  },
  {
    "text": "these algorithms work and you're not scared by a bit of maths then that book's quite good as",
    "start": "3074319",
    "end": "3080480"
  },
  {
    "text": "well so thank you very much",
    "start": "3080480",
    "end": "3087359"
  },
  {
    "text": "[Music] I'm going to be I'm going to be hanging around for a few minutes plus I'll be around the conference for the rest of",
    "start": "3089830",
    "end": "3095160"
  },
  {
    "text": "the day as on your way out I'd be very grateful if you could vote on the uh",
    "start": "3095160",
    "end": "3101440"
  },
  {
    "text": "session as well if you press the green button you are awesome thank",
    "start": "3101440",
    "end": "3107798"
  },
  {
    "text": "you",
    "start": "3112079",
    "end": "3115079"
  }
]