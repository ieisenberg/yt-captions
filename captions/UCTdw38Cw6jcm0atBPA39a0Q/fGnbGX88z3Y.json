[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "all right welcome to from program to process what happens after the compiler",
    "start": "6399",
    "end": "13200"
  },
  {
    "text": "everything all right okay okay uh my name is almesh i work uh",
    "start": "13200",
    "end": "18480"
  },
  {
    "text": "in norway in civid where we make these cool robot eyes and i mostly do cpr plus",
    "start": "18480",
    "end": "23680"
  },
  {
    "text": "there these days and i also run this website called cppquist.org which is um yeah quiz site",
    "start": "23680",
    "end": "31039"
  },
  {
    "text": "and if you're into super class quizzes there will be a zebra plus quiz during the party this evening",
    "start": "31039",
    "end": "36880"
  },
  {
    "start": "36000",
    "end": "332000"
  },
  {
    "text": "and i'll i also hang out on twitter quite a bit with his various accounts so you might find me there later if you",
    "start": "36880",
    "end": "42840"
  },
  {
    "text": "want but we're not here to talk about that we're here to talk about what happens after the compiler and to figure",
    "start": "42840",
    "end": "49920"
  },
  {
    "text": "out what happens after the compiler let's start with a simple function and the simplest function i could think",
    "start": "49920",
    "end": "56480"
  },
  {
    "text": "of was just this one int main return one and before we start looking at it uh",
    "start": "56480",
    "end": "63520"
  },
  {
    "text": "i have to say this talk is specifically about linux so um i'm running this these lights on a mac",
    "start": "63520",
    "end": "70080"
  },
  {
    "text": "it's probably quite similar then i'm sure there's something of the kind on windows as well but i don't really know",
    "start": "70080",
    "end": "75439"
  },
  {
    "text": "but this is specifically about linux and specifically about x86 64.",
    "start": "75439",
    "end": "80799"
  },
  {
    "text": "uh if anything is unclear on the slides please ask during the talk while the slides are still up there but if you",
    "start": "80799",
    "end": "86320"
  },
  {
    "text": "have any questions of the kind more i would like to know some more about this and like i'm also interested in",
    "start": "86320",
    "end": "92159"
  },
  {
    "text": "them please hold those to the end because chances are that we will get to them during the talk",
    "start": "92159",
    "end": "98560"
  },
  {
    "text": "who has used compiler explorer yeah quite a lot of people have used it",
    "start": "98560",
    "end": "103759"
  },
  {
    "text": "and yeah we use it quite a lot so to figure out what goes on with our code so i just i took my function here i pasted",
    "start": "103759",
    "end": "109759"
  },
  {
    "text": "it on compiler explorer and it uh it gave me this so there's gonna be a bunch of assembly",
    "start": "109759",
    "end": "115600"
  },
  {
    "text": "in this talk but uh it's like only like two or three instructions that we're actually interested in we're gonna skip the rest",
    "start": "115600",
    "end": "121280"
  },
  {
    "text": "and i'm gonna explain the things we need so if you don't have any assembly background yeah you don't need it so",
    "start": "121280",
    "end": "126399"
  },
  {
    "text": "don't worry this function there's some just some stacked bookkeeping stuff at the beginning and at the end",
    "start": "126399",
    "end": "132720"
  },
  {
    "text": "and the only interesting thing in this function is this single instruction this is the entire body of this function it",
    "start": "132720",
    "end": "138640"
  },
  {
    "text": "says move eax 1 and this means to put",
    "start": "138640",
    "end": "143760"
  },
  {
    "text": "1 into the register called eax and e ax is where you're supposed to put",
    "start": "143760",
    "end": "148959"
  },
  {
    "text": "your return value so this is very simple stuff if you compile this you link it and you",
    "start": "148959",
    "end": "155680"
  },
  {
    "text": "assume that works and it gets loaded some somehow and like the process starts up and it shuts down and everything",
    "start": "155680",
    "end": "162319"
  },
  {
    "text": "it's there's nothing surprising here this is gonna exit with one and there's really nothing interesting in the",
    "start": "162319",
    "end": "168000"
  },
  {
    "text": "function itself but i think the function is getting a bit complicated so i figured i'd",
    "start": "168000",
    "end": "174800"
  },
  {
    "text": "refactor it a bit and extract this compute function to compute the return value",
    "start": "174800",
    "end": "180480"
  },
  {
    "text": "so now we have the main function which calls compute and then we have the compute function which computes this value one",
    "start": "180480",
    "end": "187519"
  },
  {
    "text": "and then i just pasted this on compiler explorer again to see like what's going on behind the scenes",
    "start": "187519",
    "end": "194159"
  },
  {
    "text": "well it gave me this gave me an assembly for the compute and for the main function",
    "start": "194159",
    "end": "199519"
  },
  {
    "text": "the compute function is exactly identical to the main function we saw on the previous slide it has the same",
    "start": "199519",
    "end": "205200"
  },
  {
    "text": "declaration the same body so it gets just the same assembly code as well",
    "start": "205200",
    "end": "210799"
  },
  {
    "text": "the interesting part of it is where it puts one in the return register",
    "start": "210799",
    "end": "216319"
  },
  {
    "text": "the main function again has all this stack stuff that we don't care about right now and then a call to compute so",
    "start": "216560",
    "end": "222879"
  },
  {
    "text": "it's quite simple but what what's how do you call computes",
    "start": "222879",
    "end": "228400"
  },
  {
    "text": "right you're a cpu you don't know anything about names or functions or labels or anything like that call",
    "start": "228400",
    "end": "233920"
  },
  {
    "text": "compute that doesn't mean anything to a cpu so how does the cpu actually execute",
    "start": "233920",
    "end": "239280"
  },
  {
    "text": "your stuff so here's a very simplified illustration but i just like put seven dummy",
    "start": "239280",
    "end": "245040"
  },
  {
    "text": "instructions in memory here uh instruction one instruction two etcetera and there's one actual interaction in here or kind of actual",
    "start": "245040",
    "end": "252640"
  },
  {
    "text": "and then here's the memory address at memory address zero we have instruction one at address four we have instruction",
    "start": "252640",
    "end": "257919"
  },
  {
    "text": "two etc etc and then over here is a register in the cpu which is called the instruction",
    "start": "257919",
    "end": "263680"
  },
  {
    "text": "pointer rip also commonly referred to as the program counter and that is just a 64-bit value",
    "start": "263680",
    "end": "270080"
  },
  {
    "text": "which just says well this is the next instruction i'm going to execute so it's just pointing at the next instruction",
    "start": "270080",
    "end": "276400"
  },
  {
    "text": "and when i'm going to execute instruction 1 i first just pump the instruction pointer to be ready for the",
    "start": "276400",
    "end": "282080"
  },
  {
    "text": "next one and then i go do whatever instruction one is so that might be move or add or something whatever right",
    "start": "282080",
    "end": "289919"
  },
  {
    "text": "then we bump the instruction pointer we execute instruction two we bump the instruction pointer and then we do the",
    "start": "289919",
    "end": "296240"
  },
  {
    "text": "instruction three which is a jump so it says jump to 20 and that just updates the instruction pointer to okay",
    "start": "296240",
    "end": "303039"
  },
  {
    "text": "i'm going to point over here instead and then we bump the instruction pointer and execute instruction 6 and so on",
    "start": "303039",
    "end": "310960"
  },
  {
    "text": "so it's very very simple stuff that the cpu can do you can it knows about registers and memory addresses and you",
    "start": "310960",
    "end": "316000"
  },
  {
    "text": "can tell it to point to some other place in memory but the cpu has no concept of function",
    "start": "316000",
    "end": "321039"
  },
  {
    "text": "names right so what is it compiler explorer does not want us to know",
    "start": "321039",
    "end": "327120"
  },
  {
    "text": "that's what we're going to find out in this talk",
    "start": "327120",
    "end": "331280"
  },
  {
    "text": "so let's compile this program ourselves and not link it just compile",
    "start": "333840",
    "end": "339520"
  },
  {
    "text": "the object file so compile the object file like this and then i have a main.o",
    "start": "339520",
    "end": "344720"
  },
  {
    "text": "so let's just have a look at main.o let's just hexdump main.o and these are the bytes it's just an",
    "start": "344720",
    "end": "350560"
  },
  {
    "text": "object file just a bunch of bytes and if if anyone can read this stuff then you don't need to be in this room",
    "start": "350560",
    "end": "356080"
  },
  {
    "text": "right but there is there is some stuff we can read out here there's this 7f but then we have the",
    "start": "356080",
    "end": "363039"
  },
  {
    "text": "ascii values for e l and f four five four c four six that's e l f in ascii",
    "start": "363039",
    "end": "368960"
  },
  {
    "text": "and those e l f that stands for the executable and linkable format and that's the binary",
    "start": "368960",
    "end": "374319"
  },
  {
    "text": "format you have on linux for object files binaries libraries stuff like that",
    "start": "374319",
    "end": "379440"
  },
  {
    "text": "and other unixes as well it comes from i think it's from solaris in the 80s or something it's it's been here for a long",
    "start": "379440",
    "end": "385680"
  },
  {
    "text": "time but hex dumping is not the way to look at an object file there's a much better",
    "start": "385680",
    "end": "390880"
  },
  {
    "text": "tool called opt jump i gave it the options w for white outputs capital d for disassemble",
    "start": "390880",
    "end": "397280"
  },
  {
    "text": "everything and r for show relocations which is something we'll get back to and then i said please use intel assembly",
    "start": "397280",
    "end": "403680"
  },
  {
    "text": "syntax because i like it better and most people seem to prefer that syntax these days",
    "start": "403680",
    "end": "409919"
  },
  {
    "text": "so let's object this file and then it goes disassembly of section",
    "start": "409919",
    "end": "416560"
  },
  {
    "text": "text that's the first thing it says and the text section is where the code is so all the machine code gets dumped into",
    "start": "416560",
    "end": "422720"
  },
  {
    "text": "the text section and you have other sections like data sections you have some headers you have your debug symbols",
    "start": "422720",
    "end": "428479"
  },
  {
    "text": "your symbol table lots of sections but now we're going to look at the machine code and all the machine codes lives in this dot text",
    "start": "428479",
    "end": "435199"
  },
  {
    "text": "section so here again we see the compute function and now we can actually see these are",
    "start": "435199",
    "end": "441680"
  },
  {
    "text": "the bytes of the compute function so everything is just bytes right so here we have these bytes here and if",
    "start": "441680",
    "end": "448080"
  },
  {
    "text": "we look down at the hex dump we can see well f3 0f1 e so here is our compute",
    "start": "448080",
    "end": "454080"
  },
  {
    "text": "function in the actual file and object is just grouping these bytes by instructions we get one instruction",
    "start": "454080",
    "end": "460800"
  },
  {
    "text": "on one line and the assembly equivalent to the right so f3 0f1 efa is the android 64",
    "start": "460800",
    "end": "467520"
  },
  {
    "text": "instruction and so on and then it puts down the memory address here so at address 0 we have this",
    "start": "467520",
    "end": "474160"
  },
  {
    "text": "instruction at address 4. we have this one at address 5 we have this oh and so on so that's",
    "start": "474160",
    "end": "480000"
  },
  {
    "text": "how to see to look at the output from object",
    "start": "480000",
    "end": "484560"
  },
  {
    "text": "so here is our move eax one again the thing that puts one into the return register and",
    "start": "485199",
    "end": "491360"
  },
  {
    "text": "the instruction the op code here is b8 that's the instruction that says put an immediate value into this register take",
    "start": "491360",
    "end": "497199"
  },
  {
    "text": "out like a normal number and put it into eax and the number we're gonna put is",
    "start": "497199",
    "end": "504000"
  },
  {
    "text": "this here so why isn't the one over at this end right it's just a one it's not like",
    "start": "504000",
    "end": "509599"
  },
  {
    "text": "a huge number and that's because x86 which i'm on here is a little indian architecture so we take the least",
    "start": "509599",
    "end": "516240"
  },
  {
    "text": "significant bytes and put it at the lowest memory address so this is address 9 a b and c so we put the smallest byte",
    "start": "516240",
    "end": "523360"
  },
  {
    "text": "here at the address a um",
    "start": "523360",
    "end": "528399"
  },
  {
    "text": "so that's how you put that's how you look at the machine code for putting one",
    "start": "528399",
    "end": "533839"
  },
  {
    "text": "into eax then we have the main function and as we've seen before there's a bunch of",
    "start": "533839",
    "end": "539600"
  },
  {
    "text": "stack bookkeeping stuff which we're not interested in and there's a little curiosity here it's",
    "start": "539600",
    "end": "544959"
  },
  {
    "text": "putting zero into eax and that's because in c and c plus if you don't return from main you don't you",
    "start": "544959",
    "end": "551680"
  },
  {
    "text": "forget the right return it's gonna it's supposed to return zero for you automatically so that's how you get that",
    "start": "551680",
    "end": "557200"
  },
  {
    "text": "done it just puts movie x0 at the beginning so then if you forget to actually call something or",
    "start": "557200",
    "end": "562240"
  },
  {
    "text": "return something it will already be zero and that of course gets optimized away",
    "start": "562240",
    "end": "567440"
  },
  {
    "text": "everything i'm doing here is on o0 and now finally we get to this call thing that we were running like how can",
    "start": "567440",
    "end": "573680"
  },
  {
    "text": "you call compute and e8 here the op code is",
    "start": "573680",
    "end": "580480"
  },
  {
    "text": "the call instruction and then we're going to call whatever operand you give it which is zero",
    "start": "580480",
    "end": "586240"
  },
  {
    "text": "that's the address of compute but that's just a coincidence",
    "start": "586240",
    "end": "591440"
  },
  {
    "text": "this is this doesn't actually work uh it's just a coincidence that we have these zeros here because the compiler",
    "start": "591440",
    "end": "596880"
  },
  {
    "text": "can't actually know what the value to put here the compiler doesn't know where compute lives there's it can't answer",
    "start": "596880",
    "end": "603920"
  },
  {
    "text": "this question and the reason is uh in this diagram i'm going to show this many times during the",
    "start": "603920",
    "end": "610240"
  },
  {
    "text": "talk uh it illustrates that you have one object file over here with a header a text section a data section and a",
    "start": "610240",
    "end": "616800"
  },
  {
    "text": "bunch of other sections and another object file down here file 2.0 which probably then came from file2.c",
    "start": "616800",
    "end": "623839"
  },
  {
    "text": "with some text and data and some various sections and then the linker is going to combine these objects files into one",
    "start": "623839",
    "end": "630160"
  },
  {
    "text": "executable so it's going to take all the text sections and stick them together here and all the data sections and stick",
    "start": "630160",
    "end": "635200"
  },
  {
    "text": "them together in the data section so any addresses that you have in the",
    "start": "635200",
    "end": "640640"
  },
  {
    "text": "object file they will be different in the executable and then finally this executable gets",
    "start": "640640",
    "end": "646560"
  },
  {
    "text": "loaded in memory somewhere so you have some memory down here and oops here's our executable and some more memory and",
    "start": "646560",
    "end": "652320"
  },
  {
    "text": "it's impossible for the compiler to know where this uh where things end up in the end",
    "start": "652320",
    "end": "659040"
  },
  {
    "text": "so the compiler has just gone well i'm gonna put e8 for for the call instruction but then i'll just put zeros",
    "start": "659040",
    "end": "664079"
  },
  {
    "text": "because i don't know and i'll just put down a note so someone coming after me can you please fill in the actual",
    "start": "664079",
    "end": "669680"
  },
  {
    "text": "address here so it's put down this little note which is something about compute and that's called a relocation",
    "start": "669680",
    "end": "677680"
  },
  {
    "start": "677000",
    "end": "896000"
  },
  {
    "text": "and relocations are the nodes that the compiler puts down for someone else to fix up their",
    "start": "677920",
    "end": "683600"
  },
  {
    "text": "actual addresses and relocations is one of the main topics of this talk",
    "start": "683600",
    "end": "690399"
  },
  {
    "text": "so this is exactly the same as from the previous slide just copied it over here so we can see again the object output",
    "start": "690640",
    "end": "696640"
  },
  {
    "text": "for for main.o still not an executable just the object file",
    "start": "696640",
    "end": "703839"
  },
  {
    "text": "and the trick is then that we don't know where stuff is going to get loaded in memory",
    "start": "704079",
    "end": "709519"
  },
  {
    "text": "but the linker knows where in the executable everything will be relative to each other so the trick we can do is",
    "start": "709519",
    "end": "715440"
  },
  {
    "text": "to use a relative call so the the e8 here uh the call instructions instead of",
    "start": "715440",
    "end": "721440"
  },
  {
    "text": "saying jump here it's going to say jump this amount of bytes this way or that way in memory from where we are right",
    "start": "721440",
    "end": "727920"
  },
  {
    "text": "now so that that's that's how we kind of survive loading um but",
    "start": "727920",
    "end": "733839"
  },
  {
    "text": "then we have to see here in the in the executable if we can figure out",
    "start": "733839",
    "end": "739440"
  },
  {
    "text": "the correct offset to you to have from the execute in the executable here",
    "start": "739440",
    "end": "745839"
  },
  {
    "text": "um so these are just uh just just the bytes",
    "start": "746560",
    "end": "751760"
  },
  {
    "text": "in the text section so there's no room for these nodes this node is isn't actually in here this node is just op",
    "start": "751760",
    "end": "757360"
  },
  {
    "text": "jump uh showing it to us so in here in the actual code we only have room for the call instruction and the operand",
    "start": "757360",
    "end": "764240"
  },
  {
    "text": "that's all we have room for in here uh and the note is off in a different section",
    "start": "764240",
    "end": "770000"
  },
  {
    "text": "and the read elf is a nice way to look at uh at that so if you say read elf dash r to show the relocations in an",
    "start": "770000",
    "end": "777040"
  },
  {
    "text": "object file and then w for white outputs we get a list of all the relocations all",
    "start": "777040",
    "end": "782160"
  },
  {
    "text": "the things that the compiler didn't figure out has an entry in this table and we only have one so there's only one entry in my",
    "start": "782160",
    "end": "788639"
  },
  {
    "text": "table here but it says here relocation offset one d",
    "start": "788639",
    "end": "794320"
  },
  {
    "text": "that means at one d so here one c so that means here one d there's a relocation to be done",
    "start": "794320",
    "end": "800720"
  },
  {
    "text": "and then it has some information about what kind of relocation it is and the linker doesn't have to understand assembly or machine code or",
    "start": "800720",
    "end": "808000"
  },
  {
    "text": "anything the link it just knows at 1d i have to fix these four bytes to point to",
    "start": "808000",
    "end": "813040"
  },
  {
    "text": "the right place that's all it has to know and then what value or what's the name",
    "start": "813040",
    "end": "819120"
  },
  {
    "text": "we're going to resolve here and that's compute minus 4 for some reason and then you can see up here object has",
    "start": "819120",
    "end": "825519"
  },
  {
    "text": "just taken this information from the relocation section and just inlined it here in this output just to to help us",
    "start": "825519",
    "end": "831040"
  },
  {
    "text": "to see that there's a relocation here but there is no re there is no relocation inside the actual text section",
    "start": "831040",
    "end": "838399"
  },
  {
    "text": "so what's going on with this minus four well let's let's try to do this relocation manually",
    "start": "838560",
    "end": "844720"
  },
  {
    "text": "just by looking at the object file let's see if we can do the relocation ourselves",
    "start": "844720",
    "end": "850480"
  },
  {
    "text": "so we're about to execute this call instruction so you remember what happens first well we bump the instruction",
    "start": "850480",
    "end": "855760"
  },
  {
    "text": "pointer down here and then we execute it so let's let's resolve the relocation so",
    "start": "855760",
    "end": "862240"
  },
  {
    "text": "the relocation is at one d compute is at zero so we have to jump from one d to zero zeros that's minus",
    "start": "862240",
    "end": "868480"
  },
  {
    "text": "one d to compute but the instruction pointer is already going to be down here",
    "start": "868480",
    "end": "873920"
  },
  {
    "text": "so we have to compensate for these four bytes that since the insertion pointer is already",
    "start": "873920",
    "end": "879040"
  },
  {
    "text": "in the future right so we have to go minus four and then minus one d to get to where",
    "start": "879040",
    "end": "885199"
  },
  {
    "text": "compute is so minus the minus 1d minus 4 that's minus 21.",
    "start": "885199",
    "end": "892399"
  },
  {
    "text": "that's how to do a relocation manually let's see what the linker does with this",
    "start": "892399",
    "end": "898639"
  },
  {
    "start": "896000",
    "end": "1083000"
  },
  {
    "text": "now let's link this now we take the object file and we link it into an executable called main and then we just object main with uh the same options",
    "start": "898639",
    "end": "906079"
  },
  {
    "text": "that we had before and we see basically the same similar thing we've seen before but the",
    "start": "906079",
    "end": "911440"
  },
  {
    "text": "addresses have shifted a bit here it doesn't start on zero anymore it starts at 11 29 because when you make an",
    "start": "911440",
    "end": "916560"
  },
  {
    "text": "executable there's more stuff going into it like some startup routines and stuff so it has shifted a bit and i've just",
    "start": "916560",
    "end": "922160"
  },
  {
    "text": "omitted a bunch of stuff here so we can just look at our two functions again",
    "start": "922160",
    "end": "927199"
  },
  {
    "text": "and here's our call instructions again our e8 the relative call and you can see the relocation is now gone",
    "start": "927199",
    "end": "934480"
  },
  {
    "text": "and open jump is being a bit helpful here and it's saying call 1129. so that's where compute lives",
    "start": "934480",
    "end": "941839"
  },
  {
    "text": "but if you remember e8 is a relative call so this is not 1129. this is object is",
    "start": "941839",
    "end": "947199"
  },
  {
    "text": "just showing us what it will be when you compute the actual address so this is still a relative address this is just op",
    "start": "947199",
    "end": "953279"
  },
  {
    "text": "jump being helpful and showing what it will be when you turn it into an absolute address",
    "start": "953279",
    "end": "960880"
  },
  {
    "text": "so we got minus 21 and the linker got dfff ffff",
    "start": "960959",
    "end": "967040"
  },
  {
    "text": "and what does that mean well we are in a little engine architecture so if we just swap the",
    "start": "967040",
    "end": "972399"
  },
  {
    "text": "bytes around so we get a big endian notation which we're more used to then",
    "start": "972399",
    "end": "977920"
  },
  {
    "text": "uh it's a bit easier because this is a signed integer and the way you represent a signed integer is to use",
    "start": "977920",
    "end": "983199"
  },
  {
    "text": "two's complement so if you take this number and run it through two's complement there's our minus 21 that we saw earlier",
    "start": "983199",
    "end": "991279"
  },
  {
    "text": "so the instruction pointer is going to be at 11 for a and then we're gonna jump",
    "start": "991279",
    "end": "996639"
  },
  {
    "text": "-21 up to 1129. and indeed if now now we have compiled",
    "start": "996639",
    "end": "1003120"
  },
  {
    "text": "and we have linked everything let's try to run our program finally and it exits with one which is what we expected it to",
    "start": "1003120",
    "end": "1009680"
  },
  {
    "text": "do but when we were looking at just the object",
    "start": "1009680",
    "end": "1015120"
  },
  {
    "text": "file we figured out it was 21. we 121 we didn't know what the linker knows we",
    "start": "1015120",
    "end": "1021120"
  },
  {
    "text": "just knew this just by looking at the object file which the compiler knows everything about",
    "start": "1021120",
    "end": "1027600"
  },
  {
    "text": "and in fact i said the linker is going to reorder these sections so it's going to like squash all the text sections in one",
    "start": "1029520",
    "end": "1034959"
  },
  {
    "text": "place all the data sections in one place but the linker is not going to mess around with each section so every",
    "start": "1034959",
    "end": "1040720"
  },
  {
    "text": "section stays intact internally any relative addresses inside of a section are still the same in the",
    "start": "1040720",
    "end": "1046160"
  },
  {
    "text": "executable and just between the sections that that is not true so the compiler actually knew all along",
    "start": "1046160",
    "end": "1052880"
  },
  {
    "text": "that it would be -21 to get to compute to this compute function",
    "start": "1052880",
    "end": "1058559"
  },
  {
    "text": "but by the time we get through the linker and to dynamic linking",
    "start": "1058559",
    "end": "1063840"
  },
  {
    "text": "in the general case we can no longer be so sure that this is the compute function that we're going to call and",
    "start": "1063840",
    "end": "1069120"
  },
  {
    "text": "there might be some other compute function that we actually want to call in the end so in the general case the",
    "start": "1069120",
    "end": "1074960"
  },
  {
    "text": "compiler just has to leave a relocation here just to be sure in case it's not actually these compute functions that we want in the end",
    "start": "1074960",
    "end": "1082400"
  },
  {
    "start": "1083000",
    "end": "1118000"
  },
  {
    "text": "so what we can do then let's let's try to make it static let's give it internal linkage so this function is no longer",
    "start": "1084080",
    "end": "1089280"
  },
  {
    "text": "visible outside of this compilation unit we don't get any symbols for it that the linker can mess around with",
    "start": "1089280",
    "end": "1096160"
  },
  {
    "text": "so now static in compute internal linkage and main is going to call it we compile and",
    "start": "1096160",
    "end": "1101679"
  },
  {
    "text": "object this and then we can see the relocation is gone so just in the object file now the",
    "start": "1101679",
    "end": "1107039"
  },
  {
    "text": "compiler went okay this is safe i can i know this it's minus 21. it's not going to change it's always going to be this",
    "start": "1107039",
    "end": "1113200"
  },
  {
    "text": "compute function not some other one so i can put minus 21 here",
    "start": "1113200",
    "end": "1117919"
  },
  {
    "start": "1118000",
    "end": "1235000"
  },
  {
    "text": "right so then we know enough about relocations to do them manually and we can go take a job as a link or somewhere",
    "start": "1121440",
    "end": "1128880"
  },
  {
    "text": "but what if there are more files okay if it if it's that hard to call a function in the same c file in the same",
    "start": "1128880",
    "end": "1136000"
  },
  {
    "text": "compilation unit how hard is it if you bring more files into this picture",
    "start": "1136000",
    "end": "1141840"
  },
  {
    "text": "so here's the same program again we have main here in main.c like before then i extracted this compute function into a",
    "start": "1142559",
    "end": "1148559"
  },
  {
    "text": "new file called library.c and this will get compiled separately and then i just have a header file",
    "start": "1148559",
    "end": "1154559"
  },
  {
    "text": "before we declare it so if you compile the library first that's the least interesting interesting",
    "start": "1154559",
    "end": "1160880"
  },
  {
    "text": "part because that's just this function which moves one into eix",
    "start": "1160880",
    "end": "1165840"
  },
  {
    "text": "so it's it's the same as before what about main so main is the one that calls the other function how this thing how do",
    "start": "1166080",
    "end": "1171840"
  },
  {
    "text": "things change when we use separate files so here is main looks very familiar",
    "start": "1171840",
    "end": "1178640"
  },
  {
    "text": "here's the cool thing with the relocation it looks very familiar and in fact it is identical",
    "start": "1178640",
    "end": "1184240"
  },
  {
    "text": "so if you have one of your many object files it doesn't change it's the same thing so we don't have to learn anything",
    "start": "1184240",
    "end": "1189280"
  },
  {
    "text": "new that's wonderful and why is that well in either of these",
    "start": "1189280",
    "end": "1194960"
  },
  {
    "text": "cases one or more source files the compiler always knows",
    "start": "1194960",
    "end": "1200559"
  },
  {
    "text": "internal distances here but it doesn't know between the sections um and if you have two objects well it's",
    "start": "1200799",
    "end": "1207679"
  },
  {
    "text": "the same there's it doesn't know where things are gonna end up relative to each other so the compiler doesn't know in either",
    "start": "1207679",
    "end": "1213679"
  },
  {
    "text": "case and in either case the linker knows because the linker is the one linking everything together making one executable so the linker is the one who",
    "start": "1213679",
    "end": "1221120"
  },
  {
    "text": "decides where everything gets laid out and the linker being the one that writes this file is also able to change stuff",
    "start": "1221120",
    "end": "1226559"
  },
  {
    "text": "while it's writing it so that linker has the power to fix up these relocations and it has the knowledge to do to do so",
    "start": "1226559",
    "end": "1232000"
  },
  {
    "text": "as well so",
    "start": "1232000",
    "end": "1237120"
  },
  {
    "start": "1235000",
    "end": "1301000"
  },
  {
    "text": "let's try to link our two object files the library.c and main.c were compiled into these object files we'll link them",
    "start": "1237120",
    "end": "1243600"
  },
  {
    "text": "and object them and here we have our functions again they're just in the other order than",
    "start": "1243600",
    "end": "1249919"
  },
  {
    "text": "they were before and just uh happened to be so um and we can see that compute is the same",
    "start": "1249919",
    "end": "1256320"
  },
  {
    "text": "and we can see that the relocation in main again has been resolved by the linker and this time",
    "start": "1256320",
    "end": "1263200"
  },
  {
    "text": "well when we're going to call we're going to call 2. so insertion pointer is going to be down here",
    "start": "1263200",
    "end": "1268640"
  },
  {
    "text": "at 11 3b then we add 2 and we get up to 11 3d which is the address of compute",
    "start": "1268640",
    "end": "1275679"
  },
  {
    "text": "so when you're jumping forwards in your virtual address space it's a lot easier to read these relocations because you",
    "start": "1275679",
    "end": "1282080"
  },
  {
    "text": "don't have to do the two's complement thing to understand the number so it's because these happen to end up",
    "start": "1282080",
    "end": "1288400"
  },
  {
    "text": "in this order and in fact if i if i switch around the order of these object files here as arguments to the",
    "start": "1288400",
    "end": "1293919"
  },
  {
    "text": "linker they will actually also end up in a different order at least on my linux",
    "start": "1293919",
    "end": "1298960"
  },
  {
    "text": "system so that's functions that's how you can",
    "start": "1298960",
    "end": "1304159"
  },
  {
    "start": "1301000",
    "end": "1645000"
  },
  {
    "text": "jump to functions or call functions what about data okay we have seen for functions how the",
    "start": "1304159",
    "end": "1309679"
  },
  {
    "text": "cpu just goes one instruction at the time and then okay jump over here change insertion pointer to point over here and",
    "start": "1309679",
    "end": "1315679"
  },
  {
    "text": "just keep going like this and then we use relocations to figure out where stuff actually ends up in the",
    "start": "1315679",
    "end": "1321919"
  },
  {
    "text": "end but what do we do for data how can we find data",
    "start": "1321919",
    "end": "1327039"
  },
  {
    "text": "so there are many types of data the first type of data i'm going to talk about is function parameters so i have this",
    "start": "1328400",
    "end": "1334640"
  },
  {
    "text": "function here called arguments because you have to give it some arguments you give it a and b and it returns a plus b",
    "start": "1334640",
    "end": "1342559"
  },
  {
    "text": "um how do i get those variables into that function well",
    "start": "1342559",
    "end": "1348240"
  },
  {
    "text": "on any system there's a calling convention that specifies how to get stuff in and out of functions and on my",
    "start": "1348240",
    "end": "1353760"
  },
  {
    "text": "linux and i think also on my mac and most unixes use the system v 64 api which specifies how",
    "start": "1353760",
    "end": "1361039"
  },
  {
    "text": "to do this and windows has one which is very similar and they both say if you're going to pass a couple of ins just put",
    "start": "1361039",
    "end": "1367520"
  },
  {
    "text": "them in these very specific registers and that's really cool because if i'm going to call this function i'm already",
    "start": "1367520",
    "end": "1373600"
  },
  {
    "text": "using some data i'm computing some stuff on the cpu in some registers and i can just make sure that my my two arguments",
    "start": "1373600",
    "end": "1379919"
  },
  {
    "text": "are now in these two specific registers and then i just jump over to this function and it just keeps computing on",
    "start": "1379919",
    "end": "1385120"
  },
  {
    "text": "those registers i don't have to fit my arguments in memory and then arguments have to read them out again and all of",
    "start": "1385120",
    "end": "1390559"
  },
  {
    "text": "that so we can just stick stuff in registers and specifically i'm going to take the first two ins and fit them in rdi and rsi",
    "start": "1390559",
    "end": "1397760"
  },
  {
    "text": "because that's what the call information says so let's compile and dump this",
    "start": "1397760",
    "end": "1404320"
  },
  {
    "text": "and i'm not going to explain all of this just going to say here it is picking those values out from",
    "start": "1404320",
    "end": "1411679"
  },
  {
    "text": "edi and esi which is what the calling convention told me to do",
    "start": "1411679",
    "end": "1416720"
  },
  {
    "text": "and when i'm gonna return i'll just add these two numbers together and add",
    "start": "1416720",
    "end": "1424000"
  },
  {
    "text": "will leave the result in the first operand so add will take eax plus edx store it in eax",
    "start": "1424000",
    "end": "1429760"
  },
  {
    "text": "and eax as we mentioned also before is the return register so how do you get surf auto functions you just leave them in",
    "start": "1429760",
    "end": "1436240"
  },
  {
    "text": "eax and then the caller can just pick up from there and start like keep computing on that value which is now in that",
    "start": "1436240",
    "end": "1441919"
  },
  {
    "text": "register so for stuff like this there is no relocations needed nothing complicated",
    "start": "1441919",
    "end": "1447360"
  },
  {
    "text": "no no addresses and anything but that of course only works",
    "start": "1447360",
    "end": "1452960"
  },
  {
    "text": "for small things like ins all right we only have this many registers and we only have this big register so if you",
    "start": "1452960",
    "end": "1458720"
  },
  {
    "text": "have like more than six ins or something big that of course doesn't work",
    "start": "1458720",
    "end": "1464399"
  },
  {
    "text": "so what if we make this other function it still takes an in that's the first one but then we take a big thing so",
    "start": "1464720",
    "end": "1470720"
  },
  {
    "text": "here's just some struct which is too big to fit in the registers don't care about what it's like it's just some stretch",
    "start": "1470720",
    "end": "1476159"
  },
  {
    "text": "and it has a member i so i'm going to return a plus b dot i so this i member",
    "start": "1476159",
    "end": "1481440"
  },
  {
    "text": "of this big thing extract and then i compile and object this and",
    "start": "1481440",
    "end": "1487360"
  },
  {
    "text": "we can see that uh the parameter a is still in edi just like before just use a register to get",
    "start": "1487360",
    "end": "1493360"
  },
  {
    "text": "the int in there but getting to this b dot i that's a bit",
    "start": "1493360",
    "end": "1498480"
  },
  {
    "text": "more complicated so on x86 the stack is growing downwards",
    "start": "1498480",
    "end": "1503840"
  },
  {
    "text": "so if you have like big addresses up here small addresses down here the stack is growing down like this and by the time we get to this line then",
    "start": "1503840",
    "end": "1510960"
  },
  {
    "text": "rbp that's the base pointer or frame pointer it's going to point to here's my part of the stack so the stack has been",
    "start": "1510960",
    "end": "1517279"
  },
  {
    "text": "growing down like this and now it's our turn here is our start of the stack this is our part rbp",
    "start": "1517279",
    "end": "1524240"
  },
  {
    "text": "and then i'm going to add 30. but since the stack is going downwards right then when you add 30 you're gonna",
    "start": "1524240",
    "end": "1529919"
  },
  {
    "text": "go back into the callers stack frame and that's because when when you want to",
    "start": "1529919",
    "end": "1536320"
  },
  {
    "text": "pass something into a function which doesn't fit in the register you just push it on the stack before calling the function so then the compiler knows due",
    "start": "1536320",
    "end": "1543279"
  },
  {
    "text": "to the calling convention where the big thing is going to be on the stack and it also knows the layout of big thing",
    "start": "1543279",
    "end": "1549679"
  },
  {
    "text": "because it will have had to see the definition of big thing in order to take it by value",
    "start": "1549679",
    "end": "1555440"
  },
  {
    "text": "so it knows where in big thing does dot i actually live so then it can figure out well",
    "start": "1555440",
    "end": "1560960"
  },
  {
    "text": "our start stack starts here our part of the text starts here so big big thing is going to be there and then i is here so",
    "start": "1560960",
    "end": "1566720"
  },
  {
    "text": "plus 30 to get up to that the same is for return values if it's uh",
    "start": "1566720",
    "end": "1572000"
  },
  {
    "text": "too big you put it on the stack so again all addresses are relative to",
    "start": "1572000",
    "end": "1577360"
  },
  {
    "text": "the stack which just grows dynamically you don't have to think about addresses or relocations or where our stuff in memory or anything like that it's just",
    "start": "1577360",
    "end": "1583520"
  },
  {
    "text": "very simple no relocations no linker involved in this",
    "start": "1583520",
    "end": "1588320"
  },
  {
    "text": "so that's arguments and return values what about local variables so here we have local variable",
    "start": "1589760",
    "end": "1595840"
  },
  {
    "text": "result which we set to 1 and then return it and we compile and dump it as we've done many times now",
    "start": "1595840",
    "end": "1602880"
  },
  {
    "text": "and here's the assembly and again we're going to move",
    "start": "1602880",
    "end": "1608320"
  },
  {
    "text": "we've seen this before move one into something so now we're going to move it into a local variable",
    "start": "1608320",
    "end": "1614320"
  },
  {
    "text": "and this local variable lives at rbp this beginning our stack frame minus four so now again we have rbp here this",
    "start": "1614320",
    "end": "1621600"
  },
  {
    "text": "is our part of the stack rbp pointing here and then it's just the compiler just decided we'll put this local",
    "start": "1621600",
    "end": "1626640"
  },
  {
    "text": "variable in here in our stack frame so local variables again they just go in your stack frame and everything is",
    "start": "1626640",
    "end": "1633760"
  },
  {
    "text": "relative again to the top of the stack so local variables are also simple no relocations nothing complicated with",
    "start": "1633760",
    "end": "1639440"
  },
  {
    "text": "addresses or the link or anything so it's all data simple",
    "start": "1639440",
    "end": "1645760"
  },
  {
    "start": "1645000",
    "end": "1880000"
  },
  {
    "text": "there's a hint on the this slide is there is there any type of data that we",
    "start": "1646240",
    "end": "1651360"
  },
  {
    "text": "haven't talked about i think i heard someone say globals",
    "start": "1651360",
    "end": "1658799"
  },
  {
    "text": "and that's correct globals they are not so easy but we shouldn't use globals right",
    "start": "1658799",
    "end": "1665279"
  },
  {
    "text": "but we have some globals we have we have our logger maybe or some single tony stuff",
    "start": "1665279",
    "end": "1670640"
  },
  {
    "text": "or some maybe less noble reasons lying around and uh what's what's your",
    "start": "1670640",
    "end": "1676159"
  },
  {
    "text": "favorite global yes that's exactly that's what i was going to say as well stood c out that's",
    "start": "1676159",
    "end": "1682799"
  },
  {
    "text": "my favorite global as well uh so yeah globals they happen all the time they're interesting and we have to",
    "start": "1682799",
    "end": "1688240"
  },
  {
    "text": "talk about globals and the correct term for global is that it's an object with a static storage",
    "start": "1688240",
    "end": "1694399"
  },
  {
    "text": "duration so it means the storage duration that it lives on for well almost all of the execution of the",
    "start": "1694399",
    "end": "1700159"
  },
  {
    "text": "program is the lifetime of uh of that one um",
    "start": "1700159",
    "end": "1705760"
  },
  {
    "text": "um but i'm not going to say that every time i'll just say globals because everyone refers to them as globals and i'm going to try to finish on time so i",
    "start": "1705919",
    "end": "1712399"
  },
  {
    "text": "won't say that all the time so yeah here we have this function with a global that we're going to return and",
    "start": "1712399",
    "end": "1719279"
  },
  {
    "text": "then we compile and link this now compile and not link it just compile and dump it as we've done before",
    "start": "1719279",
    "end": "1725600"
  },
  {
    "text": "and now we have two sections we have the text section that we saw before where all the machine code lives and then we",
    "start": "1725600",
    "end": "1730799"
  },
  {
    "text": "have the data section where the data lives and here is our value 2.",
    "start": "1730799",
    "end": "1736559"
  },
  {
    "text": "okay so our global lives in the data section here the first byte in the data section that's where global lives",
    "start": "1736559",
    "end": "1742559"
  },
  {
    "text": "and then object is trying to be helpful and it goes oh bytes i know bytes i can translate it into assembly so this your",
    "start": "1742559",
    "end": "1748480"
  },
  {
    "text": "two here it looks very much like an add ao bytepatter rax to me and well it's it's just data but object is",
    "start": "1748480",
    "end": "1755360"
  },
  {
    "text": "trying to disassemble everything so that's that's why it's putting this here so don't get confused by this but like",
    "start": "1755360",
    "end": "1760880"
  },
  {
    "text": "everything is just bytes right so that's why it does that so here is uh that",
    "start": "1760880",
    "end": "1769120"
  },
  {
    "text": "our code to return that value and the up code here is 8b05 which means",
    "start": "1769120",
    "end": "1776080"
  },
  {
    "text": "take something that lives somewhere relative to the instruction pointer plus some offset",
    "start": "1776080",
    "end": "1781120"
  },
  {
    "text": "and move it into eix and something that lives somewhere from the instruction pointer plus some",
    "start": "1781120",
    "end": "1787200"
  },
  {
    "text": "offset that sounds very similar right and that's because it is again relocations they work the same way as",
    "start": "1787200",
    "end": "1792640"
  },
  {
    "text": "for functions and we can even see here we have the relocation",
    "start": "1792640",
    "end": "1798399"
  },
  {
    "text": "the symbol to resolve is global and -4 again because the instruction pointer is going to be down here so this is exactly",
    "start": "1798399",
    "end": "1803919"
  },
  {
    "text": "like functions so finding globals is exactly like finding functions in that way that you use relocations and then",
    "start": "1803919",
    "end": "1808960"
  },
  {
    "text": "the linker is going to resolve it so let's do that let's link this to",
    "start": "1808960",
    "end": "1816640"
  },
  {
    "text": "an executable called main main and object and again we see",
    "start": "1816640",
    "end": "1822399"
  },
  {
    "text": "similar things as before we have the text section and the data section um addresses have shifted a bit again",
    "start": "1822399",
    "end": "1827919"
  },
  {
    "text": "because it's an executable with some more stuff in it and we can see our value 2 down here in the data section now living at address",
    "start": "1827919",
    "end": "1834559"
  },
  {
    "text": "40 10. and then",
    "start": "1834559",
    "end": "1840159"
  },
  {
    "text": "here is the move instruction 8b05 moves relative to the instruction pointer and you can",
    "start": "1840159",
    "end": "1846559"
  },
  {
    "text": "see the relocation has been resolved the linker put in here well",
    "start": "1846559",
    "end": "1851919"
  },
  {
    "text": "2e d9 so we're going to be at 11 37 by the time we execute that move we add",
    "start": "1851919",
    "end": "1857760"
  },
  {
    "text": "2ed9 which is 4810",
    "start": "1857760",
    "end": "1862880"
  },
  {
    "text": "so that's how you get at global data and the question then is can you",
    "start": "1862880",
    "end": "1869360"
  },
  {
    "text": "when you have the compute function we made it static so that the compiler would know uh",
    "start": "1869360",
    "end": "1874399"
  },
  {
    "text": "to to just skip the relocation can we do that for data",
    "start": "1874399",
    "end": "1879840"
  },
  {
    "start": "1880000",
    "end": "2306000"
  },
  {
    "text": "okay i have this this diagram again so the compiler always knows the",
    "start": "1881519",
    "end": "1886960"
  },
  {
    "text": "relative distances inside of a section but it doesn't know the the relative distance between the",
    "start": "1886960",
    "end": "1892480"
  },
  {
    "text": "sections after they have been reordered over here in the executable so even if the compiler knows this is",
    "start": "1892480",
    "end": "1898480"
  },
  {
    "text": "the global data we're gonna it's not gonna be overwritten by some link or somewhere even then the compiler can't know",
    "start": "1898480",
    "end": "1904559"
  },
  {
    "text": "because these sections are going to move about when you make the executable so there's no way to avoid that",
    "start": "1904559",
    "end": "1910159"
  },
  {
    "text": "replication for the global okay lots of code i'm going to highlight",
    "start": "1910159",
    "end": "1915279"
  },
  {
    "text": "it a bit of a time so don't worry this is kind of for completeness but also to introduce a bunch of other",
    "start": "1915279",
    "end": "1920559"
  },
  {
    "text": "section types than the dot data we've seen so far i have just a bunch of different types of global data",
    "start": "1920559",
    "end": "1928080"
  },
  {
    "text": "so first i have some regular global data like the one we just saw before just normal read write non-const global data",
    "start": "1929120",
    "end": "1935519"
  },
  {
    "text": "or whatever one with internal one with external linkage",
    "start": "1935519",
    "end": "1940960"
  },
  {
    "text": "and then i have an initialized variable and one which is initialized to zero",
    "start": "1941600",
    "end": "1946960"
  },
  {
    "text": "and why did i put those two together we'll get back to that shortly",
    "start": "1946960",
    "end": "1953039"
  },
  {
    "text": "then we have another type which is const so i have two const globals one which has been initialized and one which",
    "start": "1953039",
    "end": "1958799"
  },
  {
    "text": "hasn't and then finally to extern variables so these are not defined here it's just a",
    "start": "1958799",
    "end": "1964640"
  },
  {
    "text": "promise to the compiler that okay you can compile this it's it's going to come from somewhere else sometime later",
    "start": "1964640",
    "end": "1972159"
  },
  {
    "text": "and then i just have the main function which just sums them just to like get some code that tries to access these",
    "start": "1973039",
    "end": "1979440"
  },
  {
    "text": "globals and i compiled and object and i cut out a lot of stuff to fit it on the slide but this is the important",
    "start": "1979440",
    "end": "1986640"
  },
  {
    "text": "part of it and you can see we have all of these rip zero rmp plus zeros all of these are the",
    "start": "1986640",
    "end": "1993600"
  },
  {
    "text": "relocations we've seen the only two that didn't get a relocation are the two const ones",
    "start": "1993600",
    "end": "2000559"
  },
  {
    "text": "and that's just because even on o0 gcc decided to do cons propagation and just",
    "start": "2000559",
    "end": "2005760"
  },
  {
    "text": "optimize it away just put the value straight in the assembly instead of actually going out and fetching those from from the global memory but if it",
    "start": "2005760",
    "end": "2012320"
  },
  {
    "text": "didn't inline them then it would use the same mechanism so no matter what kind of global data you have you get the same",
    "start": "2012320",
    "end": "2018320"
  },
  {
    "text": "type of relocation um",
    "start": "2018320",
    "end": "2023519"
  },
  {
    "text": "yeah these two and then let's look at the data section where the data is actually defined so global and",
    "start": "2023519",
    "end": "2030159"
  },
  {
    "text": "internal the two at the top there they ended up in the data section like we've seen before normal global set you",
    "start": "2030159",
    "end": "2035919"
  },
  {
    "text": "can read and write to go in the data section so you can see here we have this one from global and that is two from",
    "start": "2035919",
    "end": "2042240"
  },
  {
    "text": "internally ended up here and gender is four and it it shows the names here as well just to be nice",
    "start": "2042240",
    "end": "2049679"
  },
  {
    "text": "then we have the bss section and the bss section is a bit strange it's for everything that is supposed to be",
    "start": "2049919",
    "end": "2055919"
  },
  {
    "text": "initialized to zero and it doesn't actually live anywhere in the object file or in",
    "start": "2055919",
    "end": "2062398"
  },
  {
    "text": "the library or in the executable if i have an array of two thousand zeros then i don't put two thousand zeros in",
    "start": "2062399",
    "end": "2068800"
  },
  {
    "text": "my object file i just put a note to the loader saying i'm gonna need two thousand zeros so when the program",
    "start": "2068800",
    "end": "2074079"
  },
  {
    "text": "starts can you please make sure i have two thousand zeros available i'm not gonna put it in my object file or in my executable",
    "start": "2074079",
    "end": "2080960"
  },
  {
    "text": "um and then we have our zero initialized variable here but we also have the uninitialized",
    "start": "2080960",
    "end": "2086800"
  },
  {
    "text": "variable here and why is that why did we put that in bss which gets zeros",
    "start": "2086800",
    "end": "2092320"
  },
  {
    "text": "and that's because in c and c plus global variables will be initialized to zero so normally",
    "start": "2092320",
    "end": "2099119"
  },
  {
    "text": "like if you you should always initialize your variable because otherwise it's going to have an indeterminate value but for globals they will actually be",
    "start": "2099119",
    "end": "2105520"
  },
  {
    "text": "initialized to zero and that's a bit strange because we always talk about",
    "start": "2105520",
    "end": "2110720"
  },
  {
    "text": "don't pay for what you don't use so you don't want when the program starts someone to go and set like this needs a zero this needs a zero right",
    "start": "2110720",
    "end": "2117680"
  },
  {
    "text": "so the reason we can do this is because when you load the bss section into memory you just want a bunch of zeros so",
    "start": "2117680",
    "end": "2124640"
  },
  {
    "text": "you just request a page of memory from the operating system and you just map that in as bss",
    "start": "2124640",
    "end": "2131520"
  },
  {
    "text": "and when you get a page of memory from the operating system some other process was using that before",
    "start": "2131520",
    "end": "2136880"
  },
  {
    "text": "you and you don't want to have processes able to look at the memory of the",
    "start": "2136880",
    "end": "2141920"
  },
  {
    "text": "previous process that could be like something with a password or some sensitive data so the operating system is just going to zero out this page",
    "start": "2141920",
    "end": "2147839"
  },
  {
    "text": "before it gives it to you and that means uh when you get this it's already full",
    "start": "2147839",
    "end": "2152880"
  },
  {
    "text": "of zeros so you just map that page into memory and all your bss variables are automatically zero",
    "start": "2152880",
    "end": "2160320"
  },
  {
    "text": "even though you don't have to actually go and set them to zero anywhere so that's cheap and nice",
    "start": "2160320",
    "end": "2167440"
  },
  {
    "text": "and finally final section today is ro data which means read-only data so we",
    "start": "2167440",
    "end": "2173040"
  },
  {
    "text": "can see our two const here const and comes uninitialized they go down here so a three for that",
    "start": "2173040",
    "end": "2178800"
  },
  {
    "text": "one and the zero for that one so couldn't we just have put",
    "start": "2178800",
    "end": "2184000"
  },
  {
    "text": "this three over here and this zero into into bss like there are cons so we can't",
    "start": "2184000",
    "end": "2189440"
  },
  {
    "text": "modify them anyway well like why put them in a different section and",
    "start": "2189440",
    "end": "2194640"
  },
  {
    "text": "there are some several reasons for this though one really nice thing is if you put it into a separate section and when",
    "start": "2194640",
    "end": "2201520"
  },
  {
    "text": "you load that section you put it in a segment which is marked as read-only",
    "start": "2201520",
    "end": "2206800"
  },
  {
    "text": "if i cast away const from any of these and i write to them i'm going to get a segfault",
    "start": "2206800",
    "end": "2213520"
  },
  {
    "text": "if these were living in the normal global data and i tried cast away concept right to them it's just fine nothing happens i",
    "start": "2213520",
    "end": "2220720"
  },
  {
    "text": "just corrupt my data and crashing my program is just so so much better than corrupting my data so",
    "start": "2220720",
    "end": "2227599"
  },
  {
    "text": "that's one nice thing about ro data all right",
    "start": "2227599",
    "end": "2234240"
  },
  {
    "text": "yes uh for if you use dynamic linking that's the other good uh good",
    "start": "2234880",
    "end": "2240480"
  },
  {
    "text": "thing about arrow data and uh we'll actually look at that in ten minutes or so",
    "start": "2240480",
    "end": "2246560"
  },
  {
    "text": "um so that's a bunch of local a bunch of global data is there any type of global",
    "start": "2246560",
    "end": "2251680"
  },
  {
    "text": "data that i didn't talk about so far is there any global data that looks like",
    "start": "2251680",
    "end": "2257599"
  },
  {
    "text": "it's local we have local yeah so they also live",
    "start": "2257599",
    "end": "2263760"
  },
  {
    "text": "in the global data stream literals but also static locals in a function so you have a function you have like static in",
    "start": "2263760",
    "end": "2270320"
  },
  {
    "text": "counter equals zero that's not going on the stack because it's not you're not going to get",
    "start": "2270320",
    "end": "2276079"
  },
  {
    "text": "one of these each time the stack rows it's the same counter all the time so it has static storage duration it has to go in some global memory so they can you",
    "start": "2276079",
    "end": "2282560"
  },
  {
    "text": "can use the same one every time and you can also have classic static",
    "start": "2282560",
    "end": "2287839"
  },
  {
    "text": "class members right so you can have yeah static class member which also goes in any of these",
    "start": "2287839",
    "end": "2293760"
  },
  {
    "text": "and just to save time i didn't have any i don't have any examples of local statics and class static members but",
    "start": "2293760",
    "end": "2300800"
  },
  {
    "text": "they work exactly the same way as this so all globals work in this way",
    "start": "2300800",
    "end": "2306640"
  },
  {
    "start": "2306000",
    "end": "2546000"
  },
  {
    "text": "so here's the diagram again with object files i'm going to hide that before i confuse it too much and i'll get to it",
    "start": "2307680",
    "end": "2315920"
  },
  {
    "text": "so here's our main.o the object file you can see our sections here that we've seen before text data bss and our data",
    "start": "2316160",
    "end": "2323440"
  },
  {
    "text": "and here you can see it took this one and the two and put them in the data section",
    "start": "2323440",
    "end": "2328960"
  },
  {
    "text": "and it took these zeros and like conceptually put them in the bss but it like remember bss doesn't really exist",
    "start": "2328960",
    "end": "2334240"
  },
  {
    "text": "it just notes that we're going to need them at some point i took this 3 and this zero put those in row data",
    "start": "2334240",
    "end": "2342480"
  },
  {
    "text": "and these external ones they're not even defined in this object file because they're going to be defined somewhere",
    "start": "2342480",
    "end": "2347520"
  },
  {
    "text": "else and then hopefully someone else has some other.c somewhere which actually defines",
    "start": "2347520",
    "end": "2353119"
  },
  {
    "text": "these two variables right and so they're going to get in this other object file in the data and our data",
    "start": "2353119",
    "end": "2358160"
  },
  {
    "text": "section for these two variables here",
    "start": "2358160",
    "end": "2362640"
  },
  {
    "text": "um and then we link all of this so we can see here in the main executable we",
    "start": "2363440",
    "end": "2369200"
  },
  {
    "text": "got the one and the two from this data section in here and we get the four from this data section in here and so on",
    "start": "2369200",
    "end": "2375040"
  },
  {
    "text": "and the bss still doesn't exist and then finally oops then finally we",
    "start": "2375040",
    "end": "2380720"
  },
  {
    "text": "load all this in memory so somewhere in memory all of this stuff gets loaded and in this illustration everything is",
    "start": "2380720",
    "end": "2387760"
  },
  {
    "text": "loaded together in one place in the same order as in the executable but that's not necessarily so",
    "start": "2387760",
    "end": "2393839"
  },
  {
    "text": "you don't always get the sections in your main in your executable in the same order in",
    "start": "2393839",
    "end": "2398960"
  },
  {
    "text": "memory but the really important thing is that it is the linker who decides this order",
    "start": "2398960",
    "end": "2404240"
  },
  {
    "text": "it's not the loader so the linker or says which order this is going to get",
    "start": "2404240",
    "end": "2409599"
  },
  {
    "text": "loaded in and the linker doesn't know where but it knows the relative order between the distances between these",
    "start": "2409599",
    "end": "2415520"
  },
  {
    "text": "sections so that it can resolve relocations and it can know the distance from somewhere in the text down to",
    "start": "2415520",
    "end": "2421280"
  },
  {
    "text": "somewhere in the arrow data here even though they might be in a different order here but the link here decided that order",
    "start": "2421280",
    "end": "2428720"
  },
  {
    "text": "and i also put some permissions here so that your text section is gonna be put in a segment",
    "start": "2428720",
    "end": "2434000"
  },
  {
    "text": "which is read and execute but not writable so no one can overwrite your code and this data in bss is going to get",
    "start": "2434000",
    "end": "2441040"
  },
  {
    "text": "mapped read writes so you can read them right to those and our data is read only so we get this egg fault if you try to",
    "start": "2441040",
    "end": "2447040"
  },
  {
    "text": "write to that and none of our data is executable so you don't want to someone to be able",
    "start": "2447040",
    "end": "2452960"
  },
  {
    "text": "to like write some code into your variables and try to jump to it and execute it",
    "start": "2452960",
    "end": "2459760"
  },
  {
    "text": "and so if you ever wonder like when are my globals initialized",
    "start": "2460640",
    "end": "2465680"
  },
  {
    "text": "well they kind of aren't right there is no code that's actually going to initialize your globals because",
    "start": "2465680",
    "end": "2471040"
  },
  {
    "text": "everything that happens here is just we're going to take this these bytes and just map them into",
    "start": "2471040",
    "end": "2477280"
  },
  {
    "text": "memory just load the page into memory with these bytes before even the program starts so there's nothing in the startup",
    "start": "2477280",
    "end": "2482720"
  },
  {
    "text": "that's going to set your globals you just start up and you have the loader has just mapped in these bytes",
    "start": "2482720",
    "end": "2489920"
  },
  {
    "text": "and for anyone doing simple plus there's a corner caser if you have a constructor on a global object then",
    "start": "2489920",
    "end": "2495839"
  },
  {
    "text": "you you generally you can't do this uh so then there are uh some functions that get called during startup which we'll",
    "start": "2495839",
    "end": "2501920"
  },
  {
    "text": "call constructors for global objects but for so simple fundamental types like this no initialization is actually going on just",
    "start": "2501920",
    "end": "2508480"
  },
  {
    "text": "load the device into memory and then finally we get to dynamic",
    "start": "2508480",
    "end": "2514800"
  },
  {
    "text": "linking which maybe is the most interesting part of the talk",
    "start": "2514800",
    "end": "2520160"
  },
  {
    "text": "and the difference between dynamic linking and static linking is what is known when",
    "start": "2520160",
    "end": "2525440"
  },
  {
    "text": "so we have this like stage of the compiler the linker and the loader and what is what can you know about",
    "start": "2525440",
    "end": "2531680"
  },
  {
    "text": "things at these three stages and an interesting question then is what can you do at these stages like when can",
    "start": "2531680",
    "end": "2538480"
  },
  {
    "text": "you resolve an address and stuff like that so",
    "start": "2538480",
    "end": "2543599"
  },
  {
    "text": "um yeah we'll look at that next",
    "start": "2543599",
    "end": "2547119"
  },
  {
    "text": "so if you remember this one right the cpu it needs addresses of functions and it",
    "start": "2549280",
    "end": "2555280"
  },
  {
    "text": "needs addresses of data it doesn't know about labels and names and stuff it needs addresses",
    "start": "2555280",
    "end": "2561920"
  },
  {
    "text": "and if you remember this one the compiler often doesn't know the addresses because stuff gets messed up",
    "start": "2563280",
    "end": "2569359"
  },
  {
    "text": "when the sections move around when it gets linked to the executable but we also remember that the linker",
    "start": "2569359",
    "end": "2576240"
  },
  {
    "text": "decides this layout so the linker is going to write this the linker knows where everything ends up the linker is the one writing it so the linker can",
    "start": "2576240",
    "end": "2582880"
  },
  {
    "text": "change these addresses change the relocations to point to the correct place",
    "start": "2582880",
    "end": "2588400"
  },
  {
    "text": "but what if we're doing dynamic linking okay so we have this executable",
    "start": "2589680",
    "end": "2594800"
  },
  {
    "text": "but we also have this shared object somewhere so i just have this so1 just shared object number",
    "start": "2594800",
    "end": "2600640"
  },
  {
    "text": "one this one also has a header and some text and some data and this has come from some object files over here",
    "start": "2600640",
    "end": "2607440"
  },
  {
    "text": "and it gets loaded somewhere in memory and i have another shared object",
    "start": "2607440",
    "end": "2613599"
  },
  {
    "text": "developer shared object number two another one down here and then this one depends on this one and they both depend on this one",
    "start": "2613599",
    "end": "2618800"
  },
  {
    "text": "and the linker can't know where the other ones end up in memory",
    "start": "2618800",
    "end": "2624000"
  },
  {
    "text": "so the loader is the only one who knows where these ends end up and",
    "start": "2624000",
    "end": "2630079"
  },
  {
    "text": "the linker is writing this the linker could resolve the relocations because it's it's the one writing the executable it knows where everything is going to",
    "start": "2630079",
    "end": "2636480"
  },
  {
    "text": "end up but if it doesn't know what do we do then can we then just let's say let's just",
    "start": "2636480",
    "end": "2643440"
  },
  {
    "text": "leave the relocation for the loader okay let's just not resolve it and just the loader will have",
    "start": "2643440",
    "end": "2648720"
  },
  {
    "text": "to do this because the loader and knows where stuff ends up",
    "start": "2648720",
    "end": "2653920"
  },
  {
    "text": "and every time i say can we just do this then the answer is always no because shared objects really are very",
    "start": "2656319",
    "end": "2663040"
  },
  {
    "start": "2661000",
    "end": "2751000"
  },
  {
    "text": "shared there is not just like you get this shared library on the disk so that these hundred other programs don't have",
    "start": "2663040",
    "end": "2668960"
  },
  {
    "text": "to link all of that code into themselves they can just load this one and you save this space",
    "start": "2668960",
    "end": "2675200"
  },
  {
    "text": "uh you can actually also share that in memory at runtime so when you load",
    "start": "2675200",
    "end": "2681599"
  },
  {
    "text": "a shared object or an executable for that that matter you just memory map the text section right into memory",
    "start": "2681599",
    "end": "2690640"
  },
  {
    "text": "and if you have many processes that memory map the text section from the same",
    "start": "2690640",
    "end": "2696240"
  },
  {
    "text": "so well they can just memory map that same thing they just memory up this part of the file all of them the same thing",
    "start": "2696240",
    "end": "2703520"
  },
  {
    "text": "so if you have 20 processes running and they all use this 2 megabyte text section you have 20 times 2 equals 2",
    "start": "2703520",
    "end": "2711520"
  },
  {
    "text": "which is nice for memory use right they can all share this one because it's read-only so",
    "start": "2711520",
    "end": "2717440"
  },
  {
    "text": "you can't really destroy anything and the same goes for our data you can also share that between",
    "start": "2717440",
    "end": "2724000"
  },
  {
    "text": "processes so so you can't change this because if the",
    "start": "2724000",
    "end": "2729200"
  },
  {
    "text": "loader was then to like i'm going to fix the relocations for this process here i'm just going to make it writable for a",
    "start": "2729200",
    "end": "2735680"
  },
  {
    "text": "moment and i'm going to just fix the relocations and i will then you destroyed the relocations for all the other 19 processes which was using the",
    "start": "2735680",
    "end": "2742000"
  },
  {
    "text": "same code so you can't go and change that code at runtime or at load time",
    "start": "2742000",
    "end": "2749839"
  },
  {
    "text": "what can we do well if you remember we have all these sections with different permissions",
    "start": "2749839",
    "end": "2756960"
  },
  {
    "start": "2751000",
    "end": "3011000"
  },
  {
    "text": "so you have the read and execute text and we have the read read our data which you can't write to so",
    "start": "2756960",
    "end": "2763440"
  },
  {
    "text": "these are shared but every process needs their separate copy of data and bss because they have",
    "start": "2763440",
    "end": "2769440"
  },
  {
    "text": "to be able to write to this data without them destroying the data for other processes so they don't step on each",
    "start": "2769440",
    "end": "2774480"
  },
  {
    "text": "other's toes so how do we solve this thing with global data",
    "start": "2774480",
    "end": "2782800"
  },
  {
    "text": "what we do is we use the global offset table so you might have seen the got mentioned somewhere that's a global offset table",
    "start": "2782800",
    "end": "2789280"
  },
  {
    "text": "so it's a really really simple concept we just put in another section which is called global offset table we",
    "start": "2789280",
    "end": "2795599"
  },
  {
    "text": "make it read write and we give every process their own copy of it and in here we just have one entry for each global",
    "start": "2795599",
    "end": "2802319"
  },
  {
    "text": "variable saying where in memory it lives so for if i have three globals i'm going to have three entries here",
    "start": "2802319",
    "end": "2808240"
  },
  {
    "text": "and then the loader can fill this up when it loads the program okay so the loader is going to load this",
    "start": "2808240",
    "end": "2814240"
  },
  {
    "text": "program this program has three globals then the loader puts stuff into memory and it figures out well this global and",
    "start": "2814240",
    "end": "2820480"
  },
  {
    "text": "ended up here this global ended up here and this ended up here and i'll put the addresses of these three globals in here",
    "start": "2820480",
    "end": "2825520"
  },
  {
    "text": "so that when the program starts to look for these it can just look up in the global offset table and",
    "start": "2825520",
    "end": "2831520"
  },
  {
    "text": "find where they actually ended up living",
    "start": "2831520",
    "end": "2835280"
  },
  {
    "text": "so if i have this simple function called using data it just uses this data returns it this is a global",
    "start": "2838560",
    "end": "2846559"
  },
  {
    "text": "and then we just compile it like normal like we did before and we object it and",
    "start": "2849200",
    "end": "2857520"
  },
  {
    "text": "we see just a relocation here so it's gonna use a relocation for the",
    "start": "2857520",
    "end": "2862559"
  },
  {
    "text": "linker to figure out where data is but like where's the glt so normally",
    "start": "2862559",
    "end": "2868480"
  },
  {
    "text": "there is no glt in here so what did i forget when i compiled this one and i want to use it in the",
    "start": "2868480",
    "end": "2873680"
  },
  {
    "text": "shared library yeah i have to say",
    "start": "2873680",
    "end": "2879200"
  },
  {
    "text": "fpic that means that stands for position independent code so i'm going to say i'm going to use this in a shared library i",
    "start": "2879200",
    "end": "2886000"
  },
  {
    "text": "have to make position independent code so position independent code is going to go like in the global offset table so",
    "start": "2886000",
    "end": "2892240"
  },
  {
    "text": "that's that is going to be an indirection right previously we only got this relocation which the linker resolved but if i'm",
    "start": "2892240",
    "end": "2898559"
  },
  {
    "text": "going to put this in an so i'm going to need to use position independent code and go first look in",
    "start": "2898559",
    "end": "2903760"
  },
  {
    "text": "the global offset table so now we see we get two moves",
    "start": "2903760",
    "end": "2909599"
  },
  {
    "text": "so first we have one move which looks for the address of data and put",
    "start": "2909599",
    "end": "2914800"
  },
  {
    "text": "that into rax then we have another move which then takes okay now rax is pointing to the",
    "start": "2914800",
    "end": "2921119"
  },
  {
    "text": "right data so now we can take the value and put it into ax so we have this one",
    "start": "2921119",
    "end": "2926319"
  },
  {
    "text": "in direction and um",
    "start": "2926319",
    "end": "2931599"
  },
  {
    "text": "then there's one more thing because like remember the compiler doesn't know the distance from the text section to the got",
    "start": "2931839",
    "end": "2937839"
  },
  {
    "text": "so the compiler has to leave a relocation for the linker to even find the got",
    "start": "2937839",
    "end": "2943599"
  },
  {
    "text": "and then it can do can get get the actual value so it's a bit simpler if we just link this into a",
    "start": "2943599",
    "end": "2951200"
  },
  {
    "text": "shared object and dump it again so the relocation is gone then you can see a bit more clearly what happens at runtime",
    "start": "2951200",
    "end": "2958559"
  },
  {
    "text": "so uh the what happens at runtime first i'm going to look up in rip plus 2e8",
    "start": "2958559",
    "end": "2964720"
  },
  {
    "text": "that's where i'm going to find uh the data object so that means i'm up here in the text",
    "start": "2964720",
    "end": "2970160"
  },
  {
    "text": "section and then i add what was it whatever somewhere in the dot there's where i find the address of",
    "start": "2970160",
    "end": "2976079"
  },
  {
    "text": "data i move that into rax and then i can actually go and fetch",
    "start": "2976079",
    "end": "2981520"
  },
  {
    "text": "whatever rx is now pointing to which will be the actual address of data and",
    "start": "2981520",
    "end": "2987040"
  },
  {
    "text": "as i said before this got gets filled by the loader when the program starts",
    "start": "2987040",
    "end": "2993520"
  },
  {
    "text": "and that's of course some tiny cost at startup right to fill out the dot but",
    "start": "2993680",
    "end": "2999520"
  },
  {
    "text": "normally you don't have a lot of globals maybe you have like four or five if you're if you're if you've been bad",
    "start": "2999520",
    "end": "3004800"
  },
  {
    "text": "but uh it doesn't take that much long much time to fill in this",
    "start": "3004800",
    "end": "3011319"
  },
  {
    "start": "3011000",
    "end": "3336000"
  },
  {
    "text": "if you have functions however maybe you have um an so file with like five globals and a thousand functions",
    "start": "3013440",
    "end": "3020240"
  },
  {
    "text": "and you probably aren't going to call all of those thousand functions maybe you call like eight of these functions",
    "start": "3020240",
    "end": "3026720"
  },
  {
    "text": "so then you don't want to to to do the same thing with function you don't want to resolve all of those",
    "start": "3026720",
    "end": "3032720"
  },
  {
    "text": "functions which you aren't going to use and maybe that so file well that depends on these other three so files and then",
    "start": "3032720",
    "end": "3038800"
  },
  {
    "text": "these have a thousand functions and then suddenly you have actually a startup cost and it's really important to get",
    "start": "3038800",
    "end": "3044400"
  },
  {
    "text": "your programs like if you're using cnc plus you're doing systems programming and you want your program to start",
    "start": "3044400",
    "end": "3049520"
  },
  {
    "text": "really quickly and you don't want to pay this overhead but also i don't want every time so here",
    "start": "3049520",
    "end": "3056960"
  },
  {
    "text": "i have this function which is calling another function two times i don't want every time i call this",
    "start": "3056960",
    "end": "3062160"
  },
  {
    "text": "other function i don't wanna go ask the loader hey i'm gonna call this function where is it and then the loader",
    "start": "3062160",
    "end": "3067599"
  },
  {
    "text": "has gonna has got to go like oh yeah that one i think i put it over here and then okay that's the address okay then",
    "start": "3067599",
    "end": "3072800"
  },
  {
    "text": "now i can and you don't want to have that happening every time you call the function",
    "start": "3072800",
    "end": "3078160"
  },
  {
    "text": "so what you want to do is you want to do this lazily so the first time you actually call a function you want to do",
    "start": "3078160",
    "end": "3083440"
  },
  {
    "text": "this i'll go ask the loader and then the next time you don't want to do that",
    "start": "3083440",
    "end": "3089599"
  },
  {
    "text": "but your text section is right only right so you can't you can't like fix up your text section the first time you",
    "start": "3089599",
    "end": "3095599"
  },
  {
    "text": "call the function because you're not allowed to write to this text section because you're sharing it with other processes",
    "start": "3095599",
    "end": "3101040"
  },
  {
    "text": "so uh so what do you do so you you solve it using uh the plt the",
    "start": "3101040",
    "end": "3107520"
  },
  {
    "text": "procedure linkage table which we'll get to shortly and here i've just drawn up the",
    "start": "3107520",
    "end": "3113599"
  },
  {
    "text": "the sections of our uh code here so these are the sections from from this so file so here's the",
    "start": "3113599",
    "end": "3119680"
  },
  {
    "text": "text section here's the all the instructions in using function there's some",
    "start": "3119680",
    "end": "3124720"
  },
  {
    "text": "like stack bookkeeping stuff on stuff then i'm going to call function and i'm going to do that two times",
    "start": "3124720",
    "end": "3130640"
  },
  {
    "text": "then over here is the text section from some other so files so file which actually defines this function",
    "start": "3130640",
    "end": "3137280"
  },
  {
    "text": "so here's here's where i want to jump to eventually and then i'm going to use the got again",
    "start": "3137280",
    "end": "3142480"
  },
  {
    "text": "the global offset table where i have one entry for each global data so whenever i need a global data i'll look up in the",
    "start": "3142480",
    "end": "3148720"
  },
  {
    "text": "got where is it and then i use it i also just output",
    "start": "3148720",
    "end": "3154240"
  },
  {
    "text": "one entry here for each of my functions so in the dlt i put the address of",
    "start": "3154240",
    "end": "3160240"
  },
  {
    "text": "function so eventually this address function is going to point over here so i can just look up in the got where is",
    "start": "3160240",
    "end": "3166400"
  },
  {
    "text": "my function well it's over here but",
    "start": "3166400",
    "end": "3171839"
  },
  {
    "text": "and then we have something called the plt the procedure linkage table here",
    "start": "3171839",
    "end": "3177599"
  },
  {
    "text": "and yeah so in the beginning like this address function it's pointing into",
    "start": "3177599",
    "end": "3184160"
  },
  {
    "text": "our own procedure linkage table it's just pointing the calls are going to inside of the house there's something",
    "start": "3184160",
    "end": "3189839"
  },
  {
    "text": "creepy going on what's what's happening here so let's let's step through this and see so i put this this little red dot over",
    "start": "3189839",
    "end": "3195760"
  },
  {
    "text": "here that's the like our step debugger indicator kind of thing and instead of calling function",
    "start": "3195760",
    "end": "3201599"
  },
  {
    "text": "i call the function at plt so that's just a name that's just a name that's in here in the plt",
    "start": "3201599",
    "end": "3208400"
  },
  {
    "text": "and the linker knows the distance from text to plt and from text to glt so this will all have been resolved by the time",
    "start": "3208400",
    "end": "3213599"
  },
  {
    "text": "we get to runtime so we just call this function and then this goes well i'm going to",
    "start": "3213599",
    "end": "3218960"
  },
  {
    "text": "jump to whatever address of function is pointing to which will eventually be here but now",
    "start": "3218960",
    "end": "3224160"
  },
  {
    "text": "i will jump into myself which is a bit strange and the code here",
    "start": "3224160",
    "end": "3230880"
  },
  {
    "text": "in the beginning of the plt i'm not showing all the code just to keep it simple but what this code does is",
    "start": "3230880",
    "end": "3236880"
  },
  {
    "text": "jump all the way out into the loader so i'm going to jump out of all of this stuff and actually i'm going to jump",
    "start": "3236880",
    "end": "3242800"
  },
  {
    "text": "into ld.so and i'm going to get this function resolved",
    "start": "3242800",
    "end": "3248000"
  },
  {
    "text": "and what happens in in the loader then or or the dynamic linker uh the loader and the dynamic linker is the same thing",
    "start": "3248000",
    "end": "3253520"
  },
  {
    "text": "when you talk about dynamic linking then the loader goes and does this over",
    "start": "3253520",
    "end": "3259200"
  },
  {
    "text": "there put its thing and then it points puts the right address here in the got and points it down here to this function",
    "start": "3259200",
    "end": "3266000"
  },
  {
    "text": "okay so we we're here in oops we were here in plt jump to the loader which fixes the",
    "start": "3266000",
    "end": "3272400"
  },
  {
    "text": "address and then the loader is gonna jump to the address it just fixed up",
    "start": "3272400",
    "end": "3279119"
  },
  {
    "text": "so i don't have to jump back and then then do they do it again kind of so then we jump into the actual function that we",
    "start": "3279119",
    "end": "3284480"
  },
  {
    "text": "wanted to do so we went from our text section into the plt look it up here back in the plt",
    "start": "3284480",
    "end": "3290319"
  },
  {
    "text": "into the loader somewhere and then down here and these were all jumps so when i",
    "start": "3290319",
    "end": "3296160"
  },
  {
    "text": "return from this function i just return to the last call so i get back here to the next",
    "start": "3296160",
    "end": "3301440"
  },
  {
    "text": "instruction using function and then i call the function again",
    "start": "3301440",
    "end": "3306640"
  },
  {
    "text": "so i call over here to the plt the plt looks up at the row function",
    "start": "3306640",
    "end": "3311920"
  },
  {
    "text": "which is now pointing to the right place and then we jump over here so we still have to jump through the plt",
    "start": "3311920",
    "end": "3318400"
  },
  {
    "text": "and check that value but it's a lot faster than going through all this loader stuff",
    "start": "3318400",
    "end": "3324000"
  },
  {
    "text": "so with dynamic linking like this there's always this tiny overhead but it's it's really quite fast compared to",
    "start": "3324000",
    "end": "3329520"
  },
  {
    "text": "the alternative uh and then it's time for the summary",
    "start": "3329520",
    "end": "3336720"
  },
  {
    "text": "so if you have local data if you have function parameters you have return values stuff like that",
    "start": "3336720",
    "end": "3342000"
  },
  {
    "text": "it's super simple it just registers and the stack",
    "start": "3342000",
    "end": "3347040"
  },
  {
    "text": "for static linking it's also quite simple it's a bit more complicated you have to do the relocations so if you",
    "start": "3347760",
    "end": "3352880"
  },
  {
    "text": "have global data you have to put a relocation and then the linker is going to know where it end up ends up so",
    "start": "3352880",
    "end": "3357920"
  },
  {
    "text": "statically the linker fixes this before even the program starts and for functions it's exactly the same",
    "start": "3357920",
    "end": "3364720"
  },
  {
    "text": "puts every location the link resolves it and by the time the program runs there is no sign on relocation it just",
    "start": "3364720",
    "end": "3370160"
  },
  {
    "text": "as if you knew all the time for dynamic linking if we have global",
    "start": "3370160",
    "end": "3376480"
  },
  {
    "text": "data we just use the global offset table so instead of saying i want this",
    "start": "3376480",
    "end": "3382079"
  },
  {
    "text": "in one move instruction you say i want to get the address of this from dot and then you go look at that address",
    "start": "3382079",
    "end": "3388079"
  },
  {
    "text": "and then you get the actual value in a second move instruction",
    "start": "3388079",
    "end": "3392480"
  },
  {
    "text": "and for functions we also use the glt to have the address of the function it is not resolved at the runtime it's",
    "start": "3393599",
    "end": "3400319"
  },
  {
    "text": "done lately by this jump to the plt so when the first time you call a function you have to call out via the loader to",
    "start": "3400319",
    "end": "3406640"
  },
  {
    "text": "get the right address and the next time you just get the plt in direction",
    "start": "3406640",
    "end": "3413200"
  },
  {
    "text": "and that's it i think we have two minutes for questions",
    "start": "3415119",
    "end": "3420798"
  },
  {
    "text": "thank you",
    "start": "3426720",
    "end": "3429880"
  },
  {
    "text": "yeah yeah",
    "start": "3432160",
    "end": "3436720"
  },
  {
    "text": "yeah so for for shared objects that doesn't matter because they already use position",
    "start": "3437440",
    "end": "3442799"
  },
  {
    "text": "oh the question sorry the question was what if you use aslr that's address based layout randomization so it's a",
    "start": "3442799",
    "end": "3448480"
  },
  {
    "text": "technique which the os uses to every time you load a program you just put it at a random address so unless you use",
    "start": "3448480",
    "end": "3454400"
  },
  {
    "text": "frida i guess it makes it supposed to make it harder to reverse it but i'm sure i'm sure",
    "start": "3454400",
    "end": "3459599"
  },
  {
    "text": "it's it's easy even then but uh yeah you already have the loader than doing the slr thing so the loader will just",
    "start": "3459599",
    "end": "3466799"
  },
  {
    "text": "fix up the glt and the plt uh but for for your executable i think you have to",
    "start": "3466799",
    "end": "3473920"
  },
  {
    "text": "compile it with a pie position independent executable for",
    "start": "3473920",
    "end": "3479359"
  },
  {
    "text": "it to work with slr i think so because then you get the position independent tricks also in the",
    "start": "3479359",
    "end": "3484720"
  },
  {
    "text": "executable i would i would assume i'm not 100 sure i think so",
    "start": "3484720",
    "end": "3492000"
  },
  {
    "text": "yeah uh",
    "start": "3493040",
    "end": "3497160"
  },
  {
    "text": "yeah so the question is uh if you don't have the bss section in the executable then the loader will do it and that's",
    "start": "3502880",
    "end": "3508799"
  },
  {
    "text": "that's right [Music]",
    "start": "3508799",
    "end": "3514720"
  },
  {
    "text": "if you if you just if you statically link the bss um",
    "start": "3514720",
    "end": "3520400"
  },
  {
    "text": "right how do you do that if you don't well you have the addresses you have the symbol table",
    "start": "3520400",
    "end": "3526799"
  },
  {
    "text": "so the uh the text section or the compiler and the linker is going to know the layout",
    "start": "3526799",
    "end": "3532799"
  },
  {
    "text": "of the executable in memory so even though the bss section doesn't actually",
    "start": "3532799",
    "end": "3537839"
  },
  {
    "text": "live in there it is going to know where it will eventually end up being",
    "start": "3537839",
    "end": "3543599"
  },
  {
    "text": "yes it's going to know this the size of it and the layout if you look at read elf it will show you uh",
    "start": "3543599",
    "end": "3549119"
  },
  {
    "text": "all the sections and then it has a table of which sections are gonna get squashed into one segment",
    "start": "3549119",
    "end": "3555280"
  },
  {
    "text": "and then it has addresses for where these segments are going to go so one of these sections will then be the bss it goes into a read write segment somewhere",
    "start": "3555280",
    "end": "3563040"
  },
  {
    "text": "and you just need to know the size and then the symbol table will know where in",
    "start": "3563040",
    "end": "3569200"
  },
  {
    "text": "in this bss which doesn't really exist yet we just know how big it will be um where does this thing live that you're",
    "start": "3569200",
    "end": "3575599"
  },
  {
    "text": "looking for yeah any more questions or i think we're",
    "start": "3575599",
    "end": "3582079"
  },
  {
    "text": "out of time okay thanks for coming",
    "start": "3582079",
    "end": "3587500"
  },
  {
    "text": "[Applause]",
    "start": "3587500",
    "end": "3592849"
  }
]