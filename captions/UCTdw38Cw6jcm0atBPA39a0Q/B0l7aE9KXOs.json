[
  {
    "text": "okay welcome folks last official slot of the day um we we learned a lot today and",
    "start": "6120",
    "end": "13639"
  },
  {
    "text": "we're already halfway through the conference so uh it was fun I hope you enjoyed it um I know you all must be",
    "start": "13639",
    "end": "21080"
  },
  {
    "text": "tired but don't worry this is going to be um I would say more relaxing kind of",
    "start": "21080",
    "end": "26599"
  },
  {
    "text": "a talk not not code heavy uh but I do expect that you might um engage a bit in",
    "start": "26599",
    "end": "34480"
  },
  {
    "text": "in conversation so um I would say better title of uh this talk is um meets dogma",
    "start": "34480",
    "end": "42280"
  },
  {
    "text": "and practice uh and that's what we'll try to discuss um in the coming hour so do ask",
    "start": "42280",
    "end": "50719"
  },
  {
    "text": "questions uh comments are welcome as well uh as we go along um raise your",
    "start": "50719",
    "end": "56000"
  },
  {
    "text": "hand or just shout it out uh I don't mind don't wait till the end um so I do hope that we'll engage in",
    "start": "56000",
    "end": "65158"
  },
  {
    "text": "some dialogue uh and um we'll exchange opinions I'm not here to share um",
    "start": "65159",
    "end": "71119"
  },
  {
    "text": "particular Pearls of Wisdom I'm here to to start a discussion actually and in",
    "start": "71119",
    "end": "76360"
  },
  {
    "text": "general we as a C++ Community can be quite vocal sometimes uh when it comes",
    "start": "76360",
    "end": "81759"
  },
  {
    "text": "to um particular topics um and controversial issues um and let's not",
    "start": "81759",
    "end": "89240"
  },
  {
    "text": "forget that uh sometimes people try to push their opinions as facts uh and and try to um",
    "start": "89240",
    "end": "98799"
  },
  {
    "text": "convince everyone that uh we should all be in the same boat but we come at um",
    "start": "98799",
    "end": "103960"
  },
  {
    "text": "these from different angles we each come uh with our baggage um our experience",
    "start": "103960",
    "end": "111719"
  },
  {
    "text": "our Niche our domain specific knowledge uh and the things that we've been doing",
    "start": "111719",
    "end": "117000"
  },
  {
    "text": "and the way we've been doing them so we expect to have some sort of mismatch in",
    "start": "117000",
    "end": "122560"
  },
  {
    "text": "in what we we each um bring to the table and how we see things so uh extending",
    "start": "122560",
    "end": "130319"
  },
  {
    "text": "beess metaphor of um the elephant C++ uh as the elephant I like this a bit more",
    "start": "130319",
    "end": "137519"
  },
  {
    "text": "so we we are fragmented on many many such topics and when it comes to sources",
    "start": "137519",
    "end": "143560"
  },
  {
    "text": "of good information available there are a bunch um like the CPP core guidelines",
    "start": "143560",
    "end": "148760"
  },
  {
    "text": "or best practices around some of them opinionated of course established idioms",
    "start": "148760",
    "end": "155160"
  },
  {
    "text": "uh books conference presentations and of course stack Overflow but mixed up in all of these",
    "start": "155160",
    "end": "162280"
  },
  {
    "text": "are uh bits and pieces of um obsolete",
    "start": "162280",
    "end": "167360"
  },
  {
    "text": "information maybe some myths flying around uh some extent bad teaching",
    "start": "167360",
    "end": "173000"
  },
  {
    "text": "materials or obsolete uh teaching materials old code Style Guidelines from",
    "start": "173000",
    "end": "178879"
  },
  {
    "text": "various projects that that are still around and propagate some of these um",
    "start": "178879",
    "end": "183920"
  },
  {
    "text": "techniques or um idioms around and uh of",
    "start": "183920",
    "end": "188959"
  },
  {
    "text": "course on boarding new people on existing project and existing teams we usually tend to align with existing",
    "start": "188959",
    "end": "196760"
  },
  {
    "text": "practice within that project be it great or not uh and sometimes we own board on",
    "start": "196760",
    "end": "203040"
  },
  {
    "text": "maybe um old ways of doing things or unoptimal ways of approaching things and",
    "start": "203040",
    "end": "209760"
  },
  {
    "text": "and also let's not forget speaking of Stack over let's not forget that we've always been beginners at some point and",
    "start": "209760",
    "end": "215920"
  },
  {
    "text": "we're always beginners at something something new that we're learning some new techniques some new language some framework or so on and let's have some a",
    "start": "215920",
    "end": "223799"
  },
  {
    "text": "bit of patience and try to help each other and try to put ourselves in the",
    "start": "223799",
    "end": "230080"
  },
  {
    "text": "point of view of the other people asking questions and maybe use this opportunity",
    "start": "230080",
    "end": "235879"
  },
  {
    "text": "to re-evaluate some of the things that we've been taking for granted",
    "start": "235879",
    "end": "241400"
  },
  {
    "text": "and I don't know uh who saw the first series so this would be the the series",
    "start": "241400",
    "end": "247920"
  },
  {
    "text": "two of the uh C++ n Talk um last year I did at a bunch of conferences um a whole",
    "start": "247920",
    "end": "255480"
  },
  {
    "text": "other series and it all started with during the pandemic I got bored and I um",
    "start": "255480",
    "end": "261919"
  },
  {
    "text": "at some point I I told Jason that maybe we should do this kind of improv session where we would just rent and try out",
    "start": "261919",
    "end": "268520"
  },
  {
    "text": "different things and we ended up doing a very long stream I don't recommend you watch this it's very long uh but it was",
    "start": "268520",
    "end": "274720"
  },
  {
    "text": "fun uh we we tried a bunch of things we had fun uh we've had lots of interactions people were commenting",
    "start": "274720",
    "end": "280360"
  },
  {
    "text": "there and suggesting new things and of course there were some occasional mean things said there anyway um if you want",
    "start": "280360",
    "end": "288120"
  },
  {
    "text": "to digest uh and if you haven't seen the first part uh it's around um recording",
    "start": "288120",
    "end": "294479"
  },
  {
    "text": "in a bunch of versions from various conferences um",
    "start": "294479",
    "end": "300080"
  },
  {
    "text": "and these are the topics that I covered um in the first series um if any of",
    "start": "300080",
    "end": "305320"
  },
  {
    "text": "these are to of interest to you just uh feel free to to watch that uh at your own pace by the way uh all the slides",
    "start": "305320",
    "end": "313320"
  },
  {
    "text": "are full of full of links links to other presentations links to",
    "start": "313320",
    "end": "318800"
  },
  {
    "text": "articles um and reference implementations and some God B Lings as",
    "start": "318800",
    "end": "324520"
  },
  {
    "text": "well so uh when you get the slides feel free to click through uh and uh don't",
    "start": "324520",
    "end": "329600"
  },
  {
    "text": "don't worry just screenshotting now you you'll get a chance to click through them if you're interested in a",
    "start": "329600",
    "end": "336120"
  },
  {
    "text": "particular topic so the whole idea is I want to instigate a healthy dialogue here so do speak up um I'm here to",
    "start": "336120",
    "end": "342919"
  },
  {
    "text": "listen to other ways of doing things uh the format if you're not",
    "start": "342919",
    "end": "348240"
  },
  {
    "text": "familiar with the classic uh confirm busted and because we're programmers",
    "start": "348240",
    "end": "353639"
  },
  {
    "text": "plausible um okay I have a few test myths here uh C++ is inherently unsafe",
    "start": "353639",
    "end": "361919"
  },
  {
    "text": "and there's very little we can do about it uh actually we've known this years before NSA or nist or um not exactly",
    "start": "361919",
    "end": "370240"
  },
  {
    "text": "news to our community here um another one uh it's 2023 and we",
    "start": "370240",
    "end": "376800"
  },
  {
    "text": "should be able to Leverage The Power of C++ modules to restructure our code base and improveed build",
    "start": "376800",
    "end": "382960"
  },
  {
    "text": "throughput um yeah pretty much busted where are all the compilers by the way",
    "start": "382960",
    "end": "388280"
  },
  {
    "text": "uh highly recommend if you want to get the latest and greatest in in",
    "start": "388280",
    "end": "393599"
  },
  {
    "text": "conformance and availability in tool chains do watch Daniela talk tomorrow",
    "start": "393599",
    "end": "398759"
  },
  {
    "text": "morning U has modules in the name uh at 9:00 a.m. and there's a nice recent",
    "start": "398759",
    "end": "406199"
  },
  {
    "text": "article by one of my colleagues it's a case study of U office adopting header",
    "start": "406199",
    "end": "411919"
  },
  {
    "text": "units and there's a part three coming with uh some numbers and stats of build",
    "start": "411919",
    "end": "418000"
  },
  {
    "text": "through put improvements another test one uh Co routines shipped",
    "start": "418000",
    "end": "423479"
  },
  {
    "text": "in C++ 20 I chuckled at this uh uh tweet from olafur uh and I I very much feel",
    "start": "423479",
    "end": "432280"
  },
  {
    "text": "that I am in this camp and even uh today we had a a presentation by Andreas",
    "start": "432280",
    "end": "437560"
  },
  {
    "text": "fertic about routines I don't know have you been in there yeah for me this one was the one that",
    "start": "437560",
    "end": "445599"
  },
  {
    "text": "clicked and I I think I understood the most um but I've seen many versions of",
    "start": "445599",
    "end": "450639"
  },
  {
    "text": "Co routin talks so far uh this is the by far the best the",
    "start": "450639",
    "end": "456479"
  },
  {
    "text": "best captured representation of of the situation as usual Kevin is is is",
    "start": "456479",
    "end": "465400"
  },
  {
    "text": "Evergreen source of uh wisdom yeah so kind of it's plausible",
    "start": "465400",
    "end": "472159"
  },
  {
    "text": "we're going to get a generator library in 23 if you can afford to be there that",
    "start": "472159",
    "end": "477360"
  },
  {
    "text": "just solves just a tiny little ption of what you can do with co- routines uh",
    "start": "477360",
    "end": "482879"
  },
  {
    "text": "another pitch Tomorrow there's a um interesting presentation uh by Hann",
    "start": "482879",
    "end": "489159"
  },
  {
    "text": "duskova mark your calendars if you are interested in this kind of stuff you're going to see some really cool uh",
    "start": "489159",
    "end": "494800"
  },
  {
    "text": "examples I'm looking forward to that okay so I think you got it how it works let's dig um and uh one topic that",
    "start": "494800",
    "end": "503919"
  },
  {
    "text": "is forever important to me is uh tooling and a thing that I I iterated",
    "start": "503919",
    "end": "511440"
  },
  {
    "text": "last year and I have to do it again uh just because it's too important to me uh is that C++ is not easily toolable uh",
    "start": "511440",
    "end": "519320"
  },
  {
    "text": "and I've always been a tool Builder I've always built sdks developer tools IDs and so on so I do care about this a lot",
    "start": "519320",
    "end": "527399"
  },
  {
    "text": "and no matter at which spectrum of of these kinds of tools uh you're",
    "start": "527399",
    "end": "533320"
  },
  {
    "text": "interested in or where you find that your pain points are it's important to",
    "start": "533320",
    "end": "538800"
  },
  {
    "text": "really understand that c++'s problem is not lack of tooling or good tooling is",
    "start": "538800",
    "end": "545480"
  },
  {
    "text": "problem the problem is that we have too many tools and uh we kind of have to mix",
    "start": "545480",
    "end": "550959"
  },
  {
    "text": "and match we have to uh spend a bit of effort to figure out uh which one's the",
    "start": "550959",
    "end": "556560"
  },
  {
    "text": "best fit for us uh for our project for our needs maybe try out two two three",
    "start": "556560",
    "end": "562160"
  },
  {
    "text": "different things uh to they may have overlapping features or behavior uh we",
    "start": "562160",
    "end": "568120"
  },
  {
    "text": "might need to use them uh in some sort of combination so there's the problem is that there's no",
    "start": "568120",
    "end": "573920"
  },
  {
    "text": "clear best tool for x uh we kind of have to try them out and sometimes they might",
    "start": "573920",
    "end": "581120"
  },
  {
    "text": "be um I don't know very powerful but very difficult to uh learn or have very",
    "start": "581120",
    "end": "586959"
  },
  {
    "text": "poor documentation or usability issues otherwise they might be very ergonomic",
    "start": "586959",
    "end": "592360"
  },
  {
    "text": "but lack the the the power features and you kind of have to go through a",
    "start": "592360",
    "end": "597480"
  },
  {
    "text": "discovery process to learn a bunch of them um and figure out their strengths like if you figure out a particular tool",
    "start": "597480",
    "end": "604720"
  },
  {
    "text": "might be useful for your project or for your needs spend the extra effort to become a good user of that tool learn to",
    "start": "604720",
    "end": "612839"
  },
  {
    "text": "use it learn the power switches learn the common lines the hidden things the power knobs to actually make use of that",
    "start": "612839",
    "end": "620079"
  },
  {
    "text": "tool in depth a good starter kit if you're not aware of this resource uh",
    "start": "620079",
    "end": "626480"
  },
  {
    "text": "recommended uh Json has a um I think it's a it's a markdown in in",
    "start": "626480",
    "end": "632920"
  },
  {
    "text": "his repo of a list of I would say mainstream tools there",
    "start": "632920",
    "end": "638480"
  },
  {
    "text": "it's not an exhaustive list but the mainstream kind of things that you would need for a C++ for a generic C++ project",
    "start": "638480",
    "end": "646240"
  },
  {
    "text": "I put the link there and from the screenshot you see there's a bunch of them around if any of these sound",
    "start": "646240",
    "end": "653399"
  },
  {
    "text": "unfamiliar to you maybe spend a bit of time to just click through and see what's that all about about so I would",
    "start": "653399",
    "end": "661560"
  },
  {
    "text": "say the problem with C++ is not that it's not easily toolable or that we lack",
    "start": "661560",
    "end": "667000"
  },
  {
    "text": "maturity in the tools is that we have too many to choose from and we have to spend the time to to to become U",
    "start": "667000",
    "end": "674639"
  },
  {
    "text": "efficient with them okay moving on um periodic reminder",
    "start": "674639",
    "end": "681839"
  },
  {
    "text": "that you can interrupt me and um voice your your opinion at any",
    "start": "681839",
    "end": "687600"
  },
  {
    "text": "point uh another myth is that C++ is slow to compile um and depending on what",
    "start": "687600",
    "end": "693920"
  },
  {
    "text": "you're doing it can be very painful indeed uh but it's all about the",
    "start": "693920",
    "end": "699600"
  },
  {
    "text": "structure uh and the build configuration you have so I would from what I've seen",
    "start": "699600",
    "end": "706920"
  },
  {
    "text": "the majority of people think they know why their builds take too long they say h it's a crappy compiler or um we have",
    "start": "706920",
    "end": "715480"
  },
  {
    "text": "weird configuration or some particular needs in some way we want to build stuff",
    "start": "715480",
    "end": "721760"
  },
  {
    "text": "but you would be surprised um as with optimization in general build",
    "start": "721760",
    "end": "727480"
  },
  {
    "text": "optimization uh has the same kind of surprises so you actually need to use",
    "start": "727480",
    "end": "733040"
  },
  {
    "text": "tooling and and inspect to see what the culprits are it's sometimes it's not",
    "start": "733040",
    "end": "738959"
  },
  {
    "text": "what you think uh in in your build bottleneck the causes might surprise you so you need to use good um tooling and",
    "start": "738959",
    "end": "748079"
  },
  {
    "text": "investigation techniques to find out and figure out uh ways to improve I'm going to elaborate more on that um there's",
    "start": "748079",
    "end": "756320"
  },
  {
    "text": "multiple ways to improve your build output and to screw it up so uh again",
    "start": "756320",
    "end": "761639"
  },
  {
    "text": "depending on what you're doing and what your project how how it's set up so from",
    "start": "761639",
    "end": "767320"
  },
  {
    "text": "uh build configuration to uh the project graph dependencies um the way you use",
    "start": "767320",
    "end": "772880"
  },
  {
    "text": "compilation firewalls or Unity builds or the way you use pre-compiled headers um",
    "start": "772880",
    "end": "778120"
  },
  {
    "text": "if if you're misusing um header units you can um even the way you use build",
    "start": "778120",
    "end": "786199"
  },
  {
    "text": "caching you might think that you're improving your build but you might be hurting your build in in in certain um",
    "start": "786199",
    "end": "791959"
  },
  {
    "text": "workflows so you need to actually figure out what's going on and thoroughly",
    "start": "791959",
    "end": "797160"
  },
  {
    "text": "measure to see an experiment to see um what the underlying issues are and",
    "start": "797160",
    "end": "802399"
  },
  {
    "text": "people usually um use various build accelerators and file system te",
    "start": "802399",
    "end": "808800"
  },
  {
    "text": "techniques and all sorts of shortcuts and tricks uh but sometimes the the prescribed or",
    "start": "808800",
    "end": "815959"
  },
  {
    "text": "common wisdom accepted way of improving your bill might if you're rolling it out",
    "start": "815959",
    "end": "821120"
  },
  {
    "text": "uh without actually checking what's going on uh might actually be",
    "start": "821120",
    "end": "826240"
  },
  {
    "text": "detrimental um nice little tool if you're not familiar with it I put the link there um um it's it's a it's a good",
    "start": "826240",
    "end": "834959"
  },
  {
    "text": "way of gauging uh using or impact uh of",
    "start": "834959",
    "end": "840920"
  },
  {
    "text": "using certain standard uh headers and even some um third party libraries that",
    "start": "840920",
    "end": "847040"
  },
  {
    "text": "you might be using your project again this is not to be taken an absolute uh the absolute numbers are irrelevant just",
    "start": "847040",
    "end": "853880"
  },
  {
    "text": "to give you um a ballpark um impact of",
    "start": "853880",
    "end": "859199"
  },
  {
    "text": "certain things that you might be using and might be detrimental to to the build um again don't take it as absolute",
    "start": "859199",
    "end": "865800"
  },
  {
    "text": "things uh use it as a reference uh to and maybe see okay maybe I'm using these",
    "start": "865800",
    "end": "871680"
  },
  {
    "text": "headers or maybe I'm over including this uh and more on on tooling so I said use",
    "start": "871680",
    "end": "878759"
  },
  {
    "text": "tooling to investigate what's going on uh how many of you are familiar with clang F time",
    "start": "878759",
    "end": "885000"
  },
  {
    "text": "Trace see far fewer hands than needed okay um if you're using clang um you",
    "start": "885000",
    "end": "893600"
  },
  {
    "text": "should be familiar with with this and for for uh other tool chains I'm going to show similar things so there's F time",
    "start": "893600",
    "end": "901079"
  },
  {
    "text": "tra is a very powerful Tool uh but sometimes I hear that it's not as ergonomic not as friendly uh it's it's a",
    "start": "901079",
    "end": "909279"
  },
  {
    "text": "common line option and it prints very detailed report and some people have difficulty understanding and learning",
    "start": "909279",
    "end": "915399"
  },
  {
    "text": "how to use it and there's a very nice um I would say uh helper um clang build",
    "start": "915399",
    "end": "921839"
  },
  {
    "text": "analyzer which um has been U Upstream so it's part of Cl uh as of Version 9 I",
    "start": "921839",
    "end": "929800"
  },
  {
    "text": "think so uh Clank build anal it's it's a much friendlier Gateway into F time",
    "start": "929800",
    "end": "936000"
  },
  {
    "text": "Trace so it actually uses the same kind of thing underneath uh but it it's it's much easier to use the reports are much",
    "start": "936000",
    "end": "942959"
  },
  {
    "text": "friendlier much easier to understand to grasp and start building an intuition for how time is spent during compilation",
    "start": "942959",
    "end": "950000"
  },
  {
    "text": "in various stages of compilation uh where time is wasted or uh what kind of",
    "start": "950000",
    "end": "956040"
  },
  {
    "text": "things are keeping the compiler busy so um if you're not familiar with it um",
    "start": "956040",
    "end": "963160"
  },
  {
    "text": "there's good resources online um both blog post and documentation so uh get",
    "start": "963160",
    "end": "970040"
  },
  {
    "text": "familiar with it try it out uh see what it tells you about your project even",
    "start": "970040",
    "end": "975480"
  },
  {
    "text": "even if you think you don't have a problem with this it's good that you know how to use these kinds of tools uh",
    "start": "975480",
    "end": "981639"
  },
  {
    "text": "when you're going to need it uh if you're on Windows um there's um",
    "start": "981639",
    "end": "988560"
  },
  {
    "text": "similar thing uh VC perf anyone familiar with VC perf it's a it's an old thing",
    "start": "988560",
    "end": "995600"
  },
  {
    "text": "it's not new uh so B VC perf is a um a way of",
    "start": "995600",
    "end": "1001319"
  },
  {
    "text": "instrumenting a build session so it's sort of exterior is a kind of monitoring",
    "start": "1001319",
    "end": "1007480"
  },
  {
    "text": "system you start it up you do your build whatever setup configuration you have to build your stuff doesn't matter the the",
    "start": "1007480",
    "end": "1014240"
  },
  {
    "text": "build is separate from the monitoring session and just then it just dumps a big um Trace file on disk and this can",
    "start": "1014240",
    "end": "1021279"
  },
  {
    "text": "be fairly big like gigabytes big depending on how long the build takes uh",
    "start": "1021279",
    "end": "1026438"
  },
  {
    "text": "and then later on you can analyze um this Trace file uh using various tools",
    "start": "1026439",
    "end": "1033678"
  },
  {
    "text": "and one such uh standard tool on Windows is a Windows performance analyzer which is a a generic tool to examine such ETL",
    "start": "1033679",
    "end": "1041760"
  },
  {
    "text": "traces um in this particular scenario the trace contains compiler specific",
    "start": "1041760",
    "end": "1047079"
  },
  {
    "text": "emitted Diagnostics and timings uh but the tool um the WPA um analyzer is",
    "start": "1047079",
    "end": "1054120"
  },
  {
    "text": "generic and it's you can find it in the store app it's very easy to to set it up",
    "start": "1054120",
    "end": "1060160"
  },
  {
    "text": "and install it the problem is that it's kind of a power user tool so most people",
    "start": "1060160",
    "end": "1066000"
  },
  {
    "text": "when when they use it and they open up a trace they so many tabs so many columns it's kind of overwhelming and uh",
    "start": "1066000",
    "end": "1074360"
  },
  {
    "text": "there's very precious information there but it's definitely not user friendly so so it it's it has a a steep learning",
    "start": "1074360",
    "end": "1080559"
  },
  {
    "text": "curve so uh you kind of have to know which tabs to look at what columns are",
    "start": "1080559",
    "end": "1086000"
  },
  {
    "text": "important how to sort what to filter out and you will find the information there but it's not user friendly at least not",
    "start": "1086000",
    "end": "1093840"
  },
  {
    "text": "as a beginner using these kinds of things uh and that's why uh we're building a better experience better in",
    "start": "1093840",
    "end": "1100919"
  },
  {
    "text": "terms of more approachable in inside vs so uh vs now has built-in support for bu",
    "start": "1100919",
    "end": "1108559"
  },
  {
    "text": "insights and can Surface the same kind of information but in a much more simplified way and much more actionable",
    "start": "1108559",
    "end": "1115520"
  },
  {
    "text": "uh it's integrated with the ID so it has all the expected code navigation um",
    "start": "1115520",
    "end": "1121200"
  },
  {
    "text": "facilities and it has a much simplified user experience far fewer columns only",
    "start": "1121200",
    "end": "1126480"
  },
  {
    "text": "the thing that you would it would matter for you at least at at first uh stage of",
    "start": "1126480",
    "end": "1132039"
  },
  {
    "text": "um doing this analysis and and it gives you a better gateway to these kinds of",
    "start": "1132039",
    "end": "1138559"
  },
  {
    "text": "uh investigations so it gives you uh information about includes you would see",
    "start": "1138559",
    "end": "1144120"
  },
  {
    "text": "which kinds of includes are hot in in in your project and uh if you're misusing",
    "start": "1144120",
    "end": "1149919"
  },
  {
    "text": "um the include graph or if how if you're properly using PCH configuration and so",
    "start": "1149919",
    "end": "1155400"
  },
  {
    "text": "on um you can even drill down into functions to see how functions are uh in",
    "start": "1155400",
    "end": "1161679"
  },
  {
    "text": "lined um some people for performance reasons lies to like to abuse force in",
    "start": "1161679",
    "end": "1166799"
  },
  {
    "text": "lining you know who you are uh and this kind of tool will show you when this",
    "start": "1166799",
    "end": "1172720"
  },
  {
    "text": "extra time is spent and what kinds of consequence it has for the build",
    "start": "1172720",
    "end": "1179039"
  },
  {
    "text": "throughput uh so yeah it it will help um and for another",
    "start": "1179039",
    "end": "1186480"
  },
  {
    "text": "way of approaching things so things like uh VC perf and building",
    "start": "1186480",
    "end": "1192200"
  },
  {
    "text": "sites are tools that can do wholesale analysis like they they can do uh",
    "start": "1192200",
    "end": "1197440"
  },
  {
    "text": "analysis on your whole project and and do things kind of in batches but you can",
    "start": "1197440",
    "end": "1202679"
  },
  {
    "text": "also do these kinds of things as your editing so you can do at things at design time when you're in the source",
    "start": "1202679",
    "end": "1209080"
  },
  {
    "text": "code things like include cleanup and uh how many are familiar with um include",
    "start": "1209080",
    "end": "1214400"
  },
  {
    "text": "cleanup like tools like like include what you see yeah yeah include what you",
    "start": "1214400",
    "end": "1220000"
  },
  {
    "text": "use sorry um okay so we know the problems with these kinds of tools and",
    "start": "1220000",
    "end": "1226080"
  },
  {
    "text": "uh we have yet another tool um so no no tool like this is ever perfect uh but",
    "start": "1226080",
    "end": "1232679"
  },
  {
    "text": "this is our attempt of um providing such a workflow for design time where you can",
    "start": "1232679",
    "end": "1240480"
  },
  {
    "text": "uh you can see in the editor I don't know if the projector is good enough so you see that some of the includes are",
    "start": "1240480",
    "end": "1247320"
  },
  {
    "text": "dimmed um that's configurable in the ID but by default some includes are dimed so the ones that uh we notice that are",
    "start": "1247320",
    "end": "1254480"
  },
  {
    "text": "not contributing to this particular source file uh are going to be deemed and you have in editor controls to",
    "start": "1254480",
    "end": "1263200"
  },
  {
    "text": "remove and do this clean up and of course no such tool as I said No Such tool is perfect and we're trying to",
    "start": "1263200",
    "end": "1269919"
  },
  {
    "text": "build uh a great experience for this but um you do have to try it out and um see",
    "start": "1269919",
    "end": "1277360"
  },
  {
    "text": "how it works for you uh if you care about these kinds of stuff I do recommend this presentation",
    "start": "1277360",
    "end": "1284799"
  },
  {
    "text": "uh by Victorio uh it covers a lot of ground uh not just tooling also techniques that",
    "start": "1284799",
    "end": "1291600"
  },
  {
    "text": "you can use in code uh to improve build throughput so there's",
    "start": "1291600",
    "end": "1297279"
  },
  {
    "text": "various kinds of things that you can do this is an an hour and a half talk so definitely I cannot cover this but",
    "start": "1297279",
    "end": "1303279"
  },
  {
    "text": "Victoria did a great job so I highly recommend uh watching",
    "start": "1303279",
    "end": "1308760"
  },
  {
    "text": "this uh so yeah U C++ can be slow to compile but um if you put some work on",
    "start": "1308760",
    "end": "1315440"
  },
  {
    "text": "it and if you're leveraging some good tooling you can drastically improve it",
    "start": "1315440",
    "end": "1322600"
  },
  {
    "text": "yep depends on the project depends on the project yeah uh a lot of time can be",
    "start": "1332039",
    "end": "1338120"
  },
  {
    "text": "spent in in optimization stages and also in linking uh and but includes are uh a",
    "start": "1338120",
    "end": "1347000"
  },
  {
    "text": "frequent way where we see that projects get stalled during compilation but of course link can be a",
    "start": "1347000",
    "end": "1354559"
  },
  {
    "text": "big bottleneck and and optimizations as",
    "start": "1354559",
    "end": "1359080"
  },
  {
    "text": "well exactly exactly",
    "start": "1362360",
    "end": "1368520"
  },
  {
    "text": "yeah yeah uh I'm going to tell that on on on record so the comment was that uh",
    "start": "1374120",
    "end": "1380360"
  },
  {
    "text": "linking is a big compilation bottleneck if you're doing um link time code",
    "start": "1380360",
    "end": "1385919"
  },
  {
    "text": "optimization so or whole whole program optimization so yeah because that's",
    "start": "1385919",
    "end": "1390960"
  },
  {
    "text": "where the majority of the time will be spent and some some parts of that pipeline are not paralyzable but",
    "start": "1390960",
    "end": "1398000"
  },
  {
    "text": "improvements have been made and yes the comment about uh building tests is is relevant yeah with tests you need to be",
    "start": "1398000",
    "end": "1404960"
  },
  {
    "text": "even more careful because with individual test driers you don't care about whole thing optimization for test",
    "start": "1404960",
    "end": "1412039"
  },
  {
    "text": "units all right uh moving on um the sad state of debug performance in C++ this",
    "start": "1412039",
    "end": "1418559"
  },
  {
    "text": "is another common theme we've been hearing this for many years now uh I",
    "start": "1418559",
    "end": "1423720"
  },
  {
    "text": "just want to pick one example of the zero cost abstraction is kind of a lie",
    "start": "1423720",
    "end": "1429200"
  },
  {
    "text": "for debug builds um uh again it was a blog post by uh same Victorio um just",
    "start": "1429200",
    "end": "1436880"
  },
  {
    "text": "coincidence uh he's not a troublemaker I can assure you uh it's I don't know if you read",
    "start": "1436880",
    "end": "1443440"
  },
  {
    "text": "this block post but it's basically about um the cost of using um Primitives like",
    "start": "1443440",
    "end": "1450000"
  },
  {
    "text": "standard move and standard forward in debug builds uh in release builds this is a nonissue because all these kinds of",
    "start": "1450000",
    "end": "1457000"
  },
  {
    "text": "functions are in lined way and it it doesn't matter but for debug builds",
    "start": "1457000",
    "end": "1462480"
  },
  {
    "text": "these end up being function calls uh where we actually mean for them to be",
    "start": "1462480",
    "end": "1467960"
  },
  {
    "text": "some fancy casts right what we actually mean to tell the compiler is do that thing that's on the bottom right hand",
    "start": "1467960",
    "end": "1475520"
  },
  {
    "text": "corner so uh why does it matter because uh people care about the performance of",
    "start": "1475520",
    "end": "1481200"
  },
  {
    "text": "debug builds um and because they they want to debugs their stuff and sometimes",
    "start": "1481200",
    "end": "1488279"
  },
  {
    "text": "the performance on debug build is s so so horrible that they cannot actually",
    "start": "1488279",
    "end": "1493399"
  },
  {
    "text": "run properly run their applications on debug probably most famous famous examples are games who cannot sustain",
    "start": "1493399",
    "end": "1500679"
  },
  {
    "text": "acceptable frame rates on on debug builds and they do all sorts of tricks to to tackle that more on that later so",
    "start": "1500679",
    "end": "1508840"
  },
  {
    "text": "what we want is to have these functions behave as if they're just cast or",
    "start": "1508840",
    "end": "1514440"
  },
  {
    "text": "intrinsics uh even on debug builds and and up until not long ago uh you're",
    "start": "1514440",
    "end": "1521559"
  },
  {
    "text": "going to see not very old versions of uh GCC clang and msvc so these are not very",
    "start": "1521559",
    "end": "1527080"
  },
  {
    "text": "old versions uh all these things and by the way this is uh o zero so no",
    "start": "1527080",
    "end": "1533960"
  },
  {
    "text": "optimizations all these things are actually function calls and they do come",
    "start": "1533960",
    "end": "1539000"
  },
  {
    "text": "come with a cost uh in more recent versions and the versions are listed there I'm not going to read them um in",
    "start": "1539000",
    "end": "1546440"
  },
  {
    "text": "msvc and Clank now uh they are able to recognize these functions as special and",
    "start": "1546440",
    "end": "1553360"
  },
  {
    "text": "they will emit uh code accordingly avoiding a function call uh gcca my",
    "start": "1553360",
    "end": "1559240"
  },
  {
    "text": "understanding is that this is in the works and it's going to come soon uh so in um word on implementation",
    "start": "1559240",
    "end": "1568679"
  },
  {
    "text": "Choice here um for example in clang the decision was to treat this as special",
    "start": "1568679",
    "end": "1574399"
  },
  {
    "text": "functions uh as intrinsics and do the compilation magic to avoid the function goal uh in msvc we took the another",
    "start": "1574399",
    "end": "1582200"
  },
  {
    "text": "approach of using a um implementation specific attribute msvc intr",
    "start": "1582200",
    "end": "1588120"
  },
  {
    "text": "for the purpose of uh having this mechanism be extendable because we heard",
    "start": "1588120",
    "end": "1593440"
  },
  {
    "text": "users who have similar move and forwarding functions of their own not",
    "start": "1593440",
    "end": "1599559"
  },
  {
    "text": "the standard ones you know who you are game developers uh and they want to",
    "start": "1599559",
    "end": "1606080"
  },
  {
    "text": "leverage the same kind of um compiler optimization so they would want to decorate their own uh such functions uh",
    "start": "1606080",
    "end": "1615200"
  },
  {
    "text": "with this attribute and leverage the same mechanism if you want want to learn more there's a link to a short video",
    "start": "1615200",
    "end": "1620760"
  },
  {
    "text": "presentation and a blog post about it so this is just one part of the said",
    "start": "1620760",
    "end": "1628200"
  },
  {
    "text": "story of debug uh performance for C++ there's more stuff uh around this um so",
    "start": "1628200",
    "end": "1635640"
  },
  {
    "text": "there's there's continuous effort uh in all tool vendors to provide um there's a",
    "start": "1635640",
    "end": "1641960"
  },
  {
    "text": "question uh so there's a continuous effort for from all tool vendors to provide a better experience and there",
    "start": "1641960",
    "end": "1648120"
  },
  {
    "text": "are various mechanisms in various compiler tool chains to achieve sort of",
    "start": "1648120",
    "end": "1653240"
  },
  {
    "text": "a compromise between we want some optimizations so that the big debug bills don't suck as much and at the same",
    "start": "1653240",
    "end": "1661200"
  },
  {
    "text": "time be able to debug them so we have uh better way of debugging in because we",
    "start": "1661200",
    "end": "1668000"
  },
  {
    "text": "know that debugging release code is not easy there was a question in the",
    "start": "1668000",
    "end": "1673398"
  },
  {
    "text": "back",
    "start": "1676519",
    "end": "1679519"
  },
  {
    "text": "yeah",
    "start": "1697000",
    "end": "1700000"
  },
  {
    "text": "yeah that's that's a tooling uh issue and it has been solved in uh a bunch of",
    "start": "1703279",
    "end": "1709120"
  },
  {
    "text": "debuggers that I'm aware of so uh uh in in uh the visual studio debugger this is",
    "start": "1709120",
    "end": "1716000"
  },
  {
    "text": "implemented as something called just my code and a bunch of such standard uh",
    "start": "1716000",
    "end": "1721200"
  },
  {
    "text": "Library facilities are uh identified as not your code and by default the",
    "start": "1721200",
    "end": "1726480"
  },
  {
    "text": "debugger will not step into them so it will pass through uh through such adapter functions and there's similar",
    "start": "1726480",
    "end": "1733399"
  },
  {
    "text": "things in other debuggers as well I don't know their commercial names uh so it's not a unique thing so it it it will",
    "start": "1733399",
    "end": "1741799"
  },
  {
    "text": "work uh and it's a tooling thing um so",
    "start": "1741799",
    "end": "1747000"
  },
  {
    "text": "debuggers can work with many of these things and we'll just pass through them",
    "start": "1747000",
    "end": "1753000"
  },
  {
    "text": "uh and not just these functions there's many other functions that are considered not your code there's a heuristic on",
    "start": "1753000",
    "end": "1759039"
  },
  {
    "text": "what is detected as not being your code and you can actually uh contribute that so there's debugger profiles that you",
    "start": "1759039",
    "end": "1765799"
  },
  {
    "text": "can edit yourself and tell it about more stuff that for the tool chain it looks",
    "start": "1765799",
    "end": "1772320"
  },
  {
    "text": "like it's your code but you consider it's Library I don't want to step into that it's maybe I don't know game engine",
    "start": "1772320",
    "end": "1777840"
  },
  {
    "text": "code I don't want to step into that I want to go to go through it and reach my code so there's even extensibility",
    "start": "1777840",
    "end": "1784799"
  },
  {
    "text": "points in the buers where you can tell it tell them what to do and with this",
    "start": "1784799",
    "end": "1789840"
  },
  {
    "text": "stepping behavior all right an interesting one uh",
    "start": "1789840",
    "end": "1795919"
  },
  {
    "text": "and we've heard uh uh today about this topic as well so C++ will never be a",
    "start": "1795919",
    "end": "1800960"
  },
  {
    "text": "safe language and by safe there's many things here like type safety bound",
    "start": "1800960",
    "end": "1806080"
  },
  {
    "text": "safety lifetime safety thread safety many kinds of safety uh and um if you",
    "start": "1806080",
    "end": "1813360"
  },
  {
    "text": "followed um Robert's keynote this morning uh you've probably seen uh a",
    "start": "1813360",
    "end": "1819000"
  },
  {
    "text": "bunch of ideas there uh other talks that covered the subject",
    "start": "1819000",
    "end": "1825279"
  },
  {
    "text": "and uh I thought they were uh um very good at least I I like them are these",
    "start": "1825279",
    "end": "1833360"
  },
  {
    "text": "um I particularly chose that screenshot with Sean pointing like that uh and",
    "start": "1833360",
    "end": "1841120"
  },
  {
    "text": "there's I think all of them are now online maybe Tores is not yet online but",
    "start": "1841120",
    "end": "1847720"
  },
  {
    "text": "um all of them are probably online so um do look them up if you care about this",
    "start": "1847720",
    "end": "1853640"
  },
  {
    "text": "subject um I would say that the one of the things that we need to acknowledge with",
    "start": "1853640",
    "end": "1860159"
  },
  {
    "text": "C++ is that um undefined behavior and uh even uh during the panel last night if",
    "start": "1860159",
    "end": "1867519"
  },
  {
    "text": "you've been there this has been discussed uh and in this morning's keynote so until we have addressed um UB",
    "start": "1867519",
    "end": "1876600"
  },
  {
    "text": "and we have eliminated all UB in the language we cannot really say uh C++ will be uh",
    "start": "1876600",
    "end": "1883760"
  },
  {
    "text": "safe as a whole so and because we we cannot eliminate all UB for",
    "start": "1883760",
    "end": "1890240"
  },
  {
    "text": "reasons uh and and some of them have been thoroughly uh exposed um C++ will",
    "start": "1890240",
    "end": "1897159"
  },
  {
    "text": "inherently never be a safe language and we have to make our peace with that uh because it's it's a tradeoff uh we we",
    "start": "1897159",
    "end": "1905480"
  },
  {
    "text": "kind of have to choose between uh performance uh and and compatibility and",
    "start": "1905480",
    "end": "1911760"
  },
  {
    "text": "uh portable com um and all sort all sorts of desirable qualities for our C++",
    "start": "1911760",
    "end": "1919080"
  },
  {
    "text": "generated code and uh save C++ code so",
    "start": "1919080",
    "end": "1924120"
  },
  {
    "text": "we're never going to be there um we have to make our piece with it and strive to to to build better code more on that u",
    "start": "1924120",
    "end": "1933799"
  },
  {
    "text": "in a minute U if you care about this uh in and you want to read a proper",
    "start": "1933799",
    "end": "1940120"
  },
  {
    "text": "treaties of this in in written format I recommend this article by quarantine Jabo um it's a fairly long article but",
    "start": "1940120",
    "end": "1948240"
  },
  {
    "text": "very very good um it's it's about some of the Dogma around safety and C++ some",
    "start": "1948240",
    "end": "1955760"
  },
  {
    "text": "of the realities some of the unavoidable uh yucky parts and of course",
    "start": "1955760",
    "end": "1961760"
  },
  {
    "text": "um um talks about UB and um bounding and unbounding undefined",
    "start": "1961760",
    "end": "1969360"
  },
  {
    "text": "behavior in general uh if we're maybe restricting this this discussion to",
    "start": "1969360",
    "end": "1975760"
  },
  {
    "text": "Lifetime safety because a lot of the discussion on on memory safety is about lifetime",
    "start": "1975760",
    "end": "1980960"
  },
  {
    "text": "safety uh there's many approaches in in general that various uh programming",
    "start": "1980960",
    "end": "1986720"
  },
  {
    "text": "languages out there take to to Lifetime safety uh some uh languages and",
    "start": "1986720",
    "end": "1992120"
  },
  {
    "text": "Frameworks use garbage collection um uh we have dynamic memory an analysis that",
    "start": "1992120",
    "end": "1998799"
  },
  {
    "text": "we can use uh things like add sanitizer uh we can statically enforce um rules on",
    "start": "1998799",
    "end": "2006240"
  },
  {
    "text": "on on refence ref es either accept a unique mutable reference or multiple",
    "start": "2006240",
    "end": "2011480"
  },
  {
    "text": "immutable references uh and depending on where you see these in in which programming",
    "start": "2011480",
    "end": "2018480"
  },
  {
    "text": "languages uh you might have them being enforced by the compiler and language uh",
    "start": "2018480",
    "end": "2024240"
  },
  {
    "text": "for example rust borrow Checker or by the way you define value semantics in",
    "start": "2024240",
    "end": "2030559"
  },
  {
    "text": "the language uh for example um like we have in uh in um formal known Val uh now",
    "start": "2030559",
    "end": "2038919"
  },
  {
    "text": "known as Hyo I guess it's pronounced Hyo uh or uh just outright this",
    "start": "2038919",
    "end": "2046840"
  },
  {
    "text": "disallowing direct mutation um like pure functional programming languages do and",
    "start": "2046840",
    "end": "2052240"
  },
  {
    "text": "Implement U mutation through um the type system uh using things like ion ads and",
    "start": "2052240",
    "end": "2060800"
  },
  {
    "text": "for programming languages like C++ uh this comes down to tooling again um",
    "start": "2060800",
    "end": "2067839"
  },
  {
    "text": "we're in the category of static analysis here static lifetime analysis there's",
    "start": "2067839",
    "end": "2073599"
  },
  {
    "text": "bunch of tools out there uh from Clank tidy msvc built-in tooling and lots of",
    "start": "2073599",
    "end": "2079720"
  },
  {
    "text": "commercial um um static analyzers uh each with its uh strengths strengths and",
    "start": "2079720",
    "end": "2087679"
  },
  {
    "text": "and uh sets of buil-in uh detect detection and heuristics and of course",
    "start": "2087679",
    "end": "2092919"
  },
  {
    "text": "false positives because uh static analysis tools cannot be uh without uh",
    "start": "2092919",
    "end": "2099520"
  },
  {
    "text": "false positives uh and I would say uh when it comes to uh our current concerns for for",
    "start": "2099520",
    "end": "2109119"
  },
  {
    "text": "C++ I I would I would say we have to have in mind a new AAA for C++ and that",
    "start": "2109119",
    "end": "2116000"
  },
  {
    "text": "should be almost always analyzed and there's various uh C+ plus security",
    "start": "2116000",
    "end": "2121520"
  },
  {
    "text": "technologies that uh we can use depending on tool chain and platform um",
    "start": "2121520",
    "end": "2128040"
  },
  {
    "text": "I there's I have a talk here that I can recommend that I liked I I had a",
    "start": "2128040",
    "end": "2133760"
  },
  {
    "text": "presentation during the pandemic about asan if you're curious about how it works under under the hood how asan",
    "start": "2133760",
    "end": "2141160"
  },
  {
    "text": "Works how trapping occurs how um um such uh Frameworks use uh Shadow memory and",
    "start": "2141160",
    "end": "2148480"
  },
  {
    "text": "and and poisoned um regions to detect out of bands accesses so on so if you're",
    "start": "2148480",
    "end": "2153680"
  },
  {
    "text": "interested in mechanics you can watch this presentation uh a somewhat recent development for uh Dynamic analysis um",
    "start": "2153680",
    "end": "2162000"
  },
  {
    "text": "is continue and error because uh in in many situations so the usual behavior of",
    "start": "2162000",
    "end": "2169319"
  },
  {
    "text": "um tools like add sanitizer is to trap when they detect such accesses in in in",
    "start": "2169319",
    "end": "2175720"
  },
  {
    "text": "poisoned Shadow memory and they would trap and just terminate the process with a",
    "start": "2175720",
    "end": "2181000"
  },
  {
    "text": "report and this is useful uh but at the same time it's not ionomic because if",
    "start": "2181000",
    "end": "2187960"
  },
  {
    "text": "you're using this as part of your cicd pipeline and you're doing asan maybe",
    "start": "2187960",
    "end": "2193280"
  },
  {
    "text": "fuzzing somewhere uh in uh in in cicd then just stopping uh such a process uh",
    "start": "2193280",
    "end": "2200040"
  },
  {
    "text": "at the first problem it's it's not practical because you get a report you say h it's obvious okay I I I'm I'm",
    "start": "2200040",
    "end": "2206640"
  },
  {
    "text": "going to fix this and uh do a a PR and then run it again and you're wasting a",
    "start": "2206640",
    "end": "2211880"
  },
  {
    "text": "lot of time just back and forth because probably that's not the only uh ASN",
    "start": "2211880",
    "end": "2218040"
  },
  {
    "text": "issue that's going to be detected so Contin error is a mechanism to to",
    "start": "2218040",
    "end": "2223680"
  },
  {
    "text": "allow process execution and collect many such violations and have like a batch uh",
    "start": "2223680",
    "end": "2231000"
  },
  {
    "text": "Report with all of them so that you can address them in bulk so it's just a more efficient way of working with this uh",
    "start": "2231000",
    "end": "2238280"
  },
  {
    "text": "link to another short talk about the topic uh if we're talking about static",
    "start": "2238280",
    "end": "2243920"
  },
  {
    "text": "analysis um there's there's like I mentioned there's a lot of usually",
    "start": "2243920",
    "end": "2249200"
  },
  {
    "text": "there's a lot of false positives uh and the tools try very hard to have Smart uh",
    "start": "2249200",
    "end": "2256599"
  },
  {
    "text": "heuristics and algorithms to figure out uh what to alarm you about but they can",
    "start": "2256599",
    "end": "2263000"
  },
  {
    "text": "only do so much because C++ is not an easy language to to reason about and in",
    "start": "2263000",
    "end": "2268920"
  },
  {
    "text": "following references and pointers and doing uh Escape analysis and lifetime",
    "start": "2268920",
    "end": "2274000"
  },
  {
    "text": "tracking it's it's very difficult sometimes so there's mechanism where you can help uh static analyzers again using",
    "start": "2274000",
    "end": "2281960"
  },
  {
    "text": "some custom attributes Clank has um had this for a while now a lifetime bound",
    "start": "2281960",
    "end": "2288960"
  },
  {
    "text": "attribute uh and msbc has uh a similar one again if you're interested in the",
    "start": "2288960",
    "end": "2294760"
  },
  {
    "text": "topic um like a 20 minute presentation and some resources there to",
    "start": "2294760",
    "end": "2301000"
  },
  {
    "text": "navigate so C++ will never be safe and we will never have guarantees but we can",
    "start": "2301000",
    "end": "2308720"
  },
  {
    "text": "build a better uh a better um a better program build more",
    "start": "2308720",
    "end": "2315839"
  },
  {
    "text": "confidence that what we have is safer using good tooling of",
    "start": "2315839",
    "end": "2320880"
  },
  {
    "text": "course and now we're getting to the interesting part uh I I don't think rust",
    "start": "2320880",
    "end": "2326880"
  },
  {
    "text": "was mentioned enough at this conference so um when the CTO of azure",
    "start": "2326880",
    "end": "2334720"
  },
  {
    "text": "posts um a tweet like that people usually listen um and I think they're sometimes",
    "start": "2334720",
    "end": "2342920"
  },
  {
    "text": "overly enthusiastic uh about uh such efforts uh but there's some there's some",
    "start": "2342920",
    "end": "2350680"
  },
  {
    "text": "truth behind it and I'm going to show some real um efforts uh towards",
    "start": "2350680",
    "end": "2357480"
  },
  {
    "text": "rust um they they care a lot about uh things",
    "start": "2357480",
    "end": "2364000"
  },
  {
    "text": "like uh rust not because not just because of uh memory vulnerability or memory safety uh some projects that's a",
    "start": "2364000",
    "end": "2372400"
  },
  {
    "text": "big concern of course um but some projects do care about rust also for efficiency for example lots of um um",
    "start": "2372400",
    "end": "2381040"
  },
  {
    "text": "Services out there who have tremendous scaling issues and tremendous costs of",
    "start": "2381040",
    "end": "2386800"
  },
  {
    "text": "of running those Services just because of the scale uh and those services are written in maybe managed languages some",
    "start": "2386800",
    "end": "2394040"
  },
  {
    "text": "of them are written in in c.net Java go whatever they're interested in things",
    "start": "2394040",
    "end": "2399640"
  },
  {
    "text": "like rust to save a lot of money um and this article is about uh secure cloud",
    "start": "2399640",
    "end": "2406680"
  },
  {
    "text": "computing uh it's a very long article it's a good one uh I would say the gist of it is that uh you build trust by",
    "start": "2406680",
    "end": "2412720"
  },
  {
    "text": "using rust um no kidding that's just St it um",
    "start": "2412720",
    "end": "2419880"
  },
  {
    "text": "and uh I'm going to show a bunch of ways uh rust has script in uh and how various",
    "start": "2419880",
    "end": "2428280"
  },
  {
    "text": "teams are projects are are actively looking at it so rust already is in the",
    "start": "2428280",
    "end": "2434359"
  },
  {
    "text": "windows 11 kernel so there's a bunch of things uh that are implemented in Rust",
    "start": "2434359",
    "end": "2439720"
  },
  {
    "text": "and you can spot them easily uh rust is in the Linux kernel in",
    "start": "2439720",
    "end": "2447359"
  },
  {
    "text": "6.1 um and uh even in Android uh I'm going to",
    "start": "2447359",
    "end": "2454400"
  },
  {
    "text": "have some information about that as well so uh I I can disclose some information",
    "start": "2454400",
    "end": "2459839"
  },
  {
    "text": "because it's already publicly uh available so there are a bunch of components from Windows who have been",
    "start": "2459839",
    "end": "2466480"
  },
  {
    "text": "Rewritten in Rust um there are two",
    "start": "2466480",
    "end": "2471880"
  },
  {
    "text": "important examples direct right and GDI these are fairly core components of the",
    "start": "2471880",
    "end": "2478079"
  },
  {
    "text": "operating system and at least one of them is very old I think it's old it's older than",
    "start": "2478079",
    "end": "2484160"
  },
  {
    "text": "me um so bringing rust into Windows of course for",
    "start": "2484160",
    "end": "2489640"
  },
  {
    "text": "stability concerns and avoiding memory vulnerabilities and exploits uh it's a",
    "start": "2489640",
    "end": "2496480"
  },
  {
    "text": "it's a staged approach where you um you learn how to crawl before you learn how",
    "start": "2496480",
    "end": "2503240"
  },
  {
    "text": "to run so you you kind of have to do exploration to see okay uh what are the",
    "start": "2503240",
    "end": "2509000"
  },
  {
    "text": "costs of learning rust uh what are the costs of porting to rust um of",
    "start": "2509000",
    "end": "2514319"
  },
  {
    "text": "maintaining a a mixed source code of C++ and rust uh what are the the the",
    "start": "2514319",
    "end": "2520880"
  },
  {
    "text": "performance implications and and so on so it it's not an easy process but it's",
    "start": "2520880",
    "end": "2527640"
  },
  {
    "text": "it's it's we're already on that path so uh the first experiment that was done",
    "start": "2527640",
    "end": "2533760"
  },
  {
    "text": "was with uh direct right just because it's a much better defined in terms of",
    "start": "2533760",
    "end": "2539480"
  },
  {
    "text": "boundary component of the operating system this is uh component this component is responsible for all um text",
    "start": "2539480",
    "end": "2546240"
  },
  {
    "text": "layout rendering uh in in Windows uh but it's a it's not a very old component",
    "start": "2546240",
    "end": "2551920"
  },
  {
    "text": "it's it's fairly recent I think it was developed during the Vista time frame so",
    "start": "2551920",
    "end": "2557760"
  },
  {
    "text": "it's a post 2000s component uh written in C++ uh and this was the first",
    "start": "2557760",
    "end": "2564200"
  },
  {
    "text": "experiment uh that was Rewritten in Rust um and um it was",
    "start": "2564200",
    "end": "2572079"
  },
  {
    "text": "a cautious and long uh long process uh",
    "start": "2572079",
    "end": "2577800"
  },
  {
    "text": "but it it was deemed a success and because um most things in in in",
    "start": "2577800",
    "end": "2586079"
  },
  {
    "text": "Windows kind of have an an an com surface and you can interact with them",
    "start": "2586079",
    "end": "2592760"
  },
  {
    "text": "through com uh this is one such case and and this component has projections both",
    "start": "2592760",
    "end": "2599559"
  },
  {
    "text": "in Native and as well as uh projections to be consumed uh through com interfaces",
    "start": "2599559",
    "end": "2605160"
  },
  {
    "text": "and and um to be used in even in uwp and um",
    "start": "2605160",
    "end": "2611520"
  },
  {
    "text": "modern kinds of UI applications on Windows com actually provided a nice boundary for uh interrupt with C++",
    "start": "2611520",
    "end": "2619680"
  },
  {
    "text": "because uh all these components even one like this one which is fairly well",
    "start": "2619680",
    "end": "2626720"
  },
  {
    "text": "carved out and sort of independent has to interact at some point with with",
    "start": "2626720",
    "end": "2632200"
  },
  {
    "text": "other apis with other parts of the system and the the boundary was a good",
    "start": "2632200",
    "end": "2637319"
  },
  {
    "text": "place to figure out how the interrupt storage should happen and uh you should",
    "start": "2637319",
    "end": "2644359"
  },
  {
    "text": "be able to call C++ code from from from Ras code and uh vice versa and uh",
    "start": "2644359",
    "end": "2651400"
  },
  {
    "text": "there's there's been lots of experimentation here and and figuring out a good techniques and uh it turns",
    "start": "2651400",
    "end": "2660920"
  },
  {
    "text": "out it's not as hard as as people thought usually people think that um C++",
    "start": "2660920",
    "end": "2667160"
  },
  {
    "text": "rust interrupt is very difficult um it it it has its challenges and of course",
    "start": "2667160",
    "end": "2674000"
  },
  {
    "text": "those are the places where you will have unsafe blocks in Rust and so on and less",
    "start": "2674000",
    "end": "2679319"
  },
  {
    "text": "guarantees about things that will happen and because it's a gradual process when",
    "start": "2679319",
    "end": "2685000"
  },
  {
    "text": "you begin it it kind of looks awful and you kind of panic because you end up having lots of unsafe regions and unsafe",
    "start": "2685000",
    "end": "2693440"
  },
  {
    "text": "bits when you interact because it's it's a gradual rewrite process but as you rewrite more and more stuff you reduce",
    "start": "2693440",
    "end": "2700880"
  },
  {
    "text": "the amount of interrupt that you need to do because you you end up having fewer",
    "start": "2700880",
    "end": "2706240"
  },
  {
    "text": "um uh such um interrup boundaries as you rewrite more and more stuff in Rust so",
    "start": "2706240",
    "end": "2713880"
  },
  {
    "text": "it it's not as scary as it seems when when you're embarking such a",
    "start": "2713880",
    "end": "2720160"
  },
  {
    "text": "project the second experiment in this one uh was a bit trickier uh because the",
    "start": "2720160",
    "end": "2726599"
  },
  {
    "text": "the GDI component which is responsible for all Tod rendering in in the operating",
    "start": "2726599",
    "end": "2732440"
  },
  {
    "text": "system this is a very old component like um ' 80s during I think it was developed",
    "start": "2732440",
    "end": "2739720"
  },
  {
    "text": "during the ' 80s uh and it's written in uh C++ NC and um of course it has a much larger",
    "start": "2739720",
    "end": "2748000"
  },
  {
    "text": "surface area so this is is a much riskier project uh and uh efforts to to",
    "start": "2748000",
    "end": "2755400"
  },
  {
    "text": "uh rewrite WR this um um have have are are more um complex uh and uh",
    "start": "2755400",
    "end": "2764920"
  },
  {
    "text": "but this experiment is um also okay officially I don't know if",
    "start": "2764920",
    "end": "2771839"
  },
  {
    "text": "this is complete but it's almost there and um uh a lot of changes have been",
    "start": "2771839",
    "end": "2779559"
  },
  {
    "text": "made um it it has been uh Rewritten performance is uh on par with the",
    "start": "2779559",
    "end": "2785440"
  },
  {
    "text": "previous implementation um there's unsafe bits",
    "start": "2785440",
    "end": "2790680"
  },
  {
    "text": "around of course um there's has been a CIS call made in completely safe code uh",
    "start": "2790680",
    "end": "2798599"
  },
  {
    "text": "using rust so there there have been CIS calls in Rust uh right uh in around this",
    "start": "2798599",
    "end": "2805359"
  },
  {
    "text": "component and uh there's have been even contributions back to the rust project",
    "start": "2805359",
    "end": "2810440"
  },
  {
    "text": "through the efforts of the team involved here and there's more uh such oxid ation",
    "start": "2810440",
    "end": "2816240"
  },
  {
    "text": "efforts in progress that I'm not allowed to talk about um and that's not a unique",
    "start": "2816240",
    "end": "2822880"
  },
  {
    "text": "uh Microsoft concern so a lot of companies are seriously looking at this",
    "start": "2822880",
    "end": "2828559"
  },
  {
    "text": "um there's a very nice uh case study that I recommend that you read it's",
    "start": "2828559",
    "end": "2834319"
  },
  {
    "text": "linked below uh from Google uh rust Google's rust journey in",
    "start": "2834319",
    "end": "2839720"
  },
  {
    "text": "2022 and it's sort of uh uh formatted as a myths kind of thing but they call it",
    "start": "2839720",
    "end": "2846680"
  },
  {
    "text": "um rumors so um rumor one rust takes more than 6 months to learn um they",
    "start": "2846680",
    "end": "2854000"
  },
  {
    "text": "found that on average uh the ramping up is uh the I don't know if you can read",
    "start": "2854000",
    "end": "2860520"
  },
  {
    "text": "it but the the red big pie uh portion is one to two months and the yellow uh one",
    "start": "2860520",
    "end": "2868880"
  },
  {
    "text": "is 3 to four months and the blue one is 2 to 3 weeks so the majority of the",
    "start": "2868880",
    "end": "2874960"
  },
  {
    "text": "developers can pick it up fairly quickly okay they'll not be rust experts but they'll be proficient in it um rust",
    "start": "2874960",
    "end": "2883000"
  },
  {
    "text": "compiler is not as fast as people would like yes sometimes it's slower than C++ um all those checks come at a cost um",
    "start": "2883000",
    "end": "2891720"
  },
  {
    "text": "and um people usually think that uh interrup and uh unsafe blocks are the",
    "start": "2891720",
    "end": "2898040"
  },
  {
    "text": "biggest challenges and there's those turn out not to be the case um and of",
    "start": "2898040",
    "end": "2903720"
  },
  {
    "text": "course amazing compiler error messages and high quality of genetic code because trust leverages the llvm code gen back",
    "start": "2903720",
    "end": "2911160"
  },
  {
    "text": "end so um the the results are good so again uh good case study article if you",
    "start": "2911160",
    "end": "2917319"
  },
  {
    "text": "want to dig into this um another article from the chromium project on Rust and C++",
    "start": "2917319",
    "end": "2924079"
  },
  {
    "text": "interoperability and some of the their desired goals around this interrup um",
    "start": "2924079",
    "end": "2930640"
  },
  {
    "text": "turns out this project um uh was not very favorable for rust uh the chromium",
    "start": "2930640",
    "end": "2937880"
  },
  {
    "text": "team ended up using their own thing they're they're leaning to more towards",
    "start": "2937880",
    "end": "2944040"
  },
  {
    "text": "um lifetime bound annotations in C++ so that path that I mentioned earlier uh",
    "start": "2944040",
    "end": "2950880"
  },
  {
    "text": "and they have their own U memory management system in their sort um it's",
    "start": "2950880",
    "end": "2956480"
  },
  {
    "text": "called oil oil pan if you want to learn more about this uh there's a bunch of resources out there I linked one of them",
    "start": "2956480",
    "end": "2964160"
  },
  {
    "text": "here um one mention of the uh unsafe block um",
    "start": "2964160",
    "end": "2971720"
  },
  {
    "text": "you want to try to minimize the the extent of these blocks",
    "start": "2971720",
    "end": "2976880"
  },
  {
    "text": "because in principle unsafe blocks have more UB than C++ because uh in in C++",
    "start": "2976880",
    "end": "2984160"
  },
  {
    "text": "compilers will will work very hard to do alas analysis and uh Escape analysis and",
    "start": "2984160",
    "end": "2991720"
  },
  {
    "text": "figure out what's going on with references and pointers uh to to avoid",
    "start": "2991720",
    "end": "2996920"
  },
  {
    "text": "uh weird things whereas uh unsafe rust blocks are just all bets are",
    "start": "2996920",
    "end": "3003960"
  },
  {
    "text": "off um okay so moving on to because we're we",
    "start": "3003960",
    "end": "3010480"
  },
  {
    "text": "talked a lot about rust uh successor languages are going to eat our lunch uh I heard this today over lunch uh so uh",
    "start": "3010480",
    "end": "3018920"
  },
  {
    "text": "the one in the middle high low is uh Val previously known Val uh they changed the",
    "start": "3018920",
    "end": "3024359"
  },
  {
    "text": "name there was a like a conflict with some other thing named Val or something um and carbon so uh Val",
    "start": "3024359",
    "end": "3033520"
  },
  {
    "text": "aims to be fast by default safe by default simple interoperable with C++",
    "start": "3033520",
    "end": "3038599"
  },
  {
    "text": "strong whole part semantics uh mutable value semantics it's basically Swift uh",
    "start": "3038599",
    "end": "3044599"
  },
  {
    "text": "without classes and reference semantics that came with classes so if Swift had",
    "start": "3044599",
    "end": "3049960"
  },
  {
    "text": "only structs uh that would be close to what Hilo uh aims to be so it's it's a it's a",
    "start": "3049960",
    "end": "3058359"
  },
  {
    "text": "simpler better Swift um the reason why Swift has all those things is because",
    "start": "3058359",
    "end": "3064200"
  },
  {
    "text": "they share the object model with Objective C and they have to support everything in in uh foundation and UI",
    "start": "3064200",
    "end": "3071440"
  },
  {
    "text": "kit and appkit uh carbon um similarly aims interoperability with C++ better",
    "start": "3071440",
    "end": "3078119"
  },
  {
    "text": "defaults than C++ that's not hard uh no function overloading no exception handling no multiple inheritance no row",
    "start": "3078119",
    "end": "3084599"
  },
  {
    "text": "pointers know destructors and so on um if you want to learn",
    "start": "3084599",
    "end": "3090920"
  },
  {
    "text": "a and see a nice overview of all these things all these efforts uh this is my",
    "start": "3090920",
    "end": "3096799"
  },
  {
    "text": "favorite article by luchan toresco the year of C++ successor languages published in Accu Journal oh and I",
    "start": "3096799",
    "end": "3104319"
  },
  {
    "text": "forgot uh rust is perfect by construction uh all right um another",
    "start": "3104319",
    "end": "3111920"
  },
  {
    "text": "case study with Android 13 I believe it's still the current version of Android current stable version uh memory",
    "start": "3111920",
    "end": "3119160"
  },
  {
    "text": "vulnerabilities uh year-over-year um we see that memory security",
    "start": "3119160",
    "end": "3124799"
  },
  {
    "text": "vulnerabilities are decreasing and there's a reason for that is that uh the",
    "start": "3124799",
    "end": "3130119"
  },
  {
    "text": "reason is that the rust chunk is increasing year over year uh as well as",
    "start": "3130119",
    "end": "3136720"
  },
  {
    "text": "Scotland uh and we can see here uh a breakdown between um memory unsafe code",
    "start": "3136720",
    "end": "3144599"
  },
  {
    "text": "uh and memory safety wins so there's a correlation there that we can see year over year uh and if we're looking at",
    "start": "3144599",
    "end": "3151160"
  },
  {
    "text": "language distribution in the Android 13 source code uh we see that C++ is more",
    "start": "3151160",
    "end": "3157559"
  },
  {
    "text": "like stable a bit decreasing uh in the codebase uh but rust is definitely",
    "start": "3157559",
    "end": "3163400"
  },
  {
    "text": "increasing year version over version uh for Android so there's a trend there so I",
    "start": "3163400",
    "end": "3171240"
  },
  {
    "text": "would say that uh it is plausible um that they're going to our lunch but not",
    "start": "3171240",
    "end": "3176760"
  },
  {
    "text": "necessar it's not necessarily a zero sum game there will be enough work for many years to come uh for all of us uh but we",
    "start": "3176760",
    "end": "3184799"
  },
  {
    "text": "need to know that such efforts are going on uh we need to know where to cut our",
    "start": "3184799",
    "end": "3190640"
  },
  {
    "text": "losses and where we can do a better job using Alternatives so keep takeaway",
    "start": "3190640",
    "end": "3196839"
  },
  {
    "text": "would be to keep an open mind and not be Fanatics uh we're not um language",
    "start": "3196839",
    "end": "3202599"
  },
  {
    "text": "Fanatics here right all right uh moving on uh ranges another",
    "start": "3202599",
    "end": "3209040"
  },
  {
    "text": "myth ranges are safer than iterators uh and all our experience with iterators",
    "start": "3209040",
    "end": "3214200"
  },
  {
    "text": "since the '90s tell tells us that they should be um but ranges do come with some gas",
    "start": "3214200",
    "end": "3220920"
  },
  {
    "text": "and particularly views uh come with gas and I call this my my niiko slide",
    "start": "3220920",
    "end": "3229839"
  },
  {
    "text": "uh uh they're not particularly specific issues with views they issues with",
    "start": "3229839",
    "end": "3238200"
  },
  {
    "text": "reference semantic things and Views are have reference semantics so all the",
    "start": "3238200",
    "end": "3244400"
  },
  {
    "text": "usual G gas around reference semantics in C++ apply to views so but they also",
    "start": "3244400",
    "end": "3251119"
  },
  {
    "text": "apply to things like string View and and span and all other things that all other vocabulary types that have reference",
    "start": "3251119",
    "end": "3257839"
  },
  {
    "text": "semantics and they they might uh trick us so uh as always with C++ con is",
    "start": "3257839",
    "end": "3264520"
  },
  {
    "text": "shallow and doesn't propagate as you might expect with references um some of",
    "start": "3264520",
    "end": "3269720"
  },
  {
    "text": "these functions uh do caching functions like begin empty filter drop and so on",
    "start": "3269720",
    "end": "3275119"
  },
  {
    "text": "so you need to be careful about using them don't try to hold on to views or try to reuse them they're not meant to",
    "start": "3275119",
    "end": "3280799"
  },
  {
    "text": "be use their cheap to copy try to copy them or use them at hoc as Temporaries uh",
    "start": "3280799",
    "end": "3286640"
  },
  {
    "text": "don't same advice I would give for a span or a string view uh also applies to",
    "start": "3286640",
    "end": "3291720"
  },
  {
    "text": "views here don't try to store them don't try to uh uh PR long their their their usage more than necessary they're you",
    "start": "3291720",
    "end": "3299200"
  },
  {
    "text": "just have to pass them around and use them don't hold on to them so there's there's many gas but people sometimes",
    "start": "3299200",
    "end": "3306440"
  },
  {
    "text": "associate these kinds of gas with underlying issues with the with the concept of using ranges and and range",
    "start": "3306440",
    "end": "3312960"
  },
  {
    "text": "views so ranges and range views are great but if you if you fall in these",
    "start": "3312960",
    "end": "3319040"
  },
  {
    "text": "kinds of traps you will get the wrong impression that oh this kind of stuff is is unusable uh it's it's the risks um um",
    "start": "3319040",
    "end": "3328000"
  },
  {
    "text": "overweigh the benefits and it's not the case U so I mentioned uh nik's um",
    "start": "3328000",
    "end": "3335799"
  },
  {
    "text": "presentation this is the link to that presentation if you want to watch it uh he goes into a lot more details about uh",
    "start": "3335799",
    "end": "3342799"
  },
  {
    "text": "these kinds of straps uh this is my favorite example by far uh and it's",
    "start": "3342799",
    "end": "3348680"
  },
  {
    "text": "because you would be so tempted to do this like uh use a uh Range four through",
    "start": "3348680",
    "end": "3355520"
  },
  {
    "text": "a monster collection where you filter out and you want to get all the dead",
    "start": "3355520",
    "end": "3360640"
  },
  {
    "text": "monsters or the zombies or whatever and then you would just uh want to resurrect",
    "start": "3360640",
    "end": "3366520"
  },
  {
    "text": "the monsters so this is undefined Behavior because a precondition for an",
    "start": "3366520",
    "end": "3371760"
  },
  {
    "text": "invari invariant that needs to hold for filter is that its filter condition must not change while while using this filter",
    "start": "3371760",
    "end": "3379720"
  },
  {
    "text": "predicate so if you're doing resurrect you're you're violating an in variant",
    "start": "3379720",
    "end": "3385520"
  },
  {
    "text": "that filter expects to hold for the whole duration of the iteration so if if",
    "start": "3385520",
    "end": "3390680"
  },
  {
    "text": "you're if you're doing this call and you're iterating then uh it's undefined behavior and it's so tempting to do",
    "start": "3390680",
    "end": "3397119"
  },
  {
    "text": "things like this because that's that would be one of the reason why you care about filtering out a particular type of",
    "start": "3397119",
    "end": "3404119"
  },
  {
    "text": "entity so that you can change its state in some way but if you're not careful and you're changing the very thing that",
    "start": "3404119",
    "end": "3410319"
  },
  {
    "text": "the predicate the filter is all about then it's undefined Behavior",
    "start": "3410319",
    "end": "3415880"
  },
  {
    "text": "again uh a trap that you need to be aware of question",
    "start": "3415880",
    "end": "3421359"
  },
  {
    "text": "there yeah but people are used to that",
    "start": "3425599",
    "end": "3431599"
  },
  {
    "text": "yeah exactly exactly the comment was that you can use the same kinds of uh",
    "start": "3431599",
    "end": "3437119"
  },
  {
    "text": "mistakes with iterators but uh people are when when they see code like this it",
    "start": "3437119",
    "end": "3443119"
  },
  {
    "text": "it looks like innocent and fluent and it's sort of it looks like it's magical",
    "start": "3443119",
    "end": "3448400"
  },
  {
    "text": "it's supposed to work so uh while with iterators people are more careful",
    "start": "3448400",
    "end": "3455280"
  },
  {
    "text": "because they've been burned uh okay and uh closing up with uh",
    "start": "3455280",
    "end": "3463079"
  },
  {
    "text": "cmake is the gold standard for C++ uh project system and we've seen a few",
    "start": "3463079",
    "end": "3468520"
  },
  {
    "text": "cmake talks already um and when it works is great when it",
    "start": "3468520",
    "end": "3474240"
  },
  {
    "text": "doesn't you're getting life decisions um Patty said that I don't",
    "start": "3474240",
    "end": "3479559"
  },
  {
    "text": "know if she's here I don't think so um so uh the good news is there again",
    "start": "3479559",
    "end": "3486039"
  },
  {
    "text": "tooling is meant to help here so there's uh there's uh seic debuggers now um and",
    "start": "3486039",
    "end": "3494000"
  },
  {
    "text": "they're they're everywhere so they're in Visual Studio they're in vs code just a short presentation here and there uh",
    "start": "3494000",
    "end": "3501240"
  },
  {
    "text": "they're in a lot of editors so uh they in uh in ryer and sea lion so there uh",
    "start": "3501240",
    "end": "3509359"
  },
  {
    "text": "changes for these kinds of things have been Upstream to kitware so they can be",
    "start": "3509359",
    "end": "3515359"
  },
  {
    "text": "everywhere now so I think the this raised the bar for what you can do and",
    "start": "3515359",
    "end": "3521960"
  },
  {
    "text": "the struggles you can have with cake so we must admit cake is a challenge for",
    "start": "3521960",
    "end": "3528520"
  },
  {
    "text": "for many projects and uh you can really mess up your your your your build with",
    "start": "3528520",
    "end": "3535799"
  },
  {
    "text": "cmake or you might look at the cmake config and don't understand what's going",
    "start": "3535799",
    "end": "3540960"
  },
  {
    "text": "on because it went through so many iterations that it's unbelievable uh how complicated it ended",
    "start": "3540960",
    "end": "3547440"
  },
  {
    "text": "up being so having this be the norm now in in many editors uh now and",
    "start": "3547440",
    "end": "3556160"
  },
  {
    "text": "potentially all editors from now on because uh uh the the the debugger",
    "start": "3556160",
    "end": "3562160"
  },
  {
    "text": "implementation that we did was upstreamed uh it I would I would think it CH it",
    "start": "3562160",
    "end": "3568440"
  },
  {
    "text": "will change the game so cake will will be uh debuggable as normal code it's",
    "start": "3568440",
    "end": "3574559"
  },
  {
    "text": "okay it's not the same kind of thing but it will drastically improve the developer experience and just as a as a",
    "start": "3574559",
    "end": "3581079"
  },
  {
    "text": "sneak peek oh sorry this uh it's not very readable from the",
    "start": "3581079",
    "end": "3589680"
  },
  {
    "text": "distance um but it's it's meant to give you a flavor that uh and this is running",
    "start": "3589680",
    "end": "3595359"
  },
  {
    "text": "in vs code by the way so uh you can step through uh cake you can inspect uh",
    "start": "3595359",
    "end": "3603640"
  },
  {
    "text": "properties see their value you can change their value you can add uh uh",
    "start": "3603640",
    "end": "3609520"
  },
  {
    "text": "things to the watch window and inspect stuff you can change the values and run the script continue running the script",
    "start": "3609520",
    "end": "3615520"
  },
  {
    "text": "after you've changed the values so it feels like a full on debugger it it is a debugger and I think it will help a lot",
    "start": "3615520",
    "end": "3623000"
  },
  {
    "text": "to maybe understand the a a CA config that you're you're seeing for the first",
    "start": "3623000",
    "end": "3628280"
  },
  {
    "text": "time or investigate some build issue or um even help you out um starting writing",
    "start": "3628280",
    "end": "3636240"
  },
  {
    "text": "one from scratch if you're if you don't know what you're doing and let's face it most of us don't know what you're",
    "start": "3636240",
    "end": "3642000"
  },
  {
    "text": "doing uh so to close up um myth number zero that was uh I had",
    "start": "3642000",
    "end": "3650400"
  },
  {
    "text": "the same one last year C++ new C++ is the enemy of the o the old uh I hear",
    "start": "3650400",
    "end": "3657160"
  },
  {
    "text": "this a lot uh and that before we had whatever shiny new thing in C++ 20 23",
    "start": "3657160",
    "end": "3665760"
  },
  {
    "text": "whatever I was able to program before we had that thing why do I need another",
    "start": "3665760",
    "end": "3671160"
  },
  {
    "text": "complication why do I need a new feature a new thing a new way well sometimes you",
    "start": "3671160",
    "end": "3677319"
  },
  {
    "text": "don't have to jump for the shiny new thing uh but U many many many times is",
    "start": "3677319",
    "end": "3682880"
  },
  {
    "text": "meant to simplify something or uh build more confidence in in the code that you",
    "start": "3682880",
    "end": "3689920"
  },
  {
    "text": "write so you don't have to adopt older cool new things but many of them are",
    "start": "3689920",
    "end": "3696480"
  },
  {
    "text": "meant to help so have an open mind try them out don't overuse them just because",
    "start": "3696480",
    "end": "3701839"
  },
  {
    "text": "they're new new they're not supposed to be everywhere uh and some of them are not maybe ready for prime time uh we",
    "start": "3701839",
    "end": "3708640"
  },
  {
    "text": "need few years to build in some experience around good usage patterns",
    "start": "3708640",
    "end": "3714799"
  },
  {
    "text": "for them and figure out how they fit in in in existing projects so it's it's a",
    "start": "3714799",
    "end": "3720359"
  },
  {
    "text": "struggle um fixing C++ is complicated because we",
    "start": "3720359",
    "end": "3726279"
  },
  {
    "text": "cannot really move stuff easily but we have to some sort of patch",
    "start": "3726279",
    "end": "3732799"
  },
  {
    "text": "it um other mythbusting series uh this is one of my uh favorites um by Patrice",
    "start": "3732799",
    "end": "3740520"
  },
  {
    "text": "ra some programming myths Revisited funny and and engaging and uh",
    "start": "3740520",
    "end": "3747240"
  },
  {
    "text": "similar kind of thing uh in in blog post format um 60 turble tips for a C++",
    "start": "3747240",
    "end": "3753640"
  },
  {
    "text": "developer is meant to be written in in negative form but it's about checks and",
    "start": "3753640",
    "end": "3759880"
  },
  {
    "text": "problems that you can run into and G us so they're terrible tips but you can",
    "start": "3759880",
    "end": "3765119"
  },
  {
    "text": "learn from them so um uh you can you can go through those so I'm open for uh",
    "start": "3765119",
    "end": "3772640"
  },
  {
    "text": "comments uh contradictions and uh",
    "start": "3772640",
    "end": "3778000"
  },
  {
    "text": "provocation sorry there was",
    "start": "3784680",
    "end": "3788400"
  },
  {
    "text": "one",
    "start": "3791480",
    "end": "3794480"
  },
  {
    "text": "yep it's it's uh I'll summarize the comment for the record uh the number 14 there",
    "start": "3803279",
    "end": "3811480"
  },
  {
    "text": "double equals uh double it's not an intrinsic problem of equality for",
    "start": "3811480",
    "end": "3817160"
  },
  {
    "text": "floating Point numbers it's rather than about the operations that you did on the floating points and then you're trying",
    "start": "3817160",
    "end": "3823640"
  },
  {
    "text": "to to see if their values are equal so floating points are special kinds of",
    "start": "3823640",
    "end": "3829279"
  },
  {
    "text": "members of our community uh and there's uh I I recently saw um if you're a",
    "start": "3829279",
    "end": "3835680"
  },
  {
    "text": "floating Point um skeptic or NB um I would say a very good resource I I I I",
    "start": "3835680",
    "end": "3843799"
  },
  {
    "text": "saw recently is Mike Acton I don't know if people are familiar with Mike Acton",
    "start": "3843799",
    "end": "3849400"
  },
  {
    "text": "of data oriented design Fame uh uh he published a a series of mini articles on",
    "start": "3849400",
    "end": "3857480"
  },
  {
    "text": "on getting starting with floating point and understanding floating Point numbers this is a very recent development I",
    "start": "3857480",
    "end": "3862720"
  },
  {
    "text": "think it's this month so uh I can look it up and and and maybe add the link",
    "start": "3862720",
    "end": "3868640"
  },
  {
    "text": "here to the slide deck uh very good series of articles on on floating Point understanding how they work and some of",
    "start": "3868640",
    "end": "3875000"
  },
  {
    "text": "the problems that you run into when dealing with floating Point um even things on fix point that you need to",
    "start": "3875000",
    "end": "3881160"
  },
  {
    "text": "know to understand floating point so it's it's a very nice resource uh and I",
    "start": "3881160",
    "end": "3886640"
  },
  {
    "text": "would say it's very approachable it's not full of very technical",
    "start": "3886640",
    "end": "3892160"
  },
  {
    "text": "stuff other questions",
    "start": "3892160",
    "end": "3896160"
  },
  {
    "text": "Bren resurrect some of them no but can you elaborate why broken because like we",
    "start": "3901359",
    "end": "3909760"
  },
  {
    "text": "have this of range right so then we already out some sort",
    "start": "3909760",
    "end": "3917319"
  },
  {
    "text": "of a monster right we can do whatever we want and then the filter go f and",
    "start": "3917319",
    "end": "3925279"
  },
  {
    "text": "let me let me go to back to the so that",
    "start": "3925279",
    "end": "3930880"
  },
  {
    "text": "people yeah this is the example so again there's a reason why I put this standard",
    "start": "3930880",
    "end": "3937359"
  },
  {
    "text": "code here this code will probably work if you run it but violates what it says",
    "start": "3937359",
    "end": "3944240"
  },
  {
    "text": "in the standards so it may fail at any point that's the the whole point of undefined Behavior so filter The Way It",
    "start": "3944240",
    "end": "3952440"
  },
  {
    "text": "Is defined it says that you are not allowed to violate its predicate so if you're for example here this one",
    "start": "3952440",
    "end": "3960039"
  },
  {
    "text": "reverses the action of resurrect so if you if at the end of this block the",
    "start": "3960039",
    "end": "3965839"
  },
  {
    "text": "observable Behavior didn't change you're not violating the invariant for that",
    "start": "3965839",
    "end": "3971279"
  },
  {
    "text": "filter checks for so if you're flipping it say Okay resurrect and then the opposite burn it make it dead again so",
    "start": "3971279",
    "end": "3978520"
  },
  {
    "text": "if you're doing both operations then it's okay because the observable behavior for filter is that nothing",
    "start": "3978520",
    "end": "3984079"
  },
  {
    "text": "changed but if you're doing just one of them then you are violating this condition and it might work I believe",
    "start": "3984079",
    "end": "3991319"
  },
  {
    "text": "the implementations might actually work but the way it's phrased it's",
    "start": "3991319",
    "end": "3997279"
  },
  {
    "text": "UB that's an implementation detail so it might very well work so if you try this",
    "start": "4004160",
    "end": "4009559"
  },
  {
    "text": "I don't think it will break I think it will work as expected yeah uh I I",
    "start": "4009559",
    "end": "4014760"
  },
  {
    "text": "haven't tried it but I think it will work uh but the way it's defined it's be",
    "start": "4014760",
    "end": "4022319"
  },
  {
    "text": "so that's not my job if monsters is like something like a set or a map and it is",
    "start": "4022319",
    "end": "4028760"
  },
  {
    "text": "somehow and the key is uh somehow related to is dead then this might actually break oh yeah if you're change",
    "start": "4028760",
    "end": "4035000"
  },
  {
    "text": "uh if you're hashing by the thing that you're modifying then for sure you you have to do a two-stage thing where",
    "start": "4035000",
    "end": "4041680"
  },
  {
    "text": "you're doing one pass to change stuff and then another pass to um or you will",
    "start": "4041680",
    "end": "4047760"
  },
  {
    "text": "have to basically refresh the hasher if you're modifying the thing that you're hashing like the key yeah that's a",
    "start": "4047760",
    "end": "4055680"
  },
  {
    "text": "classic thing way before ranges any other comments",
    "start": "4055680",
    "end": "4061960"
  },
  {
    "text": "questions if not I think they expect us for some kind of social event so see you",
    "start": "4061960",
    "end": "4068279"
  },
  {
    "text": "there thank you",
    "start": "4068279",
    "end": "4072039"
  }
]