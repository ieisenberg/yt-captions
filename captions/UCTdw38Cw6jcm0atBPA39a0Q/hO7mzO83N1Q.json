[
  {
    "text": "my name is Scott Allen and I went to talk about JavaScript patterns for 2017 it is the end of the day it's a small",
    "start": "10120",
    "end": "16000"
  },
  {
    "text": "room we're kind of friends here I'll be honest with you this talk did not turn out the way I expected it when I started",
    "start": "16000",
    "end": "21519"
  },
  {
    "text": "putting it together if you if you came expecting like design patterns from the gang of four that's not really what",
    "start": "21519",
    "end": "27439"
  },
  {
    "text": "we're going to talk about what what I wanted to talk about was patterns that I see in the JavaScript language",
    "start": "27439",
    "end": "33399"
  },
  {
    "text": "particularly patterns that have disappeared from the old way of doing things and new patterns that have emerg",
    "start": "33399",
    "end": "38440"
  },
  {
    "text": "and it's not just design classical design patterns it's more like patterns in the tooling",
    "start": "38440",
    "end": "44079"
  },
  {
    "text": "patterns in in the build process yeah some patterns in the code also things to be wary of when you write JavaScript",
    "start": "44079",
    "end": "51800"
  },
  {
    "text": "code things that people try to commonly do and fail at because uh they didn't",
    "start": "51800",
    "end": "57760"
  },
  {
    "text": "quite understand how a particular Feature work I hope to get you through all of that and I did just want to take a quick poll of the audience if I can",
    "start": "57760",
    "end": "64640"
  },
  {
    "text": "see everyone through the headlights here how many people are using typescript today oh quite a few so at",
    "start": "64640",
    "end": "72840"
  },
  {
    "text": "least version two I'm guessing typescript and how many people are using ecmascript 2015 features like import",
    "start": "72840",
    "end": "79840"
  },
  {
    "text": "export class definitions okay well I",
    "start": "79840",
    "end": "84880"
  },
  {
    "text": "hope everyone gets something out of this talk I basically broke things down into a few different areas number one one",
    "start": "84880",
    "end": "90759"
  },
  {
    "text": "modules when the ecmascript 2015 specification came out yes there was a",
    "start": "90759",
    "end": "95799"
  },
  {
    "text": "lot of excitement about error functions class definitions but it was really modules and the ecmascript 2015 module",
    "start": "95799",
    "end": "103200"
  },
  {
    "text": "definition that has that has the most significant impact on our code and our architecture and how we build large",
    "start": "103200",
    "end": "109719"
  },
  {
    "text": "applications so I want to spend a little bit of time talking about modules I also want to talk a little bit about language",
    "start": "109719",
    "end": "115600"
  },
  {
    "text": "features and show you some things to be aware of talk a little bit about the current tooling system in the JavaScript",
    "start": "115600",
    "end": "122079"
  },
  {
    "text": "ecosystem and everyone needs a build process for JavaScript these days so I'll give you some of the tips that I've",
    "start": "122079",
    "end": "128720"
  },
  {
    "text": "learned over the past few years trying to build typescript and equiscript 2015 code so first of all let's talk about es",
    "start": "128720",
    "end": "137160"
  },
  {
    "text": "modules when I saw the specification for ES modules I remembered completely under",
    "start": "137160",
    "end": "143200"
  },
  {
    "text": "appreciating the impact that modules would have on building JavaScript code so the first thing that happens for",
    "start": "143200",
    "end": "149920"
  },
  {
    "text": "first thing that happens is a lot of old patterns Fall Away there's actually two patterns here in this little code",
    "start": "149920",
    "end": "155120"
  },
  {
    "text": "snippet one is the immediately invoked function expression and we've been a lot",
    "start": "155120",
    "end": "160159"
  },
  {
    "text": "of us have been trained over the years to wrap all of our JavaScript code inside of an iffy so that nothing",
    "start": "160159",
    "end": "166080"
  },
  {
    "text": "escapes accidentally into the um window object or the global scope right and the",
    "start": "166080",
    "end": "171319"
  },
  {
    "text": "second thing we were taught was to start using the string literal use strict to switch the JavaScript runtime into the",
    "start": "171319",
    "end": "177120"
  },
  {
    "text": "strict mode which can reduce the number of of strange errors that you get the amount of strange behavior that",
    "start": "177120",
    "end": "182959"
  },
  {
    "text": "JavaScript has and sometimes even lead to Performance boost those things are all gone because when you write a",
    "start": "182959",
    "end": "190959"
  },
  {
    "text": "ecmascript 2015 module you're using Import and Export keywords you're using something like the typescript compiler",
    "start": "190959",
    "end": "197040"
  },
  {
    "text": "and and webpack to build everything together when you're in a in a Javascript file you don't think of it as",
    "start": "197040",
    "end": "203080"
  },
  {
    "text": "a file anymore every time you create ajs or a TS file that is a module in",
    "start": "203080",
    "end": "208680"
  },
  {
    "text": "JavaScript and you don't need any sort of iffy nothing's going to go into the global scope unless you explicitly try",
    "start": "208680",
    "end": "215560"
  },
  {
    "text": "to put it there by going to the window object and you don't need this use strict declaration anymore because",
    "start": "215560",
    "end": "222159"
  },
  {
    "text": "modules by default they will be interpreted and executed as in strict",
    "start": "222159",
    "end": "227519"
  },
  {
    "text": "mode so forget all the old things you know about modules and concentrate on what modules give you and I'll just give",
    "start": "227519",
    "end": "233400"
  },
  {
    "text": "a brief overview for those of you that haven't worked with ecmascript 2015 modules which you can write from",
    "start": "233400",
    "end": "238840"
  },
  {
    "text": "typescript also typescript used to have this namespacing thing but these modules are even better so inside of this file",
    "start": "238840",
    "end": "246239"
  },
  {
    "text": "as ajs file it is now a module thises function work unless I explicitly write an export",
    "start": "246239",
    "end": "253159"
  },
  {
    "text": "statement saying that I want to export that to other people then that is hidden it's an implementation detail of this",
    "start": "253159",
    "end": "258880"
  },
  {
    "text": "file no one will be able to access that symbol and invoke that function but down here at the bottom of the file I've said",
    "start": "258880",
    "end": "265080"
  },
  {
    "text": "I want to export two symbols work and person so you can export functions you can export classes you can export",
    "start": "265080",
    "end": "272400"
  },
  {
    "text": "variables and you can also have a default export which just means when someone Imports it they don't need to",
    "start": "272400",
    "end": "279000"
  },
  {
    "text": "use the curly braces to bind against that export they just say export or",
    "start": "279000",
    "end": "284199"
  },
  {
    "text": "sorry import food from bar and they will get whatever the default export is we'll",
    "start": "284199",
    "end": "289960"
  },
  {
    "text": "talk a little more about that in some more detail in just a bit so I can import person and animal",
    "start": "289960",
    "end": "297759"
  },
  {
    "text": "from lib and you'll notice I'm specifying a relative path so if you do do slash then what the module bundler",
    "start": "297759",
    "end": "304880"
  },
  {
    "text": "should do whatever tool you're using which in the future might be the native browser or the node.js but no one",
    "start": "304880",
    "end": "310960"
  },
  {
    "text": "actually supports loading modules just yet we have to use tools to do it that'll go that should go off searching",
    "start": "310960",
    "end": "317199"
  },
  {
    "text": "for a li. JS or a li. TS file I don't specify the file extension this is grabbing a default export so this",
    "start": "317199",
    "end": "323919"
  },
  {
    "text": "particular file this module lihuman should have an export default of some symbol",
    "start": "323919",
    "end": "330280"
  },
  {
    "text": "and then this syntax is basically a way of saying give me everything that this Library",
    "start": "330280",
    "end": "335919"
  },
  {
    "text": "exports and attach it to this object lib and it's not well yes I don't want to",
    "start": "335919",
    "end": "342199"
  },
  {
    "text": "call it a variable we'll talk about exactly what that is in just a bit but now to access things inside a library I have to say li. person li. animal",
    "start": "342199",
    "end": "349199"
  },
  {
    "text": "they'll all be available it's almost functions like a name space so a couple things to note about",
    "start": "349199",
    "end": "354759"
  },
  {
    "text": "this when you're using modules also that people run into trouble with one is that",
    "start": "354759",
    "end": "360479"
  },
  {
    "text": "the import statement creates what we call an immutable binding so it's not really a variable back here if I say uh",
    "start": "360479",
    "end": "367120"
  },
  {
    "text": "import person from lib this is a binding so even though you can use person like a",
    "start": "367120",
    "end": "373520"
  },
  {
    "text": "variable throughout the rest of this module uh you you might run into",
    "start": "373520",
    "end": "378800"
  },
  {
    "text": "unexpected Behavior so here's an example I'm going to have a module that exports a counter just exports basically the value zero and I'll export a function",
    "start": "378800",
    "end": "386000"
  },
  {
    "text": "that someone can invoke from this module called increment that will increment the counter so in some other module I will",
    "start": "386000",
    "end": "391800"
  },
  {
    "text": "import counter and I'll try to modify it that should produce a runtime syntax error",
    "start": "391800",
    "end": "399000"
  },
  {
    "text": "telling you that you are not allowed to do that counter is an immutable binding I cannot change the value that is in",
    "start": "399000",
    "end": "405360"
  },
  {
    "text": "that binding I can however import the increment",
    "start": "405360",
    "end": "412720"
  },
  {
    "text": "function and call something in that module to change the counter value and",
    "start": "412720",
    "end": "420120"
  },
  {
    "text": "that will work so the counter value will start at",
    "start": "420120",
    "end": "425319"
  },
  {
    "text": "start at zero I'll call increment if we look at counter again we'll have a value of one and this is important to",
    "start": "425319",
    "end": "431680"
  },
  {
    "text": "understand that from a design pattern point of view if you want to create a Singleton everyone who Imports this",
    "start": "431680",
    "end": "437520"
  },
  {
    "text": "counter is going to see the same value and that value is live for everyone so I",
    "start": "437520",
    "end": "443000"
  },
  {
    "text": "could import counter into three different other modules they're all going to see the value zero until I",
    "start": "443000",
    "end": "448280"
  },
  {
    "text": "increment and that value changes inside of there so it's almost like a layer of indirection in these",
    "start": "448280",
    "end": "456400"
  },
  {
    "text": "bindings and yes they these bindings are live so let's",
    "start": "457360",
    "end": "462639"
  },
  {
    "text": "export using an object literal syntax an object that has the name Oscar let's export a function that'll just say",
    "start": "462639",
    "end": "468840"
  },
  {
    "text": "basically what name do you see inside the module and then export a function",
    "start": "468840",
    "end": "473960"
  },
  {
    "text": "reset which will change the entire object reference that we're exporting the entire creature",
    "start": "473960",
    "end": "480960"
  },
  {
    "text": "so if we start off things and I import so pretend there's an import statement here in another",
    "start": "480960",
    "end": "487680"
  },
  {
    "text": "module if I try to assign to the name property of creature a new value that works so that",
    "start": "487680",
    "end": "495960"
  },
  {
    "text": "part of The Binding is not if I try to change creature that's a",
    "start": "495960",
    "end": "501879"
  },
  {
    "text": "syntax here if I try to change a property on creature that's okay so I've just changed the name and everyone's going to see that name I'll see the name",
    "start": "501879",
    "end": "508400"
  },
  {
    "text": "in this module if I ask the module itself to inspect that value that will also show Winnie and if I do a reset",
    "start": "508400",
    "end": "515479"
  },
  {
    "text": "everyone will see a new creature object there with a different name is that making some",
    "start": "515479",
    "end": "522159"
  },
  {
    "text": "sense and here's what I think's interesting with modules so the kind of talking about patterns the kind of",
    "start": "522560",
    "end": "528120"
  },
  {
    "text": "pattern I like to see so let's say you're building a library and you're going to have a routing module and a",
    "start": "528120",
    "end": "533640"
  },
  {
    "text": "logging module and an HTTP module sound familiar and you're going to have an",
    "start": "533640",
    "end": "539440"
  },
  {
    "text": "application depend on that library and that application can also use modules routes the shell the components that you",
    "start": "539440",
    "end": "546279"
  },
  {
    "text": "have and of course both of these pieces are going to depend on additional implementation details so for example",
    "start": "546279",
    "end": "553560"
  },
  {
    "text": "the library on the left will depend on the HTTP module might depend on something that specifically knows how to",
    "start": "553560",
    "end": "560320"
  },
  {
    "text": "instantiate an XML HTP request make a request versus another module that might use the fetch so what's interesting is",
    "start": "560320",
    "end": "568160"
  },
  {
    "text": "since let's say the the the fetch implementation of HTTP is in this module",
    "start": "568160",
    "end": "574360"
  },
  {
    "text": "someone will have to export symbols from this module to make them available to HT",
    "start": "574360",
    "end": "579720"
  },
  {
    "text": "uh excuse me HTTP just like in my components I'm",
    "start": "579720",
    "end": "584920"
  },
  {
    "text": "going to need to export things to be able to get to the functionality that I want and it's fine if my components my",
    "start": "584920",
    "end": "592560"
  },
  {
    "text": "application references HTTP module unfortunately it's also possible",
    "start": "592560",
    "end": "598480"
  },
  {
    "text": "to get a reference in to some of these implementation details like an XML HTP request because it it's just exported",
    "start": "598480",
    "end": "605279"
  },
  {
    "text": "and anyone can walk up and as long as they know where that is on the file system they'll be able to get to the XML hdp request which is I I don't think",
    "start": "605279",
    "end": "612160"
  },
  {
    "text": "such a good thing typically what I like to do though is make sure that there's",
    "start": "612160",
    "end": "617440"
  },
  {
    "text": "some well-defined boundary where my application will export things and where I will only allow say my application to",
    "start": "617440",
    "end": "625680"
  },
  {
    "text": "drill into one level of the library if that's the way the library is implement",
    "start": "625680",
    "end": "630720"
  },
  {
    "text": "and one way to do that is to have files that use this",
    "start": "630720",
    "end": "636639"
  },
  {
    "text": "export star syntax or have an index.js file that will export things from that",
    "start": "636639",
    "end": "642120"
  },
  {
    "text": "directory only the public things that are needed so if you're not familiar with the index.js trick this has to be",
    "start": "642120",
    "end": "647800"
  },
  {
    "text": "supported by some sort of tooling but essentially let me back up to an import statement real",
    "start": "647800",
    "end": "654880"
  },
  {
    "text": "quick if I write this code import counter from lib SL creatures my tool",
    "start": "656079",
    "end": "662200"
  },
  {
    "text": "can look for a creatures. JS file or a creatures. TS file or I can also",
    "start": "662200",
    "end": "668440"
  },
  {
    "text": "configure things to look for an index.js or TS file that is in that folder slbc creatures and this goes back",
    "start": "668440",
    "end": "676760"
  },
  {
    "text": "no developers have been doing this forever the idea is that this folder",
    "start": "676760",
    "end": "682519"
  },
  {
    "text": "creatures has a whole bunch of JavaScript files in it and it's that index.js or TS file that really contains",
    "start": "682519",
    "end": "689560"
  },
  {
    "text": "the things that are exported from that particular folder so there can be other implementation details inside of there",
    "start": "689560",
    "end": "695639"
  },
  {
    "text": "that are exporting all sorts of things but publicly what I want you to use are just the exports from the index.js file",
    "start": "695639",
    "end": "702839"
  },
  {
    "text": "that is in that folder and if I'm just exporting",
    "start": "702839",
    "end": "709399"
  },
  {
    "text": "everything you can use export star syntax to say let's just grab a bunch of stuff from all the JS files that are in",
    "start": "709760",
    "end": "715399"
  },
  {
    "text": "this folder and push it all out as a public API it's one way to do",
    "start": "715399",
    "end": "720639"
  },
  {
    "text": "things and then we're in this kind of strange situation with JavaScript so the",
    "start": "720639",
    "end": "725720"
  },
  {
    "text": "module syntax that Import and Export stuff has been defined by the ecmascript 2015 standard so the syntax is solid",
    "start": "725720",
    "end": "734360"
  },
  {
    "text": "that's what we're using moving forward but there's not a a single environment out there that natively does module",
    "start": "734360",
    "end": "740600"
  },
  {
    "text": "loading so there's no browsers that natively support some sort of import statement what we have to do right now",
    "start": "740600",
    "end": "746800"
  },
  {
    "text": "they're working on that standard but what we have to do right now use a tool like one of the ones listed here that",
    "start": "746800",
    "end": "752519"
  },
  {
    "text": "will go through our JavaScript source code analyze the dependencies the import statements and just follow them out to",
    "start": "752519",
    "end": "758839"
  },
  {
    "text": "find all the JS and TS files that we need for our application and then bundle them up into a single file or multiple",
    "start": "758839",
    "end": "764920"
  },
  {
    "text": "files but it basically needs to resolve all of those Imports so that things will",
    "start": "764920",
    "end": "770600"
  },
  {
    "text": "work at runtime without requiring something like an import so use an API that actually works maybe something like",
    "start": "770600",
    "end": "777639"
  },
  {
    "text": "require personally I've evaluated webpack and rollup and I used browser fi long ago and right now",
    "start": "777639",
    "end": "784880"
  },
  {
    "text": "I'm really still prefer webpack I think it's the tool that has the most momentum so if you're you know selecting a tool",
    "start": "784880",
    "end": "792199"
  },
  {
    "text": "to bundle up your JavaScript code I would definitely look at webpack I would also take a look at rollup rollup was",
    "start": "792199",
    "end": "798120"
  },
  {
    "text": "implemented because people wanted something that was a little more efficient than webpack it turns out when webpack bundles up all this JavaScript",
    "start": "798120",
    "end": "804560"
  },
  {
    "text": "code it puts a rather large prefix and postfix around each bundle",
    "start": "804560",
    "end": "809680"
  },
  {
    "text": "uh around each module so it can be dynamically loaded and that has some",
    "start": "809680",
    "end": "814959"
  },
  {
    "text": "that adds to the code size of all the JavaScript code you're shipping to the browser Ro UPS a little bit better with that but webpack just released version",
    "start": "814959",
    "end": "822680"
  },
  {
    "text": "2.2 within the last couple days and they promise that the next thing they're going to work on is actually optimizing",
    "start": "822680",
    "end": "828639"
  },
  {
    "text": "the bundle sizes so when it puts modules together particularly modules that are commonly used together uh it won't have",
    "start": "828639",
    "end": "835480"
  },
  {
    "text": "as much overhead and the other thing that webpack implement implemented in",
    "start": "835480",
    "end": "840560"
  },
  {
    "text": "version 2.2 that rollup had before was tree shaking which is a way to shake",
    "start": "840560",
    "end": "846360"
  },
  {
    "text": "this tree of dependencies and actually figure out what you're using and what you're not using so things that you're not using can be thrown",
    "start": "846360",
    "end": "854040"
  },
  {
    "text": "away you'll see some interesting studies out there where people say um this tool",
    "start": "854720",
    "end": "860279"
  },
  {
    "text": "plus this tool plus this tool produces a Javascript file that can be gzipped to",
    "start": "860279",
    "end": "866000"
  },
  {
    "text": "this size and when it's sent to the browser takes this long to start",
    "start": "866000",
    "end": "871160"
  },
  {
    "text": "executing and we also have to factor in when you're choosing a tool that you want to use how hard does that tool have",
    "start": "871160",
    "end": "878360"
  },
  {
    "text": "to work to produce your bundle you can see the closure compiler up here produces code that is very small but",
    "start": "878360",
    "end": "884959"
  },
  {
    "text": "it's also one of the slowest tools to use whereas the typescript plus webpack",
    "start": "884959",
    "end": "891959"
  },
  {
    "text": "combination is pretty good it's a small code executes about the same as everyone else and it's a lot faster than closure",
    "start": "891959",
    "end": "898480"
  },
  {
    "text": "and that's another reason why I prefer webpack it has um the ability to allow me to do hot module loading into the",
    "start": "898480",
    "end": "904959"
  },
  {
    "text": "browser so when I change a TS file and save it just that little snippet of code gets transpiled and put into the",
    "start": "904959",
    "end": "911120"
  },
  {
    "text": "browser and I don't lose any state in the browser just gain gains the new",
    "start": "911120",
    "end": "917959"
  },
  {
    "text": "Behavior how many people use webpack few webpack gets easier and easier to",
    "start": "917959",
    "end": "925519"
  },
  {
    "text": "use and once you learn like everything once you learn a the basics it becomes",
    "start": "925519",
    "end": "930880"
  },
  {
    "text": "easier uh you basically have to provide a configuration that gives it a few pie key pieces of information so one key",
    "start": "930880",
    "end": "938040"
  },
  {
    "text": "piece of information is what files am I going to look at so this is telling it to look for TS TSX for react and JS",
    "start": "938040",
    "end": "945240"
  },
  {
    "text": "files uh I will talk about this modules directory in just a bit you",
    "start": "945240",
    "end": "950720"
  },
  {
    "text": "have to give it it entries so entries would be like the module name that you",
    "start": "950720",
    "end": "955839"
  },
  {
    "text": "want to use that where webpack should start start to analyze your dependencies",
    "start": "955839",
    "end": "961519"
  },
  {
    "text": "so if you have something like a main.ts file that is the entry point for your application you would put main.ts here",
    "start": "961519",
    "end": "969319"
  },
  {
    "text": "webpack would go to that file look at the Imports uh go out and find those other files that were imported bring",
    "start": "969319",
    "end": "974959"
  },
  {
    "text": "them in look at their Imports and it just follows that tree down so you need entry you need output basically what",
    "start": "974959",
    "end": "981079"
  },
  {
    "text": "file am I building where should I put it so you'll put it in some path that I've assigned to",
    "start": "981079",
    "end": "986759"
  },
  {
    "text": "assets you'll have plugins what webpack calls loaders because webpack by itself",
    "start": "986759",
    "end": "994360"
  },
  {
    "text": "is only concerned about analyzing dependencies and bundling code together",
    "start": "994360",
    "end": "999959"
  },
  {
    "text": "when it encounters something like a typescript file that typescript file has to get transpiled into es6 es5",
    "start": "999959",
    "end": "1007800"
  },
  {
    "text": "whatever and what and webpack doesn't do that natively instead there's very common plugins for webpack this TS",
    "start": "1007800",
    "end": "1014800"
  },
  {
    "text": "loader is a loader that webpack will call on when it sees a file with a TS or a TSX in this case",
    "start": "1014800",
    "end": "1022360"
  },
  {
    "text": "TSX extension is loaded it'll call on this TS loader which calls the typescript compiler and that produces",
    "start": "1022360",
    "end": "1028199"
  },
  {
    "text": "the code that webpack will use and then there's a bunch of other",
    "start": "1028199",
    "end": "1033798"
  },
  {
    "text": "plugins I'll talk about this dll reference plugin in just a bit but uh this modules directory by the way I love",
    "start": "1033799",
    "end": "1040280"
  },
  {
    "text": "this thing so a lot of times when you're writing your application code I I hate",
    "start": "1040280",
    "end": "1046319"
  },
  {
    "text": "the pattern where I have import statements that do dot dot dot uh do do",
    "start": "1046319",
    "end": "1051360"
  },
  {
    "text": "do do and they're always moving up the directory and then coming back down somewhere to find a",
    "start": "1051360",
    "end": "1056919"
  },
  {
    "text": "module one of the thing things you can do with modules directory is basically tell webpack what is the entry point",
    "start": "1056919",
    "end": "1064480"
  },
  {
    "text": "where I should go start searching for things so if I have a statement like import Fu from bar what webpack will do",
    "start": "1064480",
    "end": "1072200"
  },
  {
    "text": "is first go to the/ client script folder and look for a bar directory with an",
    "start": "1072200",
    "end": "1078120"
  },
  {
    "text": "index file or a bar. JS file it'll try to find it there it'll try to find it in node",
    "start": "1078120",
    "end": "1083640"
  },
  {
    "text": "modules and this just if you define module directories for the top level",
    "start": "1083640",
    "end": "1089960"
  },
  {
    "text": "modules that you want people to use there becomes a very easy pattern to to",
    "start": "1089960",
    "end": "1095799"
  },
  {
    "text": "to spot in People's Source Code if you see them using do dot this and dot dot that or trying to drill too deep into",
    "start": "1095799",
    "end": "1102679"
  },
  {
    "text": "the directory layer that you've defined then you know they're doing something wrong they're not they're not",
    "start": "1102679",
    "end": "1108799"
  },
  {
    "text": "following the conventions and the pattern that you want to use in the application this by the way also is",
    "start": "1108799",
    "end": "1114880"
  },
  {
    "text": "supported by typescript we'll talk about that in a second um something else I believe in is having a webpack",
    "start": "1114880",
    "end": "1120080"
  },
  {
    "text": "configuration file per purpose so the pattern that I've seen in the last couple applications I've built is",
    "start": "1120080",
    "end": "1126120"
  },
  {
    "text": "there'll be a web pack. config.js that um will build my application code I'll",
    "start": "1126120",
    "end": "1132840"
  },
  {
    "text": "have a web pack. config.js which will build thirdparty code so vendor code things like angular",
    "start": "1132840",
    "end": "1140360"
  },
  {
    "text": "react whatever I'm using and I'll have a web pack. test or webpack doc config",
    "start": "1140360",
    "end": "1146600"
  },
  {
    "text": "dots. JS so that webpack bundles up my tests which brings me to another Point",
    "start": "1146600",
    "end": "1153200"
  },
  {
    "text": "while I'm at it a lot of people will use a test JavaScript test Runner like karma karma has a lot of plugins you can tell",
    "start": "1153200",
    "end": "1160120"
  },
  {
    "text": "Karma that you want it to run unit tests and point it to typescript files but then you also have to load a plugin to",
    "start": "1160120",
    "end": "1166320"
  },
  {
    "text": "Karma to say when you see a TS file please transpile that before you try to run the code inside and so you have",
    "start": "1166320",
    "end": "1172960"
  },
  {
    "text": "Karma transpiling your test on the Fly I would prefer actually to just have",
    "start": "1172960",
    "end": "1178080"
  },
  {
    "text": "webpack do that it simplifies the configuration for karma you don't have to worry about it transpiling things and",
    "start": "1178080",
    "end": "1185640"
  },
  {
    "text": "I've typically found that to just to be a little more robust and to work better and maybe even be a little bit quicker",
    "start": "1185640",
    "end": "1191640"
  },
  {
    "text": "Karma all it has to do now is sit in the background and wait for a file to change a JS file that's already been bundled up",
    "start": "1191640",
    "end": "1198200"
  },
  {
    "text": "with all my test produced by webpack which is really good at calling and getting things change piled and then",
    "start": "1198200",
    "end": "1204120"
  },
  {
    "text": "Karma just has to execute those tests in a browser and the one thing to remember about webpack is I'll see this um",
    "start": "1204120",
    "end": "1212520"
  },
  {
    "text": "pattern to where I actually write a little bit of JavaScript code to go out and find the things that I want webpack",
    "start": "1212520",
    "end": "1217840"
  },
  {
    "text": "to do because webpack this configuration file it is executing inside of node.js you have access to all the npm modules",
    "start": "1217840",
    "end": "1225919"
  },
  {
    "text": "and um programming constructs that you can us a node so I can go out and I can",
    "start": "1225919",
    "end": "1230960"
  },
  {
    "text": "require something like a glob and I can say basically I want to go out and find all my so this is building tests I want",
    "start": "1230960",
    "end": "1238240"
  },
  {
    "text": "to find out all the files that have aecs dots extension those are my tests",
    "start": "1238240",
    "end": "1244760"
  },
  {
    "text": "through all the folders that are in my project and just bundle them all up and",
    "start": "1244760",
    "end": "1249919"
  },
  {
    "text": "I'll have some specs over here in this other area where I keep common modules and this crazy",
    "start": "1249919",
    "end": "1256799"
  },
  {
    "text": "thing is just trying to rewrite the file name so that if I have a file in say",
    "start": "1256799",
    "end": "1263400"
  },
  {
    "text": "slash features slash dashboard slfu and it's bar. spec. TS I want that",
    "start": "1263400",
    "end": "1270840"
  },
  {
    "text": "Rewritten in a way so that it is just um I'm trying to remember what I do",
    "start": "1270840",
    "end": "1277840"
  },
  {
    "text": "there with that crazy Global expression I just want to call it",
    "start": "1277840",
    "end": "1284919"
  },
  {
    "text": "uh whatever its name is SL script TSX yeah to the end of the day",
    "start": "1284919",
    "end": "1292360"
  },
  {
    "text": "I'm a little bit loopy right",
    "start": "1292360",
    "end": "1296080"
  },
  {
    "text": "now so that's modules let's talk about Aros Syntax for a second AOS syntax that was introduced in equiscript 2015 is",
    "start": "1298080",
    "end": "1304600"
  },
  {
    "text": "this beautiful notation for writing a function that looks just like Lambda expressions in CP so I can write an",
    "start": "1304600",
    "end": "1309760"
  },
  {
    "text": "expression where X goes to x x x and I can invoke Square now like a",
    "start": "1309760",
    "end": "1316039"
  },
  {
    "text": "function if there's two parameters I need parentheses around the parameters so here X and Y go to x + y and here's a",
    "start": "1316039",
    "end": "1326520"
  },
  {
    "text": "log ah well that one's not different I was going to say if you have zero parameters you have to use a parenthesis",
    "start": "1328360",
    "end": "1333640"
  },
  {
    "text": "too but I can invoke log passing at the result of squaring adding three and five very good I mean seems simple right and",
    "start": "1333640",
    "end": "1340760"
  },
  {
    "text": "allows you to do a lot of programming with higher order functions with EC which ecmascript and JavaScript",
    "start": "1340760",
    "end": "1347000"
  },
  {
    "text": "encourage because now I can call like the map function on an array and just pass in an arrow function and double",
    "start": "1347000",
    "end": "1352960"
  },
  {
    "text": "everything in the array I don't have to use the function keyword anymore which is nice but here's some patterns where",
    "start": "1352960",
    "end": "1358880"
  },
  {
    "text": "I've seen people run into problem um problems and I see it a lot actually in the react Community just because of um",
    "start": "1358880",
    "end": "1365360"
  },
  {
    "text": "their particular style of programming but one problem I've seen people run into is trying to return an object",
    "start": "1365360",
    "end": "1371760"
  },
  {
    "text": "literal when they're writing an arrow function because the what the JavaScript runtime sees here is that you're passing",
    "start": "1371760",
    "end": "1378120"
  },
  {
    "text": "in aun function that takes a parameter n and it returns this expression which is",
    "start": "1378120",
    "end": "1383159"
  },
  {
    "text": "an object literal um or sorry doesn't return this expression I got that",
    "start": "1383159",
    "end": "1389279"
  },
  {
    "text": "backwards when the JavaScript runtime sees that opening curly brace it assumes",
    "start": "1389279",
    "end": "1394480"
  },
  {
    "text": "you're not just immediately returning an expression anymore it assumes you're running a executing a block of code so",
    "start": "1394480",
    "end": "1401559"
  },
  {
    "text": "as soon as you put that opening curly brace there you've defined a function that unless it has a specific return an",
    "start": "1401559",
    "end": "1409039"
  },
  {
    "text": "explicit return keyword it doesn't return anything so numbers. map n goes",
    "start": "1409039",
    "end": "1414320"
  },
  {
    "text": "to what I thought would be an object literal where I'm creating objects with a value property that would actually",
    "start": "1414320",
    "end": "1420559"
  },
  {
    "text": "produce undefined undefined undefined so an array with those three values easy",
    "start": "1420559",
    "end": "1425640"
  },
  {
    "text": "solution to that is to wrap that object literal with parentheses and then you come out with",
    "start": "1425640",
    "end": "1432279"
  },
  {
    "text": "value one value two value three those three objects fast fting",
    "start": "1432279",
    "end": "1438799"
  },
  {
    "text": "isn't it glad you stuck around for this I hope and here's where people run into",
    "start": "1438799",
    "end": "1445400"
  },
  {
    "text": "problems with error functions so it's supposed to be a feature of Arrow functions",
    "start": "1445400",
    "end": "1451320"
  },
  {
    "text": "um but it creates problems so the idea one of one of the special characteristics of an arrow function is",
    "start": "1451320",
    "end": "1458039"
  },
  {
    "text": "that it can lexically bind the this reference so I don't have to save the",
    "start": "1458039",
    "end": "1463400"
  },
  {
    "text": "this reference off into a local variable and capture it in a closure so for",
    "start": "1463400",
    "end": "1469520"
  },
  {
    "text": "example this Adder object has an add method and I can tell it to add up some",
    "start": "1469520",
    "end": "1475159"
  },
  {
    "text": "numbers passing an array and it's going to try to use a for each",
    "start": "1475159",
    "end": "1480240"
  },
  {
    "text": "statement and access this right you've run into the slippery this problem before I'm I'm",
    "start": "1480240",
    "end": "1487080"
  },
  {
    "text": "sure the value of this has changed from what it was at this point in time right",
    "start": "1487080",
    "end": "1492559"
  },
  {
    "text": "inside of where we started executing and this piece of code that is inside of the function that we passed",
    "start": "1492559",
    "end": "1498880"
  },
  {
    "text": "into for each so we'll get cannot read properly sum it's not pointing to an Adder object",
    "start": "1498880",
    "end": "1504279"
  },
  {
    "text": "anymore Arrow functions solve that problem because this Arrow function",
    "start": "1504279",
    "end": "1509600"
  },
  {
    "text": "that's defined that I'm passing into for each the rules of JavaScript say that this has to lexically bind which just",
    "start": "1509600",
    "end": "1516000"
  },
  {
    "text": "means in this looking at the source code lexically the value of this here has to",
    "start": "1516000",
    "end": "1521120"
  },
  {
    "text": "be the same as the value of this just outside the eror function so like just when we started executing ads so that",
    "start": "1521120",
    "end": "1526960"
  },
  {
    "text": "code will work fine but this is where people run into problems Arrow",
    "start": "1526960",
    "end": "1532520"
  },
  {
    "text": "functions you have to be careful about using too many arrows so this is working",
    "start": "1532520",
    "end": "1537799"
  },
  {
    "text": "code right here I have a method definition on the object literal and for",
    "start": "1537799",
    "end": "1543480"
  },
  {
    "text": "each statement inside but what if I wrote it like this what if I wrote add as an arrow",
    "start": "1543480",
    "end": "1549030"
  },
  {
    "text": "[Music] function that means that this Arrow function will capture the value of this",
    "start": "1549030",
    "end": "1556440"
  },
  {
    "text": "lexically in the scope where it was defined which is outside of Adder so it's typically whatever is the value of",
    "start": "1556440",
    "end": "1562760"
  },
  {
    "text": "this is inside of a module and inside of a module the default value of this is",
    "start": "1562760",
    "end": "1569240"
  },
  {
    "text": "undefined so this code doesn't work so you know basically look for the",
    "start": "1569240",
    "end": "1574520"
  },
  {
    "text": "enclosing scope of the arrow function if you're inside of another function you're fine if you're inside of an object",
    "start": "1574520",
    "end": "1581360"
  },
  {
    "text": "literal you're not in such a good shape and then the other thing that",
    "start": "1581360",
    "end": "1587120"
  },
  {
    "text": "trips people up like again particularly react PR programmers who want to Define Arrow functions and bind them to event",
    "start": "1587120",
    "end": "1593039"
  },
  {
    "text": "handlers is that once the value of the this reference is set for an arrow function you can't change it it's baked",
    "start": "1593039",
    "end": "1600240"
  },
  {
    "text": "in so if I Define this object adder and I Define this function called",
    "start": "1600240",
    "end": "1606840"
  },
  {
    "text": "add and then I try to bind Adder to the add object literal here to that Adder",
    "start": "1606840",
    "end": "1614200"
  },
  {
    "text": "object uh that fails I cannot change the value of this doesn't work the value of this will be",
    "start": "1614200",
    "end": "1620279"
  },
  {
    "text": "lexically whatever wherever this was defined so it just be out here it be",
    "start": "1620279",
    "end": "1625799"
  },
  {
    "text": "undefined and that's something that you have to be careful with with Legacy Library so I I write a lot of Jasmine unit tests and there's this ability in a",
    "start": "1625799",
    "end": "1634000"
  },
  {
    "text": "jasman unit tests where inside of a test here inside of a an it you can use the",
    "start": "1634000",
    "end": "1640159"
  },
  {
    "text": "value of this to pass around some context between different tests or",
    "start": "1640159",
    "end": "1645320"
  },
  {
    "text": "between the you know like before each and then each individual test and what Jasmine tries to do when it invokes this",
    "start": "1645320",
    "end": "1652440"
  },
  {
    "text": "function is it tries to set up the value of this to point to the test context that it's managing but it doesn't work",
    "start": "1652440",
    "end": "1659240"
  },
  {
    "text": "because Jasmine's unable to change the value of this this is actually how I ran into this I had Jasmine test failing",
    "start": "1659240",
    "end": "1665760"
  },
  {
    "text": "just because I changed this from function function keyword to an error",
    "start": "1665760",
    "end": "1670919"
  },
  {
    "text": "function and that can happen with things too like jQuery um jQuery I'm trying to",
    "start": "1670919",
    "end": "1676080"
  },
  {
    "text": "go out to a button hook up a click event handler to find it with an arrow function and saying this.name because if",
    "start": "1676080",
    "end": "1681559"
  },
  {
    "text": "I wrote that as a regular function it would work because when jQuery invokes this call back it sets up the this",
    "start": "1681559",
    "end": "1686760"
  },
  {
    "text": "pointer to point to the Dom element but as an arrow function it doesn't work and",
    "start": "1686760",
    "end": "1691840"
  },
  {
    "text": "the value will be whatever function I'm inside of or at module scope it would be",
    "start": "1691840",
    "end": "1697840"
  },
  {
    "text": "undefined there's new keywords to declare variables and e as of ecmascript 2015 and one of the patterns I see out",
    "start": "1697840",
    "end": "1704559"
  },
  {
    "text": "there that I kind of like and that I've been using is that use the const keyword instead of the let keyword wherever you",
    "start": "1704559",
    "end": "1711640"
  },
  {
    "text": "can um constant means no one else can assign to that variable they cannot",
    "start": "1711640",
    "end": "1717240"
  },
  {
    "text": "overwrite the value so if I try xal 3 on a const x that should be a type error at",
    "start": "1717240",
    "end": "1722840"
  },
  {
    "text": "runtime that doesn't mean that I cannot modify again the object that I'm pointing",
    "start": "1722840",
    "end": "1729120"
  },
  {
    "text": "to so I can modify this array and push new values into it it just means that no one can walk up and say numbers equals",
    "start": "1729120",
    "end": "1735679"
  },
  {
    "text": "in some other array if that's something I wanted to do",
    "start": "1735679",
    "end": "1740760"
  },
  {
    "text": "there's an object. freeze API to freeze numbers and there's libraries like a mutable JS that will give you immutable",
    "start": "1740760",
    "end": "1747360"
  },
  {
    "text": "data structures I would look at that something else so another pattern",
    "start": "1747360",
    "end": "1754360"
  },
  {
    "text": "another set of patterns that has completely Fallen away when you start writing equiscript 2015 or typescript is",
    "start": "1754360",
    "end": "1759440"
  },
  {
    "text": "that you don't never write another um Constructor function and prototype uh equiscript 2015 introduced classes and",
    "start": "1759440",
    "end": "1766720"
  },
  {
    "text": "we say that classes are just syntactic sugar for what happens behind the scenes",
    "start": "1766720",
    "end": "1772039"
  },
  {
    "text": "which is here's a Constructor function that someone uses the new keyword on this is modif setting up the prototype",
    "start": "1772039",
    "end": "1779080"
  },
  {
    "text": "for objects that will be instantiated from employees to make sure they have do work",
    "start": "1779080",
    "end": "1784240"
  },
  {
    "text": "methods and that's a useful mental model to have about classes that they map from",
    "start": "1784240",
    "end": "1789799"
  },
  {
    "text": "this syntax to this syntax but there's a couple patterns that you might have used with",
    "start": "1789799",
    "end": "1795720"
  },
  {
    "text": "Constructor functions that don't work with classes for example",
    "start": "1795720",
    "end": "1803320"
  },
  {
    "text": "hoisting you might want to write a utility class of some sort in a module and push it down at the end of the file",
    "start": "1804279",
    "end": "1810720"
  },
  {
    "text": "because it's not important it's not the thing you're exporting you just want to use it from the top of the file and you would think that would work",
    "start": "1810720",
    "end": "1817360"
  },
  {
    "text": "I mean it works with functions I can say cone equals new employee and Define the employee Constructor function later at",
    "start": "1817360",
    "end": "1822679"
  },
  {
    "text": "the bottom of the file and that just works because JavaScript essentially uh hoists that definition up to the top of",
    "start": "1822679",
    "end": "1829120"
  },
  {
    "text": "the file and things work it does not work with classes if I",
    "start": "1829120",
    "end": "1835600"
  },
  {
    "text": "try that same code with a class definition at the bottom that will be a runtime reference error which is",
    "start": "1835600",
    "end": "1841720"
  },
  {
    "text": "interesting and you say well why is that and you'll get even more confused when you go into the ecmascript 2015",
    "start": "1841720",
    "end": "1847640"
  },
  {
    "text": "specification and you realize that they say um classes and functions are both",
    "start": "1847640",
    "end": "1853440"
  },
  {
    "text": "hoisted and the function hoisting allows this to work but for some reason the class hoisting doesn't work and that's",
    "start": "1853440",
    "end": "1859639"
  },
  {
    "text": "because of this other thing that you'll find in the ecmascript specification called the temporal Dead Zone anyone he",
    "start": "1859639",
    "end": "1865360"
  },
  {
    "text": "of the temporal Dead Zone The tdz Sounds like a bad",
    "start": "1865360",
    "end": "1871240"
  },
  {
    "text": "movie the temporal dead zone is what the ecmascript 2015 specification declares",
    "start": "1871240",
    "end": "1876760"
  },
  {
    "text": "as the area where a symbol is available because it's",
    "start": "1876760",
    "end": "1882720"
  },
  {
    "text": "been hoisted so like a class definition at the bottom of the file it's there it's been",
    "start": "1882720",
    "end": "1888480"
  },
  {
    "text": "hoisted but until it's been formally declared it's in the temporal Dead Zone and any attempt to actually try to",
    "start": "1888480",
    "end": "1894960"
  },
  {
    "text": "access it will produce a reference err the same thing actually happens with let so let xals 2 this x technically it's",
    "start": "1894960",
    "end": "1903200"
  },
  {
    "text": "hoisted to the top of the function it's available up here but if I touch it or try to do anything with it I'll get a",
    "start": "1903200",
    "end": "1908320"
  },
  {
    "text": "reference here and that's just partic it that wouldn't happen with VAR bars are hoisted and there's no tdz but uh",
    "start": "1908320",
    "end": "1915639"
  },
  {
    "text": "anything declar with let or const or class definition you would run into that problem another problem I see people run",
    "start": "1915639",
    "end": "1921880"
  },
  {
    "text": "into a pattern again trying to push the pattern aspects of this talk is people",
    "start": "1921880",
    "end": "1928240"
  },
  {
    "text": "do a lot of reflection in JavaScript I want to walk up to an object and see what's inside of it and it works a little bit differently",
    "start": "1928240",
    "end": "1935440"
  },
  {
    "text": "if you define a Constructor function and a prototype if I do a four in Loop over",
    "start": "1935440",
    "end": "1940639"
  },
  {
    "text": "a new instance of human I will get back the do work function that was defined in",
    "start": "1940639",
    "end": "1946480"
  },
  {
    "text": "the prototyp so I could see oh yes this object has that capability but if I tried to do that",
    "start": "1946480",
    "end": "1952960"
  },
  {
    "text": "same thing with a class definition it wouldn't work just when class when a",
    "start": "1952960",
    "end": "1958440"
  },
  {
    "text": "class is instantiated it takes some extra steps when it's uh adding those methods into the Prototype so that they",
    "start": "1958440",
    "end": "1965399"
  },
  {
    "text": "are not seen in a Forin Loop so you might be wondering well I",
    "start": "1965399",
    "end": "1970480"
  },
  {
    "text": "really want to do see what is in this class what do I do what do I do you could do this you could say I",
    "start": "1970480",
    "end": "1976200"
  },
  {
    "text": "want to get the Prototype of this object that I have and then once I have that I can use",
    "start": "1976200",
    "end": "1982919"
  },
  {
    "text": "object. get own property names on that prototype object to find out exactly what is inside of a horse and that will",
    "start": "1982919",
    "end": "1989000"
  },
  {
    "text": "actually not only tell me about do work it'll tell me about a Constructor that is available for horse because it's a",
    "start": "1989000",
    "end": "1997158"
  },
  {
    "text": "class another pattern that you might have seen in regular JavaScript is when people Implement a Constructor function",
    "start": "2000320",
    "end": "2007200"
  },
  {
    "text": "they'll use instance of checks inside of the Constructor function to make sure that someone invoked that function using",
    "start": "2007200",
    "end": "2013279"
  },
  {
    "text": "the new keyword and if they didn't because it's not an instance of that",
    "start": "2013279",
    "end": "2018559"
  },
  {
    "text": "function uh they'll turn around and use new and call the function again you don't have to do that with classes if I",
    "start": "2018559",
    "end": "2024840"
  },
  {
    "text": "have a horse class defined and someone just tries to invoke that Constructor",
    "start": "2024840",
    "end": "2030200"
  },
  {
    "text": "function that's it's there behind the scenes for a class that'll be a runtime type error so you don't need to do any",
    "start": "2030200",
    "end": "2035720"
  },
  {
    "text": "crazy checks on that but interestingly",
    "start": "2035720",
    "end": "2040518"
  },
  {
    "text": "enough if you're in a situation where you might want to mock something out or fake something out and you want to walk",
    "start": "2040760",
    "end": "2046519"
  },
  {
    "text": "up to an existing class definition and um rewrite the Constructor you can actually return anything from a",
    "start": "2046519",
    "end": "2052480"
  },
  {
    "text": "Constructor it's not like C where I say new horse and I always get back a horse I could say new horse here and just get",
    "start": "2052480",
    "end": "2058839"
  },
  {
    "text": "back an object with a name property Jiffy",
    "start": "2058839",
    "end": "2065878"
  },
  {
    "text": "JavaScript um so here's something to think about using new features of the ecmascript language",
    "start": "2066560",
    "end": "2072839"
  },
  {
    "text": "so ecmascript didn't change for this 10-year period because of political infighting where the parties fell apart",
    "start": "2072839",
    "end": "2079480"
  },
  {
    "text": "and they ditched version four of the standard and it took forever to get back on track and we finally got ecmascript",
    "start": "2079480",
    "end": "2084638"
  },
  {
    "text": "2015 and now there's a new ecmascript specification every year did you know that there there was a 2015 there was a",
    "start": "2084639",
    "end": "2091320"
  },
  {
    "text": "2016 which didn't include really anything new but there's a 2017 specification coming now and so you",
    "start": "2091320",
    "end": "2097720"
  },
  {
    "text": "might want to say to yourself how aggressively should I adopt features and I depends on the application and the",
    "start": "2097720",
    "end": "2103640"
  },
  {
    "text": "team but I see a lot of people aggressively adopting features in some circles like in the react circles",
    "start": "2103640",
    "end": "2110000"
  },
  {
    "text": "they're aggressively adopting new features of ecmascript features that are haven't even reach the standard yet and",
    "start": "2110000",
    "end": "2115920"
  },
  {
    "text": "one of the popular trans poers out there Babble there's plugins available for it",
    "start": "2115920",
    "end": "2122160"
  },
  {
    "text": "that allows you to configure just what Babel knows how to compile how how you",
    "start": "2122160",
    "end": "2127440"
  },
  {
    "text": "know should it transpile stuff from just ecmascript 2015 or also 2016 and 2017 so",
    "start": "2127440",
    "end": "2132599"
  },
  {
    "text": "I can go into my Babel configuration and npm install Babel plus es 20105 plus es",
    "start": "2132599",
    "end": "2139880"
  },
  {
    "text": "20106 if I just want all the current standards I can just say npm install the latest plugin for Babel there's a plugin",
    "start": "2139880",
    "end": "2147280"
  },
  {
    "text": "for react and then there's the these stages over here which are interesting so",
    "start": "2147280",
    "end": "2152680"
  },
  {
    "text": "the the equiscript specification the way the way they work the recommendations",
    "start": "2152680",
    "end": "2157800"
  },
  {
    "text": "all go through this stage process where stage zero is basically like okay someone on the committee had an idea at",
    "start": "2157800",
    "end": "2163599"
  },
  {
    "text": "the bar and they're going to propose this new feature by the time it reaches stage one it's a little more serious",
    "start": "2163599",
    "end": "2168800"
  },
  {
    "text": "people have prototyped this out they've hopefully worked out some of the bugs and the Imp implications for the runtime",
    "start": "2168800",
    "end": "2175319"
  },
  {
    "text": "um by stage two there's probably some people that have implemented this in a runtime somewhere and by stage three you",
    "start": "2175319",
    "end": "2181960"
  },
  {
    "text": "might even have browser vendors already adopting this new feature of ecmascript before it's officially in the SPC and",
    "start": "2181960",
    "end": "2187960"
  },
  {
    "text": "then then there's a stage four which is essentially it's it's ready to go it's just waiting for the next specification to be released and you can go into Babel",
    "start": "2187960",
    "end": "2194960"
  },
  {
    "text": "and you can say Okay I want stage three features because I want stuff that's almost there it looks so good I just",
    "start": "2194960",
    "end": "2200599"
  },
  {
    "text": "want to use it this to me is always interesting um",
    "start": "2200599",
    "end": "2208359"
  },
  {
    "text": "typescript is a lot less aggressive on implementing some of these features some things they go for like Ayn we before it",
    "start": "2208359",
    "end": "2213680"
  },
  {
    "text": "was actually ready from the specification but um Babble you can get really far ahead of yourself and some of",
    "start": "2213680",
    "end": "2219280"
  },
  {
    "text": "these new features are quite good some of them I worry about and sometimes I worry that something will change in a late stage and and break existing code",
    "start": "2219280",
    "end": "2227000"
  },
  {
    "text": "but I I did just want to cover one crazy operator that's being that is currently in stage three and quite useful it's the",
    "start": "2227000",
    "end": "2234160"
  },
  {
    "text": "object spread operator um but sometimes it leads to crazy looking code so this",
    "start": "2234160",
    "end": "2240520"
  },
  {
    "text": "is not new this is the Bang Bang You're a Boolean so I want to take value and basically coers it into a true bu",
    "start": "2240520",
    "end": "2247520"
  },
  {
    "text": "Boolean value and get back a true or false so a value of one this should be a result of true a true Boolean a true",
    "start": "2247520",
    "end": "2255160"
  },
  {
    "text": "Boolean Val value of true and we're going to combine that",
    "start": "2255160",
    "end": "2260240"
  },
  {
    "text": "with something called the spread operator so the spread operator in ecmascript 2015 allowed you to do things like take",
    "start": "2260240",
    "end": "2267560"
  },
  {
    "text": "an array and spread it into a new array so result would be an array with 1 2 3 4",
    "start": "2267560",
    "end": "2272880"
  },
  {
    "text": "5 6 and people looked at that and said you know that's that's nice to have with",
    "start": "2272880",
    "end": "2279520"
  },
  {
    "text": "arrays but what I would really like is to be able to spread an object into another object in other words if I have",
    "start": "2279520",
    "end": "2285839"
  },
  {
    "text": "this object data with X1 Y2 I'm going to create this new object",
    "start": "2285839",
    "end": "2290920"
  },
  {
    "text": "result that will have name X and Y in other words take that data object and spread its properties into",
    "start": "2290920",
    "end": "2297920"
  },
  {
    "text": "result and this is another one of those things that's quite useful in react when",
    "start": "2297920",
    "end": "2303240"
  },
  {
    "text": "you're using something like Redux and you're always creating uh new instances of objects to represent your new state",
    "start": "2303240",
    "end": "2309079"
  },
  {
    "text": "but you need to copy some things over from old objects and in fact in the Redux Library",
    "start": "2309079",
    "end": "2315560"
  },
  {
    "text": "there's this construct dot dot dot bang bang turn area expression and you look at that and",
    "start": "2315560",
    "end": "2322640"
  },
  {
    "text": "you have to figure out what it does and what it's doing you I mean one of the first things you have to figure out is",
    "start": "2322640",
    "end": "2328640"
  },
  {
    "text": "operator precedence obviously I mean what what order is this expression going to be evaluated in so once you find out",
    "start": "2328640",
    "end": "2335640"
  },
  {
    "text": "that um the negation operator will be evaluated first you'll",
    "start": "2335640",
    "end": "2341440"
  },
  {
    "text": "realize okay what we're going to do is we're going to turn data into a Boolean true or false and then the next thing",
    "start": "2341440",
    "end": "2347880"
  },
  {
    "text": "that is evaluated is the tary expression so if data is true we're going to take",
    "start": "2347880",
    "end": "2352920"
  },
  {
    "text": "the data object and spread it into this thing if bang bang data returns false",
    "start": "2352920",
    "end": "2360560"
  },
  {
    "text": "we're going to take this object literal over here Default true and spread that one into result so I want to spread one",
    "start": "2360560",
    "end": "2366599"
  },
  {
    "text": "of those two things into result but if you haven't given me data I'll spread a default in",
    "start": "2366599",
    "end": "2372560"
  },
  {
    "text": "there JavaScript asyn A8 wonderful feature I just started using it a few weeks ago",
    "start": "2372560",
    "end": "2379319"
  },
  {
    "text": "and I'm much I'm much I like this feature but almost immediately the team ran into a couple",
    "start": "2379319",
    "end": "2385640"
  },
  {
    "text": "problems so ayle weight is behind the scenes is all promise based when I have",
    "start": "2385640",
    "end": "2392319"
  },
  {
    "text": "a function declaration get match set that is an async function",
    "start": "2392319",
    "end": "2397760"
  },
  {
    "text": "that means that that function has to return a promise and when a transpiler like Babel or typescript comes across",
    "start": "2397760",
    "end": "2403319"
  },
  {
    "text": "this it will make sure that get match set returns a promise because it it'll create one immediately and then resolve it if I",
    "start": "2403319",
    "end": "2411359"
  },
  {
    "text": "return result. dat and reject it if an if an exception comes out of here so it works very similar to C but C of course",
    "start": "2411359",
    "end": "2419079"
  },
  {
    "text": "is a task of T here behind the scenes the mechanism to control this is a",
    "start": "2419079",
    "end": "2424680"
  },
  {
    "text": "promise JavaScript promise and here I can await something that returns a promise any promise it doesn't have to",
    "start": "2424680",
    "end": "2431640"
  },
  {
    "text": "be a library that was implemented with async await it just has to be a library",
    "start": "2431640",
    "end": "2436839"
  },
  {
    "text": "like jQuery angular all sorts of libraries out there use promises for different things so this is a HTTP",
    "start": "2436839",
    "end": "2443680"
  },
  {
    "text": "communication Library called axios and I can say axios.com us because of that I can await",
    "start": "2443680",
    "end": "2449119"
  },
  {
    "text": "it and I'll get the result of a the successful resolution here inside my result",
    "start": "2449119",
    "end": "2454800"
  },
  {
    "text": "variable um the trick here is there's nothing in JavaScript that forces you or will be aware that you might have forgot",
    "start": "2454800",
    "end": "2462000"
  },
  {
    "text": "the await keyword and that when you return result. dat um you're really returning the uh you're",
    "start": "2462000",
    "end": "2470040"
  },
  {
    "text": "trying to get the data property of the promise that was returned from axio doget so that's one of the issues that",
    "start": "2470040",
    "end": "2476640"
  },
  {
    "text": "comes up with this but this is how I could use it uh I could have a load method that's also",
    "start": "2476640",
    "end": "2482000"
  },
  {
    "text": "async and say I want to go out and await my API getting golfers await my API getting something else",
    "start": "2482000",
    "end": "2488079"
  },
  {
    "text": "and then do some work with that data that has come back and that's just waiting for promises to resolve how many",
    "start": "2488079",
    "end": "2493880"
  },
  {
    "text": "people think that would be in serial like one at a",
    "start": "2493880",
    "end": "2498920"
  },
  {
    "text": "time we'll we'll get the active golfers and wait for that response to come back before we go to get match set anyone",
    "start": "2498920",
    "end": "2505839"
  },
  {
    "text": "think that yeah how many people think it would be in parallel nobody okay",
    "start": "2505839",
    "end": "2513079"
  },
  {
    "text": "well this what happened one at a time we're awaiting that promise to to resolve and we're not going to go any",
    "start": "2513079",
    "end": "2519079"
  },
  {
    "text": "further in this function until that promise returns and we have some golfers and then we'll go out and get the match",
    "start": "2519079",
    "end": "2524119"
  },
  {
    "text": "set so how would you make this work uh in parallel there's a couple ways to do it but basically you cannot use and",
    "start": "2524119",
    "end": "2530359"
  },
  {
    "text": "await until after you've called these two methods get active golfers get match set and one way you could do it is just",
    "start": "2530359",
    "end": "2537240"
  },
  {
    "text": "to use the built-in promise methods that are available like promise.all promise.all you pass it an array of",
    "start": "2537240",
    "end": "2543359"
  },
  {
    "text": "promises it will wait for them all to resolve successfully and then give you the result back in an array which will",
    "start": "2543359",
    "end": "2549960"
  },
  {
    "text": "just destructure here into two variables golfers and match set and again it's a good demonstration of I can await any",
    "start": "2549960",
    "end": "2556319"
  },
  {
    "text": "promise even a promise that I create it's no problem typescript I'll be honest I uh",
    "start": "2556319",
    "end": "2564839"
  },
  {
    "text": "avoided typescript for the longest time I thought it had some wonderful",
    "start": "2564839",
    "end": "2570319"
  },
  {
    "text": "features but I it just didn't work the way that I wanted it to it seemed like it was always just not quite up to par",
    "start": "2570319",
    "end": "2577760"
  },
  {
    "text": "for with what I wanted it to do but I think angular has been very good for typescript I think the typescript team",
    "start": "2577760",
    "end": "2583599"
  },
  {
    "text": "actually recognizes the problems that JavaScript programmers want to solve and how the tools work and how the ecosystem",
    "start": "2583599",
    "end": "2589839"
  },
  {
    "text": "works and I just wanted to point out a few things about this TS config.js file",
    "start": "2589839",
    "end": "2595000"
  },
  {
    "text": "that um typescript uses to figure out you know how it's going to behave so",
    "start": "2595000",
    "end": "2600559"
  },
  {
    "text": "first is the no implicit any that's been around forever but that's basically the trigger that says are you all in with",
    "start": "2600559",
    "end": "2606040"
  },
  {
    "text": "typescript are you not and if I set that to false I can have any types just floating around anywhere",
    "start": "2606040",
    "end": "2611440"
  },
  {
    "text": "and I don't have to worry about typing as much as many interface definitions and things like that for",
    "start": "2611440",
    "end": "2618359"
  },
  {
    "text": "typescript I liked that they started embracing things like working with the angular team and also working with react",
    "start": "2618359",
    "end": "2624319"
  },
  {
    "text": "it's a real pleasure to write TSX files and write jsx components with typescript",
    "start": "2624319",
    "end": "2629520"
  },
  {
    "text": "behind the scenes here's a big one that arrived module resolution node it's",
    "start": "2629520",
    "end": "2634760"
  },
  {
    "text": "really nice that I can just say npm install some library and maybe that Library already",
    "start": "2634760",
    "end": "2641680"
  },
  {
    "text": "has typescript definition files like angular 2 would and then I can just start writing TTS files in my own",
    "start": "2641680",
    "end": "2648119"
  },
  {
    "text": "project and say import this and import that and typescript automatically because of this module resolution",
    "start": "2648119",
    "end": "2654000"
  },
  {
    "text": "setting we'll say yeah I'll go into the node modules directory and look for those things requ requires no additional",
    "start": "2654000",
    "end": "2659960"
  },
  {
    "text": "setup which is nice I like the path setting so you",
    "start": "2659960",
    "end": "2666160"
  },
  {
    "text": "might remember earlier when we talked about webpack and this was new in version two I think two or 2.1 I don't remember",
    "start": "2666160",
    "end": "2674040"
  },
  {
    "text": "earlier in webpack I gave webpack some paths to look for modules here I'm doing",
    "start": "2674040",
    "end": "2679760"
  },
  {
    "text": "the same thing with typescript if someone says that they need to import food from bar um go out and look in the",
    "start": "2679760",
    "end": "2686599"
  },
  {
    "text": "client script.js look for that file or the bar",
    "start": "2686599",
    "end": "2692160"
  },
  {
    "text": "directory that's really nice so it understands my layout and it even understands my environment so when one of the things I would struggle with with",
    "start": "2692160",
    "end": "2698400"
  },
  {
    "text": "typescript is sometimes you'd pull down a library and typescript would complain that I don't know what A promise is or I",
    "start": "2698400",
    "end": "2703760"
  },
  {
    "text": "don't know what this Dom structure is that you're using now with this lib setting you can explicitly tell",
    "start": "2703760",
    "end": "2710160"
  },
  {
    "text": "typescript the type of environment that you're operating in so I'm PR programming in the browser I'm going to",
    "start": "2710160",
    "end": "2715359"
  },
  {
    "text": "tell typescript that the Dom apis will be available don't worry about it don't try to uh throw an air from trying to",
    "start": "2715359",
    "end": "2722079"
  },
  {
    "text": "set inner text on such and such a thing I'm using es5 API also using ES 2015",
    "start": "2722079",
    "end": "2728720"
  },
  {
    "text": "promises they will be available which is",
    "start": "2728720",
    "end": "2735039"
  },
  {
    "text": "good a place to call home this would show what my usual um directory",
    "start": "2737480",
    "end": "2744000"
  },
  {
    "text": "structure would look like for certain applications where I have a Services folder in that Services folder I might",
    "start": "2744000",
    "end": "2750079"
  },
  {
    "text": "have um an API wrapper for my web API something that handles airs U something that handles parameters that come down",
    "start": "2750079",
    "end": "2756319"
  },
  {
    "text": "from the web server U that might be private udal I only want to use that inside of services so that's where",
    "start": "2756319",
    "end": "2763079"
  },
  {
    "text": "inside of index.ts that that's where I would carefully go through and just export the things that I want to export",
    "start": "2763079",
    "end": "2768800"
  },
  {
    "text": "from services so that somewhere else in my application I can just",
    "start": "2768800",
    "end": "2774200"
  },
  {
    "text": "say import API uh import API from services I don't have to say import API",
    "start": "2774200",
    "end": "2780240"
  },
  {
    "text": "from Services SL API just from Services I went that just that top",
    "start": "2780240",
    "end": "2785480"
  },
  {
    "text": "level and I use usually for asp.net core projects anyway I keep my uncompiled",
    "start": "2785480",
    "end": "2792119"
  },
  {
    "text": "sources completely separate from the compiled sources I in asp.net core I treat the www root folder as like the",
    "start": "2792119",
    "end": "2798720"
  },
  {
    "text": "bin directory so the only thing you'll find in there are the process JavaScript files that have gone through the",
    "start": "2798720",
    "end": "2804359"
  },
  {
    "text": "transpilation they've gone through a webpack how many people use um the types",
    "start": "2804359",
    "end": "2811280"
  },
  {
    "text": "repository now with types script so this is this is also the best thing ever so",
    "start": "2811280",
    "end": "2817440"
  },
  {
    "text": "originally with typescript we needed declaration files for things like jQuery and all these other libraries that",
    "start": "2817440",
    "end": "2823119"
  },
  {
    "text": "weren't authored in typescript so they created the definitely definitely typed repository which gave you a place to go",
    "start": "2823119",
    "end": "2828800"
  },
  {
    "text": "out and download declaration files for things like jQuery and then eventually there came the tool the TSD TSD tool",
    "start": "2828800",
    "end": "2836760"
  },
  {
    "text": "typescript definition tool where you could say TSD install jQuery and it would go out and fetch the thing from",
    "start": "2836760",
    "end": "2842480"
  },
  {
    "text": "the repository and then came the typings tool and the typings doj",
    "start": "2842480",
    "end": "2847559"
  },
  {
    "text": "file where you could say typings install jQuery and it would remember that and put it in your uh the typing. Json file",
    "start": "2847559",
    "end": "2855160"
  },
  {
    "text": "all of that is gone just get rid of it get rid of all those tools and the extra configuration files because",
    "start": "2855160",
    "end": "2860720"
  },
  {
    "text": "now all the all of the type declaration files for libraries and Frameworks that",
    "start": "2860720",
    "end": "2866319"
  },
  {
    "text": "do not provide them natively like angular 2 would live in the",
    "start": "2866319",
    "end": "2872160"
  },
  {
    "text": "npm package at types this meta package they would call it and now now if I want",
    "start": "2872160",
    "end": "2877599"
  },
  {
    "text": "to for example install declaration files for react and Jasmine unit test I don't",
    "start": "2877599",
    "end": "2883400"
  },
  {
    "text": "need to install any other tools I can just say npm install at types Jasmin and",
    "start": "2883400",
    "end": "2889440"
  },
  {
    "text": "poof all of a sudden I have intellisense for Jasmine when I'm authoring typescript files no additional",
    "start": "2889440",
    "end": "2895119"
  },
  {
    "text": "configuration no additional tools needed and it's part of my npm package.json so",
    "start": "2895119",
    "end": "2900359"
  },
  {
    "text": "when I do an npm install I not only get the libraries that I need I also get all the type declarations that I need so",
    "start": "2900359",
    "end": "2906319"
  },
  {
    "text": "it's quite nice um the one thing that does concern me about typescript still a little bit they",
    "start": "2906319",
    "end": "2912680"
  },
  {
    "text": "they have to be very careful about how aggressive they are implementing new features I ran into this thing when I",
    "start": "2912680",
    "end": "2918559"
  },
  {
    "text": "was programming with react where I wanted to write a function that would destructure incoming parameters for the",
    "start": "2918559",
    "end": "2923640"
  },
  {
    "text": "the props of a react component and it turns out that that parameter",
    "start": "2923640",
    "end": "2928720"
  },
  {
    "text": "destructuring of course conflicts with um typescript which sees it as something",
    "start": "2928720",
    "end": "2935799"
  },
  {
    "text": "different trying to provide type annotations and there is a way to do it it's just a little bit cumbersome that's",
    "start": "2935799",
    "end": "2942000"
  },
  {
    "text": "unfortunate and it when people you know try to propose syntax to work around this um you know the types typescript",
    "start": "2942000",
    "end": "2949839"
  },
  {
    "text": "team says look we have to be careful there might be conflict in es7 we we",
    "start": "2949839",
    "end": "2955960"
  },
  {
    "text": "kind of have to see how the specification committee works this out and sure there's people from Microsoft",
    "start": "2955960",
    "end": "2961280"
  },
  {
    "text": "that um can influence the specification committee but still want of my concerns",
    "start": "2961280",
    "end": "2967240"
  },
  {
    "text": "about typescript is just how quickly can it evolve and adapt if the E ecmascript",
    "start": "2967240",
    "end": "2972640"
  },
  {
    "text": "specification were for some reason to uh put in a feature that conflicted with an existing typescript",
    "start": "2972640",
    "end": "2979000"
  },
  {
    "text": "syntax right yes there was one more thing I wanted to",
    "start": "2979000",
    "end": "2985000"
  },
  {
    "text": "say about typescript but I don't uh I lost it out of my brain already the build so I'm a big believer my patterns",
    "start": "2985000",
    "end": "2993440"
  },
  {
    "text": "for builds are to have tools do the simplest possible thing that they can do so webpack is for bundling only karma is",
    "start": "2993440",
    "end": "3000960"
  },
  {
    "text": "for running tests I don't try to transpile things when Karma runs I still use gulp because you can do 99 different",
    "start": "3000960",
    "end": "3008760"
  },
  {
    "text": "things with web packs with web pack there's plugins to copy CSS files around on the hard drive and all that stuff but",
    "start": "3008760",
    "end": "3015960"
  },
  {
    "text": "I would still prefer webpack to just do my bundling take these files and spit out an output somewhere and I'll still",
    "start": "3015960",
    "end": "3022440"
  },
  {
    "text": "use gulp to do everything else and then even when it comes to gulp I'm a bit of a minimalist",
    "start": "3022440",
    "end": "3028480"
  },
  {
    "text": "so there's a plugin gulp D webpack that allows you to use webpack inside of gal",
    "start": "3028480",
    "end": "3035559"
  },
  {
    "text": "but the truth is webpack is just an executable so why not just require exact",
    "start": "3035559",
    "end": "3040720"
  },
  {
    "text": "and just execute that command you know by shelling out so I want to execute webpack when someone wants to run the",
    "start": "3040720",
    "end": "3047520"
  },
  {
    "text": "gulp task js- app so trying to keep things simple um not rely on additional",
    "start": "3047520",
    "end": "3053839"
  },
  {
    "text": "plugins just to make things maybe with a different syntax or a little more convenient I'm just a minimalist about",
    "start": "3053839",
    "end": "3059480"
  },
  {
    "text": "it and speaking of which no more Global tools there's a few tools that you have",
    "start": "3059480",
    "end": "3064599"
  },
  {
    "text": "to install with npm there's there's only a few tools that you truly have to npm",
    "start": "3064599",
    "end": "3069720"
  },
  {
    "text": "install globally with a-g switch an example of such a tool would be yman",
    "start": "3069720",
    "end": "3075480"
  },
  {
    "text": "yman is used to scaffold out a new project since no project currently exists I can't have y in a project so",
    "start": "3075480",
    "end": "3082040"
  },
  {
    "text": "therefore I install it globally but then when you look at a lot of the samples that are out there for we pack for",
    "start": "3082040",
    "end": "3087160"
  },
  {
    "text": "example a lot of people will say okay to get started with webpack the first thing you do is npm install webpack DG install",
    "start": "3087160",
    "end": "3093440"
  },
  {
    "text": "it globally and I love when they throw the pseudo in there because you have to be an admin to install webpack which",
    "start": "3093440",
    "end": "3099200"
  },
  {
    "text": "isn't true but I digress uh I will only install those tools locally so npm",
    "start": "3099200",
    "end": "3105520"
  },
  {
    "text": "install webpack npm install typescript and then if I need to invoke those tools if I want to make it easy and not have",
    "start": "3105520",
    "end": "3112359"
  },
  {
    "text": "to drill into node module. bin to get to that tool because that's where they will",
    "start": "3112359",
    "end": "3118880"
  },
  {
    "text": "live well if you Define scripts in your npm package.json",
    "start": "3118880",
    "end": "3125599"
  },
  {
    "text": "file when it executes the command associated with a script it will include",
    "start": "3125599",
    "end": "3130799"
  },
  {
    "text": "the node modules bin path when it's trying to find whatever you're trying to execute so if I just have shortcuts to",
    "start": "3130799",
    "end": "3137640"
  },
  {
    "text": "run webpack and a shortcut to run Cara I don't have to worry about a global",
    "start": "3137640",
    "end": "3143240"
  },
  {
    "text": "installation of webpack it's local so the the trade off tradeoff there of course if you have a th projects on your",
    "start": "3143240",
    "end": "3150480"
  },
  {
    "text": "file system you'll have a th000 copies of webpack which isn't that nice but I can tell you what in about two weeks",
    "start": "3150480",
    "end": "3157000"
  },
  {
    "text": "there's going to be a whole lot of people that probably don't want a global webpack install because now when you",
    "start": "3157000",
    "end": "3163000"
  },
  {
    "text": "start um mpm installing webpack from scratch you're going to get version",
    "start": "3163000",
    "end": "3168480"
  },
  {
    "text": "two which has some configuration changes and breaking changes from version one which everyone's been using up to this",
    "start": "3168480",
    "end": "3174960"
  },
  {
    "text": "point so no more globals keep them local this is my typical Karma",
    "start": "3174960",
    "end": "3181480"
  },
  {
    "text": "configuration file I just want to set the base path the Frameworks the files the reporters",
    "start": "3181480",
    "end": "3187160"
  },
  {
    "text": "the browsers I don't want to load any plugins to do crazy things like transpilation all that's taken care of",
    "start": "3187160",
    "end": "3193040"
  },
  {
    "text": "by the other tools this is just my test Runner it's all I wanted to do so load up my vendor file load up all my specs",
    "start": "3193040",
    "end": "3199440"
  },
  {
    "text": "and my spec files when webpack processed them they bundled in my application code because of course my unit test were they",
    "start": "3199440",
    "end": "3206000"
  },
  {
    "text": "were reping things for my application and I like to keep keep my",
    "start": "3206000",
    "end": "3211079"
  },
  {
    "text": "spec files in the same folder as the component or the service or the object",
    "start": "3211079",
    "end": "3216559"
  },
  {
    "text": "that they're associated with so if I'm building something to wrap an API I'll have api. TS and api. spec. TS and specs",
    "start": "3216559",
    "end": "3224920"
  },
  {
    "text": "will allow me to identify that that is the unit test file to",
    "start": "3224920",
    "end": "3230880"
  },
  {
    "text": "execute and slightly controversial um you don't really pay attention to the code here I like using Jasmine and I",
    "start": "3230920",
    "end": "3238040"
  },
  {
    "text": "don't like mocking Frameworks at all I try to write actually more integration tests these",
    "start": "3238040",
    "end": "3243319"
  },
  {
    "text": "days I have found that they provide the best bang for the buck so for example if I have a component that uses a service",
    "start": "3243319",
    "end": "3250280"
  },
  {
    "text": "and that service calls into an HP service and that HTTP service calls in asual a logging service",
    "start": "3250280",
    "end": "3256440"
  },
  {
    "text": "whatever I actually want to write unit tests against that component that use that entire dependency chain right up",
    "start": "3256440",
    "end": "3264119"
  },
  {
    "text": "until an HTTP call is made I do want to fake out the HTTP call so I'll cut things off at like the data access layer",
    "start": "3264119",
    "end": "3270960"
  },
  {
    "text": "in my JavaScript but to me a lot of the components that we write they're they they are orchestrators their entire",
    "start": "3270960",
    "end": "3277559"
  },
  {
    "text": "purpose in life is to call the right service at the right time and pass the right parameters there's no real design",
    "start": "3277559",
    "end": "3282960"
  },
  {
    "text": "issues that I need to drive out with tdd um there's no real State inside of them",
    "start": "3282960",
    "end": "3288559"
  },
  {
    "text": "that I need to assert on because they're just they're not doing any calculations or algorithms not all of them are like",
    "start": "3288559",
    "end": "3294720"
  },
  {
    "text": "that but quite a few of them and something I discovered a couple years ago with angular is we were writing all these unit tests trying to isolate",
    "start": "3294720",
    "end": "3300760"
  },
  {
    "text": "things like a controller uh which means we had to fake out services that were used at that",
    "start": "3300760",
    "end": "3306040"
  },
  {
    "text": "level and it turns out then that those tests weren't very robust things would still break in production um the",
    "start": "3306040",
    "end": "3312559"
  },
  {
    "text": "underlying service implementations the real implementations could still change and people forget to update the unit",
    "start": "3312559",
    "end": "3318200"
  },
  {
    "text": "test and we switched things around and said you know what we're going to test the controller calling this service and",
    "start": "3318200",
    "end": "3323640"
  },
  {
    "text": "that service calling that service we don't care we'll just stub things out of the HTTP layer it was something like 70%",
    "start": "3323640",
    "end": "3329520"
  },
  {
    "text": "less code that way and we suddenly had a much higher success rate of catching problems before they went into",
    "start": "3329520",
    "end": "3335400"
  },
  {
    "text": "production because now when someone changed like the the API service that wraps HTTP the unit test would actually",
    "start": "3335400",
    "end": "3342880"
  },
  {
    "text": "fail because we weren't trying to fake out or mock anything at that point so slight rant there on tests and that's",
    "start": "3342880",
    "end": "3349319"
  },
  {
    "text": "pretty much all I have for you I hope you got something out of this presentation if you have any questions feel free to email me that's my email",
    "start": "3349319",
    "end": "3355640"
  },
  {
    "text": "address I always answer questions and have a good evening [Applause]",
    "start": "3355640",
    "end": "3364429"
  }
]