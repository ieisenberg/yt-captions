[
  {
    "start": "0",
    "end": "64000"
  },
  {
    "text": "so this is uh debugging and profiling net core apps on Linux uh very very",
    "start": "3840",
    "end": "9200"
  },
  {
    "text": "specific but then on the other hand not a lot of people are doing this yet and",
    "start": "9200",
    "end": "14240"
  },
  {
    "text": "uh not a lot of people know how to do this yet a lot of this is still changing and in flux and hopefully the tools you",
    "start": "14240",
    "end": "21560"
  },
  {
    "text": "learn about today will still work in uh 3 months when you actually have to do this uh in production but I have been",
    "start": "21560",
    "end": "28119"
  },
  {
    "text": "following this pretty closely and it looks like there's there is a story shaping up so hopefully you'll be able",
    "start": "28119",
    "end": "34000"
  },
  {
    "text": "to hear that story uh my name is Sasha I work for a training and consulting company called Cella and uh a lot of my",
    "start": "34000",
    "end": "41120"
  },
  {
    "text": "work is this just performance investigations uh Diagnostics debugging crashes core dumps uh on various systems",
    "start": "41120",
    "end": "48480"
  },
  {
    "text": "uh sometimes I do have to go back in time like last week uh I was debugging U cord crash dumps of a Visual Basic 6 uh",
    "start": "48480",
    "end": "55920"
  },
  {
    "text": "application which was not as fun and then uh the the week after that I could be debugging net core apps on Linux",
    "start": "55920",
    "end": "62160"
  },
  {
    "text": "which is a lot more fun uh in a way so it's really crazy that we actually got",
    "start": "62160",
    "end": "67479"
  },
  {
    "start": "64000",
    "end": "171000"
  },
  {
    "text": "got this far that we are sitting here and seriously talking about debugging and production and investigations of net",
    "start": "67479",
    "end": "74439"
  },
  {
    "text": "core on Linux uh it did uh take a while and it was quite a windy Journey but we",
    "start": "74439",
    "end": "79600"
  },
  {
    "text": "got there and so some of the things I want to show you today are how to profile uh your net core apps running on",
    "start": "79600",
    "end": "86520"
  },
  {
    "text": "Linux without needing a Windows machine in the background for this uh we'll talk about visualizing stack traces of CPU",
    "start": "86520",
    "end": "94200"
  },
  {
    "text": "samples and also of other things using flame graphs which are a pretty common tool on Linux and also getting some",
    "start": "94200",
    "end": "99720"
  },
  {
    "text": "traction on Windows as well uh we'll talk about some other Linux tracing tools like general purpose tracing tools",
    "start": "99720",
    "end": "106880"
  },
  {
    "text": "which happen to work with net processes and they are very important to learn about because that's the tools Linux",
    "start": "106880",
    "end": "112600"
  },
  {
    "text": "people just use we'll talk about runtime events that can be collected like exceptions uh garbage collections",
    "start": "112600",
    "end": "119960"
  },
  {
    "text": "assembly loads all different kinds of events emitted by the CLR we can collect",
    "start": "119960",
    "end": "125399"
  },
  {
    "text": "and then Aggregate and do some uh further analysis on and we will also talk about core dumps and getting core",
    "start": "125399",
    "end": "132000"
  },
  {
    "text": "dumps when our net application crashes and how to analyze those core dumps using the tools we have inbox on Linux",
    "start": "132000",
    "end": "139640"
  },
  {
    "text": "again like I've said this is changing pretty quickly uh sometimes monthly sometimes weekly um so again this sort",
    "start": "139640",
    "end": "147040"
  },
  {
    "text": "of works and has been tested with uhet core 1.1 and net core 2.0 preview and if",
    "start": "147040",
    "end": "153599"
  },
  {
    "text": "it doesn't work next week it's uh not my fault as much um and some of this is",
    "start": "153599",
    "end": "158760"
  },
  {
    "text": "actually built on top of tools uh and scripts that I had to hack together a little to get them to work but it's all",
    "start": "158760",
    "end": "166200"
  },
  {
    "text": "uh in the slides and hopefully you should be able to replicate these results if you actually need this in",
    "start": "166200",
    "end": "171319"
  },
  {
    "start": "171000",
    "end": "231000"
  },
  {
    "text": "production so just to give a general overview of the equivalence of some of the tools we'll see for Linux on other",
    "start": "171319",
    "end": "178920"
  },
  {
    "text": "platforms currently supported by net core so for CPU sampling for example for",
    "start": "178920",
    "end": "184080"
  },
  {
    "text": "measuring CPU usage on Linux we have perf that's what we're going to use mostly on Windows we have etw event",
    "start": "184080",
    "end": "191239"
  },
  {
    "text": "tracing for Windows and a bunch of tools on top of that and on Mac OS there are also equivalents which use the same uh",
    "start": "191239",
    "end": "197760"
  },
  {
    "text": "idea anyway if not the same infrastructure similarly uh tracing which is basically attaching Dynamic",
    "start": "197760",
    "end": "204560"
  },
  {
    "text": "logging to your system is something that can be done on uh other platforms as well uh dump generation and damp",
    "start": "204560",
    "end": "211599"
  },
  {
    "text": "analysis also has equivalent tools we are going to look only on the Linux side of things in this talk which let me uh",
    "start": "211599",
    "end": "218760"
  },
  {
    "text": "bring you more um demos and more examples but of course we could do the same talk on Windows and we could do the",
    "start": "218760",
    "end": "225200"
  },
  {
    "text": "same talk probably for Mac OS and show similar uh capabilities anyway if not",
    "start": "225200",
    "end": "230640"
  },
  {
    "text": "exactly the same tools now before we get started uh if you actually intend to use my advice in",
    "start": "230640",
    "end": "237400"
  },
  {
    "start": "231000",
    "end": "280000"
  },
  {
    "text": "production if you intend to use uh any of this in your own production system you have to mind the overhead you have",
    "start": "237400",
    "end": "244319"
  },
  {
    "text": "to know that production uh monitoring tools uh might occasionally have an overhead which makes them unacceptable",
    "start": "244319",
    "end": "250519"
  },
  {
    "text": "for your purposes so uh some people here might be okay if you have like a 5% uh",
    "start": "250519",
    "end": "256880"
  },
  {
    "text": "increase in processing time because you use a certain tool and other people would say no 5% is crazy what are you",
    "start": "256880",
    "end": "263440"
  },
  {
    "text": "talking about you're slowing my system down so you really have to know what the overhead is and the best way of knowing",
    "start": "263440",
    "end": "270160"
  },
  {
    "text": "is actually testing it in your own environment and seeing the effect we'll touch on the overhead here and there uh",
    "start": "270160",
    "end": "276800"
  },
  {
    "text": "but otherwise you you are you have been warned about the overhead and finally before we get",
    "start": "276800",
    "end": "282280"
  },
  {
    "start": "280000",
    "end": "358000"
  },
  {
    "text": "started with the actual scenarios just to give a bit of a terminology I'll be using sampling tools and tracing Tools",
    "start": "282280",
    "end": "289520"
  },
  {
    "text": "in this talk and uh I always prefix my talks with a general explanation because this is a little confusing so basically",
    "start": "289520",
    "end": "296440"
  },
  {
    "text": "sampling means that something is happening so frequently that you can't record every single",
    "start": "296440",
    "end": "302560"
  },
  {
    "text": "occurrence of that thing so for example if you wanted to trace a CPU execution",
    "start": "302560",
    "end": "308720"
  },
  {
    "text": "You couldn't possibly Trace every single instruction it would slow your system down not by 10% but probably by a factor",
    "start": "308720",
    "end": "316199"
  },
  {
    "text": "of 10,000 so the only thing you can do is sample look not at each individual",
    "start": "316199",
    "end": "321720"
  },
  {
    "text": "instruction but every millionth instruction for example and then aggregate those samples to form",
    "start": "321720",
    "end": "328360"
  },
  {
    "text": "something meaningful but some events are actually low frequency enough that you can record every single occurrence like",
    "start": "328360",
    "end": "335600"
  },
  {
    "text": "for example disk accesses or uh loading of DLS or Garbage collections these are",
    "start": "335600",
    "end": "342199"
  },
  {
    "text": "things happening infrequently enough that you can actually record every single one and then look at where they",
    "start": "342199",
    "end": "348039"
  },
  {
    "text": "are happening and do some kind of aggregation so we will use both sampling and tracing tools in the stock for",
    "start": "348039",
    "end": "354280"
  },
  {
    "text": "different kinds of events essentially for different kinds of things we want to trace so here are are some of those",
    "start": "354280",
    "end": "361160"
  },
  {
    "start": "358000",
    "end": "483000"
  },
  {
    "text": "things that we might be able to trace and look into um some of these are",
    "start": "361160",
    "end": "366199"
  },
  {
    "text": "coming from the actual net core and the CLR and The NET Framework and some of",
    "start": "366199",
    "end": "372280"
  },
  {
    "text": "these are coming from the underlying operating system because we are talking again about window about Linux um so",
    "start": "372280",
    "end": "378639"
  },
  {
    "text": "some specifics if you have a net core app your net core app could actually",
    "start": "378639",
    "end": "383960"
  },
  {
    "text": "your own code could actually be instrumented with some tracing with some performance and instrumentation there is",
    "start": "383960",
    "end": "390840"
  },
  {
    "text": "a class in the do and framework called Event Source which you can use on Windows to emit etw events and you can",
    "start": "390840",
    "end": "398080"
  },
  {
    "text": "use it on Linux to emit something similar runtime events which you could log and analyze later so this is one",
    "start": "398080",
    "end": "405160"
  },
  {
    "text": "source of information Event Source the CLR itself is instrumented with a bunch",
    "start": "405160",
    "end": "410919"
  },
  {
    "text": "of events both on Windows and Linux and that includes uh garbage collections exceptions assembly loading just in time",
    "start": "410919",
    "end": "418360"
  },
  {
    "text": "compilation there's uh several dozens of interesting events that we could trace on the operating system level between",
    "start": "418360",
    "end": "425520"
  },
  {
    "text": "the kernel and user space there's a lot of libraries loaded into each net application that we could also be",
    "start": "425520",
    "end": "431639"
  },
  {
    "text": "tracing using Linux specific tools not net specific tools anymore in the kernel",
    "start": "431639",
    "end": "437680"
  },
  {
    "text": "itself there's a bunch of instrumentation from the scheduler to the network layer to the disc layer a",
    "start": "437680",
    "end": "444319"
  },
  {
    "text": "bunch of things that we could be looking at again um uh OS specific there's also",
    "start": "444319",
    "end": "450160"
  },
  {
    "text": "events like page folds uh migrations between processors which are emitted by the kernel in a slightly different way",
    "start": "450160",
    "end": "456479"
  },
  {
    "text": "but it doesn't matter a lot for our discussion and finally there's Hardware events at the lowest level which are",
    "start": "456479",
    "end": "462440"
  },
  {
    "text": "actually coming from uh your processor management unit uh the Performance Management unit and that includes stuff",
    "start": "462440",
    "end": "468560"
  },
  {
    "text": "like cash misses and uh Branch Miss predictions interesting things that are",
    "start": "468560",
    "end": "473680"
  },
  {
    "text": "not actually OS specific but you do have to use an OS specific tool to capture",
    "start": "473680",
    "end": "479680"
  },
  {
    "text": "them and Trace them in the context of your uh net application so let's start with the",
    "start": "479680",
    "end": "485120"
  },
  {
    "text": "official story like how are you supposed to do this sort of uh performance investigation if you look at the",
    "start": "485120",
    "end": "490199"
  },
  {
    "text": "official uh documentation I'm smiling because it's funny so um the official",
    "start": "490199",
    "end": "495599"
  },
  {
    "text": "story is that you go to a website and you download a script called perf collect and uh it's a pretty long bash",
    "start": "495599",
    "end": "502680"
  },
  {
    "text": "script uh which was written by a performance engineer on the CLR team and",
    "start": "502680",
    "end": "507840"
  },
  {
    "text": "it's uh it's fairly isolated and stand alone it's a single bash script which",
    "start": "507840",
    "end": "513039"
  },
  {
    "text": "you can use to install all the dependencies you'd need for actually doing uh performance work on Linux and",
    "start": "513039",
    "end": "520800"
  },
  {
    "text": "perf collect is easy it's pretty easy to install all the prerequisites and then you can collect performance information",
    "start": "520800",
    "end": "527720"
  },
  {
    "text": "on a running system now the bash script has some uh command line options but I'm",
    "start": "527720",
    "end": "532760"
  },
  {
    "text": "not covering any of those and you'll soon understand why so after you're done with the collection you have a zip file",
    "start": "532760",
    "end": "540040"
  },
  {
    "text": "and then the story is getting a little murkier you're supposed to take that zip file and you can do some analysis",
    "start": "540040",
    "end": "546839"
  },
  {
    "text": "locally on Linux but most of the things you'd want to do require a Windows box",
    "start": "546839",
    "end": "552480"
  },
  {
    "text": "so you need to copy the zip file over to a Windows machine which is sort of surprising I suppose and then you",
    "start": "552480",
    "end": "559079"
  },
  {
    "text": "download perf viw which is an awesome free tool by Microsoft but it only works on Windows and then you use perfu to",
    "start": "559079",
    "end": "566320"
  },
  {
    "text": "open that trace. zip file that you recorded and you can do all your performance analysis there now this is",
    "start": "566320",
    "end": "572519"
  },
  {
    "text": "lovely and uh it kind of works uh in in most uh scenarios even I'd say it works",
    "start": "572519",
    "end": "578240"
  },
  {
    "text": "but it's not something I could live with for my own production environments uh first there's the turnaround time you",
    "start": "578240",
    "end": "584399"
  },
  {
    "text": "have to create the zip file copy it over open it on another machine and second I",
    "start": "584399",
    "end": "589880"
  },
  {
    "text": "actually like to do my performance work uh where where the data is where the the system is and um just the amount of time",
    "start": "589880",
    "end": "598279"
  },
  {
    "text": "I would have to spend to set up this sort of environment with a Windows machine running perfu uh for me makes",
    "start": "598279",
    "end": "604760"
  },
  {
    "text": "the whole thing pointless so this is again the official story and it relies on the same things I am going to be",
    "start": "604760",
    "end": "610760"
  },
  {
    "text": "doing manually but we will actually be doing the investigation on the same Linux system without using uh Windows",
    "start": "610760",
    "end": "618440"
  },
  {
    "text": "specific tools again it's going to be the same data sources but in a in a workflow that hopefully will be a little",
    "start": "618440",
    "end": "624720"
  },
  {
    "text": "more reasonable uh for actual production environments so the first thing we will",
    "start": "624720",
    "end": "629959"
  },
  {
    "start": "627000",
    "end": "664000"
  },
  {
    "text": "use for this is a cool to uh is a cool tool called perf uh this is actually built as part of the Linux kernel so",
    "start": "629959",
    "end": "637519"
  },
  {
    "text": "it's available for all Linux distributions it's not always installed out of the box but it is part of the",
    "start": "637519",
    "end": "643639"
  },
  {
    "text": "kernel tree so worst case you can build it from Source or typically you can install it from your uh distributions",
    "start": "643639",
    "end": "649880"
  },
  {
    "text": "package manager so once you have perf installed it can do both sampling and",
    "start": "649880",
    "end": "655040"
  },
  {
    "text": "tracing of various kinds of events including highlevel ones as well as kernel and Hardware events which are uh",
    "start": "655040",
    "end": "662839"
  },
  {
    "text": "something we'll see a little later the general architecture of uh",
    "start": "662839",
    "end": "668120"
  },
  {
    "start": "664000",
    "end": "781000"
  },
  {
    "text": "perf events of perf is something like this so on the left on the Kernel side",
    "start": "668120",
    "end": "674160"
  },
  {
    "text": "there's the actual perf events uh component which is a kernel mechanism that you can attach to multiple",
    "start": "674160",
    "end": "681079"
  },
  {
    "text": "different things happening on your system to multiple event sources most of these event sources are in the kernel as",
    "start": "681079",
    "end": "687959"
  },
  {
    "text": "well for example you can attach it to functions in the kernel you can attach it to uh higher level events like page",
    "start": "687959",
    "end": "695200"
  },
  {
    "text": "fults you can attach it to lowlevel Hardware events like cach misses there's a variety of different sources that you",
    "start": "695200",
    "end": "702000"
  },
  {
    "text": "can attach that perf events uh runtime to but you could also attach to user",
    "start": "702000",
    "end": "707360"
  },
  {
    "text": "space uh things for example functions in user space libraries so basically an",
    "start": "707360",
    "end": "712920"
  },
  {
    "text": "arbitary function in user space can be traced using perf and that includes net",
    "start": "712920",
    "end": "718279"
  },
  {
    "text": "as well to some extent now what perf can do with those uh events it it Aggregates is either write",
    "start": "718279",
    "end": "726000"
  },
  {
    "text": "them out to a file just a big file on disk which you can analyze offline you",
    "start": "726000",
    "end": "731639"
  },
  {
    "text": "can analyze it later or perf can write the data into a memory mapped buffer and",
    "start": "731639",
    "end": "737560"
  },
  {
    "text": "then you can have some realtime components some realtime process looking at the events in that buffer and just",
    "start": "737560",
    "end": "743800"
  },
  {
    "text": "processing them in real time so if you have very high frequency events you probably don't want to dump them out to",
    "start": "743800",
    "end": "750480"
  },
  {
    "text": "a file for later analysis because you'll have huge huge files so you can instead use the memory mapped buffer approach",
    "start": "750480",
    "end": "757720"
  },
  {
    "text": "you would still have lots of events to process it could still probably be uh quite a high overhead but at least",
    "start": "757720",
    "end": "763720"
  },
  {
    "text": "you're not going to be writing every single thing to disk all the time we will also see a little later some other",
    "start": "763720",
    "end": "769920"
  },
  {
    "text": "Alternatives available in modern Linux which make this even more efficient but this is the general perf story and this",
    "start": "769920",
    "end": "776399"
  },
  {
    "text": "is also what the perf collect script Is Us using uh under the covers so if you don't uh think about",
    "start": "776399",
    "end": "784160"
  },
  {
    "text": "symbols in advance and this is the first thing we will have to touch upon then whenever you use perf and any Associated",
    "start": "784160",
    "end": "791160"
  },
  {
    "text": "tools you will get some pretty useless uh reports like for example this report",
    "start": "791160",
    "end": "796279"
  },
  {
    "text": "over here is supposed to tell you which functions in your application are spending lots of CPU time and we will do",
    "start": "796279",
    "end": "803079"
  },
  {
    "text": "a demo of this shortly but uh the report kind of shows you numbers uh addresses",
    "start": "803079",
    "end": "808560"
  },
  {
    "text": "right hex numbers and uh and percentages and these are the actual functions we",
    "start": "808560",
    "end": "813880"
  },
  {
    "text": "care about these are the functions in our own process that should have names that should have symbolic names if",
    "start": "813880",
    "end": "819519"
  },
  {
    "text": "you're doing this on Windows a lot of times uh the tools are taking care of this for you uh but in Linux the whole",
    "start": "819519",
    "end": "825959"
  },
  {
    "text": "story is such that you actually have to think about this uh yourself so for different kinds of code",
    "start": "825959",
    "end": "833519"
  },
  {
    "start": "830000",
    "end": "1043000"
  },
  {
    "text": "there are different sources of symbolic information which translates numbers",
    "start": "833519",
    "end": "839120"
  },
  {
    "text": "these hex addresses to function names that you can actually read and uh use U",
    "start": "839120",
    "end": "844320"
  },
  {
    "text": "so there's different colors here for different kinds of code here the dark",
    "start": "844320",
    "end": "849560"
  },
  {
    "text": "green is pure managed code which is just in time compiled so this is a plain C",
    "start": "849560",
    "end": "857759"
  },
  {
    "text": "for example that you didn't do anything special to it will be compiled at runtime and for this kind of code the",
    "start": "857759",
    "end": "864920"
  },
  {
    "text": "symbolic information can be emitted by the CLR into a file at runtime so you",
    "start": "864920",
    "end": "871759"
  },
  {
    "text": "run the application and the CLR prints out into a separate text file",
    "start": "871759",
    "end": "877199"
  },
  {
    "text": "information about code addresses and code function names I'll show you what",
    "start": "877199",
    "end": "882240"
  },
  {
    "text": "that file looks like it's a very very simple format this is by the way something you have to do on Windows as",
    "start": "882240",
    "end": "887680"
  },
  {
    "text": "well and it uses etw to emit this information but it's it's pretty much the same story if you have dynamically",
    "start": "887680",
    "end": "894519"
  },
  {
    "text": "generated code you need at runtime to emit information about code addresses and code function names then you have",
    "start": "894519",
    "end": "902160"
  },
  {
    "text": "the light green over here this is still managed code but it has been compiled",
    "start": "902160",
    "end": "908079"
  },
  {
    "text": "ahead of time aot compiled on Windows uh Engen is the tool you use for ahead of",
    "start": "908079",
    "end": "914480"
  },
  {
    "text": "time compilation on Linux it's cross gen and this is a tool that's actually part",
    "start": "914480",
    "end": "919560"
  },
  {
    "text": "of U theet core uh distribution and you have to run cross gen on your target",
    "start": "919560",
    "end": "925680"
  },
  {
    "text": "machine to get symbolic information for those parts of your application so for",
    "start": "925680",
    "end": "932240"
  },
  {
    "text": "code that's compiled at runtime you can actually get the runtime to emit the symbolic information but for code that",
    "start": "932240",
    "end": "939160"
  },
  {
    "text": "was compiled ahead of time you have to do a separate step in order to get debugging information and it doesn't",
    "start": "939160",
    "end": "945279"
  },
  {
    "text": "help that the debugging information crossgen emits is in a format that no other tool can understand and you need",
    "start": "945279",
    "end": "952000"
  },
  {
    "text": "to write a script to convert it to the right format but that's let's leave this behind us so suppose you have symbolic",
    "start": "952000",
    "end": "958040"
  },
  {
    "text": "information for all the managed part of your application there's still unmanaged",
    "start": "958040",
    "end": "963880"
  },
  {
    "text": "code there's unmanaged code in the CLR itself which you would need symbols for",
    "start": "963880",
    "end": "970680"
  },
  {
    "text": "and that's something you can typically get by either building from Source or by downloading a debug information package",
    "start": "970680",
    "end": "978160"
  },
  {
    "text": "for the CLR and these are available but not for all distributions so sometimes you would build from Source because",
    "start": "978160",
    "end": "984480"
  },
  {
    "text": "that's just the easiest thing and finally there's actual operating system system binaries for which you also want",
    "start": "984480",
    "end": "991440"
  },
  {
    "text": "symbolic information and that is usually easier to get so for the kernel it's typically available online uh like part",
    "start": "991440",
    "end": "998680"
  },
  {
    "text": "of the running system is symbolic information for the kernel and for OS libraries like the C runtime for example",
    "start": "998680",
    "end": "1005680"
  },
  {
    "text": "or the P threads Library this is something you can get as a package with your distribution and it's so boring but",
    "start": "1005680",
    "end": "1013399"
  },
  {
    "text": "unfortunately you have to get this right because if your call Stacks if your call Stacks from your managed applications uh",
    "start": "1013399",
    "end": "1020600"
  },
  {
    "text": "are broken at any of these layers um you can't do performance profiling you can't",
    "start": "1020600",
    "end": "1025880"
  },
  {
    "text": "do tracing you can't do any meaningful work without function names of your code",
    "start": "1025880",
    "end": "1031640"
  },
  {
    "text": "so this is something you have to actually get out of the way and uh perf collect sort of does this for you but",
    "start": "1031640",
    "end": "1039038"
  },
  {
    "text": "again the result can only be analyzed on Windows which is pretty useless again for",
    "start": "1039039",
    "end": "1044280"
  },
  {
    "start": "1043000",
    "end": "1084000"
  },
  {
    "text": "me what we are going to do with these uh stock traces and this is the last intro",
    "start": "1044280",
    "end": "1050240"
  },
  {
    "text": "part before we actually dive into the demos uh what we are going to do with these stack traces of our application",
    "start": "1050240",
    "end": "1056679"
  },
  {
    "text": "that we collect is visualize them using flame graphs and Flame graphs are very useful for displaying a large number of",
    "start": "1056679",
    "end": "1063960"
  },
  {
    "text": "coal Stacks so think about call Stacks when gc's occur or call Stacks where you",
    "start": "1063960",
    "end": "1069919"
  },
  {
    "text": "access files or call Stacks when you use lots of CPU you have millions",
    "start": "1069919",
    "end": "1075080"
  },
  {
    "text": "potentially of different call Stacks that you want to visualize and display play to the user at the same time this",
    "start": "1075080",
    "end": "1080960"
  },
  {
    "text": "is where uh flame graphs can help it is basically a very simple visualization",
    "start": "1080960",
    "end": "1086240"
  },
  {
    "text": "approach where each rectangle you see on the diagram is a function the vertical",
    "start": "1086240",
    "end": "1093400"
  },
  {
    "text": "axis the y- axis is just uh the stack Trace so if a function is on top of",
    "start": "1093400",
    "end": "1098640"
  },
  {
    "text": "something it was called by that other function and finally the horizontal axis is not a timeline it's just uh sorted",
    "start": "1098640",
    "end": "1106559"
  },
  {
    "text": "alphabetically it's pretty simple and I'll show you a live example of a flame graph uh coming",
    "start": "1106559",
    "end": "1112360"
  },
  {
    "text": "up so with all the setup and the introd in the introductions out of the way we",
    "start": "1112360",
    "end": "1117720"
  },
  {
    "text": "can do uh some CPU profiling some of the things I'm going to show you are going to be live demos and some are going to",
    "start": "1117720",
    "end": "1123480"
  },
  {
    "text": "be uh pre-cooked screenshots but let's see just how much time we have exactly",
    "start": "1123480",
    "end": "1128600"
  },
  {
    "text": "so here um I have an obuntu box uh pretty standard configuration I did not",
    "start": "1128600",
    "end": "1133919"
  },
  {
    "text": "build my own net core here I used the standard package of net core 2.0",
    "start": "1133919",
    "end": "1139480"
  },
  {
    "text": "and um I have this buggy application which has a bunch of different issues um",
    "start": "1139480",
    "end": "1145000"
  },
  {
    "text": "and now I think my SSH connection is kind of dropping oh no it's there so I'm going to um run this thing in uh fetch",
    "start": "1145000",
    "end": "1153919"
  },
  {
    "text": "mode this is just one of the things this application can do uh it basically is supposed anyway to fetch apple.com uh",
    "start": "1153919",
    "end": "1162200"
  },
  {
    "text": "every once in a while and uh do something with it right the code doesn't really matter but looking at uh uh top",
    "start": "1162200",
    "end": "1169640"
  },
  {
    "text": "for example you can see that this buggy process is actually taking uh like a",
    "start": "1169640",
    "end": "1175480"
  },
  {
    "text": "full CPU core and then some so it's uh it's pretty busy on the CPU even though",
    "start": "1175480",
    "end": "1181000"
  },
  {
    "text": "it's just supposed to be fetching apple.com um of the internet so something's interesting happening we're",
    "start": "1181000",
    "end": "1187480"
  },
  {
    "text": "going to use uh perf to record the behavior of this application and then to",
    "start": "1187480",
    "end": "1192799"
  },
  {
    "text": "analyze it before we do that I want to show you the symbolic information file which was already emitted when I ran",
    "start": "1192799",
    "end": "1199559"
  },
  {
    "text": "this command so it's just part of the execution of the CLR if we look in the",
    "start": "1199559",
    "end": "1204799"
  },
  {
    "text": "um temp folder I have a bunch of those perf info map files and a bunch of perf map files",
    "start": "1204799",
    "end": "1215120"
  },
  {
    "text": "these perf map files are generated by the CLR and contain symbolic information",
    "start": "1215120",
    "end": "1220320"
  },
  {
    "text": "for that specific process ID so uh if we just look at perf pit of buggy",
    "start": "1220320",
    "end": "1229200"
  },
  {
    "text": "map this is the map file for my process here's what it contains it's a super",
    "start": "1229200",
    "end": "1234679"
  },
  {
    "text": "simple stupid format uh code address code size function name code address",
    "start": "1234679",
    "end": "1241960"
  },
  {
    "text": "code size function name in text format plain and simple now this is generated",
    "start": "1241960",
    "end": "1248039"
  },
  {
    "text": "in order for us to be able to actually give you function names in profiling reports this is the only reason this",
    "start": "1248039",
    "end": "1253840"
  },
  {
    "text": "file is needed so let's go ahead and record the CPU Behavior here of this",
    "start": "1253840",
    "end": "1259440"
  },
  {
    "text": "process I'm going to do a perf record I will ask for stock traces I",
    "start": "1259440",
    "end": "1265720"
  },
  {
    "text": "will record 997 samples per second because that's what I like you can configure the number of samples as as as",
    "start": "1265720",
    "end": "1272720"
  },
  {
    "text": "you like uh to control overhead essentially and I will attach to the",
    "start": "1272720",
    "end": "1278080"
  },
  {
    "text": "specific process because I'm not interested in systemwide uh CPU information just that specific",
    "start": "1278080",
    "end": "1284080"
  },
  {
    "text": "application so this is running now and uh collecting essentially until I hit",
    "start": "1284080",
    "end": "1289760"
  },
  {
    "text": "contrl C or until the process terminates you'll notice the process",
    "start": "1289760",
    "end": "1294840"
  },
  {
    "text": "keeps running it's not affected it's not like you had to restart it to profile this is perfectly suitable for",
    "start": "1294840",
    "end": "1300600"
  },
  {
    "text": "production use and perf tells me that 9,847 samples were generated so perf",
    "start": "1300600",
    "end": "1308640"
  },
  {
    "text": "actually sampled the CPU almost 10,000 times and wrote down every single uh",
    "start": "1308640",
    "end": "1315840"
  },
  {
    "text": "every single sample with a stack Trace now there's multiple ways we could",
    "start": "1315840",
    "end": "1322000"
  },
  {
    "text": "visualize this information but the flame graph is easiest so I'm going to skip a little head and a couple of demo steps",
    "start": "1322000",
    "end": "1329120"
  },
  {
    "start": "1329000",
    "end": "1523000"
  },
  {
    "text": "and just show you a readymade flame graph of the same application that I generated uh in advance uh there's",
    "start": "1329120",
    "end": "1335840"
  },
  {
    "text": "multiple ways to generate flame graphs uh the easiest One is using a pearl script which takes in the perf file and",
    "start": "1335840",
    "end": "1344360"
  },
  {
    "text": "just spits out this beautiful uh well relatively beautiful diagram so recall that the wider something is",
    "start": "1344360",
    "end": "1352679"
  },
  {
    "text": "the more prominent it is this is how you read this thing you look at the widest things so looking at the right first",
    "start": "1352679",
    "end": "1359840"
  },
  {
    "text": "because that's not the widest thing but it's interesting you can see some GC code over here so um gc1 for example is",
    "start": "1359840",
    "end": "1368960"
  },
  {
    "text": "a function in the garbage collector in the CLR garbage collector and you can see from the tool tip it was responsible",
    "start": "1368960",
    "end": "1376320"
  },
  {
    "text": "in this particular profile it was responsible for 20% of the CPU samples",
    "start": "1376320",
    "end": "1381640"
  },
  {
    "text": "So 20% of the time I was actually doing GC looking at the main part of the flame",
    "start": "1381640",
    "end": "1387960"
  },
  {
    "text": "graph the widest part there's functions here like Main and fetch and then",
    "start": "1387960",
    "end": "1394039"
  },
  {
    "text": "process result so maybe it's not the HTTP requests taking lots of CPU time",
    "start": "1394039",
    "end": "1399840"
  },
  {
    "text": "but it looks like I have a function called process result which is taking uh 60% of my CPU time and what is it doing",
    "start": "1399840",
    "end": "1407120"
  },
  {
    "text": "I can zoom in only on that particular function and its descendants and then you can see on the",
    "start": "1407120",
    "end": "1413480"
  },
  {
    "text": "left I have a lot of string allocations so I'm allocating lots of large strings",
    "start": "1413480",
    "end": "1419000"
  },
  {
    "text": "and these are Stacks inside the garbage collector I also have this taking a a",
    "start": "1419000",
    "end": "1424640"
  },
  {
    "text": "lot of time like 40% of my time is me move AVX unaligned",
    "start": "1424640",
    "end": "1430559"
  },
  {
    "text": "erms this is actually a function that's clearing out memory that's what it's doing it's placing zeros in memory so",
    "start": "1430559",
    "end": "1437600"
  },
  {
    "text": "that was also called a lot because I'm doing lots of allocations and finally there's also a",
    "start": "1437600",
    "end": "1442799"
  },
  {
    "text": "little flame over here which I don't know if it's significant but but I could uh touch it and then see exactly what's",
    "start": "1442799",
    "end": "1448880"
  },
  {
    "text": "happening here you'll notice this the stacks go all the way into the kernel",
    "start": "1448880",
    "end": "1454080"
  },
  {
    "text": "not just managed code not just CLR code but all the way into the Linux kernel",
    "start": "1454080",
    "end": "1459880"
  },
  {
    "text": "with functions like uh uh cism protect which is a Linux system call so we have",
    "start": "1459880",
    "end": "1466880"
  },
  {
    "text": "uh and let me just unzoom we have a visualization of the way this application is spending C CPU time and",
    "start": "1466880",
    "end": "1474840"
  },
  {
    "text": "the flame graph itself is platform independent of course you could generate a flame graph from Windows data from",
    "start": "1474840",
    "end": "1480840"
  },
  {
    "text": "Linux data from Mac OS data it's just a visualization method for seeing where my",
    "start": "1480840",
    "end": "1486159"
  },
  {
    "text": "application is hitting lots of Stack traces of a certain event in that case the event was CPU usage but you could",
    "start": "1486159",
    "end": "1492799"
  },
  {
    "text": "generate flame graphs of other kinds of events as well so we have determined",
    "start": "1492799",
    "end": "1498799"
  },
  {
    "text": "that this uh app is uh as part of processing results is allocating lots of",
    "start": "1498799",
    "end": "1505520"
  },
  {
    "text": "memory and there's also lots of garbage collection going on in the background so a little later we will come back to that",
    "start": "1505520",
    "end": "1511799"
  },
  {
    "text": "and try to understand where these garbage collections are coming from exactly which types are being allocated",
    "start": "1511799",
    "end": "1517960"
  },
  {
    "text": "so we'll come back to the memory aspect of this application so far we just looked at the uh CPU part so let's see",
    "start": "1517960",
    "end": "1525600"
  },
  {
    "start": "1523000",
    "end": "1534000"
  },
  {
    "text": "if I haven't missed anything perf perf record these are just screenshots of the demo I've just shown you and the flame",
    "start": "1525600",
    "end": "1532080"
  },
  {
    "text": "graph we just uh looked at so what we did so far was look at the",
    "start": "1532080",
    "end": "1538120"
  },
  {
    "text": "perf way of doing things and uh again just to remind you we ran perf and then",
    "start": "1538120",
    "end": "1545440"
  },
  {
    "text": "we got a file per. data which had almost 10,000 samples CPU samples inside now",
    "start": "1545440",
    "end": "1553399"
  },
  {
    "text": "that's actually not so bad it's 2 megabytes of data from I guess about 10 seconds of running time so I could",
    "start": "1553399",
    "end": "1560679"
  },
  {
    "text": "imagine leaving this on for like 10 minutes maybe half an hour getting a few gigabytes of data then analyzing them",
    "start": "1560679",
    "end": "1567399"
  },
  {
    "text": "it's actually still kind of sort of visible but for higher frequency events",
    "start": "1567399",
    "end": "1573039"
  },
  {
    "text": "like if I tried to collect using perf uh file accesses or network events and I",
    "start": "1573039",
    "end": "1578880"
  },
  {
    "text": "had like millions of events per second the file would be pretty big pretty",
    "start": "1578880",
    "end": "1584360"
  },
  {
    "text": "unmanageable I'd say unopenable by any standard tool so this is where uh an alternative Linux",
    "start": "1584360",
    "end": "1591279"
  },
  {
    "text": "kernel technology comes in for collecting performance information this is not covered by the official tools",
    "start": "1591279",
    "end": "1597679"
  },
  {
    "text": "like the perf collect tool I mentioned earlier it uses perf exclusively but",
    "start": "1597679",
    "end": "1603240"
  },
  {
    "text": "once you know what's happening under the covers you can obviously use other tools as well so we are going to use that new",
    "start": "1603240",
    "end": "1610880"
  },
  {
    "text": "underlying kernel technology called BPF and um I could spend like two hours",
    "start": "1610880",
    "end": "1616919"
  },
  {
    "text": "talking about BPF itself self and where it came from and what it can do for us but in the context of net performance",
    "start": "1616919",
    "end": "1623360"
  },
  {
    "text": "investigations on Linux you should know that BPF is often an alternative for getting lower overhead um data for",
    "start": "1623360",
    "end": "1632039"
  },
  {
    "text": "getting lower overhead performance investigations when the rate of events is high so if you're tracing a system",
    "start": "1632039",
    "end": "1639360"
  },
  {
    "text": "with lots of networking and you're interested in networking events perf might generate lots and lots of data and",
    "start": "1639360",
    "end": "1645799"
  },
  {
    "text": "BPF might be uh a lower overhead or if you are sampling um CPU usage and you",
    "start": "1645799",
    "end": "1652000"
  },
  {
    "text": "have a large number of cores and you're doing high frequency sampling you will get get you will again get huge files",
    "start": "1652000",
    "end": "1659120"
  },
  {
    "text": "and BPF can be an alternative that generates Lots uh lot smaller uh results",
    "start": "1659120",
    "end": "1664960"
  },
  {
    "text": "so the way BPF basically works for us as opposed to perf is that it does the",
    "start": "1664960",
    "end": "1670880"
  },
  {
    "text": "aggregation in the kernel instead of generating a per. DAT file which we have",
    "start": "1670880",
    "end": "1677159"
  },
  {
    "text": "to then aggregate in user Space by running some sort of script what happens with BPF is that the aggregation is",
    "start": "1677159",
    "end": "1684799"
  },
  {
    "text": "happening in the kernel so just to explain what I mean by aggregation very briefly if you have a million Stacks",
    "start": "1684799",
    "end": "1692399"
  },
  {
    "text": "which are all the same I have a million Stacks in the exact same function spending CPU then if you use the perf",
    "start": "1692399",
    "end": "1700480"
  },
  {
    "text": "approach you have to record every single call stack to the file so you have a",
    "start": "1700480",
    "end": "1705799"
  },
  {
    "text": "million records with exactly the same call stack in your file and then you can",
    "start": "1705799",
    "end": "1710840"
  },
  {
    "text": "do an aggregation in user space this is also how etw on Windows works this is",
    "start": "1710840",
    "end": "1716240"
  },
  {
    "text": "how most profilers actually work they record every single call stack and they do the agregation offline with BPF you",
    "start": "1716240",
    "end": "1724960"
  },
  {
    "text": "do the aggregation online you do not record every single call stack you just",
    "start": "1724960",
    "end": "1730080"
  },
  {
    "text": "know it's the same call stack you've already seen and you increment the counter oh okay so I've seen this call",
    "start": "1730080",
    "end": "1736080"
  },
  {
    "text": "stack a million times now I've seen this call stack a million times plus one that's sort of what you do in terms of",
    "start": "1736080",
    "end": "1742799"
  },
  {
    "text": "aggregation so BPF based tools are by default more efficient the question is",
    "start": "1742799",
    "end": "1749279"
  },
  {
    "text": "if that's if this efficiency is actually uh important for you like what the overhead is in the first place so you",
    "start": "1749279",
    "end": "1755840"
  },
  {
    "text": "can improve it um we're not going to be using BPF directly anyway we will be",
    "start": "1755840",
    "end": "1761799"
  },
  {
    "start": "1756000",
    "end": "1824000"
  },
  {
    "text": "using a front end a bunch of Python scripts on top of BPF which is called BCC this is an open- source project with",
    "start": "1761799",
    "end": "1769760"
  },
  {
    "text": "a lot of contributors from different places including Facebook and Netflix and I've written a couple of these tools",
    "start": "1769760",
    "end": "1775760"
  },
  {
    "text": "also um and they are basically wrappers on top of the underlying kernel features",
    "start": "1775760",
    "end": "1781000"
  },
  {
    "text": "which are easier to use because it's just Python scripts that you have to run with uh certain parameters and this can",
    "start": "1781000",
    "end": "1787200"
  },
  {
    "text": "be used for net investigations absolutely and I'll show you a couple of examples the only reason why you",
    "start": "1787200",
    "end": "1793600"
  },
  {
    "text": "wouldn't be using BPF always just by default is that it requires a fairly",
    "start": "1793600",
    "end": "1799000"
  },
  {
    "text": "recent kernel it's only supported the things we'll be doing are only supported in kernel",
    "start": "1799000",
    "end": "1805159"
  },
  {
    "text": "4.4 or so uh which is what you have in abunto 16 uh Fedora 24 so recent Linux",
    "start": "1805159",
    "end": "1813120"
  },
  {
    "text": "distributions will have that but if you try to run uh these tools on like Centos",
    "start": "1813120",
    "end": "1818279"
  },
  {
    "text": "6 or something uh you will need to upgrade your kernel and then it's a little uh",
    "start": "1818279",
    "end": "1823840"
  },
  {
    "text": "trickier so here are some of the tools that open up once you also so uh start",
    "start": "1823840",
    "end": "1829240"
  },
  {
    "start": "1824000",
    "end": "1869000"
  },
  {
    "text": "using BCC there's tools here for low-level stuff like file system and dis",
    "start": "1829240",
    "end": "1835760"
  },
  {
    "text": "and network and there's also tools for managed languages for example there's a",
    "start": "1835760",
    "end": "1840919"
  },
  {
    "text": "tool we could use for net called ugc which traces garbage collections whenever there's a garbage collection it",
    "start": "1840919",
    "end": "1847440"
  },
  {
    "text": "prints out a message and the time it took so we have tools very high level for specific run times and even",
    "start": "1847440",
    "end": "1853519"
  },
  {
    "text": "databases for tracing database queries and we have tools on the very low levels of the system including even CPU events",
    "start": "1853519",
    "end": "1861480"
  },
  {
    "text": "uh in the picture so these are all part of the same package and I obviously encourage you to try them even if you're",
    "start": "1861480",
    "end": "1867200"
  },
  {
    "text": "not doing net core on Linux but rather something else uh on Linux uh instead so",
    "start": "1867200",
    "end": "1872639"
  },
  {
    "start": "1869000",
    "end": "2370000"
  },
  {
    "text": "let's see some examples of tracing uh I'm going to do some of these as screenshots just to save us a little",
    "start": "1872639",
    "end": "1877919"
  },
  {
    "text": "time so what happens here on the left is that I have my buggy application run in",
    "start": "1877919",
    "end": "1884120"
  },
  {
    "text": "a slightly different scenario and here is just uh kind kind of not starting",
    "start": "1884120",
    "end": "1889200"
  },
  {
    "text": "properly it keeps printing out opening configuration file opening configuration",
    "start": "1889200",
    "end": "1894600"
  },
  {
    "text": "file and doesn't make any visible progress now obviously there's a bunch of tools we could run now uh maybe we",
    "start": "1894600",
    "end": "1901679"
  },
  {
    "text": "could look at the log file but the log file doesn't say anything like this is the only information I have opening",
    "start": "1901679",
    "end": "1907159"
  },
  {
    "text": "configuration file good luck with that so um in this in this kind of case what",
    "start": "1907159",
    "end": "1913039"
  },
  {
    "text": "is often helpful is to use a workload characterization tool that would look at",
    "start": "1913039",
    "end": "1918960"
  },
  {
    "text": "this process and tell you what kinds of things is it's doing like what kind of activity is happening so it could be a",
    "start": "1918960",
    "end": "1926120"
  },
  {
    "text": "high level tool like is this using lots of CPU yes or no or it could be slightly",
    "start": "1926120",
    "end": "1931519"
  },
  {
    "text": "more uh specific and we have a tool uh called CIS count which is designed for",
    "start": "1931519",
    "end": "1938279"
  },
  {
    "text": "looking at system calls I can attach it to a process and it will display all the",
    "start": "1938279",
    "end": "1944320"
  },
  {
    "text": "system calls this process is making aggregated by number so I can see in the output here that",
    "start": "1944320",
    "end": "1951399"
  },
  {
    "text": "this process sorry has made uh four open CIS calls and uh 10 futex CIS calls and",
    "start": "1951399",
    "end": "1959279"
  },
  {
    "text": "so on so every system call every interaction between user and kernel space is uh counted now suppose I am",
    "start": "1959279",
    "end": "1967559"
  },
  {
    "text": "interested specifically in these open CIS calls there is a dedicated tool",
    "start": "1967559",
    "end": "1973840"
  },
  {
    "text": "called open Snoop which we could run to get an out output of all the opens all",
    "start": "1973840",
    "end": "1980000"
  },
  {
    "text": "the files we are trying to open in that application which kind of makes sense because we keep getting errors about",
    "start": "1980000",
    "end": "1986039"
  },
  {
    "text": "opening a configuration file and the output just tells us that yeah well we are trying repeatedly to open this file",
    "start": "1986039",
    "end": "1993399"
  },
  {
    "text": "called EC buy.on and the file does not exist or anyway there's an error opening the file",
    "start": "1993399",
    "end": "2000799"
  },
  {
    "text": "because in the file descript or column I get minus one so the open call is actually failing so just by looking at",
    "start": "2000799",
    "end": "2008159"
  },
  {
    "text": "the process figuring out which system calls it's making and then tracing specific ones tracing opens we are able",
    "start": "2008159",
    "end": "2015360"
  },
  {
    "text": "to understand why this process is failing to initialize and what file it is looking for and then maybe if I",
    "start": "2015360",
    "end": "2021320"
  },
  {
    "text": "create that file it's actually going to start up now this is not net specific this",
    "start": "2021320",
    "end": "2027559"
  },
  {
    "text": "could have been done exactly the same way for a Java app or for a C++ app or for a python app so let's switch to",
    "start": "2027559",
    "end": "2034639"
  },
  {
    "text": "something that's more uh net specific and this I'm going to do live so",
    "start": "2034639",
    "end": "2040360"
  },
  {
    "text": "remember this uh fetch application it's actually still running still fetching apple.com and burning lots of CPU and we",
    "start": "2040360",
    "end": "2048358"
  },
  {
    "text": "already know from the flame graph that we had lots of garbage collections what from the info we generated previously so",
    "start": "2048359",
    "end": "2055720"
  },
  {
    "text": "let's switch to actually figuring out how many so the question I want to answer now how many garbage collections",
    "start": "2055720",
    "end": "2062398"
  },
  {
    "text": "is this process having now on Windows it would actually be pretty easy like if",
    "start": "2062399",
    "end": "2068079"
  },
  {
    "text": "you search stack Overflow you'd probably find 10,05 answers saying you should use",
    "start": "2068079",
    "end": "2073240"
  },
  {
    "text": "Windows performance counters and there's a Windows performance counters called called uh uh GC collections under net",
    "start": "2073240",
    "end": "2080320"
  },
  {
    "text": "CLR memory and you can see this in like 5 Seconds not so much on Linux um and",
    "start": "2080320",
    "end": "2087280"
  },
  {
    "text": "there's two general approaches we could take one is going to use runtime events and we'll come back to that the other",
    "start": "2087280",
    "end": "2093919"
  },
  {
    "text": "option is just saying okay well this is all happen inside the CLR the CLR has a",
    "start": "2093919",
    "end": "2100400"
  },
  {
    "text": "bunch of functions for um uh for GC like a bunch of C++ functions that do garbage",
    "start": "2100400",
    "end": "2107359"
  },
  {
    "text": "collections let's just Trace those functions and Linux actually has tools that enable me to attach to any",
    "start": "2107359",
    "end": "2113320"
  },
  {
    "text": "arbitrary user space function and Trace its invocation so here's how it's going",
    "start": "2113320",
    "end": "2118760"
  },
  {
    "text": "to work uh I'm just going to use a command I typed in previously and you'll shortly see why so this is this is the",
    "start": "2118760",
    "end": "2125200"
  },
  {
    "text": "command I'm going to run um so the tool itself is called Funk count and it's not",
    "start": "2125200",
    "end": "2130320"
  },
  {
    "text": "actually a very difficult tool you just give it a pattern and it will uh Trace all the functions matching that pattern",
    "start": "2130320",
    "end": "2137200"
  },
  {
    "text": "the only hard part here is the path uh to lib core CLR lib core CLR is just the",
    "start": "2137200",
    "end": "2143440"
  },
  {
    "text": "main CLR component this is where the garbage collector lives and uh because this is a standalone net app I've used",
    "start": "2143440",
    "end": "2150800"
  },
  {
    "text": "net publish to package it it doesn't depend on the main shared net",
    "start": "2150800",
    "end": "2155880"
  },
  {
    "text": "installation anymore it's all just just local and so this is just a file I can ship with my app and that's what I'm",
    "start": "2155880",
    "end": "2162280"
  },
  {
    "text": "using so lib cor CLR and I'm interested in all the functions that have this pattern in them so anything that has",
    "start": "2162280",
    "end": "2169520"
  },
  {
    "text": "garbage collect inside um so I just have to run it from",
    "start": "2169520",
    "end": "2174839"
  },
  {
    "text": "the right folder though so let me go to uh net",
    "start": "2174839",
    "end": "2180880"
  },
  {
    "text": "buggy and run it from here no it's not here it's oh sorry it's over here",
    "start": "2180880",
    "end": "2187880"
  },
  {
    "text": "no functions matched by Parn garbage collect what",
    "start": "2187880",
    "end": "2193000"
  },
  {
    "text": "seriously oh and the star at the end okay so 14 functions actually have a",
    "start": "2193000",
    "end": "2199319"
  },
  {
    "text": "garbage collect in their name and we are now live tracing all of them this is kind of like a debugger but a million",
    "start": "2199319",
    "end": "2205880"
  },
  {
    "text": "times more efficient and once I hit contrl C I get a summary of how many",
    "start": "2205880",
    "end": "2212400"
  },
  {
    "text": "times each function was invoked now this looks very scary because these are U man",
    "start": "2212400",
    "end": "2217800"
  },
  {
    "text": "C++ function names and uh you don't see the actual class name uh nicely but I",
    "start": "2217800",
    "end": "2223599"
  },
  {
    "text": "could take this thing and press it through a command line tool called CPP fil and then you",
    "start": "2223599",
    "end": "2230400"
  },
  {
    "text": "see it's actually a pretty reasonable name it's a function called garbage collect generation which takes an",
    "start": "2230400",
    "end": "2235880"
  },
  {
    "text": "integer which is probably the the generation to collect and an inum called GC reason so this is very similar to the",
    "start": "2235880",
    "end": "2242800"
  },
  {
    "text": "managed API so now I want to know who is calling that function in my process like",
    "start": "2242800",
    "end": "2249359"
  },
  {
    "text": "where are garbage collections being uh uh caused so for this we can use a",
    "start": "2249359",
    "end": "2257160"
  },
  {
    "text": "different tool and again I'm just using a command I previously typed called stack count and stack count takes very",
    "start": "2257160",
    "end": "2264720"
  },
  {
    "text": "similar arguments except they give it a very specific function like trace this function and tell me who calls that",
    "start": "2264720",
    "end": "2272079"
  },
  {
    "text": "function kind of like a debugger but again in a much more efficient package",
    "start": "2272079",
    "end": "2277240"
  },
  {
    "text": "so so if I run this it's tracing until I hit contrl C and finally here's the",
    "start": "2277240",
    "end": "2282560"
  },
  {
    "text": "interesting part the output has call Stacks in my",
    "start": "2282560",
    "end": "2288800"
  },
  {
    "text": "application and the number you see on the bottom is the number of times this call stack appeared so",
    "start": "2288800",
    "end": "2297200"
  },
  {
    "text": "3,988 times that function was called by the following call stack now this is all",
    "start": "2297200",
    "end": "2304560"
  },
  {
    "text": "not interesting this is just C++ code inside the CLR but it is getting",
    "start": "2304560",
    "end": "2309720"
  },
  {
    "text": "interested it is getting interesting over here so this is my app this is",
    "start": "2309720",
    "end": "2315160"
  },
  {
    "text": "process result this is allocate string now we kind of knew this already because",
    "start": "2315160",
    "end": "2320560"
  },
  {
    "text": "we cheated and look at the flame graph before um but we now know where the garbage collections are being caused and",
    "start": "2320560",
    "end": "2327720"
  },
  {
    "text": "so in lots of the cases anyway in 3,988 cases in the recording I've made",
    "start": "2327720",
    "end": "2334520"
  },
  {
    "text": "they are caused by this particular place in my application this could be a lot easier",
    "start": "2334520",
    "end": "2341839"
  },
  {
    "text": "like this definitely could be simplified but unfortunately currently with the tools we have for net core on Linux um",
    "start": "2341839",
    "end": "2349040"
  },
  {
    "text": "this is kind of the way things work you have to mash different tools together",
    "start": "2349040",
    "end": "2354160"
  },
  {
    "text": "and usually get something functional but at the cost of having to kind of redevelop uh the whole process yourself",
    "start": "2354160",
    "end": "2361839"
  },
  {
    "text": "so I've done some of the work and I've also documented some of these things but it is still a little tricky",
    "start": "2361839",
    "end": "2369119"
  },
  {
    "text": "I want to show you a couple of examples before we move to dumps uh for the for this for the end I want to show you a",
    "start": "2369119",
    "end": "2374960"
  },
  {
    "start": "2370000",
    "end": "2477000"
  },
  {
    "text": "couple of examples based on the actual uh runtime events that are part of the",
    "start": "2374960",
    "end": "2380520"
  },
  {
    "text": "CLR so this is moving more to the official side of things turns out again",
    "start": "2380520",
    "end": "2385640"
  },
  {
    "text": "that the CLR itself has events built in for different interesting things that",
    "start": "2385640",
    "end": "2390960"
  },
  {
    "text": "are happening garbage collections exceptions uh assembly loads jit",
    "start": "2390960",
    "end": "2396599"
  },
  {
    "text": "compilation a bunch of different events have in the runtime a dedicated location",
    "start": "2396599",
    "end": "2402400"
  },
  {
    "text": "that would print a message essentially where that event occurs now the way this",
    "start": "2402400",
    "end": "2407720"
  },
  {
    "text": "works on Windows is using etw event tracing for Windows uh Linux doesn't",
    "start": "2407720",
    "end": "2413240"
  },
  {
    "text": "have event tracing for Windows so instead uh Microsoft opted to use",
    "start": "2413240",
    "end": "2418800"
  },
  {
    "text": "lttng lttng is Linux tracing toolkit Next Generation I think um it's",
    "start": "2418800",
    "end": "2426480"
  },
  {
    "text": "basically a live library for tracing for emitting log messages on Linux systems",
    "start": "2426480",
    "end": "2433319"
  },
  {
    "text": "it's fairly efficient and the general infrastructure is that there is a kernel component which can attach to different",
    "start": "2433319",
    "end": "2441200"
  },
  {
    "text": "events and then emit those to either a file which can be analyzed later or a",
    "start": "2441200",
    "end": "2447680"
  },
  {
    "text": "memory buffer that can be analyzed in real time now if you're getting a Deja",
    "start": "2447680",
    "end": "2452800"
  },
  {
    "text": "Vu with the perf slide it's for a good reason because it's the same",
    "start": "2452800",
    "end": "2458000"
  },
  {
    "text": "architecture you have a kernel component which Aggregates events and then can",
    "start": "2458000",
    "end": "2463119"
  },
  {
    "text": "push them to either a file or a live memory buffer for consumption except",
    "start": "2463119",
    "end": "2468920"
  },
  {
    "text": "this is what they chose to use instead of uh instead of perf there's actually lots of additional logging Frameworks",
    "start": "2468920",
    "end": "2475119"
  },
  {
    "text": "like this so how do you use this thing and what can you do uh first in terms of",
    "start": "2475119",
    "end": "2480640"
  },
  {
    "start": "2477000",
    "end": "2514000"
  },
  {
    "text": "in terms of events so we're not going to be interested in kernel events for this because we already have perf what we",
    "start": "2480640",
    "end": "2486760"
  },
  {
    "text": "will be interested in is user space events which are part of the CLR so you",
    "start": "2486760",
    "end": "2492079"
  },
  {
    "text": "do need to get a list of the different events you can attached to this is not very easy but you can read the source",
    "start": "2492079",
    "end": "2498920"
  },
  {
    "text": "code so the uh the core CLR source code on GitHub has a list of all the",
    "start": "2498920",
    "end": "2504200"
  },
  {
    "text": "different events so exceptions and GC and um uh jit compilation all the things",
    "start": "2504200",
    "end": "2510599"
  },
  {
    "text": "I mentioned you can take a look at the source and find them there and then here's what the workflow actually looks",
    "start": "2510599",
    "end": "2516680"
  },
  {
    "start": "2514000",
    "end": "2850000"
  },
  {
    "text": "like so some I'm going to do as a screenshot some as a live demo because there's just a lot of uh pointless",
    "start": "2516680",
    "end": "2523560"
  },
  {
    "text": "commands to type so basically lttng comes with a command line uh helper",
    "start": "2523560",
    "end": "2529960"
  },
  {
    "text": "called lttng which you use to create a recording session to add the interesting",
    "start": "2529960",
    "end": "2536960"
  },
  {
    "text": "events you care about and then to get the actual file the actual recording so",
    "start": "2536960",
    "end": "2542240"
  },
  {
    "text": "you can see here we create a trace session we add a few context values such",
    "start": "2542240",
    "end": "2548440"
  },
  {
    "text": "as the process ID and the process name so we get those as part of the trace as well we enable all the net runtime",
    "start": "2548440",
    "end": "2556520"
  },
  {
    "text": "events starting with exception and we also enable all the net runtime events",
    "start": "2556520",
    "end": "2562280"
  },
  {
    "text": "starting with GC and then our application starts logging as soon as we call lttng start",
    "start": "2562280",
    "end": "2569800"
  },
  {
    "text": "so this still happens in parallel with the application you don't have to restart the application you don't have",
    "start": "2569800",
    "end": "2576040"
  },
  {
    "text": "to do anything invasive the app is running and in the background you run these commands to get a",
    "start": "2576040",
    "end": "2582480"
  },
  {
    "text": "recording of all these different events and then finally you can do stop and Destroy to finalize the recording and",
    "start": "2582480",
    "end": "2589720"
  },
  {
    "text": "let's see what the end result uh actually looks like so I'm going to resize this uh a",
    "start": "2589720",
    "end": "2596960"
  },
  {
    "text": "lot there is a tool called Babble Trace which is one of the tools for tracing for parsing lttng uh recordings and I",
    "start": "2596960",
    "end": "2605359"
  },
  {
    "text": "can can point this thing to uh my Trace file under lttng traces my Trace if I",
    "start": "2605359",
    "end": "2613720"
  },
  {
    "text": "just do that it's going to print lots and lots of screen full screens full of",
    "start": "2613720",
    "end": "2620280"
  },
  {
    "text": "uh events each line here is a runtime event",
    "start": "2620280",
    "end": "2625480"
  },
  {
    "text": "such as you see here uh GC sampled allocation high this is one of the",
    "start": "2625480",
    "end": "2630920"
  },
  {
    "text": "events the CLR can emit now this isn't particularly interesting let's look for exception events in this output for",
    "start": "2630920",
    "end": "2637960"
  },
  {
    "text": "example so I'm just going to ask for the first two these are the first two exception events in uh in the trace so",
    "start": "2637960",
    "end": "2645839"
  },
  {
    "text": "you see exception thrown uh the exception happened in the buggy process",
    "start": "2645839",
    "end": "2651000"
  },
  {
    "text": "the exception type was uh HTP uh curl exception I had the exception message",
    "start": "2651000",
    "end": "2657359"
  },
  {
    "text": "saying couldn't resolve host name so it's actually giving me uh the exception details as you could see in the",
    "start": "2657359",
    "end": "2663240"
  },
  {
    "text": "exception object the one thing it's not giving me is the stack Trace which is a",
    "start": "2663240",
    "end": "2669000"
  },
  {
    "text": "pretty valuable thing for an exception to have um but unfortunately yeah",
    "start": "2669000",
    "end": "2674760"
  },
  {
    "text": "unfortunately lttng out of the box does not support stock traces so like lttng as a choice",
    "start": "2674760",
    "end": "2682839"
  },
  {
    "text": "for a logging framework assumes you don't want stock traces which is again",
    "start": "2682839",
    "end": "2688200"
  },
  {
    "text": "kind of weird for exception events but probably sort of okay for most other",
    "start": "2688200",
    "end": "2693640"
  },
  {
    "text": "events uh you'd want to emit so let's take look at something else uh instead",
    "start": "2693640",
    "end": "2698920"
  },
  {
    "text": "of exception let's take a look at uh GC start",
    "start": "2698920",
    "end": "2704559"
  },
  {
    "text": "events so here are uh a couple GC start V2 that's the actual event name and uh",
    "start": "2704559",
    "end": "2712720"
  },
  {
    "text": "the details here are actually a little more cryptic um so what is the count",
    "start": "2712720",
    "end": "2717880"
  },
  {
    "text": "what is the depth what is the reason we don't really know we'd have to go back to the source to understand um but",
    "start": "2717880",
    "end": "2725319"
  },
  {
    "text": "obviously we could build tools on top of this so this is the underlying infrastructure it's fairly low level but",
    "start": "2725319",
    "end": "2731760"
  },
  {
    "text": "we could get a listing of all these different events and build tools on top one very very simple example of a tool",
    "start": "2731760",
    "end": "2739079"
  },
  {
    "text": "that you can build on top is just a oneliner shell uh command so what I did here is I recorded",
    "start": "2739079",
    "end": "2747200"
  },
  {
    "text": "GC allocation events so basically memory allocations events from theet process",
    "start": "2747200",
    "end": "2753319"
  },
  {
    "text": "and then I uh sorted and uh removed duplic Ates and counted the number of",
    "start": "2753319",
    "end": "2758480"
  },
  {
    "text": "appearances and so at the end I get as output uh the number of times I",
    "start": "2758480",
    "end": "2763520"
  },
  {
    "text": "allocated objects of a certain type now this is sampled so it doesn't represent",
    "start": "2763520",
    "end": "2769240"
  },
  {
    "text": "all my allocations it represents a sample of my allocations kind of like CPU sampling but it's again illustrative",
    "start": "2769240",
    "end": "2775680"
  },
  {
    "text": "of the things that you can do we could grab all the runtime events and then we could build processing pipelines on top",
    "start": "2775680",
    "end": "2782240"
  },
  {
    "text": "of those and I say we have to build because that's what we have to do it's not something something you get",
    "start": "2782240",
    "end": "2787720"
  },
  {
    "text": "magically out of the box as part of a tool um you do have to build this on top of the uh infrastructure I'm showing you",
    "start": "2787720",
    "end": "2794680"
  },
  {
    "text": "here it's all a story of how you build your own uh Performance Tools",
    "start": "2794680",
    "end": "2800480"
  },
  {
    "text": "essentially so one final thing I want to talk about and then if you have any questions uh is core dumps and how to",
    "start": "2800480",
    "end": "2807119"
  },
  {
    "text": "analyze crash dumps core dumps of net applications in the field uh this could",
    "start": "2807119",
    "end": "2812920"
  },
  {
    "text": "warrant its own talk but I'm going to give you the the highlights so first of all just to make sure we all know a core",
    "start": "2812920",
    "end": "2818960"
  },
  {
    "text": "dump is a snapshot of a running process so you have a process running and then maybe it crashes you want it to be",
    "start": "2818960",
    "end": "2826000"
  },
  {
    "text": "captured to a file so you can analyze the reason for the crash uh later so",
    "start": "2826000",
    "end": "2831319"
  },
  {
    "text": "that's what a core dump is you come to a running process you suspend it for a second you save the whole thing to a",
    "start": "2831319",
    "end": "2837640"
  },
  {
    "text": "file and then the process can keep running if it actually had an exception at crashes then it doesn't keep running",
    "start": "2837640",
    "end": "2844280"
  },
  {
    "text": "but at least you have a snapshot of where it was when when it crashed so this is the general idea how do you",
    "start": "2844280",
    "end": "2850880"
  },
  {
    "start": "2850000",
    "end": "2912000"
  },
  {
    "text": "generate uh core dumps on Linux this is not net specific",
    "start": "2850880",
    "end": "2857480"
  },
  {
    "text": "again there's a a file that you set in order to tell uh the system to generate",
    "start": "2857480",
    "end": "2864079"
  },
  {
    "text": "core dumps at all and this can actually be configured to not write out a file but to run an application where there's",
    "start": "2864079",
    "end": "2870480"
  },
  {
    "text": "a crash there's a lot of stuff behind this file but you can tell the system to generate a cord dump when a process",
    "start": "2870480",
    "end": "2876480"
  },
  {
    "text": "crashes there's a limit on the maximum core file size which you would sometimes have to",
    "start": "2876480",
    "end": "2883079"
  },
  {
    "text": "increase because it it sometimes starts at zero which means you don't get a Core dump file and finally uh once you do",
    "start": "2883079",
    "end": "2890680"
  },
  {
    "text": "that you will get core dumps for crashes if you want to generate a core dump on demand like maybe your application",
    "start": "2890680",
    "end": "2897760"
  },
  {
    "text": "server is stuck and you want to see what it's doing then you will also want the gore tool which comes with GDB and you",
    "start": "2897760",
    "end": "2904640"
  },
  {
    "text": "can point that to a process and get a file on demand get a Core dump at that",
    "start": "2904640",
    "end": "2910040"
  },
  {
    "text": "instant in time now what do you actually do with this so core dumps you can",
    "start": "2910040",
    "end": "2915720"
  },
  {
    "start": "2912000",
    "end": "3051000"
  },
  {
    "text": "analyze exclusively using lldb on Windows you can actually open",
    "start": "2915720",
    "end": "2921520"
  },
  {
    "text": "crash dumps with Visual Studio but you cannot take a crash dump from Linux and",
    "start": "2921520",
    "end": "2926680"
  },
  {
    "text": "open it in Visual Studio this is not supported so you need to do this on your Linux system and you need to use",
    "start": "2926680",
    "end": "2933200"
  },
  {
    "text": "specifically lldb not GDB because GDB doesn't have plugin for net code now",
    "start": "2933200",
    "end": "2939520"
  },
  {
    "text": "once you actually open G uh open lldb I'm going to show you what",
    "start": "2939520",
    "end": "2945240"
  },
  {
    "text": "happens so I have a core dump of uh a crashing application I'm going to show",
    "start": "2945240",
    "end": "2950440"
  },
  {
    "text": "you maybe the crash for a second here this is what the crash looks like when the application crashes it's a console",
    "start": "2950440",
    "end": "2958200"
  },
  {
    "text": "app so it prints out I had an application exception and I get a call",
    "start": "2958200",
    "end": "2963400"
  },
  {
    "text": "stack I get the crashing call stack right here now if you've worked with TPL before you",
    "start": "2963400",
    "end": "2971359"
  },
  {
    "text": "might be able to recognize this this is not the original crashing stack trace",
    "start": "2971359",
    "end": "2978359"
  },
  {
    "text": "this is what happens when you run a task in a different thread and there's an exception in that task and you didn't",
    "start": "2978359",
    "end": "2986079"
  },
  {
    "text": "process that exception and then when the task object is finalized it will throw",
    "start": "2986079",
    "end": "2992119"
  },
  {
    "text": "an exception for you telling you that you had an unhandled exception in the Tex ask but not actually giving you the",
    "start": "2992119",
    "end": "2998720"
  },
  {
    "text": "call stack of that other exception that happened so this is a pretty nasty situation but fortunately we had dump",
    "start": "2998720",
    "end": "3006000"
  },
  {
    "text": "files configured so we had a core dump for this scenario so here I'm opening that core",
    "start": "3006000",
    "end": "3012880"
  },
  {
    "text": "dump using lldb there's nothing particularly fancy in this command line",
    "start": "3012880",
    "end": "3018319"
  },
  {
    "text": "this is just the path to my application and this is the path to the core dump",
    "start": "3018319",
    "end": "3025200"
  },
  {
    "text": "file so DB spits out a lot of output I'm going to clear the screen now the first",
    "start": "3025200",
    "end": "3031680"
  },
  {
    "text": "thing I want to ask for is the call stack tell me where we crashed like what the the exception stock Trace was",
    "start": "3031680",
    "end": "3038280"
  },
  {
    "text": "there's a command for this BT back Trace here's what it says so like this is this is fun and",
    "start": "3038280",
    "end": "3046839"
  },
  {
    "text": "this is great but this is my C code we are familiar with this issue um",
    "start": "3046839",
    "end": "3055240"
  },
  {
    "start": "3051000",
    "end": "3524000"
  },
  {
    "text": "some something needs to give give uh debugging information uh for these addresses we need to translate them to",
    "start": "3055240",
    "end": "3061799"
  },
  {
    "text": "function names now we might have a perf map file but lldb cannot use perf map",
    "start": "3061799",
    "end": "3067680"
  },
  {
    "text": "files perf map files are for perf um lldb cannot use perf map files so what",
    "start": "3067680",
    "end": "3073480"
  },
  {
    "text": "we need to do is essentially not use the underlying debugger but instead load a",
    "start": "3073480",
    "end": "3079920"
  },
  {
    "text": "plugin which ships with net core and that's actually pretty much the same story on Windows if you use window BG on",
    "start": "3079920",
    "end": "3087079"
  },
  {
    "text": "Windows to analyze crash dumps you need the SOS debugger extension which some of",
    "start": "3087079",
    "end": "3092319"
  },
  {
    "text": "you might have heard about and used before on Linux it's the same story you need a plugin you need the SOS plugin",
    "start": "3092319",
    "end": "3099839"
  },
  {
    "text": "for lldb in order to inspect net crash",
    "start": "3099839",
    "end": "3104880"
  },
  {
    "text": "dumps so the plugin is just part of uh the net core distribution so here I am",
    "start": "3104880",
    "end": "3111119"
  },
  {
    "text": "loading it it's called lib SOS plug-in so and it also needs to take the path to",
    "start": "3111119",
    "end": "3118720"
  },
  {
    "text": "the to the CLR for for some reason it can't detect It Whatever we've done this got it out of the way now we get a bunch",
    "start": "3118720",
    "end": "3126440"
  },
  {
    "text": "of additional commands in the debugger which are coming from that plugin so one",
    "start": "3126440",
    "end": "3131799"
  },
  {
    "text": "example of this would be for example the threads command the threads command tells me",
    "start": "3131799",
    "end": "3139040"
  },
  {
    "text": "what my managed threads are my net threads not all my application threads",
    "start": "3139040",
    "end": "3144920"
  },
  {
    "text": "and it shows me here that that my my first thread this one here in the",
    "start": "3144920",
    "end": "3151200"
  },
  {
    "text": "exception column it has an application exception this is the exception we have",
    "start": "3151200",
    "end": "3156480"
  },
  {
    "text": "already seen we know about this guy so let's take a look at the exception object from here SOS has a command",
    "start": "3156480",
    "end": "3164440"
  },
  {
    "text": "called print exception which takes an exception object and prints its details now this is the same as it is in windbg",
    "start": "3164440",
    "end": "3171760"
  },
  {
    "text": "on Windows which is at least one good thing about this um now as you recall it",
    "start": "3171760",
    "end": "3178200"
  },
  {
    "text": "prints out a pretty useless call stack it tells me um that you know I had an",
    "start": "3178200",
    "end": "3183359"
  },
  {
    "text": "unobserved uh unobserved task exception this is not the original the original",
    "start": "3183359",
    "end": "3188839"
  },
  {
    "text": "exception call stack this is just how it manifested so I need to get like the the",
    "start": "3188839",
    "end": "3193920"
  },
  {
    "text": "the inner exception somehow out of this thing except it's not really there so",
    "start": "3193920",
    "end": "3199559"
  },
  {
    "text": "we're going to do it slightly differently I want to switch to that thread and look at that thread's call",
    "start": "3199559",
    "end": "3205280"
  },
  {
    "text": "stack maybe we'll figure out something from the co stack so typically what you do is run the CLR stack command to get a",
    "start": "3205280",
    "end": "3213680"
  },
  {
    "text": "stack Trace but then uh lb well the plugin complains unable to walk the",
    "start": "3213680",
    "end": "3219559"
  },
  {
    "text": "stack the current thread is not a managed thread so if you look at the threads output again um the Linux thread",
    "start": "3219559",
    "end": "3228839"
  },
  {
    "text": "ID for this thread is 957c whereas the debugger here thinks",
    "start": "3228839",
    "end": "3235440"
  },
  {
    "text": "it's zero because for some reason again you have to tell the plugin explicitly which",
    "start": "3235440",
    "end": "3243160"
  },
  {
    "text": "Linux thread ID corresponds to the current tread in the debugger which is",
    "start": "3243160",
    "end": "3248280"
  },
  {
    "text": "insane because it already knows this but you need to tell this anyway so there's",
    "start": "3248280",
    "end": "3253680"
  },
  {
    "text": "a command called set SOS tread ID which takes the uh OS thread ID",
    "start": "3253680",
    "end": "3263040"
  },
  {
    "text": "957c and the debugger thread ID don't ask me why you need to do this",
    "start": "3263040",
    "end": "3269079"
  },
  {
    "text": "just know that you have to do this and I I wrote a script that actually automates this but in any case once you have done",
    "start": "3269079",
    "end": "3275000"
  },
  {
    "text": "that you can actually run CLR stack and get the managed call stack for that",
    "start": "3275000",
    "end": "3280839"
  },
  {
    "text": "current thread which is the same the same thing we saw in the exception message so why am I even doing this",
    "start": "3280839",
    "end": "3288640"
  },
  {
    "text": "because the publish unobserved task exception method and also my function",
    "start": "3288640",
    "end": "3294359"
  },
  {
    "text": "here handle unhandled exceptions takes an event args object which contains the original exception information so my",
    "start": "3294359",
    "end": "3301480"
  },
  {
    "text": "plan right now is to glean that original exception out of there and the way I'm going to do that is ask for parameters",
    "start": "3301480",
    "end": "3309119"
  },
  {
    "text": "to be displayed and then you'll see here it tells me that my function handle",
    "start": "3309119",
    "end": "3315200"
  },
  {
    "text": "unhandled exception takes an event args which has this",
    "start": "3315200",
    "end": "3320319"
  },
  {
    "text": "value so at this point I'm going to ask the debugger to display this object",
    "start": "3320319",
    "end": "3326400"
  },
  {
    "text": "again these are the same commands from Windows SOS except if you don't use Windows SOS it doesn't help a lot but it",
    "start": "3326400",
    "end": "3332200"
  },
  {
    "text": "is the same commands and notice what happens here the unobserved task",
    "start": "3332200",
    "end": "3338000"
  },
  {
    "text": "exception event args inside has the original",
    "start": "3338000",
    "end": "3343640"
  },
  {
    "text": "exception now once we have that we could maybe",
    "start": "3343640",
    "end": "3348920"
  },
  {
    "text": "hope to see the original exception sorry print exception not dump exception we could hope to see the",
    "start": "3348920",
    "end": "3355680"
  },
  {
    "text": "original exception but uh it's an aggregate exception and the TPL",
    "start": "3355680",
    "end": "3361760"
  },
  {
    "text": "aggregate exception uh doesn't so easily give up what the actual exception was so",
    "start": "3361760",
    "end": "3367680"
  },
  {
    "text": "you need to look at the object instead let's do SOS dump object and",
    "start": "3367680",
    "end": "3373400"
  },
  {
    "text": "print out that aggregate exception object we are printing this time the aggregate exception object has a list of",
    "start": "3373400",
    "end": "3381799"
  },
  {
    "text": "inner exceptions inside so you can take that list oops",
    "start": "3381799",
    "end": "3387039"
  },
  {
    "text": "you could take that list and dump",
    "start": "3387039",
    "end": "3393079"
  },
  {
    "text": "that and inside the list there is an array of exceptions so now we could dump that",
    "start": "3393079",
    "end": "3401000"
  },
  {
    "text": "array and in the array there's just one element there's just one exception we are hunting for which is",
    "start": "3401000",
    "end": "3409760"
  },
  {
    "text": "here and assuming it is an exception we will get the original exception message",
    "start": "3410400",
    "end": "3416799"
  },
  {
    "text": "and it's call stack so it it turns out we actually had an invalid operation",
    "start": "3416799",
    "end": "3422520"
  },
  {
    "text": "exception in a background task and this is the source code in my process which",
    "start": "3422520",
    "end": "3428559"
  },
  {
    "text": "caused that exception in a background task and that was wrapped by the aggregate exception business which was",
    "start": "3428559",
    "end": "3434960"
  },
  {
    "text": "so tricky to figure out but I wanted to show you an actual real example of why you would need to analyze the core dump",
    "start": "3434960",
    "end": "3442200"
  },
  {
    "text": "because the original exception message was totally useless and it didn't point to the actual place in my source where",
    "start": "3442200",
    "end": "3448400"
  },
  {
    "text": "the exception occurred Visual Studio would have done this for you in like 3 seconds you would click click click and",
    "start": "3448400",
    "end": "3454680"
  },
  {
    "text": "you would get to the original exception object this is slightly more complicated",
    "start": "3454680",
    "end": "3459880"
  },
  {
    "text": "uh but this is the only alternative for Linux this is the only way you can analyze core dumps of net core processes",
    "start": "3459880",
    "end": "3467680"
  },
  {
    "text": "on Linux so if I tell you that the whole diagnostic story is not like 100% super",
    "start": "3467680",
    "end": "3474280"
  },
  {
    "text": "baked and complete yet I hope you understand why so let's wrap up I've this is just a",
    "start": "3474280",
    "end": "3481799"
  },
  {
    "text": "u a set of screenshots of the whole walking through objects I've just shown",
    "start": "3481799",
    "end": "3487039"
  },
  {
    "text": "you so you could uh replicate this later I have a checklist slide here which is",
    "start": "3487039",
    "end": "3492440"
  },
  {
    "text": "just for your reference that shows all the things you would need to configure and set up in order to be able to do",
    "start": "3492440",
    "end": "3498319"
  },
  {
    "text": "this Diagnostics uh on your own machine some of this is needed for performance",
    "start": "3498319",
    "end": "3503400"
  },
  {
    "text": "investigations some of this is needed for tracing and some of this is needed for core dump analysis but if you don't",
    "start": "3503400",
    "end": "3509599"
  },
  {
    "text": "go through these steps ahead of time you would not be able to come to a running. net core uh app and get out all the",
    "start": "3509599",
    "end": "3516680"
  },
  {
    "text": "information I was able to show you in the demos so there's actually some preparation required which I skipped to",
    "start": "3516680",
    "end": "3522319"
  },
  {
    "text": "make this a little shorter in terms of what we covered uh just to make sure we really saw it all uh we profiled uh CPU",
    "start": "3522319",
    "end": "3530960"
  },
  {
    "text": "behavior in net core applications using perf and Flame graphs we visualized",
    "start": "3530960",
    "end": "3536920"
  },
  {
    "text": "again the stack traces we got uh and saw nicely in a in a nice diagram",
    "start": "3536920",
    "end": "3542559"
  },
  {
    "text": "illustration where our application was spending lots of time on the CPU we used Linux tracing tools such as",
    "start": "3542559",
    "end": "3550119"
  },
  {
    "text": "perf and BCC to look at net core applications and that works I mean no",
    "start": "3550119",
    "end": "3555359"
  },
  {
    "text": "reason why standard Linux tools wouldn't work for net core processes we looked at",
    "start": "3555359",
    "end": "3560880"
  },
  {
    "text": "net core runtime events like gc's and exceptions which are emitted using lttng",
    "start": "3560880",
    "end": "3566359"
  },
  {
    "text": "so we have to use the lttng tool set to to look at those and finally we looked",
    "start": "3566359",
    "end": "3571559"
  },
  {
    "text": "at dump generation and Analysis which requires lldb and the SOS plug-in and a",
    "start": "3571559",
    "end": "3577520"
  },
  {
    "text": "bunch of additional commands uh that you have to remember this whole thing is painful and um again there's lots of",
    "start": "3577520",
    "end": "3584720"
  },
  {
    "text": "room for improvement here I hoped to see lots of changes in net core 2.0 but",
    "start": "3584720",
    "end": "3590400"
  },
  {
    "text": "there weren't any significant changes there's a lot of work in progress but if you are currently deploying la. net core",
    "start": "3590400",
    "end": "3596920"
  },
  {
    "text": "to production or if you're planning to you should be advised about the meaning of doing performance investigation on",
    "start": "3596920",
    "end": "3604359"
  },
  {
    "text": "those systems trivial issues would be trivial and the hard things will be very",
    "start": "3604359",
    "end": "3609559"
  },
  {
    "text": "very hard uh because the tools are in this uh sort of State I have a bunch of references for you to look at later",
    "start": "3609559",
    "end": "3616200"
  },
  {
    "text": "including some of my own blog posts you can find this whole thing uh uh in my slides and the demo application I've",
    "start": "3616200",
    "end": "3623720"
  },
  {
    "text": "used is up on GitHub as well so you can replicate some of these experiments uh if you would like if you have any",
    "start": "3623720",
    "end": "3630240"
  },
  {
    "text": "questions if you're interested in net core diagnostics at all uh please catch me later I'm out of time but there's a",
    "start": "3630240",
    "end": "3636240"
  },
  {
    "text": "longer break now I think so we can absolutely uh have a chat if you if you'd like and I hope you enjoy the rest",
    "start": "3636240",
    "end": "3641839"
  },
  {
    "text": "of NDC thank you very very much for coming thank you",
    "start": "3641839",
    "end": "3647480"
  }
]