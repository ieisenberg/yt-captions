[
  {
    "text": "all right welcome thank you for coming to my talk called typescript for c plus programmers",
    "start": "4319",
    "end": "10800"
  },
  {
    "text": "that's my name and that's my face so my name is oliver voge i am a senior",
    "start": "10800",
    "end": "17119"
  },
  {
    "text": "software developer at turtlesec as and if you'd like to yell at me on twitter or tell me dad jokes you can do",
    "start": "17119",
    "end": "23519"
  },
  {
    "text": "that too it's apparently very popular and fun so you can try that",
    "start": "23519",
    "end": "28840"
  },
  {
    "text": "cool i work for a company called turtlesec recently moved here from sweden",
    "start": "28840",
    "end": "34559"
  },
  {
    "text": "i did a seven-year stint in the gaming industry before which was a lot of fun",
    "start": "34559",
    "end": "39840"
  },
  {
    "text": "i broke a lot of servers fun times but yeah i work for turtlesec we are a consulting",
    "start": "39840",
    "end": "46800"
  },
  {
    "text": "consultancy and training company so if you would like training like there was here earlier this week",
    "start": "46800",
    "end": "53280"
  },
  {
    "text": "you can also yell at us on all sorts of media or visit our website good stuff",
    "start": "53280",
    "end": "59680"
  },
  {
    "text": "so let's start with a quote from a famous philosopher you can't always stay in your corner",
    "start": "59680",
    "end": "66400"
  },
  {
    "text": "waiting for others to come to you you sometimes have to go to them",
    "start": "66400",
    "end": "72000"
  },
  {
    "text": "that's a winnie the pooh good",
    "start": "72000",
    "end": "77040"
  },
  {
    "text": "so what this talk is and what this talk isn't going over a language requires a lot of",
    "start": "77040",
    "end": "83280"
  },
  {
    "text": "items to be covered that's that's going to be things that i miss",
    "start": "83280",
    "end": "88479"
  },
  {
    "text": "so not everything is going to be covered in detail so this is more of a",
    "start": "88479",
    "end": "94960"
  },
  {
    "text": "comprehensive overview or this is not a comprehensive overview of the language this is more like a curious look of of",
    "start": "94960",
    "end": "101680"
  },
  {
    "text": "this specific world i wrote this kind of as a point of view from a zebra prosperogamer because i am",
    "start": "101680",
    "end": "108399"
  },
  {
    "text": "a simpler plus programmer so but anywhere not familiar with this world can benefit",
    "start": "108399",
    "end": "115040"
  },
  {
    "text": "from this talk in some way cool or as i would sometimes say this talk is like this",
    "start": "115040",
    "end": "121680"
  },
  {
    "text": "so what are they doing over there in that other world i'm here in my binary world so let's have a let's have a fun look over the",
    "start": "121680",
    "end": "128560"
  },
  {
    "text": "the snow bank all right ready for that yes thumbs up good stuff",
    "start": "128560",
    "end": "135040"
  },
  {
    "text": "let's start with the history of everything no okay no mostly everything no uh mostly",
    "start": "135040",
    "end": "140720"
  },
  {
    "text": "javascript so it all started with the world wide",
    "start": "140720",
    "end": "146239"
  },
  {
    "text": "web or it started with netscape so netscape added the javascript in 1995",
    "start": "146239",
    "end": "153519"
  },
  {
    "text": "who remembers his logo and the animation and all of the 256 colors great stuff",
    "start": "153519",
    "end": "159920"
  },
  {
    "text": "we almost got the ava or scheme that was a thing a little bit fun to have scheme right",
    "start": "159920",
    "end": "165599"
  },
  {
    "text": "i get a lot of nods in the audience they all want scheme then we get acma script in 1997 they",
    "start": "165599",
    "end": "173760"
  },
  {
    "text": "took two years to standardize this stuff huh yeah let's think about that",
    "start": "173760",
    "end": "178800"
  },
  {
    "text": "so this that serves as the javascript standard there are other languages which based on ecmascript like actionscript if",
    "start": "178800",
    "end": "184800"
  },
  {
    "text": "you did flash programming but yeah that is the javascript standard so this is a standard backed language",
    "start": "184800",
    "end": "192959"
  },
  {
    "text": "and then it's all google's fault well not in that bad way but it's all google's fault because",
    "start": "192959",
    "end": "199440"
  },
  {
    "text": "in 2008 we have the chromium project and then they add v8 as a javascript engine",
    "start": "199440",
    "end": "207120"
  },
  {
    "text": "or compiler or thingamabob this made the language much",
    "start": "207120",
    "end": "213680"
  },
  {
    "text": "more performant so this was a big thing with javascript back then it was very very slow",
    "start": "213680",
    "end": "218799"
  },
  {
    "text": "and the implementations were also very different so you can think of this as a",
    "start": "218799",
    "end": "223840"
  },
  {
    "text": "standardization of the standardization maybe not so",
    "start": "223840",
    "end": "229280"
  },
  {
    "text": "i don't like the worldwide web there is too many funny cat pictures so can we do this offline and yes",
    "start": "229280",
    "end": "236239"
  },
  {
    "text": "project called node.js introduced in 2009 and simply put they took the v8 engine",
    "start": "236239",
    "end": "243760"
  },
  {
    "text": "and allowed you to just run code in the command line or wherever you want",
    "start": "243760",
    "end": "249120"
  },
  {
    "text": "so that was there's more to it but that's kind of the idea and",
    "start": "249120",
    "end": "254159"
  },
  {
    "text": "this stack is then becoming more full if you know that reference",
    "start": "254159",
    "end": "259919"
  },
  {
    "text": "and then we have the library of javascriptia we get npm",
    "start": "259919",
    "end": "265840"
  },
  {
    "text": "that's in a year later 2010 npm as a package manager so this is for libraries",
    "start": "265840",
    "end": "271199"
  },
  {
    "text": "that are designed to run within node.js ecosystem that's kind of the idea in the beginning",
    "start": "271199",
    "end": "277040"
  },
  {
    "text": "so you have now the world at your fingertips and you have a 20 gigabyte",
    "start": "277040",
    "end": "282160"
  },
  {
    "text": "folder with with the internet good stuff so this is a good foundation this is a",
    "start": "282160",
    "end": "289199"
  },
  {
    "text": "foundation right so now we have uh",
    "start": "289199",
    "end": "294240"
  },
  {
    "text": "these projects were kind of making the basis of a javascript development environment",
    "start": "294240",
    "end": "299280"
  },
  {
    "text": "so if you were a javascript developer these were the tools there are other tools",
    "start": "299280",
    "end": "304320"
  },
  {
    "text": "probably somewhere we yelled at me for instead of saying npm there's a yarn or some other tools but the idea here is",
    "start": "304320",
    "end": "310479"
  },
  {
    "text": "the same so this is kind of the if you were go to work in the morning you had these things",
    "start": "310479",
    "end": "316320"
  },
  {
    "text": "in your hands but javascript is not perfect",
    "start": "316320",
    "end": "322080"
  },
  {
    "text": "unlike c plus no i kid um so we have this environment and a lot of people are starting to build all sorts",
    "start": "322080",
    "end": "328639"
  },
  {
    "text": "of cool things with only javascript writing servers writing games",
    "start": "328639",
    "end": "333759"
  },
  {
    "text": "yeah great stuff the language has its flaws there's a famous talk called what which is",
    "start": "333759",
    "end": "339919"
  },
  {
    "text": "lightning talk about problems in the language and as far as back as 2002 we had static",
    "start": "339919",
    "end": "346160"
  },
  {
    "text": "analysis tools for javascript to catch these common issues",
    "start": "346160",
    "end": "352199"
  },
  {
    "text": "javascript's type system is dynamic there are underlying primitives but and also almighty json object",
    "start": "353360",
    "end": "360479"
  },
  {
    "text": "which is where that comes from it's a javascript object notation that would that come from",
    "start": "360479",
    "end": "367840"
  },
  {
    "text": "so before we go into typescript we need to have a talk we need to have a talk about",
    "start": "367840",
    "end": "372880"
  },
  {
    "text": "type javascript because this gives us a sense of why typescript",
    "start": "372880",
    "end": "378800"
  },
  {
    "text": "is there in the first place all right this will give you some context for the",
    "start": "378800",
    "end": "384160"
  },
  {
    "text": "talkcoin forwards and then i will change gears into only typescript after that",
    "start": "384160",
    "end": "389360"
  },
  {
    "text": "good we need to start with the hello world right but i also have some examples",
    "start": "389360",
    "end": "394400"
  },
  {
    "text": "i can make a variable number one or number two have some numbers to it they can even be",
    "start": "394400",
    "end": "399759"
  },
  {
    "text": "floating point i can have some text and i can have a boolean and no type definition is needed",
    "start": "399759",
    "end": "405840"
  },
  {
    "text": "and i can print them out and things work as expected good we're happy",
    "start": "405840",
    "end": "412479"
  },
  {
    "text": "i can make a an object this is a javascript object notation even though",
    "start": "412479",
    "end": "417759"
  },
  {
    "text": "so javascript looks like this but you have to have the quotes around the around the key",
    "start": "417759",
    "end": "423520"
  },
  {
    "text": "so i have anna she's 25 and she has graduated great and if i print that out",
    "start": "423520",
    "end": "428960"
  },
  {
    "text": "i get that wonderful output so this i'm going to talk about this a lot as an object",
    "start": "428960",
    "end": "435039"
  },
  {
    "text": "that's usually called an object so if you have a curly brace and then you have",
    "start": "435039",
    "end": "440080"
  },
  {
    "text": "key colon something so these are called objects that's usually the idea",
    "start": "440080",
    "end": "445680"
  },
  {
    "text": "all right so let's do a simple example or not so simple example we're going to have a",
    "start": "445680",
    "end": "452080"
  },
  {
    "text": "loop i'm going to go from 0 to 10 and then i'm going to sum up the values and i'm",
    "start": "452080",
    "end": "458880"
  },
  {
    "text": "just going to store i in j just for for fun because who wouldn't",
    "start": "458880",
    "end": "464560"
  },
  {
    "text": "so if i print that sum we get as expected right and the other problems that are going to",
    "start": "464560",
    "end": "469919"
  },
  {
    "text": "happen here probably i always get people here like yep because you can print out i",
    "start": "469919",
    "end": "475919"
  },
  {
    "text": "that's totally fine there's one more you can print out j",
    "start": "475919",
    "end": "481919"
  },
  {
    "text": "because javascript has a thing called hoisting where variables are hoisted up to the topmost scope",
    "start": "481919",
    "end": "488800"
  },
  {
    "text": "there are probably some technical details to it but it will end up in things like this so not great but",
    "start": "488800",
    "end": "494879"
  },
  {
    "text": "but hey here we are and i can also make an anonymous function i just say function i have the",
    "start": "494879",
    "end": "501599"
  },
  {
    "text": "arguments and then some sub scope in it i'm going to loop one three times and",
    "start": "501599",
    "end": "507199"
  },
  {
    "text": "i'm going to call this function after 100 milliseconds each so i'm gonna i'm sending i in which is from the argument",
    "start": "507199",
    "end": "513518"
  },
  {
    "text": "and i get three every time because if the i is hoisted out the value is set",
    "start": "513519",
    "end": "520880"
  },
  {
    "text": "and then when the function is actually called i'm using the out hoisted i and print it out",
    "start": "520880",
    "end": "526320"
  },
  {
    "text": "so then that makes sense so that's fixed with changing three letters i change it to a let instead of r",
    "start": "526320",
    "end": "532640"
  },
  {
    "text": "so when i make a variable with a let it behaves more like we are used to",
    "start": "532640",
    "end": "537760"
  },
  {
    "text": "so so scoping is a makes a little bit more sense here good",
    "start": "537760",
    "end": "543120"
  },
  {
    "text": "i can even make a variable i can even make it const and this is another notation for a",
    "start": "543120",
    "end": "548640"
  },
  {
    "text": "function that i will use sometimes i call these arrow functions so i have the arguments and the arrow",
    "start": "548640",
    "end": "554720"
  },
  {
    "text": "and then the body of the function that's usually handy and i can make that into a variable constant send and we're happy",
    "start": "554720",
    "end": "562240"
  },
  {
    "text": "that's all okay good so then i have an object i'm going to",
    "start": "562240",
    "end": "568800"
  },
  {
    "text": "have a value of 10 in the object and then i can also put functions into the object so here i'm printing out",
    "start": "568800",
    "end": "576240"
  },
  {
    "text": "this.value so what do you think happens when i print this out",
    "start": "576240",
    "end": "581680"
  },
  {
    "text": "any takers 10 someone said no yes we get 10.",
    "start": "581680",
    "end": "587839"
  },
  {
    "text": "so we're happy here right what happened here and have an arrow function as one of",
    "start": "587839",
    "end": "593519"
  },
  {
    "text": "those members looks the same otherwise but it doesn't work",
    "start": "593519",
    "end": "599519"
  },
  {
    "text": "it doesn't work and i'll show you why it doesn't work in a bit because there is a quirk happening here",
    "start": "599519",
    "end": "604800"
  },
  {
    "text": "okay so we have a language language has quirks but of course if you know a",
    "start": "604800",
    "end": "609920"
  },
  {
    "text": "language and you know the quirks like we do with sleep plus it's fine we we step aside from the",
    "start": "609920",
    "end": "616560"
  },
  {
    "text": "quirks we tell people please don't use those quirks or be careful",
    "start": "616560",
    "end": "621600"
  },
  {
    "text": "all right so many had looked at the javascript problem and tried to solve it by creating a new",
    "start": "621600",
    "end": "627440"
  },
  {
    "text": "language typescript looked at this problem by coming a strict superset of javascript",
    "start": "627440",
    "end": "633760"
  },
  {
    "text": "so all javascript is legal typescript straight through you can just take the javascript copy",
    "start": "633760",
    "end": "639519"
  },
  {
    "text": "paste run it through typescript that's fine typescript is then compiled into",
    "start": "639519",
    "end": "645920"
  },
  {
    "text": "javascript and at the runtime javascript doesn't exist in the same way in cpr plus at runtime there is no c",
    "start": "645920",
    "end": "653200"
  },
  {
    "text": "plus there is just assembly cool",
    "start": "653200",
    "end": "658399"
  },
  {
    "text": "so let's install typescript we can actually use to use the node.js",
    "start": "658399",
    "end": "663600"
  },
  {
    "text": "installer you can install it in a similar way on the command line the command line is a bit more trickier and",
    "start": "663600",
    "end": "669440"
  },
  {
    "text": "there are other ways but this is kind of the the easiest way to show you",
    "start": "669440",
    "end": "674800"
  },
  {
    "text": "there are also the tools and again there are quirks within the installation but this is a our way to get node in and",
    "start": "674800",
    "end": "681600"
  },
  {
    "text": "when you get node installed you also get the npm installed and then i run this i go into my project",
    "start": "681600",
    "end": "687839"
  },
  {
    "text": "folder i call npm init go through the arguments there i install typescript i call save dev",
    "start": "687839",
    "end": "695760"
  },
  {
    "text": "you'll see why in a bit and because i do a save dev typescript is not installed globally in my system",
    "start": "695760",
    "end": "702320"
  },
  {
    "text": "typescript is installed in my project folder within this node module folder that people talk",
    "start": "702320",
    "end": "708720"
  },
  {
    "text": "about and because it's in the node modules folder i can run it by saying npx and then tsc psc is the typescript",
    "start": "708720",
    "end": "715680"
  },
  {
    "text": "compiler and i can say init to make a typescript project so that's the only thing the npx means",
    "start": "715680",
    "end": "722160"
  },
  {
    "text": "just run an application within the my project if i would have installed it globally by",
    "start": "722160",
    "end": "728880"
  },
  {
    "text": "npm install minus g i could have just said tsc that would be the same",
    "start": "728880",
    "end": "734880"
  },
  {
    "text": "so it looks like this i have my node module folder i had some code written i i will then",
    "start": "734880",
    "end": "740720"
  },
  {
    "text": "get two files packets json and ts configures so let's look at them",
    "start": "740720",
    "end": "745760"
  },
  {
    "text": "packet json looks like this and that's for the npm",
    "start": "745760",
    "end": "750880"
  },
  {
    "text": "npm will give you package json this is my talk this is my project main file is index",
    "start": "750880",
    "end": "756480"
  },
  {
    "text": "and you can see the dependencies so i have two types of dependencies you have developer dependency",
    "start": "756480",
    "end": "762399"
  },
  {
    "text": "then you have a dependency so this is what you need to make the project and this is what you need to run the project",
    "start": "762399",
    "end": "768959"
  },
  {
    "text": "right and then we get this file this is ts config",
    "start": "768959",
    "end": "775120"
  },
  {
    "text": "yes i made it like this for for fun but what this is is these are all the compiler flags that",
    "start": "775120",
    "end": "781600"
  },
  {
    "text": "you can set for typescript so there's like three or four of them enabled and they have comment next to it",
    "start": "781600",
    "end": "787680"
  },
  {
    "text": "it's one of them but it was more for fun but it is here",
    "start": "787680",
    "end": "792800"
  },
  {
    "text": "so these are the settings that i will run with the compiler so",
    "start": "792800",
    "end": "798240"
  },
  {
    "text": "i make index ts hello world and then i would like to run",
    "start": "798240",
    "end": "803440"
  },
  {
    "text": "typescript i say npx dsc good stuff and i get the same thing out basically",
    "start": "803440",
    "end": "810639"
  },
  {
    "text": "there's a thing called strict mode in javascript i'm not going to go into what that means but split mode good that's kind of the",
    "start": "810639",
    "end": "816880"
  },
  {
    "text": "explanation of that um so yeah so you can see that these are basically",
    "start": "816880",
    "end": "823040"
  },
  {
    "text": "the same thing and they're so much the same thing that i can if i run them through node and node.js",
    "start": "823040",
    "end": "828320"
  },
  {
    "text": "and i say node index or or typescript it doesn't matter they're the same file i'm going to do this one more time just",
    "start": "828320",
    "end": "834399"
  },
  {
    "text": "to show you but i'm running the javascript file which is outputted it gives me hello world and i",
    "start": "834399",
    "end": "839600"
  },
  {
    "text": "can actually run the typescript file as well but generally this isn't done because typescript is not valid",
    "start": "839600",
    "end": "845920"
  },
  {
    "text": "javascript but we can have some fun here all right",
    "start": "845920",
    "end": "851199"
  },
  {
    "text": "so let's look back at our example the thing that didn't work so now if i put that into a typescript file i",
    "start": "851199",
    "end": "857839"
  },
  {
    "text": "will get an error and will tell me that the containing arrow function captures the global value of this",
    "start": "857839",
    "end": "865279"
  },
  {
    "text": "yeah because in this object setup this",
    "start": "865279",
    "end": "871040"
  },
  {
    "text": "in an arrow function is the global error function in a function it's not because it's within that context",
    "start": "871040",
    "end": "877920"
  },
  {
    "text": "so that's a quirk of of javascript all right which is",
    "start": "877920",
    "end": "883519"
  },
  {
    "text": "we don't want this we don't want this behavior and this is actually we'll get two errors because it will say that like hey",
    "start": "883519",
    "end": "891279"
  },
  {
    "text": "this is not maybe the list that you want and also value doesn't exist within the global",
    "start": "891279",
    "end": "897360"
  },
  {
    "text": "scope so there's two errors actually all right and there are no quick fixes available",
    "start": "897360",
    "end": "903279"
  },
  {
    "text": "good stuff but here's another thing i can compile this we have an error",
    "start": "903279",
    "end": "909199"
  },
  {
    "text": "i will get another out i'll get both of them so from our point of view this is bad",
    "start": "909199",
    "end": "914639"
  },
  {
    "text": "but i can still run it i can say node in the sds it runs the",
    "start": "914639",
    "end": "920079"
  },
  {
    "text": "same behavior than undefined i can even run a typescript file it's 10 and undefined",
    "start": "920079",
    "end": "926240"
  },
  {
    "text": "what gives well we still get a javascript file out",
    "start": "926240",
    "end": "933279"
  },
  {
    "text": "because maybe you wanted this behavior and there are ways to say to the typescript compiler no when it fails i",
    "start": "933360",
    "end": "940880"
  },
  {
    "text": "don't want an output file but by default it actually gives you this and now you can actually see the quirk that's",
    "start": "940880",
    "end": "946320"
  },
  {
    "text": "happening they make a variable called underscore this in the global scope",
    "start": "946320",
    "end": "951920"
  },
  {
    "text": "and then that is the variable being used in the arrow function and you can see the arrow function isn't there anymore",
    "start": "951920",
    "end": "957279"
  },
  {
    "text": "it's just a normal function now so they've captured the quark so you actually get the quirk out",
    "start": "957279",
    "end": "964240"
  },
  {
    "text": "through the typescript so yeah fun so",
    "start": "964240",
    "end": "970639"
  },
  {
    "text": "let's shift the focus to typescript and the language itself some of these features come from or",
    "start": "970639",
    "end": "977120"
  },
  {
    "text": "based on javascript and going like back and forth and back and forth actually will take more time",
    "start": "977120",
    "end": "982399"
  },
  {
    "text": "so it's just easier to think of this as typescript some of these things might come from other from javascript but",
    "start": "982399",
    "end": "987519"
  },
  {
    "text": "let's focus on it as typescript so it's released in 2012 developed by microsoft",
    "start": "987519",
    "end": "994480"
  },
  {
    "text": "the idea of like i mentioned before to add type safety to javascript",
    "start": "994480",
    "end": "999920"
  },
  {
    "text": "but also have existing javascript application be valid tab skip applications and later on we'll show",
    "start": "999920",
    "end": "1007040"
  },
  {
    "text": "that you can actually get type safety on existing javascript applications",
    "start": "1007040",
    "end": "1013759"
  },
  {
    "text": "so they're compiled into javascript files and the language also has a language server",
    "start": "1013759",
    "end": "1019040"
  },
  {
    "text": "which is installed in vs code for example that's what gives you syntax highlighting and error checking",
    "start": "1019040",
    "end": "1024400"
  },
  {
    "text": "and you can actually just ask the language server itself and give it some json that will reply to you that's",
    "start": "1024400",
    "end": "1029918"
  },
  {
    "text": "pretty neat all right functions here we have a function",
    "start": "1029919",
    "end": "1036319"
  },
  {
    "text": "so here you see that i'm taking two arguments and type after it so it's colon and then the type",
    "start": "1036319",
    "end": "1041918"
  },
  {
    "text": "and this function then also returns you say then colon and then the type after that and then i just say return a",
    "start": "1041919",
    "end": "1047839"
  },
  {
    "text": "plus b so now if you imagine this as javascript it would be the same if you would remove",
    "start": "1047839",
    "end": "1054559"
  },
  {
    "text": "colon number from both of them that would be exactly like javascript so we're adding",
    "start": "1054559",
    "end": "1059600"
  },
  {
    "text": "type safety on to existing things i think uh python has a similar thing where it looks like python and you add stuff to",
    "start": "1059600",
    "end": "1066320"
  },
  {
    "text": "it so yeah okay so now i can make a variable using let i",
    "start": "1066320",
    "end": "1072559"
  },
  {
    "text": "can say value colon and then the type which is optional you see that in a bit and then i call a function and we're",
    "start": "1072559",
    "end": "1077679"
  },
  {
    "text": "happy here i can also make a function like i made the",
    "start": "1077679",
    "end": "1084640"
  },
  {
    "text": "the locking function before where i just made a arrow function so this is a function called adder and then i have",
    "start": "1084640",
    "end": "1091039"
  },
  {
    "text": "the arrow function notation and then i just assigned it to adder and then the body return a plus b",
    "start": "1091039",
    "end": "1098880"
  },
  {
    "text": "all right and here you see that i don't specify the return type because",
    "start": "1098880",
    "end": "1104400"
  },
  {
    "text": "we they can deduce that we can know what the return type is here i make a variable might make it",
    "start": "1104400",
    "end": "1111679"
  },
  {
    "text": "const and i can here i'm in visual studio code i can mouse over added value and it will",
    "start": "1111679",
    "end": "1117760"
  },
  {
    "text": "tell me it's a const added value of type number because that's deduced from adder which is then deduced from a plus b and",
    "start": "1117760",
    "end": "1124640"
  },
  {
    "text": "a plus b because it's number so you can see this functioning happening",
    "start": "1124640",
    "end": "1130480"
  },
  {
    "text": "i can then also make a function this is a bit more complicated i have an adder or extra adder takes",
    "start": "1130480",
    "end": "1136960"
  },
  {
    "text": "another number and then a function and then i have the arrow syntax",
    "start": "1136960",
    "end": "1143039"
  },
  {
    "text": "so instead of having the function i say that the body is going to return a number but otherwise it's the same",
    "start": "1143039",
    "end": "1149600"
  },
  {
    "text": "and then i can use that to say a plus function a i can call the function and send it in",
    "start": "1149600",
    "end": "1154799"
  },
  {
    "text": "the function and most of this stuff disappears then when you when you compile it",
    "start": "1154799",
    "end": "1161200"
  },
  {
    "text": "all right then i have an interface let's say we have an interface called animal",
    "start": "1161679",
    "end": "1166720"
  },
  {
    "text": "and animals are cute so i would like to know how cute the animal is so there's a cuteness function and that cuteness",
    "start": "1166720",
    "end": "1172400"
  },
  {
    "text": "function returns a number good and then i would like to implement a dog",
    "start": "1172400",
    "end": "1179600"
  },
  {
    "text": "a dog has a name and a certain cuteness amount so here we have a regular class and some private",
    "start": "1179600",
    "end": "1184960"
  },
  {
    "text": "private members then i define that they are a string in a number i then have a constructor i can take in",
    "start": "1184960",
    "end": "1190880"
  },
  {
    "text": "a name but i also know that q dogs are very cute so that's a 10 out of 10.",
    "start": "1190880",
    "end": "1196000"
  },
  {
    "text": "so no need to let me know how cute dogs are so i can assign that there so now we",
    "start": "1196000",
    "end": "1202080"
  },
  {
    "text": "have a constructor here and there's only one constructor so don't worry there",
    "start": "1202080",
    "end": "1208159"
  },
  {
    "text": "not the 700 that we have and then here i have a function which is",
    "start": "1208159",
    "end": "1213600"
  },
  {
    "text": "then matching the interface it is public by default so if you don't say anything it's public",
    "start": "1213600",
    "end": "1218960"
  },
  {
    "text": "and i would like to just return the cuteness amount so it is 10 in this case okay",
    "start": "1218960",
    "end": "1224480"
  },
  {
    "text": "good i can now create steve the dog and i can log out how cute steve is all right",
    "start": "1224480",
    "end": "1232080"
  },
  {
    "text": "so i make a constitutive new dog steve and then yeah steve cuteness",
    "start": "1232080",
    "end": "1237440"
  },
  {
    "text": "wonderful but we can also do this so",
    "start": "1237440",
    "end": "1242559"
  },
  {
    "text": "cuteness is a function on steve so i can actually then store cuteness",
    "start": "1242559",
    "end": "1248640"
  },
  {
    "text": "in a variable and i can mouse over store cuteness and it said the type of store cuteness is the arrow notation so it's a",
    "start": "1248640",
    "end": "1254799"
  },
  {
    "text": "function it's a function that takes no arguments returns a number okay and then can i then call this",
    "start": "1254799",
    "end": "1260960"
  },
  {
    "text": "function no i cannot and the arrow says cannot read property",
    "start": "1260960",
    "end": "1266799"
  },
  {
    "text": "cuteness amount of undefined because this",
    "start": "1266799",
    "end": "1272080"
  },
  {
    "text": "is lost in the context when i assigned it to a variable so it's not like the lambda is where i can capture something",
    "start": "1272080",
    "end": "1277919"
  },
  {
    "text": "and then it distorts within it but there is a fix to this which is",
    "start": "1277919",
    "end": "1285280"
  },
  {
    "text": "instead of cuteness being a function cuteness now an arrow function so this thing goes around the other way",
    "start": "1285280",
    "end": "1290480"
  },
  {
    "text": "like i saw the example before where if i had the arrow function this isn't captured but here it works because",
    "start": "1290480",
    "end": "1297760"
  },
  {
    "text": "this isn't a javascript class this is a typescript class so it behaves in that way so now an",
    "start": "1297760",
    "end": "1303360"
  },
  {
    "text": "arrow function behaves in the way that you want there are other ways to get this to work",
    "start": "1303360",
    "end": "1308799"
  },
  {
    "text": "but they are weird and quirky and i just want to show you this one because it's a simpler way",
    "start": "1308799",
    "end": "1315440"
  },
  {
    "text": "and now i can actually cut store the cuteness from steve cuteness that this",
    "start": "1315440",
    "end": "1321120"
  },
  {
    "text": "is captured within store cuteness and i can call it no that's fine it works so you can send a function",
    "start": "1321120",
    "end": "1327679"
  },
  {
    "text": "from an instance into another function or into some system so cool",
    "start": "1327679",
    "end": "1334320"
  },
  {
    "text": "we also have generics so this line then looks for us",
    "start": "1334400",
    "end": "1339919"
  },
  {
    "text": "like regular generics right instead of saying template type name we can just say t",
    "start": "1339919",
    "end": "1345679"
  },
  {
    "text": "and i have a t a or b but i return a number because maybe i want to sum up the",
    "start": "1345679",
    "end": "1351280"
  },
  {
    "text": "cuteness but that's not going to work so we get an error here",
    "start": "1351280",
    "end": "1357760"
  },
  {
    "text": "because we're asking for a something within the interface",
    "start": "1357760",
    "end": "1364240"
  },
  {
    "text": "and t isn't defined to have anything in the interface it is so generic it has nothing",
    "start": "1364240",
    "end": "1370400"
  },
  {
    "text": "so if i try to do this try to add the cuteness of steve to get the number 20 it doesn't work",
    "start": "1370400",
    "end": "1376640"
  },
  {
    "text": "because property cuteness does not exist on type t because t is of type any",
    "start": "1376640",
    "end": "1382799"
  },
  {
    "text": "and any is a type which is basically used to help people get into typescript because",
    "start": "1382799",
    "end": "1389440"
  },
  {
    "text": "they can they can with all the javascript things like they don't know the type maybe not now so they can just say oh the type is",
    "start": "1389440",
    "end": "1396000"
  },
  {
    "text": "just any so we don't know what it is and then later on they can change any out to something else so that's very nice",
    "start": "1396000",
    "end": "1403039"
  },
  {
    "text": "so there's an any type all right so what i have to do is i have to say that t extends animal",
    "start": "1403039",
    "end": "1409840"
  },
  {
    "text": "so now because we know t has a type it extends animal it works and you might",
    "start": "1409840",
    "end": "1415039"
  },
  {
    "text": "think like why don't i just then have animal instead of t and you can that's fine but",
    "start": "1415039",
    "end": "1420559"
  },
  {
    "text": "this comes into play a little bit later but yeah you have generics but you need to specify what interface is happening here and if",
    "start": "1420559",
    "end": "1427120"
  },
  {
    "text": "you don't specify you can still work with stuff but you're very limited to what is within um",
    "start": "1427120",
    "end": "1433360"
  },
  {
    "text": "what you can do because it has to be like very generic things plus or or get the length of an array or something very",
    "start": "1433360",
    "end": "1440240"
  },
  {
    "text": "specific all right and then we don't want to have just one file we want to have many files three i",
    "start": "1440240",
    "end": "1446799"
  },
  {
    "text": "have animal tiers with the same code before here i can i can also save public cuteness even though it's implied just",
    "start": "1446799",
    "end": "1452720"
  },
  {
    "text": "to show you that i can do that cool and then in some main file i can say",
    "start": "1452720",
    "end": "1458080"
  },
  {
    "text": "import animal dog from animal i don't have to say dotius",
    "start": "1458080",
    "end": "1463520"
  },
  {
    "text": "so they're in the same folder i can then make a steve and i can print out steve",
    "start": "1463520",
    "end": "1468960"
  },
  {
    "text": "and maybe you can see that animal is maybe a slightly different color than dog right",
    "start": "1468960",
    "end": "1475039"
  },
  {
    "text": "because we don't use animal so it's an unused definition so we don't actually have to",
    "start": "1475039",
    "end": "1480640"
  },
  {
    "text": "import it and you can make it fail when that happens so that's one of the compiler flags you can say like hey don't let me",
    "start": "1480640",
    "end": "1487120"
  },
  {
    "text": "do this but you can you can also do this this is handy when importing from some",
    "start": "1487120",
    "end": "1492480"
  },
  {
    "text": "javascript libraries or when there's a naming clash so you're kind of name spacing the thing",
    "start": "1492480",
    "end": "1498559"
  },
  {
    "text": "so i can say oh yeah and i forgot to mention there's an export oh here we go",
    "start": "1498559",
    "end": "1503679"
  },
  {
    "text": "there's an export in front of the interface and the class if you didn't notice that that's where",
    "start": "1503679",
    "end": "1508799"
  },
  {
    "text": "i'm getting it so i can say import everything as animal so whatever is it export it here i want",
    "start": "1508799",
    "end": "1515360"
  },
  {
    "text": "that in the animal namespace so now i have to say newanimal.doc there's also a way to default export so",
    "start": "1515360",
    "end": "1522799"
  },
  {
    "text": "so if you don't say anything you'll get it anyway because that's always exported as useful sometimes as well you might",
    "start": "1522799",
    "end": "1529360"
  },
  {
    "text": "have seen that in the talk previously default exported everything cool so",
    "start": "1529360",
    "end": "1536159"
  },
  {
    "text": "like i mentioned before javascript is typescript and typescript doesn't exist at one time",
    "start": "1536159",
    "end": "1542400"
  },
  {
    "text": "so that means that there are no typescript specific containers and i put an asterisk because there's a couple of",
    "start": "1542400",
    "end": "1548480"
  },
  {
    "text": "weird corner cases but i'm not going to go into them because if there were types",
    "start": "1548480",
    "end": "1553919"
  },
  {
    "text": "typescript specific containers when you then convert it into javascript you would have to have the implementation",
    "start": "1553919",
    "end": "1558960"
  },
  {
    "text": "there of those containers in the javascript you have to put them somewhere maybe there is no place to put them",
    "start": "1558960",
    "end": "1564720"
  },
  {
    "text": "because it's used everywhere so where should you put them so maybe so it's all the hours get",
    "start": "1564720",
    "end": "1571200"
  },
  {
    "text": "containers but you have all of them are a map set etc but the differences",
    "start": "1571200",
    "end": "1577120"
  },
  {
    "text": "from from cpr plus is that the algorithms we know they're within the container",
    "start": "1577120",
    "end": "1582720"
  },
  {
    "text": "so you can say if i have the names of dogs i have steve solo max and buddy",
    "start": "1582720",
    "end": "1589039"
  },
  {
    "text": "and i know that uh i only want the short names so i say dog names dot filter and i can send in an",
    "start": "1589039",
    "end": "1595200"
  },
  {
    "text": "arrow notated function it wants one argument and i say return if name is",
    "start": "1595200",
    "end": "1600799"
  },
  {
    "text": "less than five so when i get a new a new array of short names and i only get solo and max",
    "start": "1600799",
    "end": "1607360"
  },
  {
    "text": "all right good all right",
    "start": "1607360",
    "end": "1612799"
  },
  {
    "text": "good stuff so are we on time good good good good",
    "start": "1612799",
    "end": "1618159"
  },
  {
    "text": "let's go into advanced typescript who's ready so now we've seen like the language is",
    "start": "1618159",
    "end": "1623360"
  },
  {
    "text": "generally fine it's like has the features that you have it's generally seen in that way",
    "start": "1623360",
    "end": "1628880"
  },
  {
    "text": "so things are behaving as we would expect but let's take a tour of the type system",
    "start": "1628880",
    "end": "1634880"
  },
  {
    "text": "so typescript uses a thing called structural type system or sometimes called type compatibility i haven't seen",
    "start": "1634880",
    "end": "1640080"
  },
  {
    "text": "that before but i stole that other places a tldr of structural typing and you'll",
    "start": "1640080",
    "end": "1647039"
  },
  {
    "text": "see example but it's the if it looks like a duck and cracks like a duck let's take that idea pretty",
    "start": "1647039",
    "end": "1652240"
  },
  {
    "text": "literally that's kind of a tl tier of what that means typescript also sacrifices what's called",
    "start": "1652240",
    "end": "1658640"
  },
  {
    "text": "soundness and i can show you an example of that in a bit but for those who are into type theory",
    "start": "1658640",
    "end": "1664080"
  },
  {
    "text": "know about that so let's do examples all right",
    "start": "1664080",
    "end": "1669120"
  },
  {
    "text": "so i have a fruit a fruit has a weight in grams in a name great",
    "start": "1669120",
    "end": "1674399"
  },
  {
    "text": "i would like to make an orange an orange has a weight 140 grams and it's called the navel orange good",
    "start": "1674399",
    "end": "1681679"
  },
  {
    "text": "also i like to make an apple object an apple object has 70 and a certain name granny smith and it has a red color",
    "start": "1681679",
    "end": "1688559"
  },
  {
    "text": "and you can see that i haven't inherited anything right so",
    "start": "1688559",
    "end": "1693919"
  },
  {
    "text": "i have a function that says takes a fruit and returns if it's a if it's",
    "start": "1693919",
    "end": "1699039"
  },
  {
    "text": "heavier than 100 grams then i then i decide that it's a heavy fruit all right that's just what i have",
    "start": "1699039",
    "end": "1705120"
  },
  {
    "text": "decided but i can send in a new orange and i can also send in apple",
    "start": "1705120",
    "end": "1710960"
  },
  {
    "text": "and that is because orange and apple satisfy the interface",
    "start": "1710960",
    "end": "1717600"
  },
  {
    "text": "that's similar to if you've written in go go has something like that so because orange has weight an apple",
    "start": "1717600",
    "end": "1725039"
  },
  {
    "text": "has weight and the only thing we need in this heavy is weight we're happy this is fine",
    "start": "1725039",
    "end": "1730960"
  },
  {
    "text": "i can even do this where fruit isn't the type i make up a",
    "start": "1730960",
    "end": "1736240"
  },
  {
    "text": "type on the spot so i say i want an object that has a weight of type number",
    "start": "1736240",
    "end": "1743200"
  },
  {
    "text": "so i just put that in that's fine now i wouldn't need actually the interface i can also",
    "start": "1743200",
    "end": "1749600"
  },
  {
    "text": "save it i make a fruit weight which is a weight and then i require fruit weight so again",
    "start": "1749600",
    "end": "1755120"
  },
  {
    "text": "the interface isn't there because i know what i need so that's pretty neat",
    "start": "1755120",
    "end": "1762799"
  },
  {
    "text": "let's have more fun with this let's make an interface called name there is a name which is a string",
    "start": "1764159",
    "end": "1769760"
  },
  {
    "text": "and then i have an interface weight so there are two different things i can then add them together",
    "start": "1769760",
    "end": "1776960"
  },
  {
    "text": "to make fruit weight so now fruit weight is an object or an interface if you want to think of",
    "start": "1776960",
    "end": "1782960"
  },
  {
    "text": "it that way that includes name and weight so now we have a new thing",
    "start": "1782960",
    "end": "1788960"
  },
  {
    "text": "that looks like the stuff from a previous slide and i just made that up on the spot there",
    "start": "1788960",
    "end": "1794799"
  },
  {
    "text": "and i could have made that wherever so now my heavy function can take root weight",
    "start": "1794799",
    "end": "1801520"
  },
  {
    "text": "and i i just used name as well to test that out but you can see now we need to have",
    "start": "1801520",
    "end": "1807200"
  },
  {
    "text": "more than 100 grams and needs to have some text in its its length and i can even",
    "start": "1807200",
    "end": "1813360"
  },
  {
    "text": "do this fruit or weight so now it's either a name or a weight",
    "start": "1813360",
    "end": "1820640"
  },
  {
    "text": "and where would that be useful well let's again look at this it's the same",
    "start": "1820640",
    "end": "1826240"
  },
  {
    "text": "as before i have a name and a weight i have root weight which is both name and weight same as before",
    "start": "1826240",
    "end": "1832960"
  },
  {
    "text": "and now i have an is heavy maybe not the best name for it but it's heavy it takes in fruit weight but we",
    "start": "1832960",
    "end": "1839840"
  },
  {
    "text": "return weight or null all right so we're either going to",
    "start": "1839840",
    "end": "1845039"
  },
  {
    "text": "return a weight object or a null and see what i'm doing here i'm asking",
    "start": "1845039",
    "end": "1851120"
  },
  {
    "text": "the same question and if it fails or it's the opposite flip of it if it's less than or if it has a empty weight i",
    "start": "1851120",
    "end": "1857760"
  },
  {
    "text": "return null or i return fruit but notice what's happening with fruit fruit was fruit",
    "start": "1857760",
    "end": "1863200"
  },
  {
    "text": "weight when it came in but it's weight when it came out so i've narrowed the interface",
    "start": "1863200",
    "end": "1869440"
  },
  {
    "text": "when it comes out even though it's the same object or even some other object i could have sent in granny's myth from",
    "start": "1869440",
    "end": "1874559"
  },
  {
    "text": "before which had a lot of other stuff but i've narrowed if you think about the view of within whatever this object is",
    "start": "1874559",
    "end": "1883360"
  },
  {
    "text": "then i can send in orange and i can send it in on the spot okay i make an object because object is just a first class",
    "start": "1883440",
    "end": "1890080"
  },
  {
    "text": "citizen if you think of it that way so i sent it as an orange it has 200 in weight so now is",
    "start": "1890080",
    "end": "1896000"
  },
  {
    "text": "fruit is either weight or null which matches with its heavy definition the return value",
    "start": "1896000",
    "end": "1903120"
  },
  {
    "text": "i can then check if fruit is not null i would like to print out the weight",
    "start": "1903120",
    "end": "1908960"
  },
  {
    "text": "so now the question becomes what's the type of fruit within the scope",
    "start": "1908960",
    "end": "1915039"
  },
  {
    "text": "it's weight because i have again narrowed",
    "start": "1915039",
    "end": "1920720"
  },
  {
    "text": "what's happening here i know that it's not going to be null it was either weight or null i did a",
    "start": "1920720",
    "end": "1926559"
  },
  {
    "text": "check is it null no within the scope so now within the scope i've again narrowed that i know the",
    "start": "1926559",
    "end": "1932960"
  },
  {
    "text": "thing i have here in my hands is weight and nothing else and i could have sent in the granny smith thing from before",
    "start": "1932960",
    "end": "1939200"
  },
  {
    "text": "and it will still be fine so i can mention soundness here because",
    "start": "1939200",
    "end": "1947200"
  },
  {
    "text": "within this scope i have guaranteed that it's not null but there are ways for you to mess with",
    "start": "1947200",
    "end": "1954080"
  },
  {
    "text": "this you could have called the function and then also added another specifier to the type before you",
    "start": "1954080",
    "end": "1961200"
  },
  {
    "text": "called control log so you can mess with this so it's not it's not foolproof",
    "start": "1961200",
    "end": "1967120"
  },
  {
    "text": "but going through it like this it's pretty neat that you can do this another thing is",
    "start": "1967120",
    "end": "1974240"
  },
  {
    "text": "a type doesn't have to be an abstract idea it can actually be values",
    "start": "1974240",
    "end": "1980320"
  },
  {
    "text": "like an enum and here i have fruit names i only want apples oranges or pears",
    "start": "1980320",
    "end": "1988080"
  },
  {
    "text": "so think of that as a type this type is those three strings so if we have",
    "start": "1988080",
    "end": "1994480"
  },
  {
    "text": "the name is now now going to be fruit names not string because i only want those",
    "start": "1994480",
    "end": "2001279"
  },
  {
    "text": "same as before i take in fruit weight i return weight but now when i'm creating the object",
    "start": "2001279",
    "end": "2008720"
  },
  {
    "text": "there i get an autocomplete because we know that",
    "start": "2008720",
    "end": "2014320"
  },
  {
    "text": "the name can only be apple orange repair so we can have that strictness that because we always have this idea that",
    "start": "2014320",
    "end": "2020640"
  },
  {
    "text": "it's a string it could be anything how can you check it but we know it's always going to be tcp or utp right or something it's not",
    "start": "2020640",
    "end": "2028000"
  },
  {
    "text": "going to be anything else and generally it isn't anything else we might have some checks for it but what if you say like no it's going to be",
    "start": "2028000",
    "end": "2033760"
  },
  {
    "text": "this thing and this thing alone and if it's anything else it's not going to work",
    "start": "2033760",
    "end": "2038880"
  },
  {
    "text": "cool so let's talk about const real quick that's my time",
    "start": "2038880",
    "end": "2044840"
  },
  {
    "text": "fine so how it functions in typescript in our script is a little different from people first",
    "start": "2044840",
    "end": "2051679"
  },
  {
    "text": "we have language features that will give us similar results but they again also will behave differently",
    "start": "2051679",
    "end": "2057599"
  },
  {
    "text": "so this is probably the only example that will behave like we think it will behave",
    "start": "2057599",
    "end": "2062878"
  },
  {
    "text": "which is sad going forward but learning const here like this is yeah no this is not going to work red",
    "start": "2062879",
    "end": "2069200"
  },
  {
    "text": "squiggly you can't change the value to something else good so this is fine",
    "start": "2069200",
    "end": "2075839"
  },
  {
    "text": "here i'm going to create a mountain and the mountain has a height good i'm going to create everest which is",
    "start": "2075839",
    "end": "2081839"
  },
  {
    "text": "8849 meters great and then i would like to change the height of everest so even though i have",
    "start": "2081839",
    "end": "2087760"
  },
  {
    "text": "a const everest i can still change the height because everest the mountain is const",
    "start": "2087760",
    "end": "2094079"
  },
  {
    "text": "the height within the mountain is not const so it doesn't propagate that way if you think of it that way",
    "start": "2094079",
    "end": "2100839"
  },
  {
    "text": "okay what about arrays and here i have a bunch of mountain heights and bonus points if you know the other",
    "start": "2100839",
    "end": "2107520"
  },
  {
    "text": "two so i have eight eight four nine as the first one and the array is const",
    "start": "2107520",
    "end": "2114800"
  },
  {
    "text": "not the values within the array so i can change everest back to nine thousand",
    "start": "2114800",
    "end": "2121200"
  },
  {
    "text": "so that's not going to work because the array is cost i couldn't add the value to the array but i can modify stuff",
    "start": "2121200",
    "end": "2127440"
  },
  {
    "text": "within it and the type of this is it's an array of numbers that's the type that's happening",
    "start": "2127440",
    "end": "2133440"
  },
  {
    "text": "here all right so to change this i have to say that the height within",
    "start": "2133440",
    "end": "2139760"
  },
  {
    "text": "mountain is read-only so now it will behave like you think but we've",
    "start": "2139760",
    "end": "2145680"
  },
  {
    "text": "now put that constraint that a height within a mountain is read only on the type",
    "start": "2145680",
    "end": "2151920"
  },
  {
    "text": "so now mountain height is always read-only which might make sense but that's that's now a constraint you have which",
    "start": "2151920",
    "end": "2158079"
  },
  {
    "text": "you might not want to have and this is the weird one so you have const mountain heights",
    "start": "2158079",
    "end": "2164560"
  },
  {
    "text": "the array as const all right and now you can't change it",
    "start": "2164560",
    "end": "2170720"
  },
  {
    "text": "because what's happening here is you don't have an array of numbers anymore you have an array of a read-only set of",
    "start": "2170720",
    "end": "2177839"
  },
  {
    "text": "these values and nothing else so the type also changed",
    "start": "2177839",
    "end": "2183040"
  },
  {
    "text": "right but that also means that if you use this like we did with the oranges and you use",
    "start": "2183040",
    "end": "2189920"
  },
  {
    "text": "a different number you say like oh we need the mountain heights we need this type to go into the array because these",
    "start": "2189920",
    "end": "2195839"
  },
  {
    "text": "are the only mountains and you put some other number that's again going to fail because we only have these types",
    "start": "2195839",
    "end": "2202880"
  },
  {
    "text": "all right so and then typescript has a collection of utility types so these are generic",
    "start": "2202880",
    "end": "2209440"
  },
  {
    "text": "classes that provide specific features most of these will take your type and then transform it in some way do some",
    "start": "2209440",
    "end": "2216320"
  },
  {
    "text": "fun stuff with it so if we have the mountain that i'm in the height like before and i want the",
    "start": "2216320",
    "end": "2222640"
  },
  {
    "text": "height to be immutable and also the name i can ask for a wheat only mountain",
    "start": "2222640",
    "end": "2229520"
  },
  {
    "text": "but then again that's another type so mountain and read only mountain are not the same so now we have a reed only off",
    "start": "2229520",
    "end": "2235119"
  },
  {
    "text": "mountain if you think of it that way so now when i want to change everest it doesn't work",
    "start": "2235119",
    "end": "2240480"
  },
  {
    "text": "because what it did was it took all the members that were there which weren't read-only and made them read only and",
    "start": "2240480",
    "end": "2246640"
  },
  {
    "text": "there are more of these to make them optional or or yeah do other fun stuff with them",
    "start": "2246640",
    "end": "2252640"
  },
  {
    "text": "you can also do this let's say that you have a legacy system where the new type of user is some registered",
    "start": "2252640",
    "end": "2258560"
  },
  {
    "text": "user but you also have some old system where a user could be a string or a number or whatever",
    "start": "2258560",
    "end": "2264000"
  },
  {
    "text": "but then so a user is either a registered user or the legacy user which is doing a number so you have some",
    "start": "2264000",
    "end": "2270720"
  },
  {
    "text": "backwards compatibility but for some reason the only only valid user is a user without the legacy user",
    "start": "2270720",
    "end": "2279040"
  },
  {
    "text": "so you can actually remove it from user so if someone changes things on the way",
    "start": "2279040",
    "end": "2286320"
  },
  {
    "text": "your thing is still valid because if someone changes user or registers or whatever you just know that",
    "start": "2286320",
    "end": "2293200"
  },
  {
    "text": "a valid user is whatever user said but without the legacy",
    "start": "2293200",
    "end": "2299119"
  },
  {
    "text": "so in this case it's only registered but it could be more complex if you've now removed a thing",
    "start": "2299119",
    "end": "2304320"
  },
  {
    "text": "from from the the little pipe",
    "start": "2304320",
    "end": "2309839"
  },
  {
    "text": "all right that's kind of neat so let's do a more complex example so",
    "start": "2309839",
    "end": "2314960"
  },
  {
    "text": "this is actually because i wanted to use the typescript documentation this is from the documentation from one of them",
    "start": "2314960",
    "end": "2321839"
  },
  {
    "text": "and i've removed some edge case checking to make it a nice versus slide code so let's say that there's a thing called",
    "start": "2321839",
    "end": "2328400"
  },
  {
    "text": "an object descriptor that has an object called data of type d an object of",
    "start": "2328400",
    "end": "2335520"
  },
  {
    "text": "methods called m and i would like to make an object and i have i'm a templated function or generic",
    "start": "2335520",
    "end": "2342800"
  },
  {
    "text": "function of dnm i take an object interceptor but i return a type of the combined dnm",
    "start": "2342800",
    "end": "2350240"
  },
  {
    "text": "whatever those two objects are and again think of objects as those curly braced objects",
    "start": "2350240",
    "end": "2356640"
  },
  {
    "text": "i just extract them just so i have it nicer and this is going to be some weird syntax but i'll explain what it means",
    "start": "2356640",
    "end": "2363920"
  },
  {
    "text": "what this means is data is an object it has some of those members like we had before like the the name and the weight",
    "start": "2363920",
    "end": "2370640"
  },
  {
    "text": "and all that and it will just expand that into so i will get a new object which is the",
    "start": "2370640",
    "end": "2377680"
  },
  {
    "text": "curly brace after the return that contains the members of data and methods so i took those two objects and combined",
    "start": "2377680",
    "end": "2384720"
  },
  {
    "text": "them and just they're two members of the same object so if object a had members",
    "start": "2384720",
    "end": "2391040"
  },
  {
    "text": "one and two and object b had numbers three and four this one has one two three four so i've just combined them",
    "start": "2391040",
    "end": "2397040"
  },
  {
    "text": "right and i call that the dnm so i when i make object of these two separate objects i",
    "start": "2397040",
    "end": "2403520"
  },
  {
    "text": "have a new new object of all of them that's the only thing it's doing",
    "start": "2403520",
    "end": "2409040"
  },
  {
    "text": "so let's make that object so i sent in an object that has data data is the x and y variables that's that's d",
    "start": "2409040",
    "end": "2416960"
  },
  {
    "text": "d is then x and y methods m is just one function let's call it move",
    "start": "2416960",
    "end": "2422960"
  },
  {
    "text": "by that's the only thing it has so on object i can say object x is 10",
    "start": "2422960",
    "end": "2429119"
  },
  {
    "text": "object y is 20 object move by so now i've taken these two separate",
    "start": "2429119",
    "end": "2435119"
  },
  {
    "text": "objects data and methods and combine them into one all right",
    "start": "2435119",
    "end": "2440640"
  },
  {
    "text": "so i have this function i have this data this is useful if if you provide the data in your library",
    "start": "2440640",
    "end": "2447839"
  },
  {
    "text": "but your users provide the functions they write the functions on the data that you provided so you can provide the data",
    "start": "2447839",
    "end": "2453520"
  },
  {
    "text": "make the methods thing empty they can add methods so that's kind of nice for that all right",
    "start": "2453520",
    "end": "2459200"
  },
  {
    "text": "okay so let's implement move by right good stuff this dot",
    "start": "2459200",
    "end": "2464800"
  },
  {
    "text": "doesn't work because if i say this dot i only get move by i don't get x and y",
    "start": "2464800",
    "end": "2471280"
  },
  {
    "text": "and you might think but wait we're combining them well not yet this is before make object is called",
    "start": "2471280",
    "end": "2477839"
  },
  {
    "text": "so we're still outside of all this the methods is type m",
    "start": "2477839",
    "end": "2483280"
  },
  {
    "text": "so if this method is type m we don't have access to members in type d yet",
    "start": "2483280",
    "end": "2489280"
  },
  {
    "text": "so there's a feature for this so that's one of the utility types you can say that in if you look at line three",
    "start": "2489280",
    "end": "2495119"
  },
  {
    "text": "method is m and the this type of m and d that's another utility one",
    "start": "2495119",
    "end": "2501599"
  },
  {
    "text": "so now when you say this dot you have access to all of them because the type of this is no longer whatever it was to",
    "start": "2501599",
    "end": "2508880"
  },
  {
    "text": "buy before it is amanda d so you can play with this stuff so now i",
    "start": "2508880",
    "end": "2514000"
  },
  {
    "text": "can go and implement movement fancy i want to have one fancy one according",
    "start": "2514000",
    "end": "2519760"
  },
  {
    "text": "to all the small ones all right good so",
    "start": "2519760",
    "end": "2526079"
  },
  {
    "text": "second to last thing there's a lot of average gift libraries out there as you saw that",
    "start": "2526240",
    "end": "2531440"
  },
  {
    "text": "this environment has been here for a while they can be installed with npm and useful with typescript but typescript",
    "start": "2531440",
    "end": "2537920"
  },
  {
    "text": "also wants to let you use these libraries safely so there's a thing called typescript",
    "start": "2537920",
    "end": "2543599"
  },
  {
    "text": "declaration file dot dot ts so what this is is basically like a header file",
    "start": "2543599",
    "end": "2549280"
  },
  {
    "text": "if you think of that like that it's a header file for something else that's a nice way to explain it to you",
    "start": "2549280",
    "end": "2555359"
  },
  {
    "text": "all right so if i have a javascript so this is now just a javascript",
    "start": "2555359",
    "end": "2560400"
  },
  {
    "text": "file i have get cuteness i have animal animal dot cuteness there's no type safety we",
    "start": "2560400",
    "end": "2565680"
  },
  {
    "text": "have no idea what's going on here and javascript is completely happy with this this export starts this is one way of",
    "start": "2565680",
    "end": "2572079"
  },
  {
    "text": "exporting a function there are many other ways but this was kind of the simplest one to show you so",
    "start": "2572079",
    "end": "2577359"
  },
  {
    "text": "there's an xbox object i make a member called get cuteness and i say that that's the same function so",
    "start": "2577359",
    "end": "2583359"
  },
  {
    "text": "that's kind of a weird that's like this xbox thing and then i'm just attaching it to it all right",
    "start": "2583359",
    "end": "2589040"
  },
  {
    "text": "and then i create a d.t.s where i create the interface like i did before and i create the",
    "start": "2589040",
    "end": "2596079"
  },
  {
    "text": "function header and i say you can send it an animal and it will return a number what it does",
    "start": "2596079",
    "end": "2602000"
  },
  {
    "text": "we don't know but here's a function so now in my typescript file",
    "start": "2602000",
    "end": "2608560"
  },
  {
    "text": "i can import animal and get cuteness from cuteness so see i'm not importing it from the dps",
    "start": "2608560",
    "end": "2616160"
  },
  {
    "text": "i'm importing it from the javascript file and i'm getting",
    "start": "2616160",
    "end": "2621920"
  },
  {
    "text": "the types exported out it's actually mixing the posts and doing some some fun things",
    "start": "2621920",
    "end": "2628079"
  },
  {
    "text": "which is why you don't say dot ts or dot das after that so there's some some magic that's happening here",
    "start": "2628079",
    "end": "2634720"
  },
  {
    "text": "but now i can make steve it's no longer a function i just made it a variable it has a value t",
    "start": "2634720",
    "end": "2641520"
  },
  {
    "text": "and now if a mouse over get cuteness which in my brain is the hourglass function i get the full type save thing",
    "start": "2641520",
    "end": "2649200"
  },
  {
    "text": "and if i do it wrong it will warn me say like hey you're doing this wrong so someone that has a well-known big",
    "start": "2649200",
    "end": "2656800"
  },
  {
    "text": "javascript library they can give you a dts file and now you have a",
    "start": "2656800",
    "end": "2663040"
  },
  {
    "text": "type save interface towards that library and there's actually a project called definitely typed on",
    "start": "2663040",
    "end": "2669200"
  },
  {
    "text": "github and the only thing it has is just nothing but the ts files and you can do",
    "start": "2669200",
    "end": "2675119"
  },
  {
    "text": "an npm install so if you install like let's say my mysql library you can then",
    "start": "2675119",
    "end": "2680640"
  },
  {
    "text": "install the types for the mysql library and some of them will actually come with the dts files",
    "start": "2680640",
    "end": "2687680"
  },
  {
    "text": "so now we have this existing set of libraries that you can also be type safe",
    "start": "2687680",
    "end": "2693280"
  },
  {
    "text": "on top of which is pretty nice okay let me see the time wonderful",
    "start": "2693280",
    "end": "2699280"
  },
  {
    "text": "so summary you've gone over the history of javascript we looked at the environment and the",
    "start": "2699280",
    "end": "2705520"
  },
  {
    "text": "problems that exist with the language before we've seen what problems typescript is trying to solve",
    "start": "2705520",
    "end": "2711359"
  },
  {
    "text": "again it's not perfect but they're trying their best we've seen typescript features like classes and",
    "start": "2711359",
    "end": "2717040"
  },
  {
    "text": "functions gone over const and some utility types",
    "start": "2717040",
    "end": "2722240"
  },
  {
    "text": "looked at structural type systems and declaration files good but",
    "start": "2722240",
    "end": "2728319"
  },
  {
    "text": "so let's think about this for a minute we have an old standard driven language",
    "start": "2728319",
    "end": "2735520"
  },
  {
    "text": "that has perceived complexity and quirks attempts to fix it with other languages",
    "start": "2735520",
    "end": "2742319"
  },
  {
    "text": "or static analysis an immense backlog of libraries and",
    "start": "2742319",
    "end": "2747520"
  },
  {
    "text": "backward compatibility concerns headers towards old languages to",
    "start": "2747520",
    "end": "2753200"
  },
  {
    "text": "increase the safety and allow users of libraries from the old language and the old language has features that",
    "start": "2753200",
    "end": "2760240"
  },
  {
    "text": "are not well desired in the new language so methods are used to replace them with other features or options or even",
    "start": "2760240",
    "end": "2766640"
  },
  {
    "text": "abilities to turn them off does it sound familiar to a couple of people here",
    "start": "2766640",
    "end": "2772240"
  },
  {
    "text": "they go no no not us right they even have their own golf balls i mean compiler explorer",
    "start": "2772240",
    "end": "2779040"
  },
  {
    "text": "so on their website you can just type in typescript and you'll get the output out just to see what's happening",
    "start": "2779040",
    "end": "2784400"
  },
  {
    "text": "they're doing the same thing there as well yes so",
    "start": "2784400",
    "end": "2790319"
  },
  {
    "text": "this talk was a trick zebrafish can actually learn a lot from",
    "start": "2790319",
    "end": "2795520"
  },
  {
    "text": "what's happening here not only with regards to the relationship with c like you thought it",
    "start": "2795520",
    "end": "2800800"
  },
  {
    "text": "is but going forwards as well so we have changed a lot in the past",
    "start": "2800800",
    "end": "2806400"
  },
  {
    "text": "like we have tried to improve uh we've improved our tooling and helped to to add features to remove many of the",
    "start": "2806400",
    "end": "2813359"
  },
  {
    "text": "quirks but the quirks are still there and they're probably not going to go away right",
    "start": "2813359",
    "end": "2820880"
  },
  {
    "text": "so imagine another language let's call it c plus 2 or something where you would write the language that is then turned",
    "start": "2820880",
    "end": "2827040"
  },
  {
    "text": "into c plus right or even just enhance static analysis",
    "start": "2827040",
    "end": "2832800"
  },
  {
    "text": "that would do this for you so you could then turn off certain language features or or structure the language where old",
    "start": "2832800",
    "end": "2838720"
  },
  {
    "text": "idiomatic behaviors wouldn't be there anymore so just an idea",
    "start": "2838720",
    "end": "2844480"
  },
  {
    "text": "right imagine if you could turn off in a initial leisure list right they're just not there they don't work",
    "start": "2844480",
    "end": "2850559"
  },
  {
    "text": "they don't do the thing you do but then you just get super pressed out right food for thought",
    "start": "2850559",
    "end": "2857440"
  },
  {
    "text": "this is me please help me on twitter thank you [Applause]",
    "start": "2857440",
    "end": "2866480"
  },
  {
    "text": "questions comments thoughts ted talks wow that was that clear",
    "start": "2866480",
    "end": "2873440"
  },
  {
    "text": "all right thank you that's a great question yeah go for it uh in what situation would you say",
    "start": "2873440",
    "end": "2881599"
  },
  {
    "text": "type good as a language excels other languages",
    "start": "2881599",
    "end": "2887240"
  },
  {
    "text": "it's it's it's languages that have to then target the javascript runtime environment",
    "start": "2887599",
    "end": "2895040"
  },
  {
    "text": "because that's kind of what typescript is focusing on",
    "start": "2895040",
    "end": "2899720"
  },
  {
    "text": "yeah that's a tricky question i would have to think about that more because there are features because the main issue here is that the",
    "start": "2900079",
    "end": "2907280"
  },
  {
    "text": "language is uh kind of bound to this other language like with with c and c",
    "start": "2907280",
    "end": "2912480"
  },
  {
    "text": "plus so we have to inherit their quirks and then behaviors so typescript is kinda",
    "start": "2912480",
    "end": "2918880"
  },
  {
    "text": "the the negative side of it is that but then the benefit is is all this extra nicety",
    "start": "2918880",
    "end": "2924559"
  },
  {
    "text": "so i would actually say i don't know them yeah so maybe you have the library or",
    "start": "2924559",
    "end": "2932079"
  },
  {
    "text": "you have a library or typescript or javascript you want to run then type is",
    "start": "2932079",
    "end": "2939760"
  },
  {
    "text": "what are you going for yeah yeah the idea is that what if you have a library javascript script i would",
    "start": "2939760",
    "end": "2946640"
  },
  {
    "text": "if i'm working within this environment if i'm making [Music] web pages or in some cases a pretty",
    "start": "2946640",
    "end": "2954160"
  },
  {
    "text": "lightweight servers i would always uh grab towards typecart because you get the benefits of both",
    "start": "2954160",
    "end": "2961119"
  },
  {
    "text": "some people are purists that want to go to javascript but that's fine i would always tend towards typescript",
    "start": "2961119",
    "end": "2967440"
  },
  {
    "text": "and i think it's pretty pretty nice there's a thing that like i haven't covered like which you might not know about javascript javascript is",
    "start": "2967440",
    "end": "2974240"
  },
  {
    "text": "included most mostly there is a thing to do there's a way to do multi-threaded but that's within node.js",
    "start": "2974240",
    "end": "2980640"
  },
  {
    "text": "so the whole language is single threaded so the whole locking and all that stuff doesn't happen but you still have async",
    "start": "2980640",
    "end": "2986079"
  },
  {
    "text": "and promises pretty well supported in the language so you can actually just write an async",
    "start": "2986079",
    "end": "2991119"
  },
  {
    "text": "function to do something and then somewhere else you could just say i wait and get the value and there's no cost",
    "start": "2991119",
    "end": "2996880"
  },
  {
    "text": "which is like i want in zebra plus but maybe we won't get there",
    "start": "2996880",
    "end": "3002480"
  },
  {
    "text": "sure all good",
    "start": "3002480",
    "end": "3007520"
  },
  {
    "text": "then have a lovely day",
    "start": "3007520",
    "end": "3010960"
  }
]