[
  {
    "text": "let's do this let's do this the way you're used to hello everybody I'm Nick I'm in this",
    "start": "1439",
    "end": "7799"
  },
  {
    "text": "video that's the easiest joke I keep making it for the first two years you're all",
    "start": "7799",
    "end": "13559"
  },
  {
    "text": "laughing so you're to blame hello everyone how are you doing second day of NDC",
    "start": "13559",
    "end": "19380"
  },
  {
    "text": "can I have a hell yeah nice you're awake yeah I don't know how you're gonna be",
    "start": "19380",
    "end": "25439"
  },
  {
    "text": "after lunch but for now you're good awesome so yeah let's go straight into this",
    "start": "25439",
    "end": "31560"
  },
  {
    "text": "topic which is a very interesting topic for me logging and I want to talk about",
    "start": "31560",
    "end": "36660"
  },
  {
    "text": "the title a bit but before I do that just in case you don't know me hey I'm Nick oh wow I can see your faces now",
    "start": "36660",
    "end": "44160"
  },
  {
    "text": "that's nice um I make YouTube videos I'm a bunch of other things and I have a podcast",
    "start": "44160",
    "end": "50039"
  },
  {
    "text": "because I just in 30 and that's uh mandatory and I also run a platform called Dome",
    "start": "50039",
    "end": "56160"
  },
  {
    "text": "train where I sell my own courses if you want to master any of those topics I talk about you can check that out",
    "start": "56160",
    "end": "62820"
  },
  {
    "text": "now actually wait a second how many of you know me from YouTube show of hands those",
    "start": "62820",
    "end": "68820"
  },
  {
    "text": "of you who did not raise your hands take out your phone now and subscribe now",
    "start": "68820",
    "end": "75619"
  },
  {
    "text": "uh it's free and it makes me feel nice so okay enough with the cell outside",
    "start": "75619",
    "end": "81840"
  },
  {
    "text": "promotion let's go straight into the topic um and I want to talk about the title for a second because",
    "start": "81840",
    "end": "88200"
  },
  {
    "text": "if you were studying my videos if all of you have um you know one thing about me",
    "start": "88200",
    "end": "93540"
  },
  {
    "text": "I'm a bit of a I don't want to say clickbaiter but I'm pushing it is what I'm trying to",
    "start": "93540",
    "end": "99659"
  },
  {
    "text": "say so me being here and saying hey you know you're doing it wrong how how do I",
    "start": "99659",
    "end": "107280"
  },
  {
    "text": "know that you are doing this thing wrong and I'll take a bit of a story I was a couple of weeks ago actually I was in",
    "start": "107280",
    "end": "114840"
  },
  {
    "text": "Romania and there was this keynote in a different conference called.net days",
    "start": "114840",
    "end": "119939"
  },
  {
    "text": "where Rachel Apple worked for jet brain is great speaker she had this talk about dog patterns and",
    "start": "119939",
    "end": "127380"
  },
  {
    "text": "how people want you to click on things and try to convert and she was talking about uh you know all they will not",
    "start": "127380",
    "end": "133260"
  },
  {
    "text": "allow you to cancel your subscription and so on or Click by the titles in general in videos and I thought that",
    "start": "133260",
    "end": "140280"
  },
  {
    "text": "this slide would actually turn to something like this wait which you know it's pushing it but",
    "start": "140280",
    "end": "147420"
  },
  {
    "text": "um if you have to know one thing about clickbait is that it actually works pretty pretty well so don't hate the",
    "start": "147420",
    "end": "153420"
  },
  {
    "text": "player hit the game um and obviously this full room so we're all here to talk about logging",
    "start": "153420",
    "end": "160020"
  },
  {
    "text": "and one thing I have to make very very clear is that other than just a few",
    "start": "160020",
    "end": "165420"
  },
  {
    "text": "things there is not so much in this talk that is actually opinionated some of",
    "start": "165420",
    "end": "170519"
  },
  {
    "text": "those things are actually factually wrong it's not that I think it should be done a certain way and you're doing it",
    "start": "170519",
    "end": "175800"
  },
  {
    "text": "another way it is that that's how you should do it and if you don't do it that way you want to have an issue in your",
    "start": "175800",
    "end": "182099"
  },
  {
    "text": "code and when I do mention an opinion I will say that this is an opinion you don't have to listen to me what do I know",
    "start": "182099",
    "end": "188280"
  },
  {
    "text": "anyway so let's talk about what this talk is not about",
    "start": "188280",
    "end": "196459"
  },
  {
    "text": "this stock is not about any of this so as I'm gonna show loggers I want you to",
    "start": "197580",
    "end": "202620"
  },
  {
    "text": "raise your hands if you've used are using or know the following privileges locally anyone knows what that is yeah",
    "start": "202620",
    "end": "209819"
  },
  {
    "text": "okay not so popular uh SEC okay more hands here how about Cloud watch cloudws",
    "start": "209819",
    "end": "216780"
  },
  {
    "text": "okay how about application insights Azure am I right Microsoft yeah",
    "start": "216780",
    "end": "223500"
  },
  {
    "text": "you sell out how about this one data dog you guys",
    "start": "223500",
    "end": "229140"
  },
  {
    "text": "have money you yeah you don't pay the bill on this",
    "start": "229140",
    "end": "234319"
  },
  {
    "text": "I I would have a joke about gcp but I don't I don't think anybody uses gcp so",
    "start": "234480",
    "end": "239519"
  },
  {
    "text": "I'm just gonna skip that so it's not about any of these Services which you know I'm taking the piss out",
    "start": "239519",
    "end": "246659"
  },
  {
    "text": "of them but uh they're all great at least three of them are",
    "start": "246659",
    "end": "253640"
  },
  {
    "text": "it's about this really this talk is about the code you write your own code if you've ever written a line of code",
    "start": "254280",
    "end": "259620"
  },
  {
    "text": "like this like have you ever logged don't be afraid if you haven't yeah come on come on yeah I want to be awake fine",
    "start": "259620",
    "end": "266220"
  },
  {
    "text": "because I'm assuming if you don't raise your hand you've never ridden a single line of code that logs anything and",
    "start": "266220",
    "end": "272160"
  },
  {
    "text": "that's scary because when things go wrong you want to know how that went wrong and where they went wrong",
    "start": "272160",
    "end": "278520"
  },
  {
    "text": "But ultimately this is about the real world now as I'm going to be you know going forward this talk especially in the",
    "start": "278520",
    "end": "285660"
  },
  {
    "text": "first half of it I want you to stay awake I'm honestly not trying to sell you a",
    "start": "285660",
    "end": "291120"
  },
  {
    "text": "performance talk as a logging talk I promise this is a logging talk",
    "start": "291120",
    "end": "296340"
  },
  {
    "text": "but I also really like performance uh but what we're gonna see has nothing to do with performance",
    "start": "296340",
    "end": "302699"
  },
  {
    "text": "um directly meaning the performance improvements we're gonna see and the reasoning I'm gonna give you in this",
    "start": "302699",
    "end": "307860"
  },
  {
    "text": "talk is actually a knock-on effect of doing logging right it is not with doing",
    "start": "307860",
    "end": "313380"
  },
  {
    "text": "logging right because we need the performance and ultimately it's just about the real world",
    "start": "313380",
    "end": "319320"
  },
  {
    "text": "so I want to ask a question another one uh what is this obviously this is a line of code that",
    "start": "319320",
    "end": "326400"
  },
  {
    "text": "logs something what is this more specifically can anyone shout what is supposed to be",
    "start": "326400",
    "end": "334620"
  },
  {
    "text": "who said right let's see what Microsoft says that this",
    "start": "334620",
    "end": "339660"
  },
  {
    "text": "is this is the message the message",
    "start": "339660",
    "end": "346259"
  },
  {
    "text": "but it's not it's actually the the template you write so let's establish a few things I want",
    "start": "346259",
    "end": "351360"
  },
  {
    "text": "to have a theme going on and you need to that is the most important thing you need to understand that this is actually",
    "start": "351360",
    "end": "356759"
  },
  {
    "text": "the template and that it is not the message the same way that Microsoft tells you that it is the message",
    "start": "356759",
    "end": "363360"
  },
  {
    "text": "um because every problem or the majority of the problems actually stem off of that the idea that many people think",
    "start": "363360",
    "end": "369660"
  },
  {
    "text": "that this thing is the message because Microsoft tells us is the message and not the template",
    "start": "369660",
    "end": "375960"
  },
  {
    "text": "so well first Microsoft is terrible blood naming we're gonna say it over and over again anyone working from Microsoft",
    "start": "375960",
    "end": "382139"
  },
  {
    "text": "here uh they're great what a company I love it",
    "start": "382139",
    "end": "388580"
  },
  {
    "text": "so let's establish the theme of this talk which is NYX eight logging rules rule number one",
    "start": "388580",
    "end": "394560"
  },
  {
    "text": "the message is actually the message template and shall be traded as such and this talk will explain what that means",
    "start": "394560",
    "end": "400560"
  },
  {
    "text": "but has any of you please raise your hands like this is important use string",
    "start": "400560",
    "end": "406740"
  },
  {
    "text": "interpolation when logging oh okay whoever raised their hand",
    "start": "406740",
    "end": "412680"
  },
  {
    "text": "actually let's continue how about string concatenation have our string formatting",
    "start": "412680",
    "end": "420120"
  },
  {
    "text": "you just validated the title all of these are wrong and we're gonna see why",
    "start": "420120",
    "end": "425340"
  },
  {
    "text": "they're wrong and let's start with the first one which is string intervalation now string",
    "start": "425340",
    "end": "431039"
  },
  {
    "text": "interpolation is a fantastic fix right I absolutely love it um because when you have a message like",
    "start": "431039",
    "end": "436199"
  },
  {
    "text": "this you know user Nick chaps is just 1030 which is actually true thank you very much for the happy birthday",
    "start": "436199",
    "end": "442740"
  },
  {
    "text": "um then if you want to parameterize that you might write something like this and",
    "start": "442740",
    "end": "447840"
  },
  {
    "text": "you know even though this will actually work you have user plus Nick plus",
    "start": "447840",
    "end": "453000"
  },
  {
    "text": "whatever or name plus whatever Justin 30. this is fine but it's a bit clanky can",
    "start": "453000",
    "end": "459900"
  },
  {
    "text": "we improve it well we have a few approaches we can follow in.net the first one is string concatenation so",
    "start": "459900",
    "end": "465720"
  },
  {
    "text": "string dot concat um and in case you didn't know what the compiler will do with this one actually",
    "start": "465720",
    "end": "471960"
  },
  {
    "text": "is lower it and turn it into this what we can also do is think.format well",
    "start": "471960",
    "end": "477840"
  },
  {
    "text": "you can have an index parameter and then you can pass them as secondary parameters and then it will be replaced",
    "start": "477840",
    "end": "483419"
  },
  {
    "text": "into the string and build the string that you want but in C sharp six I want",
    "start": "483419",
    "end": "488819"
  },
  {
    "text": "to say we got a really neat feature called string interpolation which from what I understand all of you know and love and",
    "start": "488819",
    "end": "495780"
  },
  {
    "text": "it's this idea you just put a dollar sign in the beginning you have curly braces and then you can wrap your parameters and then you don't have to",
    "start": "495780",
    "end": "502020"
  },
  {
    "text": "have the pluses which can lead into mistakes in fact looking at this code I do have two",
    "start": "502020",
    "end": "507240"
  },
  {
    "text": "mistakes in my string concatenation second line I missed a space after user so very neat feature and if any of you",
    "start": "507240",
    "end": "515580"
  },
  {
    "text": "are doing Java as your main language then you're still stuck in the second version of this I'm sorry eventually",
    "start": "515580",
    "end": "522060"
  },
  {
    "text": "they're going to figure it out now one thing you have to know about c-sharp as a language in general is that",
    "start": "522060",
    "end": "527940"
  },
  {
    "text": "the weight was shipped for years now in Windows machines mostly um really prevented it from being",
    "start": "527940",
    "end": "534360"
  },
  {
    "text": "patched so when the CLR one.net the thing that actually um eventually will run your code and it",
    "start": "534360",
    "end": "540720"
  },
  {
    "text": "is a new feature implemented Microsoft wouldn't really touch the CLR we're going to touch the runtime because it's",
    "start": "540720",
    "end": "546240"
  },
  {
    "text": "very very dangerous so what they would do instead is they would take the high level c-sharp that nice new feature in",
    "start": "546240",
    "end": "553080"
  },
  {
    "text": "this case during interpolation and then write some magic into a middle step before the file compilation called",
    "start": "553080",
    "end": "559260"
  },
  {
    "text": "lowering which actually takes that and converts it into low level C sharp that you don't have to write which is more of",
    "start": "559260",
    "end": "565860"
  },
  {
    "text": "an elegant approach and it's way less likely it's going to break a runtime that needs to be patched",
    "start": "565860",
    "end": "571440"
  },
  {
    "text": "however with net core this is no longer the issue because when there is a problem we get those I think it's not",
    "start": "571440",
    "end": "578279"
  },
  {
    "text": "bi-weekly fortnightly once every two weeks we get some patches some changes",
    "start": "578279",
    "end": "583560"
  },
  {
    "text": "so if there's an issue you can just take it update your Docker images and you're good",
    "start": "583560",
    "end": "588779"
  },
  {
    "text": "but because of that perception Microsoft has really been shipping features with",
    "start": "588779",
    "end": "594720"
  },
  {
    "text": "mostly syntactic sugar in fact the only two features that we finally got now in C sharp 11 that are not syntactic sugar",
    "start": "594720",
    "end": "601519"
  },
  {
    "text": "is a generics on attributes which wasn't possible nowadays and the the fancy",
    "start": "601519",
    "end": "607620"
  },
  {
    "text": "static abstract members on interfaces amazing features but they did require a",
    "start": "607620",
    "end": "613500"
  },
  {
    "text": "CLR update and string interpolation having been shipped in C sharp 6 was the same string interpolation actually is",
    "start": "613500",
    "end": "620580"
  },
  {
    "text": "being lowered from that to string dot format anyone stuck or still is in C",
    "start": "620580",
    "end": "627540"
  },
  {
    "text": "sharp 9 backwards and I'm assuming everyone else is this",
    "start": "627540",
    "end": "634260"
  },
  {
    "text": "of 10 onwards okay no you're just lazy okay cool",
    "start": "634260",
    "end": "639300"
  },
  {
    "text": "if you're still in C sharp 9 and backwards then that is still true for",
    "start": "639300",
    "end": "644579"
  },
  {
    "text": "you this actually has changed nowadays and it's not as bad and we're gonna see that as well but",
    "start": "644579",
    "end": "650880"
  },
  {
    "text": "this is your reality that your string intervalation is nothing than a fancy string that format now why is that bad well",
    "start": "650880",
    "end": "659160"
  },
  {
    "text": "both string.format and string.comcat have a bit of a similar issue than if",
    "start": "659160",
    "end": "665279"
  },
  {
    "text": "you can spot it this object already over here these",
    "start": "665279",
    "end": "670860"
  },
  {
    "text": "parameters this is the bane of my existence if you've ever worked with code that needs",
    "start": "670860",
    "end": "676500"
  },
  {
    "text": "to be super super fast this is very problematic but to explain why this is very problematic I have to",
    "start": "676500",
    "end": "682500"
  },
  {
    "text": "explain to you how c-sharp deals with memory so please don't fall asleep",
    "start": "682500",
    "end": "688339"
  },
  {
    "text": "so C sharp deals with memory in two different ways you have two places where a memory can be allocated the first one",
    "start": "688339",
    "end": "694200"
  },
  {
    "text": "is a stack the second one is the Heap next",
    "start": "694200",
    "end": "699260"
  },
  {
    "text": "what are you doing yeah I promise it's a logging talk it's a logging talk so stack",
    "start": "699620",
    "end": "706260"
  },
  {
    "text": "let's say we have this method over here so we have int age we have the good",
    "start": "706260",
    "end": "711480"
  },
  {
    "text": "which is extract and then we have the point 2D which in this case um initializes an X and Y random points",
    "start": "711480",
    "end": "718079"
  },
  {
    "text": "in 2D space and assume that this is a struct which",
    "start": "718079",
    "end": "724079"
  },
  {
    "text": "is very important what this means is that all the values in this method can actually be allocated",
    "start": "724079",
    "end": "731339"
  },
  {
    "text": "on a memory area called the stack and that stack is very local to this method it's called the stack frame",
    "start": "731339",
    "end": "737700"
  },
  {
    "text": "so that's how this thing would be allocated now a bit of a asterisk here they're a bit of like more Nuance if you",
    "start": "737700",
    "end": "744600"
  },
  {
    "text": "want to be very pedantic about exactly what's happening but fundamentally what you should know is that this is what you're dealing with your 30 parameter is",
    "start": "744600",
    "end": "751800"
  },
  {
    "text": "put in a location in the stack then you're good and then the parameters of your struct because it's deconstructed",
    "start": "751800",
    "end": "757800"
  },
  {
    "text": "and then put into the stock now the good thing about this is that everything that",
    "start": "757800",
    "end": "763079"
  },
  {
    "text": "the method needs is local to the method which means that when you go out of that",
    "start": "763079",
    "end": "768480"
  },
  {
    "text": "method and out of that stack frame that memory isn't needed anymore now we all",
    "start": "768480",
    "end": "773519"
  },
  {
    "text": "know that C sharp is a garbage collected language so if you create and an object it's going to need to be",
    "start": "773519",
    "end": "781019"
  },
  {
    "text": "garbage collected eventually when nothing points to it however because in the stack we can guarantee that once",
    "start": "781019",
    "end": "786959"
  },
  {
    "text": "you're out of this area for something that can be put on the hip then we can just",
    "start": "786959",
    "end": "793040"
  },
  {
    "text": "de-allocate it without having to garbage collect we just assume it doesn't exist anymore because nothing is using it",
    "start": "793040",
    "end": "799500"
  },
  {
    "text": "now the hip is a bit different same sort of example as before but now assume that this person is a class and this point to",
    "start": "799500",
    "end": "806820"
  },
  {
    "text": "the is also a class so those are reference type they're not value types as we had before which is the two main",
    "start": "806820",
    "end": "813300"
  },
  {
    "text": "types of objects we can have in c-sharp what that means is that the memory",
    "start": "813300",
    "end": "819120"
  },
  {
    "text": "doesn't exactly know how to fade those items in the the stack so for that they sort of cheat and they go down the an",
    "start": "819120",
    "end": "826380"
  },
  {
    "text": "easy route of putting them in an area called the Heap which is just something else somewhere else where you can just",
    "start": "826380",
    "end": "833160"
  },
  {
    "text": "have an address imagine it has a dictionary that says if you want object 55 then that is there go get it",
    "start": "833160",
    "end": "841320"
  },
  {
    "text": "um and what's going on behind the scenes is that eventually when nothing needs or has a reference to object 55",
    "start": "841320",
    "end": "848940"
  },
  {
    "text": "then the garbage collector has the clear to say I'm gonna come in here and say nobody needs that I'm going to put it",
    "start": "848940",
    "end": "854399"
  },
  {
    "text": "into the bin now even me saying that that something has to find something in",
    "start": "854399",
    "end": "859800"
  },
  {
    "text": "an area and then do something to clean it up and deallocate it um sounds like work and it is a lot of",
    "start": "859800",
    "end": "866820"
  },
  {
    "text": "work in fact when that happens because of how fragile the whole process can be",
    "start": "866820",
    "end": "872660"
  },
  {
    "text": "the whole application stops nothing moves other than the garbage collector which means that you can really end up",
    "start": "872660",
    "end": "879480"
  },
  {
    "text": "in scenarios where if you have a lot of memory to clean up a lot of pressure that's being built you're going to have this inconsistencies in performance",
    "start": "879480",
    "end": "885600"
  },
  {
    "text": "because your application is pausing or microposing to clean those things up so back to how C sharp deals with memory",
    "start": "885600",
    "end": "892560"
  },
  {
    "text": "we have the stack which is value types can be allocated here so your integers your structs your your goods and so on",
    "start": "892560",
    "end": "899160"
  },
  {
    "text": "go there then you have local variables and parameters in in methods they can also be allocated there because they're",
    "start": "899160",
    "end": "905459"
  },
  {
    "text": "copied into the method and then maintained in the method it is incredibly fast like insanely fast",
    "start": "905459",
    "end": "911959"
  },
  {
    "text": "and it automatically disappears when it goes out of scope like we established with the stack frame",
    "start": "911959",
    "end": "918300"
  },
  {
    "text": "now the other thing the Heap is a bit more interesting because reference types are",
    "start": "918300",
    "end": "924180"
  },
  {
    "text": "always allocated here while in value types value types can be allocated in",
    "start": "924180",
    "end": "929279"
  },
  {
    "text": "the stack but they also can be allocated on the Heap and it's just this big pool",
    "start": "929279",
    "end": "934560"
  },
  {
    "text": "of memory and it needs to be garbage collected which is a problematic part so boxed values and I want you to to",
    "start": "934560",
    "end": "943199"
  },
  {
    "text": "remember this word boxed values will be allocated here and if a box value is a",
    "start": "943199",
    "end": "948540"
  },
  {
    "text": "value type which it is a value type then that's where it's going to end up you're going to have to do something to",
    "start": "948540",
    "end": "953880"
  },
  {
    "text": "eventually clean it now anyone has seen this before",
    "start": "953880",
    "end": "960199"
  },
  {
    "text": "how amazing.net is like a billion requests faster than anything in the universe",
    "start": "961260",
    "end": "966839"
  },
  {
    "text": "yeah Microsoft made this but it's independent it's uh yeah it's",
    "start": "966839",
    "end": "974399"
  },
  {
    "text": "an open source uh Benchmark if you've seen this that is very optimized if you",
    "start": "974399",
    "end": "980160"
  },
  {
    "text": "if you squint it looks like c-sharp but it's not",
    "start": "980160",
    "end": "985279"
  },
  {
    "text": "but if you want to know how they achieve this and how.net is actually very very fast is by removing a lot of the",
    "start": "985560",
    "end": "992639"
  },
  {
    "text": "references you normally would have on the Heap and putting them on the stack so and if you want to know more about",
    "start": "992639",
    "end": "999300"
  },
  {
    "text": "that I said I'm done with self-promotion but I'm not there's an episode on my podcast talking with Stephen tow which",
    "start": "999300",
    "end": "1005240"
  },
  {
    "text": "is a performance Wizard and he explains all that for detail and I pretend like I understand what he's saying",
    "start": "1005240",
    "end": "1012199"
  },
  {
    "text": "now like I mentioned before we have the concept of boxing which is a problematic aspect of value types being allocated on",
    "start": "1012199",
    "end": "1018500"
  },
  {
    "text": "the Heap I promise this is a logging talk so back to original example we have this",
    "start": "1018500",
    "end": "1025640"
  },
  {
    "text": "int age equal 30 and I'm gonna show some IL code I don't know what it means I can",
    "start": "1025640",
    "end": "1031819"
  },
  {
    "text": "just vaguely tell you what it means it basically just says put this value 30 into the stack",
    "start": "1031819",
    "end": "1037640"
  },
  {
    "text": "and that's that there's no boxing happening it just it's allocated there and when we go out of the stack frame it",
    "start": "1037640",
    "end": "1042678"
  },
  {
    "text": "disappears but then you have this where we have the same age value 30 but this",
    "start": "1042679",
    "end": "1048500"
  },
  {
    "text": "is now implicitly converted into an object the compiler will allow it because the compiler is smart",
    "start": "1048500",
    "end": "1056059"
  },
  {
    "text": "ish and the way this will be compiled into IL code is like this so we still",
    "start": "1056059",
    "end": "1062840"
  },
  {
    "text": "have this stack allocation but then that is put into a box using the Box",
    "start": "1062840",
    "end": "1068840"
  },
  {
    "text": "instruction over here and that process actually does take time it is not cheap during that process that value type that",
    "start": "1068840",
    "end": "1076220"
  },
  {
    "text": "could be allocated in the stack now goes into the Heap meaning it needs to be",
    "start": "1076220",
    "end": "1081679"
  },
  {
    "text": "garbage collected as its own individual value so depending on the pressure you're running those are some extra",
    "start": "1081679",
    "end": "1086840"
  },
  {
    "text": "bytes you have to keep track of and delete now the opposite can also happen if",
    "start": "1086840",
    "end": "1093919"
  },
  {
    "text": "you're trying to hardcast an object to its primitive value the value type then",
    "start": "1093919",
    "end": "1099140"
  },
  {
    "text": "that needs to be unboxed and that's another type of process that does take time and eventually return it",
    "start": "1099140",
    "end": "1105559"
  },
  {
    "text": "why is that problematic well we're gonna end up with a lot of garbage and garbage slows us down that is a bit",
    "start": "1105559",
    "end": "1112820"
  },
  {
    "text": "of a common thing so we have the big two reasons we have tons of boxing we're going back to the logging so if you have",
    "start": "1112820",
    "end": "1118700"
  },
  {
    "text": "that object parameters array and you pass value types in there they're gonna be boxed they're gonna have to be garbage collected you go on and on and",
    "start": "1118700",
    "end": "1125240"
  },
  {
    "text": "on and on and that's why we actually I think in.net it we're getting um span on iron universe so our",
    "start": "1125240",
    "end": "1133100"
  },
  {
    "text": "parameters on span so we can actually prevent that from happening because you don't really have much of a choice currently at the way",
    "start": "1133100",
    "end": "1139820"
  },
  {
    "text": "this is built and the other problem is a ton of strings if you ever profile your application especially if you're doing",
    "start": "1139820",
    "end": "1146059"
  },
  {
    "text": "logging and especially if you're the ones that use the raise your hand to say",
    "start": "1146059",
    "end": "1151100"
  },
  {
    "text": "that they're using string interpolation on logs then you're gonna see a ton of strings it's probably the most common",
    "start": "1151100",
    "end": "1156440"
  },
  {
    "text": "thing you have allocated in your applications right now and if it is not you probably have",
    "start": "1156440",
    "end": "1161720"
  },
  {
    "text": "another problem that you need to sort out so more boxing means more hip",
    "start": "1161720",
    "end": "1167360"
  },
  {
    "text": "allocations more hip allocations means more work to set and retrieve values which means more garbage collections",
    "start": "1167360",
    "end": "1173120"
  },
  {
    "text": "triggered which means more pausing to clean things up because we said we cannot actually do anything in your application if it is garbage collecting",
    "start": "1173120",
    "end": "1180620"
  },
  {
    "text": "and the other thing is tons of strings which means more hip allocations because strings are reference types they are put",
    "start": "1180620",
    "end": "1186500"
  },
  {
    "text": "on the hip and if you think that strings are only allocated once even if they have the same value you are wrong",
    "start": "1186500",
    "end": "1192500"
  },
  {
    "text": "everyone heard of the concept string interning",
    "start": "1192500",
    "end": "1196840"
  },
  {
    "text": "string interning is the idea that a string is only allocated once on the Heap and then reused based on the",
    "start": "1198740",
    "end": "1204380"
  },
  {
    "text": "reference and that is only true for compile timestring literals you can also force a",
    "start": "1204380",
    "end": "1210260"
  },
  {
    "text": "value to be entered but that's not beneficial so if you keep creating a string dynamically in runtime you are",
    "start": "1210260",
    "end": "1216260"
  },
  {
    "text": "creating a new unique string every single time even if it has the exact same value and that string reference",
    "start": "1216260",
    "end": "1223520"
  },
  {
    "text": "type it needs to be garbage collected so super super problematic now that of",
    "start": "1223520",
    "end": "1229280"
  },
  {
    "text": "course means more gabs collections to collect those strings because they have to be collected and then more pausing to",
    "start": "1229280",
    "end": "1234320"
  },
  {
    "text": "clean things up but Nick in C sharp 10 we got string",
    "start": "1234320",
    "end": "1240200"
  },
  {
    "text": "interpolation handlers and they fix that anyone knows what strength Evolution handlers are",
    "start": "1240200",
    "end": "1245900"
  },
  {
    "text": "cool I'll explain it so we now have not this thing can actually",
    "start": "1245900",
    "end": "1251720"
  },
  {
    "text": "be compiled now um or lowered and then compiled to this so we went from string dot format with",
    "start": "1251720",
    "end": "1258799"
  },
  {
    "text": "that problematic object array to this version so if you ever try to use a",
    "start": "1258799",
    "end": "1264380"
  },
  {
    "text": "website called sharplab.io to see how your code is compiled that's what you're going to see for Strings by default and",
    "start": "1264380",
    "end": "1270919"
  },
  {
    "text": "that can't change based on different strings but in this example that's what we're going to get",
    "start": "1270919",
    "end": "1275960"
  },
  {
    "text": "and the good thing about this is that online I should have numbered them the",
    "start": "1275960",
    "end": "1281000"
  },
  {
    "text": "one before the end you see this generic int used so generic actually prevents",
    "start": "1281000",
    "end": "1287480"
  },
  {
    "text": "boxing and if any one of you have been doing this for more than 20 years I don't know I haven't",
    "start": "1287480",
    "end": "1293659"
  },
  {
    "text": "um then you would know that in the beginning we had constructs like an array list I think to store objects and",
    "start": "1293659",
    "end": "1299840"
  },
  {
    "text": "those did not have a generic type and later we go to list and we fixed the list to a specific type that heavily",
    "start": "1299840",
    "end": "1305360"
  },
  {
    "text": "fixed performance will improved performance because you can no longer box those values so you don't have to",
    "start": "1305360",
    "end": "1311000"
  },
  {
    "text": "know what they are to to take them out of the list so this will prevent all the allocation",
    "start": "1311000",
    "end": "1317120"
  },
  {
    "text": "issues that you have with the boxing side of things but if you're using string interpolation you are still",
    "start": "1317120",
    "end": "1324020"
  },
  {
    "text": "allocating one unique string first thing that you're doing and those strings need",
    "start": "1324020",
    "end": "1329120"
  },
  {
    "text": "to be garbage collected they will slow your application down now in something else you cannot prevent it but you",
    "start": "1329120",
    "end": "1335480"
  },
  {
    "text": "should know it's there and you should know that you can prevent in some cases we're going to see them in this talk so",
    "start": "1335480",
    "end": "1340940"
  },
  {
    "text": "let's visualize this if I have an application that just does a log dot information log",
    "start": "1340940",
    "end": "1346700"
  },
  {
    "text": "um pair a few thousand times a second all the time then my memory for this application if I",
    "start": "1346700",
    "end": "1352820"
  },
  {
    "text": "profile it will look like this so I have this Spike of memory all the way until 16 megabytes over here and this is",
    "start": "1352820",
    "end": "1359000"
  },
  {
    "text": "relative to how much memory pressure you can tolerate in your application um and then it spikes and it goes down",
    "start": "1359000",
    "end": "1364520"
  },
  {
    "text": "and then it spikes goes down spikes goes down this tool is called dot memory in case you're not aware of it it is a tool",
    "start": "1364520",
    "end": "1370520"
  },
  {
    "text": "by jetbrains they do not pay me sadly but what I want you to take a look at is",
    "start": "1370520",
    "end": "1376760"
  },
  {
    "text": "if you take a look at this thing over here at the bottom those are",
    "start": "1376760",
    "end": "1382480"
  },
  {
    "text": "milliseconds or not milliseconds but maybe microseconds that your application is doing nothing but cleaning your",
    "start": "1382480",
    "end": "1388940"
  },
  {
    "text": "memory so this can still be a very very problematic so rule number two I shall",
    "start": "1388940",
    "end": "1395659"
  },
  {
    "text": "not use string interpolation or concatenation in the message template because we established it as a message",
    "start": "1395659",
    "end": "1401600"
  },
  {
    "text": "template and that can be problematic but what should I use well",
    "start": "1401600",
    "end": "1407120"
  },
  {
    "text": "structure logging you should use what this template was made to be used for if I go back to the following example",
    "start": "1407120",
    "end": "1414020"
  },
  {
    "text": "if I have a login.log and I use string interpolation and I start logging my application is running and it's fine and",
    "start": "1414020",
    "end": "1420440"
  },
  {
    "text": "then I'm using application insights to push my logs I'm going to see something like this I'm going to get on my",
    "start": "1420440",
    "end": "1426679"
  },
  {
    "text": "payments with my ID and fail with status whatever now in a real scenario you will have a",
    "start": "1426679",
    "end": "1433520"
  },
  {
    "text": "business place and say oh we had an incident and we have to get all the council payments maybe within the time",
    "start": "1433520",
    "end": "1439340"
  },
  {
    "text": "frame or within the last 24 hours so we can get back and get the IDS and do something about it has happened to me",
    "start": "1439340",
    "end": "1446539"
  },
  {
    "text": "and you might say I'm gonna go here because I'm very smart I remember I remember at the end with the status code",
    "start": "1446539",
    "end": "1453080"
  },
  {
    "text": "and I'm very very smart so I'm gonna go and say traces where message ends with",
    "start": "1453080",
    "end": "1458179"
  },
  {
    "text": "canceled very easy sort by date ship it and I'm going to actually get what I",
    "start": "1458179",
    "end": "1463700"
  },
  {
    "text": "need and then the next day comes and they come back and they say hey no tell me",
    "start": "1463700",
    "end": "1468980"
  },
  {
    "text": "what happened to payment with idx until it was canceled good luck sorting that out if you're",
    "start": "1468980",
    "end": "1474860"
  },
  {
    "text": "using string Evolution because you're losing all the information all the crucial information that you could have",
    "start": "1474860",
    "end": "1480260"
  },
  {
    "text": "in your logs now let's do the following let's let's switch it up a bit I'm going to use the",
    "start": "1480260",
    "end": "1486679"
  },
  {
    "text": "template as it was supposed to be used and please don't get confused here there is no dollar sign in the beginning of",
    "start": "1486679",
    "end": "1493220"
  },
  {
    "text": "this I'm just using a feature of my ID which can highlight parameters in",
    "start": "1493220",
    "end": "1498620"
  },
  {
    "text": "structure logging and say that hey I have this parameter called payment ID and this parameter called payment status",
    "start": "1498620",
    "end": "1504860"
  },
  {
    "text": "and the first one I'm going to pass as an extra parameter is the payment ID and the second is the status",
    "start": "1504860",
    "end": "1510740"
  },
  {
    "text": "and if I do that I have the exact same experience in application insights but",
    "start": "1510740",
    "end": "1516740"
  },
  {
    "text": "if I expand any of this individual log entries watch what I have",
    "start": "1516740",
    "end": "1523240"
  },
  {
    "text": "not only do I have the computed message but I also have the original format in",
    "start": "1524779",
    "end": "1530659"
  },
  {
    "text": "the third line and then the payment ID and the payment status as individual parameters or",
    "start": "1530659",
    "end": "1537860"
  },
  {
    "text": "application insights called the dimensions that different names for them but it's the same concept so as long as",
    "start": "1537860",
    "end": "1543500"
  },
  {
    "text": "you use those templates you can actually capture parameters it can go even further you can actually time your",
    "start": "1543500",
    "end": "1549440"
  },
  {
    "text": "message and get that information as well you can create Scopes and so on",
    "start": "1549440",
    "end": "1554600"
  },
  {
    "text": "and now with that in mind you can go and do something like this you can say give me the traces where custom Dimensions",
    "start": "1554600",
    "end": "1561140"
  },
  {
    "text": "dot payment status equals canceled and assuming you're consistent with that",
    "start": "1561140",
    "end": "1566539"
  },
  {
    "text": "parameter name payment status then you're going to get it but it's very important you have to be consistent and",
    "start": "1566539",
    "end": "1573320"
  },
  {
    "text": "you especially if you're doing micro Services you don't just be consistent consistent within your application but",
    "start": "1573320",
    "end": "1579740"
  },
  {
    "text": "if this payment status is the same sort of contract across your obligation you want to be consistent across your",
    "start": "1579740",
    "end": "1586760"
  },
  {
    "text": "service across your system the whole thing that will make it very easy for you to",
    "start": "1586760",
    "end": "1592520"
  },
  {
    "text": "identify what actually happened then you can go further you can use things like the event ID or even the original format",
    "start": "1592520",
    "end": "1598460"
  },
  {
    "text": "to um search for something based on its message template or you can do other",
    "start": "1598460",
    "end": "1604100"
  },
  {
    "text": "things like I said event ID any of you have alerts based on a specific look and",
    "start": "1604100",
    "end": "1610940"
  },
  {
    "text": "feel of a message so maybe you're using regex or something to identify a",
    "start": "1610940",
    "end": "1616340"
  },
  {
    "text": "template that's a very common practice I'm not saying it's good but this makes it very very easy because",
    "start": "1616340",
    "end": "1621500"
  },
  {
    "text": "you don't have to pattern match anything you just say if the template matches that then here you go",
    "start": "1621500",
    "end": "1627559"
  },
  {
    "text": "now you might be saying hey Nick this is still boxing yes I'm not allocating a",
    "start": "1627559",
    "end": "1633080"
  },
  {
    "text": "new string every time because now this is a compile time constant I'm not Computing it on every request it is",
    "start": "1633080",
    "end": "1639799"
  },
  {
    "text": "there it is reused it is being pointed out at the memory and then I'm just um",
    "start": "1639799",
    "end": "1645260"
  },
  {
    "text": "boxing the parameters so the only string allocated for this operation is the one you see below the",
    "start": "1645260",
    "end": "1652460"
  },
  {
    "text": "payment with ID now if any further allocation happens that is up to the",
    "start": "1652460",
    "end": "1657620"
  },
  {
    "text": "provider if you're using application inside provider if you're using data dot provider God forbid great great tool",
    "start": "1657620",
    "end": "1663860"
  },
  {
    "text": "great tool very expensive um or anything else you only allocate a string and that string is very very",
    "start": "1663860",
    "end": "1670220"
  },
  {
    "text": "problematic and you're not going to have that issue the boxing in this case until they",
    "start": "1670220",
    "end": "1676100"
  },
  {
    "text": "eventually fix the parameters object array thing you can't really do much but it's going to hurt you way less than",
    "start": "1676100",
    "end": "1682220"
  },
  {
    "text": "what these strings can do so rule number three I shall use structural longing logging",
    "start": "1682220",
    "end": "1687559"
  },
  {
    "text": "and give good names to my parameters I'm using serilog any of you use",
    "start": "1687559",
    "end": "1694940"
  },
  {
    "text": "cellulug I'm gonna keep doing the hand thing awesome so I'm fantastic Library cellular log so",
    "start": "1694940",
    "end": "1701299"
  },
  {
    "text": "look it's just a login library that did a lot of things right from the beginning and it has this very nice concept of a",
    "start": "1701299",
    "end": "1707059"
  },
  {
    "text": "sync which is basically just a destination you might want to push your locks and cereal log you might say does",
    "start": "1707059",
    "end": "1713179"
  },
  {
    "text": "not actually suffer from all of those issues and you would be half right let's explain why",
    "start": "1713179",
    "end": "1719179"
  },
  {
    "text": "there's by the way two ways of doing cellulog the first one is using the raw cellulog I logger so you initialize your",
    "start": "1719179",
    "end": "1726080"
  },
  {
    "text": "logger and then you put it as a Singleton into your di container and then you reuse that how many of you use",
    "start": "1726080",
    "end": "1731480"
  },
  {
    "text": "this approach cool and then you have the other way which is the sale log dot extensions.logging package which sort of",
    "start": "1731480",
    "end": "1738559"
  },
  {
    "text": "hijacks the built-in eye logger and it adds it as a provider how many of you use this",
    "start": "1738559",
    "end": "1743659"
  },
  {
    "text": "cool the first ones are the right ones but uh I will explain why the second one",
    "start": "1743659",
    "end": "1750020"
  },
  {
    "text": "is the better approach if you like to look at your code the first one is the better approach if you like your code",
    "start": "1750020",
    "end": "1757000"
  },
  {
    "text": "so let's see how Sherlock prevents log epoxy because they have the same issue",
    "start": "1758320",
    "end": "1763700"
  },
  {
    "text": "right but still will be smart they say instead of having a single method for log information write logs log error log",
    "start": "1763700",
    "end": "1770899"
  },
  {
    "text": "critical log and so on they thought what if we make turnover loads with 10",
    "start": "1770899",
    "end": "1776960"
  },
  {
    "text": "generic T-Type parameters to prevent the logging whether that fix the problem and it actually would because now you have",
    "start": "1776960",
    "end": "1784520"
  },
  {
    "text": "an N amount of degenerate type parameters and like we established there is no boxing if you're using generics",
    "start": "1784520",
    "end": "1792260"
  },
  {
    "text": "except it doesn't really prevent it let me explain why and to understand why",
    "start": "1792260",
    "end": "1798020"
  },
  {
    "text": "when you talk about the log level which is a very funny thing to look at a very funny",
    "start": "1798020",
    "end": "1803179"
  },
  {
    "text": "um enum to look especially for Microsoft I'm sorry",
    "start": "1803179",
    "end": "1808399"
  },
  {
    "text": "because that's how they decided they want to write the log level start with Trace",
    "start": "1808399",
    "end": "1814159"
  },
  {
    "text": "it goes to debug information warning error critical and then they said oh",
    "start": "1814159",
    "end": "1819679"
  },
  {
    "text": " we did not add none we'll slap it at six",
    "start": "1819679",
    "end": "1825260"
  },
  {
    "text": "and then what if you want to have one after this good luck while cereal log has the same concept",
    "start": "1825260",
    "end": "1831559"
  },
  {
    "text": "but they said well why do you need none to be explicit just make it nullable and forget about it so Trace in logging in",
    "start": "1831559",
    "end": "1839659"
  },
  {
    "text": "in log level for Microsoft is basically verbose debug is debug information so on warning error and then critical is fatal",
    "start": "1839659",
    "end": "1846580"
  },
  {
    "text": "is a bit Grim I don't know maybe it was made by Germans but I prefer critical",
    "start": "1846580",
    "end": "1855760"
  },
  {
    "text": "any Germans here you're hiding",
    "start": "1856700",
    "end": "1862299"
  },
  {
    "text": "so what is the log level why do we have this well when you call log information or dot",
    "start": "1863360",
    "end": "1869360"
  },
  {
    "text": "information in serolog behind the scene is what you're going to get is a lowered",
    "start": "1869360",
    "end": "1875299"
  },
  {
    "text": "an overload that uses log level dot information which is the log level or log event level which is how cellular",
    "start": "1875299",
    "end": "1881360"
  },
  {
    "text": "calls it dot information and then if you've ever looked into your app settings or Json because if you haven't I'm scared then you might have seen by",
    "start": "1881360",
    "end": "1889279"
  },
  {
    "text": "default this sort of logging area and it has a top level log level object",
    "start": "1889279",
    "end": "1894860"
  },
  {
    "text": "and then what called what's called log categories and this microsoft.asp.net",
    "start": "1894860",
    "end": "1900559"
  },
  {
    "text": "core by default is warning meaning that if your logs for your asp.net",
    "start": "1900559",
    "end": "1906200"
  },
  {
    "text": "collaborations are information or below so Trace debug or anything else then and",
    "start": "1906200",
    "end": "1913159"
  },
  {
    "text": "it's not higher than warning or equal to warning then you're not going to see them eventually into your syncs whether",
    "start": "1913159",
    "end": "1919100"
  },
  {
    "text": "that is console whether that is data whether that is anything but anything else the default one for",
    "start": "1919100",
    "end": "1924799"
  },
  {
    "text": "everything else starts with information now out of curiosity how many of you use",
    "start": "1924799",
    "end": "1930020"
  },
  {
    "text": "information as the default for everything else don't be it's not a trap question",
    "start": "1930020",
    "end": "1936140"
  },
  {
    "text": "be afraid it is a tough question but I'll explain why later if you take a",
    "start": "1936140",
    "end": "1942860"
  },
  {
    "text": "look into log the log method of the Microsoft blogger they have this easy enable check over here and if that log",
    "start": "1942860",
    "end": "1950539"
  },
  {
    "text": "level is not enabled so if you're trying to push a debug level log with log.debug",
    "start": "1950539",
    "end": "1956659"
  },
  {
    "text": "but your default is information then it's not going to do anything with it because nobody cares about it",
    "start": "1956659",
    "end": "1964399"
  },
  {
    "text": "that however means that even though we do not push it into the provider or into the sink eventually it is still boxing",
    "start": "1964399",
    "end": "1971840"
  },
  {
    "text": "the parameters before it does this operation serilog is actually pretty smart what they say is I still going to have this",
    "start": "1971840",
    "end": "1979159"
  },
  {
    "text": "ease enabled check but I am not going to box these parameters before I know that",
    "start": "1979159",
    "end": "1985580"
  },
  {
    "text": "I need them so they have the generics on the outside then they have the check on the inside and vendor boxing which you",
    "start": "1985580",
    "end": "1993080"
  },
  {
    "text": "cannot really prevent because somehow you need to pass those parameters you can prevent it we're going to see",
    "start": "1993080",
    "end": "1999019"
  },
  {
    "text": "how but what you can do on your own logging situation and again this depends on how",
    "start": "1999019",
    "end": "2006159"
  },
  {
    "text": "heavy your workload is and how much you want to optimize it but if you have something like this you can totally take",
    "start": "2006159",
    "end": "2011860"
  },
  {
    "text": "that log level that is information and do something like this and say hey if the logger is enabled for or if it is",
    "start": "2011860",
    "end": "2019360"
  },
  {
    "text": "not enabled for information then return early so you can make a method compile time can be very tiring to write all",
    "start": "2019360",
    "end": "2027460"
  },
  {
    "text": "these methods to keep track of everything but it can actually pay dividends in memory if you have a lot of",
    "start": "2027460",
    "end": "2032740"
  },
  {
    "text": "login from a log debug or if your default is higher and so on",
    "start": "2032740",
    "end": "2037840"
  },
  {
    "text": "so rule number four I shall prevent unnecessary boxing for inactive log",
    "start": "2037840",
    "end": "2044080"
  },
  {
    "text": "levels this is a bit situational and this is a bit of an opinion but if you actually care about your application",
    "start": "2044080",
    "end": "2049839"
  },
  {
    "text": "your memory and if you're in high frequent scenarios then you can do that remember memory is contextual it does",
    "start": "2049839",
    "end": "2055720"
  },
  {
    "text": "not mean the same thing for everyone and our performance is contextual and I'm not here to tell you that everyone is",
    "start": "2055720",
    "end": "2061358"
  },
  {
    "text": "processing 10 000 requests per second or more but the good thing is that the.net team",
    "start": "2061359",
    "end": "2067358"
  },
  {
    "text": "has actually been pretty hard at work anyone know what a source generator is",
    "start": "2067359",
    "end": "2074700"
  },
  {
    "text": "nice so IL generators is we introduced I think",
    "start": "2075159",
    "end": "2080618"
  },
  {
    "text": "in.net 5 and what they allow you to do is basically Mark some things into your code as this is maybe incomplete or this",
    "start": "2080619",
    "end": "2088839"
  },
  {
    "text": "could actually use a bit more code but I'm too lazy to write the code every single time which is a mindset I very much like",
    "start": "2088839",
    "end": "2094358"
  },
  {
    "text": "and why don't we write code that knows how to write code and implement the rest",
    "start": "2094359",
    "end": "2099520"
  },
  {
    "text": "of the method and since we have over here something like this this whole thing looks like it",
    "start": "2099520",
    "end": "2105940"
  },
  {
    "text": "can be automated because if you have one prologue information then why don't we or log anything then why don't we just",
    "start": "2105940",
    "end": "2112119"
  },
  {
    "text": "search generate it well it turns out Microsoft has also problems and they wrote a log message or logger message a",
    "start": "2112119",
    "end": "2119920"
  },
  {
    "text": "source generator so what you can have is in a partial class in this case partial static class you",
    "start": "2119920",
    "end": "2127060"
  },
  {
    "text": "can have a public static partial void you can give it a name and you can say this so this is an extension on the I",
    "start": "2127060",
    "end": "2133599"
  },
  {
    "text": "logger and create your log item your your log operation in this case log",
    "start": "2133599",
    "end": "2140560"
  },
  {
    "text": "payment failed and then you can just say that the log level for this thing is information and then the message is",
    "start": "2140560",
    "end": "2146500"
  },
  {
    "text": "payment with ID and so on this is a message template they had the chance to fix it but they chose to be consistently",
    "start": "2146500",
    "end": "2153280"
  },
  {
    "text": "wrong than half right which I like actually because that will be confusing so you know not too mad",
    "start": "2153280",
    "end": "2159940"
  },
  {
    "text": "about this and then you have the log payment error information the log payment error",
    "start": "2159940",
    "end": "2165520"
  },
  {
    "text": "extension method which you can use in your application so the same log entry as before now looks",
    "start": "2165520",
    "end": "2173079"
  },
  {
    "text": "like this and we still have the event name the event ID at original format we have the payment ID and the status we",
    "start": "2173079",
    "end": "2180040"
  },
  {
    "text": "don't lose any information as before but we didn't have to write any of that code why is that awesome it's awesome when",
    "start": "2180040",
    "end": "2186940"
  },
  {
    "text": "you actually look into the implementation of what the source generator will actually do let's take a look at that",
    "start": "2186940",
    "end": "2192820"
  },
  {
    "text": "I know it's going to be a lot of code so let me just point you here the first thing you need to know here is that the",
    "start": "2192820",
    "end": "2199060"
  },
  {
    "text": "log is enabled for your log level is added by default Microsoft Technologies there is no point in wasting your time",
    "start": "2199060",
    "end": "2205540"
  },
  {
    "text": "with unnecessary checks and moving forward so the first thing they do in the search generator and this is not",
    "start": "2205540",
    "end": "2210579"
  },
  {
    "text": "configurable is hey can I do I actually need to do something about this log and",
    "start": "2210579",
    "end": "2216280"
  },
  {
    "text": "if I don't do nothing go back go away but if I do need to do something then",
    "start": "2216280",
    "end": "2221440"
  },
  {
    "text": "I'm going to call this log callback and what this log callback is is a",
    "start": "2221440",
    "end": "2226720"
  },
  {
    "text": "private static read-only action with two actually three parameters",
    "start": "2226720",
    "end": "2231820"
  },
  {
    "text": "um actually Four parameters I logger good string and exception which is nullable if you have an exception and if",
    "start": "2231820",
    "end": "2237520"
  },
  {
    "text": "you remember the parameter methods we have we have a goal for the payment ID and we have a string for the payment status that's what you're seeing here",
    "start": "2237520",
    "end": "2243760"
  },
  {
    "text": "and that that field is actually effectively a cast method on how we are",
    "start": "2243760",
    "end": "2249280"
  },
  {
    "text": "logging it uses a logger message dot Define method and then it sort of generates everything around that",
    "start": "2249280",
    "end": "2255820"
  },
  {
    "text": "what's behind that well this the first thing I want to show you is that you can",
    "start": "2255820",
    "end": "2261700"
  },
  {
    "text": "actually configure if you want to double check the log level but you don't need to have it in place but",
    "start": "2261700",
    "end": "2267520"
  },
  {
    "text": "what's very important is that you notice the absence of any object array or parameters here that's because the",
    "start": "2267520",
    "end": "2273760"
  },
  {
    "text": "compile time we know exactly how many of those we need and we have this new log values in line four which is a struct",
    "start": "2273760",
    "end": "2281380"
  },
  {
    "text": "with generics built specifically for those parameters preventing extra",
    "start": "2281380",
    "end": "2286839"
  },
  {
    "text": "necessary memory now I totally understand that this can be extra overhead in your developer flow so maybe",
    "start": "2286839",
    "end": "2293260"
  },
  {
    "text": "this is not for everybody but if you can you shall consider using",
    "start": "2293260",
    "end": "2299619"
  },
  {
    "text": "Source generated logos they can really really save a lot of memory and really",
    "start": "2299619",
    "end": "2305500"
  },
  {
    "text": "improve your performance and it's easy you just write a single line of code the rest of it is written",
    "start": "2305500",
    "end": "2311619"
  },
  {
    "text": "for you now I mentioned the feature before called string interpolation handlers but did",
    "start": "2311619",
    "end": "2319900"
  },
  {
    "text": "you know you can actually write your own custom string depolation handlers because when Microsoft adds something",
    "start": "2319900",
    "end": "2325240"
  },
  {
    "text": "new they tend to actually open it up for everyone to use which you know depending on the",
    "start": "2325240",
    "end": "2331900"
  },
  {
    "text": "documentation can actually you know you might shoot yourself on the foot but if you're careful you can actually get",
    "start": "2331900",
    "end": "2338500"
  },
  {
    "text": "clever with tooling you can do the following we said that that's the default behavior of having a string interpolated string and then lowering it",
    "start": "2338500",
    "end": "2345280"
  },
  {
    "text": "into the default interpolated Handler but default implies that you can have more and that is true I can actually go",
    "start": "2345280",
    "end": "2351640"
  },
  {
    "text": "here and I can make a refract I can call it logging interpolated string Handler and I can just slap the interpolate",
    "start": "2351640",
    "end": "2358300"
  },
  {
    "text": "string Handler attribute and that makes it an interpolated string Handler which is a very hard word to say consistently",
    "start": "2358300",
    "end": "2365079"
  },
  {
    "text": "so excuse me and then you can do whatever you want in there in this case I'm just cheating and",
    "start": "2365079",
    "end": "2370780"
  },
  {
    "text": "I'm reusing the default one and use that as sort of a store to eventually return my own stuff what does that mean well it",
    "start": "2370780",
    "end": "2377440"
  },
  {
    "text": "means that I can actually Implement my own methods to append it formatted and append all the other parameters",
    "start": "2377440",
    "end": "2384400"
  },
  {
    "text": "but there is no interface that it uses like basically just duct typing so you",
    "start": "2384400",
    "end": "2389440"
  },
  {
    "text": "have to be very careful and match the name but I can do something like this with a custom interpolated Handler I can",
    "start": "2389440",
    "end": "2394660"
  },
  {
    "text": "say append formatted use the generic T type parameter and then use the color argument expression attribute that can",
    "start": "2394660",
    "end": "2401560"
  },
  {
    "text": "point to another parameter the message to get the compile time value of that",
    "start": "2401560",
    "end": "2408160"
  },
  {
    "text": "parameter and if I do that then I can call the internal Handler the append",
    "start": "2408160",
    "end": "2415060"
  },
  {
    "text": "formatted and make my own template which means I can have something like this which means I can have something like",
    "start": "2415060",
    "end": "2422320"
  },
  {
    "text": "this eventually so my my front end looks same the only thing that changed is that I'm not accepting a string known",
    "start": "2422320",
    "end": "2427780"
  },
  {
    "text": "information I'm abstracting I'm accepting a ref of a logging interpolated string Handler which what",
    "start": "2427780",
    "end": "2434440"
  },
  {
    "text": "you need to pass down is actually a string interpolated an intervalid string I mean",
    "start": "2434440",
    "end": "2439660"
  },
  {
    "text": "and this will work and if you do that then you're going to get this into your logs",
    "start": "2439660",
    "end": "2445060"
  },
  {
    "text": "which is this your parameter name will actually be used you're still keeping those",
    "start": "2445060",
    "end": "2451240"
  },
  {
    "text": "parameters as separate values but then you don't have to keep track of everything and have templates for",
    "start": "2451240",
    "end": "2457000"
  },
  {
    "text": "everything this is possible but it is bad and if",
    "start": "2457000",
    "end": "2462040"
  },
  {
    "text": "you consider doing this I do not recommend this approach and it is bad because anything you put into those",
    "start": "2462040",
    "end": "2468640"
  },
  {
    "text": "Kelly braces at compile time will be captured and used as a parameter name so if you do something like this which you",
    "start": "2468640",
    "end": "2475660"
  },
  {
    "text": "can then your parameter will be called guide dot new guide literally the string good",
    "start": "2475660",
    "end": "2482560"
  },
  {
    "text": "luck filtering so you want to control your parameter names you don't want to let it to chance",
    "start": "2482560",
    "end": "2489420"
  },
  {
    "text": "to to know what this might look like so",
    "start": "2489420",
    "end": "2495880"
  },
  {
    "text": "I shall not try to get too clever with tooling guess who did that and paid for",
    "start": "2495880",
    "end": "2501880"
  },
  {
    "text": "it now when I go back to the log level",
    "start": "2501880",
    "end": "2507700"
  },
  {
    "text": "just a little bit I asked you before how many of you use information as your default log level and it was a trap",
    "start": "2507700",
    "end": "2514000"
  },
  {
    "text": "question and that will get a bit opinionated so if you want to close your ears you can but",
    "start": "2514000",
    "end": "2520300"
  },
  {
    "text": "when you have a log level like this like information and then you have warning here what's going to happen is if I",
    "start": "2520300",
    "end": "2526359"
  },
  {
    "text": "increase that microsoft.asp.net core which is a category it's called The Log category to",
    "start": "2526359",
    "end": "2531579"
  },
  {
    "text": "categorize a set of logs then if I just run a single normal aspinical request",
    "start": "2531579",
    "end": "2539020"
  },
  {
    "text": "then that's what I'm getting for a single request that's a lot a lot of strings so that's",
    "start": "2539020",
    "end": "2545740"
  },
  {
    "text": "why by default we're using warning on the microsoft.asp.net core category",
    "start": "2545740",
    "end": "2552460"
  },
  {
    "text": "out of all this the only thing that I've written here is actually this one",
    "start": "2552460",
    "end": "2557700"
  },
  {
    "text": "retrieved quote for currencies GBP to Australian dollars in 32",
    "start": "2557700",
    "end": "2563579"
  },
  {
    "text": "milliseconds now if I'm not gonna put you in Blast here I'm not gonna get you to raise your hand",
    "start": "2563579",
    "end": "2569619"
  },
  {
    "text": "but if any of you are using information for things like 8-minute core logs I",
    "start": "2569619",
    "end": "2575619"
  },
  {
    "text": "want you to ask why because when are you looking at your logs you're looking at",
    "start": "2575619",
    "end": "2581980"
  },
  {
    "text": "your logs when things don't go well when things do go well what like I've never said I'm gonna wake",
    "start": "2581980",
    "end": "2588160"
  },
  {
    "text": "up at 9am and you know what I want to do look at my logs nothing happened but I feel like doing it",
    "start": "2588160",
    "end": "2593980"
  },
  {
    "text": "it's not something you would say but when things break you want to go and see how they broke",
    "start": "2593980",
    "end": "2599560"
  },
  {
    "text": "and some of you raise your hand when I ask hey how many of you are using datadog",
    "start": "2599560",
    "end": "2605440"
  },
  {
    "text": "um brave enough Brave of you to raise your hand but I want to to pay recently for datadog and they have the following",
    "start": "2605440",
    "end": "2612520"
  },
  {
    "text": "payment types they accept Visa Mastercard American",
    "start": "2612520",
    "end": "2618640"
  },
  {
    "text": "Express and this one as a kidney",
    "start": "2618640",
    "end": "2624640"
  },
  {
    "text": "um it can be very expensive and if you are a big company and work with their dog for quite a bit which I used to work",
    "start": "2624640",
    "end": "2630819"
  },
  {
    "text": "for one then they will tell you that hey you're over logging this is not supposed",
    "start": "2630819",
    "end": "2635859"
  },
  {
    "text": "to be what what you're doing uh oh sorry you're not supposed to be doing that have you considered raising your default",
    "start": "2635859",
    "end": "2643180"
  },
  {
    "text": "log level to warning for your lugs which is a very weird thing to say but",
    "start": "2643180",
    "end": "2649060"
  },
  {
    "text": "it makes sense when the only thing it doesn't make sense if the only thing you're using is logs but if you're using",
    "start": "2649060",
    "end": "2656319"
  },
  {
    "text": "metrics as well or some of you might be using open Telemetry where we're going into a more in-depth situation then look",
    "start": "2656319",
    "end": "2664000"
  },
  {
    "text": "for look for you are just a single tool and you can use more to note replication is working you do not need to have a big",
    "start": "2664000",
    "end": "2670960"
  },
  {
    "text": "long string to tell you that things are okay how useful is this to you it's probably not so useful you can get",
    "start": "2670960",
    "end": "2677800"
  },
  {
    "text": "Diagnostics out of this how long the request took and all that and slap it into just a data store maybe Prometheus",
    "start": "2677800",
    "end": "2685119"
  },
  {
    "text": "maybe use graphene to visualize and so on you don't need your log level to be so",
    "start": "2685119",
    "end": "2691119"
  },
  {
    "text": "low in production of course so in my opinion you should consider",
    "start": "2691119",
    "end": "2696220"
  },
  {
    "text": "using warning as the default log level it does not mean that you should have no information logs you can control the",
    "start": "2696220",
    "end": "2703240"
  },
  {
    "text": "category if you remember in that upselling.json file and still have some information logs but you have to use",
    "start": "2703240",
    "end": "2710380"
  },
  {
    "text": "them sparingly you don't want to use everything it's gonna make your life so much easier",
    "start": "2710380",
    "end": "2715900"
  },
  {
    "text": "as well if when you eventually start filtering for your logs and want to see how your application failed",
    "start": "2715900",
    "end": "2722319"
  },
  {
    "text": "now how many of you have heard this quote before pretty much optimization is the",
    "start": "2722319",
    "end": "2728079"
  },
  {
    "text": "root of a level cool Nick",
    "start": "2728079",
    "end": "2735000"
  },
  {
    "text": "I believe that the root of all evil is misunderstanding what this quote",
    "start": "2735220",
    "end": "2740920"
  },
  {
    "text": "actually means because it is actually used as an excuse to write bad code that",
    "start": "2740920",
    "end": "2747819"
  },
  {
    "text": "could be very good by default and also to just throw a bit of a",
    "start": "2747819",
    "end": "2754180"
  },
  {
    "text": "responsibility of knowing how to write performance code away because nothing from what I've shown you today",
    "start": "2754180",
    "end": "2759900"
  },
  {
    "text": "inherently is about performance but I'm sure some of you will walk out of this room assuming that this guy just talked",
    "start": "2759900",
    "end": "2765760"
  },
  {
    "text": "to us for 50 minutes explaining how we can write fast logs which is not the case it's how you can write reliable",
    "start": "2765760",
    "end": "2771940"
  },
  {
    "text": "logs and deterministic logs so do not assume that this is any",
    "start": "2771940",
    "end": "2778260"
  },
  {
    "text": "performance anything performance related but hopefully what I've shown you today",
    "start": "2778260",
    "end": "2783760"
  },
  {
    "text": "because we did not just look into logs we looked into boxing memory string tabulation a bunch of stuff struct you",
    "start": "2783760",
    "end": "2790060"
  },
  {
    "text": "can use all that knowledge to know how to optimize when the time comes to optimize which is very important it's",
    "start": "2790060",
    "end": "2796119"
  },
  {
    "text": "one thing to say this does not need to be optimized right now which I very much agree with and it's another thing to say",
    "start": "2796119",
    "end": "2803920"
  },
  {
    "text": "okay time time to optimize okay how do we optimize and then you know how to optimize and",
    "start": "2803920",
    "end": "2810339"
  },
  {
    "text": "then you do it so I want to end this with",
    "start": "2810339",
    "end": "2816040"
  },
  {
    "text": "another opinion which is why do we log why are we doing this well",
    "start": "2816040",
    "end": "2822280"
  },
  {
    "text": "ultimately it's all about telling a story it's about telling a story of how something ideally failed it doesn't have to be",
    "start": "2822280",
    "end": "2828940"
  },
  {
    "text": "about how something failed but it usually is or at least you're looking at it when the time comes to see why",
    "start": "2828940",
    "end": "2835000"
  },
  {
    "text": "something filed and now there's books and there's good books",
    "start": "2835000",
    "end": "2841260"
  },
  {
    "text": "now arguably if you read both of them you might get the same information from both",
    "start": "2841260",
    "end": "2848140"
  },
  {
    "text": "but you spend way more time on the first one than the second",
    "start": "2848140",
    "end": "2854880"
  },
  {
    "text": "the problem is that we are not with our logs what we in Greece called laconic",
    "start": "2855460",
    "end": "2861760"
  },
  {
    "text": "any of you know what this word means cool I was in Romania again and",
    "start": "2861760",
    "end": "2867819"
  },
  {
    "text": "apparently they have the same world in the vocabulary I expected no one to raise their hand everyone raised her hand",
    "start": "2867819",
    "end": "2873520"
  },
  {
    "text": "so yeah laconic has to do with Spartans not",
    "start": "2873520",
    "end": "2878680"
  },
  {
    "text": "these ones not these ones these ones the real ones",
    "start": "2878680",
    "end": "2884500"
  },
  {
    "text": "I have to censor it so the Spartans were very very well",
    "start": "2884500",
    "end": "2890140"
  },
  {
    "text": "known obviously the fighting ability and being um fighters from a very young age but",
    "start": "2890140",
    "end": "2895960"
  },
  {
    "text": "they were also known for being glyconic which has to do with Laconia which is where asparta is based",
    "start": "2895960",
    "end": "2902819"
  },
  {
    "text": "and the word after all these years actually means using very few words to express yourself",
    "start": "2902920",
    "end": "2909700"
  },
  {
    "text": "and I like to use the same sort of mindset for logging because the way I like to think about",
    "start": "2909700",
    "end": "2915579"
  },
  {
    "text": "logging is I want to be accurate descriptive and short I don't want it to be lacking",
    "start": "2915579",
    "end": "2922660"
  },
  {
    "text": "information I want the same information but with less fluff tell me what happened tell me what happened now so I",
    "start": "2922660",
    "end": "2929200"
  },
  {
    "text": "can act on it I want to have consistent name parameters across my whole system not",
    "start": "2929200",
    "end": "2936280"
  },
  {
    "text": "just the application the system is going to make your life so much easier debugging issues",
    "start": "2936280",
    "end": "2941920"
  },
  {
    "text": "and I want to utilize my log levels properly so I don't have too much chatter in my logs",
    "start": "2941920",
    "end": "2949240"
  },
  {
    "text": "so in the final rule for me is rule number eight I should only log what's necessary to",
    "start": "2949240",
    "end": "2955720"
  },
  {
    "text": "tell a good story thank you very much and keep coding [Applause]",
    "start": "2955720",
    "end": "2969429"
  }
]