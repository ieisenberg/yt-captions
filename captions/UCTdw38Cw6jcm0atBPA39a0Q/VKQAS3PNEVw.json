[
  {
    "text": "i want to start this talk off with the show of let's say virtual hands so have you ever worked with a react",
    "start": "1280",
    "end": "8080"
  },
  {
    "text": "component that was just particularly bad have you",
    "start": "8080",
    "end": "13679"
  },
  {
    "text": "ever written one well if you didn't at least mentally raise your hand right now you're not just",
    "start": "13679",
    "end": "20160"
  },
  {
    "text": "lying to me you're lying to yourself but what is this concept of a bad component",
    "start": "20160",
    "end": "27439"
  },
  {
    "text": "we have this intuition about how it makes us feel but what specifically made that component you just thought of",
    "start": "27439",
    "end": "33600"
  },
  {
    "text": "so bad i've tried to come up with a few main categories of terribleness the first and",
    "start": "33600",
    "end": "40719"
  },
  {
    "text": "most obvious center is when the components api it's props it's either too complex to understand badly named",
    "start": "40719",
    "end": "48640"
  },
  {
    "text": "or a combination of both if your api doesn't make sense it's extra frustrating when there's no",
    "start": "48640",
    "end": "55360"
  },
  {
    "text": "documentation to explain it to you or even worse if there is some but it's out of date",
    "start": "55360",
    "end": "62719"
  },
  {
    "text": "if you've been so unfortunate that you've had to fix a bug on one of these bad components you'll probably turn pale by looking at",
    "start": "62719",
    "end": "69520"
  },
  {
    "text": "how it's tested if it's tested at all complex components make for complex",
    "start": "69520",
    "end": "75840"
  },
  {
    "text": "testing which in turn leads you to silently skip that part",
    "start": "75840",
    "end": "81438"
  },
  {
    "text": "and if you're adding a feature or rewriting your components to use hooks you're probably in for a treat",
    "start": "81680",
    "end": "87520"
  },
  {
    "text": "hundreds or thousands of lines of code jump at you that you have to change and making sure it's impossible to do a",
    "start": "87520",
    "end": "93840"
  },
  {
    "text": "single character change without breaking at least 20 tests and definitely dropping",
    "start": "93840",
    "end": "99759"
  },
  {
    "text": "ie support what you're left with then is a pretty poor user experience",
    "start": "99759",
    "end": "106000"
  },
  {
    "text": "not the end user they might not notice a thing react is cool like that but the user",
    "start": "106000",
    "end": "111680"
  },
  {
    "text": "that matters in this context is you the developer",
    "start": "111680",
    "end": "117438"
  },
  {
    "text": "it's important to feel compassion for your fellow developers and write code that they will find easy",
    "start": "117920",
    "end": "123040"
  },
  {
    "text": "to work with so how can we turn this frown upside down we're going to explore what",
    "start": "123040",
    "end": "130560"
  },
  {
    "text": "makes good components good and how you can write react code that your colleagues will love code that",
    "start": "130560",
    "end": "136800"
  },
  {
    "text": "you will love in a few weeks time oh by the way uh before we get into this i'm",
    "start": "136800",
    "end": "143280"
  },
  {
    "text": "christopher and i work for beck here in oslo norway i've been writing react apps",
    "start": "143280",
    "end": "148959"
  },
  {
    "text": "for most of my career and i can tell you right away that all of the tips that you'll receive in this talk",
    "start": "148959",
    "end": "154560"
  },
  {
    "text": "is earned the hard way my colleagues will probably tell you that i've learned them through repeated failure",
    "start": "154560",
    "end": "162560"
  },
  {
    "text": "first though i want to dive into this term compassion it's one of those words i struggle to",
    "start": "164000",
    "end": "170000"
  },
  {
    "text": "define to me it's that feeling you get when thinking of how others feel",
    "start": "170000",
    "end": "176160"
  },
  {
    "text": "the most formal definition is co-suffering or feeling for another but no matter how",
    "start": "176160",
    "end": "181840"
  },
  {
    "text": "you word it it's about putting yourself in somebody else's shoes and envisioning their",
    "start": "181840",
    "end": "187040"
  },
  {
    "text": "struggles showing an interest in other people's well-being is part of",
    "start": "187040",
    "end": "193440"
  },
  {
    "text": "most if not all cultures and religions understanding how people's struggles and hardships can be a powerful emotion",
    "start": "193440",
    "end": "200879"
  },
  {
    "text": "and a catalyst for change most people have probably felt some sort of compassion for the situation",
    "start": "200879",
    "end": "207200"
  },
  {
    "text": "currently unfolding in the u.s we try to understand how african americans feel when they are being",
    "start": "207200",
    "end": "212640"
  },
  {
    "text": "systematically targeted harassed and abused some help out by donating",
    "start": "212640",
    "end": "218080"
  },
  {
    "text": "spreading the message of equality or protesting for their cause but all this is driven by the compassion",
    "start": "218080",
    "end": "224080"
  },
  {
    "text": "for people in a hard situation but how does this all translate how do",
    "start": "224080",
    "end": "231519"
  },
  {
    "text": "we apply this very very emotion driven concept of compassion",
    "start": "231519",
    "end": "236959"
  },
  {
    "text": "to react well my claim is that code is communication",
    "start": "236959",
    "end": "243439"
  },
  {
    "text": "when you write code you're transmitting your intent to other people or your future self the people reading",
    "start": "243439",
    "end": "249200"
  },
  {
    "text": "your code want to understand you but for optimizing this communication flow",
    "start": "249200",
    "end": "254879"
  },
  {
    "text": "it's it's something that we really do explicitly again leading to intent being lost in",
    "start": "254879",
    "end": "260479"
  },
  {
    "text": "the translation the common componentization of front-end code",
    "start": "260479",
    "end": "266080"
  },
  {
    "text": "is making collaboration easier than ever you can create custom hooks and complete ui pieces",
    "start": "266080",
    "end": "271120"
  },
  {
    "text": "and ship them off as an npm package in minutes that also puts an added importance on",
    "start": "271120",
    "end": "276479"
  },
  {
    "text": "this developer to developer communication how do you onboard users to your open",
    "start": "276479",
    "end": "281520"
  },
  {
    "text": "source library for example how do you make them feel it's a good library to use",
    "start": "281520",
    "end": "288000"
  },
  {
    "text": "the way we communicate is different from our day-to-day communication too because instead of words and body",
    "start": "288479",
    "end": "293919"
  },
  {
    "text": "language like we are doing now and now we communicate through props and docs and test cases",
    "start": "293919",
    "end": "301280"
  },
  {
    "text": "writing code that other people will love to use work with and extend is hard but it's what i call",
    "start": "301280",
    "end": "307120"
  },
  {
    "text": "compassionate and creating components that takes other people's needs and wants into consideration",
    "start": "307120",
    "end": "312800"
  },
  {
    "text": "that's what i call compassionate components so but so how do we get there",
    "start": "312800",
    "end": "320000"
  },
  {
    "text": "how do we show compassion to our fellow developers through our react code",
    "start": "320000",
    "end": "325120"
  },
  {
    "text": "well first we need to figure out what makes good components good and in many cases",
    "start": "325120",
    "end": "330400"
  },
  {
    "text": "cases it's the opposite of what makes them bad so first you want to create explicit",
    "start": "330400",
    "end": "338080"
  },
  {
    "text": "and extendable props that are both intuitive and easy to use you want to write extensive",
    "start": "338080",
    "end": "343680"
  },
  {
    "text": "documentation that is easily accessible when you need it and use tools and write tests that give",
    "start": "343680",
    "end": "349120"
  },
  {
    "text": "you real confidence in your code it doesn't get in the way of writing or refactoring it",
    "start": "349120",
    "end": "355199"
  },
  {
    "text": "write code that is easy to extend with new features as well while still maintaining all the other traits of a",
    "start": "355199",
    "end": "360319"
  },
  {
    "text": "good component and those are the topics we'll discuss in this talk",
    "start": "360319",
    "end": "366720"
  },
  {
    "text": "props back in the 90s props for some people gave you when it looked particularly fly",
    "start": "366720",
    "end": "373520"
  },
  {
    "text": "today we use the term to indicate that data and functions were sent to our react components",
    "start": "373520",
    "end": "378880"
  },
  {
    "text": "perhaps not as fly but i digress these props is the interface of our",
    "start": "378880",
    "end": "384560"
  },
  {
    "text": "component this is how we interact with it or put in another way it's the api of our component",
    "start": "384560",
    "end": "392479"
  },
  {
    "text": "we pass data in and we expect a result to show up in our browser or mobile app so how do we",
    "start": "392479",
    "end": "399759"
  },
  {
    "text": "create a nice api for our components are there any rules or prior art we can lean on here or do we have to figure out",
    "start": "399759",
    "end": "406400"
  },
  {
    "text": "what's important from scratch now api design is not a new term we've",
    "start": "406400",
    "end": "413840"
  },
  {
    "text": "all probably heard it before it's probably decades old but we typically think of api design in",
    "start": "413840",
    "end": "420560"
  },
  {
    "text": "connection to rest and soap apis or some other data transferring stuff but as it turns",
    "start": "420560",
    "end": "426080"
  },
  {
    "text": "out api design can be just as much about how you structure your interfaces between your components",
    "start": "426080",
    "end": "433440"
  },
  {
    "text": "when i did the research for this talk i read some prior art on what people would consider good api",
    "start": "433919",
    "end": "439680"
  },
  {
    "text": "traits and we found a few things that most people agreed on",
    "start": "439680",
    "end": "444560"
  },
  {
    "text": "first of all is versioning because stability is key the more churn you have in your apis the",
    "start": "445520",
    "end": "450960"
  },
  {
    "text": "more pissed off your users will be because their intuition is broken and they need to learn the new api",
    "start": "450960",
    "end": "457039"
  },
  {
    "text": "and unlearn the old one make sure you have as few breaking changes in your apis as possible and keep",
    "start": "457039",
    "end": "463120"
  },
  {
    "text": "each one as small as possible error messages they're incredibly",
    "start": "463120",
    "end": "469440"
  },
  {
    "text": "important because when there's an error good information is key to fix it so help users fix the problem instead of",
    "start": "469440",
    "end": "476240"
  },
  {
    "text": "blaming them for doing something wrong developers are flimsy beings and they",
    "start": "476240",
    "end": "483199"
  },
  {
    "text": "don't like surprises so make your api intuitive by following the best practices and naming conventions that apply to you",
    "start": "483199",
    "end": "490960"
  },
  {
    "text": "and most importantly do things the same way across all of your apis",
    "start": "490960",
    "end": "497440"
  },
  {
    "text": "and finally minimize your api surface the less surface your api has the less",
    "start": "497440",
    "end": "503680"
  },
  {
    "text": "the user has to learn expose only what you know that your users will need",
    "start": "503680",
    "end": "508720"
  },
  {
    "text": "and only when they need it now these are good guidelines for rest",
    "start": "508720",
    "end": "514399"
  },
  {
    "text": "apis but it sure seems like they would translate well for react components as well right so based",
    "start": "514399",
    "end": "520000"
  },
  {
    "text": "on this insight and about six years of experience here are my favorite techniques when designing the props of",
    "start": "520000",
    "end": "525920"
  },
  {
    "text": "my components first i like to avoid boolean props if",
    "start": "525920",
    "end": "531920"
  },
  {
    "text": "at all possible a boolean is absolute in its very nature and it doesn't lend itself to making",
    "start": "531920",
    "end": "537519"
  },
  {
    "text": "extendable interfaces let me explain with an example when you when you're creating your new",
    "start": "537519",
    "end": "544640"
  },
  {
    "text": "fancy button you might want to create different variants of it let's say you have a base version without any",
    "start": "544640",
    "end": "550320"
  },
  {
    "text": "styling at all and a primary button that you use for the really important stuff like signing people in",
    "start": "550320",
    "end": "557200"
  },
  {
    "text": "since jsx has this really nice syntax for boolean props where you can skip using the value you'll just write a",
    "start": "557200",
    "end": "564480"
  },
  {
    "text": "primary prop which turns your button bright and attention seeking no time at all",
    "start": "564480",
    "end": "570080"
  },
  {
    "text": "a few weeks later you're creating a new landing page and those attention seeking primary buttons needs a toned down",
    "start": "570080",
    "end": "576480"
  },
  {
    "text": "sibling so you add a secondary prop which magically makes all your buttons a bit more laid back",
    "start": "576480",
    "end": "582399"
  },
  {
    "text": "still we're all good at some point though you're asked to add the cta variant by the sales team since cta",
    "start": "582399",
    "end": "589760"
  },
  {
    "text": "or call to action but needs to blink or whatever they do to make sure people buy your stuff",
    "start": "589760",
    "end": "595760"
  },
  {
    "text": "and this starts to complicate things because you're now pulling in a new naming category or strategy",
    "start": "595760",
    "end": "601519"
  },
  {
    "text": "could a button be both primary and a cta you don't know but you now have primary",
    "start": "601519",
    "end": "608000"
  },
  {
    "text": "buttons and secondary buttons and cta buttons but technically you can have all three simultaneously",
    "start": "608000",
    "end": "614959"
  },
  {
    "text": "there's nothing that stops you from doing this at least not technically and even if you know that the cta button",
    "start": "614959",
    "end": "621519"
  },
  {
    "text": "and primary button are two props that are mutually exclusive the next developer to join your team",
    "start": "621519",
    "end": "626959"
  },
  {
    "text": "might not instead i suggest you use enumerated values in a string",
    "start": "626959",
    "end": "633200"
  },
  {
    "text": "like variant here later if you want to add new variants you don't have to expand the api with a",
    "start": "633200",
    "end": "639519"
  },
  {
    "text": "new prop just a new available enum value for the already existing one",
    "start": "639519",
    "end": "644800"
  },
  {
    "text": "just make sure you don't allow for impossible states too so it's a double win",
    "start": "644800",
    "end": "650320"
  },
  {
    "text": "that being said sometimes bullying props are the right tool for the job sometimes things are just true or false",
    "start": "650320",
    "end": "657680"
  },
  {
    "text": "and the concepts they describe isn't an expandable one whether the button is disabled or",
    "start": "657680",
    "end": "664399"
  },
  {
    "text": "whether it's in a loading state or not those could still be valid use cases",
    "start": "664399",
    "end": "669839"
  },
  {
    "text": "just think twice before you decide on using a boolean prop because more often than not",
    "start": "669839",
    "end": "675440"
  },
  {
    "text": "you should be using enumerated values instead",
    "start": "675440",
    "end": "679680"
  },
  {
    "text": "one of my favorite things about react is how it makes it easy to compose huge apps",
    "start": "681040",
    "end": "686399"
  },
  {
    "text": "from tiny building blocks or components each with its own responsibility ui and",
    "start": "686399",
    "end": "692320"
  },
  {
    "text": "interface you should take advantage of this part of react make components that compose",
    "start": "692320",
    "end": "697680"
  },
  {
    "text": "together i'll explain with an example let's look at a modal component now i",
    "start": "697680",
    "end": "705200"
  },
  {
    "text": "know a lot of people aren't huge fans of this particular piece of ui but i've encountered it enough times",
    "start": "705200",
    "end": "710800"
  },
  {
    "text": "that i know it might be relatable they often end up requiring tons of props though since there are so many",
    "start": "710800",
    "end": "716399"
  },
  {
    "text": "variations we need to cater to now this is just a tiny fraction of what",
    "start": "716399",
    "end": "721839"
  },
  {
    "text": "you'll see in complete modal libraries and the list goes on and on",
    "start": "721839",
    "end": "728000"
  },
  {
    "text": "to me understanding and learning this huge api is a really hard task and i'd rather just not it's not a very compassionate",
    "start": "728000",
    "end": "735440"
  },
  {
    "text": "thing to ask your consumers to deal with in my opinion instead we can break things up into a",
    "start": "735440",
    "end": "740800"
  },
  {
    "text": "modal's unique parts and it has a few of them the overlay the",
    "start": "740800",
    "end": "747279"
  },
  {
    "text": "faded out background the white content box on top of it the close button perhaps a title",
    "start": "747279",
    "end": "754639"
  },
  {
    "text": "a content holder and perhaps even a footer with some",
    "start": "754639",
    "end": "760480"
  },
  {
    "text": "action buttons on it and by creating small components that combine together to create something",
    "start": "760480",
    "end": "766639"
  },
  {
    "text": "you have the flexibility to create exactly what you want if you want something out of the ordinary perhaps we wanted a version",
    "start": "766639",
    "end": "773920"
  },
  {
    "text": "without a close button or perhaps we don't have a meaningful title or perhaps we wanted a pink overlay",
    "start": "773920",
    "end": "780720"
  },
  {
    "text": "today the downside of this is of course that this flexibility",
    "start": "780720",
    "end": "786000"
  },
  {
    "text": "is a huge overkill like most of the time most people use complex components in",
    "start": "786000",
    "end": "791360"
  },
  {
    "text": "the exact same way giving them this huge api is just going to be",
    "start": "791360",
    "end": "796639"
  },
  {
    "text": "in the way or create a ton of tiny design variations which we don't really want either but",
    "start": "796639",
    "end": "802959"
  },
  {
    "text": "what's stopping us from having both luckily there's nothing stopping us from",
    "start": "802959",
    "end": "808240"
  },
  {
    "text": "creating another component that just does all this boilerplate for us and combining all of these composable",
    "start": "808240",
    "end": "813600"
  },
  {
    "text": "components in a pre-defined way these components can cater to the 90 to",
    "start": "813600",
    "end": "819279"
  },
  {
    "text": "95 percent of use cases where we want to default layout or default behavior",
    "start": "819279",
    "end": "824880"
  },
  {
    "text": "and if you want something special you can always break it down to the more basic pieces and roll your own",
    "start": "824880",
    "end": "831440"
  },
  {
    "text": "this is a great technique for a lot of different components from buttons and drop downs to product",
    "start": "831440",
    "end": "836800"
  },
  {
    "text": "presentations and site layouts my third rule of thumb when it comes to",
    "start": "836800",
    "end": "843440"
  },
  {
    "text": "components and their apis is to make sure i allow for semantics when it comes to creating",
    "start": "843440",
    "end": "849279"
  },
  {
    "text": "reusable components you'll never have a guarantee or the full picture for what context they'll be put into",
    "start": "849279",
    "end": "855440"
  },
  {
    "text": "we could use divs to create all of our elements i guess but by doing that we'll lose all the semantic structure structuring",
    "start": "855440",
    "end": "862240"
  },
  {
    "text": "possibilities we get by using html to its full potential so how can we",
    "start": "862240",
    "end": "868320"
  },
  {
    "text": "allow for semantics take this card component it's a box that might",
    "start": "868320",
    "end": "873839"
  },
  {
    "text": "have an image and definitely some content there's no real semantics to a card at least a generic one like this",
    "start": "873839",
    "end": "880160"
  },
  {
    "text": "but the way it's used might vary here we might assume it's a div but it could also be a part of a list",
    "start": "880160",
    "end": "885920"
  },
  {
    "text": "and be a list item if a bunch together with a lot of other cards we could of course",
    "start": "885920",
    "end": "891360"
  },
  {
    "text": "create two very similar components like div card or base card and list item card",
    "start": "891360",
    "end": "896959"
  },
  {
    "text": "but that leads to a lot of code duplication and potential future bugs so luckily there's another way",
    "start": "896959",
    "end": "904560"
  },
  {
    "text": "by providing an ass prop we can allow the developer to decide the correct element based on the context",
    "start": "904560",
    "end": "911600"
  },
  {
    "text": "it's in this can be even more powerful too you can send in other components that render your component",
    "start": "911600",
    "end": "919519"
  },
  {
    "text": "think of your favorite routing libraries link component like react routers link we can make our",
    "start": "919519",
    "end": "926399"
  },
  {
    "text": "card into a link card and a few characters of code but how can we implement this",
    "start": "926399",
    "end": "934079"
  },
  {
    "text": "here is a super basic implementation of a card component it renders a div with a card class on it",
    "start": "934160",
    "end": "940079"
  },
  {
    "text": "and that's about it so let's introduce that new as prop here we rename the as prop to element",
    "start": "940079",
    "end": "947519"
  },
  {
    "text": "with a capital e this is done so that we can override what dom element is rendered by our component",
    "start": "947519",
    "end": "953360"
  },
  {
    "text": "note that if we don't pass in an as prop we'll default to a dip we can also do this",
    "start": "953360",
    "end": "960639"
  },
  {
    "text": "by deconstructing the props directly in the argument list complete with renaming and providing a",
    "start": "960639",
    "end": "965680"
  },
  {
    "text": "default value now i know the syntax is trash but it's",
    "start": "965680",
    "end": "971120"
  },
  {
    "text": "one of those things you get comfortable with really quick for some reason now our component is",
    "start": "971120",
    "end": "977759"
  },
  {
    "text": "completely adaptable to whatever context you put it in and you can do the same with all kinds of elements cards can become whatever",
    "start": "977759",
    "end": "984720"
  },
  {
    "text": "you want some buttons might need to be links instead your grid system might provide some extra content hints by",
    "start": "984720",
    "end": "991360"
  },
  {
    "text": "using sections or articles for in the right places and you can create truly basic",
    "start": "991360",
    "end": "996720"
  },
  {
    "text": "components that can be composed together with all the semantic meaning you need",
    "start": "996720",
    "end": "1002639"
  },
  {
    "text": "you might have noticed though that my last example was somewhat flawed i made my card into a link and provided",
    "start": "1003279",
    "end": "1010000"
  },
  {
    "text": "it with a two prop to indicate where it should link to but that prop was never applied anywhere",
    "start": "1010000",
    "end": "1015440"
  },
  {
    "text": "it just was forgotten about so that wouldn't work and think about more generic components",
    "start": "1015440",
    "end": "1021279"
  },
  {
    "text": "like buttons or input fields do you even know half the available html attributes for an input field",
    "start": "1021279",
    "end": "1027839"
  },
  {
    "text": "i don't and i don't have to thanks my next tip spread the remaining props",
    "start": "1027839",
    "end": "1034959"
  },
  {
    "text": "since we're talking about our previous example let's go back and fix it we first",
    "start": "1034959",
    "end": "1040240"
  },
  {
    "text": "collect all the remaining props from our destructuring assignment and use the rest operator to place them in an object",
    "start": "1040240",
    "end": "1046000"
  },
  {
    "text": "we call rest next we spread those props on our root element with the spread",
    "start": "1046000",
    "end": "1051280"
  },
  {
    "text": "operator like so there's one more thing to do though because if you paid attention here as",
    "start": "1051280",
    "end": "1056880"
  },
  {
    "text": "well you might have noticed that i introduced a new bug right now if the developer passes the class name",
    "start": "1056880",
    "end": "1062400"
  },
  {
    "text": "it will override the existing card class that's probably not what i want i wanted to extend my component not just write",
    "start": "1062400",
    "end": "1070160"
  },
  {
    "text": "stuff so to fix this i pick out the class name prop from the props object",
    "start": "1070160",
    "end": "1076240"
  },
  {
    "text": "so that it's not in the rest object i end up spreading out i give it a default value of an empty string",
    "start": "1076240",
    "end": "1082160"
  },
  {
    "text": "and then i concatenate it together with the existing class prop and there you have it now we can pass in",
    "start": "1082160",
    "end": "1088640"
  },
  {
    "text": "whatever props you want without getting into trouble the technique uh works really well",
    "start": "1088640",
    "end": "1094799"
  },
  {
    "text": "the with the spreading of props but it comes with a few caveats though first",
    "start": "1094799",
    "end": "1101440"
  },
  {
    "text": "you always need to remember to combine any internal props you're adding to your component so if you add an",
    "start": "1101440",
    "end": "1107600"
  },
  {
    "text": "internal on click handler make sure you allow the user to send in its own enclave handler as well",
    "start": "1107600",
    "end": "1113840"
  },
  {
    "text": "and then you need to remember to call both of them second if you can't combine props you have to decide whether people",
    "start": "1113840",
    "end": "1120160"
  },
  {
    "text": "should be able to override your props or if you should override theirs",
    "start": "1120160",
    "end": "1126000"
  },
  {
    "text": "and that kind of depends on the use case and mostly personal preference to be honest with you",
    "start": "1126000",
    "end": "1131280"
  },
  {
    "text": "i like to let the end user to decide as much as possible but that's always up to you and the",
    "start": "1131280",
    "end": "1137280"
  },
  {
    "text": "situation and third this works best for components with the single dom node so it's easy to",
    "start": "1137280",
    "end": "1143600"
  },
  {
    "text": "understand where the props will be placed there are some exceptions of course but complex components often lead to",
    "start": "1143600",
    "end": "1149840"
  },
  {
    "text": "misunderstandings and hard to understand apis but with these caveats in mind though",
    "start": "1149840",
    "end": "1156400"
  },
  {
    "text": "you should remember to spread the remaining props wherever you can",
    "start": "1156400",
    "end": "1161679"
  },
  {
    "text": "whenever you're designing a component it's easy to get creative with the props naming those html attributes from the 1990s are",
    "start": "1162400",
    "end": "1170000"
  },
  {
    "text": "so hard to type and they often could have had better names i guess but i urge you avoid renaming existing",
    "start": "1170000",
    "end": "1177120"
  },
  {
    "text": "dom attributes in your props i'll show you why through",
    "start": "1177120",
    "end": "1182160"
  },
  {
    "text": "an example at a previous project we created the almighty button component it was flexible nice looking lots of",
    "start": "1182160",
    "end": "1189440"
  },
  {
    "text": "people used it throughout the organization there was a few different types of buttons though like a primary",
    "start": "1189440",
    "end": "1194799"
  },
  {
    "text": "and a secondary button and we used the type prop to specify what type or button it was and this worked",
    "start": "1194799",
    "end": "1203280"
  },
  {
    "text": "out well too up until one developer placed a few buttons next to each other inside of a form",
    "start": "1203280",
    "end": "1208400"
  },
  {
    "text": "it turns out there is a native type prop or type attribute on the button element which takes the value of either",
    "start": "1208400",
    "end": "1214559"
  },
  {
    "text": "submit button or reset and the default is submit so when a button has a type of submit it triggers",
    "start": "1214559",
    "end": "1221360"
  },
  {
    "text": "the forms on submit function and we didn't want that to happen in our particular use case we wanted nothing to",
    "start": "1221360",
    "end": "1227120"
  },
  {
    "text": "happen except the on-click command since we spread the props though we didn't have a",
    "start": "1227120",
    "end": "1232480"
  },
  {
    "text": "way to set both that we wanted the button to be primary and to be a regular button button",
    "start": "1232480",
    "end": "1238480"
  },
  {
    "text": "there were tons of people using our button throughout the organization and since we didn't want to create a huge break and change for people we did a",
    "start": "1238480",
    "end": "1244720"
  },
  {
    "text": "huge mistake and introduced the button type prop",
    "start": "1244720",
    "end": "1250000"
  },
  {
    "text": "now this solved our problem at hand but it created a terrible api",
    "start": "1250000",
    "end": "1255120"
  },
  {
    "text": "and even if you knew the backstory to it uh this like it made sense",
    "start": "1255120",
    "end": "1261440"
  },
  {
    "text": "but new developers that joined the organization understood nothing they thought we were terrible developers",
    "start": "1261440",
    "end": "1267360"
  },
  {
    "text": "which in hindsight i guess we were so learn from our mistakes back then and never override an",
    "start": "1267360",
    "end": "1273360"
  },
  {
    "text": "existing dom attribute with a prop name even if it's esoteric then you probably won't even",
    "start": "1273360",
    "end": "1279120"
  },
  {
    "text": "care about it but just come up with another name instead like this api for example which is much",
    "start": "1279120",
    "end": "1285360"
  },
  {
    "text": "easier to understand and this goes on for tons of other types of props too i see for example",
    "start": "1285360",
    "end": "1292480"
  },
  {
    "text": "renaming dom props a lot when it comes to area attributes",
    "start": "1292480",
    "end": "1297840"
  },
  {
    "text": "like instead of just writing out area busy like normal person would you might write is",
    "start": "1297840",
    "end": "1303200"
  },
  {
    "text": "loading or area busy in camel case and this leads to a lot of variations",
    "start": "1303200",
    "end": "1309440"
  },
  {
    "text": "across your code base probably because different people come up with different naming strategies so it could be loading",
    "start": "1309440",
    "end": "1315360"
  },
  {
    "text": "is loading lusted in norwegian or you could be a ton of",
    "start": "1315360",
    "end": "1320720"
  },
  {
    "text": "different stuff and all that makes it hard to intuitively guess the api",
    "start": "1320720",
    "end": "1325760"
  },
  {
    "text": "of your component and other components in your score of components so instead",
    "start": "1325760",
    "end": "1332400"
  },
  {
    "text": "take advantage of the fact that you're spreading your props already this way you don't have to come up with",
    "start": "1332400",
    "end": "1337440"
  },
  {
    "text": "names first of all and you don't have to write a prop type or typing for it you don't have to add a new prop for",
    "start": "1337440",
    "end": "1343679"
  },
  {
    "text": "every new area or dom attribute that you or your consumers can think of that's a bonus",
    "start": "1343679",
    "end": "1350640"
  },
  {
    "text": "this provides you with a small yet well-defined api that is flexible enough to rarely change",
    "start": "1350960",
    "end": "1356880"
  },
  {
    "text": "it all these five rules of thumb will help you",
    "start": "1356880",
    "end": "1362880"
  },
  {
    "text": "create components that are easy to understand easy to use and easy to extend",
    "start": "1362880",
    "end": "1367919"
  },
  {
    "text": "and even easy to like but the most important takeaway from this section is that you should",
    "start": "1367919",
    "end": "1373039"
  },
  {
    "text": "sign your api and don't let it be a coincidence design the props of your component so",
    "start": "1373039",
    "end": "1378480"
  },
  {
    "text": "that they're easy for the next developer to understand and extend if they need to",
    "start": "1378480",
    "end": "1384320"
  },
  {
    "text": "the next thing i want to talk about is documentation and documentation is a loaded word i",
    "start": "1385600",
    "end": "1392080"
  },
  {
    "text": "know it's filled with the memories of the stuff you wrote into confluence once and nobody ever saw again",
    "start": "1392080",
    "end": "1399679"
  },
  {
    "text": "and most of us are probably filled with bad experiences with documentation too because it's tedious to write nobody",
    "start": "1399679",
    "end": "1406640"
  },
  {
    "text": "ever reads it and if somebody does stumble across it you know it's outdated",
    "start": "1406640",
    "end": "1412320"
  },
  {
    "text": "but have you ever experienced amazing docs when done right documentation can be a",
    "start": "1412320",
    "end": "1417919"
  },
  {
    "text": "joy both to write and to consume great documentation is always easily",
    "start": "1417919",
    "end": "1423520"
  },
  {
    "text": "available and available right when you need it where you need it great docs are always up to date even",
    "start": "1423520",
    "end": "1430240"
  },
  {
    "text": "with that latest feature that you just shipped and lastly great documentation makes it easier for other developers or",
    "start": "1430240",
    "end": "1437279"
  },
  {
    "text": "even other well future you to understand how your code works",
    "start": "1437279",
    "end": "1442799"
  },
  {
    "text": "which in turn turns speeds up development time and cuts down on cursing so let's look",
    "start": "1442799",
    "end": "1449120"
  },
  {
    "text": "at some ways we can make our code more readable and understandable through documentation",
    "start": "1449120",
    "end": "1456159"
  },
  {
    "text": "the most important part of documentation to me is that the documentation shows up whenever",
    "start": "1456159",
    "end": "1462880"
  },
  {
    "text": "i need it whenever i hover a component or like type it in and autocomplete it i want the editor to",
    "start": "1462880",
    "end": "1469760"
  },
  {
    "text": "tell me all i need to know turns out doing this today is pretty simple",
    "start": "1469760",
    "end": "1475840"
  },
  {
    "text": "jsdoc is a way of writing comments that is easily parsable by our editor which will show",
    "start": "1475840",
    "end": "1481200"
  },
  {
    "text": "whenever you hover a component or a prop or a custom book or a function or whatever really and here is what it",
    "start": "1481200",
    "end": "1488480"
  },
  {
    "text": "looks like you started block comment with two stars instead of one",
    "start": "1488480",
    "end": "1493679"
  },
  {
    "text": "and you're in js doc mode here i've added some docs to our card component from earlier",
    "start": "1493679",
    "end": "1499120"
  },
  {
    "text": "you can write long paragraphs if you want but a simple explanation of the what the how and the why usually suffices",
    "start": "1499120",
    "end": "1507120"
  },
  {
    "text": "you can even add examples these will show up and can be great it",
    "start": "1507120",
    "end": "1513279"
  },
  {
    "text": "can be great to show both simple and more advanced usages of your components and in vs code at least you even get",
    "start": "1513279",
    "end": "1519520"
  },
  {
    "text": "syntax highlighting you can also document your props complete with deprecation warnings and",
    "start": "1519520",
    "end": "1525919"
  },
  {
    "text": "aliases and each of these prop comments will show up whenever i autocomplete any other props",
    "start": "1525919",
    "end": "1531360"
  },
  {
    "text": "on that component that is incredibly useful not only does it show up just in time so",
    "start": "1531360",
    "end": "1537200"
  },
  {
    "text": "i can learn just in time but since it's co-located with your code it should never get out of date",
    "start": "1537200",
    "end": "1542720"
  },
  {
    "text": "and it also documents your code for future maintainers",
    "start": "1542720",
    "end": "1547760"
  },
  {
    "text": "there is a lot of features in js doc and i recommend you give it a shot here's a great resource i used to",
    "start": "1549200",
    "end": "1555279"
  },
  {
    "text": "remember what the different keywords mean but it also auto-completes in your",
    "start": "1555279",
    "end": "1560480"
  },
  {
    "text": "editor and don't worry about writing this down i'll post the slides after",
    "start": "1560480",
    "end": "1568158"
  },
  {
    "text": "sometimes you'll want a documentation website for devs to visit you see this a lot with component",
    "start": "1569520",
    "end": "1575520"
  },
  {
    "text": "libraries or design systems i made a few you want a",
    "start": "1575520",
    "end": "1581200"
  },
  {
    "text": "bit more pros about what to do and what to avoid and you definitely want some nice interactive examples to play with",
    "start": "1581200",
    "end": "1587840"
  },
  {
    "text": "there's a few tools you can use to create stuff like that today but my favorite is by far the gatsby-based",
    "start": "1587840",
    "end": "1593440"
  },
  {
    "text": "dial tool docs docs is a single dependency and gives",
    "start": "1593440",
    "end": "1598880"
  },
  {
    "text": "you basically all you need out of the box it gives you a live playground editor hot reloading for",
    "start": "1598880",
    "end": "1604159"
  },
  {
    "text": "development it parses your props and documents them for you and it gives you a themeable and plugable design that you can",
    "start": "1604159",
    "end": "1611520"
  },
  {
    "text": "customize to whatever degree you want",
    "start": "1611520",
    "end": "1616720"
  },
  {
    "text": "it works by scanning your repository or folders for jsx enabled markdown files and",
    "start": "1616720",
    "end": "1622640"
  },
  {
    "text": "creating a statically generated website you can host wherever that means you can co-locate your",
    "start": "1622640",
    "end": "1628400"
  },
  {
    "text": "markdown documentation with your code as well another added bonus is that it parses",
    "start": "1628400",
    "end": "1634720"
  },
  {
    "text": "your js comments and shows your inline code comments in an easy to read format on the web",
    "start": "1634720",
    "end": "1641679"
  },
  {
    "text": "this is a huge bonus because it means that you in order to be both on the web and be documented in the",
    "start": "1641679",
    "end": "1647679"
  },
  {
    "text": "code you need no documentation duplication whatsoever",
    "start": "1647679",
    "end": "1653600"
  },
  {
    "text": "this is how it looks by default by the way you even it even ships with the dark mode if you want that",
    "start": "1653760",
    "end": "1659440"
  },
  {
    "text": "it's a great way to create more in-depth documentation too which can come in handy for some of the more advanced components you put together",
    "start": "1659440",
    "end": "1668000"
  },
  {
    "text": "another way of documenting your code is creating really good error messages and warnings that show up in the console",
    "start": "1668000",
    "end": "1674399"
  },
  {
    "text": "while developing this comes with a few upsides first of",
    "start": "1674399",
    "end": "1679679"
  },
  {
    "text": "all it helps people new to your code base to use your code correctly so if they consume a context without",
    "start": "1679679",
    "end": "1686480"
  },
  {
    "text": "wrapping your app in the correct provider or if they've passed in an illegal combination of props",
    "start": "1686480",
    "end": "1694880"
  },
  {
    "text": "or if they're using a deprecated feature they can be told why stuff doesn't work in full sentences",
    "start": "1694880",
    "end": "1701679"
  },
  {
    "text": "perhaps you can even link to a custom page in your docs documentation website that goes into more detail about",
    "start": "1701679",
    "end": "1708080"
  },
  {
    "text": "what one should do and how you solve deprecations for example",
    "start": "1708080",
    "end": "1715120"
  },
  {
    "text": "the second nice thing about dev only warnings is that they live with your code",
    "start": "1715120",
    "end": "1720720"
  },
  {
    "text": "they are code i guess so code doesn't get outdated the way documentation does it gets removed or refactored away so",
    "start": "1720720",
    "end": "1727840"
  },
  {
    "text": "thus the warnings are never out of date people reading the code can understand",
    "start": "1727840",
    "end": "1733120"
  },
  {
    "text": "why something goes wrong which is also a huge plus if finally if we're worried about the",
    "start": "1733120",
    "end": "1739520"
  },
  {
    "text": "bytes here you can three shake all these warnings out when you're building for production that means zero added bytes to your app",
    "start": "1739520",
    "end": "1747200"
  },
  {
    "text": "get a much better user experience for the developers",
    "start": "1747200",
    "end": "1752320"
  },
  {
    "text": "documentation is key and it doesn't have to be boring it doesn't have to be outdated and it",
    "start": "1752320",
    "end": "1759360"
  },
  {
    "text": "doesn't have to be left unread focus on placing most of your documentation inside of your component",
    "start": "1759360",
    "end": "1765600"
  },
  {
    "text": "files next to your code use jsdoc to integrate it with your editor use js or use docs to create",
    "start": "1765600",
    "end": "1773679"
  },
  {
    "text": "interactive documentation websites use dev only warnings to document edge cases deprecations and misuse",
    "start": "1773679",
    "end": "1780720"
  },
  {
    "text": "and remember to link to relevant documentation sites in your dev only warnings as well",
    "start": "1780720",
    "end": "1787120"
  },
  {
    "text": "the end result is that your colleagues will love reading your code you put their need for information first",
    "start": "1787120",
    "end": "1792320"
  },
  {
    "text": "while providing it to them just in time",
    "start": "1792320",
    "end": "1796559"
  },
  {
    "text": "so we've learned some ways to create well-crafted props for our components and looked at how we",
    "start": "1798080",
    "end": "1804320"
  },
  {
    "text": "can document their usage the last part of the puzzle to create truly compassionate components at least",
    "start": "1804320",
    "end": "1810080"
  },
  {
    "text": "me is to build trust we need to trust our components",
    "start": "1810080",
    "end": "1816799"
  },
  {
    "text": "but what does it mean to trust your components in my eyes you need to be confident that the components works as",
    "start": "1816799",
    "end": "1823840"
  },
  {
    "text": "intended and that means no bugs edge cases covered it's both usable it's accessible and i",
    "start": "1823840",
    "end": "1831520"
  },
  {
    "text": "can test the component and all its test cases manually but i'd rather have software do it",
    "start": "1831520",
    "end": "1838240"
  },
  {
    "text": "also you need to have a strong sense of confidence if you're ever to refactor your code again you could",
    "start": "1838240",
    "end": "1844880"
  },
  {
    "text": "solve this by full regression tests all the time but those are index are they're expensive and impractical",
    "start": "1844880",
    "end": "1851919"
  },
  {
    "text": "so we need to be confident that we've done a good job implementing stuff before we ship it to our users but",
    "start": "1851919",
    "end": "1858960"
  },
  {
    "text": "what's the best way to get there writing tests for front-end code used to",
    "start": "1858960",
    "end": "1865840"
  },
  {
    "text": "be a nightmare there was shared state a lot of times between the tests the feedback loop was always really",
    "start": "1865840",
    "end": "1873200"
  },
  {
    "text": "really long and we wrote an amazing amount of unit tests",
    "start": "1873200",
    "end": "1878799"
  },
  {
    "text": "today the situation is pretty different we have tools that help us write better code",
    "start": "1878799",
    "end": "1883919"
  },
  {
    "text": "the test runners have become much more developer friendly and but we still tend to test",
    "start": "1883919",
    "end": "1889679"
  },
  {
    "text": "implementation details through a lot of these unit tests",
    "start": "1889679",
    "end": "1894720"
  },
  {
    "text": "in this last section we'll look at how you can build trust in your components while not getting in the way of a good",
    "start": "1894960",
    "end": "1900399"
  },
  {
    "text": "developer experience there are lots of problems that we can",
    "start": "1900399",
    "end": "1906480"
  },
  {
    "text": "use existing tooling to find and report for us i mean us as developers we're obviously",
    "start": "1906480",
    "end": "1912000"
  },
  {
    "text": "pretty smart but machines can be pretty clever too if a program can analyze our code and find",
    "start": "1912000",
    "end": "1918159"
  },
  {
    "text": "bugs for us we can do more useful stuff with our time the most popular tool for analyzing our",
    "start": "1918159",
    "end": "1924399"
  },
  {
    "text": "code these days is eslint and a linter like eslint can spot pretty",
    "start": "1924399",
    "end": "1930080"
  },
  {
    "text": "advanced bugs and fix them sometimes could find potentially infinite loops",
    "start": "1930080",
    "end": "1936159"
  },
  {
    "text": "or you could find like a missing dependency in your use effect or a missing area label in your icon",
    "start": "1936159",
    "end": "1942960"
  },
  {
    "text": "buttons for example or just code smells in general",
    "start": "1942960",
    "end": "1948480"
  },
  {
    "text": "there are tons of ways to set up eslint but the defaults that ship would create react app is",
    "start": "1948480",
    "end": "1953840"
  },
  {
    "text": "usually more than enough if you're not using create react app for your app you can use",
    "start": "1953840",
    "end": "1959200"
  },
  {
    "text": "its predefined rules with extending their config in your eslint config and",
    "start": "1959200",
    "end": "1964559"
  },
  {
    "text": "then just add or remove whatever you don't like eslint has saved me from so shipping so",
    "start": "1964559",
    "end": "1971120"
  },
  {
    "text": "many areas and it helps you avoid avoiding testing the kind of bugs that they fix",
    "start": "1971120",
    "end": "1978158"
  },
  {
    "text": "there's another type of static analysis which is particularly helpful when creating react applications and",
    "start": "1979600",
    "end": "1986000"
  },
  {
    "text": "that's static type systems as you probably know javascript is a",
    "start": "1986000",
    "end": "1991039"
  },
  {
    "text": "dynamic language with no built-in type system this provides us with a lot of flexibility when it comes to solving",
    "start": "1991039",
    "end": "1997039"
  },
  {
    "text": "challenges but it also doesn't provide any safety net at all that worked back in the days when",
    "start": "1997039",
    "end": "2003679"
  },
  {
    "text": "you only had to do a few minor things in javascript but in today's application world",
    "start": "2003679",
    "end": "2009039"
  },
  {
    "text": "that's kind of not good enough the result is that we have to ensure our code can handle whatever input we",
    "start": "2009039",
    "end": "2016320"
  },
  {
    "text": "throw at it leading to the need for lots and lots of unit tests which in turn sucks",
    "start": "2016320",
    "end": "2023279"
  },
  {
    "text": "instead we can use type systems like typescript or flow or more likely typescript",
    "start": "2023279",
    "end": "2028320"
  },
  {
    "text": "to type our interfaces here's an example of the props passed to our button component earlier we can specify the type of",
    "start": "2028320",
    "end": "2035039"
  },
  {
    "text": "arguments and check that the code calling our components are doing it correctly",
    "start": "2035039",
    "end": "2040159"
  },
  {
    "text": "compile time and this way there's no way to misuse the api and you get a really nice and tight",
    "start": "2040159",
    "end": "2046240"
  },
  {
    "text": "feedback loop and a little side note uh",
    "start": "2046240",
    "end": "2051679"
  },
  {
    "text": "typescript or flow used to be a really hard wood react but in modern react with custom hooks and stuff like that",
    "start": "2051679",
    "end": "2058560"
  },
  {
    "text": "it's really as easy as you can think of think of i i was super afraid of it and it turned",
    "start": "2058560",
    "end": "2064560"
  },
  {
    "text": "out to be really really nice so if you haven't given it a shot give it a shot",
    "start": "2064560",
    "end": "2071598"
  },
  {
    "text": "there's actually tons of potential upsides to use uh type in using a type system like typescript",
    "start": "2072000",
    "end": "2077599"
  },
  {
    "text": "in your code right now i won't go through them all in detail it's a an hour-long talk in itself",
    "start": "2077599",
    "end": "2083599"
  },
  {
    "text": "but my favorite ones are that it's much easier to discover what's available in api it gets you get",
    "start": "2083599",
    "end": "2090638"
  },
  {
    "text": "this great audio discovery and auto completion",
    "start": "2090639",
    "end": "2095919"
  },
  {
    "text": "it also replaces most of your unit tests with actual code and finally it makes your factoring so",
    "start": "2095919",
    "end": "2102880"
  },
  {
    "text": "much easier because you can programmatically refactor stuff without having to remember all the stuff that you need to",
    "start": "2102880",
    "end": "2108960"
  },
  {
    "text": "change the name of so consider introducing types to your code base you",
    "start": "2108960",
    "end": "2114079"
  },
  {
    "text": "can do it gradually if you want and there are tons of great resources out there to get you started",
    "start": "2114079",
    "end": "2120720"
  },
  {
    "text": "another thing i want you to remember about testing your react components is that you should avoid testing",
    "start": "2121760",
    "end": "2127040"
  },
  {
    "text": "implementation details and test the stuff like your users use your component",
    "start": "2127040",
    "end": "2133520"
  },
  {
    "text": "by doing this you'll have much more sturdy unit tests which won't break whenever you do a refactor and you'll test that stuff will",
    "start": "2133520",
    "end": "2140880"
  },
  {
    "text": "work for your actual users and not just in your test suit",
    "start": "2140880",
    "end": "2145838"
  },
  {
    "text": "but how do you do that well first off i suggest you throw away whatever you're using today and start using react",
    "start": "2146000",
    "end": "2152880"
  },
  {
    "text": "testing library it's made by the testing wizard of oz can see dots and it helps you",
    "start": "2152880",
    "end": "2159520"
  },
  {
    "text": "interact with your code like your users do next you should test your components only through their props",
    "start": "2159520",
    "end": "2166240"
  },
  {
    "text": "by that i mean never manipulate internal state or call instance methods on class",
    "start": "2166240",
    "end": "2171440"
  },
  {
    "text": "components instead just re-render your app with different props and verify that the right things are",
    "start": "2171440",
    "end": "2176960"
  },
  {
    "text": "rendered finally you should assert that your components work by asserting on visible output",
    "start": "2176960",
    "end": "2184480"
  },
  {
    "text": "rather than class names or ids react testing library has a ton of great selectors to do this",
    "start": "2184480",
    "end": "2190480"
  },
  {
    "text": "for you and as a bonus you can actually use accessible selectors to improve the accessibility of your code as well",
    "start": "2190480",
    "end": "2197040"
  },
  {
    "text": "through getting stuff by role to remember that you have to have different area roles for example",
    "start": "2197040",
    "end": "2204160"
  },
  {
    "text": "finally i want to suggest that you try to write broad tests that covers most of",
    "start": "2205359",
    "end": "2211200"
  },
  {
    "text": "your components if you're testing on an app level aim for writing integration tests that",
    "start": "2211200",
    "end": "2218160"
  },
  {
    "text": "tests the complete vertices of your app by doing this you can write much less",
    "start": "2218160",
    "end": "2223680"
  },
  {
    "text": "tests a few tests will cover huge parts of your code and provide important documentation of happy",
    "start": "2223680",
    "end": "2229760"
  },
  {
    "text": "cases edge cases and airness cases",
    "start": "2229760",
    "end": "2234560"
  },
  {
    "text": "so these are some of my best tips when it comes to making both yourself future",
    "start": "2235280",
    "end": "2241440"
  },
  {
    "text": "developers and consumers trust your components and trust is important when you're building code",
    "start": "2241440",
    "end": "2247280"
  },
  {
    "text": "other people will use without it we second guess every decision made even if",
    "start": "2247280",
    "end": "2252320"
  },
  {
    "text": "they were made for a particular reason to me code is communication code is the",
    "start": "2252320",
    "end": "2260480"
  },
  {
    "text": "language we speak with our fellow developers and the way we communicate our intent so",
    "start": "2260480",
    "end": "2266079"
  },
  {
    "text": "if you don't remember to communicate in a compassionate way considering the needs of the recipient",
    "start": "2266079",
    "end": "2271680"
  },
  {
    "text": "will end up writing code that's hard to understand tricky to extend and often end up being replaced in the long run",
    "start": "2271680",
    "end": "2278720"
  },
  {
    "text": "instead i suggest that you'll consider some of the tips in this talk to improve that communication",
    "start": "2278720",
    "end": "2285839"
  },
  {
    "text": "first of all you need to put some thought into how you structure the props over your components this will",
    "start": "2285920",
    "end": "2292160"
  },
  {
    "text": "make this will help make your components intuitive to use while making them easy to extend",
    "start": "2292160",
    "end": "2298320"
  },
  {
    "text": "creating a good set of props doesn't even need to be that hard if you just follow a few simple guidelines in some talk",
    "start": "2298320",
    "end": "2305680"
  },
  {
    "text": "you need to create documentation that shows up when you need it this will make your components much more",
    "start": "2306880",
    "end": "2312720"
  },
  {
    "text": "usable by the end user in addition it will help future maintainers and that includes you",
    "start": "2312720",
    "end": "2318240"
  },
  {
    "text": "to understand your code better use static analysis for what it's worth",
    "start": "2318240",
    "end": "2324560"
  },
  {
    "text": "you can do a lot less testing by just adding a linter and a type system and a lot less writing at that providing",
    "start": "2324560",
    "end": "2331839"
  },
  {
    "text": "a type system is a particularly helpful of a way of avoiding bugs while improving api",
    "start": "2331839",
    "end": "2337359"
  },
  {
    "text": "discoverability as well and when you test make sure to write",
    "start": "2337359",
    "end": "2342800"
  },
  {
    "text": "wide reaching tests that use your code like your users do",
    "start": "2342800",
    "end": "2348000"
  },
  {
    "text": "this provides you with a lot of confidence when you refactor or otherwise change your code in some way",
    "start": "2348000",
    "end": "2353839"
  },
  {
    "text": "in addition you don't have to do a lot of manual testing before you go into production",
    "start": "2353839",
    "end": "2359200"
  },
  {
    "text": "and finally take a big step back try to envision other developers using",
    "start": "2359200",
    "end": "2366079"
  },
  {
    "text": "your code because when you empathize with their needs and wants you're showing them compassion",
    "start": "2366079",
    "end": "2371440"
  },
  {
    "text": "and when you make sure your you code for other people those other people will end up loving",
    "start": "2371440",
    "end": "2377280"
  },
  {
    "text": "your code that is my talk",
    "start": "2377280",
    "end": "2383040"
  },
  {
    "text": "thanks to tom for watching i'll be in the slack channel answering all your questions if you have any",
    "start": "2383040",
    "end": "2394960"
  }
]