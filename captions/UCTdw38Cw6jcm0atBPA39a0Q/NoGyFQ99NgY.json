[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "good morning everyone thank you for coming to my talk I welcome you at NDC",
    "start": "10450",
    "end": "18340"
  },
  {
    "text": "Oslo hope you're enjoying the conference now we're going to talk about f-sharp",
    "start": "18340",
    "end": "25510"
  },
  {
    "text": "language and why it's so suitable for modeling the business domain so let's",
    "start": "25510",
    "end": "34060"
  },
  {
    "text": "get acquainted something's not working sorry",
    "start": "34060",
    "end": "40860"
  },
  {
    "text": "stop apologizing so my name is Mihaly and I love have",
    "start": "45640",
    "end": "54789"
  },
  {
    "start": "50000",
    "end": "70000"
  },
  {
    "text": "sharp basically that's everything you need to know about me maybe also the",
    "start": "54789",
    "end": "60339"
  },
  {
    "text": "time a.net developer for more than 10 years I don't know something like that",
    "start": "60339",
    "end": "65430"
  },
  {
    "text": "but let's better talk about you who is",
    "start": "65430",
    "end": "71380"
  },
  {
    "start": "70000",
    "end": "99000"
  },
  {
    "text": "familiar with f-sharp here ok quite a lot of people maybe this talk won't be",
    "start": "71380",
    "end": "79330"
  },
  {
    "text": "that interesting for you since I'm here I'm trying to show the beauty of f-sharp",
    "start": "79330",
    "end": "86500"
  },
  {
    "text": "but for others might be interesting and by the way what about dotnet developers",
    "start": "86500",
    "end": "92020"
  },
  {
    "text": "here ok so many things will be familiar for you so just briefly about F sharp F",
    "start": "92020",
    "end": "103299"
  },
  {
    "start": "99000",
    "end": "201000"
  },
  {
    "text": "sharp is a multi paradigm language but",
    "start": "103299",
    "end": "108759"
  },
  {
    "text": "with the focus on functional functional programming so it's functional first",
    "start": "108759",
    "end": "113769"
  },
  {
    "text": "language more to that it has an awesome",
    "start": "113769",
    "end": "119039"
  },
  {
    "text": "algebraic data type system with pattern matching I will show what that means a",
    "start": "119039",
    "end": "125890"
  },
  {
    "text": "bit later also F sharp is a cross-platform thanks to dotnet core or",
    "start": "125890",
    "end": "132760"
  },
  {
    "text": "you can use mono it's pretty stable but nowadays dotnet core is the future",
    "start": "132760",
    "end": "139659"
  },
  {
    "text": "later on it won't be even named net core we just don't need and it works on all",
    "start": "139659",
    "end": "146290"
  },
  {
    "text": "platforms like Windows Linux Mac OS even I don't know Androids that's great one",
    "start": "146290",
    "end": "156700"
  },
  {
    "text": "more benefit of F sharp is that it can be transpired to JavaScript thanks to a",
    "start": "156700",
    "end": "163209"
  },
  {
    "text": "project called fable so basically you can use f sharp everywhere like on",
    "start": "163209",
    "end": "172060"
  },
  {
    "text": "back-end on front-end wherever you want also it's a scripting language so really",
    "start": "172060",
    "end": "179800"
  },
  {
    "text": "everywhere like f-sharp could be on the server on the browser even in your",
    "start": "179800",
    "end": "186550"
  },
  {
    "text": "scripts deploying the build and deploy scripts and it has an awesome community",
    "start": "186550",
    "end": "192130"
  },
  {
    "text": "really supportive and helpful everywhere and yeah so why would I even bother",
    "start": "192130",
    "end": "204490"
  },
  {
    "start": "201000",
    "end": "439000"
  },
  {
    "text": "about f-sharp or any other language because I'm a.net developer and many",
    "start": "204490",
    "end": "209890"
  },
  {
    "text": "people connect dotnet and c-sharp like putting equal sign in between them and",
    "start": "209890",
    "end": "217200"
  },
  {
    "text": "c-sharp is good enough for most of us maybe but there are some things which",
    "start": "217200",
    "end": "225580"
  },
  {
    "text": "which are kind of weird for me first of all one while reading like the code and",
    "start": "225580",
    "end": "233320"
  },
  {
    "text": "supporting it I would like to know what what the programmer meant trying to",
    "start": "233320",
    "end": "238480"
  },
  {
    "text": "write this code to design some logic and a nose model some business domain I",
    "start": "238480",
    "end": "245710"
  },
  {
    "text": "would like to see the intention but what",
    "start": "245710",
    "end": "251290"
  },
  {
    "text": "I usually get some uncertainty simple",
    "start": "251290",
    "end": "258190"
  },
  {
    "text": "example there is another service which gives you it gives you a list of orders",
    "start": "258190",
    "end": "264060"
  },
  {
    "text": "maybe not all orders there are some filtering but doesn't matter it should return a list of order but what can",
    "start": "264060",
    "end": "271780"
  },
  {
    "text": "possibly go wrong it could be a now there could be an exception and you never know but from",
    "start": "271780",
    "end": "280870"
  },
  {
    "text": "the signature of that method I expect a list a list of orders nothing else it",
    "start": "280870",
    "end": "285910"
  },
  {
    "text": "could be empty right but it must be there sometimes it's not they're also nulls",
    "start": "285910",
    "end": "300540"
  },
  {
    "text": "right so we always need to check for now going back to that example there there",
    "start": "300540",
    "end": "307920"
  },
  {
    "text": "are you know there could be an awl or exception here we always need to check",
    "start": "307920",
    "end": "313200"
  },
  {
    "text": "for now there are a lot of guards which takes a lot of lines of code well it",
    "start": "313200",
    "end": "320220"
  },
  {
    "text": "could be a bit simpler big shorter but still only look the business logic",
    "start": "320220",
    "end": "325980"
  },
  {
    "text": "finally goes somewhere lower somewhere below and you need to read through a lot of things also there is a huge keyword",
    "start": "325980",
    "end": "338430"
  },
  {
    "text": "noise like all those public static breed only void even close instruct we all",
    "start": "338430",
    "end": "348270"
  },
  {
    "text": "know what that means of course reference types value types where they are stored",
    "start": "348270",
    "end": "354060"
  },
  {
    "text": "in the memory and where what is what and when you use the way you need to use",
    "start": "354060",
    "end": "359400"
  },
  {
    "text": "that but quite often we use just Clause even for data types like showing some",
    "start": "359400",
    "end": "365910"
  },
  {
    "text": "some some object a business object just the class very often with getting set of",
    "start": "365910",
    "end": "372390"
  },
  {
    "text": "the properties which makes it mutable and also not good that's another thing",
    "start": "372390",
    "end": "380760"
  },
  {
    "text": "which bothers me while reading the code I see a lot of those keywords and that",
    "start": "380760",
    "end": "386400"
  },
  {
    "text": "hides the real value that the logic behind all that noise type definitions I",
    "start": "386400",
    "end": "395700"
  },
  {
    "text": "know that's not the best syntax",
    "start": "395700",
    "end": "400950"
  },
  {
    "text": "highlighting but what is that I mean what's the name of it",
    "start": "400950",
    "end": "407400"
  },
  {
    "text": "oh yeah grew by right but behind all this what how do I find it yeah okay",
    "start": "407400",
    "end": "414420"
  },
  {
    "text": "syntax highlighting helps okay but still a lot of a lot of noise",
    "start": "414420",
    "end": "422390"
  },
  {
    "text": "since like.net and c-sharp is also not",
    "start": "423650",
    "end": "429540"
  },
  {
    "text": "only verbal language it's also an object-oriented language mainly like",
    "start": "429540",
    "end": "436230"
  },
  {
    "text": "imperative and object-oriented language we could find some weird naming",
    "start": "436230",
    "end": "441990"
  },
  {
    "start": "439000",
    "end": "466000"
  },
  {
    "text": "like I didn't know that this image could be familiar for you imagine indoor",
    "start": "441990",
    "end": "451440"
  },
  {
    "text": "session initializer just a door right like why would we name it that we're Lee",
    "start": "451440",
    "end": "459889"
  },
  {
    "text": "actually that goes too far sometimes and",
    "start": "461600",
    "end": "466850"
  },
  {
    "start": "466000",
    "end": "486000"
  },
  {
    "text": "we can see something like that I hope you won't ever see that in real life",
    "start": "466850",
    "end": "473570"
  },
  {
    "text": "code but you know sometimes we find really really strange and weird name in",
    "start": "473570",
    "end": "480630"
  },
  {
    "text": "quite long some of you might say and",
    "start": "480630",
    "end": "489780"
  },
  {
    "start": "486000",
    "end": "511000"
  },
  {
    "text": "what we are programmers like we you need to know this is our job we need to know",
    "start": "489780",
    "end": "495390"
  },
  {
    "text": "what that means we that's our book that's how we make money we that what differs us from other",
    "start": "495390",
    "end": "502980"
  },
  {
    "text": "people and that's fine that's fine I",
    "start": "502980",
    "end": "509240"
  },
  {
    "text": "don't think so actually I'm I would say there's something wrong so well really a",
    "start": "509240",
    "end": "517260"
  },
  {
    "start": "511000",
    "end": "545000"
  },
  {
    "text": "while writing the code and they're reading it what B grades to write just",
    "start": "517260",
    "end": "523140"
  },
  {
    "text": "plain English right and just just plain English describe what you want what do you mean what are the real-life objects",
    "start": "523140",
    "end": "531570"
  },
  {
    "text": "you describe and then just give it to the compiler and the compiler produces",
    "start": "531570",
    "end": "537720"
  },
  {
    "text": "an application do awesome want it I have an example while working with",
    "start": "537720",
    "end": "549270"
  },
  {
    "start": "545000",
    "end": "674000"
  },
  {
    "text": "business analysts non-technical people let's say not really technical people",
    "start": "549270",
    "end": "555300"
  },
  {
    "text": "and I had a task like a project a small project we had to implement just a",
    "start": "555300",
    "end": "563520"
  },
  {
    "text": "simple feedback form on the support tickets how well the support team worked",
    "start": "563520",
    "end": "569670"
  },
  {
    "text": "on that so there were a couple of Smiley's you choose if it's sad or happy",
    "start": "569670",
    "end": "575010"
  },
  {
    "text": "and maybe some comment so a simple really simple form but it had to be done",
    "start": "575010",
    "end": "581580"
  },
  {
    "text": "in different languages like I don't know ten languages whatever so we ended up",
    "start": "581580",
    "end": "586740"
  },
  {
    "text": "with just a simple JSON file with a key and value for each label for each string",
    "start": "586740",
    "end": "593360"
  },
  {
    "text": "and I send it over to the business analyst asking please feeling filling",
    "start": "593360",
    "end": "598980"
  },
  {
    "text": "this JSON file with just the values for different languages sounds simple right",
    "start": "598980",
    "end": "606630"
  },
  {
    "text": "sounds like why what could be easier if there is Thank You then it should be",
    "start": "606630",
    "end": "612510"
  },
  {
    "text": "thank you and I don't know in the region tuck something like that right so it's",
    "start": "612510",
    "end": "620640"
  },
  {
    "text": "simple but my request was rejected I was told that this is code guys this is code",
    "start": "620640",
    "end": "628500"
  },
  {
    "text": "and we won't do that that's your job to write code and we can provide you translations what how like okay in excel",
    "start": "628500",
    "end": "638070"
  },
  {
    "text": "file but again that would be a table with keys and various what's the",
    "start": "638070",
    "end": "643350"
  },
  {
    "text": "difference right but even there is simple format of JSON format was carry",
    "start": "643350",
    "end": "649709"
  },
  {
    "text": "for them like that scared people with all those curly braces I don't know",
    "start": "649709",
    "end": "654959"
  },
  {
    "text": "double quotes Collins I don't know they for them it was scary",
    "start": "654959",
    "end": "663360"
  },
  {
    "text": "and everything is different for those non-technical for business people",
    "start": "663360",
    "end": "669150"
  },
  {
    "text": "it's absolutely different thing the naming is like really differs we are used to such names as float it's",
    "start": "669150",
    "end": "679620"
  },
  {
    "start": "674000",
    "end": "729000"
  },
  {
    "text": "nothing new for us or integer right but for them it's just a number they don't",
    "start": "679620",
    "end": "687390"
  },
  {
    "text": "think and they those categories like float integer no it's just it's just",
    "start": "687390",
    "end": "692940"
  },
  {
    "text": "number yeah that could be there could be a point floating point they would rather call it decimal if even call it",
    "start": "692940",
    "end": "701760"
  },
  {
    "text": "differently than number then there is a guide guiit right that's something",
    "start": "701760",
    "end": "708270"
  },
  {
    "text": "really strange for them and even string for them it's just a text if it's a one",
    "start": "708270",
    "end": "715710"
  },
  {
    "text": "line of text then maybe it's fine just line but not string you so the",
    "start": "715710",
    "end": "726530"
  },
  {
    "text": "conclusion here is that we just speak different languages just different",
    "start": "726530",
    "end": "733410"
  },
  {
    "start": "729000",
    "end": "787000"
  },
  {
    "text": "languages they don't use our categories",
    "start": "733410",
    "end": "739170"
  },
  {
    "text": "we could use theirs because we know our domain and we can know their domain but",
    "start": "739170",
    "end": "750500"
  },
  {
    "text": "kinda programmers would say that's fine",
    "start": "750500",
    "end": "756270"
  },
  {
    "text": "again that's fine we do our job they do other job but then we end up with",
    "start": "756270",
    "end": "761760"
  },
  {
    "text": "different naming different different naming of the same object and and we",
    "start": "761760",
    "end": "772520"
  },
  {
    "text": "sometimes trying to find the the piece of the part of the code where we need to",
    "start": "772520",
    "end": "779370"
  },
  {
    "text": "maintain and make a change it's hard because the naming coming from business",
    "start": "779370",
    "end": "784620"
  },
  {
    "text": "people is different so do we have to speak different languages with them I",
    "start": "784620",
    "end": "790560"
  },
  {
    "start": "787000",
    "end": "800000"
  },
  {
    "text": "think no but then we need another probably another programming language",
    "start": "790560",
    "end": "798440"
  },
  {
    "text": "some so expressive language that you could write basically through the code",
    "start": "798970",
    "end": "805910"
  },
  {
    "start": "800000",
    "end": "825000"
  },
  {
    "text": "in comments uncomment tweak a bit make it compile and then should it should",
    "start": "805910",
    "end": "812690"
  },
  {
    "text": "work so that's how f sharp from my phone to you works let's see how if sharp in",
    "start": "812690",
    "end": "822020"
  },
  {
    "text": "real life helps us with to do that we",
    "start": "822020",
    "end": "830840"
  },
  {
    "start": "825000",
    "end": "840000"
  },
  {
    "text": "can model the domain with just types",
    "start": "830840",
    "end": "835970"
  },
  {
    "text": "there are a lot of different ways to do that in F sharp but let's start with something simple which is a",
    "start": "835970",
    "end": "842090"
  },
  {
    "start": "840000",
    "end": "988000"
  },
  {
    "text": "discriminated union also known as a some type for C sharp developers that could",
    "start": "842090",
    "end": "849680"
  },
  {
    "text": "look like like an enum and here probably",
    "start": "849680",
    "end": "854990"
  },
  {
    "text": "it is like looks like an enum but it's not into it snot a number it's not an",
    "start": "854990",
    "end": "861890"
  },
  {
    "text": "integer right so it's just the type with the value of some name with some label",
    "start": "861890",
    "end": "870850"
  },
  {
    "text": "very simple thing it's a currency could be either dollar euro or Norwegian krone",
    "start": "870850",
    "end": "880149"
  },
  {
    "text": "but discriminated unions can have some extra data that extra data comes again",
    "start": "880540",
    "end": "889990"
  },
  {
    "text": "statically typed so here we can we have a type weather and it's it could be",
    "start": "889990",
    "end": "898220"
  },
  {
    "text": "either sunny sunny or procedure it has some precipitation or windy pay",
    "start": "898220",
    "end": "907190"
  },
  {
    "text": "attention to to to the float with m/s",
    "start": "907190",
    "end": "913760"
  },
  {
    "text": "this is not a regular float this is a statically typed m/s the speed of the",
    "start": "913760",
    "end": "920660"
  },
  {
    "text": "wind and thanks to see unit symbols you can use all those from all the",
    "start": "920660",
    "end": "929870"
  },
  {
    "text": "fellas from from see all those units from see table on the bottom you can see",
    "start": "929870",
    "end": "937550"
  },
  {
    "text": "how how we initialized values with with the type weather all of them all these",
    "start": "937550",
    "end": "942620"
  },
  {
    "text": "three values are of type whether either sunny or some precipitation the very",
    "start": "942620",
    "end": "950810"
  },
  {
    "text": "important word here is or it can be either one thing or another so also sometimes it's called choice",
    "start": "950810",
    "end": "958760"
  },
  {
    "text": "type a very simple thing for modeling",
    "start": "958760",
    "end": "965660"
  },
  {
    "text": "something or how would you do that in c-sharp I don't even know we can have I",
    "start": "965660",
    "end": "971600"
  },
  {
    "text": "don't know some interface and implementations of that interface different but it's not exhaustively",
    "start": "971600",
    "end": "978110"
  },
  {
    "text": "right so we we would be able to introduce another implementation and how",
    "start": "978110",
    "end": "984050"
  },
  {
    "text": "it goes no one knows but those",
    "start": "984050",
    "end": "992020"
  },
  {
    "start": "988000",
    "end": "1064000"
  },
  {
    "text": "discriminated unions we can have pattern matching so it's a simple function",
    "start": "992020",
    "end": "997370"
  },
  {
    "text": "that's how we define a function in in F sharp pretty simple thing look there are",
    "start": "997370",
    "end": "1003820"
  },
  {
    "text": "no keywords almost there are no I don't know curly braces no semicolons nothing",
    "start": "1003820",
    "end": "1011350"
  },
  {
    "text": "really scary so what you can see is that a function called print weather expects",
    "start": "1011350",
    "end": "1018040"
  },
  {
    "text": "an argument of type weather look a type weather I haven't defined it but it's",
    "start": "1018040",
    "end": "1024610"
  },
  {
    "text": "there it's statically tied because thanks to type inference and then there",
    "start": "1024610",
    "end": "1031540"
  },
  {
    "text": "is a pattern matching which is almost plain English right match weather with",
    "start": "1031540",
    "end": "1036670"
  },
  {
    "text": "with something with sunny then printed sunny weather and then if we match it",
    "start": "1036670",
    "end": "1042308"
  },
  {
    "text": "with some precipitation which we named P here for polite just for brevity we will",
    "start": "1042309",
    "end": "1050500"
  },
  {
    "text": "print that weather with some precipitation so you can see that it's",
    "start": "1050500",
    "end": "1057760"
  },
  {
    "text": "almost plain English even here what could be seen I really love that one more great thing",
    "start": "1057760",
    "end": "1065940"
  },
  {
    "start": "1064000",
    "end": "1120000"
  },
  {
    "text": "about discriminated union is that it has a way to use just a single case so here",
    "start": "1065940",
    "end": "1073230"
  },
  {
    "text": "card number is a tie but it also has just one case with a label card number",
    "start": "1073230",
    "end": "1079049"
  },
  {
    "text": "which is which has the extra extra data of type string and the card number can",
    "start": "1079049",
    "end": "1085830"
  },
  {
    "text": "be initialized with just card number in the card number goes further like while",
    "start": "1085830",
    "end": "1093299"
  },
  {
    "text": "operating with these types you don't even need strings integers floats nothing like that you just use card",
    "start": "1093299",
    "end": "1100860"
  },
  {
    "text": "number which is exactly the same thing which a business person would call it",
    "start": "1100860",
    "end": "1105929"
  },
  {
    "text": "it's a card number no one cares that it's a string or it's a sequence of some",
    "start": "1105929",
    "end": "1112580"
  },
  {
    "text": "symbols its accessory it's just a card number and we all know the formatter one",
    "start": "1112580",
    "end": "1121890"
  },
  {
    "start": "1120000",
    "end": "1184000"
  },
  {
    "text": "more type type of types in F sharp is",
    "start": "1121890",
    "end": "1127380"
  },
  {
    "text": "record records is a product type it's a reference type by default but it's",
    "start": "1127380",
    "end": "1135240"
  },
  {
    "text": "compared by values so all those quality members are overridden you don't need",
    "start": "1135240",
    "end": "1142890"
  },
  {
    "text": "them to do that it's not malleable by default and it must be initialized",
    "start": "1142890",
    "end": "1148549"
  },
  {
    "text": "obviously and it's immutable and unless you just mark it explicitly that it's",
    "start": "1148549",
    "end": "1157260"
  },
  {
    "text": "mutable basically in functional programming or maybe in F sharp",
    "start": "1157260",
    "end": "1163110"
  },
  {
    "text": "programming we are we tend to make everything explicit everything should be",
    "start": "1163110",
    "end": "1169010"
  },
  {
    "text": "visible right when you read the code you don't need to think of Oh",
    "start": "1169010",
    "end": "1175320"
  },
  {
    "text": "there could be possible now or something else or exception everything should be",
    "start": "1175320",
    "end": "1181020"
  },
  {
    "text": "visible explicit a record simple example",
    "start": "1181020",
    "end": "1186169"
  },
  {
    "text": "this is a definition of a person and this is the initialization of a person",
    "start": "1186169",
    "end": "1191190"
  },
  {
    "text": "we initialize a value person with these properties you cannot",
    "start": "1191190",
    "end": "1197710"
  },
  {
    "text": "you cannot define just some of them it's",
    "start": "1197710",
    "end": "1202810"
  },
  {
    "text": "they're all mandatory so basically there is and let's say one constructor with",
    "start": "1202810",
    "end": "1209560"
  },
  {
    "text": "all arguments assigned at the moment of initialization really simple thing again",
    "start": "1209560",
    "end": "1217080"
  },
  {
    "text": "look there is type there is no mentioning of a class or a struct we",
    "start": "1217080",
    "end": "1222790"
  },
  {
    "text": "don't bother we just say it's a type and we know that it's a type and that's a",
    "start": "1222790",
    "end": "1229540"
  },
  {
    "text": "business object yeah we can make it destruct if we need that that's possible",
    "start": "1229540",
    "end": "1235320"
  },
  {
    "text": "but by default it will be a reference type this is a combination now for the",
    "start": "1235320",
    "end": "1246130"
  },
  {
    "text": "discriminated union and records I believe this can be that's readable for",
    "start": "1246130",
    "end": "1253060"
  },
  {
    "text": "non-technical people so the mayor the",
    "start": "1253060",
    "end": "1258280"
  },
  {
    "text": "main type which were interested in is on the bottom its payment basically the",
    "start": "1258280",
    "end": "1265810"
  },
  {
    "text": "payment object and it can have some",
    "start": "1265810",
    "end": "1271720"
  },
  {
    "text": "amount some currency and method and you see there are no keywords here no programming keywords because for",
    "start": "1271720",
    "end": "1280870"
  },
  {
    "text": "business person again the currency is a currency our amount is a payment amount",
    "start": "1280870",
    "end": "1288300"
  },
  {
    "text": "yes a bit above we define that a payment",
    "start": "1288300",
    "end": "1294520"
  },
  {
    "text": "amount is actually a type of decimal but then in your business logic you operate",
    "start": "1294520",
    "end": "1299740"
  },
  {
    "text": "with payment amount not with a decimal and the check number is an integer and",
    "start": "1299740",
    "end": "1308560"
  },
  {
    "text": "the card number is a string but again you have parade with them just as it is a card number and the card and the check",
    "start": "1308560",
    "end": "1316000"
  },
  {
    "text": "number as business people would do for them it's not a string for them it's not an integer again",
    "start": "1316000",
    "end": "1323760"
  },
  {
    "start": "1325000",
    "end": "1417000"
  },
  {
    "text": "this is another example let's imagine yeah let's imagine a med store which",
    "start": "1326230",
    "end": "1332029"
  },
  {
    "text": "sells some gadgets and the gadget can have some code and for for example for",
    "start": "1332029",
    "end": "1340220"
  },
  {
    "text": "phones it's a string and for a tablet it's an integer but for a business",
    "start": "1340220",
    "end": "1346039"
  },
  {
    "text": "person again it's a phone cord and a tablet code and at the end it's a gadget code so we end up with the type gadget",
    "start": "1346039",
    "end": "1352700"
  },
  {
    "text": "with a code of type gadget code very simple and we operate these names and",
    "start": "1352700",
    "end": "1361220"
  },
  {
    "text": "categories later on in your business logic and by the way you can define your",
    "start": "1361220",
    "end": "1369799"
  },
  {
    "text": "units of measure just with a simple attribute measure and then you get other",
    "start": "1369799",
    "end": "1376249"
  },
  {
    "text": "grams or inches which we used for the weight and screen size",
    "start": "1376249",
    "end": "1383320"
  },
  {
    "text": "you probably know the name not the name",
    "start": "1387690",
    "end": "1392800"
  },
  {
    "text": "the saying like make your invalid state on representable so this is how we also",
    "start": "1392800",
    "end": "1400600"
  },
  {
    "text": "do in F sharp and that's great way to approach it so for different states",
    "start": "1400600",
    "end": "1407770"
  },
  {
    "text": "maybe even over the same entity of the same object we use different state",
    "start": "1407770",
    "end": "1413890"
  },
  {
    "text": "different types let's say we have an",
    "start": "1413890",
    "end": "1419320"
  },
  {
    "start": "1417000",
    "end": "1559000"
  },
  {
    "text": "order and it has some shipping address but we don't know if it's real it's if",
    "start": "1419320",
    "end": "1426640"
  },
  {
    "text": "it's valid or if it's just some random address so before that before we process",
    "start": "1426640",
    "end": "1435610"
  },
  {
    "text": "the order when it comes from the user we just we know that the address is not",
    "start": "1435610",
    "end": "1445120"
  },
  {
    "text": "validated yet so for us it's one state of basically it's a different thing it's",
    "start": "1445120",
    "end": "1450580"
  },
  {
    "text": "just Nora it's not even a state it's just a different different thing it's",
    "start": "1450580",
    "end": "1456580"
  },
  {
    "text": "just some input I wouldn't call it even an order it doesn't have an even order ID or something like that it's just an",
    "start": "1456580",
    "end": "1463150"
  },
  {
    "text": "input often of a user so it has an unvalidated address and there isn't",
    "start": "1463150",
    "end": "1469450"
  },
  {
    "text": "order when we already processed the validated it and we now have a validated",
    "start": "1469450",
    "end": "1474820"
  },
  {
    "text": "order it's a different type and we can have also a type which is basically kind",
    "start": "1474820",
    "end": "1482140"
  },
  {
    "text": "of a verb so it's the definition of a father it's a signature of a function",
    "start": "1482140",
    "end": "1487620"
  },
  {
    "text": "unvalidated address is somehow validated",
    "start": "1487620",
    "end": "1493450"
  },
  {
    "text": "and can output either a validated address or not so if you remember nulls",
    "start": "1493450",
    "end": "1500470"
  },
  {
    "text": "here we don't have no civil a dated address cannot be cannot be now but we",
    "start": "1500470",
    "end": "1506380"
  },
  {
    "text": "need to explicitly say that the value can be missing there could be not a validated address because the input was",
    "start": "1506380",
    "end": "1512380"
  },
  {
    "text": "incorrect that's that's way here an option type",
    "start": "1512380",
    "end": "1518650"
  },
  {
    "text": "helps this is a simple definition of an option type of a bit and actually it's a bit more complicated in the F sharp",
    "start": "1518650",
    "end": "1527580"
  },
  {
    "text": "libraries but this is the simplest definition it's either some of some type",
    "start": "1527580",
    "end": "1535780"
  },
  {
    "text": "some real validated address in this case or none and we see it immediately when",
    "start": "1535780",
    "end": "1543190"
  },
  {
    "text": "we look at this signature of a method or function we see that the address can be",
    "start": "1543190",
    "end": "1548590"
  },
  {
    "text": "missing the validated address is optional no now's no we don't need to",
    "start": "1548590",
    "end": "1555010"
  },
  {
    "text": "think about it and that's also great",
    "start": "1555010",
    "end": "1559500"
  },
  {
    "start": "1559000",
    "end": "1636000"
  },
  {
    "text": "more to that there is a specific special result type imagine something goes wrong",
    "start": "1560460",
    "end": "1570360"
  },
  {
    "text": "like I don't know an API is not available not accessible databases down",
    "start": "1570360",
    "end": "1577260"
  },
  {
    "text": "something goes wrong in your in the workflow what would you do throw an",
    "start": "1577260",
    "end": "1584800"
  },
  {
    "text": "exception that's usual but then you need",
    "start": "1584800",
    "end": "1590980"
  },
  {
    "text": "to catch all of them what if some validation fails you need to what would",
    "start": "1590980",
    "end": "1598990"
  },
  {
    "text": "you return an owl or something result type will help you a lot so it's either",
    "start": "1598990",
    "end": "1604780"
  },
  {
    "text": "some success or failure it statically typed its generic here and if we have a",
    "start": "1604780",
    "end": "1612910"
  },
  {
    "text": "function which takes an unpaid invoice and the payment it can result either",
    "start": "1612910",
    "end": "1617920"
  },
  {
    "text": "with a paid invoice if everything goes well if the pain I'm in gateways ready",
    "start": "1617920",
    "end": "1622930"
  },
  {
    "text": "to answer like everything really okay or it's a payment error and that's visible from the first glance you see like",
    "start": "1622930",
    "end": "1630940"
  },
  {
    "text": "immediately that the result can be either paid invoice or payment error this actually works with lists of",
    "start": "1630940",
    "end": "1639300"
  },
  {
    "start": "1636000",
    "end": "1693000"
  },
  {
    "text": "validation errors in this case the list by the way look it's very simple again",
    "start": "1639300",
    "end": "1647920"
  },
  {
    "text": "it's just datian error list what could be simpler how how simpler would you write that I",
    "start": "1647920",
    "end": "1653090"
  },
  {
    "text": "believe for non-technical people even that will be clear so there are pretty",
    "start": "1653090",
    "end": "1661789"
  },
  {
    "text": "simple ways to combine the validation errors from from separate values into a",
    "start": "1661789",
    "end": "1668029"
  },
  {
    "text": "list and wrap them into result we won't cover it here so result with specific",
    "start": "1668029",
    "end": "1682990"
  },
  {
    "text": "success and failure types really helps to understand the intention of the of",
    "start": "1682990",
    "end": "1689119"
  },
  {
    "text": "the function by the way discriminated",
    "start": "1689119",
    "end": "1695059"
  },
  {
    "start": "1693000",
    "end": "1759000"
  },
  {
    "text": "unions can also be used for different states of the same object here we have a",
    "start": "1695059",
    "end": "1700340"
  },
  {
    "text": "shopping cart which can be either empty or active or Beit card and the basically",
    "start": "1700340",
    "end": "1707090"
  },
  {
    "text": "the the the fields the values of the",
    "start": "1707090",
    "end": "1713179"
  },
  {
    "text": "fields could be different so for an empty card there are no items right and",
    "start": "1713179",
    "end": "1719749"
  },
  {
    "text": "for active car they could be items but they are not paid and there is no",
    "start": "1719749",
    "end": "1725029"
  },
  {
    "text": "payment obviously and then again we can match it pattern match it very simply match card with empty card and that's it",
    "start": "1725029",
    "end": "1732619"
  },
  {
    "text": "we just plain English right so if we want to add an item to the card this",
    "start": "1732619",
    "end": "1740029"
  },
  {
    "text": "particular item we match the card with empty card then we return an active card with just an item in unpaid items I",
    "start": "1740029",
    "end": "1747110"
  },
  {
    "text": "don't know for me that's the simplest way to describe the real business logic",
    "start": "1747110",
    "end": "1753980"
  },
  {
    "text": "the plain English almost plain English",
    "start": "1753980",
    "end": "1759490"
  },
  {
    "start": "1759000",
    "end": "1794000"
  },
  {
    "text": "since we are talking about functional programming we of course use functions and not classes there are no abstract",
    "start": "1759490",
    "end": "1769509"
  },
  {
    "text": "factories I don't know there are no builders whatever like those all those",
    "start": "1769509",
    "end": "1775309"
  },
  {
    "text": "objective oriented patterns well of course you can apply some of them but",
    "start": "1775309",
    "end": "1781549"
  },
  {
    "text": "that's not needed you can compose all your logic from functions and functions",
    "start": "1781549",
    "end": "1789600"
  },
  {
    "text": "are really powerful in F sharp since yeah of course it's functional first language so let's see starting from the",
    "start": "1789600",
    "end": "1796980"
  },
  {
    "start": "1794000",
    "end": "1880000"
  },
  {
    "text": "type inference this is the way I also already showed you the way we define the",
    "start": "1796980",
    "end": "1802409"
  },
  {
    "text": "function so we don't write function we don't write no we don't necessarily",
    "start": "1802409",
    "end": "1809299"
  },
  {
    "text": "write the types for arguments or for return values it can be inferred from",
    "start": "1809299",
    "end": "1817710"
  },
  {
    "text": "the context but if you want to you can do that the line six shows you how to",
    "start": "1817710",
    "end": "1823740"
  },
  {
    "text": "define arguments with specific types there is no return keyword as you can",
    "start": "1823740",
    "end": "1831570"
  },
  {
    "text": "see also one benefit so everything is clear the last expression in the",
    "start": "1831570",
    "end": "1836820"
  },
  {
    "text": "function will be the return value of the function on the line nine week you can",
    "start": "1836820",
    "end": "1843870"
  },
  {
    "text": "see that we firstly we define the type",
    "start": "1843870",
    "end": "1849269"
  },
  {
    "text": "of the function and then on the line 11 we just say that II D float function is",
    "start": "1849269",
    "end": "1855450"
  },
  {
    "text": "of type and float so it returns a function with two arguments and which",
    "start": "1855450",
    "end": "1861809"
  },
  {
    "text": "returns a float for us and then we just use the function with just again no",
    "start": "1861809",
    "end": "1867360"
  },
  {
    "text": "parenthesis no curly braces no no is just the real real value the real logic",
    "start": "1867360",
    "end": "1876899"
  },
  {
    "text": "the real name of of the of the thing",
    "start": "1876899",
    "end": "1881389"
  },
  {
    "text": "yeah as in previous example we can just define the types of our functions",
    "start": "1884000",
    "end": "1889860"
  },
  {
    "text": "firstly and then just have them",
    "start": "1889860",
    "end": "1895910"
  },
  {
    "text": "implemented very simple thing I don't",
    "start": "1896090",
    "end": "1901170"
  },
  {
    "text": "know they I don't see any noise here from my live interview there is just",
    "start": "1901170",
    "end": "1908960"
  },
  {
    "text": "very neat definition of of the parts of",
    "start": "1908960",
    "end": "1914460"
  },
  {
    "text": "the code of the of the workflow one more",
    "start": "1914460",
    "end": "1920040"
  },
  {
    "text": "great thing is BiPAP rater which can help you to reverse the the the calling",
    "start": "1920040",
    "end": "1929460"
  },
  {
    "text": "like if you have a function is some in option type you can pass an optional",
    "start": "1929460",
    "end": "1934560"
  },
  {
    "text": "address there but with the pipe operator you can reverse these things and it will",
    "start": "1934560",
    "end": "1940500"
  },
  {
    "text": "be optional address is some like I can plain English if optional address is",
    "start": "1940500",
    "end": "1947070"
  },
  {
    "text": "some then do something let's say like like it's a simple example so with pipe",
    "start": "1947070",
    "end": "1953880"
  },
  {
    "text": "operator we really use plain English instead of all those parenthesis and a",
    "start": "1953880",
    "end": "1960780"
  },
  {
    "text": "lot of parenthesis this is how it helps to compose the workflow actually so you",
    "start": "1960780",
    "end": "1968880"
  },
  {
    "text": "can see we have several functions and then instead of assigning each result of",
    "start": "1968880",
    "end": "1977250"
  },
  {
    "text": "each function to some variable and then pass it further we don't do that we",
    "start": "1977250",
    "end": "1988150"
  },
  {
    "text": "just right in the order of execution so",
    "start": "1988150",
    "end": "1994030"
  },
  {
    "text": "an validated order goes to firstly validate order and price worth and",
    "start": "1994030",
    "end": "1999160"
  },
  {
    "text": "acknowledged orders and create events otherwise we would need to either put a",
    "start": "1999160",
    "end": "2004680"
  },
  {
    "text": "lot of parentheses around that or assign each very each result variable which is",
    "start": "2004680",
    "end": "2012390"
  },
  {
    "text": "not a variable in F sharp its value everything is immutable by default oh",
    "start": "2012390",
    "end": "2018409"
  },
  {
    "text": "yeah actually here I'm a bit lying to",
    "start": "2019310",
    "end": "2024540"
  },
  {
    "text": "you that won't work because as you can see the return values a result and the",
    "start": "2024540",
    "end": "2030380"
  },
  {
    "text": "arguments expected are not results so we need a bit of binding and mapping but",
    "start": "2030380",
    "end": "2037170"
  },
  {
    "text": "still if we just look at this it's not",
    "start": "2037170",
    "end": "2043200"
  },
  {
    "text": "that noisy and actually you can define your own operators and avoid this result",
    "start": "2043200",
    "end": "2052830"
  },
  {
    "text": "bind that just replace it with this simple operator someone would say it's",
    "start": "2052830",
    "end": "2059850"
  },
  {
    "text": "even more complicated like you need to remember a lot of operators you don't",
    "start": "2059850",
    "end": "2065220"
  },
  {
    "text": "have to you can use this approach that's all suppose I didn't show you a partial",
    "start": "2065220",
    "end": "2072720"
  },
  {
    "start": "2070000",
    "end": "2227000"
  },
  {
    "text": "application what that means so all functions in F sharp are carried",
    "start": "2072720",
    "end": "2080220"
  },
  {
    "text": "so you can pass just not each of each",
    "start": "2080220",
    "end": "2085889"
  },
  {
    "text": "argument at the same time you can pass just one or some just part of the",
    "start": "2085890",
    "end": "2093929"
  },
  {
    "text": "required arguments and you will get a function back so for example if you have",
    "start": "2093930",
    "end": "2099900"
  },
  {
    "text": "a function add with two arguments if you pass just one where we get a function which expects the last argument and then",
    "start": "2099900",
    "end": "2108840"
  },
  {
    "text": "we can pass that one and receive the real value that",
    "start": "2108840",
    "end": "2114070"
  },
  {
    "text": "can be helpful the partial application is the equivalent of dependency",
    "start": "2114070",
    "end": "2121180"
  },
  {
    "text": "injection in object-oriented programming so this example is a bit more",
    "start": "2121180",
    "end": "2131350"
  },
  {
    "text": "complicated but it shows us that we have a function validate order and it expects",
    "start": "2131350",
    "end": "2139590"
  },
  {
    "text": "three dependencies check product code exists check address exists two",
    "start": "2139590",
    "end": "2145990"
  },
  {
    "text": "dependencies right and one unvalidated order what we can do we can pass to",
    "start": "2145990",
    "end": "2152220"
  },
  {
    "text": "those dependencies firstly and get another function back we can even call",
    "start": "2152220",
    "end": "2158710"
  },
  {
    "text": "it the same way which is called shadowing and at the end our validate order found now here it's sorry it's a",
    "start": "2158710",
    "end": "2168520"
  },
  {
    "text": "typo so validate order function is just a function of one argument you need to",
    "start": "2168520",
    "end": "2174760"
  },
  {
    "text": "pass only unvalidated order to it and that's it so that's how you in one place",
    "start": "2174760",
    "end": "2180910"
  },
  {
    "text": "of your application may be on there somewhere on startup you create those functions passing only dependencies to",
    "start": "2180910",
    "end": "2189369"
  },
  {
    "text": "them and then you get back the functions with just the final argument in this",
    "start": "2189369",
    "end": "2196300"
  },
  {
    "text": "case unvalidated order so partial application is maybe the one of the most",
    "start": "2196300",
    "end": "2205930"
  },
  {
    "text": "powerful and important parts in functional programming without that I don't think we would be able to do",
    "start": "2205930",
    "end": "2212800"
  },
  {
    "text": "anything there is no such thing in c-sharp and I don't think it will ever",
    "start": "2212800",
    "end": "2219310"
  },
  {
    "text": "happen there yeah so just use F sharp",
    "start": "2219310",
    "end": "2227700"
  },
  {
    "start": "2227000",
    "end": "2295000"
  },
  {
    "text": "you can actually have imperative style in your code you don't have to use all",
    "start": "2230280",
    "end": "2236010"
  },
  {
    "text": "those pipes not necessarily even here I use pipes just to change the order but",
    "start": "2236010",
    "end": "2244069"
  },
  {
    "text": "you yeah you can see that I just assign values to some not variables to values",
    "start": "2244069",
    "end": "2251880"
  },
  {
    "text": "and then pass them to create events function that's also possible and could",
    "start": "2251880",
    "end": "2257640"
  },
  {
    "text": "be maybe readable a bit more readable for people unfamiliar with F sharp so if",
    "start": "2257640",
    "end": "2264900"
  },
  {
    "text": "you are starting with F sharp probably that's the way to go and then step by step you apply all",
    "start": "2264900",
    "end": "2274680"
  },
  {
    "text": "those functional techniques but yeah you can start with this",
    "start": "2274680",
    "end": "2280490"
  },
  {
    "text": "actually I'm I'm a bit too fast here but",
    "start": "2289130",
    "end": "2294910"
  },
  {
    "text": "yeah just to give credit to Scott",
    "start": "2294910",
    "end": "2301100"
  },
  {
    "text": "flushing all this talk is inspired by this book if you read the one from Eric",
    "start": "2301100",
    "end": "2311600"
  },
  {
    "text": "Evans well if you haven't read the one that just domain-driven design by Eric",
    "start": "2311600",
    "end": "2319160"
  },
  {
    "text": "Evans you don't need that here you can read this book with examples in F sharp",
    "start": "2319160",
    "end": "2325460"
  },
  {
    "text": "and that would be more than enough to understand how to model the the domain",
    "start": "2325460",
    "end": "2332330"
  },
  {
    "text": "how to write the domain driven",
    "start": "2332330",
    "end": "2336730"
  },
  {
    "text": "domain-specific language in F sharp which is probably the most suitable",
    "start": "2337450",
    "end": "2343430"
  },
  {
    "text": "language for that Scott lotion also has an article about F sharp why it's the",
    "start": "2343430",
    "end": "2348920"
  },
  {
    "text": "best enterprise language he is the owner of F sharp for fun and profit com",
    "start": "2348920",
    "end": "2354890"
  },
  {
    "text": "website where you can find a lot of examples and a lot of articles how to",
    "start": "2354890",
    "end": "2363410"
  },
  {
    "text": "use F sharp and in enterprise and not only there is also an article F sharp",
    "start": "2363410",
    "end": "2368840"
  },
  {
    "text": "for see sharp developers so feel free to",
    "start": "2368840",
    "end": "2374950"
  },
  {
    "text": "to read it and also I would encourage",
    "start": "2374950",
    "end": "2380660"
  },
  {
    "start": "2378000",
    "end": "2410000"
  },
  {
    "text": "you to look at the safe stack which is",
    "start": "2380660",
    "end": "2386260"
  },
  {
    "text": "really great set of technologies for",
    "start": "2386260",
    "end": "2391430"
  },
  {
    "text": "functional programming for a full stack functional programming development web",
    "start": "2391430",
    "end": "2397760"
  },
  {
    "text": "development with F sharp as I told you you can write back-end and front-end code so save stack is really helpful",
    "start": "2397760",
    "end": "2405230"
  },
  {
    "text": "here and that's basically it from my side",
    "start": "2405230",
    "end": "2413089"
  },
  {
    "start": "2410000",
    "end": "2590000"
  },
  {
    "text": "today I'm a bit really too too fast but",
    "start": "2413089",
    "end": "2419589"
  },
  {
    "text": "yeah that that's it thank you all for coming and if you have any questions I",
    "start": "2419589",
    "end": "2425299"
  },
  {
    "text": "will be happy to answer them yes please",
    "start": "2425299",
    "end": "2430690"
  },
  {
    "text": "yep",
    "start": "2436059",
    "end": "2438719"
  },
  {
    "text": "yes",
    "start": "2444400",
    "end": "2447400"
  },
  {
    "text": "well you're not that limited actually I mean that all those discriminated unions",
    "start": "2465659",
    "end": "2472029"
  },
  {
    "text": "all those labels are also transported on job into JavaScript and with some",
    "start": "2472029",
    "end": "2478569"
  },
  {
    "text": "encoders and decoders like simple Jason or thought you can use they are",
    "start": "2478569",
    "end": "2487559"
  },
  {
    "text": "serialized into Jason and beg this realize to the same to the same types",
    "start": "2487559",
    "end": "2493630"
  },
  {
    "text": "and models which you have in F sharp so it's one to one and back so I don't see",
    "start": "2493630",
    "end": "2499689"
  },
  {
    "text": "a limitation here actually yes under the hood there's it's JSON is JavaScript so",
    "start": "2499689",
    "end": "2504880"
  },
  {
    "text": "there is no I don't know if there is even no double or float whatever well",
    "start": "2504880",
    "end": "2515289"
  },
  {
    "text": "you can work around them again with again strings and then in in in F sharp",
    "start": "2515289",
    "end": "2520390"
  },
  {
    "text": "you would be able to parse them because feeble allows you to transpile even the",
    "start": "2520390",
    "end": "2526899"
  },
  {
    "text": "framework in the BCL types directly into javascript and back so I don't think",
    "start": "2526899",
    "end": "2534969"
  },
  {
    "text": "it's it's a huge problem actually so you can do a lot anyway there are",
    "start": "2534969",
    "end": "2540669"
  },
  {
    "text": "limitations right but not that much like not that many you can yeah yeah with the",
    "start": "2540669",
    "end": "2548769"
  },
  {
    "text": "pattern of Fable remoting for example you can even not write you can avoid",
    "start": "2548769",
    "end": "2556029"
  },
  {
    "text": "even calling the API manually this is just RPC style so there's shared model",
    "start": "2556029",
    "end": "2563199"
  },
  {
    "text": "in a separate project probably and then you call a function and get that object",
    "start": "2563199",
    "end": "2568599"
  },
  {
    "text": "in Java T in Fable in JavaScript or on the server side it's pretty simple so I",
    "start": "2568599",
    "end": "2574299"
  },
  {
    "text": "don't see that much probably many problems here",
    "start": "2574299",
    "end": "2578969"
  },
  {
    "text": "so if that's it then thank you",
    "start": "2585400",
    "end": "2591270"
  }
]