[
  {
    "text": "all right good morning everybody welcome to this talk on Dapper in",
    "start": "5200",
    "end": "11679"
  },
  {
    "text": "practice first maybe a show of hands how many of you are familiar with Dapper",
    "start": "11679",
    "end": "18000"
  },
  {
    "text": "beforehand quite a lot of you that's great um my name is Mark lefter my LinkedIn bio currently says",
    "start": "18000",
    "end": "25920"
  },
  {
    "text": "that I'm helping organizations become event driven what does that mean basically I support",
    "start": "25920",
    "end": "33399"
  },
  {
    "text": "Cloud native application development efforts with a special emphasis on event driven principles patterns and uh best",
    "start": "33399",
    "end": "41800"
  },
  {
    "text": "practices which also happens to be the context where Dapper comes into play so",
    "start": "41800",
    "end": "47480"
  },
  {
    "text": "Dapper as many of you I guess then already know uh stands for distributed",
    "start": "47480",
    "end": "53039"
  },
  {
    "text": "application run time it's an open source cncf project aimed at as the name",
    "start": "53039",
    "end": "58719"
  },
  {
    "text": "implies at developing distributed applications so while this is a very",
    "start": "58719",
    "end": "65080"
  },
  {
    "text": "interesting technology and yes I'm biased uh the talk is named Dapper in",
    "start": "65080",
    "end": "70479"
  },
  {
    "text": "practice for a reason so yes we will be exploring Dapper to a large extent in",
    "start": "70479",
    "end": "76600"
  },
  {
    "text": "this talk but I also want to focus specifically on the Practical considerations should you also find it",
    "start": "76600",
    "end": "82759"
  },
  {
    "text": "interesting and maybe want to adopt it because there are a lot of moving Parts here that you should be aware of in that",
    "start": "82759",
    "end": "89079"
  },
  {
    "text": "case so let's start by setting the stage a little bit for our exploration of dapper",
    "start": "89079",
    "end": "96880"
  },
  {
    "text": "and the Practical considerations so what do we mean by a distributed application we'll use the",
    "start": "96880",
    "end": "104640"
  },
  {
    "text": "popular term loosely coupled uh application services that are",
    "start": "104640",
    "end": "110840"
  },
  {
    "text": "distinct processes that communicate synchronously and or",
    "start": "110840",
    "end": "116680"
  },
  {
    "text": "asynchronously and for the purpose of this talk will assume a cloud native environment where we package deploy and",
    "start": "116680",
    "end": "123159"
  },
  {
    "text": "run our application Services as containers um the platform of choice",
    "start": "123159",
    "end": "130119"
  },
  {
    "text": "will be kubernetes which is a good assumptions because Dapper is deployed currently upwards of 90% in",
    "start": "130119",
    "end": "137920"
  },
  {
    "text": "kubernetes so yes you can run Dapper in other environments um on Prem virtual",
    "start": "137920",
    "end": "143879"
  },
  {
    "text": "machines even serverless I believe now but we'll stick with kubernetes for now",
    "start": "143879",
    "end": "151480"
  },
  {
    "text": "and as an application you utilize a number of capabilities that are common",
    "start": "151480",
    "end": "157879"
  },
  {
    "text": "so to say uh some capabilities are provided by a platform so in kubernetes you rely on it to provide you with",
    "start": "157879",
    "end": "165120"
  },
  {
    "text": "service Discovery scaleout and so forth other capabilities are more crosscutting",
    "start": "165120",
    "end": "171159"
  },
  {
    "text": "not provided by the platform they relate to security observability resiliency and",
    "start": "171159",
    "end": "176519"
  },
  {
    "text": "so forth sometimes you can see them offered by a service M for example and",
    "start": "176519",
    "end": "182080"
  },
  {
    "text": "then you have capabilities that the application directly uses or relies on",
    "start": "182080",
    "end": "187239"
  },
  {
    "text": "to implement domain logic so we're talking messaging State Management workflow Etc all these capabilities are",
    "start": "187239",
    "end": "196400"
  },
  {
    "text": "needed of course to have a well- running application um so we'll iner focus on",
    "start": "196400",
    "end": "204879"
  },
  {
    "text": "the two latter Parts the cross cutting concerns and the capabilities that you",
    "start": "204879",
    "end": "210040"
  },
  {
    "text": "will find uh offered by a cloud provider such as AWS for messaging State",
    "start": "210040",
    "end": "215080"
  },
  {
    "text": "Management and so forth so these capabilities you can",
    "start": "215080",
    "end": "221799"
  },
  {
    "text": "think of them as patterns for services or microservices and in this book which I",
    "start": "221799",
    "end": "227720"
  },
  {
    "text": "highly recommend it's a couple of years old but still a very good read it summarizes all of these",
    "start": "227720",
    "end": "234000"
  },
  {
    "text": "capabilities uh in the neat format again as they relate to communication state and",
    "start": "234000",
    "end": "241879"
  },
  {
    "text": "workflow so let's look at messaging first as a capability your Cloud native",
    "start": "241879",
    "end": "247640"
  },
  {
    "text": "application might have to utilize utilizing a specific vendor's",
    "start": "247640",
    "end": "254840"
  },
  {
    "text": "offering so here you see a node.js app deployed again in kubernetes that",
    "start": "254840",
    "end": "262440"
  },
  {
    "text": "has to publish certain messages to a SNS topic so direct C in our application",
    "start": "262440",
    "end": "270800"
  },
  {
    "text": "code we are relying on a dependency that we have declared that we need and we",
    "start": "270800",
    "end": "276000"
  },
  {
    "text": "have also downloaded the AWS SDK for JavaScript specifically the client SNS",
    "start": "276000",
    "end": "284400"
  },
  {
    "text": "module and we are instantiating it we are configuring the SNS client and then",
    "start": "284400",
    "end": "290840"
  },
  {
    "text": "using the API provided publishing a message to a certain",
    "start": "290840",
    "end": "296800"
  },
  {
    "text": "topic this we have to do for all services that need to publish messages",
    "start": "296800",
    "end": "303320"
  },
  {
    "text": "and the corollary you'll have to utilize the subscriber part if you want to",
    "start": "303320",
    "end": "308919"
  },
  {
    "text": "consume a message that has been p uh published and again all of these services are independently deployed",
    "start": "308919",
    "end": "316479"
  },
  {
    "text": "developed and deployed so they all have to factor in this dependency in their application",
    "start": "316479",
    "end": "323000"
  },
  {
    "text": "code there are a number of issues when you pursue this mode of integrating",
    "start": "323000",
    "end": "329720"
  },
  {
    "text": "directly with in this case AWS SNS the first one is that you have to as",
    "start": "329720",
    "end": "336639"
  },
  {
    "text": "you saw specify a version of your client library or in driver so you have to make",
    "start": "336639",
    "end": "342120"
  },
  {
    "text": "sure that the SDK you are using matches the resource or Cloud vendor service and",
    "start": "342120",
    "end": "349280"
  },
  {
    "text": "the functionality currently offered and this has again has to be ensured for",
    "start": "349280",
    "end": "354440"
  },
  {
    "text": "every application service that utilizes this so you have a matching issue they need be aware of it goes without saying",
    "start": "354440",
    "end": "362160"
  },
  {
    "text": "that you are by default tied to a certain infrastructure in this case SNS and sqs",
    "start": "362160",
    "end": "369039"
  },
  {
    "text": "you're using a vendor library with all of that um custom configuration resiliency",
    "start": "369039",
    "end": "376400"
  },
  {
    "text": "policies that are hidden or present in the SDK that you might to some extent uh",
    "start": "376400",
    "end": "383880"
  },
  {
    "text": "configure and you also have to of course be aware of security aspects such as having the necessary credential to",
    "start": "383880",
    "end": "390039"
  },
  {
    "text": "publish a message which might differ depending if you're running something locally for testing or actually in",
    "start": "390039",
    "end": "395880"
  },
  {
    "text": "production and you have to set a number of Access Control policies so you have to know AWS am",
    "start": "395880",
    "end": "403400"
  },
  {
    "text": "Etc so that's a lot of things that we as application developers have to be aware",
    "start": "403599",
    "end": "409000"
  },
  {
    "text": "of not only how we implement this in code but also all these settings and dependencies is that what we actually",
    "start": "409000",
    "end": "415960"
  },
  {
    "text": "care about or are we looking for something simpler perhaps I would argue that this is what we are",
    "start": "415960",
    "end": "424199"
  },
  {
    "text": "basically looking for I want to publish a message to a certain topic if I can",
    "start": "424199",
    "end": "429639"
  },
  {
    "text": "only uh care about that part my developer life will be",
    "start": "429639",
    "end": "435879"
  },
  {
    "text": "happier and so this is where you see Dapper entering the scene by providing the necessary",
    "start": "435879",
    "end": "443560"
  },
  {
    "text": "building blocks as we'll see for example uh accomplishing messaging in a simple",
    "start": "443560",
    "end": "451520"
  },
  {
    "text": "way so let's look at Dapper uh first as an overview many of",
    "start": "451919",
    "end": "459479"
  },
  {
    "text": "you might have seen this beforehand so you have your application code we just saw nodejs",
    "start": "459479",
    "end": "466560"
  },
  {
    "text": "example and you interface with the actual runtime the Dapper",
    "start": "466560",
    "end": "473840"
  },
  {
    "text": "runtime uh which is its own process you'll see it's a side car uh shortly",
    "start": "473840",
    "end": "480639"
  },
  {
    "text": "and there are two ways to interface with this sidecar or runtime through HTTP or",
    "start": "480639",
    "end": "486479"
  },
  {
    "text": "grpc HTTP is the most common I believe and inside of that runtime you'll find a",
    "start": "486479",
    "end": "493080"
  },
  {
    "text": "number of building blocks that you can utilize so going left to right you have a building block for service",
    "start": "493080",
    "end": "500120"
  },
  {
    "text": "invocation so in contrast to directly creating a URL and invoking some service",
    "start": "500120",
    "end": "505919"
  },
  {
    "text": "you will be utilizing an intermediary service invocation here to accomplish",
    "start": "505919",
    "end": "511919"
  },
  {
    "text": "that you have a building block for State Management should you utilize a key",
    "start": "511919",
    "end": "517000"
  },
  {
    "text": "value store for session information or what have you publish subscribe",
    "start": "517000",
    "end": "522279"
  },
  {
    "text": "messaging as we just saw very popular building block for for that purpose you",
    "start": "522279",
    "end": "527839"
  },
  {
    "text": "have input and output bindings if you want to communicate with external systems I call it the great escape hatch as we'll also see",
    "start": "527839",
    "end": "534160"
  },
  {
    "text": "shortly and more specific building blocks perhaps like distributed locks",
    "start": "534160",
    "end": "539279"
  },
  {
    "text": "and um secret configuration are important you'll have to get settings into your app somehow and this is a",
    "start": "539279",
    "end": "545959"
  },
  {
    "text": "standardized way of doing that and then you see those cross cross cutting concerns underneath the building",
    "start": "545959",
    "end": "552200"
  },
  {
    "text": "blocks that will apply across your services that might utilize these building blocks again observability",
    "start": "552200",
    "end": "559120"
  },
  {
    "text": "security access control policies resiliency policies and so forth and it says you can run this on",
    "start": "559120",
    "end": "565839"
  },
  {
    "text": "any cloud or infrastructure basically again we're focusing on a kubernetes environment for",
    "start": "565839",
    "end": "571920"
  },
  {
    "text": "now so these building blocks they map pretty well with certain",
    "start": "571920",
    "end": "578279"
  },
  {
    "text": "microservices patterns and on this slide it might be a little bit hard to see but",
    "start": "578279",
    "end": "585440"
  },
  {
    "text": "this is taken from a web page microservices doio and in this article that you see",
    "start": "585440",
    "end": "591800"
  },
  {
    "text": "reference they have also applied little hat the Dapper hat on top of the",
    "start": "591800",
    "end": "597200"
  },
  {
    "text": "patterns that these building blocks actually support so for example you see",
    "start": "597200",
    "end": "602519"
  },
  {
    "text": "transactional messaging that's the pubs sub building block um you have the outbox pattern",
    "start": "602519",
    "end": "609240"
  },
  {
    "text": "also supported by Dapper now um certain things that go along with",
    "start": "609240",
    "end": "615040"
  },
  {
    "text": "that health checks uh circuit breakers so a number of these patterns",
    "start": "615040",
    "end": "621320"
  },
  {
    "text": "are featured and supported by daer some are not one of those is for example",
    "start": "621320",
    "end": "627120"
  },
  {
    "text": "event sourcing we'll be looking at that specifically later also so you can have this map and you",
    "start": "627120",
    "end": "635320"
  },
  {
    "text": "can then oneto one basically move to Dapper and see if what you need is",
    "start": "635320",
    "end": "641040"
  },
  {
    "text": "actually supported that becomes important for your eventual choice of adopting Dapper are enough patterns that",
    "start": "641040",
    "end": "648360"
  },
  {
    "text": "I need present in Dapper for me to",
    "start": "648360",
    "end": "653200"
  },
  {
    "text": "utilize so these are building blocks but they are just",
    "start": "654279",
    "end": "662440"
  },
  {
    "text": "that basically they're apis so the Dapper Community if you will",
    "start": "662440",
    "end": "668959"
  },
  {
    "text": "have standardized a certain set of building blocks they describe the",
    "start": "668959",
    "end": "674639"
  },
  {
    "text": "API how you communicate with this building block or instances of it",
    "start": "674639",
    "end": "681160"
  },
  {
    "text": "certain semantics so if a pub sub you're guaranteed at least once delivery you're",
    "start": "681160",
    "end": "687320"
  },
  {
    "text": "using the cloud events message format message routing happens in a certain way content based Etc so you get an API and",
    "start": "687320",
    "end": "694680"
  },
  {
    "text": "certain semantics guaranteed if you use the psoft building block but the actual implementation of a",
    "start": "694680",
    "end": "703079"
  },
  {
    "text": "building block is done up by a component so that's the interface is as",
    "start": "703079",
    "end": "708560"
  },
  {
    "text": "a building block and the component is the implementation and that can be for",
    "start": "708560",
    "end": "714040"
  },
  {
    "text": "any type of cloud vendor or utilizing any type of cloud vendor services that adhere to the building block",
    "start": "714040",
    "end": "720480"
  },
  {
    "text": "specification so as an example we just saw we utilized SNS and sqs there",
    "start": "720480",
    "end": "726000"
  },
  {
    "text": "happens to be an implementation a component for Pub sub with SNS and",
    "start": "726000",
    "end": "732360"
  },
  {
    "text": "sqs so we can just use that component tell Dapper that's what we intend to use",
    "start": "732360",
    "end": "739160"
  },
  {
    "text": "our application code will transparently then interface with",
    "start": "739160",
    "end": "744360"
  },
  {
    "text": "that and there are a number of components that you can choose from depending on your",
    "start": "744360",
    "end": "751160"
  },
  {
    "text": "circumstances if you look at Dapper in a little bit more",
    "start": "751519",
    "end": "757440"
  },
  {
    "text": "detail again I mentioned site car so in your pod you'll have your application",
    "start": "757440",
    "end": "762880"
  },
  {
    "text": "container running along the Dapper site car you will have something of a control",
    "start": "762880",
    "end": "769320"
  },
  {
    "text": "plane in your kubernetes cluster that makes sure that each side car behaves",
    "start": "769320",
    "end": "775160"
  },
  {
    "text": "appropriately and can function as you intended to do and you",
    "start": "775160",
    "end": "780720"
  },
  {
    "text": "annotate um as you usually do that you want your side car",
    "start": "780720",
    "end": "787199"
  },
  {
    "text": "injected and once that has happened the side car will get requests from your",
    "start": "787639",
    "end": "793800"
  },
  {
    "text": "applications publishing a message for example and it will then through a specific component that you also",
    "start": "793800",
    "end": "800279"
  },
  {
    "text": "specify make sure that it is published accordingly I should also mention that",
    "start": "800279",
    "end": "807279"
  },
  {
    "text": "components by default are built into the daer binary so the communication between",
    "start": "807279",
    "end": "812639"
  },
  {
    "text": "the side car and the component actually occurs in the same process sometimes that's not enough for",
    "start": "812639",
    "end": "818920"
  },
  {
    "text": "our purposes so there are pluggable components you can also Implement we'll get to that as",
    "start": "818920",
    "end": "824760"
  },
  {
    "text": "well again this is happening within one cluster so that's our U frame of",
    "start": "824760",
    "end": "832079"
  },
  {
    "text": "reference for for this discussion if you want to manage this Beyond Cube CTL you probably will have",
    "start": "832079",
    "end": "840839"
  },
  {
    "text": "to use something like conductors there's a commercial entity backing Dapper called drid and they offer a management",
    "start": "840839",
    "end": "848519"
  },
  {
    "text": "tool for your Dapper enabled clusters called conductor it's highly advisable",
    "start": "848519",
    "end": "853880"
  },
  {
    "text": "that should you pursue Dapper in your project that is something to look into because managing it manually can become",
    "start": "853880",
    "end": "861480"
  },
  {
    "text": "quite overwhelming which is also one aspect to",
    "start": "861480",
    "end": "867079"
  },
  {
    "text": "consider specifically if you want to brace Dapper how do you actually manage this control",
    "start": "867079",
    "end": "873399"
  },
  {
    "text": "plane let's go back to the example we just saw and see if we were to move away",
    "start": "873399",
    "end": "878639"
  },
  {
    "text": "from direct integration with AWS SNS what would the Dapper equivalent",
    "start": "878639",
    "end": "884920"
  },
  {
    "text": "look like so to the right you see our",
    "start": "884920",
    "end": "891120"
  },
  {
    "text": "application code now Rewritten with Dapper so we are using the Dapper",
    "start": "891120",
    "end": "898040"
  },
  {
    "text": "SDK we could just as well have used direct HTTP call that's how we interface",
    "start": "898040",
    "end": "903399"
  },
  {
    "text": "with the sidec and in this application code version you will see that we're simply",
    "start": "903399",
    "end": "909800"
  },
  {
    "text": "publishing to a component a pub sub component a specific one the details of which are on the left",
    "start": "909800",
    "end": "918160"
  },
  {
    "text": "to a certain topic with our data that's it that's sort of the abstraction we were looking for and that's what we also",
    "start": "918160",
    "end": "924720"
  },
  {
    "text": "have right now you see the actual rest call to the side car",
    "start": "924720",
    "end": "931000"
  },
  {
    "text": "underneath to the left is the component we're using the pubs up building block",
    "start": "931000",
    "end": "937120"
  },
  {
    "text": "but this component is what actually makes thing happen what actually publishes the message on our behalf to",
    "start": "937120",
    "end": "944040"
  },
  {
    "text": "SNS and this can you can apply as any other uh metadata to your kuet cluster",
    "start": "944040",
    "end": "951440"
  },
  {
    "text": "so you see some of the details that previously were featured in our code now extracted into a yaml file such as the",
    "start": "951440",
    "end": "959720"
  },
  {
    "text": "region and you can add more settings here of course that are specific to",
    "start": "959720",
    "end": "965199"
  },
  {
    "text": "SNS noteworthy in this case is the publishing Scopes part so you can now",
    "start": "965199",
    "end": "974639"
  },
  {
    "text": "specify Access Control policies in your between your service and your",
    "start": "974639",
    "end": "979800"
  },
  {
    "text": "component and this in this case telling daer explicitly that this particular",
    "start": "979800",
    "end": "985199"
  },
  {
    "text": "application service called payment processor is allowed to publish but only to certain topics so you have a new layer so to",
    "start": "985199",
    "end": "992639"
  },
  {
    "text": "speak of Access Control you can utilize that is fully decoupled from what happens in",
    "start": "992639",
    "end": "999279"
  },
  {
    "text": "AWS yes you need to set up things there as well but that's a component job and",
    "start": "999279",
    "end": "1004560"
  },
  {
    "text": "there is a hopefully a platform team that will help you with setting up and",
    "start": "1004560",
    "end": "1009759"
  },
  {
    "text": "actually um executing this yl for you we'll get to the provisioning part of",
    "start": "1009759",
    "end": "1016240"
  },
  {
    "text": "dapper at the end of this talk but inside of your application your services",
    "start": "1016240",
    "end": "1023720"
  },
  {
    "text": "you can now reason about what can access what this service can access this",
    "start": "1023720",
    "end": "1029280"
  },
  {
    "text": "component and specifically publish to a certain topic This is highly useful if you uh",
    "start": "1029280",
    "end": "1036760"
  },
  {
    "text": "want to control the interactions between your services and",
    "start": "1036760",
    "end": "1043120"
  },
  {
    "text": "components I should also say that in this case your SNS Topic in your cues",
    "start": "1044760",
    "end": "1050840"
  },
  {
    "text": "will be automatically created for you in AWS this is not recommended Behavior",
    "start": "1050840",
    "end": "1056640"
  },
  {
    "text": "your actual resources on AWS should be created separately you have to apply",
    "start": "1056640",
    "end": "1062160"
  },
  {
    "text": "this component this has to be applied in your cluster but that is also decoupled from the actual resources you will use",
    "start": "1062160",
    "end": "1068039"
  },
  {
    "text": "again as developers we want to go away from all these concerns and just focus on the piece to the right our",
    "start": "1068039",
    "end": "1073520"
  },
  {
    "text": "application code so there are platform considerations that we need to look at as well to make the component yaml and",
    "start": "1073520",
    "end": "1081640"
  },
  {
    "text": "actual topics and cues being created on AWS handled hopefully for",
    "start": "1081640",
    "end": "1087559"
  },
  {
    "text": "us so this was messaging of course service invocation is a very popular building block for",
    "start": "1087559",
    "end": "1095799"
  },
  {
    "text": "good reason so you might have two application Services one handling customers one",
    "start": "1095799",
    "end": "1100919"
  },
  {
    "text": "handling checkout customer wants to call checkout to yeah perform",
    "start": "1100919",
    "end": "1106480"
  },
  {
    "text": "checkout so you would again call that checkout service through a name an",
    "start": "1106480",
    "end": "1113159"
  },
  {
    "text": "application ID which is checkouts so you're again constructing a URL as you",
    "start": "1113159",
    "end": "1118400"
  },
  {
    "text": "would normally do to invoke a remote service you're using this form of indirection through a service name or",
    "start": "1118400",
    "end": "1125520"
  },
  {
    "text": "application identifier in this case checkout to reach or instruct Dapper",
    "start": "1125520",
    "end": "1131039"
  },
  {
    "text": "where you want your request to go Dapper will utilize the type of service",
    "start": "1131039",
    "end": "1136120"
  },
  {
    "text": "Discovery mechanism that it supports or can find in this case it will be uh Cube",
    "start": "1136120",
    "end": "1141840"
  },
  {
    "text": "DNS it will invoke the remote side car",
    "start": "1141840",
    "end": "1147440"
  },
  {
    "text": "which handles the checkout service you can then apply encryption if you want to and mtls and the checkout will then receive",
    "start": "1147440",
    "end": "1155440"
  },
  {
    "text": "the request on a specific route SL order and if you want to of course you",
    "start": "1155440",
    "end": "1161840"
  },
  {
    "text": "can automatically generate traces and get metrics in this",
    "start": "1161840",
    "end": "1167039"
  },
  {
    "text": "flow so the important part is you get a number of features as part of the this building",
    "start": "1167039",
    "end": "1174120"
  },
  {
    "text": "block package that you can utilize but the important part is you have a level of indirection through an application",
    "start": "1174120",
    "end": "1180000"
  },
  {
    "text": "identifier in this case checkout that you use when you want to interact with that particular",
    "start": "1180000",
    "end": "1186840"
  },
  {
    "text": "service now some of you might be wondering what's the difference between Dapper and service meses service meshes",
    "start": "1188799",
    "end": "1197200"
  },
  {
    "text": "do they overlap do they this seems like a service mesh would also provide a similar level of",
    "start": "1197200",
    "end": "1203840"
  },
  {
    "text": "functionality and you would be right there is an overlap",
    "start": "1203840",
    "end": "1209200"
  },
  {
    "text": "now depper is not a service mesh if you think of a service mesh that is",
    "start": "1209200",
    "end": "1215360"
  },
  {
    "text": "something that is typically completely transparent to you as a developer you don't see those things happening on the",
    "start": "1215360",
    "end": "1221400"
  },
  {
    "text": "side mesh the service mesh level in your code Etc so that's on a network or even",
    "start": "1221400",
    "end": "1227720"
  },
  {
    "text": "infrastructure level but in Dapper you're explicitly using building blocks like service",
    "start": "1227720",
    "end": "1233640"
  },
  {
    "text": "invocation and that's sort of the scope of thater as far as service mesh",
    "start": "1233640",
    "end": "1240000"
  },
  {
    "text": "goes so for example in a service mesh like",
    "start": "1240000",
    "end": "1245919"
  },
  {
    "text": "ISO you get a trace when one service calls another synchronously say but it doesn't support Pub sub but",
    "start": "1245919",
    "end": "1253960"
  },
  {
    "text": "on the Dapper level if you call a service and that service in turn publishes a message you can trace all of",
    "start": "1253960",
    "end": "1259960"
  },
  {
    "text": "that so you have a more of a workflow level kind of Trace that is not possible",
    "start": "1259960",
    "end": "1265080"
  },
  {
    "text": "with a standard service mesh so could these work together yes",
    "start": "1265080",
    "end": "1271360"
  },
  {
    "text": "they can sometimes you have a service mesh with policies for traffic control and splitting that applies to all",
    "start": "1271360",
    "end": "1276840"
  },
  {
    "text": "traffic in your cluster then you have of course and that might also include um",
    "start": "1276840",
    "end": "1283440"
  },
  {
    "text": "mtls already enabled then you would simply turn it off in your daer runtime",
    "start": "1283440",
    "end": "1289559"
  },
  {
    "text": "so these can work together personally I have not come across a project myself that has both but it's fully possible uh",
    "start": "1289559",
    "end": "1297200"
  },
  {
    "text": "but there are some practical issues just to be aware of so you're not enabling",
    "start": "1297200",
    "end": "1302240"
  },
  {
    "text": "the same functionality on both levels so if we take all of these pieces",
    "start": "1302240",
    "end": "1312760"
  },
  {
    "text": "together and see what we actually get out of it we might say that we now",
    "start": "1312760",
    "end": "1320200"
  },
  {
    "text": "have an enabler for True application portability not my term but it's a",
    "start": "1320200",
    "end": "1328039"
  },
  {
    "text": "useful one so we already have portability for",
    "start": "1328039",
    "end": "1334200"
  },
  {
    "text": "compute right we have a standard way of packaging our application services and",
    "start": "1334200",
    "end": "1339240"
  },
  {
    "text": "deploying them on kubernetes you can more or less take the same package and deploy it in another cluster in another",
    "start": "1339240",
    "end": "1346000"
  },
  {
    "text": "Cloud vendor that that's not been the case again as we saw with application code",
    "start": "1346000",
    "end": "1352159"
  },
  {
    "text": "directly integrating with again SNS for a saying but with Dapper we also get",
    "start": "1352159",
    "end": "1358440"
  },
  {
    "text": "portability on our application Level so both compute and integration with various",
    "start": "1358440",
    "end": "1365520"
  },
  {
    "text": "services without which we cannot really achieve full portability another interesting facet is",
    "start": "1365520",
    "end": "1373600"
  },
  {
    "text": "that often there are switching costs incurred in applied when",
    "start": "1373600",
    "end": "1380640"
  },
  {
    "text": "you try to build out an architecture or migrate from one system to a more modern",
    "start": "1380640",
    "end": "1386720"
  },
  {
    "text": "one so for example if you are sort of extracted from what product and version",
    "start": "1386720",
    "end": "1393279"
  },
  {
    "text": "of a particular service you're using as we saw that Dapper enables that is a",
    "start": "1393279",
    "end": "1398400"
  },
  {
    "text": "minimizer of that cost speaking again from the level of application or from the perspective of",
    "start": "1398400",
    "end": "1404120"
  },
  {
    "text": "application developer again if you build out an architecture with common building blocks",
    "start": "1404120",
    "end": "1409760"
  },
  {
    "text": "maybe you don't have to reinvent the wheel all the time you can go to these building blocks you can retain your",
    "start": "1409760",
    "end": "1415080"
  },
  {
    "text": "knowledge of them apply them again and again hopefully policies if you re write your policies for resiliency and access",
    "start": "1415080",
    "end": "1422200"
  },
  {
    "text": "control with Dapper you can again build up new applications or modernize existing ones using the same",
    "start": "1422200",
    "end": "1429960"
  },
  {
    "text": "principles your skills are hopefully um long live in this case you don't have to",
    "start": "1429960",
    "end": "1436600"
  },
  {
    "text": "learn new apis that are vendor specific and you can also achieve",
    "start": "1436600",
    "end": "1442120"
  },
  {
    "text": "compliance like auditability in a standard way that's sometimes hard to uh",
    "start": "1442120",
    "end": "1447320"
  },
  {
    "text": "achieve with again vendor specific Alternatives most importantly you don't",
    "start": "1447320",
    "end": "1453640"
  },
  {
    "text": "have to adopt everything in uper at once these building blocks are called blocks for a reason you can choose the block",
    "start": "1453640",
    "end": "1459840"
  },
  {
    "text": "that makes sense to you in your current project or as it devolves into the future so again if you take a situation",
    "start": "1459840",
    "end": "1467799"
  },
  {
    "text": "where you have a mon live today and you want to apply the Strangler pattern to bit by bit extract Ser pieces of it that",
    "start": "1467799",
    "end": "1475200"
  },
  {
    "text": "become application Services you can neatly adopt Dapper block by Block in",
    "start": "1475200",
    "end": "1482080"
  },
  {
    "text": "those newly built Services as you see fit again you have to enable D Dapper in",
    "start": "1482080",
    "end": "1489080"
  },
  {
    "text": "your kubernetes cluster but beyond that as an application developer you have a lot of leeway in terms of what makes",
    "start": "1489080",
    "end": "1495159"
  },
  {
    "text": "sense for you in terms of building blocks to build out your your business",
    "start": "1495159",
    "end": "1501080"
  },
  {
    "text": "logic this might sound a little bit abstract so let's go to a concrete example of where you would start as a",
    "start": "1501320",
    "end": "1508480"
  },
  {
    "text": "developer bailing out a system as is good practice you should",
    "start": "1508480",
    "end": "1515960"
  },
  {
    "text": "always not always but it's very good practice to model your domain I am a",
    "start": "1515960",
    "end": "1521919"
  },
  {
    "text": "huge proponent of something called event modeling which describes how your system changes state over time",
    "start": "1521919",
    "end": "1528799"
  },
  {
    "text": "and you have three stickies you can use to describe a flow in your system",
    "start": "1528799",
    "end": "1535320"
  },
  {
    "text": "commands Express intent to change the state of your system the yellow stickies",
    "start": "1535320",
    "end": "1540399"
  },
  {
    "text": "events describe a state transition and the green stickies are what's termed read models where you can actually read",
    "start": "1540399",
    "end": "1548520"
  },
  {
    "text": "State as you can see this flow neatly divides into vertical slices and for",
    "start": "1548520",
    "end": "1553559"
  },
  {
    "text": "each slice we can align the upper building blocks if we want to start to reason about",
    "start": "1553559",
    "end": "1558919"
  },
  {
    "text": "architecture system architecture so let's quickly go through",
    "start": "1558919",
    "end": "1565640"
  },
  {
    "text": "each slice and see how Dapper supports them when we go onto implementing them",
    "start": "1565640",
    "end": "1571559"
  },
  {
    "text": "later so for the first SLI when we request a bike and not pictured here is",
    "start": "1571559",
    "end": "1577440"
  },
  {
    "text": "the building block of an API Gateway Etc so that is just implied the building block we will be",
    "start": "1577440",
    "end": "1583679"
  },
  {
    "text": "using is First Service invocation because the lane that says bike management will probably become its own",
    "start": "1583679",
    "end": "1591120"
  },
  {
    "text": "application service so from our API back end we need to call in a daap way this",
    "start": "1591120",
    "end": "1597840"
  },
  {
    "text": "service that's why this building block is there and we'll also have to update state so if someone requests a bike we",
    "start": "1597840",
    "end": "1604320"
  },
  {
    "text": "need to store that information somewhere so a state management building block is necessary the second and third",
    "start": "1604320",
    "end": "1610399"
  },
  {
    "text": "slices well something needs to select a bike for us run some algorithm based on some data it needs to read state in the",
    "start": "1610399",
    "end": "1618240"
  },
  {
    "text": "the first case again we're using the State Management building block to read state in the third slides you can see",
    "start": "1618240",
    "end": "1624720"
  },
  {
    "text": "that we're combining State Management with pubsub to accomplish an outbox so a",
    "start": "1624720",
    "end": "1631640"
  },
  {
    "text": "bike request is stored a message is also automatically published to the",
    "start": "1631640",
    "end": "1638279"
  },
  {
    "text": "selector to make it aware of that event so given this information the selector",
    "start": "1638279",
    "end": "1644360"
  },
  {
    "text": "can choose a bike for us again it will utilize service vacation Pub sub to",
    "start": "1644360",
    "end": "1650200"
  },
  {
    "text": "trigger a workflow this is exciting because daer workflow I don't usually like the word",
    "start": "1650200",
    "end": "1657000"
  },
  {
    "text": "game changer but it's pretty big deal as we'll see uh so we'll start a workflow so",
    "start": "1657000",
    "end": "1663240"
  },
  {
    "text": "we'll use a Dapper workflow building block for that and we'll also utilize bindings because we need to communicate",
    "start": "1663240",
    "end": "1669159"
  },
  {
    "text": "to the station where the bike is at that it needs to unlock it so we'll use an",
    "start": "1669159",
    "end": "1674440"
  },
  {
    "text": "output binding that building block eper to make sure that the station receives the command from us to unlock the bike",
    "start": "1674440",
    "end": "1682720"
  },
  {
    "text": "we'll start a timer 60 seconds for me to pick up the bike and should I pick up the bike again",
    "start": "1682720",
    "end": "1691080"
  },
  {
    "text": "the workflow needs to involve um service invocation State Management to update",
    "start": "1691080",
    "end": "1697640"
  },
  {
    "text": "that there's one last bike available at the station for the next customer and there the workflow also",
    "start": "1697640",
    "end": "1703960"
  },
  {
    "text": "ends so I like this because I can model my domain and then I can piz see what building blocks that I need again some",
    "start": "1703960",
    "end": "1711039"
  },
  {
    "text": "are implied like API backend and Gateway but if you just look at the Dapper ones",
    "start": "1711039",
    "end": "1716600"
  },
  {
    "text": "it gives everyone a quick look at what will be",
    "start": "1716600",
    "end": "1722159"
  },
  {
    "text": "required so to me the workflow part is particularly interesting",
    "start": "1723480",
    "end": "1729559"
  },
  {
    "text": "because it gives us a portable portable way to describe workflows that was one",
    "start": "1729559",
    "end": "1735440"
  },
  {
    "text": "of the patterns that we saw earlier then it was called sagas but again we're trying to describe",
    "start": "1735440",
    "end": "1742120"
  },
  {
    "text": "larger flows or workflows and Dapper offers that for",
    "start": "1742120",
    "end": "1747559"
  },
  {
    "text": "us so you can describe in code the type of workflow you desire we'll see an",
    "start": "1747559",
    "end": "1753440"
  },
  {
    "text": "example of it uh on the next slide you can make it durable or it functions",
    "start": "1753440",
    "end": "1759120"
  },
  {
    "text": "durably so should your workflow for some reason crash you can resume it and then continue on you can use a number of",
    "start": "1759120",
    "end": "1766039"
  },
  {
    "text": "languages to author your workflow quite seamlessly and there are sort of common",
    "start": "1766039",
    "end": "1772840"
  },
  {
    "text": "patterns workflow patterns built in that you can um simply or easily",
    "start": "1772840",
    "end": "1780760"
  },
  {
    "text": "write so if you're going to use this workflow engine",
    "start": "1781080",
    "end": "1786960"
  },
  {
    "text": "to implement the unlocking of the bike in the timer how would that look",
    "start": "1786960",
    "end": "1793039"
  },
  {
    "text": "like so in Deer you can use this waiting for an event pattern",
    "start": "1793039",
    "end": "1799200"
  },
  {
    "text": "so we are starting the workflow by notifying the customer or the renter through an output",
    "start": "1799200",
    "end": "1806120"
  },
  {
    "text": "binding that you need to unlock the bike or the bike is is now",
    "start": "1806120",
    "end": "1812519"
  },
  {
    "text": "unlocked at hopefully some point the renter will pick up the bike so this",
    "start": "1813000",
    "end": "1818039"
  },
  {
    "text": "work will receive an external event from an input binding also a building block",
    "start": "1818039",
    "end": "1823760"
  },
  {
    "text": "and Dapper and we'll then be able to update our state with the number of available",
    "start": "1823760",
    "end": "1830720"
  },
  {
    "text": "bikes however if I don't pick up the bike within 60 seconds for which we have a durable timer the daer workflow will",
    "start": "1830720",
    "end": "1839200"
  },
  {
    "text": "then lock the bike again telling the station through an output binding that you need to uh lock the bike again so",
    "start": "1839200",
    "end": "1847159"
  },
  {
    "text": "that's the high level flow on the left the workflow actually utilizes basic building blocks in Dapper to accomplish",
    "start": "1847159",
    "end": "1853440"
  },
  {
    "text": "an over overall flow and hopefully you can see that the",
    "start": "1853440",
    "end": "1858480"
  },
  {
    "text": "code to write this is not that difficult it's quite straightforward your uh actual",
    "start": "1858480",
    "end": "1865279"
  },
  {
    "text": "activities where you use for example an output binding to unlock the the bike",
    "start": "1865279",
    "end": "1872159"
  },
  {
    "text": "you have them sort of invoked in the collectivity method so the the chart as",
    "start": "1872159",
    "end": "1881360"
  },
  {
    "text": "transformed into code is more or less one to one hopefully you agree with that",
    "start": "1881360",
    "end": "1887080"
  },
  {
    "text": "assessment again this is one of the major selling",
    "start": "1887080",
    "end": "1892480"
  },
  {
    "text": "point at least for me when it comes to Dapper I don't have to rely on external other workflow engines to accomplish",
    "start": "1892480",
    "end": "1898519"
  },
  {
    "text": "this this sort of follows on on the application portability theme that I",
    "start": "1898519",
    "end": "1904080"
  },
  {
    "text": "like now not everything of course is provided",
    "start": "1904080",
    "end": "1910960"
  },
  {
    "text": "by Dapper for you there will be things that it doesn't support and from recent projects the one",
    "start": "1910960",
    "end": "1919760"
  },
  {
    "text": "that thing that I've needed to work with that does thater does support",
    "start": "1919760",
    "end": "1925360"
  },
  {
    "text": "is event stores for event sourcing so those who are unfamiliar",
    "start": "1925360",
    "end": "1931480"
  },
  {
    "text": "with the term an event store stores business events uh natively so much like you",
    "start": "1931480",
    "end": "1939880"
  },
  {
    "text": "publish events on using pubsub you can store events as a single source of Truth for your",
    "start": "1939880",
    "end": "1946279"
  },
  {
    "text": "application again there are specialized stores event stores for this purpose and",
    "start": "1946279",
    "end": "1951919"
  },
  {
    "text": "that is something I have had a reason for for using in in a number of projects",
    "start": "1951919",
    "end": "1958840"
  },
  {
    "text": "however there is no support for it in Dapper what are our options one is we wait for a new",
    "start": "1958840",
    "end": "1965360"
  },
  {
    "text": "building block but again that's kind of a hard thing to drive through you need to",
    "start": "1965360",
    "end": "1971320"
  },
  {
    "text": "engage Community get an agreement on it and then you have to yeah make sure it gets part of the official specification",
    "start": "1971320",
    "end": "1978639"
  },
  {
    "text": "hard cell if I'm not the only one wanting it but again it's it's not",
    "start": "1978639",
    "end": "1983679"
  },
  {
    "text": "something we can wait for so this is where I mentioned again input and output bindings as our escape hatch we can use",
    "start": "1983679",
    "end": "1991320"
  },
  {
    "text": "bindings to interface with any type of external System including event",
    "start": "1991320",
    "end": "1997000"
  },
  {
    "text": "stores and again components are actually built into the Dapper binary but we",
    "start": "1997000",
    "end": "2003760"
  },
  {
    "text": "can't Fork the Dapper binary and include our component that's also quite tricky",
    "start": "2003760",
    "end": "2009480"
  },
  {
    "text": "instead we can build as a pluggable component we can run the component as a separate process and then tell Dapper",
    "start": "2009480",
    "end": "2016159"
  },
  {
    "text": "that I now exist you can use me to interface with an event",
    "start": "2016159",
    "end": "2021440"
  },
  {
    "text": "store and the application developer will use bindings uh to uh to do that let's look",
    "start": "2021440",
    "end": "2028519"
  },
  {
    "text": "an example again building on this bike rental example so here I need to actually store",
    "start": "2028519",
    "end": "2036840"
  },
  {
    "text": "the yellow stickies my events this will be the source of Truth for all my state",
    "start": "2036840",
    "end": "2042200"
  },
  {
    "text": "in my application how do I do that I can use an output",
    "start": "2042200",
    "end": "2048079"
  },
  {
    "text": "binding to interface with an event store I'm using the axonic technology stack",
    "start": "2048079",
    "end": "2054560"
  },
  {
    "text": "for this purpose and this binding will have as",
    "start": "2054560",
    "end": "2060280"
  },
  {
    "text": "any other building block a component that knows how to speak to Accent server the event store you cannot do it",
    "start": "2060280",
    "end": "2066919"
  },
  {
    "text": "directly so it's a add-on called ACC signups that you can use to uh to",
    "start": "2066919",
    "end": "2072839"
  },
  {
    "text": "accomplish this so what happens I send out a command basically a message",
    "start": "2072839",
    "end": "2079480"
  },
  {
    "text": "through this output binding to Accent signups The Binding has a component an",
    "start": "2079480",
    "end": "2085440"
  },
  {
    "text": "acual implementation that knows how to speak to access signups again that's hidden for me as an application",
    "start": "2085440",
    "end": "2090919"
  },
  {
    "text": "developer and then it will interface with the actual event store to process",
    "start": "2090919",
    "end": "2096320"
  },
  {
    "text": "the command yield an event event that is stored in the event store and also",
    "start": "2096320",
    "end": "2101680"
  },
  {
    "text": "update the number of available bikes again if you're familiar with cqrs perhaps you'll find some of some",
    "start": "2101680",
    "end": "2108720"
  },
  {
    "text": "recognition here I hope the details of which are not that essential for this",
    "start": "2108720",
    "end": "2114359"
  },
  {
    "text": "discussion but just that we are using output bindings a building block in Dapper with a specific component that",
    "start": "2114359",
    "end": "2121440"
  },
  {
    "text": "either we or someone else has developed to interface with the event store",
    "start": "2121440",
    "end": "2127960"
  },
  {
    "text": "so this component what will it actually",
    "start": "2128119",
    "end": "2134040"
  },
  {
    "text": "look like well in our code we'll simply say send a command send a message that we",
    "start": "2134040",
    "end": "2142640"
  },
  {
    "text": "want to change state that we want to generate an event we'll Target the component we call",
    "start": "2142640",
    "end": "2148560"
  },
  {
    "text": "it message bus the operation is something we can Define or someone who builds this component can Define for us",
    "start": "2148560",
    "end": "2155800"
  },
  {
    "text": "that we can invoke and then we'll tag along the actual message the data uh in",
    "start": "2155800",
    "end": "2162280"
  },
  {
    "text": "the release by command the Dapper side car in the component will communicate performant through G",
    "start": "2162280",
    "end": "2168400"
  },
  {
    "text": "RPC and then the component handles all the tricky stuff by interfacing with the event store but again there are a number",
    "start": "2168400",
    "end": "2175400"
  },
  {
    "text": "of operations defined on the component that we can utilize and we can apply this jamble to",
    "start": "2175400",
    "end": "2181760"
  },
  {
    "text": "kubernetes their cluster to make sure that starts existing starts running so",
    "start": "2181760",
    "end": "2187079"
  },
  {
    "text": "we can invoke from our code hopefully you're seeing that",
    "start": "2187079",
    "end": "2192680"
  },
  {
    "text": "adopting Dapper where there isn't a building block available for you can be tricky I'm not do showing this to scare",
    "start": "2192680",
    "end": "2199560"
  },
  {
    "text": "you off just to be mindful that should you encounter a case like this there are",
    "start": "2199560",
    "end": "2204880"
  },
  {
    "text": "a few steps you need to be aware of to make all of this work it's not too much work but",
    "start": "2204880",
    "end": "2212640"
  },
  {
    "text": "it's something you have to be mindful of",
    "start": "2212640",
    "end": "2218240"
  },
  {
    "text": "there's another interesting aspect when it comes to Dapper",
    "start": "2219040",
    "end": "2225880"
  },
  {
    "text": "and that is the fact that daer by its very notion is working distributedly or",
    "start": "2225880",
    "end": "2233480"
  },
  {
    "text": "in distributed fashion AKA everything goes out on the",
    "start": "2233480",
    "end": "2240078"
  },
  {
    "text": "network not everything has to go out on the network in our code if you're building a application",
    "start": "2240560",
    "end": "2247800"
  },
  {
    "text": "that is largely or completely message driven like we saw with commands queries and",
    "start": "2247800",
    "end": "2253599"
  },
  {
    "text": "events you're relying on something called location transparency you're sending out say a command an instruction",
    "start": "2253599",
    "end": "2260280"
  },
  {
    "text": "to another service that you want to change State over there by using a command a message",
    "start": "2260280",
    "end": "2267839"
  },
  {
    "text": "you're not aware of what the target destination is or where it is it might be in the same process it might cross a",
    "start": "2267839",
    "end": "2274079"
  },
  {
    "text": "network boundary to get there but in daer you actually always communicating at least to your side car",
    "start": "2274079",
    "end": "2279800"
  },
  {
    "text": "and beyond that might be not the most optimal way should",
    "start": "2279800",
    "end": "2285760"
  },
  {
    "text": "your service you want to reach actually reside in the same process why is location transparency",
    "start": "2285760",
    "end": "2292280"
  },
  {
    "text": "good you can start by building a modular monolith that communicates through messaging when the time comes and you",
    "start": "2292280",
    "end": "2298960"
  },
  {
    "text": "need to extract components you can do that completely transparently because messaging allows",
    "start": "2298960",
    "end": "2304880"
  },
  {
    "text": "you to do that you don't know where your message is routed too and that's the whole point so there's a lot of benefits",
    "start": "2304880",
    "end": "2312200"
  },
  {
    "text": "utilizing this characteristic of location transparency but Dapper doesn't",
    "start": "2312200",
    "end": "2318319"
  },
  {
    "text": "sort of allow for it from the get-go you need to build some extra abstraction to",
    "start": "2318319",
    "end": "2323760"
  },
  {
    "text": "support it so again distributed application runtime awesome but it's not always what",
    "start": "2323760",
    "end": "2331000"
  },
  {
    "text": "we want by default so you might encounter the need to create certain",
    "start": "2331000",
    "end": "2336960"
  },
  {
    "text": "abstraction so for example um when I send a command using the event",
    "start": "2336960",
    "end": "2343359"
  },
  {
    "text": "store example from from earlier sometimes the command Handler the thing that actually processes my command and",
    "start": "2343359",
    "end": "2349359"
  },
  {
    "text": "generates an event is in the same process so I will need some extraction",
    "start": "2349359",
    "end": "2354480"
  },
  {
    "text": "call it command bus that knows about the destination for my command and says okay",
    "start": "2354480",
    "end": "2360720"
  },
  {
    "text": "this one is in the same process so I will skip sending something out onto the output binding",
    "start": "2360720",
    "end": "2367520"
  },
  {
    "text": "but if it actually needs to Traverse a network boundary I will route your",
    "start": "2367520",
    "end": "2372560"
  },
  {
    "text": "command over the output binding to the event store and a remote command",
    "start": "2372560",
    "end": "2379319"
  },
  {
    "text": "Handler again depper doesn't come with this this is application specific you will have to build something along those",
    "start": "2379319",
    "end": "2386000"
  },
  {
    "text": "lines if you want to take advantage of this location transparency characteristic which I",
    "start": "2386000",
    "end": "2393359"
  },
  {
    "text": "hope you will if you build a message driven system again all to say thater gives you a lot",
    "start": "2393359",
    "end": "2401880"
  },
  {
    "text": "of things that you can utilize to build your domain logic but there are some cases you you need to add additional",
    "start": "2401880",
    "end": "2408760"
  },
  {
    "text": "abstraction on top this is one way of extending Dapper",
    "start": "2408760",
    "end": "2413960"
  },
  {
    "text": "for your purposes sometimes it's not as involved as what we just saw so",
    "start": "2413960",
    "end": "2422560"
  },
  {
    "text": "you'll more likely than not encounter the case where yes you're using a thater",
    "start": "2422560",
    "end": "2428160"
  },
  {
    "text": "building block in this case State Management to store State and read State maybe in the SQL",
    "start": "2428160",
    "end": "2436359"
  },
  {
    "text": "database but you also maybe want to run some efficient SQL Cur directly onto the",
    "start": "2436359",
    "end": "2441960"
  },
  {
    "text": "database there is no SQL building block in Dapper I'm not sure there needs to be but if you still need to run a query",
    "start": "2441960",
    "end": "2447800"
  },
  {
    "text": "against your database where do you put it how do you accomplish",
    "start": "2447800",
    "end": "2453000"
  },
  {
    "text": "it well we try to isolate things as we",
    "start": "2453000",
    "end": "2458560"
  },
  {
    "text": "normally maybe do so while you might be storing State key values uh pairs using",
    "start": "2458560",
    "end": "2465319"
  },
  {
    "text": "the adaper building block you can isolate your direct queries into a separate service and from a service a",
    "start": "2465319",
    "end": "2472880"
  },
  {
    "text": "you can use ster service indication to call service B where the actual raw SQL query is",
    "start": "2472880",
    "end": "2479319"
  },
  {
    "text": "executed this is actually how you would typically also utilize Dapper in a",
    "start": "2479319",
    "end": "2484359"
  },
  {
    "text": "Brownfield scenario you would isolate s the details in a separate",
    "start": "2484359",
    "end": "2489400"
  },
  {
    "text": "service and here you have the same problem that we started with a specific driver matching specific version of",
    "start": "2489400",
    "end": "2496520"
  },
  {
    "text": "posess at least you can minimize the what do you call it blast radius to something happen you can isolate that",
    "start": "2496520",
    "end": "2502880"
  },
  {
    "text": "part into a separate service while the rest of your application is oriented more or less",
    "start": "2502880",
    "end": "2509520"
  },
  {
    "text": "fully towards Dapper that's a valid strategy to employ if you happen upon a",
    "start": "2509520",
    "end": "2515640"
  },
  {
    "text": "scenario like this why isn't SQL a building block IND Dapper it's not a",
    "start": "2515640",
    "end": "2520880"
  },
  {
    "text": "pattern it's not a microservice pattern so you could find in the map we saw earlier SQL just an interface to well",
    "start": "2520880",
    "end": "2529079"
  },
  {
    "text": "SQL databases it's a language so it's not naturally something that would",
    "start": "2529079",
    "end": "2534480"
  },
  {
    "text": "become a Dapper building block not to say that there might be other aspects to it that would make it a building block",
    "start": "2534480",
    "end": "2540440"
  },
  {
    "text": "but I'll see what the future holds in that regard again extending",
    "start": "2540440",
    "end": "2545880"
  },
  {
    "text": "Dapper these types of dependencies there's another consideration that every type of abstraction layer",
    "start": "2545880",
    "end": "2554319"
  },
  {
    "text": "brings with it your abstraction layer your logical layer if you will you cannot abstract",
    "start": "2554319",
    "end": "2560839"
  },
  {
    "text": "away what goes on underneath the physical properties a quote from a famous",
    "start": "2560839",
    "end": "2568400"
  },
  {
    "text": "architect what does that mean you will more or less become aware of things",
    "start": "2568400",
    "end": "2575920"
  },
  {
    "text": "like pricing scaling error handling geographical availability that your abstraction layer",
    "start": "2575920",
    "end": "2582640"
  },
  {
    "text": "relies on when it comes to the Dapper components for example so simple example",
    "start": "2582640",
    "end": "2589200"
  },
  {
    "text": "um let's say I wanted to employ State Management in Dapper and there is a",
    "start": "2589200",
    "end": "2596880"
  },
  {
    "text": "postgress database already available that I can use to store in read State however in my case it turned out",
    "start": "2596880",
    "end": "2606000"
  },
  {
    "text": "we needed a Rd s proxy we needed a proxy to Multiplex database connections to the",
    "start": "2606000",
    "end": "2611200"
  },
  {
    "text": "database because it will become unwieldy otherwise however the",
    "start": "2611200",
    "end": "2617160"
  },
  {
    "text": "RDS proxy at the time was not available in the EU North one Stockholm region so",
    "start": "2617160",
    "end": "2622520"
  },
  {
    "text": "yes I wanted to use Dapper I wanted the component to that supports pogress but I couldn't really use it because the proxy",
    "start": "2622520",
    "end": "2629000"
  },
  {
    "text": "the technical detail was simply not available at the time so the abstraction layer was supposed to give me State",
    "start": "2629000",
    "end": "2636640"
  },
  {
    "text": "Management but in reality it was hard to actually accomplish using the pogress",
    "start": "2636640",
    "end": "2642240"
  },
  {
    "text": "component there are other differences um when it comes to Pub sub like SNS and",
    "start": "2642240",
    "end": "2647480"
  },
  {
    "text": "sqs in sqs you have the notion of visibility timeouts if you consume a message you want to hide it from other",
    "start": "2647480",
    "end": "2652960"
  },
  {
    "text": "consumers while you're processing it not every queuing system has this",
    "start": "2652960",
    "end": "2658119"
  },
  {
    "text": "notion so what do you do with a building block that apparently supports it for",
    "start": "2658119",
    "end": "2663400"
  },
  {
    "text": "everything well you get in the integrated details you realize you have to adapt the component settings and a",
    "start": "2663400",
    "end": "2671559"
  },
  {
    "text": "lot of that that stuff to make sure that the promise of the pub sub holds true",
    "start": "2671559",
    "end": "2678680"
  },
  {
    "text": "again the abstraction layer sounds good in theory and it is good in almost all times in practice but you will encounter",
    "start": "2678680",
    "end": "2686359"
  },
  {
    "text": "some physical characteristics that you cannot escape and that's the trade-off you you're raising your level of",
    "start": "2686359",
    "end": "2693319"
  },
  {
    "text": "distraction or operating there but it also makes you compromise sometimes on",
    "start": "2693319",
    "end": "2700200"
  },
  {
    "text": "vital technical",
    "start": "2700200",
    "end": "2703318"
  },
  {
    "text": "issues I want to end with what we alluded to earlier and",
    "start": "2705640",
    "end": "2710800"
  },
  {
    "text": "that's platform engineering and how it relates to Dapper now we've seen that we're essentially",
    "start": "2710800",
    "end": "2717599"
  },
  {
    "text": "decoupling platform infrastructure aspects from our application code to",
    "start": "2717599",
    "end": "2724040"
  },
  {
    "text": "Dapper but things don't just create or get created by themselves somewhere",
    "start": "2724040",
    "end": "2730000"
  },
  {
    "text": "in your Cloud vendor something has to provision resources that your application code will rely on or",
    "start": "2730000",
    "end": "2736920"
  },
  {
    "text": "invoke so what do we do with provisioning so let's say that I want to",
    "start": "2736920",
    "end": "2742119"
  },
  {
    "text": "use State Management again and we need to deploy a database for this the",
    "start": "2742119",
    "end": "2747760"
  },
  {
    "text": "pogress and there will be a component that makes sure that Dapper and my code gets linked to this specific database",
    "start": "2747760",
    "end": "2754960"
  },
  {
    "text": "instance there is a tool that is quite popular called crossplane you might have heard",
    "start": "2754960",
    "end": "2760720"
  },
  {
    "text": "of that as well where you can create abstractions platform abstractions for what we in R te might call or mean by a",
    "start": "2760720",
    "end": "2767760"
  },
  {
    "text": "database so in this case there can be an abstraction we can select that we're",
    "start": "2767760",
    "end": "2774240"
  },
  {
    "text": "wanting to provision this on cloud in a cloud setting AWS specifically and the database instance should be small",
    "start": "2774240",
    "end": "2780720"
  },
  {
    "text": "whatever that means and we can apply this and crossplane will then reach out and",
    "start": "2780720",
    "end": "2787079"
  },
  {
    "text": "provision the associated resources in this abstraction for us in",
    "start": "2787079",
    "end": "2792119"
  },
  {
    "text": "AWS quite handy but that only deploys a database",
    "start": "2792119",
    "end": "2797400"
  },
  {
    "text": "we need to still connect it to our code through a component how do we do that",
    "start": "2797400",
    "end": "2803920"
  },
  {
    "text": "well I apply the database abstraction to my cluster crossplane sees that it",
    "start": "2803920",
    "end": "2810319"
  },
  {
    "text": "instantiates sort of this concrete uh database by provisioning it",
    "start": "2810319",
    "end": "2816160"
  },
  {
    "text": "on AWS it will create the necessary credentials store it in cumulated secrets and you",
    "start": "2816160",
    "end": "2823280"
  },
  {
    "text": "also apply this Dapper component that needs to be applied for the side card to",
    "start": "2823280",
    "end": "2829559"
  },
  {
    "text": "to interact with so the yellow parts will be automatically created by",
    "start": "2829559",
    "end": "2835839"
  },
  {
    "text": "crossplay and then my application can simply use Dapper through the component",
    "start": "2835839",
    "end": "2841960"
  },
  {
    "text": "to store state in PCR again this is not again something that that provides we need to create",
    "start": "2841960",
    "end": "2848880"
  },
  {
    "text": "this scheme ourselves but there are few things that are non-trivial so naming our services",
    "start": "2848880",
    "end": "2856280"
  },
  {
    "text": "application identifiers who decides what my service is called is that us as application developers platform team us",
    "start": "2856280",
    "end": "2864520"
  },
  {
    "text": "together security policies am I in my in my app allowed to actually use the",
    "start": "2864520",
    "end": "2870119"
  },
  {
    "text": "Dapper component the store State we saw previously that we can use Dapper to control access between services and",
    "start": "2870119",
    "end": "2876559"
  },
  {
    "text": "compon components who decides on those policies so this is more of a managerial",
    "start": "2876559",
    "end": "2884200"
  },
  {
    "text": "issue maybe but it's hugely important to have something where you can easily negotiate and then actually create these",
    "start": "2884200",
    "end": "2890240"
  },
  {
    "text": "abstractions to arrive at a solution like this daeron Cross by itself is quite low",
    "start": "2890240",
    "end": "2898000"
  },
  {
    "text": "level again this scheme is yeah low level as application developers we would",
    "start": "2898000",
    "end": "2904520"
  },
  {
    "text": "maybe like something like this we would say that I want an environment locally",
    "start": "2904520",
    "end": "2911119"
  },
  {
    "text": "in a staging or in production I'll have an application to",
    "start": "2911119",
    "end": "2916480"
  },
  {
    "text": "deploy and I have a database that I need specifically you need to instantiate or",
    "start": "2916480",
    "end": "2923520"
  },
  {
    "text": "provision this database but I also want to use it through Dapper so you need to apply this component for me as",
    "start": "2923520",
    "end": "2929599"
  },
  {
    "text": "well this is using a solution called critics which is quite interesting because it gives us sort of",
    "start": "2929599",
    "end": "2936240"
  },
  {
    "text": "that I wouldn't say final but it's a vital piece of the puzzle so if I can combine",
    "start": "2936240",
    "end": "2942960"
  },
  {
    "text": "my application considerations with the infrastructure I need with Dapper",
    "start": "2942960",
    "end": "2948440"
  },
  {
    "text": "components also mixed into it and that is all I apply in a giup",
    "start": "2948440",
    "end": "2953839"
  },
  {
    "text": "fashion well I would have arrived at a pretty good solution for myself um so",
    "start": "2953839",
    "end": "2960680"
  },
  {
    "text": "again just embracing Dapper is not a thing you will have to deal with these",
    "start": "2960680",
    "end": "2965960"
  },
  {
    "text": "issues as well and they can be quite large in scope several teams will have to negotiate to arrive at something like",
    "start": "2965960",
    "end": "2974319"
  },
  {
    "text": "what you see on the slide this has been quite technical in a",
    "start": "2974319",
    "end": "2980160"
  },
  {
    "text": "sense I want to end finally with what are Developer actually saying about Dapper so I've I've been saying a lot",
    "start": "2980160",
    "end": "2986520"
  },
  {
    "text": "what are people out in the field uh telling us about Dapper this is from a survey from last",
    "start": "2986520",
    "end": "2992599"
  },
  {
    "text": "year we start with the type of building blocks well these are the building blocks you would Envision would be the",
    "start": "2992599",
    "end": "2998520"
  },
  {
    "text": "most popular pops up everybody needs popup who doesn't um so that goes",
    "start": "2998520",
    "end": "3003760"
  },
  {
    "text": "without saying perhaps but then closely followed by service invocation uh you need this type of",
    "start": "3003760",
    "end": "3009839"
  },
  {
    "text": "interaction that that building block provides uh to apply various types of policies Etc so yeah on State Management",
    "start": "3009839",
    "end": "3017680"
  },
  {
    "text": "as well these are the top three they're always what developers that utilize oper",
    "start": "3017680",
    "end": "3022880"
  },
  {
    "text": "voice to me as well but on our grander scheme what do they",
    "start": "3022880",
    "end": "3029480"
  },
  {
    "text": "actually like about Dapper there's one that has surprised me this says no code changes when swapping",
    "start": "3029480",
    "end": "3036559"
  },
  {
    "text": "components that's a great promise that's actually something you can achieve with Dapper however is that actually",
    "start": "3036559",
    "end": "3043119"
  },
  {
    "text": "something that happens often that you actually have taken advantage of or is it a nice to",
    "start": "3043119",
    "end": "3049799"
  },
  {
    "text": "have the survey didn't say I personally find hard to believe that they have actually utilized that feature of dapper",
    "start": "3049799",
    "end": "3057440"
  },
  {
    "text": "um but again if we want to achieve true application portability it's important",
    "start": "3057440",
    "end": "3063799"
  },
  {
    "text": "of course but I don't I'm not sure that many teams encounter this",
    "start": "3063799",
    "end": "3069520"
  },
  {
    "text": "frequently um so that's some of the feedback that",
    "start": "3069520",
    "end": "3074680"
  },
  {
    "text": "developers provide okay summarize we see the daper gives us the",
    "start": "3074680",
    "end": "3080920"
  },
  {
    "text": "capabilities we need to fully build Cloud native applications in a platform",
    "start": "3080920",
    "end": "3087119"
  },
  {
    "text": "and language agnostic way it enables what we've talked about",
    "start": "3087119",
    "end": "3092440"
  },
  {
    "text": "in terms of portability not only of our application code um but also as we see",
    "start": "3092440",
    "end": "3099520"
  },
  {
    "text": "how we interface with various types of resources the services typically offered by Cloud vendors and by its very nature",
    "start": "3099520",
    "end": "3106960"
  },
  {
    "text": "you get a separation between code and infrastructure but actually make them",
    "start": "3106960",
    "end": "3112799"
  },
  {
    "text": "work well together you need provisioning schemes that we just saw uh um to support it and maybe the final point",
    "start": "3112799",
    "end": "3120520"
  },
  {
    "text": "that is important or essential is it's a not an All or Nothing proposition you choose the building blocks that Mak",
    "start": "3120520",
    "end": "3126040"
  },
  {
    "text": "sense for you in your current uh project",
    "start": "3126040",
    "end": "3132119"
  },
  {
    "text": "again does this say whether you should adopt Dapper or not doesn't really so",
    "start": "3132119",
    "end": "3138280"
  },
  {
    "text": "I'll leave you with a few a few thoughts look into duer and specifically",
    "start": "3138280",
    "end": "3143400"
  },
  {
    "text": "should adopt it if a a very large part of your business logic will be feasible",
    "start": "3143400",
    "end": "3151760"
  },
  {
    "text": "to be implemented through building blocks alone meaning the extending daper things",
    "start": "3151760",
    "end": "3157799"
  },
  {
    "text": "the dependencies that we saw if you can if that's a something that you know beforehand will not occur too often and",
    "start": "3157799",
    "end": "3164559"
  },
  {
    "text": "building blocks will support most of your implementation efforts that's a good signal the Dapper is maybe for",
    "start": "3164559",
    "end": "3170760"
  },
  {
    "text": "you but if you have sort of a an inkling that that's not the case you will have to extend up you will have to interface",
    "start": "3170760",
    "end": "3177359"
  },
  {
    "text": "with the event stores you will have to isolate SQL direct SQL queries in separate",
    "start": "3177359",
    "end": "3182760"
  },
  {
    "text": "Services maybe take another uh stab at whether I should adopt Dapper right now",
    "start": "3182760",
    "end": "3188880"
  },
  {
    "text": "or not again I'm not a fanboy of dapper obviously I want to use it where it",
    "start": "3188880",
    "end": "3194520"
  },
  {
    "text": "makes sense but that's a good signal I think but it also needs to be weighed",
    "start": "3194520",
    "end": "3200119"
  },
  {
    "text": "against the cost of actually managing thater you need to install it in your cluster you need to upgrade Apper Etc",
    "start": "3200119",
    "end": "3207400"
  },
  {
    "text": "you have tools for it that you can use that will help you but yeah there's investment that goes into that as well",
    "start": "3207400",
    "end": "3213720"
  },
  {
    "text": "and again provisioning and all of that but again I would say that if your application",
    "start": "3213720",
    "end": "3219400"
  },
  {
    "text": "will um be realized mostly through Dapper",
    "start": "3219400",
    "end": "3224920"
  },
  {
    "text": "building blocks and you want to give your developers this transparent experience when it comes to actually",
    "start": "3224920",
    "end": "3231720"
  },
  {
    "text": "interfacing with certain capabilities yeah why not explore it",
    "start": "3231720",
    "end": "3236920"
  },
  {
    "text": "should you have any questions as you maybe start down that path do reach out to me I'm happy to have that",
    "start": "3236920",
    "end": "3243760"
  },
  {
    "text": "conversation thank you very much [Applause]",
    "start": "3243760",
    "end": "3251510"
  }
]