[
  {
    "text": "imagine that you are working on tributed system so your application runs on multiple machines you",
    "start": "6490",
    "end": "12790"
  },
  {
    "text": "bubbly have multiple microservices multiple components there is some database file storage service bascule",
    "start": "12790",
    "end": "18820"
  },
  {
    "text": "whatever else you can imagine a lot of these things running in parallel so then the user comes in hits some load",
    "start": "18820",
    "end": "25090"
  },
  {
    "text": "balancer then the request is routed to some web server and the workflow starts so probably sounds fin hits database",
    "start": "25090",
    "end": "31869"
  },
  {
    "text": "file storage etc etc multiple components are in play and then because all of",
    "start": "31869",
    "end": "36910"
  },
  {
    "text": "these is distributed something runs in London here in UK some other machine runs in Seattle some other machine in",
    "start": "36910",
    "end": "43809"
  },
  {
    "text": "talk here Japan so generally those things are all around the globe so things they do fail this is typical",
    "start": "43809",
    "end": "49690"
  },
  {
    "text": "in distributed systems so now your user gets an error message telling that hey something went wrong etc and user comes",
    "start": "49690",
    "end": "56590"
  },
  {
    "text": "to your support saying hey please fix this this is some idea of the workflow etc go and figure out what happened so",
    "start": "56590",
    "end": "63490"
  },
  {
    "text": "now comes the question how do we structure our locks or how do we lock",
    "start": "63490",
    "end": "68590"
  },
  {
    "text": "information in the distributed system so we can figure out what exactly happened",
    "start": "68590",
    "end": "73659"
  },
  {
    "text": "what happened not necessarily not only like in which components but also in",
    "start": "73659",
    "end": "78909"
  },
  {
    "text": "which order so how the things were executed especially that we are talking distributed systems here they are very",
    "start": "78909",
    "end": "85390"
  },
  {
    "text": "long that will cause there are things running on the west and east side of the globe there are things running in",
    "start": "85390",
    "end": "90820"
  },
  {
    "text": "parallel and running serially at the same time so during this talk we'll try to figure out how to log information in",
    "start": "90820",
    "end": "97150"
  },
  {
    "text": "the system so that later we can extract the D order of this information so we",
    "start": "97150",
    "end": "102549"
  },
  {
    "text": "can recapture the order of how the operations how they're all the steps were executed one after another so",
    "start": "102549",
    "end": "109780"
  },
  {
    "text": "that's the point and during this talk we'll figure out how to add some ordering to the head chaotic world of",
    "start": "109780",
    "end": "115330"
  },
  {
    "text": "distributed services before we move on few words about me I used to be a dotnet developer now I'm I'm a machine learning",
    "start": "115330",
    "end": "121990"
  },
  {
    "text": "Big Data guy at Amazon Seattle mosa blogger public speaker feel free to",
    "start": "121990",
    "end": "127210"
  },
  {
    "text": "drop me a line on Twitter email whatever works for you at the end of this talk those a QR code pointing you data to the",
    "start": "127210",
    "end": "134080"
  },
  {
    "text": "slide deck so you can download this deck and walk it through on your own time also like last year I released this book",
    "start": "134080",
    "end": "140769"
  },
  {
    "text": "called dope net internals cookbook which explains a lot of things which are running under the hood and open",
    "start": "140769",
    "end": "146470"
  },
  {
    "text": "how my modern management is structured motive readying shame how interrupts interrupts with C++ work etc so if you",
    "start": "146470",
    "end": "154630"
  },
  {
    "text": "are interested in these things feel free to take a look it's supposed it's meant to be second so it's like a series of",
    "start": "154630",
    "end": "160390"
  },
  {
    "text": "questions and answers with links pointing to various sources so it's just like the beginning of the journey okay",
    "start": "160390",
    "end": "168370"
  },
  {
    "text": "let's move on so agenda for this talk like we started with stating the problem okay there is",
    "start": "168370",
    "end": "174130"
  },
  {
    "text": "some logging we would like to recapture the order of steps in our system so the",
    "start": "174130",
    "end": "179830"
  },
  {
    "text": "most obvious solution we probably which probably comes to our mind is why not just lock the timestamp when we are",
    "start": "179830",
    "end": "186040"
  },
  {
    "text": "doing any logging so logger that log provide a timestamp provide enough that details what's going on and the thing is",
    "start": "186040",
    "end": "192400"
  },
  {
    "text": "timestamp and wall clock in general doesn't work in distributed systems and it's proven that it won't work so in the",
    "start": "192400",
    "end": "199390"
  },
  {
    "text": "first part of this talk I'll try to show you what problems we may face face when we are working with time in distributed",
    "start": "199390",
    "end": "206590"
  },
  {
    "text": "systems and by time I mean here mostly wall clock like that time saying it's 2",
    "start": "206590",
    "end": "212170"
  },
  {
    "text": "p.m. in London for instance so then we'll figure out after seeing that",
    "start": "212170",
    "end": "217300"
  },
  {
    "text": "clocks they do not work for us we'll figure out what we can use instead of",
    "start": "217300",
    "end": "222340"
  },
  {
    "text": "using wall clocks so we will see how to avoid clocks in computer science and then we'll see some real implementation",
    "start": "222340",
    "end": "228760"
  },
  {
    "text": "showing you how to make this things simple and yet working correctly ultimately we'll just go beyond the time",
    "start": "228760",
    "end": "235660"
  },
  {
    "text": "and we'll focus on some broader computer science problems like how to solve consensus or how to introduce like total",
    "start": "235660",
    "end": "242530"
  },
  {
    "text": "on during ordering in our system which is not the main point of our problem we are solving but still something we can",
    "start": "242530",
    "end": "248470"
  },
  {
    "text": "generalize later so what is time like the obvious solution for ordering the",
    "start": "248470",
    "end": "253840"
  },
  {
    "text": "logs is we extract all the logs from all the machines and we sort them by the time stone yeah the only problem with",
    "start": "253840",
    "end": "260380"
  },
  {
    "text": "time is apart from like some physical definition that is like transitions of cesium these many transitions in each",
    "start": "260380",
    "end": "266830"
  },
  {
    "text": "second is that there is no global time every single machine every single clock",
    "start": "266830",
    "end": "272110"
  },
  {
    "text": "every single watch on your wrist is basically showing different time and while for us human is not a problem when",
    "start": "272110",
    "end": "278440"
  },
  {
    "text": "it differs by a second or even by minute four computers it gets really serious because all the operations we",
    "start": "278440",
    "end": "285040"
  },
  {
    "text": "are running in our systems they are pretty fast operation can execute in like nanoseconds so if our clocks they",
    "start": "285040",
    "end": "291729"
  },
  {
    "text": "differ by a second it's way too long for the operating system and for the machines to figure out what is going on",
    "start": "291729",
    "end": "298090"
  },
  {
    "text": "and also because we are using clocks and we need super high precision clocks tend",
    "start": "298090",
    "end": "304570"
  },
  {
    "text": "to increase their error rate as well and when we increase the precision so we when we would like to have like",
    "start": "304570",
    "end": "311080"
  },
  {
    "text": "nanosecond precision for our watches like the error rate so the time when clocks go out of sync is increasing",
    "start": "311080",
    "end": "318850"
  },
  {
    "text": "significantly I mean it's much faster it can be after a few seconds obviously clocks can differ not only because of",
    "start": "318850",
    "end": "326620"
  },
  {
    "text": "their like problematic construction but also because the operating system or the Machine you are working on is actually",
    "start": "326620",
    "end": "333760"
  },
  {
    "text": "moving this is like a lot of relativity by Einstein telling us that hey the higher we are above the earth and the",
    "start": "333760",
    "end": "340900"
  },
  {
    "text": "faster we move like the time changes so basically these are things which we need to take into account when we are",
    "start": "340900",
    "end": "347110"
  },
  {
    "text": "implementing distributed systems or things like which are working in the space or working on a plane so using a",
    "start": "347110",
    "end": "353530"
  },
  {
    "text": "time is not necessarily a super simple in the in the scenario would like to",
    "start": "353530",
    "end": "358840"
  },
  {
    "text": "consider but also when it comes to the time there is yet another issue which",
    "start": "358840",
    "end": "364180"
  },
  {
    "text": "which is called a time zone and whenever someone mentions a time zone we tend to",
    "start": "364180",
    "end": "369310"
  },
  {
    "text": "think about whole number of hours counted from UTC so we say the time zone",
    "start": "369310",
    "end": "374830"
  },
  {
    "text": "is UTC +2 for instance or UTC -6 unfortunately that's not the answer",
    "start": "374830",
    "end": "381190"
  },
  {
    "text": "because we do have a thing called daylight saving time and in daylight saving time we basically change our",
    "start": "381190",
    "end": "388599"
  },
  {
    "text": "clocks we move them like forward by one hour on move them back by one hour this is what we typically do and we may think",
    "start": "388599",
    "end": "395620"
  },
  {
    "text": "that DST daylight saving time is simple because hey it happens every single year and we generally no more or less know",
    "start": "395620",
    "end": "402460"
  },
  {
    "text": "when it's happening the problem with DST is around the globe it happens on different time like most",
    "start": "402460",
    "end": "409539"
  },
  {
    "text": "of the European countries they change their time like end of and they move forward one hour starting",
    "start": "409539",
    "end": "415360"
  },
  {
    "text": "at 2:00 a.m. so they moved to 3:00 a.m. and they are good but it's not always the case for instance United States they",
    "start": "415360",
    "end": "421750"
  },
  {
    "text": "change the time for DST like a week earlier or week later than the Europe does also some countries they introduce",
    "start": "421750",
    "end": "428950"
  },
  {
    "text": "DST at midnight or five minutes after the midnight not to mention that the",
    "start": "428950",
    "end": "434530"
  },
  {
    "text": "countries they change their regulations for instance European Union now passed a law that each country can basically",
    "start": "434530",
    "end": "440980"
  },
  {
    "text": "decide hey are you staying on DST or not and if you are not staying on DST you",
    "start": "440980",
    "end": "446350"
  },
  {
    "text": "can choose whether it's winter time or summer time so these things they do change they are not carved in stone and",
    "start": "446350",
    "end": "452470"
  },
  {
    "text": "unfortunately it's very hard to reason about the time like when we are considering things which are happening",
    "start": "452470",
    "end": "459190"
  },
  {
    "text": "in the future or in the past because if we are imagine a very simple ticketing",
    "start": "459190",
    "end": "464770"
  },
  {
    "text": "system for instance you would like to book a flight which will depart at 8:00",
    "start": "464770",
    "end": "470020"
  },
  {
    "text": "a.m. how far from now how do you show it in your calendar for the user because if",
    "start": "470020",
    "end": "476890"
  },
  {
    "text": "you show it at 8:00 a.m. then how far you're from now probably the user will be in different time zone will be in DST",
    "start": "476890",
    "end": "483370"
  },
  {
    "text": "or summer time or whatever else so then it may be showing at 9:00 a.m. instead",
    "start": "483370",
    "end": "488710"
  },
  {
    "text": "of 8:00 a.m. and this is pretty serious bug however if you show it currently at 7:00 a.m. or 9 a.m. depending on which",
    "start": "488710",
    "end": "495220"
  },
  {
    "text": "side of DST we are going on then the user may come in and tell you hey this thing is showing me incorrect time",
    "start": "495220",
    "end": "501610"
  },
  {
    "text": "because I booked the flight at 8:00 a.m. departing at 8:00 a.m. so generally these things are not simple when we",
    "start": "501610",
    "end": "507280"
  },
  {
    "text": "consider them globally across the globe and also timezone or like the whole",
    "start": "507280",
    "end": "513400"
  },
  {
    "text": "number of hours when we typically think about timezone this is not obviously the same around the globe there are",
    "start": "513400",
    "end": "519219"
  },
  {
    "text": "countries even now which differ by like 30 minutes or 45 minutes but if you take",
    "start": "519219",
    "end": "524229"
  },
  {
    "text": "a look at some historical data it's getting even more interesting I'm from Poland so if we take a look at Europe",
    "start": "524229",
    "end": "530530"
  },
  {
    "text": "were so time and get some very old date like end of 1899 and we check hey what",
    "start": "530530",
    "end": "537339"
  },
  {
    "text": "was the local time at 7:20 if we start converting this to Europe were so time",
    "start": "537339",
    "end": "542890"
  },
  {
    "text": "getting this very old date we actually end up with something which is basically 7:44 why is that because at that time",
    "start": "542890",
    "end": "550580"
  },
  {
    "text": "were so was using time zone plus one hour and 24 minutes and these things",
    "start": "550580",
    "end": "556730"
  },
  {
    "text": "they unfortunately changed a lot so then we were introducing winter time and summertime between 1957 1964 then we",
    "start": "556730",
    "end": "564440"
  },
  {
    "text": "dropped summer time then we restore to summer time now European Union passed this law so we may drop the summer time",
    "start": "564440",
    "end": "570740"
  },
  {
    "text": "again this week's change not to mention that right now we move to summer time like end of March but we",
    "start": "570740",
    "end": "576350"
  },
  {
    "text": "also did it like in June 12 30 or 40 years ago so these things are getting",
    "start": "576350",
    "end": "581779"
  },
  {
    "text": "very very tricky when we start considering just a very simple term like time also when we consider what is the",
    "start": "581779",
    "end": "590149"
  },
  {
    "text": "time zone of various countries around the globe it's not always the case that the bigger country the more time zones",
    "start": "590149",
    "end": "596000"
  },
  {
    "text": "because for instance US has multiple time zones but if we take a look at China China runs only in one time zone",
    "start": "596000",
    "end": "602329"
  },
  {
    "text": "it's also getting even different for instance in Russia there are multiple time zones but once you step through the",
    "start": "602329",
    "end": "608810"
  },
  {
    "text": "door to your train station you change the time zone because all trains they run using one time zone only across the",
    "start": "608810",
    "end": "615079"
  },
  {
    "text": "whole Russia so these things are pretty tricky and they change significantly so any like relying on time zones around",
    "start": "615079",
    "end": "622220"
  },
  {
    "text": "the globe may be super hard for you the things with DST just to wrap up this topic they are even interesting because",
    "start": "622220",
    "end": "629390"
  },
  {
    "text": "for instance take United States United States they do have summer time and winter time unless you are in Arizona",
    "start": "629390",
    "end": "636260"
  },
  {
    "text": "which is like here's south west of us Arizona doesn't follow summer time",
    "start": "636260",
    "end": "641540"
  },
  {
    "text": "unless you are another tribe in Arizona they do follow summer time so it's not",
    "start": "641540",
    "end": "647180"
  },
  {
    "text": "only sufficient to tell you hey where you live it's all you also need to say hey who you are so generally time zone",
    "start": "647180",
    "end": "653930"
  },
  {
    "text": "is a region of the globe which is observing the same time so it's super hard for computers to follow correctly",
    "start": "653930",
    "end": "661540"
  },
  {
    "text": "also there are two terms UTC and GMT we tend to use them like interchangeably",
    "start": "661540",
    "end": "667279"
  },
  {
    "text": "UTC and GMT that's the same unfortunately they are completely different UTC is based on atomic clock",
    "start": "667279",
    "end": "674390"
  },
  {
    "text": "and it's supposed to approximate the GMT time this approximation",
    "start": "674390",
    "end": "679700"
  },
  {
    "text": "is allowed to differ by up to 0.9 of a second so 900 milliseconds that's why",
    "start": "679700",
    "end": "686660"
  },
  {
    "text": "the UTC needs to introduce a thing called leap second so it's like one second which is sometimes added can be",
    "start": "686660",
    "end": "693680"
  },
  {
    "text": "also removed but this never happened but is allowed by the standard to adjust the UTC to the GMT GMT is tied to the",
    "start": "693680",
    "end": "701510"
  },
  {
    "text": "rotation of the earth divide your froat eights and goes around the Sun so that's why because you probably know that like",
    "start": "701510",
    "end": "707750"
  },
  {
    "text": "one year is not exactly 365 days it's also like this six hours and something",
    "start": "707750",
    "end": "714110"
  },
  {
    "text": "else so these things go out of sync pretty often and when it comes to leap second assuming you still would like to",
    "start": "714110",
    "end": "721670"
  },
  {
    "text": "rely on a time the leap second which seems seemingly easy so like it's one",
    "start": "721670",
    "end": "726860"
  },
  {
    "text": "second introduced to your clock can for instance take down half of the world and",
    "start": "726860",
    "end": "732170"
  },
  {
    "text": "this actually happens something like eight years ago there was a bug in Linux kernel so the task scheduler was going",
    "start": "732170",
    "end": "739460"
  },
  {
    "text": "completely crazy and you had a very big CPU spikes for like few minutes just",
    "start": "739460",
    "end": "744680"
  },
  {
    "text": "because this one second was introduced and my sequel was going completely down you had to reboot your machine or reboot",
    "start": "744680",
    "end": "750920"
  },
  {
    "text": "the service to get it working so generally this is this already happened and we may safely assume it will happen",
    "start": "750920",
    "end": "757040"
  },
  {
    "text": "again however this time we should be a little more prepared because instead of introducing this one second what we do",
    "start": "757040",
    "end": "763310"
  },
  {
    "text": "now is called time smearing time smearing is we take this one second and we basically make all the seconds of a",
    "start": "763310",
    "end": "770300"
  },
  {
    "text": "minute slightly longer so it's not that we have 61 seconds in a minute when we introduce leap second we have 60 seconds",
    "start": "770300",
    "end": "777470"
  },
  {
    "text": "but each second is lasting slightly longer than 1,000 milliseconds but things get even like harder assuming",
    "start": "777470",
    "end": "785450"
  },
  {
    "text": "that we would like to synchronize these clocks somehow so I told you that time",
    "start": "785450",
    "end": "790550"
  },
  {
    "text": "zone changes and for instance each country can decide hey we are dropping time zone we are dropping DST we are",
    "start": "790550",
    "end": "797720"
  },
  {
    "text": "moving to different time zone so how do our computers know what is going on and this thing is called TZ or time zone",
    "start": "797720",
    "end": "805910"
  },
  {
    "text": "database it's distributed by a organization called Ayana internet",
    "start": "805910",
    "end": "811280"
  },
  {
    "text": "assigned numbers Authority just publishing multiple times a year a database cheesy info which tells you",
    "start": "811280",
    "end": "817490"
  },
  {
    "text": "exactly hey this place has this time zone so this is the DST etc etc obviously there is some now it's RFC and",
    "start": "817490",
    "end": "824810"
  },
  {
    "text": "there is some nice updating this package through you're probably able to get or whatever else raise your hand if you",
    "start": "824810",
    "end": "830720"
  },
  {
    "text": "were aware of this package okay I can see few hands that's great for all of",
    "start": "830720",
    "end": "836510"
  },
  {
    "text": "you who you were not aware that this package exists well things are getting even more interesting because obviously",
    "start": "836510",
    "end": "842480"
  },
  {
    "text": "it couldn't be that there is one package there is a thing called cldr which is in Microsoft Word and an apple world which",
    "start": "842480",
    "end": "848660"
  },
  {
    "text": "is also emitted periodically periodically and also tells you not only the time zone but also the locales so",
    "start": "848660",
    "end": "855140"
  },
  {
    "text": "for instance if you have seen and us or NGB languages this is basically stored",
    "start": "855140",
    "end": "860360"
  },
  {
    "text": "in this database as well the problem with cldr and TC info is that they are out of sync they are not synchronized",
    "start": "860360",
    "end": "866840"
  },
  {
    "text": "they use completely different names so generally if you do have Windows machine and Linux machine like good luck with",
    "start": "866840",
    "end": "873590"
  },
  {
    "text": "synchronizing the clocks however the thing is okay there is a TC database",
    "start": "873590",
    "end": "879710"
  },
  {
    "text": "which is distributed and we do have time which we can store in local time or UTC",
    "start": "879710",
    "end": "885380"
  },
  {
    "text": "time and now when we ask a question hey star my time in local or UTC you go to stack overflow Stack Overflow tells you",
    "start": "885380",
    "end": "891980"
  },
  {
    "text": "go with UTC there will be no problem ever ok so let's see how it works and",
    "start": "891980",
    "end": "897590"
  },
  {
    "text": "UTC is not a silver bullet because things they do change European Union",
    "start": "897590",
    "end": "902720"
  },
  {
    "text": "passed this law so let's see what may happen in your applications like soon in two years so we would like to organize",
    "start": "902720",
    "end": "908300"
  },
  {
    "text": "some event on September in 22 at a 9 a.m. in Amsterdam currently the time",
    "start": "908300",
    "end": "914930"
  },
  {
    "text": "zone or the time offset from UTC for Amsterdam on September 4 2022 is",
    "start": "914930",
    "end": "921110"
  },
  {
    "text": "expected to be plus 2 hours so what we can do we can take the time store it as",
    "start": "921110",
    "end": "926300"
  },
  {
    "text": "UTC and Stack Overflow said hey it's going to work so let's see so we take the time it's 9:00 a.m. we subtract two",
    "start": "926300",
    "end": "933500"
  },
  {
    "text": "hours to get the UTC time so we have 7 a.m. that's what we store in our database forever but then Amsterdam or",
    "start": "933500",
    "end": "941420"
  },
  {
    "text": "the Netherlands they decide hey we are not going to use the est anymore we'll just stick to some Atul wintertime",
    "start": "941420",
    "end": "947230"
  },
  {
    "text": "so after some time which we don't know yet when they are going to pass regulations and make the decision",
    "start": "947230",
    "end": "953410"
  },
  {
    "text": "whether it's wintertime or summertime or whatever else like they do make this difference and then they are expected to",
    "start": "953410",
    "end": "960760"
  },
  {
    "text": "be plus one on that September 4th 2022 so on September 4th we go to database we",
    "start": "960760",
    "end": "967000"
  },
  {
    "text": "get the UTC time which is 7:00 a.m. we check the timezone try this plus one we move one hour forward and we end up with",
    "start": "967000",
    "end": "974230"
  },
  {
    "text": "8:00 a.m. so this thing is now broken if you ever store your time stamps for",
    "start": "974230",
    "end": "980620"
  },
  {
    "text": "events in database and never ever update them raise your hand yep so you may go",
    "start": "980620",
    "end": "989050"
  },
  {
    "text": "then check out what's going to happen in European Union eight years okay so that's not the solution of you see with",
    "start": "989050",
    "end": "994090"
  },
  {
    "text": "UTC can we do better obviously we could do better we can store as UTC but we",
    "start": "994090",
    "end": "1000720"
  },
  {
    "text": "need to update the time so there is this TZ info database or cidr which is distributed periodically whenever we get",
    "start": "1000720",
    "end": "1007860"
  },
  {
    "text": "a new version of TZ info we get the UTC time we calculate block out time using",
    "start": "1007860",
    "end": "1012870"
  },
  {
    "text": "old TZ version then we calculate UTC time using new TZ version and we update",
    "start": "1012870",
    "end": "1018780"
  },
  {
    "text": "the value in database plus well this solution works unfortunately this is",
    "start": "1018780",
    "end": "1024180"
  },
  {
    "text": "pretty hard because we need to store not only the current is info but also the old one and not only we need to store",
    "start": "1024180",
    "end": "1030270"
  },
  {
    "text": "the UTC time but also the version of the scene for which we used to store the time so these things are getting",
    "start": "1030270",
    "end": "1036209"
  },
  {
    "text": "slightly harder the other solution which we could use is basically store this as",
    "start": "1036209",
    "end": "1042839"
  },
  {
    "text": "a local time but not necessarily as like date time or timestamp or whatever type",
    "start": "1042839",
    "end": "1047880"
  },
  {
    "text": "you are using in your language but as something strictly saying hey event is at 9:00 a.m. like a string or whatever",
    "start": "1047880",
    "end": "1055410"
  },
  {
    "text": "else you can imagine you do keep this and then you don't care whether TZ info was updated in the meantime or not you",
    "start": "1055410",
    "end": "1062220"
  },
  {
    "text": "just grab this thing and you recalculate this accordingly whenever user asks you for the answer hey when this thing is",
    "start": "1062220",
    "end": "1068970"
  },
  {
    "text": "going to happen and this is actually the source of true for the event because the organizer of the event came to your",
    "start": "1068970",
    "end": "1075330"
  },
  {
    "text": "system and said hey I'd like it to be at I am NOT at UTC or UTC +2 or whatever it",
    "start": "1075330",
    "end": "1082240"
  },
  {
    "text": "is the info version that's the source of the truth so I'm not saying this solution is better or worse than the",
    "start": "1082240",
    "end": "1087610"
  },
  {
    "text": "previous ones all I'm saying is there are multiple approaches and using UTC is not necessarily the best IDR is not",
    "start": "1087610",
    "end": "1094570"
  },
  {
    "text": "necessarily going to solve all your problems and also just to wrap up there a topic of time if you you can read some",
    "start": "1094570",
    "end": "1102519"
  },
  {
    "text": "sentences on this slide for instance that minute has 16 60 seconds etc and the thing about these sentences is all",
    "start": "1102519",
    "end": "1109330"
  },
  {
    "text": "of them are wrong none of this slide is actually true so let's go through some",
    "start": "1109330",
    "end": "1114850"
  },
  {
    "text": "of the like gotchas with time so a month begins and ends in the same year",
    "start": "1114850",
    "end": "1120399"
  },
  {
    "text": "unfortunately this only started to happen like depending on the place you were living in like in different",
    "start": "1120399",
    "end": "1126639"
  },
  {
    "text": "centuries for instance France started observing new year on January 1st in fact in 1564 but Poland or Russia",
    "start": "1126639",
    "end": "1135669"
  },
  {
    "text": "they made this decision in different time so generally your month can start and end in different years if you are",
    "start": "1135669",
    "end": "1142840"
  },
  {
    "text": "working with historical data February has 28 days we obviously know this is not true like once every four year",
    "start": "1142840",
    "end": "1149230"
  },
  {
    "text": "unless once every 100 year but once every 400 year we get February 29th and",
    "start": "1149230",
    "end": "1155409"
  },
  {
    "text": "also Sweden when they were adopting Gregorian calendar they thought hey like",
    "start": "1155409",
    "end": "1160600"
  },
  {
    "text": "all the countries they basically skipped 11 days because that's how many days they had to you adjust to the Gregorian",
    "start": "1160600",
    "end": "1166899"
  },
  {
    "text": "time but Sweden was clever let's not skip 11 days let's just introduce this",
    "start": "1166899",
    "end": "1172600"
  },
  {
    "text": "they are introducing February 29th every 4:1 blah blah blah days we'll just skip",
    "start": "1172600",
    "end": "1177669"
  },
  {
    "text": "that yeah that was a good idea only the work came in and they forgot to do the Sphinx so they went out of sync and one",
    "start": "1177669",
    "end": "1183880"
  },
  {
    "text": "year they decided hey let's introduce February 40 and let's get rid of this problem once and for all not to mention",
    "start": "1183880",
    "end": "1189340"
  },
  {
    "text": "that there are other calendars like symmetry 454 which has 35 days in February hopefully we are not working",
    "start": "1189340",
    "end": "1195850"
  },
  {
    "text": "with these things I mean at last 60 seconds or something like this but",
    "start": "1195850",
    "end": "1200919"
  },
  {
    "text": "definitely not hours or days unless you are working on a virtual machine supervised by a VM on CentOS and",
    "start": "1200919",
    "end": "1209170"
  },
  {
    "text": "have version which had this back so when you were putting your machine to sleep and then resuming it this clock went out",
    "start": "1209170",
    "end": "1215860"
  },
  {
    "text": "of sync so your minute could effectively last hours so generally those are issues",
    "start": "1215860",
    "end": "1221500"
  },
  {
    "text": "we do have when we are working with time so assuming that you would like to use",
    "start": "1221500",
    "end": "1226570"
  },
  {
    "text": "the clocks in computer science well you need to face at least some of them but let's say that we are working this year",
    "start": "1226570",
    "end": "1232390"
  },
  {
    "text": "not something like sixteenth century and not in Sweden let's say that we want to use this clock like only in few data",
    "start": "1232390",
    "end": "1239590"
  },
  {
    "text": "centers but in one timezone how can we do that so we need to synchronize clocks and while it may sound to you that right",
    "start": "1239590",
    "end": "1246340"
  },
  {
    "text": "there should be super brilliant clever algorithm from doing that there is one and it's basically hey what's the time",
    "start": "1246340",
    "end": "1252460"
  },
  {
    "text": "oh it's this time and you ask this question multiple times one after the other and then you try approximating",
    "start": "1252460",
    "end": "1258850"
  },
  {
    "text": "what the real time is the problem is you ask this question over the network so you may you may imagine there is some",
    "start": "1258850",
    "end": "1264940"
  },
  {
    "text": "latency unfortunately this latency is not stable you may get different lags different delays when you ask this",
    "start": "1264940",
    "end": "1271270"
  },
  {
    "text": "question and you don't know how long the processing that time on your CPU takes so generally we just ask this question",
    "start": "1271270",
    "end": "1278440"
  },
  {
    "text": "you get some answer and you cannot assume anything about this answer but if you ask this question multiple times you",
    "start": "1278440",
    "end": "1285520"
  },
  {
    "text": "may feel like yeah we're pretty sure what the time is we should be in sync right now obviously this in sync means",
    "start": "1285520",
    "end": "1292390"
  },
  {
    "text": "here's something like down to or up to microseconds best probably more like",
    "start": "1292390",
    "end": "1297520"
  },
  {
    "text": "that up to milliseconds but generally we should be in sync and there is a",
    "start": "1297520",
    "end": "1302560"
  },
  {
    "text": "protocol for that it's called NTP Network Time Protocol it's based on the idea of stratas so we just group the",
    "start": "1302560",
    "end": "1309280"
  },
  {
    "text": "machines in the layers each layer we call stratum so the machines which have",
    "start": "1309280",
    "end": "1315130"
  },
  {
    "text": "access to the atomic clock there is in so called stratum 0 they should have like perfect clock obviously perfect to",
    "start": "1315130",
    "end": "1322360"
  },
  {
    "text": "some physical relativity etc and then they just broadcast this time to the machines connected to them directly to",
    "start": "1322360",
    "end": "1328540"
  },
  {
    "text": "the stratum 1 and then this follows two different Stratos and obviously there is some slightly more sophisticated",
    "start": "1328540",
    "end": "1335050"
  },
  {
    "text": "algorithm for NTP which is still based on the same idea we just ask the question hey what's the time but we try",
    "start": "1335050",
    "end": "1341470"
  },
  {
    "text": "to approximate the Layton see the network delay the processing time all these things but this is how we basically synchronize time so there are",
    "start": "1341470",
    "end": "1349440"
  },
  {
    "text": "also other approaches like different algorithms which try to be slightly more clever one very worth mentioning is",
    "start": "1349440",
    "end": "1357270"
  },
  {
    "text": "called true time which is algorithm used by Google in their spanner database which basically guarentees you that you",
    "start": "1357270",
    "end": "1364200"
  },
  {
    "text": "are synchronized down to seven milliseconds so you can actually order events based on this time but the idea",
    "start": "1364200",
    "end": "1371370"
  },
  {
    "text": "behind this database is because I don't know whether I am seven milliseconds ahead or behind I just need to wait",
    "start": "1371370",
    "end": "1377429"
  },
  {
    "text": "these seven milliseconds and figure out whether new message comes in if it does not then I can assume my timestamp was",
    "start": "1377429",
    "end": "1383760"
  },
  {
    "text": "correct with these things etc etc but anyway all these algorithms are based on this flawed approach of like clocks",
    "start": "1383760",
    "end": "1390780"
  },
  {
    "text": "being not perfect so ordering events in distributed systems based on timestamps",
    "start": "1390780",
    "end": "1396030"
  },
  {
    "text": "is not necessarily going to work so let's see what we can use instead how to",
    "start": "1396030",
    "end": "1401100"
  },
  {
    "text": "avoid using clocks in computer science to order their locks so once again user",
    "start": "1401100",
    "end": "1407309"
  },
  {
    "text": "comes to our system we would like to log some information from multiple machines from multiple nodes so then we can later",
    "start": "1407309",
    "end": "1414390"
  },
  {
    "text": "capture all these logs log entries and order them so we know in which order",
    "start": "1414390",
    "end": "1419880"
  },
  {
    "text": "they were actually happening so what we would like to do is we would like to",
    "start": "1419880",
    "end": "1424920"
  },
  {
    "text": "have like some working notion so that when we have two events and B we can say",
    "start": "1424920",
    "end": "1432059"
  },
  {
    "text": "that a happened before B and we would like to have this quarantine that a",
    "start": "1432059",
    "end": "1437550"
  },
  {
    "text": "happened before B not some approximation we would like to do it over multiple machines over internet so one machine is",
    "start": "1437550",
    "end": "1444570"
  },
  {
    "text": "London the other one is in Seattle and in Tokyo we want it to be fast generally",
    "start": "1444570",
    "end": "1449760"
  },
  {
    "text": "fast so we don't want to wait like seconds or whatever else we would like to for it to work as fast as possible",
    "start": "1449760",
    "end": "1456240"
  },
  {
    "text": "and we are also interested in events of only one workflow meaning that user a",
    "start": "1456240",
    "end": "1462780"
  },
  {
    "text": "comes to our system and we want to figure out what the events for user a",
    "start": "1462780",
    "end": "1467820"
  },
  {
    "text": "were only so if user B comes to our system at approximately the same time we",
    "start": "1467820",
    "end": "1473880"
  },
  {
    "text": "don't want to compare this even's weather user B was earlier or later than user a",
    "start": "1473880",
    "end": "1478890"
  },
  {
    "text": "that's behind beyond the scope what we would like to do is only order events for user a so what we are going to",
    "start": "1478890",
    "end": "1486300"
  },
  {
    "text": "implement is a Fink code lampert time stamp or a Lamport happened before",
    "start": "1486300",
    "end": "1491790"
  },
  {
    "text": "relation so we say that even a influenced even B and we denote this",
    "start": "1491790",
    "end": "1498030"
  },
  {
    "text": "with this arrow notation and what we do is we'll be able to order events as long",
    "start": "1498030",
    "end": "1503970"
  },
  {
    "text": "as one influenced the other so this notation or actually this theory allows",
    "start": "1503970",
    "end": "1510120"
  },
  {
    "text": "us how to calculate these things and the idea is super simple if we are running on one machine then we are executing",
    "start": "1510120",
    "end": "1516810"
  },
  {
    "text": "like our source code line by line if we drop out the memory optimization and and",
    "start": "1516810",
    "end": "1523050"
  },
  {
    "text": "these things happening like city ordering but we can assume that lines are executed one by one so previous line",
    "start": "1523050",
    "end": "1530210"
  },
  {
    "text": "influences the next line that's the first thing we assume but when two machines they work together we say that",
    "start": "1530210",
    "end": "1538350"
  },
  {
    "text": "even a influence even be when there was a communication between machines so if machine a called machine B we can",
    "start": "1538350",
    "end": "1545910"
  },
  {
    "text": "safely say that whatever happened after machine B received the request was after",
    "start": "1545910",
    "end": "1552270"
  },
  {
    "text": "then after sending the communication from machine a so this is pretty intuitive when we are going on one",
    "start": "1552270",
    "end": "1558960"
  },
  {
    "text": "machine we just go in order when we are going in multiple machines then we cannot tell anything as until we just",
    "start": "1558960",
    "end": "1565350"
  },
  {
    "text": "communicate between these machines and this is the algorithm like the specification of it but instead of going",
    "start": "1565350",
    "end": "1572100"
  },
  {
    "text": "through the textual representation let's see some example graphical one so what we are going to do is we will have",
    "start": "1572100",
    "end": "1579450"
  },
  {
    "text": "three machines here so we will have machine one two and three and all these machines they maintain separate",
    "start": "1579450",
    "end": "1586260"
  },
  {
    "text": "independent clocks clocks here we think of like an integer value not necessarily",
    "start": "1586260",
    "end": "1592800"
  },
  {
    "text": "the time stamp so we can see that my first machine is basically running with let's say six seconds resolution so the",
    "start": "1592800",
    "end": "1599550"
  },
  {
    "text": "clock increases by six seconds yes second machine increases by eight seconds last machine increases by ten",
    "start": "1599550",
    "end": "1605700"
  },
  {
    "text": "seconds if we blindly follow timestamps not the Lamport relation sheep everything works fine for",
    "start": "1605700",
    "end": "1612010"
  },
  {
    "text": "communication for the message a because it was sent here at time 6 and received",
    "start": "1612010",
    "end": "1617289"
  },
  {
    "text": "that time 16 yeah this works well this message also sent up 24 received at 40",
    "start": "1617289",
    "end": "1622630"
  },
  {
    "text": "problems start out to appear when we go from last machine which sent a message",
    "start": "1622630",
    "end": "1628210"
  },
  {
    "text": "at time 60 to the second machine which received the message at time 56 so",
    "start": "1628210",
    "end": "1634120"
  },
  {
    "text": "obviously now we travel back in time and this is not something which should work anymore the same goes here 64 we receive it in",
    "start": "1634120",
    "end": "1640809"
  },
  {
    "text": "54 so what happens if we introduce the Lamport time stamps so we keep the same",
    "start": "1640809",
    "end": "1646270"
  },
  {
    "text": "clocks again only this time these two messages are still correct because nothing broke nothing broke here but",
    "start": "1646270",
    "end": "1653740"
  },
  {
    "text": "when we introduce when we get these messages which potentially may introduce problems what we do is we get the values",
    "start": "1653740",
    "end": "1662289"
  },
  {
    "text": "of clocks from two machines so here we would get value which was previously 16",
    "start": "1662289",
    "end": "1667690"
  },
  {
    "text": "sorry 56 and here we get values sent time which is 16 and these two machines",
    "start": "1667690",
    "end": "1673720"
  },
  {
    "text": "when they communicate they send their clocks so machine free sends its clock",
    "start": "1673720",
    "end": "1679390"
  },
  {
    "text": "to second machine now second machine gets its own clock which is showing 56",
    "start": "1679390",
    "end": "1685450"
  },
  {
    "text": "takes the clock of the third machine which is showing 16 then it calculates the maximum of two values and",
    "start": "1685450",
    "end": "1691990"
  },
  {
    "text": "incremented by one so does the algorithm so now machine first and sixty and",
    "start": "1691990",
    "end": "1697240"
  },
  {
    "text": "second machine is now updating its own clock and getting the maximum of value incrementing it so we can see that the",
    "start": "1697240",
    "end": "1703690"
  },
  {
    "text": "next time stamp on this machine because this machine was going like in with the 8 milli",
    "start": "1703690",
    "end": "1708850"
  },
  {
    "text": "8 seconds resolution is also 8 seconds apart from 61 to 69 the same thing is",
    "start": "1708850",
    "end": "1715330"
  },
  {
    "text": "actually happening here yes so we are sending at 69 receiving at previously it",
    "start": "1715330",
    "end": "1720730"
  },
  {
    "text": "was 54 now we get maximum of these two value we incremented we have value 70",
    "start": "1720730",
    "end": "1726549"
  },
  {
    "text": "here okay that's the idea of Lamport time stamps and now what happens with",
    "start": "1726549",
    "end": "1732460"
  },
  {
    "text": "this influential with this that even a influenced even be so when it comes to",
    "start": "1732460",
    "end": "1738340"
  },
  {
    "text": "one machine we can say that each event influences the next one so we can clearly",
    "start": "1738340",
    "end": "1743470"
  },
  {
    "text": "we are executing in order they influence each other but when it comes to these events for instance even 12 and 18 we",
    "start": "1743470",
    "end": "1751150"
  },
  {
    "text": "cannot tell anything about this event for even 0 & 8 as long as we don't",
    "start": "1751150",
    "end": "1756549"
  },
  {
    "text": "communicate but once we do communicate once we do have this communication here",
    "start": "1756549",
    "end": "1761740"
  },
  {
    "text": "we can say that all these events influenced all these events here because",
    "start": "1761740",
    "end": "1767289"
  },
  {
    "text": "there was a communication so we know they get in sync at some point and we can compare these events pretty simple",
    "start": "1767289",
    "end": "1774070"
  },
  {
    "text": "idea but once we introduced it what we get is a very strong statement then once",
    "start": "1774070",
    "end": "1780159"
  },
  {
    "text": "we know that even a happened before B and influenced B so a influenced B we",
    "start": "1780159",
    "end": "1786520"
  },
  {
    "text": "know that clock a is less than clogged B so when we know there was some",
    "start": "1786520",
    "end": "1792429"
  },
  {
    "text": "communication between machines then we can just compare their clocks and figure out which events were like happened",
    "start": "1792429",
    "end": "1799330"
  },
  {
    "text": "before also unfortunately we cannot tell that about all the events so if we go",
    "start": "1799330",
    "end": "1806409"
  },
  {
    "text": "back to the example here we cannot for instance tell weather events 36 on",
    "start": "1806409",
    "end": "1811480"
  },
  {
    "text": "machine first happened before event 48 even 40 here that we don't know because",
    "start": "1811480",
    "end": "1818620"
  },
  {
    "text": "there was there were some other events between communication which happened only here so we don't know that these",
    "start": "1818620",
    "end": "1824740"
  },
  {
    "text": "events influenced each other we probably even see that they did not so we cannot tell which of them actually happened",
    "start": "1824740",
    "end": "1831070"
  },
  {
    "text": "earlier so that we cannot tell but once we they do communicate we can just compare the clocks so how do you",
    "start": "1831070",
    "end": "1837850"
  },
  {
    "text": "implement this in like distributed system in real-life implementation so we'll go through some very simple dotnet",
    "start": "1837850",
    "end": "1844900"
  },
  {
    "text": "implementation but the idea should be generally you can transfer it to any language or framework of your choice",
    "start": "1844900",
    "end": "1850900"
  },
  {
    "text": "once you just understand how it's supposed to work so what we are going to do is we need to carry on two pieces of",
    "start": "1850900",
    "end": "1857679"
  },
  {
    "text": "information first piece is the correlation ID so user comes to our system we need to generate some unique",
    "start": "1857679",
    "end": "1864610"
  },
  {
    "text": "identifier showing hey this is the workflow of the user this is the transaction we start so it's generated",
    "start": "1864610",
    "end": "1870340"
  },
  {
    "text": "only once it's unique and it's also propagated across the system then logical time is maintained",
    "start": "1870340",
    "end": "1877149"
  },
  {
    "text": "just as we've seen on the previous slide so each node is having its own time and when we do communicate we need to pass",
    "start": "1877149",
    "end": "1883960"
  },
  {
    "text": "the time and we need to update the time and carry it on so what we start with is we introduce some interface code I",
    "start": "1883960",
    "end": "1890769"
  },
  {
    "text": "correlator which basically gives us the access to these two those two pieces of information yes to correlation ID and to",
    "start": "1890769",
    "end": "1897549"
  },
  {
    "text": "logical time to this lamp or timestamp it also has a method to update logical",
    "start": "1897549",
    "end": "1902589"
  },
  {
    "text": "time which we use when we do communicate and we can also introduce something like human readable activity telling us what",
    "start": "1902589",
    "end": "1908919"
  },
  {
    "text": "is actually happening this will be helpful for our log information so we start with this correlator",
    "start": "1908919",
    "end": "1914409"
  },
  {
    "text": "and what we are doing here is we basically need to implement this lamp or timestamp right now so whenever we do",
    "start": "1914409",
    "end": "1921519"
  },
  {
    "text": "get the logical time we just increment it by 1 because hey some event",
    "start": "1921519",
    "end": "1927549"
  },
  {
    "text": "influenced other event so we just increment it this is when we are just getting to the time within one machine",
    "start": "1927549",
    "end": "1933279"
  },
  {
    "text": "ok and we use interlocked increment just to avoid unnecessarily locking some like",
    "start": "1933279",
    "end": "1938409"
  },
  {
    "text": "monitors or these things but when we do communicate what we are trying to do right now is we get this new time from",
    "start": "1938409",
    "end": "1945549"
  },
  {
    "text": "some other system and what we do is we just calculate the final time which is",
    "start": "1945549",
    "end": "1950559"
  },
  {
    "text": "now the maximum of these two times and again we do the interlocked compare exchange just to store the new value of",
    "start": "1950559",
    "end": "1957669"
  },
  {
    "text": "the time yes so this is how we store these things and this is the basic implementation you can see that this",
    "start": "1957669",
    "end": "1963190"
  },
  {
    "text": "class is still abstract because we will now be we need to fill in the second piece of information which is",
    "start": "1963190",
    "end": "1968799"
  },
  {
    "text": "correlation ID but this implementation we want to use across all the nodes all the machines in our distributed system",
    "start": "1968799",
    "end": "1975279"
  },
  {
    "text": "so what do we do next is we would like to have some logging infrastructure so we do have a logger interface with",
    "start": "1975279",
    "end": "1982119"
  },
  {
    "text": "logging level etc and message you do have some correlator here and you just implement it in some in some way so",
    "start": "1982119",
    "end": "1990039"
  },
  {
    "text": "whenever you do log your message you basically have the following segments and I'm not saying these segments are",
    "start": "1990039",
    "end": "1995559"
  },
  {
    "text": "sufficient or decent for this pieces of information are all you need to to debug your application but they generally are",
    "start": "1995559",
    "end": "2002009"
  },
  {
    "text": "a good start so we do have some human readable timestamp like hey it was 2 p.m. London time application name so you",
    "start": "2002009",
    "end": "2008999"
  },
  {
    "text": "know where this is coming from you have some instanceid of your machine thread either managed thread or Windows",
    "start": "2008999",
    "end": "2016290"
  },
  {
    "text": "Fred ID whatever else correlation ID obviously because we need to know for",
    "start": "2016290",
    "end": "2021300"
  },
  {
    "text": "which workflow this message was logged level 4 in 4 or whatever activity so",
    "start": "2021300",
    "end": "2026400"
  },
  {
    "text": "it's easier to read and teleological time so the lamp or time stop logger ID if you have multiple loggers in your",
    "start": "2026400",
    "end": "2032970"
  },
  {
    "text": "framers can also be useful and obviously at the very end we does need to law so log the message for the system yeah so",
    "start": "2032970",
    "end": "2039270"
  },
  {
    "text": "we do have again some abstract class giving us this ass this very nice log",
    "start": "2039270",
    "end": "2044790"
  },
  {
    "text": "method which does the trick and from now on we just need to fill in all the missing parts so we imagine that we",
    "start": "2044790",
    "end": "2051750"
  },
  {
    "text": "consider this simple example so user comes to our distributed system what we",
    "start": "2051750",
    "end": "2057419"
  },
  {
    "text": "need to do initially is we need to generate this correlation ID and initialize a logical time on the machine",
    "start": "2057419",
    "end": "2064080"
  },
  {
    "text": "we are heating with this can be your load balancer webserver whatever else yes so you just create correlation ideas",
    "start": "2064080",
    "end": "2070230"
  },
  {
    "text": "go in you go it or whatever else whatever you'd like and you just store it in your memory base correlator here",
    "start": "2070230",
    "end": "2077280"
  },
  {
    "text": "so you can see that it inherits from the correlator so now correlate or the base class provides the implementation of",
    "start": "2077280",
    "end": "2082830"
  },
  {
    "text": "this lamp or timestamp here we introduce correlation ID so this is when we start the workflow now because we are in",
    "start": "2082830",
    "end": "2089250"
  },
  {
    "text": "distributed system we need to start communicating with some other nodes databases like file storage whatever",
    "start": "2089250",
    "end": "2095399"
  },
  {
    "text": "else what we need to do right now we need to pass all the information to the",
    "start": "2095400",
    "end": "2100500"
  },
  {
    "text": "node we are communicating with so we can for instance implement like our own rest client and pass these things using color",
    "start": "2100500",
    "end": "2108030"
  },
  {
    "text": "using HTTP headers yes so we ought to know two more headers and correlation ID",
    "start": "2108030",
    "end": "2113190"
  },
  {
    "text": "correlation counter so like logical timestamp and we just extract them and pass them later on ok so this is what we",
    "start": "2113190",
    "end": "2119340"
  },
  {
    "text": "are calling some remote node within our system what we do next is we get HTTP",
    "start": "2119340",
    "end": "2125250"
  },
  {
    "text": "request we just need to parse these things so depending on the framework of your choice you may have some like action",
    "start": "2125250",
    "end": "2131730"
  },
  {
    "text": "filters or action handlers or whatever else like based constructor of your of your activities what all we need to do",
    "start": "2131730",
    "end": "2138810"
  },
  {
    "text": "is we just need to get the request from from HTTP context so to get correlation",
    "start": "2138810",
    "end": "2144450"
  },
  {
    "text": "encounter and also get the correlation ID yeah so we just get the request we parse this data and we initialize our",
    "start": "2144450",
    "end": "2151500"
  },
  {
    "text": "request headers correlator so this thing also inherits from correlator is using",
    "start": "2151500",
    "end": "2156510"
  },
  {
    "text": "exactly the same implementation only the way we initialize these things is slightly different what we do next is we",
    "start": "2156510",
    "end": "2163140"
  },
  {
    "text": "need to reply back to the service which called us so what we need to do is once",
    "start": "2163140",
    "end": "2168839"
  },
  {
    "text": "again we need to pass the new time because we finish the communication so what we do now is we just get the like",
    "start": "2168839",
    "end": "2176880"
  },
  {
    "text": "the same rest client which we had before but now when the action is executed like",
    "start": "2176880",
    "end": "2181890"
  },
  {
    "text": "when we finished getting the oh sorry that was one step ahead let's go back we",
    "start": "2181890",
    "end": "2187799"
  },
  {
    "text": "need to return their headers so we need to once again wire them up in returning the response of our server so this is",
    "start": "2187799",
    "end": "2194130"
  },
  {
    "text": "action filter or an action executed or whatever else you do have in your framework so the same way we previously",
    "start": "2194130",
    "end": "2200549"
  },
  {
    "text": "were parsing headers which were given to us now we are just adding them as a response yes so we add these two headers",
    "start": "2200549",
    "end": "2207210"
  },
  {
    "text": "that read that was correlation ID probably we don't need to return the correlation ID but it's good to have it",
    "start": "2207210",
    "end": "2212730"
  },
  {
    "text": "in case we are like examining the network traffic and also we do have the time and on the other side right now we",
    "start": "2212730",
    "end": "2219119"
  },
  {
    "text": "need to update the headers when the request we send comes back with the answer so we get to the to the rest",
    "start": "2219119",
    "end": "2225990"
  },
  {
    "text": "client again and previously we were adding headers here now we just get the response so we parse the headers and",
    "start": "2225990",
    "end": "2231780"
  },
  {
    "text": "extract this data okay so this is how we need to do it or how one of the possible",
    "start": "2231780",
    "end": "2237599"
  },
  {
    "text": "implementations for these things and there are few more few important remarks when we are implementing it in this way",
    "start": "2237599",
    "end": "2244200"
  },
  {
    "text": "so generally we would like to make our life easier we probably would like to wire this up for some dependency",
    "start": "2244200",
    "end": "2250500"
  },
  {
    "text": "injection etc so it's always injected into all the places we have important",
    "start": "2250500",
    "end": "2255569"
  },
  {
    "text": "thing here is I only covered the HTTP rest communication if you are using some",
    "start": "2255569",
    "end": "2260970"
  },
  {
    "text": "an service bus as MSM queue or whatever queues are there file storage etc you",
    "start": "2260970",
    "end": "2266520"
  },
  {
    "text": "always need to somehow wire up this metadata yes this information so whether you add them as like metadata to the",
    "start": "2266520",
    "end": "2272970"
  },
  {
    "text": "message post pushed onto the service bus or the file name whatever else you just need to propagate",
    "start": "2272970",
    "end": "2278160"
  },
  {
    "text": "somehow now you need to log this something so this ilogger which i",
    "start": "2278160",
    "end": "2283740"
  },
  {
    "text": "present it to you you probably would like to use it with some log4net or n log or whatever library of your choice",
    "start": "2283740",
    "end": "2289440"
  },
  {
    "text": "whether you put it on top of the library or below the libraries like a matter of taste and finally what happens now we",
    "start": "2289440",
    "end": "2296819"
  },
  {
    "text": "started with this question hey user comes to our system something went wrong now the user needs to figure out or asks",
    "start": "2296819",
    "end": "2304260"
  },
  {
    "text": "us hey go and figure out what happened so what we need to do right now is we just show the user okay this is your ID",
    "start": "2304260",
    "end": "2311369"
  },
  {
    "text": "when you reach out to us please give us this string so this is the correlation ID user comes to our support and tells",
    "start": "2311369",
    "end": "2318450"
  },
  {
    "text": "us hey you wanted me to give you this string back we just grab this string we go to our log stash Cabana or AMS",
    "start": "2318450",
    "end": "2324450"
  },
  {
    "text": "whatever else we have and then we just filter out logs based on correlation ID order them based on the alum port",
    "start": "2324450",
    "end": "2331170"
  },
  {
    "text": "timestamp and as long as we do know what's going on in the system because we need to keep in mind that which events",
    "start": "2331170",
    "end": "2337680"
  },
  {
    "text": "influence which others we can just order them and go through them one by one so",
    "start": "2337680",
    "end": "2343140"
  },
  {
    "text": "this is the idea how to sort these things and how to make the logs much clearer okay but that's just the",
    "start": "2343140",
    "end": "2351990"
  },
  {
    "text": "beginning what we were considering until now is there is one user coming to our system and it's he starts a workflow but",
    "start": "2351990",
    "end": "2360390"
  },
  {
    "text": "if there was another user and she was starting another workflow we assumed we don't want to compare these things now",
    "start": "2360390",
    "end": "2367650"
  },
  {
    "text": "the question is can we somehow extend this system to be able to compare all",
    "start": "2367650",
    "end": "2373500"
  },
  {
    "text": "the events in it so we can safely say or easily say that hey this event happened",
    "start": "2373500",
    "end": "2379980"
  },
  {
    "text": "before that event and that event can be any event in our system because as long",
    "start": "2379980",
    "end": "2385440"
  },
  {
    "text": "as we do not want to do this we can go with simple Lamport implementation and it works for like one constraint",
    "start": "2385440",
    "end": "2391380"
  },
  {
    "text": "workflow but once we want to compare everything with everything it's getting harder so we won't solve this problem in",
    "start": "2391380",
    "end": "2399059"
  },
  {
    "text": "its entirety because this is actually a lot of computer science research what I'm going to show you is how these",
    "start": "2399059",
    "end": "2405150"
  },
  {
    "text": "problems are tackled and what components we need to have to solve all of them so",
    "start": "2405150",
    "end": "2410880"
  },
  {
    "text": "first thing we would like to introduce is a concept of vector clocks so previously we had a logical",
    "start": "2410880",
    "end": "2416700"
  },
  {
    "text": "clock each machine had one value its own independent clock right what we are",
    "start": "2416700",
    "end": "2423119"
  },
  {
    "text": "doing right now is each machine is going to have a vector of clocks representing",
    "start": "2423119",
    "end": "2429089"
  },
  {
    "text": "the state of the clocks of every other notes so what we do now instead of",
    "start": "2429089",
    "end": "2434339"
  },
  {
    "text": "seeing the text representation let's see it here we just introduce the clocks once the like on the go so each machine",
    "start": "2434339",
    "end": "2441359"
  },
  {
    "text": "starts with just one clock its own clock but then once they communicate they pass",
    "start": "2441359",
    "end": "2447119"
  },
  {
    "text": "the clocks and then once again implement this logic for getting maximum of the",
    "start": "2447119",
    "end": "2452580"
  },
  {
    "text": "clocks and incrementing them yes so you can see that seek here communicates to two with the machine B and it passes its",
    "start": "2452580",
    "end": "2460170"
  },
  {
    "text": "own clock with value 1 so then machine B gets their values and from now on it stores two clocks for B",
    "start": "2460170",
    "end": "2467190"
  },
  {
    "text": "and C then when it communicates with a it passes these clocks etc etc so we",
    "start": "2467190",
    "end": "2472530"
  },
  {
    "text": "just communicate we exchange all the clock values so in theory we should know",
    "start": "2472530",
    "end": "2477720"
  },
  {
    "text": "what's the time on every other machine now what this gives us is previously our",
    "start": "2477720",
    "end": "2485310"
  },
  {
    "text": "clock was just one integer now our vector clock is basically a vector so we",
    "start": "2485310",
    "end": "2490500"
  },
  {
    "text": "have multiple values of there and then we introduce this comparison relation",
    "start": "2490500",
    "end": "2496290"
  },
  {
    "text": "again so this time we say that vector clock of a is less than vector clock of",
    "start": "2496290",
    "end": "2501359"
  },
  {
    "text": "B if for each components vector clock of like this component matching components",
    "start": "2501359",
    "end": "2506940"
  },
  {
    "text": "is not greater and there is at least one component which is strictly less than the matching component of the other",
    "start": "2506940",
    "end": "2513630"
  },
  {
    "text": "vector once we do have this this match this relation we can say that if we know",
    "start": "2513630",
    "end": "2519930"
  },
  {
    "text": "that vector clock of a is less than vector clock of B we know that a happened before B this is something we",
    "start": "2519930",
    "end": "2527070"
  },
  {
    "text": "didn't have before previously we did know that if a influenced B then their",
    "start": "2527070",
    "end": "2532170"
  },
  {
    "text": "clocks were one of was strictly less than the other but now we can just compare the clocks and as long as they",
    "start": "2532170",
    "end": "2538260"
  },
  {
    "text": "are in this relation then we can tell which event happened before the other one okay obviously by definition of",
    "start": "2538260",
    "end": "2545640"
  },
  {
    "text": "relation you can say that not all the events will be comparable yes because it may happen that one component is",
    "start": "2545640",
    "end": "2551730"
  },
  {
    "text": "strictly greater the other component is strictly lower yes so it is not necessarily is not sufficient to compare",
    "start": "2551730",
    "end": "2558420"
  },
  {
    "text": "all the events but once we have this relation it's a step forward how to do it and there are some other",
    "start": "2558420",
    "end": "2564510"
  },
  {
    "text": "generalizations of these clocks obviously so they are slightly more efficient when it comes to like how many",
    "start": "2564510",
    "end": "2570150"
  },
  {
    "text": "clocks we store so make this vector smaller etc but generally they are all based on the same idea what we do next",
    "start": "2570150",
    "end": "2577079"
  },
  {
    "text": "is we need to introduce our understand what we are exactly dealing with so we",
    "start": "2577079",
    "end": "2583559"
  },
  {
    "text": "introduce a concept of Byzantine generals and there is a name of or this means an effect which our when our",
    "start": "2583559",
    "end": "2591750"
  },
  {
    "text": "machines they start behaving weirdly so a short story imagine that all these generals so there",
    "start": "2591750",
    "end": "2598140"
  },
  {
    "text": "is one general multiple lieutenants there is an army which basically wants to attack some city yes so general makes",
    "start": "2598140",
    "end": "2605579"
  },
  {
    "text": "a decision hey we are going to attack now and general is sending this information to all the lieutenant's but",
    "start": "2605579",
    "end": "2613079"
  },
  {
    "text": "then one of the lieutenant's is malicious he wants us to lose so he",
    "start": "2613079",
    "end": "2618240"
  },
  {
    "text": "starts lying to others and says hey the general told us to retreat so we can",
    "start": "2618240",
    "end": "2623880"
  },
  {
    "text": "clearly see that once we have a lieutenant like this malicious lieutenant things may go pretty bad",
    "start": "2623880",
    "end": "2630359"
  },
  {
    "text": "because if general cannot reach out some other lieutenant then the malicious",
    "start": "2630359",
    "end": "2636420"
  },
  {
    "text": "lieutenant may pass incorrect information to that one so we may get out of sync and get like split brain in",
    "start": "2636420",
    "end": "2643259"
  },
  {
    "text": "this situation and now how the how does this apply to computer science and here",
    "start": "2643259",
    "end": "2648990"
  },
  {
    "text": "we can imagine that each of people here is basically a separate machine and the",
    "start": "2648990",
    "end": "2654569"
  },
  {
    "text": "attack or retreat order is basically a network communication now if a machine",
    "start": "2654569",
    "end": "2660750"
  },
  {
    "text": "has this so-called Byzantine fault it means that it goes and behaves",
    "start": "2660750",
    "end": "2666480"
  },
  {
    "text": "completely unpredictably we would like it so when the machine fails we would like it to probably remain quiet or just",
    "start": "2666480",
    "end": "2672720"
  },
  {
    "text": "die and never come back however in reality it's not the case because it in reality",
    "start": "2672720",
    "end": "2678430"
  },
  {
    "text": "in distributed systems all the components can fail but the failure may",
    "start": "2678430",
    "end": "2683710"
  },
  {
    "text": "be of different types the failure may be that the node just dies and never returns it may be that it starts",
    "start": "2683710",
    "end": "2690040"
  },
  {
    "text": "violating the protocol sending the messages whether it's not supposed to be sending them it may be that it's",
    "start": "2690040",
    "end": "2696430"
  },
  {
    "text": "repeating the messages or it may be sending out broken messages broken",
    "start": "2696430",
    "end": "2701440"
  },
  {
    "text": "messages here is basically saying this retreat instead of attack okay",
    "start": "2701440",
    "end": "2707950"
  },
  {
    "text": "so once we get to this situation when we cannot trust any of our components how",
    "start": "2707950",
    "end": "2713530"
  },
  {
    "text": "do we actually figure out what's the order of things in our operating zone in our distributed system and this is not a",
    "start": "2713530",
    "end": "2720609"
  },
  {
    "text": "question of if something goes wrong this is a question of when these things",
    "start": "2720609",
    "end": "2726250"
  },
  {
    "text": "happen because in distributed systems everything is going to fail sooner or later so what we are going to do right",
    "start": "2726250",
    "end": "2732579"
  },
  {
    "text": "now before we get to ordering events is we would like to figure out how do we",
    "start": "2732579",
    "end": "2738640"
  },
  {
    "text": "get one value assuming it was replicated across multiple nodes so there is some",
    "start": "2738640",
    "end": "2744220"
  },
  {
    "text": "in fostering the database we would like to read this info yes and what is going",
    "start": "2744220",
    "end": "2749829"
  },
  {
    "text": "on we say that system is careful tolerant when it can survive failure of",
    "start": "2749829",
    "end": "2755770"
  },
  {
    "text": "K nodes at most K nodes so now the question is how many nodes do we need to",
    "start": "2755770",
    "end": "2761770"
  },
  {
    "text": "be able to extract this piece of information when K systems can go down",
    "start": "2761770",
    "end": "2766980"
  },
  {
    "text": "the answer is in that super simple situation when we don't have Byzantine failures it's K plus 1",
    "start": "2766980",
    "end": "2773260"
  },
  {
    "text": "why we just ask every single of k plus 1 systems and one of them must be working",
    "start": "2773260",
    "end": "2778660"
  },
  {
    "text": "properly because only K are allowed to die yes or we assume only K will die so",
    "start": "2778660",
    "end": "2784270"
  },
  {
    "text": "in that case it works but if we do have Byzantine failures then it's not",
    "start": "2784270",
    "end": "2790059"
  },
  {
    "text": "sufficient to get k plus 1 answers or escape like what k plus 1 systems because the nodes may lie to us they may",
    "start": "2790059",
    "end": "2798160"
  },
  {
    "text": "give us incorrect answers hey was the value of this variable and is basically lying what we need to do is we need to",
    "start": "2798160",
    "end": "2804490"
  },
  {
    "text": "do the majority voting so we ask 2 k plus 1 systems k of them are lying we",
    "start": "2804490",
    "end": "2811240"
  },
  {
    "text": "get answers from other k plus one which is correct and because of majority voting we can safely deduce that hey this was the",
    "start": "2811240",
    "end": "2818650"
  },
  {
    "text": "correct value so this is when it's come to reading but how do we modify this value imagine now two users come to your",
    "start": "2818650",
    "end": "2825010"
  },
  {
    "text": "system user a is in London user base in Tokyo they want to buy the last piece of",
    "start": "2825010",
    "end": "2830890"
  },
  {
    "text": "something and you need to decide which of them was actually the first one to ask for that item so now we need to",
    "start": "2830890",
    "end": "2837220"
  },
  {
    "text": "solve the so-called consensus problem so we need to agree on some decision and to",
    "start": "2837220",
    "end": "2842950"
  },
  {
    "text": "agree on that we would like to have nice protocol which basically stuff like fulfills these properties which are like",
    "start": "2842950",
    "end": "2848800"
  },
  {
    "text": "mathematical ideas but basically this should be pretty robust in pretty stable yes so when we Dave the machines finally",
    "start": "2848800",
    "end": "2855250"
  },
  {
    "text": "agree on something they agree on the same value and this value was proposed by at least one machine yes that's the",
    "start": "2855250",
    "end": "2861160"
  },
  {
    "text": "idea we obviously specified that there is a termination so there is a finite number of steps so it's not going like forever",
    "start": "2861160",
    "end": "2867520"
  },
  {
    "text": "and the integrity and all the other things so this is the problem we are now trying to solve so we are we're capable",
    "start": "2867520",
    "end": "2873490"
  },
  {
    "text": "of reading something now we are modifying something so if we assume that we do have K fault-tolerant system so K",
    "start": "2873490",
    "end": "2882010"
  },
  {
    "text": "components die we need actually free k plus 1 nodes in our system now to solve",
    "start": "2882010",
    "end": "2889450"
  },
  {
    "text": "this problem why is that that's because we need to not only agree on something",
    "start": "2889450",
    "end": "2895210"
  },
  {
    "text": "but we also need to convince others how we are going to do it the problem is we",
    "start": "2895210",
    "end": "2901290"
  },
  {
    "text": "implicitly assumed something about the communication under the hood so we assume that the communication basically",
    "start": "2901290",
    "end": "2907900"
  },
  {
    "text": "does not disappear it may be bounded or bounded there are some timeouts and we focus on mathematical like analysis of",
    "start": "2907900",
    "end": "2914800"
  },
  {
    "text": "this we can prove that for instance the first rectangle here is if we have",
    "start": "2914800",
    "end": "2919810"
  },
  {
    "text": "synchronous unordered communication unicast and bounded delay consensus is",
    "start": "2919810",
    "end": "2925870"
  },
  {
    "text": "not possible when only one machine out of the district I plus one die if one machine",
    "start": "2925870",
    "end": "2932800"
  },
  {
    "text": "dies we are not able to achieve the consensus and it's proven that only in this situations here marked in green yes",
    "start": "2932800",
    "end": "2940090"
  },
  {
    "text": "it's possible to get the consensus to agree on something and there are generally a lot of",
    "start": "2940090",
    "end": "2946309"
  },
  {
    "text": "different algorithms there are like pretty big research and white papers telling us how to do it efficiently how",
    "start": "2946309",
    "end": "2953660"
  },
  {
    "text": "to minimize the number of messages why it's not possible and it's proven it's not possible so it's not something we",
    "start": "2953660",
    "end": "2960190"
  },
  {
    "text": "suspect so generally there is a big math behind of these things and just to give",
    "start": "2960190",
    "end": "2965599"
  },
  {
    "text": "you idea how this thing works there is the multiple protocols one of them of",
    "start": "2965599",
    "end": "2971839"
  },
  {
    "text": "the protocols for achieving consensus is called raft and in this protocol",
    "start": "2971839",
    "end": "2977089"
  },
  {
    "text": "basically we do have a big state machine for each of the nodes in our system and each node can be in one of the multiple",
    "start": "2977089",
    "end": "2984349"
  },
  {
    "text": "states and now it seems pretty easy but proving that this state diagram and",
    "start": "2984349",
    "end": "2990049"
  },
  {
    "text": "these transitions are sufficient to achieve the consensus it's actually quite a lot of maths behind it so",
    "start": "2990049",
    "end": "2995599"
  },
  {
    "text": "generally each node can be in like one of the multiple states and general assumption is there isn't like a leader",
    "start": "2995599",
    "end": "3002470"
  },
  {
    "text": "at some point and the leader is pinging all the others one the leader dies the followers so the nodes which are",
    "start": "3002470",
    "end": "3009339"
  },
  {
    "text": "receiving this pink message they noticed that the leader died because the pink did not return or something like this so",
    "start": "3009339",
    "end": "3015759"
  },
  {
    "text": "now followers need to decide who is the new leader so each follower says hey I'm the new leader do you all agree other nodes may",
    "start": "3015759",
    "end": "3022869"
  },
  {
    "text": "say yeah I agree or no I do not disagree they passed some messages integers etc etc and finally they did use who the",
    "start": "3022869",
    "end": "3029650"
  },
  {
    "text": "leader is so it seems simple there are no multiple issues with this approach because first if leader is unreachable",
    "start": "3029650",
    "end": "3037690"
  },
  {
    "text": "pretty often so if the leader changes it may be that we are actually capable of determining who the leader is but it",
    "start": "3037690",
    "end": "3044349"
  },
  {
    "text": "takes so much time that our performance basically decreases too much it also may",
    "start": "3044349",
    "end": "3050259"
  },
  {
    "text": "be that the leader is decided just for one decision and then the leader election starts to happen again so we",
    "start": "3050259",
    "end": "3057069"
  },
  {
    "text": "basically spent a lot of time to decide okay who the leader is then the leader decides on one thing and then it dies",
    "start": "3057069",
    "end": "3063849"
  },
  {
    "text": "out or whatever else and we need to decide again so there are multiple issues with this approaches but once we",
    "start": "3063849",
    "end": "3070210"
  },
  {
    "text": "do have this consensus we can implement this again mathematical proofs that we",
    "start": "3070210",
    "end": "3075220"
  },
  {
    "text": "can implement these operations here in the tributed system so for instance we can do the total ordered broadcast which is",
    "start": "3075220",
    "end": "3083230"
  },
  {
    "text": "basically a communication that I sent a message to all the nodes in my system and I have AG warranty that this message",
    "start": "3083230",
    "end": "3090700"
  },
  {
    "text": "happened before other messages or after other messages and that all the working",
    "start": "3090700",
    "end": "3096310"
  },
  {
    "text": "nodes which are still working correctly they do receive this message properly and they acknowledge it and they",
    "start": "3096310",
    "end": "3101440"
  },
  {
    "text": "commented etc we can also implement distributed compare and set we can also implement distributed increment and get",
    "start": "3101440",
    "end": "3108310"
  },
  {
    "text": "so we can finally agree on the order of events and once we can do that like",
    "start": "3108310",
    "end": "3114700"
  },
  {
    "text": "solving the issue we had with logs is now super simple because in theory we can just communicate each other and say",
    "start": "3114700",
    "end": "3120820"
  },
  {
    "text": "hey I'm logging this now okay they decide who the leader is they elect they store it obviously we're not doing it",
    "start": "3120820",
    "end": "3127960"
  },
  {
    "text": "this way because it gives the performance but we can agree on things like hey two users are trying to buy",
    "start": "3127960",
    "end": "3133630"
  },
  {
    "text": "this one item who wins this this this idea obviously now there are other",
    "start": "3133630",
    "end": "3138880"
  },
  {
    "text": "questions like whether we want this consistency maybe we would like to have eventual consistency well then we don't",
    "start": "3138880",
    "end": "3144460"
  },
  {
    "text": "need this distributed transactions at all but this is like a story on its own and just to give you an idea how these",
    "start": "3144460",
    "end": "3152890"
  },
  {
    "text": "things are hard there is a project called Jepsen Jepsen is supposed to evaluate distributed systems and show",
    "start": "3152890",
    "end": "3159820"
  },
  {
    "text": "that they are working or they are not working correctly so the owners of for instance MongoDB and other distributed",
    "start": "3159820",
    "end": "3166660"
  },
  {
    "text": "databases they reach out to Jepsen people and they try to evaluate whether this work correctly so once you get to",
    "start": "3166660",
    "end": "3173170"
  },
  {
    "text": "to your database tutorial or documentation and it tells you that hey we have this strong consistency",
    "start": "3173170",
    "end": "3178540"
  },
  {
    "text": "guarentees of all the things it's easy like if you do have proved that proving",
    "start": "3178540",
    "end": "3183580"
  },
  {
    "text": "it by jep's and then you probably can safely assume it's working as expected and Jepsen already showed that multiple",
    "start": "3183580",
    "end": "3189820"
  },
  {
    "text": "databases were losing data pretty often were not honoring the consistency they were guaranteeing etc so take a look at",
    "start": "3189820",
    "end": "3196600"
  },
  {
    "text": "this Google some YouTube videos about Jepsen how they were proving things",
    "start": "3196600",
    "end": "3201900"
  },
  {
    "text": "summary wall clock as we've seen is pretty tricky and it's not usable in",
    "start": "3201900",
    "end": "3207910"
  },
  {
    "text": "distributed systems Lamport time stamp is a way to do it if we do have sufficiently simple",
    "start": "3207910",
    "end": "3214210"
  },
  {
    "text": "situation if we do have harder situations then we probably need to use some well-built",
    "start": "3214210",
    "end": "3219790"
  },
  {
    "text": "distributed systems which are also evaluated correctly and basically guaranteed to work properly and all",
    "start": "3219790",
    "end": "3226119"
  },
  {
    "text": "these things we you can you always need to assume that hey these things will go wrong your machines will die your machines",
    "start": "3226119",
    "end": "3232690"
  },
  {
    "text": "will fail and you do have Byzantine failures so those things will not work correctly okay having said that it's",
    "start": "3232690",
    "end": "3240430"
  },
  {
    "text": "time for QA any questions this is the QR",
    "start": "3240430",
    "end": "3245860"
  },
  {
    "text": "code pointing to the slide deck by the way so if you'd like to download it there is a way to go questions here okay",
    "start": "3245860",
    "end": "3254890"
  },
  {
    "text": "I don't see any questions feel free to reach out to me offline or after this talk during the conference before we",
    "start": "3254890",
    "end": "3262240"
  },
  {
    "text": "will just wait a few seconds for people to scan this QR code and then we will just wrap up with some resources",
    "start": "3262240",
    "end": "3267720"
  },
  {
    "text": "references so if you would like to read more about distributed systems you are now interested in this time stamps",
    "start": "3267720",
    "end": "3273640"
  },
  {
    "text": "vector clocks all these things around there are some books I think I can recommend for you so you can start with",
    "start": "3273640",
    "end": "3279760"
  },
  {
    "text": "ton and bound distributed systems principles and paradigms that's pretty nice introduction and also designing",
    "start": "3279760",
    "end": "3285520"
  },
  {
    "text": "data intensive application is a pretty good one telling you how to implement these things working in a distributed",
    "start": "3285520",
    "end": "3291760"
  },
  {
    "text": "fashion and giving you our very good performance yeah there are some other",
    "start": "3291760",
    "end": "3297160"
  },
  {
    "text": "books as well feel free to take a look at them also if you would like to read things on the internet some links for",
    "start": "3297160",
    "end": "3303880"
  },
  {
    "text": "you to read about lab for time stamps or all the funny stories about like Sweden",
    "start": "3303880",
    "end": "3308950"
  },
  {
    "text": "February 30 and all these things so falsehood' better programmers believe about time logging in distributed system",
    "start": "3308950",
    "end": "3315490"
  },
  {
    "text": "implementation this is basically my blog post serious with this implementation so you can get the slide deck from there or",
    "start": "3315490",
    "end": "3321609"
  },
  {
    "text": "get the code which which is supposed to be working correctly and having said all of that I'd like to thank you for",
    "start": "3321609",
    "end": "3328180"
  },
  {
    "text": "attending this talk my name is Adam for monoghan I hope you enjoyed it thank you",
    "start": "3328180",
    "end": "3333690"
  },
  {
    "text": "you",
    "start": "3333710",
    "end": "3335770"
  }
]