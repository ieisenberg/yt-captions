[
  {
    "text": "so let's stop that I finished on time today good morning everybody it seems",
    "start": "1040",
    "end": "11940"
  },
  {
    "text": "sir most of the people yang Kongsberg know about mu semantics that's good because this room is only half packed so",
    "start": "11940",
    "end": "19289"
  },
  {
    "text": "let's see whether we know everything I'm talking today about a problem we have",
    "start": "19289",
    "end": "25140"
  },
  {
    "text": "since we introduced mu semantics and a couple of side effects of that which are",
    "start": "25140",
    "end": "31850"
  },
  {
    "text": "surprisingly often not known and so let's look into the details of the",
    "start": "31850",
    "end": "37530"
  },
  {
    "text": "nightmare of MU semantics for even trivial classes the promise is that in",
    "start": "37530",
    "end": "44070"
  },
  {
    "text": "C++ you don't have to deal with things you don't want to deal with and one is the",
    "start": "44070",
    "end": "50760"
  },
  {
    "text": "thing I want to don't want to do this with some details of some strange internal handling of MU semantics etc at",
    "start": "50760",
    "end": "57780"
  },
  {
    "text": "all so let's program a very trivial class this is a class customer and the",
    "start": "57780",
    "end": "67740"
  },
  {
    "text": "class customer has three members first name a last name and an ID anything",
    "start": "67740",
    "end": "77189"
  },
  {
    "text": "anything problematic here with this class I don't think so so what is the",
    "start": "77189",
    "end": "85560"
  },
  {
    "text": "way we implement the constructor usually what we learnt in C+ was 98 this way so",
    "start": "85560",
    "end": "93150"
  },
  {
    "text": "let's initialize the first name the last name and the ID last name and ID are",
    "start": "93150",
    "end": "99570"
  },
  {
    "text": "have default values so we take as we learnt all the arguments by constant",
    "start": "99570",
    "end": "105780"
  },
  {
    "text": "reference and instead of int because passing in five value is the fastest thing we have and then we take these",
    "start": "105780",
    "end": "113520"
  },
  {
    "text": "arguments to initialize the members first and last so let's create the",
    "start": "113520",
    "end": "122880"
  },
  {
    "text": "customer let's create a customer and initialize it with the first name and their last name so this is an exercise",
    "start": "122880",
    "end": "131400"
  },
  {
    "text": "for you how many expense string calls potentially expensive",
    "start": "131400",
    "end": "136620"
  },
  {
    "text": "string cards are here involved what I mean is assume that we don't have the",
    "start": "136620",
    "end": "143310"
  },
  {
    "text": "shots ring optimization which makes everything copy a cheap operation how",
    "start": "143310",
    "end": "150330"
  },
  {
    "text": "many times do we have to copy a string which means call the copy constructor or",
    "start": "150330",
    "end": "156270"
  },
  {
    "text": "copy assignment operator which means that if the if we don't have the short",
    "start": "156270",
    "end": "161490"
  },
  {
    "text": "string optimization or if the string is reasonable long so the names have more than 15 characters and practice that",
    "start": "161490",
    "end": "170880"
  },
  {
    "text": "this yeah that this happens that how men",
    "start": "170880",
    "end": "175890"
  },
  {
    "text": "do we have this expensive string cards everybody has an opinion two things to",
    "start": "175890",
    "end": "185600"
  },
  {
    "text": "none oh great three four five six okay eight zero",
    "start": "185600",
    "end": "199040"
  },
  {
    "text": "anything worth ten eight okay I forgot seven let's see this is what we have",
    "start": "200360",
    "end": "208980"
  },
  {
    "text": "when the program is compiled we have indi text in there in the generated data segment of the program we have stored",
    "start": "208980",
    "end": "216390"
  },
  {
    "text": "somewhere these two string literals Joanne fix whatever is the last name called fix but that's a different issue",
    "start": "216390",
    "end": "223940"
  },
  {
    "text": "so what do we have what has what happens here well the first thing is we have two",
    "start": "223940",
    "end": "231690"
  },
  {
    "text": "arguments F and L in the constructor the type of the arguments does not fit the",
    "start": "231690",
    "end": "238170"
  },
  {
    "text": "type of the the type of the parameters in the constructor does not fit the type",
    "start": "238170",
    "end": "243540"
  },
  {
    "text": "of the arguments we pass through the constructor so there will be an implicit",
    "start": "243540",
    "end": "249210"
  },
  {
    "text": "type conversion which means that we created string okay so let's create it",
    "start": "249210",
    "end": "256079"
  },
  {
    "text": "that first time we a lock memory at least for the non-trivial cases but",
    "start": "256080",
    "end": "263790"
  },
  {
    "text": "that's not enough because then we have the operations that we perform in the constructor and that means we have the",
    "start": "263790",
    "end": "272720"
  },
  {
    "text": "statements to initialize first and last by F and L and that means that in",
    "start": "272720",
    "end": "278720"
  },
  {
    "text": "addition we create a copy of these temporary objects for both the first and",
    "start": "278720",
    "end": "285950"
  },
  {
    "text": "the last name and that's our new object and then the temporary parameters FNL",
    "start": "285950",
    "end": "292550"
  },
  {
    "text": "get deleted so the correct answer is we have form Alex",
    "start": "292550",
    "end": "297970"
  },
  {
    "text": "two times we create a string two times we copy a string this is probably not",
    "start": "297970",
    "end": "304250"
  },
  {
    "text": "perfect so and as we are usually interested in good performance how can",
    "start": "304250",
    "end": "310850"
  },
  {
    "text": "we deal with that well it's easy",
    "start": "310850",
    "end": "315550"
  },
  {
    "text": "let's overload this for the case that we passed string literals so let's take",
    "start": "316030",
    "end": "323270"
  },
  {
    "text": "another constructor taking two string literals and that means we only have two",
    "start": "323270",
    "end": "328850"
  },
  {
    "text": "Maalox because these string literals are passed by value which means they are",
    "start": "328850",
    "end": "335930"
  },
  {
    "text": "passed as a raw pointer which is cheap and then the raw pointer is used to",
    "start": "335930",
    "end": "341330"
  },
  {
    "text": "initialize the string members good well what happens if we have a combination of",
    "start": "341330",
    "end": "351130"
  },
  {
    "text": "an STD string and the string literal okay",
    "start": "351130",
    "end": "356270"
  },
  {
    "text": "too bad that will not use the second constructor it will use the first constructor so oh that was the wrong",
    "start": "356270",
    "end": "363980"
  },
  {
    "text": "button so we will have three Malick's",
    "start": "363980",
    "end": "369080"
  },
  {
    "text": "here because we have the initial problem in the second argument here so what that",
    "start": "369080",
    "end": "375380"
  },
  {
    "text": "means it's clear we need all four combinations it gets worse okay so we",
    "start": "375380",
    "end": "386840"
  },
  {
    "text": "can move a string and we try to move a string we don't",
    "start": "386840",
    "end": "395449"
  },
  {
    "text": "need anymore and we pass a string little now what",
    "start": "395449",
    "end": "400639"
  },
  {
    "text": "whatever is used here well the problem is we have only constructor but the",
    "start": "400639",
    "end": "410120"
  },
  {
    "text": "first argument is a string where we no longer need the value but this string",
    "start": "410120",
    "end": "416240"
  },
  {
    "text": "where we no longer lead the value is used as an F so we move here where we",
    "start": "416240",
    "end": "424970"
  },
  {
    "text": "don't move here because the argument is a constant object and for cons objects move semantics is disabled so we have",
    "start": "424970",
    "end": "431810"
  },
  {
    "text": "here two medics although this should be only one malloc so we need even more",
    "start": "431810",
    "end": "437330"
  },
  {
    "text": "overloads a couple of overloads for both ordinary string references so LV your",
    "start": "437330",
    "end": "445280"
  },
  {
    "text": "references and are very references where we then move the value to make this sheep which by the way also works for",
    "start": "445280",
    "end": "454840"
  },
  {
    "text": "for spring little so we have the cast that the the implementation here the",
    "start": "454840",
    "end": "460759"
  },
  {
    "text": "second implementation the constructor introduced here would steal the memory from the past rings when we have moved",
    "start": "460759",
    "end": "467180"
  },
  {
    "text": "semantics so that we only have to have here two Malick's",
    "start": "467180",
    "end": "472509"
  },
  {
    "text": "good and of course here we need also all",
    "start": "472509",
    "end": "477680"
  },
  {
    "text": "combinations you like that huh I only",
    "start": "477680",
    "end": "483770"
  },
  {
    "text": "want to initialize my customer by a couple of cuff strings so everything looks nice now hmm oh wait a minute",
    "start": "483770",
    "end": "492849"
  },
  {
    "text": "I initialize my customer with a raw string here what's the problem here it's",
    "start": "495460",
    "end": "501580"
  },
  {
    "text": "ambiguous because I have default arguments in all four constructors now",
    "start": "501580",
    "end": "508289"
  },
  {
    "text": "so it's not clear what to choose from from the compiler for this case because",
    "start": "508289",
    "end": "514479"
  },
  {
    "text": "both the the the second and the the last",
    "start": "514479",
    "end": "521409"
  },
  {
    "text": "option works so we have to remove initializations the default values from some of these constructors being very",
    "start": "521409",
    "end": "528010"
  },
  {
    "text": "carefully which one to choose good is this everything good no let's use the",
    "start": "528010",
    "end": "536770"
  },
  {
    "text": "assignment operator to initialize the name and what's the problem here",
    "start": "536770",
    "end": "543690"
  },
  {
    "text": "this none of this constructors works because we have here and an explicit",
    "start": "543690",
    "end": "552820"
  },
  {
    "text": "initialization so we use here the initialization the the copy",
    "start": "552820",
    "end": "558880"
  },
  {
    "text": "initialization and by rule it's not allowed to have their two implicit conversions because this requires that",
    "start": "558880",
    "end": "566800"
  },
  {
    "text": "on the right side the thing which is a string literal first converts to a string and that converts to a customer",
    "start": "566800",
    "end": "573300"
  },
  {
    "text": "so this will also not compile this is a general rule that has been there before",
    "start": "573300",
    "end": "578649"
  },
  {
    "text": "move semantics if you have a class rack a class S or a Spratt s and you have a",
    "start": "578649",
    "end": "584800"
  },
  {
    "text": "constructor taking an STD string you can't initialize the string with the equal sign anything else will work dope",
    "start": "584800",
    "end": "594579"
  },
  {
    "text": "how are we done now well if we make it good we end up with something like this with good",
    "start": "594579",
    "end": "600880"
  },
  {
    "text": "performance and everything should compile it's just something we like No",
    "start": "600880",
    "end": "607570"
  },
  {
    "text": "well I I hate that so can we do better",
    "start": "607570",
    "end": "613980"
  },
  {
    "text": "well it's okay the as I said the performance is nice but that's these are",
    "start": "613980",
    "end": "621370"
  },
  {
    "text": "a lot of overloads we have and if you look in the standard in classes they take strings as arguments we have all",
    "start": "621370",
    "end": "627279"
  },
  {
    "text": "these overloads where we have classes that take strings as arguments",
    "start": "627279",
    "end": "632430"
  },
  {
    "text": "because we can do better but we came from initially passing the arguments by",
    "start": "632430",
    "end": "638950"
  },
  {
    "text": "cons reference and that's a problem now so let's look at an alternative an",
    "start": "638950",
    "end": "646600"
  },
  {
    "text": "interesting alternative which we think is crazy pass by value pass by value is",
    "start": "646600",
    "end": "653410"
  },
  {
    "text": "expensive so what happens here if we pass by value well still we have the",
    "start": "653410",
    "end": "661630"
  },
  {
    "text": "problem with two conversions when we direct initialize with a string little",
    "start": "661630",
    "end": "667210"
  },
  {
    "text": "but in principle it works but it works bad we have former logs and four medals",
    "start": "667210",
    "end": "673240"
  },
  {
    "text": "and three Maalox here so what can we do and look at this we can move the passed",
    "start": "673240",
    "end": "680530"
  },
  {
    "text": "by value arguments and suddenly things become great we have two medics here two",
    "start": "680530",
    "end": "690790"
  },
  {
    "text": "medics here one medic here and it can't get better and we have some move",
    "start": "690790",
    "end": "698680"
  },
  {
    "text": "operations in additions so because what we do here and that's an interesting",
    "start": "698680",
    "end": "703960"
  },
  {
    "text": "lesson learnt here that we say instead of taking an argument by cons reference",
    "start": "703960",
    "end": "711220"
  },
  {
    "text": "it's better to take it by value and then move it to its destination if the",
    "start": "711220",
    "end": "716800"
  },
  {
    "text": "destination is the sink of this value and that's a rule you should know that's",
    "start": "716800",
    "end": "725500"
  },
  {
    "text": "a style guide we should have introduced with C++ 17 excuse me C++ 11",
    "start": "725500",
    "end": "732450"
  },
  {
    "text": "unfortunately nobody brought style guides anymore well some right on on",
    "start": "732450",
    "end": "738070"
  },
  {
    "text": "websites but nobody writes books and discusses them in detail so this is not",
    "start": "738070",
    "end": "744220"
  },
  {
    "text": "very well known because move is cheap this is good this the best you can do",
    "start": "744220",
    "end": "754310"
  },
  {
    "text": "so do we have alternatives yes we have perfect forwarding because to save",
    "start": "754310",
    "end": "765540"
  },
  {
    "text": "something we can also use another approach saying low let's not make the",
    "start": "765540",
    "end": "770699"
  },
  {
    "text": "mistake that the argument is a string here let's take the argument as it is",
    "start": "770699",
    "end": "777329"
  },
  {
    "text": "and then perfectly forward it to initialize the member that might be an",
    "start": "777329",
    "end": "784620"
  },
  {
    "text": "alternative so let's discuss a little bit this alternative it would look like",
    "start": "784620",
    "end": "791430"
  },
  {
    "text": "this so you would say whatever I get for initialization I get it as it is if it's",
    "start": "791430",
    "end": "800670"
  },
  {
    "text": "constant I get it as a constant if it's non constant I take it as not constant if it has mu semantics so if it's a",
    "start": "800670",
    "end": "808500"
  },
  {
    "text": "temporary object or on an l-value marked with move then this should be",
    "start": "808500",
    "end": "815790"
  },
  {
    "text": "forwarded to initialize the member and it should be perfectly forward and we",
    "start": "815790",
    "end": "821490"
  },
  {
    "text": "have a way to do that the way to do that is to take the arguments or the",
    "start": "821490",
    "end": "826740"
  },
  {
    "text": "parameters by a value reference so with two ampersands and then use perfect",
    "start": "826740",
    "end": "833370"
  },
  {
    "text": "forwarding which you do with SCD forward",
    "start": "833370",
    "end": "838040"
  },
  {
    "text": "which to some extent covers all the cases here listed",
    "start": "838490",
    "end": "844880"
  },
  {
    "text": "looks good well might be a little bit",
    "start": "848280",
    "end": "853680"
  },
  {
    "text": "more complicated than than just one constructor taking by value and then",
    "start": "853680",
    "end": "860070"
  },
  {
    "text": "convert but we save a couple of moves because for example if we pass a string",
    "start": "860070",
    "end": "865770"
  },
  {
    "text": "literal here this string literal is forward in it as a string little so that means as a conference or SN string array",
    "start": "865770",
    "end": "873750"
  },
  {
    "text": "character array and then it is used this the character area is used to initialize",
    "start": "873750",
    "end": "879870"
  },
  {
    "text": "the string so we save a move of a string here with this alternative so what",
    "start": "879870",
    "end": "887670"
  },
  {
    "text": "happens if we have this we don't create a temporary object that is a string F",
    "start": "887670",
    "end": "895650"
  },
  {
    "text": "and L are just other names for the string literals we have in the program",
    "start": "895650",
    "end": "900990"
  },
  {
    "text": "and we use them directly to initialize our object so that's even better than",
    "start": "900990",
    "end": "907410"
  },
  {
    "text": "taking by value and move so we have two medics here two Molossia one malach here",
    "start": "907410",
    "end": "914490"
  },
  {
    "text": "this is more or less perfect well we",
    "start": "914490",
    "end": "923970"
  },
  {
    "text": "were are we done so this talk today is only",
    "start": "923970",
    "end": "931030"
  },
  {
    "text": "16 minutes unless we try something out",
    "start": "931030",
    "end": "938590"
  },
  {
    "text": "let's initialize the customer F with",
    "start": "938590",
    "end": "943790"
  },
  {
    "text": "Nico so with only one argument does it",
    "start": "943790",
    "end": "950480"
  },
  {
    "text": "compile well of course it doesn't",
    "start": "950480",
    "end": "956180"
  },
  {
    "text": "compile otherwise I would have wouldn't have this slide so what's the problem",
    "start": "956180",
    "end": "962769"
  },
  {
    "text": "yeah",
    "start": "962830",
    "end": "965830"
  },
  {
    "text": "the compiler says you there's a conversion requested from Khan's character five to a non scholar typecast",
    "start": "968320",
    "end": "977130"
  },
  {
    "text": "what what this means is it take argument",
    "start": "979410",
    "end": "987160"
  },
  {
    "text": "and tries to convert the argument to an object of type caste which should not be",
    "start": "987160",
    "end": "994360"
  },
  {
    "text": "happening should be and conversion to a string because we initialize a member of type string so a couple of things are",
    "start": "994360",
    "end": "1006959"
  },
  {
    "text": "wrong first of all here we need when we have default values for template",
    "start": "1006959",
    "end": "1013949"
  },
  {
    "text": "functions we need T for values for both the arguments and the affected template",
    "start": "1013949",
    "end": "1024418"
  },
  {
    "text": "arguments so that's the first problem we have to solve that's a general rule with",
    "start": "1024419",
    "end": "1031290"
  },
  {
    "text": "templates so if you have default values deduction will no longer work for them",
    "start": "1031290",
    "end": "1038839"
  },
  {
    "text": "deduction of templates does not apply to default values default values for",
    "start": "1038839",
    "end": "1043860"
  },
  {
    "text": "arguments so you have also to place there a matching default type so wait",
    "start": "1043860",
    "end": "1050730"
  },
  {
    "text": "right let's try to compile it it works on GCC it works on clang but unfortunately it doesn't work on Visual",
    "start": "1050730",
    "end": "1057809"
  },
  {
    "text": "C++ it's a little bit questionable who's right here I had some discussion with",
    "start": "1057809",
    "end": "1064590"
  },
  {
    "text": "some guys after I gave this talk the last time I think Jesus Ian clang all",
    "start": "1064590",
    "end": "1070409"
  },
  {
    "text": "are correct this should work and I should also say I didn't check yet whether this is fixed with with little",
    "start": "1070409",
    "end": "1077909"
  },
  {
    "text": "C++ 17 but we were I said yesterday already never trust somebody teaching you C++ we don't know exactly what is",
    "start": "1077909",
    "end": "1086040"
  },
  {
    "text": "right here so there's a problem here so",
    "start": "1086040",
    "end": "1091620"
  },
  {
    "text": "but probably GCC and clang are correct here and it should work the other option",
    "start": "1091620",
    "end": "1096750"
  },
  {
    "text": "is which definitely works for all three look at this you take as a default argument too",
    "start": "1096750",
    "end": "1102119"
  },
  {
    "text": "take STD string that will work so great",
    "start": "1102119",
    "end": "1110879"
  },
  {
    "text": "we have solved this problem let's go to the next problem that's initialized the",
    "start": "1110879",
    "end": "1116669"
  },
  {
    "text": "customer G was a customer F we've just created here's a customer initialized by",
    "start": "1116669",
    "end": "1123629"
  },
  {
    "text": "Neko it works now cast energy is initialized by the customer s which of",
    "start": "1123629",
    "end": "1131279"
  },
  {
    "text": "course should call the copy constructor",
    "start": "1131279",
    "end": "1135919"
  },
  {
    "text": "again we get an error there is no matching constructor for the",
    "start": "1136999",
    "end": "1142639"
  },
  {
    "text": "initialization of an STD string here",
    "start": "1142639",
    "end": "1147079"
  },
  {
    "text": "what's the problem here we if you have a good error message or maybe a better",
    "start": "1151159",
    "end": "1157859"
  },
  {
    "text": "error message the compiler tells you it tries to create a customer where the",
    "start": "1157859",
    "end": "1163019"
  },
  {
    "text": "first argument is the customer and the second is a string because what we have",
    "start": "1163019",
    "end": "1173069"
  },
  {
    "text": "here well I should extend this example if I try to initialize my customer with",
    "start": "1173069",
    "end": "1179099"
  },
  {
    "text": "the Const customer it works so this",
    "start": "1179099",
    "end": "1187559"
  },
  {
    "text": "class taking an arbitrary elements to initialize my first and last name",
    "start": "1187559",
    "end": "1193859"
  },
  {
    "text": "somehow disables the constructor when we",
    "start": "1193859",
    "end": "1199259"
  },
  {
    "text": "pass a non-contract but with the constant object the construction works the copy construct so what is the",
    "start": "1199259",
    "end": "1210359"
  },
  {
    "text": "problem our constructor we introduced here is a better match than the copy",
    "start": "1210359",
    "end": "1216119"
  },
  {
    "text": "constructor so in the case you see here",
    "start": "1216119",
    "end": "1221489"
  },
  {
    "text": "which doesn't work our initialize date initializing constructor is used instead",
    "start": "1221489",
    "end": "1228119"
  },
  {
    "text": "of the ordinary predefined copy constructor which means that this our",
    "start": "1228119",
    "end": "1235049"
  },
  {
    "text": "constructor takes me to this first argument the seconds have default and this first",
    "start": "1235049",
    "end": "1240330"
  },
  {
    "text": "argument it tries to use to initialize the first name so it tries to initialize the first name of a new customer with an",
    "start": "1240330",
    "end": "1247260"
  },
  {
    "text": "existing customer yeah we have some flaws in the standard and one thing is",
    "start": "1247260",
    "end": "1254550"
  },
  {
    "text": "that it's easily to override with user-defined customers the built-in copy",
    "start": "1254550",
    "end": "1260250"
  },
  {
    "text": "constructor so that they have higher priority because the point is it's a better match it it's a better match to",
    "start": "1260250",
    "end": "1268230"
  },
  {
    "text": "use our constructor because we don't need any type conversion because our",
    "start": "1268230",
    "end": "1273780"
  },
  {
    "text": "type does not need a Const and the copy constructor needs a Const customer and",
    "start": "1273780",
    "end": "1280380"
  },
  {
    "text": "that's a type conversion our constructor is a better match because it doesn't",
    "start": "1280380",
    "end": "1286980"
  },
  {
    "text": "need the conversion of the argument to Const so this is preferred and therefore the copy constructor is used in the",
    "start": "1286980",
    "end": "1293340"
  },
  {
    "text": "second case because in the second case we cut the inbuilt copy constructor is a",
    "start": "1293340",
    "end": "1298380"
  },
  {
    "text": "better match because it's a non template and we have a template and there's no type conversion involved we laugh C++",
    "start": "1298380",
    "end": "1306930"
  },
  {
    "text": "don't be so what's a way to do deal with that well we have invented something",
    "start": "1306930",
    "end": "1313530"
  },
  {
    "text": "well some tricks sometime deep corner template tricks the way you do that is",
    "start": "1313530",
    "end": "1318570"
  },
  {
    "text": "to say I enable this constructor only if",
    "start": "1318570",
    "end": "1324180"
  },
  {
    "text": "I don't pass a customer as first argument otherwise is disabled that's",
    "start": "1324180",
    "end": "1333270"
  },
  {
    "text": "the way you program that that Cup a couple of ways to program desc and we have this technique in a very in",
    "start": "1333270",
    "end": "1340500"
  },
  {
    "text": "a lot of places in the standard when you when you find in the standard the text",
    "start": "1340500",
    "end": "1348330"
  },
  {
    "text": "shall not be used in overload resolution cannot participate in overload",
    "start": "1348330",
    "end": "1354720"
  },
  {
    "text": "resolution if or unless then we use this trick internally so we say we we disable",
    "start": "1354720",
    "end": "1364620"
  },
  {
    "text": "the visibility of a function like a constructor if for certain scenarios because otherwise",
    "start": "1364620",
    "end": "1372299"
  },
  {
    "text": "this function should will be used and that would be an error we want to have something else be called we have that in",
    "start": "1372299",
    "end": "1379229"
  },
  {
    "text": "a couple of places in the standard so shall not participate in overload",
    "start": "1379229",
    "end": "1385409"
  },
  {
    "text": "resolution is a key phrase you can look at okay so what does it do let's look",
    "start": "1385409",
    "end": "1393269"
  },
  {
    "text": "what we have here this is a trick saying I have an enable if I enable this",
    "start": "1393269",
    "end": "1398700"
  },
  {
    "text": "constructor if we have the same if the first argument is the same as a customer",
    "start": "1398700",
    "end": "1405349"
  },
  {
    "text": "okay we call this technique to spin a out this constructor Swinney is one of",
    "start": "1405349",
    "end": "1415799"
  },
  {
    "text": "the two worst words we have invented for C++ it's partially our fault when we",
    "start": "1415799",
    "end": "1422489"
  },
  {
    "text": "wrote the C++ templates book this means substitution failure is not",
    "start": "1422489",
    "end": "1428399"
  },
  {
    "text": "an error and what the trick of n a belief is it creates invalid code and if",
    "start": "1428399",
    "end": "1436499"
  },
  {
    "text": "template instantiation creates invalid code the code is ignored that's the",
    "start": "1436499",
    "end": "1445259"
  },
  {
    "text": "trick behind enable F good so let's do",
    "start": "1445259",
    "end": "1450720"
  },
  {
    "text": "it here that different ways to do that",
    "start": "1450720",
    "end": "1456799"
  },
  {
    "text": "with C pass 417 we can do it a little bit shorter look at this but see bus was",
    "start": "1456799",
    "end": "1462389"
  },
  {
    "text": "14 we had to use type name here and then an able F T and is same well let's first",
    "start": "1462389",
    "end": "1470940"
  },
  {
    "text": "use C++ 11 Russian and the C++ 11 version we only had STD enable if and",
    "start": "1470940",
    "end": "1478289"
  },
  {
    "text": "then you enable if and we have is same both are type functions is same checks",
    "start": "1478289",
    "end": "1485039"
  },
  {
    "text": "whether two types are the same and a belief gives you then if this condition is met says this is valid code in both",
    "start": "1485039",
    "end": "1493109"
  },
  {
    "text": "cases we get something as a result we get a structure of soil structure in its",
    "start": "1493109",
    "end": "1500009"
  },
  {
    "text": "same we get a value through our thoughts which we can access with : : value and with",
    "start": "1500009",
    "end": "1506430"
  },
  {
    "text": "enable if we get a type with : : type which is ignored here the type the type",
    "start": "1506430",
    "end": "1513150"
  },
  {
    "text": "doesn't matter but enable if gives you a type so you have to do that otherwise you have no correct syntax here in the",
    "start": "1513150",
    "end": "1520260"
  },
  {
    "text": "template because in the template argument you need something like a type if you use something like a type name so",
    "start": "1520260",
    "end": "1525810"
  },
  {
    "text": "we fix this because you need it because this enable if you type and if you have",
    "start": "1525810",
    "end": "1531810"
  },
  {
    "text": "a structural hearing a type you have to use type name in front of the sed enim you live so in the next version in",
    "start": "1531810",
    "end": "1539220"
  },
  {
    "text": "c-plus asphalting we fix that so we can get rid of type name here and can",
    "start": "1539220",
    "end": "1544320"
  },
  {
    "text": "instead use STD and able if type under scotty enable if type and then we fixed",
    "start": "1544320",
    "end": "1551580"
  },
  {
    "text": "in c++ 17 we fix the other case accordingly that we can say instead of is same something : : value we can just",
    "start": "1551580",
    "end": "1559980"
  },
  {
    "text": "write is same v and that will give you the expression but this is the way it",
    "start": "1559980",
    "end": "1567030"
  },
  {
    "text": "would be written now in c++ 17 so",
    "start": "1567030",
    "end": "1575480"
  },
  {
    "text": "everything soft no still doesn't compile",
    "start": "1575480",
    "end": "1581450"
  },
  {
    "text": "why",
    "start": "1581450",
    "end": "1584450"
  },
  {
    "text": "why because it's not the same type as one in",
    "start": "1588490",
    "end": "1595060"
  },
  {
    "text": "this case is not a customer it's a",
    "start": "1595060",
    "end": "1600310"
  },
  {
    "text": "customer reference so this is the same time according to some obscure rules in",
    "start": "1600310",
    "end": "1609910"
  },
  {
    "text": "the standard what this means to initialize and perfect forwarding",
    "start": "1609910",
    "end": "1616210"
  },
  {
    "text": "Universal reference with an L value yeah this is this is a rule forget it well",
    "start": "1616210",
    "end": "1625020"
  },
  {
    "text": "the good thing is it works now that's it really work well first of all I want to",
    "start": "1625020",
    "end": "1634480"
  },
  {
    "text": "show you something about C++ 20 + C + has 20 things like this",
    "start": "1634480",
    "end": "1640330"
  },
  {
    "text": "with which our workaround to say this constructor should not be used if which",
    "start": "1640330",
    "end": "1646990"
  },
  {
    "text": "is some kind of a pre-conditioner requirement we want a program this will change in c++ 20 that you can simply",
    "start": "1646990",
    "end": "1654430"
  },
  {
    "text": "write here requires that s 1 is not the same type as a customer reference this",
    "start": "1654430",
    "end": "1662650"
  },
  {
    "text": "is a side-effect of concepts unfortunately we didn't get it in C++ 70",
    "start": "1662650",
    "end": "1669220"
  },
  {
    "text": "but ok so everything's off now well",
    "start": "1669220",
    "end": "1675930"
  },
  {
    "text": "let's derive a class from customer so",
    "start": "1675930",
    "end": "1682060"
  },
  {
    "text": "let's derive a class VIP for very special customers and let's true the",
    "start": "1682060",
    "end": "1689260"
  },
  {
    "text": "same so let's initialize a VIP with a string turtle that works let's",
    "start": "1689260",
    "end": "1695200"
  },
  {
    "text": "initialize the VIP with a copy constructor that works I skip the roof",
    "start": "1695200",
    "end": "1703120"
  },
  {
    "text": "and",
    "start": "1703120",
    "end": "1705450"
  },
  {
    "text": "where is it yeah yeah let's initialize a customer with a VIP which should work I",
    "start": "1709830",
    "end": "1719140"
  },
  {
    "text": "mean we have a derived class and by definition an inheritance means every",
    "start": "1719140",
    "end": "1724240"
  },
  {
    "text": "VIP is a customer so it can be used as a customer it could be copied to a",
    "start": "1724240",
    "end": "1729400"
  },
  {
    "text": "customer where we skip all the additional attributes of the object this",
    "start": "1729400",
    "end": "1735040"
  },
  {
    "text": "will be an error why we call this constructor and we well we try to call",
    "start": "1735040",
    "end": "1742750"
  },
  {
    "text": "the copy constructor but unfortunately this constructor is taken because it is",
    "start": "1742750",
    "end": "1748360"
  },
  {
    "text": "only ruled out disabled is the past argument is the customer reference and",
    "start": "1748360",
    "end": "1755040"
  },
  {
    "text": "what we pass is the VIP reference so we",
    "start": "1755040",
    "end": "1762760"
  },
  {
    "text": "should make it better we should say let's make it is convertible to a",
    "start": "1762760",
    "end": "1769540"
  },
  {
    "text": "customer and we get a different error",
    "start": "1769540",
    "end": "1778980"
  },
  {
    "text": "and that was moment I scratched my hat on Zach what the hell is going on here I",
    "start": "1779880",
    "end": "1790289"
  },
  {
    "text": "did everything correct I check here don't use this constructor if the past",
    "start": "1791700",
    "end": "1800470"
  },
  {
    "text": "argument is not convertible to a customer which by the way means we can",
    "start": "1800470",
    "end": "1806410"
  },
  {
    "text": "skip the reference because even a reference is convertible to a non",
    "start": "1806410",
    "end": "1811510"
  },
  {
    "text": "reference so that should work",
    "start": "1811510",
    "end": "1815700"
  },
  {
    "text": "who has an idea what the problem is here this is the error message I got well I",
    "start": "1818340",
    "end": "1827850"
  },
  {
    "text": "have highlighted it and used some new lines here yeah",
    "start": "1827850",
    "end": "1834500"
  },
  {
    "text": "so you mean it's a problem with Kahn's correctness",
    "start": "1836060",
    "end": "1841070"
  },
  {
    "text": "maybe you mean or not yeah okay so",
    "start": "1841220",
    "end": "1853020"
  },
  {
    "text": "you're proposing yeah there's a problem with constant and non Kahn's etc I tried",
    "start": "1853020",
    "end": "1858450"
  },
  {
    "text": "all these things out I thought about them all and you know what no that's not",
    "start": "1858450",
    "end": "1864540"
  },
  {
    "text": "the problem",
    "start": "1864540",
    "end": "1866870"
  },
  {
    "text": "do you know what the problem is we have undefined behavior why we have a logical",
    "start": "1871240",
    "end": "1882940"
  },
  {
    "text": "problem in our code for a couple of slides now the logical problem is when",
    "start": "1882940",
    "end": "1889840"
  },
  {
    "text": "we decide whether we can initialize the customer we check whether we can convert",
    "start": "1889840",
    "end": "1896049"
  },
  {
    "text": "the argument to a customer what do we need to decide whether we can convert",
    "start": "1896049",
    "end": "1901299"
  },
  {
    "text": "the argument to a customer the constructor which we are currently checking whether we enable or disable it",
    "start": "1901299",
    "end": "1908320"
  },
  {
    "text": "you get it so if we are lucky lucky this",
    "start": "1908320",
    "end": "1917679"
  },
  {
    "text": "does not compile and if we are not lucky this compiles but no guarantee that what",
    "start": "1917679",
    "end": "1924100"
  },
  {
    "text": "happens here so the moment we introduced",
    "start": "1924100",
    "end": "1929980"
  },
  {
    "text": "this is convertible trick we made a logical error because we were specifying",
    "start": "1929980",
    "end": "1936610"
  },
  {
    "text": "the visibility of the constructor according to the rules of which constructors are there which we justify",
    "start": "1936610",
    "end": "1946710"
  },
  {
    "text": "okay things like that happen and if it's any proof then I would say keep it simple so",
    "start": "1949020",
    "end": "1961899"
  },
  {
    "text": "it turned out if I come if I change the initialization so here a check is it not",
    "start": "1961899",
    "end": "1969820"
  },
  {
    "text": "convertible to a customer then I disable it if I turn this around is this",
    "start": "1969820",
    "end": "1975220"
  },
  {
    "text": "positively convertible to a string then I enable it so then it has defied",
    "start": "1975220",
    "end": "1983440"
  },
  {
    "text": "behavior and suddenly the back is away perfect we're done great and with C",
    "start": "1983440",
    "end": "1993789"
  },
  {
    "text": "passes 20 we would use requires here and that's a solution that works do we like",
    "start": "1993789",
    "end": "2000389"
  },
  {
    "text": "it do you like it so let's summarize a little bit what we",
    "start": "2000389",
    "end": "2008490"
  },
  {
    "text": "have see you can run into all these",
    "start": "2008490",
    "end": "2013620"
  },
  {
    "text": "problems you saw with perfect forwarding which would mean that we have the",
    "start": "2013620",
    "end": "2019440"
  },
  {
    "text": "perfect amount of allocations which means we have the perfect amount of",
    "start": "2019440",
    "end": "2024750"
  },
  {
    "text": "copies and moves if you like that and if you like to program like that do it but",
    "start": "2024750",
    "end": "2033390"
  },
  {
    "text": "don't give me your coat I will reject to maintain it because this is almost impossible for the",
    "start": "2033390",
    "end": "2040800"
  },
  {
    "text": "ordinary application programmer to maintain although we do that a lot in",
    "start": "2040800",
    "end": "2048120"
  },
  {
    "text": "the standard we do so let's talk about",
    "start": "2048120",
    "end": "2053760"
  },
  {
    "text": "the alternatives we have here are a few cases we have so we have a string and we",
    "start": "2053760",
    "end": "2059580"
  },
  {
    "text": "take our customer and we have different ways to initialization the first two cases should have two Malick's and the",
    "start": "2059580",
    "end": "2065610"
  },
  {
    "text": "last one had should have one malloc so if we use the classical way we learn",
    "start": "2065610",
    "end": "2070919"
  },
  {
    "text": "things taken constant reference then copy we have tenma locks or ten potential",
    "start": "2070920",
    "end": "2079470"
  },
  {
    "text": "Maalox depending on the size of the string if we do it that way that we say",
    "start": "2079470",
    "end": "2086520"
  },
  {
    "text": "we have a couple of strings taking by value and then move them in we have five",
    "start": "2086520",
    "end": "2093240"
  },
  {
    "text": "Maalox but some moves which we can make better if we overload for a couple of",
    "start": "2093240",
    "end": "2100320"
  },
  {
    "text": "different versions so that we have for each and every special case a specific",
    "start": "2100320",
    "end": "2105930"
  },
  {
    "text": "implementation and you have seen these 3/4 alternative use perfect forwarding",
    "start": "2105930",
    "end": "2110970"
  },
  {
    "text": "and disable is this in cases where you should disable this function you can",
    "start": "2110970",
    "end": "2116280"
  },
  {
    "text": "choose and you know what I prefer the thing in the middle because and move is",
    "start": "2116280",
    "end": "2123120"
  },
  {
    "text": "cheap and move is cheap now it's like passing an end well two ends well three",
    "start": "2123120",
    "end": "2130350"
  },
  {
    "text": "ends because what your pass of a string is its size its capacity and the pointer",
    "start": "2130350",
    "end": "2138120"
  },
  {
    "text": "to the memory if you care for three in",
    "start": "2138120",
    "end": "2143390"
  },
  {
    "text": "assignment then you better use assembler well no they are corner case son but",
    "start": "2143390",
    "end": "2151170"
  },
  {
    "text": "usually this is not worth it you might argue it's even not worth it to",
    "start": "2151170",
    "end": "2157340"
  },
  {
    "text": "optimizes in any case I stay with with what I stay don't get me wrong performance is not everything",
    "start": "2157340",
    "end": "2164210"
  },
  {
    "text": "maintainability is the most important thing but if you care for some performance and you have to choose",
    "start": "2164210",
    "end": "2171060"
  },
  {
    "text": "between two options and one of them is more or less the same way of typing but",
    "start": "2171060",
    "end": "2178710"
  },
  {
    "text": "safer or more performing I prefer the latter so therefore I prefer the one in",
    "start": "2178710",
    "end": "2183990"
  },
  {
    "text": "the middle which should be taught or teach every in every in each and every",
    "start": "2183990",
    "end": "2189240"
  },
  {
    "text": "C++ class however the problem is we claim that the ordinary programmer",
    "start": "2189240",
    "end": "2196230"
  },
  {
    "text": "ideally should not use program any move move is bad well this is this is an",
    "start": "2196230",
    "end": "2203670"
  },
  {
    "text": "example way it definitely should use move because this is the best and easiest way to do there were by the way",
    "start": "2203670",
    "end": "2212640"
  },
  {
    "text": "proposals to say this should be hidden behind something so there should be a",
    "start": "2212640",
    "end": "2218310"
  },
  {
    "text": "way to say take the argument and forward it as it is with move or not and do this",
    "start": "2218310",
    "end": "2224490"
  },
  {
    "text": "technique internally without seeing it literally in the code let's say take",
    "start": "2224490",
    "end": "2230100"
  },
  {
    "text": "this argument to initialize remember what we originally had in C++ but now",
    "start": "2230100",
    "end": "2236700"
  },
  {
    "text": "according to the evolution we have to do something special like using move here to make it have the all these proposals",
    "start": "2236700",
    "end": "2244560"
  },
  {
    "text": "were rejected okay don't forget if you",
    "start": "2244560",
    "end": "2251610"
  },
  {
    "text": "want to initialize with an equal sign and a single argument do you need still",
    "start": "2251610",
    "end": "2256710"
  },
  {
    "text": "the overload for Khan's character star in all three cases but that's a thing",
    "start": "2256710",
    "end": "2262140"
  },
  {
    "text": "independent from C++ it from from modern C++ so from move semantics",
    "start": "2262140",
    "end": "2270859"
  },
  {
    "text": "when I gave this talk before one question was do I solve this by using",
    "start": "2271309",
    "end": "2277219"
  },
  {
    "text": "string view because in C++ 17 we have now string view which some people claim",
    "start": "2277219",
    "end": "2283009"
  },
  {
    "text": "it's a better string it's sometimes better string but definitely more",
    "start": "2283009",
    "end": "2288519"
  },
  {
    "text": "dangerous string and you should know what you do but in this case you can use",
    "start": "2288519",
    "end": "2294380"
  },
  {
    "text": "it you could say well let's take a string view in the constructor everything converts easily to a string",
    "start": "2294380",
    "end": "2301819"
  },
  {
    "text": "view it's a very cheap conversion an SE D string converts cheaply without",
    "start": "2301819",
    "end": "2306920"
  },
  {
    "text": "allocation to a string view a string literal converts to a string without their location etc so isn't this the",
    "start": "2306920",
    "end": "2314989"
  },
  {
    "text": "better approach well the answer is no it's not you save Maalox in a couple of",
    "start": "2314989",
    "end": "2323180"
  },
  {
    "text": "cases but in one case you have you introduced a problem if you get",
    "start": "2323180",
    "end": "2328880"
  },
  {
    "text": "something movable so if you call a constructor with an temporary STD string",
    "start": "2328880",
    "end": "2335809"
  },
  {
    "text": "guess for example here in the second part of the example on the right we have a function returning a temporary string",
    "start": "2335809",
    "end": "2342890"
  },
  {
    "text": "and we use this to initialize our customer then the problem is this string",
    "start": "2342890",
    "end": "2349729"
  },
  {
    "text": "will be converted to a string view and the string view build will then be",
    "start": "2349729",
    "end": "2354829"
  },
  {
    "text": "converted to a string which allocates memory instead of stealing our memory from the original string passed here as",
    "start": "2354829",
    "end": "2361849"
  },
  {
    "text": "an argument so string view is not a solution here string view is never a solution if you",
    "start": "2361849",
    "end": "2368660"
  },
  {
    "text": "have at the end of your call chain the need for string don't you string you in",
    "start": "2368660",
    "end": "2376099"
  },
  {
    "text": "call sequences where at the end you need a string okay good so this is what we",
    "start": "2376099",
    "end": "2389449"
  },
  {
    "text": "heard only apply to construct us know what you've seen here is a consequence",
    "start": "2389449",
    "end": "2396949"
  },
  {
    "text": "that if I want to program a class a trivial constructor for a trivial class",
    "start": "2396949",
    "end": "2403040"
  },
  {
    "text": "having two strings and the same applies if the members are vectors or something else whatever whenever you have some",
    "start": "2403040",
    "end": "2409670"
  },
  {
    "text": "member that allocates something or does something more complicated where move is worth the effort then the constructor",
    "start": "2409670",
    "end": "2416840"
  },
  {
    "text": "takes the argument and initializes the member and the best approach is as soon",
    "start": "2416840",
    "end": "2422630"
  },
  {
    "text": "as possible creates a finer type and then only move move move move move",
    "start": "2422630",
    "end": "2429070"
  },
  {
    "text": "that's a general lesson and the point is that first and last are sinks so we get",
    "start": "2429070",
    "end": "2435740"
  },
  {
    "text": "an value in which we take to which we steal to initialize something we are",
    "start": "2435740",
    "end": "2441440"
  },
  {
    "text": "sink of the value which is passed and in the end that you have in other cases too",
    "start": "2441440",
    "end": "2447650"
  },
  {
    "text": "well here see possible constants are constructor but if we have a set an",
    "start": "2447650",
    "end": "2453170"
  },
  {
    "text": "together the same rules apply so if we have a set on together in your class",
    "start": "2453170",
    "end": "2459470"
  },
  {
    "text": "what you should do now is take the value by very the argument by value the",
    "start": "2459470",
    "end": "2465620"
  },
  {
    "text": "parameter by value and move it into your member because otherwise you have the",
    "start": "2465620",
    "end": "2471380"
  },
  {
    "text": "same problem that you have unnecessary additional Alex again unfortunately this",
    "start": "2471380",
    "end": "2478160"
  },
  {
    "text": "is not taught anywhere as far as I know in stock as it should so the general",
    "start": "2478160",
    "end": "2487280"
  },
  {
    "text": "rule I introduced you in 45 minutes if is if you have parameters for things so",
    "start": "2487280",
    "end": "2493070"
  },
  {
    "text": "you give an object the value you present",
    "start": "2493070",
    "end": "2498200"
  },
  {
    "text": "it you handed over the value for some weight for some usage don't pass by",
    "start": "2498200",
    "end": "2505010"
  },
  {
    "text": "reference pass it by value and move it to the final location that's it",
    "start": "2505010",
    "end": "2514630"
  },
  {
    "text": "this example shows C++ is tricky pass by value is becoming better and better with",
    "start": "2514660",
    "end": "2522620"
  },
  {
    "text": "move semantics and this is the advertisement three seconds",
    "start": "2522620",
    "end": "2530920"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "2531190",
    "end": "2543449"
  }
]