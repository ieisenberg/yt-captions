[
  {
    "text": "so welcome to the last session of today to the talk about type Eurasia the",
    "start": "7859",
    "end": "13320"
  },
  {
    "text": "implementation details so I'm close eagleberger what I'm doing is I basically by now do",
    "start": "13320",
    "end": "20699"
  },
  {
    "text": "trainings for living C plus training C plus this consultancy another mostly do is I talk about topics like software",
    "start": "20699",
    "end": "27779"
  },
  {
    "text": "designed um also a little bit of architecture mostly because nobody else is doing it",
    "start": "27779",
    "end": "33600"
  },
  {
    "text": "and so last year LCP con 21 I've actually talked about type Erasure and",
    "start": "33600",
    "end": "38640"
  },
  {
    "text": "I've talked about type ratio as a design pattern I've shown people why this is actually a superior way of breaking",
    "start": "38640",
    "end": "44399"
  },
  {
    "text": "dependencies superior to the usual approach of using inheritance hierarchies",
    "start": "44399",
    "end": "50039"
  },
  {
    "text": "it was a hopefully good talk now this one is kind of a successor because if",
    "start": "50039",
    "end": "56460"
  },
  {
    "text": "you talk about design you cannot so much talk about the implementation details there's quite a lot that you can do in",
    "start": "56460",
    "end": "62460"
  },
  {
    "text": "particular in context of optimizing performance so something that last time",
    "start": "62460",
    "end": "67619"
  },
  {
    "text": "I totally ignored because 60 Minutes are actually a very very short time frame um this time I definitely go much more",
    "start": "67619",
    "end": "73619"
  },
  {
    "text": "into detail how you actually can gain performance by using this technique however do not worry you're not required",
    "start": "73619",
    "end": "80220"
  },
  {
    "text": "to know this other talk I will go into the details of what is Type ration how to do the basic things again because we",
    "start": "80220",
    "end": "86400"
  },
  {
    "text": "have to see these implementation details anyway so I will first talk a little bit about why to use type Erasure then we'll see",
    "start": "86400",
    "end": "94259"
  },
  {
    "text": "this basic type version implementation that I show last time also I already go a little more into detail because",
    "start": "94259",
    "end": "99780"
  },
  {
    "text": "there's a lot of choices and I'll start talking about what you can do to actually Speed Up Performance and of course this is important and",
    "start": "99780",
    "end": "107040"
  },
  {
    "text": "pretty interesting because C plus plus after all is about uh performance",
    "start": "107040",
    "end": "112680"
  },
  {
    "text": "all right and uh there's a second technique type ratio with manual virtual dispatch",
    "start": "112680",
    "end": "118259"
  },
  {
    "text": "so why use type Erasure in the first place so let's assume that we have a function",
    "start": "118259",
    "end": "124259"
  },
  {
    "text": "f here at the bottom and this function f is supposed to be given a command something that can be called",
    "start": "124259",
    "end": "131640"
  },
  {
    "text": "this can be something like a print command this can be something like a Search Command an execute command",
    "start": "131640",
    "end": "138780"
  },
  {
    "text": "something now of course this is similar to what we do in the stl2 and the STL the",
    "start": "138780",
    "end": "144660"
  },
  {
    "text": "algorithms take something that can be just called but of course you know that in the sdl everything is solved by",
    "start": "144660",
    "end": "150239"
  },
  {
    "text": "templates this is exactly what they do not want to have in this case I do not want to have",
    "start": "150239",
    "end": "155819"
  },
  {
    "text": "a function template I do not want to have everything in the header file I still want to be able to move my",
    "start": "155819",
    "end": "161879"
  },
  {
    "text": "implementation details to source file hide those details and so let's agree that we definitely want to be in the",
    "start": "161879",
    "end": "168120"
  },
  {
    "text": "realm of dynamic polymorphism if you do want to use templates if you want to use static polymorphism then",
    "start": "168120",
    "end": "175140"
  },
  {
    "text": "basically this is a totally different talk we want to stick to Dynamic polymphism and so we could have a base",
    "start": "175140",
    "end": "182819"
  },
  {
    "text": "class a command based class many derived classes and provide any of these Drive",
    "start": "182819",
    "end": "188160"
  },
  {
    "text": "classes anybody could write new classes anybody could therefore customize what is executed in F",
    "start": "188160",
    "end": "194819"
  },
  {
    "text": "would you do that today no definitely not what you would reach for",
    "start": "194819",
    "end": "200459"
  },
  {
    "text": "pretty much right away is stood function so that function is so much easier on so",
    "start": "200459",
    "end": "207360"
  },
  {
    "text": "many levels first there is no inheritance hierarchy so it's way easier to actually write this",
    "start": "207360",
    "end": "213780"
  },
  {
    "text": "stuff it's non-intrusive so you don't have to inherit from something you have a lot of design",
    "start": "213780",
    "end": "220200"
  },
  {
    "text": "choices because of that there is less dependencies that's the design aspect you can just write what",
    "start": "220200",
    "end": "227159"
  },
  {
    "text": "you want in a specific form there's less pointers involved there is no uh dynamic",
    "start": "227159",
    "end": "234000"
  },
  {
    "text": "memory allocation happening you don't have to do a make unique or something like that you don't have to manage lifetime",
    "start": "234000",
    "end": "241799"
  },
  {
    "text": "and as a purely value semantics based implementation which is exactly what uh",
    "start": "241799",
    "end": "247019"
  },
  {
    "text": "yeah you shouldn't say what modern C plus is about but the huge part of what modern C plus plus represents",
    "start": "247019",
    "end": "253920"
  },
  {
    "text": "and all together you realize you have less code to write and there's a potential for better",
    "start": "253920",
    "end": "260400"
  },
  {
    "text": "performance also so it's in other words just much cleaner code",
    "start": "260400",
    "end": "266840"
  },
  {
    "text": "this is now type Erasure standard functions implemented by means of this technique by means of type Erasure",
    "start": "268139",
    "end": "274979"
  },
  {
    "text": "and I do not want to create the illusion that standard function is the only example here so let's generalize this",
    "start": "274979",
    "end": "281040"
  },
  {
    "text": "let's say um we're going to have a function it takes some kind of shape and this kind of shape is for instance a per speed",
    "start": "281040",
    "end": "288360"
  },
  {
    "text": "drawn serialized or whatever you want to do with this shape of course we could Implement many many",
    "start": "288360",
    "end": "293580"
  },
  {
    "text": "shapes and pass them to this function f which does something to a shape in general",
    "start": "293580",
    "end": "299340"
  },
  {
    "text": "would we do this today exactly no again for the same reasons",
    "start": "299340",
    "end": "305520"
  },
  {
    "text": "would write a type Erasure wrapper call it shape which just takes any circle square or",
    "start": "305520",
    "end": "312720"
  },
  {
    "text": "triangle again the advantages are the same there's no inheritance hierarchies left it's non-intrusive so you can write a",
    "start": "312720",
    "end": "320699"
  },
  {
    "text": "circle square triangle without having to worry about any Base Class the first there's less dependencies",
    "start": "320699",
    "end": "326220"
  },
  {
    "text": "there's no pointers on your side anymore there's no manual Dynamic allocation no",
    "start": "326220",
    "end": "331979"
  },
  {
    "text": "lifetime management by means of any kind of smart pointer again it's a value",
    "start": "331979",
    "end": "337320"
  },
  {
    "text": "value semantics let's go to write and potentially if just improved your performance",
    "start": "337320",
    "end": "343320"
  },
  {
    "text": "so that's exactly what we want to do we want to write this shape this wrapper that allows us to deal with any kind of",
    "start": "343320",
    "end": "351120"
  },
  {
    "text": "shape anything that has a certain set of properties and um",
    "start": "351120",
    "end": "357240"
  },
  {
    "text": "want it to be faster so how do we do that however inheritance is indeed rarely the",
    "start": "357240",
    "end": "364139"
  },
  {
    "text": "answer this is a quote from the pragmatic programmers from enter hunt David Thomas who",
    "start": "364139",
    "end": "369300"
  },
  {
    "text": "um actually didn't wrote this about C plus plus they wrote this about software design and software development in",
    "start": "369300",
    "end": "375780"
  },
  {
    "text": "general and I think that truly meant that and I'm trying to show you that perhaps type Erasure is a better answer not",
    "start": "375780",
    "end": "383460"
  },
  {
    "text": "always definitely not always every tool has its disadvantages but perhaps this is a little more what they had in mind",
    "start": "383460",
    "end": "390660"
  },
  {
    "text": "so let's take a basic look at the basic implementation but first what I'm showing you is not a",
    "start": "390660",
    "end": "397800"
  },
  {
    "text": "void pointer it's not a point to the base and it's not a stood variant this is all things",
    "start": "397800",
    "end": "403680"
  },
  {
    "text": "that some people have claimed to be type Erasure where they have used this term for now what I've shown you is that type",
    "start": "403680",
    "end": "410220"
  },
  {
    "text": "Erasure is a wrapper essentially with a templated Constructor plus a completely",
    "start": "410220",
    "end": "416039"
  },
  {
    "text": "non-virtual interface and last but not least a clever combination of a couple of design",
    "start": "416039",
    "end": "421259"
  },
  {
    "text": "patterns that enable us to do all of these things all of these things in the wrapper",
    "start": "421259",
    "end": "426900"
  },
  {
    "text": "all right and our problem our toy problem is drawing shapes",
    "start": "426900",
    "end": "432539"
  },
  {
    "text": "and I know that's not exactly the most fun example it's not exactly",
    "start": "432539",
    "end": "438300"
  },
  {
    "text": "um rocket science but to quote my colleague from the Munich C plus user",
    "start": "438300",
    "end": "443880"
  },
  {
    "text": "group I'm tired of this example but I don't know any better one so it's a",
    "start": "443880",
    "end": "449099"
  },
  {
    "text": "super simple example but because I'm showing you something that you might have seen before I believe it's a",
    "start": "449099",
    "end": "454440"
  },
  {
    "text": "reasonable example it's so simple that you can focus on the implementation details and after all that's the point",
    "start": "454440",
    "end": "461580"
  },
  {
    "text": "so let's start with writing um circles and squares here the circle",
    "start": "461580",
    "end": "467580"
  },
  {
    "text": "class is a class that in the Constructor may take all the things that make a circle like a radius",
    "start": "467580",
    "end": "474060"
  },
  {
    "text": "a couple of other things it may have a couple of Getters for the things that make a circle like the",
    "start": "474060",
    "end": "480240"
  },
  {
    "text": "radius Center Point perhaps even a rotation and of course there is a couple of data members so",
    "start": "480240",
    "end": "486840"
  },
  {
    "text": "it's a circle most importantly okay there's of course also Square that's the circle would be",
    "start": "486840",
    "end": "493139"
  },
  {
    "text": "so alone the square is pretty much the same thing it just expresses all the properties of a square",
    "start": "493139",
    "end": "499259"
  },
  {
    "text": "note we don't need any Base Class",
    "start": "499259",
    "end": "504539"
  },
  {
    "text": "this is just the classes that we've write that anybody can write that believe they'll be able to add to",
    "start": "504539",
    "end": "510599"
  },
  {
    "text": "squeeze into this type Erasure wrapper and they also don't have to know about each other this is totally this this",
    "start": "510599",
    "end": "516779"
  },
  {
    "text": "young types totally unconnected there is no dependencies whatsoever and also most",
    "start": "516779",
    "end": "521880"
  },
  {
    "text": "interestingly these types don't know about drawing they don't know about serialization I don't know about any",
    "start": "521880",
    "end": "527820"
  },
  {
    "text": "potentially highly coupling operation they're just totally unconnected basic",
    "start": "527820",
    "end": "533279"
  },
  {
    "text": "geometric Primitives so then how do I connect them how do I how do I write this wrapper well I start",
    "start": "533279",
    "end": "541920"
  },
  {
    "text": "with a separate class hierarchy I start with a shape concept Base Class",
    "start": "541920",
    "end": "549420"
  },
  {
    "text": "and truly it is a base class it comes with a virtual instructor",
    "start": "549420",
    "end": "554760"
  },
  {
    "text": "any space class is inherited by a class template which I call shape model ship",
    "start": "554760",
    "end": "561360"
  },
  {
    "text": "concept and shape model by the way are pretty common names in this context can of course choose any other name so shape",
    "start": "561360",
    "end": "567720"
  },
  {
    "text": "model is a shape concept what is a class template also and as a class template this now takes",
    "start": "567720",
    "end": "574740"
  },
  {
    "text": "any kind of shape this can be circled this can be squared this can be triangles can be any shape shape that",
    "start": "574740",
    "end": "580920"
  },
  {
    "text": "you can imagine and it stores one of these so I now have a data member of well shape t",
    "start": "580920",
    "end": "588779"
  },
  {
    "text": "of course I also have the according Constructor in order to be able to take",
    "start": "588779",
    "end": "594000"
  },
  {
    "text": "one of those now I want shapes to be drawable I want shapes to be serializable or whatever",
    "start": "594000",
    "end": "600300"
  },
  {
    "text": "you can imagine this is now food in this or simply operations that is Base Class formulates like any",
    "start": "600300",
    "end": "607500"
  },
  {
    "text": "other base class so I have a draw a two draw function if I do serialized function I would of course take a couple",
    "start": "607500",
    "end": "613500"
  },
  {
    "text": "of arguments uh whatever you need the pure virtual so obviously the cheap",
    "start": "613500",
    "end": "621360"
  },
  {
    "text": "model has to implement and a shape model does implement these two functions by doing the thing that",
    "start": "621360",
    "end": "627899"
  },
  {
    "text": "you want to do on a shape so I serialize this this object I draw this object",
    "start": "627899",
    "end": "634500"
  },
  {
    "text": "whatever needs to be done this is the place where we now actually implement the logic",
    "start": "634500",
    "end": "640920"
  },
  {
    "text": "most importantly however we do not want to have draw a serialize within circles and squares I want this to be separated",
    "start": "640920",
    "end": "647459"
  },
  {
    "text": "after all this is um one of the primary um guidelines in software development",
    "start": "647459",
    "end": "653339"
  },
  {
    "text": "separation of concerns the single responsibility principle we do not want to have the dependencies within the",
    "start": "653339",
    "end": "659579"
  },
  {
    "text": "object so for demonstration purposes I use a free function this is um quite reasonable",
    "start": "659579",
    "end": "667320"
  },
  {
    "text": "no so as I said we Define these affordances separately",
    "start": "667320",
    "end": "673800"
  },
  {
    "text": "note that do the do is because we have complete freedom and it doesn't have to be the same but of course in this",
    "start": "673800",
    "end": "679980"
  },
  {
    "text": "context I also avoid name collisions if I have a draw function inside uh the",
    "start": "679980",
    "end": "685140"
  },
  {
    "text": "call from inside then this cannot be called Draw also now this",
    "start": "685140",
    "end": "690420"
  },
  {
    "text": "would definitely mess up name lookup so I call it Dutra you don't have to worry about this later also believe me this",
    "start": "690420",
    "end": "697019"
  },
  {
    "text": "doesn't mess up any interface it's it will be an internal implementation detail all right",
    "start": "697019",
    "end": "703860"
  },
  {
    "text": "this idea to have a separate totally disjoint um inheritance",
    "start": "703860",
    "end": "711240"
  },
  {
    "text": "hierarchy this is actually the sign pattern this is called the external polymphism design pattern a design pattern will suppose was proposed in",
    "start": "711240",
    "end": "718560"
  },
  {
    "text": "1996 in this particular paper and the intent is to allow C plus",
    "start": "718560",
    "end": "724200"
  },
  {
    "text": "classes unrelated by inheritance and or having no virtual methods to be treated polymorphically",
    "start": "724200",
    "end": "731519"
  },
  {
    "text": "this is a pretty beautiful design pattern because you can't treat any type really stressing any type",
    "start": "731519",
    "end": "737519"
  },
  {
    "text": "polymorphically the type doesn't need to have virtual functions on its own that's the beauty of of this particular design",
    "start": "737519",
    "end": "744480"
  },
  {
    "text": "pattern which will make use of all right so the external policies and",
    "start": "744480",
    "end": "749940"
  },
  {
    "text": "design pattern allows any object that we treated polymorphically extracts the implementation details",
    "start": "749940",
    "end": "756180"
  },
  {
    "text": "that's the single responsibility principle and it removes dependencies to all operations affordances because it",
    "start": "756180",
    "end": "762660"
  },
  {
    "text": "separates this polymorphic Behavior as but not least you can now write your",
    "start": "762660",
    "end": "768060"
  },
  {
    "text": "types circles squares Etc totally unrelated this is",
    "start": "768060",
    "end": "773639"
  },
  {
    "text": "um the easiest way to write new stuff this fulfills this open close principle",
    "start": "773639",
    "end": "779880"
  },
  {
    "text": "okay but back to the code this one works I now provide the affordances I write",
    "start": "779880",
    "end": "787320"
  },
  {
    "text": "the three functions that I now require I write serialize and draw for Circle and serialize and draw for square",
    "start": "787320",
    "end": "793320"
  },
  {
    "text": "in any form so um this is the functions that I called from",
    "start": "793320",
    "end": "799260"
  },
  {
    "text": "above which you see it up here this is exactly the function I call here but please do not feel that this must be",
    "start": "799260",
    "end": "805019"
  },
  {
    "text": "part of this hierarchy now this is elsewhere separated and there can be many forms we can have one draw function",
    "start": "805019",
    "end": "812100"
  },
  {
    "text": "uses opengill one that uses metal one that uses Vulcan this is indeed where we",
    "start": "812100",
    "end": "817740"
  },
  {
    "text": "um split up the different possible implementations all right then is one function that goes",
    "start": "817740",
    "end": "823860"
  },
  {
    "text": "over all um possible shapes shape Concepts remember that's the base class that",
    "start": "823860",
    "end": "830579"
  },
  {
    "text": "contains all kinds of shape I call the according draw function and that will trigger either of course draw",
    "start": "830579",
    "end": "837360"
  },
  {
    "text": "a circle or draw a square the only thing left is to actually set something up that works",
    "start": "837360",
    "end": "843300"
  },
  {
    "text": "so um shorten the type a little bit of a vector of unique pointers of shape concept and I'm creating the encoding",
    "start": "843300",
    "end": "850740"
  },
  {
    "text": "shapes so a shape model of circle is created pass a radius of 2.0 for instance this",
    "start": "850740",
    "end": "857459"
  },
  {
    "text": "creates the circle accordingly and yeah then I have the shape model stored",
    "start": "857459",
    "end": "863519"
  },
  {
    "text": "as a shape concept and can polymorphically use circles and squares although they do not have a base class",
    "start": "863519",
    "end": "870360"
  },
  {
    "text": "now I really provided this uh this inheritance hierarchy separately externally external polymorphism",
    "start": "870360",
    "end": "878339"
  },
  {
    "text": "all right but I know that you're not totally amazed right now because this is not beautiful yet there's a lot of",
    "start": "878339",
    "end": "884880"
  },
  {
    "text": "manual allocations there is a lot of pointers still floating around sure it's making so unique pointers",
    "start": "884880",
    "end": "892199"
  },
  {
    "text": "um this is not quite as bad but still it doesn't look nice it looks a little convoluted",
    "start": "892199",
    "end": "897600"
  },
  {
    "text": "definitely clean this up and turn this into a value this hierarchy this external hierarchy",
    "start": "897600",
    "end": "903839"
  },
  {
    "text": "is simply put into a class and this will be our shape wrapper and",
    "start": "903839",
    "end": "909959"
  },
  {
    "text": "that's the first thing you do in any type Erasure wrapper you are kind of encapsulate this external hierarchy",
    "start": "909959",
    "end": "917160"
  },
  {
    "text": "now this class the shape class is given a Constructor and that's a absolutely necessary a part",
    "start": "917160",
    "end": "925139"
  },
  {
    "text": "piece of a type Erasure wrapper you get a Constructor that actually deduces some",
    "start": "925139",
    "end": "930360"
  },
  {
    "text": "shape type so it's a it's a function template this Constructor takes any shape takes a circle square triangle",
    "start": "930360",
    "end": "937980"
  },
  {
    "text": "whatever you have in mind and directly creates the according shape",
    "start": "937980",
    "end": "943079"
  },
  {
    "text": "model you don't have to worry about this anymore it's an implementation detail anyway and it fills this into a unique",
    "start": "943079",
    "end": "950519"
  },
  {
    "text": "point of shape concept but now inside the class",
    "start": "950519",
    "end": "956000"
  },
  {
    "text": "and the name pimple might give it away that's not what we call that bridge",
    "start": "956339",
    "end": "961860"
  },
  {
    "text": "design pattern so we have many many implementations many shape models for every possible",
    "start": "961860",
    "end": "968160"
  },
  {
    "text": "type that you know feed into this you have a new shape model and all of these",
    "start": "968160",
    "end": "973380"
  },
  {
    "text": "models cannot be stored in terms of this pointer and so if I put a circle inside",
    "start": "973380",
    "end": "978480"
  },
  {
    "text": "I store a pointer to the space class and have effectively erased the type",
    "start": "978480",
    "end": "985019"
  },
  {
    "text": "after this I after the Constructor I have no idea anymore with a storage circle square triangle whatever it's",
    "start": "985019",
    "end": "992760"
  },
  {
    "text": "gone the information virtually is gone type Erasure hence the name",
    "start": "992760",
    "end": "999480"
  },
  {
    "text": "all right however uh of course I now want to",
    "start": "999480",
    "end": "1004519"
  },
  {
    "text": "um to use this the type is not entirely gone I have the according virtual",
    "start": "1004519",
    "end": "1010339"
  },
  {
    "text": "functions in my base class and so I simply provide the functions that trigger this polymorphic Behavior so",
    "start": "1010339",
    "end": "1017000"
  },
  {
    "text": "this serialized function for instance triggers the do serialize function on the pimple the straw triggers the Dew",
    "start": "1017000",
    "end": "1023000"
  },
  {
    "text": "draw on the pimple now on the shape concept order not the French skewerto",
    "start": "1023000",
    "end": "1029178"
  },
  {
    "text": "this is actually free functions we call this a hidden front so it is a",
    "start": "1029179",
    "end": "1034280"
  },
  {
    "text": "function that will be injected into the surrounding namespace and it will be callable as a free function but it is a",
    "start": "1034280",
    "end": "1041000"
  },
  {
    "text": "friend after all therefore uh it's perfectly allowed to use the private",
    "start": "1041000",
    "end": "1047660"
  },
  {
    "text": "data member pimple and one of the huge bonuses of hadn't having",
    "start": "1047660",
    "end": "1053179"
  },
  {
    "text": "this hidden friend these two functions actually do not really add to the overload set of functions called Draw",
    "start": "1053179",
    "end": "1059480"
  },
  {
    "text": "and serialize only if you do have a shape and only in that case these two functions are considered",
    "start": "1059480",
    "end": "1065179"
  },
  {
    "text": "and so this may actually also improve compile time a little bit now they are used exactly the point where we need",
    "start": "1065179",
    "end": "1070280"
  },
  {
    "text": "them all right now this is actually already a type Erasure",
    "start": "1070280",
    "end": "1076760"
  },
  {
    "text": "wrapper this works we could go with this but right now it is move only our data",
    "start": "1076760",
    "end": "1082340"
  },
  {
    "text": "member is a unique pointer and so at this point what we could do is we could move shapes around if this is what you",
    "start": "1082340",
    "end": "1088760"
  },
  {
    "text": "need if this is all you need then stop there don't do anything else because this is the simplest thing that it could",
    "start": "1088760",
    "end": "1095179"
  },
  {
    "text": "possibly do and hopefully you realize that so far this was about 20 lines of code in this wrapper 25 perhaps",
    "start": "1095179",
    "end": "1102559"
  },
  {
    "text": "it's not a lot it's actually quite quite a little but very often like for instance in",
    "start": "1102559",
    "end": "1108919"
  },
  {
    "text": "stood function we want to be able to copy that thing and so we have to deal with the copy operations in this case",
    "start": "1108919",
    "end": "1114620"
  },
  {
    "text": "because all we have is a unit pointer so how do we Implement copy",
    "start": "1114620",
    "end": "1120799"
  },
  {
    "text": "which admittedly is a little bit of a challenge because we have is a pointer",
    "start": "1120799",
    "end": "1126080"
  },
  {
    "text": "to base we actually don't know what we have stored",
    "start": "1126080",
    "end": "1131720"
  },
  {
    "text": "the type is gone so what we need is a classic solution a",
    "start": "1131720",
    "end": "1137059"
  },
  {
    "text": "classic solution that is introducing a clone function a clone function something that you",
    "start": "1137059",
    "end": "1143539"
  },
  {
    "text": "might recognize as yet another design pattern called prototype The Base Class the nested Base Class",
    "start": "1143539",
    "end": "1150080"
  },
  {
    "text": "shape concept introduces a clone function pure virtual I have no idea what I can do in a base class but the",
    "start": "1150080",
    "end": "1156620"
  },
  {
    "text": "derived class implements this clone function by creating a copy of itself",
    "start": "1156620",
    "end": "1162820"
  },
  {
    "text": "for that purpose I actually use the copy Constructor I use a pass",
    "start": "1162820",
    "end": "1170059"
  },
  {
    "text": "asterisk disk which is something I seriously recommend this will always be correct regardless",
    "start": "1170059",
    "end": "1177200"
  },
  {
    "text": "of however this evolves how the code changes using the copy construct will always do the right thing of course",
    "start": "1177200",
    "end": "1183080"
  },
  {
    "text": "given that the copy Constructor is correct but it's generated by the compiler this is great so",
    "start": "1183080",
    "end": "1188660"
  },
  {
    "text": "um this is actually the easiest and again most correct thing that it can do so now because of this coin function",
    "start": "1188660",
    "end": "1195020"
  },
  {
    "text": "you're actually able to get a copy this is virtual copying indeed so we can Implement our copy operations by simply",
    "start": "1195020",
    "end": "1202280"
  },
  {
    "text": "cloning so I Implement I initialize my pimple by simply asking the other pimple to clone",
    "start": "1202280",
    "end": "1209360"
  },
  {
    "text": "itself please give me a copy and then have an exact copy without even",
    "start": "1209360",
    "end": "1214400"
  },
  {
    "text": "knowing what I actually have as I said could be a circle could be a square I don't care I get an exact copy and I'm",
    "start": "1214400",
    "end": "1220520"
  },
  {
    "text": "happy with this and a copy assignment operator uh I simply Implement by the common copy",
    "start": "1220520",
    "end": "1226340"
  },
  {
    "text": "and swap idiom which I know some people are not super happy about it's not the",
    "start": "1226340",
    "end": "1232160"
  },
  {
    "text": "most efficient thing to do but in this case there is no other thing that we can do after all we have no real information",
    "start": "1232160",
    "end": "1239419"
  },
  {
    "text": "on what it is so we can only create a copy but at least for those who don't like that you can reduce this to single",
    "start": "1239419",
    "end": "1246020"
  },
  {
    "text": "line if you want to it's still the same thing though all right now the move operations",
    "start": "1246020",
    "end": "1252500"
  },
  {
    "text": "because I have now implemented copy operations moves actually gone ruler",
    "start": "1252500",
    "end": "1258200"
  },
  {
    "text": "five so I now also have to deal with the move operations but interestingly this is not just a little thing there's a lot of choices",
    "start": "1258200",
    "end": "1266000"
  },
  {
    "text": "so the move operations can either be just defaulted",
    "start": "1266000",
    "end": "1271220"
  },
  {
    "text": "this is easy so we can now move again however the consequence is of course",
    "start": "1271220",
    "end": "1277580"
  },
  {
    "text": "that if you move from a shape the shape now contains a null pointer an empty",
    "start": "1277580",
    "end": "1282740"
  },
  {
    "text": "unique pointer and it means that if you move from such a value after all we can copy this with",
    "start": "1282740",
    "end": "1289280"
  },
  {
    "text": "we perceive it as a value and suddenly this is something that results in a in a crash",
    "start": "1289280",
    "end": "1296240"
  },
  {
    "text": "es is okay perhaps this is what you want and actually this is something that",
    "start": "1296240",
    "end": "1301280"
  },
  {
    "text": "um um may be perfectly fine but if this is fine then probably also you want to add",
    "start": "1301280",
    "end": "1308059"
  },
  {
    "text": "a default Constructor saying okay there is a default this default is that it's",
    "start": "1308059",
    "end": "1313340"
  },
  {
    "text": "empty and a good example is for instance stood function you can create a defaults that",
    "start": "1313340",
    "end": "1318860"
  },
  {
    "text": "function but the stood function is empty and if you try to call it in an empty",
    "start": "1318860",
    "end": "1323900"
  },
  {
    "text": "form you will get an exception okay this would not be as beautiful you would get a crash but still perhaps this is",
    "start": "1323900",
    "end": "1330500"
  },
  {
    "text": "semantically what you have in mind option two however is that you do not",
    "start": "1330500",
    "end": "1336200"
  },
  {
    "text": "Define these two move operations you do not touch them at all which means these",
    "start": "1336200",
    "end": "1343220"
  },
  {
    "text": "operations are totally gone you do not have move and the natural fallback is copy",
    "start": "1343220",
    "end": "1349880"
  },
  {
    "text": "so if all the shapes should always contain a value if there is no null shape for instance then this is the",
    "start": "1349880",
    "end": "1356720"
  },
  {
    "text": "right thing to do do not delete them because then move would be an operation that triggers a",
    "start": "1356720",
    "end": "1362360"
  },
  {
    "text": "compilation error you want the copy operation instead so basically replace the move",
    "start": "1362360",
    "end": "1368480"
  },
  {
    "text": "this is okay but note as a consequence the move operations are certainly not no",
    "start": "1368480",
    "end": "1374480"
  },
  {
    "text": "except anymore so if you try to move you will get a copy which right now doesn't allocation and this allocation might",
    "start": "1374480",
    "end": "1380299"
  },
  {
    "text": "fail and therefore you would get a an exception which might not exactly be",
    "start": "1380299",
    "end": "1386419"
  },
  {
    "text": "what what people expect so this is the two extreme choices",
    "start": "1386419",
    "end": "1391940"
  },
  {
    "text": "there's something in between that you can use perhaps also to optimize performance a little bit you could just",
    "start": "1391940",
    "end": "1397460"
  },
  {
    "text": "forfeit the uh move Constructor just say okay every type Erasure weapon needs a",
    "start": "1397460",
    "end": "1404840"
  },
  {
    "text": "valid value and so I have to create a copy in the Constructor but assignment could",
    "start": "1404840",
    "end": "1411860"
  },
  {
    "text": "actually be implemented by simply swapping um the implementation details by swapping the unit pointers if you do",
    "start": "1411860",
    "end": "1418760"
  },
  {
    "text": "this then at least the move assignment operator is now accept and fairly cheap and fairly simple",
    "start": "1418760",
    "end": "1425600"
  },
  {
    "text": "without air creating any other copy probably this is the um it's a nice compromise",
    "start": "1425600",
    "end": "1431659"
  },
  {
    "text": "but again move construction move the move Constructor is not no except it",
    "start": "1431659",
    "end": "1437539"
  },
  {
    "text": "totally depends on what you want to have is it okay that it doesn't have a value or is it not okay",
    "start": "1437539",
    "end": "1443480"
  },
  {
    "text": "okay fact there is no the one solution that is always used this is why there's also",
    "start": "1443480",
    "end": "1449360"
  },
  {
    "text": "not the one implementation that we can use for everything it's a design Choice",
    "start": "1449360",
    "end": "1455179"
  },
  {
    "text": "after all okay draw shapes now is updated we no",
    "start": "1455179",
    "end": "1461840"
  },
  {
    "text": "longer have a vector of pointers we certainly have a vector of values go",
    "start": "1461840",
    "end": "1467539"
  },
  {
    "text": "over all the values and simply draw and also the main function is updated and suddenly it's becoming so much more",
    "start": "1467539",
    "end": "1476000"
  },
  {
    "text": "beautiful all we create now is circles squares other kinds of of shapes and we simply",
    "start": "1476000",
    "end": "1484820"
  },
  {
    "text": "put them in a vector of values breathtakingly beautiful absolutely",
    "start": "1484820",
    "end": "1492200"
  },
  {
    "text": "and so natural I have a vector of shapes what we put inside a circle of course it",
    "start": "1492200",
    "end": "1497419"
  },
  {
    "text": "makes sense whatever else put inside a square and usually would be wondering how does",
    "start": "1497419",
    "end": "1502760"
  },
  {
    "text": "this work but now we have an idea that's the power of type Erasure so I have absolutely no pointers in the user code",
    "start": "1502760",
    "end": "1509900"
  },
  {
    "text": "of course inside the class we agree there's earring pointer but you don't see that I don't have to deal with",
    "start": "1509900",
    "end": "1515179"
  },
  {
    "text": "pointers outside I do not have to allocate memory outside I never see a mechanic I never see a a smart pointer",
    "start": "1515179",
    "end": "1523460"
  },
  {
    "text": "I don't have to manage lifetimes this is done by my wrapper truly value semantics and it's very very",
    "start": "1523460",
    "end": "1531200"
  },
  {
    "text": "simple on the using side it is absolutely simple and for that reason definitely Superior it's kind of the",
    "start": "1531200",
    "end": "1537260"
  },
  {
    "text": "kiss principle just to make Kate um the sort of keynote speaker from this morning a little happy this is beautiful",
    "start": "1537260",
    "end": "1543740"
  },
  {
    "text": "C plus plus so um that's a basic idea just to give a quick",
    "start": "1543740",
    "end": "1550700"
  },
  {
    "text": "idea of the design some at high level you have this wrapper which is totally unaware of all the",
    "start": "1550700",
    "end": "1557720"
  },
  {
    "text": "shapes this is architecturally on a level below this is where I've circles and squares which also are totally",
    "start": "1557720",
    "end": "1563120"
  },
  {
    "text": "unconnected and only by putting them into the shape I actually connect them now provides this as an abstraction and",
    "start": "1563120",
    "end": "1570320"
  },
  {
    "text": "the compiler nice as it is creates the necessary connecting code so the shape",
    "start": "1570320",
    "end": "1575960"
  },
  {
    "text": "Model A Class template is instantiated for all the um for all the different shapes",
    "start": "1575960",
    "end": "1581779"
  },
  {
    "text": "automatically this is code that you don't have to maintain this is why it's so amazingly beautiful to maintain for",
    "start": "1581779",
    "end": "1588440"
  },
  {
    "text": "you your life is so much easier all right amazing job we have used type",
    "start": "1588440",
    "end": "1594860"
  },
  {
    "text": "Erasure to extract the implementation details of circles and shapes there's no dependencies on anything there if uh",
    "start": "1594860",
    "end": "1601820"
  },
  {
    "text": "still the ability to easily add new types triangles ellipses rectangles",
    "start": "1601820",
    "end": "1606919"
  },
  {
    "text": "whatever you need um you've also separated interfaces reduced duplication",
    "start": "1606919",
    "end": "1612440"
  },
  {
    "text": "we've pretty much removed all dependencies nice and we've removed all inheritance hierarchies removed all",
    "start": "1612440",
    "end": "1619039"
  },
  {
    "text": "pointers manual allocations and all kinds of Lifetime management okay it's inside the class sure but it's happening",
    "start": "1619039",
    "end": "1625340"
  },
  {
    "text": "automatically and we might have just improved performance",
    "start": "1625340",
    "end": "1631940"
  },
  {
    "text": "so now that's the points that I have to make that's not what I continuous do",
    "start": "1631940",
    "end": "1638000"
  },
  {
    "text": "continue to do why do we improve performance so truth be told right now it's the basic",
    "start": "1638000",
    "end": "1644000"
  },
  {
    "text": "implementation it's nothing special this is not really fast yet so I should prove that by running a couple of benchmarks",
    "start": "1644000",
    "end": "1651559"
  },
  {
    "text": "however performance performance is tricky it really is now",
    "start": "1651559",
    "end": "1659539"
  },
  {
    "text": "if you stand in front of a crowd and mention performance everybody starts to listen and of course at least half of",
    "start": "1659539",
    "end": "1666679"
  },
  {
    "text": "the people have something to complain about this is the the the nature of performance results so I gonna present",
    "start": "1666679",
    "end": "1674419"
  },
  {
    "text": "you a couple of performance results but I only do this if you do promise me that",
    "start": "1674419",
    "end": "1679640"
  },
  {
    "text": "you indeed just considers to be qualitative results and that you do not take this too seriously your results",
    "start": "1679640",
    "end": "1685940"
  },
  {
    "text": "will be different so do you promise that okay so I trust you",
    "start": "1685940",
    "end": "1693080"
  },
  {
    "text": "so yeah there are I should explain first what I'm doing I'm now having four kinds of shapes",
    "start": "1693080",
    "end": "1699080"
  },
  {
    "text": "which is definitely a little more realistic than just having circles and squares I also added ellipses and rectangles but of course there can be",
    "start": "1699080",
    "end": "1705860"
  },
  {
    "text": "many many more I create one not ten thousand randomly shapes random shapes means that I do not",
    "start": "1705860",
    "end": "1714080"
  },
  {
    "text": "have 2500 with each of them but approximately 2500",
    "start": "1714080",
    "end": "1719120"
  },
  {
    "text": "based on the random number generator but this helps me to make it a little harder",
    "start": "1719120",
    "end": "1724220"
  },
  {
    "text": "for the compiler to do some optimizations I performed 25 000 operations and I've picked a cheap one",
    "start": "1724220",
    "end": "1730760"
  },
  {
    "text": "I've picked translate which is moving the center point I'm not doing this",
    "start": "1730760",
    "end": "1736100"
  },
  {
    "text": "because I I'm not really interested in drawing drawing would be expensive and all the solutions would have pretty much",
    "start": "1736100",
    "end": "1742400"
  },
  {
    "text": "the same performance effort is something very cheap and I'm benchmarking with",
    "start": "1742400",
    "end": "1749240"
  },
  {
    "text": "um all the compilers I've run this a couple of um",
    "start": "1749240",
    "end": "1754279"
  },
  {
    "text": "um uh years ago one year ago approximately and I'm using uh core S7",
    "start": "1754279",
    "end": "1759919"
  },
  {
    "text": "with 3.8 gigahertz up to 3.8 gigahertz all right so here they are",
    "start": "1759919",
    "end": "1765860"
  },
  {
    "text": "if you use a classical solution which I pointed out in the very beginning then this is the performance that we have and",
    "start": "1765860",
    "end": "1771500"
  },
  {
    "text": "Clank turns out to be a little faster than GCC but that's definitely not uh the main interest the type Erasure",
    "start": "1771500",
    "end": "1777080"
  },
  {
    "text": "implementation that we have right now is exactly as fast exactly as fast so this",
    "start": "1777080",
    "end": "1785659"
  },
  {
    "text": "is actually good news at this point although we have built around um this inheritance hierarchy quite a",
    "start": "1785659",
    "end": "1791899"
  },
  {
    "text": "lot of stuff it says no effect whatsoever on performance great so we just gained a lot of beauty",
    "start": "1791899",
    "end": "1798620"
  },
  {
    "text": "and a lot of maintainability without losing performance at all but you know I",
    "start": "1798620",
    "end": "1803960"
  },
  {
    "text": "want to dig deeper and this is uh we will now start to talk about what can we do to actually make it",
    "start": "1803960",
    "end": "1810140"
  },
  {
    "text": "faster there's a couple of options fascinatingly because we do not have a",
    "start": "1810140",
    "end": "1816140"
  },
  {
    "text": "pointer we have a wrapper we have a class we can actually do a couple of things inside",
    "start": "1816140",
    "end": "1821960"
  },
  {
    "text": "this wrapper uh that before we're just totally um yeah impossible",
    "start": "1821960",
    "end": "1827899"
  },
  {
    "text": "so the first idea is that we just get rid of the allocation obviously because right now",
    "start": "1827899",
    "end": "1835940"
  },
  {
    "text": "all I do every time is I always call make unique for any kind of shape I put",
    "start": "1835940",
    "end": "1841700"
  },
  {
    "text": "inside and I've seen that Circle since square a kind of tiny things there's not a lot inside and still I put it somewhere on",
    "start": "1841700",
    "end": "1849679"
  },
  {
    "text": "the dynamic memory not particularly efficient so let's make it a sign Choice let's",
    "start": "1849679",
    "end": "1857360"
  },
  {
    "text": "turn this into a class that never allocates of course this is the Other Extreme you can have something in the",
    "start": "1857360",
    "end": "1863539"
  },
  {
    "text": "middle but let's say that we never want to allocate dynamically so now what I choose instead of a unique",
    "start": "1863539",
    "end": "1870380"
  },
  {
    "text": "pointer the base is a stood array of bytes",
    "start": "1870380",
    "end": "1878000"
  },
  {
    "text": "okay this starts to sound very low level I know but you'll see this is actually",
    "start": "1878500",
    "end": "1884059"
  },
  {
    "text": "not super super um tough however please please please",
    "start": "1884059",
    "end": "1889279"
  },
  {
    "text": "please make sure that the alignment is fixed somehow so right now to make it so",
    "start": "1889279",
    "end": "1894380"
  },
  {
    "text": "to keep it simple at this point I have a fixed buffer size and Alignment within the class so it's not just given",
    "start": "1894380",
    "end": "1900559"
  },
  {
    "text": "we'll talk about how to deal with this a little later but I do have an alignment I do have a fixed buffer size and",
    "start": "1900559",
    "end": "1906500"
  },
  {
    "text": "maximum and this is not what I uh work with now I do not really have a pimple",
    "start": "1906500",
    "end": "1913340"
  },
  {
    "text": "anymore in the sense of I don't have a pointer to base anymore but this is right this byte buffer is",
    "start": "1913340",
    "end": "1919100"
  },
  {
    "text": "now exactly what I consider to be my my um object and this is the purpose of",
    "start": "1919100",
    "end": "1924500"
  },
  {
    "text": "these two pimple functions yes they convert my means of reinterpret",
    "start": "1924500",
    "end": "1929840"
  },
  {
    "text": "cast The Pointer to the first character into the shape concept that we had",
    "start": "1929840",
    "end": "1935539"
  },
  {
    "text": "before yeah so you know called concept inside the class",
    "start": "1935539",
    "end": "1941559"
  },
  {
    "text": "yes I know we're interpret casts this does not make a lot of people feel very happy this is something very suspicious",
    "start": "1941720",
    "end": "1950059"
  },
  {
    "text": "and indeed is most use of Henry interpret casts are dangerous and not okay",
    "start": "1950059",
    "end": "1956000"
  },
  {
    "text": "this one however luckily is totally backed up by the C plus plus standard the C plus plus standard tells us that",
    "start": "1956000",
    "end": "1962179"
  },
  {
    "text": "if there is something reasonable aside we are actually allowed to convert this byte buffer that's why it's okay into",
    "start": "1962179",
    "end": "1968960"
  },
  {
    "text": "the according object and again we don't know what it truly is we only have a point at the base so we convert it",
    "start": "1968960",
    "end": "1975260"
  },
  {
    "text": "accordingly all right The Constructor",
    "start": "1975260",
    "end": "1981020"
  },
  {
    "text": "okay still we have the it's still despite its Implement a little differently the bridge design pattern",
    "start": "1981020",
    "end": "1988880"
  },
  {
    "text": "but now let's take a look at the Constructor The Constructor is now responsible to create some object inside this buffer so",
    "start": "1988880",
    "end": "1996559"
  },
  {
    "text": "again it's a cloud sorry a function template it takes any type circle square triangle whatever",
    "start": "1996559",
    "end": "2003399"
  },
  {
    "text": "and it has to create the model inside this buffer so",
    "start": "2003399",
    "end": "2009820"
  },
  {
    "text": "in order to make it fit on the slide I first shoot model of shape T to M excuse",
    "start": "2009820",
    "end": "2016120"
  },
  {
    "text": "me for this short name but you get the point and it's only for a few lines then also very important I absolutely make",
    "start": "2016120",
    "end": "2022840"
  },
  {
    "text": "sure that this actually works I check the size of the given model does it fit into my buffer if it doesn't I get a",
    "start": "2022840",
    "end": "2030340"
  },
  {
    "text": "compilation error then I also also very important check the alignment does the alignment actually work",
    "start": "2030340",
    "end": "2036880"
  },
  {
    "text": "if doesn't I get a compilation error and only then only then I actually create by",
    "start": "2036880",
    "end": "2043179"
  },
  {
    "text": "means of a placement new this model inside the buffer so I pass the address",
    "start": "2043179",
    "end": "2049839"
  },
  {
    "text": "of the buffers that means of the pimple function to new and I call placement new created inside",
    "start": "2049839",
    "end": "2057839"
  },
  {
    "text": "all right I still have shape concept and shape model I still have",
    "start": "2058359",
    "end": "2064839"
  },
  {
    "text": "this didn't change at all I've just changed the implementation details a little bit to accommodate the",
    "start": "2064839",
    "end": "2070658"
  },
  {
    "text": "fact that I have this static buffer inside",
    "start": "2070659",
    "end": "2075760"
  },
  {
    "text": "so still it's the external policies and design pattern nothing changed here it's still the same thing",
    "start": "2075760",
    "end": "2081638"
  },
  {
    "text": "um but the Clone function has changed now I do no longer return a unique pointer to base",
    "start": "2081639",
    "end": "2087940"
  },
  {
    "text": "no I don't need that what I now do is I actually don't return anything but I",
    "start": "2087940",
    "end": "2093220"
  },
  {
    "text": "take a pointer to a piece of memory so please copy yourself into this memory",
    "start": "2093220",
    "end": "2099760"
  },
  {
    "text": "that's what the implementation now does so in the shape model clone is implemented as copy yourself into this",
    "start": "2099760",
    "end": "2107080"
  },
  {
    "text": "memory that means of replacement new",
    "start": "2107080",
    "end": "2111660"
  },
  {
    "text": "again it's a prototype design pattern but this time in terms of this in-class",
    "start": "2112240",
    "end": "2117880"
  },
  {
    "text": "piece of memory note that in all the places in all the",
    "start": "2117880",
    "end": "2123280"
  },
  {
    "text": "cases I actually use dot dot new I use the global placement new",
    "start": "2123280",
    "end": "2130000"
  },
  {
    "text": "there is people sometimes that actually overload the new operations in their classes it is possible after all",
    "start": "2130000",
    "end": "2136960"
  },
  {
    "text": "and in order to be perfect we of course want to make sure that we truly use the function that we actually intend to use",
    "start": "2136960",
    "end": "2142300"
  },
  {
    "text": "the real placement new I know that this is a model that we have full in the control it's in the private section",
    "start": "2142300",
    "end": "2149380"
  },
  {
    "text": "but please make it a habit if you truly want to use the global placement new if you want to avoid the class specific",
    "start": "2149380",
    "end": "2155560"
  },
  {
    "text": "implementations then use the colon colon new for that and this is what you see a",
    "start": "2155560",
    "end": "2161079"
  },
  {
    "text": "lot for very good reasons all right suddenly there's also another function",
    "start": "2161079",
    "end": "2166900"
  },
  {
    "text": "called move and the name gives it away this is a function that does the equivalent of a",
    "start": "2166900",
    "end": "2173140"
  },
  {
    "text": "move operation just using this um this nested buffer so the move",
    "start": "2173140",
    "end": "2178660"
  },
  {
    "text": "operation also takes a pointer to some memory and again I'm using Place menu",
    "start": "2178660",
    "end": "2184180"
  },
  {
    "text": "but this time I call the move Constructor so it's a beautiful equivalent",
    "start": "2184180",
    "end": "2189640"
  },
  {
    "text": "which now also allows us to efficiently move from one's shape into another one no",
    "start": "2189640",
    "end": "2195400"
  },
  {
    "text": "um no efficient did last at this point all right",
    "start": "2195400",
    "end": "2200740"
  },
  {
    "text": "this is now the implementation details of the special member functions which first of all start with a Destructor",
    "start": "2200740",
    "end": "2208599"
  },
  {
    "text": "which necessarily becomes necessary all the compiler sees is a stood array of",
    "start": "2208599",
    "end": "2213760"
  },
  {
    "text": "bytes and this is what it will destroy now the compiler would simply destroy this array",
    "start": "2213760",
    "end": "2220240"
  },
  {
    "text": "of bytes in other words it wouldn't really call the destructor on the thing that we uh truly store inside so we",
    "start": "2220240",
    "end": "2227440"
  },
  {
    "text": "actually call it explicitly so we explicitly destroy our concept polymorphically by means of the virtual",
    "start": "2227440",
    "end": "2234160"
  },
  {
    "text": "instructor then everything's fine all right next thing",
    "start": "2234160",
    "end": "2239980"
  },
  {
    "text": "the copy operations the copy operations are very very",
    "start": "2239980",
    "end": "2246339"
  },
  {
    "text": "similar to what I've shown before I simply call clone but this time I just don't get a new value as a return I",
    "start": "2246339",
    "end": "2254320"
  },
  {
    "text": "simply say where it needs to go so please copy into my uh buffer now I pass",
    "start": "2254320",
    "end": "2259540"
  },
  {
    "text": "my own buffer as an argument to this clone function and again I Implement copy assignment in",
    "start": "2259540",
    "end": "2266800"
  },
  {
    "text": "terms of copying swap which again is super simple and definitely correct in this case and it's not a lot of things that he",
    "start": "2266800",
    "end": "2273640"
  },
  {
    "text": "could do to optimize this that make it better this is fine all right",
    "start": "2273640",
    "end": "2280480"
  },
  {
    "text": "the last two functions are the move operations which however you realize are once we",
    "start": "2280480",
    "end": "2286839"
  },
  {
    "text": "have this move operation this abstract virtual function in a base class actually turn out to be super similar",
    "start": "2286839",
    "end": "2293680"
  },
  {
    "text": "I move this other into the buffer this will call the move operation here",
    "start": "2293680",
    "end": "2300400"
  },
  {
    "text": "and again I swap the byte buffers I copy and swap is truly kind of a a a safe way",
    "start": "2300400",
    "end": "2309520"
  },
  {
    "text": "to do that all right",
    "start": "2309520",
    "end": "2314280"
  },
  {
    "text": "let's talk a little bit about um buffer size and alignment",
    "start": "2314800",
    "end": "2320560"
  },
  {
    "text": "I agree that it's not a beautiful thing to have this in the class so it's like a fixed thing if you have something that's",
    "start": "2320560",
    "end": "2326740"
  },
  {
    "text": "a little bigger then this class cannot be used and there's no way that it can adapt this from outside",
    "start": "2326740",
    "end": "2331839"
  },
  {
    "text": "so kind of logical choices to actually move this into",
    "start": "2331839",
    "end": "2337240"
  },
  {
    "text": "um a template header for the shape class so now we're actually able to configure",
    "start": "2337240",
    "end": "2342339"
  },
  {
    "text": "the shape for a specific purpose so we can have different buffer sizes we can use different alignment",
    "start": "2342339",
    "end": "2348700"
  },
  {
    "text": "that's nice yet of course and you're correct if you",
    "start": "2348700",
    "end": "2353800"
  },
  {
    "text": "would argue about that um there's more we could do",
    "start": "2353800",
    "end": "2359140"
  },
  {
    "text": "so for instance we could actually also think about using dynamic memory and static memory in a mixed form",
    "start": "2359140",
    "end": "2365980"
  },
  {
    "text": "that's something really could configure by means of simply stating with a",
    "start": "2365980",
    "end": "2371200"
  },
  {
    "text": "storage policy so from the outside somebody now tells us how the thing needs to be stored by",
    "start": "2371200",
    "end": "2377200"
  },
  {
    "text": "means of calling new or make unique or by means of some static buffer you can",
    "start": "2377200",
    "end": "2383740"
  },
  {
    "text": "actually configure this from the outside which by the way I guess I'm a design pattern aficionado",
    "start": "2383740",
    "end": "2390280"
  },
  {
    "text": "it's a design pattern it's this strategy design pattern and it has a special name we also call",
    "start": "2390280",
    "end": "2397720"
  },
  {
    "text": "this policy based design which is the name that Andrew alexandrescue suggested in 2001 when he tried to",
    "start": "2397720",
    "end": "2404619"
  },
  {
    "text": "to some extent Port all of the classic design patterns to templates now policy-based design is pretty much the",
    "start": "2404619",
    "end": "2410200"
  },
  {
    "text": "same thing just in the template world all right so this is definitely a nice idea this",
    "start": "2410200",
    "end": "2416980"
  },
  {
    "text": "gives us the ability to do a lot of beautiful things like for instance providing some Dynamic storage policy A",
    "start": "2416980",
    "end": "2423400"
  },
  {
    "text": "Stack Storage policy perhaps a hybrid storage sheet which allows us to to differ if it's small then we store it in",
    "start": "2423400",
    "end": "2429820"
  },
  {
    "text": "a buffer if it's big we allocate dynamically nice and you could use them by just",
    "start": "2429820",
    "end": "2436599"
  },
  {
    "text": "specifying um this as a template parameter so shape one uses Dynamic storage shape to uh",
    "start": "2436599",
    "end": "2443680"
  },
  {
    "text": "uses text Stack Storage and there may be a third shape that use hybrid storage nice",
    "start": "2443680",
    "end": "2449760"
  },
  {
    "text": "however although this sounds super nice although this sounds like the way to go in the",
    "start": "2449760",
    "end": "2455980"
  },
  {
    "text": "end mixing these two different these teams very different types sadly becomes",
    "start": "2455980",
    "end": "2462820"
  },
  {
    "text": "quite interesting quite challenging so now we have two different types one",
    "start": "2462820",
    "end": "2469420"
  },
  {
    "text": "that use Dynamic storage the other one that use Stack Storage and we have to still make copy and move",
    "start": "2469420",
    "end": "2474880"
  },
  {
    "text": "and all this stuff work and basically we can mix all the different options with all the four uh to the two copy",
    "start": "2474880",
    "end": "2481000"
  },
  {
    "text": "operations in order to move operations that's actually different beyond what I",
    "start": "2481000",
    "end": "2487119"
  },
  {
    "text": "want to talk about this is what I would usually recommend as don't do that",
    "start": "2487119",
    "end": "2492400"
  },
  {
    "text": "this is horribly complicated and this definitely destroys the entire impression of type Direction once you",
    "start": "2492400",
    "end": "2498099"
  },
  {
    "text": "try that you will never use this technique anymore because it's so absolutely difficult it really is",
    "start": "2498099",
    "end": "2504700"
  },
  {
    "text": "difficult and so now this is uh this discussion would definitely dig too deep",
    "start": "2504700",
    "end": "2509920"
  },
  {
    "text": "we would have to think too much about many many details and of course you do remember what",
    "start": "2509920",
    "end": "2515619"
  },
  {
    "text": "happens if you dig too deep yeah because I believe you do remember what happened with the dwarfs in morya so digging too",
    "start": "2515619",
    "end": "2522640"
  },
  {
    "text": "deep is not particularly healthy so however we have indeed improved",
    "start": "2522640",
    "end": "2528760"
  },
  {
    "text": "performance quite a bit we have improved performance by approximately 10",
    "start": "2528760",
    "end": "2535720"
  },
  {
    "text": "percent and I should say I should state that I",
    "start": "2535720",
    "end": "2541900"
  },
  {
    "text": "actually didn't create a lot of new shapes all around this is kind of just having the static buffer and using it by",
    "start": "2541900",
    "end": "2548500"
  },
  {
    "text": "means of a static buffer many people report that it can be so much more if you constantly create new objects",
    "start": "2548500",
    "end": "2556180"
  },
  {
    "text": "I know I I didn't know why somebody was laughing ten percent we're actually",
    "start": "2556180",
    "end": "2561220"
  },
  {
    "text": "bickering about a single percent in C plus so 10 is huge by just writing a wrapper by just having",
    "start": "2561220",
    "end": "2569079"
  },
  {
    "text": "a a static buffer you actually gain 10 total performance in potentially a an",
    "start": "2569079",
    "end": "2575500"
  },
  {
    "text": "entire application that's amazing and it actually didn't take so much work",
    "start": "2575500",
    "end": "2582579"
  },
  {
    "text": "all right so this is definitely something that you should do should consider um what doesn't standard function do",
    "start": "2582579",
    "end": "2588760"
  },
  {
    "text": "something like that well probably because of the problem that I just pointed out",
    "start": "2588760",
    "end": "2594280"
  },
  {
    "text": "um it's very hard to configure this for all possible cases make it interchangeable it really is a mess",
    "start": "2594280",
    "end": "2600520"
  },
  {
    "text": "there will be however I hope so eventually an In-Place",
    "start": "2600520",
    "end": "2605560"
  },
  {
    "text": "function in the in the C plus for standard so something that is perhaps using static memory I hope so because",
    "start": "2605560",
    "end": "2612880"
  },
  {
    "text": "there is a lot of options that might be interesting all right there's one more thing that I",
    "start": "2612880",
    "end": "2618520"
  },
  {
    "text": "want to show you manual virtual dispatch and this is definitely a a thing that I know combine",
    "start": "2618520",
    "end": "2625180"
  },
  {
    "text": "with some other idea because I believe once you've seen that you will definitely use this technique this is",
    "start": "2625180",
    "end": "2630760"
  },
  {
    "text": "way too powerful way too good to miss and the motivation is that we now have",
    "start": "2630760",
    "end": "2637060"
  },
  {
    "text": "this uh wrapper they could use to write functions that just draw anything I pass a shape and",
    "start": "2637060",
    "end": "2646599"
  },
  {
    "text": "um this would draw it so right now we would pass a shape probably by a",
    "start": "2646599",
    "end": "2651760"
  },
  {
    "text": "constant ref if you know in the main function pass Circle and square this will actually",
    "start": "2651760",
    "end": "2657640"
  },
  {
    "text": "compile and it will work so if written a function that takes any shape and will do something with it I'll draw it for",
    "start": "2657640",
    "end": "2664180"
  },
  {
    "text": "instance this will work this will compile but",
    "start": "2664180",
    "end": "2670060"
  },
  {
    "text": "for every call you will based on how we now implemented this potentially allocates dynamically so if you do not",
    "start": "2670060",
    "end": "2677020"
  },
  {
    "text": "use the SPO solution then this would might potentially uh do an allocation and the cop operation too",
    "start": "2677020",
    "end": "2684160"
  },
  {
    "text": "so this wrapper might be a little too expensive for what you have in mind",
    "start": "2684160",
    "end": "2689740"
  },
  {
    "text": "what you might be interested in might be more like a type in in a direction of a string view something that represents",
    "start": "2689740",
    "end": "2696760"
  },
  {
    "text": "the thing but doesn't do a copy something that doesn't own something that is way more lightweight and",
    "start": "2696760",
    "end": "2703480"
  },
  {
    "text": "therefore does not um cause a lot of overhead so that's exactly what we know right",
    "start": "2703480",
    "end": "2709839"
  },
  {
    "text": "we write a non-owning abstraction a non-owning type Erasure wrapper",
    "start": "2709839",
    "end": "2715720"
  },
  {
    "text": "and I'd hopefully um is is pretty pretty fascinating because it will be just one slide of",
    "start": "2715720",
    "end": "2724060"
  },
  {
    "text": "code nothing more however I totally admit it's maybe the toughest thing that",
    "start": "2724060",
    "end": "2730300"
  },
  {
    "text": "you've seen here in the session but okay it is not that bad I should actually look at this positively so this shape",
    "start": "2730300",
    "end": "2737920"
  },
  {
    "text": "counts ref first of all takes so type Erasure wrappers a templated Constructor",
    "start": "2737920",
    "end": "2744579"
  },
  {
    "text": "it's the same thing so we take a shape T but this time as it's supposed to represent a constant reference to shape",
    "start": "2744579",
    "end": "2751839"
  },
  {
    "text": "it takes a const reference to shape t okay now I do the thing that is probably",
    "start": "2751839",
    "end": "2757720"
  },
  {
    "text": "uh something that you will feel to be absolutely amazingly horrible I add a",
    "start": "2757720",
    "end": "2762819"
  },
  {
    "text": "data member in form of a void point",
    "start": "2762819",
    "end": "2769500"
  },
  {
    "text": "avoid Point yes I I totally see the looks I totally see what you're thinking",
    "start": "2769780",
    "end": "2774940"
  },
  {
    "text": "now the guy's gone mad okay no no no no no this is actually perfectly okay don't",
    "start": "2774940",
    "end": "2781599"
  },
  {
    "text": "throw it don't leave now don't throw anything I will fix this in a second but this is now exactly what you need we",
    "start": "2781599",
    "end": "2787359"
  },
  {
    "text": "need a pointer we don't want to create any overhead by having base classes as we don't want to",
    "start": "2787359",
    "end": "2793119"
  },
  {
    "text": "allocate anything now this is the only thing that we can use a void pointer but of course we don't want to use this",
    "start": "2793119",
    "end": "2800500"
  },
  {
    "text": "void Point as a void point if we want to use the actual thing and so here's what we do",
    "start": "2800500",
    "end": "2806579"
  },
  {
    "text": "okay sorry and of course we initialize our uh our data membership by means of the",
    "start": "2806619",
    "end": "2813220"
  },
  {
    "text": "address of shape okay now we add another data member a data",
    "start": "2813220",
    "end": "2820240"
  },
  {
    "text": "member that I for syntax reasons first the previous draw operation a draw operation is a",
    "start": "2820240",
    "end": "2828099"
  },
  {
    "text": "function type for function that returns void and it takes a void con star",
    "start": "2828099",
    "end": "2834339"
  },
  {
    "text": "and then I have a data member called Draw that is a function pointer",
    "start": "2834339",
    "end": "2840520"
  },
  {
    "text": "so this function point now needs to be initialized and that function pointer is supposed to draw the shape that I store",
    "start": "2840520",
    "end": "2846220"
  },
  {
    "text": "inside how do I initialize this data member by means of a Lambda",
    "start": "2846220",
    "end": "2853180"
  },
  {
    "text": "I write a Lambda alumna that takes a void Khan star",
    "start": "2853180",
    "end": "2859060"
  },
  {
    "text": "and performs a static cast to a shape t con",
    "start": "2859060",
    "end": "2864880"
  },
  {
    "text": "star and that's possible within the Constructor I am absolutely certain 100",
    "start": "2864880",
    "end": "2870760"
  },
  {
    "text": "certain that the given type is of shape T type so I know how to get back from the void",
    "start": "2870760",
    "end": "2877599"
  },
  {
    "text": "pointer I know for certain what I have to do in order to go back this is what I do I convert",
    "start": "2877599",
    "end": "2884260"
  },
  {
    "text": "give reference and pass this to the draw function now whatever needs to be done at this point",
    "start": "2884260",
    "end": "2889960"
  },
  {
    "text": "this Lambda is stateless because it's stateless I actually can convert it to a function",
    "start": "2889960",
    "end": "2896740"
  },
  {
    "text": "pointer that one thing that I know that this Lambda can become the answer the one thing that I could use as a data member",
    "start": "2896740",
    "end": "2903040"
  },
  {
    "text": "and so I can initialize my data member by means of the converted Lambda",
    "start": "2903040",
    "end": "2908740"
  },
  {
    "text": "oh nice and now we are almost done that's just one thing that we need to add I got a hidden friend that actually",
    "start": "2908740",
    "end": "2915940"
  },
  {
    "text": "allows me to trigger this polymorphic behavior from the outside the draw function",
    "start": "2915940",
    "end": "2921520"
  },
  {
    "text": "but was the convention all the examples a draw function that takes the shape constraph a reference to concept by",
    "start": "2921520",
    "end": "2927460"
  },
  {
    "text": "value this doesn't matter so much and we actually trigger the draw function so",
    "start": "2927460",
    "end": "2934839"
  },
  {
    "text": "please draw the thing that we store and I think that this story turns out to be a shape t",
    "start": "2934839",
    "end": "2941800"
  },
  {
    "text": "absolutely amazing most importantly this little abstraction",
    "start": "2941800",
    "end": "2947020"
  },
  {
    "text": "is totally non-intrusive you can add this anywhere on the Fly wherever you need abstraction for a set of types with",
    "start": "2947020",
    "end": "2954220"
  },
  {
    "text": "a certain set of operations you can just add it you don't have to change any other existing code this makes this so",
    "start": "2954220",
    "end": "2961119"
  },
  {
    "text": "amazingly valuable for any kind of interface so it really is kind of a",
    "start": "2961119",
    "end": "2967300"
  },
  {
    "text": "consequent extension of classes like string view span Etc it's a little more",
    "start": "2967300",
    "end": "2972400"
  },
  {
    "text": "complicated on your product but you see it's not particularly long and it's always the same it really always is the",
    "start": "2972400",
    "end": "2978819"
  },
  {
    "text": "same you just replace draw by any operation that you need foreign",
    "start": "2978819",
    "end": "2984599"
  },
  {
    "text": "so performance wise this manual virtual um",
    "start": "2984660",
    "end": "2991240"
  },
  {
    "text": "dispatch so writing these virtual functions with this technique yourself because this is what you do actually has",
    "start": "2991240",
    "end": "2998260"
  },
  {
    "text": "a interesting performance effect clang doesn't like it so much but GCC does",
    "start": "2998260",
    "end": "3004380"
  },
  {
    "text": "really GCC actually speeds up quite significantly Clank probably yeah yeah",
    "start": "3004380",
    "end": "3010200"
  },
  {
    "text": "it just doesn't like it and now of course here's the big question if I combine the small buffer",
    "start": "3010200",
    "end": "3016140"
  },
  {
    "text": "optimization with this manual virtual dispatch what do you get okay it didn't turn out to be faster in my",
    "start": "3016140",
    "end": "3023400"
  },
  {
    "text": "implementation perhaps I did mess some something up I didn't find any any reason perhaps it's",
    "start": "3023400",
    "end": "3029040"
  },
  {
    "text": "also a little too complicated perhaps the compiler cannot optimize aggressively anymore either now so the combination didn't turn out too well but",
    "start": "3029040",
    "end": "3036480"
  },
  {
    "text": "definitely is uh still uh reasonably fast",
    "start": "3036480",
    "end": "3041520"
  },
  {
    "text": "so to summarize type ratio is first a template Constructor",
    "start": "3041520",
    "end": "3048960"
  },
  {
    "text": "all typewritious wrappers have this plus a completely non-virtual interface",
    "start": "3048960",
    "end": "3055260"
  },
  {
    "text": "so the type ratio of itself somewhere inside in this this nested hierarchy or in the function Point sap store it's",
    "start": "3055260",
    "end": "3062760"
  },
  {
    "text": "kind of a virtual interface but it's inside and we combine these a couple of design",
    "start": "3062760",
    "end": "3068339"
  },
  {
    "text": "patterns in order to make it work internally and I I believe it's definitely one of",
    "start": "3068339",
    "end": "3073740"
  },
  {
    "text": "the most interesting decide patterns today so type ratio significantly reduces dependencies",
    "start": "3073740",
    "end": "3079800"
  },
  {
    "text": "it enables value semantics what we just do today in C plus plus this is the thing it improves performance",
    "start": "3079800",
    "end": "3086119"
  },
  {
    "text": "potentially quite a bit uh it approves readability and comprehensibility and please do not",
    "start": "3086119",
    "end": "3092640"
  },
  {
    "text": "think about the implementation it's inside the wrapper okay they're a little messy but outside amazingly beautiful",
    "start": "3092640",
    "end": "3100200"
  },
  {
    "text": "it eases maintenance because it's easier absolutely and it's for good reason the default",
    "start": "3100200",
    "end": "3106140"
  },
  {
    "text": "choice for dynamic policies in many other languages C plus plus two we do this ourselves in other languages you",
    "start": "3106140",
    "end": "3111480"
  },
  {
    "text": "get this by default without even realizing okay that's it",
    "start": "3111480",
    "end": "3117119"
  },
  {
    "text": "thank you very much for attending are there any questions",
    "start": "3117119",
    "end": "3122180"
  },
  {
    "text": "I do have a mic in case you have questions I believe this is better for any recording",
    "start": "3122460",
    "end": "3129980"
  },
  {
    "text": "I noticed on your implementation with the with the",
    "start": "3137480",
    "end": "3143520"
  },
  {
    "text": "buffer that your it looks to me like your implementation of the of the move",
    "start": "3143520",
    "end": "3151140"
  },
  {
    "text": "construction was actually copying because you moved from a const object I",
    "start": "3151140",
    "end": "3157020"
  },
  {
    "text": "think the move construction of the buffer is it really moves the inch inside so it",
    "start": "3157020",
    "end": "3163619"
  },
  {
    "text": "moves so say you have a circle inside it would move the circle if the circle cannot be removed",
    "start": "3163619",
    "end": "3169260"
  },
  {
    "text": "okay it's not a lot you can move but if you do save we have a polygon which",
    "start": "3169260",
    "end": "3175140"
  },
  {
    "text": "those stood Vector of points if that's what you store inside then you would actually move the vector",
    "start": "3175140",
    "end": "3181980"
  },
  {
    "text": "that's the um the point I do however not really I cannot do",
    "start": "3181980",
    "end": "3188400"
  },
  {
    "text": "anything else you're right foreign",
    "start": "3188400",
    "end": "3194220"
  },
  {
    "text": "one more question [Music]",
    "start": "3195920",
    "end": "3202940"
  },
  {
    "text": "using a library that is a good question so should I or should you roll this or",
    "start": "3202940",
    "end": "3207960"
  },
  {
    "text": "your own or should you use the library there's actually a couple of libraries around to mention a few there is Dino",
    "start": "3207960",
    "end": "3214020"
  },
  {
    "text": "written by Louis Dion which is a GitHub repository um there is the zoo Library written by",
    "start": "3214020",
    "end": "3219660"
  },
  {
    "text": "Eduardo Madrid uh and there's also something in the Boost libraries",
    "start": "3219660",
    "end": "3225000"
  },
  {
    "text": "um the last thing I showed this is something I feel you should roll at your own it's 20 lines of code they are",
    "start": "3225000",
    "end": "3231839"
  },
  {
    "text": "fairly simple you basically cannot mess things up and it's always the same yeah you copy and paste this adapt a little",
    "start": "3231839",
    "end": "3237180"
  },
  {
    "text": "bit it's done this is something that you please roll your own if you however have complex things and you do not want to do",
    "start": "3237180",
    "end": "3244440"
  },
  {
    "text": "all of the stuff yourself then perhaps you can use the library I still feel it's reasonably simple that",
    "start": "3244440",
    "end": "3251460"
  },
  {
    "text": "you can roll your own but um of course it depends",
    "start": "3251460",
    "end": "3256920"
  },
  {
    "text": "the answer that nobody wants to hear I know okay then thank you enjoy your evening",
    "start": "3256920",
    "end": "3264560"
  },
  {
    "text": "[Applause]",
    "start": "3264560",
    "end": "3272000"
  }
]