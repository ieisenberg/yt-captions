[
  {
    "text": "hi yes thank you and welcome to automate out yourself out",
    "start": "8240",
    "end": "13360"
  },
  {
    "text": "of a job with roslyn which is the first tech talk i've done in two years in front of people um i've been happily",
    "start": "13360",
    "end": "20720"
  },
  {
    "text": "sitting at home at my desk with my like four or five monitors and my big powerful pc and",
    "start": "20720",
    "end": "27439"
  },
  {
    "text": "so yeah it's been a while and i am a little bit terrified so i'm sorry um",
    "start": "27439",
    "end": "33600"
  },
  {
    "text": "my name is mark rendall and i am a net developer i've been using net and c-sharp since",
    "start": "33600",
    "end": "41520"
  },
  {
    "text": "the first beta of net back in late 2000 i'm a microsoft mvp",
    "start": "41520",
    "end": "48559"
  },
  {
    "text": "which doesn't matter at all but apparently when you're speaking you have to go i'm a microsoft mvp",
    "start": "48559",
    "end": "54320"
  },
  {
    "text": "it's the only reason i do the speaking is so that i get to be a microsoft mvp and get free software and",
    "start": "54320",
    "end": "60000"
  },
  {
    "text": "and stuff um but my job i work on something called",
    "start": "60000",
    "end": "65600"
  },
  {
    "text": "visual recode which i'll talk about more later on but let's start off by talking about",
    "start": "65600",
    "end": "71920"
  },
  {
    "text": "what roslin actually is so the first sort of few versions of",
    "start": "71920",
    "end": "78000"
  },
  {
    "text": "c-sharp and the first few versions of net the c-sharp compiler and the vb.net compiler were written in c plus and then",
    "start": "78000",
    "end": "86880"
  },
  {
    "text": "around the time of between c sharp five and c sharp six there was a huge project",
    "start": "86880",
    "end": "93280"
  },
  {
    "text": "to rewrite the compiler for c sharp in c sharp and to re rewrite the compiler for",
    "start": "93280",
    "end": "100320"
  },
  {
    "text": "vb.net in vb.net which serves them right um any vb.net programmers in the room",
    "start": "100320",
    "end": "107280"
  },
  {
    "text": "because i'm sorry yeah um not for what i'm saying i'm just",
    "start": "107280",
    "end": "112840"
  },
  {
    "text": "sorry um and when they rewrote the compiler for",
    "start": "112840",
    "end": "118079"
  },
  {
    "text": "c-sharp in c-sharp they didn't just make a new compiler they built it",
    "start": "118079",
    "end": "123439"
  },
  {
    "text": "uh they decided to make a compiler as a service so they built it in an open way",
    "start": "123439",
    "end": "130000"
  },
  {
    "text": "so that all the developers in the world who were doing c-sharp work could hook into the compiler and use bits of the",
    "start": "130000",
    "end": "137200"
  },
  {
    "text": "compiler tool chain to work with their own c sharp code and so essentially we",
    "start": "137200",
    "end": "142720"
  },
  {
    "text": "all became c-sharp compiler developers because we've got access to these parts",
    "start": "142720",
    "end": "148319"
  },
  {
    "text": "of the c-sharp compiler and and it's completely awesome um fundamentally the",
    "start": "148319",
    "end": "154400"
  },
  {
    "text": "thing it's most often used for is writing analyzers which either install into visual studio",
    "start": "154400",
    "end": "161040"
  },
  {
    "text": "or you can reference them as a nuget package in your project and then it adds the squiggles under lines and if you're",
    "start": "161040",
    "end": "168080"
  },
  {
    "text": "really lucky it adds the fix for that as well and we'll take a look at that later on",
    "start": "168080",
    "end": "173440"
  },
  {
    "text": "but i got into using roslyn basically because microsoft canceled wcf",
    "start": "173440",
    "end": "179599"
  },
  {
    "text": "which was a good move wcf needed to be cancelled wcf was uh",
    "start": "179599",
    "end": "185120"
  },
  {
    "text": "started in 2006 and it was basically a way to get net to do soap",
    "start": "185120",
    "end": "191200"
  },
  {
    "text": "and soap really belongs in 2006. i mean it doesn't belong anywhere but if it's",
    "start": "191200",
    "end": "196800"
  },
  {
    "text": "going to be anywhere at all 2006 is a nice safe place for it and let's just leave it there i know java people still",
    "start": "196800",
    "end": "203200"
  },
  {
    "text": "love it but but no um and a lot of people were very upset by",
    "start": "203200",
    "end": "208319"
  },
  {
    "text": "this and microsoft said the the thing we suggest that you migrate to is grpc",
    "start": "208319",
    "end": "214159"
  },
  {
    "text": "which is the new sort of rpc hotness um it's created by google although the g",
    "start": "214159",
    "end": "219360"
  },
  {
    "text": "does not stand for google nobody knows what it does stand for it just doesn't stand for google",
    "start": "219360",
    "end": "224640"
  },
  {
    "text": "and so there are a bunch of people in the world who've got um tens of millions of lines of code all wrapped up behind wcf",
    "start": "224640",
    "end": "232319"
  },
  {
    "text": "service contracts and operation contracts and data contracts and i thought i wonder if you could just use",
    "start": "232319",
    "end": "239840"
  },
  {
    "text": "roslyn to scan over all those service contracts and data contracts and generate the protobuf file uh that would",
    "start": "239840",
    "end": "247599"
  },
  {
    "text": "be the equivalent grpc service and so i started hacking around with that and it turned out yes yes you can and it's um",
    "start": "247599",
    "end": "255120"
  },
  {
    "text": "i i want to say it's surprisingly easy but i also want people to buy my thing so um",
    "start": "255120",
    "end": "261120"
  },
  {
    "text": "it's it's kind yeah um and i actually ended up going not only can i do that",
    "start": "261120",
    "end": "266160"
  },
  {
    "text": "but i can also generate the code so that we can bring across your old service contract and then just put a",
    "start": "266160",
    "end": "272720"
  },
  {
    "text": "grpc proxy in front of it and so i dug really really deep into roslyn and all",
    "start": "272720",
    "end": "278320"
  },
  {
    "text": "that sort of stuff and so that's how i got to know about it and why i want to share it with you because you",
    "start": "278320",
    "end": "285199"
  },
  {
    "text": "can use it for for things like that you could put together your own visual recode and",
    "start": "285199",
    "end": "290240"
  },
  {
    "text": "avoid buying a 125 license but you can also use it to sort of scan",
    "start": "290240",
    "end": "297040"
  },
  {
    "text": "over a c-sharp object and generate the equivalent typescript object or interface or class or whatever",
    "start": "297040",
    "end": "302800"
  },
  {
    "text": "or lots of things so to get started with roslyn",
    "start": "302800",
    "end": "309120"
  },
  {
    "text": "it's essentially just a bunch of new get packages and they've just with c-sharp 10 they've",
    "start": "309120",
    "end": "314880"
  },
  {
    "text": "gone to 4.0 on the new get packages and so this is what the project file would",
    "start": "314880",
    "end": "320720"
  },
  {
    "text": "look like we have microsoft.codeanalysis.csharp.workspaces",
    "start": "320720",
    "end": "326520"
  },
  {
    "text": "and that brings in microsoft.codeanalysis.csharp and a bunch of other things and that contains",
    "start": "327600",
    "end": "334400"
  },
  {
    "text": "all the types and classes and and libraries that you need to start analyzing and passing and",
    "start": "334400",
    "end": "341680"
  },
  {
    "text": "understanding and working with c sharp code in your code we also bring in",
    "start": "341680",
    "end": "349280"
  },
  {
    "text": "microsoft.codanalysis.workspaces.ms build and that is the thing that hooks the roslin",
    "start": "349960",
    "end": "357039"
  },
  {
    "text": "compiler up to a version of ms build that is installed somewhere on your machine and that could be the visual",
    "start": "357039",
    "end": "363840"
  },
  {
    "text": "studio version of ms build which is closed source and scary as hell or it could be the net version of ms build",
    "start": "363840",
    "end": "370720"
  },
  {
    "text": "that's hiding under program files dot net slash sdk somewhere and that lets you work with",
    "start": "370720",
    "end": "377440"
  },
  {
    "text": "net core and net5 and net 6 and all the latest versions of c sharp",
    "start": "377440",
    "end": "383520"
  },
  {
    "text": "and then up at the top there we have something called microsoft.build.locator which we'll talk about more in a minute",
    "start": "383520",
    "end": "391520"
  },
  {
    "text": "so at the root of everything that you do with roslyn is workspaces or r",
    "start": "391520",
    "end": "397120"
  },
  {
    "text": "workspaces workspaces um they're like above the solution and you can think of a",
    "start": "397120",
    "end": "403280"
  },
  {
    "text": "workspace as like a virtual instance of visual studio that's running in memory",
    "start": "403280",
    "end": "409280"
  },
  {
    "text": "and that's taking care of all the things around the solution and so roslyn workspaces",
    "start": "409280",
    "end": "415120"
  },
  {
    "text": "you have three different kinds you have an ad hoc workspace which is one that you can just create and then add a",
    "start": "415120",
    "end": "420880"
  },
  {
    "text": "solution to it and then add projects to the solution and add documents to the projects and that's really helpful for unit",
    "start": "420880",
    "end": "427599"
  },
  {
    "text": "testing and for hacking around and exploring uh roslyn and getting to know",
    "start": "427599",
    "end": "432720"
  },
  {
    "text": "it and then you have the ms build workspace which is the useful one that actually hooks in with the ms build process and",
    "start": "432720",
    "end": "439919"
  },
  {
    "text": "gives you useful information about the the types and the code that you're",
    "start": "439919",
    "end": "444960"
  },
  {
    "text": "working with and then you have the visual studio workspace if you install the visual",
    "start": "444960",
    "end": "450560"
  },
  {
    "text": "studio extensions option when you're installing visual studio then when you're writing an extension",
    "start": "450560",
    "end": "457280"
  },
  {
    "text": "you know the vsix thing you can get the current top level workspace from visual studio",
    "start": "457280",
    "end": "464160"
  },
  {
    "text": "and work with it inside your code and below the workspace we have a single",
    "start": "464160",
    "end": "471280"
  },
  {
    "text": "solution which you can load and from a solution file or you can create",
    "start": "471280",
    "end": "478160"
  },
  {
    "text": "in memory if you're using an ad hoc workspace and a solution contains multiple projects",
    "start": "478160",
    "end": "483520"
  },
  {
    "text": "and those will be c-sharp projects or vb projects but they can also be service",
    "start": "483520",
    "end": "488800"
  },
  {
    "text": "fabric projects or random kinds of of",
    "start": "488800",
    "end": "493919"
  },
  {
    "text": "all the different projects that you can have in visual studio basically and then projects contain documents and again",
    "start": "493919",
    "end": "500560"
  },
  {
    "text": "some of those documents are c-sharp documents and some of them are not",
    "start": "500560",
    "end": "506479"
  },
  {
    "text": "uh so we start out by locating a copy of ms build and this is what ms build",
    "start": "506479",
    "end": "512399"
  },
  {
    "text": "locator is for and so i hope this code is big enough",
    "start": "512399",
    "end": "517440"
  },
  {
    "text": "i i was so terrified of this first talk in",
    "start": "517440",
    "end": "522959"
  },
  {
    "text": "ages that i sat last night in my hotel room and i ran through the demos and just",
    "start": "522959",
    "end": "528320"
  },
  {
    "text": "screen grabbed them rather than trying to live code in front of you guys so i apologize if you love the thrill of live",
    "start": "528320",
    "end": "534720"
  },
  {
    "text": "coding it's not going to happen but the first thing you do in any roslin",
    "start": "534720",
    "end": "542160"
  },
  {
    "text": "project that's running from the command line so not in a visual studio extension but if you're building a console",
    "start": "542160",
    "end": "548160"
  },
  {
    "text": "application to do something funky is you run this ms build locator dot register defaults",
    "start": "548160",
    "end": "554000"
  },
  {
    "text": "and if you're running a net 6 console application it will go off and it will find the",
    "start": "554000",
    "end": "559279"
  },
  {
    "text": "net 6 version of ms build if you're running a net framework 4.8 application",
    "start": "559279",
    "end": "565040"
  },
  {
    "text": "it will go and find the full.net framework version of ms build and then",
    "start": "565040",
    "end": "570320"
  },
  {
    "text": "everything that you do after that will work with that version of ms build",
    "start": "570320",
    "end": "575680"
  },
  {
    "text": "super handy it has to be or it doesn't have to be the first thing you call in your application but it's a",
    "start": "575680",
    "end": "582240"
  },
  {
    "text": "hell of a good place to put it because if you call anything else ms build related before you've called ms build",
    "start": "582240",
    "end": "589360"
  },
  {
    "text": "at register defaults it'll just randomly choose an ms build environment based on",
    "start": "589360",
    "end": "594720"
  },
  {
    "text": "alphabetical order or the position of the sun or something and you won't know what the hell's going on",
    "start": "594720",
    "end": "601839"
  },
  {
    "text": "so then we create an ms build workspace and we can load a",
    "start": "601839",
    "end": "607680"
  },
  {
    "text": "solution into it and we add an event handler to workspace.workspace failed so that if",
    "start": "607680",
    "end": "613680"
  },
  {
    "text": "there are any compiler errors or problems loading that solution you will get them",
    "start": "613680",
    "end": "619600"
  },
  {
    "text": "printed out there and you can see why things are not working",
    "start": "619600",
    "end": "625360"
  },
  {
    "text": "there is a problem with this which i found out the very very hard way if you use the",
    "start": "626560",
    "end": "633279"
  },
  {
    "text": "net core version of roslyn and you try to load a full.net framework",
    "start": "633279",
    "end": "639040"
  },
  {
    "text": "solution into it it will not work because the ms build that is used for",
    "start": "639040",
    "end": "646480"
  },
  {
    "text": "the full.net framework has a whole bunch of targets files and those targets files",
    "start": "646480",
    "end": "651839"
  },
  {
    "text": "reference a whole bunch of full.net framework dlls which don't work in net",
    "start": "651839",
    "end": "657680"
  },
  {
    "text": "core and so uh you will just you'll it'll look like it's working but then",
    "start": "657680",
    "end": "663200"
  },
  {
    "text": "you'll find out that actually half the projects are showing as having no documents at all and you can't find the",
    "start": "663200",
    "end": "668880"
  },
  {
    "text": "things that you're looking for and those three months that you spent refactoring the engine of your visual reco tool to",
    "start": "668880",
    "end": "676560"
  },
  {
    "text": "run externally as a grpc process because you thought that would be good because visual studio is only 32-bit doesn't",
    "start": "676560",
    "end": "683839"
  },
  {
    "text": "actually work and you have to put it all back into visual studio and then microsoft released visual studio 2022",
    "start": "683839",
    "end": "690640"
  },
  {
    "text": "and that adds anyway that's my problem visual studio 2022 is at least 64-bit so",
    "start": "690640",
    "end": "698079"
  },
  {
    "text": "my terrible code is no longer going to cause out-of-memory exceptions as long as you've got 128 gigs of ram installed",
    "start": "698079",
    "end": "704800"
  },
  {
    "text": "in your pc and why would you try to run visual studio if you don't",
    "start": "704800",
    "end": "710720"
  },
  {
    "text": "okay so we've got our our solution and all our projects loaded into memory so",
    "start": "710720",
    "end": "716480"
  },
  {
    "text": "what's the basic unit of code of c sharp code when we want to work with that in",
    "start": "716480",
    "end": "722959"
  },
  {
    "text": "roslin well we start off with syntax trees so the way the compiler works and the",
    "start": "722959",
    "end": "730000"
  },
  {
    "text": "way most compilers work these days is you throw a load of text at it and it",
    "start": "730000",
    "end": "735279"
  },
  {
    "text": "tokenizes it and works out which bits of the text are individual components and those",
    "start": "735279",
    "end": "742560"
  },
  {
    "text": "can be keywords or open braces or comments or attributes or method names or identifiers or whatever",
    "start": "742560",
    "end": "749040"
  },
  {
    "text": "and it turns that into a syntax tree and syntax trees",
    "start": "749040",
    "end": "755519"
  },
  {
    "text": "we have at the top level we have a syntax tree and then we have a syntax node so the tree is a collection of",
    "start": "755519",
    "end": "760720"
  },
  {
    "text": "nodes and every single tiny smallest possible unit of code becomes a node in",
    "start": "760720",
    "end": "767200"
  },
  {
    "text": "that syntax tree and we have syntax tokens so a keyword",
    "start": "767200",
    "end": "773360"
  },
  {
    "text": "is a syntax token an identifier is a syntax token an open brace is a syntax token",
    "start": "773360",
    "end": "780320"
  },
  {
    "text": "and we also have syntax trivia and this is all the stuff in your code that is not actually code so comments are trivia",
    "start": "780320",
    "end": "788880"
  },
  {
    "text": "and white space is trivia and all of these things are contained in",
    "start": "788880",
    "end": "794720"
  },
  {
    "text": "this syntax tree and if you have installed visual studio sdk you get a really handy thing built",
    "start": "794720",
    "end": "801920"
  },
  {
    "text": "into visual studio that helps you understand this syntax tree which is called the syntax visualizer and you can",
    "start": "801920",
    "end": "809440"
  },
  {
    "text": "go to view other and about two two-thirds of the way down",
    "start": "809440",
    "end": "814480"
  },
  {
    "text": "there is a syntax visualizer no one-third of the way down uh there is a syntax visualizer option",
    "start": "814480",
    "end": "821120"
  },
  {
    "text": "and then you can dock that to the right side of your document well and as you click around your code in the",
    "start": "821120",
    "end": "828000"
  },
  {
    "text": "other side you can see where that is in the syntax tree and",
    "start": "828000",
    "end": "833360"
  },
  {
    "text": "this is a fantastic way when you're first starting with roslyn and you want to understand how syntax trees work just",
    "start": "833360",
    "end": "839920"
  },
  {
    "text": "load a little bit of code up nice simple bit of code and then just click around it and watch what's happening in the",
    "start": "839920",
    "end": "845519"
  },
  {
    "text": "syntax tree on the other side and you can see the node that you've got currently selected and then down the",
    "start": "845519",
    "end": "851839"
  },
  {
    "text": "bottom there's a nice property view that shows you all the properties that that node has",
    "start": "851839",
    "end": "857120"
  },
  {
    "text": "so that lets you get to grips with how the syntax tree works in your head and",
    "start": "857120",
    "end": "862639"
  },
  {
    "text": "and the concepts behind it so then you want to start navigating that syntax in your code and there are",
    "start": "862639",
    "end": "871600"
  },
  {
    "text": "two ways of doing this two primary ways of doing this and the first one and the simplest one for most c-sharp developers",
    "start": "871600",
    "end": "878959"
  },
  {
    "text": "is to use link because in the same way as we have link to xml",
    "start": "878959",
    "end": "884399"
  },
  {
    "text": "and you can say elements.elements.elements.elements and and do a nested query down into your",
    "start": "884399",
    "end": "892399"
  },
  {
    "text": "your xml document you can use link and do these queries down into your syntax",
    "start": "892399",
    "end": "898639"
  },
  {
    "text": "tree and so that looks like this so we've got our solution loaded which",
    "start": "898639",
    "end": "904480"
  },
  {
    "text": "came from our workspace and we passed that into our little demo function here and we say for",
    "start": "904480",
    "end": "913120"
  },
  {
    "text": "each var document in solution.projects.selectmanypd.document",
    "start": "913120",
    "end": "917959"
  },
  {
    "text": "so we get all the documents in the entire solution and then we say get the syntax route for this document",
    "start": "918959",
    "end": "925839"
  },
  {
    "text": "so that gets us the root node of the syntax tree for that document if it's not a c-sharp document then that will",
    "start": "925839",
    "end": "933519"
  },
  {
    "text": "come back as null so we can just ignore it and that could be sort of an appsettings.json file or any of the",
    "start": "933519",
    "end": "938880"
  },
  {
    "text": "things that are included in the project and then we can go into root.descendant",
    "start": "938880",
    "end": "944160"
  },
  {
    "text": "nodes so there's a root.child nodes which is just the first level of nodes",
    "start": "944160",
    "end": "949519"
  },
  {
    "text": "below the root root.descendant nodes is essentially an eye enumerable of every",
    "start": "949519",
    "end": "954639"
  },
  {
    "text": "single node in that entire document and so we can go through that and we can say we want to look for base type",
    "start": "954639",
    "end": "961120"
  },
  {
    "text": "declaration syntax so every node has a type that ends with syntax",
    "start": "961120",
    "end": "968560"
  },
  {
    "text": "and a class declaration or an interface declaration or an enum declaration or a",
    "start": "968560",
    "end": "974000"
  },
  {
    "text": "struct or a record now in c sharp 9 and 10",
    "start": "974000",
    "end": "979120"
  },
  {
    "text": "will be some type so classes class declaration syntax interfaces interface",
    "start": "979120",
    "end": "984240"
  },
  {
    "text": "declaration syntax i'll leave you to imagine what the rest of them might be but they all inherit from base type",
    "start": "984240",
    "end": "990240"
  },
  {
    "text": "declaration syntax so we can grab that out there and then that type declaration syntax node has an identifier property",
    "start": "990240",
    "end": "998320"
  },
  {
    "text": "which says this is what this thing is called and we can use that we can get the text property out of there",
    "start": "998320",
    "end": "1004480"
  },
  {
    "text": "we can get the namespace by so the namespace declaration syntax if",
    "start": "1004480",
    "end": "1011199"
  },
  {
    "text": "we do first and ancestor or self we can move back up the syntax tree looking for",
    "start": "1011199",
    "end": "1017040"
  },
  {
    "text": "the first node type that matches that and so that will be the namespace that contains the class declaration and then",
    "start": "1017040",
    "end": "1024160"
  },
  {
    "text": "we can put those two together and just write them out to the console and that will look like this",
    "start": "1024160",
    "end": "1029839"
  },
  {
    "text": "this is like seriously meta demo here because i'm running the application",
    "start": "1029839",
    "end": "1034959"
  },
  {
    "text": "against itself and so it's kind of enumerating through its own code and",
    "start": "1034959",
    "end": "1040480"
  },
  {
    "text": "printing it out to the console line so that works quite nicely",
    "start": "1040480",
    "end": "1046240"
  },
  {
    "text": "um but you can end up with some extremely complicated link code and you",
    "start": "1046240",
    "end": "1052400"
  },
  {
    "text": "can end up doing some nasty things that are not necessarily particularly performant and that becomes important",
    "start": "1052400",
    "end": "1058080"
  },
  {
    "text": "later on when you're trying to write an analyzer because essentially your analyzer visual studio is going to try",
    "start": "1058080",
    "end": "1064080"
  },
  {
    "text": "and run it every time the user presses a key or every time the user types a character",
    "start": "1064080",
    "end": "1069600"
  },
  {
    "text": "into their document so that's not necessarily the best way to traverse your code",
    "start": "1069600",
    "end": "1076640"
  },
  {
    "text": "and so we also have syntax walker and",
    "start": "1076640",
    "end": "1082080"
  },
  {
    "text": "just to be absolutely clear here there is a third type called syntax visitor",
    "start": "1082080",
    "end": "1087360"
  },
  {
    "text": "which is like syntax walker and it's easy to get them mixed up but the difference is",
    "start": "1087360",
    "end": "1093600"
  },
  {
    "text": "and and it's important to remember this syntax walker is good and syntax visitor",
    "start": "1093600",
    "end": "1100160"
  },
  {
    "text": "is absolutely useless don't use it",
    "start": "1100160",
    "end": "1105280"
  },
  {
    "text": "so with a syntax walker you inherit from the syntax c-sharp syntax walker based class",
    "start": "1105280",
    "end": "1113360"
  },
  {
    "text": "and then for every type of syntax node it has a virtual on-visit",
    "start": "1113360",
    "end": "1119760"
  },
  {
    "text": "or visit method that you can override so if i want to find class declarations i",
    "start": "1119760",
    "end": "1125280"
  },
  {
    "text": "can override visit class declaration if i want to find interface declarations and method declarations and parameters",
    "start": "1125280",
    "end": "1132640"
  },
  {
    "text": "and everything in your code there is an override method in there for it the really nice thing is",
    "start": "1132640",
    "end": "1138160"
  },
  {
    "text": "with intellisense you can just type override and then spend a happy 15 minutes scrolling up and down the",
    "start": "1138160",
    "end": "1143840"
  },
  {
    "text": "intellisense and going oh yes you can visit those and so this gives us a very efficient",
    "start": "1143840",
    "end": "1150240"
  },
  {
    "text": "way of walking across the entire uh syntax tree uh using basically the",
    "start": "1150240",
    "end": "1156240"
  },
  {
    "text": "visitor pattern but it's it's it's not don't use c-sharps in tax visitor because it only goes one level and then",
    "start": "1156240",
    "end": "1162880"
  },
  {
    "text": "you don't get the things that you're expecting so you want c sharp syntax walker although that is an implementation of the visitor pattern",
    "start": "1162880",
    "end": "1169760"
  },
  {
    "text": "visitor is a bad implement anyway so yes so this is another way of doing",
    "start": "1169760",
    "end": "1175600"
  },
  {
    "text": "this and then to use this these two screens are in the wrong order we just create a new instance of that",
    "start": "1175600",
    "end": "1182720"
  },
  {
    "text": "list types walker and then we go through the documents and for each document we",
    "start": "1182720",
    "end": "1188080"
  },
  {
    "text": "do get syntax root async and then we just say walker.visit and pass that syntax document in and it",
    "start": "1188080",
    "end": "1195039"
  },
  {
    "text": "will basically go through that in roughly the same way you can also say root.accept",
    "start": "1195039",
    "end": "1201280"
  },
  {
    "text": "and pass the walker in there as well that will work too i have no opinion on which one of those",
    "start": "1201280",
    "end": "1208240"
  },
  {
    "text": "is the best way to go and so that produces exactly the same output as the",
    "start": "1208240",
    "end": "1214159"
  },
  {
    "text": "previous demo but is technically it's a better way of of",
    "start": "1214159",
    "end": "1221039"
  },
  {
    "text": "working with the code it's a more efficient and memory uh friendly way of working with the code",
    "start": "1221039",
    "end": "1229200"
  },
  {
    "text": "but what we've got here is just essentially the tokens",
    "start": "1229360",
    "end": "1234640"
  },
  {
    "text": "wrapped in a nice tree that makes it easy to find them and navigate them and visit them and do whatever we want to do",
    "start": "1234640",
    "end": "1242000"
  },
  {
    "text": "we don't actually know what any of them mean so we might find a token that says",
    "start": "1242000",
    "end": "1248159"
  },
  {
    "text": "string with a capital s and we might think okay so that's going to be system.string but not necessarily",
    "start": "1248159",
    "end": "1256000"
  },
  {
    "text": "you could be working for a company that sells string and so it has an object called string",
    "start": "1256000",
    "end": "1263679"
  },
  {
    "text": "that they use all over the place and so if it's lowercase string the keyword string then it's probably system.string",
    "start": "1263679",
    "end": "1270159"
  },
  {
    "text": "but if it's an uppercase s then it could be the string that they sell and we don't know and trying to work that out",
    "start": "1270159",
    "end": "1278080"
  },
  {
    "text": "so going back up and finding all the using statements and seeing if you've got using system in there and does that",
    "start": "1278080",
    "end": "1283520"
  },
  {
    "text": "then mean string but is there a using string equals string code.string string",
    "start": "1283520",
    "end": "1290000"
  },
  {
    "text": "you it becomes complicated fortunately all of that is taken care of for us",
    "start": "1290000",
    "end": "1296559"
  },
  {
    "text": "because this is not just a c-sharp passer this is the whole c-sharp compiler and so we have something called",
    "start": "1296559",
    "end": "1303840"
  },
  {
    "text": "semantic models and these are the thing that really helps you to work with your code and",
    "start": "1303840",
    "end": "1310480"
  },
  {
    "text": "know what's going on so we compile our project so we can say await project",
    "start": "1310480",
    "end": "1317600"
  },
  {
    "text": "dot get compilation async and if the project's already been compiled that will just load stuff from the assembly",
    "start": "1317600",
    "end": "1324720"
  },
  {
    "text": "and if not it will compile it and then load stuff from the assembly and then we can get the model for that",
    "start": "1324720",
    "end": "1330799"
  },
  {
    "text": "compilation from we can get the model for the syntax tree",
    "start": "1330799",
    "end": "1336640"
  },
  {
    "text": "that we're working with from that compilation so we've got the document and we've got the syntax tree out of it",
    "start": "1336640",
    "end": "1342799"
  },
  {
    "text": "and we can say hey give me more intelligence give me more information about this syntax tree",
    "start": "1342799",
    "end": "1350000"
  },
  {
    "text": "and what we work with then is symbols so for every one of those syntax types",
    "start": "1350000",
    "end": "1356159"
  },
  {
    "text": "class declaration syntax and uh method declaration syntax all those",
    "start": "1356159",
    "end": "1361760"
  },
  {
    "text": "sorts of things there is an equivalent symbol in the semantic model",
    "start": "1361760",
    "end": "1367200"
  },
  {
    "text": "and we can grab that so for each of these documents we can get the syntax tree and we can compile",
    "start": "1367200",
    "end": "1373360"
  },
  {
    "text": "the project and then we can uh go through and we can combine this with",
    "start": "1373360",
    "end": "1380559"
  },
  {
    "text": "our link queries so we can say for this document get me all the type declarations",
    "start": "1380559",
    "end": "1385919"
  },
  {
    "text": "and then we can pass that in to our uh model and say give me the declared",
    "start": "1385919",
    "end": "1392000"
  },
  {
    "text": "symbol for this type declaration syntax and that will give you an i named type",
    "start": "1392000",
    "end": "1397679"
  },
  {
    "text": "symbol which is a lot more information so that'll tell you uh",
    "start": "1397679",
    "end": "1403919"
  },
  {
    "text": "everything about that type and then you that's got properties inside it so you can enumerate through methods and",
    "start": "1403919",
    "end": "1409200"
  },
  {
    "text": "properties and fields and constructors and everything about it and you can get",
    "start": "1409200",
    "end": "1414880"
  },
  {
    "text": "full type information namespace qualified so you can see if something is system.string or stringcompany.string",
    "start": "1414880",
    "end": "1422480"
  },
  {
    "text": "and and work through your code like that and it makes it so so much easier so you",
    "start": "1422480",
    "end": "1429120"
  },
  {
    "text": "can see here that we're getting the i named type symbol for our type declaration syntax",
    "start": "1429120",
    "end": "1434159"
  },
  {
    "text": "and then we can go through that and we can say symbol.getmembers and give me the method symbols from this",
    "start": "1434159",
    "end": "1442640"
  },
  {
    "text": "type symbol and that will give you all the methods public private internal and everything else",
    "start": "1442640",
    "end": "1448559"
  },
  {
    "text": "and then we've got this method symbol one of the properties on there is implicitly declared",
    "start": "1448559",
    "end": "1454080"
  },
  {
    "text": "so the c-sharp compiler bless its little heart will generate a whole bunch of",
    "start": "1454080",
    "end": "1459200"
  },
  {
    "text": "methods uh while it's compiling the code so if you have a property with a getter and a setter then the c-sharp compiler",
    "start": "1459200",
    "end": "1466400"
  },
  {
    "text": "will generate two methods for that property to set the hidden field that it's created for you",
    "start": "1466400",
    "end": "1474000"
  },
  {
    "text": "and so we can use method symbol that is implicitly declared to throw away all",
    "start": "1474000",
    "end": "1479120"
  },
  {
    "text": "the stuff that's been generated by the c-sharp compiler and this works with async methods and various other weird",
    "start": "1479120",
    "end": "1486320"
  },
  {
    "text": "things that happen in c sharp as well it's fascinating actually just to go through the",
    "start": "1486320",
    "end": "1492000"
  },
  {
    "text": "the syntax tree or the the symbol in the debugger and just explore all the",
    "start": "1492000",
    "end": "1498080"
  },
  {
    "text": "ethereal stuff that the c-sharp compiler gets up to behind your back so the output from that",
    "start": "1498080",
    "end": "1505039"
  },
  {
    "text": "um we have well the auto-generated extensions has an is auto-generated method and it",
    "start": "1505039",
    "end": "1511520"
  },
  {
    "text": "begins with auto-generated comment method and then we've got our roslindemo.dependencydemo",
    "start": "1511520",
    "end": "1516799"
  },
  {
    "text": "and so we get a lot more information this way and we can actually reason about the",
    "start": "1516799",
    "end": "1521840"
  },
  {
    "text": "types that we have in our solution there is",
    "start": "1521840",
    "end": "1527440"
  },
  {
    "text": "a symbol visitor class which works a bit like the c-sharp syntax walker class",
    "start": "1527440",
    "end": "1534080"
  },
  {
    "text": "except uh i have i tried to use it when i was first getting started with roslyn and i",
    "start": "1534080",
    "end": "1539840"
  },
  {
    "text": "found it less than useful so i don't tend to use it a lot but you",
    "start": "1539840",
    "end": "1546000"
  },
  {
    "text": "can you can create a symbol visitor which looks like this and it works in",
    "start": "1546000",
    "end": "1551120"
  },
  {
    "text": "exactly the same way as the syntax walker you pass a semantic model object like an eye name type symbol or",
    "start": "1551120",
    "end": "1557440"
  },
  {
    "text": "something into it and it goes through and it visits all the items below that",
    "start": "1557440",
    "end": "1563360"
  },
  {
    "text": "uh in the um in the symbol but i tend to just go through the",
    "start": "1563360",
    "end": "1568799"
  },
  {
    "text": "properties and sort of get members of type method symbol and that sort of thing",
    "start": "1568799",
    "end": "1574000"
  },
  {
    "text": "but so yeah we can see here we've got a visit named type and then if we go into",
    "start": "1574000",
    "end": "1579840"
  },
  {
    "text": "that we can find all the named types within our",
    "start": "1579840",
    "end": "1584880"
  },
  {
    "text": "symbol whatever that might be and if it's the top level then it would be like an i namespace symbol and then within that we can revisit",
    "start": "1584880",
    "end": "1593279"
  },
  {
    "text": "using the same visitor to find method symbols so this doesn't traverse down the entire tree you",
    "start": "1593279",
    "end": "1599679"
  },
  {
    "text": "actually have to take control of it and say okay when you find a name type then go into it and visit it again looking",
    "start": "1599679",
    "end": "1606960"
  },
  {
    "text": "for method symbols and visit property",
    "start": "1606960",
    "end": "1612400"
  },
  {
    "text": "and visit method will print things out to the console like this and so now we can see",
    "start": "1612400",
    "end": "1618320"
  },
  {
    "text": "that none of the classes i have in this demo have any properties which is completely pointless",
    "start": "1618320",
    "end": "1624880"
  },
  {
    "text": "but uh yeah so let's talk about doing something",
    "start": "1624880",
    "end": "1629919"
  },
  {
    "text": "useful with this let's see if we can find all the types that are used by all the code in our",
    "start": "1629919",
    "end": "1637840"
  },
  {
    "text": "project so we can go in to our solution and we can say go through each project and for",
    "start": "1637840",
    "end": "1644399"
  },
  {
    "text": "each project we're going to get the compilation which is the in-memory proper representation of of what",
    "start": "1644399",
    "end": "1649919"
  },
  {
    "text": "everything means and then we can go through the documents and we can check to see if the document",
    "start": "1649919",
    "end": "1655919"
  },
  {
    "text": "is auto-generated and this is actually really important in modern",
    "start": "1655919",
    "end": "1660960"
  },
  {
    "text": "c-sharp code as well because as of c-sharp 8 or 9",
    "start": "1660960",
    "end": "1667120"
  },
  {
    "text": "and net core projects in particular you might have noticed we don't have an assembly info.cs file in our.net or net",
    "start": "1667120",
    "end": "1675360"
  },
  {
    "text": "core projects anymore because it's auto-generated from the cs proj file but it is hiding",
    "start": "1675360",
    "end": "1680799"
  },
  {
    "text": "there somewhere in your project and it will be one of the documents that gets enumerated when you go to",
    "start": "1680799",
    "end": "1686880"
  },
  {
    "text": "project.documents it's kind of assemblyinfo.g.cs and now we also have source generators",
    "start": "1686880",
    "end": "1693760"
  },
  {
    "text": "which are generating random code which is also hiding in our documents tree somewhere and we don't necessarily want",
    "start": "1693760",
    "end": "1700559"
  },
  {
    "text": "to be going through those so i've got an extension method called uh",
    "start": "1700559",
    "end": "1705840"
  },
  {
    "text": "is auto-generated which looks for a comment at the top of the file containing the words auto generated",
    "start": "1705840",
    "end": "1712080"
  },
  {
    "text": "or looks to see if the document extension is dot g dot cs",
    "start": "1712080",
    "end": "1718880"
  },
  {
    "text": "if you have something that is generating code and if you're into the idea of source generators and you didn't go to",
    "start": "1718880",
    "end": "1724640"
  },
  {
    "text": "the talk that was in here or room 5 yesterday somebody did a very good talk about",
    "start": "1724640",
    "end": "1729679"
  },
  {
    "text": "source generators which would be great to watch after this one",
    "start": "1729679",
    "end": "1734960"
  },
  {
    "text": "then and if you came here thinking this was going to be about source generators i apologize um",
    "start": "1734960",
    "end": "1740799"
  },
  {
    "text": "please feel free to to complain um but yes so",
    "start": "1740799",
    "end": "1747440"
  },
  {
    "text": "if it's not auto if it's auto generated ignore it otherwise get the syntax tree and then",
    "start": "1747440",
    "end": "1752640"
  },
  {
    "text": "get the root of that syntax tree uh check just one more time to make sure it's really not auto generated um",
    "start": "1752640",
    "end": "1759520"
  },
  {
    "text": "and then get the semantic model and for each of the named type symbols",
    "start": "1759520",
    "end": "1766159"
  },
  {
    "text": "that we have in this syntax node which we get here we have name type so we go",
    "start": "1766159",
    "end": "1772559"
  },
  {
    "text": "node.descendant node.of type identifier name syntax so that is a",
    "start": "1772559",
    "end": "1778840"
  },
  {
    "text": "a variable declaration or a property declaration or something like that",
    "start": "1778840",
    "end": "1784240"
  },
  {
    "text": "and we also have expression syntax which is going to be like a literal string or",
    "start": "1784240",
    "end": "1789840"
  },
  {
    "text": "three plus two or a plus b or any sort of anything that's an expression and not",
    "start": "1789840",
    "end": "1795200"
  },
  {
    "text": "a statement and from that if you have an expression that is uh",
    "start": "1795200",
    "end": "1800240"
  },
  {
    "text": "you've got two integers and you uh called a and b then you have an expression a plus b",
    "start": "1800240",
    "end": "1806320"
  },
  {
    "text": "and the type of that expression is int and so you can get that name type symbol",
    "start": "1806320",
    "end": "1811600"
  },
  {
    "text": "back out and say this is an integer expression and then we can return those back",
    "start": "1811600",
    "end": "1818399"
  },
  {
    "text": "and then we can do uh this which shows us every type that",
    "start": "1818399",
    "end": "1824159"
  },
  {
    "text": "is used by any of those identifiers or expressions in your entire project and",
    "start": "1824159",
    "end": "1830080"
  },
  {
    "text": "you could use this for example to go am i using anything from system.link.xml",
    "start": "1830080",
    "end": "1836000"
  },
  {
    "text": "and if i'm not then i can remove the reference to system.link.xml from my project",
    "start": "1836000",
    "end": "1843120"
  },
  {
    "text": "but the fun bit comes when you start rewriting code where you want to make",
    "start": "1844880",
    "end": "1850159"
  },
  {
    "text": "changes to code or you want to generate a new version of code when you're going through net 4 code and looking for",
    "start": "1850159",
    "end": "1857120"
  },
  {
    "text": "things that won't work in net 6 and putting comments around it to say don't",
    "start": "1857120",
    "end": "1862480"
  },
  {
    "text": "do this or putting if deaths around it or that sort of thing and rerude in roslyn at first is",
    "start": "1862480",
    "end": "1870640"
  },
  {
    "text": "extremely challenging because there's a feature that's built into roslyn that was a",
    "start": "1870640",
    "end": "1877039"
  },
  {
    "text": "fundamental design goal right from the start and that is immutability",
    "start": "1877039",
    "end": "1884000"
  },
  {
    "text": "so things in roslin are immutable syntax nodes are immutable if you change them",
    "start": "1884000",
    "end": "1890720"
  },
  {
    "text": "it becomes a new syntax node and this goes right the way through the whole",
    "start": "1890720",
    "end": "1896799"
  },
  {
    "text": "compiler project what things in roslyn are immutable",
    "start": "1896799",
    "end": "1902080"
  },
  {
    "text": "everything literally everything anything that you change will create a new version of that",
    "start": "1902080",
    "end": "1908880"
  },
  {
    "text": "thing which you then have to say this is now the actual version of this thing that i want to use so the solution if",
    "start": "1908880",
    "end": "1917200"
  },
  {
    "text": "you change a syntax node in a document somewhere you have created a new version",
    "start": "1917200",
    "end": "1923600"
  },
  {
    "text": "of the solution right at the top level god knows what this does to memory it it",
    "start": "1923600",
    "end": "1929279"
  },
  {
    "text": "horrifies me but there's everything in here is immutable um does anybody use",
    "start": "1929279",
    "end": "1934960"
  },
  {
    "text": "system.collections.immutable the nougat package it's super handy you've got immutable dictionaries and",
    "start": "1934960",
    "end": "1941279"
  },
  {
    "text": "immutable arrays and immutable lists and immutable hash maps and every list or array anywhere in",
    "start": "1941279",
    "end": "1949679"
  },
  {
    "text": "roslyn is going to be one of those collection types that entire nuget package was basically created by the",
    "start": "1949679",
    "end": "1956720"
  },
  {
    "text": "roslin team because they needed it for their compiler and so that makes it quite difficult if",
    "start": "1956720",
    "end": "1963519"
  },
  {
    "text": "you're just linking or visiting through your nodes if you change something how",
    "start": "1963519",
    "end": "1969519"
  },
  {
    "text": "do you make that flow back so that that becomes the canonical version of the solution",
    "start": "1969519",
    "end": "1977120"
  },
  {
    "text": "and so we don't work in that way when we're trying to rewrite code we use the c-sharp syntax",
    "start": "1977120",
    "end": "1984799"
  },
  {
    "text": "rewriter and this is just like the c-sharp syntax walker",
    "start": "1984799",
    "end": "1990399"
  },
  {
    "text": "but where the c-sharp syntax walker all the methods return void in the c-sharp syntax rewriter all the",
    "start": "1990399",
    "end": "1997760"
  },
  {
    "text": "methods return a syntax node so you take a syntax node in and if you",
    "start": "1997760",
    "end": "2004640"
  },
  {
    "text": "want to change it then you modify it and you return your modified syntax node back out of the",
    "start": "2004640",
    "end": "2012080"
  },
  {
    "text": "method if you don't want to change it you return the original node that you were passed",
    "start": "2012080",
    "end": "2018799"
  },
  {
    "text": "in or actually return base.visit literal expression because you never know what's going on in the base method might be",
    "start": "2018799",
    "end": "2024640"
  },
  {
    "text": "nothing always best to call it and if you want to remove the syntax",
    "start": "2024640",
    "end": "2029840"
  },
  {
    "text": "node entirely if you just go no that's a terrible syntax node i don't like it i want it to go away then you can return",
    "start": "2029840",
    "end": "2036159"
  },
  {
    "text": "null and it will disappear forever and if you do that accidentally and then ship the code that does it you can make",
    "start": "2036159",
    "end": "2043039"
  },
  {
    "text": "people very very very very unhappy i know",
    "start": "2043039",
    "end": "2049679"
  },
  {
    "text": "so this is how we do this from the top level we go through our projects and we get our compilation and then we go",
    "start": "2050159",
    "end": "2056240"
  },
  {
    "text": "through our documents and we get our syntax root and then we",
    "start": "2056240",
    "end": "2061358"
  },
  {
    "text": "create a string literal up shifter which is the most useful utility uh class in",
    "start": "2061359",
    "end": "2067118"
  },
  {
    "text": "the entire world it will just go through your entire c-sharp project and it will find any literal strings you",
    "start": "2067119",
    "end": "2074560"
  },
  {
    "text": "have anywhere in the whole thing and it will add to upper invariant at the end of them",
    "start": "2074560",
    "end": "2081358"
  },
  {
    "text": "and then your application will become shouty",
    "start": "2081359",
    "end": "2086638"
  },
  {
    "text": "i am thinking of releasing this as an actual visual studio extension and just calling it shouty",
    "start": "2086639",
    "end": "2092638"
  },
  {
    "text": "um and seeing how many people download it and install it that could be fun i only have one visual suit i've got",
    "start": "2092639",
    "end": "2099760"
  },
  {
    "text": "two visual studio extensions one is visual recode the other which sadly doesn't work",
    "start": "2099760",
    "end": "2105599"
  },
  {
    "text": "anymore was just called no git and all it did you know it's impossible",
    "start": "2105599",
    "end": "2110800"
  },
  {
    "text": "to turn off the git integration in visual studio and all it did back in visual studio 2015 was every time it got",
    "start": "2110800",
    "end": "2118079"
  },
  {
    "text": "turned on it turned off again it was surprisingly popular",
    "start": "2118079",
    "end": "2124160"
  },
  {
    "text": "but anyway back to this so we get the semantic model and then we pass",
    "start": "2124160",
    "end": "2129760"
  },
  {
    "text": "we create a new string literal up shifter so this is a syntax walker but",
    "start": "2129760",
    "end": "2135520"
  },
  {
    "text": "we want to have the information about the uh that we want the semantic model passed into it and so when you're",
    "start": "2135520",
    "end": "2142160"
  },
  {
    "text": "creating a c-sharp syntax walker or a c-sharp syntax rewriter you get the model and then you pass it in when you",
    "start": "2142160",
    "end": "2148960"
  },
  {
    "text": "create the rewriter or the visitor or the walker and then it can use it internally and",
    "start": "2148960",
    "end": "2154320"
  },
  {
    "text": "then you just say create a new route by passing this route",
    "start": "2154320",
    "end": "2159440"
  },
  {
    "text": "into that syntax rewriter and then when you get that back uh there is a",
    "start": "2159440",
    "end": "2166079"
  },
  {
    "text": "is equivalent to method that will compare two syntax trees",
    "start": "2166079",
    "end": "2171200"
  },
  {
    "text": "and work out if they are the same because you might get the same syntax",
    "start": "2171200",
    "end": "2176800"
  },
  {
    "text": "tree back you might sort of think you've made changes but actually you haven't and so use this is equivalent to to say",
    "start": "2176800",
    "end": "2183359"
  },
  {
    "text": "are these basically the same code if it's not then we actually have to call solution",
    "start": "2183359",
    "end": "2189839"
  },
  {
    "text": "dot with document syntax root which will update the solution update the project",
    "start": "2189839",
    "end": "2195839"
  },
  {
    "text": "and and make the new solution the one that includes those changes",
    "start": "2195839",
    "end": "2201200"
  },
  {
    "text": "and then at the end we have to say if the new solution is not the same as",
    "start": "2201200",
    "end": "2206800"
  },
  {
    "text": "the solution that is in the current workspace then we call workspace.try apply changes and pass a new solution in",
    "start": "2206800",
    "end": "2214640"
  },
  {
    "text": "and this gets really fun because if some other code running on some other",
    "start": "2214640",
    "end": "2220960"
  },
  {
    "text": "thread at the same time has also made changes to the solution which are",
    "start": "2220960",
    "end": "2226640"
  },
  {
    "text": "incompatible with yours this is essentially like a git merge and you could have conflicts and so when you",
    "start": "2226640",
    "end": "2232880"
  },
  {
    "text": "call workspace.try apply changes what you should be doing is checking the boolean result and if it's false that",
    "start": "2232880",
    "end": "2240720"
  },
  {
    "text": "means the changes you're trying to make conflict with the changes that some other bit of code has made somewhere and",
    "start": "2240720",
    "end": "2247040"
  },
  {
    "text": "what you need to do is go right back up to the top and start again with the current solution and hope that it",
    "start": "2247040",
    "end": "2254000"
  },
  {
    "text": "doesn't happen the second time through three or four times around that loop is usually enough depending on how many",
    "start": "2254000",
    "end": "2259680"
  },
  {
    "text": "extensions and how many analyzers you have included in your project",
    "start": "2259680",
    "end": "2266480"
  },
  {
    "text": "so that would take this code here and turn it into this code here",
    "start": "2266720",
    "end": "2274240"
  },
  {
    "text": "and and that's basically it that's that's a syntax rewriter i will put all this code up onto github",
    "start": "2274560",
    "end": "2282560"
  },
  {
    "text": "at the end of the talk so that you can actually go and and find it and do useful things with it",
    "start": "2282560",
    "end": "2289200"
  },
  {
    "text": "so that's fun and you can write code that generates c sharp code and you can write code that reads c sharp code and",
    "start": "2289200",
    "end": "2295200"
  },
  {
    "text": "then generates other things based on it and you can do fun stuff with that if you don't like doc fx then you could",
    "start": "2295200",
    "end": "2301200"
  },
  {
    "text": "write your own doc fx by going through and finding the uh synth the doc",
    "start": "2301200",
    "end": "2306400"
  },
  {
    "text": "comments on all your members but the point at which this becomes really useful is with rosalind analyzers",
    "start": "2306400",
    "end": "2314960"
  },
  {
    "text": "which i mentioned at the start so you might notice these days",
    "start": "2314960",
    "end": "2320000"
  },
  {
    "text": "if you use x unit it comes with its own squiggles and it tells you that if you've got a theory",
    "start": "2320000",
    "end": "2328160"
  },
  {
    "text": "and then you've got inline parameters and the number of arguments you put in",
    "start": "2328160",
    "end": "2333520"
  },
  {
    "text": "the inline parameters doesn't match the number of arguments in your test method",
    "start": "2333520",
    "end": "2338560"
  },
  {
    "text": "you'll get a squiggle that pops up under the theory that says this isn't going to",
    "start": "2338560",
    "end": "2343760"
  },
  {
    "text": "work and there's a whole bunch of stuff in there and most microsoft projects asp.net core comes with a bunch of",
    "start": "2343760",
    "end": "2350400"
  },
  {
    "text": "analyzers that help you asp.net core properly entity framework core comes with a bunch of analyzers that help you",
    "start": "2350400",
    "end": "2356640"
  },
  {
    "text": "do that properly weirdly enough rosslyn comes with a bunch of analyzers that pops up",
    "start": "2356640",
    "end": "2362960"
  },
  {
    "text": "squiggles and says you're doing roslyn wrong we've used roslyn to work out that you're doing roslyn wrong how meta would",
    "start": "2362960",
    "end": "2370160"
  },
  {
    "text": "you like this to get so",
    "start": "2370160",
    "end": "2375440"
  },
  {
    "text": "the the really helpful thing with this if you work in a company where you've got some shared code you've got",
    "start": "2375520",
    "end": "2382240"
  },
  {
    "text": "something that you do a lot and you've written a nice utility library to wrap around it to help you work with that or",
    "start": "2382240",
    "end": "2389680"
  },
  {
    "text": "you've got a shared repository project or whatever you can write your own analyzers and include",
    "start": "2389680",
    "end": "2396960"
  },
  {
    "text": "them in the same nuget package as a as a dependency and then when people",
    "start": "2396960",
    "end": "2404079"
  },
  {
    "text": "download your library and try to use it you can help them you can be there looking over their shoulder and going oh",
    "start": "2404079",
    "end": "2410720"
  },
  {
    "text": "no that's that's not the right way to do that i was working at uh one of the large",
    "start": "2410720",
    "end": "2417839"
  },
  {
    "text": "banks and working in a wpf application and we were trying to work out why the",
    "start": "2417839",
    "end": "2424400"
  },
  {
    "text": "hell it was so slow and the answer turned out to be because we wrote it in wpf obviously",
    "start": "2424400",
    "end": "2430720"
  },
  {
    "text": "um but we thought we should do what we can to try and make it faster and so i spent a lot of time instrumenting the",
    "start": "2430720",
    "end": "2437280"
  },
  {
    "text": "entire application so that we could see how long various things that were happening as windows were created was",
    "start": "2437280",
    "end": "2443839"
  },
  {
    "text": "and to do this we were one team and there were about 10",
    "start": "2443839",
    "end": "2450240"
  },
  {
    "text": "000 developers at this bank and about two and a half thousand of them use",
    "start": "2450240",
    "end": "2455599"
  },
  {
    "text": "dotnet and if you want to introduce a new package like app metrics for example",
    "start": "2455599",
    "end": "2463359"
  },
  {
    "text": "into that ecosystem that's about six months of meetings and filling out forms",
    "start": "2463359",
    "end": "2468640"
  },
  {
    "text": "and and putting a case together and everything else if you want to bring in something from system",
    "start": "2468640",
    "end": "2474400"
  },
  {
    "text": "something from microsoft that's no problem at all and microsoft as part of the.net core project created",
    "start": "2474400",
    "end": "2481520"
  },
  {
    "text": "this thing called system.diagnostics.diagnostic source which essentially let you track",
    "start": "2481520",
    "end": "2487280"
  },
  {
    "text": "activities and create events and everything else and then you can just read those out and write them to",
    "start": "2487280",
    "end": "2492400"
  },
  {
    "text": "wherever you want to write them to an influx database or prometheus or something like that and so i introduced this idea of using",
    "start": "2492400",
    "end": "2499680"
  },
  {
    "text": "diagnostic source so you work with that you create a diagnostic listener and",
    "start": "2499680",
    "end": "2507040"
  },
  {
    "text": "when you call it you just write a string to identify what your event was and then an anonymous object which",
    "start": "2507040",
    "end": "2514000"
  },
  {
    "text": "contains effectively all the tags and useful information and the name of the window and the thread id and all that",
    "start": "2514000",
    "end": "2521440"
  },
  {
    "text": "sort of stuff that you might want and the key thing here is we have a wpf application and we're",
    "start": "2521440",
    "end": "2528800"
  },
  {
    "text": "trying to make it faster and i want to add code and so people are going that's going to",
    "start": "2528800",
    "end": "2534880"
  },
  {
    "text": "slow it down and so diagnostic source has this thing where if you've attached",
    "start": "2534880",
    "end": "2540480"
  },
  {
    "text": "a listener to it then it will uh it will do something but if you haven't attached",
    "start": "2540480",
    "end": "2546400"
  },
  {
    "text": "a listener to it then you can just ignore it and so doing this is wrong",
    "start": "2546400",
    "end": "2551599"
  },
  {
    "text": "because every time this static void bar gets called we're going to create a new anonymous object and set a to 42.",
    "start": "2551599",
    "end": "2558400"
  },
  {
    "text": "we don't want to do that what we want to do is check to see if the diagnostic",
    "start": "2558400",
    "end": "2563520"
  },
  {
    "text": "source is actually enabled if something's listening to it and is listening for the event we're about to",
    "start": "2563520",
    "end": "2569760"
  },
  {
    "text": "post then we call diagnostic right now this is a nightmare who uses",
    "start": "2569760",
    "end": "2576960"
  },
  {
    "text": "microsoft.extensions.logging in their code who every time you call underscore",
    "start": "2576960",
    "end": "2585680"
  },
  {
    "text": "logger dot log information prefixes that with if logger dot is enabled log level",
    "start": "2585680",
    "end": "2591839"
  },
  {
    "text": "dot information bad bad people bad",
    "start": "2591839",
    "end": "2597040"
  },
  {
    "text": "you should if you look in the dot net core code if you look in the asp.net core code they",
    "start": "2597040",
    "end": "2602319"
  },
  {
    "text": "do that actually.net six people are so terrible at this that dot net 6 now includes source generators so",
    "start": "2602319",
    "end": "2609599"
  },
  {
    "text": "you can create a log method and it will generate that boilerplate code for you",
    "start": "2609599",
    "end": "2614960"
  },
  {
    "text": "and prevent allocations and prevent logging from happening at all and creating objects and doing all this sort",
    "start": "2614960",
    "end": "2620160"
  },
  {
    "text": "of stuff and so i wanted something like that for this diagnostic source so that when you said diagnostics dot write",
    "start": "2620160",
    "end": "2627119"
  },
  {
    "text": "something it would do the little squiggle and say you should check to see if this source is enabled",
    "start": "2627119",
    "end": "2632560"
  },
  {
    "text": "and ideally be able to add that bit of code to say if diagnostic source dot is enabled",
    "start": "2632560",
    "end": "2640960"
  },
  {
    "text": "so if you go into visual studio project templates you will find one of them is analyzer with",
    "start": "2640960",
    "end": "2647880"
  },
  {
    "text": "codefix.net standard these are the rosalind based templates and analyzer",
    "start": "2647880",
    "end": "2653760"
  },
  {
    "text": "with codefix.net standard will create a project that has your analyzer",
    "start": "2653760",
    "end": "2659280"
  },
  {
    "text": "and um a unit test project so you can test your",
    "start": "2659280",
    "end": "2666319"
  },
  {
    "text": "analyzer and a vsix project so if you want to you can package your analyzer up as a visual",
    "start": "2666319",
    "end": "2672880"
  },
  {
    "text": "studio extension and distribute it through the marketplace or just email a vsix to your friends",
    "start": "2672880",
    "end": "2680240"
  },
  {
    "text": "and an analyzer has two important components one of them is the diagnostic",
    "start": "2680240",
    "end": "2685440"
  },
  {
    "text": "analyzer that's the thing that looks at the code and returns something out to say that's not right you've done it",
    "start": "2685440",
    "end": "2691520"
  },
  {
    "text": "wrong you're the worst programmer ever you should have been a farmer and the codefix provider which is the",
    "start": "2691520",
    "end": "2698079"
  },
  {
    "text": "thing that jumps in for you and goes never mind farming's a dying industry anyway let's see if we can help you get",
    "start": "2698079",
    "end": "2704560"
  },
  {
    "text": "this right so this is an analyzer",
    "start": "2704560",
    "end": "2710720"
  },
  {
    "text": "it has a crap load of boilerplate code the thing i really like about it is that",
    "start": "2710720",
    "end": "2716079"
  },
  {
    "text": "the boilerplate code causes squiggles so the boilerplate code for writing an",
    "start": "2716079",
    "end": "2721520"
  },
  {
    "text": "analyzer is triggering the analyzer that's analyzing the boilerplate",
    "start": "2721520",
    "end": "2726640"
  },
  {
    "text": "like i say this gets really um recursive but no so we have a diagnostic",
    "start": "2726640",
    "end": "2733839"
  },
  {
    "text": "descriptor uh which says this is the uh the description this is what this thing",
    "start": "2733839",
    "end": "2739599"
  },
  {
    "text": "is looking for um we've got some localizable strings which i've collapsed there because i don't localize my code",
    "start": "2739599",
    "end": "2745920"
  },
  {
    "text": "just speak english and we have a list of supported",
    "start": "2745920",
    "end": "2752560"
  },
  {
    "text": "diagnostics so that we can tell essentially the visual studio runtime or the rider runtime or by the way pro tip",
    "start": "2752560",
    "end": "2760960"
  },
  {
    "text": "who uses visual studio code who misses all the helpful sort of",
    "start": "2760960",
    "end": "2767040"
  },
  {
    "text": "things from resharper or visual studio when you're editing c sharp code so if you go into the settings",
    "start": "2767040",
    "end": "2773520"
  },
  {
    "text": "in the c-sharp extension settings in visual studio code there is a check box",
    "start": "2773520",
    "end": "2778880"
  },
  {
    "text": "which is not checked by default that says enable analyzers and if you turn",
    "start": "2778880",
    "end": "2784000"
  },
  {
    "text": "that on you get extract method and initialize read-only field and all the",
    "start": "2784000",
    "end": "2789520"
  },
  {
    "text": "things that you have in visual studio apparently the reason it's turned off is because it uses a bit of memory",
    "start": "2789520",
    "end": "2795599"
  },
  {
    "text": "but we're developers we've got memory to spare unless we work for a big enterprise company who doesn't know why",
    "start": "2795599",
    "end": "2802079"
  },
  {
    "text": "we can't use the same spec of machine to develop the software that other people use to run the software",
    "start": "2802079",
    "end": "2808079"
  },
  {
    "text": "and and if that's you then i feel your pain then we get down to the bit that",
    "start": "2808079",
    "end": "2814240"
  },
  {
    "text": "actually does something useful we have our analyze mode analyze node method and",
    "start": "2814240",
    "end": "2820640"
  },
  {
    "text": "in here we can look at the node that we get from our analysis",
    "start": "2820640",
    "end": "2826000"
  },
  {
    "text": "context and we can say is this a diagnostic method diagnostic",
    "start": "2826000",
    "end": "2831839"
  },
  {
    "text": "source method invocation is it uh calling right on a diagnostic",
    "start": "2831839",
    "end": "2836960"
  },
  {
    "text": "source and we're going to pass in our semantic model which we're also getting from the context there which is coming",
    "start": "2836960",
    "end": "2842559"
  },
  {
    "text": "from the current compilation of the project and then we can call another method that says is this guarded is there an is",
    "start": "2842559",
    "end": "2849760"
  },
  {
    "text": "enabled check around it anywhere and if it's not then we can return a diagnostic",
    "start": "2849760",
    "end": "2856400"
  },
  {
    "text": "that will then generate the handy green or red squiggles and we can",
    "start": "2856400",
    "end": "2862480"
  },
  {
    "text": "control that with this diagnostic severity dot warning so if you do diagnostic severity dot warning that's",
    "start": "2862480",
    "end": "2868480"
  },
  {
    "text": "green squiggles if you do diagnostic severity error that's red squiggles",
    "start": "2868480",
    "end": "2874559"
  },
  {
    "text": "so our isguarded method looks like this we can",
    "start": "2874559",
    "end": "2880240"
  },
  {
    "text": "look at the expression and say is that a literal expression syntax so are we",
    "start": "2880240",
    "end": "2887760"
  },
  {
    "text": "calling um is enabled on on the literal um",
    "start": "2887760",
    "end": "2896640"
  },
  {
    "text": "otherwise do we have a matching symbol that has is enabled called on it",
    "start": "2896640",
    "end": "2903280"
  },
  {
    "text": "matching symbol exists can just look back up the parents of our current syntax node and see if any of them are",
    "start": "2903280",
    "end": "2911200"
  },
  {
    "text": "an if statement and if they are an if statement then is the expression inside that if",
    "start": "2911200",
    "end": "2916880"
  },
  {
    "text": "statement acting on our diagnostic source um symbol and if it is is it calling the",
    "start": "2916880",
    "end": "2924240"
  },
  {
    "text": "uh is enabled so we got this is diagnostic source method invocation",
    "start": "2924240",
    "end": "2929359"
  },
  {
    "text": "is enabled and if we don't find that anywhere between our diagnostic source dot right",
    "start": "2929359",
    "end": "2936079"
  },
  {
    "text": "and the top of wherever we get to so like the method declaration or property",
    "start": "2936079",
    "end": "2941119"
  },
  {
    "text": "declaration then we're going to say",
    "start": "2941119",
    "end": "2946319"
  },
  {
    "text": "if we find it we say yes it's being called otherwise we just return false out of this",
    "start": "2946319",
    "end": "2952160"
  },
  {
    "text": "similar thing when we're looking with literals going back up and we have to match symbols and literals because the",
    "start": "2952160",
    "end": "2959040"
  },
  {
    "text": "in the node that we're looking at could be either of those and then",
    "start": "2959040",
    "end": "2965839"
  },
  {
    "text": "so that will generate the green squiggles saying hey you're using diagnostic source.right without any",
    "start": "2965839",
    "end": "2970960"
  },
  {
    "text": "enable check so that's told the programmer that they're a bad person and should rethink their life choices",
    "start": "2970960",
    "end": "2978079"
  },
  {
    "text": "and then we have the codefix provider and these are a little bit more complicated to write",
    "start": "2978079",
    "end": "2984480"
  },
  {
    "text": "but essentially we are going to find",
    "start": "2984480",
    "end": "2989760"
  },
  {
    "text": "so we register our code fixes we say these are the diagnostic source or the diagnostic warnings it was a bad idea to",
    "start": "2989760",
    "end": "2996960"
  },
  {
    "text": "use this because i'm talking about visual studio diagnostics on one hand and then this diagnostic source on the",
    "start": "2996960",
    "end": "3002160"
  },
  {
    "text": "other hand i'll fix this for the next time i do this talk so yeah we basically say we have a code",
    "start": "3002160",
    "end": "3008480"
  },
  {
    "text": "fix for when you get that warning saying diagnostic source should be guarded with",
    "start": "3008480",
    "end": "3013599"
  },
  {
    "text": "an is-enabled call and so we can register our code fix here",
    "start": "3013599",
    "end": "3019119"
  },
  {
    "text": "and then we have this bit of code here and it's quite dense but i think this really highlights the",
    "start": "3019119",
    "end": "3026079"
  },
  {
    "text": "fact that rosalind is incredibly powerful and enables you",
    "start": "3026079",
    "end": "3031200"
  },
  {
    "text": "to do some really quite clever things with a fairly minimal amount of code and",
    "start": "3031200",
    "end": "3037280"
  },
  {
    "text": "without really having to know too much about compilers and syntax trees and everything else",
    "start": "3037280",
    "end": "3042480"
  },
  {
    "text": "because this is a method that fits on a single screen at 1920 by 1080 with a",
    "start": "3042480",
    "end": "3049200"
  },
  {
    "text": "reasonable font size and this is enough to wrap that diagnostic source dot right",
    "start": "3049200",
    "end": "3055520"
  },
  {
    "text": "with an if diagnostic source dot is enabled so we just say uh we've got our",
    "start": "3055520",
    "end": "3061359"
  },
  {
    "text": "expression which is going to be our diagnostic source dot right and we can just get the",
    "start": "3061359",
    "end": "3067359"
  },
  {
    "text": "leading trivia off it whatever that might be which is probably white space and then",
    "start": "3067359",
    "end": "3073359"
  },
  {
    "text": "into at the end of the white space we can just add if diagnostic source dot is",
    "start": "3073359",
    "end": "3078480"
  },
  {
    "text": "enabled i'm going to step out here and use the laser pointer to point out where",
    "start": "3078480",
    "end": "3084400"
  },
  {
    "text": "these things are happening it's very precarious up here um so yes",
    "start": "3084400",
    "end": "3091520"
  },
  {
    "text": "uh so we've got is enabled here we're going to pass a syntax factory so this is what",
    "start": "3091520",
    "end": "3098000"
  },
  {
    "text": "lets us generate c sharp code in our",
    "start": "3098000",
    "end": "3103040"
  },
  {
    "text": "code fix and so we're going to pass this expression and we're just going to say source dot is enabled so source is",
    "start": "3103040",
    "end": "3109599"
  },
  {
    "text": "whatever the identifier for our diagnostic source instance was and so we",
    "start": "3109599",
    "end": "3114640"
  },
  {
    "text": "can just pass this and say source dot is enabled and that will give us an invocation expression syntax",
    "start": "3114640",
    "end": "3121920"
  },
  {
    "text": "and then we can replace the argument list in that which will be",
    "start": "3121920",
    "end": "3127359"
  },
  {
    "text": "empty with a new argument list which adds in the argument which was the first",
    "start": "3127359",
    "end": "3133119"
  },
  {
    "text": "thing passed to um our diagnostic source.right invocation",
    "start": "3133119",
    "end": "3138480"
  },
  {
    "text": "so in this case that would be bar and then we can create a new if statement and so this past expression",
    "start": "3138480",
    "end": "3145760"
  },
  {
    "text": "lets us turn a c-sharp string into a c-sharp syntax node but syntax factory",
    "start": "3145760",
    "end": "3151599"
  },
  {
    "text": "also you can just say create an if statement and the if keyword should be",
    "start": "3151599",
    "end": "3157040"
  },
  {
    "text": "this token uh syntax kind dot if keyword and then we're going to add an open",
    "start": "3157040",
    "end": "3162240"
  },
  {
    "text": "paren token because we need that and then we're going to put our is enabled expression",
    "start": "3162240",
    "end": "3167760"
  },
  {
    "text": "inside that there and then we're going to have our close paren token and add on",
    "start": "3167760",
    "end": "3173280"
  },
  {
    "text": "trailing trivia newline and then we can indent the expression underneath that",
    "start": "3173280",
    "end": "3179200"
  },
  {
    "text": "i don't know what that else does don't worry about it and then we're going to add back on whatever the leading trivia",
    "start": "3179200",
    "end": "3184559"
  },
  {
    "text": "was on this thing before we started  around with it which should give us the same level of indentation as we",
    "start": "3184559",
    "end": "3190800"
  },
  {
    "text": "had before then we can just go hey give us the solution from the document that we're",
    "start": "3190800",
    "end": "3196559"
  },
  {
    "text": "looking at and give us the syntax root from this document and then we can",
    "start": "3196559",
    "end": "3201839"
  },
  {
    "text": "replace the node that was our old expression up here with our new if",
    "start": "3201839",
    "end": "3206880"
  },
  {
    "text": "statement and then we can do that same thing again and say the new solution is the original",
    "start": "3206880",
    "end": "3212319"
  },
  {
    "text": "solution with this change to our document syntax and then return the new solution back",
    "start": "3212319",
    "end": "3219880"
  },
  {
    "text": "so yeah there's a lot going on and it's not the simplest thing in the world",
    "start": "3222319",
    "end": "3227599"
  },
  {
    "text": "but for what it's doing and how easily that integrates with visual studio and is able to provide",
    "start": "3227599",
    "end": "3235359"
  },
  {
    "text": "helpful tweaks to your code as you're going along",
    "start": "3235359",
    "end": "3241119"
  },
  {
    "text": "you can you can see that it's uh it's quite a powerful tool",
    "start": "3241119",
    "end": "3246640"
  },
  {
    "text": "that you can use and you can use this like i say you can ship analyzers with code fixes uh with",
    "start": "3246640",
    "end": "3254800"
  },
  {
    "text": "shared projects internally with stuff with nuget packages that you publish on your internal nuget package um server if",
    "start": "3254800",
    "end": "3262319"
  },
  {
    "text": "you have uh particular styles of coding that you like to enforce um",
    "start": "3262319",
    "end": "3268880"
  },
  {
    "text": "then you can use this to enforce those coding styles you can say this is an error",
    "start": "3268880",
    "end": "3275119"
  },
  {
    "text": "and these analyzers will also be run during the compilation process and they will put their warnings and errors into",
    "start": "3275119",
    "end": "3281839"
  },
  {
    "text": "the compiler output and so if you want to say if you're one of those places where",
    "start": "3281839",
    "end": "3287040"
  },
  {
    "text": "they're not allowed to use the var keyword then you could write an analyzer that looks for the var keyword and reports",
    "start": "3287040",
    "end": "3294000"
  },
  {
    "text": "that as an error and uh then add things to source control so that you",
    "start": "3294000",
    "end": "3299280"
  },
  {
    "text": "can't check in code that won't compile and it won't compile because you've got an analyzer in there that says the var",
    "start": "3299280",
    "end": "3304960"
  },
  {
    "text": "key word isn't allowed because um why why don't people i never understand",
    "start": "3304960",
    "end": "3311920"
  },
  {
    "text": "why people don't like the var keyword it's great but yeah um",
    "start": "3311920",
    "end": "3318160"
  },
  {
    "text": "you'll also have a test project generated it will be an ms test",
    "start": "3318160",
    "end": "3323520"
  },
  {
    "text": "test project for for reasons um but it makes it very easy to test that your analyzer is going",
    "start": "3323520",
    "end": "3329839"
  },
  {
    "text": "to work uh and so you just have your your test fixture which inherits from code fix",
    "start": "3329839",
    "end": "3336799"
  },
  {
    "text": "verifier which includes a bunch of methods that are helpful to make sure",
    "start": "3336799",
    "end": "3343359"
  },
  {
    "text": "that your diagnostic is working and so you can say verify c-sharp",
    "start": "3343359",
    "end": "3348400"
  },
  {
    "text": "diagnostic on the test string there and make sure that that",
    "start": "3348400",
    "end": "3355920"
  },
  {
    "text": "doesn't return any diagnostics if you've got an empty string then you're definitely not calling diagnostic",
    "start": "3355920",
    "end": "3360960"
  },
  {
    "text": "source.right so that's not going to show any diagnostics you can then pass in a method that does",
    "start": "3360960",
    "end": "3369760"
  },
  {
    "text": "take that does call diagnostics or stop right and you can check that the diagnostic is",
    "start": "3370160",
    "end": "3377280"
  },
  {
    "text": "triggered and so you can make sure that your analyzer is working with the code that is important to you and then you",
    "start": "3377280",
    "end": "3384079"
  },
  {
    "text": "can also check the fix code is working by passing in the",
    "start": "3384079",
    "end": "3389359"
  },
  {
    "text": "code that should trigger the diagnostic and the fix and then also the code that",
    "start": "3389359",
    "end": "3394720"
  },
  {
    "text": "is what it should look like after the code fix has been run this is super handy this is so much",
    "start": "3394720",
    "end": "3400960"
  },
  {
    "text": "easier because the other way of testing this is to press f5 and have it launch a new visual studio instance with that",
    "start": "3400960",
    "end": "3408079"
  },
  {
    "text": "analyzer switched on and then type code inside it and make sure it triggers and all this sort of stuff",
    "start": "3408079",
    "end": "3414160"
  },
  {
    "text": "and another it's a damn good thing i decided to do",
    "start": "3414160",
    "end": "3419839"
  },
  {
    "text": "this um let's run through all the demos and screen grab them and just turn them into slides because when i tried to run",
    "start": "3419839",
    "end": "3426000"
  },
  {
    "text": "this project last night it didn't because it was written for visual studio 2019 and i've only got visual studio",
    "start": "3426000",
    "end": "3432640"
  },
  {
    "text": "2022 preview one installed on this laptop and it just didn't work",
    "start": "3432640",
    "end": "3438880"
  },
  {
    "text": "but trust me if i had visual studio 2019 i could demo it right now and it would work",
    "start": "3438880",
    "end": "3444160"
  },
  {
    "text": "brilliantly but you'll just have to take my word for it",
    "start": "3444160",
    "end": "3449680"
  },
  {
    "text": "so yes here we have this is what it should look like and then we can just call",
    "start": "3450240",
    "end": "3455520"
  },
  {
    "text": "verify c-sharp fix which is a method provided by that codefix verifier based",
    "start": "3455520",
    "end": "3460559"
  },
  {
    "text": "class that says yep after i apply the diagnostic code fix",
    "start": "3460559",
    "end": "3466400"
  },
  {
    "text": "this is what the new code looks like so that's basically it um",
    "start": "3466400",
    "end": "3474480"
  },
  {
    "text": "and i've done that i never get to the end of my talks with two minutes to spare let just hang on",
    "start": "3474480",
    "end": "3480799"
  },
  {
    "text": "i'll think of a tangent to go off on for five minutes um so yeah no uh if you want to learn more",
    "start": "3480799",
    "end": "3488160"
  },
  {
    "text": "about this um the thing i found super useful when i was starting out and",
    "start": "3488160",
    "end": "3494000"
  },
  {
    "text": "trying to understand why my c-sharp syntax visitor wasn't doing what i wanted it to do and that i should be",
    "start": "3494000",
    "end": "3500000"
  },
  {
    "text": "using c-sharp syntax walker instead josh varti.com learn roslyn now was the",
    "start": "3500000",
    "end": "3506559"
  },
  {
    "text": "resource i used to get my head around all of this sort of stuff also on github",
    "start": "3506559",
    "end": "3511839"
  },
  {
    "text": "there is a net analyzers organization that has a whole bunch of refactorings",
    "start": "3511839",
    "end": "3518319"
  },
  {
    "text": "and code fix providers and analyzers that you can use to crib from and copy and paste from and i'm writing a song",
    "start": "3518319",
    "end": "3525359"
  },
  {
    "text": "about that if you have a net4 application and you're looking to migrate to.net core",
    "start": "3525359",
    "end": "3530400"
  },
  {
    "text": "then please take a look at visualreco.com it's it's it's a work in progress but it will",
    "start": "3530400",
    "end": "3537760"
  },
  {
    "text": "currently take your wcf application and turn it into a grpc application and we're working on making it do useful",
    "start": "3537760",
    "end": "3544319"
  },
  {
    "text": "things with mvc and web api and and other things as well and that is basically it",
    "start": "3544319",
    "end": "3552079"
  },
  {
    "text": "um i hope that was useful i hope that's given you some ideas that you can go off and start hacking on and do fun stuff",
    "start": "3552079",
    "end": "3558480"
  },
  {
    "text": "with later on today at seven o'clock in room three i will be hosting some fun talks",
    "start": "3558480",
    "end": "3563520"
  },
  {
    "text": "ahead of the party which is just speakers talking about things that they wouldn't be allowed to talk about in an actual talk",
    "start": "3563520",
    "end": "3569920"
  },
  {
    "text": "and then the band dylan beatty and the line breakers will be on later and i'll be singing because i got drunk",
    "start": "3569920",
    "end": "3577359"
  },
  {
    "text": "once and went yeah all right um so yeah come to that and last slot",
    "start": "3577359",
    "end": "3582559"
  },
  {
    "text": "tomorrow if you're still around at the end of the conference not sure what room it's in but i'm doing a completely",
    "start": "3582559",
    "end": "3587920"
  },
  {
    "text": "stupid talk about the worst programming language ever which is lots of fun so if your brain's melted by the end of the",
    "start": "3587920",
    "end": "3594000"
  },
  {
    "text": "conference then come along to that other than that five seconds to go i've been mark rendall thank you very much for",
    "start": "3594000",
    "end": "3599920"
  },
  {
    "text": "coming and i'll see you again cheers bang on",
    "start": "3599920",
    "end": "3605040"
  },
  {
    "text": "bang on zero",
    "start": "3605040",
    "end": "3608599"
  },
  {
    "text": "you",
    "start": "3615440",
    "end": "3617520"
  }
]