[
  {
    "text": "if you have a website and you don't use cloudfare it's it's very very bad you should definitely use it like all",
    "start": "4359",
    "end": "10920"
  },
  {
    "text": "cloudfare employees start from cloudfare users so they start using cloudfare then they come to work with Cloud okay and",
    "start": "10920",
    "end": "19080"
  },
  {
    "text": "and also like before we start talking about Linux Kel key store how many of you actually know that the Linux has a",
    "start": "19080",
    "end": "26000"
  },
  {
    "text": "key store oh couple of people yeah more more than I expected to go so a",
    "start": "26000",
    "end": "34559"
  },
  {
    "text": "little bit about myself I do Linux at cloudfare I'm I'm interested in system",
    "start": "34559",
    "end": "40120"
  },
  {
    "text": "security and performance and I also enjoy lowlevel programming kernel drivers",
    "start": "40120",
    "end": "45559"
  },
  {
    "text": "bootloaders um other scary stuff written in C I I I would also like to mention",
    "start": "45559",
    "end": "51960"
  },
  {
    "text": "I'm probably a fugitive programmer nowadays because since last year I think USA NSA baned using C and C++ and",
    "start": "51960",
    "end": "61239"
  },
  {
    "text": "important organizations right probably all of you there like on other events you can say",
    "start": "61239",
    "end": "67520"
  },
  {
    "text": "like oh like all all of attendees are mostly safe but here is like a cc++",
    "start": "67520",
    "end": "73439"
  },
  {
    "text": "conference so we're all fugitive programmers now and why did they do they",
    "start": "73439",
    "end": "79280"
  },
  {
    "text": "actually well they want to organizations to adopt memory safe languages when",
    "start": "79280",
    "end": "86640"
  },
  {
    "text": "possible right and bolster protection through code hardening blah blah blah blah blah so you can read the press",
    "start": "86640",
    "end": "92479"
  },
  {
    "text": "release here and this is kind of relates to the talk so let's talk about application",
    "start": "92479",
    "end": "99240"
  },
  {
    "text": "keys in memory before we go to the application",
    "start": "99240",
    "end": "104680"
  },
  {
    "text": "key specifically let's revise the cont concept of Linux or any operating system",
    "start": "104680",
    "end": "112399"
  },
  {
    "text": "address spaces right so imagine you have like several processes running on your",
    "start": "112399",
    "end": "118200"
  },
  {
    "text": "system so most likely you're using some kind of operating system right so you have several processes so what's inside",
    "start": "118200",
    "end": "127000"
  },
  {
    "text": "the memory of these processes right so you have your main logic well main",
    "start": "127000",
    "end": "132560"
  },
  {
    "text": "functions and other code you wrote uh yeah you probably didn't write all the",
    "start": "132560",
    "end": "138080"
  },
  {
    "text": "code yourself so you also may have like some libraries loaded into the process address",
    "start": "138080",
    "end": "144040"
  },
  {
    "text": "space you also have a data section uh",
    "start": "144040",
    "end": "149879"
  },
  {
    "text": "where it's constant data or mutable data uh basically it's in the data like",
    "start": "149879",
    "end": "156319"
  },
  {
    "text": "Global variables whatever and of course you have a stack or several Stacks if",
    "start": "156319",
    "end": "162680"
  },
  {
    "text": "you use like a multi multiple threats yeah and like every process is",
    "start": "162680",
    "end": "168519"
  },
  {
    "text": "like that right and and this is all user space where your program runs you also",
    "start": "168519",
    "end": "173680"
  },
  {
    "text": "have your operating system kernel which has a dedicated kernel space and there",
    "start": "173680",
    "end": "180080"
  },
  {
    "text": "you it's kind of like similar thing right you have the core code which the scheduling IPC and all the other stuff",
    "start": "180080",
    "end": "187920"
  },
  {
    "text": "that the operating system needs to implement you also have static and dynamic data in the kernel like Global",
    "start": "187920",
    "end": "196640"
  },
  {
    "text": "variables constants Etc right uh you have the device drivers",
    "start": "196640",
    "end": "203319"
  },
  {
    "text": "obviously and uh of course you also have one or more Stacks because you can have",
    "start": "203319",
    "end": "209120"
  },
  {
    "text": "kernels right and but and yeah the kernel has its own stack which is considered actually a",
    "start": "209120",
    "end": "215280"
  },
  {
    "text": "limited resource and the concept around the operating system address space is",
    "start": "215280",
    "end": "220680"
  },
  {
    "text": "that like within a specific address space anything can access anything right",
    "start": "220680",
    "end": "227120"
  },
  {
    "text": "you can like basically reference any address in in your application and",
    "start": "227120",
    "end": "234920"
  },
  {
    "text": "probably and the same thing happen in the kernel so at least Linux operating",
    "start": "234920",
    "end": "240159"
  },
  {
    "text": "system kernel is a one flat address space and this is probably why it's very important to make sure your drivers come",
    "start": "240159",
    "end": "249280"
  },
  {
    "text": "especially if they're third party from a trustworthy location because as soon as you load a driver into the kernel it",
    "start": "249280",
    "end": "255280"
  },
  {
    "text": "basically has access to all of your operating system address space including",
    "start": "255280",
    "end": "260479"
  },
  {
    "text": "the core code static data and stacks and whatever",
    "start": "260479",
    "end": "266080"
  },
  {
    "text": "right but in between the address spaces you one process cannot access the memory",
    "start": "266080",
    "end": "273680"
  },
  {
    "text": "of another process and similarly all the processes cannot directly access the",
    "start": "273680",
    "end": "280520"
  },
  {
    "text": "memory of the kernel space so everything is separated in",
    "start": "280520",
    "end": "286599"
  },
  {
    "text": "memory that's clear right yeah so now let's zoom in actually into one of the",
    "start": "287639",
    "end": "294160"
  },
  {
    "text": "processes and let's actually zoom in into the data section what what can we",
    "start": "294160",
    "end": "300120"
  },
  {
    "text": "have there um well first of all you can have",
    "start": "300120",
    "end": "305199"
  },
  {
    "text": "your internal State yeah you write your code you have some data structures you during the course of the application you",
    "start": "305199",
    "end": "313199"
  },
  {
    "text": "like change some variables Etc so this is your internal State you can also have there in your",
    "start": "313199",
    "end": "320280"
  },
  {
    "text": "data section uh user or customer data if your service or application processes",
    "start": "320280",
    "end": "325800"
  },
  {
    "text": "some external inputs or probably some customer data is there right and finally what you can have",
    "start": "325800",
    "end": "332520"
  },
  {
    "text": "there is cryptographic keys if your application does encryption on decryption you use SSL or whatever or",
    "start": "332520",
    "end": "339440"
  },
  {
    "text": "like file encryption so probably you need an encryption key to do the encryption operation and that encryption",
    "start": "339440",
    "end": "344880"
  },
  {
    "text": "key will also be in your data section now let's imagine",
    "start": "344880",
    "end": "351240"
  },
  {
    "text": "that um some of our code is vulnerable or malicious right either the main logic",
    "start": "351240",
    "end": "357800"
  },
  {
    "text": "or a third party the library was hacked they call it a supply chain attack and",
    "start": "357800",
    "end": "362880"
  },
  {
    "text": "that code becomes malicious and the problem is because it's all in the same",
    "start": "362880",
    "end": "369240"
  },
  {
    "text": "address space right the whole process becomes compromised and mainly this data",
    "start": "369240",
    "end": "375919"
  },
  {
    "text": "section becomes compromised as well so like the the main logic or the libraries can access anything within the data",
    "start": "375919",
    "end": "384240"
  },
  {
    "text": "section yeah but if we adopt this SE",
    "start": "384639",
    "end": "390360"
  },
  {
    "text": "like categories right we can say that not all process data is created equal so",
    "start": "390360",
    "end": "397720"
  },
  {
    "text": "what if application internal state is compromised well what what can happen",
    "start": "397720",
    "end": "403800"
  },
  {
    "text": "like well it depends right so it depends on the logic of your application if the",
    "start": "403800",
    "end": "409599"
  },
  {
    "text": "malicious code can for example influence some control data structures they can",
    "start": "409599",
    "end": "414639"
  },
  {
    "text": "probably lead to a further compromise but again it all depends on your application so if if something can only",
    "start": "414639",
    "end": "420800"
  },
  {
    "text": "read your internal State and maybe it's not a big deal",
    "start": "420800",
    "end": "426120"
  },
  {
    "text": "right um well if user customer data is compromised this is a problem now right",
    "start": "426120",
    "end": "433080"
  },
  {
    "text": "so we I who went to my talk yesterday I mentioned about aquax where they had a",
    "start": "433080",
    "end": "438919"
  },
  {
    "text": "large data leak and it's a big problem it's a huge problem it was for",
    "start": "438919",
    "end": "445440"
  },
  {
    "text": "Equifax it's a lot of it's very costly uh it has a better reputation but still",
    "start": "445440",
    "end": "452160"
  },
  {
    "text": "it's it wasn't the end of the world they still operate their business right so",
    "start": "452160",
    "end": "457440"
  },
  {
    "text": "very bad not end the world well but if your cryptographic key gets compromised",
    "start": "457440",
    "end": "463919"
  },
  {
    "text": "that's probably a game over now right so uh cryptographic keys are usually tied",
    "start": "463919",
    "end": "470080"
  },
  {
    "text": "to identities these days so for example especially like we all use TLS or SSL if",
    "start": "470080",
    "end": "476960"
  },
  {
    "text": "our private key representing our our web resource for like google.com leaks and",
    "start": "476960",
    "end": "482479"
  },
  {
    "text": "anyone can be google.com on the internet and this is a game over right so it's data Integrity compromise full security",
    "start": "482479",
    "end": "490039"
  },
  {
    "text": "compromise and total identity takeover so this is why we need when we",
    "start": "490039",
    "end": "496560"
  },
  {
    "text": "think about protecting application data we probably need to focus on better",
    "start": "496560",
    "end": "502599"
  },
  {
    "text": "protection for cryptographic keys and probably user and customer data more",
    "start": "502599",
    "end": "508240"
  },
  {
    "text": "somehow so well how can a cryptography key can",
    "start": "508240",
    "end": "513479"
  },
  {
    "text": "be leaked right so well for example there are several ways but the",
    "start": "513479",
    "end": "519479"
  },
  {
    "text": "typical uh vulnerabilities in in unsafe C++ so untrusted user in Boots and outof",
    "start": "519479",
    "end": "526160"
  },
  {
    "text": "Bounds memory access so for example you have some stuff written in your memory",
    "start": "526160",
    "end": "532040"
  },
  {
    "text": "and you may have your cryptography key resident and membering next to your",
    "start": "532040",
    "end": "539040"
  },
  {
    "text": "St stuff so normally your code can only read stuff and it was designed not",
    "start": "539040",
    "end": "545200"
  },
  {
    "text": "designed I would say as someone said your software does what you programmed it to",
    "start": "545200",
    "end": "552320"
  },
  {
    "text": "do and not what you intended it to do right uh yeah so you intended to read",
    "start": "552320",
    "end": "557959"
  },
  {
    "text": "only the stuff but somehow you have a vulnerability and now it is possible for",
    "start": "557959",
    "end": "563160"
  },
  {
    "text": "the code to go past the array bounds and read your cryptography key and this is what exactly happened in the heart bed",
    "start": "563160",
    "end": "570399"
  },
  {
    "text": "everyone remembers hard bed in op SSL was like probably one of the hardest",
    "start": "570399",
    "end": "576240"
  },
  {
    "text": "points in the internet and after hard bed actually all the certificate authorities tested their riously tested",
    "start": "576240",
    "end": "584480"
  },
  {
    "text": "their certificate revocation I guess um",
    "start": "584480",
    "end": "590200"
  },
  {
    "text": "yeah well your keys May leak if you have an arbitrary remote code execution",
    "start": "590200",
    "end": "595519"
  },
  {
    "text": "vulnerability in your code and there is literally nothing to discuss there if somebody can remotely control your code",
    "start": "595519",
    "end": "602800"
  },
  {
    "text": "they have access to your process address space they can dump your key or change your key and do whatever they want and",
    "start": "602800",
    "end": "608320"
  },
  {
    "text": "one of the recent example of this was lock for Shell vulnerability uh",
    "start": "608320",
    "end": "616519"
  },
  {
    "text": "yeah one of the common very common ways to lick Secrets or Keys is buffer use so",
    "start": "616519",
    "end": "625399"
  },
  {
    "text": "let's consider this simple very naive program so we have a main function which",
    "start": "625399",
    "end": "631240"
  },
  {
    "text": "does encrypt and then logs uh the result",
    "start": "631240",
    "end": "636399"
  },
  {
    "text": "that's saying like yeah I've done the encryption and it's a little bit",
    "start": "636399",
    "end": "641480"
  },
  {
    "text": "like uh specially crafted to be to Showcase a problem and the problem here",
    "start": "641480",
    "end": "647720"
  },
  {
    "text": "that for example technically these two functions have the same stack depth",
    "start": "647720",
    "end": "652760"
  },
  {
    "text": "right and in the log function we just forgot to initialize the message to zero",
    "start": "652760",
    "end": "659079"
  },
  {
    "text": "zero right and technically if we compile that code on a compile like just average",
    "start": "659079",
    "end": "667120"
  },
  {
    "text": "compiler with no specific security flux you you will see that the logging",
    "start": "667120",
    "end": "672399"
  },
  {
    "text": "function will leak the cryptographic key easily right uh so what happens in the thre so",
    "start": "672399",
    "end": "679399"
  },
  {
    "text": "we have the process or our stack so we have our main code we code the well it's",
    "start": "679399",
    "end": "686120"
  },
  {
    "text": "an encrypt but here it's decrypt function but whatever so it gets the key somewhere puts it on the stack then it",
    "start": "686120",
    "end": "692959"
  },
  {
    "text": "exits but forgots to clean up the key and then we have a logging function and",
    "start": "692959",
    "end": "698320"
  },
  {
    "text": "basically that the problem here that the logging function has access to that key",
    "start": "698320",
    "end": "703639"
  },
  {
    "text": "material right and and that's why and it",
    "start": "703639",
    "end": "708680"
  },
  {
    "text": "was briefly touched on the panel uh at the beginning of the conference that's why we say like we were discussing this",
    "start": "708680",
    "end": "715880"
  },
  {
    "text": "new cool features me zero explicit why should would we zero out Keys when we uh",
    "start": "715880",
    "end": "723000"
  },
  {
    "text": "when we don't need them anymore right and basically this example is about the stack but same thing can happen on the",
    "start": "723000",
    "end": "730320"
  },
  {
    "text": "Heap if you allocate a space for the key but don't zero it out and return it to",
    "start": "730320",
    "end": "735959"
  },
  {
    "text": "the Hep it may be possible depending on the implementation that some other function will allocate the same chunk",
    "start": "735959",
    "end": "742920"
  },
  {
    "text": "and somehow accidentally access the key or leak the key",
    "start": "742920",
    "end": "750320"
  },
  {
    "text": "finally keys can be leaked by like debugging information and tools so if",
    "start": "750320",
    "end": "756959"
  },
  {
    "text": "our process is crashed we may get a c dump right and cord dump is is a",
    "start": "756959",
    "end": "763639"
  },
  {
    "text": "snapshot of the whole process memory address space and then we'll have the keys",
    "start": "763639",
    "end": "768880"
  },
  {
    "text": "there uh so yeah",
    "start": "768880",
    "end": "774160"
  },
  {
    "text": "so what can we do about it right so like well we can say yeah it's all bugs right",
    "start": "774160",
    "end": "780440"
  },
  {
    "text": "like let's just fix all the bugs and we'll be fine like let's",
    "start": "780440",
    "end": "786120"
  },
  {
    "text": "just why can do we keep revisiting this every year if we just can fix all the",
    "start": "786120",
    "end": "792120"
  },
  {
    "text": "bugs yeah it's impossible to fix all the bugs right what can we do well we probably",
    "start": "792120",
    "end": "800040"
  },
  {
    "text": "can solve it generically for the old whole data section but what can we do we",
    "start": "800040",
    "end": "805079"
  },
  {
    "text": "can kind of piggyback on the idea of the address space separation and do",
    "start": "805079",
    "end": "810560"
  },
  {
    "text": "something better for the cryptographic keys and what we can do here is inste",
    "start": "810560",
    "end": "816279"
  },
  {
    "text": "what we we can break our process into two processes right uh that second",
    "start": "816279",
    "end": "822199"
  },
  {
    "text": "process will have its own data section and move keep cryptography keys there then we'll add some very strip down easy",
    "start": "822199",
    "end": "830519"
  },
  {
    "text": "to audit uh cryptographic logic and like even though the process one may be",
    "start": "830519",
    "end": "836800"
  },
  {
    "text": "written in in C++ plus we can read this in some safer language for example to",
    "start": "836800",
    "end": "842839"
  },
  {
    "text": "minimize the uh potential vulnerabilities and and and we can then",
    "start": "842839",
    "end": "849680"
  },
  {
    "text": "create a well-defined interface between these two processes so the process one can use the",
    "start": "849680",
    "end": "855839"
  },
  {
    "text": "cryptography keys but it doesn't have the direct access to to the",
    "start": "855839",
    "end": "861600"
  },
  {
    "text": "cryptographic key material right and we call it basically a so-called key agent",
    "start": "861600",
    "end": "867040"
  },
  {
    "text": "model and it was also Al briefly touched on the um during the panel so like yeah",
    "start": "867040",
    "end": "873560"
  },
  {
    "text": "if you're handling cryptographic Keys put them in a different process right so so a key agent model is you have two",
    "start": "873560",
    "end": "880399"
  },
  {
    "text": "processes Main and a helper agent so uh yeah the main process doesn't have access to the cryptographic material",
    "start": "880399",
    "end": "888000"
  },
  {
    "text": "separated by operating system address space and Main communicates with the agent through a well-defined interface",
    "start": "888000",
    "end": "894399"
  },
  {
    "text": "to uh to to perform cryptographic operation and and Main processes usually",
    "start": "894399",
    "end": "900759"
  },
  {
    "text": "processes untrusted and is Network connected where agent is doesn't process",
    "start": "900759",
    "end": "905880"
  },
  {
    "text": "unrusted only request through this well-defined interface and is not Network facing there are like who here",
    "start": "905880",
    "end": "914240"
  },
  {
    "text": "uses SSH agent or gpg agent so the these are all examples of U an agent",
    "start": "914240",
    "end": "925240"
  },
  {
    "text": "model so yeah it's all well and good but there are some draw backs now like if you want to now you it's on you a",
    "start": "925240",
    "end": "932560"
  },
  {
    "text": "developer you need to develop and maintain two programs instead of one you need to design this well-defined",
    "start": "932560",
    "end": "938800"
  },
  {
    "text": "interface between the agent to ensure it's stripped down and doesn't allow anything else than just requesting",
    "start": "938800",
    "end": "944680"
  },
  {
    "text": "cryptographic operations you also need to mess now with a communication Channel",
    "start": "944680",
    "end": "950319"
  },
  {
    "text": "between the two processes so like unique sockets sh memory or whatever IPC",
    "start": "950319",
    "end": "955480"
  },
  {
    "text": "mechanism you want to employ and probably you also need to somehow",
    "start": "955480",
    "end": "960880"
  },
  {
    "text": "authenticate and enforce some Access Control list so you don't want anything on your system to be accessing the agent",
    "start": "960880",
    "end": "967600"
  },
  {
    "text": "and Performing cryptographic operations you want to somehow ensure that only like the process intended to access the",
    "start": "967600",
    "end": "974880"
  },
  {
    "text": "agent should have access and it's a little bit combersome to",
    "start": "974880",
    "end": "980480"
  },
  {
    "text": "do so this brings us to so-called the official name is Linux kernel key",
    "start": "980600",
    "end": "986839"
  },
  {
    "text": "retention service or or I just call it simply Linux gal key store so and the idea is quite simple so",
    "start": "986839",
    "end": "994440"
  },
  {
    "text": "we take this model right and we replace the agent process with the Linux kernel",
    "start": "994440",
    "end": "1001720"
  },
  {
    "text": "will it work yes because kernel has a separate address space from the process so you have the address space separation",
    "start": "1001720",
    "end": "1008959"
  },
  {
    "text": "here and what about the well- defined interface we also have it already with the kernel it's called system calls",
    "start": "1008959",
    "end": "1014920"
  },
  {
    "text": "right so uh we have the kernel we have the system calls and this is all what is",
    "start": "1014920",
    "end": "1021639"
  },
  {
    "text": "all the Linux kernel key retention Services about so it stores cryptographic Keys as kernel object and",
    "start": "1021639",
    "end": "1030160"
  },
  {
    "text": "um initially it was designed as a sharing mechanism so user space can",
    "start": "1030160",
    "end": "1035319"
  },
  {
    "text": "share keys for to Kernel Services uh which need access to cryptographic",
    "start": "1035319",
    "end": "1040600"
  },
  {
    "text": "materials for example dis encryption or ecrypt FS but it was later extended to",
    "start": "1040600",
    "end": "1047918"
  },
  {
    "text": "be used used by user Space Program to manage their keys or secrets and the advantages are similar",
    "start": "1047919",
    "end": "1054480"
  },
  {
    "text": "to the agent model that keys are stored outside of the process address space have a well- defined system call",
    "start": "1054480",
    "end": "1060440"
  },
  {
    "text": "interface to access and use the keys now because keys are kernel key objects they",
    "start": "1060440",
    "end": "1066240"
  },
  {
    "text": "have Associated permissions and access control list uh similar to other kernel",
    "start": "1066240",
    "end": "1071520"
  },
  {
    "text": "objects and that does includes even LSM Hooks and uh the idea is that like a key",
    "start": "1071520",
    "end": "1078520"
  },
  {
    "text": "life cycle can be implicitly bound to the code like cycle so uh we talked",
    "start": "1078520",
    "end": "1085080"
  },
  {
    "text": "about SEC like deleting the key memory securely key destroying the key when a",
    "start": "1085080",
    "end": "1091200"
  },
  {
    "text": "process terminates and surprisingly for a kernal feature it has really good",
    "start": "1091200",
    "end": "1097520"
  },
  {
    "text": "documentation so yeah you can read about that so to review what keys and key",
    "start": "1097520",
    "end": "1104559"
  },
  {
    "text": "store is is key key store it's like a colle of key rings and keys so you have",
    "start": "1104559",
    "end": "1110840"
  },
  {
    "text": "the key Rings which can contain other key rings and keyrings can contain keys",
    "start": "1110840",
    "end": "1118600"
  },
  {
    "text": "so it's a tree like structure but you may also notice that one key can be in",
    "start": "1118600",
    "end": "1123799"
  },
  {
    "text": "several Kings at the same time so what are keys keys are kernel",
    "start": "1123799",
    "end": "1129640"
  },
  {
    "text": "object which contain actual cryptographic material or a pointer to it they you can read and write to the",
    "start": "1129640",
    "end": "1136880"
  },
  {
    "text": "key object if you have per and you can use the key to perform cryptographic",
    "start": "1136880",
    "end": "1142679"
  },
  {
    "text": "Transformations um keys can be different types I will describe the types A little bit later so it can be user log on",
    "start": "1142679",
    "end": "1148600"
  },
  {
    "text": "asymmetric encrypted and trusted and it's kind of similar to a file on a file",
    "start": "1148600",
    "end": "1153960"
  },
  {
    "text": "system but unlike the file keys can be linked to many key rings at the same time so like you can have a file only in",
    "start": "1153960",
    "end": "1161400"
  },
  {
    "text": "One Directory but key you can have a key in several key rings at the same time",
    "start": "1161400",
    "end": "1167400"
  },
  {
    "text": "and key rings are collection of keys they contain they call it links to keys",
    "start": "1167400",
    "end": "1172520"
  },
  {
    "text": "and other or any other key rings and basically key Rings control the lifetime",
    "start": "1172520",
    "end": "1177799"
  },
  {
    "text": "of the link key so if a particular key is not linked to a single key ring it",
    "start": "1177799",
    "end": "1182840"
  },
  {
    "text": "gets automatically just destroyed and securely destroyed um key rings can be explicitly",
    "start": "1182840",
    "end": "1190640"
  },
  {
    "text": "created or implicit and implicit key rings are threat process uran session I",
    "start": "1190640",
    "end": "1195840"
  },
  {
    "text": "will describe it a little bit later they do enforce key Lifetime and they're kind of similar to a directory in the file",
    "start": "1195840",
    "end": "1203679"
  },
  {
    "text": "system so let's see like a really basic example so I'm on my machine I actually",
    "start": "1203679",
    "end": "1209600"
  },
  {
    "text": "copy pasted it from a real terminal so consider this as a demo so yeah so uh",
    "start": "1209600",
    "end": "1216360"
  },
  {
    "text": "I'm on my machine I can create a new key ring and call it my ring and Link it to",
    "start": "1216360",
    "end": "1221720"
  },
  {
    "text": "my implicit user key ring and uh yeah",
    "start": "1221720",
    "end": "1227440"
  },
  {
    "text": "and then uh what I can do is uh I can add a key there with some secret so",
    "start": "1227440",
    "end": "1233559"
  },
  {
    "text": "Hunter 2 is my secret and I can add it to my key ring and and then I can show",
    "start": "1233559",
    "end": "1239600"
  },
  {
    "text": "and I can see like which keys and key rings I have access to so and you can",
    "start": "1239600",
    "end": "1244880"
  },
  {
    "text": "see the three like structure I have the implicit session key ring then my user",
    "start": "1244880",
    "end": "1249960"
  },
  {
    "text": "user key ring then my custom key ring and in the key custom key ring I have my",
    "start": "1249960",
    "end": "1255919"
  },
  {
    "text": "my key uh yeah and also I wanted to show that like each object like key or a key",
    "start": "1255919",
    "end": "1263159"
  },
  {
    "text": "ring is designated the unique ID which they call a serial number so these are",
    "start": "1263159",
    "end": "1269640"
  },
  {
    "text": "serial numbers yeah so and because I have access to my",
    "start": "1269640",
    "end": "1275440"
  },
  {
    "text": "key I can read the secret so I can uh access the cryptographic",
    "start": "1275440",
    "end": "1282640"
  },
  {
    "text": "material cool so far right so so it's",
    "start": "1282640",
    "end": "1288159"
  },
  {
    "text": "very interesting like you can do a lot of things with that so for example you can do a simple secret sharing now we",
    "start": "1288159",
    "end": "1295840"
  },
  {
    "text": "have two users on the systems uh Alice and Bob and you may see that they are",
    "start": "1295840",
    "end": "1302799"
  },
  {
    "text": "not connected anyway so they're not part of a common group or anything but still I can securely share a secret between",
    "start": "1302799",
    "end": "1310320"
  },
  {
    "text": "these two users so what can I do is I can Alice can add a secret she wants to",
    "start": "1310320",
    "end": "1317000"
  },
  {
    "text": "share in in her own key ring what can Bob do Bob can create a custom key ring",
    "start": "1317000",
    "end": "1324559"
  },
  {
    "text": "called from others which is like an in inbox to receive secrets from other",
    "start": "1324559",
    "end": "1330039"
  },
  {
    "text": "users right and uh he will have the serial number he can then communicate",
    "start": "1330039",
    "end": "1337120"
  },
  {
    "text": "that uh yeah and Bob also need to set permissions which similar to five FL",
    "start": "1337120",
    "end": "1342240"
  },
  {
    "text": "Mission which it means that any any user on the system can write to the key ring",
    "start": "1342240",
    "end": "1347400"
  },
  {
    "text": "but even can not read from it so it they users can write keys to this key",
    "start": "1347400",
    "end": "1353080"
  },
  {
    "text": "ring and then Bob can communicate the serial number to Alice and what Alice",
    "start": "1353080",
    "end": "1359080"
  },
  {
    "text": "can do Alice can move her key from from her own king ring to to this new Bob key",
    "start": "1359080",
    "end": "1365679"
  },
  {
    "text": "ring and then we see that Alice doesn't possess uh the secret anymore uh so",
    "start": "1365679",
    "end": "1374600"
  },
  {
    "text": "there is no user Secret uh in in her tree and Bob now has access",
    "start": "1374600",
    "end": "1383200"
  },
  {
    "text": "to the key so Bob can read the secret he can read the material and Bob this",
    "start": "1383200",
    "end": "1389360"
  },
  {
    "text": "because like Bob has access to uh to the key now so you can see the user Secret",
    "start": "1389360",
    "end": "1395600"
  },
  {
    "text": "in in Bob curing okay so what about special key",
    "start": "1395600",
    "end": "1403159"
  },
  {
    "text": "ring Ty so we we created the custom keying but there are like implicit key rings so so uh there are three main",
    "start": "1403159",
    "end": "1409600"
  },
  {
    "text": "types called uh which are bound to a process lifetime so the session curine",
    "start": "1409600",
    "end": "1416320"
  },
  {
    "text": "it's it's life it's implicitly created by the kernel when needed and its lifetime is bound to the current and old",
    "start": "1416320",
    "end": "1423919"
  },
  {
    "text": "child process so to the current process which requested the creation and all child processes of that process so you",
    "start": "1423919",
    "end": "1431159"
  },
  {
    "text": "have a process key ring which is private to the process and you can have a threat",
    "start": "1431159",
    "end": "1437000"
  },
  {
    "text": "key ring which is priv private to a particular operating threat so which is a nice thing because for example if you",
    "start": "1437000",
    "end": "1442880"
  },
  {
    "text": "have let's say you have a web server which like serves several website and",
    "start": "1442880",
    "end": "1449320"
  },
  {
    "text": "you have a dedicated threads per website you can for example securely store SSL",
    "start": "1449320",
    "end": "1454760"
  },
  {
    "text": "private key for which website in the in the thread and like you can make sure that other threads cannot easily access",
    "start": "1454760",
    "end": "1462200"
  },
  {
    "text": "at private key you also have user key key Rings which the lifetime of the curing is",
    "start": "1462200",
    "end": "1468679"
  },
  {
    "text": "implicitly bound to a user ID so user curing is shared between all processes with a particular user",
    "start": "1468679",
    "end": "1475080"
  },
  {
    "text": "ID and user session curing is very similar to user curing and I I honestly",
    "start": "1475080",
    "end": "1481799"
  },
  {
    "text": "even forgot what's difference but it's not very important uh and even the doc",
    "start": "1481799",
    "end": "1487840"
  },
  {
    "text": "say it's not very important so probably it's true you also have a third type",
    "start": "1487840",
    "end": "1493000"
  },
  {
    "text": "called persistent key Rings it's also shared between all processes with a particular user ID but the difference is",
    "start": "1493000",
    "end": "1500760"
  },
  {
    "text": "it's actually the name is confusing so when people hear persistent key Rings they think that the key objects is",
    "start": "1500760",
    "end": "1506840"
  },
  {
    "text": "somehow persistent disk which is not true so persistent key Rings means that",
    "start": "1506840",
    "end": "1512240"
  },
  {
    "text": "the lifetime of the key ring is not bound to an existence of user ID but but",
    "start": "1512240",
    "end": "1517399"
  },
  {
    "text": "it's instead it's basically destroyed on a timeout so you have like an object uh",
    "start": "1517399",
    "end": "1522520"
  },
  {
    "text": "uh the ski ring when you use it the timeout reset and if you don't use it",
    "start": "1522520",
    "end": "1529200"
  },
  {
    "text": "for a while it gets automatically destroyed but if you again use it like the timeout resets so this is basically",
    "start": "1529200",
    "end": "1536279"
  },
  {
    "text": "was designed for non-interactive jobs like Chron jobs which like come and go",
    "start": "1536279",
    "end": "1542480"
  },
  {
    "text": "uh so you don't have to recreate if like you have let's say Crown job writing",
    "start": "1542480",
    "end": "1547640"
  },
  {
    "text": "every 5 minutes need access to the secret uh so you can set the lifetime of the key ring to 7 minutes and the key",
    "start": "1547640",
    "end": "1554480"
  },
  {
    "text": "ring will always be there but if for some reason your Chrome job didn't run or crash then that key will be",
    "start": "1554480",
    "end": "1560520"
  },
  {
    "text": "automatically destroyed let's actually see the example of uh session key ring and the lifetime",
    "start": "1560520",
    "end": "1570200"
  },
  {
    "text": "of the key ring so let me add a secret uh hunt my favorite Hunter 2 password",
    "start": "1570200",
    "end": "1575760"
  },
  {
    "text": "which I use Everywhere by the way to my session keing right so uh yeah and I can",
    "start": "1575760",
    "end": "1581200"
  },
  {
    "text": "see H it's there uh you can see that yeah uh the serial",
    "start": "1581200",
    "end": "1589240"
  },
  {
    "text": "number uh is here and like I can access my secret right what I can do to prove",
    "start": "1589240",
    "end": "1596440"
  },
  {
    "text": "that it gets automatically destructed I can put a BPF Probe on the user destroy function in the Linux kernel uh which is",
    "start": "1596440",
    "end": "1604320"
  },
  {
    "text": "responsible for securely destroying a key and in in a different terminal and",
    "start": "1604320",
    "end": "1610080"
  },
  {
    "text": "then here like so the above terminal I'm sshing here so I exit an SSH session and",
    "start": "1610080",
    "end": "1618159"
  },
  {
    "text": "I can immediately see that when I logged out because my session key ring was",
    "start": "1618159",
    "end": "1623760"
  },
  {
    "text": "automatically destroyed therefore for all the keys linked to it were also destroyed that the user destroy the",
    "start": "1623760",
    "end": "1629960"
  },
  {
    "text": "kernel called the user destroy function and it I can see that the serial number is my user Kee it was like securely",
    "start": "1629960",
    "end": "1636480"
  },
  {
    "text": "deleted like wiped from memory and if I relog in back I can see",
    "start": "1636480",
    "end": "1642960"
  },
  {
    "text": "I no longer have the key and I can also see that my session key ring was",
    "start": "1642960",
    "end": "1648360"
  },
  {
    "text": "recreated because my the old one was destroyed then the system automatically created a new session green but it has a",
    "start": "1648360",
    "end": "1654679"
  },
  {
    "text": "different serial number so the idea of implicit key Rings",
    "start": "1654679",
    "end": "1660679"
  },
  {
    "text": "is that if you select the appropriate key ring type you can ensure that the keys will be securely destroyed when not",
    "start": "1660679",
    "end": "1668640"
  },
  {
    "text": "needed and the nice thing about it it's happens even if the application crashes",
    "start": "1668640",
    "end": "1674840"
  },
  {
    "text": "so even if you write C++ code you Z out memory in or destroy the object in your",
    "start": "1674840",
    "end": "1681240"
  },
  {
    "text": "destructors but somehow your application Crouch and Destructor wasn't called the kernel will make sure that all the key",
    "start": "1681240",
    "end": "1687480"
  },
  {
    "text": "objects will be destroyed I think this is the power",
    "start": "1687480",
    "end": "1693360"
  },
  {
    "text": "feature so let's now review the um key types so we have the user key which we",
    "start": "1693360",
    "end": "1700039"
  },
  {
    "text": "used throughout the examples and the user key is the simplest type so what it does is just a buffer with a secret you",
    "start": "1700039",
    "end": "1706840"
  },
  {
    "text": "can basically put it inside the kernel and other processes can read the secret",
    "start": "1706840",
    "end": "1712000"
  },
  {
    "text": "back right and either you can read your process can read it or other processes",
    "start": "1712000",
    "end": "1717679"
  },
  {
    "text": "can read the secret but if they have the appropriate permissions because you can set permissions to disallow that there",
    "start": "1717679",
    "end": "1724720"
  },
  {
    "text": "is a uh so-called log on key uh and the idea is that you have a secret you put",
    "start": "1724720",
    "end": "1731320"
  },
  {
    "text": "it inside the kernel but you can never read it back and this is the original it comes from the original idea of sharing",
    "start": "1731320",
    "end": "1737519"
  },
  {
    "text": "secrets with the kernel so once you uh provide the secret to the kernel no other process can read it back but",
    "start": "1737519",
    "end": "1743799"
  },
  {
    "text": "kernel the kernel can use it and it's used in lock or DM Crypt or ecrypt FS so",
    "start": "1743799",
    "end": "1750080"
  },
  {
    "text": "if you have a recently mod than Linux distribution you can see and you have encrypted discs you can see that uh your",
    "start": "1750080",
    "end": "1757120"
  },
  {
    "text": "keys are actually where a log on keys so when you initialize your disc encryption you provide the password the Crypt set",
    "start": "1757120",
    "end": "1763919"
  },
  {
    "text": "up utility creates a log on key send the key to the kernel and then it exits and",
    "start": "1763919",
    "end": "1770320"
  },
  {
    "text": "yeah there is no way to read the key back into the into the user",
    "start": "1770320",
    "end": "1775880"
  },
  {
    "text": "space we also have like a specific asymmetric key type So currently kernel",
    "start": "1775880",
    "end": "1781200"
  },
  {
    "text": "only supports RSA keys but I'm actually working on patches I have patches to extend to elliptic curve cryptography",
    "start": "1781200",
    "end": "1788000"
  },
  {
    "text": "but I'm still for some reason they were still not accepted because I could not get",
    "start": "1788000",
    "end": "1793120"
  },
  {
    "text": "hold of the maintainer so uh you can put an RSI key in the kernel and then",
    "start": "1793120",
    "end": "1799559"
  },
  {
    "text": "instead of reading it back you can if you have access to the descriptor to the",
    "start": "1799559",
    "end": "1805600"
  },
  {
    "text": "serial to the key object you can request the kernel to do cryptographic operations with this key so you can",
    "start": "1805600",
    "end": "1812159"
  },
  {
    "text": "either decrypt or sign uh so here is simple example so let's generate a simple uh RSA private",
    "start": "1812159",
    "end": "1820600"
  },
  {
    "text": "key right uh uh now we we also need to convert it to ps8 format because this this is how",
    "start": "1820600",
    "end": "1827679"
  },
  {
    "text": "the kernel understands uh a symmetric keys and now we can add it to to a",
    "start": "1827679",
    "end": "1833519"
  },
  {
    "text": "session key ring for example and yes so then we can create",
    "start": "1833519",
    "end": "1838720"
  },
  {
    "text": "some test data and use the Cur and ask the kernel to actually sign this data",
    "start": "1838720",
    "end": "1846360"
  },
  {
    "text": "with the kernel object so like this the C the cryptographic operation will be",
    "start": "1846360",
    "end": "1851600"
  },
  {
    "text": "performed inside the kernel and you don't need to have access to the key material itself to do the signature",
    "start": "1851600",
    "end": "1858279"
  },
  {
    "text": "and yeah and we then we can verify with OP SSL that uh the signature is valid so",
    "start": "1858279",
    "end": "1864360"
  },
  {
    "text": "think of it as a as a light software HSM inside the kernel which is cool I",
    "start": "1864360",
    "end": "1872480"
  },
  {
    "text": "think so using this asymmetric Keys we can actually",
    "start": "1872559",
    "end": "1879279"
  },
  {
    "text": "like let's say reimplement the SSH hent model fully inside the kernel without",
    "start": "1879279",
    "end": "1886080"
  },
  {
    "text": "the need to run a SE agent process and I will not present the example here but I",
    "start": "1886080",
    "end": "1892200"
  },
  {
    "text": "will refer to our blog post which has actually a patch for that so you can",
    "start": "1892200",
    "end": "1898279"
  },
  {
    "text": "just patch open SSH with a patch and instead of running an agent you can just easily put your SSH key inside the",
    "start": "1898279",
    "end": "1906000"
  },
  {
    "text": "kernel key ring and open SSH process will use it to authenticate to your service so and the workflow is similar",
    "start": "1906000",
    "end": "1912760"
  },
  {
    "text": "so you kind of you do SSH add but the key goes inside the the colal keying and",
    "start": "1912760",
    "end": "1918120"
  },
  {
    "text": "then when you try to SSH into the system uh it will use it will not talk to the",
    "start": "1918120",
    "end": "1923440"
  },
  {
    "text": "agent so you don't have to run the agent at",
    "start": "1923440",
    "end": "1927279"
  },
  {
    "text": "all so this functionality is very Al is really really useful to build like very",
    "start": "1928519",
    "end": "1936360"
  },
  {
    "text": "complex Key Management Systems both in Cloud environments and even in a fleet I of iot devices if you run",
    "start": "1936360",
    "end": "1943279"
  },
  {
    "text": "Linux but the idea itself like in all the previous examples that we saw we had",
    "start": "1943279",
    "end": "1949600"
  },
  {
    "text": "user space taking a cryptographic material and putting it inside the kernel",
    "start": "1949600",
    "end": "1955559"
  },
  {
    "text": "right but that opens the window of opportunity to the attacker if the attacker can compromise the user space",
    "start": "1955559",
    "end": "1962639"
  },
  {
    "text": "process while the information is there you can the attacker can still grab that",
    "start": "1962639",
    "end": "1968559"
  },
  {
    "text": "information so the idea is how can we provision the application keys without",
    "start": "1968559",
    "end": "1973960"
  },
  {
    "text": "the cryptographic material ever being exposed to user space so like we can ensure that in user space we never saw a",
    "start": "1973960",
    "end": "1982240"
  },
  {
    "text": "memory with the c graphic material there are two more key types",
    "start": "1982240",
    "end": "1987279"
  },
  {
    "text": "for that specific called encrypted keys so imagine you have uh already some key in",
    "start": "1987279",
    "end": "1995919"
  },
  {
    "text": "the kernel key ring we call it a wrapping key so what you can do is you",
    "start": "1995919",
    "end": "2001279"
  },
  {
    "text": "can take a rra key in user space so it's a cryptographical material but it's",
    "start": "2001279",
    "end": "2006480"
  },
  {
    "text": "encrypted with the wrapping key and once you put it inside the kernel the kernel",
    "start": "2006480",
    "end": "2012120"
  },
  {
    "text": "will automatically unwrap it with the wrapping key so like basically the plain text cryptographic material is only",
    "start": "2012120",
    "end": "2018480"
  },
  {
    "text": "available in the kernel space and again if you try to read it back you get the rra key again so in user space that key",
    "start": "2018480",
    "end": "2026519"
  },
  {
    "text": "is only available in encrypted form but here we have a chicken and act",
    "start": "2026519",
    "end": "2032000"
  },
  {
    "text": "problem like how do we PR the wrapping key then we'll need to so uh the way how",
    "start": "2032000",
    "end": "2037320"
  },
  {
    "text": "kernal approaches well you can put a crypto chip inside instead of ruping key",
    "start": "2037320",
    "end": "2043039"
  },
  {
    "text": "and encrypted Keys become trusted key so Linux K will have has native support for",
    "start": "2043039",
    "end": "2049520"
  },
  {
    "text": "TPM for that but technically they the subsystem is quite modular so if you're",
    "start": "2049520",
    "end": "2055720"
  },
  {
    "text": "an iot device and you have your own crypto chip it's quite easy to write a simple driver which will expose your",
    "start": "2055720",
    "end": "2063720"
  },
  {
    "text": "crypto chip as a the secure device for for trusted keys and the idea is again",
    "start": "2063720",
    "end": "2069599"
  },
  {
    "text": "you have the rubbed key um you put it inside the kernel and the kernel will use your crypto chip to unra that key",
    "start": "2069599",
    "end": "2077599"
  },
  {
    "text": "right and again you can only read it back in encrypted",
    "start": "2077599",
    "end": "2083398"
  },
  {
    "text": "form but specifically like for TPM there is a disadvantage here so if what if you",
    "start": "2084040",
    "end": "2089079"
  },
  {
    "text": "have a lot of keys you you need to continuously poke TPMS uh right and TPMS are not really",
    "start": "2089079",
    "end": "2095720"
  },
  {
    "text": "fast and some times they're not very reliable they like break quite fast so",
    "start": "2095720",
    "end": "2102079"
  },
  {
    "text": "we can do the combined schema approach here so let's say uh we have some",
    "start": "2102079",
    "end": "2109960"
  },
  {
    "text": "Central repository of keys and we have a particular root key we want to",
    "start": "2109960",
    "end": "2115839"
  },
  {
    "text": "provision uh so we uh yeah so we wrap that root key to a",
    "start": "2115839",
    "end": "2124920"
  },
  {
    "text": "particular TPM and then uh deliver that key to a particular device or a server",
    "start": "2124920",
    "end": "2132320"
  },
  {
    "text": "to to the kernal curing so we use the tpn wants to unrra that root key but uh",
    "start": "2132320",
    "end": "2138000"
  },
  {
    "text": "all the other Keys what all the applications keys are just simple encrypted Keys wrapped with that root",
    "start": "2138000",
    "end": "2143680"
  },
  {
    "text": "key so when we have a an application specific key which it's wrapped with the",
    "start": "2143680",
    "end": "2149240"
  },
  {
    "text": "root key and when we send it to the kernel is just uses the software root key instead of going each time the TV so",
    "start": "2149240",
    "end": "2156560"
  },
  {
    "text": "we use use the TPM or crypto chip only once and then all other keys are to",
    "start": "2156560",
    "end": "2161880"
  },
  {
    "text": "provision a root key and then all other Keys we use like the encrypted",
    "start": "2161880",
    "end": "2167640"
  },
  {
    "text": "Keys good so far but again this schema has problems",
    "start": "2168000",
    "end": "2174319"
  },
  {
    "text": "right so uh so applications the advantage is the",
    "start": "2174319",
    "end": "2180440"
  },
  {
    "text": "application never see the plain text cryptographic material in the process address space but it's still up onto the",
    "start": "2180440",
    "end": "2188359"
  },
  {
    "text": "applications uh for contacting the centralized KMS or HSM or whatever you",
    "start": "2188359",
    "end": "2193800"
  },
  {
    "text": "have for secret storage to get the rra keys and you know like developers are",
    "start": "2193800",
    "end": "2199599"
  },
  {
    "text": "lazy so I want to focus on my code but I somehow now need to put in my",
    "start": "2199599",
    "end": "2205800"
  },
  {
    "text": "code the logic how to reach the centralized KMS HSM I need to know have",
    "start": "2205800",
    "end": "2212119"
  },
  {
    "text": "their like URL in points in my configuration data I need to add code",
    "start": "2212119",
    "end": "2217480"
  },
  {
    "text": "for actually communicate with this HSM and like every interface is different",
    "start": "2217480",
    "end": "2222760"
  },
  {
    "text": "etc etc so it's it's a pain for developers and also you have like a",
    "start": "2222760",
    "end": "2228800"
  },
  {
    "text": "little administrative control of the created uh key object so if you even",
    "start": "2228800",
    "end": "2234920"
  },
  {
    "text": "though applications doesn't see the cryptographic material it creates the kernel key objects and it can probably",
    "start": "2234920",
    "end": "2240839"
  },
  {
    "text": "set permissions on that incorrectly so other processes then can use it for example so you",
    "start": "2240839",
    "end": "2247160"
  },
  {
    "text": "you have to audit the code of the application that it does not only properly create the Kel keyboard but",
    "start": "2247160",
    "end": "2253119"
  },
  {
    "text": "also set the proper permission and probably from KMS or HSM",
    "start": "2253119",
    "end": "2259079"
  },
  {
    "text": "perspective you need to somehow authenticate each request in application so even though you're providing a rup",
    "start": "2259079",
    "end": "2265200"
  },
  {
    "text": "key you don't want to send R keys to Applications uh uh R keys to for one",
    "start": "2265200",
    "end": "2272960"
  },
  {
    "text": "application to a different application right",
    "start": "2272960",
    "end": "2278599"
  },
  {
    "text": "so the Linux kernel key retention service or the key store provides uh two",
    "start": "2279880",
    "end": "2286240"
  },
  {
    "text": "systems calls to manage the key objects so one of them is ADD key which we used",
    "start": "2286240",
    "end": "2292119"
  },
  {
    "text": "in all the example so which allows you uh to add a particular cryptographic",
    "start": "2292119",
    "end": "2297960"
  },
  {
    "text": "material as a cure uh uh Accord yeah so like the",
    "start": "2297960",
    "end": "2304440"
  },
  {
    "text": "application is responsible to provide providing cryptographic material and the payload is interpreted to a to the key",
    "start": "2304440",
    "end": "2310800"
  },
  {
    "text": "type so uh nothing is done for user or Logan Keys you have to provide the plain",
    "start": "2310800",
    "end": "2316839"
  },
  {
    "text": "text cryptographic material uh private or public key for asymmetric keys and and encrypted and rupt key for encrypted",
    "start": "2316839",
    "end": "2323760"
  },
  {
    "text": "and trusted keys but there is also another system call called request",
    "start": "2323760",
    "end": "2330440"
  },
  {
    "text": "key and the applica instead of like providing the cryptographic material uh",
    "start": "2330440",
    "end": "2336079"
  },
  {
    "text": "an application is requesting a key a particular key from the operating system",
    "start": "2336079",
    "end": "2341119"
  },
  {
    "text": "based on a free form string ID uh and obviously like every setup is",
    "start": "2341119",
    "end": "2347839"
  },
  {
    "text": "different the kernel cannot satisfy the request usually on its own so the kernel",
    "start": "2347839",
    "end": "2352920"
  },
  {
    "text": "can do call out back to user space to a helper agent program which can then hook",
    "start": "2352920",
    "end": "2358800"
  },
  {
    "text": "into external or internal HSM KMS and other stuff and that helper helper",
    "start": "2358800",
    "end": "2365680"
  },
  {
    "text": "program is a like a centralized extension of the key store and can adjust key permissions Implement",
    "start": "2365680",
    "end": "2370800"
  },
  {
    "text": "arbitrary security policy etc etc it's the more centralized and",
    "start": "2370800",
    "end": "2375920"
  },
  {
    "text": "transparent API to I keys for the kernel keys so how does it work so instead",
    "start": "2375920",
    "end": "2384040"
  },
  {
    "text": "of uh adding the key directly what if a process needs a key it just calls a",
    "start": "2384040",
    "end": "2390200"
  },
  {
    "text": "system call hey colel give me the key and provides its ID so let's say it's",
    "start": "2390200",
    "end": "2396079"
  },
  {
    "text": "kind of Cloud app key one so once the kernel request like receive this request",
    "start": "2396079",
    "end": "2403000"
  },
  {
    "text": "it creates a key object an empty key object like a placeholder then it calls",
    "start": "2403000",
    "end": "2408440"
  },
  {
    "text": "out to add dedicated specific user Space Program which is usually ASB request key",
    "start": "2408440",
    "end": "2415000"
  },
  {
    "text": "and that program can can be modular you can basically configure it uh with even",
    "start": "2415000",
    "end": "2422200"
  },
  {
    "text": "several passs so depending on the which ID was requested preform stre can even",
    "start": "2422200",
    "end": "2427359"
  },
  {
    "text": "direct it to a different backend look let's say if we requested a cloud key then we direct it to the cloud HSM so",
    "start": "2427359",
    "end": "2435520"
  },
  {
    "text": "that request key contacts the cloud HSM and the cloud HSM provides the key",
    "start": "2435520",
    "end": "2441480"
  },
  {
    "text": "back to uh to the to this agent and then the agent responds to the kernel and the",
    "start": "2441480",
    "end": "2447760"
  },
  {
    "text": "kernel finally instantiates the key object inside the kernel and notify the application that the request is complete",
    "start": "2447760",
    "end": "2453920"
  },
  {
    "text": "and now the application can use that key uh for its purposes right and again",
    "start": "2453920",
    "end": "2461839"
  },
  {
    "text": "in this schema the plain text cryptographic material never touched the user space",
    "start": "2461839",
    "end": "2467319"
  },
  {
    "text": "application so it's a single centralized operating system API to request key from",
    "start": "2467319",
    "end": "2473480"
  },
  {
    "text": "the application so you have no KMS HSM connection strings no uril no uh just a",
    "start": "2473480",
    "end": "2480480"
  },
  {
    "text": "free form string ID and it basically decouples your applications from your key management and key storage backend",
    "start": "2480480",
    "end": "2487400"
  },
  {
    "text": "so all the application needs to know if it needs the key it calls it asks the operating system right and it's uh it's",
    "start": "2487400",
    "end": "2494640"
  },
  {
    "text": "a more secure way to instantiate the keys in the kernel so uh when the kernel creates this coll out process it has",
    "start": "2494640",
    "end": "2502280"
  },
  {
    "text": "some operating system magic to ensure only that process and not any other process can actually instantiate that",
    "start": "2502280",
    "end": "2510359"
  },
  {
    "text": "placeholder uh and that coll out process can perform additional Security checks check if they requesting process ID is",
    "start": "2510359",
    "end": "2518040"
  },
  {
    "text": "allowed to request that key uh check where it's located you can basically code arbitrary",
    "start": "2518040",
    "end": "2525560"
  },
  {
    "text": "like security policy there and also it's module it can support multiple storage",
    "start": "2525560",
    "end": "2531640"
  },
  {
    "text": "back ends and you can swap backends transparently independently of application so if you decide to move",
    "start": "2531640",
    "end": "2539040"
  },
  {
    "text": "from cloud HSM to on Prem HSM you can reconfigure your uh user space helper",
    "start": "2539040",
    "end": "2545079"
  },
  {
    "text": "agents but application Pati will never notice it and then also you only have one",
    "start": "2545079",
    "end": "2551520"
  },
  {
    "text": "process you need to authenticate on the back end so on your KMS system so uh you",
    "start": "2551520",
    "end": "2557440"
  },
  {
    "text": "need to ensure the Integrity of that process but it's only one process which is a centralized poison of communicating",
    "start": "2557440",
    "end": "2562839"
  },
  {
    "text": "with your KMS and again even though the request key helper program which is",
    "start": "2562839",
    "end": "2568480"
  },
  {
    "text": "provided by the uh most uh operating system distributions written in C you can actually write these backend",
    "start": "2568480",
    "end": "2575359"
  },
  {
    "text": "connectors in any language go python whatever you desire and even bat",
    "start": "2575359",
    "end": "2581160"
  },
  {
    "text": "script So eventually with request key uh key management and distributions becomes",
    "start": "2581160",
    "end": "2587720"
  },
  {
    "text": "a core service of the operating system where it should be and you kind of like",
    "start": "2587720",
    "end": "2593160"
  },
  {
    "text": "free the applications of do their own sometimes very buggy key management",
    "start": "2593160",
    "end": "2599400"
  },
  {
    "text": "system I guess that's all I wanted to say today so here are some useful links",
    "start": "2600359",
    "end": "2608800"
  },
  {
    "text": "um the first two is linked to Kernel documentation about the Kel key store",
    "start": "2608800",
    "end": "2615119"
  },
  {
    "text": "and some arbitrary key types like trusted and encrypted Keys uh you also",
    "start": "2615119",
    "end": "2620160"
  },
  {
    "text": "have some Man pages for key CTL utility which we used and we have Man pages for",
    "start": "2620160",
    "end": "2625680"
  },
  {
    "text": "key rings and asymetric keys and finally everything I described today and even",
    "start": "2625680",
    "end": "2630720"
  },
  {
    "text": "more with it patch to open SSH is available in our blog post uh which you",
    "start": "2630720",
    "end": "2636319"
  },
  {
    "text": "can go back and read anytime you like so thank you very much and I think we have",
    "start": "2636319",
    "end": "2643760"
  },
  {
    "text": "time for questions",
    "start": "2643760",
    "end": "2651440"
  },
  {
    "text": "yes should should we do mic or I can repeat yeah",
    "start": "2652040",
    "end": "2659480"
  },
  {
    "text": "yeah so the question is the features demonstrated here from which kernel it",
    "start": "2665000",
    "end": "2671280"
  },
  {
    "text": "is available uh I think the basic features are available I don't even remember from",
    "start": "2671280",
    "end": "2677839"
  },
  {
    "text": "all the older",
    "start": "2677839",
    "end": "2680599"
  },
  {
    "text": "kernels I'm I'm not versed in Red Hats I I only know the Upstream kernel but uh I",
    "start": "2686160",
    "end": "2693119"
  },
  {
    "text": "can say that um I think it's in for",
    "start": "2693119",
    "end": "2699599"
  },
  {
    "text": "something the idea is also we recently did add a new functionality so",
    "start": "2699599",
    "end": "2706000"
  },
  {
    "text": "previously uh there is also another kernel feature called Linux crypto API",
    "start": "2706000",
    "end": "2711920"
  },
  {
    "text": "where you could use uh uh Linux kernel to perform symmetric uh",
    "start": "2711920",
    "end": "2718079"
  },
  {
    "text": "cryptography uh on behalf of the application so for example very useful for small iot devices if you don't want",
    "start": "2718079",
    "end": "2723920"
  },
  {
    "text": "to pull a crypto Library you can just asked the kernel to do encryption decryption but the problem was the same",
    "start": "2723920",
    "end": "2729280"
  },
  {
    "text": "it was not connected to the key store at all so it was a separate API and to",
    "start": "2729280",
    "end": "2734359"
  },
  {
    "text": "encrypt it you needed uh to put the plain text cryptography key inside the",
    "start": "2734359",
    "end": "2739480"
  },
  {
    "text": "kernel and then you can do encryption decryption so we recently like Upstream the patch which connects these two systems so if you have a user key",
    "start": "2739480",
    "end": "2745880"
  },
  {
    "text": "already in the kernel you can start using it to do as to do symmetric encryption and decryption and that is",
    "start": "2745880",
    "end": "2752520"
  },
  {
    "text": "available I think from uh six something yeah but all the other basic features",
    "start": "2752520",
    "end": "2759880"
  },
  {
    "text": "already there for a long time so it should not be a problem yes",
    "start": "2759880",
    "end": "2766680"
  },
  {
    "text": "please",
    "start": "2772520",
    "end": "2775520"
  },
  {
    "text": "yeah",
    "start": "2784800",
    "end": "2787800"
  },
  {
    "text": "prob",
    "start": "2814800",
    "end": "2817800"
  },
  {
    "text": "uh so the question basically if I summarize it correctly so even though we have K uh keys inside the kernel we",
    "start": "2824599",
    "end": "2831640"
  },
  {
    "text": "still need application to send plain text through the system calls for it to be processed by the kernel and it's very",
    "start": "2831640",
    "end": "2838880"
  },
  {
    "text": "easy to trace or hook system calls and then the attack and process can be uh uh",
    "start": "2838880",
    "end": "2844880"
  },
  {
    "text": "can be uh the data itself can be compromised and again um I'm not sure there's like a",
    "start": "2844880",
    "end": "2853319"
  },
  {
    "text": "really good protection against that but it goes back to the earlier slide I mentioned there are several categories",
    "start": "2853319",
    "end": "2860040"
  },
  {
    "text": "of of data right so like cryptography keys are more important and the kernel key store is all about protecting",
    "start": "2860040",
    "end": "2866760"
  },
  {
    "text": "cryptography Keys whereas of course you still need user or application data or",
    "start": "2866760",
    "end": "2873079"
  },
  {
    "text": "internal data and that somehow needs to be be uh handled right but I don't think",
    "start": "2873079",
    "end": "2880160"
  },
  {
    "text": "there is a good way to say that the colonel can help you with",
    "start": "2880160",
    "end": "2885558"
  },
  {
    "text": "that yeah yeah the idea is like for example uh like it's still a lot of",
    "start": "2890160",
    "end": "2896680"
  },
  {
    "text": "value let's say not all data you send uh for cryptographic operation is actually",
    "start": "2896680",
    "end": "2903319"
  },
  {
    "text": "secret and the prime example is for asymmetric Keys as a signing operation",
    "start": "2903319",
    "end": "2908480"
  },
  {
    "text": "so you sign the public data but the idea is if you leak your P signing key you",
    "start": "2908480",
    "end": "2915040"
  },
  {
    "text": "kind of anyone can impersonate you and sign the data but you can keep the key secure and like signing is a like a",
    "start": "2915040",
    "end": "2921960"
  },
  {
    "text": "really good example of like why you should use a colel key store so you protect your private key securely but",
    "start": "2921960",
    "end": "2927599"
  },
  {
    "text": "your data that you process with that key is public anyway it's just you create a",
    "start": "2927599",
    "end": "2934318"
  },
  {
    "text": "signature yeah uh so the commment here is you can",
    "start": "2934599",
    "end": "2940680"
  },
  {
    "text": "still modify the cash but again it goes back to like technically if you can",
    "start": "2940680",
    "end": "2946720"
  },
  {
    "text": "follow system calls and or somehow modify the data then means your",
    "start": "2946720",
    "end": "2952119"
  },
  {
    "text": "application in general is compromised right so if I can modify any data in the application I can even like uh switch",
    "start": "2952119",
    "end": "2960040"
  },
  {
    "text": "the flow control create a unique a a network socket and send it over to",
    "start": "2960040",
    "end": "2965200"
  },
  {
    "text": "myself as an attacker right so technically it's possible uh any other questions",
    "start": "2965200",
    "end": "2972960"
  },
  {
    "text": "there you mean the KMS",
    "start": "2984359",
    "end": "2988359"
  },
  {
    "text": "backend",
    "start": "2994520",
    "end": "2997520"
  },
  {
    "text": "mhm so uh the question was how does ASB request key is implemented and how does",
    "start": "3001720",
    "end": "3009200"
  },
  {
    "text": "it know which processes are allowed is that correct so",
    "start": "3009200",
    "end": "3016760"
  },
  {
    "text": "um when the kernel creates this call out process called request skin it executes",
    "start": "3016960",
    "end": "3022520"
  },
  {
    "text": "a binary and it provides some information there to that binary uh so it says which",
    "start": "3022520",
    "end": "3030079"
  },
  {
    "text": "process requested the key like and then by having the process ID you can",
    "start": "3030079",
    "end": "3036079"
  },
  {
    "text": "technically um inspect the system and do like any arbitrary policy so for example",
    "start": "3036079",
    "end": "3043160"
  },
  {
    "text": "I can write a backend which says I only allow processes at a particular",
    "start": "3043160",
    "end": "3049359"
  },
  {
    "text": "executable pass to request the key or a process even with a part I can hash the executable I can say I can verify the",
    "start": "3049359",
    "end": "3056000"
  },
  {
    "text": "Integrity of the executable and say if the Integrity is this hash then it it is",
    "start": "3056000",
    "end": "3061440"
  },
  {
    "text": "allowed so and basically the this the idea is also that this this the process",
    "start": "3061440",
    "end": "3067359"
  },
  {
    "text": "also receive a special special key from the kernel itself so only that process",
    "start": "3067359",
    "end": "3073319"
  },
  {
    "text": "can then later satisfy that request so if you if you're an attacker and spin up the same executable but externally it",
    "start": "3073319",
    "end": "3080799"
  },
  {
    "text": "will not have the credentials to like malform that request or something like that",
    "start": "3080799",
    "end": "3087359"
  },
  {
    "text": "yeah yeah I mean uh uh you are free to implement policy as you wish so uh the",
    "start": "3089280",
    "end": "3097720"
  },
  {
    "text": "operating system basically provides you uh a basic has been request key",
    "start": "3097720",
    "end": "3102760"
  },
  {
    "text": "implementation uh and it's open source you can look it up and the way how it works is it has a configuration file and",
    "start": "3102760",
    "end": "3109680"
  },
  {
    "text": "you can say further that for example for a particular key type like which starts",
    "start": "3109680",
    "end": "3114760"
  },
  {
    "text": "with a cloud prefix call that other process to satisfy the request and you write that other process yourself like",
    "start": "3114760",
    "end": "3121640"
  },
  {
    "text": "the communication agent for like local Keys you can say that like you can basically you can",
    "start": "3121640",
    "end": "3129599"
  },
  {
    "text": "configure it to call to further call out to different backends to different processes to satisfy different request",
    "start": "3129599",
    "end": "3136119"
  },
  {
    "text": "key types you can also like just prohibit some key types you can say like nobody's allowed to request an",
    "start": "3136119",
    "end": "3141240"
  },
  {
    "text": "asymmetric key period and it will be like denied immediately",
    "start": "3141240",
    "end": "3147280"
  },
  {
    "text": "yes oh here uh it's like the first men it was said that the first mention of",
    "start": "3155240",
    "end": "3161880"
  },
  {
    "text": "the kernel key retention service is in kernel four",
    "start": "3161880",
    "end": "3169079"
  },
  {
    "text": "413 first 413 but my assumption is in 413 it only supports passing the keys to",
    "start": "3170520",
    "end": "3178160"
  },
  {
    "text": "the kernel for disk encryption and nothing else so user space support might not be available so probably later",
    "start": "3178160",
    "end": "3184520"
  },
  {
    "text": "Colonels like 4 14 or 419 will have a better support all the key types thank",
    "start": "3184520",
    "end": "3192720"
  },
  {
    "text": "you any other questions",
    "start": "3192720",
    "end": "3196799"
  },
  {
    "text": "yes oh that's a great question uh one thing to remember that the kernel",
    "start": "3202520",
    "end": "3210839"
  },
  {
    "text": "key store subsystem is not namespaced so if you have a",
    "start": "3210839",
    "end": "3217599"
  },
  {
    "text": "container it kind and you operate within the key store it accesses your host systems key store and there are some",
    "start": "3217599",
    "end": "3225440"
  },
  {
    "text": "like ways and attacks where if you misconfigure the Kel key store so like let's say if you're running in container",
    "start": "3225440",
    "end": "3231440"
  },
  {
    "text": "they can access your host key so you have to be very careful about that I I think I'm not entirely correct that",
    "start": "3231440",
    "end": "3238839"
  },
  {
    "text": "it's not fully namespace I do think do think it supports username spaces uh and",
    "start": "3238839",
    "end": "3244640"
  },
  {
    "text": "yeah there are some quirks I haven't researched thoroughly how do you properly configure it but yeah you have",
    "start": "3244640",
    "end": "3250200"
  },
  {
    "text": "to be careful when you're using the kernel key store in the with the containerized environment but on the",
    "start": "3250200",
    "end": "3256640"
  },
  {
    "text": "other hand it's also I think it's also a superpower in the sense",
    "start": "3256640",
    "end": "3262559"
  },
  {
    "text": "because uh let's say if you run like a kubernetes cluster right so you can have",
    "start": "3262559",
    "end": "3269680"
  },
  {
    "text": "container applications accessing Secrets without the need for application to",
    "start": "3269680",
    "end": "3275520"
  },
  {
    "text": "handle those secrets so like you as a kubernetes cluster maintainer can provide that Secret store as a kernel",
    "start": "3275520",
    "end": "3282480"
  },
  {
    "text": "key store on the host if it's properly configured containers can just request their secrets without the need to do",
    "start": "3282480",
    "end": "3288520"
  },
  {
    "text": "like whatever the kubernetes thees secret map or something like that so they can do just request key and get",
    "start": "3288520",
    "end": "3294920"
  },
  {
    "text": "their keys in the container not even get the keys just get a handle to the Keys and use it to",
    "start": "3294920",
    "end": "3300839"
  },
  {
    "text": "perform cryptographic operation so the key management again becomes the centralized operating system feature",
    "start": "3300839",
    "end": "3307079"
  },
  {
    "text": "versus each application needs to deal with it",
    "start": "3307079",
    "end": "3311520"
  },
  {
    "text": "somehow any other questions thank you very much and have a",
    "start": "3312880",
    "end": "3320960"
  },
  {
    "text": "nice day",
    "start": "3320960",
    "end": "3326960"
  }
]