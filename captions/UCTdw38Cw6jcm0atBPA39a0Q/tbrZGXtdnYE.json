[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "hello everyone hi thank you for being here today for our talk our routines are acute safer threat interactions in this talk",
    "start": "10960",
    "end": "19279"
  },
  {
    "text": "we will tell you about a pretty common pattern we stumbled upon when designing the graphical user",
    "start": "19279",
    "end": "25519"
  },
  {
    "text": "interface of one of our tools and being this involved with the graphical user interface it involves a",
    "start": "25519",
    "end": "31840"
  },
  {
    "text": "lot of uh concurrent and asynchronous programming uh which is notoriously hard and it's",
    "start": "31840",
    "end": "37600"
  },
  {
    "text": "hard to get right so we want to share with you a solution we came up with which is based on c plus plus 20",
    "start": "37600",
    "end": "43760"
  },
  {
    "text": "cortines and that makes possible for a programmer to tackle this pattern in a way that is",
    "start": "43760",
    "end": "51440"
  },
  {
    "text": "easy and it's very much safer and it doesn't force a programmer to",
    "start": "51440",
    "end": "56960"
  },
  {
    "text": "deal with the synchronous parallelism as usual so this the talk is structured as follows i",
    "start": "56960",
    "end": "62879"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "will start with a brief introduction and motivation of our work alain which is the main programmer that",
    "start": "62879",
    "end": "68720"
  },
  {
    "text": "did the heavy lifting of this implementation we show you some examples of approaches how you how you",
    "start": "68720",
    "end": "74240"
  },
  {
    "text": "can tackle this kind of a programming paradigm then i will describe the",
    "start": "74240",
    "end": "82080"
  },
  {
    "text": "ingredients about c plus plus twenty co routines that you need to understand the solution we are going to propose and",
    "start": "82080",
    "end": "88400"
  },
  {
    "text": "alain will tell you about it this solution we call self-dispatching routines and after that i will finally conclude",
    "start": "88400",
    "end": "95600"
  },
  {
    "text": "that there will be a few minutes for some questions so please if you have questions wait to the end of",
    "start": "95600",
    "end": "101520"
  },
  {
    "text": "the talk because we have uh tried to reserve the uh let's say 10 minutes for questions at",
    "start": "101520",
    "end": "107119"
  },
  {
    "text": "the end before starting let me tell you a little bit about us so both alan and i work for a company",
    "start": "107119",
    "end": "115280"
  },
  {
    "text": "uh called revenge alain is working on the graphical user interface of our tools",
    "start": "115280",
    "end": "120399"
  },
  {
    "text": "i'm one of the founders and the cto and i work on our main analysis tool which is the",
    "start": "120399",
    "end": "125600"
  },
  {
    "text": "compiler so our company revenge is a cyber security company",
    "start": "125600",
    "end": "131280"
  },
  {
    "text": "we build the analysis tool for binary programs so what we are trying to launch very",
    "start": "131280",
    "end": "137599"
  },
  {
    "text": "soon is a decompiler based on llvm",
    "start": "137599",
    "end": "143680"
  },
  {
    "text": "in the field of compilers and emulator but enough with ourselves let's start to discuss about the",
    "start": "143680",
    "end": "150080"
  },
  {
    "start": "148000",
    "end": "148000"
  },
  {
    "text": "motivation of our work this uh is a pattern that we stumbled upon when designing a graphical user",
    "start": "150080",
    "end": "155440"
  },
  {
    "text": "interface of our tool we call it the ping-po ping-pong pattern i will tell you in a minute why",
    "start": "155440",
    "end": "161120"
  },
  {
    "text": "this is pretty common in any application that let's say it's divided into part there",
    "start": "161120",
    "end": "166640"
  },
  {
    "text": "is a front-end with a main event loop that it's interfaced with the end user and a",
    "start": "166640",
    "end": "172160"
  },
  {
    "text": "back end which is the part of the program which is in charge of of doing the heavy",
    "start": "172160",
    "end": "177680"
  },
  {
    "text": "lifting and it is the part of the program that actually owns the data structures that are being manipulated",
    "start": "177680",
    "end": "183440"
  },
  {
    "text": "from the interaction that are started from the front end okay so typically so this is our arises in",
    "start": "183440",
    "end": "190640"
  },
  {
    "text": "any application with a main event loop that you want you don't want to block so graphical user interfaces are one",
    "start": "190640",
    "end": "196879"
  },
  {
    "text": "example but also terminal user interfaces or other any other situation where the user starts an",
    "start": "196879",
    "end": "202319"
  },
  {
    "text": "action and you don't want to block the interaction with the user while the backend is doing the number",
    "start": "202319",
    "end": "207519"
  },
  {
    "text": "crunching okay so typically the user starts asking for something to the backend let's say",
    "start": "207519",
    "end": "212720"
  },
  {
    "text": "to search something so the actual task of searching for something in in the data",
    "start": "212720",
    "end": "218159"
  },
  {
    "text": "structure is performed by the big end which in turns notifies back the",
    "start": "218159",
    "end": "223200"
  },
  {
    "text": "results to the front end to show the results to the user but this is just one step of the ping",
    "start": "223200",
    "end": "228400"
  },
  {
    "text": "pong if you want but usually what you end up doing is that you want many of those because",
    "start": "228400",
    "end": "234879"
  },
  {
    "text": "for example the user want to erase the thing that was found so it needs to ask for another action to the backend",
    "start": "234879",
    "end": "241519"
  },
  {
    "text": "which actually does the erase in this case and again it needs to notify back the result",
    "start": "241519",
    "end": "248720"
  },
  {
    "text": "to the front end to update the view okay so as you can see this pretty easily becomes a ping pong",
    "start": "248720",
    "end": "255200"
  },
  {
    "text": "and this ping pong is executed asynchronously on many threads you can imagine the work at the back end",
    "start": "255200",
    "end": "260799"
  },
  {
    "text": "as a worker thread but also as a thread pool and but the point is that",
    "start": "260799",
    "end": "267040"
  },
  {
    "text": "okay we are dealing with the concurrent asynchronous parallelism but this chain of task is actually a",
    "start": "267040",
    "end": "273360"
  },
  {
    "text": "sequence they are logically connected uh one after the other the one depends strictly on the results",
    "start": "273360",
    "end": "280320"
  },
  {
    "text": "of the previous one so we can call this whole chain a ping pong",
    "start": "280320",
    "end": "285759"
  },
  {
    "text": "and this reflects pretty much how typically programmer a programmer thinks",
    "start": "285759",
    "end": "291680"
  },
  {
    "text": "about code so like a sequence of steps okay but this is not typically easy in uh",
    "start": "291680",
    "end": "297120"
  },
  {
    "text": "when you have a graphical user interface because you can uh want you you may want to extend this ping pong",
    "start": "297120",
    "end": "302960"
  },
  {
    "text": "many times or and you can have many of these ping pongs on the flight at the same time so at any point in time",
    "start": "302960",
    "end": "309840"
  },
  {
    "text": "you don't want to take care and to think about all the ping pongs because",
    "start": "309840",
    "end": "314960"
  },
  {
    "text": "each ping pong is actually a chain of dependency and it doesn't interact with the rest of the thing",
    "start": "314960",
    "end": "320320"
  },
  {
    "text": "okay and if you start making things complicated you can even add more worker threads many ping pongs so",
    "start": "320320",
    "end": "327360"
  },
  {
    "text": "things start to become much complicated very fast if you don't find a way to",
    "start": "327360",
    "end": "333440"
  },
  {
    "text": "reason about each ping pong separately so this is what we wanted to do and this is the main motivation of our work this situation",
    "start": "333440",
    "end": "340080"
  },
  {
    "start": "340000",
    "end": "340000"
  },
  {
    "text": "poses some challenges uh the first one is of course that you have a synchronous execution",
    "start": "340080",
    "end": "345120"
  },
  {
    "text": "because you don't don't want to block the the interface but the tasks are actually",
    "start": "345120",
    "end": "351520"
  },
  {
    "text": "serial there is a logical sequence of dependent tasks so as soon as you start using a",
    "start": "351520",
    "end": "357680"
  },
  {
    "text": "synchronous language construct to program this you end up with a situation where the code becomes pretty",
    "start": "357680",
    "end": "363520"
  },
  {
    "text": "obscure because all these asynchronous constructs make make it hard to understand and to follow the serial logic sometimes",
    "start": "363520",
    "end": "370400"
  },
  {
    "text": "you don't even understand there that there is a just a sequence of logically connected steps okay and in",
    "start": "370400",
    "end": "377440"
  },
  {
    "text": "addition to that you have typical problems of asynchronous programming you have you may have data races for example if the",
    "start": "377440",
    "end": "382880"
  },
  {
    "text": "worker threads uh try to access objects managed by the main thread or vice versa",
    "start": "382880",
    "end": "388080"
  },
  {
    "text": "and you have to take care all the time of lifetime checks when you go back to the main thread so if the",
    "start": "388080",
    "end": "393840"
  },
  {
    "text": "worker thread notifies an example back to the main thread and the main thread needs to show",
    "start": "393840",
    "end": "399120"
  },
  {
    "text": "it you have to make sure that the window where the results are going to be shown are still alive",
    "start": "399120",
    "end": "404560"
  },
  {
    "text": "and the user didn't close them for example otherwise otherwise your program might crash so this is",
    "start": "404560",
    "end": "411840"
  },
  {
    "text": "a lot of stuff and we want to solve it in a portable way so ideally plain standard c",
    "start": "411840",
    "end": "416960"
  },
  {
    "text": "plus plus to make it portable and not to tie it to a specific library or operating system so this is",
    "start": "416960",
    "end": "424479"
  },
  {
    "text": "uh we found that this is quite common a common problem and before",
    "start": "424479",
    "end": "430800"
  },
  {
    "text": "digging into the details of our solution alain is going to show you some of the approaches that we tried and some of",
    "start": "430800",
    "end": "436240"
  },
  {
    "text": "their problems so please so for this talk we made",
    "start": "436240",
    "end": "441520"
  },
  {
    "text": "this uh this example that you can see here uh which is um",
    "start": "441520",
    "end": "446560"
  },
  {
    "text": "an interaction from you a user with the with the computer and this example will be shown in",
    "start": "446560",
    "end": "452639"
  },
  {
    "text": "multiple flavors during during the talk so uh at first the user chooses to delete a",
    "start": "452639",
    "end": "459919"
  },
  {
    "text": "thing and the ui asks to the backend for the name of the thing to show a pop-up to",
    "start": "459919",
    "end": "465360"
  },
  {
    "text": "the user do you want to delete the name and the backend search is the thing and",
    "start": "465360",
    "end": "470560"
  },
  {
    "text": "if the thing is found sends the name to the ui so the ui then shows to the user the",
    "start": "470560",
    "end": "476879"
  },
  {
    "text": "do you want to delete the object name if the user clicks yes the ui asks the backend to delete the",
    "start": "476879",
    "end": "482639"
  },
  {
    "text": "thing the backend then deletes the thing and and finally asks asks to the ui to",
    "start": "482639",
    "end": "488479"
  },
  {
    "text": "refresh the view so um some remarks about this example uh the",
    "start": "488479",
    "end": "496080"
  },
  {
    "start": "492000",
    "end": "492000"
  },
  {
    "text": "backhand and front end are not necessarily safe uh for example uh using a qt uh all the ui widgets are",
    "start": "496080",
    "end": "504240"
  },
  {
    "text": "usually running in one thread the the view is running in one thread and actually here for uh in our project",
    "start": "504240",
    "end": "512240"
  },
  {
    "text": "also the backend is working in the thread pool and uh if you want to communicate with",
    "start": "512240",
    "end": "517839"
  },
  {
    "text": "the backhand you should push a task to the third pool and when your task is running you're safe that you are not messing up",
    "start": "517839",
    "end": "523599"
  },
  {
    "text": "with caches and so on okay so uh the first approach we tried",
    "start": "523599",
    "end": "529360"
  },
  {
    "start": "527000",
    "end": "527000"
  },
  {
    "text": "to to implement this example for uh in this case uh is using uh uh all the tools that qte",
    "start": "529360",
    "end": "537519"
  },
  {
    "text": "makes uh makes for us so uh if uh for uh those of you who never used qt",
    "start": "537519",
    "end": "543920"
  },
  {
    "text": "qtz is a graphic framework where everything every class widget",
    "start": "543920",
    "end": "549440"
  },
  {
    "text": "every button inherit from the base class called queue object any",
    "start": "549440",
    "end": "554640"
  },
  {
    "text": "queue object can be wrapped inside a two pointer if you want you can even use the row pointers or a unique pointer whatever",
    "start": "554640",
    "end": "561040"
  },
  {
    "text": "you want but q pointer has a really interesting functionality uh that is when key object is uh",
    "start": "561040",
    "end": "569120"
  },
  {
    "text": "destroyed every cue pointer pointing to that object is set to null so that you can check if the",
    "start": "569120",
    "end": "577120"
  },
  {
    "text": "so that there are no dangling pointer you can check the states of the pointer by using a member function of it",
    "start": "577120",
    "end": "584959"
  },
  {
    "text": "and how this this mechanism works this mechanism works because qt has a",
    "start": "585120",
    "end": "591040"
  },
  {
    "text": "notification system built in which is called the signals and slots",
    "start": "591040",
    "end": "596800"
  },
  {
    "text": "mechanism and the signal is a notification so any object entity can emit a",
    "start": "596800",
    "end": "603200"
  },
  {
    "text": "notification uh if for example if a user clicks a button ah a click the signal is emitted and",
    "start": "603200",
    "end": "610079"
  },
  {
    "text": "every you can you can connect as programmer any signal you want to any slot any function angler you want",
    "start": "610079",
    "end": "616560"
  },
  {
    "text": "so that if the user clicks a button um your code runs on the talent and",
    "start": "616560",
    "end": "623519"
  },
  {
    "text": "for example if i also if a queue object is destroyed all its connections are destroyed and",
    "start": "623519",
    "end": "628720"
  },
  {
    "text": "this is a very interesting feature that you want to keep and uh also the this mechanism",
    "start": "628720",
    "end": "635600"
  },
  {
    "text": "is the base on on which the two pointers are built so when the pointed object is deleted the key",
    "start": "635600",
    "end": "641360"
  },
  {
    "text": "pointer are notified in this way and they start pointing to none so using this um",
    "start": "641360",
    "end": "648880"
  },
  {
    "text": "this pattern we try to implement the the the example we have seen before so a standard way to",
    "start": "648880",
    "end": "656079"
  },
  {
    "text": "implement this example using qt is like this so there is a function that at some point is called delete thing uh",
    "start": "656079",
    "end": "663279"
  },
  {
    "text": "when the user clicks to delete so delete thing pushes the task to the backend",
    "start": "663279",
    "end": "668560"
  },
  {
    "text": "and if you see here because of the backend is safe to use just in the thread pool a function that is running in the thread",
    "start": "668560",
    "end": "675040"
  },
  {
    "text": "pool has has a parameter which is a pointer to the backhand which is",
    "start": "675040",
    "end": "680240"
  },
  {
    "text": "is it's safe to use here so um then we asked the candidate to find the",
    "start": "680240",
    "end": "686560"
  },
  {
    "text": "thing here and if there is at least one result a signal is emitted and and emit is a qt keyword to emit a",
    "start": "686560",
    "end": "693920"
  },
  {
    "text": "signal uh a signal called got the infor thing is emitted then you as programmer if you want to",
    "start": "693920",
    "end": "699920"
  },
  {
    "text": "understand how this thing works you have to look around in the whole code base to look at where where are the",
    "start": "699920",
    "end": "705120"
  },
  {
    "text": "connections so where is connected this signal and then you look you find that this connection for example",
    "start": "705120",
    "end": "711680"
  },
  {
    "text": "connect which connects the signal got link for thing to a function as delete of the widget my",
    "start": "711680",
    "end": "718160"
  },
  {
    "text": "widget so then you look for the function as delete and this function works in this way",
    "start": "718160",
    "end": "723440"
  },
  {
    "text": "it asks a question to the user so this is a custom method and if the user",
    "start": "723440",
    "end": "730480"
  },
  {
    "text": "user answers positively another task is pushed to the trend pool uh and this task when runs uh deletes",
    "start": "730480",
    "end": "737519"
  },
  {
    "text": "the thing and emits another element uh sends another signal to the ui to reload the",
    "start": "737519",
    "end": "742800"
  },
  {
    "text": "view and then there is the last connection there are the event to um a functional reload view okay so",
    "start": "742800",
    "end": "750800"
  },
  {
    "text": "what are the advantages and the disadvantages of this approach uh the main advantage is that all the",
    "start": "750800",
    "end": "757040"
  },
  {
    "text": "lifetime checks are not delegated to the programmer because the signal automatically disconnects when the",
    "start": "757040",
    "end": "762639"
  },
  {
    "text": "an object is deleted and it's extensible also uh so you can just other more signals or",
    "start": "762639",
    "end": "769519"
  },
  {
    "text": "and functions uh function handler to improve the functionality",
    "start": "769519",
    "end": "774639"
  },
  {
    "text": "functionalities of the software instead what are the disadvantages so the main disadvantage here is that",
    "start": "774639",
    "end": "780480"
  },
  {
    "text": "the code is scattered around so if you want to follow a long series of ping pong between the ui",
    "start": "780480",
    "end": "785680"
  },
  {
    "text": "the ui and the backend you have to look in the whole code base for each step and",
    "start": "785680",
    "end": "792480"
  },
  {
    "text": "also this is a this approach is specific so we had to do some something like this without a ui without",
    "start": "792480",
    "end": "800639"
  },
  {
    "text": "qt and uh we in this way we would have to implement everything from scratch so",
    "start": "800639",
    "end": "807360"
  },
  {
    "start": "807000",
    "end": "807000"
  },
  {
    "text": "then we tried another approach to to do the same example",
    "start": "807360",
    "end": "813040"
  },
  {
    "text": "which is basically by nesting lambdas so at first here you have to keep a cue pointer",
    "start": "813040",
    "end": "819279"
  },
  {
    "text": "manually of the local object because you want to check every time you go back to the backend that",
    "start": "819279",
    "end": "824880"
  },
  {
    "text": "the ui is still alive because we are not using any more signals and slots in this way except for",
    "start": "824880",
    "end": "830320"
  },
  {
    "text": "the key pointer so attaches push to to the backhand",
    "start": "830320",
    "end": "835920"
  },
  {
    "text": "and the backhand is asked to find the thing if there's no result uh exit otherwise store the name of the",
    "start": "835920",
    "end": "842880"
  },
  {
    "text": "thing inside a local variable a variable local to this lambda and then another task is pushed to the",
    "start": "842880",
    "end": "850000"
  },
  {
    "text": "ui which forwards the all the parameter to the ui and here you can see that the",
    "start": "850000",
    "end": "855600"
  },
  {
    "text": "more you go on with the ping pongs the more parameter you need to add into the to the captures",
    "start": "855600",
    "end": "861120"
  },
  {
    "text": "so first thing to do when you go back to the main thread check every time that all variables that you want to use are live",
    "start": "861120",
    "end": "867839"
  },
  {
    "text": "then ask a question to the user okay if the user answer positively push another function to the backend",
    "start": "867839",
    "end": "875120"
  },
  {
    "text": "delete the thing and then push another function to the to the front end and check again",
    "start": "875120",
    "end": "880720"
  },
  {
    "text": "if the ui is still alive for example if the user closes the windows the pointer gets invalidated and then",
    "start": "880720",
    "end": "888160"
  },
  {
    "text": "finally reload the reload view so instead in this case we have the advantage that",
    "start": "888160",
    "end": "893519"
  },
  {
    "text": "the the flow is linear you can read from top to bottom i have a clear idea of how the ping pong",
    "start": "893519",
    "end": "900240"
  },
  {
    "text": "is going on it's plain portable zippers plus and it's extensible it says that you can add",
    "start": "900240",
    "end": "906480"
  },
  {
    "text": "more ping pongs but for each variable that you want to pass you have to add it you know all the captures instead it has two main",
    "start": "906480",
    "end": "914160"
  },
  {
    "text": "drawbacks which one is that all the checks are are delegated to the programmer and",
    "start": "914160",
    "end": "922800"
  },
  {
    "text": "actually every time you have to go back to the ui you have to check if the ui is still open if the all the variables are still alive",
    "start": "923279",
    "end": "930000"
  },
  {
    "text": "and also you can forward by mistake uh available from the from the ui to the",
    "start": "930000",
    "end": "935279"
  },
  {
    "text": "me to the worker thread and the other way around and that's not safe",
    "start": "935279",
    "end": "940639"
  },
  {
    "text": "if you recall the remarks uh i told you before and also the fact of nesting lambda",
    "start": "940639",
    "end": "947839"
  },
  {
    "text": "forces the indentation to grow into the right and adding ping",
    "start": "947839",
    "end": "953040"
  },
  {
    "text": "pongs uh makes it even worse so uh we also briefly look at their approaches",
    "start": "953040",
    "end": "959680"
  },
  {
    "start": "957000",
    "end": "957000"
  },
  {
    "text": "like the javascript promise and future way or how stdsync prevents td promise",
    "start": "959680",
    "end": "965040"
  },
  {
    "text": "future work and how other projects like chromium does but they all uh they usually are are a",
    "start": "965040",
    "end": "971839"
  },
  {
    "text": "mix between these two approaches and they all have some drawbacks and some advantages each",
    "start": "971839",
    "end": "977440"
  },
  {
    "text": "approach has its own drawbacks and advantages then we found a way to have all the advantages that we want",
    "start": "977440",
    "end": "984160"
  },
  {
    "text": "without all the disadvantages and this is by using the new shippers plus 20 crew team",
    "start": "984160",
    "end": "989759"
  },
  {
    "text": "that pietro is going to introduce us in a moment okay so uh let's start",
    "start": "989759",
    "end": "996880"
  },
  {
    "text": "discussing about the coroutines because uh the solution and alan is going to present later is heavily based on that",
    "start": "996880",
    "end": "1004959"
  },
  {
    "start": "1004000",
    "end": "1004000"
  },
  {
    "text": "before starting with the c plus plus 20 details uh let's just take what coroutines hire",
    "start": "1005120",
    "end": "1010880"
  },
  {
    "text": "at a high level so basically coroutines are generalization of the concept of proteins or",
    "start": "1010880",
    "end": "1016720"
  },
  {
    "text": "functions basically according to donald noth invented it by uh they are invented by melvin conway in",
    "start": "1016720",
    "end": "1022839"
  },
  {
    "text": "1958 and i mean there there are lots there is lots of literature on them but",
    "start": "1022839",
    "end": "1027918"
  },
  {
    "text": "to make it short coroutines are like subroutines but their execution can be suspended without",
    "start": "1027919",
    "end": "1034000"
  },
  {
    "text": "destroying the execution of context of the of the itself and the execution can be resumed later",
    "start": "1034000",
    "end": "1041280"
  },
  {
    "text": "where exactly where it stopped the last time the protein was suspended so uh if we if you want to",
    "start": "1041280",
    "end": "1048480"
  },
  {
    "text": "understand it better let's look at the supported operation from subroutines and quality",
    "start": "1048480",
    "end": "1054559"
  },
  {
    "start": "1050000",
    "end": "1050000"
  },
  {
    "text": "subroutines the with subroutines you can do basically two things two things you can call a subroutine and",
    "start": "1054559",
    "end": "1060240"
  },
  {
    "text": "when you call it uh you're basically creating the subroutine context so the stack frame",
    "start": "1060240",
    "end": "1065520"
  },
  {
    "text": "and you are starting the execution so you are past me the the term you are resuming",
    "start": "1065520",
    "end": "1071039"
  },
  {
    "text": "the execution of the subroutine from the beginning which is the only place where you can start the execution of a subroutine and then",
    "start": "1071039",
    "end": "1077600"
  },
  {
    "text": "you execute it until you hit a return statement when you hit a return statement the",
    "start": "1077600",
    "end": "1083440"
  },
  {
    "text": "second operation that is supported by coroutine is a trigger which is the return operation",
    "start": "1083440",
    "end": "1089360"
  },
  {
    "text": "this return operation can be seen and as composed by three steps these three steps are",
    "start": "1089360",
    "end": "1095520"
  },
  {
    "text": "returning control back to the caller so that when you return from a function you are yielding",
    "start": "1095520",
    "end": "1101039"
  },
  {
    "text": "the control back to the the caller function you may optionally return also a value back to the caller which is",
    "start": "1101039",
    "end": "1107679"
  },
  {
    "text": "the return value of the function and finally the subroutine context so",
    "start": "1107679",
    "end": "1112880"
  },
  {
    "text": "the stack frame is automatically destroyed the main idea of coroutines is that they",
    "start": "1112880",
    "end": "1119200"
  },
  {
    "text": "give you finer grained access to all these steps that i mentioned that for some routines are chunked into the",
    "start": "1119200",
    "end": "1125520"
  },
  {
    "text": "call and return operation so for coroutines you can uh basically create a coroutine",
    "start": "1125520",
    "end": "1131360"
  },
  {
    "text": "state on the heap in c plus plus but without starting the routine right away",
    "start": "1131360",
    "end": "1137039"
  },
  {
    "text": "so you just create the execution context that is going to contain uh the the routine parameters the local",
    "start": "1137039",
    "end": "1143120"
  },
  {
    "text": "variables and let's say the program counter and so on but you you are not forced to start",
    "start": "1143120",
    "end": "1148160"
  },
  {
    "text": "the routine execution right away you can however resume the execution whenever",
    "start": "1148160",
    "end": "1153440"
  },
  {
    "text": "you want so you the first time you resume the execution the routine is gonna start from the very beginning",
    "start": "1153440",
    "end": "1159919"
  },
  {
    "text": "and given that i already told you that you can suspend the routine whenever you resume the coroutine after",
    "start": "1159919",
    "end": "1165200"
  },
  {
    "text": "suspension the execution will be starting from the last time",
    "start": "1165200",
    "end": "1170559"
  },
  {
    "text": "the execute the execution was suspended so let's talk more about suspension when a",
    "start": "1170559",
    "end": "1176480"
  },
  {
    "text": "routine suspends the execution all the local variables and parameters and local state is",
    "start": "1176480",
    "end": "1182080"
  },
  {
    "text": "saved to the corrupting state and then there are three possible there are two possible",
    "start": "1182080",
    "end": "1188080"
  },
  {
    "text": "ways how a suspension can be executed by returning a value to the caller with the yield operation",
    "start": "1188080",
    "end": "1194799"
  },
  {
    "text": "and without returning a value to the caller with the await operation so yield is like returns control the",
    "start": "1194799",
    "end": "1201760"
  },
  {
    "text": "control is always returned back to the caller but when you use the yield operator you return only",
    "start": "1201760",
    "end": "1207360"
  },
  {
    "text": "you return the control back to the caller along with the value which is similar to a return value",
    "start": "1207360",
    "end": "1212799"
  },
  {
    "text": "except that you are not really returning you're just yielding back control and on the other",
    "start": "1212799",
    "end": "1218240"
  },
  {
    "text": "case you when you await you just give back control to the caller",
    "start": "1218240",
    "end": "1223679"
  },
  {
    "text": "without providing any pass me the term return value and finally you have the destroy",
    "start": "1223679",
    "end": "1229360"
  },
  {
    "text": "operation which can be invoked on the corrupting state after the coroutine execution has",
    "start": "1229360",
    "end": "1235440"
  },
  {
    "text": "actually ended so uh this is very nice but very theoretical let's see it in practice",
    "start": "1235440",
    "end": "1241919"
  },
  {
    "start": "1238000",
    "end": "1238000"
  },
  {
    "text": "i will show a very simple example uh i already mentioned that you can suspend a curtain without with a",
    "start": "1241919",
    "end": "1248559"
  },
  {
    "text": "return value with the yield operator but we're not going to the details because it's not very",
    "start": "1248559",
    "end": "1254000"
  },
  {
    "text": "used in this talk and if we start going into every detail you're gonna run",
    "start": "1254000",
    "end": "1260080"
  },
  {
    "text": "out of time but the await operator is very important it's gonna be the the the cornerstone of all our design",
    "start": "1260080",
    "end": "1268159"
  },
  {
    "text": "so let's see it with the pseudocode uh at start because the c plus plus syntax is much more complicated",
    "start": "1268159",
    "end": "1274159"
  },
  {
    "text": "and so here you have a a routine microroutine with a for loop from one to ten and",
    "start": "1274159",
    "end": "1279760"
  },
  {
    "text": "every iteration of the loop prints uh a number to the screen and calls the await operator okay",
    "start": "1279760",
    "end": "1287600"
  },
  {
    "text": "and when the await operator is called the return the the control the the execution flow",
    "start": "1287600",
    "end": "1293520"
  },
  {
    "text": "goes back to the caller without returning any value so uh when main starts it creates the",
    "start": "1293520",
    "end": "1300559"
  },
  {
    "text": "coroutine called printer and then iterates while the execution is not done and",
    "start": "1300559",
    "end": "1308000"
  },
  {
    "text": "every time it resumes the routine when their curutin is resumed",
    "start": "1308000",
    "end": "1313120"
  },
  {
    "text": "only a single iteration of the loop is executed and then when the execution hits a weight the con",
    "start": "1313120",
    "end": "1319440"
  },
  {
    "text": "the execution flow goes back to the caller so main in this case for the next iteration of the while loop",
    "start": "1319440",
    "end": "1327280"
  },
  {
    "text": "so if you execute this except that we you can't because it's not a real language but if you could",
    "start": "1327280",
    "end": "1332559"
  },
  {
    "text": "execute this the output is going to be the following so this is uh looks uh fairly simple and that's",
    "start": "1332559",
    "end": "1339919"
  },
  {
    "text": "nice but we already know that c plus plus is not so simple you might have heard that",
    "start": "1339919",
    "end": "1345200"
  },
  {
    "text": "uh coroutines in c plus plus 20 are pretty complex this is",
    "start": "1345200",
    "end": "1350640"
  },
  {
    "text": "what c plus plus does right with great power comes great responsibility uh so we have",
    "start": "1350640",
    "end": "1357039"
  },
  {
    "text": "looked into the the standard and into the implementation and we can tell you that it's not true they are not so complicated",
    "start": "1357039",
    "end": "1363200"
  },
  {
    "text": "they are actually much more complicated so for the sake of this talk we are not going to",
    "start": "1363200",
    "end": "1368960"
  },
  {
    "text": "tell everything about coroutines we are going to focus on a microportion that is necessary to",
    "start": "1368960",
    "end": "1374559"
  },
  {
    "text": "implement our solution um so what",
    "start": "1374559",
    "end": "1380000"
  },
  {
    "start": "1379000",
    "end": "1379000"
  },
  {
    "text": "c plus plus in co routines are available from c plus plus 20 that was released",
    "start": "1380000",
    "end": "1385760"
  },
  {
    "text": "this year a few months ago the support despite the the standard being closed is still",
    "start": "1385760",
    "end": "1391600"
  },
  {
    "text": "experimental in major compilers we experimented with dcc and silang and we had some problems in at",
    "start": "1391600",
    "end": "1398159"
  },
  {
    "text": "various points in time so at the moment we have some we have an implementation working with c lang",
    "start": "1398159",
    "end": "1404240"
  },
  {
    "text": "9 or 10 and using this lib c plus plus not which is the standard",
    "start": "1404240",
    "end": "1409600"
  },
  {
    "text": "template library of c lang not one of gcc but gcc is catching up",
    "start": "1409600",
    "end": "1414799"
  },
  {
    "text": "so in the the supporting still experimental and another a little problem is that um",
    "start": "1414799",
    "end": "1421380"
  },
  {
    "text": "[Music] in cyprus 20 the library support is still very limited so you have to roll",
    "start": "1421380",
    "end": "1427600"
  },
  {
    "text": "most of your classes but the good part is that uh the syntax is not so different from",
    "start": "1427600",
    "end": "1433679"
  },
  {
    "text": "what i showed you before it's very similar to plain old functions in c plus plus with the with a caveat",
    "start": "1433679",
    "end": "1440880"
  },
  {
    "text": "there are a bunch of types and objects associated with the routines and the standard imposes some",
    "start": "1440880",
    "end": "1446320"
  },
  {
    "text": "requirements on the routine and on its associated types and if your code doesn't uh respect",
    "start": "1446320",
    "end": "1454000"
  },
  {
    "text": "it doesn't fulfill those requirements it's not going to compile in this uh respect i can tell you that",
    "start": "1454000",
    "end": "1461279"
  },
  {
    "text": "at least the last time i checked the error messages from from silang were much more helpful in understanding",
    "start": "1461279",
    "end": "1466880"
  },
  {
    "text": "what was wrong but let's uh let's start looking at a a",
    "start": "1466880",
    "end": "1472640"
  },
  {
    "text": "c plus plot code uh really so how does the compiler know uh no sorry uh let's start uh",
    "start": "1472640",
    "end": "1480480"
  },
  {
    "text": "looking about what are the notable objects that their language",
    "start": "1480480",
    "end": "1486880"
  },
  {
    "text": "says are associated with a coroutine there are basically uh three things the first thing is the",
    "start": "1486880",
    "end": "1492960"
  },
  {
    "start": "1489000",
    "end": "1489000"
  },
  {
    "text": "corrupting state so this contains the coroutine execution context arguments local variable like i",
    "start": "1492960",
    "end": "1499120"
  },
  {
    "text": "mentioned before this is allocated on the heap in c plus but you never access it or manipulate",
    "start": "1499120",
    "end": "1506080"
  },
  {
    "text": "directly it is only manipulated by the language under the hood so we don't really need to care much about",
    "start": "1506080",
    "end": "1513360"
  },
  {
    "text": "that but we need to know that it exists the second of the important",
    "start": "1513360",
    "end": "1518480"
  },
  {
    "text": "object is the promise object this is an object used from within the routine to suspend",
    "start": "1518480",
    "end": "1523520"
  },
  {
    "text": "or yield the results of the caller it's the main object that you have to define as a user",
    "start": "1523520",
    "end": "1530080"
  },
  {
    "text": "and the language requires a given interface for it and finally the third object is the",
    "start": "1530080",
    "end": "1536240"
  },
  {
    "text": "corrupting handle this is a non-owning handle that points let's say to the coroutine state",
    "start": "1536240",
    "end": "1542080"
  },
  {
    "text": "and it can be used from outside the routine to control its execution so you can resume or destroy the coroutine using",
    "start": "1542080",
    "end": "1550080"
  },
  {
    "text": "the handle and one of the good things is that the um the clothing handle is one of the few",
    "start": "1550080",
    "end": "1556159"
  },
  {
    "text": "types that is currently provided by the standard library so uh you you can you can",
    "start": "1556159",
    "end": "1562799"
  },
  {
    "text": "manipulate it and you don't have to define it yourself okay i discussed a lot about all these",
    "start": "1562799",
    "end": "1569360"
  },
  {
    "text": "objects but i haven't told you how the compiler knows that your function is actually a protein so the the thing",
    "start": "1569360",
    "end": "1576480"
  },
  {
    "start": "1576000",
    "end": "1576000"
  },
  {
    "text": "is that there are three new operators the co-weight operator",
    "start": "1576480",
    "end": "1581919"
  },
  {
    "text": "which marks the suspension point that doesn't return a value the co yield operator which marks a",
    "start": "1581919",
    "end": "1588559"
  },
  {
    "text": "suspension point that returns a value to the caller and the core return operator which",
    "start": "1588559",
    "end": "1594240"
  },
  {
    "text": "basically marks the end of the execution of a routine so these three operators are",
    "start": "1594240",
    "end": "1601039"
  },
  {
    "text": "what the compiler uses to tell you if your function is supposed to be a protein so if your function uses any",
    "start": "1601039",
    "end": "1608240"
  },
  {
    "text": "of these then it is a candidate coroutine and the compiler is going to check all the",
    "start": "1608240",
    "end": "1615760"
  },
  {
    "text": "other constraints or on all the other types that i mentioned to be able to omit the code if you can't if some of your types",
    "start": "1615760",
    "end": "1622480"
  },
  {
    "text": "doesn't fulfill the requirements the compiler is going to emit an error and don't compile your",
    "start": "1622480",
    "end": "1628320"
  },
  {
    "text": "uh and don't compile your code so enough with the with the language",
    "start": "1628320",
    "end": "1634960"
  },
  {
    "text": "constructs let's say and let's start looking at an example so that we can start focusing on what is",
    "start": "1634960",
    "end": "1640480"
  },
  {
    "text": "important for this talk so this is the the same coding that i showed you before",
    "start": "1640480",
    "end": "1646159"
  },
  {
    "start": "1642000",
    "end": "1642000"
  },
  {
    "text": "in the pseudocode but with c plus plus syntax okay i want to go through this example",
    "start": "1646159",
    "end": "1652399"
  },
  {
    "text": "and focus one by one on some uh of the types and the objects that are associated with it so the",
    "start": "1652399",
    "end": "1660480"
  },
  {
    "text": "the idea is very simple it's i think you can understand it uh from the example before the the sea",
    "start": "1660480",
    "end": "1666320"
  },
  {
    "text": "out is printing the the number and the koa weight operator is yielding uh is uh giving control back",
    "start": "1666320",
    "end": "1674399"
  },
  {
    "text": "to the caller but here there is an awaitable object that is the operand of the uh co-await",
    "start": "1674399",
    "end": "1679760"
  },
  {
    "text": "operator that we will see that it is very important but uh",
    "start": "1679760",
    "end": "1684799"
  },
  {
    "text": "we will see it in a moment so let me tell you more about the other things that are in this slide before so the the first one is the",
    "start": "1684799",
    "end": "1691760"
  },
  {
    "text": "resumable object here returned by the coroutine there is uh the standard requires that the the return value of a routine",
    "start": "1691760",
    "end": "1698880"
  },
  {
    "text": "must be a class and in max expose a public type called promise type so you have a you you need a type def in inside your",
    "start": "1698880",
    "end": "1706159"
  },
  {
    "text": "custom defined resumable type that exposes a type called promise type and",
    "start": "1706159",
    "end": "1711520"
  },
  {
    "text": "the standard mandates an interface for the promise type okay so the promise type needs to expose",
    "start": "1711520",
    "end": "1718000"
  },
  {
    "text": "a given interface because uh this is the type used for the",
    "start": "1718000",
    "end": "1723039"
  },
  {
    "text": "promise object and the language is going to manipulate it under the hood to suspend and resume your protein",
    "start": "1723039",
    "end": "1730240"
  },
  {
    "text": "we are not going to see this interface because we are not going to use it in this talk but you have to be aware that",
    "start": "1730240",
    "end": "1735279"
  },
  {
    "text": "it exists the second important object is the coroutine handle",
    "start": "1735279",
    "end": "1740880"
  },
  {
    "text": "this is a type that is uh retrieved uh by the language when you call a core",
    "start": "1740880",
    "end": "1746399"
  },
  {
    "text": "routine everything happens under the hood but whenever you have a handle",
    "start": "1746399",
    "end": "1751440"
  },
  {
    "text": "in your hand you can use it to manipulate the corrupting state this is a helper type provided by the",
    "start": "1751440",
    "end": "1758480"
  },
  {
    "text": "standard template library so you can use a stood corrupting handle and pass as a template parameter the",
    "start": "1758480",
    "end": "1764240"
  },
  {
    "text": "promise type of your protein and after you do this you have access to the method exposed by the protein handle",
    "start": "1764240",
    "end": "1772080"
  },
  {
    "text": "and that uh there is one method to access the promise there is one method",
    "start": "1772080",
    "end": "1777279"
  },
  {
    "text": "to see if the um",
    "start": "1777279",
    "end": "1781840"
  },
  {
    "text": "the courage execution is done there is one method to destroy the execution and most importantly there is one method uh that i haven't",
    "start": "1782960",
    "end": "1790640"
  },
  {
    "text": "put in the slide but we're gonna use it later that is used from the protein handle to resume",
    "start": "1790640",
    "end": "1796080"
  },
  {
    "text": "the execution of the protein finally the avoidable type i didn't talk about a weightables before",
    "start": "1796080",
    "end": "1802159"
  },
  {
    "text": "because i want to focus more on them than",
    "start": "1802159",
    "end": "1807600"
  },
  {
    "text": "anything else so from now on i'm gonna talk about the weightables awaitables are",
    "start": "1807600",
    "end": "1812799"
  },
  {
    "text": "the types that the koat operator is called against they are very",
    "start": "1812799",
    "end": "1818320"
  },
  {
    "text": "important for this talk because they bake uh all the logic that is executed on uh protein",
    "start": "1818320",
    "end": "1825200"
  },
  {
    "text": "suspension and resumption okay so they need an awaitable type is",
    "start": "1825200",
    "end": "1831279"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "anything that exposes uh the uh a follow interface composed of three",
    "start": "1831279",
    "end": "1837440"
  },
  {
    "text": "methods the first method is their weight ready is a method that allows to check if the coroutine is",
    "start": "1837440",
    "end": "1844880"
  },
  {
    "text": "ready to be executed so the coroutine that calls the co-await operator on",
    "start": "1844880",
    "end": "1850320"
  },
  {
    "text": "the awaitable object is ready to be executed if this",
    "start": "1850320",
    "end": "1857600"
  },
  {
    "text": "operator this function returns a bull return true is not ready if the return false the",
    "start": "1857600",
    "end": "1863760"
  },
  {
    "text": "second method is the await suspend method again this method returns a boolean and takes",
    "start": "1863760",
    "end": "1868880"
  },
  {
    "text": "a protein handle as a parameter",
    "start": "1868880",
    "end": "1872880"
  },
  {
    "text": "this method returns true if the curtin execution needs to be suspended or false",
    "start": "1874080",
    "end": "1881200"
  },
  {
    "text": "if the it doesn't need to be suspended so if it needs to continue execution and again this is uh called on the",
    "start": "1881200",
    "end": "1888960"
  },
  {
    "text": "from within the coroutine when the coroutine calls the co-weight operator on the awaitable type okay",
    "start": "1888960",
    "end": "1895279"
  },
  {
    "text": "and finally there is another method that is the weight resume method which is called from the protein",
    "start": "1895279",
    "end": "1903120"
  },
  {
    "text": "right after resumption so if there is a co-await operator called on this awaitable",
    "start": "1903120",
    "end": "1911200"
  },
  {
    "text": "the execution will suspend and then somewhere else it will be resumed and when the execution is resumed",
    "start": "1911200",
    "end": "1917440"
  },
  {
    "text": "the await resume operator will be called and it can yield it can return a value whenever whatever",
    "start": "1917440",
    "end": "1922799"
  },
  {
    "text": "value you want so uh let's see it in practice on the left here you have the",
    "start": "1922799",
    "end": "1928559"
  },
  {
    "start": "1927000",
    "end": "1927000"
  },
  {
    "text": "the core routine that i showed you before suspend always is basically",
    "start": "1928559",
    "end": "1933840"
  },
  {
    "text": "unawaitable type provided by the standard that always suspends the core routine and doesn't do anything",
    "start": "1933840",
    "end": "1940720"
  },
  {
    "text": "else so this code is actually expanded like you can see on the right so you have",
    "start": "1940720",
    "end": "1946480"
  },
  {
    "text": "a local variable that is assigned the suspend always a weightable and then you",
    "start": "1946480",
    "end": "1951919"
  },
  {
    "text": "you call a weight ready on the avoidable and if a weight ready",
    "start": "1951919",
    "end": "1957600"
  },
  {
    "text": "uh says that the coroutine is not ready then you have to suspend it calling the",
    "start": "1957600",
    "end": "1963200"
  },
  {
    "text": "await suspend and if the weight suspend also returns true means that the execution really really",
    "start": "1963200",
    "end": "1969360"
  },
  {
    "text": "needs to be suspended and is suspended here and it will be resumed from somewhere else and you will start from the",
    "start": "1969360",
    "end": "1976480"
  },
  {
    "text": "very next line at this point the execution flow will fall through and go to the call to the",
    "start": "1976480",
    "end": "1982399"
  },
  {
    "text": "await resume operator the awaitable that this operator can return a value we here it's not used but we will use it",
    "start": "1982399",
    "end": "1989679"
  },
  {
    "text": "later so this is uh basically all the ingredients we need",
    "start": "1989679",
    "end": "1995760"
  },
  {
    "text": "they go away the awaitable types are very important because like i said they are the cornerstone of our solution and",
    "start": "1995760",
    "end": "2001840"
  },
  {
    "text": "they are the custom classes that we designed and where we baked all the intelligence of our solution i",
    "start": "2001840",
    "end": "2008080"
  },
  {
    "text": "think so alain now we're going to tell you about it okay so if you recall what we want to achieve",
    "start": "2008080",
    "end": "2015200"
  },
  {
    "start": "2013000",
    "end": "2013000"
  },
  {
    "text": "is that we want to write um some asynchronous code using a",
    "start": "2015200",
    "end": "2020559"
  },
  {
    "text": "sequential syntax from top to bottom we want to have the last boilerplate as possible for uh",
    "start": "2020559",
    "end": "2026720"
  },
  {
    "text": "third migration and variable checking we want to use it just standard zippers",
    "start": "2026720",
    "end": "2031919"
  },
  {
    "text": "plus we don't want to use qtr or other frameworks and we want to uh",
    "start": "2031919",
    "end": "2037039"
  },
  {
    "text": "avoid delegating all the checks for the liveness of the variable to the programmer we want to do them automatically",
    "start": "2037039",
    "end": "2043120"
  },
  {
    "start": "2043000",
    "end": "2043000"
  },
  {
    "text": "so our solution is made of four step so the first part is uh how the",
    "start": "2043120",
    "end": "2049679"
  },
  {
    "text": "self-dispatching routine so this is like a design design choice",
    "start": "2049679",
    "end": "2055679"
  },
  {
    "text": "uh and then the other three steps are about all the checks so automata lifetime checks when the",
    "start": "2055679",
    "end": "2061520"
  },
  {
    "text": "execution is resumed automatically hide the thread on safe variables when you suspend routine and",
    "start": "2061520",
    "end": "2068878"
  },
  {
    "text": "automatically regard those other variables that they are not guarded by by 0.3 so",
    "start": "2068879",
    "end": "2074878"
  },
  {
    "text": "first part is the dispatching routines which is the the way we call the one routine that",
    "start": "2074879",
    "end": "2081358"
  },
  {
    "text": "can switch automatically from the main thread to the thread pool and back whenever you call call weight",
    "start": "2081359",
    "end": "2087200"
  },
  {
    "text": "so we want to do something like this there is a cool routine where the execution starts from the main",
    "start": "2087200",
    "end": "2093520"
  },
  {
    "text": "thread as you can see here then uh a co weight operator is a",
    "start": "2093520",
    "end": "2099040"
  },
  {
    "text": "called with a customer waiter so co-awaited to tread pool that this waiter uh the weightable",
    "start": "2099040",
    "end": "2105839"
  },
  {
    "text": "switches the the thread under the hood then the execution goes on on the thread pool",
    "start": "2105839",
    "end": "2111920"
  },
  {
    "text": "then we call again uh co with another uh awaitable which is a main thread that",
    "start": "2111920",
    "end": "2118240"
  },
  {
    "text": "switches the thread back to the the white red and then the execution is uh",
    "start": "2118240",
    "end": "2123760"
  },
  {
    "text": "is back to the to the main trend so to do that uh we need to make the threads which",
    "start": "2123760",
    "end": "2129040"
  },
  {
    "text": "logic inside our customer waitables and we can build the weightable in this",
    "start": "2129040",
    "end": "2135280"
  },
  {
    "start": "2133000",
    "end": "2133000"
  },
  {
    "text": "way so here you see just the web suspend method which is the one interesting right now",
    "start": "2135280",
    "end": "2140800"
  },
  {
    "text": "the width suspend has the core handle so what can we do is to uh",
    "start": "2140800",
    "end": "2146240"
  },
  {
    "text": "push the task to the thread pool inside the width suspend so if you recall the the the core",
    "start": "2146240",
    "end": "2151280"
  },
  {
    "text": "routine is suspended the rabbit right before executing the the with suspender",
    "start": "2151280",
    "end": "2156720"
  },
  {
    "text": "then we push a task and ask where we forward the core handle the core handle is wrapped around the",
    "start": "2156720",
    "end": "2162880"
  },
  {
    "text": "inside another resumable and the execution is resumed in the thread pool",
    "start": "2162880",
    "end": "2168720"
  },
  {
    "text": "uh using this pattern we can create a weightable that bounces coroutine from the ui thread",
    "start": "2168720",
    "end": "2175200"
  },
  {
    "start": "2175000",
    "end": "2175000"
  },
  {
    "text": "to the third pole and back okay so in this way uh the example uh at the",
    "start": "2175200",
    "end": "2180720"
  },
  {
    "text": "beginning becomes like something like this uh we have here the the two pointer uh the key pointer",
    "start": "2180720",
    "end": "2187839"
  },
  {
    "text": "guarding the local widget then the core weight is called and the kohit moves the execution to the third",
    "start": "2187839",
    "end": "2194160"
  },
  {
    "text": "pool then there are the the operation we want to do on the on the third pool and in the almost the last line here",
    "start": "2194160",
    "end": "2203440"
  },
  {
    "text": "we can we can store a variable uh something on inside the context of the",
    "start": "2203440",
    "end": "2208800"
  },
  {
    "text": "coroutine and this context is shared between threads so the variable current name is can be",
    "start": "2208800",
    "end": "2214000"
  },
  {
    "text": "used safely from the main trend then the execution goes back to the main trend we have to remember to check that",
    "start": "2214000",
    "end": "2221280"
  },
  {
    "text": "the p is not uh it's not noun to go on so the ui is not closed then we ask the",
    "start": "2221280",
    "end": "2227760"
  },
  {
    "text": "question to the user if answers yes switch back to the thread pool perform the operation switch back to the main",
    "start": "2227760",
    "end": "2233599"
  },
  {
    "text": "thread if the the ui is not closed the reload view so here we have almost all the",
    "start": "2233599",
    "end": "2241760"
  },
  {
    "start": "2239000",
    "end": "2239000"
  },
  {
    "text": "advantages of the previous approaches like we have a local sequential syntax you can read the this function from top",
    "start": "2241760",
    "end": "2248320"
  },
  {
    "text": "to bottom and understand the ping pong flow there is no boiler plate so you can switch thread",
    "start": "2248320",
    "end": "2253920"
  },
  {
    "text": "with the we just call weight and all the stuck variables are shared between threads",
    "start": "2253920",
    "end": "2259599"
  },
  {
    "text": "it's easily extensible in size that you can add more ping pongs you just write more core weight and you",
    "start": "2259599",
    "end": "2265680"
  },
  {
    "text": "bounce between threads and it's a fully spread syntax instead now the disadvantage is that uh",
    "start": "2265680",
    "end": "2273440"
  },
  {
    "text": "all the checks are now delegated to the programmer so we start at first with the first problem",
    "start": "2273440",
    "end": "2278960"
  },
  {
    "start": "2276000",
    "end": "2276000"
  },
  {
    "text": "okay that we can solve automatically with the core routines so uh for example first problem is that the",
    "start": "2278960",
    "end": "2285760"
  },
  {
    "text": "programmer still has to check the lifetime of ui objects so every time we go back to the main thread that we have to call a",
    "start": "2285760",
    "end": "2291920"
  },
  {
    "text": "dot is null uh pointer dot is now for each variable uh here you can see in this example that",
    "start": "2291920",
    "end": "2299839"
  },
  {
    "text": "if a programmer forgets here uh attracted so the execution goes to the",
    "start": "2299839",
    "end": "2305520"
  },
  {
    "text": "third pool goes back to the main thread while it's in the thread pool before going back to the main track the user",
    "start": "2305520",
    "end": "2310800"
  },
  {
    "text": "closes the window so when you go back to the main thread if you forget a check the first time you use a variable that",
    "start": "2310800",
    "end": "2317119"
  },
  {
    "text": "is not live anymore uh there's a crash so",
    "start": "2317119",
    "end": "2322160"
  },
  {
    "text": "can we perform these checks automatically and the answer is yeah so we want to achieve something like this so",
    "start": "2322160",
    "end": "2328400"
  },
  {
    "start": "2324000",
    "end": "2324000"
  },
  {
    "text": "we want to have a guard object at the beginning of the routine that wraps all the variables and uh whenever you switch to the third",
    "start": "2328400",
    "end": "2335760"
  },
  {
    "text": "pool nothing happens but when you go back to the main thread uh we want the user the programmer to",
    "start": "2335760",
    "end": "2341839"
  },
  {
    "text": "check to be forced to check just the return value of the weightable if it's true or false if it's false something better happened",
    "start": "2341839",
    "end": "2349359"
  },
  {
    "text": "a variable might be destroyed so you exit from the routine or do whatever you want otherwise",
    "start": "2349359",
    "end": "2354720"
  },
  {
    "text": "it's safe to use all the variables without without checking them so how can we make",
    "start": "2354720",
    "end": "2362400"
  },
  {
    "start": "2361000",
    "end": "2361000"
  },
  {
    "text": "a guard class like this uh well we need a class with all the",
    "start": "2362400",
    "end": "2368480"
  },
  {
    "text": "where in the constructor you pass all the variables that you want to guard and a reference of these variables is",
    "start": "2368480",
    "end": "2374560"
  },
  {
    "text": "stored inside the guard class inside the tuple and then there is just a checklise",
    "start": "2374560",
    "end": "2379760"
  },
  {
    "text": "method that uses all the specialization of the wrapper class safe reference t which wraps every",
    "start": "2379760",
    "end": "2387040"
  },
  {
    "text": "variable that you want to guard and we specialize the the safe reference t for both shirt pointer and two pointer",
    "start": "2387040",
    "end": "2393520"
  },
  {
    "text": "because these are the two main classes of variables that you want to to check and then we build the",
    "start": "2393520",
    "end": "2401760"
  },
  {
    "text": "we create the awaitables starting from the guard class so that the weightables have a reference",
    "start": "2401760",
    "end": "2409280"
  },
  {
    "text": "to all the variables inside the guard class i mean they can call check",
    "start": "2409280",
    "end": "2414560"
  },
  {
    "text": "live to check all the status of all the the variables and then the awaitable uh becomes like",
    "start": "2414560",
    "end": "2420640"
  },
  {
    "start": "2417000",
    "end": "2417000"
  },
  {
    "text": "this so uh an awaitable like to maintain as first parameter in the constructor as",
    "start": "2420640",
    "end": "2427040"
  },
  {
    "text": "a reference to the guard class the weight suspend is exactly the same",
    "start": "2427040",
    "end": "2432079"
  },
  {
    "text": "but actually in the weight resume the checklife method is called before resuming and the return value of the",
    "start": "2432079",
    "end": "2439040"
  },
  {
    "text": "call weight is is if you're called is the return value of the waiter zone which is uh the return value of check",
    "start": "2439040",
    "end": "2446560"
  },
  {
    "text": "alive you can put uh if you want just a warning you can put notice card",
    "start": "2446560",
    "end": "2451920"
  },
  {
    "text": "to um so that the compiler warns you uh if the the return value of the call",
    "start": "2451920",
    "end": "2458640"
  },
  {
    "text": "weight is not checked otherwise you can wrap the the boolean inside the class that crashes if you don't check the result before destroying",
    "start": "2458640",
    "end": "2465359"
  },
  {
    "start": "2463000",
    "end": "2463000"
  },
  {
    "text": "it like we did in our project uh okay so the example becomes like this so it's",
    "start": "2465359",
    "end": "2471839"
  },
  {
    "text": "almost as before uh so at first you have the now you have the guard here then you",
    "start": "2471839",
    "end": "2478960"
  },
  {
    "text": "have the core weight to thread pull um and then when you uh call the call with two main thread",
    "start": "2478960",
    "end": "2486319"
  },
  {
    "text": "here use the guard dot to maintread to generate the weightable and",
    "start": "2486319",
    "end": "2491359"
  },
  {
    "text": "you are forced to check the result here and with just one check you check all the variables that you can",
    "start": "2491359",
    "end": "2497920"
  },
  {
    "text": "put inside the the disk routine and after this with this line so after",
    "start": "2497920",
    "end": "2504960"
  },
  {
    "text": "the whole wait it's safe to uh to use the the point all the pointers inside without checking them again",
    "start": "2504960",
    "end": "2511680"
  },
  {
    "text": "and this can be repeated multiple times so even if at the line at the bottom we use again call weight and check the",
    "start": "2511680",
    "end": "2518079"
  },
  {
    "text": "result uh inside here then p it's safe to use so now we have",
    "start": "2518079",
    "end": "2523200"
  },
  {
    "start": "2522000",
    "end": "2522000"
  },
  {
    "text": "all the process before with a new pro which is that the lifetime checks are automated on core weight",
    "start": "2523200",
    "end": "2529280"
  },
  {
    "text": "and uh the user is the programmer is forced at compile time to check the result",
    "start": "2529280",
    "end": "2534560"
  },
  {
    "text": "instead there is still a a con which is that the trader safe variable can be accessed in the wrong thread that",
    "start": "2534560",
    "end": "2541040"
  },
  {
    "start": "2541000",
    "end": "2541000"
  },
  {
    "text": "we are going to deal right now so um this is an example of what can",
    "start": "2541040",
    "end": "2547119"
  },
  {
    "text": "go wrong could go wrong so you we have the guard here we go to the third pool using the the kuwait but",
    "start": "2547119",
    "end": "2554319"
  },
  {
    "text": "then the programmer forgets to go back to the main thread and then uses a variable and this",
    "start": "2554319",
    "end": "2561119"
  },
  {
    "text": "variable may cause a crash can we do something about this problem to remove this problem",
    "start": "2561119",
    "end": "2567680"
  },
  {
    "text": "and yeah so we can swap all unsafe pointers with the null ptr before performing the thread",
    "start": "2567680",
    "end": "2572880"
  },
  {
    "text": "switch and back when we perform the other third switch so we can extend the guard",
    "start": "2572880",
    "end": "2578079"
  },
  {
    "start": "2576000",
    "end": "2576000"
  },
  {
    "text": "class in this way uh we can add um two more tuples in the guard class one",
    "start": "2578079",
    "end": "2584160"
  },
  {
    "text": "containing the ptrs all the references to the variables in the routine that should be swapped with",
    "start": "2584160",
    "end": "2589440"
  },
  {
    "text": "nala and the memory uh which is another tuple that contained the value",
    "start": "2589440",
    "end": "2594880"
  },
  {
    "text": "while the all the variables in the routine are swapped to null so when you swap the variable there all",
    "start": "2594880",
    "end": "2600880"
  },
  {
    "text": "the real contents go inside map the memory tuple and then they're just a method called the swap context",
    "start": "2600880",
    "end": "2607680"
  },
  {
    "text": "which um which swap all the variables uh subcontext can be called y uh before",
    "start": "2607680",
    "end": "2614960"
  },
  {
    "start": "2611000",
    "end": "2611000"
  },
  {
    "text": "creating the the weightable or if you want you can call it inside the the weight the",
    "start": "2614960",
    "end": "2620319"
  },
  {
    "text": "weightable as you prefer and in this way uh the code is exactly the same as before but now you",
    "start": "2620319",
    "end": "2627440"
  },
  {
    "text": "have another guarantee which is that if you try to use a p for example the variable p",
    "start": "2627440",
    "end": "2632960"
  },
  {
    "text": "in the in this example if you try to use it in the wrong thread p is automatically",
    "start": "2632960",
    "end": "2638720"
  },
  {
    "text": "set to null so that the program crashes deterministically and you spot the bug in tests and not in",
    "start": "2638720",
    "end": "2643920"
  },
  {
    "text": "irrelease okay so uh using this approach what are the pros",
    "start": "2643920",
    "end": "2649920"
  },
  {
    "start": "2647000",
    "end": "2647000"
  },
  {
    "text": "and cons now we also have the that all the ui variables are guarded from the back end from using them in the",
    "start": "2649920",
    "end": "2657599"
  },
  {
    "text": "backend thread but uh the backend variables are still",
    "start": "2657599",
    "end": "2663119"
  },
  {
    "text": "unchecked and because uh what we are doing we are using a",
    "start": "2663119",
    "end": "2668880"
  },
  {
    "start": "2665000",
    "end": "2665000"
  },
  {
    "text": "function called the get backend to obtain the backend that can be used also in the main thread",
    "start": "2668880",
    "end": "2673920"
  },
  {
    "text": "but actually this function is safe to use uh only in the thread pool so uh we can use uh the weightable",
    "start": "2673920",
    "end": "2681200"
  },
  {
    "text": "to automate the logic on suspender zoom even this time and this time what we want to achieve",
    "start": "2681200",
    "end": "2688319"
  },
  {
    "start": "2686000",
    "end": "2686000"
  },
  {
    "text": "is this so we want to call uh before uh this approach",
    "start": "2688319",
    "end": "2695520"
  },
  {
    "text": "we call the co-waiter to thread pool here what we want to achieve is that we call ko wait the call it",
    "start": "2695520",
    "end": "2702400"
  },
  {
    "text": "returns a pointer to the backend an expiring pointer and the backend pointer then",
    "start": "2702400",
    "end": "2707920"
  },
  {
    "text": "can be used inside while the execution is in the third pool and then when the execution is back to",
    "start": "2707920",
    "end": "2714640"
  },
  {
    "text": "the main thread the expiring pointer which we're gonna see in a moment is mark marked as expired and",
    "start": "2714640",
    "end": "2722480"
  },
  {
    "text": "that's it is the only way to go back to the main thread so that you can go back to the main thread only once and you can",
    "start": "2722480",
    "end": "2727680"
  },
  {
    "text": "you you cannot call this this awaitable multiple times for example",
    "start": "2727680",
    "end": "2732800"
  },
  {
    "text": "and okay so how's the expiring pointer implemented uh the expiring pointer is just a",
    "start": "2732800",
    "end": "2739760"
  },
  {
    "start": "2734000",
    "end": "2734000"
  },
  {
    "text": "pointer wrapper uh but it has all submitted mark as expired that if it's called",
    "start": "2739760",
    "end": "2744960"
  },
  {
    "text": "that's the the local variable expired is true and when this variable is true",
    "start": "2744960",
    "end": "2750000"
  },
  {
    "text": "the other methods stop working trigger an assertion if you try to call them",
    "start": "2750000",
    "end": "2756319"
  },
  {
    "start": "2755000",
    "end": "2755000"
  },
  {
    "text": "so uh in this way then we change the two third pull away table in um the width suspend is like before",
    "start": "2756319",
    "end": "2764240"
  },
  {
    "text": "but we change the weight resume of the of these awaitable so that it wraps the backend calls the backend here and",
    "start": "2764240",
    "end": "2772560"
  },
  {
    "text": "then here is the only way to call it the the candle you can change it in this way and the the return value is wrapped in",
    "start": "2772560",
    "end": "2779920"
  },
  {
    "text": "an expiring pointer and the expiring pointer then is needed to create the two main thread awaitable",
    "start": "2779920",
    "end": "2787280"
  },
  {
    "text": "and when the two interdependable is generated the expiring pointer is marked expired",
    "start": "2787280",
    "end": "2794400"
  },
  {
    "text": "and in this way the the final example our example becomes like this so you you have a guard here",
    "start": "2794400",
    "end": "2800960"
  },
  {
    "start": "2795000",
    "end": "2795000"
  },
  {
    "text": "that wraps p the first co-waiter switches the execution to the thread pull and returns",
    "start": "2800960",
    "end": "2806480"
  },
  {
    "text": "a valid pointer to the back end which is usable just in the thread pool then the programmer uses here",
    "start": "2806480",
    "end": "2812560"
  },
  {
    "text": "the the backhand and to go back to the main thread uh the backend pointer is needed and now",
    "start": "2812560",
    "end": "2819359"
  },
  {
    "text": "the back point the pointer is marked as expired so in the ui the pointer is not usable",
    "start": "2819359",
    "end": "2826160"
  },
  {
    "text": "anymore then in the ui you can use all the variables as as before but then when you request",
    "start": "2826160",
    "end": "2834400"
  },
  {
    "text": "again a backend pointer all the ui variables are swapped back and the backhand is now instead visible",
    "start": "2834400",
    "end": "2842079"
  },
  {
    "text": "and that's it and finally you could go back finally to the ui thread with the call wait and you can reload",
    "start": "2842079",
    "end": "2848880"
  },
  {
    "text": "the view so pietro is now giving you some conclusion yes so as you have seen",
    "start": "2848880",
    "end": "2853920"
  },
  {
    "text": "it's been quite a long journey and there are many steps many incremental steps",
    "start": "2853920",
    "end": "2859119"
  },
  {
    "start": "2854000",
    "end": "2854000"
  },
  {
    "text": "but we believe that we were able to design a solution that is that we are very happy with because",
    "start": "2859119",
    "end": "2866720"
  },
  {
    "text": "it's a pure c plus 20 it's not limited to qt so you can use it with the some parts of our application",
    "start": "2866720",
    "end": "2873520"
  },
  {
    "text": "that for example is not based on qt but at the same time it can interact",
    "start": "2873520",
    "end": "2878960"
  },
  {
    "text": "quite well with qt as the example shown to you so the main thing that we wanted to",
    "start": "2878960",
    "end": "2884559"
  },
  {
    "text": "achieve which is the having a sequential syntax for this asynchronous execution flow",
    "start": "2884559",
    "end": "2889839"
  },
  {
    "text": "we got it for free thanks to core teams this is a big win the main reason why we started this is that",
    "start": "2889839",
    "end": "2895040"
  },
  {
    "text": "we wanted to be able to re reason about sequential code because it makes it much",
    "start": "2895040",
    "end": "2900960"
  },
  {
    "text": "easier usually if you do that you're gonna incur the cost of the checks because you need",
    "start": "2900960",
    "end": "2908559"
  },
  {
    "text": "to remember the checks but using customer waitables we were able to remove",
    "start": "2908559",
    "end": "2913680"
  },
  {
    "text": "all those custom checks from the responsibility of the programmer the",
    "start": "2913680",
    "end": "2919920"
  },
  {
    "text": "checks are not removed they are still there but the awaitables are going to do them for you and",
    "start": "2919920",
    "end": "2926559"
  },
  {
    "text": "there is no boilerplate no nor for calling the co-await operator nor for calling the",
    "start": "2926559",
    "end": "2932079"
  },
  {
    "text": "stack variable for sharing the stock variables between different threads because they are just allocated in the corrupting state and",
    "start": "2932079",
    "end": "2938400"
  },
  {
    "text": "they are visible uh both in the main thread and the worker thread so this is very nice and very easy to",
    "start": "2938400",
    "end": "2945440"
  },
  {
    "text": "read and even for newcomers if they look at the function for the first time they can step through it and understand",
    "start": "2945440",
    "end": "2951119"
  },
  {
    "text": "how the ping-pong flows and they can extend it easily so you can you can just add the",
    "start": "2951119",
    "end": "2957520"
  },
  {
    "text": "code to the bottom add more cool weights and switch threads or you can even use more complex control",
    "start": "2957520",
    "end": "2963760"
  },
  {
    "text": "constructs so for example imagine this so here you have a switch to thread pull and then you",
    "start": "2963760",
    "end": "2969920"
  },
  {
    "text": "have an if statement and in the two cases you do a ping pong here or another ping pong here",
    "start": "2969920",
    "end": "2976160"
  },
  {
    "text": "but they do different things right so or you can do even this so you can have a while loop and every",
    "start": "2976160",
    "end": "2982240"
  },
  {
    "text": "iteration of the loop is a ping pong okay so this is pretty extensible and we",
    "start": "2982240",
    "end": "2987839"
  },
  {
    "text": "uh we are using it in our graphical user interface and for our other for also for our terminal",
    "start": "2987839",
    "end": "2994240"
  },
  {
    "text": "user interface so it's it's not we cannot say it's really battle tested but the tests are passing",
    "start": "2994240",
    "end": "3000000"
  },
  {
    "text": "and given that uh most of our approach were was based on uh moving uh",
    "start": "3000000",
    "end": "3007920"
  },
  {
    "text": "race and deterministic race condition and and transforming them into uh deterministic crashes this is a",
    "start": "3007920",
    "end": "3014960"
  },
  {
    "text": "pretty good uh result i think it doesn't come for free there are hidden costs for example",
    "start": "3014960",
    "end": "3020720"
  },
  {
    "start": "3019000",
    "end": "3019000"
  },
  {
    "text": "uh coroutine states are allocated on the heap so you have heap traffic and this can be optimized away from the",
    "start": "3020720",
    "end": "3026319"
  },
  {
    "text": "compiler but in the end we were doing asynchronous stuff so you you ended up having",
    "start": "3026319",
    "end": "3031520"
  },
  {
    "text": "uh things are located on the hip anyway uh you have uh the over overhead of",
    "start": "3031520",
    "end": "3037200"
  },
  {
    "text": "swapping uh all the variables for void rate condition and all those swaps are executed every time",
    "start": "3037200",
    "end": "3042800"
  },
  {
    "text": "this has a cost but uh it you can be turned off in production you can comment",
    "start": "3042800",
    "end": "3048240"
  },
  {
    "text": "away all the swaps and enable them only for your uh for your tests to be able to crash your program if something",
    "start": "3048240",
    "end": "3054319"
  },
  {
    "text": "was wrong and then the la the the two last points are sadly that compiler support is still",
    "start": "3054319",
    "end": "3061760"
  },
  {
    "text": "quite poor it's it's growing steadily but it's still quite poor and even if we managed to uh compile and",
    "start": "3061760",
    "end": "3069280"
  },
  {
    "text": "make this thing run the debugging support is still not ideal",
    "start": "3069280",
    "end": "3074319"
  },
  {
    "text": "because uh co routines are not very well supported by the debugger yet so that's basically it thank you for",
    "start": "3074319",
    "end": "3081040"
  },
  {
    "text": "attending our talk i hope you enjoyed and understood everything if you want to get in touch with us uh",
    "start": "3081040",
    "end": "3087839"
  },
  {
    "text": "write drop us an email or write it here now on slack we are we're gonna hear for a while uh later on we are hiring so if you like",
    "start": "3087839",
    "end": "3095599"
  },
  {
    "text": "the cpas plus stuff that we you have seen today get in touch",
    "start": "3095599",
    "end": "3100960"
  },
  {
    "text": "but i don't want to to steal them more time because now there is a few",
    "start": "3100960",
    "end": "3106559"
  },
  {
    "text": "minutes for questions so please write on slack please because if you uh",
    "start": "3106559",
    "end": "3111599"
  },
  {
    "text": "write a talk all together here it's going to be hard but please we are very interested in",
    "start": "3111599",
    "end": "3119519"
  },
  {
    "text": "feedback you",
    "start": "3122839",
    "end": "3127680"
  }
]