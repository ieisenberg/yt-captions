[
  {
    "start": "0",
    "end": "218000"
  },
  {
    "text": "good morning how many of you are lazy this morning all right that's good i'm in the",
    "start": "8400",
    "end": "14000"
  },
  {
    "text": "right group excellent uh well I want to talk about getting lazy uh my name is Venetraman thanks for coming uh we when",
    "start": "14000",
    "end": "22240"
  },
  {
    "text": "we hear about functional programming we often hear people talk about immutability for example and various other things I won't even mention but I",
    "start": "22240",
    "end": "29679"
  },
  {
    "text": "find that a lot of those things are really means to the end what we really are after is efficiency and coding well",
    "start": "29679",
    "end": "37680"
  },
  {
    "text": "of course expressiveness of code is also very important and functional programming gives us that once we get familiar with functional style of",
    "start": "37680",
    "end": "43440"
  },
  {
    "text": "programming but one of the real big benefits I think really is lazy evaluation so that's what I want to",
    "start": "43440",
    "end": "48559"
  },
  {
    "text": "focus on today talk about how we can actually uh what is lazy valuation and how we can actually benefit from that",
    "start": "48559",
    "end": "54719"
  },
  {
    "text": "i'll I'll give examples from a few different languages here i'll give a few examples in Java a few examples in C a",
    "start": "54719",
    "end": "62800"
  },
  {
    "text": "little bit touch on Scala and just a little bit on Haskell as well so those are the four languages I'll touch on to",
    "start": "62800",
    "end": "69280"
  },
  {
    "text": "various degrees depending on what we want to do uh best time to ask questions or make comments is when you have it so",
    "start": "69280",
    "end": "74320"
  },
  {
    "text": "please don't wait till the end or hesitate anytime is a great time questions comments anything you want to talk about draw my attention i'll be",
    "start": "74320",
    "end": "80240"
  },
  {
    "text": "more than happy to listen to you uh as you have noticed already I don't use slides i hate using slides i'm going to",
    "start": "80240",
    "end": "85600"
  },
  {
    "text": "just rant off uh you know answer questions if you have any write some code and and just have some fun so let's",
    "start": "85600",
    "end": "91280"
  },
  {
    "text": "get started so what does it really mean to be lazy what does lazy valuation really mean well lazy valuation simply",
    "start": "91280",
    "end": "98560"
  },
  {
    "text": "differs from the so-called eager valuation so normally when a computation comes across a system can decide to do",
    "start": "98560",
    "end": "105600"
  },
  {
    "text": "it right away which is eager valuation or it can decide to postpone it well benefit of postponing it is we could do",
    "start": "105600",
    "end": "112479"
  },
  {
    "text": "four things with a postponed operation first when you give me a computation I can do it right away which is eager of",
    "start": "112479",
    "end": "118960"
  },
  {
    "text": "course or I can delay it to the point where I don't have to run it at all and of course both in life and computing the",
    "start": "118960",
    "end": "126240"
  },
  {
    "text": "efficiency comes from not doing stuff that we don't have to do so we postpone it until the point where maybe we don't",
    "start": "126240",
    "end": "132319"
  },
  {
    "text": "have to evaluate this and we can just simply not evaluate an operation or we can pass an operation along to yet",
    "start": "132319",
    "end": "138720"
  },
  {
    "text": "another entity which can decide to do whatever it wants to do with it or of course we could then eventually evaluate",
    "start": "138720",
    "end": "144640"
  },
  {
    "text": "it but minimally to get the results we want and not really execute it eagerly to the fullest extent well let's talk",
    "start": "144640",
    "end": "150640"
  },
  {
    "text": "about that a little bit further but I want to talk about something else that we have in computer programming but a",
    "start": "150640",
    "end": "156080"
  },
  {
    "text": "lot of us don't really experience it uh this is one of the aha moments for me over the past about 30 years I've been",
    "start": "156080",
    "end": "162239"
  },
  {
    "text": "programming and that is uh I used to read a lot about stuff back in the 80s",
    "start": "162239",
    "end": "168239"
  },
  {
    "text": "and I would like sit there and say wow this is amazing wish I could try this and it's it's it's the excitement really",
    "start": "168239",
    "end": "175519"
  },
  {
    "text": "to me today is I can actually try this stuff that I once were only able to read because of the you know so to say",
    "start": "175519",
    "end": "182560"
  },
  {
    "text": "democratization of uh programming world we got a lot of things available to us much more easily available without",
    "start": "182560",
    "end": "188959"
  },
  {
    "text": "having to really go to a you know bigger corporation or a university to get access to things we can just have them",
    "start": "188959",
    "end": "194319"
  },
  {
    "text": "available to us on our own laptops and devices well one of the things I want to talk about today is applicative versus",
    "start": "194319",
    "end": "201280"
  },
  {
    "text": "normal order well most of us program in mainstream languages which only support",
    "start": "201280",
    "end": "206599"
  },
  {
    "text": "unfortunately the so-called applicative order normal order is actually quite",
    "start": "206599",
    "end": "212000"
  },
  {
    "text": "abnormal in a lot of ways so let's talk about that with a little example to see what that really means in this context",
    "start": "212000",
    "end": "218640"
  },
  {
    "start": "218000",
    "end": "310000"
  },
  {
    "text": "so let's take a little example to play with it so let's say we have a little function here let's keep it extremely",
    "start": "218640",
    "end": "224799"
  },
  {
    "text": "simple i got a function called compute and the function compute of course is g",
    "start": "224799",
    "end": "229920"
  },
  {
    "text": "going to take a number and let's keep it extremely simple returns us the double of the number but of course within this",
    "start": "229920",
    "end": "236480"
  },
  {
    "text": "I'm going to simply say called so we can actually see that this function actually was called but of course I'm going to go",
    "start": "236480",
    "end": "242879"
  },
  {
    "text": "back here and say int let's say x equals to 4 and then I say if x is greater than",
    "start": "242879",
    "end": "248319"
  },
  {
    "text": "five and compute of let's say five is greater than 10 then I want to go ahead",
    "start": "248319",
    "end": "254480"
  },
  {
    "text": "and say for example in this case we'll simply output here let's call this as result otherwise we'll say uh else uh",
    "start": "254480",
    "end": "262160"
  },
  {
    "text": "really silly but we'll call this as no result so if you notice this uh we have",
    "start": "262160",
    "end": "267600"
  },
  {
    "text": "a little code where if x is greater than five then I call compute and then I of course I print out result or I print out",
    "start": "267600",
    "end": "274720"
  },
  {
    "text": "no result but when I run this code of course everybody in this room knows that when I run this code the compute method",
    "start": "274720",
    "end": "281680"
  },
  {
    "text": "was absolutely not called well why was compute not called at all does anybody",
    "start": "281680",
    "end": "287440"
  },
  {
    "text": "know the reason for it come on don't be shy thank you very much john McCarthy",
    "start": "287440",
    "end": "294400"
  },
  {
    "text": "created this concept of chart circuiting way long time ago in the 1950s and",
    "start": "294400",
    "end": "300320"
  },
  {
    "text": "everyone programming knows about chart circuting in fact that's kind of normal for us to expect short circuting there's",
    "start": "300320",
    "end": "306800"
  },
  {
    "text": "no surprise at all we program knowing short circuiting very clearly on the",
    "start": "306800",
    "end": "312240"
  },
  {
    "start": "310000",
    "end": "375000"
  },
  {
    "text": "other hand if I say temp is greater than 10 and I'm going to say int temp equals",
    "start": "312240",
    "end": "317600"
  },
  {
    "text": "compute well the question for you now is will compute be",
    "start": "317600",
    "end": "323720"
  },
  {
    "text": "called yeah we said yes should compute be called no right so this is when your",
    "start": "323720",
    "end": "331919"
  },
  {
    "text": "feelings differ from what the language thinks it should do when you disagree with the language guess who wins the",
    "start": "331919",
    "end": "339039"
  },
  {
    "text": "language of course right which is the sad part but of course in this case when you run the code it is going to go ahead",
    "start": "339039",
    "end": "345039"
  },
  {
    "text": "and call the compute method there is no doubt about it and of course in this case the compute of course is going to",
    "start": "345039",
    "end": "351280"
  },
  {
    "text": "return the value but sadly the compute was called even though you and I know",
    "start": "351280",
    "end": "356479"
  },
  {
    "text": "very clearly the result of compute is not going to be used an example of eager",
    "start": "356479",
    "end": "361680"
  },
  {
    "text": "evaluation but more so an applicative order but it doesn't have to be this way",
    "start": "361680",
    "end": "367120"
  },
  {
    "text": "it is just this way in a lot of languages we use in the mainstream but let's take this example a little further",
    "start": "367120",
    "end": "373199"
  },
  {
    "text": "just to play with it now let's take an example here in Haskell for a minute i'm going to create a function over here",
    "start": "373199",
    "end": "380000"
  },
  {
    "start": "375000",
    "end": "610000"
  },
  {
    "text": "called add a and b equals a + b and of course I'm going to call a function",
    "start": "380000",
    "end": "385120"
  },
  {
    "text": "called evaluate let's say value equals value and then I say main equals and I'm",
    "start": "385120",
    "end": "391199"
  },
  {
    "text": "going to print evaluate and then I'm going to call add over here on one and two now when I run this code of course",
    "start": "391199",
    "end": "397840"
  },
  {
    "text": "what you can see is it printed three that's not the most interesting part in this code but let's talk about the order",
    "start": "397840",
    "end": "404160"
  },
  {
    "text": "of evaluation here for a minute well in languages like Java and C and a lot of",
    "start": "404160",
    "end": "409759"
  },
  {
    "text": "mainstream languages when will AD be called well AD will be called right away",
    "start": "409759",
    "end": "415280"
  },
  {
    "text": "when you see the ad being evalu you know called over here the evaluation is instantaneous it's eager it's also known",
    "start": "415280",
    "end": "422000"
  },
  {
    "text": "as applicative order so the word applicative order is just the order in which it is applied well add is applied",
    "start": "422000",
    "end": "428880"
  },
  {
    "text": "then evaluate is applied apply is a very fancy word for invoke or called so when ad is called it gets called or evaluated",
    "start": "428880",
    "end": "436160"
  },
  {
    "text": "well but has color is very different in that regard in the terms of how it's going to do this stuff so most languages",
    "start": "436160",
    "end": "443039"
  },
  {
    "text": "we use in mainstream use applicative order but some languages actually use",
    "start": "443039",
    "end": "448080"
  },
  {
    "text": "normal order which is quite abnormal like I mentioned so let's go to this example i want to show to you that AD is",
    "start": "448080",
    "end": "454400"
  },
  {
    "text": "not being called right away ad is actually pretty evaluated pretty lazily so when you go to Haskell and say hey",
    "start": "454400",
    "end": "461120"
  },
  {
    "text": "call h add addll says uh why because I want to pass it to evaluate so you need",
    "start": "461120",
    "end": "468240"
  },
  {
    "text": "to call evaluate too and it says but why well I want to pass it to print okay that's a good reason because print is",
    "start": "468240",
    "end": "474800"
  },
  {
    "text": "going to show the result humans will see it I better do this work so it's going to postpone until the point where it",
    "start": "474800",
    "end": "480479"
  },
  {
    "text": "cannot postpone anymore but how do I prove it well unfortunately I cannot put a print statement in language like hasll",
    "start": "480479",
    "end": "487199"
  },
  {
    "text": "to prove it because print statements are impure operations haskell wouldn't allow me to put it in arbitrary places so I",
    "start": "487199",
    "end": "493360"
  },
  {
    "text": "was scratching my head you know how do I prove that this is how this works and I never thought I would actually use this",
    "start": "493360",
    "end": "499120"
  },
  {
    "text": "debugger to make a point but that's exactly what I'm going to do here is to you know kind of step through the code",
    "start": "499120",
    "end": "504319"
  },
  {
    "text": "so I'm going to go here and call GHCI which is the uh ripple or interpretive",
    "start": "504319",
    "end": "510720"
  },
  {
    "text": "evaluator for Haskell and I'm going to go ahead and load in this case the sample.hs file well now that I've loaded",
    "start": "510720",
    "end": "517919"
  },
  {
    "text": "it I'm going to put a break point but I'm going to put a break point right here on line number one character number",
    "start": "517919",
    "end": "524399"
  },
  {
    "text": "16 as it turns out to be so I'm going to go back here and say break at 1 and 16",
    "start": "524399",
    "end": "529600"
  },
  {
    "text": "so I've entered a break point now I'm going to go ahead and call the main function well you can see that the main",
    "start": "529600",
    "end": "535440"
  },
  {
    "text": "has stopped right here on line number one and it tells you that it's waiting for you to continue and I'm going to of",
    "start": "535440",
    "end": "542240"
  },
  {
    "text": "course say continue right now and you can see the result of three well that proved the point that ad was actually",
    "start": "542240",
    "end": "548320"
  },
  {
    "text": "called which is kind of pointless because of course we know the ad was called but what's really exciting is I'm",
    "start": "548320",
    "end": "554320"
  },
  {
    "text": "going to go back to this code and change it to 42 now take a look at what this code is doing when I run the code of",
    "start": "554320",
    "end": "560880"
  },
  {
    "text": "course the result was 42 but the beauty is you go to Haskell and say \"Hasll call",
    "start": "560880",
    "end": "566640"
  },
  {
    "text": "the add function.\" And Haskell says \"But why?\" Because I want to pass it to evaluate why are you calling evaluate",
    "start": "566640",
    "end": "573519"
  },
  {
    "text": "because I want to send it to print well gosh then let's go ahead and call evaluate first you come into evaluate",
    "start": "573519",
    "end": "578880"
  },
  {
    "text": "you return the 42 you never actually used value and Haskell says why bother",
    "start": "578880",
    "end": "584880"
  },
  {
    "text": "then i'm not going to really spend my effort running the uh add method or add function because there is no value in",
    "start": "584880",
    "end": "591680"
  },
  {
    "text": "running it well is that really true well to prove the point again I'm going to go back to the ripple i'm going to load up",
    "start": "591680",
    "end": "597839"
  },
  {
    "text": "the function one more time the file so it's loaded up i put a break point again",
    "start": "597839",
    "end": "603440"
  },
  {
    "text": "exactly in the same line of code as we did a minute ago i'm going to go ahead and call the main function this time but",
    "start": "603440",
    "end": "610000"
  },
  {
    "text": "notice it never hit the break point it actually went right through and printed 42 a proof that AD was never actually",
    "start": "610000",
    "end": "617720"
  },
  {
    "text": "evaluated well that's normal order right there as we saw so essentially Haskell",
    "start": "617720",
    "end": "623279"
  },
  {
    "text": "says I don't have to be evaluating stuff unless otherwise I really need an evaluation this is a very normal",
    "start": "623279",
    "end": "630320"
  },
  {
    "text": "sequence in language like Haskell but the first question of course obviously is why can't uh other languages like",
    "start": "630320",
    "end": "637600"
  },
  {
    "text": "Java and C do this why does Haskell do this differently and the reason is",
    "start": "637600",
    "end": "642880"
  },
  {
    "start": "642000",
    "end": "812000"
  },
  {
    "text": "actually extremely simple and the reason is in Haskell almost everything we",
    "start": "642880",
    "end": "649440"
  },
  {
    "text": "create is pure so when we talk about immutability and purity in functional",
    "start": "649440",
    "end": "655440"
  },
  {
    "text": "languages it's important for us to understand why purity is so important because if we don't understand that to",
    "start": "655440",
    "end": "662640"
  },
  {
    "text": "me purity or immutability is like vegetables you don't go to children and say you have to eat vegetables nobody",
    "start": "662640",
    "end": "669279"
  },
  {
    "text": "likes that so we got to give a good reason why this is important there's got to be a motivation to do it and the real",
    "start": "669279",
    "end": "675200"
  },
  {
    "text": "motivation is if a language does not guarantee purity of a function well it's",
    "start": "675200",
    "end": "681600"
  },
  {
    "text": "got to then eagerly evaluate it languages like this is really funny when you really look at languages think about",
    "start": "681600",
    "end": "688360"
  },
  {
    "text": "defaults languages like C and and and Java fall on unsafe defaults languages",
    "start": "688360",
    "end": "696079"
  },
  {
    "text": "like Haskell fall on safe defaults by definition the default in languages like",
    "start": "696079",
    "end": "701920"
  },
  {
    "text": "Java and CP is mutability whereas by definition the defaults in languages",
    "start": "701920",
    "end": "707920"
  },
  {
    "text": "like Haskell is immutability so when you define a function in HASLL it is pure by",
    "start": "707920",
    "end": "715360"
  },
  {
    "text": "definition and if you want it to be impure you have to plead with the language you got to say please please",
    "start": "715360",
    "end": "721920"
  },
  {
    "text": "just this one function give me permission to make it impure whereas in languages like Java and C you got to",
    "start": "721920",
    "end": "728320"
  },
  {
    "text": "plead with the language to for purity because by default those languages promote immutability well because things",
    "start": "728320",
    "end": "735680"
  },
  {
    "text": "are immutable if something is not being called when function can have side effects if the function is not called",
    "start": "735680",
    "end": "742160"
  },
  {
    "text": "you're going to get really be surprised in languages in fact you may ask the question wait a minute if that is really",
    "start": "742160",
    "end": "748839"
  },
  {
    "text": "true why doesn't C and Java call the function when it's shortcircuited but",
    "start": "748839",
    "end": "755920"
  },
  {
    "text": "why do they call it when I assign to a temporary variable and the short answer to that question is language specs and",
    "start": "755920",
    "end": "762240"
  },
  {
    "text": "language specs rule so in fact if you read the language spec for example C++",
    "start": "762240",
    "end": "767839"
  },
  {
    "text": "the language spec actually clearly says even if your constructor were to perform",
    "start": "767839",
    "end": "774320"
  },
  {
    "text": "a side effect the language compiler may opt not to call your constructor so same",
    "start": "774320",
    "end": "780639"
  },
  {
    "text": "way language specifications clearly say uh even if a function were to have a",
    "start": "780639",
    "end": "786320"
  },
  {
    "text": "side effect a short circuiting will reject the function call and may not",
    "start": "786320",
    "end": "791600"
  },
  {
    "text": "perform it but language specifications do not apply that rule in various other",
    "start": "791600",
    "end": "796639"
  },
  {
    "text": "cases and that's the reason why the languages don't optimize so easily but let's take that a little further and see",
    "start": "796639",
    "end": "803600"
  },
  {
    "text": "how this could actually benefit be benefited with a few exceptions if you will so to understand that let's take",
    "start": "803600",
    "end": "810000"
  },
  {
    "text": "this example we just saw here of the compute method but I'm going to write this example again here but in the case",
    "start": "810000",
    "end": "816320"
  },
  {
    "start": "812000",
    "end": "972000"
  },
  {
    "text": "in Scola for a minute so I'm going to say over here define compute and in this",
    "start": "816320",
    "end": "822079"
  },
  {
    "text": "case of course I'm going to say number given a number which is let's call this as integer if you will and then I'm",
    "start": "822079",
    "end": "828720"
  },
  {
    "text": "going to simply say go ahead and say a print out let's say called and then of course return number times two just like",
    "start": "828720",
    "end": "836160"
  },
  {
    "text": "I what I did in Java but in this case of course I'm going to say x= 4 if x is",
    "start": "836160",
    "end": "841839"
  },
  {
    "text": "greater than let's say five and compute of let's say five is greater than 10 I",
    "start": "841839",
    "end": "847440"
  },
  {
    "text": "want to print out let's say in this case result and then of course print out else",
    "start": "847440",
    "end": "853120"
  },
  {
    "text": "will simply say no result just example what I did in Java I'm just repeating",
    "start": "853120",
    "end": "858480"
  },
  {
    "text": "that here in Scala well as you can see in this little example you saw the no",
    "start": "858480",
    "end": "864000"
  },
  {
    "text": "result clearly compute was not actually called but what if I take this compute",
    "start": "864000",
    "end": "869040"
  },
  {
    "text": "right here and assign it to a variable called temp over here and then assign it",
    "start": "869040",
    "end": "874240"
  },
  {
    "text": "to compute and then of course run the code Well when I run this code of course what you see is unfortunately Scala call",
    "start": "874240",
    "end": "881839"
  },
  {
    "text": "the compute as well why because language like Scala and F are what I call as",
    "start": "881839",
    "end": "887920"
  },
  {
    "text": "hybrid languages they promote immutability but they don't guarantee immutability at the language level so as",
    "start": "887920",
    "end": "895279"
  },
  {
    "text": "a result they still have to evaluate things well how do we really get around that well Scala says you know you could",
    "start": "895279",
    "end": "903040"
  },
  {
    "text": "have a side effect in compute i don't have a way to guarantee that and if I don't call it you're going to be surprised about it well you can have a",
    "start": "903040",
    "end": "910240"
  },
  {
    "text": "little discussion with the language and say \"Hey language compiler I know what I'm doing here so give me a little break",
    "start": "910240",
    "end": "916720"
  },
  {
    "text": "here.\" Well that break comes from the word lazy if you will so notice right",
    "start": "916720",
    "end": "921839"
  },
  {
    "text": "now when I run the code Scala did not evaluate the compute method because I",
    "start": "921839",
    "end": "927360"
  },
  {
    "text": "annotated the variable with the word lazy this is very similar to what you can do in F as well you can give a",
    "start": "927360",
    "end": "934560"
  },
  {
    "text": "little annotation to the language to say this one you can be lazy about it and even if it were to have a side effect",
    "start": "934560",
    "end": "940800"
  },
  {
    "text": "I'm not going to be offended if you don't call it so the language says all right all right all right all right all right all right all right all right all right all right all right all right I'll ease upon the eager e eagerness over",
    "start": "940800",
    "end": "946399"
  },
  {
    "text": "here and I'll postpone the evaluation until I cannot avoid the call to it but",
    "start": "946399",
    "end": "951519"
  },
  {
    "text": "of course in this case as you can see if x were greater than two and I run the code you can see that it actually called",
    "start": "951519",
    "end": "958320"
  },
  {
    "text": "it because in this case the value of temp is needed but if the value is let's say greater than five in this case you",
    "start": "958320",
    "end": "965120"
  },
  {
    "text": "can see it bypassed the call well that brings up the question gosh how do I do this in languages like java and car",
    "start": "965120",
    "end": "971759"
  },
  {
    "text": "sharp Short answer in Java good luck there's no way to do this well C makes",
    "start": "971759",
    "end": "977440"
  },
  {
    "text": "it a little bit easier if you want to do something like that i'm going to just grab this function here from Java if you",
    "start": "977440",
    "end": "983199"
  },
  {
    "text": "don't mind and bring it over here to C so right here is the compute method and",
    "start": "983199",
    "end": "988639"
  },
  {
    "text": "you know how to go from Java to C# right just convert methods to uppercase you got almost the code you want well so",
    "start": "988639",
    "end": "993839"
  },
  {
    "text": "here I have a code here in C the compute method takes a number and returns a double of that and of course in this",
    "start": "993839",
    "end": "1000560"
  },
  {
    "text": "case I want to print that out so we'll simply say here's the console right line i'm going to simply say call right here",
    "start": "1000560",
    "end": "1007199"
  },
  {
    "text": "but I come back here and say int temp is equal to four actually x equal to four",
    "start": "1007199",
    "end": "1013040"
  },
  {
    "text": "and I'm going to say if x is greater than five and compute and I'm going to say this compute method takes a value",
    "start": "1013040",
    "end": "1019440"
  },
  {
    "text": "let's say five is greater than 10 let's say and again I want to say result and",
    "start": "1019440",
    "end": "1025438"
  },
  {
    "text": "of course else I want to simply say in this case no result well what does uh C",
    "start": "1025439",
    "end": "1031360"
  },
  {
    "text": "do well clearly in this case you can see it said no result didn't eagerly call the method shortcuting at work but what",
    "start": "1031360",
    "end": "1038400"
  },
  {
    "text": "if I were to take this one again but this time I'm going to say temp over here and I say temp is equal to compute",
    "start": "1038400",
    "end": "1045438"
  },
  {
    "text": "five and you can see that C is being eager just like Scala and Java were but",
    "start": "1045439",
    "end": "1051679"
  },
  {
    "text": "in the case of C what you could do is again annotate it by saying lazy int for",
    "start": "1051679",
    "end": "1057280"
  },
  {
    "text": "example and you can of course define it as lazy but that brings up the question",
    "start": "1057280",
    "end": "1062880"
  },
  {
    "text": "how do I really make things lazy in languages like Java and C well this is",
    "start": "1062880",
    "end": "1068240"
  },
  {
    "start": "1068000",
    "end": "1203000"
  },
  {
    "text": "where a little bit of a charm comes in i'm not completed with the C# code yet but I need one more minute before I can",
    "start": "1068240",
    "end": "1074000"
  },
  {
    "text": "do that so I'll come back to that so some languages are born lazy they were",
    "start": "1074000",
    "end": "1079600"
  },
  {
    "text": "born at the beach they were sitting there and doing absolutely nothing useful when they were born right so some",
    "start": "1079600",
    "end": "1085039"
  },
  {
    "text": "languages are born lazy from the get-go but some languages have to work really",
    "start": "1085039",
    "end": "1090160"
  },
  {
    "text": "hard to be lazy some languages are like me i'm always hyperactive trying to do",
    "start": "1090160",
    "end": "1095440"
  },
  {
    "text": "stuff and my wife would tell me some days why don't you just sit down and relax i'm like how do you do that well",
    "start": "1095440",
    "end": "1101360"
  },
  {
    "text": "that's the way some languages are they're just eager and you got to work a little extra hard if you want to make",
    "start": "1101360",
    "end": "1106480"
  },
  {
    "text": "them laz lazy so we talked about the eager versus lazy but how do you really bring lazy evaluation to some of these",
    "start": "1106480",
    "end": "1113120"
  },
  {
    "text": "languages how do you postpone these evaluations well this is where the charm",
    "start": "1113120",
    "end": "1118240"
  },
  {
    "text": "of lambda expressions come in so what do lambda expressions do well lambda",
    "start": "1118240",
    "end": "1123600"
  },
  {
    "text": "expressions really are anonymous functions so you can create a function",
    "start": "1123600",
    "end": "1129039"
  },
  {
    "text": "but one of the really nice things about creating functions as lambdas is you can pass functions around so a function can",
    "start": "1129039",
    "end": "1136960"
  },
  {
    "text": "now receive other functions you can create functions within functions as lambdas and you can also return",
    "start": "1136960",
    "end": "1143280"
  },
  {
    "text": "functions or lambdas from other functions too we of course call them as higher order functions so what does this",
    "start": "1143280",
    "end": "1149200"
  },
  {
    "text": "give us a benefit with the benefit you get out of this is now you can pass functions around but what is the benefit",
    "start": "1149200",
    "end": "1155360"
  },
  {
    "text": "of passing functions around imagine I have a function i want to say here's a function i'm going to give it to you",
    "start": "1155360",
    "end": "1161280"
  },
  {
    "text": "well what would you do when you receive something on your hand there are three things you could do you could use it",
    "start": "1161280",
    "end": "1166559"
  },
  {
    "text": "right away if I were to give you a apple for example you would you could eat the apple right away or you can postpone be",
    "start": "1166559",
    "end": "1173600"
  },
  {
    "text": "lazy about it and you can eat the apple later on you could throw it in a trash can and say \"I don't want to eat this h",
    "start": "1173600",
    "end": "1180320"
  },
  {
    "text": "apple.\" Or you could give it to somebody else and say \"Here you go i got this apple but I want to give it to you.\" And",
    "start": "1180320",
    "end": "1186240"
  },
  {
    "text": "that person in turn can do one of those four things give it to somebody else eat it discard it or you know eat it later",
    "start": "1186240",
    "end": "1192640"
  },
  {
    "text": "so the point really is when we pass functions around we can either be lazy or eager or evaluate it right now or",
    "start": "1192640",
    "end": "1199440"
  },
  {
    "text": "discard it and so this gives an opportunity for us and that's exactly what languages like C do so notice what",
    "start": "1199440",
    "end": "1206640"
  },
  {
    "start": "1203000",
    "end": "1339000"
  },
  {
    "text": "I'm going to do here i'm going to say a new and I'm going to create a lazy over",
    "start": "1206640",
    "end": "1212080"
  },
  {
    "text": "here so this becomes a lazy of int but I'm going to wrap this into a little",
    "start": "1212080",
    "end": "1219120"
  },
  {
    "text": "lambda expression if you will and of course in this case you can see that I've just done a little bit of",
    "start": "1219120",
    "end": "1225520"
  },
  {
    "text": "postponing in here and of course in this case I said temp value is greater than 10 and I'm going to evaluate it but",
    "start": "1225520",
    "end": "1232720"
  },
  {
    "text": "notice the laziness in this case c did not evaluate the compute function why",
    "start": "1232720",
    "end": "1238320"
  },
  {
    "text": "because the compute is wrapped into a lambda and the lambda doesn't have to be evaluated right away the lazy object",
    "start": "1238320",
    "end": "1244960"
  },
  {
    "text": "says thanks for giving this to me but I will wait until I see what happens now",
    "start": "1244960",
    "end": "1250080"
  },
  {
    "text": "of course in this case if I say uh x is greater than two and run the code you",
    "start": "1250080",
    "end": "1255840"
  },
  {
    "text": "can see that it did call it because the value was after all needed but when did this evaluation actually happen well to",
    "start": "1255840",
    "end": "1263360"
  },
  {
    "text": "prove that if I say here over here you can see that here was actually called",
    "start": "1263360",
    "end": "1268400"
  },
  {
    "text": "and then much later was the call to function evaluated that is laziness of the evaluation as you can see so in",
    "start": "1268400",
    "end": "1274640"
  },
  {
    "text": "other words we can use laziness to really make advantage of this if you're",
    "start": "1274640",
    "end": "1280400"
  },
  {
    "text": "programming in Java unfortunately lazy is not available but nothing stops from",
    "start": "1280400",
    "end": "1285760"
  },
  {
    "text": "creating one yourself if you want to and you would use a supplier to do this in language like Java the code I've",
    "start": "1285760",
    "end": "1291919"
  },
  {
    "text": "highlighted here in C is equal to what's called a supplier in Java and you can get to get get to use that pretty much",
    "start": "1291919",
    "end": "1298640"
  },
  {
    "text": "to implement the same idea if you're interested in doing so we can see how laziness comes into picture right there",
    "start": "1298640",
    "end": "1305679"
  },
  {
    "text": "but I want to take this further and say what can we benefit from when it comes to lazy evaluation and to understand",
    "start": "1305679",
    "end": "1313600"
  },
  {
    "text": "that I want to take yet another example and play with it i'm going to use this example in in Java but you could use",
    "start": "1313600",
    "end": "1320480"
  },
  {
    "text": "that in any other language but a quick show of hands i could use either one uh how many of you program in Java here a",
    "start": "1320480",
    "end": "1326640"
  },
  {
    "text": "few hands how many of you in C i'm sorry you know who wins here okay okay so we'll just use the C# example in that",
    "start": "1326640",
    "end": "1332880"
  },
  {
    "text": "case so I'm going to use I'll come back and show you another example of Java a little later on but for now we'll use a",
    "start": "1332880",
    "end": "1337919"
  },
  {
    "text": "C# example so to prove a point here I want to take this little example and I",
    "start": "1337919",
    "end": "1343200"
  },
  {
    "start": "1339000",
    "end": "1810000"
  },
  {
    "text": "want to say in this case well what do I want to do let's say we start with a list of numbers to begin with so I'm",
    "start": "1343200",
    "end": "1349520"
  },
  {
    "text": "going to say int over here we'll call it numbers equals and in this case I'll say",
    "start": "1349520",
    "end": "1354559"
  },
  {
    "text": "new list of int again well in this case let's define a few numbers let's say one",
    "start": "1354559",
    "end": "1361039"
  },
  {
    "text": "two uh three but notice I put a five and then a four change the order here",
    "start": "1361039",
    "end": "1367159"
  },
  {
    "text": "intentionally and then I'm going to say six seven eight uh and this potentially could go on to a million values let's",
    "start": "1367159",
    "end": "1374559"
  },
  {
    "text": "say it doesn't really matter but I want to say find the double of the first",
    "start": "1374559",
    "end": "1380039"
  },
  {
    "text": "number greater than three and is even well I want to perform this operation so",
    "start": "1380039",
    "end": "1386799"
  },
  {
    "text": "how would I do this in a language which is imperative in nature let's try start",
    "start": "1386799",
    "end": "1392159"
  },
  {
    "text": "with a little example i'm going to say result is equal to zero to begin with i want to print the result you can pretty",
    "start": "1392159",
    "end": "1398400"
  },
  {
    "text": "much do this example in Java much like what I show you here not very different at all so you can try it out in either",
    "start": "1398400",
    "end": "1404400"
  },
  {
    "text": "of those languages so in this case of course I'm going to say for well for each of course I'm going to say var and",
    "start": "1404400",
    "end": "1411679"
  },
  {
    "text": "I'm going to say element and coming from in numbers and of course I want to loop",
    "start": "1411679",
    "end": "1416960"
  },
  {
    "text": "through these numbers and get the result out of it but how do I get the result i'm going to say e is greater than 3 and",
    "start": "1416960",
    "end": "1422960"
  },
  {
    "text": "e mar 2 is equal to zero well then what do I do i'm going to say result is equal",
    "start": "1422960",
    "end": "1429280"
  },
  {
    "text": "to element x 2 and do a break operation out of it well we all know what this",
    "start": "1429280",
    "end": "1434799"
  },
  {
    "text": "style of programming is it's an imperative style of programming but imperative style of programming involves",
    "start": "1434799",
    "end": "1440400"
  },
  {
    "text": "mutability often it also is very verbose it's something we have done for a long time but it's tedious and it's a lot of",
    "start": "1440400",
    "end": "1448240"
  },
  {
    "text": "work for us to do i'm going to also say that imperative style of programming often has accidental complexity baked",
    "start": "1448240",
    "end": "1454960"
  },
  {
    "text": "into it it's often errorprone as well i could do this a lot better in functional",
    "start": "1454960",
    "end": "1460240"
  },
  {
    "text": "style programming let's see how we can do that here in C so what I'm going to do in this example is repeat this but",
    "start": "1460240",
    "end": "1467600"
  },
  {
    "text": "this time I'm going to say well number and I'm going to say where given an",
    "start": "1467600",
    "end": "1473919"
  },
  {
    "text": "element I want to say E is greater than uh three i mean of course I could have",
    "start": "1473919",
    "end": "1479600"
  },
  {
    "text": "really said E is greater than three i could have done that here but I'm going to instead call E is greater than three",
    "start": "1479600",
    "end": "1485440"
  },
  {
    "text": "as a function then I'm going to say where and I'm going to say is even a",
    "start": "1485440",
    "end": "1491039"
  },
  {
    "text": "second function I want to call then I'm going to say uh select and I'll call it as double it and then finally in this",
    "start": "1491039",
    "end": "1498720"
  },
  {
    "text": "case I will simply say oh what do I want to do the first number of course I'll call first right here and ask for the",
    "start": "1498720",
    "end": "1506080"
  },
  {
    "text": "result out of it well of course I need these little functions to make this work so let's get that going so public static",
    "start": "1506080",
    "end": "1513480"
  },
  {
    "text": "boolean is greater than three well that should be fairly easy to do what does",
    "start": "1513480",
    "end": "1519120"
  },
  {
    "text": "that do well takes the number of course and all I'm going to do here is simply say return number is greater than three",
    "start": "1519120",
    "end": "1526720"
  },
  {
    "text": "well let's go ahead and quickly write those other two functions I would need this of course is is even and all that",
    "start": "1526720",
    "end": "1533120"
  },
  {
    "text": "it is doing is mod 2 is equal to zero and finally this is going to become a",
    "start": "1533120",
    "end": "1538640"
  },
  {
    "text": "double it and all that the double it function does is simply return back let's say number times two and returns a",
    "start": "1538640",
    "end": "1545840"
  },
  {
    "text": "double of that particular number well when we run this little code you can see the result of that is also eight so",
    "start": "1545840",
    "end": "1552720"
  },
  {
    "text": "that's a functional style code now clearly some of the benefits you see up here if you take this code and ask",
    "start": "1552720",
    "end": "1559679"
  },
  {
    "text": "somebody what this code is doing what are they going to do they're going to have to look up and down in fact this is",
    "start": "1559679",
    "end": "1566000"
  },
  {
    "text": "the beauty put a f you know imperative style code in front of somebody but then sit in front of them and watch their",
    "start": "1566000",
    "end": "1571919"
  },
  {
    "text": "eyeball movement it does this right and it goes up and down up and down and then it does this that point is called the",
    "start": "1571919",
    "end": "1578400"
  },
  {
    "text": "point of confusion because they're like uh what does this code really do right now well the beauty of the code in the",
    "start": "1578400",
    "end": "1583679"
  },
  {
    "text": "bottom is it's a single pass through the code given all the numbers that have",
    "start": "1583679",
    "end": "1588880"
  },
  {
    "text": "been given to me get me only the numbers greater than three now get me only the",
    "start": "1588880",
    "end": "1594080"
  },
  {
    "text": "even numbers double them get the first one what a relief isn't it it's a single",
    "start": "1594080",
    "end": "1600000"
  },
  {
    "text": "pass through you go from the top to the bottom the code begins to read like a",
    "start": "1600000",
    "end": "1605279"
  },
  {
    "text": "problem statement i was working with a company in in the in the north part of the US and I don't know anything about",
    "start": "1605279",
    "end": "1611279"
  },
  {
    "text": "what they do i was there to just do a training course I was offering but one of the developers said \"Would you please",
    "start": "1611279",
    "end": "1617039"
  },
  {
    "text": "take a look at my code and comment about it?\" Usually I get scared when people do that because when I can understand most",
    "start": "1617039",
    "end": "1623120"
  },
  {
    "text": "of their code if it's not written very well but I look at the code and immediately was a relief because wa I",
    "start": "1623120",
    "end": "1629440"
  },
  {
    "text": "could actually understand this code because the code was pretty much doing what you see up here it's got ships",
    "start": "1629440",
    "end": "1635919"
  },
  {
    "text": "coming in it says well all the ships we are dealing with we want only ships that are arriving and one from the",
    "start": "1635919",
    "end": "1643120"
  },
  {
    "text": "international destination and one with this kind of cargo and I'm like going through this top down and I'm reading",
    "start": "1643120",
    "end": "1649679"
  },
  {
    "text": "through the code and I'm understanding it i'm like \"Wow even I could understand your code what's up with this?\" Right",
    "start": "1649679",
    "end": "1654880"
  },
  {
    "text": "and that's one of the benefits is that the code is actually easy to read easy to express but that begs the question oh",
    "start": "1654880",
    "end": "1661039"
  },
  {
    "text": "my gosh what about performance well be careful about this though if you're",
    "start": "1661039",
    "end": "1666080"
  },
  {
    "text": "programming in languages like Ruby or you know other languages this might not",
    "start": "1666080",
    "end": "1671120"
  },
  {
    "text": "give you a good performance if you're not very careful about it but languages like C and Java have done a really",
    "start": "1671120",
    "end": "1677120"
  },
  {
    "text": "wonderful job this is why I really apprec appreciate these languages they didn't just bring in the concept and say",
    "start": "1677120",
    "end": "1683279"
  },
  {
    "text": "good luck with it they actually took the time to do a really good job with it let's see what that is in a second let's",
    "start": "1683279",
    "end": "1689279"
  },
  {
    "text": "go back to this code here but I want to remind you about the sequence we are working with 1 2 3 54 so what is the",
    "start": "1689279",
    "end": "1696720"
  },
  {
    "text": "number of effort units of work we do in the imperative code well let's take a",
    "start": "1696720",
    "end": "1702240"
  },
  {
    "text": "look i've got this collection on my hand e is one to begin with well one is",
    "start": "1702240",
    "end": "1708000"
  },
  {
    "text": "greater than three no two is greater than three no three is greater than three no five is greater than three yes",
    "start": "1708000",
    "end": "1714240"
  },
  {
    "text": "of course is five even well no is four greater than three yes is four even yes",
    "start": "1714240",
    "end": "1720559"
  },
  {
    "text": "double four wow that was eight computations we performed so the total",
    "start": "1720559",
    "end": "1725919"
  },
  {
    "text": "cost of this was eight units of work that's what we did so eight units of",
    "start": "1725919",
    "end": "1732080"
  },
  {
    "text": "work in imperative code not all units the same but that's good enough for our purposes here so in the imperative style",
    "start": "1732080",
    "end": "1739840"
  },
  {
    "text": "we did eight units of work let's look at this code naively for a minute given a",
    "start": "1739840",
    "end": "1745840"
  },
  {
    "text": "collection of 10 numbers I had to ask if every given number is greater than three",
    "start": "1745840",
    "end": "1752320"
  },
  {
    "text": "that's what 10 operations dead on arrival because 10 already is greater",
    "start": "1752320",
    "end": "1758640"
  },
  {
    "text": "than eight but to add add insult to injury then we take seven values and see",
    "start": "1758640",
    "end": "1764159"
  },
  {
    "text": "if they are even 10 + 7 17 computations then we double three of the values 17 +",
    "start": "1764159",
    "end": "1772159"
  },
  {
    "text": "3 four values off by one error well that's 21 computations wow 21 units of",
    "start": "1772159",
    "end": "1778960"
  },
  {
    "text": "work so this looks like 21 units of work compared to let's say eight units of",
    "start": "1778960",
    "end": "1786640"
  },
  {
    "text": "work but if you really wanted to make this worse just add a few more values to",
    "start": "1786640",
    "end": "1792080"
  },
  {
    "text": "the end over here while the imperative style code is sitting there and saying \"Uh-huh no worries your functional code",
    "start": "1792080",
    "end": "1798640"
  },
  {
    "text": "is going to do a lot more work.\" That doesn't look really that appealing isn't it well here comes the good news i",
    "start": "1798640",
    "end": "1805840"
  },
  {
    "text": "forgot to mention one little thing about these kinds of functions and I've only",
    "start": "1805840",
    "end": "1811279"
  },
  {
    "start": "1810000",
    "end": "2181000"
  },
  {
    "text": "seen these capability among my own children and functional style code they",
    "start": "1811279",
    "end": "1817120"
  },
  {
    "text": "both are lazy to the bone in fact I'll give you a little scenario I've seen at",
    "start": "1817120",
    "end": "1822399"
  },
  {
    "text": "my home a lot because that really resonates well with this my wonderful wife often have to talk to my children",
    "start": "1822399",
    "end": "1829039"
  },
  {
    "text": "when I'm away and I got teenagers well if you have teenagers you know what I'm talking about or if you have been a",
    "start": "1829039",
    "end": "1835200"
  },
  {
    "text": "teenager once you wouldn't know what I'm talking about well teenagers are fundamentally lazy as you know so my",
    "start": "1835200",
    "end": "1841279"
  },
  {
    "text": "wonderful wife will tell my teenage son \"Hey turn off the TV it's like no words",
    "start": "1841279",
    "end": "1847520"
  },
  {
    "text": "were spoken because nothing happens in the house and she kind of looks at him it's like \"Well I told him to turn on",
    "start": "1847520",
    "end": "1853600"
  },
  {
    "text": "the TV nothing happened.\" Then she says \"Go put the trash out.\" And no muzzle",
    "start": "1853600",
    "end": "1859120"
  },
  {
    "text": "was actually moved then she says \"Do your homework.\" Nothing really happened",
    "start": "1859120",
    "end": "1864159"
  },
  {
    "text": "then she says \"I'm calling daddy.\" And everything works well they could have renamed the first as call daddy that",
    "start": "1864159",
    "end": "1871279"
  },
  {
    "text": "would have worked really well in my opinion or call mommy in some families depending on the house but the point",
    "start": "1871279",
    "end": "1876559"
  },
  {
    "text": "really is these are what are called terminal operations in other words when",
    "start": "1876559",
    "end": "1882000"
  },
  {
    "text": "you go to the list and say where it says n okay thank you for asking me to do",
    "start": "1882000",
    "end": "1887600"
  },
  {
    "text": "that but maybe I'll do it maybe I won't do it where again eh select maybe first",
    "start": "1887600",
    "end": "1894559"
  },
  {
    "text": "oh dear let me get to work because a result is needed after all well let's see actually see if that's true so to",
    "start": "1894559",
    "end": "1901600"
  },
  {
    "text": "prove that I'm going to go back to this code right here and I'm going to go ahead and say output and I'm going to",
    "start": "1901600",
    "end": "1907679"
  },
  {
    "text": "say is greater than uh gt uh called width and then let's go ahead and say",
    "start": "1907679",
    "end": "1914080"
  },
  {
    "text": "zero here and then let's put number similarly I'm going to go ahead and output let's put is even right here and",
    "start": "1914080",
    "end": "1922640"
  },
  {
    "text": "then of course finally we'll call this as double it now before I run this code let's go back and see how this is going",
    "start": "1922640",
    "end": "1929039"
  },
  {
    "text": "to be evaluated well this function does not let me tell you what it doesn't do",
    "start": "1929039",
    "end": "1934799"
  },
  {
    "text": "it does not evaluate that particular function is greater than three for all",
    "start": "1934799",
    "end": "1941519"
  },
  {
    "text": "the elements in the list instead what it actually does is it takes these three",
    "start": "1941519",
    "end": "1947760"
  },
  {
    "text": "and does what's called fusing it just mushes them together into one function",
    "start": "1947760",
    "end": "1953200"
  },
  {
    "text": "if you will because it's all lazy functions and puts that together and says \"Here we go.\" And it runs that",
    "start": "1953200",
    "end": "1959360"
  },
  {
    "text": "fused function per element but only to the extent how much it's needed so in other words it takes one and says hey",
    "start": "1959360",
    "end": "1966960"
  },
  {
    "text": "one are you greater than three and one says oops not and it bails out gets out",
    "start": "1966960",
    "end": "1972559"
  },
  {
    "text": "of there so does two and three well then comes along five and five says of course I'm greater than three but five escapes",
    "start": "1972559",
    "end": "1979760"
  },
  {
    "text": "at this particular point four comes along four is greater than three four is even we double the four and first says",
    "start": "1979760",
    "end": "1986880"
  },
  {
    "text": "\"Oh thanks.\" And the entire mechanism says \"Oh we're done then no need to",
    "start": "1986880",
    "end": "1992960"
  },
  {
    "text": "touch six and values after that.\" And so when I run this code you can see the output exactly eight units of work one",
    "start": "1992960",
    "end": "2000399"
  },
  {
    "text": "more time we evaluated 1 2 3 5 and four but we never ever touched six after all",
    "start": "2000399",
    "end": "2008240"
  },
  {
    "text": "because that is lazy evaluation at work so lazy evaluation gives efficiency in",
    "start": "2008240",
    "end": "2013760"
  },
  {
    "text": "code so even though this code looked really expressive and beautiful we have",
    "start": "2013760",
    "end": "2020159"
  },
  {
    "text": "often concern about performance but be rest assured with lazy evaluation we",
    "start": "2020159",
    "end": "2025440"
  },
  {
    "text": "don't have to worry about it because it doesn't do the work until it no longer can avoid doing the work just because we",
    "start": "2025440",
    "end": "2032320"
  },
  {
    "text": "have a functional style of code don't assume this this is available not all",
    "start": "2032320",
    "end": "2037679"
  },
  {
    "text": "languages are created equal this is an example in C so is an example in Java if",
    "start": "2037679",
    "end": "2043679"
  },
  {
    "text": "I create a very similar example you will see Java doing the same thing both Java and C also have embraced this efficiency",
    "start": "2043679",
    "end": "2051358"
  },
  {
    "text": "you can again see the specification uh being different here even if these functions were to have side effect they",
    "start": "2051359",
    "end": "2058000"
  },
  {
    "text": "may not be called after all well that brings up the point if you're interested in using functional style it's important",
    "start": "2058000",
    "end": "2065599"
  },
  {
    "text": "for us to avoid side effects in our code in other words make functions pure because those functions may never get",
    "start": "2065599",
    "end": "2072240"
  },
  {
    "text": "evaluated and we should be very careful about impurity of operations so all the",
    "start": "2072240",
    "end": "2077599"
  },
  {
    "text": "talk about immutability and impurity have a re really bigger end to it which is lazy valuation and efficiency that we",
    "start": "2077599",
    "end": "2084800"
  },
  {
    "text": "really are after so we can see the benefit of laziness here in this code as you can see and it decides not to",
    "start": "2084800",
    "end": "2091358"
  },
  {
    "text": "evaluate this function until it no long can can no longer can postpone it that's",
    "start": "2091359",
    "end": "2096398"
  },
  {
    "text": "one of the biggest benefits you got out of it so that laziness gives you the benefit of having to really postpone",
    "start": "2096399",
    "end": "2103040"
  },
  {
    "text": "operations if you will so as a result in this case you don't have to worry about",
    "start": "2103040",
    "end": "2108079"
  },
  {
    "text": "running computations that don't have to be run that is one of the biggest benefits you get out of laziness lazy",
    "start": "2108079",
    "end": "2114240"
  },
  {
    "text": "valuations has the performance implications but okay so we can have laziness in code that's great but can we",
    "start": "2114240",
    "end": "2122320"
  },
  {
    "text": "benefit from laziness moving forward to a bigger degree and once this this is",
    "start": "2122320",
    "end": "2127760"
  },
  {
    "text": "the beauty of things one thing leads to the next thing and generally speaking",
    "start": "2127760",
    "end": "2134240"
  },
  {
    "text": "every single step may be really small but the minute you have taken five or six or seven steps and then you take a",
    "start": "2134240",
    "end": "2141040"
  },
  {
    "text": "few more steps you suddenly feel that you're in a different floor than you were in and that's one of the biggest",
    "start": "2141040",
    "end": "2146320"
  },
  {
    "text": "benefits is you keep adding on to these benefits so in the beginning we are saying make sure functions are pure well",
    "start": "2146320",
    "end": "2152960"
  },
  {
    "text": "make sure you honor immutability make sure functions are pure make sure functions don't have side effect well what is the benefit that gives you",
    "start": "2152960",
    "end": "2158800"
  },
  {
    "text": "several benefits just one of them being that you can have laziness but now that we can have laziness what's the benefit",
    "start": "2158800",
    "end": "2165280"
  },
  {
    "text": "of that well one benefit is of course efficiency of code but there is yet another benefit and that is you can",
    "start": "2165280",
    "end": "2172560"
  },
  {
    "text": "start bringing in evaluations which are uh you know related to infinite streams",
    "start": "2172560",
    "end": "2178560"
  },
  {
    "text": "what is an infinite stream for this i'll give you an example here in Java but you can write an example in C as well i'll",
    "start": "2178560",
    "end": "2185680"
  },
  {
    "start": "2181000",
    "end": "2411000"
  },
  {
    "text": "I'll maybe convert this to C and show you in just a few minutes but what is what is infinite streams well an",
    "start": "2185680",
    "end": "2191599"
  },
  {
    "text": "infinite stream absolutely has no bounds to it so I'm going to say stream.erate",
    "start": "2191599",
    "end": "2197599"
  },
  {
    "text": "iterate and I'm going to say here is one comma given an element element plus one",
    "start": "2197599",
    "end": "2204160"
  },
  {
    "text": "what does this do well it says this is Java example as you can see it says I'm going to start with one then I'm going",
    "start": "2204160",
    "end": "2210640"
  },
  {
    "text": "to go to 2 3 4 5 and keep on going well how long can the stream go well there is",
    "start": "2210640",
    "end": "2218079"
  },
  {
    "text": "absolutely no limit it's infinite in size i know what you're wondering you're saying if it's infinite in size where in",
    "start": "2218079",
    "end": "2225599"
  },
  {
    "text": "the world would you store it on the cloud of course you're just kidding so the point really is it's infinite but",
    "start": "2225599",
    "end": "2231680"
  },
  {
    "text": "how could you potentially have an infinite stream the answer is laziness so this lambda will not be evaluated",
    "start": "2231680",
    "end": "2240400"
  },
  {
    "text": "until it really is needed and that is the beauty of lazy evaluation well",
    "start": "2240400",
    "end": "2245599"
  },
  {
    "text": "laziness gives an ability for us to have things like infinite streams you can",
    "start": "2245599",
    "end": "2250880"
  },
  {
    "text": "tell it how many elements you want and it'll evaluate it on demand when you",
    "start": "2250880",
    "end": "2257119"
  },
  {
    "text": "actually ask for it and if you don't ask for it it's not going to do the work to get you that well what's the benefit of",
    "start": "2257119",
    "end": "2263680"
  },
  {
    "text": "using something like this well let's go ahead and take a look at how we could benefit from this in terms of getting",
    "start": "2263680",
    "end": "2269440"
  },
  {
    "text": "something really powerful and easy to work with well now you have a initial value and you have a generator that's",
    "start": "2269440",
    "end": "2277040"
  },
  {
    "text": "going to generate subsequent values for you and we can leverage on this idea really nicely well to understand this",
    "start": "2277040",
    "end": "2283760"
  },
  {
    "text": "let's take a little example let's say given a number let's say n and k well",
    "start": "2283760",
    "end": "2289599"
  },
  {
    "text": "given numbers let's say n and k let's say compute the square root of uh the uh",
    "start": "2289599",
    "end": "2298240"
  },
  {
    "text": "let's say first k even numbers uh starting from let's say uh n i will",
    "start": "2298240",
    "end": "2305359"
  },
  {
    "text": "compute the uh total of square root of k even numbers starting from n well seems",
    "start": "2305359",
    "end": "2311760"
  },
  {
    "text": "like a very simple problem to do compute the square root total of the square root of first k even numbers starting from n",
    "start": "2311760",
    "end": "2319359"
  },
  {
    "text": "so let's go ahead and say compute and then I'll say n and k well what in the",
    "start": "2319359",
    "end": "2324400"
  },
  {
    "text": "world is n let's give a random number 72 to begin with and I want to give another",
    "start": "2324400",
    "end": "2329760"
  },
  {
    "text": "value for k which is another random number 219 let's say well I want to",
    "start": "2329760",
    "end": "2335200"
  },
  {
    "text": "perform this operation and get the result out of it so how would I go about doing this work well I'm going to say in",
    "start": "2335200",
    "end": "2341760"
  },
  {
    "text": "this case compute let's say double and we'll call compute n comma k and of",
    "start": "2341760",
    "end": "2348000"
  },
  {
    "text": "course these are going to be uh simple values to pass in what what am I going to do well let's say int index is equal",
    "start": "2348000",
    "end": "2355839"
  },
  {
    "text": "to n to begin with after all we need to work with an index value don't we well then I'm going to say count equal to",
    "start": "2355839",
    "end": "2362079"
  },
  {
    "text": "zero we absolutely need a count then I say double result is equal to zero and",
    "start": "2362079",
    "end": "2367520"
  },
  {
    "text": "then finally I'm going to return the result when we are done what did we do so far really no useful work after all",
    "start": "2367520",
    "end": "2374480"
  },
  {
    "text": "right we all we did was we defined some variables and it's a good time to take a coffee break and that was a lot of hard",
    "start": "2374480",
    "end": "2380320"
  },
  {
    "text": "work right well the point is in imperative style code we create a lot of these things called garbage variables",
    "start": "2380320",
    "end": "2387599"
  },
  {
    "text": "garbage variables are variables simply there to provide our code some some you",
    "start": "2387599",
    "end": "2393280"
  },
  {
    "text": "know points to store data but we don't they don't have any really good per purpose at all in the code then I'm",
    "start": "2393280",
    "end": "2398960"
  },
  {
    "text": "going to say while count is less than k and what do you normally do it's a",
    "start": "2398960",
    "end": "2404880"
  },
  {
    "text": "ritual isn't it you stop and you ask the question is it less than or less than or",
    "start": "2404880",
    "end": "2410800"
  },
  {
    "text": "equal to do you ever ask this question every single day isn't it in fact it's",
    "start": "2410800",
    "end": "2416720"
  },
  {
    "start": "2411000",
    "end": "2452000"
  },
  {
    "text": "code like this that makes us feel really stupid right because you look at that code and you say \"Is it less than or",
    "start": "2416720",
    "end": "2423280"
  },
  {
    "text": "less than or equal to?\" You're trying really hard to reason it and then you leave the computer and you stop by the",
    "start": "2423280",
    "end": "2429200"
  },
  {
    "text": "door was it really less than and you're eating food at lunch dinner and the family says \"Are you okay?\" \"Yeah yeah",
    "start": "2429200",
    "end": "2436160"
  },
  {
    "text": "I'm fine.\" You look really pensive no I'm thinking \"Is it less than or less or equal to i forgot at work.\" Right or",
    "start": "2436160",
    "end": "2442640"
  },
  {
    "text": "it's always this threat that goes along you're not sure ever right these are",
    "start": "2442640",
    "end": "2448079"
  },
  {
    "text": "code that's really hard to reason we have to think very carefully to know what this code really means then what do",
    "start": "2448079",
    "end": "2454079"
  },
  {
    "start": "2452000",
    "end": "2562000"
  },
  {
    "text": "you do then you say well if it's even after all so I'm going to say if the index is mod 2 is equal to zero yay we",
    "start": "2454079",
    "end": "2462880"
  },
  {
    "text": "have a value that is even so what do I do now i'm going to say over here result",
    "start": "2462880",
    "end": "2468079"
  },
  {
    "text": "plus equal to math square root and then of course I'm going to take the index",
    "start": "2468079",
    "end": "2474160"
  },
  {
    "text": "value and compute the math out of it are we done well you're going to say \"No",
    "start": "2474160",
    "end": "2479680"
  },
  {
    "text": "we're not done we need to increment the index value.\" Well okay so here is",
    "start": "2479680",
    "end": "2484760"
  },
  {
    "text": "index++ are we done oh no not really you got to increment the count value so",
    "start": "2484760",
    "end": "2490359"
  },
  {
    "text": "count++ are we done what do you think is it correct no what's",
    "start": "2490359",
    "end": "2498200"
  },
  {
    "text": "missing the plus+ has to be outside okay let's move it outside is it correct now",
    "start": "2498200",
    "end": "2505040"
  },
  {
    "text": "you're like no no no one of them has to be inside one has to be outside well which one then well index has to be uh",
    "start": "2505040",
    "end": "2512319"
  },
  {
    "text": "outside but count has to be inside is it correct",
    "start": "2512319",
    "end": "2517560"
  },
  {
    "text": "now you're not sure anymore right that's the beauty of imperative style code",
    "start": "2517560",
    "end": "2522720"
  },
  {
    "text": "you're never sure about it you're sitting there and thinking deeply to reason it and then of course you're like",
    "start": "2522720",
    "end": "2528160"
  },
  {
    "text": "I think it is correct right and then you're trying to run through that and see what the result is to see what the",
    "start": "2528160",
    "end": "2533920"
  },
  {
    "text": "performance what the code is going to provide as a as a response well of course in this case I'll mark it as",
    "start": "2533920",
    "end": "2539119"
  },
  {
    "text": "static function and of course it gave us some result but god knows if it's correct well but how do we do this code",
    "start": "2539119",
    "end": "2546720"
  },
  {
    "text": "in more of a functional style well thanks to lazy valuation and infinite",
    "start": "2546720",
    "end": "2551920"
  },
  {
    "text": "stream let's see how this is going to become a lot easier to work with so I'm",
    "start": "2551920",
    "end": "2557280"
  },
  {
    "text": "going to comment this code out but reimplement it in a functional style so",
    "start": "2557280",
    "end": "2562400"
  },
  {
    "text": "here we go so what am I going to do return stream.erate and I'm going to say",
    "start": "2562400",
    "end": "2568079"
  },
  {
    "text": "iterate what am I going to do starting with the number n and then k while given",
    "start": "2568079",
    "end": "2573359"
  },
  {
    "text": "an element element + one there is your infinite stream that you have with you",
    "start": "2573359",
    "end": "2579119"
  },
  {
    "text": "now what does the stream do i'm going to start with n and I'm going to keep on going n plus one n plus2 n plus 3 and it",
    "start": "2579119",
    "end": "2586640"
  },
  {
    "text": "keeps going well what's the next thing filter and what am I going to do with this filter well given an element I'm",
    "start": "2586640",
    "end": "2593359"
  },
  {
    "text": "going to say element mark 2 is equal to zero well give me only the even numbers well okay great what's my next operation",
    "start": "2593359",
    "end": "2601280"
  },
  {
    "text": "map this value given an element return math square root of that value so we",
    "start": "2601280",
    "end": "2607680"
  },
  {
    "text": "performed what we did on line 18 and line number 19 we took care of those two",
    "start": "2607680",
    "end": "2612960"
  },
  {
    "text": "lines but then how do we go how much do we go limit to what k values is it less",
    "start": "2612960",
    "end": "2619599"
  },
  {
    "text": "than K is it less than or equal to K it's K damn it keep moving you don't have to waste your time on it right and",
    "start": "2619599",
    "end": "2625680"
  },
  {
    "text": "that's the beauty of this is simply you have this filter uh a map and of course limit and what's the last step we want",
    "start": "2625680",
    "end": "2632640"
  },
  {
    "text": "to perform a sum operation and of course in this case I'm going to perform a sum and get the result out of this",
    "start": "2632640",
    "end": "2638960"
  },
  {
    "text": "particular function so when I run this code of course it says I want a stream so let's go ahead and implement a stream",
    "start": "2638960",
    "end": "2645119"
  },
  {
    "text": "right here bring in the streamstream so now that I have the stream on my hand what am I going to do now well run the",
    "start": "2645119",
    "end": "2652000"
  },
  {
    "text": "code and you can see the difference not only is the code concise the code is",
    "start": "2652000",
    "end": "2657040"
  },
  {
    "text": "extremely expressive as well as you can see right here so what's the benefit the",
    "start": "2657040",
    "end": "2662720"
  },
  {
    "text": "benefit is you're not really dealing with accidental complexity in the code",
    "start": "2662720",
    "end": "2667839"
  },
  {
    "text": "you're not sitting there and struggling with garbage variables you're not struggling with less than or less than",
    "start": "2667839",
    "end": "2672880"
  },
  {
    "text": "or equal to you're not dealing with control variables the code becomes extremely simple to deal with if you",
    "start": "2672880",
    "end": "2679520"
  },
  {
    "text": "have the code in the top and you're looking at that code struggling to understand what the code is doing when a",
    "start": "2679520",
    "end": "2685920"
  },
  {
    "text": "business analyst comes to you and says \"Hey what does this code do?\" Your response normally is \"That's what I'm",
    "start": "2685920",
    "end": "2691440"
  },
  {
    "text": "trying to figure out.\" you shut up because you're really angry dealing with the code whereas in the code in the",
    "start": "2691440",
    "end": "2696880"
  },
  {
    "text": "bottom well you can actually discuss with somebody and say that's what the code is doing does that really make",
    "start": "2696880",
    "end": "2703599"
  },
  {
    "text": "sense to you because the code begins to resemble the problem statement but of course in this case lazy valuation plays",
    "start": "2703599",
    "end": "2709839"
  },
  {
    "text": "a very vital role because with without laziness absolutely you cannot do this",
    "start": "2709839",
    "end": "2715680"
  },
  {
    "start": "2711000",
    "end": "2761000"
  },
  {
    "text": "so lazy valuation is critical let's see how we can this is of course in Java",
    "start": "2715680",
    "end": "2720800"
  },
  {
    "text": "well in C of course C# was influenced greatly by link so the functions don't",
    "start": "2720800",
    "end": "2726000"
  },
  {
    "text": "look like filter and map but there are very equivalent functions to do how would this look like in the case of C",
    "start": "2726000",
    "end": "2732240"
  },
  {
    "text": "well let's take a look at that really quickly to see how we would probably some implement something like that potentially here so let's get this back",
    "start": "2732240",
    "end": "2740160"
  },
  {
    "text": "to rolling well of course I want the math and the square root well before I do that really quickly here you could",
    "start": "2740160",
    "end": "2746800"
  },
  {
    "text": "actually do a little bit of simplification here in Java as well using what are called method references",
    "start": "2746800",
    "end": "2752880"
  },
  {
    "text": "and that can minimize a little bit of noise in the code if you will just a few little benefits similarly if you had",
    "start": "2752880",
    "end": "2758720"
  },
  {
    "text": "that other function available separately you could just use a method reference for it also well of course in this case",
    "start": "2758720",
    "end": "2765200"
  },
  {
    "start": "2761000",
    "end": "2933000"
  },
  {
    "text": "I want a series to begin with but where in the world is the series i don't have one yet so let's go ahead and create it",
    "start": "2765200",
    "end": "2772319"
  },
  {
    "text": "so public let's say in this case static uh I'm going to say I innumerable and",
    "start": "2772319",
    "end": "2778000"
  },
  {
    "text": "then of course in this case I'm going to create an enumerator for the int itself",
    "start": "2778000",
    "end": "2783119"
  },
  {
    "text": "and I'm going to call this a series if you will and what does the series do well I'm going to say a count is equal",
    "start": "2783119",
    "end": "2790079"
  },
  {
    "text": "to n whatever that value of n potentially could be so in this case",
    "start": "2790079",
    "end": "2795119"
  },
  {
    "text": "I'll say a number is n that I want to start with then I could say while true",
    "start": "2795119",
    "end": "2800720"
  },
  {
    "text": "and then I could say yield return and then in this case of course I could return this is count plus+ and I could",
    "start": "2800720",
    "end": "2808240"
  },
  {
    "text": "start returning a number in the series if you will uh starting with this particular number or the value that I'm",
    "start": "2808240",
    "end": "2813920"
  },
  {
    "text": "interested in returning well then of course once I do this I got a series on my hand i can start with the series but",
    "start": "2813920",
    "end": "2821280"
  },
  {
    "text": "then I can say dot where given a particular number I want to say number",
    "start": "2821280",
    "end": "2826640"
  },
  {
    "text": "mod 2 is equal to zero and of course I'm asking it to extract only the even numbers I don't care about anything else",
    "start": "2826640",
    "end": "2833680"
  },
  {
    "text": "then I could do a select given a number again I can say math dosquare root of",
    "start": "2833680",
    "end": "2839040"
  },
  {
    "text": "that number and I can return a you know square root of that particular value and then finally of course I can say take",
    "start": "2839040",
    "end": "2845760"
  },
  {
    "text": "and then give the value k that I'm interested in and of Of course this will start with the value n that we were",
    "start": "2845760",
    "end": "2851280"
  },
  {
    "text": "supposed to start with so n is equal to you know whatever the value is my memory is so wonderfully flawed as you can see",
    "start": "2851280",
    "end": "2858079"
  },
  {
    "text": "here well the value n is 72 over here so let's say 72 and then of course int k",
    "start": "2858079",
    "end": "2864480"
  },
  {
    "text": "equals uh 219 that I wanted to use so we could say those are the values that I",
    "start": "2864480",
    "end": "2869680"
  },
  {
    "text": "want to work with a little different here in C# than we saw in Java but a series is creating with a yield word and",
    "start": "2869680",
    "end": "2876720"
  },
  {
    "text": "it says I'm going to keep producing values along the way when you ask if and when you ask it and finally I'll perform",
    "start": "2876720",
    "end": "2882720"
  },
  {
    "text": "a sum operation on the result and print it so what we can do in this case of",
    "start": "2882720",
    "end": "2887760"
  },
  {
    "text": "course is we could print out the result in the very end ask it to perform the computation so you can see that is a",
    "start": "2887760",
    "end": "2894800"
  },
  {
    "text": "fairly simple equivalent of C code to do almost exactly what we did in the Java",
    "start": "2894800",
    "end": "2899839"
  },
  {
    "text": "side and we got laziness in this case so what we're doing here is the take",
    "start": "2899839",
    "end": "2905480"
  },
  {
    "text": "operation is kind of like the limit operation you saw on the Java side the",
    "start": "2905480",
    "end": "2910800"
  },
  {
    "text": "take says only take K values out of this and not anymore well the evaluation of",
    "start": "2910800",
    "end": "2917440"
  },
  {
    "text": "the innumerable is lazy as you can see it only performs on demand and it",
    "start": "2917440",
    "end": "2923440"
  },
  {
    "text": "evaluates as many times as you ask it to take the value and know no more so you",
    "start": "2923440",
    "end": "2928480"
  },
  {
    "text": "can start benefiting from code like this and you can have laziness being you know come into picture so we can see how lazy",
    "start": "2928480",
    "end": "2936079"
  },
  {
    "start": "2933000",
    "end": "2955000"
  },
  {
    "text": "evaluations lead to efficiency in code quite easily well the point I want to",
    "start": "2936079",
    "end": "2941359"
  },
  {
    "text": "really summarize this with is that one of the really big charming features in",
    "start": "2941359",
    "end": "2946640"
  },
  {
    "text": "functional programming if somebody comes to you and says what's really cool about functional programming or what would you",
    "start": "2946640",
    "end": "2953839"
  },
  {
    "text": "really tell them as what is charming about function I'm sorry objected programming so when somebody says what",
    "start": "2953839",
    "end": "2960640"
  },
  {
    "start": "2955000",
    "end": "3011000"
  },
  {
    "text": "is really big deal about objective programming is I'm going to say object programming is really all about uh",
    "start": "2960640",
    "end": "2967720"
  },
  {
    "text": "polymorphism so isn't that true because what you really are after in OP is",
    "start": "2967720",
    "end": "2973559"
  },
  {
    "text": "polymorphism because if you don't have polymorphism because polymorphism gives you extensibility of code you can call a",
    "start": "2973559",
    "end": "2981280"
  },
  {
    "text": "function but the actual function that will evaluate is no not known to you at compile time at runtime it will decide",
    "start": "2981280",
    "end": "2988480"
  },
  {
    "text": "what the function is based on the runtime type rather than compile time type so the most charming feature of OO",
    "start": "2988480",
    "end": "2996000"
  },
  {
    "text": "programming is polymorphism there are good number of object-oriented programming languages that don't even",
    "start": "2996000",
    "end": "3002480"
  },
  {
    "text": "have interfaces that don't even have inheritance but all of them have one thing in common which is polymorphism",
    "start": "3002480",
    "end": "3009760"
  },
  {
    "text": "well what about encapsulation well encapsulation is extremely important what about abstraction oh my gosh it's",
    "start": "3009760",
    "end": "3017200"
  },
  {
    "start": "3011000",
    "end": "3104000"
  },
  {
    "text": "extremely important but they really are after one thing encapsulation and",
    "start": "3017200",
    "end": "3022920"
  },
  {
    "text": "abstraction really provide polymorphism to us without encapsulation you cannot",
    "start": "3022920",
    "end": "3029119"
  },
  {
    "text": "attain polymorphism in OOP so the real most charming feature of OOP for me is",
    "start": "3029119",
    "end": "3034720"
  },
  {
    "text": "really polymorphism so I'm going to say a lazy evaluation so lazy",
    "start": "3034720",
    "end": "3042359"
  },
  {
    "text": "evaluation is to functional programming as uh polymorphism is to OOP because",
    "start": "3042359",
    "end": "3049839"
  },
  {
    "text": "that is what we really are after what are we really saying in functional programming oh you better really honor",
    "start": "3049839",
    "end": "3057160"
  },
  {
    "text": "immutability you better write pure functions you better really honor all these wonderful things but often the",
    "start": "3057160",
    "end": "3063920"
  },
  {
    "text": "question is why because what we really are after is efficiency that we get from",
    "start": "3063920",
    "end": "3069680"
  },
  {
    "text": "a lazy valuation so to me the real charm in functional programming is the",
    "start": "3069680",
    "end": "3074800"
  },
  {
    "text": "efficiency we get from things like lazy evaluation of course parallelism is also possible and makes it easy with",
    "start": "3074800",
    "end": "3080599"
  },
  {
    "text": "immutability but of course things like you know parallelism and lazy evaluations won't be possible without",
    "start": "3080599",
    "end": "3086480"
  },
  {
    "text": "purity of functions but the real purpose of purity of functions is not because we want to be fancy about keeping functions",
    "start": "3086480",
    "end": "3093760"
  },
  {
    "text": "pure it's not a fashionable thing the real reason why we go after those things is it leads to a greater good which is",
    "start": "3093760",
    "end": "3100480"
  },
  {
    "text": "lazy valuations and potentially parallelism where it makes sense and that's what we really are after uh so",
    "start": "3100480",
    "end": "3106079"
  },
  {
    "start": "3104000",
    "end": "3292000"
  },
  {
    "text": "that's really the charm in functional programming is efficiency through lazy evaluation i hope you'll be eager to",
    "start": "3106079",
    "end": "3111920"
  },
  {
    "text": "make use of laziness that's all I have i hope that was useful thank [Applause]",
    "start": "3111920",
    "end": "3119960"
  },
  {
    "text": "you there's uh so the question is I'll repeat the question so the question is what about resources for uh you know uh",
    "start": "3119960",
    "end": "3127920"
  },
  {
    "text": "uh in in C um honestly um I had a really",
    "start": "3127920",
    "end": "3133119"
  },
  {
    "text": "hard time getting my heads around functional programming and I I really",
    "start": "3133119",
    "end": "3139040"
  },
  {
    "text": "finally decided to invest a lot of time in learning HASLL and I failed three",
    "start": "3139040",
    "end": "3144319"
  },
  {
    "text": "times doing it and and then I realized the reason I found it so hard to learn HASLL was I I was approaching it the",
    "start": "3144319",
    "end": "3150720"
  },
  {
    "text": "wrong way i was getting really uh you know wrapped around by and and and the",
    "start": "3150720",
    "end": "3156079"
  },
  {
    "text": "test uh the the the uh sorry the uh type information and then I realized that",
    "start": "3156079",
    "end": "3161440"
  },
  {
    "text": "Haskell actually is so wonderfully statically typed I don't have to really spend my time saying the type",
    "start": "3161440",
    "end": "3167119"
  },
  {
    "text": "information so much but the point really is learning Haskell actually made me a lot better in writing functional code in",
    "start": "3167119",
    "end": "3174480"
  },
  {
    "text": "multiple languages C# you know Java and so on so the irony is I would say if you",
    "start": "3174480",
    "end": "3179920"
  },
  {
    "text": "really want to get better at it uh you know take your time to learn Haskell and and I go out to re learn about languages",
    "start": "3179920",
    "end": "3186640"
  },
  {
    "text": "I would probably not even use at work and the reason I do that is because by learning those languages that I wouldn't",
    "start": "3186640",
    "end": "3192559"
  },
  {
    "text": "use I actually end up using the languages I do have to use in a lot better way than I I generally do uh so",
    "start": "3192559",
    "end": "3200000"
  },
  {
    "text": "my recommendation actually is to go learn Haskell uh and the reason I say that is um it takes you away from your",
    "start": "3200000",
    "end": "3206240"
  },
  {
    "text": "comfort zone you're thinking about it in a completely different way because you're away from your comfort zone and",
    "start": "3206240",
    "end": "3212079"
  },
  {
    "text": "then you end up actually using some design you know principles and patterns that you normally wouldn't and then when",
    "start": "3212079",
    "end": "3218640"
  },
  {
    "text": "you come back to the language you are familiar with now you're thinking about it very differently than when we",
    "start": "3218640",
    "end": "3224559"
  },
  {
    "text": "normally do in the constraints of the languages we do one of the biggest constraints I see often programming in a language is I am constrained by what the",
    "start": "3224559",
    "end": "3232000"
  },
  {
    "text": "language already provides and there are things that I can actually do in the language angage outside of what it",
    "start": "3232000",
    "end": "3237520"
  },
  {
    "text": "provides in a very tactful way but I often don't even know that I could do that because you know the language has",
    "start": "3237520",
    "end": "3243760"
  },
  {
    "text": "completely blinded me but when I go use a language which is completely different then I come and start tinkering with the",
    "start": "3243760",
    "end": "3249680"
  },
  {
    "text": "language and say whoa I didn't realize I could actually do this so that's what I would say is is go you know look at",
    "start": "3249680",
    "end": "3255760"
  },
  {
    "text": "completely different things uh and and then maybe that will really change the way you think about and programming",
    "start": "3255760",
    "end": "3261640"
  },
  {
    "text": "language other questions or comments yes please",
    "start": "3261640",
    "end": "3266920"
  },
  {
    "text": "so oh um start over with the question okay so so",
    "start": "3267680",
    "end": "3272800"
  },
  {
    "text": "some sometimes um lazy evaluation can can also cause you headaches and the if",
    "start": "3272800",
    "end": "3278240"
  },
  {
    "text": "you're a C# programmer um like ReSharper a few versions back said hey change",
    "start": "3278240",
    "end": "3284319"
  },
  {
    "text": "everything to I innumerable and um and then you know you can pass more things",
    "start": "3284319",
    "end": "3289520"
  },
  {
    "text": "to your methods um and then and then immediately afterwards you started getting all these warnings saying whoa",
    "start": "3289520",
    "end": "3294960"
  },
  {
    "start": "3292000",
    "end": "3493000"
  },
  {
    "text": "you you might be enumerating this innumerable two times and whilst whilst whilst you know we're dealing with um",
    "start": "3294960",
    "end": "3302079"
  },
  {
    "text": "things that aren't coming from a database or aren't coming from files you're good but all of a sudden um you",
    "start": "3302079",
    "end": "3308160"
  },
  {
    "text": "know when that when enumerating that numerable is slow you've now gotten got yourself another problem right so so I",
    "start": "3308160",
    "end": "3315920"
  },
  {
    "text": "you know that's a fair point and one of the things I want to really emphasize is it it it often tends out to be a lot",
    "start": "3315920",
    "end": "3322880"
  },
  {
    "text": "more than syntax when we get into a language or a feature in a language the",
    "start": "3322880",
    "end": "3328079"
  },
  {
    "text": "first thing we come across is a syntax right oh we're trying to understand all these constructs and how to put them together my argument is almost",
    "start": "3328079",
    "end": "3335400"
  },
  {
    "text": "invariably we can have a really good command of the semantics of the language because we don't really take the time to",
    "start": "3335400",
    "end": "3342079"
  },
  {
    "text": "understand the semantics and the implications of a particular thing we're working with a construct in the language",
    "start": "3342079",
    "end": "3348480"
  },
  {
    "text": "uh we could a get infatuated with ideas uh which is not going to help us or get",
    "start": "3348480",
    "end": "3353920"
  },
  {
    "text": "drawn into certain code not understanding the real implications of it and then we end up facing some of",
    "start": "3353920",
    "end": "3360079"
  },
  {
    "text": "these challenges as well uh and so you know in fact a lot of ways it's no longer what you see is what you get",
    "start": "3360079",
    "end": "3366799"
  },
  {
    "text": "right it's a lot more than what you see that you actually end up getting and and clearly that's a departure from the",
    "start": "3366799",
    "end": "3373040"
  },
  {
    "text": "syntax because syntax often shows you what you are seeing and what you're heading where semantics is often what",
    "start": "3373040",
    "end": "3379599"
  },
  {
    "text": "you don't see you know vis vis v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v visibly in front of you uh and I think your question really hinges on hey take the",
    "start": "3379599",
    "end": "3386160"
  },
  {
    "text": "time to really understand the semantics because semantics actually rules right syntax becomes your muscle memory after",
    "start": "3386160",
    "end": "3393119"
  },
  {
    "text": "a while you're not thinking about the syntax after a while because it becomes",
    "start": "3393119",
    "end": "3398240"
  },
  {
    "text": "your second nature to code with that syntax uh the semantics is something you",
    "start": "3398240",
    "end": "3403280"
  },
  {
    "text": "have to specifically think about every single time uh because that's not something that you're going to see in",
    "start": "3403280",
    "end": "3409440"
  },
  {
    "text": "front of you but that has a very uh strong repercussions to what you do so to your point I would say yes you're",
    "start": "3409440",
    "end": "3415760"
  },
  {
    "text": "absolutely right it's important to understand the semantics and then we can then say you know here are tools I have",
    "start": "3415760",
    "end": "3422079"
  },
  {
    "text": "in front of me but the semantics tells me I shouldn't use this tool at this point maybe I should still go back and",
    "start": "3422079",
    "end": "3428480"
  },
  {
    "text": "program in that imperative style in this case and that's the beauty in language like Java and C you have the control now",
    "start": "3428480",
    "end": "3435359"
  },
  {
    "text": "to decide when to use which and I'm not suggesting functional is the right thing all the time or imperative is the right",
    "start": "3435359",
    "end": "3441680"
  },
  {
    "text": "thing all the time i I think we have to choose based on our current specific needs and and in for myself what I find",
    "start": "3441680",
    "end": "3448240"
  },
  {
    "text": "out a lot of times is I don't know how to do this in functional style right now so I do this in imperative but three",
    "start": "3448240",
    "end": "3454880"
  },
  {
    "text": "weeks from now somebody shows me a better way to do it in functional style and it's often not the way that I",
    "start": "3454880",
    "end": "3460400"
  },
  {
    "text": "thought I should do in the first place but quite different from what I thought but the beauty is I can come back and",
    "start": "3460400",
    "end": "3465760"
  },
  {
    "text": "refactor the code at the time to a much better style than I did so I absolutely",
    "start": "3465760",
    "end": "3470799"
  },
  {
    "text": "I don't want to let go of the performance and efficiency uh and I can pick and choose what makes sense based",
    "start": "3470799",
    "end": "3476160"
  },
  {
    "text": "on you know what what what I have at hand yeah one more probably question before",
    "start": "3476160",
    "end": "3482240"
  },
  {
    "text": "we wrap this up",
    "start": "3482240",
    "end": "3485880"
  },
  {
    "text": "oh all right well thanks for coming then i appreciate it thank you",
    "start": "3487599",
    "end": "3492670"
  },
  {
    "text": "[Applause]",
    "start": "3492670",
    "end": "3495019"
  }
]