[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "so hey everybody thanks for coming if you came to here to talk about",
    "start": "8200",
    "end": "13360"
  },
  {
    "text": "in some form then this is the right room so who who in here is like 100% happy",
    "start": "13360",
    "end": "19480"
  },
  {
    "text": "with their software stability or like its speed either what you build or what",
    "start": "19480",
    "end": "24790"
  },
  {
    "text": "you use hopefully no one I think we can do a lot better than we do right now so",
    "start": "24790",
    "end": "30820"
  },
  {
    "start": "30000",
    "end": "30000"
  },
  {
    "text": "I want a world with better software and if you want something to happen you should take action and so like if I",
    "start": "30820",
    "end": "36190"
  },
  {
    "text": "wanted apples I'd plant a seed or nurture a tree so I could get as many apples as r1 so this talk is me planting",
    "start": "36190",
    "end": "42280"
  },
  {
    "text": "a seed I want better software so the purpose is to convince you to care about building better software or building",
    "start": "42280",
    "end": "49150"
  },
  {
    "text": "software better and once you care about that I think that we will get better software but who gives a crap right why",
    "start": "49150",
    "end": "55180"
  },
  {
    "text": "should you care at all about any of this like we go to work we get paid we buy donuts and if this doesn't change that",
    "start": "55180",
    "end": "61780"
  },
  {
    "text": "dynamic like what's in it for me well this is what you spend your life doing we all die eventually so sorry to kick",
    "start": "61780",
    "end": "70479"
  },
  {
    "start": "64000",
    "end": "64000"
  },
  {
    "text": "off the talk with morbidity but if it makes you feel better there's more to come so wouldn't you like your time on",
    "start": "70479",
    "end": "75970"
  },
  {
    "text": "earth to be spent doing doing something that makes an impact in a positive way software is the biggest leaver the",
    "start": "75970",
    "end": "82060"
  },
  {
    "text": "world's ever seen I like I like using this picture for sort of this analogy so using this software as a big ol lever",
    "start": "82060",
    "end": "89430"
  },
  {
    "text": "metaphor the best thing to do to have more impact with our software would be like to extend the lever right because",
    "start": "89430",
    "end": "96070"
  },
  {
    "text": "you get more leverage and so that's kind of what computer science researchers do so they you know every time they come up",
    "start": "96070",
    "end": "102280"
  },
  {
    "text": "with something novel we get a little extra little bit of the lever but I think it's sad but it's basically unimportant that they do that",
    "start": "102280",
    "end": "108580"
  },
  {
    "text": "right now and the reason for that is nobody uses like nobodies at the end of the lever right now most of most of the",
    "start": "108580",
    "end": "114880"
  },
  {
    "text": "industry at least is sitting very close to the fulcrum and like pushing and when they want more done they push harder or",
    "start": "114880",
    "end": "120280"
  },
  {
    "text": "they get more bodies to come to push harder but like you need to move down the lever to have more impact so anyway I think I",
    "start": "120280",
    "end": "129819"
  },
  {
    "text": "think often I see people get frustrated by software being hard but they don't like I can tell them hey you can move",
    "start": "129819",
    "end": "136870"
  },
  {
    "text": "down the lever by doing this or that and they just kind of don't care because it's not how I do stuff anyway so the",
    "start": "136870",
    "end": "142720"
  },
  {
    "text": "good thing for you is if you want to like beat them you can move down the lever and beat",
    "start": "142720",
    "end": "148400"
  },
  {
    "text": "people that are still doing doing stuff dumb ways so what come back to sort of",
    "start": "148400",
    "end": "154760"
  },
  {
    "text": "that a little bit but let's talk about where things are today so what does it mean to be successful with your software company if your software's useful I",
    "start": "154760",
    "end": "162140"
  },
  {
    "text": "assume that some people use that software hopefully a lot of people use that software because most business model is not developed by the wu-tang",
    "start": "162140",
    "end": "167599"
  },
  {
    "text": "clan revolve around convincing a large number of people to use your product so let's assume you're working on really",
    "start": "167599",
    "end": "172940"
  },
  {
    "text": "successful software and do some math so you have 10 million users this is pretty good that's a decent number to get the",
    "start": "172940",
    "end": "180110"
  },
  {
    "text": "value out of the software that they need they visit on average say 10 pages per day I think this is an unusually a low",
    "start": "180110",
    "end": "185900"
  },
  {
    "text": "number if you have useful software but I so that means I think that this is a conservative estimate but you didn't",
    "start": "185900",
    "end": "191690"
  },
  {
    "text": "build your software very well so each page load let's say takes on average six seconds we probably don't have any",
    "start": "191690",
    "end": "198200"
  },
  {
    "text": "software extent in the world that has long load times and that you wait on regularly right not banks or other",
    "start": "198200",
    "end": "204200"
  },
  {
    "text": "financial software that have massive massive basically everybody has to deal with one of these or like the dashboard",
    "start": "204200",
    "end": "210260"
  },
  {
    "text": "of what is maybe the biggest modern hosting platform that people care about at least one of ok so 10 million users",
    "start": "210260",
    "end": "217459"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "visiting 10 pages per day that each takes 6 seconds to load turns out that's 10 million minutes a day it's not an",
    "start": "217459",
    "end": "223310"
  },
  {
    "text": "easy number to wrap your head around 10 million is big and we don't handle big numbers well so I wanted to break it down so it's 166 thousand six hundred",
    "start": "223310",
    "end": "229400"
  },
  {
    "text": "sixty-six hours per day or six thousand nine hundred forty four days per day which is not a unit that I actually deal",
    "start": "229400",
    "end": "235310"
  },
  {
    "text": "in very often or 19 years per day so that's 19 years a day spent looking at a",
    "start": "235310",
    "end": "241190"
  },
  {
    "text": "loading screen that's a lot of time but who cares right we're making money we're buying the doughnuts and everything's good on an unrelated note the average",
    "start": "241190",
    "end": "248900"
  },
  {
    "text": "human lifespan is 80 years so congratulations your software kills a human every four days and it's software",
    "start": "248900",
    "end": "256220"
  },
  {
    "start": "252000",
    "end": "252000"
  },
  {
    "text": "so it doesn't ever sleep in its bloodlust so I want to I'd like to propose that our metrics dashboards maybe should track a mortality rate",
    "start": "256220",
    "end": "262550"
  },
  {
    "text": "based on like you know load time right alongside our other metrics to kind of drill this into your head I think it's",
    "start": "262550",
    "end": "268910"
  },
  {
    "text": "kind of important but people don't care about it but why do I bring it up to convince you that you have an obligation",
    "start": "268910",
    "end": "274400"
  },
  {
    "start": "272000",
    "end": "272000"
  },
  {
    "text": "to do your job well if you aren't great at it but you write successful software",
    "start": "274400",
    "end": "279530"
  },
  {
    "text": "that people use you're basically more efficient at snuffing out snuffing out human life than the most effective serial killers",
    "start": "279530",
    "end": "284900"
  },
  {
    "text": "the world seen so I found this comic from Saturday morning breakfast cereal pretty relevant it says you know your",
    "start": "284900",
    "end": "290599"
  },
  {
    "text": "theorem and if your morphic function construction I found a way to use it to cure cancer with the caption funtime activity",
    "start": "290599",
    "end": "296059"
  },
  {
    "text": "forcibly converting pure mathematicians into applied mathematicians so think of the person in the background as me and",
    "start": "296059",
    "end": "301939"
  },
  {
    "text": "my math earlier as the thing that makes you cry at night as you come to grips with your obligation so this leads me",
    "start": "301939",
    "end": "309169"
  },
  {
    "text": "into the point of the talk should we be worried about getting things done now or right this is the trade-off at the heart",
    "start": "309169",
    "end": "314870"
  },
  {
    "text": "of this tension between expediency and correctness with that in mind let's talk",
    "start": "314870",
    "end": "321139"
  },
  {
    "text": "about object oriented programming versus functional programming I'll talk about my transition personally I just sort of",
    "start": "321139",
    "end": "327319"
  },
  {
    "text": "- I don't know personalize the situation so this is a language Ruby that's near",
    "start": "327319",
    "end": "333050"
  },
  {
    "text": "and dear to my heart I learned about Ruby with rails so like that was when I became aware of it as before rails 1.0",
    "start": "333050",
    "end": "339110"
  },
  {
    "text": "came out it was in the comment section of some slashed article I've looked for it I have been able to find it but I do",
    "start": "339110",
    "end": "344870"
  },
  {
    "text": "remember that's the case so that people don't think that I'm saying ruby is awful in this talk since I am sort of",
    "start": "344870",
    "end": "350360"
  },
  {
    "text": "not bashing over P but suggesting a transition understand I really love this language before Ruby I was not",
    "start": "350360",
    "end": "357740"
  },
  {
    "text": "developing software in an expedient manner and I wasn't building correct software so Ruby introduced me to the",
    "start": "357740",
    "end": "362839"
  },
  {
    "text": "joy of test-driven development and this helped me make my code substantially more correct than it ever could have",
    "start": "362839",
    "end": "368120"
  },
  {
    "text": "been before I knew about this or sort of vaguely knew about it but no one did it because I was in a Microsoft dominated",
    "start": "368120",
    "end": "373219"
  },
  {
    "text": "space at the time it also just made made me develop software much faster but in",
    "start": "373219",
    "end": "380059"
  },
  {
    "start": "379000",
    "end": "379000"
  },
  {
    "text": "the course of running a consultancy building ruby apps for a decade some things happened we got to build bigger",
    "start": "380059",
    "end": "385279"
  },
  {
    "text": "and bigger software more interesting applications and these ultimately required various forms of concurrency",
    "start": "385279",
    "end": "390919"
  },
  {
    "text": "and made me care about concurrency so I continued to build the applications in Ruby and at this point I stopped being",
    "start": "390919",
    "end": "396259"
  },
  {
    "text": "expedient or correct with my software development practices so things were basically awful any time we had any",
    "start": "396259",
    "end": "403430"
  },
  {
    "text": "scale on a concurrency focused application either for the end-users or you know if we are taking our obligation",
    "start": "403430",
    "end": "410060"
  },
  {
    "text": "seriously for the developers depending on where we placed our concurrency concern",
    "start": "410060",
    "end": "415209"
  },
  {
    "text": "so this point I felt like there were cracks in my superpowers before I could build stuff and build stuff that I hadn't been able to build before and it",
    "start": "415209",
    "end": "421159"
  },
  {
    "text": "was like fast and people used it it was great but once I got to this point it stopped being fast it was not pleasant I",
    "start": "421159",
    "end": "427219"
  },
  {
    "text": "had a lot of people tell me that like functional programming is great that's like made them happy and it would help me solve my issues but there was a",
    "start": "427219",
    "end": "433729"
  },
  {
    "text": "problem and it was this I folks the programmers seemed really smart but the",
    "start": "433729",
    "end": "438830"
  },
  {
    "text": "ones I talked to seemed to not actually build stuff and put it out in the real world that they really enjoyed programming so they'd spend a lot of",
    "start": "438830",
    "end": "445279"
  },
  {
    "text": "time seemingly just talking about like how monads are like food stuff while I was building applications with a real",
    "start": "445279",
    "end": "450649"
  },
  {
    "text": "business value and my clients were selling their companies that we built applications for for like nine figures so I had a hard time taking it seriously",
    "start": "450649",
    "end": "456800"
  },
  {
    "text": "because no one that was telling me about this was actually building software out in the real world seemingly at least at",
    "start": "456800",
    "end": "461839"
  },
  {
    "text": "least the ones that were close to me but conversely this is how folks know programmer saw me and in a large part we",
    "start": "461839",
    "end": "467449"
  },
  {
    "text": "were both right at the time I think part of the reason it felt like functional programmers weren't building stuff",
    "start": "467449",
    "end": "472459"
  },
  {
    "text": "though is there's not a need for things like the solid principles right and",
    "start": "472459",
    "end": "478269"
  },
  {
    "text": "consequently there were fewer smarmy blog posts with very trivial concerns that people still found interesting your",
    "start": "478269",
    "end": "484550"
  },
  {
    "text": "apps are composable by default if they're made of functions their functions are composable so fewer smarmy",
    "start": "484550",
    "end": "489919"
  },
  {
    "text": "blog posts meant that when they did post they they had put out things that were very dense or confusing seem like a lot",
    "start": "489919",
    "end": "496490"
  },
  {
    "text": "of work to somebody who you know there were no beginner posts right so like there's this big gap this gulf so I",
    "start": "496490",
    "end": "502459"
  },
  {
    "text": "think function programming wasn't picking up very widely but my superpowers had broken down and I didn't",
    "start": "502459",
    "end": "509149"
  },
  {
    "start": "506000",
    "end": "506000"
  },
  {
    "text": "want to do functional programming at the time so I got interested in the actor model in Ruby via celluloid as a library",
    "start": "509149",
    "end": "514939"
  },
  {
    "text": "there's an another sort of actor model library out as well I forget the name of it it was alright it was pretty good I",
    "start": "514939",
    "end": "521120"
  },
  {
    "text": "could do neater stuff and I get to handle a little bit more load if you're not familiar with the actor model it's",
    "start": "521120",
    "end": "526550"
  },
  {
    "text": "all about concurrent processes that like live at the same time and send messages each other and don't share memory with",
    "start": "526550",
    "end": "531860"
  },
  {
    "text": "the actor model I was able to build like real time things that I couldn't have dreamed about building successfully earlier but it's not cracks because in",
    "start": "531860",
    "end": "540019"
  },
  {
    "text": "Ruby at least the default implementation of celluloid depended on basically threads and so you couldn't have you",
    "start": "540019",
    "end": "546199"
  },
  {
    "text": "could really get to like a thousand actors but you know tens of thousands of actors was a no-go and so eventually again as",
    "start": "546199",
    "end": "552440"
  },
  {
    "text": "we hit scale things got bad I had to do things like multiplex the purpose of",
    "start": "552440",
    "end": "557690"
  },
  {
    "text": "actors just so that they could do enough stuff that we could support the load and at that point I didn't really even get",
    "start": "557690",
    "end": "563630"
  },
  {
    "text": "the benefit of I got sort of the benefit factors but I didn't get it was I was not living the dream for sure all right",
    "start": "563630",
    "end": "570080"
  },
  {
    "text": "so do you know this guy is yeah so he's a hero of mine if you're not familiar with him you owe it to yourself to look",
    "start": "570080",
    "end": "576800"
  },
  {
    "text": "into him he invented the concept are ya I mean the phrase I Victorian programming while working on small talk",
    "start": "576800",
    "end": "583720"
  },
  {
    "text": "so he said this about modern object-oriented programming he said I invented the term object-oriented programming our object-oriented and I",
    "start": "583720",
    "end": "589970"
  },
  {
    "text": "can tell you that C++ was not what I had in mind the actor model is really what he meant by object-oriented he's confirmed this on like hacker news a",
    "start": "589970",
    "end": "596390"
  },
  {
    "text": "comment thread recently I'm not just making it up I find that really interesting these things get lost in",
    "start": "596390",
    "end": "601880"
  },
  {
    "text": "industry because people in industry basically don't care about programming history or reading about stuff I met it's a broad broad brush I know but not",
    "start": "601880",
    "end": "609470"
  },
  {
    "text": "everyone in industry but industry as a whole is mostly concerned with like let's build this thing and maybe we need a factory of people to do it and move on",
    "start": "609470",
    "end": "616670"
  },
  {
    "text": "anyway so people don't care as much about programming history as maybe me so I read everything that I could on the",
    "start": "616670",
    "end": "622580"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "actor model and if you do this this will lead you to Erlang I really hated that I",
    "start": "622580",
    "end": "628280"
  },
  {
    "text": "couldn't ever seem to write my like commas and semicolons and Erlang in the right spots which on the first pass I",
    "start": "628280",
    "end": "634100"
  },
  {
    "text": "mean obviously I got it but I love the primitives that Erlang provided and I was like very very impressed with the runtime I'm not saying the syntax is bad",
    "start": "634100",
    "end": "641540"
  },
  {
    "text": "it's just it's not necessarily beginner-friendly to at least some subset of people a friend then sent me a",
    "start": "641540",
    "end": "648980"
  },
  {
    "text": "talk by Jose a villain a tor dev and I immediately decided that I needed to",
    "start": "648980",
    "end": "654500"
  },
  {
    "text": "look into his language which was elixir and learn it but of course time is finite so it took me a while eventually",
    "start": "654500",
    "end": "659870"
  },
  {
    "start": "659000",
    "end": "659000"
  },
  {
    "text": "though I did come to elixir and I fell in love with it so this talk is a little bit about elixir because the licks are",
    "start": "659870",
    "end": "665300"
  },
  {
    "text": "allowed me to start writing code that was more correct than the code that I was writing in Ruby but it still gave me",
    "start": "665300",
    "end": "671360"
  },
  {
    "text": "like the expediency of development that I got in Ruby and so consequently obviously correctness and expediency",
    "start": "671360",
    "end": "677750"
  },
  {
    "text": "aren't actually a dichotomy you can have both it's possible to expediently write code that is correct so there's actually one of the draws for",
    "start": "677750",
    "end": "684829"
  },
  {
    "text": "me to elixir I'm not trying to sell you on elixir specifically in this talk but I am suggesting there are some very",
    "start": "684829",
    "end": "690709"
  },
  {
    "text": "serious correctness benefits that a language like this get you that you're not really likely to achieve in practice without this kind of tool at your",
    "start": "690709",
    "end": "696470"
  },
  {
    "text": "disposal if you're unlike the dotnet stack there's F sharp it'll give you a lot of the same benefits and it seems",
    "start": "696470",
    "end": "701509"
  },
  {
    "text": "awesome if you end up getting play with or liens on the.net stack then I'll even be jealous of you but probably not",
    "start": "701509",
    "end": "706910"
  },
  {
    "text": "without that and if you're a Java Scott shop there Scala there's closure there's Kotlin there are other things that might",
    "start": "706910",
    "end": "712069"
  },
  {
    "text": "fit the bill and still allow you to do the work that you're doing but we're gonna talk about elixir for now and just",
    "start": "712069",
    "end": "717079"
  },
  {
    "text": "discuss at a high level the parts that were important in helping me write far more correct code than I've been doing",
    "start": "717079",
    "end": "722540"
  },
  {
    "text": "before so the parts that normally come up in any kind of survey of Aleks are sort of a small part I'll discuss these",
    "start": "722540",
    "end": "730249"
  },
  {
    "text": "are the details that bring people to the language typically and they're important to get right so it's a functional",
    "start": "730249",
    "end": "735470"
  },
  {
    "text": "language this matters a whole lot if you have a functional language especially a highly concurrent and fault-tolerant",
    "start": "735470",
    "end": "741559"
  },
  {
    "text": "functional language then you can build systems that are fast and isolated so",
    "start": "741559",
    "end": "747470"
  },
  {
    "text": "isolated failures that have insane uptime while keeping the code easy to reason about like my multiplex actors in",
    "start": "747470",
    "end": "753559"
  },
  {
    "text": "Ruby they were not easy to reason about you had to know way too much to actually figure out what was going on and I was forced into that by constraints on kind",
    "start": "753559",
    "end": "759949"
  },
  {
    "text": "of the fundamental like the lingam there's not a runtime really in Ruby but the you know the language itself so",
    "start": "759949",
    "end": "766850"
  },
  {
    "text": "functional languages are inherently composable so like all the work that you put into building like foo which at factory factories and stuff you don't do",
    "start": "766850",
    "end": "773119"
  },
  {
    "text": "that you just bend that focus on actually building the software that you're dealing with instead of these weird abstractions that you ultimately",
    "start": "773119",
    "end": "779089"
  },
  {
    "text": "have to make so that you can compose object-oriented stuff it's immutable",
    "start": "779089",
    "end": "784129"
  },
  {
    "start": "783000",
    "end": "783000"
  },
  {
    "text": "this is one of the most important things right global mutable state is the source of all evil it's the worst but immutability makes",
    "start": "784129",
    "end": "790819"
  },
  {
    "text": "things way easier so for instance I wrote a Tetris game in elixir and I have like only allow valid moves function",
    "start": "790819",
    "end": "797449"
  },
  {
    "text": "right and so what I could do is I could apply the moves and then look at what the new state of the world would be and",
    "start": "797449",
    "end": "802459"
  },
  {
    "text": "be like should this be able to happen and if it shouldn't I just throw it away and if it should then that becomes the new state so this is how I handled",
    "start": "802459",
    "end": "809119"
  },
  {
    "text": "collision detection in the game and it was great I was not going to be able to write that code that way in Ruby because if you're",
    "start": "809119",
    "end": "814910"
  },
  {
    "text": "writing a Tetris game or something in Ruby you're almost certainly mutating a bunch of objects right you can't really roll back easily you can't do deep",
    "start": "814910",
    "end": "820010"
  },
  {
    "text": "duplicates very easily especially in Ruby but in most most other languages a deep duplication it's like hard or",
    "start": "820010",
    "end": "826580"
  },
  {
    "text": "something anyway so once you mutate it's very hard to like undo and rollback so",
    "start": "826580",
    "end": "833180"
  },
  {
    "text": "here's the code this is the collision detection code I'm still dealing with state a little bit more than I'd like to but basically you handle input you give",
    "start": "833180",
    "end": "838850"
  },
  {
    "text": "it the original state and the thing that happened you get news what the new state would be bypassing and deferring to this",
    "start": "838850",
    "end": "845779"
  },
  {
    "text": "other do handle input function that knows like what left arrow and right arrow mean and then just a conditional like if the new state is valid then cool",
    "start": "845779",
    "end": "852200"
  },
  {
    "text": "that's our new state and if it's not valid then we just return the original state and so by doing that nope any button you press that returns an invalid",
    "start": "852200",
    "end": "857720"
  },
  {
    "text": "state just doesn't do anything because we just throw away the new though what would have happened if I were to model",
    "start": "857720",
    "end": "865940"
  },
  {
    "text": "this in a language that had like maybes built into the standard library I would do a little differently but I still",
    "start": "865940",
    "end": "871430"
  },
  {
    "text": "think it's pretty good I like it anyway so this is one of the reasons that",
    "start": "871430",
    "end": "877670"
  },
  {
    "text": "immutability being first-class is really important you can though get immutability and almost in the language it's like in Ruby there's hamster there",
    "start": "877670",
    "end": "884810"
  },
  {
    "text": "are various immutable libraries for just about any language I'm sure and",
    "start": "884810",
    "end": "890000"
  },
  {
    "text": "those are good but generally they tend to not be as fast as they could be if they were like first-class they definitely don't have as many users and",
    "start": "890000",
    "end": "895220"
  },
  {
    "text": "you have libraries that just won't work with them right because they expect to mutate things anyway so then there's",
    "start": "895220",
    "end": "900800"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "concurrency this is why I think most of the people that I talk to come to the language the early vertical machine that",
    "start": "900800",
    "end": "906860"
  },
  {
    "text": "elixir runs on has concurrency like completely figured out if you're not familiar with how the virtual machine",
    "start": "906860",
    "end": "911899"
  },
  {
    "text": "works or how Erlang scheduler works then you're in luck I wholeheartedly recommend reading up on it it's like one",
    "start": "911899",
    "end": "917690"
  },
  {
    "text": "of them like wonders of modern software development because it's so simple but so powerful in the meantime here's a",
    "start": "917690",
    "end": "924170"
  },
  {
    "text": "quick crash course and actually I stole this live from Brian Hunter there well he gave it to me so don't guess it counts as stealing but in early and you",
    "start": "924170",
    "end": "930410"
  },
  {
    "text": "have they have a lot of these concurrent processes that are running along they can't block each other because because",
    "start": "930410",
    "end": "936680"
  },
  {
    "text": "of how they work so the way that works is there's a schedulers and is really one of these schedulers per core in general you can tweak it and the",
    "start": "936680",
    "end": "942920"
  },
  {
    "text": "scheduler gives 2000 reductions to each process in the loop by the again you can tweak it and then the",
    "start": "942920",
    "end": "948720"
  },
  {
    "text": "scheduler handle the next process and a reduction you can think of just being like any machine instruction there's that's essentially what they are because",
    "start": "948720",
    "end": "956459"
  },
  {
    "text": "they designed this this way like all of the other concurrency things fall out of it and so this is like this little",
    "start": "956459",
    "end": "965130"
  },
  {
    "text": "picture is why early age concurrency is amazing they had to get this part correct so there's an example of where",
    "start": "965130",
    "end": "970140"
  },
  {
    "text": "you can't really defer to expediency right they could have built a virtual machine or a scheduler that was like",
    "start": "970140",
    "end": "975269"
  },
  {
    "text": "faster to build or not fought through it as well but if you do that you don't get our Lang you don't get what we like to",
    "start": "975269",
    "end": "980970"
  },
  {
    "text": "like about the virtual machine but it might also be an example of how expediency still is okay kind of because",
    "start": "980970",
    "end": "987779"
  },
  {
    "text": "they're laying soft real time it's a hard real time so it's conceivable that you could build something like this maybe with hard real-time properties but",
    "start": "987779",
    "end": "993540"
  },
  {
    "text": "I'm sure it's way harder and that's not what our Lang did anyway so I think this is fascinating I really love it I don't",
    "start": "993540",
    "end": "1000800"
  },
  {
    "text": "know there's like just some aesthetic about how it was built and when you read up on how it works it's just very impressive and also it's required that",
    "start": "1000800",
    "end": "1006470"
  },
  {
    "text": "you don't share state for this to be sort of feasible anyway I found hard to explain why I love it so much but just the simplicity of the design makes me",
    "start": "1006470",
    "end": "1013220"
  },
  {
    "text": "feel warm like whiskey and then fault tolerance is the other reason that people come to the virtual machine so an",
    "start": "1013220",
    "end": "1018589"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "elixir application built properly just runs forever just forever Ericsson built the telephone switch that had nine nines",
    "start": "1018589",
    "end": "1023839"
  },
  {
    "text": "of uptime in Erlang that's a lot of nines it's basically unheard of I have a small",
    "start": "1023839",
    "end": "1030319"
  },
  {
    "text": "anecdote to mention here my consultancy we had a client that was building real-time delivery as a service so part",
    "start": "1030319",
    "end": "1037069"
  },
  {
    "text": "of the platform involved like a WebSocket thing that would expose driver location so drivers phones would you",
    "start": "1037069",
    "end": "1043490"
  },
  {
    "text": "know update us on where they were and then people would view a map on the web or mobile app and they would get",
    "start": "1043490",
    "end": "1048860"
  },
  {
    "text": "WebSockets to push the data down to them I built that piece in elixir like before",
    "start": "1048860",
    "end": "1054260"
  },
  {
    "text": "elixir 1.0 before phoenix 1.0 and I literally deployed it on a screen session like I the first time it went",
    "start": "1054260",
    "end": "1060679"
  },
  {
    "text": "down to the first time we updated it I was going to like do a proper proper release and build a service and all that",
    "start": "1060679",
    "end": "1065990"
  },
  {
    "text": "but I never did all this thing did was shuffle data and tweak some stuff and handle encryption and authentication so",
    "start": "1065990",
    "end": "1073280"
  },
  {
    "text": "it's pretty basic service but still eight months after I deployed it the CTO called me and said hey just wanted to",
    "start": "1073280",
    "end": "1079340"
  },
  {
    "text": "double-check with you were shutting down these machines on Amazon and just wanted to make sure that like you don't think we need them and",
    "start": "1079340",
    "end": "1085639"
  },
  {
    "text": "this was one of them the thing that I built and he didn't know what it was because he had never had to deal with it",
    "start": "1085639",
    "end": "1092149"
  },
  {
    "text": "because it never had a single problem ever in its history I was still running on screen eight months later and had",
    "start": "1092149",
    "end": "1098570"
  },
  {
    "text": "never dropped to anything this was awesome this is not my typical experience they actually pivoted",
    "start": "1098570",
    "end": "1105169"
  },
  {
    "text": "business models and didn't need this feature anymore and so technically I'm claiming 100% uptime of the service I",
    "start": "1105169",
    "end": "1111139"
  },
  {
    "text": "feel good about this although I'm told that 100 uptime is also code speak for",
    "start": "1111139",
    "end": "1116749"
  },
  {
    "text": "we don't do monitoring properly so the grain of salt okay so those are reasons that people tend to come to the to elixir and they're awesome but there are",
    "start": "1116749",
    "end": "1123049"
  },
  {
    "text": "few other really important parts of the language that don't necessarily get as much public love as they should and I want to talk about those as well so",
    "start": "1123049",
    "end": "1128089"
  },
  {
    "text": "there's likely an equivalent these in whatever your language of choice is whether it's o or not now I'd like to",
    "start": "1128089",
    "end": "1133609"
  },
  {
    "text": "talk about the features that help you ratchet up the correctness of your software so there's dialyzer if you're unfamiliar it lets you do what's called",
    "start": "1133609",
    "end": "1139039"
  },
  {
    "start": "1137000",
    "end": "1137000"
  },
  {
    "text": "success typing this isn't as strong as like a hiddenly Milner type system but it's way better than not having tied",
    "start": "1139039",
    "end": "1145129"
  },
  {
    "text": "checks and your software now the sweet spot is that you can build software without spending time specifying types",
    "start": "1145129",
    "end": "1150559"
  },
  {
    "text": "really think you throw together a prototype whatever and then later you can come back and you can add some sort of type declarations on top of it and",
    "start": "1150559",
    "end": "1156799"
  },
  {
    "text": "let dialyzer run over your code and it'll say turns out you said that this thing could return only positive numbers",
    "start": "1156799",
    "end": "1162379"
  },
  {
    "text": "and if you know found a negative one or whatever or you know or or you turns out",
    "start": "1162379",
    "end": "1167779"
  },
  {
    "text": "that this has to handle all negative numbers and there's this one particular case it doesn't handle or whatever so",
    "start": "1167779",
    "end": "1174019"
  },
  {
    "text": "with Ruby and Friends there's no way to do this really reasonably your language might have something like this if it",
    "start": "1174019",
    "end": "1179149"
  },
  {
    "text": "does I recommend you start using it because you'll find your bugs before they hit production like find them at compile time or in your continuous",
    "start": "1179149",
    "end": "1185029"
  },
  {
    "text": "integration server rather than finding them in your bug tracker for JavaScript there's flow jeaious I'll talk about it briefly later if you write JavaScript",
    "start": "1185029",
    "end": "1191929"
  },
  {
    "text": "you should use flow j/s so what benefits do you get from a tool like this yeah I",
    "start": "1191929",
    "end": "1197929"
  },
  {
    "text": "mentioned it you can find case statements they don't cover all their cases sort of sort of like just general",
    "start": "1197929",
    "end": "1203059"
  },
  {
    "text": "stuff that you should handle and we often don't okay then there's quick",
    "start": "1203059",
    "end": "1208309"
  },
  {
    "start": "1207000",
    "end": "1207000"
  },
  {
    "text": "check so it's a property based testing tool and property based tests are amazing they let you write code that will",
    "start": "1208309",
    "end": "1213480"
  },
  {
    "text": "right tests that will verify code based on properties that should have so for instance you could specify some property",
    "start": "1213480",
    "end": "1219059"
  },
  {
    "text": "that a particular function should have like this thing should act like the native array module or for all of the",
    "start": "1219059",
    "end": "1224429"
  },
  {
    "text": "integers squaring the integer is the square of the integer is greater than the absolute value at n or equal to the",
    "start": "1224429",
    "end": "1230820"
  },
  {
    "text": "absolute value of the integer and they then generate the equivalent of hundreds or thousands or hundreds of thousands of",
    "start": "1230820",
    "end": "1236760"
  },
  {
    "text": "unit tests for you depending on how you configure them and so this is another example of a tool that lets you bolt on correctness after the fact what's",
    "start": "1236760",
    "end": "1242760"
  },
  {
    "text": "amazing about it is that once it's found a property failure may be our state machine that through some weird thing",
    "start": "1242760",
    "end": "1247980"
  },
  {
    "text": "gets into a state it shouldn't get into it will do something called shrinking so it'll reduce it down to just the",
    "start": "1247980",
    "end": "1253350"
  },
  {
    "text": "smallest number of steps it could find that led to the same bug and then that's what it gives you and so you can see like I do this this this this and this",
    "start": "1253350",
    "end": "1259500"
  },
  {
    "text": "and you hit an invalid state so I've got a video that's linked in my slides that",
    "start": "1259500",
    "end": "1264510"
  },
  {
    "text": "I'll put up somewhere I guess that has John Hughes actually talking at NDC 2013 about how they built a quick",
    "start": "1264510",
    "end": "1270840"
  },
  {
    "text": "check harness for Volvo and it found bugs in basically everybody's implementation of the the protocols",
    "start": "1270840",
    "end": "1277740"
  },
  {
    "text": "where messages go around inside of your vehicle so if you like not having people",
    "start": "1277740",
    "end": "1282840"
  },
  {
    "text": "run over you because of software bugs like there's something to be given to quick check and I'll give you a fun case",
    "start": "1282840",
    "end": "1288660"
  },
  {
    "text": "about this so one of the nastier bugs that he found he actually goes into detail in the video is higher priority",
    "start": "1288660",
    "end": "1296460"
  },
  {
    "text": "messages so like when you're building these things that go over the canvas you specify like this high priority there's low priority and obviously the high for",
    "start": "1296460",
    "end": "1302280"
  },
  {
    "text": "already messages should come first but there is one vendor where because of an intricacy some low priority messages",
    "start": "1302280",
    "end": "1309270"
  },
  {
    "text": "could could go on the bus before the high priority messages which it sounds like okay what I like here well among",
    "start": "1309270",
    "end": "1315059"
  },
  {
    "text": "other things imagine that you have a lot of low priority messages like hey turn up the volume by a little bit and you have a high priority message which is",
    "start": "1315059",
    "end": "1321120"
  },
  {
    "text": "like applied the brakes if you have drive-by-wire brakes the low priority",
    "start": "1321120",
    "end": "1326760"
  },
  {
    "text": "messages would get processed before you high priority message so realize this",
    "start": "1326760",
    "end": "1333059"
  },
  {
    "text": "the consequence of this is an edge case where like when you want to turn up your jams you might actually just not be able",
    "start": "1333059",
    "end": "1338730"
  },
  {
    "text": "to brake and squish that lady but stroller anyway so background to the morbidity and the obligation to get things right",
    "start": "1338730",
    "end": "1343760"
  },
  {
    "text": "that is a thing that could could happen if you write bad software but enough about manslaughter let's talk",
    "start": "1343760",
    "end": "1349000"
  },
  {
    "start": "1348000",
    "end": "1348000"
  },
  {
    "text": "about tracing so it turns out that you'll eventually one figure out what's happening in production and if you're",
    "start": "1349000",
    "end": "1354340"
  },
  {
    "text": "using the Erlang VM they're great great great tools to check this sort of thing out if you're doing a lick sir or Erlang",
    "start": "1354340",
    "end": "1359530"
  },
  {
    "text": "there's this tool called early burly that's really cool it's a java application that connects to Erlang",
    "start": "1359530",
    "end": "1364600"
  },
  {
    "text": "Network and you can just do tracing and other things so if you wanna play with",
    "start": "1364600",
    "end": "1369970"
  },
  {
    "text": "tracing it's a good starting point the interesting thing about tracing in elixir Erlang is you can hook into a",
    "start": "1369970",
    "end": "1375760"
  },
  {
    "text": "production system and you can just find out about calls to a particular function or to a particular function when the",
    "start": "1375760",
    "end": "1380799"
  },
  {
    "text": "third argument is seven or you know anything else really you can think about doing and this is good because doing",
    "start": "1380799",
    "end": "1387820"
  },
  {
    "text": "tracing like lowers the throughput of your application right it's doing more stuff so it's nice to not just like get",
    "start": "1387820",
    "end": "1393820"
  },
  {
    "text": "a log of everything that happens and being able to filter very very tightly the Heroku router is built in Erlang and Freddie bear from their team talks a lot",
    "start": "1393820",
    "end": "1400600"
  },
  {
    "text": "about it in a book he has called Erlang and anger I think anyway so really cool",
    "start": "1400600",
    "end": "1406000"
  },
  {
    "text": "stuff and in Java there's a thing called like virtual VM it's not the same thing but if you want if you aren't using if",
    "start": "1406000",
    "end": "1411549"
  },
  {
    "text": "you're writing job and you have not played with a virtual VM you should play with it it's great I'm not sure about an equivalent tool on the net CLR I'm sure",
    "start": "1411549",
    "end": "1418000"
  },
  {
    "text": "one exists and then there's other just really neat stuff that people ought to talk about more and they don't really so",
    "start": "1418000",
    "end": "1423130"
  },
  {
    "start": "1419000",
    "end": "1419000"
  },
  {
    "text": "there's hype this is the one I wanted to talk about which is high-performance Erlang so the way this works is it compiles an Erlang module into machine",
    "start": "1423130",
    "end": "1428980"
  },
  {
    "text": "code and then that machine code is shipped so early modules are like compiled into this beam file which is",
    "start": "1428980",
    "end": "1434230"
  },
  {
    "text": "like the virtual machine language and it has all these parts and one of the parts is the place where it stores the machine",
    "start": "1434230",
    "end": "1439600"
  },
  {
    "text": "code and so what you do is you have like it compiles the the Erlang version and",
    "start": "1439600",
    "end": "1444909"
  },
  {
    "text": "then the machine code version and so they both get shipped in the same file so that means if you like if you build",
    "start": "1444909",
    "end": "1451090"
  },
  {
    "text": "that if you compile with hype and then you move to a different architecture your app still works the machine code part isn't being run anymore it's back",
    "start": "1451090",
    "end": "1457360"
  },
  {
    "text": "to the interpreted part but that's very cool it's really neat thing I haven't I don't know of anywhere else that does that anyway so this is important in the",
    "start": "1457360",
    "end": "1465070"
  },
  {
    "text": "context of expediency versus correctness because people might bring up that Erlang or leaks are slow and the first",
    "start": "1465070",
    "end": "1471190"
  },
  {
    "text": "certain workloads they definitely write but height gives you like an escape hatch that's fall short of having to",
    "start": "1471190",
    "end": "1476230"
  },
  {
    "text": "just rewrite your inner loop in C so consequently gets the right code you can get the guarantees from dialyzer",
    "start": "1476230",
    "end": "1482500"
  },
  {
    "text": "you can unequip tech on it and then you just you know compile it to machine language and you get better performance anyway I think that's a nice trade off",
    "start": "1482500",
    "end": "1490060"
  },
  {
    "text": "so that's a lick sir and were the lecture I found that I was able to build software and more easily more quickly",
    "start": "1490060",
    "end": "1495730"
  },
  {
    "text": "that was way way way more correct and provably so and when it wasn't correct it didn't everyone because of",
    "start": "1495730",
    "end": "1501910"
  },
  {
    "text": "default tolerance so anyway this is a huge win even though elixir is considered slow my stateless response",
    "start": "1501910",
    "end": "1508300"
  },
  {
    "text": "times drop from like 100 milliseconds on a web server to like 4 milliseconds on average and I know that's a very like",
    "start": "1508300",
    "end": "1515080"
  },
  {
    "text": "abstract context-free number but just in general like doing the same thing and say rails I hadn't drastically it's like",
    "start": "1515080",
    "end": "1521620"
  },
  {
    "text": "25 times worse performance anyway so that's why folks with programming languages can make the backend great but",
    "start": "1521620",
    "end": "1527920"
  },
  {
    "text": "these days you end up having to have users and that means inevitably have to write some sort of front-end code which often means that you have to use",
    "start": "1527920",
    "end": "1533620"
  },
  {
    "text": "JavaScript so in the Expediency in correctness flow javascript air is entirely on the side of expediency and says like yeah correctness is stupid",
    "start": "1533620",
    "end": "1540310"
  },
  {
    "start": "1534000",
    "end": "1534000"
  },
  {
    "text": "anyway so that's why I brought up Facebook's flow at Jas there are now some options for proving",
    "start": "1540310",
    "end": "1547600"
  },
  {
    "text": "correctness on JavaScript code and that's really good it's nice to know that your code does what you think it does so as I mentioned flow is kind of",
    "start": "1547600",
    "end": "1554200"
  },
  {
    "text": "like dialyzer for JavaScript so if you want to move your JavaScript along more towards correctness you should be using this but maybe just don't write",
    "start": "1554200",
    "end": "1561220"
  },
  {
    "text": "JavaScript at all because there's this thing called elm and it's amazing so it's beginner-friendly to a fault it's really really beginner friendly john",
    "start": "1561220",
    "end": "1567280"
  },
  {
    "text": "carmack said that it has the best error messages and everyone should should you try to be like it it's got a",
    "start": "1567280",
    "end": "1572410"
  },
  {
    "text": "hindley-milner cell type system it's instantly reactive strongly typed abs they're very fast without a whole lot of",
    "start": "1572410",
    "end": "1578290"
  },
  {
    "text": "effort the renderer is faster than basically all the other extant frameworks for building friends and",
    "start": "1578290",
    "end": "1583840"
  },
  {
    "text": "JavaScript if focus is really really heavily on favor and correctness over expediency but it's still very fast to",
    "start": "1583840",
    "end": "1589120"
  },
  {
    "text": "build things I'm faster in it than I was in react or anything else and I was broadly considered a fairly fast",
    "start": "1589120",
    "end": "1594130"
  },
  {
    "text": "developer in those languages and it also has manage side effects which are nice if you if you care about that thing",
    "start": "1594130",
    "end": "1599650"
  },
  {
    "text": "that's a good thing so this is a diagram of a typical Ellyn program so just look at that for a little bit you'll you'll",
    "start": "1599650",
    "end": "1605170"
  },
  {
    "text": "figure it out sorry okay so it might seem confusing but the important part is just you provide those",
    "start": "1605170",
    "end": "1610900"
  },
  {
    "text": "green boxes so there's like four functions basically that you provide the man and I'll kind of go through them so the",
    "start": "1610900",
    "end": "1616179"
  },
  {
    "text": "unit function returns your applications initial model state so like your application has some state and then like",
    "start": "1616179",
    "end": "1621370"
  },
  {
    "text": "it looks a certain way view is like a function on the state the update function handles incoming messages and",
    "start": "1621370",
    "end": "1627580"
  },
  {
    "text": "update your model and could send outside effects that's what that command type is those are things that like the commands",
    "start": "1627580",
    "end": "1634450"
  },
  {
    "text": "are like gosh would be nice if somebody would make this HTTP request for me so like their a a request for a thing but",
    "start": "1634450",
    "end": "1640870"
  },
  {
    "text": "not doing the thing and then the runtime handles doing excuse me doing the things and so everything is pure like all of",
    "start": "1640870",
    "end": "1648100"
  },
  {
    "text": "these functions are pure you can't write an impure function actually every function has a single expression that's",
    "start": "1648100",
    "end": "1653110"
  },
  {
    "text": "all the function can be so the type system because that model and command separation in the output of update",
    "start": "1653110",
    "end": "1659889"
  },
  {
    "text": "encourages our forces strict separation between things that change state in a pure fashion and things that ask for",
    "start": "1659889",
    "end": "1666250"
  },
  {
    "text": "outside help anyway so the view function",
    "start": "1666250",
    "end": "1671830"
  },
  {
    "text": "just takes your model as input and it produces say an interface to the user right whether it be HTML buddy mine made",
    "start": "1671830",
    "end": "1678429"
  },
  {
    "text": "a thing that rendered as the view it rendered like this cork synthesizer grid of buttons on a hardware device so",
    "start": "1678429",
    "end": "1685539"
  },
  {
    "text": "anyway when the user interacts with the view they can produce messages and those messages ultimately get routed by the runtime back to your update function so",
    "start": "1685539",
    "end": "1691690"
  },
  {
    "text": "pretty the user produces a message that goes through update you say what to do with that message and then the view updates if the state changed and then",
    "start": "1691690",
    "end": "1698679"
  },
  {
    "text": "you have subscriptions and those are just things that happen in the outside world so you can think of this as WebSockets right somebody sent me a",
    "start": "1698679",
    "end": "1703929"
  },
  {
    "text": "thing I didn't ask for it it just happened or the ticking of a clock right that's why I have a clock down there",
    "start": "1703929",
    "end": "1709990"
  },
  {
    "text": "and then those also produce messages and then all of those same messages get routed through the update function this",
    "start": "1709990",
    "end": "1716409"
  },
  {
    "text": "might seem complicated but we'll see a basic program real quick this is a stereotypical first Elm application so",
    "start": "1716409",
    "end": "1721929"
  },
  {
    "text": "here are the types our model is just an integer we have two possible met so our message is a union type or a algebraic",
    "start": "1721929",
    "end": "1729039"
  },
  {
    "text": "data type it has two possible values increment or decrement",
    "start": "1729039",
    "end": "1734669"
  },
  {
    "text": "so again message is literally every single thing that can happen in our application is you know exists in that",
    "start": "1734669",
    "end": "1741730"
  },
  {
    "text": "type when we get a message it ends up being provided to our update function along with the current model so the",
    "start": "1741730",
    "end": "1747460"
  },
  {
    "text": "first are his message the second target is model and you know the result is a model and we have just a case statement here it",
    "start": "1747460",
    "end": "1752870"
  },
  {
    "text": "says do a case statement on the message if I didn't handle all of the messages this won't compile right so if I just",
    "start": "1752870",
    "end": "1759530"
  },
  {
    "text": "forgot to say what happens in the case that somebody sends me a message that you know has a nil or whatever it would",
    "start": "1759530",
    "end": "1765799"
  },
  {
    "text": "be like you know nothing but then I can't compile my code and it'll tell me but here we're saying look if we get an",
    "start": "1765799",
    "end": "1771710"
  },
  {
    "text": "increment message we just increment that integer that is our model we get that commit message we just decrement it by one you could get these same guarantees",
    "start": "1771710",
    "end": "1779420"
  },
  {
    "text": "in elixir Erlang by using dialyzer and specifying a type for your handle cast functions with like type specs if those",
    "start": "1779420",
    "end": "1785210"
  },
  {
    "text": "words mean anything to you and then enforcing the dialyzer passes in your test test script so you don't get them",
    "start": "1785210",
    "end": "1790460"
  },
  {
    "text": "like it's not like it won't compile but you wouldn't be able to run your tests successfully all right so then we get to our view our view takes the current",
    "start": "1790460",
    "end": "1795890"
  },
  {
    "text": "model and produces that type HTML message that's a parametrized type so HTML can produce something and the thing",
    "start": "1795890",
    "end": "1802250"
  },
  {
    "text": "it can produce is our define type of message and so that means that we know all of the possible things that could",
    "start": "1802250",
    "end": "1808250"
  },
  {
    "text": "come out of this HTML that we're rendering and so we just have a div the HTML stuff basically consists of like a",
    "start": "1808250",
    "end": "1814669"
  },
  {
    "text": "function that is for the type of thing and then a list of attributes in the list of children so we have no attributes on the div and then we have",
    "start": "1814669",
    "end": "1820010"
  },
  {
    "text": "children three of them we have a button when you click it it's decrement it sends out a decrement message and it's",
    "start": "1820010",
    "end": "1825230"
  },
  {
    "text": "like inner containers a text node with a minus sign in it same thing for the plus button although obviously with plus and",
    "start": "1825230",
    "end": "1831440"
  },
  {
    "text": "then in the middle there we have just the models count the current value of",
    "start": "1831440",
    "end": "1836690"
  },
  {
    "text": "the model I should actually say model based on what I said the model was but whatever model not counting is not a thing and then this is kind of how you",
    "start": "1836690",
    "end": "1843950"
  },
  {
    "text": "wire stuff together so this is a beginner program there's two variants of it but basically you say here's my first model here's my view here's my update we",
    "start": "1843950",
    "end": "1850760"
  },
  {
    "text": "have no subscriptions in this application that's the difference between like beginner program and program program anyway so that's it",
    "start": "1850760",
    "end": "1857270"
  },
  {
    "text": "that's how you wire everything together and that basically though that's a data structure that you handle the runtime and so that it knows what to do with the",
    "start": "1857270",
    "end": "1863600"
  },
  {
    "text": "messages that it gets from the view where to send them anyway so if you get one thing out of this talk I want it to be the math at the beginning if you get",
    "start": "1863600",
    "end": "1870080"
  },
  {
    "text": "two things out of this talk I want you to try ohm if you haven't used if you've never felt like just joy at a type system which",
    "start": "1870080",
    "end": "1876770"
  },
  {
    "text": "maybe sounds weird we'll give you that and it'll make you think about programming and in a different way can potentially if",
    "start": "1876770",
    "end": "1882720"
  },
  {
    "text": "you don't already think of it this way and it'll make you want to write more correct code and this is the brief",
    "start": "1882720",
    "end": "1888630"
  },
  {
    "text": "portion of the talk that we refer to as advertising where I mentioned that I happen to run a startup that does daily continuing education on elm elixir react",
    "start": "1888630",
    "end": "1895050"
  },
  {
    "text": "natives with three other things because I want to make people help people they'll talk for a better anyway so if",
    "start": "1895050",
    "end": "1901590"
  },
  {
    "text": "you want to like look into elmer elixir i can help you you can come talk to me later are there any questions so far",
    "start": "1901590",
    "end": "1907710"
  },
  {
    "start": "1906000",
    "end": "1906000"
  },
  {
    "text": "there's no more advertising the talks just a bit moving forward so now is like a really good time if there questions",
    "start": "1907710",
    "end": "1913110"
  },
  {
    "text": "specifically about this part awesome okay so let's talk about computer",
    "start": "1913110",
    "end": "1921330"
  },
  {
    "text": "science before i move on i want to",
    "start": "1921330",
    "end": "1926550"
  },
  {
    "text": "reiterate the two primary technical takeaways i want you to leave with which is slow software is killing people and you should check out home but like why",
    "start": "1926550",
    "end": "1932940"
  },
  {
    "text": "did i decide to give this talk in the first place at all historically i've given very code focused talks that focus",
    "start": "1932940",
    "end": "1938430"
  },
  {
    "text": "almost entirely on like hey we built this thing and like here's some cool stuff that came out of it and let's talk about that very light on the philosophy",
    "start": "1938430",
    "end": "1946230"
  },
  {
    "text": "typically but this is this is john backus if you don't recognize his name you'll definitely recognize a couple of things he's known for so the first is Fortran",
    "start": "1946230",
    "end": "1953220"
  },
  {
    "text": "in 1953 he worked at IBM he convinced his superiors to let him build a language that made it easier work with",
    "start": "1953220",
    "end": "1958650"
  },
  {
    "text": "like math equations than coding assembly directly for trains the imperative language it's been developed ever since",
    "start": "1958650",
    "end": "1964860"
  },
  {
    "text": "1953 it also now supports parallelism and object-oriented programming this",
    "start": "1964860",
    "end": "1969870"
  },
  {
    "text": "strikes me as hilarious because it did not I mean if you like what it looked like originally so different anyway so",
    "start": "1969870",
    "end": "1976260"
  },
  {
    "text": "there's one reason that you might know who yes here's an example Fortran code just so you've seen it before it's extremely imperative there's just a",
    "start": "1976260",
    "end": "1981900"
  },
  {
    "text": "recipe so I always call these recipes it tells the computer what to do step by step so it's essentially just a thin",
    "start": "1981900",
    "end": "1987150"
  },
  {
    "text": "shim on top of assembly but you know easier to write he also invented what's known as the Bacchus normal form or",
    "start": "1987150",
    "end": "1992940"
  },
  {
    "start": "1990000",
    "end": "1990000"
  },
  {
    "text": "discovered probably invented you might hear backus-naur form because there's another guy that also kind of at roughly",
    "start": "1992940",
    "end": "1999060"
  },
  {
    "text": "the same time discovered it it's a means of defining the rules of a context-free grammar and essentially every",
    "start": "1999060",
    "end": "2004100"
  },
  {
    "text": "programming language or markup language that you know has a BNF or an e be enough definition this is part of the",
    "start": "2004100",
    "end": "2010880"
  },
  {
    "text": "BNF grammar for json just so you can have some in front of you RFC's they're littered with BNF",
    "start": "2010880",
    "end": "2016040"
  },
  {
    "text": "definitions and so john backus is responsible for Fortran which is one of the longest-lived if not the longest-lived extent programming",
    "start": "2016040",
    "end": "2022220"
  },
  {
    "text": "language and the means by which people define what what their programming languages are the grammar so he's pretty",
    "start": "2022220",
    "end": "2029960"
  },
  {
    "text": "influential he knows what he's talking about and here if you're sure he'll notice I'm now making what's known as an",
    "start": "2029960",
    "end": "2035750"
  },
  {
    "text": "appeal to Authority he's also extremely familiar with imperative code and his invention of BNF got him won him the",
    "start": "2035750",
    "end": "2041840"
  },
  {
    "text": "1977 Turing award which lady I'm giving a talk titled kin programming be liberated from the von Norman style so",
    "start": "2041840",
    "end": "2047600"
  },
  {
    "start": "2045000",
    "end": "2045000"
  },
  {
    "text": "he was so troubled by what he saw happening as a consequence of this imperative coding that everyone was",
    "start": "2047600",
    "end": "2052940"
  },
  {
    "text": "doing he took the opportunity of his most prominent speech of his life to tear imperative programming to shreds",
    "start": "2052940",
    "end": "2058520"
  },
  {
    "text": "and he does this guy named Freddy and Kowski from The Omen community is the person who linked me to this paper I'd heard of it before but he mentioned that",
    "start": "2058520",
    "end": "2064610"
  },
  {
    "text": "it was you know that had it affected him pretty strongly and so I'd heard about it hadn't read it so I sat down one",
    "start": "2064610",
    "end": "2069919"
  },
  {
    "text": "night with a whole pot of coffee at midnight like one will do it was only 26 pages so I thought it should go pretty",
    "start": "2069919",
    "end": "2076158"
  },
  {
    "text": "quickly but it took me two hours to digest it the first time and since then I've read around ten or twenty at this point more times so it changed my life",
    "start": "2076159",
    "end": "2083450"
  },
  {
    "text": "it's it's a good paper if you want just like to play with papers it's not too dense it's it's easy to get through with",
    "start": "2083450",
    "end": "2089628"
  },
  {
    "text": "sufficient coffee it's worth talking about a few things here before we get into the paper itself too far so first",
    "start": "2089629",
    "end": "2096290"
  },
  {
    "text": "off what does he mean by the von Lehman's style to explain that let me first introduce this guy this is Alan",
    "start": "2096290",
    "end": "2102260"
  },
  {
    "start": "2099000",
    "end": "2099000"
  },
  {
    "text": "Turing in 1936 he came up with the universal Turing machine this is the foundational model that all of our computers are built on it consisted of",
    "start": "2102260",
    "end": "2108800"
  },
  {
    "text": "an infinite tape and a read and write head out of these simple pieces anything that we can do in a computer today right",
    "start": "2108800",
    "end": "2114440"
  },
  {
    "text": "we can do so the one thing you couldn't build from this model was an actual",
    "start": "2114440",
    "end": "2120710"
  },
  {
    "text": "computer because we have a shortage of infinite tapes but that's where this guy comes in in 1945 john von neumann described the",
    "start": "2120710",
    "end": "2127100"
  },
  {
    "start": "2123000",
    "end": "2123000"
  },
  {
    "text": "machine that they had built to do some math for some reason or another and this machine was an actually constructible realization of Turing machine it's",
    "start": "2127100",
    "end": "2133760"
  },
  {
    "text": "philosophically identical to the laptops that everyone has you program it by giving it essentially a recipe of instructions right that's the imperative",
    "start": "2133760",
    "end": "2140270"
  },
  {
    "text": "stall that we're all familiar with that's how it works in essence you have your input you have a CPU you have some",
    "start": "2140270",
    "end": "2146270"
  },
  {
    "text": "memory that it's connected to you read your input does some stuff maybe store stuff in memory and then put",
    "start": "2146270",
    "end": "2151740"
  },
  {
    "text": "stuff out the output oh also those arrows right those are the bus between",
    "start": "2151740",
    "end": "2156810"
  },
  {
    "text": "the CPU and the memory because it has to get data over there somehow anyway back to back us here's some code",
    "start": "2156810",
    "end": "2163320"
  },
  {
    "text": "this is written an algal which is what he developed to be an f4 originally so",
    "start": "2163320",
    "end": "2168810"
  },
  {
    "text": "this is some code that he uses in his paper to make a point if I leave it here for a bit and you look at it and squint",
    "start": "2168810",
    "end": "2173970"
  },
  {
    "text": "real hard you might figure out what it does does anybody know what it does it there's no way I would have figured it out in this time period okay so it took",
    "start": "2173970",
    "end": "2180270"
  },
  {
    "text": "me a long time to figure out it is inner product so it defines inner product and imperative fashion there are few things",
    "start": "2180270",
    "end": "2186360"
  },
  {
    "text": "that back has found interesting and suboptimal about this style of coding and so I'll just kind of list them he said there's there some invisible state",
    "start": "2186360",
    "end": "2192720"
  },
  {
    "text": "that a that being that in they don't appear here and it's being operated over by complex rules this is not",
    "start": "2192720",
    "end": "2198780"
  },
  {
    "text": "hierarchical it's not building up from like these basic simple operations really in a composed fashion it's",
    "start": "2198780",
    "end": "2204960"
  },
  {
    "text": "dynamic and repetitive right that for loop is the essence of repetition right that's what it does you have to work",
    "start": "2204960",
    "end": "2210900"
  },
  {
    "text": "through what it does in your head in order to properly understand it you have to internally handle bookkeeping for mutating that see variable you have to",
    "start": "2210900",
    "end": "2216990"
  },
  {
    "text": "remember that that I variable is incrementing that's not hard right we all learn to do it but we all did have to learn to do it but his biggest gripe",
    "start": "2216990",
    "end": "2223890"
  },
  {
    "text": "was that it computes word of the time because it's mutating the state its modifying something in memory right like",
    "start": "2223890",
    "end": "2230369"
  },
  {
    "text": "you can imagine maybe this fits in the CPU cache or whatever but in general like any time you're mutating state you're going over that bus and putting",
    "start": "2230369",
    "end": "2236340"
  },
  {
    "text": "something in memory or getting something out of memory so yeah in this case it's",
    "start": "2236340",
    "end": "2242220"
  },
  {
    "text": "modifying the high in the see it has named arguments a B and N and that means it only works on vectors of links in though there's nothing that says that",
    "start": "2242220",
    "end": "2248490"
  },
  {
    "text": "you'd have to know that and only on the vectors named a and B and granted we could like handle these with a function",
    "start": "2248490",
    "end": "2254220"
  },
  {
    "text": "call by using named parameters but that too is assignment and so ultimately that",
    "start": "2254220",
    "end": "2259590"
  },
  {
    "text": "means taking data out of memory into the CPU and vice versa so let's talk about how that works again this is the von",
    "start": "2259590",
    "end": "2266070"
  },
  {
    "text": "Neumann machine and that thing at the bottom is the bus so those two errors are what is referred to as the von Neumann bottleneck each bit of mutation",
    "start": "2266070",
    "end": "2272820"
  },
  {
    "text": "that happens essentially move some data across this bus from the CPU to memory and this is slow it's way slower than",
    "start": "2272820",
    "end": "2278400"
  },
  {
    "text": "keeping computation and data on the CPU itself like if you have to go fetch the data it takes time way more time than doing the math his complaint was that most of",
    "start": "2278400",
    "end": "2286239"
  },
  {
    "text": "programming in the imperative style revolved around bookkeeping and that meant that we were going over this all the time",
    "start": "2286239",
    "end": "2292119"
  },
  {
    "text": "and that's that's slow both physically and it's low for the program raised you think about it as you reason about all",
    "start": "2292119",
    "end": "2297640"
  },
  {
    "text": "the data interchange because you have to think like you know what was that variable name or like if ivory if I've",
    "start": "2297640",
    "end": "2302680"
  },
  {
    "text": "used that variable for then I'm overriding it and oops that's gonna cause a bug but not an obvious bug it's",
    "start": "2302680",
    "end": "2307959"
  },
  {
    "text": "some insidious bug that just kind of happens later anyway so my whole life I heard about the vonroenn bottleneck but",
    "start": "2307959",
    "end": "2313900"
  },
  {
    "text": "this is the paper where he coined the term and he explicitly talks about it as also being this bottleneck for the",
    "start": "2313900",
    "end": "2318999"
  },
  {
    "text": "programmers mind and I'd never heard anyone tell me that before so this is why I think it's valuable to read papers because it is you have to spend a lot of",
    "start": "2318999",
    "end": "2325959"
  },
  {
    "text": "time like learning to write code learning to do the mutation in your head to read it successfully and before I buy",
    "start": "2325959",
    "end": "2331660"
  },
  {
    "text": "the paper I thought he was only talking about the physical bottleneck so there's a different way to write the same inner product function this is just some",
    "start": "2331660",
    "end": "2337569"
  },
  {
    "start": "2334000",
    "end": "2334000"
  },
  {
    "text": "pseudocode you can imagine that each carriage return is just compose like compose this function with the next one so this is a point free notation form of",
    "start": "2337569",
    "end": "2344619"
  },
  {
    "text": "inner product so it's a pretty straightforward way to implement inner",
    "start": "2344619",
    "end": "2350019"
  },
  {
    "text": "product you kind of have to have dealt with point free programming style for it to be quick to read I think but it is",
    "start": "2350019",
    "end": "2357609"
  },
  {
    "text": "small and you can see that it's sort of composable right we've built up these pieces and we compose them by composing",
    "start": "2357609",
    "end": "2364989"
  },
  {
    "text": "the function in this what's called and that gives us this bigger function but what's interesting about building",
    "start": "2364989",
    "end": "2370719"
  },
  {
    "text": "something this way is when you make a recipe you've you know what the",
    "start": "2370719",
    "end": "2377650"
  },
  {
    "text": "relationships are between these things in your head and then you write out a recipe and if the computer does it then",
    "start": "2377650",
    "end": "2383049"
  },
  {
    "text": "the outcome you desire happens but you've lost you know it's a lossy it's basically a lossy compression form to",
    "start": "2383049",
    "end": "2388690"
  },
  {
    "text": "turn it into this imperative code because the computer can't infer what you were trying to do with your recipe",
    "start": "2388690",
    "end": "2393910"
  },
  {
    "text": "right you know mentally like I want to zip the things together on a map over that and multiply the two things and",
    "start": "2393910",
    "end": "2399819"
  },
  {
    "text": "then I want to reduce that by adding but when you do it the other way like to get",
    "start": "2399819",
    "end": "2405729"
  },
  {
    "text": "optimizations that you could get for not for free but way easier if the relationships between these things were",
    "start": "2405729",
    "end": "2411160"
  },
  {
    "text": "like actually still in the code we end up spending centuries of like master-student time",
    "start": "2411160",
    "end": "2418420"
  },
  {
    "text": "adding edge case optimizations to the java virtual machine anyway so what do",
    "start": "2418420",
    "end": "2424810"
  },
  {
    "text": "you found interesting about this is there's no implicit state required a b and n don't appear there are no variables there's no assignment at all",
    "start": "2424810",
    "end": "2430859"
  },
  {
    "text": "it's hierarchical it's constructed of functions that are composed together and then three very simple functions using two sort of even simpler functions and",
    "start": "2430859",
    "end": "2438150"
  },
  {
    "text": "you can as long as you're familiar with reading the style you can understand what it's doing without really executing it mentally in your head so it says what",
    "start": "2438150",
    "end": "2445359"
  },
  {
    "text": "it's doing is it's a couple of lists it maps a multiplication across them and it reduces them with plus the other code",
    "start": "2445359",
    "end": "2451720"
  },
  {
    "text": "didn't read that way you couldn't read the code and know for sure what it was and you could figure it out but it didn't just lay it out there for you and",
    "start": "2451720",
    "end": "2458410"
  },
  {
    "text": "it's not repetitive it contains three steps the previous thing contained in step so the size of the vector changed",
    "start": "2458410",
    "end": "2464800"
  },
  {
    "text": "how many times you mutated data right this doesn't do that so it's just just",
    "start": "2464800",
    "end": "2470320"
  },
  {
    "text": "better it's fewer steps it's easier to read I know it's a loaded term to call this a more correct version of that",
    "start": "2470320",
    "end": "2476380"
  },
  {
    "text": "function I don't think this is actually a value judgment I think it is like very clearly more correct but that's up to",
    "start": "2476380",
    "end": "2483430"
  },
  {
    "text": "you to decide the fact remains though that here we're not describing sequence operations and recipe for describing a",
    "start": "2483430",
    "end": "2489490"
  },
  {
    "text": "relationship between these functions and that is not lossy compression right that's we keep that so recap the things",
    "start": "2489490",
    "end": "2497320"
  },
  {
    "start": "2497000",
    "end": "2497000"
  },
  {
    "text": "that are important here there's no assignment we're not concerning ourselves with the bookkeeping across the funnel and bottleneck and no point",
    "start": "2497320",
    "end": "2503200"
  },
  {
    "text": "do we as programmers have to think about what variable holds but data make sure we increment in make sure we don't have",
    "start": "2503200",
    "end": "2509650"
  },
  {
    "text": "an off by one error none of that happens we just describe the relationship that this function has with other functions",
    "start": "2509650",
    "end": "2517290"
  },
  {
    "text": "so you can't accidentally shadow a variable you can't have your off by one errors you can't have yeah but this one",
    "start": "2517290",
    "end": "2524260"
  },
  {
    "text": "you can have a division by zero because it's not using division anyway so I can almost guarantee that like shadowing a",
    "start": "2524260",
    "end": "2530020"
  },
  {
    "text": "variable or you know overriding a variable accidentally or off by one errors have cost you or your employer",
    "start": "2530020",
    "end": "2535570"
  },
  {
    "text": "employer money and time whether you're aware of it or not because we described",
    "start": "2535570",
    "end": "2541359"
  },
  {
    "start": "2540000",
    "end": "2540000"
  },
  {
    "text": "it the way we did it's strictly composable so we don't need to define a function that takes named arguments or anything like that we can just like",
    "start": "2541359",
    "end": "2547300"
  },
  {
    "text": "compose these functions and that's the thing we have each of the individual bits are also composable so if we want",
    "start": "2547300",
    "end": "2553060"
  },
  {
    "text": "to go something that's very like inner product but instead of multiplication it has some other function you just like",
    "start": "2553060",
    "end": "2558070"
  },
  {
    "text": "you use the first two bits like and then just change that that sort of top piece we don't have to fill it with like",
    "start": "2558070",
    "end": "2564400"
  },
  {
    "text": "dependency injection or plug-in architectures or build this complex object Factory to make things that are",
    "start": "2564400",
    "end": "2569410"
  },
  {
    "text": "composable and then we get back to the professor at the blackboard because Bacchus spoke about being able to do",
    "start": "2569410",
    "end": "2574660"
  },
  {
    "start": "2571000",
    "end": "2571000"
  },
  {
    "text": "algebra on programs and this is really what he actually cared about so being able to do higher-order reasoning on our",
    "start": "2574660",
    "end": "2580510"
  },
  {
    "text": "programs themselves so here we define the function in terms of fundamental mathematical operations and that's what",
    "start": "2580510",
    "end": "2586270"
  },
  {
    "text": "you do algebra already so we can do algebra on this this type of program but if you have a recipe right and period of",
    "start": "2586270",
    "end": "2591970"
  },
  {
    "text": "stuff I think of as a recipe if I said to you my goal is to do algebra on recipes you would think that's the",
    "start": "2591970",
    "end": "2597610"
  },
  {
    "text": "craziest freaking thing I've ever heard and it shouldn't be and that was this concern right you should be able to do I",
    "start": "2597610",
    "end": "2602680"
  },
  {
    "text": "mean programming his math we can do algebra on like mathematical structures so why can't we do algebra on programs",
    "start": "2602680",
    "end": "2609460"
  },
  {
    "text": "and this was a concern his in 77 and we're still basically doing the same thing yeah so that's it basically this",
    "start": "2609460",
    "end": "2619660"
  },
  {
    "text": "is that's the reason that I think of this style is more correct ultimately so what's the point of the talk there there are three things that I want you to take",
    "start": "2619660",
    "end": "2625480"
  },
  {
    "start": "2623000",
    "end": "2623000"
  },
  {
    "text": "away from the talk and if you've been paying attention you'll note that I've lied to you twice no because I've changed the number of things I wanted you to take away so how does it feel how",
    "start": "2625480",
    "end": "2631840"
  },
  {
    "text": "do you feel about that anyway this is the real note this is the real number I swear first stop killing people you have an",
    "start": "2631840",
    "end": "2638440"
  },
  {
    "start": "2635000",
    "end": "2635000"
  },
  {
    "text": "obligation to build your software better if we as a community don't take our obligation seriously we're gonna be in a",
    "start": "2638440",
    "end": "2644050"
  },
  {
    "text": "world of hurt so politicians will start regulating us right if we have essentially a bridge failure we will have regulation of our industry or worse",
    "start": "2644050",
    "end": "2651460"
  },
  {
    "text": "we could be forced to write JavaScript if you can come to grips with the naked like sheer cruel truth of my math then",
    "start": "2651460",
    "end": "2658090"
  },
  {
    "text": "you already know that you have an obligation to do stuff better I think a great way to stop doing it to do stuff",
    "start": "2658090",
    "end": "2663970"
  },
  {
    "text": "better would be like to learn now more elixir feel free to do it via daily drip but that's up to you murderer and then secondly give them a try it's an amazing",
    "start": "2663970",
    "end": "2671110"
  },
  {
    "start": "2668000",
    "end": "2668000"
  },
  {
    "text": "language it'll if you have not dealt with things like Haskell or you know something like that it will change the way that you",
    "start": "2671110",
    "end": "2676600"
  },
  {
    "text": "think it'll also change the way you think about tooling because it's tooling is really really good",
    "start": "2676600",
    "end": "2682240"
  },
  {
    "text": "the beginner experience is better than any other language I've ever used which",
    "start": "2682240",
    "end": "2687940"
  },
  {
    "text": "is good because like I kind of vaguely knew Haskell but not really and now I",
    "start": "2687940",
    "end": "2693339"
  },
  {
    "text": "know how school way better because I learned Elm it'll also teach you that you can take some time upfront and encode like the",
    "start": "2693339",
    "end": "2700000"
  },
  {
    "text": "types in your system like encode semantics into the types that make it impossible to do to ever have a certain",
    "start": "2700000",
    "end": "2705790"
  },
  {
    "text": "state right imagine you have the software equivalent of a bridge right and it in some way like if you had this",
    "start": "2705790",
    "end": "2713320"
  },
  {
    "text": "off by one area right there be a problem or the equivalent so like I haven't have another example that is in my talk tomorrow but the point is you can build",
    "start": "2713320",
    "end": "2719589"
  },
  {
    "text": "your type such that impossible states or states that would be really bad just can't be in or it can't be expressed in",
    "start": "2719589",
    "end": "2726580"
  },
  {
    "text": "your types and so you can't write code that would get you into the mess as long as you encode stuff properly by you know",
    "start": "2726580",
    "end": "2732520"
  },
  {
    "text": "thinking a little harder upfront about your types you can avoid you can just type away edge cases like just they're",
    "start": "2732520",
    "end": "2738670"
  },
  {
    "text": "gone you never have to think about them again this is really awesome it'll give you confidence in your code that you don't have if you don't have a type",
    "start": "2738670",
    "end": "2744760"
  },
  {
    "text": "system like this anyway and finally think functionally it's still possible to write in period of code in most functional languages you can't really do",
    "start": "2744760",
    "end": "2751869"
  },
  {
    "start": "2746000",
    "end": "2746000"
  },
  {
    "text": "it in Elm but it looks like you can it does make it a lot harder to even have it look like you can though you can do",
    "start": "2751869",
    "end": "2757450"
  },
  {
    "text": "it in the lick sir I often do write things that are more imperative an elixir I'm trying to get better and then",
    "start": "2757450",
    "end": "2763720"
  },
  {
    "text": "so you could write less in period of stall code you can both on correctness starting out with unit tests make sure",
    "start": "2763720",
    "end": "2770260"
  },
  {
    "text": "you run them automatically every time you commit anything you know you should have a CI server ideally you should have a CI server that protects your master",
    "start": "2770260",
    "end": "2776230"
  },
  {
    "text": "branch we can't even merge code into our master branch unless it passes tests so and then you can add tooling like",
    "start": "2776230",
    "end": "2782020"
  },
  {
    "text": "dialyzer a quick check or whatever the equivalents are in your language and you can gain even more confidence in your code so we can do better we have an",
    "start": "2782020",
    "end": "2788440"
  },
  {
    "text": "obligation to do better so let's make the world suck a little less together thank you any questions alrighty then",
    "start": "2788440",
    "end": "2797740"
  },
  {
    "text": "that is my talk [Applause]",
    "start": "2797740",
    "end": "2803350"
  }
]