[
  {
    "text": "okay well we'll kick off thank you all for coming and it's really nice to be ya",
    "start": "4609",
    "end": "10830"
  },
  {
    "text": "and had the opportunity to speak at this conference before but it seems pretty awesome good hi my name's Ben Stopford I",
    "start": "10830",
    "end": "18690"
  },
  {
    "text": "work at this company called complement so that's the company of that basically",
    "start": "18690",
    "end": "23970"
  },
  {
    "text": "sits behind a patch of Kafka which is an open-source streaming platform whatever",
    "start": "23970",
    "end": "29609"
  },
  {
    "text": "be talking a little bit about that today on and off and today really gonna talk",
    "start": "29609",
    "end": "34620"
  },
  {
    "text": "about the intersection between two different worlds and the world of kind of business systems micro services that",
    "start": "34620",
    "end": "41490"
  },
  {
    "text": "sort of thing and the world of stream processing which really come kind of comes from a very different area or a",
    "start": "41490",
    "end": "48750"
  },
  {
    "text": "different stance with a different set of requirements and but the two when",
    "start": "48750",
    "end": "55080"
  },
  {
    "text": "combined are pretty interesting hopefully you'll see that today so when",
    "start": "55080",
    "end": "61320"
  },
  {
    "text": "we build software on a kind of daily basis we tend to have a couple of",
    "start": "61320",
    "end": "67229"
  },
  {
    "text": "different masters there's kind of this very obvious master which is that we want to build features you know so",
    "start": "67229",
    "end": "74130"
  },
  {
    "text": "you're you're you're rare users come to you and they want they say you want to build a report or maybe put something on",
    "start": "74130",
    "end": "80369"
  },
  {
    "text": "a screen these kind of things are very visceral they're very obvious this is why you go and sit at your desk in the",
    "start": "80369",
    "end": "86069"
  },
  {
    "text": "morning and kind of write code but at the same time you also tend to think",
    "start": "86069",
    "end": "92990"
  },
  {
    "text": "maybe more subtly about some other goals things like things that make your",
    "start": "92990",
    "end": "99030"
  },
  {
    "text": "software work not just today but also in the future when we think about software lasting overtime we're not really",
    "start": "99030",
    "end": "105569"
  },
  {
    "text": "thinking about those files sitting in github on it on a file system well obviously they could sit there",
    "start": "105569",
    "end": "111119"
  },
  {
    "text": "indefinitely we're thinking about their ability to evolve over time and we",
    "start": "111119",
    "end": "116310"
  },
  {
    "text": "actually do this intuitively all the time every time you write software you're thinking about you know carefully",
    "start": "116310",
    "end": "122549"
  },
  {
    "text": "modularizing your code so that it can be reused making it understandable so that when you come back to it later you can",
    "start": "122549",
    "end": "128610"
  },
  {
    "text": "actually work out what what it was supposed to do likewise you'll do things like write tests I'm said whilst you might write tests to",
    "start": "128610",
    "end": "135550"
  },
  {
    "text": "assert the behavior today really the value of testing comes in the future its protect its future proofing your",
    "start": "135550",
    "end": "141790"
  },
  {
    "text": "software same is true for continuous delivery continuous integration all of these practices are about kind of",
    "start": "141790",
    "end": "148930"
  },
  {
    "text": "thinking about and preparing for the future but when we look we think about software architecture putting different",
    "start": "148930",
    "end": "157090"
  },
  {
    "text": "pieces together to create a system um we actually don't tend to think about inks",
    "start": "157090",
    "end": "162459"
  },
  {
    "text": "in the same way when we don't always think about it in the same way so I think for me a lot of this this talk is",
    "start": "162459",
    "end": "170019"
  },
  {
    "text": "about trying to work out how to build systems that last their systems that we",
    "start": "170019",
    "end": "175180"
  },
  {
    "text": "can actually evolve in the same way that we evolve our code in our code base it's",
    "start": "175180",
    "end": "181299"
  },
  {
    "text": "very much about this idea of evolution software and the systems we are right",
    "start": "181299",
    "end": "186420"
  },
  {
    "text": "evolving over time so to take a slightly",
    "start": "186420",
    "end": "193480"
  },
  {
    "text": "different tack I wanted to talk a bit about stream processing anyone do stream",
    "start": "193480",
    "end": "199690"
  },
  {
    "text": "processing today got a few okay so very",
    "start": "199690",
    "end": "205000"
  },
  {
    "text": "high level this is kind of an example of a stream processing system so you probably all have a mobile phone in your",
    "start": "205000",
    "end": "210040"
  },
  {
    "text": "pocket maybe it's an Apple one or a Google one or whatever and this that's kind of a",
    "start": "210040",
    "end": "215470"
  },
  {
    "text": "sort of canonical stream processing use case and the reason is is it's kind of like a billion phones out there and they're all transmitting messages back",
    "start": "215470",
    "end": "222069"
  },
  {
    "text": "to your various different providers or applications that you're using so if you're like Apple or Google you'll be",
    "start": "222069",
    "end": "228130"
  },
  {
    "text": "recording like every time somebody hope it's an application or every time the application crashes and these are this",
    "start": "228130",
    "end": "234130"
  },
  {
    "text": "creates a very sort of high throughput workload of actually very small messages right lots and lots of small messages",
    "start": "234130",
    "end": "240430"
  },
  {
    "text": "coming from lots of different handsets around the world so how do you kind of deal with that kind of problem well you",
    "start": "240430",
    "end": "245919"
  },
  {
    "text": "probably use something like a streaming platform so you'll put the data into Kafka so Kafka is providing a buffer",
    "start": "245919",
    "end": "251139"
  },
  {
    "text": "which is going to buffer all that information up and then the stream processing layer is something which",
    "start": "251139",
    "end": "257019"
  },
  {
    "text": "allows you to perform a computation as these events arise so a few if it's",
    "start": "257019",
    "end": "263169"
  },
  {
    "text": "let's say we want to do something very simple like work out some statistics for how much how many how many people are",
    "start": "263169",
    "end": "269820"
  },
  {
    "text": "using a certain application we should sort of put those into HDFS or maybe some other file system and then every so",
    "start": "269820",
    "end": "277139"
  },
  {
    "text": "often we could kind of run a batch job over that and do the count the computation that we want to do but",
    "start": "277139",
    "end": "283560"
  },
  {
    "text": "typically we don't want to do those kind of batch computations because they're so slow you'll get a result maybe you want",
    "start": "283560",
    "end": "289320"
  },
  {
    "text": "a day for these kind of workloads so streaming is really about the idea that we want to go to compute those kind of",
    "start": "289320",
    "end": "296820"
  },
  {
    "text": "results as continuously as they happen and when you um the tool set that you",
    "start": "296820",
    "end": "303330"
  },
  {
    "text": "use to address this kind of problem is slightly different so has a few elements",
    "start": "303330",
    "end": "309449"
  },
  {
    "text": "first it has a high throughput messaging system you need something that's gonna scale out and something which is going to provide your high of high",
    "start": "309449",
    "end": "314520"
  },
  {
    "text": "availability the streaming layer itself is optimized to deal with this kind of",
    "start": "314520",
    "end": "321389"
  },
  {
    "text": "problem and that means an area needs to better to compute incrementally but also",
    "start": "321389",
    "end": "326610"
  },
  {
    "text": "it needs to map manage state one of the things that it actually does is it gives you the opportunity to create stateful",
    "start": "326610",
    "end": "333530"
  },
  {
    "text": "stateful stream processing nodes so that you can localize the state inside the",
    "start": "333530",
    "end": "338550"
  },
  {
    "text": "stream processing node so that it can operate very efficiently and then finally you're typically in this kind of",
    "start": "338550",
    "end": "343800"
  },
  {
    "text": "architecture you have some kind of serving there which you're attached a GUI to and query directly you can actually query a stream processor",
    "start": "343800",
    "end": "350190"
  },
  {
    "text": "directly and if you want to also kept your streams for example for provides the interface but here I've used",
    "start": "350190",
    "end": "355979"
  },
  {
    "text": "Cassandra which is another pattern it's pretty common so let's take a little",
    "start": "355979",
    "end": "362370"
  },
  {
    "text": "example imagine we have a number of users around the world who were just using their credit cards and every time",
    "start": "362370",
    "end": "370320"
  },
  {
    "text": "you use your credit card you get an authorization attempt and we're interested in finding potentially",
    "start": "370320",
    "end": "375539"
  },
  {
    "text": "fraudulent activity so we have a in input into this particular computation",
    "start": "375539",
    "end": "381990"
  },
  {
    "text": "is authorization attempts people using their card and what comes out is this potential a potential for a fraud and we",
    "start": "381990",
    "end": "388199"
  },
  {
    "text": "can do that very simply by at a very simple level by counting the number of",
    "start": "388199",
    "end": "393270"
  },
  {
    "text": "temps in some particular amount of time and this is expressed as something",
    "start": "393270",
    "end": "398520"
  },
  {
    "text": "called K sequel looks a bit like sequel in a database as you can tell except it runs on a",
    "start": "398520",
    "end": "403869"
  },
  {
    "text": "streaming stream processing engine so we can start with our input a stream of",
    "start": "403869",
    "end": "411759"
  },
  {
    "text": "authorization attempts from there we're going to create an output stream of potential fraud possible fraud fortunate",
    "start": "411759",
    "end": "420339"
  },
  {
    "text": "events then we're gonna select the card number and then the count and importantly this is kind of where it",
    "start": "420339",
    "end": "427119"
  },
  {
    "text": "differs from your standard database sequel we're gonna do that over in this case a 5-minute window so that means",
    "start": "427119",
    "end": "434019"
  },
  {
    "text": "that we're gonna get a rolling average over that a rolling computation over that 5-minute window and then we're",
    "start": "434019",
    "end": "440319"
  },
  {
    "text": "gonna add a group by the card number and then we're gonna filter that based on a count of more than three it's a very",
    "start": "440319",
    "end": "447610"
  },
  {
    "text": "very simple computation which is going to run continuously and that's kind of like a very canonical stream processing",
    "start": "447610",
    "end": "454689"
  },
  {
    "text": "use case the stream processing really is a tool for dealing with data in flight",
    "start": "454689",
    "end": "460509"
  },
  {
    "text": "so specifically manipulating it joining different streams together and then",
    "start": "460509",
    "end": "466059"
  },
  {
    "text": "adding computation on top of that this",
    "start": "466059",
    "end": "471069"
  },
  {
    "text": "is what's this got to do with business business applications you might wonder well today we tend to build ecosystems",
    "start": "471069",
    "end": "477309"
  },
  {
    "text": "increasingly we build these kind of a key ecosystems so subber has been around",
    "start": "477309",
    "end": "483309"
  },
  {
    "text": "for a long time well over a decade now micro services which are in many ways a reinvention of sowe're in a in the",
    "start": "483309",
    "end": "490809"
  },
  {
    "text": "context of a really if evolution of hardware and software same kind of",
    "start": "490809",
    "end": "497949"
  },
  {
    "text": "principles and then things like event-driven architectures but in all of these what we're really doing is we're",
    "start": "497949",
    "end": "503669"
  },
  {
    "text": "compartmentalizing our problem into specific concerns which match our domain",
    "start": "503669",
    "end": "509969"
  },
  {
    "text": "so here I'm gonna keep using this retail context throughout this presentation so",
    "start": "509969",
    "end": "515439"
  },
  {
    "text": "we have an order service and we have a customer service and it's a customer service were obviously hold our record",
    "start": "515439",
    "end": "521110"
  },
  {
    "text": "of customers and the stock service will hold our inventory of what's inside bar our warehouse and each of these services",
    "start": "521110",
    "end": "529929"
  },
  {
    "text": "has a specific responsibility should be pretty obvious so the the problem with these kind of",
    "start": "529929",
    "end": "535600"
  },
  {
    "text": "architectures tends to be around data none of those questions are actually particularly in pinyin ated around data",
    "start": "535600",
    "end": "541779"
  },
  {
    "text": "like so it was always just like well if you need some information you just go to a service and get it and that kind of",
    "start": "541779",
    "end": "547810"
  },
  {
    "text": "makes sense for a certain number of use cases but anything that's more data centric actually becomes quite difficult",
    "start": "547810",
    "end": "554399"
  },
  {
    "text": "so you can imagine even in a retail context I have a set of these different",
    "start": "554399",
    "end": "561279"
  },
  {
    "text": "services these are kind of is going to form into these islands which in many",
    "start": "561279",
    "end": "566500"
  },
  {
    "text": "ways makes sense but whole variety of these different services are going to need access to these core data sets so",
    "start": "566500",
    "end": "574240"
  },
  {
    "text": "they're going to need to have some information and order information and the product catalog in order to do that",
    "start": "574240",
    "end": "579970"
  },
  {
    "text": "work so where this becomes a little bit",
    "start": "579970",
    "end": "585670"
  },
  {
    "text": "more tricky is when we start to have slightly more data in terms of operations right so if we're doing",
    "start": "585670",
    "end": "591250"
  },
  {
    "text": "something like really simple like displaying something on a dashboard just like a lookup table it's pretty simple",
    "start": "591250",
    "end": "597510"
  },
  {
    "text": "but as soon as we do something is a little bit more data intensive let's say we just have like a grid where you can",
    "start": "597510",
    "end": "602860"
  },
  {
    "text": "scroll up and down and in the background you're hitting a variety of different services you have to scroll that fast",
    "start": "602860",
    "end": "608680"
  },
  {
    "text": "before hitting all of these different services particularly if you're doing a kind of join which involves accessing",
    "start": "608680",
    "end": "614320"
  },
  {
    "text": "maybe orders and then payments and then customers becomes actually quite difficult to manage you have to sort of",
    "start": "614320",
    "end": "619510"
  },
  {
    "text": "thinking about batching and then caching things locally and then polling for their bit but for new updates etc etc so",
    "start": "619510",
    "end": "626170"
  },
  {
    "text": "these kind of slightly more data intensive operations turn out to be quite difficult to perform so one very",
    "start": "626170",
    "end": "633339"
  },
  {
    "text": "simple solution is just to have one big database actually a lot of companies do",
    "start": "633339",
    "end": "639610"
  },
  {
    "text": "this quite a lot of companies have a have some kind of central operational store um it's a tricky person to get",
    "start": "639610",
    "end": "646000"
  },
  {
    "text": "right obviously intuitively it's son of quite nice it's like I've got all my services I can just put all my data in the",
    "start": "646000",
    "end": "651490"
  },
  {
    "text": "database everyone can access it it sounds like it's gonna make a lot of sense in a static sense like today that",
    "start": "651490",
    "end": "658480"
  },
  {
    "text": "will probably work but what the pain that comes with a shared database is actually it's is this ever",
    "start": "658480",
    "end": "664710"
  },
  {
    "text": "thing as each of these services changes over time because they are independently",
    "start": "664710",
    "end": "670470"
  },
  {
    "text": "deployable they typically typically gonna be run by different teams the database provides this-this-this",
    "start": "670470",
    "end": "676500"
  },
  {
    "text": "relatively high coupling point which makes it difficult to evolve so databases provide this kind of very rich",
    "start": "676500",
    "end": "683340"
  },
  {
    "text": "form of coupling so what this kind of leads to is two different forces which",
    "start": "683340",
    "end": "691080"
  },
  {
    "text": "compete in the design of the software that we build so on one side we're",
    "start": "691080",
    "end": "697950"
  },
  {
    "text": "taught to encapsulate all done this right all done all kind of oo modeling etc etc and this makes a lot of sense so",
    "start": "697950",
    "end": "706500"
  },
  {
    "text": "let's say let's say we have a single sign-on service it has a an interface nice and neat interface could authorize",
    "start": "706500",
    "end": "713310"
  },
  {
    "text": "and I have some business service which calls that I use encapsulation to hide the state and behavior this sits inside",
    "start": "713310",
    "end": "718890"
  },
  {
    "text": "my service makes a lot of sense nice clean interface not too much for people to couple to I can basically change the",
    "start": "718890",
    "end": "725820"
  },
  {
    "text": "internals of that without it being too much of a problem all kind of makes a lot of sense loose coupling is good",
    "start": "725820",
    "end": "732980"
  },
  {
    "text": "problem with data systems is they don't really have anything to do with encapsulation in fact they do exactly",
    "start": "732980",
    "end": "739110"
  },
  {
    "text": "the opposite a database does everything it can to make it the data that it holds",
    "start": "739110",
    "end": "746580"
  },
  {
    "text": "as easy for you to get at as possible actually provides this wonderful wealth of tooling which allows you to slice and",
    "start": "746580",
    "end": "752760"
  },
  {
    "text": "dice data in a variety different ways in fact you can awfully you know you can reform it in two different views you can",
    "start": "752760",
    "end": "758310"
  },
  {
    "text": "make it look completely different to the core data set it has it's literally the antithesis of encapsulation so if you",
    "start": "758310",
    "end": "766620"
  },
  {
    "text": "can imagine like a service on the left-hand side it has babel on the inside and it's doing its best to",
    "start": "766620",
    "end": "772950"
  },
  {
    "text": "encapsulate that to not expose it to the outside world and the reason it's doing that is because it wants to be able to",
    "start": "772950",
    "end": "779490"
  },
  {
    "text": "change it wants to control over that and it was to limit the interface that exposes but a database is exactly the",
    "start": "779490",
    "end": "786030"
  },
  {
    "text": "opposite and has some data reside it actually provides amplifying contracts which is richer than me it than the data",
    "start": "786030",
    "end": "792660"
  },
  {
    "text": "that it holds internally so you kind of get this competition",
    "start": "792660",
    "end": "798090"
  },
  {
    "text": "between these two different forces one side encapsulation is encouraging you to like limit your interface so you reduce",
    "start": "798090",
    "end": "804570"
  },
  {
    "text": "coupling but then you have these data systems which are actually amplifying providing an amplifying interface and",
    "start": "804570",
    "end": "812430"
  },
  {
    "text": "that's not to say data systems are bad we need data systems we need these amplifying interfaces because they do useful work they allow us to introspect",
    "start": "812430",
    "end": "820110"
  },
  {
    "text": "data to build different types of data centric problems for our users so we",
    "start": "820110",
    "end": "827880"
  },
  {
    "text": "actually need both of these things but we have to understand how they sit in our in in the systems that we built so",
    "start": "827880",
    "end": "834840"
  },
  {
    "text": "this leads to this kind of dichotomy one side data systems are very much about",
    "start": "834840",
    "end": "840120"
  },
  {
    "text": "exposing data and that allows you to get on with your job today whereas in both services are really",
    "start": "840120",
    "end": "847080"
  },
  {
    "text": "about hiding it which is about protecting yourself against potential",
    "start": "847080",
    "end": "853350"
  },
  {
    "text": "coupling in the future which allows your system to evolve so these two forces basically fight against one another and",
    "start": "853350",
    "end": "860850"
  },
  {
    "text": "the systems that we built so it said quite sensibly really actually mostly",
    "start": "860850",
    "end": "868560"
  },
  {
    "text": "from experience and the microservices shouldn't share a database who's heard this show hands oh very knowledgeable",
    "start": "868560",
    "end": "877170"
  },
  {
    "text": "crowd I like it so Sam Lehman talks about it in his book it's talked about in the incest all over the place I'm not",
    "start": "877170",
    "end": "884340"
  },
  {
    "text": "going to go into it in too much detail other than what I've said already but suffice to say that it's a sensible path",
    "start": "884340",
    "end": "890370"
  },
  {
    "text": "the pattern and at the heart of it is this is this tension so we want all the",
    "start": "890370",
    "end": "895860"
  },
  {
    "text": "good stuff that comes with the database and bility to slice and dice data but we",
    "start": "895860",
    "end": "902490"
  },
  {
    "text": "don't particularly want to share our database with anyone else kind of know that right we'll kind of somebody says how can I have access to your database",
    "start": "902490",
    "end": "908430"
  },
  {
    "text": "you're like are you gonna couple yourself to it I'm not sure it'll really want you to do that but you also need to",
    "start": "908430",
    "end": "916230"
  },
  {
    "text": "share datasets in a sensible way so we need some mechanism of doing it okay so",
    "start": "916230",
    "end": "921990"
  },
  {
    "text": "that's all pretty abstract let's try and take a little example I'm gonna keep using as I said this retail example so",
    "start": "921990",
    "end": "929760"
  },
  {
    "text": "how do we share the between services today well that's",
    "start": "929760",
    "end": "938729"
  },
  {
    "text": "really strange sorry my picture looks different to that picture so we have a",
    "start": "938729",
    "end": "944249"
  },
  {
    "text": "web server and we have an order to service a shipping service and a customer service and this is a very",
    "start": "944249",
    "end": "949589"
  },
  {
    "text": "simple use case so you can imagine this could be Amazon and where you're buying whatever you walk bored of life Amazon",
    "start": "949589",
    "end": "955019"
  },
  {
    "text": "or maybe Apple you're buying an iPad and you have a web server and you order service gonna manage the orders the customer service is gonna hold your",
    "start": "955019",
    "end": "961139"
  },
  {
    "text": "customer of information and the shipping service is the thing that's gonna basically make sure that that iPad makes",
    "start": "961139",
    "end": "966359"
  },
  {
    "text": "it from the warehouse all the way over to your door and you can right then go off and enjoy your new Apple product so",
    "start": "966359",
    "end": "975109"
  },
  {
    "text": "let's say we do this with rest if we do",
    "start": "975109",
    "end": "980369"
  },
  {
    "text": "it with rest then the web server will submit an order and that will go to the order service and the shipping service",
    "start": "980369",
    "end": "986789"
  },
  {
    "text": "would expose an interface called ship order and so the order service will call the shipping service and then it would",
    "start": "986789",
    "end": "993359"
  },
  {
    "text": "need to look up need to know where to send your iPad to so it would make a call to the customer service get customer get your address and then the",
    "start": "993359",
    "end": "999809"
  },
  {
    "text": "shipping process would continue that's all pretty simple intuitive why would I want anything else well we can do this",
    "start": "999809",
    "end": "1008239"
  },
  {
    "text": "with an event-driven model and this has some slightly different trade-offs",
    "start": "1008239",
    "end": "1014209"
  },
  {
    "text": "involved what you're worth looking at so again we submit the order but in a pure",
    "start": "1014209",
    "end": "1021139"
  },
  {
    "text": "event-driven model we don't services don't actually talk to one another and this is gonna make sense in a minute so",
    "start": "1021139",
    "end": "1028038"
  },
  {
    "text": "in a pure event-driven model we just talk events so the order service actually raises an event that says this",
    "start": "1028039",
    "end": "1036620"
  },
  {
    "text": "order was created or requested um yeah she doesn't know where it's going it's",
    "start": "1036620",
    "end": "1042288"
  },
  {
    "text": "going to the shipping service but it doesn't know that the shipping service decides to describe subscribes to these",
    "start": "1042289",
    "end": "1047808"
  },
  {
    "text": "these are order events because it knows it's in its interested in them and it",
    "start": "1047809",
    "end": "1052820"
  },
  {
    "text": "continues to kind of off to do its processing because it's triggered by the",
    "start": "1052820",
    "end": "1058340"
  },
  {
    "text": "notification that sits inside this event on the other side we have this customer service",
    "start": "1058340",
    "end": "1063960"
  },
  {
    "text": "and customers information is a little bit different because it's not about things that are happening now it's about",
    "start": "1063960",
    "end": "1070230"
  },
  {
    "text": "things that happened in the past like the last time you updated your customer information was probably the last time",
    "start": "1070230",
    "end": "1076740"
  },
  {
    "text": "you moved house which was maybe a couple of years ago so the customer event is",
    "start": "1076740",
    "end": "1082200"
  },
  {
    "text": "not something that we can analyze in real time but this kind of what this",
    "start": "1082200",
    "end": "1087749"
  },
  {
    "text": "this these two sides of this particular problem expose are that really events",
    "start": "1087749",
    "end": "1093629"
  },
  {
    "text": "have two hats so an event is a notification it's a call to action all",
    "start": "1093629",
    "end": "1101970"
  },
  {
    "text": "right so this event happened this business event happened do you want to do something about it but at the same",
    "start": "1101970",
    "end": "1107070"
  },
  {
    "text": "time inside that event is the information itself so it's also state",
    "start": "1107070",
    "end": "1112169"
  },
  {
    "text": "transfer there's a way of moving data from one service to another so in this",
    "start": "1112169",
    "end": "1117450"
  },
  {
    "text": "case you can actually use the customer service to omit customer service can omit events and those events can be",
    "start": "1117450",
    "end": "1122940"
  },
  {
    "text": "collected over time inside a database inside the shipping service which it could then query locally so um the core",
    "start": "1122940",
    "end": "1132389"
  },
  {
    "text": "point here is that we can use either of these patterns and we can mix them up as we see fit so we can just use events the",
    "start": "1132389",
    "end": "1140100"
  },
  {
    "text": "notification in which case the order service comes in it raises that event and the shipping service which is doubly",
    "start": "1140100",
    "end": "1145740"
  },
  {
    "text": "decoupled from the order service because the order service doesn't know anything about the shipping service now I can just react to it but it can still maybe",
    "start": "1145740",
    "end": "1153899"
  },
  {
    "text": "make a rest call to look at your customer information directly to the customer service alternatively we can",
    "start": "1153899",
    "end": "1165720"
  },
  {
    "text": "use this events for replication process we're still actually using the notification for the order service but",
    "start": "1165720",
    "end": "1171509"
  },
  {
    "text": "we can use the fact that events actually allow state to move to recreate the",
    "start": "1171509",
    "end": "1178200"
  },
  {
    "text": "customer data set inside a database inside the shipping service so actually using data sets for events for locality",
    "start": "1178200",
    "end": "1186690"
  },
  {
    "text": "in this case this is useful for a few different reasons one is it's actually",
    "start": "1186690",
    "end": "1192029"
  },
  {
    "text": "going to make it much faster for the shipping service service to potentially access that data but also this is particularly useful if",
    "start": "1192029",
    "end": "1198830"
  },
  {
    "text": "you're moving over let's say a different geography or maybe you're running on a mobile phone etc etc so events have two",
    "start": "1198830",
    "end": "1206120"
  },
  {
    "text": "hats on one side their notification but on the other side they can be used for",
    "start": "1206120",
    "end": "1212059"
  },
  {
    "text": "data replication so events are a key to",
    "start": "1212059",
    "end": "1217360"
  },
  {
    "text": "scalable service ecosystems because they're actually decoupling the various different components inside them and",
    "start": "1217360",
    "end": "1224230"
  },
  {
    "text": "streaming is a toolset which allows you to deal with these events as they move",
    "start": "1224230",
    "end": "1230830"
  },
  {
    "text": "so let's take a quick look at what a streaming platform is it has a few",
    "start": "1230860",
    "end": "1236210"
  },
  {
    "text": "different components it has very simple interfaces producers and consumers which",
    "start": "1236210",
    "end": "1241370"
  },
  {
    "text": "you can access in a pretty much any language you can think of we have a",
    "start": "1241370",
    "end": "1246830"
  },
  {
    "text": "bunch of of clients which we support in net and go etcetera etcetera and there's",
    "start": "1246830",
    "end": "1252110"
  },
  {
    "text": "a whole bunch of community ones for Kafka there are connectors which basically just allow you to get in and",
    "start": "1252110",
    "end": "1257900"
  },
  {
    "text": "stay tuned out of a database and then there's this stream processing API and which is literally just another API but",
    "start": "1257900",
    "end": "1264049"
  },
  {
    "text": "actually provides this very sort of much more functional interface for dealing",
    "start": "1264049",
    "end": "1269929"
  },
  {
    "text": "with events and a synchronicity let's look at these quickly we'll start with the log so Kafka is a",
    "start": "1269929",
    "end": "1278570"
  },
  {
    "text": "distributed log that's actually the project I work on on a day to day basis and you can just think of it a bit like",
    "start": "1278570",
    "end": "1285590"
  },
  {
    "text": "a messaging system think of it being really being designed for that kind of use case that we talked about at the",
    "start": "1285590",
    "end": "1290630"
  },
  {
    "text": "start the one we had the mobile phones missing so we want to store and process",
    "start": "1290630",
    "end": "1297919"
  },
  {
    "text": "large numbers of small events and the reason that use case works so well is that it has no there is literally no",
    "start": "1297919",
    "end": "1305270"
  },
  {
    "text": "bottleneck within the system I can have a very very big topic I can shard data on the way in it can be held on a whole",
    "start": "1305270",
    "end": "1311390"
  },
  {
    "text": "bunch of different machines where it's actually how it ranged is different queues and we can arrange how data is is",
    "start": "1311390",
    "end": "1317179"
  },
  {
    "text": "sharded to arrange for strong ordering guarantees and then many different",
    "start": "1317179",
    "end": "1322250"
  },
  {
    "text": "consuming processes can share that one topic and process them at the same time",
    "start": "1322250",
    "end": "1330340"
  },
  {
    "text": "but some other quite nice properties so the log can actually be used as a storage system can hold it mean you can",
    "start": "1330360",
    "end": "1337540"
  },
  {
    "text": "put hundreds of terabytes into Kafka no problem even with compacted topics for sugar and",
    "start": "1337540",
    "end": "1342790"
  },
  {
    "text": "to talk about in a minute when the nice properties of this is that you can actually then rewind the log so you can",
    "start": "1342790",
    "end": "1349030"
  },
  {
    "text": "store these events which holds everything matter it's like every order that ever came in or every customer that",
    "start": "1349030",
    "end": "1354730"
  },
  {
    "text": "ever came in and you can rewind those events and replay so that's really useful for this pattern called event",
    "start": "1354730",
    "end": "1361120"
  },
  {
    "text": "sourcing sometimes and we're going to be",
    "start": "1361120",
    "end": "1366460"
  },
  {
    "text": "talking more about this this idea of moving data around and when you move data around a whole datasets around you",
    "start": "1366460",
    "end": "1373600"
  },
  {
    "text": "actually want to make them smaller and the way you make it smaller is actually to make a log which is every single of",
    "start": "1373600",
    "end": "1380200"
  },
  {
    "text": "change that ever happened like like a version history you know and get you",
    "start": "1380200",
    "end": "1386230"
  },
  {
    "text": "want to collapse that just to the latest version which basically looks like a database table so you collapse it by key",
    "start": "1386230",
    "end": "1391679"
  },
  {
    "text": "come that's what a compacted topic does so it allows you can basically it will compact that data sit down so you just",
    "start": "1391679",
    "end": "1397240"
  },
  {
    "text": "have the latest value for each key and it effectively would marry exactly with the database table so um that's the log",
    "start": "1397240",
    "end": "1407169"
  },
  {
    "text": "we have these connectors if you've used yes bees before this is actually pretty",
    "start": "1407169",
    "end": "1413350"
  },
  {
    "text": "similar pattern it's a mechanism that allows you to get data out of a whole variety of different databases and",
    "start": "1413350",
    "end": "1418809"
  },
  {
    "text": "getting very quickly into Kafka or alternately pulled there out of Kafka and put it into pretty much any database",
    "start": "1418809",
    "end": "1424510"
  },
  {
    "text": "that you you choose please don't use catechol like in the ESB you can some",
    "start": "1424510",
    "end": "1430059"
  },
  {
    "text": "people do but it's typically not a great pattern but these are these tools are useful nonetheless and then finally does",
    "start": "1430059",
    "end": "1438309"
  },
  {
    "text": "this this idea of the streaming engine which is in some ways a little bit harder to understand but it's actually",
    "start": "1438309",
    "end": "1444070"
  },
  {
    "text": "pretty useful so there's a whole bunch of streaming engines out there I'm gonna talk about the one that literally ships",
    "start": "1444070",
    "end": "1449710"
  },
  {
    "text": "with caf-co which is called K streams and this is basically they're all roughly equivalent in many ways although",
    "start": "1449710",
    "end": "1455620"
  },
  {
    "text": "you'll see each have their own sweet spot but effectively they're a database",
    "start": "1455620",
    "end": "1461200"
  },
  {
    "text": "engine for data that moving allows you to basically manage data as events and actually importantly",
    "start": "1461200",
    "end": "1467080"
  },
  {
    "text": "marry the concept of events and tables so a very high level it's continuously",
    "start": "1467080",
    "end": "1474219"
  },
  {
    "text": "running query the query that we started with where we had a bunch of credit card",
    "start": "1474219",
    "end": "1480719"
  },
  {
    "text": "people using credit card authorization attempts and we're constantly computed",
    "start": "1480719",
    "end": "1486039"
  },
  {
    "text": "in this query and outputting a result to another stream that's the kind of canonical use case so much like a",
    "start": "1486039",
    "end": "1494200"
  },
  {
    "text": "database you can do joined you can create views which is very useful for mapping whatever the data model is on",
    "start": "1494200",
    "end": "1499989"
  },
  {
    "text": "the wire to your internal domain model before you start adding sort of further predicate so aggregates etc you can",
    "start": "1499989",
    "end": "1507070"
  },
  {
    "text": "filter you can aggregate and all over you can add a window which is how you",
    "start": "1507070",
    "end": "1512409"
  },
  {
    "text": "deal with a infinite string so how you reason about an infinite string but one",
    "start": "1512409",
    "end": "1519219"
  },
  {
    "text": "of the things that I think most powerful about the streaming model certainly the straight stateful stream processing",
    "start": "1519219",
    "end": "1525519"
  },
  {
    "text": "engines is their ability to deal with both streams and tables the reason that",
    "start": "1525519",
    "end": "1530830"
  },
  {
    "text": "this is it is important is while several a lot I like a lot of use cases which fit perfectly into pure streaming most",
    "start": "1530830",
    "end": "1538419"
  },
  {
    "text": "use cases are some kind of combination of the two so you have like an event stream that you want to react to but you",
    "start": "1538419",
    "end": "1543909"
  },
  {
    "text": "also want to kind of look something up if you want to look up customer information whilst you're processing a stream of orders so stream processing",
    "start": "1543909",
    "end": "1551469"
  },
  {
    "text": "engines let you basically manage these two things I can have a topic which is represents an infinite stream and I can",
    "start": "1551469",
    "end": "1557320"
  },
  {
    "text": "make a reference to a table as I go along so the other nice thing about",
    "start": "1557320",
    "end": "1564549"
  },
  {
    "text": "stream processing engine is it handles a synchronicity it does all this for you",
    "start": "1564549",
    "end": "1570239"
  },
  {
    "text": "so let's take a little example we have imagine we have two services order",
    "start": "1570239",
    "end": "1575859"
  },
  {
    "text": "service and payment service on the left hand side the orders service and they're both are certain submitting events and",
    "start": "1575859",
    "end": "1582070"
  },
  {
    "text": "you can Majan like when you create an order like you're buying an iPad your message will be sent to the order",
    "start": "1582070",
    "end": "1589149"
  },
  {
    "text": "service and you also make a message to the payment service and there's probably some ordering around that whichever way you did it it probably",
    "start": "1589149",
    "end": "1595470"
  },
  {
    "text": "create the payment and then you create the order but actually you can't reason about that in an asynchronous system",
    "start": "1595470",
    "end": "1601090"
  },
  {
    "text": "they could turn up in any order because the whole process is asynchronous one might be delayed for",
    "start": "1601090",
    "end": "1606520"
  },
  {
    "text": "whatever reason you could get a race condition so if we want to write a very simple program that just sends the user",
    "start": "1606520",
    "end": "1614170"
  },
  {
    "text": "an email to say congratulations you bought a new iPad it cost you this much etc etc we need to join these two things",
    "start": "1614170",
    "end": "1620740"
  },
  {
    "text": "together and the way that works is the email that can basically subscribed using the caffeine streams API or",
    "start": "1620740",
    "end": "1627610"
  },
  {
    "text": "whatever you're using can subscribe to these two different streams and what",
    "start": "1627610",
    "end": "1633760"
  },
  {
    "text": "this stream processing API will actually do is it will buffer for some amount of time that you configure and/or buffer so",
    "start": "1633760",
    "end": "1640450"
  },
  {
    "text": "that you can do that join and not have to worry about which event came first handles that asynchronicity for you so",
    "start": "1640450",
    "end": "1647950"
  },
  {
    "text": "when the payment and the order event are both present then your email code will be triggered and you can send email so",
    "start": "1647950",
    "end": "1656920"
  },
  {
    "text": "that's kind of how you buffer and join streams it's very simple so you can do",
    "start": "1656920",
    "end": "1663250"
  },
  {
    "text": "this in case equal if you're off the JVM if you're on the JVM you can use the",
    "start": "1663250",
    "end": "1668800"
  },
  {
    "text": "clavicle streams API it's basically a few lines of code create stream the the",
    "start": "1668800",
    "end": "1673870"
  },
  {
    "text": "names in quotes are the topic names and then the join is just obviously a couple of lines and we're just calling that",
    "start": "1673870",
    "end": "1680290"
  },
  {
    "text": "email service that email function to send an email but this table thing as I",
    "start": "1680290",
    "end": "1688300"
  },
  {
    "text": "said it's pretty interesting and what is a table really well firstly I think of",
    "start": "1688300",
    "end": "1693310"
  },
  {
    "text": "the use case so we're adding let's add the customer service in so let's say we need the email needs to know where to",
    "start": "1693310",
    "end": "1698440"
  },
  {
    "text": "send or email your email is on your customer information which is located inside the customer service and we",
    "start": "1698440",
    "end": "1703900"
  },
  {
    "text": "wanted to kind of do this in a streaming way what we'd actually do is create a table of customers inside her email and",
    "start": "1703900",
    "end": "1711809"
  },
  {
    "text": "what a table is is actually the same thing it's the event stream which is",
    "start": "1711870",
    "end": "1717640"
  },
  {
    "text": "held inside Casca its materialized locally but instead of just retaining maybe five minutes of data you retain",
    "start": "1717640",
    "end": "1724000"
  },
  {
    "text": "the whole dataset and you actually use one of those compacted topics we talked about earlier do this so you don't have to move too",
    "start": "1724000",
    "end": "1729070"
  },
  {
    "text": "much data and often also filter it so a table is really just a stream with",
    "start": "1729070",
    "end": "1735550"
  },
  {
    "text": "infinite pretension again very simple to",
    "start": "1735550",
    "end": "1741100"
  },
  {
    "text": "do is one line of code instead of builder dot stream it's build a table and the API deals with all the rest of",
    "start": "1741100",
    "end": "1747100"
  },
  {
    "text": "it and then when we do our join its effectively exactly the same thing again we use a slightly we use a to pool this",
    "start": "1747100",
    "end": "1753400"
  },
  {
    "text": "time instead of a key value but effective we're just gonna get if the emailer will be called every time the",
    "start": "1753400",
    "end": "1758950"
  },
  {
    "text": "order the payment and the customer information is all available so what really doing is materializing a",
    "start": "1758950",
    "end": "1766480"
  },
  {
    "text": "kind of view streaming view which our code is reacting to so we can also do",
    "start": "1766480",
    "end": "1773830"
  },
  {
    "text": "this I said with case equal with case equal you were basically have a separation so the the case equal engine",
    "start": "1773830",
    "end": "1779590"
  },
  {
    "text": "you just run as a separate node or a sidecar and that does the computation create an output the stream which would",
    "start": "1779590",
    "end": "1785770"
  },
  {
    "text": "then drive the the emailer and I might write an email note of C sharp or whatever I like so because of this has",
    "start": "1785770",
    "end": "1795610"
  },
  {
    "text": "got a background and stream processing we can also scale these things out we can have high availability of our",
    "start": "1795610",
    "end": "1800680"
  },
  {
    "text": "services one goes down the other one's just gonna naturally take over all of that good stuff just falls out of the out of the box so really if we step back",
    "start": "1800680",
    "end": "1810010"
  },
  {
    "text": "a little bit stream processing is about two things it's about processing data",
    "start": "1810010",
    "end": "1815710"
  },
  {
    "text": "incrementally relaxing two events so that's their notification hat of an",
    "start": "1815710",
    "end": "1821380"
  },
  {
    "text": "event but it's also about moving data to wherever it's needed that tool also and",
    "start": "1821380",
    "end": "1829030"
  },
  {
    "text": "that's really that data replication hat that you get with events so we can",
    "start": "1829030",
    "end": "1834700"
  },
  {
    "text": "localize the datasets that we can process it quickly or actually also as we'll see because that gives us autonomy",
    "start": "1834700",
    "end": "1840970"
  },
  {
    "text": "which allows us to evolve independently of the rest of the ecosystem",
    "start": "1840970",
    "end": "1847860"
  },
  {
    "text": "so let's walk through some strep steps to building a more realistic slightly",
    "start": "1849480",
    "end": "1857020"
  },
  {
    "text": "more realistic streaming ecosystem with these tools there's ten ten steps here",
    "start": "1857020",
    "end": "1864490"
  },
  {
    "text": "to building this little ecosystem first one is basically to take responsibility for the past it's actually pretty",
    "start": "1864490",
    "end": "1870880"
  },
  {
    "text": "unusual that you see someone start a completely greenfield project normally",
    "start": "1870880",
    "end": "1876309"
  },
  {
    "text": "if you're completely greenfield you're a startup in which case you should probably build building a monolith anyway because you need to get something",
    "start": "1876309",
    "end": "1882400"
  },
  {
    "text": "out the door quickly and microservices and other the distributed patents do come at a cost",
    "start": "1882400",
    "end": "1887669"
  },
  {
    "text": "so you'll typically have something if you're working a big company there'll be some legacy somewhere they start with a",
    "start": "1887669",
    "end": "1894460"
  },
  {
    "text": "very simple monolithic application three tiers and let's say we evolve forwards",
    "start": "1894460",
    "end": "1901240"
  },
  {
    "text": "so we're gonna split out an order service this is kind of our path to try and extend our architecture so it's it",
    "start": "1901240",
    "end": "1909070"
  },
  {
    "text": "has different components which are independently deployable so one of the",
    "start": "1909070",
    "end": "1917440"
  },
  {
    "text": "things we kind of want to aim for in this model is having an asynchronous call and we want to have synchronous",
    "start": "1917440",
    "end": "1923590"
  },
  {
    "text": "interfaces on edge services so internally we're gonna raise events rather than talking directly to services",
    "start": "1923590",
    "end": "1929799"
  },
  {
    "text": "because it allows the different services to remain decoupled so instead of talking directly to the order service we",
    "start": "1929799",
    "end": "1935470"
  },
  {
    "text": "can making a request through a broker so",
    "start": "1935470",
    "end": "1942400"
  },
  {
    "text": "the web server can send an order received event and I guess picked up by the order service and then the order",
    "start": "1942400",
    "end": "1949419"
  },
  {
    "text": "service would then validate the order and then create an order validated event which we picked up back by the web",
    "start": "1949419",
    "end": "1954940"
  },
  {
    "text": "server",
    "start": "1954940",
    "end": "1957149"
  },
  {
    "text": "next we can use the connects interface typically using CDC though although we don't have to to evolve away from some",
    "start": "1962410",
    "end": "1969710"
  },
  {
    "text": "legacy system so really this this tends to be pretty useful because you typically have a database which is",
    "start": "1969710",
    "end": "1975590"
  },
  {
    "text": "already filled with like useful information and a lot of that you just need to get into this stream processing",
    "start": "1975590",
    "end": "1982070"
  },
  {
    "text": "pattern and so we can attach oops we've so we can attach a connect",
    "start": "1982070",
    "end": "1989420"
  },
  {
    "text": "interface on to the back of the database I mention that term CDC there are a",
    "start": "1989420",
    "end": "1994580"
  },
  {
    "text": "number of connectors which implement this things will change data capture and there are a number which just basically",
    "start": "1994580",
    "end": "2000010"
  },
  {
    "text": "go through a front door or for some of the no sequel databases do something that's in between but CDC is actually a",
    "start": "2000010",
    "end": "2006340"
  },
  {
    "text": "really efficient way of getting data out of a database so a database at its core on has a transaction log which records",
    "start": "2006340",
    "end": "2013870"
  },
  {
    "text": "basically it's much very similar to a log in Kafka it should record every single change that it ever does a CDC",
    "start": "2013870",
    "end": "2021040"
  },
  {
    "text": "base it just like tails that log and turns it into events so when you're",
    "start": "2021040",
    "end": "2026290"
  },
  {
    "text": "picking a seem to be when you have a legacy application you need to pick a sensible scene where you can kind of",
    "start": "2026290",
    "end": "2031630"
  },
  {
    "text": "like carve the workflow away I actually see people do it in a data layer quite a",
    "start": "2031630",
    "end": "2037420"
  },
  {
    "text": "lot but actually a really good way to do this which a lot of people use this just to pick a seam that's inside the",
    "start": "2037420",
    "end": "2044020"
  },
  {
    "text": "database itself so you literally just turn a database table into an event stream so in this case we've pulled the",
    "start": "2044020",
    "end": "2051940"
  },
  {
    "text": "data set of products which maybe we don't want to build a service for right now we're quite happy maintaining products inside of the legacy",
    "start": "2051940",
    "end": "2057879"
  },
  {
    "text": "application we've pulled that into Kafka and then we can start to use that",
    "start": "2057880",
    "end": "2063610"
  },
  {
    "text": "Product data set in our evolving ecosystem so next we want to make use of",
    "start": "2063610",
    "end": "2072100"
  },
  {
    "text": "schemas schemas are very important where you have independently deployable",
    "start": "2072100",
    "end": "2078669"
  },
  {
    "text": "services so if you just like have one deploy when one deployable unit is just",
    "start": "2078669",
    "end": "2084129"
  },
  {
    "text": "one app you can often get away without using these but really schemas are the",
    "start": "2084130",
    "end": "2089679"
  },
  {
    "text": "API for an event-driven system the thing that described the contract so if I have an ecosystem where I have",
    "start": "2089679",
    "end": "2098920"
  },
  {
    "text": "independently deployable surfaces then I have to I need some way to kind of",
    "start": "2098920",
    "end": "2104080"
  },
  {
    "text": "reason about this contract or this event so you want to use some kind of schema to describe the messages to flow and",
    "start": "2104080",
    "end": "2113430"
  },
  {
    "text": "really to allow you to kind of evolve that over time so if I if I attach a new",
    "start": "2113430",
    "end": "2119140"
  },
  {
    "text": "service this ecosystem I want to know that that data set is always going to be accurately compatible so cathica ships",
    "start": "2119140",
    "end": "2126580"
  },
  {
    "text": "with a thing called schema registry in the conflict distribution or you can use",
    "start": "2126580",
    "end": "2132850"
  },
  {
    "text": "your own so you schemas next is rice is",
    "start": "2132850",
    "end": "2138400"
  },
  {
    "text": "applying the single writer principle it's the reason you need to do this is",
    "start": "2138400",
    "end": "2144130"
  },
  {
    "text": "that in this kind of model you have no global consistency point we didn't use a",
    "start": "2144130",
    "end": "2149890"
  },
  {
    "text": "big share database which provides a global global consistency point so we need some other way to reason about",
    "start": "2149890",
    "end": "2156300"
  },
  {
    "text": "consistency and ordering and a good way to do this is with it so basically",
    "start": "2156300",
    "end": "2161950"
  },
  {
    "text": "assign responsibility for effectively what is it what actually is a mutation",
    "start": "2161950",
    "end": "2167580"
  },
  {
    "text": "logically it's mutation to a single service so the order service in this",
    "start": "2167580",
    "end": "2172960"
  },
  {
    "text": "case is responsible for progressing the workflow of an order forwards in time so",
    "start": "2172960",
    "end": "2181000"
  },
  {
    "text": "no one else is able to do that writing",
    "start": "2181000",
    "end": "2185010"
  },
  {
    "text": "and this gives us a word is effectively a kind of causal consistency model so as",
    "start": "2188270",
    "end": "2194950"
  },
  {
    "text": "assert the service on the left creates an events it kind of flows through CAF curve the validation occurs inside the",
    "start": "2194950",
    "end": "2202220"
  },
  {
    "text": "order service the order service creates a new record said it's validated and maybe that flows out to this email",
    "start": "2202220",
    "end": "2207470"
  },
  {
    "text": "service the important point here is that actually each of these services is",
    "start": "2207470",
    "end": "2212630"
  },
  {
    "text": "separated in time actually disconnected in time but the event flow because it is",
    "start": "2212630",
    "end": "2219050"
  },
  {
    "text": "record by record in an ordered queue is each each of these services basically is",
    "start": "2219050",
    "end": "2226280"
  },
  {
    "text": "a consistent view of changes as they happen so this gives an element of slack in the",
    "start": "2226280",
    "end": "2232520"
  },
  {
    "text": "system but at the same time allows you to manage consistency and we'll give an example of that in a little bit so a",
    "start": "2232520",
    "end": "2241310"
  },
  {
    "text": "single rices does a couple of things firstly it creates a local consistency point in the absence of global",
    "start": "2241310",
    "end": "2247099"
  },
  {
    "text": "consistency also it it actually makes it much easier to do things like change schemas later",
    "start": "2247099",
    "end": "2252170"
  },
  {
    "text": "if you have seven different services changing a particular event stream it's",
    "start": "2252170",
    "end": "2257210"
  },
  {
    "text": "actually quite hard to to upgrade that schema because each of them ice to kind of go as a single the upgrade tends to",
    "start": "2257210",
    "end": "2264589"
  },
  {
    "text": "have to happen as a single release the",
    "start": "2264589",
    "end": "2270470"
  },
  {
    "text": "six we can store data sets inside the log so as I said Kathy I can basically",
    "start": "2270470",
    "end": "2278540"
  },
  {
    "text": "store data indefinitely anybody can use these compacted topics to to create a more like tabular like view so what that",
    "start": "2278540",
    "end": "2284690"
  },
  {
    "text": "really means is that we can externalise these data sets so these are shared data sets which different services need to",
    "start": "2284690",
    "end": "2290780"
  },
  {
    "text": "use inside the log and that gives us a nice plug ability to the architecture let's say we want to build a new service",
    "start": "2290780",
    "end": "2297890"
  },
  {
    "text": "we're doing repricing so we might make use of an existing event stream and we",
    "start": "2297890",
    "end": "2306349"
  },
  {
    "text": "might also make need to make reference to the product data set and we can join",
    "start": "2306349",
    "end": "2311810"
  },
  {
    "text": "these two things together inside a new pricing service and obviously because it's an adventure of a model we can just plug this right in so in this case the",
    "start": "2311810",
    "end": "2319130"
  },
  {
    "text": "event stream would be something we would react to but the products would be an entire data set which we were just materialized locally either in",
    "start": "2319130",
    "end": "2324890"
  },
  {
    "text": "a database or inside the stream processing engine as we see fit so it's",
    "start": "2324890",
    "end": "2330950"
  },
  {
    "text": "very easy to plug new services into this kind of model it's kind of like a real",
    "start": "2330950",
    "end": "2336200"
  },
  {
    "text": "advantage to this type of approach and then we can evolve this forward so we",
    "start": "2336200",
    "end": "2342380"
  },
  {
    "text": "start to create this kind of single source of truth so again we don't really have a shared database we have any",
    "start": "2342380",
    "end": "2348560"
  },
  {
    "text": "shared functionality for analyzing data we're really just sharing these data sets as streams there's things where we",
    "start": "2348560",
    "end": "2356000"
  },
  {
    "text": "react to or as datasets which of which we can take in their entirety how do you",
    "start": "2356000",
    "end": "2363590"
  },
  {
    "text": "actually query a log obviously do need to do these to run queries against the data at their stores there it's stored",
    "start": "2363590",
    "end": "2369680"
  },
  {
    "text": "in there that's what we actually start moving data to code and this should be a",
    "start": "2369680",
    "end": "2377810"
  },
  {
    "text": "little bit unintuitive for a long time we have not done this for a long time we",
    "start": "2377810",
    "end": "2382910"
  },
  {
    "text": "have always moved code to data and that made a lot of sense right they just heavy code slides which should obviously",
    "start": "2382910",
    "end": "2388370"
  },
  {
    "text": "move a codes to data that's kind of the database mantra one of the problems we're taking that mantra is that if you",
    "start": "2388370",
    "end": "2394820"
  },
  {
    "text": "continue doing it forever you would basically build all of your systems inside a database that would be the",
    "start": "2394820",
    "end": "2401330"
  },
  {
    "text": "logical conclusion right we have a big ecosystem made by Oracle and we would all write our code inside that and",
    "start": "2401330",
    "end": "2407840"
  },
  {
    "text": "typically we don't want to do that other than the fact that you probably don't want to write business code in sequel",
    "start": "2407840",
    "end": "2413800"
  },
  {
    "text": "you even if you did you probably won't want to maintain it inside the database because it'll be really hard to to",
    "start": "2413800",
    "end": "2419780"
  },
  {
    "text": "manage that right you need to be on a managed code yourself so you have the freedom to pick the tools that you want",
    "start": "2419780",
    "end": "2425210"
  },
  {
    "text": "to use and have independent deployment cycles so the one of the nice things",
    "start": "2425210",
    "end": "2430640"
  },
  {
    "text": "about the streaming approach is it gives you this flexibility you can of course move code to data you can also move data",
    "start": "2430640",
    "end": "2437300"
  },
  {
    "text": "to code so let's see how that fits into our little evolving ecosystem it's in",
    "start": "2437300",
    "end": "2444080"
  },
  {
    "text": "this case we might have the stock information so what what they - what",
    "start": "2444080",
    "end": "2449140"
  },
  {
    "text": "items we have in the warehouse and the order service is going to need to do some validation one of the things is",
    "start": "2449140",
    "end": "2454910"
  },
  {
    "text": "going to do is validate to work out whether or not there are enough iPads in stock for you to fulfill your order so we can",
    "start": "2454910",
    "end": "2462350"
  },
  {
    "text": "materialize that data set inside the order service so that it can query it locally and importantly this gives the",
    "start": "2462350",
    "end": "2468890"
  },
  {
    "text": "order service autonomy over its data set so we can manage its own release cycle",
    "start": "2468890",
    "end": "2475540"
  },
  {
    "text": "the second trick is because the data sets actually stored inside kafka we",
    "start": "2477760",
    "end": "2484460"
  },
  {
    "text": "don't need to absorb the whole thing into the order service we actually only take the data that we need this is",
    "start": "2484460",
    "end": "2490730"
  },
  {
    "text": "actually pretty useful so to validate have whether you have enough iPads in stock you need two pieces of information you need to know the product code of the",
    "start": "2490730",
    "end": "2497660"
  },
  {
    "text": "iPad and you need to know how many items there are in the warehouse so you basically got a key and what is",
    "start": "2497660",
    "end": "2503410"
  },
  {
    "text": "effectively an integer or if your Amazon is probably a long so this idea of data",
    "start": "2503410",
    "end": "2511700"
  },
  {
    "text": "movement analysis optimize the local locality but it also gives our services",
    "start": "2511700",
    "end": "2516740"
  },
  {
    "text": "autonomy because they're internalizing that data set where they have control",
    "start": "2516740",
    "end": "2522460"
  },
  {
    "text": "but the sites on the cert on the second side on the other side we need to also be realistic about this actually moving",
    "start": "2522460",
    "end": "2528620"
  },
  {
    "text": "data over the network isn't typically the bottom net you've got a distributed log behind you you can move this that's really fast you can dis rate your",
    "start": "2528620",
    "end": "2534350"
  },
  {
    "text": "services over many different machines they actually the thing that tends to be the limiting point is indexing the cost",
    "start": "2534350",
    "end": "2542360"
  },
  {
    "text": "of indexing is actually relatively high so if you use a database which has got a using a large number of indexes like",
    "start": "2542360",
    "end": "2548480"
  },
  {
    "text": "something like elastic search is pretty slow to update that tends to be the limiting factor so we can get around",
    "start": "2548480",
    "end": "2555710"
  },
  {
    "text": "this by either making indexes in leaving indexes in memory or scaling out several",
    "start": "2555710",
    "end": "2561410"
  },
  {
    "text": "multiple machines or by this trick of keeping data sets relatively focused because we can always go back and get",
    "start": "2561410",
    "end": "2566900"
  },
  {
    "text": "more if we need it so using the log as a",
    "start": "2566900",
    "end": "2572390"
  },
  {
    "text": "database this basically means event sourcing but we can actually use whilst we were so we",
    "start": "2572390",
    "end": "2580850"
  },
  {
    "text": "pulled this stock data set into the order service but if you order service just wants to say lightweight",
    "start": "2580850",
    "end": "2588640"
  },
  {
    "text": "and doesn't actually want to have an external database we can actually use Kafka as a kind of database so in this",
    "start": "2589099",
    "end": "2596160"
  },
  {
    "text": "case let's say the order service it knows what's in your warehouse it also needs to reserve an iPad all right so",
    "start": "2596160",
    "end": "2603270"
  },
  {
    "text": "the bunch of iPads in the in the warehouse bill that number would go down as iPads were shipped out but as soon as",
    "start": "2603270",
    "end": "2610710"
  },
  {
    "text": "somebody creates an order and that order is validated we need to record that that iPad is effectively reserved for the",
    "start": "2610710",
    "end": "2617250"
  },
  {
    "text": "duration of the order so we need to kind of write some intermediary state so we",
    "start": "2617250",
    "end": "2622619"
  },
  {
    "text": "can do that literally just by writing we actually write to the table that's actually the way that you do it create a table and you write to that table and it",
    "start": "2622619",
    "end": "2629280"
  },
  {
    "text": "will be backed up in Kafka oh you could obviously just write directly to the",
    "start": "2629280",
    "end": "2635070"
  },
  {
    "text": "stream if you preferred now if you do",
    "start": "2635070",
    "end": "2641700"
  },
  {
    "text": "this then what actually happens is the data set stored in Kafka and when the order service starts it loads they load",
    "start": "2641700",
    "end": "2648030"
  },
  {
    "text": "that's a data set that we've created of each stock that we've reserved into the order service and in actually still",
    "start": "2648030",
    "end": "2656210"
  },
  {
    "text": "Kafka streams implements a thing called a state store which it's basically just it's a type of database of sorts that",
    "start": "2656210",
    "end": "2663030"
  },
  {
    "text": "really is much simpler it's ER it's a disk resident hash table which allows",
    "start": "2663030",
    "end": "2668400"
  },
  {
    "text": "you to basically store these data sets and access them very quickly so because",
    "start": "2668400",
    "end": "2676880"
  },
  {
    "text": "we're moving data around to services is a relatively difficult thing to do and",
    "start": "2676880",
    "end": "2683780"
  },
  {
    "text": "one of the things we need to do is make sure that we can do this in a reliable way and stream processing engines ship with",
    "start": "2683780",
    "end": "2690660"
  },
  {
    "text": "a bunch of features which basically make this this problem practical because they're really optimized to solve this problem so there's a few things that",
    "start": "2690660",
    "end": "2698040"
  },
  {
    "text": "stand by replicas which is effectively means that you have a replica of that of any data set in one instance of a",
    "start": "2698040",
    "end": "2703980"
  },
  {
    "text": "service in a secondary node and they effectively run it as a highly available pair or as many as you need and if one",
    "start": "2703980",
    "end": "2712020"
  },
  {
    "text": "goes down where the work event will immediately fall over to the other one and the state will be there ready for",
    "start": "2712020",
    "end": "2719670"
  },
  {
    "text": "you likewise there's Dix dis checkpoints which is exactly what you think you might think it's during this data to",
    "start": "2719670",
    "end": "2726359"
  },
  {
    "text": "disk if for some reason if service goes down and comes back up again it can access the disk checkpoint it'll be a",
    "start": "2726359",
    "end": "2732240"
  },
  {
    "text": "little bit behind so it would just catch up from the log to get itself back to a consistent state and we talked earlier",
    "start": "2732240",
    "end": "2739230"
  },
  {
    "text": "about compacted topics which are really about reducing the amount of data that we need to move around so nearly there",
    "start": "2739230",
    "end": "2746690"
  },
  {
    "text": "number nine is using transactions to tie it all together so transaction is",
    "start": "2746690",
    "end": "2753990"
  },
  {
    "text": "actually pretty interesting in Kafka I think they're in some ways a bit like a",
    "start": "2753990",
    "end": "2759390"
  },
  {
    "text": "transaction in a database but in some ways not so yeah it's kind of the same",
    "start": "2759390",
    "end": "2765089"
  },
  {
    "text": "it's about having a tortoise 'ti so let's say we're gonna keep looking at that orders service we have that order",
    "start": "2765089",
    "end": "2771869"
  },
  {
    "text": "requested event which comes in somebody orders an iPad when that happens we",
    "start": "2771869",
    "end": "2777270"
  },
  {
    "text": "actually need to do three things I mean do those three things atomically first thing we need to commit are offset",
    "start": "2777270",
    "end": "2783720"
  },
  {
    "text": "that's a internal Kafka thing but that's basically ensures that you don't get the event again it's just saying I've got",
    "start": "2783720",
    "end": "2789150"
  },
  {
    "text": "that event and I'm done done with it thank you very much let me need to do two other things we need to crate we need to once the order",
    "start": "2789150",
    "end": "2796140"
  },
  {
    "text": "is validated we would create the order validated event but we also want to record that the iPad has been reserved",
    "start": "2796140",
    "end": "2802310"
  },
  {
    "text": "in each of these are going to be basically rights to different topics so this is actually right the right of an",
    "start": "2802310",
    "end": "2808560"
  },
  {
    "text": "event which we're using as an event stream this is actually much more like a right to a database because it's internal to our service and all of these",
    "start": "2808560",
    "end": "2816510"
  },
  {
    "text": "three things we can wrap up in a transaction this actually this just happens automatically if you use Kafka",
    "start": "2816510",
    "end": "2821520"
  },
  {
    "text": "streams you just enable transactions it's all atomic and obviously because",
    "start": "2821520",
    "end": "2827099"
  },
  {
    "text": "it's a stream processing system it's designed to run this scale there's no it's like this is not like an EXO",
    "start": "2827099",
    "end": "2833339"
  },
  {
    "text": "transaction which sits for several milliseconds this will work at big data volume no problem",
    "start": "2833339",
    "end": "2841609"
  },
  {
    "text": "so transactions allow us to tie this these kind of business operations inside",
    "start": "2841609",
    "end": "2847740"
  },
  {
    "text": "this service which with where we've centralized these consistency control concern",
    "start": "2847740",
    "end": "2853010"
  },
  {
    "text": "using the single rider principle allows us to update various different pieces of",
    "start": "2853010",
    "end": "2858650"
  },
  {
    "text": "state and events atomically it's quite a powerful idea and finally we bridge this",
    "start": "2858650",
    "end": "2867310"
  },
  {
    "text": "synchronous asynchronous divide in a streaming media system so I'm not gonna",
    "start": "2867310",
    "end": "2877330"
  },
  {
    "text": "this this is actually a more complicated version of that one service we've been",
    "start": "2877330",
    "end": "2883820"
  },
  {
    "text": "talking about so far I'm just going to talk about it briefly so what we have",
    "start": "2883820",
    "end": "2889670"
  },
  {
    "text": "here is on the left-hand side we have a very simple vessel interface where we can post an order and we can request an",
    "start": "2889670",
    "end": "2896630"
  },
  {
    "text": "order to get it back by its key and what we're actually implementing the pattern",
    "start": "2896630",
    "end": "2901790"
  },
  {
    "text": "inside here is CQRS so what soon as that order gets created it it it's your order",
    "start": "2901790",
    "end": "2909830"
  },
  {
    "text": "event this critter's is written to Kafka and split out into a set of different",
    "start": "2909830",
    "end": "2915190"
  },
  {
    "text": "workflows so we have three validation engine just a fraud service an order",
    "start": "2915190",
    "end": "2920690"
  },
  {
    "text": "service and in the venturi service this was the one that we were talking about a lot today and each of those can run in",
    "start": "2920690",
    "end": "2926390"
  },
  {
    "text": "parallel and can perform its appropriate validation creates another event which",
    "start": "2926390",
    "end": "2932180"
  },
  {
    "text": "goes back to the orders service this is all a synchronous this effectively dams",
    "start": "2932180",
    "end": "2938330"
  },
  {
    "text": "those streams these streams all flowing constantly the Ord service here the C cross the query side of CQRS",
    "start": "2938330",
    "end": "2945020"
  },
  {
    "text": "is effectively damming the stream and creating something that we can query and",
    "start": "2945020",
    "end": "2950380"
  },
  {
    "text": "joins the whole thing together so that's kind of a very simple example",
    "start": "2950380",
    "end": "2956000"
  },
  {
    "text": "of how we can build a streaming ecosystem which bridges a request",
    "start": "2956000",
    "end": "2962960"
  },
  {
    "text": "response synchronous interface with something which is effectively a synchronous asynchronous core and a",
    "start": "2962960",
    "end": "2969710"
  },
  {
    "text": "synchronous interface I should also say that that's that's um so the code for",
    "start": "2969710",
    "end": "2976070"
  },
  {
    "text": "this is is online I have a link for it at the end and there's a post that describes how it all works but this is",
    "start": "2976070",
    "end": "2982700"
  },
  {
    "text": "this is a sort of a test case as it were now you can build an ecosystem this type",
    "start": "2982700",
    "end": "2988180"
  },
  {
    "text": "of ecosystem there's a number of systems I've seen that use this type of pattern definitely a pattern which is very",
    "start": "2988180",
    "end": "2995470"
  },
  {
    "text": "scalable right so you probably wouldn't need to use this kind of pattern for an",
    "start": "2995470",
    "end": "3001080"
  },
  {
    "text": "order service if you were just building a small website but it's really working of something with something that",
    "start": "3001080",
    "end": "3006870"
  },
  {
    "text": "requires well scale this is the kind of person that you would use but what's really more important about this is it kind of shows the seed for how you build",
    "start": "3006870",
    "end": "3014310"
  },
  {
    "text": "more complicated ecosystems and the answer is to have as when it come to design these things the question you're",
    "start": "3014310",
    "end": "3020520"
  },
  {
    "text": "asking is what needs to actually scale on what needs to be independently deployable so in this instance it was",
    "start": "3020520",
    "end": "3026550"
  },
  {
    "text": "actually very easy for these different services to be independently deployable your question would be for yourself is",
    "start": "3026550",
    "end": "3031770"
  },
  {
    "text": "do I need that so what this model really",
    "start": "3031770",
    "end": "3037530"
  },
  {
    "text": "is is a it's a sink or model so at the core of the system is asynchronous and",
    "start": "3037530",
    "end": "3043320"
  },
  {
    "text": "we having we have synchronous interfaces on the boundaries and as we scale that",
    "start": "3043320",
    "end": "3050790"
  },
  {
    "text": "out and keep these historical event streams the event stream has become a",
    "start": "3050790",
    "end": "3057240"
  },
  {
    "text": "kind of system of record so this is this idea of a database inside out anyone",
    "start": "3057240",
    "end": "3063060"
  },
  {
    "text": "seen Martine Clements talk on our databases that out it's a really good talk I think there's a link for it in",
    "start": "3063060",
    "end": "3070260"
  },
  {
    "text": "the Associated blog post but the interesting thing about this is it's the",
    "start": "3070260",
    "end": "3076470"
  },
  {
    "text": "stream actually behaves a lot like a database in that it stores data sets for you but each of our services is able to",
    "start": "3076470",
    "end": "3083070"
  },
  {
    "text": "embed the processing that it needs to slice and dice those those those streams so each of these services share a set of",
    "start": "3083070",
    "end": "3092250"
  },
  {
    "text": "data set I have a shared data set but they own how that data is sliced is",
    "start": "3092250",
    "end": "3097260"
  },
  {
    "text": "sliced and diced which really brings us back to that beta of dichotomy allows us",
    "start": "3097260",
    "end": "3102330"
  },
  {
    "text": "to share data but retain control over how it sliced and diced so spit like a",
    "start": "3102330",
    "end": "3109890"
  },
  {
    "text": "database but like inside out",
    "start": "3109890",
    "end": "3113869"
  },
  {
    "text": "and I'll see we can scale this out as we scale this out we cannot add more services we can span different",
    "start": "3115430",
    "end": "3120720"
  },
  {
    "text": "geographies we might have a set of services running in New York and London and Tokyo etc but these more globally",
    "start": "3120720",
    "end": "3128970"
  },
  {
    "text": "disconnected ecosystems so what do we",
    "start": "3128970",
    "end": "3134309"
  },
  {
    "text": "have I'm at a high level for me architecture",
    "start": "3134309",
    "end": "3142410"
  },
  {
    "text": "actually has little to do with writing something on a whiteboard it's quite",
    "start": "3142410",
    "end": "3148230"
  },
  {
    "text": "easy to design a system on a whiteboard it's much harder to work out how that",
    "start": "3148230",
    "end": "3153240"
  },
  {
    "text": "systems going to evolve over time actually because it's not just a",
    "start": "3153240",
    "end": "3158790"
  },
  {
    "text": "technical problem it's got a lot to do with people so for me the essence of a",
    "start": "3158790",
    "end": "3164430"
  },
  {
    "text": "good design is its ability to evolve over time and actually that's just true for your software as it is for a system",
    "start": "3164430",
    "end": "3171180"
  },
  {
    "text": "architecture so the question of and interfaces are typically isn't enough",
    "start": "3171180",
    "end": "3176760"
  },
  {
    "text": "not for a big ecosystem we want to embrace a synchronicity often because we actually have business processes which",
    "start": "3176760",
    "end": "3183480"
  },
  {
    "text": "themselves are asynchronous like shipping an item to your door but also",
    "start": "3183480",
    "end": "3189809"
  },
  {
    "text": "because synchronous interface is a particular when they get deep actually",
    "start": "3189809",
    "end": "3195299"
  },
  {
    "text": "provide a lot of coupling there's almost like a law of demeter if you've come across that for the way that the",
    "start": "3195299",
    "end": "3200700"
  },
  {
    "text": "system's interact so we want to leverage the duality of events both the note the",
    "start": "3200700",
    "end": "3207690"
  },
  {
    "text": "notification as well as the ability to move data from process to process and we",
    "start": "3207690",
    "end": "3213720"
  },
  {
    "text": "can use a streaming toolset help us to solve those kinds of problems to deal",
    "start": "3213720",
    "end": "3218940"
  },
  {
    "text": "with a synchronicity actually slice and de at dice data as it moves so remember the data dichotomy",
    "start": "3218940",
    "end": "3226460"
  },
  {
    "text": "data systems really about exposing data these services are about hiding it that",
    "start": "3226460",
    "end": "3233099"
  },
  {
    "text": "means we want all the good stuff that we get with a database but we don't want to",
    "start": "3233099",
    "end": "3239099"
  },
  {
    "text": "share that database with anyone else we do want to share the daily sets that they hold so want to be I shared the",
    "start": "3239099",
    "end": "3246000"
  },
  {
    "text": "data set but we want to manage the slicing and dicing ourselves and have autonomy over web weather how",
    "start": "3246000",
    "end": "3251279"
  },
  {
    "text": "that evolves over time when that changes so for event-driven services we want to",
    "start": "3251279",
    "end": "3257849"
  },
  {
    "text": "broadcast events retain them in a log compose a system as a set of streaming",
    "start": "3257849",
    "end": "3264359"
  },
  {
    "text": "functions and then we cast that event stream into a view when we need to query",
    "start": "3264359",
    "end": "3270690"
  },
  {
    "text": "it and that's the essence of services built on this kind of streaming platform",
    "start": "3270690",
    "end": "3277700"
  },
  {
    "text": "and that's all I had to say thanks very much for listening again my name's Ben stuff but if you want to find out more",
    "start": "3277700",
    "end": "3284369"
  },
  {
    "text": "the slides are available on my website there's a blog series on the confluent blog and that's closed for those those",
    "start": "3284369",
    "end": "3290819"
  },
  {
    "text": "code examples in that URL and yeah you",
    "start": "3290819",
    "end": "3296609"
  },
  {
    "text": "can find all this on my website if anyone anyone has any questions not sure",
    "start": "3296609",
    "end": "3303119"
  },
  {
    "text": "if we have a microphone here but I'm happy to say now it would also be happy to answer anything that people have any",
    "start": "3303119",
    "end": "3310200"
  },
  {
    "text": "questions people have at the end and will catch me around and as you see fit",
    "start": "3310200",
    "end": "3316369"
  },
  {
    "text": "[Applause]",
    "start": "3317830",
    "end": "3321110"
  }
]