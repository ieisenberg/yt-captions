[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "okay let's get started so hi everyone i'm michael stipe",
    "start": "6879",
    "end": "13519"
  },
  {
    "text": "i'm a microsoft mvp and i'm one of the authors of the hot chocolate graphql library.net",
    "start": "13519",
    "end": "20240"
  },
  {
    "text": "today i want to talk to you about graphql schema stitching with dotnet core or i would",
    "start": "20240",
    "end": "27840"
  },
  {
    "text": "rather say federated data graphs with dotnet",
    "start": "27840",
    "end": "33039"
  },
  {
    "text": "i know that a lot of people in talks every every time i go to conferences",
    "start": "33040",
    "end": "38800"
  },
  {
    "text": "that don't know what graphql is they just hear the term graph so let's introduce",
    "start": "38800",
    "end": "46480"
  },
  {
    "text": "a three minute do a three minute introduction to graphql and then head into the topic",
    "start": "46480",
    "end": "53520"
  },
  {
    "start": "53000",
    "end": "258000"
  },
  {
    "text": "so why is graphql so popular lately why why does everybody want to build his own",
    "start": "54399",
    "end": "60559"
  },
  {
    "text": "data graph create its own uh graphql server so the reason for this is because",
    "start": "60559",
    "end": "68240"
  },
  {
    "text": "graphql changed the predicament how we consume data with traditional rest apis",
    "start": "68240",
    "end": "77680"
  },
  {
    "text": "or even grpc api soap apis we always",
    "start": "77680",
    "end": "84479"
  },
  {
    "text": "have to take what the server tells us that there is so if a server offers a request",
    "start": "84479",
    "end": "90479"
  },
  {
    "text": "we have to swallow all the data that the request offers to us",
    "start": "90479",
    "end": "95600"
  },
  {
    "text": "and just live with what the server offers with graphql this is fundamentally different",
    "start": "95600",
    "end": "101759"
  },
  {
    "text": "like if we look at this simple graphql query here which fetches the currently looked in",
    "start": "101759",
    "end": "108000"
  },
  {
    "text": "user and from this currently logged in user just the name when we send such a",
    "start": "108000",
    "end": "114000"
  },
  {
    "text": "request to our server we get a response back that closely aligns our request",
    "start": "114000",
    "end": "121360"
  },
  {
    "text": "and that's one of the design goals with graphql it puts the consumer of the api in the",
    "start": "121360",
    "end": "127360"
  },
  {
    "text": "driver seat and lets the consumer drive how the interface between the server",
    "start": "127360",
    "end": "133440"
  },
  {
    "text": "and the client really looks like so if we look at this response it almost",
    "start": "133440",
    "end": "138560"
  },
  {
    "text": "is as if the server just filled up our request graph with some data",
    "start": "138560",
    "end": "145360"
  },
  {
    "text": "but graphql doesn't stop there so i cannot just build simple requests",
    "start": "146879",
    "end": "154160"
  },
  {
    "text": "and as my um as my demands change i can change my",
    "start": "154160",
    "end": "160560"
  },
  {
    "text": "request add more add more to my request that i want to consume",
    "start": "160560",
    "end": "165840"
  },
  {
    "text": "like for instance i want to drill into the profile picture and get details over the profile picture",
    "start": "165840",
    "end": "171599"
  },
  {
    "text": "of the user that is logged in and i can send that again to my graphql",
    "start": "171599",
    "end": "178879"
  },
  {
    "text": "server and as we expect expect the graphql will just fill that up with",
    "start": "178879",
    "end": "184000"
  },
  {
    "text": "some data and as we now can already reason about",
    "start": "184000",
    "end": "191840"
  },
  {
    "text": "it's not all about simple simple spa spheres or simple requests where i just can say",
    "start": "191840",
    "end": "198640"
  },
  {
    "text": "give me this and that field it's just really about data graphs where i can drill into the relations",
    "start": "198640",
    "end": "205680"
  },
  {
    "text": "of my nodes like for instance i could drill into the friends of the currently",
    "start": "205680",
    "end": "210879"
  },
  {
    "text": "locked in user and ask for the name and last theme of the sign in user and of its friends",
    "start": "210879",
    "end": "221519"
  },
  {
    "text": "and as i expect i get the data back also for this in the shape i expected but if we look",
    "start": "222159",
    "end": "228560"
  },
  {
    "text": "closer here we can see that we already introduced some repetition into our graphql query name in last",
    "start": "228560",
    "end": "234560"
  },
  {
    "text": "scene is declared two times and there is a construct in graphql called fragment",
    "start": "234560",
    "end": "242080"
  },
  {
    "text": "which is our primitive for composition and with that we can build fragment",
    "start": "242080",
    "end": "247360"
  },
  {
    "text": "hierarchies as we create component hierarchies in our ui or class hierarchies",
    "start": "247360",
    "end": "255280"
  },
  {
    "text": "in our backends so with graphql i have a single endpoint",
    "start": "255280",
    "end": "261600"
  },
  {
    "text": "since i'm designing the requests or i design what data i want to consume so i can issue",
    "start": "261600",
    "end": "267919"
  },
  {
    "text": "that to one endpoint that makes it that simple to use",
    "start": "267919",
    "end": "273600"
  },
  {
    "text": "and with graphql i can consume all the data that i need at a given moment in time or that i need",
    "start": "273919",
    "end": "280240"
  },
  {
    "text": "in a specific component with one request and that completely gets rid of the",
    "start": "280240",
    "end": "286639"
  },
  {
    "text": "overall under fetching problem and graphql is built on a strong type",
    "start": "286639",
    "end": "294840"
  },
  {
    "text": "system and that gives me cons confidence when i consume data since the graphql execution engine will",
    "start": "294840",
    "end": "303039"
  },
  {
    "text": "enforce that the data abides to the declaration that we did in our type system",
    "start": "303039",
    "end": "310320"
  },
  {
    "text": "and this is different to things like swagger where the schema essentially can get out of bounds",
    "start": "310320",
    "end": "316560"
  },
  {
    "text": "with the implementation and that makes graphql super predictable to use",
    "start": "316560",
    "end": "324800"
  },
  {
    "start": "324000",
    "end": "668000"
  },
  {
    "text": "okay so with graphql i aim for this big data graph",
    "start": "324800",
    "end": "332400"
  },
  {
    "text": "for this i would say monolith in which i can really reason about data drill",
    "start": "332400",
    "end": "337840"
  },
  {
    "text": "into data ask for everything i want so ideally when we build graphql we just",
    "start": "337840",
    "end": "344160"
  },
  {
    "text": "put a thin layer of graphql over our business layer and graphql is a really great way to",
    "start": "344160",
    "end": "351919"
  },
  {
    "text": "expose or give access to our business layer it essentially lets us create this",
    "start": "351919",
    "end": "361039"
  },
  {
    "text": "ubiquitous data graph where we uh can explore our business",
    "start": "361039",
    "end": "368960"
  },
  {
    "text": "layer in a much better way than with traditional technologies like um rest where i always have to",
    "start": "368960",
    "end": "376720"
  },
  {
    "text": "simplify my data put it in serializable objects so when we start with graphql",
    "start": "376720",
    "end": "384880"
  },
  {
    "text": "apis we often start by creating our model",
    "start": "384880",
    "end": "390160"
  },
  {
    "text": "that we want to consume an interconnected graph every for instance would build a webshop",
    "start": "390160",
    "end": "398160"
  },
  {
    "text": "we could start like this where we create a user that user is connected with the reviews",
    "start": "398160",
    "end": "406000"
  },
  {
    "text": "that this user writes i can drill into that and the review for instance is connected",
    "start": "406000",
    "end": "412080"
  },
  {
    "text": "with the user so i can drill from both sides and also we have the product that is in",
    "start": "412080",
    "end": "418479"
  },
  {
    "text": "the center and where we can also drive into the reviews that somebody wrote about this",
    "start": "418479",
    "end": "425120"
  },
  {
    "text": "product this is great it really lets us",
    "start": "425120",
    "end": "430639"
  },
  {
    "text": "drive and define our graph in a really rich way with rich types",
    "start": "430639",
    "end": "439120"
  },
  {
    "text": "and from a query standpoint from a consumer standpoint this is really great",
    "start": "439280",
    "end": "444639"
  },
  {
    "text": "because the front-end developer or the consumer of the api in general can just drill into the data",
    "start": "444639",
    "end": "451039"
  },
  {
    "text": "for instance from the currently logged in user you can drill into the reviews that this",
    "start": "451039",
    "end": "456720"
  },
  {
    "text": "user has written and from there into the product about which this user has written reviews",
    "start": "456720",
    "end": "463759"
  },
  {
    "text": "and also as i said we can explore this from the other side by um",
    "start": "463759",
    "end": "470479"
  },
  {
    "text": "for for instance asking for the top products of the web shop and then expo",
    "start": "470479",
    "end": "477599"
  },
  {
    "text": "exploring if these these top products are available what the shipping estimates are",
    "start": "477599",
    "end": "482960"
  },
  {
    "text": "and then drilling into the reviews and the author who wrote the reviews this is",
    "start": "482960",
    "end": "489199"
  },
  {
    "text": "great from a consumer standpoint but as our graph grows and introduces",
    "start": "489199",
    "end": "496720"
  },
  {
    "text": "more and more types it becomes cumbersome to have just a monolith",
    "start": "496720",
    "end": "502319"
  },
  {
    "text": "often graphql is used then over a set of domain services i'm not",
    "start": "502319",
    "end": "507840"
  },
  {
    "text": "speaking of microservices here since usually you aim to have domain",
    "start": "507840",
    "end": "513120"
  },
  {
    "text": "services down there and these domain services now can be developed",
    "start": "513120",
    "end": "518880"
  },
  {
    "text": "by different teams that work in their silo with their domain",
    "start": "518880",
    "end": "524560"
  },
  {
    "text": "expertise and push this server forward but the problem that now arises",
    "start": "524560",
    "end": "530320"
  },
  {
    "text": "is that if i divide that up into those silo services domain services",
    "start": "530320",
    "end": "537600"
  },
  {
    "text": "i always have to advance this domain service and the graphql layer as way as well",
    "start": "537600",
    "end": "543760"
  },
  {
    "text": "and that means every time i change for instance the account service i have to change the",
    "start": "543760",
    "end": "548800"
  },
  {
    "text": "graphql servers and this introduces new problems with working together as",
    "start": "548800",
    "end": "554720"
  },
  {
    "text": "teams because now i always have a lock when somebody is changing something in",
    "start": "554720",
    "end": "561440"
  },
  {
    "text": "the graph and i have to wait for the changes to commence",
    "start": "561440",
    "end": "567279"
  },
  {
    "text": "so ideally we would like to have these silos where we for instance in the account service just have the user just",
    "start": "568880",
    "end": "576080"
  },
  {
    "text": "have to have to care about the data of the user",
    "start": "576080",
    "end": "581600"
  },
  {
    "text": "in this instance we have just the name of the user and in the product service we might just",
    "start": "581600",
    "end": "586959"
  },
  {
    "text": "want to have a catalog of products and which essentially consists of the name",
    "start": "586959",
    "end": "593200"
  },
  {
    "text": "and the price and then we might have a fourth a third service the inventory service",
    "start": "593200",
    "end": "599200"
  },
  {
    "text": "that keeps track of what we have in stock and what the shipping estimates are",
    "start": "599200",
    "end": "606800"
  },
  {
    "text": "and ideally these services could also provide some configuration to our overall graph to",
    "start": "606800",
    "end": "614399"
  },
  {
    "text": "tell the overall graph how these types really interconnect ideally our account service could just",
    "start": "614399",
    "end": "622160"
  },
  {
    "text": "tell the overall graph that this user is essentially the author in the reviews",
    "start": "622160",
    "end": "633040"
  },
  {
    "text": "and in such a scenario we would like just to have one",
    "start": "633040",
    "end": "638240"
  },
  {
    "text": "technology just graphql where the overall graph can delegate the query parts that concern one domain",
    "start": "638240",
    "end": "646079"
  },
  {
    "text": "service to that domain service and on the other side i want to drive this graph",
    "start": "646079",
    "end": "652160"
  },
  {
    "text": "from the bottom from the from the domain services and build out",
    "start": "652160",
    "end": "657920"
  },
  {
    "text": "the types in my domain services and then create a bigger and bigger data graph",
    "start": "657920",
    "end": "665279"
  },
  {
    "text": "for my company so the solution to that is graph distribution and we have a",
    "start": "665279",
    "end": "672000"
  },
  {
    "start": "668000",
    "end": "732000"
  },
  {
    "text": "couple of approaches here so there is schema stitching",
    "start": "672000",
    "end": "677360"
  },
  {
    "text": "which is a centralized approach where the gateway essentially has all the stitching logic",
    "start": "677360",
    "end": "684640"
  },
  {
    "text": "and knows how to combine these graphs i would end up with the same problem i",
    "start": "684640",
    "end": "690240"
  },
  {
    "text": "introduced with having these domain services down there where i always have to advance my",
    "start": "690240",
    "end": "696399"
  },
  {
    "text": "um my domain service and the overall graph at once and create those locking scenarios but",
    "start": "696399",
    "end": "702640"
  },
  {
    "text": "then there is schema federation which essentially defines that the domain services by",
    "start": "702640",
    "end": "709600"
  },
  {
    "text": "themselves can build up that top level graph both",
    "start": "709600",
    "end": "714800"
  },
  {
    "text": "terms were coined actually by apollo but uh they there are a lot of flavors",
    "start": "714800",
    "end": "721200"
  },
  {
    "text": "around in the grafton hemisphere what i'm showing you today is how you can do that with",
    "start": "721200",
    "end": "727200"
  },
  {
    "text": "dot net core and hot chocolate",
    "start": "727200",
    "end": "731839"
  },
  {
    "start": "732000",
    "end": "1010000"
  },
  {
    "text": "and i would say let's just dive in and look how we could build up such a distributed graph",
    "start": "732560",
    "end": "740560"
  },
  {
    "text": "okay so i prepared a little demo let me just pull that up and",
    "start": "741200",
    "end": "748720"
  },
  {
    "text": "let me just compile that so that visual studio code knows my types",
    "start": "748720",
    "end": "754880"
  },
  {
    "text": "and i walk you through a bit so essentially i have built uh four graphical services here accounts",
    "start": "755120",
    "end": "762000"
  },
  {
    "text": "inventory products and reviews and each of these provides different",
    "start": "762000",
    "end": "767360"
  },
  {
    "text": "aspects to my overall graphs that we want to create so if we look at the accounts graph it's",
    "start": "767360",
    "end": "773200"
  },
  {
    "text": "a simple graphql server let me put that",
    "start": "773200",
    "end": "778639"
  },
  {
    "text": "site it's a simple graphql server that has a simple query type that provides us",
    "start": "778639",
    "end": "785200"
  },
  {
    "text": "with um with a field to fetch all users or a field to",
    "start": "785200",
    "end": "790880"
  },
  {
    "text": "fetch a single user the user is also simple provides just name",
    "start": "790880",
    "end": "796079"
  },
  {
    "text": "birth date and username so just a couple of data about the user and then i have like the review",
    "start": "796079",
    "end": "803279"
  },
  {
    "text": "service that provides me with uh essentially the review and the revenue service knows some ids",
    "start": "803279",
    "end": "810000"
  },
  {
    "text": "about the the author who wrote that and these really interconnect with my",
    "start": "810000",
    "end": "815760"
  },
  {
    "text": "accounts data but each of these services owns their data silos so they own the",
    "start": "815760",
    "end": "822560"
  },
  {
    "text": "data that they provide so in order to interconnect",
    "start": "822560",
    "end": "828800"
  },
  {
    "text": "these um these domain graphs i need to have something called a",
    "start": "828800",
    "end": "833839"
  },
  {
    "text": "gateway a graphql gateway and for that we just need to create a simple.net project so",
    "start": "833839",
    "end": "841519"
  },
  {
    "text": "dotnet new web and we call it a gateway",
    "start": "841519",
    "end": "847519"
  },
  {
    "text": "and just let's add it to the solution so that i can compile",
    "start": "852480",
    "end": "862000"
  },
  {
    "text": "just reload so visual studio gets it that there is a new project so",
    "start": "862000",
    "end": "867920"
  },
  {
    "text": "the gateway is a very simple asp.net core application it doesn't have",
    "start": "867920",
    "end": "875440"
  },
  {
    "text": "anything in there so the first thing to use schema federated schema stitching is",
    "start": "875440",
    "end": "882399"
  },
  {
    "text": "essentially to add some graphical to it so let's put the hot chocolate a speedo encore package in here",
    "start": "882399",
    "end": "899839"
  },
  {
    "text": "and then we also need a package that lets us um do all this d",
    "start": "902240",
    "end": "909440"
  },
  {
    "text": "schema stitching magic and that is the hot chocolate stitching package and in this",
    "start": "909440",
    "end": "917279"
  },
  {
    "text": "we are using a federated approach that means we want to have it more robust and we need",
    "start": "917279",
    "end": "923440"
  },
  {
    "text": "some kind of an instance that lets us push messages between those services",
    "start": "923440",
    "end": "929839"
  },
  {
    "text": "and also store the configuration and for that we are using redis there are other things that you could",
    "start": "929839",
    "end": "936160"
  },
  {
    "text": "use and you could even use a pull approach but with resist you have really a hot",
    "start": "936160",
    "end": "941519"
  },
  {
    "text": "reload approach with your schema so before we head into really",
    "start": "941519",
    "end": "947519"
  },
  {
    "text": "all this setup here we also are using a tie here that means and to not always start all",
    "start": "947519",
    "end": "955920"
  },
  {
    "text": "the services i just put that in a tie configuration and let me just also",
    "start": "955920",
    "end": "962959"
  },
  {
    "text": "put in here the gateway configuration so that everything",
    "start": "962959",
    "end": "968720"
  },
  {
    "text": "compiles so the nice thing with type is that i now just can",
    "start": "968720",
    "end": "973759"
  },
  {
    "text": "do tools to restore and then",
    "start": "973759",
    "end": "980079"
  },
  {
    "text": "add type run watch and now we can work on our gateway",
    "start": "980079",
    "end": "987360"
  },
  {
    "text": "our microservices here and i will automatically restart the part",
    "start": "987360",
    "end": "992560"
  },
  {
    "text": "that we are changing and also tai will distribute as a redis cache and stuff like that and",
    "start": "992560",
    "end": "999120"
  },
  {
    "text": "keep everything running it's a great way to also debug",
    "start": "999120",
    "end": "1004160"
  },
  {
    "text": "those federated federated data graphs on your local machine",
    "start": "1004160",
    "end": "1011199"
  },
  {
    "start": "1010000",
    "end": "1161000"
  },
  {
    "text": "okay so let's get into it so the first thing is we want to set up a a gateway a graphql gateway",
    "start": "1011199",
    "end": "1019440"
  },
  {
    "text": "so we are going into our gateway solution going into startup cs and we need to set",
    "start": "1019440",
    "end": "1026880"
  },
  {
    "text": "up a simple graphql server here so we would normally start with services",
    "start": "1026880",
    "end": "1034798"
  },
  {
    "text": "dot and graphql server and then maybe we want to have a simple",
    "start": "1034799",
    "end": "1040959"
  },
  {
    "text": "query type in there and since this is a gateway we just provide an empty",
    "start": "1040959",
    "end": "1047678"
  },
  {
    "text": "query type since we will fill it up from the domain services so we just give it a",
    "start": "1047679",
    "end": "1053039"
  },
  {
    "text": "name called a query and we leave it like that so this is a graphql server it's not a",
    "start": "1053039",
    "end": "1059360"
  },
  {
    "text": "valid graph credit server so it would fail when we call it but is it it's a graphql server and",
    "start": "1059360",
    "end": "1066400"
  },
  {
    "text": "then we essentially map graphql as an endpoint and with that we could",
    "start": "1066400",
    "end": "1073120"
  },
  {
    "text": "execute graphql credits but in order to push configurations to",
    "start": "1073120",
    "end": "1078799"
  },
  {
    "text": "this graphql server we now need to connect it to redis so let's put in the redis connection",
    "start": "1078799",
    "end": "1086640"
  },
  {
    "text": "to our dependency injection and then import the remote",
    "start": "1086640",
    "end": "1093919"
  },
  {
    "text": "schemas so the schema set we are pushing to it from our redis and we are giving it the",
    "start": "1093919",
    "end": "1101679"
  },
  {
    "text": "the configuration name demo so that is our essentially our name or",
    "start": "1101679",
    "end": "1106960"
  },
  {
    "text": "configuration name and with that essentially the gateway is",
    "start": "1106960",
    "end": "1113600"
  },
  {
    "text": "almost configured the one thing that we are missing is the connections to our downstream",
    "start": "1113600",
    "end": "1120559"
  },
  {
    "text": "services and for this we are just using the http connection",
    "start": "1120559",
    "end": "1125600"
  },
  {
    "text": "uh http client factory sorry",
    "start": "1125600",
    "end": "1129600"
  },
  {
    "text": "so i'm adding here four fixed http clients that can that represent all the downstream",
    "start": "1133679",
    "end": "1139679"
  },
  {
    "text": "services the cool thing here is you could also",
    "start": "1139679",
    "end": "1144720"
  },
  {
    "text": "implement that on your in a more dynamic way where you also get from it is the configurations",
    "start": "1144720",
    "end": "1151600"
  },
  {
    "text": "and the cool thing with uh http client factory in general you can make it very robust by using",
    "start": "1151600",
    "end": "1157840"
  },
  {
    "text": "poly or some other tooling okay so the gateway is now ready",
    "start": "1157840",
    "end": "1164400"
  },
  {
    "start": "1161000",
    "end": "1313000"
  },
  {
    "text": "let's push some configurations so let's start with our account service in our account service we have",
    "start": "1164400",
    "end": "1170880"
  },
  {
    "text": "fundamentally a simple data graph we already explored that",
    "start": "1170880",
    "end": "1176240"
  },
  {
    "text": "let me have a look at how this um data graph for accounts looks like at",
    "start": "1176240",
    "end": "1183280"
  },
  {
    "text": "the moment we're opening this graphql server",
    "start": "1183280",
    "end": "1188080"
  },
  {
    "text": "let's just have a look at the schema at the moment we just have two fields",
    "start": "1188880",
    "end": "1194320"
  },
  {
    "text": "here on the query type so we could as we already saw in the code",
    "start": "1194320",
    "end": "1199440"
  },
  {
    "text": "fetch all users or fetch a specific user",
    "start": "1199440",
    "end": "1206400"
  },
  {
    "text": "awesome that works this is a simple server that we have down there but what",
    "start": "1206400",
    "end": "1211679"
  },
  {
    "text": "i saw what we saw in the slides i had this nice schema with me where i could drill in",
    "start": "1211679",
    "end": "1216880"
  },
  {
    "text": "that is actually what we want to have on our gateway on our overall company data",
    "start": "1216880",
    "end": "1223200"
  },
  {
    "text": "graph so let's get into our configuration here and first put in redis so that we can",
    "start": "1223200",
    "end": "1231360"
  },
  {
    "text": "push our configurations from from our domain servers up to the um to the gateway",
    "start": "1231360",
    "end": "1238559"
  },
  {
    "text": "the next thing we need to to do is to publish our schema configuration",
    "start": "1238559",
    "end": "1246320"
  },
  {
    "text": "so essentially what we are publishing here under the name accounts to the overall",
    "start": "1246320",
    "end": "1252880"
  },
  {
    "text": "stitching configuration demo our schema but we also can modify our schema we",
    "start": "1252880",
    "end": "1260159"
  },
  {
    "text": "rewrite our schema so for instance we are ignoring all the root types so we are ignoring",
    "start": "1260159",
    "end": "1265440"
  },
  {
    "text": "users and we are ignoring the other user field what we really want to do is we rewrite",
    "start": "1265440",
    "end": "1271840"
  },
  {
    "text": "our data graph and this we can do with graphql sdn so we can put in a stitching",
    "start": "1271840",
    "end": "1278480"
  },
  {
    "text": "dot graphql here",
    "start": "1278480",
    "end": "1281600"
  },
  {
    "text": "and then we can extend the query type that we have in our gateway",
    "start": "1283520",
    "end": "1289280"
  },
  {
    "text": "in this instance i'm i'm introducing a new field that is called me",
    "start": "1289280",
    "end": "1294480"
  },
  {
    "text": "and is from the type user that i have here my downstream service and i can call that by calling the user",
    "start": "1294480",
    "end": "1302640"
  },
  {
    "text": "field on my service and providing an id in this instance i'm taking a static id",
    "start": "1302640",
    "end": "1308000"
  },
  {
    "text": "usually with authentication i would take that from the from the context okay",
    "start": "1308000",
    "end": "1315200"
  },
  {
    "text": "so let's just add the type extension here the file and with that already our data",
    "start": "1315200",
    "end": "1322400"
  },
  {
    "text": "graph should work let's go to our gateway which is on",
    "start": "1322400",
    "end": "1327840"
  },
  {
    "text": "port 5050. okay it's loading and we already can see",
    "start": "1327840",
    "end": "1334640"
  },
  {
    "text": "that we now have a me field here there's nothing else to it so we could essentially now",
    "start": "1334640",
    "end": "1341200"
  },
  {
    "text": "um already query our are currently locked in user okay but",
    "start": "1341200",
    "end": "1349039"
  },
  {
    "text": "that is um just a simple thing to do and we really want to interconnect the",
    "start": "1349039",
    "end": "1356400"
  },
  {
    "text": "data graphs so the next thing really would be to go to the review service",
    "start": "1356400",
    "end": "1362159"
  },
  {
    "text": "go to the startup cs and also connect that to our data graph",
    "start": "1362159",
    "end": "1369840"
  },
  {
    "text": "so again we add redis",
    "start": "1369840",
    "end": "1375840"
  },
  {
    "text": "and then publish also our configuration of this service",
    "start": "1378720",
    "end": "1384880"
  },
  {
    "text": "to our gateway",
    "start": "1384880",
    "end": "1389840"
  },
  {
    "text": "and again we are ignoring all the root types because these are more meant for the domain",
    "start": "1391520",
    "end": "1397120"
  },
  {
    "text": "service we want to rewrite the configuration here to integrate with our types that we have",
    "start": "1397120",
    "end": "1404000"
  },
  {
    "text": "on the gateway so stitching dot graphql again you can name it however you want so it",
    "start": "1404000",
    "end": "1411280"
  },
  {
    "text": "doesn't isn't fixed to that name so in this in this instance we are extending the user",
    "start": "1411280",
    "end": "1418320"
  },
  {
    "text": "and we are introducing a reviews field here and here you can actually see we are",
    "start": "1418320",
    "end": "1425440"
  },
  {
    "text": "taking out of the context from the original entity the id",
    "start": "1425440",
    "end": "1431679"
  },
  {
    "text": "and try to and resolve with that id the reviews that belong to that user",
    "start": "1431679",
    "end": "1439760"
  },
  {
    "start": "1438000",
    "end": "1533000"
  },
  {
    "text": "okay this is already working again like i said with um with redis and",
    "start": "1439840",
    "end": "1448480"
  },
  {
    "text": "and ty this is really hot reload so we can just refresh go in here and we can already",
    "start": "1448480",
    "end": "1454720"
  },
  {
    "text": "see that our reviews type is stitched in and we can now really",
    "start": "1454720",
    "end": "1461919"
  },
  {
    "text": "drill into that the good thing is that the graphical query engine will figure out query plans",
    "start": "1461919",
    "end": "1467279"
  },
  {
    "text": "to query that effectively it also knows about overlapping data data that you",
    "start": "1467279",
    "end": "1472400"
  },
  {
    "text": "have in both services and we also try to reduce the service that we involve when we are resolving",
    "start": "1472400",
    "end": "1478640"
  },
  {
    "text": "the data okay but let's go on with that because",
    "start": "1478640",
    "end": "1485840"
  },
  {
    "text": "review also actually should expose the user that that means we could go back to our",
    "start": "1485840",
    "end": "1492000"
  },
  {
    "text": "account service here and essentially extend",
    "start": "1492000",
    "end": "1497200"
  },
  {
    "text": "the review type with the user",
    "start": "1497200",
    "end": "1501840"
  },
  {
    "text": "again again we are taking the author id from",
    "start": "1504400",
    "end": "1509840"
  },
  {
    "text": "the review type and resolving with that",
    "start": "1509840",
    "end": "1515360"
  },
  {
    "text": "the awesome and again this is already hot reloaded the schema already",
    "start": "1515360",
    "end": "1524240"
  },
  {
    "text": "has this capability as author and we can drill further into the data",
    "start": "1524240",
    "end": "1533440"
  },
  {
    "start": "1533000",
    "end": "1663000"
  },
  {
    "text": "okay but now let's really interconnect the product service make that",
    "start": "1534400",
    "end": "1541360"
  },
  {
    "text": "shine and also connect that with the inventory and the inventory is quite",
    "start": "1541360",
    "end": "1546400"
  },
  {
    "text": "another thing so we again go to our service",
    "start": "1546400",
    "end": "1551600"
  },
  {
    "text": "configuration from the product service now again we add redis this becomes now",
    "start": "1551600",
    "end": "1557520"
  },
  {
    "text": "muscle memory we are just adding these things",
    "start": "1557520",
    "end": "1561919"
  },
  {
    "text": "we are publishing the products details and also with products we are",
    "start": "1564000",
    "end": "1569840"
  },
  {
    "text": "introducing a stitching dot graphql",
    "start": "1569840",
    "end": "1574720"
  },
  {
    "text": "and products is also reachable from the query type so let's also introduce",
    "start": "1577440",
    "end": "1584320"
  },
  {
    "text": "a new top level field to our query type this is top products we can uh get the",
    "start": "1584320",
    "end": "1591279"
  },
  {
    "text": "top products and provide an integer how many top products we want in this instance i can just delegate",
    "start": "1591279",
    "end": "1598240"
  },
  {
    "text": "without any information because the same field exists on my on my",
    "start": "1598240",
    "end": "1603919"
  },
  {
    "text": "domain graph and then we can extend the review with the product and",
    "start": "1603919",
    "end": "1612159"
  },
  {
    "text": "in this case we need some context information that we get here by using this context variable",
    "start": "1612159",
    "end": "1620080"
  },
  {
    "text": "which we then delegate to our local domain service okay",
    "start": "1620080",
    "end": "1626640"
  },
  {
    "text": "this is already reloaded",
    "start": "1626640",
    "end": "1630320"
  },
  {
    "text": "and we now can be drilled into our top products here",
    "start": "1631840",
    "end": "1636880"
  },
  {
    "text": "take the first two maybe and drill into the data that we have",
    "start": "1636880",
    "end": "1644240"
  },
  {
    "text": "so while there is no interconnection yet we already can",
    "start": "1644240",
    "end": "1650559"
  },
  {
    "text": "drill into the product from the review you can see we just need to define how",
    "start": "1650720",
    "end": "1657520"
  },
  {
    "text": "the edges connect and then the data is already exposed",
    "start": "1657520",
    "end": "1664240"
  },
  {
    "start": "1663000",
    "end": "1943000"
  },
  {
    "text": "okay last but not least let's um let's put in the the",
    "start": "1664240",
    "end": "1671840"
  },
  {
    "text": "inventory and then i show you something different",
    "start": "1671840",
    "end": "1678720"
  },
  {
    "text": "so again we put in redis",
    "start": "1679919",
    "end": "1684320"
  },
  {
    "text": "and again we publish our data graph",
    "start": "1685760",
    "end": "1691039"
  },
  {
    "text": "and again we also add the stitching dot graphql to our sub to our",
    "start": "1692159",
    "end": "1698480"
  },
  {
    "text": "domain service and we extend the product with the inventory",
    "start": "1698480",
    "end": "1704159"
  },
  {
    "text": "and in this service it's different because the data shapes completely are different",
    "start": "1704159",
    "end": "1709520"
  },
  {
    "text": "and i don't want them so in this instance i for i drill into the inventory info",
    "start": "1709520",
    "end": "1716240"
  },
  {
    "text": "and just pick a certain field i also could aggregate if that would be a list i could still drill in and aggregate so",
    "start": "1716240",
    "end": "1723440"
  },
  {
    "text": "this passive text is very very powerful and also i have here a",
    "start": "1723440",
    "end": "1729120"
  },
  {
    "text": "shipping estimate algorithm that i will use and this is also just a scalar so i'm",
    "start": "1729120",
    "end": "1734159"
  },
  {
    "text": "creating here two new fields and are just using some some",
    "start": "1734159",
    "end": "1739840"
  },
  {
    "text": "functionality of the server not all of it like i did with the all the others where",
    "start": "1739840",
    "end": "1745520"
  },
  {
    "text": "always integrated the full type",
    "start": "1745520",
    "end": "1749919"
  },
  {
    "text": "and that should already be available i have it in stock info and i",
    "start": "1750840",
    "end": "1757760"
  },
  {
    "text": "can get the shipping estimate the last thing we really need to put in here",
    "start": "1757760",
    "end": "1763200"
  },
  {
    "text": "is um ah there's one error i just saw i just messed this up",
    "start": "1763200",
    "end": "1770880"
  },
  {
    "text": "the snippet tool always swallows my dollar signs here",
    "start": "1771039",
    "end": "1781760"
  },
  {
    "text": "okay so that is in let's just verify that it works",
    "start": "1781760",
    "end": "1788640"
  },
  {
    "text": "no it doesn't products let's take these guys out",
    "start": "1789440",
    "end": "1796640"
  },
  {
    "text": "that works in stock",
    "start": "1799279",
    "end": "1804720"
  },
  {
    "text": "that does it work now yeah now it works",
    "start": "1806840",
    "end": "1811919"
  },
  {
    "text": "and this shipping estimate ah okay it's a shipping estimate that makes the problem let's have a look",
    "start": "1811919",
    "end": "1819760"
  },
  {
    "text": "what it actually is dollar price dollar field actually looks good",
    "start": "1819760",
    "end": "1836480"
  },
  {
    "text": "okay",
    "start": "1836480",
    "end": "1838799"
  },
  {
    "text": "shipping estimate okay i don't know what i messed up with this field",
    "start": "1842080",
    "end": "1847679"
  },
  {
    "text": "doesn't matter it usually works okay let's go to the review service and",
    "start": "1847679",
    "end": "1855360"
  },
  {
    "text": "integrate here the the rest of it",
    "start": "1855360",
    "end": "1859278"
  },
  {
    "text": "and that essentially is extending the product types with the reviews so now",
    "start": "1860799",
    "end": "1870240"
  },
  {
    "text": "now my product will essentially have a list of reviews to that product",
    "start": "1870240",
    "end": "1876799"
  },
  {
    "text": "and this lets me really now also drill into my a graph my data graph",
    "start": "1876799",
    "end": "1884559"
  },
  {
    "text": "from the product side so i can drill now in here reviews",
    "start": "1884559",
    "end": "1891120"
  },
  {
    "text": "i can go in the author of the review get the name here and also from the reviews",
    "start": "1891120",
    "end": "1899440"
  },
  {
    "text": "get the body try and run that look at the result a",
    "start": "1899760",
    "end": "1906799"
  },
  {
    "text": "bit and i can see here that i have a table",
    "start": "1906799",
    "end": "1911840"
  },
  {
    "text": "that is in stock and i'm drilling in and pulling up the review body here",
    "start": "1911840",
    "end": "1919120"
  },
  {
    "text": "edda lovelace loved it so it works so this is a pretty easy to build up",
    "start": "1919120",
    "end": "1926000"
  },
  {
    "text": "your graph and this essentially lets you really drive all this from the domain services you",
    "start": "1926000",
    "end": "1934080"
  },
  {
    "text": "don't have to wait for one another to deploy a new gateway",
    "start": "1934080",
    "end": "1939519"
  },
  {
    "text": "because you can do everything from the downstream services",
    "start": "1939519",
    "end": "1944960"
  },
  {
    "start": "1943000",
    "end": "2106000"
  },
  {
    "text": "so there is another thing here because sometimes you want to mix approaches",
    "start": "1946159",
    "end": "1952320"
  },
  {
    "text": "and while we use now a federated stitching approach here sometimes you really want to add some",
    "start": "1952320",
    "end": "1962320"
  },
  {
    "text": "some logic to the gateway maybe you have a very static logic that does some some things integrate some",
    "start": "1962320",
    "end": "1970159"
  },
  {
    "text": "data modify some data since this gateway essentially is a simple graphql server you can also",
    "start": "1970159",
    "end": "1977679"
  },
  {
    "text": "really put here everything in that you would in this demographical server",
    "start": "1977679",
    "end": "1983760"
  },
  {
    "text": "so i could also just create here maybe a code first type extension",
    "start": "1983760",
    "end": "1990880"
  },
  {
    "text": "like let's call it queries",
    "start": "1990880",
    "end": "1995440"
  },
  {
    "text": "and this varies type",
    "start": "1996000",
    "end": "2000559"
  },
  {
    "text": "extends an object type",
    "start": "2002840",
    "end": "2008880"
  },
  {
    "text": "in this case we are extending queries and even brings in its own type let's",
    "start": "2010480",
    "end": "2016799"
  },
  {
    "text": "call it maybe the address",
    "start": "2016799",
    "end": "2021518"
  },
  {
    "text": "and we just give it a street",
    "start": "2031360",
    "end": "2034559"
  },
  {
    "text": "and maybe we are um we are letting people ask for the address of",
    "start": "2036799",
    "end": "2043760"
  },
  {
    "text": "the company or something like this so we just say address",
    "start": "2043760",
    "end": "2049118"
  },
  {
    "text": "get address",
    "start": "2049119",
    "end": "2051919"
  },
  {
    "text": "and then we return our address object here which says subscript",
    "start": "2055119",
    "end": "2062720"
  },
  {
    "text": "so this is now in our gateway and we can now just say uh add type extension",
    "start": "2062720",
    "end": "2069760"
  },
  {
    "text": "and instead of using the graphql syntax we are now using these nice c sharp types that already",
    "start": "2069760",
    "end": "2078240"
  },
  {
    "text": "bring their resolvers with them and this is not queries this is krabby",
    "start": "2078240",
    "end": "2083760"
  },
  {
    "text": "sorry and already our system should have",
    "start": "2083760",
    "end": "2089520"
  },
  {
    "text": "be reloaded we can see we have here now a field address and um i could ask for that",
    "start": "2089520",
    "end": "2098240"
  },
  {
    "text": "and already have this object in here and can see that that really also",
    "start": "2098240",
    "end": "2104480"
  },
  {
    "text": "integrates in our data graph but the really cool thing is that we",
    "start": "2104480",
    "end": "2109760"
  },
  {
    "start": "2106000",
    "end": "2243000"
  },
  {
    "text": "also could interconnect these things like we could interconnect that with the data that comes from the downstream",
    "start": "2109760",
    "end": "2116400"
  },
  {
    "text": "services that i don't even know that the downstream stream service is pushing up to us",
    "start": "2116400",
    "end": "2122560"
  },
  {
    "text": "so we could introduce another extension that",
    "start": "2122560",
    "end": "2129520"
  },
  {
    "text": "is our user so we call it even user",
    "start": "2129520",
    "end": "2134480"
  },
  {
    "text": "and we just say this user essentially has an address",
    "start": "2134720",
    "end": "2145680"
  },
  {
    "text": "i know it's the same address over and over again we could also just uh inject here",
    "start": "2145680",
    "end": "2153520"
  },
  {
    "text": "uh the user id and then transfer transform this address and",
    "start": "2153520",
    "end": "2161200"
  },
  {
    "text": "really look it up but demo purposes let's just",
    "start": "2161200",
    "end": "2166720"
  },
  {
    "text": "keep that simple so we have extending the user and that's a central approach i would",
    "start": "2167040",
    "end": "2172320"
  },
  {
    "text": "say where we just say add type extension then put in the user",
    "start": "2172320",
    "end": "2186640"
  },
  {
    "text": "and again this is a type extension this is actually not the user that is just the user in our context",
    "start": "2186640",
    "end": "2192320"
  },
  {
    "text": "but it extends the user of the overall graph so our graph should already have",
    "start": "2192320",
    "end": "2198960"
  },
  {
    "text": "reloaded and we should be able now to sit here in",
    "start": "2198960",
    "end": "2204480"
  },
  {
    "text": "our user and ask for the user's address and that's just in there address does",
    "start": "2204480",
    "end": "2212800"
  },
  {
    "text": "not exist on the type user okay that i messed up was totally improvised",
    "start": "2212800",
    "end": "2220640"
  },
  {
    "text": "but essentially this would work under normal conditions i don't know why",
    "start": "2220640",
    "end": "2226320"
  },
  {
    "text": "it delegated this yet",
    "start": "2226320",
    "end": "2230560"
  },
  {
    "text": "okay but essentially you can drive the graph from two directions you can either use the",
    "start": "2231440",
    "end": "2237119"
  },
  {
    "text": "central approach to advance your graph or you can change it from the",
    "start": "2237119",
    "end": "2242160"
  },
  {
    "text": "from the domain servers and this means that now i'm really able to change",
    "start": "2242160",
    "end": "2248800"
  },
  {
    "text": "things in my accounts graph like go in here and maybe also introduce from",
    "start": "2248800",
    "end": "2255520"
  },
  {
    "text": "the bottom up changes to my to my system for instance i could remove the username",
    "start": "2255520",
    "end": "2262880"
  },
  {
    "text": "and we say okay name is enough we don't need that username and and then just get",
    "start": "2262880",
    "end": "2270560"
  },
  {
    "text": "rid of this here",
    "start": "2270560",
    "end": "2273520"
  },
  {
    "text": "and have a look at my overall graph again where at the moment we still can see the",
    "start": "2278480",
    "end": "2286079"
  },
  {
    "text": "username and when we refresh we can see it's gone",
    "start": "2286079",
    "end": "2292160"
  },
  {
    "text": "so now that the team that is owning the account service is totally",
    "start": "2292160",
    "end": "2297520"
  },
  {
    "text": "enabled to just push their changes to push their graph and don't",
    "start": "2297520",
    "end": "2304880"
  },
  {
    "text": "always be blocked by the other teams there's one more aspect i want to",
    "start": "2304880",
    "end": "2312000"
  },
  {
    "text": "highlight here and that's why we also introduce that",
    "start": "2312000",
    "end": "2317040"
  },
  {
    "text": "whole thing with redis that we allow the configurations to be stored",
    "start": "2317040",
    "end": "2324480"
  },
  {
    "text": "there is a federated approach where you essentially pull in the changes from your downstream",
    "start": "2324480",
    "end": "2330480"
  },
  {
    "text": "servers so the gateway would occasionally pull and refresh the schemas that are",
    "start": "2330480",
    "end": "2338400"
  },
  {
    "text": "that are now in refresh downstream services um but this always introduces the",
    "start": "2338400",
    "end": "2344400"
  },
  {
    "text": "problem that the gateway would need to stitch every now and then with the",
    "start": "2344400",
    "end": "2353359"
  },
  {
    "start": "2351000",
    "end": "2498000"
  },
  {
    "text": "redis approach we essentially push the schema configurations to the redis",
    "start": "2353359",
    "end": "2359920"
  },
  {
    "text": "and then do in the background uh the schema stitching and store the",
    "start": "2359920",
    "end": "2365359"
  },
  {
    "text": "stitched schema on the redis meaning that if any service in our",
    "start": "2365359",
    "end": "2371760"
  },
  {
    "text": "federation would go down has an error the overall graph wouldn't be affected",
    "start": "2371760",
    "end": "2378720"
  },
  {
    "text": "let me demonstrate that go back to our solution go back to our",
    "start": "2378720",
    "end": "2384560"
  },
  {
    "text": "project here and introduce a change",
    "start": "2384560",
    "end": "2389680"
  },
  {
    "text": "that essentially breaks our graph foil for a minute so we go to our",
    "start": "2389680",
    "end": "2396560"
  },
  {
    "text": "user and this time we are reintroducing the username",
    "start": "2396560",
    "end": "2403359"
  },
  {
    "text": "and this will now yield in a compile error so we can see this doesn't really",
    "start": "2407040",
    "end": "2413680"
  },
  {
    "text": "work anymore and that means we our thai orchestrator cannot",
    "start": "2413680",
    "end": "2421359"
  },
  {
    "text": "get this machine up anymore and that's actually exactly what i want here since now if i execute against that i",
    "start": "2421359",
    "end": "2430079"
  },
  {
    "text": "can see there are errors against the the data graph",
    "start": "2430079",
    "end": "2435200"
  },
  {
    "text": "but actually there are only errors",
    "start": "2435200",
    "end": "2440800"
  },
  {
    "text": "to the data portion that works with the user",
    "start": "2440800",
    "end": "2447760"
  },
  {
    "text": "so if i for instance just get the products i don't have any problem and i also have no problem if i fetch",
    "start": "2448720",
    "end": "2456560"
  },
  {
    "text": "the author here want the name i get an error",
    "start": "2456560",
    "end": "2464079"
  },
  {
    "text": "that's that's true but graphql is actually very good at working with partial data so graphql it doesn't just",
    "start": "2464079",
    "end": "2470640"
  },
  {
    "text": "fail uh graphql will still give you the data that is valid and just um return now for the also",
    "start": "2470640",
    "end": "2477920"
  },
  {
    "text": "because the author in this instance was nullable that means i still can use all the",
    "start": "2477920",
    "end": "2483599"
  },
  {
    "text": "products data and and my my whole data graph doesn't go down just",
    "start": "2483599",
    "end": "2491119"
  },
  {
    "text": "because some developer made a change that really affected my overall graph",
    "start": "2491119",
    "end": "2498480"
  },
  {
    "start": "2498000",
    "end": "2529000"
  },
  {
    "text": "um that can also be combined with things like kubernetes where you first",
    "start": "2498640",
    "end": "2503760"
  },
  {
    "text": "try to stitch try to stitch try to push the new configuration to redis and then if we cannot stitch that",
    "start": "2503760",
    "end": "2512079"
  },
  {
    "text": "this is uh um this will lead to enhanced uh health check problem so you can",
    "start": "2512079",
    "end": "2518160"
  },
  {
    "text": "implement the health check there and then docker will kubernetes will just",
    "start": "2518160",
    "end": "2523280"
  },
  {
    "text": "roll back your container and your old graph will be fully intact but even if there",
    "start": "2523280",
    "end": "2530480"
  },
  {
    "start": "2529000",
    "end": "2579000"
  },
  {
    "text": "are things like the databases down from one of the microservice services or domain services you will",
    "start": "2530480",
    "end": "2536960"
  },
  {
    "text": "still be able to consume most of the data that you have in your data graph and i think that is from a resilience",
    "start": "2536960",
    "end": "2544560"
  },
  {
    "text": "perspective really a nice thing so let's put back the data graph in",
    "start": "2544560",
    "end": "2551760"
  },
  {
    "text": "order save that we are redeploying the whole",
    "start": "2551760",
    "end": "2559760"
  },
  {
    "text": "thing and now we can put we have an intact graph again",
    "start": "2559760",
    "end": "2568800"
  },
  {
    "text": "okay back to my slides we have a couple of minutes for",
    "start": "2570319",
    "end": "2577200"
  },
  {
    "text": "questions in a minute so we built a distributed graph with",
    "start": "2577200",
    "end": "2582800"
  },
  {
    "text": "graphql we saw that it's actually not so difficult and really enables",
    "start": "2582800",
    "end": "2588560"
  },
  {
    "text": "really enables you to iterate faster",
    "start": "2588560",
    "end": "2593839"
  },
  {
    "text": "with federated graphs in graphql you are more flexible it adds complexity",
    "start": "2593839",
    "end": "2601040"
  },
  {
    "text": "especially you have to think about things like roll backing your container and stuff like that",
    "start": "2601040",
    "end": "2607760"
  },
  {
    "text": "but it adds more flexible flexibility when you are spreading out your team when your data graph grows when more",
    "start": "2607760",
    "end": "2614160"
  },
  {
    "text": "teams are involved i would definitely always tell people",
    "start": "2614160",
    "end": "2619359"
  },
  {
    "text": "to first start without without schema stitching or without",
    "start": "2619359",
    "end": "2625839"
  },
  {
    "text": "federated graphs just build a single monolith at the beginning because it's super easy",
    "start": "2625839",
    "end": "2632480"
  },
  {
    "text": "and then spread out the work and that is actually really simple to do you can",
    "start": "2632480",
    "end": "2639440"
  },
  {
    "text": "even first start doing local schema stitching",
    "start": "2639440",
    "end": "2645280"
  },
  {
    "text": "where you start to create multiple schemas within one service and spread them out slowly and then when you're ready",
    "start": "2645760",
    "end": "2653200"
  },
  {
    "text": "you move them into a separate service so there's actually no reason to immediately start with schema stitching",
    "start": "2653200",
    "end": "2660800"
  },
  {
    "text": "but it is something that you should consider when your data graph grows and grows and you are suddenly",
    "start": "2660800",
    "end": "2669040"
  },
  {
    "text": "having problems to deploy the whole thing because you always have to deploy everything um",
    "start": "2669040",
    "end": "2675280"
  },
  {
    "text": "there are multiple approaches to these kinds of um distributed graphs as we saw in schema",
    "start": "2675280",
    "end": "2681680"
  },
  {
    "text": "stitching where we can do a central approach and there's also the approach where you push data in a federated",
    "start": "2681680",
    "end": "2689200"
  },
  {
    "text": "setup yeah you can deploy faster and you can deploy more easily with this setup since",
    "start": "2689200",
    "end": "2697599"
  },
  {
    "text": "you essentially can push micro changes to your domain services and",
    "start": "2697599",
    "end": "2705520"
  },
  {
    "text": "swap out just uh small units of your of your graph it also divides the graph",
    "start": "2705520",
    "end": "2713359"
  },
  {
    "text": "in logical concerns like the account inventory",
    "start": "2713359",
    "end": "2718800"
  },
  {
    "text": "checks and stuff like that",
    "start": "2718800",
    "end": "2722079"
  },
  {
    "start": "2723000",
    "end": "3131000"
  },
  {
    "text": "if you want to try it out get to our github repository",
    "start": "2724079",
    "end": "2729200"
  },
  {
    "text": "or head over to our website at chulukim.com and if you have",
    "start": "2729200",
    "end": "2734880"
  },
  {
    "text": "questions i would be open to answer questions now",
    "start": "2734880",
    "end": "2747838"
  },
  {
    "text": "um i've got a question it's not related to the talk exactly but i saw you using project thai",
    "start": "2778880",
    "end": "2785200"
  },
  {
    "text": "and yes one of the new things in dotnet 5 is that when you're when you're using.net watch and the",
    "start": "2785200",
    "end": "2791599"
  },
  {
    "text": "application changes your browser is refreshed as well does this work with project tai uh",
    "start": "2791599",
    "end": "2799119"
  },
  {
    "text": "not not really no that's that it's not tight",
    "start": "2799119",
    "end": "2804240"
  },
  {
    "text": "so i was wondering yeah it is super fast it just uh switches out the parts that you need",
    "start": "2804240",
    "end": "2810720"
  },
  {
    "text": "to reload i really like it um for demos and also for",
    "start": "2810720",
    "end": "2816079"
  },
  {
    "text": "working locally it's not saying i mean when you publish your stuff you use things like",
    "start": "2816079",
    "end": "2821440"
  },
  {
    "text": "cubic meters but this is always a pain to set up in the thai configuration actually",
    "start": "2821440",
    "end": "2828880"
  },
  {
    "text": "you can put everything together uh like i have here the redis container",
    "start": "2828880",
    "end": "2835680"
  },
  {
    "text": "that i used and this is just being pulled down from docker hub",
    "start": "2835680",
    "end": "2840800"
  },
  {
    "text": "and then i have my projects and everything is set up nicely so it's really a nice",
    "start": "2840800",
    "end": "2848079"
  },
  {
    "text": "thing and one cool thing i don't know i don't know if you have seen that",
    "start": "2848079",
    "end": "2856079"
  },
  {
    "text": "you can go here on the thai dashboard and then you have essentially an",
    "start": "2856079",
    "end": "2861760"
  },
  {
    "text": "overview over your services that are running cool you can see that here is the container and stuff so there's always a",
    "start": "2861760",
    "end": "2868640"
  },
  {
    "text": "management instance and you even can intercept the uh intercept the calls between the",
    "start": "2868640",
    "end": "2874640"
  },
  {
    "text": "containers and stuff so that that is an option that you have to configure but then um thai will issue like",
    "start": "2874640",
    "end": "2882400"
  },
  {
    "text": "site containers to intercept the communication between all this stuff",
    "start": "2882400",
    "end": "2887920"
  },
  {
    "text": "and that is really great to debug so i love this this thing yeah that's awesome stuff i have to try",
    "start": "2887920",
    "end": "2894000"
  },
  {
    "text": "it thanks yeah",
    "start": "2894000",
    "end": "2901839"
  },
  {
    "text": "okay if you also have questions afterwards you just can give me a message um is the um",
    "start": "2903520",
    "end": "2910720"
  },
  {
    "text": "project up in like github or is it on your website you mean uh",
    "start": "2910720",
    "end": "2917200"
  },
  {
    "text": "the the hot chocolate project is what you've just been using yes",
    "start": "2917200",
    "end": "2922400"
  },
  {
    "text": "uh you mean time you mean the the the um the main talk",
    "start": "2923520",
    "end": "2930240"
  },
  {
    "text": "ah okay just making sure yeah here's how chocolate the whole code is here is open source",
    "start": "2930240",
    "end": "2936720"
  },
  {
    "text": "it's um and the mit license so a fork it have fun with it",
    "start": "2936720",
    "end": "2944800"
  },
  {
    "text": "use it or give us a star if you liked it we always appreciate that there are more",
    "start": "2944800",
    "end": "2952000"
  },
  {
    "text": "tools to that we we not only have schema stitching graphql server",
    "start": "2952000",
    "end": "2957760"
  },
  {
    "text": "or we also have a graphqlclient4.net that is fully typed and we are one of",
    "start": "2957760",
    "end": "2964319"
  },
  {
    "text": "the fastest graphql servers that are out there we just released version 11.",
    "start": "2964319",
    "end": "2973599"
  },
  {
    "text": "if somebody is interested and rafael we are at the moment",
    "start": "2973680",
    "end": "2981920"
  },
  {
    "text": "at the moment it always changes because as soon as you put out benchmarks somebody else will try to",
    "start": "2981920",
    "end": "2989599"
  },
  {
    "text": "beat you always away",
    "start": "2990319",
    "end": "2999839"
  },
  {
    "text": "thanks thanks for talking it's really been helpful you're welcome",
    "start": "3000079",
    "end": "3013839"
  },
  {
    "text": "good uh i will be available on this lecture so you can also shoot me a",
    "start": "3013839",
    "end": "3018960"
  },
  {
    "text": "message and i will be sure to answer uh sorry",
    "start": "3018960",
    "end": "3026480"
  },
  {
    "text": "one quick question before you showed um you know during the process well i presume it is but uh can you i",
    "start": "3026480",
    "end": "3033680"
  },
  {
    "text": "mean you need the example for example yeah um it is uh i have",
    "start": "3033680",
    "end": "3043839"
  },
  {
    "text": "there are examples but this with high i haven't uh pushed to our example repository so usually the",
    "start": "3044640",
    "end": "3051280"
  },
  {
    "text": "examples are here but i always put my",
    "start": "3051280",
    "end": "3056319"
  },
  {
    "text": "public speaking demos up and essentially you can go to my repo",
    "start": "3056319",
    "end": "3061839"
  },
  {
    "text": "michael style public speaking and then you can look nfc london",
    "start": "3061839",
    "end": "3068800"
  },
  {
    "text": "and then the whole demo is here there it is there there is actually a",
    "start": "3068800",
    "end": "3075599"
  },
  {
    "text": "better way i'm just we have this workshop repository which has a guided walkthrough to all",
    "start": "3075599",
    "end": "3083440"
  },
  {
    "text": "graphql and if you here go on version two you also have a scripted version",
    "start": "3083440",
    "end": "3088960"
  },
  {
    "text": "of all the schema stitching variants like uh the schema federation with hot",
    "start": "3088960",
    "end": "3094480"
  },
  {
    "text": "chocolate and there is even the scripted version that you can",
    "start": "3094480",
    "end": "3100000"
  },
  {
    "text": "try out yourself to build that up all right that's great thank you i can",
    "start": "3100000",
    "end": "3106559"
  },
  {
    "text": "close that post that to the slack channel and then you can find the link",
    "start": "3106559",
    "end": "3114720"
  },
  {
    "text": "that also has all the nice thai magic in",
    "start": "3116720",
    "end": "3121838"
  },
  {
    "text": "it",
    "start": "3122839",
    "end": "3125839"
  },
  {
    "text": "you",
    "start": "3131040",
    "end": "3133119"
  }
]