[
  {
    "text": "okay hi everyone good morning uh who was here in my talk",
    "start": "3919",
    "end": "10400"
  },
  {
    "text": "yesterday okay so we'll cover some of the things but uh not all of them again",
    "start": "10400",
    "end": "16320"
  },
  {
    "text": "because I don't want you to get bored uh this is the C++ unit testing talk good",
    "start": "16320",
    "end": "21800"
  },
  {
    "text": "bad and ugly and before that a few words about myself my name is D helper I am a",
    "start": "21800",
    "end": "29199"
  },
  {
    "text": "developer and consultant working at code value I specialize in unit testing TD",
    "start": "29199",
    "end": "35200"
  },
  {
    "text": "bdd clean code how to write your code better kind of stuff I also write quite",
    "start": "35200",
    "end": "40520"
  },
  {
    "text": "a lot of code in C++ Java and net languages I also have two courses in",
    "start": "40520",
    "end": "46800"
  },
  {
    "text": "plural site both of them in C++ first of which is a C++ fundamentals using catch",
    "start": "46800",
    "end": "53680"
  },
  {
    "text": "and the second is deep dive into mocking with Google mock I have a Blog at helper code.com",
    "start": "53680",
    "end": "60600"
  },
  {
    "text": "and you can reach me on Twitter using the helper anyone here is also with net",
    "start": "60600",
    "end": "66520"
  },
  {
    "text": "developer okay um have you checked out the osod the booth down if not oh",
    "start": "66520",
    "end": "73439"
  },
  {
    "text": "excellent if not you should it will help you debug your code so let's start let's talk about C++",
    "start": "73439",
    "end": "82079"
  },
  {
    "text": "I love C++ I think it's a great language it's an amazing language it give me so",
    "start": "82079",
    "end": "87240"
  },
  {
    "text": "much power it's in my belief it's the only truly multi-paradigm language you can",
    "start": "87240",
    "end": "93360"
  },
  {
    "text": "write anything from procedural code to functional code with object oriented and meta programming in between on top of",
    "start": "93360",
    "end": "101280"
  },
  {
    "text": "that it's very it's highly performant language you have the ability to change",
    "start": "101280",
    "end": "106560"
  },
  {
    "text": "the way the memory works and how your object works with a single keyword you",
    "start": "106560",
    "end": "112079"
  },
  {
    "text": "can make your code moves completely different you can access the GPU and the CPU and the compiler on top of that will",
    "start": "112079",
    "end": "119399"
  },
  {
    "text": "do optim ation we can only dream of in other languages it is a multiplatform language",
    "start": "119399",
    "end": "126360"
  },
  {
    "text": "and it doesn't matter what other languages starting with the J says they are not truly multiplatform like like",
    "start": "126360",
    "end": "132720"
  },
  {
    "text": "C++ and I have worked in a in a project in which we've created an highly",
    "start": "132720",
    "end": "138080"
  },
  {
    "text": "performant multi-tenant um Voiceover IP project and",
    "start": "138080",
    "end": "143599"
  },
  {
    "text": "the core of it was C++ and it worked flawlessly on any single operating system and platform from arm and Android",
    "start": "143599",
    "end": "151519"
  },
  {
    "text": "to iOS Windows Linux Mac you name it C++ will give you that if you can compile",
    "start": "151519",
    "end": "158160"
  },
  {
    "text": "your code you can run your code and it behaves well with other languages as well because we are not",
    "start": "158160",
    "end": "164840"
  },
  {
    "text": "snubs we can call Java and Java can call C++ and net can call or be called by C++",
    "start": "164840",
    "end": "171400"
  },
  {
    "text": "and python can call C or C++ in a way which make it really useful language to",
    "start": "171400",
    "end": "178360"
  },
  {
    "text": "have because we can rely on all code which works to this day and use it with",
    "start": "178360",
    "end": "183480"
  },
  {
    "text": "new languages and it has so much power we can extend the language using mecos and",
    "start": "183480",
    "end": "189519"
  },
  {
    "text": "templates and type dep and other capabilities and if we really want to we",
    "start": "189519",
    "end": "195319"
  },
  {
    "text": "can do lowlevel programming either the GPU or right inline assembly or decide whether or not",
    "start": "195319",
    "end": "202080"
  },
  {
    "text": "that specific B of memory will be allocated or deallocated which gives us a lot of power and on top of that this",
    "start": "202080",
    "end": "209280"
  },
  {
    "text": "is the Lang language in which the development world was written compilers operating system were written using C++",
    "start": "209280",
    "end": "215760"
  },
  {
    "text": "even some languages which has compilers that are not written with C++ that compilers were written with C++ or the",
    "start": "215760",
    "end": "223560"
  },
  {
    "text": "platform or the runtime or whatever is C++ all and that's very powerful things",
    "start": "223560",
    "end": "228720"
  },
  {
    "text": "to have because if we if we think about it we can understand how they work",
    "start": "228720",
    "end": "235079"
  },
  {
    "text": "because we wrote similar codes unfortunately with this great power comes great responsibility as well",
    "start": "235079",
    "end": "242519"
  },
  {
    "text": "C++ is not an easy language to master it's a language in which you can cause a",
    "start": "242519",
    "end": "249159"
  },
  {
    "text": "lot of pain and problem easily without intending to you can take a junior",
    "start": "249159",
    "end": "255159"
  },
  {
    "text": "developer give him C++ code and say well good luck because you'll probably have",
    "start": "255159",
    "end": "260720"
  },
  {
    "text": "some memory location problem or dangling pointer things and and create a big mess and C++",
    "start": "260720",
    "end": "268560"
  },
  {
    "text": "require us to know exactly what we do and then understand how the language",
    "start": "268560",
    "end": "273759"
  },
  {
    "text": "behaves and if you've been to the talks about C++ 17 so it's completely over my head",
    "start": "273759",
    "end": "282639"
  },
  {
    "text": "topics there about when to use expr and other keywords that change completely",
    "start": "282639",
    "end": "287759"
  },
  {
    "text": "what the language does and you need to know the out of order execution and whatever happens in specific processors",
    "start": "287759",
    "end": "294440"
  },
  {
    "text": "in some cases if that's what you do and that is a bit of a problem because",
    "start": "294440",
    "end": "300160"
  },
  {
    "text": "we human makes mistakes but the solution at least I found that there's one good solution to that mistake and this is the",
    "start": "300160",
    "end": "307199"
  },
  {
    "text": "topic of the session and those are those unit tests because unit test enable me",
    "start": "307199",
    "end": "312280"
  },
  {
    "text": "to catch at least the simple mistakes which tend to happen quite a lot unit",
    "start": "312280",
    "end": "318600"
  },
  {
    "text": "tests enable me to write code I have full confident in it helps me to catch",
    "start": "318600",
    "end": "324120"
  },
  {
    "text": "the stupid bugs there I forgot to allocate memory kind of bugs I",
    "start": "324120",
    "end": "329759"
  },
  {
    "text": "accidentally went over the boundaries of the array kind of bugs because if that bug is this in the code you will catch",
    "start": "329759",
    "end": "336240"
  },
  {
    "text": "it with the unit test it uh won't give you system wide bugs but it will help",
    "start": "336240",
    "end": "342120"
  },
  {
    "text": "you the submit code for testing that will not crash immediately and that's a",
    "start": "342120",
    "end": "348319"
  },
  {
    "text": "good thing on top of that it will give me the early feedback when I was",
    "start": "348319",
    "end": "354280"
  },
  {
    "text": "beginning my C++ Journey more than 10 years ago I would write my code",
    "start": "354280",
    "end": "360680"
  },
  {
    "text": "submit it for testing throw it over the fence go home and the Tester the PO",
    "start": "360680",
    "end": "366000"
  },
  {
    "text": "tester will run my code and it will crash immediately it will for it back at me and with unit test I don't need to do",
    "start": "366000",
    "end": "372680"
  },
  {
    "text": "that anymore I get that early feedback I know that I wrote the code the right way",
    "start": "372680",
    "end": "378360"
  },
  {
    "text": "I know that my code does not crash when executed in a most trivial way on top of",
    "start": "378360",
    "end": "384080"
  },
  {
    "text": "that it helps me understand whether or not I wrote The Right theme not just the right code because some of time we are",
    "start": "384080",
    "end": "392800"
  },
  {
    "text": "developing something deciding to develop a feature going in that direction but on",
    "start": "392800",
    "end": "397880"
  },
  {
    "text": "the way we think about something completely different and accidentally or not intentionally we develop something",
    "start": "397880",
    "end": "403880"
  },
  {
    "text": "completely different once I get to test that code I'll find out I develop the",
    "start": "403880",
    "end": "408960"
  },
  {
    "text": "wrong feature I don't forget features with the C++ as well but with unit testing as well because all I need to do",
    "start": "408960",
    "end": "416400"
  },
  {
    "text": "is to write a test to remember that I forgot to implement that specific feature and the big selling point of unit test",
    "start": "416400",
    "end": "421800"
  },
  {
    "text": "are regression because once I get a good unit test in site it means that if I",
    "start": "421800",
    "end": "427160"
  },
  {
    "text": "accidentally when fixing a bug create another bug it will be CAU by existing",
    "start": "427160",
    "end": "433000"
  },
  {
    "text": "unit test unit testing is also a good way to do design either by doing test driven",
    "start": "433000",
    "end": "440240"
  },
  {
    "text": "development or behavior driven development right in your test before your code or if you decide to do the",
    "start": "440240",
    "end": "447120"
  },
  {
    "text": "other way around R the test afterwards you you have to think about design Loosely coupled design object oriented",
    "start": "447120",
    "end": "453879"
  },
  {
    "text": "design how the dependencies interact with one another you have no other choice because you need to test it and",
    "start": "453879",
    "end": "459960"
  },
  {
    "text": "you need to think about those things and it helps you write very modular very Loosely coupled kind of code and on top",
    "start": "459960",
    "end": "467440"
  },
  {
    "text": "of that unit testing a good good documentation when I go into a new open",
    "start": "467440",
    "end": "472479"
  },
  {
    "text": "source project sometime the that documentation is not so good but most uh",
    "start": "472479",
    "end": "477960"
  },
  {
    "text": "open source projects these days have some form of unit test and by reading the unit test I can understand why the",
    "start": "477960",
    "end": "484000"
  },
  {
    "text": "author thought about how you should use your code how you should run it what you should do with it what are the valid or",
    "start": "484000",
    "end": "490759"
  },
  {
    "text": "invalid inputs and you can debug those documentation as well it's not like a Word document or mcdown document which",
    "start": "490759",
    "end": "496560"
  },
  {
    "text": "we all probably use these days it's something I can actually run and see execute and understand how the underline",
    "start": "496560",
    "end": "503240"
  },
  {
    "text": "system work and when I write unit test I know something that in two months time in one in half a year time in one year",
    "start": "503240",
    "end": "509080"
  },
  {
    "text": "time when I go back to that code and I forget everything about that specific piece of code I can run the init test",
    "start": "509080",
    "end": "516200"
  },
  {
    "text": "and remember how I intended other people to use it so unit test is a cool FL to",
    "start": "516200",
    "end": "521839"
  },
  {
    "text": "have now what is this unit test there are many definitions by the way this is",
    "start": "521839",
    "end": "527200"
  },
  {
    "text": "my own and the unitest essentially is just a method that's it no more no less",
    "start": "527200",
    "end": "532519"
  },
  {
    "text": "it's a method with specific other rules or similar to rules to how we write",
    "start": "532519",
    "end": "538800"
  },
  {
    "text": "other methods in our production code and there are some rules that change when",
    "start": "538800",
    "end": "544160"
  },
  {
    "text": "you write unit test from when you write production code the first of which that a unit test tests a specific piece of",
    "start": "544160",
    "end": "551600"
  },
  {
    "text": "functionality a specific piece of functionality is the other way around from how we write production code",
    "start": "551600",
    "end": "556760"
  },
  {
    "text": "because if I write a method in my code that's supposed to solve some problem",
    "start": "556760",
    "end": "561839"
  },
  {
    "text": "and I'll just solve one scenario one specific path if the problem I'm not doing my job but in unit test if I'll",
    "start": "561839",
    "end": "568920"
  },
  {
    "text": "try to test too many things I'll probably write an unmaintainable unreadable test so it has to test only a",
    "start": "568920",
    "end": "576240"
  },
  {
    "text": "specific functionality and it has to have a very clear path of fail criteria and uh the",
    "start": "576240",
    "end": "583480"
  },
  {
    "text": "reason I'm saying that because I was in a client and they told me they are doing unitest now uh terminology may vary",
    "start": "583480",
    "end": "590519"
  },
  {
    "text": "between companies and what they mean by unitest is that they have this uh U script that runs on two different big",
    "start": "590519",
    "end": "597959"
  },
  {
    "text": "databases and does something and in the morning a tester will come in and about until",
    "start": "597959",
    "end": "604320"
  },
  {
    "text": "lunch or afternoon depending on how much work he has he will read the result and decide whether or not the test actually",
    "start": "604320",
    "end": "610480"
  },
  {
    "text": "passed and that's not what we want I don't want to check the test I want the test to tell me whether or not it passed",
    "start": "610480",
    "end": "616519"
  },
  {
    "text": "or failed and finally unit test question no finally unit test should run in",
    "start": "616519",
    "end": "623640"
  },
  {
    "text": "isolation what do I mean I don't want any external dependencies in my unitest I don't want to call a server or file",
    "start": "623640",
    "end": "629959"
  },
  {
    "text": "system or uh other external things out outside of my control I do want to do",
    "start": "629959",
    "end": "636839"
  },
  {
    "text": "that in a different kind of test which are WR in a very similar way which are called either integration test or scenario test or acceptances and that's",
    "start": "636839",
    "end": "643519"
  },
  {
    "text": "okay but I'm talking about unit test at the moment and the reason I want to do that is because I want those test to run",
    "start": "643519",
    "end": "649360"
  },
  {
    "text": "fast I want to run thousand of tests and I don't want to to call to be about half",
    "start": "649360",
    "end": "655240"
  },
  {
    "text": "an hour to run all the tests and I don't want the test to fail because of some EX dependency I don't want the test to fail",
    "start": "655240",
    "end": "661519"
  },
  {
    "text": "because my database doesn't have the right permission or the right data right now uh when that happen the test will",
    "start": "661519",
    "end": "668440"
  },
  {
    "text": "start passing or failing without any reason without any code change and a test that passes and then fails and then",
    "start": "668440",
    "end": "674240"
  },
  {
    "text": "passes again and then fails what usually happens is that the developers will run",
    "start": "674240",
    "end": "679320"
  },
  {
    "text": "the test again until it passes and then quickly they'll get used to the test",
    "start": "679320",
    "end": "684880"
  },
  {
    "text": "being failing from time to time and then all the time maybe and that point",
    "start": "684880",
    "end": "690040"
  },
  {
    "text": "probably they'll stop noticing when other test fails and when those tests start to fail and nobody care about",
    "start": "690040",
    "end": "697279"
  },
  {
    "text": "whatever runs there you can delete all your tests because that does do not matter anymore so you have to be be very",
    "start": "697279",
    "end": "703680"
  },
  {
    "text": "careful with those tests sometimes passes and then fails you should delete them or change them because they will",
    "start": "703680",
    "end": "709560"
  },
  {
    "text": "only hurt you in the long run and this is a unit test written with",
    "start": "709560",
    "end": "715120"
  },
  {
    "text": "Google test I'll show you other unit test in Frameworks uh in C+ Plus World",
    "start": "715120",
    "end": "720240"
  },
  {
    "text": "usually but not always there are many options I need to Define this method which is a unit test and in Google test",
    "start": "720240",
    "end": "726480"
  },
  {
    "text": "I do it using this guy this is a mecho which all C++ veteran C++ know because",
    "start": "726480",
    "end": "733000"
  },
  {
    "text": "it's in uppercase right and that mecho does three things first of all it",
    "start": "733000",
    "end": "739000"
  },
  {
    "text": "defines that I am going to write a method the method name is in Google test",
    "start": "739000",
    "end": "744399"
  },
  {
    "text": "actually this the name of the test is the method test it will create a method in the background it will also create a",
    "start": "744399",
    "end": "750560"
  },
  {
    "text": "class if it needs to and the name of the class is this guy movie test so in the",
    "start": "750560",
    "end": "755920"
  },
  {
    "text": "background what we essentially have here is a class with the method inside and the interesting part is over here this",
    "start": "755920",
    "end": "763240"
  },
  {
    "text": "is the test body which if we do our work correctly is divided into three parts",
    "start": "763240",
    "end": "768959"
  },
  {
    "text": "the first part known as assert arrange sorry is the part in which I create all the dependencies and things I need in",
    "start": "768959",
    "end": "775320"
  },
  {
    "text": "order for the test to run the second part is the act where I'll run the",
    "start": "775320",
    "end": "780760"
  },
  {
    "text": "actual functionality I need to test this is like a play button for the test and the last one also known as assert and",
    "start": "780760",
    "end": "788880"
  },
  {
    "text": "that's historically because these days some unit testing Frameworks does not have assert I have other words for it",
    "start": "788880",
    "end": "795440"
  },
  {
    "text": "and in which I test the result and if you know the movie The Good the Bad and the Ugly you might even know the scene",
    "start": "795440",
    "end": "802279"
  },
  {
    "text": "I'm testing you so that's Google test and that's fine other than the unit test in frame I",
    "start": "802279",
    "end": "809399"
  },
  {
    "text": "might need other tools in order to succeed with unit testing the first being unit testing framework but the second in which is a mocking framework",
    "start": "809399",
    "end": "817440"
  },
  {
    "text": "and mocking framework is something we'll talk about later on I will also need some additional things that will help me",
    "start": "817440",
    "end": "824040"
  },
  {
    "text": "write my test quicker and execute them and maybe get some information not not",
    "start": "824040",
    "end": "829760"
  },
  {
    "text": "mandatory but very useful to have a code coverage tool that will show me what I'm actually running and and this is C++ so",
    "start": "829760",
    "end": "837639"
  },
  {
    "text": "I don't always have it some form of development environment an editor in which I write my code and my test and if",
    "start": "837639",
    "end": "844880"
  },
  {
    "text": "I have that I need to run my test from within if you're working on Windows",
    "start": "844880",
    "end": "849959"
  },
  {
    "text": "anyone here working C++ in Windows okay so we have Visual Studio",
    "start": "849959",
    "end": "855199"
  },
  {
    "text": "good for you if you work in Linux you can use eclipse or one of the other options I've been to a company they used",
    "start": "855199",
    "end": "862279"
  },
  {
    "text": "an over glorified notepad for Linux couldn't run their test or their code and that's a problem because you want to",
    "start": "862279",
    "end": "868600"
  },
  {
    "text": "run your test all the time you want to make a change and run the test see what's happen you want to debug a test that's very important other than my own",
    "start": "868600",
    "end": "876360"
  },
  {
    "text": "development machine I also need a continuous integration server a server which will run all my test whenever I",
    "start": "876360",
    "end": "882880"
  },
  {
    "text": "make a change whenever commit a new change it's very important I'm not going to talk about that today the but without",
    "start": "882880",
    "end": "889600"
  },
  {
    "text": "that succeeding with unit testing is hard to Impossible if there's no one",
    "start": "889600",
    "end": "895199"
  },
  {
    "text": "else that runs your test your test will stop working after a while and every developer we all developers we",
    "start": "895199",
    "end": "902759"
  },
  {
    "text": "know we are time limits and we have stressful times at work and sometime we",
    "start": "902759",
    "end": "908120"
  },
  {
    "text": "forget to run the Cod sometime we forget to run the test sometime we do it intentionally because we don't have enough time and even if I have it enough",
    "start": "908120",
    "end": "915480"
  },
  {
    "text": "time and I run all the test all the time if you do that you are better man than me because I don't do that I",
    "start": "915480",
    "end": "921440"
  },
  {
    "text": "forget even if I do that this is my development environment it's dirty with dependencies and all sort of stuff I",
    "start": "921440",
    "end": "928519"
  },
  {
    "text": "need to inst in order to work with my machine and I need a build server that will be very similar to whatever the",
    "start": "928519",
    "end": "935639"
  },
  {
    "text": "client is running in order to make sure that my code runs in as close condition to what I'm creating as",
    "start": "935639",
    "end": "942360"
  },
  {
    "text": "possible so I need a build server to run test as",
    "start": "942360",
    "end": "947480"
  },
  {
    "text": "well so what do I need for my unit test three things for my unit test first of which a unit test will give me tests the",
    "start": "947480",
    "end": "954839"
  },
  {
    "text": "ability to write test and organize them in some form or way uh in the past was",
    "start": "954839",
    "end": "960759"
  },
  {
    "text": "known as fixures very there's a lot of changes in C++ these days so um fixure",
    "start": "960759",
    "end": "967839"
  },
  {
    "text": "is not a good name but I don't have any anything better but the idea is to organize all the test in some form of",
    "start": "967839",
    "end": "974199"
  },
  {
    "text": "logical unit and the another thing I need in for my unit test in framework is assertions the ability to check whether",
    "start": "974199",
    "end": "981040"
  },
  {
    "text": "or not something that I did just worked or didn't work and lastly some some way",
    "start": "981040",
    "end": "986519"
  },
  {
    "text": "to run the test and especially in C++ I want to run all of the test I've just",
    "start": "986519",
    "end": "991720"
  },
  {
    "text": "created automatically I don't want to create like a console application and windows and then write all the test name",
    "start": "991720",
    "end": "998399"
  },
  {
    "text": "in order to run them I wanted to run my test and most if not all unit test",
    "start": "998399",
    "end": "1004040"
  },
  {
    "text": "framework will give me that ability they will also enable me to change how the test are run using command line",
    "start": "1004040",
    "end": "1010639"
  },
  {
    "text": "arguments and that's important more than that there are some unit testing",
    "start": "1010639",
    "end": "1016160"
  },
  {
    "text": "framework that has integration inside your development environment especially in Visual Studio since Microsoft opened",
    "start": "1016160",
    "end": "1023360"
  },
  {
    "text": "the ability to do that in 2012 so that's a cool thing I can run the test from",
    "start": "1023360",
    "end": "1029160"
  },
  {
    "text": "within visual studio and that's that is also very nice capability to",
    "start": "1029160",
    "end": "1035520"
  },
  {
    "text": "have yeah so in the C++ world what options do",
    "start": "1035520",
    "end": "1042000"
  },
  {
    "text": "you have by the way there are many many uh unit Tes in framework in uh the C++",
    "start": "1042000",
    "end": "1048120"
  },
  {
    "text": "world with many different kind of capabilities and styles and that's one",
    "start": "1048120",
    "end": "1055240"
  },
  {
    "text": "of the thing that differentiate C++ from net or even Java the styles of C++ unit",
    "start": "1055240",
    "end": "1063240"
  },
  {
    "text": "testing framework changes from framework to framework because people have been done do amazing things and have been",
    "start": "1063240",
    "end": "1071320"
  },
  {
    "text": "taking the language to the Limit and do cool stuff with un testing if you go to",
    "start": "1071320",
    "end": "1076679"
  },
  {
    "text": "The NET Framework to C all all of the unitest in framework look exactly the same just like junit in C there are some",
    "start": "1076679",
    "end": "1084520"
  },
  {
    "text": "changes some I know changes between them but you know one you know them all it's not the case in C++ in C++ I guess",
    "start": "1084520",
    "end": "1090000"
  },
  {
    "text": "people are more open to experimentation to trying things out so you have you have a lot of options and a lot of style",
    "start": "1090000",
    "end": "1095640"
  },
  {
    "text": "to choose from that's the good thing the bad thing is that you don't always have documentation many of those projects are",
    "start": "1095640",
    "end": "1102320"
  },
  {
    "text": "open source projects and as such that's that someone who does his work late at",
    "start": "1102320",
    "end": "1107720"
  },
  {
    "text": "night after working for 10 or more hours writing code and sometime documentation",
    "start": "1107720",
    "end": "1113799"
  },
  {
    "text": "is not a priority um another problem is that not all unitest in Frameworks are actively",
    "start": "1113799",
    "end": "1120120"
  },
  {
    "text": "maintained and we need to be careful not to take choose some unitest in framework",
    "start": "1120120",
    "end": "1125400"
  },
  {
    "text": "which we can't get support for or some of them don't even have the source code and then we can't even support ourselves",
    "start": "1125400",
    "end": "1131720"
  },
  {
    "text": "and the ugly thing about unites in F C++ is that deployment and luckily for us",
    "start": "1131720",
    "end": "1138080"
  },
  {
    "text": "that's not always is true but deployment can be a problem and another thing if",
    "start": "1138080",
    "end": "1144480"
  },
  {
    "text": "you worked in C or Java you might know that those unit in framework those moing framework use reflection heavily they",
    "start": "1144480",
    "end": "1151640"
  },
  {
    "text": "use reflection in order to understand what to run and how to do it and how to change the objects and we don't have reflection in C++ yet uh nor will we",
    "start": "1151640",
    "end": "1160200"
  },
  {
    "text": "have in 2017 probably don't know what when we'll have it but we don't need",
    "start": "1160200",
    "end": "1166520"
  },
  {
    "text": "that because in C++ we don't need reflection we have so many other ways to",
    "start": "1166520",
    "end": "1173320"
  },
  {
    "text": "do stuff that we don't need reflection in C++ uh we can we have macros and we have",
    "start": "1173320",
    "end": "1178840"
  },
  {
    "text": "templates and we have inheritance tricks and we also can play with the build",
    "start": "1178840",
    "end": "1184400"
  },
  {
    "text": "Pipeline and I was also involved in a mocking framework for C++ which used",
    "start": "1184400",
    "end": "1190159"
  },
  {
    "text": "some project from Microsoft that enable you to redirect code running right now",
    "start": "1190159",
    "end": "1196039"
  },
  {
    "text": "in C pass Windows only unfortunately not sure about the state of that specific project so I'm not going to show it uh",
    "start": "1196039",
    "end": "1203080"
  },
  {
    "text": "but you can do a lot of stuff a lot of tricks is in C++ it's a very powerful language so quick overview of some of",
    "start": "1203080",
    "end": "1211480"
  },
  {
    "text": "the C++ unit testing Frameworks there are many many many more the first",
    "start": "1211480",
    "end": "1218240"
  },
  {
    "text": "one uh I want to talk about is Google test Google test in framework one of the first uh testing framework created by",
    "start": "1218240",
    "end": "1225760"
  },
  {
    "text": "Google obviously and uh bundled with Google mock Google testing framework",
    "start": "1225760",
    "end": "1231799"
  },
  {
    "text": "require you to build it in order to use it which has some problems because you",
    "start": "1231799",
    "end": "1237120"
  },
  {
    "text": "need to compile and build someone else's library and it has to be exactly like your library it has to be the same",
    "start": "1237120",
    "end": "1243360"
  },
  {
    "text": "configuration the same platform the same everything multi threading compartment whatever otherwise you get weird and",
    "start": "1243360",
    "end": "1249720"
  },
  {
    "text": "funny linking problems another thing from a big company is Microsoft native unit testing",
    "start": "1249720",
    "end": "1255640"
  },
  {
    "text": "framework Microsoft native unit testing framework is is not multiplatform it's Windows only from within Visual Studio",
    "start": "1255640",
    "end": "1262440"
  },
  {
    "text": "been around since 2015 and it you have it in Visual Studio 2015 or 17 documentation is improving",
    "start": "1262440",
    "end": "1271480"
  },
  {
    "text": "let's say it like that um and it doesn't have a lot of the capabilities of other",
    "start": "1271480",
    "end": "1277919"
  },
  {
    "text": "um unit Tes in framework in fact I think that they are recommending Google test",
    "start": "1277919",
    "end": "1285279"
  },
  {
    "text": "at the moment but I don't know you can use it and the good thing is deployment because if you use in Visual Studio Windows only C++ just a matter of Crea a",
    "start": "1285279",
    "end": "1292520"
  },
  {
    "text": "new project so that's a good thing the third in line is catch written by Phil",
    "start": "1292520",
    "end": "1298400"
  },
  {
    "text": "Nash sits here very Innovative unitest in framework um very excited is here",
    "start": "1298400",
    "end": "1305600"
  },
  {
    "text": "because it's it's my favorite he has thought about things we didn't know we want in a unit testing",
    "start": "1305600",
    "end": "1311320"
  },
  {
    "text": "framework and now everybody's copy it everybody takes his idea back and changing them it's a header only",
    "start": "1311320",
    "end": "1318000"
  },
  {
    "text": "deployment which mean all you have to do is include the header file and you have a unit test that's it you don't need to",
    "start": "1318000",
    "end": "1323440"
  },
  {
    "text": "build compile anything that's cool CPP unit I need to remind you of the",
    "start": "1323440",
    "end": "1328919"
  },
  {
    "text": "granddaddy of them all CPP unit was created in order to write a book called The Walking effectively with Legacy code",
    "start": "1328919",
    "end": "1335320"
  },
  {
    "text": "it's a C++ unit testing framework it's quite old I don't recommend using it",
    "start": "1335320",
    "end": "1340799"
  },
  {
    "text": "it's behind the times uh but you should know it's out there and I have seen people use it especially in the embedded",
    "start": "1340799",
    "end": "1347440"
  },
  {
    "text": "space uh because it doesn't use all the cool C++ 11 14 kind of features so can",
    "start": "1347440",
    "end": "1353960"
  },
  {
    "text": "be compiled to that space there's boost. test which comes part of the Boost",
    "start": "1353960",
    "end": "1359799"
  },
  {
    "text": "Library which you can use as well I find it to be very verbose I don't like to write too much code if I can avoid that",
    "start": "1359799",
    "end": "1366640"
  },
  {
    "text": "and there's dock test dock test is the first uh catch derivatives they took the",
    "start": "1366640",
    "end": "1371760"
  },
  {
    "text": "ideas from catch and they change a few things as long as the as the syntax but",
    "start": "1371760",
    "end": "1377360"
  },
  {
    "text": "they have a different idea the idea of Doc test is to write the test as part of the code in the same assembly in the",
    "start": "1377360",
    "end": "1384200"
  },
  {
    "text": "same place as the code and dur in build you can uh use a flag to make all that code disappear not",
    "start": "1384200",
    "end": "1390919"
  },
  {
    "text": "compile and that is an interesting idea not sure what I think about it at the moment I haven't had a lot of chance to",
    "start": "1390919",
    "end": "1397520"
  },
  {
    "text": "play with it so I don't know but that is a nice idea especially since in C++ we",
    "start": "1397520",
    "end": "1402720"
  },
  {
    "text": "don't have always have the ability to look inside someone else's library and test the same code so might be good for",
    "start": "1402720",
    "end": "1410480"
  },
  {
    "text": "some scenarios there's l l is another uh catch derivative he took the ideas from",
    "start": "1410480",
    "end": "1417440"
  },
  {
    "text": "catch and from uh from other unites in framework and Tred to improve U runtime",
    "start": "1417440",
    "end": "1423880"
  },
  {
    "text": "and compile time but a few things got lost on the way because in order to improve that time the test are no longer",
    "start": "1423880",
    "end": "1430440"
  },
  {
    "text": "automatically discovered it's not exactly discovered but registered and so we need to write it by hand um it looks",
    "start": "1430440",
    "end": "1438520"
  },
  {
    "text": "if you know catch or dock test you'll probably feel at home because it look very similar there's xunit Plus+ if you",
    "start": "1438520",
    "end": "1445919"
  },
  {
    "text": "know xunit from net the idea was to bring the same ideas into C++ unfortunately seems that it's not",
    "start": "1445919",
    "end": "1452000"
  },
  {
    "text": "maintained anymore so but it's nice to have the same syntax and finally there's",
    "start": "1452000",
    "end": "1458000"
  },
  {
    "text": "metal metal is a nice way to scare Java developers I'll show you it but you",
    "start": "1458000",
    "end": "1463279"
  },
  {
    "text": "might like the syntax and it's a it's a cool unit test in framework it's not bad but um and you",
    "start": "1463279",
    "end": "1471039"
  },
  {
    "text": "need either to compile it or use the other only and then you have limitations and in order to compile it",
    "start": "1471039",
    "end": "1478080"
  },
  {
    "text": "in Windows you might have to jump through some hoops it's a more Linux thing let's see a few of",
    "start": "1478080",
    "end": "1486278"
  },
  {
    "text": "those by the way uh this specific project is in GitHub under theh helper",
    "start": "1486320",
    "end": "1493039"
  },
  {
    "text": "draw helper that's my name and here I have a few unit testing Frameworks so",
    "start": "1493039",
    "end": "1498159"
  },
  {
    "text": "let let's start with Google test because it was the first and we are going simple",
    "start": "1498159",
    "end": "1504000"
  },
  {
    "text": "first this is Google test test and here I Define the test I can Define the class",
    "start": "1504000",
    "end": "1511320"
  },
  {
    "text": "the picture where the test runs and the test name and then I WR it test body now Google test has an extensive set of",
    "start": "1511320",
    "end": "1518240"
  },
  {
    "text": "asserts there there's quite a lot of ways to ask to ask what I want to know there's",
    "start": "1518240",
    "end": "1525559"
  },
  {
    "text": "AER any flow and death it also can check that your application crashed that's C++ remember and exit and",
    "start": "1525559",
    "end": "1534679"
  },
  {
    "text": "force and float and greater equal and less equal don't equal PR Define predicate you can Define predicates and",
    "start": "1534679",
    "end": "1542559"
  },
  {
    "text": "string equal FL whatever Collections and there's also the way to use uh Google",
    "start": "1542559",
    "end": "1548320"
  },
  {
    "text": "mock matches which are essentially predicates that you can either write or use Google",
    "start": "1548320",
    "end": "1553720"
  },
  {
    "text": "mock in order to add even more assertions I'm not sure if it's a good or bad thing but we'll get to that later",
    "start": "1553720",
    "end": "1560080"
  },
  {
    "text": "and here I have a simple test I'm testing the bowling cutter the bowling cutter was invented by Bob Martin Uncle",
    "start": "1560080",
    "end": "1566720"
  },
  {
    "text": "Bob and the idea is to build uh slowly a bowling game score calculator and here",
    "start": "1566720",
    "end": "1573679"
  },
  {
    "text": "for example I check that if I'll roll several uh 20 times a roll then just one",
    "start": "1573679",
    "end": "1580200"
  },
  {
    "text": "pin then in the end of that the score will be 20 now the this little Nifty thing here",
    "start": "1580200",
    "end": "1587000"
  },
  {
    "text": "is something I need to talk about this is jetbrain C++ uh the sharper for C++",
    "start": "1587000",
    "end": "1593399"
  },
  {
    "text": "enable me to run a catch and Google test which is nice because the other option",
    "start": "1593399",
    "end": "1598559"
  },
  {
    "text": "is to run it from the command line and uh I can take this test and run it and",
    "start": "1598559",
    "end": "1604080"
  },
  {
    "text": "hopefully if everything compiles I'll get the result it passes and if I'll",
    "start": "1604080",
    "end": "1610559"
  },
  {
    "text": "mess it up a bit and ask get for 21 I'll get a different results which is",
    "start": "1610559",
    "end": "1617840"
  },
  {
    "text": "should be a failure and the nice thing the first thing you want to do when you have a new",
    "start": "1617840",
    "end": "1624600"
  },
  {
    "text": "uh unit testing framework is to check what happens when it fails when the test fails because when the test fails you",
    "start": "1624600",
    "end": "1630679"
  },
  {
    "text": "want as much information as you can possibly have I only write unit test in order for them to",
    "start": "1630679",
    "end": "1636080"
  },
  {
    "text": "fail if they pass I don't care that's a waste of CPU if I had one way to find out whether or not a test will pass",
    "start": "1636080",
    "end": "1643480"
  },
  {
    "text": "throughout his lifetime I will delete that test I just care about test that fails because and when they fa I want to",
    "start": "1643480",
    "end": "1648919"
  },
  {
    "text": "know as much as I can and Google test is one of the of the testing framework that give me a lot of information remember",
    "start": "1648919",
    "end": "1654559"
  },
  {
    "text": "that C++ you can get the actual method name I'm running and the result and the nice thing about",
    "start": "1654559",
    "end": "1661080"
  },
  {
    "text": "Google is that usually in other languages you have to be careful which",
    "start": "1661080",
    "end": "1666399"
  },
  {
    "text": "uh value you put in the left side and which value on the right side and it's usually backwards you first you tell",
    "start": "1666399",
    "end": "1671760"
  },
  {
    "text": "what you expect to happen and then you say you give the actual result and I find it to be the other way around I",
    "start": "1671760",
    "end": "1677039"
  },
  {
    "text": "usually say I equal five not 5 equal I although C++ some people are used to the yod notation right in order not to",
    "start": "1677039",
    "end": "1684080"
  },
  {
    "text": "accidentally uh put a value instead of comparing it uh but in Google test they",
    "start": "1684080",
    "end": "1690240"
  },
  {
    "text": "don't care they'll they give you they don't care which side you care about they'll show you it in a very nice uh",
    "start": "1690240",
    "end": "1697799"
  },
  {
    "text": "message uh moving on to Microsoft Microsoft unitest and framework will",
    "start": "1697799",
    "end": "1704000"
  },
  {
    "text": "remind you what you are familiar from the Java worlds and the cop world we have a test class which a name and you",
    "start": "1704000",
    "end": "1711519"
  },
  {
    "text": "can actually see the test method looks just like in a class and I can have",
    "start": "1711519",
    "end": "1716640"
  },
  {
    "text": "fields in that class again not sure whether or not that's a good or bad thing um and every test method do",
    "start": "1716640",
    "end": "1724120"
  },
  {
    "text": "something and that's Microsoft that's not an executable unlike the other unit test in Frameworks you can only run this",
    "start": "1724120",
    "end": "1731120"
  },
  {
    "text": "uh specific test using Microsoft tools so either you open the test Explorer from the side and you can sell all the",
    "start": "1731120",
    "end": "1736799"
  },
  {
    "text": "test and run them from here or in the command line you need to run Microsoft Ms test executable with the",
    "start": "1736799",
    "end": "1743200"
  },
  {
    "text": "test as a parameter but it's very for those who like this kind of syntax that's okay",
    "start": "1743200",
    "end": "1749600"
  },
  {
    "text": "that's fine we have initialization and Method and whatever and moving on to catch uh catch",
    "start": "1749600",
    "end": "1759120"
  },
  {
    "text": "in catch we can do a bunch of things first of all test called test case but nothing that's very similar but the cool",
    "start": "1759120",
    "end": "1765320"
  },
  {
    "text": "thing is this this I like I don't need to write a test name that is actually a",
    "start": "1765320",
    "end": "1771440"
  },
  {
    "text": "metan name and when you think about it it wasn't that hard to do in Google test",
    "start": "1771440",
    "end": "1777120"
  },
  {
    "text": "as well but they chose the way that everybody did it they didn't think uh how to make a laugh easier when I can",
    "start": "1777120",
    "end": "1783120"
  },
  {
    "text": "write a string as the test name it means I can describe exactly what the test does and when the test fails that the",
    "start": "1783120",
    "end": "1788320"
  },
  {
    "text": "first thing I see is that string so I know what failed that is a very powerful",
    "start": "1788320",
    "end": "1793760"
  },
  {
    "text": "capability to have on top of that I have other cool features in in catch and we'll talk",
    "start": "1793760",
    "end": "1801960"
  },
  {
    "text": "about them but the first thing is this I don't have multiple asserts in catch I",
    "start": "1801960",
    "end": "1807519"
  },
  {
    "text": "have just one assert and that's it and I can write code like the way God intended",
    "start": "1807519",
    "end": "1813559"
  },
  {
    "text": "it to be I don't need to use the right assert",
    "start": "1813559",
    "end": "1818720"
  },
  {
    "text": "because if I don't use the right assert I'll get the wrong message when the test fail don't understand I need to debug it",
    "start": "1818720",
    "end": "1824559"
  },
  {
    "text": "and waste my time I just write code and when that test will fail and I'll cause",
    "start": "1824559",
    "end": "1829640"
  },
  {
    "text": "it to um you know what I'll take actually a different test that I want to",
    "start": "1829640",
    "end": "1836440"
  },
  {
    "text": "fail here we go when the tests do fail I'll run it using shop as",
    "start": "1836440",
    "end": "1842880"
  },
  {
    "text": "well it's nice to have few options especially in demos so much information expression",
    "start": "1842880",
    "end": "1849919"
  },
  {
    "text": "failed and this is the name of the test that's the thing I give it here so I know exactly what happened and shows me",
    "start": "1849919",
    "end": "1855440"
  },
  {
    "text": "exactly what I was trying to do and what values were not what I expected to be and that's",
    "start": "1855440",
    "end": "1861639"
  },
  {
    "text": "that's powerful and you know what there's no reason Java and C won't have",
    "start": "1861639",
    "end": "1867080"
  },
  {
    "text": "the same capability but they're not there yet um J the next version of junit",
    "start": "1867080",
    "end": "1872840"
  },
  {
    "text": "will probably feature this kind of behavior but in cop I not seeing it",
    "start": "1872840",
    "end": "1879320"
  },
  {
    "text": "happening yet and I don't know why because they have reflection and they can pass the code and they can get much",
    "start": "1879320",
    "end": "1886440"
  },
  {
    "text": "more information than C++ and they don't do that they don't understand the world I guess as",
    "start": "1886440",
    "end": "1891799"
  },
  {
    "text": "well um so that's that's a shame but uh",
    "start": "1891799",
    "end": "1896840"
  },
  {
    "text": "I did write something like that for C because I was very frustrated with the need to use assert equal instead of",
    "start": "1896840",
    "end": "1903240"
  },
  {
    "text": "assert true instead of a certain n instead there's no reason I can't write my test this way in any language but in",
    "start": "1903240",
    "end": "1911960"
  },
  {
    "text": "I guess it's also possible and finally metal metal that that was a fun one this",
    "start": "1911960",
    "end": "1918399"
  },
  {
    "text": "is what metal test look like here we go go ahead I'll Define a",
    "start": "1918399",
    "end": "1927360"
  },
  {
    "text": "suite of tests with some name well first I'll I've copied it and I can use a",
    "start": "1927360",
    "end": "1933639"
  },
  {
    "text": "Lambda in order to define the actual test and here I have the first test and",
    "start": "1933639",
    "end": "1939799"
  },
  {
    "text": "uh well if you're comfortable with this kind of syntax that's fine and they're using a",
    "start": "1939799",
    "end": "1945559"
  },
  {
    "text": "strings based as well but that's easy that's because they don't need to transform it into methods in the",
    "start": "1945559",
    "end": "1951279"
  },
  {
    "text": "background it's just Lambda Lambda that run and just register the test and here",
    "start": "1951279",
    "end": "1958600"
  },
  {
    "text": "everything and um that's fine that's cool and it has a main in the background",
    "start": "1958600",
    "end": "1964919"
  },
  {
    "text": "that I don't need to write and catch has the same capability I don't need to actually write a main method like I need",
    "start": "1964919",
    "end": "1971039"
  },
  {
    "text": "to do for example in Google test in Google test there something hiding here I need to write the main method and",
    "start": "1971039",
    "end": "1977440"
  },
  {
    "text": "initially Google test or Google mock depending which I use and then call run all test which is okay because I don't",
    "start": "1977440",
    "end": "1984720"
  },
  {
    "text": "need to tell it exactly which test to run some unit test framework will force me to tell him the test in some formal",
    "start": "1984720",
    "end": "1991159"
  },
  {
    "text": "list or something but I don't like doing that I always forget what to write and then I need to copy from an old project",
    "start": "1991159",
    "end": "1997000"
  },
  {
    "text": "or Google for it I don't like that uh as I said catch has the same",
    "start": "1997000",
    "end": "2003240"
  },
  {
    "text": "capability if I go to catch somewhere will be WR theine catch config main",
    "start": "2003240",
    "end": "2008720"
  },
  {
    "text": "that's defining the main method in catch you can do or don't use",
    "start": "2008720",
    "end": "2014360"
  },
  {
    "text": "that so that that was a quick overview of unit testing framework in",
    "start": "2014360",
    "end": "2021440"
  },
  {
    "text": "C++ now in in the unit testing world we have some dilemma usually when starting to write unit testing world we don't",
    "start": "2022200",
    "end": "2028720"
  },
  {
    "text": "understand the problem but then something bad happened whether or not to write",
    "start": "2028720",
    "end": "2033799"
  },
  {
    "text": "multiple asserts have you heard about the single assert per test rule",
    "start": "2033799",
    "end": "2039279"
  },
  {
    "text": "anyone okay yeah I couldn't find it I Googled for it for days and no one ever",
    "start": "2039279",
    "end": "2046200"
  },
  {
    "text": "called it the single assert to there there there is I guess no such thing but",
    "start": "2046200",
    "end": "2051919"
  },
  {
    "text": "there is an uh a guideline if you will that if we",
    "start": "2051919",
    "end": "2058158"
  },
  {
    "text": "write multiple assert in one test we might doing doing the test wrong and for",
    "start": "2058159",
    "end": "2063520"
  },
  {
    "text": "good reason two reasons actually the first of which is",
    "start": "2063520",
    "end": "2068960"
  },
  {
    "text": "technical in other Frameworks not talking about C++ asserts will for an",
    "start": "2068960",
    "end": "2074760"
  },
  {
    "text": "exception in junit or in nunit in net and Asser for an exception which means",
    "start": "2074760",
    "end": "2081960"
  },
  {
    "text": "that if I write multiple asserts the first one who fails will for an exception leaving me with less knowledge",
    "start": "2081960",
    "end": "2089118"
  },
  {
    "text": "about that problem than I like I want all the to tell me exactly what happened",
    "start": "2089119",
    "end": "2094440"
  },
  {
    "text": "again in J unit they're probably going to fix that and N unit have a prop about that because that's a technical",
    "start": "2094440",
    "end": "2100520"
  },
  {
    "text": "problem which should be fixed but on top of that writing multiple asserts could mean that I'm testing several things",
    "start": "2100520",
    "end": "2107240"
  },
  {
    "text": "it's a good way to write a very complex and readable test if I test for a lot of things and it's very developers find it",
    "start": "2107240",
    "end": "2114640"
  },
  {
    "text": "more uh to the liking in the beginning to write those kind of tests because that's the way we write code we",
    "start": "2114640",
    "end": "2120359"
  },
  {
    "text": "initialize something but we don't want to do it over and over again in each and every test and then we test everything",
    "start": "2120359",
    "end": "2126040"
  },
  {
    "text": "possible for that scenario everything including the weather and uh that's not a good way to",
    "start": "2126040",
    "end": "2131960"
  },
  {
    "text": "write unit test remember unit test should be specific I shouldn't write everything in a single unit test so that's a reason multiple asserts are not",
    "start": "2131960",
    "end": "2138599"
  },
  {
    "text": "good but one assert per test has its limitation what if I want to test a",
    "start": "2138599",
    "end": "2144359"
  },
  {
    "text": "complex object I just got back it is one result I'm testing one thing but my",
    "start": "2144359",
    "end": "2150520"
  },
  {
    "text": "message object I just got back as an ID a name and a content and I want to test",
    "start": "2150520",
    "end": "2155560"
  },
  {
    "text": "them together but if I'll test them together again not in C++ then I'll lose some information",
    "start": "2155560",
    "end": "2162200"
  },
  {
    "text": "along the way oddly enough in C++ I don't lose any",
    "start": "2162200",
    "end": "2168160"
  },
  {
    "text": "information the reason is that in C++ at least many of the unit testing",
    "start": "2168160",
    "end": "2174760"
  },
  {
    "text": "Frameworks has the ability and this is catch but Google test is the same way to",
    "start": "2174760",
    "end": "2180240"
  },
  {
    "text": "define two kinds of asserts in uh catch you have require",
    "start": "2180240",
    "end": "2185520"
  },
  {
    "text": "which means the minute this specific test fails stop the test and we can see",
    "start": "2185520",
    "end": "2191599"
  },
  {
    "text": "that in the test result I'll run it again and here I I I've created a bad",
    "start": "2191599",
    "end": "2196680"
  },
  {
    "text": "test just to show it failing it's not a good test but the requirement failed but I don't know absolutely nothing about",
    "start": "2196680",
    "end": "2203200"
  },
  {
    "text": "the other to require and that's is a problem but in",
    "start": "2203200",
    "end": "2209640"
  },
  {
    "text": "uh catch I have something else which is very similar called check and check is just like require the",
    "start": "2209640",
    "end": "2216800"
  },
  {
    "text": "only difference is that the test doesn't end when it fa once it fails it continue to the next uh line and Google test has",
    "start": "2216800",
    "end": "2225599"
  },
  {
    "text": "the same thing it call expect there's assert and there's expect if I assert that something is equal the test will",
    "start": "2225599",
    "end": "2232240"
  },
  {
    "text": "fail once that assertion fails if I expect something it equal the test will",
    "start": "2232240",
    "end": "2237520"
  },
  {
    "text": "still fail but only after the whole test will finish which means that now when",
    "start": "2237520",
    "end": "2242560"
  },
  {
    "text": "when I run the same test we'll give it a few minutes to compile",
    "start": "2242560",
    "end": "2248280"
  },
  {
    "text": "then I have more information I have two different checks that fails not only I have only one object instead of two but",
    "start": "2248280",
    "end": "2255720"
  },
  {
    "text": "also I didn't this is the name of that object and by the way there are good better ways to test for but I needed a",
    "start": "2255720",
    "end": "2262280"
  },
  {
    "text": "good example so you have to forgive me for that so in C++ we have abilities",
    "start": "2262280",
    "end": "2269200"
  },
  {
    "text": "capabilities that c developers don't have and that's the ability to use",
    "start": "2269200",
    "end": "2274480"
  },
  {
    "text": "multiple assets if we choose to use them and it's our problem to decide whether",
    "start": "2274480",
    "end": "2279520"
  },
  {
    "text": "not that's a good idea and that's cool there are other Innovations in the",
    "start": "2279520",
    "end": "2285599"
  },
  {
    "text": "C++ world as far as unit testing first of which is what I shown you don't for an exception when an assertion fails the",
    "start": "2285599",
    "end": "2293359"
  },
  {
    "text": "second is that usually we get better failure messages better failure messages because",
    "start": "2293359",
    "end": "2298920"
  },
  {
    "text": "the MEO the require assert mecro usually does a lot more than the C Shar or Java",
    "start": "2298920",
    "end": "2305400"
  },
  {
    "text": "does and in case of catch and all the guys that copy it I have only one assert in which I write code and as a developer",
    "start": "2305400",
    "end": "2312599"
  },
  {
    "text": "I find it to be so relaxing in writing code instead of thinking about which Asser to use and the last thing also bought by by",
    "start": "2312599",
    "end": "2320000"
  },
  {
    "text": "catch is sections and section is a rather cool feature section give me the",
    "start": "2320000",
    "end": "2326920"
  },
  {
    "text": "ability if those of you are here yesterday I shown a demo called trip service I'm testing a bunch of things",
    "start": "2326920",
    "end": "2333920"
  },
  {
    "text": "and I noticed that several things several things I'm checking tend to uh",
    "start": "2333920",
    "end": "2339520"
  },
  {
    "text": "happen a lot of times I have duplicate code between my test and that's okay tests are allowed to have duplicate code",
    "start": "2339520",
    "end": "2346440"
  },
  {
    "text": "I prefer the test to be readable than maintainable because the maintenance of duplicate code in test is",
    "start": "2346440",
    "end": "2352240"
  },
  {
    "text": "should be easy because the tests are supposed to be quite simple and going over 200 tests and changing some small",
    "start": "2352240",
    "end": "2358720"
  },
  {
    "text": "thing is usually easier than extracting everything to methods and base classes",
    "start": "2358720",
    "end": "2364079"
  },
  {
    "text": "and then trying to understand what happens so in Google test for example the way to do it is to define the actual",
    "start": "2364079",
    "end": "2370640"
  },
  {
    "text": "class remember I told you that Google test create a class in the background I can Define that class it need to inherit",
    "start": "2370640",
    "end": "2376400"
  },
  {
    "text": "test testing test and then I can have fields and I can have a Constructor and",
    "start": "2376400",
    "end": "2383160"
  },
  {
    "text": "distructor but I can also have setup and turn down methods which will run before and after every test so before and after",
    "start": "2383160",
    "end": "2389800"
  },
  {
    "text": "every test I'll initialize the fake objects I need and set the that's a single turn I'm playing with for those",
    "start": "2389800",
    "end": "2396880"
  },
  {
    "text": "of you yesterday you might remember this example and then I'll write the test and in case of Google test I'll need to run",
    "start": "2396880",
    "end": "2403400"
  },
  {
    "text": "it with the underscore F that's my way of telling Google test this class was already created please don't create",
    "start": "2403400",
    "end": "2409560"
  },
  {
    "text": "another one and then those tests become the methods of that class and they can",
    "start": "2409560",
    "end": "2415359"
  },
  {
    "text": "just like wrri in code right I can reach the protected values I can call methods",
    "start": "2415359",
    "end": "2421119"
  },
  {
    "text": "which everyone who uses this class can use and I can use the fake object this is the fake object from above",
    "start": "2421119",
    "end": "2427880"
  },
  {
    "text": "and so on and so on I find this solution this is the solution that every single unit in framework since junit did called",
    "start": "2427880",
    "end": "2435400"
  },
  {
    "text": "test fixures I don't like that solution that solution means that my code the",
    "start": "2435400",
    "end": "2441359"
  },
  {
    "text": "test code essentially is in two different places the first is up here and the second is down here and when",
    "start": "2441359",
    "end": "2447680"
  },
  {
    "text": "that test will fail and hopefully it will because that's why I wrote the test it will catch a bug I need to go like",
    "start": "2447680",
    "end": "2453560"
  },
  {
    "text": "this several times until I understand what the hell happens and if someone just wrote wrote a new test with and he",
    "start": "2453560",
    "end": "2460040"
  },
  {
    "text": "needs something different to happen with the initialization and he haven't fought it through it will go and change",
    "start": "2460040",
    "end": "2466560"
  },
  {
    "text": "something in my setup method and accidentally changing my test as well without any of us realizing it and there",
    "start": "2466560",
    "end": "2473880"
  },
  {
    "text": "are two outcome to this kind of behavior either the test will fail which is the good outcome it means that I get to",
    "start": "2473880",
    "end": "2480520"
  },
  {
    "text": "catch a bug or the the test will continue on working and test something completely different from what I",
    "start": "2480520",
    "end": "2486680"
  },
  {
    "text": "intended to happen that's a way what why I like catch solution which use sections and",
    "start": "2486680",
    "end": "2493720"
  },
  {
    "text": "for Section I'll just jump ahead and the same test the same fixure",
    "start": "2493720",
    "end": "2499880"
  },
  {
    "text": "written with Section will look like this after Visual Studio will stop refreshing",
    "start": "2499880",
    "end": "2505240"
  },
  {
    "text": "itself here we go test case initialize whatever you want and then you call a",
    "start": "2505240",
    "end": "2511119"
  },
  {
    "text": "section and what happened this is essentially is a different test from the section below they will run individually",
    "start": "2511119",
    "end": "2518280"
  },
  {
    "text": "if one fails the other one passes and they won't run one after the other they will run in a different run this one",
    "start": "2518280",
    "end": "2525200"
  },
  {
    "text": "will run well maybe first or second I don't really care about the execution order and this one will run in a",
    "start": "2525200",
    "end": "2531280"
  },
  {
    "text": "different run it's not like a whole method running method one by one and this is I find it to be more uh trivial",
    "start": "2531280",
    "end": "2538960"
  },
  {
    "text": "way because I can see what happens in the test and then the section runs so I have all my uh initialization code in",
    "start": "2538960",
    "end": "2546119"
  },
  {
    "text": "the same place and then I can run my code essentially I've created the same thing I created",
    "start": "2546119",
    "end": "2551559"
  },
  {
    "text": "with pictures but now it looks logical it's easier to understand it's easier to",
    "start": "2551559",
    "end": "2556839"
  },
  {
    "text": "debug put a breake point run on and you don't have to add break point upstairs in the in the setup in one inside and",
    "start": "2556839",
    "end": "2563880"
  },
  {
    "text": "it's very nice to use and this is another inovation uh that is mising from other languages everybody use test",
    "start": "2563880",
    "end": "2570960"
  },
  {
    "text": "fixures and that's not a good solution and unfortunately I yet to find",
    "start": "2570960",
    "end": "2576000"
  },
  {
    "text": "a good way to do that in C but uh I'm still looking for",
    "start": "2576000",
    "end": "2582079"
  },
  {
    "text": "it so that was my unit test in Frameworks let's talk about mocking mocking objects are something we",
    "start": "2582079",
    "end": "2588280"
  },
  {
    "text": "need in unit test because we want our unit test to be isolated I want to create objects I can control those",
    "start": "2588280",
    "end": "2593559"
  },
  {
    "text": "objects are created usually by using inheritance I inherit the class I don't want to call the data access layer class",
    "start": "2593559",
    "end": "2600839"
  },
  {
    "text": "whatever and I change it with my own class that does absolutely",
    "start": "2600839",
    "end": "2605920"
  },
  {
    "text": "nothing and and they are called mocks usually I I call them mock objects for",
    "start": "2605920",
    "end": "2612040"
  },
  {
    "text": "one reason one reason only for you to be able to Google for them because personally I believe they should be",
    "start": "2612040",
    "end": "2617359"
  },
  {
    "text": "called fakes I find that the term mock TBS test double spy whatever to be very",
    "start": "2617359",
    "end": "2622520"
  },
  {
    "text": "confusing and turn people away from using those kind of objects essentially",
    "start": "2622520",
    "end": "2627760"
  },
  {
    "text": "it's just a fake object that does absolutely nothing until I tell to do to do something else",
    "start": "2627760",
    "end": "2633440"
  },
  {
    "text": "basically and those Frameworks that those Mo objects will probably use",
    "start": "2633440",
    "end": "2640079"
  },
  {
    "text": "inheritance although not sure about all of them but most of them in order to create another object that override all",
    "start": "2640079",
    "end": "2646559"
  },
  {
    "text": "the methods of that dependency and create an object that does absolutely nothing that's the first",
    "start": "2646559",
    "end": "2652280"
  },
  {
    "text": "thing they give me the second of which is the ability to change the behavior in that test just for that specific test I",
    "start": "2652280",
    "end": "2658599"
  },
  {
    "text": "want your object to return this value of one exception or whatever and I want it",
    "start": "2658599",
    "end": "2663839"
  },
  {
    "text": "to happen only in the test and once the test is over I want you to forget about it and that's the real benefit of a",
    "start": "2663839",
    "end": "2669559"
  },
  {
    "text": "moing framework because I could write that those classes by hand I could inherit the dependency and override",
    "start": "2669559",
    "end": "2675880"
  },
  {
    "text": "everything but then I need to maintain classes in my test and I don't like to do that and the last thing the last",
    "start": "2675880",
    "end": "2682240"
  },
  {
    "text": "capabilities of mocking framework is to verify that a method was called or wasn't called in effect assert that a",
    "start": "2682240",
    "end": "2690400"
  },
  {
    "text": "method was called just like we assert that the value was equal 10 we assert that the database do save",
    "start": "2690400",
    "end": "2697599"
  },
  {
    "text": "method was called with specific argument or not depending what we",
    "start": "2697599",
    "end": "2702920"
  },
  {
    "text": "need in C++ we have I have some good news and",
    "start": "2702920",
    "end": "2708079"
  },
  {
    "text": "bad news the good news is that there are mocking framework for C++ that's good news because that wasn't always the case",
    "start": "2708079",
    "end": "2716559"
  },
  {
    "text": "the bad news but it changes is that it used to be only one mocking frame or Google Mock and it changes because",
    "start": "2716559",
    "end": "2723839"
  },
  {
    "text": "people are changing things and you need to be careful a lot of the other projects are dead project not maintained",
    "start": "2723839",
    "end": "2730000"
  },
  {
    "text": "anymore won't work for you and if you accidentally use one of them and find out about it later on on",
    "start": "2730000",
    "end": "2736480"
  },
  {
    "text": "the road then you might have a problem because you need to replace all your",
    "start": "2736480",
    "end": "2741520"
  },
  {
    "text": "test and the ugly thing is that some of them require quite a lot of code written",
    "start": "2741520",
    "end": "2746839"
  },
  {
    "text": "as well and most of them are not they change a bit of the AAA kind of way of",
    "start": "2746839",
    "end": "2752520"
  },
  {
    "text": "writing tests but that's because C++ so in C++ moing that's a shorter list",
    "start": "2752520",
    "end": "2757920"
  },
  {
    "text": "there's not a lot of them there's Google mock comes with Google test okay same",
    "start": "2757920",
    "end": "2763400"
  },
  {
    "text": "limitations same ideas and then there's trampo written by beon here in the front",
    "start": "2763400",
    "end": "2769520"
  },
  {
    "text": "row uh which takes Google Mo ideas and improve them at least that's what I",
    "start": "2769520",
    "end": "2774599"
  },
  {
    "text": "think there's hippoo unfortunately I don't have enough experience to tell you whether or not that's a good idea I",
    "start": "2774599",
    "end": "2780559"
  },
  {
    "text": "noticed that it wasn't released in the last two or three years so might be a problem and there's fake it which not",
    "start": "2780559",
    "end": "2788559"
  },
  {
    "text": "sure if it's a cool side project or something I can actually use but playing",
    "start": "2788559",
    "end": "2794119"
  },
  {
    "text": "with it a bit it has limitations but it has some nice idea going there as well let's see an example shall",
    "start": "2794119",
    "end": "2801280"
  },
  {
    "text": "we so mocking framework comparison I have here this calculator I showed it",
    "start": "2801280",
    "end": "2807040"
  },
  {
    "text": "yesterday and I have two dependencies I'll read something from the database and then I send that information to the",
    "start": "2807040",
    "end": "2813359"
  },
  {
    "text": "client I want to do two things I want to affect how the that access return the data I wanted to return the data careful",
    "start": "2813359",
    "end": "2820280"
  },
  {
    "text": "and then later on I want to check that the client was called so with Google",
    "start": "2820280",
    "end": "2825440"
  },
  {
    "text": "Mock and with Google mock basically the test will look something like this you",
    "start": "2825440",
    "end": "2831520"
  },
  {
    "text": "write expect call you first you need to create a fake class the fake class is a class that inherit the class I'm faking",
    "start": "2831520",
    "end": "2839760"
  },
  {
    "text": "and then I use one of those Macos that will essentially create an overridden method in the background you need to use",
    "start": "2839760",
    "end": "2845880"
  },
  {
    "text": "that method to be virual if that method is not virtual you should see the session I did",
    "start": "2845880",
    "end": "2851359"
  },
  {
    "text": "yesterday and then you write the method name the return value and the parameter",
    "start": "2851359",
    "end": "2856800"
  },
  {
    "text": "the number here is the amount of parameters that's a limitation not that bad and then going back to the test I",
    "start": "2856800",
    "end": "2864599"
  },
  {
    "text": "use expect call of that fake data access when the method get data is called I",
    "start": "2864599",
    "end": "2869839"
  },
  {
    "text": "want you to return this specific object that's it and I can also here I want to make",
    "start": "2869839",
    "end": "2877760"
  },
  {
    "text": "sure that if F client with this string is called at least once and what Google",
    "start": "2877760",
    "end": "2883559"
  },
  {
    "text": "mock does is that's once the mock object goes out of scope the method ends in",
    "start": "2883559",
    "end": "2890000"
  },
  {
    "text": "this case it will check that that class was called at least once which is",
    "start": "2890000",
    "end": "2895880"
  },
  {
    "text": "cool moving on to trampo which I hope I I'm pronouncing",
    "start": "2895880",
    "end": "2901319"
  },
  {
    "text": "correctly it looks very similar although and uh because it doesn't have",
    "start": "2901319",
    "end": "2908200"
  },
  {
    "text": "integration with Google test like before first of all use catch but other than that you need to create a reporter that",
    "start": "2908200",
    "end": "2913440"
  },
  {
    "text": "will tell you the arrow because we don't want to for an exception like those C Frameworks and then here I use the test",
    "start": "2913440",
    "end": "2922559"
  },
  {
    "text": "case and I also create a fake object just like Google mock look very similar",
    "start": "2922559",
    "end": "2928720"
  },
  {
    "text": "it's make on smoke but other than that very similar the benefit of using chol is that you don't need to compile",
    "start": "2928720",
    "end": "2934599"
  },
  {
    "text": "anything it's a single header deployment just in include it here and that's it",
    "start": "2934599",
    "end": "2941079"
  },
  {
    "text": "and that's a cool thing to have because compiling Google test and Google Mo can be a pain and then you use allow call",
    "start": "2941079",
    "end": "2948480"
  },
  {
    "text": "there's allow call and require call which is something I like I don't want automatically every time I set a",
    "start": "2948480",
    "end": "2954119"
  },
  {
    "text": "behavior on a fake object like so that the mock and framework will go and check that it actually happens for my good",
    "start": "2954119",
    "end": "2961280"
  },
  {
    "text": "reasons and by the way this is what I think some other other unit testing",
    "start": "2961280",
    "end": "2967920"
  },
  {
    "text": "expert think the other way around but I think that if for some reason someone",
    "start": "2967920",
    "end": "2973799"
  },
  {
    "text": "will extract this method or change it or do something so it's called from somewhere else or called more than once",
    "start": "2973799",
    "end": "2982079"
  },
  {
    "text": "I don't really care about that H because this method is only written here in",
    "start": "2982079",
    "end": "2987119"
  },
  {
    "text": "order for the test to continue execution and I don't want the test to fail because of that so I'm using allow call",
    "start": "2987119",
    "end": "2993160"
  },
  {
    "text": "and not require call like here where I do require that the call Will pick call exactly once so that's something I",
    "start": "2993160",
    "end": "3001400"
  },
  {
    "text": "like and going on uh uh to fake it fake it I'll show it",
    "start": "3001400",
    "end": "3007760"
  },
  {
    "text": "because the it's a bit different and that's why I'm I worry a bit but in fake",
    "start": "3007760",
    "end": "3013839"
  },
  {
    "text": "it you don't need to write any classes you just create a new mock of the type of the class and that's it you don't",
    "start": "3013839",
    "end": "3021480"
  },
  {
    "text": "write any additional code and that's weird I'm not sure why I I don't know what they do in the background and and",
    "start": "3021480",
    "end": "3029240"
  },
  {
    "text": "it has limitation they are documented it won't work in any single scenario it has problem multiple inheritance and I think",
    "start": "3029240",
    "end": "3036480"
  },
  {
    "text": "pure virtual methods uh so keep that in mind you might not want to use it if your code has those kind of things but",
    "start": "3036480",
    "end": "3043920"
  },
  {
    "text": "and the syntax is very very similar to what you expect from Java or cop you",
    "start": "3043920",
    "end": "3049680"
  },
  {
    "text": "have the when when I said the beavor when method get data return data just",
    "start": "3049680",
    "end": "3055160"
  },
  {
    "text": "like before when this is called return free and then other than going out of",
    "start": "3055160",
    "end": "3060720"
  },
  {
    "text": "scope like the other two it uses an explicit verifying to check that this fake client was called at least once and",
    "start": "3060720",
    "end": "3067880"
  },
  {
    "text": "that's a matter of preference you get to decide which one you like more but you have to be careful it's still being",
    "start": "3067880",
    "end": "3073680"
  },
  {
    "text": "maintained but there are limitation you need to read them before you use this specific",
    "start": "3073680",
    "end": "3080000"
  },
  {
    "text": "framework so those are your options basically and you have to be careful",
    "start": "3080720",
    "end": "3085920"
  },
  {
    "text": "with other to to just because I haven't spoken about a specific tool doesn't mean it's not a good tool just means",
    "start": "3085920",
    "end": "3091559"
  },
  {
    "text": "that I haven't used it yet and they might be good but you need to go and check when was the last commit and when",
    "start": "3091559",
    "end": "3098040"
  },
  {
    "text": "was the last the last release if it was 3 years ago four years ago 5 years ago",
    "start": "3098040",
    "end": "3103880"
  },
  {
    "text": "don't use it another good way to check whether or not library is maintained is",
    "start": "3103880",
    "end": "3110760"
  },
  {
    "text": "read the documentation if there is no documentation you might have a problem",
    "start": "3110760",
    "end": "3116599"
  },
  {
    "text": "first of all you'll have problem understanding how the thing work other than that we developers we don't like to",
    "start": "3116599",
    "end": "3123559"
  },
  {
    "text": "write documentation if someone took the effort to write good documentation he cares about his library",
    "start": "3123559",
    "end": "3129760"
  },
  {
    "text": "and he want to maintain it and since C++ is changing now every three or four years C++ gains more",
    "start": "3129760",
    "end": "3137079"
  },
  {
    "text": "capabilities you want your in frork and you definitely want your marking framework to change alongside because",
    "start": "3137079",
    "end": "3143240"
  },
  {
    "text": "things are changing as well uh so if something haven't changed and since 2004",
    "start": "3143240",
    "end": "3148640"
  },
  {
    "text": "you have a problem all the C++ 11 featur might not be uh supported so those are",
    "start": "3148640",
    "end": "3155640"
  },
  {
    "text": "good rules to think about when you need uh to choose your unit testing and marking framework now a few words about",
    "start": "3155640",
    "end": "3163280"
  },
  {
    "text": "Windows if you are a window developer that's good for you you have a nice",
    "start": "3163280",
    "end": "3169559"
  },
  {
    "text": "integrated environment to use but I have good news for Linux as well Windows is supporting",
    "start": "3169559",
    "end": "3177079"
  },
  {
    "text": "right now the ability to debug code on Windows on Linux from Windows you can",
    "start": "3177079",
    "end": "3182160"
  },
  {
    "text": "run code on Linux and debug it from Windows I'm not sure whether or not you can run the unitest in this fashion but",
    "start": "3182160",
    "end": "3188440"
  },
  {
    "text": "I hope it will come if not so if it's not there yet there are test Runners to",
    "start": "3188440",
    "end": "3194079"
  },
  {
    "text": "run from within Visual Studio you saw me use uh rearer for C++ and visual studi",
    "start": "3194079",
    "end": "3199760"
  },
  {
    "text": "is well has the ability to run test and you can also use coverage and that's cool because the coverage tools",
    "start": "3199760",
    "end": "3207040"
  },
  {
    "text": "are very helpful when you need to understand whether or not you forgot to test something for example here you see",
    "start": "3207040",
    "end": "3214280"
  },
  {
    "text": "all the tests here those are Google test tests those are not Microsoft tests and they appear on the side because I've",
    "start": "3214280",
    "end": "3221319"
  },
  {
    "text": "installed the test runner for Google test and there's one for catch and there's one for about any unit test in",
    "start": "3221319",
    "end": "3227520"
  },
  {
    "text": "framework and if there isn't one you can write one yourself it's not that difficult and not only can you run the",
    "start": "3227520",
    "end": "3233880"
  },
  {
    "text": "test form within Visual Studio you can also run with coverage analysis from within Visual Studio that means that if",
    "start": "3233880",
    "end": "3241520"
  },
  {
    "text": "you developing only on Visual Studio you have a coverage tool as long as you have the right version it's only supported in",
    "start": "3241520",
    "end": "3247119"
  },
  {
    "text": "the highend version ultimate or Enterprise but once you do run the",
    "start": "3247119",
    "end": "3252240"
  },
  {
    "text": "coverage uh which I did beforeand you can go to your class open it up and find",
    "start": "3252240",
    "end": "3258400"
  },
  {
    "text": "out whether or not you passed all the pieces of your code it doesn't mean that you tested everything by the way just",
    "start": "3258400",
    "end": "3264799"
  },
  {
    "text": "mean I run through the code it's it's more helpful to find out what I missed not what I'm actually",
    "start": "3264799",
    "end": "3271280"
  },
  {
    "text": "doing and that's cool that you have it form with in Visual Studio in C++ and let me tell you something Visual Studio",
    "start": "3271280",
    "end": "3277440"
  },
  {
    "text": "had the ability to run code coverage on C++ since at least 2003 that I know of but it was a command line thing you can",
    "start": "3277440",
    "end": "3283760"
  },
  {
    "text": "only run it through the command line using Ms build and that's very unfortunate it's",
    "start": "3283760",
    "end": "3289440"
  },
  {
    "text": "like they hid that capability and now it's wide in the open you can use it and that's cool but it does not mean that if",
    "start": "3289440",
    "end": "3297240"
  },
  {
    "text": "you walk in in Linux you don't have that ability first of all because you can now run from Windows to Linux second of all",
    "start": "3297240",
    "end": "3304480"
  },
  {
    "text": "you might decide that although your project is multiplatform you want to develop on",
    "start": "3304480",
    "end": "3309720"
  },
  {
    "text": "Windows and then Deploy on Linux I've been in several of those projects and then you have those tool to use so keep",
    "start": "3309720",
    "end": "3316200"
  },
  {
    "text": "that in mind in Linux you do have coverage tools some of which even open source but you have to hack it together",
    "start": "3316200",
    "end": "3323039"
  },
  {
    "text": "you have to add it probably from the command line in order to use it",
    "start": "3323039",
    "end": "3328200"
  },
  {
    "text": "so how do you choose un unit testing tools first of all your project is it multiplatform project or single platform",
    "start": "3328200",
    "end": "3334440"
  },
  {
    "text": "project that will decide which one you prefer some people I've been to a project they prefer to use Microsoft",
    "start": "3334440",
    "end": "3341039"
  },
  {
    "text": "native unit testing tool it was easier it's not well documented doesn't have all the features that other unit test in",
    "start": "3341039",
    "end": "3347079"
  },
  {
    "text": "framework has I have to say that but is of use that's what they have heard them",
    "start": "3347079",
    "end": "3352880"
  },
  {
    "text": "but the other Frameworks is of use is a thing how easy is it to write a test how",
    "start": "3352880",
    "end": "3358240"
  },
  {
    "text": "easy is it to write a mock do I need to compile all my dependencies my mock in framework my unit test FR or just",
    "start": "3358240",
    "end": "3364319"
  },
  {
    "text": "include a header file that's a big thing to remember when H what happen when the test fails you want to know if you have",
    "start": "3364319",
    "end": "3370839"
  },
  {
    "text": "a good unit testing framework run a simple test in the assert Run 2 + 2",
    "start": "3370839",
    "end": "3376559"
  },
  {
    "text": "equal 5 see what happens how much information do you gain out of it is are",
    "start": "3376559",
    "end": "3382400"
  },
  {
    "text": "you are the test names need to be valid method names or strings strings are",
    "start": "3382400",
    "end": "3387599"
  },
  {
    "text": "better because you get to write whatever you want just make sure you don't write too much and integration",
    "start": "3387599",
    "end": "3395319"
  },
  {
    "text": "points I'm sometimes I suggest using Google mock because it comes with Google",
    "start": "3395319",
    "end": "3400520"
  },
  {
    "text": "test and they are well integrated together and because there were no option before that but before two years",
    "start": "3400520",
    "end": "3406319"
  },
  {
    "text": "three years ago but integration points are important Runner support how to run",
    "start": "3406319",
    "end": "3412280"
  },
  {
    "text": "the test and how easy to deploy and finally personal test some people like",
    "start": "3412280",
    "end": "3418119"
  },
  {
    "text": "what I show you in metal especially in C++ all those templates and and lambdas",
    "start": "3418119",
    "end": "3424319"
  },
  {
    "text": "I can find the charm in it and some people prefer a Microsoft way of defining the class and then defining the",
    "start": "3424319",
    "end": "3430760"
  },
  {
    "text": "methods underneath some like pictures some like sections it's up to you to decide but the important thing to",
    "start": "3430760",
    "end": "3436520"
  },
  {
    "text": "remember is that I have a friend who hates C++ with a passion a very good developer he told me in a lunch three",
    "start": "3436520",
    "end": "3444319"
  },
  {
    "text": "days ago that he doesn't understand why the languages won't go away obviously",
    "start": "3444319",
    "end": "3449400"
  },
  {
    "text": "that's not going to happen it's a very useful language to have it's a very useful tool to have so the way I see it",
    "start": "3449400",
    "end": "3456359"
  },
  {
    "text": "you have two options and I've been there you can once things go bad and crash and",
    "start": "3456359",
    "end": "3461720"
  },
  {
    "text": "you need to the back St late at night you might course and you want you might be very fast rated with",
    "start": "3461720",
    "end": "3468520"
  },
  {
    "text": "C++ and might blame the language for it or you can write",
    "start": "3468520",
    "end": "3474160"
  },
  {
    "text": "tests and avoid at least half of those problems if not more and that's up to",
    "start": "3474160",
    "end": "3479400"
  },
  {
    "text": "you take that investment and decide what to do with it thank you for listening if you have",
    "start": "3479400",
    "end": "3486000"
  },
  {
    "text": "any question I'll be happy to answer if not I'll be around okay uh you can check",
    "start": "3486000",
    "end": "3492200"
  },
  {
    "text": "out the plural side courses you can uh see my details over there that's a",
    "start": "3492200",
    "end": "3497520"
  },
  {
    "text": "second QR code and definitely need to check ORD if you're cop developer as well uh thank you for listening",
    "start": "3497520",
    "end": "3505670"
  },
  {
    "text": "[Applause]",
    "start": "3505670",
    "end": "3512619"
  }
]