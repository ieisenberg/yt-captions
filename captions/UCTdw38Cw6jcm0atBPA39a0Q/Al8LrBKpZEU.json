[
  {
    "text": "all right good morning London I'm very excited to be here I hope you've all had a great morning so",
    "start": "10679",
    "end": "17600"
  },
  {
    "text": "far so is anyone in here expecting to hear about async and await in",
    "start": "17600",
    "end": "23920"
  },
  {
    "text": "JavaScript I'm sorry to disappoint you but there will be no such thing as JavaScript in here I'm going to talk",
    "start": "25039",
    "end": "30359"
  },
  {
    "text": "about async and8 in net and how we can be more efficient so I want to go back to the basics and look at what is",
    "start": "30359",
    "end": "37079"
  },
  {
    "text": "asynchronous programming all about how do we apply that in our programs and what we need to do to avoid potential",
    "start": "37079",
    "end": "43280"
  },
  {
    "text": "Deadlocks and problems before we get into that I want to introduce myself I'm Philip eberg I'm",
    "start": "43280",
    "end": "48800"
  },
  {
    "text": "a Microsoft and sarine MVP which is pretty much the same thing now that they kind of the same company which means",
    "start": "48800",
    "end": "55680"
  },
  {
    "text": "that I go around to places and talk about technology doesn't necessarily mean that I know how to do things in the",
    "start": "55680",
    "end": "61160"
  },
  {
    "text": "real world so if you do have any questions feel free to ping me on Twitter send me an email um I've also",
    "start": "61160",
    "end": "67799"
  },
  {
    "text": "written a book called C smos Sport and since we pretty much got a full room in here and it's been 5 years since I",
    "start": "67799",
    "end": "73240"
  },
  {
    "text": "released the book I'm going to give everyone in here a free digital copy just take a photo and ping me on Twitter",
    "start": "73240",
    "end": "78799"
  },
  {
    "text": "and I'll sort you out and you also have to leave a green thing out",
    "start": "78799",
    "end": "84280"
  },
  {
    "text": "there ah it's fine if you do want to leave a red note out there please let me know why",
    "start": "84280",
    "end": "90640"
  },
  {
    "text": "all right so asynchronous programming what is that all about you know every time I go into a project and I try to",
    "start": "90640",
    "end": "97920"
  },
  {
    "text": "apply synchronous patterns or I help other developers apply synchronous programming I feel like a firefighter",
    "start": "97920",
    "end": "104159"
  },
  {
    "text": "because every time I add something asynchronous every time I change something to be more",
    "start": "104159",
    "end": "110079"
  },
  {
    "text": "asynchronous it's a fire starting somewhere else I fix one problem and then all of a sudden I have other issues",
    "start": "110079",
    "end": "116840"
  },
  {
    "text": "in my program asynchronous programming is pretty much much all about allowing us to write better applications and we",
    "start": "116840",
    "end": "123840"
  },
  {
    "text": "have tools to do that in net and we're going to explore those tools and hopefully by the end of this session",
    "start": "123840",
    "end": "129000"
  },
  {
    "text": "we'll have a better understanding of what it's all about and how we can build better apps in",
    "start": "129000",
    "end": "135599"
  },
  {
    "text": "net so why do we bother writing applications and using asynchronous principles it's pretty simple we can",
    "start": "135599",
    "end": "142640"
  },
  {
    "text": "build applications that behave better one of the most obvious reasons for myself is that I want to avoid",
    "start": "142640",
    "end": "148560"
  },
  {
    "text": "unreliable applications an unreliable application could for instance like in this case here be an",
    "start": "148560",
    "end": "154800"
  },
  {
    "text": "Android application that behaves weirdly you press a button and all of a sudden",
    "start": "154800",
    "end": "160200"
  },
  {
    "text": "the application thinks that it's crashing in this case here I'm hogging a lot of resources on the UR thread so the",
    "start": "160200",
    "end": "166840"
  },
  {
    "text": "OS thinks that the application is crashing and we can apply as synchronous principles in order for us to build",
    "start": "166840",
    "end": "172920"
  },
  {
    "text": "better apps and avoid this problem which pretty much boils down to improving user",
    "start": "172920",
    "end": "178680"
  },
  {
    "text": "experience so you know I want to build apps that behave better I want to build apps that are faster I want to build",
    "start": "178680",
    "end": "184879"
  },
  {
    "text": "apps that are more efficient both as a developer and for the end user so we",
    "start": "184879",
    "end": "189920"
  },
  {
    "text": "kind of want to avoid this crashing application here but one of the most common reasons for applying asynchronous",
    "start": "189920",
    "end": "195680"
  },
  {
    "text": "principles is to leverage all the available resources on our devices so in",
    "start": "195680",
    "end": "201720"
  },
  {
    "text": "my machine here I got four course with hyperthreading on which kind of gives me eight course I would to leverage all",
    "start": "201720",
    "end": "209360"
  },
  {
    "text": "that and then I have a lot of memory I have 32 gigs of RAM and I want to be able to",
    "start": "209360",
    "end": "214519"
  },
  {
    "text": "leverage all that as well as my super fast SSD drive if I load a file from",
    "start": "214519",
    "end": "219720"
  },
  {
    "text": "disk into memory I want my application to not lock up but allow me to get notified when that data is",
    "start": "219720",
    "end": "226360"
  },
  {
    "text": "available so leverage leveraging all these resources means that we need to be able to use our CPU as well as our",
    "start": "226360",
    "end": "233120"
  },
  {
    "text": "memory which kind of boils down to CPU and iio bound operations inet it's super simple to",
    "start": "233120",
    "end": "241000"
  },
  {
    "text": "kind of group these two together",
    "start": "241000",
    "end": "246079"
  },
  {
    "text": "welcome but what we want to do is that we want to divide these two into different buckets so CPU bound",
    "start": "247000",
    "end": "252439"
  },
  {
    "text": "operations that's more or less about parallelization we want to parallelize our problems which means that we divide",
    "start": "252439",
    "end": "259400"
  },
  {
    "text": "them into smaller pieces and solve them in smaller chunks for CPU bound operations it's like loading things from",
    "start": "259400",
    "end": "265440"
  },
  {
    "text": "the dis adding things to the database going off to the web and doing some calls those two are totally different concepts",
    "start": "265440",
    "end": "272560"
  },
  {
    "text": "but in net we kind of use them together using the task parallel library and the parallel extensions so there's a very",
    "start": "272560",
    "end": "278639"
  },
  {
    "text": "thin line between working in parallel and working with asynchronous programming but we can use these two",
    "start": "278639",
    "end": "284400"
  },
  {
    "text": "concepts together so a lot of the time we go off and we fire off on a synchronous operation in this case here",
    "start": "284400",
    "end": "290840"
  },
  {
    "text": "I have a mobile application I want to start some work I press a button and that goes off and runs something in",
    "start": "290840",
    "end": "297880"
  },
  {
    "text": "parallel it could be that it's solving a problem it could be sending emails it could be doing a lot of things",
    "start": "297880",
    "end": "303840"
  },
  {
    "text": "but the idea is that I start off an operation when that operation is done I get notified that something is",
    "start": "303840",
    "end": "309960"
  },
  {
    "text": "completed so I like to use an example from my book where I talk about how I can improve boiling eggs which is funny",
    "start": "309960",
    "end": "317440"
  },
  {
    "text": "because I don't even eat eggs but somehow I want to improve that process for other people so think about having a",
    "start": "317440",
    "end": "323240"
  },
  {
    "text": "bunch of eggs that you want to boil on your stove you have a lot of pots and the more pots you add the more eggs you",
    "start": "323240",
    "end": "328759"
  },
  {
    "text": "can boil in parallel makes sense right so how do I make that process",
    "start": "328759",
    "end": "333880"
  },
  {
    "text": "asynchronous I take an egg timer I set that to 8 minutes I put it down and once",
    "start": "333880",
    "end": "339039"
  },
  {
    "text": "that egg timer goes off I can go back and take care of the eggs I get a notification that the eggs are now",
    "start": "339039",
    "end": "345120"
  },
  {
    "text": "available for me to take care of meanwhile that a synchronous process is going on I can go ahead and clean the",
    "start": "345120",
    "end": "351000"
  },
  {
    "text": "kitchen I can prepare my bacon I can do other things so while I'm parallelizing the egg boiling I can have that as an",
    "start": "351000",
    "end": "357759"
  },
  {
    "text": "asynchronous process by setting an egg timer and if we translate that into code it",
    "start": "357759",
    "end": "362960"
  },
  {
    "text": "could look something like this here I could start off an asynchronous operation by using the task parallel",
    "start": "362960",
    "end": "369160"
  },
  {
    "text": "Library which then goes off and runs something in parallel now you wouldn't always do this",
    "start": "369160",
    "end": "375759"
  },
  {
    "text": "looking like this here but this is just a an example of how you would translate that into code let's not get ahead of ourselves",
    "start": "375759",
    "end": "383599"
  },
  {
    "text": "let's talk about how we go from being synchronous to being more asynchronous it's all about taking an application",
    "start": "383599",
    "end": "389039"
  },
  {
    "text": "that's synchronous today and we want to improve that to be more asynchronous so what what does that mean it means that",
    "start": "389039",
    "end": "395360"
  },
  {
    "text": "we want to go from a blocking application to a non-blocking application the example that I showed",
    "start": "395360",
    "end": "401319"
  },
  {
    "text": "before with the mobile app crashing that's a blocking application we're doing something on the UR thread we want",
    "start": "401319",
    "end": "407639"
  },
  {
    "text": "to avoid heavy lifting on our main thread or U thread in the application in order for us to be able to let the use",
    "start": "407639",
    "end": "413680"
  },
  {
    "text": "to do other things if we go back and talk about the",
    "start": "413680",
    "end": "418800"
  },
  {
    "text": "egg boiling process I want to mention something called Never block your asynchronous operations",
    "start": "418800",
    "end": "425120"
  },
  {
    "text": "blocking an asynchronous operation is like if we talk about that egg boiling process I take the egg",
    "start": "425120",
    "end": "431400"
  },
  {
    "text": "timer I take it in my hand I put on my blindfold myself I put on a headphones",
    "start": "431400",
    "end": "436720"
  },
  {
    "text": "so I can hear anything and I just put the egg timer in front of me and wait for it to go off but how will I know",
    "start": "436720",
    "end": "442639"
  },
  {
    "text": "that the egg timer goes off if I'm blindfolded and can't hear anything that's the same thing as",
    "start": "442639",
    "end": "448759"
  },
  {
    "text": "blocking our everything synchronous operations so we want the asynchronous operation to be able to allow us to tell",
    "start": "448759",
    "end": "454759"
  },
  {
    "text": "us when it's done and we don't want to block that from being able to do so so we can do other things so most of the",
    "start": "454759",
    "end": "461520"
  },
  {
    "text": "times we talk about going from blocking apps to non-blocking apps which means that we want to take this application",
    "start": "461520",
    "end": "467639"
  },
  {
    "text": "here and we want to translate that into something that's a lot better which",
    "start": "467639",
    "end": "472960"
  },
  {
    "text": "means that we introduce another type of blocking we block the UI from input but",
    "start": "472960",
    "end": "478680"
  },
  {
    "text": "we allow the user to get notified that it's currently working on some",
    "start": "478680",
    "end": "484199"
  },
  {
    "text": "data and we can use these principles like a synchronous programming and parallelization to do things faster",
    "start": "484240",
    "end": "490400"
  },
  {
    "text": "quicker and do it in the background and show the user a loading indicator I'm not saying that blocking the UI in",
    "start": "490400",
    "end": "496520"
  },
  {
    "text": "either of these ways is a better approach but it's certainly better not crouching the app right in the left",
    "start": "496520",
    "end": "502639"
  },
  {
    "text": "example here the OS thinks that we're doing so much work on the UI thread that is thinking that the application is",
    "start": "502639",
    "end": "508599"
  },
  {
    "text": "crashing it could of course have crashed in the other example as well because we don't know what's happening in the background",
    "start": "508599",
    "end": "514599"
  },
  {
    "text": "thread if the background thread is crashing that we're running work on we'll see the loading indicator",
    "start": "514599",
    "end": "520039"
  },
  {
    "text": "forever but as a user I'm more or less you know I'm leaning towards clicking",
    "start": "520039",
    "end": "525600"
  },
  {
    "text": "please close my app rather than when I see a loading indicator I tend to wait a",
    "start": "525600",
    "end": "530640"
  },
  {
    "text": "little bit longer so being able to apply these principles with a synchronous programming it's pretty much all about",
    "start": "530640",
    "end": "536320"
  },
  {
    "text": "allowing the user to get a better experience and with we can do that by introducing the task parallel Library",
    "start": "536320",
    "end": "543000"
  },
  {
    "text": "how many of you have used the the task parall library today so almost everyone how many of you have had a",
    "start": "543000",
    "end": "550160"
  },
  {
    "text": "deadlock okay so no one pretty much raised their hands a deadlock is just around the corner I promise you that you",
    "start": "550160",
    "end": "556560"
  },
  {
    "text": "have apps that have a deadlock in them because it's super simple to get that happening especially when we introduce",
    "start": "556560",
    "end": "562240"
  },
  {
    "text": "async and a wait you know efficiency is not only about building apps that behave quicker it's also about building apps",
    "start": "562240",
    "end": "568880"
  },
  {
    "text": "that are main stainable we have two different types of efficiency we can be efficient as developers and we can have",
    "start": "568880",
    "end": "574279"
  },
  {
    "text": "an app that behaves efficiently so the task parall library is about simplifying concurrent and",
    "start": "574279",
    "end": "580320"
  },
  {
    "text": "asynchronous code which kind of groups these two paradigms together both asynchronous programming as well as",
    "start": "580320",
    "end": "586959"
  },
  {
    "text": "parallel programming we get this bucket that we can use to you know use all",
    "start": "586959",
    "end": "592000"
  },
  {
    "text": "these principles which is great so what's a task all about a task is a way",
    "start": "592000",
    "end": "597440"
  },
  {
    "text": "for us to introduce an asynchronous process if we write task.run and then we have an",
    "start": "597440",
    "end": "604320"
  },
  {
    "text": "anonymous method here we can start a lot of work and do that on we I don't want to say a separate thread but it's most",
    "start": "604320",
    "end": "610800"
  },
  {
    "text": "likely going to end up on a separate thread but when we talk about tasks we don't want to talk about different threads because we don't know where that",
    "start": "610800",
    "end": "616959"
  },
  {
    "text": "is running all right so what I don't want you to do here now is go into your apps",
    "start": "616959",
    "end": "623120"
  },
  {
    "text": "and just wrap all the synchronous code in task. run and have that work asynchronously because that's going to",
    "start": "623120",
    "end": "629040"
  },
  {
    "text": "end up giving you a lot of headache and hopefully after this session you'll know why so this is a simple way for us to",
    "start": "629040",
    "end": "635120"
  },
  {
    "text": "just offload a lot of work we're starting off an a synchronous operation that's going to run some work on a separate thread and then we have a",
    "start": "635120",
    "end": "642200"
  },
  {
    "text": "separate another way of doing this we can say that we have an asynchronous operation that will in when it's done",
    "start": "642200",
    "end": "648040"
  },
  {
    "text": "give us some data back so the first one could be just go ahead and do some work the second one",
    "start": "648040",
    "end": "654399"
  },
  {
    "text": "could be boil my eggs and when the eggs are done I want to receive those eggs back all right so let's just have a",
    "start": "654399",
    "end": "660800"
  },
  {
    "text": "quick look at what this looks like and a few potential problems that we can get",
    "start": "660800",
    "end": "666360"
  },
  {
    "text": "when we're working with tasks so I have a project here it's a simple WPF app now",
    "start": "666360",
    "end": "672720"
  },
  {
    "text": "asynchronous programming is applicable to all types of net apps we can do this in WPF we can do it with Samar apps we",
    "start": "672720",
    "end": "678639"
  },
  {
    "text": "can do it in asp.net console apps win fors and so forth which makes it really powerful but it also means that we need",
    "start": "678639",
    "end": "685600"
  },
  {
    "text": "to understand what happens on each different platform but we'll get into that a bit more later so all I have here is a",
    "start": "685600",
    "end": "692440"
  },
  {
    "text": "button that lets me run something I have a text block called debug and I want to",
    "start": "692440",
    "end": "697880"
  },
  {
    "text": "click my run button and then have some data added to this debug window here so let's just look at the code I'm clicking",
    "start": "697880",
    "end": "704519"
  },
  {
    "text": "that button and what happens is that I I start off an asynchronous",
    "start": "704519",
    "end": "711000"
  },
  {
    "text": "operation and the message that I'm trying to set on my debug. text here kind of indicates what's going to happen",
    "start": "711320",
    "end": "717920"
  },
  {
    "text": "here I'm not going to be able to set anything on that text box if we run this",
    "start": "717920",
    "end": "725240"
  },
  {
    "text": "app and I click the button the idea is that I click it I get into this operation here it runs this task.run",
    "start": "725240",
    "end": "731920"
  },
  {
    "text": "which starts off an asynchronous operation this asynchronous operation tries to manipulate my UI and I click",
    "start": "731920",
    "end": "739279"
  },
  {
    "text": "this here and nothing happens what happens here is that we got",
    "start": "739279",
    "end": "746079"
  },
  {
    "text": "a problem because we can no we cannot invoke the UI from a different thread so this asynchronous operation ended up",
    "start": "746079",
    "end": "751959"
  },
  {
    "text": "being in a different thread but I didn't get notified that there was a problem normally when we try to do things that",
    "start": "751959",
    "end": "758199"
  },
  {
    "text": "we are not allowed to we get an exception so where's the exception in this case I have a reference to the",
    "start": "758199",
    "end": "764320"
  },
  {
    "text": "ongoing operation here so what I can do is that I can introduce something called a",
    "start": "764320",
    "end": "770240"
  },
  {
    "text": "continuation which lets me check if the task that just completed it's",
    "start": "770240",
    "end": "776759"
  },
  {
    "text": "faulted and if it's Ed I can do something properly right so if we set a breako in here the asynchronous",
    "start": "777600",
    "end": "784240"
  },
  {
    "text": "operation completes we get into a place called a continuation which which is a state that tells us that the task",
    "start": "784240",
    "end": "790800"
  },
  {
    "text": "completed we can take care of any potential results I'll click the",
    "start": "790800",
    "end": "797160"
  },
  {
    "text": "button and we'll see here that it's",
    "start": "797160",
    "end": "803199"
  },
  {
    "text": "fed and then we got an exception so I want you to remember that is here that when we get an exception on",
    "start": "805000",
    "end": "811160"
  },
  {
    "text": "one of our tasks that's going to be swallowed by that task itself so a lot of times we might have",
    "start": "811160",
    "end": "818480"
  },
  {
    "text": "asynchronous operations that fail silently which means that our apps might",
    "start": "818480",
    "end": "823680"
  },
  {
    "text": "look like they behave like they should but in fact there's things that might be crashing on different threads and",
    "start": "823680",
    "end": "829519"
  },
  {
    "text": "different tasks that we're not taken care of so in this case here what we would have to do is that we'd have to properly",
    "start": "829519",
    "end": "836480"
  },
  {
    "text": "handle this here and this starts to get a little bit messy CU now we end up having a",
    "start": "836480",
    "end": "842800"
  },
  {
    "text": "different method here that has to check this task here if it's faulted then we need to go back and do something else and just gets a bit",
    "start": "842800",
    "end": "849320"
  },
  {
    "text": "messy the proper way of doing this if we want to invoke the UI if we want to avoid have this problem up here what we",
    "start": "849320",
    "end": "855839"
  },
  {
    "text": "can do is that we can inside the continuation for instance we can use",
    "start": "855839",
    "end": "860880"
  },
  {
    "text": "something called the dispatcher which is something that's available on pretty much any platform that allows you to do",
    "start": "860880",
    "end": "865959"
  },
  {
    "text": "asynchronous operations it's a way for us to communicate back with the original",
    "start": "865959",
    "end": "871079"
  },
  {
    "text": "thread so we can talk with in this case the UI thread or in you know asp.net we",
    "start": "871079",
    "end": "876639"
  },
  {
    "text": "can use the thread that's executing our oper our web",
    "start": "876639",
    "end": "882000"
  },
  {
    "text": "request so if I start this again here we'll see that I'll be able to set that from this",
    "start": "882000",
    "end": "888079"
  },
  {
    "text": "different thread which sets the message to done so if I use the dispatcher I can invoke the UR thread which is",
    "start": "888079",
    "end": "896480"
  },
  {
    "text": "great so what I want you to remember from this here is that tasks tend to swallow exceptions and we need to",
    "start": "896480",
    "end": "902279"
  },
  {
    "text": "validate that those tasks didn't get any exceptions and if they did get exceptions we need to handle that",
    "start": "902279",
    "end": "907680"
  },
  {
    "text": "properly but it could end up getting a little bit messy so in order for us to streamline",
    "start": "907680",
    "end": "915000"
  },
  {
    "text": "the work with asynchronous programming we want to introduce more helpers in our programming language so we want to",
    "start": "915000",
    "end": "920759"
  },
  {
    "text": "introduce async and await and we want to do that because it's pretty hard working",
    "start": "920759",
    "end": "926120"
  },
  {
    "text": "with the synchronous programming if we need to look the state for States for all our tasks and we need to keep track",
    "start": "926120",
    "end": "931680"
  },
  {
    "text": "of all the errors and need to do all that ourselves our applications are going to be bigger and a little bit",
    "start": "931680",
    "end": "937040"
  },
  {
    "text": "Messier even though the task parallel library has been around since net 4 and helped us a lot along the way to solve",
    "start": "937040",
    "end": "943079"
  },
  {
    "text": "these problems it's still not really there to make our applications be more maintainable so what they did was they",
    "start": "943079",
    "end": "949680"
  },
  {
    "text": "introduced async in a weight which is pretty much just two contextual keywords that means that they don't",
    "start": "949680",
    "end": "956600"
  },
  {
    "text": "change the runtime it means that our applications will just have a different",
    "start": "956600",
    "end": "962160"
  },
  {
    "text": "compilation step so the compiler will see that we use the async and Away keywords and they'll just add a bunch of",
    "start": "962160",
    "end": "967680"
  },
  {
    "text": "code for us and solve all these complexities for us actually what happens is that they",
    "start": "967680",
    "end": "973800"
  },
  {
    "text": "hide our complexity since it's so hard to work with asyn and a we and asynchronous",
    "start": "973800",
    "end": "979279"
  },
  {
    "text": "programming and parallel programming it's still complex we just hide the complexity somewhere else which means",
    "start": "979279",
    "end": "985800"
  },
  {
    "text": "that we still need to understand this complexity and what means to add these different",
    "start": "985800",
    "end": "991839"
  },
  {
    "text": "keywords but if they hide the complexity from our apps that means that we get more readable code which ends up being",
    "start": "991839",
    "end": "999199"
  },
  {
    "text": "hopefully more maintainable if we apply async in a way properly in our apps and if we are doing that efficiently it",
    "start": "999199",
    "end": "1005600"
  },
  {
    "text": "means that our apps are going to be more readable and hopefully more maintainable but hiding complexity and a",
    "start": "1005600",
    "end": "1012560"
  },
  {
    "text": "lot of the times when I work on a pro program that's applying these principles I work with Developers that",
    "start": "1012560",
    "end": "1019560"
  },
  {
    "text": "don't always know what to do with the async and a weight keyword for instance myself when I started out I applied the",
    "start": "1019560",
    "end": "1026720"
  },
  {
    "text": "ASN keyword to a method and just hope that well now it's a synchronous it's going to be running somewhere else right",
    "start": "1026720",
    "end": "1032438"
  },
  {
    "text": "that's not going to happen which means that when even if our applications look more readable it's going to be more",
    "start": "1032439",
    "end": "1037839"
  },
  {
    "text": "error prone which means that we're going to end up having more Deadlocks and it's even simpler to get a deadlock with",
    "start": "1037839",
    "end": "1044079"
  },
  {
    "text": "async and a weight than it is with tasks you actually have to do a little bit of",
    "start": "1044079",
    "end": "1049160"
  },
  {
    "text": "hard work to deadlock an application when you're simply using tasks but when you're using async and a wait it's super",
    "start": "1049160",
    "end": "1055640"
  },
  {
    "text": "simple to deadlock an app and if the task swallow our exceptions that means that we might not always know if there's",
    "start": "1055640",
    "end": "1062480"
  },
  {
    "text": "a deadlock right so what does it look like adding these two keywords these two",
    "start": "1062480",
    "end": "1067760"
  },
  {
    "text": "keywords are always used together at least that's the the intention right I",
    "start": "1067760",
    "end": "1074000"
  },
  {
    "text": "don't always see them used together but when they're not that's incorrect you want to use these two keywords together in the same",
    "start": "1074000",
    "end": "1079919"
  },
  {
    "text": "context so for instance what we do here the first thing that we do to make something asynchronous is to Mark our",
    "start": "1079919",
    "end": "1085799"
  },
  {
    "text": "method in the method signature to say that the intention of this method is that it's going to run",
    "start": "1085799",
    "end": "1092280"
  },
  {
    "text": "asynchronously and how does it know and how does it work with asynchronous programming if that keyword doesn't make",
    "start": "1092280",
    "end": "1097760"
  },
  {
    "text": "this method asynchronous then what does we have the aw keyword down here that's where pretty",
    "start": "1097760",
    "end": "1104280"
  },
  {
    "text": "much all the magic happens there's a lot of things happening with both of them but but when we add the AWA keyword we",
    "start": "1104280",
    "end": "1110760"
  },
  {
    "text": "are indicating that there's some asynchronous operation going on I have a 2C delay here that's running somewhere",
    "start": "1110760",
    "end": "1117480"
  },
  {
    "text": "else it could be my egg boiling process so what I'm saying here is that well now",
    "start": "1117480",
    "end": "1123000"
  },
  {
    "text": "that we have this egg boiling here I want to pause here and before we go on",
    "start": "1123000",
    "end": "1128120"
  },
  {
    "text": "to the next step before we do the debug. right line X here I want to wait for this egg bowling process to",
    "start": "1128120",
    "end": "1135200"
  },
  {
    "text": "finish so these two together is what makes the a synchronous these two together with the tasks it what makes",
    "start": "1135200",
    "end": "1141200"
  },
  {
    "text": "this magic happen so I said that it's going to wait here but that's not really accurate it's not going to be sitting",
    "start": "1141200",
    "end": "1148240"
  },
  {
    "text": "here waiting blocking the app until it's done it's going to continue executing the app from where you call this method so",
    "start": "1148240",
    "end": "1156400"
  },
  {
    "text": "we'll look at that an example of that in just a moment to make more to make it like a bit more clear so the await",
    "start": "1156400",
    "end": "1162559"
  },
  {
    "text": "keyword kind of marks something called a continuation so you saw before where I did the t1. continue with and then I",
    "start": "1162559",
    "end": "1168360"
  },
  {
    "text": "could C capture any potential problems the await keer does the same",
    "start": "1168360",
    "end": "1173760"
  },
  {
    "text": "thing but it also does a lot of other magic it checks if there's an exception on our tasks if there's a problem on the",
    "start": "1173760",
    "end": "1180520"
  },
  {
    "text": "task that we just executed the await keyword will in fact make sure that we throw that exception back to the caller",
    "start": "1180520",
    "end": "1188039"
  },
  {
    "text": "or set it on the the task that's currently running but what it's also doing is that",
    "start": "1188039",
    "end": "1194520"
  },
  {
    "text": "when we see the await keyword it returns back to the caller with a reference to the ongoing operation the ongoing",
    "start": "1194520",
    "end": "1201440"
  },
  {
    "text": "work so that means that when we see the await keyword it's going to return back",
    "start": "1201440",
    "end": "1206679"
  },
  {
    "text": "to where the caller called our asynchronous method and then continue with the next line after that so there's",
    "start": "1206679",
    "end": "1213120"
  },
  {
    "text": "complexity and stuff happening behind the scenes here so remember I said there's no changes in the run in the runtime that means that all this logic",
    "start": "1213120",
    "end": "1220400"
  },
  {
    "text": "is bundled with your app and if you're using this incorrectly you're going to end up having a problem in your",
    "start": "1220400",
    "end": "1227400"
  },
  {
    "text": "applications so what's the difference between using the await and task. continue with except the obvious that",
    "start": "1227400",
    "end": "1234640"
  },
  {
    "text": "the exception will be thrown back to the caller there also a few other",
    "start": "1234640",
    "end": "1239880"
  },
  {
    "text": "differences the first one here we are simply doing continue with and then we're writing out to the debugger but in",
    "start": "1239880",
    "end": "1247080"
  },
  {
    "text": "that case here if we tried to invoke our UI we would get a problem we wouldn't be",
    "start": "1247080",
    "end": "1252120"
  },
  {
    "text": "able to do that it's also looking a little bit more messy in the second example here here we",
    "start": "1252120",
    "end": "1259200"
  },
  {
    "text": "have the await keyword to indicate that I want all the code beneath here to be",
    "start": "1259200",
    "end": "1264400"
  },
  {
    "text": "in something called a continuation but the cool thing here is that we are now back to the colar thread",
    "start": "1264400",
    "end": "1272600"
  },
  {
    "text": "so these two are so different that in the first case we cannot invoke the UI because we're on a different thread but",
    "start": "1272600",
    "end": "1279159"
  },
  {
    "text": "in the second one we are back to where we called the synchronous operation from which could potentially be the UI",
    "start": "1279159",
    "end": "1286679"
  },
  {
    "text": "thread all right so what's the bad things about async in a away what makes this you know it sounds like it's",
    "start": "1286679",
    "end": "1292159"
  },
  {
    "text": "awesome it makes our application more readable it hides complexity that we don't know don't want to handle",
    "start": "1292159",
    "end": "1298120"
  },
  {
    "text": "ourselves but you know that's one of the problems it increases the complexity of the apps and if we don't have a great",
    "start": "1298120",
    "end": "1304240"
  },
  {
    "text": "understanding of what happens when we add those keywords for instance what's generated when we add the Asing keyword",
    "start": "1304240",
    "end": "1310159"
  },
  {
    "text": "what happens when we add the await keyword into our method if we don't know that it's pretty easy for us to get",
    "start": "1310159",
    "end": "1317279"
  },
  {
    "text": "problems and that's what makes it hard to master like I've been working with",
    "start": "1317279",
    "end": "1322400"
  },
  {
    "text": "asynchronous programming for a long time now I've done a lot of talks about asyn and A8 and every time I learn something",
    "start": "1322400",
    "end": "1327640"
  },
  {
    "text": "new every time I tend to deadlock an app or I do something that you know I get a",
    "start": "1327640",
    "end": "1332799"
  },
  {
    "text": "fun experience out of it as well which is great that means that Deadlocks are just around the corner so I want to show",
    "start": "1332799",
    "end": "1339760"
  },
  {
    "text": "you this app here that we worked on so what we could potentially do inside this",
    "start": "1339760",
    "end": "1345279"
  },
  {
    "text": "app here instead of having these tasks in here let's move this over",
    "start": "1345279",
    "end": "1351240"
  },
  {
    "text": "to a different method so in the example code that I had what I had was that I had a public async task run",
    "start": "1351240",
    "end": "1361240"
  },
  {
    "text": "async where X is equal to 10 and then we had a wait task. delay 2",
    "start": "1362480",
    "end": "1369400"
  },
  {
    "text": "seconds and then we could potentially do something after this here so let's say that we want to return some data here",
    "start": "1369400",
    "end": "1377840"
  },
  {
    "text": "so how do I return something from an asynchronous method well task is a generic type so I could say that when",
    "start": "1381480",
    "end": "1388120"
  },
  {
    "text": "this is done it's going to return a string and we can call this up",
    "start": "1388120",
    "end": "1396320"
  },
  {
    "text": "here just want to prove a point here when we call this here now what",
    "start": "1396520",
    "end": "1403799"
  },
  {
    "text": "happens is that first it's going to run run async it's going to we click the button it goes into run async it",
    "start": "1403799",
    "end": "1410400"
  },
  {
    "text": "declares the variable X is equal to 10 it sees that we are now using the await",
    "start": "1410400",
    "end": "1415520"
  },
  {
    "text": "keyword we start off on asynchronous operation that will run for two seconds and then it says here that well I don't",
    "start": "1415520",
    "end": "1422440"
  },
  {
    "text": "want to do anything after this line until you are done so what happens it",
    "start": "1422440",
    "end": "1427760"
  },
  {
    "text": "goes back to whoever calls this method it goes up here and then it goes to the next",
    "start": "1427760",
    "end": "1433679"
  },
  {
    "text": "line and once it's completed once those those two seconds",
    "start": "1433679",
    "end": "1439240"
  },
  {
    "text": "are up it'll come back and it'll set the value hello world as a result on the",
    "start": "1439240",
    "end": "1445760"
  },
  {
    "text": "task that we're returning here all right so this is normally where",
    "start": "1445760",
    "end": "1450960"
  },
  {
    "text": "people start to get a headache and that's totally fine so in order for us to get the value",
    "start": "1450960",
    "end": "1457279"
  },
  {
    "text": "hello world here so I don't want to continue to just this line down here in order for us to get the value out of run",
    "start": "1457279",
    "end": "1464480"
  },
  {
    "text": "async I need to introduce another weight keyword that",
    "start": "1464480",
    "end": "1470159"
  },
  {
    "text": "means that I need to mark my run click here as async and I'll wrap this in a try and",
    "start": "1470159",
    "end": "1477320"
  },
  {
    "text": "catch block does anyone know why I wrap this",
    "start": "1477320",
    "end": "1482520"
  },
  {
    "text": "in a try catch block because I don't want to throw any",
    "start": "1482520",
    "end": "1490559"
  },
  {
    "text": "exceptions so the reason I do that seriously is though because this is marked as async void and I'll show you",
    "start": "1491600",
    "end": "1498559"
  },
  {
    "text": "sneak peek of the state machine soon did you just say that ah sorry um yes so the reason is",
    "start": "1498559",
    "end": "1507880"
  },
  {
    "text": "because it's acing void um and I'll show you the state machine later on and what",
    "start": "1507880",
    "end": "1513679"
  },
  {
    "text": "happens so to get the value out of run async now I'll have to use the await keyword",
    "start": "1513679",
    "end": "1520880"
  },
  {
    "text": "so when I use await here I Mark a continuation which means that it won't continue doing anything else before it",
    "start": "1520880",
    "end": "1527840"
  },
  {
    "text": "gets that value and once the task is done what the await keyword here will do is that it will validate that we had no",
    "start": "1527840",
    "end": "1534960"
  },
  {
    "text": "exceptions so if we throw an exception in here it'll know it'll see that and we",
    "start": "1534960",
    "end": "1540520"
  },
  {
    "text": "would be in the catch block here right it also catches our result from that as",
    "start": "1540520",
    "end": "1547279"
  },
  {
    "text": "synchronous operation so the a we keyword does a lot of things for us which is great and now I could say",
    "start": "1547279",
    "end": "1553159"
  },
  {
    "text": "debug. text is equal to result because remember that we are now back to the",
    "start": "1553159",
    "end": "1559080"
  },
  {
    "text": "caller thread so hopefully if I run this here after 2 seconds it should say hello",
    "start": "1559080",
    "end": "1565840"
  },
  {
    "text": "world right so I didn't have to introduce any dispatchers I didn't have to do the do continue with I just had to",
    "start": "1565840",
    "end": "1573559"
  },
  {
    "text": "get an understanding of what happens when right I had to understand what applying the a keyword does and what",
    "start": "1573559",
    "end": "1580320"
  },
  {
    "text": "using the await keyword um how that changes our application but the cool thing here is",
    "start": "1580320",
    "end": "1586399"
  },
  {
    "text": "that I don't have to worry too much about cross",
    "start": "1586399",
    "end": "1590240"
  },
  {
    "text": "threading all right let's talk about the state machine",
    "start": "1592960",
    "end": "1599880"
  },
  {
    "text": "so the state machine is pretty much what's making all the magic happen that's where all the great things goes",
    "start": "1599880",
    "end": "1605720"
  },
  {
    "text": "all the complexity goes into the state machine and that's also what makes this application a little a little bit more",
    "start": "1605720",
    "end": "1612279"
  },
  {
    "text": "fragile so State machine is pretty much like a child when you're going on a long",
    "start": "1612279",
    "end": "1619279"
  },
  {
    "text": "vacation you're sitting in your car you're driving somewhere and you have a child in the back seat asking you are we there yet that's pretty much a state",
    "start": "1619279",
    "end": "1626480"
  },
  {
    "text": "machine so the state machine keeps track of what we're doing when we're doing what and it's continuously asking us if",
    "start": "1626480",
    "end": "1634279"
  },
  {
    "text": "we're ready to go to the next step it's nagging our application all the time asking us are We Done Yet with this",
    "start": "1634279",
    "end": "1640960"
  },
  {
    "text": "asynchronous operation it also handles potential errors and results which means that",
    "start": "1640960",
    "end": "1648240"
  },
  {
    "text": "inside the state machine what happens is that it will actually capture any exceptions that are being thrown inside",
    "start": "1648240",
    "end": "1653279"
  },
  {
    "text": "a task and it will know how to handle that properly it also takes care of executing",
    "start": "1653279",
    "end": "1660080"
  },
  {
    "text": "the code after the await keyword so it's executing all the code in the continuation",
    "start": "1660080",
    "end": "1665279"
  },
  {
    "text": "block all right so that sounds pretty cool so how do we get this state machine",
    "start": "1665279",
    "end": "1670960"
  },
  {
    "text": "this state machine is generated when we apply the Asing keyword so whenever we",
    "start": "1670960",
    "end": "1677200"
  },
  {
    "text": "Mark a method as async it pretty much takes the entire method body off that method and moves",
    "start": "1677200",
    "end": "1683720"
  },
  {
    "text": "moves it into somewhere else and applies a lot of complexity to that",
    "start": "1683720",
    "end": "1689120"
  },
  {
    "text": "code so I have this example here this is pre-compilation so this is something I",
    "start": "1689120",
    "end": "1694159"
  },
  {
    "text": "wrote in in Visual Studio I have this method marked as being async I have some continuation down here at the bottom",
    "start": "1694159",
    "end": "1700640"
  },
  {
    "text": "which is writing out something to the B do right line now when I compile this here normally we can just open this up in",
    "start": "1700640",
    "end": "1707159"
  },
  {
    "text": "reflector and have a look at at that and that's exactly what I did here so what happens was that it changed the entire",
    "start": "1707159",
    "end": "1714360"
  },
  {
    "text": "behavior of My Method see here that it removed the Asing keyword from the method signature",
    "start": "1714360",
    "end": "1721960"
  },
  {
    "text": "because we canot we cannot change the calling convention right because we cannot change the the runtime it's only",
    "start": "1721960",
    "end": "1728960"
  },
  {
    "text": "something that changes during compilation it introduced something called run async dore1 which is the",
    "start": "1728960",
    "end": "1735679"
  },
  {
    "text": "state machine so it instantiates that and creates a reference to the state machine and then here at the bottom we",
    "start": "1735679",
    "end": "1742960"
  },
  {
    "text": "return a task this is a reference to the ongoing work so I don't know if you",
    "start": "1742960",
    "end": "1748200"
  },
  {
    "text": "noticed but in this case here we don't have a return statement and up until now I didn't",
    "start": "1748200",
    "end": "1753640"
  },
  {
    "text": "mention why we don't have a return statement it just magically compiles and that's because we have the asyn keyword",
    "start": "1753640",
    "end": "1760120"
  },
  {
    "text": "so as soon as we add the ASN keyword we'll automatically get a task returned as we can see here at the bottom so we",
    "start": "1760120",
    "end": "1767000"
  },
  {
    "text": "get a reference to the going work in the state machine all",
    "start": "1767000",
    "end": "1772480"
  },
  {
    "text": "right so if we dig deeper into the state machine it's running sort of an internal",
    "start": "1772480",
    "end": "1777919"
  },
  {
    "text": "loop it's checking if we're done with the asynchronous operations and if we drill into that",
    "start": "1777919",
    "end": "1783799"
  },
  {
    "text": "we'll get into some code looking like this here so this is in fact the code that we had in our run async method we",
    "start": "1783799",
    "end": "1790080"
  },
  {
    "text": "can see here that we have the task. delay starting that off we can see that it has the x is equal to 10 on the line",
    "start": "1790080",
    "end": "1797399"
  },
  {
    "text": "above that so it's moving all our code and it's splitting up into smaller pieces and putting it in the right place",
    "start": "1797399",
    "end": "1803159"
  },
  {
    "text": "inside the state machine if it's not completed it goes out to the outer loop and runs that",
    "start": "1803159",
    "end": "1808399"
  },
  {
    "text": "again and asks us again if it's done but then when we are done when we are",
    "start": "1808399",
    "end": "1813480"
  },
  {
    "text": "finally ready to handle the result when we are in the continuation we are back at the line at the bottom so there's no",
    "start": "1813480",
    "end": "1821240"
  },
  {
    "text": "magic here there's nothing going back to the collar thread there's no references to the callar thread here so how come",
    "start": "1821240",
    "end": "1827240"
  },
  {
    "text": "this runs on our UI thread it's because the entire State machine runs on the thread of the collar",
    "start": "1827240",
    "end": "1834480"
  },
  {
    "text": "which means that if the UI thread spawns off an as synchronous method if we Mark something as async that",
    "start": "1834480",
    "end": "1840760"
  },
  {
    "text": "entire method will run on that thread right so keep that in",
    "start": "1840760",
    "end": "1847559"
  },
  {
    "text": "mind this entire block is executed on the CER thread that's super important",
    "start": "1847559",
    "end": "1852880"
  },
  {
    "text": "and we'll see why soon all right so async void it's a",
    "start": "1852880",
    "end": "1860360"
  },
  {
    "text": "problem so I like to talk about how I stand in line to get an ice cream during",
    "start": "1860600",
    "end": "1866039"
  },
  {
    "text": "summer but being from Sweden and now being in London most of us don't know what a sun looks like or we're going to",
    "start": "1866039",
    "end": "1873000"
  },
  {
    "text": "the beach for that matter but Asing void is like just imagine just imagine going",
    "start": "1873000",
    "end": "1878200"
  },
  {
    "text": "to the beach it's a hot day you stand in line for 40 minutes with your kids you're trying to get on ice cream you're",
    "start": "1878200",
    "end": "1883240"
  },
  {
    "text": "the last one in the line you buy the ice cream the truck closes drives away and then you drop the ice scam in the sand",
    "start": "1883240",
    "end": "1889639"
  },
  {
    "text": "that's how I feel every time I see aing void I want to lie down and cry because",
    "start": "1889639",
    "end": "1895360"
  },
  {
    "text": "it hurts my feelings so is it really that bad well obviously because I want",
    "start": "1895360",
    "end": "1900880"
  },
  {
    "text": "to lie down and cry but if we look at this example here we're doing an async",
    "start": "1900880",
    "end": "1905960"
  },
  {
    "text": "void run async what could be the potential problem here if we compile this here it'll end up looking something",
    "start": "1905960",
    "end": "1912440"
  },
  {
    "text": "like this here it looks pretty much the same like the other one that we decomp",
    "start": "1912440",
    "end": "1918559"
  },
  {
    "text": "fil the only difference is that we no longer have a task that's being returned here there's nothing that returns",
    "start": "1918559",
    "end": "1925519"
  },
  {
    "text": "anything at the bottom here and internally it's using a totally different way of creating our state",
    "start": "1925519",
    "end": "1931080"
  },
  {
    "text": "machine it's using something called the async void method Builder which is a separate way of creating the state",
    "start": "1931080",
    "end": "1937360"
  },
  {
    "text": "machine for a void method so why is this a problem why is it a problem that we don't get a reference to the ongoing",
    "start": "1937360",
    "end": "1944120"
  },
  {
    "text": "work if we don't have a reference to the ongoing work How would do we know if there's a problem how do we know if",
    "start": "1944120",
    "end": "1950440"
  },
  {
    "text": "there's an exception you know if I ever buy a car that's written in net I want to make",
    "start": "1950440",
    "end": "1956559"
  },
  {
    "text": "sure that they don't do async void because we'll end up like this here so let me show you what",
    "start": "1956559",
    "end": "1964679"
  },
  {
    "text": "happens look at these two um we have this Tri catch block here we're calling",
    "start": "1966279",
    "end": "1971440"
  },
  {
    "text": "run a syn this application works right what happens if we let's just",
    "start": "1971440",
    "end": "1978320"
  },
  {
    "text": "remove the return from here so and still call that",
    "start": "1978320",
    "end": "1985880"
  },
  {
    "text": "method so we'll simply do await run",
    "start": "1985919",
    "end": "1990480"
  },
  {
    "text": "async and inside run async we're going to throw an",
    "start": "1991000",
    "end": "1995919"
  },
  {
    "text": "exception and I'm going to mark this as async void does anyone know what's going to",
    "start": "1998360",
    "end": "2004360"
  },
  {
    "text": "happen now first thing is that you probably know what what's going to happen um first thing is that I can no",
    "start": "2004360",
    "end": "2011679"
  },
  {
    "text": "longer use the await keyword that's problematic so now I have no way of saying well I want to wait for",
    "start": "2011679",
    "end": "2017960"
  },
  {
    "text": "that operation to run but since the method signature doesn't indicate that it's an asynchronous operation I have no",
    "start": "2017960",
    "end": "2023919"
  },
  {
    "text": "idea that it's asynchronous I have no idea that it's now something that's going to run somewhere else so we have",
    "start": "2023919",
    "end": "2029840"
  },
  {
    "text": "to remove the await keyword first all right that doesn't seem too bad right",
    "start": "2029840",
    "end": "2036679"
  },
  {
    "text": "I'm wrapping that in a triy C block how about we put a breakpoint here and see what happens if I run",
    "start": "2036679",
    "end": "2043880"
  },
  {
    "text": "this I'm going to click the",
    "start": "2044960",
    "end": "2048638"
  },
  {
    "text": "button and I got an exception that's great but the application crashed let me",
    "start": "2052480",
    "end": "2058280"
  },
  {
    "text": "run that without the de buger look at that the application simply crashed which is a bit",
    "start": "2058280",
    "end": "2065200"
  },
  {
    "text": "problematic I have the meth I have the method called inside a TR catch block but there's no way for me to catch the",
    "start": "2065200",
    "end": "2071960"
  },
  {
    "text": "exception because this is marked as Asing void what happens is that inside the state machine it sees that we don't",
    "start": "2071960",
    "end": "2078560"
  },
  {
    "text": "have a task that's currently a reference to the ongoing operation so what's the next best thing to do well let's tear",
    "start": "2078560",
    "end": "2085240"
  },
  {
    "text": "down the application let's tear down the app domain there's no way for us to recover from this so if you mark",
    "start": "2085240",
    "end": "2091079"
  },
  {
    "text": "something as acing void there's no way for us to catch those exceptions so why",
    "start": "2091079",
    "end": "2096280"
  },
  {
    "text": "would we allow us to do a void it's because of event handlers",
    "start": "2096280",
    "end": "2101760"
  },
  {
    "text": "because we can't go ahead and change all the delegates for all the event handlers right so the problem is we have no way",
    "start": "2101760",
    "end": "2108280"
  },
  {
    "text": "of catching those types of exceptions so how do we make sure that we don't throw any exceptions in here don't do too much",
    "start": "2108280",
    "end": "2115000"
  },
  {
    "text": "things inside your event handlers because if you have like you handle UNH",
    "start": "2115000",
    "end": "2120960"
  },
  {
    "text": "handle exceptions in your app you won't be able to catch that either which is problematic so just make sure you build",
    "start": "2120960",
    "end": "2126880"
  },
  {
    "text": "applications that throw throw any exceptions if you have to use acing void or it's probably easier to just avoid",
    "start": "2126880",
    "end": "2133599"
  },
  {
    "text": "Asing void all right so the way that we fix this is simple we simply change void to",
    "start": "2133599",
    "end": "2142760"
  },
  {
    "text": "task but then what happens is that we need to avoid that in the Coler because now we change the behavior of the",
    "start": "2142760",
    "end": "2149160"
  },
  {
    "text": "app right let's talk a little bit more about",
    "start": "2149160",
    "end": "2154520"
  },
  {
    "text": "efficiency how can we build apps that behave a little bit more efficient and how can we be more efficient now that we",
    "start": "2154520",
    "end": "2160960"
  },
  {
    "text": "have an understanding of what is a synchronous programming how do we apply that in our applications what's the",
    "start": "2160960",
    "end": "2166480"
  },
  {
    "text": "difference between using continue with and using a weit how what does the state",
    "start": "2166480",
    "end": "2171680"
  },
  {
    "text": "machine do internally we can probably think a little bit ahead and think about the efficient parts of asyn and a weight",
    "start": "2171680",
    "end": "2179319"
  },
  {
    "text": "so one way to be efficient is to avoid Deadlocks so remember before that I said",
    "start": "2179319",
    "end": "2185319"
  },
  {
    "text": "it was probably a little bit easier before to make Deadlocks sorry it's easier now to do",
    "start": "2185319",
    "end": "2191680"
  },
  {
    "text": "Deadlocks prior to Asing it away it was a little bit more difficult you had to do a little bit of",
    "start": "2191680",
    "end": "2197680"
  },
  {
    "text": "work here's a little bit of an example so in this case here I'm",
    "start": "2197680",
    "end": "2203319"
  },
  {
    "text": "simulating a 1 millisecond worth of load right so I'm doing some work for",
    "start": "2203319",
    "end": "2209599"
  },
  {
    "text": "one millisecond after that I would want to continue with something dispatcher here tries to",
    "start": "2209599",
    "end": "2216560"
  },
  {
    "text": "invoke the UI notice this one here at the",
    "start": "2216560",
    "end": "2221680"
  },
  {
    "text": "bottom so remember before I said it's important to remember that the state machine runs on our color",
    "start": "2221680",
    "end": "2228960"
  },
  {
    "text": "thread and we'll get to that soon but in this case here we're blocking just as if",
    "start": "2228960",
    "end": "2234359"
  },
  {
    "text": "this was running on the UI thread right so here we are blocking our UI thread",
    "start": "2234359",
    "end": "2240400"
  },
  {
    "text": "and then we're trying to invoke our U thread actually what it's doing is that the white keyword here will say I want",
    "start": "2240400",
    "end": "2247520"
  },
  {
    "text": "want to force us to wait on this thread until the asynchronous operation is done",
    "start": "2247520",
    "end": "2253520"
  },
  {
    "text": "the asynchronous operation says well I can't be marked as done until I can communicate back to the UI thread which",
    "start": "2253520",
    "end": "2259920"
  },
  {
    "text": "kind of ends up in a deadlock we're locking the UI thread until it's done and it's trying to communicate with the",
    "start": "2259920",
    "end": "2265880"
  },
  {
    "text": "UI thread to be completed all right so this looks a bit tedious how many of you have seen this",
    "start": "2265880",
    "end": "2272119"
  },
  {
    "text": "before probably not so many but with async in a weit",
    "start": "2272119",
    "end": "2278599"
  },
  {
    "text": "all we need to do is this so why is this a lot easier with",
    "start": "2278599",
    "end": "2284960"
  },
  {
    "text": "async and a weight isn't it supposed to be harder to get bad applications with async and a we in this case here what we",
    "start": "2284960",
    "end": "2291359"
  },
  {
    "text": "are doing is that we are starting off our run async method remember the async for is State machine for the async",
    "start": "2291359",
    "end": "2297400"
  },
  {
    "text": "operation is running on the collar thread this Loop that's continuously",
    "start": "2297400",
    "end": "2303319"
  },
  {
    "text": "asking us if it's done it's running on our color thread and then we're blocking the color thread we're blocking the same",
    "start": "2303319",
    "end": "2309119"
  },
  {
    "text": "thread that executes the state machine so whichever task it's awaiting inside itself cannot communicate back to tell",
    "start": "2309119",
    "end": "2316000"
  },
  {
    "text": "us that it's done which means that we end up in a deadlock and there's no way for us to recover from this so what do",
    "start": "2316000",
    "end": "2322760"
  },
  {
    "text": "we take away from this never use the weight keyword never do do result never do",
    "start": "2322760",
    "end": "2329000"
  },
  {
    "text": "weight never use task. weight all for instance if you Avo avoid those things",
    "start": "2329000",
    "end": "2335960"
  },
  {
    "text": "you'll have a harder time getting ad deadlock okay so don't do",
    "start": "2335960",
    "end": "2343000"
  },
  {
    "text": "weight another thing I like to talk about when I mention efficiency is the overuse of unnecessary State",
    "start": "2343000",
    "end": "2350640"
  },
  {
    "text": "machines that sounds a little bit weird so imagine this case",
    "start": "2350640",
    "end": "2355720"
  },
  {
    "text": "here this is a legit code here that I'm marking something as async returns a task I have a",
    "start": "2355720",
    "end": "2362880"
  },
  {
    "text": "continuation it's calling some internal method that's being marked as async",
    "start": "2362880",
    "end": "2367960"
  },
  {
    "text": "I have this other thing that's also awaiting something that's being async which is then in its turn awaiting",
    "start": "2367960",
    "end": "2373079"
  },
  {
    "text": "something that's being async which in its turn is yeah you have the",
    "start": "2373079",
    "end": "2378240"
  },
  {
    "text": "drill what happens if we do this",
    "start": "2378240",
    "end": "2383480"
  },
  {
    "text": "well probably not something good so I have that code in here the exact same",
    "start": "2383480",
    "end": "2388839"
  },
  {
    "text": "one I have a run async method here which calls something internal which is marked as async which is calling something",
    "start": "2388839",
    "end": "2395240"
  },
  {
    "text": "that's marked as async they're all using the in in away keyword if I compile this here going to",
    "start": "2395240",
    "end": "2402359"
  },
  {
    "text": "set that start a project going to go ahead and go into reflector and hopefully I've got this",
    "start": "2402359",
    "end": "2408839"
  },
  {
    "text": "loaded here at the bottom so we'll see what this looks like now I got State machine for run",
    "start": "2408839",
    "end": "2417480"
  },
  {
    "text": "async which makes sense because we have a continuation we need to invoke the UI or do something in that method but then",
    "start": "2417480",
    "end": "2423079"
  },
  {
    "text": "we have a state machine for run internal and something async and something internal async so the problem here is",
    "start": "2423079",
    "end": "2428760"
  },
  {
    "text": "that each of these methods in here they all got their separate State",
    "start": "2428760",
    "end": "2434319"
  },
  {
    "text": "machine we got a state machine here because we mark this as being async we got a state machine here because we mark",
    "start": "2434319",
    "end": "2439839"
  },
  {
    "text": "this as being async so why is that bad if we run this on a desktop application or in asp.net",
    "start": "2439839",
    "end": "2447160"
  },
  {
    "text": "we probably wouldn't bother changing this or fixing this because it wouldn't impact efficiency but when we run this",
    "start": "2447160",
    "end": "2454560"
  },
  {
    "text": "in samarin for instance or in a mobile device every CPU cycle counts every time you",
    "start": "2454560",
    "end": "2460560"
  },
  {
    "text": "run a line of code that's going to drain battery so we need to think about those things when running on mobile devices so",
    "start": "2460560",
    "end": "2466560"
  },
  {
    "text": "what we do here how do we change this to be a little bit better well we can first off we can start by removing the ACN",
    "start": "2466560",
    "end": "2473400"
  },
  {
    "text": "keyword but now we broke something because now we can't compile because we have the await keyword so how do we fix",
    "start": "2473400",
    "end": "2479400"
  },
  {
    "text": "this without changing our signature or changing the behavior we replace a weit",
    "start": "2479400",
    "end": "2484720"
  },
  {
    "text": "with return so all we do now is that we move our task to the caller so the",
    "start": "2484720",
    "end": "2490200"
  },
  {
    "text": "caller can now await this task by itself and then we do the same thing for all of",
    "start": "2490200",
    "end": "2496960"
  },
  {
    "text": "them except the first one all right so I'm going to return all of them which is pretty much going to be",
    "start": "2497640",
    "end": "2504440"
  },
  {
    "text": "the exactly same T exactly the same task instead of having three different or four different state machines that each",
    "start": "2504440",
    "end": "2510920"
  },
  {
    "text": "of them take care of their internal tasks and work with those um pretty",
    "start": "2510920",
    "end": "2516280"
  },
  {
    "text": "expensive operations I only have a state machine here at the top which is run async because the only time you want to",
    "start": "2516280",
    "end": "2522599"
  },
  {
    "text": "use async in a weight is when you do something in the continuation when you",
    "start": "2522599",
    "end": "2527760"
  },
  {
    "text": "do something after the awake keyword otherwise you can just return that task to the Coler if I compile this here go",
    "start": "2527760",
    "end": "2536520"
  },
  {
    "text": "back to reflector all of a sudden we only have one state",
    "start": "2536520",
    "end": "2543079"
  },
  {
    "text": "machine and all of the other ones are just calling or just returning those",
    "start": "2543079",
    "end": "2548559"
  },
  {
    "text": "tasks cuz remember each of the state machines introduces complexity and they make it harder for us to work",
    "start": "2548559",
    "end": "2556000"
  },
  {
    "text": "with so if we don't need to do anything inside our inside our continuation we don't",
    "start": "2556520",
    "end": "2563960"
  },
  {
    "text": "need to use the weight keyword but that doesn't mean that we shouldn't return the task back to the C",
    "start": "2563960",
    "end": "2570440"
  },
  {
    "text": "so we don't want to break the chain right we don't want to call something that's asynchronous and then all of a sudden that thing blocks whatever it's",
    "start": "2570440",
    "end": "2576520"
  },
  {
    "text": "calling down the line so we want to do async all the way which means that if we have an asynchronous method at the top",
    "start": "2576520",
    "end": "2582680"
  },
  {
    "text": "or at the bottom we want to return that task all the way through the the",
    "start": "2582680",
    "end": "2588200"
  },
  {
    "text": "funnel so this is what the complete example of that would look",
    "start": "2588559",
    "end": "2594280"
  },
  {
    "text": "like all right another thing that I like to talk about when talking about efficiency is how we cancel tasks",
    "start": "2594280",
    "end": "2601160"
  },
  {
    "text": "cancellation is something that I often feel it's left out of talks about async",
    "start": "2601160",
    "end": "2606599"
  },
  {
    "text": "imagine that I have this long running operation here it's combining a little a few different things it's a wild true",
    "start": "2606599",
    "end": "2613240"
  },
  {
    "text": "Loop the idea is that we want to run this on a different thread or a different uh context it's going to run",
    "start": "2613240",
    "end": "2620119"
  },
  {
    "text": "forever and the we have a dispatcher here that invokes our UI pretty much just",
    "start": "2620119",
    "end": "2625640"
  },
  {
    "text": "increments or shows us The Tick right and then we await something for 500 milliseconds in each of these",
    "start": "2625640",
    "end": "2632520"
  },
  {
    "text": "iterations how do we cancel this task here when I call this operation what I could do is that I could pass something",
    "start": "2632520",
    "end": "2640000"
  },
  {
    "text": "called a cancellation token so in this case here I I create something called a cancellation token source that lets me",
    "start": "2640000",
    "end": "2647359"
  },
  {
    "text": "indicate to a task that it should complete or that should cancel so what I'm doing here is that I",
    "start": "2647359",
    "end": "2653520"
  },
  {
    "text": "start off an as synchronous operation which wraps my long running operation async what this is doing is that since",
    "start": "2653520",
    "end": "2660480"
  },
  {
    "text": "this method here if we go back here this is marked as async which means that we have a state machine it's running a",
    "start": "2660480",
    "end": "2665599"
  },
  {
    "text": "state machine for this entire thing because we have the await keyword down here at the bottom wrapping this with a",
    "start": "2665599",
    "end": "2671440"
  },
  {
    "text": "task like I'm doing here takes that stake machine and runs it on a different task hopefully a different",
    "start": "2671440",
    "end": "2678480"
  },
  {
    "text": "thread all right and then I'm passing the cancellation token to that as we see",
    "start": "2678480",
    "end": "2684240"
  },
  {
    "text": "here at the end so I'm passing the cancellation token which lets me call cancellation token.",
    "start": "2684240",
    "end": "2691280"
  },
  {
    "text": "cancel so how many of you think that by just calling this here it's going to cancel the operation",
    "start": "2691280",
    "end": "2698800"
  },
  {
    "text": "one that's excellent because nothing's going to happen so why is nothing happening well imagine what would happen",
    "start": "2698800",
    "end": "2706119"
  },
  {
    "text": "if the framework allowed us to just cancel an",
    "start": "2706119",
    "end": "2711160"
  },
  {
    "text": "operation like that like how does it know where to cancel if it's currently invoking the UI",
    "start": "2711160",
    "end": "2718760"
  },
  {
    "text": "and we press or click do cancellation token. cancel how does it know where to",
    "start": "2718760",
    "end": "2725200"
  },
  {
    "text": "gracefully cancel this operation it wouldn't know right we have to",
    "start": "2725200",
    "end": "2730240"
  },
  {
    "text": "manually check in here if the cancellation token has a cancel requested and what we could do if we",
    "start": "2730240",
    "end": "2737119"
  },
  {
    "text": "notice is that there's a cancellation requested like I'm doing here we could for instance roll back data we could say",
    "start": "2737119",
    "end": "2745119"
  },
  {
    "text": "that well if you cancel here at the bottom let's say that we just added a record to the database and then all of a",
    "start": "2745119",
    "end": "2750440"
  },
  {
    "text": "sudden you go ahead and cancel our task we could roll back the changes in the",
    "start": "2750440",
    "end": "2755680"
  },
  {
    "text": "database all right right this brings me to something I like to call Smart",
    "start": "2755680",
    "end": "2760800"
  },
  {
    "text": "cancellations this is kind of the mobility Edition so what I've been doing lat Le I've been working on a sarine",
    "start": "2760800",
    "end": "2766440"
  },
  {
    "text": "project where we don't want to block the UI pretty much at all we want to allow the user to always enter data into the",
    "start": "2766440",
    "end": "2772960"
  },
  {
    "text": "app but we want to wait until the user is done so how do you do that well you",
    "start": "2772960",
    "end": "2778960"
  },
  {
    "text": "could for instance fire off a task so let's say that you press a button and then you fire off a task to say after",
    "start": "2778960",
    "end": "2786040"
  },
  {
    "text": "400 millisecond seconds for instance I want you to go ahead and go off and call our web server but if the user presses",
    "start": "2786040",
    "end": "2792640"
  },
  {
    "text": "another key we cancel out the running tasks right so that means that if the",
    "start": "2792640",
    "end": "2798280"
  },
  {
    "text": "user keeps pressing buttons we'll just cancel all the tasks all the time of course there's going to be a little bit",
    "start": "2798280",
    "end": "2804079"
  },
  {
    "text": "of overhead because you need to fire off a task and then cancel them and so forth all the time but it's a smarter way of",
    "start": "2804079",
    "end": "2811200"
  },
  {
    "text": "doing cancellations so let's have a look at that so first of",
    "start": "2811200",
    "end": "2818920"
  },
  {
    "text": "all I do have a little bit of an example here on Windows for",
    "start": "2818920",
    "end": "2825880"
  },
  {
    "text": "cancellations so let me run this project so I can click run here and it's",
    "start": "2825880",
    "end": "2830960"
  },
  {
    "text": "going to print out all the text it's the same example that we saw before and when I click cancel",
    "start": "2830960",
    "end": "2838240"
  },
  {
    "text": "crashes shouldn't do that let's just imagine that it it worked let's have a look at the code so",
    "start": "2838240",
    "end": "2845040"
  },
  {
    "text": "I'm doing the exact same thing here um like we saw in the example it passes",
    "start": "2845040",
    "end": "2850240"
  },
  {
    "text": "down the cancellation token it lets us throw this exception here if it's being cancelled and I can",
    "start": "2850240",
    "end": "2856200"
  },
  {
    "text": "catch that in here so it's probably",
    "start": "2856200",
    "end": "2861520"
  },
  {
    "text": "not all right so it's passing that down to that operation so when I click cancel",
    "start": "2861520",
    "end": "2868000"
  },
  {
    "text": "it's simply calling cancellation token do. cancel and then what we can do is that when we call this run async method",
    "start": "2868000",
    "end": "2876359"
  },
  {
    "text": "here when we click the Run button uh we can capture any exceptions so we can capture",
    "start": "2876359",
    "end": "2881760"
  },
  {
    "text": "these task cancel exceptions so we can then roll back data so the idea here is that you start off an operation and you",
    "start": "2881760",
    "end": "2889160"
  },
  {
    "text": "click cancel and you can capture that that cancellation just was just requested all right so let's just go",
    "start": "2889160",
    "end": "2895359"
  },
  {
    "text": "ahead and have a look at what this could look like on Android",
    "start": "2895359",
    "end": "2899599"
  },
  {
    "text": "instead so I'm going to run this off so I'll show you the code first",
    "start": "2901040",
    "end": "2907960"
  },
  {
    "text": "because the Android emulator needs to start off so the idea of smart cancellations so what I'm doing here",
    "start": "2907960",
    "end": "2917359"
  },
  {
    "text": "umong one here we go so what I'm doing when you start",
    "start": "2917880",
    "end": "2924319"
  },
  {
    "text": "pressing some data I'm starting off a task. delay so I'm wait I'm I'm allowing the user 4 seconds for every",
    "start": "2924319",
    "end": "2931040"
  },
  {
    "text": "keystroke um could be a slower user we could for instance lower that to 400",
    "start": "2931040",
    "end": "2936160"
  },
  {
    "text": "millisecond what happens is that each time I press a button I want to cancel ongoing",
    "start": "2936160",
    "end": "2942480"
  },
  {
    "text": "tasks all right so if we have a look at what happens I have a text field called some user data when the text",
    "start": "2942480",
    "end": "2949680"
  },
  {
    "text": "changes I call cancellation token source. cancel that's the same cancellation",
    "start": "2949680",
    "end": "2955920"
  },
  {
    "text": "token that I passed to my task. delay right so that means that every",
    "start": "2955920",
    "end": "2961440"
  },
  {
    "text": "time the user presses a button I can go ahead and cancel these tasks so if I set",
    "start": "2961440",
    "end": "2967040"
  },
  {
    "text": "that as a start a project let's see if this",
    "start": "2967040",
    "end": "2970680"
  },
  {
    "text": "runs all right so I write some dat some text in here you can see here that it's",
    "start": "2975200",
    "end": "2981160"
  },
  {
    "text": "been canceled and then after 4 seconds hopefully it says something else in here",
    "start": "2981160",
    "end": "2986319"
  },
  {
    "text": "all right so every time I press a key here it goes off and cancels my running tasks I'll only have one task running at",
    "start": "2986319",
    "end": "2993200"
  },
  {
    "text": "the time at one time and the way that I'm checking that if I need to start off",
    "start": "2993200",
    "end": "2998799"
  },
  {
    "text": "a new task is that I'm first checking if I have a task I have a reference to that ongoing operation I check is it null is",
    "start": "2998799",
    "end": "3005640"
  },
  {
    "text": "it cancel is it faulted is it completed if I've already done all the data if I've done the request to the back end",
    "start": "3005640",
    "end": "3011440"
  },
  {
    "text": "and the user starts pressing data again of course I'm going to restart and send off that operation",
    "start": "3011440",
    "end": "3017280"
  },
  {
    "text": "again but this is what I like to call Smart cancellations so in this way here we've",
    "start": "3017280",
    "end": "3023240"
  },
  {
    "text": "built an application that allows us to let the user work with the app without",
    "start": "3023240",
    "end": "3028559"
  },
  {
    "text": "popping up dialogue telling them that well you have to wait for the data to load or you know adding a button to",
    "start": "3028559",
    "end": "3035119"
  },
  {
    "text": "start load the data from the web or send request we can we can um in a Smart Way",
    "start": "3035119",
    "end": "3040359"
  },
  {
    "text": "find out what the user wants to do all right one final thing that I want to",
    "start": "3040359",
    "end": "3045520"
  },
  {
    "text": "talk about is asp.net asp.net as I mentioned before allows us",
    "start": "3045520",
    "end": "3050599"
  },
  {
    "text": "to use the asynchronous principles as well we can do parallel programming in asp.net we can do asynchronous",
    "start": "3050599",
    "end": "3055760"
  },
  {
    "text": "programming asp.net net doesn't it really isn't that much of a difference between asp.net and you know working",
    "start": "3055760",
    "end": "3062839"
  },
  {
    "text": "with any other type of app one thing that I want to get out of the way straight away though is that by",
    "start": "3062839",
    "end": "3070200"
  },
  {
    "text": "simply marking something as async in asp.net doesn't mean that we make the client a synchronous right doesn't mean",
    "start": "3070200",
    "end": "3078440"
  },
  {
    "text": "that it introduces a jacks by default might seem obvious but it might",
    "start": "3078440",
    "end": "3084520"
  },
  {
    "text": "not be so in this case here I have a simple web application I have a simple index action",
    "start": "3084520",
    "end": "3092200"
  },
  {
    "text": "here which is marked as being async which means that we need to return a task whenever we use the Asing keyword",
    "start": "3092200",
    "end": "3098960"
  },
  {
    "text": "we also need to return a task and once this task has completed we get an action",
    "start": "3098960",
    "end": "3104760"
  },
  {
    "text": "result so why would we be able to do this if it doesn't mean that the client becomes asynchronous it's about",
    "start": "3104760",
    "end": "3111960"
  },
  {
    "text": "relieving resources from IIs and letting the server work on more things at one",
    "start": "3111960",
    "end": "3117119"
  },
  {
    "text": "time right if I run this here we'll see here that hopefully after",
    "start": "3117119",
    "end": "3124000"
  },
  {
    "text": "a little while it's going to say okay and all the code did was that it said",
    "start": "3124000",
    "end": "3129200"
  },
  {
    "text": "run async which is a waiting and asynchronous method that I'm calling in here which is just delaying for one sec",
    "start": "3129200",
    "end": "3135559"
  },
  {
    "text": "one millisecond I could change this to 3 seconds restart the app and then of",
    "start": "3135559",
    "end": "3141520"
  },
  {
    "text": "course it would take 3 seconds before we see that okay text up here at the top",
    "start": "3141520",
    "end": "3147400"
  },
  {
    "text": "you'll also see that it's still loading the website right so doesn't make it a synchronous by",
    "start": "3147400",
    "end": "3152880"
  },
  {
    "text": "default on the client it's just a synchronous on the server now it's also super simple to deadlock in asp.net it",
    "start": "3152880",
    "end": "3161240"
  },
  {
    "text": "behaves a little bit differently than in a mobile app because what you can do is you can just click F5 in your browser",
    "start": "3161240",
    "end": "3167119"
  },
  {
    "text": "and it goes off and performs a second web request so it is a little bit different",
    "start": "3167119",
    "end": "3173480"
  },
  {
    "text": "but the IDE is the same so what we do here if I change this back one again just to prove that it's quicker what I",
    "start": "3173480",
    "end": "3179520"
  },
  {
    "text": "have here is I have a method called deadlock deadlock calls run async and then simply calls weight and doing that",
    "start": "3179520",
    "end": "3187240"
  },
  {
    "text": "is a big no no because that means that the thread that is currently processing our web request will wait until the",
    "start": "3187240",
    "end": "3195119"
  },
  {
    "text": "state machine is done but the state machine is running on that thread right so it cannot can never be done so if we",
    "start": "3195119",
    "end": "3201359"
  },
  {
    "text": "call slash deadlock oops slome Deadlock",
    "start": "3201359",
    "end": "3208440"
  },
  {
    "text": "it's it's just going to sit here and load forever because it now deadlocked but if",
    "start": "3210559",
    "end": "3216440"
  },
  {
    "text": "we go back here I can still refresh this page because it's two different threads",
    "start": "3216440",
    "end": "3222520"
  },
  {
    "text": "handling that process so after a while I will probably terminate this process but",
    "start": "3222520",
    "end": "3229240"
  },
  {
    "text": "you never know I do like to show you how you can block if you really want to but",
    "start": "3229240",
    "end": "3235559"
  },
  {
    "text": "you should never do this at home home so what you can do is that I kind of hinted this before but what you can do is that",
    "start": "3235559",
    "end": "3241040"
  },
  {
    "text": "you can take the state machine and run that somewhere else and block the UI",
    "start": "3241040",
    "end": "3248119"
  },
  {
    "text": "thread and the way that you do that is by introducing a task.run like this",
    "start": "3248119",
    "end": "3255680"
  },
  {
    "text": "here and then simply call weight on that task itself so if I run this here it",
    "start": "3255680",
    "end": "3261400"
  },
  {
    "text": "shouldn't deadlock but what happens is that we take the Run async State machine we run that somewhere else and when",
    "start": "3261400",
    "end": "3268119"
  },
  {
    "text": "that's completed it's going to notify this task here that it's completed and",
    "start": "3268119",
    "end": "3274280"
  },
  {
    "text": "we are blocking the UI thread until this task is done and that task can get a notification because it's not being",
    "start": "3274280",
    "end": "3280960"
  },
  {
    "text": "blocked make sense yes so your question is is it better to",
    "start": "3280960",
    "end": "3288319"
  },
  {
    "text": "use configur a we FS yes always in asp.net so what happens that's a very good question so what happens is that in",
    "start": "3288319",
    "end": "3295400"
  },
  {
    "text": "asp.net I don't know if they've changed this in core but I don't think they have um when you use async and AA in asp.net",
    "start": "3295400",
    "end": "3301359"
  },
  {
    "text": "what they do is that they try to get back to the color thread but in asp.net we don't really care about the main",
    "start": "3301359",
    "end": "3307359"
  },
  {
    "text": "thread or the UI thread so what we can do is that we can use something called configure await false which says that",
    "start": "3307359",
    "end": "3313000"
  },
  {
    "text": "whenever you return into the continuation we don't care which thread you use on the thread pool which means",
    "start": "3313000",
    "end": "3318880"
  },
  {
    "text": "that the applications are going to be faster because it can just pick any thread available in the",
    "start": "3318880",
    "end": "3324839"
  },
  {
    "text": "pool all right",
    "start": "3324839",
    "end": "3328319"
  },
  {
    "text": "so unless you want to be the firefighter I do recommend that you do async all the way down so make sure that whenever you",
    "start": "3333880",
    "end": "3341119"
  },
  {
    "text": "use async in a way have async and a weight all the way down return tasks from all your methods which will make it",
    "start": "3341119",
    "end": "3347400"
  },
  {
    "text": "a lot easier for you to work with it is problematic debugging asynchronous programming because it jumps around to",
    "start": "3347400",
    "end": "3354160"
  },
  {
    "text": "different threads and jumps around into different context but once you have an understanding of what happens in the state machine you",
    "start": "3354160",
    "end": "3360480"
  },
  {
    "text": "shouldn't have to feel like the firefighter anymore and if you want to learn more I have a course on plural",
    "start": "3360480",
    "end": "3365920"
  },
  {
    "text": "site which you can check out which goes into this a little bit more in detail and it's a little bit slower so",
    "start": "3365920",
    "end": "3371680"
  },
  {
    "text": "hopefully you wouldn't get a headache all right let's wrap this up so what we've talked about is that we can",
    "start": "3371680",
    "end": "3378119"
  },
  {
    "text": "introduce asynchronous programming in our apps be it console applications or WPF applications or wind fors",
    "start": "3378119",
    "end": "3384839"
  },
  {
    "text": "applications or web applications we can use the same principles as long as we",
    "start": "3384839",
    "end": "3390520"
  },
  {
    "text": "understand what the state machine is all about what happens when we introduce the asyn in away keywords that's all that we",
    "start": "3390520",
    "end": "3397000"
  },
  {
    "text": "need to do to make better and more efficient applications and if we have a better understanding of how to apply",
    "start": "3397000",
    "end": "3403799"
  },
  {
    "text": "these principles and how to work with these in different contexts our apps are going to be a lot better all right thank",
    "start": "3403799",
    "end": "3411119"
  },
  {
    "text": "you so much for listening to me please do remember to ping me on Twitter if you want a copy of my book and don't forget",
    "start": "3411119",
    "end": "3416880"
  },
  {
    "text": "to vote on your way out thank you",
    "start": "3416880",
    "end": "3421838"
  }
]