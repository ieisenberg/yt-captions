[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "I'm Shawn parent for anybody who wasn't at my previous talk I'm a principal",
    "start": "8420",
    "end": "14070"
  },
  {
    "text": "scientist at Adobe I've had a number of roles they're good at Adobe now about 22",
    "start": "14070",
    "end": "21179"
  },
  {
    "text": "years depending on how you count because I was there 15 years and then I went to Google for about a year and then back to",
    "start": "21179",
    "end": "27839"
  },
  {
    "text": "Adobe I started my career at Adobe on the Photoshop team and later I ran",
    "start": "27839",
    "end": "35570"
  },
  {
    "text": "Adobe's software technology lab that was a research group that spun out of our desk Knology group I ran that group for",
    "start": "35570",
    "end": "43350"
  },
  {
    "text": "about eight years and now I'm actually back working with Photoshop team again so I've had a number of roles",
    "start": "43350",
    "end": "53600"
  },
  {
    "text": "my clicker here so I mentioned this before a few years back I gave a talk at",
    "start": "59329",
    "end": "66860"
  },
  {
    "start": "60000",
    "end": "161000"
  },
  {
    "text": "going native conference called C++ seasoning and and it was well-received",
    "start": "66860",
    "end": "72200"
  },
  {
    "text": "and I got a lot of requests to write a book and so since then whenever I get asked to give a talk I try to flesh out",
    "start": "72200",
    "end": "78799"
  },
  {
    "text": "a chapter of the book so this is kind of my working outlines you see for each",
    "start": "78799",
    "end": "85000"
  },
  {
    "text": "chapter here I've got a goal most of the",
    "start": "85000",
    "end": "90020"
  },
  {
    "text": "goals I need to redo the first one now that one's also stated in the negative are stated as a negative as far as their",
    "start": "90020",
    "end": "96140"
  },
  {
    "text": "what not to do and there's a reason",
    "start": "96140",
    "end": "103130"
  },
  {
    "text": "there the the word goal was chosen very carefully because what I talked about is is not prescriptive things they're not",
    "start": "103130",
    "end": "110119"
  },
  {
    "text": "rules they're things to strive for but they can be difficult especially when you're dealing with a large system to",
    "start": "110119",
    "end": "116330"
  },
  {
    "text": "achieve these goals so they're not rules are not guidelines they're not things",
    "start": "116330",
    "end": "122420"
  },
  {
    "text": "that should be held up in a code review or people that John said don't do that what Sean said is think about that",
    "start": "122420",
    "end": "127910"
  },
  {
    "text": "really hard and and the reason the other",
    "start": "127910",
    "end": "134959"
  },
  {
    "text": "reason why they're stated as a negative is because I can't give you all the",
    "start": "134959",
    "end": "140540"
  },
  {
    "text": "answers as to as to what the alternatives are so these are things things to try to avoid and I'll talk",
    "start": "140540",
    "end": "148190"
  },
  {
    "text": "some about better in different ways but sometimes it just requires more thought",
    "start": "148190",
    "end": "153200"
  },
  {
    "text": "so these are all tend to be open-ended problems so today we're talking about",
    "start": "153200",
    "end": "159050"
  },
  {
    "text": "concurrency alright some common themes in all my",
    "start": "159050",
    "end": "166299"
  },
  {
    "text": "talks are our that they're all about managing relationships and what I mean about that is relationships between",
    "start": "166299",
    "end": "172209"
  },
  {
    "text": "components and software understanding the fundamentals which i think is incredibly important learning how to",
    "start": "172209",
    "end": "178989"
  },
  {
    "text": "write simple code and learning how to how to reason about code through local",
    "start": "178989",
    "end": "185349"
  },
  {
    "text": "and equational reasoning right so local reasoning means that just looking at a piece of code you can reason about it",
    "start": "185349",
    "end": "192310"
  },
  {
    "text": "without having to understand the whole system and equational reasoning means that you can you can describe what",
    "start": "192310",
    "end": "199959"
  },
  {
    "text": "something is in terms of something else a is equal to B right a plus B is equal",
    "start": "199959",
    "end": "205510"
  },
  {
    "text": "to C all right so you're able to go through those transformations",
    "start": "205510",
    "end": "210780"
  },
  {
    "start": "210000",
    "end": "355000"
  },
  {
    "text": "now this talk started because I was working on what became this product",
    "start": "211440",
    "end": "218620"
  },
  {
    "text": "right here this is Lightroom for web and and this is the complete Lightroom",
    "start": "218620",
    "end": "224950"
  },
  {
    "text": "rendering engine running inside of the Safari browser with no plugins okay so",
    "start": "224950",
    "end": "234280"
  },
  {
    "text": "for people who don't know Lightroom is a product that adobe ships that professional photography rendering",
    "start": "234280",
    "end": "240099"
  },
  {
    "text": "engine and it's a parametric model so it's a non-destructive model you you",
    "start": "240099",
    "end": "245260"
  },
  {
    "text": "edit your image and you can come back later and change your edit and readjust",
    "start": "245260",
    "end": "251169"
  },
  {
    "text": "it so to make this work over the web means that we had to have full parity",
    "start": "251169",
    "end": "258459"
  },
  {
    "text": "with the desktop rendering engine okay and this is a piece of code now that's a",
    "start": "258459",
    "end": "264479"
  },
  {
    "text": "decade old and heavily tuned on the desktop to give you some idea this is a",
    "start": "264479",
    "end": "272409"
  },
  {
    "text": "woman in the London subway and as the train was pulling up I I glanced",
    "start": "272409",
    "end": "277780"
  },
  {
    "text": "backwards and snap the photo and so that's the the unedited photo and that's",
    "start": "277780",
    "end": "284289"
  },
  {
    "text": "what it looks like edited so this was a",
    "start": "284289",
    "end": "290409"
  },
  {
    "text": "big problem taking a 10 year old codebase that's heavily threaded getting it to compile with the M",
    "start": "290409",
    "end": "296600"
  },
  {
    "text": "scriptum compiler which is a compiler that Mozilla puts out to compile C++",
    "start": "296600",
    "end": "302930"
  },
  {
    "text": "code into JavaScript removing all of the need for threading in it because in",
    "start": "302930",
    "end": "311030"
  },
  {
    "text": "JavaScript you have no threads you have web workers which is the equivalent of having separate processes but you don't",
    "start": "311030",
    "end": "318080"
  },
  {
    "text": "have threads and getting the code to run well and to behave in an interactive",
    "start": "318080",
    "end": "323180"
  },
  {
    "text": "fashion so that was the challenge so this got me thinking really really hard",
    "start": "323180",
    "end": "329000"
  },
  {
    "text": "about concurrency and the reason why I got me thinking is because going forward this code base needs to be shared so I",
    "start": "329000",
    "end": "335780"
  },
  {
    "text": "needed to leave the system in a state where we had a code base that developers could work on that would continue to run",
    "start": "335780",
    "end": "341870"
  },
  {
    "text": "in run performant in a heavily multi-threaded environment and the same code would run very well when you had no",
    "start": "341870",
    "end": "348140"
  },
  {
    "text": "threads right so I had to think about what is the actual programming model for how you write threaded code okay so",
    "start": "348140",
    "end": "358930"
  },
  {
    "start": "355000",
    "end": "434000"
  },
  {
    "text": "first some definitions here right concurrency is when tasks start run and",
    "start": "358930",
    "end": "364430"
  },
  {
    "text": "complete in overlapping time periods where parallelism is when two or more tasks execute simultaneously right so on",
    "start": "364430",
    "end": "371960"
  },
  {
    "text": "a single threaded system you can have concurrency and you can have threads and it just means things are time sliced",
    "start": "371960",
    "end": "377530"
  },
  {
    "text": "okay but parallelism is when you have multiple cores right or something like a",
    "start": "377530",
    "end": "382700"
  },
  {
    "text": "sim decore where you can do multiple things at the same time now the reason",
    "start": "382700",
    "end": "387830"
  },
  {
    "text": "why we want concurrency is because concurrency is our first building block to enable parallelism right right if I",
    "start": "387830",
    "end": "395360"
  },
  {
    "text": "can't run run with multiple threads on a single core then I certainly can't run",
    "start": "395360",
    "end": "402020"
  },
  {
    "text": "with multiple threads with multi-core the other reason why we want concurrency is because it improves interactivity",
    "start": "402020",
    "end": "408680"
  },
  {
    "text": "right in the previous thing there right when I'm sliding my my slider I'm",
    "start": "408680",
    "end": "413900"
  },
  {
    "text": "receiving user events coming in and I'm updating frames and if every time I",
    "start": "413900",
    "end": "419900"
  },
  {
    "text": "update a frame if that slider stops that the users sliding that makes for a",
    "start": "419900",
    "end": "426230"
  },
  {
    "text": "pretty at the user experience right so we want to be able to slice things up so that we",
    "start": "426230",
    "end": "431810"
  },
  {
    "text": "give give good interactivity down goal",
    "start": "431810",
    "end": "437000"
  },
  {
    "start": "434000",
    "end": "461000"
  },
  {
    "text": "for this talk is no raw synchronization primitives so what are Ross synchronization primitives well there's",
    "start": "437000",
    "end": "443569"
  },
  {
    "text": "these things they're mutexes there are tommix a lot of people don't don't like",
    "start": "443569",
    "end": "449030"
  },
  {
    "text": "me putting Atomics on this this list but they're certainly Atomics and i'll explain more about that later but things",
    "start": "449030",
    "end": "455629"
  },
  {
    "text": "like semaphores memory fences and conditional condition variables okay the number one reason why",
    "start": "455629",
    "end": "464659"
  },
  {
    "start": "461000",
    "end": "652000"
  },
  {
    "text": "you don't want to use these things is you'll likely get them wrong how do I know that because I've been doing this a",
    "start": "464659",
    "end": "470840"
  },
  {
    "text": "very long time and I still get them wrong okay so here is a class that I",
    "start": "470840",
    "end": "479960"
  },
  {
    "text": "wrote once upon a time its renamed it's the copy-on-write class and it's",
    "start": "479960",
    "end": "486590"
  },
  {
    "text": "abbreviated here it's renamed as bad cow and the reason why I renamed it is because giving this",
    "start": "486590",
    "end": "492319"
  },
  {
    "text": "as a as an example of a bug then somebody immediately when it was just named copy-on-write",
    "start": "492319",
    "end": "498020"
  },
  {
    "text": "somebody immediately copy and pasted the code from my slides and put it into a working system so not actually looking",
    "start": "498020",
    "end": "505460"
  },
  {
    "text": "at the rest of my presentation where I showed the bug so who can find the bug in this code right I'll even help you",
    "start": "505460",
    "end": "514300"
  },
  {
    "text": "the bug is between those two lines",
    "start": "515280",
    "end": "518659"
  },
  {
    "text": "does anybody see what's wrong here time",
    "start": "524070",
    "end": "530339"
  },
  {
    "text": "of check and time of use problem absolutely okay so and I'm using an atomic here",
    "start": "530339",
    "end": "535500"
  },
  {
    "text": "right so what happens is I check to see is my count equal to 1 what a count of",
    "start": "535500",
    "end": "542100"
  },
  {
    "text": "one would mean is that this object is the sole owner of some shared data okay",
    "start": "542100",
    "end": "547440"
  },
  {
    "text": "if this object is the sole owner of some shared data then I know that it's safe",
    "start": "547440",
    "end": "552690"
  },
  {
    "text": "to assign directly into it right okay if it's not one right then I need to make a",
    "start": "552690",
    "end": "560880"
  },
  {
    "text": "copy here this is my copy on write okay when I make the copy then I need to to",
    "start": "560880",
    "end": "571220"
  },
  {
    "text": "decrement the count of over this one here okay so so what's",
    "start": "571220",
    "end": "582550"
  },
  {
    "text": "the problem the problem is if I wasn't the sole owner on the first check then",
    "start": "582550",
    "end": "590529"
  },
  {
    "text": "by the time the second check comes around I might be the sole owner and if",
    "start": "590529",
    "end": "595899"
  },
  {
    "text": "now at the second at that decrement if I am the sole owner it's my responsibility",
    "start": "595899",
    "end": "601000"
  },
  {
    "text": "to free the shared state okay and I'm",
    "start": "601000",
    "end": "606490"
  },
  {
    "text": "not doing that here right so the six is",
    "start": "606490",
    "end": "612040"
  },
  {
    "text": "when I do the decrement I have to say okay when I do this decrement was I the",
    "start": "612040",
    "end": "617410"
  },
  {
    "text": "sole owner and now my count went to zero and if so delete the object right so",
    "start": "617410",
    "end": "623560"
  },
  {
    "text": "this piece of code shipped in a running system and probably ran for something like five years okay and it wasn't that",
    "start": "623560",
    "end": "630399"
  },
  {
    "text": "bad right you have a very short window there where you do that new where somebody",
    "start": "630399",
    "end": "636070"
  },
  {
    "text": "else can release ownership and if they do then you'll leak one block okay okay",
    "start": "636070",
    "end": "643870"
  },
  {
    "text": "but it was very vexing because occasionally we would see these blocks leak and couldn't figure out why or",
    "start": "643870",
    "end": "649000"
  },
  {
    "text": "where they were coming from okay even with these slides I've given",
    "start": "649000",
    "end": "659360"
  },
  {
    "start": "652000",
    "end": "804000"
  },
  {
    "text": "this talk now a couple times I've received five email messages where people tell me my fix is is wrong okay",
    "start": "659360",
    "end": "669610"
  },
  {
    "text": "it is correct I'm quite convinced I can write the proof fix is correct the five",
    "start": "669639",
    "end": "675199"
  },
  {
    "text": "people who wrote to me all what they believe is a bug all boils down to to",
    "start": "675199",
    "end": "682309"
  },
  {
    "text": "one of two things in those five emails one is they assume that my bad count",
    "start": "682309",
    "end": "687470"
  },
  {
    "text": "implementation is an atomic type it is not an atomic type right right if it",
    "start": "687470",
    "end": "693019"
  },
  {
    "text": "were an atomic type then when I was sole ownership somebody else could come along and and claim ownership of it okay so",
    "start": "693019",
    "end": "701509"
  },
  {
    "text": "the account could go up it's not an atomic type in that a copy-on-write",
    "start": "701509",
    "end": "706819"
  },
  {
    "text": "integer is just as thread-safe as an integer right it just means that I can have separate threads each with their",
    "start": "706819",
    "end": "712429"
  },
  {
    "text": "own instances with shared data okay but I can't share a single instance of the",
    "start": "712429",
    "end": "717799"
  },
  {
    "text": "cow right the cow refers to share data the other thing is people don't",
    "start": "717799",
    "end": "723259"
  },
  {
    "text": "understand what - minus X does on an atomic and that's that it's an equivalent of effect such subtract okay",
    "start": "723259",
    "end": "730970"
  },
  {
    "text": "of an atomic such a subtract which means the subtraction and the fetch of the value happen is a single atomic",
    "start": "730970",
    "end": "736249"
  },
  {
    "text": "operation and sometimes people think that because I'm doing the - - and then my compare okay that that between the",
    "start": "736249",
    "end": "745189"
  },
  {
    "text": "subtraction and the compare something could go wrong",
    "start": "745189",
    "end": "750850"
  },
  {
    "text": "nobody caught I fixed it in the previous slide that my count was uninitialized",
    "start": "753560",
    "end": "758890"
  },
  {
    "text": "okay neither did I so neither did the compiler which Frost's me so originally",
    "start": "758890",
    "end": "767300"
  },
  {
    "text": "when I wrote the code and it was in a working system I didn't have this problem and it's because I wasn't using SPD Atomics because the code long",
    "start": "767300",
    "end": "773450"
  },
  {
    "text": "predates STD Comics I was using a Atomics with different behavior but an",
    "start": "773450",
    "end": "778580"
  },
  {
    "text": "STD atomic of an int if you just default construct it right without giving it any",
    "start": "778580",
    "end": "784970"
  },
  {
    "text": "value is an uninitialized variable just like an INT is okay so I actually",
    "start": "784970",
    "end": "791930"
  },
  {
    "text": "introduced a bug and nobody caught that okay so so a Tom even a Tom X can be",
    "start": "791930",
    "end": "801560"
  },
  {
    "text": "very difficult to reason about why do we",
    "start": "801560",
    "end": "807140"
  },
  {
    "start": "804000",
    "end": "942000"
  },
  {
    "text": "want performance through parallelism right this is a slide that one of my",
    "start": "807140",
    "end": "814010"
  },
  {
    "text": "colleagues Russell Williams on the Photoshop team put together awhile ago but it's very true today so this is your",
    "start": "814010",
    "end": "822020"
  },
  {
    "text": "typical desktop computer right and this is looking at where the nips are where",
    "start": "822020",
    "end": "827300"
  },
  {
    "text": "the gigaflops in a desktop computer okay that's the bar that's the GPU right",
    "start": "827300",
    "end": "835870"
  },
  {
    "text": "right so so this is looking at an AMD Radeon which is a little outdated that",
    "start": "835870",
    "end": "842660"
  },
  {
    "text": "bar these days is getting bigger if you're running on mobile it's a little bit smaller okay to get into that you",
    "start": "842660",
    "end": "849260"
  },
  {
    "text": "need to get into OpenGL OpenCL cuda direct compute c++ am DirectX metal pick",
    "start": "849260",
    "end": "858140"
  },
  {
    "text": "your thing all of those things tend to be C or C++ derived programming environments with constraints tailored",
    "start": "858140",
    "end": "865070"
  },
  {
    "text": "towards parallelism okay that's how much of your performance is in the",
    "start": "865070",
    "end": "872000"
  },
  {
    "text": "vectorization unit on the machine okay so to get to that you're going to have",
    "start": "872000",
    "end": "877580"
  },
  {
    "text": "to be writing with Auto vectorization or like the Intel compiler we'll just some degree of that but you have to know how",
    "start": "877580",
    "end": "883640"
  },
  {
    "text": "to structure your code to utilize it OpenCL can target it or your writing",
    "start": "883640",
    "end": "890899"
  },
  {
    "text": "with intrinsics which is where most people end up if you want to unlock",
    "start": "890899",
    "end": "897970"
  },
  {
    "text": "multi-core as of C++ 11 we actually at least have a threading model there that's how much of your processor is",
    "start": "897970",
    "end": "905209"
  },
  {
    "text": "tied up with multi-core and if you're talking about just one core the scalar",
    "start": "905209",
    "end": "910669"
  },
  {
    "text": "unit that's the slice right there that's what most people think of a straight C++",
    "start": "910669",
    "end": "916009"
  },
  {
    "text": "and if you're writing in JavaScript or Java or something like else something else divide that by a factor of 2 to 5",
    "start": "916009",
    "end": "923199"
  },
  {
    "text": "these days okay so that red line at the",
    "start": "923199",
    "end": "929269"
  },
  {
    "text": "end there is point 0 to 5 percent of the",
    "start": "929269",
    "end": "937129"
  },
  {
    "text": "performance of your machine okay now this is am dolls law Kevin",
    "start": "937129",
    "end": "947040"
  },
  {
    "start": "942000",
    "end": "1083000"
  },
  {
    "text": "mentioned this in his last talks you were in here what AM does law says is is",
    "start": "947040",
    "end": "954660"
  },
  {
    "text": "basically if some amount of your machine is serialized okay then you cannot",
    "start": "954660",
    "end": "961149"
  },
  {
    "text": "accede to that in overall performance by adding parallelism okay so in this graph here you can see if the",
    "start": "961149",
    "end": "972930"
  },
  {
    "text": "the Purple Line is at ninety percent so if just 10% of our app is serialized we",
    "start": "972930",
    "end": "980529"
  },
  {
    "text": "can never perform better than 1010 X",
    "start": "980529",
    "end": "985779"
  },
  {
    "text": "increase in performance because now that will be the bottleneck is that that cereal is serialized piece okay but the",
    "start": "985779",
    "end": "992980"
  },
  {
    "text": "interesting thing about this graph is that you don't hit something approximating that 10x speed up until",
    "start": "992980",
    "end": "999009"
  },
  {
    "text": "you get out to a thousand cores okay the bottom scale on this thing is",
    "start": "999009",
    "end": "1004980"
  },
  {
    "text": "logarithmic where the top scale is linear and I hate the graph for that",
    "start": "1004980",
    "end": "1011699"
  },
  {
    "text": "reason I think this is a very misleading graph okay so but this is what you'll find on",
    "start": "1011699",
    "end": "1016980"
  },
  {
    "text": "Wikipedia or in most textbooks is people draw the graph this way because otherwise you can't really see the shape",
    "start": "1016980",
    "end": "1022230"
  },
  {
    "text": "of the curve okay but the more telling graph is to just look on linear scale",
    "start": "1022230",
    "end": "1028319"
  },
  {
    "text": "down at the access so each line here represents just 10% of serialisation so",
    "start": "1028319",
    "end": "1034980"
  },
  {
    "text": "if I just have 10% of my application that's serialized and I'm on 16 cores",
    "start": "1034980",
    "end": "1040890"
  },
  {
    "text": "I'm only getting a little better than a 6x speed-up okay so Amdahl's law sucks",
    "start": "1040890",
    "end": "1048950"
  },
  {
    "text": "right right it bites us okay and",
    "start": "1048950",
    "end": "1054080"
  },
  {
    "text": "serialization doesn't mean locking on mutex utilization can just mean sharing the same memory right or sharing the",
    "start": "1054080",
    "end": "1061620"
  },
  {
    "text": "same address bus for them for the memory if I don't have a Numa architecture okay",
    "start": "1061620",
    "end": "1067049"
  },
  {
    "text": "or sharing the same cache line right anything that's shared within the",
    "start": "1067049",
    "end": "1072539"
  },
  {
    "text": "processor starts to bend that curve down and it bends down rapidly any synchronization",
    "start": "1072539",
    "end": "1078740"
  },
  {
    "text": "anatomic bends that curve down okay",
    "start": "1078740",
    "end": "1083870"
  },
  {
    "start": "1083000",
    "end": "1241000"
  },
  {
    "text": "and most people think about threading at least most people you know coming from",
    "start": "1084110",
    "end": "1089639"
  },
  {
    "text": "kind of a C or C++ background in this horrible way they say I've got this",
    "start": "1089639",
    "end": "1095279"
  },
  {
    "text": "object that I'm sharing and I got a bunch of threads that are banging on it and so I'm going to stick a mutex on",
    "start": "1095279",
    "end": "1100830"
  },
  {
    "text": "there and we're going to keep rotating that around okay that is a horrible",
    "start": "1100830",
    "end": "1106169"
  },
  {
    "text": "horrible way to think about threading don't do that we don't want to stop okay",
    "start": "1106169",
    "end": "1115500"
  },
  {
    "text": "no stops minimize locks now a lot of",
    "start": "1115500",
    "end": "1122100"
  },
  {
    "text": "people that I find when I talk about mutex and I asked them what is a mutex right can't give me a good answer say",
    "start": "1122100",
    "end": "1132330"
  },
  {
    "text": "give me an equivalency to a mutex right right give me a mental model for a mutex",
    "start": "1132330",
    "end": "1139559"
  },
  {
    "text": "I added this section to the top because somebody who I work with came to me and",
    "start": "1139559",
    "end": "1146519"
  },
  {
    "text": "said I'm trying to optimize this piece of code where I've got this mutex and I've got",
    "start": "1146519",
    "end": "1152190"
  },
  {
    "text": "this lock over this big block of code and I've tried to minimize the amount of work I'm doing under the lock to the",
    "start": "1152190",
    "end": "1158399"
  },
  {
    "text": "absolute minimum and it's still huge so now I'm trying to optimize the locks and I'm playing with like adaptive spin",
    "start": "1158399",
    "end": "1164460"
  },
  {
    "text": "locks and stuff and I'm like ah you're thinking about it all wrong okay so let's take a look at a traditional",
    "start": "1164460",
    "end": "1169799"
  },
  {
    "text": "little piece of code here right I've got some registry class that I'm going to",
    "start": "1169799",
    "end": "1174870"
  },
  {
    "text": "write and it's going to be shared so I want the operations to behave in an atomic fashion so I'm going to have a",
    "start": "1174870",
    "end": "1182250"
  },
  {
    "text": "set and a get right where I can set a key and a value and it's just going to",
    "start": "1182250",
    "end": "1187799"
  },
  {
    "text": "store it into a map and because I'm sharing my map I've got that under my",
    "start": "1187799",
    "end": "1193889"
  },
  {
    "text": "mutex and I'm going to get it okay and so I'm going to lock lock my mute my",
    "start": "1193889",
    "end": "1199980"
  },
  {
    "text": "mutex and just pull it out at the same time okay so I've got this",
    "start": "1199980",
    "end": "1206650"
  },
  {
    "text": "this little piece of code right now even",
    "start": "1206650",
    "end": "1211990"
  },
  {
    "text": "here although it looks like I'm doing just a little bit of work under the mutex right and I'm using an unordered",
    "start": "1211990",
    "end": "1218800"
  },
  {
    "text": "map which is a fairly efficient data structure an unordered map is a hash map the amount of time it takes me to hash",
    "start": "1218800",
    "end": "1224890"
  },
  {
    "text": "my key depends on the length of the string so the amount of work that's",
    "start": "1224890",
    "end": "1230830"
  },
  {
    "text": "being done under the locks here is actually fairly unbounded right it depends completely on the lengths of",
    "start": "1230830",
    "end": "1236320"
  },
  {
    "text": "length of my string so it's probably typically small but it could be big okay",
    "start": "1236320",
    "end": "1242850"
  },
  {
    "text": "there's this line of the C++ standard and you'd find it in a bunch of text books but I pulled it from there because",
    "start": "1242850",
    "end": "1248890"
  },
  {
    "text": "I think you know it's a good way to think about it it can be showing the programs that correctly use mutexes and",
    "start": "1248890",
    "end": "1255580"
  },
  {
    "text": "memory ordered sequential sorry I'm drawing a blank it's a memory",
    "start": "1255580",
    "end": "1263900"
  },
  {
    "text": "very a sequentially consistent memory barrier and a memory order sequentially consistent memory barrier operations to",
    "start": "1263900",
    "end": "1270860"
  },
  {
    "text": "prevent all data races and use no other synchronization operations behave as if",
    "start": "1270860",
    "end": "1275990"
  },
  {
    "text": "the operations executed by their constituent threads were simply interleaved with each value computation",
    "start": "1275990",
    "end": "1281540"
  },
  {
    "text": "of an object being taken from the last side-effect of that object in that interleaving this is normally referred",
    "start": "1281540",
    "end": "1287300"
  },
  {
    "text": "to as sequential consistency so why is this an important sentence well it means",
    "start": "1287300",
    "end": "1294830"
  },
  {
    "text": "that we can always think about mutexes as if we had some set of operations and",
    "start": "1294830",
    "end": "1299900"
  },
  {
    "text": "those operations are interleaved right that we have op and I messed up the",
    "start": "1299900",
    "end": "1304910"
  },
  {
    "text": "numbers here so I can have operation 3 repeated multiple times right right and and what an operation is is that's the",
    "start": "1304910",
    "end": "1312560"
  },
  {
    "text": "code that's executing onto the lock and its operating on some value what's that",
    "start": "1312560",
    "end": "1318380"
  },
  {
    "text": "value it's the set of all objects that are modified by that operation ok so by",
    "start": "1318380",
    "end": "1325100"
  },
  {
    "text": "all operations okay so so X is everything that gets modified within my",
    "start": "1325100",
    "end": "1332030"
  },
  {
    "text": "lock ok by all the pieces of code that acquire that lock on the mutex ok and",
    "start": "1332030",
    "end": "1339340"
  },
  {
    "text": "each of those can yield out some values some result right those operations can",
    "start": "1339340",
    "end": "1345650"
  },
  {
    "text": "say it's a read-modify-write operation they can read modify write the data under that yielding out some results",
    "start": "1345650",
    "end": "1352970"
  },
  {
    "text": "from the read okay so the same is true of all atomic",
    "start": "1352970",
    "end": "1360160"
  },
  {
    "text": "operations right so there's really not a lot of difference between an STD atomic in fact there is a call on STD atomic",
    "start": "1360160",
    "end": "1367390"
  },
  {
    "text": "that says is this lock free so what that means is is their processor support to",
    "start": "1367390",
    "end": "1373240"
  },
  {
    "text": "do that as an atomic item within the processor or is there not processor support and the compiler has to generate",
    "start": "1373240",
    "end": "1379810"
  },
  {
    "text": "a mutex pair to to lock make the change on the atomic operation and do the the",
    "start": "1379810",
    "end": "1386440"
  },
  {
    "text": "unlock right so all that mutexes and locks are our way to construct atomic operations right so if you look you know",
    "start": "1386440",
    "end": "1395110"
  },
  {
    "text": "fetch subtract follows from my previous",
    "start": "1395110",
    "end": "1401500"
  },
  {
    "text": "example for the bad cow you're doing a section subtract that's a read modify",
    "start": "1401500",
    "end": "1407560"
  },
  {
    "text": "write operation on X to the atomic so",
    "start": "1407560",
    "end": "1414300"
  },
  {
    "text": "what we have here then is that we can take any piece of code that has mutexes",
    "start": "1414300",
    "end": "1421600"
  },
  {
    "text": "and we can transform it into a queued",
    "start": "1421600",
    "end": "1427080"
  },
  {
    "text": "model okay so if we assume that I've got a serial q and my serial q has just one",
    "start": "1427080",
    "end": "1434890"
  },
  {
    "text": "operation on it which is go a sync execute this thing and it's the same same calling conventions as STD async",
    "start": "1434890",
    "end": "1442450"
  },
  {
    "text": "here except it guarantees that that the next item being processed in that queue",
    "start": "1442450",
    "end": "1449320"
  },
  {
    "text": "doesn't start until the previous one completed okay then I can rewrite my set",
    "start": "1449320",
    "end": "1456850"
  },
  {
    "text": "string to go do QA sync okay and I can",
    "start": "1456850",
    "end": "1462910"
  },
  {
    "text": "rewrite my get string but I've got a little bit of a problem there in that I",
    "start": "1462910",
    "end": "1468310"
  },
  {
    "text": "need the result back out and I need it paired with that particular gift okay so",
    "start": "1468310",
    "end": "1473680"
  },
  {
    "text": "I'm going to use a future there and we'll talk more about futures okay and I've got the Q async here",
    "start": "1473680",
    "end": "1480720"
  },
  {
    "text": "why is this important to understand because any place I have a mutex in my code I can always make this",
    "start": "1480720",
    "end": "1487300"
  },
  {
    "text": "transformation I can always trance form it into a serialize queue model and that means that within the serialized",
    "start": "1487300",
    "end": "1496179"
  },
  {
    "text": "queue model now anytime somebody comes along and says set here regardless of",
    "start": "1496179",
    "end": "1501760"
  },
  {
    "text": "the amount of work that set takes the time it takes for set to return back to",
    "start": "1501760",
    "end": "1508750"
  },
  {
    "text": "the caller is constant okay so that means that I can add something",
    "start": "1508750",
    "end": "1515139"
  },
  {
    "text": "like set an arbitrary set of value the whole vector of key value pairs okay and",
    "start": "1515139",
    "end": "1523720"
  },
  {
    "text": "to the caller that set will take just as much time as the previous set it's an on",
    "start": "1523720",
    "end": "1530649"
  },
  {
    "text": "block okay so so this puts an upper bound now there's overhead in this right",
    "start": "1530649",
    "end": "1537010"
  },
  {
    "text": "I've got to queue an item I've got to DQ the item I've got to deal with futures",
    "start": "1537010",
    "end": "1542049"
  },
  {
    "text": "if I've got results coming in if I'm calling this set as opposed to calling",
    "start": "1542049",
    "end": "1547269"
  },
  {
    "text": "just set string set sync set string maybe I have to construct my vector pairs I can't just pass iterators in there",
    "start": "1547269",
    "end": "1553330"
  },
  {
    "text": "because my whatever I'm passing iterators in to might go away okay so",
    "start": "1553330",
    "end": "1559659"
  },
  {
    "text": "there's overhead in this but it gives me an upper bound so if I'm looking at a",
    "start": "1559659",
    "end": "1567820"
  },
  {
    "text": "piece of code or I'm like I've got this big hoo Creek and piece of code with a bunch of mutexes around it I'm like",
    "start": "1567820",
    "end": "1573399"
  },
  {
    "text": "you're totally in the weeds right the",
    "start": "1573399",
    "end": "1578799"
  },
  {
    "text": "place is enough abound on both synchronization overhead and time to issue operations now couple more",
    "start": "1578799",
    "end": "1587230"
  },
  {
    "text": "definitions threads a thread is an execution environment consisting of a stack and processor state running in",
    "start": "1587230",
    "end": "1593500"
  },
  {
    "text": "parallel or concurrent plugged in my slides to other threads okay a task is a",
    "start": "1593500",
    "end": "1603580"
  },
  {
    "text": "unit of work off often a function that you want to issue on a thread so tasks",
    "start": "1603580",
    "end": "1611049"
  },
  {
    "text": "are scheduled they can be scheduled onto a thread pool top to Mai's machine utilization I mean threads tend to be",
    "start": "1611049",
    "end": "1618610"
  },
  {
    "text": "relatively heavy weights because they're carrying around processor state and and stacks and if you saw cat",
    "start": "1618610",
    "end": "1625970"
  },
  {
    "text": "Kevin's talk previous to this you had a great graph showing just how expensive it is to do a task switch from thread to",
    "start": "1625970",
    "end": "1633890"
  },
  {
    "text": "thread right you can do an awful lot of processing on the 10s which now",
    "start": "1633890",
    "end": "1639890"
  },
  {
    "text": "unfortunately C++ 14 doesn't really have a task system we have threads okay and",
    "start": "1639890",
    "end": "1646370"
  },
  {
    "text": "we have futures okay but we don't have a task system now worse it's in its",
    "start": "1646370",
    "end": "1655070"
  },
  {
    "text": "implementation to find whether or not STD async spins up a thread or execute it on a thread pool in C++ 11 it was",
    "start": "1655070",
    "end": "1662720"
  },
  {
    "text": "actually defined that it's spun up a thread but Microsoft's complained because under Windows 10 Microsoft",
    "start": "1662720",
    "end": "1668870"
  },
  {
    "text": "doesn't want to expose developers to threads they want everything to go",
    "start": "1668870",
    "end": "1675170"
  },
  {
    "text": "through the windows thread pool so they didn't want STD async to spin up threads so in C++ 14",
    "start": "1675170",
    "end": "1682940"
  },
  {
    "text": "they changed the standard wording to say well it's undefined maybe it's a thread maybe it's executed on a thread pool",
    "start": "1682940",
    "end": "1688640"
  },
  {
    "text": "we're not going to tell you I'm going to show you in a few slides why that was a very problematic decision okay now I'm",
    "start": "1688640",
    "end": "1698450"
  },
  {
    "start": "1695000",
    "end": "1815000"
  },
  {
    "text": "going to walk you guys through building a tasking system we're going to build kind of a portable reference implementation and C++ 14 but don't do",
    "start": "1698450",
    "end": "1706340"
  },
  {
    "text": "it on your own right not unless you have to I actually had to do this because in",
    "start": "1706340",
    "end": "1712309"
  },
  {
    "text": "the previous slides getting Lightroom web to run one of the places where I had",
    "start": "1712309",
    "end": "1717800"
  },
  {
    "text": "to make it run was inside the Chrome browser using pinnacle which is Google's",
    "start": "1717800",
    "end": "1722809"
  },
  {
    "text": "portable Native Client and that's basically in an environment where you can run threaded C++ code inside of the",
    "start": "1722809",
    "end": "1730580"
  },
  {
    "text": "browser so long as it's a Chrome browser or or on a Chromebook but they didn't",
    "start": "1730580",
    "end": "1737630"
  },
  {
    "text": "have a stock tasking system for it and I couldn't find a reasonable one that was",
    "start": "1737630",
    "end": "1742670"
  },
  {
    "text": "open sourced apples Grand Central Dispatch is open sourced but it has a",
    "start": "1742670",
    "end": "1747740"
  },
  {
    "text": "lot of dependency on Lib kernel and I don't have a kernel inside of Chrome",
    "start": "1747740",
    "end": "1752950"
  },
  {
    "text": "unfortunately so I couldn't make that work but there are lots of good ones here right there's windows has thread pool",
    "start": "1752950",
    "end": "1759980"
  },
  {
    "text": "and ppl Apple has Grand Central Dispatch which can run on Linux and Android there's until TBB there's HP X I'm sure",
    "start": "1759980",
    "end": "1770960"
  },
  {
    "text": "that you can find others but those would be the ones that I would I would recommend okay this is one that I would",
    "start": "1770960",
    "end": "1779900"
  },
  {
    "text": "not recommend so there's a little link in the URL there Oracle has this paper",
    "start": "1779900",
    "end": "1787850"
  },
  {
    "text": "that they published years ago which is how to write high-performance",
    "start": "1787850",
    "end": "1793790"
  },
  {
    "text": "multi-threaded server code and and as an appendix they have how to build a",
    "start": "1793790",
    "end": "1800300"
  },
  {
    "text": "tasking system in there for a thread pool this is their model you've got a qu",
    "start": "1800300",
    "end": "1807320"
  },
  {
    "text": "su tasks into the queue the tasks get DQ's by multiple threads you have one",
    "start": "1807320",
    "end": "1812900"
  },
  {
    "text": "queue per piece of hardware that you have and and their implementation is",
    "start": "1812900",
    "end": "1821090"
  },
  {
    "start": "1815000",
    "end": "2140000"
  },
  {
    "text": "about 20 pages but we can build with c++ better one pretty quickly so we're going",
    "start": "1821090",
    "end": "1827630"
  },
  {
    "text": "to build a notification queue here we're just going to build it out of a deck of STD functions with the mutex and a",
    "start": "1827630",
    "end": "1835700"
  },
  {
    "text": "conditioner variable around it we're going to have a pop operation which is just going to pull one item off of the",
    "start": "1835700",
    "end": "1841790"
  },
  {
    "text": "queue okay in our function we're going to have a push operation to just push one item in the queue and notify anybody",
    "start": "1841790",
    "end": "1849140"
  },
  {
    "text": "who might be waiting on the queue okay and then we can build a tasking system",
    "start": "1849140",
    "end": "1855140"
  },
  {
    "text": "where we have count which is the number of course we have and our vector of",
    "start": "1855140",
    "end": "1860990"
  },
  {
    "text": "threads okay and our notification queue a run function for our our threads which",
    "start": "1860990",
    "end": "1870650"
  },
  {
    "text": "is just going to to create a function pop the function from our queue and execute it",
    "start": "1870650",
    "end": "1877929"
  },
  {
    "text": "okay and then our constructor here for our test system will spin up one thread",
    "start": "1878040",
    "end": "1883970"
  },
  {
    "text": "binding it with a lambda against our run",
    "start": "1883970",
    "end": "1888890"
  },
  {
    "text": "when we destruct we need to join all of our threads",
    "start": "1889680",
    "end": "1893900"
  },
  {
    "text": "and then we're going to have an async operation where we just take a function and we push it okay so pretty primitive",
    "start": "1894850",
    "end": "1904110"
  },
  {
    "text": "the one thing we would hang on destruction right there because we didn't have a way to signal done so",
    "start": "1904110",
    "end": "1911080"
  },
  {
    "text": "we'll add that real quick we're going to have a bool that's done when you call",
    "start": "1911080",
    "end": "1916090"
  },
  {
    "text": "done we're going to set the bool to true and notify everybody okay in our pop",
    "start": "1916090",
    "end": "1922870"
  },
  {
    "text": "function when we're waiting if we get woken up from our condition of variable",
    "start": "1922870",
    "end": "1927940"
  },
  {
    "text": "then we're also going to be checking done right returning false and that's it",
    "start": "1927940",
    "end": "1937390"
  },
  {
    "text": "that's the complete thing so how do you guys think this performs I already told",
    "start": "1937390",
    "end": "1943780"
  },
  {
    "text": "you right right badly kind of barely get",
    "start": "1943780",
    "end": "1949390"
  },
  {
    "text": "off the mark horrible why is this horrible makes a good example right it's",
    "start": "1949390",
    "end": "1955630"
  },
  {
    "text": "easy to write nothing fundamentally wrong about it it's exactly this model",
    "start": "1955630",
    "end": "1962610"
  },
  {
    "text": "right we've got a single Q and we've got a bunch of threads and they're banging on that Q okay and we've got locks",
    "start": "1962610",
    "end": "1970300"
  },
  {
    "text": "around it now unfortunately here understanding that I can transform those",
    "start": "1970300",
    "end": "1976660"
  },
  {
    "text": "locks into a queue model doesn't help me because all I have is a Q it locks",
    "start": "1976660",
    "end": "1981850"
  },
  {
    "text": "around it okay so I need to come up with a better way",
    "start": "1981850",
    "end": "1987900"
  },
  {
    "text": "okay so that's X so here is the common",
    "start": "1990650",
    "end": "1997040"
  },
  {
    "text": "answer I put a Q on each thread that minimizes my contention okay so let's",
    "start": "1997040",
    "end": "2008980"
  },
  {
    "text": "write that we can do this pretty quickly we're just going to have a vector of notification Q's we get to reuse or same",
    "start": "2008980",
    "end": "2015100"
  },
  {
    "text": "notification q okay one for each thread so now our run is going to take an index",
    "start": "2015100",
    "end": "2022270"
  },
  {
    "text": "into into which q it's actually bound",
    "start": "2022270",
    "end": "2027760"
  },
  {
    "text": "against when we join now we need to tell",
    "start": "2027760",
    "end": "2032920"
  },
  {
    "text": "all the Q's they're done next one and when we're going to do our",
    "start": "2032920",
    "end": "2041470"
  },
  {
    "text": "push we're going to keep a little atomic index so we can be pushing from multiple threads and we're just going to keep",
    "start": "2041470",
    "end": "2047590"
  },
  {
    "text": "incrementing it but then we're going to modulo it by our count and so we're just going to round-robin going through",
    "start": "2047590",
    "end": "2055408"
  },
  {
    "text": "pushing into into it there okay and if you notice that's unsigned so wrapping",
    "start": "2055409",
    "end": "2061450"
  },
  {
    "text": "around on that index is not a problem well-defined behavior on our overflow it's a modulo arithmetic okay so how do",
    "start": "2061450",
    "end": "2071169"
  },
  {
    "text": "you guys think we did on our speedometer twice as fast is it going to go half",
    "start": "2071169",
    "end": "2077950"
  },
  {
    "text": "halfway up we're just going to go nobody so so I actually did profile all this",
    "start": "2077950",
    "end": "2084730"
  },
  {
    "text": "code I wrote this all profiled it it's about ten times better okay",
    "start": "2084730",
    "end": "2092129"
  },
  {
    "text": "barely get this movie okay so and we",
    "start": "2092300",
    "end": "2098240"
  },
  {
    "text": "have two problems here one is is I can get a long-running task in one of my Q's",
    "start": "2098240",
    "end": "2103970"
  },
  {
    "text": "and it can cause a bubble and I can have my other course sitting there idle okay",
    "start": "2103970",
    "end": "2109300"
  },
  {
    "text": "so the other is is even in a fully loaded system I can end up with a fair",
    "start": "2109300",
    "end": "2116570"
  },
  {
    "text": "amount of contention right where one of those mutexes blocks and that's you know",
    "start": "2116570",
    "end": "2124930"
  },
  {
    "text": "upwards of a million cycles to do a full task switch right in overhead so having",
    "start": "2124930",
    "end": "2132880"
  },
  {
    "text": "keeping one of those mutexes and actually having it locked kills performance okay so here's the next",
    "start": "2132880",
    "end": "2145070"
  },
  {
    "start": "2140000",
    "end": "2244000"
  },
  {
    "text": "solution right called task stealing okay now there are lots of sophisticated",
    "start": "2145070",
    "end": "2152990"
  },
  {
    "text": "algorithms that are heavily tuned for doing task stealing but we're just going to code it very simply here and the idea",
    "start": "2152990",
    "end": "2159350"
  },
  {
    "text": "with task stealing is is if your queue",
    "start": "2159350",
    "end": "2164560"
  },
  {
    "text": "you being a thread is busy because",
    "start": "2164560",
    "end": "2170960"
  },
  {
    "text": "somebody's pushing in the other end okay ah or it's empty",
    "start": "2170960",
    "end": "2177040"
  },
  {
    "text": "either you don't really care see if you can go pull something out to somebody else's queue",
    "start": "2177040",
    "end": "2184600"
  },
  {
    "text": "okay so let's do that so and we're going to take our pop and we're going to have",
    "start": "2185290",
    "end": "2192340"
  },
  {
    "text": "tri pop here okay so our tri pop is going to take a tri lock on our mutex",
    "start": "2192340",
    "end": "2200710"
  },
  {
    "text": "okay so it's going to try to lock will either get the lock or not if we don't get the lock we just return false okay",
    "start": "2200710",
    "end": "2207850"
  },
  {
    "text": "or if the queue is empty we return false by the way",
    "start": "2207850",
    "end": "2214200"
  },
  {
    "text": "so we'll do that we're going to do the same thing on our push just for good",
    "start": "2215180",
    "end": "2221760"
  },
  {
    "text": "measure okay so if I'm trying to push something into a queue and that queue is busy I",
    "start": "2221760",
    "end": "2227040"
  },
  {
    "text": "shouldn't wait on it okay cause hold a mutex cause a whole process or cast",
    "start": "2227040",
    "end": "2233730"
  },
  {
    "text": "square to even do a spin lock okay what I'm going to do is if it's busy I'm just",
    "start": "2233730",
    "end": "2239790"
  },
  {
    "text": "going to return false okay couldn't push it okay so now our",
    "start": "2239790",
    "end": "2248370"
  },
  {
    "start": "2244000",
    "end": "2332000"
  },
  {
    "text": "caste system our constructor and destructor stay the same okay but when",
    "start": "2248370",
    "end": "2255180"
  },
  {
    "text": "we do the run now what we're going to do is we're going to do try pop and we'll",
    "start": "2255180",
    "end": "2262350"
  },
  {
    "text": "just run once round all the queues okay and then if we don't get anything once",
    "start": "2262350",
    "end": "2268560"
  },
  {
    "text": "around then we'll just wait where we were",
    "start": "2268560",
    "end": "2273559"
  },
  {
    "text": "okay now on the push side we'll spin around and",
    "start": "2273720",
    "end": "2281609"
  },
  {
    "text": "it turns out on the push if all the cues are busy right right you have to push",
    "start": "2281609",
    "end": "2289319"
  },
  {
    "text": "okay so so what are you going to do well",
    "start": "2289319",
    "end": "2295650"
  },
  {
    "text": "you could just sit and wait on one cue but there's no guarantee that that's the first cue that frees up okay so it's",
    "start": "2295650",
    "end": "2303450"
  },
  {
    "text": "actually better on the push to spin a little more okay so I've got a que there",
    "start": "2303450",
    "end": "2308480"
  },
  {
    "text": "right right and there's a trade-off there you're you're improving overall",
    "start": "2308480",
    "end": "2314700"
  },
  {
    "text": "throughput of the system versus sacrificing a single core to burn it in",
    "start": "2314700",
    "end": "2320190"
  },
  {
    "text": "the spin loop so whether or not it's a win in your system depends on what the load is on your system okay whether or",
    "start": "2320190",
    "end": "2327300"
  },
  {
    "text": "not you have that core to burn so but you can tune it quite a bit so now how",
    "start": "2327300",
    "end": "2334650"
  },
  {
    "text": "do you think we did",
    "start": "2334650",
    "end": "2337250"
  },
  {
    "text": "okay so way better okay so we got way up",
    "start": "2340380",
    "end": "2346200"
  },
  {
    "text": "into there now at this point we're about a hundred times better than when we",
    "start": "2346200",
    "end": "2352170"
  },
  {
    "text": "started from Oracle's example code so this is a pretty huge improvement okay",
    "start": "2352170",
    "end": "2358200"
  },
  {
    "text": "now what I was benchmarking these at was Apple's Grand Central Dispatch",
    "start": "2358200",
    "end": "2364940"
  },
  {
    "text": "that's my one point oh right that's my mindful thing apples Grand Central Dispatch is a very nice piece of work if",
    "start": "2365760",
    "end": "2372660"
  },
  {
    "text": "you actually go and read the code and it even has hooked into Lib colonel and the reason why it has looks into Lib colonel",
    "start": "2372660",
    "end": "2378690"
  },
  {
    "text": "is because it understands when one task is blocked and how to go just ignore",
    "start": "2378690",
    "end": "2384720"
  },
  {
    "text": "that task and go take care of other things so you cannot match it with the",
    "start": "2384720",
    "end": "2391050"
  },
  {
    "text": "primitives that you have in standard C++ okay but we actually came within about 15%",
    "start": "2391050",
    "end": "2397160"
  },
  {
    "text": "okay of it with some straightforward code so that's pretty good okay now if",
    "start": "2397160",
    "end": "2405180"
  },
  {
    "start": "2401000",
    "end": "2442000"
  },
  {
    "text": "you happen to have live dispatch this is a standard STD async compatible function",
    "start": "2405180",
    "end": "2417180"
  },
  {
    "text": "I'm not going to walk through the whole thing here that sits on top of dispatch async F which is a call into Lib",
    "start": "2417180",
    "end": "2422820"
  },
  {
    "text": "dispatch so this is is is fully STD async compliant including allowing you",
    "start": "2422820",
    "end": "2429750"
  },
  {
    "text": "to move arguments through the whole thing and stuff written in terms of dispatch async so if you're on a machine",
    "start": "2429750",
    "end": "2437640"
  },
  {
    "text": "where you can use Lib dispatch by all means steal this code and do",
    "start": "2437640",
    "end": "2443660"
  },
  {
    "start": "2442000",
    "end": "2531000"
  },
  {
    "text": "okay now the first time I gave this talk somebody went and bent my ear for about",
    "start": "2444850",
    "end": "2450350"
  },
  {
    "text": "three hours and said well if you're doing anything you should be writing and writing it in terms of a CEO and a do",
    "start": "2450350",
    "end": "2457250"
  },
  {
    "text": "tasks because that's been proposed to the standard and a CEO being a",
    "start": "2457250",
    "end": "2464030"
  },
  {
    "text": "synchronous i/o and it has been as an experimental library and I think a zero",
    "start": "2464030",
    "end": "2470690"
  },
  {
    "text": "is a beautiful piece of work so don't get me wrong here but a CEO is not a tasking system so in",
    "start": "2470690",
    "end": "2476240"
  },
  {
    "text": "fact a CEO doesn't even have tasking primitives so is this person spending my ears and why didn't I use a CEO I'm like",
    "start": "2476240",
    "end": "2481910"
  },
  {
    "text": "well what are you even talking about okay but you can build a tasking system out of a CEO and and this is what it",
    "start": "2481910",
    "end": "2489740"
  },
  {
    "text": "looks like it's fairly straightforward and that's how it performs almost",
    "start": "2489740",
    "end": "2496880"
  },
  {
    "text": "identically to my first piece of code for exactly the same reasons in here we",
    "start": "2496880",
    "end": "2502070"
  },
  {
    "text": "have a single single service queue that we are posting work to and it's under",
    "start": "2502070",
    "end": "2509540"
  },
  {
    "text": "heavy contention and it's getting pounded upon it is actually slightly faster by about 10% then my",
    "start": "2509540",
    "end": "2517970"
  },
  {
    "text": "implementation with a single queue okay but that doesn't show up as a pixel even",
    "start": "2517970",
    "end": "2524300"
  },
  {
    "text": "on my speedometer so so that's where a CEO is so don't let people tell you as",
    "start": "2524300",
    "end": "2530390"
  },
  {
    "text": "you as a tasking system it's not okay so",
    "start": "2530390",
    "end": "2535430"
  },
  {
    "start": "2531000",
    "end": "2568000"
  },
  {
    "text": "now we have a system where we can issue tasks",
    "start": "2535430",
    "end": "2540309"
  },
  {
    "text": "so what happens we issue a task which is some function some work bound to it it",
    "start": "2540500",
    "end": "2547910"
  },
  {
    "text": "goes and executes we've got another task that task yielded some object and we",
    "start": "2547910",
    "end": "2554960"
  },
  {
    "text": "want to communicate that result to something else that's executing right",
    "start": "2554960",
    "end": "2561859"
  },
  {
    "text": "how do we do that what's our what's our form of communication between tasks",
    "start": "2561859",
    "end": "2569200"
  },
  {
    "text": "all right well this is where futures come into play okay so we're going to",
    "start": "2569390",
    "end": "2575509"
  },
  {
    "text": "calculate Fibonacci of a million CPP inte is a boost a infinite precision",
    "start": "2575509",
    "end": "2586239"
  },
  {
    "text": "math type so that's an infinite precision integer okay anybody you have",
    "start": "2586239",
    "end": "2592609"
  },
  {
    "text": "any idea of how big fibonacci of a million is so it's big",
    "start": "2592609",
    "end": "2601390"
  },
  {
    "text": "subin achi is also is often used as an example in in parallel algorithms please",
    "start": "2603789",
    "end": "2610039"
  },
  {
    "text": "stop almost every talk I go to on parallelism uses Fibonacci numbers uh here's why so",
    "start": "2610039",
    "end": "2619359"
  },
  {
    "start": "2616000",
    "end": "2784000"
  },
  {
    "text": "there's a slow way to calculate Fibonacci which is what most people demonstrate and there's a proper way to",
    "start": "2619359",
    "end": "2624769"
  },
  {
    "text": "calculate Fibonacci to calculate Fibonacci what you need is a power function so this power function will",
    "start": "2624769",
    "end": "2631309"
  },
  {
    "text": "take X to the power of n for some operation so if my operation here is addition then this does multiplication",
    "start": "2631309",
    "end": "2638509"
  },
  {
    "text": "okay if my operation is multiplication this does exponentiation okay so this is",
    "start": "2638509",
    "end": "2645440"
  },
  {
    "text": "a generic form of it unfortunately power isn't in the standard library but it should be if you want more information",
    "start": "2645440",
    "end": "2651769"
  },
  {
    "text": "about how this works there's a great write-up on it in Alec Stepanov and Dan Rose's book for mathematics to generic",
    "start": "2651769",
    "end": "2657799"
  },
  {
    "text": "programming kind of the full history of this algorithm it's also known as Egyptian multiplication or the Russian peasant algorithm okay so what I want to",
    "start": "2657799",
    "end": "2667519"
  },
  {
    "text": "do then is I want to take a particular matrix which oh there it is I want to",
    "start": "2667519",
    "end": "2677089"
  },
  {
    "text": "take that matrix which is 1 1 1 0 which is known as the Fibonacci matrix and I want to raise it to this let me back up",
    "start": "2677089",
    "end": "2686799"
  },
  {
    "text": "didn't mean to go that far that's Fibonacci of a million",
    "start": "2687120",
    "end": "2692240"
  },
  {
    "text": "slow okay",
    "start": "2696650",
    "end": "2703750"
  },
  {
    "text": "so I want to take a Fibonacci matrix raised to the nth power and that will",
    "start": "2704569",
    "end": "2713190"
  },
  {
    "text": "give me the Fibonacci number of n plus 1 in the top left Fibonacci n on the two diagonals and n minus on the bottom",
    "start": "2713190",
    "end": "2719579"
  },
  {
    "text": "right ok so I can actually take Fibonacci here of n minus 1 and pull it",
    "start": "2719579",
    "end": "2724799"
  },
  {
    "text": "from impulsive iñaki n from the top left okay so with that code and now you see",
    "start": "2724799",
    "end": "2736469"
  },
  {
    "text": "the delay here it takes a key note a minute to prep this this is the result",
    "start": "2736469",
    "end": "2743940"
  },
  {
    "text": "of Fibonacci of a million okay it took point seven two seconds to calculate on",
    "start": "2743940",
    "end": "2750119"
  },
  {
    "text": "my old on this laptop on my old 2013 or so MacBook Pro it's two hundred and",
    "start": "2750119",
    "end": "2756989"
  },
  {
    "text": "eight almost two hundred nine thousand digits and and it calculates and and",
    "start": "2756989",
    "end": "2764759"
  },
  {
    "text": "that's just running single threaded okay so I can calculate way bigger Fibonacci",
    "start": "2764759",
    "end": "2769799"
  },
  {
    "text": "numbers then then people do in the parallel examples the reason why bugs me is because I've actually seen people use",
    "start": "2769799",
    "end": "2776369"
  },
  {
    "text": "the bad algorithm that people use to demonstrate with parallel algorithms in actual code okay stop so try to only",
    "start": "2776369",
    "end": "2785849"
  },
  {
    "text": "give real examples so we'll calculate seven oxy of a million with our future",
    "start": "2785849",
    "end": "2793229"
  },
  {
    "text": "so what's our mental model of futures okay what we're doing is we're taking a function and we're slicing off the",
    "start": "2793229",
    "end": "2799950"
  },
  {
    "text": "results okay so what I end up with is a function okay still take some arguments but has no",
    "start": "2799950",
    "end": "2807359"
  },
  {
    "text": "result and a future which is a token for the result and that future will appear",
    "start": "2807359",
    "end": "2813509"
  },
  {
    "text": "sometime later okay so that's the model the futures it's separating the function",
    "start": "2813509",
    "end": "2820979"
  },
  {
    "text": "from the results of the function and having a communication channel before them now the nice thing about futures is",
    "start": "2820979",
    "end": "2826799"
  },
  {
    "text": "they allow minimum code transformations to express dependencies",
    "start": "2826799",
    "end": "2833359"
  },
  {
    "start": "2832000",
    "end": "2858000"
  },
  {
    "text": "okay so if I have a future and oh the",
    "start": "2834170",
    "end": "2841170"
  },
  {
    "text": "other nice thing about futures and C++ is they can marshal exceptions right so if I have a future and I fail this will",
    "start": "2841170",
    "end": "2848549"
  },
  {
    "text": "end up printing failure right so across threads my exception can be thrown in",
    "start": "2848549",
    "end": "2854459"
  },
  {
    "text": "one thread and caught in the other",
    "start": "2854459",
    "end": "2858079"
  },
  {
    "start": "2858000",
    "end": "2878000"
  },
  {
    "text": "go there and then I call future get and let's just stop right we just block that",
    "start": "2862840",
    "end": "2870940"
  },
  {
    "text": "thread while we wait for the results STD futures and then the result comes over I",
    "start": "2870940",
    "end": "2877260"
  },
  {
    "text": "hate stops right unfortunately C++ even",
    "start": "2877260",
    "end": "2883450"
  },
  {
    "start": "2878000",
    "end": "2925000"
  },
  {
    "text": "14 lacks continuations with the continuation instead of saying dot get",
    "start": "2883450",
    "end": "2888610"
  },
  {
    "text": "and stop you say when the results for this is available then do the next thing",
    "start": "2888610",
    "end": "2893950"
  },
  {
    "text": "if you've done JavaScript programming with with promises it's the same idea",
    "start": "2893950",
    "end": "2902520"
  },
  {
    "text": "okay so along with that C++ 14 lacks joins",
    "start": "2902520",
    "end": "2910270"
  },
  {
    "text": "which are win all and win any when all these features are available to something it'll act splits which we'll",
    "start": "2910270",
    "end": "2916360"
  },
  {
    "text": "talk about more cancellation and progress monitoring in C++ 14 features",
    "start": "2916360",
    "end": "2922360"
  },
  {
    "text": "don't compose particularly easily to add these things okay so what's the model",
    "start": "2922360",
    "end": "2929260"
  },
  {
    "text": "for continuations well we've got is a function yielding a result which we want change to the next function yielding",
    "start": "2929260",
    "end": "2934540"
  },
  {
    "text": "some results and so on okay now STD future has two additional",
    "start": "2934540",
    "end": "2944110"
  },
  {
    "start": "2935000",
    "end": "3047000"
  },
  {
    "text": "problems so first is that it consumes one resource right which we talked about",
    "start": "2944110",
    "end": "2951449"
  },
  {
    "text": "increasing contention but it possibly deadlocks if you have a tasking system",
    "start": "2951449",
    "end": "2959119"
  },
  {
    "text": "and any non subsequent non-dependent calculations on the task girls are blocked",
    "start": "2959240",
    "end": "2964900"
  },
  {
    "text": "now even though C++ 14 doesn't have the primitives boost futures has been with",
    "start": "2966320",
    "end": "2972320"
  },
  {
    "text": "TS concurrency which is following to the standard has been TVB has flow graphs ppl has chain tasks CCD has serialized",
    "start": "2972320",
    "end": "2981080"
  },
  {
    "text": "queues and groups these are all things to solve the same problem as continuation",
    "start": "2981080",
    "end": "2987789"
  },
  {
    "text": "okay so how can get caused a deadlock let's say I have a task and it issued",
    "start": "2988760",
    "end": "2996119"
  },
  {
    "text": "another task and then it waits on a gift",
    "start": "2996119",
    "end": "3001359"
  },
  {
    "text": "that other task will never complete because it's not coming out of the queue so if I'm on a single threaded system",
    "start": "3001359",
    "end": "3008500"
  },
  {
    "text": "okay then a future get is an immediate deadlock this is why promises in",
    "start": "3008500",
    "end": "3014390"
  },
  {
    "text": "JavaScript do not have git or dot wait they only have continuations in a single",
    "start": "3014390",
    "end": "3020180"
  },
  {
    "text": "threaded system it's an immediate deadlock okay well what if I have two",
    "start": "3020180",
    "end": "3025940"
  },
  {
    "text": "threads that guy issues two tasks one",
    "start": "3025940",
    "end": "3031039"
  },
  {
    "text": "task goes into the queue he waits for it he's deadlocked well the other task a",
    "start": "3031039",
    "end": "3036140"
  },
  {
    "text": "task steal unless he issues a task and waits for it and then we're deadlocked",
    "start": "3036140",
    "end": "3043359"
  },
  {
    "text": "okay and so on right",
    "start": "3043359",
    "end": "3052390"
  },
  {
    "start": "3047000",
    "end": "3081000"
  },
  {
    "text": "it's very difficult to use future like it is very difficult to use safely in",
    "start": "3052850",
    "end": "3058310"
  },
  {
    "text": "the presence of a thread pool an STD a sink it's undefined whether or not it's",
    "start": "3058310",
    "end": "3063920"
  },
  {
    "text": "a thread pool or not okay that's a",
    "start": "3063920",
    "end": "3069680"
  },
  {
    "text": "problem it's not just yet it's any conditional blocking right such as",
    "start": "3069680",
    "end": "3075980"
  },
  {
    "text": "condition variables weight or problematic in a task system they're exactly the same thing",
    "start": "3075980",
    "end": "3083020"
  },
  {
    "start": "3081000",
    "end": "3123000"
  },
  {
    "text": "somehow I dropped a negative here this should say do not call s to be future get or STD future wait when the",
    "start": "3086770",
    "end": "3092540"
  },
  {
    "text": "originating task or any subordinate task is on the same queue even if it's a",
    "start": "3092540",
    "end": "3097760"
  },
  {
    "text": "concurrent queue or a thread pool that's the rule for using them safely okay which means",
    "start": "3097760",
    "end": "3104360"
  },
  {
    "text": "that I can issue a task within C++ with",
    "start": "3104360",
    "end": "3110030"
  },
  {
    "text": "async from my main thread and call yet on the future okay but I can't call get",
    "start": "3110030",
    "end": "3116660"
  },
  {
    "text": "on a future from anything that was queued through STD async",
    "start": "3116660",
    "end": "3122890"
  },
  {
    "start": "3123000",
    "end": "3216000"
  },
  {
    "text": "okay so you see this problem in every",
    "start": "3125890",
    "end": "3131440"
  },
  {
    "text": "tasking system it will have some kind of warning like this so I could have put a whole list of them up there but this is",
    "start": "3131440",
    "end": "3137140"
  },
  {
    "text": "from lib dispatch I've kind of been using live dispatch as an example you should never call dispatch sinc what's",
    "start": "3137140",
    "end": "3143290"
  },
  {
    "text": "just batch sync it's the equivalent of queueing something into the queue and then waiting for it immediately right",
    "start": "3143290",
    "end": "3149640"
  },
  {
    "text": "never call dispatch synch from a task that is executing in the same queue that you are planning to pass to the function",
    "start": "3149640",
    "end": "3155770"
  },
  {
    "text": "this is particularly important for serial queues which are guaranteed deadlock but should also be avoided for",
    "start": "3155770",
    "end": "3161920"
  },
  {
    "text": "concurrent queues okay why because depending on how the stars",
    "start": "3161920",
    "end": "3168220"
  },
  {
    "text": "align it will be a deadlock now how did I discover this well taking a heavily",
    "start": "3168220",
    "end": "3176680"
  },
  {
    "text": "threaded piece of code and taking it down to one thread it was very apparent where all the dead locks were right there but then we also realized that hey",
    "start": "3176680",
    "end": "3183910"
  },
  {
    "text": "if we took it to mobile where I also took Lightroom engine to mobile with two",
    "start": "3183910",
    "end": "3189370"
  },
  {
    "text": "cores we were seeing a lot more dead locks okay when we actually finally figured",
    "start": "3189370",
    "end": "3194470"
  },
  {
    "text": "out what in the world the problem was we realized that even on eight cores and sixteen core machines the system under",
    "start": "3194470",
    "end": "3200440"
  },
  {
    "text": "heavy load would occasionally deadlock it was just rare enough that you",
    "start": "3200440",
    "end": "3205510"
  },
  {
    "text": "wouldn't see it okay so so but in our bug backlog when we went back through it",
    "start": "3205510",
    "end": "3211270"
  },
  {
    "text": "was like oh yeah this this is that problem this deadlock is that problem okay so a huge thing okay so this is",
    "start": "3211270",
    "end": "3222940"
  },
  {
    "start": "3216000",
    "end": "3240000"
  },
  {
    "text": "what a dot then continuation looks like right we can calculate Fibonacci and then once the Fibonacci gets we can",
    "start": "3222940",
    "end": "3228160"
  },
  {
    "text": "serialize it we're going to go ahead and put our weight in here because we're executing this on the main thread not",
    "start": "3228160",
    "end": "3233860"
  },
  {
    "text": "over over on our async it's useful at least for debugging so so now we can do",
    "start": "3233860",
    "end": "3239320"
  },
  {
    "text": "it and then print it okay so bins are are the equivalent of",
    "start": "3239320",
    "end": "3249030"
  },
  {
    "start": "3240000",
    "end": "3326000"
  },
  {
    "text": "completion handlers okay and in the standard committee a lot of times there's debate over whether or not the",
    "start": "3249030",
    "end": "3255270"
  },
  {
    "text": "futures are the right model or whether or not completion handlers are the right model okay so so conceptually the two",
    "start": "3255270",
    "end": "3264660"
  },
  {
    "text": "are interchangeable okay so the advantage with the completion handler is that there's no need to synchronize",
    "start": "3264660",
    "end": "3273230"
  },
  {
    "text": "between invocation and and and setting it because it was set in advance the",
    "start": "3275030",
    "end": "3280650"
  },
  {
    "text": "completion handler gets passed into the function okay whereas a future there's a little bit of synchronization that",
    "start": "3280650",
    "end": "3286290"
  },
  {
    "text": "happens because you don't know well your asynchronous task is setting when you're setting the value is somebody attaching",
    "start": "3286290",
    "end": "3293190"
  },
  {
    "text": "a continuation at that exact moment in time okay so there's a small amount of synchronization that has to happen but",
    "start": "3293190",
    "end": "3299730"
  },
  {
    "text": "the advantage with the future is that you don't have to know where the results are going in advance right so so those",
    "start": "3299730",
    "end": "3308220"
  },
  {
    "text": "are the trade-offs so you can actually express one in terms of the other and vice versa if if you if you build build",
    "start": "3308220",
    "end": "3316680"
  },
  {
    "text": "a system correctly so my answer is always when people say do we want futures or completion routines I'm like",
    "start": "3316680",
    "end": "3322710"
  },
  {
    "text": "yes that is my answer I want both okay",
    "start": "3322710",
    "end": "3328800"
  },
  {
    "start": "3326000",
    "end": "3384000"
  },
  {
    "text": "now the other thing you find when you start to construct these things is we need joins okay so what I want to do is",
    "start": "3328800",
    "end": "3334470"
  },
  {
    "text": "I have two futures and when both of those futures are available then I want to issue the nest nest next task now a",
    "start": "3334470",
    "end": "3341190"
  },
  {
    "text": "lot of people have the wrong mental model about this what they think is is then I will have my continuation I get",
    "start": "3341190",
    "end": "3349680"
  },
  {
    "text": "get one result in and then I will block and wait for the other result but that's not how joins work at all",
    "start": "3349680",
    "end": "3356370"
  },
  {
    "text": "what happens if you keep a count of how many things that you're waiting for that are pending okay and when I get one",
    "start": "3356370",
    "end": "3363150"
  },
  {
    "text": "result in I issue the task or when I get one result in I'm okay when I might when",
    "start": "3363150",
    "end": "3370110"
  },
  {
    "text": "my count goes to zero then it's the it's the setting the result decrement",
    "start": "3370110",
    "end": "3375200"
  },
  {
    "text": "the count to zero that causes the next task in the chain to fire so you're",
    "start": "3375200",
    "end": "3380660"
  },
  {
    "text": "never blocking and waiting you're just counting down",
    "start": "3380660",
    "end": "3385900"
  },
  {
    "text": "okay so this is what it looks like with",
    "start": "3387350",
    "end": "3393700"
  },
  {
    "text": "this is using boost when all I really do not like the syntax here and that a win",
    "start": "3393880",
    "end": "3400580"
  },
  {
    "text": "all right I'm taking a win all of two futures and then a continuation and my",
    "start": "3400580",
    "end": "3406220"
  },
  {
    "text": "argument F coming in there is a tuple is a future of a tuple two futures which is",
    "start": "3406220",
    "end": "3414980"
  },
  {
    "text": "why you get the in order to print my end I've got get get x get get right right F",
    "start": "3414980",
    "end": "3426500"
  },
  {
    "text": "is a future tuple futures and the result of this is a bunch of digits we're not",
    "start": "3426500",
    "end": "3432740"
  },
  {
    "text": "going to print it so the other thing you want to be able to do is split",
    "start": "3432740",
    "end": "3439509"
  },
  {
    "text": "so here now this is still the boost slash proposed C++ 17 model so it seems",
    "start": "3439900",
    "end": "3447460"
  },
  {
    "text": "like the way you would do a split is just attach to continuations to your",
    "start": "3447460",
    "end": "3453190"
  },
  {
    "text": "future so I've got X and then I want to say then go multiply it by two and also",
    "start": "3453190",
    "end": "3460089"
  },
  {
    "text": "when I have X divide it by five that looks like a split",
    "start": "3460089",
    "end": "3466470"
  },
  {
    "start": "3465000",
    "end": "3484000"
  },
  {
    "text": "yeah just abort okay the reason is the",
    "start": "3467280",
    "end": "3472410"
  },
  {
    "text": "first then actually consumes X so trying",
    "start": "3472410",
    "end": "3477750"
  },
  {
    "text": "to add hacks a second X a second then is a cig abort that's not a particularly",
    "start": "3477750",
    "end": "3483120"
  },
  {
    "text": "friendly thing now a shared future lets",
    "start": "3483120",
    "end": "3488280"
  },
  {
    "start": "3484000",
    "end": "3520000"
  },
  {
    "text": "me copy them around okay and do multiple get operations but it still doesn't let me do multiple event operations okay",
    "start": "3488280",
    "end": "3495450"
  },
  {
    "text": "well that's horrible so now if I've got a shared future in my hand I don't know whether or not I can attach a",
    "start": "3495450",
    "end": "3500880"
  },
  {
    "text": "continuation to it okay so my opinion",
    "start": "3500880",
    "end": "3508650"
  },
  {
    "text": "the future should behave as a regular type it's a token to the value so you should be able to to copy them to get a",
    "start": "3508650",
    "end": "3514770"
  },
  {
    "text": "split but in absence of that we could write a split so let's see how we would",
    "start": "3514770",
    "end": "3521940"
  },
  {
    "start": "3520000",
    "end": "3557000"
  },
  {
    "text": "do that okay so this is what it would look like to call what we're going to do",
    "start": "3521940",
    "end": "3527190"
  },
  {
    "text": "is we're going to take X we're going to split it okay which is going to leave our X as a future and give us a new one",
    "start": "3527190",
    "end": "3535200"
  },
  {
    "text": "to which we can attach our dot then okay so we can split it and then we can attach it and if we wanted to keep going",
    "start": "3535200",
    "end": "3541650"
  },
  {
    "text": "we keep splitting okay we could just keep splitting X",
    "start": "3541650",
    "end": "3547160"
  },
  {
    "text": "so and then we can write this and that will print that right the first one beam",
    "start": "3548099",
    "end": "3554459"
  },
  {
    "text": "times two and the second one divided by fifteen okay so let's see how we would",
    "start": "3554459",
    "end": "3561479"
  },
  {
    "start": "3557000",
    "end": "3600000"
  },
  {
    "text": "build that well first we've been talking about futures but we haven't been talking about the other in the futures we can c++ is known as a promise okay so",
    "start": "3561479",
    "end": "3569339"
  },
  {
    "text": "a promise is the sending side of a future so if we create a promise X then",
    "start": "3569339",
    "end": "3574410"
  },
  {
    "text": "we can get a future out of it and if we set the value 42 on our promise then we",
    "start": "3574410",
    "end": "3579719"
  },
  {
    "text": "will get the value out of our future okay so so that's the pairing there so",
    "start": "3579719",
    "end": "3587099"
  },
  {
    "text": "internally async STD async is is",
    "start": "3587099",
    "end": "3592549"
  },
  {
    "text": "creating a promise that we'll turn our 42 okay so here's how we're going to",
    "start": "3592549",
    "end": "3600630"
  },
  {
    "text": "write our split we'll walk through it here okay when we initially come in there is a promise somewhere that's in",
    "start": "3600630",
    "end": "3607140"
  },
  {
    "text": "gray a gray circle okay which is going to set our future which is X okay so",
    "start": "3607140",
    "end": "3616499"
  },
  {
    "text": "we've got a promise somewhere and we're hanging on to X so we're passing in a reference to X now the first thing we're",
    "start": "3616499",
    "end": "3624509"
  },
  {
    "text": "going to do is we're going to move that future out of X to get it out of the way",
    "start": "3624509",
    "end": "3629849"
  },
  {
    "text": "okay so the promise still points to the move future now which is in temp then",
    "start": "3629849",
    "end": "3636690"
  },
  {
    "text": "we're going to construct a new future and get a new promise for it and put the new promise into X okay so now we've",
    "start": "3636690",
    "end": "3644309"
  },
  {
    "text": "rewritten X to be our new future okay",
    "start": "3644309",
    "end": "3649920"
  },
  {
    "text": "then what we're going to do is we're going to take our temp okay which is our future we're going to",
    "start": "3649920",
    "end": "3658470"
  },
  {
    "text": "put it in to our lambda here so now it's underscore temp we're going to attach a",
    "start": "3658470",
    "end": "3667109"
  },
  {
    "text": "continuation to it which is going to return our results we're binding P right",
    "start": "3667109",
    "end": "3676260"
  },
  {
    "text": "we are moving the promise we created in the dotted line there eight so we we",
    "start": "3676260",
    "end": "3683910"
  },
  {
    "text": "took P we moved it over into underscore P okay",
    "start": "3683910",
    "end": "3689660"
  },
  {
    "text": "that's the result we have the original promise which points into our underscore",
    "start": "3690910",
    "end": "3697119"
  },
  {
    "text": "temp future okay which has a",
    "start": "3697119",
    "end": "3702190"
  },
  {
    "text": "continuation which is going to set the value on T my underscore P set value",
    "start": "3702190",
    "end": "3707640"
  },
  {
    "text": "okay and it's going to return the value right so there's the copy right there so",
    "start": "3707640",
    "end": "3714609"
  },
  {
    "text": "that's how you implement the splits okay then we do the same thing to split the",
    "start": "3714609",
    "end": "3721779"
  },
  {
    "text": "exception right so we want the exception to also go down both paths okay so if we",
    "start": "3721779",
    "end": "3727390"
  },
  {
    "text": "have an exception then we're going to send an exception down both paths you're",
    "start": "3727390",
    "end": "3733150"
  },
  {
    "text": "not sure we write a split okay now here's a tough thing this is",
    "start": "3733150",
    "end": "3742030"
  },
  {
    "text": "something I want with futures but they're not in C++ 17 and I don't know",
    "start": "3742030",
    "end": "3748720"
  },
  {
    "text": "of a good way to compose them into the sequence plus 17 futures basically what I want is now that I can split split my",
    "start": "3748720",
    "end": "3755440"
  },
  {
    "text": "futures right right and I can join them so I can build these complicated graphs is when the last piece of code see I",
    "start": "3755440",
    "end": "3765430"
  },
  {
    "text": "think I have a graph here when the last piece of code lets go of a future like",
    "start": "3765430",
    "end": "3772569"
  },
  {
    "text": "the top right one there okay then if the task associated with that piece of code",
    "start": "3772569",
    "end": "3778000"
  },
  {
    "text": "hasn't started to execute then I want it to not execute and to free the resources",
    "start": "3778000",
    "end": "3784800"
  },
  {
    "text": "okay which then leaves two futures which are no longer needed and so those",
    "start": "3784800",
    "end": "3790420"
  },
  {
    "text": "futures go away and I'm left with this right so I eliminated one task from my",
    "start": "3790420",
    "end": "3796000"
  },
  {
    "text": "system that's executing now when you're developing interactive software this comes up a lot the user does something",
    "start": "3796000",
    "end": "3802240"
  },
  {
    "text": "and then the user does something else and you're like okay well forget about that old thing you don't want to keep",
    "start": "3802240",
    "end": "3807579"
  },
  {
    "text": "doing it so a cancellation model is nice",
    "start": "3807579",
    "end": "3812700"
  },
  {
    "text": "because that wasn't there and because even the boost futures with",
    "start": "3813940",
    "end": "3819069"
  },
  {
    "text": "continuations will deadlock on a single threaded system which I consider a bug they shouldn't but they do it's a part",
    "start": "3819069",
    "end": "3826660"
  },
  {
    "text": "of their their their implementation I ended up writing this experimental library which is available on that",
    "start": "3826660",
    "end": "3834430"
  },
  {
    "text": "website and I've got futures in there that support multiple continuations and",
    "start": "3834430",
    "end": "3839770"
  },
  {
    "text": "they can be copied they're optimized for our values so you can have move only types with them it supports joins for",
    "start": "3839770",
    "end": "3847540"
  },
  {
    "text": "winning and win all it has cancellation on destruction as well as an explicit recess reset and it has a detach so you",
    "start": "3847540",
    "end": "3855730"
  },
  {
    "text": "can detach a future meaning that but now I can destruct this but I still want whatever it's associated with to",
    "start": "3855730",
    "end": "3861490"
  },
  {
    "text": "continue processing right just like you would detach a thread and say keep going even though though I'm destructing my my",
    "start": "3861490",
    "end": "3870040"
  },
  {
    "text": "toe and hold on to it so I put this library out there and I have to thank Felix",
    "start": "3870040",
    "end": "3877680"
  },
  {
    "text": "petrosini who's in Germany who's been just a massive contributor and so when I",
    "start": "3877680",
    "end": "3885519"
  },
  {
    "text": "wrote it I wrote it to the extent that I needed it and going to show it to the standard folks and say here's some",
    "start": "3885519",
    "end": "3891220"
  },
  {
    "text": "issues with the direction you're going and a Felix is really kind of flushed it",
    "start": "3891220",
    "end": "3896650"
  },
  {
    "text": "out and and our goal now is to release kind of a 1.0 version sometime earlier",
    "start": "3896650",
    "end": "3902799"
  },
  {
    "text": "this year that's there but futures",
    "start": "3902799",
    "end": "3909130"
  },
  {
    "text": "aren't enough right so the next thing is to talk about channels and I am probably way over time aren't I at this point I'm",
    "start": "3909130",
    "end": "3915940"
  },
  {
    "text": "not seen any hands since this took me a little longer to go",
    "start": "3915940",
    "end": "3921069"
  },
  {
    "text": "through then I wanted to I will stop here Kevin's already talked some about",
    "start": "3921069",
    "end": "3927039"
  },
  {
    "text": "the basic concepts of channels channels are also in my library so if you want me",
    "start": "3927039",
    "end": "3932230"
  },
  {
    "text": "to to discuss them just see me outside of this and the last thing I will just",
    "start": "3932230",
    "end": "3939579"
  },
  {
    "text": "flip through slides very quickly but I wanted to finish on that slide won't let",
    "start": "3939579",
    "end": "3946509"
  },
  {
    "text": "me go too quick all these great animations",
    "start": "3946509",
    "end": "3950460"
  },
  {
    "text": "channels it is this what we're building",
    "start": "3956170",
    "end": "3963430"
  },
  {
    "text": "here is dependency graphs within the code and it turns out there's a lot of information in the graph right when",
    "start": "3963430",
    "end": "3969670"
  },
  {
    "text": "you're building channels and you're building futures you're building dependency graphs and there's a lot of information that's in the graph but",
    "start": "3969670",
    "end": "3975400"
  },
  {
    "text": "these are are what I call incidental data structures right there isn't is no place within your code where it's like",
    "start": "3975400",
    "end": "3981339"
  },
  {
    "text": "here's my dependency graph okay which makes it makes it nearly impossible to",
    "start": "3981339",
    "end": "3986710"
  },
  {
    "text": "mine that graph for values especially if you want information about all the possible states of that graph",
    "start": "3986710",
    "end": "3994049"
  },
  {
    "text": "so maybe constructing these dependency graphs is is not the right approach",
    "start": "3995400",
    "end": "4000440"
  },
  {
    "text": "instead maybe we should be actually writing the graph to script descriptions and and compiling those and statically",
    "start": "4000440",
    "end": "4008640"
  },
  {
    "text": "validate them and I've got a whole body of work and a bunch of published papers on something called property models",
    "start": "4008640",
    "end": "4013910"
  },
  {
    "text": "which is exactly that which is how do you describe dependency graphs and flows between states and reason about them",
    "start": "4013910",
    "end": "4021359"
  },
  {
    "text": "outside so if anybody wants to talk on that way outside the scope of this talk but I'd be happy to and there are some",
    "start": "4021359",
    "end": "4028079"
  },
  {
    "text": "slides there for my papers and presentations and the library and what",
    "start": "4028079",
    "end": "4033480"
  },
  {
    "text": "we're talking about here largely is communicating sequential processes which is which is from Tony Hoare and his book",
    "start": "4033480",
    "end": "4039299"
  },
  {
    "text": "is now out of publication but freely available online and so that's the link to CSP so thank you and sorry for not",
    "start": "4039299",
    "end": "4049890"
  },
  {
    "text": "paying attention to the time and running over",
    "start": "4049890",
    "end": "4053420"
  }
]