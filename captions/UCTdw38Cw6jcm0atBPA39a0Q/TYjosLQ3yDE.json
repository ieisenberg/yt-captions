[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "all right welcome everyone to redux Beyond react",
    "start": "9570",
    "end": "15750"
  },
  {
    "text": "I'm pal I work for ratify and if you want to fall onto my random ramblings",
    "start": "15750",
    "end": "22110"
  },
  {
    "text": "you can follow me on Twitter but that's only recommended at the point of a conference where I'm going to be sharing the content that I've done within a talk",
    "start": "22110",
    "end": "28500"
  },
  {
    "text": "and maybe not general-purpose following of my ramblings so today I'm",
    "start": "28500",
    "end": "35070"
  },
  {
    "text": "going to be talking about redux obviously but I discovered this is I want to talk about how we can use that",
    "start": "35070",
    "end": "40280"
  },
  {
    "text": "without being tied to a specific web UI",
    "start": "40280",
    "end": "45469"
  },
  {
    "start": "45000",
    "end": "64000"
  },
  {
    "text": "so first off though I want to talk a bit about who how do we get to this point of",
    "start": "45559",
    "end": "51329"
  },
  {
    "text": "the play why are we talking about a library like redux and why are we talking about it without reactor and",
    "start": "51329",
    "end": "57510"
  },
  {
    "text": "that kind of stuff I also want to clear up a couple of misconceptions about Redux first up",
    "start": "57510",
    "end": "64378"
  },
  {
    "start": "64000",
    "end": "137000"
  },
  {
    "text": "now obviously Redux in react if you follow on in the JavaScript community are fairly closely related the reason",
    "start": "64379",
    "end": "72450"
  },
  {
    "text": "for this is that Redux really did spin out of the react community",
    "start": "72450",
    "end": "77820"
  },
  {
    "text": "it was first demoed at the react EU conference in 2015 I was I was actually",
    "start": "77820",
    "end": "84780"
  },
  {
    "text": "kind of a subset of a larger talk about time travel deeply that was the the",
    "start": "84780",
    "end": "89880"
  },
  {
    "text": "context of the talk and Redux was used as a way to represent how you can do time travel debugging I'll talk a bit",
    "start": "89880",
    "end": "95580"
  },
  {
    "text": "about that when we get in some live demos later now it's got a lot of traction with inside of the react",
    "start": "95580",
    "end": "101040"
  },
  {
    "text": "community reacts as as a librarian as a way of doing front-end web UI",
    "start": "101040",
    "end": "106070"
  },
  {
    "text": "architecture one of the main reasons that it grew in popularity was it was",
    "start": "106070",
    "end": "111270"
  },
  {
    "text": "kind of pitched as an alternative to flux which was the and kind of still is the Facebook backed way of doing data",
    "start": "111270",
    "end": "119640"
  },
  {
    "text": "management with inside of a react application so that's not know why it grew out and and had that kind of strong",
    "start": "119640",
    "end": "125939"
  },
  {
    "text": "connection to to react and why it's kind of perceived as you're doing Redux",
    "start": "125939",
    "end": "131640"
  },
  {
    "text": "you're doing it in a reactor application and I want to break that perception today but before we get into how we can",
    "start": "131640",
    "end": "138870"
  },
  {
    "text": "use Redux in other UIs I just want to talk a bit about how Redux works itself and get through to",
    "start": "138870",
    "end": "145500"
  },
  {
    "text": "the the kind of fundamentals of what Redux is so there's three core pillars to a redux",
    "start": "145500",
    "end": "152880"
  },
  {
    "start": "149000",
    "end": "163000"
  },
  {
    "text": "architecture we have actions actions flow through two reducers and this is",
    "start": "152880",
    "end": "160110"
  },
  {
    "text": "all tied then back to our store so an action this is essentially something",
    "start": "160110",
    "end": "168060"
  },
  {
    "text": "that happened with inside of our application we could think of it almost like an event an action that is",
    "start": "168060",
    "end": "176690"
  },
  {
    "text": "dispatched which is the terminology used with inside of Redux of how you trigger Redux action or how you you add one to",
    "start": "176690",
    "end": "184860"
  },
  {
    "text": "what's happening is you have to give it some kind of unique identifier we need",
    "start": "184860",
    "end": "191160"
  },
  {
    "text": "some way that we can address what type that action is and as it's going through",
    "start": "191160",
    "end": "196500"
  },
  {
    "text": "so that it can be understood when it gets to our reducer this function here",
    "start": "196500",
    "end": "202290"
  },
  {
    "text": "on the right is a very basic action creator function so the role of this",
    "start": "202290",
    "end": "207540"
  },
  {
    "text": "function is that it's going to create a new action based off of some value that's provided in and that action is",
    "start": "207540",
    "end": "212610"
  },
  {
    "text": "then provided to the dispatch method of our store so the reducer a reducers",
    "start": "212610",
    "end": "220709"
  },
  {
    "start": "217000",
    "end": "306000"
  },
  {
    "text": "listening to actions that are getting dispatched with inside of our store going to do something with them it",
    "start": "220709",
    "end": "226890"
  },
  {
    "text": "receives the current state of the application so what has happened to this point in time what does the data look",
    "start": "226890",
    "end": "231900"
  },
  {
    "text": "like with inside of the the react application that we're building this",
    "start": "231900",
    "end": "237480"
  },
  {
    "text": "with it gets the action that was dispatched against the store takes these",
    "start": "237480",
    "end": "243180"
  },
  {
    "text": "two together and combines them to produce new application state now the",
    "start": "243180",
    "end": "248700"
  },
  {
    "text": "point here is that this is a pure function so it's received everything that it needs to receive to make",
    "start": "248700",
    "end": "255030"
  },
  {
    "text": "decisions on what it's going to do next now it's it's receiving the action and it's using the type of that action to",
    "start": "255030",
    "end": "260400"
  },
  {
    "text": "determine whether it can do something it's a receiving current state to work out whether or not it can to change what",
    "start": "260400",
    "end": "266340"
  },
  {
    "text": "the current state looks like to produce new State and that's what's returned because this is a pure function it makes",
    "start": "266340",
    "end": "271830"
  },
  {
    "text": "it very easy to create tests around we can have our call logic of our application or of our data lifecycle is",
    "start": "271830",
    "end": "278430"
  },
  {
    "text": "very easy to test and this is a reducer function we see",
    "start": "278430",
    "end": "284160"
  },
  {
    "text": "it's got two arguments action state in action we're doing some kind of check to see can this reducer actually handle the",
    "start": "284160",
    "end": "290490"
  },
  {
    "text": "action that's been provided to it yeah yeah this one in this case it's looking it can handle only a single type which",
    "start": "290490",
    "end": "297720"
  },
  {
    "text": "is the type echo and if it receives that it's just going to create new state which is the value that got passed in I",
    "start": "297720",
    "end": "302850"
  },
  {
    "text": "think back from our action creator the",
    "start": "302850",
    "end": "307980"
  },
  {
    "start": "306000",
    "end": "457000"
  },
  {
    "text": "final piece is our store this is really the most important part of our react or",
    "start": "307980",
    "end": "315330"
  },
  {
    "text": "have Redux architecture it's where all data flows around it's also the only",
    "start": "315330",
    "end": "321630"
  },
  {
    "text": "place where state truly lives it's the only one that's able to modify state so",
    "start": "321630",
    "end": "326730"
  },
  {
    "text": "I mean it's the only one that's able to say this is the current state of the data that is in the side of your application it's also the one that's",
    "start": "326730",
    "end": "335010"
  },
  {
    "text": "responsible of taking the action and then giving that across to the reducers so if you've got multiple reducers inside of your application it'll work",
    "start": "335010",
    "end": "342389"
  },
  {
    "text": "out which ones that to pass that action across to and then they can do their own",
    "start": "342389",
    "end": "347400"
  },
  {
    "text": "logic in and of themselves it's also responsible for handling middleware so",
    "start": "347400",
    "end": "352500"
  },
  {
    "text": "if we want to do something that can intercept an action before it's passed to a reducer it can be it can apply",
    "start": "352500",
    "end": "360539"
  },
  {
    "text": "those middleware steps in a very similar way that the middleware works in like an asp net core pipeline or a known",
    "start": "360539",
    "end": "367110"
  },
  {
    "text": "pipeline for asp net full framework and middleware is obviously a very common",
    "start": "367110",
    "end": "372120"
  },
  {
    "text": "concept across quite a number of web your web server frameworks the final",
    "start": "372120",
    "end": "379680"
  },
  {
    "text": "thing that the store does is it notifies anyone that's interested that data has changed when data changes happen because",
    "start": "379680",
    "end": "387120"
  },
  {
    "text": "it because it's the only one that actually owns data it's the only one that has any kind of mutability to its data it's the one that's responsible to",
    "start": "387120",
    "end": "393180"
  },
  {
    "text": "say hey web UI data has changed you want to do something with that data the new",
    "start": "393180",
    "end": "398430"
  },
  {
    "text": "data or tell some kind of back-end system that your data is changing and",
    "start": "398430",
    "end": "403950"
  },
  {
    "text": "you need to persist something or whatever it might be so this is how we",
    "start": "403950",
    "end": "409470"
  },
  {
    "text": "kind of connect all of this together we create a store for the function that redux gives us",
    "start": "409470",
    "end": "415220"
  },
  {
    "text": "keep saying react instead of relaxers I use them so commonly together and it's gonna be really annoying for anyone",
    "start": "415220",
    "end": "421100"
  },
  {
    "text": "that's like but it's not related to react so I apologize for that so from Redux we get a create store",
    "start": "421100",
    "end": "428330"
  },
  {
    "text": "function we we pass it the reducer or the reducers that we're using with inside of our application",
    "start": "428330",
    "end": "434600"
  },
  {
    "text": "the second argument I'm passing to that is initial state so initially the state of the application is an empty string",
    "start": "434600",
    "end": "440120"
  },
  {
    "text": "and then subscribing to any changes to the data straight after that and if",
    "start": "440120",
    "end": "446150"
  },
  {
    "text": "something changes I'm just doing console dot log of the current state of the saw and then finally dispatching an action",
    "start": "446150",
    "end": "452030"
  },
  {
    "text": "against that using the action crater we created two slides back so there are",
    "start": "452030",
    "end": "458960"
  },
  {
    "start": "457000",
    "end": "719000"
  },
  {
    "text": "some interesting quirks about the way of Redux works as I said actions need to have some kind of a type so that we can",
    "start": "458960",
    "end": "464900"
  },
  {
    "text": "identify them now this is a JavaScript library so we haven't been of a problem",
    "start": "464900",
    "end": "470330"
  },
  {
    "text": "with that because well JavaScript is a very loosely typed language and there was until the introduction of classes",
    "start": "470330",
    "end": "476720"
  },
  {
    "text": "but they're not particularly prevalent so we still trenders a very loosely typed language where it's no slightly",
    "start": "476720",
    "end": "481790"
  },
  {
    "text": "less loosely typed these days so inside of JavaScript application we would do a",
    "start": "481790",
    "end": "489410"
  },
  {
    "text": "property of the object that's being passed in and that probably would be called type and that's what we then you",
    "start": "489410",
    "end": "495620"
  },
  {
    "text": "know users that identify what type this action is now as I said reducers can't",
    "start": "495620",
    "end": "502910"
  },
  {
    "text": "change the state that they're given all they can do is produce new state based off of the information they receive",
    "start": "502910",
    "end": "509180"
  },
  {
    "text": "which is the current state and the action that was dispatched so this can",
    "start": "509180",
    "end": "515089"
  },
  {
    "text": "be a little bit of a challenge in JavaScript because everything is then passed by ref so we can actually mutate",
    "start": "515089",
    "end": "520640"
  },
  {
    "text": "the state object that's been passed in but if we do that well we are in a situation where we can't guarantee that",
    "start": "520640",
    "end": "527360"
  },
  {
    "text": "we have consistency as actions are dispatcher if a reducer has actually changed the previous object well others",
    "start": "527360",
    "end": "533360"
  },
  {
    "text": "aren't going to know about that so typically what we would do is we would do something like object assign in",
    "start": "533360",
    "end": "538550"
  },
  {
    "text": "JavaScript to create a new object based off of the current state object and then",
    "start": "538550",
    "end": "544339"
  },
  {
    "text": "send any properties on that with the third argument and if you've seen a sign basically it takes a bunch of",
    "start": "544339",
    "end": "551220"
  },
  {
    "text": "argument and smashes them left to right so we build up and replace properties as",
    "start": "551220",
    "end": "557640"
  },
  {
    "text": "we go along the other thing and if you're using a transpiler like all the cool kids are with babel and web pack",
    "start": "557640",
    "end": "563550"
  },
  {
    "text": "and about 30 Meg's of node modules you probably you see something like the spread operator and dokdo dokdo we dot",
    "start": "563550",
    "end": "570630"
  },
  {
    "text": "the dot on the current state and then set any additional properties and replace properties of the current state and the other option you can go with is",
    "start": "570630",
    "end": "578190"
  },
  {
    "text": "something like the immutable j/s library which is another one that has come out of facebook which creates a purely it's",
    "start": "578190",
    "end": "585090"
  },
  {
    "text": "really a mutable object with inside of JavaScript that you can anytime you try and change values that actually creates",
    "start": "585090",
    "end": "590910"
  },
  {
    "text": "an entire new object and stuff like that but there's that introduces other",
    "start": "590910",
    "end": "596400"
  },
  {
    "text": "complexities into the way the application works a reducer can also not",
    "start": "596400",
    "end": "601530"
  },
  {
    "text": "return undefined now I'm going to assume that most people here are familiar",
    "start": "601530",
    "end": "607680"
  },
  {
    "text": "enough with JavaScript to know is it undefined can cause all sorts of problems with inside of our application",
    "start": "607680",
    "end": "612810"
  },
  {
    "text": "and really do you ever want the data state of your application to be undefined",
    "start": "612810",
    "end": "617820"
  },
  {
    "text": "and what's that representing about your application what's happened in your application where all the data about your application is there's like no idea",
    "start": "617820",
    "end": "626340"
  },
  {
    "text": "what it means but you so essentially you can't return undefined from a reducer Redux will",
    "start": "626340",
    "end": "631980"
  },
  {
    "text": "actually stop you from doing that similarly you can't return null and",
    "start": "631980",
    "end": "637790"
  },
  {
    "text": "everything that we send to a store every action that we dispatch has to be",
    "start": "637790",
    "end": "643350"
  },
  {
    "text": "synchronous now in JavaScript this couldn't introduce another bunch of problems because we do a lot of",
    "start": "643350",
    "end": "649080"
  },
  {
    "text": "asynchronous operations any time we talk to a server and we're using fetch or we're using xhr those are asynchronous",
    "start": "649080",
    "end": "656190"
  },
  {
    "text": "operations well how do we do with that if we have to make everything synchronous well in the example of doing",
    "start": "656190",
    "end": "662790"
  },
  {
    "text": "a cervical either that with fetch or with an xhr we can decompose that as a",
    "start": "662790",
    "end": "668790"
  },
  {
    "text": "couple of different actions so we start and a gesture and then that Ajax call",
    "start": "668790",
    "end": "675480"
  },
  {
    "text": "completes either successfully or unsuccessfully so it's really two actions and we can then do different things based off of whether we started",
    "start": "675480",
    "end": "681990"
  },
  {
    "text": "an ajax call load a spin at the shower spin up a Jess school is completed remove the spinner",
    "start": "681990",
    "end": "688070"
  },
  {
    "text": "now you might be thinking that you've heard this before now it's not a eunuch",
    "start": "688070",
    "end": "693270"
  },
  {
    "text": "system it's an event store we're essentially probably about veg sorting here you guys",
    "start": "693270",
    "end": "699740"
  },
  {
    "text": "well done JavaScript community you have invented something that we've already been doing and you think you're cool",
    "start": "699740",
    "end": "706320"
  },
  {
    "text": "because you gave it a funky new name and it's got the letter X in it which means it's extreme and all that kind of stuff but yeah the JavaScript community loves",
    "start": "706320",
    "end": "712500"
  },
  {
    "text": "to reinvent things that have already been invented so Bravo JavaScript community brother okay so the whole",
    "start": "712500",
    "end": "722370"
  },
  {
    "start": "719000",
    "end": "917000"
  },
  {
    "text": "point of this talk is not to talk about react so what happens if we want to use Redux",
    "start": "722370",
    "end": "727800"
  },
  {
    "text": "with that react we want to go beyond react well what if we want to use Redux",
    "start": "727800",
    "end": "733410"
  },
  {
    "text": "in a non web scenario and jump over to a",
    "start": "733410",
    "end": "739950"
  },
  {
    "text": "demo and realize that that's not a great",
    "start": "739950",
    "end": "745680"
  },
  {
    "text": "resolution but we might have to accept that and carry on touch more okay so",
    "start": "745680",
    "end": "756780"
  },
  {
    "text": "this is almost a simple a way of using redux as I could come up with about 20",
    "start": "756780",
    "end": "765060"
  },
  {
    "text": "minutes ago yeah I'm not kidding I wrote this earlier today so what I have is an",
    "start": "765060",
    "end": "771750"
  },
  {
    "text": "application that has no UI at the very top I'm grabbing the crate store and",
    "start": "771750",
    "end": "777570"
  },
  {
    "text": "apply middlewares functions off Redux I'm making an action creative function",
    "start": "777570",
    "end": "782940"
  },
  {
    "text": "that has a type of Inc increment and then we pass in a value that becomes a",
    "start": "782940",
    "end": "788310"
  },
  {
    "text": "property called payload we have a reducer that has a state and action",
    "start": "788310",
    "end": "793470"
  },
  {
    "text": "provided to it so some initial state with count of 0 if the type is Inc then it will be able to use the spread",
    "start": "793470",
    "end": "800430"
  },
  {
    "text": "operator whoops use the spread operator to take the",
    "start": "800430",
    "end": "806160"
  },
  {
    "text": "current state and then just replace the count property on it now I don't have any other properties of that but if I",
    "start": "806160",
    "end": "812400"
  },
  {
    "text": "did have a more complex object then would only override the count property I've also created some middleware here",
    "start": "812400",
    "end": "818900"
  },
  {
    "text": "this is just a logging middleware that intercepts the action as it's being dispatched it will start a console group",
    "start": "818900",
    "end": "825860"
  },
  {
    "text": "put some information in that and then in that group so we can do some inspection",
    "start": "825860",
    "end": "830930"
  },
  {
    "text": "of every single actions being done we create the store subscribe and then just using a set timeout to recursively",
    "start": "830930",
    "end": "836000"
  },
  {
    "text": "invoke this so if we have a look at how that works or how that looks in the",
    "start": "836000",
    "end": "842180"
  },
  {
    "text": "console my console a little bit bigger we'll run that and I'm realized that I",
    "start": "842180",
    "end": "849590"
  },
  {
    "text": "disconnected my network so it's not actually going to run which is a problem so just bear with me while we reconnect",
    "start": "849590",
    "end": "856940"
  },
  {
    "text": "the network and talking about yourselves people this is not too big a problem",
    "start": "856940",
    "end": "862690"
  },
  {
    "text": "normally I keep my network off for conference talks because the last thing I want is a notification to pop in",
    "start": "862690",
    "end": "867950"
  },
  {
    "text": "because someone is probably on Twitter and sending me messages or something like that and not looking anyone in",
    "start": "867950",
    "end": "873560"
  },
  {
    "text": "particular in the audience like my colleagues okay cool so we're about connected to the Internet",
    "start": "873560",
    "end": "879050"
  },
  {
    "text": "all right so there we go well so we don't actually have a UI well I mean we",
    "start": "879050",
    "end": "884570"
  },
  {
    "text": "technically do because we're looking at to the console but this is like this is Redux in a nutshell it's actions are",
    "start": "884570",
    "end": "892490"
  },
  {
    "text": "being dispatched reduces about votes subscribers are listening to that middle",
    "start": "892490",
    "end": "898310"
  },
  {
    "text": "words being applied and all this is continuously going along in the background and it's doing something nothing particularly important with this",
    "start": "898310",
    "end": "904520"
  },
  {
    "text": "example but it's still doing something for us so that's like that's the crux of Redux then and how it can be done",
    "start": "904520",
    "end": "911000"
  },
  {
    "text": "without any sort of UI reload that stops that running in the background okay stop",
    "start": "911000",
    "end": "919610"
  },
  {
    "start": "917000",
    "end": "1307000"
  },
  {
    "text": "back to our slides all right so as a non web scenario of how we could use react so I used web because I probably could",
    "start": "919610",
    "end": "927590"
  },
  {
    "text": "have done that in node if I want to do a bit whatever so when we're looking at it reacts without using react now there's a",
    "start": "927590",
    "end": "935630"
  },
  {
    "text": "lot of different web UI frameworks that people are using these days angular one or angular seven I think it is now I",
    "start": "935630",
    "end": "942320"
  },
  {
    "text": "don't know the version numbers of angular is too hard to keep up with backbone polymer the other ones that are",
    "start": "942320",
    "end": "949250"
  },
  {
    "text": "now kind of niche where it's kind of really like angular and react seem to be the the ones that are sort of winning at",
    "start": "949250",
    "end": "955339"
  },
  {
    "text": "the moment this node modules that you can there's NPM packages that you can download that you can add to your",
    "start": "955339",
    "end": "961069"
  },
  {
    "text": "application to essentially apply this with with angular what it does is it replaces the way that you would use the",
    "start": "961069",
    "end": "968529"
  },
  {
    "text": "the controller hours or the dolls scope injectable objects and you instead of",
    "start": "968529",
    "end": "974569"
  },
  {
    "text": "you inject a Redux store and that's what you subscribe to and you dispatch actions against instead it can be also",
    "start": "974569",
    "end": "983660"
  },
  {
    "text": "used with less popular web UI frameworks and I'm going to jump back over to a",
    "start": "983660",
    "end": "989000"
  },
  {
    "text": "demo of how we can combine this with a less popular web UI framework so I'm",
    "start": "989000",
    "end": "994730"
  },
  {
    "text": "going to be using knockout apologies to anyone in the audience that is still using knockout and that I'm just like",
    "start": "994730",
    "end": "1000009"
  },
  {
    "text": "ragging all over it I'm it was popular awhile ago in my",
    "start": "1000009",
    "end": "1005319"
  },
  {
    "text": "opinion but I wanted to show how like how you how easy it is to kind of",
    "start": "1005319",
    "end": "1011230"
  },
  {
    "text": "shoehorn this into a basic application architecture so you can see that it's",
    "start": "1011230",
    "end": "1016559"
  },
  {
    "text": "it's not that different an idea or complex an idea so here's how our",
    "start": "1016559",
    "end": "1022180"
  },
  {
    "text": "increment and all that kind of stuff at the very top on lines 21 and 22",
    "start": "1022180",
    "end": "1029650"
  },
  {
    "text": "that's my knockout code so I've got a data binding the text of the span is",
    "start": "1029650",
    "end": "1035319"
  },
  {
    "text": "going to be the number of clicks that have happened it's a click handle that I registering",
    "start": "1035319",
    "end": "1040959"
  },
  {
    "text": "on the button that every time you click that it's going to dispatch a new action so so the action reducer that's all",
    "start": "1040959",
    "end": "1047380"
  },
  {
    "text": "created they're creating the store is down here on line 46 now I don't want my",
    "start": "1047380",
    "end": "1056740"
  },
  {
    "text": "not my knockout view model to explicitly be tied to reiax I don't want it to know",
    "start": "1056740",
    "end": "1062350"
  },
  {
    "text": "that that exists so the way that you would do this and this is using some",
    "start": "1062350",
    "end": "1067570"
  },
  {
    "text": "terminology that is very common when working with it with react is that we have two functions not state two props",
    "start": "1067570",
    "end": "1075669"
  },
  {
    "text": "or really this should be probably renamed state two observable so that's state of the current store two",
    "start": "1075669",
    "end": "1081460"
  },
  {
    "text": "observable properties view model and dispatch to props so this",
    "start": "1081460",
    "end": "1086950"
  },
  {
    "text": "will wrap around the dispatch call against the store and then turn those into just normal functions that can be",
    "start": "1086950",
    "end": "1093669"
  },
  {
    "text": "invoked from our view model now just open up the view model and have a look",
    "start": "1093669",
    "end": "1098770"
  },
  {
    "text": "at how that looks there's kind of no signs that this is doing anything with",
    "start": "1098770",
    "end": "1105539"
  },
  {
    "text": "redux in here really the view model takes some properties when it's initially created it has some observables on it the register click",
    "start": "1105539",
    "end": "1113710"
  },
  {
    "text": "function is just a function that can be invoked that uses the property prop stock click function that's passed in so",
    "start": "1113710",
    "end": "1119590"
  },
  {
    "text": "this is now something it's a view model it's very testable it's not tied to a whole bunch of external dependencies",
    "start": "1119590",
    "end": "1125470"
  },
  {
    "text": "it's just tied to something that's being passed in so we can easily knock that out and when looking at this from maybe",
    "start": "1125470",
    "end": "1130720"
  },
  {
    "text": "an angular perspective you see a lot of that same sort of overlap now the final",
    "start": "1130720",
    "end": "1139809"
  },
  {
    "text": "thing that I've got with inside of this script block is not going to apply bindings to set the set the view model",
    "start": "1139809",
    "end": "1146470"
  },
  {
    "text": "onto the UI and is just apply into the body I've created a connector function",
    "start": "1146470",
    "end": "1153460"
  },
  {
    "text": "which will connect the store that I've got copy the code that connects the",
    "start": "1153460",
    "end": "1161650"
  },
  {
    "text": "store that I've got I created a few lines up using a couple map the map",
    "start": "1161650",
    "end": "1167080"
  },
  {
    "text": "functions that state two props and/or say two observables and dispatch two observables or just about two props to a",
    "start": "1167080",
    "end": "1172960"
  },
  {
    "text": "particular implementation of the view model or a particular view model in this case if we just open up that have a look",
    "start": "1172960",
    "end": "1179980"
  },
  {
    "text": "at how it works so the connect function is it receives the store etc etc what it",
    "start": "1179980",
    "end": "1186490"
  },
  {
    "text": "does is it gets the state of the application from the store so when you initially do the bind I passes that",
    "start": "1186490",
    "end": "1193539"
  },
  {
    "text": "through state two props it passes that through dispatch two props it then sets",
    "start": "1193539",
    "end": "1198580"
  },
  {
    "text": "up a subscribe on the store and then finally it creates an in sorry it",
    "start": "1198580",
    "end": "1204370"
  },
  {
    "text": "creates an instance of the view model passes through the mapping of state two props in dispatch two props so that's",
    "start": "1204370",
    "end": "1209950"
  },
  {
    "text": "how we get that kind of constructor argument passed to knock out and then we subscribe to the store",
    "start": "1209950",
    "end": "1216070"
  },
  {
    "text": "anytime the subscribe is fired so every time an action completes and the reducer",
    "start": "1216070",
    "end": "1221799"
  },
  {
    "text": "does its thing we then get all the properties back out of the view model we get all the state back out of the store",
    "start": "1221799",
    "end": "1228070"
  },
  {
    "text": "we then pass it through state two props and dispatch the props again and then we",
    "start": "1228070",
    "end": "1233229"
  },
  {
    "text": "find all the observables and set those back onto the view model with the new",
    "start": "1233229",
    "end": "1238809"
  },
  {
    "text": "values that we've got by doing this SUBSCRIBE call so what happens there so",
    "start": "1238809",
    "end": "1244029"
  },
  {
    "text": "that's fairly condensed in under the hood this is what pretty much all of the bindings that you'll find for whatever",
    "start": "1244029",
    "end": "1250419"
  },
  {
    "text": "web UI framework you're working with they work this way essentially just subscribing and taking away that",
    "start": "1250419",
    "end": "1257129"
  },
  {
    "text": "unpacking what's in current state of the store and then somehow setting that on values that you've got with inside of",
    "start": "1257129",
    "end": "1262960"
  },
  {
    "text": "the components that you're connected to so we come over to the browser we have a",
    "start": "1262960",
    "end": "1270099"
  },
  {
    "text": "look at how that works rocket science demos here where we click",
    "start": "1270099",
    "end": "1275499"
  },
  {
    "text": "buttons and counters increment I don't have any console logging middleware or",
    "start": "1275499",
    "end": "1280749"
  },
  {
    "text": "anything like that so you kind of just have to take my word that's happening but essentially yeah every time we click",
    "start": "1280749",
    "end": "1286149"
  },
  {
    "text": "then that's going through all of that subscribe method call and all that kind",
    "start": "1286149",
    "end": "1291519"
  },
  {
    "text": "of stuff so that's how simple it is to connect to any kind of web UI framework that you might be using all right and",
    "start": "1291519",
    "end": "1302649"
  },
  {
    "text": "back to our slides",
    "start": "1302649",
    "end": "1306539"
  },
  {
    "start": "1307000",
    "end": "1694000"
  },
  {
    "text": "okay so Redux is pretty simple there's only really a small number of concepts",
    "start": "1309170",
    "end": "1316340"
  },
  {
    "text": "that you need to understand know how Redux works and that's it if you've been doing server-side development you're probably familiar or probably come",
    "start": "1316340",
    "end": "1323270"
  },
  {
    "text": "across the idea of events tours and stuff like that so it's not that different from that as a concept being",
    "start": "1323270",
    "end": "1330620"
  },
  {
    "text": "able to introduce it to an hour-and application again is not that not that complex you've probably been doing",
    "start": "1330620",
    "end": "1336740"
  },
  {
    "text": "something similar in most applications anyway the main difference that Redux is",
    "start": "1336740",
    "end": "1341780"
  },
  {
    "text": "brings in is the idea of data is only mutable in one location rather than multiple locations which is particularly",
    "start": "1341780",
    "end": "1348560"
  },
  {
    "text": "angular applications that's kind of every controller has its own scope that works with data it's really more about",
    "start": "1348560",
    "end": "1357170"
  },
  {
    "text": "how does everything talk to redux how does my knockout view model talk to",
    "start": "1357170",
    "end": "1364700"
  },
  {
    "text": "redux or how does you know a set timeout dispatch actions and stuff like that",
    "start": "1364700",
    "end": "1369980"
  },
  {
    "text": "that's that's the differences that you find between different frameworks again",
    "start": "1369980",
    "end": "1375170"
  },
  {
    "text": "it still comes back to the the core idea of being able to call stored up dispatch but how you get that dispatch method you",
    "start": "1375170",
    "end": "1380690"
  },
  {
    "text": "know that changes it depending on how you're working with it also the core of",
    "start": "1380690",
    "end": "1386990"
  },
  {
    "text": "redux itself is actually really quite simplistic it's quite nice code and easy",
    "start": "1386990",
    "end": "1393320"
  },
  {
    "text": "to go through and when I first got into to Redux oh I really want to understand",
    "start": "1393320",
    "end": "1399050"
  },
  {
    "text": "how it worked under the hood so I decided to create a library called redox",
    "start": "1399050",
    "end": "1405160"
  },
  {
    "text": "pause for drew the naming of this moves on because it's",
    "start": "1405160",
    "end": "1411050"
  },
  {
    "text": "not getting the kind of humor that I was hoping for I just want to talk about how",
    "start": "1411050",
    "end": "1416360"
  },
  {
    "text": "it works internally then Wow so that we can get an idea of how this can be used in in other scenarios so I",
    "start": "1416360",
    "end": "1425170"
  },
  {
    "text": "have a little application here that I can run of redux demo there's minimal",
    "start": "1425170",
    "end": "1433730"
  },
  {
    "text": "cracking involved in this so don't worry and when I was going through building",
    "start": "1433730",
    "end": "1439510"
  },
  {
    "text": "this oh well what what is what is the most complex application I can build",
    "start": "1439510",
    "end": "1445410"
  },
  {
    "text": "from a command line there could be useful for people to understand so I build a to-do list",
    "start": "1445410",
    "end": "1450430"
  },
  {
    "text": "no one's done that one before good a to-do list using redux again no one's",
    "start": "1450430",
    "end": "1455770"
  },
  {
    "text": "done that before so this is this is just a replica it's got a UI it just happens",
    "start": "1455770",
    "end": "1462670"
  },
  {
    "text": "to be a console UI it's not a web UI so I can interact with this and say write a talk or at least I probably should have",
    "start": "1462670",
    "end": "1468610"
  },
  {
    "text": "done that one before right now we're going to add another to do of be awesome and then a final tale to do of Haeckel",
    "start": "1468610",
    "end": "1476700"
  },
  {
    "text": "richard so i could go up and mark off a",
    "start": "1476700",
    "end": "1485500"
  },
  {
    "text": "couple of things things is completed I still haven't read my talk so I'll leave that one is I'm done I could change the",
    "start": "1485500",
    "end": "1490780"
  },
  {
    "text": "visibility now all these are actions that I'm dispatching against my store and especially in action to mark",
    "start": "1490780",
    "end": "1496660"
  },
  {
    "text": "something is completed that's just a it flows through redux deserve is pipeline",
    "start": "1496660",
    "end": "1503020"
  },
  {
    "text": "that goes to a reduces the reduce it goes well this object is now complete so I'm gonna set that and then update the state to be all of that so it's too",
    "start": "1503020",
    "end": "1513280"
  },
  {
    "text": "simple really but there's this is all done from a server-side application",
    "start": "1513280",
    "end": "1521280"
  },
  {
    "text": "definitely well it's not really browser client side so how does that then look",
    "start": "1521280",
    "end": "1527950"
  },
  {
    "text": "internally if I find the right Visual Studio code instance this is kind of the",
    "start": "1527950",
    "end": "1534070"
  },
  {
    "text": "crux of what Redux is it's for",
    "start": "1534070",
    "end": "1540400"
  },
  {
    "text": "JavaScript files and in index J s I've I think the actual implementation on",
    "start": "1540400",
    "end": "1547120"
  },
  {
    "text": "github combines these all into one file or I think it's only two files maybe but I broke this out because I was writing a",
    "start": "1547120",
    "end": "1553090"
  },
  {
    "text": "blog series just to try and understand how it worked internally because we were in the process of teaching a bunch of new developers to developers new to",
    "start": "1553090",
    "end": "1560260"
  },
  {
    "text": "front-end programming and react and redux we're teaching them how that you go through it so did all the building",
    "start": "1560260",
    "end": "1566380"
  },
  {
    "text": "blocks of this is this is how you create the store this is what it's in doing internally so on and so forth",
    "start": "1566380",
    "end": "1572580"
  },
  {
    "text": "so we have a function create store which takes a couple of arguments internally in here we have a subscribe function",
    "start": "1572580",
    "end": "1580270"
  },
  {
    "text": "which is basically just waiting until is",
    "start": "1580270",
    "end": "1585400"
  },
  {
    "text": "adding things into a ray that we're going to iterate through later we have a",
    "start": "1585400",
    "end": "1590530"
  },
  {
    "text": "dispatch function that does a bunch of our type checking so make sure that you have a type property on your action",
    "start": "1590530",
    "end": "1596620"
  },
  {
    "text": "because we need to be able to identify it somehow throws an error otherwise we then invoke the reducers with this the",
    "start": "1596620",
    "end": "1603940"
  },
  {
    "text": "current state of the application and the action that was dispatched will you go through the list of subscribers invoke",
    "start": "1603940",
    "end": "1609850"
  },
  {
    "text": "each of them and then return we have the ability of a true state and so on and so",
    "start": "1609850",
    "end": "1615760"
  },
  {
    "text": "forth in a nutshell that is redux it is a tote like taking middleware aside",
    "start": "1615760",
    "end": "1622830"
  },
  {
    "text": "Redux is 70 lines of code with some",
    "start": "1622830",
    "end": "1627910"
  },
  {
    "text": "white space but it's it's not that difficult internally and then the way",
    "start": "1627910",
    "end": "1634060"
  },
  {
    "text": "that you would say combine this to a console application is I've just got a",
    "start": "1634060",
    "end": "1642880"
  },
  {
    "text": "wrapper function to start with that uses either the the actual implementation of",
    "start": "1642880",
    "end": "1648610"
  },
  {
    "text": "redux or my implementation of redux and it gets really confusing when I keep saying redux and redux because they're two different things and you notice the",
    "start": "1648610",
    "end": "1655030"
  },
  {
    "text": "inflection you can work out which one I'm talking about we subscribe to a",
    "start": "1655030",
    "end": "1661570"
  },
  {
    "text": "store and then we update the command prompt based off the store change the",
    "start": "1661570",
    "end": "1666760"
  },
  {
    "text": "state change yeah it's still running to some kind of a UI which do we know is some kind of UI change based off of",
    "start": "1666760",
    "end": "1672730"
  },
  {
    "text": "what's happening it just so happens that this UI is a console application UI you",
    "start": "1672730",
    "end": "1680290"
  },
  {
    "text": "can quite easily drop that into any kind of sort of server side application that needs some kind of State",
    "start": "1680290",
    "end": "1686790"
  },
  {
    "start": "1694000",
    "end": "1711000"
  },
  {
    "text": "okay so observable stores another thing",
    "start": "1696210",
    "end": "1701610"
  },
  {
    "text": "that a lot of people don't even realize it and it I didn't realize this for a long time is that Redux stores are",
    "start": "1701610",
    "end": "1708470"
  },
  {
    "text": "observable objects so what do I mean by observable objects we'll be talking",
    "start": "1708470",
    "end": "1714389"
  },
  {
    "start": "1711000",
    "end": "1866000"
  },
  {
    "text": "about redux well under the hood they implement this primitive in JavaScript",
    "start": "1714389",
    "end": "1721139"
  },
  {
    "text": "called system dot observable which basically allows you to create an observable stream so you can create a",
    "start": "1721139",
    "end": "1728159"
  },
  {
    "text": "stream of your store that you're going to listen to and perform operations against based off of what's happening",
    "start": "1728159",
    "end": "1735210"
  },
  {
    "text": "inside of your store has anyone played with the RX framework cool cool enjoy",
    "start": "1735210",
    "end": "1743940"
  },
  {
    "text": "our excellent cool a number of people have played with with our EXO you might be familiar with the concept of an",
    "start": "1743940",
    "end": "1749820"
  },
  {
    "text": "observable from rx there's a JavaScript implementation that Java implementations",
    "start": "1749820",
    "end": "1755039"
  },
  {
    "text": "it's done implementations there's bindings for different web UIs their angular being one of them stuff like",
    "start": "1755039",
    "end": "1760769"
  },
  {
    "text": "that but still at their core they're observables that implement this primitive type system not observable so",
    "start": "1760769",
    "end": "1767879"
  },
  {
    "text": "what you can do from that is sorry one of the advantages that you can do with observables is you can combine multiples",
    "start": "1767879",
    "end": "1774179"
  },
  {
    "text": "together to create a single observable stream of multiple different data sources so if you're already using",
    "start": "1774179",
    "end": "1780419"
  },
  {
    "text": "something like rx inside of your application to observe particular set of data streams you can also then create",
    "start": "1780419",
    "end": "1787110"
  },
  {
    "text": "our Redux store turn that into an observable object and just add that as another data source to your rx stream",
    "start": "1787110",
    "end": "1794869"
  },
  {
    "text": "and other cool things you can start doing with rx is you can do conditional subscriptions so we haven't seen any of",
    "start": "1794869",
    "end": "1802559"
  },
  {
    "text": "the demos so far but let's say that I wanted to subscribe and only do updates",
    "start": "1802559",
    "end": "1807809"
  },
  {
    "text": "based off of like I wanted to update part of UI based off of a particular",
    "start": "1807809",
    "end": "1813059"
  },
  {
    "text": "branch of my application State well every single time the subscription",
    "start": "1813059",
    "end": "1818519"
  },
  {
    "text": "function is invoked I'm gonna have to you know can i oh I need to do this yes",
    "start": "1818519",
    "end": "1824190"
  },
  {
    "text": "or no based off of there and if I've got a deep state object I might need to walk a bunch of stuff so it could be",
    "start": "1824190",
    "end": "1829980"
  },
  {
    "text": "could essentially make our subscription function a little bit more complex or a little bit more tedious than I would actually need it to be so conditional",
    "start": "1829980",
    "end": "1836730"
  },
  {
    "text": "subscriptions inside of our X means that I can just I can observe the stream but I can you know slice out parts of the",
    "start": "1836730",
    "end": "1841890"
  },
  {
    "text": "stream and and drop no further down the chain based off of things that are happening and things that I'm not",
    "start": "1841890",
    "end": "1847950"
  },
  {
    "text": "interested in so essentially it Maps the current stall state to some kind of a",
    "start": "1847950",
    "end": "1854760"
  },
  {
    "text": "stream and that I can perform operations against and as I said you can combine streams together and despite what",
    "start": "1854760",
    "end": "1863429"
  },
  {
    "text": "Ghostbuster said it's perfectly fine quiet crowd today is this thing on all",
    "start": "1863429",
    "end": "1872100"
  },
  {
    "start": "1872000",
    "end": "2095000"
  },
  {
    "text": "right so another code demo or another demo so I've created a application here",
    "start": "1872100",
    "end": "1882380"
  },
  {
    "text": "it's a clock though the clock face itself is written to by rx the time",
    "start": "1882380",
    "end": "1891330"
  },
  {
    "text": "below that in the bit of text which touch difficult to see that is done",
    "start": "1891330",
    "end": "1897150"
  },
  {
    "text": "based off of observing the store itself subscribe so let's just start that okay",
    "start": "1897150",
    "end": "1904799"
  },
  {
    "text": "so we set the current time and then you say that the the ticks happening you have 53 55 56 seconds so on and so",
    "start": "1904799",
    "end": "1913290"
  },
  {
    "text": "forth and then the minute hands moved so that's that's all happening quite nicely",
    "start": "1913290",
    "end": "1919970"
  },
  {
    "text": "I'll come back to what's on the right panel just a moment I'm gonna go through some of the code here all right so we've",
    "start": "1919970",
    "end": "1928679"
  },
  {
    "text": "got a reducer I've got a couple of different actions one which is called set up which determines whether or not I need to draw the clock face just for",
    "start": "1928679",
    "end": "1936210"
  },
  {
    "text": "reasons if the so if the action type is set up I set a property of draw clock to",
    "start": "1936210",
    "end": "1942120"
  },
  {
    "text": "true if the type of the action that was dispatched is time then we're going to set draw clock defaults cuz I don't need",
    "start": "1942120",
    "end": "1948059"
  },
  {
    "text": "to keep drawing clock faces I understand what the previous time the the previous",
    "start": "1948059",
    "end": "1953760"
  },
  {
    "text": "time observed was the current States now value and now is the action value that",
    "start": "1953760",
    "end": "1959970"
  },
  {
    "text": "was passed in and then I return new state based off of that stuff that's happened I create the",
    "start": "1959970",
    "end": "1966870"
  },
  {
    "text": "store down here I subscribe to it against state if there's a now value on",
    "start": "1966870",
    "end": "1972480"
  },
  {
    "text": "the state then I'm just going to write that out to the time tag using moment just to get some pretty formatting but",
    "start": "1972480",
    "end": "1978240"
  },
  {
    "text": "then we start getting our observable stuff here on line 62 through Eric's not",
    "start": "1978240",
    "end": "1984210"
  },
  {
    "text": "observable from so I'm giving it an object that I'm assuming as implementing systems I'll reserve all this will grant",
    "start": "1984210",
    "end": "1992340"
  },
  {
    "text": "me an observable stream I can then start doing things like filter on the stream so on line 64 I want to I want to only",
    "start": "1992340",
    "end": "2001040"
  },
  {
    "text": "draw the clock face if the state draw clock is set to true so I can put a",
    "start": "2001040",
    "end": "2006470"
  },
  {
    "text": "filter in that before I do the subscription to the to the stream so",
    "start": "2006470",
    "end": "2011630"
  },
  {
    "text": "that means that every second I'm firing off this action but it's only going to",
    "start": "2011630",
    "end": "2016730"
  },
  {
    "text": "draw the clock face once so it will hit this filter function many times but everything after that's kind of it",
    "start": "2016730",
    "end": "2022730"
  },
  {
    "text": "doesn't continue down the chain which gets a bit more obvious when we look at from like line 70 down where I've got",
    "start": "2022730",
    "end": "2027860"
  },
  {
    "text": "multiple filters we're using a map to then map is kind of like the map state to props function so we're going over",
    "start": "2027860",
    "end": "2035150"
  },
  {
    "text": "the state pulling stuff out of it that we actually need and then sending that across to a subscription function in",
    "start": "2035150",
    "end": "2041030"
  },
  {
    "text": "this case we're going to update the clock when the previous minutes and the",
    "start": "2041030",
    "end": "2046970"
  },
  {
    "text": "current minutes are not the same so that's kind of how the the clock face then takes a long we finished off by",
    "start": "2046970",
    "end": "2055010"
  },
  {
    "text": "dispatching a couple actions which is the current current time and the initial",
    "start": "2055010",
    "end": "2060679"
  },
  {
    "text": "setup sorry and in the current time there's a bit of a bug in this application because the initial dispatch",
    "start": "2060679",
    "end": "2066320"
  },
  {
    "text": "doesn't the the initial state doesn't have a previous time we know we don't",
    "start": "2066320",
    "end": "2072050"
  },
  {
    "text": "draw the initial clock face that's why it's it's it at 12 o'clock because we when we initially render out it doesn't",
    "start": "2072050",
    "end": "2078800"
  },
  {
    "text": "know to redraw the clock face because of the filter functions that we've got on line 71 and 72 then I just got a",
    "start": "2078800",
    "end": "2087919"
  },
  {
    "text": "function that's bound to the the button click that runs the clock and it will keep dispatching time every second",
    "start": "2087919",
    "end": "2095530"
  },
  {
    "start": "2095000",
    "end": "2398000"
  },
  {
    "text": "so now if we start that up again times jump forward quite nicely and we can go",
    "start": "2096060",
    "end": "2103540"
  },
  {
    "text": "forward now I said I've got this right panel here so I'll talk about that in a",
    "start": "2103540",
    "end": "2109480"
  },
  {
    "text": "moment and that moment is now I don't know why I did that but okay so I plug this into the Redux Chrome",
    "start": "2109480",
    "end": "2117280"
  },
  {
    "text": "extension that allows me to actually inject a piece of middleware that's watching what's happening inside of my",
    "start": "2117280",
    "end": "2123310"
  },
  {
    "text": "store you'll see that I have all these this time stuff down here and what they",
    "start": "2123310",
    "end": "2129520"
  },
  {
    "text": "represent is all the different actions that have been dispatched with inside of my application I can see if I click on",
    "start": "2129520",
    "end": "2136390"
  },
  {
    "text": "one of them the reaction that was obviously a couple of seconds ago but at",
    "start": "2136390",
    "end": "2144280"
  },
  {
    "text": "32 minutes past the hour of the current day and stuff of that though so and I can see the type of that I have this to",
    "start": "2144280",
    "end": "2152710"
  },
  {
    "text": "also have this timeline here at the bottom which if I hit play you'll see",
    "start": "2152710",
    "end": "2158590"
  },
  {
    "text": "that the clock face is actually on backwards and we're stepping forwards now we're replaying every single action",
    "start": "2158590",
    "end": "2164320"
  },
  {
    "text": "as we're going along you see the seconds is ticking over then we over ticked over a minute and",
    "start": "2164320",
    "end": "2170340"
  },
  {
    "text": "this is all just happening because every action was synchronous so I can replay",
    "start": "2170340",
    "end": "2175960"
  },
  {
    "text": "every action in the order that they actually happened in my application see",
    "start": "2175960",
    "end": "2182200"
  },
  {
    "text": "why this is I say this is like events awesome so if you see a fairly you know common concept to many people it's just",
    "start": "2182200",
    "end": "2190330"
  },
  {
    "text": "fast forward onto immediate I can also say dispatch a whole new action let's",
    "start": "2190330",
    "end": "2195790"
  },
  {
    "text": "grab this one and then we need to do a new date 2017 of the 816 and let's make",
    "start": "2195790",
    "end": "2206560"
  },
  {
    "text": "this 14 actually yeah we're 14 2000 now",
    "start": "2206560",
    "end": "2216850"
  },
  {
    "text": "if I hit dispatch we've just gone back in time so we've round the clock backwards",
    "start": "2216850",
    "end": "2223590"
  },
  {
    "text": "because we've just like that basically what Redux is doing or our",
    "start": "2223590",
    "end": "2229000"
  },
  {
    "text": "application is going dispatching this action it doesn't care that this is supposed to be a clock",
    "start": "2229000",
    "end": "2234490"
  },
  {
    "text": "and especially going forward so we can quite easily do that I can also turn off",
    "start": "2234490",
    "end": "2240069"
  },
  {
    "text": "points in inside of this so if I come on skip that one so if I've removed that from the list so",
    "start": "2240069",
    "end": "2247599"
  },
  {
    "text": "now this is what the application looked at that previous point in time forward backwards this is what essentially what",
    "start": "2247599",
    "end": "2254680"
  },
  {
    "text": "Dan was presenting at the react au cough was in the concept of time travel debugging I can rewind and replay him",
    "start": "2254680",
    "end": "2261940"
  },
  {
    "text": "play forward my application see what's happened I also do things from these tools like I could export all the",
    "start": "2261940",
    "end": "2267640"
  },
  {
    "text": "actions the what the what the values of those actions were what the state was at",
    "start": "2267640",
    "end": "2272769"
  },
  {
    "text": "that point in time to a JSON file and let's say that I've got an application",
    "start": "2272769",
    "end": "2278410"
  },
  {
    "text": "it's in UAT manual Chester has gone through and found a bug or it's in production and someone's found a bug we've got this",
    "start": "2278410",
    "end": "2284619"
  },
  {
    "text": "running or we've got this available we can download the JSON which represents",
    "start": "2284619",
    "end": "2289690"
  },
  {
    "text": "every action that's been done you can create a test open up that JSON file pull each step out pull each action out",
    "start": "2289690",
    "end": "2296819"
  },
  {
    "text": "dispatch dispatch dispatch dispatch all the way through and then assert on the end we give them a cert fail because",
    "start": "2296819",
    "end": "2303609"
  },
  {
    "text": "we've got a bug in our application I can fix it my test now passes based off of",
    "start": "2303609",
    "end": "2308950"
  },
  {
    "text": "how the user actually got to the point in time that they did it that to me when",
    "start": "2308950",
    "end": "2315220"
  },
  {
    "text": "I realize you could do that was kind of like the mind blowing pointers like this is so powerful I I can quite easily get",
    "start": "2315220",
    "end": "2321880"
  },
  {
    "text": "a regression check that in write a tear of write a test check that in and avoid having that regression problem to come",
    "start": "2321880",
    "end": "2327670"
  },
  {
    "text": "up again in the future because I'm able to reproduce everything that the user is done via I would observe and this isn't",
    "start": "2327670",
    "end": "2335859"
  },
  {
    "text": "required for observables this works with redux just plain so I could put that back into",
    "start": "2335859",
    "end": "2342099"
  },
  {
    "text": "the console example that I did early on I can connect this up to an angular UI",
    "start": "2342099",
    "end": "2348190"
  },
  {
    "text": "backbone UI and knock out UI a react UI all that kind of stuff it's very easy to plug in and then we",
    "start": "2348190",
    "end": "2354910"
  },
  {
    "text": "can just you know this dev tools just what is just running observing and I can do all kinds of interesting stuff so I",
    "start": "2354910",
    "end": "2360819"
  },
  {
    "text": "can say like this is the state of the application it's it's currently stopped it's not try and",
    "start": "2360819",
    "end": "2365890"
  },
  {
    "text": "draw the clock the previous time was that the current time is that quite powerful and this saves a lot of time",
    "start": "2365890",
    "end": "2373270"
  },
  {
    "text": "from a from a developer's perspective I know I like the fact that I can just get",
    "start": "2373270",
    "end": "2378670"
  },
  {
    "text": "an actual repo not uh yeah here's a couple of screenshots well what did you do yeah I'm gonna have to see if I can",
    "start": "2378670",
    "end": "2385090"
  },
  {
    "text": "try that again we've all been there we've all been back and forth with a a user or a test or a colleague of it",
    "start": "2385090",
    "end": "2391870"
  },
  {
    "text": "worked on my machine thanks sure it did I trust you okay so",
    "start": "2391870",
    "end": "2402420"
  },
  {
    "text": "that was observables with redux and also how we can combine that with the redux",
    "start": "2402420",
    "end": "2409660"
  },
  {
    "text": "dev tools and how we can use the redux dev tools to sort of monitor what's happening with inside of our application",
    "start": "2409660",
    "end": "2414760"
  },
  {
    "text": "and you know get get the power of the insight that that can give us so what",
    "start": "2414760",
    "end": "2426100"
  },
  {
    "start": "2425000",
    "end": "2487000"
  },
  {
    "text": "about redux without JavaScript and one",
    "start": "2426100",
    "end": "2431770"
  },
  {
    "text": "of the things I said that we need about an action and this is why when I was doing my implementation of redux I",
    "start": "2431770",
    "end": "2436900"
  },
  {
    "text": "started thinking about it was well because we have a loose type system we have to rely on a property called type",
    "start": "2436900",
    "end": "2442990"
  },
  {
    "text": "and that's that's how we do do it what if I was doing it in a language that had a type system like F sharp because F",
    "start": "2442990",
    "end": "2452620"
  },
  {
    "text": "sharp I wanted to essentially set myself a proper challenge and and write this in there in F sharp so I had a crack at",
    "start": "2452620",
    "end": "2459700"
  },
  {
    "text": "rewriting this in in Don in F sharp because I was trying like all the stuff",
    "start": "2459700",
    "end": "2466210"
  },
  {
    "text": "we've said and all the demos that people talk about is it's all in browser UI's well could we use Redux on the server",
    "start": "2466210",
    "end": "2473140"
  },
  {
    "text": "and not in the browser like could we represent state because it really requires it's like you use the state",
    "start": "2473140",
    "end": "2478450"
  },
  {
    "text": "essential or it's application state well what if we want an application state to be on the server",
    "start": "2478450",
    "end": "2485730"
  },
  {
    "start": "2487000",
    "end": "2646000"
  },
  {
    "text": "I'm just gonna like full disclosure this this wasn't the first time someone",
    "start": "2488160",
    "end": "2493200"
  },
  {
    "text": "written Redux and on there there's like a c-sharp implementation if that's more your cup of tea then but I thought I'd",
    "start": "2493200",
    "end": "2498630"
  },
  {
    "text": "have a crack at writing any an f-sharp because I like to give myself a proper challenge if you're not an f-sharp",
    "start": "2498630",
    "end": "2504359"
  },
  {
    "text": "person or you haven't used the f-sharp yeah don't don't concern yourself too much with the the language of the syntax",
    "start": "2504359",
    "end": "2510569"
  },
  {
    "text": "so stuff like that this is more of kind of I will astray ting the pushing the",
    "start": "2510569",
    "end": "2515640"
  },
  {
    "text": "boundaries of what you can do as a design pattern so I create a couple of types to represent middleware the",
    "start": "2515640",
    "end": "2523319"
  },
  {
    "text": "middleware API and the store and stuff like that have a thing that completely broke my brain when I'm trying to do a",
    "start": "2523319",
    "end": "2529950"
  },
  {
    "text": "whole bunch of fallbacks and stuff like that I then created this enormous type definition along here",
    "start": "2529950",
    "end": "2537089"
  },
  {
    "text": "which is basically the same generic argument being passed about five times in a row and that just that hurt to try",
    "start": "2537089",
    "end": "2544230"
  },
  {
    "text": "and write also because I'm not particularly good at F sharp but here's",
    "start": "2544230",
    "end": "2551280"
  },
  {
    "text": "our create store function the full implementation is 53 lines of code for a type safer implementation of redux I",
    "start": "2551280",
    "end": "2559039"
  },
  {
    "text": "thought that was kind of cool I thought that was oh yeah we had many lines in JavaScript I've managed to shave almost",
    "start": "2559039",
    "end": "2565710"
  },
  {
    "text": "20 lines out of that and a bunch of that is type definition it's cool so this works is it's a recursive function",
    "start": "2565710",
    "end": "2572480"
  },
  {
    "text": "because when you provide middleware you either create the store with middleware or you created this all without a",
    "start": "2572480",
    "end": "2577950"
  },
  {
    "text": "middleware when you create a install without middleware you actually create this sorry when you create this tool with middleware you actually first",
    "start": "2577950",
    "end": "2583859"
  },
  {
    "text": "create this all without middleware and then add them then recreate it with middleware over the top and we replace",
    "start": "2583859",
    "end": "2589650"
  },
  {
    "text": "the dispatch function with all the middleware chains so in F sharp I have to create a recursive function to achieve this so that it works and",
    "start": "2589650",
    "end": "2597750"
  },
  {
    "text": "JavaScript that's obvious a whole bunch a bunch of simpler I had to break only",
    "start": "2597750",
    "end": "2603480"
  },
  {
    "text": "one kind of rule in F sharp about nothing should be mutable because well",
    "start": "2603480",
    "end": "2608490"
  },
  {
    "text": "somewhere data has to change so we do have mutable data and a mutable",
    "start": "2608490",
    "end": "2613589"
  },
  {
    "text": "collection of subscribers is that those I tried to do as much immutability",
    "start": "2613589",
    "end": "2619710"
  },
  {
    "text": "inside of this as possible and I was like okay cool everything that what am i doing with it now well I'm",
    "start": "2619710",
    "end": "2627900"
  },
  {
    "text": "trying to do something server-side so I'm gonna write a chat application I've",
    "start": "2627900",
    "end": "2633270"
  },
  {
    "text": "got to demo up here of a chat application Rindy an f-sharp the user",
    "start": "2633270",
    "end": "2638850"
  },
  {
    "text": "signal R as its as its chat protocol essentially cool so that's up and",
    "start": "2638850",
    "end": "2645570"
  },
  {
    "text": "running let's open up a chrome instance it's closed off these tabs that I don't need anymore localhost of 5,000 and my",
    "start": "2645570",
    "end": "2653820"
  },
  {
    "start": "2646000",
    "end": "2859000"
  },
  {
    "text": "name is Aaron cool let's just dump that up touch then I'm gonna create another",
    "start": "2653820",
    "end": "2660150"
  },
  {
    "text": "tab over there and we'll connect to another localhost instance and we'll",
    "start": "2660150",
    "end": "2665640"
  },
  {
    "text": "call this Richard and then I'm gonna create wine you know a different browser",
    "start": "2665640",
    "end": "2672860"
  },
  {
    "text": "whoops where'd my browser go there it is it's just resize that one really doesn't help",
    "start": "2672860",
    "end": "2682290"
  },
  {
    "text": "when the browser wants to resize itself off screen on I want you to small down",
    "start": "2682290",
    "end": "2688800"
  },
  {
    "text": "here alright we'll come back to that browser and remote and we go awesome",
    "start": "2688800",
    "end": "2694710"
  },
  {
    "text": "talk and because that's what rich is going to say after this so so this is",
    "start": "2694710",
    "end": "2702480"
  },
  {
    "text": "anything back and forth because well these are just dumb clients and our state is on the server so that's that's",
    "start": "2702480",
    "end": "2709770"
  },
  {
    "text": "pretty neat thanks Richard now if I was",
    "start": "2709770",
    "end": "2715800"
  },
  {
    "text": "to reload this browser and I'll just connect back as Aaron because state exists on the server and not in the",
    "start": "2715800",
    "end": "2721950"
  },
  {
    "text": "client it just goes well here's the current state of the application when you connect and I get back my chat history",
    "start": "2721950",
    "end": "2727110"
  },
  {
    "text": "suite that's kind of neat it also introduces some other",
    "start": "2727110",
    "end": "2732420"
  },
  {
    "text": "interesting quirks let's connect another one and because",
    "start": "2732420",
    "end": "2737430"
  },
  {
    "text": "well names don't have to be unique we'll connect another one called Aaron now here I also have my history because I've",
    "start": "2737430",
    "end": "2745140"
  },
  {
    "text": "connected and that's the current application state the way that it works is that every key press sends a action",
    "start": "2745140",
    "end": "2751200"
  },
  {
    "text": "back to the server because if you if you close the tab you you come back you want to be able to",
    "start": "2751200",
    "end": "2756809"
  },
  {
    "text": "connect as the same user you want to be able to pick up where you left off but if you're ever in two tabs is the same",
    "start": "2756809",
    "end": "2762749"
  },
  {
    "text": "user you know isn't and they both have values in them because it's just the one",
    "start": "2762749",
    "end": "2769440"
  },
  {
    "text": "application State hey we're we're now for sitting everything server-side and as I type into one well anyone that's",
    "start": "2769440",
    "end": "2775619"
  },
  {
    "text": "also listening on the same unique user key it will you know it's it's all",
    "start": "2775619",
    "end": "2781140"
  },
  {
    "text": "connected and it's just the same application anyways well Aaron's typing stuff here which means whoever is Aaron",
    "start": "2781140",
    "end": "2787650"
  },
  {
    "text": "is also saying all of that yeah um that's something that you've obviously",
    "start": "2787650",
    "end": "2793079"
  },
  {
    "text": "got yeah that is that's true that's more like a normal conversation than Richard",
    "start": "2793079",
    "end": "2798269"
  },
  {
    "text": "I would be having and then you know they're just like someone would just fall over i but kind of silliness aside",
    "start": "2798269",
    "end": "2807509"
  },
  {
    "text": "in terms of like we're doing a chat application that's got this weird internal state why what would a dotnet",
    "start": "2807509",
    "end": "2812819"
  },
  {
    "text": "implementation be useful for examination building something on the phone doing a",
    "start": "2812819",
    "end": "2818910"
  },
  {
    "text": "win ten applications hololens application something that has like a single user context to it maybe you're",
    "start": "2818910",
    "end": "2825479"
  },
  {
    "text": "building over like a really complex like server job that runs it's got some",
    "start": "2825479",
    "end": "2832109"
  },
  {
    "text": "application state that needs to track over time you have one place where that data lives flows down xamarin",
    "start": "2832109",
    "end": "2838739"
  },
  {
    "text": "applications or mobile applications and desktop applications they're kind of what I say is the kind of the core use",
    "start": "2838739",
    "end": "2843989"
  },
  {
    "text": "use case for this I said there's a there's a better implementation or probably a proper implementation out",
    "start": "2843989",
    "end": "2850349"
  },
  {
    "text": "there on you get mine lives in in a github repo because I wasn't going to inflict it entirely on the world but",
    "start": "2850349",
    "end": "2859999"
  },
  {
    "text": "oops wrong button hey internally it works the same way as we would use anything else so we have a",
    "start": "2859999",
    "end": "2867079"
  },
  {
    "text": "not that file we have a signal our hub",
    "start": "2867079",
    "end": "2874440"
  },
  {
    "text": "to get started when it gets started oh wait sorry I gotta fine I got AB in the correct file if I remember where I",
    "start": "2874440",
    "end": "2882059"
  },
  {
    "text": "put that it's this one just click randomly in files until I",
    "start": "2882059",
    "end": "2887109"
  },
  {
    "text": "find the code that I'm after so we create a store it actually has some",
    "start": "2887109",
    "end": "2894549"
  },
  {
    "text": "middleware inside of it that when a new user connects it will pump out and say a",
    "start": "2894549",
    "end": "2900010"
  },
  {
    "text": "user has joined the conversation so it does that it actually dispatches a new action from the middleware I don't think",
    "start": "2900010",
    "end": "2906880"
  },
  {
    "text": "we saw that because I didn't have enough unique users joining we set up some initial application state which has got",
    "start": "2906880",
    "end": "2912910"
  },
  {
    "text": "no users connected there's no current message and current message is being written there's no users that are",
    "start": "2912910",
    "end": "2918940"
  },
  {
    "text": "currently connected but you could like have it you to create an it's automatically got a couple of different users because you've hydrated that",
    "start": "2918940",
    "end": "2924910"
  },
  {
    "text": "information out of a database we have a reducer that sits up here that just uses",
    "start": "2924910",
    "end": "2930940"
  },
  {
    "text": "the the power of a full type system and not JavaScript to do things like pattern matching depending on which actions",
    "start": "2930940",
    "end": "2937630"
  },
  {
    "text": "being dispatched we're going to invoke different things we're going to do stuff with the states and whatnot",
    "start": "2937630",
    "end": "2943359"
  },
  {
    "text": "when you connect a signal our hub all it's going to do is it gets the store",
    "start": "2943359",
    "end": "2948670"
  },
  {
    "text": "and subscribes to that so any changes in the store we're just going to push that out to the currently connected clients",
    "start": "2948670",
    "end": "2954480"
  },
  {
    "text": "it exposes a dispatch method which we actually call from the within side of the browser so we call the signal our",
    "start": "2954480",
    "end": "2960759"
  },
  {
    "text": "dispatch method on the server I'm not going to go too deep into the signal but that's how that all works and we",
    "start": "2960759",
    "end": "2967059"
  },
  {
    "text": "dispatch a bunch of different actions against that so that's how you could",
    "start": "2967059",
    "end": "2972849"
  },
  {
    "text": "implement a like a server-side implementation or a dotnet implementation of redux in F sharp as a",
    "start": "2972849",
    "end": "2980440"
  },
  {
    "text": "console application cool that sounds like a use case that I'm sure that",
    "start": "2980440",
    "end": "2985930"
  },
  {
    "text": "everyone in the audience has",
    "start": "2985930",
    "end": "2989338"
  },
  {
    "start": "2993000",
    "end": "3039000"
  },
  {
    "text": "that's Redux in a nutshell that's how you can use Redux without having to rely on react we can add it to any web UI",
    "start": "2994470",
    "end": "3000859"
  },
  {
    "text": "that we're looking at or even non web UI is just anything that might have a some kind of a UI associated with it or if we",
    "start": "3000859",
    "end": "3007670"
  },
  {
    "text": "really want to stretch ourselves we don't even need a UI something that is just a stateful application to me like",
    "start": "3007670",
    "end": "3014390"
  },
  {
    "text": "when I realized like all that stuff comes together and that it was essentially just an event sourcing that",
    "start": "3014390",
    "end": "3019970"
  },
  {
    "text": "was the you know mind blown sort of moment I'm Aaron Powell that was",
    "start": "3019970",
    "end": "3026810"
  },
  {
    "text": "Redux beyond react thank you [Applause]",
    "start": "3026810",
    "end": "3036889"
  }
]