[
  {
    "text": "so welcome everyone and thank you for coming to our session implementing event solution strategy on azure",
    "start": "8240",
    "end": "14559"
  },
  {
    "text": "and elena a little bit about what we are going to talk about today yeah i mean obviously about sourcing",
    "start": "14559",
    "end": "20880"
  },
  {
    "text": "um yeah so this session the idea for the session came to to us when i was working in a product company and i was starting",
    "start": "20880",
    "end": "28000"
  },
  {
    "text": "working with cosmos db asia cosmos db and i was sharing with ed many times like",
    "start": "28000",
    "end": "34160"
  },
  {
    "text": "how how cool how many features they are and let's propose to let's create a",
    "start": "34160",
    "end": "39200"
  },
  {
    "text": "session around it and in our opinion cosmos db we had was a really good fit",
    "start": "39200",
    "end": "45360"
  },
  {
    "text": "for event sourcing strategies so that's why we pulled a session around it and we want to share today how to actually",
    "start": "45360",
    "end": "51680"
  },
  {
    "text": "implement it all together on asia uh yeah and once again my name is selena",
    "start": "51680",
    "end": "57920"
  },
  {
    "text": "borzanko i'm working second day in a company called experience um",
    "start": "57920",
    "end": "63440"
  },
  {
    "text": "you can find me on twitter feel free to reach out leave comment feedback i'm always happy for for any any kind of",
    "start": "63440",
    "end": "70960"
  },
  {
    "text": "communication so so thank you and so i'm al trodburg i come from netherlands i work at company",
    "start": "70960",
    "end": "76880"
  },
  {
    "text": "commotion 10. we focus on everything microsoft but myself i mostly focus on azure and integration i'm also as an",
    "start": "76880",
    "end": "83680"
  },
  {
    "text": "fp so i love doing these kind of talks i do love speaking blogging writing basically anything i can do with the",
    "start": "83680",
    "end": "89840"
  },
  {
    "text": "community i try to do so thank you for having me here today and same for me if you have any questions any remarks",
    "start": "89840",
    "end": "95040"
  },
  {
    "text": "please let me know i'm always available on my social media so definitely reach out there and with that let's go to quick",
    "start": "95040",
    "end": "101680"
  },
  {
    "text": "introduction and event sourcing so today we are going to focus mostly on how can we implement event sourcing on azure not",
    "start": "101680",
    "end": "108079"
  },
  {
    "text": "so much on event sourcing itself but i do want to give a quick introduction just to make sure that everyone's on the same page like okay if",
    "start": "108079",
    "end": "114399"
  },
  {
    "text": "we talk about event sourcing what are we actually talking about so i grabbed this nice picture from the",
    "start": "114399",
    "end": "119840"
  },
  {
    "text": "microsoft docs page and this kind of explains okay so what is event sourcing",
    "start": "119840",
    "end": "124960"
  },
  {
    "text": "and on just one second let me just make sure that i'm plugged in before my battery dies there we go",
    "start": "124960",
    "end": "132239"
  },
  {
    "text": "um so event sourcing as name suggests is all about events and so what you can see",
    "start": "132239",
    "end": "138160"
  },
  {
    "text": "oh not that one this one so what you can see here basically from your presentation layer so from your",
    "start": "138160",
    "end": "144720"
  },
  {
    "text": "application you're going to create events and so events can be something like okay",
    "start": "144720",
    "end": "149760"
  },
  {
    "text": "i created the cart i added an item i added another item and these are all events with some",
    "start": "149760",
    "end": "155519"
  },
  {
    "text": "information about how do you want to change the state of your entity so in this case you have an",
    "start": "155519",
    "end": "160720"
  },
  {
    "text": "entity that is a shopping basket and we are chasing changing the state of the entity by creating it adding articles to",
    "start": "160720",
    "end": "166400"
  },
  {
    "text": "it removing articles adding shipping information and we all store this in",
    "start": "166400",
    "end": "171599"
  },
  {
    "text": "this event stored over here which we will see later on with his implant with us on cosmos db",
    "start": "171599",
    "end": "176879"
  },
  {
    "text": "but before we go to that let's also focus a little bit on this because we also will be focusing on this part",
    "start": "176879",
    "end": "181920"
  },
  {
    "text": "so what we are going to show you today as well is how can you create material issue on top of those events and",
    "start": "181920",
    "end": "186959"
  },
  {
    "text": "materials use basically okay you want to display the information in some way which we'll talk about more later",
    "start": "186959",
    "end": "192159"
  },
  {
    "text": "you can also have systems applications that just read those events directly so without materials view in this case",
    "start": "192159",
    "end": "198000"
  },
  {
    "text": "they've just replayed those events and by replaying those events by you can eventually get the final state of that",
    "start": "198000",
    "end": "204959"
  },
  {
    "text": "empty so in this case we would have a shopping cart with one item in there and some shipping info",
    "start": "204959",
    "end": "212400"
  },
  {
    "text": "and of course you can also replay those events in any way that you want so anyone can just basically come to our event store say hey i want to get",
    "start": "212400",
    "end": "219200"
  },
  {
    "text": "current state of this particular order please give to me they get all the events they played back and",
    "start": "219200",
    "end": "224560"
  },
  {
    "text": "that way they can get us so like i said not a deep dive on event sourcing but definitely like a quick",
    "start": "224560",
    "end": "230400"
  },
  {
    "text": "introduction so okay what's event sourcing so it's all about events and those events you can store you don't store the entity itself you store those",
    "start": "230400",
    "end": "237040"
  },
  {
    "text": "events and by storing those events and playing them back you can get the current state of that empty",
    "start": "237040",
    "end": "243360"
  },
  {
    "text": "so why should we use event sourcing and for that first let's have a look at crot",
    "start": "243439",
    "end": "248640"
  },
  {
    "text": "because i think everyone here at some point built a cut application you create some data you create an",
    "start": "248640",
    "end": "254159"
  },
  {
    "text": "entity you store it into database uh you update it you might delete some parts of it but basically working with this",
    "start": "254159",
    "end": "260880"
  },
  {
    "text": "singular entity in the database now this is fine and then as long as your application",
    "start": "260880",
    "end": "266400"
  },
  {
    "text": "is not that large you can also do a lot with large applications by the way i'm not saying this is not possible but it gets harder and why does get harder when",
    "start": "266400",
    "end": "273120"
  },
  {
    "text": "we start doing like millions of producers and stuff like that because you start locking your data",
    "start": "273120",
    "end": "279120"
  },
  {
    "text": "because when you're working with the database if an entity is being changed you don't want another producer to work",
    "start": "279120",
    "end": "284639"
  },
  {
    "text": "on the same entity because they might be overriding the same fields or they might be reading data that's out",
    "start": "284639",
    "end": "289759"
  },
  {
    "text": "of this out of sync so you have to lock the data make sure no one can actually adjust the data except for that one",
    "start": "289759",
    "end": "295520"
  },
  {
    "text": "producer and like i said this is fine if you're working with like thousands of",
    "start": "295520",
    "end": "300560"
  },
  {
    "text": "producers but once you get into like millions of producers this does become a hassle",
    "start": "300560",
    "end": "306320"
  },
  {
    "text": "also concurrency is quite difficult when you work with like those kind of high traffic high throughput applications",
    "start": "306400",
    "end": "312720"
  },
  {
    "text": "because um one producer is inserting something another producer is reading the data",
    "start": "312720",
    "end": "318880"
  },
  {
    "text": "and they might get with an obsolete state because someone else already updated it and so this concurrency is quite hard when you do this with the",
    "start": "318880",
    "end": "325840"
  },
  {
    "text": "normal crud so the main problem is that crud is not",
    "start": "325840",
    "end": "330880"
  },
  {
    "text": "easily scalable once again i'm not saying it's not scalable of course you can do this but it takes a lot of effort",
    "start": "330880",
    "end": "336880"
  },
  {
    "text": "where event sourcing will as we see in moments solve a lot of these issues for us",
    "start": "336880",
    "end": "342320"
  },
  {
    "text": "finally something that always annoyed me because i want to see what happened to my entity",
    "start": "342320",
    "end": "347440"
  },
  {
    "text": "and with crouch you don't have an out of the box history you can of course build your own locking database and",
    "start": "347440",
    "end": "353120"
  },
  {
    "text": "just keep track of every change that you made but it's something that you have to build yourself on top of your application in your database in a",
    "start": "353120",
    "end": "359759"
  },
  {
    "text": "separate table so the event sourcing pattern basically helps on these kind of scenarios",
    "start": "359759",
    "end": "367039"
  },
  {
    "text": "because you only do inserts you don't do updates so you don't have those locking issues you don't have those concurrency",
    "start": "367039",
    "end": "372560"
  },
  {
    "text": "issues everyone just sends an event saying hey i want to change this on my particular entity",
    "start": "372560",
    "end": "379680"
  },
  {
    "text": "and this is really nice when you have those right heavy workloads like i said we're talking about millions of producers uh where this is like the",
    "start": "379680",
    "end": "387199"
  },
  {
    "text": "ultimate pattern of course you can also use on the lower air throughput but this is actually where it was made for like",
    "start": "387199",
    "end": "393360"
  },
  {
    "text": "this high throughput with many producers on there",
    "start": "393360",
    "end": "399120"
  },
  {
    "text": "and this is because inserts are just much more efficient you can just do an insert and as long as your database or datastore can handle those inserts",
    "start": "399120",
    "end": "405919"
  },
  {
    "text": "you'll be fine you don't think about updating you don't have to think about locking you don't think about the currency as long as i can do inserts i",
    "start": "405919",
    "end": "412720"
  },
  {
    "text": "can implement event sourcing and we'll see in a moment why cosmodb is such a great for this",
    "start": "412720",
    "end": "419120"
  },
  {
    "text": "and of course because you just insert those events you already have your other lock because your events are your other",
    "start": "419120",
    "end": "424560"
  },
  {
    "text": "lock because when you play those back those events you can immediately see like what happened to this order who changed",
    "start": "424560",
    "end": "430400"
  },
  {
    "text": "something who updated the current state and that's all just out of the box with event sourcing so this is why i like",
    "start": "430400",
    "end": "437360"
  },
  {
    "text": "event sourcing a lot for these kind of scenarios you mentioned for the crude uh we that",
    "start": "437360",
    "end": "442400"
  },
  {
    "text": "it's not easily scalable yes so how is it scaled to yeah so event sourcing is much easier",
    "start": "442400",
    "end": "447759"
  },
  {
    "text": "scalable because like i said as long as you can handle those inserts and of course you have to get a data store that actually can handle those millions of",
    "start": "447759",
    "end": "454319"
  },
  {
    "text": "inserts at the same time um but as long as you can handle this then you will be okay so",
    "start": "454319",
    "end": "459919"
  },
  {
    "text": "because you don't have to think about that locking issue and stuff like that anymore you just have to handle inserts",
    "start": "459919",
    "end": "464960"
  },
  {
    "text": "um and there's a moment we're going to talk about like how cosmos db does this and why this is so amazing for this",
    "start": "464960",
    "end": "470479"
  },
  {
    "text": "but i do think this is also the power of the cloud in general because the cloud actually allows us to just scale up and",
    "start": "470479",
    "end": "476080"
  },
  {
    "text": "definitely basically actually do these kind of things with our with our applications",
    "start": "476080",
    "end": "483918"
  },
  {
    "text": "so let's have a look on event sourcing on azure and of course we are talking about azure today here but the same",
    "start": "484400",
    "end": "490080"
  },
  {
    "text": "applies basically to any other cloud provider awsa similar services i'm sure google cloud has similar services",
    "start": "490080",
    "end": "496319"
  },
  {
    "text": "so if you're not working with azure yourself just know like you can probably map this on your own services we are",
    "start": "496319",
    "end": "501680"
  },
  {
    "text": "going to show this on azure and of course azure is the best cloud so we should all be using this",
    "start": "501680",
    "end": "507840"
  },
  {
    "text": "so event sourcing and azure so first of all cosmos db and elena is going to talk a bit about this yes so we're going to",
    "start": "508319",
    "end": "513919"
  },
  {
    "text": "use azure cosmos db for those who never worked with this never met it it's a",
    "start": "513919",
    "end": "519120"
  },
  {
    "text": "globally distributed massively scalable document based database",
    "start": "519120",
    "end": "524159"
  },
  {
    "text": "um they have different apis so as you can see there is a table api cassandra sql mongodb or gremlin by default if you",
    "start": "524159",
    "end": "531040"
  },
  {
    "text": "would start working with cosmos db they're going to be sql but why why it's great for us",
    "start": "531040",
    "end": "537120"
  },
  {
    "text": "as we already saw as we already said that we want to have an option to in just insert our events",
    "start": "537120",
    "end": "544000"
  },
  {
    "text": "without any updates and asia cosmos db is a schema-less document store so we will be",
    "start": "544000",
    "end": "551200"
  },
  {
    "text": "able just to insert documents uh without basically carrying what about schema but about version of the document",
    "start": "551200",
    "end": "557600"
  },
  {
    "text": "and so on so on so and it's also globally distributed so multi-regions",
    "start": "557600",
    "end": "563120"
  },
  {
    "text": "they have a lot of um basically um regions where you can have the data very",
    "start": "563120",
    "end": "569360"
  },
  {
    "text": "close to the user so it's also optimized the performance of storing of writing operation read operations",
    "start": "569360",
    "end": "576160"
  },
  {
    "text": "and of course like there's guarantee for very low latency yes so as you can hear it like cosmos b is",
    "start": "576160",
    "end": "583279"
  },
  {
    "text": "really that kind of data store that you want for an event sourcing pattern because it can just handle high loads",
    "start": "583279",
    "end": "589519"
  },
  {
    "text": "it doesn't matter where those events come from like you can have in the multiple regions where actually multiple users can write to the regions",
    "start": "589519",
    "end": "595839"
  },
  {
    "text": "and this is really nice for that kind of pattern but of course you are not going to",
    "start": "595839",
    "end": "601279"
  },
  {
    "text": "expose our data store directly to the internet so our producers will actually talk to something else first and they're",
    "start": "601279",
    "end": "607519"
  },
  {
    "text": "going to send their events into event hubs and event hubs is a stream based",
    "start": "607519",
    "end": "613279"
  },
  {
    "text": "message store and so think like kafka because i think most people here will have seen kafka at some point or event",
    "start": "613279",
    "end": "618800"
  },
  {
    "text": "ups itself but think like i can just push in events and i can then have a stream of events that i can read from",
    "start": "618800",
    "end": "624800"
  },
  {
    "text": "and think of this a bit like a tape deck so i can go forward in the day deck i",
    "start": "624800",
    "end": "630000"
  },
  {
    "text": "can go backwards in my deck and same for my stream so i can just go forward in my stream backwards in my stream i can say i want to start",
    "start": "630000",
    "end": "635839"
  },
  {
    "text": "playing from this point that can be the beginning it can be somewhere halfway it can be specific entry specific time so i",
    "start": "635839",
    "end": "642480"
  },
  {
    "text": "can basically just go over the stream and this is actually done by the client so the client is in control of putting",
    "start": "642480",
    "end": "647680"
  },
  {
    "text": "the cursor of okay where do i want to start playing back those events and this of course is very nice if you",
    "start": "647680",
    "end": "652959"
  },
  {
    "text": "say okay so we had some issues i want to get the events from the last day again i can just put that cursor back and it",
    "start": "652959",
    "end": "658240"
  },
  {
    "text": "just will start playing again or if i introduce a new client they will just get the complete stream they can start",
    "start": "658240",
    "end": "663360"
  },
  {
    "text": "from beginning and just play back all those events and once again this is also very optimized for high throughput",
    "start": "663360",
    "end": "670399"
  },
  {
    "text": "event apps can also handle millions of events per second so it's really once again a great partner in our event",
    "start": "670399",
    "end": "675920"
  },
  {
    "text": "sourcing pattern yeah and of course azure functions um",
    "start": "675920",
    "end": "681279"
  },
  {
    "text": "thanks for the building triggers for azure functions for the event hub for cosmos db it will be super easy to",
    "start": "681279",
    "end": "688800"
  },
  {
    "text": "implement uh basically functionality how we want to write our data in cosmos db how we",
    "start": "688800",
    "end": "694000"
  },
  {
    "text": "want to also react on those changes and also because it's serverless uh very very nice that we don't need to pay",
    "start": "694000",
    "end": "701040"
  },
  {
    "text": "basically for uh for the for having azure functions we pay only when we use them",
    "start": "701040",
    "end": "707200"
  },
  {
    "text": "and uh of course it also will help us to concentrate only on our business logic uh combining triggers and bindings we",
    "start": "707200",
    "end": "714320"
  },
  {
    "text": "can avoid like a huge amount of code we can just add how we want to actually",
    "start": "714320",
    "end": "719839"
  },
  {
    "text": "aggregate our data how we want to aggregate our events and like save it back to cosmos db or any other data",
    "start": "719839",
    "end": "726399"
  },
  {
    "text": "store exactly so with these three different services we are going to implement this this",
    "start": "726399",
    "end": "732240"
  },
  {
    "text": "event sourcing pattern on azure and with that actually let's have a look how this looks like",
    "start": "732240",
    "end": "737760"
  },
  {
    "text": "so what i'm going to do in this demo i have a kafka enabled i have a kafka application and the nice thing about",
    "start": "737760",
    "end": "743920"
  },
  {
    "text": "event hubs it actually has a kafka compatible endpoint so if you are working with kafir kafka at the moment",
    "start": "743920",
    "end": "749680"
  },
  {
    "text": "you can just change your connection string to event tops and we'll actually just send those events into event hubs",
    "start": "749680",
    "end": "754880"
  },
  {
    "text": "or on the other side to retrieve them from them without changing any code",
    "start": "754880",
    "end": "759920"
  },
  {
    "text": "so this is very nice that i can just have kafka application and go to event hops to have completely managed platform",
    "start": "759920",
    "end": "765519"
  },
  {
    "text": "i don't have to host my own kafka service anymore or anything like that it's all completely managed for me it's a pure pass service so i only think",
    "start": "765519",
    "end": "772959"
  },
  {
    "text": "about my logic and no longer about infrastructure or anything like that so that kafka application is going to push it into event hubs it will be",
    "start": "772959",
    "end": "779519"
  },
  {
    "text": "pushed into that stream and once events are starting to come in we are going to trigger a function on this so we have an",
    "start": "779519",
    "end": "785440"
  },
  {
    "text": "event.binding that sees hey there's some events coming in i need to start reading the stream",
    "start": "785440",
    "end": "790880"
  },
  {
    "text": "and we'll get those events and of course we can apply some logic in here in this case we just pass them through direct",
    "start": "790880",
    "end": "796079"
  },
  {
    "text": "directly to cosmos db but for example if i would want some transformations or maybe some validations this would be the",
    "start": "796079",
    "end": "802320"
  },
  {
    "text": "point where i would insert that custom logic that custom business process in this case we just push them through",
    "start": "802320",
    "end": "808639"
  },
  {
    "text": "into cosmos db and store them there as our event store so let's have a look at what this looks",
    "start": "808639",
    "end": "814720"
  },
  {
    "text": "like so first of all i have my kafka producer over here um i'm not going to dive too",
    "start": "814720",
    "end": "821680"
  },
  {
    "text": "deeply into the code this is not a session about the programming or anything like that i will show you some parts of this just like to",
    "start": "821680",
    "end": "827839"
  },
  {
    "text": "let you know how to do this if you actually want to have a better look at the code and want to start playing around with this yourself uh we have",
    "start": "827839",
    "end": "834079"
  },
  {
    "text": "everything on github we'll share the link in the end so you can have a look at this yourself and actually spin up",
    "start": "834079",
    "end": "839120"
  },
  {
    "text": "all the services all the infrastructures code is there all the codes for the application is there so you can actually spin this up yourself",
    "start": "839120",
    "end": "845680"
  },
  {
    "text": "um and this is so much so this is my producer so this is going to create some events and send them out to my",
    "start": "845680",
    "end": "851360"
  },
  {
    "text": "event hubs and what we are simulating here is that warehouse we were talking about earlier",
    "start": "851360",
    "end": "856399"
  },
  {
    "text": "of course in real life this would be many different applications that always be sending their events i just have one",
    "start": "856399",
    "end": "861440"
  },
  {
    "text": "single application that is going to simulate all those different systems but what you will see here on this line",
    "start": "861440",
    "end": "868560"
  },
  {
    "text": "is that we are just using the confluent.kafka library so this is just normal kafka um",
    "start": "868560",
    "end": "874560"
  },
  {
    "text": "that you might already be have built yourself as well um nothing special just a kafka application",
    "start": "874560",
    "end": "880160"
  },
  {
    "text": "and the only thing i had to do to make this work with event hubs is this connection string actually put in the connection string of my event ups",
    "start": "880160",
    "end": "887120"
  },
  {
    "text": "everything else is similar like you can run this against kafka it will work exactly the same as it does against",
    "start": "887120",
    "end": "892160"
  },
  {
    "text": "event tops no code changes needed so what i'm going to do i'm going to",
    "start": "892160",
    "end": "897360"
  },
  {
    "text": "create a some produce a producer and i'm going to create 1000 different tasks and this will create 1000 different orders",
    "start": "897360",
    "end": "904000"
  },
  {
    "text": "and go to different stages of that order so when i create processed order i'm",
    "start": "904000",
    "end": "909519"
  },
  {
    "text": "going to create some random orders with some random data in there i'm going to add some",
    "start": "909519",
    "end": "915279"
  },
  {
    "text": "customer info and so this part over here will be my first event so this will just be a json document",
    "start": "915279",
    "end": "922320"
  },
  {
    "text": "that is sent as an event now as you can see i have a couple different stages that we go through so",
    "start": "922320",
    "end": "928399"
  },
  {
    "text": "order is requested so someone actually was actually on the website said okay i want this order it's requested",
    "start": "928399",
    "end": "935199"
  },
  {
    "text": "and it will then go to another system uh add some more articles it goes another system accepts it like okay we are going to",
    "start": "935199",
    "end": "941040"
  },
  {
    "text": "process this order so this is another event that we are creating here um as you will see there's f times the",
    "start": "941040",
    "end": "946639"
  },
  {
    "text": "submit and weight and this just simulates like okay we are submitting it and there will be some time in between",
    "start": "946639",
    "end": "951759"
  },
  {
    "text": "those different processes and that's a random time in between there so we can update our articles in some cases",
    "start": "951759",
    "end": "957680"
  },
  {
    "text": "we can cancel our order in some cases most of them will still end up in the picking phase where it's actually in the",
    "start": "957680",
    "end": "963440"
  },
  {
    "text": "where i was being picked it goes out for delivery and finally order gets delivered so these are",
    "start": "963440",
    "end": "969120"
  },
  {
    "text": "different stages that go through and as you can see these are just different events and these can come from different applications different systems where",
    "start": "969120",
    "end": "975120"
  },
  {
    "text": "each system just says hey i'm doing something to this order so let's start this one so it's going to",
    "start": "975120",
    "end": "981519"
  },
  {
    "text": "run it's going to create our orders and send them out to our event hops and that",
    "start": "981519",
    "end": "986800"
  },
  {
    "text": "will start the function that will see hey something is in this event hub i need to start processing this stream",
    "start": "986800",
    "end": "992880"
  },
  {
    "text": "so it's now creating some data so there we go orders are being sent so while this is running let's go to the",
    "start": "992880",
    "end": "998480"
  },
  {
    "text": "function that's going to trigger from this and this is my event processor function",
    "start": "998480",
    "end": "1005040"
  },
  {
    "text": "i already deployed this in azure so this is actually processing the data that's coming in and while that is doing that i will run you to the bit code here as",
    "start": "1005040",
    "end": "1011360"
  },
  {
    "text": "well and elena already told us that functions have the concept of bindings and triggers",
    "start": "1011360",
    "end": "1017279"
  },
  {
    "text": "and so the nice thing about binding and triggers is that i don't need to know for example in this case how does event",
    "start": "1017279",
    "end": "1022880"
  },
  {
    "text": "ups work i don't need to know about check marking i don't need to know about how does the stream work i don't need to",
    "start": "1022880",
    "end": "1029280"
  },
  {
    "text": "know about the pointer that's all handled for me the only thing i do is add this one line over here",
    "start": "1029280",
    "end": "1035438"
  },
  {
    "text": "so i just say i want event up trigger this is my event type that you have to listen on this is my connection string and i want",
    "start": "1035439",
    "end": "1042240"
  },
  {
    "text": "back an event data array and that's all i need to know so i get an array with events and i can just",
    "start": "1042240",
    "end": "1048400"
  },
  {
    "text": "start processing them without having to know all about how do i connect to event hubs how do i do all this kind of logic",
    "start": "1048400",
    "end": "1055120"
  },
  {
    "text": "around this this all abstracted away from me that's very nice because it means that i can to get started very quickly i don't have much logic that i",
    "start": "1055120",
    "end": "1062320"
  },
  {
    "text": "need to maintain i can just use this and get those events in i'm also going to write some cosmos db",
    "start": "1062320",
    "end": "1069280"
  },
  {
    "text": "and i'm actually going to use the sdk and i'm going to do that exactly because what i just said those trigger and",
    "start": "1069280",
    "end": "1074880"
  },
  {
    "text": "bindings abstract a lot of things away which is amazing if you only need the default logic but if you want to do",
    "start": "1074880",
    "end": "1081520"
  },
  {
    "text": "something more on this like you want in this case i'm going to add some parameters on my custom db client",
    "start": "1081520",
    "end": "1087120"
  },
  {
    "text": "this you cannot do with those bindings so if you want a bit more control you can of course still use the sdk as i",
    "start": "1087120",
    "end": "1092640"
  },
  {
    "text": "will be doing but i did want to show you how this look like if i would actually use that binding so in that case i would have this cosmos",
    "start": "1092640",
    "end": "1098720"
  },
  {
    "text": "db binding i would say okay this my collection my database my collection my connection string",
    "start": "1098720",
    "end": "1104400"
  },
  {
    "text": "and then i would have an output document and so this is just a document i can write to and then put it as soon as",
    "start": "1104400",
    "end": "1110559"
  },
  {
    "text": "write to it it will push it out to my customer to be now like i said i'm using something else i'm using the client over here the",
    "start": "1110559",
    "end": "1116960"
  },
  {
    "text": "cosmic cosmos client and that's because i want to have these serialized options which i cannot do on",
    "start": "1116960",
    "end": "1122559"
  },
  {
    "text": "my binding now if you are like okay i need this in many different projects very many different functions you can",
    "start": "1122559",
    "end": "1128880"
  },
  {
    "text": "actually write your own custom binding and then of course on your custom binding you can actually implement this and then you once again use a binding",
    "start": "1128880",
    "end": "1135120"
  },
  {
    "text": "in this case i just want to show you that you also have still this all this control that you can actually just use the sdk for all the different services",
    "start": "1135120",
    "end": "1141520"
  },
  {
    "text": "and use that to write to this so i'm going to create my database if it doesn't exist i'm going to create my",
    "start": "1141520",
    "end": "1146960"
  },
  {
    "text": "containers and then i'm going to look through those events that are coming in so this or",
    "start": "1146960",
    "end": "1152000"
  },
  {
    "text": "just an array of events that i'm going to run through and going to store into cosmos db",
    "start": "1152000",
    "end": "1157520"
  },
  {
    "text": "um like i said i'm not doing much special here i'm just going to get that event and store it as the json document",
    "start": "1157520",
    "end": "1163200"
  },
  {
    "text": "that comes in but of course i can do a lot of custom logic here like validations mappings transformations",
    "start": "1163200",
    "end": "1170160"
  },
  {
    "text": "whatever you want in this case i just get my message body i convert it to an order object",
    "start": "1170160",
    "end": "1176320"
  },
  {
    "text": "i make sure that i remove all the null values and stuff like that because i'm using the same order object for all my",
    "start": "1176320",
    "end": "1181360"
  },
  {
    "text": "different events um so i want to skip like remove all the null values and empty fields and stuff",
    "start": "1181360",
    "end": "1186720"
  },
  {
    "text": "like that of course you can also use different events like elena said it's a schemeless data store so i can also have",
    "start": "1186720",
    "end": "1193200"
  },
  {
    "text": "different kinds of events cosmodb doesn't really care about this as long as there's some data in there it will work",
    "start": "1193200",
    "end": "1199039"
  },
  {
    "text": "and then i'm going to just push this into my cosmos db i'm using upsert but of course like i said we don't do updates we just use inserts in in this",
    "start": "1199039",
    "end": "1205679"
  },
  {
    "text": "case so i'm just inserting that event into our cosmos db and it will then be there to handle",
    "start": "1205679",
    "end": "1213039"
  },
  {
    "text": "now if i go over over here so i have my azure environment here here we see that i have an event hop uh",
    "start": "1213360",
    "end": "1220159"
  },
  {
    "text": "over here with one event up in this so my orders you already see there's some throughputs coming through here",
    "start": "1220159",
    "end": "1226240"
  },
  {
    "text": "and this is just the orders event hub that i'm pushing these messages into so nothing too special see here it's just a stream of data that i'm pushing",
    "start": "1226240",
    "end": "1232640"
  },
  {
    "text": "into and then we can stop browsing this i have my function app over here which i just showed you that's running the",
    "start": "1232640",
    "end": "1238159"
  },
  {
    "text": "function uh that i showed which will push data to customer to be",
    "start": "1238159",
    "end": "1243200"
  },
  {
    "text": "so the more interesting one is actually this one our cosmic db itself",
    "start": "1243200",
    "end": "1248400"
  },
  {
    "text": "because this is where those events are being stored and this is where we can start querying them start processing",
    "start": "1248400",
    "end": "1253919"
  },
  {
    "text": "them and actually start working with them so if i go over here in my items i will",
    "start": "1253919",
    "end": "1259440"
  },
  {
    "text": "see that i have a lot of different items over here already so i i'm using about 1000 different",
    "start": "1259440",
    "end": "1264880"
  },
  {
    "text": "orders with each of them about five different events so you can imagine that this will be long list so i'm not going",
    "start": "1264880",
    "end": "1270320"
  },
  {
    "text": "to go to all of them but just show you how this looks like it's just a json document that i got for",
    "start": "1270320",
    "end": "1277600"
  },
  {
    "text": "my that was produced in my kafka producer sent to my event hubs and then stored into cosmos db",
    "start": "1277600",
    "end": "1283039"
  },
  {
    "text": "i can see there's some information about the customer in here some articles and what i want to show you so i already",
    "start": "1283039",
    "end": "1289679"
  },
  {
    "text": "paired one order beforehand because i can now just say i want filter on this specific",
    "start": "1289679",
    "end": "1295679"
  },
  {
    "text": "order number and now i see for this specific order number i have some different events so this is my event sourcing pattern that",
    "start": "1295679",
    "end": "1302000"
  },
  {
    "text": "you see here because i have an event that was created or requested i have another event that looks",
    "start": "1302000",
    "end": "1308080"
  },
  {
    "text": "completely different that it was accepted so this came from another system i have another event that is picking so",
    "start": "1308080",
    "end": "1314320"
  },
  {
    "text": "this came from our picking systems an event that's out for delivery",
    "start": "1314320",
    "end": "1319360"
  },
  {
    "text": "and finally an event that was delivered and so now my clients can actually just play back those five events and they",
    "start": "1319360",
    "end": "1325200"
  },
  {
    "text": "will see okay so i have an order with this order number for this customer this were the articles it was accepted at",
    "start": "1325200",
    "end": "1331200"
  },
  {
    "text": "this moment it was picking at this moment it went out for delivery at this moment it was delivered at this moment",
    "start": "1331200",
    "end": "1336720"
  },
  {
    "text": "and so by playing back those five events they cannot have complete state of this specific order",
    "start": "1336720",
    "end": "1342640"
  },
  {
    "text": "so that's the event sourcing pattern implemented on top of our azure services and",
    "start": "1342640",
    "end": "1348880"
  },
  {
    "text": "next up we are actually going to see so we now have those events in our data store and now we're going to see how we",
    "start": "1348880",
    "end": "1355120"
  },
  {
    "text": "can create those materialized views and elena is going to tell all about that",
    "start": "1355120",
    "end": "1361120"
  },
  {
    "text": "yes so basically my partners will be about reading all those events so we already brought them a massive amount of",
    "start": "1361120",
    "end": "1367840"
  },
  {
    "text": "data in in cosmos db now we have to extract somehow this data because we're not going to to query uh",
    "start": "1367840",
    "end": "1375760"
  },
  {
    "text": "all these events and aggregate it in real time uh because this would not be",
    "start": "1375760",
    "end": "1381120"
  },
  {
    "text": "just efficient uh in a with a relational database for example that might work we will have just query we will run it",
    "start": "1381120",
    "end": "1387919"
  },
  {
    "text": "anytime we want and then we will have aggregated view or whatever for cosmos db that's not that's not the case",
    "start": "1387919",
    "end": "1394960"
  },
  {
    "text": "because uh i mean it will just end up in a in uh that our cosmos db will be super",
    "start": "1394960",
    "end": "1400720"
  },
  {
    "text": "expensive for a couple of reasons first of all because it's not uh because of the partitioning in cosmos",
    "start": "1400720",
    "end": "1407760"
  },
  {
    "text": "db um if we will just write the query and we'll try to extract all this data in in",
    "start": "1407760",
    "end": "1413679"
  },
  {
    "text": "the ring we will just end up querying having a",
    "start": "1413679",
    "end": "1420400"
  },
  {
    "text": "cross-partition queries and this is very expensive so uh to avoid that kind of",
    "start": "1420400",
    "end": "1425440"
  },
  {
    "text": "operations we will be creating we will create pre-populated views so we will save",
    "start": "1425440",
    "end": "1431360"
  },
  {
    "text": "those queries result of those queries we will save them in the cosmos db and this",
    "start": "1431360",
    "end": "1436960"
  },
  {
    "text": "will basically uh be for optimization of read operations and",
    "start": "1436960",
    "end": "1443200"
  },
  {
    "text": "any time when there is update will happen update in our case we'll be adding a new document but for cosmos db",
    "start": "1443200",
    "end": "1449120"
  },
  {
    "text": "it any change if there if you update the document if you insert a new document",
    "start": "1449120",
    "end": "1454880"
  },
  {
    "text": "uh we have an option to react on those changes and to react on those changes we",
    "start": "1454880",
    "end": "1459919"
  },
  {
    "text": "have a cosmos db change feed basically the complete lock of all the changes",
    "start": "1459919",
    "end": "1466080"
  },
  {
    "text": "which are happening in our container um in all the containers for every container there is a separate change",
    "start": "1466080",
    "end": "1471520"
  },
  {
    "text": "feed and we can interact with the change fit in three different ways so as you can",
    "start": "1471520",
    "end": "1478080"
  },
  {
    "text": "see when application writes some data in cosmos db a change feed stores all this all this information and we can pull",
    "start": "1478080",
    "end": "1484799"
  },
  {
    "text": "this data uh from the change feed and create different projections so",
    "start": "1484799",
    "end": "1490320"
  },
  {
    "text": "when we are pulling the data from a change feed uh it's this is the most complicated way to interact with this",
    "start": "1490320",
    "end": "1495760"
  },
  {
    "text": "because we have to take care of uh which partition we're going to um to use we",
    "start": "1495760",
    "end": "1501279"
  },
  {
    "text": "have to handle all the exceptions we have to deploy it we have to manage and scale and everything is basically on us",
    "start": "1501279",
    "end": "1508559"
  },
  {
    "text": "the use case which would be great if we for example decided that we want to transfer all our data in a different",
    "start": "1508559",
    "end": "1514080"
  },
  {
    "text": "data store and then we can use this pool model we pull all the data all the events from",
    "start": "1514080",
    "end": "1519919"
  },
  {
    "text": "the very beginning transfer them in a different data store and we are done",
    "start": "1519919",
    "end": "1525039"
  },
  {
    "text": "the second option how to interact with change feed feeders could be implemented and change fit processor library",
    "start": "1525039",
    "end": "1531120"
  },
  {
    "text": "using this library we can it's basically sdk on top of a change feed where the pool",
    "start": "1531120",
    "end": "1536480"
  },
  {
    "text": "operation is done for us already so we we provide the container name and then",
    "start": "1536480",
    "end": "1541840"
  },
  {
    "text": "the database with the connection string that we want to listen and anytime there is a change happening",
    "start": "1541840",
    "end": "1547840"
  },
  {
    "text": "or those events going to be pushed to us then we can process in any way we want",
    "start": "1547840",
    "end": "1553120"
  },
  {
    "text": "we still have to deploy we still have to take care of a couple of things but this is much easier way to interact with the",
    "start": "1553120",
    "end": "1558480"
  },
  {
    "text": "change feed and the last one that we will use it's the azure functions with the trigger so we will",
    "start": "1558480",
    "end": "1566000"
  },
  {
    "text": "use cosmos db trigger and cosmos db bindings uh when there is a change gonna",
    "start": "1566000",
    "end": "1571760"
  },
  {
    "text": "happen uh something will be added or updated in cosmos db those events will be pushed to us but this is much easier",
    "start": "1571760",
    "end": "1578720"
  },
  {
    "text": "than the previous two ways because we just have to publish it on asia and asia going to take care of",
    "start": "1578720",
    "end": "1584640"
  },
  {
    "text": "of everything for us so basically that's the idea we're going to",
    "start": "1584640",
    "end": "1590240"
  },
  {
    "text": "consume those events and aggregate them and create and pre and pre-save those",
    "start": "1590240",
    "end": "1595679"
  },
  {
    "text": "materials to use basically projections so before you go ahead like you're saying like we are going to recreate",
    "start": "1595679",
    "end": "1601840"
  },
  {
    "text": "them and we are going to as you are saying we are going to duplicate our data for different types views now um",
    "start": "1601840",
    "end": "1607520"
  },
  {
    "text": "when i was in school and it was very long ago but i think many people here will remember this like when i was in",
    "start": "1607520",
    "end": "1613120"
  },
  {
    "text": "school i was always taught like never duplicate data you normalize data um so here you are saying now and we are",
    "start": "1613120",
    "end": "1619279"
  },
  {
    "text": "going to actually duplicate our data so what changed and why do we do this this way instead of",
    "start": "1619279",
    "end": "1624400"
  },
  {
    "text": "normalizing basically as i already said it's the the way how asian cosmos db works because they use partitioning",
    "start": "1624400",
    "end": "1631840"
  },
  {
    "text": "um they um basically okay so",
    "start": "1631840",
    "end": "1637679"
  },
  {
    "text": "why we why we have to duplicate our data because we provide the partition key when we",
    "start": "1637679",
    "end": "1643760"
  },
  {
    "text": "store our data and for the cosmos db it means that they have different physical servers it calls",
    "start": "1643760",
    "end": "1650399"
  },
  {
    "text": "physical partitions where they store our data and they guarantee for us the data which",
    "start": "1650399",
    "end": "1655840"
  },
  {
    "text": "is aggregated in the same logical group which is logical partition will be always stored in the same physical",
    "start": "1655840",
    "end": "1660960"
  },
  {
    "text": "server however it doesn't mean that the whole database which that we have gonna be stored in the same place so",
    "start": "1660960",
    "end": "1668480"
  },
  {
    "text": "when we if you have like really massive amount of data our data might be distributed",
    "start": "1668480",
    "end": "1673760"
  },
  {
    "text": "between the different different physical servers servers and um in this way if you will start",
    "start": "1673760",
    "end": "1680240"
  },
  {
    "text": "querying this data we will just end up like hitting different logical partitions and different physical",
    "start": "1680240",
    "end": "1685840"
  },
  {
    "text": "partitions and this will end up in a really significant cost so for us it will be much better way to aggregate",
    "start": "1685840",
    "end": "1691919"
  },
  {
    "text": "this data and duplicate it because the cost force for storing data is like 50",
    "start": "1691919",
    "end": "1697200"
  },
  {
    "text": "cents or something per gigabyte um and cost for request units is much more",
    "start": "1697200",
    "end": "1702399"
  },
  {
    "text": "much more expensive so uh dublicating this data as much as we want like the same amount",
    "start": "1702399",
    "end": "1709200"
  },
  {
    "text": "of data can be represented in different projections can be pre-saved for different clients and this will be my",
    "start": "1709200",
    "end": "1715440"
  },
  {
    "text": "this will be much cheaper than if you will try to calculate it in real time thank you",
    "start": "1715440",
    "end": "1722000"
  },
  {
    "text": "and now we will go to a demo part so we um after we wrote all the data in cosmos db",
    "start": "1722000",
    "end": "1728240"
  },
  {
    "text": "we will have also asia as a function with cosmos db trigger we will react on those",
    "start": "1728240",
    "end": "1734640"
  },
  {
    "text": "changes and we will create two different materialized views two different projections and we will",
    "start": "1734640",
    "end": "1740559"
  },
  {
    "text": "save them back in cosmos db and of course they will be available for",
    "start": "1740559",
    "end": "1745679"
  },
  {
    "text": "our clients and first of all i will go to them",
    "start": "1745679",
    "end": "1752159"
  },
  {
    "text": "oops",
    "start": "1752159",
    "end": "1754480"
  },
  {
    "text": "yep yeah so here we can see",
    "start": "1759039",
    "end": "1765520"
  },
  {
    "text": "that we're going to have a warehouse view trigger and customer view trigger so basically it's two different",
    "start": "1765520",
    "end": "1772320"
  },
  {
    "text": "age functions in this is example of having one function",
    "start": "1772320",
    "end": "1779919"
  },
  {
    "text": "up and two different uh azure functions for our case uh normally like if if we",
    "start": "1779919",
    "end": "1785520"
  },
  {
    "text": "would implement it in real time we would even have two different functions up for two different uh functions because then",
    "start": "1785520",
    "end": "1792080"
  },
  {
    "text": "in this way it's easy easier to scale and they will be absolutely independently just for us for demo",
    "start": "1792080",
    "end": "1797760"
  },
  {
    "text": "purpose we decided to keep it in one function up so we do need to deploy additionally the second one",
    "start": "1797760",
    "end": "1805360"
  },
  {
    "text": "and in this case what we have as i mentioned already we have to specify the container and the database",
    "start": "1805360",
    "end": "1812480"
  },
  {
    "text": "and also the connection string to our cosmos db and we using the list collection name",
    "start": "1812480",
    "end": "1818880"
  },
  {
    "text": "it's a order list container is just to handle the state between azure functions of change feed",
    "start": "1818880",
    "end": "1825279"
  },
  {
    "text": "and this prefix because i'm using two different functions for creating my projections",
    "start": "1825279",
    "end": "1832000"
  },
  {
    "text": "but i don't want to create two different list containers i want to share those resources i can provide this prefix and",
    "start": "1832000",
    "end": "1838320"
  },
  {
    "text": "this means that the same container will be used but they will share basically they will",
    "start": "1838320",
    "end": "1844640"
  },
  {
    "text": "share resources and they will use like this warehouse trigger will use the resources for the warehouse group and",
    "start": "1844640",
    "end": "1852480"
  },
  {
    "text": "the customer view trigger will use resources for the customer group but the same container basically",
    "start": "1852480",
    "end": "1860320"
  },
  {
    "text": "and in this case we have a cosmos db trigger and we also using cosmos db binding",
    "start": "1860320",
    "end": "1867360"
  },
  {
    "text": "so this binding is",
    "start": "1867360",
    "end": "1872480"
  },
  {
    "text": "will provide me a functionality of cosmos client so i'm not going to connect to a specific collection to pull",
    "start": "1872480",
    "end": "1879360"
  },
  {
    "text": "data or write data when my azure function will finish execution i want to get the whole cosmos client because i",
    "start": "1879360",
    "end": "1885519"
  },
  {
    "text": "want to read some data i want to validate it i want to create projection projection for my",
    "start": "1885519",
    "end": "1890640"
  },
  {
    "text": "for my events and i want to save it back in cosmos so this is a bit more complex operation but normally if you would want",
    "start": "1890640",
    "end": "1896480"
  },
  {
    "text": "to just return some data from azure function you can use for example input binding on the start of the azure",
    "start": "1896480",
    "end": "1902960"
  },
  {
    "text": "function pull the data from the container and then return it back to the client if you",
    "start": "1902960",
    "end": "1908159"
  },
  {
    "text": "want so here i'm creating the warehouse service it's just",
    "start": "1908159",
    "end": "1913279"
  },
  {
    "text": "to have some my business logic for handling the events",
    "start": "1913279",
    "end": "1918559"
  },
  {
    "text": "and i'm just i will just iterate uh through the",
    "start": "1918840",
    "end": "1924080"
  },
  {
    "text": "documents here on this lines i will deserialize my object my document back to the object order and i will call on",
    "start": "1924080",
    "end": "1931840"
  },
  {
    "text": "on my service handle warehouse view which is basically will just aggregate all the events and",
    "start": "1931840",
    "end": "1939519"
  },
  {
    "text": "if i already have projection it will just update it if i don't have the projection it will just create a new one",
    "start": "1939519",
    "end": "1946559"
  },
  {
    "text": "the same the same situation is with a customer view trigger absolutely the",
    "start": "1946559",
    "end": "1951679"
  },
  {
    "text": "same logic uh i'm just iterating through the documents again deserializing and and handling the",
    "start": "1951679",
    "end": "1957440"
  },
  {
    "text": "information so if i would show how we can how we actually handling this",
    "start": "1957440",
    "end": "1964559"
  },
  {
    "text": "here is this customer service for example i'm using for customer projection",
    "start": "1966480",
    "end": "1972480"
  },
  {
    "text": "handle customer view as i already said just i'm trying to get the document and see if i already have a projection if i",
    "start": "1972480",
    "end": "1979679"
  },
  {
    "text": "don't have i'm creating a new one if i have i'm just updating the",
    "start": "1979679",
    "end": "1985200"
  },
  {
    "text": "the interesting thing is is how we actually inter interacting with the cosmos db for example",
    "start": "1985200",
    "end": "1992559"
  },
  {
    "text": "uh in in this case uh we have a repository which is basically our data layer how we in in what way we",
    "start": "1992559",
    "end": "1999279"
  },
  {
    "text": "interacting with cosmos db and our data in the containers",
    "start": "1999279",
    "end": "2004399"
  },
  {
    "text": "and i'm providing here id when i want to read the document i'm providing here id which will be id of the document and",
    "start": "2004399",
    "end": "2010960"
  },
  {
    "text": "actually partition key so i know that they're going to be unique so i'm using the same value for",
    "start": "2010960",
    "end": "2016399"
  },
  {
    "text": "both properties and in this case it will be point read operation so",
    "start": "2016399",
    "end": "2022240"
  },
  {
    "text": "it will cost me one request unit if my document will be less than one kilobyte in any size",
    "start": "2022240",
    "end": "2030559"
  },
  {
    "text": "if i want to um if for example my my document does not exist i will receive a cosmos exception that's that's how it",
    "start": "2030720",
    "end": "2037200"
  },
  {
    "text": "works you you cannot specify different behavior and for example return now you have to handle it",
    "start": "2037200",
    "end": "2042720"
  },
  {
    "text": "on your own provide the custom logic for creation and update of document um",
    "start": "2042720",
    "end": "2049280"
  },
  {
    "text": "it's very similar the only difference is here i'm replacing my my projection and",
    "start": "2049280",
    "end": "2054638"
  },
  {
    "text": "here i'm creating a new one we can also say that enable content response and write equal to false it",
    "start": "2054639",
    "end": "2061280"
  },
  {
    "text": "means that it's a bit of optimization it means that i would not receive newly created or updated object",
    "start": "2061280",
    "end": "2068000"
  },
  {
    "text": "and in this case i'm also providing partition key explicitly that's also for for kind of a micro",
    "start": "2068000",
    "end": "2073358"
  },
  {
    "text": "optimization if you would not do this it's also fine because sdk will extract it under the",
    "start": "2073359",
    "end": "2079040"
  },
  {
    "text": "hood on its own and let's go to a portal",
    "start": "2079040",
    "end": "2085760"
  },
  {
    "text": "and you already saw that we have here two additional containers i hope it's",
    "start": "2085760",
    "end": "2091358"
  },
  {
    "text": "yeah so while eldert was running his part of the",
    "start": "2091359",
    "end": "2096560"
  },
  {
    "text": "demo my asia functions were already published on asia so they were already reacting on",
    "start": "2096560",
    "end": "2104000"
  },
  {
    "text": "the changes in the order container so here we have hub monitoring and customer overviews",
    "start": "2104000",
    "end": "2109359"
  },
  {
    "text": "and if you'll have a look on the items yep we have some information",
    "start": "2109359",
    "end": "2115680"
  },
  {
    "text": "as i mentioned already for id of the document and the partition key uh",
    "start": "2115760",
    "end": "2121200"
  },
  {
    "text": "pro partition key property i'm using the same value for the warehouse overview i'm using warehouse",
    "start": "2121200",
    "end": "2127680"
  },
  {
    "text": "id and just today's date it means that i will be able to easily get the document for today and see how many orders were",
    "start": "2127680",
    "end": "2135599"
  },
  {
    "text": "created in my warehouse for today and this is going to be a situation for every warehouse for every day of",
    "start": "2135599",
    "end": "2143200"
  },
  {
    "text": "how our business is up and running basically as you can see here uh i don't",
    "start": "2143200",
    "end": "2148400"
  },
  {
    "text": "really have much information i just have a count how many orders and order numbers",
    "start": "2148400",
    "end": "2153680"
  },
  {
    "text": "that might be helpful for finding for example in which warehouse our order was placed or how many orders",
    "start": "2153680",
    "end": "2160400"
  },
  {
    "text": "in general were placed in this warehouse for maybe some dashboards if someone ever was in the warehouses uh there is",
    "start": "2160400",
    "end": "2166880"
  },
  {
    "text": "always some displays how many orders are incoming how many um yeah many orders were fulfilled and",
    "start": "2166880",
    "end": "2174400"
  },
  {
    "text": "this is basically will allow us to have a point read so this operation will be super cheap",
    "start": "2174400",
    "end": "2179440"
  },
  {
    "text": "and any time it will be available we don't need to calculate anything in",
    "start": "2179440",
    "end": "2184800"
  },
  {
    "text": "real time the same for the customer",
    "start": "2184800",
    "end": "2189359"
  },
  {
    "text": "again we are using customer id and id so customer id properties of our partition",
    "start": "2191920",
    "end": "2197280"
  },
  {
    "text": "key pass and id of the document is the same values",
    "start": "2197280",
    "end": "2202880"
  },
  {
    "text": "and it's again will give us a point read operation super cheap in this case uh",
    "start": "2202880",
    "end": "2208560"
  },
  {
    "text": "document is a bit bigger but still i guess it's not more than one kilobyte but it might be a",
    "start": "2208560",
    "end": "2214480"
  },
  {
    "text": "good idea to divide this document for example for some other needs but in my case i want to be able to show for my",
    "start": "2214480",
    "end": "2221040"
  },
  {
    "text": "customer somewhere on the web page or maybe on the phone the overview of the orders and the articles he he or she",
    "start": "2221040",
    "end": "2228560"
  },
  {
    "text": "ordered so we have all the orders for the specific customer 16 the count of this orders and",
    "start": "2228560",
    "end": "2236400"
  },
  {
    "text": "a bit of information so if you have any articles what was the status what what is the order number basically the only",
    "start": "2236400",
    "end": "2242880"
  },
  {
    "text": "information we need and it's all available in one document",
    "start": "2242880",
    "end": "2249839"
  },
  {
    "text": "and easily accessible so let's go back to the presentation as we",
    "start": "2250000",
    "end": "2256160"
  },
  {
    "text": "already saw it's super easy yep as you already saw it's super easy to",
    "start": "2256160",
    "end": "2262640"
  },
  {
    "text": "uh basically react on the changes in cosmos db react on on this events",
    "start": "2262640",
    "end": "2269359"
  },
  {
    "text": "aggregate them and write them back in cosmos db so in our case we just created easily two projections um without",
    "start": "2269359",
    "end": "2277359"
  },
  {
    "text": "massive amount of code we just used azure functions with those all those triggers and bindings a bit of business",
    "start": "2277359",
    "end": "2284160"
  },
  {
    "text": "logic and we are ready to go we are ready to expose our data for the clients",
    "start": "2284160",
    "end": "2289359"
  },
  {
    "text": "so we going to to the end of our session and",
    "start": "2289359",
    "end": "2295280"
  },
  {
    "text": "do a bit of summarizing and finalizing a couple of key takeaways",
    "start": "2295280",
    "end": "2300320"
  },
  {
    "text": "so we already saw the cosmos db could be a great central append only persistent data",
    "start": "2300320",
    "end": "2305599"
  },
  {
    "text": "store we can easily insert all the in all the documents all the events which are happening with our data and",
    "start": "2305599",
    "end": "2312160"
  },
  {
    "text": "afterwards we can operate and consume those events in in the way as we want",
    "start": "2312160",
    "end": "2317280"
  },
  {
    "text": "yeah so when you are running into these like scenarios where you need like white heavy workloads do have a look at this",
    "start": "2317280",
    "end": "2324000"
  },
  {
    "text": "pattern because like i said this pattern is really optimized for that it's not only usable for that but it's definitely",
    "start": "2324000",
    "end": "2329200"
  },
  {
    "text": "optimized with those kind of patterns where those kind scenarios where you have millions of producers there's a lot",
    "start": "2329200",
    "end": "2334640"
  },
  {
    "text": "of events coming in and that you just want to be able to replay those events to actually get to your store to your object",
    "start": "2334640",
    "end": "2341520"
  },
  {
    "text": "as we have seen like on azure it's actually quite easy to implement this it's all pass servers that we used so",
    "start": "2341520",
    "end": "2346720"
  },
  {
    "text": "everything is managed for you you don't have to think about infrastructure anything like that",
    "start": "2346720",
    "end": "2351920"
  },
  {
    "text": "it's all very easily usable and especially especially when you start using those bindings for example in",
    "start": "2351920",
    "end": "2357200"
  },
  {
    "text": "functions you really can just focus on your business logic instead of having to focus on all the",
    "start": "2357200",
    "end": "2363119"
  },
  {
    "text": "things around it and what we see in practice like i've been working with many different clients that use these services elena has been",
    "start": "2363119",
    "end": "2369680"
  },
  {
    "text": "working with different projects on this it just makes things much faster much easier",
    "start": "2369680",
    "end": "2376000"
  },
  {
    "text": "and so actually are you just creating value for the business instead of spending money them money for the business",
    "start": "2376000",
    "end": "2381359"
  },
  {
    "text": "you for uh so it's easy to prepare much less views for",
    "start": "2381359",
    "end": "2387680"
  },
  {
    "text": "various consumers uh so couple of benefits from this like for event sourcing in general first of",
    "start": "2387680",
    "end": "2394000"
  },
  {
    "text": "all we have the same set of data we have single source of truths we have all the events and we",
    "start": "2394000",
    "end": "2399760"
  },
  {
    "text": "generate all our projections based on the same amount of data this also could be great for the smog testing for",
    "start": "2399760",
    "end": "2405680"
  },
  {
    "text": "example if you want to replay our events again from the specific point of time or",
    "start": "2405680",
    "end": "2410720"
  },
  {
    "text": "maybe from very beginning we can easily do this with the change fit we can just connect to change feed replay it and see",
    "start": "2410720",
    "end": "2417359"
  },
  {
    "text": "what happened and in what period of time the problem happened",
    "start": "2417359",
    "end": "2422880"
  },
  {
    "text": "so and also when we adding for example new consumers the new clients uh it's",
    "start": "2422880",
    "end": "2429040"
  },
  {
    "text": "easy for us to prepare the prepare these projections prepare those materials use again we can",
    "start": "2429040",
    "end": "2434720"
  },
  {
    "text": "just connect to change feed pull the data and be ready to go with the new clients yes",
    "start": "2434720",
    "end": "2440400"
  },
  {
    "text": "and so finally have a look at the ecosystem if you want to like i said",
    "start": "2440400",
    "end": "2446000"
  },
  {
    "text": "focus more on value and less on spending money we showed you three serves today but of course there's at the moment like",
    "start": "2446000",
    "end": "2452560"
  },
  {
    "text": "i think 250 plus ish shirts out there and i always see like a",
    "start": "2452560",
    "end": "2459040"
  },
  {
    "text": "box of lego like there's many different pieces and you can put them all together and start building your own solutions by",
    "start": "2459040",
    "end": "2465839"
  },
  {
    "text": "using those services that make sense for your scenarios so um the service needs to show you",
    "start": "2465839",
    "end": "2471280"
  },
  {
    "text": "there are definitely very amazing services but there's many more other very nice services out there that you could use for this so once you start",
    "start": "2471280",
    "end": "2477920"
  },
  {
    "text": "looking in your own scenarios definitely have a look at all those different services start mapping them microsoft already has some help for you",
    "start": "2477920",
    "end": "2484240"
  },
  {
    "text": "on this like there's some websites and um overviews like okay if you want to iot these are the servers that you need to look into stream processing there's",
    "start": "2484240",
    "end": "2490480"
  },
  {
    "text": "these services but have a look at those services have a look at your scenario and start mapping those services on your scenario",
    "start": "2490480",
    "end": "2496720"
  },
  {
    "text": "so that you actually create the best uh the best solution for what you are",
    "start": "2496720",
    "end": "2501839"
  },
  {
    "text": "trying to accomplish yeah and also that there is a different services like for",
    "start": "2501839",
    "end": "2507520"
  },
  {
    "text": "for us for me when i was working in the product company was very important to have a real-time aggregation basically",
    "start": "2507520",
    "end": "2513440"
  },
  {
    "text": "when you have warehouse system you want to be able to be able at any point of time to say do we still have this",
    "start": "2513440",
    "end": "2519200"
  },
  {
    "text": "article do we do we have enough products and can we really fulfill our orders and",
    "start": "2519200",
    "end": "2524960"
  },
  {
    "text": "for example with cosmosdb it's possible to have that kind of aggregations but it would be a",
    "start": "2524960",
    "end": "2530160"
  },
  {
    "text": "bit expensive because we will need to all the time in real time calculate it and what what is great with about asia",
    "start": "2530160",
    "end": "2536240"
  },
  {
    "text": "ecosystem that they have apache spark for example uh can connect in um",
    "start": "2536240",
    "end": "2541440"
  },
  {
    "text": "uh under the hood to the uh azure cosmos db replicas and can have those",
    "start": "2541440",
    "end": "2546720"
  },
  {
    "text": "calculations in real time for us and it's like that's basically the purpose of of apache spark to do this so uh have",
    "start": "2546720",
    "end": "2554960"
  },
  {
    "text": "a look always around the features maybe some things are already implemented and ready ready for us to use",
    "start": "2554960",
    "end": "2561280"
  },
  {
    "text": "and um yeah also it's uh they have a free tire it's a cosmos db is available",
    "start": "2561280",
    "end": "2567680"
  },
  {
    "text": "for testing so before it was the case like it's too expensive to try it's too expensive to",
    "start": "2567680",
    "end": "2573280"
  },
  {
    "text": "to work with this but now it's not the case so you can pay as you use and you can also uh first months it's uh free",
    "start": "2573280",
    "end": "2580960"
  },
  {
    "text": "yeah actually the three tiers is actually free for as long as you want uh up to five gigabytes and i think like",
    "start": "2580960",
    "end": "2586640"
  },
  {
    "text": "400 requests units so they actually changed it also like they induce a new tiers so you have indeed the free tier",
    "start": "2586640",
    "end": "2593119"
  },
  {
    "text": "which is like you can use as long as you want if you have small data sets surface if you want to pay as you go or",
    "start": "2593119",
    "end": "2598960"
  },
  {
    "text": "just normal so to say where you actually pay for your consumption and you pay for x amount of your request",
    "start": "2598960",
    "end": "2604720"
  },
  {
    "text": "units yeah so and this thanks a lot for the attention uh here's",
    "start": "2604720",
    "end": "2611440"
  },
  {
    "text": "our details linkedin or twitter feel free to um to contact us if you have any",
    "start": "2611440",
    "end": "2617440"
  },
  {
    "text": "questions or comments and thanks aldad for for being an amazing co-speaker it was really a",
    "start": "2617440",
    "end": "2623440"
  },
  {
    "text": "pleasure to be here today and enjoy the rest of the conference yes so thank you everyone uh thank you for being here of",
    "start": "2623440",
    "end": "2629520"
  },
  {
    "text": "course thank you for being at the conference it's really good to actually be here back in oslo again i was here in 2019",
    "start": "2629520",
    "end": "2636240"
  },
  {
    "text": "and i really missed this last year so i'm very happy we can do this again um yeah so also like i said the code is",
    "start": "2636240",
    "end": "2642079"
  },
  {
    "text": "there go to my our github get the code so you can deploy the services all the infrastructures coaches there all the",
    "start": "2642079",
    "end": "2648400"
  },
  {
    "text": "codes that you that we just showed you today is there so you can use this yourself so i hope you enjoyed the session um if",
    "start": "2648400",
    "end": "2654240"
  },
  {
    "text": "you did please leave a green card if you did not like the session for whatever reason let us know as well so",
    "start": "2654240",
    "end": "2659680"
  },
  {
    "text": "we can improve on this because like like i said we can always be better we can always improve so let us know",
    "start": "2659680",
    "end": "2666640"
  },
  {
    "text": "and yeah enjoy the rest of the conference and we still have some time for questions so if there are any questions let us know",
    "start": "2666640",
    "end": "2671839"
  },
  {
    "text": "and otherwise we can do them afterwards as well yep okay so",
    "start": "2671839",
    "end": "2676960"
  },
  {
    "text": "azure cosmos change the feed does that have its own event source because let's say i want to create a new projection of",
    "start": "2676960",
    "end": "2683839"
  },
  {
    "text": "an existing event source can i then replay that change speed for that government relationship yes so the",
    "start": "2683839",
    "end": "2689359"
  },
  {
    "text": "question can i replay the event uh the uh change feed uh when i add a new",
    "start": "2689359",
    "end": "2694560"
  },
  {
    "text": "projection or anything like that so is it like also events to a sourcing pattern and elena can yeah",
    "start": "2694560",
    "end": "2700079"
  },
  {
    "text": "yeah so basically that's why we we were implementing event sourcing with",
    "start": "2700079",
    "end": "2706560"
  },
  {
    "text": "cosmos db because it was quite interesting case the change fit is already even sourcing on its own so",
    "start": "2706560",
    "end": "2712319"
  },
  {
    "text": "every time you add data it doesn't matter if you implement event sourcing and you just append the documents or you",
    "start": "2712319",
    "end": "2718319"
  },
  {
    "text": "decided that you will update your documents every time the change fit its event sourcing and it's always stored",
    "start": "2718319",
    "end": "2723760"
  },
  {
    "text": "the whole history so even if you created that projection and you were updating them over and over again the change fit",
    "start": "2723760",
    "end": "2729280"
  },
  {
    "text": "will store all the events so for even for your projection so you can easily replay with the original data or with those",
    "start": "2729280",
    "end": "2736079"
  },
  {
    "text": "projections anytime you want so okay",
    "start": "2736079",
    "end": "2740640"
  },
  {
    "text": "yep there's there's like five levels of consistency i was with cosmos db and",
    "start": "2744839",
    "end": "2751359"
  },
  {
    "text": "uh basically it depends on your use case but there is like from the strong consistency to eventual uh with the",
    "start": "2751359",
    "end": "2757359"
  },
  {
    "text": "session and two in between but yeah five different levels and um it",
    "start": "2757359",
    "end": "2762880"
  },
  {
    "text": "all depends on the use case if you really need like super super consistent data then strong consistency and they",
    "start": "2762880",
    "end": "2768720"
  },
  {
    "text": "have a quorum basically for replicas they're gonna replicate uh one one of the replicas will replicate to a",
    "start": "2768720",
    "end": "2774240"
  },
  {
    "text": "different region and yeah you we will have no problems with this so question over here",
    "start": "2774240",
    "end": "2780000"
  },
  {
    "text": "do you have any idea of the relative cost difference for an enterprise solution that's running a classic setup",
    "start": "2780000",
    "end": "2786560"
  },
  {
    "text": "versus a solution that's run using event sourcing using the service yep yeah so the question is uh what is about",
    "start": "2786560",
    "end": "2794240"
  },
  {
    "text": "to do of course difference like if we are using this like with old style with sql and things like that versus if you",
    "start": "2794240",
    "end": "2800400"
  },
  {
    "text": "are using like these kind of services with event sourcing and customers to be um like i'm an architect so it always",
    "start": "2800400",
    "end": "2806160"
  },
  {
    "text": "depends but yeah so definitely what you have to look into when you start actually modeling your",
    "start": "2806160",
    "end": "2812400"
  },
  {
    "text": "solution have a look into those costs and question b actually has a very nice cost calculator",
    "start": "2812400",
    "end": "2818000"
  },
  {
    "text": "where you can get like you can create a message like okay this is about how my message looks like and this is how many",
    "start": "2818000",
    "end": "2824079"
  },
  {
    "text": "times per day i expect this to have to answer this how many times to read this and you will for custom cosmodb will get",
    "start": "2824079",
    "end": "2829680"
  },
  {
    "text": "like a nice ovok this is how much we uh expect you to spend about um so of course uh materialized views",
    "start": "2829680",
    "end": "2836960"
  },
  {
    "text": "that elena showed you today is one of the ways you can actually get that cost down because instead of every time reading that whole collection you're",
    "start": "2836960",
    "end": "2843599"
  },
  {
    "text": "just getting okay this is actually the view i want this is the information i want and so this is one of those ways",
    "start": "2843599",
    "end": "2848800"
  },
  {
    "text": "that you can get the cost down so there's not like a single answer i can give you like okay customers b is",
    "start": "2848800",
    "end": "2854800"
  },
  {
    "text": "more expensive or less expensive than sql because really depends on how do you model a solution i do think it's very important that when",
    "start": "2854800",
    "end": "2861200"
  },
  {
    "text": "you start looking at this and maybe if you come from a background where you're using sql actually do go in like have",
    "start": "2861200",
    "end": "2868319"
  },
  {
    "text": "do read about the different services understand how they work and then actually build the optimal solution with",
    "start": "2868319",
    "end": "2874000"
  },
  {
    "text": "this because if you just go okay i'm going for sql i will just now make this into documents store it in our customers",
    "start": "2874000",
    "end": "2880000"
  },
  {
    "text": "b and then just using my same queries and stuff like that it will definitely be more expensive so that's why it's so",
    "start": "2880000",
    "end": "2885040"
  },
  {
    "text": "important to actually understand how these services work um and how we can actually implement",
    "start": "2885040",
    "end": "2890160"
  },
  {
    "text": "those best solutions the best way cool",
    "start": "2890160",
    "end": "2895760"
  },
  {
    "text": "so i know a couple over a question about the here",
    "start": "2895760",
    "end": "2900800"
  },
  {
    "text": "under cosmos db so you have sql cassandra i think right yeah that's apis",
    "start": "2900800",
    "end": "2906079"
  },
  {
    "text": "basically you can use so so if you have an on-premise cassandra datastore today",
    "start": "2906079",
    "end": "2911200"
  },
  {
    "text": "could you then easily the idea is that you should be able to",
    "start": "2911200",
    "end": "2917119"
  },
  {
    "text": "do this uh yeah of course there there is um they have they provide those five",
    "start": "2917119",
    "end": "2923440"
  },
  {
    "text": "different apis and they they say that you should be able to easily exactly for this purpose if you have on-premise then",
    "start": "2923440",
    "end": "2930079"
  },
  {
    "text": "you can easily migrate to cloud and this should that's how it should work but of course i heard that there was a couple",
    "start": "2930079",
    "end": "2935760"
  },
  {
    "text": "of situations when you actually start doing this there might be some complications but nothing that cannot be",
    "start": "2935760",
    "end": "2940800"
  },
  {
    "text": "solved so yes that's that's how it should work and that's how but don't expect that it will be like yeah",
    "start": "2940800",
    "end": "2947119"
  },
  {
    "text": "so also one addition on that uh do have a look at documentation of microsoft because they actually explain like what",
    "start": "2947119",
    "end": "2952960"
  },
  {
    "text": "are the uh how far they are compatible with which versions of the apis and what are like",
    "start": "2952960",
    "end": "2958559"
  },
  {
    "text": "the issues you might run into but if it's the case and you really want to migrate from on-premise to cloud and",
    "start": "2958559",
    "end": "2964880"
  },
  {
    "text": "with the cosmos db and so on they also support they will provide the support they will provide a like kind of consultation like",
    "start": "2964880",
    "end": "2971920"
  },
  {
    "text": "do you really need to do this maybe not change your mind but i'm pretty sure that it should be quite easy",
    "start": "2971920",
    "end": "2980440"
  },
  {
    "text": "um there will be a delay uh because basically to generate the projection uh you have so you have one asia",
    "start": "2986800",
    "end": "2993280"
  },
  {
    "text": "function this variety data and then change feed re like which is reacting and this and you have another another",
    "start": "2993280",
    "end": "2998400"
  },
  {
    "text": "asian function which is uh generating projection and again writing in in cosmos db and then you will have",
    "start": "2998400",
    "end": "3004160"
  },
  {
    "text": "probably another asia function which will basically react on those projections and will populate it to to",
    "start": "3004160",
    "end": "3010400"
  },
  {
    "text": "the clients for example you can also have azure function with like signalr for example uh but it's",
    "start": "3010400",
    "end": "3017599"
  },
  {
    "text": "still like three layers basically and of course they will be delayed they might be delay for warm up of the function if",
    "start": "3017599",
    "end": "3023599"
  },
  {
    "text": "it's just started like you know a morning like some order started to income and then there's gonna be a delay",
    "start": "3023599",
    "end": "3030000"
  },
  {
    "text": "but uh it depends of course on a like i guess pricing tier like the what's the",
    "start": "3030000",
    "end": "3035040"
  },
  {
    "text": "plan might be significant might be not it all depends on how how you want to actually",
    "start": "3035040",
    "end": "3040880"
  },
  {
    "text": "implement it but it's definitely milliseconds might be yeah so indeed if you have something that's like very like",
    "start": "3040880",
    "end": "3047200"
  },
  {
    "text": "should be very low latency uh customv itself provides i think like 99 percentile will be under 10 milliseconds",
    "start": "3047200",
    "end": "3054880"
  },
  {
    "text": "for functions you would probably want to go to the premium plan because then you actually get like the preformed functions",
    "start": "3054880",
    "end": "3060240"
  },
  {
    "text": "so you don't have that warm up the delay of about like a second or something like whatever it is these days",
    "start": "3060240",
    "end": "3066160"
  },
  {
    "text": "but yeah so if you really look into that like do have a look at like more premium tiers because they actually have some solutions for this",
    "start": "3066160",
    "end": "3072319"
  },
  {
    "text": "and in that case i would expect also it would make sense first in the back",
    "start": "3072319",
    "end": "3078680"
  },
  {
    "text": "is that you actually can get that locked by updating but if you aggregate the",
    "start": "3082400",
    "end": "3089839"
  },
  {
    "text": "views and store these aggregated views don't you have to say um so yeah you can",
    "start": "3089839",
    "end": "3097920"
  },
  {
    "text": "once again this is really about how you also uh because we just showed you today okay how do we actually do in fact",
    "start": "3097920",
    "end": "3103760"
  },
  {
    "text": "sourcing there are some other things that you need to do for this for example event storming we're actually looking at",
    "start": "3103760",
    "end": "3109119"
  },
  {
    "text": "the into this kind of things like okay where can our events come from uh can they be like uh simultaneous and",
    "start": "3109119",
    "end": "3115520"
  },
  {
    "text": "things like that so you can still walk into this but if you think about this beforehand it's easier to solve",
    "start": "3115520",
    "end": "3122240"
  },
  {
    "text": "this than with grudge there is also another thing is uh for example when you do aggregate the events for the",
    "start": "3122240",
    "end": "3128079"
  },
  {
    "text": "projections the first thing is that uh you can have a batch of events you can receive like bulk basically of the",
    "start": "3128079",
    "end": "3134880"
  },
  {
    "text": "events and it's already like when you need to to do an update of thousand times or you received a thousand events",
    "start": "3134880",
    "end": "3140400"
  },
  {
    "text": "and you do update once so that's one thing which can make it really really less possible",
    "start": "3140400",
    "end": "3146160"
  },
  {
    "text": "and if there is a problem and if there is a really happening that there is a i never met that kind of situation but",
    "start": "3146160",
    "end": "3152160"
  },
  {
    "text": "it could be there is a conflict resolution in cosmos db they can have you can either uh provide the specific",
    "start": "3152160",
    "end": "3158559"
  },
  {
    "text": "rules how to pro how to solve that kind of issues or you can manually solve them so but it's like",
    "start": "3158559",
    "end": "3164720"
  },
  {
    "text": "really you have to create this case um yep",
    "start": "3164720",
    "end": "3170880"
  },
  {
    "text": "uh what kind of api do you actually use in your samples",
    "start": "3170880",
    "end": "3176000"
  },
  {
    "text": "default one yeah the default one so you have cosmos db",
    "start": "3176160",
    "end": "3183599"
  },
  {
    "text": "and you have different apis the mongodb cassandra table and sql and gremlin okay",
    "start": "3183599",
    "end": "3191880"
  },
  {
    "text": "yes yes yes yes yes but basically um i mean sql api but it's document store schema-less so you can operate you can",
    "start": "3197440",
    "end": "3205119"
  },
  {
    "text": "um it's basically to make it more comfortable for people from the like sql world uh you can provide sql queries",
    "start": "3205119",
    "end": "3212559"
  },
  {
    "text": "you can write it but it's not recommended twice a recommended way is basically like cqrs as as we were doing",
    "start": "3212559",
    "end": "3218400"
  },
  {
    "text": "we write we wrote the data we wrote the events and then we separated read and write operations uh created much less",
    "start": "3218400",
    "end": "3224880"
  },
  {
    "text": "use those projections and that's how we read it but not like querying in real",
    "start": "3224880",
    "end": "3229920"
  },
  {
    "text": "time and stuff stuff like this so it's a lost question and if i miss you i try to look around but if i didn't issue just",
    "start": "3229920",
    "end": "3235839"
  },
  {
    "text": "come up the stage or we can talk outside so if you need a really high consistency",
    "start": "3235839",
    "end": "3242000"
  },
  {
    "text": "it would be better it could be could be i mean what's the",
    "start": "3242000",
    "end": "3247200"
  },
  {
    "text": "use case of course it's if you it's yeah the couple of question times i had this",
    "start": "3247200",
    "end": "3252720"
  },
  {
    "text": "question like when would you use the cosmos db um of course i would not be like every time",
    "start": "3252720",
    "end": "3258960"
  },
  {
    "text": "let's use cosmos just because uh there is a use case when you really don't need because it will be overheard for example",
    "start": "3258960",
    "end": "3264880"
  },
  {
    "text": "but if i do have the the kind of use cases that i have my data high volume data hybrid operation and i need to",
    "start": "3264880",
    "end": "3272480"
  },
  {
    "text": "represent my data for read operations in many different projections many different views for me cosmos would be a",
    "start": "3272480",
    "end": "3277599"
  },
  {
    "text": "logical like good way to go but actually it's not just because of cosmos db it's more like event sourcing",
    "start": "3277599",
    "end": "3284400"
  },
  {
    "text": "and secures but if you don't really need that kind of",
    "start": "3284400",
    "end": "3289760"
  },
  {
    "text": "functionality it might be really just be too too complicated and normal database is also fine and of",
    "start": "3289760",
    "end": "3296000"
  },
  {
    "text": "course like once again architects so it really depends on your scenario um so if you have like relational data that's",
    "start": "3296000",
    "end": "3302480"
  },
  {
    "text": "like very relational and like that kind of data yeah then just put into sql if you are working like with documents or",
    "start": "3302480",
    "end": "3308240"
  },
  {
    "text": "like graphs or stuff like that like this where cosmos db really shines and so as always it really depends on your scenario they have they have described",
    "start": "3308240",
    "end": "3314880"
  },
  {
    "text": "scenarios in documentation if i remember they were like really have a couple of the couple of scenarios when they say",
    "start": "3314880",
    "end": "3320160"
  },
  {
    "text": "okay this is really would be good fit the rest you can think for yourself so i would say",
    "start": "3320160",
    "end": "3326400"
  },
  {
    "text": "it will be nice to check it there on documentation so with that uh let's close session like i said if you have any questions just",
    "start": "3326400",
    "end": "3332559"
  },
  {
    "text": "come up to us we can talk here we can talk outside wherever i hope you enjoyed sessions session i",
    "start": "3332559",
    "end": "3338160"
  },
  {
    "text": "hope you enjoyed the rest of the sessions enjoy the conference elena thank you and thank you for everyone for",
    "start": "3338160",
    "end": "3343599"
  },
  {
    "text": "being here thank you [Applause]",
    "start": "3343599",
    "end": "3350770"
  },
  {
    "text": "you",
    "start": "3356880",
    "end": "3358960"
  }
]