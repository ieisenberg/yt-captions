[
  {
    "text": "all right it's 20 after so let's get going we're going to talk today about uh acid in distributed nosql",
    "start": "240",
    "end": "8000"
  },
  {
    "text": "specifically so we're going to start out here we are again",
    "start": "8000",
    "end": "13679"
  },
  {
    "text": "you or me are starting a new project or refactor and you've reached the point where you",
    "start": "13679",
    "end": "19279"
  },
  {
    "text": "need to select a database you take the blue pill and you stick",
    "start": "19279",
    "end": "24800"
  },
  {
    "text": "with the databases that you've always known and the story ends there believe what you want to believe about",
    "start": "24800",
    "end": "30880"
  },
  {
    "text": "no sequel you take the red pill and you go down the nosql rabbit hole and see how deep it goes",
    "start": "30880",
    "end": "37440"
  },
  {
    "text": "there's a lot of reasons that most of us still take that blue pill over and over and over again well",
    "start": "37440",
    "end": "44160"
  },
  {
    "text": "because maybe it's the right tool maybe that relational database that we've used for years is still the right tool",
    "start": "44160",
    "end": "49520"
  },
  {
    "text": "for this next project or maybe it's because the corporation that we work for says we have to use",
    "start": "49520",
    "end": "54960"
  },
  {
    "text": "this database it's the only database we're allowed to use so we have to use them or maybe it's because the last time that",
    "start": "54960",
    "end": "62079"
  },
  {
    "text": "you researched nosql databases you found them to be lacking in features and",
    "start": "62079",
    "end": "67600"
  },
  {
    "text": "community and whatever else so you just sort of put them aside and said ah i'm not going to worry about that or",
    "start": "67600",
    "end": "73760"
  },
  {
    "text": "maybe it's because you don't want to give up the expressiveness of the sql language and i'm not going to talk about that",
    "start": "73760",
    "end": "79119"
  },
  {
    "text": "today but i absolutely 100 agree with you on that the sql language is a tremendous language for working with data",
    "start": "79119",
    "end": "86240"
  },
  {
    "text": "and maybe it's because this is what i want to talk about today maybe it's because nosql databases you heard or read",
    "start": "86240",
    "end": "93520"
  },
  {
    "text": "somewhere that they don't have acid guarantees specifically acid transactions so if they don't have",
    "start": "93520",
    "end": "98560"
  },
  {
    "text": "transactions how could it possibly be any good",
    "start": "98560",
    "end": "103200"
  },
  {
    "text": "well in the response from no sql advocates like myself has been something like this",
    "start": "103840",
    "end": "108880"
  },
  {
    "text": "don't try to bend the spoon don't treat no sequel like it's relational there is no spoon",
    "start": "108880",
    "end": "116240"
  },
  {
    "text": "you probably don't need a transaction as much as you think you do now i think there's a lot of",
    "start": "116240",
    "end": "121280"
  },
  {
    "text": "truth to that it's not 100 of the story but i'm going to talk about this today and that there is some truth to this",
    "start": "121280",
    "end": "127040"
  },
  {
    "text": "that the reliance on transactions may not be as great as you think it is with different types of databases but",
    "start": "127040",
    "end": "134480"
  },
  {
    "text": "what if i told you that many popular nosql databases distributed databases",
    "start": "134480",
    "end": "140720"
  },
  {
    "text": "have acid transactions now and have had them for a while so if you haven't looked into them this",
    "start": "140720",
    "end": "146959"
  },
  {
    "text": "might be a good time to look back into those today i want to take you inside of a",
    "start": "146959",
    "end": "152239"
  },
  {
    "text": "sparring program i'm going to talk with you about what acid means we're going to talk about the challenges",
    "start": "152239",
    "end": "157519"
  },
  {
    "text": "of implementing acid in a nosql database specifically a distributed nosql",
    "start": "157519",
    "end": "163040"
  },
  {
    "text": "database i'm going to cover the reasons why transactions may not be as big of a deal as you think",
    "start": "163040",
    "end": "168959"
  },
  {
    "text": "but i'm also going to show you what acid means and how nosql databases have been",
    "start": "168959",
    "end": "175680"
  },
  {
    "text": "working with acid what acid means to nosql and how they've been adding transactions to distributed nosql",
    "start": "175680",
    "end": "181360"
  },
  {
    "text": "databases i'm going to take a deep dive on one of them couchbase because i think it's a really remarkable",
    "start": "181360",
    "end": "187120"
  },
  {
    "text": "approach that's different from other approaches out there and it's going to help demonstrate the trade-offs",
    "start": "187120",
    "end": "193519"
  },
  {
    "text": "and we're going to touch on other databases that do we're going to dive deep into couch base today so we're going to learn",
    "start": "193519",
    "end": "198560"
  },
  {
    "text": "the kung fu of acid mr anderson so these are questions i ask myself a",
    "start": "198560",
    "end": "205200"
  },
  {
    "text": "lot so i put them in a slide to remind me my name is matthew groves i work as a developer advocate for couchbase on",
    "start": "205200",
    "end": "211120"
  },
  {
    "text": "microsoft mvp i'm a pluralsight author et cetera et cetera most importantly i'm a father of two",
    "start": "211120",
    "end": "216159"
  },
  {
    "text": "and a husband um i try to do uh well at those jobs but i fall short all the time and i",
    "start": "216159",
    "end": "223760"
  },
  {
    "text": "am at ndc oslo which i told you i'm really excited about being here i do want to point out right away just",
    "start": "223760",
    "end": "229120"
  },
  {
    "text": "to get this out of the way that couch base is not couchdb they're not the same piece of software really at all uh the the name",
    "start": "229120",
    "end": "236319"
  },
  {
    "text": "is kind of just a remnants of long past history so if you hear me talking about",
    "start": "236319",
    "end": "241680"
  },
  {
    "text": "couchbase i am not talking about couchdb and vice versa this is my agenda for",
    "start": "241680",
    "end": "246879"
  },
  {
    "text": "today we're going to talk about transactions and relational just a review about what they mean",
    "start": "246879",
    "end": "251920"
  },
  {
    "text": "and how they work and and why they're so important we're going to spend a little bit of time talking about why nosql hopefully",
    "start": "251920",
    "end": "258639"
  },
  {
    "text": "uh some of the reasons for these you've probably heard of them in the past and we're going to just touch on them",
    "start": "258639",
    "end": "264080"
  },
  {
    "text": "briefly as a refresher and then we're going to dive into what actually acid is and why is it so challenging and why is",
    "start": "264080",
    "end": "269919"
  },
  {
    "text": "it so challenging with the distributed database i've got a demo for you to walk you through a transaction to kind of show",
    "start": "269919",
    "end": "275600"
  },
  {
    "text": "you the happy path as well as some of the edge cases and at the end i've got",
    "start": "275600",
    "end": "280639"
  },
  {
    "text": "a summary and some other resources for you to really dive deep into that rabbit hole if you want to",
    "start": "280639",
    "end": "286080"
  },
  {
    "text": "and if we have time for questions i will take them here on the video and i'm also spend as much time as we",
    "start": "286080",
    "end": "291919"
  },
  {
    "text": "need to in slack ndc slack answering questions as well",
    "start": "291919",
    "end": "297759"
  },
  {
    "text": "so let's talk about transactions in a relational database and let's look at an example of a table",
    "start": "297759",
    "end": "305199"
  },
  {
    "text": "here in a relational database now third normal form is the way that we build schemas in relational databases so",
    "start": "305199",
    "end": "311840"
  },
  {
    "text": "even if you've never heard that term before you if you're using a relational database you're probably designing",
    "start": "311840",
    "end": "316960"
  },
  {
    "text": "with third normal form now i'm not going to go into all the details there you may be even higher normal form like",
    "start": "316960",
    "end": "322160"
  },
  {
    "text": "boyce cod or fourth or even fifth in some really crazy situations but just to",
    "start": "322160",
    "end": "327360"
  },
  {
    "text": "review third normal form is that it must be at least second normal form and then that must be at least first normal form",
    "start": "327360",
    "end": "334400"
  },
  {
    "text": "now this table here on the screen is not even in first normal form uh one of the reasons is we've we've got",
    "start": "334400",
    "end": "340400"
  },
  {
    "text": "this repeating group here of items and intuitively you probably see the issue with this the problem with",
    "start": "340400",
    "end": "347039"
  },
  {
    "text": "this so the first of which is well what if i want to buy more than three items i don't have enough columns in my table",
    "start": "347039",
    "end": "354240"
  },
  {
    "text": "for that so that's not a very good design for relational but so a more correct design would be to",
    "start": "354240",
    "end": "361280"
  },
  {
    "text": "split that shopping cart data into two tables so each item gets its own row in a separate table and there's a",
    "start": "361280",
    "end": "368240"
  },
  {
    "text": "foreign key we introduce to point that row to the row it belongs to in the other table so",
    "start": "368240",
    "end": "374000"
  },
  {
    "text": "the solution to uh designing our data to be more correct and handle",
    "start": "374000",
    "end": "379120"
  },
  {
    "text": "a you know handle the use case better is to split it up into pieces",
    "start": "379120",
    "end": "384800"
  },
  {
    "text": "and then this leads to why transactions are super important so if we want to create and save a new",
    "start": "384800",
    "end": "391600"
  },
  {
    "text": "shopping cart to the database we have to go through a number of steps so first of all we have to insert a row",
    "start": "391600",
    "end": "397039"
  },
  {
    "text": "into the shopping cart so i've just got like an id and a date created there could be other information in there",
    "start": "397039",
    "end": "402080"
  },
  {
    "text": "but it's sort of a shopping cart container we're going to insert one row into shopping cart items so we're assuming",
    "start": "402080",
    "end": "408400"
  },
  {
    "text": "that the users maybe check two items and they want to add those to a shopping cart so we add a row to the",
    "start": "408400",
    "end": "413759"
  },
  {
    "text": "shopping cart items table then there's another row in the shopping cart table to add another item",
    "start": "413759",
    "end": "418960"
  },
  {
    "text": "in there and then finally we say okay commit we save that data that's the shopping cart right now the the customer has added two",
    "start": "418960",
    "end": "425919"
  },
  {
    "text": "items to the cart and and we're ready to go commit just tells the database okay we're done",
    "start": "425919",
    "end": "430960"
  },
  {
    "text": "with this whole operation it's all part of one thing it's all atomic so we're at the end of that all right",
    "start": "430960",
    "end": "439599"
  },
  {
    "text": "hopefully hopefully you're familiar with that concept unfortunately that's not always how things work so let's try it",
    "start": "439599",
    "end": "445840"
  },
  {
    "text": "again and see what happens so we're going to insert a row into shopping cart and there we go the date is in shopping cart",
    "start": "445840",
    "end": "451759"
  },
  {
    "text": "we're going to insert a row into shopping cart items next and oh uh oh what happened oh we have a blue",
    "start": "451759",
    "end": "458479"
  },
  {
    "text": "screen something crashed oh something went wrong oh this is bad bad bad so we have a crash",
    "start": "458479",
    "end": "464319"
  },
  {
    "text": "right in the middle of our transaction we're trying to put this data into the database so we've got to crash um if this all",
    "start": "464319",
    "end": "471919"
  },
  {
    "text": "takes place inside so right now the data is in an inconsistent state we've got a shopping cart but none of the items that we",
    "start": "471919",
    "end": "477440"
  },
  {
    "text": "wanted to add are there if this takes place inside of a transaction no problem we can just roll back the transaction",
    "start": "477440",
    "end": "486000"
  },
  {
    "text": "we're safe so it's just either the whole thing happens or none of it happens if the database",
    "start": "486000",
    "end": "492560"
  },
  {
    "text": "itself crashed that's not a problem it wasn't actually committed so the database doesn't consider it to be you know committed data it's not",
    "start": "492560",
    "end": "499840"
  },
  {
    "text": "complete yet if something else went wrong in our program like an exception maybe or something like that we can detect",
    "start": "499840",
    "end": "506400"
  },
  {
    "text": "that catch that exception and then explicitly call a rollback and bail out",
    "start": "506400",
    "end": "511520"
  },
  {
    "text": "no problem also just want to point out if we went back to the old single tableway that i showed",
    "start": "511520",
    "end": "517839"
  },
  {
    "text": "you kind of that non-first normal form uh way of storing data this wouldn't be a problem either we",
    "start": "517839",
    "end": "523518"
  },
  {
    "text": "wouldn't even need a transaction because there's just gonna be one insert and so it either succeed or fail there's",
    "start": "523519",
    "end": "529360"
  },
  {
    "text": "no no need for a transaction in that case so we can roll back and we're safe we're back to the data being consistent with",
    "start": "529360",
    "end": "535760"
  },
  {
    "text": "what it was before we started the transaction okay we're in good shape now let's",
    "start": "535760",
    "end": "541120"
  },
  {
    "text": "switch over to a nosql document database now in nosql",
    "start": "541120",
    "end": "546240"
  },
  {
    "text": "document databases data is not stored as rows in a table the concept of rows and tables aren't",
    "start": "546240",
    "end": "552320"
  },
  {
    "text": "there instead we have individual pieces of json called documents",
    "start": "552320",
    "end": "558480"
  },
  {
    "text": "now on the screen here we've got four different documents now since my background is",
    "start": "558480",
    "end": "564560"
  },
  {
    "text": "relational um that really is the case my background is relational i might try to do this in a document",
    "start": "564560",
    "end": "570000"
  },
  {
    "text": "database so maybe it's because i'm importing from a relational database where the data is split up like this already",
    "start": "570000",
    "end": "576720"
  },
  {
    "text": "or maybe this is just because this is what i know i'm just going to assume that it's going to work the same way in a document database",
    "start": "576720",
    "end": "582080"
  },
  {
    "text": "i'll just do it this way and if you are thinking about this approach and then you learn that nosql has no",
    "start": "582080",
    "end": "589200"
  },
  {
    "text": "asset transactions are available well then yeah this is a good problem i know i don't use this database",
    "start": "589200",
    "end": "594640"
  },
  {
    "text": "that's a problem i can't do it so bail out and go back to what i know",
    "start": "594640",
    "end": "600800"
  },
  {
    "text": "but we aren't using tables anymore we aren't using rows there's nothing that says we have to put",
    "start": "601760",
    "end": "606800"
  },
  {
    "text": "data into third normal form in fact since we're using json we have support",
    "start": "606800",
    "end": "612000"
  },
  {
    "text": "for arrays and nested objects in a single piece of data",
    "start": "612000",
    "end": "617200"
  },
  {
    "text": "so if i want to create a shopping cart and model it like this on the screen here this now becomes a",
    "start": "617200",
    "end": "622800"
  },
  {
    "text": "single operation on a single piece of data to create it and update it and add items",
    "start": "622800",
    "end": "627920"
  },
  {
    "text": "to it so voila asset guarantees in a document database",
    "start": "627920",
    "end": "633279"
  },
  {
    "text": "as long as we're only working with one document at a time so that's really what",
    "start": "633279",
    "end": "639360"
  },
  {
    "text": "advocates have been saying for a long time is that you don't necessarily need transactions as much with the nosql database",
    "start": "639360",
    "end": "647600"
  },
  {
    "text": "because you can put your data into a single document instead of running it through a paper shredder and splitting it up to go",
    "start": "647600",
    "end": "653279"
  },
  {
    "text": "into a relational database so you don't need the equivalent of a transaction in this case if you've read this book",
    "start": "653279",
    "end": "661120"
  },
  {
    "text": "before you've probably heard about this i know jimmy bogart mentioned it yesterday in his presentation",
    "start": "661120",
    "end": "666399"
  },
  {
    "text": "if you heard the concept of aggregate root before this is basically that same modeling exercise we draw a box around",
    "start": "666399",
    "end": "672079"
  },
  {
    "text": "the shopping cart and all the different pieces that go into that but with the document database we can",
    "start": "672079",
    "end": "678640"
  },
  {
    "text": "push those all together into one single piece of data if we want to and that's kind of the same modeling",
    "start": "678640",
    "end": "684240"
  },
  {
    "text": "exercise i'm far from the first person to make this observation so martin fowler created the term uh",
    "start": "684240",
    "end": "691440"
  },
  {
    "text": "tried to coin the term aggregate oriented database as far back as 2012 about eight years ago",
    "start": "691440",
    "end": "697519"
  },
  {
    "text": "but it never really caught on which is unfortunate because it's a much better way to describe a nosql document database he",
    "start": "697519",
    "end": "704079"
  },
  {
    "text": "used it he applied it to both document and key value which are kind of like cousins in the in the database world and so i",
    "start": "704079",
    "end": "711040"
  },
  {
    "text": "think that's kind of the concept that you need to think about in terms of document databases so let's",
    "start": "711040",
    "end": "716720"
  },
  {
    "text": "talk about then why is nosql even being used why do companies use nosql",
    "start": "716720",
    "end": "722639"
  },
  {
    "text": "why is why is nosql caught on what are the why does it even exist in the first place so some of these are my opinions",
    "start": "722639",
    "end": "729200"
  },
  {
    "text": "and uh so just take them at that value that this is these are my beliefs",
    "start": "729200",
    "end": "734320"
  },
  {
    "text": "i think the main reason that nosql kind of gained traction in the first place is scaling which is something that's",
    "start": "734320",
    "end": "739920"
  },
  {
    "text": "hard to do with systems that were designed to run on one machine and serve a relatively small number of operations",
    "start": "739920",
    "end": "746480"
  },
  {
    "text": "suddenly you expose those to the internet and now that one big machine model becomes expensive",
    "start": "746480",
    "end": "752399"
  },
  {
    "text": "or even impossible in some cases and so what scaling actually means in practice to me",
    "start": "752399",
    "end": "758399"
  },
  {
    "text": "what distributed actually means to me and is not replication but actually distributing data",
    "start": "758399",
    "end": "763920"
  },
  {
    "text": "amongst multiple machines so that data can be sharded easily hopefully automatically",
    "start": "763920",
    "end": "771120"
  },
  {
    "text": "and that can be built in and that would be the the way to scale a database in",
    "start": "771120",
    "end": "777120"
  },
  {
    "text": "distributed fashion now in practice this varies from solution to solution so depending on which no sql solution",
    "start": "777120",
    "end": "782880"
  },
  {
    "text": "you look at they may not be designed for distribution easy distribution out",
    "start": "782880",
    "end": "788720"
  },
  {
    "text": "of the box they may be designed for replication out of the box but not necessarily distribution so you may need to do a lot",
    "start": "788720",
    "end": "794560"
  },
  {
    "text": "of extra work like configure your own load balancer or figure out how to do leader election",
    "start": "794560",
    "end": "800880"
  },
  {
    "text": "define what your shards your partitions are it also means that transactions which is",
    "start": "800880",
    "end": "806880"
  },
  {
    "text": "what i'm talking about today become more difficult because you have multiple machines now",
    "start": "806880",
    "end": "812880"
  },
  {
    "text": "and so the network is now in play and therefore early on this is one of the trade-offs well we got network and play",
    "start": "812880",
    "end": "818639"
  },
  {
    "text": "that makes uh atomicity hard the atomic a in acid so we'll just trade that off we'll just",
    "start": "818639",
    "end": "823839"
  },
  {
    "text": "won't worry about that for now we we want to we want to distribute data we want to have quick access to it",
    "start": "823839",
    "end": "828959"
  },
  {
    "text": "transactions is something we'll have to have to deal with high availability is another one this is",
    "start": "828959",
    "end": "835040"
  },
  {
    "text": "a huge benefit of a database that's designed to be distributed think back to that one big server model",
    "start": "835040",
    "end": "841120"
  },
  {
    "text": "so if that one big server goes down the whole system goes down with it but if you have multiple machines in a",
    "start": "841120",
    "end": "847279"
  },
  {
    "text": "cluster if one of them goes down the remaining servers can recover and stay available again",
    "start": "847279",
    "end": "854560"
  },
  {
    "text": "in practice depending on which solution you look at this might involve having to set up your own sharding definitions",
    "start": "854560",
    "end": "861360"
  },
  {
    "text": "setting up your own replication processes uh something like zookeeper things like that in place",
    "start": "861360",
    "end": "867120"
  },
  {
    "text": "to provide that depending on your solution you may not need to you may need to performance is another big one every",
    "start": "867120",
    "end": "873519"
  },
  {
    "text": "database of course claims superior performance and they all publish benchmarks to back it up that can't possibly be true of",
    "start": "873519",
    "end": "880959"
  },
  {
    "text": "course we've already seen an example earlier of data modeling",
    "start": "880959",
    "end": "886560"
  },
  {
    "text": "uh introducing a improved performance potentially because",
    "start": "886560",
    "end": "891920"
  },
  {
    "text": "we've reduced the operations from say three or four down to one operation",
    "start": "891920",
    "end": "897760"
  },
  {
    "text": "and additionally just to kind of throw something else into this a lot of nosql systems not all of them but a lot of them",
    "start": "897760",
    "end": "903600"
  },
  {
    "text": "introduce some memory first or memory only capabilities so you don't have to wait on disk access",
    "start": "903600",
    "end": "910720"
  },
  {
    "text": "at all or as much and so this also factors into acid because we're now we're talking about",
    "start": "910720",
    "end": "916560"
  },
  {
    "text": "durability if we're not saving to disk or not saving the disk right away is our system really durable and finally",
    "start": "916560",
    "end": "924240"
  },
  {
    "text": "this is the one i think a lot of developers look at as a positive or negative and a lot of",
    "start": "924240",
    "end": "929600"
  },
  {
    "text": "dbas look at as a positive or or negative depending on who you talk to data flexibility in my opinion was not",
    "start": "929600",
    "end": "936639"
  },
  {
    "text": "really the primary goal of nosql to start with it's just kind of a really nice side",
    "start": "936639",
    "end": "941759"
  },
  {
    "text": "effect or trade-off depending on who you ask but a lot of people see this as really the main benefits of nosql and who am i",
    "start": "941759",
    "end": "948800"
  },
  {
    "text": "to argue with them so each piece of data is isolated now because it needs to be able to live",
    "start": "948800",
    "end": "954480"
  },
  {
    "text": "on its own on any one of the servers in our distributed architecture so it can't",
    "start": "954480",
    "end": "960720"
  },
  {
    "text": "depend on other pieces of data so if that's the case it may as well be in a format that's well understood",
    "start": "960720",
    "end": "967519"
  },
  {
    "text": "and useful and easy to read like json and by the way json has parsing libraries",
    "start": "967519",
    "end": "972800"
  },
  {
    "text": "and deserialization libraries for every language and platform underneath the sun so that's a really good choice",
    "start": "972800",
    "end": "978560"
  },
  {
    "text": "now i'm going to focus on a document database today but another key tenant of nosql is the",
    "start": "978560",
    "end": "983920"
  },
  {
    "text": "so-called polyglot persistence using the right database for the right job and especially like a micro service",
    "start": "983920",
    "end": "990800"
  },
  {
    "text": "type architecture where each service may have different data structure needs so maybe one service needs graph maybe",
    "start": "990800",
    "end": "997839"
  },
  {
    "text": "one service needs time series one service needs a document which i'm going to talk about today",
    "start": "997839",
    "end": "1003440"
  },
  {
    "text": "mobile synchronization or maybe one of them needs relational for that matter you use the right",
    "start": "1003440",
    "end": "1008880"
  },
  {
    "text": "database for the job so i've touched on this already a little bit but but what what are the challenges",
    "start": "1008880",
    "end": "1014320"
  },
  {
    "text": "of acid in distributed database so i want to do a quick review of acid because sometimes this is just kind of",
    "start": "1014320",
    "end": "1020639"
  },
  {
    "text": "glossed over as like oh yeah it's acid or oh yeah it's not acid well acid is a set of properties",
    "start": "1020639",
    "end": "1026640"
  },
  {
    "text": "that was actually coined back in 1983 that's not when it first started but that's when it was first",
    "start": "1026640",
    "end": "1032079"
  },
  {
    "text": "coined this term it's not like it's not a standard in the sense that if you get a couple of",
    "start": "1032079",
    "end": "1038798"
  },
  {
    "text": "database people into a room they're not they're going to argue about what acid means right it's not",
    "start": "1038799",
    "end": "1043839"
  },
  {
    "text": "100 um you know no one's going to have 100 agreement on what it means there's no acid governing body or",
    "start": "1043839",
    "end": "1049919"
  },
  {
    "text": "anything like that there's a lot of nuance to it so from my point of view i don't think of it as a standard i think of it as",
    "start": "1049919",
    "end": "1057360"
  },
  {
    "text": "a way to start a conversation about databases and and data and the trade-offs inherent",
    "start": "1057360",
    "end": "1063919"
  },
  {
    "text": "so i fully expect you to disagree with my characterization that's totally fine um but i do want to review acid a little",
    "start": "1063919",
    "end": "1070960"
  },
  {
    "text": "bit here before we get into a transaction so a an acid is for atomicity",
    "start": "1070960",
    "end": "1077120"
  },
  {
    "text": "this means that all operations succeed or fail together inside of a transaction so think back to",
    "start": "1077120",
    "end": "1083200"
  },
  {
    "text": "that shopping cart example if you can model down to a single document you have atomicity because",
    "start": "1083200",
    "end": "1088320"
  },
  {
    "text": "you're only doing one operation in relational you need to do the equivalent of three operations or more",
    "start": "1088320",
    "end": "1094480"
  },
  {
    "text": "so that would be multiple a multiple operation that you need to",
    "start": "1094480",
    "end": "1100559"
  },
  {
    "text": "wrap in some sort of atomic transaction so we can say at a single document level",
    "start": "1100559",
    "end": "1106400"
  },
  {
    "text": "a nosql database has atomicity already c is for consistency and from my",
    "start": "1106400",
    "end": "1113520"
  },
  {
    "text": "point of view this is maybe the most nebulous part of acid but again let's think back to that shopping cart example again if an",
    "start": "1113520",
    "end": "1119600"
  },
  {
    "text": "operation cannot be rolled back the data can then be placed in an inconsistent state",
    "start": "1119600",
    "end": "1126000"
  },
  {
    "text": "there's other things that might fall into this category so for instance with a relational database you can't put six columns into",
    "start": "1126000",
    "end": "1132720"
  },
  {
    "text": "a five column table right so that's consistency constraint there uh a nosql database requires",
    "start": "1132720",
    "end": "1138880"
  },
  {
    "text": "json so if you can't put non-json format data into a json document that's a kind",
    "start": "1138880",
    "end": "1144640"
  },
  {
    "text": "of consistency and then there's always this term here called eventual consistency and this is",
    "start": "1144640",
    "end": "1150160"
  },
  {
    "text": "kind of the scary thing sometimes people hear about this and like oh that's oh boy my data is not",
    "start": "1150160",
    "end": "1155440"
  },
  {
    "text": "going to be saved or not going to be saved in time well this depends on a number of factors from database to database and which by",
    "start": "1155440",
    "end": "1161679"
  },
  {
    "text": "the way can also apply to relational databases so for instance couchbase there are",
    "start": "1161679",
    "end": "1167840"
  },
  {
    "text": "multiple ways to interact with data it's not just sql there's lots of ways you can interact",
    "start": "1167840",
    "end": "1174000"
  },
  {
    "text": "with data so you can use a key value operation to insert data and if you do that",
    "start": "1174000",
    "end": "1179520"
  },
  {
    "text": "and use a key value operation to retrieve the data it's always going to get the latest data",
    "start": "1179520",
    "end": "1185039"
  },
  {
    "text": "so it's going to be strongly consistent however if you use a key value operation",
    "start": "1185039",
    "end": "1190240"
  },
  {
    "text": "to insert data and then run a sql query that's going to have to go against a secondary index",
    "start": "1190240",
    "end": "1196480"
  },
  {
    "text": "and that secondary index uh is updated asynchronously so you may get",
    "start": "1196480",
    "end": "1203039"
  },
  {
    "text": "stale data you may get the latest depending on the race conditions and you can also set",
    "start": "1203039",
    "end": "1209360"
  },
  {
    "text": "latency preferences there so by default it's going to be eventually consistent but you can also say i need stronger",
    "start": "1209360",
    "end": "1215600"
  },
  {
    "text": "consistency than that so for this operation give me a stronger consistency and i",
    "start": "1215600",
    "end": "1220880"
  },
  {
    "text": "understand the trade-off in latency it's going to take longer potentially to run that query",
    "start": "1220880",
    "end": "1227600"
  },
  {
    "text": "so if stale data is a concern for you and sometimes it's not not all use cases",
    "start": "1227600",
    "end": "1232720"
  },
  {
    "text": "worry about stale data or you know if it's a few seconds or milliseconds old not a big deal",
    "start": "1232720",
    "end": "1238880"
  },
  {
    "text": "so just check to see if your database can you know how that handles stale data how that handles eventual",
    "start": "1238880",
    "end": "1244400"
  },
  {
    "text": "consistency because there may be some trade-offs there maybe it's a 80 20 rule 80 of the time",
    "start": "1244400",
    "end": "1250240"
  },
  {
    "text": "eventual consistency is fine 20 of the time i just need to go into my code and specify",
    "start": "1250240",
    "end": "1255440"
  },
  {
    "text": "stronger consistency and this is by the way true for relational databases so we're going to look at isolation here",
    "start": "1255440",
    "end": "1261360"
  },
  {
    "text": "to kind of see why isolation isolation levels this is the jepsen consistency models",
    "start": "1261360",
    "end": "1267120"
  },
  {
    "text": "map so there's there's all different types of consistency we're not going to go deep into this today i promise because",
    "start": "1267120",
    "end": "1273280"
  },
  {
    "text": "it's a lot to cover but there's different groups here so pink are the models that are",
    "start": "1273280",
    "end": "1278880"
  },
  {
    "text": "just not going to work we've got annotation requests here i don't know what that is",
    "start": "1278880",
    "end": "1285520"
  },
  {
    "text": "i'm going to decline that sorry so anyway so pink are the models that",
    "start": "1285520",
    "end": "1291520"
  },
  {
    "text": "just won't work when there are some network failures so you have to pause all nodes of the operation to make",
    "start": "1291520",
    "end": "1298159"
  },
  {
    "text": "that level of safety happen orange is what's known as sticky ability so it only works",
    "start": "1298159",
    "end": "1304000"
  },
  {
    "text": "when clients get paired up with a server and they can't switch to new servers blue",
    "start": "1304000",
    "end": "1310720"
  },
  {
    "text": "is the areas that are it's called total availability which means it's possible even when you know pieces of the network",
    "start": "1310720",
    "end": "1316960"
  },
  {
    "text": "are partitioned off where or servers are down so for instance the way to read this is",
    "start": "1316960",
    "end": "1322000"
  },
  {
    "text": "again kind of like the normal forms so read uncommitted and they have read committed read committed is stronger",
    "start": "1322000",
    "end": "1328640"
  },
  {
    "text": "than read uncommitted and read committed you know there's a lot to it but basically it just means that dirty reads are not possible",
    "start": "1328640",
    "end": "1335600"
  },
  {
    "text": "so i'm not going to be able to read data that's in the middle of a transaction so uh and then monatomic monotonic",
    "start": "1335600",
    "end": "1342159"
  },
  {
    "text": "atomic view that's a hard one to say um monotonic atomic view that's slightly stronger than",
    "start": "1342159",
    "end": "1350400"
  },
  {
    "text": "read committed now in couchbase for instance that key value api that i mentioned that can provide monotonic atomic view",
    "start": "1350400",
    "end": "1358320"
  },
  {
    "text": "so a stronger level than read committed however i i'm not going to say couchbase is completely monotonic because",
    "start": "1358320",
    "end": "1365360"
  },
  {
    "text": "there's other apis so i mentioned query for instance where it would be read committed so it's a little bit in between",
    "start": "1365360",
    "end": "1371039"
  },
  {
    "text": "so even amongst all these complicated pieces there's still even some more nuance there",
    "start": "1371039",
    "end": "1376559"
  },
  {
    "text": "now you might look at this and say oh well strict serializable that's the best it's at the top it's the strongest it",
    "start": "1376559",
    "end": "1381840"
  },
  {
    "text": "must be the best i'm going to use that but there are trade-offs there so if a node shuts down if you're trying a",
    "start": "1381840",
    "end": "1388000"
  },
  {
    "text": "distributed system for instance if a node shuts down nobody else can do anything",
    "start": "1388000",
    "end": "1393200"
  },
  {
    "text": "there's a huge and so you basically just it's down until you know you can get that system back up again and there's a huge latency trade",
    "start": "1393200",
    "end": "1400559"
  },
  {
    "text": "off there so this is actually rarely used strict serializable it and it's basically think of it as one operation",
    "start": "1400559",
    "end": "1406000"
  },
  {
    "text": "at a time that's kind of the simplest way to think about it and so read committed for instance is the default for many",
    "start": "1406000",
    "end": "1411919"
  },
  {
    "text": "relational databases as well so definitely want to if you're interested in this this uh jepson has a",
    "start": "1411919",
    "end": "1417600"
  },
  {
    "text": "whole website around this stuff you can learn more about that and i'll provide these links uh towards the end as well and uh if you",
    "start": "1417600",
    "end": "1424559"
  },
  {
    "text": "don't want to write down the links or type them in yourself i will provide the slides for this as well with all the links in there",
    "start": "1424559",
    "end": "1431520"
  },
  {
    "text": "isolation is the next part of asset this is basically in terms of transactions this is about concurrency",
    "start": "1431520",
    "end": "1436799"
  },
  {
    "text": "so if a transaction is isolated that means it should appear to leave the database in the same state",
    "start": "1436799",
    "end": "1442960"
  },
  {
    "text": "as if the transactions were executed sequentially as if it were strict serializable",
    "start": "1442960",
    "end": "1448480"
  },
  {
    "text": "now locking methods have been available in distributed databases for some time but again at the single document level",
    "start": "1448480",
    "end": "1454960"
  },
  {
    "text": "so you can still do a lock of a document so nothing else can read or write to it other than whatever has",
    "start": "1454960",
    "end": "1460960"
  },
  {
    "text": "that lock so for an asset transaction and distributed database the transaction may",
    "start": "1460960",
    "end": "1467279"
  },
  {
    "text": "involve locking multiple documents so there must be a timeout associated with locks otherwise a",
    "start": "1467279",
    "end": "1473520"
  },
  {
    "text": "document could be locked in perpetuity we don't want tap we want it to unlock eventually",
    "start": "1473520",
    "end": "1478880"
  },
  {
    "text": "so therefore transactions have to be constrained to a timeout period",
    "start": "1478880",
    "end": "1483919"
  },
  {
    "text": "so the transaction has to finish when a certain amount of time otherwise it automatically is is just rolled back and done",
    "start": "1483919",
    "end": "1491679"
  },
  {
    "text": "and the last one is durability and this is one that i think there's probably a lot of argument about",
    "start": "1491679",
    "end": "1496799"
  },
  {
    "text": "uh durability is my data durable after my write operation if the system",
    "start": "1496799",
    "end": "1503039"
  },
  {
    "text": "crashes will the data still be there so traditionally this has meant that well my data must be",
    "start": "1503039",
    "end": "1510480"
  },
  {
    "text": "written to disk to be durable but i think there's more to it than that",
    "start": "1510480",
    "end": "1515520"
  },
  {
    "text": "because you know think about other things that could happen what if the disk fails",
    "start": "1515520",
    "end": "1520960"
  },
  {
    "text": "so is that durable enough if the disk fails okay well then no big deal so maybe we need a replica to some other",
    "start": "1520960",
    "end": "1528320"
  },
  {
    "text": "disk so now we have two disks in the equation so is two disks durable enough is three",
    "start": "1528320",
    "end": "1534720"
  },
  {
    "text": "disks etc what if it's a memory only database does",
    "start": "1534720",
    "end": "1539760"
  },
  {
    "text": "that mean it's not durable because you know if the machine powers off or resets or something then it's",
    "start": "1539760",
    "end": "1545279"
  },
  {
    "text": "just gone from memory it can't be recovered well okay so what if there's a copy in some other machine's memory",
    "start": "1545279",
    "end": "1552480"
  },
  {
    "text": "so we've got two copies in memory only is that durable is that durable enough what about three",
    "start": "1552480",
    "end": "1559600"
  },
  {
    "text": "machines etc and what if the whole data center goes down right what if amazon east",
    "start": "1559600",
    "end": "1565120"
  },
  {
    "text": "goes down is that durable is that not durable enough do we need multiple data centers",
    "start": "1565120",
    "end": "1571520"
  },
  {
    "text": "and so for all of these different levels of durability there's a performance tradeoff",
    "start": "1571520",
    "end": "1576640"
  },
  {
    "text": "and not only performance trade-off but also the main thing here is that we may assume that the data is",
    "start": "1576640",
    "end": "1584480"
  },
  {
    "text": "eventually written to disk or eventually replicated somewhere else but do we check at the time that we do",
    "start": "1584480",
    "end": "1591520"
  },
  {
    "text": "the write and those checks are is what adds the overhead so do we check at all we just fire and",
    "start": "1591520",
    "end": "1598880"
  },
  {
    "text": "forget do we check to make sure it's been saved to one disk to two disks to two other machines",
    "start": "1598880",
    "end": "1605840"
  },
  {
    "text": "memory to two other machines memory and disk so in no nosql typically what you do is",
    "start": "1605840",
    "end": "1612480"
  },
  {
    "text": "you can specify the durability level on a per operation basis the default being you know maybe fire and forget",
    "start": "1612480",
    "end": "1619120"
  },
  {
    "text": "because it's the fastest but we can specify increased durability settings if we need them so for instance in a",
    "start": "1619120",
    "end": "1627360"
  },
  {
    "text": "transaction to verify the durability because that's very important",
    "start": "1627360",
    "end": "1632559"
  },
  {
    "text": "all right so that's acid that's kind of my overview of acid there's there's a lot more to it than that that's i think the important thing to",
    "start": "1632559",
    "end": "1638240"
  },
  {
    "text": "talk about with acid transactions so implementing asset transactions is already challenging enough",
    "start": "1638240",
    "end": "1643840"
  },
  {
    "text": "but now we've got to factor in distributed systems which means network so here's some of the problems and some",
    "start": "1643840",
    "end": "1651200"
  },
  {
    "text": "of the various ways to solve them or at least mitigate them so the first one i want to",
    "start": "1651200",
    "end": "1656240"
  },
  {
    "text": "talk about is split brain also known as network problems you know if there's a crash or",
    "start": "1656240",
    "end": "1662480"
  },
  {
    "text": "network partition or something like that happens we've that's a challenge for us so first challenge what happens if one or",
    "start": "1662480",
    "end": "1669200"
  },
  {
    "text": "more of the machines in the cluster crashes uh so this is absolutely possibility",
    "start": "1669200",
    "end": "1674480"
  },
  {
    "text": "hopefully it doesn't happen very often hopefully it's very rare right um our data center is pretty good",
    "start": "1674480",
    "end": "1679919"
  },
  {
    "text": "we're running in a cloud somewhere and this isn't going to happen very often but it's something that could eventually",
    "start": "1679919",
    "end": "1685840"
  },
  {
    "text": "happen so we need to plan for what's going to happen in that situation and so the one of the solutions of the",
    "start": "1685840",
    "end": "1691279"
  },
  {
    "text": "approaches to this is consensus requirements i just kind of touched on this with with durability but how much persistence",
    "start": "1691279",
    "end": "1698159"
  },
  {
    "text": "do we need is acceptable in terms of memory in terms of disk in terms of replicas",
    "start": "1698159",
    "end": "1703840"
  },
  {
    "text": "in terms of data centers all those sorts of things are important to think about and what about uh transactions that get",
    "start": "1703840",
    "end": "1711120"
  },
  {
    "text": "abandoned halfway through for one reason or another we're going to see an example of this in my demo but what happens uh because they're",
    "start": "1711120",
    "end": "1718000"
  },
  {
    "text": "going to leave behind some artifacts whether we're you know wherever we're implementing our transaction logic",
    "start": "1718000",
    "end": "1723840"
  },
  {
    "text": "there's going to be some artifacts that are left over so what do we do about those we can't just let them pile up",
    "start": "1723840",
    "end": "1729360"
  },
  {
    "text": "so there's a couple of different approaches to this one of them i'm going to show you today is called the cooperative model",
    "start": "1729360",
    "end": "1734480"
  },
  {
    "text": "so basically it says any process that crashes the next process that comes along is in",
    "start": "1734480",
    "end": "1740000"
  },
  {
    "text": "charge is responsible for cleaning up after any messes that are left behind there's other things like",
    "start": "1740000",
    "end": "1746080"
  },
  {
    "text": "paxos if you've heard of this before i don't want to spend a lot of time on it because it's very very complex",
    "start": "1746080",
    "end": "1751520"
  },
  {
    "text": "or something like another process kind of a watchdog process or like a zookeeper sort of thing",
    "start": "1751520",
    "end": "1756960"
  },
  {
    "text": "that is in charge of coordinating all these different transactions",
    "start": "1756960",
    "end": "1763279"
  },
  {
    "text": "edge cases is a huge problem this is always something with uh software in general right but uh we",
    "start": "1763279",
    "end": "1769360"
  },
  {
    "text": "could spend a lot of time addressing edge cases what happens if the network cord comes unplugged at various times uh t",
    "start": "1769360",
    "end": "1776720"
  },
  {
    "text": "equals one millisecond t equals two milliseconds etc what happens when a node comes back online what do we do then",
    "start": "1776720",
    "end": "1783919"
  },
  {
    "text": "what happens with varying levels of network corruption or disk corruption",
    "start": "1783919",
    "end": "1788960"
  },
  {
    "text": "what happens when we set loose a chaos monkey to start just shutting down machines at random and",
    "start": "1788960",
    "end": "1795279"
  },
  {
    "text": "this is again this is still true for edge for relational databases by the way so i think really the only thing you can do",
    "start": "1795279",
    "end": "1801440"
  },
  {
    "text": "with this approach is just try to mitigate and fix it as much as possible to say okay yes we're aware of this edge",
    "start": "1801440",
    "end": "1807440"
  },
  {
    "text": "case we're going to work to fix it or you can say well that's a one in a billion edge case right so",
    "start": "1807440",
    "end": "1813200"
  },
  {
    "text": "the juice just isn't worth the squeeze there we're going to let that one be an edge case that we're going to live",
    "start": "1813200",
    "end": "1818720"
  },
  {
    "text": "with and accept it because it's super super rare latency is another thing to think about",
    "start": "1818720",
    "end": "1826399"
  },
  {
    "text": "so a lot of nosql databases sort of they're one of their main things is we have to be really good",
    "start": "1826399",
    "end": "1832000"
  },
  {
    "text": "performance we have to be designed for better performance low latency because we're dealing with a huge number of",
    "start": "1832000",
    "end": "1838320"
  },
  {
    "text": "users a huge number of uh requests and so on so i think really the best approach here",
    "start": "1838320",
    "end": "1845360"
  },
  {
    "text": "is that we're not trying to reinvent a relational database um you know so what we should do then is",
    "start": "1845360",
    "end": "1852320"
  },
  {
    "text": "we should try to educate here and this is kind of what i'm trying to do in this presentation is just to say",
    "start": "1852320",
    "end": "1857519"
  },
  {
    "text": "we only need you only use acid when we absolutely need to",
    "start": "1857519",
    "end": "1862960"
  },
  {
    "text": "and so basically the kind of the other side of that is well how does acid transaction affect performance how does it affect high",
    "start": "1863360",
    "end": "1868799"
  },
  {
    "text": "availability so we need to uh understand that and think about that so that way we know",
    "start": "1868799",
    "end": "1874480"
  },
  {
    "text": "not to use for instance for instance don't create a repository pattern and then wrap",
    "start": "1874480",
    "end": "1880240"
  },
  {
    "text": "everything in a transaction just because i may as well might as well put everything in the transaction because there's a huge performance",
    "start": "1880240",
    "end": "1886159"
  },
  {
    "text": "trade-off there so we need to use data modeling to solve that whenever possible like i",
    "start": "1886159",
    "end": "1893679"
  },
  {
    "text": "mentioned the aggregate route from earlier just try to combine everything as much as you can as much as",
    "start": "1893679",
    "end": "1899919"
  },
  {
    "text": "it makes sense to so we can reduce the amount of transactions that we actually need",
    "start": "1899919",
    "end": "1906880"
  },
  {
    "text": "and correctness is also a huge problem uh that we need to address so once we've got an asset transaction in place once",
    "start": "1906880",
    "end": "1913440"
  },
  {
    "text": "we think we've got transactions working we want to make them available to developers to use how",
    "start": "1913440",
    "end": "1918559"
  },
  {
    "text": "do we know that they are uh correct have you ever let me ask you this normally i would ask",
    "start": "1918559",
    "end": "1925279"
  },
  {
    "text": "you to raise your hands you don't have to do this here but if you if you ever tried to write threaded code before and then try",
    "start": "1925279",
    "end": "1932480"
  },
  {
    "text": "to unit test that threaded code that's a huge pain in the neck to do that right it's it's a whole problem domain",
    "start": "1932480",
    "end": "1938559"
  },
  {
    "text": "in of itself but now try introducing network into that equation as well",
    "start": "1938559",
    "end": "1944240"
  },
  {
    "text": "and so now it becomes very very challenging so once we've identified those edge cases how do we verify them",
    "start": "1944240",
    "end": "1949519"
  },
  {
    "text": "how do we know for sure that we got all the edge cases what about other edge cases we haven't thought of yet",
    "start": "1949519",
    "end": "1956399"
  },
  {
    "text": "i mean that's just what we don't know what we don't know right so one thing we can do and this these",
    "start": "1956399",
    "end": "1961760"
  },
  {
    "text": "aren't really solutions they're kind of approaches but we can we can try to apply jepson guidelines so jepson has a",
    "start": "1961760",
    "end": "1967919"
  },
  {
    "text": "huge i mean that's their business basically to look at transactions and determine",
    "start": "1967919",
    "end": "1973120"
  },
  {
    "text": "you know uh are these are these correct are these uh are these uh going to work correctly",
    "start": "1973120",
    "end": "1980000"
  },
  {
    "text": "and so this is a very this is a big challenge in and of itself so it's this solution is also a challenge because jepson testing is",
    "start": "1980000",
    "end": "1987679"
  },
  {
    "text": "very expensive a if you want to hire a jepson and it's if you just want to follow their guidelines it's a ton of work",
    "start": "1987679",
    "end": "1994080"
  },
  {
    "text": "it's a ton of work so you you might find yourself in this situation where okay you think you've uh you think",
    "start": "1994080",
    "end": "2000559"
  },
  {
    "text": "you've got it tested and you think it's uh it meets their guidelines but jefferson themselves says well no not not quite",
    "start": "2000559",
    "end": "2006559"
  },
  {
    "text": "and and i don't want to i don't want you to take this as me diminishing a competitor here because all this shows is that it is a",
    "start": "2006559",
    "end": "2014240"
  },
  {
    "text": "huge amount of work to get it correct and it's very challenging it's far from",
    "start": "2014240",
    "end": "2019679"
  },
  {
    "text": "a completely solved problem uh and so this is itself probably the biggest challenge",
    "start": "2019679",
    "end": "2025120"
  },
  {
    "text": "in in uh creating transactions in a database is making sure that it provides all the",
    "start": "2025120",
    "end": "2030720"
  },
  {
    "text": "guarantees that you think it does so i want to talk about implementations now how this is actually being done the",
    "start": "2030720",
    "end": "2037279"
  },
  {
    "text": "approaches that are being taken to to to create asset transactions in distributed databases and i think",
    "start": "2037279",
    "end": "2043440"
  },
  {
    "text": "there's kind of two main approaches to this and this is where i think couch base diverges from from other",
    "start": "2043440",
    "end": "2050320"
  },
  {
    "text": "document databases and i think is makes it very interesting to to look at so there's two approaches server side",
    "start": "2050320",
    "end": "2056240"
  },
  {
    "text": "and client side so where do we put the transaction logic do we put it",
    "start": "2056240",
    "end": "2061679"
  },
  {
    "text": "in the hands of the client that's actually uh you know submitting data to the",
    "start": "2061679",
    "end": "2067440"
  },
  {
    "text": "server or do we put it in the server's hand and say server you handle all the transactions for us",
    "start": "2067440",
    "end": "2072878"
  },
  {
    "text": "and there's pros and cons to both approaches neither one is a perfect approach so this is what i want to show you is",
    "start": "2072879",
    "end": "2078000"
  },
  {
    "text": "the different pros and cons so the server-side approach we have the server do all the",
    "start": "2078000",
    "end": "2083679"
  },
  {
    "text": "transaction work so the server or servers i guess because we're talking distributed database",
    "start": "2083679",
    "end": "2088878"
  },
  {
    "text": "we the the main pro to this approach is that it's very light touch in terms of the sdks so",
    "start": "2088879",
    "end": "2095358"
  },
  {
    "text": "uh we don't have to change them very much we're basically just relaying information from the client",
    "start": "2095359",
    "end": "2100560"
  },
  {
    "text": "to the server and saying okay server here's the transaction you do all this work now i don't want to diminish this",
    "start": "2100560",
    "end": "2105920"
  },
  {
    "text": "because there's still real work to design sdks document them etc but the actual implementation doesn't",
    "start": "2105920",
    "end": "2112400"
  },
  {
    "text": "live in the client the cons of this approach is that we",
    "start": "2112400",
    "end": "2118079"
  },
  {
    "text": "have to have some sort of global tool to manage uh transactions to sync",
    "start": "2118079",
    "end": "2124079"
  },
  {
    "text": "the clocks um to do the scheduling so this can be fragile in some situations",
    "start": "2124079",
    "end": "2130079"
  },
  {
    "text": "right this could require additional configuration it could have strict requirements about",
    "start": "2130079",
    "end": "2135440"
  },
  {
    "text": "your servers for instance so that's that's the approach there is now this is a lot of heavy work on the server side",
    "start": "2135440",
    "end": "2142000"
  },
  {
    "text": "and it's also can be fragile in some situations the client-side approach is kind of the",
    "start": "2142000",
    "end": "2148000"
  },
  {
    "text": "flip side of that so right away we have none of those global things we don't have to make any changes to the",
    "start": "2148000",
    "end": "2153520"
  },
  {
    "text": "server to the servers to the distributed cluster it just looks like regular operational traffic",
    "start": "2153520",
    "end": "2159520"
  },
  {
    "text": "and now there are some server features that are needed but none of them are none of the transaction",
    "start": "2159520",
    "end": "2164560"
  },
  {
    "text": "logic will live on the server so this makes it really quick to iterate you don't have to wait on the server",
    "start": "2164560",
    "end": "2170240"
  },
  {
    "text": "team to make a change and then update the sdk for instance and actually behind the scenes it was",
    "start": "2170240",
    "end": "2176160"
  },
  {
    "text": "very cool to kind of see this in action um to see the the client team at couch",
    "start": "2176160",
    "end": "2181200"
  },
  {
    "text": "base and the server team at couch base working at the same time and it wasn't like we're waiting for you you have to",
    "start": "2181200",
    "end": "2186880"
  },
  {
    "text": "do this wait wait for wait for you and go back and forth on that it was very quick to iterate on that and uh nothing on the server has",
    "start": "2186880",
    "end": "2194320"
  },
  {
    "text": "to be configured so that's just kind of the flip side as far as the servers are concerned it's just regular traffic",
    "start": "2194320",
    "end": "2200800"
  },
  {
    "text": "nothing nothing special and the but the cons here there's there's a pretty significant con to this",
    "start": "2200800",
    "end": "2207680"
  },
  {
    "text": "so each of the clients now need major changes because the transaction logic now lives in the sdks",
    "start": "2207680",
    "end": "2214720"
  },
  {
    "text": "this is why my demo coming up here is is going to be in java it's not because i love java i really don't",
    "start": "2214720",
    "end": "2220800"
  },
  {
    "text": "but it's just not ready yet in couchbase for other languages so all the sdks must use the same",
    "start": "2220800",
    "end": "2227440"
  },
  {
    "text": "algorithm to handle transactions this makes it a little harder for the community for instance so let's",
    "start": "2227440",
    "end": "2233920"
  },
  {
    "text": "say that someone wanted to build a couch-based client in fortran i don't know why you'd want to but let's say",
    "start": "2233920",
    "end": "2239599"
  },
  {
    "text": "you're you're a fortran developer and you want to connect to couchbase so couchbase does not have an official",
    "start": "2239599",
    "end": "2246079"
  },
  {
    "text": "fortran client you know we have clients for a lot of languages but not not fortran",
    "start": "2246079",
    "end": "2251200"
  },
  {
    "text": "so if you want you got to build your own fortran sdk now if you want to add transactions to",
    "start": "2251200",
    "end": "2256320"
  },
  {
    "text": "the sdk you have to now understand and follow the same algorithm that couchbase has used in the",
    "start": "2256320",
    "end": "2262560"
  },
  {
    "text": "other sdks now couchbase is going to do a lot of this work right all of the sdks that",
    "start": "2262560",
    "end": "2268320"
  },
  {
    "text": "couchbase creates and supports are going to eventually have transactions in them but it is heavier",
    "start": "2268320",
    "end": "2273599"
  },
  {
    "text": "lift to do this from the client side okay now speaking of demo it's time to",
    "start": "2273599",
    "end": "2279440"
  },
  {
    "text": "get into a demo so i want to walk you through this process here and let me just",
    "start": "2279440",
    "end": "2284720"
  },
  {
    "text": "make sure this is on the screen there okay so i've got a java program here that i've written and",
    "start": "2284720",
    "end": "2290800"
  },
  {
    "text": "the source code for this will all be available whoops will all be available on github and i'll give you that link in the slides and",
    "start": "2290800",
    "end": "2297040"
  },
  {
    "text": "the in the chat room later if you want to see that but this demo just shows a transaction in action and",
    "start": "2297040",
    "end": "2303680"
  },
  {
    "text": "we're going to go through the different options here uh the different paths we can take",
    "start": "2303680",
    "end": "2308960"
  },
  {
    "text": "so this is a like a conference management data model here so we've got a",
    "start": "2308960",
    "end": "2316000"
  },
  {
    "text": "conference object a conference document called ndc oslo 2020 we've got a separate document that",
    "start": "2316000",
    "end": "2322720"
  },
  {
    "text": "represents all the interactions between me a speaker and ndc also the",
    "start": "2322720",
    "end": "2327760"
  },
  {
    "text": "conference so things like submitting to the cfp uh doing a presentation answering the questions on slack those",
    "start": "2327760",
    "end": "2334160"
  },
  {
    "text": "are all interactions that are tracked here in my database all right let me bring this up here so",
    "start": "2334160",
    "end": "2340960"
  },
  {
    "text": "let's go through this these steps here the first step is to connect to a couch-based cluster so this is just the normal",
    "start": "2340960",
    "end": "2346320"
  },
  {
    "text": "kind of connection boilerplate we're going to connect to a cluster by getting the address the credentials and so on i explained",
    "start": "2346320",
    "end": "2352880"
  },
  {
    "text": "that data model already uh so we're going to create the initial sort of empty documents for that just ahead of time and then",
    "start": "2352880",
    "end": "2360480"
  },
  {
    "text": "we're going to get into a transaction so the first thing we do in couchbase here is we create a transactions object",
    "start": "2360480",
    "end": "2367280"
  },
  {
    "text": "just by instantiating this object just by saying transactions create we're going to run a",
    "start": "2367280",
    "end": "2372880"
  },
  {
    "text": "background process that's going to be the cooperative model that's going to clean up any of the leftover artifacts",
    "start": "2372880",
    "end": "2379200"
  },
  {
    "text": "from a crash and we're going to see that and the other thing this is going to do is it's going to create an object to",
    "start": "2379200",
    "end": "2385520"
  },
  {
    "text": "create the actual transaction so i've got just a wait for press enter here i've got transactions.run",
    "start": "2385520",
    "end": "2393680"
  },
  {
    "text": "and so inside transactions run this is a lambda by the way i'm not a java developer",
    "start": "2393680",
    "end": "2398720"
  },
  {
    "text": "i should have said this up front i'm not so anything that looks like hideous java here is probably my fault i'm i'm just not",
    "start": "2398720",
    "end": "2405119"
  },
  {
    "text": "super familiar with java but anything inside this transaction this run statement this lambda here or",
    "start": "2405119",
    "end": "2411280"
  },
  {
    "text": "whatever you call them in java that's going to be the actual transaction i also want to point out the durability",
    "start": "2411280",
    "end": "2417920"
  },
  {
    "text": "level up here so i mentioned durability before and i want to be able to set the",
    "start": "2417920",
    "end": "2423440"
  },
  {
    "text": "durability level so what's good enough durability to me and each of these so i'm starting with none here because my demo is just on the",
    "start": "2423440",
    "end": "2430079"
  },
  {
    "text": "one server i don't have a true distributed machine so i don't need to worry about durability level here",
    "start": "2430079",
    "end": "2435680"
  },
  {
    "text": "but if i had multiple machines i probably want to select one of these higher durability levels each one of these as you can see the",
    "start": "2435680",
    "end": "2441760"
  },
  {
    "text": "description here has stronger and stronger requirements for durability but they also",
    "start": "2441760",
    "end": "2447040"
  },
  {
    "text": "require more latency so you have to think about which is what do i really need what do i want for",
    "start": "2447040",
    "end": "2453119"
  },
  {
    "text": "this transaction okay and then everything inside of here using the ctx",
    "start": "2453119",
    "end": "2458319"
  },
  {
    "text": "this will interact with the database so i'm going to get two documents from the database one for the conference one for the",
    "start": "2458319",
    "end": "2463359"
  },
  {
    "text": "interactions and i'm going to then update them what i want to do is update",
    "start": "2463359",
    "end": "2468800"
  },
  {
    "text": "the conference document to say how many uh follow-ups how many uh interactions have",
    "start": "2468800",
    "end": "2476400"
  },
  {
    "text": "been done for this conference by me the speaker so we're going to implement increment that by one because",
    "start": "2476400",
    "end": "2482319"
  },
  {
    "text": "we're going to add one to it and we're going to put the date of the last transaction there so you know i could get these things via query",
    "start": "2482319",
    "end": "2488800"
  },
  {
    "text": "but what i'm doing is i'm just kind of rolling them up to a document so i don't have to run those expensive queries every time you know i just want to see a",
    "start": "2488800",
    "end": "2495520"
  },
  {
    "text": "big number at the top of the screen oh you've had three interactions with this uh with this conference and",
    "start": "2495520",
    "end": "2501119"
  },
  {
    "text": "i'm going to actually start putting interactions in there so this first one is me submitting to a cfp",
    "start": "2501119",
    "end": "2507040"
  },
  {
    "text": "we'll add another one later delivering the presentation and then slack and so on once i've made those changes i'm going",
    "start": "2507040",
    "end": "2512800"
  },
  {
    "text": "to replace both documents using that ctx object so those are both in the transaction",
    "start": "2512800",
    "end": "2518480"
  },
  {
    "text": "and at the very end here i could say commit but this is kind of implied it's optional because we're inside this lambda so",
    "start": "2518480",
    "end": "2524720"
  },
  {
    "text": "we're going to assume if the lambda runs successfully that a commit is going to we're going to",
    "start": "2524720",
    "end": "2530000"
  },
  {
    "text": "commit at the end and we could also explicitly say rollback in here we can say ctx.rollback",
    "start": "2530000",
    "end": "2536160"
  },
  {
    "text": "we're not going to do that here today so let's i'm going to go ahead and show you here's my couch base database here running locally right now",
    "start": "2536160",
    "end": "2543040"
  },
  {
    "text": "there are zero documents in it no results so i'm going to run this java program here",
    "start": "2543040",
    "end": "2551119"
  },
  {
    "text": "and it's going to wait for me to press enter",
    "start": "2551119",
    "end": "2555200"
  },
  {
    "text": "okay pressing enter and now program finishes over here in the database i now have",
    "start": "2556560",
    "end": "2562240"
  },
  {
    "text": "those two documents so let's just look at them here you can see we've got ndc oslo and i've got one",
    "start": "2562240",
    "end": "2567359"
  },
  {
    "text": "follow-up so far and here's the date of that last interaction that last follow-up so we'll just copy this this uh this",
    "start": "2567359",
    "end": "2574960"
  },
  {
    "text": "integer here and we'll look over here at the uh interactions this is going to have a events array so every of the every one",
    "start": "2574960",
    "end": "2581200"
  },
  {
    "text": "of those events those interactions are going to be listed here just make sure this date matches up it does okay",
    "start": "2581200",
    "end": "2587119"
  },
  {
    "text": "so there we go we've got a transaction that created both of these documents in one atomic units it's happy path so",
    "start": "2587119",
    "end": "2594319"
  },
  {
    "text": "you didn't really see you know all the all the behind the scenes details there but also notice these other two pieces of",
    "start": "2594319",
    "end": "2600400"
  },
  {
    "text": "kind of transaction metadata here this is just one of the one of the pieces of the design pattern",
    "start": "2600400",
    "end": "2606319"
  },
  {
    "text": "that's being used it's kind of a modified two-phase commit if you've heard of that before and these are just kind of our artifacts",
    "start": "2606319",
    "end": "2612079"
  },
  {
    "text": "of that transaction that are in the database as well those don't actually contain anything right now at some point they did",
    "start": "2612079",
    "end": "2618160"
  },
  {
    "text": "but the transaction happens so fast we don't get to see that information so that's the happy path we're in good",
    "start": "2618160",
    "end": "2625520"
  },
  {
    "text": "shape there but uh things aren't always happy as i showed you earlier in the presentation what if there's a blue screen right in the",
    "start": "2625520",
    "end": "2631440"
  },
  {
    "text": "middle of the transaction so i'm going to uncomment here this exception",
    "start": "2631440",
    "end": "2636720"
  },
  {
    "text": "inside the transaction we're going to throw an exception i'm also going to change this to be",
    "start": "2636720",
    "end": "2644720"
  },
  {
    "text": "we're going to add a presentation interaction to this event but i'm going to throw an",
    "start": "2644720",
    "end": "2650000"
  },
  {
    "text": "exception so we're going to replace both documents but then an exception happens which means anything that throws anything unhandled",
    "start": "2650000",
    "end": "2656800"
  },
  {
    "text": "exception in this transaction is going to cause a rollback so i just change that let's run that",
    "start": "2656800",
    "end": "2662160"
  },
  {
    "text": "code here and um i have to press enter again at",
    "start": "2662160",
    "end": "2669040"
  },
  {
    "text": "some point there we go and you can see right here maybe you can't see but down here at the",
    "start": "2669040",
    "end": "2674240"
  },
  {
    "text": "bottom it says uh attempt wrapped it wrapped exception no retry so",
    "start": "2674240",
    "end": "2679440"
  },
  {
    "text": "it's emulating rollback so transaction failed and if i go back to my couch base",
    "start": "2679440",
    "end": "2684640"
  },
  {
    "text": "database retrieve these documents notice that it still says follow-ups one still has the same date",
    "start": "2684640",
    "end": "2690720"
  },
  {
    "text": "and if i look in my interactions still just has one event so even though i told couchbase to",
    "start": "2690720",
    "end": "2697599"
  },
  {
    "text": "update those pieces of data that data got rolled back okay so that's that's kind of uh one of the",
    "start": "2697599",
    "end": "2704160"
  },
  {
    "text": "edge cases we need to test for a that's a common one actually a rollback or an exception happening",
    "start": "2704160",
    "end": "2710560"
  },
  {
    "text": "in the middle of a transaction now let's look at one that's a little bit more out on the edge and this is one that",
    "start": "2710560",
    "end": "2717359"
  },
  {
    "text": "hopefully doesn't happen very often but it absolutely could happen i'm going to set a breakpoint here right",
    "start": "2717359",
    "end": "2722480"
  },
  {
    "text": "after the first document is being updated i'm not not going to let the second document be updated so i'm going to go",
    "start": "2722480",
    "end": "2728480"
  },
  {
    "text": "ahead and run this program in debug mode here",
    "start": "2728480",
    "end": "2733838"
  },
  {
    "text": "okay gotta press enter again to proceed okay we've hit that breakpoint i'm going",
    "start": "2733920",
    "end": "2740160"
  },
  {
    "text": "to kill this java program so i've stopped the program completely",
    "start": "2740160",
    "end": "2745680"
  },
  {
    "text": "right in the middle of a transaction so let's see what happens when when i do that so i'm going to refresh my",
    "start": "2745680",
    "end": "2751280"
  },
  {
    "text": "documents here look at my first document it's not been updated yet follow-ups is still one",
    "start": "2751280",
    "end": "2757839"
  },
  {
    "text": "last interaction is still the date and of course it never got to updating the interaction so nothing's changed there",
    "start": "2757839",
    "end": "2764960"
  },
  {
    "text": "however this is all happening client side so we need somewhere in the server to stage this data",
    "start": "2764960",
    "end": "2771359"
  },
  {
    "text": "if i go here and edit this and look at metadata you can see i've got this metadata here this x adder section that contains a lot of",
    "start": "2771359",
    "end": "2778480"
  },
  {
    "text": "information the transaction needs but you can see here's the staged data right here",
    "start": "2778480",
    "end": "2784560"
  },
  {
    "text": "this is the data that's set to be replacing this document it's still staged so this means that",
    "start": "2784560",
    "end": "2791359"
  },
  {
    "text": "the data staged we killed it off halfway in between so it's just stuck there in a staged uh stage state but we're not going to",
    "start": "2791359",
    "end": "2798400"
  },
  {
    "text": "ever get dirty reads here because it's not been committed yet to that document",
    "start": "2798400",
    "end": "2803839"
  },
  {
    "text": "so the cooperative model says the next time this program runs which i'll go",
    "start": "2803839",
    "end": "2810000"
  },
  {
    "text": "ahead and run it now when that transaction object is created it's going to kick off",
    "start": "2810000",
    "end": "2816960"
  },
  {
    "text": "a background process that will clean up that data so this transactions when i",
    "start": "2816960",
    "end": "2822800"
  },
  {
    "text": "create this i mentioned before i don't know why this is showing over here that's going to kick off a background",
    "start": "2822800",
    "end": "2828160"
  },
  {
    "text": "process that will clean it up so i'm not even doing anything i'm just i just ran that transactions",
    "start": "2828160",
    "end": "2834000"
  },
  {
    "text": "object now right now the time the default timeout for that is 60 seconds so after 60 seconds this will say okay",
    "start": "2834000",
    "end": "2840640"
  },
  {
    "text": "that needs to be cleaned up and i can certainly adjust that to transactions to make them clean up faster",
    "start": "2840640",
    "end": "2846079"
  },
  {
    "text": "and so on but the cooperative model says that more clients will come along and they will clean up any messes",
    "start": "2846079",
    "end": "2852800"
  },
  {
    "text": "that happen that get left behind because of some crazy use case so i don't know if you",
    "start": "2852800",
    "end": "2858079"
  },
  {
    "text": "can see this on this in the screen down there but eventually you'll see a message down here that says oh i i ran the cleanup",
    "start": "2858079",
    "end": "2863920"
  },
  {
    "text": "operation i cleaned up that data so we're going to give that some time to run there if i go back here",
    "start": "2863920",
    "end": "2870079"
  },
  {
    "text": "notice that it still staged that that met that messy data is still there it's not been committed it's just staged",
    "start": "2870079",
    "end": "2877440"
  },
  {
    "text": "so we're going to wait over here okay we've got a transaction cleanup start run event",
    "start": "2877440",
    "end": "2883040"
  },
  {
    "text": "and so i think at this point if i look at these again that that metadata nope not yet not been",
    "start": "2883040",
    "end": "2889119"
  },
  {
    "text": "cleaned up yet we're still waiting for the cleanup to finish it does say here 60 seconds is the run",
    "start": "2889119",
    "end": "2896160"
  },
  {
    "text": "length so we have to wait a little longer for that but any other processes that are accessing this data",
    "start": "2896160",
    "end": "2902160"
  },
  {
    "text": "the data is still consistent because it's there's no dirty read possible that's the read committed or the monotonic",
    "start": "2902160",
    "end": "2908640"
  },
  {
    "text": "atomic view in action okay we can wait a little longer for",
    "start": "2908640",
    "end": "2914480"
  },
  {
    "text": "this to happen um just to see the cooperative model in action",
    "start": "2914480",
    "end": "2921040"
  },
  {
    "text": "60 seconds seems like forever when you're up here on stage it really does but it'll eventually happen uh if the if",
    "start": "2921040",
    "end": "2928480"
  },
  {
    "text": "the demo fates are with me i've practiced this a dozen times before and it worked fine",
    "start": "2928480",
    "end": "2934559"
  },
  {
    "text": "so eventually we should see the cleanup kick into place there okay there we go let's try it again",
    "start": "2934559",
    "end": "2941599"
  },
  {
    "text": "okay here and now the state is still here still not cooperating all right well i",
    "start": "2941599",
    "end": "2947920"
  },
  {
    "text": "think you get the idea what you'd eventually see is that this uh this x adders would become empty",
    "start": "2947920",
    "end": "2954000"
  },
  {
    "text": "uh because that they got cleaned up just give it one more time here see if",
    "start": "2954000",
    "end": "2959599"
  },
  {
    "text": "it gets cleaned up it's not cooperating with me today well sorry about that but uh that's",
    "start": "2959599",
    "end": "2966240"
  },
  {
    "text": "that's demos for you that's live demos for you well that's all i wanted to show with the demo so let's go back over to the",
    "start": "2966240",
    "end": "2971920"
  },
  {
    "text": "slides just a quick summary of of the",
    "start": "2971920",
    "end": "2978160"
  },
  {
    "text": "trade-offs here i've kind of gone through these already before but basically as the transactions give you",
    "start": "2978160",
    "end": "2984559"
  },
  {
    "text": "the ability to treat multiple operations as a single all or nothing",
    "start": "2984559",
    "end": "2990160"
  },
  {
    "text": "use only when necessary so i've i've said this multiple times i think it's worth driving home don't use an asset transaction if you",
    "start": "2990160",
    "end": "2996800"
  },
  {
    "text": "don't need to remember that there's overhead involved and that's one of the reasons why you shouldn't use an asset",
    "start": "2996800",
    "end": "3002720"
  },
  {
    "text": "transaction if you don't need to so don't filter everything through a transaction just because it's convenient",
    "start": "3002720",
    "end": "3008079"
  },
  {
    "text": "identify the areas that transaction necessary and apply it there solve with data modeling when you can so",
    "start": "3008079",
    "end": "3014240"
  },
  {
    "text": "data modeling if you aggregate things up into the aggregate roots that's always going to be faster",
    "start": "3014240",
    "end": "3019520"
  },
  {
    "text": "more performance and and less overhead involved in a transaction to just model as one piece of data but",
    "start": "3019520",
    "end": "3025680"
  },
  {
    "text": "ultimately don't be afraid to use a transaction when you need it that's why they're a tool there are",
    "start": "3025680",
    "end": "3030720"
  },
  {
    "text": "safety nets but you know don't just assume that just design your data",
    "start": "3030720",
    "end": "3036160"
  },
  {
    "text": "to use transactions everywhere because it's it's a safety net it's not something you're meant to just sort of lie in like",
    "start": "3036160",
    "end": "3041839"
  },
  {
    "text": "a hammock okay just to kind of go towards wrapping",
    "start": "3041839",
    "end": "3047119"
  },
  {
    "text": "up here transactions in nosql databases are basically on the cutting edge and they're still evolving",
    "start": "3047119",
    "end": "3052240"
  },
  {
    "text": "now what i just demoed for you uses the couch based key value access only so you can start transactions",
    "start": "3052240",
    "end": "3058960"
  },
  {
    "text": "perform inserts updates and reads of single documents one at a time using their keys and then commit if",
    "start": "3058960",
    "end": "3065520"
  },
  {
    "text": "you're using couchbase's query engine which is sql by the way couchbase is a nosql database with sql",
    "start": "3065520",
    "end": "3071040"
  },
  {
    "text": "uh you're not going to ever get a dirty read however you can't use sql at least not yet to make changes in",
    "start": "3071040",
    "end": "3078000"
  },
  {
    "text": "a transaction that can that can be rolled back right so if you want to do a mass update like an update statement with couch base",
    "start": "3078000",
    "end": "3084319"
  },
  {
    "text": "that's not yet supported in a transaction couchbase is currently working on that that's a another difficult problem to solve",
    "start": "3084319",
    "end": "3091760"
  },
  {
    "text": "speaking of cutting edge there are the couch base is not the only one there are other no nosql transaction",
    "start": "3091760",
    "end": "3096960"
  },
  {
    "text": "asset transaction efforts so with it's not a hundred percent clear on on what",
    "start": "3096960",
    "end": "3102240"
  },
  {
    "text": "they're actually doing for a transaction uh some various videos and papers suggest that",
    "start": "3102240",
    "end": "3107760"
  },
  {
    "text": "some of the things involved are time stamping operations with like lampard clocks if you've heard of those",
    "start": "3107760",
    "end": "3112880"
  },
  {
    "text": "um so again back to the server side problem there you have to make sure that your servers are",
    "start": "3112880",
    "end": "3119040"
  },
  {
    "text": "really perfectly synchronized otherwise it's going to be a problem uh gossiping is another part",
    "start": "3119040",
    "end": "3124800"
  },
  {
    "text": "of their um of their solution to disseminate data",
    "start": "3124800",
    "end": "3130400"
  },
  {
    "text": "to replicate transactions so there's a white paper there if you want to really go deep in the rabbit hole definitely check out that acm white",
    "start": "3130400",
    "end": "3136559"
  },
  {
    "text": "paper there but this is most other those sql databases that i've researched are all doing its server side and",
    "start": "3136559",
    "end": "3142079"
  },
  {
    "text": "couchbase is taking a different tack and saying let's do a client side and by the way i think i mentioned this",
    "start": "3142079",
    "end": "3148480"
  },
  {
    "text": "earlier but if you want links this is a hard link to kind of write down and type in so if you want those",
    "start": "3148480",
    "end": "3153599"
  },
  {
    "text": "links i will have the slides available in the slack channel right after the presentation so those will all be available for you there",
    "start": "3153599",
    "end": "3160000"
  },
  {
    "text": "cosmos db from microsoft is another one that they used to only support transactions inside of a stored",
    "start": "3160000",
    "end": "3165839"
  },
  {
    "text": "procedure but now as i said nosql continues to mature and you can use it what's called",
    "start": "3165839",
    "end": "3171440"
  },
  {
    "text": "a transaction batch which was introduced this year so you can write a transaction in your client code",
    "start": "3171440",
    "end": "3176800"
  },
  {
    "text": "now i still believe that it's server side still being implemented on the server",
    "start": "3176800",
    "end": "3182000"
  },
  {
    "text": "side there are some limitations of transaction batch some of them are very very reasonable so you have to limit to one partition",
    "start": "3182000",
    "end": "3190000"
  },
  {
    "text": "key which is kind of how cosmos groups and data together to spread workload around",
    "start": "3190000",
    "end": "3195359"
  },
  {
    "text": "so that transaction has to be limited to just that partition so that could be tricky",
    "start": "3195359",
    "end": "3201280"
  },
  {
    "text": "uh the other things like two megabytes five second and a hundred ops limits those seem extremely",
    "start": "3201280",
    "end": "3206640"
  },
  {
    "text": "reasonable to me and that just kind of reinforces the recommendation that don't use an asset",
    "start": "3206640",
    "end": "3211760"
  },
  {
    "text": "transaction unless you have to and there's a link to more information about how that works there again not a",
    "start": "3211760",
    "end": "3217839"
  },
  {
    "text": "really easy link to type in but available on slides one other thing i",
    "start": "3217839",
    "end": "3222960"
  },
  {
    "text": "thought i'd bring up is a cockroachdb now this is a relational database but it is distributed",
    "start": "3222960",
    "end": "3228319"
  },
  {
    "text": "um so it's an important example because we already showed that transactions are extremely",
    "start": "3228319",
    "end": "3233920"
  },
  {
    "text": "important for relational databases and uh cockroach is not a nosql database it's called so-called new sql",
    "start": "3233920",
    "end": "3241520"
  },
  {
    "text": "but i think it's worth bringing up so this is kind of like google spanner if you've heard of that before so some work that eric brewer's done on that",
    "start": "3241520",
    "end": "3247839"
  },
  {
    "text": "this is again a server-side implementation because they wanted to be compatible with postgres drivers",
    "start": "3247839",
    "end": "3253599"
  },
  {
    "text": "and so the only way they could do that on the client side is if they went out to every postgres driver in the world and",
    "start": "3253599",
    "end": "3259680"
  },
  {
    "text": "said okay we're going to give you cockroachdb transaction implementation",
    "start": "3259680",
    "end": "3265359"
  },
  {
    "text": "or you have to use the official cockroach postgres driver so they had to do it all on server side again we",
    "start": "3265359",
    "end": "3271040"
  },
  {
    "text": "have the clock syncing problem if the clock skews outside the limits the database could just",
    "start": "3271040",
    "end": "3276319"
  },
  {
    "text": "stop that's going to hurt availability availability now if you're using their cloud offering",
    "start": "3276319",
    "end": "3281440"
  },
  {
    "text": "this may not be as big of an issue because they're the ones that are managing the clocks and the concerns and all that but if you're running on your own data",
    "start": "3281440",
    "end": "3287040"
  },
  {
    "text": "center you have to really be concerned about that there's a youtube video here that talks about cockroach transactions",
    "start": "3287040",
    "end": "3293200"
  },
  {
    "text": "and specifically at 13 minutes 42 seconds that's where the transaction discussion starts",
    "start": "3293200",
    "end": "3299440"
  },
  {
    "text": "in that one all rights now they say you only remember three or four things from any given",
    "start": "3299440",
    "end": "3305119"
  },
  {
    "text": "presentation vis-a-vis so here they are neo the first one is",
    "start": "3305119",
    "end": "3310480"
  },
  {
    "text": "that you may not need transactions in a no-sql setting as much as you do in a relational setting",
    "start": "3310480",
    "end": "3316559"
  },
  {
    "text": "so the answer may be aggregation and not trying to take the exact same approach as you do with relational",
    "start": "3316559",
    "end": "3324079"
  },
  {
    "text": "nosql is maturing this session has been about the rise of acid transactions and nosql but there",
    "start": "3324079",
    "end": "3330160"
  },
  {
    "text": "have been tremendous advances in other areas like security integration reporting analytics deployment etc so if",
    "start": "3330160",
    "end": "3337680"
  },
  {
    "text": "you've dismissed no sequel in the past as being you know not mature enough or not prime time we're we're in at least the second if",
    "start": "3337680",
    "end": "3344160"
  },
  {
    "text": "not third generation of nosql at this point so it's worth a second look the answer",
    "start": "3344160",
    "end": "3350319"
  },
  {
    "text": "to why nosql continues to expand the reasons that it exists in the first place still apply",
    "start": "3350319",
    "end": "3355599"
  },
  {
    "text": "trade-offs to increase scalability high availability and flexibility but now that nosql is maturing the",
    "start": "3355599",
    "end": "3361920"
  },
  {
    "text": "answer is expanding high availability scalability flexibility they're all still there",
    "start": "3361920",
    "end": "3367680"
  },
  {
    "text": "even when you need some acid transaction capability so here's some rabbit hole for you some",
    "start": "3367680",
    "end": "3374000"
  },
  {
    "text": "more rabbit hole to follow jepson has a lot of material on consistency you definitely want to check that out uh graham popel he's one of the",
    "start": "3374000",
    "end": "3380640"
  },
  {
    "text": "engineers that was instrumental in uh transactions here at couch base he's got a full video if you want to dive",
    "start": "3380640",
    "end": "3386880"
  },
  {
    "text": "deep into that i myself wrote an acid blog post a while ago before couchbase had transactions that",
    "start": "3386880",
    "end": "3393760"
  },
  {
    "text": "just talks about acid and each individual part and and specifically acid with no sql",
    "start": "3393760",
    "end": "3400160"
  },
  {
    "text": "benchmarks are there couchbase publishes a huge amount of benchmarks this link goes to the transaction",
    "start": "3400160",
    "end": "3405359"
  },
  {
    "text": "portion of the benchmarks so you can kind of see the trade-off there that again to emphasize only use acid when you need to because",
    "start": "3405359",
    "end": "3412079"
  },
  {
    "text": "there is a performance trade-off there some white papers there on high",
    "start": "3412079",
    "end": "3417760"
  },
  {
    "text": "availability transactions and transaction design you can of course take a screenshot of these but i'm also",
    "start": "3417760",
    "end": "3423359"
  },
  {
    "text": "going to share the slides in the slack channel so let's continue that conversation",
    "start": "3423359",
    "end": "3429040"
  },
  {
    "text": "these are the ways you can reach out to me on twitter i'd live stream on twitch do some live coding i call it office",
    "start": "3429040",
    "end": "3434960"
  },
  {
    "text": "hours you're welcome to come to my office i'm not streaming today because this is i'm doing ndc oslo instead but normally",
    "start": "3434960",
    "end": "3441359"
  },
  {
    "text": "i stream twice a week on tuesday and thursday my email address is there conference room six is where i'll be",
    "start": "3441359",
    "end": "3447040"
  },
  {
    "text": "in the ndc oslo slack if you want to check out this mylan attempt at java coding see the transaction you can go find it",
    "start": "3447040",
    "end": "3453200"
  },
  {
    "text": "on github there there's that link okay uh that's all i've got thank you",
    "start": "3453200",
    "end": "3458880"
  },
  {
    "text": "very much everybody for uh for coming to my session i appreciate it uh it's great to see some of your faces",
    "start": "3458880",
    "end": "3465359"
  },
  {
    "text": "during the presentation i know this is a weird time and everything but we may have a couple minutes for questions now if anyone",
    "start": "3465359",
    "end": "3471520"
  },
  {
    "text": "has one",
    "start": "3471520",
    "end": "3474640"
  }
]