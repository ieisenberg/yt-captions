[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "hi I like cheating at programming and",
    "start": "2560",
    "end": "7930"
  },
  {
    "text": "today I'm going to show you my cheap",
    "start": "7930",
    "end": "10580"
  },
  {
    "text": "mode for creating web api's so I'm",
    "start": "10580",
    "end": "16129"
  },
  {
    "text": "Erland I write Haskell micro services",
    "start": "16129",
    "end": "19460"
  },
  {
    "text": "when people aren't looking and I know",
    "start": "19460",
    "end": "23480"
  },
  {
    "text": "the weekend has actually begun so this",
    "start": "23480",
    "end": "25970"
  },
  {
    "text": "will be a short talk and I will save you",
    "start": "25970",
    "end": "30500"
  },
  {
    "text": "from all the gory details",
    "start": "30500",
    "end": "31910"
  },
  {
    "text": "those are super interesting though so if",
    "start": "31910",
    "end": "34159"
  },
  {
    "text": "you ever meet me later just ask and I'd",
    "start": "34159",
    "end": "36469"
  },
  {
    "text": "love to explain so just warning at first",
    "start": "36469",
    "end": "41359"
  },
  {
    "text": "there will be Haskell don't run away",
    "start": "41359",
    "end": "45010"
  },
  {
    "text": "Haskell is not scary I come in peace and",
    "start": "45010",
    "end": "49719"
  },
  {
    "text": "actually been quite a few really good",
    "start": "49719",
    "end": "51859"
  },
  {
    "text": "functional programming talks here at NDC",
    "start": "51859",
    "end": "53870"
  },
  {
    "text": "which is fun so lots of f-sharp",
    "start": "53870",
    "end": "56379"
  },
  {
    "text": "Scott loss skins I hope that's this name",
    "start": "56379",
    "end": "60499"
  },
  {
    "text": "more or less talk on the main modeling",
    "start": "60499",
    "end": "62299"
  },
  {
    "text": "in Asha was awesome you should really",
    "start": "62299",
    "end": "64010"
  },
  {
    "text": "see it if you didn't and yeah this has",
    "start": "64010",
    "end": "68180"
  },
  {
    "text": "anyone here actually used f-sharp or",
    "start": "68180",
    "end": "70040"
  },
  {
    "text": "something no oh yeah okay so you'll",
    "start": "70040",
    "end": "74600"
  },
  {
    "text": "recognize it some bits so first actually",
    "start": "74600",
    "end": "79190"
  },
  {
    "text": "spoke at an elm conference last weekend",
    "start": "79190",
    "end": "81170"
  },
  {
    "text": "and I just mentioned in passing that I I",
    "start": "81170",
    "end": "84080"
  },
  {
    "text": "i needed a back-end right now at some",
    "start": "84080",
    "end": "87950"
  },
  {
    "text": "point so I wrote it in Haskell and",
    "start": "87950",
    "end": "89480"
  },
  {
    "text": "people came up to me afternoon said",
    "start": "89480",
    "end": "91280"
  },
  {
    "text": "that's really well surprising because",
    "start": "91280",
    "end": "94070"
  },
  {
    "text": "that's really not how we imagined high",
    "start": "94070",
    "end": "96650"
  },
  {
    "text": "school to be because for some reason",
    "start": "96650",
    "end": "100460"
  },
  {
    "text": "this is what people imagine like Haskell",
    "start": "100460",
    "end": "103160"
  },
  {
    "text": "being which well I mean kind of cool",
    "start": "103160",
    "end": "107540"
  },
  {
    "text": "that people think I'm smart when I write",
    "start": "107540",
    "end": "109280"
  },
  {
    "text": "Haskell but I have an actual picture",
    "start": "109280",
    "end": "112280"
  },
  {
    "text": "from work and this is I mean this is",
    "start": "112280",
    "end": "114860"
  },
  {
    "text": "much more close and I actually really",
    "start": "114860",
    "end": "116540"
  },
  {
    "text": "mean this and we'll get back to this but",
    "start": "116540",
    "end": "119800"
  },
  {
    "text": "let's get to the point",
    "start": "119800",
    "end": "121430"
  },
  {
    "start": "120000",
    "end": "420000"
  },
  {
    "text": "so servant is a library ecosystem for",
    "start": "121430",
    "end": "125870"
  },
  {
    "text": "building web services and it's really",
    "start": "125870",
    "end": "128869"
  },
  {
    "text": "really amazing and I really mean it when",
    "start": "128869",
    "end": "131689"
  },
  {
    "text": "I call it a cheap mode",
    "start": "131689",
    "end": "133860"
  },
  {
    "text": "so more precisely it is a type level",
    "start": "133860",
    "end": "137160"
  },
  {
    "text": "domain-specific language and it's a",
    "start": "137160",
    "end": "142890"
  },
  {
    "text": "family of libraries for using these API",
    "start": "142890",
    "end": "145410"
  },
  {
    "text": "types so type level language language",
    "start": "145410",
    "end": "148830"
  },
  {
    "text": "probably sounds quite cryptic but let's",
    "start": "148830",
    "end": "153150"
  },
  {
    "text": "look at actually what what I mean by",
    "start": "153150",
    "end": "154740"
  },
  {
    "text": "type level so there will be lots of hand",
    "start": "154740",
    "end": "159330"
  },
  {
    "text": "waving through this explanation and if",
    "start": "159330",
    "end": "161250"
  },
  {
    "text": "I'm not actually waving my hands just",
    "start": "161250",
    "end": "162960"
  },
  {
    "text": "imagine I'm doing that because it's yeah",
    "start": "162960",
    "end": "166580"
  },
  {
    "text": "that will I mean we're not saying here",
    "start": "166580",
    "end": "169080"
  },
  {
    "text": "all night I promise you a short talk so",
    "start": "169080",
    "end": "172200"
  },
  {
    "text": "the value level you all know that's",
    "start": "172200",
    "end": "173730"
  },
  {
    "text": "familiar I mean that's where your",
    "start": "173730",
    "end": "174900"
  },
  {
    "text": "variables and your function and contents",
    "start": "174900",
    "end": "176910"
  },
  {
    "text": "live that's everyday bread-and-butter",
    "start": "176910",
    "end": "179700"
  },
  {
    "text": "programming and we're used to these",
    "start": "179700",
    "end": "181800"
  },
  {
    "text": "values having types I mean the printers",
    "start": "181800",
    "end": "184860"
  },
  {
    "text": "are mixing them up and adopts some",
    "start": "184860",
    "end": "188130"
  },
  {
    "text": "classes of errors from happening at all",
    "start": "188130",
    "end": "190190"
  },
  {
    "text": "but if we look at types as well it looks",
    "start": "190190",
    "end": "194250"
  },
  {
    "text": "like they to kind of have types",
    "start": "194250",
    "end": "196860"
  },
  {
    "text": "sometimes so why do these lines probably",
    "start": "196860",
    "end": "203040"
  },
  {
    "text": "make a bit uncomfortable well it's not",
    "start": "203040",
    "end": "207350"
  },
  {
    "text": "well you're tempted to say well typed I",
    "start": "207350",
    "end": "210060"
  },
  {
    "text": "mean list takes one type argument not to",
    "start": "210060",
    "end": "213540"
  },
  {
    "text": "and that takes two not one so it looks",
    "start": "213540",
    "end": "217620"
  },
  {
    "text": "like these pipes kind of have super",
    "start": "217620",
    "end": "219600"
  },
  {
    "text": "types again and it kind of looks like a",
    "start": "219600",
    "end": "224700"
  },
  {
    "text": "list and maps are functions at the type",
    "start": "224700",
    "end": "227489"
  },
  {
    "text": "level they take pipes bring it in in the",
    "start": "227489",
    "end": "230190"
  },
  {
    "text": "first example and then string well this",
    "start": "230190",
    "end": "232590"
  },
  {
    "text": "is one and then return let's call it a",
    "start": "232590",
    "end": "235530"
  },
  {
    "text": "proper type that you actually take as an",
    "start": "235530",
    "end": "237870"
  },
  {
    "text": "argument or return from a function so",
    "start": "237870",
    "end": "241140"
  },
  {
    "text": "let's inspect this types of types and",
    "start": "241140",
    "end": "244170"
  },
  {
    "text": "now I'm just throwing some high school",
    "start": "244170",
    "end": "246209"
  },
  {
    "text": "at you and just bear with me so list",
    "start": "246209",
    "end": "250730"
  },
  {
    "text": "it's clean of a type level function that",
    "start": "250730",
    "end": "253019"
  },
  {
    "text": "takes a pipe and then returned to type",
    "start": "253019",
    "end": "255360"
  },
  {
    "text": "so if you give it an int then you have a",
    "start": "255360",
    "end": "258269"
  },
  {
    "text": "good old fashioned type you can return",
    "start": "258269",
    "end": "260459"
  },
  {
    "text": "from your function take it as an",
    "start": "260459",
    "end": "262380"
  },
  {
    "text": "argument you can read the double colon s",
    "start": "262380",
    "end": "265110"
  },
  {
    "text": "has pi",
    "start": "265110",
    "end": "265919"
  },
  {
    "text": "and map takes two types before it",
    "start": "265919",
    "end": "270629"
  },
  {
    "text": "returns a good old-fashioned type that",
    "start": "270629",
    "end": "273120"
  },
  {
    "text": "you can use on the valley level again",
    "start": "273120",
    "end": "274740"
  },
  {
    "text": "and don't be confused by the error",
    "start": "274740",
    "end": "277860"
  },
  {
    "text": "orientation in Haskell you can kind of",
    "start": "277860",
    "end": "279180"
  },
  {
    "text": "pretend it says type comma type two type",
    "start": "279180",
    "end": "281370"
  },
  {
    "text": "I won't really get into the details it's",
    "start": "281370",
    "end": "284400"
  },
  {
    "text": "not really important here but if we give",
    "start": "284400",
    "end": "286560"
  },
  {
    "text": "it a string well then we have a function",
    "start": "286560",
    "end": "288270"
  },
  {
    "text": "from type two type and only when we give",
    "start": "288270",
    "end": "290909"
  },
  {
    "text": "it for example a string element then we",
    "start": "290909",
    "end": "293699"
  },
  {
    "text": "have a good old-fashioned type so so far",
    "start": "293699",
    "end": "296819"
  },
  {
    "text": "so good",
    "start": "296819",
    "end": "297949"
  },
  {
    "text": "any questions just yell out at any time",
    "start": "297949",
    "end": "301550"
  },
  {
    "text": "so this kind of makes sense but let's",
    "start": "301550",
    "end": "306659"
  },
  {
    "text": "take it a bit further so let's pretend",
    "start": "306659",
    "end": "310409"
  },
  {
    "text": "we have or we create a type called EB",
    "start": "310409",
    "end": "313949"
  },
  {
    "text": "type and it has to construct your secret",
    "start": "313949",
    "end": "317099"
  },
  {
    "text": "lies in PostgreSQL this is kind of like",
    "start": "317099",
    "end": "318930"
  },
  {
    "text": "an enum and let's make a function at the",
    "start": "318930",
    "end": "323250"
  },
  {
    "text": "type level so it says type family which",
    "start": "323250",
    "end": "325919"
  },
  {
    "text": "is a really fancy term but it just means",
    "start": "325919",
    "end": "327930"
  },
  {
    "text": "function at the type level so we have a",
    "start": "327930",
    "end": "330360"
  },
  {
    "text": "function at type level called DB fetch",
    "start": "330360",
    "end": "332039"
  },
  {
    "text": "it takes one of these DB type types and",
    "start": "332039",
    "end": "336979"
  },
  {
    "text": "any well a T of any type and then return",
    "start": "336979",
    "end": "341159"
  },
  {
    "text": "to type which I know is kind of",
    "start": "341159",
    "end": "343319"
  },
  {
    "text": "strange-looking but we can create",
    "start": "343319",
    "end": "346439"
  },
  {
    "text": "instances of this type level function so",
    "start": "346439",
    "end": "348180"
  },
  {
    "text": "for sequel Lite we are returning the",
    "start": "348180",
    "end": "351149"
  },
  {
    "text": "function type file path to IOT again I",
    "start": "351149",
    "end": "356039"
  },
  {
    "text": "kind of all gloss over the details but I",
    "start": "356039",
    "end": "357899"
  },
  {
    "text": "mean a file path we understand key is",
    "start": "357899",
    "end": "360960"
  },
  {
    "text": "the type we're going to return for",
    "start": "360960",
    "end": "362189"
  },
  {
    "text": "example and i/o just means you can",
    "start": "362189",
    "end": "364469"
  },
  {
    "text": "perform I ll do in this PostgreSQL let's",
    "start": "364469",
    "end": "368099"
  },
  {
    "text": "say we take a connection pool and then",
    "start": "368099",
    "end": "370199"
  },
  {
    "text": "returns an i/o of T and we could then",
    "start": "370199",
    "end": "373740"
  },
  {
    "text": "write a function at the value level and",
    "start": "373740",
    "end": "375599"
  },
  {
    "text": "we could compute its type so we call DB",
    "start": "375599",
    "end": "379529"
  },
  {
    "text": "fetch equal add user that will compute",
    "start": "379529",
    "end": "381899"
  },
  {
    "text": "the type file path to i/o user this is",
    "start": "381899",
    "end": "385169"
  },
  {
    "text": "kind of silly and you wouldn't really do",
    "start": "385169",
    "end": "387210"
  },
  {
    "text": "this but it looks like we can manipulate",
    "start": "387210",
    "end": "391560"
  },
  {
    "text": "tiny types at least and we can have type",
    "start": "391560",
    "end": "394860"
  },
  {
    "text": "level functions take and return types",
    "start": "394860",
    "end": "398010"
  },
  {
    "text": "okay so I think that was the most maybe",
    "start": "398010",
    "end": "401730"
  },
  {
    "text": "unfamiliar and advanced part and the",
    "start": "401730",
    "end": "405030"
  },
  {
    "text": "details aren't super super important but",
    "start": "405030",
    "end": "408240"
  },
  {
    "text": "the important part is we can actually",
    "start": "408240",
    "end": "410520"
  },
  {
    "text": "use and manipulate types alone I mean so",
    "start": "410520",
    "end": "416030"
  },
  {
    "text": "let's just push this on our mental stack",
    "start": "416030",
    "end": "419190"
  },
  {
    "text": "and get to the point",
    "start": "419190",
    "end": "421230"
  },
  {
    "start": "420000",
    "end": "768000"
  },
  {
    "text": "so servant let's look at the servant",
    "start": "421230",
    "end": "423900"
  },
  {
    "text": "language so I talked about it as a",
    "start": "423900",
    "end": "426660"
  },
  {
    "text": "domain-specific language at the type",
    "start": "426660",
    "end": "428160"
  },
  {
    "text": "level and that's exactly what it is and",
    "start": "428160",
    "end": "433580"
  },
  {
    "text": "as I mention it's this language and",
    "start": "433580",
    "end": "436200"
  },
  {
    "text": "library so let's look at some examples",
    "start": "436200",
    "end": "441030"
  },
  {
    "text": "even though we don't really know the",
    "start": "441030",
    "end": "443130"
  },
  {
    "text": "language at all so this describes end",
    "start": "443130",
    "end": "448440"
  },
  {
    "text": "point under slash users that respond to",
    "start": "448440",
    "end": "452190"
  },
  {
    "text": "get requests for a list of users",
    "start": "452190",
    "end": "455390"
  },
  {
    "text": "represented as JSON or XML so we don't",
    "start": "455390",
    "end": "460440"
  },
  {
    "text": "know servant yet we haven't really",
    "start": "460440",
    "end": "461640"
  },
  {
    "text": "looked at it but I mean this kind of",
    "start": "461640",
    "end": "463440"
  },
  {
    "text": "makes sense already there's a strange",
    "start": "463440",
    "end": "466230"
  },
  {
    "text": "take on the list just ignore it just",
    "start": "466230",
    "end": "468240"
  },
  {
    "text": "means I mean the type I mean the list",
    "start": "468240",
    "end": "471150"
  },
  {
    "text": "type not the actual list but ignore it",
    "start": "471150",
    "end": "476060"
  },
  {
    "text": "slash users slash and ID well we have an",
    "start": "477200",
    "end": "481080"
  },
  {
    "text": "endpoint under slash users it will",
    "start": "481080",
    "end": "483000"
  },
  {
    "text": "capture an integer we're going to refer",
    "start": "483000",
    "end": "485070"
  },
  {
    "text": "to it as ID and it responds to get",
    "start": "485070",
    "end": "489390"
  },
  {
    "text": "requests and we'll return users so I",
    "start": "489390",
    "end": "491730"
  },
  {
    "text": "mean we're still just playing with pipes",
    "start": "491730",
    "end": "493170"
  },
  {
    "text": "there this is just a pipe alias actually",
    "start": "493170",
    "end": "497720"
  },
  {
    "text": "and we can go farther I mean let's have",
    "start": "497930",
    "end": "502290"
  },
  {
    "text": "a post endpoint so under slash users if",
    "start": "502290",
    "end": "506370"
  },
  {
    "text": "you give a request body that contains a",
    "start": "506370",
    "end": "508590"
  },
  {
    "text": "user type represented as XML or JSON we",
    "start": "508590",
    "end": "512880"
  },
  {
    "text": "will respond to post requests and return",
    "start": "512880",
    "end": "515219"
  },
  {
    "text": "XML or JSON and a user up send an XML",
    "start": "515220",
    "end": "518400"
  },
  {
    "text": "adjacent and again this is only theis or",
    "start": "518400",
    "end": "522150"
  },
  {
    "text": "you can kind of imagine what an actual",
    "start": "522150",
    "end": "524430"
  },
  {
    "text": "server and implementation would look",
    "start": "524430",
    "end": "526950"
  },
  {
    "text": "like here I mean so it's apparent that",
    "start": "526950",
    "end": "530010"
  },
  {
    "text": "this user type needs me",
    "start": "530010",
    "end": "531420"
  },
  {
    "text": "to have some from XML on from Jason",
    "start": "531420",
    "end": "534389"
  },
  {
    "text": "instance and to XML on to Jason but",
    "start": "534389",
    "end": "537709"
  },
  {
    "text": "again we're only playing with the API",
    "start": "537709",
    "end": "540329"
  },
  {
    "text": "and we're only a pipe level so let's I",
    "start": "540329",
    "end": "545820"
  },
  {
    "text": "mean this is Scott talked about like",
    "start": "545820",
    "end": "549300"
  },
  {
    "text": "almost readable by non-programmer codes",
    "start": "549300",
    "end": "551940"
  },
  {
    "text": "this is almost readable but we can do",
    "start": "551940",
    "end": "555209"
  },
  {
    "text": "much much much better and we'll get back",
    "start": "555209",
    "end": "557130"
  },
  {
    "text": "to that",
    "start": "557130",
    "end": "558019"
  },
  {
    "text": "so let's actually look at the language",
    "start": "558019",
    "end": "561000"
  },
  {
    "text": "so we've already seen some building",
    "start": "561000",
    "end": "563220"
  },
  {
    "text": "blocks like this post pipe so post is a",
    "start": "563220",
    "end": "566220"
  },
  {
    "text": "pipe constructor taking well a list of",
    "start": "566220",
    "end": "568680"
  },
  {
    "text": "pipes and pipe to return we have delete",
    "start": "568680",
    "end": "573180"
  },
  {
    "text": "I mean you can imagine put post and so",
    "start": "573180",
    "end": "575790"
  },
  {
    "text": "on we have a wreck body type that we can",
    "start": "575790",
    "end": "578730"
  },
  {
    "text": "use in our API descriptions query",
    "start": "578730",
    "end": "583949"
  },
  {
    "text": "parameters header I mean you can",
    "start": "583949",
    "end": "586680"
  },
  {
    "text": "describe a full API at the type level we",
    "start": "586680",
    "end": "592860"
  },
  {
    "text": "also saw some glue I mean so you have",
    "start": "592860",
    "end": "595410"
  },
  {
    "text": "the drunk happy bird Combinator for like",
    "start": "595410",
    "end": "599820"
  },
  {
    "text": "combining parts within an endpoint and",
    "start": "599820",
    "end": "601760"
  },
  {
    "text": "the well angry screaming bird for",
    "start": "601760",
    "end": "606420"
  },
  {
    "text": "combining like whole endpoints it's kind",
    "start": "606420",
    "end": "608070"
  },
  {
    "text": "of like an alternative thing so that's",
    "start": "608070",
    "end": "613820"
  },
  {
    "text": "cool and all kind of vague but let's",
    "start": "613820",
    "end": "617610"
  },
  {
    "text": "build an API with this so let's pretend",
    "start": "617610",
    "end": "620430"
  },
  {
    "text": "we have a super simple blogging system",
    "start": "620430",
    "end": "622140"
  },
  {
    "text": "so you have users and you have posts",
    "start": "622140",
    "end": "624269"
  },
  {
    "text": "I'll just focus on the users because",
    "start": "624269",
    "end": "626579"
  },
  {
    "text": "that's the simplest so let's pretend we",
    "start": "626579",
    "end": "630240"
  },
  {
    "text": "have a data type called user as one",
    "start": "630240",
    "end": "632339"
  },
  {
    "text": "constructor user as true stringfield's",
    "start": "632339",
    "end": "636209"
  },
  {
    "text": "username and name and syntax isn't super",
    "start": "636209",
    "end": "639240"
  },
  {
    "text": "important but anyway and we have one",
    "start": "639240",
    "end": "642990"
  },
  {
    "text": "endpoint and our slash user you can ask",
    "start": "642990",
    "end": "646050"
  },
  {
    "text": "for a specific user we capture a user",
    "start": "646050",
    "end": "649800"
  },
  {
    "text": "name as a string and we return a user",
    "start": "649800",
    "end": "652920"
  },
  {
    "text": "and we only respond to Jason so if a",
    "start": "652920",
    "end": "655380"
  },
  {
    "text": "client asked for SML which is got a",
    "start": "655380",
    "end": "656930"
  },
  {
    "text": "content type not supported whatever",
    "start": "656930",
    "end": "659180"
  },
  {
    "text": "that's in HD in HTTP",
    "start": "659180",
    "end": "663080"
  },
  {
    "text": "and we also have what I guess is an",
    "start": "663080",
    "end": "667459"
  },
  {
    "text": "update endpoint so you can send a user",
    "start": "667459",
    "end": "670240"
  },
  {
    "text": "encoded jasonandrhe in the body and we",
    "start": "670240",
    "end": "675380"
  },
  {
    "text": "respond to a put and will spawn with",
    "start": "675380",
    "end": "678110"
  },
  {
    "text": "Jason and with a user so I mean this",
    "start": "678110",
    "end": "682310"
  },
  {
    "text": "probably just takes representation of",
    "start": "682310",
    "end": "683779"
  },
  {
    "text": "user say you sit if we think as a server",
    "start": "683779",
    "end": "686510"
  },
  {
    "text": "and then just returns the new",
    "start": "686510",
    "end": "687709"
  },
  {
    "text": "representation so I review the the",
    "start": "687709",
    "end": "691820"
  },
  {
    "text": "combining endpoints operator and if we",
    "start": "691820",
    "end": "699440"
  },
  {
    "text": "had similar a similar API for post we",
    "start": "699440",
    "end": "701839"
  },
  {
    "text": "could just call our API well that's just",
    "start": "701839",
    "end": "703640"
  },
  {
    "text": "a combination of users API and posts API",
    "start": "703640",
    "end": "706190"
  },
  {
    "text": "and these would probably live in",
    "start": "706190",
    "end": "708320"
  },
  {
    "text": "different modules and you could like mix",
    "start": "708320",
    "end": "710779"
  },
  {
    "text": "and match your API as you want maybe you",
    "start": "710779",
    "end": "712550"
  },
  {
    "text": "want to expose different API s for about",
    "start": "712550",
    "end": "715130"
  },
  {
    "text": "different versions of your server but",
    "start": "715130",
    "end": "719320"
  },
  {
    "text": "again we're only playing with types at",
    "start": "719320",
    "end": "722000"
  },
  {
    "text": "this point so and of course we could go",
    "start": "722000",
    "end": "727610"
  },
  {
    "text": "further and maybe protect with dot like",
    "start": "727610",
    "end": "731570"
  },
  {
    "text": "our users API while our post API is",
    "start": "731570",
    "end": "734180"
  },
  {
    "text": "public kind of a weird setup here and of",
    "start": "734180",
    "end": "739760"
  },
  {
    "text": "course we could just choose to version",
    "start": "739760",
    "end": "742100"
  },
  {
    "text": "or whole API so maybe hide everything",
    "start": "742100",
    "end": "744649"
  },
  {
    "text": "but some versions so here's everything",
    "start": "744649",
    "end": "747770"
  },
  {
    "text": "just living under v1 so okay so we have",
    "start": "747770",
    "end": "753860"
  },
  {
    "text": "our type but that's well we won't want",
    "start": "753860",
    "end": "759380"
  },
  {
    "text": "to live on the value level I mean what",
    "start": "759380",
    "end": "760670"
  },
  {
    "text": "can we do with the type well actually we",
    "start": "760670",
    "end": "762560"
  },
  {
    "text": "can do a lot with a type so the most",
    "start": "762560",
    "end": "766190"
  },
  {
    "text": "obvious one but not the only thing is",
    "start": "766190",
    "end": "768589"
  },
  {
    "start": "768000",
    "end": "930000"
  },
  {
    "text": "just well writing a server so probably",
    "start": "768589",
    "end": "771800"
  },
  {
    "text": "what you want to do not always so a",
    "start": "771800",
    "end": "776449"
  },
  {
    "text": "server as you all know is well it's just",
    "start": "776449",
    "end": "779990"
  },
  {
    "text": "really I mean a handler for an endpoint",
    "start": "779990",
    "end": "781850"
  },
  {
    "text": "is just taking a request and returning a",
    "start": "781850",
    "end": "785329"
  },
  {
    "text": "response I mean abstractly apart from",
    "start": "785329",
    "end": "788449"
  },
  {
    "text": "things like your routing and so on but",
    "start": "788449",
    "end": "791810"
  },
  {
    "text": "we have a lot more information we don't",
    "start": "791810",
    "end": "794660"
  },
  {
    "text": "want this kind of lower-level stuff and",
    "start": "794660",
    "end": "797320"
  },
  {
    "text": "most of all because HTTP it's freaking",
    "start": "797320",
    "end": "800270"
  },
  {
    "text": "complex and this is the decision tree",
    "start": "800270",
    "end": "802670"
  },
  {
    "text": "for status code for a GP 1 1 & 2 0 and I",
    "start": "802670",
    "end": "808150"
  },
  {
    "text": "mean if you read the RF season can do",
    "start": "808150",
    "end": "811970"
  },
  {
    "text": "this I mean good for you but this is",
    "start": "811970",
    "end": "814340"
  },
  {
    "text": "freaking hard and if you juggle headers",
    "start": "814340",
    "end": "819320"
  },
  {
    "text": "and status codes and so on you I mean",
    "start": "819320",
    "end": "822380"
  },
  {
    "text": "one it's hard and you will make mistakes",
    "start": "822380",
    "end": "824680"
  },
  {
    "text": "just inevitable so it's so complex so",
    "start": "824680",
    "end": "829930"
  },
  {
    "text": "let's try to do better so just a",
    "start": "830230",
    "end": "833480"
  },
  {
    "text": "reminder so this is our our users API we",
    "start": "833480",
    "end": "836150"
  },
  {
    "text": "have encoded this as a type this is",
    "start": "836150",
    "end": "838700"
  },
  {
    "text": "really what we want to implement as a",
    "start": "838700",
    "end": "839870"
  },
  {
    "text": "server so a top-level server type is",
    "start": "839870",
    "end": "846770"
  },
  {
    "text": "called users server as a function and",
    "start": "846770",
    "end": "849470"
  },
  {
    "text": "you can see the type signature calls",
    "start": "849470",
    "end": "852380"
  },
  {
    "text": "kind of type level functional function",
    "start": "852380",
    "end": "856070"
  },
  {
    "text": "called the server taking our API type so",
    "start": "856070",
    "end": "859340"
  },
  {
    "text": "this is one of the type of functions",
    "start": "859340",
    "end": "860780"
  },
  {
    "text": "like the DB fetch we saw earlier and at",
    "start": "860780",
    "end": "864710"
  },
  {
    "text": "the value level we just say this server",
    "start": "864710",
    "end": "866870"
  },
  {
    "text": "is a combination of a get users Handler",
    "start": "866870",
    "end": "869630"
  },
  {
    "text": "and an update users Handler and the",
    "start": "869630",
    "end": "874010"
  },
  {
    "text": "functions are quite nice so I mean the",
    "start": "874010",
    "end": "877940"
  },
  {
    "text": "get users handle to take a string",
    "start": "877940",
    "end": "879230"
  },
  {
    "text": "representing the user name or ID and it",
    "start": "879230",
    "end": "882740"
  },
  {
    "text": "just returns a user type and it can do I",
    "start": "882740",
    "end": "884960"
  },
  {
    "text": "owe so and well the update user takes a",
    "start": "884960",
    "end": "890090"
  },
  {
    "text": "string for the ID a new user and returns",
    "start": "890090",
    "end": "893690"
  },
  {
    "text": "presumably I mean that that user after",
    "start": "893690",
    "end": "896089"
  },
  {
    "text": "it always written database and I've",
    "start": "896089",
    "end": "899030"
  },
  {
    "text": "included the implementation but it kind",
    "start": "899030",
    "end": "901250"
  },
  {
    "text": "of gives itself because you're so",
    "start": "901250",
    "end": "903610"
  },
  {
    "text": "constrained at this point which is",
    "start": "903610",
    "end": "905750"
  },
  {
    "text": "awesome because you can really only do",
    "start": "905750",
    "end": "908870"
  },
  {
    "text": "one thing and the the hard part has",
    "start": "908870",
    "end": "913339"
  },
  {
    "text": "already been taken care of that was",
    "start": "913339",
    "end": "914690"
  },
  {
    "text": "defining the API that's probably",
    "start": "914690",
    "end": "917540"
  },
  {
    "text": "something you did with your teammates",
    "start": "917540",
    "end": "919070"
  },
  {
    "text": "and so on and",
    "start": "919070",
    "end": "921570"
  },
  {
    "text": "the other hard part is like a TSP itself",
    "start": "921570",
    "end": "925060"
  },
  {
    "text": "and that's kind of abstracted away here",
    "start": "925060",
    "end": "927130"
  },
  {
    "text": "which is super nice so we got a lots of",
    "start": "927130",
    "end": "931180"
  },
  {
    "start": "930000",
    "end": "990000"
  },
  {
    "text": "free",
    "start": "931180",
    "end": "931660"
  },
  {
    "text": "I mean decoding the request body and",
    "start": "931660",
    "end": "935290"
  },
  {
    "text": "dealing with all the error cases",
    "start": "935290",
    "end": "938190"
  },
  {
    "text": "encoding the response I mean we just",
    "start": "938190",
    "end": "940570"
  },
  {
    "text": "returned user we don't care if it was",
    "start": "940570",
    "end": "942070"
  },
  {
    "text": "XML or JSON the compiler will make sure",
    "start": "942070",
    "end": "944350"
  },
  {
    "text": "that if we have said we can return an",
    "start": "944350",
    "end": "946690"
  },
  {
    "text": "XML we better have a to XML instance for",
    "start": "946690",
    "end": "949630"
  },
  {
    "text": "that type and validating the query so if",
    "start": "949630",
    "end": "957040"
  },
  {
    "text": "you take a user as a request body and",
    "start": "957040",
    "end": "960400"
  },
  {
    "text": "it's invalid I mean you will never I",
    "start": "960400",
    "end": "963280"
  },
  {
    "text": "mean the requests will not even reach",
    "start": "963280",
    "end": "965350"
  },
  {
    "text": "your handler because the framework is",
    "start": "965350",
    "end": "966880"
  },
  {
    "text": "already taking care of returning a 400",
    "start": "966880",
    "end": "969360"
  },
  {
    "text": "bad request so so this is good I mean",
    "start": "969360",
    "end": "972970"
  },
  {
    "text": "these handlers are super simple and the",
    "start": "972970",
    "end": "977560"
  },
  {
    "text": "hard part was is really just defining",
    "start": "977560",
    "end": "979780"
  },
  {
    "text": "the API so while actually writing the",
    "start": "979780",
    "end": "982780"
  },
  {
    "text": "server that's why this is a picture me",
    "start": "982780",
    "end": "984820"
  },
  {
    "text": "because it's it's super simple and I",
    "start": "984820",
    "end": "986950"
  },
  {
    "text": "really like that but there's more I mean",
    "start": "986950",
    "end": "993190"
  },
  {
    "start": "990000",
    "end": "1054000"
  },
  {
    "text": "we have this type and we can actually do",
    "start": "993190",
    "end": "995560"
  },
  {
    "text": "more than just to create a server that's",
    "start": "995560",
    "end": "996850"
  },
  {
    "text": "the obvious use case so we can derive",
    "start": "996850",
    "end": "1002780"
  },
  {
    "text": "documentation from the type so here I'm",
    "start": "1002780",
    "end": "1005640"
  },
  {
    "text": "using a library called swagger a certain",
    "start": "1005640",
    "end": "1008250"
  },
  {
    "text": "swagger swagger and I'm basically saying",
    "start": "1008250",
    "end": "1010500"
  },
  {
    "text": "that actually what I want to serve is",
    "start": "1010500",
    "end": "1012300"
  },
  {
    "text": "under slash swagger UI I want to serve",
    "start": "1012300",
    "end": "1014730"
  },
  {
    "text": "the swagger you I also want to serve",
    "start": "1014730",
    "end": "1016590"
  },
  {
    "text": "swagger JSON file in addition to my API",
    "start": "1016590",
    "end": "1019500"
  },
  {
    "text": "so every time I push a new version of",
    "start": "1019500",
    "end": "1023730"
  },
  {
    "text": "the server and it spun up I will just",
    "start": "1023730",
    "end": "1025230"
  },
  {
    "text": "serve up-to-date documentation which is",
    "start": "1025230",
    "end": "1027600"
  },
  {
    "text": "also nice I mean you could also just",
    "start": "1027600",
    "end": "1029100"
  },
  {
    "text": "build the documentation and maybe not",
    "start": "1029100",
    "end": "1031560"
  },
  {
    "text": "service from a server but that's a",
    "start": "1031560",
    "end": "1033030"
  },
  {
    "text": "detail so from our simple API definition",
    "start": "1033030",
    "end": "1036600"
  },
  {
    "text": "where we get this an interactive version",
    "start": "1036600",
    "end": "1039390"
  },
  {
    "text": "where you can play around with the",
    "start": "1039390",
    "end": "1040980"
  },
  {
    "text": "request this is really really nice it's",
    "start": "1040980",
    "end": "1043709"
  },
  {
    "text": "a very I mean as you probably know a fun",
    "start": "1043709",
    "end": "1045660"
  },
  {
    "text": "way to play around with AP ice and",
    "start": "1045660",
    "end": "1047810"
  },
  {
    "text": "always up to date",
    "start": "1047810",
    "end": "1050130"
  },
  {
    "text": "and yeah super simple another thing we",
    "start": "1050130",
    "end": "1056430"
  },
  {
    "start": "1054000",
    "end": "1130000"
  },
  {
    "text": "can do is deriving client functions so",
    "start": "1056430",
    "end": "1060890"
  },
  {
    "text": "here I'm calling right js4 API I'm",
    "start": "1060890",
    "end": "1067020"
  },
  {
    "text": "specifying but I want vanilla jeaious I",
    "start": "1067020",
    "end": "1069420"
  },
  {
    "text": "could have send it said the jQuery",
    "start": "1069420",
    "end": "1071520"
  },
  {
    "text": "angular Axios and I don't know what else",
    "start": "1071520",
    "end": "1074760"
  },
  {
    "text": "and this means you can actually build",
    "start": "1074760",
    "end": "1078630"
  },
  {
    "text": "the the the client functions for let's",
    "start": "1078630",
    "end": "1084780"
  },
  {
    "text": "say the front-end at Build time which is",
    "start": "1084780",
    "end": "1087510"
  },
  {
    "text": "pretty cool so you'll get something like",
    "start": "1087510",
    "end": "1089520"
  },
  {
    "text": "this which just plain old JavaScript and",
    "start": "1089520",
    "end": "1096420"
  },
  {
    "text": "you don't have to write it because you",
    "start": "1096420",
    "end": "1099240"
  },
  {
    "text": "really don't want to but yeah I think",
    "start": "1099240",
    "end": "1106230"
  },
  {
    "text": "there is typescript support I I just",
    "start": "1106230",
    "end": "1108780"
  },
  {
    "text": "check now I mean every time I check so",
    "start": "1108780",
    "end": "1110520"
  },
  {
    "text": "the question was is there typescript",
    "start": "1110520",
    "end": "1111750"
  },
  {
    "text": "support every time I check there is",
    "start": "1111750",
    "end": "1113250"
  },
  {
    "text": "there are like new libraries there are",
    "start": "1113250",
    "end": "1114900"
  },
  {
    "text": "like code generator for well Haskell",
    "start": "1114900",
    "end": "1117420"
  },
  {
    "text": "JavaScript c-sharp Ruby Python pure",
    "start": "1117420",
    "end": "1120390"
  },
  {
    "text": "script",
    "start": "1120390",
    "end": "1120840"
  },
  {
    "text": "yes typescript and this is pretty cool",
    "start": "1120840",
    "end": "1124890"
  },
  {
    "text": "but I mean you can I mean with",
    "start": "1124890",
    "end": "1126540"
  },
  {
    "text": "typescript you can take it even further",
    "start": "1126540",
    "end": "1128250"
  },
  {
    "text": "I guess if their support because this is",
    "start": "1128250",
    "end": "1130830"
  },
  {
    "text": "what you get for Elm so Elm for those",
    "start": "1130830",
    "end": "1134010"
  },
  {
    "text": "who don't know it's also like a",
    "start": "1134010",
    "end": "1135990"
  },
  {
    "text": "front-end language typed runs in",
    "start": "1135990",
    "end": "1137820"
  },
  {
    "text": "language and this is actually something",
    "start": "1137820",
    "end": "1140880"
  },
  {
    "text": "I use in in a project right now so I",
    "start": "1140880",
    "end": "1144350"
  },
  {
    "text": "specify that I want to create I mean",
    "start": "1144350",
    "end": "1147860"
  },
  {
    "text": "this is a jumble of of code but I mean",
    "start": "1147860",
    "end": "1150960"
  },
  {
    "text": "the important part is it will generate",
    "start": "1150960",
    "end": "1152910"
  },
  {
    "text": "these decoder functions for for Elm I",
    "start": "1152910",
    "end": "1157260"
  },
  {
    "text": "will make sure that any jason it",
    "start": "1157260",
    "end": "1158880"
  },
  {
    "text": "consumes will be will have to be decoded",
    "start": "1158880",
    "end": "1161040"
  },
  {
    "text": "into l types before it can be used",
    "start": "1161040",
    "end": "1163770"
  },
  {
    "text": "because l doesn't have like null or",
    "start": "1163770",
    "end": "1165780"
  },
  {
    "text": "undefined or I don't know what you can",
    "start": "1165780",
    "end": "1167490"
  },
  {
    "text": "find in jason and you probably want to",
    "start": "1167490",
    "end": "1170400"
  },
  {
    "text": "do this anyway but i mean writing them",
    "start": "1170400",
    "end": "1172170"
  },
  {
    "text": "writing them as a hassle it's it's it's",
    "start": "1172170",
    "end": "1174420"
  },
  {
    "text": "really not fun but if you specify your",
    "start": "1174420",
    "end": "1176670"
  },
  {
    "text": "api with search with servant you can get",
    "start": "1176670",
    "end": "1179910"
  },
  {
    "text": "this for free so it will generate this",
    "start": "1179910",
    "end": "1182370"
  },
  {
    "text": "kind of elm code or",
    "start": "1182370",
    "end": "1184140"
  },
  {
    "text": "has the pipes it has a decoder which I",
    "start": "1184140",
    "end": "1188670"
  },
  {
    "text": "mean it's really simple in this case",
    "start": "1188670",
    "end": "1189720"
  },
  {
    "text": "we'll just look for a username and a",
    "start": "1189720",
    "end": "1191700"
  },
  {
    "text": "name in the Dacian and then return that",
    "start": "1191700",
    "end": "1194850"
  },
  {
    "text": "as a user type and you get these query",
    "start": "1194850",
    "end": "1197670"
  },
  {
    "text": "functions so you have a get users by ID",
    "start": "1197670",
    "end": "1200610"
  },
  {
    "text": "taking a string and returning it just be",
    "start": "1200610",
    "end": "1204420"
  },
  {
    "text": "a request type and patch user Spidy",
    "start": "1204420",
    "end": "1208320"
  },
  {
    "text": "for if we had a patch endpoint and so on",
    "start": "1208320",
    "end": "1211500"
  },
  {
    "text": "and this is pretty magical so the",
    "start": "1211500",
    "end": "1217050"
  },
  {
    "text": "project I'm currently currently working",
    "start": "1217050",
    "end": "1218670"
  },
  {
    "text": "on we actually have a back in britain",
    "start": "1218670",
    "end": "1220290"
  },
  {
    "text": "Haskell but it wouldn't have to be",
    "start": "1220290",
    "end": "1222060"
  },
  {
    "text": "written nasca we just need to specify",
    "start": "1222060",
    "end": "1223470"
  },
  {
    "text": "the API in the servant task a library",
    "start": "1223470",
    "end": "1226650"
  },
  {
    "text": "and since we generate the API functions",
    "start": "1226650",
    "end": "1231810"
  },
  {
    "text": "at Build time if I go to the backend and",
    "start": "1231810",
    "end": "1234570"
  },
  {
    "text": "change a type let's say that we have a",
    "start": "1234570",
    "end": "1237900"
  },
  {
    "text": "person and we say that actually we don't",
    "start": "1237900",
    "end": "1240600"
  },
  {
    "text": "always have an age let's change age to",
    "start": "1240600",
    "end": "1243270"
  },
  {
    "text": "maybe age maybe it's an option type and",
    "start": "1243270",
    "end": "1245150"
  },
  {
    "text": "if I just compile the project the front",
    "start": "1245150",
    "end": "1247530"
  },
  {
    "text": "will tell me all the places I assume",
    "start": "1247530",
    "end": "1249600"
  },
  {
    "text": "that I have an age and it says actually",
    "start": "1249600",
    "end": "1252240"
  },
  {
    "text": "well you have to now account for the",
    "start": "1252240",
    "end": "1254610"
  },
  {
    "text": "possibility that the age is not there",
    "start": "1254610",
    "end": "1256650"
  },
  {
    "text": "which is pretty amazing that's it feels",
    "start": "1256650",
    "end": "1259350"
  },
  {
    "text": "really good when you change stuff in the",
    "start": "1259350",
    "end": "1261300"
  },
  {
    "text": "backend and the front-end will just tell",
    "start": "1261300",
    "end": "1262830"
  },
  {
    "text": "you all the places you need to update so",
    "start": "1262830",
    "end": "1265530"
  },
  {
    "text": "that really really convinced me and",
    "start": "1265530",
    "end": "1270320"
  },
  {
    "text": "there's actually a lot more there is a",
    "start": "1270350",
    "end": "1274280"
  },
  {
    "text": "well you can generate HTML of course if",
    "start": "1274280",
    "end": "1276930"
  },
  {
    "text": "you just want to serve a web page there",
    "start": "1276930",
    "end": "1279210"
  },
  {
    "text": "is a quick check library which is a",
    "start": "1279210",
    "end": "1281130"
  },
  {
    "text": "property especially a property taste",
    "start": "1281130",
    "end": "1283670"
  },
  {
    "text": "property based testing library because",
    "start": "1283670",
    "end": "1286560"
  },
  {
    "text": "of course if you can expect the type you",
    "start": "1286560",
    "end": "1288060"
  },
  {
    "text": "can generate random valid requests which",
    "start": "1288060",
    "end": "1291390"
  },
  {
    "text": "is pretty cool",
    "start": "1291390",
    "end": "1293990"
  },
  {
    "text": "there is client generation for well",
    "start": "1294080",
    "end": "1296790"
  },
  {
    "text": "c-sharp Ruby Python probably tons of",
    "start": "1296790",
    "end": "1299670"
  },
  {
    "text": "other languages I just had a really",
    "start": "1299670",
    "end": "1301410"
  },
  {
    "text": "really quick look at the Haskell package",
    "start": "1301410",
    "end": "1304320"
  },
  {
    "text": "database and you can also do other cool",
    "start": "1304320",
    "end": "1309390"
  },
  {
    "text": "stuff like checking that internal URLs",
    "start": "1309390",
    "end": "1311160"
  },
  {
    "text": "are correct if you're actually serving",
    "start": "1311160",
    "end": "1312450"
  },
  {
    "text": "some sort of web app I haven't done that",
    "start": "1312450",
    "end": "1315720"
  },
  {
    "text": "but that's cool",
    "start": "1315720",
    "end": "1316940"
  },
  {
    "text": "there is a servant graphical project I",
    "start": "1316940",
    "end": "1319040"
  },
  {
    "text": "don't know how mature it is I haven't",
    "start": "1319040",
    "end": "1320660"
  },
  {
    "text": "really looked at it and as I kind of",
    "start": "1320660",
    "end": "1325460"
  },
  {
    "text": "alluded to I mean you don't really have",
    "start": "1325460",
    "end": "1327920"
  },
  {
    "text": "to implement the server for this to get",
    "start": "1327920",
    "end": "1330620"
  },
  {
    "text": "some benefits I mean you don't have to",
    "start": "1330620",
    "end": "1332270"
  },
  {
    "text": "convert your back into a Haskell I I've",
    "start": "1332270",
    "end": "1335930"
  },
  {
    "text": "used servants several times without",
    "start": "1335930",
    "end": "1338030"
  },
  {
    "text": "actually implementing a server because I",
    "start": "1338030",
    "end": "1339620"
  },
  {
    "text": "just want let's say client functions for",
    "start": "1339620",
    "end": "1341980"
  },
  {
    "text": "JavaScript I don't I don't want to write",
    "start": "1341980",
    "end": "1344780"
  },
  {
    "text": "them myself all the time with change",
    "start": "1344780",
    "end": "1347090"
  },
  {
    "text": "system zone and for Elm I would probably",
    "start": "1347090",
    "end": "1350960"
  },
  {
    "text": "just like specify my API with servant",
    "start": "1350960",
    "end": "1354200"
  },
  {
    "text": "just to get like the generated decoders",
    "start": "1354200",
    "end": "1357290"
  },
  {
    "text": "and client functions because it's really",
    "start": "1357290",
    "end": "1359930"
  },
  {
    "text": "nice to do not having to do that kind of",
    "start": "1359930",
    "end": "1364210"
  },
  {
    "text": "boring work so to sum up my quick",
    "start": "1364210",
    "end": "1373100"
  },
  {
    "text": "version of this so specifying an API in",
    "start": "1373100",
    "end": "1379850"
  },
  {
    "text": "the type system I'm using that's",
    "start": "1379850",
    "end": "1381290"
  },
  {
    "text": "specification specification it's",
    "start": "1381290",
    "end": "1383750"
  },
  {
    "text": "actually really nice it sounds super",
    "start": "1383750",
    "end": "1385610"
  },
  {
    "text": "strange fancy wizardry but it's a cool",
    "start": "1385610",
    "end": "1389960"
  },
  {
    "text": "stuff and it's real benefits and",
    "start": "1389960",
    "end": "1393640"
  },
  {
    "text": "advanced features can actually make your",
    "start": "1393640",
    "end": "1396380"
  },
  {
    "text": "our job easier and if you want the gory",
    "start": "1396380",
    "end": "1403340"
  },
  {
    "text": "details I gave a technical version of",
    "start": "1403340",
    "end": "1406790"
  },
  {
    "text": "this talk at flatmap oslo in May and yes",
    "start": "1406790",
    "end": "1412430"
  },
  {
    "text": "I'll go I go into the the type level",
    "start": "1412430",
    "end": "1415640"
  },
  {
    "text": "function details behind all this and",
    "start": "1415640",
    "end": "1419800"
  },
  {
    "text": "yeah it really depends on what you want",
    "start": "1419800",
    "end": "1422870"
  },
  {
    "text": "to know but I really want to stress the",
    "start": "1422870",
    "end": "1424940"
  },
  {
    "text": "fact you can use this without",
    "start": "1424940",
    "end": "1426200"
  },
  {
    "text": "implementing your server in Haskell and",
    "start": "1426200",
    "end": "1428090"
  },
  {
    "text": "it's pretty cool stuff thank you",
    "start": "1428090",
    "end": "1432940"
  }
]