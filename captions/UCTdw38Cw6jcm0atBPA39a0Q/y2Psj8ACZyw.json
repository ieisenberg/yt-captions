[
  {
    "text": "my name is dominic and i spent the last 20 years of my life",
    "start": "0",
    "end": "6080"
  },
  {
    "text": "basically helping software companies build authentication and authorization into their applications",
    "start": "6080",
    "end": "13360"
  },
  {
    "text": "and you know we went through several technology iterations right i started",
    "start": "13360",
    "end": "18640"
  },
  {
    "text": "with kerberos and then there was this ws federation and saml and uh",
    "start": "18640",
    "end": "24080"
  },
  {
    "text": "uh uh soap era right ws security",
    "start": "24080",
    "end": "30560"
  },
  {
    "text": "and then i guess after that came a new era where newer protocols",
    "start": "30560",
    "end": "36239"
  },
  {
    "text": "took over simpler protocols i would also say and basically it's all around today around oauth",
    "start": "36239",
    "end": "42640"
  },
  {
    "text": "and open id connect and that already is uh ten years ago i think yeah off was i think uh uh released in 2011 or 2010 or",
    "start": "42640",
    "end": "50559"
  },
  {
    "text": "something like this um and it pretty much became the de facto standard for",
    "start": "50559",
    "end": "56800"
  },
  {
    "text": "anything we do when it comes to you know securing apis for example",
    "start": "56800",
    "end": "62320"
  },
  {
    "text": "so uh i built a couple of token services along the way um",
    "start": "62320",
    "end": "67600"
  },
  {
    "text": "so i read these specs more than once which is you know",
    "start": "67600",
    "end": "74000"
  },
  {
    "text": "very exciting [Laughter] um and you know for the last 10 years um",
    "start": "74000",
    "end": "81920"
  },
  {
    "text": "oauth was you know the base specification of oauth you know remains unchanged because that's how rfcs work",
    "start": "81920",
    "end": "89040"
  },
  {
    "text": "you cannot change an rsc anymore but there were things added on top of it to cater for",
    "start": "89040",
    "end": "94159"
  },
  {
    "text": "all kinds of um scenarios that no one thought about right uh when they started with oauth in",
    "start": "94159",
    "end": "100880"
  },
  {
    "text": "the first place i mean over to be honest was built to solve a very simple scenario right like uh um how can you",
    "start": "100880",
    "end": "108720"
  },
  {
    "text": "give a third party access to your gmail inbox without having to expose the password to the third party right that",
    "start": "108720",
    "end": "114880"
  },
  {
    "text": "was the whole problem statement by the time and they um came up with this thing called over to solve exactly that",
    "start": "114880",
    "end": "121520"
  },
  {
    "text": "problem and if you look today oaf is used everywhere it's you it's you know if it's",
    "start": "121520",
    "end": "126840"
  },
  {
    "text": "uh like just normal business stuff up to banking and",
    "start": "126840",
    "end": "132560"
  },
  {
    "text": "healthcare and you know very sensitive systems so people's you know",
    "start": "132560",
    "end": "138160"
  },
  {
    "text": "the itf started adding more and more and more and more and more specs on top of that for higher security scenarios yeah",
    "start": "138160",
    "end": "144720"
  },
  {
    "text": "and and to enable things that you know were not easily possible in the first place so um",
    "start": "144720",
    "end": "151200"
  },
  {
    "text": "someone counted all of the pages of all of the specs uh from the oauth working",
    "start": "151200",
    "end": "156400"
  },
  {
    "text": "group and it's double the size of war and peace right and now you can decide what's more",
    "start": "156400",
    "end": "162640"
  },
  {
    "text": "exciting to read so and you know if you've been to my",
    "start": "162640",
    "end": "168400"
  },
  {
    "text": "talks in the past i probably did drilled into specific uh features or advanced stuff or",
    "start": "168400",
    "end": "175760"
  },
  {
    "text": "whatever right um but 2022 i think will be a turning point",
    "start": "175760",
    "end": "181040"
  },
  {
    "text": "because for the very first time uh the o of people so to speak look back",
    "start": "181040",
    "end": "186480"
  },
  {
    "text": "and and and think about removing stuff from the specification because 10 years",
    "start": "186480",
    "end": "191680"
  },
  {
    "text": "later it proved not to be the best idea it looked good by the time but didn't",
    "start": "191680",
    "end": "196800"
  },
  {
    "text": "stand the test of time okay and um so i thought why not um you know",
    "start": "196800",
    "end": "205040"
  },
  {
    "text": "revisit oh of the basics yeah and tell you in 60 minutes what i think if you",
    "start": "205040",
    "end": "210239"
  },
  {
    "text": "are working with oauth these are the things you should know about okay and",
    "start": "210239",
    "end": "216400"
  },
  {
    "text": "it actually fits in 60 minutes yeah i mean i'm not saying you will be an oauth expert after that",
    "start": "216400",
    "end": "221760"
  },
  {
    "text": "but definitely these are the things that you wanna know about or even learn about",
    "start": "221760",
    "end": "227440"
  },
  {
    "text": "and the other things are not relevant anymore and are pretty much a distraction today if you're",
    "start": "227440",
    "end": "232560"
  },
  {
    "text": "reading the original oauths back because these things are not used anymore okay um",
    "start": "232560",
    "end": "238080"
  },
  {
    "text": "right so that's kind of the idea of this talk it's a completely introduction talk right so if you know oauth already",
    "start": "238080",
    "end": "244879"
  },
  {
    "text": "you'll be disappointed yeah because i you will not learn anything new but if you want to relearn o because you",
    "start": "244879",
    "end": "251200"
  },
  {
    "text": "thought that was too complicated though i i didn't care then you're in the right place if you have never used oauth",
    "start": "251200",
    "end": "258079"
  },
  {
    "text": "before you are in the right place um so this is a big enough talk okay i i don't want to hear any comments after that",
    "start": "258079",
    "end": "264000"
  },
  {
    "text": "saying like that was too basic yeah it's that is the idea behind it okay",
    "start": "264000",
    "end": "269759"
  },
  {
    "text": "cool so um if you want to contact me here on my contact details also there's a",
    "start": "269759",
    "end": "275960"
  },
  {
    "text": "speakerdeck.com um [Music] account where i uploaded the slides",
    "start": "275960",
    "end": "282720"
  },
  {
    "text": "already yeah so if you want to have those slides you can just get them from there i put all my conference talks",
    "start": "282720",
    "end": "288240"
  },
  {
    "text": "lives there so you know if you want to go back in time that's also possible cool so to give you some history yeah um",
    "start": "288240",
    "end": "296720"
  },
  {
    "text": "this is kind of the the short history of web-based authentication yeah it all",
    "start": "296720",
    "end": "302080"
  },
  {
    "text": "started in 2005 with a protocol called saml 2p which was the very first",
    "start": "302080",
    "end": "307600"
  },
  {
    "text": "attempt to do based single sign-on it was uh you know like",
    "start": "307600",
    "end": "312639"
  },
  {
    "text": "and again and that's coming up a lot here in this talk always think of back in the time what was the prevalent technology and",
    "start": "312639",
    "end": "319440"
  },
  {
    "text": "they invented something to solve the problems of the existing stuff and the existing stuff in 2005 was active",
    "start": "319440",
    "end": "324720"
  },
  {
    "text": "directory right in kerberos and these kind of things which only worked on the internet so people wanted to have",
    "start": "324720",
    "end": "330160"
  },
  {
    "text": "something which works on the internet yeah and saml was the first you know",
    "start": "330160",
    "end": "336000"
  },
  {
    "text": "protocol that was created xml based of course because that was the thing to do by the time um and then ws",
    "start": "336000",
    "end": "342880"
  },
  {
    "text": "federation ws trust uh you know like derived specs from that for",
    "start": "342880",
    "end": "348320"
  },
  {
    "text": "you know for a web what do they call them xml web services by the time right and things like that",
    "start": "348320",
    "end": "354800"
  },
  {
    "text": "um of 1.0 came out in 2007 and that was exactly",
    "start": "354800",
    "end": "360479"
  },
  {
    "text": "what i just said to solve this very specific problem how to grant a third-party access to your data without",
    "start": "360479",
    "end": "366479"
  },
  {
    "text": "having to expose your password um and then over of 1.0 became very very popular that",
    "start": "366479",
    "end": "372639"
  },
  {
    "text": "uh five years later they created a new oauth which enabled even more scenarios",
    "start": "372639",
    "end": "378160"
  },
  {
    "text": "yeah like they thought about mobile apps and javascript based applications and",
    "start": "378160",
    "end": "383919"
  },
  {
    "text": "and you know and other things and also more and more companies got involved in that and they wanted to simplify the",
    "start": "383919",
    "end": "390080"
  },
  {
    "text": "whole thing so that's what oauth 2.0 is yeah and from that point on as you can see a whole bunch of specifications have",
    "start": "390080",
    "end": "397759"
  },
  {
    "text": "been added and this is not even a complete list yeah so um if you want to have the more you know friendly version",
    "start": "397759",
    "end": "403520"
  },
  {
    "text": "of that slide that's how the ietf website looks like so you can read through all of them yeah",
    "start": "403520",
    "end": "408560"
  },
  {
    "text": "um but my main point is that you see here um on the soon uh maybe here or here i don't know uh",
    "start": "408560",
    "end": "415039"
  },
  {
    "text": "there's this thing called over 2.1 okay and that is basically uh the next iteration of oauth which uh think of it",
    "start": "415039",
    "end": "421919"
  },
  {
    "text": "as a a reverse semantic versioning you know like in semantic versioning",
    "start": "421919",
    "end": "427120"
  },
  {
    "text": "you're only allowed to add stuff to it and don't break existing stuff they do exactly the opposite yeah they remove",
    "start": "427120",
    "end": "432400"
  },
  {
    "text": "stuff from it and you know break existing scenarios is the wrong word they also don't use the word we remove",
    "start": "432400",
    "end": "438639"
  },
  {
    "text": "it they only omit it man which is a very important distinction",
    "start": "438639",
    "end": "444080"
  },
  {
    "text": "um so yeah so that that's where we are so and you know it kind of feels like",
    "start": "444080",
    "end": "450000"
  },
  {
    "text": "yeah um it's time you know if you would learn over today from scratch you probably wouldn't want",
    "start": "450000",
    "end": "456880"
  },
  {
    "text": "to go back to the original specification you would want to read the new one 2.1 which is not not done yet but i have",
    "start": "456880",
    "end": "463360"
  },
  {
    "text": "high hopes it will be done next year and while this new spec is not",
    "start": "463360",
    "end": "470400"
  },
  {
    "text": "not thinner than the old one it omits the things that you probably don't care about anymore yeah but you know and once",
    "start": "470400",
    "end": "477039"
  },
  {
    "text": "you once you know the good parts maybe you want to learn the bad parts as well just to understand why they are bad but that's not our topic for today",
    "start": "477039",
    "end": "483840"
  },
  {
    "text": "cool so my agenda is first of all tell you why does overwatch exist yeah um",
    "start": "483840",
    "end": "489759"
  },
  {
    "text": "then we're going to talk about this thing called protocol flows and there were there were a couple of those in the past we have um slimmed it down to only",
    "start": "489759",
    "end": "496319"
  },
  {
    "text": "two that you really care about these days and then we're going to look at typical application architectures",
    "start": "496319",
    "end": "502319"
  },
  {
    "text": "and that's again a very very short brief intro to that and then we're gonna have a look at um open id connect yeah and",
    "start": "502319",
    "end": "510080"
  },
  {
    "text": "why does it exist and why is it often you know uh why why people use oauth and openly connect in the same sentence",
    "start": "510080",
    "end": "516159"
  },
  {
    "text": "again don't expect too much details here it's one slide okay and then i'm going to point you to some further reading um",
    "start": "516159",
    "end": "522640"
  },
  {
    "text": "resources cool so why does owf exist yeah again think of um",
    "start": "522640",
    "end": "528240"
  },
  {
    "text": "think of the times right 2007 2000 whatever you know like that these were the heydays of xml",
    "start": "528240",
    "end": "534880"
  },
  {
    "text": "right uh xml web services you know wcf and whatever it was called in java",
    "start": "534880",
    "end": "542320"
  },
  {
    "text": "no one really loved that technology right i mean did anyone laugh really like deep in your heart i love xml web",
    "start": "542320",
    "end": "550240"
  },
  {
    "text": "services not really right they were heavy-handed they were complicated it was really",
    "start": "550240",
    "end": "556320"
  },
  {
    "text": "really hard yeah um [Music] and all we want to do is invoke some apis on the internet right why do i have",
    "start": "556320",
    "end": "562800"
  },
  {
    "text": "to become like a have a phd in angle brackets for that um so but one interesting technology fell",
    "start": "562800",
    "end": "570000"
  },
  {
    "text": "out of the whole xml era which was token based authentication okay so instead of",
    "start": "570000",
    "end": "575600"
  },
  {
    "text": "sending around names and passwords all the time they created these things called uh",
    "start": "575600",
    "end": "581040"
  },
  {
    "text": "tokens yeah which represent access to a resource without having to",
    "start": "581040",
    "end": "586800"
  },
  {
    "text": "the credential inside of this data structure so to speak right and that token by the time was of course xml",
    "start": "586800",
    "end": "594560"
  },
  {
    "text": "based yeah it was called the saml assertion yeah or several tokens in the microsoft space as they call it um and",
    "start": "594560",
    "end": "600720"
  },
  {
    "text": "you can see there's a there's pretty much there is a lot of information in there right",
    "start": "600720",
    "end": "606800"
  },
  {
    "text": "and the the majority of the information you see on that slide is to make xml happy right",
    "start": "607360",
    "end": "612880"
  },
  {
    "text": "it's not actually data that we are transporting we're transporting metadata of the data yeah something like that",
    "start": "612880",
    "end": "619519"
  },
  {
    "text": "but there were some interesting concepts here right for example the content of an issuer who has issued the token do you",
    "start": "619519",
    "end": "625920"
  },
  {
    "text": "trust that issue and if you trust the issuer then you by transitively allow access to a resource to enforce that",
    "start": "625920",
    "end": "632880"
  },
  {
    "text": "trust there are signatures involved right so i can validate the signature i can make sure it's coming from the",
    "start": "632880",
    "end": "638399"
  },
  {
    "text": "trusted issuer there were things like time windows right this token was not valid forever or as long as your",
    "start": "638399",
    "end": "644640"
  },
  {
    "text": "password it was maybe just for one hour or one day or whatever right um there",
    "start": "644640",
    "end": "650160"
  },
  {
    "text": "was the idea of uh scoping that this token is not it's not um useful at all",
    "start": "650160",
    "end": "655680"
  },
  {
    "text": "of the apis you can only use it with specific apis right so you can scope down the access of that token",
    "start": "655680",
    "end": "662000"
  },
  {
    "text": "um there were information about authentication maybe your api did care how the user did authenticate yeah like",
    "start": "662000",
    "end": "668399"
  },
  {
    "text": "with a password in this um example and of course they had claims meaning you were able to transport additional",
    "start": "668399",
    "end": "675920"
  },
  {
    "text": "information about the caller and about the user in that data structure so these",
    "start": "675920",
    "end": "681519"
  },
  {
    "text": "were all good concepts but no one liked it yeah it was too much ceremony so to speak yeah and the real problem was that",
    "start": "681519",
    "end": "687920"
  },
  {
    "text": "oauth was all about interoperability right xml you you kind of made xml work",
    "start": "687920",
    "end": "695200"
  },
  {
    "text": "inside your own company right but try to find two xml parsers from two different companies that actually like each other",
    "start": "695200",
    "end": "702240"
  },
  {
    "text": "right that produce the same result and then you throw signatures on top of it and all the other stuff it it was not",
    "start": "702240",
    "end": "710160"
  },
  {
    "text": "really easy to do you know like um interrupt with other companies other",
    "start": "710160",
    "end": "716480"
  },
  {
    "text": "technology stacks and so on and so forth right so the whole thing did not really take off in the age of you know the",
    "start": "716480",
    "end": "722480"
  },
  {
    "text": "internet and consumer services um and so on right so people thought like okay let's have something something simpler",
    "start": "722480",
    "end": "728480"
  },
  {
    "text": "yeah something that is not xml yeah which doesn't make it simpler",
    "start": "728480",
    "end": "733519"
  },
  {
    "text": "necessarily but still it's not xml we are done with xml kind of yeah so they you know introduced this thing called",
    "start": "733519",
    "end": "739519"
  },
  {
    "text": "oauth um so let me walk you through the bits and pieces that make up an",
    "start": "739519",
    "end": "744959"
  },
  {
    "text": "oauth based architecture so the idea is pretty simple you have an an api right and they call it the resource in oauth",
    "start": "744959",
    "end": "752160"
  },
  {
    "text": "yeah um and this api you want to get you want to allow access to this api to some callers",
    "start": "752160",
    "end": "759519"
  },
  {
    "text": "right now using reusing the concept of tokens they",
    "start": "759519",
    "end": "766639"
  },
  {
    "text": "basically introduce something called the authorization server and that is a piece of software that can produce tokens that",
    "start": "766639",
    "end": "773279"
  },
  {
    "text": "allow you to call the api okay the authorization server by definition always belongs to the same",
    "start": "773279",
    "end": "780320"
  },
  {
    "text": "entity where the apis belong to right because the the format of the token was unspecified",
    "start": "780320",
    "end": "787519"
  },
  {
    "text": "by the time the contents of the token was unspecified by the time uh so it was really always the token is an",
    "start": "787519",
    "end": "793120"
  },
  {
    "text": "implementation detail between the issuer of the token and the consumer of the token which is the api that's why you",
    "start": "793120",
    "end": "799760"
  },
  {
    "text": "know even today you know authorization servers belong to a certain entity you",
    "start": "799760",
    "end": "805519"
  },
  {
    "text": "you uh bring them up to secure access to your resources okay or apis whatever you",
    "start": "805519",
    "end": "812399"
  },
  {
    "text": "want to call them and then on the caller side we have what they call clients so client is a piece of software",
    "start": "812399",
    "end": "819519"
  },
  {
    "text": "that wants to call your api right and there are two fundamental types of clients we call them public and",
    "start": "819519",
    "end": "826560"
  },
  {
    "text": "confidential clients so public lines are easy right they are things like running on in a browser or on a phone whatever",
    "start": "826560",
    "end": "833360"
  },
  {
    "text": "right they are basically clients that you would never ever base a security decision on because",
    "start": "833360",
    "end": "839120"
  },
  {
    "text": "they are not in your control okay um but still these use cases exist of",
    "start": "839120",
    "end": "844320"
  },
  {
    "text": "course and we need to enable them and confidential clients are basically typically things running on a server",
    "start": "844320",
    "end": "850480"
  },
  {
    "text": "yeah to put it to put it in uh in easy words just the o of spec says a confidential client is a client that can",
    "start": "850480",
    "end": "856560"
  },
  {
    "text": "securely store a secret yeah so that typically means it's some it's some",
    "start": "856560",
    "end": "862240"
  },
  {
    "text": "process running on infrastructure that you control typically on a server and hopefully you are storing that secret",
    "start": "862240",
    "end": "868000"
  },
  {
    "text": "securely okay now",
    "start": "868000",
    "end": "874079"
  },
  {
    "text": "the next thing that the next uh term you need to learn is called resource owner and i really don't like",
    "start": "874079",
    "end": "880639"
  },
  {
    "text": "this term and typically these days people talk more about users yeah",
    "start": "880639",
    "end": "887199"
  },
  {
    "text": "so a user basically is a carbon based life form in your system right that wants to use your services yeah and the",
    "start": "887199",
    "end": "894320"
  },
  {
    "text": "user is using a client which is a piece of software to access your services",
    "start": "894320",
    "end": "900880"
  },
  {
    "text": "no and then what whatever flow you're doing in oauth it will",
    "start": "900880",
    "end": "905920"
  },
  {
    "text": "always boil down to these fundamental steps the client makes a call to the",
    "start": "905920",
    "end": "910959"
  },
  {
    "text": "authorization server to ask for a token yeah if it's a confidential client the client will authenticate to the",
    "start": "910959",
    "end": "917279"
  },
  {
    "text": "authorization server as well and say like hey give me access to the api yeah",
    "start": "917279",
    "end": "922480"
  },
  {
    "text": "and if that is successful the authorization server will return the access token and then the client will use the access token to call the api",
    "start": "922480",
    "end": "930959"
  },
  {
    "text": "okay so it's an abstraction the api doesn't really know anything about the client or the user not necessarily at",
    "start": "930959",
    "end": "937120"
  },
  {
    "text": "least but as long as the token is coming from our trusted authorization server",
    "start": "937120",
    "end": "943600"
  },
  {
    "text": "i'm okay no so that's the whole architecture",
    "start": "943600",
    "end": "949360"
  },
  {
    "text": "now um you might have more than one api right so here they only talk about one single resource server um but in reality",
    "start": "949360",
    "end": "956399"
  },
  {
    "text": "you have many apis yeah and um a very very important concept in oauth is you know you don't wanna grant access",
    "start": "956399",
    "end": "964079"
  },
  {
    "text": "to all apis to all clients yeah you need some some way to uh maybe say like okay",
    "start": "964079",
    "end": "969920"
  },
  {
    "text": "client one can can call api one and client two can call api too and the client needs to express that somehow",
    "start": "969920",
    "end": "976959"
  },
  {
    "text": "right and that is called the scope parameter that's uh um a very very important concept and is",
    "start": "976959",
    "end": "984320"
  },
  {
    "text": "heavily underspecified in the oauth spec yeah so if you look at the",
    "start": "984320",
    "end": "989440"
  },
  {
    "text": "you know like whenever i show you something with a career font you know it's official right",
    "start": "989440",
    "end": "995680"
  },
  {
    "text": "so they basically said something like the scope um specifies the scope of axis uh",
    "start": "995680",
    "end": "1002160"
  },
  {
    "text": "it's a string it's space delimited typically the assumption is the longer the string the more things you want to",
    "start": "1002160",
    "end": "1007759"
  },
  {
    "text": "access um and the order doesn't matter of course um and then in in in the true o",
    "start": "1007759",
    "end": "1014639"
  },
  {
    "text": "of spirit yeah they say like the authorization may fully or partially ignore the parameter",
    "start": "1014639",
    "end": "1020480"
  },
  {
    "text": "no because you know by the time they weren't really sure what the use cases will be but very very typically these",
    "start": "1020480",
    "end": "1026798"
  },
  {
    "text": "days is you have apis you give them names right and then the client will use that name to say like hey give me access",
    "start": "1026799",
    "end": "1033280"
  },
  {
    "text": "to your calendar api or to your invoicing api or whatever right and these names are defined by you uh here's",
    "start": "1033280",
    "end": "1039760"
  },
  {
    "text": "an example if you go to the developer documentation from github",
    "start": "1039760",
    "end": "1046240"
  },
  {
    "text": "that's how they structure their scopes yeah it's a certain philosophy here right",
    "start": "1046240",
    "end": "1051840"
  },
  {
    "text": "they see github as one big api surface and then you have you know if you want to have access to repos you ask for the",
    "start": "1051840",
    "end": "1057039"
  },
  {
    "text": "reposcope if you want to have access to users you ask for the user scope if you want to have access to the packages you",
    "start": "1057039",
    "end": "1062799"
  },
  {
    "text": "ask for the package scope right sometimes you need to be even more specific right you see here they have",
    "start": "1062799",
    "end": "1068320"
  },
  {
    "text": "something like right package read package delete package and so on right because you know maybe it makes sense to",
    "start": "1068320",
    "end": "1074240"
  },
  {
    "text": "say i i have this automated ci process it should be allowed to publish a package to my repo but you should not be",
    "start": "1074240",
    "end": "1080000"
  },
  {
    "text": "able to delete them for example yeah so that's why they introduced this uh more fine-grained um things but the overspec",
    "start": "1080000",
    "end": "1088160"
  },
  {
    "text": "says it's just a string right it's totally up to you how that string looks like",
    "start": "1088160",
    "end": "1093520"
  },
  {
    "text": "and they won't help you with anything of that as a different example that's how google",
    "start": "1093520",
    "end": "1099440"
  },
  {
    "text": "um structures their scope surface right so google is a much much bigger company",
    "start": "1099440",
    "end": "1104799"
  },
  {
    "text": "right you can imagine that maybe at github every github employee meets at the christmas party or",
    "start": "1104799",
    "end": "1110960"
  },
  {
    "text": "something right they know each other so it's a bit more casual environment i guess yeah whereas google is a you know",
    "start": "1110960",
    "end": "1116320"
  },
  {
    "text": "like a really really big company right and probably the the gmail api developer never met the calendar api developer and",
    "start": "1116320",
    "end": "1122160"
  },
  {
    "text": "so on so you can imagine they have something like a registry in google right just one person that is the master",
    "start": "1122160",
    "end": "1127520"
  },
  {
    "text": "of the scope names so to speak and when you want to bring up an api you probably tell them hey there's a new api he",
    "start": "1127520",
    "end": "1133200"
  },
  {
    "text": "probably will assign you basically like um a prefix right they're using urls",
    "start": "1133200",
    "end": "1138400"
  },
  {
    "text": "here so they probably give you a url prefix and then the developers probably can decide okay let's call it a gmail",
    "start": "1138400",
    "end": "1145039"
  },
  {
    "text": "compose and gmail read and and whatever right again it's just a string from an",
    "start": "1145039",
    "end": "1150240"
  },
  {
    "text": "oauth point of view but this this is a different style i guess more an enterprise style i guess yeah",
    "start": "1150240",
    "end": "1157760"
  },
  {
    "text": "okay cool so that's the fundamentals done you already know",
    "start": "1157760",
    "end": "1163200"
  },
  {
    "text": "twenty percent of oauth um now let's let's look at two",
    "start": "1163200",
    "end": "1170160"
  },
  {
    "text": "fundamental ways how you interact with an oauth based system yeah um and that's what i meant earlier there have been",
    "start": "1170160",
    "end": "1176160"
  },
  {
    "text": "more ways in the past but we are basically condensing it to two fundamental ways to interact with the",
    "start": "1176160",
    "end": "1181600"
  },
  {
    "text": "system and that's good because you have less to learn yeah so the first protocol flow we want to",
    "start": "1181600",
    "end": "1188240"
  },
  {
    "text": "look at is called client credentials flow and it's it's it's optimized for",
    "start": "1188240",
    "end": "1193600"
  },
  {
    "text": "classic machine to machine style communication right you have one like a batch process wants to call an api how",
    "start": "1193600",
    "end": "1200240"
  },
  {
    "text": "can it call the api how can it get tokens and so on there are no users involved here only machines okay and",
    "start": "1200240",
    "end": "1206720"
  },
  {
    "text": "that's the simplest floor that's going to start with this and then we make it more complicated so the way this works is pretty simple",
    "start": "1206720",
    "end": "1214799"
  },
  {
    "text": "the client opens the connection to the authorization server and sends an http post to the so-called token endpoint and",
    "start": "1214799",
    "end": "1222000"
  },
  {
    "text": "the spec says the post body must contain a thing called trend type it must be client credentials and then you pass in",
    "start": "1222000",
    "end": "1228559"
  },
  {
    "text": "the scope right the thing that the client wants to access api one in this case yeah the",
    "start": "1228559",
    "end": "1234080"
  },
  {
    "text": "client must authenticate in this case we're using an authorization header for that and then the authorization server",
    "start": "1234080",
    "end": "1240240"
  },
  {
    "text": "and that's where the name comes from actually is now checking is the client authorized to call this api",
    "start": "1240240",
    "end": "1246799"
  },
  {
    "text": "right and if yes it gonna send us back a json document and in this json document we'll have two",
    "start": "1246799",
    "end": "1253600"
  },
  {
    "text": "things um one is the actual access token yeah and",
    "start": "1253600",
    "end": "1258880"
  },
  {
    "text": "the scope that was granted and the expires in means how long will this access token be valid for okay so in",
    "start": "1258880",
    "end": "1266000"
  },
  {
    "text": "this in this example the client is now able to call api one for one hour and then he has to start over and get a new",
    "start": "1266000",
    "end": "1272240"
  },
  {
    "text": "token um how does it access token look like",
    "start": "1272240",
    "end": "1277520"
  },
  {
    "text": "well the oauth spec itself does not say anything about this actually the over spec predates json web tokens by five",
    "start": "1277520",
    "end": "1285200"
  },
  {
    "text": "years or so yeah um so just in the last five years it became very",
    "start": "1285200",
    "end": "1290559"
  },
  {
    "text": "convenient to package up access tokens in a json format because you know json",
    "start": "1290559",
    "end": "1295919"
  },
  {
    "text": "is everywhere um you have libraries for that it's it's not that hard to use and",
    "start": "1295919",
    "end": "1300960"
  },
  {
    "text": "so on and um you can see basically a json web token has two parts a header which has some metadata like the signing",
    "start": "1300960",
    "end": "1307600"
  },
  {
    "text": "algorithm and which key was used to sign it and then the the payload has the actual data like where is the token",
    "start": "1307600",
    "end": "1313440"
  },
  {
    "text": "coming from that's issuer issued at was when was the token issued exploration is how long will the token be valid for",
    "start": "1313440",
    "end": "1320400"
  },
  {
    "text": "scope is the the api that was granted access to so that the receiver can check",
    "start": "1320400",
    "end": "1326640"
  },
  {
    "text": "that and client id is who is the caller right and guess what",
    "start": "1326640",
    "end": "1332400"
  },
  {
    "text": "it's all the same right it's the same concepts but not with angle brackets it's it's chasing now yeah it looks",
    "start": "1332400",
    "end": "1339520"
  },
  {
    "text": "nicer i i agree right um but the ideas are the same there are issuers there are signatures there's a time window there",
    "start": "1339520",
    "end": "1346240"
  },
  {
    "text": "is scoping and there are claims okay cool",
    "start": "1346240",
    "end": "1352320"
  },
  {
    "text": "so how do we use the token now um there is only one legal way um in the",
    "start": "1352320",
    "end": "1360000"
  },
  {
    "text": "future to use an access token and that is well two but yeah um",
    "start": "1360000",
    "end": "1365360"
  },
  {
    "text": "to basically put it on a special header in the hp p call the authorization header that's called the reason why this",
    "start": "1365360",
    "end": "1372240"
  },
  {
    "text": "is special is because it typically is not locked on on web servers right the browsers know that it contains sensitive",
    "start": "1372240",
    "end": "1378480"
  },
  {
    "text": "data so it it has a special treatment so to speak in http um",
    "start": "1378480",
    "end": "1384000"
  },
  {
    "text": "then you put the string bearer right there bearer comes from the off back it must be there to tell the recipient that",
    "start": "1384000",
    "end": "1389280"
  },
  {
    "text": "what they're going to expect here is an o of token okay so if you you know want to see this",
    "start": "1389280",
    "end": "1396320"
  },
  {
    "text": "in code if that's easier you know basically let's imagine that that's my simple client here you see that there's",
    "start": "1396320",
    "end": "1402559"
  },
  {
    "text": "always a two-step process here first i request the token that returns me an access token and then",
    "start": "1402559",
    "end": "1407919"
  },
  {
    "text": "i'm going to call an api right and you know calling a re requesting a token there are client",
    "start": "1407919",
    "end": "1414000"
  },
  {
    "text": "libraries for that and so on but basically here you see i'm i'm requesting a token i pass in the token",
    "start": "1414000",
    "end": "1419520"
  },
  {
    "text": "endpoint address i pass in my client id my client secret and the scope of access right and if that's all",
    "start": "1419520",
    "end": "1427039"
  },
  {
    "text": "successful this returns me a token and then here i'm putting the token that came back on the authorization header",
    "start": "1427039",
    "end": "1434159"
  },
  {
    "text": "and i'm calling the api that's how it works",
    "start": "1434159",
    "end": "1438799"
  },
  {
    "text": "okay good so",
    "start": "1439520",
    "end": "1444720"
  },
  {
    "text": "there are some access token processing rules i i don't want to bore you with all the details but one thing is really",
    "start": "1444720",
    "end": "1449919"
  },
  {
    "text": "really important namely from a client's point of view the token is opaque",
    "start": "1449919",
    "end": "1456320"
  },
  {
    "text": "right um even if the client knows oh it's a json lab token i could read it myself and look what's inside you are",
    "start": "1456320",
    "end": "1462799"
  },
  {
    "text": "not allowed to do that right uh i said earlier the token format and the token",
    "start": "1462799",
    "end": "1468799"
  },
  {
    "text": "contents and the token semantics even um are a private implementation detail between the issuer and the consumer the",
    "start": "1468799",
    "end": "1476240"
  },
  {
    "text": "issuer can at any point in time change the token format as long as the apis",
    "start": "1476240",
    "end": "1481279"
  },
  {
    "text": "know how to pass it right but if the clients take a dependency on token structure you're going to break all your",
    "start": "1481279",
    "end": "1486640"
  },
  {
    "text": "clients well it's the client's fault in this case to be honest because they were not allowed to to peek into it but i'm",
    "start": "1486640",
    "end": "1493120"
  },
  {
    "text": "just saying that because i've seen so many implementations in my life where people are actually doing that because",
    "start": "1493120",
    "end": "1498240"
  },
  {
    "text": "it was the pragmatic thing to do yeah yeah so from from a client's point of view it",
    "start": "1498240",
    "end": "1505840"
  },
  {
    "text": "receives an opaque blob of data from the token server and forwards that blob of",
    "start": "1505840",
    "end": "1511200"
  },
  {
    "text": "data to the api and that's all they are doing okay",
    "start": "1511200",
    "end": "1516640"
  },
  {
    "text": "cool um and then there are some other things that you know don't don't care too much right now",
    "start": "1516640",
    "end": "1522880"
  },
  {
    "text": "i mean we could but you know it's about signature validation and blah blah blah it's not really that important",
    "start": "1522880",
    "end": "1528400"
  },
  {
    "text": "you typically have uh libraries like in ace peanut core that they have the chord bearer authentication handler which does",
    "start": "1528400",
    "end": "1533840"
  },
  {
    "text": "all of the heavy lifting for you so one other thing to understand is that",
    "start": "1533840",
    "end": "1539279"
  },
  {
    "text": "from an overhaul point of view there are two very important status codes in http one is 401 and one is 403 and they have",
    "start": "1539279",
    "end": "1547360"
  },
  {
    "text": "very different meanings so the 401 status code means you are trying to access a resource this",
    "start": "1547360",
    "end": "1553919"
  },
  {
    "text": "resource requires authentication but you are failing to show the right credential right the token is",
    "start": "1553919",
    "end": "1560799"
  },
  {
    "text": "missing the token is invalid and for most of the times what that",
    "start": "1560799",
    "end": "1566000"
  },
  {
    "text": "means is your token has expired right so you have a token 60 minutes are over you send it the seller will say no that's",
    "start": "1566000",
    "end": "1573200"
  },
  {
    "text": "that's not good for one which probably means oh well the the the recommendation here is if you get a",
    "start": "1573200",
    "end": "1579760"
  },
  {
    "text": "401 from an api call it is very useful to get a new token and resend the api call",
    "start": "1579760",
    "end": "1586480"
  },
  {
    "text": "because it might work yeah the other status code is called 403 and",
    "start": "1586480",
    "end": "1593039"
  },
  {
    "text": "that is forbidden and what that means is that you have a perfectly valid token but what you are trying to do is not allowed",
    "start": "1593039",
    "end": "1598880"
  },
  {
    "text": "yeah so basically some authorization rule that you are not fulfilling which means at this point getting a new token",
    "start": "1598880",
    "end": "1606799"
  },
  {
    "text": "and resending it will not solve the problem right i mean when you are unauthorized logging in again to the same website won't make you",
    "start": "1606799",
    "end": "1613840"
  },
  {
    "text": "authorized yeah it's the same idea so distinguish between the two especially",
    "start": "1613840",
    "end": "1619120"
  },
  {
    "text": "when you're writing a client right because uh 401 means i can do something about it for free means well you",
    "start": "1619120",
    "end": "1625520"
  },
  {
    "text": "ultimately have to show the user something like and i don't know access denied i don't know yeah something like this contact the administrator",
    "start": "1625520",
    "end": "1633120"
  },
  {
    "text": "um right and then the last step once you have the token is token management right",
    "start": "1633120",
    "end": "1638480"
  },
  {
    "text": "so you don't want to request a token for every api call they",
    "start": "1638480",
    "end": "1643679"
  },
  {
    "text": "are valid for a certain time windows or cache the token you know um keep it around use it and only when you have to",
    "start": "1643679",
    "end": "1650960"
  },
  {
    "text": "get a new token that can be done proactively by you know using a cache lifetime that is shorter than the token",
    "start": "1650960",
    "end": "1657440"
  },
  {
    "text": "lifetime or what you're ultimately going to end up with is do it lazily right like just use the",
    "start": "1657440",
    "end": "1663520"
  },
  {
    "text": "token until you get a 401 and then renew it and resend the call yeah that is in",
    "start": "1663520",
    "end": "1669120"
  },
  {
    "text": "my mind the best um you know resilient implementation",
    "start": "1669120",
    "end": "1674639"
  },
  {
    "text": "okay cool so that's easy i mean it's not hard so let's move on to interactive",
    "start": "1675679",
    "end": "1681679"
  },
  {
    "text": "applications where it gets a bit a little bit more complicated because now you you're not having to",
    "start": "1681679",
    "end": "1686720"
  },
  {
    "text": "only coordinate machines you also have to coordinate humans yeah which is harder",
    "start": "1686720",
    "end": "1692080"
  },
  {
    "text": "always so um there is the the mother of all flows",
    "start": "1692080",
    "end": "1698720"
  },
  {
    "text": "if you like in oauth is called the authorization code flow and that is exactly designed for situations where",
    "start": "1698720",
    "end": "1704640"
  },
  {
    "text": "you have a human being a user using some indirect application like a web application and this application wants",
    "start": "1704640",
    "end": "1710960"
  },
  {
    "text": "to call apis on behalf of that user sitting in front of the computer right",
    "start": "1710960",
    "end": "1716799"
  },
  {
    "text": "it is designed for allowing ui workflows right so login pages and maybe other things that you need to do",
    "start": "1716799",
    "end": "1724480"
  },
  {
    "text": "and it also um gives you a way to manage the token lifetime",
    "start": "1724480",
    "end": "1730320"
  },
  {
    "text": "without indirect without having to involve the user you think of you know like after 60 minutes you don't want to",
    "start": "1730320",
    "end": "1736480"
  },
  {
    "text": "log in the user again and again and again there must be some way to make this better from a ux point of view and",
    "start": "1736480",
    "end": "1741600"
  },
  {
    "text": "that's called refresh tokens everybody heard of that i'm sure before",
    "start": "1741600",
    "end": "1746799"
  },
  {
    "text": "good um how does the authorization code workflow",
    "start": "1746799",
    "end": "1751840"
  },
  {
    "text": "work and that is uh often where where people are confused because it's a little bit more involved but ultimately",
    "start": "1751840",
    "end": "1760240"
  },
  {
    "text": "to be able to both cater for the human being in front of the machine and the machine itself that needs the token we",
    "start": "1760240",
    "end": "1767840"
  },
  {
    "text": "need to break up the flow into two steps and one is called the front channel step",
    "start": "1767840",
    "end": "1773840"
  },
  {
    "text": "and that's always a browser being involved here right browsers are great you know you just give them some url",
    "start": "1773840",
    "end": "1779840"
  },
  {
    "text": "they show some ui perfect yeah that's also their biggest vulnerability by the by the way but you know um",
    "start": "1779840",
    "end": "1786960"
  },
  {
    "text": "but it allows us to show a a ui workflow right like a login page as i said or um other things",
    "start": "1786960",
    "end": "1795679"
  },
  {
    "text": "and then once that ui workflow is done then the the client application opens a second channel which we call the back",
    "start": "1795679",
    "end": "1802240"
  },
  {
    "text": "channel to actually harvest the results of that ui workflow so you might now question why don't we do that in one",
    "start": "1802240",
    "end": "1809279"
  },
  {
    "text": "single round trip well because you know access tokens are actually sensitive data and we don't want to transmit them",
    "start": "1809279",
    "end": "1815440"
  },
  {
    "text": "via the browser right while the the user's computer which we don't trust right we don't trust the",
    "start": "1815440",
    "end": "1821600"
  },
  {
    "text": "browser um but basically what you want to do is you want to only transmit the sensitive data",
    "start": "1821600",
    "end": "1827679"
  },
  {
    "text": "on the back channel right server to server basically cool so let's have a more detailed look",
    "start": "1827679",
    "end": "1834240"
  },
  {
    "text": "at that so how does the front channel request look like well it's basically a redirect to the so-called authorized",
    "start": "1834240",
    "end": "1840399"
  },
  {
    "text": "endpoint you pass in your client id right so you are registered with the token system you pass in a redirect uri",
    "start": "1840399",
    "end": "1847840"
  },
  {
    "text": "and that tells the server where to go back to once the front channel is done yeah",
    "start": "1847840",
    "end": "1854159"
  },
  {
    "text": "um you pass in the response type code that's just what overwhelm says you have to do and you pass in the scope of",
    "start": "1854159",
    "end": "1859919"
  },
  {
    "text": "access right again this application wants to call api one now there are more",
    "start": "1859919",
    "end": "1865679"
  },
  {
    "text": "parameters here which are not really important for our discussion but there's an extra spec",
    "start": "1865679",
    "end": "1871679"
  },
  {
    "text": "called proof key for code exchange or pxe that you have to use today this did not exist when o of 2.0",
    "start": "1871679",
    "end": "1879279"
  },
  {
    "text": "was created but in o of 2.1 it's mandatory and it means you have to add",
    "start": "1879279",
    "end": "1884320"
  },
  {
    "text": "this exis additional parameter here called code challenge which is basically just a hash of a of a random number which is a",
    "start": "1884320",
    "end": "1891519"
  },
  {
    "text": "secret for you for for this one request as i said we don't have to go into details here",
    "start": "1891519",
    "end": "1897440"
  },
  {
    "text": "so that is the front channel request and now basically the authorization server takes over and can show an arbitrary",
    "start": "1897440",
    "end": "1904240"
  },
  {
    "text": "workflow right so it probably will want to authenticate the user if that is required or maybe",
    "start": "1904240",
    "end": "1909600"
  },
  {
    "text": "there is already an existing single sign-on session um and",
    "start": "1909600",
    "end": "1914720"
  },
  {
    "text": "how that works is an implementation detail of the authorization server right they could support names and passwords",
    "start": "1914720",
    "end": "1920240"
  },
  {
    "text": "or whatever other authentication system right google azure id i don't know",
    "start": "1920240",
    "end": "1925600"
  },
  {
    "text": "whatever right and after the authentication is done there's another",
    "start": "1925600",
    "end": "1931360"
  },
  {
    "text": "step which is optional um from a protocol point of view called consent and i'm sure you all",
    "start": "1931360",
    "end": "1937519"
  },
  {
    "text": "seen consent screens before in your life right when you when you connect your",
    "start": "1937519",
    "end": "1942960"
  },
  {
    "text": "mail client to google they ask you like do you want to expose your mails to this mail client or",
    "start": "1942960",
    "end": "1949120"
  },
  {
    "text": "in facebook wherever right so the whole idea of the consent screen is is to involve the human being",
    "start": "1949120",
    "end": "1954960"
  },
  {
    "text": "to make an informed decision right um and that's why they pack typically a lot",
    "start": "1954960",
    "end": "1960559"
  },
  {
    "text": "of information on that consent screen yeah like this is me right i'm the authorization server we think you're bob",
    "start": "1960559",
    "end": "1966880"
  },
  {
    "text": "yeah we think this application is called nvc code flow right um and then what is this application",
    "start": "1966880",
    "end": "1973200"
  },
  {
    "text": "asking for yeah and in our case for api one access and then ultimately the user",
    "start": "1973200",
    "end": "1978399"
  },
  {
    "text": "can click the yes button or the no button i mean has ever anyone ever clicked the no button",
    "start": "1978399",
    "end": "1984680"
  },
  {
    "text": "[Laughter] you sometimes you should yeah um",
    "start": "1984680",
    "end": "1990050"
  },
  {
    "text": "[Music] i recently had a weird one i can't remember where it was basically but they asked for a lot of access to my github",
    "start": "1990050",
    "end": "1996960"
  },
  {
    "text": "repost just for i don't know just for doing a commit",
    "start": "1996960",
    "end": "2002559"
  },
  {
    "text": "this conference screen as i said is optional um many companies have this first party versus third party split",
    "start": "2003279",
    "end": "2010080"
  },
  {
    "text": "where they say like if the client application comes from us we don't we don't have to show the screen we already have your data right what's the point of",
    "start": "2010080",
    "end": "2016960"
  },
  {
    "text": "asking you again but if the application is a third-party application accessing the system you might want to",
    "start": "2016960",
    "end": "2022640"
  },
  {
    "text": "have that also gdpr you know there are some some rules here as well um you know like in",
    "start": "2022640",
    "end": "2029440"
  },
  {
    "text": "if you register your app with google they will always show this screen for the very first time but gmail does not",
    "start": "2029440",
    "end": "2034640"
  },
  {
    "text": "show it for example yeah you know enterprise scenarios typically don't use it either right",
    "start": "2034640",
    "end": "2040399"
  },
  {
    "text": "and so on but it does exist and it is useful for certain flows",
    "start": "2040399",
    "end": "2046480"
  },
  {
    "text": "okay cool so now the the user has clicked yes and now what the authorization tool will",
    "start": "2046480",
    "end": "2051679"
  },
  {
    "text": "do is basically go to the redirect uri that was configured on their site and",
    "start": "2051679",
    "end": "2057040"
  },
  {
    "text": "transmit a so-called code okay that's this parameter here and that's why it's called the authorization code flow that",
    "start": "2057040",
    "end": "2064398"
  },
  {
    "text": "is basically the artifact that gets returned to the client and what that basically is it's a random number right",
    "start": "2064399",
    "end": "2070878"
  },
  {
    "text": "that points to a record in a database at the authorization which has basically all the information that happened during",
    "start": "2070879",
    "end": "2077520"
  },
  {
    "text": "the authentication and authorization process yeah but on its own it's not very useful yeah it's just a random",
    "start": "2077520",
    "end": "2084079"
  },
  {
    "text": "number now what the client must do now is take this random number and open the back channel",
    "start": "2084079",
    "end": "2090800"
  },
  {
    "text": "now okay so we are done with the front channel we're going to do the back channel now and then we're going to send this uh",
    "start": "2090800",
    "end": "2096720"
  },
  {
    "text": "code that we just received on the front channel to the back channel now this call is again",
    "start": "2096720",
    "end": "2103680"
  },
  {
    "text": "authenticated yeah um has some other extra parameters here but",
    "start": "2103680",
    "end": "2108800"
  },
  {
    "text": "basically only if you are the client yeah that did the front channel you will",
    "start": "2108800",
    "end": "2114160"
  },
  {
    "text": "be able to get the data on the back channel as well there are all kinds of checks in there you know client",
    "start": "2114160",
    "end": "2119680"
  },
  {
    "text": "authentication is involved and so on and then ultimately what this",
    "start": "2119680",
    "end": "2124720"
  },
  {
    "text": "code exchange will produce is again our access token response",
    "start": "2124720",
    "end": "2131280"
  },
  {
    "text": "okay so it is pretty you know you're getting the same thing back as with the client credential flow but",
    "start": "2131280",
    "end": "2137599"
  },
  {
    "text": "it's a it's a two-step process again to to protect exactly that data",
    "start": "2137599",
    "end": "2143680"
  },
  {
    "text": "from the browser okay if you are doing access tokens in",
    "start": "2143680",
    "end": "2150160"
  },
  {
    "text": "user-centric scenarios um you will often find additional claims yeah so for",
    "start": "2150160",
    "end": "2155359"
  },
  {
    "text": "example in this scenario here all of the claims are the same as we saw before but now we also have",
    "start": "2155359",
    "end": "2161040"
  },
  {
    "text": "a user id right the sub claim is the subject id so that the api knows oh this",
    "start": "2161040",
    "end": "2166800"
  },
  {
    "text": "is not only a machine there is a user on behalf the client acts on behalf of a certain",
    "start": "2166800",
    "end": "2172400"
  },
  {
    "text": "user to access the api yeah um and that is of course very important",
    "start": "2172400",
    "end": "2177760"
  },
  {
    "text": "for authorization purposes right so imagine a twitter client right you you grant the right to timeline scope to the",
    "start": "2177760",
    "end": "2184960"
  },
  {
    "text": "client but still the client should only be allowed to write to the timeline of the currently",
    "start": "2184960",
    "end": "2190160"
  },
  {
    "text": "logged on user right and that's why the api needs to know who is the user and that is part of this um oauth flow",
    "start": "2190160",
    "end": "2197200"
  },
  {
    "text": "amr is another one that you might see uh stands for authentication method reference and that tells the api how did",
    "start": "2197200",
    "end": "2204160"
  },
  {
    "text": "the user authenticate uh at this at the authorization server so maybe some apis require multi-factor",
    "start": "2204160",
    "end": "2210240"
  },
  {
    "text": "authentication or smart cards or whatever so that's a way that this api um",
    "start": "2210240",
    "end": "2215920"
  },
  {
    "text": "could check this yeah",
    "start": "2215920",
    "end": "2219280"
  },
  {
    "text": "and again if you want to see some code it's not easy to show because this is typically wrapped",
    "start": "2220960",
    "end": "2227200"
  },
  {
    "text": "up in client libraries yeah but if you are using uh for example asp.net core",
    "start": "2227200",
    "end": "2232320"
  },
  {
    "text": "yeah they have this thing called the openly connect authentication handler and you see basically you just configure",
    "start": "2232320",
    "end": "2238640"
  },
  {
    "text": "this you say here's my token server here's my client id here's my client secret",
    "start": "2238640",
    "end": "2243839"
  },
  {
    "text": "uh i i want to use this code response type um and these are the things i want to",
    "start": "2243839",
    "end": "2249119"
  },
  {
    "text": "access here's my api one and so on right and then basically this",
    "start": "2249119",
    "end": "2254240"
  },
  {
    "text": "library from microsoft then takes care of both the front and the back channel",
    "start": "2254240",
    "end": "2259920"
  },
  {
    "text": "which is quite nice yeah um all of these nitty-gritty implementation details don't don't really matter to you",
    "start": "2259920",
    "end": "2266400"
  },
  {
    "text": "yeah okay um",
    "start": "2266400",
    "end": "2271440"
  },
  {
    "text": "now one thing that microsoft unfortunately does not implement and that's something you still have to do or use libraries",
    "start": "2271440",
    "end": "2277040"
  },
  {
    "text": "for that is token management right they only take care of the initial token request once the token is in your",
    "start": "2277040",
    "end": "2283040"
  },
  {
    "text": "application you know you can use it but it will have a finite lifetime yeah again think of it",
    "start": "2283040",
    "end": "2288800"
  },
  {
    "text": "like let's say 60 minutes okay but what if your front-end application um",
    "start": "2288800",
    "end": "2294560"
  },
  {
    "text": "uh allows an eight-hour session for example right or even sliding expiration or something like this",
    "start": "2294560",
    "end": "2299920"
  },
  {
    "text": "um after one hour the token will not be good anymore and you need a new token man and that is absolutely good because",
    "start": "2299920",
    "end": "2307040"
  },
  {
    "text": "you want to keep token lifetimes as short as possible right do you know in and if you are leaking them somehow",
    "start": "2307040",
    "end": "2313760"
  },
  {
    "text": "you will you won't want to give the potential attacker a very small time window to mount the attack so uh you",
    "start": "2313760",
    "end": "2320480"
  },
  {
    "text": "know don't don't make access tokens live for hours or days or weeks or whatever right um i mean",
    "start": "2320480",
    "end": "2329520"
  },
  {
    "text": "i have seen all these things already um so to get a new token right",
    "start": "2329520",
    "end": "2336720"
  },
  {
    "text": "it would be a very bad user experience if we would now send the user back to the authorization server right so",
    "start": "2337040",
    "end": "2342800"
  },
  {
    "text": "imagine you're in the middle of typing something and suddenly the browser makes the redirect and comes back and that would not be really nice yeah",
    "start": "2342800",
    "end": "2349599"
  },
  {
    "text": "so there is a way to do that programmatically you know without having to involve the user which",
    "start": "2349599",
    "end": "2356400"
  },
  {
    "text": "is called um a refresh token which is very similar to a sliding expiration",
    "start": "2356400",
    "end": "2361680"
  },
  {
    "text": "cookie just that you implement the sliding logic yourself because the browser isn't doing it for you so how do",
    "start": "2361680",
    "end": "2368720"
  },
  {
    "text": "we refresh an access token so imagine now our application is running after 60 minutes we see we call the api the api",
    "start": "2368720",
    "end": "2375119"
  },
  {
    "text": "returns a 401 we know okay maybe the token has expired so what you do then is",
    "start": "2375119",
    "end": "2380160"
  },
  {
    "text": "you get this refresh token from wherever you store it yeah in a database or in your session and then send this to the",
    "start": "2380160",
    "end": "2385920"
  },
  {
    "text": "token server programmatically on the back channel right re-authenticate with the token server",
    "start": "2385920",
    "end": "2392079"
  },
  {
    "text": "and then you will get back a new access token",
    "start": "2392079",
    "end": "2397119"
  },
  {
    "text": "okay and this new access token will be valid again in this case for one hour right and then after one hour",
    "start": "2397119",
    "end": "2404000"
  },
  {
    "text": "you repeat that you repeat that you repeat that until the application is done",
    "start": "2404000",
    "end": "2409520"
  },
  {
    "text": "right some applications do background processing so they store the refresh token",
    "start": "2409520",
    "end": "2414640"
  },
  {
    "text": "um in a database for example right to do um whatever they need to do without you",
    "start": "2414640",
    "end": "2420880"
  },
  {
    "text": "even being present right you might be long gone shut down the computer but some server is working for you",
    "start": "2420880",
    "end": "2427520"
  },
  {
    "text": "the nice thing about refresh tokens is that they give us",
    "start": "2429760",
    "end": "2436079"
  },
  {
    "text": "an okay way to get given a client application long-lived access to an api",
    "start": "2436079",
    "end": "2442560"
  },
  {
    "text": "without compromising security too much because the refresh token can be revoked",
    "start": "2442560",
    "end": "2448319"
  },
  {
    "text": "okay um so some companies uh provide you with a self-service style",
    "start": "2448319",
    "end": "2454560"
  },
  {
    "text": "um revocation page right that's um that's uh google in this case",
    "start": "2454560",
    "end": "2460000"
  },
  {
    "text": "they don't use the word refresh token here right these are apps connected to your account right but if i press the",
    "start": "2460000",
    "end": "2466160"
  },
  {
    "text": "remove button here what they will technically do is delete the refresh token from the database and once the",
    "start": "2466160",
    "end": "2472000"
  },
  {
    "text": "access token has expired the next time the client wants and a new access token that will fail and you have to send the",
    "start": "2472000",
    "end": "2478560"
  },
  {
    "text": "user again through this interactive workflow before they can do that right so maybe you gave some",
    "start": "2478560",
    "end": "2485599"
  },
  {
    "text": "application access to your data and after rabiki realized nah i don't want to use this application anymore let's",
    "start": "2485599",
    "end": "2491359"
  },
  {
    "text": "revoke the access to it yeah that's an end user thing for developers i can",
    "start": "2491359",
    "end": "2497520"
  },
  {
    "text": "totally recommend to do revocation whenever you need to there's a revocation endpoint specification rfc",
    "start": "2497520",
    "end": "2503920"
  },
  {
    "text": "709 which specifies um an end point at the authorization server",
    "start": "2503920",
    "end": "2510160"
  },
  {
    "text": "where the client can say okay i have this refresh token here i don't need it anymore please invalidate it for me so",
    "start": "2510160",
    "end": "2517520"
  },
  {
    "text": "it cannot be used anymore right that's a really good idea so if you know you only need a refresh token for the duration of",
    "start": "2517520",
    "end": "2523680"
  },
  {
    "text": "your interactive session when the user signs out from your application just revoke it right um",
    "start": "2523680",
    "end": "2530319"
  },
  {
    "text": "you know these days it's so much harder to delete data than create data but that's your chance",
    "start": "2530319",
    "end": "2536400"
  },
  {
    "text": "to delete some data yeah um and of course right um you can't leak it anymore if someone",
    "start": "2536400",
    "end": "2542640"
  },
  {
    "text": "finds it in old log files or old database whatever they will they will be gone they will not be useful anymore",
    "start": "2542640",
    "end": "2548960"
  },
  {
    "text": "um okay so",
    "start": "2548960",
    "end": "2554000"
  },
  {
    "text": "so that's basically these are the two flows yeah that you need to know for machine to machine client credentials",
    "start": "2554000",
    "end": "2560160"
  },
  {
    "text": "for anything else really it's um authorization code flow and now let's have a brief look at",
    "start": "2560160",
    "end": "2566640"
  },
  {
    "text": "common you know scenarios where you want to apply these flows we don't have to talk about machine to machine anymore i",
    "start": "2566640",
    "end": "2572240"
  },
  {
    "text": "guess that is pretty pretty obvious right how that works but for indirect applications",
    "start": "2572240",
    "end": "2578400"
  },
  {
    "text": "i mean if you really think about it there are only two types of interactive apps right the ones in the browser and",
    "start": "2578400",
    "end": "2584000"
  },
  {
    "text": "the ones outside the browser that's really it these days yeah um so if you're building a browser-based",
    "start": "2584000",
    "end": "2590240"
  },
  {
    "text": "application and that might be you know classic mvc style um you know or or",
    "start": "2590240",
    "end": "2596319"
  },
  {
    "text": "sparse or or you know the the new hotness like web assembly stuff um",
    "start": "2596319",
    "end": "2603200"
  },
  {
    "text": "then you are always going to use this this authorization code flow and a typical uh technology",
    "start": "2603200",
    "end": "2610400"
  },
  {
    "text": "stack looks like this right you have an application server on that application server you have an open connect or o of client library like",
    "start": "2610400",
    "end": "2617599"
  },
  {
    "text": "the one i just showed you from microsoft then you have some session management to deal with the user session",
    "start": "2617599",
    "end": "2623440"
  },
  {
    "text": "um to you know be being able to do the authorization flow start a session afterwards and when",
    "start": "2623440",
    "end": "2630240"
  },
  {
    "text": "you're done stop that session get rid of them the tokens then you typically have a token management library that's the thing that",
    "start": "2630240",
    "end": "2636880"
  },
  {
    "text": "is keeping your tokens fresh right um and then ultimately you have some ui",
    "start": "2636880",
    "end": "2643119"
  },
  {
    "text": "assets right and it really doesn't matter anymore these days if that is javascript or server side whatever",
    "start": "2643119",
    "end": "2648400"
  },
  {
    "text": "that's that's pretty much how it looks like okay if you're not in the browser then you",
    "start": "2648400",
    "end": "2654960"
  },
  {
    "text": "need a browser yeah not for your application but for triggering the authorization workflow",
    "start": "2654960",
    "end": "2661839"
  },
  {
    "text": "right so it's a it is um i'd love to say it's a very common",
    "start": "2661839",
    "end": "2667920"
  },
  {
    "text": "approach for native apps to use the browser to authenticate you but as we all know this is not the case right many",
    "start": "2667920",
    "end": "2674240"
  },
  {
    "text": "native apps still bring up their own native login dialogues and implement it by hand and so on that's not recommended",
    "start": "2674240",
    "end": "2679520"
  },
  {
    "text": "really right the whole idea of oauth is is that the client can never see the credentials of the user",
    "start": "2679520",
    "end": "2685119"
  },
  {
    "text": "right so by putting up your own login pages you are kind of bringing this ad absurdum right",
    "start": "2685119",
    "end": "2691200"
  },
  {
    "text": "um so the recommended way of doing this is that your native app basically opens",
    "start": "2691200",
    "end": "2696319"
  },
  {
    "text": "a browser temporarily yeah um forwards the user to the authorized",
    "start": "2696319",
    "end": "2701839"
  },
  {
    "text": "endpoint the user does his ui workflow um and then the browser comes back",
    "start": "2701839",
    "end": "2707280"
  },
  {
    "text": "transmits the authorization code back to the native app and then the native app turns the code into tokens",
    "start": "2707280",
    "end": "2715359"
  },
  {
    "text": "now this has many many many advantages first of all you know you are leveraging",
    "start": "2715359",
    "end": "2721520"
  },
  {
    "text": "probably what you already have on the browser ui logging auditing workflows federation with other providers all of",
    "start": "2721520",
    "end": "2727760"
  },
  {
    "text": "these things just work right you don't have to re-implement them modern operating systems have",
    "start": "2727760",
    "end": "2735040"
  },
  {
    "text": "specialized browsers for exactly this that are only useful you know that are only used for authentication sessions",
    "start": "2735040",
    "end": "2742319"
  },
  {
    "text": "right so on on ios for example there's this thing called as often as web",
    "start": "2742319",
    "end": "2747599"
  },
  {
    "text": "authentication session i think they call it it's a special browser it is the system browser on your ios device",
    "start": "2747599",
    "end": "2754160"
  },
  {
    "text": "inside the client application um it is hardened that the client cannot",
    "start": "2754160",
    "end": "2761040"
  },
  {
    "text": "lock the keystrokes for example inside that browser you have full access to your password manager to your",
    "start": "2761040",
    "end": "2766319"
  },
  {
    "text": "certificate store all the things that you need and the best part about this approaches is that while",
    "start": "2766319",
    "end": "2772960"
  },
  {
    "text": "because you're leveraging the system browser if you are already logged on to whatever you want to log on in your",
    "start": "2772960",
    "end": "2778960"
  },
  {
    "text": "browser then you will get single sign on also into the native app right because the session already exists in in that",
    "start": "2778960",
    "end": "2785920"
  },
  {
    "text": "browser yeah so um mac os has this special browser",
    "start": "2785920",
    "end": "2792720"
  },
  {
    "text": "android has it ios has it windows doesn't which is a bummer right",
    "start": "2793119",
    "end": "2800960"
  },
  {
    "text": "anyways okay cool so that's how that works yeah um and the last thing that we wanted",
    "start": "2801119",
    "end": "2808400"
  },
  {
    "text": "that i want to talk about is is you probably maybe maybe you heard or seen things like you",
    "start": "2808400",
    "end": "2814640"
  },
  {
    "text": "are locked in via oauth right and that's a lie oauth is not an authentication protocol",
    "start": "2814640",
    "end": "2821440"
  },
  {
    "text": "and you might not think yeah that's weird right um didn't we just see a login page and all of this yeah",
    "start": "2821440",
    "end": "2827680"
  },
  {
    "text": "why is this not an authentication protocol now think about it let's have a look again",
    "start": "2827680",
    "end": "2832800"
  },
  {
    "text": "how the the user-centric flow works right so we first open the front channel we send",
    "start": "2832800",
    "end": "2839359"
  },
  {
    "text": "the user to a login page yes there is a login page right but this is not really the the focus of",
    "start": "2839359",
    "end": "2844720"
  },
  {
    "text": "oauth the focus of oauth is getting tokens yeah so you open that browser",
    "start": "2844720",
    "end": "2850000"
  },
  {
    "text": "it shows something and then we get back an authorization code right the authorization code is just a random",
    "start": "2850000",
    "end": "2855119"
  },
  {
    "text": "number it doesn't tell us who the user is right and then you are opening the back",
    "start": "2855119",
    "end": "2860720"
  },
  {
    "text": "channel and retrieve the access token is the client allowed to look into the",
    "start": "2860720",
    "end": "2867599"
  },
  {
    "text": "access token to find out who the user is no he's not right um so in other words",
    "start": "2867599",
    "end": "2872960"
  },
  {
    "text": "uh oauth allows you to write an application that has access to someone's data but strictly speaking you",
    "start": "2872960",
    "end": "2880079"
  },
  {
    "text": "don't know who that someone is right and you might say oh i don't care as long as i have access to the data and",
    "start": "2880079",
    "end": "2886000"
  },
  {
    "text": "there are valid use cases for that but very often you do care right you want to",
    "start": "2886000",
    "end": "2891280"
  },
  {
    "text": "know who the user is in the application and then you want to access data on behalf of that user yeah",
    "start": "2891280",
    "end": "2897760"
  },
  {
    "text": "and think about it oauth does not have a way to to um to tell the server like show a",
    "start": "2897760",
    "end": "2904480"
  },
  {
    "text": "login page or in in which language to show the login page or maybe some usability things like pre-populate the",
    "start": "2904480",
    "end": "2911359"
  },
  {
    "text": "username field or whatever right this this this does not exist in oauth because it wasn't the focus um of oauth",
    "start": "2911359",
    "end": "2919520"
  },
  {
    "text": "by the time when they created oauth there were existing authentication systems already like saml based or",
    "start": "2919520",
    "end": "2925359"
  },
  {
    "text": "whatever custom things so yeah this is not part of the o of spec",
    "start": "2925359",
    "end": "2931119"
  },
  {
    "text": "that's why there is another spec that sits on top of oauth it's called open id connect okay and",
    "start": "2931119",
    "end": "2937680"
  },
  {
    "text": "openly connect adds all of these missing features to oauth to be able to do",
    "start": "2937680",
    "end": "2943760"
  },
  {
    "text": "both user authentication and api access in a single round trip",
    "start": "2943760",
    "end": "2949280"
  },
  {
    "text": "right and that is the sweet spot here because you know 15 years ago you did authentication with",
    "start": "2949280",
    "end": "2954400"
  },
  {
    "text": "saml and or maybe 10 years ago and api access with oh also you had to implement two protocols and they didn't even",
    "start": "2954400",
    "end": "2961040"
  },
  {
    "text": "really work together and the nice thing about openmadi connect is it basically sits on top of oauth to give you both",
    "start": "2961040",
    "end": "2967200"
  },
  {
    "text": "features in one protocol and again that means also you have less to learn yeah so what does omadi connect",
    "start": "2967200",
    "end": "2974720"
  },
  {
    "text": "add to oauth as i said it adds a whole bunch of parameters that you can send to the authorization server to",
    "start": "2974720",
    "end": "2981680"
  },
  {
    "text": "optimize the login experience right things like as i said they are the language of the login page or other",
    "start": "2981680",
    "end": "2987200"
  },
  {
    "text": "things that you might care about yeah also it adds a new artifact here which is",
    "start": "2987200",
    "end": "2993760"
  },
  {
    "text": "coming back on the back channel which is basically um data about what happened at the",
    "start": "2993760",
    "end": "3002640"
  },
  {
    "text": "authorization server and that is exactly made for the client yeah remember the client does not",
    "start": "3002640",
    "end": "3008400"
  },
  {
    "text": "is not allowed to look at the eddy access token but this other token that is specifically made for the client",
    "start": "3008400",
    "end": "3014880"
  },
  {
    "text": "to inspect it on the way back right and that is called the id token uh which is",
    "start": "3014880",
    "end": "3020000"
  },
  {
    "text": "i think a really really bad name uh because it's very confusing yeah id token access token refresh token so many",
    "start": "3020000",
    "end": "3025839"
  },
  {
    "text": "tokens right which one do i use now for my api is it the id token or is it the access token who cares um",
    "start": "3025839",
    "end": "3033040"
  },
  {
    "text": "so think about the id token so when you hear the word id token in your brain",
    "start": "3033040",
    "end": "3038240"
  },
  {
    "text": "replace that string with authentication response okay so ultimately here we are making an",
    "start": "3038240",
    "end": "3044319"
  },
  {
    "text": "authentication request to the server and what we are getting back is an authentication response right and",
    "start": "3044319",
    "end": "3050720"
  },
  {
    "text": "that is data that the server sends back to the client so the client knows who is",
    "start": "3050720",
    "end": "3056720"
  },
  {
    "text": "the user for example right the here's the subject id what's the display name of the user when did the user",
    "start": "3056720",
    "end": "3062559"
  },
  {
    "text": "authenticate how did the user authenticate all of that data and this now is not a private implementation",
    "start": "3062559",
    "end": "3069599"
  },
  {
    "text": "detail between the issuer and the consumer this is a standard so you can take a dependency on the",
    "start": "3069599",
    "end": "3075520"
  },
  {
    "text": "structure and format and semantics of that json object okay so that's that's what openmodi",
    "start": "3075520",
    "end": "3082559"
  },
  {
    "text": "connect is in seven minutes okay it is really sitting on top of oauth to",
    "start": "3082559",
    "end": "3088640"
  },
  {
    "text": "make the authentication experience much better and it allows you to do this very",
    "start": "3088640",
    "end": "3094480"
  },
  {
    "text": "common task of authentication and api access in a single round trip and with single round trip i mean two",
    "start": "3094480",
    "end": "3099760"
  },
  {
    "text": "round trips of course front channel and back channel but logically a single round trip yeah okay",
    "start": "3099760",
    "end": "3105680"
  },
  {
    "text": "i think that's it uh we it took us only 43 50 three minutes to explain olaf that's good i'm",
    "start": "3105680",
    "end": "3112000"
  },
  {
    "text": "getting better at this so if you",
    "start": "3112000",
    "end": "3117119"
  },
  {
    "text": "think that's interesting or it sparked your interest you want to know more about it",
    "start": "3117119",
    "end": "3122559"
  },
  {
    "text": "as i said don't read the o of 2.0 spec it's it's it's not useful anymore 10",
    "start": "3122559",
    "end": "3128559"
  },
  {
    "text": "years after it's been written in my opinion um read the over 2.1 spec yeah it is uh it is exactly showing these two",
    "start": "3128559",
    "end": "3136000"
  },
  {
    "text": "use cases that i just talked about it has a whole bunch of really useful security guidance on top which of 2.0",
    "start": "3136000",
    "end": "3142640"
  },
  {
    "text": "didn't have by the time um yeah it's still in korea i think",
    "start": "3142640",
    "end": "3148880"
  },
  {
    "text": "but you know i think they have html versions these days right of of these specs yeah um",
    "start": "3148880",
    "end": "3154160"
  },
  {
    "text": "which is also nice um and then on top of that have a look at openid connect yeah so if if you care",
    "start": "3154160",
    "end": "3161119"
  },
  {
    "text": "about these authentication scenarios uh look at the open connect specification as well um i wrote a couple of um",
    "start": "3161119",
    "end": "3168319"
  },
  {
    "text": "blog posts that relate to this topic yeah that you can also read and if you didn't want to",
    "start": "3168319",
    "end": "3174000"
  },
  {
    "text": "really deep dive into the nitty-gritty details um here's the ietf page and",
    "start": "3174000",
    "end": "3179680"
  },
  {
    "text": "there's the open the foundation page which are the two standard bodies which which you know",
    "start": "3179680",
    "end": "3186000"
  },
  {
    "text": "take care of these protocols and there's a ton of reading material on there",
    "start": "3186000",
    "end": "3191359"
  },
  {
    "text": "okay so any questions",
    "start": "3191359",
    "end": "3197680"
  },
  {
    "text": "yes",
    "start": "3197680",
    "end": "3200680"
  },
  {
    "text": "that's that's a by the way that's a troll question here yeah",
    "start": "3216240",
    "end": "3221359"
  },
  {
    "text": "he's talking about additional standards um which are useful right but",
    "start": "3221680",
    "end": "3228319"
  },
  {
    "text": "it's not for beginners i think but yeah they will they will become useful in the",
    "start": "3228319",
    "end": "3233599"
  },
  {
    "text": "future any other question they're just not trolling me [Laughter]",
    "start": "3233599",
    "end": "3240000"
  },
  {
    "text": "okay then thanks for your time and enjoy the rest of the conference thank you",
    "start": "3240000",
    "end": "3246920"
  },
  {
    "text": "you",
    "start": "3255119",
    "end": "3257200"
  }
]