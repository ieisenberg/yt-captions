[
  {
    "text": "okay are we on sounds like we are so welcome everyone thanks for coming along nice to see a",
    "start": "1199",
    "end": "7040"
  },
  {
    "text": "solid crowd sorry i had to get that one out of the way early um i have to confess i've not been going",
    "start": "7040",
    "end": "12559"
  },
  {
    "text": "to any of the other talks yet so far today so i haven't seen the other speakers have they all been saying about how great it is to actually be talking",
    "start": "12559",
    "end": "18960"
  },
  {
    "text": "to real people again uh not that talking to pixels was was",
    "start": "18960",
    "end": "24400"
  },
  {
    "text": "that bad but they're pixels anyway so yeah good to see you all here thanks for coming so i'm phil nash",
    "start": "24400",
    "end": "31439"
  },
  {
    "text": "uh some of you may know me from previous talks where i will have had a jet brains logo in the bottom corner you'll see it's changed",
    "start": "31439",
    "end": "38000"
  },
  {
    "text": "because i'm now working at some nussels i've even got the t-shirt because he's staying a little there so because i've used up all the red on",
    "start": "38000",
    "end": "44879"
  },
  {
    "text": "my t-shirt please don't use any of the red tokens on the way out there's a bit of a shortage now",
    "start": "44879",
    "end": "51039"
  },
  {
    "text": "okay we're going to be talking about solid that we're going to be revisiting it and this is actually the second time",
    "start": "51039",
    "end": "56800"
  },
  {
    "text": "i've done this talk so really it should be solid revisited revisited but that's actually a later slide we'll get to that",
    "start": "56800",
    "end": "63520"
  },
  {
    "text": "um if the talk title does sound familiar though i do apologize we did have a bit",
    "start": "63520",
    "end": "69360"
  },
  {
    "text": "of a name clash with tony van nerd who uh who gave a keynote c plus plus now",
    "start": "69360",
    "end": "74960"
  },
  {
    "text": "earlier this year with exactly the same title it's not the same it's completely different it's got a comma in the middle",
    "start": "74960",
    "end": "80000"
  },
  {
    "text": "that's how you can tell it apart but um yeah we do cover not the same material",
    "start": "80000",
    "end": "86479"
  },
  {
    "text": "similar idea but very different direction so if you have seen that talk this will be very different and if you",
    "start": "86479",
    "end": "91680"
  },
  {
    "text": "haven't you should go and watch it because that's an excellent talk as well which does actually go to show you know",
    "start": "91680",
    "end": "97040"
  },
  {
    "text": "this is a an idea whose time has come revisiting the solid principles quite a few people that have been questioning",
    "start": "97040",
    "end": "104079"
  },
  {
    "text": "are these things that we should be uh teaching uh if not following uh and",
    "start": "104079",
    "end": "109119"
  },
  {
    "text": "what should we be doing instead and in fact this talk is actually drawing on at least two other talks and i'm going to",
    "start": "109119",
    "end": "115759"
  },
  {
    "text": "do sort of a meta review of those as well so just just go to show there's a lot of people thinking about this",
    "start": "115759",
    "end": "122799"
  },
  {
    "text": "and the subtitle say to the mata bit of a play on words we'll can revisit that a bit later as well",
    "start": "122799",
    "end": "129599"
  },
  {
    "text": "what i mean by that but let's get off to a solid start now if you were",
    "start": "129599",
    "end": "135840"
  },
  {
    "text": "just say doing a google search to try and work out then what the solid principles really are where should you",
    "start": "135840",
    "end": "141520"
  },
  {
    "text": "get started you might hit this post by bob martin which is a good start because",
    "start": "141520",
    "end": "147440"
  },
  {
    "text": "it's really bob martin that compiled the solid principles in the first place with some nuances we'll get to that",
    "start": "147440",
    "end": "154720"
  },
  {
    "text": "and the title is getting a solid start seems like exactly the right place this is from 2009 it's a little bit old",
    "start": "154720",
    "end": "160879"
  },
  {
    "text": "now but uh it does say you know i'm often asked how should i get started with the solid principles great that's what i want",
    "start": "160879",
    "end": "168000"
  },
  {
    "text": "given the recent interest and controversy about the issue so even back in 2009",
    "start": "168000",
    "end": "173440"
  },
  {
    "text": "there's a little bit of controversy i'm not even sure what that was now um so it's probably time to give a",
    "start": "173440",
    "end": "178720"
  },
  {
    "text": "written answer but then it goes on to say you can read about the solid principles",
    "start": "178720",
    "end": "185200"
  },
  {
    "text": "here and give us a link the paper i wrote nearly a decade ago that's where you get the first problem",
    "start": "185200",
    "end": "191360"
  },
  {
    "text": "because if you follow that link you come to to this site which is uh choose vacation rentals",
    "start": "191360",
    "end": "198720"
  },
  {
    "text": "so unfortunately the object mentor domain is no longer owned by the same people so it's been a bit link checked",
    "start": "198720",
    "end": "204640"
  },
  {
    "text": "now so yeah it shows you that some of this stuff's getting a bit outdated so i used the wayback machine to find what",
    "start": "204640",
    "end": "210319"
  },
  {
    "text": "the original link was pointing to it's uh it's this article design principles and design patterns",
    "start": "210319",
    "end": "217360"
  },
  {
    "text": "by uh by robert martin and it's a it's quite a good paper this time",
    "start": "217360",
    "end": "223120"
  },
  {
    "text": "and it does go into a whole set of design principles and then also a whole set of design patterns you know two",
    "start": "223120",
    "end": "230000"
  },
  {
    "text": "separate things that will become important later the principles it goes into there",
    "start": "230000",
    "end": "235040"
  },
  {
    "text": "are these ones um we won't go into the full names right now we're just looking at the letters",
    "start": "235040",
    "end": "240640"
  },
  {
    "text": "that you might try to refer to as the old durka cass principles if you're really going for it",
    "start": "240640",
    "end": "247120"
  },
  {
    "text": "but you can sort of see the start of what became the solid principles there the first four",
    "start": "247120",
    "end": "253519"
  },
  {
    "text": "letters themselves the oldie principles so it also tells you a little bit about",
    "start": "253519",
    "end": "258880"
  },
  {
    "text": "them that they've been around for a while and a little bit later you know here i did srp to that list",
    "start": "258880",
    "end": "264639"
  },
  {
    "text": "to get well the saudi principles still not quite there yet",
    "start": "264639",
    "end": "271440"
  },
  {
    "text": "then he wrote this book in 2002 2003 agile software development again",
    "start": "271440",
    "end": "277680"
  },
  {
    "text": "principles and patterns and also practices and there's a whole chapter there what is agile design",
    "start": "277680",
    "end": "284320"
  },
  {
    "text": "where he lists in exactly that same order the effectively the soldier principles so",
    "start": "284320",
    "end": "290720"
  },
  {
    "text": "what we now think of as a solid principle still hadn't quite been born yet but they were there this is this is where",
    "start": "290720",
    "end": "296320"
  },
  {
    "text": "they came from there is a point to where this is all going by the way but it's an interesting bit of history",
    "start": "296320",
    "end": "302720"
  },
  {
    "text": "so a few years later 2005 he wrote another article uh maybe a little bit harder to read on",
    "start": "302720",
    "end": "308080"
  },
  {
    "text": "this screen but the principles of od or as i like to call it the principles",
    "start": "308080",
    "end": "313840"
  },
  {
    "text": "of ood this rolls off the tongue a bit better and you can see oh",
    "start": "313840",
    "end": "319440"
  },
  {
    "text": "i'm not ready for that bit yeah see at the bottom there you can if you can read it you've got",
    "start": "319440",
    "end": "324880"
  },
  {
    "text": "the same principles but now they are in the order solid something changed in the meantime",
    "start": "324880",
    "end": "331600"
  },
  {
    "text": "what's interesting is the article doesn't talk about the solid principle the talk doesn't mention them by that name but they're at least in the right",
    "start": "331600",
    "end": "337600"
  },
  {
    "text": "order what had changed in the meantime is they'd have a discussion with michael fergus who pointed out that if he just",
    "start": "337600",
    "end": "343759"
  },
  {
    "text": "reordered the last two you do get a nice acronym so we really have michael feathers to thank for that",
    "start": "343759",
    "end": "350400"
  },
  {
    "text": "um but they they won't actually mention in the paper and in fact he does also go on",
    "start": "350400",
    "end": "355840"
  },
  {
    "text": "to talk about those other principles that were in his original paper so now the um solidification principles",
    "start": "355840",
    "end": "363680"
  },
  {
    "text": "so yeah we still haven't distilled it down to solid principles this is where it's at",
    "start": "363680",
    "end": "369520"
  },
  {
    "text": "but that came some time after 2005 i never quite pinned it down certainly by 2009",
    "start": "369520",
    "end": "375680"
  },
  {
    "text": "so we're sort of building up a little bit of a of a timeline now just to put that into historical",
    "start": "375680",
    "end": "381120"
  },
  {
    "text": "context we've been talking about it from 2005 to 2000 and sorry 2000 to 2005 here",
    "start": "381120",
    "end": "387840"
  },
  {
    "text": "um and you know the rest as they say is history but also a bit of pre-history because he",
    "start": "387840",
    "end": "394400"
  },
  {
    "text": "didn't invent the underlying principles they were drawn from earlier material going back to 1979.",
    "start": "394400",
    "end": "401199"
  },
  {
    "text": "tom demarco wrote a structured analysis and system specifications where amongst other things he talks",
    "start": "401199",
    "end": "407280"
  },
  {
    "text": "about the concept of cohesion things that belong together should be together and the things that don't",
    "start": "407280",
    "end": "413360"
  },
  {
    "text": "belong together should should be a part was the basis of srp well we'll talk more about that later",
    "start": "413360",
    "end": "419919"
  },
  {
    "text": "bertrand mayer in 1988 object-oriented software construction introduced the open close principle",
    "start": "419919",
    "end": "427280"
  },
  {
    "text": "also in 1988 barbara liskoff in data abstractions and hierarchy",
    "start": "427280",
    "end": "432800"
  },
  {
    "text": "introduced her substitution principle that we now think of as the list of",
    "start": "432800",
    "end": "437840"
  },
  {
    "text": "substitution principle and then the last two well you can find them in a series of",
    "start": "437840",
    "end": "444080"
  },
  {
    "text": "papers between 94 and 96 by bob martin in the c plus report uh so he sort of",
    "start": "444080",
    "end": "451039"
  },
  {
    "text": "gave them the names that we had now but um they were still drawn on earlier material but i couldn't quite trace back",
    "start": "451039",
    "end": "457199"
  },
  {
    "text": "the origins so we'll give those ones to him and interestingly if you put those up in",
    "start": "457199",
    "end": "462240"
  },
  {
    "text": "chronological order bear in mind a little bit of ambiguity about those pairings you can actually",
    "start": "462240",
    "end": "468479"
  },
  {
    "text": "get the solid principles out of that as well so yeah although they've only really been",
    "start": "468479",
    "end": "473759"
  },
  {
    "text": "around since 2005 or later they have a long heritage back to",
    "start": "473759",
    "end": "479280"
  },
  {
    "text": "1979 so maybe the aldi principles was actually getting at something so perhaps some of these are a little",
    "start": "479280",
    "end": "485440"
  },
  {
    "text": "bit outdated we'll look at that later but interesting bit of history just to put",
    "start": "485440",
    "end": "490639"
  },
  {
    "text": "it all into context so okay we've been talking about the solid",
    "start": "490639",
    "end": "496960"
  },
  {
    "text": "principles but what actually are they in fact who here or who here's heard of the solid",
    "start": "496960",
    "end": "503039"
  },
  {
    "text": "principles so almost everyone uh which is not surprising given you",
    "start": "503039",
    "end": "508960"
  },
  {
    "text": "come to this talk but of those people who could honestly say they know what",
    "start": "508960",
    "end": "514080"
  },
  {
    "text": "each one of the letters stands for even less than i than i thought are not",
    "start": "514080",
    "end": "520479"
  },
  {
    "text": "those who could actually accurately describe the meaning behind each one of those",
    "start": "520479",
    "end": "525839"
  },
  {
    "text": "this is part of the problem everyone knows that they're supposed to be important we just don't really know",
    "start": "525839",
    "end": "532160"
  },
  {
    "text": "what they are so let's have a quick recap not really it's not going to be an introduction to",
    "start": "532160",
    "end": "537360"
  },
  {
    "text": "the solid principles uh that would be at least the whole talk on its own in fact klaus eagleburger who's who's here at",
    "start": "537360",
    "end": "543600"
  },
  {
    "text": "the conference has done such a talk and i'll give you a load of references at the end which um",
    "start": "543600",
    "end": "549279"
  },
  {
    "text": "which included a link to that um but let's just recap at least from a high level so we don't know what we're",
    "start": "549279",
    "end": "555040"
  },
  {
    "text": "talking about so srp and usually i get the audience to try to suggest these but",
    "start": "555040",
    "end": "561279"
  },
  {
    "text": "i'm not used to being back in a big crowd so i'll just go for it on my own um srp single responsibility principle",
    "start": "561279",
    "end": "568480"
  },
  {
    "text": "probably the most well-known one that's a good thing i would say it's the most important one",
    "start": "568480",
    "end": "574080"
  },
  {
    "text": "it's also the one that's hardest to get the meaning from from the name uh as we'll discuss",
    "start": "574080",
    "end": "579360"
  },
  {
    "text": "but yeah one of the questions really is what is responsibility that there's talk of it being like a",
    "start": "579360",
    "end": "585360"
  },
  {
    "text": "reason to change but then what does that mean as well you keep asking questions and we will do",
    "start": "585360",
    "end": "591920"
  },
  {
    "text": "we'll come back to that but yeah single responsibility if you're going to stick to one that should really be it just maybe give it a better name",
    "start": "591920",
    "end": "599279"
  },
  {
    "text": "ocp the open closed principle most people have heard of that a few people really know what it actually",
    "start": "599279",
    "end": "605200"
  },
  {
    "text": "means um but we do say you know open for extension and closed form modification",
    "start": "605200",
    "end": "612079"
  },
  {
    "text": "but how does that really apply and how does that really fit in with the the agile mindset of embracing change if",
    "start": "612079",
    "end": "619680"
  },
  {
    "text": "you're closing for modification does that actually fit as an agile principle it was in the agile book after",
    "start": "619680",
    "end": "626160"
  },
  {
    "text": "all we'll have a look at that lsp is the liskov substitution principles as",
    "start": "626160",
    "end": "632399"
  },
  {
    "text": "we mentioned earlier big problem there is it's named after a person which doesn't tell you a lot um what we're",
    "start": "632399",
    "end": "637600"
  },
  {
    "text": "going to do is substitution substitute ability substitutable types",
    "start": "637600",
    "end": "642720"
  },
  {
    "text": "um okay that's good but again a lot of people talk about this without really knowing",
    "start": "642720",
    "end": "648720"
  },
  {
    "text": "what it meant and what most people take it to mean now so we'll have a look at that as well",
    "start": "648720",
    "end": "655920"
  },
  {
    "text": "the interface segregation principle is next uh all i say about that for the moment is you can think of it as just a single",
    "start": "655920",
    "end": "662560"
  },
  {
    "text": "responsibility principle but applied at the interface level uh to first approximation",
    "start": "662560",
    "end": "668959"
  },
  {
    "text": "and then the dependency inversion principle uh we'll dig into that quite a bit but",
    "start": "668959",
    "end": "674399"
  },
  {
    "text": "um i think the biggest problem is that i keep calling it the divinity injection principle and i know i'm not the only one",
    "start": "674399",
    "end": "680959"
  },
  {
    "text": "so we'll touch on all of those again and say we're not going to go deep on each one we're going to discuss problems",
    "start": "681839",
    "end": "687200"
  },
  {
    "text": "around them so to set the scene i want to",
    "start": "687200",
    "end": "693040"
  },
  {
    "text": "bring up the first of the the talks i'm going to do like a meta review of um",
    "start": "693040",
    "end": "698399"
  },
  {
    "text": "the first one that really got me thinking about this stuff so back in 2016 at a another ndc",
    "start": "698399",
    "end": "705279"
  },
  {
    "text": "conference in london in dc london kevin henny gave this talk solid deconstruction",
    "start": "705279",
    "end": "712320"
  },
  {
    "text": "as you can tell from the title he deconstructed the solid principle",
    "start": "712320",
    "end": "717440"
  },
  {
    "text": "you could say tore them down it wasn't quite that that bad but he certainly did pull them apart",
    "start": "717440",
    "end": "722959"
  },
  {
    "text": "and then examine some of the problems that he had with them uh we'll look at some of those in a minute",
    "start": "722959",
    "end": "728560"
  },
  {
    "text": "there's another talk i want to introduce it was actually a lightning talk by dan north",
    "start": "728560",
    "end": "734800"
  },
  {
    "text": "with the um maybe slightly over the top title of why every single element in solid is wrong",
    "start": "734800",
    "end": "741200"
  },
  {
    "text": "but it certainly gets you thinking it was a lightning talk and i couldn't find a recording of this online just the",
    "start": "741200",
    "end": "746880"
  },
  {
    "text": "slides so i may have missed some of the nuance but i have talked to dan about it since i think i've",
    "start": "746880",
    "end": "752240"
  },
  {
    "text": "i've captured it okay so um interestingly",
    "start": "752240",
    "end": "758720"
  },
  {
    "text": "both of these presenters have also proposed their own acronyms for collections of principles",
    "start": "758720",
    "end": "765680"
  },
  {
    "text": "uh but uh well in kevin's case maybe a little bit tongue-in-cheek because he's obviously trying to have a",
    "start": "765680",
    "end": "771519"
  },
  {
    "text": "play on solid so he came up with the fluid principles well he had always assumed that it was meant to be taken tongue-in-cheek until",
    "start": "771519",
    "end": "778320"
  },
  {
    "text": "i was talking with kathleen about this a few months ago before the accu talk and he said no no i meant it seriously",
    "start": "778320",
    "end": "785440"
  },
  {
    "text": "um so well you'll see for yourself we'll have a look at them a bit later",
    "start": "785440",
    "end": "790560"
  },
  {
    "text": "and in fact i think it can be a quite a nice exercise to go away and try to come up with your own",
    "start": "790560",
    "end": "796240"
  },
  {
    "text": "acronym see what principles you you think are the most important and how i held together and",
    "start": "796240",
    "end": "802480"
  },
  {
    "text": "you might be surprised what sort of lines of thinking that that takes you down now",
    "start": "802480",
    "end": "809600"
  },
  {
    "text": "the first time i started putting this material together not as a talk but as a rather interactive thing at the um",
    "start": "809760",
    "end": "816320"
  },
  {
    "text": "extreme tuesday club usually in london it was online this year um earlier in february i think",
    "start": "816320",
    "end": "823120"
  },
  {
    "text": "uh and i got kevin and and dan along i had a nice big discussion about it and",
    "start": "823120",
    "end": "828480"
  },
  {
    "text": "then said yeah i've been working on an acronym as well but i'm not ready to publish it yet so i couldn't reveal it",
    "start": "828480",
    "end": "833920"
  },
  {
    "text": "at the accu conference but i can tell you now that he has the cupid principles and he",
    "start": "833920",
    "end": "840240"
  },
  {
    "text": "does mean this quite seriously um unfortunately i didn't quite get around to putting a slide together with all of",
    "start": "840240",
    "end": "845360"
  },
  {
    "text": "the acronyms but i have put a link to his article that he's posted about it uh since so you can look that up",
    "start": "845360",
    "end": "851440"
  },
  {
    "text": "at the end um it definitely takes it off in a bit of a different direction",
    "start": "851440",
    "end": "857519"
  },
  {
    "text": "um okay let's have a look at his talk though uh let's put up the first slide from",
    "start": "857519",
    "end": "863360"
  },
  {
    "text": "there where he talks about the single responsibility principle which he calls the pointlessly vague principle this sort of gets at the",
    "start": "863360",
    "end": "870000"
  },
  {
    "text": "essence of why it's not a particularly good name it sounds right it's like yeah i agree with that",
    "start": "870000",
    "end": "876399"
  },
  {
    "text": "but when you pull it apart it let's say what is a responsibility anyway what does it really mean by only a single",
    "start": "876399",
    "end": "881839"
  },
  {
    "text": "responsibility does that mean it's doing two things that it and that's its purpose that that has to",
    "start": "881839",
    "end": "888079"
  },
  {
    "text": "be wrong as well you give the example of etl um and then also",
    "start": "888079",
    "end": "893440"
  },
  {
    "text": "this idea of it being one reason to change which is often",
    "start": "893440",
    "end": "898639"
  },
  {
    "text": "provided as the explanation well you know how can you predict when something is going to change how do you",
    "start": "898639",
    "end": "904079"
  },
  {
    "text": "know what things only have one reason to change so it raises a lot more questions that",
    "start": "904079",
    "end": "909839"
  },
  {
    "text": "it answers at least on the surface so",
    "start": "909839",
    "end": "915199"
  },
  {
    "text": "he has a an alternate version of this",
    "start": "916240",
    "end": "921680"
  },
  {
    "text": "which is right simple code which i think is also a little bit vague",
    "start": "921680",
    "end": "927600"
  },
  {
    "text": "but he is onto something here and he actually",
    "start": "927600",
    "end": "932959"
  },
  {
    "text": "fleshes out a little bit simple code is easy to reason about can easily do several related things",
    "start": "932959",
    "end": "941360"
  },
  {
    "text": "and perhaps most importantly refactor until it fits in your head",
    "start": "941360",
    "end": "946480"
  },
  {
    "text": "this is one of dan's favorite phrases uses that lies it's a really great sort of pragmatic way of thinking about",
    "start": "946480",
    "end": "952320"
  },
  {
    "text": "simplicity if you can fit in your head then it's probably simply enough and if it can't then you've got to do something",
    "start": "952320",
    "end": "958320"
  },
  {
    "text": "about it because you won't be able to reason about it this idea of reasonability is all tied up with it",
    "start": "958320",
    "end": "964800"
  },
  {
    "text": "i don't think it goes quite far enough but i think this is actually a really strong idea and in fact it turns out to",
    "start": "964800",
    "end": "970639"
  },
  {
    "text": "be his answer to all of them right simple code is his his central principle at least",
    "start": "970639",
    "end": "977600"
  },
  {
    "text": "until he came up with the cupid principles um but it was just a lightning talk",
    "start": "977600",
    "end": "984480"
  },
  {
    "text": "enlightening talks are often meant to be provocative and make you think it certainly does that",
    "start": "984480",
    "end": "989519"
  },
  {
    "text": "so i'm not gonna question him too much on some of the over top over the top bits but i think",
    "start": "989519",
    "end": "995199"
  },
  {
    "text": "this idea of simplicity being really the more fundamental principle that we should be thinking about",
    "start": "995199",
    "end": "1001519"
  },
  {
    "text": "but there's a lot in that we're definitely going to explore that more a bit later all right we didn't really talk about",
    "start": "1001519",
    "end": "1007600"
  },
  {
    "text": "kevlin's talk so what kathleen did was he went through each principle",
    "start": "1007600",
    "end": "1012959"
  },
  {
    "text": "individually but in a bit more depth than dan did because it's a longer talk",
    "start": "1012959",
    "end": "1018399"
  },
  {
    "text": "and basically boiled down what the the underlying principle was so srp single",
    "start": "1018399",
    "end": "1025600"
  },
  {
    "text": "responsibility principle as we've already discussed basically comes from ton demarco's idea",
    "start": "1025600",
    "end": "1031918"
  },
  {
    "text": "of cohesion and cohesion is when as we said things that belong together",
    "start": "1031919",
    "end": "1037360"
  },
  {
    "text": "go together but if they don't belong together but they shouldn't be together but the flip side to that",
    "start": "1037360",
    "end": "1043839"
  },
  {
    "text": "the term that kevin introduces here is adhesion where you just stick things that don't",
    "start": "1043839",
    "end": "1049120"
  },
  {
    "text": "belong together together and that's what a lot of code looks like that's it's ad easy this sticky code and",
    "start": "1049120",
    "end": "1056480"
  },
  {
    "text": "you can think of just putting your fingers in and pulling out bits of unreality code it's quite a good visual",
    "start": "1056480",
    "end": "1062559"
  },
  {
    "text": "um so this idea of cohesion well i still need a little bit of explaining but it gets much more to the",
    "start": "1062559",
    "end": "1069039"
  },
  {
    "text": "heart of what we're really trying to do when we talk about separating the single responsibility or separating concerns is",
    "start": "1069039",
    "end": "1076160"
  },
  {
    "text": "the other way it's often described so yeah kevlin agrees that this is probably the most important principle",
    "start": "1076160",
    "end": "1082320"
  },
  {
    "text": "once you understand what it's really about once you seize out the cohesion",
    "start": "1082320",
    "end": "1087919"
  },
  {
    "text": "and then he talks about the open close principle um well actually before he gets to to this",
    "start": "1088000",
    "end": "1094880"
  },
  {
    "text": "bit he does talk about the historical context it came out in the 80s i mean it was in",
    "start": "1094880",
    "end": "1101039"
  },
  {
    "text": "the 1988 book so it's really based on thinking from before that um",
    "start": "1101039",
    "end": "1106799"
  },
  {
    "text": "things were a lot more expensive then like it's more expensive to change code particularly since",
    "start": "1106799",
    "end": "1112320"
  },
  {
    "text": "we didn't really have much in the way of mainstream version control i did actually look it up i think rcs",
    "start": "1112320",
    "end": "1117760"
  },
  {
    "text": "came out in 1982 so it was around but i didn't hear about it until the 90s",
    "start": "1117760",
    "end": "1123679"
  },
  {
    "text": "i don't know about anybody else so yeah changing code was actually a very expensive thing and you have to be very",
    "start": "1123679",
    "end": "1130480"
  },
  {
    "text": "careful so you can see why the open close principle was very much about you know don't don't",
    "start": "1130480",
    "end": "1136480"
  },
  {
    "text": "change what you don't have to think of ways that you can add to it to regular change",
    "start": "1136480",
    "end": "1141520"
  },
  {
    "text": "um and that was that was a useful idea then so in that sense it's definitely outdated",
    "start": "1141520",
    "end": "1148320"
  },
  {
    "text": "but there's a part of it that is still relevant and that's the bit that's captured here",
    "start": "1148320",
    "end": "1154080"
  },
  {
    "text": "first of all the idea of using polymorphism um not so much for the in the sort of the way of reuse that we were thinking",
    "start": "1154080",
    "end": "1160480"
  },
  {
    "text": "about in the 80s and 90s but that's still valuable",
    "start": "1160480",
    "end": "1165919"
  },
  {
    "text": "um but particularly this part don't publish prematurely because if you've got",
    "start": "1165919",
    "end": "1172320"
  },
  {
    "text": "um objects in your own code base uh or your team's code base but you control every usage of it",
    "start": "1172320",
    "end": "1178960"
  },
  {
    "text": "then you should feel free to change that as much as you like you know the agile embrace change mantra",
    "start": "1178960",
    "end": "1185679"
  },
  {
    "text": "really applies there that's not a problem but as soon as you publish that outside to someone you don't control",
    "start": "1185679",
    "end": "1192000"
  },
  {
    "text": "could be another team it could be the rest of the world something in between then it's so much more harder so much",
    "start": "1192000",
    "end": "1198240"
  },
  {
    "text": "harder so much more expensive to make a change that's when",
    "start": "1198240",
    "end": "1203840"
  },
  {
    "text": "extending rather than changing is usually the better strategy some sort of versioning strategy and that adds a lot",
    "start": "1203840",
    "end": "1209840"
  },
  {
    "text": "of extra complexity so the more you can push that off the more you can stay in that change everything world",
    "start": "1209840",
    "end": "1215760"
  },
  {
    "text": "the better so that part of ocp keplin thinks is definitely",
    "start": "1215760",
    "end": "1222400"
  },
  {
    "text": "something we should we should still consider it doesn't apply to everyone though but but it's still a worthwhile principle",
    "start": "1222400",
    "end": "1230159"
  },
  {
    "text": "risk of substitution principle he actually goes into quite a lot to",
    "start": "1230720",
    "end": "1235840"
  },
  {
    "text": "analyzing exactly what disc off wrote so what it means and how it's not quite what people usually think of but what it",
    "start": "1235840",
    "end": "1241840"
  },
  {
    "text": "really boils down to again is use polymorphism that's the substitutability bit but",
    "start": "1241840",
    "end": "1247760"
  },
  {
    "text": "carefully at least that's the executive summary really and this really came out in the",
    "start": "1247760",
    "end": "1253600"
  },
  {
    "text": "discussion at the extreme tuesday club what he was saying was that",
    "start": "1253600",
    "end": "1259600"
  },
  {
    "text": "the political substitution principle means when you implement something polymorphically you also have to conform",
    "start": "1259600",
    "end": "1265120"
  },
  {
    "text": "to the same contract it has to do exactly the same thing in the same way",
    "start": "1265120",
    "end": "1270559"
  },
  {
    "text": "otherwise it's not substitutable and that doesn't really fit with what a lot of people use polymorphism for and a",
    "start": "1270559",
    "end": "1276320"
  },
  {
    "text": "very strict interpretation when we need them things like if you add logging or something like that that's going to break",
    "start": "1276320",
    "end": "1282240"
  },
  {
    "text": "lsp so this is like more relaxed version that most people",
    "start": "1282240",
    "end": "1287280"
  },
  {
    "text": "strive for which you know does allow some things but this idea of preserving contracts",
    "start": "1287280",
    "end": "1292799"
  },
  {
    "text": "turns out to be really what the discharge substitution principle is about just in the context of polymorphism not",
    "start": "1292799",
    "end": "1299600"
  },
  {
    "text": "necessarily inheritance-based polymorphism either because when barbara liskoff was talking",
    "start": "1299600",
    "end": "1305200"
  },
  {
    "text": "about it was in the context of abstract data types and not io at all so you can apply this",
    "start": "1305200",
    "end": "1311600"
  },
  {
    "text": "in a broad range of applications so useful but",
    "start": "1311600",
    "end": "1317280"
  },
  {
    "text": "as a principle we can use when we're designing software it mostly boils down to use polymorphism carefully",
    "start": "1317280",
    "end": "1323679"
  },
  {
    "text": "consider the contracts isp as we said earlier it's basically",
    "start": "1323679",
    "end": "1329919"
  },
  {
    "text": "srp for interfaces so the interface segregation principle so does it really add anything to basically",
    "start": "1329919",
    "end": "1336320"
  },
  {
    "text": "repeat that in a slightly different context maybe but kevin wasn't convinced",
    "start": "1336320",
    "end": "1343440"
  },
  {
    "text": "and the dependency inversion principle again use polymorphism",
    "start": "1343440",
    "end": "1349200"
  },
  {
    "text": "but with interfaces is really what it boils down to i mean there's a bit more about why you're",
    "start": "1349200",
    "end": "1354799"
  },
  {
    "text": "doing that here you're trying to reduce your exposure to dependencies that's that's the purpose of it",
    "start": "1354799",
    "end": "1360640"
  },
  {
    "text": "but in practice but it boils down to use polymorphism with interfaces so you can probably already see",
    "start": "1360640",
    "end": "1366799"
  },
  {
    "text": "there's a bit of repetition here things just have been restated in slightly different ways do we really",
    "start": "1366799",
    "end": "1372480"
  },
  {
    "text": "need all of these slightly uh archaic named principles to to tease that out",
    "start": "1372480",
    "end": "1379520"
  },
  {
    "text": "and in fact i i sort of regrouped these a bit and really it sort of boils down to two",
    "start": "1379520",
    "end": "1385679"
  },
  {
    "text": "and a half maybe three underlying ideas the first one being the idea of cohesion",
    "start": "1385679",
    "end": "1390880"
  },
  {
    "text": "that's definitely definitely central and that applies to srp and isp as we've said",
    "start": "1390880",
    "end": "1396480"
  },
  {
    "text": "but then polymorphism and interfaces it's",
    "start": "1396480",
    "end": "1402240"
  },
  {
    "text": "dependency inversion principle ocp and when when applied carefully",
    "start": "1402240",
    "end": "1408640"
  },
  {
    "text": "lsp and then maybe this extra bit with ocp about not publishing prematurely um i",
    "start": "1408640",
    "end": "1414720"
  },
  {
    "text": "don't know if it's really a principle it's just a good idea i think i think it's difficult to know where to draw the line but",
    "start": "1414720",
    "end": "1420480"
  },
  {
    "text": "um yeah this idea of internal redundancies was a big part of of kevlin's criticism",
    "start": "1420480",
    "end": "1425760"
  },
  {
    "text": "as well as some of the naming and terminology and we'll dig into some",
    "start": "1425760",
    "end": "1430880"
  },
  {
    "text": "of that a little bit more later so when i first watched this talk i found",
    "start": "1430880",
    "end": "1436000"
  },
  {
    "text": "myself agreeing with a lot of what kevin was saying definitely the general direction and ideas",
    "start": "1436000",
    "end": "1442799"
  },
  {
    "text": "um and that's really interesting historical context and idea uh asides but i didn't agree with everything",
    "start": "1442799",
    "end": "1450159"
  },
  {
    "text": "and in fact towards the end of the talk and i didn't check whether we had sound enabled but i've got subtitles anyway",
    "start": "1450159",
    "end": "1456720"
  },
  {
    "text": "um",
    "start": "1456720",
    "end": "1459720"
  },
  {
    "text": "this is typical of kevin's talks they're not well they're designed to make you think",
    "start": "1462640",
    "end": "1468559"
  },
  {
    "text": "not to do the thinking for you just like damn norse talks in fact so yeah if he did agree with everything",
    "start": "1468559",
    "end": "1475279"
  },
  {
    "text": "then he probably went wrong somewhere so that was actually that was actually a good result",
    "start": "1475279",
    "end": "1480720"
  },
  {
    "text": "now interestingly um you can see in in the slide that's showing here i've got a picture of a",
    "start": "1480720",
    "end": "1487279"
  },
  {
    "text": "book kevin happens to be a co-author of uh that happens to be a design patterns book so it's all full tied in but",
    "start": "1487279",
    "end": "1495520"
  },
  {
    "text": "this is another thing kevin likes to do is take pictures of books that he owns on on different surfaces around his",
    "start": "1495520",
    "end": "1500960"
  },
  {
    "text": "house and they've been doing this for years and i quite like the idea so i happened to be doing a talk at the",
    "start": "1500960",
    "end": "1507360"
  },
  {
    "text": "same conference on the same day in the same room and i had a slide where i was trying to",
    "start": "1507360",
    "end": "1513440"
  },
  {
    "text": "do the same thing but i didn't i wasn't really reading physical books anymore so i took a picture of my ipad",
    "start": "1513440",
    "end": "1518960"
  },
  {
    "text": "with an e-book but the reason this is relevant is because this talk",
    "start": "1518960",
    "end": "1524960"
  },
  {
    "text": "was about simplicity it's called seeking simplicity within the references and i was trying to get at this idea",
    "start": "1524960",
    "end": "1531120"
  },
  {
    "text": "that simplicity was actually this essential central principle that we should be striving for",
    "start": "1531120",
    "end": "1537919"
  },
  {
    "text": "that everything else sort of drops out of so yeah it's only looking back i realized that was actually on the same",
    "start": "1537919",
    "end": "1543120"
  },
  {
    "text": "day okay so we've looked at",
    "start": "1543120",
    "end": "1549039"
  },
  {
    "text": "talked by kevin talked by dan north considered their criticisms uh maybe added one or two our own in the",
    "start": "1549039",
    "end": "1555440"
  },
  {
    "text": "process does that really mean that the folly principles have problems",
    "start": "1555440",
    "end": "1561360"
  },
  {
    "text": "um they're not the only ones as i said there are there are many voices here i've tried to collect and sort of group",
    "start": "1561360",
    "end": "1567440"
  },
  {
    "text": "all the different criticisms that i found in in other talks and blog posts and things",
    "start": "1567440",
    "end": "1573120"
  },
  {
    "text": "i've come up with this list most of them are actually covered in those two talks which is why i",
    "start": "1573120",
    "end": "1578240"
  },
  {
    "text": "highlighted them so it's going to go through these and have a look do they are they really",
    "start": "1578240",
    "end": "1584880"
  },
  {
    "text": "problems and if they are what can we do about them so the first one is and this is this is",
    "start": "1584880",
    "end": "1590159"
  },
  {
    "text": "one of kevin's claims they're not actually principles and this is kevin uh picking up the words again and he likes to do that",
    "start": "1590159",
    "end": "1596960"
  },
  {
    "text": "it's always entertaining when he does um and he he actually quoted from the uh",
    "start": "1596960",
    "end": "1602720"
  },
  {
    "text": "oxford english dictionary um i found a quote from the cambridge dictionary that's very similar",
    "start": "1602720",
    "end": "1608640"
  },
  {
    "text": "but in support of his argument where it says that principles are a basic truth or a basic idea or rule",
    "start": "1608640",
    "end": "1616159"
  },
  {
    "text": "that explains or controls how something happens or works or a moral rule or standard of good",
    "start": "1616159",
    "end": "1623039"
  },
  {
    "text": "behavior or fair dealing and kevin",
    "start": "1623039",
    "end": "1628240"
  },
  {
    "text": "kevin's argument was well the solid principles are none of these they're not absolute truths",
    "start": "1628240",
    "end": "1634000"
  },
  {
    "text": "um they're not rules and they have nothing to do with morality so are they actually principles",
    "start": "1634000",
    "end": "1641360"
  },
  {
    "text": "and his conclusion was no but the reason i quoted from the cambridge dictionary here is because",
    "start": "1641360",
    "end": "1648000"
  },
  {
    "text": "there's another definition there although it's actually to do with something something in principle",
    "start": "1648000",
    "end": "1654399"
  },
  {
    "text": "where if you agree with or believe something in principle you agree with the idea in general",
    "start": "1654399",
    "end": "1660640"
  },
  {
    "text": "although you might not support it in reality or in every situation that actually seems to be a much better",
    "start": "1660640",
    "end": "1666799"
  },
  {
    "text": "fit so what we're talking about with the solid principles they're a good general idea they might",
    "start": "1666799",
    "end": "1672320"
  },
  {
    "text": "not fit everything but you should always consider them what did bob martin actually mean though",
    "start": "1672320",
    "end": "1679279"
  },
  {
    "text": "playing with definitions here well in that article we looked at earlier the um getting a solid start he has a whole",
    "start": "1679279",
    "end": "1685360"
  },
  {
    "text": "section what do i mean by principle so the solid principles are not rules they're not laws and they're not perfect",
    "start": "1685360",
    "end": "1691440"
  },
  {
    "text": "truths it's almost as if you just read that definition in the dictionary no that's not what i mean",
    "start": "1691440",
    "end": "1697679"
  },
  {
    "text": "yeah it's like talking to kathleen in the future there are statements on the order of an apple a day keeps the doctor away",
    "start": "1697679",
    "end": "1704640"
  },
  {
    "text": "it's a good principle it's good advice but it's not a pure truth nor is it a",
    "start": "1704640",
    "end": "1709679"
  },
  {
    "text": "rule so he was quite clear about what he meant and it does actually fit with the cambridge dictionary so i'm",
    "start": "1709679",
    "end": "1715679"
  },
  {
    "text": "actually going to let him off this one but not completely there's still a problem here",
    "start": "1715679",
    "end": "1723279"
  },
  {
    "text": "in the very next paragraph in that section he says the principles are mental cubbyholes",
    "start": "1723279",
    "end": "1729679"
  },
  {
    "text": "they give a name to a concept so that you can talk and reason about that concept",
    "start": "1729679",
    "end": "1735039"
  },
  {
    "text": "which is a really powerful um thinking technology but",
    "start": "1735039",
    "end": "1740480"
  },
  {
    "text": "it comes with a price it's got a downside and that's that when you give something a name people start to forget what the broader",
    "start": "1740480",
    "end": "1747600"
  },
  {
    "text": "discussion around it actually was and they just had their own ideas about what that means and they stopped",
    "start": "1747600",
    "end": "1752640"
  },
  {
    "text": "challenging it and this happens time and time again it's very difficult to get away from this",
    "start": "1752640",
    "end": "1757679"
  },
  {
    "text": "that's happened with agile itself we now talk about big agile and little agile because they diverge so much",
    "start": "1757679",
    "end": "1765200"
  },
  {
    "text": "so by giving names to these things and not just a name but this like catchy acronym that everyone now talks about",
    "start": "1765200",
    "end": "1771279"
  },
  {
    "text": "started to become part of that problem and perhaps even worse they're not very good names",
    "start": "1771279",
    "end": "1778159"
  },
  {
    "text": "which is the next problem that they're not particularly accessibly named we can't really",
    "start": "1778159",
    "end": "1784000"
  },
  {
    "text": "look at those names most of the time so yeah i know what that means you do have to dig a bit more so",
    "start": "1784000",
    "end": "1789679"
  },
  {
    "text": "the single responsibility principle well we've already discussed that i think it's it doesn't really tell you",
    "start": "1789679",
    "end": "1795039"
  },
  {
    "text": "what you need to know you can't act on it as written you have to really understand really it's about cohesion",
    "start": "1795039",
    "end": "1800720"
  },
  {
    "text": "separation of concerns and what that means so yeah maybe one of those other terms",
    "start": "1800720",
    "end": "1806159"
  },
  {
    "text": "would have been better it was based on cohesion in the first place anyway could have stuck with that",
    "start": "1806159",
    "end": "1812159"
  },
  {
    "text": "the open close principle i mean it sounds simply enough but again now you have to start looking at",
    "start": "1812480",
    "end": "1818480"
  },
  {
    "text": "historical context and even bob martin actually changed the meaning of it from what bertrand mayer",
    "start": "1818480",
    "end": "1824399"
  },
  {
    "text": "originally meant uh particularly he was talking about um bertrand mayor was talking about not",
    "start": "1824399",
    "end": "1829520"
  },
  {
    "text": "just classes and objects but functions and modules and all sorts of entities but",
    "start": "1829520",
    "end": "1835360"
  },
  {
    "text": "bob martin was just talking about classes here and just talk about class hierarchies really",
    "start": "1835360",
    "end": "1841039"
  },
  {
    "text": "so we have to dig into it to really really get out of it and then the whole thing about",
    "start": "1841039",
    "end": "1846399"
  },
  {
    "text": "um not um not publishing prematurely",
    "start": "1846399",
    "end": "1852480"
  },
  {
    "text": "well most people missed that completely i did until i'd watched um cleveland's",
    "start": "1852480",
    "end": "1858080"
  },
  {
    "text": "talk on it so yeah could be better named",
    "start": "1858080",
    "end": "1863600"
  },
  {
    "text": "similarly list cross-substitution principle we've said before yes named after a person that never really helps",
    "start": "1863600",
    "end": "1869519"
  },
  {
    "text": "um okay it's got the word substitution in there we know it's to do with substitutability but",
    "start": "1869519",
    "end": "1874880"
  },
  {
    "text": "what what makes it list of substitutability what's the difference now you have to",
    "start": "1874880",
    "end": "1880000"
  },
  {
    "text": "just have to know and even the people that do know often get it wrong so",
    "start": "1880000",
    "end": "1886080"
  },
  {
    "text": "yeah not very good name again an interface segregation principle it's not bad as a name in",
    "start": "1886080",
    "end": "1894320"
  },
  {
    "text": "that it's misleading it's just unnecessarily grand i think",
    "start": "1894320",
    "end": "1899360"
  },
  {
    "text": "for a very simple idea that's just the derivation of another principle anyway so",
    "start": "1899360",
    "end": "1905360"
  },
  {
    "text": "not so bad but could be better and then the dependency conversion",
    "start": "1905360",
    "end": "1910640"
  },
  {
    "text": "principle quite apart from the fact that it's very easy to say the definitive injection principle",
    "start": "1910640",
    "end": "1916000"
  },
  {
    "text": "it's another one that almost obfuscates what it actually means you could just say program to an interface",
    "start": "1916000",
    "end": "1922720"
  },
  {
    "text": "and it will tell you what you need to know okay it doesn't quite get at the why",
    "start": "1922720",
    "end": "1928080"
  },
  {
    "text": "but dependency version is even further away there's an even bigger problem with it",
    "start": "1928080",
    "end": "1933120"
  },
  {
    "text": "and anyone know what these are",
    "start": "1933120",
    "end": "1937039"
  },
  {
    "text": "so john's saying to to flip what you can see i think with his hand gestures yeah so glasses that",
    "start": "1940480",
    "end": "1947039"
  },
  {
    "text": "you can wear that that flip um your your vision",
    "start": "1947039",
    "end": "1952159"
  },
  {
    "text": "um the question is why would you wear these and the idea is that",
    "start": "1952159",
    "end": "1958720"
  },
  {
    "text": "um as you probably know you know are wired to our brain upside down so the brain actually sees the world upside",
    "start": "1958720",
    "end": "1964880"
  },
  {
    "text": "down to begin with and the claim is for the first few days of our lives we see the world upside down",
    "start": "1964880",
    "end": "1970720"
  },
  {
    "text": "until the brain sort of works it out corrects and flips it and for the rest",
    "start": "1970720",
    "end": "1976480"
  },
  {
    "text": "of our lives we see the road the right way up until we put these things on",
    "start": "1976480",
    "end": "1982960"
  },
  {
    "text": "we see it upside down again but after a couple of days of doing that it flips again",
    "start": "1982960",
    "end": "1989840"
  },
  {
    "text": "it's a really weird phenomenon but apparently it's true i've never tried it i think you have to be quite dedicated to wear these things for a couple of",
    "start": "1989840",
    "end": "1995600"
  },
  {
    "text": "days but as an experiment it's really fascinating the problem is that",
    "start": "1995600",
    "end": "2001840"
  },
  {
    "text": "as that bears out what inversion actually means means it's in a context inverted",
    "start": "2001840",
    "end": "2007519"
  },
  {
    "text": "compared to what if you're inverting the upside down world now it's the right way up",
    "start": "2007519",
    "end": "2012880"
  },
  {
    "text": "with dependency inversion if you're inverting what you have a dependency on but the",
    "start": "2012880",
    "end": "2019120"
  },
  {
    "text": "idea was that we all depended on concrete implementations mr theory",
    "start": "2019120",
    "end": "2024640"
  },
  {
    "text": "and we should invert that and depend on the the abstract implementation instead there's a little bit more to it but",
    "start": "2024640",
    "end": "2030880"
  },
  {
    "text": "it's changing what we were doing to this new thing inverting it but if we're now doing that as a matter",
    "start": "2030880",
    "end": "2037360"
  },
  {
    "text": "of course if we invert it we're going to go back to the old ways so it's a problematic name for several",
    "start": "2037360",
    "end": "2044480"
  },
  {
    "text": "reasons and unnecessarily so there's just a really simple idea within there that could be better named",
    "start": "2044480",
    "end": "2051760"
  },
  {
    "text": "so that was naming what about this idea of return internal",
    "start": "2051760",
    "end": "2058320"
  },
  {
    "text": "redundancy is that there's a big part of kathleen's talk um yeah as he said there's just a couple of",
    "start": "2058320",
    "end": "2064878"
  },
  {
    "text": "ideas really there may be three ideas for the push uh spread out across these five different",
    "start": "2064879",
    "end": "2070079"
  },
  {
    "text": "principles so is that a problem",
    "start": "2070079",
    "end": "2077358"
  },
  {
    "text": "not necessarily sometimes you need to just explain things a different way or in a different",
    "start": "2077359",
    "end": "2082560"
  },
  {
    "text": "context before it really clicks or sometimes it's not obvious that this thing that applied over here also applies over there",
    "start": "2082560",
    "end": "2088878"
  },
  {
    "text": "so i don't necessarily have a problem with that um",
    "start": "2088879",
    "end": "2094720"
  },
  {
    "text": "the other problems may be but but this one i don't know if you look at",
    "start": "2094720",
    "end": "2101440"
  },
  {
    "text": "kevlin's fluid principles i would say they have even more of this problem so",
    "start": "2101440",
    "end": "2106560"
  },
  {
    "text": "maybe we should be be careful what we're complaining about um but yeah you could you could actually list these much more",
    "start": "2106560",
    "end": "2112800"
  },
  {
    "text": "simply i would say all right what about",
    "start": "2112800",
    "end": "2118720"
  },
  {
    "text": "the fact that they're updated or some of them at least they're outdated we already looked a little bit",
    "start": "2118720",
    "end": "2124560"
  },
  {
    "text": "the open close principle particularly the closed for modification part it's open for extension and closed",
    "start": "2124560",
    "end": "2131520"
  },
  {
    "text": "for modification and as we said you know in the historical context of the 80s",
    "start": "2131520",
    "end": "2137680"
  },
  {
    "text": "so that doesn't really apply anymore in fact since then we've had the agile revolution where we're all about embracing change so",
    "start": "2137680",
    "end": "2144960"
  },
  {
    "text": "i agree this part is outdated but that's not the only interpretation",
    "start": "2144960",
    "end": "2150480"
  },
  {
    "text": "of it so maybe it doesn't belong in there as a dedicated principle because the main",
    "start": "2150480",
    "end": "2157920"
  },
  {
    "text": "part's outdated and maybe even misleading but the part about",
    "start": "2157920",
    "end": "2163440"
  },
  {
    "text": "you know premature publishing as a little warning as an aside that's",
    "start": "2163440",
    "end": "2168480"
  },
  {
    "text": "fine so um yeah i mostly agree with him on this one",
    "start": "2168480",
    "end": "2173520"
  },
  {
    "text": "the dependency inversion principle well as we just said you know it's a reaction to the situation that was",
    "start": "2173520",
    "end": "2178880"
  },
  {
    "text": "around at the time doesn't really apply anymore at least don't worry that way",
    "start": "2178880",
    "end": "2185599"
  },
  {
    "text": "describe it in a clearer less ambiguous way so",
    "start": "2185760",
    "end": "2190880"
  },
  {
    "text": "i think the naming is outdated but maybe not the the principle um although there is another way that",
    "start": "2190880",
    "end": "2197040"
  },
  {
    "text": "you could say that the dependency inversion principle is outdated and that's uh",
    "start": "2197040",
    "end": "2202079"
  },
  {
    "text": "um we don't always depend on",
    "start": "2202079",
    "end": "2207520"
  },
  {
    "text": "interfaces now well i imagine a lot of people here are c plus plus developers",
    "start": "2207520",
    "end": "2213440"
  },
  {
    "text": "this whole idea of everything being an interface is not a big thing in c plus plus we use interfaces or abstract based",
    "start": "2213440",
    "end": "2219839"
  },
  {
    "text": "classes but not so much as say in the java or c-sharp world i think even they are",
    "start": "2219839",
    "end": "2225599"
  },
  {
    "text": "changing there's this big push towards um value oriented programming",
    "start": "2225599",
    "end": "2231359"
  },
  {
    "text": "so maybe this is becoming a little more dated anyway the underlying idea is about dependency",
    "start": "2231359",
    "end": "2237119"
  },
  {
    "text": "management that's still very valuable but we don't necessarily do it through interfaces",
    "start": "2237119",
    "end": "2243280"
  },
  {
    "text": "as much anymore so we're maybe i mean depending on which community you're in",
    "start": "2243280",
    "end": "2249520"
  },
  {
    "text": "we are maybe in a transition period away from this sort of thing or maybe we're already there",
    "start": "2249520",
    "end": "2254720"
  },
  {
    "text": "so yeah there's some truth in that as well",
    "start": "2254720",
    "end": "2258720"
  },
  {
    "text": "okay i miss those bits yeah about dependency management",
    "start": "2261760",
    "end": "2268240"
  },
  {
    "text": "okay another one is that some of these are language specific",
    "start": "2268240",
    "end": "2274800"
  },
  {
    "text": "and most of them were formulated in the context of c plus plus ironically even though they're mostly applied",
    "start": "2274800",
    "end": "2280480"
  },
  {
    "text": "in java and c sharp particularly risk of substitution principle we think",
    "start": "2280480",
    "end": "2287280"
  },
  {
    "text": "of it as being about inheritance hierarchies does it apply to dynamic languages well now we know what it's really about",
    "start": "2287280",
    "end": "2294079"
  },
  {
    "text": "substitutability and preserving contracts we could say well it definitely applies you know if you've",
    "start": "2294079",
    "end": "2300320"
  },
  {
    "text": "got something that looks like a duck and walks like a duck but doesn't um obey the contracts of a duck",
    "start": "2300320",
    "end": "2307920"
  },
  {
    "text": "is it still a duck yeah i think lsp still applies even to dynamic languages that's fine",
    "start": "2307920",
    "end": "2314800"
  },
  {
    "text": "um dependency inversion principle where we talked a bit about how we're moving away from",
    "start": "2314800",
    "end": "2321359"
  },
  {
    "text": "overuse of interfaces or heavy use of interfaces as being our main way of",
    "start": "2321359",
    "end": "2326400"
  },
  {
    "text": "dealing with dependencies so that's not so much language specific as",
    "start": "2326400",
    "end": "2333599"
  },
  {
    "text": "more sort of paradigm specific so yeah it's debatable but i think let's",
    "start": "2333599",
    "end": "2338720"
  },
  {
    "text": "say c plus plus maybe a little bit further ahead of the curve there and isp interface segregation principle",
    "start": "2338720",
    "end": "2344480"
  },
  {
    "text": "same thing really but when i forgot that again yeah",
    "start": "2344480",
    "end": "2351359"
  },
  {
    "text": "sorry all right we talked about paradigms are",
    "start": "2352720",
    "end": "2358720"
  },
  {
    "text": "they just oo specific and they are painted as",
    "start": "2358720",
    "end": "2364000"
  },
  {
    "text": "object-oriented design principles something should be a fair criticism and in particular",
    "start": "2364000",
    "end": "2370160"
  },
  {
    "text": "functional programmers often say oh yeah we don't we don't need the solid principles there are no everything",
    "start": "2370160",
    "end": "2375359"
  },
  {
    "text": "you know we we take care of all that ourselves anyway is that really the case",
    "start": "2375359",
    "end": "2381440"
  },
  {
    "text": "may be possibly you could argue that isp and dip the heavily interface based",
    "start": "2381440",
    "end": "2388320"
  },
  {
    "text": "ones are less relevant although when i brought this up at the accu conference somebody pointed out",
    "start": "2388320",
    "end": "2393359"
  },
  {
    "text": "that type classes you can consider in a similar vein to interfaces",
    "start": "2393359",
    "end": "2399440"
  },
  {
    "text": "uh still can apply there something that's true",
    "start": "2399440",
    "end": "2404320"
  },
  {
    "text": "ocp i think still applies to the data model again in the limited way that it does still apply at all",
    "start": "2404480",
    "end": "2411280"
  },
  {
    "text": "and srp i mean that always applies",
    "start": "2411280",
    "end": "2416400"
  },
  {
    "text": "you could argue that most functional programmers almost get that for free because they're boiling everything down",
    "start": "2416400",
    "end": "2422480"
  },
  {
    "text": "to simple functions but you still have to think about it you can still write a a function that just implements too much",
    "start": "2422480",
    "end": "2429760"
  },
  {
    "text": "and you need to split things out and compose it you've got better tools for doing it but you still need to think about it",
    "start": "2429760",
    "end": "2436640"
  },
  {
    "text": "an msp well it still applies to any sort of substitutable types",
    "start": "2436960",
    "end": "2442640"
  },
  {
    "text": "so again you know things like type classes but also uh type erasure",
    "start": "2442640",
    "end": "2447920"
  },
  {
    "text": "um concepts in c plus um or any form of",
    "start": "2447920",
    "end": "2453359"
  },
  {
    "text": "polymorphism not just dynamic polymorphism this applies to as we said it actually",
    "start": "2453359",
    "end": "2459440"
  },
  {
    "text": "was formulated in the context of abstract data types not even in the first place so",
    "start": "2459440",
    "end": "2465359"
  },
  {
    "text": "yeah mostly it still applies i mean maybe you do get more of it just by following normal functional",
    "start": "2465359",
    "end": "2471440"
  },
  {
    "text": "programming practices but it still applies",
    "start": "2471440",
    "end": "2476319"
  },
  {
    "text": "now when i did this at the acc conference we had a longer session",
    "start": "2477760",
    "end": "2483760"
  },
  {
    "text": "i did have a little bit reserved in the middle for sort of more open discussion um",
    "start": "2483760",
    "end": "2490160"
  },
  {
    "text": "i still got about 10 to 15 minutes more slides so",
    "start": "2490160",
    "end": "2495200"
  },
  {
    "text": "i think we'll skip this for now and if we have time we'll come back at the end to see what other people",
    "start": "2495200",
    "end": "2500880"
  },
  {
    "text": "people's thoughts are on on those problems but i'm going to carry on for now to",
    "start": "2500880",
    "end": "2506319"
  },
  {
    "text": "the the second half of my talk solid revisited revisited i promised that slide maybe it should now",
    "start": "2506319",
    "end": "2512319"
  },
  {
    "text": "be revisited we visited we visited but this is focusing more on that subtitle",
    "start": "2512319",
    "end": "2518480"
  },
  {
    "text": "uh the state of the matter i said it was a play on words this is the play",
    "start": "2518480",
    "end": "2523599"
  },
  {
    "text": "so we talked about the fluid principles kevlin's alternate set of principles",
    "start": "2523599",
    "end": "2529359"
  },
  {
    "text": "uh another play on words i also found the liquid principles",
    "start": "2529359",
    "end": "2534400"
  },
  {
    "text": "in a blog post so one thing you can say about both of these is they're not drying",
    "start": "2534400",
    "end": "2540000"
  },
  {
    "text": "don't repeat yourself we didn't actually look what the fluid principles were let's do that now",
    "start": "2540000",
    "end": "2546560"
  },
  {
    "text": "so the f in fluid is functional so what we just said a moment ago that",
    "start": "2546560",
    "end": "2553359"
  },
  {
    "text": "if you're following functional programming practices you tend to be getting a lot of the the benefits of the solid principles anyway",
    "start": "2553359",
    "end": "2560079"
  },
  {
    "text": "so yeah i tend to agree with that anyway for other reasons as well",
    "start": "2560079",
    "end": "2567359"
  },
  {
    "text": "then l for loose as in loose coupling this is sort of the single responsibility principle or part of it",
    "start": "2567359",
    "end": "2574480"
  },
  {
    "text": "so yeah that was always going to be the most important principle so you've got that now that's good",
    "start": "2574480",
    "end": "2580880"
  },
  {
    "text": "then we get unit testable and you sometimes hear people say",
    "start": "2580880",
    "end": "2586319"
  },
  {
    "text": "particularly they're doing tdd that by driving my code from tests",
    "start": "2586319",
    "end": "2592960"
  },
  {
    "text": "um i actually end up with something that's more testable which sounds like a circular argument but what they really",
    "start": "2592960",
    "end": "2598000"
  },
  {
    "text": "mean is that code that is more testable tends to have all of those desirable design",
    "start": "2598000",
    "end": "2604400"
  },
  {
    "text": "principles baked in which is why the solid principles are associated with testing in the first place very often",
    "start": "2604400",
    "end": "2610480"
  },
  {
    "text": "they sort of go hand in hand particularly that loose coupling side of it so",
    "start": "2610480",
    "end": "2616319"
  },
  {
    "text": "yeah by looking at from that way round how do i make my code more unit testable you often get a lot of these principles",
    "start": "2616319",
    "end": "2622400"
  },
  {
    "text": "sort of dropping out of that the downside is i sort of have to already know them up front",
    "start": "2622400",
    "end": "2628800"
  },
  {
    "text": "that that's what the problem is but okay i'll give him that and then",
    "start": "2628800",
    "end": "2634480"
  },
  {
    "text": "introspective interesting one i think it is a really powerful",
    "start": "2634480",
    "end": "2639760"
  },
  {
    "text": "way of of writing code but not saying we have a lot of support for in most mainstream languages yet this could be",
    "start": "2639760",
    "end": "2646560"
  },
  {
    "text": "sort of the next generation of how we write code um",
    "start": "2646560",
    "end": "2652079"
  },
  {
    "text": "and some languages do already have better support for particularly compile time reflection",
    "start": "2652079",
    "end": "2657280"
  },
  {
    "text": "and that sort of thing um but i'm not sure quite there yet so i don't know if i'll give him that one",
    "start": "2657280",
    "end": "2664160"
  },
  {
    "text": "at the last one he was definitely reaching for that final letter and i'm not sure that item potent",
    "start": "2664160",
    "end": "2671359"
  },
  {
    "text": "is really a good design principle it has its uses in some places but yeah i think",
    "start": "2671359",
    "end": "2676640"
  },
  {
    "text": "that one i think it just needed to complete the acronym so i still think that this was",
    "start": "2676640",
    "end": "2683119"
  },
  {
    "text": "mostly meant plug-in cheek even if there's some serious stuff behind it as i said it's quite useful",
    "start": "2683119",
    "end": "2689599"
  },
  {
    "text": "to just pick some letters in an acronym and see what design principles you can come up with",
    "start": "2689599",
    "end": "2695119"
  },
  {
    "text": "and how important they are to you you might might discover something",
    "start": "2695119",
    "end": "2700000"
  },
  {
    "text": "have a quick look at the liquid principles these are definitely meant to be a joke or you can consider an empty",
    "start": "2700640",
    "end": "2707760"
  },
  {
    "text": "pattern so we want large files long classes and methods interdependencies",
    "start": "2707760",
    "end": "2715359"
  },
  {
    "text": "all the codes are quagmire undocumented illegible and of course duplicate code",
    "start": "2715359",
    "end": "2721599"
  },
  {
    "text": "and of course duplicate code so yeah as i said definitely not dry",
    "start": "2721599",
    "end": "2727838"
  },
  {
    "text": "we laugh but actually how much code do we work with actually follows all of these principles",
    "start": "2729680",
    "end": "2736160"
  },
  {
    "text": "so it's good to know what we're running away from so",
    "start": "2737440",
    "end": "2743040"
  },
  {
    "text": "this is obviously a play on like states of matter hence my subtitle",
    "start": "2743040",
    "end": "2748240"
  },
  {
    "text": "although technically fluid's not actually a state because liquids and gases are fluids",
    "start": "2748240",
    "end": "2754960"
  },
  {
    "text": "what about the gas principles i haven't seen anyone actually proposing but i just think maybe like an overuse",
    "start": "2754960",
    "end": "2760960"
  },
  {
    "text": "of getters and setters do it maybe you can come up something better",
    "start": "2760960",
    "end": "2766240"
  },
  {
    "text": "um but of course we've also got plasma that's a promising one nice little rich set of letters there in",
    "start": "2766240",
    "end": "2773119"
  },
  {
    "text": "fact we'll come back to that but you can go further there's loads of exotic states of matter",
    "start": "2773119",
    "end": "2778319"
  },
  {
    "text": "and i looked them all up on wikipedia i didn't get very far coming up with the bo einstein",
    "start": "2778319",
    "end": "2784079"
  },
  {
    "text": "condensate principles but maybe you'll do better than me but let's go back to plasma",
    "start": "2784079",
    "end": "2790319"
  },
  {
    "text": "this is my attempt at coming up with a set of principles that conforms to letters that already there so",
    "start": "2790319",
    "end": "2795760"
  },
  {
    "text": "yeah it's uh not necessarily an absolute list but i think it's quite",
    "start": "2795760",
    "end": "2801280"
  },
  {
    "text": "quite good so we start with persistence",
    "start": "2801280",
    "end": "2806720"
  },
  {
    "text": "and what i mean by that is not like writing to a file or database or or",
    "start": "2806720",
    "end": "2811839"
  },
  {
    "text": "just like keep going when when things get tough but like persistent data structures",
    "start": "2811839",
    "end": "2818000"
  },
  {
    "text": "and if you're not familiar with persistent data structures think of something like a simple binary tree for",
    "start": "2818000",
    "end": "2823280"
  },
  {
    "text": "example um say we want to add a new load like that number four",
    "start": "2823280",
    "end": "2828640"
  },
  {
    "text": "in orange down there in a classic binary tree we'll just like mutate the parent mode and add it as a",
    "start": "2828640",
    "end": "2834640"
  },
  {
    "text": "as a reference but if instead you just copy",
    "start": "2834640",
    "end": "2840160"
  },
  {
    "text": "all of the the nodes up to the root from there and have each of those refer back to the original tree",
    "start": "2840160",
    "end": "2846559"
  },
  {
    "text": "then now you've got two trees that have shared common state so the original tree persists",
    "start": "2846559",
    "end": "2854160"
  },
  {
    "text": "where the name comes from but you have a whole new tree as well that looks like a complete tree",
    "start": "2854160",
    "end": "2860319"
  },
  {
    "text": "so this is a really useful way of",
    "start": "2860319",
    "end": "2864720"
  },
  {
    "text": "doing immutable data structures while having all of the conveniences of",
    "start": "2865599",
    "end": "2870960"
  },
  {
    "text": "data structures that we know and you can do this with lots of different types of data structures so if you really want to push",
    "start": "2870960",
    "end": "2876319"
  },
  {
    "text": "immutability as far as you can go you're going to need to use persistent data structures so it's a really useful thing to to know about",
    "start": "2876319",
    "end": "2884160"
  },
  {
    "text": "but really this principle is a proxy for immutability strive for mutability where you can and",
    "start": "2884160",
    "end": "2890400"
  },
  {
    "text": "obviously there's gonna be places you do need mutability but only use it there not just by default as most languages",
    "start": "2890400",
    "end": "2897280"
  },
  {
    "text": "that we use that offer is the key",
    "start": "2897280",
    "end": "2902640"
  },
  {
    "text": "local reasoning is my next one and this is another one that's",
    "start": "2903680",
    "end": "2910079"
  },
  {
    "text": "very much comes from the functional programming world that's not limited to it and it's also tied in with",
    "start": "2910079",
    "end": "2915119"
  },
  {
    "text": "immutability again but think of an example like this so this is some perhaps c plus plus code or even c",
    "start": "2915119",
    "end": "2922000"
  },
  {
    "text": "code um you've got a an enum for color",
    "start": "2922000",
    "end": "2927359"
  },
  {
    "text": "if you don't understand the spelling that's that's what it says and to initialize it we actually need to",
    "start": "2927359",
    "end": "2934960"
  },
  {
    "text": "call some function to to work out some condition whether it's going to be yellow or white",
    "start": "2934960",
    "end": "2940480"
  },
  {
    "text": "in this case it's oops it seems simple enough on the surface sort of code you'll see all over",
    "start": "2940480",
    "end": "2946160"
  },
  {
    "text": "the place to not think anything of it's got quality problems considering that",
    "start": "2946160",
    "end": "2951680"
  },
  {
    "text": "first of all in terms of immutability if you can't make that color variable const",
    "start": "2951680",
    "end": "2957680"
  },
  {
    "text": "even if we're not going to change it after that point because we want to change it so that we",
    "start": "2957680",
    "end": "2962720"
  },
  {
    "text": "can assign to it and because of that in order to assign it you need to use an assignment",
    "start": "2962720",
    "end": "2968559"
  },
  {
    "text": "which is a side effect and in this case it's an enum but if it was a more complex data structure we might have to",
    "start": "2968559",
    "end": "2974800"
  },
  {
    "text": "initialize it in a temporary state and then assign a new state to afterwards there may be a performance implication as well",
    "start": "2974800",
    "end": "2981440"
  },
  {
    "text": "so it's actually not that good a pattern what we really wanted to do if we had an expression oriented version of c plus",
    "start": "2981440",
    "end": "2987520"
  },
  {
    "text": "plus in this case then we could write something like this where the if was an expression",
    "start": "2987520",
    "end": "2993200"
  },
  {
    "text": "and then that just evaluates to the value that we can then use to initialize our variable",
    "start": "2993200",
    "end": "2998720"
  },
  {
    "text": "now we can make it const but we can also use type inference here as well",
    "start": "2998720",
    "end": "3004960"
  },
  {
    "text": "so we've got all these additional benefits there's no side effects it's great of course we can do this today in",
    "start": "3004960",
    "end": "3012640"
  },
  {
    "text": "surplus plus and many other languages using the ternary operator so",
    "start": "3012640",
    "end": "3017680"
  },
  {
    "text": "we can do it to a limited extent but that doesn't scale very well",
    "start": "3017680",
    "end": "3022720"
  },
  {
    "text": "uh we really need a feature like this that i mean functional programming languages tend to",
    "start": "3022720",
    "end": "3028000"
  },
  {
    "text": "look like this but you can fake it using",
    "start": "3028000",
    "end": "3033280"
  },
  {
    "text": "um immediately invoked lambda expressions so you wrap the expression in a lambda",
    "start": "3033280",
    "end": "3039920"
  },
  {
    "text": "that you immediately invoked and return out of it and that way you can",
    "start": "3039920",
    "end": "3045440"
  },
  {
    "text": "i meant to put the the slide up that had that on it but that way you get all of the benefits you have here",
    "start": "3045440",
    "end": "3050960"
  },
  {
    "text": "in the language that we have today so immediately vote lander expressions give you fake expression oriented",
    "start": "3050960",
    "end": "3057680"
  },
  {
    "text": "programming you heard it here first what's this got to do with local reasoning",
    "start": "3057680",
    "end": "3063520"
  },
  {
    "text": "well the reason i brought this up is because in the mutable version to reason about the value of that variable",
    "start": "3063520",
    "end": "3071680"
  },
  {
    "text": "you need to look at every line of code that it goes through because it can change any point",
    "start": "3071680",
    "end": "3077200"
  },
  {
    "text": "and until you've looked at the line of code you don't know if it hasn't changed that could potentially be the whole program",
    "start": "3077200",
    "end": "3082720"
  },
  {
    "text": "and it very quickly gets so difficult to track that it's tall intense and purpose is impossible",
    "start": "3082720",
    "end": "3089200"
  },
  {
    "text": "so we give up we think well the value is something somewhere i don't know um",
    "start": "3089200",
    "end": "3094400"
  },
  {
    "text": "i don't know if there's gonna be a fretting problem or whatever we can't reason about it anymore",
    "start": "3094400",
    "end": "3100079"
  },
  {
    "text": "local reasoning in this case means well we can see the variable being",
    "start": "3100079",
    "end": "3105119"
  },
  {
    "text": "initialized we know now we now know what the value is for the rest of its lifetime",
    "start": "3105119",
    "end": "3110800"
  },
  {
    "text": "well apart from anybody being malicious with contrast but but that's local reasoning and it",
    "start": "3110800",
    "end": "3116319"
  },
  {
    "text": "applies in different ways it's just about being able to look at a line of code and reason about everything to do with that bit of code",
    "start": "3116319",
    "end": "3122319"
  },
  {
    "text": "rather than having to consider every other part of the program as well",
    "start": "3122319",
    "end": "3127040"
  },
  {
    "text": "the first a is for algorithms and if you haven't seen sean parent's c",
    "start": "3129280",
    "end": "3135359"
  },
  {
    "text": "plus plus seasonings talk where it talks about no role loops then then you should do",
    "start": "3135359",
    "end": "3140480"
  },
  {
    "text": "um it's a bit c plus plus specific so if you're not a super fast developer we should watch it anyway because it's",
    "start": "3140480",
    "end": "3145920"
  },
  {
    "text": "really good but you may not get as much out of it but the point is rather than writing raw",
    "start": "3145920",
    "end": "3151200"
  },
  {
    "text": "loops use an algorithm that more clearly expresses the intention of what you're going to do",
    "start": "3151200",
    "end": "3157599"
  },
  {
    "text": "that saves you from all the complexity of the loop and loops have this ability to look really",
    "start": "3157599",
    "end": "3163599"
  },
  {
    "text": "simple until you realize all the things you missed that's why algorithms",
    "start": "3163599",
    "end": "3168720"
  },
  {
    "text": "that have already been written and tested by experts are almost always the best approach so learn your algorithms",
    "start": "3168720",
    "end": "3176960"
  },
  {
    "text": "and if you are into c plus after watching this go and watch connell heikster's algorithm intuition talks",
    "start": "3176960",
    "end": "3183520"
  },
  {
    "text": "where he takes it to the next level so use algorithms",
    "start": "3183520",
    "end": "3189440"
  },
  {
    "text": "never get to simplicity so i said that i agreed that this was probably the really the underlying",
    "start": "3189520",
    "end": "3195200"
  },
  {
    "text": "central concept and i did that whole talk on it seeking simplicity",
    "start": "3195200",
    "end": "3201040"
  },
  {
    "text": "but that talk was actually based on a talk by well not based on but drew a lot of ideas from a talk by rich hickey",
    "start": "3201040",
    "end": "3207599"
  },
  {
    "text": "made easy if you watch that one too that's really good and one of the things i stole from him was these illustrations",
    "start": "3207599",
    "end": "3215680"
  },
  {
    "text": "to illustrate what the the etymology of simple and complex",
    "start": "3215680",
    "end": "3221040"
  },
  {
    "text": "is from uh from the original latin a simplex",
    "start": "3221040",
    "end": "3226400"
  },
  {
    "text": "is something with only one fold or braid whereas a complex it's something funny",
    "start": "3226400",
    "end": "3231440"
  },
  {
    "text": "folds or braids so really it's just to do with the way things cross over or interweave with",
    "start": "3231440",
    "end": "3236880"
  },
  {
    "text": "each other which makes sense if you think about it now if you look at",
    "start": "3236880",
    "end": "3242240"
  },
  {
    "text": "the illustration on the left the simple one if you took one of those strands so from the bottom and they did",
    "start": "3242240",
    "end": "3249280"
  },
  {
    "text": "follow it to the top absolutely trivial no problem at all but try to do the same with the one on the",
    "start": "3249280",
    "end": "3254720"
  },
  {
    "text": "right i'm obviously you can do it if you're looking closely enough you'll have to carefully follow it around to see where",
    "start": "3254720",
    "end": "3260319"
  },
  {
    "text": "it ends up and that's just with four strands this gets to this cognitive limit that",
    "start": "3260319",
    "end": "3266720"
  },
  {
    "text": "we have um you may have heard the the uh the magic number seven plus or minus two",
    "start": "3266720",
    "end": "3273119"
  },
  {
    "text": "like the limits of how many things we can hold in our brain at once it's related to that there's only a small",
    "start": "3273119",
    "end": "3278319"
  },
  {
    "text": "number of things that we can hold in our brains for focus on at once and once we blow that limit well we the",
    "start": "3278319",
    "end": "3284400"
  },
  {
    "text": "best we can do is resort to things like chunking which in programming call abstraction",
    "start": "3284400",
    "end": "3290839"
  },
  {
    "text": "so things that cross over are the things that have complexity",
    "start": "3290839",
    "end": "3296559"
  },
  {
    "text": "and in our code that implies things like as we already said mutable reachability",
    "start": "3296559",
    "end": "3302720"
  },
  {
    "text": "if something is mutable then you have to consider every line of code it interacts with so everything's crossing over",
    "start": "3302720",
    "end": "3308559"
  },
  {
    "text": "threading is the obvious one globals and singletons about any sort of dependency",
    "start": "3308559",
    "end": "3316559"
  },
  {
    "text": "you probably think of more as well i don't have a list in front of me but these are all the things that tend to",
    "start": "3316559",
    "end": "3321839"
  },
  {
    "text": "raise the complexity and if they're not if they're in your code unnecessarily you're relying unnecessarily complexity",
    "start": "3321839",
    "end": "3328480"
  },
  {
    "text": "in your code so reducing that really answers all those other problems",
    "start": "3328480",
    "end": "3334000"
  },
  {
    "text": "you know you're going to reduce coupling because that's complexity unnecessary unnecessarily so",
    "start": "3334000",
    "end": "3340319"
  },
  {
    "text": "if you're dealing with threading make sure you using approaches that make that safer and so on",
    "start": "3340319",
    "end": "3346400"
  },
  {
    "text": "don't use singletons or globals everything drops out of that",
    "start": "3346400",
    "end": "3351920"
  },
  {
    "text": "i think this really it sounds obvious but it's something if you can keep like centrally",
    "start": "3351920",
    "end": "3358240"
  },
  {
    "text": "in your mind that these are the problems will really help you to to write code that just",
    "start": "3358240",
    "end": "3364000"
  },
  {
    "text": "as dan north said fits in your head so i really do think that simplicity is the key to all of this",
    "start": "3364000",
    "end": "3371119"
  },
  {
    "text": "we jump over to the last one abstractions the other way um because it's sort of related that i mentioned a",
    "start": "3372240",
    "end": "3378319"
  },
  {
    "text": "minute ago probably called chunking in psychology terms is basically abstractions in",
    "start": "3378319",
    "end": "3383440"
  },
  {
    "text": "programming terms are you probably familiar with this quote from joel sporsky all non-trivial abstractions to some",
    "start": "3383440",
    "end": "3390319"
  },
  {
    "text": "degree are leaky this is a another slide from that talk",
    "start": "3390319",
    "end": "3395440"
  },
  {
    "text": "on simplicity i've graded some bits out because i think if you take those out it actually makes the statement stronger",
    "start": "3395440",
    "end": "3402480"
  },
  {
    "text": "all abstractions are leaky and i make a a case for that in my other talk about",
    "start": "3402480",
    "end": "3409359"
  },
  {
    "text": "why even things like numbers are early abstractions so there's a consequence to this",
    "start": "3409359",
    "end": "3416079"
  },
  {
    "text": "because abstractions as we said they're our way of dealing with complexity but they're a double-edged sword",
    "start": "3416079",
    "end": "3422720"
  },
  {
    "text": "because if they're leaky and all abstractions are leaky then the thing you're abstracting",
    "start": "3422720",
    "end": "3429119"
  },
  {
    "text": "with gets intermingled with the thing you're attracting you've actually increased the",
    "start": "3429119",
    "end": "3434640"
  },
  {
    "text": "complexity by trying to manage it so that can be problematic",
    "start": "3434640",
    "end": "3441280"
  },
  {
    "text": "and well as george box says all models are wrong but some are useful",
    "start": "3441280",
    "end": "3447119"
  },
  {
    "text": "so yeah all abstractions increase their complexity but some are useful",
    "start": "3447119",
    "end": "3453040"
  },
  {
    "text": "how do we how do we navigate that if it's not a problem you've considered before",
    "start": "3453040",
    "end": "3458839"
  },
  {
    "text": "well it's another slide up all for that talk and it didn't quite come across well but",
    "start": "3458839",
    "end": "3464799"
  },
  {
    "text": "the first step is just to try and keep those abstractions as small and as simple as possible in the first place but but from there",
    "start": "3464799",
    "end": "3471760"
  },
  {
    "text": "we then to go one of two ways and this was sort of my key takeaway from this",
    "start": "3471760",
    "end": "3478480"
  },
  {
    "text": "because either we want what i i'll call a global abstraction and that's that could be something like",
    "start": "3478480",
    "end": "3484319"
  },
  {
    "text": "a language or a standard library or just some really fundamental library",
    "start": "3484319",
    "end": "3489599"
  },
  {
    "text": "that you know everyone's going to rely on and reliability is the key there we can never make it 100",
    "start": "3489599",
    "end": "3496880"
  },
  {
    "text": "um complete or watertight but that should be our aim",
    "start": "3496880",
    "end": "3501920"
  },
  {
    "text": "we want to be be reliable not leaky as much as possible",
    "start": "3501920",
    "end": "3507359"
  },
  {
    "text": "that takes a lot of effort and you'll even then you won't get there the other side is what i call local",
    "start": "3507359",
    "end": "3514160"
  },
  {
    "text": "abstractions think are just going to using your own code base more as an organization unit just to sort of manage that complexity locally",
    "start": "3514160",
    "end": "3521760"
  },
  {
    "text": "very valuable but embrace the fact that they are going to be leaking so",
    "start": "3521760",
    "end": "3527280"
  },
  {
    "text": "keep them shallow don't don't try to have this sort of overarching metaphor",
    "start": "3527280",
    "end": "3532400"
  },
  {
    "text": "in your code base it's just so easy to get sucked into that this means have you ever found yourself debugging maybe even your own",
    "start": "3532400",
    "end": "3539599"
  },
  {
    "text": "code and think why do i have to go down this little whole chain of of cause just to get to the",
    "start": "3539599",
    "end": "3544720"
  },
  {
    "text": "thing that i know is actually there it's because your abstraction is actually complicating the whole thing",
    "start": "3544720",
    "end": "3550400"
  },
  {
    "text": "so we need abstractions but if they're going to be leaky anyway keep them sort of shallow and focused or",
    "start": "3550400",
    "end": "3558079"
  },
  {
    "text": "use existing ones that have been designed to be as complete and watertight as possible",
    "start": "3558079",
    "end": "3564000"
  },
  {
    "text": "so i think this is the best that we can do with attractions to take advantage of them",
    "start": "3564000",
    "end": "3570640"
  },
  {
    "text": "looks like i'm running out of time so i'll say very briefly about modularity but um",
    "start": "3570640",
    "end": "3577599"
  },
  {
    "text": "i should change this from the accu version it was memory safety there i think modularity is a better fit so it fits in better with the separation of",
    "start": "3577599",
    "end": "3584640"
  },
  {
    "text": "concerns idea but um i will leave talking about that in depth",
    "start": "3584640",
    "end": "3591119"
  },
  {
    "text": "and just go to the end and say that all those references i",
    "start": "3591119",
    "end": "3596160"
  },
  {
    "text": "talked about are on my website level of indirection dot com slash refs slash solid.html",
    "start": "3596160",
    "end": "3602960"
  },
  {
    "text": "uh and if you don't remember that i've also got extra level of indirection.com that redirects there of course",
    "start": "3602960",
    "end": "3608720"
  },
  {
    "text": "but that is it so thank you very much [Applause]",
    "start": "3608720",
    "end": "3619369"
  },
  {
    "text": "you",
    "start": "3623280",
    "end": "3625359"
  }
]