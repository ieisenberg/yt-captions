[
  {
    "text": "see a few people still kind of streaming in just a little bit so I will go ahead and kind of start with a little bit of the introductory stuff and what we're",
    "start": "3649",
    "end": "9770"
  },
  {
    "text": "looking at with 7.1 7.2 which you already have and if there's time I'll at",
    "start": "9770",
    "end": "17449"
  },
  {
    "text": "least list the proposed features for c-sharp 7.3 know what I said proposed and I'll show you how to track those so",
    "start": "17449",
    "end": "24499"
  },
  {
    "text": "you know what will and won't get delivered and if there's really time I'm gonna give a brief preview of one",
    "start": "24499",
    "end": "31880"
  },
  {
    "text": "c-sharp eight feature that we're looking really interested to get some feedback on which is non nullable reference types",
    "start": "31880",
    "end": "37660"
  },
  {
    "text": "so if we get that far we'll go into that part important thing here if you have any questions later anything just hit me",
    "start": "37660",
    "end": "43700"
  },
  {
    "text": "on Twitter and I will be happy to try to answer them I'll show you where our repo is and you can write issues there the",
    "start": "43700",
    "end": "50570"
  },
  {
    "text": "really big thing that we're looking at in terms of the language and this is the latest Stack Overflow it's a website or",
    "start": "50570",
    "end": "58580"
  },
  {
    "text": "something you may have heard of a job I don't know if you heard John recently became the first person with 1 million",
    "start": "58580",
    "end": "63710"
  },
  {
    "text": "points for overflow and so I've given up",
    "start": "63710",
    "end": "71270"
  },
  {
    "text": "completely but one thing we like c-sharp is in the top 10 of the most popular",
    "start": "71270",
    "end": "77509"
  },
  {
    "text": "technologies thank you John [Music] another thing that we're very very proud",
    "start": "77509",
    "end": "83060"
  },
  {
    "text": "of is c-sharp is also in the list of most loved technologies c-sharp is one",
    "start": "83060",
    "end": "88130"
  },
  {
    "text": "of two technologies that appear on both lists c-sharp and typescript are the",
    "start": "88130",
    "end": "93770"
  },
  {
    "text": "only two and our mission is to keep C sharp on both of those lists do",
    "start": "93770",
    "end": "98929"
  },
  {
    "text": "everything we can to make it as useful as it can and do everything that we can to make it as enjoyable to use as we can",
    "start": "98929",
    "end": "104380"
  },
  {
    "text": "so let's talk about the idea behind c-sharp point releases is this was controversial and still to some degree",
    "start": "104380",
    "end": "111560"
  },
  {
    "text": "is the short version is why wait to ship cool features so there are three buckets",
    "start": "111560",
    "end": "117709"
  },
  {
    "text": "that we're going to put all the point releases into c-sharp 7.17 - which recently shipped 7/3 which is proposed",
    "start": "117709",
    "end": "125569"
  },
  {
    "text": "and you'll see a 7.4 other things that may ship before 8 so we've got",
    "start": "125569",
    "end": "131720"
  },
  {
    "text": "improvements to local features inferred tuple element names so John talked about tuples I'll show you how",
    "start": "131720",
    "end": "137480"
  },
  {
    "text": "inference rules get a little bit better leading underscores in numeric literals John just requested that an hour ago and",
    "start": "137480",
    "end": "144440"
  },
  {
    "text": "we've already delivered I think I think we're do being very responsive a couple",
    "start": "144440",
    "end": "149989"
  },
  {
    "text": "long requested nice-to-haves the default literal so if you've ever written expressions default of whatever",
    "start": "149989",
    "end": "156260"
  },
  {
    "text": "you can abstract default and async main because everybody doesn't wrong so now",
    "start": "156260",
    "end": "163069"
  },
  {
    "text": "we can just write async main and it'll do the right thing we have a couple smaller two themes that go into the",
    "start": "163069",
    "end": "169700"
  },
  {
    "text": "point releases reference semantics with value types which is kind of a catch-all for a few different features that are",
    "start": "169700",
    "end": "177410"
  },
  {
    "text": "performance related for those times when you want to use Struck's because you don't want to deal with the garbage",
    "start": "177410",
    "end": "182450"
  },
  {
    "text": "collector and so on and so forth but you don't want to copy them because that takes time too so we'll go into a little",
    "start": "182450",
    "end": "188989"
  },
  {
    "text": "bit of how that's going to work and how that shift with 7.2 and the kinds of",
    "start": "188989",
    "end": "194329"
  },
  {
    "text": "things you should look for opportunities when to work with those that's probably going to be the biggest part of the demo here we don't have it yet but is John",
    "start": "194329",
    "end": "202400"
  },
  {
    "text": "kind of alluded to there will be more opportunities for pattern magic may possibly introduce new content or",
    "start": "202400",
    "end": "208910"
  },
  {
    "text": "introduce pattern matching into new statements new places where you can use it and we will almost certainly",
    "start": "208910",
    "end": "215299"
  },
  {
    "text": "introduce new patterns of new ways to check a sum variable for some pattern",
    "start": "215299",
    "end": "222340"
  },
  {
    "text": "with that let's look at the big idea that we wanted to do around the point",
    "start": "222340",
    "end": "227359"
  },
  {
    "text": "releases because this means more effectively shipping a new compiler with",
    "start": "227359",
    "end": "233269"
  },
  {
    "text": "new features in it on a much faster cadence c-sharp 7.0 came out last March",
    "start": "233269",
    "end": "240349"
  },
  {
    "text": "I think it was we've had two releases since then right you may not want to move your codebase that fast to a new",
    "start": "240349",
    "end": "247069"
  },
  {
    "text": "compiler and we understand that so first of all it's going to be off by default no matter what by default when you",
    "start": "247069",
    "end": "254540"
  },
  {
    "text": "upgrade Visual Studio you have seven 15.5 15.4 c-sharp seven point always",
    "start": "254540",
    "end": "262880"
  },
  {
    "text": "still how the language is compiled on your machine ok unless you explicitly",
    "start": "262880",
    "end": "269120"
  },
  {
    "text": "change it you can configure it in Visual Studio using property pages I'll show you in",
    "start": "269120",
    "end": "276690"
  },
  {
    "text": "the IDE supported on all project types whether it be net cord Web projects",
    "start": "276690",
    "end": "283640"
  },
  {
    "text": "console apps or whatever it's all there or you can just edit the CS proj file",
    "start": "283640",
    "end": "289230"
  },
  {
    "text": "I'll show you how to do that as well because there's a one kind of ugly bit",
    "start": "289230",
    "end": "294630"
  },
  {
    "text": "we have in editing it through the property pages that there's a request to",
    "start": "294630",
    "end": "300000"
  },
  {
    "text": "fix but we haven't got there yet we'll use the line version from the command line",
    "start": "300000",
    "end": "307220"
  },
  {
    "text": "and finally what you can do is what we've done to kind of guide you into where things are changing if you happen",
    "start": "309300",
    "end": "316200"
  },
  {
    "text": "to use one of the newer features that you haven't turned on in your project you'll get a little light bulb that says",
    "start": "316200",
    "end": "322070"
  },
  {
    "text": "you can turn this on if you'd like and upgrade your project to a new version a",
    "start": "322070",
    "end": "328100"
  },
  {
    "text": "big thing about this is that now which version of the parser and the language",
    "start": "328100",
    "end": "334050"
  },
  {
    "text": "rules that you use is on a project-by-project basis in your build file so you can upgrade your machine",
    "start": "334050",
    "end": "340440"
  },
  {
    "text": "whenever you want to or whenever you get to depending on your work environment",
    "start": "340440",
    "end": "345480"
  },
  {
    "text": "and you can work with projects at different levels so if you work on an",
    "start": "345480",
    "end": "351630"
  },
  {
    "text": "open-source project and maybe you're not ready to upgrade to 7.2 yet you can",
    "start": "351630",
    "end": "357210"
  },
  {
    "text": "still continue to compile and work against a certain language version or",
    "start": "357210",
    "end": "363720"
  },
  {
    "text": "you can work forward whenever you want so upgrading your machine is different a different step than upgrading your",
    "start": "363720",
    "end": "370200"
  },
  {
    "text": "projects all right so what's in here alright one more little bit on just what",
    "start": "370200",
    "end": "376470"
  },
  {
    "text": "we were thinking in terms of this numbers don't work this way the way we'd like to but what you should really think",
    "start": "376470",
    "end": "382260"
  },
  {
    "text": "of for seven dots like if you're John and you're working on c-sharp in depth is 7.1 and 7.2 our c-sharp 8.0 - - and -",
    "start": "382260",
    "end": "392580"
  },
  {
    "text": "- - what we're doing is we're building c-sharp oh and shipping it a little bit",
    "start": "392580",
    "end": "397770"
  },
  {
    "text": "faster so the standard which John and I both work on the stage it's committee John is the convener",
    "start": "397770",
    "end": "405060"
  },
  {
    "text": "c-sharp five has been submitted to equi so it's going to be the next official standard we're going to work on the C",
    "start": "405060",
    "end": "412150"
  },
  {
    "text": "sharp six official standards doc any day now whenever John reconvenes the",
    "start": "412150",
    "end": "417819"
  },
  {
    "text": "committee seven point one seven point two seven point three however many we do make will not be official standards",
    "start": "417819",
    "end": "425979"
  },
  {
    "text": "documents we will do a 7.0 standard and then the next standard will be seven or will be 8.0 everything that gets",
    "start": "425979",
    "end": "432909"
  },
  {
    "text": "delivered in 71 72 73 will be in the official standard four eight do we think",
    "start": "432909",
    "end": "438340"
  },
  {
    "text": "seven point three is going to be the the last point release I do not have any information that I can share on that so",
    "start": "438340",
    "end": "443979"
  },
  {
    "text": "the the reason that bill gave sort of reasons of small bug fixes to features and small minor themes he forgot to",
    "start": "443979",
    "end": "452229"
  },
  {
    "text": "mention the main reason why they're doing is is to make it really awkward for anyone writing a book on c-sharp seven because you never know when it's",
    "start": "452229",
    "end": "458469"
  },
  {
    "text": "going to be done but you know that was just I would treat that as su-sure of eight - - so you can just stop at seven",
    "start": "458469",
    "end": "464379"
  },
  {
    "text": "and then pick everything else up but at least you can look at it and make sure your guidance still works that's what",
    "start": "464379",
    "end": "470919"
  },
  {
    "text": "that's what I would recommend now of course I write for the web so I can just like whatever I want a bit late now yes",
    "start": "470919",
    "end": "477360"
  },
  {
    "text": "all right so the key thing here is we",
    "start": "477360",
    "end": "483099"
  },
  {
    "text": "want you to choose your own cadence we're going to ship when it's ready take",
    "start": "483099",
    "end": "489250"
  },
  {
    "text": "the point releases they do have full support they are releases they are not C TPS they're not betas they are not",
    "start": "489250",
    "end": "494710"
  },
  {
    "text": "previews they are releases the same guarantees apply we intend to not make",
    "start": "494710",
    "end": "500740"
  },
  {
    "text": "breaking changes or if we do we intend to make them extremely carefully and",
    "start": "500740",
    "end": "506550"
  },
  {
    "text": "they're completely totally supported they will not stop being supported just because we shipped a new version stay",
    "start": "506550",
    "end": "513190"
  },
  {
    "text": "with the whole numbers if you prefer it depends on what your your cadence that you want if you like writing default",
    "start": "513190",
    "end": "519130"
  },
  {
    "text": "cancellation token then you view the point OBU but you really really want default",
    "start": "519130",
    "end": "524949"
  },
  {
    "text": "literals right okay so what shift in seven point one okay does anybody upgrade it already - seven point one",
    "start": "524949",
    "end": "531459"
  },
  {
    "text": "other than Steve who I know has okay about 7.2 okay so what we saw on",
    "start": "531459",
    "end": "539760"
  },
  {
    "text": "7.1 async main so we can now declare a task returning or task of intra turning",
    "start": "539760",
    "end": "545160"
  },
  {
    "text": "main method so then you can await inside that which gives language support for",
    "start": "545160",
    "end": "550320"
  },
  {
    "text": "async console applications why did we do that we found a whole lot of things on",
    "start": "550320",
    "end": "555330"
  },
  {
    "text": "github where we would see people do some async method dot wait or something like that and it's like cool when I just make",
    "start": "555330",
    "end": "561750"
  },
  {
    "text": "this easy default literals as John mentioned if you really like typing",
    "start": "561750",
    "end": "567000"
  },
  {
    "text": "default cancellation token or default cancellation token of T that's fun if not just type default inferred tuple",
    "start": "567000",
    "end": "575190"
  },
  {
    "text": "element names we found a lot of typical uses for tuples would construct a tuple",
    "start": "575190",
    "end": "580740"
  },
  {
    "text": "and go a colon a b : b c : c some kind of dumb we knew the names why not just",
    "start": "580740",
    "end": "586080"
  },
  {
    "text": "just use them 7.2 which will be more of the demos reference semantics for value",
    "start": "586080",
    "end": "592830"
  },
  {
    "text": "types primarily performance-based so there are two big things about this feature first of all if you're using",
    "start": "592830",
    "end": "599430"
  },
  {
    "text": "asp.net core you're gonna love this feature even if you never use it because the asp.net core team did a lot of work",
    "start": "599430",
    "end": "606900"
  },
  {
    "text": "to speed things up inside core by leveraging these features for a lot of the things when they're copying between",
    "start": "606900",
    "end": "612780"
  },
  {
    "text": "layers and the network stack they're not copying anymore here's a reference to a hunk of memory look at it differently move on so we minimize copying with",
    "start": "612780",
    "end": "620910"
  },
  {
    "text": "reference semantics where necessary and where it works will do things like you can do things like stack allocations and",
    "start": "620910",
    "end": "627480"
  },
  {
    "text": "so on and so forth to make things run faster non trailing named arguments",
    "start": "627480",
    "end": "633080"
  },
  {
    "text": "we'll go into this in a little bit more detail in the demo it works like you think it should but effectively what it",
    "start": "633080",
    "end": "640620"
  },
  {
    "text": "means is once you've named the first argument to a method you don't always have to name the others it just depends",
    "start": "640620",
    "end": "648270"
  },
  {
    "text": "so you can use named arguments purely for your sake to make sure that you",
    "start": "648270",
    "end": "654120"
  },
  {
    "text": "understand what that argument is meant to mean which is a thoroughly good thing in terms of understanding you're making",
    "start": "654120",
    "end": "660270"
  },
  {
    "text": "your code easy for someone else or you in six months to understand yay and then",
    "start": "660270",
    "end": "665880"
  },
  {
    "text": "leaning under scores of numeric literals as John showed we binary hexadecimal and others we cannot",
    "start": "665880",
    "end": "670990"
  },
  {
    "text": "have a leading underscore to separate the zero b or the zero x or to get them to a line however you would like",
    "start": "670990",
    "end": "676810"
  },
  {
    "text": "and a new accessibility modify our",
    "start": "676810",
    "end": "682000"
  },
  {
    "text": "private protected which everybody loves the feature but three releases on no one",
    "start": "682000",
    "end": "687730"
  },
  {
    "text": "likes the name and no one came up with a better name either so it was finally kind of a let's just shift this and get",
    "start": "687730",
    "end": "693790"
  },
  {
    "text": "it over with although an vb they did come up with a friendlier name it fits the vb syntax",
    "start": "693790",
    "end": "699520"
  },
  {
    "text": "but private protected basically means if you declare a method as private",
    "start": "699520",
    "end": "705400"
  },
  {
    "text": "protected it can only be accessed by methods that are from a derived class",
    "start": "705400",
    "end": "711130"
  },
  {
    "text": "and declared in the same assembly okay whereas normal protected internal it can",
    "start": "711130",
    "end": "719770"
  },
  {
    "text": "be accessed by any method in the same assembly or by any derived class this is some of the CLR supported since 1.0",
    "start": "719770",
    "end": "726160"
  },
  {
    "text": "didn't have language syntax for it i always find the and and all odd because",
    "start": "726160",
    "end": "732010"
  },
  {
    "text": "if you say it can be accessed by x and y if my credit card can be accessed by me",
    "start": "732010",
    "end": "737770"
  },
  {
    "text": "and my wife then that's less restrictive than only by me but private protected is",
    "start": "737770",
    "end": "747220"
  },
  {
    "text": "more restrictive than protected internal although it does work with written checks in america you get a check",
    "start": "747220",
    "end": "754150"
  },
  {
    "text": "written to you and your wife you both have to endorse it too casual he's moved on from checks we have to we try to as",
    "start": "754150",
    "end": "760120"
  },
  {
    "text": "well it is only american banks and insurance companies heaven alright so let's actually look at primarily what i",
    "start": "760120",
    "end": "766960"
  },
  {
    "text": "would want to do is and when we talk about these features being kind of small is let's take an application and let's",
    "start": "766960",
    "end": "773589"
  },
  {
    "text": "just upgraded from 7.0 to 7.1 okay so we'll start by just you can see that",
    "start": "773589",
    "end": "780250"
  },
  {
    "text": "what I have here what this program does is it's a small console application that",
    "start": "780250",
    "end": "787920"
  },
  {
    "text": "calculates or generates 20 random points in space roughly few thousand units away",
    "start": "787920",
    "end": "797020"
  },
  {
    "text": "from the origin and then finds the closest one to wherever you are starting at the origin go there and then finds the closer one",
    "start": "797020",
    "end": "803470"
  },
  {
    "text": "where your art goes there until you visited all of them okay I made it a sink just so I can show this feature so",
    "start": "803470",
    "end": "809710"
  },
  {
    "text": "I'm gonna delete this code know a little bit because there's really nothing anything going on here but the main",
    "start": "809710",
    "end": "814750"
  },
  {
    "text": "method this would actually be the correct way to make a main method in a",
    "start": "814750",
    "end": "820600"
  },
  {
    "text": "console application wait so we're gonna call the waiter and then get its result",
    "start": "820600",
    "end": "826360"
  },
  {
    "text": "which then goes through the state machine correctly and ensures it doesn't block what we found looking at a whole",
    "start": "826360",
    "end": "833140"
  },
  {
    "text": "lot of code out on the web or out in github and other samples is we would find people do something like that which",
    "start": "833140",
    "end": "841630"
  },
  {
    "text": "can deadlock so I I'm confused about this because all right I might use",
    "start": "841630",
    "end": "848470"
  },
  {
    "text": "result if it returned the task rightly so there's no synchronization context in a console app so isn't if the task needs",
    "start": "848470",
    "end": "856420"
  },
  {
    "text": "wood not gonna go on the would not in a console application before a saml-based",
    "start": "856420",
    "end": "861850"
  },
  {
    "text": "app there we go right and you have a main method in example based app so only",
    "start": "861850",
    "end": "875380"
  },
  {
    "text": "sometimes which is really cool so what we can do now in c-sharp 7.1 is",
    "start": "875380",
    "end": "881530"
  },
  {
    "text": "I can declare that this main method returns a task and because it is we",
    "start": "881530",
    "end": "887790"
  },
  {
    "text": "returns a task I can await I mean do",
    "start": "887790",
    "end": "895030"
  },
  {
    "text": "that and if I'm going to wait I have to declare it as an async method and now I",
    "start": "895030",
    "end": "902380"
  },
  {
    "text": "get that now if you look I already upgrade this upgrade this so we'll just",
    "start": "902380",
    "end": "908170"
  },
  {
    "text": "slide over to our",
    "start": "908170",
    "end": "910860"
  },
  {
    "text": "property pages I think our last practice",
    "start": "914910",
    "end": "920339"
  },
  {
    "text": "Rd I may have already upgraded it's all right no one can tell with that phone telling me that's right believe the",
    "start": "920339",
    "end": "928319"
  },
  {
    "text": "magic we will leave the magic so normally what you have here what you can see here is or what you can see here is",
    "start": "928319",
    "end": "934529"
  },
  {
    "text": "it says C sharp latest major version which is the default I can't read it from here either",
    "start": "934529",
    "end": "940730"
  },
  {
    "text": "I've memorized the order my eyes are worse than yours you can pick either C",
    "start": "940730",
    "end": "945839"
  },
  {
    "text": "sharp latest version minor so you would pick anything that you want you can also pick anything all the way back to C",
    "start": "945839",
    "end": "952019"
  },
  {
    "text": "sharp one if you wanted once we implement this I don't recommend that you know but don't expect it to apply as",
    "start": "952019",
    "end": "959310"
  },
  {
    "text": "if it were using a C sharp three compiler or whatever so there are some",
    "start": "959310",
    "end": "965279"
  },
  {
    "text": "aspects it uses the right grammar but it may apply a slightly different overload",
    "start": "965279",
    "end": "971009"
  },
  {
    "text": "resolution or there are some things that don't quite work so don't assume it will",
    "start": "971009",
    "end": "976680"
  },
  {
    "text": "behave exactly as parallel why don't the demonstrate this and I keep forgetting it all right so this is legal C sharp of",
    "start": "976680",
    "end": "982380"
  },
  {
    "text": "course even with C sharp 7 oh I go build it I will get an error at compile time",
    "start": "982380",
    "end": "989519"
  },
  {
    "text": "which is in really tiny fact fine but it's important it's this program does not contain a static main method",
    "start": "989519",
    "end": "995459"
  },
  {
    "text": "suitable for an entry point because I compile the 7.0 okay this is the only place where the tooling doesn't really",
    "start": "995459",
    "end": "1001730"
  },
  {
    "text": "help you in the way we'd like it to because this is perfectly valid C sharp even before C sharp 7 1 it just isn't a",
    "start": "1001730",
    "end": "1009769"
  },
  {
    "text": "valid entry point before C sharp 7.1 ok so we don't have an entry point so if",
    "start": "1009769",
    "end": "1016490"
  },
  {
    "text": "this is the one feature that you use this is the one to look at turning on now we can also do it as I said just",
    "start": "1016490",
    "end": "1025308"
  },
  {
    "text": "inside the by editing the CS proj file so I just made it 7.1 and now if we",
    "start": "1025309",
    "end": "1036938"
  },
  {
    "text": "compile it should compile cleanly and we now have an async main method awesome",
    "start": "1036939",
    "end": "1043209"
  },
  {
    "text": "okay so that's the only one that you won't get intellisense for to tell you hey you're using a new feature please try to do something different well now",
    "start": "1043210",
    "end": "1050050"
  },
  {
    "text": "I've already upgraded to 7.1 one nice thing that shows up right away is those this right here in the Select statement",
    "start": "1050050",
    "end": "1056830"
  },
  {
    "text": "I have one of those where I'm saying you know I'm grabbing these three points as they generate my random things that's X",
    "start": "1056830",
    "end": "1062950"
  },
  {
    "text": "is equal to X Y is equal to Y and Z's equal Z and I had to do that in 7.0",
    "start": "1062950",
    "end": "1068530"
  },
  {
    "text": "because it's the only way to get the semantic names I wanted for my x y&z coordinates briefly are you other ways",
    "start": "1068530",
    "end": "1074620"
  },
  {
    "text": "done with async main I am otherwise nowadays anyway what happens if we you know having an async method that just",
    "start": "1074620",
    "end": "1081070"
  },
  {
    "text": "awaits is kind of boring what happens if we just have you work a sink that should",
    "start": "1081070",
    "end": "1089740"
  },
  {
    "text": "work mm-hmm that would work cool I did not know that",
    "start": "1089740",
    "end": "1097120"
  },
  {
    "text": "hmm this is still returning it out it's just returning a different test instead of a waiting wait so I I can so often if",
    "start": "1097120",
    "end": "1109210"
  },
  {
    "text": "you're writing a console app that has a main method and it's just gonna do async stuff in this word you're gonna write",
    "start": "1109210",
    "end": "1114670"
  },
  {
    "text": "that and this would especially be true if you already have an async method there's a console application yeah okay",
    "start": "1114670",
    "end": "1119980"
  },
  {
    "text": "right so here since I'm not using this",
    "start": "1119980",
    "end": "1125080"
  },
  {
    "text": "feature one of my light bulbs now says I",
    "start": "1125080",
    "end": "1130080"
  },
  {
    "text": "can switch this to just using x y&z and",
    "start": "1130740",
    "end": "1143140"
  },
  {
    "text": "I will still have the same semantic names down below you see where I'm using x y&z it's still perfectly valid code",
    "start": "1143140",
    "end": "1148630"
  },
  {
    "text": "because we have those literals anyplace we can infer the names of tuple member",
    "start": "1148630",
    "end": "1153760"
  },
  {
    "text": "names we will do that okay okay that's he's still using anonymous types under",
    "start": "1153760",
    "end": "1160930"
  },
  {
    "text": "the hood for all the let X let Y let Z I think it's probably doing a select and",
    "start": "1160930",
    "end": "1167920"
  },
  {
    "text": "building up stuff I would have to look at the IR yeah it's a shame if say",
    "start": "1167920",
    "end": "1174570"
  },
  {
    "text": "when we look at the ILO right an issue if necessary all right",
    "start": "1175809",
    "end": "1180929"
  },
  {
    "text": "two out of three there and then finally the default literals which is a seven",
    "start": "1180929",
    "end": "1186429"
  },
  {
    "text": "point one feature one of the methods I have down here that we'll get to in a little bit more detail as we do some",
    "start": "1186429",
    "end": "1191649"
  },
  {
    "text": "performance here I'm just passing saying well as I calculate the distance my default would be the origin because the",
    "start": "1191649",
    "end": "1197499"
  },
  {
    "text": "default for a struck type is zero zero bit pattern that's the default I no",
    "start": "1197499",
    "end": "1202869"
  },
  {
    "text": "longer have to write the type so cool",
    "start": "1202869",
    "end": "1208139"
  },
  {
    "text": "and that's not just for default premises optional parameters right can do int x",
    "start": "1208139",
    "end": "1213879"
  },
  {
    "text": "equals default or past default as an argument something it's kind of cool yes",
    "start": "1213879",
    "end": "1220269"
  },
  {
    "text": "anywhere any place you previously needed needed to write default of some type just write default life is good so long",
    "start": "1220269",
    "end": "1227229"
  },
  {
    "text": "as it can infer the type you're good yes all right seven point two I'm gonna do",
    "start": "1227229",
    "end": "1234190"
  },
  {
    "text": "this one last cuz it's the one that takes the longest not on trailing named arguments this is one of the things that",
    "start": "1234190",
    "end": "1243190"
  },
  {
    "text": "I truly hate in terms of trying to get a standard write and I still don't know",
    "start": "1243190",
    "end": "1248259"
  },
  {
    "text": "how this one slipped through but argument null exception and argument exception have the message in the",
    "start": "1248259",
    "end": "1253899"
  },
  {
    "text": "parameter name and opposite orders which is incredibly dumb I don't know how that happened so I always specify the names",
    "start": "1253899",
    "end": "1260200"
  },
  {
    "text": "just because then I always get them right so now with now named arguments if",
    "start": "1260200",
    "end": "1267460"
  },
  {
    "text": "I want to I can no longer specify the second one I only need to say all right",
    "start": "1267460",
    "end": "1272589"
  },
  {
    "text": "name all this first that's a parameter name and I'm gonna guess that's probably the message I think I must have put it",
    "start": "1272589",
    "end": "1278259"
  },
  {
    "text": "in the opposite order then oh now I'm getting my intellisense that says you know what you didn't need to upgrade",
    "start": "1278259",
    "end": "1283659"
  },
  {
    "text": "this project to 7.2 so we'll go ahead and do that that make sense now I've got",
    "start": "1283659",
    "end": "1290200"
  },
  {
    "text": "72 because by the time you know which of the two arguments means the parameter name it's pretty obvious that that is",
    "start": "1290200",
    "end": "1296349"
  },
  {
    "text": "going to be the message and now this is one of these features that we have a lot of fun documenting and describing the",
    "start": "1296349",
    "end": "1303129"
  },
  {
    "text": "very short version is it works the way you would expect",
    "start": "1303129",
    "end": "1308350"
  },
  {
    "text": "okay yeah the slightly longer version is here what the rules are as long as every",
    "start": "1308350",
    "end": "1315669"
  },
  {
    "text": "named argument that you give is in the correct position and the right number of",
    "start": "1315669",
    "end": "1322330"
  },
  {
    "text": "arguments follow after words that match the proper types then I can omit the",
    "start": "1322330",
    "end": "1328090"
  },
  {
    "text": "argument names on any future arguments okay however if I switch the order of these",
    "start": "1328090",
    "end": "1335380"
  },
  {
    "text": "and I did message first I would have to specify the second one because it's not in the right position anymore okay if",
    "start": "1335380",
    "end": "1343210"
  },
  {
    "text": "this had multiple overloads and it could be multiple different methods I would have to specify the names so you can",
    "start": "1343210",
    "end": "1351039"
  },
  {
    "text": "only use this feature if you are using pretty much only for clarity on some of",
    "start": "1351039",
    "end": "1356980"
  },
  {
    "text": "the argument names as soon as something is not in the right position then you",
    "start": "1356980",
    "end": "1362169"
  },
  {
    "text": "need to specify names everywhere okay the good news is that the bit of the specification for overload resolution",
    "start": "1362169",
    "end": "1368529"
  },
  {
    "text": "that will need to handle this is already broken even without this extra feature in both the Microsoft spec and the atma",
    "start": "1368529",
    "end": "1375730"
  },
  {
    "text": "spec because we couldn't get it right you clearly haven't read this suspect for a bestest betterness yet have you",
    "start": "1375730",
    "end": "1382179"
  },
  {
    "text": "don't know so one of the c-sharp seven three proposals is to make that a little",
    "start": "1382179",
    "end": "1387789"
  },
  {
    "text": "better okay so that's that's named argument so again what it means is when you're using this just for clarity you",
    "start": "1387789",
    "end": "1394450"
  },
  {
    "text": "can simplify it and only specify some of them leading underscores pretty simple",
    "start": "1394450",
    "end": "1404620"
  },
  {
    "text": "you can just specify I can put underscores in here if I want to make these all on four bit boundaries yeah",
    "start": "1404620",
    "end": "1414070"
  },
  {
    "text": "cool nobody ever applause that feature except for like I asked for this at mocks boarding house which is a play",
    "start": "1414070",
    "end": "1422110"
  },
  {
    "text": "board games and have dinner at the same time I ideal place back in Seattle a couple of years ago yes Oh doesn't it",
    "start": "1422110",
    "end": "1428950"
  },
  {
    "text": "work oh well make sure it doesn't finally it does yeah okay and then probably protector don't even",
    "start": "1428950",
    "end": "1435669"
  },
  {
    "text": "get a devil all right so now let's get on to ref",
    "start": "1435669",
    "end": "1441610"
  },
  {
    "text": "reference semantics with value types because what we want to do is try to write code this more efficient now I",
    "start": "1441610",
    "end": "1447700"
  },
  {
    "text": "need to preface this demo by going this is a demo this is kind of small really showing syntax if you want to go down",
    "start": "1447700",
    "end": "1454510"
  },
  {
    "text": "this road start doing some benchmarks because you will either make your code",
    "start": "1454510",
    "end": "1459610"
  },
  {
    "text": "faster or you will make it slower which",
    "start": "1459610",
    "end": "1465100"
  },
  {
    "text": "it is depends on sizes and memory pressure and a whole lot of different",
    "start": "1465100",
    "end": "1470230"
  },
  {
    "text": "variables so you are going to want to measure this or you may make it faster on 32-bit since it's lower than 64-bit",
    "start": "1470230",
    "end": "1475540"
  },
  {
    "text": "it is indeed possible as well so you want to do a lot of measurements on this so suppose we did some measuring and I",
    "start": "1475540",
    "end": "1486250"
  },
  {
    "text": "look at this this method here in this point 3d structure is a struct there so",
    "start": "1486250",
    "end": "1502090"
  },
  {
    "text": "it is a point with three doubles doubles are how big John 64-bit 64 bits so this",
    "start": "1502090",
    "end": "1508270"
  },
  {
    "text": "is 124 bytes 24 bytes so more than I really want to",
    "start": "1508270",
    "end": "1515860"
  },
  {
    "text": "throw on the stack all the time especially I don't need to and I'm not modifying it so I have this in here now",
    "start": "1515860",
    "end": "1522280"
  },
  {
    "text": "what I would have to do before if I really wanted to make this faster and I said you know that that whole stack copy",
    "start": "1522280",
    "end": "1527950"
  },
  {
    "text": "thing is really really annoying so what I want to do is I want to pass this by",
    "start": "1527950",
    "end": "1533530"
  },
  {
    "text": "reference so I might say something like like in earlier versions I could pass",
    "start": "1533530",
    "end": "1539620"
  },
  {
    "text": "this by Rath okay and just promise you know it's Kelvin said in his talk that",
    "start": "1539620",
    "end": "1546640"
  },
  {
    "text": "I'm going to promise that I don't modify that in my comments and that should be good but if I wanted to do this where I",
    "start": "1546640",
    "end": "1554410"
  },
  {
    "text": "have a default value I could not do that because you cannot put a ref modifier on",
    "start": "1554410",
    "end": "1559950"
  },
  {
    "text": "a default value because the compiler has to create something and do something for",
    "start": "1559950",
    "end": "1565600"
  },
  {
    "text": "it well the new modifier is in so I can now",
    "start": "1565600",
    "end": "1570850"
  },
  {
    "text": "pass both of these by reference as in arguments and bypassing them as in arguments what",
    "start": "1570850",
    "end": "1577320"
  },
  {
    "text": "I've told the compiler now is I am NOT going to modify those values inside that method but please pass them by reference",
    "start": "1577320",
    "end": "1585200"
  },
  {
    "text": "which is either 32 bits or 64 bits so smaller than my structure and I promise",
    "start": "1585200",
    "end": "1592380"
  },
  {
    "text": "I will not modify them in fact the language will enforce that I will not modify those values inside that method",
    "start": "1592380",
    "end": "1597950"
  },
  {
    "text": "presumably if the point 3d that you pass in is actually on the heap then",
    "start": "1597950",
    "end": "1603049"
  },
  {
    "text": "something else another thread could modify it so you could observe point 1 changing its values that is even",
    "start": "1603049",
    "end": "1609929"
  },
  {
    "text": "impossible yes because it would be a reference to that other thing scary",
    "start": "1609929",
    "end": "1615389"
  },
  {
    "text": "action of this distance but yes they don't do that okay so now we've got",
    "start": "1615389",
    "end": "1622260"
  },
  {
    "text": "those passed by reference now if you notice this code up here continues to",
    "start": "1622260",
    "end": "1627630"
  },
  {
    "text": "compile even though it's passed by reference here or I call calculate distance I don't need the in modifier at",
    "start": "1627630",
    "end": "1634679"
  },
  {
    "text": "the call site ok because we said you",
    "start": "1634679",
    "end": "1641399"
  },
  {
    "text": "don't really need to know that it's just a lot semantically it would be just like passing by value nothing can change ok",
    "start": "1641399",
    "end": "1649220"
  },
  {
    "text": "so you have not had to change the source code of the calling right what if",
    "start": "1649220",
    "end": "1655950"
  },
  {
    "text": "they've been in different assemblies and this have been a patch release that you put in modifier in this is a very",
    "start": "1655950",
    "end": "1662010"
  },
  {
    "text": "important thing as you read any of the specs in the documentation when we talk about these features we are going to",
    "start": "1662010",
    "end": "1667110"
  },
  {
    "text": "talk about a binary breaking change and a source code breaking change this",
    "start": "1667110",
    "end": "1672570"
  },
  {
    "text": "feature can introduce a binary breaking change if you add in on your public",
    "start": "1672570",
    "end": "1678120"
  },
  {
    "text": "methods deliver a patch and ship it anyone that uses that assembly has to",
    "start": "1678120",
    "end": "1684059"
  },
  {
    "text": "recompile because their call site is going to be passing by value and your",
    "start": "1684059",
    "end": "1689940"
  },
  {
    "text": "method now inside your assembly is going to be expecting pass by reference ok but",
    "start": "1689940",
    "end": "1696840"
  },
  {
    "text": "it is not a source breaking change recompile anything that compiled before will compile now ok",
    "start": "1696840",
    "end": "1706119"
  },
  {
    "text": "so we're gonna make that distinction but now that's not a language breaking change if you don't change any of your",
    "start": "1706119",
    "end": "1711969"
  },
  {
    "text": "code it's still gonna work right so we're not gonna do anything by default pass things by the reference okay",
    "start": "1711969",
    "end": "1719699"
  },
  {
    "text": "but a great question and thank you for documenting it I expected you to ask",
    "start": "1719699",
    "end": "1725109"
  },
  {
    "text": "something more interesting about this feature down here go on I conquered divine witch so so",
    "start": "1725109",
    "end": "1732039"
  },
  {
    "text": "there's an interesting finger these are now passed by reference right inside this I could call member methods of the",
    "start": "1732039",
    "end": "1739179"
  },
  {
    "text": "point 3d type and you're using a property already and I'm using a",
    "start": "1739179",
    "end": "1744249"
  },
  {
    "text": "property now I'm using together so there's a high probability that the getter doesn't change the structure okay",
    "start": "1744249",
    "end": "1751149"
  },
  {
    "text": "but the compiler can't absolutely guarantee that you could write evil code",
    "start": "1751149",
    "end": "1756819"
  },
  {
    "text": "to change state inside a proper together or inside any method and instruct so I am still copying both points here",
    "start": "1756819",
    "end": "1763839"
  },
  {
    "text": "because I am calling member methods of it so it's going to make a copy of it and then pass it by value inside here",
    "start": "1763839",
    "end": "1769689"
  },
  {
    "text": "because it can't guarantee that it's not ever gonna change okay and this this can",
    "start": "1769689",
    "end": "1777549"
  },
  {
    "text": "have a real performance difference I noted this in notice I'm where I have a bunch of fairly large structs and I have",
    "start": "1777549",
    "end": "1785199"
  },
  {
    "text": "I use compositions so local date/time consists of a local date and the local time and I had to make those fields",
    "start": "1785199",
    "end": "1792449"
  },
  {
    "text": "writable fields even though I never wrote to them to stop the compiler from doing the copy and I'm I feel so happy",
    "start": "1792449",
    "end": "1799569"
  },
  {
    "text": "that the bit on github the page that explains the purpose of the feature that",
    "start": "1799569",
    "end": "1806529"
  },
  {
    "text": "bills about to explain and refers to the blog post where I talk about doing that it's like yay directly responsible for",
    "start": "1806529",
    "end": "1812559"
  },
  {
    "text": "feature so the way I would fix that correctly now is if I go to this public struct and if I say it's a read-only",
    "start": "1812559",
    "end": "1819729"
  },
  {
    "text": "struct I have now said that this is immutable I mean it already was but now",
    "start": "1819729",
    "end": "1827859"
  },
  {
    "text": "the language compiler can say you have promised that there is no method in here",
    "start": "1827859",
    "end": "1832929"
  },
  {
    "text": "that changes state it's not allowed okay",
    "start": "1832929",
    "end": "1838720"
  },
  {
    "text": "so if I were to write a new method here",
    "start": "1838720",
    "end": "1842580"
  },
  {
    "text": "go on a sling to this cuz that's always fun",
    "start": "1847980",
    "end": "1852540"
  },
  {
    "text": "you need actual braces yeah thank you",
    "start": "1858220",
    "end": "1864330"
  },
  {
    "text": "there needs that that way there we go",
    "start": "1864330",
    "end": "1874320"
  },
  {
    "text": "okay the error now says I cannot assign to this because it's read-only I could also not assign to X or Y which right",
    "start": "1874320",
    "end": "1882040"
  },
  {
    "text": "now I couldn't even see but if I added another instance property or instance field in here I could not modify that",
    "start": "1882040",
    "end": "1887440"
  },
  {
    "text": "either because I have declared that this is an immutable type no member methods modify it so we're going to make our",
    "start": "1887440",
    "end": "1899260"
  },
  {
    "text": "design intent more clear this structure is immutable it never changes and now I",
    "start": "1899260",
    "end": "1905200"
  },
  {
    "text": "can pass it using in by reference to methods because I never modify its state",
    "start": "1905200",
    "end": "1913180"
  },
  {
    "text": "therefore we can pass it by reference save some allocations save some stack space save some copying hopefully we get",
    "start": "1913180",
    "end": "1921010"
  },
  {
    "text": "some performance improvements out of that in different conditions okay just",
    "start": "1921010",
    "end": "1928270"
  },
  {
    "text": "to be clear without the in so you see you saved one copy in total because",
    "start": "1928270",
    "end": "1934570"
  },
  {
    "text": "before you had in it would copy it when you call the method mm-hmm but then wouldn't copy it when using the",
    "start": "1934570",
    "end": "1941200"
  },
  {
    "text": "parameters because we haven't claimed that the parameters aren't going to change value so if X happens to assign",
    "start": "1941200",
    "end": "1946450"
  },
  {
    "text": "to this then hey so be it so it's not",
    "start": "1946450",
    "end": "1951880"
  },
  {
    "text": "that there are two orthogonal savings there's one saving that requires both pieces correct in this particular",
    "start": "1951880",
    "end": "1958210"
  },
  {
    "text": "depending on your usage right so if I if what comes in is all immutable you're already all right okay so that's the",
    "start": "1958210",
    "end": "1965650"
  },
  {
    "text": "first part or if you never call member methods on something now let's get",
    "start": "1965650",
    "end": "1971140"
  },
  {
    "text": "the part that really gets to be fun here so I'm gonna take out some of my icing stuff because we really don't need to",
    "start": "1971140",
    "end": "1977740"
  },
  {
    "text": "worry about a sink right now so I'm just gonna do this noise like that void again",
    "start": "1977740",
    "end": "1985540"
  },
  {
    "text": "I even saved you having to remove a sink yes and now remove that so this is now",
    "start": "1985540",
    "end": "1992830"
  },
  {
    "text": "all synchronous because we're really because some of the features I'm gonna show now can't be used in a sink methods",
    "start": "1992830",
    "end": "1998080"
  },
  {
    "text": "because they pin memory they do some things there safely so that we can work with memory and work",
    "start": "1998080",
    "end": "2005790"
  },
  {
    "text": "with it as though it were reference semantics even though we're looking at",
    "start": "2005790",
    "end": "2010920"
  },
  {
    "text": "some value types called opposed it's quarter past perfect this should work then I may even get to show the really",
    "start": "2010920",
    "end": "2015930"
  },
  {
    "text": "fun feature all right so now let's say instead of this innumerable 3d of points",
    "start": "2015930",
    "end": "2022410"
  },
  {
    "text": "I'm going to use a new type down here I'm going to use span of 0.3 D span is a",
    "start": "2022410",
    "end": "2035760"
  },
  {
    "text": "struct type so now my entire collection is a struct okay I don't want to copy",
    "start": "2035760",
    "end": "2041820"
  },
  {
    "text": "right now it's only 20 points because this is a demo but let's say this was a thousand points I don't want to copy a thousand points that's ridiculous that's",
    "start": "2041820",
    "end": "2049080"
  },
  {
    "text": "really gonna be slow so I'm going to say well this is clearly an in parameter because I'm not gonna muck with it so",
    "start": "2049080",
    "end": "2056820"
  },
  {
    "text": "now I'm passing a reference to this memory that's declared somewhere outside and this is a span it's now we don't",
    "start": "2056820",
    "end": "2063720"
  },
  {
    "text": "it's now effectively read-only copy of this struct but it's not a copy I'm just looking at it and aliasing it different",
    "start": "2063720",
    "end": "2070379"
  },
  {
    "text": "I can't use for each anymore now but you know I can use a for loop I'm good with that",
    "start": "2070380",
    "end": "2076310"
  },
  {
    "text": "that and this now is points so index",
    "start": "2088420",
    "end": "2100360"
  },
  {
    "text": "well it's a struct so I don't really",
    "start": "2100360",
    "end": "2106130"
  },
  {
    "text": "need to check for null anymore there we go now I need to somehow change this up",
    "start": "2106130",
    "end": "2112160"
  },
  {
    "text": "here to deal with the fact that I've now got this ban and this is the part that would actually get faster even than the small program you look at the way I",
    "start": "2112160",
    "end": "2119510"
  },
  {
    "text": "wrote it originally I made this select statement I copied them to a list so that's a list of",
    "start": "2119510",
    "end": "2124880"
  },
  {
    "text": "points and then with each iteration I remove whatever point was closest so I",
    "start": "2124880",
    "end": "2131300"
  },
  {
    "text": "just shrink the list by one reallocated do some compaction the garbage collectors working like mad and then go",
    "start": "2131300",
    "end": "2137930"
  },
  {
    "text": "through the loop again with size one smaller since I'm now working with this span I need to start with an array so",
    "start": "2137930",
    "end": "2145160"
  },
  {
    "text": "I'm going to start with some fixed storage that I know how big it is and then instead of removing items out of it",
    "start": "2145160",
    "end": "2151400"
  },
  {
    "text": "I'm just going to sort them the first time I find the point closest I'm going to take whatever's in the zero width",
    "start": "2151400",
    "end": "2157520"
  },
  {
    "text": "element and whatever I find is closest swap them and then I'm going to start at",
    "start": "2157520",
    "end": "2162800"
  },
  {
    "text": "the first index and move forward and just do the remaining 19 find which one it is swap them and move on so the way",
    "start": "2162800",
    "end": "2171830"
  },
  {
    "text": "I'm going to do that is I'm going to save our start index it's going to start",
    "start": "2171830",
    "end": "2179390"
  },
  {
    "text": "at 0 my while loop now is while start index is less than once that length it's",
    "start": "2179390",
    "end": "2194720"
  },
  {
    "text": "still a list of moments I know I'm gonna change that to an array here",
    "start": "2194720",
    "end": "2199270"
  },
  {
    "text": "and then here we're going to declare a",
    "start": "2204270",
    "end": "2209670"
  },
  {
    "text": "new span normally I just use var and we're gonna say my slice is a new span",
    "start": "2209670",
    "end": "2217620"
  },
  {
    "text": "and I have to give it some storage that I'm going to span my span is going to be",
    "start": "2217620",
    "end": "2223700"
  },
  {
    "text": "using points and then I'm going to use the overload of the constructor that says where do I start",
    "start": "2223700",
    "end": "2229140"
  },
  {
    "text": "so I want to start at start index give it a type argument oh thank you there",
    "start": "2229140",
    "end": "2242010"
  },
  {
    "text": "are other overloads that would take a sub span of only you know slice 5 through index 10 or whatever I want so",
    "start": "2242010",
    "end": "2248340"
  },
  {
    "text": "I'm now taking this this look into this array so this array is this big and I'm taking a look into it of whatever I want",
    "start": "2248340",
    "end": "2254910"
  },
  {
    "text": "on each iteration and now I'm going to pass a reference to this structure that's looking at the internal storage",
    "start": "2254910",
    "end": "2261960"
  },
  {
    "text": "of the array but not copying it and now I'm gonna work inside with that internal",
    "start": "2261960",
    "end": "2267540"
  },
  {
    "text": "copy with that internal view of the same variable so I need to change a couple",
    "start": "2267540",
    "end": "2273360"
  },
  {
    "text": "things now obviously I can't since I can't use remove at here that's bad",
    "start": "2273360",
    "end": "2278520"
  },
  {
    "text": "now I have to do that swap well I've already figured out where the start point is it's from that closest point",
    "start": "2278520",
    "end": "2284850"
  },
  {
    "text": "dot index now what we need to do is I need to say that slice so 0 is start",
    "start": "2284850",
    "end": "2296940"
  },
  {
    "text": "before I do that I need to go that points this is how going to say slice",
    "start": "2296940",
    "end": "2304340"
  },
  {
    "text": "and I'm going to say slice so closest point dot index is now equal to slice",
    "start": "2304340",
    "end": "2316800"
  },
  {
    "text": "sub 0 all right and then slice of 0 is there boom so I've just done swap and",
    "start": "2316800",
    "end": "2322880"
  },
  {
    "text": "then since I finished that now we're gonna do start index plus plus oh ok",
    "start": "2322880",
    "end": "2332570"
  },
  {
    "text": "you're currently still passing in points to point closest and it's not complaining",
    "start": "2332570",
    "end": "2338099"
  },
  {
    "text": "is there an implicit conversion from a raita so and actually there is and thank",
    "start": "2338099",
    "end": "2345930"
  },
  {
    "text": "you because that would make an infinite loop really bad things happen because I'm passing the wrong thing so this now",
    "start": "2345930",
    "end": "2353999"
  },
  {
    "text": "needs to be my slice thank you for catching that there we go",
    "start": "2353999",
    "end": "2361068"
  },
  {
    "text": "let's G on over my shoulder there we go I have another question yes so you're",
    "start": "2361579",
    "end": "2369150"
  },
  {
    "text": "taking in a span of point three D and you're taking it in yes is there any",
    "start": "2369150",
    "end": "2375779"
  },
  {
    "text": "difference if you accept a read-only span instead of a span because you're not using the fact that you can assign",
    "start": "2375779",
    "end": "2382170"
  },
  {
    "text": "two values within that you should still work capital oh I think Apple oh yes",
    "start": "2382170",
    "end": "2390380"
  },
  {
    "text": "sort of feels like we're specifying this right not matter of modifying the span",
    "start": "2390440",
    "end": "2397079"
  },
  {
    "text": "either cool so the theme of that is",
    "start": "2397079",
    "end": "2405150"
  },
  {
    "text": "we're gonna try to get things a little bit quicker hopefully do some stuff that enables you to do high-performance",
    "start": "2405150",
    "end": "2412769"
  },
  {
    "text": "things in c-sharp get c-sharp closer to native where we need to this is going to",
    "start": "2412769",
    "end": "2417809"
  },
  {
    "text": "be this is already being fairly extensively adopted inside asp.net core",
    "start": "2417809",
    "end": "2425028"
  },
  {
    "text": "where you measure it should be cool in your your applications as well related types we saw span and span of T or span",
    "start": "2425150",
    "end": "2432630"
  },
  {
    "text": "and read-only span there is also memory and read-only memory which lets you look at things as a buffer and the same",
    "start": "2432630",
    "end": "2438839"
  },
  {
    "text": "syntax applies conference being that memory isn't a stack only type whereas",
    "start": "2438839",
    "end": "2445079"
  },
  {
    "text": "Bonnie's I believe that is true right yes I'm were you going to mention that",
    "start": "2445079",
    "end": "2452219"
  },
  {
    "text": "span you can't have a field of type span connector thank you this actually the",
    "start": "2452219",
    "end": "2457890"
  },
  {
    "text": "other thing so span is a new special type of syntax called of ref struct",
    "start": "2457890",
    "end": "2463549"
  },
  {
    "text": "which means it cannot be a member of a class because it's meant to refer to",
    "start": "2463549",
    "end": "2469680"
  },
  {
    "text": "some other storage that other store should be on the sack so I can only span things I can only spans something that I",
    "start": "2469680",
    "end": "2476710"
  },
  {
    "text": "already have allocated so I can't assume we can be a field within another ref",
    "start": "2476710",
    "end": "2483160"
  },
  {
    "text": "struct yes you can right so so I can pass to please must be on the stack and that so I can pass",
    "start": "2483160",
    "end": "2488770"
  },
  {
    "text": "tuples of spans if my method were written in such a way it could do that",
    "start": "2488770",
    "end": "2494770"
  },
  {
    "text": "this tuples are structs but I can put a struct on the heap structures inter",
    "start": "2494770",
    "end": "2500950"
  },
  {
    "text": "sorry a couple isn't a ref struct so I wouldn't expect that to work if I've got",
    "start": "2500950",
    "end": "2507010"
  },
  {
    "text": "a field of that type that should go back surely a field does yeah but I think it",
    "start": "2507010",
    "end": "2513670"
  },
  {
    "text": "is but it but a field of I feel the ref strike let's see now you're making me",
    "start": "2513670",
    "end": "2521140"
  },
  {
    "text": "think this through again I never get I never get these hard questions not here well you do but sort of from",
    "start": "2521140",
    "end": "2528099"
  },
  {
    "text": "down there normally instead of out here yes and it's 22 minutes passed all right",
    "start": "2528099",
    "end": "2533799"
  },
  {
    "text": "and I would want to get to the other stuff so we pass in definitely make it",
    "start": "2533799",
    "end": "2539020"
  },
  {
    "text": "return",
    "start": "2539020",
    "end": "2541470"
  },
  {
    "text": "nice - so I'd expect that to be okay but",
    "start": "2556640",
    "end": "2561750"
  },
  {
    "text": "you couldn't have that type that tupple type as a field in a class or a regular",
    "start": "2561750",
    "end": "2567990"
  },
  {
    "text": "struct correct but it could be a field in another restaurant yes because that's making sure it's right ways on the stack",
    "start": "2567990",
    "end": "2574590"
  },
  {
    "text": "right okay so well one thing that's interesting to note sort of meta",
    "start": "2574590",
    "end": "2581210"
  },
  {
    "text": "discussion is Eric Lippert the great Eric Lippert once wrote a series of",
    "start": "2581210",
    "end": "2586950"
  },
  {
    "text": "articles called the structure sorry the stack is an implementation detail and basically that's not true anymore",
    "start": "2586950",
    "end": "2592190"
  },
  {
    "text": "because a lot of language semantics are about when is something on the stack",
    "start": "2592190",
    "end": "2597690"
  },
  {
    "text": "versus when it might end up on the heap and so it becomes really front and center in the language if you're doing",
    "start": "2597690",
    "end": "2604020"
  },
  {
    "text": "performance ii kind of thing so I suspect I may never use span what's that",
    "start": "2604020",
    "end": "2616820"
  },
  {
    "text": "doesn't that feel at one time what a way",
    "start": "2616820",
    "end": "2621840"
  },
  {
    "text": "would it Oh what I just did right now yeah what's a default yeah that's going to be bad it's a default of because you",
    "start": "2621840",
    "end": "2632220"
  },
  {
    "text": "can read so long as you don't put that tupple on the heap yeah that's fine the type itself makes sense",
    "start": "2632220",
    "end": "2637980"
  },
  {
    "text": "but you can't use it as a field in a class you could use it in a field in another ref struct because that's never",
    "start": "2637980",
    "end": "2644310"
  },
  {
    "text": "gonna be on the heap you could use it as a local variable of added and non iterator method so the very short",
    "start": "2644310",
    "end": "2651960"
  },
  {
    "text": "version here is as you experiment with anything with spans and memory the compiler will tell you when you're doing",
    "start": "2651960",
    "end": "2657450"
  },
  {
    "text": "iraq which is one of our big which truly is one of the big features we want to do here this is all about performance it's",
    "start": "2657450",
    "end": "2663030"
  },
  {
    "text": "all about doing some things that might be dangerous and providing some language syntax to go it's a lot less dangerous",
    "start": "2663030",
    "end": "2668880"
  },
  {
    "text": "than it would have been earlier where you would have had if you use pin memory and remember it all yourself and do those things and occasionally it's more",
    "start": "2668880",
    "end": "2675030"
  },
  {
    "text": "conservative if I am if I remember rightly envisioning more conservative than it has to be when I was talking",
    "start": "2675030",
    "end": "2681210"
  },
  {
    "text": "about local methods before I mentioned that in various cases you can capture local variables of the enclosing method",
    "start": "2681210",
    "end": "2689070"
  },
  {
    "text": "and the compiler just does stuff to avoid ever having to allocate on the heap I believe you would still have",
    "start": "2689070",
    "end": "2695550"
  },
  {
    "text": "trouble using a ref struct in that situation because okay it's sort of an",
    "start": "2695550",
    "end": "2702180"
  },
  {
    "text": "implementation detail that it makes a another struct and passes that by reference since we do you I'm gonna do",
    "start": "2702180",
    "end": "2711420"
  },
  {
    "text": "this one really briefly because the last slide I just want to read them off so this is a preview of c-sharp a we're",
    "start": "2711420",
    "end": "2717600"
  },
  {
    "text": "going to talk about nulls we think he really low-balled this number of Tony",
    "start": "2717600",
    "end": "2724050"
  },
  {
    "text": "Hoare Lord Tony calling it his billion dollar mistake of adding nulls to alcohol in 1965 it's been with us ever",
    "start": "2724050",
    "end": "2731490"
  },
  {
    "text": "since so let's think about our design intent in the code bases that you have",
    "start": "2731490",
    "end": "2738660"
  },
  {
    "text": "that you work with right now we really have two cases that we really want to",
    "start": "2738660",
    "end": "2743880"
  },
  {
    "text": "support either a reference is never supposed to be null so therefore I",
    "start": "2743880",
    "end": "2748980"
  },
  {
    "text": "should always be able to dereference it safely and that should be fine but I",
    "start": "2748980",
    "end": "2754140"
  },
  {
    "text": "should never be able to assign null to it or never be able to let it be observable in all anywhere else in the",
    "start": "2754140",
    "end": "2759840"
  },
  {
    "text": "code base or a reference type is welcome to be null in which case it's all right",
    "start": "2759840",
    "end": "2766140"
  },
  {
    "text": "to assign null to it or let code observe it in a null state but I can never",
    "start": "2766140",
    "end": "2772410"
  },
  {
    "text": "dereference it unless I check first if you look at nulls in the c-sharp",
    "start": "2772410",
    "end": "2777630"
  },
  {
    "text": "language or anything in dotnet right now it could be either one of those which means we really can't express our design",
    "start": "2777630",
    "end": "2784860"
  },
  {
    "text": "intent the way we want so the problem",
    "start": "2784860",
    "end": "2790260"
  },
  {
    "text": "that we have here are the big problems what we want to do is deal with here we",
    "start": "2790260",
    "end": "2795630"
  },
  {
    "text": "want to have an expression of intent so your code expresses the design intent should this be null or should this not",
    "start": "2795630",
    "end": "2801350"
  },
  {
    "text": "and then we want the compiler to do everything it can to enforce that and",
    "start": "2801350",
    "end": "2806420"
  },
  {
    "text": "enforce that without just being so noisy that you turn it off within an existing",
    "start": "2806420",
    "end": "2813690"
  },
  {
    "text": "language where there are literally billions of lines of c-sharp code many of them are well tested against null",
    "start": "2813690",
    "end": "2820050"
  },
  {
    "text": "probably because they've thrown all reference exceptions if you note the most",
    "start": "2820050",
    "end": "2825740"
  },
  {
    "text": "referenced exception type in all the dotnet code bases on github is the null",
    "start": "2825740",
    "end": "2830910"
  },
  {
    "text": "reference exception by more than two to one of the next net closest one so this",
    "start": "2830910",
    "end": "2837030"
  },
  {
    "text": "is clearly a common common thing which now gives more diagnostics in certain cases than it used to if I remember it",
    "start": "2837030",
    "end": "2843980"
  },
  {
    "text": "so very welcome one idea was what do you do if you have one construct that could",
    "start": "2843980",
    "end": "2849750"
  },
  {
    "text": "represent two things let's introduce two new constructs and have them mean three different things",
    "start": "2849750",
    "end": "2855140"
  },
  {
    "text": "now we threw this out because what this would mean is the bank can never be null",
    "start": "2855140",
    "end": "2861090"
  },
  {
    "text": "and the question mark could be not nice thing is that question mark looks like nullable value types so that should be",
    "start": "2861090",
    "end": "2867330"
  },
  {
    "text": "easy the other one okay so it can't be null the problem with this is no one would",
    "start": "2867330",
    "end": "2873630"
  },
  {
    "text": "use it was what we felt you would have to change all of your code everywhere to be able to get any benefits so we've",
    "start": "2873630",
    "end": "2881160"
  },
  {
    "text": "decided to do something that we really really never ever want to do which is we're gonna say that every place you",
    "start": "2881160",
    "end": "2887310"
  },
  {
    "text": "have declared a variable of a reference type you meant that not to be null you really did you may not have known it but",
    "start": "2887310",
    "end": "2895140"
  },
  {
    "text": "that's what you meant and we'll help you enforce it if you really mean for something to possibly be null we'll put",
    "start": "2895140",
    "end": "2902190"
  },
  {
    "text": "the question mark there or you should put the question right there to express that intent now the problem with this is",
    "start": "2902190",
    "end": "2908480"
  },
  {
    "text": "existing code bases if we made this an error type enforcement would just be",
    "start": "2908480",
    "end": "2914790"
  },
  {
    "text": "littered with errors and a lot of problems and people would turn it off so",
    "start": "2914790",
    "end": "2920250"
  },
  {
    "text": "we're not going to do that we're gonna make this a warning so let's look at a",
    "start": "2920250",
    "end": "2926580"
  },
  {
    "text": "code base I'm going to pull up the this code so I have a friend up here I don't",
    "start": "2926580",
    "end": "2933900"
  },
  {
    "text": "know if he has a middle name or not so I'm gonna make a new person initialize it with his first and last name and I'm",
    "start": "2933900",
    "end": "2939270"
  },
  {
    "text": "gonna call this method called get length of middle name where I see I'm gonna assign a variable",
    "start": "2939270",
    "end": "2945390"
  },
  {
    "text": "to person got middle name and return its length okay a small sample that looks",
    "start": "2945390",
    "end": "2952170"
  },
  {
    "text": "like code we may probably have elsewhere in the world",
    "start": "2952170",
    "end": "2956540"
  },
  {
    "text": "and when I run this it does a null reference exception because I'm trying",
    "start": "2957800",
    "end": "2963839"
  },
  {
    "text": "to get the middle name and I never initialized it which is also something we probably see in the wild in our own",
    "start": "2963839",
    "end": "2969810"
  },
  {
    "text": "code base on a fairly regular basis so now let's look inside this name so I",
    "start": "2969810",
    "end": "2977099"
  },
  {
    "text": "have pretty much what we talked about earlier I have this first last and middle name and they're all listed as",
    "start": "2977099",
    "end": "2983040"
  },
  {
    "text": "they were not null so you see I have these green squiggles under the first",
    "start": "2983040",
    "end": "2988500"
  },
  {
    "text": "person constructor which is telling me that a non nullable string is not",
    "start": "2988500",
    "end": "2994500"
  },
  {
    "text": "initialized so therefore that's bad so I get a warning well way I would fix that",
    "start": "2994500",
    "end": "3001520"
  },
  {
    "text": "warning is you know some people do not have a middle name so we'll declare that saying that that can be null",
    "start": "3001520",
    "end": "3008630"
  },
  {
    "text": "that's good now there's no warning here awesome and now if we look in the program where I was doing some nasty",
    "start": "3008630",
    "end": "3015680"
  },
  {
    "text": "things you see that now where I'm looking at P dot middle name well that",
    "start": "3015680",
    "end": "3022190"
  },
  {
    "text": "could be null so I can't can't do that so what I could do is if I say it's",
    "start": "3022190",
    "end": "3028790"
  },
  {
    "text": "either P dot middle name or the empty",
    "start": "3028790",
    "end": "3035180"
  },
  {
    "text": "string okay now that got rid of my warning because now it definitely gets assigned",
    "start": "3035180",
    "end": "3041510"
  },
  {
    "text": "to something that's not null right so my warning would away there are multiple",
    "start": "3041510",
    "end": "3047270"
  },
  {
    "text": "ways I could fix this of course I leave that here I could make this at that and",
    "start": "3047270",
    "end": "3054530"
  },
  {
    "text": "then I could say return either middle name question mark dot length or 0 all",
    "start": "3054530",
    "end": "3066349"
  },
  {
    "text": "right so now I'm only do you referencing that if it's not null so what we tried to bake into the preview is in as many",
    "start": "3066349",
    "end": "3073339"
  },
  {
    "text": "ways as possible we're going to see if you did actually check for null and if",
    "start": "3073339",
    "end": "3078380"
  },
  {
    "text": "so it's safe to you something if it was a nullable thing there's a few that we can't get go ahead I'm just so we've got",
    "start": "3078380",
    "end": "3085790"
  },
  {
    "text": "two references that we're dereferencing here yes I know are you about no no okay so what if I am so if date",
    "start": "3085790",
    "end": "3094960"
  },
  {
    "text": "time dot now dot minutes if we should",
    "start": "3094960",
    "end": "3100720"
  },
  {
    "text": "have finished then it'll be null otherwise that yeah so now we have that",
    "start": "3100720",
    "end": "3107200"
  },
  {
    "text": "and presumably if we do this then the does the call stop complaining hurry",
    "start": "3107200",
    "end": "3112960"
  },
  {
    "text": "yes so yeah it's not just at the point of dereferencing it's waiting you pass things in or I'm just going to do this",
    "start": "3112960",
    "end": "3118330"
  },
  {
    "text": "instead actually it won't let me do it",
    "start": "3118330",
    "end": "3128410"
  },
  {
    "text": "up there so yeah we'll leave that as a question mark and then I'm gonna say",
    "start": "3128410",
    "end": "3133480"
  },
  {
    "text": "well I just no better get over it so I",
    "start": "3133480",
    "end": "3138750"
  },
  {
    "text": "like that this is all this is that that exclamation point is colloquially referred to as the damnit operator which",
    "start": "3138750",
    "end": "3146170"
  },
  {
    "text": "means it's not null damn it and the reason we have it is as I mentioned down here there are some",
    "start": "3146170",
    "end": "3151360"
  },
  {
    "text": "things we can't tell if we've checked it or not so if I were to let's move some",
    "start": "3151360",
    "end": "3156790"
  },
  {
    "text": "of this out this and if I were to say if",
    "start": "3156790",
    "end": "3165430"
  },
  {
    "text": "not string or if there's no more empty",
    "start": "3165430",
    "end": "3174850"
  },
  {
    "text": "of PML lame this is an instance where we",
    "start": "3174850",
    "end": "3182080"
  },
  {
    "text": "can't really check okay because if you look at this this is just a method call",
    "start": "3182080",
    "end": "3187900"
  },
  {
    "text": "the compiler can't statically know that method call actually does check for null this name is pretty obvious even if we",
    "start": "3187900",
    "end": "3194530"
  },
  {
    "text": "do it with the local so nope nope move that well nope right there nope middle",
    "start": "3194530",
    "end": "3203710"
  },
  {
    "text": "name yeah so yeah otherwise p-doped middle name could have returned nan not on them",
    "start": "3203710",
    "end": "3208840"
  },
  {
    "text": "know if it's here it is evil here it works fine because we don't get the",
    "start": "3208840",
    "end": "3214230"
  },
  {
    "text": "squiggles anymore because string is declared locally is a non null string we only get it on the assignment right",
    "start": "3214230",
    "end": "3219790"
  },
  {
    "text": "where the air is but we sorry they're right so yes that's still broken",
    "start": "3219790",
    "end": "3228130"
  },
  {
    "text": "yeah and in fact this is where some of this will catch up by the time we get",
    "start": "3228130",
    "end": "3233440"
  },
  {
    "text": "there that's now considered a knowable strain the preview because it's taped to strength which will clearly change by",
    "start": "3233440",
    "end": "3238810"
  },
  {
    "text": "the time something like this ships so they'll fix the first quibbles but not the second right cause the compiler doesn't know that is no Lauren T returns",
    "start": "3238810",
    "end": "3245560"
  },
  {
    "text": "true if and so a couple things here if you look there's a blog post here on nullable reference types in c-sharp if",
    "start": "3245560",
    "end": "3251890"
  },
  {
    "text": "you just search for inaudible reference types in c-sharp you will find directions to install the preview if you want what we're looking for here",
    "start": "3251890",
    "end": "3259630"
  },
  {
    "text": "primarily is feedback on a machine that you're find installing a preview on try",
    "start": "3259630",
    "end": "3265960"
  },
  {
    "text": "to install something and just see what it does on your code base and see if you like the kind of guidance it tries to give you we're trying to make this find",
    "start": "3265960",
    "end": "3273430"
  },
  {
    "text": "things that can fix places that I would expect to find I'm sorry",
    "start": "3273430",
    "end": "3282810"
  },
  {
    "text": "there will have to be changes in the framework for different any place where a method expects or takes a reference",
    "start": "3282810",
    "end": "3290560"
  },
  {
    "text": "type and expects that could be null it's going to need the question mark on it yep yeah",
    "start": "3290560",
    "end": "3301829"
  },
  {
    "text": "yeah okay so here are some of the things that are proposed for c-sharp 7.3 a",
    "start": "3306660",
    "end": "3312930"
  },
  {
    "text": "little bit more referee's features you're seeing sort of a theme of performance around here ref local",
    "start": "3312930",
    "end": "3318180"
  },
  {
    "text": "reassignment ref this for extension methods right now you could write an extension method this braf something",
    "start": "3318180",
    "end": "3324240"
  },
  {
    "text": "it's going to be standardized as ref this and that would be the only one that works in verses a bivalve tiebreaker in",
    "start": "3324240",
    "end": "3330779"
  },
  {
    "text": "my demo you saw I just changed the argument from value to in right now if I",
    "start": "3330779",
    "end": "3337680"
  },
  {
    "text": "were to make a new method one which took in and one which took it by value in 7.2 that won't compile because those are",
    "start": "3337680",
    "end": "3344279"
  },
  {
    "text": "introduces an ambiguity in 7.3 my value will win and then you would have to",
    "start": "3344279",
    "end": "3350490"
  },
  {
    "text": "specify in at the call site if you wanted that one okay more generic",
    "start": "3350490",
    "end": "3356250"
  },
  {
    "text": "constraints on the proposal list is an enum constraint this thing must be",
    "start": "3356250",
    "end": "3361740"
  },
  {
    "text": "needham a delegate constraint this thing must be a delegate type excuse me and",
    "start": "3361740",
    "end": "3366829"
  },
  {
    "text": "Abe little constraint which again is performance related this thing must be",
    "start": "3366829",
    "end": "3372269"
  },
  {
    "text": "all value types such that if I copy its memory I effectively copied that struct",
    "start": "3372269",
    "end": "3378440"
  },
  {
    "text": "so that's what they mean by belittle a memory by byte by byte copy will produce a copy tuples will support the equal and",
    "start": "3378440",
    "end": "3387029"
  },
  {
    "text": "not equal operator this is another one that's really fun to dive in and document the short version is it will",
    "start": "3387029",
    "end": "3393900"
  },
  {
    "text": "work the way you think it probably should the long version is the only conversions that are allowed is a",
    "start": "3393900",
    "end": "3401029"
  },
  {
    "text": "lifting conversion to a nullable type either on the tuples themselves or on",
    "start": "3401029",
    "end": "3406589"
  },
  {
    "text": "the members of the tuples and the names of the members of the tuple don't matter",
    "start": "3406589",
    "end": "3411990"
  },
  {
    "text": "and don't don't participate in the Equality test so a tuple of a B and a",
    "start": "3411990",
    "end": "3418259"
  },
  {
    "text": "tuple of XY that are both intz they could be equal if they have the same values and then slicing arranges which",
    "start": "3418259",
    "end": "3426329"
  },
  {
    "text": "would allow pretty much the syntax for each bar n in one dot 100",
    "start": "3426329",
    "end": "3435049"
  },
  {
    "text": "I'm sorry that was a spend",
    "start": "3438610",
    "end": "3446210"
  },
  {
    "text": "yes that was a span so that will work different than this this is something different I believe it might be two dads",
    "start": "3446210",
    "end": "3455470"
  },
  {
    "text": "it may be increase it I'm sorry span",
    "start": "3455680",
    "end": "3466700"
  },
  {
    "text": "implementing ienumerable I I don't know of that that would be less a language feature than span implementing",
    "start": "3466700",
    "end": "3473300"
  },
  {
    "text": "ienumerable so be more of a framework feature or a library feature but you could use the",
    "start": "3473300",
    "end": "3479420"
  },
  {
    "text": "for each as a nicer way of writing a for loop than for int I equals 0 and last I",
    "start": "3479420",
    "end": "3487130"
  },
  {
    "text": "saw on Twitter the weather the weather 100 includes a hundred or not is still",
    "start": "3487130",
    "end": "3493970"
  },
  {
    "text": "open for vigorous debate right other ones native number types again",
    "start": "3493970",
    "end": "3500810"
  },
  {
    "text": "performance if you look right now every numeric type in c-sharp has a defined size in the language this would",
    "start": "3500810",
    "end": "3507770"
  },
  {
    "text": "introduce a type an int which would be the logical integer size for the CPU on",
    "start": "3507770",
    "end": "3514100"
  },
  {
    "text": "which the code is running ok similar to C and such expression variables in new",
    "start": "3514100",
    "end": "3523520"
  },
  {
    "text": "context you'll be able to use expression body members and expression initializers in places you can't now things will just",
    "start": "3523520",
    "end": "3530210"
  },
  {
    "text": "start to work that right now the compiler slaps you about that's a lot of where this one comes in and finally",
    "start": "3530210",
    "end": "3537380"
  },
  {
    "text": "attributes and auto implemented properties right now you cannot assign and/or attach an attribute whose target",
    "start": "3537380",
    "end": "3545090"
  },
  {
    "text": "type is a field to an auto implemented property this has already been merged so",
    "start": "3545090",
    "end": "3550610"
  },
  {
    "text": "this one will be delivered what this allows you to do is you can attach an attribute if it targets a field and you",
    "start": "3550610",
    "end": "3557450"
  },
  {
    "text": "attach it to an auto implemented property the compiler will attach the attribute to the compiler generated",
    "start": "3557450",
    "end": "3563300"
  },
  {
    "text": "backing field for that auto implemented property which I think the mono compiled is done for quite a long time",
    "start": "3563300",
    "end": "3569390"
  },
  {
    "text": "have accidentally every set of resources this would be a reasonable place to take",
    "start": "3569390",
    "end": "3575600"
  },
  {
    "text": "a picture and see the things that you would want to look at for this I'll leave this one up for a minute and then",
    "start": "3575600",
    "end": "3581030"
  },
  {
    "text": "we'll show you just a couple ways to track where these features are coming and participate you just you were just",
    "start": "3581030",
    "end": "3598100"
  },
  {
    "text": "ready there we go I'm sure you can treat to attack late right okay a couple",
    "start": "3598100",
    "end": "3606620"
  },
  {
    "text": "different things to look at on the DAX repo there is a project which is one of the links this shows everything that's",
    "start": "3606620",
    "end": "3612950"
  },
  {
    "text": "planned for c-sharp seven three and seven vb 15.6 if it's in the to-do",
    "start": "3612950",
    "end": "3618590"
  },
  {
    "text": "column it's already been merged in a master and barring something really amazing will get delivered i'll probably",
    "start": "3618590",
    "end": "3625100"
  },
  {
    "text": "start working on this soon if it's in the proposal column it is still being worked on and may get some changes so",
    "start": "3625100",
    "end": "3630860"
  },
  {
    "text": "I'm not writing these just yet what no just think I mean it yeah it's in the",
    "start": "3630860",
    "end": "3636920"
  },
  {
    "text": "open we're gonna do that no it's it's fun trying to write about things that'll set in flux if you really want to track",
    "start": "3636920",
    "end": "3643010"
  },
  {
    "text": "things carefully the c-sharp lang repo is where all the discussions on language",
    "start": "3643010",
    "end": "3648350"
  },
  {
    "text": "features are going there are milestones for each proposed release so these are",
    "start": "3648350",
    "end": "3654710"
  },
  {
    "text": "any issues that are being looked at for seven-point-three and if you look at the tags you can see how far they've gotten",
    "start": "3654710",
    "end": "3660590"
  },
  {
    "text": "along the proposal to implementation process if you're looking to give an issue you can see if someone has",
    "start": "3660590",
    "end": "3667550"
  },
  {
    "text": "actually started implementing it it will point to the implementation of it on the Roslin repo so this is a way to look at",
    "start": "3667550",
    "end": "3672770"
  },
  {
    "text": "the things that are being discussed everything is open if you have opinions please participate and with that we",
    "start": "3672770",
    "end": "3682220"
  },
  {
    "text": "pretty much made it so thank you",
    "start": "3682220",
    "end": "3687490"
  },
  {
    "text": "[Music] [Applause]",
    "start": "3687490",
    "end": "3689900"
  }
]