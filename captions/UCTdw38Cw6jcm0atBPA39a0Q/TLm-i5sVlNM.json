[
  {
    "text": "thanks for coming from the title it might seem like this is a talk about",
    "start": "5740",
    "end": "12020"
  },
  {
    "text": "performance but I can assure you that there is nothing about performance in this talk this is me my name is Isaac",
    "start": "12020",
    "end": "22609"
  },
  {
    "text": "and I'm a JavaScript consultant and instructor and I spend most of my time",
    "start": "22609",
    "end": "30400"
  },
  {
    "text": "programming JavaScript both on the server and on in the front-end some",
    "start": "30400",
    "end": "37640"
  },
  {
    "text": "people love to hate JavaScript I just absolutely love it some things are",
    "start": "37640",
    "end": "44239"
  },
  {
    "text": "rubbish but the best parts are golden and one",
    "start": "44239",
    "end": "50750"
  },
  {
    "text": "thing that I like in particular is react not because react is react but the idea",
    "start": "50750",
    "end": "59149"
  },
  {
    "text": "behind react and what it enables so there's other libraries with the same",
    "start": "59149",
    "end": "65630"
  },
  {
    "text": "qualities as react and even better ones more objectively and that are more pure",
    "start": "65630",
    "end": "72200"
  },
  {
    "text": "but the exact implementation isn't the important thing here but rather what it",
    "start": "72200",
    "end": "79130"
  },
  {
    "text": "enables and to explain what I mean by that",
    "start": "79130",
    "end": "84250"
  },
  {
    "text": "the yeah so to explain what I mean by that",
    "start": "90560",
    "end": "98220"
  },
  {
    "text": "we can look at how you create a component in react and in react that's a",
    "start": "98220",
    "end": "104610"
  },
  {
    "text": "matter of describing some UI based on some input so the input here is some",
    "start": "104610",
    "end": "112620"
  },
  {
    "text": "prop some data and then the output is some UI and it might become even more",
    "start": "112620",
    "end": "120090"
  },
  {
    "text": "clear if you look at these functional stateless components which are just",
    "start": "120090",
    "end": "125220"
  },
  {
    "text": "functions pure functions that take props and then return UI if you want to see it",
    "start": "125220",
    "end": "133650"
  },
  {
    "text": "without the JSX notation you can see that it's just function calls nested",
    "start": "133650",
    "end": "139410"
  },
  {
    "text": "function calls so we can use this component now to create a description",
    "start": "139410",
    "end": "146180"
  },
  {
    "text": "because the components here they don't actually return UI they've just returned",
    "start": "146180",
    "end": "151710"
  },
  {
    "text": "descriptions of UI so you could use this as a function that takes some input and",
    "start": "151710",
    "end": "158910"
  },
  {
    "text": "it will give you a description of some UI and that description might look",
    "start": "158910",
    "end": "165510"
  },
  {
    "text": "something like this for example it's a plain object just describing some UI so",
    "start": "165510",
    "end": "173280"
  },
  {
    "text": "this is just a value so the component",
    "start": "173280",
    "end": "178290"
  },
  {
    "text": "doesn't actually render anything it just describes the output to do the actual",
    "start": "178290",
    "end": "184530"
  },
  {
    "text": "rendering you would have to use the react runtime and it's the runtime that",
    "start": "184530",
    "end": "192450"
  },
  {
    "text": "actually does the Dom manipulations and actually get something to be rendered on",
    "start": "192450",
    "end": "197940"
  },
  {
    "text": "the screen so there's a runtime for rendering something to the browser",
    "start": "197940",
    "end": "203580"
  },
  {
    "text": "there's a runtime for rendering something to a string and there's a lot of other targets as well like native",
    "start": "203580",
    "end": "209640"
  },
  {
    "text": "devices now so the important thing here is that the runtime just takes a",
    "start": "209640",
    "end": "215130"
  },
  {
    "text": "description of what to render which is just a value and then the runtime",
    "start": "215130",
    "end": "222120"
  },
  {
    "text": "performs the actual operations to get something to be rendered on the screen",
    "start": "222120",
    "end": "227819"
  },
  {
    "text": "so what happens in react is that you might have some component tree which",
    "start": "227819",
    "end": "234090"
  },
  {
    "text": "consists of these pure functions that just returns descriptions of what your app should look like and then you have",
    "start": "234090",
    "end": "240959"
  },
  {
    "text": "this rendering engine wrapped around your application and then you might have",
    "start": "240959",
    "end": "248370"
  },
  {
    "text": "the Dom on the outside so that's completely on the outside it's a bit of",
    "start": "248370",
    "end": "253590"
  },
  {
    "text": "a misfortune that it's a bit far out on the outside but that's not a part of our",
    "start": "253590",
    "end": "263490"
  },
  {
    "text": "application so what might happen here is that the react rendering runtime tells",
    "start": "263490",
    "end": "269310"
  },
  {
    "text": "the component tree could you please render yourself and then pass me whatever description that yields and",
    "start": "269310",
    "end": "276710"
  },
  {
    "text": "then the actual runtime would patch the Dom to render this to the screen and",
    "start": "276710",
    "end": "282780"
  },
  {
    "text": "then maybe someone changes the state of your application then the runtime have",
    "start": "282780",
    "end": "287880"
  },
  {
    "text": "to ask again what is your output if the state is this and then it passes back",
    "start": "287880",
    "end": "293159"
  },
  {
    "text": "another description and then it patches the Dom again so what if you wanted to",
    "start": "293159",
    "end": "301530"
  },
  {
    "text": "write a test case for our component now for our application we could just write",
    "start": "301530",
    "end": "307560"
  },
  {
    "text": "a simple test case where we force some description we could produce some",
    "start": "307560",
    "end": "313169"
  },
  {
    "text": "description here and then we could just expect that to equal some description",
    "start": "313169",
    "end": "320130"
  },
  {
    "text": "that we wanted it to yield so this is just comparing values we're not actually doing anything against the browser or",
    "start": "320130",
    "end": "328080"
  },
  {
    "text": "any rendering here we're just comparing descriptions and since we have this new",
    "start": "328080",
    "end": "334740"
  },
  {
    "text": "way of calling functions with jsx this new syntax introduced with react we",
    "start": "334740",
    "end": "342389"
  },
  {
    "text": "can make it look even simpler because if we use JSX we could just expect that to",
    "start": "342389",
    "end": "348330"
  },
  {
    "text": "give some kind of output producing this description which would again just turn",
    "start": "348330",
    "end": "354180"
  },
  {
    "text": "into an object just a value so what",
    "start": "354180",
    "end": "359909"
  },
  {
    "text": "reacted is that it made it easy to describe UI and to test your UI",
    "start": "359909",
    "end": "365400"
  },
  {
    "text": "and that makes me really happy because that used to be really hard if you think",
    "start": "365400",
    "end": "372630"
  },
  {
    "text": "about like really imperative solutions like jQuery or other solutions where you",
    "start": "372630",
    "end": "378510"
  },
  {
    "text": "don't have this divide between describing and the actual rendering",
    "start": "378510",
    "end": "383660"
  },
  {
    "text": "another library I like really much is Redux not because Redux is Redux or the",
    "start": "383660",
    "end": "390870"
  },
  {
    "text": "hype or anything but I rather like the idea behind it and especially Redux because it is the simplest",
    "start": "390870",
    "end": "398100"
  },
  {
    "text": "implementation of this idea you could pretty much create the core of Redux in",
    "start": "398100",
    "end": "404370"
  },
  {
    "text": "seventeen lines of code maybe less so if we take a look at redux then by the way",
    "start": "404370",
    "end": "411389"
  },
  {
    "text": "the logo here was really hard to draw for some reason so if you look at Redux",
    "start": "411389",
    "end": "417330"
  },
  {
    "text": "now in redux you have this way of describing actions that might change the",
    "start": "417330",
    "end": "423900"
  },
  {
    "text": "state of your application and these descriptions are just values so here",
    "start": "423900",
    "end": "429360"
  },
  {
    "text": "it's represented by just a plain object and then you have this so-called reducer",
    "start": "429360",
    "end": "436320"
  },
  {
    "text": "function which is just a mechanism that takes your previous States and a",
    "start": "436320",
    "end": "441479"
  },
  {
    "text": "description of what to happen and then it returns a new state based on that so",
    "start": "441479",
    "end": "447630"
  },
  {
    "text": "you are the one who decides how state is updated and how state is represented and",
    "start": "447630",
    "end": "452990"
  },
  {
    "text": "this again is used as input to create this Redux runtime because the store is",
    "start": "452990",
    "end": "460860"
  },
  {
    "text": "what actually handles all of your states and then we can pass descriptions to",
    "start": "460860",
    "end": "466889"
  },
  {
    "text": "this runtime by dispatching so-called actions so the action here is just a",
    "start": "466889",
    "end": "473160"
  },
  {
    "text": "description just data just a value and then the runtime does the actual state",
    "start": "473160",
    "end": "478830"
  },
  {
    "text": "updating so if you wanted to write a test case for our states updating logic",
    "start": "478830",
    "end": "484440"
  },
  {
    "text": "now we could just define some kind of",
    "start": "484440",
    "end": "490320"
  },
  {
    "text": "initial States that we wanted to start in just define a set of actions that we",
    "start": "490320",
    "end": "497490"
  },
  {
    "text": "wanted to process in our system through selection the increment action here has happened three times and then we could",
    "start": "497490",
    "end": "504930"
  },
  {
    "text": "just expect that the result of reducing all of those actions with the initial",
    "start": "504930",
    "end": "510330"
  },
  {
    "text": "States and our reducer function that it returns the states that we expect so",
    "start": "510330",
    "end": "516510"
  },
  {
    "text": "that we go from having to state 10 to having the state 13 so now again Redux",
    "start": "516510",
    "end": "522840"
  },
  {
    "text": "made this whole deal of describing state update logic a lot easier and also",
    "start": "522840",
    "end": "531690"
  },
  {
    "text": "testing your state update logic that again makes me really happy because that",
    "start": "531690",
    "end": "537030"
  },
  {
    "text": "used to be really hard like a global global mess so on what both react and",
    "start": "537030",
    "end": "548040"
  },
  {
    "text": "redux here have in common is that they've taken the fact that you're both",
    "start": "548040",
    "end": "554280"
  },
  {
    "text": "describing and doing things and it separated it into separate parts so one",
    "start": "554280",
    "end": "560820"
  },
  {
    "text": "part is describing what to do and the other part is actually doing things and",
    "start": "560820",
    "end": "567000"
  },
  {
    "text": "this is really great because this means less complexity in the true sense of the",
    "start": "567000",
    "end": "572070"
  },
  {
    "text": "word because things are less braided together you cannot have the separate boxes now to put the different things in",
    "start": "572070",
    "end": "578810"
  },
  {
    "text": "so that's really good so now we have UI",
    "start": "578810",
    "end": "584640"
  },
  {
    "text": "and state covered here but the hardest",
    "start": "584640",
    "end": "590820"
  },
  {
    "text": "thing might not be the UI in the state but at least we have a third thing maybe",
    "start": "590820",
    "end": "598500"
  },
  {
    "text": "a fourth which is how do I orchestrate",
    "start": "598500",
    "end": "603690"
  },
  {
    "text": "all the asynchronous flow here in my application because how do I decide when",
    "start": "603690",
    "end": "609120"
  },
  {
    "text": "things should happen how to decide when to dispatch which actions when I'm doing",
    "start": "609120",
    "end": "615570"
  },
  {
    "text": "things asynchronously and if I'm having a lot of side effects in my application",
    "start": "615570",
    "end": "621980"
  },
  {
    "text": "but side effects what-what has side effects really so when I'm saying side effects here",
    "start": "623030",
    "end": "629340"
  },
  {
    "text": "it's everything for that might interact with something on the outside like the",
    "start": "629340",
    "end": "636360"
  },
  {
    "text": "network or printing something to the screen writing something to a disk may",
    "start": "636360",
    "end": "644460"
  },
  {
    "text": "be rendering something to some platform basically anything that interacts with",
    "start": "644460",
    "end": "649590"
  },
  {
    "text": "the atom with the real world is a side effect and we need side effects because",
    "start": "649590",
    "end": "655650"
  },
  {
    "text": "without side effects our applications wouldn't actually do anything they would",
    "start": "655650",
    "end": "660810"
  },
  {
    "text": "just be pure programs that did calculations and that doesn't really",
    "start": "660810",
    "end": "666180"
  },
  {
    "text": "have any real value in the real world and when we think about these side",
    "start": "666180",
    "end": "672900"
  },
  {
    "text": "effects here in our let's say react in Redux applications it usually comes down",
    "start": "672900",
    "end": "678510"
  },
  {
    "text": "to the part where you're doing something asynchronously like let's say you're",
    "start": "678510",
    "end": "683670"
  },
  {
    "text": "getting some data from the server and then you're going to populate that back maybe you're doing something else",
    "start": "683670",
    "end": "689220"
  },
  {
    "text": "asynchronously at the same time so if you look at this pattern here which is",
    "start": "689220",
    "end": "694650"
  },
  {
    "text": "called a thunk you can see that we are",
    "start": "694650",
    "end": "700310"
  },
  {
    "text": "dispatching actions at different times here and the actual operation of",
    "start": "700310",
    "end": "707700"
  },
  {
    "text": "dispatching something here or going to the network to get something is a side effect so that means that if you wanted",
    "start": "707700",
    "end": "715590"
  },
  {
    "text": "to test things here we would have to write mocks which is pretty unfortunate",
    "start": "715590",
    "end": "721920"
  },
  {
    "text": "but just to avoid coupling this to read us and react I want to make this example",
    "start": "721920",
    "end": "730170"
  },
  {
    "text": "a bit more generic so you can just say that we have a function which we're calling a procedure here which just does",
    "start": "730170",
    "end": "736650"
  },
  {
    "text": "a lot of stuff it gets a random number it logs out that number if that number",
    "start": "736650",
    "end": "742710"
  },
  {
    "text": "is higher or lower than 0.5 it logs out something different then it does a request and then it writes the result of",
    "start": "742710",
    "end": "749610"
  },
  {
    "text": "that request to a file so we have a lot of side effects here so to visualize",
    "start": "749610",
    "end": "754710"
  },
  {
    "text": "what happens here we have this procedure",
    "start": "754710",
    "end": "760990"
  },
  {
    "text": "and then this procedure calls out to do a lot of side effects so when we get a",
    "start": "760990",
    "end": "767320"
  },
  {
    "text": "random number you actually have to go to the computer and get some kind of entropy to get around the number maybe",
    "start": "767320",
    "end": "773110"
  },
  {
    "text": "someone throws the dice or it's in some case we need to interact with the real world and when you log something you",
    "start": "773110",
    "end": "779709"
  },
  {
    "text": "have to print something to standard out if you make a request you have to go to the network if you write to the file you",
    "start": "779709",
    "end": "788830"
  },
  {
    "text": "have to access a disk and so on but if you look at this now what you can notice",
    "start": "788830",
    "end": "794320"
  },
  {
    "text": "is that there is no boundary here there's no boundary between the thing",
    "start": "794320",
    "end": "801640"
  },
  {
    "text": "that describes what to do and the thing that actually performs all of those things so we so when we don't have those",
    "start": "801640",
    "end": "810910"
  },
  {
    "text": "boundaries we have to resort to things like mocks so if we look at this",
    "start": "810910",
    "end": "817300"
  },
  {
    "text": "procedure again now you can see that we if we wanted to write a test case for this procedure we would have to mock out",
    "start": "817300",
    "end": "824170"
  },
  {
    "text": "a lot of things here we'd have to mock out math.random console.log the request thing we're using here right to file and",
    "start": "824170",
    "end": "831760"
  },
  {
    "text": "so on and so on and and that makes me really sad because who wants to write",
    "start": "831760",
    "end": "837520"
  },
  {
    "text": "mocks who here enjoys the right mocks no one of course and the worst thing is",
    "start": "837520",
    "end": "847089"
  },
  {
    "text": "mocks that have a lot of behavior because mocking behavior is the hardest",
    "start": "847089",
    "end": "852250"
  },
  {
    "text": "thing because to be able to test things you have to mirror the behavior and behavior of the real thing which can be",
    "start": "852250",
    "end": "859750"
  },
  {
    "text": "really hard and expensive and it has to be maintained alongside your actual application code so again what we want",
    "start": "859750",
    "end": "868959"
  },
  {
    "text": "to do here is we want to take this and be able to separate whatever describes",
    "start": "868959",
    "end": "875470"
  },
  {
    "text": "what to do from the part that actually does it so it's time for a little story",
    "start": "875470",
    "end": "883920"
  },
  {
    "text": "a story about Frank procedure Johnny run time and his evil twin brother this is",
    "start": "883920",
    "end": "893110"
  },
  {
    "text": "Frank Frank pretty much just lives in the",
    "start": "893110",
    "end": "900950"
  },
  {
    "text": "world where there's flowers there's trees there's the ground and the Sun and",
    "start": "900950",
    "end": "906800"
  },
  {
    "text": "all that thinks you're used to and Frank can interact with the world he can for",
    "start": "906800",
    "end": "913550"
  },
  {
    "text": "example observe things he can observe what time of day it is what kind of",
    "start": "913550",
    "end": "919370"
  },
  {
    "text": "temperature it is and he can observe different events that happen in the world and he can also interact with the",
    "start": "919370",
    "end": "927800"
  },
  {
    "text": "world or mutate the world he can do things like chop down a tree he can dig",
    "start": "927800",
    "end": "933470"
  },
  {
    "text": "a hole he can pick some flowers you name it he can do a lot of things to manipulate the real world but Frank also",
    "start": "933470",
    "end": "941690"
  },
  {
    "text": "has some special characteristics which is that Frank is incapable of lying and",
    "start": "941690",
    "end": "951560"
  },
  {
    "text": "he also have this very specific job and he does exactly what he is instructed to",
    "start": "951560",
    "end": "958150"
  },
  {
    "text": "and nothing else so that's Frank",
    "start": "958150",
    "end": "963940"
  },
  {
    "text": "it's a Frank's job it's pretty much - every day his instructions are to wait",
    "start": "963940",
    "end": "970310"
  },
  {
    "text": "for the sunrise when the Sun rises you should measure the temperature if the",
    "start": "970310",
    "end": "976790"
  },
  {
    "text": "temperature is below 15 degrees you should chop down a tree and make a fire because it's cold if not he should just",
    "start": "976790",
    "end": "985490"
  },
  {
    "text": "like pick some flowers to make a bouquet have a nice day and then whenever that",
    "start": "985490",
    "end": "991339"
  },
  {
    "text": "is done he should wait for next sunrise and do the same thing so Frank is pretty",
    "start": "991339",
    "end": "998060"
  },
  {
    "text": "happy because he knows what to do every day and he does what he's supposed to you might think but can we really be",
    "start": "998060",
    "end": "1005890"
  },
  {
    "text": "sure that Frank is doing what is what he's supposed to for any condition of the world it's been it's been 20 degrees",
    "start": "1005890",
    "end": "1015279"
  },
  {
    "text": "over the last 10 years so we don't really know what Frank is gonna like chop down a tree and make a fire if it",
    "start": "1015279",
    "end": "1020290"
  },
  {
    "text": "turns cold but we want to make sure that he actually does that so how can we make",
    "start": "1020290",
    "end": "1026020"
  },
  {
    "text": "sure that fry does exactly what it's supposed to for",
    "start": "1026020",
    "end": "1031030"
  },
  {
    "text": "any state of the world and Frank pretty",
    "start": "1031030",
    "end": "1039490"
  },
  {
    "text": "much cannot answer what-if questions because he only does exactly what is told so we either have to wait for all",
    "start": "1039490",
    "end": "1047410"
  },
  {
    "text": "of these different conditions to happen naturally in the world which seems really inconvenient or we can fake all",
    "start": "1047410",
    "end": "1054010"
  },
  {
    "text": "of the conditions in the world and that would include like making a lot of plastic flowers and plastic trees and",
    "start": "1054010",
    "end": "1061390"
  },
  {
    "text": "making something that could fake a Sun Rise and that just seems really expensive and hard because the Sun Rise",
    "start": "1061390",
    "end": "1069160"
  },
  {
    "text": "only happens once a day so it would be really inconvenient just to be able to test things once a day so faking all",
    "start": "1069160",
    "end": "1078640"
  },
  {
    "text": "these things in the real world is hard because that means that you have to mirror how the real world works so what",
    "start": "1078640",
    "end": "1087820"
  },
  {
    "text": "do we do then first we'll have to introduce Johnny",
    "start": "1087820",
    "end": "1094170"
  },
  {
    "text": "Johnny runtime and Johnny runtime performs tasks if you tell him to do",
    "start": "1094170",
    "end": "1102160"
  },
  {
    "text": "something he'll do it like if you ask him could you please tell me when the Sun has risen he'll tell you that could",
    "start": "1102160",
    "end": "1111280"
  },
  {
    "text": "you tell me what the temperature is and he'll tell you that could you chop down a tree for me yeah he'll do that but",
    "start": "1111280",
    "end": "1120610"
  },
  {
    "text": "Johnny doesn't have any understanding of like the order of things he just like gets he does single requests and then",
    "start": "1120610",
    "end": "1128920"
  },
  {
    "text": "gives you a result back let's try another scenario here where we have both",
    "start": "1128920",
    "end": "1134800"
  },
  {
    "text": "Frank and Johnny in our world so it's the same world flowers but you can see",
    "start": "1134800",
    "end": "1144520"
  },
  {
    "text": "now that at least some of you might see that it's supposed to be night like that's a nice guy but we'll have to make",
    "start": "1144520",
    "end": "1154510"
  },
  {
    "text": "some restrictions for Frank here because we don't really want Frank to interact with the real world anymore",
    "start": "1154510",
    "end": "1160730"
  },
  {
    "text": "so we couldn't have to build like this wooden cabin around Frank with no windows you have the door but like the",
    "start": "1160730",
    "end": "1169850"
  },
  {
    "text": "only way he can communicate with the outside world it's like passing notes under the door that's you can't hear",
    "start": "1169850",
    "end": "1175700"
  },
  {
    "text": "anything can't see anything it's nice and warm and cozy but other than that it's like completely isolated",
    "start": "1175700",
    "end": "1184480"
  },
  {
    "text": "let's see how this interaction now might go down so we'll start out by Frank",
    "start": "1184480",
    "end": "1193610"
  },
  {
    "text": "knows that he's supposed to wait for the sunrise so what Frank does is that he",
    "start": "1193610",
    "end": "1198830"
  },
  {
    "text": "passes a note a post-it note under the door saying that could you please whoever is outside notify me when the",
    "start": "1198830",
    "end": "1205820"
  },
  {
    "text": "Sun rises and so the Sun rises and",
    "start": "1205820",
    "end": "1211010"
  },
  {
    "text": "Johnny passes the note under the door to Frank to tell him that the Sun has risen",
    "start": "1211010",
    "end": "1217300"
  },
  {
    "text": "then Frank passes another note back and ask for key I want to know what the",
    "start": "1217300",
    "end": "1223040"
  },
  {
    "text": "temperature is now like you nee writes that on the note could you please tell me what the temperature is and Johnny",
    "start": "1223040",
    "end": "1228440"
  },
  {
    "text": "okay sure I'll measure the temperature and then he passes the note back telling him that it's 20 degrees and then Frank",
    "start": "1228440",
    "end": "1236680"
  },
  {
    "text": "passes another note to him telling him to go pick some flowers and have a nice day",
    "start": "1236680",
    "end": "1241750"
  },
  {
    "text": "so Frank doesn't get to get to have any fun anymore but Johnny does so he picked",
    "start": "1241750",
    "end": "1250550"
  },
  {
    "text": "some flowers and then it passes another note under the door telling me telling Frank that yeah I picked the flowers I'm",
    "start": "1250550",
    "end": "1256880"
  },
  {
    "text": "done and then Frank passes another note telling him could you please tell me that when the Sun rises and then you",
    "start": "1256880",
    "end": "1264110"
  },
  {
    "text": "have this loop going so that seemed okay",
    "start": "1264110",
    "end": "1269180"
  },
  {
    "text": "not for Frank though but like keep disregard humanity in this example but",
    "start": "1269180",
    "end": "1277520"
  },
  {
    "text": "how does this make it easier to test that Frank does what he's supposed to",
    "start": "1277520",
    "end": "1282740"
  },
  {
    "text": "for all conditions that's where we have to introduce Johnny's evil twin brother",
    "start": "1282740",
    "end": "1289450"
  },
  {
    "text": "Bill bogus Mack testy bill bogus max ft he will lie about",
    "start": "1289450",
    "end": "1296530"
  },
  {
    "text": "anything and but the good thing is that he will take instructions about which",
    "start": "1296530",
    "end": "1302950"
  },
  {
    "text": "lies to serve and bill actually never",
    "start": "1302950",
    "end": "1307990"
  },
  {
    "text": "interacts with the world he doesn't care about the world he's really self-centered this is only job he lies",
    "start": "1307990",
    "end": "1314200"
  },
  {
    "text": "about things and takes instructions about what to lie about so what if we replace Johnny now with Bill so we start",
    "start": "1314200",
    "end": "1324760"
  },
  {
    "text": "up the same it's the night it's a middle of the night and Frank passes a note",
    "start": "1324760",
    "end": "1330700"
  },
  {
    "text": "under the door telling whoever is outside to please let me know when the Sun rises and Johnny gets a bill gets",
    "start": "1330700",
    "end": "1340240"
  },
  {
    "text": "the note and he just passes the note back telling him yeah the Sun is risen like it definitely hasn't but it's just",
    "start": "1340240",
    "end": "1348040"
  },
  {
    "text": "yeah why not this reason sure and then Frank passes",
    "start": "1348040",
    "end": "1353710"
  },
  {
    "text": "another note back telling him could you please tell me the temperature and Bill just I don't want to measure the",
    "start": "1353710",
    "end": "1358809"
  },
  {
    "text": "temperature I'll just tell you that it's a zero degrees so he passes a note back describing that it's a zero degrees so",
    "start": "1358809",
    "end": "1366670"
  },
  {
    "text": "Frank doing his job passes another note back out to Bill because now the Frank",
    "start": "1366670",
    "end": "1374440"
  },
  {
    "text": "is supposed to tell whoever is outside to chop down a tree and make a fire and",
    "start": "1374440",
    "end": "1379950"
  },
  {
    "text": "Bill gets the note he does nothing and then he passes the note back in telling",
    "start": "1379950",
    "end": "1385780"
  },
  {
    "text": "him that yeah I chopped down a tree and made a fire and then that starts again",
    "start": "1385780",
    "end": "1391720"
  },
  {
    "text": "right now Frank asks for like the next sunrise so the important thing to notice",
    "start": "1391720",
    "end": "1399429"
  },
  {
    "text": "here now is that we we can now test that",
    "start": "1399429",
    "end": "1406270"
  },
  {
    "text": "Frank does the right thing for any state of the world but we didn't really have",
    "start": "1406270",
    "end": "1414550"
  },
  {
    "text": "to mock we didn't have to fake any behavior here so we didn't make any",
    "start": "1414550",
    "end": "1420550"
  },
  {
    "text": "marks we didn't make any plastic trees or any props",
    "start": "1420550",
    "end": "1427230"
  },
  {
    "text": "but rather we only mocked values because the only thing that we had to mock here",
    "start": "1427419",
    "end": "1434649"
  },
  {
    "text": "was what was written on the note passed under the door and that doesn't have any",
    "start": "1434649",
    "end": "1439929"
  },
  {
    "text": "behavior that is just values that it's just data so this seems like maybe this",
    "start": "1439929",
    "end": "1449830"
  },
  {
    "text": "maybe maybe this is a good idea to be able to test our asynchronous procedures",
    "start": "1449830",
    "end": "1459450"
  },
  {
    "text": "but how would you translate this into code like how would you do something",
    "start": "1459450",
    "end": "1465100"
  },
  {
    "text": "like this in JavaScript because obviously you cannot pass things in and out of functions in several places a",
    "start": "1465100",
    "end": "1472149"
  },
  {
    "text": "function has takes input in the start and then it returns something at the end so clearly using a function here just",
    "start": "1472149",
    "end": "1480130"
  },
  {
    "text": "wouldn't suck the surface so let me I'll have to take a look at this really nice",
    "start": "1480130",
    "end": "1486130"
  },
  {
    "text": "feature that came in es6 called generators some other languages have had",
    "start": "1486130",
    "end": "1492700"
  },
  {
    "text": "generators for a long time how many of you have heard of generators some of you",
    "start": "1492700",
    "end": "1501309"
  },
  {
    "text": "how many like have used actually used generators okay not not a lot of you so",
    "start": "1501309",
    "end": "1508269"
  },
  {
    "text": "then it's pretty fitting with a introduction then so a generator looks",
    "start": "1508269",
    "end": "1519549"
  },
  {
    "text": "very much like a function except it has this star and you have this new keyword",
    "start": "1519549",
    "end": "1526870"
  },
  {
    "text": "called yield so it looks pretty much like a function but it doesn't act like",
    "start": "1526870",
    "end": "1534070"
  },
  {
    "text": "a regular function because calling a if we create if you call a generator",
    "start": "1534070",
    "end": "1542200"
  },
  {
    "text": "function it'll return something to you called an iterator and if we use this",
    "start": "1542200",
    "end": "1547750"
  },
  {
    "text": "new for of loop syntax that came in es6 as well in this case it'll just by turn",
    "start": "1547750",
    "end": "1556179"
  },
  {
    "text": "logout one two three because that was a Val use that would eat was yielded out of",
    "start": "1556179",
    "end": "1561460"
  },
  {
    "text": "this generator and seemingly it doesn't really care about this return statement",
    "start": "1561460",
    "end": "1567030"
  },
  {
    "text": "this is only logout 1 2 & 3 but we can also manually step through generators or",
    "start": "1567030",
    "end": "1575680"
  },
  {
    "text": "these iterators rather so we can create a certain iterator from this generator",
    "start": "1575680",
    "end": "1582850"
  },
  {
    "text": "function and then we can start stepping",
    "start": "1582850",
    "end": "1588430"
  },
  {
    "text": "through this function so an iterator has this interface where it has a method",
    "start": "1588430",
    "end": "1595690"
  },
  {
    "text": "next that it uses to skip to the next point that is yielded inside the",
    "start": "1595690",
    "end": "1601090"
  },
  {
    "text": "generator so what happens here is that the first time we call next here it's it skips down to the first yield and then",
    "start": "1601090",
    "end": "1608380"
  },
  {
    "text": "it returns an object with the value that was yielded and it also tells you if",
    "start": "1608380",
    "end": "1613690"
  },
  {
    "text": "this generator function is done running and it obviously isn't done running yet",
    "start": "1613690",
    "end": "1619570"
  },
  {
    "text": "because we've just hit the first yield if I call next again it'll give me the value 2 it'll tell me that I'm still not",
    "start": "1619570",
    "end": "1626860"
  },
  {
    "text": "done I'll call next again it'll skip 2 the value 3 and then I'm still not done",
    "start": "1626860",
    "end": "1632320"
  },
  {
    "text": "and when I call next again it'll give me finished so obviously now it does care",
    "start": "1632320",
    "end": "1638740"
  },
  {
    "text": "about the return statement so now I got finished out and it also tells me that I'm done done is true if I call next",
    "start": "1638740",
    "end": "1645010"
  },
  {
    "text": "again it just gives me undefined that's the value and tell me that I'm still",
    "start": "1645010",
    "end": "1650650"
  },
  {
    "text": "done like I don't have any more values for you so let's take a bit more",
    "start": "1650650",
    "end": "1657910"
  },
  {
    "text": "extended example here where we have this generator function which will count to 3",
    "start": "1657910",
    "end": "1665050"
  },
  {
    "text": "like we have 3 yields inside here but we'll also log out something here we",
    "start": "1665050",
    "end": "1671500"
  },
  {
    "text": "login the result of yielding this value so we'll start out by creating this",
    "start": "1671500",
    "end": "1677110"
  },
  {
    "text": "iterator instance and then we'll call next so what happens when I call next",
    "start": "1677110",
    "end": "1684040"
  },
  {
    "text": "year is that the generator jumped down to the first yield and then it gives me",
    "start": "1684040",
    "end": "1690400"
  },
  {
    "text": "back the value one and done false and the next time here I'm going to call",
    "start": "1690400",
    "end": "1697200"
  },
  {
    "text": "next with the value 5 and when I do that it actually logs out first number 5 so",
    "start": "1697200",
    "end": "1707009"
  },
  {
    "text": "it seems like we've been able to pass a value in into the function here and then",
    "start": "1707009",
    "end": "1712679"
  },
  {
    "text": "it jumps to the next next yield and it gives me out the value 2 and says I'm",
    "start": "1712679",
    "end": "1718049"
  },
  {
    "text": "still not done and then we pass in the value 10 on the next it logs out second",
    "start": "1718049",
    "end": "1726450"
  },
  {
    "text": "number 10 jumps to the next yield and then it gives me back the value 3 and",
    "start": "1726450",
    "end": "1733049"
  },
  {
    "text": "done false and then I pass in the value 15 and then it logs out the third number",
    "start": "1733049",
    "end": "1739830"
  },
  {
    "text": "15 and then jumps to the return statement and then it gives me the",
    "start": "1739830",
    "end": "1746029"
  },
  {
    "text": "return statement value and it says that it's done it's done running so what's",
    "start": "1746029",
    "end": "1754470"
  },
  {
    "text": "happened here is that we've actually been able to replace those yield values there by putting these values into the",
    "start": "1754470",
    "end": "1762330"
  },
  {
    "text": "generator function so it seems like we're both able to get things out of",
    "start": "1762330",
    "end": "1768899"
  },
  {
    "text": "generators and put things into them which is pretty much what we want",
    "start": "1768899",
    "end": "1774809"
  },
  {
    "text": "because we want to be able to pass things between this boundary and this",
    "start": "1774809",
    "end": "1782129"
  },
  {
    "text": "might be exactly what we're looking for because now we see that we can get values out we can take values into the",
    "start": "1782129",
    "end": "1789899"
  },
  {
    "text": "generator and then we get this really good idea that why can't we just use",
    "start": "1789899",
    "end": "1796139"
  },
  {
    "text": "this to pass descriptions of side-effects out of the generator",
    "start": "1796139",
    "end": "1805220"
  },
  {
    "text": "because now we have this semantics here to be able to pass just values in and",
    "start": "1805489",
    "end": "1812639"
  },
  {
    "text": "out of these generators so what if we create ourselves a function here a function called call which takes a",
    "start": "1812639",
    "end": "1819690"
  },
  {
    "text": "function and then a set of arguments and then it returns an object which is a",
    "start": "1819690",
    "end": "1826259"
  },
  {
    "text": "description of calling some function with some arguments so to explain what I mean here",
    "start": "1826259",
    "end": "1834350"
  },
  {
    "text": "is that if you use this call function we could create a description of calling",
    "start": "1834350",
    "end": "1841520"
  },
  {
    "text": "console.log with hello and world as its arguments that would give back a object",
    "start": "1841520",
    "end": "1849080"
  },
  {
    "text": "here with that description so this doesn't actually call console.log with",
    "start": "1849080",
    "end": "1855560"
  },
  {
    "text": "hello world it just returns a description of calling it so this actually doesn't do anything to be able",
    "start": "1855560",
    "end": "1863870"
  },
  {
    "text": "to do something with this we would need some kind of mechanism that could take these descriptions and then perform",
    "start": "1863870",
    "end": "1871520"
  },
  {
    "text": "these actual effects so we'll create another function here called perform effect which takes this description as",
    "start": "1871520",
    "end": "1878990"
  },
  {
    "text": "input and then this perform effect here now obviously only supports the call",
    "start": "1878990",
    "end": "1886670"
  },
  {
    "text": "effect and if it gets a call effect it'll take the function call it with the",
    "start": "1886670",
    "end": "1892940"
  },
  {
    "text": "arguments and then return a promise of the result so in use this would look",
    "start": "1892940",
    "end": "1899870"
  },
  {
    "text": "like this so if we made this description here of calling console.log with hello",
    "start": "1899870",
    "end": "1904910"
  },
  {
    "text": "world we could perform that effect by just passing that effect to perform",
    "start": "1904910",
    "end": "1910880"
  },
  {
    "text": "effect and it'll log out hello world or we could just do this directly by",
    "start": "1910880",
    "end": "1918250"
  },
  {
    "text": "passing an object describing this directly to to perform effect that we",
    "start": "1918250",
    "end": "1927290"
  },
  {
    "text": "just log out hello world so again what we've done here now is we've been able",
    "start": "1927290",
    "end": "1933710"
  },
  {
    "text": "to separate the actual doing of something and then the describing but",
    "start": "1933710",
    "end": "1939920"
  },
  {
    "text": "there's still one thing missing here because we don't really have who is",
    "start": "1939920",
    "end": "1945860"
  },
  {
    "text": "going going to make sure that this generator gets step through like we",
    "start": "1945860",
    "end": "1951320"
  },
  {
    "text": "don't you don't want to do that manually so we'll need some kind of runtime that",
    "start": "1951320",
    "end": "1958190"
  },
  {
    "text": "would be responsible for actually running all of our procedures so an example of a",
    "start": "1958190",
    "end": "1967509"
  },
  {
    "text": "runtime like this would be a function that would take a generator function",
    "start": "1967509",
    "end": "1974490"
  },
  {
    "text": "which would then make an instance of that generator function and iterator and",
    "start": "1974490",
    "end": "1982049"
  },
  {
    "text": "then we would recursively step through this and whenever their generator yields",
    "start": "1982049",
    "end": "1989110"
  },
  {
    "text": "some description of an effect out we're supposed to resolve that effect perform it and then return the result back into",
    "start": "1989110",
    "end": "1996389"
  },
  {
    "text": "the yield in the generator so we're kind of just like the generator is passing a description of doing something else and",
    "start": "1996389",
    "end": "2002970"
  },
  {
    "text": "gets the actual value back so this",
    "start": "2002970",
    "end": "2009960"
  },
  {
    "text": "procedure now where we're doing things directly we're like doing side-effects directly here translating this over to a",
    "start": "2009960",
    "end": "2017820"
  },
  {
    "text": "generator we would replace all of the direct calls here with yields which",
    "start": "2017820",
    "end": "2026820"
  },
  {
    "text": "pretty much this creates a description of calling math.random without any arguments and that's what we push out of",
    "start": "2026820",
    "end": "2034379"
  },
  {
    "text": "the generator and then it's up to the runtime how to actually handle that you",
    "start": "2034379",
    "end": "2039629"
  },
  {
    "text": "can see that all of the side-effects here have been replaced with descriptions of side-effects that we just push out of the generator so if you",
    "start": "2039629",
    "end": "2050339"
  },
  {
    "text": "look at this procedure now it doesn't actually do anything anymore it does nothing other than compute",
    "start": "2050339",
    "end": "2057980"
  },
  {
    "text": "because all of this is just descriptions it doesn't actually log something it doesn't write to the disk it does",
    "start": "2057980",
    "end": "2064500"
  },
  {
    "text": "nothing it depends on the run time to actually get anything done so to run our",
    "start": "2064500",
    "end": "2073888"
  },
  {
    "text": "procedure now instead of just calling the procedure and letting it run we're passing this procedure to our run time",
    "start": "2073889",
    "end": "2082220"
  },
  {
    "text": "and this looks something like this where we now have our procedure like before",
    "start": "2082220",
    "end": "2089000"
  },
  {
    "text": "which is now a generator function which yields descriptions of doing things out of it",
    "start": "2089000",
    "end": "2095370"
  },
  {
    "text": "so now we have a runtime like encapsulating our procedure so the",
    "start": "2095370",
    "end": "2102060"
  },
  {
    "text": "runtime starts stepping through the procedure the procedure yields out some description of doing something and then",
    "start": "2102060",
    "end": "2109920"
  },
  {
    "text": "the runtime actually goes out and gets a random number and passes it back to the procedure and then passes the data back",
    "start": "2109920",
    "end": "2117450"
  },
  {
    "text": "into the to the procedure here it steps to the next it logs out something to",
    "start": "2117450",
    "end": "2124310"
  },
  {
    "text": "standard out and that doesn't really return anything so we're not expecting",
    "start": "2124310",
    "end": "2129930"
  },
  {
    "text": "it to either then we're doing a request the runtime goes out to the network gets",
    "start": "2129930",
    "end": "2135810"
  },
  {
    "text": "the results and then passing it back in to the procedure and the same when we're writing something to the disk here so",
    "start": "2135810",
    "end": "2142170"
  },
  {
    "text": "the runtime is doing a lot of things here and the procedure is just describing what to do so what about",
    "start": "2142170",
    "end": "2150030"
  },
  {
    "text": "testing this now because now we have a",
    "start": "2150030",
    "end": "2155240"
  },
  {
    "text": "procedure that doesn't actually do anything it just describes things and then the runtime performs any of it and",
    "start": "2155240",
    "end": "2166170"
  },
  {
    "text": "between the boundary here between the procedure and the runtime the only thing",
    "start": "2166170",
    "end": "2171330"
  },
  {
    "text": "that passes that boundary is values only data nothing that has any behavior so",
    "start": "2171330",
    "end": "2176820"
  },
  {
    "text": "this is just plain values plain data so",
    "start": "2176820",
    "end": "2182730"
  },
  {
    "text": "if you were to write a test case for this now we could take our procedure make an iterator out out of it and then",
    "start": "2182730",
    "end": "2190410"
  },
  {
    "text": "you can start step start to step through it manually so we can go to steps like",
    "start": "2190410",
    "end": "2195420"
  },
  {
    "text": "the first step here and then we could expect that the first step here is that",
    "start": "2195420",
    "end": "2202520"
  },
  {
    "text": "the generator yields out a call to math.random so we can expect that that's",
    "start": "2202520",
    "end": "2208800"
  },
  {
    "text": "what it's doing then we can actually say that ok I'm going to fake this because",
    "start": "2208800",
    "end": "2214950"
  },
  {
    "text": "I'm not actually going to make a random number I'm going to tell the generator that your random number is zero point",
    "start": "2214950",
    "end": "2220440"
  },
  {
    "text": "two and then I can check that ok that means that the next step should be that",
    "start": "2220440",
    "end": "2226320"
  },
  {
    "text": "he yield Souths a call to console.log with the value 0.2 because it was supposed to log",
    "start": "2226320",
    "end": "2232799"
  },
  {
    "text": "out the random number it got and then",
    "start": "2232799",
    "end": "2239009"
  },
  {
    "text": "this goes on right we can just observe what the generator yields out and we can",
    "start": "2239009",
    "end": "2245700"
  },
  {
    "text": "just pass fake data back to it then we can make sure that without ever doing a",
    "start": "2245700",
    "end": "2250799"
  },
  {
    "text": "request here or logging or doing anything we can make sure that the procedure does exactly what it's supposed to do for all different",
    "start": "2250799",
    "end": "2258960"
  },
  {
    "text": "conditions for all different values so this in the same way as react and redux",
    "start": "2258960",
    "end": "2266839"
  },
  {
    "text": "makes describing a synchronous flow with a lot of side effects a lot easier and",
    "start": "2266839",
    "end": "2272359"
  },
  {
    "text": "also testing asynchronous flow because we have found a way to separate the",
    "start": "2272359",
    "end": "2279869"
  },
  {
    "text": "describing of what to do and actually doing it and that of course makes me",
    "start": "2279869",
    "end": "2285450"
  },
  {
    "text": "really happy so this has just been an",
    "start": "2285450",
    "end": "2290549"
  },
  {
    "text": "attempt to repurpose the underlying ideas behind react and redux and all",
    "start": "2290549",
    "end": "2296609"
  },
  {
    "text": "these kind of functional principles here where what we're basically doing is that",
    "start": "2296609",
    "end": "2303329"
  },
  {
    "text": "we're pushing all of the side effects all the way to the edge of our application so that the core of our",
    "start": "2303329",
    "end": "2311190"
  },
  {
    "text": "program doesn't actually do anything anymore it just describes things and then all",
    "start": "2311190",
    "end": "2318210"
  },
  {
    "text": "the side effects are like way out on the edge of our application and the most",
    "start": "2318210",
    "end": "2325259"
  },
  {
    "text": "complete implementation of this idea is something called Redux saga which so you might have heard about which uses",
    "start": "2325259",
    "end": "2332880"
  },
  {
    "text": "exactly this way of being able to declaratively describe side-effects and",
    "start": "2332880",
    "end": "2340380"
  },
  {
    "text": "use the exact same semantics that we looked at and this isn't just something",
    "start": "2340380",
    "end": "2347969"
  },
  {
    "text": "that you can use in the front-end but rather it's something that you could use",
    "start": "2347969",
    "end": "2353519"
  },
  {
    "text": "for anything that has a lot of side effects and a lot of the complex asynchronous flow",
    "start": "2353519",
    "end": "2361190"
  },
  {
    "text": "yeah I'm not actually sure if I'm going to show the demo but let's say that we",
    "start": "2364160",
    "end": "2369749"
  },
  {
    "text": "had this program here it's a program that is called slow print and what it",
    "start": "2369749",
    "end": "2379499"
  },
  {
    "text": "does is that it sets up an infinite loop and says that the first thing that you",
    "start": "2379499",
    "end": "2385410"
  },
  {
    "text": "should do is wait for there to come some data in on process standard in like if",
    "start": "2385410",
    "end": "2392460"
  },
  {
    "text": "someone writes something into standard in give me whatever they wrote so now we",
    "start": "2392460",
    "end": "2399239"
  },
  {
    "text": "have this new kind of effector previously we only have call but now we also have an effect called take stream",
    "start": "2399239",
    "end": "2405239"
  },
  {
    "text": "which produces and a description of waiting for a value on this stream and",
    "start": "2405239",
    "end": "2413640"
  },
  {
    "text": "when we've gotten some data there we'll just make that into a string and then",
    "start": "2413640",
    "end": "2419160"
  },
  {
    "text": "split that into an array because what we're going to do here is that we're going to like incrementally print out",
    "start": "2419160",
    "end": "2425009"
  },
  {
    "text": "these characters with some delay between them so we're saying here that while",
    "start": "2425009",
    "end": "2433349"
  },
  {
    "text": "there's characters left in the array put those into standard out like print that",
    "start": "2433349",
    "end": "2439289"
  },
  {
    "text": "back wait for 50 milliseconds and then go to the next one so this is of course",
    "start": "2439289",
    "end": "2446099"
  },
  {
    "text": "just in a contrived example but this is something that would be really hard to",
    "start": "2446099",
    "end": "2451859"
  },
  {
    "text": "test without marking out an implementation of streams but now you",
    "start": "2451859",
    "end": "2460109"
  },
  {
    "text": "could actually test this without using any streams at all because you could just test that it does what it's",
    "start": "2460109",
    "end": "2466200"
  },
  {
    "text": "supposed to do for different kinds of effects let's see if I can get this up",
    "start": "2466200",
    "end": "2473839"
  },
  {
    "text": "here",
    "start": "2473839",
    "end": "2476839"
  },
  {
    "text": "why it doesn't let me move the window",
    "start": "2490700",
    "end": "2495578"
  },
  {
    "text": "okay I'd be a bit more juicy maybe so so we",
    "start": "2504320",
    "end": "2516370"
  },
  {
    "text": "have this program now that that when I",
    "start": "2516370",
    "end": "2525250"
  },
  {
    "text": "write something here if I write hello it'll print it back to me with a 50 millisecond delay if I write a lot of",
    "start": "2525250",
    "end": "2532360"
  },
  {
    "text": "stuff here now it'll just print it back to me to the stream here so the only thing I've used here is just a slight",
    "start": "2532360",
    "end": "2539250"
  },
  {
    "text": "extension of the runtime and the code that we've been writing here now so",
    "start": "2539250",
    "end": "2546030"
  },
  {
    "text": "again something that might be both hard to describe and hard to test might be",
    "start": "2546030",
    "end": "2553030"
  },
  {
    "text": "made a lot easier by using this approach and also there's no callbacks here or",
    "start": "2553030",
    "end": "2560320"
  },
  {
    "text": "then there's no promises it's just sequential code which is also this really big advantage to using this",
    "start": "2560320",
    "end": "2566980"
  },
  {
    "text": "approach because it kind of abstracts away the whole deal of a synchronicity",
    "start": "2566980",
    "end": "2575190"
  },
  {
    "text": "so now we have these new effects here like take stream put put something to",
    "start": "2576270",
    "end": "2582790"
  },
  {
    "text": "the stream and we have an effect for making the process wait for 50 milliseconds so you could pretty much",
    "start": "2582790",
    "end": "2590350"
  },
  {
    "text": "make all of your own effects here but Redux agha has all of the useful ones",
    "start": "2590350",
    "end": "2598630"
  },
  {
    "text": "already implemented there's also a very",
    "start": "2598630",
    "end": "2603850"
  },
  {
    "text": "similar construct called async await available now in JavaScript which does",
    "start": "2603850",
    "end": "2611260"
  },
  {
    "text": "pretty much the same thing for promises where you can write code that looks synchronous but is in fact asynchronous",
    "start": "2611260",
    "end": "2619500"
  },
  {
    "text": "so I cannot just use async await here instead of generators so the the",
    "start": "2619500",
    "end": "2628150"
  },
  {
    "text": "drawback with async await is that there's already a runtime for you there you are not able to override that and",
    "start": "2628150",
    "end": "2635080"
  },
  {
    "text": "step through your asynchronous functions so you wouldn't be able to test it the same way you would still have to write",
    "start": "2635080",
    "end": "2641340"
  },
  {
    "text": "complex mocks but for asynchronous codes just we're going from like promises and",
    "start": "2641340",
    "end": "2648780"
  },
  {
    "text": "callbacks async/await is very nice so just an important note is that I'm not telling",
    "start": "2648780",
    "end": "2654540"
  },
  {
    "text": "everyone to and go ahead and do this thing but if you're writing a lot of",
    "start": "2654540",
    "end": "2662340"
  },
  {
    "text": "complex logic and you're finding yourself having trouble like getting to",
    "start": "2662340",
    "end": "2669390"
  },
  {
    "text": "test this you're having to write a lot of mocks it's hard to see the actual",
    "start": "2669390",
    "end": "2675690"
  },
  {
    "text": "sequential flow of your code this is something that you should look at and then specially then redock saga that's",
    "start": "2675690",
    "end": "2684720"
  },
  {
    "text": "my time so that's what I have if you have any questions please feel free to",
    "start": "2684720",
    "end": "2692730"
  },
  {
    "text": "ask now or afterwards",
    "start": "2692730",
    "end": "2697040"
  }
]