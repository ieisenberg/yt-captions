[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "okay welcome welcome to the functional programming toolkit this is a talk for",
    "start": "5180",
    "end": "16670"
  },
  {
    "text": "kind of beginner to intermediate people interested in functional programming and",
    "start": "16670",
    "end": "22080"
  },
  {
    "text": "you've done a little bit but there's a lot of things you don't understand like monads for example or functors and all",
    "start": "22080",
    "end": "29400"
  },
  {
    "text": "this jargon so the point of this talk is really to go through that jargon and hopefully explain it to you in a way",
    "start": "29400",
    "end": "36120"
  },
  {
    "text": "that sort of demystifies it so it's useful if you've done a little bit of functional programming before but even",
    "start": "36120",
    "end": "41190"
  },
  {
    "text": "if you haven't I think you'll probably be able to understand what I'm talking about because I use lots of little pictures so my name is Scott volution",
    "start": "41190",
    "end": "50070"
  },
  {
    "text": "and I have a website F sharp for fun and profit the code examples in this talk",
    "start": "50070",
    "end": "55770"
  },
  {
    "text": "will be in F sharp but it's not not a lot of code in this token so don't worry about if you don't understand the code",
    "start": "55770",
    "end": "62870"
  },
  {
    "text": "so the main questions start with is why do functional programmers use so many",
    "start": "62870",
    "end": "68579"
  },
  {
    "text": "strange words and it comes across as very scary to most people there's words",
    "start": "68579",
    "end": "73829"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "like functor cat morphism applicative carrying monoid and monad the most scary",
    "start": "73829",
    "end": "79499"
  },
  {
    "text": "word of all and I think the problem is these words kind of sound scary but",
    "start": "79499",
    "end": "84659"
  },
  {
    "text": "they're not actually scary concepts if you understood what they were I mean you might be like Homer here and think I",
    "start": "84659",
    "end": "90840"
  },
  {
    "text": "can't possibly understand any of this stuff it's way too complicated but it's not I don't think it's scary I think it's unfamiliar so if you knew what the",
    "start": "90840",
    "end": "97889"
  },
  {
    "text": "words meant or at least would demystified a bit then you might be like Homer here and you might say okay you",
    "start": "97889",
    "end": "104880"
  },
  {
    "text": "mapable if I call it a map up I could understand that or a collapsible or an aggregator for whatever the word is it",
    "start": "104880",
    "end": "110759"
  },
  {
    "text": "doesn't really matter what the words are but these words don't sound as scary as the sort of mathematical words so that's",
    "start": "110759",
    "end": "116490"
  },
  {
    "text": "really the goal of this talk is to demystify you may not know what they mean they still be unfamiliar but it's",
    "start": "116490",
    "end": "121829"
  },
  {
    "text": "they're not scary you know what's really scary is object-oriented programming and",
    "start": "121829",
    "end": "126950"
  },
  {
    "start": "124000",
    "end": "124000"
  },
  {
    "text": "just because you're used to it you don't think is scary but if I'm a brand-new object-oriented program there's all",
    "start": "126950",
    "end": "132510"
  },
  {
    "text": "these words like polymorphism in the hair and generics and co-variants and solid and solid is five other things and",
    "start": "132510",
    "end": "139530"
  },
  {
    "text": "there's IOC and di and ABC interview you know you just don't realize how scary it is if you are inexperienced there were",
    "start": "139530",
    "end": "145769"
  },
  {
    "text": "person so don't ever say that functional programming is a scale words because oh it's just as bad its jargon like we just",
    "start": "145769",
    "end": "152400"
  },
  {
    "text": "used to used to it okay so there's four particular words",
    "start": "152400",
    "end": "158099"
  },
  {
    "text": "that I want to talk about in this talk and like I say these are mathematical words and you might think well this is",
    "start": "158099",
    "end": "164760"
  },
  {
    "text": "kind of an academic abstract theoretical kind of thing but it actually turns out these are very useful tools and again if",
    "start": "164760",
    "end": "172049"
  },
  {
    "text": "you demystified it hopefully you'll see by the end of this talk they are actually useful tools so there's",
    "start": "172049",
    "end": "178139"
  },
  {
    "text": "something called what I call the functional toolbox and it's the analogous with a a real toolbox and a",
    "start": "178139",
    "end": "185389"
  },
  {
    "text": "second in a real toolbox you have all",
    "start": "185389",
    "end": "191609"
  },
  {
    "text": "these different tools that you know and each tool does one particular thing well and you know if you're an experienced person you know which tool to use for",
    "start": "191609",
    "end": "197340"
  },
  {
    "text": "which thing and a functional programmer has a bunch of tools to you know map return bind whatever all these tools",
    "start": "197340",
    "end": "204810"
  },
  {
    "text": "have names and if you're an experienced person you know you know which tool to use in which situation and basically",
    "start": "204810",
    "end": "212909"
  },
  {
    "text": "it's about eleven kind of important tools you need to know about as maybe you know ten other ones which are not quite as important but if you know these",
    "start": "212909",
    "end": "219000"
  },
  {
    "text": "how to use these eleven tools you can pretty much do everything in front of the programming so this is a",
    "start": "219000",
    "end": "225120"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "problem-solving tool box it's not an academic tool boxes for really getting a hands dirty so what are the kinds of",
    "start": "225120",
    "end": "232049"
  },
  {
    "text": "problems that functional programs need to solve well the first problem they need to solve is composition because",
    "start": "232049",
    "end": "238290"
  },
  {
    "text": "everything in functional programming is composition is the fundamental principle and I'll talk about in a second how do",
    "start": "238290",
    "end": "243629"
  },
  {
    "text": "you combine things how do you aggregate things that's a common problem in both oh and functional how do you iterate",
    "start": "243629",
    "end": "249359"
  },
  {
    "text": "through things how do you work with effects now this is a kind of more functional programming thing they like a",
    "start": "249359",
    "end": "256079"
  },
  {
    "text": "plugin let's talk about effects all the time and what do we mean by effects and I'll explain what I mean by effects but",
    "start": "256079",
    "end": "261989"
  },
  {
    "text": "these effects are kind of tricky to work with sometimes and so you have to mix things which you're effects",
    "start": "261989",
    "end": "267340"
  },
  {
    "text": "non effects where you might need to chain them or you need to work in parallel there's all different things you need to work with when you have effects and",
    "start": "267340",
    "end": "274560"
  },
  {
    "text": "there's a bunch of tools just without superposition so these are the kind of",
    "start": "274560",
    "end": "280870"
  },
  {
    "text": "words that you'll see a lot composition uses to compose key words iteration isn't generally called fold in",
    "start": "280870",
    "end": "287229"
  },
  {
    "text": "functional people combine and reduce Mack and return sign which is also",
    "start": "287229",
    "end": "293050"
  },
  {
    "text": "called flat map apply and zip sequence reverse these are the kinds of names of",
    "start": "293050",
    "end": "299050"
  },
  {
    "text": "functions or names of the tools that you use a lot if you're doing functional programming and of course if you enter",
    "start": "299050",
    "end": "306910"
  },
  {
    "start": "306000",
    "end": "306000"
  },
  {
    "text": "the jargon these things have actually names so combination is generally called",
    "start": "306910",
    "end": "312700"
  },
  {
    "text": "amyloid when you work with different kinds of effects that's you use a functor if you want to chain effects as",
    "start": "312700",
    "end": "318729"
  },
  {
    "text": "a monad if you want to work in parallel as an applicative so don't worry about this I'm going to explain hopefully by",
    "start": "318729",
    "end": "323800"
  },
  {
    "text": "the end of talk all these things hopefully they make sense and even if they don't make sense I lived a little",
    "start": "323800",
    "end": "329139"
  },
  {
    "text": "bit less mysterious that's the whole point so this talk is good it's going to",
    "start": "329139",
    "end": "334270"
  },
  {
    "text": "be one of those things like those tourist buses where you go around the city and you'd like stop for one minute",
    "start": "334270",
    "end": "340780"
  },
  {
    "text": "in each famous place you don't really get a chance to look around but at least you actually see the sights so that's",
    "start": "340780",
    "end": "346930"
  },
  {
    "text": "what this is as a whirlwind tour of the sites you can't possibly understand everything you know in one talk but",
    "start": "346930",
    "end": "353410"
  },
  {
    "text": "hopefully if you demystify and you go away you know you can say oh I can and I can at least not be scared I can go in",
    "start": "353410",
    "end": "358870"
  },
  {
    "text": "and learn more about it later on when I get a chance so start with some",
    "start": "358870",
    "end": "365080"
  },
  {
    "text": "principles of statically typed functional programming for people who are newbies the first thing is the",
    "start": "365080",
    "end": "372700"
  },
  {
    "text": "functions of things and like luckily as little well we attract analogy and the composition is used everywhere so",
    "start": "372700",
    "end": "379150"
  },
  {
    "text": "there's no inheritance there's nothing else's everything is composition and if you know how to use Lego you know how to",
    "start": "379150",
    "end": "384430"
  },
  {
    "text": "do composition because this is exactly the same so let's look at functions as things so a function is a little thing I",
    "start": "384430",
    "end": "391060"
  },
  {
    "text": "like to use the railway track analogy in this little tunnel tunnel transformation something goes in if something comes out",
    "start": "391060",
    "end": "396880"
  },
  {
    "text": "in this case an apple go and it turns into banana so this is a we call this an apple - banana faction Maya",
    "start": "396880",
    "end": "403639"
  },
  {
    "text": "trot it transform samples into bananas and the thing about functions is they",
    "start": "403639",
    "end": "409310"
  },
  {
    "text": "are standalone things they're not attached to any class because they're things they can be used just like you",
    "start": "409310",
    "end": "416419"
  },
  {
    "text": "might use an integer or a string or something you can pass them around as parameters you can put them in lists you",
    "start": "416419",
    "end": "421520"
  },
  {
    "text": "know you can do all sorts of things because they're just things just like everything else and this standalone thing is really really important because",
    "start": "421520",
    "end": "427520"
  },
  {
    "text": "stand alone is another word for reusable if it's on its own it can be reused in",
    "start": "427520",
    "end": "432919"
  },
  {
    "text": "any context if it's part of a class it's really hard to sort of extract it from that class and we use it in a different context but all the functions in front",
    "start": "432919",
    "end": "439460"
  },
  {
    "text": "of the program they are standalone functions so here's an example of a function has a normal input but it has",
    "start": "439460",
    "end": "446120"
  },
  {
    "text": "an output which is a function here's an example of a function that has a function as an input and a normal outlet",
    "start": "446120",
    "end": "453289"
  },
  {
    "text": "here's a function with a normal input and a normal output but it's got this extra function which can be either sort",
    "start": "453289",
    "end": "459199"
  },
  {
    "text": "of parameterizing it and this would be called the strategy pattern in our so",
    "start": "459199",
    "end": "465080"
  },
  {
    "text": "this is that's it that's really everything you need to know about on to the programming right there if you understand that you understand",
    "start": "465080",
    "end": "470150"
  },
  {
    "text": "everything you can see it can get really complex it's a very simple foundation but you can have functions that return",
    "start": "470150",
    "end": "476479"
  },
  {
    "text": "other functions that generate other functions which uses premises other function it can get very complicated but the fundamental principles are basically",
    "start": "476479",
    "end": "483500"
  },
  {
    "text": "just what I said in the last few minutes and most the tools in the functional",
    "start": "483500",
    "end": "489530"
  },
  {
    "text": "toolbox that I'm going to be talking about it our function transformers they take functions in and they spit other",
    "start": "489530",
    "end": "496430"
  },
  {
    "text": "functions on so having functions come in and functions come out that's a really really common thing in functional",
    "start": "496430",
    "end": "501800"
  },
  {
    "text": "programming so the next principle which is really important is composition so",
    "start": "501800",
    "end": "508280"
  },
  {
    "start": "508000",
    "end": "508000"
  },
  {
    "text": "I'm gonna talk about Lego for a second because everyone understands how Lego works hopefully and Lego actually has a",
    "start": "508280",
    "end": "514400"
  },
  {
    "text": "sort of philosophy right which is that everything is designed to be connected to everything else right you don't have",
    "start": "514400",
    "end": "519890"
  },
  {
    "text": "LEGO pieces which don't fit to other LEGO pieces and if you connect your LEGO pieces together you get another piece",
    "start": "519890",
    "end": "525020"
  },
  {
    "text": "which can still be connected to other pieces right you never have you never run into a wall where Owen",
    "start": "525020",
    "end": "531270"
  },
  {
    "text": "at any more LEGO pieces cuz I've run out of dots or something you know and they're reusable so here's some Lego",
    "start": "531270",
    "end": "537750"
  },
  {
    "text": "every single piece in Lego has little dots so they're designed to be connected and when you start assembling them you",
    "start": "537750",
    "end": "545940"
  },
  {
    "text": "know you don't you can just keep adding and adding pieces you know they're designed to be that way that you never",
    "start": "545940",
    "end": "552180"
  },
  {
    "text": "sort of hit a boundary you can add two pieces and that makes another piece you having more pieces you don't need a",
    "start": "552180",
    "end": "557910"
  },
  {
    "text": "special adapter you don't say well this piece won't fit with this piece because then I need a special sort of adapter",
    "start": "557910",
    "end": "562920"
  },
  {
    "text": "pattern to make two bits of Lego fit no you don't have an adapter pattern in Lego right they just literally connect",
    "start": "562920",
    "end": "569610"
  },
  {
    "text": "straight together and you can keep adding and adding and adding and you can make really really big things out of",
    "start": "569610",
    "end": "575550"
  },
  {
    "text": "Lego add all the small pieces and here's the reusability thing right you can you can make something and then you can",
    "start": "575550",
    "end": "581760"
  },
  {
    "text": "disassemble it and make something else the pieces themselves do not have any",
    "start": "581760",
    "end": "586830"
  },
  {
    "text": "strings attached to literally they don't have any strings attached if they had strings attached they'll get tangled up",
    "start": "586830",
    "end": "592140"
  },
  {
    "text": "the springs will get tangled up and this is one of the goals of functional programming is that all the functions",
    "start": "592140",
    "end": "597450"
  },
  {
    "text": "that you built don't have any strings attached and because of that reusable they're not attached to a particular context they're",
    "start": "597450",
    "end": "604620"
  },
  {
    "text": "not you don't have to kind of extract them in order to reuse and they literally are designed to be reusable from the very beginning so you can make",
    "start": "604620",
    "end": "612120"
  },
  {
    "text": "really big things from small things in Lego that's what I'd like to call the",
    "start": "612120",
    "end": "618149"
  },
  {
    "text": "power of composition now let's look at the functional programming philosophy which is very similar to the lego",
    "start": "618149",
    "end": "624000"
  },
  {
    "text": "philosophy and this is by the rent automatic statically typed functional programming dynamic type generic",
    "start": "624000",
    "end": "630600"
  },
  {
    "text": "function program is similar that there's a little bit of difference so in front of program you try to design functions",
    "start": "630600",
    "end": "636149"
  },
  {
    "text": "that do one thing well the solid principles applied to functional programming too but the functions can be",
    "start": "636149",
    "end": "642720"
  },
  {
    "text": "reused so you design your functions to be reusable and you design them to work",
    "start": "642720",
    "end": "648029"
  },
  {
    "text": "together and you expect the output error function might be the input to some other function",
    "start": "648029",
    "end": "653490"
  },
  {
    "text": "you know you design them so that you might be working with pieces that you don't even know about yet and by the way",
    "start": "653490",
    "end": "658920"
  },
  {
    "text": "if you're familiar with the UNIX philosophy this is exactly the same the eunuchs yeah you know utility",
    "start": "658920",
    "end": "664380"
  },
  {
    "text": "philosophy wait and in fact Li type functioning functional programming we",
    "start": "664380",
    "end": "669390"
  },
  {
    "text": "use the types to ensure that the inputs match the outputs we make sure that you can't accidentally put the wrong kind of",
    "start": "669390",
    "end": "675660"
  },
  {
    "text": "thing together so this is the functional tool designing things that do one thing",
    "start": "675660",
    "end": "681420"
  },
  {
    "text": "we'll the toolkit is a very generic set of functions that you use you know as you're kind of building books so let's",
    "start": "681420",
    "end": "688650"
  },
  {
    "text": "look at function composition here's an apple - banana function and here's a banana - cherry function and how do you",
    "start": "688650",
    "end": "696180"
  },
  {
    "text": "glue them together how do you compose them how do you make how do you connect them well it's really obvious if they're well we track you just literally stick",
    "start": "696180",
    "end": "702870"
  },
  {
    "text": "the two pieces together and you get any function and what's cool about this is",
    "start": "702870",
    "end": "708090"
  },
  {
    "text": "you can't tell that this was built from smaller functions right so you now have",
    "start": "708090",
    "end": "713280"
  },
  {
    "text": "another function that you can then use to build bigger function and so on and so forth and also what's cool is the",
    "start": "713280",
    "end": "719130"
  },
  {
    "text": "banana has disappeared where did the banana go you know you've now got some data hiding",
    "start": "719130",
    "end": "724290"
  },
  {
    "text": "you've got some abstraction the fact that the thing was built from small pieces which use something the bigger function can hide all that so you you",
    "start": "724290",
    "end": "731820"
  },
  {
    "text": "know you've got this kind of nice API and you can build really big things just",
    "start": "731820",
    "end": "738000"
  },
  {
    "text": "using functions without any classes of objects sort of thing so if you think about a web a website a",
    "start": "738000",
    "end": "743840"
  },
  {
    "text": "website is a function there's an HTTP request comes in and it spits out an HD",
    "start": "743840",
    "end": "749310"
  },
  {
    "text": "hears once the whole thing as a giant function it's with an input and output and when you do a function functional",
    "start": "749310",
    "end": "755370"
  },
  {
    "text": "design inside your your main web function you have all these little",
    "start": "755370",
    "end": "761370"
  },
  {
    "text": "little functions that do all that it'll look and they're all connect together by pipes you don't need classes you can even",
    "start": "761370",
    "end": "768390"
  },
  {
    "text": "seriously build all right certificate applications using purely functions and",
    "start": "768390",
    "end": "773940"
  },
  {
    "text": "if you want to call these microservices be my guest though micro-services are very similar",
    "start": "773940",
    "end": "779150"
  },
  {
    "text": "that's the non example of a parallel composition so I have a whole talk on this if you're interested on my website",
    "start": "779150",
    "end": "786890"
  },
  {
    "text": "all right so let's look at number one tool number one tool is mano eights",
    "start": "786890",
    "end": "793430"
  },
  {
    "text": "okay or tool number one that's not not the number one tool is the first tool that I'm gonna be talking and there's",
    "start": "793430",
    "end": "799790"
  },
  {
    "text": "gonna be some mathematics here so I hope this won't put you off okay if you if you're scared of mathematics then let's",
    "start": "799790",
    "end": "806600"
  },
  {
    "text": "see so this is the first piece of mathematics and this is the second piece",
    "start": "806600",
    "end": "812000"
  },
  {
    "text": "of mathematics and this is the third piece of mathematics so this is all the",
    "start": "812000",
    "end": "817790"
  },
  {
    "text": "mathematics that we'll use so if you can understand this you were like so what's",
    "start": "817790",
    "end": "823310"
  },
  {
    "text": "interesting is that mathematicians a little bit like programmers and they always like to make things abstract they're always looking for",
    "start": "823310",
    "end": "829160"
  },
  {
    "text": "patterns so a mathematician would look at this and say mom well just interesting I can see if I can see some",
    "start": "829160",
    "end": "835550"
  },
  {
    "text": "patterns here and let's look at this can we've got some things and we've got some",
    "start": "835550",
    "end": "841339"
  },
  {
    "text": "way of combining them and the result is another of the same kind of thing you add two integers you get another integer",
    "start": "841339",
    "end": "847220"
  },
  {
    "text": "back I wonder if that works or anything else oh yeah it works or multiplication too if I add if I multiply two things",
    "start": "847220",
    "end": "853640"
  },
  {
    "text": "I'd get another thing back another integers back what else does it work for well it works with strings if I have two",
    "start": "853640",
    "end": "859790"
  },
  {
    "text": "strings and I can catenate them I get another string back and if I have two",
    "start": "859790",
    "end": "865070"
  },
  {
    "text": "lists and I can count Nathan I get another list back so this is actually quite a common pattern happens all over",
    "start": "865070",
    "end": "872029"
  },
  {
    "text": "the place okay what's interesting about this pan is because when you add two",
    "start": "872029",
    "end": "877820"
  },
  {
    "text": "things together in this case you have to introduce you get another integer you can keep going so I can add 3 to that",
    "start": "877820",
    "end": "884300"
  },
  {
    "text": "and that gives me back another integer right and so I can add 4 to that so I can keep adding and adding and adding",
    "start": "884300",
    "end": "889910"
  },
  {
    "text": "just like the Lego so the Lego analogy is quite good so what we have we start",
    "start": "889910",
    "end": "895400"
  },
  {
    "text": "off with a pairwise operation like addition or multiplication or you know adding these things together and we now",
    "start": "895400",
    "end": "901550"
  },
  {
    "text": "have an operation that works on lists we can actually extend it infinitely adding more more things without ever running",
    "start": "901550",
    "end": "907940"
  },
  {
    "text": "out no way what about the next one if you know this is 1 plus 2 Plus 3 is the",
    "start": "907940",
    "end": "913880"
  },
  {
    "text": "same as 1 plus 2 plus 3 ok what that means is that the order of combining the",
    "start": "913880",
    "end": "920690"
  },
  {
    "text": "things doesn't matter if you combine 2 plus 3 first or you can find 1 plus 2 first the difference so you could do one plus",
    "start": "920690",
    "end": "927459"
  },
  {
    "text": "two and then you could add three and then you get at four or you could do one plus 2 here and the fridge was full here and then add them later on",
    "start": "927459",
    "end": "933010"
  },
  {
    "text": "it really doesn't made it matter which way you do it you always get the same answer so that's good now it's not",
    "start": "933010",
    "end": "938890"
  },
  {
    "text": "always true like subtraction it doesn't work with the order does matter for subtraction subtraction doesn't fit this",
    "start": "938890",
    "end": "944110"
  },
  {
    "text": "pattern okay what about this zero thing okay this is what is this zero mean so a",
    "start": "944110",
    "end": "951160"
  },
  {
    "text": "mathematician will say well this is very interesting we have this very special kind of thing that when you use it to",
    "start": "951160",
    "end": "956290"
  },
  {
    "text": "combine you know you can bind it with this other thing you always get back the original thing like the zero leaves that",
    "start": "956290",
    "end": "961600"
  },
  {
    "text": "alone it kind of doesn't do anything it's a kind of a null pattern and it",
    "start": "961600",
    "end": "967480"
  },
  {
    "text": "turns out that zero is quite a common thing so when you have multiplication there's a special thing that when you multiply you get the same thing back and",
    "start": "967480",
    "end": "974829"
  },
  {
    "text": "that would be the number one and if you have strings there's a special thing",
    "start": "974829",
    "end": "980529"
  },
  {
    "text": "that when you add it to any other string you get the same string back and that's the empty string and so on and so forth the empty list there's a zero conceptual",
    "start": "980529",
    "end": "988720"
  },
  {
    "text": "zero for all these kinds of things it's very very common right so here's here's the pattern that we've recognized we've",
    "start": "988720",
    "end": "994990"
  },
  {
    "text": "got a bunch of things we've got some way of combining them two at a time and that's the first rule we have is the",
    "start": "994990",
    "end": "1002370"
  },
  {
    "text": "closure rule that when you combine them you get another thing of the same type and the second rule is associativity",
    "start": "1002370",
    "end": "1008250"
  },
  {
    "text": "which is when you combine them more than one thing it doesn't really matter which order you combine them in and the third",
    "start": "1008250",
    "end": "1013890"
  },
  {
    "text": "thing is there's a zero or an identity element that when you combine it with the thing you get the same thing back so",
    "start": "1013890",
    "end": "1020130"
  },
  {
    "text": "it like it doesn't do anything so these are kind of you know these patterns are pretty kind of obvious patterns if you",
    "start": "1020130",
    "end": "1027298"
  },
  {
    "text": "start thinking about it and the mathematicians have a word for this thing they call that a mono eight so here's the mathematical jargon for",
    "start": "1027299",
    "end": "1033780"
  },
  {
    "text": "something which if you just look at it from pattern analysis it's like yes it's kind of quite a common pattern that I",
    "start": "1033780",
    "end": "1040048"
  },
  {
    "text": "read recognize so let's stop with the jargon Homer says no more jargon don't",
    "start": "1040049",
    "end": "1046470"
  },
  {
    "text": "talk about monoids why is why is doing kind of analyzing these patents why is it useful like what how is it you as a",
    "start": "1046470",
    "end": "1052650"
  },
  {
    "text": "programmer well if you think about the the closure will affect you can combine two things and get",
    "start": "1052650",
    "end": "1058510"
  },
  {
    "text": "another thing that means that all powers operations can be converted into things that work on lists parents abuse start",
    "start": "1058510",
    "end": "1065500"
  },
  {
    "text": "with a pair and yet out of the list and this is normally called reduce so if you",
    "start": "1065500",
    "end": "1071080"
  },
  {
    "text": "have 1 + 2 + 3 + 4 you have the plus pair eyes operation and you can take a",
    "start": "1071080",
    "end": "1076600"
  },
  {
    "text": "list of integers 1 2 3 4 and reduce it using + so the reduce operation all it",
    "start": "1076600",
    "end": "1081730"
  },
  {
    "text": "does is basically take the list of items and stick that pairwise operation in between every single one if you have a",
    "start": "1081730",
    "end": "1088720"
  },
  {
    "text": "multiplication that reduces a very common practice one of the things enough on some tools if you have a",
    "start": "1088720",
    "end": "1093910"
  },
  {
    "text": "multiplication that's the pairwise operation we can then take a list of numbers and we can reduce it using",
    "start": "1093910",
    "end": "1100120"
  },
  {
    "text": "multiplication alright and we can take a list of strings do the same thing rather than adding them up pairwise we can",
    "start": "1100120",
    "end": "1106480"
  },
  {
    "text": "collapse the entire list of strings into a single string using the string",
    "start": "1106480",
    "end": "1111910"
  },
  {
    "text": "concatenation operator and so on so forth for lists so this is a really really common pattern now the",
    "start": "1111910",
    "end": "1118480"
  },
  {
    "text": "associativity the benefit of associativity there's also some things divide and conquer a parallelization",
    "start": "1118480",
    "end": "1124500"
  },
  {
    "text": "incremental accumulation I'll talk about parallelization right now so parallelization means that you can take",
    "start": "1124500",
    "end": "1132040"
  },
  {
    "text": "a bunch of stuff and you can spread it out over multiple CPUs on one of my machines or whatever so let's say we",
    "start": "1132040",
    "end": "1138010"
  },
  {
    "text": "have to add up 1 & 2 3 & 4 we could paralyze it and say we'll do 1 + 2 on",
    "start": "1138010",
    "end": "1143680"
  },
  {
    "text": "this machine and we'll do 3 + 4 this machine and then we'll take the results or add them together no ously you wouldn't do that with 4",
    "start": "1143680",
    "end": "1151060"
  },
  {
    "text": "numbers it's ridiculous but if you have a million or 10 million things to do and these are this pairwise operation is",
    "start": "1151060",
    "end": "1157720"
  },
  {
    "text": "quite complicated then this is great so if you have a monoid you can instantly parallelize it now",
    "start": "1157720",
    "end": "1165580"
  },
  {
    "text": "it turns out we don't normally most of us don't have to worry about parallelization but another really useful thing is incremental accumulation",
    "start": "1165580",
    "end": "1172240"
  },
  {
    "text": "which is much more common so let's say the EO boss asks you to add up 1 + 2 3",
    "start": "1172240",
    "end": "1179460"
  },
  {
    "text": "because your boss your boss is no good at and she's okay and then the next day",
    "start": "1179460",
    "end": "1185800"
  },
  {
    "text": "your boss says actually I've changed my mind can you add up one plus two plus D that's for today and then you say well I",
    "start": "1185800",
    "end": "1192700"
  },
  {
    "text": "have to start all over again you know I just had it and now I have to go all the way back to the beginning in that one and two and four you know you don't of",
    "start": "1192700",
    "end": "1198520"
  },
  {
    "text": "course you can keep the number that you calculated yesterday and just add 4 to",
    "start": "1198520",
    "end": "1203530"
  },
  {
    "text": "it you don't have to add the whole thing up from the very beginning because of this associativity I've already",
    "start": "1203530",
    "end": "1208540"
  },
  {
    "text": "calculated 1 + 2 + 3 which is 6 and all I have to do add 4 to it so I don't have",
    "start": "1208540",
    "end": "1214240"
  },
  {
    "text": "to start from scratch I can incrementally accumulate so every time you have a monoid you can",
    "start": "1214240",
    "end": "1219550"
  },
  {
    "text": "incrementally in Hulme late data and finally we have all these issues we run",
    "start": "1219550",
    "end": "1224740"
  },
  {
    "text": "into how do I reduce when the list is empty how do I do a divide and conquer when one of the steps is empty how do I",
    "start": "1224740",
    "end": "1231130"
  },
  {
    "text": "do incremental accumulation when I don't have any starting data and that's what",
    "start": "1231130",
    "end": "1237160"
  },
  {
    "text": "the identity element is really good for it's the initial value for empty data or missing data so you have these fake",
    "start": "1237160",
    "end": "1243130"
  },
  {
    "text": "things and you can anything once you see this pattern you start seeing it everywhere and you can have a missing 0",
    "start": "1243130",
    "end": "1251950"
  },
  {
    "text": "you can have patterns where there's no zero and the mathematicians got that a semigroup which is even more obscure so let's look",
    "start": "1251950",
    "end": "1259360"
  },
  {
    "text": "at a real example let's say we have to do some aggregation say we have a bunch of order lines and we have to add them",
    "start": "1259360",
    "end": "1265990"
  },
  {
    "text": "up and find out the total now we could write a loop and write a specialized",
    "start": "1265990",
    "end": "1271180"
  },
  {
    "text": "piece of code dried them up the problem with that again is if I've again with",
    "start": "1271180",
    "end": "1277060"
  },
  {
    "text": "three or four things it's not fun but if I have a million things then tomorrow I have a million the first thing I have to",
    "start": "1277060",
    "end": "1282940"
  },
  {
    "text": "start I have to run the whole loop all over again you know so let's use the monoid idea because that gives us best",
    "start": "1282940",
    "end": "1289060"
  },
  {
    "text": "of bullet over all possibilities so rather than trying to write a loop what I'm going to do is say well you know",
    "start": "1289060",
    "end": "1294730"
  },
  {
    "text": "integers are mono AIDS floats amides any combination of a mind as another money so all the line is a moment and all I",
    "start": "1294730",
    "end": "1301210"
  },
  {
    "text": "have to do is write a pairwise combiner where I just add the two pieces and",
    "start": "1301210",
    "end": "1306250"
  },
  {
    "text": "return the new thing so I have a pair wires combiner which is normally pretty straightforward to write and then once",
    "start": "1306250",
    "end": "1312040"
  },
  {
    "text": "I've got the pairwise combiner I can run it on the entire list just reduce the entire list using the",
    "start": "1312040",
    "end": "1318729"
  },
  {
    "text": "pairwise combiner so there you go that's there's really there's a pattern it",
    "start": "1318729",
    "end": "1324190"
  },
  {
    "text": "would be useful not to say if I have another order line come in tomorrow I don't have to recount the entire total",
    "start": "1324190",
    "end": "1330489"
  },
  {
    "text": "them swatch I can just add this extra one by using the incremental accumulation principle profit now a lot",
    "start": "1330489",
    "end": "1339580"
  },
  {
    "text": "of situations you don't have mono s so for example I have a bunch of customers and I want to find out how you know at",
    "start": "1339580",
    "end": "1345999"
  },
  {
    "text": "let's say I keep track of how many times they visit my website how much money they spend or whatever I'd like to add all that stuff up but I can't because",
    "start": "1345999",
    "end": "1352479"
  },
  {
    "text": "customers are not mano eights however I could create a special kind of class or",
    "start": "1352479",
    "end": "1358389"
  },
  {
    "text": "a structure called customer statistics which is just integers and stuff and that would be a mono because it's all",
    "start": "1358389",
    "end": "1363639"
  },
  {
    "text": "kind of numbers so what they typically do is you take something which isn't a ma night and you turn it into something",
    "start": "1363639",
    "end": "1370269"
  },
  {
    "text": "which is a mano it's and once you've got it as a monoid you can then reduce it down so good turning something which",
    "start": "1370269",
    "end": "1376509"
  },
  {
    "text": "isn't in a model it in term honor that's Mac and then clapping the whole thing down into a single values reduce and",
    "start": "1376509",
    "end": "1382649"
  },
  {
    "text": "you've probably heard of MapReduce but MapReduce out with them so that's why",
    "start": "1382649",
    "end": "1388029"
  },
  {
    "text": "it's called MapReduce it's something to do its moist so here is a nice treat I saw a long",
    "start": "1388029",
    "end": "1395409"
  },
  {
    "text": "long time ago how'd it make me a sandwich so how do you 'pizza is it just you know it does parallel computation",
    "start": "1395409",
    "end": "1401259"
  },
  {
    "text": "and you start off with let's say you start off with some bread and some lettuce and whatever and onion or",
    "start": "1401259",
    "end": "1407259"
  },
  {
    "text": "whatever you can't just mush them together and make a sandwich right they're not they're not composable they're not mono it's but if I slice the",
    "start": "1407259",
    "end": "1415690"
  },
  {
    "text": "loaf and I slice the onion I slice the lettuce the slices can be composed into sandwiches so you know you can then",
    "start": "1415690",
    "end": "1423609"
  },
  {
    "text": "reduce the the slices interest intercessor session of sandwiches so this is mapping followed by reduce as a",
    "start": "1423609",
    "end": "1430179"
  },
  {
    "text": "way of you know making sandwiches so it's kind of fun right here's the",
    "start": "1430179",
    "end": "1435309"
  },
  {
    "text": "problem with monoids is once you recognize this pattern you start seeing in everywhere for example if you do",
    "start": "1435309",
    "end": "1441940"
  },
  {
    "text": "devops or something and you need to keep track of six there's a little rule saying use counters rather than rates and if you",
    "start": "1441940",
    "end": "1448660"
  },
  {
    "text": "say if you're into mono age you say just make sure you metrics the moloids because you can do incremental updates",
    "start": "1448660",
    "end": "1454480"
  },
  {
    "text": "and you can handle missing data Renaissance art and in fact many many design patterns are actually mono is",
    "start": "1454480",
    "end": "1460030"
  },
  {
    "text": "behind the scenes Marc seaman just wrote a blog post the other day about this things like the composite pattern is a",
    "start": "1460030",
    "end": "1467320"
  },
  {
    "text": "mono it the null object hand is a mono composing commands together to make a",
    "start": "1467320",
    "end": "1472330"
  },
  {
    "text": "new command is a mono it and if you're into DVD in the DVD book it talks about",
    "start": "1472330",
    "end": "1477340"
  },
  {
    "text": "closure of operations that's the mod so you really start you know it really kind of wounds you",
    "start": "1477340",
    "end": "1483040"
  },
  {
    "text": "actually now you say well why use the word monoid there's a jargon your word but just like any piece of jargon once",
    "start": "1483040",
    "end": "1490750"
  },
  {
    "text": "you know what it means it's a shortcut to explaining something quite complicated so if I say to somebody else",
    "start": "1490750",
    "end": "1497380"
  },
  {
    "text": "and I say this is a monoid and they know what that means assuming they know what that means they will instantly know that",
    "start": "1497380",
    "end": "1504100"
  },
  {
    "text": "they can paralyze it but they can do incremental stuff that it has a zero element you know all these kinds of things so it's a it's a great shortcut",
    "start": "1504100",
    "end": "1511210"
  },
  {
    "text": "for explaining you know a company and they also know watch patterns to use how to work with them straightaway what",
    "start": "1511210",
    "end": "1518410"
  },
  {
    "text": "about a functional composition is that a monoid so here's an app you know whose",
    "start": "1518410",
    "end": "1524500"
  },
  {
    "text": "are two functions and we compose them together and we make this Apple to carry function it's not the same kind of thing",
    "start": "1524500",
    "end": "1531580"
  },
  {
    "text": "the Apple the you know one thing is an apple - banana function the other is an apple - cherry function so composing",
    "start": "1531580",
    "end": "1537880"
  },
  {
    "text": "functions there is not really a male - unfortunately but if we have functions",
    "start": "1537880",
    "end": "1544000"
  },
  {
    "text": "that turn apples into apples and we combine them we get another function which turns apples and apples and that",
    "start": "1544000",
    "end": "1550990"
  },
  {
    "text": "is a monoid because it's exactly the input functions and the output function is the same kind of thing so if you're",
    "start": "1550990",
    "end": "1556480"
  },
  {
    "text": "working with functions that turn integers into integers or strings into strings that those kinds of things you",
    "start": "1556480",
    "end": "1562960"
  },
  {
    "text": "can actually do them incrementally you can do them you know whatever all that kind of stuff because they're wrong",
    "start": "1562960",
    "end": "1568000"
  },
  {
    "text": "weights right so that's everything you know about mermaids a set of values a",
    "start": "1568000",
    "end": "1573820"
  },
  {
    "start": "1570000",
    "end": "1570000"
  },
  {
    "text": "combining function and it has also such words even if this is what I say so pattern you couldn't recognize because the",
    "start": "1573820",
    "end": "1579730"
  },
  {
    "text": "actual word that he used with an abiding function could be anything so for Strings or lists it's it's not",
    "start": "1579730",
    "end": "1585370"
  },
  {
    "text": "the golfing cat for an integer Zitz called plus in Haskell is the angle",
    "start": "1585370",
    "end": "1591220"
  },
  {
    "text": "bracket sometimes and sometimes you see a platino you're plus all sorts of weird symbols and things but it's the same",
    "start": "1591220",
    "end": "1596260"
  },
  {
    "text": "concepts everywhere and this combination the combiner has to be closed",
    "start": "1596260",
    "end": "1602710"
  },
  {
    "text": "associative and zero so here you can use it for reducing a list you can use it to do parallel computation you can use it",
    "start": "1602710",
    "end": "1609970"
  },
  {
    "text": "for doing incremental calculations all this stuff so there you go that's a monoid so that's tool number one hopefully my",
    "start": "1609970",
    "end": "1617410"
  },
  {
    "text": "nodes are not quite as scary now all right as demystified a little bit I hope now we're going to go even more",
    "start": "1617410",
    "end": "1624250"
  },
  {
    "text": "scarier but and talk about effects so what is an effect functional programmers",
    "start": "1624250",
    "end": "1629290"
  },
  {
    "start": "1627000",
    "end": "1627000"
  },
  {
    "text": "talk about effects all the time so effect is really just a generic type like a list a list of something or it",
    "start": "1629290",
    "end": "1639190"
  },
  {
    "text": "could be a type with some extra data in it like an option type or a result type it could be a type that changes the",
    "start": "1639190",
    "end": "1646060"
  },
  {
    "text": "state of the world like in a sink or it interacts with the world you know tars random number generators or it could",
    "start": "1646060",
    "end": "1653560"
  },
  {
    "text": "carry state around like a state type of cars or type it can be all sorts of state it's actually kind of vague one",
    "start": "1653560",
    "end": "1659950"
  },
  {
    "text": "effect is it really could be all sorts of stuff it's basically you know really it's just a generic type person you know",
    "start": "1659950",
    "end": "1667420"
  },
  {
    "text": "generic type is is is a normal type with some extra stuff right so I'm going to",
    "start": "1667420",
    "end": "1674230"
  },
  {
    "text": "focus on three types in this talk to use them as examples list an option and a",
    "start": "1674230",
    "end": "1680050"
  },
  {
    "text": "sink so hopefully everyone knows what list is the option type if you're using",
    "start": "1680050",
    "end": "1685360"
  },
  {
    "text": "Java this no not there's an optional stuff built in hopefully is most people are familiar with the optional type of",
    "start": "1685360",
    "end": "1690910"
  },
  {
    "text": "some kind and the async type is it you can think of it's like the task type it's kind of similar f-sharp uses a sink",
    "start": "1690910",
    "end": "1697780"
  },
  {
    "text": "and then C shop uses tasks so this whole thing of effects there's like normal",
    "start": "1697780",
    "end": "1704470"
  },
  {
    "text": "world and effects world okay so in normal world you have strings and you have integers and you have billions",
    "start": "1704470",
    "end": "1710010"
  },
  {
    "text": "anyhow functions the turn strings in the instance of strings you have function of the turn into bills so this is like your",
    "start": "1710010",
    "end": "1715890"
  },
  {
    "text": "normal world of the normal everyday objects now what's interesting is for every kind of effect type like options",
    "start": "1715890",
    "end": "1722760"
  },
  {
    "text": "unless normally there's a parallel world it's like a mirror world and everything",
    "start": "1722760",
    "end": "1727800"
  },
  {
    "text": "in this world is options for example so instead of having strings you have optional strings instead of into your",
    "start": "1727800",
    "end": "1734400"
  },
  {
    "start": "1728000",
    "end": "1728000"
  },
  {
    "text": "options and optional books and every function that turns an instant of string",
    "start": "1734400",
    "end": "1739440"
  },
  {
    "text": "in optional world that function turns optional innocent optional strings or it",
    "start": "1739440",
    "end": "1745560"
  },
  {
    "text": "turns optional in sins are optional bills all right so it's like a parallel universe and same thing with lists",
    "start": "1745560",
    "end": "1752160"
  },
  {
    "text": "worlds in list worlds everything is lists of things there's a list of strings and lists events and this the",
    "start": "1752160",
    "end": "1757410"
  },
  {
    "text": "billions and all the functions turn lists into lists you know so this is",
    "start": "1757410",
    "end": "1763650"
  },
  {
    "text": "mindful analogy for these worlds and it's going to be quite an important concept we're going to be talking about these worlds quite a lot and async is",
    "start": "1763650",
    "end": "1770700"
  },
  {
    "text": "another world everything you can see how it's going right you can see the pattern here and so there's this called generic",
    "start": "1770700",
    "end": "1776250"
  },
  {
    "text": "effect no matter what effect it is there's some sort of e I'm going to call Eve a generic effect and there's generic",
    "start": "1776250",
    "end": "1782390"
  },
  {
    "text": "effect types and a generic effect functions okay so that's my effects",
    "start": "1782390",
    "end": "1788790"
  },
  {
    "text": "world so that's the that's everything you need to know about effects just remember every time you hear someone",
    "start": "1788790",
    "end": "1794910"
  },
  {
    "text": "talk about effects you can probably replace it with option or list or a sink or whatever so here's here's our first",
    "start": "1794910",
    "end": "1802200"
  },
  {
    "text": "problem is how do we work with these effects we need to do stuff in the effects world sometimes and how do we do",
    "start": "1802200",
    "end": "1808590"
  },
  {
    "text": "that and I'll give you a some concrete examples so let's say here's the world of normal values and here's the world of",
    "start": "1808590",
    "end": "1814890"
  },
  {
    "text": "options and sometimes we have a function that takes us from the world from the normal world into optional world and",
    "start": "1814890",
    "end": "1821600"
  },
  {
    "text": "then we need to work with the data in the option so we then basically extract that data and we do something with it",
    "start": "1821600",
    "end": "1828390"
  },
  {
    "text": "and then somehow it goes back up into optional world again and then we extract the data again and it goes back into",
    "start": "1828390",
    "end": "1834420"
  },
  {
    "text": "optional world this back and forth between worlds is a really common",
    "start": "1834420",
    "end": "1839610"
  },
  {
    "text": "pattern it's actually really bad and so like don't do this all right functional",
    "start": "1839610",
    "end": "1845740"
  },
  {
    "text": "progress which would call this a kind of design smell or code smell so like well",
    "start": "1845740",
    "end": "1851409"
  },
  {
    "text": "you know how could how do you solve that right what you really want to do is when you go into the effects world whatever",
    "start": "1851409",
    "end": "1857200"
  },
  {
    "text": "it is you want to stay there you want us to keep working up there and only come down at the very end if you have to I",
    "start": "1857200",
    "end": "1865049"
  },
  {
    "text": "mean a good example in c-sharp is the task or the async/await once you've made something async or you",
    "start": "1865049",
    "end": "1873460"
  },
  {
    "text": "turn into your basically stuff you let you have to everything else has to work in that world in the async world or the",
    "start": "1873460",
    "end": "1878830"
  },
  {
    "text": "task world and you only ever come down at the very top of your program you don't you know it's bad bad practice to",
    "start": "1878830",
    "end": "1885490"
  },
  {
    "text": "like a wait for a task to finish and then start another task than to wait for the side what you want to do is lift everything up into this async world and",
    "start": "1885490",
    "end": "1892360"
  },
  {
    "text": "work up there and then at the very end of your program which is you all can fall or whatever it is that's where you",
    "start": "1892360",
    "end": "1898029"
  },
  {
    "text": "actually deal with the async or the task so that's the right way to do so let's",
    "start": "1898029",
    "end": "1904539"
  },
  {
    "text": "say we have an ad for to function very important function and if we went on a",
    "start": "1904539",
    "end": "1909580"
  },
  {
    "text": "normal thing like 1 we get the answer 43 if we were not on another thing which is",
    "start": "1909580",
    "end": "1914620"
  },
  {
    "text": "an option world like someone it doesn't work it only works on normal things",
    "start": "1914620",
    "end": "1919690"
  },
  {
    "text": "doesn't work on options so this ad 42 function is useless as that by the way",
    "start": "1919690",
    "end": "1924850"
  },
  {
    "text": "it's dance so we say ok well let's write our own custom ad 42 - option function",
    "start": "1924850",
    "end": "1930539"
  },
  {
    "text": "so we say well if the option is something if it's about it then we're gonna you know run the ad 42 and then we",
    "start": "1930539",
    "end": "1936880"
  },
  {
    "text": "have to wrap it back up into option world again and if it was never something then we're done we don't have to do anything so we're we're unwrapping",
    "start": "1936880",
    "end": "1944350"
  },
  {
    "text": "it we're doing the thing that we need to do and then wrapping a break up again and that's like I say that's a bad way",
    "start": "1944350",
    "end": "1950860"
  },
  {
    "text": "to do it you're going down you're doing something you come back up this is an antique man so what you instead you want",
    "start": "1950860",
    "end": "1957399"
  },
  {
    "text": "to do is you want to somehow be able to work with this ad 42 function up in the",
    "start": "1957399",
    "end": "1962409"
  },
  {
    "text": "effects world in the optional world so we want to stay up there so how do we how do we how do we make an ad 42",
    "start": "1962409",
    "end": "1968409"
  },
  {
    "text": "function up there without having to the only special thermal every single time and that's what mapped us so this",
    "start": "1968409",
    "end": "1974650"
  },
  {
    "text": "map is a there's a function transformer that moves functions from one world to another Wells so if we have a function",
    "start": "1974650",
    "end": "1980290"
  },
  {
    "text": "down here that turns T's into use if we do option map it turns options of cheese",
    "start": "1980290",
    "end": "1986320"
  },
  {
    "text": "into options of use that's what option that does so in our code instead of you",
    "start": "1986320",
    "end": "1992530"
  },
  {
    "text": "know with our normal function we can say option map around 42 and that gives us our and 42 to option so now we have a",
    "start": "1992530",
    "end": "1999880"
  },
  {
    "text": "the add 42 now works in the world of options and we can run it straight away",
    "start": "1999880",
    "end": "2005269"
  },
  {
    "text": "so we now have a function in the option where we didn't have to write any special code to wrap it and unwrap it again it just happens for free and",
    "start": "2005390",
    "end": "2012390"
  },
  {
    "text": "typically we don't actually write a special we don't give it a special name we digitally inline it like this the option out of this and we can apply it",
    "start": "2012390",
    "end": "2019320"
  },
  {
    "text": "to the other thing same thing with this world let's say we want to add 42 to",
    "start": "2019320",
    "end": "2026460"
  },
  {
    "text": "each integer each item in the list so you know for each item in the list we",
    "start": "2026460",
    "end": "2032190"
  },
  {
    "text": "had 42 and then we put it back in the list again and return the new list say but we're doing this thing when you're",
    "start": "2032190",
    "end": "2038490"
  },
  {
    "text": "doing an iteration you're basically unwrapping things out of the list you're pulling out each element out one at a time applying the thing and then putting",
    "start": "2038490",
    "end": "2044940"
  },
  {
    "text": "them back in a list again so again this has been a dependent you don't want to",
    "start": "2044940",
    "end": "2050040"
  },
  {
    "text": "come down do the thing and go back up don't do that again we can instead we use lists map so it takes a normal",
    "start": "2050040",
    "end": "2057570"
  },
  {
    "text": "function down a normal world you run list map and it gives you a function up in list world so if I wanted to find the",
    "start": "2057570",
    "end": "2064950"
  },
  {
    "text": "add 42 to each function all I have to say is list map of the add 42 function now I have a function that works on this",
    "start": "2064950",
    "end": "2071639"
  },
  {
    "text": "I didn't have to write any special code so that's kind of cool so you can see",
    "start": "2071640",
    "end": "2077310"
  },
  {
    "text": "that this map is really really useful and people say well I can always write",
    "start": "2077310",
    "end": "2083490"
  },
  {
    "text": "my own loops why is this any easier than writing my own loops and the answer is that again if you if once you know what",
    "start": "2083490",
    "end": "2090510"
  },
  {
    "text": "this map does first of all it's easy for you to use because you don't have to",
    "start": "2090510",
    "end": "2097230"
  },
  {
    "text": "write any code secondly it's also easier for someone else to understand assuming they understand how how it works they can look at your",
    "start": "2097230",
    "end": "2104460"
  },
  {
    "text": "code and they know exactly what's going on sometimes if you look at a complicated loop you're trying to figure out what's actually going on in this",
    "start": "2104460",
    "end": "2110310"
  },
  {
    "text": "loop you know because it's not the loop logic kind of gets in the way of the actual thing that you're trying to do if",
    "start": "2110310",
    "end": "2117720"
  },
  {
    "text": "you use things like this map the loop logic it's kind of hidden so you can really focus on what's actually being",
    "start": "2117720",
    "end": "2123599"
  },
  {
    "text": "transformed what's actually going in this case it's really obvious that we're adding 42 to each item now if I had a",
    "start": "2123599",
    "end": "2128940"
  },
  {
    "text": "head of loop and there was like 42 in there it would take me some time to figure it out so I actually think this",
    "start": "2128940",
    "end": "2134520"
  },
  {
    "text": "is better once you understand what this map does it's actually easier and of course async same thing we have a normal",
    "start": "2134520",
    "end": "2142859"
  },
  {
    "text": "function and we can map it into the world at resync and that way we can kind of chain async function together so most",
    "start": "2142859",
    "end": "2150480"
  },
  {
    "text": "generic types have a map there's no single zone you use them and if you are",
    "start": "2150480",
    "end": "2157200"
  },
  {
    "text": "your own generic type that you're going to put out in a library make your own map and then everyone else can use it and of course now we have the jargon",
    "start": "2157200",
    "end": "2164670"
  },
  {
    "text": "version of Mac so the jargon version is it's a funk guitar so a function is an effect type which again is option nor a",
    "start": "2164670",
    "end": "2172079"
  },
  {
    "text": "single list or one or whatever it is plus some sort of map function that works with it there's specifically",
    "start": "2172079",
    "end": "2178380"
  },
  {
    "text": "designed so you know the definition the implementation of map for options is different from the implementation of map",
    "start": "2178380",
    "end": "2184680"
  },
  {
    "text": "for lists which is different from the implementation of map for tasks or you",
    "start": "2184680",
    "end": "2189750"
  },
  {
    "text": "think whatever but the concept is the same so I can use in a list map or",
    "start": "2189750",
    "end": "2195030"
  },
  {
    "text": "whatever once I know that this thing is this I know exactly how to use it the map function has all sorts of different",
    "start": "2195030",
    "end": "2201000"
  },
  {
    "text": "names sometimes it's called selects sometimes called lifts sometimes it's",
    "start": "2201000",
    "end": "2208020"
  },
  {
    "text": "called f map so it needs to have a sensible implementation it turns out",
    "start": "2208020",
    "end": "2214770"
  },
  {
    "text": "there's a bunch of things called a functor laws which is really just a fancy name for some rules that",
    "start": "2214770",
    "end": "2220020"
  },
  {
    "text": "implementations should have to make sure that they work sensibly like you thought you shouldn't do them something too stupid and the function laws are just",
    "start": "2220020",
    "end": "2226440"
  },
  {
    "text": "basically a way of making sure that your implementation makes sense so that's",
    "start": "2226440",
    "end": "2232050"
  },
  {
    "text": "number two what about number three well this is a really simple one this is just sometimes you know we just talked about",
    "start": "2232050",
    "end": "2238800"
  },
  {
    "text": "moving functions from one world to another let's talk about moving individual values like integers or",
    "start": "2238800",
    "end": "2244650"
  },
  {
    "text": "strings and that's called the turn so here a word of normal values and we want",
    "start": "2244650",
    "end": "2250109"
  },
  {
    "text": "to make it an optional int we just use return right here it is and here's a normal value and we make it an optional",
    "start": "2250109",
    "end": "2257670"
  },
  {
    "text": "int or lacking something similarly with lists if we are a single integer and we",
    "start": "2257670",
    "end": "2265020"
  },
  {
    "text": "want to make a list out of it we use lists return and that makes a list events so here you have 42 and we make a",
    "start": "2265020",
    "end": "2272490"
  },
  {
    "text": "list out of it you know just in this case it's really easy it's just tonight single item in our lists so again it's",
    "start": "2272490",
    "end": "2278700"
  },
  {
    "text": "not normally called return I mean the actual way of making these things that the name is all sorts of it's all",
    "start": "2278700",
    "end": "2284910"
  },
  {
    "text": "different in different environment the concept is you're just moving thing from one world to another value normal world",
    "start": "2284910",
    "end": "2290160"
  },
  {
    "text": "value in this world so you bear with me you probably thinking all these things",
    "start": "2290160",
    "end": "2295730"
  },
  {
    "text": "are they actually you know useful and at the very end of the talk I'm actually going to show you how to assemble all in",
    "start": "2295730",
    "end": "2302250"
  },
  {
    "text": "a real piece of code using all the different tools together and you so just",
    "start": "2302250",
    "end": "2307349"
  },
  {
    "text": "think about how you know how these tools can work together to build a complex program now this is the most important",
    "start": "2307349",
    "end": "2313890"
  },
  {
    "text": "tool probably in the function problems which is bind and it's it's is used for",
    "start": "2313890",
    "end": "2319530"
  },
  {
    "text": "world crossing functions I think what they it's a world crossing function okay I know introducing all these kind of",
    "start": "2319530",
    "end": "2324569"
  },
  {
    "text": "concepts but they're not they're not some particularly difficult to understand I don't think it's just",
    "start": "2324569",
    "end": "2330270"
  },
  {
    "text": "something different that you're not used to if you you know on a functional program so here's a function called",
    "start": "2330270",
    "end": "2336480"
  },
  {
    "text": "range and you give it a maximum number and it will give you a list of all the",
    "start": "2336480",
    "end": "2341849"
  },
  {
    "text": "numbers up to that number so if you give it a you know the maximum of 100 it give you all the numbers from 1 to 100 okay",
    "start": "2341849",
    "end": "2347910"
  },
  {
    "text": "pretty straightforward now if you look at the what it does you pass in an int",
    "start": "2347910",
    "end": "2353579"
  },
  {
    "text": "and you get back a list events right so you have a value in normal world and the",
    "start": "2353579",
    "end": "2359700"
  },
  {
    "text": "output is a value list the world this is really really common so if you think about it like",
    "start": "2359700",
    "end": "2365540"
  },
  {
    "text": "this you start off with an int down here and you end up with the list of ends up here I mean this is range",
    "start": "2365540",
    "end": "2372650"
  },
  {
    "text": "now here's another more complicated example let's say you're getting a customer from a database are you passing",
    "start": "2372650",
    "end": "2377900"
  },
  {
    "text": "the customer ID if the customer is found then you can say yeah I found some",
    "start": "2377900",
    "end": "2383569"
  },
  {
    "text": "customer data and I'm going to give it back to you if I didn't find the customer I say okay I won't give you back anything and again if you look at",
    "start": "2383569",
    "end": "2391550"
  },
  {
    "text": "the inputs and outputs for the function it says will you give me a customer ID which is a normal thing and I'll give",
    "start": "2391550",
    "end": "2396829"
  },
  {
    "text": "you an optional piece of customer data so the the input is in normal world but",
    "start": "2396829",
    "end": "2402710"
  },
  {
    "text": "the output is an option world so again this is a world crossing function it starts down at the bottom and ends up at",
    "start": "2402710",
    "end": "2408950"
  },
  {
    "start": "2405000",
    "end": "2405000"
  },
  {
    "text": "the top these functions are really really common in functional programming",
    "start": "2408950",
    "end": "2414280"
  },
  {
    "text": "so the cases that get customer function so this is like really really really",
    "start": "2414280",
    "end": "2419329"
  },
  {
    "text": "really common problem and how do you change these things together so here's some code it's just it's kind of silly",
    "start": "2419329",
    "end": "2425240"
  },
  {
    "text": "in this example you have you do something and you get back an X and let's say that do something is a world",
    "start": "2425240",
    "end": "2430790"
  },
  {
    "text": "crossing function it returns an option say well I can't really do anything with the X unless I know whether it's valid",
    "start": "2430790",
    "end": "2436579"
  },
  {
    "text": "or not so I have to say is it something if it's something let me go on and then I do something with that and that maybe",
    "start": "2436579",
    "end": "2442490"
  },
  {
    "text": "that gives me another something and I have to say I have to check that as well and maybe then only when it's valid can",
    "start": "2442490",
    "end": "2448400"
  },
  {
    "text": "I do the next thing and I have to check that as well and only when it's rylynn can I get the next thing and so on now",
    "start": "2448400",
    "end": "2453440"
  },
  {
    "text": "you could replace this with null checking you probably seen the same kind of code if it's not now do the next thing if that's not no I'll do the next",
    "start": "2453440",
    "end": "2459740"
  },
  {
    "text": "thing you know if that's not null do the next thing so this is just the the option version exactly the same code and",
    "start": "2459740",
    "end": "2466760"
  },
  {
    "text": "it's this horrible thing you get this massive thing you've got all these",
    "start": "2466760",
    "end": "2471980"
  },
  {
    "text": "nested checks and they and they add up they get if you get more more indentation in your code and this is",
    "start": "2471980",
    "end": "2477410"
  },
  {
    "text": "typically called the pyramid of Doom because you're you know as you if you have like three checks it's already",
    "start": "2477410",
    "end": "2482420"
  },
  {
    "text": "pretty until you have 20 checks it's gonna be you know it's just ridiculous you wouldn't want this is just horrible",
    "start": "2482420",
    "end": "2487609"
  },
  {
    "text": "code nobody wants to code like this and you see this all the time in other situations let's say we're doing with",
    "start": "2487609",
    "end": "2493309"
  },
  {
    "text": "guitar and we went a task and then when the task is finished we get the rally that",
    "start": "2493309",
    "end": "2498450"
  },
  {
    "text": "gets output and we run the next task with that and then when that task was finished we do the next thing and when",
    "start": "2498450",
    "end": "2504570"
  },
  {
    "text": "that's finished we did the next thing so whether these are tasks or promises or futures whatever you wanna call them you see this pattern a lot - and again",
    "start": "2504570",
    "end": "2511530"
  },
  {
    "text": "it's a pyramid of doom you can have a world crossing function you always have to check",
    "start": "2511530",
    "end": "2516960"
  },
  {
    "text": "you always have to kind of deconstruct it you have these nested two callbacks in this case and you end up with this",
    "start": "2516960",
    "end": "2522420"
  },
  {
    "text": "pyramid so this is ugly no matter what it is so let's see if we can solve this",
    "start": "2522420",
    "end": "2528300"
  },
  {
    "text": "problem let's fix this there's a pattern here that we can exploit you might see",
    "start": "2528300",
    "end": "2535260"
  },
  {
    "text": "if it's something do something if it's something do something if it's something do something this is the pan so let's",
    "start": "2535260",
    "end": "2541380"
  },
  {
    "text": "turn that intraductal helper function okay we're going to say if it's something do something and if it's not",
    "start": "2541380",
    "end": "2547350"
  },
  {
    "text": "then we do nothing that's the pattern so what exactly we do we don't know what",
    "start": "2547350",
    "end": "2554160"
  },
  {
    "text": "we're going to do with that thing so let's parameterize it we're going to say we'll pass in a function parameter",
    "start": "2554160",
    "end": "2559980"
  },
  {
    "text": "and the function parameter will do what we want to do we don't have to worry about what it is exactly so we might a",
    "start": "2559980",
    "end": "2565680"
  },
  {
    "text": "piece a little a piece of code like this if something do and if it's if the if",
    "start": "2565680",
    "end": "2570750"
  },
  {
    "text": "the input is optional then we run this with a helper function and if it's not though it's missing so this parameter",
    "start": "2570750",
    "end": "2576660"
  },
  {
    "text": "this function parameter is the things that you want to do as the next step if you valid so once we have this little",
    "start": "2576660",
    "end": "2586620"
  },
  {
    "text": "helper function we can rewrite our original code to look like this do",
    "start": "2586620",
    "end": "2591630"
  },
  {
    "text": "something and if it's something then do the next thing and if this if that one isn't something then do the next thing",
    "start": "2591630",
    "end": "2597840"
  },
  {
    "text": "and in fact something do the next thing and this what this little helper function does is basically clean up all",
    "start": "2597840",
    "end": "2605010"
  },
  {
    "text": "that nested stuff we now have a nice linear vertical-align thing there's no indentation going on so this is a really",
    "start": "2605010",
    "end": "2612660"
  },
  {
    "text": "really nice way of tidying up your code how I'm going to use the railway analogy",
    "start": "2612660",
    "end": "2618620"
  },
  {
    "text": "so with options you can sort of think of there's an input and there's two kind of",
    "start": "2618620",
    "end": "2624120"
  },
  {
    "text": "two possible outputs there's either something or it's nothing and if it's something we want to do the",
    "start": "2624120",
    "end": "2629500"
  },
  {
    "text": "next thing in the chain and if it's nothing we want to bypass right so if",
    "start": "2629500",
    "end": "2634780"
  },
  {
    "text": "you actually had little bits of railway like if you're playing with Brio or wouldn't wouldn't well we have some kind",
    "start": "2634780",
    "end": "2640000"
  },
  {
    "text": "how would you connect these things together well you couldn't connect them like that but you could connect them",
    "start": "2640000",
    "end": "2645100"
  },
  {
    "text": "like that so this is this is you know this is very close to what we want but",
    "start": "2645100",
    "end": "2650500"
  },
  {
    "text": "if we can get something like this then we've connected more together very nicely so that's our goal now here's the",
    "start": "2650500",
    "end": "2656920"
  },
  {
    "text": "problem if we have one track functions with one input and one output they're easy to compose we just connect the",
    "start": "2656920",
    "end": "2662350"
  },
  {
    "text": "inputs and outputs if we have to track functions with two inputs and two outputs they're also easy to compose we",
    "start": "2662350",
    "end": "2667990"
  },
  {
    "text": "just want them up in the obvious way but what we have is one track input and to",
    "start": "2667990",
    "end": "2673600"
  },
  {
    "text": "track output and those things cannot be composed they just they don't fit together properly so how can we combine",
    "start": "2673600",
    "end": "2681990"
  },
  {
    "text": "mismatched functions like this and the answer is bind bind all things functional programmers love the word",
    "start": "2681990",
    "end": "2688240"
  },
  {
    "text": "bind so here we are here's our problem again we've got these kind of points",
    "start": "2688240",
    "end": "2693730"
  },
  {
    "text": "that don't compose if we had to track functions they would compose those are good so how do we get from before to",
    "start": "2693730",
    "end": "2700359"
  },
  {
    "text": "after okay well we have a function adapter a function transformer and if",
    "start": "2700359",
    "end": "2705760"
  },
  {
    "text": "you think about the wooden railway track you can actually get these kind of little wooden adapter blocks that you",
    "start": "2705760",
    "end": "2711040"
  },
  {
    "text": "stick in you know so you know you put in this in this adapter block you stick in your your points function and it comes",
    "start": "2711040",
    "end": "2718960"
  },
  {
    "text": "down as a two track function and that's at RSA it's a kind of function transforming functions as input and",
    "start": "2718960",
    "end": "2725050"
  },
  {
    "text": "functions as output and the implementation it's it's big SMO you know it's actually a very simple",
    "start": "2725050",
    "end": "2730750"
  },
  {
    "text": "impression it's like literally four lines of code it's more complicated to explain and then to actually show the",
    "start": "2730750",
    "end": "2735760"
  },
  {
    "text": "code so here's the code an input comes in and if it's something we do the next",
    "start": "2735760",
    "end": "2741880"
  },
  {
    "text": "function we do the thing that you pass in and if it's nothing we don't know anything so that's actually the entire",
    "start": "2741880",
    "end": "2746890"
  },
  {
    "text": "implementation of bind for these kinds of points functions",
    "start": "2746890",
    "end": "2753300"
  },
  {
    "text": "so if we use it for training options this is what it looks like before if we use up a chain for doing you know we",
    "start": "2753320",
    "end": "2759410"
  },
  {
    "text": "write this in a bind helper function by the way is exactly that little if something do function that's exactly the",
    "start": "2759410",
    "end": "2765140"
  },
  {
    "text": "same so that if something do is actually buying the same thing again it's got this parameter that you pass in as the",
    "start": "2765140",
    "end": "2771350"
  },
  {
    "text": "next thing in the chain and then our code then becomes linear so we're now using bind as look as the word here so",
    "start": "2771350",
    "end": "2778850"
  },
  {
    "text": "no pyramids and it's linear and clean and if we do the same thing with tasks",
    "start": "2778850",
    "end": "2784070"
  },
  {
    "text": "when a task completes we do the next thing in the task and if it doesn't complete whatever we don't do the next thing same kind of pattern we write",
    "start": "2784070",
    "end": "2791060"
  },
  {
    "text": "little task bind insert okay so this is the ugly version with the pyramids of doom and we added a task bind which",
    "start": "2791060",
    "end": "2798830"
  },
  {
    "text": "again is no it's a different implementation but it has the same concept it's like chaining tasks together when we get the result we want",
    "start": "2798830",
    "end": "2804710"
  },
  {
    "text": "to run a function on it okay there's a little what is our parameterised next function and then once we have something",
    "start": "2804710",
    "end": "2811850"
  },
  {
    "text": "like this we can then whoops we can then connect all the the tasks together in a",
    "start": "2811850",
    "end": "2816890"
  },
  {
    "text": "linear way we can you know start a task and then we can bind that to the next",
    "start": "2816890",
    "end": "2822380"
  },
  {
    "text": "task and we can bind that to the next task of buying that to the next task so this is the it's as I said my as a",
    "start": "2822380",
    "end": "2828410"
  },
  {
    "text": "general concept it's not just specifically for options on this sort of tarsus a concept you can apply to almost",
    "start": "2828410",
    "end": "2833780"
  },
  {
    "text": "anything to any kind of effect and let's look at one more example which is error",
    "start": "2833780",
    "end": "2838970"
  },
  {
    "text": "handling so here's an example of a function that doesn't narrow handling",
    "start": "2838970",
    "end": "2845990"
  },
  {
    "text": "you receive a request you validate requests you might canonicalize the email maybe make sure it makes make sure",
    "start": "2845990",
    "end": "2852200"
  },
  {
    "text": "it's a lower case you might update the database you might send an email to the customer or something who knows but this",
    "start": "2852200",
    "end": "2858170"
  },
  {
    "text": "is pretty you know it's only five lines of code is pretty straightforward but here's the problem errors happen like what happens if the",
    "start": "2858170",
    "end": "2865130"
  },
  {
    "text": "request is not valid what happens if the customer isn't found in the database what happens if you get a database",
    "start": "2865130",
    "end": "2871400"
  },
  {
    "text": "exception what happens if the SMTP server doesn't send email you know all of a sudden you start off with a bunch",
    "start": "2871400",
    "end": "2879290"
  },
  {
    "text": "of simple code and also in your code gets really complicated in this case it's three times longer or twice as twice as long as those",
    "start": "2879290",
    "end": "2885480"
  },
  {
    "text": "and this is you know if you've written our handling code this you see this all the time you start over something which",
    "start": "2885480",
    "end": "2891540"
  },
  {
    "text": "it starts off really simple and it gets kind of cluttered and complicated and messy and and you lose track of what the",
    "start": "2891540",
    "end": "2898110"
  },
  {
    "text": "important features are the important stuff is is buried in all error handling so let's look at the functional",
    "start": "2898110",
    "end": "2904740"
  },
  {
    "text": "equivalents we're going to define a result type which basically is two choices it's got a success case an okay",
    "start": "2904740",
    "end": "2913020"
  },
  {
    "text": "case and an error case or a failure case and it's one of these points functions again something comes in and it can",
    "start": "2913020",
    "end": "2919020"
  },
  {
    "text": "either come out as a success or come out as a failure and then all our little",
    "start": "2919020",
    "end": "2924090"
  },
  {
    "text": "validation functions basically say in this case if it's if the name is blank as an error if the emails blank that's",
    "start": "2924090",
    "end": "2930690"
  },
  {
    "text": "an error if they otherwise it's fine and you go through all the all your functions in your workflow you do the",
    "start": "2930690",
    "end": "2937320"
  },
  {
    "text": "exactly same thing and you end up with a bunch of points functions like this validating might might not return an",
    "start": "2937320",
    "end": "2942540"
  },
  {
    "text": "error updating a database my oh my oh my oh my not return there are sending an email might be an error or whatever",
    "start": "2942540",
    "end": "2947610"
  },
  {
    "text": "again you have exactly the same situation here before we have these points functions and we want to connect them together and there we go we're done",
    "start": "2947610",
    "end": "2956570"
  },
  {
    "text": "so that's the two-track model of error handling otherwise known as a railway order programming and I have a whole",
    "start": "2956570",
    "end": "2963960"
  },
  {
    "text": "talk on that if you're interested so here's the here's the code before we added error handling let's say we don't",
    "start": "2963960",
    "end": "2969690"
  },
  {
    "text": "do any Harry handle we just throw exceptions right so we take the request we validate it we do all the stuff it's",
    "start": "2969690",
    "end": "2976350"
  },
  {
    "text": "nice and clean but there's no error handling right because maybe a one track now if we add the error handling in",
    "start": "2976350",
    "end": "2983070"
  },
  {
    "text": "let's see how much more complicated it makes it okay we're going to do a lot of error handy now every single thing's",
    "start": "2983070",
    "end": "2988080"
  },
  {
    "text": "gonna be handled nicely so afterwards this is what it looks like alright it looks exactly the same now",
    "start": "2988080",
    "end": "2994950"
  },
  {
    "text": "I'm cheating a little bit because I'm using this exactly the same names of the functions but I could validate requests",
    "start": "2994950",
    "end": "3000830"
  },
  {
    "text": "where they were handling an archive email with error handling your update DB were there anything you could name the function slightly differently but the",
    "start": "3000830",
    "end": "3007070"
  },
  {
    "text": "point is you still get this nice workflow but behind the scenes in the two tracks you're handling all the",
    "start": "3007070",
    "end": "3013160"
  },
  {
    "text": "errors really nicely this is a very nice because it keeps the keeps the coke",
    "start": "3013160",
    "end": "3018640"
  },
  {
    "text": "clean right so binds and C is really important the reason it's important as",
    "start": "3018640",
    "end": "3024940"
  },
  {
    "text": "it makes world crossing function is composable so let's make now let's take bind and just make it very generic to",
    "start": "3024940",
    "end": "3031600"
  },
  {
    "text": "any kind of effect they could ever think of it's because it's a pattern really this",
    "start": "3031600",
    "end": "3036760"
  },
  {
    "text": "is a conceptual way of thinking about props we have these world crossing functions which starts off in normal",
    "start": "3036760",
    "end": "3042700"
  },
  {
    "text": "worlds and it ends up in the world of effects so this is a kind of a diagonal function you're going diagonally from",
    "start": "3042700",
    "end": "3048640"
  },
  {
    "text": "one world to another and the problem with these things is they're not composable right now what bind does is",
    "start": "3048640",
    "end": "3054070"
  },
  {
    "text": "it turns it into something where the entire function lives in the world of effects so it's a horizontal function so",
    "start": "3054070",
    "end": "3061690"
  },
  {
    "text": "you've turned a diagonal function into a horizontal function now these horizontal functions are great because they're easy",
    "start": "3061690",
    "end": "3067840"
  },
  {
    "text": "to compose you can literally just glue them together so let's look at example of that so let's say you have a bunch of",
    "start": "3067840",
    "end": "3075220"
  },
  {
    "text": "diagonal functions like this right you take like say you can't glue them",
    "start": "3075220",
    "end": "3080410"
  },
  {
    "text": "together they just don't work doesn't work but if you use bind and you turn it into a horizontal function like this and",
    "start": "3080410",
    "end": "3087490"
  },
  {
    "text": "bind again now we have a bunch of horizontal functions and they can all be glued together so this is why by just so",
    "start": "3087490",
    "end": "3094840"
  },
  {
    "text": "important it's a way of chaining together diagonal functions and diagonal functions are functions they happen all",
    "start": "3094840",
    "end": "3101530"
  },
  {
    "text": "the time whenever you whenever effects happen every time you you know you you work with the i/o whether you worth a",
    "start": "3101530",
    "end": "3107920"
  },
  {
    "text": "database whether you work with options or errors or results or this whether this happens a lot so that's why i buyed",
    "start": "3107920",
    "end": "3115480"
  },
  {
    "text": "are so nice that's the right way to do it so back to some terminology again now",
    "start": "3115480",
    "end": "3120970"
  },
  {
    "start": "3118000",
    "end": "3118000"
  },
  {
    "text": "we know what a monad is so a monad is an effect type of whatever kind you want to",
    "start": "3120970",
    "end": "3127780"
  },
  {
    "text": "call it like option or list or anything from the same whatever it does really doesn't matter what it is plus of a turn",
    "start": "3127780",
    "end": "3134080"
  },
  {
    "text": "function it turns normal values into the things well that's trivial you do you underst they were and return is sometimes called",
    "start": "3134080",
    "end": "3139790"
  },
  {
    "text": "pure sometimes goal unit there's lots of names right now here's the key thing there's a bind function that converts",
    "start": "3139790",
    "end": "3144920"
  },
  {
    "text": "the diagonal function into a horizontal function so this is you have these three things and of course people are",
    "start": "3144920",
    "end": "3153619"
  },
  {
    "text": "inconsistent with the naming my programmers always are some people call it bind some people call it Mac Mac in",
    "start": "3153619",
    "end": "3160099"
  },
  {
    "text": "Haskell they don't even have a name for it is just as funny symbol with two angle brackets in c-sharp if you use",
    "start": "3160099",
    "end": "3165890"
  },
  {
    "text": "link select many is a bind operation and you have to have sensible",
    "start": "3165890",
    "end": "3172220"
  },
  {
    "text": "implementations and those are the Monad laws so when you hear something like the Monad laws you know if you break the Monad laws you're going to go to jail no",
    "start": "3172220",
    "end": "3179359"
  },
  {
    "text": "if you break the Monad laws it just means that your your code doesn't work the way people would expect because you're not the implementation doesn't it",
    "start": "3179359",
    "end": "3187550"
  },
  {
    "text": "doesn't make any sense so that's what a monad is a monad is there's these things",
    "start": "3187550",
    "end": "3193339"
  },
  {
    "text": "it's just that a type plus two functions plus some rules you have to follow when",
    "start": "3193339",
    "end": "3198589"
  },
  {
    "text": "you implement it so hopefully it's not so scary maybe maybe monad a little little bit",
    "start": "3198589",
    "end": "3205640"
  },
  {
    "text": "demystified okay so monads are so important because you have these effect generating",
    "start": "3205640",
    "end": "3212480"
  },
  {
    "text": "functions you want to chain them in series you need to use a monad now one quick thing is mono is versus mono AIDS",
    "start": "3212480",
    "end": "3219440"
  },
  {
    "text": "and this sounds like the same words they",
    "start": "3219440",
    "end": "3224780"
  },
  {
    "text": "are efficiency they actually different but there's a there is a connection because there's another way of composing these points functions you can compose",
    "start": "3224780",
    "end": "3232310"
  },
  {
    "text": "two points functions get back another points function it's the same kind of thing and there's there's a symbol for",
    "start": "3232310",
    "end": "3238130"
  },
  {
    "text": "that kind of thing angle bracket equals angle bracket what's interesting is if you combine these two things you get",
    "start": "3238130",
    "end": "3243800"
  },
  {
    "text": "back another thing at the same type does that sound familiar so you can repeat it repeatedly add things to them and it",
    "start": "3243800",
    "end": "3252500"
  },
  {
    "text": "also turns out that the order that you can buy things doesn't matter so this looks awfully familiar",
    "start": "3252500",
    "end": "3257869"
  },
  {
    "text": "and in fact if you do this this kind of composition is in fact I'm already using",
    "start": "3257869",
    "end": "3263930"
  },
  {
    "text": "points functions right enough of that one more thing and then we're talking",
    "start": "3263930",
    "end": "3269960"
  },
  {
    "text": "lives so we have these effects like we have an option of something and on that option something will you combine them so get a",
    "start": "3269960",
    "end": "3277210"
  },
  {
    "text": "pair so let's say we have an optional 42 and an optional hello and we can find them when we get a pair you know an",
    "start": "3277210",
    "end": "3283690"
  },
  {
    "text": "optional 42 and hello as a pair as a tuple which is affecting what you expect",
    "start": "3283690",
    "end": "3290040"
  },
  {
    "text": "now if one of the things is nothing then the overall result is nothing all right",
    "start": "3290040",
    "end": "3295720"
  },
  {
    "text": "that's also what you'd expect now what about lists if we combine two lists and we create a pair of item pair",
    "start": "3295720",
    "end": "3302440"
  },
  {
    "text": "of items from each lists how do you do that well it turns out there's actually two different ways one is the cross",
    "start": "3302440",
    "end": "3309130"
  },
  {
    "start": "3306000",
    "end": "3306000"
  },
  {
    "text": "product so if I have 1 2 3 and ABC I can pair each one with every other one so",
    "start": "3309130",
    "end": "3314800"
  },
  {
    "text": "one at a and then one being on C and 2a or 2b and 2c and so on so there's nine possible answers the other alternative",
    "start": "3314800",
    "end": "3321400"
  },
  {
    "text": "is zip when you zip to this together you just take them pairwise first one in the",
    "start": "3321400",
    "end": "3327010"
  },
  {
    "text": "first one 1a and 2 B and 3c so there's two different ways of combining lists the general term the combining things",
    "start": "3327010",
    "end": "3335710"
  },
  {
    "text": "like this is a picutre functor another another kind of nasty word and optional",
    "start": "3335710",
    "end": "3341319"
  },
  {
    "text": "s an async electives pretty much everything you're going to run into can",
    "start": "3341319",
    "end": "3347530"
  },
  {
    "text": "be treated as an objective so a package functors that's a horrible name really",
    "start": "3347530",
    "end": "3352660"
  },
  {
    "text": "isn't it again it's one of these effect types plus of a turn function plus some",
    "start": "3352660",
    "end": "3358270"
  },
  {
    "text": "way of combining these two effects into one and it's got all again also sort of",
    "start": "3358270",
    "end": "3363670"
  },
  {
    "text": "names apply pair different slightly different implementations exactly how it works but the whole point is you're",
    "start": "3363670",
    "end": "3369069"
  },
  {
    "text": "basically combining things and again there has to be sensible implementations which it calls a functor applicator",
    "start": "3369069",
    "end": "3375190"
  },
  {
    "text": "functor laws and so on all right why is this useful it sounds kind of interesting but it's actually relevant",
    "start": "3375190",
    "end": "3381060"
  },
  {
    "text": "well here's a here's a really common problem you want to validate field in parallel let's say we have a customer",
    "start": "3381060",
    "end": "3387670"
  },
  {
    "text": "and they have to have you know the name has to be 50 characters exactly or less than 50 characters it can't reward the",
    "start": "3387670",
    "end": "3393940"
  },
  {
    "text": "email address has to be validated being outside that you know it has to be proper birthdate which is more than 19",
    "start": "3393940",
    "end": "3399810"
  },
  {
    "text": "less than the Hyundai whatever often you have these validation rules so we complete some validation functions just",
    "start": "3399810",
    "end": "3406320"
  },
  {
    "text": "like our points functions that we've done before but when you chain them together the problem is if there's an",
    "start": "3406320",
    "end": "3412170"
  },
  {
    "text": "error we get the first error and then the rest of them are bypassed so we get one error and all the other possible",
    "start": "3412170",
    "end": "3417510"
  },
  {
    "text": "errors we never even know about so you know that's okay but it'd be nice if you get all the errors at once right that",
    "start": "3417510",
    "end": "3423690"
  },
  {
    "text": "would be nice so what you do is you say you start off with a piece of JSON or a little you",
    "start": "3423690",
    "end": "3428730"
  },
  {
    "text": "know the DTO toy where nothing is about it the string could be anything in the email could be anything for each field",
    "start": "3428730",
    "end": "3434490"
  },
  {
    "text": "in this data structure you won the little validation rule and you get back",
    "start": "3434490",
    "end": "3439980"
  },
  {
    "text": "some results and then you combine the output to make a final sign that way you get to keep all the errors at once that's what we want to basically run",
    "start": "3439980",
    "end": "3446160"
  },
  {
    "text": "this stuff in parallel rather than in series so how do we combine them that's",
    "start": "3446160",
    "end": "3451320"
  },
  {
    "text": "where the applicative comes in so we have all these different values which live in result world we have a result of",
    "start": "3451320",
    "end": "3458760"
  },
  {
    "text": "a name it might or might not be valid we have a result of an email that might or might not be valid and a birthday that",
    "start": "3458760",
    "end": "3463950"
  },
  {
    "text": "might or might not be valid how do we combine them well we don't have to combine them in the normal world if we",
    "start": "3463950",
    "end": "3469110"
  },
  {
    "text": "have a valid name and a valid email and so on we just use the constructor to combine them right we can we use the",
    "start": "3469110",
    "end": "3475140"
  },
  {
    "text": "constructor and we now get a van a customer but this is working in normal world what's cool about applicatives is that",
    "start": "3475140",
    "end": "3481440"
  },
  {
    "text": "you can turn a function that works in normal worlds into a function that works in result world so you can take that",
    "start": "3481440",
    "end": "3487200"
  },
  {
    "text": "constructor function and kind of lift it up into result worlds using the magic of",
    "start": "3487200",
    "end": "3493020"
  },
  {
    "text": "applicatives I'm not going to tell you how to do it because it's kind of confusing but the point is you can take these individual things and make a",
    "start": "3493020",
    "end": "3499200"
  },
  {
    "text": "customer and this customer is in result world and it's done in parallel so if there's any errors all the errors are",
    "start": "3499200",
    "end": "3505470"
  },
  {
    "text": "combined so if you look at the code for this",
    "start": "3505470",
    "end": "3511400"
  },
  {
    "text": "here's creating a valid customer in result worlds we do you know is that validate the one thing the other thing",
    "start": "3512370",
    "end": "3518430"
  },
  {
    "text": "we get the name or an area it's not necessarily a valid name it could be a name or an error right now that",
    "start": "3518430",
    "end": "3523560"
  },
  {
    "text": "constructor is the normal constructor but we use these magic symbols here with",
    "start": "3523560",
    "end": "3529470"
  },
  {
    "text": "the angle brackets and we call it just like with a different just like we've called the normal constructor but we use the magic symbols",
    "start": "3529470",
    "end": "3535220"
  },
  {
    "text": "instead of just a normal function call and this is magic and the output means",
    "start": "3535220",
    "end": "3540590"
  },
  {
    "text": "that we get this error message here's the magic symbols and not that explain how they work but the cool thing is that everything works just like you're",
    "start": "3540590",
    "end": "3546980"
  },
  {
    "text": "calling a normal function now notice that we get a list of error messages how do we combine the list of our messages",
    "start": "3546980",
    "end": "3553690"
  },
  {
    "text": "combining two lists to make another lists we're using monoids so we're using applicative nanoids",
    "start": "3553690",
    "end": "3559310"
  },
  {
    "text": "in this example alright let's review the tools we've got combined which combines",
    "start": "3559310",
    "end": "3565160"
  },
  {
    "text": "two values we got reduce which reduces a list we have map which lifts functions",
    "start": "3565160",
    "end": "3570350"
  },
  {
    "text": "up we have return which lifts individual values up we have bind which turn this",
    "start": "3570350",
    "end": "3575420"
  },
  {
    "text": "diagonal functions into horizontal functions we have apply which combines things in parallel and there's other",
    "start": "3575420",
    "end": "3581030"
  },
  {
    "text": "words for that you might see lifts and so on right let's look at an example I think I'm running a little bit late I'll",
    "start": "3581030",
    "end": "3586190"
  },
  {
    "text": "just be another couple of minutes let's use all the tools together so let's say that you need to download at a URL into",
    "start": "3586190",
    "end": "3593360"
  },
  {
    "start": "3590000",
    "end": "3590000"
  },
  {
    "text": "a JSON file and then you need to parse that jason interest for example a customer dto and then you need to turn",
    "start": "3593360",
    "end": "3600140"
  },
  {
    "text": "that DTO intervallic customer and then you need to store that customer in their database okay now we all got these",
    "start": "3600140",
    "end": "3607010"
  },
  {
    "text": "different worlds going to be working with when we download the JSON file we start off with the URL in the normal",
    "start": "3607010",
    "end": "3612380"
  },
  {
    "text": "world as a string and we actually end up in async world's an async world which is",
    "start": "3612380",
    "end": "3617900"
  },
  {
    "text": "on top of the result world so when you download it it could be a valid piece of JSON or it could be an error because the",
    "start": "3617900",
    "end": "3623869"
  },
  {
    "text": "server didn't was one and the whole thing is async because it doesn't response right away so we've got an async of a result of a",
    "start": "3623869",
    "end": "3630290"
  },
  {
    "text": "piece of jason okay that's our first function the next function we take that piece of jason and we parse it when we",
    "start": "3630290",
    "end": "3638420"
  },
  {
    "text": "decode it into the customer DTO but that might fail because the Jason's invalid right okay so that's it could be an",
    "start": "3638420",
    "end": "3644840"
  },
  {
    "text": "error and then we take the customer DTO and we take out the three fields and each one of these might on my got a",
    "start": "3644840",
    "end": "3650600"
  },
  {
    "text": "valid and then we take those three fields and we can make a customer and then we take that customer in normal",
    "start": "3650600",
    "end": "3656180"
  },
  {
    "text": "world and we store it in a database which again it might or might not still properly and it might be asynchronous so",
    "start": "3656180",
    "end": "3663140"
  },
  {
    "text": "we have all these functions and how we're going to compose them together they're all diagonal functions all weird shapes they're just not going to be",
    "start": "3663140",
    "end": "3669120"
  },
  {
    "text": "composed together none of the stuff matches up but luckily we can use our functional toolkit which we know how to",
    "start": "3669120",
    "end": "3675930"
  },
  {
    "text": "use so the first thing is we have these parsing thing and then creating the customer we just saw had to do that with",
    "start": "3675930",
    "end": "3681870"
  },
  {
    "text": "the applicatives so we can actually replace that with a function that turns the DTO into a customer okay so we've got a DT",
    "start": "3681870",
    "end": "3689670"
  },
  {
    "text": "oh and a customer now where does the DTO come from it comes from parsing the JSON but when we parse the JSON we don't get",
    "start": "3689670",
    "end": "3696480"
  },
  {
    "text": "a DT oh we got a detail or possible error so it's not compatible we have",
    "start": "3696480",
    "end": "3701730"
  },
  {
    "text": "these diagonal functions well how do we do that we use bind okay we do bind on these two functions and now we get some",
    "start": "3701730",
    "end": "3708150"
  },
  {
    "text": "horizontal functions which we can then connect together we compose them together into one function which now takes Jason and turns it into a customer",
    "start": "3708150",
    "end": "3715350"
  },
  {
    "text": "and then here's the code for doing that we have a JSON or error we bind the",
    "start": "3715350",
    "end": "3720600"
  },
  {
    "text": "first thing we bind the second thing so they're literally the code is tiny okay the problem with this is it's still",
    "start": "3720600",
    "end": "3727620"
  },
  {
    "text": "in result well we need to move it into a sink worlds so we use Mac and now it lives in async will and then that's last",
    "start": "3727620",
    "end": "3735120"
  },
  {
    "text": "one storing a customer is again it's a diagonal function so we're going to use bind on it again to turn it horizontal",
    "start": "3735120",
    "end": "3742140"
  },
  {
    "text": "right and now we have the first one goes up to async worlds so Jason to customer",
    "start": "3742140",
    "end": "3749280"
  },
  {
    "text": "is now all in async worlds the customer to storing a database is also an async",
    "start": "3749280",
    "end": "3754380"
  },
  {
    "text": "world so these are now all exactly the same types we can glue them together and make one single function that goes all",
    "start": "3754380",
    "end": "3759840"
  },
  {
    "text": "the way from one to the other so there's an example of how you'd use these tool that you use to this toolkit so here's the code again but to download",
    "start": "3759840",
    "end": "3767220"
  },
  {
    "text": "install custom we start with ul we download the file we take the process thing we just defined and map it up and",
    "start": "3767220",
    "end": "3773610"
  },
  {
    "text": "then we use bind on the last one to wrap it up so again just a few lines of codes",
    "start": "3773610",
    "end": "3778850"
  },
  {
    "text": "it really takes a lot longer to explain everything than to actually write the code you could write this code in mini R",
    "start": "3778850",
    "end": "3784320"
  },
  {
    "text": "- yeah so but we're using the same tools I'm using different kinds of tools that the concepts are the same all the way",
    "start": "3784320",
    "end": "3790500"
  },
  {
    "text": "through so just one thing to take away even if you don't understand everything which I don't think you cross that we",
    "start": "3790500",
    "end": "3796650"
  },
  {
    "text": "can the jargon is jargon just like any kind of joking but it's not that scary you know you can",
    "start": "3796650",
    "end": "3803970"
  },
  {
    "text": "it's just unfamiliar and hopefully you can see one functional people go on about monads all the time right now this",
    "start": "3803970",
    "end": "3811260"
  },
  {
    "text": "is a very generic toolkit they've got a set of functions like Mack and bind that work for anything it's a set of patterns",
    "start": "3811260",
    "end": "3817050"
  },
  {
    "text": "this is really the equivalent of the pattern language just like used to strategy pattern and factory pattern and so on this is the kind of equivalent",
    "start": "3817050",
    "end": "3823470"
  },
  {
    "text": "pattern language for functional programming so we use these consequences over and over and we just sort of use",
    "start": "3823470",
    "end": "3829140"
  },
  {
    "text": "whole bunch of them just for this one is example hopefully you can now see when you see map and apply and bind use",
    "start": "3829140",
    "end": "3834750"
  },
  {
    "text": "you'll have some idea of what they're for but like I say I wouldn't expect you to understand them or it takes a while",
    "start": "3834750",
    "end": "3840480"
  },
  {
    "text": "to get used to them so there's the functional programming toolkit I'm going to post the slides up on my website if",
    "start": "3840480",
    "end": "3847470"
  },
  {
    "text": "you're interested in this I've got other talks I've got a whole thing on design patterns I've got a whole thing on composition the whole thing under main",
    "start": "3847470",
    "end": "3853170"
  },
  {
    "text": "modeling I have a whole book on domain modeling if you were into that follow me",
    "start": "3853170",
    "end": "3858270"
  },
  {
    "text": "on Twitter if you're interested and otherwise thanks so much for coming",
    "start": "3858270",
    "end": "3863240"
  },
  {
    "text": "[Applause] I feel free to ask me questions I'll be",
    "start": "3864580",
    "end": "3871350"
  },
  {
    "text": "around all day",
    "start": "3871350",
    "end": "3873920"
  }
]