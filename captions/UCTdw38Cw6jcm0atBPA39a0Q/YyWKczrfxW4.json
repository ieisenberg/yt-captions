[
  {
    "text": "all right folks I make it three o'clock so I'm gonna start I realize people are",
    "start": "539",
    "end": "6299"
  },
  {
    "text": "filtering in but I you know got a housekeeping and Preamble so we'll just get through that",
    "start": "6299",
    "end": "12540"
  },
  {
    "text": "my name's Ian Cooper uh you can find my socialist there we have we have Twitter uh I post less",
    "start": "12540",
    "end": "19680"
  },
  {
    "text": "there now and we have uh Mastodon for those of you that are",
    "start": "19680",
    "end": "25140"
  },
  {
    "text": "have kind of joined an exodus from Twitter to Mastodon uh given the hillsides",
    "start": "25140",
    "end": "31980"
  },
  {
    "text": "become even more of a Health site this talk is really about the idea of",
    "start": "31980",
    "end": "38399"
  },
  {
    "text": "reactive architectures and how we can use some of those ideas",
    "start": "38399",
    "end": "44399"
  },
  {
    "text": "and what it means when we think about building our own uh distributed systems",
    "start": "44399",
    "end": "51300"
  },
  {
    "text": "who am I most of this just says that I have a big gray beard and I'm quite old and I've been doing this for a fair",
    "start": "51300",
    "end": "56940"
  },
  {
    "text": "amount I I currently work at just eat takeaway um locals can blame me for A",
    "start": "56940",
    "end": "64018"
  },
  {
    "text": "non-delivery of their food if they wish uh uh uh at the point I always raise is",
    "start": "64019",
    "end": "69119"
  },
  {
    "text": "the one at the bottom right I and some other folks in this room got started speaking because we started the.net User",
    "start": "69119",
    "end": "76799"
  },
  {
    "text": "Group in about 2003 when there literally were no experts so we had to give talks ourselves",
    "start": "76799",
    "end": "82680"
  },
  {
    "text": "and as a result of that we kind of got past that initial hurdle of fear uh",
    "start": "82680",
    "end": "89400"
  },
  {
    "text": "about standing up in front of other people and talking uh and that went on to enable us to",
    "start": "89400",
    "end": "95880"
  },
  {
    "text": "start speaking at conferences et cetera around the world um and I would encourage any of you to",
    "start": "95880",
    "end": "102299"
  },
  {
    "text": "consider doing it and any of you may think to yourself I have nothing to say that's because you think about the",
    "start": "102299",
    "end": "107820"
  },
  {
    "text": "things that you and your peer group know there are people who want to not want to",
    "start": "107820",
    "end": "112979"
  },
  {
    "text": "learn from you about the things that you know they are valuable to somebody else perhaps at an earlier stage of their",
    "start": "112979",
    "end": "119040"
  },
  {
    "text": "career so please do uh step up if you feel like it",
    "start": "119040",
    "end": "125219"
  },
  {
    "text": "I work on an open source project any.net developers in the room yeah hello to you all right so we are an",
    "start": "125219",
    "end": "132120"
  },
  {
    "text": "alternative to mass transit and service bus uh I can't remember what Jerry Miller's",
    "start": "132120",
    "end": "137340"
  },
  {
    "text": "now renamed his as Wolverine or something we are an alternative messaging and uh mediator style",
    "start": "137340",
    "end": "145560"
  },
  {
    "text": "framework all right what am I going to talk about today",
    "start": "145560",
    "end": "151200"
  },
  {
    "text": "I'm going to have a little diversion into objects I'm sure we all know about objects but",
    "start": "151200",
    "end": "157800"
  },
  {
    "text": "have a little diversion and talk about how objects may have colored our thinking of the world",
    "start": "157800",
    "end": "163860"
  },
  {
    "text": "and then I want to look at how reactive and its ideas may give us a different",
    "start": "163860",
    "end": "170280"
  },
  {
    "text": "way of thinking about how we build distributed systems today",
    "start": "170280",
    "end": "176280"
  },
  {
    "text": "reactive is mostly not based on particularly new ideas",
    "start": "176280",
    "end": "181500"
  },
  {
    "text": "uh so we'll talk about some ideas like data flow actor flow-based programming they're all really date from about the",
    "start": "181500",
    "end": "188580"
  },
  {
    "text": "1970s like many ideas from the 1970s we were visiting them because they",
    "start": "188580",
    "end": "195480"
  },
  {
    "text": "they were kind of ahead of their time they didn't they didn't they weren't really successful but when we move into",
    "start": "195480",
    "end": "201239"
  },
  {
    "text": "a modern context of multi-core architectures distributed computing it",
    "start": "201239",
    "end": "206580"
  },
  {
    "text": "turns out some of the ways these ideas were working are incredibly valuable to us in changing our perception about how",
    "start": "206580",
    "end": "212519"
  },
  {
    "text": "we do stuff so we'll look at a few of those old ideas and then we'll try and address",
    "start": "212519",
    "end": "218459"
  },
  {
    "text": "this idea of what people mean by the idea of reactive architectures and how",
    "start": "218459",
    "end": "223620"
  },
  {
    "text": "these old ideas play out for us in trying to build systems that have properties are being resilient",
    "start": "223620",
    "end": "230040"
  },
  {
    "text": "elastic and responsive",
    "start": "230040",
    "end": "233299"
  },
  {
    "text": "objects I'm sure everyone in the room knows about objects right so we have a class and the class",
    "start": "235620",
    "end": "241980"
  },
  {
    "text": "encapsulates some data right generally well most of our data to",
    "start": "241980",
    "end": "247080"
  },
  {
    "text": "be in private fields and then there is some behavior that it exposes",
    "start": "247080",
    "end": "253799"
  },
  {
    "text": "and normally there's coupling between this behavior in this state",
    "start": "253799",
    "end": "259079"
  },
  {
    "text": "right the state that we need in order to exercise this Behavior or alternatively",
    "start": "259079",
    "end": "265740"
  },
  {
    "text": "the behavior the the behaviors that are associated with knowledge of this state",
    "start": "265740",
    "end": "271440"
  },
  {
    "text": "are kind of coupled together in a class and then we may choose to compose",
    "start": "271440",
    "end": "278160"
  },
  {
    "text": "classes by having you know the fields beer class themselves we might in the bad old days of thought we'd inherit",
    "start": "278160",
    "end": "284759"
  },
  {
    "text": "from behavior from another class we do that less now because that turns out to be very fragile",
    "start": "284759",
    "end": "289919"
  },
  {
    "text": "but we've got this orientation of data and behavior living together and generally you know we talk about",
    "start": "289919",
    "end": "296580"
  },
  {
    "text": "this being message parsing what they really mean is I call it a method there's some parameters to message in",
    "start": "296580",
    "end": "302280"
  },
  {
    "text": "and it gives me a response message out I might decide they're called Dynamic dispatch right I'm not too worried about",
    "start": "302280",
    "end": "307979"
  },
  {
    "text": "that it just this idea of effectively you might call from a clip from a base method on a",
    "start": "307979",
    "end": "313680"
  },
  {
    "text": "clock of something you inherit from but we're all about objects right right",
    "start": "313680",
    "end": "319259"
  },
  {
    "text": "so when we first started to build component architectures service oriented",
    "start": "319259",
    "end": "324479"
  },
  {
    "text": "architectures is really kind of an early name for these component architectures but there are lots of them even before SOI really we had you know com and Corb",
    "start": "324479",
    "end": "332340"
  },
  {
    "text": "or Etc the dominant Paradigm was objects",
    "start": "332340",
    "end": "339120"
  },
  {
    "text": "so this is basically you look at kind of SOA to the lens and say wisdle so we still had an idea effectively when",
    "start": "339120",
    "end": "345660"
  },
  {
    "text": "I got a service and there's some operations on it and the operations are things I I can",
    "start": "345660",
    "end": "351840"
  },
  {
    "text": "send in a message and return a message it's like a method on a class really the just the parameters we sent to the",
    "start": "351840",
    "end": "357600"
  },
  {
    "text": "operation and return value right and it had some data we had the kind of four tenets of SOI",
    "start": "357600",
    "end": "364979"
  },
  {
    "text": "and we said oh yeah well basically what happens is the class basically hides all the data and then they provide",
    "start": "364979",
    "end": "371340"
  },
  {
    "text": "operations on it and then wisdor had things like an end point and a binding right often called the ABCs address",
    "start": "371340",
    "end": "377280"
  },
  {
    "text": "binding and contract um that let us expose basically this service to other people classically",
    "start": "377280",
    "end": "383639"
  },
  {
    "text": "usually there was an H there was a URL and we bound soap in order to basically reveal this thing to the outside world",
    "start": "383639",
    "end": "392180"
  },
  {
    "text": "but what that led us down the path of was tending to think of our systems when",
    "start": "392400",
    "end": "398880"
  },
  {
    "text": "we broke them up in terms of I want loads of little objects with their",
    "start": "398880",
    "end": "404520"
  },
  {
    "text": "behavior so typically when we thought maybe about an e-commerce application as an example",
    "start": "404520",
    "end": "411960"
  },
  {
    "text": "we might think oh well I need I have restaurants and I can create and read",
    "start": "411960",
    "end": "418500"
  },
  {
    "text": "and update and delete restaurants so I need a restaurant service and I have accounts for customers and I create and",
    "start": "418500",
    "end": "425160"
  },
  {
    "text": "read and I update delete accounts so I have an account service and so on and so",
    "start": "425160",
    "end": "430199"
  },
  {
    "text": "on and so on and so on that tends to be a little bit of a",
    "start": "430199",
    "end": "435419"
  },
  {
    "text": "problem we get a couple of negative characteristics on that and they also we also get them in oh to be honest with",
    "start": "435419",
    "end": "441539"
  },
  {
    "text": "you and one of them is this idea of feature Envy if I tend to have these object-like",
    "start": "441539",
    "end": "450000"
  },
  {
    "text": "services what is the logic tend to go that uses",
    "start": "450000",
    "end": "456380"
  },
  {
    "text": "these services with their operations on the client",
    "start": "456380",
    "end": "461639"
  },
  {
    "text": "maybe in some kind of API Gateway right maybe effectively it drifts all the way",
    "start": "461639",
    "end": "469259"
  },
  {
    "text": "down to one of the first services like car I've got a shopping cart",
    "start": "469259",
    "end": "475740"
  },
  {
    "text": "that becomes a kind of God service that says don't worry when someone wants to basically make an",
    "start": "475740",
    "end": "481680"
  },
  {
    "text": "order I've got all the business logic I want you tender to find an SOI which",
    "start": "481680",
    "end": "487620"
  },
  {
    "text": "that we ended up with these services that were very much you know most of these things just do",
    "start": "487620",
    "end": "493380"
  },
  {
    "text": "crud and the shopping cart has all of the domain Logic for REO Commerce",
    "start": "493380",
    "end": "498419"
  },
  {
    "text": "application and that's kind of negative right",
    "start": "498419",
    "end": "503520"
  },
  {
    "text": "because really we kind of know that that's going to cause problems for maintenance",
    "start": "503520",
    "end": "509520"
  },
  {
    "text": "because every time somebody wants to make a change this gold component's got to change right so the god service has",
    "start": "509520",
    "end": "516539"
  },
  {
    "text": "to change every single time and that isn't really what we meant by",
    "start": "516539",
    "end": "522120"
  },
  {
    "text": "autonomous components or independent deployability or all those things that were supposed to bring us the the dream",
    "start": "522120",
    "end": "528240"
  },
  {
    "text": "of our teams being able to work independently of each other and this oo Paradigm that we were kind",
    "start": "528240",
    "end": "534240"
  },
  {
    "text": "of pushing forward has kind of fooled us a bit right and in some cases they used to joke to people and say well if I've",
    "start": "534240",
    "end": "540180"
  },
  {
    "text": "just I've got an account database that I'm doing crud on it and it's actually over a store like dynamodb that has a",
    "start": "540180",
    "end": "545700"
  },
  {
    "text": "rest interface anyway what does my service actually do",
    "start": "545700",
    "end": "551040"
  },
  {
    "text": "why not just call Dynamo but we see a lot of these Services out",
    "start": "551040",
    "end": "556380"
  },
  {
    "text": "there that are really when you reduce them to what they're actually doing they're just a thin wrapper over the API",
    "start": "556380",
    "end": "562320"
  },
  {
    "text": "of the database the other problem is that they tend to",
    "start": "562320",
    "end": "568500"
  },
  {
    "text": "work via RPC or a synchronous conversation let's say",
    "start": "568500",
    "end": "574620"
  },
  {
    "text": "because quite a lot of them also work for our http and the problem with that is that faults",
    "start": "574620",
    "end": "580320"
  },
  {
    "text": "propagate if I lose my menu service",
    "start": "580320",
    "end": "585959"
  },
  {
    "text": "and it turns out the camp can't get a hold of the menu anymore and it probably can't price the order that you've given",
    "start": "585959",
    "end": "591839"
  },
  {
    "text": "me for my food for your food takeaway so as soon as menu stops working",
    "start": "591839",
    "end": "597240"
  },
  {
    "text": "everything stops working I became vulnerable in terms of my",
    "start": "597240",
    "end": "602760"
  },
  {
    "text": "availability to customers to the least good coder in the",
    "start": "602760",
    "end": "608100"
  },
  {
    "text": "organization right your uptime is the worst",
    "start": "608100",
    "end": "613680"
  },
  {
    "text": "programmer you have because when his code fails the whole",
    "start": "613680",
    "end": "618720"
  },
  {
    "text": "house of cards comes down and your team working on the restaurant service you",
    "start": "618720",
    "end": "624600"
  },
  {
    "text": "may have built something that you know you've you're pretty sure it's resilient as hell but it's useless to you",
    "start": "624600",
    "end": "630420"
  },
  {
    "text": "if the guy who's working on menu you know had a bad day and the code is pretty useless",
    "start": "630420",
    "end": "638040"
  },
  {
    "text": "so we get these problems and some of them are really to do with the Paradigm of hey it's just really a big object",
    "start": "638040",
    "end": "645800"
  },
  {
    "text": "that we talk to basically via often you know grpc because then it looks like a",
    "start": "645800",
    "end": "651240"
  },
  {
    "text": "procedure call right I just thought that's just an object I'm using remotely this kind of remote objects paradigm",
    "start": "651240",
    "end": "658620"
  },
  {
    "text": "has kind of killed or attempted the autonomous components a lot",
    "start": "658620",
    "end": "663980"
  },
  {
    "text": "so the 1970s reactive was really a kind of alternative to the dominant Paradigm",
    "start": "664800",
    "end": "671459"
  },
  {
    "text": "really about Von Nema machines but then in later on essentially against other programming paradigms and they they",
    "start": "671459",
    "end": "677640"
  },
  {
    "text": "fought a continuous struggle against things like object orientation and in many cases they lost right although",
    "start": "677640",
    "end": "684959"
  },
  {
    "text": "there are successful examples of the systems that emerged they didn't they didn't become mainstream to a large",
    "start": "684959",
    "end": "690959"
  },
  {
    "text": "extent until we got into stupid systems later I'm going to warn you I I don't want to",
    "start": "690959",
    "end": "697620"
  },
  {
    "text": "talk today about specific implementations so there are lots of tools out there which would bad to",
    "start": "697620",
    "end": "702959"
  },
  {
    "text": "themselves as reactive tools you know RX reactive streams",
    "start": "702959",
    "end": "708540"
  },
  {
    "text": "um active Frameworks like erlang akka akka.net or whatever right let's talk a lot about that",
    "start": "708540",
    "end": "714480"
  },
  {
    "text": "um so that's what you want there's still time to run away uh I'm not going to get into the depths of a specific implementation what I want to look at is",
    "start": "714480",
    "end": "722339"
  },
  {
    "text": "the principles that reactive programming had and how we can apply those",
    "start": "722339",
    "end": "729000"
  },
  {
    "text": "principles to how to build distributed systems any one of those tools may be",
    "start": "729000",
    "end": "734339"
  },
  {
    "text": "helpful to you or none of those tools may be helpful to you don't need any of those tools to implement these ideas",
    "start": "734339",
    "end": "740339"
  },
  {
    "text": "right so what is reactive a reactive can be",
    "start": "740339",
    "end": "746760"
  },
  {
    "text": "divided in a couple of things reactive programming which is what we had in the 1970s things like data flow programming",
    "start": "746760",
    "end": "753300"
  },
  {
    "text": "actor models flood-based programming and reactive systems this is this modern concept which is really a whole load of",
    "start": "753300",
    "end": "759060"
  },
  {
    "text": "if you like principles and patterns that you can use for Implement distributed systems but they all have a core idea",
    "start": "759060",
    "end": "767100"
  },
  {
    "text": "um and this quote really comes from a via uh Paul Morrison uh JPM who bases",
    "start": "767100",
    "end": "772860"
  },
  {
    "text": "The Man Behind flow-based programming uh my Greek is terrible it's something like",
    "start": "772860",
    "end": "778139"
  },
  {
    "text": "tarpanta Ray Kai uden maina which it just means uh everything flows pantare",
    "start": "778139",
    "end": "784440"
  },
  {
    "text": "and nothing stays the Greeks in the audience can tell me how badly I've mangled that I apologize",
    "start": "784440",
    "end": "791399"
  },
  {
    "text": "to anyone who's Greek um the idea is a quote from her collectors",
    "start": "791399",
    "end": "796620"
  },
  {
    "text": "who is a philosopher um is that we should really be focusing on flow",
    "start": "796620",
    "end": "803300"
  },
  {
    "text": "on the on the passage of things rather than on these little isolated",
    "start": "803700",
    "end": "808920"
  },
  {
    "text": "entities okay so data flow programming is one of the",
    "start": "808920",
    "end": "815339"
  },
  {
    "text": "kind of oldest beasts in this space and it says what we want to do is think about our",
    "start": "815339",
    "end": "821399"
  },
  {
    "text": "program as a graph and in our graph there are nodes",
    "start": "821399",
    "end": "828720"
  },
  {
    "text": "and at those nodes some kind of behavior happens",
    "start": "828720",
    "end": "833760"
  },
  {
    "text": "right some kind of transformation and between those nodes over the vertices",
    "start": "833760",
    "end": "839880"
  },
  {
    "text": "flows data and so I want to not join these two",
    "start": "839880",
    "end": "846899"
  },
  {
    "text": "concepts together but kind of separate them the idea of saying hey data is flowing through my program and then it",
    "start": "846899",
    "end": "853139"
  },
  {
    "text": "reaches these particular nodes things happen and you can pretty much program anything using this model right you can",
    "start": "853139",
    "end": "860459"
  },
  {
    "text": "program addition right number hits the node another number hits the node either two nodes either two",
    "start": "860459",
    "end": "867120"
  },
  {
    "text": "together put the result out basically from the note right so these things work to basically let us",
    "start": "867120",
    "end": "873839"
  },
  {
    "text": "do complex programming problems and generally when you see dataflow",
    "start": "873839",
    "end": "879839"
  },
  {
    "text": "programming today those of you who are DOT net there's quite a few of you those things like TPL dataflow Liam has got to",
    "start": "879839",
    "end": "886019"
  },
  {
    "text": "talk properly somewhere on the internet you can find if you want to try to learn about TPL dataflow is that one with the",
    "start": "886019",
    "end": "891360"
  },
  {
    "text": "kettles Liam I can't remember okay um uh so you guys have a node and the",
    "start": "891360",
    "end": "897660"
  },
  {
    "text": "node you're going to think of as a black box a unit of computation",
    "start": "897660",
    "end": "903600"
  },
  {
    "text": "and my node has kind of input and output which anything has ports so some data",
    "start": "903600",
    "end": "909000"
  },
  {
    "text": "comes in the Black Box performs some magical transformation and an output goes out I push a push a",
    "start": "909000",
    "end": "916380"
  },
  {
    "text": "kind of answer out onto the wire typically what tends to happen is I create an",
    "start": "916380",
    "end": "923160"
  },
  {
    "text": "instance of the node because there is some work available on the input",
    "start": "923160",
    "end": "929160"
  },
  {
    "text": "do the work push the answer close down basically that particular node right so I respond to there being",
    "start": "929160",
    "end": "937260"
  },
  {
    "text": "work some of you may think about dataflow programming and that idea of saying hey",
    "start": "937260",
    "end": "942540"
  },
  {
    "text": "I've got this whole set of jobs to do data flow programming lets me spin up things to do those jobs but really what",
    "start": "942540",
    "end": "949380"
  },
  {
    "text": "we're trying to focus on data flow programming is this idea of a flow of work and Transformations you are",
    "start": "949380",
    "end": "954779"
  },
  {
    "text": "performing upon it and the key is the data growth can be anything pretty",
    "start": "954779",
    "end": "960600"
  },
  {
    "text": "much data programming has no real restrictions right it could be simple flat data or it could be Primitives it",
    "start": "960600",
    "end": "967440"
  },
  {
    "text": "could be compound structured unstructured doesn't really matter right the key is I can begin to chain these",
    "start": "967440",
    "end": "973320"
  },
  {
    "text": "things together so I can get about I can click little simple behaviors that are easy to",
    "start": "973320",
    "end": "979920"
  },
  {
    "text": "understand and I can chain them into more complex behaviors the poster child for this is",
    "start": "979920",
    "end": "986339"
  },
  {
    "text": "obviously the Unix command line right where I got little programmers that do",
    "start": "986339",
    "end": "991440"
  },
  {
    "text": "things and I pipe the output into other things but we can write programs like that well we just have little simple",
    "start": "991440",
    "end": "996720"
  },
  {
    "text": "Transformations and we just basically push work through all these transformations",
    "start": "996720",
    "end": "1002560"
  },
  {
    "text": "so we can be synchronous or asynchronous here so in synchronous basically what happens is the thread of execution flows down",
    "start": "1003380",
    "end": "1010399"
  },
  {
    "text": "the chain or we can be asynchronous which tends to require buffering and what tends to happen there is",
    "start": "1010399",
    "end": "1016880"
  },
  {
    "text": "essentially each component when it puts an uh puts out its answer puts it onto a buffer so the next component doesn't",
    "start": "1016880",
    "end": "1023779"
  },
  {
    "text": "have to be available at that point in time it just picks up the work when it's ready from the buffer",
    "start": "1023779",
    "end": "1031100"
  },
  {
    "text": "and that allows data flow programming to work basically in parallel right so",
    "start": "1031100",
    "end": "1038959"
  },
  {
    "text": "we can add these various steps working in parallel with each other so it's an easy model",
    "start": "1038959",
    "end": "1044959"
  },
  {
    "text": "of basically using multiple cores in an architecture or even in a modern world",
    "start": "1044959",
    "end": "1050360"
  },
  {
    "text": "using multiple uh systems because effectively the idea is",
    "start": "1050360",
    "end": "1057860"
  },
  {
    "text": "that this individual item can be simple and single threaded",
    "start": "1057860",
    "end": "1064059"
  },
  {
    "text": "the multi-threading comes from running them all in parallel and they just simply read work off the buffer",
    "start": "1064100",
    "end": "1070340"
  },
  {
    "text": "typically when we can think about push or pull sometimes hot or cold is another word for the same thing are we",
    "start": "1070340",
    "end": "1075919"
  },
  {
    "text": "effectively observing something that is essentially spitting out data and we're just listening to it uh canonical",
    "start": "1075919",
    "end": "1081679"
  },
  {
    "text": "example is usually a mouse moving around generating in Windows I think it's WM",
    "start": "1081679",
    "end": "1087380"
  },
  {
    "text": "Mouse move messages right or are we effectively saying to something by a pull hey please start sending us",
    "start": "1087380",
    "end": "1094580"
  },
  {
    "text": "information about X we also tend",
    "start": "1094580",
    "end": "1101179"
  },
  {
    "text": "in data flow programming to say the output buffer because it has a fixed",
    "start": "1101179",
    "end": "1107059"
  },
  {
    "text": "capacity should not be full if I effectively want to read",
    "start": "1107059",
    "end": "1115160"
  },
  {
    "text": "in other words if I'm going to do the work there's got to be supposed to be to put the work out there",
    "start": "1115160",
    "end": "1120740"
  },
  {
    "text": "and that allows to be a replacement called back pressure right that says hey",
    "start": "1120740",
    "end": "1125780"
  },
  {
    "text": "if the downstream is all jammed up the Buffer's got full it can't work as fast",
    "start": "1125780",
    "end": "1131299"
  },
  {
    "text": "as we can we should pause and wait until it's done some work",
    "start": "1131299",
    "end": "1138620"
  },
  {
    "text": "freed up some space on its buffer on our output buffer it's input buffer",
    "start": "1138620",
    "end": "1143660"
  },
  {
    "text": "right freed up some space and then let us write this basic idea of back pressure says we",
    "start": "1143660",
    "end": "1150320"
  },
  {
    "text": "want to essentially prevent things being overwhelmed because if they're working in parallel",
    "start": "1150320",
    "end": "1155840"
  },
  {
    "text": "that could be working at quite different rates and ultimately we're all subject to the law which I can't remember examin",
    "start": "1155840",
    "end": "1161000"
  },
  {
    "text": "does law which basically says you know our overall throughput is limited to the throughput of the slice component in our",
    "start": "1161000",
    "end": "1166760"
  },
  {
    "text": "chain so classic lifetime is essentially as we",
    "start": "1166760",
    "end": "1173240"
  },
  {
    "text": "said um I've actually lived long enough to basically calculate the answer",
    "start": "1173240",
    "end": "1179600"
  },
  {
    "text": "and capacity is essentially that these buffers have capacity they're not infinite",
    "start": "1179600",
    "end": "1186160"
  },
  {
    "text": "I mean the theory in maths you could probably make them infinite in Practical Computing resources that never happens",
    "start": "1186160",
    "end": "1191419"
  },
  {
    "text": "and you have back pressure by not basically taking work off an input queue",
    "start": "1191419",
    "end": "1197000"
  },
  {
    "text": "until there's space on the output keeps you to write stuff",
    "start": "1197000",
    "end": "1202000"
  },
  {
    "text": "now a nice advantage of this model is that we tend to benefit from being",
    "start": "1203720",
    "end": "1210260"
  },
  {
    "text": "Loosely coupled because these individual components",
    "start": "1210260",
    "end": "1215840"
  },
  {
    "text": "are only coupled by data okay quick recap",
    "start": "1215840",
    "end": "1221299"
  },
  {
    "text": "doubling some various examples of tight versus loot coupling content coupling is",
    "start": "1221299",
    "end": "1226340"
  },
  {
    "text": "I know about your code your schemas everything else common coupling is we both share some global data that could",
    "start": "1226340",
    "end": "1232940"
  },
  {
    "text": "just be a big database table control copying is I have certain Flags",
    "start": "1232940",
    "end": "1238160"
  },
  {
    "text": "or signals I send you to control the behavior the way you do stuff which so your internal behavior is it has a",
    "start": "1238160",
    "end": "1245059"
  },
  {
    "text": "dependency on the flags that I know about right stamp coupling is where essentially you",
    "start": "1245059",
    "end": "1250880"
  },
  {
    "text": "only use a portion of the data that I send there are fields that are effectively unused",
    "start": "1250880",
    "end": "1256880"
  },
  {
    "text": "data coupling which is kind of the weakest form of coupling says we're both coupled by the schema the data that's",
    "start": "1256880",
    "end": "1262100"
  },
  {
    "text": "passing between us we have to have some coupling in life I mean not necessarily but it tends to be",
    "start": "1262100",
    "end": "1269419"
  },
  {
    "text": "nowadays that machines running in locked basements with no connection to the internet are pretty useless for any real",
    "start": "1269419",
    "end": "1276320"
  },
  {
    "text": "work so we tend to have some form of coupling to other things right in order to be useful necessary coupling",
    "start": "1276320",
    "end": "1283760"
  },
  {
    "text": "so data if we're going to choose some coupling is a good form",
    "start": "1283760",
    "end": "1288760"
  },
  {
    "text": "one of the other ideas that reactive program was trying to get into is actors what are actors about it's one of those",
    "start": "1290179",
    "end": "1295400"
  },
  {
    "text": "words but like um monoids that people get frightened by",
    "start": "1295400",
    "end": "1301520"
  },
  {
    "text": "so Edgar Dykstra basically said hey sometimes we have mutable state and sometimes we have multiple threads",
    "start": "1301520",
    "end": "1309559"
  },
  {
    "text": "and it would be really bad if the threads altered that mutable state in the wrong order how do I stop that oh I",
    "start": "1309559",
    "end": "1317240"
  },
  {
    "text": "know I'll have some means of doing synchronization some kind of gate tend to think about semaphores monitors Etc",
    "start": "1317240",
    "end": "1323360"
  },
  {
    "text": "which means that we serialize access to that mutable state right only one thing can affect the",
    "start": "1323360",
    "end": "1330620"
  },
  {
    "text": "mutual State at a time and that was the dominant Paradigm here",
    "start": "1330620",
    "end": "1336380"
  },
  {
    "text": "how we did multi-threaded code for how we protect mutable state from being",
    "start": "1336380",
    "end": "1341419"
  },
  {
    "text": "basically uh corrupted by multiple threads running at the same time and you have probably written or",
    "start": "1341419",
    "end": "1348020"
  },
  {
    "text": "used code that essentially uses a semaphore or a monitor in order to protect basically mutable state",
    "start": "1348020",
    "end": "1356139"
  },
  {
    "text": "the answer modeler says well we could look at the kind of data flow programming model and if we should say",
    "start": "1356780",
    "end": "1362600"
  },
  {
    "text": "that our node is single threaded then our node the single thread is the",
    "start": "1362600",
    "end": "1368960"
  },
  {
    "text": "only thing that can update the mutable state then if effectively I think of my input",
    "start": "1368960",
    "end": "1376220"
  },
  {
    "text": "buffer as a kind of inbox then I can protect access to that",
    "start": "1376220",
    "end": "1382700"
  },
  {
    "text": "mutable state because essentially there's only one thread ever altering it and it's just",
    "start": "1382700",
    "end": "1388039"
  },
  {
    "text": "stepping its way through the work requests in the inbox so I don't need a synchronization",
    "start": "1388039",
    "end": "1393260"
  },
  {
    "text": "primitive of any sort because effectively this model",
    "start": "1393260",
    "end": "1399200"
  },
  {
    "text": "gives me synchronization over my mutable state",
    "start": "1399200",
    "end": "1403960"
  },
  {
    "text": "so this is basically Carl Hewitt and he called this the actor model but really it's just a variation of data flow",
    "start": "1404360",
    "end": "1409700"
  },
  {
    "text": "programming an actor is just a dataflow node it's just taking advantage of the fact that if I make my node single",
    "start": "1409700",
    "end": "1415340"
  },
  {
    "text": "threaded I can sequence the changes to the mutable state that it protects",
    "start": "1415340",
    "end": "1423080"
  },
  {
    "text": "actors have some basically rules around them uh actors can send messages to",
    "start": "1423080",
    "end": "1428480"
  },
  {
    "text": "other actors they can create new actors they know the addresses of actors",
    "start": "1428480",
    "end": "1433940"
  },
  {
    "text": "um and they can basically communicate that dress of actors why do you don't worry too much about that why do you care the main reason you care is because",
    "start": "1433940",
    "end": "1441559"
  },
  {
    "text": "obviously if I think about the fact that I'm protecting Mutual state in an actor",
    "start": "1441559",
    "end": "1446600"
  },
  {
    "text": "I might have lots of mutable state that I want to sequence access to how do I do that well generally the idea is that I",
    "start": "1446600",
    "end": "1453380"
  },
  {
    "text": "can partition all these actors their own part to the mutable State and I've actually wrote",
    "start": "1453380",
    "end": "1459380"
  },
  {
    "text": "requests to the right actor to essentially update the relevant piece of beautiful state right",
    "start": "1459380",
    "end": "1464480"
  },
  {
    "text": "so that's really how actors scale obviously if I have one thread and it was I want to get you a long way and we",
    "start": "1464480",
    "end": "1471020"
  },
  {
    "text": "we underestimate how fast one thread can be but it may be too slow and in which case I need to partition my state",
    "start": "1471020",
    "end": "1477919"
  },
  {
    "text": "and work with one threat instead I'm just as an aside on this I mean we we build systems you think things like",
    "start": "1477919",
    "end": "1484880"
  },
  {
    "text": "Kafka every day right and on a Kafka partition you have a single thread",
    "start": "1484880",
    "end": "1491260"
  },
  {
    "text": "you only have to have one third ready from a partition at a time because you have to retain ordering and I can't retain ordering if I have",
    "start": "1491480",
    "end": "1498260"
  },
  {
    "text": "multiple threads because I have multiple threads there's no guarantee as it reads item off the",
    "start": "1498260",
    "end": "1503539"
  },
  {
    "text": "queue that it won't purchase them out of sequence so Kafka says hey you're given partition on a stream only one thread gets to read",
    "start": "1503539",
    "end": "1511220"
  },
  {
    "text": "it what we do is we take that stream and we slice it into a number of pieces",
    "start": "1511220",
    "end": "1517760"
  },
  {
    "text": "well technical consistent hashing which basically says given a restaurant has an ID it always goes into this particular",
    "start": "1517760",
    "end": "1524900"
  },
  {
    "text": "bucket so that I can always process updates to it in order",
    "start": "1524900",
    "end": "1530600"
  },
  {
    "text": "so I get away with having one thread so we build production systems all the time in a single threaded approach and",
    "start": "1530600",
    "end": "1536600"
  },
  {
    "text": "single threaded code is simple and easy to write because I don't have to worry about multi-threading concerns in the",
    "start": "1536600",
    "end": "1541640"
  },
  {
    "text": "code itself what I do is rely on the partitioning to give me that single threaded approach right and a Kafka",
    "start": "1541640",
    "end": "1549460"
  },
  {
    "text": "stream a partition on a Kafka stream is effectively a mailbox",
    "start": "1549460",
    "end": "1555260"
  },
  {
    "text": "which I can read to get work I update right right so I'm not specifically using an",
    "start": "1555260",
    "end": "1560960"
  },
  {
    "text": "actor model but the same understanding about how a stuff works is useful to",
    "start": "1560960",
    "end": "1566179"
  },
  {
    "text": "understand to apply",
    "start": "1566179",
    "end": "1569019"
  },
  {
    "text": "flow-based programming so flabase programming is probably less well known than the other two",
    "start": "1572179",
    "end": "1577460"
  },
  {
    "text": "anyone who heard of flow-based programming in the room before today okay poor old JPM",
    "start": "1577460",
    "end": "1584720"
  },
  {
    "text": "flowbridge program is another form of data flow um it's got some interesting ideas so it's worth raising it as well as data",
    "start": "1584720",
    "end": "1590900"
  },
  {
    "text": "flow so I have uh no just like in data flow it has ports ports generally name",
    "start": "1590900",
    "end": "1597080"
  },
  {
    "text": "dataflow programming and if I press program another and one of the reasons port's a named is because within your",
    "start": "1597080",
    "end": "1603260"
  },
  {
    "text": "code running inside the node you just address a named Port you say basically",
    "start": "1603260",
    "end": "1608900"
  },
  {
    "text": "hey receive from the port called in Center the port mod out you give you tend to give more meaningful names but",
    "start": "1608900",
    "end": "1615020"
  },
  {
    "text": "in and out will do us for a high level and then what that lets us do is say you",
    "start": "1615020",
    "end": "1620419"
  },
  {
    "text": "internally don't know anything about the connector it's external to you the thing that connects you to other nodes",
    "start": "1620419",
    "end": "1627080"
  },
  {
    "text": "so it could be replaced by something else right it might be in memory in one environment but actually in your",
    "start": "1627080",
    "end": "1632779"
  },
  {
    "text": "production environment it's a rabbit m key message queue",
    "start": "1632779",
    "end": "1637720"
  },
  {
    "text": "okay so that's one idea that it brought in sorry named ports and really when we think about channels in messaging which",
    "start": "1637820",
    "end": "1644900"
  },
  {
    "text": "are really we talk about being a virtual pipe with a logical named address it's really just another version of this idea",
    "start": "1644900",
    "end": "1651679"
  },
  {
    "text": "from flow-based programming of a named port with an external connector Beyond it",
    "start": "1651679",
    "end": "1657020"
  },
  {
    "text": "and the idea in Flight waste programming is we have information packets data and it flows between nodes and those",
    "start": "1657020",
    "end": "1664220"
  },
  {
    "text": "nodes of black boxes to perform some kind of transformation on it and the result of that basically is work",
    "start": "1664220",
    "end": "1669799"
  },
  {
    "text": "right so information packets essentially are",
    "start": "1669799",
    "end": "1676760"
  },
  {
    "text": "deleted from the buffer you're written from buff you delete them you process your work and you put a new information packet out on the file so I",
    "start": "1676760",
    "end": "1683240"
  },
  {
    "text": "representing the transformation and messaging quite often we talk about cues versus streams streams from like",
    "start": "1683240",
    "end": "1690740"
  },
  {
    "text": "Kafka we have an index it's effectively an append only stream and we just basically record How Far We've read we",
    "start": "1690740",
    "end": "1697580"
  },
  {
    "text": "we keep a track of how far up this streamer have I read and we tend to store that something called an offset",
    "start": "1697580",
    "end": "1703039"
  },
  {
    "text": "and a queue we tend to actually lock the next item on the Queue we read part of it already",
    "start": "1703039",
    "end": "1709520"
  },
  {
    "text": "locked we delete that item off the queue the cues are much more similar to the",
    "start": "1709520",
    "end": "1716059"
  },
  {
    "text": "way that flowbase programming works and it says it says delete that incoming piece of work so nobody else processes it it's done",
    "start": "1716059",
    "end": "1722720"
  },
  {
    "text": "and move it along so the node essentially in uh flow-based",
    "start": "1722720",
    "end": "1729679"
  },
  {
    "text": "programming can actually suspend so rather than the dirty flow programming model where effective we spin one up",
    "start": "1729679",
    "end": "1735860"
  },
  {
    "text": "push some work through it shut it down and then next when the next item will work spin another one up employment's",
    "start": "1735860",
    "end": "1741919"
  },
  {
    "text": "programming we're allowed to actually suspend it we have to say there's no work so just I'll just pause doing",
    "start": "1741919",
    "end": "1746960"
  },
  {
    "text": "nothing until some more work arrives and I can send you an explicit kill signal I say basically hey there's no more work",
    "start": "1746960",
    "end": "1752900"
  },
  {
    "text": "to do you can you can kind of give up and shut down now right",
    "start": "1752900",
    "end": "1758020"
  },
  {
    "text": "and with capacity in flow-based programming as well as the decision to",
    "start": "1758299",
    "end": "1763340"
  },
  {
    "text": "say hey there's no capacity on the output so effectively I don't want to basically",
    "start": "1763340",
    "end": "1768559"
  },
  {
    "text": "send you something in other words back pressure I can also do load shedding floatburst programming says you know",
    "start": "1768559",
    "end": "1774320"
  },
  {
    "text": "what if you receive an input and there's no room on the output you're perfectly entitled to dump the input",
    "start": "1774320",
    "end": "1781460"
  },
  {
    "text": "and that can be useful so think about context for example we have information packets all the time",
    "start": "1781460",
    "end": "1787940"
  },
  {
    "text": "from Riders who are out there trying to deliver your food if I miss some of those it doesn't",
    "start": "1787940",
    "end": "1794299"
  },
  {
    "text": "really matter because I'll get another signal a bit later telling me where it is all you'll see is that the rider",
    "start": "1794299",
    "end": "1799880"
  },
  {
    "text": "seems to jump on the map like they're teleported that's simply because we've just dumped some information packets",
    "start": "1799880",
    "end": "1805520"
  },
  {
    "text": "because we're feeling overwhelmed right it doesn't really matter to you at some point we'll catch up and then we'll show",
    "start": "1805520",
    "end": "1812240"
  },
  {
    "text": "you where somebody is so load shedding is a viable option at some points",
    "start": "1812240",
    "end": "1817778"
  },
  {
    "text": "um there's some rules uh if I'm writing to basically an output Port I only get to do that on one thread so as to",
    "start": "1818659",
    "end": "1825200"
  },
  {
    "text": "provide preserve ordering but many people can write to an input thread but obviously effectively that",
    "start": "1825200",
    "end": "1831620"
  },
  {
    "text": "will impact the ordering of those things that I have okay",
    "start": "1831620",
    "end": "1836260"
  },
  {
    "text": "other interesting ideas uh information initial information packets",
    "start": "1838820",
    "end": "1844520"
  },
  {
    "text": "so when I start up my node I can add basically a port where I read a single",
    "start": "1844520",
    "end": "1850399"
  },
  {
    "text": "packet and that packet tells me how to configure myself anyone program with mqtt and iot devices",
    "start": "1850399",
    "end": "1859520"
  },
  {
    "text": "a few people so mqt has a similar the mqtt has a similar notion of an international information packet lets",
    "start": "1859520",
    "end": "1864799"
  },
  {
    "text": "you configure a consumer when it starts up to start receiving messages",
    "start": "1864799",
    "end": "1870440"
  },
  {
    "text": "control packets or brackets as they're sometimes called this idea that I have a sequence of messages I want you to",
    "start": "1870440",
    "end": "1876559"
  },
  {
    "text": "process where I give you basically initial control packet sometimes called an",
    "start": "1876559",
    "end": "1881840"
  },
  {
    "text": "opening bracket a whole set of messages that then relate to that particular particular piece of work and then a",
    "start": "1881840",
    "end": "1887240"
  },
  {
    "text": "closing bracket packet which basically says that's the complete set of work that you need",
    "start": "1887240",
    "end": "1893000"
  },
  {
    "text": "but another one will come back to it's under a lookup table",
    "start": "1893000",
    "end": "1898898"
  },
  {
    "text": "so the idea that says I might need some data in order to do my work",
    "start": "1899240",
    "end": "1907480"
  },
  {
    "text": "that data could be generated by another node",
    "start": "1907700",
    "end": "1915880"
  },
  {
    "text": "and what I do is I listen to the message the output Port of that other node",
    "start": "1916039",
    "end": "1922940"
  },
  {
    "text": "and I put basically the results of its work into a table",
    "start": "1922940",
    "end": "1929899"
  },
  {
    "text": "then I can go and look it up so I want to go and look up prices of food",
    "start": "1929899",
    "end": "1935059"
  },
  {
    "text": "there may well be a node a where effectively you're entering changes",
    "start": "1935059",
    "end": "1940460"
  },
  {
    "text": "basically to to menu item prices it does I don't know some calculations on vat or whatever effectively and gives",
    "start": "1940460",
    "end": "1947960"
  },
  {
    "text": "you the final and our service charges it gives you the final price and you'll look up node says I take that and I just",
    "start": "1947960",
    "end": "1955940"
  },
  {
    "text": "write it into a database and then when B which is doing some",
    "start": "1955940",
    "end": "1961100"
  },
  {
    "text": "pricing of an order for a customer comes along with basically a customer's",
    "start": "1961100",
    "end": "1967100"
  },
  {
    "text": "order is its information packet it can use the lookup table",
    "start": "1967100",
    "end": "1972679"
  },
  {
    "text": "to figure out the price and what that stops the need for us to do",
    "start": "1972679",
    "end": "1979340"
  },
  {
    "text": "is to call a to send it a message saying can I have the price for X can I have",
    "start": "1979340",
    "end": "1984500"
  },
  {
    "text": "the price for y and keep sending it matches because we have to suspend the workflow in B for that pricing item",
    "start": "1984500",
    "end": "1990679"
  },
  {
    "text": "while we wait for the request response to come through so if we pre-build that lookup table",
    "start": "1990679",
    "end": "1996679"
  },
  {
    "text": "it makes it very easy to do that pricing we'll come back to that idea",
    "start": "1996679",
    "end": "2001860"
  },
  {
    "text": "okay a drink of water it's not a budget truck",
    "start": "2002140",
    "end": "2008799"
  },
  {
    "text": "you don't drink in some water",
    "start": "2008799",
    "end": "2011760"
  },
  {
    "text": "so what are active systems and how do these 1970s ideas",
    "start": "2015460",
    "end": "2020919"
  },
  {
    "text": "how do they help us so there's a big document don't worry you're not trying to read that you can",
    "start": "2020919",
    "end": "2026019"
  },
  {
    "text": "go and find it on the Internet it's called the reactive Manifesto it was written by Jonas Bonner I think",
    "start": "2026019",
    "end": "2031960"
  },
  {
    "text": "that's probably about pronouncing it and a whole load of other people you have probably heard of helped",
    "start": "2031960",
    "end": "2038440"
  },
  {
    "text": "um and their idea was that whole lot of people were working on similar sorts of",
    "start": "2038440",
    "end": "2043539"
  },
  {
    "text": "ideas and they wanted to produce a Manifesto that talked about what they've perceived as a better way of building",
    "start": "2043539",
    "end": "2049419"
  },
  {
    "text": "distributed systems and so to Define what you can think of as an architectural style called",
    "start": "2049419",
    "end": "2054638"
  },
  {
    "text": "reactive applications and they had some rules right",
    "start": "2054639",
    "end": "2060398"
  },
  {
    "text": "so how the world that they should react to events and this event in a sense that is",
    "start": "2060399",
    "end": "2066820"
  },
  {
    "text": "basically the definition of reactive for them it reacts to events",
    "start": "2066820",
    "end": "2072220"
  },
  {
    "text": "all that'll let you do is think about basically reacting to",
    "start": "2072220",
    "end": "2078398"
  },
  {
    "text": "load by being scalable being resilient to failure",
    "start": "2078399",
    "end": "2084398"
  },
  {
    "text": "and being responsive to users so generally the Mantra is that effectively they are responsive",
    "start": "2084399",
    "end": "2090700"
  },
  {
    "text": "resilient elastic and message driven don't worry about the detail you'll go through this a few times in the next few",
    "start": "2090700",
    "end": "2095858"
  },
  {
    "text": "seconds and you can find it there so this is kind of the diagrammatic",
    "start": "2095859",
    "end": "2102280"
  },
  {
    "text": "version which is a little bit easier to read by the means of being message driven",
    "start": "2102280",
    "end": "2109240"
  },
  {
    "text": "we obtain the properties of being resilient and elastic",
    "start": "2109240",
    "end": "2114640"
  },
  {
    "text": "which enables us to be responsive to users that's effectively what they're driving it",
    "start": "2114640",
    "end": "2121859"
  },
  {
    "text": "okay so reactive systems use message passing and we what does it mean by that they're",
    "start": "2122079",
    "end": "2127180"
  },
  {
    "text": "going to send you know have an asynchronous conversation between any two components it may or may not be",
    "start": "2127180",
    "end": "2134079"
  },
  {
    "text": "messaging middleware right and effectively what we're saying is hey I'm going to send you a message and when",
    "start": "2134079",
    "end": "2140560"
  },
  {
    "text": "you're going to do your work and you're going to basically send a message out as a result of doing that work it might be",
    "start": "2140560",
    "end": "2145960"
  },
  {
    "text": "a reply to me or it might simply be a signal to the next person in the chain",
    "start": "2145960",
    "end": "2151780"
  },
  {
    "text": "so effectively there are a couple of things that might be going on you're probably receiving a message and it's",
    "start": "2151780",
    "end": "2157480"
  },
  {
    "text": "one or two options look on the bottom you've either been given a command right",
    "start": "2157480",
    "end": "2162820"
  },
  {
    "text": "you're being told to do something or you're being given facts things you should know typically messaging we think",
    "start": "2162820",
    "end": "2169839"
  },
  {
    "text": "that is as a command I'm telling you to do something well often my common example is make me a cup of tea",
    "start": "2169839",
    "end": "2176820"
  },
  {
    "text": "and things that basically you know you may be given facts on Ian's tea preferences right Ian likes his T white",
    "start": "2176820",
    "end": "2184420"
  },
  {
    "text": "he doesn't like any sugar he prefers basically English breakfast under no circumstances give him Earl Gray",
    "start": "2184420",
    "end": "2192040"
  },
  {
    "text": "it I'll create a dirty dishwasher this dishwater is not tea all right so typically these components",
    "start": "2192040",
    "end": "2200260"
  },
  {
    "text": "that receive these commands or events the when we think of them in terms of",
    "start": "2200260",
    "end": "2206140"
  },
  {
    "text": "distributed systems we tend to call them services we should think about them transmit",
    "start": "2206140",
    "end": "2212680"
  },
  {
    "text": "provide doing transformations in response to these pieces of data they receive",
    "start": "2212680",
    "end": "2220020"
  },
  {
    "text": "often what you're looking for is something you can name as a verb noun",
    "start": "2220859",
    "end": "2227020"
  },
  {
    "text": "combination I do this to this right I place an order I onboard a",
    "start": "2227020",
    "end": "2233440"
  },
  {
    "text": "restaurant you don't want a restaurant service you want an onboarding restaurant service",
    "start": "2233440",
    "end": "2239200"
  },
  {
    "text": "that's what we do we onboard restaurants onto our platform",
    "start": "2239200",
    "end": "2244020"
  },
  {
    "text": "and so what you want to think about is what it what what transformation are you performing",
    "start": "2246339",
    "end": "2251859"
  },
  {
    "text": "in this process and then like data flow programming but",
    "start": "2251859",
    "end": "2257920"
  },
  {
    "text": "you really change these together in a flow so here potentially I have said You know",
    "start": "2257920",
    "end": "2264460"
  },
  {
    "text": "here is a customer purchase I want to check out the purchase or",
    "start": "2264460",
    "end": "2269740"
  },
  {
    "text": "probably in this case you might want to rephrase that as I want to price and validate the purchase",
    "start": "2269740",
    "end": "2276940"
  },
  {
    "text": "so take your purchase your basket of all the items that you've ordered I figure out the pricing I apply any",
    "start": "2276940",
    "end": "2282700"
  },
  {
    "text": "offers I validate that essentially maybe that stuff's in stock and then I say oh I need to take a",
    "start": "2282700",
    "end": "2289000"
  },
  {
    "text": "payment for that so I send this priced order because now I can take a basically payment for it",
    "start": "2289000",
    "end": "2295180"
  },
  {
    "text": "onto the next component which essentially is going to price it typically what you're looking for when",
    "start": "2295180",
    "end": "2302440"
  },
  {
    "text": "you're influenced by this reactive model is things that you can run in parallel",
    "start": "2302440",
    "end": "2310440"
  },
  {
    "text": "your one service you don't want to be do it to be doing things",
    "start": "2311740",
    "end": "2317440"
  },
  {
    "text": "that could be done in parallel because it's much easier",
    "start": "2317440",
    "end": "2323980"
  },
  {
    "text": "split out the thing that could be done in parallel into a new node send a message to it because then essentially",
    "start": "2323980",
    "end": "2331060"
  },
  {
    "text": "you could potentially think about making that component single threaded it's going to run pulling work off a",
    "start": "2331060",
    "end": "2336760"
  },
  {
    "text": "queue right but you can scale each one of those items quite independently of each",
    "start": "2336760",
    "end": "2341980"
  },
  {
    "text": "other so think quite often about a model that",
    "start": "2341980",
    "end": "2347079"
  },
  {
    "text": "processes tasks and activities you can if you want to use something like value stream mapping to figure out your",
    "start": "2347079",
    "end": "2353380"
  },
  {
    "text": "process changing your organization and what you want to do is think hey what things actually could occur in",
    "start": "2353380",
    "end": "2359920"
  },
  {
    "text": "parallel at different steps of looking like my production line where I'm just passing work down",
    "start": "2359920",
    "end": "2365740"
  },
  {
    "text": "to get processed good idea of coordinating our data flow",
    "start": "2365740",
    "end": "2371200"
  },
  {
    "text": "orchestrating a continuous study flow of information focusing on division by Behavior not structure",
    "start": "2371200",
    "end": "2379140"
  },
  {
    "text": "sort of about Pat Helen so Pat Helen basically is an architecture Amazon Microsoft you should",
    "start": "2380500",
    "end": "2387339"
  },
  {
    "text": "probably go and read most of his papers if you haven't he's exceptionally influential in terms of the world of",
    "start": "2387339",
    "end": "2392680"
  },
  {
    "text": "autonomous computing so when we think about what this process does I find it helpful to think about",
    "start": "2392680",
    "end": "2398200"
  },
  {
    "text": "Pat's model of basically what happens inside a component and Pat basically had",
    "start": "2398200",
    "end": "2404380"
  },
  {
    "text": "this idea of an activity so at the bottom so an activity is basically a state machine and it says",
    "start": "2404380",
    "end": "2410380"
  },
  {
    "text": "I've received a message I should do something in response probably I may I",
    "start": "2410380",
    "end": "2415420"
  },
  {
    "text": "may choose to update a resource so resources some thing that belongs to the business that I manage I don't know uh",
    "start": "2415420",
    "end": "2423160"
  },
  {
    "text": "restaurants couriers right and I typically also have some I may",
    "start": "2423160",
    "end": "2428740"
  },
  {
    "text": "have some say about an activity if I'm my state machine for some point I need to actually say well I'm going to stop",
    "start": "2428740",
    "end": "2433780"
  },
  {
    "text": "the state machine there in order to wait for a response from a different node",
    "start": "2433780",
    "end": "2438940"
  },
  {
    "text": "I may have to save the state of my state machine into database I'll come back to that in a second you may not need to",
    "start": "2438940",
    "end": "2445240"
  },
  {
    "text": "so the activity is generally this combination of code that I run in response to an input signal",
    "start": "2445240",
    "end": "2451660"
  },
  {
    "text": "and any state I need to store about my activity to allow me to resume it if I",
    "start": "2451660",
    "end": "2456760"
  },
  {
    "text": "crash I need to pause for any reason there is an explicit boundary",
    "start": "2456760",
    "end": "2463720"
  },
  {
    "text": "in other words the things inside my activity State my resource State they are not exposed to the outside world",
    "start": "2463720",
    "end": "2469720"
  },
  {
    "text": "right that means effectively I know who is effectively going to be basically reading and writing tour I could choose",
    "start": "2469720",
    "end": "2476800"
  },
  {
    "text": "to be single threaded right for example because I don't need and I know there's no need to worry about synchronization",
    "start": "2476800",
    "end": "2482740"
  },
  {
    "text": "because effectively aren't any person writing to it I also protect these resources their schemas Etc such that I",
    "start": "2482740",
    "end": "2489940"
  },
  {
    "text": "can change them and nobody outside cares they only care about the thing that comes on the input port and the thing that leaves by the output port",
    "start": "2489940",
    "end": "2498240"
  },
  {
    "text": "so you might have a model like this right purchase comes in on my input Port",
    "start": "2499960",
    "end": "2505000"
  },
  {
    "text": "I begin my activity so I say I need to check out what do I do I validate the",
    "start": "2505000",
    "end": "2510160"
  },
  {
    "text": "order is that is that a valid you know can the restaurant still cook that sometimes restaurants take things off",
    "start": "2510160",
    "end": "2515619"
  },
  {
    "text": "menus for us because they run out of the ingredients necessary to cook it right",
    "start": "2515619",
    "end": "2522040"
  },
  {
    "text": "then basically we may by price it pricing may involve offers right you",
    "start": "2522040",
    "end": "2527380"
  },
  {
    "text": "know currently it's a it's a cheeky Tuesday offer and you're going to get 15 off then what we want to do is request",
    "start": "2527380",
    "end": "2533980"
  },
  {
    "text": "payment for this order right so what we do is we just basically pause our steak",
    "start": "2533980",
    "end": "2539500"
  },
  {
    "text": "machine save some State saying hey we reached the point of payment mode and we send a message",
    "start": "2539500",
    "end": "2545260"
  },
  {
    "text": "saying hey let's grab the payment for that please that goes through our output off into",
    "start": "2545260",
    "end": "2550720"
  },
  {
    "text": "the ether right then the next component as the pricing",
    "start": "2550720",
    "end": "2555940"
  },
  {
    "text": "when it responds comes back by a different port",
    "start": "2555940",
    "end": "2561280"
  },
  {
    "text": "right it comes back by Port saying priced order we can use a correlation idea typically",
    "start": "2561280",
    "end": "2567040"
  },
  {
    "text": "to look up that particular piece of activity so where did we get to oh yeah we basically had requested payment looks",
    "start": "2567040",
    "end": "2573460"
  },
  {
    "text": "like the payment's been made I can move this order on and I can send another signal for example saying New Order and",
    "start": "2573460",
    "end": "2579760"
  },
  {
    "text": "that will then go to order placement yeah so I'm building just like in data flow",
    "start": "2579760",
    "end": "2585579"
  },
  {
    "text": "programming kind of black box which I then effectively have these activities inside and they just communicate with",
    "start": "2585579",
    "end": "2592060"
  },
  {
    "text": "outside world by messaging I need to worry about transactional messaging",
    "start": "2592060",
    "end": "2597400"
  },
  {
    "text": "because well actually it should be my activity really more than my other resource but if I'm effectively saying",
    "start": "2597400",
    "end": "2603940"
  },
  {
    "text": "hey I suspended my workflow at the point of making a requested payment I need to send that message",
    "start": "2603940",
    "end": "2610720"
  },
  {
    "text": "generally one of the problems that I hit is I can't effectively usually have a transaction that spans both my",
    "start": "2610720",
    "end": "2617500"
  },
  {
    "text": "messaging provider my broker be that basically Kafka rabbit SNS Azure service",
    "start": "2617500",
    "end": "2623440"
  },
  {
    "text": "bus whatever you use and the resource where I'm storing probably more my activity State than resource state right",
    "start": "2623440",
    "end": "2631380"
  },
  {
    "text": "in order to make sure that those two are in sync so that if effectively I say I",
    "start": "2631420",
    "end": "2638079"
  },
  {
    "text": "have requested basically the payment there has been a corresponding message I want a transaction the way I do that is",
    "start": "2638079",
    "end": "2645099"
  },
  {
    "text": "I create an outbox so generally a table in the same place effectively I'm managing my activity State and I write",
    "start": "2645099",
    "end": "2652000"
  },
  {
    "text": "the message there and a sweeper usually some kind of",
    "start": "2652000",
    "end": "2657280"
  },
  {
    "text": "separate thread looks through the outbox for unsent messages and sends them for me",
    "start": "2657280",
    "end": "2663040"
  },
  {
    "text": "and it keeps doing that on a regular interval and eventually even if the broker is",
    "start": "2663040",
    "end": "2668920"
  },
  {
    "text": "temporarily down or unavailable it will send it because it ain't gonna mark it sent until it's gone",
    "start": "2668920",
    "end": "2675880"
  },
  {
    "text": "so at that point I can guarantee that I have transactional messaging there are",
    "start": "2675880",
    "end": "2680980"
  },
  {
    "text": "risks I don't want to get into that today let's not talk about outbox that effectively I can duplicate sending because I don't get to write basically",
    "start": "2680980",
    "end": "2686980"
  },
  {
    "text": "back to the outbox so we call it guaranteed at least once we call it guaranteed at least once because you",
    "start": "2686980",
    "end": "2692619"
  },
  {
    "text": "have to accept the presence of duplicates and that means I tend to want an inbox",
    "start": "2692619",
    "end": "2698859"
  },
  {
    "text": "an inbox so I can de-duplicate have I seen this piece of work before if I have seen this work piece of work",
    "start": "2698859",
    "end": "2704859"
  },
  {
    "text": "before I probably shouldn't process it",
    "start": "2704859",
    "end": "2709078"
  },
  {
    "text": "and what's really useful about this is essentially this component can crash",
    "start": "2710319",
    "end": "2716760"
  },
  {
    "text": "if it crashes before it's basically sent a message to the app onto the broker when it comes",
    "start": "2716920",
    "end": "2723400"
  },
  {
    "text": "back up there's no dispatch to entering the outbox so I'll keep trying to resend it",
    "start": "2723400",
    "end": "2729960"
  },
  {
    "text": "because I can guarantee that I've got messaging and other components have inboxes so they cope with duplicates",
    "start": "2730359",
    "end": "2738700"
  },
  {
    "text": "I'm okay with these components crashing okay",
    "start": "2738700",
    "end": "2745859"
  },
  {
    "text": "interestingly enough I may not even actually need to save activity state",
    "start": "2747460",
    "end": "2754359"
  },
  {
    "text": "if I have an inbox and an out box I actually have a record of the conversation that I've been engaged",
    "start": "2754359",
    "end": "2759400"
  },
  {
    "text": "about particular activity I know what I've received and I know",
    "start": "2759400",
    "end": "2764980"
  },
  {
    "text": "what I sent I could recalculate what activities are currently in flight because I say well I",
    "start": "2764980",
    "end": "2771400"
  },
  {
    "text": "received all these and I haven't sent those messages out so they didn't reach that point or this one reached that",
    "start": "2771400",
    "end": "2776500"
  },
  {
    "text": "point and I'm waiting for a response for it so you can recalculate it you don't have to necessarily do that but in some",
    "start": "2776500",
    "end": "2782260"
  },
  {
    "text": "cases you might want to see that as an optimization",
    "start": "2782260",
    "end": "2786180"
  },
  {
    "text": "so generally these things are sequenced together so here are effectively my price goes over to take payment take",
    "start": "2788500",
    "end": "2793900"
  },
  {
    "text": "payment does its work at some point basically it says a payment was made that comes back on a different port I",
    "start": "2793900",
    "end": "2799900"
  },
  {
    "text": "Advanced the workflow in my state machine so the purchase has been made and then I raise a new order",
    "start": "2799900",
    "end": "2805599"
  },
  {
    "text": "even if that basically is an error that's just another message being raised if the customer's car was declined",
    "start": "2805599",
    "end": "2812319"
  },
  {
    "text": "because effectively they'd taken the card off basically some form in the deepest darkest parts of the internet",
    "start": "2812319",
    "end": "2817900"
  },
  {
    "text": "then it turns out basically that's okay I guess the payment refused message and we effectively then would just raise a",
    "start": "2817900",
    "end": "2824380"
  },
  {
    "text": "request new card message right so everything is just messages flowing",
    "start": "2824380",
    "end": "2829480"
  },
  {
    "text": "back and forth",
    "start": "2829480",
    "end": "2832079"
  },
  {
    "text": "now interestingly enough like we said what this protects us from is when we looked",
    "start": "2834579",
    "end": "2840579"
  },
  {
    "text": "at the early idea that basically entity Services thoughts would propagate",
    "start": "2840579",
    "end": "2846160"
  },
  {
    "text": "because we have asynchronous conversations between these components",
    "start": "2846160",
    "end": "2852700"
  },
  {
    "text": "work simply cues so if it crashes my take payment module",
    "start": "2852700",
    "end": "2858700"
  },
  {
    "text": "I simply queue up payment requests when it comes back online",
    "start": "2858700",
    "end": "2864579"
  },
  {
    "text": "it'll start basically honoring those payment requests for me so we'll talk about this being a",
    "start": "2864579",
    "end": "2870339"
  },
  {
    "text": "bulkhead to failure Bowl coaches are on a ship I have these watertight compartments",
    "start": "2870339",
    "end": "2876880"
  },
  {
    "text": "if I receive a hole in the compartment which is the compartment floods the whole ship doesn't sink right they take",
    "start": "2876880",
    "end": "2882280"
  },
  {
    "text": "payments is down that's a problem for the team on call for take payments but it doesn't necessarily mean the checkout",
    "start": "2882280",
    "end": "2887560"
  },
  {
    "text": "team have to scramble their work's just building up hopefully the key won't get too long before we basically introduce a new instance to take payment it works by",
    "start": "2887560",
    "end": "2894640"
  },
  {
    "text": "the way don't be the Titanic the Titanic basically for it's because it's first class passengers didn't want to have to",
    "start": "2894640",
    "end": "2900760"
  },
  {
    "text": "navigate those hatches on bulkheads it stopped its bulkheads short of the top of the ship so first class passengers",
    "start": "2900760",
    "end": "2907780"
  },
  {
    "text": "could allegedly stroll along the deck and the problem with that is when one of your bulkheads gets a hole in it the",
    "start": "2907780",
    "end": "2913540"
  },
  {
    "text": "water floods over the top through the first class basically a passenger compartment and your ship sinks so be",
    "start": "2913540",
    "end": "2919599"
  },
  {
    "text": "wary of that probably our closest example to making",
    "start": "2919599",
    "end": "2925119"
  },
  {
    "text": "holes for the first class passengers is this idea sometimes you see people get all the way to doing that model and then",
    "start": "2925119",
    "end": "2931000"
  },
  {
    "text": "they go oh I need a pricing model to price with how am I going to get that and they forget",
    "start": "2931000",
    "end": "2937180"
  },
  {
    "text": "that I'm building my model in a reactive style where effectively I have data flow",
    "start": "2937180",
    "end": "2942220"
  },
  {
    "text": "programming style knows measures between them I'll just do a get request and get the pricing model",
    "start": "2942220",
    "end": "2947680"
  },
  {
    "text": "which is of course a bad idea because now effectively I've just reintroduced a dependency basically on a synchronous",
    "start": "2947680",
    "end": "2954819"
  },
  {
    "text": "component that if it faults brings down my checkout component right now admittedly only checkout is probably",
    "start": "2954819",
    "end": "2960640"
  },
  {
    "text": "down at this point it may not be so bad everything else is queuing but we can still work around that right one option",
    "start": "2960640",
    "end": "2967720"
  },
  {
    "text": "might be well I send the model a request to a pricing components they kind of",
    "start": "2967720",
    "end": "2972819"
  },
  {
    "text": "have the pricing model for this restaurant and it replies and gives it back to me but in this kind of data like",
    "start": "2972819",
    "end": "2978819"
  },
  {
    "text": "pricing models for restaurants actually I'm going to be asking for that a lot so the other alternative is to think",
    "start": "2978819",
    "end": "2985300"
  },
  {
    "text": "about that model from flowbase programming of a lookup table",
    "start": "2985300",
    "end": "2990480"
  },
  {
    "text": "and we say well I tell you what the pricing component whenever it basically creates a new pricing model a new",
    "start": "2990579",
    "end": "2995859"
  },
  {
    "text": "catalog or a menu if you like it sends out a message I'll listen for those and I'll store them in a database",
    "start": "2995859",
    "end": "3002400"
  },
  {
    "text": "locally to me and I can just look up the pricing because it's not an activity I want to",
    "start": "3002400",
    "end": "3008640"
  },
  {
    "text": "parallelize and so essentially I don't really want to put my workflow into basically I",
    "start": "3008640",
    "end": "3016319"
  },
  {
    "text": "don't want to basically shut it down and say save it save the state aware my activity wait for the pricing model to",
    "start": "3016319",
    "end": "3021780"
  },
  {
    "text": "come back it's quite inefficient right I just want to price it there and then so I can give you the data",
    "start": "3021780",
    "end": "3028740"
  },
  {
    "text": "that you can then use to price it by listening to the event stream that's coming out of the pricing module that",
    "start": "3028740",
    "end": "3035280"
  },
  {
    "text": "says hey here are some facts about prices remember this idea we have two things that we can the messages may be an",
    "start": "3035280",
    "end": "3041579"
  },
  {
    "text": "instruction for us to do something please do this purchase something or things that you should know like a",
    "start": "3041579",
    "end": "3047760"
  },
  {
    "text": "pricing model it turns out what I do with that is I save it so I can look it up later this",
    "start": "3047760",
    "end": "3053040"
  },
  {
    "text": "general idea is called event card State transfer",
    "start": "3053040",
    "end": "3057380"
  },
  {
    "text": "well that means the pricing model is down I'm resilient to that too",
    "start": "3058140",
    "end": "3063359"
  },
  {
    "text": "sure the prices are a bit stale but that's generally okay right maybe",
    "start": "3063359",
    "end": "3069059"
  },
  {
    "text": "you get a cheap pizza we live with that",
    "start": "3069059",
    "end": "3073760"
  },
  {
    "text": "they're another whole Forums on the internet dedicated to how you rip Justice off by the way um so we sometimes we can tailor the",
    "start": "3074520",
    "end": "3081240"
  },
  {
    "text": "consistency here right we can decide what's our ability to live with",
    "start": "3081240",
    "end": "3087119"
  },
  {
    "text": "something that maybe eventually consistent there might be a little bit out of date if that's okay maybe we can",
    "start": "3087119",
    "end": "3092339"
  },
  {
    "text": "use some technique like a lookout for our ecst maybe we can't really live with that and I have to send you a message",
    "start": "3092339",
    "end": "3097800"
  },
  {
    "text": "and get a response but you can tailor the consistency that you're willing to accept an individual component",
    "start": "3097800",
    "end": "3105619"
  },
  {
    "text": "we alluded to this earlier let it crash right it comes from the actor model this idea that we say hey",
    "start": "3106020",
    "end": "3112680"
  },
  {
    "text": "the simplest thing for us to do is to accept now in the event of a failure we",
    "start": "3112680",
    "end": "3118380"
  },
  {
    "text": "support us rapidly crash our applications recovery is hard writing all that code",
    "start": "3118380",
    "end": "3123960"
  },
  {
    "text": "that figures out I wonder what state we're currently in and I wonder how I can unwind this mess it's probably",
    "start": "3123960",
    "end": "3129480"
  },
  {
    "text": "fraught with error and Peril right because generally speaking you don't know enough and what happens if you",
    "start": "3129480",
    "end": "3134819"
  },
  {
    "text": "crash by trying to recover from the crash right it's a bit of a nightmare generally a huge number of crashes it",
    "start": "3134819",
    "end": "3140700"
  },
  {
    "text": "turns out you can just get resolved by basically saying let's just kill this system and basically reboot it",
    "start": "3140700",
    "end": "3146280"
  },
  {
    "text": "right turn it on and off again works for notes as well as anything else but to do that we have to make sure that startup",
    "start": "3146280",
    "end": "3152880"
  },
  {
    "text": "basically is recovery when we start up we figure out where should we be",
    "start": "3152880",
    "end": "3158339"
  },
  {
    "text": "and shutdown is clean when I shut down I don't leave things in a state I can't recover too",
    "start": "3158339",
    "end": "3164040"
  },
  {
    "text": "so some simple rules if I'm pulling something off basically the input buffer don't hack it don't say",
    "start": "3164040",
    "end": "3170579"
  },
  {
    "text": "I'm done with it until I've sent a corresponding output message updated my activity state to the",
    "start": "3170579",
    "end": "3176339"
  },
  {
    "text": "right place marked it in my inbox",
    "start": "3176339",
    "end": "3180200"
  },
  {
    "text": "until that point what will happen is if I crash the work will still be on the Queue and I can",
    "start": "3181440",
    "end": "3188040"
  },
  {
    "text": "simply pick up the work again and try it again all right so don't Mark that individual piece of work done until we've done it",
    "start": "3188040",
    "end": "3196859"
  },
  {
    "text": "do you duplicate because somebody else may be sending this duplicates because they've been using transactional",
    "start": "3196859",
    "end": "3202319"
  },
  {
    "text": "messaging to make sure that we're going to receive the messages that correspond",
    "start": "3202319",
    "end": "3207420"
  },
  {
    "text": "to the state they've currently reached and use asynchronous messaging because",
    "start": "3207420",
    "end": "3213119"
  },
  {
    "text": "that allows us basically to let them crash and we just queue work for them we're not dependent on their uptime we",
    "start": "3213119",
    "end": "3220200"
  },
  {
    "text": "haven't forced them to be available we just want availability of this increased messaging it'll work",
    "start": "3220200",
    "end": "3226700"
  },
  {
    "text": "we may need to apply back pressure just as we did with basically actor models",
    "start": "3229319",
    "end": "3236400"
  },
  {
    "text": "if we have to control the rate at which we can basically can consume stuff",
    "start": "3236400",
    "end": "3242339"
  },
  {
    "text": "generally it means we've got a resource that basically is limiting its capacity so maybe we're using a database with a",
    "start": "3242339",
    "end": "3249240"
  },
  {
    "text": "jdbc connection coming out of a pool we've got a limited number of Connections in the pool right",
    "start": "3249240",
    "end": "3254880"
  },
  {
    "text": "two ways applying back pressure depending whether we're push or pull to the messaging middleware",
    "start": "3254880",
    "end": "3260339"
  },
  {
    "text": "if basically it's pull very straightforward we reduce the rate of polling so that we don't effectually get",
    "start": "3260339",
    "end": "3265859"
  },
  {
    "text": "too many messages if it's push typically middleware tends to support the idea of only X many messages in flight",
    "start": "3265859",
    "end": "3272579"
  },
  {
    "text": "so if I have a certain number of unac messages it won't send me more",
    "start": "3272579",
    "end": "3278480"
  },
  {
    "text": "we may also want to think about a circuit breaker right right in the event the stuff that we did that we own is",
    "start": "3280140",
    "end": "3286319"
  },
  {
    "text": "struggling with the load then just basically stop taking messages wait until a certain product amount of",
    "start": "3286319",
    "end": "3292380"
  },
  {
    "text": "time has passed try a test if that one goes through hey open the floodgates and",
    "start": "3292380",
    "end": "3297420"
  },
  {
    "text": "let everybody else back in or return to the load shed right so in the event that this resource",
    "start": "3297420",
    "end": "3304740"
  },
  {
    "text": "is struggling that's okay I'll just discard incoming messages and I'll wait until basically it recovers",
    "start": "3304740",
    "end": "3312200"
  },
  {
    "text": "we can also think about the idea of being single threaded",
    "start": "3314339",
    "end": "3319559"
  },
  {
    "text": "if our components tend to basically be single threaded and reading from the queue and writing to the output they're",
    "start": "3319559",
    "end": "3325380"
  },
  {
    "text": "very easy for us to reason about the software Engineers don't have to worry about uh generalizing access to mutable",
    "start": "3325380",
    "end": "3330540"
  },
  {
    "text": "state we don't have to worry about context switching",
    "start": "3330540",
    "end": "3335579"
  },
  {
    "text": "uh the open source framework I work on brighter we are single threaded you can have more instances of us but we're",
    "start": "3335579",
    "end": "3341520"
  },
  {
    "text": "single threaded and we scale far better than the complicated schemes I've seen where people write them with thread",
    "start": "3341520",
    "end": "3347400"
  },
  {
    "text": "pools and stuff it's all a nightmare right try to be single threaded if I'm",
    "start": "3347400",
    "end": "3352440"
  },
  {
    "text": "single threaded I obviously have to think about the fact of well if I introduce more instances of them",
    "start": "3352440",
    "end": "3358740"
  },
  {
    "text": "am I now at risk basically of trying to update things out of order because I'm pulling work from two threads from a",
    "start": "3358740",
    "end": "3365640"
  },
  {
    "text": "stream type things out of order so earlier about Kafka Cafe lets you read with one thread through partitions so if",
    "start": "3365640",
    "end": "3372599"
  },
  {
    "text": "you need ordering when you choose to scale out a single threaded item then",
    "start": "3372599",
    "end": "3378359"
  },
  {
    "text": "effectively you have to rely on partitioning of some sort active models do different form but they still do",
    "start": "3378359",
    "end": "3383520"
  },
  {
    "text": "partitioning effectively when they root right if you don't care about ordering if I can process these items",
    "start": "3383520",
    "end": "3389460"
  },
  {
    "text": "individually I can just scale out without worrying about I can have a cue or the light that doesn't necessarily need to support partitioning right",
    "start": "3389460",
    "end": "3397440"
  },
  {
    "text": "okay so I can scale out these components",
    "start": "3397440",
    "end": "3404700"
  },
  {
    "text": "which means if I let something crash it's pretty easy for some kind of supervisor",
    "start": "3404700",
    "end": "3411300"
  },
  {
    "text": "to just create new instances to continue to meet my workload and that's what you",
    "start": "3411300",
    "end": "3416400"
  },
  {
    "text": "get kubernetes from or other you know other forms of elastic basically compute",
    "start": "3416400",
    "end": "3422400"
  },
  {
    "text": "that will introduce new instances in order to cope with instances that have gone down",
    "start": "3422400",
    "end": "3429559"
  },
  {
    "text": "and overall that gives us this idea of responsiveness",
    "start": "3430380",
    "end": "3436500"
  },
  {
    "text": "this idea essentially that's a hard diagram to read this idea that effectively if we have components",
    "start": "3436500",
    "end": "3444059"
  },
  {
    "text": "that essentially communicate via asynchronous messaging and therefore have bulkheads to failures of other",
    "start": "3444059",
    "end": "3451020"
  },
  {
    "text": "components and can easily be scaled out such that as components begin to fail we",
    "start": "3451020",
    "end": "3457079"
  },
  {
    "text": "can just introduce new instances in order to replace them we tend to be",
    "start": "3457079",
    "end": "3462480"
  },
  {
    "text": "responsive to users because we can both scale to meet load on demand and we can remain working",
    "start": "3462480",
    "end": "3470099"
  },
  {
    "text": "despite failure which gets us back to this diagram",
    "start": "3470099",
    "end": "3476520"
  },
  {
    "text": "which is really where active architectures come from which says if we choose to build applications that use",
    "start": "3476520",
    "end": "3483599"
  },
  {
    "text": "messaging as the means to communicate between the different nodes of our",
    "start": "3483599",
    "end": "3489000"
  },
  {
    "text": "application we will gain the benefits of resilience because we have bulkheads to failure",
    "start": "3489000",
    "end": "3495859"
  },
  {
    "text": "elasticity particularly if we have a kind of let it crash pattern where essentially we just basically restart",
    "start": "3495859",
    "end": "3501599"
  },
  {
    "text": "new components in order to cope with a failure of existing ones or essentially",
    "start": "3501599",
    "end": "3506640"
  },
  {
    "text": "to cope with increased load or also to encode with decreased load and reduce our cost",
    "start": "3506640",
    "end": "3512520"
  },
  {
    "text": "right and that makes us responsive to users and all of that really",
    "start": "3512520",
    "end": "3519420"
  },
  {
    "text": "comes from us reapplying some of these ideas from the 1970s that came and",
    "start": "3519420",
    "end": "3524579"
  },
  {
    "text": "people were trying to think hard about how we would cope with a model that had multiple cores and not necessarily the",
    "start": "3524579",
    "end": "3530640"
  },
  {
    "text": "classic one human architectures that were prevalent at the time all right and I'm done",
    "start": "3530640",
    "end": "3536880"
  },
  {
    "text": "I don't think we have much time for questions I think I'm bang on time but as I'm packing up",
    "start": "3536880",
    "end": "3543180"
  },
  {
    "text": "if you've got a question thanks very much",
    "start": "3543180",
    "end": "3549619"
  }
]