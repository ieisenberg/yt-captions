[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "alright we'll go ahead and get started there might be some folks trickling in the back but that's okay so uh my name",
    "start": "30",
    "end": "6870"
  },
  {
    "text": "is Erin standard I'm the founder and CEO of a company called petit bridge we build open-source tools for dotnet",
    "start": "6870",
    "end": "13469"
  },
  {
    "text": "developers to help build a highly available distributed systems the biggest thing we work on is a technology",
    "start": "13469",
    "end": "19230"
  },
  {
    "text": "called akka net one of the co-founders of that open source project it's a distributed actor/model framework for",
    "start": "19230",
    "end": "25920"
  },
  {
    "text": "doing sort of high performance real-time computing so that's what I spend most of my time doing lately however because",
    "start": "25920",
    "end": "32820"
  },
  {
    "text": "we're in the business of helping our customers build distributed systems that also means we have to also be in the",
    "start": "32820",
    "end": "38460"
  },
  {
    "text": "business of helping them figure out how to manage and monitor those distributed systems as well and that's what we're",
    "start": "38460",
    "end": "44399"
  },
  {
    "text": "going to talk about today using a technology called distributed tracing which is a relatively new tool in the",
    "start": "44399",
    "end": "49890"
  },
  {
    "text": "application performance monitoring space so I'm gonna introduce this tool today",
    "start": "49890",
    "end": "55460"
  },
  {
    "text": "apparently I forgot to plug in my clicker or my thing here all right there",
    "start": "55460",
    "end": "62730"
  },
  {
    "start": "62000",
    "end": "152000"
  },
  {
    "text": "we go alright so the first thing we're gonna talk about actually is micro services and distributed architectures",
    "start": "62730",
    "end": "68040"
  },
  {
    "text": "there's been a number of workshops and other talks today about how to build these some of the best practices for doing it and so forth I'm gonna go ahead",
    "start": "68040",
    "end": "75330"
  },
  {
    "text": "and address some of the problems that micro services introduce and specifically they're people problems",
    "start": "75330",
    "end": "81750"
  },
  {
    "text": "micro services are great for a large number of reasons but they do trade one",
    "start": "81750",
    "end": "87390"
  },
  {
    "text": "set of problems for another set of problems distributed tracing is aimed at solving some of the problems that micro",
    "start": "87390",
    "end": "94200"
  },
  {
    "text": "services introduce and your architecture and so we're good then we're gonna go ahead and cover what distributed tracing",
    "start": "94200",
    "end": "100409"
  },
  {
    "text": "is in concept and how it works in practice then we're going to introduce",
    "start": "100409",
    "end": "105509"
  },
  {
    "text": "some specific technologies the most important one is called open tracing which is a standard that is designed to",
    "start": "105509",
    "end": "112710"
  },
  {
    "text": "be vendor-neutral meaning lots of different tracing products like Microsoft Azure application insights for",
    "start": "112710",
    "end": "119189"
  },
  {
    "text": "instance or Zipkin or Jaeger these are all names the different sort of tracing engines that you might use at your",
    "start": "119189",
    "end": "124290"
  },
  {
    "text": "company they all target this standard which means that you can have apples to",
    "start": "124290",
    "end": "129390"
  },
  {
    "text": "apples comparisons for people who are building you know frameworks like or asp.net MVC where I can support all",
    "start": "129390",
    "end": "137070"
  },
  {
    "text": "those different tools simultaneously by targeting this standard that's what that's about and then we're going to",
    "start": "137070",
    "end": "142560"
  },
  {
    "text": "talk about some distributed tracing best practices and I'm gonna introduce a little demo using Jaeger which is one of",
    "start": "142560",
    "end": "148320"
  },
  {
    "text": "the open source of tracing tools that's publicly available walks you before I",
    "start": "148320",
    "end": "153750"
  },
  {
    "start": "152000",
    "end": "214000"
  },
  {
    "text": "keep going quick show of hands so far - so I get a feel for who's in the room today who in the room would consider",
    "start": "153750",
    "end": "160110"
  },
  {
    "text": "themselves to be a back-end software developer quick show of hands okay looks",
    "start": "160110",
    "end": "165240"
  },
  {
    "text": "like the lion's share everyone the room okay next show of hands who is currently",
    "start": "165240",
    "end": "170670"
  },
  {
    "text": "working on a distributed architecture whether it's micro services or SOA or whatever quick show hands all right what",
    "start": "170670",
    "end": "177630"
  },
  {
    "text": "are the same what are the same ones who is already using a distributed tracing",
    "start": "177630",
    "end": "182670"
  },
  {
    "text": "engine all right there we go good so we've got it we've got a pretty we got a",
    "start": "182670",
    "end": "188970"
  },
  {
    "text": "couple of people who are already we're already on board and most of us are not so last question I have before I jump in",
    "start": "188970",
    "end": "196020"
  },
  {
    "text": "who is this your first time being exposed to distributed tracing at all other than no other than hearing someone",
    "start": "196020",
    "end": "202680"
  },
  {
    "text": "mention it in passing maybe once twice before quick show of hands okay great okay cool does that that's helpful for",
    "start": "202680",
    "end": "209459"
  },
  {
    "text": "me gives the opportunity to modulate my examples and everything so the old way",
    "start": "209459",
    "end": "216660"
  },
  {
    "text": "developing software this has been sort of the standard architecture that most enterprise applications have used for",
    "start": "216660",
    "end": "223410"
  },
  {
    "text": "the better part of three decades it's all pretty recognizable we have a monolithic application written in",
    "start": "223410",
    "end": "229590"
  },
  {
    "text": "typically a single runtime a single programming language and a single code",
    "start": "229590",
    "end": "234900"
  },
  {
    "text": "base usually that application more often than not has been stateless and all the",
    "start": "234900",
    "end": "239970"
  },
  {
    "text": "actual sort of source of truth states usually been stored inside some sort of database right well the new model that",
    "start": "239970",
    "end": "247440"
  },
  {
    "text": "we're working towards is a distributed architecture micro services now the",
    "start": "247440",
    "end": "253200"
  },
  {
    "text": "predominant reason why we move towards microcircuits fundamentally isn't technical it's actually about being able",
    "start": "253200",
    "end": "259590"
  },
  {
    "text": "to scale the teams that build software not the software products themselves I can go ahead and take a really come",
    "start": "259590",
    "end": "267600"
  },
  {
    "text": "phlex product and break it up into lots of distinct services which can be developed and maintained by independent",
    "start": "267600",
    "end": "274560"
  },
  {
    "text": "teams that program against essentially like network contracts things like rest api is for instance or mess or using",
    "start": "274560",
    "end": "281760"
  },
  {
    "text": "common messaging formats with tools like Kafka or in service bus or event hubs those sorts of things so one of the big",
    "start": "281760",
    "end": "289830"
  },
  {
    "text": "differences between how this system works and this system worked is all the programmers working inside one process",
    "start": "289830",
    "end": "297030"
  },
  {
    "text": "in a monolith before using the same set of tools and every one typically had access to the same codebase so even",
    "start": "297030",
    "end": "303720"
  },
  {
    "text": "though monoliths were sort of difficult and awkward to deploy cuz he had to deploy every basically view changed",
    "start": "303720",
    "end": "308760"
  },
  {
    "text": "anything you had to change everything all at once which made deployments rather inflexible and infrequent I might",
    "start": "308760",
    "end": "315150"
  },
  {
    "text": "add at least all the developers on this team knew everything about how the system was built and they could if they",
    "start": "315150",
    "end": "320790"
  },
  {
    "text": "needed to learn something they could dig through the code on top of that we had the ability to tell a story about what",
    "start": "320790",
    "end": "327450"
  },
  {
    "text": "happened when we processed an end use as a request well add the ability to tell that story using tracing tools like",
    "start": "327450",
    "end": "334170"
  },
  {
    "text": "intellitrace and so forth because all that information could be captured from the local context of a single process as",
    "start": "334170",
    "end": "340620"
  },
  {
    "text": "you're about to see with micro services that breaks down once we start introducing different services network",
    "start": "340620",
    "end": "347610"
  },
  {
    "text": "boundaries different runtimes different frameworks different programming languages and most importantly different",
    "start": "347610",
    "end": "353100"
  },
  {
    "text": "people so micro services are fundamentally a wave scaling software",
    "start": "353100",
    "end": "359730"
  },
  {
    "start": "354000",
    "end": "535000"
  },
  {
    "text": "development teams is how I look at it now that being said a lot of the work I do with petit bridges customers is being",
    "start": "359730",
    "end": "366210"
  },
  {
    "text": "able to introduce things like partial fault table our Shiell failure tolerance using network boundaries to go ahead and",
    "start": "366210",
    "end": "373170"
  },
  {
    "text": "physically isolate different parts of your system that have different consistency and availability settings",
    "start": "373170",
    "end": "378960"
  },
  {
    "text": "and so forth so there are some big technical benefits to micro services too but the primary benefit behind them is",
    "start": "378960",
    "end": "385470"
  },
  {
    "text": "it improves the agility of our software development organizations if I take my",
    "start": "385470",
    "end": "390810"
  },
  {
    "text": "product and I break it up and let's say three discreet services that all interact with each other using explicit",
    "start": "390810",
    "end": "396990"
  },
  {
    "text": "contracts that were agreed upon sort of when they when they first built it why can have one team let's say the",
    "start": "396990",
    "end": "403520"
  },
  {
    "text": "service one is the customer facing part so that's sort of like the web front-end of your application well I might have",
    "start": "403520",
    "end": "409670"
  },
  {
    "text": "you know a couple developers a front-end back-end an architect it kind of oversees the organization of all of it",
    "start": "409670",
    "end": "414890"
  },
  {
    "text": "and then now you have some QA folks on service to just kind of more like business rules and middleware may be",
    "start": "414890",
    "end": "422150"
  },
  {
    "text": "doing maybe it does some fan-out or some third-party services you use or whatever you might have a slightly different",
    "start": "422150",
    "end": "428480"
  },
  {
    "text": "looking team and then the third team where you might have a much more data intensive micro service where you're",
    "start": "428480",
    "end": "434030"
  },
  {
    "text": "actually working with your database working with your bi and analytics systems and so forth you might have a",
    "start": "434030",
    "end": "439190"
  },
  {
    "text": "DBA and some other types of people who work on here and then lastly maybe you",
    "start": "439190",
    "end": "444290"
  },
  {
    "text": "have a shared infrastructure team that basically provides standards for how all these teams do deployments they might be",
    "start": "444290",
    "end": "450320"
  },
  {
    "text": "responsible for doing things like providing a standard way of deploying Anza kubernetes or Azure or Amazon or",
    "start": "450320",
    "end": "456530"
  },
  {
    "text": "whatever your preferred runtime environment is so what's really cool about micro services is service one in",
    "start": "456530",
    "end": "463250"
  },
  {
    "text": "service two can potentially be implemented with totally different technologies pick the right tools for",
    "start": "463250",
    "end": "468890"
  },
  {
    "text": "the job right and so you might have these sort of polyglot teams or maybe team one is programming using react and",
    "start": "468890",
    "end": "476600"
  },
  {
    "text": "doing a primarily JavaScript front-end team two might be doing a whole bunch of",
    "start": "476600",
    "end": "481730"
  },
  {
    "text": "work in something like go or maybe Scala and then team three if they're doing a",
    "start": "481730",
    "end": "487490"
  },
  {
    "text": "lot of data intensive stuff maybe they're using dotnet core and are doing you know doing some work using sort of",
    "start": "487490",
    "end": "492800"
  },
  {
    "text": "traditional I don't know OLAP type stuff it could be it could be whatever story you want to tell here so that's great we",
    "start": "492800",
    "end": "500420"
  },
  {
    "text": "can pick the best tools for the job and we can go ahead and hire the right people who know how to use those tools",
    "start": "500420",
    "end": "505880"
  },
  {
    "text": "and integrate everything together through the magic of sort of network message formats and serialization well",
    "start": "505880",
    "end": "512950"
  },
  {
    "text": "while this makes it possible for us to use the right tool for the job makes it possible for us to deploy changes each",
    "start": "512950",
    "end": "519530"
  },
  {
    "text": "one of these services independently and allows them to go ahead and sort of manage their their applications on their",
    "start": "519530",
    "end": "525170"
  },
  {
    "text": "own release Cadence's and so forth this type of organizational structure introduces a whole new class of problems",
    "start": "525170",
    "end": "532280"
  },
  {
    "text": "we didn't have before and the lift world probably the biggest problem",
    "start": "532280",
    "end": "538210"
  },
  {
    "start": "535000",
    "end": "810000"
  },
  {
    "text": "and this problem gets worse the more micro-services you have and the more people you have is loss of coherence",
    "start": "538210",
    "end": "545070"
  },
  {
    "text": "what exactly happens when my front-end service receives a request from an end-user tell me the complete story end",
    "start": "545070",
    "end": "553750"
  },
  {
    "text": "to end about everything all of our software did to serve that final result we sent back to the end-user and a big",
    "start": "553750",
    "end": "560320"
  },
  {
    "text": "microservices architecture it's very unlikely there's one person who can answer that question because that",
    "start": "560320",
    "end": "566620"
  },
  {
    "text": "knowledge around how each service works and how its implemented and how its using the underlying tools now that's",
    "start": "566620",
    "end": "572620"
  },
  {
    "text": "all decentralized along these programming teams that have their own expertise and tool sets all right that's",
    "start": "572620",
    "end": "580120"
  },
  {
    "text": "tricky and it gets worse the more services you have if you're like uber which is one of the companies that",
    "start": "580120",
    "end": "585670"
  },
  {
    "text": "developed one of the open-source micro Knut microservice one of the open source distributed tracing engines we're gonna",
    "start": "585670",
    "end": "592000"
  },
  {
    "text": "look at they had something like 1200 services that are all hard to talk to each other to fulfill their application",
    "start": "592000",
    "end": "597550"
  },
  {
    "text": "you can't no matter how smart you are you can't have one person who can fit that complete picture into memory at any",
    "start": "597550",
    "end": "603730"
  },
  {
    "text": "given time just beyond our capabilities right that's an issue second issue is",
    "start": "603730",
    "end": "609940"
  },
  {
    "text": "this loss of coherence makes distributed systems much more difficult to debug than a traditional monolith if an",
    "start": "609940",
    "end": "617560"
  },
  {
    "text": "exception gets thrown somewhere inside my monolithic application I have the entire stack trace of everything that",
    "start": "617560",
    "end": "623770"
  },
  {
    "text": "happened prior sitting there inside that process and I can go ahead and you attach a debugger to it and see what",
    "start": "623770",
    "end": "629890"
  },
  {
    "text": "exactly happened well now the errors can happen in a downstream service that I",
    "start": "629890",
    "end": "635710"
  },
  {
    "text": "didn't program in a language I don't understand using tools I've never heard of before but someone else on my team you know",
    "start": "635710",
    "end": "642070"
  },
  {
    "text": "what someone else on another team does what am I supposed to do as the developer on the upstream service that",
    "start": "642070",
    "end": "648040"
  },
  {
    "text": "has to deal with the angry customer whose request didn't get processed on time that's a problem the other thing",
    "start": "648040",
    "end": "655210"
  },
  {
    "text": "that makes this especially fun is that if you have to work with multiple sort of downstream services in parallel your",
    "start": "655210",
    "end": "661210"
  },
  {
    "text": "requests can actually fail in multiple places in your system concurrently so I might have failures in four different",
    "start": "661210",
    "end": "667870"
  },
  {
    "text": "all at the same time and on top of that the detail you need to debug that those",
    "start": "667870",
    "end": "673810"
  },
  {
    "text": "exceptions probably doesn't get propagated back in a very easily understandable or coherent manner so",
    "start": "673810",
    "end": "680410"
  },
  {
    "text": "that's another issue that makes this problematic for us and then the last bit the hardest part of software development",
    "start": "680410",
    "end": "687370"
  },
  {
    "text": "is always the people being able to troubleshoot issues that occur inside a big distributed system now requires a",
    "start": "687370",
    "end": "694750"
  },
  {
    "text": "much more precise level of communication between people on different teams than it used to in monolith land where",
    "start": "694750",
    "end": "701800"
  },
  {
    "text": "everyone had access to the same codebase it was all written on the same tools that everybody understood now that's no",
    "start": "701800",
    "end": "707410"
  },
  {
    "text": "longer the case and if you don't have let's say common infrastructure and",
    "start": "707410",
    "end": "713050"
  },
  {
    "text": "standards that's why we have a shared infrastructure team on a previous diagram they're the folks who help to help us define those standards how we do",
    "start": "713050",
    "end": "719920"
  },
  {
    "text": "some things if you don't have common standards the phrases and words that",
    "start": "719920",
    "end": "724930"
  },
  {
    "text": "team one uses might be totally different than the ones that team to use is to describe the same thing so you end up",
    "start": "724930",
    "end": "731290"
  },
  {
    "text": "with a sort of translation problem from there I know it sounds sounds like something out of a Dilbert cartoon but",
    "start": "731290",
    "end": "736510"
  },
  {
    "text": "it does happen but most importantly what you end up with our information silos and so all of these problems essentially",
    "start": "736510",
    "end": "744790"
  },
  {
    "text": "contribute to ironically enough making it more difficult for us to turn around fixes the whole point of micro services",
    "start": "744790",
    "end": "752560"
  },
  {
    "text": "is to be more agile and to be able to deploy changes and iterate much more quickly on our products but those loss",
    "start": "752560",
    "end": "759490"
  },
  {
    "text": "of coherence and the increased debugging time make it much more expensive for us to do that the way historically people",
    "start": "759490",
    "end": "767830"
  },
  {
    "text": "have had to go in debug sort of micro service issues and I've been in the room several times having to do this is you",
    "start": "767830",
    "end": "774190"
  },
  {
    "text": "have an engineer from each team from each service pulling together log files and trying to correlate them all across",
    "start": "774190",
    "end": "780310"
  },
  {
    "text": "all the different services and I'm sure there's some vendors from companies like Splunk that be very happy to sell you a",
    "start": "780310",
    "end": "786310"
  },
  {
    "text": "6-figure solution to help make that easier and all I found it does is actually just makes the arguments more",
    "start": "786310",
    "end": "791770"
  },
  {
    "text": "intense when things occurs so long story short the way we've the the tools that",
    "start": "791770",
    "end": "798100"
  },
  {
    "text": "we have for trying to debug these types of problems out-of-the-box don't scale very well they don't scale as well as the actual",
    "start": "798100",
    "end": "804860"
  },
  {
    "text": "sort of micro service architecture style is supposed to so what do we need what",
    "start": "804860",
    "end": "811940"
  },
  {
    "start": "810000",
    "end": "1007000"
  },
  {
    "text": "we fundamentally need is to take a tooling approach that works really well inside a single monolithic process and",
    "start": "811940",
    "end": "818930"
  },
  {
    "text": "we need to go ahead and reorganize how we use it so it can now work across multiple processes that are written in",
    "start": "818930",
    "end": "826520"
  },
  {
    "text": "different languages and use different frameworks and runtimes potentially and this is what distributed tracing is",
    "start": "826520",
    "end": "832400"
  },
  {
    "text": "designed to do so tool like intellitrace or some of our sort of yo single process",
    "start": "832400",
    "end": "838610"
  },
  {
    "text": "tracing tools we're able to go and give us a detailed stack trace and essentially tell the story of what",
    "start": "838610",
    "end": "844850"
  },
  {
    "text": "happened from the perspective of a single process it's fundamentally how they worked well that breaks down as",
    "start": "844850",
    "end": "850850"
  },
  {
    "text": "soon as you have process boundaries that's the problem that microservices really introduces here so distributed",
    "start": "850850",
    "end": "856760"
  },
  {
    "text": "tracing is about let's in parallel gather the story from each one of the",
    "start": "856760",
    "end": "863540"
  },
  {
    "text": "processes that was involved in serving this request I must go and correlate and stitch those together so we can follow",
    "start": "863540",
    "end": "870020"
  },
  {
    "text": "them as sort of a quadrille timeline of when things happen and that can include by the way things happening at the same",
    "start": "870020",
    "end": "876230"
  },
  {
    "text": "time in different parts of your network and that's what distributed tracing as a tool class is designed to do now what",
    "start": "876230",
    "end": "883790"
  },
  {
    "text": "I'm showing you right now this is the user interface for Zipkin an open source distributed tracing tool that was",
    "start": "883790",
    "end": "889160"
  },
  {
    "text": "originally developed by Twitter in-house so what you can see here the fonts probably a little small for the folks in",
    "start": "889160",
    "end": "895700"
  },
  {
    "text": "back so I apologize what you can see here is I have a request that took about",
    "start": "895700",
    "end": "901430"
  },
  {
    "text": "48 milliseconds and you can see that it has eight spans I'm gonna go ahead and",
    "start": "901430",
    "end": "907010"
  },
  {
    "text": "define what this term means and a little bit more detail in a moment but you can think of a span as one logical",
    "start": "907010",
    "end": "912590"
  },
  {
    "text": "synchronous operation that happened inside one of your processes right so if",
    "start": "912590",
    "end": "917930"
  },
  {
    "text": "I have an MVC controller that receives one HTTP request that might be my first",
    "start": "917930",
    "end": "923720"
  },
  {
    "text": "spin if that controller makes an asynchronous request down to let's say entity framework or your database driver",
    "start": "923720",
    "end": "930230"
  },
  {
    "text": "to go ahead and do a query that's a second span occurring inside the same process so this is designed to go ahead and",
    "start": "930230",
    "end": "936990"
  },
  {
    "text": "allow us to sort of asynchronously trace things a little bit more easily that's the big idea and what I can see is that",
    "start": "936990",
    "end": "943230"
  },
  {
    "text": "this particular request actually bridged two different nodes inside my network",
    "start": "943230",
    "end": "948300"
  },
  {
    "text": "two different instances of a service we're talking to each other here I'm going to show you a demo in a minute",
    "start": "948300",
    "end": "953430"
  },
  {
    "text": "where we're gonna have a big sort of peer-to-peer a cadet Network essentially",
    "start": "953430",
    "end": "958440"
  },
  {
    "text": "shouting data across all the nodes at the same time and then gathering it back which is gonna be a lot noisier looking",
    "start": "958440",
    "end": "964080"
  },
  {
    "text": "than this that's just to show you sort of how complex how even the most",
    "start": "964080",
    "end": "969540"
  },
  {
    "text": "complicated requests can be captured using a distributed tracing engine that's the big idea",
    "start": "969540",
    "end": "974580"
  },
  {
    "text": "where this technology originally came from is this only kind of been four or five years or so since this kind of",
    "start": "974580",
    "end": "980340"
  },
  {
    "text": "entered the sort of a consciousness of the software development community this is all originally derived from a white",
    "start": "980340",
    "end": "986190"
  },
  {
    "text": "paper that Google published around that time four or five years ago called called dapper was the name of it which",
    "start": "986190",
    "end": "991860"
  },
  {
    "text": "is their internal tool they use for keeping track of their requests inside Google's products since they published",
    "start": "991860",
    "end": "997620"
  },
  {
    "text": "that paper companies like Twitter and Eber and others ended up going and building their own tools that basically",
    "start": "997620",
    "end": "1003410"
  },
  {
    "text": "follow a similar approach so that's what we're gonna be talking about today so",
    "start": "1003410",
    "end": "1009140"
  },
  {
    "start": "1007000",
    "end": "1218000"
  },
  {
    "text": "the biggest feature of distributed tracing is the fact that all of those requests can be correlated automatically",
    "start": "1009140",
    "end": "1015500"
  },
  {
    "text": "across the different services inside your network so we have a way of essentially preserving what's known as",
    "start": "1015500",
    "end": "1020840"
  },
  {
    "text": "the trace context now I'm going to break down the different component parts of that it's essentially three identifiers",
    "start": "1020840",
    "end": "1026240"
  },
  {
    "text": "is what your trace context is the trace ID which space is like one logical",
    "start": "1026240",
    "end": "1031370"
  },
  {
    "text": "request inside your system the span ID which is the ID of a single local",
    "start": "1031370",
    "end": "1037280"
  },
  {
    "text": "operation that's happening and then the parent ID which is if I'm span number",
    "start": "1037280",
    "end": "1042949"
  },
  {
    "text": "two span number one is my parent because that's who called me so this is what",
    "start": "1042949",
    "end": "1048110"
  },
  {
    "text": "allows us to go and correlate all the activity together and I'll make that a little bit more obvious later the next",
    "start": "1048110",
    "end": "1055580"
  },
  {
    "text": "bit of distributed tracing is that every single span has the ability to capture really detailed information about the",
    "start": "1055580",
    "end": "1062810"
  },
  {
    "text": "local execution context of that request so I can append things like logs that",
    "start": "1062810",
    "end": "1068450"
  },
  {
    "text": "were being recorded in real-time I can go ahead and record tags and metadata so for instance",
    "start": "1068450",
    "end": "1074749"
  },
  {
    "text": "one really useful tag you might want to include in a span is let's suppose you have a customer facing ecommerce website",
    "start": "1074749",
    "end": "1081649"
  },
  {
    "text": "where all the customers have to log in with their account and put things in the shopping cart pretty standard I can go ahead and",
    "start": "1081649",
    "end": "1088220"
  },
  {
    "text": "include as a tag that users specific customer ID and that'll allow me to pull",
    "start": "1088220",
    "end": "1093860"
  },
  {
    "text": "up the Jager or Zipkin dashboard and I can search for all traced requests for",
    "start": "1093860",
    "end": "1099019"
  },
  {
    "text": "that specific person if I want so that's a really useful way of using tags to go ahead and make your data a little bit",
    "start": "1099019",
    "end": "1105139"
  },
  {
    "text": "more making making your trace data a little bit more sort of semantically visible everything else the next really",
    "start": "1105139",
    "end": "1112970"
  },
  {
    "text": "big feature distributed tracing is that all the reporting happens out-of-band meaning if I have a big Micro service",
    "start": "1112970",
    "end": "1120529"
  },
  {
    "text": "architecture I might have some spans finishing before others because this is",
    "start": "1120529",
    "end": "1125570"
  },
  {
    "text": "all asynchronous it's happening over the network right well a tool like Zipkin will be able to go ahead and grab those",
    "start": "1125570",
    "end": "1132649"
  },
  {
    "text": "spans as they're being reported and I'll be able to go and stitch together that timeline incrementally as that data",
    "start": "1132649",
    "end": "1138889"
  },
  {
    "text": "comes in so I don't need to worry about the ordering in which things finish the tracing engine can go ahead and still",
    "start": "1138889",
    "end": "1145190"
  },
  {
    "text": "build that story for me as it gets that data so that's what the out-of-band reporting helps us do we don't have to",
    "start": "1145190",
    "end": "1151340"
  },
  {
    "text": "worry about when things get reported to the tracing engine and lastly the",
    "start": "1151340",
    "end": "1156919"
  },
  {
    "text": "tracing engines themselves typically ship with and this is actually sort of like one of the things that you're going",
    "start": "1156919",
    "end": "1162169"
  },
  {
    "text": "to want to think about if you end up picking a distributed tracing tool is what does this part look like they'll go",
    "start": "1162169",
    "end": "1168799"
  },
  {
    "text": "ahead and offer you some really good visualization and diagnostic tools for doing things like searching for specific",
    "start": "1168799",
    "end": "1174590"
  },
  {
    "text": "types of trace data or being able to go ahead and correlate different types of",
    "start": "1174590",
    "end": "1179960"
  },
  {
    "text": "sort of similar looking requests together it's like one of the things that zip gain and jäger can do by",
    "start": "1179960",
    "end": "1185179"
  },
  {
    "text": "default is they can show you what were your highest latency of requests to this service over the past hour so you can go",
    "start": "1185179",
    "end": "1191090"
  },
  {
    "text": "and say okay why did this request run for let's say 1200 milliseconds instead of the usual 120 what caused that order",
    "start": "1191090",
    "end": "1198860"
  },
  {
    "text": "of magnitude increase and what you might see in there is there might have been a sequel query that timed out and had to",
    "start": "1198860",
    "end": "1204469"
  },
  {
    "text": "be retried or something like that so those are the types of things that racing engine can help call out to help",
    "start": "1204469",
    "end": "1210949"
  },
  {
    "text": "explain to you so these are the features of distributed tracing in general as sort of a tool class now in the real",
    "start": "1210949",
    "end": "1220639"
  },
  {
    "text": "world here is what building that trace might actually look like from the in",
    "start": "1220639",
    "end": "1225679"
  },
  {
    "text": "from the point of view of the instrumentation running inside your applications how do we actually upload",
    "start": "1225679",
    "end": "1230959"
  },
  {
    "text": "data to Zipkin well here's what might happen I have service one who receives",
    "start": "1230959",
    "end": "1237859"
  },
  {
    "text": "requests directly from an end-user running a web browser service one is going to go ahead and send a downstream",
    "start": "1237859",
    "end": "1244399"
  },
  {
    "text": "request to service two and service two might do some other work under the covers that service one doesn't really",
    "start": "1244399",
    "end": "1250249"
  },
  {
    "text": "have a lot of visibility into by default and service number three is you'd be doing a little bit more data intensive",
    "start": "1250249",
    "end": "1256219"
  },
  {
    "text": "stuff might be retrieving some data from from sequel server or or whatever",
    "start": "1256219",
    "end": "1261499"
  },
  {
    "text": "and it's gonna we're gonna go ahead and use that data to complete service two and service ones requests upstream right",
    "start": "1261499",
    "end": "1269289"
  },
  {
    "text": "so what's gonna happen is the first span that might get reported to Zipkin might",
    "start": "1269289",
    "end": "1274759"
  },
  {
    "text": "actually be the operation at the bottom of the call chain that queried a sequel server might be the first operation that",
    "start": "1274759",
    "end": "1281059"
  },
  {
    "text": "completes end to end the next operation that might complete will be the HTTP",
    "start": "1281059",
    "end": "1286879"
  },
  {
    "text": "call that caused that query to be executed in the first place essentially this call chain is kind of",
    "start": "1286879",
    "end": "1292279"
  },
  {
    "text": "unwinding itself as things finish as what's going on and you can see here you notice the span counts are going down so",
    "start": "1292279",
    "end": "1299329"
  },
  {
    "text": "the higher so most span IDs and most of these systems are actually grids but for the sake of making it easy to sort of",
    "start": "1299329",
    "end": "1305179"
  },
  {
    "text": "describe you can see the span count is going up this means that operation is happily starting later in the process",
    "start": "1305179",
    "end": "1312759"
  },
  {
    "text": "and then we see span number two completes so once service number three says this results back to service number",
    "start": "1312759",
    "end": "1319789"
  },
  {
    "text": "two service two finishes its work then delivers its results to service number one and the service one serves",
    "start": "1319789",
    "end": "1326389"
  },
  {
    "text": "its final result to your customer to the end user who's browsing your app right so this is all the data making it a",
    "start": "1326389",
    "end": "1333440"
  },
  {
    "text": "Zipkin magic of of other people's software Zipkin turns all that information into a",
    "start": "1333440",
    "end": "1342070"
  },
  {
    "start": "1338000",
    "end": "1423000"
  },
  {
    "text": "trace that looks like this well I can see that my end-to-end request time was",
    "start": "1342070",
    "end": "1347920"
  },
  {
    "text": "210 milliseconds that's how long between request number one started and request",
    "start": "1347920",
    "end": "1354130"
  },
  {
    "text": "number two finished so that's all recorded in one span and I can see that it took us you know maybe 20",
    "start": "1354130",
    "end": "1361120"
  },
  {
    "text": "milliseconds or so to go ahead and trigger service to to start service number three started pretty quickly and",
    "start": "1361120",
    "end": "1367420"
  },
  {
    "text": "our database query although it took about 40 milliseconds you know one thing",
    "start": "1367420",
    "end": "1372550"
  },
  {
    "text": "I could spot as an engineer taking a look at this diagram if I'm trying to improve our end-to-end your response",
    "start": "1372550",
    "end": "1378580"
  },
  {
    "text": "time so that's something I'm concerned about I could say you know what the fact that service number three's MVC",
    "start": "1378580",
    "end": "1385210"
  },
  {
    "text": "controller took an additional 100 milliseconds to run on top of that the",
    "start": "1385210",
    "end": "1390310"
  },
  {
    "text": "actual work the database is performing that tells me there's probably a problem right here now I'm doing something",
    "start": "1390310",
    "end": "1395920"
  },
  {
    "text": "inefficient maybe my results set I'm getting from sequel servers too big and I'm having to",
    "start": "1395920",
    "end": "1400960"
  },
  {
    "text": "go and do a lot of filtering on it or maybe I'm trying to serialize it into some format that's really expensive",
    "start": "1400960",
    "end": "1406470"
  },
  {
    "text": "whatever the case may be this guy tells me where my performance bottleneck for most of the system is makes sense so far",
    "start": "1406470",
    "end": "1414000"
  },
  {
    "text": "they're good so this is the idea in terms of what sort of output you can expect from a distributed tracing system",
    "start": "1414000",
    "end": "1420540"
  },
  {
    "text": "now here's the benefits in doing this well benefit and doing this is if I'm a",
    "start": "1420540",
    "end": "1426280"
  },
  {
    "start": "1423000",
    "end": "1458000"
  },
  {
    "text": "developer on service 1 and I want to figure out why was my request slow I now figure out it's the developers on team",
    "start": "1426280",
    "end": "1432880"
  },
  {
    "text": "three who were wrong and those are the ones you should get yelled at not me and",
    "start": "1432880",
    "end": "1437920"
  },
  {
    "text": "I'm I'm Mac chily not totally kidding either part of the idea behind this is to give all the developers on all the",
    "start": "1437920",
    "end": "1445180"
  },
  {
    "text": "teams that all work together cooperatively to serve your customers visibility into what everyone else is",
    "start": "1445180",
    "end": "1450490"
  },
  {
    "text": "doing essentially we can tell a story from the point of view of everybody who's working together on the",
    "start": "1450490",
    "end": "1456070"
  },
  {
    "text": "distributed tracing system at the same time now one thing I didn't mention",
    "start": "1456070",
    "end": "1461350"
  },
  {
    "start": "1458000",
    "end": "1491000"
  },
  {
    "text": "about this I guess said when I was showing this diagram exactly but potentially all of these different",
    "start": "1461350",
    "end": "1467740"
  },
  {
    "text": "services can be implemented using totally different like text acts if we wanted to like this could be react",
    "start": "1467740",
    "end": "1474340"
  },
  {
    "text": "this can be Scala this could be C sharp and all that data could still be understood",
    "start": "1474340",
    "end": "1479350"
  },
  {
    "text": "inside Zipkin the reason for that is the formats we use for propagating requests",
    "start": "1479350",
    "end": "1485200"
  },
  {
    "text": "between each node are standardized as a result of the open tracing standard which is what we're gonna talk about next after I go through this in terms of",
    "start": "1485200",
    "end": "1495309"
  },
  {
    "start": "1491000",
    "end": "1554000"
  },
  {
    "text": "distributed tracing tools there's at least a dozen out there might be two dozen now so there's a lot of new",
    "start": "1495309",
    "end": "1500409"
  },
  {
    "text": "entrants into this space all the time so some of the open source ones are Zipkin",
    "start": "1500409",
    "end": "1505870"
  },
  {
    "text": "and Jaeger I'm gonna be demoing Jaeger a little bit mostly because I think it's user interface is more pretty therefore it's gonna show up better in",
    "start": "1505870",
    "end": "1512350"
  },
  {
    "text": "the YouTube video everything else but on top of that there's some proprietary",
    "start": "1512350",
    "end": "1517750"
  },
  {
    "text": "solutions like data dog dynaTrace AppDynamics application insights Google",
    "start": "1517750",
    "end": "1523450"
  },
  {
    "text": "stack driver I'm sure Amazon has one too but there's there's tons of tools out there now one small problem that's",
    "start": "1523450",
    "end": "1531460"
  },
  {
    "text": "introduces though is if there's all these different tools for doing distributed tracing you don't want to be",
    "start": "1531460",
    "end": "1536500"
  },
  {
    "text": "in a position as let's say a CIO or a tech director where you have to say wow",
    "start": "1536500",
    "end": "1542260"
  },
  {
    "text": "I guess we need to go ahead and find one distributed tracing tool that's guaranteed to work consistently across",
    "start": "1542260",
    "end": "1548559"
  },
  {
    "text": "every possible tool combination we have that be a bit of a daunting task hence",
    "start": "1548559",
    "end": "1554950"
  },
  {
    "start": "1554000",
    "end": "1667000"
  },
  {
    "text": "we're open tracing comes into the picture so I work as sort of a library developer",
    "start": "1554950",
    "end": "1561130"
  },
  {
    "text": "primarily my job is to basically build open-source tools for the benefit of people who do application development so",
    "start": "1561130",
    "end": "1566950"
  },
  {
    "text": "that's sort of what my clients are well one of the things I have to worry about is I want to make sure my clients can go",
    "start": "1566950",
    "end": "1574210"
  },
  {
    "text": "ahead and trace their applications with whatever tool their company picks if you",
    "start": "1574210",
    "end": "1579279"
  },
  {
    "text": "want to use you know application insights or you want to use you know uh Yaeger or Zipkin I shouldn't have to go",
    "start": "1579279",
    "end": "1585970"
  },
  {
    "text": "ahead and marry my framework to one of those tools I should go ahead and be",
    "start": "1585970",
    "end": "1591309"
  },
  {
    "text": "able to give choice back to the end users that's primarily what open tracing is designed to do we basically provides",
    "start": "1591309",
    "end": "1598090"
  },
  {
    "text": "some tooling that is vendor-neutral and all of these distributed tracing tools like zip gun and Jaeger target this standard",
    "start": "1598090",
    "end": "1605419"
  },
  {
    "text": "and used the lexicon and some of the formats that open tracing standardizes so I can go ahead and include open",
    "start": "1605419",
    "end": "1614570"
  },
  {
    "text": "tracing bindings to something like asp.net core middleware or akkad net",
    "start": "1614570",
    "end": "1619879"
  },
  {
    "text": "middleware or to rabbitmq if I want something like that and all of your",
    "start": "1619879",
    "end": "1624889"
  },
  {
    "text": "driver code you use to report data back to Zipkin can be programmed against that API therefore you don't have to",
    "start": "1624889",
    "end": "1632119"
  },
  {
    "text": "necessarily worry about as you don't necessarily have to worry about whether or not you know there's a Zipkin binding",
    "start": "1632119",
    "end": "1638059"
  },
  {
    "text": "for asp.net core as long as there's an open tracing one and there is there's a piece of middleware that does support it",
    "start": "1638059",
    "end": "1643429"
  },
  {
    "text": "you're good to go and you can go ahead and bring whatever tool you want but the most important",
    "start": "1643429",
    "end": "1648499"
  },
  {
    "text": "thing the open tracing standard does is this bottom bit down there the magic to",
    "start": "1648499",
    "end": "1653720"
  },
  {
    "text": "making open to making distributed tracing work is the ability to correlate which requests triggered which so we can",
    "start": "1653720",
    "end": "1660289"
  },
  {
    "text": "go ahead and stitch them all together on that graph at the end and that's what we call the propagation format is what this",
    "start": "1660289",
    "end": "1666169"
  },
  {
    "text": "is well I guess I needed to find some terms real quick so the first term is a",
    "start": "1666169",
    "end": "1673999"
  },
  {
    "start": "1667000",
    "end": "1712000"
  },
  {
    "text": "trace what so a single trace represents one work end to end requests in your entire system if one end user requests",
    "start": "1673999",
    "end": "1682279"
  },
  {
    "text": "ends up spawning let's say a hundred calls to different microservices each one of those calls",
    "start": "1682279",
    "end": "1688039"
  },
  {
    "text": "will be part of the same trace right so it's everything that correlates back to something we're delivering to an end",
    "start": "1688039",
    "end": "1693499"
  },
  {
    "text": "user that's a trace and a trace consists of multiple spans a trace consists of",
    "start": "1693499",
    "end": "1702350"
  },
  {
    "text": "multiple spans so a span can be produced by multiple distributed services",
    "start": "1702350",
    "end": "1708739"
  },
  {
    "text": "potentially so spans can be produced by any part of your system and they span",
    "start": "1708739",
    "end": "1714200"
  },
  {
    "start": "1712000",
    "end": "1743000"
  },
  {
    "text": "itself as a single logical unit of work essentially so like one asynchronous",
    "start": "1714200",
    "end": "1719539"
  },
  {
    "text": "method if you're using the TPL and c-sharp that would be a span potentially and spans can have parents and children",
    "start": "1719539",
    "end": "1726799"
  },
  {
    "text": "and siblings so sibling spans run concurrently the running in parallel and",
    "start": "1726799",
    "end": "1732080"
  },
  {
    "text": "two different places inside your network somewhere a child span you is will always starts after its parent",
    "start": "1732080",
    "end": "1739070"
  },
  {
    "text": "started that's sort of that sort of the relationship between them too poorly the",
    "start": "1739070",
    "end": "1744200"
  },
  {
    "start": "1743000",
    "end": "1775000"
  },
  {
    "text": "span context is world that correlation data goes so this is basically what",
    "start": "1744200",
    "end": "1749210"
  },
  {
    "text": "defines the trace ID the parent ID and the span ID and this is the thing that",
    "start": "1749210",
    "end": "1754700"
  },
  {
    "text": "the open tracing standard helps us sort of robustly define in a way that can be communicated across process boundaries",
    "start": "1754700",
    "end": "1761570"
  },
  {
    "text": "and across different runtimes and frameworks and then we have the tracer the tracer is the driver that you use to",
    "start": "1761570",
    "end": "1769340"
  },
  {
    "text": "actually report data back to something like Zipkin or Yaeger that's fundamentally what it is so this is what",
    "start": "1769340",
    "end": "1779030"
  },
  {
    "text": "so pedda bridge my company we developed a high-performance a zip gun tracing engine for some of our our users and",
    "start": "1779030",
    "end": "1785390"
  },
  {
    "text": "this is what it looks like from from a code perspective the eye tracer",
    "start": "1785390",
    "end": "1790490"
  },
  {
    "text": "interface is part of the open standard DLL that you can install as a new get package so that's sort of the standard",
    "start": "1790490",
    "end": "1796580"
  },
  {
    "text": "that like a tool like the open tracing middleware for asp.net core we're basically programmed against that",
    "start": "1796580",
    "end": "1802700"
  },
  {
    "text": "interface and my specific implementation of that comes from my peda bridge",
    "start": "1802700",
    "end": "1808430"
  },
  {
    "text": "tracing Zipkin nougat package and so I go ahead and spin up a Zipkin tracer and",
    "start": "1808430",
    "end": "1813470"
  },
  {
    "text": "I pass in this little HTTP URL right here and what's gonna happen is every",
    "start": "1813470",
    "end": "1819380"
  },
  {
    "text": "time I go and build a span like this while I'm passing in the name of the operation I'm gonna execute so the name",
    "start": "1819380",
    "end": "1826790"
  },
  {
    "text": "of your operation in like a web application might be the name of the web method you're using so it might be you",
    "start": "1826790",
    "end": "1832400"
  },
  {
    "text": "know slash API slash items post or something like that it might be the name",
    "start": "1832400",
    "end": "1838460"
  },
  {
    "text": "your operation there so this is what we're gonna use to go ahead and identify what was happening inside our system and",
    "start": "1838460",
    "end": "1845690"
  },
  {
    "text": "then I could pass in some tags some metadata I can go and use to search this and then down here if I have a another",
    "start": "1845690",
    "end": "1854930"
  },
  {
    "text": "active span so basically let's say there's another operation that was already running at the time I started",
    "start": "1854930",
    "end": "1860270"
  },
  {
    "text": "this spin I can go and say you know what this span I created right here is actually a child of that one and that",
    "start": "1860270",
    "end": "1866810"
  },
  {
    "text": "way those two will be correlated together now on graff and then when I start this spin",
    "start": "1866810",
    "end": "1872960"
  },
  {
    "text": "I'm going to go ahead and finish it here and when I call that dot finish it's essentially like calling disposed on I",
    "start": "1872960",
    "end": "1879330"
  },
  {
    "text": "disposable object is essentially the same idea here that's going to go ahead and cause this span to get reported",
    "start": "1879330",
    "end": "1885060"
  },
  {
    "text": "asynchronously to the Zipkin server living at this URL does that make sense so far not good",
    "start": "1885060",
    "end": "1893360"
  },
  {
    "start": "1893000",
    "end": "1968000"
  },
  {
    "text": "now from a network perspective here in terms of how are we actually passing",
    "start": "1893360",
    "end": "1899460"
  },
  {
    "text": "that spam context data around what I'll probably end up doing inside an HTTP",
    "start": "1899460",
    "end": "1904590"
  },
  {
    "text": "system is I would add some additional headers to each of my requests I'm sending downstream so this might be",
    "start": "1904590",
    "end": "1910050"
  },
  {
    "text": "something you set up when you create your HTTP client I'm gonna pass in a header that describes the trace ID the",
    "start": "1910050",
    "end": "1918360"
  },
  {
    "text": "span ID and the parent ID of the previous request and so when I go when I",
    "start": "1918360",
    "end": "1923880"
  },
  {
    "text": "receive that request downstream I can go ahead and tag the next span I create as",
    "start": "1923880",
    "end": "1929340"
  },
  {
    "text": "being a child of the one that was described in that header there and in fact there's a w3c standard to go ahead",
    "start": "1929340",
    "end": "1937290"
  },
  {
    "text": "and build this tracing propagation directly into the HTTP spec pretty soon as there's a working group around that",
    "start": "1937290",
    "end": "1943290"
  },
  {
    "text": "photo time being and that's largely built around the the header formats that Zipkin uses specifically so that's",
    "start": "1943290",
    "end": "1949980"
  },
  {
    "text": "something that you'll see coming soon and it's also possible that tools like asp.net core might automatically begin",
    "start": "1949980",
    "end": "1956700"
  },
  {
    "text": "propagating that sort of data downstream in a future version con depends on where the standard goes but there's a lot of",
    "start": "1956700",
    "end": "1963330"
  },
  {
    "text": "work being done around this because this is such a common problem that so many developers have so for instance these",
    "start": "1963330",
    "end": "1972030"
  },
  {
    "start": "1968000",
    "end": "2013000"
  },
  {
    "text": "are what the sort of current B 3 B 3 is the format but Zipkin uses for representing this data internally any",
    "start": "1972030",
    "end": "1977940"
  },
  {
    "text": "tool could technically use it but this is just what Zipkin standardized on so these are the HTTP headers you would see",
    "start": "1977940",
    "end": "1984420"
  },
  {
    "text": "if you went ahead and we're sitting in the middle of one of Twitter's data centers potentially and intercepted one of their requests between micro-services",
    "start": "1984420",
    "end": "1991230"
  },
  {
    "text": "you might see these headers go and appear in one of them there and this would go ahead and ascribe this is the",
    "start": "1991230",
    "end": "1998250"
  },
  {
    "text": "name of this operation this is the name of the operation that came before this one",
    "start": "1998250",
    "end": "2003260"
  },
  {
    "text": "and this is the current operation and then this indicates if we're sampling data or not basically so right now we're",
    "start": "2003260",
    "end": "2009650"
  },
  {
    "text": "not sampling anything so the best",
    "start": "2009650",
    "end": "2014960"
  },
  {
    "start": "2013000",
    "end": "2172000"
  },
  {
    "text": "practices so far for essentially doing distributed tracing inside your applications first as you want to go",
    "start": "2014960",
    "end": "2021740"
  },
  {
    "text": "ahead and standardize on those carrier formats so they just show it on the previous screen how are we going to go ahead and propagate information from one",
    "start": "2021740",
    "end": "2028310"
  },
  {
    "text": "service to another so if you're using predominantly HTTP services the easiest",
    "start": "2028310",
    "end": "2033410"
  },
  {
    "text": "way to do that is to define some custom headers and that's also that's also hence why the w3 standards being",
    "start": "2033410",
    "end": "2039320"
  },
  {
    "text": "developed now if you need to use something like let's say Kafka or you",
    "start": "2039320",
    "end": "2045140"
  },
  {
    "text": "want two inch or we want to use as your service bus or Aquanet what you'd want to do in that case is probably go and",
    "start": "2045140",
    "end": "2051350"
  },
  {
    "text": "define a little header dictionary that's at the front of every one of your messages you put on to your message bus",
    "start": "2051350",
    "end": "2056510"
  },
  {
    "text": "and then the consumer that reads them downstream would look for those headers and use that to create a span using the",
    "start": "2056510",
    "end": "2063260"
  },
  {
    "text": "you know similar API calls to widest it on-screen that's what you want to do there if you",
    "start": "2063260",
    "end": "2069500"
  },
  {
    "text": "can use tracing at the infrastructure level you should so if you have the ability to see let's say inject a tracer",
    "start": "2069500",
    "end": "2075560"
  },
  {
    "text": "into the asp.net core middleware so you can go ahead and start capturing information before it gets handed off to",
    "start": "2075560",
    "end": "2081590"
  },
  {
    "text": "your controller that'd be really useful for grabbing things like the authentication state of the user for",
    "start": "2081590",
    "end": "2087050"
  },
  {
    "text": "instance that's a really good practice to engage in and make sure you have more context available by default and every",
    "start": "2087050",
    "end": "2093679"
  },
  {
    "text": "single request that's a good practice open tracing has a feature called a",
    "start": "2093679",
    "end": "2099170"
  },
  {
    "text": "scope manager which is really useful this is a way of automatically figuring out what's the span that came before",
    "start": "2099170",
    "end": "2105110"
  },
  {
    "text": "this one so for instance in a c-sharp and dotnet we have a scope manager that",
    "start": "2105110",
    "end": "2111710"
  },
  {
    "text": "uses the async local context for doing you know async a weight and so forth we can basically figure out what was the",
    "start": "2111710",
    "end": "2118130"
  },
  {
    "text": "span that came before us in that call chain automatically so that'd be an example of a scope manager",
    "start": "2118130",
    "end": "2123290"
  },
  {
    "text": "implementation and then the last bit if you can have your logging infrastructure",
    "start": "2123290",
    "end": "2128830"
  },
  {
    "text": "automatically and well at the time you write a log you can automatically append that to a span that whatever the current",
    "start": "2128830",
    "end": "2135890"
  },
  {
    "text": "span is that's a good practice to essentially what we're doing is we're trying to put as much information into those context",
    "start": "2135890",
    "end": "2142520"
  },
  {
    "text": "as possible so when someone needs to go through and debug a requests that failed",
    "start": "2142520",
    "end": "2147590"
  },
  {
    "text": "or timed out they have all that information from all the other processes involved in the food chain along the way",
    "start": "2147590",
    "end": "2153050"
  },
  {
    "text": "we want to have as much context as possible in other words so on that note",
    "start": "2153050",
    "end": "2158540"
  },
  {
    "text": "I'm gonna go ahead and show a little bit of code and getting a little bit more detail on some of the instrumentation",
    "start": "2158540",
    "end": "2163910"
  },
  {
    "text": "and we'll take a look at the Jager UI and a brief demo as well so let's do",
    "start": "2163910",
    "end": "2169130"
  },
  {
    "text": "that no plenty of time for questions after that all right grab that here all",
    "start": "2169130",
    "end": "2179060"
  },
  {
    "start": "2172000",
    "end": "2828000"
  },
  {
    "text": "right so I think I'll start with a really simple example actually so we're",
    "start": "2179060",
    "end": "2188810"
  },
  {
    "text": "gonna be using Jager here and we're using Aqua Net which is us a subject for",
    "start": "2188810",
    "end": "2194390"
  },
  {
    "text": "a different talk at some point in the future all you need to know is actors and Akkad I network by passing messages",
    "start": "2194390",
    "end": "2200450"
  },
  {
    "text": "to each other and so I'm basically recording a span every time an actor receives a message that's basically how",
    "start": "2200450",
    "end": "2205820"
  },
  {
    "text": "this demo is gonna work and if I scroll",
    "start": "2205820",
    "end": "2211130"
  },
  {
    "text": "down here make sure you know what I guess I'll show this sample instead",
    "start": "2211130",
    "end": "2216760"
  },
  {
    "text": "we'll do the complicated one why not right all right here we go what's gonna",
    "start": "2216760",
    "end": "2225110"
  },
  {
    "text": "happen here when I spin this up is I'm basically creating a four process",
    "start": "2225110",
    "end": "2230330"
  },
  {
    "text": "cluster of akkad onit nodes that are basically all randomly screaming at each other and we're doing that intentionally",
    "start": "2230330",
    "end": "2237590"
  },
  {
    "text": "to create a noisy looking trace is what we're doing yeah there you go so all these nodes in the cluster are",
    "start": "2237590",
    "end": "2244130"
  },
  {
    "text": "all trying to send pings back and forth to each other looks like we're slowing down a little",
    "start": "2244130",
    "end": "2249740"
  },
  {
    "text": "bit now there we go all right so we get the idea since I'm using docker for",
    "start": "2249740",
    "end": "2256640"
  },
  {
    "text": "Windows and I'm concerned about running out of memory on that tiny little hyper-v VM I'm gonna pull the plug here",
    "start": "2256640",
    "end": "2261850"
  },
  {
    "text": "and then I can pull up the Jaeger user interface",
    "start": "2261850",
    "end": "2268480"
  },
  {
    "text": "so the first thing I can look at and set a tool like Jager let me blow this up a little bit just to make it easier to",
    "start": "2268790",
    "end": "2274760"
  },
  {
    "text": "read well not what I meant to do alright",
    "start": "2274760",
    "end": "2281030"
  },
  {
    "text": "there we go what I can do in a tool like Jager and of course now I can't read that what I can do in a tool like Jager",
    "start": "2281030",
    "end": "2288650"
  },
  {
    "text": "is I can go ahead and see all the different services that are participating by their address inside",
    "start": "2288650",
    "end": "2294890"
  },
  {
    "text": "inside my network here so if you have let's say a hundred web servers you'd",
    "start": "2294890",
    "end": "2300290"
  },
  {
    "text": "have a list of a hundred potential services here even if they're running different services potentially so I can",
    "start": "2300290",
    "end": "2306020"
  },
  {
    "text": "say okay I want to take a look at all the requests that pass through localhost two five five one and I want to go ahead",
    "start": "2306020",
    "end": "2314360"
  },
  {
    "text": "and see if there were if there was any requests they had a duration let's say",
    "start": "2314360",
    "end": "2320380"
  },
  {
    "text": "minimum duration of 125 milliseconds looks like I gotta do em s no results",
    "start": "2320380",
    "end": "2328490"
  },
  {
    "text": "that's good cuz my system is nice and fast yeah that right no looks like my",
    "start": "2328490",
    "end": "2334520"
  },
  {
    "text": "system was just fast well how about that I'll take it so I'm gonna dig in here into this trace",
    "start": "2334520",
    "end": "2340810"
  },
  {
    "text": "I'm gonna go and collapse everything down real quick so this is the first operation that kind of starts my system",
    "start": "2340810",
    "end": "2347630"
  },
  {
    "text": "off here it's this little ping er actor this actor basically runs on a clock and sends a message to itself it's gonna end",
    "start": "2347630",
    "end": "2354470"
  },
  {
    "text": "up broadcasting to other nodes in the cluster that's fundamentally how it works what I'm gonna do here is I can go",
    "start": "2354470",
    "end": "2362510"
  },
  {
    "text": "ahead and see that I recorded a log event inside this trace that basically just shows me here's the C sharp",
    "start": "2362510",
    "end": "2368480"
  },
  {
    "text": "name of the of the message I received generate ping name of it and I go and",
    "start": "2368480",
    "end": "2374540"
  },
  {
    "text": "see some of my tags I can see that this is the actor I can see what the message type was and I can go ahead and see like",
    "start": "2374540",
    "end": "2381440"
  },
  {
    "text": "who the sender of this message was if I open up my graph I can go ahead and see",
    "start": "2381440",
    "end": "2388610"
  },
  {
    "text": "the ice this message then made it to the slash user slash random actor another",
    "start": "2388610",
    "end": "2393980"
  },
  {
    "text": "this is another span inside my system and if I go ahead and take a look here I see I've got a couple logs this time",
    "start": "2393980",
    "end": "2401940"
  },
  {
    "text": "once that data look like and I can go ahead and see down here that some of the default acha dotnet logs were captured",
    "start": "2401940",
    "end": "2408900"
  },
  {
    "text": "automatically so this little info message and everything else is a log that I'd normally just write out to the",
    "start": "2408900",
    "end": "2414630"
  },
  {
    "text": "console or to elastic or something like that so I'm actually appending that to this trace then here's where things get",
    "start": "2414630",
    "end": "2421980"
  },
  {
    "text": "kind of fun I went ahead and from this node localhost to five five one I went",
    "start": "2421980",
    "end": "2429390"
  },
  {
    "text": "ahead and I broadcast I copy this message let me straight stretch that out bit I broadcasts to copy this message in",
    "start": "2429390",
    "end": "2436890"
  },
  {
    "text": "parallel to localhost three three seven two zero so another node running inside",
    "start": "2436890",
    "end": "2444299"
  },
  {
    "text": "the same network and I also broadcast it to localhost two but five two at the same time so one node broadcast to copy",
    "start": "2444299",
    "end": "2451380"
  },
  {
    "text": "this message to two other nodes so now I have two traces running in parallel for the same message and if I keep going",
    "start": "2451380",
    "end": "2457410"
  },
  {
    "text": "down this rabbit hole here because this graph is intentionally noisy we wrote this to stress test the driver that we",
    "start": "2457410",
    "end": "2463920"
  },
  {
    "text": "built so that's kind of what it's for I can go ahead and follow this all the way down to its logical conclusion so this",
    "start": "2463920",
    "end": "2470700"
  },
  {
    "text": "helps me do for instance if I want to go ahead and see if there was an undeliverable message somewhere inside",
    "start": "2470700",
    "end": "2476369"
  },
  {
    "text": "this this application I could go ahead and search if I wanted to let's see let",
    "start": "2476369",
    "end": "2483599"
  },
  {
    "text": "me take a step back here I can go and search for and pull that up well it's",
    "start": "2483599",
    "end": "2494910"
  },
  {
    "text": "not giving me the option to do that there oh here we go system",
    "start": "2494910",
    "end": "2501529"
  },
  {
    "text": "slashed okay it looks like I already found one good this actor right here you can't may not be able to see it it's",
    "start": "2501950",
    "end": "2507630"
  },
  {
    "text": "called slash system such dead letters it means there was an undeliverable message somewhere inside my system so this is",
    "start": "2507630",
    "end": "2512760"
  },
  {
    "text": "like an error path essentially if I go and click into here and I take a look at",
    "start": "2512760",
    "end": "2518549"
  },
  {
    "text": "the sender I take a look at the logs I can see that this message was sent to an",
    "start": "2518549",
    "end": "2525720"
  },
  {
    "text": "actor at location fake actor inside my system I can reasonably assume that the",
    "start": "2525720",
    "end": "2531720"
  },
  {
    "text": "programmer who worked on that probably screwed that up just just judging inferring from the details",
    "start": "2531720",
    "end": "2537260"
  },
  {
    "text": "there but if I really wanted to go ahead and get a story from one of my and you from one of my other developers about",
    "start": "2537260",
    "end": "2543110"
  },
  {
    "text": "why did this request time out looking for a dead letter message would be one",
    "start": "2543110",
    "end": "2548120"
  },
  {
    "text": "of the symptoms I'd go and check for if a message made it the dead letters it means nobody processed it therefore that",
    "start": "2548120",
    "end": "2554360"
  },
  {
    "text": "would probably be something that would cause a timeout further upstream I can go dig into the details that racing tool",
    "start": "2554360",
    "end": "2560960"
  },
  {
    "text": "like Yaeger gives me to help figure that out in a matter of minutes we had one one user a major financial customer who",
    "start": "2560960",
    "end": "2570700"
  },
  {
    "text": "basically had spent weeks trying to debug a big academic cluster and their issue was was that after a certain",
    "start": "2570700",
    "end": "2576950"
  },
  {
    "text": "period of time requests started timing out more and more often inside their system and they couldn't figure out why",
    "start": "2576950",
    "end": "2582760"
  },
  {
    "text": "well it turns out they were locking up a bunch of actors the really expensive",
    "start": "2582760",
    "end": "2587810"
  },
  {
    "text": "sort of bit of math that they were doing and as they kept sending more requests those requests started stacking up and",
    "start": "2587810",
    "end": "2594230"
  },
  {
    "text": "the actor couldn't respond within a certain time out window so they were able to use that data whether they got",
    "start": "2594230",
    "end": "2600050"
  },
  {
    "text": "within a matter of you know let's say a couple hours I'm using of using a tracing tool like this and figure out",
    "start": "2600050",
    "end": "2605300"
  },
  {
    "text": "they needed to restructure their actors rather than trying to change timeout settings everywhere because the problem",
    "start": "2605300",
    "end": "2611030"
  },
  {
    "text": "was architectural wasn't a configuration issue in other words so these are the",
    "start": "2611030",
    "end": "2616190"
  },
  {
    "text": "types of things that distributed tracing can make less expensive is they give you a complete story from the perspective of",
    "start": "2616190",
    "end": "2622130"
  },
  {
    "text": "every part in your system that participated on what happened and when did it happen in the processing chain",
    "start": "2622130",
    "end": "2629020"
  },
  {
    "text": "makes sense good now just a little bit of code before I take some questions let's see",
    "start": "2629020",
    "end": "2640540"
  },
  {
    "text": "all right just a little bit of code in terms of some of the open tracing instrumentation if I go ahead and I",
    "start": "2640930",
    "end": "2649280"
  },
  {
    "text": "scroll down here you know highlight this actually let me zoom in since I think Visual Studio will let me do this",
    "start": "2649280",
    "end": "2655190"
  },
  {
    "text": "without breaking text wrapping any of that fun stuff here we go this is an",
    "start": "2655190",
    "end": "2662390"
  },
  {
    "text": "example here of being able to go and append log messages to the current span",
    "start": "2662390",
    "end": "2669100"
  },
  {
    "text": "I'm busy taking whatever the active span is and I'm calling this dot log method",
    "start": "2669140",
    "end": "2674150"
  },
  {
    "text": "on it and just sending a string its way that'll go ahead and take my formatted log message and we'll go and",
    "start": "2674150",
    "end": "2679940"
  },
  {
    "text": "automatically append that to the current operation in progress now if I want to",
    "start": "2679940",
    "end": "2685670"
  },
  {
    "text": "go ahead and log a sub operation if I want I can go ahead and do context I get",
    "start": "2685670",
    "end": "2696380"
  },
  {
    "text": "instrumentation this is a naka dotnet API the instrumentation bit called the",
    "start": "2696380",
    "end": "2702770"
  },
  {
    "text": "tracer field span will call NDC op and I",
    "start": "2702770",
    "end": "2712520"
  },
  {
    "text": "can go ahead and say start is active now",
    "start": "2712520",
    "end": "2717770"
  },
  {
    "text": "open up this using block and I'll stick this in here what this is gonna do this",
    "start": "2717770",
    "end": "2726140"
  },
  {
    "text": "using block is this gonna create a new child span that is a child of whatever",
    "start": "2726140",
    "end": "2732500"
  },
  {
    "text": "the active span is so this'll show up underneath whatever the current span is on a histogram and I can go ahead and",
    "start": "2732500",
    "end": "2738680"
  },
  {
    "text": "add some log messages or tags or whatever to it and then when I'm done when that disposing blog exits that",
    "start": "2738680",
    "end": "2745220"
  },
  {
    "text": "child span will be marked as complete the amount of time it took between when that span started and stopped will be",
    "start": "2745220",
    "end": "2750770"
  },
  {
    "text": "recorded on the histogram and it'll be uploaded to Zipkin eventually and that's",
    "start": "2750770",
    "end": "2757580"
  },
  {
    "text": "where we go ahead and get these little performance metrics here like we can see this operation took I guess it'd be",
    "start": "2757580",
    "end": "2764060"
  },
  {
    "text": "1/100 of a millisecond so that's because this is all in memory message processing",
    "start": "2764060",
    "end": "2769100"
  },
  {
    "text": "for the most part pretty fast but that's some that's some of the data you can go ahead and get from this and this will",
    "start": "2769100",
    "end": "2775220"
  },
  {
    "text": "help build up sort of a picture of what the end and processing time took as well now the last thing I should mention",
    "start": "2775220",
    "end": "2780710"
  },
  {
    "text": "about some of the features of the distributed tracing tools you might look at overwhelmingly all of them support",
    "start": "2780710",
    "end": "2786470"
  },
  {
    "text": "some form of sampling because as you are probably getting sort of an idea of now",
    "start": "2786470",
    "end": "2791780"
  },
  {
    "text": "some of this information can be quite verbose and quite text-heavy therefore in a really busy production",
    "start": "2791780",
    "end": "2797030"
  },
  {
    "text": "system you don't want to go ahead and slam all of your infrastructure with lots of logs and text because",
    "start": "2797030",
    "end": "2802619"
  },
  {
    "text": "over the network everywhere therefore tools like Jaeger Zipkin and even the off-the-shelf commercial ones all",
    "start": "2802619",
    "end": "2808950"
  },
  {
    "text": "support some form of being able to say only give me like one percent of all requests or only give me requests that",
    "start": "2808950",
    "end": "2816390"
  },
  {
    "text": "start with this HTTP verb or something else so you have the ability to kind of constrain how much information actually",
    "start": "2816390",
    "end": "2823079"
  },
  {
    "text": "gets produced by your tracing tools so that being said I'll eventually figure",
    "start": "2823079",
    "end": "2830279"
  },
  {
    "start": "2828000",
    "end": "2878000"
  },
  {
    "text": "out how to pull up PowerPoint again here there we go that will go ahead and do it for or for our presentation today if",
    "start": "2830279",
    "end": "2837869"
  },
  {
    "text": "you're interested in learning more about distributed tracing here are some resources you can look up you can go to the open tracing project they have some",
    "start": "2837869",
    "end": "2844200"
  },
  {
    "text": "good information on their site you can also check out Zipkin and you can take a look at some other projects on github",
    "start": "2844200",
    "end": "2849809"
  },
  {
    "text": "and if you have any questions about open tracing or distributed tracing in general I think I have a few more",
    "start": "2849809",
    "end": "2856619"
  },
  {
    "text": "minutes before the official lunch break starts so I'd be more than happy to take any questions you might have but otherwise thank you very much for",
    "start": "2856619",
    "end": "2863369"
  },
  {
    "text": "attending [Applause]",
    "start": "2863369",
    "end": "2868969"
  },
  {
    "text": "okay any questions yes yeah I should be",
    "start": "2868969",
    "end": "2886229"
  },
  {
    "start": "2878000",
    "end": "3030000"
  },
  {
    "text": "able to go in filter let's see so I can go ahead and do it by the tag right here so let me try actor dot receive dot",
    "start": "2886229",
    "end": "2897019"
  },
  {
    "text": "sender equals system dead letters let me give that a try I have to remember if I",
    "start": "2897019",
    "end": "2905190"
  },
  {
    "text": "got my tag name right but yeah you can be you can basically filter there by those sorts of things or session IDs use",
    "start": "2905190",
    "end": "2914430"
  },
  {
    "text": "your IDs that sort of thing so like one really common use of tags that lie are a lot of our like production users will do",
    "start": "2914430",
    "end": "2920549"
  },
  {
    "text": "is they'll tag the environment you're running inside of there so it's like is this your if you're using kubernetes you might have like a live and a dark live",
    "start": "2920549",
    "end": "2927269"
  },
  {
    "text": "they want to go ahead and see like oh what are the dark live that's gonna be running the next version of our code do for the same request so these things",
    "start": "2927269",
    "end": "2934410"
  },
  {
    "text": "like that for it yeah there's each one of these tools as",
    "start": "2934410",
    "end": "2940349"
  },
  {
    "text": "this little own query syntax for doing that inside this box here and I'm I'm less familiar with that that I am",
    "start": "2940349",
    "end": "2945539"
  },
  {
    "text": "writing drivers for the things but yeah yeah you can go ahead and basic do like and or type stuff to search it yep and I",
    "start": "2945539",
    "end": "2954180"
  },
  {
    "text": "should also mention that the backing stores are some of these tracing tools use Yaeger for instance has the ability",
    "start": "2954180",
    "end": "2959309"
  },
  {
    "text": "to save all of its span data directly to elastic if you wanted to go ahead and use more detailed queries on that if you",
    "start": "2959309",
    "end": "2964589"
  },
  {
    "text": "wanted to yeah any other questions yes in back",
    "start": "2964589",
    "end": "2969949"
  },
  {
    "text": "yeah bass it's one operation within one microservice",
    "start": "2974140",
    "end": "2979050"
  },
  {
    "text": "ah the currents man ID is going to be the parent for the next operation",
    "start": "2988589",
    "end": "2993719"
  },
  {
    "text": "downstream yeah so yeah a base a sort of",
    "start": "2993719",
    "end": "2999749"
  },
  {
    "text": "it depends on basically how you want to use that propagation data because technically it might be possible for a span to actually be like sent over the",
    "start": "2999749",
    "end": "3006949"
  },
  {
    "text": "network and complete it on the other side potentially so using like let's say a queuing system like rabbit you might",
    "start": "3006949",
    "end": "3012349"
  },
  {
    "text": "want to go ahead and start a span when the message gets flushed on one end close that spam when it gets processed on the other yeah so basically so if I",
    "start": "3012349",
    "end": "3028099"
  },
  {
    "text": "go ahead and pull up the open tracing stuff real fast just to show you for completeness if I got rid of this using",
    "start": "3028099",
    "end": "3035359"
  },
  {
    "start": "3030000",
    "end": "3395000"
  },
  {
    "text": "block here which is doing this for me automatically so I'm gonna delete that and I guess I need a semicolon somewhere",
    "start": "3035359",
    "end": "3042910"
  },
  {
    "text": "so when I call us I think I have one extra parenthesis there we go so when I",
    "start": "3042910",
    "end": "3048499"
  },
  {
    "text": "call start that basically turns the timer on for the span when I call down",
    "start": "3048499",
    "end": "3053779"
  },
  {
    "text": "here new span dot",
    "start": "3053779",
    "end": "3059079"
  },
  {
    "text": "span dot finish that basically completes the timer down there so what I might do",
    "start": "3059079",
    "end": "3065749"
  },
  {
    "text": "is I might go ahead and rehydrate this span on the other side of the network by doing let's see I'm just not gonna",
    "start": "3065749",
    "end": "3075709"
  },
  {
    "text": "bother formatting that what I might go ahead and do is go grab my tracer again",
    "start": "3075709",
    "end": "3083259"
  },
  {
    "text": "tracer build span foo I can say as child",
    "start": "3083439",
    "end": "3090079"
  },
  {
    "text": "of and I go ahead and pass in a new span span context there so I guess actually technically I would I wouldn't be able",
    "start": "3090079",
    "end": "3096859"
  },
  {
    "text": "to go ahead and start a span on one end and complete it on the other because that start time doesn't get propagated so you do you would want to go ahead and",
    "start": "3096859",
    "end": "3103489"
  },
  {
    "text": "have one span of one side for the start and another on the end for when you receive it and that transit time in the",
    "start": "3103489",
    "end": "3108739"
  },
  {
    "text": "middle will just be the Delta between one one if one operation ended and one another started and you'd see that show",
    "start": "3108739",
    "end": "3115130"
  },
  {
    "text": "up on the graph and Jaeger yeah good question any others yeah",
    "start": "3115130",
    "end": "3121778"
  },
  {
    "text": "you know there there is probably so I personally haven't looked at it there's probably an open tracing instrumentation",
    "start": "3127559",
    "end": "3134380"
  },
  {
    "text": "for elasticsearch out there that'll just do all the correlation that you need in Cabana somewhere so that someone's",
    "start": "3134380",
    "end": "3140200"
  },
  {
    "text": "probably got an adapter driver that does that for doing some of that correlation work already yeah so if you already have",
    "start": "3140200",
    "end": "3146440"
  },
  {
    "text": "dashboards and the thing that you're looking to get out of open tracing is let's say a more reliable way of correlating stuff together other than",
    "start": "3146440",
    "end": "3152650"
  },
  {
    "text": "timestamps the sort of the schema that open tracing uses can be very helpful there make sense yeah",
    "start": "3152650",
    "end": "3161279"
  },
  {
    "text": "what are some of the advantages of collecting this data in the application code versus a sidecar pattern so I'm",
    "start": "3168030",
    "end": "3174330"
  },
  {
    "text": "actually under the covers you're doing both so I'm using the sidecar bit under the under the covers with a with a tool",
    "start": "3174330",
    "end": "3180900"
  },
  {
    "text": "that our company developed that basically automatically captures information from the background and that's kind of what I was mentioning",
    "start": "3180900",
    "end": "3186780"
  },
  {
    "text": "earlier if you can inject that tracings if that tracing code directly until I'd say your asp.net middleware that's",
    "start": "3186780",
    "end": "3193440"
  },
  {
    "text": "probably going to be much more useful than doing it directly and you're like why in a business code right you don't",
    "start": "3193440",
    "end": "3198990"
  },
  {
    "text": "want necessarily clutter up your business logic with instrumentation code right that's good that's gonna be",
    "start": "3198990",
    "end": "3204750"
  },
  {
    "text": "technical debt you might have to pay later in the future right the advantage of putting that instrumentation code",
    "start": "3204750",
    "end": "3210480"
  },
  {
    "text": "right there is I can go ahead and grab contextual information that my infrastructure doesn't know about for",
    "start": "3210480",
    "end": "3216210"
  },
  {
    "text": "instance so let's say if I have something that's very contextual this",
    "start": "3216210",
    "end": "3222120"
  },
  {
    "text": "customer doesn't have enough funds to go ahead and complete checkout right that's something that you know I probably am",
    "start": "3222120",
    "end": "3227880"
  },
  {
    "text": "not gonna be able to discern from asp.net I might want to go ahead and have some way of passing that",
    "start": "3227880",
    "end": "3233670"
  },
  {
    "text": "information into my tracing system so if you can come up with a let's say a",
    "start": "3233670",
    "end": "3238980"
  },
  {
    "text": "cross-cutting way of injecting the ability to capture that context in your infrastructure you should but in some",
    "start": "3238980",
    "end": "3245820"
  },
  {
    "text": "cases you might just have to bite the bullet and just call a log method on a span right it's kind of you got to go",
    "start": "3245820",
    "end": "3252240"
  },
  {
    "text": "ahead and pick what's gonna be the most practical route for getting that done even if it does introduce maybe a little bit of technical debt or looks ugly",
    "start": "3252240",
    "end": "3259520"
  },
  {
    "text": "whatever whatever the case may be right does that make sense yeah you're welcome",
    "start": "3259520",
    "end": "3264530"
  },
  {
    "text": "any other questions yeah",
    "start": "3264530",
    "end": "3271130"
  },
  {
    "text": "yeah yeah so your question if I can go ahead and summarize it is when you've",
    "start": "3282200",
    "end": "3287240"
  },
  {
    "text": "got teams using different tools like let's say not everybody is using acha dotnet let's say we got one team using",
    "start": "3287240",
    "end": "3293360"
  },
  {
    "text": "web services that are built in HTTP and that service writes out to Kafka and then you've got a bunch of folks using I",
    "start": "3293360",
    "end": "3300230"
  },
  {
    "text": "don't know Scala agents sitting on the of behind the scenes there how do you make that work what you want to standardize on is",
    "start": "3300230",
    "end": "3306770"
  },
  {
    "text": "basically you can go ahead and use a driver that points to the same Zipkin instance because there's draw link",
    "start": "3306770",
    "end": "3312080"
  },
  {
    "text": "basically implementations available in all these languages the thing you want to standardize on is how do I inject the",
    "start": "3312080",
    "end": "3318500"
  },
  {
    "text": "context from asp.net into that message going on the calf gum and how do I read that context back out on the other side",
    "start": "3318500",
    "end": "3324740"
  },
  {
    "text": "and so that uses there's a set of api's I haven't really gotten it into in the",
    "start": "3324740",
    "end": "3329780"
  },
  {
    "text": "open tracing libraries it's called the propagation api's which basically package that information from the",
    "start": "3329780",
    "end": "3334910"
  },
  {
    "text": "current span and inject it into some sort of wire friendly format that can be serialized and sent over the network so",
    "start": "3334910",
    "end": "3341570"
  },
  {
    "text": "you just want to standardize on where you do that so like a good place to do it in that scenario I created would be",
    "start": "3341570",
    "end": "3346910"
  },
  {
    "text": "on the Kafka subscriber and publisher code you want to go ahead and have some way of grabbing the context from whoever",
    "start": "3346910",
    "end": "3352430"
  },
  {
    "text": "published to me inject that into maybe a little header and your Avro messages that go into Kafka then have the",
    "start": "3352430",
    "end": "3358130"
  },
  {
    "text": "consumer and the other side grab that same header and create a new child span so that's sort of the general practice",
    "start": "3358130",
    "end": "3364610"
  },
  {
    "text": "there and that's also why I mentioned is a best practice on that previous slide you might need to go and have some standards around how",
    "start": "3364610",
    "end": "3372020"
  },
  {
    "text": "you do this within your organization in order for it to work any other questions",
    "start": "3372020",
    "end": "3378550"
  },
  {
    "text": "no well thank you very much for your time I really appreciate it if you have any questions that you want to go and",
    "start": "3378550",
    "end": "3384770"
  },
  {
    "text": "grab me when I'm out in the food area later I'd be more than happy to answer them and I hope you enjoy the rest of the conference thank you very much",
    "start": "3384770",
    "end": "3392830"
  },
  {
    "text": "[Applause]",
    "start": "3393460",
    "end": "3397420"
  }
]