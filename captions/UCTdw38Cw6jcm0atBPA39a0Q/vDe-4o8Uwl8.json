[
  {
    "text": "we're having a good morning it's a lovely day here in London nice view so",
    "start": "8189",
    "end": "13259"
  },
  {
    "text": "if you if you find the talk to look out the window it's a good name right and so okay this is the power of",
    "start": "13259",
    "end": "20140"
  },
  {
    "text": "composition my name is Scott Aleutian I have a website f-sharp for fun and",
    "start": "20140",
    "end": "25570"
  },
  {
    "text": "profit comm which is an f-sharp site as you can guess do consulting with f-sharp",
    "start": "25570",
    "end": "32020"
  },
  {
    "text": "works if you need a sharp insulting so this talk is for beginners in FP so if",
    "start": "32020",
    "end": "40270"
  },
  {
    "text": "you already know what a monad is you're gonna find it kind of boring if you don't know what a monad is and you're",
    "start": "40270",
    "end": "45370"
  },
  {
    "text": "very scared about monads and you're freaked out by my nads then this is the right place to be because I will",
    "start": "45370",
    "end": "51550"
  },
  {
    "text": "basically start from scratch I will assume you know nothing about functional programming and at the end it will get",
    "start": "51550",
    "end": "57489"
  },
  {
    "text": "kind of complicated but the point is that I just want to introduce you to",
    "start": "57489",
    "end": "63100"
  },
  {
    "text": "some of the concepts and I don't expect you to remember everything there's no way you can remember everything but hopefully just demystify stuff so that",
    "start": "63100",
    "end": "70150"
  },
  {
    "text": "when you see it next time it's like no it's rather than thinking of it scary to the elk I remember that is it's not not",
    "start": "70150",
    "end": "76030"
  },
  {
    "text": "as as weird as I thought it was and I can actually make an effort to understand it so I'll be using F sharp",
    "start": "76030",
    "end": "81700"
  },
  {
    "text": "examples but this is really a conceptual talk things about concepts so you can do",
    "start": "81700",
    "end": "88689"
  },
  {
    "text": "this in pretty much any programming language except maybe COBOL or something but you can certainly do it in c-sharp and Java and JavaScript and so on so",
    "start": "88689",
    "end": "97259"
  },
  {
    "text": "here's the overview of the talk we'll start off by talking about the",
    "start": "97259",
    "end": "102310"
  },
  {
    "text": "philosophy of composition and what does it even mean to do composition",
    "start": "102310",
    "end": "107619"
  },
  {
    "text": "composition is something that when I first got into functional programming people talked about it all the time and I never quite knew what they meant I",
    "start": "107619",
    "end": "114670"
  },
  {
    "text": "thought I knew what they meant and I think well why is such a big deal and so that's really I thought I did this talk",
    "start": "114670",
    "end": "120670"
  },
  {
    "text": "really to explain to myself when I was learning why is composition such a big",
    "start": "120670",
    "end": "125679"
  },
  {
    "text": "deal otherwise it's such an important concept in a wider function of programmers go on and on and on about it all the time and then I'll talk about",
    "start": "125679",
    "end": "131890"
  },
  {
    "text": "functional programming so this is just the basic stuff about what functional programming is from a kind of completely",
    "start": "131890",
    "end": "138460"
  },
  {
    "text": "non-technical point of view which is basically functions and how to compose them and types and how to compose them",
    "start": "138460",
    "end": "144150"
  },
  {
    "text": "and it's just typed functional programming so this is F sharp a camel a score it's not closure or JavaScript but",
    "start": "144150",
    "end": "153030"
  },
  {
    "text": "the concepts are very similar then we'll talk about composition in practice I'm going to go through a bunch of examples",
    "start": "153030",
    "end": "158610"
  },
  {
    "text": "and each one's going to demonstrate something about composition so we'll do some simple examples first and then we'll do fizzbuzz carbonated fizzbuzz",
    "start": "158610",
    "end": "166430"
  },
  {
    "text": "which is a really complicated version of this verse and I don't really recommend you actually do this work this way but",
    "start": "166430",
    "end": "172049"
  },
  {
    "text": "that's just to demonstrate the principles of course and they're not doing a web service and we'll see how",
    "start": "172049",
    "end": "177209"
  },
  {
    "text": "these composition principles apply to all of these things okay so the prerequisites for this talk I'm assuming",
    "start": "177209",
    "end": "184200"
  },
  {
    "text": "you want to learn functional programming and so I have some recommendations you",
    "start": "184200",
    "end": "189269"
  },
  {
    "text": "need to have a beginner's mind you need to forget everything you know you need to pretend you've never seen anything",
    "start": "189269",
    "end": "194849"
  },
  {
    "text": "stop before I think they will be really helpful and in particularly you need to forget everything you know but I'll go",
    "start": "194849",
    "end": "199950"
  },
  {
    "text": "into programming you need to forget about loops you need to forget about variables you need to forget about objects if you try and bring your own",
    "start": "199950",
    "end": "208769"
  },
  {
    "text": "concepts into learning you'll you'll get very frustrated say well how do I do loop and how do I do an object how do I",
    "start": "208769",
    "end": "213989"
  },
  {
    "text": "do you know mutable variables like just forget those things even exist and your life will be a lot easier just start",
    "start": "213989",
    "end": "220079"
  },
  {
    "text": "from scratch so it's a little test for you are you ready to learn functional programming",
    "start": "220079",
    "end": "225480"
  },
  {
    "text": "okay now you must pass this test before carrying on with this talk otherwise you're gonna have to leave I'm afraid",
    "start": "225480",
    "end": "231560"
  },
  {
    "text": "okay here's the test what is a class okay what is a method and what is a for",
    "start": "231560",
    "end": "237359"
  },
  {
    "text": "loop what's inheritance okay think about these questions okay ready here's the",
    "start": "237359",
    "end": "243329"
  },
  {
    "text": "answers what does the class I don't know that is the correct answer",
    "start": "243329",
    "end": "248489"
  },
  {
    "text": "what is the method no idea okay what is a for loop I can't tell you what is",
    "start": "248489",
    "end": "255120"
  },
  {
    "text": "inheritance search me okay so those are the correct answers to those questions and just not here how did you do I hope",
    "start": "255120",
    "end": "263550"
  },
  {
    "text": "you got them all right if you didn't get them all right you need to try again okay come back and do it later all right",
    "start": "263550",
    "end": "270860"
  },
  {
    "text": "so let's talk about philosophy for a second here's the things you need to know in",
    "start": "270860",
    "end": "277300"
  },
  {
    "text": "order to understand composition first of all you need have been a child at some point I hope all of that applies to all",
    "start": "277300",
    "end": "283449"
  },
  {
    "text": "of you everyone was hoping it was a child you have to play this Lego and hopefully you have to play for those toy",
    "start": "283449",
    "end": "289900"
  },
  {
    "text": "trains or at least had a friend or a boyfriend and in fact that first thing you don't",
    "start": "289900",
    "end": "295720"
  },
  {
    "text": "need to have been a child at some point because actually there are a lot of adults who like playing with Lego too if",
    "start": "295720",
    "end": "300880"
  },
  {
    "text": "you google a fall you will find a lot of adults who are really obsessed with Lego add up add up friends of Lego everything",
    "start": "300880",
    "end": "308340"
  },
  {
    "text": "right so let's start with Lego hopefully everyone knows about Lego this is a",
    "start": "308340",
    "end": "313599"
  },
  {
    "text": "great ad from the 70s Lego philosophy Lego has a philosophy",
    "start": "313599",
    "end": "320470"
  },
  {
    "text": "and the philosophy is that all pieces are designed to be connected that if you",
    "start": "320470",
    "end": "325840"
  },
  {
    "text": "connect any two pieces together you get another piece another Lego piece that you can connect to other pieces right",
    "start": "325840",
    "end": "331780"
  },
  {
    "text": "you can still connect them together once you've connected two of them together and the pieces are reusable in different",
    "start": "331780",
    "end": "337180"
  },
  {
    "text": "contexts so here's an example here some pieces they're all designed to be connected they all have the little dots",
    "start": "337180",
    "end": "342580"
  },
  {
    "text": "on right every single Lego piece has a frame and when you start gluing them together if you want to take the first",
    "start": "342580",
    "end": "348370"
  },
  {
    "text": "piece in the second piece in an igloo I have another thing and I can keep adding",
    "start": "348370",
    "end": "354370"
  },
  {
    "text": "things to it I don't have to stop just because I've connected to things I can just keep adding and adding and adding okay you don't need to create a special",
    "start": "354370",
    "end": "361360"
  },
  {
    "text": "adapter to connect two pieces of Lego together you just connect them together you don't have to like create a little",
    "start": "361360",
    "end": "366580"
  },
  {
    "text": "container to put them in alright you just like stick them together straight away very very easy it's why it's so easy to play with Lego and because this",
    "start": "366580",
    "end": "375070"
  },
  {
    "text": "very important thing because when you add them together you get another thing of the same kind you can keep going and",
    "start": "375070",
    "end": "380620"
  },
  {
    "text": "going and going so there's there's no limit to how big your Lego can be now",
    "start": "380620",
    "end": "386199"
  },
  {
    "text": "you can see where I'm going with this when I'm talking about programming but this is just your sneak preview here so",
    "start": "386199",
    "end": "392259"
  },
  {
    "text": "here's the reusable thing too you can take it up you can put them together in one way you can take it apart and put",
    "start": "392259",
    "end": "397570"
  },
  {
    "text": "them together another way we use Legos reusable okay why is it reusable it's",
    "start": "397570",
    "end": "404740"
  },
  {
    "text": "because each piece is self-contained and there are no strings attached there are no strings attached till they",
    "start": "404740",
    "end": "410050"
  },
  {
    "text": "go so it means they don't get tangled up you know if you if you have to put three pieces together you have to wire them",
    "start": "410050",
    "end": "415510"
  },
  {
    "text": "together and you couldn't you we use one with having a special kind of wiring something that's not reusable Legos are",
    "start": "415510",
    "end": "422200"
  },
  {
    "text": "reusable because they're completely self-contained they have no dependencies on the outside world each piece is an isolated piece it's",
    "start": "422200",
    "end": "429130"
  },
  {
    "text": "very important right so this thing of keeping adding and adding and adding and",
    "start": "429130",
    "end": "434710"
  },
  {
    "text": "making bigger things this is what you end up with you end up with giant pieces of Lego and this is a piece of Lego too",
    "start": "434710",
    "end": "441400"
  },
  {
    "text": "you can keep on adding to this right you can little things on it you can add to it so that's what I call the power of",
    "start": "441400",
    "end": "447610"
  },
  {
    "text": "composition that's my slogan for this talk the power of composition compels me to tell you this so alright let's look",
    "start": "447610",
    "end": "455770"
  },
  {
    "text": "at another philosophy which is wooden railway tracks as in Rio or something ok all the pieces is designed to be",
    "start": "455770",
    "end": "462070"
  },
  {
    "text": "connected if you connect to well we trace together you get another wheel weight right and the pieces are reusable",
    "start": "462070",
    "end": "467950"
  },
  {
    "text": "alright here's some railway track they're designed to be connected right everyone has a little thing on them when",
    "start": "467950",
    "end": "474160"
  },
  {
    "text": "you connect two pieces you take two pieces of track you put them together you've got a now kind of bigger piece of",
    "start": "474160",
    "end": "479800"
  },
  {
    "text": "track that you can keep adding to other pieces okay this is obvious right it's really obvious how this works I don't",
    "start": "479800",
    "end": "485650"
  },
  {
    "text": "know why you know it somehow it doesn't seem to be obvious when we're doing programming but it's really obvious when we're doing Lego and you know you don't",
    "start": "485650",
    "end": "492970"
  },
  {
    "text": "need a special adapter to stick low weight tracks together actually they do sell special adapters for when you have",
    "start": "492970",
    "end": "499300"
  },
  {
    "text": "enough of certain kind of piece but you know in general you don't need special adapters which means you can keep adding",
    "start": "499300",
    "end": "505180"
  },
  {
    "text": "and adding and adding and you can make you know okay we make big ones",
    "start": "505180",
    "end": "510610"
  },
  {
    "text": "reusable again you can take them apart we use them in different situations you can have a special you know points track",
    "start": "510610",
    "end": "517240"
  },
  {
    "text": "and you've got a little bridge piece and you can use that bridge and other little things which is kind of cool okay and you can keep going and going",
    "start": "517240",
    "end": "524740"
  },
  {
    "text": "and making bigger and bigger pieces if you need to that's the power of composition as well alright so lego",
    "start": "524740",
    "end": "533350"
  },
  {
    "text": "philosophy well we track philosophy very very similar all right now let's talk about some",
    "start": "533350",
    "end": "540350"
  },
  {
    "text": "thing the Poli have heard of which is UNIX philosophy so I stole this from the",
    "start": "540350",
    "end": "545480"
  },
  {
    "text": "Wikipedia page from UNIX so hopefully it's right because I trust Wikipedia to be always a hundred percent accurate",
    "start": "545480",
    "end": "551290"
  },
  {
    "text": "number one write programs that do one thing well and if you want to do a new",
    "start": "551290",
    "end": "556430"
  },
  {
    "text": "thing you build a new piece you don't complicate old things by adding new",
    "start": "556430",
    "end": "562430"
  },
  {
    "text": "features you build a new piece you debit you don't modify old code you design the",
    "start": "562430",
    "end": "568910"
  },
  {
    "text": "pregnancy to work yeah so you expect that the output of your program is going to be the input some other program you",
    "start": "568910",
    "end": "574790"
  },
  {
    "text": "don't have any Linea well you don't even know what it is and you might programs",
    "start": "574790",
    "end": "580010"
  },
  {
    "text": "to handle text dreams because text dreams are the universal interface on UNIX now it's maybe not so Universal but",
    "start": "580010",
    "end": "587690"
  },
  {
    "text": "you know I can see where their game were they where they're trying to get out here so this match does very well to our",
    "start": "587690",
    "end": "593480"
  },
  {
    "text": "competition philosophy you've got reuse or PB each piece is a single thing which is reusable it only does one thing they're designed to be",
    "start": "593480",
    "end": "600110"
  },
  {
    "text": "connectives they're designed to work with each other and you don't need to have a special adapter you can use the",
    "start": "600110",
    "end": "606230"
  },
  {
    "text": "universal tech stream interface to connect your components together right",
    "start": "606230",
    "end": "613660"
  },
  {
    "text": "so that is the philosophy behind computation now let's look at functional",
    "start": "613660",
    "end": "620210"
  },
  {
    "text": "programming and see how that philosophy applies to functional programming so I can I'm gonna see when you know nothing",
    "start": "620210",
    "end": "626690"
  },
  {
    "text": "about functional programming in a mess or if you do because this is be a bit boring so core principles of functional programming and this is my theory of",
    "start": "626690",
    "end": "632930"
  },
  {
    "text": "functional programming people have different ideas but here's to three things first all functions are things",
    "start": "632930",
    "end": "638690"
  },
  {
    "text": "and I'm gonna think of them as little bits of railway track use composition everywhere again that's like Lego and",
    "start": "638690",
    "end": "646300"
  },
  {
    "text": "types in you're doing type functional programming types and not the same thing as classes they're much more like sense",
    "start": "646300",
    "end": "652930"
  },
  {
    "text": "and we'll talk about all these things these three things so first principle functions are things",
    "start": "652930",
    "end": "659350"
  },
  {
    "text": "so in functional programming I like to think of a function as a little bit of railway track that transforms inputs",
    "start": "659350",
    "end": "666980"
  },
  {
    "text": "into outputs and there's a little tunnel of transformation on there and something goes in one end and it comes out the",
    "start": "666980",
    "end": "672650"
  },
  {
    "text": "other end different in this case the Apple goes in one end and a banana comes",
    "start": "672650",
    "end": "677660"
  },
  {
    "text": "out the other end and we write that in in coding we where there's Apple our",
    "start": "677660",
    "end": "682730"
  },
  {
    "text": "banana apple is the input and Barnard's the output okay so there is a function now it's really important that a",
    "start": "682730",
    "end": "689000"
  },
  {
    "text": "function is a standalone thing it's not attached to a class and that means it",
    "start": "689000",
    "end": "694520"
  },
  {
    "text": "can be used as inputs and outputs for other functions and when I say standalone",
    "start": "694520",
    "end": "699740"
  },
  {
    "text": "that's really another word for a reusable component I can take this function in isolation and reuse it in",
    "start": "699740",
    "end": "705110"
  },
  {
    "text": "many different contexts which I couldn't do if it was a method for example in the class so here is a function which has an",
    "start": "705110",
    "end": "713180"
  },
  {
    "text": "output so the function has an input and the output is one of these food functions or here is a function and here",
    "start": "713180",
    "end": "720290"
  },
  {
    "text": "is an input so it's got a function as an input so here's another function with an",
    "start": "720290",
    "end": "725720"
  },
  {
    "text": "input and output and here it's got another function as a parameter okay to control how the input gets turned into",
    "start": "725720",
    "end": "732350"
  },
  {
    "text": "the output so function as input functions and output functions as parameters you can build really complex",
    "start": "732350",
    "end": "738860"
  },
  {
    "text": "systems it's that's the basic principle and from that just like with the Lego and the railway track you can build",
    "start": "738860",
    "end": "744830"
  },
  {
    "text": "really complex systems because functions that return functions that generate functions and so on and so forth it can get really complex that the",
    "start": "744830",
    "end": "751390"
  },
  {
    "text": "fundamental principles very straightforward all right second principle composition everywhere so here",
    "start": "751390",
    "end": "759320"
  },
  {
    "text": "is a piece of we're track here's another piece of where we track how do I compose",
    "start": "759320",
    "end": "765620"
  },
  {
    "text": "them together well just like with the toy trains I just take the two things together and I push them together when I",
    "start": "765620",
    "end": "772340"
  },
  {
    "text": "get a new piece of track so now we have a new function composed from the two",
    "start": "772340",
    "end": "777920"
  },
  {
    "text": "smaller functions now what's interesting about this function is that you cannot tell that it was built some smaller",
    "start": "777920",
    "end": "783770"
  },
  {
    "text": "functions and like with a railway track where you can see there's a seam with a function you can't there's no seam you",
    "start": "783770",
    "end": "790400"
  },
  {
    "text": "can't tell that it was made from smaller pieces and that's really cool because you don't know how it was made in this",
    "start": "790400",
    "end": "796310"
  },
  {
    "text": "particular case there was a banana but the bananas disappeared hey where do the banana go right the fact is the banana",
    "start": "796310",
    "end": "803210"
  },
  {
    "text": "is now hidden you've now kind of got an abstraction so the fact that banana was important at",
    "start": "803210",
    "end": "809419"
  },
  {
    "text": "the low level when you've got this higher level function that you want to show people this is your public API the",
    "start": "809419",
    "end": "815329"
  },
  {
    "text": "public API doesn't talk about bananas so there is kind of cool all right so let's",
    "start": "815329",
    "end": "820910"
  },
  {
    "text": "look at some code let's say we've got an ad function add one function a double function we want to clear them together",
    "start": "820910",
    "end": "826399"
  },
  {
    "text": "so this is f sharp code so f sharp you define a function saying let's if anyone",
    "start": "826399",
    "end": "832399"
  },
  {
    "text": "does Python it's F sharp looks really really like Python except instead of saying def if you say let's okay so",
    "start": "832399",
    "end": "839449"
  },
  {
    "text": "there's a double function which is plus X plus X and also in F sharp you don't",
    "start": "839449",
    "end": "844939"
  },
  {
    "text": "have return key words the the value of the last the return value is the last thing in the in the definition so this",
    "start": "844939",
    "end": "851869"
  },
  {
    "text": "case just returns X plus X so to make a new function I just add take add one and",
    "start": "851869",
    "end": "857749"
  },
  {
    "text": "I mush it together with double and that double angle bracket is the composition",
    "start": "857749",
    "end": "863929"
  },
  {
    "text": "simple so I got a new function add one then double and I can just call it with",
    "start": "863929",
    "end": "869089"
  },
  {
    "text": "a number like five just like it was a regular function and the answer is 12 in",
    "start": "869089",
    "end": "874369"
  },
  {
    "text": "fact it's not just like it is a regular function okay so that angle angle is the composition",
    "start": "874369",
    "end": "880189"
  },
  {
    "text": "operator in F sharp in other languages it's different in Haskell it's just a period different languages might have",
    "start": "880189",
    "end": "886609"
  },
  {
    "text": "different symbols for that here's another one we've got three functions who want to play them together okay we",
    "start": "886609",
    "end": "893839"
  },
  {
    "text": "just take all three functions and we mush them together with the composition operator and then we've got a new function and when he just call it with",
    "start": "893839",
    "end": "899869"
  },
  {
    "text": "five and in this case we get a hundred forty four add one then double then square so hopefully this is kind of",
    "start": "899869",
    "end": "906769"
  },
  {
    "text": "really obvious especially if you've played with railway tracks you should totally understand how this",
    "start": "906769",
    "end": "913279"
  },
  {
    "text": "works now in F sharp we actually use another technique in more so than than",
    "start": "913279",
    "end": "919730"
  },
  {
    "text": "that kind of anger bracketing which is the piping this is very much like UNIX piping so here's the problem with you if",
    "start": "919730",
    "end": "927889"
  },
  {
    "text": "you're doing a traditional language with parentheses you might say well I want to add one to five and then I want to double it and then I want to square it",
    "start": "927889",
    "end": "934749"
  },
  {
    "text": "now each time you do that you you put it in deep inside parentheses you put parentheses around and then do something",
    "start": "934749",
    "end": "941360"
  },
  {
    "text": "on the outside and your parentheses the the thing you want is buried right in the middle of the parentheses so you",
    "start": "941360",
    "end": "947450"
  },
  {
    "text": "have to read it from the inside out okay so you say well I want to start with that one and then I want to double it and then I want to square it and it's a",
    "start": "947450",
    "end": "954380"
  },
  {
    "text": "little bit confusing when you have all these parentheses so this is you know",
    "start": "954380",
    "end": "959660"
  },
  {
    "text": "what you're used to in c-sharp or Java or something but in functional programming in F sharp especially we",
    "start": "959660",
    "end": "964910"
  },
  {
    "text": "like to use the piping model so it's the same thing you start with five you feed it into the add one function you take",
    "start": "964910",
    "end": "971240"
  },
  {
    "text": "the output of the add of that function which for six you feed it into the double function you take me out but if that function you feed into the square",
    "start": "971240",
    "end": "976850"
  },
  {
    "text": "function so it's very much like the UNIX piping model and I think this is a lot",
    "start": "976850",
    "end": "982100"
  },
  {
    "text": "easier to understand because you don't have this nested parentheses you just start from the left and you kind of work your way across so this is how it looks",
    "start": "982100",
    "end": "989630"
  },
  {
    "text": "in F sharp five you pipe it in to add one or you pipe it into add wire then",
    "start": "989630",
    "end": "994910"
  },
  {
    "text": "take the output and pipe it into double or you take it you know start with five pipe it in to add one take the outfit",
    "start": "994910",
    "end": "1000220"
  },
  {
    "text": "about one pipe into double take you out for a double pipe into square and in F sharp the pipe symbol is a vertical bar",
    "start": "1000220",
    "end": "1007840"
  },
  {
    "text": "with an angle bracket because the vertical bar actually use it for something else but it's very similar to the UNIX model of piping okay so we're",
    "start": "1007840",
    "end": "1016660"
  },
  {
    "text": "gonna be seeing a lot of piping as to that's the main way of doing stuff like this in a shot so building bigger things",
    "start": "1016660",
    "end": "1023470"
  },
  {
    "text": "and functions okay it's compositions all the way up it's not Turtles all the way down these compositions all the way up so we start with a low level operation",
    "start": "1023470",
    "end": "1031569"
  },
  {
    "text": "for example like application a string as a function it's gotten the string input string output now to make something",
    "start": "1031570",
    "end": "1037600"
  },
  {
    "text": "bigger we take a bunch of these low-level operations we compose them somehow and we get say a service in",
    "start": "1037600",
    "end": "1043780"
  },
  {
    "text": "address validation service and this case the inputs and dress and the output is some sort of results and for people who",
    "start": "1043780",
    "end": "1051670"
  },
  {
    "text": "are under 30 you might not know what a service is it's basically just like a micro service but without service",
    "start": "1051670",
    "end": "1059850"
  },
  {
    "text": "anyone over 30 anyone who's program in the 90s knows what a services nowadays I don't think anyone does okay so we got",
    "start": "1060010",
    "end": "1068650"
  },
  {
    "text": "these services we glue those together into a use case or a scenario worth",
    "start": "1068650",
    "end": "1075040"
  },
  {
    "text": "whatever you want to call it in this case updating some customer data so you've got an input which is a quest",
    "start": "1075040",
    "end": "1080830"
  },
  {
    "text": "you've got an output and these are all the use cases and then you take these use cases and you build a minute you can",
    "start": "1080830",
    "end": "1086620"
  },
  {
    "text": "compose them into a web application and the way you do that so web application has a request as an input and the",
    "start": "1086620",
    "end": "1092650"
  },
  {
    "text": "response is now put and inside the web application there's a dispatcher router control or whatever you want to call it",
    "start": "1092650",
    "end": "1099550"
  },
  {
    "text": "that decides which one of these use cases to call based on requests all right composition all the way up it's",
    "start": "1099550",
    "end": "1107740"
  },
  {
    "text": "kind of fractal what's nice is he using Sako same techniques at the bottom as you are at the top all the way you know",
    "start": "1107740",
    "end": "1113200"
  },
  {
    "text": "so you're just using one kind of unified principle okay so you end up if you look",
    "start": "1113200",
    "end": "1118750"
  },
  {
    "text": "inside your web application it's going to look like this a whole bunch of functions move together the power of composition okay and we'll actually see",
    "start": "1118750",
    "end": "1126070"
  },
  {
    "text": "an example of this at the end of the talk so power of composition power of",
    "start": "1126070",
    "end": "1131440"
  },
  {
    "text": "composition I think you get the the message I'm kind of emphasizing it very heavily here composition is good all",
    "start": "1131440",
    "end": "1137950"
  },
  {
    "text": "right there's more kinds of composition you can do as a functional programmer and this is where some of the jargon comes",
    "start": "1137950",
    "end": "1144310"
  },
  {
    "text": "in mono age okay so Manos is a jargony words it's a mathematical word it's",
    "start": "1144310",
    "end": "1150370"
  },
  {
    "text": "really a way of composing things like strings lists even integers and stuff",
    "start": "1150370",
    "end": "1156430"
  },
  {
    "text": "it's it's a it's a technique for doing composition of things like that monads is another java new word which we",
    "start": "1156430",
    "end": "1164050"
  },
  {
    "text": "will be talking about later and that's for composing functions which have effects and will I'll show you that when",
    "start": "1164050",
    "end": "1170320"
  },
  {
    "text": "we get to fizzbuzz and finally there's category through which functional programs of a kind of obsessed with",
    "start": "1170320",
    "end": "1175480"
  },
  {
    "text": "category theory and the reason is because category theory is sort of a composition theory it's really about how",
    "start": "1175480",
    "end": "1180970"
  },
  {
    "text": "do you do compositional if you compose this thing with this thing is that the same as composing this thing the other thing",
    "start": "1180970",
    "end": "1186799"
  },
  {
    "text": "that's what I'm you're going to say in this talk if you're a mathematician please close your ears but then I never said that but from a sort functional",
    "start": "1186799",
    "end": "1194279"
  },
  {
    "text": "program point of view that's why people are interested in category theory all",
    "start": "1194279",
    "end": "1199320"
  },
  {
    "text": "right another principle types are not classes so then we'll access so what is the type",
    "start": "1199320",
    "end": "1206549"
  },
  {
    "text": "okay there's a kind of set if you have a function you have a set of valid inputs for the function then you have a set of",
    "start": "1206549",
    "end": "1211829"
  },
  {
    "text": "valid outlets for the function so the type is just the name for that set that's all the type is it's not a clause",
    "start": "1211829",
    "end": "1218459"
  },
  {
    "text": "it's just a name for a set of things so if you say the set of valid inputs is",
    "start": "1218459",
    "end": "1224129"
  },
  {
    "text": "all the possible integers we just pull that type integer if a set of valid outputs is all the possible strings we",
    "start": "1224129",
    "end": "1231149"
  },
  {
    "text": "say that is of type string if it's all the possible people in the world we say its type person if it's all the possible",
    "start": "1231149",
    "end": "1239129"
  },
  {
    "text": "fruits you say it's type fruit okay now because it's a set it can",
    "start": "1239129",
    "end": "1245009"
  },
  {
    "text": "contain any group of things including a set of functions so you can have a set",
    "start": "1245009",
    "end": "1250679"
  },
  {
    "text": "of functions as outputs or inputs and we have that set as a name in this case is",
    "start": "1250679",
    "end": "1256559"
  },
  {
    "text": "the set of fruit to fruits functions functions that turn fruit into food and so this would have the type Y we could",
    "start": "1256559",
    "end": "1261869"
  },
  {
    "text": "type through our food that would be the name of that type okay that's something",
    "start": "1261869",
    "end": "1267389"
  },
  {
    "text": "that's when it starts it starts spinning a little bit but it's really really important thing to understand okay",
    "start": "1267389",
    "end": "1274549"
  },
  {
    "text": "composition everywhere types can be composed at least these kinds of types can be composed and the reason is oh",
    "start": "1274549",
    "end": "1281909"
  },
  {
    "text": "it's oh yeah so this the kind of type system that f-sharp and Haskell and",
    "start": "1281909",
    "end": "1287429"
  },
  {
    "text": "other functional programming language have is called an algebraic type system a bit more jargon if you forget about",
    "start": "1287429",
    "end": "1294389"
  },
  {
    "text": "algebraic and call a composable type system it makes more sense okay it's a composable type system and it's",
    "start": "1294389",
    "end": "1301889"
  },
  {
    "text": "composable because you build new types from smaller types just like any other kind of composition and there's actually",
    "start": "1301889",
    "end": "1308159"
  },
  {
    "text": "two different ways you can build bigger types you can compose them with and and you can compose them with or okay so",
    "start": "1308159",
    "end": "1314459"
  },
  {
    "text": "what does that mean this kind of competition by the way is only possible because it's just data",
    "start": "1314459",
    "end": "1320550"
  },
  {
    "text": "okay it's just like sex you can have a set intersection and set Union in the search so upsetting so this it's it's",
    "start": "1320550",
    "end": "1327870"
  },
  {
    "text": "dual because there's no data if this can sing certain methods attach them it'd be really hard so the very fact that that",
    "start": "1327870",
    "end": "1334170"
  },
  {
    "text": "set the types are just data means it's really easy to compose them okay so",
    "start": "1334170",
    "end": "1339660"
  },
  {
    "text": "let's start with anding things together so here's an example let's say you want to make fruit salads and you say well I",
    "start": "1339660",
    "end": "1345840"
  },
  {
    "text": "have an apple and a banana and a cherry that's what makes up my fruit salad and",
    "start": "1345840",
    "end": "1352680"
  },
  {
    "text": "this is a very familiar thing any programming language it has this kind of stuff there's a pair it's a to pool it's",
    "start": "1352680",
    "end": "1359220"
  },
  {
    "text": "a record it's a struts whatever you want to call it here's an example in F sharp you say type fruits out of equals and",
    "start": "1359220",
    "end": "1365370"
  },
  {
    "text": "it's an apple and a banana and a cherry and it looks this curly braces it looks",
    "start": "1365370",
    "end": "1371580"
  },
  {
    "text": "kind of like JavaScript or types grid or whatever you know and that's a record type in a shop okay so that's something",
    "start": "1371580",
    "end": "1378240"
  },
  {
    "text": "you will be familiar with already but the other way of doing it is a bit more unusual if you're not used to functional",
    "start": "1378240",
    "end": "1384780"
  },
  {
    "text": "programming it's composing with or and so let's say I want a snack and I'm gonna have a apple or a banana or a",
    "start": "1384780",
    "end": "1391920"
  },
  {
    "text": "cherry that's my snack and like I say this kind of boring things together is",
    "start": "1391920",
    "end": "1397650"
  },
  {
    "text": "not available in languages you used to unless you're a programmer and in a shop you write it like this with a",
    "start": "1397650",
    "end": "1403110"
  },
  {
    "text": "vertical bar or boolean or okay it's an apple or it's a banana or it's a cherry",
    "start": "1403110",
    "end": "1411170"
  },
  {
    "text": "this is a really really useful type so wait I call this a choice type the",
    "start": "1411170",
    "end": "1417360"
  },
  {
    "text": "technical term in F sharp is discriminated Union you can also call them some types and if you're really",
    "start": "1417360",
    "end": "1423840"
  },
  {
    "text": "fancy you can call on Co products I like to call them a choice type because from",
    "start": "1423840",
    "end": "1429150"
  },
  {
    "text": "a modeling point of view that's why I think of them either a choice between these three things so let's look at real",
    "start": "1429150",
    "end": "1434490"
  },
  {
    "text": "world example of composition okay so here's a real world thing we need to",
    "start": "1434490",
    "end": "1439920"
  },
  {
    "text": "accept payments for my business",
    "start": "1439920",
    "end": "1444650"
  },
  {
    "text": "let's say we take three forms of payments we take cash check or credit card for cash we don't need any extra",
    "start": "1446120",
    "end": "1452700"
  },
  {
    "text": "information for checks we need a check number for credit cards we need the credit card type and a credit card",
    "start": "1452700",
    "end": "1459330"
  },
  {
    "text": "number and I'm going to have to change this example because in the future cheques are kind of going out of fashion but anyway I'll replace it with PayPal",
    "start": "1459330",
    "end": "1466320"
  },
  {
    "text": "or Bitcoin or something okay so how would you implement this in your",
    "start": "1466320",
    "end": "1472590"
  },
  {
    "text": "language of choice well if you're an our programmer you probably immediately say well I need a an interface to represent",
    "start": "1472590",
    "end": "1480570"
  },
  {
    "text": "the payment method may be a abstract basic class I don't know and then I'm going to have a bunch of subclasses or",
    "start": "1480570",
    "end": "1486870"
  },
  {
    "text": "classes that implement its interface a cash class a check class a credit card",
    "start": "1486870",
    "end": "1491970"
  },
  {
    "text": "class and each fast is going to have the extra data it needs to represent that thing well that's fine but let's look at",
    "start": "1491970",
    "end": "1498810"
  },
  {
    "text": "how you do this in a shop so we're not going to do that way we're not going to start with in the face we're gonna build",
    "start": "1498810",
    "end": "1505110"
  },
  {
    "text": "up the thing using composition so we're going to start off with some primitives we'll say hey we've got a check number",
    "start": "1505110",
    "end": "1510930"
  },
  {
    "text": "and we've got a card number okay those are our primitives and we doesn't these are just aliases for a primitive to make",
    "start": "1510930",
    "end": "1516300"
  },
  {
    "text": "our code look nicer okay once we've got a check number and a card number we can",
    "start": "1516300",
    "end": "1522000"
  },
  {
    "text": "say well the card type is it's either Visa or MasterCard okay and then we have credit card information which is going",
    "start": "1522000",
    "end": "1528600"
  },
  {
    "text": "to be the card type and the card number okay so the Visa or MasterCard that's a",
    "start": "1528600",
    "end": "1533940"
  },
  {
    "text": "choice okay so that's a choice type and the credit card information is a car type and a card number so it's an and",
    "start": "1533940",
    "end": "1541980"
  },
  {
    "text": "type use it as a record type okay next let's do our payment method so a payment",
    "start": "1541980",
    "end": "1549630"
  },
  {
    "text": "method is cash or cheque or credit card and in each case we have the extra",
    "start": "1549630",
    "end": "1555480"
  },
  {
    "text": "information there's no extra information with cash or cheque there's a check number for card the extra information is credit card info as choice type right",
    "start": "1555480",
    "end": "1563040"
  },
  {
    "text": "and it's a choice with the vertical bars it's one of those three things and we can keep going so we say okay a payment",
    "start": "1563040",
    "end": "1568980"
  },
  {
    "text": "amount is a decimal a currency is euros or dollars okay another primitive and",
    "start": "1568980",
    "end": "1574410"
  },
  {
    "text": "another choice type and then we can keep going we say well the payment is an amount and a currency and",
    "start": "1574410",
    "end": "1581850"
  },
  {
    "text": "a payment method and now this is and this is a record type okay so what we've",
    "start": "1581850",
    "end": "1588899"
  },
  {
    "text": "done here is we've built up the final type by composing small types over and",
    "start": "1588899",
    "end": "1594899"
  },
  {
    "text": "over and over building a big thing from a small thing okay it's a power",
    "start": "1594899",
    "end": "1599970"
  },
  {
    "text": "composition what's nice is it's very compact it fits in one page very nicely",
    "start": "1599970",
    "end": "1607130"
  },
  {
    "text": "so this is another nice thing about functional programming is you return to",
    "start": "1607130",
    "end": "1612510"
  },
  {
    "text": "use types as executable documentation they're not just something that gets in the way there's something that actually",
    "start": "1612510",
    "end": "1617580"
  },
  {
    "text": "documents what you're doing so if I show you something like this can you guess",
    "start": "1617580",
    "end": "1623750"
  },
  {
    "text": "what I'm talking about here I'm talking about you know a card game of some kind right these are all different types in",
    "start": "1623750",
    "end": "1630779"
  },
  {
    "text": "the card game and it's a fits on one page pretty much describes everything I doing at the card game now these are",
    "start": "1630779",
    "end": "1636480"
  },
  {
    "text": "nouns but you can also have verbs I functions so to deal is you start with a",
    "start": "1636480",
    "end": "1643289"
  },
  {
    "text": "deck of cards and then you take one of the cards out and you put on the table and you've got a new deck left back",
    "start": "1643289",
    "end": "1649200"
  },
  {
    "text": "that's a function that you know starts the deck and it emits a new thing so you can do we can represent now so you can",
    "start": "1649200",
    "end": "1655470"
  },
  {
    "text": "represent verbs okay very cool that you can fit the entire domain on one screen",
    "start": "1655470",
    "end": "1662210"
  },
  {
    "text": "here's the one we just looked at payment method if I come to you you and I'm just",
    "start": "1662210",
    "end": "1668039"
  },
  {
    "text": "trying to maintain your code all right let's say your time I mean you're trying to maintain my code and you know",
    "start": "1668039",
    "end": "1674010"
  },
  {
    "text": "can you guess what all the different payment methods are if you you've got a KO to maintain and someone says what",
    "start": "1674010",
    "end": "1680460"
  },
  {
    "text": "different payment methods do we take well if you have the OO thing you might have to look in five different files in",
    "start": "1680460",
    "end": "1686700"
  },
  {
    "text": "this one they're literally on the same page and you know the same four lines that right next to each other so from a",
    "start": "1686700",
    "end": "1691919"
  },
  {
    "text": "document the documentation point of view this is very very nice so this is a massive topic I don't have enough time I",
    "start": "1691919",
    "end": "1697950"
  },
  {
    "text": "have a whole talk about this if you're interested in domain driven design and types I have a talk at /td on my website and I",
    "start": "1697950",
    "end": "1705350"
  },
  {
    "text": "have a book coming out called domain modeling make functional which you can all rush out and buy please thank you",
    "start": "1705350",
    "end": "1711200"
  },
  {
    "text": "very much okay next think of a number so",
    "start": "1711200",
    "end": "1716330"
  },
  {
    "text": "we're going to start now with a very simple example of basic composition think of a number think of a number add",
    "start": "1716330",
    "end": "1721880"
  },
  {
    "text": "1 to it square it subtract 1 divide by them and first thought of track that we first thought up in the answers - ok",
    "start": "1721880",
    "end": "1727280"
  },
  {
    "text": "this is kind of a child's you know little fun game ok how are we going to",
    "start": "1727280",
    "end": "1733070"
  },
  {
    "text": "implement this using composition well we're going to have a little bit of railway track for each step and we're",
    "start": "1733070",
    "end": "1739400"
  },
  {
    "text": "going to glue them together so we're going to add one we'll take the output of that we're going to subtract one we'll take the out of that and square it",
    "start": "1739400",
    "end": "1745130"
  },
  {
    "text": "and the output of that and divide by the number first thought of and so on and so forth ok it it naturally maps the",
    "start": "1745130",
    "end": "1751550"
  },
  {
    "text": "composition model which is why I picked this example so let's look at the code we're going to define a function for",
    "start": "1751550",
    "end": "1758510"
  },
  {
    "text": "each step would define an add one function a square root function there's a track one function the divide function that another one we define it define all",
    "start": "1758510",
    "end": "1766490"
  },
  {
    "text": "these helper functions and once we've defined all these helper function then by the way don't worry about understanding the syntax too much I just",
    "start": "1766490",
    "end": "1772640"
  },
  {
    "text": "want to kind of show you that you define all these helper functions and then you combine them so we take the number you",
    "start": "1772640",
    "end": "1778040"
  },
  {
    "text": "first thought of we've pipe it into add one we pipe into square we pipe it into subtract one and we probably divide by",
    "start": "1778040",
    "end": "1783950"
  },
  {
    "text": "them because those little and so on and so forth ok so that is the composition principle applied to this particular",
    "start": "1783950",
    "end": "1790460"
  },
  {
    "text": "problem ok so the code is quite a bellicose notice there's no classes there's no",
    "start": "1790460",
    "end": "1796250"
  },
  {
    "text": "methods it's all functions all right that's very simple example hopefully",
    "start": "1796250",
    "end": "1801740"
  },
  {
    "text": "this all makes sense and I say if you need to look at these slides I'm going very very fast I will put the slides up",
    "start": "1801740",
    "end": "1807530"
  },
  {
    "text": "on my website so you can review them later on all right somehow it's not always that easy you",
    "start": "1807530",
    "end": "1815240"
  },
  {
    "text": "know so I've made it look really easy no it's not always that easy so we what",
    "start": "1815240",
    "end": "1820250"
  },
  {
    "text": "we've been talking about so far is functions where you can just literally compose them and it's works first time yeah as if so here's the problem let's",
    "start": "1820250",
    "end": "1829820"
  },
  {
    "text": "say you have a function with two outputs okay like this one some functions actually have more than one outlet",
    "start": "1829820",
    "end": "1835059"
  },
  {
    "text": "here's another function some functions have more than one input okay and what",
    "start": "1835059",
    "end": "1841100"
  },
  {
    "text": "happens then is they can't be composed if you have two outputs and one inputs how do you even compose these things",
    "start": "1841100",
    "end": "1847850"
  },
  {
    "text": "okay or if you have one output and two inputs how do you even compose them okay so this is a problem and this is what",
    "start": "1847850",
    "end": "1855169"
  },
  {
    "text": "functional programmers actually spend most of their time doing is manipulating things so they can be composed not that",
    "start": "1855169",
    "end": "1863570"
  },
  {
    "text": "functions writing the functions themselves is pretty straightforward bit manipulative so they can be composed that's the kind of just like it it's like playing Tetris you know to like",
    "start": "1863570",
    "end": "1869870"
  },
  {
    "text": "twist things around and stick it back in so let's look at an example of why we do",
    "start": "1869870",
    "end": "1875390"
  },
  {
    "text": "this one example of how this might work so Roman numerals this is another simple problem to make something into Roman",
    "start": "1875390",
    "end": "1882860"
  },
  {
    "text": "numerals so this is our task we have an integer now the Roman numerals means if",
    "start": "1882860",
    "end": "1888410"
  },
  {
    "text": "it's a five we replace it with a V if it's a ten replace with an X and so on right now the algorithm that we're going",
    "start": "1888410",
    "end": "1895100"
  },
  {
    "text": "to use is based on the fact that Roman numerals is a tally system so in the old",
    "start": "1895100",
    "end": "1900380"
  },
  {
    "text": "days you know one two three four when you've got for them you put a strikethrough and that would be your 5 and notice that that kind of looks like",
    "start": "1900380",
    "end": "1907010"
  },
  {
    "text": "a V it's probably where the V came from and so on so forth so algorithm is going to be very crude but very effective",
    "start": "1907010",
    "end": "1913820"
  },
  {
    "text": "algorithm which is we start with you know if we're doing you know returning",
    "start": "1913820",
    "end": "1919940"
  },
  {
    "text": "25 in tournament we create 25 slashes ok 25 ones and then if there's five ones in",
    "start": "1919940",
    "end": "1927380"
  },
  {
    "text": "a row we've replaced it with a V and if there's two V's in a row or your place with an X and if there's",
    "start": "1927380",
    "end": "1933290"
  },
  {
    "text": "five X's in a row in place with an L and so on and so forth up to M that works",
    "start": "1933290",
    "end": "1938299"
  },
  {
    "text": "out really well it's a really easy algorithm to understand and it's a lot less complicated than some of the stuff I've seen on the Internet",
    "start": "1938299",
    "end": "1943700"
  },
  {
    "text": "all right so and I've also chosen this algorithm because it's very composable",
    "start": "1943700",
    "end": "1949059"
  },
  {
    "text": "let's look at this replace function we're going to be replacing ones with X's you know ones with threes and visa",
    "start": "1949059",
    "end": "1955280"
  },
  {
    "text": "fixes this replace functions going to be used a lot let's have a quick look at it so the replace function has an input",
    "start": "1955280",
    "end": "1960320"
  },
  {
    "text": "string an old value and a new value and the but is is the new that's a three",
    "start": "1960320",
    "end": "1967360"
  },
  {
    "text": "parameter function all right so the problem is when we want to replace the one by the V and the V by the X and the",
    "start": "1967360",
    "end": "1974320"
  },
  {
    "text": "X by the L we can't glue them thicker we can't do them together because they just doesn't work all right so this is our",
    "start": "1974320",
    "end": "1980290"
  },
  {
    "text": "problem how can we solve this problem so this is a more general problem which is",
    "start": "1980290",
    "end": "1986350"
  },
  {
    "text": "all these nice composition patterns of gluing things together it works really well when every function has one parameter right but these functions",
    "start": "1986350",
    "end": "1994030"
  },
  {
    "text": "don't have one parameter so that's bad news the good news is that you can",
    "start": "1994030",
    "end": "1999310"
  },
  {
    "text": "actually turn every function into a one parameter function that's a very cool thing the functional programming allows",
    "start": "1999310",
    "end": "2005580"
  },
  {
    "text": "you to do and it's thanks to this guy mr. Haskell curry the technique of doing",
    "start": "2005580",
    "end": "2011640"
  },
  {
    "text": "this thing is called carrying named after him so this is something you might have heard of carrying what is carrying so",
    "start": "2011640",
    "end": "2019230"
  },
  {
    "text": "here is a very simple function with two parameters okay it's an uncovered function and what we're going to do is",
    "start": "2019230",
    "end": "2026580"
  },
  {
    "text": "after carrying we're going to turn it into a function a one parameter function with say the a input and it's going to",
    "start": "2026580",
    "end": "2034560"
  },
  {
    "text": "spit out a new function a new kind of intermediate or temporary function and that temporary function is also a one",
    "start": "2034560",
    "end": "2041160"
  },
  {
    "text": "primitive function and that has the extra input B all right so currying is the the technique of taking a multiple",
    "start": "2041160",
    "end": "2049770"
  },
  {
    "text": "the multi parameter function and turning into a series of one parameter functions and what's great about that is then",
    "start": "2049770",
    "end": "2055770"
  },
  {
    "text": "these one-time parameter functions can be composed all right now in F sharp you get currying for free in other",
    "start": "2055770",
    "end": "2063810"
  },
  {
    "text": "languages like javascript do you actually have to do some work to get caring to happen but this is why carrying is so important because it",
    "start": "2063810",
    "end": "2069840"
  },
  {
    "text": "makes everything into a one primitive function so this is the function before carrying and here's the code I'll just",
    "start": "2069840",
    "end": "2077490"
  },
  {
    "text": "show the F sharp code is a three parameter function we have the old value of the new value in the input string and",
    "start": "2077490",
    "end": "2082940"
  },
  {
    "text": "dotnet already has a replace method but it's a method on on the string class so",
    "start": "2082940",
    "end": "2089790"
  },
  {
    "text": "we're just going to pull that method but we're just going to make this into a a nice function that we can use okay so this is",
    "start": "2089790",
    "end": "2096700"
  },
  {
    "text": "how you'd call it in c-sharp replace input string dot replace now after",
    "start": "2096700",
    "end": "2102970"
  },
  {
    "text": "currying the code is going to look like this it's now a two parameter function and it returns a lambda and a lamb in",
    "start": "2102970",
    "end": "2110320"
  },
  {
    "text": "f-sharp the lambdas are written with a fun keyword because there's a lot of fun to write lambdas and it's you know",
    "start": "2110320",
    "end": "2116920"
  },
  {
    "text": "there's a function so we're returning a lambda then lambda has one parameter input and it does this replace it over",
    "start": "2116920",
    "end": "2122440"
  },
  {
    "text": "here so the output we now have a one primitive function the output is a 1 parameter function which we can compose",
    "start": "2122440",
    "end": "2127690"
  },
  {
    "text": "and the old value and the new value sort of baked in like that so this brings us",
    "start": "2127690",
    "end": "2135790"
  },
  {
    "text": "to the next taste test me after we've done the currying we can do caution applications so partial application",
    "start": "2135790",
    "end": "2141280"
  },
  {
    "text": "means passing in some of the parameters but not all the parameters and what what",
    "start": "2141280",
    "end": "2147640"
  },
  {
    "text": "we're left over is a function that's kind of missing some parameters we can then provide those parameters later on",
    "start": "2147640",
    "end": "2152920"
  },
  {
    "text": "so it's important not to mix up partial application and carry incurring is the process of turning functions into one",
    "start": "2152920",
    "end": "2160210"
  },
  {
    "text": "parameter functions partial application is the process of passing in some but not all of the parameters baking them in",
    "start": "2160210",
    "end": "2166599"
  },
  {
    "text": "so that you can then use that function later on so it's a really important technique so here for example if we do",
    "start": "2166599",
    "end": "2174490"
  },
  {
    "text": "replace five ones with a V we're going to call the place function with two",
    "start": "2174490",
    "end": "2181089"
  },
  {
    "text": "parameters not three okay and that will give us a function back so we can then use later one and if we're going to",
    "start": "2181089",
    "end": "2187839"
  },
  {
    "text": "replace two V's with an X that we call replace with two out of the three parameters we're missing a parameter",
    "start": "2187839",
    "end": "2193420"
  },
  {
    "text": "that will be used later on so we get better function back okay so you can see",
    "start": "2193420",
    "end": "2198790"
  },
  {
    "text": "it's partial partial application we're only passing in two out of the three parameters and and the the after we've",
    "start": "2198790",
    "end": "2205720"
  },
  {
    "text": "got the function back of the old and the new star self baked in so we can now use",
    "start": "2205720",
    "end": "2210760"
  },
  {
    "text": "it okay so now once we've done this partial application we can now chain them together so let's look at the code",
    "start": "2210760",
    "end": "2217960"
  },
  {
    "text": "for that define a helper function which uses partial application another helper function another helper function another",
    "start": "2217960",
    "end": "2224140"
  },
  {
    "text": "helper function and so on fourth and then we can do our pipeline so we start by replicating it the I and",
    "start": "2224140",
    "end": "2232009"
  },
  {
    "text": "then we do the replace and we do the replace and we do the replace and we do the replace and so and so forth okay that's very straightforward now well in",
    "start": "2232009",
    "end": "2242390"
  },
  {
    "text": "Waiting helper function at the time we typically don't bother to that there's a lot of extra code we normally use in line partial application so if you're",
    "start": "2242390",
    "end": "2249829"
  },
  {
    "text": "sampling here if we have an odd function and an odd apply function you know add function takes two parameters but in the",
    "start": "2249829",
    "end": "2255680"
  },
  {
    "text": "example below we're just passing in one we're saying add two okay and we're",
    "start": "2255680",
    "end": "2261380"
  },
  {
    "text": "missing the extra parameter that extra parameter will be provided later on through the pipeline and same with x - x",
    "start": "2261380",
    "end": "2271039"
  },
  {
    "text": "- what's you know again the extra parameter be provided later one and we",
    "start": "2271039",
    "end": "2277489"
  },
  {
    "text": "can kind of do nested in line application like this so in this case we've started a list of numbers one to",
    "start": "2277489",
    "end": "2283640"
  },
  {
    "text": "ten we're going to map each of those numbers using add two and they're going to map each of those numbers using",
    "start": "2283640",
    "end": "2288920"
  },
  {
    "text": "multiply so map transforms things so map it's a two parameter function it has a",
    "start": "2288920",
    "end": "2294469"
  },
  {
    "text": "function to transform each element and then the list itself well I'm passing in the transformation function but I'm not passing in the list",
    "start": "2294469",
    "end": "2300279"
  },
  {
    "text": "so I'm partially I don't know applying map and again and we're partially applying add so this is a partial",
    "start": "2300279",
    "end": "2307130"
  },
  {
    "text": "application within partial application so if we use partial application in our Roman numerals thing we don't need to",
    "start": "2307130",
    "end": "2313099"
  },
  {
    "text": "write these helper functions we can just literally write them in line replace five with V replace to reason of X and",
    "start": "2313099",
    "end": "2320989"
  },
  {
    "text": "so on so it is very rarely will you actually bother to write these special helper functions you just use the postal",
    "start": "2320989",
    "end": "2327229"
  },
  {
    "text": "application like this okay now what's",
    "start": "2327229",
    "end": "2332329"
  },
  {
    "text": "cool about using this composition model is it's really easy to add new segment",
    "start": "2332329",
    "end": "2337910"
  },
  {
    "text": "to the pipeline for example we haven't done you know for four ones in the rows",
    "start": "2337910",
    "end": "2343849"
  },
  {
    "text": "of 1v so we can just keep going say we'll place V 1 1 1 1 with 1 X replace 4",
    "start": "2343849",
    "end": "2350269"
  },
  {
    "text": "ones with one V and so on and so forth and this is this we go back to the unit",
    "start": "2350269",
    "end": "2355309"
  },
  {
    "text": "source we don't change the original code new things on so with the pipeline model it's really nice you can insert new",
    "start": "2355309",
    "end": "2361619"
  },
  {
    "text": "segments you can append new segments but you're not messing with the original code so that's why another piece is why",
    "start": "2361619",
    "end": "2367440"
  },
  {
    "text": "this particular composition approach is so nice so there you go that was this particular challenge how do we compose a",
    "start": "2367440",
    "end": "2374190"
  },
  {
    "text": "function with two inputs the answer is we use partial application",
    "start": "2374190",
    "end": "2379430"
  },
  {
    "text": "alright next fits bars okay for people",
    "start": "2379430",
    "end": "2386130"
  },
  {
    "text": "who aren't familiar with fizzbuzz is another child's game writing a program that prints the numbers from 1 to 100",
    "start": "2386130",
    "end": "2391140"
  },
  {
    "text": "but but if it's a multiple 3 print fizz it was a model of 5 print bars it as a",
    "start": "2391140",
    "end": "2396180"
  },
  {
    "text": "model 15 print fizz buzz okay I'm sure you've all seen this and most people",
    "start": "2396180",
    "end": "2402270"
  },
  {
    "text": "would probably write information like this it's very simple if it's divisible by 15 print fizz bars they're just",
    "start": "2402270",
    "end": "2407430"
  },
  {
    "text": "miserable i three print fizz and so on and so forth so this is the imperative solution okay and we're going to use",
    "start": "2407430",
    "end": "2415109"
  },
  {
    "text": "this little helper function is it divisible by just to make the toad look a bit nicer so this is fine this is the",
    "start": "2415109",
    "end": "2421619"
  },
  {
    "text": "easy way of doing Fitz buzz and I really wouldn't recommend make it any more complicated if you're doing a programming interview but since this is",
    "start": "2421619",
    "end": "2428280"
  },
  {
    "text": "a talk let's make it more complicated this is not complicated enough it's also from a functional point of view there's",
    "start": "2428280",
    "end": "2434819"
  },
  {
    "text": "things wrong with it it's not it's not composable I can't connect this Fitz bus to something else right because it's",
    "start": "2434819",
    "end": "2441060"
  },
  {
    "text": "just it's a self-contained it's a monolith it's a mini monolith it's also mixing in IO and it's not pure so",
    "start": "2441060",
    "end": "2448740"
  },
  {
    "text": "there's printing out to the console functional programmers like to put IO at the front in the back of their functions",
    "start": "2448740",
    "end": "2455099"
  },
  {
    "text": "and in the middle you have a pure function that doesn't mess with the outside world it makes it a lot easier to tests and what using to understand",
    "start": "2455099",
    "end": "2460619"
  },
  {
    "text": "what's doing on so from that point of view this is about implementation oh wait but ok we're gonna do the pipeline",
    "start": "2460619",
    "end": "2468270"
  },
  {
    "text": "model of fizzbuzz ok so the pipeline model we're going to have to handle the 15 case we're going to handle the 3 case",
    "start": "2468270",
    "end": "2474240"
  },
  {
    "text": "the 5 case and then we're going to have a last step where we handle the remaining cases alright just like all",
    "start": "2474240",
    "end": "2480720"
  },
  {
    "text": "the other ones so the question is what are these handlers how do we handle a particular number",
    "start": "2480720",
    "end": "2487760"
  },
  {
    "text": "so if you think about it a number comes in and we have two choices it can either",
    "start": "2487760",
    "end": "2493819"
  },
  {
    "text": "be unprocessed like 2 or 7 or 13 I'm going to call that uncarbonated and or",
    "start": "2493819",
    "end": "2500809"
  },
  {
    "text": "the alternative is it could be processed in which case I'm going to call it carbonate is like a fears or buzz oK",
    "start": "2500809",
    "end": "2505940"
  },
  {
    "text": "we've got two choices so if we think",
    "start": "2505940",
    "end": "2511280"
  },
  {
    "text": "about in the railway track model so you can think of it as like points or switches in the u.s. you have input and",
    "start": "2511280",
    "end": "2518300"
  },
  {
    "text": "you have two different outputs uncarbonated output and culminated output all right so this is our railway",
    "start": "2518300",
    "end": "2525140"
  },
  {
    "text": "model for this particular function so let's look at the code so we're going to",
    "start": "2525140",
    "end": "2530540"
  },
  {
    "text": "define a type which represents the choice it's a choice between carbonate and uncarbonated if it's uncommon ated",
    "start": "2530540",
    "end": "2536720"
  },
  {
    "text": "there's an integer associated with that choice if it's carbonated there's a string associated choice okay so this is",
    "start": "2536720",
    "end": "2542240"
  },
  {
    "text": "our type and it's a choice type and then to actually carbonate something we pass",
    "start": "2542240",
    "end": "2550250"
  },
  {
    "text": "in the number two divided by the label or the whatever and then the number so",
    "start": "2550250",
    "end": "2555619"
  },
  {
    "text": "if it's divisible by the divisor then it's carbonated and we use that label like this even if it's not divisible we",
    "start": "2555619",
    "end": "2562339"
  },
  {
    "text": "or say it's uncarbonated okay so that's the code see it's pretty straightforward code the concepts are harder than the",
    "start": "2562339",
    "end": "2569180"
  },
  {
    "text": "actual code itself",
    "start": "2569180",
    "end": "2571660"
  },
  {
    "text": "so I've got this idea from Ragan walls original braithwaite's so if you think",
    "start": "2581610",
    "end": "2588640"
  },
  {
    "text": "it's a terrible idea you can blame him actually he was using us to demonstrate how not to do a program interview and I would agree but",
    "start": "2588640",
    "end": "2596110"
  },
  {
    "text": "it's kind of fun to see to take it to its limit see how far you can go right",
    "start": "2596110",
    "end": "2601120"
  },
  {
    "text": "so if we say carbonate 3 with fears we get a carbonated fizz if we pass in 10",
    "start": "2601120",
    "end": "2606370"
  },
  {
    "text": "it's not divisible by 3 and so it's uncarbonated if we pass in 10 and we",
    "start": "2606370",
    "end": "2612040"
  },
  {
    "text": "carbonate it with a 5 it is carbonated to random get a buzz okay so that's how",
    "start": "2612040",
    "end": "2617050"
  },
  {
    "text": "our little function works so okay we've got our functions how do we compose them",
    "start": "2617050",
    "end": "2623080"
  },
  {
    "text": "okay well if it's uncarbonated we want to call the next one down in the line if",
    "start": "2623080",
    "end": "2628750"
  },
  {
    "text": "it's carbonated we want to bypass we're basically done if we hit Fears we can skip the rest of the line okay so this",
    "start": "2628750",
    "end": "2635110"
  },
  {
    "text": "is how we want to compose them and if we have a whole chain of these things we want to compose them all together",
    "start": "2635110",
    "end": "2640240"
  },
  {
    "text": "how would you compose them if they were real train tracks well obviously you can",
    "start": "2640240",
    "end": "2646210"
  },
  {
    "text": "make it like that okay this is the two-track model of composition or the",
    "start": "2646210",
    "end": "2651790"
  },
  {
    "text": "two-track fizzbuzz okay I call this railway oriented programming I have whole talk about this if you're",
    "start": "2651790",
    "end": "2658150"
  },
  {
    "text": "interested it's a very silly name but it's quite useful concepts okay so one",
    "start": "2658150",
    "end": "2665170"
  },
  {
    "text": "track functions can't be composed if you just take the output at the input to track functions can also be composed",
    "start": "2665170",
    "end": "2670690"
  },
  {
    "text": "because you take each input to the you know each output to the next input that works fine here's the problem we have a",
    "start": "2670690",
    "end": "2676540"
  },
  {
    "text": "one track input and a to track output and they can't be composed so let's look",
    "start": "2676540",
    "end": "2682870"
  },
  {
    "text": "at an implementation of fizzbuzz our first attempt so we start by carbonating it with 15 if it is carbonated we're",
    "start": "2682870",
    "end": "2691270"
  },
  {
    "text": "done we get that we use the string if it's not carbonated we go to the next step which is 3 so we carbonated with 3",
    "start": "2691270",
    "end": "2697930"
  },
  {
    "text": "and if it was carbonated we're done and if it's not carbonated we go to the next step which is 5 we try culminating with",
    "start": "2697930",
    "end": "2704740"
  },
  {
    "text": "5 and if it's carbonated we're done if it's uncoordinated we've finished now this is really ugly code",
    "start": "2704740",
    "end": "2710599"
  },
  {
    "text": "I mean this is fine it works but it's really ugly you don't want to be writing code like this but there is a pattern",
    "start": "2710599",
    "end": "2716539"
  },
  {
    "text": "here that we can look at and steal okay which is that every time we see an",
    "start": "2716539",
    "end": "2721910"
  },
  {
    "text": "uncarbonated do we do something so if it's served carbonated we stopped if it's uncarbonated we continue so if it's",
    "start": "2721910",
    "end": "2728569"
  },
  {
    "text": "uncarbonated here we do something if it's uncarbonated we do something it was uncarbonated we do something okay",
    "start": "2728569",
    "end": "2734869"
  },
  {
    "text": "that's the pattern so this is the pattern in encode here if it's carbonated we're just done we return the",
    "start": "2734869",
    "end": "2741200"
  },
  {
    "text": "string it is uncarbonated then we do something with that number and this is",
    "start": "2741200",
    "end": "2747739"
  },
  {
    "text": "crying out to be turned into a function with a parameter so let's write some code we're going to call it if",
    "start": "2747739",
    "end": "2754210"
  },
  {
    "text": "uncarbonated dude that's the name of our power function and if the is basically",
    "start": "2754210",
    "end": "2760869"
  },
  {
    "text": "encapsulating that patent so if it's a carbonated string we're going to leave it alone okay we're going to keep",
    "start": "2760869",
    "end": "2766609"
  },
  {
    "text": "passing back to the end of the line it was an uncarbonated number we're going",
    "start": "2766609",
    "end": "2771920"
  },
  {
    "text": "to call a function which is the next function in the chain all right so this is a function parameter we always like",
    "start": "2771920",
    "end": "2778130"
  },
  {
    "text": "to parameterize things and in functional programming we use function parameters",
    "start": "2778130",
    "end": "2783349"
  },
  {
    "text": "to parameterize things now we call it F we have no idea what this function is we can't give it a name so we can use very",
    "start": "2783349",
    "end": "2789410"
  },
  {
    "text": "short letters like F because it's just a function I have no idea what this function does okay and there is me using",
    "start": "2789410",
    "end": "2794660"
  },
  {
    "text": "this function so now if we have this if carbonated do helper function we can",
    "start": "2794660",
    "end": "2801349"
  },
  {
    "text": "rewrite our code so we start by culminating it and then if uncarbonated do the next bit which is carbonate by",
    "start": "2801349",
    "end": "2809210"
  },
  {
    "text": "three if you're still uncarbonated we do the next bit which is carbonate by five and then finally we carbonate the",
    "start": "2809210",
    "end": "2815479"
  },
  {
    "text": "remaining and I've got a little helper function which is basically this is one is different because basically if it's",
    "start": "2815479",
    "end": "2821150"
  },
  {
    "text": "carbonated we return the string and if it's not carbonated we cast the int interest ring so you can see though that",
    "start": "2821150",
    "end": "2829039"
  },
  {
    "text": "we've now come we got now a composable model if I want to do seven you know I don't have another one I can just stick",
    "start": "2829039",
    "end": "2836749"
  },
  {
    "text": "another one right into that pipeline all right if I want to you know change the order or something I can do all sort things with this model there's one other",
    "start": "2836749",
    "end": "2845380"
  },
  {
    "text": "thing we need to talk about which is loops I said there are no loops okay loops are not composable so we have a",
    "start": "2845380",
    "end": "2851740"
  },
  {
    "text": "fizzbuzz that only works for none for individual numbers and the goal was to",
    "start": "2851740",
    "end": "2857110"
  },
  {
    "text": "work lists of numbers and we can't pass a list of numbers into this function because it only takes single integers okay that's a problem but we always have",
    "start": "2857110",
    "end": "2867310"
  },
  {
    "text": "a solution which is to use another function in this case we're going to use a transform a function that takes a",
    "start": "2867310",
    "end": "2872470"
  },
  {
    "text": "function that works at individual numbers and transforms it into function that works on lists and that is the map",
    "start": "2872470",
    "end": "2878220"
  },
  {
    "text": "function so this dot map is a transformer function that takes one kind",
    "start": "2878220",
    "end": "2883360"
  },
  {
    "text": "of function and spits out another kind of function it takes a function that works and normal things and turns it into a function the works and this",
    "start": "2883360",
    "end": "2889120"
  },
  {
    "text": "that's what this map is all about and if you're using link in c-sharp that is",
    "start": "2889120",
    "end": "2894370"
  },
  {
    "text": "selects yeah so now we can have a list",
    "start": "2894370",
    "end": "2899620"
  },
  {
    "text": "input to this function and list out for me so the fizzbuzz code the final version list of this 1/200 is our thing",
    "start": "2899620",
    "end": "2906880"
  },
  {
    "text": "we take our fizzbuzz function and we use map to turn it into a function of works on lists and then now we have a list of",
    "start": "2906880",
    "end": "2913720"
  },
  {
    "text": "strings and we want to print them all so we use this titter which is the same as map except it just has no output and",
    "start": "2913720",
    "end": "2920110"
  },
  {
    "text": "that's the io part and the i/o is now the end of the function there's no i/o in the middle of the function and again",
    "start": "2920110",
    "end": "2926020"
  },
  {
    "text": "the fizzbuzz function itself carbonate if uncarbonated do if i'm Carboni to do and so on so you've got this composable",
    "start": "2926020",
    "end": "2932290"
  },
  {
    "text": "way of implementing fizzbuzz okay the m-word is there a general solution to",
    "start": "2932290",
    "end": "2940230"
  },
  {
    "text": "functions like this okay and the answer is yes it's monads monads do everything in this",
    "start": "2940230",
    "end": "2946840"
  },
  {
    "text": "particular case bind as the answer bind all the things functional programmers like the word bind to get very excited",
    "start": "2946840",
    "end": "2953440"
  },
  {
    "text": "by that so this is our general problem this is not just with fizzbuzz we go but we also have a situation where we have",
    "start": "2953440",
    "end": "2959350"
  },
  {
    "text": "one track input to track outputs which is not composable if we could turn it",
    "start": "2959350",
    "end": "2964450"
  },
  {
    "text": "into a two track input in a two track output that is composable so how do we",
    "start": "2964450",
    "end": "2970240"
  },
  {
    "text": "convert from the before to the after okay and that's what the bind function does it's an adapter block if you think",
    "start": "2970240",
    "end": "2976090"
  },
  {
    "text": "about it there's basically an adapter block and there's a slots and you pass in your your switch your points function",
    "start": "2976090",
    "end": "2984430"
  },
  {
    "text": "and the output is now a two-track so the bind function is a function transformer it transforms one kind of",
    "start": "2984430",
    "end": "2990970"
  },
  {
    "text": "function into another kind of function so if we talk about in in the fizzbuzz",
    "start": "2990970",
    "end": "2996640"
  },
  {
    "text": "the bind was actually the if uncarbonated do that was our buying function so if we look about it if we",
    "start": "2996640",
    "end": "3001980"
  },
  {
    "text": "look at it this one the two-track result is the uncorrelated coordinated if it's uncarbonated we do",
    "start": "3001980",
    "end": "3008880"
  },
  {
    "text": "the next function in the chain alright and that gives us to track out but if",
    "start": "3008880",
    "end": "3014190"
  },
  {
    "text": "it's uncut its carbonated we just buy plus so this is the fizzbuzz version of",
    "start": "3014190",
    "end": "3020700"
  },
  {
    "text": "bind ok and there's a bind for all sorts of things so this is a quick definition",
    "start": "3020700",
    "end": "3026010"
  },
  {
    "text": "of monad a monad is it sounds complicated but all it is is a data type in our case the carbonation data type",
    "start": "3026010",
    "end": "3032400"
  },
  {
    "text": "and an associated bind function in our case it was the if uncarbonated do and",
    "start": "3032400",
    "end": "3037440"
  },
  {
    "text": "some other very simple stuff just to make sure that everything works as expected that you don't have weird",
    "start": "3037440",
    "end": "3042540"
  },
  {
    "text": "behavior and that's basically it and a magnetic function which you might also hear it's basically one of these switch or points functions and you use",
    "start": "3042540",
    "end": "3050730"
  },
  {
    "text": "bind you you run these a lot and bind the reason why binder so important is to bind as a way of composing these things",
    "start": "3050730",
    "end": "3056030"
  },
  {
    "text": "so if we have tasks here's another example you have tasks or a sink or",
    "start": "3056030",
    "end": "3061560"
  },
  {
    "text": "whatever you want to call them you know you do something you wait for result when the task completes you do the next one down the chain when the task doesn't",
    "start": "3061560",
    "end": "3068310"
  },
  {
    "text": "complete or something you just skip right so it's a very very similar situation and you use this very very",
    "start": "3068310",
    "end": "3073440"
  },
  {
    "text": "similar solution so you can call this a promise the future whatever you want to call it so here's an example without",
    "start": "3073440",
    "end": "3080250"
  },
  {
    "text": "using bind we start a task when it's finished we call another function we",
    "start": "3080250",
    "end": "3085650"
  },
  {
    "text": "start when that's you know we start another task when that's finished we call another function when that's finished we call another function and so",
    "start": "3085650",
    "end": "3091500"
  },
  {
    "text": "on and so forth really ugly codes okay so if we create a bind for tasks which",
    "start": "3091500",
    "end": "3097740"
  },
  {
    "text": "says when you're finished call this function with this F Prime okay take take the result that you get",
    "start": "3097740",
    "end": "3104650"
  },
  {
    "text": "and call and call it with an F once we have this bind the code looks a lot",
    "start": "3104650",
    "end": "3110109"
  },
  {
    "text": "simpler we start a task and we pipe it into bind or the next task and then we",
    "start": "3110109",
    "end": "3115420"
  },
  {
    "text": "bind the next task and we buy the next star and so on and so forth so now we've got this kind of instead of having this kind of diagonal pyramid of doom thing",
    "start": "3115420",
    "end": "3123250"
  },
  {
    "text": "which you get a lot you now a nice linear vertical model okay so buying you",
    "start": "3123250",
    "end": "3129190"
  },
  {
    "text": "can see how bind is really really nice sometimes you'll see binds written in a different way which is a symbol which is",
    "start": "3129190",
    "end": "3134230"
  },
  {
    "text": "angle angle equals it's literally the same thing as the bind method just we",
    "start": "3134230",
    "end": "3139960"
  },
  {
    "text": "written for the parameters around when you when you use it this way you can use it just like just like a nice",
    "start": "3139960",
    "end": "3146520"
  },
  {
    "text": "composition of a pipe it's kind of like a piping thing so there you go",
    "start": "3146520",
    "end": "3151980"
  },
  {
    "text": "right and error generating functions we",
    "start": "3151980",
    "end": "3158079"
  },
  {
    "text": "can use exactly the same technique so let's say you have a web service and you have a request that comes in and you want to evaluate request and",
    "start": "3158079",
    "end": "3164530"
  },
  {
    "text": "canonicalize the email and then fetch the existing record then update the record and so on so forth that's fine",
    "start": "3164530",
    "end": "3169630"
  },
  {
    "text": "there might be errors okay when you validate requests you might the names might be blank or something when you",
    "start": "3169630",
    "end": "3176500"
  },
  {
    "text": "fetch an existing record that you might not find the record you mother you might get a database error when you try an update you might get an authorization",
    "start": "3176500",
    "end": "3182619"
  },
  {
    "text": "arrow of time out or something there's errors okay so your code is going to look like this the validation function",
    "start": "3182619",
    "end": "3188230"
  },
  {
    "text": "might return an error so it's going to be one of these monadic points functions",
    "start": "3188230",
    "end": "3194130"
  },
  {
    "text": "when you canonicalize an email like lower casing it or something stripping out trimming blanks that's always going",
    "start": "3194130",
    "end": "3199569"
  },
  {
    "text": "to work when you fetch a record that might be an error when you update a record that might not return anything",
    "start": "3199569",
    "end": "3204670"
  },
  {
    "text": "okay it might be a kind of a void function equipment of a void function how can you compose these functions okay",
    "start": "3204670",
    "end": "3210309"
  },
  {
    "text": "they don't they don't have the same shape so we have all these transformer functions we have Matt we have bind we",
    "start": "3210309",
    "end": "3217930"
  },
  {
    "text": "have a tea and map and we basically go through some work to transform them into two tracks and once we've transformed",
    "start": "3217930",
    "end": "3224589"
  },
  {
    "text": "them all into two-track functions that we can then glue them together so that's what all these helper functions like map",
    "start": "3224589",
    "end": "3230230"
  },
  {
    "text": "and bind are really important because they they allow you to transform into things that can't be composed",
    "start": "3230230",
    "end": "3235980"
  },
  {
    "text": "alright so getting composition to work is like the number one priority when you're doing functional programming all",
    "start": "3235980",
    "end": "3244000"
  },
  {
    "text": "right next one and I'm running a little bit behind I'm sorry last one which is something else called quietly",
    "start": "3244000",
    "end": "3250060"
  },
  {
    "text": "composition okay so we have these monadic functions these points functions",
    "start": "3250060",
    "end": "3255900"
  },
  {
    "text": "we saw that we turn them into two-track functions but there's another way of doing doing it we just combine two of",
    "start": "3255900",
    "end": "3261460"
  },
  {
    "text": "them into another points swich manere function okay you can just add them",
    "start": "3261460",
    "end": "3267010"
  },
  {
    "text": "together and get another one at the same time now what's cool when it's the same type of thing you can keep going you can",
    "start": "3267010",
    "end": "3273640"
  },
  {
    "text": "keep adding and adding and adding just like the Lego just like the railway track if it's the same kind of thing you",
    "start": "3273640",
    "end": "3278770"
  },
  {
    "text": "can keep adding to it so there's a web library for F sharp called suave suave",
    "start": "3278770",
    "end": "3284860"
  },
  {
    "text": "to i/o and it has a concept called a web part now a web part is one of these magnetic",
    "start": "3284860",
    "end": "3291430"
  },
  {
    "text": "functions the input is an HTTP context which is a wrapper which contains the request it retains the response it",
    "start": "3291430",
    "end": "3298060"
  },
  {
    "text": "contains the cookies it contains the credentials whatever all the stuff you need to know to process a forest the",
    "start": "3298060",
    "end": "3303940"
  },
  {
    "text": "outputs is an async HTTP context option so it's a sync because everything should",
    "start": "3303940",
    "end": "3309640"
  },
  {
    "text": "be async and it's an option because you might not handle it you might say you know this is the kind of request I can't",
    "start": "3309640",
    "end": "3315610"
  },
  {
    "text": "deal with so I'm actually not gonna return anything all right so it might fail this is the way you can tell it's going to fail and",
    "start": "3315610",
    "end": "3321270"
  },
  {
    "text": "you can read all about it on the suave site so you can compose two web parts to",
    "start": "3321270",
    "end": "3328000"
  },
  {
    "text": "make another web part and the composition symbol is the angle equal angle another way it's simple this is",
    "start": "3328000",
    "end": "3334090"
  },
  {
    "text": "the standard simplifies the composition but again when you combine these two",
    "start": "3334090",
    "end": "3339280"
  },
  {
    "text": "things you get another thing of the same type which means you've got another web part and now you can combine some other",
    "start": "3339280",
    "end": "3344830"
  },
  {
    "text": "web parts to make another web part and so on and so forth so let's look at actual some real",
    "start": "3344830",
    "end": "3350830"
  },
  {
    "text": "examples so here is composing two web boots so path hello",
    "start": "3350830",
    "end": "3356260"
  },
  {
    "text": "path is a web part you pass in a string and if it matches the path it succeeds",
    "start": "3356260",
    "end": "3362710"
  },
  {
    "text": "and if it doesn't match the path it fails and okay is a webpart that returns the okay",
    "start": "3362710",
    "end": "3369150"
  },
  {
    "text": "response with this particular message so I'm going to glue them together using Cline's decomposition and get a new web",
    "start": "3369150",
    "end": "3375060"
  },
  {
    "text": "part and the web part now is going to if it's if the input is hello if the path",
    "start": "3375060",
    "end": "3380280"
  },
  {
    "text": "is hello it's going to succeed if the path is not hello it's going to fail if it does succeed it's going to return 200",
    "start": "3380280",
    "end": "3385770"
  },
  {
    "text": "with hello okay so that's where the feigning thing so the whole web part",
    "start": "3385770",
    "end": "3391620"
  },
  {
    "text": "this whole new web part will fail it's kind of just like with the railway track it's going to bypass the next stage if",
    "start": "3391620",
    "end": "3397560"
  },
  {
    "text": "the path thing fails that the OK will never happen all right now the next",
    "start": "3397560",
    "end": "3403410"
  },
  {
    "text": "thing is we're going to have two web parts I'm going to choose between them so this is the choose web parts and you",
    "start": "3403410",
    "end": "3409500"
  },
  {
    "text": "pass in a list of other web parts and it basically picks the first web part that succeeds so if the input is hello it's",
    "start": "3409500",
    "end": "3418140"
  },
  {
    "text": "going to find the first web part it's going to succeed and it's going to return hello if the input is goodbye the",
    "start": "3418140",
    "end": "3424440"
  },
  {
    "text": "first web parts going to fail and the second web parts going to succeed and if the if none of these succeed the whole",
    "start": "3424440",
    "end": "3431040"
  },
  {
    "text": "thing is going to fail mm-hmm all right so that's a choose now we now we're building up a web part from smaller web",
    "start": "3431040",
    "end": "3438390"
  },
  {
    "text": "parts okay and then we're going to combine it with the get web part now the get web part only succeeds if the input",
    "start": "3438390",
    "end": "3445920"
  },
  {
    "text": "if the request type is guest so when we say gets composed with choose this whole",
    "start": "3445920",
    "end": "3452760"
  },
  {
    "text": "thing now only worse when the input is get and then we make a complete",
    "start": "3452760",
    "end": "3457920"
  },
  {
    "text": "application so we're going to choose between gets with two cases and post",
    "start": "3457920",
    "end": "3464100"
  },
  {
    "text": "with two cases so now the inputs you know if the input is closed that whole",
    "start": "3464100",
    "end": "3469530"
  },
  {
    "text": "gap thing is going to fail and it's going to drop down to the posts if the gate does work it's going to look at the",
    "start": "3469530",
    "end": "3474900"
  },
  {
    "text": "path and it's either going to be hello goodbye if the hello if it's not hello it's going to drop down to the goodbye",
    "start": "3474900",
    "end": "3481830"
  },
  {
    "text": "and if that works it's going to say okay so this is a complete web application written using web parts composing web",
    "start": "3481830",
    "end": "3489390"
  },
  {
    "text": "parts together to make bigger and being a web parts just like the logo just like",
    "start": "3489390",
    "end": "3494540"
  },
  {
    "text": "okay and then you basically take this webpart and you the entire application takes a web part as input that is your",
    "start": "3494540",
    "end": "3500960"
  },
  {
    "text": "application is one giant web part so web parts are connected all just like Lego",
    "start": "3500960",
    "end": "3507620"
  },
  {
    "text": "okay stick to them together you get another web part you get another thing that's the composition they're reusable",
    "start": "3507620",
    "end": "3513370"
  },
  {
    "text": "okay so the get web part can be reused in many different contexts the choose web part can be reused in many different",
    "start": "3513370",
    "end": "3520010"
  },
  {
    "text": "contexts the the okay web part can be reused in many different contexts okay these are reusable components that can",
    "start": "3520010",
    "end": "3526340"
  },
  {
    "text": "be glued together to make a web app and this is when you do this you get your web app that looks something like this",
    "start": "3526340",
    "end": "3533110"
  },
  {
    "text": "lots of little functions inside no classes no loops no objects nobody it's",
    "start": "3533110",
    "end": "3539870"
  },
  {
    "text": "just pure functions compose together okay the power of composition okay this",
    "start": "3539870",
    "end": "3546020"
  },
  {
    "text": "is the power of composition so let's review what we we discussed we talked about philosophy the philosophy of",
    "start": "3546020",
    "end": "3551630"
  },
  {
    "text": "composition things being connected or not having to use a special kind of adapter everything being reusable okay",
    "start": "3551630",
    "end": "3558800"
  },
  {
    "text": "that's is really the whole philosophy behind composition this is why it's so important you can do so much with it we",
    "start": "3558800",
    "end": "3565190"
  },
  {
    "text": "then talked about functional programming composable functions composable types composable composable everything is",
    "start": "3565190",
    "end": "3570860"
  },
  {
    "text": "compressible you probably get fed off of that word because I've said it so many times and then we looked at basic composition using angle brackets to",
    "start": "3570860",
    "end": "3578210"
  },
  {
    "text": "compose new functions and piping to chain functions together partial application is another technique to help",
    "start": "3578210",
    "end": "3585020"
  },
  {
    "text": "you do composition and then we talked about monads and using bind and using",
    "start": "3585020",
    "end": "3591200"
  },
  {
    "text": "Kleist accomplishes so all these functional programming techniques like motifs as if they're all about compositions all about how can I make my",
    "start": "3591200",
    "end": "3597320"
  },
  {
    "text": "life easier how can I do composition okay so when they you think why do they even have monads why do they",
    "start": "3597320",
    "end": "3604040"
  },
  {
    "text": "make it so complicated they're not trying to make it complicated trying to solve a problem which is composing",
    "start": "3604040",
    "end": "3609170"
  },
  {
    "text": "different kinds of things all right and you can see that when we do use these techniques things do become composable",
    "start": "3609170",
    "end": "3615140"
  },
  {
    "text": "we can turn on composable things into composable things so that's it thanks",
    "start": "3615140",
    "end": "3621410"
  },
  {
    "text": "very much I'm gonna put the slides on my website slash composition and the video will be",
    "start": "3621410",
    "end": "3627550"
  },
  {
    "text": "up in a month bubbly if you like this talk that I've got more videos if you",
    "start": "3627550",
    "end": "3633790"
  },
  {
    "text": "like domain-driven design you might want to check out my book there's my book I add me on Twitter and if you want to",
    "start": "3633790",
    "end": "3641020"
  },
  {
    "text": "know more about F sharp F sharp org is the place to go I highly encourage you to check it out so thanks very much if",
    "start": "3641020",
    "end": "3647470"
  },
  {
    "text": "any questions just come and grab me Cheers",
    "start": "3647470",
    "end": "3651359"
  },
  {
    "text": "[Applause]",
    "start": "3655120",
    "end": "3658460"
  }
]