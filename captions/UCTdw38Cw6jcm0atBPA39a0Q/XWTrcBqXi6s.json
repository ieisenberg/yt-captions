[
  {
    "start": "0",
    "end": "119000"
  },
  {
    "text": "hi everyone this is my first time here in Oslo so thank you for coming and",
    "start": "0",
    "end": "5569"
  },
  {
    "text": "before we begin let me see a raise of hands how many of you have heard about it when sourcing and secure raise before",
    "start": "5569",
    "end": "12590"
  },
  {
    "text": "wow that's a nice girlfriend well keep your hands up please how many of you",
    "start": "12590",
    "end": "17880"
  },
  {
    "text": "have implemented a system using these patterns cool so I hope I will teach you",
    "start": "17880",
    "end": "23519"
  },
  {
    "text": "something new today my name is Li dun and I lead the user notifications platform team eight weeks a long time",
    "start": "23519",
    "end": "32430"
  },
  {
    "text": "ago I think it was 2010 I consulted to a startup that wanted to organize the",
    "start": "32430",
    "end": "39120"
  },
  {
    "text": "photos that people upload it to Facebook and the idea was to aggregate all the",
    "start": "39120",
    "end": "44460"
  },
  {
    "text": "photos that were taken at the same location or at the same event so that people can discover them easily on the",
    "start": "44460",
    "end": "50520"
  },
  {
    "text": "social network now remember it was 2010 there was no Instagram or snapchat one",
    "start": "50520",
    "end": "59039"
  },
  {
    "text": "of the hardest buzz words those days was social network everyone did it at least",
    "start": "59039",
    "end": "64470"
  },
  {
    "text": "they thought they did and we also try to build a social graph on top of those photos that connects people locations",
    "start": "64470",
    "end": "71700"
  },
  {
    "text": "events and in photos so we started to build a network we used my sequel as",
    "start": "71700",
    "end": "77280"
  },
  {
    "text": "database we had a table for locations and a table for photos and events and a",
    "start": "77280",
    "end": "82830"
  },
  {
    "text": "table of relationships that connects them all so I asked them guys how are",
    "start": "82830",
    "end": "89790"
  },
  {
    "text": "you going to create the table in large scale and they were like we don't know",
    "start": "89790",
    "end": "95310"
  },
  {
    "text": "yet but don't worry I left a couple of friends later and when they started to",
    "start": "95310",
    "end": "100590"
  },
  {
    "text": "grow they spent thousands of dollars to maintain this unusable super expensive",
    "start": "100590",
    "end": "105960"
  },
  {
    "text": "structure instead of using a better structure for this use case like a graph database in the long run they didn't",
    "start": "105960",
    "end": "114540"
  },
  {
    "text": "survive but this story is an excellent example of accidental complexity we",
    "start": "114540",
    "end": "120659"
  },
  {
    "start": "119000",
    "end": "119000"
  },
  {
    "text": "model our data in some way and when the requirements change and the model doesn't fit anymore we work very hard to",
    "start": "120659",
    "end": "127799"
  },
  {
    "text": "maintain it instead of using the better structure that is more suitable for the new requirement",
    "start": "127799",
    "end": "133120"
  },
  {
    "text": "and there all kinds of models can cause us a ridiculous amount of accidental",
    "start": "133120",
    "end": "138220"
  },
  {
    "text": "complexity and today I'm gonna talk about this problem and I'll show you how event sourcing and CQRS can help you",
    "start": "138220",
    "end": "144879"
  },
  {
    "text": "solve it a few years later I joined wigs as a back-end developer in the crm",
    "start": "144879",
    "end": "151239"
  },
  {
    "text": "platform team and which is an Israeli company that offers web site builder",
    "start": "151239",
    "end": "157030"
  },
  {
    "text": "that allows you to create stunning websites effortlessly you just drag and drop elements to a site like building a",
    "start": "157030",
    "end": "164260"
  },
  {
    "text": "PowerPoint presentation and we also offer more than 300 applications that",
    "start": "164260",
    "end": "170650"
  },
  {
    "text": "everyone can add to the website week's build some of them and you can see some examples here and there are also",
    "start": "170650",
    "end": "177640"
  },
  {
    "text": "third-party applications in the crm platform team we build tools for SMBs",
    "start": "177640",
    "end": "183970"
  },
  {
    "text": "small medium businesses that help them to grow and manage their businesses online such as contacts chat and",
    "start": "183970",
    "end": "192489"
  },
  {
    "text": "invoices and when I join when I joined the team it was the early days of the",
    "start": "192489",
    "end": "198700"
  },
  {
    "text": "english's project and the idea was simple the business owner goes to the",
    "start": "198700",
    "end": "204099"
  },
  {
    "text": "app issues a new invoice and sends it to the customer the customer receives that",
    "start": "204099",
    "end": "211480"
  },
  {
    "text": "invoice and pays it online for example via PayPal the business owner can always",
    "start": "211480",
    "end": "218079"
  },
  {
    "text": "manage the in recess and track what was already paid what hasn't been paid yet",
    "start": "218079",
    "end": "223720"
  },
  {
    "text": "and see the overdue invoices now we're",
    "start": "223720",
    "end": "229720"
  },
  {
    "text": "all developers right so given some mock-ups we know more or less 90% of the",
    "start": "229720",
    "end": "235239"
  },
  {
    "text": "work okay I don't need the project manager to say the save button should save the invoice in the database so we",
    "start": "235239",
    "end": "243819"
  },
  {
    "text": "started to design the solution it's a classical layered architecture there is a rest endpoint that handles requests",
    "start": "243819",
    "end": "251889"
  },
  {
    "text": "that is data coming from the client passes it to the business logic that",
    "start": "251889",
    "end": "257380"
  },
  {
    "text": "does some magic and save it in the database through a domain model so the",
    "start": "257380",
    "end": "265810"
  },
  {
    "text": "user creates an invoice he fills in the form clicks on the Save button and then we make a post request",
    "start": "265810",
    "end": "272260"
  },
  {
    "text": "to the server we think really really hard what to do we make a decision and",
    "start": "272260",
    "end": "278020"
  },
  {
    "text": "we start the decision in the database this is how a new invoice is saved after",
    "start": "278020",
    "end": "285310"
  },
  {
    "text": "some time the user realized he had made a mistake so he goes to the invoice he",
    "start": "285310",
    "end": "291820"
  },
  {
    "text": "edits the details and click on save again we think really really hard what",
    "start": "291820",
    "end": "297640"
  },
  {
    "text": "to do we find the relevant record in the database and change it in place",
    "start": "297640",
    "end": "302830"
  },
  {
    "text": "according to the users request and you probably noticed that when the system is",
    "start": "302830",
    "end": "309400"
  },
  {
    "text": "designed like this we lose data by design ok it's not a security issue or a",
    "start": "309400",
    "end": "315820"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "technical constraint this is how the system is designed and well this",
    "start": "315820",
    "end": "322090"
  },
  {
    "text": "architecture might be perfect for some applications mostly because of its simplicity it cannot be used by",
    "start": "322090",
    "end": "329740"
  },
  {
    "text": "financial applications why regulation for weeks and also for excuses by law we",
    "start": "329740",
    "end": "337930"
  },
  {
    "text": "have to give our users the ability to track every action that was done in their invoices another requirement was",
    "start": "337930",
    "end": "347590"
  },
  {
    "text": "scalability Wix is more than 120 million users and 5 billion requests a day ok",
    "start": "347590",
    "end": "354430"
  },
  {
    "text": "and every invoice is viewed by the users of our users so we are talking about",
    "start": "354430",
    "end": "360820"
  },
  {
    "text": "large numbers and doing it right is challenging obviously we can add more",
    "start": "360820",
    "end": "366310"
  },
  {
    "text": "and more servers but it has a cost and of course as a leading company in the",
    "start": "366310",
    "end": "372910"
  },
  {
    "text": "web industry we want to be flexible and be able to add new features quickly and easily so we thought about new ways to",
    "start": "372910",
    "end": "381970"
  },
  {
    "text": "design the system to satisfy these requirements and we started researching",
    "start": "381970",
    "end": "387640"
  },
  {
    "text": "best practices in in different industries there is one industry that is prominent in regulation and scale can",
    "start": "387640",
    "end": "395380"
  },
  {
    "text": "someone guess what it is does anyone here think that when he or",
    "start": "395380",
    "end": "402490"
  },
  {
    "text": "she withdraws money from an ATM the record in the database changes and",
    "start": "402490",
    "end": "408090"
  },
  {
    "text": "what's interesting for me is that it's not only the banking industry the tubeless approach every single mature",
    "start": "408090",
    "end": "415270"
  },
  {
    "text": "industry that you look at is naturally event sourced financial medical",
    "start": "415270",
    "end": "421740"
  },
  {
    "text": "insurance legal all of them are conceptually event sourced and that's",
    "start": "421740",
    "end": "429520"
  },
  {
    "text": "what naturally brought us start looking at event sourcing for our invoice management application event sourcing is",
    "start": "429520",
    "end": "435490"
  },
  {
    "text": "a way to model your data that doesn't store the current state but rather a",
    "start": "435490",
    "end": "441220"
  },
  {
    "text": "sequence of events that led us to this state starting from some initial state and we can always restore the current",
    "start": "441220",
    "end": "448690"
  },
  {
    "text": "state by replaying the events and derive it from them of course we cannot do it",
    "start": "448690",
    "end": "454750"
  },
  {
    "text": "oppositely in this approach every action in our system is expressed by either",
    "start": "454750",
    "end": "461620"
  },
  {
    "text": "domain language and we have two basic building blocks we have commands and events a command is an external request",
    "start": "461620",
    "end": "471280"
  },
  {
    "text": "that is coming to our system it is always expressed in imperative language",
    "start": "471280",
    "end": "476920"
  },
  {
    "text": "like creating voice daleney invoice it represents users intent to do something",
    "start": "476920",
    "end": "483490"
  },
  {
    "text": "in our system and it may have a payload with some relevant details notice how",
    "start": "483490",
    "end": "490720"
  },
  {
    "text": "meaningful the command is compared to HTTP language like creating voice versus",
    "start": "490720",
    "end": "495850"
  },
  {
    "text": "post slash invoice etc etc after",
    "start": "495850",
    "end": "502210"
  },
  {
    "text": "validating the command it is transformed into a chain of events it can be one event or more that represents facts",
    "start": "502210",
    "end": "510040"
  },
  {
    "text": "something that happened in our system and why the command the event may also",
    "start": "510040",
    "end": "518620"
  },
  {
    "text": "have a payload with some relevant details and the event name is always in",
    "start": "518620",
    "end": "525760"
  },
  {
    "text": "in past form like create invoice in was created the leading voice it was deleted",
    "start": "525760",
    "end": "531280"
  },
  {
    "text": "okay and events are immutable they'll never",
    "start": "531280",
    "end": "536940"
  },
  {
    "text": "change so let's say you are a business",
    "start": "536940",
    "end": "547440"
  },
  {
    "text": "owner you created an invoice and you made a mistake now you want to delete",
    "start": "547440",
    "end": "552600"
  },
  {
    "text": "this invoice so what do you do you issue a command of deleting with command and",
    "start": "552600",
    "end": "562640"
  },
  {
    "text": "this command is transformed to in which deleted event but entry section was not",
    "start": "563750",
    "end": "570270"
  },
  {
    "text": "removed from the system just mark is deleted it's it's a logical delete we",
    "start": "570270",
    "end": "577140"
  },
  {
    "text": "are stating actions taken from the language of the business domain these are not SQL statements like insert or",
    "start": "577140",
    "end": "584580"
  },
  {
    "text": "select and not functions in your favor right Aurum the language is universal",
    "start": "584580",
    "end": "589680"
  },
  {
    "text": "among everyone involved whether a developer or domain expert read the",
    "start": "589680",
    "end": "595830"
  },
  {
    "text": "sequence they will get a full story and they will easily understand it after",
    "start": "595830",
    "end": "602730"
  },
  {
    "text": "transforming the command to events we store the events in the database with",
    "start": "602730",
    "end": "608730"
  },
  {
    "text": "the fast insert operation and the events are the single source of truth of the",
    "start": "608730",
    "end": "615120"
  },
  {
    "text": "system as you can see the database doesn't hold the current state rather it",
    "start": "615120",
    "end": "621450"
  },
  {
    "text": "holds the sequence of events that led us to this state and the benefit the",
    "start": "621450",
    "end": "627210"
  },
  {
    "text": "benefit here is there instead of writing down our decision we are writing down",
    "start": "627210",
    "end": "632910"
  },
  {
    "text": "what the user wanted from us when user",
    "start": "632910",
    "end": "639060"
  },
  {
    "text": "wants to view an invoice it's also called the current state referred to as an aggregate in ddd domain driven design",
    "start": "639060",
    "end": "646580"
  },
  {
    "text": "we retrieve the events of that invoice from the database and we apply them one",
    "start": "646580",
    "end": "652890"
  },
  {
    "text": "by one and rebuild the finalized state that is eventually returned to the user",
    "start": "652890",
    "end": "659300"
  },
  {
    "text": "and for those of you who are familiar with functional programming concepts",
    "start": "659300",
    "end": "665939"
  },
  {
    "text": "you can think about the state is the left fold or the previous behaviors in",
    "start": "665939",
    "end": "671069"
  },
  {
    "text": "each iteration the event changes the current state of the early date and",
    "start": "671069",
    "end": "676349"
  },
  {
    "text": "after iterating all the past events we return the state to the user so now when",
    "start": "676349",
    "end": "687359"
  },
  {
    "text": "we store every single action and we are able to rebuild the current state from",
    "start": "687359",
    "end": "692639"
  },
  {
    "text": "those actions our system is regulatory compliant but more importantly we are",
    "start": "692639",
    "end": "698489"
  },
  {
    "text": "not losing data and the whole system is described by the domain language and not in the language that technology forced",
    "start": "698489",
    "end": "705179"
  },
  {
    "text": "us to use but now we have a problem if we only store events how do you query",
    "start": "705179",
    "end": "712379"
  },
  {
    "text": "them well I have an idea let's replay every vent that was ever",
    "start": "712379",
    "end": "718559"
  },
  {
    "text": "stored in the system you should be fast right so let's talk",
    "start": "718559",
    "end": "723569"
  },
  {
    "text": "about queries and more importantly querying it scale if we examine the",
    "start": "723569",
    "end": "730349"
  },
  {
    "text": "distribution of flow between read and write operations in in web-scale application most systems have more read",
    "start": "730349",
    "end": "738119"
  },
  {
    "text": "operations that deny their operations it actually mutate the data more or less",
    "start": "738119",
    "end": "745769"
  },
  {
    "text": "it's around 90% of them are read operations and when we design a system",
    "start": "745769",
    "end": "752429"
  },
  {
    "text": "in large scale we tend to bind the read and the write model despite the fact",
    "start": "752429",
    "end": "757559"
  },
  {
    "text": "that in most cases they are totally different it is much easier to scale",
    "start": "757559",
    "end": "762629"
  },
  {
    "text": "riddle quest of immutable data than write requests we don't need to manage",
    "start": "762629",
    "end": "768529"
  },
  {
    "text": "complex locking mechanisms or handle inconsistencies and besides that most of",
    "start": "768529",
    "end": "775979"
  },
  {
    "text": "the time we don't want to read the data in the same form it was written in okay",
    "start": "775979",
    "end": "781909"
  },
  {
    "text": "how many of you have large complex SQL statements like these in your",
    "start": "781909",
    "end": "788099"
  },
  {
    "text": "application come on don't be shy we all have it I just look at me squaring and",
    "start": "788099",
    "end": "794939"
  },
  {
    "text": "the only thought that comes to my mind is what the hell is going on here so crowd is difficult to scare but with",
    "start": "794939",
    "end": "804029"
  },
  {
    "start": "803000",
    "end": "803000"
  },
  {
    "text": "we have more considerations like normalizing the data to support new features in the future I'm like",
    "start": "804029",
    "end": "811440"
  },
  {
    "text": "full-text search or graphic capabilities they are not supported by the current",
    "start": "811440",
    "end": "816720"
  },
  {
    "text": "data store you remember my story from the beginning",
    "start": "816720",
    "end": "821810"
  },
  {
    "text": "so in fact what we need to do is to separate the process of updates and the",
    "start": "822080",
    "end": "827940"
  },
  {
    "text": "provision of queries and this pattern is called CQRS ok stands for command query",
    "start": "827940",
    "end": "835370"
  },
  {
    "text": "responsibility segregation in most of the events or systems usually don't",
    "start": "835370",
    "end": "841980"
  },
  {
    "text": "query your events you end up with a concept called rid models or views so",
    "start": "841980",
    "end": "848820"
  },
  {
    "text": "every time a new event is written to the system it may also update a view and a",
    "start": "848820",
    "end": "855900"
  },
  {
    "text": "view is read optimized set a set of data that is used to make the reads faster it",
    "start": "855900",
    "end": "866339"
  },
  {
    "text": "can be normalized pre aggregated table in my sequel but it doesn't have to be",
    "start": "866339",
    "end": "871529"
  },
  {
    "text": "relational actually we can here you can use a JSON file elasticsearch schema and",
    "start": "871529",
    "end": "879540"
  },
  {
    "text": "it's not necessarily stored in the same day store like the events okay you can use different data stores for different",
    "start": "879540",
    "end": "886980"
  },
  {
    "text": "kinds of view and this pattern allows allows us to see our data from different",
    "start": "886980",
    "end": "893430"
  },
  {
    "text": "points of view when in your requirement comes we just add a new view to the",
    "start": "893430",
    "end": "900060"
  },
  {
    "text": "system and build it by replaying the events from the beginning so when you",
    "start": "900060",
    "end": "906779"
  },
  {
    "text": "work this way you cannot change what happened in the past but you can have a new perception of what happened in the",
    "start": "906779",
    "end": "913650"
  },
  {
    "text": "past and I'll give you an example this is a screenshot from our invoice",
    "start": "913650",
    "end": "919709"
  },
  {
    "text": "management application and you have the numbers on the top you have paid sent an",
    "start": "919709",
    "end": "925800"
  },
  {
    "text": "average you and actually it is stored in the database in the same form you can",
    "start": "925800",
    "end": "931920"
  },
  {
    "text": "see it here in in the user interface we have the same columns we have page sent in a video and",
    "start": "931920",
    "end": "939390"
  },
  {
    "text": "of course another column that identifies the the tenant and also for the table",
    "start": "939390",
    "end": "947490"
  },
  {
    "text": "below the table of the invoices we have the same table in my sink well we have",
    "start": "947490",
    "end": "953340"
  },
  {
    "text": "another come for the tenant a identifier so it looks simple but if you introduce",
    "start": "953340",
    "end": "961800"
  },
  {
    "text": "you new ways to design and architect your systems for example you can you can",
    "start": "961800",
    "end": "969240"
  },
  {
    "text": "execute the read and the write model in the same service or separate them to",
    "start": "969240",
    "end": "974280"
  },
  {
    "text": "different services and different databases and when you have two separate",
    "start": "974280",
    "end": "980450"
  },
  {
    "text": "services you can scale each of them independently okay you can deploy the",
    "start": "980450",
    "end": "988020"
  },
  {
    "text": "right model in your own data center and move the rig model to the cloud but when",
    "start": "988020",
    "end": "995880"
  },
  {
    "text": "using this pattern and separating the the models you should take in account the inconsistency window between writing",
    "start": "995880",
    "end": "1003650"
  },
  {
    "text": "the events to the event store and updating the views accordingly and you",
    "start": "1003650",
    "end": "1010510"
  },
  {
    "text": "lose the strong consistency and you end up with eventual consistency and while",
    "start": "1010510",
    "end": "1016940"
  },
  {
    "text": "some applications can live with that limitation others cannot so it depends",
    "start": "1016940",
    "end": "1022250"
  },
  {
    "text": "on the business prominence one more thing about CTRs is there you can use",
    "start": "1022250",
    "end": "1029180"
  },
  {
    "text": "secure res pattern without event sourcing although then naturally go together and I'll give you an example",
    "start": "1029180",
    "end": "1037600"
  },
  {
    "text": "when you publish a Wix website we create a special special site that is highly",
    "start": "1037600",
    "end": "1045860"
  },
  {
    "text": "optimized for our for our viewer application and it is stored separately",
    "start": "1045860",
    "end": "1051040"
  },
  {
    "text": "from the is the editing model we have the editing model and the viewer model and it allows you it allows we close us",
    "start": "1051040",
    "end": "1060050"
  },
  {
    "text": "sorry two separate weeks to two different segments we have the arrow",
    "start": "1060050",
    "end": "1065060"
  },
  {
    "text": "segment and we have the public segments and each segment has its own",
    "start": "1065060",
    "end": "1071210"
  },
  {
    "text": "scaling policy and SLA policy so you can use securest",
    "start": "1071210",
    "end": "1077180"
  },
  {
    "text": "without event source engine that's totally fine remember that CQRS is an",
    "start": "1077180",
    "end": "1084320"
  },
  {
    "start": "1081000",
    "end": "1081000"
  },
  {
    "text": "optimization and like every optimization be aware of doing it prematurely it is",
    "start": "1084320",
    "end": "1091160"
  },
  {
    "text": "difficult to do it well and it makes the system more complex so please don't try",
    "start": "1091160",
    "end": "1097190"
  },
  {
    "text": "to solve problems that are probably not existent in the system okay and out of",
    "start": "1097190",
    "end": "1102860"
  },
  {
    "text": "everything I will say today this one is probably the most important I would",
    "start": "1102860",
    "end": "1109220"
  },
  {
    "text": "suggest you consider doing CPRS when you really have scaling issues in the system",
    "start": "1109220",
    "end": "1115070"
  },
  {
    "text": "and when the distribution of flow between read and write operations is",
    "start": "1115070",
    "end": "1120110"
  },
  {
    "text": "highly as symmetrical for example in the image management application we started",
    "start": "1120110",
    "end": "1128360"
  },
  {
    "text": "by reading the events in every reader quest and building the views in memory",
    "start": "1128360",
    "end": "1133940"
  },
  {
    "text": "and when the applications grow in scalability started to be an issue we",
    "start": "1133940",
    "end": "1139820"
  },
  {
    "text": "changed some views to be persistent and that improved the response time of the",
    "start": "1139820",
    "end": "1144830"
  },
  {
    "text": "read model so eventually we came up with",
    "start": "1144830",
    "end": "1151700"
  },
  {
    "text": "the following design so when a user wants to send an invoice to his customer",
    "start": "1151700",
    "end": "1158420"
  },
  {
    "text": "and the clients issues a command and send in with the customer and then it",
    "start": "1158420",
    "end": "1169250"
  },
  {
    "text": "makes a post request to execute endpoint and then we pass this command to the",
    "start": "1169250",
    "end": "1176840"
  },
  {
    "text": "command decoder the command decoder is responsible for the this realization",
    "start": "1176840",
    "end": "1183260"
  },
  {
    "text": "from JSON object to JVM object so we can do some validations and we will touch",
    "start": "1183260",
    "end": "1191060"
  },
  {
    "text": "the validation soon and then it is passed to the command Handler and the",
    "start": "1191060",
    "end": "1196610"
  },
  {
    "text": "command handler is responsible for transforming the command to events can be event or sequence of",
    "start": "1196610",
    "end": "1203570"
  },
  {
    "text": "events and then we first store the event",
    "start": "1203570",
    "end": "1208789"
  },
  {
    "text": "to the event store and then we publish it to the event bus and we have multiple",
    "start": "1208789",
    "end": "1215749"
  },
  {
    "text": "consumers of that bus we have analytics for BI and we have",
    "start": "1215749",
    "end": "1221059"
  },
  {
    "text": "emails it is consumers that actually sends the invoice to the customer and we have read",
    "start": "1221059",
    "end": "1228649"
  },
  {
    "text": "optimize view for example the table the table of invoices I showed you earlier",
    "start": "1228649",
    "end": "1235989"
  },
  {
    "text": "we just update the status of the invoice from draft to send so this is the the",
    "start": "1235989",
    "end": "1243859"
  },
  {
    "text": "right flow obviously it's very high level and the red flow is very very",
    "start": "1243859",
    "end": "1251299"
  },
  {
    "text": "simple when you work is why we just go to the end point invoice with invoice ID",
    "start": "1251299",
    "end": "1257929"
  },
  {
    "text": "and then we just go to the read optimize view we fetch the relevant view and",
    "start": "1257929",
    "end": "1263269"
  },
  {
    "text": "return to the user we have another arrow we will touch it soon and that updates",
    "start": "1263269",
    "end": "1270619"
  },
  {
    "text": "the view during the read process we just compare the version from the event store",
    "start": "1270619",
    "end": "1276169"
  },
  {
    "text": "in the view and if there is a gap we update the view and return it it's like a self-healing mechanism so now by using",
    "start": "1276169",
    "end": "1290149"
  },
  {
    "text": "the secure arrest pattern the system can run in large scale and we can add new",
    "start": "1290149",
    "end": "1295909"
  },
  {
    "text": "features easily by creating views but basically we got more than that first",
    "start": "1295909",
    "end": "1303409"
  },
  {
    "text": "since we store every user's action without an audit log for free and by",
    "start": "1303409",
    "end": "1309409"
  },
  {
    "text": "design every change in our system is logged in accurately and because we are",
    "start": "1309409",
    "end": "1316609"
  },
  {
    "text": "relying on it as a source of truth we are more confident to use it than a regular text file that's actually a very",
    "start": "1316609",
    "end": "1325099"
  },
  {
    "text": "powerful tool you can use this log for different purposes for example for",
    "start": "1325099",
    "end": "1330710"
  },
  {
    "text": "testing purposes if you want to understand what led the",
    "start": "1330710",
    "end": "1339330"
  },
  {
    "text": "user to the current state like a debugging tool so you can also use this",
    "start": "1339330",
    "end": "1345780"
  },
  {
    "text": "audit log you can also take those events and replay them in different environment",
    "start": "1345780",
    "end": "1352350"
  },
  {
    "text": "in different datastore isolated from the production environment if let's say we",
    "start": "1352350",
    "end": "1359790"
  },
  {
    "text": "want to test a new feature and want to test it on on the existing data we can",
    "start": "1359790",
    "end": "1367080"
  },
  {
    "text": "just take this feature isolated from the production environment and replay the events with a new feature actually we",
    "start": "1367080",
    "end": "1375780"
  },
  {
    "text": "can restore the system at some point in time by replaying the events until that",
    "start": "1375780",
    "end": "1381030"
  },
  {
    "text": "point so if you want to know how an aggregate looks like a few weeks ago you",
    "start": "1381030",
    "end": "1386490"
  },
  {
    "text": "can just do it and you cannot only",
    "start": "1386490",
    "end": "1391710"
  },
  {
    "text": "restore the data but you can analyze historical data that would be lost if",
    "start": "1391710",
    "end": "1396930"
  },
  {
    "text": "you didn't use event sourcing as our data model for example when you whenever",
    "start": "1396930",
    "end": "1403350"
  },
  {
    "text": "you come up with a new idea or new algorithm to analyze your data you can",
    "start": "1403350",
    "end": "1409080"
  },
  {
    "text": "just update the event handler and then replay the events from the beginning and",
    "start": "1409080",
    "end": "1416090"
  },
  {
    "text": "this is a very powerful tool and trust me you're bi analysts will thank you for",
    "start": "1416090",
    "end": "1421380"
  },
  {
    "text": "that another interesting feature is the",
    "start": "1421380",
    "end": "1426780"
  },
  {
    "text": "ability to create different schemas according to the system requirements and",
    "start": "1426780",
    "end": "1432920"
  },
  {
    "text": "the event stream is the single source of truth of the system and views are",
    "start": "1432920",
    "end": "1438840"
  },
  {
    "text": "derived from it think about it at any point in time I can blow away my views completely and",
    "start": "1438840",
    "end": "1446480"
  },
  {
    "text": "rebuild them from the events this ability makes it easier for everyone in",
    "start": "1446480",
    "end": "1453180"
  },
  {
    "text": "your company to consume that event stream and build their own view of the",
    "start": "1453180",
    "end": "1458460"
  },
  {
    "text": "world so I'm looking at you and you",
    "start": "1458460",
    "end": "1464700"
  },
  {
    "text": "probably think silver bullets right too good to be true so I'm going to tell you a secret event",
    "start": "1464700",
    "end": "1472760"
  },
  {
    "text": "sourcing in CTRs are not magical solutions for your system as you",
    "start": "1472760",
    "end": "1478760"
  },
  {
    "start": "1473000",
    "end": "1473000"
  },
  {
    "text": "probably know choices of architecture are never good versus bad it's just a trade-off it's some context and you must",
    "start": "1478760",
    "end": "1486380"
  },
  {
    "text": "take into account the complexities of every solution you choose ok it's not necessarily relevant to events often",
    "start": "1486380",
    "end": "1493880"
  },
  {
    "text": "CQRS it's relevant for every architecture in every system you build some challenges are raised only when you",
    "start": "1493880",
    "end": "1501230"
  },
  {
    "text": "work on on a real application with real traffic and real business behind it and",
    "start": "1501230",
    "end": "1507950"
  },
  {
    "text": "those challenges can appear in two different forms number one the",
    "start": "1507950",
    "end": "1515120"
  },
  {
    "text": "development model is unusual especially when you work with separated read and",
    "start": "1515120",
    "end": "1521330"
  },
  {
    "text": "write models it feels strange at the beginning there is learning curve but",
    "start": "1521330",
    "end": "1527450"
  },
  {
    "text": "it's not that hard to get you straight but let me ask you a question why do you prefer a very thin layer that",
    "start": "1527450",
    "end": "1534740"
  },
  {
    "text": "handles commands and events or a very complex database schema that restricts",
    "start": "1534740",
    "end": "1540950"
  },
  {
    "text": "the courage you can run now after separating the read and the write models",
    "start": "1540950",
    "end": "1548679"
  },
  {
    "text": "you can work with different data stores for various models well how do you",
    "start": "1548679",
    "end": "1557570"
  },
  {
    "text": "manage them how do you do backups",
    "start": "1557570",
    "end": "1563710"
  },
  {
    "text": "what about monitoring so during the development of weeks invoices and some",
    "start": "1563710",
    "end": "1571370"
  },
  {
    "text": "other risk products that used our event sourcing infrastructure to manage their",
    "start": "1571370",
    "end": "1577130"
  },
  {
    "text": "data we encountered three major challenges",
    "start": "1577130",
    "end": "1582760"
  },
  {
    "text": "how do you keep your views in a consistent state is your application has",
    "start": "1588250",
    "end": "1595040"
  },
  {
    "text": "to be fully consistent or can it be settled for eventually consistent",
    "start": "1595040",
    "end": "1600400"
  },
  {
    "text": "eventual consistency means the data doesn't have to be consistent all the",
    "start": "1600400",
    "end": "1605840"
  },
  {
    "text": "time the only guarantee is that data becomes consistent at some point in time",
    "start": "1605840",
    "end": "1611020"
  },
  {
    "text": "eventually and for most applications eventual eventual consistency is",
    "start": "1611020",
    "end": "1618740"
  },
  {
    "text": "sufficient but there is no single solution for that again it is always a trade-off between consistency and",
    "start": "1618740",
    "end": "1626150"
  },
  {
    "text": "performance okay it's it's based on the business and the domain requirements so",
    "start": "1626150",
    "end": "1633830"
  },
  {
    "text": "first of all we can build a fully consistent system by replaying the events in every read request and",
    "start": "1633830",
    "end": "1640880"
  },
  {
    "text": "building the views in memory the disadvantage of this approach is the",
    "start": "1640880",
    "end": "1647540"
  },
  {
    "text": "strong binding between the read and the write model which makes it harder to scale a system especially when you work",
    "start": "1647540",
    "end": "1656990"
  },
  {
    "text": "with complex views another possible solution is to use is to do CQRS with",
    "start": "1656990",
    "end": "1666740"
  },
  {
    "text": "sync synchronous writes I don't have to use a heavy weight distributed bus like",
    "start": "1666740",
    "end": "1672410"
  },
  {
    "text": "Kafka in order to update your views you can just do it synchronously in this",
    "start": "1672410",
    "end": "1679280"
  },
  {
    "text": "approach we have all the benefits of the normalized read optimized views but the",
    "start": "1679280",
    "end": "1685790"
  },
  {
    "text": "writes will be slower since we need to update multiple views so we can do it",
    "start": "1685790",
    "end": "1691760"
  },
  {
    "text": "better and a better solution might be comparing the current version of the",
    "start": "1691760",
    "end": "1698720"
  },
  {
    "text": "view with the current version of the event store and if there is a gap between them we update the view and",
    "start": "1698720",
    "end": "1705800"
  },
  {
    "text": "return it to the user so these are the",
    "start": "1705800",
    "end": "1713030"
  },
  {
    "text": "main three solutions of handling views inconsistency and of course",
    "start": "1713030",
    "end": "1719270"
  },
  {
    "text": "it is suitable you can choose the consistency level per view and you can",
    "start": "1719270",
    "end": "1724460"
  },
  {
    "text": "also mix these methods it depends on on a view consistency is a product concern",
    "start": "1724460",
    "end": "1735980"
  },
  {
    "start": "1732000",
    "end": "1732000"
  },
  {
    "text": "not technology and this is a very important point and most of the team",
    "start": "1735980",
    "end": "1742910"
  },
  {
    "text": "don't do this conversation with a product manager they just choose the consistency level by themselves so I'm",
    "start": "1742910",
    "end": "1750590"
  },
  {
    "text": "really sorry guys but it's not our business just give it to give the",
    "start": "1750590",
    "end": "1756340"
  },
  {
    "text": "product manager to decide and do it so",
    "start": "1756340",
    "end": "1763340"
  },
  {
    "text": "the next topic is validation how do you validate the commands in your system and",
    "start": "1763340",
    "end": "1770680"
  },
  {
    "text": "validations come in different variations we have a different level of validations",
    "start": "1770680",
    "end": "1777290"
  },
  {
    "text": "and the basic level of validation is validating the payload data for example",
    "start": "1777290",
    "end": "1785990"
  },
  {
    "text": "string length or numbers range and in",
    "start": "1785990",
    "end": "1791060"
  },
  {
    "text": "weeks we use a code for this kind of validation accord is an open source car",
    "start": "1791060",
    "end": "1796220"
  },
  {
    "text": "based library that allows you to validate input data easily and with a",
    "start": "1796220",
    "end": "1802760"
  },
  {
    "text": "very very simple DSL and you can see an example here even if you don't know",
    "start": "1802760",
    "end": "1809030"
  },
  {
    "text": "skaara the syntax is very simple and this is the first stage of the",
    "start": "1809030",
    "end": "1815270"
  },
  {
    "text": "validation process we can also verify that a given command can be performed on",
    "start": "1815270",
    "end": "1822280"
  },
  {
    "text": "the current state of some domain entity for example the application cannot",
    "start": "1822280",
    "end": "1829520"
  },
  {
    "text": "handle update command if the aggregate was already deleted and for this use",
    "start": "1829520",
    "end": "1838700"
  },
  {
    "text": "case we mark these special commands delete create we start rate scarlet rate",
    "start": "1838700",
    "end": "1845630"
  },
  {
    "text": "is like a Java interface and when we handle the",
    "start": "1845630",
    "end": "1851650"
  },
  {
    "text": "we take its type against the current state of the aggregate and what about",
    "start": "1851650",
    "end": "1860980"
  },
  {
    "text": "more complex validations for instance let's talk about uniqueness imagine that",
    "start": "1860980",
    "end": "1869860"
  },
  {
    "text": "you are developing a contact management system okay how can you make sure that there is only",
    "start": "1869860",
    "end": "1876970"
  },
  {
    "text": "one contact pertinent with given email",
    "start": "1876970",
    "end": "1882150"
  },
  {
    "text": "so a possible solution for this case is creating a special persistent view for",
    "start": "1882150",
    "end": "1889090"
  },
  {
    "text": "for this validation that contains all the emails that belong to some tenant and on the validation phase before",
    "start": "1889090",
    "end": "1897070"
  },
  {
    "text": "transforming the command to events we check if the given email already exists",
    "start": "1897070",
    "end": "1902920"
  },
  {
    "text": "and if it does we'll throw an exception and I know I know some of you may",
    "start": "1902920",
    "end": "1908920"
  },
  {
    "text": "probably notice that validation that is based on a view may raise inconsistency",
    "start": "1908920",
    "end": "1914559"
  },
  {
    "text": "problems and you're basically right again it depends on the business and the",
    "start": "1914559",
    "end": "1919870"
  },
  {
    "start": "1917000",
    "end": "1917000"
  },
  {
    "text": "domain requirement some systems can live with this invalid data once I don't know",
    "start": "1919870",
    "end": "1927010"
  },
  {
    "text": "in once in a million rights but are the others cannot and you should take in",
    "start": "1927010",
    "end": "1932860"
  },
  {
    "text": "account when you design a system using secure risks and eventually the last",
    "start": "1932860",
    "end": "1943000"
  },
  {
    "text": "thing I want to talk about is concurrent rights so let's see all the two commands",
    "start": "1943000",
    "end": "1949090"
  },
  {
    "text": "were written at the same time updating voice and leading voice what would be",
    "start": "1949090",
    "end": "1955780"
  },
  {
    "text": "the state of this invoice eventually so",
    "start": "1955780",
    "end": "1961840"
  },
  {
    "text": "one solution is pessimistic locking so only one command pool aggregate can be",
    "start": "1961840",
    "end": "1967720"
  },
  {
    "text": "handled at the same time once the first command takes the lock any other command",
    "start": "1967720",
    "end": "1974080"
  },
  {
    "text": "will wait for that for the lock to be released and this is the safest way to",
    "start": "1974080",
    "end": "1980010"
  },
  {
    "text": "prevent concurrency issues but obviously it's the slowest and most complex way we need",
    "start": "1980010",
    "end": "1989389"
  },
  {
    "text": "to manage distributed lock and handle timeouts yak so we have a much better",
    "start": "1989389",
    "end": "1998149"
  },
  {
    "text": "solution so let's talk about optimistic locking or versioning so each event or",
    "start": "1998149",
    "end": "2007119"
  },
  {
    "text": "the aggregate has a version it's it is",
    "start": "2007119",
    "end": "2013659"
  },
  {
    "text": "incremented by one every time a new event is written to the system the",
    "start": "2013659",
    "end": "2019450"
  },
  {
    "text": "version of the r8 is the version of its last event and in this solution each",
    "start": "2019450",
    "end": "2028840"
  },
  {
    "text": "command has the expected version it is the version that the aggregate was when",
    "start": "2028840",
    "end": "2034629"
  },
  {
    "text": "the command was issued and in case of a gap between the expected version and the",
    "start": "2034629",
    "end": "2040629"
  },
  {
    "text": "current version will throw an exception",
    "start": "2040629",
    "end": "2045480"
  },
  {
    "text": "we can also resolve the conflict by merging the events if if possible and",
    "start": "2045779",
    "end": "2053049"
  },
  {
    "text": "let's see an example so here we have two different events that written at the",
    "start": "2053049",
    "end": "2060819"
  },
  {
    "text": "same time with the same version but different type in this use case we can",
    "start": "2060819",
    "end": "2067990"
  },
  {
    "text": "merge the event by incrementing one of the events by one but in this case we",
    "start": "2067990",
    "end": "2078760"
  },
  {
    "text": "have two different events with the same type with the same version and they were",
    "start": "2078760",
    "end": "2084908"
  },
  {
    "text": "written at the same time so we cannot resolve it and in this use case",
    "start": "2084909",
    "end": "2090398"
  },
  {
    "text": "we'll throw an exception and you can",
    "start": "2090399",
    "end": "2095919"
  },
  {
    "text": "guess that also here the way we handle concurrent writes is based on the",
    "start": "2095919",
    "end": "2102010"
  },
  {
    "start": "2098000",
    "end": "2098000"
  },
  {
    "text": "business requirements not on the technology in a content management",
    "start": "2102010",
    "end": "2107290"
  },
  {
    "text": "system we can probably merge events have the address event and new email event so",
    "start": "2107290",
    "end": "2114630"
  },
  {
    "text": "that's fine however if we Spanish meant in mounting a more sensitive domains and",
    "start": "2114630",
    "end": "2120960"
  },
  {
    "text": "merging the events may change the English completely so we've talked about",
    "start": "2120960",
    "end": "2134590"
  },
  {
    "start": "2132000",
    "end": "2132000"
  },
  {
    "text": "CQRS event sourcing and we've seen how to design a system using them and some",
    "start": "2134590",
    "end": "2142270"
  },
  {
    "text": "challenges that you're going to face so whatever we learnt weeks in the past",
    "start": "2142270",
    "end": "2147940"
  },
  {
    "text": "three years from using these patterns",
    "start": "2147940",
    "end": "2153450"
  },
  {
    "text": "first of all start small don't try to model every entity in your",
    "start": "2153690",
    "end": "2158740"
  },
  {
    "start": "2154000",
    "end": "2154000"
  },
  {
    "text": "system using events that's a real bad idea so before you go back and say we",
    "start": "2158740",
    "end": "2165250"
  },
  {
    "text": "done say it we should separate read and write and model every entity in our system with events ask yourself the",
    "start": "2165250",
    "end": "2172150"
  },
  {
    "text": "following question they all really have a benefit by storing the history of",
    "start": "2172150",
    "end": "2177430"
  },
  {
    "text": "those actions is it worth the operational cost of modeling it with",
    "start": "2177430",
    "end": "2182530"
  },
  {
    "text": "events or can you remain with quad I'll give you an example in in the in waste",
    "start": "2182530",
    "end": "2189820"
  },
  {
    "text": "management application we have a feature called tax presets it's a taxes name and",
    "start": "2189820",
    "end": "2196150"
  },
  {
    "text": "tax rate and it's a preset just you can use it to create invoices faster is this",
    "start": "2196150",
    "end": "2203920"
  },
  {
    "text": "feature worth the cost of modeling with events what would if you look like tax",
    "start": "2203920",
    "end": "2211210"
  },
  {
    "text": "name tax rate and tenant ID so grant sounds like a better better approach",
    "start": "2211210",
    "end": "2218290"
  },
  {
    "text": "here although the rest of the system is all events source code changes once an",
    "start": "2218290",
    "end": "2227980"
  },
  {
    "start": "2225000",
    "end": "2225000"
  },
  {
    "text": "event of some type was written to the datastore you cannot remove its",
    "start": "2227980",
    "end": "2234400"
  },
  {
    "text": "definition from the codebase it is always it's also harder to make changes",
    "start": "2234400",
    "end": "2242470"
  },
  {
    "text": "in the event like adding fields or removing fields you should always think",
    "start": "2242470",
    "end": "2247900"
  },
  {
    "text": "about backwards compatibility and remember once events are written to",
    "start": "2247900",
    "end": "2254820"
  },
  {
    "text": "the datastore there will be there forever okay so your your code should",
    "start": "2254820",
    "end": "2260460"
  },
  {
    "text": "know how to handle them and even when you stop writing them or deprecated the",
    "start": "2260460",
    "end": "2267240"
  },
  {
    "text": "events so either do a migration plan to",
    "start": "2267240",
    "end": "2272750"
  },
  {
    "text": "migrate the old events to new events or just make your code to handle the old",
    "start": "2272750",
    "end": "2281520"
  },
  {
    "text": "events the last and the most important",
    "start": "2281520",
    "end": "2287250"
  },
  {
    "text": "point in my opinion is that events are the fundamental source of truth and you",
    "start": "2287250",
    "end": "2294030"
  },
  {
    "text": "can always delete the views and reconstruct them by replaying the events",
    "start": "2294030",
    "end": "2301100"
  },
  {
    "text": "this ability gives you a lot of power you can build your user interface",
    "start": "2301100",
    "end": "2307070"
  },
  {
    "text": "incrementally you don't have to normalize your data right complex",
    "start": "2307070",
    "end": "2314250"
  },
  {
    "text": "queries or run data migration scripts just remove the view and build a new one",
    "start": "2314250",
    "end": "2321330"
  },
  {
    "text": "from the events so I hope I convinced",
    "start": "2321330",
    "end": "2326970"
  },
  {
    "text": "you that it's worth researching more here are some references that might be helpful for you and here are some JVM",
    "start": "2326970",
    "end": "2335310"
  },
  {
    "text": "libraries that allows you to build event sourcing and CQRS applications we are",
    "start": "2335310",
    "end": "2341430"
  },
  {
    "text": "working on open sourcing our internal event sourcing library hopefully we will",
    "start": "2341430",
    "end": "2347670"
  },
  {
    "text": "release it soon now also similar similar libraries in",
    "start": "2347670",
    "end": "2354300"
  },
  {
    "text": "the JavaScript world in dotnet and that's the whole idea okay",
    "start": "2354300",
    "end": "2361410"
  },
  {
    "text": "it's a pattern it's patterns are language agnostic okay",
    "start": "2361410",
    "end": "2368400"
  },
  {
    "text": "language is implementation detail but",
    "start": "2368400",
    "end": "2376520"
  },
  {
    "text": "people are always asking me okay that's a very nice pattern but we want to see",
    "start": "2376520",
    "end": "2382500"
  },
  {
    "text": "some code give us some for example some so let's see how we",
    "start": "2382500",
    "end": "2388020"
  },
  {
    "text": "implemented the event rippling mechanism in in Scala if you have any questions",
    "start": "2388020",
    "end": "2396240"
  },
  {
    "text": "about the syntax just raise your hand so here we have the load method we have the",
    "start": "2396240",
    "end": "2403410"
  },
  {
    "text": "tenant ID and the aggregate ID and we can pass a revision if you want to view",
    "start": "2403410",
    "end": "2410310"
  },
  {
    "text": "an aggregate in specific version it is optional and the first step we just",
    "start": "2410310",
    "end": "2418800"
  },
  {
    "text": "fetch the events from the event store we have the event stream reader that just",
    "start": "2418800",
    "end": "2424050"
  },
  {
    "text": "read the events from the database and then we build the aggregate we have the",
    "start": "2424050",
    "end": "2432810"
  },
  {
    "text": "reduce function that is passed to the class not to the metal and we have the",
    "start": "2432810",
    "end": "2440040"
  },
  {
    "text": "empty state the empty state is based on the algorithm okay a and we just map the",
    "start": "2440040",
    "end": "2448830"
  },
  {
    "text": "events to to the data just need the payload and then after building the",
    "start": "2448830",
    "end": "2454350"
  },
  {
    "text": "aggregate we return the snapshot to the user but this is this is an important",
    "start": "2454350",
    "end": "2462240"
  },
  {
    "text": "line so let's see how implement the reducer we have a user we have the",
    "start": "2462240",
    "end": "2473760"
  },
  {
    "text": "reduce method it depends on the aggregate so every aggregate implements",
    "start": "2473760",
    "end": "2480830"
  },
  {
    "text": "its own reduce function and we have the",
    "start": "2480830",
    "end": "2486660"
  },
  {
    "text": "aggregate and events and the method returns a new aggregate and we have the",
    "start": "2486660",
    "end": "2493950"
  },
  {
    "text": "apply method that just fold left with a some initial state and with a reduced",
    "start": "2493950",
    "end": "2500760"
  },
  {
    "text": "function and this is looks familiar",
    "start": "2500760",
    "end": "2507390"
  },
  {
    "text": "no we have the reduce do remember this slide from the beginning",
    "start": "2507390",
    "end": "2514850"
  },
  {
    "text": "so they summarized event sourcing is a pattern that allows you to capture your",
    "start": "2515460",
    "end": "2521579"
  },
  {
    "text": "users intent by writing down the house story of what the user does in your system this pattern goes naturally with",
    "start": "2521579",
    "end": "2530400"
  },
  {
    "text": "another pattern CQRS that gives you the power to evolve your business logic",
    "start": "2530400",
    "end": "2535470"
  },
  {
    "text": "incrementally by using views and by separating the read operations in the",
    "start": "2535470",
    "end": "2541230"
  },
  {
    "text": "write operations it allows you to resolve scaling issues that may be",
    "start": "2541230",
    "end": "2547079"
  },
  {
    "text": "raised when a system grow however like every other architecture",
    "start": "2547079",
    "end": "2553289"
  },
  {
    "text": "there are some trade-offs that you must take in account when working this way and we've talked about them we talked",
    "start": "2553289",
    "end": "2559980"
  },
  {
    "text": "we've talked about validations we've talked about handling views inconsistencies and how to handle",
    "start": "2559980",
    "end": "2568140"
  },
  {
    "text": "concurrent rights so in conclusion if we go back when we started the inversus",
    "start": "2568140",
    "end": "2574380"
  },
  {
    "text": "project none of us had an idea of what events or single secure arrests are we",
    "start": "2574380",
    "end": "2581369"
  },
  {
    "text": "knew the concepts but we had no idea how to implement them and what are the",
    "start": "2581369",
    "end": "2587220"
  },
  {
    "text": "challenges were going to face since then we've migrated and implemented multiples",
    "start": "2587220",
    "end": "2595849"
  },
  {
    "text": "products in you in weeks to use our event sourcing infrastructure to manage",
    "start": "2595849",
    "end": "2602369"
  },
  {
    "text": "the data it absolutely changed the way I think about data thank you very much",
    "start": "2602369",
    "end": "2608819"
  },
  {
    "text": "keep it in your event store so before you before you I we moved",
    "start": "2608819",
    "end": "2619510"
  },
  {
    "text": "their questions I'd like to hear what you thought about a presentation and if you have any feedback so if you'd like",
    "start": "2619510",
    "end": "2625780"
  },
  {
    "text": "the slide just go to this URL now yes secure is there online answer a very short survey it was like",
    "start": "2625780",
    "end": "2631600"
  },
  {
    "text": "use 30 seconds and promise 30 seconds push submit and you'll be taken to the",
    "start": "2631600",
    "end": "2636670"
  },
  {
    "text": "slide and I'm also available in Twitter if you have any questions so feel free to contact me and I'll be here for",
    "start": "2636670",
    "end": "2644020"
  },
  {
    "text": "questions and I have some quick spin so feel free to take some and enjoy the",
    "start": "2644020",
    "end": "2654190"
  },
  {
    "text": "party tonight thank you [Applause]",
    "start": "2654190",
    "end": "2660940"
  }
]