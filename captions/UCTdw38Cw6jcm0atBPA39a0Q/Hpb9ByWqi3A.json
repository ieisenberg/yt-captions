[
  {
    "start": "0",
    "end": "290000"
  },
  {
    "text": "okay right hi everyone I'm David McKeever I wrote a testing library called hypothesis",
    "start": "12410",
    "end": "18820"
  },
  {
    "text": "which I'm here to tell you about today and I'm also going to talk to you sort of in general about some of the theory",
    "start": "18820",
    "end": "26140"
  },
  {
    "text": "of this sort of testing and like why it's useful and why everything is terrible and correct software is",
    "start": "26140",
    "end": "32168"
  },
  {
    "text": "impossible but before we get started I'm",
    "start": "32169",
    "end": "37300"
  },
  {
    "text": "just going to on like the bigger picture I just want to sort of get quite concrete so this is sort of a classical",
    "start": "37300",
    "end": "46330"
  },
  {
    "text": "test hypothesis is a Python library by the way most of my examples will be in Python",
    "start": "46330",
    "end": "52000"
  },
  {
    "text": "other versions coming to languages near you soon hopefully but this is a sort of",
    "start": "52000",
    "end": "57370"
  },
  {
    "text": "a very classic test using Django which is a Python web framework and it's very",
    "start": "57370",
    "end": "64000"
  },
  {
    "text": "concrete it's what I would call an example based test most of you would probably call it a test and we've got",
    "start": "64000",
    "end": "70150"
  },
  {
    "text": "some sort of collaboration software the software has projects it has users and you have a maximum number of users you",
    "start": "70150",
    "end": "76630"
  },
  {
    "text": "can add to your projects as collaborators so we have this test can add collaborators up to collaborator",
    "start": "76630",
    "end": "83020"
  },
  {
    "text": "limit which creates two users Alex and Pat's creates a project with the",
    "start": "83020",
    "end": "89320"
  },
  {
    "text": "collaborator limit of two adds them both to the project add a source that are on afterwards it's",
    "start": "89320",
    "end": "94329"
  },
  {
    "text": "a very straightforward boring test and it's not exactly bad like this sort of",
    "start": "94329",
    "end": "101020"
  },
  {
    "text": "test is very useful because it tells us a story about our application and people",
    "start": "101020",
    "end": "106240"
  },
  {
    "text": "like thinking and stories and so having these stories is very concrete examples",
    "start": "106240",
    "end": "111340"
  },
  {
    "text": "to think about the behavior is quite useful but one problem with this test is",
    "start": "111340",
    "end": "116829"
  },
  {
    "text": "it it's falsely general like it says can add collaborators up to collaborate or",
    "start": "116829",
    "end": "121899"
  },
  {
    "text": "limit but that's not what it's actually testing what it's actually testing is we can create a project with a collaborator limit of two it has a name of some",
    "start": "121899",
    "end": "128440"
  },
  {
    "text": "projects we can create a user with an email Alex at example comm etc etc and",
    "start": "128440",
    "end": "133680"
  },
  {
    "text": "there are all these very concrete specific details that mean that we could",
    "start": "133680",
    "end": "139960"
  },
  {
    "text": "be testing much less than we actually are and the test gives no real indication of like what part of these is this testing",
    "start": "139960",
    "end": "148690"
  },
  {
    "text": "is actually important and what part is just like accidentally tell that sort of was there to basically set the scene of our story and the kind",
    "start": "148690",
    "end": "158110"
  },
  {
    "text": "of test I would like people to move to writing more of it instead looks like this this is the same test written with",
    "start": "158110",
    "end": "165400"
  },
  {
    "text": "hypothesis and the big difference between this and the previous test is",
    "start": "165400",
    "end": "170890"
  },
  {
    "text": "that we have been explicit about the range of behavior that this test holds",
    "start": "170890",
    "end": "176290"
  },
  {
    "text": "for we've said not I create this specific concrete project but give me a",
    "start": "176290",
    "end": "183450"
  },
  {
    "text": "give me a project I don't have these two specific users but I say I want a list",
    "start": "183450",
    "end": "190360"
  },
  {
    "text": "of users we've got some hard-coded balance here which say the collaborator limiter between 0 and 20 the number of",
    "start": "190360",
    "end": "197890"
  },
  {
    "text": "user should be between 0 and 20 that's largely just the practical concern of that you don't really want to test which is creating a million users and napping",
    "start": "197890",
    "end": "204160"
  },
  {
    "text": "onto your project and we've got this assumption that says that this is a specifically a test about the scenario",
    "start": "204160",
    "end": "209860"
  },
  {
    "text": "when there aren't more users than the limit and this test it can be harder to",
    "start": "209860",
    "end": "217240"
  },
  {
    "text": "follow particularly for not use it used to it but instead unlike the concrete anecdote an example of our Pacific story",
    "start": "217240",
    "end": "223840"
  },
  {
    "text": "we had beforehand it's really describing an entire range of scenarios and the",
    "start": "223840",
    "end": "230950"
  },
  {
    "text": "advantage of this sort of testing is as well as not as well as actually",
    "start": "230950",
    "end": "235990"
  },
  {
    "text": "delivering on what the test claims to be promising that is testing this entire range of scenarios this can",
    "start": "235990",
    "end": "241600"
  },
  {
    "text": "programmatically be tested we can try a whole wide range of examples that satisfy the conditions these tests we",
    "start": "241600",
    "end": "248890"
  },
  {
    "text": "don't have to just try one project with two users we can try one project with",
    "start": "248890",
    "end": "254110"
  },
  {
    "text": "ten users we can try adding the same user twice and see where that happens",
    "start": "254110",
    "end": "259840"
  },
  {
    "text": "all we've said is that there are some users there is a collaboration limit there are fewer than the forum users and",
    "start": "259840",
    "end": "267130"
  },
  {
    "text": "there's the collaboration limit and this should all still work so that's where I",
    "start": "267130",
    "end": "273160"
  },
  {
    "text": "want us to get to I think we do I don't want this to like completely take over your testing there are use cases for",
    "start": "273160",
    "end": "278560"
  },
  {
    "text": "both but I think if we want our tests to deliver on the generality we claim then",
    "start": "278560",
    "end": "284169"
  },
  {
    "text": "- this is wherever want to be doing anyway that was jumping into the deep end so now I'm",
    "start": "284169",
    "end": "289240"
  },
  {
    "text": "gonna back up to a much higher level and what I want to talk to you but in general is about some theory and like",
    "start": "289240",
    "end": "294520"
  },
  {
    "start": "290000",
    "end": "479000"
  },
  {
    "text": "how do we find bugs like if I know that particularly if you do TDD but finding",
    "start": "294520",
    "end": "300069"
  },
  {
    "text": "bugs isn't the only thing that tests are for but it's the bit I like so and the",
    "start": "300069",
    "end": "306069"
  },
  {
    "text": "bit I work on so that's where a lot of my interests are focused and what I'm going to talk to you about today and the",
    "start": "306069",
    "end": "315940"
  },
  {
    "text": "way I like to think about this is that you can think of your software rigs existing in state space there's your",
    "start": "315940",
    "end": "322690"
  },
  {
    "text": "software at any given point in time is in some state I'll get to what I mean by my state in a minute and some of these",
    "start": "322690",
    "end": "329770"
  },
  {
    "text": "states are good some of them are bad and what we're interested in is like I mean if you in a certain sense most states",
    "start": "329770",
    "end": "336580"
  },
  {
    "text": "are bad because like if you imagine randomly shuffling all of your computer's memory and seeing if your software still works that will never",
    "start": "336580",
    "end": "341620"
  },
  {
    "text": "happen so like the overwhelming majority of states are bad but that doesn't that's not interesting because like we don't",
    "start": "341620",
    "end": "348159"
  },
  {
    "text": "actually have a shop on my computer's memory button and if we did we couldn't trigger it in software and what we're",
    "start": "348159",
    "end": "353889"
  },
  {
    "text": "really interested in is instead like the range of possible states that our software can actually exhibit we're",
    "start": "353889",
    "end": "359469"
  },
  {
    "text": "actually running it which is this sort of wobbly yellow region in the middle",
    "start": "359469",
    "end": "365409"
  },
  {
    "text": "and what we want to do with finding bugs is find areas where the possible region",
    "start": "365409",
    "end": "372460"
  },
  {
    "text": "extends out into the bad region and if everything we're working correctly this",
    "start": "372460",
    "end": "378039"
  },
  {
    "text": "is why the picture would look like all possible states would live in the good region everything would be great the",
    "start": "378039",
    "end": "383110"
  },
  {
    "text": "software would be complete and working and we could all go home early this",
    "start": "383110",
    "end": "389889"
  },
  {
    "text": "doesn't happen it's one one of the things I have learned as a result of working and testing software and also as",
    "start": "389889",
    "end": "395770"
  },
  {
    "text": "the result of giving presentations as we saw earlier no software ever works correctly like computers are basically",
    "start": "395770",
    "end": "402190"
  },
  {
    "text": "always broken in some way but this is the ideal that we are aiming for and the",
    "start": "402190",
    "end": "407800"
  },
  {
    "text": "closer we can approximate is the happier we and our users will be and what we're",
    "start": "407800",
    "end": "414490"
  },
  {
    "text": "doing when we're testing is we're basically we were exploring a path in state space we start somewhere we poke about her",
    "start": "414490",
    "end": "420979"
  },
  {
    "text": "program a bit we try and sort of get it to explore a range of states and then we",
    "start": "420979",
    "end": "428329"
  },
  {
    "text": "look for when the program actually enters a bad state in our tests and",
    "start": "428329",
    "end": "433759"
  },
  {
    "text": "that's a failing test this is a bit of a lie because you actually take in a test you do need sort of additional code to",
    "start": "433759",
    "end": "439999"
  },
  {
    "text": "distinguish between whether a state is actually good or bad I'm going to ignore that for now it's that is half of the art of writing",
    "start": "439999",
    "end": "447289"
  },
  {
    "text": "a good test but it remains half of the art of writing a good test in both like classical testing and the sort of testing I'm going to be talking about",
    "start": "447289",
    "end": "453879"
  },
  {
    "text": "and the reason why this is hard is like a bad state just doesn't mean just like your software crashes it's very easy to",
    "start": "453879",
    "end": "459259"
  },
  {
    "text": "tell if your software crashed but it could also mean you showed something wrong to the user you got an SQL injection vulnerability",
    "start": "459259",
    "end": "466099"
  },
  {
    "text": "you got a subtle failure to check error conditions which did something all sorts",
    "start": "466099",
    "end": "472849"
  },
  {
    "text": "of states could be bad and we're not going to worry too much about the details of that I said I'd get to what",
    "start": "472849",
    "end": "482329"
  },
  {
    "start": "479000",
    "end": "648000"
  },
  {
    "text": "the state was and now I do want to talk about that what what is a state in these",
    "start": "482329",
    "end": "489529"
  },
  {
    "text": "sort of them at the grandest most general possible definition of a state and in one sense like the only true correct definition a state is everything",
    "start": "489529",
    "end": "496399"
  },
  {
    "text": "like literally or almost everything everything that happens in your past light cone if we want to get a bit",
    "start": "496399",
    "end": "502729"
  },
  {
    "text": "special relativity about it like in theory a I said there wasn't a randomly",
    "start": "502729",
    "end": "509959"
  },
  {
    "text": "shuffle their bytes in memory but like a cosmic ray could hit your computer and that could do interesting things to your",
    "start": "509959",
    "end": "514969"
  },
  {
    "text": "program and in theory that's the thing you might want to test in practice this",
    "start": "514969",
    "end": "521300"
  },
  {
    "text": "isn't a very although this is this point of view is true this isn't a very useful point of view for the purposes of testing it you may have noticed but it's",
    "start": "521300",
    "end": "530389"
  },
  {
    "text": "quite hard to take the entire universe and put it into a specific configuration for testing purposes and so we're going",
    "start": "530389",
    "end": "537740"
  },
  {
    "text": "to need something that is like a little more specific the natural more specific thing is like",
    "start": "537740",
    "end": "543410"
  },
  {
    "text": "a so you can restrict yourself to like the provision and the province of your computer or a state is a complete",
    "start": "543410",
    "end": "549470"
  },
  {
    "text": "snapshot of where your computer is at a given point this is also to general like even when",
    "start": "549470",
    "end": "555210"
  },
  {
    "text": "computers looked like this it was too general because just the number of",
    "start": "555210",
    "end": "560240"
  },
  {
    "text": "possible representations in memory is larger than the number of atoms in the universe so and particularly and this is",
    "start": "560240",
    "end": "567960"
  },
  {
    "text": "true even with embedded software these days embedded processors and bread memory is still quite kind of huge from",
    "start": "567960",
    "end": "574110"
  },
  {
    "text": "this point of view so we've got more or less the same problem we did with the",
    "start": "574110",
    "end": "580580"
  },
  {
    "text": "using entire universe as a state but it steams down a little bit we're more",
    "start": "580580",
    "end": "588570"
  },
  {
    "text": "specific yet and say state is just the instruction pointer like there is a the point the point in memory where which",
    "start": "588570",
    "end": "595110"
  },
  {
    "text": "your code is current where your CPU is currently executing encode and this is not too specific this is a snapshot from",
    "start": "595110",
    "end": "601890"
  },
  {
    "text": "a Python program and if you're writing Python then like this entire idea is a lie because none of the code that your",
    "start": "601890",
    "end": "608280"
  },
  {
    "text": "act none of the things that actually determine what code you're running is represented by the instruction pointer if the instruction pointer just says where you are in the interpreter and all",
    "start": "608280",
    "end": "615840"
  },
  {
    "text": "of the things that determine what you're actually running are in memory not in",
    "start": "615840",
    "end": "622520"
  },
  {
    "text": "assembly code and but I mean this is true of the programs in general like",
    "start": "622520",
    "end": "628320"
  },
  {
    "text": "fundamentally all programs are interpreting their data and all on terrific almost all non-trivial control",
    "start": "628320",
    "end": "633660"
  },
  {
    "text": "flow depends on what the actual data you're running is so you can't ignore memory entirely but it would be nice if",
    "start": "633660",
    "end": "639420"
  },
  {
    "text": "you could because like the instruction pointer you now only have like a few million a few billion states that's",
    "start": "639420",
    "end": "645750"
  },
  {
    "text": "practically easy so instead we're gonna go sort of return to my mouth Mission",
    "start": "645750",
    "end": "651330"
  },
  {
    "start": "648000",
    "end": "943000"
  },
  {
    "text": "Ridge we're going to do up two equivalents we're basically a state is your computer but we're going to ignore",
    "start": "651330",
    "end": "657420"
  },
  {
    "text": "the bits that we don't actually care about if you are never going to read a particular point in memory then we can",
    "start": "657420",
    "end": "663780"
  },
  {
    "text": "ignore that point in memory if you've done some stuff and that and afterwards",
    "start": "663780",
    "end": "668910"
  },
  {
    "text": "you're never going to read a point in memory even if you've read it beforehand we can ignore that and I'm not gonna",
    "start": "668910",
    "end": "674430"
  },
  {
    "text": "make this to your precise like I could get very very formal here and that would be a waste of both of our time but you",
    "start": "674430",
    "end": "681210"
  },
  {
    "text": "can think of this as essentially like the state is some abstract represent of whatever matters about a snapshot of",
    "start": "681210",
    "end": "686509"
  },
  {
    "text": "our computer unfortunately that's still quite a lot potentially but the fact",
    "start": "686509",
    "end": "696980"
  },
  {
    "text": "that we don't care we're doing this up two equivalents thing often lets us boil it down so for example here's a simple C",
    "start": "696980",
    "end": "703490"
  },
  {
    "text": "function that just takes an integer and doesn't do anything with it the name is a lie because it says to do a thing",
    "start": "703490",
    "end": "711279"
  },
  {
    "text": "turns out comments encoded get out of sync and so there's an integer so that's",
    "start": "711279",
    "end": "717559"
  },
  {
    "text": "2 to the 32 states because like you've got one where one variable in memory I mean obviously it's depending on your C",
    "start": "717559",
    "end": "723170"
  },
  {
    "text": "compiler integers might not be 32-bit but we're going to pretend they are here well that's about 4 billion states but",
    "start": "723170",
    "end": "730639"
  },
  {
    "text": "the function is not doing anything and so this is where that up to equivalence comes in like regardless of what value",
    "start": "730639",
    "end": "735920"
  },
  {
    "text": "is there like it does it always does the same thing so four billion here is about one we can essentially throw away all",
    "start": "735920",
    "end": "743420"
  },
  {
    "text": "these differences and pretend they're not there if we then sort of add this",
    "start": "743420",
    "end": "749809"
  },
  {
    "text": "assertion the sort is not equal to 42 we still have four billion possible values in memory like there's still 2 to the 32",
    "start": "749809",
    "end": "756170"
  },
  {
    "text": "different integers but now one of them is special and so there's this",
    "start": "756170",
    "end": "762079"
  },
  {
    "text": "distinction if I equals 42 that's one state if I as anything else that's",
    "start": "762079",
    "end": "767240"
  },
  {
    "text": "another state like whether or not we trigger this assertion puts us in different state so here four billion is",
    "start": "767240",
    "end": "774920"
  },
  {
    "text": "about two and so this is starting to",
    "start": "774920",
    "end": "779990"
  },
  {
    "text": "look like it's not so bad but the problem is that states don't add they multiply so here is a function which",
    "start": "779990",
    "end": "788779"
  },
  {
    "text": "takes twenty six billion arguments obviously you don't want to write a function that takes twenty six billion arguments but most non-trivial programs",
    "start": "788779",
    "end": "796009"
  },
  {
    "text": "will have at least twenty six billion conditions in them that could be true or false so this works okay as a toy",
    "start": "796009",
    "end": "801980"
  },
  {
    "text": "version of our problem and Teutons takes into by the 70 million of states that's",
    "start": "801980",
    "end": "807949"
  },
  {
    "text": "a lot less than four billion we had earlier but the problem is without knowing what these functions are every",
    "start": "807949",
    "end": "814370"
  },
  {
    "text": "one of these states could be distinct so like you could have these functions set some global flag and",
    "start": "814370",
    "end": "820090"
  },
  {
    "text": "then the final done stuff function asserts something about about the",
    "start": "820090",
    "end": "826310"
  },
  {
    "text": "combined bit field that that's at and so it's very easy to make these all",
    "start": "826310",
    "end": "832730"
  },
  {
    "text": "distinct and so in this relatively short",
    "start": "832730",
    "end": "838820"
  },
  {
    "text": "program of only depending on how you format it like one or two hundred lines tops we've got 70 million states an",
    "start": "838820",
    "end": "847990"
  },
  {
    "text": "important thing to realize here is that this program is very easy to get 100% coverage on if you test it by passing",
    "start": "847990",
    "end": "854750"
  },
  {
    "text": "true for every value and false for every value BAM you've got 100% coverage so if",
    "start": "854750",
    "end": "860960"
  },
  {
    "text": "you have a decent sense for how hard it is to get 100% coverage if you're over your programs when testing this program",
    "start": "860960",
    "end": "868610"
  },
  {
    "text": "is thirty five million times harder than that so the idea that you can explore all the",
    "start": "868610",
    "end": "876740"
  },
  {
    "text": "states even in a non-trivial program is basically a fiction it's not something that you can ever do so when I said that",
    "start": "876740",
    "end": "883730"
  },
  {
    "text": "your test look like this this was kind of a lie because what it has actually looked like as this they're essentially",
    "start": "883730",
    "end": "890930"
  },
  {
    "text": "a scattering of dust over the state set of possible states that your programs could be in you are never going to",
    "start": "890930",
    "end": "896870"
  },
  {
    "text": "possibly cover the entire state space with with all your testing and the tools",
    "start": "896870",
    "end": "904280"
  },
  {
    "text": "that I'm offering you they they improve on this situation somewhat because you run the multiple times and they try like",
    "start": "904280",
    "end": "910700"
  },
  {
    "text": "200 examples or a thousand examples or whatever but unfortunately what that means is that instead of like this your",
    "start": "910700",
    "end": "916460"
  },
  {
    "text": "tests now look like this and it's still never really going to cover state space",
    "start": "916460",
    "end": "923690"
  },
  {
    "text": "because like even adding three orders of magnitude more testing that's even in",
    "start": "923690",
    "end": "930290"
  },
  {
    "text": "the simple example I showed you you need like another three orders of magnitude and in realistic programs it's more like",
    "start": "930290",
    "end": "936290"
  },
  {
    "text": "another ten orders of magnitude or possibly more actually running concrete",
    "start": "936290",
    "end": "941870"
  },
  {
    "text": "test cases will never get you state's best coverage so that's it abandon hope testing is impossible everyone can go",
    "start": "941870",
    "end": "947810"
  },
  {
    "start": "943000",
    "end": "990000"
  },
  {
    "text": "home let's go get it ranked it's not quite as bad as all that",
    "start": "947810",
    "end": "953460"
  },
  {
    "text": "and there's I think I like to call the fussing assumption this isn't a standard",
    "start": "953460",
    "end": "959820"
  },
  {
    "text": "piece of terminology but I think almost everyone who works in this area will know what you mean if you talk about this and the fuzzing the idea the",
    "start": "959820",
    "end": "968910"
  },
  {
    "text": "fuzzing assumption is basically that although in theory bugs can lurk anywhere and like hey you could have",
    "start": "968910",
    "end": "975330"
  },
  {
    "text": "just like one isolated state in the middle of everything else where there is a bug hiding that's not what usually",
    "start": "975330",
    "end": "981990"
  },
  {
    "text": "happens in practice and even when I tell you is what happens in practice we don't necessarily care that much because",
    "start": "981990",
    "end": "987120"
  },
  {
    "text": "probably no one else can find that state either and so the fuzzing assumption is that",
    "start": "987120",
    "end": "992340"
  },
  {
    "start": "990000",
    "end": "1093000"
  },
  {
    "text": "most bugs aren't like this they fall into one of two in categories the first",
    "start": "992340",
    "end": "999660"
  },
  {
    "text": "is bugs that are obvious that doesn't mean that you've necessarily found them because like they are these are only",
    "start": "999660",
    "end": "1004760"
  },
  {
    "text": "bugs that are obvious when you're looking at them but there as long as you look at them they come up fairly easily",
    "start": "1004760",
    "end": "1012490"
  },
  {
    "text": "so here's an example example of testing some code with hypothesis we've said",
    "start": "1012490",
    "end": "1017810"
  },
  {
    "text": "give me lists of integers and the minimum of this list of integers should always be less than or equal to the",
    "start": "1017810",
    "end": "1023150"
  },
  {
    "text": "maximum of this list of integers that seems straightforward right that's how many movie maximum work nothing should",
    "start": "1023150",
    "end": "1028160"
  },
  {
    "text": "go wrong here if you pass an empty list",
    "start": "1028160",
    "end": "1034250"
  },
  {
    "text": "then you've tried to take the minimum of an empty list and that doesn't work so you get an exception instead and this is",
    "start": "1034250",
    "end": "1040850"
  },
  {
    "text": "what I mean by an obvious bug like there is a fairly straightforwardly signposted",
    "start": "1040850",
    "end": "1046189"
  },
  {
    "text": "value that you can just make sure you follow stride testing that value here and it will find the bug for you people",
    "start": "1046190",
    "end": "1055550"
  },
  {
    "text": "forget that the you think that argument can be empty all the time like if you I mean sometimes it's because it's not",
    "start": "1055550",
    "end": "1061220"
  },
  {
    "text": "legitimate to pass an empty argument but most of the time someone just said oh yes there could be no this is a getting",
    "start": "1061220",
    "end": "1068630"
  },
  {
    "text": "this first element of this list and forgot that there is might not be a first element of this list or one",
    "start": "1068630",
    "end": "1075380"
  },
  {
    "text": "function documents that you can pass null as its argument and it passes it straightforwardly to another function",
    "start": "1075380",
    "end": "1081260"
  },
  {
    "text": "that documents that you can't pass nulls it's argument and so just like consistently trying a",
    "start": "1081260",
    "end": "1086539"
  },
  {
    "text": "small number of very obvious values like empty values finds a really remarkable number of bugs and most programs the",
    "start": "1086539",
    "end": "1096019"
  },
  {
    "start": "1093000",
    "end": "1259000"
  },
  {
    "text": "second sort of bug is the bugs that are common there's not necessarily like some",
    "start": "1096019",
    "end": "1103369"
  },
  {
    "text": "big sign saying here here's the bug but the bug is dense enough in this bassist",
    "start": "1103369",
    "end": "1110179"
  },
  {
    "text": "states that if you just like do end up doing 100 or 1000 or thousand times more",
    "start": "1110179",
    "end": "1116450"
  },
  {
    "text": "testing it's just going to conventionally crop up and here's an",
    "start": "1116450",
    "end": "1122090"
  },
  {
    "text": "example of testing in the wild there is a nice little Python library called binary or not and it's basically it's a",
    "start": "1122090",
    "end": "1128629"
  },
  {
    "text": "heuristic library for taking a file and saying was this meant to be a text file",
    "start": "1128629",
    "end": "1134830"
  },
  {
    "text": "this is in principle impossible but in practice you can you can guess the right answer most of the time and all we've",
    "start": "1134830",
    "end": "1144289"
  },
  {
    "text": "testing here is the very simple property like given any binary string this function shouldn't crash it should just",
    "start": "1144289",
    "end": "1149629"
  },
  {
    "text": "return a boolean value Sanctuary or false it crashes obviously of or I",
    "start": "1149629",
    "end": "1155960"
  },
  {
    "text": "wouldn't be showing you this and this is a fun bug because what happens is that binary not is using another heuristic",
    "start": "1155960",
    "end": "1162769"
  },
  {
    "text": "library called car debt which is trying to detect the encoding that the file is",
    "start": "1162769",
    "end": "1168259"
  },
  {
    "text": "in and car dot says okay so this is the",
    "start": "1168259",
    "end": "1173629"
  },
  {
    "text": "encoding I'm a hundred percent sure of this is encoding definitely encouraging and it doesn't actually decode as that",
    "start": "1173629",
    "end": "1179389"
  },
  {
    "text": "encoding and card is just and this isn't a bug apparently this is actually just how card I thinks it should work because",
    "start": "1179389",
    "end": "1186580"
  },
  {
    "text": "it's faster to do it this way and speed is good right so binary Ranaut said to",
    "start": "1186580",
    "end": "1194389"
  },
  {
    "text": "card at like what a coding is this in and partic David this answer back it",
    "start": "1194389",
    "end": "1200570"
  },
  {
    "text": "tries decoding it and then it doesn't handle the exception because I didn't think that was possible and this is",
    "start": "1200570",
    "end": "1206929"
  },
  {
    "text": "often where these sorts of common bugs come from is mismatched assumptions across module boundaries you both sides",
    "start": "1206929",
    "end": "1215210"
  },
  {
    "text": "the world hat in the boom two libraries written by two authors each of them have a slightly different",
    "start": "1215210",
    "end": "1220560"
  },
  {
    "text": "set of assumptions about the world and all of like the really obvious cases are handled because those are the cases",
    "start": "1220560",
    "end": "1226740"
  },
  {
    "text": "everyone thinks of but there are enough weird edge cases that people didn't necessarily think of the same weird edge",
    "start": "1226740",
    "end": "1232890"
  },
  {
    "text": "case isn't it necessarily think they should be handled in the same way and",
    "start": "1232890",
    "end": "1238940"
  },
  {
    "text": "hypothesis is actually much smarter than it was when I found this bug but this is a bug you could find by just basically chucking a whole bunch of random strings",
    "start": "1238940",
    "end": "1245550"
  },
  {
    "text": "at it and a lot of what the work in this",
    "start": "1245550",
    "end": "1252180"
  },
  {
    "text": "field is doing is basically like pushing the boundaries of how common a bug has to be before we find it but this one was",
    "start": "1252180",
    "end": "1258480"
  },
  {
    "text": "pretty common and the consequence of bugs being either obvious or common is",
    "start": "1258480",
    "end": "1264060"
  },
  {
    "start": "1259000",
    "end": "1332000"
  },
  {
    "text": "that they're actually quite easy to find given this sort of tooling you can't say",
    "start": "1264060",
    "end": "1269870"
  },
  {
    "text": "they're you found all the bugs but you can cover a much wider section of the",
    "start": "1269870",
    "end": "1275700"
  },
  {
    "text": "search base with a reasonably high degree of confidence so instead your",
    "start": "1275700",
    "end": "1281250"
  },
  {
    "text": "test sort of start looking like this they cover a large area of the search space but they don't really cover it in",
    "start": "1281250",
    "end": "1287730"
  },
  {
    "text": "the sense that they've proven there are no bugs there they've just said there probably aren't any bugs here it's which",
    "start": "1287730",
    "end": "1295080"
  },
  {
    "text": "is surprisingly good often enough and is usually at least better at finding bugs",
    "start": "1295080",
    "end": "1300420"
  },
  {
    "text": "than your users are which is something and then you can sort of daisy chain these along where you dare okay this",
    "start": "1300420",
    "end": "1306270"
  },
  {
    "text": "stay it looks good and all states reachable immediately trying to look good so let's test over here and",
    "start": "1306270",
    "end": "1311280"
  },
  {
    "text": "eventually you daisy chain you outwards and you often do find a genuine bug and",
    "start": "1311280",
    "end": "1316789"
  },
  {
    "text": "so although this doesn't sort of correspond to thorough testing it",
    "start": "1317180",
    "end": "1323160"
  },
  {
    "text": "corresponds to a lot closer to thorough testing than the raw numbers would actually suggest or at least as far as",
    "start": "1323160",
    "end": "1329430"
  },
  {
    "text": "we can tell the difference it does but we can go further because I mean this is",
    "start": "1329430",
    "end": "1336450"
  },
  {
    "start": "1332000",
    "end": "1367000"
  },
  {
    "text": "good but fundamentally state space is still huge and what we need are",
    "start": "1336450",
    "end": "1342510"
  },
  {
    "text": "techniques for using this sort of testing to get beyond this and to try",
    "start": "1342510",
    "end": "1348570"
  },
  {
    "text": "and increase the scope of our thing further because fundamentally we are still covering a very tiny area of",
    "start": "1348570",
    "end": "1354760"
  },
  {
    "text": "state space and there are a couple of principles that we can use with this sort of testing to get us further",
    "start": "1354760",
    "end": "1362130"
  },
  {
    "text": "largely by shrinking the size of the state space we're actually testing the",
    "start": "1362130",
    "end": "1369400"
  },
  {
    "start": "1367000",
    "end": "1588000"
  },
  {
    "text": "first is decoupling which you're normally doing in your testing anyway like if you're writing unit tests that",
    "start": "1369400",
    "end": "1374530"
  },
  {
    "text": "is essentially decoupling because one of the nice things about the up two equivalence point of view for this is",
    "start": "1374530",
    "end": "1381429"
  },
  {
    "text": "that if you have two independent parts of your program then you can basically treat a state of the combined program as",
    "start": "1381429",
    "end": "1386530"
  },
  {
    "text": "a state of this part and a state of that part and you can largely just test them independently and if you've tested them",
    "start": "1386530",
    "end": "1392650"
  },
  {
    "text": "independently then you've effectively tested them together so that part is",
    "start": "1392650",
    "end": "1400360"
  },
  {
    "text": "pretty much standard testing practice and effectively shrinks the state the state space quite a lot because you're",
    "start": "1400360",
    "end": "1406660"
  },
  {
    "text": "breaking it up into smaller tighter state spaces where you've tested the product automatically if I haven't",
    "start": "1406660",
    "end": "1412660"
  },
  {
    "text": "tested the individual components but another thing you can do for this is basically like when parts the system",
    "start": "1412660",
    "end": "1418990"
  },
  {
    "text": "aren't independent and you are feeding them a feeding output from one part into",
    "start": "1418990",
    "end": "1424210"
  },
  {
    "text": "the other then often the way bugs occur is that you've generated and valid output somewhere and then it's",
    "start": "1424210",
    "end": "1430330"
  },
  {
    "text": "propagated throughout your program as it gets passed further along the system and so this sort of like very basic bounds",
    "start": "1430330",
    "end": "1437799"
  },
  {
    "text": "checking on the output of everything often uncovers quite a lot of interesting bugs this is a bounds",
    "start": "1437799",
    "end": "1444250"
  },
  {
    "text": "checking function from for testing something for calculating the arithmetic mean of a list of numbers it's this test",
    "start": "1444250",
    "end": "1452770"
  },
  {
    "text": "is has basically uncovered bugs in every implementation of the arithmetic mean I",
    "start": "1452770",
    "end": "1458590"
  },
  {
    "text": "have ever flirted the one in the standard library is actually not too bad because it throws an overflow error",
    "start": "1458590",
    "end": "1464020"
  },
  {
    "text": "rather than giving a wrong answer everyone else gave a wrong answer and the reason is basically that",
    "start": "1464020",
    "end": "1469809"
  },
  {
    "text": "floating-point numbers are hard and the reason why the standard library mostly gets it right as they chase and they turn them into arbitrary precision",
    "start": "1469809",
    "end": "1476470"
  },
  {
    "text": "rational numbers and do the maths there and then cover back to floating-point numbers because the cyanide library in",
    "start": "1476470",
    "end": "1483880"
  },
  {
    "text": "Python doesn't actually care about performance but if you tried numpy which is one of the standard scientific Python",
    "start": "1483880",
    "end": "1491320"
  },
  {
    "text": "and numerical calculation libraries it can be but it can generate means which",
    "start": "1491320",
    "end": "1496390"
  },
  {
    "text": "are both larger than the maximum and smaller than the minimum even if you restricts them to them being finite values I'm reasonably sure like your",
    "start": "1496390",
    "end": "1502750"
  },
  {
    "text": "favorite numeric library is also going to get this test that's wrong so this is not throwing stones at Python there's an",
    "start": "1502750",
    "end": "1508630"
  },
  {
    "text": "entire 30 40 page paper about how to do this correctly with two numbers and it's hard but you wouldn't have detected this",
    "start": "1508630",
    "end": "1519730"
  },
  {
    "text": "problem if you just were calculating the mean in your program you would have calculated the mean you would have seen yes this is totally a sensible answer",
    "start": "1519730",
    "end": "1525580"
  },
  {
    "text": "and you will potentially used in other things and then you might have ended up with something negative being negative where we thought it had to be positive",
    "start": "1525580",
    "end": "1531360"
  },
  {
    "text": "like and these sort of errors end up propagating and you end up getting lot",
    "start": "1531360",
    "end": "1539530"
  },
  {
    "text": "into lots of the states that you thought were impossible because you thought you had satisfied conditions that you hadn't and having this sort of checking at the",
    "start": "1539530",
    "end": "1547360"
  },
  {
    "text": "boundaries means that you can always trust the output of one function as the input to another as long as you have",
    "start": "1547360",
    "end": "1553210"
  },
  {
    "text": "tested both a range of input in a range and a range of output for that and so",
    "start": "1553210",
    "end": "1559440"
  },
  {
    "text": "and again this is not a hundred percent true like particularly because of the probabilistic is this would this would",
    "start": "1559440",
    "end": "1565600"
  },
  {
    "text": "be true if it were exhaustive testing it's only sort of true with probabilistic testing like the kind that",
    "start": "1565600",
    "end": "1571120"
  },
  {
    "text": "I'm providing but it's true enough that it often finds bugs in practice and that",
    "start": "1571120",
    "end": "1578530"
  },
  {
    "text": "once it has sufficiently explored the space like the reliability the software",
    "start": "1578530",
    "end": "1585580"
  },
  {
    "text": "at least goes up even if it doesn't go perfectly the more interesting thing",
    "start": "1585580",
    "end": "1592150"
  },
  {
    "start": "1588000",
    "end": "1730000"
  },
  {
    "text": "that happens and is for testing is state collapse which is when what you often",
    "start": "1592150",
    "end": "1598330"
  },
  {
    "text": "want is like the problem here is that state space is huge wouldn't it be great if state space were less huge right and",
    "start": "1598330",
    "end": "1606690"
  },
  {
    "text": "sometimes we can show that state space is less huge and that's what I mean by state collapse",
    "start": "1606690",
    "end": "1613850"
  },
  {
    "text": "so conceptually when your program is running you can think of every path you take through your program as leading to",
    "start": "1613970",
    "end": "1620750"
  },
  {
    "text": "interestingly novel state you do a or B you do a or B again and at each point",
    "start": "1620750",
    "end": "1626940"
  },
  {
    "text": "the tree branches and so you end up with an exponential number of states as time",
    "start": "1626940",
    "end": "1632610"
  },
  {
    "text": "goes on and what this means is that in",
    "start": "1632610",
    "end": "1638340"
  },
  {
    "text": "order to cover all this you would need an exponentially increasing number of tests which we don't really want to do",
    "start": "1638340",
    "end": "1644210"
  },
  {
    "text": "but often what actually happens is it looks like this you have a bunch of",
    "start": "1644210",
    "end": "1649770"
  },
  {
    "text": "intermediate operations and then you collapse punch them back down again and so now the number of states grows",
    "start": "1649770",
    "end": "1654840"
  },
  {
    "text": "linearly as time goes on and covering this with tests becomes much more viable",
    "start": "1654840",
    "end": "1661010"
  },
  {
    "text": "a trivial example where this sort of thing tends to happen is local variables like often you will introduce a bunch of",
    "start": "1661010",
    "end": "1667050"
  },
  {
    "text": "intermediate states and then you will normalize in some way and or throw away parts of those local variables and so",
    "start": "1667050",
    "end": "1673950"
  },
  {
    "text": "States collapse that way just by throwing away detail here this is a stupid program again most of my like",
    "start": "1673950",
    "end": "1680190"
  },
  {
    "text": "actual non test examples are stupid but here we create a range of a hundred",
    "start": "1680190",
    "end": "1685830"
  },
  {
    "text": "numbers we shuffle it thus introducing a hundred factorial intermediate states",
    "start": "1685830",
    "end": "1691400"
  },
  {
    "text": "which is dramatically larger than the number of atoms in the universe that might be more than the number sets of",
    "start": "1691400",
    "end": "1698850"
  },
  {
    "text": "atoms in the universe and not sure but when you sort it again we throw all that away you're actually not introducing",
    "start": "1698850",
    "end": "1705030"
  },
  {
    "text": "that many states were introducing as many states as the seed size of your pseudo-random number generator but we",
    "start": "1705030",
    "end": "1712320"
  },
  {
    "text": "don't want to make seed random number traders feel bad by pretending and no by acknowledging that so we'll pretend it's a large number but it's still a large",
    "start": "1712320",
    "end": "1718650"
  },
  {
    "text": "number even if it's a it's only pseudo but at the end like all you're doing is",
    "start": "1718650",
    "end": "1724800"
  },
  {
    "text": "you're introducing one state so this is a rather extreme form of state collapse",
    "start": "1724800",
    "end": "1731330"
  },
  {
    "start": "1730000",
    "end": "1952000"
  },
  {
    "text": "but it's also like not that interesting for the purposes of testing because that's what it has for already covering",
    "start": "1731660",
    "end": "1738110"
  },
  {
    "text": "so we want to ask is whether States collapse in general I do we have this sort",
    "start": "1738110",
    "end": "1743399"
  },
  {
    "text": "paths through our programs we're sim",
    "start": "1743399",
    "end": "1748499"
  },
  {
    "text": "knows where things become briefly more complicated and then becomes simpler again we can test that it's we can look",
    "start": "1748499",
    "end": "1755219"
  },
  {
    "text": "for path through our programs and then write tests that assert that these all",
    "start": "1755219",
    "end": "1760830"
  },
  {
    "text": "end up in the same place and there are a whole bunch of ways this can happen but",
    "start": "1760830",
    "end": "1766320"
  },
  {
    "text": "there are two that are very common in most programs and are basically worth testing all the time because they always",
    "start": "1766320",
    "end": "1772739"
  },
  {
    "text": "find bugs and both this reveals interesting bugs but also like once you",
    "start": "1772739",
    "end": "1778499"
  },
  {
    "text": "have these tests you have more confidence in your testing overall because you know that the set of states",
    "start": "1778499",
    "end": "1783960"
  },
  {
    "text": "that you actually have to test has decreased because you've got fewer of",
    "start": "1783960",
    "end": "1789149"
  },
  {
    "text": "these like weird passes through the system the first example which comes up all",
    "start": "1789149",
    "end": "1794159"
  },
  {
    "text": "over the place is serialization like to a first approximation most programs exist to transform data from one format",
    "start": "1794159",
    "end": "1800729"
  },
  {
    "text": "to another particularly if you're writing a web application then your data",
    "start": "1800729",
    "end": "1806070"
  },
  {
    "text": "comes in off the web it turns into an in-memory representation you put it in the database then you take it back out",
    "start": "1806070",
    "end": "1811469"
  },
  {
    "text": "to the database and you display it to the user in a different form and every one of these is a serialization program",
    "start": "1811469",
    "end": "1817200"
  },
  {
    "text": "in the problem they're not all necessarily full serialization but certainly like the process of putting",
    "start": "1817200",
    "end": "1822359"
  },
  {
    "text": "things in and out of a database is very much encoding your in-memory data in a",
    "start": "1822359",
    "end": "1828809"
  },
  {
    "text": "serialization serializable form and we",
    "start": "1828809",
    "end": "1834089"
  },
  {
    "text": "can just that we can say I take this object I serialize it to some text",
    "start": "1834089",
    "end": "1839820"
  },
  {
    "text": "representation and I pars it back in again and I should get the same thing",
    "start": "1839820",
    "end": "1844830"
  },
  {
    "text": "out here we're actually testing that they have the serial same serialize representation do you see weirdnesses",
    "start": "1844830",
    "end": "1850919"
  },
  {
    "text": "with comparing date/time objects in Python but basically what we're doing is",
    "start": "1850919",
    "end": "1856409"
  },
  {
    "text": "we have a date/time we convert it into iso 8601 the one roof a new format for",
    "start": "1856409",
    "end": "1864089"
  },
  {
    "text": "day x that everyone should be using for every day time ever we parse it back out again and we assert that this is the",
    "start": "1864089",
    "end": "1871169"
  },
  {
    "text": "same name date seems perfectly reasonable I love this bug because it's so weird",
    "start": "1871169",
    "end": "1878909"
  },
  {
    "text": "this bug and it utils drop Prosser triggers only if you have a single digit year and only if me let's say which way",
    "start": "1878909",
    "end": "1886499"
  },
  {
    "text": "around is it yes the year is the same as the number of seconds past the minute and under these circumstances and these",
    "start": "1886499",
    "end": "1893070"
  },
  {
    "text": "circumstances only as far as I can tell the date you till parser just gets really confused and it swaps the month",
    "start": "1893070",
    "end": "1898739"
  },
  {
    "text": "in the year I have no idea why does this there are there's something of a",
    "start": "1898739",
    "end": "1904109"
  },
  {
    "text": "long-running tradition that when you give a hypothesis talk you need to break a date and time library and find use that as one of your examples but I",
    "start": "1904109",
    "end": "1909570"
  },
  {
    "text": "haven't fixed this one yet so I keep using this for now but I mean I'm being",
    "start": "1909570",
    "end": "1916769"
  },
  {
    "text": "mean to date you till here but like this happens all over the place essentially so many encoding bugs get found here",
    "start": "1916769",
    "end": "1924049"
  },
  {
    "text": "because you have forgotten that you've converted a decimal to a float and you've lost precision or you have a",
    "start": "1924049",
    "end": "1931679"
  },
  {
    "text": "disagreement about unicode encoding x' serialization is both ubiquitous and broken and creates really weirdly",
    "start": "1931679",
    "end": "1938700"
  },
  {
    "text": "interesting gadgets and programs to exploit and having these sort of tests",
    "start": "1938700",
    "end": "1943950"
  },
  {
    "text": "that basically all of these things round-trip just eliminate so many classes of weird behavior that many",
    "start": "1943950",
    "end": "1949169"
  },
  {
    "text": "programs in the wild exhibit the other",
    "start": "1949169",
    "end": "1954719"
  },
  {
    "start": "1952000",
    "end": "2147000"
  },
  {
    "text": "big interesting category is normalization we saw a bit of this with the shuffle example like we took an",
    "start": "1954719",
    "end": "1960899"
  },
  {
    "text": "arbitrary list and then we sorted it and by sorting it we just collapsed a huge amount of complexity because we took",
    "start": "1960899",
    "end": "1966869"
  },
  {
    "text": "many different values and we turned them into one canonical value let's take a",
    "start": "1966869",
    "end": "1971999"
  },
  {
    "text": "look at an artificial example this is inspired by real examples in the wild of username normalization where we we want",
    "start": "1971999",
    "end": "1982889"
  },
  {
    "text": "people to be able to sign up with usernames because this is the 21st century and all barbarians there are usernames or Unicode so we need to",
    "start": "1982889",
    "end": "1990929"
  },
  {
    "text": "normalize them into a canonical Unicode representation and we also want to case",
    "start": "1990929",
    "end": "1996869"
  },
  {
    "text": "normalize them we don't want someone to be able to spoof another user by changing the case with their username right if you know more about this",
    "start": "1996869",
    "end": "2003649"
  },
  {
    "text": "problem than me you may have spotted the bug looking at this code but this is fundamentally what we're",
    "start": "2003649",
    "end": "2009850"
  },
  {
    "text": "doing here where we're trying to convert a user name into a canonical form so we can go does this user or they exist is",
    "start": "2009850",
    "end": "2015669"
  },
  {
    "text": "this user name taken and then in our tests we are saying okay so the user",
    "start": "2015669",
    "end": "2023830"
  },
  {
    "text": "names are case insensitive so if we take user name we normalize the uppercase version of it then that should give us",
    "start": "2023830",
    "end": "2031360"
  },
  {
    "text": "the same normalized user name right that's our we don't want the user to be able to spoon to be able to spoof other",
    "start": "2031360",
    "end": "2036850"
  },
  {
    "text": "users this property this fails the",
    "start": "2036850",
    "end": "2042240"
  },
  {
    "text": "interesting character we see here is lowercase Roman I without dot and it has",
    "start": "2042240",
    "end": "2051070"
  },
  {
    "text": "the interesting property that if you uppercase it you get a normal uppercase I and then when you lowercase it again",
    "start": "2051070",
    "end": "2057580"
  },
  {
    "text": "you get a normal lowercase I and because we had this yeah that's a",
    "start": "2057580",
    "end": "2063490"
  },
  {
    "text": "good reaction to Unicode has lots of weird characters like this this isn't even the weirdest one it's other fun",
    "start": "2063490",
    "end": "2070868"
  },
  {
    "text": "examples included like the number of code points changes as you upper and lowercase things a lot of the time but",
    "start": "2070869",
    "end": "2078148"
  },
  {
    "text": "yeah because we use lowercase saying in our normalization and upper casing here we've managed to find this for the Miss",
    "start": "2078149",
    "end": "2084250"
  },
  {
    "text": "match the correct fix is to use the case fold method case fold is what you should be doing when you're trying to do case",
    "start": "2084250",
    "end": "2089710"
  },
  {
    "text": "instance definitive comparison and even if I don't convince you about property",
    "start": "2089710",
    "end": "2095200"
  },
  {
    "text": "based testing some of you are probably going I need to fix that thing in my application now so public service",
    "start": "2095200",
    "end": "2100930"
  },
  {
    "text": "announcement and this sort of thing causes real bugs Spotify had account",
    "start": "2100930",
    "end": "2106570"
  },
  {
    "text": "hijack bug related to this a couple of years ago it wasn't the case normalization it was something to do",
    "start": "2106570",
    "end": "2113440"
  },
  {
    "text": "with how they were normalizing Unicode characters but basically what they had was that you had some user names you",
    "start": "2113440",
    "end": "2121359"
  },
  {
    "text": "could create that when normalizing them twice you got a different answer from normalizing them once and so you could",
    "start": "2121359",
    "end": "2128050"
  },
  {
    "text": "create an account hijack by creating a pre-image where if you normalize it twice they would go to that users",
    "start": "2128050",
    "end": "2133540"
  },
  {
    "text": "username but if you normalized it once it wouldn't so they",
    "start": "2133540",
    "end": "2140370"
  },
  {
    "text": "fix that in a hurry once someone pointed it out to them but they could have found that out with property based testing and",
    "start": "2140370",
    "end": "2148880"
  },
  {
    "text": "like I've been making sure to a disclaimer special how long is this gonna make yourself work correct no",
    "start": "2148880",
    "end": "2155840"
  },
  {
    "text": "because you're never going to get your Crosse software correct unless you even",
    "start": "2155840",
    "end": "2161640"
  },
  {
    "text": "if you work for the sort of people who will pay to do formal verification of it then it's probably still not correct because inevitably there's like some bit",
    "start": "2161640",
    "end": "2169140"
  },
  {
    "text": "you haven't formally verified correctly there was a hilarious analysis of how",
    "start": "2169140",
    "end": "2174450"
  },
  {
    "text": "often formally verified distribution systems were correct and the answer was basically never because there were bugs",
    "start": "2174450",
    "end": "2180540"
  },
  {
    "text": "and the unverified bits there were bugs and how the verifiers were invoked my",
    "start": "2180540",
    "end": "2186060"
  },
  {
    "text": "favorite is someone who that just forgot to check the return code after invoking the verifier it's essentially like bugs",
    "start": "2186060",
    "end": "2193350"
  },
  {
    "text": "lurk everywhere and there's almost no way to gather and then to get around that but we can still",
    "start": "2193350",
    "end": "2200460"
  },
  {
    "text": "improve on the current status quo and we can still get software that is a lot more correct than a lot of what we're",
    "start": "2200460",
    "end": "2205920"
  },
  {
    "text": "writing today and one of the big things about this is like it gives you",
    "start": "2205920",
    "end": "2210930"
  },
  {
    "text": "confidence in your software it's what we're aiming for is not software where",
    "start": "2210930",
    "end": "2216030"
  },
  {
    "text": "we're just like this is correct software is perfect there can be nothing wrong it's software where we can release it",
    "start": "2216030",
    "end": "2222960"
  },
  {
    "text": "and we don't have to be worried about being woken by a pager in the middle of the night it's software where we can try",
    "start": "2222960",
    "end": "2228600"
  },
  {
    "text": "something that we know is hard to get right because we have a reasonable degree of confidence that if it will if",
    "start": "2228600",
    "end": "2235110"
  },
  {
    "text": "our implementation is too badly wrong we will find it out and having this sort of",
    "start": "2235110",
    "end": "2241020"
  },
  {
    "text": "tooling at your disposal and having this ability to just like push back the envelope a bit more on how we find bugs",
    "start": "2241020",
    "end": "2247740"
  },
  {
    "text": "and how we write software has really improved both my life and like the lives",
    "start": "2247740",
    "end": "2253860"
  },
  {
    "text": "of people who are using hypothesis that is because it just means that someone",
    "start": "2253860",
    "end": "2259260"
  },
  {
    "text": "has your back and you have a bit more knowledge of like the amazingly weird",
    "start": "2259260",
    "end": "2264750"
  },
  {
    "text": "edge cases and a bit of a guide truth like the complex data space of your software and that is pretty much all I",
    "start": "2264750",
    "end": "2271590"
  },
  {
    "text": "have to say once again I'm David McKeever the software talk do you about it is hypothesis and you should check it up thank you very much",
    "start": "2271590",
    "end": "2279230"
  },
  {
    "text": "and I think we got a bit of time for questions if people want to ask anything",
    "start": "2281420",
    "end": "2287090"
  },
  {
    "text": "doctor yep",
    "start": "2287090",
    "end": "2295550"
  },
  {
    "text": "so the question is that I didn't explicitly highlight this I should have if we look at these when the test is",
    "start": "2308469",
    "end": "2315819"
  },
  {
    "text": "failing it's providing it with a specific counter example and the question was whether you want to turn those counter examples into concrete",
    "start": "2315819",
    "end": "2322450"
  },
  {
    "text": "unit tests within your project hypothesis has a bunch of special features around them actually one is",
    "start": "2322450",
    "end": "2328390"
  },
  {
    "text": "that you can just say always try this example first and just add that to your tests another is that when you rerun",
    "start": "2328390",
    "end": "2335049"
  },
  {
    "text": "examples it remembers the previously failing example so rewriting a failure is fast even if finding it in the first",
    "start": "2335049",
    "end": "2342430"
  },
  {
    "text": "place is slow and so in general like for",
    "start": "2342430",
    "end": "2348969"
  },
  {
    "text": "the common cases you don't need to do too much to go outside the property based testing framework for stuff where",
    "start": "2348969",
    "end": "2354849"
  },
  {
    "text": "the example has revealed something really interesting is going on I will often pull it out into a unit test so I",
    "start": "2354849",
    "end": "2361119"
  },
  {
    "text": "can test more about the behavior in that case that is sort of specific to the concrete toy example I certainly don't",
    "start": "2361119",
    "end": "2367150"
  },
  {
    "text": "advocate writing entirely property with best tests I would say that I probably have about two 50/50 mix it's just that",
    "start": "2367150",
    "end": "2373180"
  },
  {
    "text": "50% that are property based tests are pulling an awful lot more ways than the unit tests are in terms of correctness and the unit tests are then sort of",
    "start": "2373180",
    "end": "2379989"
  },
  {
    "text": "exploring very specific concrete scenarios didn't answer your question",
    "start": "2379989",
    "end": "2385509"
  },
  {
    "text": "cool anyone else",
    "start": "2385509",
    "end": "2389519"
  },
  {
    "text": "that's correct yes I'm probably not the",
    "start": "2394790",
    "end": "2400650"
  },
  {
    "text": "best person to do that because my machine learning knowledge is all like about five or six years out of date I",
    "start": "2400650",
    "end": "2406050"
  },
  {
    "text": "think a lot of what it's been testing is less the machine learning and more of",
    "start": "2406050",
    "end": "2412290"
  },
  {
    "text": "the data validation pipelines and things like that search asserting that you can",
    "start": "2412290",
    "end": "2418880"
  },
  {
    "text": "nothing goes horribly wrong you get everything within reasonable bounds so like the mean example I had where you",
    "start": "2418880",
    "end": "2426570"
  },
  {
    "text": "are testing the output under arbitrary input other techniques that are quite useful is testing how your machine",
    "start": "2426570",
    "end": "2434790"
  },
  {
    "text": "learning algorithm response behaves in response to changes in data so I'm moving in this direction should never change the classification in that",
    "start": "2434790",
    "end": "2441000"
  },
  {
    "text": "direction there was a good post going around I've forgotten her name her blog",
    "start": "2441000",
    "end": "2447690"
  },
  {
    "text": "is composition dot L which was about formal verification of machine learning",
    "start": "2447690",
    "end": "2453330"
  },
  {
    "text": "algorithms and most of the sort of properties that she was talking about in",
    "start": "2453330",
    "end": "2458460"
  },
  {
    "text": "that are good specific examples I mean machine learning is to a first approximation code like any other and so",
    "start": "2458460",
    "end": "2464820"
  },
  {
    "text": "like you can't answer the question how do you test machine learning any more than you can answer the question how do you test code and so the properties you",
    "start": "2464820",
    "end": "2472410"
  },
  {
    "text": "tend to want to test or are usually quite specific to the application but it's that sort of thing that's the best",
    "start": "2472410",
    "end": "2478350"
  },
  {
    "text": "I can answer I'm afraid because I haven't actually sat down with any of the users who are doing it with machine learning Rob you ever",
    "start": "2478350",
    "end": "2486770"
  },
  {
    "text": "so the question is do you start with example based tests and then generalize them or do you start to go the property based test",
    "start": "2493040",
    "end": "2498380"
  },
  {
    "text": "I recommend that particularly when people are starting out they start with an example based test and generalize it unless it sort of fits a very classic",
    "start": "2498380",
    "end": "2506270"
  },
  {
    "text": "form property best test so a lot of the patterns that I've shown you with",
    "start": "2506270",
    "end": "2511790"
  },
  {
    "text": "serialization or normalization I would just start out writing the property based test immediately because it's familiar in general I start out with writing",
    "start": "2511790",
    "end": "2519410"
  },
  {
    "text": "property based tests but I have a little bit more familiarity with the domain than most people do and also I tend to write weird code that is very amenable",
    "start": "2519410",
    "end": "2525980"
  },
  {
    "text": "to property based testing like I do a lot of data structure implementations and stuff like that which is basically property based testing one easy mode so",
    "start": "2525980",
    "end": "2534640"
  },
  {
    "text": "the answer is it depends but if you are all uncomfortable with property rest testing it's easy to start with examples",
    "start": "2534640",
    "end": "2540799"
  },
  {
    "text": "and refactor to properties so do that until you feel comfortable doing otherwise yep",
    "start": "2540799",
    "end": "2554710"
  },
  {
    "text": "the question is how does does hypothesis handle concurrency scenarios and that",
    "start": "2555640",
    "end": "2561369"
  },
  {
    "text": "this makes two states complicated and the answer is hypothesis doesn't do anything for this largely for the moment",
    "start": "2561369",
    "end": "2568000"
  },
  {
    "text": "because hypothesis is written in Python Python is so bad at concurrency that no one was really interested in this use",
    "start": "2568000",
    "end": "2573190"
  },
  {
    "text": "case in general most language implementations are quite hard to do",
    "start": "2573190",
    "end": "2578589"
  },
  {
    "text": "something about this because you need to be able to take control of the scheduler and most MV ends don't let you do that",
    "start": "2578589",
    "end": "2585310"
  },
  {
    "text": "by the way if anyone wants to sneak out I will know in no way be offended we have hit the breakpoint but I'm more",
    "start": "2585310",
    "end": "2590589"
  },
  {
    "text": "than happy to continue answering questions I think there was another question over there somewhere so the",
    "start": "2590589",
    "end": "2605410"
  },
  {
    "text": "question is the frit does the framework itself have state yes so yep so",
    "start": "2605410",
    "end": "2618780"
  },
  {
    "text": "hypothesis bite has a database of examples which by default lives on disk",
    "start": "2618780",
    "end": "2624550"
  },
  {
    "text": "but you can configure it to other things so the hypothesis does store a little",
    "start": "2624550",
    "end": "2629710"
  },
  {
    "text": "bit of external states on a desk you can turn that off if you don't like it but it's for development workflows it's been",
    "start": "2629710",
    "end": "2636670"
  },
  {
    "text": "a huge improvement",
    "start": "2636670",
    "end": "2639030"
  },
  {
    "text": "yep yep so the basic model for these",
    "start": "2647590",
    "end": "2652760"
  },
  {
    "text": "things is that you randomly generate examples initially and then once you've found a failing example you try and",
    "start": "2652760",
    "end": "2659090"
  },
  {
    "text": "reduce it to a smaller examples so that it's nice and human readable and indeed the state the database the randomness is",
    "start": "2659090",
    "end": "2665900"
  },
  {
    "text": "part of why the database exists because it means that the random is always sort of goes from failing to it never goes",
    "start": "2665900",
    "end": "2674030"
  },
  {
    "text": "from failing to passing and tusky back should pass to fix the bug so it is randomness but without any false",
    "start": "2674030",
    "end": "2680540"
  },
  {
    "text": "positives like a failing test stays failing and always indicates a real problem either in the test or the system",
    "start": "2680540",
    "end": "2686180"
  },
  {
    "text": "under test doesn't answer your question",
    "start": "2686180",
    "end": "2691510"
  },
  {
    "text": "you can specify a specific concrete seed if you want to specify concrete seed but yeah in general it doesn't seed it",
    "start": "2702440",
    "end": "2708660"
  },
  {
    "text": "specifically and we'll run different examples each time and I generally",
    "start": "2708660",
    "end": "2714480"
  },
  {
    "text": "encourage people to leave it in that mode because it means that basically every time you run it you're getting more testing but I would like to some at",
    "start": "2714480",
    "end": "2721980"
  },
  {
    "text": "some point work on better workflows for separating that out from your CI so your CI becomes more deterministic and you",
    "start": "2721980",
    "end": "2727080"
  },
  {
    "text": "then have something working in the background I don't currently have anything doing that but in principle it would be it's a",
    "start": "2727080",
    "end": "2734520"
  },
  {
    "text": "thing that would be great and I'd like to work on it somewhat okay anything",
    "start": "2734520",
    "end": "2739890"
  },
  {
    "text": "else so the question is about coverage",
    "start": "2739890",
    "end": "2759030"
  },
  {
    "text": "feedback and whether and how hypothesis uses it and the answer is that I have an",
    "start": "2759030",
    "end": "2764250"
  },
  {
    "text": "excellent plant in the audience apparently because hypothesis has quite recently added features about this or I've quite recently added features two",
    "start": "2764250",
    "end": "2770130"
  },
  {
    "text": "hypotheses about this coverage feedback is more useful on long-running tests",
    "start": "2770130",
    "end": "2776340"
  },
  {
    "text": "because it is one of those things where",
    "start": "2776340",
    "end": "2781380"
  },
  {
    "text": "if you're running for an hour then you can get a lot more out of coverage feedback than if you're running for 20",
    "start": "2781380",
    "end": "2786480"
  },
  {
    "text": "seconds hypothesis does use it and basically uses it to slightly improve the data generation because by focusing",
    "start": "2786480",
    "end": "2793890"
  },
  {
    "text": "more on rare areas which remote which are not it is essentially a form of deep biasing of the random generator and the",
    "start": "2793890",
    "end": "2800460"
  },
  {
    "text": "other thing it does is it saves examples when it notices that they cover something interesting so it uses the",
    "start": "2800460",
    "end": "2805680"
  },
  {
    "text": "database not just remember failing examples to go aha that's how I cover that line and so each time you run",
    "start": "2805680",
    "end": "2811800"
  },
  {
    "text": "hypotheses the coverage improves but this is something we're ongoing work is",
    "start": "2811800",
    "end": "2817290"
  },
  {
    "text": "needed to make it better at that and also something where like once I've got",
    "start": "2817290",
    "end": "2823710"
  },
  {
    "text": "this sort of the separate CI and long running workflows that will get much better in general most testing of",
    "start": "2823710",
    "end": "2831470"
  },
  {
    "text": "this sort the answer is no certainly classic quick check and a lot of the things based off it don't know don't do",
    "start": "2831470",
    "end": "2839210"
  },
  {
    "text": "that but I think a bunch of the newer systems are starting to acquire that I",
    "start": "2839210",
    "end": "2844369"
  },
  {
    "text": "believe hypothesis was the first but I'm weeks rather than years yeah so so",
    "start": "2844369",
    "end": "2858890"
  },
  {
    "start": "2852000",
    "end": "2971000"
  },
  {
    "text": "hypothesis is currently only available in Python I have a customer is currently about start funding a ruby version of it",
    "start": "2858890",
    "end": "2866809"
  },
  {
    "text": "which will come with a core engine written in rust which will make it much easier to extrapolate languages there",
    "start": "2866809",
    "end": "2873380"
  },
  {
    "text": "are other systems like this available for a lot of languages depending on which one you're using they are varying",
    "start": "2873380",
    "end": "2880520"
  },
  {
    "text": "degrees of quality but but yeah so that",
    "start": "2880520",
    "end": "2885980"
  },
  {
    "text": "I mean that's the basic road map is Ruby soon that will result in the Rost engine that may result in diaspora of many",
    "start": "2885980",
    "end": "2893089"
  },
  {
    "text": "other languages we will see do you have a particular language you're interested in C++ doesn't currently have any good",
    "start": "2893089",
    "end": "2901069"
  },
  {
    "text": "answers I'm afraid it has rapid check and CPP quick check I think and based on",
    "start": "2901069",
    "end": "2908059"
  },
  {
    "text": "friends experiences of trying to use those I've heard a lot of screaming so I",
    "start": "2908059",
    "end": "2915290"
  },
  {
    "text": "think currently you could use theft which is for C I think we might get",
    "start": "2915290",
    "end": "2920839"
  },
  {
    "text": "being kicked out relatively soon here but I don't know how natural using theft",
    "start": "2920839",
    "end": "2928430"
  },
  {
    "text": "from C++ is I'm afraid",
    "start": "2928430",
    "end": "2931690"
  },
  {
    "text": "um you could absolutely use this resistant testing basically anything you can write tests for in Python you can",
    "start": "2938560",
    "end": "2946550"
  },
  {
    "text": "test with this I would say that for penetration testing you probably want more sophisticated tools I would say",
    "start": "2946550",
    "end": "2952160"
  },
  {
    "text": "this is design no you want the sort of classic security buzzer tools I think I",
    "start": "2952160",
    "end": "2957349"
  },
  {
    "text": "need to get off the stage because I think the next speaker is probably here so I'm happy to continue this",
    "start": "2957349",
    "end": "2962390"
  },
  {
    "text": "conversation not on the stage there [Applause]",
    "start": "2962390",
    "end": "2973059"
  }
]