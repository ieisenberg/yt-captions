[
  {
    "text": "it's go time did somebody say it's go time all right that sounds way more cool than what is actually about to happen",
    "start": "3520",
    "end": "11400"
  },
  {
    "text": "um okay so uh so just in the room who in",
    "start": "11400",
    "end": "16680"
  },
  {
    "text": "the room uh would classify themselves as AET",
    "start": "16680",
    "end": "23439"
  },
  {
    "text": "developer not everybody but many of you um do I have Java developers",
    "start": "23439",
    "end": "30160"
  },
  {
    "text": "have one um you always uh let's see what",
    "start": "30160",
    "end": "36200"
  },
  {
    "text": "python is kind of okay oh you were waving at them you're it's like hey I",
    "start": "36200",
    "end": "42160"
  },
  {
    "text": "have one python okay um Ruby no okay who would classify",
    "start": "42160",
    "end": "47800"
  },
  {
    "text": "yourselves as a JavaScript developer okay so now interestingly",
    "start": "47800",
    "end": "53440"
  },
  {
    "text": "enough you didn't you I saw some people raise their hand for multiple things uh",
    "start": "53440",
    "end": "58480"
  },
  {
    "text": "so net developer and JavaScript developer we're becoming more and more right like um is anybody just a",
    "start": "58480",
    "end": "66439"
  },
  {
    "text": "JavaScript developer that's becoming more of a thing now as well right it used to be JavaScript was that thing",
    "start": "66439",
    "end": "72880"
  },
  {
    "text": "that you used to make the browser do stuff like hey a jQuery on click or you",
    "start": "72880",
    "end": "79600"
  },
  {
    "text": "know F now JavaScript has become like its own",
    "start": "79600",
    "end": "84840"
  },
  {
    "text": "thing and you've got react and and angular and all these although angular's types script but who's uh anybody",
    "start": "84840",
    "end": "93079"
  },
  {
    "text": "react I will make one react reference over the course of this entire talk so",
    "start": "93079",
    "end": "98200"
  },
  {
    "text": "um if you don't get it don't worry I'll explain it uh angular okay excellent so this talk is",
    "start": "98200",
    "end": "107880"
  },
  {
    "text": "functional style JavaScript um a Skeptics Guide and I'll kind of talk about why I call it a Skeptics Guide",
    "start": "107880",
    "end": "114719"
  },
  {
    "text": "here in just a second but if you have not heard the phrase functional JavaScript",
    "start": "114719",
    "end": "120360"
  },
  {
    "text": "um you you may have been living under a rock I don't know if you've um like all",
    "start": "120360",
    "end": "125479"
  },
  {
    "text": "of the cool kids or would you agree with that all the cool kids are doing functional",
    "start": "125479",
    "end": "130879"
  },
  {
    "text": "javascripts now right um nobody does regular JavaScript",
    "start": "130879",
    "end": "136319"
  },
  {
    "text": "anymore so here's the thing I'm I started my life as a Java developer as a",
    "start": "136440",
    "end": "143720"
  },
  {
    "text": "net developer um I'm now a JavaScript guy I've got a a gang of four design",
    "start": "143720",
    "end": "150160"
  },
  {
    "text": "patterns course on on plural site I don't do the functional thing",
    "start": "150160",
    "end": "156319"
  },
  {
    "text": "right like I like my procedural oo kind of code functional is all weird and",
    "start": "156319",
    "end": "163720"
  },
  {
    "text": "esoteric and it doesn't necessarily make sense and and um I would talk to people the the cool",
    "start": "163720",
    "end": "171920"
  },
  {
    "text": "kids if you will and they would say something JavaScript is perfect for",
    "start": "171920",
    "end": "177000"
  },
  {
    "text": "functional development because in JavaScript functions are first class",
    "start": "177000",
    "end": "182319"
  },
  {
    "text": "objects if you heard this yeah this makes it awesome right and I would say",
    "start": "182319",
    "end": "188120"
  },
  {
    "text": "no it's right here in your phrase right functions are first class objects like",
    "start": "188120",
    "end": "194280"
  },
  {
    "text": "we're we're still oo we're still procedural we're still normal right don't go weird we're still dealing with",
    "start": "194280",
    "end": "202080"
  },
  {
    "text": "objects here um but I did what any normal person would do when confronted",
    "start": "202080",
    "end": "209599"
  },
  {
    "text": "with something I didn't necessarily fully understand yet what's the first thing you go to when you don't",
    "start": "209599",
    "end": "215519"
  },
  {
    "text": "understand what something is Wikipedia it's not a it's not a trick",
    "start": "215519",
    "end": "222239"
  },
  {
    "text": "question um so I went out to Wikipedia and it says this I'm just",
    "start": "222239",
    "end": "229200"
  },
  {
    "text": "going to let's walk through this for a second this is Wikipedia's definition of functional style this is not mine in",
    "start": "229200",
    "end": "234840"
  },
  {
    "text": "computer science functional programming is a programming Paradigm I think we could all agree with that programming",
    "start": "234840",
    "end": "241079"
  },
  {
    "text": "Paradigm right okay I haven't lost any of you yet I might lose you in a minute a style of building the structure and",
    "start": "241079",
    "end": "246319"
  },
  {
    "text": "elements of computer programs this we'll talk about for the next hour like we",
    "start": "246319",
    "end": "252120"
  },
  {
    "text": "don't worry it's not all Wikipedia like I'll get into code and we'll talk about stuff it'll be fine",
    "start": "252120",
    "end": "258799"
  },
  {
    "text": "um the treats computation is the evaluation of mathematical",
    "start": "258799",
    "end": "265040"
  },
  {
    "text": "functions in case you missed the important word there math now I don't",
    "start": "265040",
    "end": "270520"
  },
  {
    "text": "know about you but I started my life um so I went to to college as a math",
    "start": "270520",
    "end": "277639"
  },
  {
    "text": "major we were on the quarter system so my freshman year in college I took Cal 1",
    "start": "277639",
    "end": "283720"
  },
  {
    "text": "I took Cal 2 I took Cal 3 and I said I don't ever want to do math again um so I",
    "start": "283720",
    "end": "290160"
  },
  {
    "text": "became a computer science major after that because I didn't have to take any more math um actually what's funny my",
    "start": "290160",
    "end": "296360"
  },
  {
    "text": "senior year I did need to take one more my Cal 3 professor was my uh my college algebra Professor my senior year he",
    "start": "296360",
    "end": "304120"
  },
  {
    "text": "didn't like me being in there um but I hate math I hate math a lot um so this",
    "start": "304120",
    "end": "312120"
  },
  {
    "text": "to so I don't know if you guys are familiar um my daughter is now a sophomore since she's 10th grade I don't",
    "start": "312120",
    "end": "318840"
  },
  {
    "text": "know how that translates to what you guys do um but she came home with math",
    "start": "318840",
    "end": "324560"
  },
  {
    "text": "one day and she was doing this and I got really excited I was like oh no this is",
    "start": "324560",
    "end": "331199"
  },
  {
    "text": "functions like I I write functions every day it's she's like I know Dad programming shut up this is math right",
    "start": "331199",
    "end": "337280"
  },
  {
    "text": "uh it's not the same thing but it is and when we talk this is what we're talking about okay so f ofx = x plus 2 everybody",
    "start": "337280",
    "end": "344880"
  },
  {
    "text": "everybody understand this so if I pass a three in so F of three 3 + 2 I get five",
    "start": "344880",
    "end": "353360"
  },
  {
    "text": "functional programming that's that's what it comes down to if you want to build a bunch of stuff that",
    "start": "353360",
    "end": "359840"
  },
  {
    "text": "does this you're in the right place you're doing the right thing",
    "start": "359840",
    "end": "365319"
  },
  {
    "text": "um and then we have this nugget to round it out and avoids Changing State and",
    "start": "365319",
    "end": "371319"
  },
  {
    "text": "mutable data so I don't know if you guys are familiar with the programming language",
    "start": "371319",
    "end": "377400"
  },
  {
    "text": "that we are talking about um nothing's immutable in job like",
    "start": "377400",
    "end": "383319"
  },
  {
    "text": "everything has changed the the core object object isn't even immutable you",
    "start": "383319",
    "end": "389280"
  },
  {
    "text": "can go and mess around try this sometime I was going to say don't try this sometime just go like change",
    "start": "389280",
    "end": "397280"
  },
  {
    "text": "function you can um that's how trackjs actually does a lot of the stuff they do",
    "start": "397280",
    "end": "402560"
  },
  {
    "text": "is they add stuff into functions and objects and track everything that's",
    "start": "402560",
    "end": "407639"
  },
  {
    "text": "going on so um yeah",
    "start": "407639",
    "end": "413240"
  },
  {
    "text": "okay that is why this talk is not called functional JavaScript I do not believe",
    "start": "413240",
    "end": "419840"
  },
  {
    "text": "as a person that functional JavaScript really exists there are some packages that help we're going to talk about",
    "start": "419840",
    "end": "425080"
  },
  {
    "text": "functional style JavaScript because there are so as much as I've kind of like laughed at some of it you can you",
    "start": "425080",
    "end": "432599"
  },
  {
    "text": "can learn a lot and you can do a lot of things with with the functional style and we'll dig into to what that kind of",
    "start": "432599",
    "end": "440440"
  },
  {
    "text": "means so Martin nki says this the programmers in that segment that segment",
    "start": "440440",
    "end": "446400"
  },
  {
    "text": "being functional programming um like functional programing because it makes",
    "start": "446400",
    "end": "452560"
  },
  {
    "text": "code cleaner better structured and prevents many classes of",
    "start": "452560",
    "end": "459360"
  },
  {
    "text": "Errors overall according to Martin functional programming is just better",
    "start": "459360",
    "end": "465919"
  },
  {
    "text": "it's better than whatever you're doing now because it's cleaner it's better structured and the errors don't",
    "start": "465919",
    "end": "472400"
  },
  {
    "text": "happen that's fair so you might hear things like the following okay so I have a friend I would go out to lunch with",
    "start": "472400",
    "end": "480639"
  },
  {
    "text": "he would talk through and he would say I kid you not he would utter this",
    "start": "480639",
    "end": "485960"
  },
  {
    "text": "phrase this is a real conversation he said man when you can take a",
    "start": "485960",
    "end": "491319"
  },
  {
    "text": "function and you can strip it down and make it just a pure",
    "start": "491319",
    "end": "496360"
  },
  {
    "text": "function that's the best feeling",
    "start": "496360",
    "end": "501599"
  },
  {
    "text": "now I'm sad for him because I don't think he understands what the word best",
    "start": "501599",
    "end": "506680"
  },
  {
    "text": "means but um and I would say in respon",
    "start": "506680",
    "end": "512080"
  },
  {
    "text": "pure functions are awesome why it's in the name they're pure",
    "start": "512080",
    "end": "519279"
  },
  {
    "text": "they're beautiful right it's like but why I don't know they're testable I",
    "start": "519279",
    "end": "527399"
  },
  {
    "text": "that's usually about as far as I got and so we'll talk about that we'll come back",
    "start": "527399",
    "end": "532519"
  },
  {
    "text": "to it side effects your code should have no side",
    "start": "532519",
    "end": "538279"
  },
  {
    "text": "effects have you heard this phrase before no side effects how many of you have ever wanted to like output",
    "start": "538279",
    "end": "544000"
  },
  {
    "text": "something to a screen or like do a network call or guess what those are all",
    "start": "544000",
    "end": "549279"
  },
  {
    "text": "side effects so side effects have to happen like you",
    "start": "549279",
    "end": "555880"
  },
  {
    "text": "can't not do side effects that's craziness um but",
    "start": "555880",
    "end": "561920"
  },
  {
    "text": "your but they all of my friends anyway they say all these things but they didn't ever understand why and if you",
    "start": "562720",
    "end": "568720"
  },
  {
    "text": "don't know what tail recursion is good um you may look that up later if you",
    "start": "568720",
    "end": "575040"
  },
  {
    "text": "want to I'm not going to talk about it but um right it's one of those things that just you don't need to worry about",
    "start": "575040",
    "end": "583760"
  },
  {
    "text": "um okay but it comes back to this here's here's the key to Martin's talk or",
    "start": "583760",
    "end": "589680"
  },
  {
    "text": "comment prevents many classes of Errors here's the thing with with functional",
    "start": "589680",
    "end": "596519"
  },
  {
    "text": "programming they have compilers and they have tools that like prevent",
    "start": "596680",
    "end": "602920"
  },
  {
    "text": "all this stuff from happening in JavaScript we don't have all those tools so we don't have",
    "start": "602920",
    "end": "609480"
  },
  {
    "text": "anything that makes sure you didn't change State and we don't have anything that makes sure your functions are pure",
    "start": "609480",
    "end": "615279"
  },
  {
    "text": "we just have to kind of do it on on our own and it doesn't actually prevent hardcore the errors",
    "start": "615279",
    "end": "622640"
  },
  {
    "text": "um that it thinks it does so there you go we're done don't do",
    "start": "622640",
    "end": "628800"
  },
  {
    "text": "it right right no that's I promise that's not word okay so I was talking to this guy named Nate Taylor this is his",
    "start": "628800",
    "end": "635519"
  },
  {
    "text": "um his Twitter handle and and so every time I do this talk somebody tweets at him and lets him know that I'm doing",
    "start": "635519",
    "end": "641560"
  },
  {
    "text": "this talk Nate Taylor is so famous I don't know any plural site people okay um he has his own plural",
    "start": "641560",
    "end": "649639"
  },
  {
    "text": "site icon in the icon Library a plural site like this is actually what Nate",
    "start": "649639",
    "end": "654800"
  },
  {
    "text": "Taylor looks like Nate Taylor um has a functional JavaScript course",
    "start": "654800",
    "end": "660000"
  },
  {
    "text": "and so before that course came out we were talking a little bit and I was kind of expressing my frustrations with the whole functional thing and Nate did what",
    "start": "660000",
    "end": "667560"
  },
  {
    "text": "he does um best is he told me I was wrong um and that we we need to figure",
    "start": "667560",
    "end": "675000"
  },
  {
    "text": "this out and so he he said here's the reality in JavaScript remember we're not",
    "start": "675000",
    "end": "681440"
  },
  {
    "text": "talking about Scala or Elm or any of these other things we're talking about JavaScript in JavaScript functional",
    "start": "681440",
    "end": "687720"
  },
  {
    "text": "style is not about the error part of it it's about the other two things so so in",
    "start": "687720",
    "end": "693920"
  },
  {
    "text": "JavaScript right you can't avoid all your side effects side effects are going to happen you got to you have to have",
    "start": "693920",
    "end": "699800"
  },
  {
    "text": "side effects are things that happen not all of your functions are going to be pure that's not the point the point is",
    "start": "699800",
    "end": "708200"
  },
  {
    "text": "about oh not everything has to be immutable or can nothing can be immutable yeah you want to have some",
    "start": "708200",
    "end": "714600"
  },
  {
    "text": "things not change but not everything has to be immutable here's the thing",
    "start": "714600",
    "end": "720040"
  },
  {
    "text": "we're going to spend the rest of the time I'm going to convince you of this thing using functional style in JavaScript is about making your life",
    "start": "720040",
    "end": "727120"
  },
  {
    "text": "easier not harder it's about simplifying what we're doing so that we're using less brain",
    "start": "727120",
    "end": "734920"
  },
  {
    "text": "power right and making things",
    "start": "734920",
    "end": "738760"
  },
  {
    "text": "simpler so this is ultimately the point functional JavaScript is about building",
    "start": "742480",
    "end": "747800"
  },
  {
    "text": "small composable things and fitting them together to make the big overarching um right so back to the",
    "start": "747800",
    "end": "755560"
  },
  {
    "text": "example right it's about building the elements structuring the so let's we're",
    "start": "755560",
    "end": "760920"
  },
  {
    "text": "going to talk about this for the rest of the talk okay how many of you have seen this map before I will tell you Europe",
    "start": "760920",
    "end": "768399"
  },
  {
    "text": "at night is very different than America at night because in America like from",
    "start": "768399",
    "end": "773839"
  },
  {
    "text": "here over it's black like nobody lives out there except for right along the coast in Europe you guys live",
    "start": "773839",
    "end": "780760"
  },
  {
    "text": "everywhere like even in the middle of the ocean there's still people I don't necessarily understand I guess there's",
    "start": "780760",
    "end": "787600"
  },
  {
    "text": "islands all through here I don't know um oil rigs are they oil rigs is that what it is",
    "start": "787600",
    "end": "793959"
  },
  {
    "text": "okay that makes a lot of sense I thank I yay okay um even like way up here anyway",
    "start": "793959",
    "end": "803360"
  },
  {
    "text": "okay um are those oil rigs too is that you you guys love your oil okay uh",
    "start": "803360",
    "end": "811880"
  },
  {
    "text": "I guess that makes a lot more sense um anyway beside the point",
    "start": "811880",
    "end": "819399"
  },
  {
    "text": "so this is how I tend to think of programming and you know I'm so now I'm",
    "start": "819399",
    "end": "824800"
  },
  {
    "text": "a I'm an architect I'm a technology adviser I think about systems I think about the big picture and how everything",
    "start": "824800",
    "end": "831600"
  },
  {
    "text": "fits together and all of this stuff but guess what this doesn't just happen right",
    "start": "831600",
    "end": "839759"
  },
  {
    "text": "nobody thought at the beginning hey here's Europe let's um let's make lots of",
    "start": "839759",
    "end": "845360"
  },
  {
    "text": "Lights here let's right this kind of came about there was some planning",
    "start": "845360",
    "end": "850440"
  },
  {
    "text": "involved but it just kind of came about it's a whole lot of",
    "start": "850440",
    "end": "856320"
  },
  {
    "text": "these there a lot of these and apparently a lot of fires from oil rigs",
    "start": "856320",
    "end": "862040"
  },
  {
    "text": "but but there's also these and so this is the stuff we're going to talk",
    "start": "862040",
    "end": "867959"
  },
  {
    "text": "about because ultimately this is the stuff that your code's made of you're",
    "start": "867959",
    "end": "873639"
  },
  {
    "text": "going to make a whole lot of street lights that are going to end up being that big huge",
    "start": "873639",
    "end": "878880"
  },
  {
    "text": "map so functional functional style for us what we're going to talk about here",
    "start": "878880",
    "end": "884320"
  },
  {
    "text": "thinks about the smallest pieces and how to fit those things",
    "start": "884320",
    "end": "889839"
  },
  {
    "text": "together let's start oh because ultimately you have to think about both right so when we start doing functional",
    "start": "889839",
    "end": "896040"
  },
  {
    "text": "style it doesn't mean ignore everything else you still have to think about the big picture and think about the",
    "start": "896040",
    "end": "901279"
  },
  {
    "text": "procedure and think about all of those things but when it comes time to actually start building things together",
    "start": "901279",
    "end": "908079"
  },
  {
    "text": "and let's look at a raise the subtitle for this talk used to be never write a",
    "start": "908680",
    "end": "914320"
  },
  {
    "text": "for loop again because how many of you write a for Loop how many of you wrote a for Loop like yesterday I know it was Sunday",
    "start": "914320",
    "end": "922800"
  },
  {
    "text": "um but still like four Loops are the default like literally I used to joke",
    "start": "922800",
    "end": "929759"
  },
  {
    "text": "that our entire job as a developer was getting data from somewhere putting it",
    "start": "929759",
    "end": "936000"
  },
  {
    "text": "in a for Loop and doing stuff with it and then displaying it to a screen like that sums up what we do right so let's",
    "start": "936000",
    "end": "943079"
  },
  {
    "text": "look at arrays and we'll kind of set the stage for some Simplicity here because this becomes really easy in JavaScript",
    "start": "943079",
    "end": "949440"
  },
  {
    "text": "all right what's the output of this Loop",
    "start": "949440",
    "end": "956360"
  },
  {
    "text": "okay you guys I assume I've been doing programming at least for a little",
    "start": "959920",
    "end": "965800"
  },
  {
    "text": "while and it took you more I waited like a good 15 seconds and nobody belted out",
    "start": "965800",
    "end": "972120"
  },
  {
    "text": "any who anybody will take a guess it's not a trick question this is not a trick",
    "start": "972120",
    "end": "977560"
  },
  {
    "text": "2 three four five six 2 three four five six excellent",
    "start": "977560",
    "end": "983480"
  },
  {
    "text": "um right we're just going to add one to each item uh the first couple of times S",
    "start": "983480",
    "end": "989040"
  },
  {
    "text": "I did this talk I left this comment here and like everybody got it right away but once you have to kind of think about",
    "start": "989040",
    "end": "994880"
  },
  {
    "text": "this is about as simple a for loop I could come up with and it still takes a little bit of time to figure out what's",
    "start": "994880",
    "end": "1001600"
  },
  {
    "text": "going on and let's let's kind of break this down we've got some iteration code that's going on here you know how we're",
    "start": "1001600",
    "end": "1008680"
  },
  {
    "text": "going to iterate over a thing I'm certain that you will have examples but almost never do I have",
    "start": "1008680",
    "end": "1015959"
  },
  {
    "text": "anything other than i++ here right give me the next one right but now you've got",
    "start": "1015959",
    "end": "1022319"
  },
  {
    "text": "four each and you've got all these other things that essentially kind of do this for you but it's still kind of the basic idea um and then we have some worker",
    "start": "1022319",
    "end": "1029720"
  },
  {
    "text": "code here's some code that we're going to implement on each item that's how four Loops break",
    "start": "1029720",
    "end": "1037600"
  },
  {
    "text": "down okay so I have multiple things that are",
    "start": "1037600",
    "end": "1043280"
  },
  {
    "text": "happening not just one and I want to break everything apart functional style says let's let's take it to the minimum",
    "start": "1043280",
    "end": "1050160"
  },
  {
    "text": "possible thing I can take it to so let's break this up okay so let's take our iteration code how many of you this I'm",
    "start": "1050160",
    "end": "1057160"
  },
  {
    "text": "starting with the one that's easy because many of you will know this list. map what does list. map do it iterates",
    "start": "1057160",
    "end": "1065880"
  },
  {
    "text": "over the array right it basically is the for Loop but but broken down into just",
    "start": "1065880",
    "end": "1071240"
  },
  {
    "text": "this one thing but then list.",
    "start": "1071240",
    "end": "1077400"
  },
  {
    "text": "map takes a function so what were we doing what uh before I what were we",
    "start": "1077400",
    "end": "1082480"
  },
  {
    "text": "doing in the array to the array each item in the array what were we doing to it do you remember adding one we're",
    "start": "1082480",
    "end": "1088600"
  },
  {
    "text": "adding one right we just got let's do a plus one right there so what we need to do",
    "start": "1088600",
    "end": "1095280"
  },
  {
    "text": "with map is we need to pass a function into list up map to do the",
    "start": "1095280",
    "end": "1103240"
  },
  {
    "text": "thing but it has to be a pure function it doesn't have to be because nothing is",
    "start": "1103240",
    "end": "1108559"
  },
  {
    "text": "in forced but please make it a pure function right um and so what is a pure",
    "start": "1108559",
    "end": "1116360"
  },
  {
    "text": "function let's talk about what the definition of a pure function is in computer programming I don't know another",
    "start": "1116360",
    "end": "1123280"
  },
  {
    "text": "Paradigm where we talk about pure functions but a function may be considered a pure function if both must",
    "start": "1123280",
    "end": "1131799"
  },
  {
    "text": "have both things of the following statements hold true the function always evaluates to the same result given the",
    "start": "1131799",
    "end": "1138360"
  },
  {
    "text": "same arguments as values it is very predictable pass one thing in you get",
    "start": "1138360",
    "end": "1144840"
  },
  {
    "text": "the same thing back remember this if I pass three into here I will always get",
    "start": "1144840",
    "end": "1150720"
  },
  {
    "text": "five it's actually kind of funny I had my 3 + 2 equals 5 slide up and and a",
    "start": "1150720",
    "end": "1156559"
  },
  {
    "text": "friend of mine was like well that's good to know I was like no that's the point like you know you will always have five",
    "start": "1156559",
    "end": "1162799"
  },
  {
    "text": "you will never get seven you'll never get 10 you know",
    "start": "1162799",
    "end": "1168039"
  },
  {
    "text": "function AB return AB always returns the same thing that is a pure function math.",
    "start": "1169200",
    "end": "1178440"
  },
  {
    "text": "random not pure will you ever have to do random numbers yes guess what you're not",
    "start": "1178440",
    "end": "1184480"
  },
  {
    "text": "going to do them with a pure function",
    "start": "1184480",
    "end": "1188320"
  },
  {
    "text": "um evaluation of the results here's the second thing does not cause any semantically observable side effect or",
    "start": "1189720",
    "end": "1197240"
  },
  {
    "text": "output such as mutations of mutable objects or output to IO devices a pure",
    "start": "1197240",
    "end": "1202520"
  },
  {
    "text": "function can't change anything else and that's important and here's",
    "start": "1202520",
    "end": "1208360"
  },
  {
    "text": "why well hold on so how many of you have had to like sum things before right I'm",
    "start": "1208360",
    "end": "1217520"
  },
  {
    "text": "doing something outside not a pure",
    "start": "1217520",
    "end": "1223120"
  },
  {
    "text": "function okay why anybody take a while guess why would",
    "start": "1223880",
    "end": "1230039"
  },
  {
    "text": "have pure functions more easily testable more easily testable what",
    "start": "1230039",
    "end": "1236640"
  },
  {
    "text": "else functional style we're making things",
    "start": "1236880",
    "end": "1242080"
  },
  {
    "text": "simple so if they're pure and I can rely on it always being the same thing it's",
    "start": "1244480",
    "end": "1252120"
  },
  {
    "text": "less complex easier to reason about I understand what this piece of code is",
    "start": "1252120",
    "end": "1257559"
  },
  {
    "text": "doing easier to test right how many of you write unit",
    "start": "1257559",
    "end": "1263200"
  },
  {
    "text": "tests for your code how many of you sometimes think that is a very hard thing to do right",
    "start": "1263200",
    "end": "1269960"
  },
  {
    "text": "simplify it a little bit um write write your code in a way that's much easier to test and pure functions help with that",
    "start": "1269960",
    "end": "1277880"
  },
  {
    "text": "um because there's less complexity because it's easier to test it becomes much easier to understand we want to use",
    "start": "1277880",
    "end": "1283520"
  },
  {
    "text": "less brain power overall of the whole thing all right so",
    "start": "1283520",
    "end": "1290159"
  },
  {
    "text": "I now have a function that says hey I am going to return +",
    "start": "1290159",
    "end": "1297000"
  },
  {
    "text": "one throw that in there um this is however now",
    "start": "1297000",
    "end": "1303080"
  },
  {
    "text": "2019 we don't do things like this anymore now now we do it like this Arrow",
    "start": "1303080",
    "end": "1308520"
  },
  {
    "text": "functions we're not going to talk about Arrow functions but like we tend to do that for anonomous functions now and",
    "start": "1308520",
    "end": "1314000"
  },
  {
    "text": "then depending on where you're working I actually have worked at a place where this would fit fail a code",
    "start": "1314000",
    "end": "1321200"
  },
  {
    "text": "review because I did several unnecessary",
    "start": "1321200",
    "end": "1326559"
  },
  {
    "text": "keystrokes um right here I can just do this I don't necessarily like this but I",
    "start": "1326559",
    "end": "1333159"
  },
  {
    "text": "went along with it because it becomes a little harder to read so this is simple now I have one rule in",
    "start": "1333159",
    "end": "1339039"
  },
  {
    "text": "life and yes this is a very simplistic example we don't tend to do this most of",
    "start": "1339039",
    "end": "1346720"
  },
  {
    "text": "the stuff we do is a little more complicated I have a general rule in life is I do not like Anonymous",
    "start": "1346720",
    "end": "1353000"
  },
  {
    "text": "functions um as a rule Anonymous functions can be unclear what if I pulled this out and gave it a",
    "start": "1353000",
    "end": "1362000"
  },
  {
    "text": "name what so now I just hey I just pull the list. map add",
    "start": "1364799",
    "end": "1371480"
  },
  {
    "text": "one okay remember this was supposed to be easier to understand and clearer do you do you remember this and I said hey",
    "start": "1371600",
    "end": "1378640"
  },
  {
    "text": "what's going to be the output here and I waited about 15 seconds for you guys to figure this out and some of you got it",
    "start": "1378640",
    "end": "1386200"
  },
  {
    "text": "right away I know you just didn't want to say it out loud right but we went from this to",
    "start": "1386200",
    "end": "1393960"
  },
  {
    "text": "this what's gon to what's going to print out to the console I'm not going to call on you because you know the right answer",
    "start": "1394159",
    "end": "1400039"
  },
  {
    "text": "I'm going to assume um okay what's going to print out to the console go ahead and say it right right okay yeah",
    "start": "1400039",
    "end": "1409720"
  },
  {
    "text": "um there we go um and there's a reason for that and we'll get to that here in",
    "start": "1409720",
    "end": "1415200"
  },
  {
    "text": "just a second but the idea here is this line is incredibly easy to understand it",
    "start": "1415200",
    "end": "1422440"
  },
  {
    "text": "takes no brain power it takes No Time list. map add one I'm adding one",
    "start": "1422440",
    "end": "1428000"
  },
  {
    "text": "to to each item because inside map is happens to each item so I'm just adding",
    "start": "1428000",
    "end": "1434520"
  },
  {
    "text": "one but um we have another rule in",
    "start": "1434679",
    "end": "1439720"
  },
  {
    "text": "functional programming which is immutability right so avoids Changing",
    "start": "1439720",
    "end": "1444880"
  },
  {
    "text": "State IM mutable data so I'm not going to have a function that's going to change the contents of the thing that's",
    "start": "1444880",
    "end": "1452440"
  },
  {
    "text": "happening because honestly why force it",
    "start": "1453840",
    "end": "1459600"
  },
  {
    "text": "um so if if list. map always changed",
    "start": "1459600",
    "end": "1464640"
  },
  {
    "text": "what was happening in list what happens if I want list",
    "start": "1464640",
    "end": "1470159"
  },
  {
    "text": "it's not really all that simple to make a copy of something I mean you've got to like call you can't just say list b",
    "start": "1470159",
    "end": "1475559"
  },
  {
    "text": "equals list a and then change list a it doesn't work that way um right but I can",
    "start": "1475559",
    "end": "1481480"
  },
  {
    "text": "do this I can just say con new list equals and now I have both my list and",
    "start": "1481480",
    "end": "1488120"
  },
  {
    "text": "my new list and things are changed I have that option that's available to me what if I want to change list though",
    "start": "1488120",
    "end": "1496520"
  },
  {
    "text": "can I do that yeah and just say list equals this is like not Rockstar stuff right",
    "start": "1496520",
    "end": "1504960"
  },
  {
    "text": "um this be so overall this code is significantly easier than it was",
    "start": "1504960",
    "end": "1512039"
  },
  {
    "text": "before is map the only option dude we've oh volume",
    "start": "1512039",
    "end": "1519720"
  },
  {
    "text": "mutability okay react here's your react example um for those of you who do react",
    "start": "1519799",
    "end": "1525399"
  },
  {
    "text": "uh how does react know when state has changed it just compares the Old State to the",
    "start": "1525399",
    "end": "1530720"
  },
  {
    "text": "new state if they're the same they haven't changed if they're different it's changed it's super easy if you change",
    "start": "1530720",
    "end": "1538279"
  },
  {
    "text": "something if I go object a dox equals something it's still the same object as",
    "start": "1538279",
    "end": "1544200"
  },
  {
    "text": "in changed if I say object or state",
    "start": "1544200",
    "end": "1549440"
  },
  {
    "text": "equals something else uh then I change",
    "start": "1549440",
    "end": "1555799"
  },
  {
    "text": "it if I don't okay this is just a pointer evaluation",
    "start": "1556600",
    "end": "1563480"
  },
  {
    "text": "right it's not a make sure everything's the same if they're pointing to the same thing it's",
    "start": "1563480",
    "end": "1569320"
  },
  {
    "text": "the same thing if this is different guess what um things are",
    "start": "1569320",
    "end": "1575919"
  },
  {
    "text": "changed it enforces options we talked about that and again it's easier to",
    "start": "1575919",
    "end": "1582840"
  },
  {
    "text": "understand if you have to worry about whether or not something changed that's one more thing you've got to think about",
    "start": "1582840",
    "end": "1589760"
  },
  {
    "text": "because ultimately we want to make things easier this one line this is what",
    "start": "1589760",
    "end": "1595200"
  },
  {
    "text": "you're walking away from and no for Loops like this is the whole point of",
    "start": "1595200",
    "end": "1600520"
  },
  {
    "text": "what we're trying to accomplish but I used an incredibly",
    "start": "1600520",
    "end": "1606960"
  },
  {
    "text": "simple like way simple example how often do you just add one things in a list and",
    "start": "1606960",
    "end": "1612559"
  },
  {
    "text": "then right things become much more complicated so let's talk about that um",
    "start": "1612559",
    "end": "1617600"
  },
  {
    "text": "not remember when we did the something like not everything is self-contained sometimes you have to do",
    "start": "1617600",
    "end": "1624279"
  },
  {
    "text": "things outside there's a function for this there's an array function called",
    "start": "1624279",
    "end": "1631159"
  },
  {
    "text": "reduce and so what what reduce does is it's the same thing as the map it's going to run on everything but it's",
    "start": "1631159",
    "end": "1637440"
  },
  {
    "text": "going to pass in a value that starts with zero here and so",
    "start": "1637440",
    "end": "1643320"
  },
  {
    "text": "I've got here's the here's the item and here's my running total my running",
    "start": "1643320",
    "end": "1649279"
  },
  {
    "text": "sum and then I'm just going to add the item to the sum and then at the end it's going to spit that",
    "start": "1649279",
    "end": "1654640"
  },
  {
    "text": "out so what's happening list. reduce what am I doing I'm summing my",
    "start": "1654640",
    "end": "1660960"
  },
  {
    "text": "list that's it you don't have to read the code and figure out what's going on hey guess what I'm summing my list so",
    "start": "1660960",
    "end": "1666840"
  },
  {
    "text": "you use reduce to do things um like calculations across an",
    "start": "1666840",
    "end": "1673640"
  },
  {
    "text": "array what is this line of code doing [Music]",
    "start": "1674519",
    "end": "1681799"
  },
  {
    "text": "it's returning right so it's returning all",
    "start": "1681799",
    "end": "1686840"
  },
  {
    "text": "the even numbers that's it right simple very easy",
    "start": "1686840",
    "end": "1692760"
  },
  {
    "text": "to understand here's what this looks like right so I have a list. filter is",
    "start": "1692760",
    "end": "1697799"
  },
  {
    "text": "going to filter stuff it's and anything that is even so that's ultimately what that",
    "start": "1697799",
    "end": "1706120"
  },
  {
    "text": "means item two if there's no remainder then it's false so I have to nod it to",
    "start": "1706120",
    "end": "1711159"
  },
  {
    "text": "make it true list of filter is even",
    "start": "1711159",
    "end": "1715640"
  },
  {
    "text": "okay and because we're returning new I can chain",
    "start": "1716600",
    "end": "1722679"
  },
  {
    "text": "them and I can do map reduce I'm going to add one and then sum I'm gonna right",
    "start": "1722679",
    "end": "1728120"
  },
  {
    "text": "just like now we're back into jQuery days who would remembers jQuery like you can chain everything oh yeah right okay",
    "start": "1728120",
    "end": "1734039"
  },
  {
    "text": "so I can chain everything that I need I like",
    "start": "1734039",
    "end": "1739480"
  },
  {
    "text": "jQuery I haven't done jQuery in a very long time but I just remember it was all so awesome that I could just like chain",
    "start": "1739480",
    "end": "1745799"
  },
  {
    "text": "all this stuff out okay we're going to talk about the",
    "start": "1745799",
    "end": "1752080"
  },
  {
    "text": "last concept now when it comes to this so I've got a list of names John Jack",
    "start": "1752080",
    "end": "1757480"
  },
  {
    "text": "Mary Susan Sarah and I want to find Mar in this",
    "start": "1757480",
    "end": "1763720"
  },
  {
    "text": "list right so I'm going to do this list find and I'm going to check every item",
    "start": "1763720",
    "end": "1770519"
  },
  {
    "text": "to see if it's Mary I probably if I hadn't pointed that out nobody would have",
    "start": "1770519",
    "end": "1777200"
  },
  {
    "text": "noticed I need to fix that um okay so find list. Mary or find Mary from the",
    "start": "1777200",
    "end": "1784200"
  },
  {
    "text": "list right um here's a problem with this first of all I have one rule in life",
    "start": "1784200",
    "end": "1790880"
  },
  {
    "text": "which means I don't like Anonymous functions so I need to pull this",
    "start": "1790880",
    "end": "1796519"
  },
  {
    "text": "out um so that this",
    "start": "1796519",
    "end": "1801559"
  },
  {
    "text": "works but what happens when I want to find something else I have to create a new function that has Susan in it",
    "start": "1801559",
    "end": "1807679"
  },
  {
    "text": "instead of Mary and that none of that works so we're",
    "start": "1807679",
    "end": "1813240"
  },
  {
    "text": "going to do something a little different we're I want to do this I want to pass",
    "start": "1813240",
    "end": "1818640"
  },
  {
    "text": "in who I'm looking for into my get person and then it's going to go find that um list. find does not accept that",
    "start": "1818640",
    "end": "1827640"
  },
  {
    "text": "by the way way um so I got to figure something else out so we let's talk about higher order functions how many of",
    "start": "1827640",
    "end": "1833720"
  },
  {
    "text": "you are familiar with the phrase higher order functions it's really simple there's a lot of words",
    "start": "1833720",
    "end": "1839919"
  },
  {
    "text": "here um but it's really simple it is a function that does at least one of the",
    "start": "1839919",
    "end": "1845679"
  },
  {
    "text": "following remember pure functions had to do both higher order functions only have to do one it either takes one or more",
    "start": "1845679",
    "end": "1852919"
  },
  {
    "text": "functions as an argument think about a call back right",
    "start": "1852919",
    "end": "1858000"
  },
  {
    "text": "I'm passing a function into a call that's a higher order function it takes a function as an argument then it's",
    "start": "1858000",
    "end": "1863159"
  },
  {
    "text": "going to ex execute it later or it returns a function as its",
    "start": "1863159",
    "end": "1869159"
  },
  {
    "text": "result so you can write a function that returns another function and then that",
    "start": "1869159",
    "end": "1874639"
  },
  {
    "text": "function is what get ex gets executed so think about that here's what I want so get",
    "start": "1874639",
    "end": "1883159"
  },
  {
    "text": "person actually is going to return a function with the search term",
    "start": "1883159",
    "end": "1889320"
  },
  {
    "text": "so right I'm going to call get person Mary I fixed it see magic um okay so",
    "start": "1889320",
    "end": "1896919"
  },
  {
    "text": "return function I get excited about the dumbest things okay um and now I'm going to return a",
    "start": "1896919",
    "end": "1903399"
  },
  {
    "text": "function that searches for mirror so you can say hey I need a",
    "start": "1903399",
    "end": "1908639"
  },
  {
    "text": "function that does this thing and you can create a function that's going to build that function it's going to return the function it's going to do all this",
    "start": "1908639",
    "end": "1914080"
  },
  {
    "text": "kind of stuff",
    "start": "1914080",
    "end": "1917398"
  },
  {
    "text": "you could do this but I hate that it's the same",
    "start": "1919679",
    "end": "1926120"
  },
  {
    "text": "thing um on its face does that make sense to anybody right I mean so we get carried",
    "start": "1926120",
    "end": "1933080"
  },
  {
    "text": "away with our Arrow function sometimes but um I originally had it like that I was like that doesn't make that makes it",
    "start": "1933080",
    "end": "1938840"
  },
  {
    "text": "way more horrible um so right this",
    "start": "1938840",
    "end": "1943880"
  },
  {
    "text": "search returns this which is a function which returns",
    "start": "1943880",
    "end": "1949120"
  },
  {
    "text": "that okay oh oh right so get person married",
    "start": "1949120",
    "end": "1954240"
  },
  {
    "text": "what's it going to return it's going to just return Mary and that's you already have Mary so you don't need Mary right",
    "start": "1954240",
    "end": "1962639"
  },
  {
    "text": "that doesn't help you at all so um in this particular usually you're looking for an object and then you'll do",
    "start": "1962639",
    "end": "1968000"
  },
  {
    "text": "something on the right in this case no um so we have find index which also do this now th those",
    "start": "1968000",
    "end": "1975120"
  },
  {
    "text": "are the array things I'm going to talk about and so so what I would encourage you to do is the next time you find",
    "start": "1975120",
    "end": "1980600"
  },
  {
    "text": "yourself having to find write a write a for Loop and look for something look at",
    "start": "1980600",
    "end": "1986679"
  },
  {
    "text": "the list of functions that are attached to array there is something already",
    "start": "1986679",
    "end": "1991840"
  },
  {
    "text": "written that's going to do what you're trying to accomplish and the end result of the code is going to be so much",
    "start": "1991840",
    "end": "1998880"
  },
  {
    "text": "cleaner than the whatever for Loop you're going to be implementing it's just adopting the functional style is",
    "start": "1998880",
    "end": "2005360"
  },
  {
    "text": "starting to get your mind into this what's the function I can call to do this instead of what's the code I need",
    "start": "2005360",
    "end": "2011840"
  },
  {
    "text": "to write to do this",
    "start": "2011840",
    "end": "2017519"
  },
  {
    "text": "currying um okay so",
    "start": "2017519",
    "end": "2024000"
  },
  {
    "text": "um we had Indian food last night and so now that's of course all I can think of when I say currying is more Indian food",
    "start": "2024000",
    "end": "2031919"
  },
  {
    "text": "um okay so currying how many of you have heard this term okay",
    "start": "2031919",
    "end": "2039720"
  },
  {
    "text": "currying is this in mathematics and computer science in both not just computer science currying is the",
    "start": "2040159",
    "end": "2046720"
  },
  {
    "text": "techniques of translating the evaluation of a function that takes multiple arguments into evaluation of a sequence",
    "start": "2046720",
    "end": "2054398"
  },
  {
    "text": "of functions with a single argument sounds pretty straightforward right we my friends are going to take",
    "start": "2054399",
    "end": "2062240"
  },
  {
    "text": "this function and we're going to turn it into this",
    "start": "2062240",
    "end": "2069720"
  },
  {
    "text": "right like that's what it is um that doesn't really",
    "start": "2070720",
    "end": "2077118"
  },
  {
    "text": "even it doesn't even make sense like if I need two arguments just let me take two arguments why do I have to make",
    "start": "2077119",
    "end": "2083599"
  },
  {
    "text": "things Complicated by by like breaking things out um it's just it's just weird",
    "start": "2083599",
    "end": "2090919"
  },
  {
    "text": "um so I'm going to give you an example and this is just an example but it it's",
    "start": "2090919",
    "end": "2097118"
  },
  {
    "text": "the mind mind set that we're going to start adopting when it comes to um",
    "start": "2097119",
    "end": "2103880"
  },
  {
    "text": "functional style and currying okay so I have three",
    "start": "2103880",
    "end": "2109119"
  },
  {
    "text": "buttons and those three buttons have three different messages and depending on the button",
    "start": "2109119",
    "end": "2117079"
  },
  {
    "text": "that's being clicked I want to display the message it's contrived I know but",
    "start": "2117079",
    "end": "2123680"
  },
  {
    "text": "we're going to make a point so if I click on button three what message I want to click or display simple easy",
    "start": "2123680",
    "end": "2131560"
  },
  {
    "text": "button three button three okay so an onclick event",
    "start": "2131560",
    "end": "2137760"
  },
  {
    "text": "handler takes an event and then I'm going to take the ID",
    "start": "2137760",
    "end": "2143520"
  },
  {
    "text": "or I'm going to Loop over the buttons to figure out what message I'm supposed to",
    "start": "2143520",
    "end": "2150119"
  },
  {
    "text": "display I what I really",
    "start": "2150119",
    "end": "2155319"
  },
  {
    "text": "want is I want the index as well if the if the click Handler",
    "start": "2155319",
    "end": "2161640"
  },
  {
    "text": "could pass me the button index I wouldn't have to go look for the",
    "start": "2161640",
    "end": "2167119"
  },
  {
    "text": "button I could just go straight to the button and that would be so much easier the problem is the click Handler doesn't",
    "start": "2167119",
    "end": "2173839"
  },
  {
    "text": "work this way right it only passes me the event and",
    "start": "2173839",
    "end": "2179800"
  },
  {
    "text": "so look at what we have here we have a function that takes two",
    "start": "2179800",
    "end": "2186200"
  },
  {
    "text": "parameters what if could take this function that takes two",
    "start": "2186200",
    "end": "2191400"
  },
  {
    "text": "parameters right and separate it into a series of functions that each take",
    "start": "2191760",
    "end": "2197280"
  },
  {
    "text": "one that's currying right so what we can do remember this to so we needed find to",
    "start": "2197280",
    "end": "2205480"
  },
  {
    "text": "take Mary as well so we kind of broke it out we're going to do the same thing",
    "start": "2205480",
    "end": "2211200"
  },
  {
    "text": "um I can do this I can create a function that takes index and that function that takes",
    "start": "2211200",
    "end": "2218400"
  },
  {
    "text": "index returns a function that takes event index and event we used to be one",
    "start": "2218400",
    "end": "2224079"
  },
  {
    "text": "function that takes two now I have two functions that take one and then I can use what's the",
    "start": "2224079",
    "end": "2230720"
  },
  {
    "text": "word I can use the index that was passed in um",
    "start": "2230720",
    "end": "2236990"
  },
  {
    "text": "[Music] to to pass now where does index come from from the closure of the of the",
    "start": "2236990",
    "end": "2243359"
  },
  {
    "text": "function right so closures basically mean this function right here function event has access to the to the",
    "start": "2243359",
    "end": "2250800"
  },
  {
    "text": "larger Scope when it was created so this index flows through from the same place",
    "start": "2250800",
    "end": "2255960"
  },
  {
    "text": "so basically what I could do is I could say hey get on click index for my click ofet",
    "start": "2255960",
    "end": "2264680"
  },
  {
    "text": "Handler and it's done right so that's that's currying basically don't think about it as execution right next to each",
    "start": "2264680",
    "end": "2271839"
  },
  {
    "text": "other think about it as execution um so I can ship to different",
    "start": "2271839",
    "end": "2278040"
  },
  {
    "text": "parts of the system this this part of the system is going to do this thing this part is going to do this thing so I can pull everything apart into two",
    "start": "2278040",
    "end": "2285560"
  },
  {
    "text": "separate thing",
    "start": "2285560",
    "end": "2292720"
  },
  {
    "text": "monets who could explain to me what a monad",
    "start": "2292720",
    "end": "2299400"
  },
  {
    "text": "is nobody there's a no he",
    "start": "2299400",
    "end": "2306000"
  },
  {
    "text": "cannot um so this is real crockford has a law that says once you understand monads",
    "start": "2306000",
    "end": "2314960"
  },
  {
    "text": "you can no longer explain monads to someone else um and there's much more to the law of this this is uh",
    "start": "2314960",
    "end": "2322720"
  },
  {
    "text": "but so monads are hard and actually what what the longer version of the law kind",
    "start": "2322720",
    "end": "2329680"
  },
  {
    "text": "of states is you're going to take a lot of time you're going to understand monad you're going to think they're awesome like you're going to dig in like these",
    "start": "2329680",
    "end": "2335640"
  },
  {
    "text": "things are life altering they're going to change change everything about everything um and then you're going to try and explain it to somebody and what",
    "start": "2335640",
    "end": "2343319"
  },
  {
    "text": "they're going to think is yeah that's kind of stupid um so I'm going to attempt to uh",
    "start": "2343319",
    "end": "2351359"
  },
  {
    "text": "prove that I guess out because I'm going to explain monads to you and then you're going to say well that doesn't make",
    "start": "2351359",
    "end": "2357560"
  },
  {
    "text": "sense um and then we'll talk talk a little bit more about that okay",
    "start": "2357560",
    "end": "2364040"
  },
  {
    "text": "so more Wikipedia INF functional programming a moned is a design pattern first of all",
    "start": "2364040",
    "end": "2371119"
  },
  {
    "text": "that's the most important thing it's this is a pattern um that defines how functions actions inputs and outputs can",
    "start": "2371119",
    "end": "2377599"
  },
  {
    "text": "be used together to build generic types think about this for okay hold",
    "start": "2377599",
    "end": "2383040"
  },
  {
    "text": "on I have functions inputs and outputs",
    "start": "2384079",
    "end": "2389160"
  },
  {
    "text": "joined together into one type what is that",
    "start": "2389160",
    "end": "2395200"
  },
  {
    "text": "called that's an object right so okay anyway sorry I have have",
    "start": "2395200",
    "end": "2403000"
  },
  {
    "text": "functions actions inputs and outputs that can be get built together to form a generic type with the following",
    "start": "2403000",
    "end": "2410240"
  },
  {
    "text": "organization one Define a data type and how values of that data are type are",
    "start": "2410240",
    "end": "2415880"
  },
  {
    "text": "combined here's a here's a type and here's how this stuff works together and",
    "start": "2415880",
    "end": "2422040"
  },
  {
    "text": "two create functions that use set data type and comp compose them together into",
    "start": "2422040",
    "end": "2429119"
  },
  {
    "text": "actions following the rules so basically a monad is if you're a functional person",
    "start": "2429119",
    "end": "2436400"
  },
  {
    "text": "like you would throw a tomato at me right now so I I I get that functions are basically like objects that do stuff",
    "start": "2436400",
    "end": "2444160"
  },
  {
    "text": "right um but way more complicated than that but not really",
    "start": "2444160",
    "end": "2450280"
  },
  {
    "text": "um monads are things so in in functional like like Scala or like real function",
    "start": "2450280",
    "end": "2457520"
  },
  {
    "text": "programming you can't change things things are immutable there's all this big monads are this big",
    "start": "2457520",
    "end": "2463319"
  },
  {
    "text": "implementation that allow you to get around that that's kind of the point at",
    "start": "2463319",
    "end": "2469040"
  },
  {
    "text": "a much higher level um but let me explain this okay this is",
    "start": "2469040",
    "end": "2475599"
  },
  {
    "text": "an actual monad it is the simplest monad but it is an actual monad um this is the",
    "start": "2475599",
    "end": "2481400"
  },
  {
    "text": "identity mon the ENT identity monad is a function",
    "start": "2481400",
    "end": "2489440"
  },
  {
    "text": "called identity and you're going to pass a value and then the value of said",
    "start": "2489440",
    "end": "2495000"
  },
  {
    "text": "identity is the value so if I pass Five in what's the",
    "start": "2495000",
    "end": "2500440"
  },
  {
    "text": "value of the identity moad five now this is the Constructor you can't call this over and over again",
    "start": "2500440",
    "end": "2506000"
  },
  {
    "text": "this is when you construct the identity this is what it is I pass in a five I get a five",
    "start": "2506000",
    "end": "2513839"
  },
  {
    "text": "back all right now we add a function called bind on the Prototype of it so on the",
    "start": "2513839",
    "end": "2524200"
  },
  {
    "text": "object that passes in a transformed value and it's going to return",
    "start": "2524200",
    "end": "2530720"
  },
  {
    "text": "transform of that value ultimately what you end up with is",
    "start": "2530720",
    "end": "2537960"
  },
  {
    "text": "something like this x. bind value and it returns a new",
    "start": "2537960",
    "end": "2543920"
  },
  {
    "text": "identity with two added to the value so basically every time you change",
    "start": "2543920",
    "end": "2550720"
  },
  {
    "text": "something on a monad you are creating a new thing and passing the new thing back",
    "start": "2550720",
    "end": "2556359"
  },
  {
    "text": "why because things are immutable right um this becomes",
    "start": "2556359",
    "end": "2562520"
  },
  {
    "text": "complicated um we'll get back hold on I'll come back to that a second okay well no actually I'll talk about this",
    "start": "2562520",
    "end": "2568720"
  },
  {
    "text": "while I have this slide up because this slide is not necessarily true um for you",
    "start": "2568720",
    "end": "2574559"
  },
  {
    "text": "in general when somebody starts saying hey you should turn that into a monad not",
    "start": "2574559",
    "end": "2580240"
  },
  {
    "text": "that you will ever hear that if you do then you have your response to them is I don't",
    "start": "2580240",
    "end": "2586200"
  },
  {
    "text": "think so that doesn't seem like the best use of our time right now um now that",
    "start": "2586200",
    "end": "2593200"
  },
  {
    "text": "does not mean monads do not exist in JavaScript or do not have use in JavaScript one example that I like is",
    "start": "2593200",
    "end": "2598599"
  },
  {
    "text": "how many of you use a promise A promise is an implementation of of a particular type of monad I mean",
    "start": "2598599",
    "end": "2605160"
  },
  {
    "text": "monads exist and they exist down in the framework and tools to make things a little bit easier um",
    "start": "2605160",
    "end": "2612200"
  },
  {
    "text": "we generally are not the people who are writing the promise framework right",
    "start": "2612200",
    "end": "2617400"
  },
  {
    "text": "we're we're implementing the promise framework so we we don't have to worry about this so much and here's the other",
    "start": "2617400",
    "end": "2624160"
  },
  {
    "text": "problem with the monad in um remember this phrase prevents many",
    "start": "2624160",
    "end": "2631200"
  },
  {
    "text": "classes of Errors um it's the tooling that does the work",
    "start": "2631200",
    "end": "2637359"
  },
  {
    "text": "so um here I have a monad five I do a bind",
    "start": "2637359",
    "end": "2643440"
  },
  {
    "text": "with a new identity Value Plus two I get an eight the value of my monad is eight",
    "start": "2643440",
    "end": "2651240"
  },
  {
    "text": "and I know that and it's clear right up until somebody does",
    "start": "2651240",
    "end": "2657319"
  },
  {
    "text": "this because can I stop that in any way ever",
    "start": "2657319",
    "end": "2663680"
  },
  {
    "text": "no it doesn't work so that's that's the struggle when you start building and implementing the big monolithic things",
    "start": "2663680",
    "end": "2669599"
  },
  {
    "text": "of JavaScript sometimes you get um careless um okay because ultimately for",
    "start": "2669599",
    "end": "2677200"
  },
  {
    "text": "the majority of it it's the tooling that doesn't work so here's here's the thing that I want you to walk away with",
    "start": "2677200",
    "end": "2683119"
  },
  {
    "text": "cuz functional style for you in JavaScript uh for me",
    "start": "2683119",
    "end": "2690319"
  },
  {
    "text": "um makes a lot of sense uh because it's not the big",
    "start": "2690319",
    "end": "2696640"
  },
  {
    "text": "picture always sometimes it's just the little picture and so ultimately um the next time you sit",
    "start": "2696640",
    "end": "2705440"
  },
  {
    "text": "down so when you go back to work Monday I guess cuz you're here all week um maybe not I anyway Monday you're going",
    "start": "2705440",
    "end": "2715280"
  },
  {
    "text": "to go back to work and you're going to sit down and you're going to start writing a for Loop for something and I want you to think out loud to yourself",
    "start": "2715280",
    "end": "2722400"
  },
  {
    "text": "and all of your co-workers this is not the simplest way to solve this problem there's a much simpler way to solve this",
    "start": "2722400",
    "end": "2729160"
  },
  {
    "text": "problem by doing something with the array object there's a there's a",
    "start": "2729160",
    "end": "2734200"
  },
  {
    "text": "function on the array prototype that's going to make this simpler for me we're going to write a pure function we're",
    "start": "2734200",
    "end": "2739680"
  },
  {
    "text": "going to pass it in this is going to be much more readable when we're done simplify your",
    "start": "2739680",
    "end": "2746599"
  },
  {
    "text": "pieces remember that things are composable keep your interaction simple remember that functions are things you",
    "start": "2746680",
    "end": "2753040"
  },
  {
    "text": "can pass around I can create a function I can pass it over here and something gets done over here and then I can do",
    "start": "2753040",
    "end": "2758720"
  },
  {
    "text": "something over there it's going to return a function over here functions are things you can pass around but keep your interaction simple because you want",
    "start": "2758720",
    "end": "2765079"
  },
  {
    "text": "to be able to think about them later um because ultimately this is the point",
    "start": "2765079",
    "end": "2770559"
  },
  {
    "text": "functional style is about using less brain power like",
    "start": "2770559",
    "end": "2777599"
  },
  {
    "text": "seriously what we do is not like super easy right we want to be as easy as we can and that's where the the functional",
    "start": "2777599",
    "end": "2784960"
  },
  {
    "text": "style really steps in is let's let's make things simple and readable so we can get things done",
    "start": "2784960",
    "end": "2791520"
  },
  {
    "text": "um all right questions thoughts if you don't have any",
    "start": "2791520",
    "end": "2799920"
  },
  {
    "text": "you are free to go yes I just wonder what thoughts are okay thank you that was the other",
    "start": "2799920",
    "end": "2807400"
  },
  {
    "text": "thing I was going to mention and I didn't okay so there are a couple of tools that you can use to help imple",
    "start": "2807400",
    "end": "2814680"
  },
  {
    "text": "implement this so um ramda who's heard of that right so do you like it is it good",
    "start": "2814680",
    "end": "2822599"
  },
  {
    "text": "I like it I mean it seems to help with so it's got um some of this baked in so",
    "start": "2822599",
    "end": "2828119"
  },
  {
    "text": "that's a that's a good resource for you um immutable JS is something that helps",
    "start": "2828119",
    "end": "2833760"
  },
  {
    "text": "make things immutable like it it helps with this process so it gives you a level of tooling that's going to make",
    "start": "2833760",
    "end": "2840680"
  },
  {
    "text": "that that work for you it's not infallible but it is it is helpful so",
    "start": "2840680",
    "end": "2847079"
  },
  {
    "text": "there's a couple of tools ramda and immutablejs that are going to um help you implement kind of these",
    "start": "2847079",
    "end": "2854400"
  },
  {
    "text": "Concepts all right thank you guys very much uh enjoy the rest of the show and",
    "start": "2854400",
    "end": "2860680"
  },
  {
    "text": "um you can catch me around if you want to chat more all right thank you guys",
    "start": "2860680",
    "end": "2867680"
  }
]