[
  {
    "text": "good afternoon everybody and you've made it this far in a conference so like well done if you're like me you probably",
    "start": "6560",
    "end": "12900"
  },
  {
    "text": "needed a nap earlier today uh I think that's what happens at this time right but um hey thank you for coming to see",
    "start": "12900",
    "end": "20340"
  },
  {
    "text": "this talk today so late in the conference um quick introduction my name is Graham",
    "start": "20340",
    "end": "25800"
  },
  {
    "text": "Foster I work as a Cloud solution architect at Microsoft",
    "start": "25800",
    "end": "31019"
  },
  {
    "text": "um that's been my job for the last almost two years now but before that I was",
    "start": "31019",
    "end": "36960"
  },
  {
    "text": "pretty fortunate to get to work on some fairly large like micro service event",
    "start": "36960",
    "end": "42180"
  },
  {
    "text": "sourced event uh type architectures and uh we have some really smart Architects",
    "start": "42180",
    "end": "47820"
  },
  {
    "text": "throughout the time and picked up some interesting ideas kind of came up with some of my own ideas and learned a fair",
    "start": "47820",
    "end": "54180"
  },
  {
    "text": "bit about those architectures from you know reading watching videos and all that kind of stuff so I'm hoping to share a lot of that",
    "start": "54180",
    "end": "61920"
  },
  {
    "text": "kind of fundamental Eventing slash messaging patterns with you today",
    "start": "61920",
    "end": "67680"
  },
  {
    "text": "got a slide while I want to get out talking about what an event driven architecture is",
    "start": "67680",
    "end": "73740"
  },
  {
    "text": "talking about some of the kind of problems that we have to face when we come into an event driven architecture",
    "start": "73740",
    "end": "79759"
  },
  {
    "text": "especially when we start breaking things up into lots of small disparate services",
    "start": "79759",
    "end": "85460"
  },
  {
    "text": "and we kind of move away from these monolithic applications where we can do things consistently anatomically in a",
    "start": "85460",
    "end": "92700"
  },
  {
    "text": "database transaction so we're going to be thinking about patterns like that and because I work for Microsoft now I'm",
    "start": "92700",
    "end": "100500"
  },
  {
    "text": "going to break apart some of the services that we offer for hosting publishing receiving events and try and",
    "start": "100500",
    "end": "108840"
  },
  {
    "text": "layer that into some of the patterns that we're going to talk about as well",
    "start": "108840",
    "end": "114060"
  },
  {
    "text": "so not so much code in this talk not so much live demos I didn't really want to",
    "start": "114060",
    "end": "119820"
  },
  {
    "text": "risk a live demo at the end of the conference I thought that might be kind of like a little bit dangerous and in",
    "start": "119820",
    "end": "126299"
  },
  {
    "text": "fact because I know we're an architect hat uh there's a lot of diagrams in this so I put my draw.io hat on and it's kind",
    "start": "126299",
    "end": "134160"
  },
  {
    "text": "of a weird experience for me because I've been an engineer for like God 25 years or something but so diagram heavy",
    "start": "134160",
    "end": "141360"
  },
  {
    "text": "uh very very little code just a lot of core patterns and mapping them onto",
    "start": "141360",
    "end": "146520"
  },
  {
    "text": "Azure services so to do this I'm going to hang",
    "start": "146520",
    "end": "152300"
  },
  {
    "text": "the ideas and concepts of a use case now it starts off as a very very simple use",
    "start": "152300",
    "end": "158520"
  },
  {
    "text": "case imagine two Bas and the higher echelons of their big glossy Tower in a city like Melbourne and they're walking",
    "start": "158520",
    "end": "165239"
  },
  {
    "text": "around and they've been reading some Gartner something like that that came up",
    "start": "165239",
    "end": "170519"
  },
  {
    "text": "with an idea it said hey did you know if only you could manage your employees",
    "start": "170519",
    "end": "175920"
  },
  {
    "text": "well-being status you would realize that there's a direct link between their well-being and their productivity",
    "start": "175920",
    "end": "181080"
  },
  {
    "text": "disclaimer I do not think there is a study that says that and I hope not I don't know there's",
    "start": "181080",
    "end": "186599"
  },
  {
    "text": "probably like laws against that kind of thing but the business idea was that if you could get an employee every morning",
    "start": "186599",
    "end": "192720"
  },
  {
    "text": "to say one to five on how they're feeling and then suggest something that",
    "start": "192720",
    "end": "197760"
  },
  {
    "text": "they could do go for a walk Brave in some nice fresh air that they could be",
    "start": "197760",
    "end": "203159"
  },
  {
    "text": "more productive okay but it's very important we only ask an employee this",
    "start": "203159",
    "end": "208700"
  },
  {
    "text": "once and once only every day so this is the business requirement and",
    "start": "208700",
    "end": "214920"
  },
  {
    "text": "it's been handed down from the lofty Heights of the Ivory Tower up there to the engineering team who are a little",
    "start": "214920",
    "end": "221400"
  },
  {
    "text": "bit pressed for time and they had to build something they were given a couple of weeks so",
    "start": "221400",
    "end": "227220"
  },
  {
    "text": "this is what they came up with this was their first build of this",
    "start": "227220",
    "end": "232920"
  },
  {
    "text": "service and we're going to use this and we're going to embellish this as we go throughout the talk and add new",
    "start": "232920",
    "end": "238500"
  },
  {
    "text": "requirements onto it but it's a lazy team okay they're quite pragmatic they don't",
    "start": "238500",
    "end": "243540"
  },
  {
    "text": "really want to over complicate something which I think is you know a pretty good way to be so they want to build",
    "start": "243540",
    "end": "249659"
  },
  {
    "text": "something that is as simple as possible but in their opinion you know it will do",
    "start": "249659",
    "end": "255000"
  },
  {
    "text": "the job and we'll do the job okay and what they've come up with is pretty straightforward",
    "start": "255000",
    "end": "260160"
  },
  {
    "text": "Graham is going to log in every morning he's going to enter zero or one to five",
    "start": "260160",
    "end": "265560"
  },
  {
    "text": "on his well-being rating this system is going to leverage an existing correspondence service that",
    "start": "265560",
    "end": "271320"
  },
  {
    "text": "already exists in step three there to send an email to Graham and it also is going to record that",
    "start": "271320",
    "end": "278160"
  },
  {
    "text": "state in a database it could be Cosmos database SQL whatever doesn't really matter it could be a flat file if you",
    "start": "278160",
    "end": "284639"
  },
  {
    "text": "really really want it to be okay so this is an architecture it's really",
    "start": "284639",
    "end": "290040"
  },
  {
    "text": "straightforward but if you think about it there's a few potential problems lurking in here and",
    "start": "290040",
    "end": "297900"
  },
  {
    "text": "it's super important to know what they are and then make a decision if that is",
    "start": "297900",
    "end": "302940"
  },
  {
    "text": "going to affect what you've done and you need to go back and maybe re-engineer this",
    "start": "302940",
    "end": "308040"
  },
  {
    "text": "so I'm looking at it and I'm thinking well we've got a tight coupling to a downstream service here right so if that",
    "start": "308040",
    "end": "314639"
  },
  {
    "text": "corresponding service goes down what's going to happen that means can we send that email maybe",
    "start": "314639",
    "end": "320759"
  },
  {
    "text": "we can do a little backup and retry but what if it's down for a couple of hours or so right could be a potential problem",
    "start": "320759",
    "end": "326880"
  },
  {
    "text": "to this requirement um what happens if our employee well-being service is wildly popular and",
    "start": "326880",
    "end": "334199"
  },
  {
    "text": "we realize that that corresponding service is written on an old j2e server running on a cranky VM somewhere and we",
    "start": "334199",
    "end": "340860"
  },
  {
    "text": "suddenly overload it at nine o'clock in the morning with 10 000 requests and we take it down what if it was",
    "start": "340860",
    "end": "347880"
  },
  {
    "text": "involved in sending regulatory reports out to the government or something that could be pretty nasty right",
    "start": "347880",
    "end": "354180"
  },
  {
    "text": "so when I look at an architecture like this my initial thoughts are well you know if it's a small company 20",
    "start": "354180",
    "end": "361020"
  },
  {
    "text": "employees if it's okay if we don't send that email this could be completely fit for purpose right super quick super simple let's",
    "start": "361020",
    "end": "368699"
  },
  {
    "text": "ship it and see what happens so we ship it and we see what happens and we start getting bug reports that",
    "start": "368699",
    "end": "375780"
  },
  {
    "text": "come flying in you see a lot of those initial assumption assumptions turned out to be correct this correspondence",
    "start": "375780",
    "end": "382919"
  },
  {
    "text": "service is actually quite flaky and it can go down for an hour or two quite",
    "start": "382919",
    "end": "388259"
  },
  {
    "text": "straightforward quite simply it happens very very often which means based off our original",
    "start": "388259",
    "end": "393300"
  },
  {
    "text": "architecture those users are not getting this correspondence they're just getting errors and this is a problem a we want",
    "start": "393300",
    "end": "399900"
  },
  {
    "text": "the service to be up and B it's turned out that it was critically important that we send those messages to the user",
    "start": "399900",
    "end": "407520"
  },
  {
    "text": "so we might need to refactor re-architect a little bit so what are we going to do",
    "start": "407520",
    "end": "412560"
  },
  {
    "text": "well let's try and keep the Mantra of keeping this simple but as simple as it can be without",
    "start": "412560",
    "end": "420060"
  },
  {
    "text": "getting too complicated and there's a great pattern for something like this where we want to decouple services",
    "start": "420060",
    "end": "426360"
  },
  {
    "text": "we can introduce a queue and we can send the message instead so if we look at this architecture",
    "start": "426360",
    "end": "433020"
  },
  {
    "text": "really the main change is in number three there we no longer directly call",
    "start": "433020",
    "end": "438600"
  },
  {
    "text": "the correspondence service instead we're just going to drop a message onto a queue a super simple",
    "start": "438600",
    "end": "445860"
  },
  {
    "text": "queue it's a lightweight service it'll do the job beautifully and it means that we can decouple that user experience",
    "start": "445860",
    "end": "452300"
  },
  {
    "text": "from the actual back-end system of sending the message now there's a couple of other benefits",
    "start": "452300",
    "end": "459060"
  },
  {
    "text": "in here as well right so that Downstream service we know it doesn't like being overloaded so we can use a queue to make",
    "start": "459060",
    "end": "467160"
  },
  {
    "text": "sure that we limit the amount of throughput that we're putting down onto that correspondence service it can act as a",
    "start": "467160",
    "end": "474419"
  },
  {
    "text": "bulkhead that's what we call it so we can send it loads of messages and it will just kind of hold on to them and it",
    "start": "474419",
    "end": "480300"
  },
  {
    "text": "will allow them to be dispatched by the well-being emailer in a kind of managed",
    "start": "480300",
    "end": "485699"
  },
  {
    "text": "throughput sort of way so it's a lovely architecture and if we look at Azure we've got a few choices",
    "start": "485699",
    "end": "492120"
  },
  {
    "text": "for a service that we can use here so the two ones that kind of stand out to",
    "start": "492120",
    "end": "497400"
  },
  {
    "text": "me are storage cues and service bus now our requirement is pretty",
    "start": "497400",
    "end": "504180"
  },
  {
    "text": "straightforward here right so we don't need uh lots of kind of shiny features",
    "start": "504180",
    "end": "510000"
  },
  {
    "text": "that are proper message boss is going to give us we don't necessarily need the duplication we don't need sessions we",
    "start": "510000",
    "end": "515880"
  },
  {
    "text": "don't need transactions uh we don't need a request response we just want something that we can offload these",
    "start": "515880",
    "end": "521580"
  },
  {
    "text": "messages to so in this scenario a storage queue is actually pretty cool choice right it's",
    "start": "521580",
    "end": "528540"
  },
  {
    "text": "simple it's kind of rock solid the slas are really big on them so that's great",
    "start": "528540",
    "end": "534360"
  },
  {
    "text": "um it supports this idea of uh let's say dequeuing those messages using",
    "start": "534360",
    "end": "541200"
  },
  {
    "text": "competing consumers so I'm not sure if anyone's come across that before but the idea here is that we've got a whole",
    "start": "541200",
    "end": "547380"
  },
  {
    "text": "bunch of messages in a queue and we want to take those messages off and we don't want to do it in a Serial fashion but we",
    "start": "547380",
    "end": "554940"
  },
  {
    "text": "want some kind of protection that if we fail to process a message we'll retry it later",
    "start": "554940",
    "end": "560519"
  },
  {
    "text": "so the idea of competing consumers is that we can leverage a concept of the storage queue that's called a peak lock",
    "start": "560519",
    "end": "567480"
  },
  {
    "text": "which means that when we want to take a message of it we don't actually take the message off instead we look at it at the",
    "start": "567480",
    "end": "573060"
  },
  {
    "text": "head of the queue and we put a lock on it but another consumer can come along and when they go to the first the first",
    "start": "573060",
    "end": "579540"
  },
  {
    "text": "message on the Queue they see the one behind it they don't see the one that we've taken a peak lock on and then if",
    "start": "579540",
    "end": "585120"
  },
  {
    "text": "we fail to process that message well that's okay it'll drop into another storage queue so we can process that",
    "start": "585120",
    "end": "591240"
  },
  {
    "text": "later so competing consumers means that let's say it's a quiet time of day and no one",
    "start": "591240",
    "end": "597839"
  },
  {
    "text": "is using that system well we don't really have a need for much compute to drain that queue because there's not a",
    "start": "597839",
    "end": "603420"
  },
  {
    "text": "lot in there but as load starts to increase we can add more consumers as we need them and spread out that processing",
    "start": "603420",
    "end": "610320"
  },
  {
    "text": "throughout those consumers and then scale it back down when we don't need it and if we know we've got physical limits",
    "start": "610320",
    "end": "616500"
  },
  {
    "text": "on the downstream Services we can make sure that we don't process too much maybe we lock it to three consumers",
    "start": "616500",
    "end": "622019"
  },
  {
    "text": "because we know that's what we can get away with so it's pretty cool supported by storage queues super simple service we'll do the",
    "start": "622019",
    "end": "629040"
  },
  {
    "text": "job it's kind of nice right uh there's a potential issue in there",
    "start": "629040",
    "end": "634140"
  },
  {
    "text": "which is that what happens if that queue goes down so we write the state to the database",
    "start": "634140",
    "end": "640620"
  },
  {
    "text": "and then we can't send our message so if potentially still got that problem in there that we had before but we've",
    "start": "640620",
    "end": "647760"
  },
  {
    "text": "decoupled from the backend system we've reduced the load off it it's not going to go down we're not going to take it down we don't worry if they're deploying",
    "start": "647760",
    "end": "654300"
  },
  {
    "text": "to it so we're getting some works pretty good let's let's ship it and let's see what happens",
    "start": "654300",
    "end": "660860"
  },
  {
    "text": "ah man yeah okay they had five lines on its SLA but you know it's still going",
    "start": "660860",
    "end": "667320"
  },
  {
    "text": "down at certain times of day so we're finding out that now the users have seen the correspondence and I heard there was",
    "start": "667320",
    "end": "674220"
  },
  {
    "text": "a HR libel claim someone said that they were told to go for a walk by a system and they slipped on some ice but we've",
    "start": "674220",
    "end": "680339"
  },
  {
    "text": "got no audit Trail because we didn't get a message to them because the queue was down at that point in time that's a bit of a fabricated scenario but I'm sure in",
    "start": "680339",
    "end": "687120"
  },
  {
    "text": "your business domains you could find equally kind of interesting scenarios so the problem here is that we've",
    "start": "687120",
    "end": "694320"
  },
  {
    "text": "uncovered a hidden distributed transaction across these services",
    "start": "694320",
    "end": "699959"
  },
  {
    "text": "so if you think back to the old days everything used to be bundled up in the monolithic database and when we were",
    "start": "699959",
    "end": "706560"
  },
  {
    "text": "deploying on premise we had access to these things called two-phase commit transaction engines if anybody in here",
    "start": "706560",
    "end": "712440"
  },
  {
    "text": "ever managed to configure one then I'd love to know who you are because you're probably part of a select bunch of",
    "start": "712440",
    "end": "717600"
  },
  {
    "text": "people in the world but the idea was we could have disparate databases or message queues or things like that and",
    "start": "717600",
    "end": "724680"
  },
  {
    "text": "we could actually open a transaction up that crossed across those different Downstream services using two-phase",
    "start": "724680",
    "end": "731820"
  },
  {
    "text": "commit and if one of them failed everything else would get rolled back",
    "start": "731820",
    "end": "737399"
  },
  {
    "text": "in the cloud we don't have that luxury for most of our services we're using",
    "start": "737399",
    "end": "742500"
  },
  {
    "text": "managed Services here we've got Azure functions we've got managed queues we've got Cosmos databases they all or most of",
    "start": "742500",
    "end": "749760"
  },
  {
    "text": "them support some notion of transaction against themselves but not against other services",
    "start": "749760",
    "end": "756180"
  },
  {
    "text": "so what are we going to do like I feel like we've really hit a roadblock here",
    "start": "756180",
    "end": "761399"
  },
  {
    "text": "oh it turns out there's actually a really really simple pattern that we can",
    "start": "761399",
    "end": "766680"
  },
  {
    "text": "reach for here it's called a transactional outbox pattern and I was trying to find the",
    "start": "766680",
    "end": "772680"
  },
  {
    "text": "source of it earlier but I can't quite find out where it came from it's one pattern that feels like it should have come from Greg or hoppy or somebody like",
    "start": "772680",
    "end": "779220"
  },
  {
    "text": "that in one of his Enterprise Integration pattern books but the transactional outbox is so",
    "start": "779220",
    "end": "785220"
  },
  {
    "text": "straightforward and it kind of instead of solving the problem by working around the distributed transactions it just",
    "start": "785220",
    "end": "791639"
  },
  {
    "text": "sidesteps it completely and it says well what about if we only transacted against one resource",
    "start": "791639",
    "end": "798480"
  },
  {
    "text": "so what we can see here now is number two uh stores the local state into the",
    "start": "798480",
    "end": "804000"
  },
  {
    "text": "database like we used to but it stores a bit of extra information inside that document it stores the intent to do",
    "start": "804000",
    "end": "812399"
  },
  {
    "text": "something in the future we call it an out box and it's like saying look you know here's the local",
    "start": "812399",
    "end": "819480"
  },
  {
    "text": "transaction there's a little thing I need to do later so I'm just going to put my intent to do it in here",
    "start": "819480",
    "end": "825720"
  },
  {
    "text": "and then we're going to leverage a feature of our Cosmos database but most relational databases support something",
    "start": "825720",
    "end": "832200"
  },
  {
    "text": "similar as well we're going to use the change feed so we're going to create another function uh the dispatcher it's a great",
    "start": "832200",
    "end": "839880"
  },
  {
    "text": "name for dispatcher and what it's going to do is it's going to subscribe to the cosmos change feed on those documents",
    "start": "839880",
    "end": "846959"
  },
  {
    "text": "and what will happen is every time we update or insert a new document that",
    "start": "846959",
    "end": "852839"
  },
  {
    "text": "dispatcher function will get notified and it can look at the document and it can peek into the Inbox and say ah okay",
    "start": "852839",
    "end": "859860"
  },
  {
    "text": "well I need to send a message now so what it will do is it will then call",
    "start": "859860",
    "end": "864959"
  },
  {
    "text": "the corresponding service and then it will go and write the document back into the database",
    "start": "864959",
    "end": "871019"
  },
  {
    "text": "now you might realize there's a distributed transaction in there as well because we're still transacting against",
    "start": "871019",
    "end": "876839"
  },
  {
    "text": "the correspondence service and calling the database but it's different this time because we",
    "start": "876839",
    "end": "882899"
  },
  {
    "text": "know the intent to send that message was stored earlier on so we know if we fail to do it this time",
    "start": "882899",
    "end": "889500"
  },
  {
    "text": "we'll have another go and then we'll have another go and eventually we'll get that message sent which is very",
    "start": "889500",
    "end": "895860"
  },
  {
    "text": "different to the earlier approach where we just might not get it sent at all because remember there's no such thing",
    "start": "895860",
    "end": "901620"
  },
  {
    "text": "as like one-time delivery right no matter who tells you there is um you either have at least once or at",
    "start": "901620",
    "end": "907740"
  },
  {
    "text": "most once and in this case we're going for at least once delivery of that message because we don't think sending",
    "start": "907740",
    "end": "913980"
  },
  {
    "text": "the same message multiple times will be a problem for our Downstream uh employees when they get that message",
    "start": "913980",
    "end": "920300"
  },
  {
    "text": "so this is pretty cool right it fits gas it's vital to guarantee that you do",
    "start": "920300",
    "end": "926399"
  },
  {
    "text": "something when you're communicating across multiple services this is a really good pattern here's an example",
    "start": "926399",
    "end": "933060"
  },
  {
    "text": "here's my Cosmos document it's not code it's Jason I said no code this is just Jason so I'm good with that",
    "start": "933060",
    "end": "939480"
  },
  {
    "text": "I've got an ID I've got a status I've got a recommendation I've got an outbox",
    "start": "939480",
    "end": "944579"
  },
  {
    "text": "bang I'll put it in as one document and send the message later so that's pretty cool I'm happy with",
    "start": "944579",
    "end": "950940"
  },
  {
    "text": "that let's move along I think we've solved that problem okay so it turned out that our employee",
    "start": "950940",
    "end": "958740"
  },
  {
    "text": "rating is actually wildly successful and we've got a whole bunch of really good data which is doing the rounds and HR",
    "start": "958740",
    "end": "966420"
  },
  {
    "text": "I've heard about this and they said hey this this is good this is good stuff right we want in we want to know about",
    "start": "966420",
    "end": "972839"
  },
  {
    "text": "your data here so this gets delivered down to our engineering team I'm saying well what",
    "start": "972839",
    "end": "979500"
  },
  {
    "text": "are we going to do we've got this out box you send the correspondence how about we broadcast an event after",
    "start": "979500",
    "end": "986940"
  },
  {
    "text": "we've sent that correspondence so we go from this little process where we did one thing and one thing well",
    "start": "986940",
    "end": "993720"
  },
  {
    "text": "which is to send the email and now we want to chain a second thing onto that",
    "start": "993720",
    "end": "999360"
  },
  {
    "text": "I'm going to send the email then we want to broadcast the event so this is starting to sound awfully like",
    "start": "999360",
    "end": "1006740"
  },
  {
    "text": "a workflow I want to do this I don't want to do that and when it comes to azure",
    "start": "1006740",
    "end": "1013579"
  },
  {
    "text": "I can think of at least three different services that we have that can support you in your workflows",
    "start": "1013579",
    "end": "1020240"
  },
  {
    "text": "so let's go from the top that I wanted this to be at the bottom because it was kind of low code but I couldn't make",
    "start": "1020240",
    "end": "1026540"
  },
  {
    "text": "PowerPoint work that way I'm just not very good at PowerPoint unfortunately which is why I'm not very good at lower",
    "start": "1026540",
    "end": "1032480"
  },
  {
    "text": "codes as well but we have services like power automate and if you're a business",
    "start": "1032480",
    "end": "1037938"
  },
  {
    "text": "user and you want to do things like look at a SharePoint document send an Outlook email kind of do stuff across those",
    "start": "1037939",
    "end": "1044860"
  },
  {
    "text": "office type Services then power automate is your friend it's going to do what you want it to do it's straightforward it's",
    "start": "1044860",
    "end": "1050900"
  },
  {
    "text": "wysiwyg not so good on the CI CD unit testing I'm not really sure if you could",
    "start": "1050900",
    "end": "1057500"
  },
  {
    "text": "automate a test against it um maybe happy to be told you can do um but I'm not going to use it for this",
    "start": "1057500",
    "end": "1063620"
  },
  {
    "text": "scenario now logic apps is the next one that pops up",
    "start": "1063620",
    "end": "1069020"
  },
  {
    "text": "on our website we say logic apps is aimed at Pro integrators and developers it Pros so I'm not sure if anyone",
    "start": "1069020",
    "end": "1076640"
  },
  {
    "text": "classes themselves in that category in here but logic apps give you a similar",
    "start": "1076640",
    "end": "1082880"
  },
  {
    "text": "type of GUI star workflow where you drag and drop you have these connectors that",
    "start": "1082880",
    "end": "1088220"
  },
  {
    "text": "can call out to other services and we start to see the introduction of like expression style languages where we can",
    "start": "1088220",
    "end": "1094940"
  },
  {
    "text": "use kind of these uh Power syntax type things where we can look at the outputs",
    "start": "1094940",
    "end": "1100280"
  },
  {
    "text": "from one thing and send it into the next thing they support cicd which is good",
    "start": "1100280",
    "end": "1105500"
  },
  {
    "text": "and they have a lot about other box connectors which is pretty cool so so maybe that's for you uh personally for",
    "start": "1105500",
    "end": "1112400"
  },
  {
    "text": "me for this scenario I'm a development I'm a developer my development team think this might get a bit more complicated so they decided",
    "start": "1112400",
    "end": "1119299"
  },
  {
    "text": "they don't want to use the logicapped GUI style interface and instead they",
    "start": "1119299",
    "end": "1124340"
  },
  {
    "text": "want to use these things called durable functions if I'm smelling already because I love",
    "start": "1124340",
    "end": "1129860"
  },
  {
    "text": "durable functions I think they are so cool durable functions essentially allow",
    "start": "1129860",
    "end": "1135020"
  },
  {
    "text": "you to write serverless workflows in an imperative language of your choice",
    "start": "1135020",
    "end": "1141679"
  },
  {
    "text": "which is pretty cool right so you can use.net you can use JavaScript typescript python Powershell Java",
    "start": "1141679",
    "end": "1148280"
  },
  {
    "text": "support dropped the other day and what you can do is you can essentially write code that defines a",
    "start": "1148280",
    "end": "1155539"
  },
  {
    "text": "workflow but the little parts of that workflow all run in serverless style",
    "start": "1155539",
    "end": "1161120"
  },
  {
    "text": "meaning they only come into life when they need to be there then they disappear and you know it's it's a",
    "start": "1161120",
    "end": "1166640"
  },
  {
    "text": "really kind of cool Paradigm and you can declare you can basically write imperative code Define all the steps and",
    "start": "1166640",
    "end": "1172940"
  },
  {
    "text": "let the durable functions run time go to the hassle of making sure that each of those steps is guaranteed to run the",
    "start": "1172940",
    "end": "1180380"
  },
  {
    "text": "whole thing is backed by storage queues uh I think there's another provider you can use for it as now as well you can",
    "start": "1180380",
    "end": "1187880"
  },
  {
    "text": "write unit tests around these things because they're just dot net code at the end of the day you can write whatever logic you want inside them and test it",
    "start": "1187880",
    "end": "1194059"
  },
  {
    "text": "you can bring in your nuget libraries and interfaces and all that kind of good stuff and this is what they look like",
    "start": "1194059",
    "end": "1201740"
  },
  {
    "text": "so there's two parts really that make up durable functions we've got the part on",
    "start": "1201740",
    "end": "1207080"
  },
  {
    "text": "the left that's called the orchestrator think of this as the code that knows",
    "start": "1207080",
    "end": "1212780"
  },
  {
    "text": "about the workflow it's where you write all the steps all the logic it's where",
    "start": "1212780",
    "end": "1218059"
  },
  {
    "text": "you spin off the new activities it's where you go in Loops it's where you can set timers and come back if things",
    "start": "1218059",
    "end": "1224179"
  },
  {
    "text": "didn't happen and essentially I'm using uh net code here I left a line of code",
    "start": "1224179",
    "end": "1229400"
  },
  {
    "text": "in parallel tasks but running from the top it's the simplest thing you can see you've got the await task.whenall",
    "start": "1229400",
    "end": "1236559"
  },
  {
    "text": "context.call activity async the other part of a durable function are",
    "start": "1236559",
    "end": "1241640"
  },
  {
    "text": "the activities so the activities are where you will write your code which essentially is the",
    "start": "1241640",
    "end": "1247700"
  },
  {
    "text": "implementation of the individual workflow steps so in my scenario here I've got two",
    "start": "1247700",
    "end": "1253039"
  },
  {
    "text": "activities send message and broadcast sentiments and you can see at the top",
    "start": "1253039",
    "end": "1258260"
  },
  {
    "text": "right I've got a send message activity that just pokes a correspondence service",
    "start": "1258260",
    "end": "1263299"
  },
  {
    "text": "and then underneath it I have a broadcast sentiment even better we can",
    "start": "1263299",
    "end": "1269179"
  },
  {
    "text": "still opt into Azure functions bindings on these things as well so if I want to send a message via service boss or",
    "start": "1269179",
    "end": "1275000"
  },
  {
    "text": "something I can just use my attributes on the code at the bottom so durable functions are an awesome way to create",
    "start": "1275000",
    "end": "1282679"
  },
  {
    "text": "serverless workflows on Azure and indeed that's what my team have decided to do",
    "start": "1282679",
    "end": "1288440"
  },
  {
    "text": "so if we look down in the bottom now um steps five and a are essentially the",
    "start": "1288440",
    "end": "1295880"
  },
  {
    "text": "durable function in action so the first step in the change that's going to send the correspondence by the service and",
    "start": "1295880",
    "end": "1302659"
  },
  {
    "text": "then number eight will go and broadcast an event in this case into service bus",
    "start": "1302659",
    "end": "1310280"
  },
  {
    "text": "um now why don't you service bus and not event grids or event hubs is a is a",
    "start": "1310280",
    "end": "1317000"
  },
  {
    "text": "great question uh and I'm sure whatever answer I come up with somebody will challenge that answer anyway but for",
    "start": "1317000",
    "end": "1323179"
  },
  {
    "text": "this particular scenario there's a couple of things that led me to that thinking first is that I'm using Service Plus",
    "start": "1323179",
    "end": "1330559"
  },
  {
    "text": "because I'm seeing these as discrete business events so we talk about event hubs more for",
    "start": "1330559",
    "end": "1336740"
  },
  {
    "text": "analytical style data where maybe each data point doesn't have much meaning in itself I see this as like a fully formed",
    "start": "1336740",
    "end": "1343820"
  },
  {
    "text": "piece of information that describes some business activity in my system so that's one reason I've chosen to use",
    "start": "1343820",
    "end": "1350840"
  },
  {
    "text": "Service Plus the second is my security team do not like public IP addresses and",
    "start": "1350840",
    "end": "1357200"
  },
  {
    "text": "unfortunately eventgrid does not allow you to have a subscriber that is on a",
    "start": "1357200",
    "end": "1362600"
  },
  {
    "text": "private IP address they have to be public you can send messages to a service bus",
    "start": "1362600",
    "end": "1368059"
  },
  {
    "text": "from a event grid but similar thing the service bus has to be publicly addressable so if you're in a kind of",
    "start": "1368059",
    "end": "1374480"
  },
  {
    "text": "Enterprise organization where it's super important that things are on private IP addresses unfortunately as cool a",
    "start": "1374480",
    "end": "1381500"
  },
  {
    "text": "service as it looks you might have problems getting it through the door but this is cool we've broadcasted",
    "start": "1381500",
    "end": "1387980"
  },
  {
    "text": "sentiment out and the HR service have got a little subscriber and they can go and listen to that",
    "start": "1387980",
    "end": "1394419"
  },
  {
    "text": "so HR a little bit frustrated with us because we're not sending them enough",
    "start": "1394520",
    "end": "1400640"
  },
  {
    "text": "information all we've actually broadcast our development team are a little bit lazy",
    "start": "1400640",
    "end": "1405919"
  },
  {
    "text": "is the employee ID the date and the well-being rating one to five and they're crying out saying we want to",
    "start": "1405919",
    "end": "1412700"
  },
  {
    "text": "know what you told them why aren't you telling us that okay there's not enough in this event",
    "start": "1412700",
    "end": "1418220"
  },
  {
    "text": "which leads us to an interesting question of how much information should we put in an event when we broadcast it",
    "start": "1418220",
    "end": "1424880"
  },
  {
    "text": "out and there are a few different schools of thought about how to get that additional",
    "start": "1424880",
    "end": "1430520"
  },
  {
    "text": "information to the end subscribers now there's two that I've called out here",
    "start": "1430520",
    "end": "1436700"
  },
  {
    "text": "first is to create what I think might in Fowler called it an event Carriage State",
    "start": "1436700",
    "end": "1441799"
  },
  {
    "text": "transfer so the idea of event Carriage State transfer is that we actually put more",
    "start": "1441799",
    "end": "1447799"
  },
  {
    "text": "information into the event just in case someone actually wants that information we don't not know who that",
    "start": "1447799",
    "end": "1454640"
  },
  {
    "text": "is they might not be there yet but maybe in a week's time someone's going to want it so let's put it in let's start",
    "start": "1454640",
    "end": "1460280"
  },
  {
    "text": "putting more into that event so it's a cool pattern it means that our Downstream subscribers can be completely",
    "start": "1460280",
    "end": "1467419"
  },
  {
    "text": "decoupled from us right we send the event they can get it and they don't need us to actually introspect anything",
    "start": "1467419",
    "end": "1473960"
  },
  {
    "text": "else about that they've got everything they need in that event all I would say is I'd be a little bit",
    "start": "1473960",
    "end": "1481400"
  },
  {
    "text": "careful about that so I've worked on a project a few years ago I'm going about",
    "start": "1481400",
    "end": "1487820"
  },
  {
    "text": "like five or six years where we had a lot of services broadcasting events around I think it",
    "start": "1487820",
    "end": "1494960"
  },
  {
    "text": "was about 120 by the time I left and we found that each service tended to want a bit more",
    "start": "1494960",
    "end": "1501799"
  },
  {
    "text": "or need a bit more and a bit more and a bit more until eventually every event that was coming off a domain seemed to",
    "start": "1501799",
    "end": "1508400"
  },
  {
    "text": "have like the entire aggregate route of that entity in there just so the other services could work out what they needed",
    "start": "1508400",
    "end": "1514760"
  },
  {
    "text": "to do now if you find yourself falling into that pattern I would probably take a",
    "start": "1514760",
    "end": "1520460"
  },
  {
    "text": "step back and wonder whether you're kind of entering you know Nano service kind of world where you started to break",
    "start": "1520460",
    "end": "1526400"
  },
  {
    "text": "apart your domains too much they're too small and they all need to know about the insides of each other and maybe",
    "start": "1526400",
    "end": "1533659"
  },
  {
    "text": "start like instead of shooting your pea shooter into the asteroids start sticking them back together again and",
    "start": "1533659",
    "end": "1538880"
  },
  {
    "text": "creating like Goldilocks size services I don't know if there's a term for like a right size service maybe like solar like",
    "start": "1538880",
    "end": "1545600"
  },
  {
    "text": "everyone thought so I was many many years ago um so that's one way you could do this",
    "start": "1545600",
    "end": "1551960"
  },
  {
    "text": "the other way is you could have the HR service make a call back",
    "start": "1551960",
    "end": "1557299"
  },
  {
    "text": "to the well-being service to say hey look employee one this was the date this",
    "start": "1557299",
    "end": "1562820"
  },
  {
    "text": "was the well-being status what did you tell them so that can be a really good pattern if",
    "start": "1562820",
    "end": "1568940"
  },
  {
    "text": "you need up-to-date information maybe it's not okay in your events to have old stale data",
    "start": "1568940",
    "end": "1575299"
  },
  {
    "text": "maybe you need to go back and get the latest source of proof I don't know it's a legitimate requirement right at the",
    "start": "1575299",
    "end": "1581000"
  },
  {
    "text": "end of the day but if you do that then the only thing to be wary of is that you now have put a",
    "start": "1581000",
    "end": "1587360"
  },
  {
    "text": "coupling back between those two services so a lot of the patterns we spoke about around outboxes and intent and single",
    "start": "1587360",
    "end": "1594380"
  },
  {
    "text": "transactions you might have to go back to that kind of world to satisfy your requirement but",
    "start": "1594380",
    "end": "1600679"
  },
  {
    "text": "these two patterns are both totally legitimate ways of getting that extra information to the subscribers of those",
    "start": "1600679",
    "end": "1608179"
  },
  {
    "text": "events so this is pretty cool right I'm we're going with the uh slightly larger event",
    "start": "1608179",
    "end": "1613940"
  },
  {
    "text": "I think that's what we're going to try and do let's push it out there and uh let's see what happens and all is good",
    "start": "1613940",
    "end": "1619400"
  },
  {
    "text": "which is cool so said the word event a hell of a lot in",
    "start": "1619400",
    "end": "1624620"
  },
  {
    "text": "the last 10 minutes or so and it's a little bit of a just my best carefully a",
    "start": "1624620",
    "end": "1631580"
  },
  {
    "text": "Minefield when we come to Cloud providers when it comes to events because there are so many Dan services that all seem to be able to do events",
    "start": "1631580",
    "end": "1640039"
  },
  {
    "text": "for you so let's suspend a few minutes going through the uh Azure toolbox of",
    "start": "1640039",
    "end": "1646100"
  },
  {
    "text": "event style services so think a little bit about where they make sense where maybe they're not pitched and why you",
    "start": "1646100",
    "end": "1653419"
  },
  {
    "text": "might choose to use one over the other so let's start with event hubs it says",
    "start": "1653419",
    "end": "1658700"
  },
  {
    "text": "event in the word right so this must be the one to use for all the things surely",
    "start": "1658700",
    "end": "1664400"
  },
  {
    "text": "for all of your Eventing style uh patterns so event Hub works very similar to",
    "start": "1664400",
    "end": "1672799"
  },
  {
    "text": "Apache Kafka there are differences sure but the general kind of architecture and",
    "start": "1672799",
    "end": "1678740"
  },
  {
    "text": "concepts are the same and we refer to event Hub at Microsoft as a mass event",
    "start": "1678740",
    "end": "1685220"
  },
  {
    "text": "ingestion engine imagine you've got Machinery or you've got log files piling into your web",
    "start": "1685220",
    "end": "1691940"
  },
  {
    "text": "servers and you just need to get them somewhere where they can be analyzed",
    "start": "1691940",
    "end": "1697159"
  },
  {
    "text": "so that's where we talk about basically smashing event Hub and sending it millions and millions and millions of",
    "start": "1697159",
    "end": "1703279"
  },
  {
    "text": "tiny data points that you can analyze later on potentially",
    "start": "1703279",
    "end": "1708500"
  },
  {
    "text": "so we talk about analytical data as opposed to our business events now again",
    "start": "1708500",
    "end": "1715460"
  },
  {
    "text": "this is something off our website more than anything and I think there's a good challenge around whether event Hub could",
    "start": "1715460",
    "end": "1721460"
  },
  {
    "text": "be used to send business events as well but certainly uh if you're thinking about data points let's say from a",
    "start": "1721460",
    "end": "1728059"
  },
  {
    "text": "machine down in the plant somewhere and you're worried about if that machine is going to break so the vibration is",
    "start": "1728059",
    "end": "1734179"
  },
  {
    "text": "really useful imagine you've got streams of data coming off it but each vibration point is kind of meaningless in its own",
    "start": "1734179",
    "end": "1740539"
  },
  {
    "text": "but when you start to push these through stream processing engines maybe uh stream analytics or HD insights or",
    "start": "1740539",
    "end": "1747860"
  },
  {
    "text": "something like that you can do analytical queries over tumbling sliding Windows like that and start to infer",
    "start": "1747860",
    "end": "1755679"
  },
  {
    "text": "potential problems that might be coming up inside your machines",
    "start": "1755679",
    "end": "1761299"
  },
  {
    "text": "um event Hub stores data in partitions so when you create your event Hub namespace you actually choose a number",
    "start": "1761299",
    "end": "1767600"
  },
  {
    "text": "of partitions that you want and that's a really uh delicate thing to get right",
    "start": "1767600",
    "end": "1773720"
  },
  {
    "text": "because there could be ramifications of not getting that number right so one possible thing that could happen",
    "start": "1773720",
    "end": "1780559"
  },
  {
    "text": "let's say you decided two partitions what that means is every piece of data you send to event Hub will essentially",
    "start": "1780559",
    "end": "1787100"
  },
  {
    "text": "land in one of those two physical partitions now when it comes to consume that data",
    "start": "1787100",
    "end": "1794360"
  },
  {
    "text": "we don't use competing consumers like we spoke about earlier instead we organize nodes into what we",
    "start": "1794360",
    "end": "1801260"
  },
  {
    "text": "call a consumer group and each node essentially will have Affinity to one or more partitions so if you have two",
    "start": "1801260",
    "end": "1808039"
  },
  {
    "text": "partitions and one consumer that consumer will get the events from both",
    "start": "1808039",
    "end": "1813100"
  },
  {
    "text": "happy days if you have two consumers each consumer will align to a partition",
    "start": "1813100",
    "end": "1818840"
  },
  {
    "text": "and they will get the events in order that they came out of that partition if we have three consumers and two",
    "start": "1818840",
    "end": "1825260"
  },
  {
    "text": "partitions one consumerator there one consumerator there the other consumer nothing to do sit there",
    "start": "1825260",
    "end": "1832100"
  },
  {
    "text": "I'm not gonna do it because of the way the Affinity works now that can be really interesting because it means that you need to make",
    "start": "1832100",
    "end": "1838640"
  },
  {
    "text": "sure that your politicians are based off your Highest Potential need to consume that data not the lowest potential need",
    "start": "1838640",
    "end": "1844520"
  },
  {
    "text": "to consume it because if you get smashed with 50 000 events at a single point in time let's say over a couple of seconds",
    "start": "1844520",
    "end": "1850640"
  },
  {
    "text": "and you want to churn through those quickly you can't just spin up new consumers if you don't have enough partitions holding that data",
    "start": "1850640",
    "end": "1857179"
  },
  {
    "text": "so it's quite an interesting choice that you have to make early on",
    "start": "1857179",
    "end": "1862220"
  },
  {
    "text": "um people might tell you with event Hub you can send business messages like transact against this account",
    "start": "1862220",
    "end": "1868039"
  },
  {
    "text": "I'm sure you could put a message onto that but are you going to get poison message detection are you going to get",
    "start": "1868039",
    "end": "1873440"
  },
  {
    "text": "deduplication are you going to get request response if you find yourself having to build all of those things on",
    "start": "1873440",
    "end": "1879620"
  },
  {
    "text": "top of your Eventing engine then there's a possibility that maybe you should have",
    "start": "1879620",
    "end": "1885200"
  },
  {
    "text": "chosen a message bus instead which brings us to our second service which is",
    "start": "1885200",
    "end": "1891080"
  },
  {
    "text": "service bus service bus is like essentially an Enterprise message bus so all your",
    "start": "1891080",
    "end": "1897919"
  },
  {
    "text": "messaging needs we talk about it as something that you will send your high value business messages to which I know",
    "start": "1897919",
    "end": "1905240"
  },
  {
    "text": "I'm sure you could do but it's actually a really really useful service it's got a whole bunch of functionality built",
    "start": "1905240",
    "end": "1911659"
  },
  {
    "text": "into it where you can have uh sessions we can do filters on topics and",
    "start": "1911659",
    "end": "1916880"
  },
  {
    "text": "subscribers so one subscriber might not get every message that comes into a um",
    "start": "1916880",
    "end": "1922039"
  },
  {
    "text": "into a queue we can have deduplication support so that if you send the message",
    "start": "1922039",
    "end": "1927620"
  },
  {
    "text": "multiple times of the same ID on it service bus will drop a couple of them and only give you one of those messages",
    "start": "1927620",
    "end": "1934220"
  },
  {
    "text": "we can do ordering so even if you have competing consumers that are all kind of churning through messages where you can",
    "start": "1934220",
    "end": "1940279"
  },
  {
    "text": "put sessions against sets of messages so they'll get Affinity to a consumer and they will only get the messages in that",
    "start": "1940279",
    "end": "1946940"
  },
  {
    "text": "session we have request response so if you want to reply to a message then you can go and send the message back and we",
    "start": "1946940",
    "end": "1954080"
  },
  {
    "text": "have topics to enable subscribers to come along to subscribe to messages",
    "start": "1954080",
    "end": "1959779"
  },
  {
    "text": "now it's slightly different to event Hub in that it's very different to event Hub actually but with service bus if you're",
    "start": "1959779",
    "end": "1964820"
  },
  {
    "text": "not there at the point a message is sent you can't just come along later and subscribe to that queue and see those",
    "start": "1964820",
    "end": "1970100"
  },
  {
    "text": "messages because they're delivered and once they're delivered then that is the end of that message really they don't",
    "start": "1970100",
    "end": "1976039"
  },
  {
    "text": "find themselves in new queues whereas event Hub those messages stay there as",
    "start": "1976039",
    "end": "1981380"
  },
  {
    "text": "long as the retention period is so you can come along later I think seven days is the default on standard but I think",
    "start": "1981380",
    "end": "1986960"
  },
  {
    "text": "it can go up to 90 or something on the premium tiers so you can bring on other",
    "start": "1986960",
    "end": "1992360"
  },
  {
    "text": "things to analyze that data later um in time but with service bus they're",
    "start": "1992360",
    "end": "1997700"
  },
  {
    "text": "delivered and they go but both are pull-based models so you need a consumer you need a",
    "start": "1997700",
    "end": "2003580"
  },
  {
    "text": "host processor that's fetching those messages back so if you set up a service bus binding",
    "start": "2003580",
    "end": "2009399"
  },
  {
    "text": "in your Azure function there's actually a function host that is subscribing to the service bus and is pulling down",
    "start": "2009399",
    "end": "2015640"
  },
  {
    "text": "messages which is one of the main distinctions between service bus and event grid so",
    "start": "2015640",
    "end": "2021880"
  },
  {
    "text": "event grid has got the word event in it like event Hub right so it's it must be the choice for events and it's kind of",
    "start": "2021880",
    "end": "2028840"
  },
  {
    "text": "cool how it works it's Cloud native and it's reactive in nature which essentially means that when you send",
    "start": "2028840",
    "end": "2035140"
  },
  {
    "text": "event Hub event grid a message it will deliver it bang to all the subscribers straight away there's no pulling it will",
    "start": "2035140",
    "end": "2042100"
  },
  {
    "text": "just call your functional push a message into your queue which is pretty cool but the scale is",
    "start": "2042100",
    "end": "2047320"
  },
  {
    "text": "built is astronomical so if you push a million messages in a second into event grid it will call you a million times",
    "start": "2047320",
    "end": "2053220"
  },
  {
    "text": "which if you're a legacy Downstream little API running on a single server",
    "start": "2053220",
    "end": "2058240"
  },
  {
    "text": "like that correspondence service could probably set you on fire at the point that you're getting all those messages coming through so be wary of its scale",
    "start": "2058240",
    "end": "2066460"
  },
  {
    "text": "and it can only deliver to public endpoints which is a problem but what we often see is combinations of services so",
    "start": "2066460",
    "end": "2072700"
  },
  {
    "text": "you might settle on event grid for all of your events and concerns but set service bus as a uh delivery for some",
    "start": "2072700",
    "end": "2081520"
  },
  {
    "text": "Legacy systems that can't handle the Freeport so let service bus buffer that for you and then use competing consumers",
    "start": "2081520",
    "end": "2087820"
  },
  {
    "text": "on the other side now the other call out I want to do is Cosmos change feeds which are quite",
    "start": "2087820",
    "end": "2093460"
  },
  {
    "text": "similar to event hops um the other thing I would say about them is just be wary of allowing",
    "start": "2093460",
    "end": "2098980"
  },
  {
    "text": "Downstream applications to connect to your Cosmos change feed because really",
    "start": "2098980",
    "end": "2104260"
  },
  {
    "text": "that is your internal schema so what you don't want is to have",
    "start": "2104260",
    "end": "2109300"
  },
  {
    "text": "third-party systems coupled to your internal schema and then you need to make a change because that's going to be",
    "start": "2109300",
    "end": "2115060"
  },
  {
    "text": "an awful lot of conversations with people who will tell you like no I don't have budget to make that change in my end and I'm more important than you so",
    "start": "2115060",
    "end": "2121540"
  },
  {
    "text": "you're not allowed to change so whenever you're sending events think of your events as contract just like",
    "start": "2121540",
    "end": "2128260"
  },
  {
    "text": "your apis are right when you define your Swagger contracts or your wisdle from",
    "start": "2128260",
    "end": "2134140"
  },
  {
    "text": "back in the day that was like super fixed you only change that if you",
    "start": "2134140",
    "end": "2139420"
  },
  {
    "text": "really had to so similar to that if you are going to use Cosmos change feeds maybe don't let",
    "start": "2139420",
    "end": "2144880"
  },
  {
    "text": "people couple to your internal entities maybe have another collection which has got your contract entities which are",
    "start": "2144880",
    "end": "2151660"
  },
  {
    "text": "more fixed in nature all right so HR are not happy uh",
    "start": "2151660",
    "end": "2157480"
  },
  {
    "text": "unfortunately because it turns out what happened is that the correspondence",
    "start": "2157480",
    "end": "2162820"
  },
  {
    "text": "service didn't like the load that we were putting on and the correspondence service started sending emails in an",
    "start": "2162820",
    "end": "2169480"
  },
  {
    "text": "asynchronous fashion so previously we sent an email and we didn't hear back until it was delivered HR have been told",
    "start": "2169480",
    "end": "2176200"
  },
  {
    "text": "they're not allowed to use the data until that email has definitely been sent but now that is asynchronous so",
    "start": "2176200",
    "end": "2182800"
  },
  {
    "text": "it's not sent when we ask it instead the correspondence people have said that they will raise an event from their",
    "start": "2182800",
    "end": "2188560"
  },
  {
    "text": "system when they finally send that email and only then should we broadcast our",
    "start": "2188560",
    "end": "2194520"
  },
  {
    "text": "information out that the correspondence wellbeing service has finished",
    "start": "2194520",
    "end": "2200980"
  },
  {
    "text": "so this is starting to get more complicated now right it's no longer a do this then do that it's a do this then",
    "start": "2200980",
    "end": "2208060"
  },
  {
    "text": "sit and wait event comes back in all right cool events come back we've sent it now let's",
    "start": "2208060",
    "end": "2214599"
  },
  {
    "text": "do the other thing so we're starting to see the beginnings of much more complicated workflows arising and I want",
    "start": "2214599",
    "end": "2222099"
  },
  {
    "text": "to work for three fairly common patterns which will certainly different of how",
    "start": "2222099",
    "end": "2227380"
  },
  {
    "text": "they go about this so the first pattern is called a process",
    "start": "2227380",
    "end": "2232660"
  },
  {
    "text": "manager um those of you that use in hibernate may have seen this referred to as a saga",
    "start": "2232660",
    "end": "2239140"
  },
  {
    "text": "as well I'm going to step back from that debate but suffice to say that most",
    "start": "2239140",
    "end": "2245200"
  },
  {
    "text": "implementations I've seen called as a process manager and we will look at sagas in a minute which I think is slightly different but we're going to",
    "start": "2245200",
    "end": "2253000"
  },
  {
    "text": "implement this using durable functions still because we can do and the main",
    "start": "2253000",
    "end": "2258160"
  },
  {
    "text": "change is that number eight down there the send email because this is a serverless function we",
    "start": "2258160",
    "end": "2265960"
  },
  {
    "text": "can actually just put the function the process to sleep and we can just just wait just hang off and wait for an",
    "start": "2265960",
    "end": "2272440"
  },
  {
    "text": "external event to wake you up again instead of just kind of going through the motions so in this scenario what happens is the",
    "start": "2272440",
    "end": "2279339"
  },
  {
    "text": "function yields it goes to sleep the more gets sent and then in number nine the",
    "start": "2279339",
    "end": "2285700"
  },
  {
    "text": "correspondence service puts another message and we have a function another function that lives outside our durable",
    "start": "2285700",
    "end": "2292540"
  },
  {
    "text": "function called a correspondence service trigger this one listens to that Service Plus Q",
    "start": "2292540",
    "end": "2298660"
  },
  {
    "text": "and every time a message comes in it looks at it says okay you've sent some correspondence and I can see my",
    "start": "2298660",
    "end": "2304300"
  },
  {
    "text": "correlation ID here so I know which instance of my running workflow this is related to and then that external",
    "start": "2304300",
    "end": "2312040"
  },
  {
    "text": "function can grab the durable function trigger and say the event has happened at that point in time the durable",
    "start": "2312040",
    "end": "2318460"
  },
  {
    "text": "function wakes up again and starts to move on to the next step so this is called a process manager now",
    "start": "2318460",
    "end": "2324880"
  },
  {
    "text": "it's got some really good benefits to it right you can version this whole thing so I can release a version two of my",
    "start": "2324880",
    "end": "2331960"
  },
  {
    "text": "durable function and completely change the process for new workflows that need to happen so maybe that involves new",
    "start": "2331960",
    "end": "2338560"
  },
  {
    "text": "steps reordering steps and we can just do it using slots in Azure functions",
    "start": "2338560",
    "end": "2343900"
  },
  {
    "text": "and we can have it such that when the dispatcher number four there initiates an orchestration one time it initiates",
    "start": "2343900",
    "end": "2351099"
  },
  {
    "text": "that orchestration the next time it initiates the one in the green slot production slot green slot so we can do",
    "start": "2351099",
    "end": "2356680"
  },
  {
    "text": "things like that and we can allow the ones that were in process just to run their course and get to the end and",
    "start": "2356680",
    "end": "2362859"
  },
  {
    "text": "finish so that's that's pretty cool being able to version long-running workflows that's pretty sweet bit tricky",
    "start": "2362859",
    "end": "2369339"
  },
  {
    "text": "to version in process workflows so for workflow is halfway through then most",
    "start": "2369339",
    "end": "2375940"
  },
  {
    "text": "workflow engines have this problem right it's normally XML spaghetti somewhere with durable functions it's a pretty",
    "start": "2375940",
    "end": "2382180"
  },
  {
    "text": "cool implementation it uses event sourcing behind the scenes but that means that the order in which the",
    "start": "2382180",
    "end": "2387940"
  },
  {
    "text": "activity is finished is super important when the orchestrator replays it expects",
    "start": "2387940",
    "end": "2394839"
  },
  {
    "text": "things in the order that the code says they're going to be in so if you go and change the order of that you could find",
    "start": "2394839",
    "end": "2400180"
  },
  {
    "text": "yourself in a bit of a mess so versioning in processing not so good",
    "start": "2400180",
    "end": "2406180"
  },
  {
    "text": "you find with durable functions that a fair amount of boilerplate logic starts to slip into your code sometimes it can",
    "start": "2406180",
    "end": "2412359"
  },
  {
    "text": "be hard to look at a more complex workflow and see the logic because it's just a lot of call activity async wait",
    "start": "2412359",
    "end": "2418900"
  },
  {
    "text": "for external event async and it's like oh you know where where is it where where's the logic gone to that can be a",
    "start": "2418900",
    "end": "2424420"
  },
  {
    "text": "bit of a downside to them but a process manager in general can be really useful let's say you need to report on the",
    "start": "2424420",
    "end": "2430720"
  },
  {
    "text": "status of all in-process workflows let's say I've got 1050 loan applications going or",
    "start": "2430720",
    "end": "2437800"
  },
  {
    "text": "something they're all on running workflows how many are at this stage how many at that stage because there's a",
    "start": "2437800",
    "end": "2443380"
  },
  {
    "text": "central thing that actually knows about that workflow we can ask it we can say",
    "start": "2443380",
    "end": "2448839"
  },
  {
    "text": "to it hey what's the status of all the in-process workflows and it can give us that information right so that's that's",
    "start": "2448839",
    "end": "2454900"
  },
  {
    "text": "pretty cool um but with durable functions in general the more external Services the more",
    "start": "2454900",
    "end": "2461320"
  },
  {
    "text": "complicated these become then the durable function can get quite complicated and difficult to reason with",
    "start": "2461320",
    "end": "2467800"
  },
  {
    "text": "so there are some good points some bad points it's a brilliant tool to have in your toolkit is it always the right",
    "start": "2467800",
    "end": "2473380"
  },
  {
    "text": "choice probably not is it sometimes the right choice yeah probably it is",
    "start": "2473380",
    "end": "2478660"
  },
  {
    "text": "so let's flip it completely on its head process manager has got a central orchestrator what about if we just",
    "start": "2478660",
    "end": "2484960"
  },
  {
    "text": "completely do a way of the Central orchestrator and we have no Central orchestrator at all",
    "start": "2484960",
    "end": "2490480"
  },
  {
    "text": "I was watching stranger things uh season two last night and it reminded me of the hive mind at the end where you know they",
    "start": "2490480",
    "end": "2496900"
  },
  {
    "text": "heat one bit of it and everything's like ah I'm on fire with a orchestration there is no Central",
    "start": "2496900",
    "end": "2504119"
  },
  {
    "text": "orchestrator of this workflow instead the behavior the process itself kind of",
    "start": "2504119",
    "end": "2511780"
  },
  {
    "text": "arises based off the interactions between topics and subscriptions between different services",
    "start": "2511780",
    "end": "2517599"
  },
  {
    "text": "so you can't point at a place and say that's where the logic is instead the logic is everywhere and it kind of",
    "start": "2517599",
    "end": "2523540"
  },
  {
    "text": "arises so if we look at this now there is no durable function anymore instead",
    "start": "2523540",
    "end": "2528640"
  },
  {
    "text": "the dispatcher just raises an event says well-being was recorded we have two services to correspond this",
    "start": "2528640",
    "end": "2535480"
  },
  {
    "text": "in the HR service they both listen to that event ah okay correspondence service says this",
    "start": "2535480",
    "end": "2541599"
  },
  {
    "text": "is great I've got an event here I need to go and send an email because I know that's what I do when I see this event",
    "start": "2541599",
    "end": "2547720"
  },
  {
    "text": "the HR service here's the event and it says oh okay so the well-being is kicked into action but",
    "start": "2547720",
    "end": "2553480"
  },
  {
    "text": "I can't do anything yet right because I know I need to wait for the correspondence to be sent so if you're",
    "start": "2553480",
    "end": "2559599"
  },
  {
    "text": "like I'm going to go into a mini kind of process manager State myself where I wait for the other event to come in and",
    "start": "2559599",
    "end": "2566560"
  },
  {
    "text": "then it subscribes to the events from the correspondence service when it gets the event that it says okay cool now I",
    "start": "2566560",
    "end": "2573339"
  },
  {
    "text": "can use this data um we did have a requirement that said that we had to send the email so often",
    "start": "2573339",
    "end": "2579579"
  },
  {
    "text": "what you'll see in scenarios like this and the other one is maybe a timer event somewhere where it's almost like this is",
    "start": "2579579",
    "end": "2587140"
  },
  {
    "text": "my timeout and if I don't hear that the email was sent in 30 seconds then I'm going to send that message again",
    "start": "2587140",
    "end": "2593020"
  },
  {
    "text": "so he's kind of the weird sort of things you need to think about when you're building these kind of distributed",
    "start": "2593020",
    "end": "2598119"
  },
  {
    "text": "workflows but this is a choreography approach um very difficult to version these",
    "start": "2598119",
    "end": "2605140"
  },
  {
    "text": "because where's the logic right how do you version that thing when it's running in process how do you roll out version",
    "start": "2605140",
    "end": "2611319"
  },
  {
    "text": "two you'd need like a whole new set of cues you'd need to get every service lined up to listen to the new topics and",
    "start": "2611319",
    "end": "2618819"
  },
  {
    "text": "to react differently and you know it would be a bit of a communication um problem could be a lot of ocm",
    "start": "2618819",
    "end": "2625540"
  },
  {
    "text": "involved in getting getting something like that rolled out but it's a super elegant model right because you know the",
    "start": "2625540",
    "end": "2631960"
  },
  {
    "text": "logic just arises it's kind of beautiful uh in a way um as more events come on board and the",
    "start": "2631960",
    "end": "2637720"
  },
  {
    "text": "kind of the processes get more complicated then this can become extremely complicated like it's one",
    "start": "2637720",
    "end": "2643180"
  },
  {
    "text": "thing not to be able to pinpoint the logic it's another just to have no idea like what the state of anything is",
    "start": "2643180",
    "end": "2648400"
  },
  {
    "text": "because like there's a thousand things involved in it if you want to know the status of all",
    "start": "2648400",
    "end": "2653920"
  },
  {
    "text": "the in process workflows a little bit trickier like you might need to build another service that listens to all the",
    "start": "2653920",
    "end": "2659740"
  },
  {
    "text": "events coming off the services that are involved and starts to build up its own reporting view of the world right you",
    "start": "2659740",
    "end": "2665560"
  },
  {
    "text": "can do it again but it could be a little bit complicated so I tend to find that these things work",
    "start": "2665560",
    "end": "2672579"
  },
  {
    "text": "really well almost at the end of your business process so maybe the process manager is the thing that you want to",
    "start": "2672579",
    "end": "2678579"
  },
  {
    "text": "actually uh orchestrate and organize your logic because there's a business process you can almost find a document for it in the",
    "start": "2678579",
    "end": "2685000"
  },
  {
    "text": "organization and codify it but at the end of it to allow other services to",
    "start": "2685000",
    "end": "2690160"
  },
  {
    "text": "react and to do things that are unrelated to that process raising events",
    "start": "2690160",
    "end": "2695560"
  },
  {
    "text": "is a really nice way to let the rest of the world know that your think has finished so again it's it's a way you can run a",
    "start": "2695560",
    "end": "2704440"
  },
  {
    "text": "long-running distributed serverless workflow another tool to have in your belt it's pretty cool",
    "start": "2704440",
    "end": "2710740"
  },
  {
    "text": "Choice four that was interesting choice two to Choice four I don't remember choice three",
    "start": "2710740",
    "end": "2716700"
  },
  {
    "text": "there is no choice three for just seeing things Choice four is a pat ah hold on",
    "start": "2716700",
    "end": "2722619"
  },
  {
    "text": "I've lost a slide somewhere how did I do that oh my God right hold on two seconds",
    "start": "2722619",
    "end": "2729000"
  },
  {
    "text": "that's so embarrassing where did it go to hahaha",
    "start": "2729000",
    "end": "2735400"
  },
  {
    "text": "all right how is the undo buffer going to work for me",
    "start": "2735400",
    "end": "2740760"
  },
  {
    "text": "this is why you should never do things last minutes all right I'll tell you what we don't",
    "start": "2741240",
    "end": "2746859"
  },
  {
    "text": "need a slide for it we can imagine it we can just imagine it it was a pattern called a saga pattern right and um oh",
    "start": "2746859",
    "end": "2755980"
  },
  {
    "text": "hold on is that gonna wait for me oh no something had to go wrong on the last",
    "start": "2755980",
    "end": "2761440"
  },
  {
    "text": "Talk of the day right oh I didn't touch anything Perfect all right there's a pattern called The Saga",
    "start": "2761440",
    "end": "2769839"
  },
  {
    "text": "that that's not working as well sorry I'd have a slide for this one anyway um imagine if you step back into the",
    "start": "2769839",
    "end": "2775480"
  },
  {
    "text": "1920s and you went into a big organization and you said hey Acme Corporation how are you going to run",
    "start": "2775480",
    "end": "2781660"
  },
  {
    "text": "this long-running business process oh okay well we should go to start in",
    "start": "2781660",
    "end": "2786760"
  },
  {
    "text": "this department we're going to get a big brown manila envelope and we're going to put something inside it that details the",
    "start": "2786760",
    "end": "2793960"
  },
  {
    "text": "process that we need to happen we're going to do a little bit of it in this department over here and we're going to",
    "start": "2793960",
    "end": "2799359"
  },
  {
    "text": "write a list of names on the front of that envelope and we're going to put it onto the uh internal mail",
    "start": "2799359",
    "end": "2805780"
  },
  {
    "text": "and then the mail person will take that if you look at the next name and he'll say okay I'm going to take that to",
    "start": "2805780",
    "end": "2810940"
  },
  {
    "text": "Department two over here open it up I can see okay I can see what I'm trying to do here I can see my bit",
    "start": "2810940",
    "end": "2816760"
  },
  {
    "text": "of the instructions so what I'm going to do is do my bit and then I'm going to look at the front of the envelope I'm",
    "start": "2816760",
    "end": "2821859"
  },
  {
    "text": "going to cross my name off the envelope I'm going to put it back onto a mail truck and so on and so on and so on it",
    "start": "2821859",
    "end": "2827920"
  },
  {
    "text": "will go through all the different departments if something goes wrong during that",
    "start": "2827920",
    "end": "2834220"
  },
  {
    "text": "then the department that had the problem will put some information about what went wrong in there",
    "start": "2834220",
    "end": "2840339"
  },
  {
    "text": "and then they will start the envelope going back through the Departments that it came from giving each department an",
    "start": "2840339",
    "end": "2847540"
  },
  {
    "text": "opportunity to roll back or compensate because we can't always roll back in these worlds compensate the behavior",
    "start": "2847540",
    "end": "2854740"
  },
  {
    "text": "that they enacted upon that workflow and then it will go all the way back to the",
    "start": "2854740",
    "end": "2860200"
  },
  {
    "text": "start giving everybody a chance to compensate so we refer to that as a saga basically",
    "start": "2860200",
    "end": "2865660"
  },
  {
    "text": "and with the tools that we've just used we can Implement a saga really nicely we",
    "start": "2865660",
    "end": "2870880"
  },
  {
    "text": "didn't need a dual function we don't have events in the same way instead we have the well-being process start off",
    "start": "2870880",
    "end": "2878319"
  },
  {
    "text": "with a simple message it puts on service bus that has got the names of the cues in the headers that it needs this",
    "start": "2878319",
    "end": "2883839"
  },
  {
    "text": "message to flow between and it puts the message onto the bus where it goes to in this case the correspondence service",
    "start": "2883839",
    "end": "2889660"
  },
  {
    "text": "first of all which sends its email it then looks at the headers and it says okay cool well now that message needs to",
    "start": "2889660",
    "end": "2896020"
  },
  {
    "text": "go to the broadcaster HR the broadcast topic and so on and everything that's",
    "start": "2896020",
    "end": "2901660"
  },
  {
    "text": "interacting with that has a chance to a put some business value over it and B if",
    "start": "2901660",
    "end": "2906880"
  },
  {
    "text": "things didn't go well then it can just start the message going back up the chain instead",
    "start": "2906880",
    "end": "2912099"
  },
  {
    "text": "so that's three very different approaches to how you could Model A workflow using sequences of cues and",
    "start": "2912099",
    "end": "2918760"
  },
  {
    "text": "messages and events that have each got their pros and cons associated with them and there's not a wrong or right answer",
    "start": "2918760",
    "end": "2926020"
  },
  {
    "text": "to these problems it's just look based off the pros and cons of the business criteria",
    "start": "2926020",
    "end": "2932200"
  },
  {
    "text": "come up with a good decision Matrix and work out which is the the better approach because they'll all get you",
    "start": "2932200",
    "end": "2938319"
  },
  {
    "text": "where you need to be which is the approach that fits the problem that you've got would be my main advice now",
    "start": "2938319",
    "end": "2943960"
  },
  {
    "text": "there's number four let's see if I can get this working right",
    "start": "2943960",
    "end": "2949900"
  },
  {
    "text": "oh my word now powerpoint's got into one of those super weird things where I have",
    "start": "2949900",
    "end": "2955480"
  },
  {
    "text": "my screen now Frozen awesome it's all right I've got time I can make",
    "start": "2955480",
    "end": "2961540"
  },
  {
    "text": "this work right slide one two things are moving awesome",
    "start": "2961540",
    "end": "2969720"
  },
  {
    "text": "too good CT a",
    "start": "2972460",
    "end": "2978000"
  },
  {
    "text": "events HR choreography Choice four third party so",
    "start": "2978240",
    "end": "2985260"
  },
  {
    "text": "we've used Primitives so far to deliver our work for us we've gone really raw on",
    "start": "2985260",
    "end": "2990760"
  },
  {
    "text": "queues and events and service buses and event grids which are all awesome",
    "start": "2990760",
    "end": "2995859"
  },
  {
    "text": "building blocks but the thing is once you get into more complicated scenarios with messaging you",
    "start": "2995859",
    "end": "3002579"
  },
  {
    "text": "find yourself having to write a lot of abstractions on top of those to really allow you to just focus on writing the",
    "start": "3002579",
    "end": "3009660"
  },
  {
    "text": "business logic and get away from the idea of like cues and subscriptions and you know all that boilerplate stuff that",
    "start": "3009660",
    "end": "3016319"
  },
  {
    "text": "we'd rather avoid and it turns out there's a whole bunch of pretty cool libraries out there that",
    "start": "3016319",
    "end": "3021540"
  },
  {
    "text": "can really help you with this that sits on top of our services not just ours but",
    "start": "3021540",
    "end": "3026819"
  },
  {
    "text": "other clouds as well they abstract that away from you and they just give you an abstraction layer that makes much more",
    "start": "3026819",
    "end": "3033060"
  },
  {
    "text": "sense in messaging applications so I've picked on mass transit here there's obviously end service bus as well and",
    "start": "3033060",
    "end": "3038220"
  },
  {
    "text": "I'm sure there's a whole bunch of other ones so another way you could rewrite this is to literally uh use in this case",
    "start": "3038220",
    "end": "3045839"
  },
  {
    "text": "I've got a container app which is a great way to run a long-running process now in Azure which we've only just uh",
    "start": "3045839",
    "end": "3053040"
  },
  {
    "text": "got which is awesome it can sit there as a Daemon process and mass transit will deal with all the subscriptions to the",
    "start": "3053040",
    "end": "3058980"
  },
  {
    "text": "queues and things like that that we need and then it will just allow us to write our business logic that defines what",
    "start": "3058980",
    "end": "3065339"
  },
  {
    "text": "happens when the different messages start to come in now these things are awesome but the only thing I'd say to be",
    "start": "3065339",
    "end": "3071819"
  },
  {
    "text": "aware of is that they really need you to start to opt in other parts of your organization as well because just having",
    "start": "3071819",
    "end": "3078000"
  },
  {
    "text": "one service running on one of these abstractions like mass transit well there's a lot of stuff that's doing",
    "start": "3078000",
    "end": "3083819"
  },
  {
    "text": "under the scenes to deal with like subscriptions and routing and things like that that you know either get your",
    "start": "3083819",
    "end": "3090720"
  },
  {
    "text": "other services using the same thing or that's going to be difficult to only have one service in that world",
    "start": "3090720",
    "end": "3097020"
  },
  {
    "text": "so again another option if you're all in on this then this could be a really good",
    "start": "3097020",
    "end": "3102720"
  },
  {
    "text": "way to go because you just get the abstractions given for you and they leverage the underlying services and get",
    "start": "3102720",
    "end": "3109140"
  },
  {
    "text": "all the first class goodness from them so there you go uh so oh we're not gonna",
    "start": "3109140",
    "end": "3115079"
  },
  {
    "text": "go for that one because I'm not going to have time for event sourcing and there's a whole bunch of considerations",
    "start": "3115079",
    "end": "3121880"
  },
  {
    "text": "uh like they're on top of what we've spoken about today that you really need to think about in this kind of",
    "start": "3121880",
    "end": "3127260"
  },
  {
    "text": "architecture so things like you know you've got your messaging your hosting Services uh processing type but then",
    "start": "3127260",
    "end": "3133500"
  },
  {
    "text": "correlation IDs durability partitioning back offs retries item Post-it receivers",
    "start": "3133500",
    "end": "3138900"
  },
  {
    "text": "you name it all sorts of stuff that is going to be important when you're building these architectures but I hope",
    "start": "3138900",
    "end": "3144720"
  },
  {
    "text": "that I've given you a little bit of an insight into the Azure services and the way that we can put them together and",
    "start": "3144720",
    "end": "3151559"
  },
  {
    "text": "leverage them to help build these distributed event-driven architecture type applications",
    "start": "3151559",
    "end": "3156660"
  },
  {
    "text": "so thank you very much thanks for varying with me when it all went wrong uh in my little slide deck there and any",
    "start": "3156660",
    "end": "3164700"
  },
  {
    "text": "questions that you have then feel free I think we've got a few minutes left so go for it",
    "start": "3164700",
    "end": "3171380"
  },
  {
    "text": "yes go for it",
    "start": "3177180",
    "end": "3180260"
  },
  {
    "text": "I probably applies less to an event and more to a message really or although",
    "start": "3182460",
    "end": "3187800"
  },
  {
    "text": "having said that I did look earlier um so if you think about service bus so the question was what is request response in",
    "start": "3187800",
    "end": "3193740"
  },
  {
    "text": "uh consideration of an event um in Service Plus these things are all just messages at the end of the day so",
    "start": "3193740",
    "end": "3200880"
  },
  {
    "text": "no matter whether you receive that message on a queue or a topic so in service bus queues are kind of like",
    "start": "3200880",
    "end": "3206160"
  },
  {
    "text": "point to point where you put a message on a queue there's a single thing that reads off that queue I topic is this",
    "start": "3206160",
    "end": "3211920"
  },
  {
    "text": "idea of wanting many where you put a message and pointed at a topic you can have different subscribers that will all",
    "start": "3211920",
    "end": "3217920"
  },
  {
    "text": "receive that message in their queue they'll all get their own copy of it and request response is just this idea that",
    "start": "3217920",
    "end": "3223740"
  },
  {
    "text": "you can actually put a message back onto a queue that refers to the original message so it just means a message flows",
    "start": "3223740",
    "end": "3231300"
  },
  {
    "text": "back down into the originating system so whether that's on a subscription or a",
    "start": "3231300",
    "end": "3236760"
  },
  {
    "text": "point to point it doesn't really matter in service bus world so a good example might be let's say",
    "start": "3236760",
    "end": "3242480"
  },
  {
    "text": "you have got a system that wants to put a message on to uh drive a live online",
    "start": "3242480",
    "end": "3248339"
  },
  {
    "text": "auction where you might have lots of different um services that can potentially put",
    "start": "3248339",
    "end": "3253800"
  },
  {
    "text": "something onto that page so you might put it onto a queue but in each one potentially will respond within let's",
    "start": "3253800",
    "end": "3259380"
  },
  {
    "text": "say a third of a second and the first few that come in with the response maybe you'll use that to drive your UI cool",
    "start": "3259380",
    "end": "3267839"
  },
  {
    "text": "yeah go for it",
    "start": "3270960",
    "end": "3273859"
  },
  {
    "text": "um yeah look it's it's not a big like in all honesty um the change feed gets updated the",
    "start": "3278099",
    "end": "3285599"
  },
  {
    "text": "moment that you persist the document right that's a very quick thing the lag would be in your own thing that Paul's a",
    "start": "3285599",
    "end": "3291900"
  },
  {
    "text": "change seat because that's a polling model so and and you know you probably don't want to smash to change feed",
    "start": "3291900",
    "end": "3297720"
  },
  {
    "text": "because you'll get rate limited against it so you tend to go maybe every second or something like that but really it",
    "start": "3297720",
    "end": "3304559"
  },
  {
    "text": "should be no more than a couple of seconds that you get the change coming in unless there's thousands of changes",
    "start": "3304559",
    "end": "3310020"
  },
  {
    "text": "and then obviously you've got to work through them is there any other types of",
    "start": "3310020",
    "end": "3316920"
  },
  {
    "text": "patented I've ran into bulb problems and stuff like that and obviously that's why",
    "start": "3316920",
    "end": "3324260"
  },
  {
    "text": "yeah other types of scenarios like",
    "start": "3324720",
    "end": "3329720"
  },
  {
    "text": "like retry in to send the message yep absolutely yeah",
    "start": "3329880",
    "end": "3336319"
  },
  {
    "text": "um you know if you want to really just transact against a single system then if",
    "start": "3338700",
    "end": "3345240"
  },
  {
    "text": "you're a service like you're a microservices owns its own data it's it's a really good way of doing it you",
    "start": "3345240",
    "end": "3351480"
  },
  {
    "text": "could always retry against a downstream system but you know again it depends if it's super critical that you transact",
    "start": "3351480",
    "end": "3358319"
  },
  {
    "text": "across by for those systems then outbox I think is a really good way to go if you can deal with not sending a few",
    "start": "3358319",
    "end": "3365280"
  },
  {
    "text": "of those messages then you can definitely keep it simple by simpler by having a bit of back off and retry and",
    "start": "3365280",
    "end": "3371579"
  },
  {
    "text": "then just saying that I couldn't do it for that one but I think it comes back down to your business requirements and how important is it to send that message",
    "start": "3371579",
    "end": "3380299"
  },
  {
    "text": "cool all right going once going twice the end of conference approaching rich as locked down thank",
    "start": "3383040",
    "end": "3390780"
  },
  {
    "text": "you everybody for coming today",
    "start": "3390780",
    "end": "3394579"
  }
]