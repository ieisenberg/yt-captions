[
  {
    "text": "okay I think we're on all right um before you make your final decision on",
    "start": "7040",
    "end": "13639"
  },
  {
    "text": "whether to to to uh stay or go read the slide",
    "start": "13639",
    "end": "20119"
  },
  {
    "text": "um so basically I I I need you to make a deal with me that you will not give me a",
    "start": "20119",
    "end": "27519"
  },
  {
    "text": "red card just because you saw too much assembly and and for real like like Olaf is is",
    "start": "27519",
    "end": "33879"
  },
  {
    "text": "doing a wonderful talk basically about how to to hack games uh so so that's fun",
    "start": "33879",
    "end": "41200"
  },
  {
    "text": "uh and might be you know more your speed at 3:00 in the afternoon uh but if you",
    "start": "41200",
    "end": "46800"
  },
  {
    "text": "stay then you know you know what you're going to",
    "start": "46800",
    "end": "51679"
  },
  {
    "text": "get okay I'll give like a minute more so that people can come",
    "start": "52359",
    "end": "58920"
  },
  {
    "text": "in um all right I'll just start slowly hopefully",
    "start": "58920",
    "end": "66600"
  },
  {
    "text": "everybody read the slide all right so uh the talk is called uh return",
    "start": "66600",
    "end": "73799"
  },
  {
    "text": "oriented programming an introduction um but it's not going to be",
    "start": "73799",
    "end": "78920"
  },
  {
    "text": "very high level uh and uh I am Patricia o I'm a trainer",
    "start": "78920",
    "end": "85799"
  },
  {
    "text": "and a consultant um I if you like this talk talk you can pay me and we can do",
    "start": "85799",
    "end": "92439"
  },
  {
    "text": "this for like two to four days so so um if this is your speed uh",
    "start": "92439",
    "end": "99399"
  },
  {
    "text": "you can hire me for your company and I can uh I can we can break things for Fun",
    "start": "99399",
    "end": "104600"
  },
  {
    "text": "and Profit um so I'm a C++ program programming in C++ uh since 2005 when",
    "start": "104600",
    "end": "112560"
  },
  {
    "text": "someone uh accidentally hired me as a C++ programmer",
    "start": "112560",
    "end": "117880"
  },
  {
    "text": "um uh I work for my own company uh called uh turtles SEC and I've worked on",
    "start": "117880",
    "end": "124320"
  },
  {
    "text": "various other places before uh have a tendency to end up working on browsers",
    "start": "124320",
    "end": "130640"
  },
  {
    "text": "occasionally um I have a master's in computer science and my pronouns are she",
    "start": "130640",
    "end": "136480"
  },
  {
    "text": "they so uh the the whole kind of process that we're going to go through today is what I like to call Se semi arisal R uh",
    "start": "136480",
    "end": "146200"
  },
  {
    "text": "we're going to to to use some tools to help us a little bit and then we're going to be use modifying it a little",
    "start": "146200",
    "end": "153040"
  },
  {
    "text": "bit to make something that is you know custom for our needs uh I'm going to base this on the",
    "start": "153040",
    "end": "159400"
  },
  {
    "text": "same example I always use as so if anyone's seen any of my previous kind of talks around this area this is the this",
    "start": "159400",
    "end": "166319"
  },
  {
    "text": "is the silly application I keep on using it used to be more fun before you know",
    "start": "166319",
    "end": "171640"
  },
  {
    "text": "Russia threatened us all with a World War but um it's based on a movie that",
    "start": "171640",
    "end": "177040"
  },
  {
    "text": "apparently only old people have seen um hopefully we enough old people in here",
    "start": "177040",
    "end": "183040"
  },
  {
    "text": "is fine uh so so it's it's it's kind of inspired by the movie War games um it",
    "start": "183040",
    "end": "188879"
  },
  {
    "text": "has only uh three functions I do variations on it in C or in C++ it's",
    "start": "188879",
    "end": "194159"
  },
  {
    "text": "extremely different when it's in C++ it doesn't say void in the parenthesis um",
    "start": "194159",
    "end": "199720"
  },
  {
    "text": "but yes uh in this case we're going to use uh C in for our",
    "start": "199720",
    "end": "205159"
  },
  {
    "text": "vulnerability uh because why not so the basic idea and and uh",
    "start": "205159",
    "end": "210200"
  },
  {
    "text": "uh there was a talk earlier today that me mentioned uh something called the weird machine and the weird machine is a",
    "start": "210200",
    "end": "216400"
  },
  {
    "text": "mental model or a formal model for for thinking about exploitation and so I'm just going to give a very quick kind of",
    "start": "216400",
    "end": "223599"
  },
  {
    "text": "feel for what that means so we had a program before it's",
    "start": "223599",
    "end": "228640"
  },
  {
    "text": "not going to be very interesting so I'm not going to really talk about it uh but it has this basic idea so there's it's",
    "start": "228640",
    "end": "235159"
  },
  {
    "text": "going to print secret colon uh and then read something from the the command line",
    "start": "235159",
    "end": "241120"
  },
  {
    "text": "uh so if you give it uh the wrong password it will say access denied operation complete and if you give it",
    "start": "241120",
    "end": "247439"
  },
  {
    "text": "the right one it will say access granted launching missiles and operation complete at least that is what was",
    "start": "247439",
    "end": "254040"
  },
  {
    "text": "intended so this was the the kind of the mental model of the",
    "start": "254040",
    "end": "259519"
  },
  {
    "text": "programmer uh but uh of course you know uh we have a stack allocated array and",
    "start": "259519",
    "end": "267400"
  },
  {
    "text": "you know a wonderful opportunity for buffer overflow and so uh now we are",
    "start": "267400",
    "end": "274400"
  },
  {
    "text": "introducing more States so the idea here is that this was the intended uh states of our",
    "start": "274400",
    "end": "282000"
  },
  {
    "text": "application uh but now with our buffer overflow we can put it into new States and so let's say that we use imagine the",
    "start": "282000",
    "end": "290120"
  },
  {
    "text": "the buffer is smaller uh because I can't really put everything on the slide so imagine that we do a buffer overflow",
    "start": "290120",
    "end": "296680"
  },
  {
    "text": "with global thermal nuclear war so so now we have a buffer overflow the state",
    "start": "296680",
    "end": "301840"
  },
  {
    "text": "of the application is that we have smashed a stack exactly what happens at this point is undefined",
    "start": "301840",
    "end": "309600"
  },
  {
    "text": "Behavior right um but most likely you're going to crash right uh some some way of",
    "start": "309600",
    "end": "316680"
  },
  {
    "text": "maybe a tool will take you down maybe there's a stack Canary that will will uh terminate your application whatever",
    "start": "316680",
    "end": "322560"
  },
  {
    "text": "happens something bad happens usually um so to to be able to get you",
    "start": "322560",
    "end": "330160"
  },
  {
    "text": "to r i first have to kind of introduce you to the concept of Shell Code and I've kind of done it before so this time",
    "start": "330160",
    "end": "335759"
  },
  {
    "text": "we're going to do it with 32bit um there's one good reason for",
    "start": "335759",
    "end": "341919"
  },
  {
    "text": "that and that is that our Shell Code this time is basically going to be only a bunch of addresses and the the",
    "start": "341919",
    "end": "349600"
  },
  {
    "text": "vulnerability that we are targeting uh actually for some reason cares about",
    "start": "349600",
    "end": "354720"
  },
  {
    "text": "null bites because it cares about strings it's very annoying",
    "start": "354720",
    "end": "360400"
  },
  {
    "text": "so uh 32-bit addresses are are better because they rarely have any nbes in",
    "start": "360400",
    "end": "367199"
  },
  {
    "text": "them whereas 64-bit addresses are full of n bytes and are very annoying to work with um but usually you know you don't",
    "start": "367199",
    "end": "374400"
  },
  {
    "text": "Target a string API you are generally coming through some kind of binary buffer or something so usually this is",
    "start": "374400",
    "end": "381000"
  },
  {
    "text": "isn't an issue but in our silly program it is so yes what is Shell",
    "start": "381000",
    "end": "387919"
  },
  {
    "text": "Code uh so uh shell code is a piece of code typically a machine code uh it's",
    "start": "387919",
    "end": "393759"
  },
  {
    "text": "delivered and executed as a part of an exploit the this is the this is the when",
    "start": "393759",
    "end": "399240"
  },
  {
    "text": "you get code execution the thing that executes uh so it's usually just if you",
    "start": "399240",
    "end": "406639"
  },
  {
    "text": "can think of it in like operating system terms it's it's like the the the first boot loader right often times you will",
    "start": "406639",
    "end": "413759"
  },
  {
    "text": "have several stages of Shell Code in the same way that you will often have several stages of boot loaders because you know the first first one is very",
    "start": "413759",
    "end": "420000"
  },
  {
    "text": "small and then it can load the bigger one same same principle applies",
    "start": "420000",
    "end": "425960"
  },
  {
    "text": "um the reason why it's called Shell Code was that when it was named the idea was",
    "start": "425960",
    "end": "432639"
  },
  {
    "text": "that it starts a shell and we're going to be using um we're going to be traditional here today and so we're",
    "start": "432639",
    "end": "440000"
  },
  {
    "text": "going to do that so we're going to start uh SLB SLS that's going to be our",
    "start": "440000",
    "end": "445680"
  },
  {
    "text": "thing um in real life exploits they will usually do something more advanced uh",
    "start": "445680",
    "end": "452960"
  },
  {
    "text": "like uh downloading something or starting a reverse shell or just opening",
    "start": "452960",
    "end": "458360"
  },
  {
    "text": "up you know a port somewhere and listening for commands or you know it will do many fun and interesting things",
    "start": "458360",
    "end": "465199"
  },
  {
    "text": "uh in our case we're just going to make keep it simple uh so the basic idea of uh this",
    "start": "465199",
    "end": "473159"
  },
  {
    "text": "this kind of uh code execution that we're going to do here is that what we want to do is we want to run xcv",
    "start": "473159",
    "end": "480400"
  },
  {
    "text": "so uh on on Linux uh you can think of uh a process as containing a program so so",
    "start": "480400",
    "end": "488520"
  },
  {
    "text": "the vulnerable program in our case this whole War Games thing is running inside of a process and uh by if we can get",
    "start": "488520",
    "end": "496680"
  },
  {
    "text": "code execution inside of that vulnerable program with the little code bit that",
    "start": "496680",
    "end": "502039"
  },
  {
    "text": "we're going to execute we want to execute uh the system called xxb uh which will uh make a possible for",
    "start": "502039",
    "end": "509720"
  },
  {
    "text": "us to replace the vulnerable program with whatever we want in this case",
    "start": "509720",
    "end": "516599"
  },
  {
    "text": "/bin/sh so basically the the the focus of of everything that we're going to do",
    "start": "516599",
    "end": "523279"
  },
  {
    "text": "today is getting to the point where we can run XXV with SLB slsh and we're",
    "start": "523279",
    "end": "529880"
  },
  {
    "text": "going to do it in a different ways all right so shell code is code that gives you",
    "start": "529880",
    "end": "536360"
  },
  {
    "text": "shell all right so this is this is the high level plan of what we're going to do today and basically I'm going to try",
    "start": "536360",
    "end": "542160"
  },
  {
    "text": "to show you a methodology on how you could get from what the the Shell Code that you would like to run at uh in C to",
    "start": "542160",
    "end": "551279"
  },
  {
    "text": "actually Shell Code that you can uh run on the machine this today using",
    "start": "551279",
    "end": "557160"
  },
  {
    "text": "R uh yeah all right so we write some C code for our Shell Code it doesn't have",
    "start": "557160",
    "end": "562800"
  },
  {
    "text": "to be good uh thankfully uh and then we test it make sure it does what we want",
    "start": "562800",
    "end": "568760"
  },
  {
    "text": "uh then we use that as a basis to write our inline assembly and that's usually looking up what kind of system calls are",
    "start": "568760",
    "end": "575399"
  },
  {
    "text": "actually being used what are there numbers are there anything you should know about whatever uh but it's this",
    "start": "575399",
    "end": "582480"
  },
  {
    "text": "isn't like a mechanical process right there's a this is a this is a it's a",
    "start": "582480",
    "end": "588480"
  },
  {
    "text": "fuzzy thing you have to actually write the inline assembly H then you test it and basically uh you should test all the",
    "start": "588480",
    "end": "595519"
  },
  {
    "text": "time because it's very easy to break things uh so so here we're going to test our assembly see that it still does what",
    "start": "595519",
    "end": "601399"
  },
  {
    "text": "we want it to do uh then we're going to use uh that as as the plan so we have",
    "start": "601399",
    "end": "607839"
  },
  {
    "text": "inline assembly that is the stuff we want to do uh and then we're going to create a rock chain that",
    "start": "607839",
    "end": "614640"
  },
  {
    "text": "does what we wrote in our inline assembly and then we're going to test the rockchain and that's basically what",
    "start": "614640",
    "end": "620600"
  },
  {
    "text": "we're going to do this entire hour so begin by writing",
    "start": "620600",
    "end": "627360"
  },
  {
    "text": "the C code uh for our Shell Code code and so uh we're going to be using",
    "start": "627360",
    "end": "633920"
  },
  {
    "text": "uh three different system calls uh so one is uh close one is open and one is",
    "start": "633920",
    "end": "640120"
  },
  {
    "text": "XF and this is mostly because we're going to run it in GDB and we need to to",
    "start": "640120",
    "end": "645480"
  },
  {
    "text": "fix up uh reading from the terminal to get our shell to work after but it also",
    "start": "645480",
    "end": "650560"
  },
  {
    "text": "makes it more interesting because we actually have to do more things so these are the this is the code that we want",
    "start": "650560",
    "end": "657320"
  },
  {
    "text": "our Shell Code to do like this is exactly what we wanted to do now we have to reproduce this first in an inline",
    "start": "657320",
    "end": "665639"
  },
  {
    "text": "assembly and then later uh using R um yeah so if we uh take our C file",
    "start": "665639",
    "end": "674040"
  },
  {
    "text": "and we compile it and uh and run it it gives us a shell prompt so that's the",
    "start": "674040",
    "end": "680240"
  },
  {
    "text": "dollar sign over there if you write LS it will behave like a shell right um yeah all right that brings us",
    "start": "680240",
    "end": "689360"
  },
  {
    "text": "to writing the inline assembly uh so we're going to do it in in 32bit uh today which is",
    "start": "689360",
    "end": "696320"
  },
  {
    "text": "charmingly nice I think well I've been working in 64-bit",
    "start": "696320",
    "end": "701639"
  },
  {
    "text": "for so long I find like 32bit to be very quaint and nice um it's much easier uh",
    "start": "701639",
    "end": "707680"
  },
  {
    "text": "so so we have our registers uh so uh in eax we will need to put the the uh CIS",
    "start": "707680",
    "end": "714440"
  },
  {
    "text": "call number uh for the system call that we want to do so this is how it is done it's it's similar in 64 but just",
    "start": "714440",
    "end": "721519"
  },
  {
    "text": "different registers um so you have one register where you want to put uh the CIS call number and to figure out what",
    "start": "721519",
    "end": "727880"
  },
  {
    "text": "that is you can you can read the binary or you can go and look in a table",
    "start": "727880",
    "end": "733040"
  },
  {
    "text": "somewhere and it will tell you so I have a specific CIS call I want to do then I put the CIS call number for that CIS in",
    "start": "733040",
    "end": "740120"
  },
  {
    "text": "eax then I put uh oh yeah and uh yes of course for",
    "start": "740120",
    "end": "745160"
  },
  {
    "text": "Intel fans everywhere there are many names for these registers uh so even in",
    "start": "745160",
    "end": "750920"
  },
  {
    "text": "32-bit we had multiple names so the eax is the 32-bit uh if you want to to talk",
    "start": "750920",
    "end": "757040"
  },
  {
    "text": "about the the first 16 bits of this same register uh it's called ax and then you",
    "start": "757040",
    "end": "762399"
  },
  {
    "text": "can also address uh the lower and the high bite of that with a and",
    "start": "762399",
    "end": "768279"
  },
  {
    "text": "ah uh of course in Rax you can also use all of these names the Rax is the 64-bit",
    "start": "768279",
    "end": "774560"
  },
  {
    "text": "register if you're use if you're on 64-bit so the first argument will be passed in ebx and uh it has of course",
    "start": "774560",
    "end": "783040"
  },
  {
    "text": "all of the features uh of all of the names and uh ECX will be the second",
    "start": "783040",
    "end": "789120"
  },
  {
    "text": "argument and then the third argument in edx all right so this was our our C code",
    "start": "789120",
    "end": "796600"
  },
  {
    "text": "so let's start uh with close so um the Callin convention for",
    "start": "796600",
    "end": "803320"
  },
  {
    "text": "for the system called close is uh is that we need to put um six in EA because",
    "start": "803320",
    "end": "810800"
  },
  {
    "text": "the CIS call number for a close is six uh then we need to put uh the file",
    "start": "810800",
    "end": "816800"
  },
  {
    "text": "descriptor in ebx and in our case we want to put zero there so that's it and",
    "start": "816800",
    "end": "824279"
  },
  {
    "text": "we're not going to use ECX uh and edx so this is going to be like the easiest one",
    "start": "824279",
    "end": "830440"
  },
  {
    "text": "we're going to do uh yeah so we just need to zero out",
    "start": "830440",
    "end": "835519"
  },
  {
    "text": "one register and put six in another register so writing the inline assembly for it is is um relatively",
    "start": "835519",
    "end": "843120"
  },
  {
    "text": "straightforward so we're going to zero out uh the register using exort but you can do it in different ways in this case",
    "start": "843120",
    "end": "848959"
  },
  {
    "text": "we don't really care uh when we yeah so however you like the first line is just",
    "start": "848959",
    "end": "855120"
  },
  {
    "text": "trying to zero out uh eax and uh moving six into",
    "start": "855120",
    "end": "860880"
  },
  {
    "text": "eax uh it's I'm not sure you actually need to zero out but I have a tendency to always do",
    "start": "860880",
    "end": "866959"
  },
  {
    "text": "that uh then we're going to zero out ebx uh because we wanted zero in in in ebx",
    "start": "866959",
    "end": "874440"
  },
  {
    "text": "and then we're going to do uh Intex 80 and that's how we do CIS call so so if",
    "start": "874440",
    "end": "880519"
  },
  {
    "text": "you're familiar with uh with uh 64-bit this is the equivalent of saying to the",
    "start": "880519",
    "end": "886199"
  },
  {
    "text": "colonel please I would like to do a system call now can you come and look in my eax register to see what I want to do",
    "start": "886199",
    "end": "893639"
  },
  {
    "text": "and then the colonel look goes up and it looks in the EA register and it goes okay you want to do a close okay so what",
    "start": "893639",
    "end": "899399"
  },
  {
    "text": "do you want to close and it goes it looks in the ebx and it goes like okay file the script is zero I will do for",
    "start": "899399",
    "end": "906800"
  },
  {
    "text": "you um so basically it goes like this we have uh we're going to fill in and and",
    "start": "906800",
    "end": "913680"
  },
  {
    "text": "this is the purpose like of all of the code we're going to do today similar we want to fill in stuff in registers all",
    "start": "913680",
    "end": "920839"
  },
  {
    "text": "right so here we have the eax register it needs to get uh the CIS call number so we start by just zeroing it out so",
    "start": "920839",
    "end": "927480"
  },
  {
    "text": "the state of the register is over here so now it's zero and then we move uh six into that",
    "start": "927480",
    "end": "935480"
  },
  {
    "text": "register so now it is six uh then we move over to the ebx",
    "start": "935480",
    "end": "940839"
  },
  {
    "text": "register we zero it out and now we have the state we wanted uh the CIS call",
    "start": "940839",
    "end": "946199"
  },
  {
    "text": "number is in eax and uh and file descriptor zero is in ebx and so we do",
    "start": "946199",
    "end": "953279"
  },
  {
    "text": "uh int 80 uh to tell the colonel please please go and do our",
    "start": "953279",
    "end": "959560"
  },
  {
    "text": "bidding all right moving on let's do something more",
    "start": "959560",
    "end": "965319"
  },
  {
    "text": "interesting so we're going to do open H and we can see already that this is going to be more painful we you know the",
    "start": "965319",
    "end": "972079"
  },
  {
    "text": "the the flag is okay but that there's like a whole pointer thing and a string",
    "start": "972079",
    "end": "977120"
  },
  {
    "text": "and you know terribleness so this will be good so uh when we look at uh the",
    "start": "977120",
    "end": "983680"
  },
  {
    "text": "calling convention for open we find that we need to put five in eax uh for open",
    "start": "983680",
    "end": "989600"
  },
  {
    "text": "and then we need to put uh the address of of the string in in ebx AKA",
    "start": "989600",
    "end": "997959"
  },
  {
    "text": "pointer and uh then uh we need to put uh the flags in ECX and uh and the mode in",
    "start": "997959",
    "end": "1007800"
  },
  {
    "text": "edx now traditionally I have a tendency to try zero for all values I can and it",
    "start": "1007800",
    "end": "1013880"
  },
  {
    "text": "usually works uh so yes but before we we go on uh there's",
    "start": "1013880",
    "end": "1019279"
  },
  {
    "text": "a little trick on the like coming up so I need to explain more registers okay so we had another",
    "start": "1019279",
    "end": "1025959"
  },
  {
    "text": "register uh it's called the stack pointer uh so a stack pointer will be updated when you do instructions like",
    "start": "1025959",
    "end": "1032520"
  },
  {
    "text": "pop and push and so uh it will then be pointing to uh what it considers to be",
    "start": "1032520",
    "end": "1038798"
  },
  {
    "text": "the top of the stack uh so when you use pop and push uh instructions it will be",
    "start": "1038799",
    "end": "1043839"
  },
  {
    "text": "updated automatically which which is nice and you can kind of use that in various",
    "start": "1043839",
    "end": "1049200"
  },
  {
    "text": "scenarios uh it also has you know Legacy uh namings as well all",
    "start": "1049200",
    "end": "1055720"
  },
  {
    "text": "right so this is going to be our and you don't have to look too much about uh at like the thing because we're going to go",
    "start": "1055720",
    "end": "1061520"
  },
  {
    "text": "through it but in eax we need to put five uh in ebx we need to put the",
    "start": "1061520",
    "end": "1067440"
  },
  {
    "text": "pointer to uh the the program we want to run uh and then we have the flags in ECX",
    "start": "1067440",
    "end": "1075440"
  },
  {
    "text": "and in edx we have the mode and then we do int a 80 and then it should do our",
    "start": "1075440",
    "end": "1080880"
  },
  {
    "text": "open all right but we will step through it so we have our Cisco registers that",
    "start": "1080880",
    "end": "1087080"
  },
  {
    "text": "we're going to fill in over here on the left if I can use the pointy thingy uh",
    "start": "1087080",
    "end": "1092679"
  },
  {
    "text": "and uh so here we're going to have our our assembly instructions oh dear don't",
    "start": "1092679",
    "end": "1098720"
  },
  {
    "text": "do that Patricia all right and over here we're going to have uh the",
    "start": "1098720",
    "end": "1103880"
  },
  {
    "text": "stack come on there that's the basic idea all right",
    "start": "1103880",
    "end": "1109640"
  },
  {
    "text": "uh so first we're zeroing out eax and then we're moving five into eax so we're done so that was you know we've Set uh",
    "start": "1109640",
    "end": "1117240"
  },
  {
    "text": "finished eax and we move over to ebx now now it gets a little bit tricky because",
    "start": "1117240",
    "end": "1122320"
  },
  {
    "text": "we need a file name right in this case we're going to close uh uh or no we're",
    "start": "1122320",
    "end": "1128919"
  },
  {
    "text": "going to do an open so so first we have an issue we want to make a string or we",
    "start": "1128919",
    "end": "1135600"
  },
  {
    "text": "want to write a string somewhere in this case we're going to use the stack for a place to put our",
    "start": "1135600",
    "end": "1141039"
  },
  {
    "text": "string and unfortunately one of the things that the string needs is a null Terminator and so we're going to start",
    "start": "1141039",
    "end": "1147240"
  },
  {
    "text": "by just pushing EB ebx on the stack so we have you know we have at least at",
    "start": "1147240",
    "end": "1153799"
  },
  {
    "text": "least one null Terminator we just have four here um then we put a little magic uh number",
    "start": "1153799",
    "end": "1161400"
  },
  {
    "text": "inside of ebx but it's not so magic cuz when we push it you can see that it is",
    "start": "1161400",
    "end": "1167320"
  },
  {
    "text": "asking code for SL TTY and then we have our n terator",
    "start": "1167320",
    "end": "1172440"
  },
  {
    "text": "here and uh then we do uh the same again we move another magic number which is",
    "start": "1172440",
    "end": "1178039"
  },
  {
    "text": "just asky code for these uh characters into ebx and we push that on the stat",
    "start": "1178039",
    "end": "1184600"
  },
  {
    "text": "and so now we have let's see if I can point slash Dev SL TTY and a n",
    "start": "1184600",
    "end": "1192799"
  },
  {
    "text": "Terminator all right then we move uh the stack pointer into ebx because like I",
    "start": "1192799",
    "end": "1198120"
  },
  {
    "text": "said said before when you use push and and uh pop the stack pointer is updated",
    "start": "1198120",
    "end": "1203280"
  },
  {
    "text": "and so the stack pointer is pointing to the top of the stack which is the beginning of our string and so we just take whatever is in the stack pointer",
    "start": "1203280",
    "end": "1209640"
  },
  {
    "text": "put it into ebx and now we have a pointer to the string and the string is on the stack so we're",
    "start": "1209640",
    "end": "1215200"
  },
  {
    "text": "good then we're just going to zero out the other registers cross our fingers and hope it works and uh then we do uh int 80 to say",
    "start": "1215200",
    "end": "1223840"
  },
  {
    "text": "to the colonel please go and do our bidding all right",
    "start": "1223840",
    "end": "1228919"
  },
  {
    "text": "so that was uh open now we come to XXV we're going to uh it's there's not a",
    "start": "1228919",
    "end": "1236880"
  },
  {
    "text": "lot of new stuff in this one so it's going to be a little bit uh easier uh so here we also have uh yeah we need to put",
    "start": "1236880",
    "end": "1244720"
  },
  {
    "text": "a CIS call number in E uh we're going to use uh z b uh which is the CIS call uh",
    "start": "1244720",
    "end": "1250320"
  },
  {
    "text": "number for XXV and then uh we're going to put the pointer in uh",
    "start": "1250320",
    "end": "1256440"
  },
  {
    "text": "ebx and then we're going to to um zero out or pass uh pointers to null for the",
    "start": "1256440",
    "end": "1264080"
  },
  {
    "text": "for the next two actually or well later we will but I don't care too much about that we're still back to the string wi",
    "start": "1264080",
    "end": "1270240"
  },
  {
    "text": "that's going to be the issue um the big part is going to be the string and we're just going to zero out",
    "start": "1270240",
    "end": "1276000"
  },
  {
    "text": "the other registers and do in 80 and so same as before uh we zero out",
    "start": "1276000",
    "end": "1283279"
  },
  {
    "text": "eax put the uh cisal number in there zero out EB X push it on the stack to",
    "start": "1283279",
    "end": "1289240"
  },
  {
    "text": "get our n pointer take the first half of our string put it in there take the second half of our string put it in",
    "start": "1289240",
    "end": "1294600"
  },
  {
    "text": "there nice thing on 64-bit is you can just do this because you know if you have a 64-bit register you can do eight",
    "start": "1294600",
    "end": "1300760"
  },
  {
    "text": "characters at a time it's like um but you know this works and then uh we take",
    "start": "1300760",
    "end": "1307320"
  },
  {
    "text": "the stack pointer we put it into ebx uh so now we have our pointer to our string",
    "start": "1307320",
    "end": "1313039"
  },
  {
    "text": "which is on the stack and then we're going to zero out these registers and then we do an INT 80 and",
    "start": "1313039",
    "end": "1320480"
  },
  {
    "text": "we're done all right uh so this wasn't actually the point but the thing is you kind of before you do R you need to",
    "start": "1320480",
    "end": "1326880"
  },
  {
    "text": "figure out what you want to do all right so this is what we want to do this is this is the kind of assembly",
    "start": "1326880",
    "end": "1333200"
  },
  {
    "text": "thingy we want to execute right uh so we can write all that in inline assembly",
    "start": "1333200",
    "end": "1339120"
  },
  {
    "text": "make sure it actually does the thing that we want them to do so that here is here's our close here's our open uh",
    "start": "1339120",
    "end": "1345600"
  },
  {
    "text": "here's our xve then we can uh we can compile that",
    "start": "1345600",
    "end": "1350720"
  },
  {
    "text": "and uh we can run it and we get a shell prompt so we know that the the inline",
    "start": "1350720",
    "end": "1356360"
  },
  {
    "text": "assembly is is representing or at least managing to do the thing that we were trying to",
    "start": "1356360",
    "end": "1363279"
  },
  {
    "text": "do all right so we finally got to",
    "start": "1363279",
    "end": "1369880"
  },
  {
    "text": "R all right so what is r uh that's hopefully by the",
    "start": "1369880",
    "end": "1379120"
  },
  {
    "text": "time we're done today this will make sense as a r uh return oriented programming that's what it stands for it",
    "start": "1379120",
    "end": "1385559"
  },
  {
    "text": "was an uh exploit technique that was developed as most operating systems went",
    "start": "1385559",
    "end": "1391559"
  },
  {
    "text": "to to having h a stack that was on not executable Pages uh which uh ruined all",
    "start": "1391559",
    "end": "1399000"
  },
  {
    "text": "the fun for the people who were doing you know stack buffer overflow exploits which was like all the rage in the early",
    "start": "1399000",
    "end": "1405400"
  },
  {
    "text": "2000s um um yeah so this is an option if your",
    "start": "1405400",
    "end": "1411120"
  },
  {
    "text": "stack is not executable and if you uh don't have a stack inary that will ruin your",
    "start": "1411120",
    "end": "1416960"
  },
  {
    "text": "fun so the the foundational idea uh that it builds on uh which is is is kind of",
    "start": "1416960",
    "end": "1424240"
  },
  {
    "text": "uh interesting is something we kind of have peaked at a little bit um it is",
    "start": "1424240",
    "end": "1429559"
  },
  {
    "text": "that the r instruction will transfer execution to the address that is at this",
    "start": "1429559",
    "end": "1435559"
  },
  {
    "text": "point when the r instruction is executed on top of the stack whatever that address is um then",
    "start": "1435559",
    "end": "1444960"
  },
  {
    "text": "then uh we will take it we will put it into the instruction pointer and jump there and have fun um",
    "start": "1444960",
    "end": "1451400"
  },
  {
    "text": "there's yeah so uh if you can think of a r instruction so this here is our R",
    "start": "1451400",
    "end": "1458360"
  },
  {
    "text": "instruction here at the bottom uh so when it is being executed uh we are just peaking at the top of the stack here so",
    "start": "1458360",
    "end": "1465000"
  },
  {
    "text": "we have two addresses here on top of the stack and the stack pointer is pointing to the top of the stack and then we have",
    "start": "1465000",
    "end": "1471679"
  },
  {
    "text": "our instruction pointer so when we do the r the the the r will take uh this",
    "start": "1471679",
    "end": "1478399"
  },
  {
    "text": "address here and put it into the instruction pointer uh over here",
    "start": "1478399",
    "end": "1483799"
  },
  {
    "text": "in executable memory uh we have this this chunk of",
    "start": "1483799",
    "end": "1490320"
  },
  {
    "text": "code at address one which in this case is an uh exor of eax followed by a r",
    "start": "1490320",
    "end": "1499760"
  },
  {
    "text": "all right so uh when the instruction pointer got uh fed this wonderful",
    "start": "1499760",
    "end": "1505559"
  },
  {
    "text": "address uh it will jump over here and start executing and so it will start executing the exor first which will Zero",
    "start": "1505559",
    "end": "1512880"
  },
  {
    "text": "out our eax register then it will do the r which will move over back to the stack",
    "start": "1512880",
    "end": "1519559"
  },
  {
    "text": "find oh lookie there's another address here I will put that in the instruction pointer and let's go again that is the",
    "start": "1519559",
    "end": "1526399"
  },
  {
    "text": "basic idea so so a r chain is basically if you can imagine a bunch of dominoes",
    "start": "1526399",
    "end": "1532679"
  },
  {
    "text": "where you can just if you can flip the first one they will kind of trigger each other um all right we're going to do",
    "start": "1532679",
    "end": "1540960"
  },
  {
    "text": "this with uh stack buffer overflow so so imagine here we have some kind of stock allocated uh buffer uh there's some kind",
    "start": "1540960",
    "end": "1549720"
  },
  {
    "text": "of uh there's a return address here this is the where it should have returned this function should have returned uh",
    "start": "1549720",
    "end": "1557360"
  },
  {
    "text": "and uh then here we're going to put the rest of our Rock chain so when we do uh the the Overflow in the be we don't",
    "start": "1557360",
    "end": "1564159"
  },
  {
    "text": "really care about the buffer itself because uh yeah it's not interesting uh",
    "start": "1564159",
    "end": "1569279"
  },
  {
    "text": "the first thing we're going to care about is the thing that falls exactly on the return address because the first R",
    "start": "1569279",
    "end": "1575679"
  },
  {
    "text": "we're going to use is the r of the function we're in so we have done a buffer overflow",
    "start": "1575679",
    "end": "1581840"
  },
  {
    "text": "inside this function when the function reaches its own R is that R is going to",
    "start": "1581840",
    "end": "1587679"
  },
  {
    "text": "to pick up the first Gadget so that's going to be the trigger that kind of starts everything and so it's going to",
    "start": "1587679",
    "end": "1593080"
  },
  {
    "text": "pick up the gadget that is here I'll get to what gadgets are in like two seconds it's going to pick up the address that",
    "start": "1593080",
    "end": "1599000"
  },
  {
    "text": "is at this location um which is over here and",
    "start": "1599000",
    "end": "1604880"
  },
  {
    "text": "somewhere in executable memory because the point here is that we cannot because",
    "start": "1604880",
    "end": "1610559"
  },
  {
    "text": "the stack is not on non-executable pages we can't execute any code over here but",
    "start": "1610559",
    "end": "1616840"
  },
  {
    "text": "over here there's lots of code right you can have we're going to make a very simple",
    "start": "1616840",
    "end": "1623679"
  },
  {
    "text": "example here but you have you have code from the binary of the application itself but it could be code from",
    "start": "1623679",
    "end": "1629760"
  },
  {
    "text": "libraries it could be any place that in the address base there are currently good bites on nice pages that we can",
    "start": "1629760",
    "end": "1636919"
  },
  {
    "text": "execute on um all right so then we're going to execute whatever instructions uh we're",
    "start": "1636919",
    "end": "1643480"
  },
  {
    "text": "going to get a r it will go back here pick up Gadget number two same and so on",
    "start": "1643480",
    "end": "1649159"
  },
  {
    "text": "and so forth so here we have our dominoes all right so this this kind of list of of",
    "start": "1649159",
    "end": "1658399"
  },
  {
    "text": "addresses like this to different gadgets and gadgets is this kind of structure here where we have some instructions in",
    "start": "1658399",
    "end": "1664799"
  },
  {
    "text": "a r uh so this list of of addresses to gadgets is called a rock",
    "start": "1664799",
    "end": "1672159"
  },
  {
    "text": "chain all right so the way we're going to do this is we're going to take and make uh a string that we're going to",
    "start": "1672159",
    "end": "1679080"
  },
  {
    "text": "pass to this vulnerability so our vulnerability is uh a string vulnerability uh which means it will",
    "start": "1679080",
    "end": "1685720"
  },
  {
    "text": "break on like like null and other tabs",
    "start": "1685720",
    "end": "1691480"
  },
  {
    "text": "and other things um but so we have to take that",
    "start": "1691480",
    "end": "1697799"
  },
  {
    "text": "into consideration later but for now we're going to make a string and we're going to give it to the CN CN that is in",
    "start": "1697799",
    "end": "1704440"
  },
  {
    "text": "our vulnerable program it's going to overflow uh and so we have the padding so this is",
    "start": "1704440",
    "end": "1711840"
  },
  {
    "text": "the anything up to where uh the return addresses and then we have our rough",
    "start": "1711840",
    "end": "1717600"
  },
  {
    "text": "chain and so the the first Gadget will fall on the return address on the stack",
    "start": "1717600",
    "end": "1724519"
  },
  {
    "text": "and then uh it will be followed by all of our other gadgets uh so the basic idea we will",
    "start": "1724519",
    "end": "1731960"
  },
  {
    "text": "overflow with this string when the function uh that had the buffer reach get reaches it's R uh it will execute uh",
    "start": "1731960",
    "end": "1740360"
  },
  {
    "text": "the first Gadget and the the first Gadget will then do the second and third and so on all right and we can of course",
    "start": "1740360",
    "end": "1748279"
  },
  {
    "text": "um script stuff to make our wonderful string uh which is uh common and so here",
    "start": "1748279",
    "end": "1755760"
  },
  {
    "text": "for example we have uh we have uh some code which is basically uh we're going",
    "start": "1755760",
    "end": "1762399"
  },
  {
    "text": "to make a r chain we're going to start by just having like some padding in this case I'm just using it X90 For No Good",
    "start": "1762399",
    "end": "1769200"
  },
  {
    "text": "Reason uh and it has to be we have to pad up until where the return address is",
    "start": "1769200",
    "end": "1775519"
  },
  {
    "text": "so you have to determine that I have done that in talks before but I'm not going to talk about it but you can look",
    "start": "1775519",
    "end": "1781080"
  },
  {
    "text": "at this create pattern create offset is very useful uh but the rest of the r chain we're going to put in here and",
    "start": "1781080",
    "end": "1787600"
  },
  {
    "text": "then we're going to print it out so we can just feed it into our vulnerable program in this case uh",
    "start": "1787600",
    "end": "1794240"
  },
  {
    "text": "yeah all right so let's uh let's have a think about the rock chain",
    "start": "1794240",
    "end": "1799919"
  },
  {
    "text": "itself so there are this is a program or a problem that",
    "start": "1799919",
    "end": "1805039"
  },
  {
    "text": "lends itself really well to automation uh how to find all of these R gadgets",
    "start": "1805039",
    "end": "1811159"
  },
  {
    "text": "and find useful R gadgets and stringing them together uh is a problem that has",
    "start": "1811159",
    "end": "1816320"
  },
  {
    "text": "not only been solved but been solved so many times H so you can pick and choose there",
    "start": "1816320",
    "end": "1821919"
  },
  {
    "text": "are many tools uh we're going to be using a tool called ropper uh and and uh this is how we're",
    "start": "1821919",
    "end": "1828519"
  },
  {
    "text": "going to call a rer uh so uh so here uh this is rer and it's going",
    "start": "1828519",
    "end": "1834679"
  },
  {
    "text": "to feed it uh the binary so the binary is in this local directory it's called Target because I have no imagination and",
    "start": "1834679",
    "end": "1841880"
  },
  {
    "text": "then here we're going to pass this Das Das chain XXV",
    "start": "1841880",
    "end": "1847600"
  },
  {
    "text": "um this is is supported by rer supported this doing an",
    "start": "1847600",
    "end": "1853440"
  },
  {
    "text": "xve uh R chain is basically supported by all of the tools tools that do uh to do",
    "start": "1853440",
    "end": "1860200"
  },
  {
    "text": "this uh they just do the XXV itself not the open and close thing that we did um",
    "start": "1860200",
    "end": "1865399"
  },
  {
    "text": "and that's just because it's traditional right so it's like it's tradition you have to do it it's like sort of like",
    "start": "1865399",
    "end": "1870880"
  },
  {
    "text": "hello world for exploitation okay that that is basically",
    "start": "1870880",
    "end": "1876200"
  },
  {
    "text": "what the XXV thing is H then we can also pass and that's very convenient here uh we can pass uh bad bites so these are",
    "start": "1876200",
    "end": "1884000"
  },
  {
    "text": "bites that we don't want in a r chain so here's h Terminator uh is this a I think this",
    "start": "1884000",
    "end": "1890799"
  },
  {
    "text": "might be a vertical tab I don't remember this might be a tab I don't remember",
    "start": "1890799",
    "end": "1896279"
  },
  {
    "text": "different different asky characters that see in apparently things are a signal for I'm done um uh and we don't want it",
    "start": "1896279",
    "end": "1904039"
  },
  {
    "text": "to be done because we got we got a whole exploit we want to get in there um so we",
    "start": "1904039",
    "end": "1909080"
  },
  {
    "text": "don't want to have our little bad bites or we're going to get clipped uh so uh when you run it on the",
    "start": "1909080",
    "end": "1915799"
  },
  {
    "text": "binary uh it will in this case I've run it before but it will usually take a little bit of time it will parse the",
    "start": "1915799",
    "end": "1922120"
  },
  {
    "text": "entire binary trying to find these uh gadgets and um and then it will also",
    "start": "1922120",
    "end": "1929880"
  },
  {
    "text": "then uh generate uh a rock chain um and I will",
    "start": "1929880",
    "end": "1938039"
  },
  {
    "text": "um I will show you it in a second right so it it it tries to do different things",
    "start": "1938039",
    "end": "1944159"
  },
  {
    "text": "sometimes if it struggles to find a gadget it will try different Alternatives but um it needs to find",
    "start": "1944159",
    "end": "1952679"
  },
  {
    "text": "gadgets enough to be able to do XX basically and so here it says looking for CIS call Gadget CIS call Gadget",
    "start": "1952679",
    "end": "1960320"
  },
  {
    "text": "found generating rchain all right uh so uh if we look at",
    "start": "1960320",
    "end": "1966960"
  },
  {
    "text": "what it prints because now it's going to print it right there in the terminal and it prints uh basically a python",
    "start": "1966960",
    "end": "1973600"
  },
  {
    "text": "script um it looks like this I I cut out the middle part uh one thing that I kind",
    "start": "1973600",
    "end": "1979960"
  },
  {
    "text": "of like about rupper is that it set all of the addresses are offsets from some",
    "start": "1979960",
    "end": "1985000"
  },
  {
    "text": "kind of uh image Base address which means that you can kind of support having the the the binary in different",
    "start": "1985000",
    "end": "1991919"
  },
  {
    "text": "places in the in the virtual address Bas um yeah and then the r chain goes here",
    "start": "1991919",
    "end": "1998200"
  },
  {
    "text": "in the pinky section here which we will look at uh now or yes so",
    "start": "1998200",
    "end": "2004000"
  },
  {
    "text": "yeah yeah so the r chain itself is is uh",
    "start": "2004000",
    "end": "2009200"
  },
  {
    "text": "not very long uh so I will try to kind of show you how we kind of reuse",
    "start": "2009200",
    "end": "2015279"
  },
  {
    "text": "different gadgets so here uh we have our first Gadget let's see if I can point uh",
    "start": "2015279",
    "end": "2022159"
  },
  {
    "text": "so it's at address uh in HEX 08f 797a and it's used here here and",
    "start": "2022159",
    "end": "2031120"
  },
  {
    "text": "here so it's used three times and it very helpfully gives you a comment here",
    "start": "2031120",
    "end": "2036320"
  },
  {
    "text": "saying what is is the instructions at this point and so it's a pop eax and Then followed by a",
    "start": "2036320",
    "end": "2042399"
  },
  {
    "text": "r uh right afterwards we have here in our string a little bit uh you know a",
    "start": "2042399",
    "end": "2048398"
  },
  {
    "text": "little section of a string SL SL bi which might s familiar especially when",
    "start": "2048399",
    "end": "2053960"
  },
  {
    "text": "you go down here and you see that it has an nsh so this is our string we have it the",
    "start": "2053960",
    "end": "2060720"
  },
  {
    "text": "the the the file name that we want to run it's embedded right into the rchain",
    "start": "2060720",
    "end": "2065878"
  },
  {
    "text": "and so this is this is a pop eax and followed by a r so when this executes uh",
    "start": "2065879",
    "end": "2072118"
  },
  {
    "text": "this thing will be popped and then we have a r and then we will go over here",
    "start": "2072119",
    "end": "2077158"
  },
  {
    "text": "you will see it later um this is our second Gadget third fourth fifth six",
    "start": "2077159",
    "end": "2083878"
  },
  {
    "text": "seventh and eth and we will look at them all right so uh these are all of our our",
    "start": "2083879",
    "end": "2093079"
  },
  {
    "text": "gadgets uh that were uh retrieved by Rober um and they do various bits and",
    "start": "2093079",
    "end": "2099240"
  },
  {
    "text": "pieces and we'll go through all of them uh uh as we go but these are the ones",
    "start": "2099240",
    "end": "2104880"
  },
  {
    "text": "that was uh that roer found for us all right so uh let's have a peek so",
    "start": "2104880",
    "end": "2113359"
  },
  {
    "text": "I'm going to let's go back so I'm going to show you kind of the various dat of various things so so we have the stack",
    "start": "2113359",
    "end": "2119320"
  },
  {
    "text": "over here uh these are the registers uh this is places in an executable memory",
    "start": "2119320",
    "end": "2128079"
  },
  {
    "text": "and uh this is some kind of memory we can write to somewhere uh and uh this is the",
    "start": "2128079",
    "end": "2135000"
  },
  {
    "text": "instruction pointer so the basic idea is that we have managed to do our buffer overflow",
    "start": "2135000",
    "end": "2141119"
  },
  {
    "text": "so we have uh our rchain on the stack here and um the the function we",
    "start": "2141119",
    "end": "2149440"
  },
  {
    "text": "did the Overflow in returned which uh the r instruction uh has just executed",
    "start": "2149440",
    "end": "2156359"
  },
  {
    "text": "and we are here right stack pointer is pointing here R is executing so that means that",
    "start": "2156359",
    "end": "2163480"
  },
  {
    "text": "this thing needs to be put into the instruction pointer and uh then execution jumps down",
    "start": "2163480",
    "end": "2170160"
  },
  {
    "text": "here to that location as you can see hopefully this is the same address",
    "start": "2170160",
    "end": "2175960"
  },
  {
    "text": "here and uh then we have over here on",
    "start": "2175960",
    "end": "2181960"
  },
  {
    "text": "the stack this is a pop eax and over here we have our SL slash bi",
    "start": "2181960",
    "end": "2187359"
  },
  {
    "text": "so that means we're going to pop it into E I have help helpfully here um translated the aski for you so but this",
    "start": "2187359",
    "end": "2195680"
  },
  {
    "text": "is this is a a 4 byte uh integer I guess we could call it in register um and then",
    "start": "2195680",
    "end": "2203920"
  },
  {
    "text": "the stack pointer moves down here we're going to get uh to our second",
    "start": "2203920",
    "end": "2210440"
  },
  {
    "text": "um second Gadget down here which is uh pop edx so it's going to take whatever's",
    "start": "2210440",
    "end": "2216040"
  },
  {
    "text": "on top of the St stack after this so that's this thing H and pop it into edx",
    "start": "2216040",
    "end": "2222160"
  },
  {
    "text": "and then do a r so that means that this wonderful address over here gets put",
    "start": "2222160",
    "end": "2227359"
  },
  {
    "text": "into edx and moves us down to uh this gadget",
    "start": "2227359",
    "end": "2233280"
  },
  {
    "text": "and uh this gadget is going to do a a write for us uh and so let's see if I can do do my",
    "start": "2233280",
    "end": "2242800"
  },
  {
    "text": "pointy thing let's see all right so here we have a um a move and basically it's",
    "start": "2242800",
    "end": "2248680"
  },
  {
    "text": "it says that I want to take whatever is an e and I want to write it to the location pointed to by edx and so uh",
    "start": "2248680",
    "end": "2257560"
  },
  {
    "text": "here in edx we have this address which is woohoo this first address here in our",
    "start": "2257560",
    "end": "2263240"
  },
  {
    "text": "WR uh in our uh writable memory and then it's going to take the value that is in eax and put it there and so we write SL",
    "start": "2263240",
    "end": "2273800"
  },
  {
    "text": "SLB all right I'm just going to keep keep the stuff that I want in between",
    "start": "2273800",
    "end": "2278960"
  },
  {
    "text": "executions to keep it easier all right so we have our second section uh it's very similar to the previous one we're",
    "start": "2278960",
    "end": "2285720"
  },
  {
    "text": "going to put our little uh bit of uh text into e we're going to uh go to our",
    "start": "2285720",
    "end": "2292960"
  },
  {
    "text": "second here where we're going to write uh or want to pop the address we want to write to into edx and then we're finally",
    "start": "2292960",
    "end": "2299520"
  },
  {
    "text": "going to use that address in edx and the value in E uh to write uh here so now we",
    "start": "2299520",
    "end": "2307520"
  },
  {
    "text": "have SL bin slsh but we're still not n terminated so we got to do that too uh",
    "start": "2307520",
    "end": "2313880"
  },
  {
    "text": "because uh if not um it doesn't like us",
    "start": "2313880",
    "end": "2320000"
  },
  {
    "text": "anymore so here we do an exor of eax we um then take uh the address we",
    "start": "2320480",
    "end": "2329520"
  },
  {
    "text": "want to write to uh and put it in edx and we do our regular nice little Gadget",
    "start": "2329520",
    "end": "2336319"
  },
  {
    "text": "that takes the value in E and writes it to the pointer that is in edx and so we",
    "start": "2336319",
    "end": "2343960"
  },
  {
    "text": "have our string excellent all right now we have our",
    "start": "2343960",
    "end": "2350000"
  },
  {
    "text": "string in memory uh so uh you know that was the hard part so then we do our additional uh",
    "start": "2350000",
    "end": "2357440"
  },
  {
    "text": "little gadgets uh so the first one is uh here we're going to pop a value into ebx",
    "start": "2357440",
    "end": "2364640"
  },
  {
    "text": "which is uh an address and if you check out the address woohoo",
    "start": "2364640",
    "end": "2370319"
  },
  {
    "text": "this address is this address so this is the address of the beginning of our string which it means this is a pointer",
    "start": "2370319",
    "end": "2376440"
  },
  {
    "text": "to our string and then we go and do the next one and",
    "start": "2376440",
    "end": "2381720"
  },
  {
    "text": "we uh pop into ECX uh and here we are putting um the address of this thing",
    "start": "2381720",
    "end": "2391280"
  },
  {
    "text": "which means here we're actually putting a pointer to null and and then we're doing that again",
    "start": "2391280",
    "end": "2397839"
  },
  {
    "text": "so we're putting that also in edx and then we're going to try to put",
    "start": "2397839",
    "end": "2404880"
  },
  {
    "text": "um we're going to try to put the the uh CIS call number and eax right uh",
    "start": "2404880",
    "end": "2411440"
  },
  {
    "text": "unfortunately the CIS call number is is uh a little bit fiddly for us uh on",
    "start": "2411440",
    "end": "2417640"
  },
  {
    "text": "32bit so what we're going we're going to use a little bit of a trick gosh did it stop",
    "start": "2417640",
    "end": "2423800"
  },
  {
    "text": "working there we go um um so what we did here is uh let's see if I can go back",
    "start": "2423800",
    "end": "2430200"
  },
  {
    "text": "again my clicky stops working so we're going to put uh Zer",
    "start": "2430200",
    "end": "2436480"
  },
  {
    "text": "F5 uh instead in eax and then we're going to use a little uh other Gadget to",
    "start": "2436480",
    "end": "2443319"
  },
  {
    "text": "negate that uh so we're negating ea uh",
    "start": "2443319",
    "end": "2448599"
  },
  {
    "text": "eax and that gives us z b now the the reason why we needed to do this is",
    "start": "2448599",
    "end": "2454200"
  },
  {
    "text": "because z b was one of our bad bites so we couldn't actually have zero B uh so",
    "start": "2454200",
    "end": "2460240"
  },
  {
    "text": "so we instead uh wrote in our R chain the negation of the thing that we wanted",
    "start": "2460240",
    "end": "2466119"
  },
  {
    "text": "to do and uh used a gadget to negate it back all right so now we're here so we",
    "start": "2466119",
    "end": "2473920"
  },
  {
    "text": "have filled our registers uh we have our string in memory uh we are on our final",
    "start": "2473920",
    "end": "2480240"
  },
  {
    "text": "Gadget which is here which is the int 80 to do the CIS call",
    "start": "2480240",
    "end": "2487520"
  },
  {
    "text": "and poof right so this is what ropper generated for us this rockchain but yeah",
    "start": "2487520",
    "end": "2496200"
  },
  {
    "text": "so we filled the CIS number in eax uh in ebx we have the pointer to the the",
    "start": "2496200",
    "end": "2501359"
  },
  {
    "text": "program we want to run uh and then in ECX and in edx we put a pointer to null",
    "start": "2501359",
    "end": "2509280"
  },
  {
    "text": "for arv and and P but um this this wasn't exactly what",
    "start": "2509280",
    "end": "2517119"
  },
  {
    "text": "we wanted right we wanted to do a close then we wanted to do an open then we wanted to do the xve and currently we",
    "start": "2517119",
    "end": "2523079"
  },
  {
    "text": "only have the xve so it's not exactly what we want um so then that's what brings us to",
    "start": "2523079",
    "end": "2529640"
  },
  {
    "text": "the semi artisanal part all right so we need to find uh some gadgets and the",
    "start": "2529640",
    "end": "2536040"
  },
  {
    "text": "reason for that is we don't have all of the things that we need we can reuse some of the stuff that we have but we",
    "start": "2536040",
    "end": "2542079"
  },
  {
    "text": "need some new stuff uh so uh we can use uh a few",
    "start": "2542079",
    "end": "2547960"
  },
  {
    "text": "things here for close right so for close uh we need to put the CIS ciscle number",
    "start": "2547960",
    "end": "2553280"
  },
  {
    "text": "and eax and then we have to put uh the the file descriptor in ebx uh which is",
    "start": "2553280",
    "end": "2559800"
  },
  {
    "text": "just zero um and uh we can kind of use the stuff",
    "start": "2559800",
    "end": "2565880"
  },
  {
    "text": "that we had before so we have the do I have highlighting here uh yeah so let's",
    "start": "2565880",
    "end": "2572200"
  },
  {
    "text": "see if I can point up here we have uh pop e and we already had a gadget for",
    "start": "2572200",
    "end": "2577559"
  },
  {
    "text": "that we have the negation of e which we can use and we have the the uh int 80 which we can use we do not however have",
    "start": "2577559",
    "end": "2585240"
  },
  {
    "text": "a gadget for xor ebx so zeroing out ebx we don't have a gadget for but for the",
    "start": "2585240",
    "end": "2591440"
  },
  {
    "text": "other ones we can use the stuff that we had already and for open most of them we have them because",
    "start": "2591440",
    "end": "2599200"
  },
  {
    "text": "they are similar to what we needed for for XXV so so most of the stuff that was generated by ropper we can actually just",
    "start": "2599200",
    "end": "2606559"
  },
  {
    "text": "reuse uh for open uh the only thing that we miss for open is zeroing out ECX and",
    "start": "2606559",
    "end": "2613839"
  },
  {
    "text": "edx all right uh so yeah and of course we have all of the gadget for xve because that's what roer did for us so",
    "start": "2613839",
    "end": "2620720"
  },
  {
    "text": "we have all of those all right so we're missing three gadgets uh zeroing out three uh",
    "start": "2620720",
    "end": "2628640"
  },
  {
    "text": "registers and and we don't have them currently which brings us to another feature of basically all of these tools",
    "start": "2628640",
    "end": "2635640"
  },
  {
    "text": "is that you can ask for the thing that you want H so given this binary and given",
    "start": "2635640",
    "end": "2642400"
  },
  {
    "text": "this instruction can you please find me a gadget uh so in this case we're going to ask you know raer hey you know given",
    "start": "2642400",
    "end": "2649480"
  },
  {
    "text": "this binary can you please find me an xer of ebx please and it will find a bunch usually",
    "start": "2649480",
    "end": "2656640"
  },
  {
    "text": "many different ones that have a little bit of different properties I'm not going to go through I'm going to focus on everything that ends with a r there",
    "start": "2656640",
    "end": "2662920"
  },
  {
    "text": "are uh in the advanced let's say the Advanced R thing we will talk more about",
    "start": "2662920",
    "end": "2668760"
  },
  {
    "text": "uh assembly but I try to keep the assembly simple and so here we have an",
    "start": "2668760",
    "end": "2674040"
  },
  {
    "text": "actual exor of evx followed by Rett which is exactly what we want it has like a little address over here so this",
    "start": "2674040",
    "end": "2681200"
  },
  {
    "text": "is now this isn't our offset address so we will have to like subtract the image",
    "start": "2681200",
    "end": "2687440"
  },
  {
    "text": "uh base from it to get our wonderful offsets but otherwise it's perfect so yeah so here are we can",
    "start": "2687440",
    "end": "2695240"
  },
  {
    "text": "search for each one of the missing uh gadgets and then we uh these are our absolute addresses and then we can",
    "start": "2695240",
    "end": "2701800"
  },
  {
    "text": "subtract uh the image based address to get our relative offsets and wonderful all right",
    "start": "2701800",
    "end": "2710960"
  },
  {
    "text": "so see I hope okay are you sleeping no okay good all",
    "start": "2710960",
    "end": "2716760"
  },
  {
    "text": "right just paying really close attention Okay good um and so we want to test it okay",
    "start": "2716760",
    "end": "2726440"
  },
  {
    "text": "uh so uh let's have a peek uh we're going to take uh take our script which",
    "start": "2726440",
    "end": "2732119"
  },
  {
    "text": "we put all of our our this is the python code to create our exploit string and we",
    "start": "2732119",
    "end": "2738400"
  },
  {
    "text": "going to write it to a file here called uh rchain file so this is the the the actual exploit string and here you can",
    "start": "2738400",
    "end": "2745680"
  },
  {
    "text": "see uh it has a bunch of of uh Zer like hex 90s which is the padding uh and then",
    "start": "2745680",
    "end": "2753800"
  },
  {
    "text": "uh this is all of the addresses that we have and then in between here you can find",
    "start": "2753800",
    "end": "2758920"
  },
  {
    "text": "the strings and this is using xxd so you can see the strings kind of here in the margin so you have like /dev TTY bin",
    "start": "2758920",
    "end": "2768800"
  },
  {
    "text": "slsh and so you can have a peak and I I I often do this because I often have issues with the bad bites and things",
    "start": "2768800",
    "end": "2775400"
  },
  {
    "text": "breaking in so then I want to go and see what it looks like um yeah so this is the string this",
    "start": "2775400",
    "end": "2781839"
  },
  {
    "text": "is what we worked so hard to get so we started off with C code and now we have",
    "start": "2781839",
    "end": "2787160"
  },
  {
    "text": "this you know it's beautiful um so all right so now we're going to want",
    "start": "2787160",
    "end": "2792800"
  },
  {
    "text": "to feed this to our our wonderful War Games application and and uh and hopefully uh get",
    "start": "2792800",
    "end": "2800839"
  },
  {
    "text": "show so uh we will do this in GDB because you know when you do exploit",
    "start": "2800839",
    "end": "2807280"
  },
  {
    "text": "development basically most of the time you're crashing uh",
    "start": "2807280",
    "end": "2812680"
  },
  {
    "text": "so uh so it's nice to have uh some some kind of environment that can help you uh",
    "start": "2812680",
    "end": "2817839"
  },
  {
    "text": "kind of um debug that if people like if any of you are like the best part of my",
    "start": "2817839",
    "end": "2823880"
  },
  {
    "text": "day is sitting in GDB like all day and just like looking at registers and peeking at the stock and trying to",
    "start": "2823880",
    "end": "2829720"
  },
  {
    "text": "figure out what goes wrong and whatever if that is your gam exploit development is for you all right it's",
    "start": "2829720",
    "end": "2837119"
  },
  {
    "text": "perfect if not H not so much um okay so we're going to take here and we're going",
    "start": "2837119",
    "end": "2842280"
  },
  {
    "text": "to say uh I'm going to feed uh so I'm going to start my my target binary in GDB and then I'm going to feed it uh",
    "start": "2842280",
    "end": "2848319"
  },
  {
    "text": "this rchain file which has so this means I want you to I want you to treat this",
    "start": "2848319",
    "end": "2854960"
  },
  {
    "text": "as as a standard in right so whenever you start reading from standard in I want you to read from this file",
    "start": "2854960",
    "end": "2862440"
  },
  {
    "text": "instead and so uh so GDB starts it it prints the code which is war games Miss",
    "start": "2862440",
    "end": "2869400"
  },
  {
    "text": "missile launcher version 0.1 uh it says access granted because we",
    "start": "2869400",
    "end": "2874559"
  },
  {
    "text": "are in undefined Behavior territory it launches I I I'm not exactly sure what a",
    "start": "2874559",
    "end": "2882599"
  },
  {
    "text": "negative number of missiles are but you know maybe it's a good thing and um it",
    "start": "2882599",
    "end": "2888440"
  },
  {
    "text": "also says access denied as well because you know Bulls are also out the window the moment you're smashing your stack",
    "start": "2888440",
    "end": "2895920"
  },
  {
    "text": "and and then we get from GDB it tells us uh that our process is executing a new",
    "start": "2895920",
    "end": "2901800"
  },
  {
    "text": "program and the new program is user uh user bin slh which on my Ubuntu machines",
    "start": "2901800",
    "end": "2909280"
  },
  {
    "text": "is what /bin/sh is a Sim link to uh",
    "start": "2909280",
    "end": "2915440"
  },
  {
    "text": "and it does uh print some stuff and then we get a shell print woohoo",
    "start": "2915440",
    "end": "2923960"
  },
  {
    "text": "yay see we got shell thank",
    "start": "2923960",
    "end": "2929280"
  },
  {
    "text": "you",
    "start": "2934599",
    "end": "2937599"
  },
  {
    "text": "so this um if this was your gym or if this wasn't your gem I'm sorry not so",
    "start": "2939720",
    "end": "2948240"
  },
  {
    "text": "much though but you now it's like you can live your life never having to do it again um uh but if this was your jam uh",
    "start": "2948240",
    "end": "2956119"
  },
  {
    "text": "I I do a tuna training at NC Security uh in January 8th and 9th and I also do it for",
    "start": "2956119",
    "end": "2961680"
  },
  {
    "text": "customers and so please come it's I I this is my favorite thing to teach",
    "start": "2961680",
    "end": "2966880"
  },
  {
    "text": "because we get to Break Stuff uh on day one we not only find heart bleed by",
    "start": "2966880",
    "end": "2972799"
  },
  {
    "text": "using two different fuzzers you also have to fix heart bed and that means you have to look at open SSL code which is",
    "start": "2972799",
    "end": "2979599"
  },
  {
    "text": "always fun and so that brings us to our final slide",
    "start": "2979599",
    "end": "2984839"
  },
  {
    "text": "uh but uh but people are free to leave as well so I'll just do a thank you and then people can ask questions after so",
    "start": "2984839",
    "end": "2990319"
  },
  {
    "text": "thank you",
    "start": "2990319",
    "end": "2996920"
  },
  {
    "text": "and feel free to go if you want uh so any questions there's here in",
    "start": "2996920",
    "end": "3002760"
  },
  {
    "text": "front does it work on Windows okay so so um does it work on",
    "start": "3002760",
    "end": "3008680"
  },
  {
    "text": "Windows uh this specific program is a Linux program so so no but but yes but",
    "start": "3008680",
    "end": "3013720"
  },
  {
    "text": "uh return oriented programming uh Works in various contexts today it's used in",
    "start": "3013720",
    "end": "3018960"
  },
  {
    "text": "many different context on Windows you have a a a feature that kind of tried to",
    "start": "3018960",
    "end": "3024680"
  },
  {
    "text": "to get to this is something called a control flow graph the idea in control flow graph is basically um because",
    "start": "3024680",
    "end": "3033240"
  },
  {
    "text": "currently we're just jumping around in executable memory right uh and and uh",
    "start": "3033240",
    "end": "3038559"
  },
  {
    "text": "the idea for control photograph is during compilation the compiler can actually see what are valid places to",
    "start": "3038559",
    "end": "3044880"
  },
  {
    "text": "jump to and record all of these addresses in a table and then when you try to do a jump it will actually check",
    "start": "3044880",
    "end": "3051920"
  },
  {
    "text": "against the table to make sure that this is a valid jump Target and and if it isn't it can terminate your process for",
    "start": "3051920",
    "end": "3057920"
  },
  {
    "text": "example um okay so first of all a lot of applications don't use it so you're fine",
    "start": "3057920",
    "end": "3064040"
  },
  {
    "text": "um second of all of course somebody because R was kind of created as a as a",
    "start": "3064040",
    "end": "3070119"
  },
  {
    "text": "response to the stack not being executable and so of course there was a response to control flow graph and",
    "start": "3070119",
    "end": "3075839"
  },
  {
    "text": "similar tools from other platforms H and so somebody uh created something called block oriented",
    "start": "3075839",
    "end": "3082079"
  },
  {
    "text": "programming where they take the control flow graph table uh then create a graph",
    "start": "3082079",
    "end": "3087760"
  },
  {
    "text": "over those uh find a path through that graph uh where you manage to fill in all",
    "start": "3087760",
    "end": "3093599"
  },
  {
    "text": "of your registers uh without like clobbering them in the intermediate steps and uh it's it's more fiddly maybe",
    "start": "3093599",
    "end": "3102920"
  },
  {
    "text": "but uh it it has proven to work um uh",
    "start": "3102920",
    "end": "3107960"
  },
  {
    "text": "most of the people that I talked to that use r r is commonly used today uh many",
    "start": "3107960",
    "end": "3113000"
  },
  {
    "text": "different types of exploits uh not so so much on the stack usually you will usually put it somewhere else you might",
    "start": "3113000",
    "end": "3119400"
  },
  {
    "text": "have it on the Heap uh then you have to do something that's often called a um",
    "start": "3119400",
    "end": "3125240"
  },
  {
    "text": "stack pivot Gadget you need to have execution jump in uh or the stack",
    "start": "3125240",
    "end": "3130440"
  },
  {
    "text": "pointer Point into to uh to the Heap and then you can have your R chain on the Heap uh people use it for all sorts of",
    "start": "3130440",
    "end": "3137680"
  },
  {
    "text": "things from hacking everything from boot loaders Cardinals whatever",
    "start": "3137680",
    "end": "3144119"
  },
  {
    "text": "um okay I forgot where I was but yeah does that answer your question yeah okay",
    "start": "3144119",
    "end": "3149720"
  },
  {
    "text": "anybody else no question one more question come",
    "start": "3149720",
    "end": "3155079"
  },
  {
    "text": "on yeah yes yeah so yes so so in the same way",
    "start": "3155079",
    "end": "3162760"
  },
  {
    "text": "that I I the thing that was so much fun about",
    "start": "3162760",
    "end": "3168119"
  },
  {
    "text": "stock buffer overflows is that it was so easy uh it so I I didn't show you here",
    "start": "3168119",
    "end": "3174200"
  },
  {
    "text": "I've shown it before in previous talk so you can Google it uh but but you had the kind of beautifulness of having the the",
    "start": "3174200",
    "end": "3181520"
  },
  {
    "text": "exploit in the same string as you got your code execution it would jump into",
    "start": "3181520",
    "end": "3187160"
  },
  {
    "text": "the same thing it was beautiful um unfortunately uh you know it was so",
    "start": "3187160",
    "end": "3193280"
  },
  {
    "text": "beautiful it worked everywhere uh it was you know everyone started working on it there was lots of mitigations introduced",
    "start": "3193280",
    "end": "3200280"
  },
  {
    "text": "all over the place uh one of them is a stary uh so a stary is the idea that",
    "start": "3200280",
    "end": "3206280"
  },
  {
    "text": "between the buffer and the return address uh we're going to put some kind of magic cookie string whatever thing",
    "start": "3206280",
    "end": "3214280"
  },
  {
    "text": "and before we do the r we're going to check that it's still intact so so we",
    "start": "3214280",
    "end": "3219400"
  },
  {
    "text": "will inject some code that will check that the stacking area is still intact and if it isn't uh then then we will",
    "start": "3219400",
    "end": "3226559"
  },
  {
    "text": "just abort um and and many compilers implemented this in various uh various",
    "start": "3226559",
    "end": "3232880"
  },
  {
    "text": "ways some of them had the f fantastic idea of hard coding the thing that goes",
    "start": "3232880",
    "end": "3238680"
  },
  {
    "text": "there uh so didn't go so well uh some people just put like zero uh some",
    "start": "3238680",
    "end": "3245760"
  },
  {
    "text": "compilers had bugs so they didn't put it in when they should have put it in uh and a lot of applications just turned it",
    "start": "3245760",
    "end": "3251520"
  },
  {
    "text": "off because apparently they had stuck buffer overflows like randomly that usually went",
    "start": "3251520",
    "end": "3257599"
  },
  {
    "text": "okay so um for whatever reasons uh it",
    "start": "3257599",
    "end": "3262680"
  },
  {
    "text": "was like variable uh what really kind of kicked this whole kind of technique out",
    "start": "3262680",
    "end": "3267920"
  },
  {
    "text": "was making uh making the stack not executable one thing that people did do",
    "start": "3267920",
    "end": "3273280"
  },
  {
    "text": "is as they did combine these techniques they used a r uh R chain to make the",
    "start": "3273280",
    "end": "3278400"
  },
  {
    "text": "stack uh executable which you can do in various operating systems by remapping the stack and then you could still do",
    "start": "3278400",
    "end": "3285240"
  },
  {
    "text": "your exploits uh on the in on the stack so that was good um uh you can imagine this is what I",
    "start": "3285240",
    "end": "3292720"
  },
  {
    "text": "this is what I do for fun um rich return next year and we will do code execution from printf",
    "start": "3292720",
    "end": "3299640"
  },
  {
    "text": "um uh yeah does that kind of yeah so and and also you had like um you had address",
    "start": "3299640",
    "end": "3305000"
  },
  {
    "text": "based layout randomization which was also a way of trying to make this more difficult because previously you could",
    "start": "3305000",
    "end": "3310400"
  },
  {
    "text": "hardcode your addresses because everything kind of had a tendency to land in the same locations so it was",
    "start": "3310400",
    "end": "3317000"
  },
  {
    "text": "deterministics between runs and different machines and so it was much easier um but yeah now uh",
    "start": "3317000",
    "end": "3326200"
  },
  {
    "text": "it uh there's there's lots of mitigations usually uh there are ways to get around them um and that's kind of",
    "start": "3326200",
    "end": "3332760"
  },
  {
    "text": "like the game you know",
    "start": "3332760",
    "end": "3338240"
  },
  {
    "text": "yes so so address whoa sorry address based L randomization is it common H",
    "start": "3345240",
    "end": "3351079"
  },
  {
    "text": "today I think almost all operating systems that are modern have some some form of address based layout",
    "start": "3351079",
    "end": "3356640"
  },
  {
    "text": "randomization it basically means we're going to do some to some degree uh put things in in",
    "start": "3356640",
    "end": "3364280"
  },
  {
    "text": "random places in virtual memory it's not as random as you'd like and depending on",
    "start": "3364280",
    "end": "3370200"
  },
  {
    "text": "the platform I think Windows has a tendency to say that it's random when you boot up your machine where I put",
    "start": "3370200",
    "end": "3375400"
  },
  {
    "text": "this library but after I put it someplace that's where it's going to stay so so because I I am going to keep",
    "start": "3375400",
    "end": "3382760"
  },
  {
    "text": "it there for all of the binaries running on this machine because it is very uh convenient for Windows I guess um but it",
    "start": "3382760",
    "end": "3389839"
  },
  {
    "text": "it depends but it did mean that it became a little bit more difficult to write exploits because you couldn't",
    "start": "3389839",
    "end": "3395039"
  },
  {
    "text": "hardcode your addresses anymore uh which means today you will usually have two stages to your exploits uh the first",
    "start": "3395039",
    "end": "3401960"
  },
  {
    "text": "part is what is called an information leak where you are leaking addresses and then you can kind of figure out what the",
    "start": "3401960",
    "end": "3407640"
  },
  {
    "text": "address base looks like and then you do your calculation of your addresses and then you go so so it did make it more",
    "start": "3407640",
    "end": "3414319"
  },
  {
    "text": "difficult you usually now have to have at least two vulnerabilities to do to do these",
    "start": "3414319",
    "end": "3419440"
  },
  {
    "text": "things um any more questions all right then we're done",
    "start": "3419440",
    "end": "3424960"
  },
  {
    "text": "go",
    "start": "3424960",
    "end": "3427960"
  }
]