[
  {
    "start": "0",
    "end": "72000"
  },
  {
    "text": "how's your conference been it's great to all be together doing this face-to-face right",
    "start": "5120",
    "end": "11519"
  },
  {
    "text": "instead of talking to a webcam for an hour and then disconnecting and returning to work so",
    "start": "11519",
    "end": "17279"
  },
  {
    "text": "my name is hannes and i'm from belgium and today i want to talk to you about doing ddd and cqrs based systems using",
    "start": "17279",
    "end": "25519"
  },
  {
    "text": "akka.net so what's on the see clicker doesn't work yeah it's there",
    "start": "25519",
    "end": "32238"
  },
  {
    "text": "so what's on the agenda for today um i'm first gonna describe a little bit what we're building um because you always",
    "start": "32239",
    "end": "39200"
  },
  {
    "text": "wanna have a problem domain when you're giving a talk then i'm going to discuss the general",
    "start": "39200",
    "end": "44239"
  },
  {
    "text": "design ideas that i want to achieve and i'm going to explain why i would want to use aka.net to do this and then",
    "start": "44239",
    "end": "51760"
  },
  {
    "text": "i'm going to dive into bits and pieces of the codes and features of aca.net which make it",
    "start": "51760",
    "end": "57680"
  },
  {
    "text": "very suitable to uh to do this and then if i have time we're going to wrap things up",
    "start": "57680",
    "end": "64080"
  },
  {
    "text": "so what are we building we're building beer sender.net why are we building beer",
    "start": "64080",
    "end": "69520"
  },
  {
    "text": "center.net i had a particular set of problems it was january 2022",
    "start": "69520",
    "end": "76080"
  },
  {
    "start": "72000",
    "end": "72000"
  },
  {
    "text": "and the whole world was on lockdown and i was very bored and i wanted to do something",
    "start": "76080",
    "end": "82320"
  },
  {
    "text": "and then i had an idea i live in belgium so we have great beers",
    "start": "82320",
    "end": "89360"
  },
  {
    "text": "how about i put some of those beers in a box and i ship them to some of my friends",
    "start": "89360",
    "end": "96320"
  },
  {
    "text": "so that everybody will be happy so that was my plan",
    "start": "96320",
    "end": "102240"
  },
  {
    "text": "so i went to the store and this was the fun part i mean we have lots of local beers in belgium so i selected the best",
    "start": "102240",
    "end": "109439"
  },
  {
    "text": "beers from my region i mixed them with some of the belgian like all-time classics",
    "start": "109439",
    "end": "115520"
  },
  {
    "text": "um so i had a very nice selection of 24 beers i put them in really nice boxes",
    "start": "115520",
    "end": "120560"
  },
  {
    "text": "that allowed me to ship them safely i packaged them up i put shipping labels on it and i thought this was fun my job",
    "start": "120560",
    "end": "127600"
  },
  {
    "text": "is done right and the expectation of my story was that all the boxes would leave in belgium and",
    "start": "127600",
    "end": "134480"
  },
  {
    "text": "this would happen right well no because the reality was that i gave",
    "start": "134480",
    "end": "141840"
  },
  {
    "start": "139000",
    "end": "139000"
  },
  {
    "text": "these boxes to ups but some of the boxes would be leaving the european union and i didn't really expect what was going to",
    "start": "141840",
    "end": "148239"
  },
  {
    "text": "happen so what happened was nah sir you don't have a license to send",
    "start": "148239",
    "end": "154000"
  },
  {
    "text": "beer we're gonna return these boxes to you so what happened",
    "start": "154000",
    "end": "159360"
  },
  {
    "text": "was that i had to track all these packages see where they were they were coming back to me i had to provide extra",
    "start": "159360",
    "end": "165840"
  },
  {
    "text": "info to customs that info wasn't accepted so i was emailing back and forth",
    "start": "165840",
    "end": "171280"
  },
  {
    "text": "dealing with the ups help desk is like a whole different kind of hell and then the packages were returned to",
    "start": "171280",
    "end": "177680"
  },
  {
    "text": "me i had to recuperate the shipping costs send them again then there was one package in the uk that was not delivered",
    "start": "177680",
    "end": "184720"
  },
  {
    "text": "and they didn't even make a delivery attempt but they returned it to me anyway so i had to recuperate that money",
    "start": "184720",
    "end": "189920"
  },
  {
    "text": "again and then send it out again and they're almost all at their locations were end of april",
    "start": "189920",
    "end": "196560"
  },
  {
    "text": "so yeah this was no fun um so sending beer is tricky like making",
    "start": "196560",
    "end": "202800"
  },
  {
    "start": "198000",
    "end": "198000"
  },
  {
    "text": "and filling the boxes is really fun um but all of the rest of us not so much so we need a beer tracking system right",
    "start": "202800",
    "end": "209360"
  },
  {
    "text": "that's what we're building we need an app for that so we're building beerscenter.net and why do we call",
    "start": "209360",
    "end": "214640"
  },
  {
    "text": "it.net it is not built in vb6 we're using the net framework and so yeah why",
    "start": "214640",
    "end": "220560"
  },
  {
    "text": "do we still do that like append.net to application names i mean it's been more than two decades",
    "start": "220560",
    "end": "228319"
  },
  {
    "text": "and so yeah that was the preamble now",
    "start": "228319",
    "end": "234239"
  },
  {
    "text": "when i'm building software um i've been doing this for a while and i always wonder like what kind of",
    "start": "234239",
    "end": "240879"
  },
  {
    "text": "architecture do we want what do we want to achieve and this is one of the um",
    "start": "240879",
    "end": "246319"
  },
  {
    "start": "244000",
    "end": "244000"
  },
  {
    "text": "inspiring books that i've read throughout my career and",
    "start": "246319",
    "end": "251360"
  },
  {
    "text": "for those of you who are not familiar i'll try to summarize it in four sentences i'm probably not going to do",
    "start": "251360",
    "end": "256560"
  },
  {
    "text": "it justice but the whole idea of ddd is that you'll really try to align",
    "start": "256560",
    "end": "263040"
  },
  {
    "text": "the language that is being used in the business and the language that is being used by your team and your code",
    "start": "263040",
    "end": "268400"
  },
  {
    "text": "and you try to align that as much as as possible",
    "start": "268400",
    "end": "274639"
  },
  {
    "text": "and try to use one language a ubiquitous language in your business and on a high level",
    "start": "274639",
    "end": "281120"
  },
  {
    "text": "like a full enterprise systems level um approach",
    "start": "281120",
    "end": "286560"
  },
  {
    "text": "you're gonna look where the bounded context the boundaries in your systems your services if you will",
    "start": "286560",
    "end": "293759"
  },
  {
    "text": "where they can be it's like where one language starts existing and the other one stops",
    "start": "293759",
    "end": "300720"
  },
  {
    "text": "for instance in my shipment when i'm filling a box with beer and the",
    "start": "300720",
    "end": "306560"
  },
  {
    "text": "contents of the box are important i don't really have to know who i'm sending it to yet but when the same box",
    "start": "306560",
    "end": "312080"
  },
  {
    "text": "is being shipped there's different properties we mean different things by different statuses so you try to",
    "start": "312080",
    "end": "318759"
  },
  {
    "text": "compartmentalize that into different context but on a low level we try to make our code as expressive as possible",
    "start": "318759",
    "end": "325840"
  },
  {
    "text": "and we have different techniques for doing that and one of the roots for reasoning about",
    "start": "325840",
    "end": "331759"
  },
  {
    "text": "your code in ddd is called the aggregate like an aggregate is is a thing that",
    "start": "331759",
    "end": "337440"
  },
  {
    "text": "you're thinking about and where um events come from and where you're doing different manipulations and it's",
    "start": "337440",
    "end": "343600"
  },
  {
    "text": "basically um a unit of reasoning for that code",
    "start": "343600",
    "end": "348880"
  },
  {
    "text": "and when you translate all of this into code you can do it in many different ways i mean the original books were",
    "start": "348880",
    "end": "355039"
  },
  {
    "text": "written very much from an object oriented approach but in the ddd world people have",
    "start": "355039",
    "end": "361759"
  },
  {
    "text": "moved to do message based systems using commands and events and secures and",
    "start": "361759",
    "end": "367120"
  },
  {
    "text": "event sourcing and all that sort of stuff so when we're talking about commands and defense because this is something that",
    "start": "367120",
    "end": "373360"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "we will see in my beersender.net application and when we're talking about commands",
    "start": "373360",
    "end": "380240"
  },
  {
    "text": "today we are telling the system to do something it's a request to perform a",
    "start": "380240",
    "end": "385440"
  },
  {
    "text": "certain action and that request we are always going to put it in the imperative form send the",
    "start": "385440",
    "end": "391919"
  },
  {
    "text": "beer send the box update the tracking number an event is the opposite the event is",
    "start": "391919",
    "end": "398560"
  },
  {
    "text": "what comes after it after the action has succeeded or failed events will be raised so the events are in the past",
    "start": "398560",
    "end": "405039"
  },
  {
    "text": "tense the beer has been received my ultimate goal my friend has the beer and they're happy",
    "start": "405039",
    "end": "411039"
  },
  {
    "text": "and they owe me beer which is the best part and it communicates that the action has has",
    "start": "411039",
    "end": "417199"
  },
  {
    "text": "taken place right so once you have that it's like how am i going to put this into an architecture",
    "start": "417199",
    "end": "423440"
  },
  {
    "text": "that scales well and um one of the concepts that you it's not necessarily",
    "start": "423440",
    "end": "429360"
  },
  {
    "text": "necessary to do this for a ddd system but cqrs is used quite a bit",
    "start": "429360",
    "end": "434720"
  },
  {
    "text": "and the the reasoning about cqrs is you're gonna separate your command site",
    "start": "434720",
    "end": "440319"
  },
  {
    "text": "and your read site from your system so when you're sending commands into the system they will actually mutate the",
    "start": "440319",
    "end": "446960"
  },
  {
    "text": "data but when you query the system you're actually not changing anything and by",
    "start": "446960",
    "end": "452000"
  },
  {
    "text": "separating the two sides you'll be able to scale them independently use maybe different technology stacks on both",
    "start": "452000",
    "end": "458639"
  },
  {
    "text": "sides and get something that can really handle lots of requests",
    "start": "458639",
    "end": "463759"
  },
  {
    "text": "but for this to succeed you have to be able to send the command into the system and make sure that it never",
    "start": "463759",
    "end": "470080"
  },
  {
    "text": "fails it always has to succeed and it can it can change state and it can raise",
    "start": "470080",
    "end": "476000"
  },
  {
    "text": "events and the events that are triggered there and they're actually send over whatever",
    "start": "476000",
    "end": "483120"
  },
  {
    "text": "technology you choose to the read side of things and on the reach side these events are projected and they will",
    "start": "483120",
    "end": "490000"
  },
  {
    "text": "update your read storage and you can make that very very performant you can just use a relational database",
    "start": "490000",
    "end": "496639"
  },
  {
    "text": "but make sure that every query hits a single table on an index so it will be",
    "start": "496639",
    "end": "501759"
  },
  {
    "text": "snap fast every time that's like some of the things that you can optimize for",
    "start": "501759",
    "end": "507840"
  },
  {
    "text": "now that's cqrs and then the last concept that i just mentioned is event sourcing and",
    "start": "508000",
    "end": "513440"
  },
  {
    "text": "again you don't have to use it but it's really nice if you do because when you",
    "start": "513440",
    "end": "518959"
  },
  {
    "text": "save state in in like a classical object-oriented system with a with a relational database",
    "start": "518959",
    "end": "525519"
  },
  {
    "text": "you're saving the data as is like a normalized database has a state of your",
    "start": "525519",
    "end": "530800"
  },
  {
    "text": "system at the current moment but you're losing data like a classical",
    "start": "530800",
    "end": "536080"
  },
  {
    "text": "example is a shopping cart customer puts in product a",
    "start": "536080",
    "end": "541120"
  },
  {
    "text": "keeps processing the site looks at the suggestions sees product b it's like oh that's better i'm gonna put b and then",
    "start": "541120",
    "end": "546640"
  },
  {
    "text": "remove a your shopping cart contains b but the valuable info for your",
    "start": "546640",
    "end": "552800"
  },
  {
    "text": "recommendation engine for instance is that they first put in a and then removed it again right and that's what",
    "start": "552800",
    "end": "558640"
  },
  {
    "text": "event sourcing is all about we're not just going to store the resulting state",
    "start": "558640",
    "end": "564240"
  },
  {
    "text": "we could store all the events and then project the state from that and that is what event sourcing is",
    "start": "564240",
    "end": "570880"
  },
  {
    "text": "so if we put all that together what i want from my architecture is i would want to do cqrs with event sourcing",
    "start": "570880",
    "end": "578320"
  },
  {
    "start": "573000",
    "end": "573000"
  },
  {
    "text": "and i want to have really clean aggregates so code that is easy to use that",
    "start": "578320",
    "end": "583440"
  },
  {
    "text": "easy to read that everybody can take a look at and if at all possible i would want tests that my product owner can",
    "start": "583440",
    "end": "590160"
  },
  {
    "text": "understand because if we're going to use the same language between the business and the",
    "start": "590160",
    "end": "595440"
  },
  {
    "text": "programmers it would be so cool if we could write our tests together so that",
    "start": "595440",
    "end": "600480"
  },
  {
    "text": "they understand what the software is supposed to do and you can prove to them afterwards like i built what you ask",
    "start": "600480",
    "end": "606480"
  },
  {
    "text": "anybody ever had that discussion before yeah so you know why you want to prove that",
    "start": "606480",
    "end": "612399"
  },
  {
    "text": "you build what they ask right so when i was shopping around for",
    "start": "612399",
    "end": "617600"
  },
  {
    "text": "technologies um i wasn't really shopping around because i've been working with aka.net for a",
    "start": "617600",
    "end": "623040"
  },
  {
    "text": "long time um but akka.net for those of you who don't know is",
    "start": "623040",
    "end": "629760"
  },
  {
    "text": "a port of akka on the chavia aka is a product built by lightbend",
    "start": "629760",
    "end": "635760"
  },
  {
    "text": "often used together with scala and in 2014 two people independently",
    "start": "635760",
    "end": "641760"
  },
  {
    "text": "from each other started porting it to the net ecosystem and then they joined efforts",
    "start": "641760",
    "end": "647360"
  },
  {
    "text": "and in april 2015 we have gotten the first release version of academic",
    "start": "647360",
    "end": "653920"
  },
  {
    "text": "and they actually called it that with permission from lightbend so nothing new there but what we're doing",
    "start": "653920",
    "end": "661040"
  },
  {
    "text": "with one of these actor models is we're gonna model software after the way the",
    "start": "661040",
    "end": "666399"
  },
  {
    "text": "world works with objects that interact with each other there are messages being sent back and forth and you don't always",
    "start": "666399",
    "end": "673519"
  },
  {
    "text": "know the result of what's going to come it's not all going to be synchronous so it's message driven they're using",
    "start": "673519",
    "end": "680320"
  },
  {
    "text": "reactive patterns and it is very very highly concurrent you can really",
    "start": "680320",
    "end": "686160"
  },
  {
    "text": "make use of multi-core processors you can make use of clusters and you can basically",
    "start": "686160",
    "end": "692880"
  },
  {
    "text": "maximize your performance out of that it scales pretty linearly",
    "start": "692880",
    "end": "698240"
  },
  {
    "text": "it also has a lot of resiliency built into it but to me the fact that appealed most",
    "start": "698240",
    "end": "704800"
  },
  {
    "text": "when i was talking about this ddt cqrs system is that we're gonna model software",
    "start": "704800",
    "end": "710480"
  },
  {
    "text": "after the real world and in ddd we try to make our ubiquitous language between",
    "start": "710480",
    "end": "715680"
  },
  {
    "text": "the business and the programmer the same so it makes sense i mean there could be something there",
    "start": "715680",
    "end": "722160"
  },
  {
    "text": "so if we explore how akka.net works is the basic building block of any actor",
    "start": "722160",
    "end": "728959"
  },
  {
    "text": "system is an actor and it's a simple object you inherit from a certain class",
    "start": "728959",
    "end": "736320"
  },
  {
    "text": "and that object holds its own state and its own behaviors and the state and the behaviors are just",
    "start": "736320",
    "end": "742320"
  },
  {
    "text": "encapsulated you have no way of modifying it from the outside and the only way to talk to an actor is to send",
    "start": "742320",
    "end": "749200"
  },
  {
    "text": "it messages and the messages go into an inbox and they are processed one by one in order",
    "start": "749200",
    "end": "755680"
  },
  {
    "text": "and that's important because the one by one means that there's always only a single",
    "start": "755680",
    "end": "762560"
  },
  {
    "text": "threat running on your actor you don't have to deal with locks you don't have to deal with race",
    "start": "762560",
    "end": "768959"
  },
  {
    "text": "conditions when you're executing you're processing a message on an actor you",
    "start": "768959",
    "end": "774000"
  },
  {
    "text": "know that there's only gonna be one threat and that's really powerful because multitrading is hard anybody",
    "start": "774000",
    "end": "781040"
  },
  {
    "text": "ever tried to manage their own threat pool no you probably committed suicide so",
    "start": "781040",
    "end": "786639"
  },
  {
    "text": "you're not here right now so the guaranteed single threaded thing",
    "start": "786639",
    "end": "793120"
  },
  {
    "text": "is is really powerful now the simplest actor that we can write looks something like this we inherit",
    "start": "793120",
    "end": "799839"
  },
  {
    "start": "796000",
    "end": "796000"
  },
  {
    "text": "from untyped actor and we implement the unreceived methods and the unreceived method is what is called whenever a",
    "start": "799839",
    "end": "806399"
  },
  {
    "text": "message comes in from the inbox the whole system around it will dispatch it on a thread on your object and then",
    "start": "806399",
    "end": "814079"
  },
  {
    "text": "you can check what type it is and do something with it um so",
    "start": "814079",
    "end": "819120"
  },
  {
    "text": "it's not really that hard to understand and every programmer will everybody who has seen.net before will actually get",
    "start": "819120",
    "end": "825040"
  },
  {
    "text": "that now the messages are even simpler you don't have to have to inherit anything you can use any uh plain old clr object",
    "start": "825040",
    "end": "832720"
  },
  {
    "text": "to um to use it as a message right now what you have to keep into account",
    "start": "832720",
    "end": "838959"
  },
  {
    "text": "is um you can basically violate this um no race conditions thing",
    "start": "838959",
    "end": "846000"
  },
  {
    "text": "by changing a message while it's being processed by the actor now don't do that i mean you're not going to have fun",
    "start": "846000",
    "end": "852880"
  },
  {
    "text": "and you have to keep into account if you're running in in a cluster that your message might cross machine boundaries",
    "start": "852880",
    "end": "858480"
  },
  {
    "text": "so it might be serialized and deserialized um now the true boots that the people",
    "start": "858480",
    "end": "864320"
  },
  {
    "text": "from aka.net claim is that they can get 50 million messages processed a second on a single server",
    "start": "864320",
    "end": "872560"
  },
  {
    "text": "um my laptop gets with the previous version of aka.net it got like three and",
    "start": "872560",
    "end": "879040"
  },
  {
    "text": "a half million messages a second because they improved performance quite a bit every release",
    "start": "879040",
    "end": "884399"
  },
  {
    "text": "like three and a half million on a four-year-old xps i'm pretty sure that i'm a decent server the claim numbers",
    "start": "884399",
    "end": "890079"
  },
  {
    "text": "will be in the right order of magnitude right so we've got actors we've got messages",
    "start": "890079",
    "end": "896399"
  },
  {
    "text": "nothing really hard but we need something to tie it all together and this was the metallica album that i grew",
    "start": "896399",
    "end": "902399"
  },
  {
    "start": "900000",
    "end": "900000"
  },
  {
    "text": "up with i'm that old um now the actor system is your puppet master it does everything it manages",
    "start": "902399",
    "end": "909040"
  },
  {
    "text": "your tread pool it manages your inboxes it dispatches messages to the actual instances it creates the actors it",
    "start": "909040",
    "end": "916000"
  },
  {
    "text": "throws them away it's um it manages it manages a built-in event bus and so on",
    "start": "916000",
    "end": "922240"
  },
  {
    "text": "and so on it does all the heavy lifting for us so we have to write lots of code to have",
    "start": "922240",
    "end": "928959"
  },
  {
    "text": "one we do actor system.create and we give it a name and we have an actor system",
    "start": "928959",
    "end": "934720"
  },
  {
    "text": "so it's lots of work now the thing that you have to remember is that the actor system is responsible",
    "start": "934720",
    "end": "941920"
  },
  {
    "text": "for creating all your actor instances so we will never hold a reference to the",
    "start": "941920",
    "end": "948560"
  },
  {
    "text": "actor object so what you do is you do you use something called props",
    "start": "948560",
    "end": "954800"
  },
  {
    "text": "and the best way to describe props is a constructor pointer you tell the actor system how to",
    "start": "954800",
    "end": "961440"
  },
  {
    "text": "instantiate your actors which constructor to call which parameters to pass",
    "start": "961440",
    "end": "966560"
  },
  {
    "text": "now this is calling the default constructor without any parameters but it will create a my actor",
    "start": "966560",
    "end": "972560"
  },
  {
    "text": "and then i can do system dot actor off which will create that actor for me",
    "start": "972560",
    "end": "978079"
  },
  {
    "text": "and what i'm getting back is not the actual actor it's an i actor ref",
    "start": "978079",
    "end": "984079"
  },
  {
    "text": "and the iactref is a little object that allows me to talk to the actor i can use",
    "start": "984079",
    "end": "989759"
  },
  {
    "text": "mess i can use a dot tell and that will actually send it a message this will post this message into the inbox of the",
    "start": "989759",
    "end": "996560"
  },
  {
    "text": "actor right and the reason why we're not getting a reference to the actor is because the",
    "start": "996560",
    "end": "1002399"
  },
  {
    "text": "actor system might actually dispose of your actor and recreate it with the same",
    "start": "1002399",
    "end": "1008800"
  },
  {
    "text": "constructor and the same constructor parameters the system remembers the props that it was created with",
    "start": "1008800",
    "end": "1015759"
  },
  {
    "text": "and in the whole memory management side of things actors might get disposed",
    "start": "1015759",
    "end": "1021040"
  },
  {
    "text": "and recreated and so on but your actor ref will actually keep working so you talk to an actor of an actor that",
    "start": "1021040",
    "end": "1027678"
  },
  {
    "text": "has been paused and is no longer in memory the system will actually spin it back up and tell it to handle the",
    "start": "1027679",
    "end": "1033600"
  },
  {
    "text": "message so that's pretty cool and all these actors they live in a hierarchy um",
    "start": "1033600",
    "end": "1040079"
  },
  {
    "start": "1037000",
    "end": "1037000"
  },
  {
    "text": "actors can children can have children and their children can have children and so on and so on there's three actors",
    "start": "1040079",
    "end": "1045839"
  },
  {
    "text": "that are always there it's the root actor the system actor and the user actor and under the user actor is where you",
    "start": "1045839",
    "end": "1052720"
  },
  {
    "text": "are going to create yours all the actors that you're going to make they live under the user actor",
    "start": "1052720",
    "end": "1058720"
  },
  {
    "text": "so the actors that you create right under that we call those the top level actors and under that yeah your address",
    "start": "1058720",
    "end": "1064880"
  },
  {
    "text": "is defined by your position in the tree so the one on the bottom right is slash user slash a2 b3",
    "start": "1064880",
    "end": "1072240"
  },
  {
    "start": "1072000",
    "end": "1072000"
  },
  {
    "text": "now why is that hierarchy important it's because parents have responsibility over children get to that",
    "start": "1072240",
    "end": "1078240"
  },
  {
    "text": "in a second the way you create a child um oh there's something nice on this slide",
    "start": "1078240",
    "end": "1083919"
  },
  {
    "text": "we also have a strongly typed actor which will feel so much more comfortable to use if you're",
    "start": "1083919",
    "end": "1089440"
  },
  {
    "text": "coming from the network world that is the receive actor so instead of having an on receive that just takes in an",
    "start": "1089440",
    "end": "1096160"
  },
  {
    "text": "object we can register strongly typed handlers for certain types of messages that will come",
    "start": "1096160",
    "end": "1102640"
  },
  {
    "text": "in on this actor so you can call receive as many times as you want and you can have different handlers for all the",
    "start": "1102640",
    "end": "1108640"
  },
  {
    "text": "messages that are coming in and this is how you create a child instead of doing system.extract you do",
    "start": "1108640",
    "end": "1115559"
  },
  {
    "text": "context.actrof in the context of the actor that means i'm creating a child and i give my child a name now names",
    "start": "1115559",
    "end": "1122799"
  },
  {
    "text": "have to be unique so if you're creating lots of children from the same type underneath an actor which",
    "start": "1122799",
    "end": "1129760"
  },
  {
    "text": "is something you often do you have to make sure that they all have unique names so you're going to incorporate the id into the name of the",
    "start": "1129760",
    "end": "1137039"
  },
  {
    "text": "actor and then i was what i said is actors have responsibilities over their",
    "start": "1137039",
    "end": "1143919"
  },
  {
    "text": "children i have three children if i take them to the supermarket i am ultimately responsible",
    "start": "1143919",
    "end": "1150799"
  },
  {
    "text": "if they run their shopping cart into some old ladies ankles i'm going to be the one apologizing if they know knock",
    "start": "1150799",
    "end": "1157120"
  },
  {
    "text": "something over i'm going to be the one cleaning up that's how it works in the real world that that's how it works with",
    "start": "1157120",
    "end": "1162640"
  },
  {
    "text": "actors if your child actors up you have to decide what to do about it",
    "start": "1162640",
    "end": "1168720"
  },
  {
    "text": "and that's how supervision works so when an actor throws an uncaught exception",
    "start": "1168720",
    "end": "1174799"
  },
  {
    "text": "that exception is escalated to the parent and then the parent has to decide what to do",
    "start": "1174799",
    "end": "1180559"
  },
  {
    "text": "and it can take a bunch of um a bunch of different actions",
    "start": "1180559",
    "end": "1186080"
  },
  {
    "text": "all of these have a different meaning you have resume resume means that this error is not so bad you can just",
    "start": "1186080",
    "end": "1193360"
  },
  {
    "text": "forget about it and just process the next message on your inbox and it's basically continue as you were",
    "start": "1193360",
    "end": "1199840"
  },
  {
    "text": "right there is for the more severe errors use",
    "start": "1199840",
    "end": "1204880"
  },
  {
    "text": "like oh no no no this is all bad it's like i'm gonna kill off the instance of this actor because everything else is",
    "start": "1204880",
    "end": "1211280"
  },
  {
    "text": "invalidated we throw away the inbox box we throw away the actor like stop it all don't do that to your kids okay",
    "start": "1211280",
    "end": "1217600"
  },
  {
    "text": "don't throw away your kids um but we stopped the actor um there's also an action like restart when you",
    "start": "1217600",
    "end": "1224799"
  },
  {
    "text": "tell your kid to try again that's what you can do with your actor except we take a little bit of an extra",
    "start": "1224799",
    "end": "1231280"
  },
  {
    "text": "step i said that actors get recreated right if you say restart it actually disposes the",
    "start": "1231280",
    "end": "1238400"
  },
  {
    "text": "actor instance recreates it with the same props and then tries to dispatch that same",
    "start": "1238400",
    "end": "1245760"
  },
  {
    "text": "message again so the inbox is preserved but you're getting a new actor instance",
    "start": "1245760",
    "end": "1252159"
  },
  {
    "text": "and then escalate it's like i don't know what to do anymore i'm going to ask my parents and then invoke that supervisor",
    "start": "1252159",
    "end": "1258559"
  },
  {
    "text": "strategy and for reasons you can apply this",
    "start": "1258559",
    "end": "1264799"
  },
  {
    "text": "supervisor strategy to only the failing child or to all of your children why would you apply a supervis",
    "start": "1264799",
    "end": "1272880"
  },
  {
    "text": "supervision strategy to all of your children is for instance you've got a big workload and you cut it into small",
    "start": "1272880",
    "end": "1278960"
  },
  {
    "text": "pieces and you created separate actors for all of them which is a pattern that you often use",
    "start": "1278960",
    "end": "1284159"
  },
  {
    "text": "when you're doing actor development if you do that and the whole workload is",
    "start": "1284159",
    "end": "1289840"
  },
  {
    "text": "invalidated if one of them fails it doesn't really make sense for all of them to keep processing so you will just",
    "start": "1289840",
    "end": "1295600"
  },
  {
    "text": "like stop the whole workload and apply it to all of your children something you can do",
    "start": "1295600",
    "end": "1300720"
  },
  {
    "text": "now in code you have to override the supervisor strategy",
    "start": "1300720",
    "end": "1305919"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "method and you just return the strategy that you want to use so if you want to do the",
    "start": "1305919",
    "end": "1311679"
  },
  {
    "text": "one for one you will have something called a local decider which is that function that you",
    "start": "1311679",
    "end": "1317120"
  },
  {
    "text": "see there and the local decider is going to you're able to inspect the",
    "start": "1317120",
    "end": "1322640"
  },
  {
    "text": "actual exception you also have information about which child is failing",
    "start": "1322640",
    "end": "1328480"
  },
  {
    "text": "and but that's the info that you have and based on that you're going to have to return what to do so you return",
    "start": "1328480",
    "end": "1334240"
  },
  {
    "text": "whether you want to stop or restart or escalate or whatever right",
    "start": "1334240",
    "end": "1339360"
  },
  {
    "text": "so that's how you implement supervision strategy now this resiliency may seem",
    "start": "1339360",
    "end": "1346960"
  },
  {
    "text": "like it's trivial but it is key to the um high reliability that you can get with",
    "start": "1346960",
    "end": "1353200"
  },
  {
    "text": "actor systems like the first actor system that was ever built was erlang",
    "start": "1353200",
    "end": "1358640"
  },
  {
    "text": "erling was invented by ericsson in the 80s and the research about actor system dates from the 70s",
    "start": "1358640",
    "end": "1365039"
  },
  {
    "text": "um but erickson invented airline to build a telco system and the way the telco",
    "start": "1365039",
    "end": "1370559"
  },
  {
    "text": "systems work in those days you made a lot of money if you were able to make phone connections and maintain them so",
    "start": "1370559",
    "end": "1376080"
  },
  {
    "text": "real reliability was everything downtime cost tremendous amounts of money",
    "start": "1376080",
    "end": "1381919"
  },
  {
    "text": "and they were able to use this strategy like supervision and actors to build a 2",
    "start": "1381919",
    "end": "1388240"
  },
  {
    "text": "million line code base and reach a 9 9 uptime so 99 point and then another",
    "start": "1388240",
    "end": "1395200"
  },
  {
    "text": "seven nines now to put that into perspective that's 31 milliseconds of downtime a year",
    "start": "1395200",
    "end": "1402080"
  },
  {
    "text": "who gets that uptime yeah no none of us so supervision was really crucial there",
    "start": "1402080",
    "end": "1408799"
  },
  {
    "text": "okay it helps that they don't have to do redeploys they spin it up and it kept running right",
    "start": "1408799",
    "end": "1414640"
  },
  {
    "text": "and then another feature that really pulled me into using this for a cqrs system is aka persistence",
    "start": "1414640",
    "end": "1422159"
  },
  {
    "text": "because until now we've been talking about actors and all of their state comes from the messages that we sent to",
    "start": "1422159",
    "end": "1427760"
  },
  {
    "text": "it and from the constructors but we're not persisting any of it if you want to persist the data inside",
    "start": "1427760",
    "end": "1434159"
  },
  {
    "text": "actors so that the state gets recreated when you recreate the actor which is something that you're definitely going",
    "start": "1434159",
    "end": "1439760"
  },
  {
    "text": "to want to do um if you want to do that you're going to need the persistence",
    "start": "1439760",
    "end": "1445360"
  },
  {
    "text": "library and that library is event sourced by default",
    "start": "1445360",
    "end": "1450559"
  },
  {
    "text": "and i'll show you in code in the next slides but the life cycle of one of these persistent actors is it will query the",
    "start": "1450559",
    "end": "1458000"
  },
  {
    "text": "snapshot store to see what the last snapshot was",
    "start": "1458000",
    "end": "1463039"
  },
  {
    "text": "and it will recover that on the on the actor and then it will query the event store",
    "start": "1463039",
    "end": "1468559"
  },
  {
    "text": "and see which events have taken place since that snapshot it will replay all of those",
    "start": "1468559",
    "end": "1473840"
  },
  {
    "text": "and then it will start accepting messages from the inbox so then the new stuff comes in",
    "start": "1473840",
    "end": "1480640"
  },
  {
    "text": "and that is really powerful because if you have a system recycle you can actually have some actors that recover their own state",
    "start": "1480640",
    "end": "1487039"
  },
  {
    "text": "like don't do this for all your actors because you're gonna like throw away all of the performance that you gained from",
    "start": "1487039",
    "end": "1492480"
  },
  {
    "text": "using actors and like sync it into your network and disk system so don't",
    "start": "1492480",
    "end": "1497679"
  },
  {
    "text": "overuse it but it's really useful if you want to do persistent actors there's a couple of things that you",
    "start": "1497679",
    "end": "1504559"
  },
  {
    "text": "are going to see in code so first of all if you want to have a persistent actor you have to inherit",
    "start": "1504559",
    "end": "1509679"
  },
  {
    "text": "from the right class which means that they will need a persistence id and this id has to be unique across the system",
    "start": "1509679",
    "end": "1517039"
  },
  {
    "text": "because that's the key that it's going to query the stores with",
    "start": "1517039",
    "end": "1522159"
  },
  {
    "text": "now one of the things that i usually do is group all my state into a state object it makes snapshotting a lot",
    "start": "1522159",
    "end": "1528559"
  },
  {
    "text": "easier because if your snapshot just saves your state object you can reinstate it by just replacing it except",
    "start": "1528559",
    "end": "1535840"
  },
  {
    "text": "for worrying about all the other all the other stuff that's going on and what we're seeing is we we don't",
    "start": "1535840",
    "end": "1542320"
  },
  {
    "text": "have receive anymore we have command and we have recover and command is what coming what is",
    "start": "1542320",
    "end": "1548400"
  },
  {
    "text": "coming from the inbox and recover is what's coming from your event store and you're gonna want to do different",
    "start": "1548400",
    "end": "1554799"
  },
  {
    "text": "things with both of them because if you have a command coming in you're going to want to persist that command",
    "start": "1554799",
    "end": "1561279"
  },
  {
    "text": "because you want to replay it when the actor is recreated but when it's coming from recovery",
    "start": "1561279",
    "end": "1566799"
  },
  {
    "text": "you don't want to persist it again because then every time your actuary starts you're like messing up your event",
    "start": "1566799",
    "end": "1572400"
  },
  {
    "text": "stream and there's a bunch of things you can do with snapshots i'm not gonna dive into",
    "start": "1572400",
    "end": "1577760"
  },
  {
    "text": "that too much but if you save a snapshot it's important to know that that happens out of threat",
    "start": "1577760",
    "end": "1584400"
  },
  {
    "text": "so if you're saving a snapshot it is it gets queued to be saved but your actor doesn't get",
    "start": "1584400",
    "end": "1590320"
  },
  {
    "text": "feedback on it except for if you register for the save snapshot success and snap save snapshot",
    "start": "1590320",
    "end": "1596720"
  },
  {
    "text": "failure messages and then you can do something with now what is important is you will now",
    "start": "1596720",
    "end": "1602559"
  },
  {
    "text": "get inside your actor if you're using a persistent actor you will get a persist method",
    "start": "1602559",
    "end": "1608320"
  },
  {
    "text": "and the persist method takes two parameters the first is the event that you want to persist to the event store",
    "start": "1608320",
    "end": "1614960"
  },
  {
    "text": "and the second is the function that you would want to call when successful",
    "start": "1614960",
    "end": "1620960"
  },
  {
    "text": "so i'm calling the method below it when my save to the database has been successful",
    "start": "1620960",
    "end": "1627840"
  },
  {
    "text": "and in that mess in that method we're actually going to change",
    "start": "1627840",
    "end": "1633039"
  },
  {
    "text": "our state and that is the method that we're going to use when we get a recover it will do the same thing to our state",
    "start": "1633039",
    "end": "1639120"
  },
  {
    "text": "that we did before except we're not persisting it again and for snapshotting",
    "start": "1639120",
    "end": "1644640"
  },
  {
    "text": "you can take whatever strategy you want you can do it every 100 messages but you can also for instance have it",
    "start": "1644640",
    "end": "1651600"
  },
  {
    "text": "timed there's a whole message scheduling mechanism inside eco.net where you can say like send me a message every",
    "start": "1651600",
    "end": "1659279"
  },
  {
    "text": "x amount of hours or minutes or whatever you get that in and you save a snapshot so there's so many ways that you can go",
    "start": "1659279",
    "end": "1665600"
  },
  {
    "text": "about snapshotting now what you get back is when your snapshot is restored is you get a snapshot offer and",
    "start": "1665600",
    "end": "1672480"
  },
  {
    "text": "the snapshot offer contains your snapshot you just cast it to the right type you replace your state object voila",
    "start": "1672480",
    "end": "1678640"
  },
  {
    "text": "you're done not gonna dive into those so why akka.net it matches in so many",
    "start": "1678640",
    "end": "1685520"
  },
  {
    "text": "ways um both tdd and actors they model the code after reality it is message driven there",
    "start": "1685520",
    "end": "1692640"
  },
  {
    "text": "is event source persistence there is an event bus that we can use to tie the two sides of our cqrs system together",
    "start": "1692640",
    "end": "1699760"
  },
  {
    "text": "and it is pretty high throughput i haven't discussed clustering much but you can run an eco.net system across",
    "start": "1699760",
    "end": "1706480"
  },
  {
    "text": "many different nodes and have linear scaling so let's dive into some of the specifics",
    "start": "1706480",
    "end": "1714399"
  },
  {
    "text": "i've got about half an hour left and i'm halfway through my slides great",
    "start": "1714399",
    "end": "1720480"
  },
  {
    "text": "it's the first time i give this talk so timing is usually something that we want to watch out for so disclaimer",
    "start": "1720480",
    "end": "1727039"
  },
  {
    "text": "none of this is production code i mean i hacked up the code to be in this presentation",
    "start": "1727039",
    "end": "1732159"
  },
  {
    "text": "and i oversimplified a thing here and there but i'm showing you all the concepts and the possibilities of using",
    "start": "1732159",
    "end": "1738640"
  },
  {
    "text": "this technology for this system and i don't want to distract too much from it so don't go copy pasting this and claim",
    "start": "1738640",
    "end": "1745520"
  },
  {
    "text": "that you have a production system because it's not that but aggregates",
    "start": "1745520",
    "end": "1750640"
  },
  {
    "text": "remember that i said i wanted really really clean implementations from my for my aggregates",
    "start": "1750640",
    "end": "1757120"
  },
  {
    "text": "and i don't need akka.net to do that so i want my aggregates basically if",
    "start": "1757120",
    "end": "1762240"
  },
  {
    "start": "1760000",
    "end": "1760000"
  },
  {
    "text": "possible to have no dependencies whatsoever and i want them to know nothing about the storage",
    "start": "1762240",
    "end": "1768960"
  },
  {
    "text": "and i want them to have a very nice testable behavior right that's what we wanted you all agree",
    "start": "1768960",
    "end": "1775600"
  },
  {
    "text": "so we're gonna try and get to the to the place where we can actually have our product owners read our tests",
    "start": "1775600",
    "end": "1782559"
  },
  {
    "start": "1782000",
    "end": "1782000"
  },
  {
    "text": "so if i'm gonna be thinking about that cqrs system what do",
    "start": "1782559",
    "end": "1788080"
  },
  {
    "text": "i want my aggregate to be able to do i want to be able to send command to it",
    "start": "1788080",
    "end": "1793840"
  },
  {
    "text": "and see what events i would get from um doing that command",
    "start": "1793840",
    "end": "1799600"
  },
  {
    "text": "and for implementation reasons i'm not going to have to command change the state just quite yet i'm going to get a list of",
    "start": "1799600",
    "end": "1806240"
  },
  {
    "text": "events back and if i apply those events into the aggregate through the apply",
    "start": "1806240",
    "end": "1812640"
  },
  {
    "text": "event method those would actually change the state of the aggregate i could have chosen to have the command",
    "start": "1812640",
    "end": "1818559"
  },
  {
    "text": "already apply all of the state for the um",
    "start": "1818559",
    "end": "1823600"
  },
  {
    "text": "akka persistence that i just showed you a minute ago it comes out more beneficial like this",
    "start": "1823600",
    "end": "1829520"
  },
  {
    "text": "you'll see that later so this is what i want my aggregates to do i want to be able to check a command",
    "start": "1829520",
    "end": "1835840"
  },
  {
    "text": "and i want to be able to apply the events so if i build a beer shipment",
    "start": "1835840",
    "end": "1842000"
  },
  {
    "start": "1836000",
    "end": "1836000"
  },
  {
    "text": "aggregate wait this is pulling away if i want to build a beer shipment",
    "start": "1842000",
    "end": "1849039"
  },
  {
    "text": "aggregates i'll have fields that i'm able to",
    "start": "1849039",
    "end": "1854159"
  },
  {
    "text": "serialize because i'm gonna be thinking about this aggregate as my state objects",
    "start": "1854159",
    "end": "1859919"
  },
  {
    "text": "if i snapshot this this is what goes into my database so the fields have to be there",
    "start": "1859919",
    "end": "1865760"
  },
  {
    "text": "and they're going to be set through the events that are sent to the aggregate",
    "start": "1865760",
    "end": "1871360"
  },
  {
    "start": "1870000",
    "end": "1870000"
  },
  {
    "text": "now is that still readable yeah so if we're sending a",
    "start": "1871360",
    "end": "1876840"
  },
  {
    "text": "command in my implementation i'm gonna check what type oh",
    "start": "1876840",
    "end": "1882000"
  },
  {
    "text": "i'm gonna check what type of what type of command i'm getting",
    "start": "1882000",
    "end": "1888880"
  },
  {
    "text": "and i'm gonna race and racing events is really easy easy",
    "start": "1888880",
    "end": "1894399"
  },
  {
    "text": "it's innumerable so we can just use yield return if we want to raise multiple events that works really well",
    "start": "1894399",
    "end": "1900799"
  },
  {
    "text": "and so we're actually checking the state of this command and sending beer might",
    "start": "1900799",
    "end": "1906960"
  },
  {
    "text": "succeed or it might fail and i'm returning events as i want",
    "start": "1906960",
    "end": "1913840"
  },
  {
    "text": "and on the event side i'm going to change the data so i might write apply",
    "start": "1913840",
    "end": "1919120"
  },
  {
    "start": "1915000",
    "end": "1915000"
  },
  {
    "text": "methods it's one of the ways you can actually use um polymorphic",
    "start": "1919120",
    "end": "1924720"
  },
  {
    "text": "parameters on methods so you don't need that switch case at the top but this reads more clearly if you see",
    "start": "1924720",
    "end": "1931440"
  },
  {
    "text": "what we're reasoning about and so we're getting all the types of events in that our aggregate can deal with and they will change the state like",
    "start": "1931440",
    "end": "1938799"
  },
  {
    "text": "here at the bottom the shipment id is being set now what does this give us",
    "start": "1938799",
    "end": "1945679"
  },
  {
    "text": "if i'm writing a generic test based class around this i can get to that",
    "start": "1945679",
    "end": "1951840"
  },
  {
    "text": "unicorn of a product owner readable test that we want so much",
    "start": "1951840",
    "end": "1957919"
  },
  {
    "text": "so i'm writing a test based class that allows me to test an aggregate um and that test-based class",
    "start": "1957919",
    "end": "1965519"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "um gives me a couple of methods and the first one is the given it lists all the events that have taken",
    "start": "1965519",
    "end": "1972880"
  },
  {
    "text": "place before i'm actually gonna try and run this one command so what i'm going to do",
    "start": "1972880",
    "end": "1979200"
  },
  {
    "text": "is when i call given in my test and notice that it's a params array",
    "start": "1979200",
    "end": "1986480"
  },
  {
    "text": "and when i call given in my test it's going to play all these events on that aggregate class",
    "start": "1986480",
    "end": "1994159"
  },
  {
    "text": "and then after that we have the when and the when is the command that we're gonna write a test for and we're gonna check",
    "start": "1994240",
    "end": "2001039"
  },
  {
    "text": "that comment on the aggregate and see what list of events we're getting back",
    "start": "2001039",
    "end": "2008320"
  },
  {
    "text": "and then we're going to check that now if you use c-sharp records it's going to be really",
    "start": "2009279",
    "end": "2016080"
  },
  {
    "text": "easy and you can use equality you can have deep checks if you're not",
    "start": "2016080",
    "end": "2021440"
  },
  {
    "text": "using them but basically what this method is supposed to do is like check that the content of all the events that",
    "start": "2021440",
    "end": "2026559"
  },
  {
    "text": "i'm getting back is what i expect to get back after i replay that command given",
    "start": "2026559",
    "end": "2034000"
  },
  {
    "text": "the conditions that we had before it and this is like",
    "start": "2034000",
    "end": "2040559"
  },
  {
    "text": "two screens of code but that allows you to have tests like this",
    "start": "2040559",
    "end": "2046320"
  },
  {
    "start": "2043000",
    "end": "2043000"
  },
  {
    "text": "given these three things have happened when i try send beers i'm expecting that",
    "start": "2046320",
    "end": "2052720"
  },
  {
    "text": "the beer is sent now if you use factories or um or static",
    "start": "2052720",
    "end": "2060638"
  },
  {
    "text": "methods to create the events you can even get rid of new keywords if you want but this is a test that your product",
    "start": "2060639",
    "end": "2067440"
  },
  {
    "text": "owner even if they know how don't know how to code that they can reason about",
    "start": "2067440",
    "end": "2072480"
  },
  {
    "text": "this is a scenario that you can talk about with them and to me that is",
    "start": "2072480",
    "end": "2078079"
  },
  {
    "text": "one of the big values of of trying to establish this ubiquitous language of",
    "start": "2078079",
    "end": "2083760"
  },
  {
    "text": "using those command and event based systems is it maps really naturally to business",
    "start": "2083760",
    "end": "2090240"
  },
  {
    "text": "processes if i hadn't added a shipping label i am not able to send the package",
    "start": "2090240",
    "end": "2097680"
  },
  {
    "text": "i have to add a shipping label first so i can definitely write two tests for that and talk to my product owner and we",
    "start": "2097680",
    "end": "2104400"
  },
  {
    "text": "will agree and we'll have a test that i can implement in the aggregate that is really",
    "start": "2104400",
    "end": "2109599"
  },
  {
    "text": "the way that i want to have it so these aggregates",
    "start": "2109599",
    "end": "2115440"
  },
  {
    "text": "and the corresponding tests are really helping me even without touching on actors allow me to get really far in",
    "start": "2115440",
    "end": "2122160"
  },
  {
    "text": "that process but now we need to be able to run this code i mean we have to run like a whole",
    "start": "2122160",
    "end": "2127920"
  },
  {
    "text": "bunch of these aggregates inside the system and have ways to ship those commands to",
    "start": "2127920",
    "end": "2133359"
  },
  {
    "text": "them and have them behave and when we recycle the system we want them to be recreated so we need",
    "start": "2133359",
    "end": "2139680"
  },
  {
    "text": "an actor to host our aggregate in right so we're gonna wrap that",
    "start": "2139680",
    "end": "2146160"
  },
  {
    "start": "2145000",
    "end": "2145000"
  },
  {
    "text": "and i want to have um i aim to have a generic implementation",
    "start": "2146160",
    "end": "2152079"
  },
  {
    "text": "that i can use for different aggregate types you don't have to do that",
    "start": "2152079",
    "end": "2157119"
  },
  {
    "text": "but i want to have one that calls persistence in the right way and it replace events in the right way and all",
    "start": "2157119",
    "end": "2162800"
  },
  {
    "text": "that sort of things so this is the entire aggregate actor it's going to be i think in three slides",
    "start": "2162800",
    "end": "2170839"
  },
  {
    "start": "2164000",
    "end": "2164000"
  },
  {
    "text": "um now the first thing is i need to have that unique persistence id right",
    "start": "2170839",
    "end": "2177680"
  },
  {
    "text": "so i'm gonna use the type of the aggregate that we're using and the",
    "start": "2177680",
    "end": "2183280"
  },
  {
    "text": "id of the aggregate and use that as my persistence id pretty sure that should be unique across my entire system",
    "start": "2183280",
    "end": "2190960"
  },
  {
    "text": "and see that we have those two different handlers right i tall about that in the",
    "start": "2190960",
    "end": "2198240"
  },
  {
    "text": "persistence part we're gonna have a recover and we're gonna have a command and the only difference between the two",
    "start": "2198240",
    "end": "2205359"
  },
  {
    "text": "is that for the first one we're gonna also call persist and for the um recover we're only going",
    "start": "2205359",
    "end": "2212240"
  },
  {
    "text": "to apply it to the state um",
    "start": "2212240",
    "end": "2217599"
  },
  {
    "text": "so what do we need to do for our aggregates to work correctly is that when we get a",
    "start": "2217599",
    "end": "2224400"
  },
  {
    "text": "snapshot we're actually replacing our internal aggregate",
    "start": "2224400",
    "end": "2230000"
  },
  {
    "text": "um so that is the thing that goes into the snapshot store you don't have to use any snapshots",
    "start": "2230000",
    "end": "2235839"
  },
  {
    "text": "if you don't want to and then you will just replay the event stream for all eternity",
    "start": "2235839",
    "end": "2241119"
  },
  {
    "text": "kind of depends on your business domain what you want to do but if you want to have a snapshot that's how you get it",
    "start": "2241119",
    "end": "2248640"
  },
  {
    "text": "and when we're applying we can just apply the event to our aggregate remember that interface that changes the",
    "start": "2248800",
    "end": "2255200"
  },
  {
    "text": "state of our aggregate based on all of the events like that's why i pull the events out",
    "start": "2255200",
    "end": "2260480"
  },
  {
    "text": "and replay them on the aggregate so that i can have the same behavior for my actor for the entire event stream",
    "start": "2260480",
    "end": "2268000"
  },
  {
    "text": "i did the same thing like a snapshot every 100 messages but as i said you can",
    "start": "2268000",
    "end": "2273440"
  },
  {
    "text": "do something else and then the last part is we are going to be able to handle new",
    "start": "2273440",
    "end": "2280240"
  },
  {
    "text": "commands and this is where the magic happens right we're first going to ask the the aggregate",
    "start": "2280240",
    "end": "2285680"
  },
  {
    "text": "like which events would you spawn if i were to cue this command on you",
    "start": "2285680",
    "end": "2292400"
  },
  {
    "text": "right now given the state that you're in and then you get a list of events back",
    "start": "2292400",
    "end": "2298880"
  },
  {
    "text": "and those events i'm going to want to apply to the actor's state but also save into my event store because that's",
    "start": "2298880",
    "end": "2305119"
  },
  {
    "text": "what's going to change the state that's what i'm going to need to replay when the actor gets recreated",
    "start": "2305119",
    "end": "2311119"
  },
  {
    "text": "so we call the persist we first do the check command and we call the persist and we apply the events through the same",
    "start": "2311119",
    "end": "2318880"
  },
  {
    "text": "method that i just showed in the previous slide we apply to persist on the aggregate for",
    "start": "2318880",
    "end": "2324400"
  },
  {
    "text": "every event that comes out of this and the line under that you can ignore for now but you can already take note",
    "start": "2324400",
    "end": "2331040"
  },
  {
    "text": "we're also going to publish it to the internal event stream of the actor system",
    "start": "2331040",
    "end": "2336720"
  },
  {
    "text": "now this is all the code that you need to make one of those actors if you now",
    "start": "2336720",
    "end": "2342240"
  },
  {
    "text": "make a class that just implements the generic aggregate actor all of your work is done",
    "start": "2342240",
    "end": "2349280"
  },
  {
    "text": "so making like a beer shipment actor that is basically like create class",
    "start": "2349280",
    "end": "2356400"
  },
  {
    "text": "public class beer shipment actor it inherits aggregate actor of beer shipment you're done",
    "start": "2356400",
    "end": "2362400"
  },
  {
    "text": "and you can do this for all the different types of aggregates that you have in your system and that is really",
    "start": "2362400",
    "end": "2367440"
  },
  {
    "text": "powerful now we've got an actor",
    "start": "2367440",
    "end": "2373599"
  },
  {
    "text": "and we've got an aggregate inside that actor so we've got a little bit of the work done",
    "start": "2373599",
    "end": "2379440"
  },
  {
    "text": "but now we have to decide how we're going to manage our hierarchy and our hierarchy is",
    "start": "2379440",
    "end": "2385760"
  },
  {
    "text": "is going to do a lot more because we have that whole secure rest system a secure res system and all we",
    "start": "2385760",
    "end": "2391440"
  },
  {
    "text": "have now is a command site right so this is what um the basics of",
    "start": "2391440",
    "end": "2399839"
  },
  {
    "text": "building an actor hierarchy for a cqrs system would look like um",
    "start": "2399839",
    "end": "2406800"
  },
  {
    "text": "our actors that we just described they live here they are the actual aggregates doing the",
    "start": "2407359",
    "end": "2414000"
  },
  {
    "text": "work handling the commands right all the other parts i'm going to dive into over the next",
    "start": "2414000",
    "end": "2419920"
  },
  {
    "text": "couple of slides so the first thing is the aggregate manager um this is something you see",
    "start": "2419920",
    "end": "2427599"
  },
  {
    "start": "2422000",
    "end": "2422000"
  },
  {
    "text": "in actor systems quite a bit it's an actor that is responsible for creating child actors right based on",
    "start": "2427599",
    "end": "2434640"
  },
  {
    "text": "information that it gets it's going to create children and manage those children",
    "start": "2434640",
    "end": "2440400"
  },
  {
    "text": "now it takes in for in in in the eventual code base it",
    "start": "2440400",
    "end": "2445599"
  },
  {
    "text": "takes in a connect request it's like i want to connect to a beer shipment actor",
    "start": "2445599",
    "end": "2450880"
  },
  {
    "text": "with this id and if this manager doesn't have this actor yet it will create it",
    "start": "2450880",
    "end": "2456800"
  },
  {
    "text": "now the fact that it gets created with an id that exists in the system might trigger per system a persistence so the",
    "start": "2456800",
    "end": "2464480"
  },
  {
    "text": "actor will get its snapshot it will replay the events and it's ready to do its work right",
    "start": "2464480",
    "end": "2470800"
  },
  {
    "text": "and then it replies to the sender and that is also a very very powerful",
    "start": "2470800",
    "end": "2476400"
  },
  {
    "text": "thing when you're processing a message inside an actor there are certain properties",
    "start": "2476400",
    "end": "2481520"
  },
  {
    "text": "that are set before the actual processing takes place one of those is the sender of the",
    "start": "2481520",
    "end": "2487680"
  },
  {
    "text": "message that you're processing it's an actor ref to the other actor that is sending you that message",
    "start": "2487680",
    "end": "2494880"
  },
  {
    "text": "so we don't have to know where a certain message comes from we can just do sender.tell and reply",
    "start": "2494880",
    "end": "2504240"
  },
  {
    "text": "so if we get a connect request after we have created the actor or if we already",
    "start": "2504240",
    "end": "2509680"
  },
  {
    "text": "have it we could give that actor rev back and say okay you asked to connect to this aggregate here is the actor ref",
    "start": "2509680",
    "end": "2516480"
  },
  {
    "text": "go ahead and talk to it so that's the only responsibility for our aggregate manager right",
    "start": "2516480",
    "end": "2522480"
  },
  {
    "text": "and that just creates an instance for every aggregate that we have",
    "start": "2522480",
    "end": "2527599"
  },
  {
    "text": "the vast majority of our actors will live there like under our aggregate",
    "start": "2527599",
    "end": "2533440"
  },
  {
    "text": "manager that's where like the biggest count of actors will be in our system",
    "start": "2533440",
    "end": "2538800"
  },
  {
    "text": "and then we'll have a command router actor the command root reactor is responsible",
    "start": "2538800",
    "end": "2545040"
  },
  {
    "start": "2540000",
    "end": "2540000"
  },
  {
    "text": "for taking in all the commands that come in through our rest api or whatever they might want",
    "start": "2545040",
    "end": "2552000"
  },
  {
    "text": "to come from right you've all written software before there is an endpoint commands come in and we're going to",
    "start": "2552000",
    "end": "2558000"
  },
  {
    "text": "dispatch them to the command router actor the command root directory is a top level actor it will get created when the",
    "start": "2558000",
    "end": "2564960"
  },
  {
    "text": "actor system is created to remember like a bunch of slides back we can just do that create the top level and talk to",
    "start": "2564960",
    "end": "2571520"
  },
  {
    "text": "that actor and that might it it's it's going to send connect",
    "start": "2571520",
    "end": "2577119"
  },
  {
    "text": "requests when it has to talk to an act an aggregate that it doesn't know yet so it will talk to the actor next to it",
    "start": "2577119",
    "end": "2584400"
  },
  {
    "text": "um and it will get that actor ref back it will cache that so because usually when you run one of these systems you're",
    "start": "2584400",
    "end": "2590880"
  },
  {
    "text": "talking to the same actor aggregates over and over again um and then it will relay the commands to",
    "start": "2590880",
    "end": "2598240"
  },
  {
    "text": "that specific to that specific aggregate actor",
    "start": "2598240",
    "end": "2604160"
  },
  {
    "text": "now this command router might become a bottleneck and that's something that we haven't talked about yet",
    "start": "2604160",
    "end": "2610000"
  },
  {
    "text": "is the way that it works and you can already feel this if we're only dispatching a single",
    "start": "2610000",
    "end": "2616720"
  },
  {
    "text": "threat on an actor instance at the same time the throughput that you can get on your",
    "start": "2616720",
    "end": "2623119"
  },
  {
    "text": "inbox is limited by the amount of messages that you can process on a",
    "start": "2623119",
    "end": "2629040"
  },
  {
    "text": "single thread on your cpu right so if you have a single core doing all the work for one actor if you can not",
    "start": "2629040",
    "end": "2636560"
  },
  {
    "text": "achieve the messages that you're putting into the inbox your inbox will grow and grow and grow and",
    "start": "2636560",
    "end": "2642640"
  },
  {
    "text": "eventually that will cause problems we're gonna solve that in a minute but",
    "start": "2642640",
    "end": "2648160"
  },
  {
    "text": "it's a problem to be aware of it's like when you're designing your system make sure that you don't",
    "start": "2648160",
    "end": "2653359"
  },
  {
    "text": "have any bottleneck actors and this is like an actor that handles the complete command flow and if",
    "start": "2653359",
    "end": "2660319"
  },
  {
    "text": "your system is highly concurrent that might happen and then there's a couple of other",
    "start": "2660319",
    "end": "2665839"
  },
  {
    "text": "things there are deep projectors it's like we have our event stream with all the",
    "start": "2665839",
    "end": "2672160"
  },
  {
    "start": "2667000",
    "end": "2667000"
  },
  {
    "text": "messages in it all the events that have taken place as a result of the commands that we have",
    "start": "2672160",
    "end": "2678160"
  },
  {
    "text": "processed and we are going to use those remember our cqrs system to update our query",
    "start": "2678160",
    "end": "2684400"
  },
  {
    "text": "store right our query store might live outside of our actor system might be a mongodb or a sql database or",
    "start": "2684400",
    "end": "2691920"
  },
  {
    "text": "even azure blob storage for all i care um but you're gonna want to update that",
    "start": "2691920",
    "end": "2698000"
  },
  {
    "text": "storage like whenever events happen you're gonna want to write new records or update",
    "start": "2698000",
    "end": "2703599"
  },
  {
    "text": "existing ones so you're going to create one projector for every type of event that you want to",
    "start": "2703599",
    "end": "2710800"
  },
  {
    "text": "update your um your query storage right",
    "start": "2710800",
    "end": "2715920"
  },
  {
    "text": "so what we're going to have is we're going to have like a projector creator that just instantiates all the types of",
    "start": "2715920",
    "end": "2722319"
  },
  {
    "text": "creator uh projectors that you have you could use reflection for that like scan",
    "start": "2722319",
    "end": "2727599"
  },
  {
    "text": "how many implementations of a projector that you have in your code base spin those all up",
    "start": "2727599",
    "end": "2732960"
  },
  {
    "text": "and that works really well and the same thing we're going to do with what i might call folding back the event",
    "start": "2732960",
    "end": "2740319"
  },
  {
    "start": "2738000",
    "end": "2738000"
  },
  {
    "text": "stream your aggregates are going to want to respond to events that have happened in other",
    "start": "2740319",
    "end": "2746400"
  },
  {
    "text": "aggregates or events that have that have happened outside of your actor",
    "start": "2746400",
    "end": "2751599"
  },
  {
    "text": "system for instance in my case if i get tracking updates from my shipping vendor",
    "start": "2751599",
    "end": "2758640"
  },
  {
    "text": "from ups and that's when i would want to use kyodos as events on my event stream",
    "start": "2758640",
    "end": "2765200"
  },
  {
    "text": "as well and that might actually fall back to my aggregates and it might update my aggregate state",
    "start": "2765200",
    "end": "2771119"
  },
  {
    "text": "so you could i chose to separate those from the projectors um so you're going to create",
    "start": "2771119",
    "end": "2778000"
  },
  {
    "text": "all of those at startup as well they will also subscribe to the event bus",
    "start": "2778000",
    "end": "2783280"
  },
  {
    "text": "and so it could come from anywhere and same here like for every type of event that goes in you're going to have an",
    "start": "2783280",
    "end": "2789200"
  },
  {
    "text": "actor handling them now i've talked to the event bus a few times",
    "start": "2789200",
    "end": "2796160"
  },
  {
    "text": "and it is something that works it has a really high throughput inside",
    "start": "2796160",
    "end": "2802400"
  },
  {
    "text": "an actor system but its functionality is a little bit limited so what you can do is you can publish",
    "start": "2802400",
    "end": "2810480"
  },
  {
    "text": "any message any object to the event stream",
    "start": "2810480",
    "end": "2816480"
  },
  {
    "text": "you can do this from an actor and then you call context dot system which gives",
    "start": "2816480",
    "end": "2821839"
  },
  {
    "text": "you the actor system dot eventbust and eventstream.publish and then it goes on",
    "start": "2821839",
    "end": "2827520"
  },
  {
    "text": "there but if you have created the actor system in um for instance a singleton instance in",
    "start": "2827520",
    "end": "2834560"
  },
  {
    "text": "your api so that api request api requests can",
    "start": "2834560",
    "end": "2840720"
  },
  {
    "text": "publish messages on your event stream you can just do system dot event stream",
    "start": "2840720",
    "end": "2845760"
  },
  {
    "text": "and you're doing the same thing so you can do that and you can subscribe",
    "start": "2845760",
    "end": "2850880"
  },
  {
    "text": "to them but there is no filter on properties the only filter that you have is on the type of message um so that's",
    "start": "2850880",
    "end": "2858800"
  },
  {
    "text": "something to be aware of and that's also why in the previous uh slide i told you that you're gonna have one per type",
    "start": "2858800",
    "end": "2865440"
  },
  {
    "text": "and you're gonna have one actor that has to deal with all of them because you cannot subscribe to",
    "start": "2865440",
    "end": "2870480"
  },
  {
    "text": "um specific partitions of the stream based on the content of the messages so it's always going to be the the type of",
    "start": "2870480",
    "end": "2877280"
  },
  {
    "text": "messages um so that is why we have those one projector per event type",
    "start": "2877280",
    "end": "2884839"
  },
  {
    "text": "rules but it's not hard i mean it's a publish subscribe system",
    "start": "2884839",
    "end": "2890880"
  },
  {
    "text": "and i promised you that i would also explain what you can do to your command router right the one that might have",
    "start": "2890880",
    "end": "2896640"
  },
  {
    "text": "become a bottleneck now the command router and",
    "start": "2896640",
    "end": "2902640"
  },
  {
    "text": "echo.net has a system built in for for actors that have to be able to",
    "start": "2902640",
    "end": "2907839"
  },
  {
    "text": "process a large number of messages and",
    "start": "2907839",
    "end": "2915160"
  },
  {
    "start": "2913000",
    "end": "2913000"
  },
  {
    "text": "the the thing is if it has to to solve uh to handle more commands than it can",
    "start": "2915440",
    "end": "2920480"
  },
  {
    "text": "handle on a single thread we have a problem but you can solve that with root reactors and router actors are basically",
    "start": "2920480",
    "end": "2926559"
  },
  {
    "text": "there's two types of router actors you have pools and you have groups and the only",
    "start": "2926559",
    "end": "2932720"
  },
  {
    "text": "difference is that in a pool the router will",
    "start": "2932720",
    "end": "2938480"
  },
  {
    "text": "manage its own instances and in a group you will create them and then the group will just do the writing for you",
    "start": "2938480",
    "end": "2945760"
  },
  {
    "text": "but the thing is that one of these these router actors they can um use a routing",
    "start": "2945760",
    "end": "2951040"
  },
  {
    "text": "strategy to decide to which actor was which messages go and that way you can",
    "start": "2951040",
    "end": "2957359"
  },
  {
    "text": "have a pool of actors um that is going to handle all the requests that come in on that single",
    "start": "2957359",
    "end": "2964000"
  },
  {
    "text": "address or that single eye actor ref that you have in the system and that is very powerful because you have a single",
    "start": "2964000",
    "end": "2969760"
  },
  {
    "text": "actor ref that you're talking to but there's actually five or ten or even a hundred actors behind it that are going",
    "start": "2969760",
    "end": "2976240"
  },
  {
    "text": "to do the work and this there's like i think there's seven or",
    "start": "2976240",
    "end": "2981359"
  },
  {
    "text": "eight different routing strategies that you can do between your pool members for the one",
    "start": "2981359",
    "end": "2987839"
  },
  {
    "text": "for the case that we have these are the three that make the most sense it's like round robin like one at a time",
    "start": "2987839",
    "end": "2994240"
  },
  {
    "text": "for every pool member or we could look at the smallest inbox if there is a big difference in uh the",
    "start": "2994240",
    "end": "3000720"
  },
  {
    "text": "amount of time that it could take for a certain message to process you could look at which of your pool members has",
    "start": "3000720",
    "end": "3006880"
  },
  {
    "text": "the smallest inbox and that's the one that will get the new message or you could do consistent hashing",
    "start": "3006880",
    "end": "3014160"
  },
  {
    "text": "and consistent hashing is you're going to implement the hashing method on your messages and that is going to give you a hash",
    "start": "3014160",
    "end": "3021359"
  },
  {
    "text": "and messages with the same hash will always go to the same pool member this",
    "start": "3021359",
    "end": "3026480"
  },
  {
    "text": "might be interesting if you want to keep certain data in scope for instance like",
    "start": "3026480",
    "end": "3032400"
  },
  {
    "text": "a link to my aggregate if i want to shard all my aggregates across the pool",
    "start": "3032400",
    "end": "3038240"
  },
  {
    "text": "members of my command router and then i could chart on the",
    "start": "3038240",
    "end": "3043839"
  },
  {
    "text": "aggregate id and implement consisting consistent hashing for that and then i know that",
    "start": "3043839",
    "end": "3050240"
  },
  {
    "text": "all of the all the commands for the same aggregate will go to the same pool member for my command router",
    "start": "3050240",
    "end": "3057119"
  },
  {
    "text": "wow does that make sense you have a question",
    "start": "3057119",
    "end": "3062480"
  },
  {
    "text": "when the pool is recycled the pool size is",
    "start": "3063680",
    "end": "3068880"
  },
  {
    "text": "is actually instantiated when you start it up so with consistent hashing it",
    "start": "3069599",
    "end": "3075280"
  },
  {
    "text": "knows which the members are in the beginning and it's not resized during running when you're just doing um there",
    "start": "3075280",
    "end": "3082400"
  },
  {
    "text": "are pool strategies that can actually allow you to upscale and downscale the amount of pool members based on the on",
    "start": "3082400",
    "end": "3089040"
  },
  {
    "text": "the load um but with consistent hashing you're gonna want to all your members to be",
    "start": "3089040",
    "end": "3094079"
  },
  {
    "text": "there if you're running in a sharded situation in a clustered situation because i",
    "start": "3094079",
    "end": "3099680"
  },
  {
    "text": "connect has the possibility to cluster multiple nodes and you can basically",
    "start": "3099680",
    "end": "3106000"
  },
  {
    "text": "implement sharding so that you let the actor system decide on which",
    "start": "3106000",
    "end": "3111520"
  },
  {
    "text": "of your notes a certain actor is being created what you could basically do is shard",
    "start": "3111520",
    "end": "3117599"
  },
  {
    "text": "your you could chart your aggregates across all of your nodes and",
    "start": "3117599",
    "end": "3124640"
  },
  {
    "text": "then have a command rotor instance on that same node and make sure that consistent hashing hits that one",
    "start": "3124640",
    "end": "3131680"
  },
  {
    "text": "and talks to the aggregates on the same node and you're going to win a lot of performance",
    "start": "3131680",
    "end": "3136800"
  },
  {
    "text": "but that would take a bit too much code to display right now but it's possible um i've done that",
    "start": "3136800",
    "end": "3144480"
  },
  {
    "text": "so if you want more info on that like come and see me after the talk um",
    "start": "3144480",
    "end": "3151040"
  },
  {
    "text": "what we do basically is instead of just creating regular props we're gonna tell",
    "start": "3151040",
    "end": "3156559"
  },
  {
    "text": "the actor system that okay this is props for a pool around robin pool which means",
    "start": "3156559",
    "end": "3163119"
  },
  {
    "text": "that it's going to create its own instances i wanted to create five right and then we do the same thing we do",
    "start": "3163119",
    "end": "3169599"
  },
  {
    "text": "system.actor off and instead of one command router we're gonna have",
    "start": "3169599",
    "end": "3175359"
  },
  {
    "text": "five and the actor system is going to take care of the fact that the messages are distributed across them",
    "start": "3175359",
    "end": "3183359"
  },
  {
    "text": "you can use this same strategy if you're because this is probably the first bottleneck that you're gonna have to",
    "start": "3183599",
    "end": "3189680"
  },
  {
    "text": "solve after a while some of your event projectors or some of the actors that are subscribing to the event stream they",
    "start": "3189680",
    "end": "3195839"
  },
  {
    "text": "might have a similar problem um because then that's the next bottleneck you're gonna hit you could",
    "start": "3195839",
    "end": "3200960"
  },
  {
    "text": "use the same strategy there so a single projector could also be a pool of projectors right",
    "start": "3200960",
    "end": "3209640"
  },
  {
    "text": "we got six minutes left and i'm at the conclusion this is great so there are so many things that we",
    "start": "3209760",
    "end": "3216000"
  },
  {
    "start": "3216000",
    "end": "3216000"
  },
  {
    "text": "didn't talk about today one of them is you could publish your",
    "start": "3216000",
    "end": "3222000"
  },
  {
    "text": "event stream towards the ui which is like a lovely thing to do if you're building a cqrs system",
    "start": "3222000",
    "end": "3228079"
  },
  {
    "text": "and if you could subscribe to the event stream from the ui you can have this really nice async thing going where you",
    "start": "3228079",
    "end": "3234960"
  },
  {
    "text": "have a task-based ui and it triggers the command to the back end and the event stream is actually",
    "start": "3234960",
    "end": "3241280"
  },
  {
    "text": "eventually going to update the stream so that's something we didn't talk about it's perfectly possible",
    "start": "3241280",
    "end": "3249200"
  },
  {
    "text": "another thing that we haven't talked about is hokon configuration ocon stands for human optimized configuration",
    "start": "3249200",
    "end": "3256480"
  },
  {
    "text": "object notation it's something they got from the jvm aca it looks like json it's",
    "start": "3256480",
    "end": "3262160"
  },
  {
    "text": "not json it's a pain in the ass but it is the way to configure",
    "start": "3262160",
    "end": "3267200"
  },
  {
    "text": "actor systems um for a lot of reasons for instance configuring these these",
    "start": "3267200",
    "end": "3274240"
  },
  {
    "text": "router pools or these routing groups and that's something that you might want to do in configuration and not in code",
    "start": "3274240",
    "end": "3280960"
  },
  {
    "text": "so you can actually have that whole config in a in a hong kong config file and load that in when you start your",
    "start": "3280960",
    "end": "3286799"
  },
  {
    "text": "actor system clustering i've mentioned it a few times haven't shown you how to do it i would",
    "start": "3286799",
    "end": "3293119"
  },
  {
    "text": "need like a whole other hour just to go into all the intricate delicacies of",
    "start": "3293119",
    "end": "3298480"
  },
  {
    "text": "clustering with akka.net then of course logging there are adapters for everything",
    "start": "3298480",
    "end": "3304799"
  },
  {
    "text": "if you're not running on containers because then you want to log everything to standard out you can basically use",
    "start": "3304799",
    "end": "3310559"
  },
  {
    "text": "whatever logging system you you're used to using and one of the very important things",
    "start": "3310559",
    "end": "3316559"
  },
  {
    "text": "when you run aka.net in production is you can basically buy and that is the only paid product um",
    "start": "3316559",
    "end": "3323920"
  },
  {
    "text": "that pedobridge the company that maintains aka.net puts out that is phobos it allows you to",
    "start": "3323920",
    "end": "3330319"
  },
  {
    "text": "monitor um inbox sizes actor counts uh that",
    "start": "3330319",
    "end": "3335760"
  },
  {
    "text": "letter stuff i mean uh the newest version or the next version will plug into open telemetry so there's that",
    "start": "3335760",
    "end": "3343040"
  },
  {
    "text": "um it's the license is i think 4 000 euros a year",
    "start": "3343040",
    "end": "3348559"
  },
  {
    "text": "and it allows you to basically with confidence run a distributed actor system in production",
    "start": "3348559",
    "end": "3354160"
  },
  {
    "text": "so if you're going to do this at any kind of scale definitely look into that so if you're triggered after today and",
    "start": "3354160",
    "end": "3360480"
  },
  {
    "text": "you want to learn about icon.net there is a beautiful free bootcamp on github",
    "start": "3360480",
    "end": "3367680"
  },
  {
    "text": "so that takes you through all the basic features and stuff that aka.net can do",
    "start": "3367680",
    "end": "3374400"
  },
  {
    "text": "the petabridge block is a gold mine um the people from petabridge when they",
    "start": "3374400",
    "end": "3380880"
  },
  {
    "text": "develop new features into akka.net they always blog about it they explain how it works and how it works behind the scenes",
    "start": "3380880",
    "end": "3387440"
  },
  {
    "text": "and everything and so if you're willing to like look there you're going to find pretty much",
    "start": "3387440",
    "end": "3392559"
  },
  {
    "text": "all the information that you need and if you want to train your team they",
    "start": "3392559",
    "end": "3398079"
  },
  {
    "text": "offer remote paid training they have three courses that they actively promote which is design patterns i highly",
    "start": "3398079",
    "end": "3404640"
  },
  {
    "text": "recommend if you're doing anything with a whole team in production like at",
    "start": "3404640",
    "end": "3410240"
  },
  {
    "text": "least take that one because the patterns that you use when you're doing actors they're different from the patterns that you're gonna want",
    "start": "3410240",
    "end": "3416799"
  },
  {
    "text": "to use when you do an object-oriented system um and it's all covered in like a couple",
    "start": "3416799",
    "end": "3422160"
  },
  {
    "text": "of hours and you're gonna get uh taught by one of the people who are actually building it so if you have questions",
    "start": "3422160",
    "end": "3428720"
  },
  {
    "text": "you're gonna get the people who made it which is fantastic there's also a course on remoting and",
    "start": "3428720",
    "end": "3434319"
  },
  {
    "text": "clustering didn't really touch on those but just remember like ddd and actors",
    "start": "3434319",
    "end": "3441599"
  },
  {
    "text": "they are a match made in heaven you can make a very very expressive software system with very expressive",
    "start": "3441599",
    "end": "3448480"
  },
  {
    "text": "tests if you do this my name is hannes i'm the head of learning and development at a company",
    "start": "3448480",
    "end": "3454480"
  },
  {
    "text": "called access in belgium this is my twitter handle and my icq number make icq great again",
    "start": "3454480",
    "end": "3460720"
  },
  {
    "text": "um if you have any questions we have like oh one minute um",
    "start": "3460720",
    "end": "3468160"
  },
  {
    "text": "but it's lunch time so i don't mind sticking around for five minutes if you have questions",
    "start": "3468160",
    "end": "3474519"
  },
  {
    "text": "you're all hungry i get it okay um it was so hacked together during the",
    "start": "3475359",
    "end": "3482720"
  },
  {
    "text": "last week i'm probably going to publish the repository soon but i need to clean it up",
    "start": "3482720",
    "end": "3488720"
  },
  {
    "text": "um because i made all of the actors and all the tests but yeah i'm gonna be open about it right",
    "start": "3488720",
    "end": "3496400"
  },
  {
    "text": "but no um hit me up on twitter and i'll ping you when it's up because it should be on get",
    "start": "3496400",
    "end": "3501839"
  },
  {
    "text": "up [Music] one of the next few weeks other questions",
    "start": "3501839",
    "end": "3509359"
  },
  {
    "text": "okay enjoy your lunch don't forget to vote",
    "start": "3510640",
    "end": "3516680"
  }
]