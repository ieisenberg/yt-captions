[
  {
    "text": "let's make a start yeah so my name is",
    "start": "3080",
    "end": "8130"
  },
  {
    "text": "Matt Warren you probably already know that because it's right on the screen I should say I work for ray gun hence the",
    "start": "8130",
    "end": "14580"
  },
  {
    "text": "literally the ray gun on one t-shirt I have a whole bunch of ray guns swag to giveaway so if you like t-shirts and it",
    "start": "14580",
    "end": "21300"
  },
  {
    "text": "will press out wooden ray guns you can build anything else come and chat to me afterwards ray gun do error reporting",
    "start": "21300",
    "end": "27660"
  },
  {
    "text": "tools analytic tools APM tools that type of thing so come and chat to me if that's what you're interested in want to",
    "start": "27660",
    "end": "33900"
  },
  {
    "text": "find out a bit more this talk is titled from dotnet run to hello world had a very weird experience",
    "start": "33900",
    "end": "39360"
  },
  {
    "text": "this morning in Scott Hansen's keynote where he did to the exact same demo that I'm gonna do later on I'll keep you",
    "start": "39360",
    "end": "45420"
  },
  {
    "text": "guessing which one of his 35 demos or whatever it was he did is the one I'm gonna do but yes bizarre the experience",
    "start": "45420",
    "end": "51210"
  },
  {
    "text": "anyway and I should say up front I really like I love dotnet internals for",
    "start": "51210",
    "end": "56309"
  },
  {
    "text": "the recording not maybe in the same way that I love my wife and children but to me this stuff is fascinating and maybe",
    "start": "56309",
    "end": "61920"
  },
  {
    "text": "that's sign it rings truth people here this is not going to be one of those talks where you you know make some notes",
    "start": "61920",
    "end": "68040"
  },
  {
    "text": "go back to work on Monday and and then in your daily job you're gonna be starting to hear some of the stuff I'm talking about here and I'll just make",
    "start": "68040",
    "end": "74760"
  },
  {
    "text": "that clear up front I guess this is very much a sort of informational talk there may be times over the next year or so",
    "start": "74760",
    "end": "80670"
  },
  {
    "text": "there's something that in this talk rings true to you and you think ok that could maybe explain what's going on here if that happens let me know I'd love to",
    "start": "80670",
    "end": "87420"
  },
  {
    "text": "hear the times when this talk is that sort of thing but this is very much you know here's what's going on under the",
    "start": "87420",
    "end": "92880"
  },
  {
    "text": "hood here's what happening in the.net runtime I like digging into this stuff I think other people do as well people",
    "start": "92880",
    "end": "99480"
  },
  {
    "text": "always get comments and when I write blog posts about it people seem to want to come to talks to listen about it as",
    "start": "99480",
    "end": "104940"
  },
  {
    "text": "well this is very much an informational thing and I think that's okay I think that's fine to learn about this stuff I",
    "start": "104940",
    "end": "110580"
  },
  {
    "text": "think it's good that actually is dotnet engineers running on the.net runtime if that's what most of us here are that we",
    "start": "110580",
    "end": "116460"
  },
  {
    "text": "want to have some understanding of this runtime underneath it's generally we can treat it as a black box you know it does",
    "start": "116460",
    "end": "123060"
  },
  {
    "text": "its thing we give it our code it runs it and stuff happens but think sometimes we run up against that and maybe another",
    "start": "123060",
    "end": "131520"
  },
  {
    "text": "way to think about it is actually we should be looking to understand one level below our usual direction now I'm not going to argue",
    "start": "131520",
    "end": "137820"
  },
  {
    "text": "that every time you're coding your usual you're one level below your usual abstraction is beep into the in terms of",
    "start": "137820",
    "end": "144000"
  },
  {
    "text": "dotnet runtime we don't run into that all the time you might be up in say you know MVC asp.net land and that time your",
    "start": "144000",
    "end": "150810"
  },
  {
    "text": "abstraction is the asp.net runtime and then we have the base class library underneath that but who's ever used",
    "start": "150810",
    "end": "157160"
  },
  {
    "text": "reflector to look into some code so it's open source now it's a bit different but",
    "start": "157160",
    "end": "162600"
  },
  {
    "text": "before that you'd look in some code and you've been looking into say the base class library and then you come up",
    "start": "162600",
    "end": "167730"
  },
  {
    "text": "against an internal call has every one ever come across that so basically that's it's saying you know we can't",
    "start": "167730",
    "end": "173880"
  },
  {
    "text": "give any more that at that point that code is implemented somewhere else and that's somewhere else is January or",
    "start": "173880",
    "end": "179489"
  },
  {
    "text": "always actually in these cases will be the dotnet runtime so we have a bunch of",
    "start": "179489",
    "end": "184530"
  },
  {
    "text": "stuff in base class libraries written in c-sharp and we can look at reflector use reflector or other tools to look at that",
    "start": "184530",
    "end": "190890"
  },
  {
    "text": "dot peek and things like that but once we get below that we're into the world of c c++ and what's in the runtime and",
    "start": "190890",
    "end": "197280"
  },
  {
    "text": "that's what those internal calls are they'll basically there'll be a method with that name inside the runtime and",
    "start": "197280",
    "end": "202380"
  },
  {
    "text": "actually now because it's all open source you can go onto the net net github.com slash net slash course LR is",
    "start": "202380",
    "end": "210810"
  },
  {
    "text": "where the CLR open source version is kept and you could search for that method and you'd find that method name",
    "start": "210810",
    "end": "216540"
  },
  {
    "text": "in there so I think there's something in understanding our one level below our usual of distractions as I said I'm not",
    "start": "216540",
    "end": "222690"
  },
  {
    "text": "going to argue that that's day in day out we need to do that but there's times when we come up against it I think another reason actually why",
    "start": "222690",
    "end": "229100"
  },
  {
    "text": "knowing about in terms is good is if you want to write high performance code in dotnet I mean Scott Hanselman in his",
    "start": "229100",
    "end": "236549"
  },
  {
    "text": "talk this morning talked about attacking power benchmarks and if you go onto the again it's all open source you go on and",
    "start": "236549",
    "end": "242430"
  },
  {
    "text": "look on the asp.net repository and you can see the source code for the kestrel web server that is the one that's being",
    "start": "242430",
    "end": "249360"
  },
  {
    "text": "used in those taking power benchmarks and a guy called Ben Adams has done a lot of performance work and some other",
    "start": "249360",
    "end": "254519"
  },
  {
    "text": "few from Microsoft as well and if you follow some of that code in there it's not the c-sharp code you would write not",
    "start": "254519",
    "end": "261030"
  },
  {
    "text": "by accident anyway it's highly tuned C shot code it starts to look a little bit more like C++ code there's like bit",
    "start": "261030",
    "end": "267270"
  },
  {
    "text": "shifting going on as unsafe there's all sorts of stuff them but to write that sort of code you need to",
    "start": "267270",
    "end": "272970"
  },
  {
    "text": "understand the runtime you don't write that code backs and that's Bill of years of knowledge it's understanding what the GC is doing what the jitters doing how",
    "start": "272970",
    "end": "280620"
  },
  {
    "text": "to think how they interact what's going on in the runtime those sorts of things so I think that's one clear concrete",
    "start": "280620",
    "end": "286380"
  },
  {
    "text": "time when actually an understanding of the runtimes is useful aside from just you know we all like to learn this stuff",
    "start": "286380",
    "end": "292700"
  },
  {
    "text": "so let's start off with a bit of a demo I'm not very good at doing live demos I've got my notes to make sure I don't",
    "start": "292700",
    "end": "299250"
  },
  {
    "text": "get this wrong let's see if I can get this right dot yes there we go that is",
    "start": "299250",
    "end": "310440"
  },
  {
    "text": "simultaneously the least impressive demo you'll see all day aside from Scott Hanson did the same one this morning but",
    "start": "310440",
    "end": "315690"
  },
  {
    "text": "hopefully by the end of this talk I'll convince you that actually that's quite impressive we do that you know maybe not",
    "start": "315690",
    "end": "321810"
  },
  {
    "text": "every single day but we do that quite a lot we spin up a new console app we try things out maybe you know now that",
    "start": "321810",
    "end": "327000"
  },
  {
    "text": "there's a nice neat command-line tooling you've tried it out from the command-line whatever we were a way we",
    "start": "327000",
    "end": "332460"
  },
  {
    "text": "do it we run a dotnet application maybe many times a day when we're developing and even just what happens between when",
    "start": "332460",
    "end": "339630"
  },
  {
    "text": "I type dotnet run and hello well there there's a lot going on aside from even if we had a proper application that went on and did a bit",
    "start": "339630",
    "end": "345750"
  },
  {
    "text": "more and that's what we're going to talk through in the next 40 minutes or so to",
    "start": "345750",
    "end": "351120"
  },
  {
    "text": "give an outline of where we're going we're going to look at the main components that make up a runtime I think it's helpful to see what's in",
    "start": "351120",
    "end": "356610"
  },
  {
    "text": "there and see particularly around the naming and stuff how the hunt the runtime gets hosted how the runtime",
    "start": "356610",
    "end": "363240"
  },
  {
    "text": "initializes itself the type loader we just write you know my class foo and",
    "start": "363240",
    "end": "370050"
  },
  {
    "text": "then in ignore it basically and expect it to get on with it and do it for us and but there's quite a lot of work that goes into make that possible so that",
    "start": "370050",
    "end": "376380"
  },
  {
    "text": "types can be available at runtime they can have type safety JIT compilation and then everything else at the end so onto",
    "start": "376380",
    "end": "386970"
  },
  {
    "text": "the main components well if you're to go into the course CLR depository this is probably about five or six months out of",
    "start": "386970",
    "end": "393210"
  },
  {
    "text": "dates the numbers may have gone up or down but anyway there's over around two and a half million lines of source code",
    "start": "393210",
    "end": "399480"
  },
  {
    "text": "in there 8.2 million lines a test code there's a lot of tests not surprisingly when",
    "start": "399480",
    "end": "405400"
  },
  {
    "text": "you're testing a runtime and that's just testing the runtime there's a whole love a lot of tests that would test the base",
    "start": "405400",
    "end": "411069"
  },
  {
    "text": "class libraries we're just talking about tests that exercise something in the run time loading types and some of the other",
    "start": "411069",
    "end": "417279"
  },
  {
    "text": "stuff that we'll talk about in this talk that consider just a run time the base class libraries in terms of",
    "start": "417279",
    "end": "422830"
  },
  {
    "text": "terminologies referred to as core FX and we're talking about core CLR which is purely the runtime there is some c-sharp",
    "start": "422830",
    "end": "429729"
  },
  {
    "text": "code in the runtime then we'll come on to where that lives in the moment most of it is in test code but there is",
    "start": "429729",
    "end": "434979"
  },
  {
    "text": "actually some in the runtime itself but by far the bulk of the runtime is C and C++ there's a lot of il again that's",
    "start": "434979",
    "end": "442810"
  },
  {
    "text": "testing when you want to test this sort of stuff out they don't want to be dependent on the compiler they want to give it invalid il for instance to see",
    "start": "442810",
    "end": "448810"
  },
  {
    "text": "what the runtime does with it they want to give it I or the structure in a certain way so a lot of testing is easier to done with il there's a bunch",
    "start": "448810",
    "end": "455020"
  },
  {
    "text": "of assembler codes not surprisingly the runtime now runs on four or five different CPUs arm amd64 x86 and so on",
    "start": "455020",
    "end": "464589"
  },
  {
    "text": "so specific parts of it have to be a handwritten assembly and there's a bit",
    "start": "464589",
    "end": "470589"
  },
  {
    "text": "of Python and Perl which is as far as I can tell build scripts there's nothing in the actual runtime that makes out but",
    "start": "470589",
    "end": "477639"
  },
  {
    "text": "maybe pictures is a bit easier to understand this is a heat map and the size of the square is just a number of",
    "start": "477639",
    "end": "483669"
  },
  {
    "text": "lines of code in that particular component and these components are the top level folders if you to download the",
    "start": "483669",
    "end": "489879"
  },
  {
    "text": "code they're also terminology wise they're the way those parts of the",
    "start": "489879",
    "end": "495159"
  },
  {
    "text": "runtime and referred to so if you go onto the issues or the pull requests on the repository and now you'll see that",
    "start": "495159",
    "end": "501370"
  },
  {
    "text": "they're labeled and they're often labeled with one of these names so we'll go through in a minute we're going to get to the top left a huge red one",
    "start": "501370",
    "end": "507669"
  },
  {
    "text": "because us everything left over when I've talked about the rest will come to that last so we'll start with n let's",
    "start": "507669",
    "end": "513518"
  },
  {
    "text": "call ed this is the c-sharp code that lives in the runtime it's as of the next version of.net has been renamed to",
    "start": "513519",
    "end": "519940"
  },
  {
    "text": "system dot private or core Lib because M s core live is sort of more from the old older so a dotnet framework they've",
    "start": "519940",
    "end": "527139"
  },
  {
    "text": "renamed it with for dotnet core going forward and but this is what sort of code you can find in those things like",
    "start": "527139",
    "end": "533560"
  },
  {
    "text": "reflect lives in there the types that we expect system dot string system dot in those",
    "start": "533560",
    "end": "540160"
  },
  {
    "text": "sorts of things system but object lives in there the basic rule of the run times it has to be self-contained it can't",
    "start": "540160",
    "end": "546010"
  },
  {
    "text": "have a dependency on something else it can't have a dependency on the base class life it's just one of the fundamental rules the runtime so",
    "start": "546010",
    "end": "553329"
  },
  {
    "text": "anything the runtime needs to do its work has to live in the runtime but we",
    "start": "553329",
    "end": "559180"
  },
  {
    "text": "obviously have the nicely layered base class library so all the stuff we kind of generally use day in day out system dot collections a lot of that",
    "start": "559180",
    "end": "565510"
  },
  {
    "text": "lives elsewhere but stuff that's tightly integrated to the runtime is another thing that has to live in here so system",
    "start": "565510",
    "end": "571360"
  },
  {
    "text": "dot string system dot array there are fundamental types at the runtime knows about more than anything else they're",
    "start": "571360",
    "end": "576940"
  },
  {
    "text": "not purely just written in c-sharp code and there's some there's some c++ code of mirrors and and stuff going on the",
    "start": "576940",
    "end": "583720"
  },
  {
    "text": "JIT knows about them instantly so it can emit efficient code for them things like that so that's kind of some of the rules",
    "start": "583720",
    "end": "590050"
  },
  {
    "text": "around what lives in the runtime as far as possible you want to put more stuff outside in core effects because that can",
    "start": "590050",
    "end": "595660"
  },
  {
    "text": "be then shared and if you're in Scott Hanselman to talk about this idea of all these different runtimes that sits underneath the base class libraries core",
    "start": "595660",
    "end": "602170"
  },
  {
    "text": "effects that's why it makes more sense to put things in core effects and for instance mono is started to share more",
    "start": "602170",
    "end": "607630"
  },
  {
    "text": "of the core FX code other runtime so the idea is that the runtime keeps as small as possible but there is some rules in",
    "start": "607630",
    "end": "613930"
  },
  {
    "text": "that it can't have a dependency on so anything else that's the c-sharp code and this is the JIT just-in-time",
    "start": "613930",
    "end": "620620"
  },
  {
    "text": "compiler a huge chunk was a bit surprised at quite how much code goes into that but I suppose it makes sense",
    "start": "620620",
    "end": "625779"
  },
  {
    "text": "it's got a fairly complex job of turning the il code that we give it you know we",
    "start": "625779",
    "end": "630910"
  },
  {
    "text": "compile our code with Rozlyn or Visual Studio vs code how we compile our code that ends up as il code and at runtime",
    "start": "630910",
    "end": "638199"
  },
  {
    "text": "that's just in time compiler if we're talking about some of the most common scenarios and the jitter has to do a lot",
    "start": "638199",
    "end": "644529"
  },
  {
    "text": "of things really and one of it has to worry about different CPU architectures it's got to emit different code it was",
    "start": "644529",
    "end": "651519"
  },
  {
    "text": "talking about emitting assemble it what byte code basically native code for that for the runtime so has to worry about",
    "start": "651519",
    "end": "657579"
  },
  {
    "text": "that it has to worry about performance it has to worry about correctness you know we expect our codes when we're",
    "start": "657579",
    "end": "664269"
  },
  {
    "text": "accessing arrays for instance we expect the code to not go outbound things like that has to worry about has to worry about a missing code it's gonna",
    "start": "664269",
    "end": "670830"
  },
  {
    "text": "to do exception handling a lot of quite low level stuff the JIT has to worry about and on top of all of that in the",
    "start": "670830",
    "end": "677530"
  },
  {
    "text": "common scenario is just in time as in that we can't call the method for the first time until the code has been",
    "start": "677530",
    "end": "682840"
  },
  {
    "text": "cheated so it has to be fast because if it takes too long it's not like a C C++",
    "start": "682840",
    "end": "687970"
  },
  {
    "text": "compiler where you can compile it once and then that's native code it does this at runtime and we get onto the JIT at",
    "start": "687970",
    "end": "693670"
  },
  {
    "text": "the end and some of the tricks used but it's trying to do this balance between making the most efficient kovin not taking too long hence why there's a lot",
    "start": "693670",
    "end": "700480"
  },
  {
    "text": "of code in there the GC is a fun one does anyone want to guess how big the GC",
    "start": "700480",
    "end": "707860"
  },
  {
    "text": "dot CPP file is it's the main file that makes up the biggest the core of the GC",
    "start": "707860",
    "end": "713500"
  },
  {
    "text": "how many anyone have a guess at how many lines of code is a thousand 22,000",
    "start": "713500",
    "end": "721930"
  },
  {
    "text": "that's closer 22,000 still higher anyone anyone anyone guesses okay hot but yet",
    "start": "721930",
    "end": "728110"
  },
  {
    "text": "you misery if we look we can actually look now that it's so it's so huge that",
    "start": "728110",
    "end": "734140"
  },
  {
    "text": "the tooling that I've got really doesn't like it but it is thirty thirty thirty",
    "start": "734140",
    "end": "743920"
  },
  {
    "text": "seven thousand three hundred lines long and you saw a sort of bit there's going",
    "start": "743920",
    "end": "750910"
  },
  {
    "text": "through it's a whole lot of if deaths as well basically it's a single file that",
    "start": "750910",
    "end": "757690"
  },
  {
    "text": "is all the versions of the GC so it's server GC workstation GC background GC",
    "start": "757690",
    "end": "763270"
  },
  {
    "text": "foreground GC multi CPU GC single CPU GC and what it means is this file can then",
    "start": "763270",
    "end": "770620"
  },
  {
    "text": "be dropped into other a.net runtimes so as far as I know it's mostly the same GC in the.net framework and dotnet core and",
    "start": "770620",
    "end": "777730"
  },
  {
    "text": "they can just toggle sum if desk basically if they want to make it have it behave differently again for the.net",
    "start": "777730",
    "end": "783100"
  },
  {
    "text": "compact framework and things like that so and and going right back fun fact the",
    "start": "783100",
    "end": "789190"
  },
  {
    "text": "GC was originally written in Lisp and eased a tool to transpile it into C++ and they don't do that now but that was",
    "start": "789190",
    "end": "796480"
  },
  {
    "text": "how it the very first version you can there's a blog page out there about the guy who wrote the very Lynnette JC I don't know if I'd like to",
    "start": "796480",
    "end": "803920"
  },
  {
    "text": "be a dev working on the 37,000 line code file but I think that by this point if",
    "start": "803920",
    "end": "810700"
  },
  {
    "text": "you can still do it after there's one main developers a dotnet GC developer and she's a lady called Manny Stevens",
    "start": "810700",
    "end": "817000"
  },
  {
    "text": "and she's been working on the dotnet run fine for a long time I guess is she isn't fed up with working like this and",
    "start": "817000",
    "end": "822340"
  },
  {
    "text": "it's going to stay like this people have opened an issue you can search for it on the github repository of why is this one",
    "start": "822340",
    "end": "829510"
  },
  {
    "text": "single file could it be a Fae refactored and you can you can search for that and read up why but that's the bulk of that",
    "start": "829510",
    "end": "834820"
  },
  {
    "text": "GC GC like the Jetta sort of relatively stand-alone they have an interface they",
    "start": "834820",
    "end": "840670"
  },
  {
    "text": "talk to the rest the runtime but now you can operate on their own thing the runtime calls into them and then and",
    "start": "840670",
    "end": "846070"
  },
  {
    "text": "they call back into the bulk of the rest of the runtime which is the red block for an interface but they can stand",
    "start": "846070",
    "end": "851470"
  },
  {
    "text": "alone and in fact there's actually a sample in the repository where you can use that GC outside of the dotnet",
    "start": "851470",
    "end": "856810"
  },
  {
    "text": "runtime there's a fairly simple sample showing actually here's the GC can be used that way and is also the reverse of",
    "start": "856810",
    "end": "863560"
  },
  {
    "text": "that has work being done where you can provide an alternative GC to the dotnet runtime if you really want to do that as",
    "start": "863560",
    "end": "868930"
  },
  {
    "text": "an interface you have to implement and then you can do the work and there's a guy called Conrad's I forget her name",
    "start": "868930",
    "end": "875680"
  },
  {
    "text": "but he's just written a dotnet GC book called net memory management it's a thousand pages long which shows you how",
    "start": "875680",
    "end": "882730"
  },
  {
    "text": "much is in the GC but on his blog he's talked about the alternative G seeing what's done this that's worth looking up",
    "start": "882730",
    "end": "888550"
  },
  {
    "text": "if G sees more of your thing garbage collection these two blocks here are purely to do with debugging it's",
    "start": "888550",
    "end": "897100"
  },
  {
    "text": "what the runtime provides so that where you can debunk so SOS who's heard of SOS Sun and strike a few of you must so if",
    "start": "897100",
    "end": "904210"
  },
  {
    "text": "you're debugging net in windbg you must know the magic commands dot load by SOS CLR that's the SOS here and",
    "start": "904210",
    "end": "911830"
  },
  {
    "text": "what it is providing is a view of the your.net process when DB g is only knows",
    "start": "911830",
    "end": "917710"
  },
  {
    "text": "about native you know not managed code is basically an SOS provides commands",
    "start": "917710",
    "end": "923050"
  },
  {
    "text": "like give me a list of all the dotnet threads runtimes rates give me a list of the school stack give me the method of",
    "start": "923050",
    "end": "930310"
  },
  {
    "text": "this location give me the ILO of the method the assembly code of the method those sorts of things that's what it provides",
    "start": "930310",
    "end": "935670"
  },
  {
    "text": "and it has to map between those two worlds so there's quite a lot going on there and the other part of that is the",
    "start": "935670",
    "end": "941220"
  },
  {
    "text": "the per point at the top DAC is the main is called a data access component and",
    "start": "941220",
    "end": "946889"
  },
  {
    "text": "that's purely providing if you imagine you have your dotnet process as a chunk of memory the DAC is like a view on top",
    "start": "946889",
    "end": "954089"
  },
  {
    "text": "of that and it allows it to cool it and so that that chunk of memory is a large",
    "start": "954089",
    "end": "959339"
  },
  {
    "text": "amount of its data structures at the runtime keeps so there's a data structure in the runtime which is the list of all the threads as a data",
    "start": "959339",
    "end": "966420"
  },
  {
    "text": "structure in a runtime for every class that you load for every method and the DAC is a way to say give me those",
    "start": "966420",
    "end": "971809"
  },
  {
    "text": "information about those data structures from this process either a memory dump or a live process so we pretty much take",
    "start": "971809",
    "end": "980490"
  },
  {
    "text": "it for granted we hit f5 and we're f10 stepping through or whatever it is and and obviously if we're doing that",
    "start": "980490",
    "end": "986100"
  },
  {
    "text": "individual studio or vs codes that end of it is providing a lot of that functionality but quite a lot of",
    "start": "986100",
    "end": "991529"
  },
  {
    "text": "functionality is also provided by the runtime to make it debug a debugger or book is that even a word to make it easy",
    "start": "991529",
    "end": "997620"
  },
  {
    "text": "for us to debug it to make it easy for us to inspect those processes and without this sort of stuff we wouldn't",
    "start": "997620",
    "end": "1003860"
  },
  {
    "text": "get very far debugging our code which is handy the PAL is just a small thing on the side",
    "start": "1003860",
    "end": "1010160"
  },
  {
    "text": "the idea of this is you might have heard of this from save windows and things like the platform abstraction layer and",
    "start": "1010160",
    "end": "1015920"
  },
  {
    "text": "the idea is this is the part of the runtime that is dealing with different os's so now that we have dotnet core running",
    "start": "1015920",
    "end": "1023629"
  },
  {
    "text": "on Linux UNIX different flavors mac OS and obviously windows as well that the",
    "start": "1023629",
    "end": "1030230"
  },
  {
    "text": "idea is that the abstraction of those bits is in one place and the rest of the runtime can just cool methods that might",
    "start": "1030230",
    "end": "1035839"
  },
  {
    "text": "call out to the OS and this this part handles that and an Inc in the middle is",
    "start": "1035839",
    "end": "1041808"
  },
  {
    "text": "really a whole bunch of header files and interfaces of the different how the",
    "start": "1041809",
    "end": "1047149"
  },
  {
    "text": "different components so for instance there's one in there which is the GC - AE which is the top left execution",
    "start": "1047149",
    "end": "1054020"
  },
  {
    "text": "engine and there's an interface of those to talk to each other and vice versa Lin the EE talks back to the GC the same for",
    "start": "1054020",
    "end": "1060440"
  },
  {
    "text": "the AE and the Jets and the JIT and backwards but also some of these are external ones so",
    "start": "1060440",
    "end": "1066350"
  },
  {
    "text": "anyone here work on sort of third-party tools using internet debugging API is profiling api's anyone okay well you",
    "start": "1066350",
    "end": "1074539"
  },
  {
    "text": "you're using native tools if you're not working on them any third-party debugger and you to like Rider that provides a",
    "start": "1074539",
    "end": "1081320"
  },
  {
    "text": "debugging experience in there any third-party tools like the one I work for Raygun but other tools that provides",
    "start": "1081320",
    "end": "1086779"
  },
  {
    "text": "a p.m. or Diagnostics experience we're probably be using some of these API there's a whole range of API is the",
    "start": "1086779",
    "end": "1091909"
  },
  {
    "text": "runtime provides the people who want to write unfortunately almost all those api's are you have to access them from C",
    "start": "1091909",
    "end": "1098809"
  },
  {
    "text": "and C++ they're not API is for for managed code but they do mean we can",
    "start": "1098809",
    "end": "1104480"
  },
  {
    "text": "have an ecosystem of tooling around this and there's a stable and API provided",
    "start": "1104480",
    "end": "1109549"
  },
  {
    "text": "there and he told tool writers can provide rely on that and the VM then is",
    "start": "1109549",
    "end": "1116120"
  },
  {
    "text": "basically everything else and it's got",
    "start": "1116120",
    "end": "1122710"
  },
  {
    "text": "bits per CPU assembly code in there",
    "start": "1122710",
    "end": "1128360"
  },
  {
    "text": "but what's actually contained in there well there's a whole lot of things the type system and we just as I said we",
    "start": "1128360",
    "end": "1134240"
  },
  {
    "text": "just write class some class and code and but the runtime needs to know that it",
    "start": "1134240",
    "end": "1140389"
  },
  {
    "text": "reads in as it loads our dll's it will read it into his own data structure and it has to do that for a",
    "start": "1140389",
    "end": "1146389"
  },
  {
    "text": "few reasons one is because it needs to work within itself but another one is because of reflection when you use",
    "start": "1146389",
    "end": "1152779"
  },
  {
    "text": "reflection it has to have that information available so that it can say right yes that type you're asking me to before has this fields or has these",
    "start": "1152779",
    "end": "1159350"
  },
  {
    "text": "properties has these methods and that started some of the data structures it keeps in there and generics as well a",
    "start": "1159350",
    "end": "1165679"
  },
  {
    "text": "were for special mention we kind of again we probably like quite like using generics but as a whole lot of work went",
    "start": "1165679",
    "end": "1172159"
  },
  {
    "text": "in the whole run time to make generics possible because generics and net was done in a way where it was done I guess",
    "start": "1172159",
    "end": "1178879"
  },
  {
    "text": "in in a peer or Java took a different route we say with generics and we have",
    "start": "1178879",
    "end": "1184970"
  },
  {
    "text": "generics baked into the runtime real generics if you like and there's a lot of work that was done to make that",
    "start": "1184970",
    "end": "1190159"
  },
  {
    "text": "possible all the built-in types are in the in the VM as well loading of types",
    "start": "1190159",
    "end": "1196370"
  },
  {
    "text": "and classes threading the abstraction of threading and I'm not even talking about the level of the thread pool and stuff",
    "start": "1196370",
    "end": "1201620"
  },
  {
    "text": "of that which lives actually outside of the runtime but just the raw net threads are an instruction on top of OS threads",
    "start": "1201620",
    "end": "1210279"
  },
  {
    "text": "exception handling a stack walking we probably take these for granted or don't like them because any time we see an",
    "start": "1210279",
    "end": "1215870"
  },
  {
    "text": "exception maybe we're tasked with figuring out why it's happening in our in our code but we probably wouldn't",
    "start": "1215870",
    "end": "1221659"
  },
  {
    "text": "want to do that if we didn't have a nice stack trace and and and we could",
    "start": "1221659",
    "end": "1227179"
  },
  {
    "text": "probably be quite grateful the runtime provides that if you've ever done any work in C or C++ or other runtimes that",
    "start": "1227179",
    "end": "1232850"
  },
  {
    "text": "don't give you that nice stack reporting but again a lot of work has to take place to make that happen it's not",
    "start": "1232850",
    "end": "1238419"
  },
  {
    "text": "straightforward event tracing and profiling anyone used heard of etw event",
    "start": "1238419",
    "end": "1244309"
  },
  {
    "text": "tracing for Windows a few people and anyone else heard of a tool called per few few more people that Coquina gets",
    "start": "1244309",
    "end": "1250490"
  },
  {
    "text": "out in a moment anyway there's some tools that will let you collect events at the runtime itself emits and and in",
    "start": "1250490",
    "end": "1255950"
  },
  {
    "text": "in atw events are obviously across all over the Windows OS but the ones that the dotnet runtime omits of things like",
    "start": "1255950",
    "end": "1262789"
  },
  {
    "text": "GC events happening allocations happening chitting so sort of the runtimes telling you something's",
    "start": "1262789",
    "end": "1268250"
  },
  {
    "text": "happening in the runtime and you can use perfume or you can actually write code with libraries from new get that let you",
    "start": "1268250",
    "end": "1274220"
  },
  {
    "text": "capture those events and you can have a nice them to see what's going on an MP invoke dotnet has quite a nice",
    "start": "1274220",
    "end": "1280669"
  },
  {
    "text": "story of calling out to native code if anyone had ever put you know DLL import attribute that sort of stuff is quite a",
    "start": "1280669",
    "end": "1286880"
  },
  {
    "text": "lot of work to make that happen it has to make sure that the data from dotnet gets put into the right format that the",
    "start": "1286880",
    "end": "1292820"
  },
  {
    "text": "native code expects and then when that comes back and vice versa has to make sure that any exceptions that happen",
    "start": "1292820",
    "end": "1298250"
  },
  {
    "text": "native Qaeda turned into dotnet exceptions and and things like that there's quite a lot of work going on that just in p.m. VOC so that's the",
    "start": "1298250",
    "end": "1305630"
  },
  {
    "text": "virtual machine so when I ran that demo before I types dotnet run and there's",
    "start": "1305630",
    "end": "1310820"
  },
  {
    "text": "various other ways you can do next exe C execute but all of those ultimately end up calling into something",
    "start": "1310820",
    "end": "1317149"
  },
  {
    "text": "called the hosting API and that's because our net code is not native code",
    "start": "1317149",
    "end": "1324049"
  },
  {
    "text": "so something has to initialize the runtime and the runtime has to run our code unless we're talking about ahead of",
    "start": "1324049",
    "end": "1330649"
  },
  {
    "text": "time compilation in net so you have that in a mano a bit and design called core RT in in.net core",
    "start": "1330649",
    "end": "1337580"
  },
  {
    "text": "world side of things unless we're talking about it's ahead of time compilation our code that we give the",
    "start": "1337580",
    "end": "1343130"
  },
  {
    "text": "runtime is not native code so it has to something has to start at the runtime if",
    "start": "1343130",
    "end": "1348740"
  },
  {
    "text": "you've anyone played around with the new tuning where you can do dotnet publish and those sorts of things people",
    "start": "1348740",
    "end": "1354380"
  },
  {
    "text": "familiar with that so that's a way to get more self-contained apps you know you the folder with the entire runtime",
    "start": "1354380",
    "end": "1360380"
  },
  {
    "text": "and if you notice in there when you publish your application you'll have your my app DLL and you'll have my app",
    "start": "1360380",
    "end": "1366140"
  },
  {
    "text": "dot exe my app DXE is basically a wrapper that is that contain calls into",
    "start": "1366140",
    "end": "1372649"
  },
  {
    "text": "the hosting API initializes a runtime and says I'd like you to run my app DLL find its main entry point or whatever it",
    "start": "1372649",
    "end": "1379220"
  },
  {
    "text": "might be and as a few steps it goes through this is one of the API is that lives in that diagram I talked about",
    "start": "1379220",
    "end": "1384919"
  },
  {
    "text": "before and I'm not going to go through it all because you can there's a quite a nice MS MSDN Docs but maybe the",
    "start": "1384919",
    "end": "1391880"
  },
  {
    "text": "interesting bit is actually that app domains are still a thing Internet core so one of the things that went away with",
    "start": "1391880",
    "end": "1398000"
  },
  {
    "text": "dotnet cool is the ability to create app domains we can no longer use app domains as an IDE as a as a process of isolation",
    "start": "1398000",
    "end": "1405140"
  },
  {
    "text": "and they've sort of said that's not a real thing you know in terms of that's not real isolation that's not really fit",
    "start": "1405140",
    "end": "1411620"
  },
  {
    "text": "for purpose if you want isolation run multiple processes that domains and no longer the way to have that but there's",
    "start": "1411620",
    "end": "1417950"
  },
  {
    "text": "still one app domain living in the runtime and the hosting API maybe that will go away eventually but it's tied in",
    "start": "1417950",
    "end": "1423260"
  },
  {
    "text": "to this API so probably will break too much stuff it now lives on a sort of historical thing you can't as I think",
    "start": "1423260",
    "end": "1429649"
  },
  {
    "text": "there's almost no method you can call an active system that domain left anyway you certainly can't spin up new nap",
    "start": "1429649",
    "end": "1434960"
  },
  {
    "text": "domains there is a new mechanism called application contexts if you want some of the isolation app domains give you in",
    "start": "1434960",
    "end": "1442760"
  },
  {
    "text": "terms of loading plugins and things like that and but in terms in dotnet core app domains don't live except behind the",
    "start": "1442760",
    "end": "1448820"
  },
  {
    "text": "scenes but it goes through these steps but let's see action so this is the code",
    "start": "1448820",
    "end": "1455360"
  },
  {
    "text": "from that web page I'm not going to talk you through all because you probably",
    "start": "1455360",
    "end": "1461299"
  },
  {
    "text": "didn't come here to see C++ code it talks through the steps but let's see",
    "start": "1461299",
    "end": "1467830"
  },
  {
    "text": "in action so we're just going to run up the host and ask it to execute a dll and",
    "start": "1467830",
    "end": "1475500"
  },
  {
    "text": "the benefit of obviously this all been open sources you can put your own crazy ascii text in and pretend that you made",
    "start": "1475500",
    "end": "1482380"
  },
  {
    "text": "your own version the see a lot but the point is it's running through a load of things it's setting up the application",
    "start": "1482380",
    "end": "1487570"
  },
  {
    "text": "pass you can sort of see net core app it's initializing it this is roughly",
    "start": "1487570",
    "end": "1492610"
  },
  {
    "text": "what happens when you type dotnet run the same sort of steps it goes through really what it's doing is collecting up",
    "start": "1492610",
    "end": "1499150"
  },
  {
    "text": "all the Assemblies that are considered part of the runtime you know so all the",
    "start": "1499150",
    "end": "1504250"
  },
  {
    "text": "dll's system dot all the ones that live in the base class library in the.net core world most those come by NuGet",
    "start": "1504250",
    "end": "1511180"
  },
  {
    "text": "packages and if you store Scott Hanselman talked this morning they live under that fold away you can have",
    "start": "1511180",
    "end": "1516190"
  },
  {
    "text": "different versions subside by side so this is this hosting API here is is the",
    "start": "1516190",
    "end": "1521560"
  },
  {
    "text": "simple one it's really look here's a fold with a load of deals and here's my main dealer I'd like to run do it in the",
    "start": "1521560",
    "end": "1527140"
  },
  {
    "text": "world of dotnet run it's doing a lot more behind the scenes it's deciding which one tiny want to use it knows about dotnet standard on that core app",
    "start": "1527140",
    "end": "1534010"
  },
  {
    "text": "but the bulk of it the bottom of it all is really here's some deals that you're",
    "start": "1534010",
    "end": "1539860"
  },
  {
    "text": "gonna need here's the main DLL go and run the runtime and then the end of it we get nice hello world as before",
    "start": "1539860",
    "end": "1548279"
  },
  {
    "text": "so we've seen how the runtime gets initialized the next thing it does sorry",
    "start": "1551040",
    "end": "1557770"
  },
  {
    "text": "we've seen how the runtime gets hosted the next thing it does is it has to initialize itself there's a whole lot of stuff that goes on if you've ever heard",
    "start": "1557770",
    "end": "1564400"
  },
  {
    "text": "people say dotnet looks bad in sort of small hello world benchmarks is because",
    "start": "1564400",
    "end": "1571060"
  },
  {
    "text": "the runtime is doing quite a lot of initialization with the expectation that you're going to do more than print hello",
    "start": "1571060",
    "end": "1576310"
  },
  {
    "text": "world it's getting stuff ready for your app your application to run for a bit longer than that so if you do it you",
    "start": "1576310",
    "end": "1582040"
  },
  {
    "text": "know if you tie in the time it takes for dotnet app to start up print hello world and exit it's gonna look bad compared to",
    "start": "1582040",
    "end": "1587200"
  },
  {
    "text": "a C++ app that's because there's a whole lot of stuff that's gone on there and you've just kind of wasted all that",
    "start": "1587200",
    "end": "1592570"
  },
  {
    "text": "you've asked a runtime to start up and then you've gone away and done nothing useful with it but some of the things it",
    "start": "1592570",
    "end": "1597910"
  },
  {
    "text": "does so it needs to set itself up it has a whole lot of low-level components and if you're really keen because I counted",
    "start": "1597910",
    "end": "1605230"
  },
  {
    "text": "it you can read the 68 things to see how it does before executing a line of your code and we'll look at that but in",
    "start": "1605230",
    "end": "1610840"
  },
  {
    "text": "effect there's one method in the runtime initializes all the sub components and a",
    "start": "1610840",
    "end": "1616030"
  },
  {
    "text": "lot of the stuff we saw in that diagram earlier initializes things it starts up things like error handling obviously the",
    "start": "1616030",
    "end": "1622150"
  },
  {
    "text": "runtime has its own error handling if the right time goes wrong is anyone ever seen fatal engine it fatal",
    "start": "1622150",
    "end": "1629170"
  },
  {
    "text": "engine execution exception I think that you're doing well if you get a sense I",
    "start": "1629170",
    "end": "1634480"
  },
  {
    "text": "think that's basically the runtime saying I don't know something's gone horribly wrong so the fact you don't see",
    "start": "1634480",
    "end": "1640450"
  },
  {
    "text": "that very often means at the runtime you know it has its own except error handling exception handling built-in and",
    "start": "1640450",
    "end": "1646360"
  },
  {
    "text": "it does a better job so you get things like stack overflow exceptions or out of memory exceptions those sorts of things but they're being converted from",
    "start": "1646360",
    "end": "1652330"
  },
  {
    "text": "something happening in native code by the time we see them they're coming up as many as exceptions even though you",
    "start": "1652330",
    "end": "1658060"
  },
  {
    "text": "might not be profiling on debugging it needs to get ready for the dip for instance a debugger to attach at a later",
    "start": "1658060",
    "end": "1663070"
  },
  {
    "text": "time so there's things being spun up there GC needs to get ready so that by the",
    "start": "1663070",
    "end": "1668290"
  },
  {
    "text": "time your codes darhk's executing you can start allocating and so it needs to initialize itself domains if applicable",
    "start": "1668290",
    "end": "1675780"
  },
  {
    "text": "yeah there's a whole load of things just to show it in codes to see this is the",
    "start": "1675780",
    "end": "1683610"
  },
  {
    "text": "this is the problem this is the function",
    "start": "1683610",
    "end": "1690130"
  },
  {
    "text": "that runs through and you can just see initializing initializing initializing legit initializing the the power liar",
    "start": "1690130",
    "end": "1697990"
  },
  {
    "text": "initializing a debugger initializing exists and handling and so on and so on setting up threading stubs we'll come to",
    "start": "1697990",
    "end": "1704230"
  },
  {
    "text": "at the end what that's going on there but and there's a something that you see the runs are news is quite widely garbage collecting anyway the point is",
    "start": "1704230",
    "end": "1711400"
  },
  {
    "text": "there's a lots going on that's the point on it make more than exactly that all the specifics but if you really want to",
    "start": "1711400",
    "end": "1717310"
  },
  {
    "text": "look up the EE helper function that runs it up you can again because it's a local source you can go and take a look at the",
    "start": "1717310",
    "end": "1725110"
  },
  {
    "text": "end of all that the run times is initializes itself it's then ready to go send ready to start executing our code",
    "start": "1725110",
    "end": "1731730"
  },
  {
    "text": "but let's look at that in a slightly different way so a few of you said you've heard of perfu before that's good",
    "start": "1731730",
    "end": "1737650"
  },
  {
    "text": "I kind of make it my aim to tell more people about perfu but if he has a slightly bad rap as you'll see in a minute is when you load up per few it",
    "start": "1737650",
    "end": "1747190"
  },
  {
    "text": "looks like this and there's no plot me trying to even zoom in really because",
    "start": "1747190",
    "end": "1752710"
  },
  {
    "text": "it's not gonna you know it's it's an interesting UI wise but I always argue",
    "start": "1752710",
    "end": "1761560"
  },
  {
    "text": "perfu that I would rather have a very powerful tool that looked horrendous then a very pretty tool that did nothing",
    "start": "1761560",
    "end": "1767650"
  },
  {
    "text": "useful and perf use very much at that end of the scale there's a lot of powerful low-level information get out",
    "start": "1767650",
    "end": "1773470"
  },
  {
    "text": "of perf you it does take a little bit of digging around it does take a little bit of getting used to it has got a bit",
    "start": "1773470",
    "end": "1779530"
  },
  {
    "text": "better since it's open source as well so people have been community contributions and sending that as far as I know a lot",
    "start": "1779530",
    "end": "1786220"
  },
  {
    "text": "of the Microsoft teams themselves use perfume for diagnosing performance issues particularly you can certainly go",
    "start": "1786220",
    "end": "1791740"
  },
  {
    "text": "on the repositories and see people posting screenshots from perfu and there's a few things it will give you we're going to look at and CPU",
    "start": "1791740",
    "end": "1798250"
  },
  {
    "text": "sampling in a moment to see what the runtime does drew and startup you can use that for your own code so it's a",
    "start": "1798250",
    "end": "1803650"
  },
  {
    "text": "it's a sampling profiler where it takes a snapshot of the call stack once every",
    "start": "1803650",
    "end": "1810190"
  },
  {
    "text": "mini second and at the end of that you can see where the most time is spent it will also tell you about memory Alec patience and that can be native ones as",
    "start": "1810190",
    "end": "1817880"
  },
  {
    "text": "in what the doclet runtimes doing but more important more importantly for us I guess is we can see dotnet allocations",
    "start": "1817880",
    "end": "1824030"
  },
  {
    "text": "or our codes allocator a lot of this is also available in third-party tools I should say so a lot",
    "start": "1824030",
    "end": "1830570"
  },
  {
    "text": "of the third-party profiling tools can get your similar information perfuse just another way of getting it it also hooks into etw events but let's",
    "start": "1830570",
    "end": "1839419"
  },
  {
    "text": "and I'm going to show you the if you thought that first screen was interested",
    "start": "1839419",
    "end": "1845690"
  },
  {
    "text": "in this one no nice responsive UI hearing it's but we're just going to run",
    "start": "1845690",
    "end": "1851510"
  },
  {
    "text": "a the main one is we're gonna run with",
    "start": "1851510",
    "end": "1856820"
  },
  {
    "text": "CPU samples turned on and if anyone knows what all of these tick boxes do",
    "start": "1856820",
    "end": "1862700"
  },
  {
    "text": "please come and tell me afterwards because every time I look at it I get more confusing as new ones pop up there's three that have the word dotnet",
    "start": "1862700",
    "end": "1869330"
  },
  {
    "text": "and Alec I look for allocation Xin and I always get confused which ones which anyway you basically give it an application and",
    "start": "1869330",
    "end": "1875870"
  },
  {
    "text": "you give it a command line and you and you run a command and then it does some",
    "start": "1875870",
    "end": "1881990"
  },
  {
    "text": "very weird things with Windows and it's has a nice you can tell it's low level",
    "start": "1881990",
    "end": "1887270"
  },
  {
    "text": "because this is the this is the progress report you get this is the yeah anyway",
    "start": "1887270",
    "end": "1894309"
  },
  {
    "text": "it's going to go away and do its thing it's collecting etw events coming out of the dotnet runtime that's what it's",
    "start": "1894309",
    "end": "1899600"
  },
  {
    "text": "doing there perfu so that those roar events are relatively easy to collect what perfume top of that is builds a",
    "start": "1899600",
    "end": "1905600"
  },
  {
    "text": "whole lot of intelligence so it collects for instance if we're talking about GC allocations it'll collect the raw events",
    "start": "1905600",
    "end": "1911240"
  },
  {
    "text": "but it'll analyze those and say actually these represent GC pauses at GC pauses are significant because in a lot of",
    "start": "1911240",
    "end": "1918230"
  },
  {
    "text": "situations when as a GC pause that's the GC running and not your code running and that can be a performance issue so it",
    "start": "1918230",
    "end": "1925669"
  },
  {
    "text": "does some work there so it's yeah it's done all that so we then get a nice data",
    "start": "1925669",
    "end": "1932660"
  },
  {
    "text": "file [Music]",
    "start": "1932660",
    "end": "1938559"
  },
  {
    "text": "yes yes yes and this is the first screen",
    "start": "1941150",
    "end": "1947100"
  },
  {
    "text": "I think if you've got if you've done perfu if you tried out / if you got to this screen and you see this and this",
    "start": "1947100",
    "end": "1956190"
  },
  {
    "text": "sort of stuff at this point you probably give up is a bit cryptic but what it's really telling you is how long is spent",
    "start": "1956190",
    "end": "1962429"
  },
  {
    "text": "in each method exclusively as in just that method in and inclusively including as children but fortunately they've",
    "start": "1962429",
    "end": "1969360"
  },
  {
    "text": "recently or an open-source contribution built signed called flame graphs and unfortunately they don't really you know",
    "start": "1969360",
    "end": "1976880"
  },
  {
    "text": "they don't really demo nicely so I'll show you in a different way in a second but flame graphs as an aside has anyone",
    "start": "1976880",
    "end": "1984870"
  },
  {
    "text": "heard of flame graphs before I just mentioned them I get a few people but a few can either learn roughly what flame",
    "start": "1984870",
    "end": "1990510"
  },
  {
    "text": "works give you flame grass give you is a way of analyzing or in this case we're talking about CPU samples so it's where",
    "start": "1990510",
    "end": "1996570"
  },
  {
    "text": "time was spent the main thing to remember is it's not over time this is is taking all the samples so we I think",
    "start": "1996570",
    "end": "2003950"
  },
  {
    "text": "I ran that program there for 10 seconds it collects its CPU samples once every millisecond at the end of it puts them",
    "start": "2003950",
    "end": "2009770"
  },
  {
    "text": "all together so what's on the left as the flame graph isn't what happened first and then right the left-to-right",
    "start": "2009770",
    "end": "2015350"
  },
  {
    "text": "order is almost arbitrary but what it is is the wider the block the more time is spent in that function so an obviously",
    "start": "2015350",
    "end": "2022190"
  },
  {
    "text": "in a lot of call stacks there's common functions you know so at the bottom we",
    "start": "2022190",
    "end": "2027320"
  },
  {
    "text": "generally have main if things starts in Mayton right 100% the time is spent it may be but that's not very useful because nothing useful was done in main",
    "start": "2027320",
    "end": "2033529"
  },
  {
    "text": "it was the functions it's called what you're looking generally for flame grass is a flat is a function that's flat",
    "start": "2033529",
    "end": "2039799"
  },
  {
    "text": "because it doesn't have any children that means actually 20% of our time has just spent in in this case the byte",
    "start": "2039799",
    "end": "2045230"
  },
  {
    "text": "function right teeth is a lot of time but most of the time is not in teeth",
    "start": "2045230",
    "end": "2050540"
  },
  {
    "text": "itself it's in it's children so that's the thing to look out for alligator and pans are useful because they're to kind",
    "start": "2050540",
    "end": "2055940"
  },
  {
    "text": "of make the two main functions but not very much time as spending them individually is stuff after them as a",
    "start": "2055940",
    "end": "2062210"
  },
  {
    "text": "very quick aside if you haven't checked out or not heard of Julia Evans and her blog is JV and SCA",
    "start": "2062210",
    "end": "2069399"
  },
  {
    "text": "or she's known as a pork on Twitter she makes these fantastic zine designs",
    "start": "2069400",
    "end": "2074820"
  },
  {
    "text": "explaining quite complex technical things in this sort of way there's loads of them this is one she's done on flame graphs",
    "start": "2074820",
    "end": "2080889"
  },
  {
    "text": "there's other ones on processes on low level stuff but explained in a really",
    "start": "2080890",
    "end": "2086500"
  },
  {
    "text": "engaging way so hopefully that's given you an idea if you haven't before on what flame graphs do and what they look",
    "start": "2086500",
    "end": "2093010"
  },
  {
    "text": "like let's have a look saying in sort of Blue Peter style here's one I prepared",
    "start": "2093010",
    "end": "2098830"
  },
  {
    "text": "earlier because unless I clean it up and make it on a slide it's impossible to",
    "start": "2098830",
    "end": "2103840"
  },
  {
    "text": "see what's going on in perfu but the point is we're seeing larger sections but even still I know you're not gonna",
    "start": "2103840",
    "end": "2110020"
  },
  {
    "text": "be able to see that so anyway this is what it looks like if it's annotated and this is where the runtime spent its time",
    "start": "2110020",
    "end": "2115840"
  },
  {
    "text": "in that HelloWorld application until it called our code so you see a whole chunk",
    "start": "2115840",
    "end": "2120970"
  },
  {
    "text": "of the time is actually cheating and running the actual code itself because",
    "start": "2120970",
    "end": "2126130"
  },
  {
    "text": "when you first call the main method that then has to call it has to then at some",
    "start": "2126130",
    "end": "2133030"
  },
  {
    "text": "point has to then get the console dot write line method for instance and sometimes those methods call behind the",
    "start": "2133030",
    "end": "2138760"
  },
  {
    "text": "scenes that we don't explicitly call in our code so there's a bit of time spent in getting their system domain set up is",
    "start": "2138760",
    "end": "2146560"
  },
  {
    "text": "roughly the managed code set up and then e startup is the 68 steps I talked to",
    "start": "2146560",
    "end": "2152380"
  },
  {
    "text": "you in the previous slide that's what's going on there that's thing starting up there and so yeah that's what in times",
    "start": "2152380",
    "end": "2159490"
  },
  {
    "text": "of typed in times of in terms of time Spencer e that's where it is then and",
    "start": "2159490",
    "end": "2165310"
  },
  {
    "text": "that's why I think in this one one of these thin bars here is actually executing the program don't might not",
    "start": "2165310",
    "end": "2171130"
  },
  {
    "text": "forget what it is but anyway this is why we say like hallow welds benchmarks you",
    "start": "2171130",
    "end": "2176380"
  },
  {
    "text": "know very little this time is spent in a executing our code all right as all the other stuff that goes around it",
    "start": "2176380",
    "end": "2182290"
  },
  {
    "text": "obviously you only pay that JIT in cost once but if you're just printing hello world to the screen next thing you're",
    "start": "2182290",
    "end": "2187990"
  },
  {
    "text": "doing all that work to not get it reused as I said before it's not like left to right so this actually happens first and",
    "start": "2187990",
    "end": "2194470"
  },
  {
    "text": "then this and then this one finally but it ranges it differently it's over this is the whole sample so that gives you an",
    "start": "2194470",
    "end": "2200920"
  },
  {
    "text": "idea of what it looks like in x Ben fun thing with this so I am I used this before I tweeted this out and happens",
    "start": "2200920",
    "end": "2207730"
  },
  {
    "text": "that one of the runtime engineers follows me on Twitter and realized from the screenshot and another one I a",
    "start": "2207730",
    "end": "2213640"
  },
  {
    "text": "larger one I tweeted that actually there's some stuff happening in in a",
    "start": "2213640",
    "end": "2219250"
  },
  {
    "text": "kind of hello world application that shouldn't be happening because in terms of the runtime they're quite they take",
    "start": "2219250",
    "end": "2226840"
  },
  {
    "text": "quite a good-looker actually what the runtime does before arc I can execute in this kind of world of micro services and",
    "start": "2226840",
    "end": "2233200"
  },
  {
    "text": "when we're spinning up things a lot more the time to our code being executed is important right you know the times that",
    "start": "2233200",
    "end": "2239800"
  },
  {
    "text": "often it means the time to first request right we've seen no snow is where the first request takes a long time they do what they can in the runtime to make",
    "start": "2239800",
    "end": "2246130"
  },
  {
    "text": "sure the runtime gets out the way only initialize is what it has to and I can't take much credit I stumbled across his",
    "start": "2246130",
    "end": "2251320"
  },
  {
    "text": "backs not even know I was seeing a problem but I I tweeted it more out of interest but they saw it and basically said they were doing stuff in that",
    "start": "2251320",
    "end": "2258880"
  },
  {
    "text": "process that shouldn't have been done they were doing stuff that shouldn't didn't need to be done before the users",
    "start": "2258880",
    "end": "2264700"
  },
  {
    "text": "code was executed that could have been done afterwards like asynchronously in the background type thing and so as of",
    "start": "2264700",
    "end": "2271300"
  },
  {
    "text": "dotnet 3 they fixed that and it's around saying called event pipe controllers and it's a diagnostic thing but the point of",
    "start": "2271300",
    "end": "2278770"
  },
  {
    "text": "that is to actually they do look at this or stuff is important to them how many methods are ejected before your code is",
    "start": "2278770",
    "end": "2284200"
  },
  {
    "text": "how many methods are automatically jutted even if you don't call those sorts of things how many things the",
    "start": "2284200",
    "end": "2289810"
  },
  {
    "text": "runtime does they tried to make sure it does the bear mainly because they realize and particularly going forward with containment as in docker and all",
    "start": "2289810",
    "end": "2295570"
  },
  {
    "text": "this sort of stuff this thing is more of an issue the other main thing the",
    "start": "2295570",
    "end": "2300730"
  },
  {
    "text": "runtime does is allocate a bunch of memory and that's pretty much all the",
    "start": "2300730",
    "end": "2306040"
  },
  {
    "text": "bulk of it sorry is for the GC so the runtime itself allocates a whole load of",
    "start": "2306040",
    "end": "2312070"
  },
  {
    "text": "memory that he uses but that's kind of a bit hidden from us and we can't really do much about that the runtime does that the bit that we can control is is what",
    "start": "2312070",
    "end": "2319150"
  },
  {
    "text": "the GCS do because if we're allocating lots of memory in our code or lots of objects that need lots of memory in our",
    "start": "2319150",
    "end": "2325630"
  },
  {
    "text": "code then the GC has to do a bit more work but the GC 3 allocates a bunch of",
    "start": "2325630",
    "end": "2330910"
  },
  {
    "text": "memory upfront so it's got the heaps ready to go so that when you want an allocation you as the memory already pre-allocated that",
    "start": "2330910",
    "end": "2337340"
  },
  {
    "text": "varies across workstation server 32-bit 64-bit it's also quite smart with",
    "start": "2337340",
    "end": "2342440"
  },
  {
    "text": "reserving memory verse is actually paging it in and that sort of thing it works you know in a smart way with the",
    "start": "2342440",
    "end": "2348020"
  },
  {
    "text": "OS so you won't nestle see these in the kind of headline figure if you look in in task manager whatever but it's it's",
    "start": "2348020",
    "end": "2354740"
  },
  {
    "text": "doing that but it's very is it's getting to the state where the first time you",
    "start": "2354740",
    "end": "2359750"
  },
  {
    "text": "knew up an object or allocate some memory it's got a chunk of memory that it can give you you know a section of",
    "start": "2359750",
    "end": "2365960"
  },
  {
    "text": "that memory ready to go and then in late 2006 work of cleaning up that memory and it tries to relieve memory intelligently",
    "start": "2365960",
    "end": "2371630"
  },
  {
    "text": "as well so we've seen that the runtime being initialized externally we've seen",
    "start": "2371630",
    "end": "2378200"
  },
  {
    "text": "the runtime initializing itself internally if you like we've seen where it spends its time doing that some of the main components and now it's the",
    "start": "2378200",
    "end": "2384890"
  },
  {
    "text": "type later we just write you know as a set of few times we just write our types but there's a kind of fundamental thing",
    "start": "2384890",
    "end": "2391070"
  },
  {
    "text": "that we expect is that type safety isn't there's certain rules you know that if you write code like this you're going to",
    "start": "2391070",
    "end": "2396860"
  },
  {
    "text": "get a compiler error because you're trying to new up an abstract class right the same if you try to new up an",
    "start": "2396860",
    "end": "2403190"
  },
  {
    "text": "interface away though if you try to use it access a private field of a method we",
    "start": "2403190",
    "end": "2408950"
  },
  {
    "text": "set reflection is different if you're using that that's a different mechanism but certainly in regular code if you try",
    "start": "2408950",
    "end": "2414080"
  },
  {
    "text": "to access private fields there's certain rules you can't have multiple inheritance all these sorts of things the type system provides us dotnet is a",
    "start": "2414080",
    "end": "2421070"
  },
  {
    "text": "strongly typed language the runtime and has to care about as well because what",
    "start": "2421070",
    "end": "2428120"
  },
  {
    "text": "the runtime can't do is just rely on all our code coming from a nice compiler so",
    "start": "2428120",
    "end": "2434150"
  },
  {
    "text": "that so you use Visual Studio vs code way of it it won't let you write code like this or it won't sorry it refused to compile code like this it'll give you",
    "start": "2434150",
    "end": "2440600"
  },
  {
    "text": "an error and it won't compile it there's nothing to stop you if you saw again actually if Scott Hanson was talk this",
    "start": "2440600",
    "end": "2445910"
  },
  {
    "text": "morning it's nothing to stop you using the il dasn't all to disassemble from a",
    "start": "2445910",
    "end": "2451730"
  },
  {
    "text": "dll into il you can edit that and then you can use il azzam to assemble it back",
    "start": "2451730",
    "end": "2457700"
  },
  {
    "text": "and it does virtually no type system checks it will check on the syntax of the il that's about it and actually that",
    "start": "2457700",
    "end": "2465620"
  },
  {
    "text": "there's a reason because they want that tool to be able to write invalid i L so that I can test it in the runtime if there's no way to create these sorts",
    "start": "2465620",
    "end": "2472400"
  },
  {
    "text": "of scenarios they can test it the main point is is the runtime has to do its own checks it can't just assume all this",
    "start": "2472400",
    "end": "2478370"
  },
  {
    "text": "code has come from a nice compiler there's various different ways you can you know you can edit the binary itself",
    "start": "2478370",
    "end": "2483860"
  },
  {
    "text": "if you get that far but the point is it has to do these checks itself at runtime so when it's doing the type loads it",
    "start": "2483860",
    "end": "2489860"
  },
  {
    "text": "needs to check for these things are you trying to access a class you shouldn't are you breaking class hierarchies",
    "start": "2489860",
    "end": "2494990"
  },
  {
    "text": "whatever it might be the runtime has to pretty much mirror all the checks that the compiler would do but it doesn't in",
    "start": "2494990",
    "end": "2501500"
  },
  {
    "text": "terms of throwing a type load exception doesn't give you a nice error message saying the line of codes are fixed it",
    "start": "2501500",
    "end": "2506540"
  },
  {
    "text": "just says type load exception you can't do this or whatever it might be but it gets a bit more complicated does anyone",
    "start": "2506540",
    "end": "2512750"
  },
  {
    "text": "want to admit they've ever written code like this the main point is and I after",
    "start": "2512750",
    "end": "2518780"
  },
  {
    "text": "having looked about it quite a lot of times I'm not a compiler or a language person the main point is is class a is",
    "start": "2518780",
    "end": "2525640"
  },
  {
    "text": "dependent on Class B and Class B is dependent on Class A you've got a",
    "start": "2525640",
    "end": "2530930"
  },
  {
    "text": "recursive mutual whatever the right word is but it's at the type level it's not a runtime determine you know it's so the",
    "start": "2530930",
    "end": "2537590"
  },
  {
    "text": "point to remember is Class B shouldn't load if Class A is broken and Class",
    "start": "2537590",
    "end": "2543440"
  },
  {
    "text": "acient load is Class B is broken but which one you do first you names like chico neck so either they have to both",
    "start": "2543440",
    "end": "2549590"
  },
  {
    "text": "be okay and they both have to load or if one of them's broken they can't neither of them can load because at that point",
    "start": "2549590",
    "end": "2555290"
  },
  {
    "text": "the types they make sense you break type safety all this sort stuff and it mostly comes in with",
    "start": "2555290",
    "end": "2560510"
  },
  {
    "text": "generics it's hard to do this sort of crazy recursive stuff at a type layer without genetics but yeah if anyone can",
    "start": "2560510",
    "end": "2567320"
  },
  {
    "text": "come talk to me afterwards and say what you could replace a B and C with real names to make this a real life proper",
    "start": "2567320",
    "end": "2574790"
  },
  {
    "text": "scenario I'd love to hear of where you could actually justify writing code like this but anyway it's possible to write",
    "start": "2574790",
    "end": "2580520"
  },
  {
    "text": "it so what the type what the type system does when it's loading is it loads everything in stages it starts with the",
    "start": "2580520",
    "end": "2588470"
  },
  {
    "text": "class just loaded as raw data and then it works through and you can see things like it's looking at the parents of the",
    "start": "2588470",
    "end": "2595670"
  },
  {
    "text": "class exact parents and its dependencies and it basically goes through so in those cases we have two class",
    "start": "2595670",
    "end": "2601619"
  },
  {
    "text": "depend and it'll move through all the types to each level so it'll get all types to level one and all types to",
    "start": "2601619",
    "end": "2607289"
  },
  {
    "text": "level to all types of level three and then it knows you know for instance it knows that this type can't move to load",
    "start": "2607289",
    "end": "2614670"
  },
  {
    "text": "its dependencies because one of its dependencies is broken so this type you know type a couldn't progress past this",
    "start": "2614670",
    "end": "2619890"
  },
  {
    "text": "stage because type B hasn't gotten to this data eyesore think so every type has two dependent types have to move up",
    "start": "2619890",
    "end": "2626220"
  },
  {
    "text": "in at the same level and then once you get to the end when all the dependencies",
    "start": "2626220",
    "end": "2631289"
  },
  {
    "text": "are loaded you know that dependents are loaded so you know that you're okay because your dependencies are all okay they wouldn't have got to that stage if",
    "start": "2631289",
    "end": "2637680"
  },
  {
    "text": "they weren't themselves okay and so on and it's a bit like the way transactions are committed in a database you know",
    "start": "2637680",
    "end": "2643799"
  },
  {
    "text": "everything sort of moves up in steps and at the end it says right is everyone happy and it does the final step at the",
    "start": "2643799",
    "end": "2648869"
  },
  {
    "text": "end which is basically flipping a bit saying right we've got this far there's been no errors okay everything's good we",
    "start": "2648869",
    "end": "2654150"
  },
  {
    "text": "can say the types are okay it's a very simplified version of what it's doing but it works through these stages so we",
    "start": "2654150",
    "end": "2662759"
  },
  {
    "text": "finally finally got to the point our code will actually run that's the thing all of this is before any of our codes",
    "start": "2662759",
    "end": "2668039"
  },
  {
    "text": "run if we leave aside static initializers which are slightly different beside a thing but in our",
    "start": "2668039",
    "end": "2673710"
  },
  {
    "text": "hello world example all this would have happened before anything in our code would have run and we have JIT",
    "start": "2673710",
    "end": "2679799"
  },
  {
    "text": "compilation as I've talked about before in dotnet and it works a bit like this",
    "start": "2679799",
    "end": "2685579"
  },
  {
    "text": "the point of what is trying to do is that it doesn't want a jitter method until you actually call it right so it",
    "start": "2685579",
    "end": "2691859"
  },
  {
    "text": "could as as every single type was load at the beginning it could say right this types got five methods on legit and you",
    "start": "2691859",
    "end": "2697829"
  },
  {
    "text": "know one two three four five and but that would waste a lot of time if you never called those methods all those methods didn't call get cool too later",
    "start": "2697829",
    "end": "2704130"
  },
  {
    "text": "so what the runtime does is when it emits a method it actually emits it has",
    "start": "2704130",
    "end": "2710220"
  },
  {
    "text": "a temporary energy point but it goes through a series of stops and stubs the simplest way to think about those is",
    "start": "2710220",
    "end": "2715710"
  },
  {
    "text": "like a few instructions of assembly and not a full method cool and they just do",
    "start": "2715710",
    "end": "2721440"
  },
  {
    "text": "a bit of housekeeping so the first time when you tried to call a method it comes through this route it starts off at the",
    "start": "2721440",
    "end": "2727859"
  },
  {
    "text": "temporary entry point because that's that's where it knows the method is and it gets the pre-code fix up the free",
    "start": "2727859",
    "end": "2733499"
  },
  {
    "text": "stuff and the priests of work is basically the bit that calls the JIT so the first time it calls a method it",
    "start": "2733499",
    "end": "2739890"
  },
  {
    "text": "gets pushed through these series of stops and it ends up having the method JIT it afterwards",
    "start": "2739890",
    "end": "2746670"
  },
  {
    "text": "when it's been cheated he's done a few extra things so we've lost the pre stub now it's lost that level of doing",
    "start": "2746670",
    "end": "2752699"
  },
  {
    "text": "direction that's gone off and what it's done is it's rewritten in effect this fix up to now point directly to the",
    "start": "2752699",
    "end": "2759900"
  },
  {
    "text": "native code viola stubborn when I say rewritten we're talking about assembly instructions being changed and address",
    "start": "2759900",
    "end": "2768809"
  },
  {
    "text": "in effect and that free code fix that will be you saying like use this address",
    "start": "2768809",
    "end": "2774479"
  },
  {
    "text": "and jump to it and it's done is between the first and second time that address will change for the first time it jumps",
    "start": "2774479",
    "end": "2780269"
  },
  {
    "text": "to the pre-start the second time it jumps the native code it's also built this stable entry point and that is so",
    "start": "2780269",
    "end": "2786150"
  },
  {
    "text": "that that point onwards to rest the runtime knows that anytime you want to call this method go to the stable entry",
    "start": "2786150",
    "end": "2791849"
  },
  {
    "text": "point it'll always end at the right place the temperature point can be changed this is the simple sort scenario",
    "start": "2791849",
    "end": "2797279"
  },
  {
    "text": "it gets more complex when you have things like virtual method dispatch because it has to decide which way to go",
    "start": "2797279",
    "end": "2802680"
  },
  {
    "text": "which implementation of the method when you include interfaces so the simplest scenario is an instance method on a",
    "start": "2802680",
    "end": "2808859"
  },
  {
    "text": "class or a static method anything above that gets more complicated generics you know we know in generics things are done",
    "start": "2808859",
    "end": "2815190"
  },
  {
    "text": "differently if you have a generic you have a generic method that takes T wait T is an INT or a double that's shared",
    "start": "2815190",
    "end": "2822749"
  },
  {
    "text": "code whereas sorry that's individual code for those there's a different method implementation for the intrusion",
    "start": "2822749",
    "end": "2827880"
  },
  {
    "text": "than a double version whereas if it takes T words here's at the reference type is shared codes and some tricks",
    "start": "2827880",
    "end": "2834630"
  },
  {
    "text": "going on there and it's using these stubs in different places we just call the method but the runtime figures this",
    "start": "2834630",
    "end": "2840119"
  },
  {
    "text": "out for us but something fundamentally changed around the dotnet call 2.0 time",
    "start": "2840119",
    "end": "2847109"
  },
  {
    "text": "frame and there's a new feature came in as an unheard of it it's around JIT",
    "start": "2847109",
    "end": "2852900"
  },
  {
    "text": "compilation it's also written on the bottom the screen I just list so it's on",
    "start": "2852900",
    "end": "2858049"
  },
  {
    "text": "C a compilation year so T compilation came in around net",
    "start": "2858049",
    "end": "2863069"
  },
  {
    "text": "core 2.1 and it's not sort of a dotnet standard thing so i don't know how when other runtimes might implemented",
    "start": "2863069",
    "end": "2869760"
  },
  {
    "text": "but it's in net core it was turned off by default into that one I believe as of net core 3 it'll be on by default and",
    "start": "2869760",
    "end": "2877290"
  },
  {
    "text": "that does something different so the the main issue is all of this is and you can kind of see in action here is that the",
    "start": "2877290",
    "end": "2883380"
  },
  {
    "text": "first time I methods called it has to the JIT has to do its job right and and",
    "start": "2883380",
    "end": "2889200"
  },
  {
    "text": "it's had this trade-off maybe if it could spend a long time it could generate super efficient code so that if",
    "start": "2889200",
    "end": "2895980"
  },
  {
    "text": "that method then gets called thousands of times a second it's you know two percent faster which obviously a",
    "start": "2895980",
    "end": "2900990"
  },
  {
    "text": "thousands of times a second makes a difference right but if it spends too long it's blocking that method being",
    "start": "2900990",
    "end": "2906330"
  },
  {
    "text": "called the first time and maybe that methods only called once and it's on the start off of your app and it's between",
    "start": "2906330",
    "end": "2911700"
  },
  {
    "text": "the user being able to first push a button the wave raise the G it doesn't know that right so it has to kind of take a middle ground it has to say wrong",
    "start": "2911700",
    "end": "2918210"
  },
  {
    "text": "and do the best I can but I don't want to do anything that takes too long I can't do some of the optimizations that a C C++ compiler that works if you like",
    "start": "2918210",
    "end": "2925650"
  },
  {
    "text": "offline and can do so it's always been a bit limited by that so what JIT",
    "start": "2925650",
    "end": "2931170"
  },
  {
    "text": "compilation sorry what tiered compilation is is and it's something that's been around in Java and JVM under",
    "start": "2931170",
    "end": "2936960"
  },
  {
    "text": "the hot spot compiler for quite a while but it's coming new to net is that it",
    "start": "2936960",
    "end": "2942060"
  },
  {
    "text": "will actually have a way that it can JIT the method more than once so up to now in dotnet framework the methods been",
    "start": "2942060",
    "end": "2949560"
  },
  {
    "text": "cheated once and that's it that's then the native code that's run every single time from that point onwards take",
    "start": "2949560",
    "end": "2954750"
  },
  {
    "text": "compilation kind of breaks that dependency and says tell you what the first time and methods called will do the most basic thing will just get some",
    "start": "2954750",
    "end": "2962010"
  },
  {
    "text": "code out those because the possibility be correct it will be you know is not we're not going to check anything out there but it will be the minimum they",
    "start": "2962010",
    "end": "2967740"
  },
  {
    "text": "call it min ops minimize minimum optimization and that doesn't do any of the clever tricks but it means it can do",
    "start": "2967740",
    "end": "2974340"
  },
  {
    "text": "it very quickly so it helps startup time because it can JIT these methods quicker then if that method is called lots of",
    "start": "2974340",
    "end": "2981480"
  },
  {
    "text": "times let's have another go at it and let's do the max from optimizations or what we would have done before or even",
    "start": "2981480",
    "end": "2987030"
  },
  {
    "text": "more you know once it's got the two modes it can then decide and that's done in an asynchronous way so once the",
    "start": "2987030",
    "end": "2992610"
  },
  {
    "text": "methods being called enough times ok right this methods important it's on the hot path whatever it's called enough times",
    "start": "2992610",
    "end": "2998650"
  },
  {
    "text": "I'm gonna in the background this method again I'm gonna do the full optimizations I can take not as long as",
    "start": "2998650",
    "end": "3004349"
  },
  {
    "text": "I want but you know taking seconds when it's in the background asynchronously is not an issue and it's worthwhile because",
    "start": "3004349",
    "end": "3009630"
  },
  {
    "text": "if that method then goes on to be called a lot more time just the extra work the JIT can do there so in terms of the main",
    "start": "3009630",
    "end": "3016109"
  },
  {
    "text": "differences there's another level of indirection after it's been fitted and it goes through the priest of again if",
    "start": "3016109",
    "end": "3022470"
  },
  {
    "text": "you see with two compilation and that free stub at the moment is basically a fairly simple counter and it counts how",
    "start": "3022470",
    "end": "3029400"
  },
  {
    "text": "many times then the native code is actually called and then when it gets to a certain point it says right okay this",
    "start": "3029400",
    "end": "3035279"
  },
  {
    "text": "is a method I consider to be important I'm going to ask the jitter on a background thread to do this and then",
    "start": "3035279",
    "end": "3040499"
  },
  {
    "text": "when it's finished it has the switches",
    "start": "3040499",
    "end": "3045690"
  },
  {
    "text": "in again levels of indirection it can just point so now points to the optimized native code he still got the",
    "start": "3045690",
    "end": "3051779"
  },
  {
    "text": "original native code because there's various reasons you might want to swap back to that or it needs to have that",
    "start": "3051779",
    "end": "3058170"
  },
  {
    "text": "for debugging and certain things like that so it still has that native original code around it did the first time and once this is in there and they",
    "start": "3058170",
    "end": "3065519"
  },
  {
    "text": "tell you on debug by default and they see that the main issue why they didn't turn it on by default in the first place",
    "start": "3065519",
    "end": "3070739"
  },
  {
    "text": "is because this is an extra level of indirection you're paying a little bit of a cost to go through this mechanism even if you don't use it so they're",
    "start": "3070739",
    "end": "3077880"
  },
  {
    "text": "making sure they can make that as quick as possible or within you know acceptable limits because once you have",
    "start": "3077880",
    "end": "3084599"
  },
  {
    "text": "this mechanism in then there can be lots of reasons you might want to optimize code if anyone knows like say jvn and",
    "start": "3084599",
    "end": "3092880"
  },
  {
    "text": "the hotspot compiler one of the issues you get with virtual methods is if",
    "start": "3092880",
    "end": "3098670"
  },
  {
    "text": "there's only one concrete implementation or sort of interface implementations there's only one class the influencer",
    "start": "3098670",
    "end": "3104579"
  },
  {
    "text": "interface you don't need to do the runtime lookup to say right it's Class A or Class B you can just say right there's only one concrete instantiation",
    "start": "3104579",
    "end": "3110930"
  },
  {
    "text": "but the problem with that is if a type gets loaded later a second class that also implements that interface it has to",
    "start": "3110930",
    "end": "3117299"
  },
  {
    "text": "turn that optimization off and Nets not being able to do that he's always had to allow for that second scenario so this T",
    "start": "3117299",
    "end": "3124619"
  },
  {
    "text": "compilation gives more benefits down the line and I think we're going to see once it's turned on and they know that the",
    "start": "3124619",
    "end": "3130619"
  },
  {
    "text": "you know killing performance and but helping performance then they're going to start to use it in more things and it means",
    "start": "3130619",
    "end": "3135840"
  },
  {
    "text": "that the main promise is that the JIT compiler the second time around can do lots more things it can be a lot more",
    "start": "3135840",
    "end": "3141540"
  },
  {
    "text": "intelligent it could potentially look at collecting other information along the way things like that so that's one of",
    "start": "3141540",
    "end": "3149400"
  },
  {
    "text": "the few bits of this tool that is stuff around in dotnet course everything else so we've we've talked about JIT compilation at this point our main",
    "start": "3149400",
    "end": "3155369"
  },
  {
    "text": "method has been executed but that's not quite everything else because we have",
    "start": "3155369",
    "end": "3161040"
  },
  {
    "text": "these stubs because when we call out to console dot write line that's not",
    "start": "3161040",
    "end": "3167070"
  },
  {
    "text": "implemented in you know that's calling out to the OS or the C++ library or wherever it is it's something outside of",
    "start": "3167070",
    "end": "3172109"
  },
  {
    "text": "the dotnet runtime that does to use that and sort of talked about at the beginning but this is so to be clear all",
    "start": "3172109",
    "end": "3179700"
  },
  {
    "text": "this is this is all the methods that were just in that application this is saying you can pull out from perfu I'm",
    "start": "3179700",
    "end": "3185010"
  },
  {
    "text": "not entirely sure what he's span helpers are here actually I need to figure that one out but we can see our hello world's",
    "start": "3185010",
    "end": "3190200"
  },
  {
    "text": "main there and then these stubs the way it works with peer invoke you can see",
    "start": "3190200",
    "end": "3195359"
  },
  {
    "text": "they end up in system console that's because we're calling cansado right line and these are basically overload you've",
    "start": "3195359",
    "end": "3200520"
  },
  {
    "text": "got an int you've got one with now in you've got into 32 sorry in int when it",
    "start": "3200520",
    "end": "3205830"
  },
  {
    "text": "starts to call out to native methods when you have in effect the DLL import attributes behind the scenes this is",
    "start": "3205830",
    "end": "3212339"
  },
  {
    "text": "what it's doing it's creating these stubs so that when you call that method again level of indirection",
    "start": "3212339",
    "end": "3218490"
  },
  {
    "text": "yeah actually goes via stub the stub does whatever housekeeping needs to be done before actually calling into the",
    "start": "3218490",
    "end": "3224910"
  },
  {
    "text": "native method and that is mostly if we take the example of console dat right line that'll be converting the string",
    "start": "3224910",
    "end": "3231060"
  },
  {
    "text": "from a dotnet managed string into whatever format the native library and also making sure that the garbage",
    "start": "3231060",
    "end": "3237570"
  },
  {
    "text": "collector doesn't move that string around while it's in that method because the garbage collector expects to be able to move objects around as and when it",
    "start": "3237570",
    "end": "3244440"
  },
  {
    "text": "wants but once control passes out it's a native code that you know it's different so it has to do some things around",
    "start": "3244440",
    "end": "3249869"
  },
  {
    "text": "safety there and then when that method returns it checks the error code from the native method if your if the native",
    "start": "3249869",
    "end": "3255599"
  },
  {
    "text": "method is returning data back into the runtime it needs to turn that Marshall that back from there's a few things",
    "start": "3255599",
    "end": "3260760"
  },
  {
    "text": "there so that's what's going on there so he finally after 15 minutes walk",
    "start": "3260760",
    "end": "3267840"
  },
  {
    "text": "through everything that the runtime does in that simple application just want a few caveats so we never triggered the GC",
    "start": "3267840",
    "end": "3274080"
  },
  {
    "text": "in that simple application there's a few things that would happen if your application was a lot longer running and",
    "start": "3274080",
    "end": "3279210"
  },
  {
    "text": "a few bits the runtime but you know 50 minutes is enough for anyone to have any stuff but if you want more information I",
    "start": "3279210",
    "end": "3285480"
  },
  {
    "text": "blog about this sort of stuff lots of other people do so that's the resources for learning net internals as",
    "start": "3285480",
    "end": "3290700"
  },
  {
    "text": "a post I've done there that's other people's blogs on this tools if you're an explorer this yourself or techniques",
    "start": "3290700",
    "end": "3296490"
  },
  {
    "text": "that I use when I'm exploring it if people are interested in that level other presentations and talks there's quite a lot of people who are talking",
    "start": "3296490",
    "end": "3303030"
  },
  {
    "text": "about Dada internals in different ways the book at the runtime is a books a bit",
    "start": "3303030",
    "end": "3309750"
  },
  {
    "text": "anyway it's markdown documents is text and but what it is is written by the dotnet runtime engineers for other",
    "start": "3309750",
    "end": "3316920"
  },
  {
    "text": "dotnet runtime engineers so it's not an introductory text we say but what it is is a real good explanation of why this",
    "start": "3316920",
    "end": "3323940"
  },
  {
    "text": "stuff does what is and how it works a lot of my blog posts are basically I read the page on there about some topics",
    "start": "3323940",
    "end": "3330390"
  },
  {
    "text": "that walking exception handling I figure I know maybe 10% of it I then go away did a bit more research look at the code",
    "start": "3330390",
    "end": "3336630"
  },
  {
    "text": "come back and then by the time I think I can read that page and it makes sense to me I figure I'll probably learn enough",
    "start": "3336630",
    "end": "3342180"
  },
  {
    "text": "to write blog post so I try and write posts that might help people get into the runtime look at the runtime book but",
    "start": "3342180",
    "end": "3348240"
  },
  {
    "text": "yeah if you're into runtimes anyway you might find it easy to get into but it's not meant as an introductory so that is",
    "start": "3348240",
    "end": "3355950"
  },
  {
    "text": "it any questions yes",
    "start": "3355950",
    "end": "3363050"
  },
  {
    "text": "yeah so the question is about tools for the lowly looking at low level stuff cross-platform I mostly do this on",
    "start": "3372010",
    "end": "3379670"
  },
  {
    "text": "Windows so I don't know for sure but what I have seen is that clearly in the beginning you know when they were",
    "start": "3379670",
    "end": "3385610"
  },
  {
    "text": "getting when I porting to other run times they're basically making the apps work and it's only over time that",
    "start": "3385610",
    "end": "3390890"
  },
  {
    "text": "tooling has grown so recently so that's that perfu at 5 jg clean that's not",
    "start": "3390890",
    "end": "3397010"
  },
  {
    "text": "gonna be cross-platform it's like WPF the UI but the collection part of the per few apps is more across platforms as",
    "start": "3397010",
    "end": "3403340"
  },
  {
    "text": "a per script will let you at least click those events on non Windows OS and then",
    "start": "3403340",
    "end": "3409130"
  },
  {
    "text": "on a Windows OS you can analyze them I think they're trying to make more tooling that doesn't require that",
    "start": "3409130",
    "end": "3414350"
  },
  {
    "text": "because even that level is maybe not great and but as far as I know the",
    "start": "3414350",
    "end": "3419590"
  },
  {
    "text": "profiling and debugging api's are cross-platform ok so that's why you started to see tools but yeah clearly",
    "start": "3419590",
    "end": "3426980"
  },
  {
    "text": "we've had a hit heritage of being Windows only so stuff doesn't catch up but perfuse probably the one that's they",
    "start": "3426980",
    "end": "3434180"
  },
  {
    "text": "try and as they add new features like Ted compilation is now per few events so they try and make sure that perfu is the",
    "start": "3434180",
    "end": "3440720"
  },
  {
    "text": "one place you can get your stuff I think because they use it themselves whether there's going to be a cross-platform per",
    "start": "3440720",
    "end": "3446450"
  },
  {
    "text": "field I know but at least at the moment you can collect it on other systems so that's probably your best option for that stuff per few aside from yeah like",
    "start": "3446450",
    "end": "3454760"
  },
  {
    "text": "we're pretty spoiled with so you can debug through I showed you the code and video you can debug through the runtime of Visual Studio if you want to do the",
    "start": "3454760",
    "end": "3460700"
  },
  {
    "text": "same you have to use gdb and stuff it out so I think you can use I think the best option you have for debugging on",
    "start": "3460700",
    "end": "3467690"
  },
  {
    "text": "other platforms is they made Gd but they made SOS work on gdb so you've got you",
    "start": "3467690",
    "end": "3472850"
  },
  {
    "text": "couldn't have windbg debugging you can do that level on in terms of the runtime",
    "start": "3472850",
    "end": "3478340"
  },
  {
    "text": "for dotnet code is slightly different so it's not it's not it's not up there as",
    "start": "3478340",
    "end": "3484340"
  },
  {
    "text": "Windows yeah yeah when is we've had yeah ten years of just being Windows only so that they are I know that they realize",
    "start": "3484340",
    "end": "3490340"
  },
  {
    "text": "it's something that's missing and I know what I've seen recently is amazing a lot more of the global to link so you can",
    "start": "3490340",
    "end": "3496580"
  },
  {
    "text": "have things like you know you've got run they're going to have dotnet and dump for making a memory dump net source",
    "start": "3496580",
    "end": "3504310"
  },
  {
    "text": "for symbols collecting the symbols dotnet analyze a sort so there's a yes I",
    "start": "3504310",
    "end": "3509680"
  },
  {
    "text": "think he's under dotnet slash Diagnostics as a repository into the command line to cover the other way",
    "start": "3509680",
    "end": "3516760"
  },
  {
    "text": "they're going forward as well yeah I",
    "start": "3516760",
    "end": "3533890"
  },
  {
    "text": "have any other questions yes yeah yeah",
    "start": "3533890",
    "end": "3559570"
  },
  {
    "text": "so you're right yeah we saw in that when I showed that demo so and I believe that sort of the assemblies that the yeah",
    "start": "3559570",
    "end": "3567130"
  },
  {
    "text": "I've not looked into how it treats a differently base is things like the Assemblies that I think a mandatory have",
    "start": "3567130",
    "end": "3573940"
  },
  {
    "text": "to be there and I think they have special rules and that they can do stuff that more higher-level assemblies can but generally I think they equate",
    "start": "3573940",
    "end": "3582340"
  },
  {
    "text": "roughly they equate to what's the name of in the.net you know you have the",
    "start": "3582340",
    "end": "3587470"
  },
  {
    "text": "dotnet core app you know you don't you don't include them all in the beginning",
    "start": "3587470",
    "end": "3593170"
  },
  {
    "text": "of dotnet core you had to include everything you know you had to include system dot string as a DLL they bundle those up into the kind of meta packages",
    "start": "3593170",
    "end": "3599680"
  },
  {
    "text": "and I think that trusted platform assemblies roughly equate to those meta passages which is like everything that's",
    "start": "3599680",
    "end": "3605860"
  },
  {
    "text": "kind of mandatory and I don't know how it works in terms of security because we no longer have code access security and",
    "start": "3605860",
    "end": "3611680"
  },
  {
    "text": "things like that I don't think it really affects that you know they can do that sort of thing",
    "start": "3611680",
    "end": "3618210"
  },
  {
    "text": "okay yeah yes yeah yeah yes so I think",
    "start": "3621680",
    "end": "3630480"
  },
  {
    "text": "they would get added to the trusted platform assemblies list yeah I think possibly it might be the distinction might be anything that's come from the",
    "start": "3630480",
    "end": "3637560"
  },
  {
    "text": "runtime all of the base class libraries counters trusted platform versus user",
    "start": "3637560",
    "end": "3642930"
  },
  {
    "text": "code as in you know what code we'd write ourselves I think that might be the distinction between trusted platform assemblies and elsewhere but all that",
    "start": "3642930",
    "end": "3662760"
  },
  {
    "text": "stuff is is outside of the runtime so that simple launcher app you know Matt CLR thing I showed you that doesn't have",
    "start": "3662760",
    "end": "3668910"
  },
  {
    "text": "any knowledge of that that's still built into the dotnet tooling you know dotnet run and stuff with that that handles",
    "start": "3668910",
    "end": "3674520"
  },
  {
    "text": "that at the end of the day I think basically all that does is build up the trusted platforms assemblies lists and",
    "start": "3674520",
    "end": "3679860"
  },
  {
    "text": "passes it to the hosting API and says right here so but it does it goes through different routes doesn't it it",
    "start": "3679860",
    "end": "3684930"
  },
  {
    "text": "picks up that JSON it you know pulls down NuGet packages it knows about dependencies it knows about storing all",
    "start": "3684930",
    "end": "3690630"
  },
  {
    "text": "that sauce stuff it knows where to look for the different runtimes but yeah the runtime really doesn't know anything about that the main way stuff is passed",
    "start": "3690630",
    "end": "3697380"
  },
  {
    "text": "into the runtime is that track trusted platform assemblies list and then basically environment variables settings",
    "start": "3697380",
    "end": "3702810"
  },
  {
    "text": "and yeah you know GC configuration settings as there's very that the core",
    "start": "3702810",
    "end": "3709500"
  },
  {
    "text": "of the hosting API is pretty simple it's like here Cindy allows is the fundamental modes like GC workstation or",
    "start": "3709500",
    "end": "3716820"
  },
  {
    "text": "server and then off it off you guys yeah any other questions",
    "start": "3716820",
    "end": "3723380"
  },
  {
    "text": "yes",
    "start": "3723380",
    "end": "3726380"
  },
  {
    "text": "yeah yeah yes yes yes so the question",
    "start": "3729970",
    "end": "3743150"
  },
  {
    "text": "was around now that domains have gone one of the things that people would have done with them is using it there's a way to load plugins and then at the end of",
    "start": "3743150",
    "end": "3749720"
  },
  {
    "text": "it tear down the app to main than that go away or things like that so they have something called is it application",
    "start": "3749720",
    "end": "3755690"
  },
  {
    "text": "context sorry assembly like I said thank you thank you",
    "start": "3755690",
    "end": "3760880"
  },
  {
    "text": "yeah that's em below context and it's under the banner of unload ability and the recent preview sorry the recent post",
    "start": "3760880",
    "end": "3768049"
  },
  {
    "text": "about dotnet core 3 preview 2 has a section on unload ability and if you scroll down there there's a design doc",
    "start": "3768049",
    "end": "3773930"
  },
  {
    "text": "and how to dock and for that scenario yes is exactly what it's meant for it's",
    "start": "3773930",
    "end": "3779269"
  },
  {
    "text": "meant for I'd like to load some dll's in I promised not to have any dependencies on",
    "start": "3779269",
    "end": "3784549"
  },
  {
    "text": "those in code that's still there cuz that's one of the issues is once you have a you know a link across it can't tear down that if it knows you're",
    "start": "3784549",
    "end": "3790190"
  },
  {
    "text": "storing in a static field or whatever it is but as long as you respect that at the end of it or actually not the end of",
    "start": "3790190",
    "end": "3795680"
  },
  {
    "text": "it the garbage collector when it knows that it will then clean up so yeah that unload ability and so they're sort I",
    "start": "3795680",
    "end": "3800930"
  },
  {
    "text": "think they're doing stuff in that kind of way more explicit right this is one scenario this is actually what people were using app domains for a lot of the",
    "start": "3800930",
    "end": "3807079"
  },
  {
    "text": "times the the proper isolation is not a thing it's the actual the fact you want",
    "start": "3807079",
    "end": "3812180"
  },
  {
    "text": "to load some stuff at the end of it you want to take it away so they've gone down that route yeah",
    "start": "3812180",
    "end": "3817480"
  },
  {
    "text": "oh yeah yeah yeah I don't you because Java has a",
    "start": "3820920",
    "end": "3826950"
  },
  {
    "text": "class like this doesn't and it can be yeah I don't think it's quite as configurable as that but it's yeah I think starting to get that way where you",
    "start": "3826950",
    "end": "3833010"
  },
  {
    "text": "can certainly you can load sorry yeah I",
    "start": "3833010",
    "end": "3838530"
  },
  {
    "text": "don't think it's going to go dear cousin from my own son in Java you have different class loaders and and stuff that's loaded in one class later can't",
    "start": "3838530",
    "end": "3844770"
  },
  {
    "text": "see things in another I don't think they're with you haven't looked into the unload ability stuff loads to know but I",
    "start": "3844770",
    "end": "3851880"
  },
  {
    "text": "don't think it sort of prevents you calling across outside of it it's it's more of when I'm done with these things",
    "start": "3851880",
    "end": "3858390"
  },
  {
    "text": "I want them to go away because of memory and I don't want them hanging around especially if they're dll's on disk you don't want to reference it that sort of",
    "start": "3858390",
    "end": "3864360"
  },
  {
    "text": "stuff so any more questions no okay",
    "start": "3864360",
    "end": "3871320"
  },
  {
    "text": "thank you very much please come and get",
    "start": "3871320",
    "end": "3878580"
  },
  {
    "text": "t-shirts and stickers because I don't want to carry what",
    "start": "3878580",
    "end": "3882500"
  }
]