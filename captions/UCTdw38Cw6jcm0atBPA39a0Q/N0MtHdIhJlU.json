[
  {
    "text": "right on a huge crowd but not",
    "start": "7230",
    "end": "12330"
  },
  {
    "text": "the flavor of this conference so hopefully we'll grow the the pint and",
    "start": "12330",
    "end": "19260"
  },
  {
    "text": "presence at NDC over the years so this is a tip of the spear I guess so today",
    "start": "19260",
    "end": "26880"
  },
  {
    "text": "I'm Austin Bingham I work for end and half own with this fellow here 60 North",
    "start": "26880",
    "end": "32009"
  },
  {
    "text": "a small software development and consulting and training company based out of Norway and we do a lot of work",
    "start": "32010",
    "end": "38370"
  },
  {
    "text": "with Python and has to have done so historically not just with 60 North but with other companies we've worked for",
    "start": "38370",
    "end": "43739"
  },
  {
    "text": "and today I wanted to get kind of a an introduction to what I call the",
    "start": "43739",
    "end": "49680"
  },
  {
    "text": "landscape of testing tools in Python you may have seen some of these if you any",
    "start": "49680",
    "end": "55769"
  },
  {
    "text": "work with clients on already and hopefully you haven't seen them all or at least teach you some new tricks will",
    "start": "55769",
    "end": "60809"
  },
  {
    "text": "cover everything from well let's look at the agenda I have modules for unit test",
    "start": "60809",
    "end": "67260"
  },
  {
    "text": "which is built into the standard library I have a module unlock on PI test which is a in some sense a replacement for",
    "start": "67260",
    "end": "73830"
  },
  {
    "text": "unit tests and more exotically a tool called hypothesis which does property based testing and a tool called cosmic",
    "start": "73830",
    "end": "80640"
  },
  {
    "text": "ray which does mutation testing for Python I've on the main author on cosmic",
    "start": "80640",
    "end": "86490"
  },
  {
    "text": "ray so you know hard questions about that I can help answer those in the 60",
    "start": "86490",
    "end": "91740"
  },
  {
    "text": "minute format we have here say we can't really cover all of this meaningfully so I think we'll go with unit test",
    "start": "91740",
    "end": "97740"
  },
  {
    "text": "hypothesis at cosmic ray in that order and if we have time left I'll do a quick intro to PI test but given that we've",
    "start": "97740",
    "end": "105030"
  },
  {
    "text": "really only got four people is there a preference is anybody really want to hear about anything else in there okay",
    "start": "105030",
    "end": "111750"
  },
  {
    "text": "then we'll go with that order and just real quick are you using Python now okay",
    "start": "111750",
    "end": "118920"
  },
  {
    "text": "so it's not like not not paying the bills and how about how about you you",
    "start": "118920",
    "end": "124380"
  },
  {
    "text": "started pricing last week your company did okay well that's good then I think you really will get quite a bit out of",
    "start": "124380",
    "end": "130140"
  },
  {
    "text": "this will give you some good ideas about how you can effectively test you're practically really start to do so right",
    "start": "130140",
    "end": "138299"
  },
  {
    "text": "so let's let's dig right in this the slide deck by the way is available on github i'll have a link later on it's a",
    "start": "138299",
    "end": "144420"
  },
  {
    "text": "nice and note if you've never heard of that it's essentially a way to mix text notes and actual code and I'm hoping it's an",
    "start": "144420",
    "end": "150590"
  },
  {
    "text": "effective way to present this material so unit test unit test is testing with",
    "start": "150590",
    "end": "156859"
  },
  {
    "text": "the standard library to built into the standard library so that means that any Python installation that hasn't been mangled will have this and that's",
    "start": "156859",
    "end": "162620"
  },
  {
    "text": "perhaps its greatest strength the fact that it's always there the reason I",
    "start": "162620",
    "end": "167719"
  },
  {
    "text": "think it's important to learn unit tests because you will see it if you start using any third-party libraries and any",
    "start": "167719",
    "end": "172969"
  },
  {
    "text": "code somebody else has written you're very likely thrown into it because it is sort of pervasive and it's a powerful",
    "start": "172969",
    "end": "178519"
  },
  {
    "text": "tool to know and it's good to have you can write to you know spot tests very quickly with it and it's um it's a",
    "start": "178519",
    "end": "184010"
  },
  {
    "text": "little bit weird it doesn't follow Pepe entirely different strange things but by and large it's a very effective tool the",
    "start": "184010",
    "end": "191239"
  },
  {
    "text": "basic features that unit tests and n PI tests and other tools in that area provide you our test automation",
    "start": "191239",
    "end": "196939"
  },
  {
    "text": "obviously that's it's a raison d'etre that's why it exists to help you automate and have repeatable tests so",
    "start": "196939",
    "end": "203450"
  },
  {
    "text": "that when you make a change you can run your tests and go get some coffee and come back and see the results it has",
    "start": "203450",
    "end": "208909"
  },
  {
    "text": "facilities for doing set up and shut down and tear down around your your gear",
    "start": "208909",
    "end": "214760"
  },
  {
    "text": "code around your tests what they call fixtures typically so if you need to create temporary files or clear a",
    "start": "214760",
    "end": "220010"
  },
  {
    "text": "database or something it has tools for doing that it allows you to aggregate and sort of organize your tests so if",
    "start": "220010",
    "end": "225409"
  },
  {
    "text": "you just want to run a subset of your tests say the database stuff or the you know the communication stuff or something like that you can organize",
    "start": "225409",
    "end": "231199"
  },
  {
    "text": "your tests in such a way that it's easy to select which once you run and it has a nice independence between the test",
    "start": "231199",
    "end": "237229"
  },
  {
    "text": "execution engine and detest reporting engine so if you want to make fancy reports of your own and inject them into",
    "start": "237229",
    "end": "243349"
  },
  {
    "text": "some report that you presented somebody or put it up on the screen so everybody can see it makes it pretty",
    "start": "243349",
    "end": "249259"
  },
  {
    "text": "straightforward to do that the basic way you organize tests and unit tests is",
    "start": "249259",
    "end": "255620"
  },
  {
    "text": "with something called test case and this is a class and use it as a base class you inherit from it and then you can use",
    "start": "255620",
    "end": "261169"
  },
  {
    "text": "some of its methods and you create your own methods that actually run the test or implement the tests so it provides",
    "start": "261169",
    "end": "268130"
  },
  {
    "text": "basic assertion methods by which we'll look at these in detail the assertion methods or how you express the truth you",
    "start": "268130",
    "end": "274130"
  },
  {
    "text": "expect to to hold at some point in time we'll talk about fixtures which are the way that",
    "start": "274130",
    "end": "280260"
  },
  {
    "text": "you do setup and teardown for your tests and some related test methods will kind",
    "start": "280260",
    "end": "285480"
  },
  {
    "text": "of see various miscellaneous utility functions the basic approach when you",
    "start": "285480",
    "end": "291210"
  },
  {
    "text": "write tests and unit test is you create a subclass of test case and then you write some methods that start with the",
    "start": "291210",
    "end": "296520"
  },
  {
    "text": "word test and these methods get discovered by the unit test framework and then executed when you run things so",
    "start": "296520",
    "end": "303210"
  },
  {
    "text": "what is the simplest possible test case look like it looks like this and I should just point out this % % unit test",
    "start": "303210",
    "end": "310200"
  },
  {
    "text": "run you'll see these things those are magic code words to the ipython engine to help to execute this you can ignore",
    "start": "310200",
    "end": "316260"
  },
  {
    "text": "those that's not actually Python code I'm looking for a way to make those disappear in the slides but it can't be",
    "start": "316260",
    "end": "321690"
  },
  {
    "text": "done right now but the basic structure is what you see here that this is a test case that does nothing and inherit",
    "start": "321690",
    "end": "328050"
  },
  {
    "text": "through test case and he just says pass so it's doing absolutely nothing but I can I can run this so let's do that right so what you expected you know zero",
    "start": "328050",
    "end": "335640"
  },
  {
    "text": "tests run zero failures your errors so in some sense that's really good in another sense that's just not terribly",
    "start": "335640",
    "end": "341160"
  },
  {
    "text": "exciting so but that that is the that's the fundamental that's the foundation of",
    "start": "341160",
    "end": "346620"
  },
  {
    "text": "how you do things in unit tests the way you write actual tests tests it start to",
    "start": "346620",
    "end": "352020"
  },
  {
    "text": "do assertions and make claims about how the universe ought to look is that you create methods on your your sub class",
    "start": "352020",
    "end": "358530"
  },
  {
    "text": "let's start with the word test you can you can actually control a that's again you can configure unit tests to look for",
    "start": "358530",
    "end": "365190"
  },
  {
    "text": "different patterns with my default it looks for methods that start with test so in this case let's try the laser here",
    "start": "365190",
    "end": "371100"
  },
  {
    "text": "we have our test case subclass and we have a method here that's empty I mean",
    "start": "371100",
    "end": "376140"
  },
  {
    "text": "this will be detected because it starts with test this also starts with test although not test underscores it's",
    "start": "376140",
    "end": "381450"
  },
  {
    "text": "irrelevant test your test underscore this also gets detected as a test but this does not by default get detected as",
    "start": "381450",
    "end": "387390"
  },
  {
    "text": "a test so this is invisible in some sense to unit test so I can run this as well and what we should expect to see is",
    "start": "387390",
    "end": "393720"
  },
  {
    "text": "that two tests ran no failures no errors great so still not you know the most",
    "start": "393720",
    "end": "399150"
  },
  {
    "text": "exciting thing in the world but you can kind of see now what unit test is detecting when it scans for tests",
    "start": "399150",
    "end": "407169"
  },
  {
    "text": "so now we want to look at assertions we really want to start making claims about you know what we expect to be true when",
    "start": "407169",
    "end": "412400"
  },
  {
    "text": "we reach a certain point in execution we expect to be not true or how we expect data structures to look and things like",
    "start": "412400",
    "end": "417529"
  },
  {
    "text": "that so the whole bunch of methods on the test case subclass called a search",
    "start": "417529",
    "end": "422960"
  },
  {
    "text": "something assert that this is true or asserted that this is equal to this and that's how you tell unit tests to run",
    "start": "422960",
    "end": "430550"
  },
  {
    "text": "tests a failure of an assertion is a failure of a test so how does that look",
    "start": "430550",
    "end": "436419"
  },
  {
    "text": "so finally we have tests to do something this test always passes because it trivial e asserts true that's true okay",
    "start": "436419",
    "end": "444379"
  },
  {
    "text": "so this is saying that whatever expression is passed in in this case true we expect it to be true if it's not",
    "start": "444379",
    "end": "450559"
  },
  {
    "text": "then if it's false or false e and Python terms then this will be a failed test and this will always fail this we're",
    "start": "450559",
    "end": "457009"
  },
  {
    "text": "asserting false we expected this expression to be false and it's actually true so of course what we'll see is that",
    "start": "457009",
    "end": "463099"
  },
  {
    "text": "we get to test run one failed and test always fails it's the one has failed so this is my secret code f for fail this",
    "start": "463099",
    "end": "472099"
  },
  {
    "text": "by the way this what you're seeing printed out here I can do that because of the separation of the reporting",
    "start": "472099",
    "end": "477439"
  },
  {
    "text": "engine from the execution engine I was able to ask in a test to run my tests grab the results object and then inspect",
    "start": "477439",
    "end": "483979"
  },
  {
    "text": "it to figure out what to print down here so this is an example of the separation of execution and reporting which is not",
    "start": "483979",
    "end": "489740"
  },
  {
    "text": "so easy to do in for example pie tests which is kind of why I parked on it a little bit but this this is ultimately",
    "start": "489740",
    "end": "495439"
  },
  {
    "text": "this is this is finally an actual functioning test this is the flavor of what a lot of your tests are going to look like a bunch of things that say",
    "start": "495439",
    "end": "501649"
  },
  {
    "text": "test something run some code check some assertions and that's it and they should typically be quite small if they get to",
    "start": "501649",
    "end": "508159"
  },
  {
    "text": "be big you want to start looking at using six years which will examine in a bit there are a lot of assertions built",
    "start": "508159",
    "end": "515360"
  },
  {
    "text": "in to the test case class I won't go over them all in detail you can get these slides and see but you can check",
    "start": "515360",
    "end": "520940"
  },
  {
    "text": "the two things are equal or not equal or true or false or is or is not for reference reference checking is not",
    "start": "520940",
    "end": "528290"
  },
  {
    "text": "instance if you need to check us some things of a certain type and you know in not and there's a whole bunch of these and you can see all of them in the test",
    "start": "528290",
    "end": "534620"
  },
  {
    "text": "case documentation if you want to but remember these are all methods on the test case class so if you look back here wait",
    "start": "534620",
    "end": "543709"
  },
  {
    "text": "sorry not there that's why we say self a",
    "start": "543709",
    "end": "548959"
  },
  {
    "text": "search false this self of course is this class instance of this class and a search false is defined on test case",
    "start": "548959",
    "end": "555170"
  },
  {
    "text": "that's the basic mechanism of how these assertions are made available to another",
    "start": "555170",
    "end": "561860"
  },
  {
    "text": "kind of thing also want to check for especially in Python which is a very sort of exception centric language uses",
    "start": "561860",
    "end": "567230"
  },
  {
    "text": "exceptions for all sorts of stuff and you're encouraged in your own code in your own api's to use exceptions you want to check that a certain kind of",
    "start": "567230",
    "end": "573410"
  },
  {
    "text": "exception is thrown in a certain context and so there's assert raises also a",
    "start": "573410",
    "end": "578480"
  },
  {
    "text": "method on the on the test case class which you use as a context manager so in",
    "start": "578480",
    "end": "583970"
  },
  {
    "text": "a in a wisp lock if that's if that's an exotic term for you and let's see how that looks so here we want to test that",
    "start": "583970",
    "end": "591649"
  },
  {
    "text": "an index error is thrown in a certain situation and so it's very synthetic of course we say with self assert raises",
    "start": "591649",
    "end": "597800"
  },
  {
    "text": "indexer so we're saying in the context of this block down here we expect an index error to be thrown and of course",
    "start": "597800",
    "end": "604160"
  },
  {
    "text": "we just raise an index error just to simulate it happening which you could imagine more complex code that did something that should raise an index",
    "start": "604160",
    "end": "610370"
  },
  {
    "text": "error similarly here we're gonna have a failing test because we assert raises that a value error will be thrown",
    "start": "610370",
    "end": "615649"
  },
  {
    "text": "somewhere in here and of course pass does not throw a value error so we can see that in action great two tests were",
    "start": "615649",
    "end": "622610"
  },
  {
    "text": "run and test value error failed so this this is the canonical way and the correct way I'm going to say to test for",
    "start": "622610",
    "end": "629329"
  },
  {
    "text": "exceptions you could maybe in some really weird situations need to use try",
    "start": "629329",
    "end": "634970"
  },
  {
    "text": "catch and then assert inside the catch block or something like that to check for some bizarre situation but by and",
    "start": "634970",
    "end": "641540"
  },
  {
    "text": "large testing for exceptions should be done using this approach and this is identical to the approach used in PI",
    "start": "641540",
    "end": "647660"
  },
  {
    "text": "tests for example so it's an accepted idiomatic way to do this kind of work and it's kind of elegant I like this",
    "start": "647660",
    "end": "653390"
  },
  {
    "text": "this use of context managers here feels right so six years we've mentioned these",
    "start": "653390",
    "end": "661130"
  },
  {
    "text": "a few times fixtures are essentially the way that you do test setup and cleanup so before test is run I need to do some",
    "start": "661130",
    "end": "667670"
  },
  {
    "text": "work to set the you know to kind of clear the floor baby or create a temp file or something along those lines and then after the test execute I may need",
    "start": "667670",
    "end": "674329"
  },
  {
    "text": "to clean up remove a database table or delete the file that I created or any number of things so there are",
    "start": "674329",
    "end": "682130"
  },
  {
    "text": "essentially six hooks that you can use there's test case setup so this is a",
    "start": "682130",
    "end": "687350"
  },
  {
    "text": "method it's an instance method on test case and setup if you define it well you it's always define means you create your",
    "start": "687350",
    "end": "693140"
  },
  {
    "text": "own your code will be executed before every single test and then tear down similarly is executed after every single",
    "start": "693140",
    "end": "699770"
  },
  {
    "text": "test you run in that in that class setup class is a bit different setup class is",
    "start": "699770",
    "end": "705440"
  },
  {
    "text": "executed once before any tests in a classes run and then tear down class is executed after all of the tests in the",
    "start": "705440",
    "end": "711949"
  },
  {
    "text": "class events only once it's like a bigger sandwich than the setup and teardown and then finally setup module",
    "start": "711949",
    "end": "717350"
  },
  {
    "text": "and teardown module work like this but at the module scope so setup module is executed once at before any test in a",
    "start": "717350",
    "end": "723380"
  },
  {
    "text": "modular executed and then tear down module analogously at the end and we'll see i'll try to demonstrate that here by",
    "start": "723380",
    "end": "730459"
  },
  {
    "text": "showing you how well you'll see in a second but so what are they used for you could probably imagine a few things but",
    "start": "730459",
    "end": "736370"
  },
  {
    "text": "very common in my experience or things like you know creating and clearing database tables you're putting a database into a known state so that your",
    "start": "736370",
    "end": "742610"
  },
  {
    "text": "tests know what they're getting into when they start to execute you might call hygienic testing configuring",
    "start": "742610",
    "end": "748970"
  },
  {
    "text": "entities numbers so you can use setup and teardown to set values on the test case class itself and then use those",
    "start": "748970",
    "end": "754550"
  },
  {
    "text": "values in the test or maybe create temporary files this is very very common in a lot of testing environments but",
    "start": "754550",
    "end": "762890"
  },
  {
    "text": "basically think of it as you know setup and cleanup that's that's what fixtures reform use me so how do they look in",
    "start": "762890",
    "end": "772970"
  },
  {
    "text": "practice so here we've created you know yet another test case sub class setup class and teardown class turbos class",
    "start": "772970",
    "end": "779060"
  },
  {
    "text": "both class methods if you're coming from C++ you would think of the master static methods or something like that and these",
    "start": "779060",
    "end": "784279"
  },
  {
    "text": "are the ones that are executed before any function in a for any test in a glass and this is executed after all the",
    "start": "784279",
    "end": "790490"
  },
  {
    "text": "tests in class and all we're going to do is print some some string so that we can kind of see the flow of the logic I'm not going",
    "start": "790490",
    "end": "797420"
  },
  {
    "text": "to actually try to give any real work in these similarly setup and teardown executed before every test and after",
    "start": "797420",
    "end": "803570"
  },
  {
    "text": "every test and they're going to print something out as well we can identify the order of execution I need to execute",
    "start": "803570",
    "end": "808790"
  },
  {
    "text": "this cell real quick all right this next slide is a continuation of that class so",
    "start": "808790",
    "end": "814580"
  },
  {
    "text": "I now I've added to test methods that don't do anything except themselves prints so what we're going to see when I",
    "start": "814580",
    "end": "820460"
  },
  {
    "text": "execute this is the ambient relating the order of all these things that were printing out and hopefully that will",
    "start": "820460",
    "end": "826370"
  },
  {
    "text": "make it very clear what's happening so I run the test we get to total test run these guys here the very first thing",
    "start": "826370",
    "end": "832670"
  },
  {
    "text": "that happens of course is set up class execute and then set up rim which is our our function level fixture execute we",
    "start": "832670",
    "end": "839840"
  },
  {
    "text": "run the first test and then tear down execute set up runs again test number to execute and teardown happens and finally",
    "start": "839840",
    "end": "846500"
  },
  {
    "text": "we do tear down class so that's in a nutshell that's how these things interact just various levels of scoping",
    "start": "846500",
    "end": "852860"
  },
  {
    "text": "effectively for your fixtures so you can you know imagine how this might apply to the test code or bbcode you're trying to",
    "start": "852860",
    "end": "859550"
  },
  {
    "text": "test there any questions about that so I'm entirely clear that I feel like maybe that's a bit of a rough section so",
    "start": "859550",
    "end": "866060"
  },
  {
    "text": "as long as it's clear one thing you can do and setup and very often need to do",
    "start": "866060",
    "end": "871880"
  },
  {
    "text": "is configure member attributes and this is a bit tricky for some people to initially grasp maybe they're there when",
    "start": "871880",
    "end": "877970"
  },
  {
    "text": "they're there conceptualization of the kind of a context of test execution is not clear yet so I want to kind of drive",
    "start": "877970",
    "end": "883460"
  },
  {
    "text": "this point home you can use it to assign attributes on the class itself and it just makes perfect sense this isn't",
    "start": "883460",
    "end": "889670"
  },
  {
    "text": "rocket science but it gets a bit of a confusing concept sometimes because so in this setup here we set self data so",
    "start": "889670",
    "end": "896930"
  },
  {
    "text": "we're setting some data member on the class that it's going to be self in all of these tests we put it to some value",
    "start": "896930",
    "end": "902810"
  },
  {
    "text": "and both of these both of these tests we assert that self data contains the value",
    "start": "902810",
    "end": "909860"
  },
  {
    "text": "that's set in the set up and then we change it in both cases we change it to something else these don't step on each",
    "start": "909860",
    "end": "915200"
  },
  {
    "text": "other because of course setup is executed before every test so this gets reset essentially before every single",
    "start": "915200",
    "end": "921890"
  },
  {
    "text": "test and like I said this isn't this isn't some mind-blowing news that's going you know make you guys better human",
    "start": "921890",
    "end": "927980"
  },
  {
    "text": "beings or anything but it's good to remember that I think if you can if you get that and you understand the basic",
    "start": "927980",
    "end": "933800"
  },
  {
    "text": "flow of fixtures and how they interact with tests so this is executed literally",
    "start": "933800",
    "end": "938870"
  },
  {
    "text": "before every single test is run unit tests main this is um in some sense it's",
    "start": "938870",
    "end": "946190"
  },
  {
    "text": "a convenience function what it does is scan the module in which it's executed for tests to run so it looks for test",
    "start": "946190",
    "end": "952250"
  },
  {
    "text": "cases and it looks for test methods and then it executes them in prints of liberal reports it's a really convenient little function and what it's very often",
    "start": "952250",
    "end": "960620"
  },
  {
    "text": "used for is to create little executable test modules so if I've got mine you know unit tests may not py here and it's",
    "start": "960620",
    "end": "966250"
  },
  {
    "text": "created a test case that does some questionable tests I can then go down",
    "start": "966250",
    "end": "971420"
  },
  {
    "text": "here and okay I apologize there's some kerning problems here so I'm going to just go out of that mode if you've never",
    "start": "971420",
    "end": "979070"
  },
  {
    "text": "seen this before dunder name equals dunder main this is the idiomatic main",
    "start": "979070",
    "end": "984140"
  },
  {
    "text": "function for a python module it's saying if this value which is set by the pipes",
    "start": "984140",
    "end": "989690"
  },
  {
    "text": "of runtime is equal to main that means that this model is being executed as the top level module and if so do something",
    "start": "989690",
    "end": "995150"
  },
  {
    "text": "special all right so be it this is kind of the main function so all we're saying and in a situation like this is if I'm",
    "start": "995150",
    "end": "1001120"
  },
  {
    "text": "being executed at the top level module run unit test amane which means go find these tests and execute them so it's",
    "start": "1001120",
    "end": "1006130"
  },
  {
    "text": "really convenient to take your test classes and bundle them up into modules and have them executable in a standalone",
    "start": "1006130",
    "end": "1011200"
  },
  {
    "text": "way you'll see this pattern repeated over and over in a lot of unit tests based testing code I apologize again",
    "start": "1011200",
    "end": "1019390"
  },
  {
    "text": "about the the layout issue we had there so if I then execute this we'll see",
    "start": "1019390",
    "end": "1026530"
  },
  {
    "text": "actually I can make that look a bit better so if I have unit tests 9py that",
    "start": "1026530",
    "end": "1032470"
  },
  {
    "text": "we looked at just a second ago and I execute it on the command line that's what this magic here is saying it prints this report that the assertion failed",
    "start": "1032470",
    "end": "1038920"
  },
  {
    "text": "because one does not equal to accept in bizarro world and we get some stuff",
    "start": "1038920",
    "end": "1044110"
  },
  {
    "text": "there and that's all because we use that idiomatic dunder main equals Thunder name block so",
    "start": "1044110",
    "end": "1052600"
  },
  {
    "text": "if you have the niceties that I'm going to kind of go through quickly if you need to skip test you can do that using",
    "start": "1052600",
    "end": "1057640"
  },
  {
    "text": "certain decorators and it's just an exception you can use as well and it looks like this if I need to skip test",
    "start": "1057640",
    "end": "1063309"
  },
  {
    "text": "skipper tests for some reason I can say you know I can decorate it with skip and give a reason and then you can execute",
    "start": "1063309",
    "end": "1069700"
  },
  {
    "text": "the execute your tests and it will print out the reason things are skipped and that can be really useful in cases where you have a test that you know doesn't",
    "start": "1069700",
    "end": "1076210"
  },
  {
    "text": "work right now because something is broken that you intend to fix it so you just want to kind of market as you know",
    "start": "1076210",
    "end": "1081250"
  },
  {
    "text": "not working you can skip conditionally maybe a test only works on you know AIX or something like that and so you only",
    "start": "1081250",
    "end": "1087190"
  },
  {
    "text": "run to run it on AIX you can check your platforms if AIX is a strange term for you if you're lucky and you can skip",
    "start": "1087190",
    "end": "1094990"
  },
  {
    "text": "unless as well and they just in verses of the same logic so if we execute this we should see right three tests run to",
    "start": "1094990",
    "end": "1101980"
  },
  {
    "text": "skipped and some skips here so you can analyze the test report to determine which things were skipped which is",
    "start": "1101980",
    "end": "1107320"
  },
  {
    "text": "really handy there's also the skip test exception which you can throw from set",
    "start": "1107320",
    "end": "1114250"
  },
  {
    "text": "up or from your test functions and and what what this will do is if if this is thrown and bubbles out of your of your",
    "start": "1114250",
    "end": "1120789"
  },
  {
    "text": "tests or your setup unit test code will see that recognize and say okay I'm going to count that as skipped so you",
    "start": "1120789",
    "end": "1126970"
  },
  {
    "text": "know if you try to make the uplink to a satellite and it's not available at that time you should just skip the test and the testing framework will say it's not",
    "start": "1126970",
    "end": "1133150"
  },
  {
    "text": "really a failure but I want you to know that we skipped it and why we skipped it you could also throw this from inside your tests like I said and get the same",
    "start": "1133150",
    "end": "1139150"
  },
  {
    "text": "effect but these have the exact ultimately exact same effect as using the decorators that we looked at just a",
    "start": "1139150",
    "end": "1144309"
  },
  {
    "text": "second ago you can also in this very similarly you can say I expect a certain",
    "start": "1144309",
    "end": "1150970"
  },
  {
    "text": "test to fail this is put a question out on stack overflow or reddit and ask",
    "start": "1150970",
    "end": "1156700"
  },
  {
    "text": "books like what situations have you actually used this in and this is another place where people have said well I've got a test that is broken I",
    "start": "1156700",
    "end": "1163570"
  },
  {
    "text": "know it's broken and I know why it's broken and I expect to fix it so I can mark it as expected to fail and the",
    "start": "1163570",
    "end": "1169750"
  },
  {
    "text": "reason this is this is useful is because the test runner will report to you that the test failed and I expected it to",
    "start": "1169750",
    "end": "1175600"
  },
  {
    "text": "fail there will also tell you I expected it to fail in and succeeded meaning you somehow fix the test that's a really",
    "start": "1175600",
    "end": "1181059"
  },
  {
    "text": "useful bit of information to get back so if you're in some heavy development phase and things are in flux in your looking things was broken and fix this",
    "start": "1181059",
    "end": "1187160"
  },
  {
    "text": "stuff you get a nice report back unit test telling you what you fixed maybe accidentally you might scratch your head",
    "start": "1187160",
    "end": "1192500"
  },
  {
    "text": "and go did I fix that smarter than I thought and it looks looks like this we",
    "start": "1192500",
    "end": "1197930"
  },
  {
    "text": "expect this test to fail and if I run this I can see ya and if I somehow you",
    "start": "1197930",
    "end": "1204740"
  },
  {
    "text": "know fixed my logic and executed again it's going to go uh-oh I got an unexpected success and that's really",
    "start": "1204740",
    "end": "1210410"
  },
  {
    "text": "useful information somehow I've changed something that sticks the universe let's put that back alright that's cool a",
    "start": "1210410",
    "end": "1217550"
  },
  {
    "text": "raincoat and slides it feels feels neat so now it's become an expected failure again oak because I misspelled false for",
    "start": "1217550",
    "end": "1223430"
  },
  {
    "text": "one thing there we go this is relatively",
    "start": "1223430",
    "end": "1230600"
  },
  {
    "text": "new parameterizing your test this showed up in 34 and what the discussions about this into going on for years on the",
    "start": "1230600",
    "end": "1236150"
  },
  {
    "text": "Python dead list the basic idea is that you have a test that you want to",
    "start": "1236150",
    "end": "1241180"
  },
  {
    "text": "logically you want to run this test say three or four or five times with different sort of input parameters the",
    "start": "1241180",
    "end": "1247490"
  },
  {
    "text": "normal way to do that initiative you know a long time ago would you have a list of these parameters you loop over them and if any one of them fails or",
    "start": "1247490",
    "end": "1254360"
  },
  {
    "text": "cause the desertions fill the whole test would fail and this was not great because image you didn't actually run all the tests you expected to run and",
    "start": "1254360",
    "end": "1260090"
  },
  {
    "text": "the reporting was in this fine grained as you would like so this notion of subtests allow you to mark a portion of",
    "start": "1260090",
    "end": "1266690"
  },
  {
    "text": "a test using a with with statement to say this is a sub test its parametrized",
    "start": "1266690",
    "end": "1272480"
  },
  {
    "text": "on a couple of different inputs run each of these independently treat them as separate tests the failure one will not",
    "start": "1272480",
    "end": "1277940"
  },
  {
    "text": "mean that everything halt and the others fail as well so as with all these",
    "start": "1277940",
    "end": "1283610"
  },
  {
    "text": "examples it's a bit contrived but okay we got a normal test test case and we're going to test fit all the words and some",
    "start": "1283610",
    "end": "1288800"
  },
  {
    "text": "lists are a ski and obviously they're not all a ski this is Norwegian for thread and the region for islands so to",
    "start": "1288800",
    "end": "1294980"
  },
  {
    "text": "da da da so ultimately but clearly not asking right so here we say with subtest",
    "start": "1294980",
    "end": "1300760"
  },
  {
    "text": "binding words to this word here it's a bit it's a bit weird but if we're saying",
    "start": "1300760",
    "end": "1306440"
  },
  {
    "text": "that in this context we r binding the name words to whatever word is here and in which looping over this here we run a",
    "start": "1306440",
    "end": "1313400"
  },
  {
    "text": "test fundamentally what's happening is that this block here this assertion is going to happen",
    "start": "1313400",
    "end": "1319520"
  },
  {
    "text": "four of these every time and the failure of one assertion will not cause the others to not run and won't result in",
    "start": "1319520",
    "end": "1324800"
  },
  {
    "text": "failure of all the other ones so the the output is a little bit what you might not expect we it says we ran one total",
    "start": "1324800",
    "end": "1331550"
  },
  {
    "text": "test with two failures and the Savior's were when the word was thrilled when wordlessly so the other ones passed just",
    "start": "1331550",
    "end": "1338720"
  },
  {
    "text": "fine so if you find yourself you know writing five or six tests that are",
    "start": "1338720",
    "end": "1344060"
  },
  {
    "text": "basically the same test just have some different parameter think about using subtests that it'll clean things up and",
    "start": "1344060",
    "end": "1350840"
  },
  {
    "text": "it's much more expressive and get your point across much better I want to kind",
    "start": "1350840",
    "end": "1357260"
  },
  {
    "text": "of close this section up with some advice like that's not how to structure things i've i've personally gone through",
    "start": "1357260",
    "end": "1363920"
  },
  {
    "text": "you know iterations of how I think projects ought to be laid out and and",
    "start": "1363920",
    "end": "1369200"
  },
  {
    "text": "I've had various reasons for believing that but I settled I think Rob is kind of on the same page with me that this is",
    "start": "1369200",
    "end": "1375170"
  },
  {
    "text": "a pretty good structure here at the top level you've got your project name so boom underneath that you would have",
    "start": "1375170",
    "end": "1382220"
  },
  {
    "text": "another directory called boom your project name that contains your done during it this is actually your package",
    "start": "1382220",
    "end": "1387410"
  },
  {
    "text": "in pipe in terminology this is your code here you'd have a setup dy which I highly recommend it's not required but",
    "start": "1387410",
    "end": "1393140"
  },
  {
    "text": "very very useful critically for the purpose of purposes of this discussion you would have a separate test directory",
    "start": "1393140",
    "end": "1399110"
  },
  {
    "text": "that is you would not have your tests inside your package the main motivating",
    "start": "1399110",
    "end": "1405350"
  },
  {
    "text": "reason for that for me most of the time is that I do a lot of mutation testing and mutation testing work and I don't",
    "start": "1405350",
    "end": "1410930"
  },
  {
    "text": "want these getting mutated while this code is getting you ticket that would throw things off in a really big way maybe more fundamentally though these",
    "start": "1410930",
    "end": "1417710"
  },
  {
    "text": "aren't part of the package they don't need to be part of the package so putting that into package is just confusing it just it just conflates",
    "start": "1417710",
    "end": "1424250"
  },
  {
    "text": "things that don't need to be conflated so keeping your tests out here makes them a bit more independent from your package it makes your package",
    "start": "1424250",
    "end": "1429980"
  },
  {
    "text": "installable without the tests for example there's a number of reasons for doing this this isn't required of course",
    "start": "1429980",
    "end": "1435860"
  },
  {
    "text": "you can use whatever setup you like that you'll see this in the wild quite a bit and it's a very effective pragmatic way",
    "start": "1435860",
    "end": "1442070"
  },
  {
    "text": "to structure your projects and okay so",
    "start": "1442070",
    "end": "1447080"
  },
  {
    "text": "this is an example of a sort of a real test just to kind of bring everything together and I again I apologize because",
    "start": "1447080",
    "end": "1452450"
  },
  {
    "text": "the underscores are invisible but this is what a full test might look like and this is our",
    "start": "1452450",
    "end": "1458059"
  },
  {
    "text": "test sorting that we looked at a second ago just to kind of bring it full circle with your import unit tests create the",
    "start": "1458059",
    "end": "1465139"
  },
  {
    "text": "test case have a test do an assertion and then have your idiomatic main down here to run unit tests made this is a",
    "start": "1465139",
    "end": "1472190"
  },
  {
    "text": "complete thing you could ship this and you know everybody'd be happy the only that brings the unit test discussion",
    "start": "1472190",
    "end": "1477980"
  },
  {
    "text": "sort of full circle for you that's no that's the last line so it has to bring it full circle for you are there any questions about unit tests or anything",
    "start": "1477980",
    "end": "1484789"
  },
  {
    "text": "that I've covered yes Oh unit test goes",
    "start": "1484789",
    "end": "1490789"
  },
  {
    "text": "back to probably pipe in one I don't know how old it is but it's been there forever do you know Rob it's ancient",
    "start": "1490789",
    "end": "1496929"
  },
  {
    "text": "yeah it it three days if you if you if you remember we looked at the that the",
    "start": "1496929",
    "end": "1504769"
  },
  {
    "text": "fixture function is called set up right and it does everybody know what eight is",
    "start": "1504769",
    "end": "1511899"
  },
  {
    "text": "Bev eight for those who don't know is is well a pet is a pice and enhancement proposal and it's how Python makes",
    "start": "1511899",
    "end": "1517700"
  },
  {
    "text": "changes is how we discuss changes to the language pet eight is a description of how code should be laid out naming",
    "start": "1517700",
    "end": "1523639"
  },
  {
    "text": "conventions and things like that this is very not pet eight this precedes pet baits we mean it's really really old",
    "start": "1523639",
    "end": "1530500"
  },
  {
    "text": "they this naming convention using camel case rather than snake case would not be",
    "start": "1530500",
    "end": "1536570"
  },
  {
    "text": "allowed more or less today so it's quite well you can use it in Python to code very easily not all the features I",
    "start": "1536570",
    "end": "1542779"
  },
  {
    "text": "talked about or enticing to of subtests for example or fairly new very new most",
    "start": "1542779",
    "end": "1550039"
  },
  {
    "text": "everything else i think is in there and a lot of things has probably been backported if you need it may be that subtest septums somehow magically",
    "start": "1550039",
    "end": "1556549"
  },
  {
    "text": "backported to I'm not sure okay mark I",
    "start": "1556549",
    "end": "1562789"
  },
  {
    "text": "said because because of the time constraints here I'm going to skip unit test mock and pie test I just really",
    "start": "1562789",
    "end": "1569659"
  },
  {
    "text": "quickly say unit s mock is a way for you to test how an object is used you essentially create these mock objects",
    "start": "1569659",
    "end": "1576259"
  },
  {
    "text": "and then call functions on them pretending that they were some other thing and then the mock objects keep",
    "start": "1576259",
    "end": "1581870"
  },
  {
    "text": "track of how they're called and you can inspect them and say or was the function food called on you and was it called six times if so",
    "start": "1581870",
    "end": "1588600"
  },
  {
    "text": "dime going to say this test passed it's a very sophisticated kind of subtle library but it's very useful in a lot of",
    "start": "1588600",
    "end": "1594330"
  },
  {
    "text": "situations pi test is you could think of it as a more sophisticated modern",
    "start": "1594330",
    "end": "1599700"
  },
  {
    "text": "replacement for unit tests the basic difference between PI testing unit tests if I had to summarize it is that pie",
    "start": "1599700",
    "end": "1606480"
  },
  {
    "text": "test is lower ceremony to create a test function you don't need a test classroom and you have tests understand a desk",
    "start": "1606480",
    "end": "1612150"
  },
  {
    "text": "test underscore something and that's your test and instead of having these assertion functions like a cert false",
    "start": "1612150",
    "end": "1618180"
  },
  {
    "text": "assert true you just use the standard assertion keyword and then PI test is really clever about catching assertion",
    "start": "1618180",
    "end": "1624030"
  },
  {
    "text": "errors because point of interest defy some people and what happens when an assertion when you say a surgeon asse or",
    "start": "1624030",
    "end": "1631530"
  },
  {
    "text": "key space some expression pricing on failure throws an exception which you can then catch and deal with and that's",
    "start": "1631530",
    "end": "1637410"
  },
  {
    "text": "what PI test does so it's not like in see where assert causes you can just you know segfault immediately so if we have",
    "start": "1637410",
    "end": "1644250"
  },
  {
    "text": "time I'll get back into PI tests but i want to show you hypothesis because this is one of my favorite tools most",
    "start": "1644250",
    "end": "1650760"
  },
  {
    "text": "favorite tools in the past few years written by a friend of ours called David",
    "start": "1650760",
    "end": "1657000"
  },
  {
    "text": "McKeever very very very smart guy so hypothesis is property based testing for",
    "start": "1657000",
    "end": "1662820"
  },
  {
    "text": "Python and you want if you want to go read more about it you can go to hypothesis that works that's the URL",
    "start": "1662820",
    "end": "1669679"
  },
  {
    "text": "property based testing in a nutshell we'll get to that I like I like David's quote though the larger purpose of",
    "start": "1669800",
    "end": "1676920"
  },
  {
    "text": "hypothesis is to drag the world kicking and screaming into a new and terrifying age of high quality software so if",
    "start": "1676920",
    "end": "1683010"
  },
  {
    "text": "that's where you want to be and he's a bit hyperbolic that's how he is but he's smart enough to get away with it show the hypothesis manifesto is worth a read",
    "start": "1683010",
    "end": "1691280"
  },
  {
    "text": "the basic idea of hypothesis testing is that you define invariants or you state",
    "start": "1691280",
    "end": "1697740"
  },
  {
    "text": "hypotheses about how your code ought to be how the state of the universe ought",
    "start": "1697740",
    "end": "1704400"
  },
  {
    "text": "not to change or should change no matter what given that your code works properly so you make these statements using this",
    "start": "1704400",
    "end": "1710700"
  },
  {
    "text": "lesson assertions you then tell hypothesis how the test could be rand",
    "start": "1710700",
    "end": "1716640"
  },
  {
    "text": "and what parameters your tests need to be fully tested so you you define using variants and say that",
    "start": "1716640",
    "end": "1721970"
  },
  {
    "text": "no matter what no matter what values you give me for these parameters this test will always pass and hypothesis does a",
    "start": "1721970",
    "end": "1728210"
  },
  {
    "text": "really hard job of searching systematically and very methodically for parameters that cause your test to fail",
    "start": "1728210",
    "end": "1734660"
  },
  {
    "text": "all right that's it sits keep our is that it's really smart about searching potentially infinite spaces for",
    "start": "1734660",
    "end": "1742100"
  },
  {
    "text": "parameters that can cause your test to fail and then when it finds a failure it has really clever logic to reduce those",
    "start": "1742100",
    "end": "1747710"
  },
  {
    "text": "input premiers down to the simplest possible versions so if it finds some input list that causes your assertions",
    "start": "1747710",
    "end": "1754250"
  },
  {
    "text": "to fail it will work to shrink that list down to a minimal example it's really really clever and I find I have trouble",
    "start": "1754250",
    "end": "1761210"
  },
  {
    "text": "expressing how much it's changed the way I approach testing in Python it's really it's a mental oh did you have a",
    "start": "1761210",
    "end": "1767090"
  },
  {
    "text": "question oh I sorry I saw a hand up and there's a bright light right in my face so any motion is what's going on but",
    "start": "1767090",
    "end": "1773720"
  },
  {
    "text": "hopefully I can get across you at least the idea that get not my pure unbridled enthusiasm for the project so okay we",
    "start": "1773720",
    "end": "1782120"
  },
  {
    "text": "need a motivating function something we want to test so this is an implementation of greatest common divisor not the best implementation in",
    "start": "1782120",
    "end": "1788900"
  },
  {
    "text": "the world but I can fit it on a single slide so you may or may not believe that it works but i'm pretty sure that it works so it just taking m and n returns",
    "start": "1788900",
    "end": "1795950"
  },
  {
    "text": "for you the greatest common divisor the biggest number that divides into each of them is a 0 remainder oh i need to sorry",
    "start": "1795950",
    "end": "1804500"
  },
  {
    "text": "i need to execute that so it's in the in the scope in the in the session so how",
    "start": "1804500",
    "end": "1810260"
  },
  {
    "text": "would i normally test this without hypothesis i would probably do something like this i would say well one thing i",
    "start": "1810260",
    "end": "1815630"
  },
  {
    "text": "know is true is that whatever d is whatever the divisor is it needs to divide evenly into m and n so i just",
    "start": "1815630",
    "end": "1822260"
  },
  {
    "text": "check this in a mod d gamma 0 and does n mod megami 0 and i would test that for",
    "start": "1822260",
    "end": "1827360"
  },
  {
    "text": "some set of input numbers right in this case I'm saying you know 4m from 1 to",
    "start": "1827360",
    "end": "1833360"
  },
  {
    "text": "1000 + n 1 to 100 give me the product of those and passed it into this function here binding to imminent and run them so",
    "start": "1833360",
    "end": "1839300"
  },
  {
    "text": "I'm doing some work of guessing what I think are reasonable input ranges and similarly I'm going to test that",
    "start": "1839300",
    "end": "1845060"
  },
  {
    "text": "whatever D I get back from GCD is actually the biggest number that fills the bill so this test is basically",
    "start": "1845060",
    "end": "1851000"
  },
  {
    "text": "saying there's nothing bigger than D which he divides into m and n so these are my these in the sense or my assertions",
    "start": "1851000",
    "end": "1857539"
  },
  {
    "text": "about what should always be true and then this is me doing some heavy lifting to figure out the inputs to pass to my",
    "start": "1857539",
    "end": "1864110"
  },
  {
    "text": "functions and we execute those cranks or a bit these are actually reasonably big",
    "start": "1864110",
    "end": "1869150"
  },
  {
    "text": "state spaces and then we see okay two tests pass so it looks like our GCD is in pretty good shape what hypothesis is",
    "start": "1869150",
    "end": "1878059"
  },
  {
    "text": "going to do is this work for us it's going to do it smarter and better than us it's the bionic man of input",
    "start": "1878059",
    "end": "1884809"
  },
  {
    "text": "parameter of calculation this looks a bit more verbose because it is more verbose but it's actually doing a lot",
    "start": "1884809",
    "end": "1890000"
  },
  {
    "text": "more this is the hypothesis version of what's going on and so let me kind of step you through the parts i apologize i",
    "start": "1890000",
    "end": "1897650"
  },
  {
    "text": "secretly imported given earlier given is from hypothesis and it's the decorator you use to explain two hypotheses how to",
    "start": "1897650",
    "end": "1904580"
  },
  {
    "text": "bind the input values to your test function we have these things called strategies that we'll look at in some",
    "start": "1904580",
    "end": "1910850"
  },
  {
    "text": "detail but strategies basically are the things that generate input to your test functions so putting it all in English",
    "start": "1910850",
    "end": "1917659"
  },
  {
    "text": "what's happening here is we're saying given that I have one strategy that produces integers between one and two",
    "start": "1917659",
    "end": "1923030"
  },
  {
    "text": "thousand and another strategy that generates numbers between one and two thousand bind those two M&N and execute",
    "start": "1923030",
    "end": "1930110"
  },
  {
    "text": "my test function try to find values for M and n it causes failure in here I",
    "start": "1930110",
    "end": "1936440"
  },
  {
    "text": "should also point out that i put a limit on these purely so that i could run the",
    "start": "1936440",
    "end": "1941570"
  },
  {
    "text": "tests here if I didn't put limits on those hypothesis would feel free to run for not unbounded amount of time but for",
    "start": "1941570",
    "end": "1947510"
  },
  {
    "text": "longer than I had patience for so you can see it ran pretty quickly but that's",
    "start": "1947510",
    "end": "1952610"
  },
  {
    "text": "the fundamental idea of hypothesis you give a simple excellent hopefully relatively simple explanation of what",
    "start": "1952610",
    "end": "1959240"
  },
  {
    "text": "you expect to always be true you tell hypotheses have to kind of punch your function and it will do that until it",
    "start": "1959240",
    "end": "1965179"
  },
  {
    "text": "finds a failure or it gives up so of course it can't it can't search all",
    "start": "1965179",
    "end": "1971150"
  },
  {
    "text": "integers because in Python all integers is infinite right so we'd have infinity times infinity which is you know mega",
    "start": "1971150",
    "end": "1976490"
  },
  {
    "text": "infinity we can't search that much space this is doing effectively the same thing so I will look in detail then what",
    "start": "1976490",
    "end": "1983330"
  },
  {
    "text": "whatever you know this while we're moving parts inside hypothesis with this in a nutshell is what a hypothesis based test looks like",
    "start": "1983330",
    "end": "1990240"
  },
  {
    "text": "you have very very much smaller test functions in general and your test functions are less baroque they're less",
    "start": "1990240",
    "end": "1995909"
  },
  {
    "text": "complicated they're they're kind of planar statements of truth alright we",
    "start": "1995909",
    "end": "2001700"
  },
  {
    "text": "doing on time here good so I mentioned",
    "start": "2001700",
    "end": "2006860"
  },
  {
    "text": "strategies and these are these things that you use to generate and put into your function and this is where the real",
    "start": "2006860",
    "end": "2011929"
  },
  {
    "text": "cleverness of hypothesis comes in that they does these things in what doesn't",
    "start": "2011929",
    "end": "2017210"
  },
  {
    "text": "quickly it does them in statistically valid way so you get nice distributions across whatever range it is you're",
    "start": "2017210",
    "end": "2022850"
  },
  {
    "text": "trying to fill up and it can do it for you know simple things like integers and",
    "start": "2022850",
    "end": "2027980"
  },
  {
    "text": "text but also more complex things like fractions or going to lift complex data structures with billions in this case",
    "start": "2027980",
    "end": "2033860"
  },
  {
    "text": "what we're going to see here is when I run this a list of one example from each of these just to kind of prove the point",
    "start": "2033860",
    "end": "2040220"
  },
  {
    "text": "that it can be done so we see we got an integer 190 we got some random text we got a fraction and we got a list true so",
    "start": "2040220",
    "end": "2047000"
  },
  {
    "text": "this great with very little effort we were able to convince hypothesis to give us some test values and that's the kind",
    "start": "2047000",
    "end": "2053148"
  },
  {
    "text": "of data just plugs into your test there are primitive strategies for pretty much",
    "start": "2053149",
    "end": "2058730"
  },
  {
    "text": "everything you can think of Sloat centers Williams more complex things like text and binary and in vastly more",
    "start": "2058730",
    "end": "2064099"
  },
  {
    "text": "complex things like you you IDs and fractions and you can write your own strategies if you want but very often",
    "start": "2064099",
    "end": "2069858"
  },
  {
    "text": "you can get by just using these this is",
    "start": "2069859",
    "end": "2075440"
  },
  {
    "text": "a sort of full-fledged example we're going to show that you know given a UID a fraction and a binary of some certain",
    "start": "2075440",
    "end": "2082040"
  },
  {
    "text": "size run this test and really the point here is just to print out what hypothesis generates so all we do is",
    "start": "2082040",
    "end": "2089810"
  },
  {
    "text": "print out the things that come in and basically a search false and let's look at what's getting printed out here it runs once and then it runs again so I",
    "start": "2089810",
    "end": "2097310"
  },
  {
    "text": "process this was doing some scanning and then sent it said okay I'll catch you some input and you failed it could be",
    "start": "2097310",
    "end": "2102500"
  },
  {
    "text": "that you have a kind of non item potent test function so I'm going to try it again with the same Memphis no we look it's failed again so now I'm going to",
    "start": "2102500",
    "end": "2108410"
  },
  {
    "text": "say that everything is is dead and I've come up with the falsification of your",
    "start": "2108410",
    "end": "2114260"
  },
  {
    "text": "hypothesis and here's what it did the work so one failure and that's failed okay not to be exciting to look",
    "start": "2114260",
    "end": "2121589"
  },
  {
    "text": "at this outfit but to give you some some sense of what hypothesis is sort of doing in the background it's very",
    "start": "2121589",
    "end": "2126869"
  },
  {
    "text": "sophisticated about the kind of work that it does there are more complex",
    "start": "2126869",
    "end": "2131940"
  },
  {
    "text": "strategies for constructing lists dictionaries streams tuples all the kinds of things you would need to",
    "start": "2131940",
    "end": "2137339"
  },
  {
    "text": "construct in a in a Python world you know containing elements drawn from",
    "start": "2137339",
    "end": "2142829"
  },
  {
    "text": "other strategies so you kind of compose strategies and we can see that here we want to create dictionaries of integers",
    "start": "2142829",
    "end": "2148619"
  },
  {
    "text": "to text your map of keys of integers and text values and we want to create tuples",
    "start": "2148619",
    "end": "2153690"
  },
  {
    "text": "of floats and we just run this we'll see some examples that it generates and you'll see that it starts off with some",
    "start": "2153690",
    "end": "2159930"
  },
  {
    "text": "very very simple examples what's the simplest possible dictionary of integers to text it's the empty dictionary what's",
    "start": "2159930",
    "end": "2165060"
  },
  {
    "text": "the simplest possible to offload its this you know one tuple you could argue that actually an empty tuple would be",
    "start": "2165060",
    "end": "2170940"
  },
  {
    "text": "even simpler but it wouldn't have any floats in it so it'd be hard to argue that that's a tuple of floats static",
    "start": "2170940",
    "end": "2177000"
  },
  {
    "text": "typing and dynamic typing there you go but again nothing nothing earth-shaking",
    "start": "2177000",
    "end": "2182819"
  },
  {
    "text": "here except we can kind of see what what them hypothesis is doing in the background what is passing into us kind",
    "start": "2182819",
    "end": "2191069"
  },
  {
    "text": "of quickly go through the rest of this we can get onto cosmic ray and hopefully some pie test every strategy has a",
    "start": "2191069",
    "end": "2197640"
  },
  {
    "text": "function called map and it also has a function called filter so map takes the output you know whatever examples",
    "start": "2197640",
    "end": "2203400"
  },
  {
    "text": "generated by the strategy and runs a function on it and then whatever comes out of that function is what's pumped",
    "start": "2203400",
    "end": "2208950"
  },
  {
    "text": "into your function into your test function filter similarly takes the output of a strategy runs a predicate on",
    "start": "2208950",
    "end": "2215339"
  },
  {
    "text": "it and if it's true then passes the damage to your function otherwise it's filters it out so here we use an integer",
    "start": "2215339",
    "end": "2222569"
  },
  {
    "text": "strategy and we map this function over it so instead of just integers this is going to produce only even integers",
    "start": "2222569",
    "end": "2228150"
  },
  {
    "text": "because it's going to take whatever comes out of here x x 2 and that becomes",
    "start": "2228150",
    "end": "2233220"
  },
  {
    "text": "the value that could pumped into x similarly we're doing exactly the same thing here except we're saying anything",
    "start": "2233220",
    "end": "2238589"
  },
  {
    "text": "that comes out that's not evenly divisible by 2 that is odd numbers are filtered out so only even numbers come out of here as well so math and filter I",
    "start": "2238589",
    "end": "2245609"
  },
  {
    "text": "mean if you ever use math and filtering any other language if you've used link or anything like that these are very familiar hopefully to you these are not not difficult",
    "start": "2245609",
    "end": "2253000"
  },
  {
    "text": "concepts but they can be they can be a nice way to generate specific streams of data so to speak flat map is a bit more",
    "start": "2253000",
    "end": "2261420"
  },
  {
    "text": "sophisticated a bit harder to explain but in this case and this is drawn I think directly from the hypothesis",
    "start": "2261420",
    "end": "2267280"
  },
  {
    "text": "documentation we have a strategy here and we tell you know we say just generate integers between one and two",
    "start": "2267280",
    "end": "2273640"
  },
  {
    "text": "really I guess meant that the thing is next value is one more than what you get met my experience at least pass that",
    "start": "2273640",
    "end": "2281770"
  },
  {
    "text": "value into the slap into this lambda here whatever function is inside past the flat map and then use the result of",
    "start": "2281770",
    "end": "2288130"
  },
  {
    "text": "that as the actual strategy so it's a way to bind the output of one strategy",
    "start": "2288130",
    "end": "2293140"
  },
  {
    "text": "and use it at to parameterize another strategy so what this overall strategy is going to give us is a list of lists",
    "start": "2293140",
    "end": "2300100"
  },
  {
    "text": "of integers and these lists inside here are going to be of a specific size that fixed size in so whatever number comes",
    "start": "2300100",
    "end": "2306280"
  },
  {
    "text": "out of here it's bound to in and works there that's a bit convoluted if you've",
    "start": "2306280",
    "end": "2311680"
  },
  {
    "text": "never dealt with anything like flat map so come back to it later you want spend more time on it but it's good to know",
    "start": "2311680",
    "end": "2316930"
  },
  {
    "text": "about this can help you construct some very sophisticated data structures if you need to we can we can run this just",
    "start": "2316930",
    "end": "2322840"
  },
  {
    "text": "for just for fun right so we see if we run it we get you know three lists all the size one if I execute it again I",
    "start": "2322840",
    "end": "2329050"
  },
  {
    "text": "should get well okay that's that's a valid as is that these are you know lists of size three and on and on and on",
    "start": "2329050",
    "end": "2336100"
  },
  {
    "text": "those are all coming from the same strategy right here and guess we never",
    "start": "2336100",
    "end": "2342670"
  },
  {
    "text": "talked about this but you've seen it several times if you have a strategy and you call an example on it it gives you an example of that it takes one element",
    "start": "2342670",
    "end": "2348880"
  },
  {
    "text": "from the from that strategy so you can kind of probe your strategies interesting i was talking with David",
    "start": "2348880",
    "end": "2354610"
  },
  {
    "text": "about hypothesis and what I should stress in this in distress entation he said he's finding more and more he uses",
    "start": "2354610",
    "end": "2360850"
  },
  {
    "text": "strategies completely outside of the testing context they're a great way to generate data for all sorts of purposes",
    "start": "2360850",
    "end": "2366340"
  },
  {
    "text": "he does a lot of what I would classify his research into voting algorithms and things for example and he uses his",
    "start": "2366340",
    "end": "2372160"
  },
  {
    "text": "strategies to generate input into his voting simulations it's not testing it's not hypothesis testing or anything like",
    "start": "2372160",
    "end": "2378220"
  },
  {
    "text": "that it's some something totally else but it's a useful way to apply these of these very powerful tools",
    "start": "2378220",
    "end": "2384819"
  },
  {
    "text": "other goodies you can use this thing called recursive to generate things for example in case on data structures piano",
    "start": "2384819",
    "end": "2390619"
  },
  {
    "text": "or any big complex recursive thing you can have a thing called composite for combining strategies and arbitrary ways",
    "start": "2390619",
    "end": "2396849"
  },
  {
    "text": "and data for interactively kind of getting information out of strategies all these things we're not going to talk",
    "start": "2396849",
    "end": "2403219"
  },
  {
    "text": "about in detail but you can look at them on the hypothesis website we've seen",
    "start": "2403219",
    "end": "2408259"
  },
  {
    "text": "this a lot already the given decorator and given we say at given and then we describe the parameters we want pumped",
    "start": "2408259",
    "end": "2413660"
  },
  {
    "text": "into our test it's just the way of binding strategies to input values so you woke over these in detail but you",
    "start": "2413660",
    "end": "2420349"
  },
  {
    "text": "can you can use keywords if you want to define the mapping between strategies and arguments by default it's all",
    "start": "2420349",
    "end": "2426679"
  },
  {
    "text": "positional and yeah it kind of kind of all works very intuitively and works",
    "start": "2426679",
    "end": "2433910"
  },
  {
    "text": "well with the testing tools that hypothesis embedded inside of for example if you think about how the these",
    "start": "2433910",
    "end": "2440989"
  },
  {
    "text": "might interact with well we haven't looked at PI tests yet so it's a failure on my part but PI tests also wants to",
    "start": "2440989",
    "end": "2448069"
  },
  {
    "text": "pass parameters into your functions and so how does PI test play with hypothesis if you start running into situations",
    "start": "2448069",
    "end": "2453890"
  },
  {
    "text": "where that matters you need to read the documentation for both very carefully to understand which of these are being dealt with why apophysis and which are",
    "start": "2453890",
    "end": "2459829"
  },
  {
    "text": "being dealt with by for instance for instance hi test but you can see here I say given that x is integers and why is",
    "start": "2459829",
    "end": "2466160"
  },
  {
    "text": "floats then obviously you know the mapping is pretty straightforward in this case we're using curity positional",
    "start": "2466160",
    "end": "2472689"
  },
  {
    "text": "information to describe how to map this enta jerz to X and this floats to Y and here we're saying well that X is",
    "start": "2472689",
    "end": "2479329"
  },
  {
    "text": "integers and it goes down there and floats us going over here and so kind of see there's an interplay of different",
    "start": "2479329",
    "end": "2484339"
  },
  {
    "text": "orderings and ways of binding your strategies to input parameters that's a bit of a ramble and I apologize for that",
    "start": "2484339",
    "end": "2490489"
  },
  {
    "text": "but it all is actually very simple in practice but there are some subtleties to how it all works and so sit down",
    "start": "2490489",
    "end": "2496819"
  },
  {
    "text": "again on your own and kind of think about what needs to happen we'll skip",
    "start": "2496819",
    "end": "2502069"
  },
  {
    "text": "over example because I it's it's not terribly critical when you the basic",
    "start": "2502069",
    "end": "2508009"
  },
  {
    "text": "idea is if I've come up with some input parameters but I know I need to test but I know are critical I can use example to",
    "start": "2508009",
    "end": "2514219"
  },
  {
    "text": "say always guarantee that you're going to pass these as input and always guarantee you're going to theses input you generate some of your",
    "start": "2514219",
    "end": "2519350"
  },
  {
    "text": "own but always use these so if I found somebody give me a crash reporting said it always crashes when i pass into well",
    "start": "2519350",
    "end": "2525170"
  },
  {
    "text": "i want to make sure that foo is one of my input parameters and you can use the example decorator to do that assume is",
    "start": "2525170",
    "end": "2533180"
  },
  {
    "text": "an interesting one um assume lets you tell hypothesis that I know something's",
    "start": "2533180",
    "end": "2538820"
  },
  {
    "text": "about to fail but don't count it as a failure because I want you to assume that that value is never passed in so",
    "start": "2538820",
    "end": "2545150"
  },
  {
    "text": "it's a it's a word trick almost and it makes much more sense if I show you an example so I want to test that a",
    "start": "2545150",
    "end": "2552110"
  },
  {
    "text": "floating floating point number negated and negated again is equal to itself",
    "start": "2552110",
    "end": "2557240"
  },
  {
    "text": "right that should hold for floating point numbers except for nan right man it doesn't follow these rules if it's",
    "start": "2557240",
    "end": "2562760"
  },
  {
    "text": "not a number wonderful so we use assume here to tell to tell um hypothesis look",
    "start": "2562760",
    "end": "2569210"
  },
  {
    "text": "we know that man might come into this function you might generate it to float the totally legitimate thing to pass in",
    "start": "2569210",
    "end": "2574250"
  },
  {
    "text": "is X in fact I'd be surprised if it wasn't passing in man we want you to assume that X is not man and what this",
    "start": "2574250",
    "end": "2581210"
  },
  {
    "text": "is telling hypothesis is that ok this is going to fail we know that but since we told you to assume that X is not an when",
    "start": "2581210",
    "end": "2588050"
  },
  {
    "text": "this fails and X is man just don't count it as a failure it's that simple it's really why call it in a linguistic trick",
    "start": "2588050",
    "end": "2595190"
  },
  {
    "text": "because you have to kind of read it as English committed for it to make sense but you're still thing and just assume that X is not man secretly we know it",
    "start": "2595190",
    "end": "2600980"
  },
  {
    "text": "could be nin but we're going to say that if it is nan and we failed it's no big deal and if I run this well I mean is",
    "start": "2600980",
    "end": "2609620"
  },
  {
    "text": "just going to tell me everything worked fine if I take this out I imagine actually yeah it will fail because X was",
    "start": "2609620",
    "end": "2618110"
  },
  {
    "text": "man and that doesn't work this this logic fail so let's put that assume back in so that we can ship this right",
    "start": "2618110",
    "end": "2626350"
  },
  {
    "text": "there's a thing called stateful testing that is kind of new it says new and semi-public although david assures me",
    "start": "2626350",
    "end": "2632000"
  },
  {
    "text": "that it's generally ready for use the idea is that you can work at a higher level than just single test functions",
    "start": "2632000",
    "end": "2637220"
  },
  {
    "text": "you can define your API and the interaction of your API functions with the state machine pass that state",
    "start": "2637220",
    "end": "2642590"
  },
  {
    "text": "machine into hypothesis and pointed at your test what",
    "start": "2642590",
    "end": "2647980"
  },
  {
    "text": "passing some strategies to parameterize the execution of your API and it will try to run your API in the legal ways",
    "start": "2647980",
    "end": "2654280"
  },
  {
    "text": "defined by that state machine and find failure modes look for assertions that trigger I've never used it and it sounds",
    "start": "2654280",
    "end": "2661930"
  },
  {
    "text": "really cool I'd love a chance to I just haven't had a reason to yet but David assures me that it's super cool and I trust I trust him further topic there's",
    "start": "2661930",
    "end": "2670630"
  },
  {
    "text": "all sorts of stuff you can read about there's special support for instance for Django numpy and things like that if you",
    "start": "2670630",
    "end": "2676480"
  },
  {
    "text": "are using those technologies I i really want to end this section though by saying that I highly encourage you to",
    "start": "2676480",
    "end": "2682840"
  },
  {
    "text": "check out hypothesis even if you have a test this and you already like and are happy with it is really powerful and",
    "start": "2682840",
    "end": "2688560"
  },
  {
    "text": "it's helped it's helped us for example to find release obscure weird bugs that we never would have found on our own",
    "start": "2688560",
    "end": "2694480"
  },
  {
    "text": "just bought into the fact that it's very very smart it's smarter than us at deciding what's a good input parameter",
    "start": "2694480",
    "end": "2699900"
  },
  {
    "text": "so on that note you have to try it out it's very very cool we have about 15",
    "start": "2699900",
    "end": "2706750"
  },
  {
    "text": "minutes left that's plenty of time for cosmic ray and maybe a bit of pine test",
    "start": "2706750",
    "end": "2712770"
  },
  {
    "text": "so cosmic ray is the cutesy name for a tool that we've written for doing",
    "start": "2713220",
    "end": "2718300"
  },
  {
    "text": "mutation testing in Python if you want to get it it's all open sorts at them on github and we'll talk a bit about what",
    "start": "2718300",
    "end": "2724780"
  },
  {
    "text": "mutation testing isn't in some specifics about the tool itself so that you're not totally ungrounded does anybody know",
    "start": "2724780",
    "end": "2730660"
  },
  {
    "text": "what mutation testing is ok good this will be the mildly education will have a full talk on that as well as if you want",
    "start": "2730660",
    "end": "2736600"
  },
  {
    "text": "to talk about it afterwards them I'm happy to talk your ear off about it so what does mutation testing this is taken",
    "start": "2736600",
    "end": "2742780"
  },
  {
    "text": "from P I test or P I test this of Java mutation testing tool into the gold standard it's really really good at what",
    "start": "2742780",
    "end": "2747850"
  },
  {
    "text": "it does but it doesn't work for pricing codes we had to write our own it's conceptually quite simple you have your",
    "start": "2747850",
    "end": "2752950"
  },
  {
    "text": "test um you inject automatically feed faults into your code and then you run",
    "start": "2752950",
    "end": "2758770"
  },
  {
    "text": "your test suite if your test suite failed that's good it means your test suite detected that change but if your",
    "start": "2758770",
    "end": "2765220"
  },
  {
    "text": "test suite passes it means that the mutant survived and that's what you don't want and you can use mutation",
    "start": "2765220",
    "end": "2771040"
  },
  {
    "text": "testing to gauge the quality of your tests that's really what mutation testing is about not testing your code",
    "start": "2771040",
    "end": "2776530"
  },
  {
    "text": "per se but verifying their tests are actually doing their job you're ten our high fidelity enough to determine",
    "start": "2776530",
    "end": "2782650"
  },
  {
    "text": "when you've broken things so what happened to mutation testing we have our",
    "start": "2782650",
    "end": "2787809"
  },
  {
    "text": "code under test so you package your library or your application and you have your test suite they they really need to",
    "start": "2787809",
    "end": "2793720"
  },
  {
    "text": "be separate here which is one of the reasons I advocated earlier keeping your test separate from your production code so to speak it makes this kind of",
    "start": "2793720",
    "end": "2800289"
  },
  {
    "text": "testing simpler you then introduce a single change a very small change and we'll look at some examples of those and",
    "start": "2800289",
    "end": "2806500"
  },
  {
    "text": "you run your test suite and hopefully all your tests something in your test suite fails that's the ideal that means",
    "start": "2806500",
    "end": "2812559"
  },
  {
    "text": "that your test suite detected the change kill the mutant and and you have a good test suite the basic algorithm is",
    "start": "2812559",
    "end": "2819609"
  },
  {
    "text": "something like this without going into much detail for every up there's some list of mutation operators and mutation",
    "start": "2819609",
    "end": "2824740"
  },
  {
    "text": "operators are deep the knowledge about how to make a small change to your code you replace an operator or replace a",
    "start": "2824740",
    "end": "2830260"
  },
  {
    "text": "constant or something like that so we have some list of operators so any particular operator there's any places",
    "start": "2830260",
    "end": "2836140"
  },
  {
    "text": "in your code that it might be able to change right there might and many you know greater than so they could turn into left spend it you take that site",
    "start": "2836140",
    "end": "2843130"
  },
  {
    "text": "and then it runs your test so I call this a triply nested loop for operators sites and tests there and many tests you",
    "start": "2843130",
    "end": "2849460"
  },
  {
    "text": "want to run so anybody with any experience in software knows this is probably to take a long time you know if",
    "start": "2849460",
    "end": "2855309"
  },
  {
    "text": "if I have a million lines of code or getting mutated then my test Scalia run that can add up to a large amount of",
    "start": "2855309",
    "end": "2861430"
  },
  {
    "text": "time and that is one of the Achilles heels mutation testing but it takes a long time and a lot of the effort and",
    "start": "2861430",
    "end": "2866680"
  },
  {
    "text": "research in it right now is aimed at making these things faster what does",
    "start": "2866680",
    "end": "2872619"
  },
  {
    "text": "mutation testing tell us well it'll tell us if it killed the mutant that is at the test suite failed there's also a",
    "start": "2872619",
    "end": "2879609"
  },
  {
    "text": "class of meatless called incompetent mutants which are ones that can't run for some reason maybe they immediately throw an exception or seg fault or they",
    "start": "2879609",
    "end": "2885970"
  },
  {
    "text": "don't compile or something along those lines it's the class of mutants that you can't test so you can't really say that",
    "start": "2885970",
    "end": "2891970"
  },
  {
    "text": "you killed them but they don't pass these I mean they don't pass your test suite indices flag them as incompetent and count them as counseling is killed",
    "start": "2891970",
    "end": "2899049"
  },
  {
    "text": "and then there's those which survive those which that for which your test suite passes and these are the ones that should raise a flag for you to force you",
    "start": "2899049",
    "end": "2905589"
  },
  {
    "text": "to look at your code in decide what's actually going on what are the goals why would you go through all this trouble because it is",
    "start": "2905589",
    "end": "2911210"
  },
  {
    "text": "it's quite a bit of machinery and work one is coverage analysis of some of you are actually all of you probably dealt",
    "start": "2911210",
    "end": "2917480"
  },
  {
    "text": "with the traditional notion of coverage analysis we say when I run my test suite do a hundred percent of the lines in my",
    "start": "2917480",
    "end": "2923480"
  },
  {
    "text": "production code get executed you know are they passed through the processor at some point that doesn't really tell you",
    "start": "2923480",
    "end": "2929930"
  },
  {
    "text": "all that much because it doesn't tell you if your test me is actually verifying the functionality so the goal of mutation testing is to tell you is",
    "start": "2929930",
    "end": "2936620"
  },
  {
    "text": "your test suite actually testing functionality and not just exercising lines of code as a big big difference",
    "start": "2936620",
    "end": "2942440"
  },
  {
    "text": "and we can there's not time to really cover that but intuitively they are fundamentally different things and this",
    "start": "2942440",
    "end": "2948470"
  },
  {
    "text": "is what most people get coverage analysis and this is the goal of mutation testing actually verifying your",
    "start": "2948470",
    "end": "2953510"
  },
  {
    "text": "functionality is being tested properly tested the other is to detect",
    "start": "2953510",
    "end": "2959990"
  },
  {
    "text": "unnecessary code so one of two things might be the case if mutant survives it",
    "start": "2959990",
    "end": "2965450"
  },
  {
    "text": "might be that your test your tests are not sufficient to detect and fully test your functionality the other is that",
    "start": "2965450",
    "end": "2972110"
  },
  {
    "text": "you've got a bit of code in your package that you don't need anymore because it actually doesn't provide any functionality so it's not that you're",
    "start": "2972110",
    "end": "2977810"
  },
  {
    "text": "missing a test if you've got too much code and you can delete that code so when you get a survivor it's up to you",
    "start": "2977810",
    "end": "2983510"
  },
  {
    "text": "the engineer to sit down and think about you know which of these cases holds or",
    "start": "2983510",
    "end": "2988760"
  },
  {
    "text": "both could be so cosmic ray is the tool we've written to do this kind of testing in Python at the center of cosmic ray is",
    "start": "2988760",
    "end": "2996140"
  },
  {
    "text": "this notion of mutation operators what do they do they first can identify",
    "start": "2996140",
    "end": "3002290"
  },
  {
    "text": "potential mutation sites so there are passed an abstract syntax tree and they",
    "start": "3002290",
    "end": "3007480"
  },
  {
    "text": "report yes this note I know how to mutate in this note I know how to mutate and then the machinery of cosmic ray",
    "start": "3007480",
    "end": "3012970"
  },
  {
    "text": "sort of iteration da st and at the right time says okay you found this spot now i want you to make your mutation in hand",
    "start": "3012970",
    "end": "3018310"
  },
  {
    "text": "to AST back to me so ASCO abstract syntax tree for those who do not tap on the the terms of art but it's a it's a",
    "start": "3018310",
    "end": "3025420"
  },
  {
    "text": "data structure representing your code fundamentally and then piping can take an ast and compile it into code that can then be executed you can replace the",
    "start": "3025420",
    "end": "3032080"
  },
  {
    "text": "module at runtime so these operators really are the core of what mutation testing is doing examples of mutation",
    "start": "3032080",
    "end": "3039640"
  },
  {
    "text": "operators we talked about this one replacing relational greater so maybe I find a greater than I want to make it into a less than or",
    "start": "3039640",
    "end": "3045340"
  },
  {
    "text": "equal or something like that these ought to be testable things if I make such a gross change to my code it ought to be",
    "start": "3045340",
    "end": "3051490"
  },
  {
    "text": "conceivable that I have a test at the Texas it's not always the case and there are some pretty pathological examples",
    "start": "3051490",
    "end": "3058090"
  },
  {
    "text": "where you actually can't test or certain changes and that's another research area mutation testing another example",
    "start": "3058090",
    "end": "3063370"
  },
  {
    "text": "constant replacements maybe I replace a zero you know literally rode with a literal six and if that's an index into",
    "start": "3063370",
    "end": "3068860"
  },
  {
    "text": "a list that really ought to cause a detectable change in my behavior more sophisticated things include exception",
    "start": "3068860",
    "end": "3075340"
  },
  {
    "text": "swallowing it might say oh I second that's a nice catch clause you've got there what if I just caught all the",
    "start": "3075340",
    "end": "3080680"
  },
  {
    "text": "exceptions and never let them bubble out the fact that should cause behavioral changes you can detect so these are the",
    "start": "3080680",
    "end": "3085840"
  },
  {
    "text": "flavor of what mutation operators do and there's a whole list that i would like to eventually implement but we've only",
    "start": "3085840",
    "end": "3091990"
  },
  {
    "text": "got a handful of them so far there's an ocean of sessions and a session essentially wraps around the notion of",
    "start": "3091990",
    "end": "3099910"
  },
  {
    "text": "what the database fundamentally of all the mutations and all the tests you want to run and then as the results arrive",
    "start": "3099910",
    "end": "3106600"
  },
  {
    "text": "the results for those test runs and so you in a cosmic ray run you will initialize this database and scan the",
    "start": "3106600",
    "end": "3113500"
  },
  {
    "text": "code to figure out what work needs to be done and you'll execute that session and we'll start as results arrive it will put them in a database and this is this",
    "start": "3113500",
    "end": "3121270"
  },
  {
    "text": "is nice because it means you can kill a session halfway through and results that are in there are in there and results it or not you can then pick up and get it",
    "start": "3121270",
    "end": "3128140"
  },
  {
    "text": "later by reacts acute attest so it's um it's a nice way of keeping results around then for reporting as well so",
    "start": "3128140",
    "end": "3133780"
  },
  {
    "text": "this notion of session is sort of central to how cosmic-ray execute we have to execution modes currently it's",
    "start": "3133780",
    "end": "3139990"
  },
  {
    "text": "actually there it's a pluggable architecture so you could have more not sure what they would be but one is you can run everything locally just on your",
    "start": "3139990",
    "end": "3146320"
  },
  {
    "text": "local machine the other which will be suitable for real-world use i think is",
    "start": "3146320",
    "end": "3151720"
  },
  {
    "text": "using celery to distribute tests through a task to you to other machines or your",
    "start": "3151720",
    "end": "3157360"
  },
  {
    "text": "or your local machine but to as many machines as you want celery is a very powerful task queue and it's been a real",
    "start": "3157360",
    "end": "3163210"
  },
  {
    "text": "win for this for this project the mutation mechanism exists because it's",
    "start": "3163210",
    "end": "3168370"
  },
  {
    "text": "interesting i like to talk about this we use the AST module two so we parse code into an ASC we manipulate the ASC and",
    "start": "3168370",
    "end": "3174310"
  },
  {
    "text": "then we compile it into with code object python has this technology",
    "start": "3174310",
    "end": "3179520"
  },
  {
    "text": "called finders and loaders which are used and you say import something finders and loaders are the machinery",
    "start": "3179520",
    "end": "3185640"
  },
  {
    "text": "behind the scenes that figure out what to inject into your current namespace and we kind of hijackthis to inject",
    "start": "3185640",
    "end": "3192240"
  },
  {
    "text": "mutated code into the proper name space we use pipes of one price one Python",
    "start": "3192240",
    "end": "3198150"
  },
  {
    "text": "process permutation as a sandbox technique because without that you have the potential of the the mutant actually",
    "start": "3198150",
    "end": "3203580"
  },
  {
    "text": "breaking the runtime and breaking the test execution framework and that that would be really bad and really hard to",
    "start": "3203580",
    "end": "3209670"
  },
  {
    "text": "detect and fun and this is this is really important to me as aesthetically",
    "start": "3209670",
    "end": "3214770"
  },
  {
    "text": "and and because I feel that it's a good goal for the project that you can use cosmic-ray without having to modify your",
    "start": "3214770",
    "end": "3220650"
  },
  {
    "text": "tests or your production code this is this is an ideal we haven't been forced to deviate from this yet although we do",
    "start": "3220650",
    "end": "3227790"
  },
  {
    "text": "need to think about how to handle certain kinds of exceptions and that may require that we inject special comments",
    "start": "3227790",
    "end": "3234090"
  },
  {
    "text": "into the code we're not going to force you though did you make make radical changes to your code to run cosmyk rain so what's a full example look like well",
    "start": "3234090",
    "end": "3240960"
  },
  {
    "text": "I can show you the code here but actually that's this let's just run it so here I've got a this is a celery task",
    "start": "3240960",
    "end": "3248100"
  },
  {
    "text": "you or there's a worker sitting at the end of this casket it's going to take take work to do so the very first thing",
    "start": "3248100",
    "end": "3253380"
  },
  {
    "text": "we need to do is initialize I can make that a bit bigger that's a bit too big",
    "start": "3253380",
    "end": "3259200"
  },
  {
    "text": "okay is initialize a session so we say cosmic-ray initialize baselining is how",
    "start": "3259200",
    "end": "3265860"
  },
  {
    "text": "we tell cosmic very how long to run before it consider something to be in an infinite loop we tell what we're using pi test the session name is NBC that",
    "start": "3265860",
    "end": "3273090"
  },
  {
    "text": "test module is called Adam and this is arguments to the PI to surrender so all this is going to do when I push return",
    "start": "3273090",
    "end": "3278970"
  },
  {
    "text": "is scan Adam figure out all the mutations it needs to make and make a little database for us so there's",
    "start": "3278970",
    "end": "3284100"
  },
  {
    "text": "there's this NDC JSON is is that database now we want to execute in",
    "start": "3284100",
    "end": "3292160"
  },
  {
    "text": "distributed mode the session we just created so I press return here if I come",
    "start": "3292160",
    "end": "3297360"
  },
  {
    "text": "over to my celery worker we should eventually see it start to spit out information about work that it's doing",
    "start": "3297360",
    "end": "3304250"
  },
  {
    "text": "here we go you'll also notice that all four of my processors were pegged now",
    "start": "3304250",
    "end": "3309519"
  },
  {
    "text": "because celery is really smart about knowing how many processes it can run",
    "start": "3309519",
    "end": "3314969"
  },
  {
    "text": "reasonably on my machine in that case that's four by four course I assume so",
    "start": "3314969",
    "end": "3320169"
  },
  {
    "text": "it's running for parallel pipes and processes each during a single mutation and fully running the tests and now my",
    "start": "3320169",
    "end": "3326289"
  },
  {
    "text": "mutation are now my processor back to zero so we come here and see the execution is ended and finally you know",
    "start": "3326289",
    "end": "3332619"
  },
  {
    "text": "that drumroll the report says great were 56 total things mutations we made we've",
    "start": "3332619",
    "end": "3339159"
  },
  {
    "text": "run all of them and the survival rate to zero that's solid that means that our",
    "start": "3339159",
    "end": "3344319"
  },
  {
    "text": "test suite was high fidelity now okay just this test suite and encode is all taken from our be cosmic ray test suites",
    "start": "3344319",
    "end": "3349929"
  },
  {
    "text": "so of course it's really really good I'm going to go in and what really good in the sense that it catches all the",
    "start": "3349929",
    "end": "3355329"
  },
  {
    "text": "mutants what I'm going to do here is this is one of the tests that we just ran I'm going to comment that out",
    "start": "3355329",
    "end": "3362939"
  },
  {
    "text": "conceptually well what's going to happen now is without this test there's some",
    "start": "3362939",
    "end": "3368529"
  },
  {
    "text": "mutation that's going to happen in the code that no longer has a test designed to detect it so what we're going to have",
    "start": "3368529",
    "end": "3373869"
  },
  {
    "text": "now is a mutant that survives and I know it sounds really scary but don't worry it's okay if we reinitialize the session",
    "start": "3373869",
    "end": "3381179"
  },
  {
    "text": "weary exact the session we let it run for a few seconds here if we really want",
    "start": "3381179",
    "end": "3387249"
  },
  {
    "text": "to go and watch the watch the fireworks should fall over there it's kind of",
    "start": "3387249",
    "end": "3393699"
  },
  {
    "text": "comforting to watch this I the open until I can see progress being made because my tests are being executed and",
    "start": "3393699",
    "end": "3403589"
  },
  {
    "text": "then it runs and runs and runs it's almost done right now when I do a report",
    "start": "3403589",
    "end": "3410709"
  },
  {
    "text": "I ought to see that I had at least one survivor and indeed at the bottom here the survival rate was 3.57 percent 3.57",
    "start": "3410709",
    "end": "3418209"
  },
  {
    "text": "percent of the mutants we created and I don't know if I would trust that that precision but that's the number we've got more interesting Lee is that it",
    "start": "3418209",
    "end": "3425829"
  },
  {
    "text": "gives us a little dis a little patch here to show us what it changed that didn't didn't trigger a failure in here",
    "start": "3425829",
    "end": "3432669"
  },
  {
    "text": "we can see what happens we started off with this line returned object and none and we change it to return object or",
    "start": "3432669",
    "end": "3439749"
  },
  {
    "text": "none pretty substantial change in some logic that we had a test for but without that test cosmic ray said I'm sorry that",
    "start": "3439749",
    "end": "3446030"
  },
  {
    "text": "mutant survived you're fired so that in a very small nutshell is causing great",
    "start": "3446030",
    "end": "3452090"
  },
  {
    "text": "and mutation testing we really don't have time to go into PI tests but what I will do is give you some links if you",
    "start": "3452090",
    "end": "3460070"
  },
  {
    "text": "want this full presentation you can just go to this this address here or just talk to me i'll point you in the right direction it's got instructions on how",
    "start": "3460070",
    "end": "3466760"
  },
  {
    "text": "to set it up and how to run the slide that you want to do that if you want low and want to learn more about python",
    "start": "3466760",
    "end": "3472340"
  },
  {
    "text": "we've got a book you can get we've got a special discount code for everybody seven dollars i think we do training and",
    "start": "3472340",
    "end": "3478760"
  },
  {
    "text": "consulting on this kind of stuff if you're interested in that and on that note let's see if this works right any",
    "start": "3478760",
    "end": "3484220"
  },
  {
    "text": "questions we got to keep in it yeah the",
    "start": "3484220",
    "end": "3495380"
  },
  {
    "text": "I'm gonna say no I've heard the term but it doesn't oh I would like the kind of",
    "start": "3495380",
    "end": "3511010"
  },
  {
    "text": "stuff you see in from the java test frameworks like jasmine and stuff yeah I've seen those I didn't know that was",
    "start": "3511010",
    "end": "3516710"
  },
  {
    "text": "called suunto okay probably",
    "start": "3516710",
    "end": "3523330"
  },
  {
    "text": "yeah I would imagine that's to drop in kind of thing you can just drop that",
    "start": "3527980",
    "end": "3533869"
  },
  {
    "text": "into any testing framework its orthogonal to them okay well I guess",
    "start": "3533869",
    "end": "3540200"
  },
  {
    "text": "that's about it I love to talk about this stuff so if you want to just grab me in any point in the conference and be",
    "start": "3540200",
    "end": "3545210"
  },
  {
    "text": "happy to chat with you about it and hopefully next year there'll be more pricing stuff at this conference so talk to the organizers tell them you want more Python it's good for everybody",
    "start": "3545210",
    "end": "3551720"
  },
  {
    "text": "thanks",
    "start": "3551720",
    "end": "3554619"
  }
]