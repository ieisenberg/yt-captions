[
  {
    "text": "okay mmm so welcome to this stand-up comedy hour about typesafe C++ I am",
    "start": "3659",
    "end": "12570"
  },
  {
    "text": "beyond father I live and work in Stockholm something wrong okay so I",
    "start": "12570",
    "end": "24769"
  },
  {
    "text": "guess we'll restart if done recording",
    "start": "24769",
    "end": "31800"
  },
  {
    "text": "running okay so welcome to this stand-up comedy hour about typesafe C++ I am your",
    "start": "31800",
    "end": "39960"
  },
  {
    "text": "own father um I'm from Stockholm in Sweden where I work with writing",
    "start": "39960",
    "end": "46080"
  },
  {
    "text": "software for networking equipment I've been doing C++ for roughly forever I",
    "start": "46080",
    "end": "52290"
  },
  {
    "text": "think I wrote my first C++ program in 93 shows my age I guess",
    "start": "52290",
    "end": "60530"
  },
  {
    "text": "show of hands who thinks C++ is a type safe language now surprising number of",
    "start": "61340",
    "end": "68310"
  },
  {
    "text": "hands who thinks it's not one hand okay",
    "start": "68310",
    "end": "74700"
  },
  {
    "text": "so yeah well thank you then I'm done no",
    "start": "74700",
    "end": "81389"
  },
  {
    "text": "we're going to talk about type safe C++ and we're going to have a lot of fun",
    "start": "81389",
    "end": "88428"
  },
  {
    "text": "what is type safety you had opinions",
    "start": "90109",
    "end": "96030"
  },
  {
    "text": "about C++ being type sex you should have an ID or what type safety is no",
    "start": "96030",
    "end": "103679"
  },
  {
    "text": "suggestions here's what we canary says",
    "start": "103679",
    "end": "109639"
  },
  {
    "text": "the extent to which a programming language discourages or prevents type",
    "start": "109639",
    "end": "115499"
  },
  {
    "text": "errors the extent I think is interesting",
    "start": "115499",
    "end": "121020"
  },
  {
    "text": "so we have we can have degrees of type safety we can have poor type safety we",
    "start": "121020",
    "end": "126299"
  },
  {
    "text": "can have mediocre type safety we can have quite okay type safe their work and I'm really good type safe",
    "start": "126299",
    "end": "131430"
  },
  {
    "text": "and discourages or prevents is also interesting how many of you were here on",
    "start": "131430",
    "end": "138840"
  },
  {
    "text": "the previous session when when the treasurer talked about Patricia was here",
    "start": "138840",
    "end": "144120"
  },
  {
    "text": "good about security I think that since",
    "start": "144120",
    "end": "152840"
  },
  {
    "text": "since the Espace is a language where we can do ugly costs given that we can take",
    "start": "152840",
    "end": "160319"
  },
  {
    "text": "the address of something to do type punning to really weird things we cannot really prevent against Machiavelli but",
    "start": "160319",
    "end": "167760"
  },
  {
    "text": "we can prevent against honest mistakes and to make it at least a little bit difficult to do type errors and we'll",
    "start": "167760",
    "end": "176639"
  },
  {
    "text": "see about that in a while this is my take on what we mean with a",
    "start": "176639",
    "end": "184079"
  },
  {
    "text": "type safe system it's a system that discourages or prevent use of one type",
    "start": "184079",
    "end": "189780"
  },
  {
    "text": "when another is intended or discourages or prevents operations that don't make",
    "start": "189780",
    "end": "196290"
  },
  {
    "text": "sense but she's have mentioned the semantics of types and specifically the",
    "start": "196290",
    "end": "204419"
  },
  {
    "text": "lack of semantics or of the fundamental built-in integer types and also",
    "start": "204419",
    "end": "210780"
  },
  {
    "text": "discourages or prevents the use of values outside the defined space",
    "start": "210780",
    "end": "217040"
  },
  {
    "text": "so by that I sort of sneaked in the introduction of the agenda so these are",
    "start": "220390",
    "end": "228850"
  },
  {
    "text": "the topics I intend to cover so let's",
    "start": "228850",
    "end": "235030"
  },
  {
    "text": "dive into type safety in C++ this is something that started in a rather",
    "start": "235030",
    "end": "242580"
  },
  {
    "text": "embarrassing way in my career I had code",
    "start": "242580",
    "end": "248020"
  },
  {
    "text": "like this I and my team we were implementing our communications protocol",
    "start": "248020",
    "end": "255030"
  },
  {
    "text": "where we send out requests receive",
    "start": "255030",
    "end": "260829"
  },
  {
    "text": "acknowledgments to the requests and we identify the requests with a request ID",
    "start": "260829",
    "end": "266440"
  },
  {
    "text": "so then when we receive an acknowledgment we can see that okay it's that request that was acknowledged and",
    "start": "266440",
    "end": "271540"
  },
  {
    "text": "then we can add and remove receivers to two data flows and can you see can you",
    "start": "271540",
    "end": "279310"
  },
  {
    "text": "see the bug on the side that was very",
    "start": "279310",
    "end": "288280"
  },
  {
    "text": "very embarrassing you've never done that have you what did you do about it when",
    "start": "288280",
    "end": "295210"
  },
  {
    "text": "you have that kind of problem first off yeah yeah that's what you do your",
    "start": "295210",
    "end": "300850"
  },
  {
    "text": "Facebook I did that but I also started",
    "start": "300850",
    "end": "307120"
  },
  {
    "text": "wondering apart from fixing it and looking rather",
    "start": "307120",
    "end": "314260"
  },
  {
    "text": "than embarrassed I started wondering can I do something to make sure that this",
    "start": "314260",
    "end": "319300"
  },
  {
    "text": "doesn't happen again so I was wondering if we have this",
    "start": "319300",
    "end": "326229"
  },
  {
    "text": "situation I have some function that takes a an a and our function that calls",
    "start": "326229",
    "end": "333880"
  },
  {
    "text": "other with a B when it's this call allowed and you cannot really say can",
    "start": "333880",
    "end": "341919"
  },
  {
    "text": "you because we don't know anything about amb",
    "start": "341919",
    "end": "345660"
  },
  {
    "text": "what about this is this allowed yes it",
    "start": "347290",
    "end": "353500"
  },
  {
    "text": "is a lot type safety in C+ is a complete joke thank you very much I'm done or",
    "start": "353500",
    "end": "360040"
  },
  {
    "text": "Emily what about this so now a and B are",
    "start": "360040",
    "end": "368320"
  },
  {
    "text": "structs there are I would argue the same",
    "start": "368320",
    "end": "374080"
  },
  {
    "text": "if I mean both have exactly one member the type is int the name of the member",
    "start": "374080",
    "end": "381190"
  },
  {
    "text": "is value is this allowed no it is not because a and B are similar they look",
    "start": "381190",
    "end": "389320"
  },
  {
    "text": "the same there are equivalent for some degree of achievements but they are not the same",
    "start": "389320",
    "end": "395790"
  },
  {
    "text": "but if I wanted to compile them what can I do well I can add a constructor to a",
    "start": "395790",
    "end": "404290"
  },
  {
    "text": "that we can construct a from B though then it works provided I'm not marking",
    "start": "404290",
    "end": "409720"
  },
  {
    "text": "it as explicit or I can add a conversion operator from B to a provider I'm not",
    "start": "409720",
    "end": "417610"
  },
  {
    "text": "saying it is explicit then I am allowing the call or of course I can make it an",
    "start": "417610",
    "end": "424180"
  },
  {
    "text": "inheritance hierarchy where be publicly inherits from a then the call is also",
    "start": "424180",
    "end": "430090"
  },
  {
    "text": "allowed but if I'm not making the choice explicitly to allow it it isn't allowed",
    "start": "430090",
    "end": "438840"
  },
  {
    "text": "so if I just start like this this this is the first steps of the rest of the",
    "start": "438840",
    "end": "445960"
  },
  {
    "text": "story instead of having these type deaths for request ID and receiver ID I",
    "start": "445960",
    "end": "451330"
  },
  {
    "text": "make these small starts and I have this same mistake then I get this compilation",
    "start": "451330",
    "end": "458620"
  },
  {
    "text": "error no known conversion from receiver ID to request ID for first argument this",
    "start": "458620",
    "end": "465940"
  },
  {
    "text": "is pretty good so there is a solution by making sure",
    "start": "465940",
    "end": "476090"
  },
  {
    "text": "that my types actually are a distinct type they're not just not not just",
    "start": "476090",
    "end": "481400"
  },
  {
    "text": "aliases that pretends to be something different so we have controller by",
    "start": "481400",
    "end": "489410"
  },
  {
    "text": "default everything is forbidden we are like medieval rulers we make the laws as",
    "start": "489410",
    "end": "496760"
  },
  {
    "text": "we see fit and anything we don't like is by default not allowed we must permit it",
    "start": "496760",
    "end": "505720"
  },
  {
    "text": "so I can write like this instead I make receiver idea class but I can construct",
    "start": "505720",
    "end": "513349"
  },
  {
    "text": "and convert back to the underlying type and some comparison operators because",
    "start": "513350",
    "end": "519919"
  },
  {
    "text": "that does make sense maybe relational operators and then I thought actually",
    "start": "519920",
    "end": "531290"
  },
  {
    "text": "when I wrote an earlier version of this talk back in the winter I had something",
    "start": "531290",
    "end": "538550"
  },
  {
    "text": "like 20 slides on how cool C++ 17 is with enum class that you can use as a",
    "start": "538550",
    "end": "544520"
  },
  {
    "text": "safe interior toilet because you can construct an enum class that doesn't",
    "start": "544520",
    "end": "551780"
  },
  {
    "text": "have any enumerators you can just construct it with any value that fits and you can get it back with a static",
    "start": "551780",
    "end": "559460"
  },
  {
    "text": "cost and everything else is forbidden unless you write functions for your type",
    "start": "559460",
    "end": "567620"
  },
  {
    "text": "so that is super cool but then all of us fruit salad happen anyone heard about",
    "start": "567620",
    "end": "573350"
  },
  {
    "text": "Oliver's fruit salad there was a discussion on Twitter about how cool",
    "start": "573350",
    "end": "579860"
  },
  {
    "text": "this feature is and in the morning when I woke up I found this Oliver posted",
    "start": "579860",
    "end": "589820"
  },
  {
    "text": "this thing too much code both compiler Explorer and Pete bindles responded",
    "start": "589820",
    "end": "595980"
  },
  {
    "text": "d-dude you just slice an orange into an apple so I had to click on the link didn't I",
    "start": "595980",
    "end": "602370"
  },
  {
    "text": "so we get this enumclaw syringe in a closed apple create an orange o4 create",
    "start": "602370",
    "end": "609450"
  },
  {
    "text": "an apple three create an apple from an orange oh ok no compilation warning this",
    "start": "609450",
    "end": "620910"
  },
  {
    "text": "is bad this is really bad Shafiq notice wow this seems rather",
    "start": "620910",
    "end": "631910"
  },
  {
    "text": "undesirable and points out - which paper seems to be the culprit richard smith",
    "start": "631910",
    "end": "638670"
  },
  {
    "text": "agrees this is really not what we meant I really like Oliver's response to that",
    "start": "638670",
    "end": "648450"
  },
  {
    "text": "did I just find the bug in the C++ standard to the best of my knowledge",
    "start": "648450",
    "end": "655260"
  },
  {
    "text": "this is handled as a core language issue I have not checked up if it is on the AC",
    "start": "655260",
    "end": "662370"
  },
  {
    "text": "list but it I hope it is so yes Oliver it looks like you did so for now I",
    "start": "662370",
    "end": "671940"
  },
  {
    "text": "cannot endorse using enum flowers as safe integers I really wish I could but",
    "start": "671940",
    "end": "677610"
  },
  {
    "text": "currently not hopefully soon maybe next time I deliver this talk we'll see so",
    "start": "677610",
    "end": "684800"
  },
  {
    "text": "we're back to this writing a lot of code and it feels like a bit of pain",
    "start": "684800",
    "end": "691380"
  },
  {
    "text": "especially since I have to do it again for the request ID because they are really they have the same properties so",
    "start": "691380",
    "end": "702530"
  },
  {
    "text": "of course I had to wonder can can I do something about this and there comes the",
    "start": "702530",
    "end": "708570"
  },
  {
    "text": "next step so what I did next was I",
    "start": "708570",
    "end": "716300"
  },
  {
    "text": "started to write a very very simple small library at work to make it easy to",
    "start": "716300",
    "end": "724110"
  },
  {
    "text": "create your own save types so the idea I came up with is",
    "start": "724110",
    "end": "731360"
  },
  {
    "text": "this the what I'm presenting here is somewhat simplified but but it conveys the ID so I have a class template safe",
    "start": "731360",
    "end": "741470"
  },
  {
    "text": "type that takes a tt is that the type we want it to represent and then a tag type",
    "start": "741470",
    "end": "747850"
  },
  {
    "text": "I'll get back to the tag type in a very short one so we can create it from a tee",
    "start": "747850",
    "end": "754399"
  },
  {
    "text": "and we can convert it back to a tee and to prevent cross constructions I don't",
    "start": "754399",
    "end": "763579"
  },
  {
    "text": "want to again repeat Oliver's fruit salad although this actually preceded",
    "start": "763579",
    "end": "769310"
  },
  {
    "text": "that discussion by five or six years to make it impossible to create an orange",
    "start": "769310",
    "end": "777680"
  },
  {
    "text": "from an apple I do this I explicitly delete the constructor that takes",
    "start": "777680",
    "end": "784279"
  },
  {
    "text": "another tea or another tag and the tag is actually not used for anything else",
    "start": "784279",
    "end": "790790"
  },
  {
    "text": "than to make to make types distinguish the different so that if I have one safe",
    "start": "790790",
    "end": "798319"
  },
  {
    "text": "type int with one tag and another safe type int and another tag then they are unique types that have nothing in common",
    "start": "798319",
    "end": "805850"
  },
  {
    "text": "and we cannot cross construct them and",
    "start": "805850",
    "end": "810920"
  },
  {
    "text": "also you add the same kind of prevention for assignment and whatnot so this works",
    "start": "810920",
    "end": "821180"
  },
  {
    "text": "so I can now write my type int one is a safe type int with an int one tag and",
    "start": "821180",
    "end": "829459"
  },
  {
    "text": "one underscore tag and into is a safe type interval in to underscore tag the",
    "start": "829459",
    "end": "835550"
  },
  {
    "text": "interesting thing here is perhaps if you're not familiar with this that the",
    "start": "835550",
    "end": "840800"
  },
  {
    "text": "tag types are for were declared where they are needed these tag types aren't",
    "start": "840800",
    "end": "846139"
  },
  {
    "text": "used anywhere else in the entire system no one cares if they're just there to",
    "start": "846139",
    "end": "852009"
  },
  {
    "text": "ensure that int one and into all these different types even though both are",
    "start": "852009",
    "end": "858320"
  },
  {
    "text": "representing ins so I could write my",
    "start": "858320",
    "end": "865649"
  },
  {
    "text": "code like this instead to say that request ID is a safe type of you in 30",
    "start": "865649",
    "end": "870779"
  },
  {
    "text": "duty and the tag and receiver ID is also and note that I have different tags for",
    "start": "870779",
    "end": "876930"
  },
  {
    "text": "these so they are different types so when I have this bug again and compile",
    "start": "876930",
    "end": "883670"
  },
  {
    "text": "again a fairly decent compilation error message safe type blah blah blah",
    "start": "883670",
    "end": "889560"
  },
  {
    "text": "receiver ID tag is not safe types probable request ID tag it's not ideal",
    "start": "889560",
    "end": "896399"
  },
  {
    "text": "but it's really not bad but then what we",
    "start": "896399",
    "end": "908880"
  },
  {
    "text": "can do is something that perhaps looks a little bit surprising if you haven't",
    "start": "908880",
    "end": "915060"
  },
  {
    "text": "seen it we say the request ID is struct that inherits from safe type of request",
    "start": "915060",
    "end": "922470"
  },
  {
    "text": "ID have you heard about the CR T P the Q is curiously recurring template",
    "start": "922470",
    "end": "928589"
  },
  {
    "text": "parameter idiom so who has never heard of it okay there are a few hands so",
    "start": "928589",
    "end": "935550"
  },
  {
    "text": "let's explain this showing my age again I read about this first in Jim",
    "start": "935550",
    "end": "942329"
  },
  {
    "text": "Copeland's book advanced programming styles and idioms that I bought",
    "start": "942329",
    "end": "947940"
  },
  {
    "text": "summer of 93 the thing is this you saw how safe type handle the tag it",
    "start": "947940",
    "end": "956100"
  },
  {
    "text": "doesn't actually use it at all it's just there it's a it's a typed it it's used",
    "start": "956100",
    "end": "961200"
  },
  {
    "text": "to distinguish it from other safe types if you read the source code you struct",
    "start": "961200",
    "end": "967500"
  },
  {
    "text": "request ID : now here at : because the ID is known to be a type it's only for",
    "start": "967500",
    "end": "973350"
  },
  {
    "text": "were declared we don't know anything about it other than that it exists as a name meaning that we can pass that name",
    "start": "973350",
    "end": "980160"
  },
  {
    "text": "to template we can have pointers to it we can have references to it but we can",
    "start": "980160",
    "end": "986970"
  },
  {
    "text": "get any other information from we cannot query sites we cannot call functions because it's not defined yet",
    "start": "986970",
    "end": "994310"
  },
  {
    "text": "but this is enough then we can inherit from safe type of an unsigned of a type",
    "start": "994310",
    "end": "1001220"
  },
  {
    "text": "and request ID because safe types use a request ID is just to know its name so",
    "start": "1001220",
    "end": "1008660"
  },
  {
    "text": "this is safe it's perfectly cool so yeah request ID is defined in terms of",
    "start": "1008660",
    "end": "1013910"
  },
  {
    "text": "request ID by name and then I have this I forgot what it's called now where we",
    "start": "1013910",
    "end": "1023930"
  },
  {
    "text": "this using where we say that yeah and request ID uses the constructor of safe type so I don't have to repeat",
    "start": "1023930",
    "end": "1031010"
  },
  {
    "text": "them and with this again exactly the compilation error that I want to",
    "start": "1031010",
    "end": "1037520"
  },
  {
    "text": "it says candidate function not viable no known conversion from receiver ID to request ID for first argument victory",
    "start": "1037520",
    "end": "1047020"
  },
  {
    "text": "and I was really happy with this and honestly this code is still used at work",
    "start": "1048820",
    "end": "1056110"
  },
  {
    "text": "well not exactly this code because I said this is a simplification but but still it serves its purpose it's good",
    "start": "1056110",
    "end": "1066700"
  },
  {
    "text": "then to remove or reduce at least the boilerplate I'm I'm a simmer",
    "start": "1068799",
    "end": "1074840"
  },
  {
    "text": "I use the preprocessor to repeat things so that my colleagues can write just",
    "start": "1074840",
    "end": "1081950"
  },
  {
    "text": "this save type is a request ID say save type request ID is a you in 30 duty this",
    "start": "1081950",
    "end": "1090290"
  },
  {
    "text": "is not really this not more typing to do than to write a type def but it provides",
    "start": "1090290",
    "end": "1099290"
  },
  {
    "text": "a lot more safety this is good",
    "start": "1099290",
    "end": "1103750"
  },
  {
    "text": "so let's dive into what other people have done there were a number of",
    "start": "1105240",
    "end": "1113250"
  },
  {
    "text": "libraries for this I decided to use two",
    "start": "1113250",
    "end": "1119170"
  },
  {
    "text": "examples I will not go into them in any depth really but I just to show you a",
    "start": "1119170",
    "end": "1124720"
  },
  {
    "text": "flavor of some things that are available so this young man young a familiar food",
    "start": "1124720",
    "end": "1133930"
  },
  {
    "text": "Nathan on various social media posted this type safe library zero overhead",
    "start": "1133930",
    "end": "1140470"
  },
  {
    "text": "utilities for preventing bugs at compile time what's not allowed a have the",
    "start": "1140470",
    "end": "1146830"
  },
  {
    "text": "github link there this is a rather rich library you can create your types and",
    "start": "1146830",
    "end": "1153190"
  },
  {
    "text": "piece together the behavior that you want your type to have and it also includes a number of other things that",
    "start": "1153190",
    "end": "1159190"
  },
  {
    "text": "arguably don't really belong there but but they are good like an improved",
    "start": "1159190",
    "end": "1164260"
  },
  {
    "text": "optional type and version of still very and has some cool extra features so this",
    "start": "1164260",
    "end": "1176530"
  },
  {
    "text": "was in 2016 so it's it's not very it feels like it's been available for so",
    "start": "1176530",
    "end": "1182080"
  },
  {
    "text": "much longer but it it is fairly new the way you use it is this you in in this",
    "start": "1182080",
    "end": "1192850"
  },
  {
    "text": "strong type def dot HPP you have a closed template strong type Devlin and",
    "start": "1192850",
    "end": "1198520"
  },
  {
    "text": "you see the ID you have a tag type and the underlying type and you can default construct them and copy and move",
    "start": "1198520",
    "end": "1206020"
  },
  {
    "text": "constructing you can get the underlying values everything is constant but everything is no except and it's",
    "start": "1206020",
    "end": "1212290"
  },
  {
    "text": "generally cool and when you use them like this they are just a handle you can",
    "start": "1212290",
    "end": "1219580"
  },
  {
    "text": "you can get a value in your code you can store a value and you can retrieve a value and that's the only thing you can",
    "start": "1219580",
    "end": "1225940"
  },
  {
    "text": "do and the way you use it is you include this strong type Theft Auto HPP Yanis",
    "start": "1225940",
    "end": "1234430"
  },
  {
    "text": "and uses this construction in all his documentation so I've I don't feel very bad about the alias so you use the CR TP to say",
    "start": "1234430",
    "end": "1245590"
  },
  {
    "text": "that my handle is a strong type def of my handle and int you recognize the pattern but then comes a clever bit",
    "start": "1245590",
    "end": "1252720"
  },
  {
    "text": "inside the mainstays typesafe there is a strong type def op namespace and in that",
    "start": "1252720",
    "end": "1262450"
  },
  {
    "text": "our operations that you can add to your type so you say yeah and by the way I",
    "start": "1262450",
    "end": "1269230"
  },
  {
    "text": "want my handle to be equality comparable need and I want an Austrian insertion",
    "start": "1269230",
    "end": "1276820"
  },
  {
    "text": "operator so that is pretty clever I did",
    "start": "1276820",
    "end": "1283180"
  },
  {
    "text": "it actually completely blew my mind but when I saw this originally because now I just add the operations that I want to",
    "start": "1283180",
    "end": "1291460"
  },
  {
    "text": "my type so sort of picking LEGO pieces and building my type here like that",
    "start": "1291460",
    "end": "1296740"
  },
  {
    "text": "without having to do very much work there is also a more high level version",
    "start": "1296740",
    "end": "1304870"
  },
  {
    "text": "where you can say that yeah and my int by the way is an integer arithmetic type",
    "start": "1304870",
    "end": "1311130"
  },
  {
    "text": "and here comes a surprise it actually surprised me a lot when I started using",
    "start": "1311130",
    "end": "1316150"
  },
  {
    "text": "these types of strong types in my code introduced them I have not found a",
    "start": "1316150",
    "end": "1323530"
  },
  {
    "text": "single use for an integer arithmetic type maybe my code base is weird I don't",
    "start": "1323530",
    "end": "1330730"
  },
  {
    "text": "know but I haven't I have found use for something else that a lot of people",
    "start": "1330730",
    "end": "1337180"
  },
  {
    "text": "mistake for being an arithmetic type I'll get to that in a while a physical I really strongly suggest you",
    "start": "1337180",
    "end": "1348730"
  },
  {
    "text": "take a look at this library it's it's cool you can see define your own type",
    "start": "1348730",
    "end": "1355090"
  },
  {
    "text": "you can add your own functions to it like I said you retrieve the underlying",
    "start": "1355090",
    "end": "1360910"
  },
  {
    "text": "value with a static cost but there is also a get function this get functions",
    "start": "1360910",
    "end": "1366010"
  },
  {
    "text": "with exists with many overloads that does the right thing for constant volatile and or value reference value reference it is neat and then you",
    "start": "1366010",
    "end": "1375110"
  },
  {
    "text": "have this guy UNIFEM Bukhara are you reading his blog flu in C++ good the",
    "start": "1375110",
    "end": "1384290"
  },
  {
    "text": "rest of you you're bad people stop reading his excellent is absolutely",
    "start": "1384290",
    "end": "1390170"
  },
  {
    "text": "brilliant he also has a such a library",
    "start": "1390170",
    "end": "1395600"
  },
  {
    "text": "called name type it's a much smaller library and it doesn't aim as high as it",
    "start": "1395600",
    "end": "1403520"
  },
  {
    "text": "intends to be a simpler but it allows you to piece together your strong types with your desired behavior and in",
    "start": "1403520",
    "end": "1409940"
  },
  {
    "text": "addition it has some conversions for like types I like the idea of nonlinear",
    "start": "1409940",
    "end": "1417350"
  },
  {
    "text": "conversions like from what's to decibels and what-have-you",
    "start": "1417350",
    "end": "1422290"
  },
  {
    "text": "watch his meeting C++ talk it's absolutely amazing how he introduces",
    "start": "1422680",
    "end": "1430060"
  },
  {
    "text": "these he uses his library as an example of how you can write much more",
    "start": "1430060",
    "end": "1436280"
  },
  {
    "text": "expressive code when you have strong types so do watch it the way you use his",
    "start": "1436280",
    "end": "1445970"
  },
  {
    "text": "library is nearly the same everything is in the namespace fluent and so you say",
    "start": "1445970",
    "end": "1456080"
  },
  {
    "text": "like my hand less affluent name type underlying type is int and a tag here",
    "start": "1456080",
    "end": "1464630"
  },
  {
    "text": "comes a different from jonathan miller's library in that the functionality the",
    "start": "1464630",
    "end": "1470330"
  },
  {
    "text": "unitherm pokhara calls them skills the skills are part of the template",
    "start": "1470330",
    "end": "1476780"
  },
  {
    "text": "parameter list so you just add them if this means you don't have to repeat like",
    "start": "1476780",
    "end": "1482120"
  },
  {
    "text": "you had in your Arthur Miller's where you publicly inherit from and say that yeah comparable my handle printable my handle",
    "start": "1482120",
    "end": "1489740"
  },
  {
    "text": "here did you just say yeah I wanted to be comfortable I want to be printable I want it to be horrible you can use the",
    "start": "1489740",
    "end": "1497030"
  },
  {
    "text": "CRT P of course if you want to and here's an odd one I'm not entirely",
    "start": "1497030",
    "end": "1507030"
  },
  {
    "text": "sure if I think it's a good idea that you can make your types implicitly",
    "start": "1507030",
    "end": "1512460"
  },
  {
    "text": "convertible to something but I think it is a good idea that if you want them to",
    "start": "1512460",
    "end": "1517500"
  },
  {
    "text": "be implicitly convertible you have to be very explicit about it so that part is",
    "start": "1517500",
    "end": "1523350"
  },
  {
    "text": "good and I'm not going to talk more",
    "start": "1523350",
    "end": "1528930"
  },
  {
    "text": "about these libraries you can check them out yourself they're well worth it both",
    "start": "1528930",
    "end": "1534180"
  },
  {
    "text": "of them by the way are such that if you're reasonably familiar with writing template code it's easy to add your own",
    "start": "1534180",
    "end": "1541140"
  },
  {
    "text": "functionality your own skills it's really not a big effort so if you want something that isn't covered add it it's",
    "start": "1541140",
    "end": "1549270"
  },
  {
    "text": "not difficult so what happens with your code when you use strong types because",
    "start": "1549270",
    "end": "1558450"
  },
  {
    "text": "it actually changes like I mentioned I",
    "start": "1558450",
    "end": "1570900"
  },
  {
    "text": "work for a net inside in Stockholm where we make networking equipment and one of the things we really pride ourselves",
    "start": "1570900",
    "end": "1577770"
  },
  {
    "text": "with is that we know exactly how much network capacity is used everywhere in",
    "start": "1577770",
    "end": "1582840"
  },
  {
    "text": "the network and we do this with a little",
    "start": "1582840",
    "end": "1590070"
  },
  {
    "text": "bit I don't know I won't go into the details we have an an idea of a network",
    "start": "1590070",
    "end": "1596340"
  },
  {
    "text": "utilization a quanta that we call a slot and we grouped them together in frames",
    "start": "1596340",
    "end": "1604040"
  },
  {
    "text": "frames are typically about a thousand times bigger than I showed here but it",
    "start": "1604040",
    "end": "1609150"
  },
  {
    "text": "would make the slides completely incomprehensible and we identified data",
    "start": "1609150",
    "end": "1615150"
  },
  {
    "text": "flow with lots so in this case we can say that we have a green data flow that",
    "start": "1615150",
    "end": "1621920"
  },
  {
    "text": "occupies eight slots in total and we group them in ranges so you can say that",
    "start": "1621920",
    "end": "1627840"
  },
  {
    "text": "it's ranged 3 through 4 7 through 8 of 13 through 16 and we have the blue data",
    "start": "1627840",
    "end": "1633990"
  },
  {
    "text": "that is much smaller just three slots and we can say that the widest unused",
    "start": "1633990",
    "end": "1639450"
  },
  {
    "text": "network capacity this ability to express ranges is really important because we do",
    "start": "1639450",
    "end": "1646290"
  },
  {
    "text": "set arithmetics on these and being able to handle large chunks together saves a",
    "start": "1646290",
    "end": "1652830"
  },
  {
    "text": "lot of computation and memory so with",
    "start": "1652830",
    "end": "1659610"
  },
  {
    "text": "this we have types slot index and slot count this is pseudocode obviously you",
    "start": "1659610",
    "end": "1666000"
  },
  {
    "text": "cannot forward declare a type but just saying type name and the name of table I",
    "start": "1666000",
    "end": "1671309"
  },
  {
    "text": "wish we could but we can't but I just wanted to say that slot index is some",
    "start": "1671309",
    "end": "1676470"
  },
  {
    "text": "type I don't want to go into exactly what it is just yet and slot count also and we have slot range that contains an",
    "start": "1676470",
    "end": "1684720"
  },
  {
    "text": "index that is a start and the count that is a length so if we look at their frame you can see that the rightmost green",
    "start": "1684720",
    "end": "1691429"
  },
  {
    "text": "range is starting at slot 13 it's not index 13 and it has a length of 4 slots",
    "start": "1691429",
    "end": "1700789"
  },
  {
    "text": "and now let's look at code Peter Som",
    "start": "1701179",
    "end": "1708420"
  },
  {
    "text": "allowed give me a bad hard time about this example because it's a bad example he's right about that",
    "start": "1708420",
    "end": "1713520"
  },
  {
    "text": "but nevermind I have a function that we can query available capacity and I get 0",
    "start": "1713520",
    "end": "1721050"
  },
  {
    "text": "I guess as far as magic numbers go maybe",
    "start": "1721050",
    "end": "1726929"
  },
  {
    "text": "zero is the one you can get away with but it's still bad it doesn't have any",
    "start": "1726929",
    "end": "1733679"
  },
  {
    "text": "semantics it doesn't mean anything other than the value is zero if we just do",
    "start": "1733679",
    "end": "1739740"
  },
  {
    "text": "this and say that it's a slot count of zero it's not megabits per second or",
    "start": "1739740",
    "end": "1745440"
  },
  {
    "text": "whatever it's it's a slot count we have conveyed meaning to the code that wasn't",
    "start": "1745440",
    "end": "1752400"
  },
  {
    "text": "there earlier and also because it's",
    "start": "1752400",
    "end": "1758820"
  },
  {
    "text": "tiresome to write that so obviously you make give it a name saying now it's not",
    "start": "1758820",
    "end": "1764400"
  },
  {
    "text": "counter zero that lets know so I have given it a name so just by",
    "start": "1764400",
    "end": "1772600"
  },
  {
    "text": "doing this alone we have added some semantics and we have given names to things that makes it easier to reason",
    "start": "1772600",
    "end": "1779640"
  },
  {
    "text": "about the code this is not the biggest advantage but it is an advantage but",
    "start": "1779640",
    "end": "1787780"
  },
  {
    "text": "here comes a big one encapsulation we're in implementing a binary protocol",
    "start": "1787780",
    "end": "1795370"
  },
  {
    "text": "where we stuff information into binary packets so we want to serialize them and",
    "start": "1795370",
    "end": "1801600"
  },
  {
    "text": "we see that slot counts are serialized",
    "start": "1801600",
    "end": "1806650"
  },
  {
    "text": "as 24 bits and this is really bothersome",
    "start": "1806650",
    "end": "1812710"
  },
  {
    "text": "this code is repeated not in a lot of places the three or four places throughout the codebase but this is",
    "start": "1812710",
    "end": "1820950"
  },
  {
    "text": "something that deteriorates after a while because for some reason maybe we",
    "start": "1820950",
    "end": "1826870"
  },
  {
    "text": "decide that 24 bits was not the right size we should use something else then I have to look up all places and it gives",
    "start": "1826870",
    "end": "1835360"
  },
  {
    "text": "the wrong information at the wrong place I'm not really respecting the what level",
    "start": "1835360",
    "end": "1841870"
  },
  {
    "text": "of abstraction I'm working on but if slot count is not just to type def for",
    "start": "1841870",
    "end": "1848560"
  },
  {
    "text": "an unsigned integer type it is actually a type of its own I can overload",
    "start": "1848560",
    "end": "1857440"
  },
  {
    "text": "functions on it so I can say let's introduce this ID that all types of data",
    "start": "1857440",
    "end": "1864790"
  },
  {
    "text": "that we want to put into a message buffer we always put them into the message buffer thee of this function",
    "start": "1864790",
    "end": "1870790"
  },
  {
    "text": "serialized data which is a huge overload set we've right serialized data for",
    "start": "1870790",
    "end": "1876780"
  },
  {
    "text": "request ID a receiver ID also and a lot of other stuff and then we say inside",
    "start": "1876780",
    "end": "1885130"
  },
  {
    "text": "that function that yeah it's 24 bits we serialize it as and then we can make it",
    "start": "1885130",
    "end": "1893320"
  },
  {
    "text": "more typically c plus plus C by just adding simple function templates as a member to",
    "start": "1893320",
    "end": "1900380"
  },
  {
    "text": "the message buffer so I can write buffer dot serialize capacity now we get the",
    "start": "1900380",
    "end": "1908480"
  },
  {
    "text": "right information at the right level of abstraction here when I'm building the",
    "start": "1908480",
    "end": "1913670"
  },
  {
    "text": "message the important thing is what data do our stuff into my message how they",
    "start": "1913670",
    "end": "1919940"
  },
  {
    "text": "are encode it is not really important here that that problem belongs elsewhere and it's hidden well hidden it's",
    "start": "1919940",
    "end": "1927740"
  },
  {
    "text": "implemented inside the serialized data function so just by making sure that",
    "start": "1927740",
    "end": "1933290"
  },
  {
    "text": "that this is a type of its own and not an alias I can overload functions and I gain an advantage when it comes to",
    "start": "1933290",
    "end": "1942880"
  },
  {
    "text": "encapsulation of information in my code so that is good then where type",
    "start": "1942880",
    "end": "1951320"
  },
  {
    "text": "semantics one thing that made me really upset was this I have a the slot pool it",
    "start": "1951320",
    "end": "1958370"
  },
  {
    "text": "has a lot of things but it caches the number of unused slots and when I have",
    "start": "1958370",
    "end": "1967610"
  },
  {
    "text": "this function release capacity that takes takes a vector of slot ranges I",
    "start": "1967610",
    "end": "1973550"
  },
  {
    "text": "obviously just want it to loop over them and add the length to my shot count and",
    "start": "1973550",
    "end": "1981290"
  },
  {
    "text": "this stupid strong type does not allow operator plus equals maybe I should use",
    "start": "1981290",
    "end": "1988520"
  },
  {
    "text": "some arithmetic type but then I started thinking or should I",
    "start": "1988520",
    "end": "1996970"
  },
  {
    "text": "exactly what operations do I actually want to support here so I started",
    "start": "1999679",
    "end": "2010880"
  },
  {
    "text": "wondering do do I want to be able to add slot counts yeah well obviously that was",
    "start": "2010880",
    "end": "2016700"
  },
  {
    "text": "the example that made me a little bit upset so yeah I want to add slot cars I get news loss cons that makes sense they",
    "start": "2016700",
    "end": "2024230"
  },
  {
    "text": "want to be able to subtract slot counts no how do you do want to be able to",
    "start": "2024230",
    "end": "2032780"
  },
  {
    "text": "multiply them no I may be in some other",
    "start": "2032780",
    "end": "2038450"
  },
  {
    "text": "universe that there is a situation where this makes sense but in my domain it doesn't so no I want to make that",
    "start": "2038450",
    "end": "2046070"
  },
  {
    "text": "forbidden you want to be able to scale it to multiply it with the ratio to say that I have this amount of slots and I",
    "start": "2046070",
    "end": "2053750"
  },
  {
    "text": "want three times as many now why not and",
    "start": "2053750",
    "end": "2060250"
  },
  {
    "text": "do I then want to divide slot counts why",
    "start": "2060250",
    "end": "2065270"
  },
  {
    "text": "not I'm gonna get a ratio from it that makes sense the this this slot counts is five times as large as this slot card",
    "start": "2065270",
    "end": "2072940"
  },
  {
    "text": "and then it comes naturally that I want to be able to scale it down with the ratio also but it's not index is in the",
    "start": "2072940",
    "end": "2084679"
  },
  {
    "text": "slot indices denotes positions in a frame don't want to add them I see you",
    "start": "2084679",
    "end": "2091340"
  },
  {
    "text": "shaking heads no I don't leave it makes no sense don't want to add a slot",
    "start": "2091340",
    "end": "2097609"
  },
  {
    "text": "indexes to slot counts yeah I do I do so for example I can then easily iterate",
    "start": "2097609",
    "end": "2107270"
  },
  {
    "text": "over slot ranges saying for example that if I am on the slot range the the",
    "start": "2107270",
    "end": "2112310"
  },
  {
    "text": "rightmost green one that starts with thirteen and its length this for that that means that the next range starts at",
    "start": "2112310",
    "end": "2118220"
  },
  {
    "text": "17 cool that is good I like that don't want to subtract slot indexes yeah",
    "start": "2118220",
    "end": "2126170"
  },
  {
    "text": "to get slot counts that make sense divide them now my son APS's begin to",
    "start": "2126170",
    "end": "2134039"
  },
  {
    "text": "hurt a little bit I don't think I understand what that would mean so no I don't divide them by slot count",
    "start": "2134039",
    "end": "2141210"
  },
  {
    "text": "I am developing a head okay now scale",
    "start": "2141210",
    "end": "2146640"
  },
  {
    "text": "them no multiply them stopped index squared",
    "start": "2146640",
    "end": "2153319"
  },
  {
    "text": "no x stop counting no go away scale them no do you see a",
    "start": "2153319",
    "end": "2164460"
  },
  {
    "text": "pattern here do you recognize this pattern have you seen this in in code before an excellent",
    "start": "2164460",
    "end": "2176369"
  },
  {
    "text": "example in the standard library is still kronor where on the right hand side you",
    "start": "2176369",
    "end": "2184559"
  },
  {
    "text": "would have the time points there are positions absolute positions in time and",
    "start": "2184559",
    "end": "2191299"
  },
  {
    "text": "you can subtract two time points and get a duration which is two types on the",
    "start": "2191299",
    "end": "2196349"
  },
  {
    "text": "left and you can add durations you can subtract durations you can scale",
    "start": "2196349",
    "end": "2201510"
  },
  {
    "text": "durations you can add the durations to a time point to get another time point",
    "start": "2201510",
    "end": "2207559"
  },
  {
    "text": "cool I'm onto something this has been seen before when I discovered this I was",
    "start": "2207559",
    "end": "2218420"
  },
  {
    "text": "sort of looking for a terminology because I saw this pattern in so many",
    "start": "2218420",
    "end": "2223470"
  },
  {
    "text": "places and this is actually something that my code base is filled of there's so many examples of this and this is why",
    "start": "2223470",
    "end": "2231029"
  },
  {
    "text": "I don't have a need for any arithmetic typed yes this is what I need addy here",
    "start": "2231029",
    "end": "2238069"
  },
  {
    "text": "brought my attention to something that I did not know in mathematics these are",
    "start": "2238069",
    "end": "2246599"
  },
  {
    "text": "known as affine space types so in mathematics mfin space is the geometric",
    "start": "2246599",
    "end": "2253260"
  },
  {
    "text": "structure that generalizes the properties of euclidean spaces in such a way that these are independent of the",
    "start": "2253260",
    "end": "2259319"
  },
  {
    "text": "concepts of distance and measure of angle keeping only the properties related to parallelism ratio of lengths for",
    "start": "2259319",
    "end": "2265919"
  },
  {
    "text": "parallel line segments so if you think about a two dimensional space then you",
    "start": "2265919",
    "end": "2273269"
  },
  {
    "text": "have positions on that space coordinates in a coordinate system if you like and",
    "start": "2273269",
    "end": "2280399"
  },
  {
    "text": "you have displacements vectors that is the difference between them and if",
    "start": "2280399",
    "end": "2289289"
  },
  {
    "text": "vectors are parallel you can talk about the lengths in relation to each other",
    "start": "2289289",
    "end": "2295709"
  },
  {
    "text": "but it and you add vectors these displacements to positions to get new",
    "start": "2295709",
    "end": "2301499"
  },
  {
    "text": "positions etc etc and when you scale this down to one dimension you get exactly the problem that I described you",
    "start": "2301499",
    "end": "2308179"
  },
  {
    "text": "get what stood Cronauer implements or models I had absolutely no idea about",
    "start": "2308179",
    "end": "2317339"
  },
  {
    "text": "this but I'm glad I have found a name that is cool",
    "start": "2317339",
    "end": "2322829"
  },
  {
    "text": "f-fine space types are everywhere in my system yeah let's look at test code test",
    "start": "2322829",
    "end": "2338249"
  },
  {
    "text": "code is weird test code is not like other code let's take this example we",
    "start": "2338249",
    "end": "2345209"
  },
  {
    "text": "have some function throttle capacity if we decide that we have a number of data",
    "start": "2345209",
    "end": "2353909"
  },
  {
    "text": "flows on a link in the networking we want to squeeze it down a little bit so",
    "start": "2353909",
    "end": "2359849"
  },
  {
    "text": "I can have this test to see that this is implemented in a fair way so I have some",
    "start": "2359849",
    "end": "2366389"
  },
  {
    "text": "destination client I create with a capacity of five and another with a",
    "start": "2366389",
    "end": "2372509"
  },
  {
    "text": "capacity of eight a place expectations on them that I get a callback to about a reduced capacity",
    "start": "2372509",
    "end": "2379199"
  },
  {
    "text": "when I call this throttle capacity and this code is so short and so confusing",
    "start": "2379199",
    "end": "2386969"
  },
  {
    "text": "because the throttle capacity to four or five which is four again which is five",
    "start": "2386969",
    "end": "2394189"
  },
  {
    "text": "reading the prototype at the top yeah four is a request ID yeah sure okay you know",
    "start": "2394189",
    "end": "2400580"
  },
  {
    "text": "whatever this is bad so of course you",
    "start": "2400580",
    "end": "2406880"
  },
  {
    "text": "have learned that do not use magic numbers you give them names so we create",
    "start": "2406880",
    "end": "2411980"
  },
  {
    "text": "a variable request ID that is a request that has a value and we can use it and",
    "start": "2411980",
    "end": "2417770"
  },
  {
    "text": "now the code is a little bit clearer it's not entirely obvious but five and",
    "start": "2417770",
    "end": "2424010"
  },
  {
    "text": "eight and two and three ah so let's continue on this path and give them",
    "start": "2424010",
    "end": "2431150"
  },
  {
    "text": "names for the love of everything that is",
    "start": "2431150",
    "end": "2437840"
  },
  {
    "text": "sacred do not do this do not do this to your colleagues or to yourself this code",
    "start": "2437840",
    "end": "2445840"
  },
  {
    "text": "went from bad to completely unreadable don't generally speaking I agree with",
    "start": "2445840",
    "end": "2456260"
  },
  {
    "text": "the idea that you don't use magic numbers but test code is different I'm",
    "start": "2456260",
    "end": "2463820"
  },
  {
    "text": "talking now about example based test I think it's better to in this case I give",
    "start": "2463820",
    "end": "2469370"
  },
  {
    "text": "them semantics I say that node client with capacity slot count file now we",
    "start": "2469370",
    "end": "2476510"
  },
  {
    "text": "know what the what the unit is we're talking about but we're also exposing the number saying that it is five and it",
    "start": "2476510",
    "end": "2483710"
  },
  {
    "text": "is eight and I expect to be notified that the capacity goes to two and three",
    "start": "2483710",
    "end": "2490910"
  },
  {
    "text": "when I throttle eight to five two plus three is five yeah that makes sense that",
    "start": "2490910",
    "end": "2497450"
  },
  {
    "text": "part of the test is probably correct five down to two eight down to three",
    "start": "2497450",
    "end": "2503410"
  },
  {
    "text": "probably fair scaling yeah I I agree this is a decent test so in example",
    "start": "2503410",
    "end": "2509450"
  },
  {
    "text": "based test I think it makes sense to use magic numbers but give them semantics by",
    "start": "2509450",
    "end": "2515530"
  },
  {
    "text": "explicitly saying what type you're talking about",
    "start": "2515530",
    "end": "2520420"
  },
  {
    "text": "and that sort of it just a few questions",
    "start": "2523430",
    "end": "2528810"
  },
  {
    "text": "I ran out of time or rather I finished earlier but what we what we can conclude",
    "start": "2528810",
    "end": "2538590"
  },
  {
    "text": "is they said yeah safety for built in times types is abysmal in see you saw",
    "start": "2538590",
    "end": "2544710"
  },
  {
    "text": "the early example with the C style in ohms and floating-point values it",
    "start": "2544710",
    "end": "2550530"
  },
  {
    "text": "doesn't make any sense whatsoever to be able to do that and narrowing cost and",
    "start": "2550530",
    "end": "2556050"
  },
  {
    "text": "overflows and what have you but structure and classes are as strong as",
    "start": "2556050",
    "end": "2562320"
  },
  {
    "text": "you wish you must explicitly add the functionality if you're not doing that you they just hold values and that's it",
    "start": "2562320",
    "end": "2572180"
  },
  {
    "text": "and there are libraries that make this easier so you don't have to do it from",
    "start": "2572990",
    "end": "2579869"
  },
  {
    "text": "scratch yourself you're free to of course if you want to think about your",
    "start": "2579869",
    "end": "2590100"
  },
  {
    "text": "types and the operations because this improves your understanding of the",
    "start": "2590100",
    "end": "2595380"
  },
  {
    "text": "problem like my discovery of these I",
    "start": "2595380",
    "end": "2601619"
  },
  {
    "text": "find space types and their relations because by then making my type support",
    "start": "2601619",
    "end": "2609300"
  },
  {
    "text": "only the operations that make sense to do I'm improving the the code I'm",
    "start": "2609300",
    "end": "2615720"
  },
  {
    "text": "improving my chances of writing the right thing and beware of the urge for",
    "start": "2615720",
    "end": "2621869"
  },
  {
    "text": "convenience it's really convenient to have implicit conversions two and four",
    "start": "2621869",
    "end": "2628650"
  },
  {
    "text": "to and from everything but then you sort of lost the the thing you stride for",
    "start": "2628650",
    "end": "2634830"
  },
  {
    "text": "that is the type safety strong types",
    "start": "2634830",
    "end": "2640230"
  },
  {
    "text": "leads to more expressive code you have fewer magical numbers you give things names you get better encapsulation and",
    "start": "2640230",
    "end": "2650300"
  },
  {
    "text": "you get that explicitly express intent and I",
    "start": "2650720",
    "end": "2657580"
  },
  {
    "text": "think that is good and be careful with the type death because it sort of gives",
    "start": "2657580",
    "end": "2663280"
  },
  {
    "text": "the illusion of introducing new types and doesn't it just gives a new name for",
    "start": "2663280",
    "end": "2668530"
  },
  {
    "text": "something and I'm really surprised you",
    "start": "2668530",
    "end": "2676240"
  },
  {
    "text": "haven't asked the obvious question so I'm going to assume you have what's the",
    "start": "2676240",
    "end": "2682330"
  },
  {
    "text": "cost of this you recognize this construction or safe type with the tag",
    "start": "2682330",
    "end": "2691050"
  },
  {
    "text": "I've added some addition and subtraction operations so we have three safe types",
    "start": "2691050",
    "end": "2700600"
  },
  {
    "text": "here safe integers and I have a function",
    "start": "2700600",
    "end": "2706930"
  },
  {
    "text": "that wheel doesn't do a lot it just calls another function with the sum of two other types and we can see it here",
    "start": "2706930",
    "end": "2715120"
  },
  {
    "text": "and the compiler Explorer what it's comprised to I would argue that this is",
    "start": "2715120",
    "end": "2721450"
  },
  {
    "text": "not an awful lot of overhead but it gets",
    "start": "2721450",
    "end": "2726730"
  },
  {
    "text": "more interesting I have some more",
    "start": "2726730",
    "end": "2732760"
  },
  {
    "text": "complex functions safe func that that operates on the references and updates",
    "start": "2732760",
    "end": "2740200"
  },
  {
    "text": "each other so we can see it here it it becomes a move and add a sub and a move",
    "start": "2740200",
    "end": "2747540"
  },
  {
    "text": "but that seems pretty good then I do the same thing with type aliases you know by",
    "start": "2747540",
    "end": "2757930"
  },
  {
    "text": "the way what you call api's draugar each term for AP is that use primitive types",
    "start": "2757930",
    "end": "2766350"
  },
  {
    "text": "called primitive obsession don't do that do not fall for the primitive obsession",
    "start": "2766350",
    "end": "2771820"
  },
  {
    "text": "so we have a primitive function it does pretty much the same thing as safe func",
    "start": "2771820",
    "end": "2777790"
  },
  {
    "text": "it does move and move sub move it's one",
    "start": "2777790",
    "end": "2783520"
  },
  {
    "text": "instruction longer why is primitive funk one instruction",
    "start": "2783520",
    "end": "2790480"
  },
  {
    "text": "longer than the say funk any ideas",
    "start": "2790480",
    "end": "2795960"
  },
  {
    "text": "aliasing exactly the aliasing rules of the language says that pointers two",
    "start": "2798240",
    "end": "2807250"
  },
  {
    "text": "distinct types different types may not a list to the same object unless they are",
    "start": "2807250",
    "end": "2813849"
  },
  {
    "text": "related for example by inheritance or unless one of the types happen to be a chore so in the case of the primitive",
    "start": "2813849",
    "end": "2824740"
  },
  {
    "text": "funk using these aliases T in 20 + 2 t + 3 they are all in trances so they are",
    "start": "2824740",
    "end": "2832030"
  },
  {
    "text": "all of the same type so the compiler must assume that it is perfectly",
    "start": "2832030",
    "end": "2837369"
  },
  {
    "text": "possible that all these three references alias to the same same variable so it",
    "start": "2837369",
    "end": "2845440"
  },
  {
    "text": "must check between operations did it change whereas with the safe type these",
    "start": "2845440",
    "end": "2851859"
  },
  {
    "text": "are distinct different types they're unrelated they are not allowed to alias",
    "start": "2851859",
    "end": "2857080"
  },
  {
    "text": "so the compiler can say I know that this is not going to change between updates I",
    "start": "2857080",
    "end": "2863490"
  },
  {
    "text": "don't have to reread and see if something has happened and if you call",
    "start": "2863490",
    "end": "2871540"
  },
  {
    "text": "these through a reinterpret cost then you are the bad guy not the compiler so",
    "start": "2871540",
    "end": "2879960"
  },
  {
    "text": "don't be afraid to use save types for fear of runtime overhead performance",
    "start": "2879960",
    "end": "2886690"
  },
  {
    "text": "cost it's typically free you can",
    "start": "2886690",
    "end": "2892810"
  },
  {
    "text": "actually get a performance gain yeah in this example have a negative cost abstraction how cool is that I admit",
    "start": "2892810",
    "end": "2902020"
  },
  {
    "text": "that I actually had to work a little bit to find an example that showed a direct gain but but so don't expect that but",
    "start": "2902020",
    "end": "2909310"
  },
  {
    "text": "but you can get it but but do you expect to not lose performance",
    "start": "2909310",
    "end": "2915540"
  },
  {
    "text": "so with that I got to an end I didn't",
    "start": "2917020",
    "end": "2922640"
  },
  {
    "text": "actually intend to beat my drum over my experiment of strong type but since Tony",
    "start": "2922640",
    "end": "2927680"
  },
  {
    "text": "veneered mentioned it in one of his talks at C+ now a couple of weeks ago I",
    "start": "2927680",
    "end": "2932960"
  },
  {
    "text": "decided that I might as well I consider this one to be experimental feel free to",
    "start": "2932960",
    "end": "2939050"
  },
  {
    "text": "use if for experiments absolutely not in production code feel free to give me",
    "start": "2939050",
    "end": "2947060"
  },
  {
    "text": "feedback and pull requests and I do take the liberty to at any time change",
    "start": "2947060",
    "end": "2952760"
  },
  {
    "text": "anything yes so you know and with that I thank you for your attention",
    "start": "2952760",
    "end": "2960160"
  },
  {
    "text": "[Applause]",
    "start": "2960160",
    "end": "2966160"
  },
  {
    "text": "questions you're stunned completely oh",
    "start": "2966160",
    "end": "2971560"
  },
  {
    "text": "thanks",
    "start": "2971560",
    "end": "2974560"
  }
]