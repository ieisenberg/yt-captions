[
  {
    "text": "everyone from i guess all over the world in all sorts of different time zones um my name",
    "start": "10559",
    "end": "16480"
  },
  {
    "text": "is jimmy bogards and uh you can find me on twitter at jboguard uh this presentation on as well the all",
    "start": "16480",
    "end": "23680"
  },
  {
    "text": "the code and examples are on my github at github.comguard and i blog a lot about this topic and a bunch of other",
    "start": "23680",
    "end": "30880"
  },
  {
    "text": "stuff my blog at jimmybogar.com a little bit about myself um i'm a independent consultant also the",
    "start": "30880",
    "end": "37920"
  },
  {
    "text": "acting chief architect headspring and independent consulting agency out of austin texas",
    "start": "37920",
    "end": "43040"
  },
  {
    "text": "i do a lot of open source stuff um and i think they give me the mvp award for it now but they don't really say so",
    "start": "43040",
    "end": "48559"
  },
  {
    "text": "yay i guess and yeah this is uh this is a fun topic for me because i've",
    "start": "48559",
    "end": "54559"
  },
  {
    "text": "been having to deal with this problem for i guess almost 15 years now uh the",
    "start": "54559",
    "end": "59920"
  },
  {
    "text": "problem of distributed tracing and for as long as i've had to deal with distributed",
    "start": "59920",
    "end": "65280"
  },
  {
    "text": "systems i've i've wanted to know like what the heck is actually going on behind the scenes",
    "start": "65280",
    "end": "70400"
  },
  {
    "text": "and over my career i've had to build distributed tracing infrastructure from",
    "start": "70400",
    "end": "76560"
  },
  {
    "text": "scratch at least twice and while it is like a fun project and uh you know it's it's infrastructure",
    "start": "76560",
    "end": "82640"
  },
  {
    "text": "so you know you're your own product owner you get to make up all your own features and it's fun to do um like my clients don't care about that",
    "start": "82640",
    "end": "88560"
  },
  {
    "text": "they just want it to work uh and so sometimes i don't have the time or money to be able to implement my own distributed tracing um",
    "start": "88560",
    "end": "95680"
  },
  {
    "text": "but in the last couple years two or three years uh distributed tracy has now become much much easier to",
    "start": "95680",
    "end": "101439"
  },
  {
    "text": "implement and put in place in your applications so uh in this hour i want to show what i've been doing in the past year or so with",
    "start": "101439",
    "end": "107600"
  },
  {
    "text": "the clients uh putting in distributed tracing and very complex microservices kind of environment because you know",
    "start": "107600",
    "end": "114320"
  },
  {
    "text": "microservices yay so uh for a good part of my career um i was just",
    "start": "114320",
    "end": "120799"
  },
  {
    "text": "dealing with like single single process single application um kinds of systems uh those could get",
    "start": "120799",
    "end": "128160"
  },
  {
    "text": "pretty complex right they're desktop or web applications uh but the entire application is basically in one single process",
    "start": "128160",
    "end": "135760"
  },
  {
    "text": "now uh what that means though is that if something were to go wrong in this process an exception gets thrown",
    "start": "135760",
    "end": "141920"
  },
  {
    "text": "to something like that then you get this nice thing this is a this is a stack trace and the strike trace tells me exactly",
    "start": "141920",
    "end": "148959"
  },
  {
    "text": "where in my code the exception occurred but not just that location also shows a stack",
    "start": "148959",
    "end": "155280"
  },
  {
    "text": "of all the calls leading up to wherever i found that exception so for a lot of my career like this is",
    "start": "155280",
    "end": "161280"
  },
  {
    "text": "all i really needed right like something goes wrong in my application i see the exception i can i can see",
    "start": "161280",
    "end": "167360"
  },
  {
    "text": "exactly what methods were called if i'm debugging as well then i can go see like well it was past the",
    "start": "167360",
    "end": "172400"
  },
  {
    "text": "these arguments over here and these arguments over here and trace that all the way back up to the entry point of the application",
    "start": "172400",
    "end": "178959"
  },
  {
    "text": "um but this works for like everything inside a single process it looks fantastic right i just got the",
    "start": "178959",
    "end": "185040"
  },
  {
    "text": "entire trace and stack is in memory so i'm able to walk back up the stack and figure out exactly how you got",
    "start": "185040",
    "end": "190959"
  },
  {
    "text": "there uh but these days my applications i deal with aren't so simple uh they're more",
    "start": "190959",
    "end": "196400"
  },
  {
    "text": "complicated they're they're multiple applications talking to each other using various kinds of protocols so in",
    "start": "196400",
    "end": "203760"
  },
  {
    "text": "my application if the user hits some api from the front end but the exception is way over here in",
    "start": "203760",
    "end": "210080"
  },
  {
    "text": "the back end well the exception stack trace is in that application way down in the lower right hand corner",
    "start": "210080",
    "end": "217360"
  },
  {
    "text": "and the top model part of the application in the api i don't necessarily see any of that information",
    "start": "217360",
    "end": "222720"
  },
  {
    "text": "i just see you know some kind of api exception that occurred but otherwise the stack trace ends in",
    "start": "222720",
    "end": "229360"
  },
  {
    "text": "the api and doesn't peek through into the other downstream systems so me as a developer or sre",
    "start": "229360",
    "end": "236720"
  },
  {
    "text": "trying to figure out okay i got this exception in my logs how did this happen and what are the sequence of calls that led",
    "start": "236720",
    "end": "242640"
  },
  {
    "text": "up to this specific exception happening um i don't have a lot of options available for me for",
    "start": "242640",
    "end": "248959"
  },
  {
    "text": "a lot of my career what i would do is just spit out log files and so if i wanted to figure out",
    "start": "248959",
    "end": "254000"
  },
  {
    "text": "what went wrong in that log file i would look for that application's logs and then try to correlate back to the logs from",
    "start": "254000",
    "end": "260000"
  },
  {
    "text": "the other servers and correlate logs back to the other service and maybe i can enrich those logs with things like contextual identifiers like",
    "start": "260000",
    "end": "266400"
  },
  {
    "text": "well is this user id under this session identifier but still it's like all these different logs from",
    "start": "266400",
    "end": "271440"
  },
  {
    "text": "all these different places that are very difficult to correlate together uh and even if you dump them all in one location it's just a",
    "start": "271440",
    "end": "277600"
  },
  {
    "text": "big haystack that you're trying to piece together how the needle fell into it to be able to diagnose what the heck was going",
    "start": "277600",
    "end": "284160"
  },
  {
    "text": "wrong so uh in one of my first really big distributed systems i worked with",
    "start": "284160",
    "end": "289360"
  },
  {
    "text": "we thought we had a great idea which is okay what i'd like to do is be able to correlate some of these calls together",
    "start": "289360",
    "end": "296479"
  },
  {
    "text": "and if i if if time isn't good enough like the the kind of time stamp from one to",
    "start": "296479",
    "end": "302240"
  },
  {
    "text": "another that's not that's not accurate enough we need something a little bit better so what i really need to know is when",
    "start": "302240",
    "end": "308160"
  },
  {
    "text": "system a is making a call to system b that in that call that i'm making i need to pass some kind of correlation",
    "start": "308160",
    "end": "314560"
  },
  {
    "text": "information so that in system b it's able to look at that incoming information to say aha",
    "start": "314560",
    "end": "319759"
  },
  {
    "text": "in my log files i'm not just going to put my identifiers i'm also going to include the upstream um services identifiers as",
    "start": "319759",
    "end": "327199"
  },
  {
    "text": "well and so that's really what distributed tracing is intended to solve uh it's able to piece together or you",
    "start": "327199",
    "end": "334000"
  },
  {
    "text": "know put humpty dumpty back together again by including context correlation identifiers",
    "start": "334000",
    "end": "339680"
  },
  {
    "text": "through every single communication between different services and then when those individual services",
    "start": "339680",
    "end": "345520"
  },
  {
    "text": "need to report out information about what's going on they don't just include information about that service but they also pull in",
    "start": "345520",
    "end": "352240"
  },
  {
    "text": "the contextual identifier that they've received from their upstream service and with this kind of scheme in place",
    "start": "352240",
    "end": "359840"
  },
  {
    "text": "then system a calling system b will include a context identifier and insist to be including that context",
    "start": "359840",
    "end": "365759"
  },
  {
    "text": "amplifier in their logs then something that's collecting all of these logs can start to put all these different",
    "start": "365759",
    "end": "371600"
  },
  {
    "text": "identifiers together in order to present basically like a linked list or uh",
    "start": "371600",
    "end": "377280"
  },
  {
    "text": "or graph a directed acyclic draft of all these calls being made to all these different services it's kind of like a",
    "start": "377280",
    "end": "382880"
  },
  {
    "text": "like a get source control history view that you want to see all these different different calls",
    "start": "382880",
    "end": "388160"
  },
  {
    "text": "linked together so this is you know fun to build i guess",
    "start": "388160",
    "end": "393840"
  },
  {
    "text": "because you have to figure out you know what should the headers be of all this piece of information what do the identifiers look like and so some very large companies that",
    "start": "393840",
    "end": "400560"
  },
  {
    "text": "build these kinds of systems said okay right um you know this is really nothing to do with a core business so why don't we do the",
    "start": "400560",
    "end": "406880"
  },
  {
    "text": "why don't we do the altruistic thing and open source it uh instead of selling it or whatever so some companies did that uh one good",
    "start": "406880",
    "end": "412960"
  },
  {
    "text": "example of that is zipkin zipskin is a very popular distributed tracing utility it's free you can run it",
    "start": "412960",
    "end": "418240"
  },
  {
    "text": "in your own box it doesn't require a lot of resources to get up and running and what they've done is basically two things one is",
    "start": "418240",
    "end": "424639"
  },
  {
    "text": "provide a standard for what those identifiers look like as it goes from place to place to",
    "start": "424639",
    "end": "430319"
  },
  {
    "text": "place and they include a couple pieces of information one is just the identifier of this one individual",
    "start": "430319",
    "end": "436160"
  },
  {
    "text": "operation that's known as a span id inside zipkin another thing which i didn't show here is way to link all those different calls",
    "start": "436160",
    "end": "442639"
  },
  {
    "text": "together some kind of global identifier for all those different sub operations and components",
    "start": "442639",
    "end": "448160"
  },
  {
    "text": "and that was known as a trace id so with a trace id and a stand id you get all the logs together of one",
    "start": "448160",
    "end": "454000"
  },
  {
    "text": "specific global operation and then the span ideas give you the linking of how call a",
    "start": "454000",
    "end": "459199"
  },
  {
    "text": "is correlated with call b so zipkin includes this scheme of like headers",
    "start": "459199",
    "end": "464639"
  },
  {
    "text": "flowing through your system and so you still have to have like something needs to put those headers in as i make calls from place to place",
    "start": "464639",
    "end": "470080"
  },
  {
    "text": "uh so you still have to do that uh and the other place thing you need is like okay so i i have the span id and",
    "start": "470080",
    "end": "476080"
  },
  {
    "text": "i've got the parent span id what do i do to be able to get that",
    "start": "476080",
    "end": "481360"
  },
  {
    "text": "information so these spans need to be reported to something",
    "start": "481360",
    "end": "486800"
  },
  {
    "text": "so what do i report those spans to um so what i could do is uh as part of",
    "start": "486800",
    "end": "494560"
  },
  {
    "text": "my zipkin application what they have is an api that gets called so every time uh you have a a a span or operation",
    "start": "494560",
    "end": "500960"
  },
  {
    "text": "completed then what i can do is then call that api to say hey i've got some spam information",
    "start": "500960",
    "end": "506000"
  },
  {
    "text": "and so zipkin provides a server to receive that those fans and the last piece of the puzzle is well you gotta you gotta see this stuff",
    "start": "506000",
    "end": "512640"
  },
  {
    "text": "uh and so zigban also provides a user interface to be able to show and search for individual traces and so",
    "start": "512640",
    "end": "518640"
  },
  {
    "text": "distributed tracing is one of the three pillars of observability the other two being logs and metrics you can't",
    "start": "518640",
    "end": "524560"
  },
  {
    "text": "just have logs you can't just have metrics you need all three to have that kind of complete picture so distributed tracing for me",
    "start": "524560",
    "end": "530000"
  },
  {
    "text": "really completes the other two pictures of well how the heck did this thing happen to be able to get to this point so not",
    "start": "530000",
    "end": "535920"
  },
  {
    "text": "necessarily even exceptions uh if something there's some customer journey that happened how did those different pieces get pulled together",
    "start": "535920",
    "end": "542720"
  },
  {
    "text": "so uh zipkin came up with their their application became super popular and then other",
    "start": "542720",
    "end": "549519"
  },
  {
    "text": "companies started to adopt this individual standard but it wasn't just that standard there were",
    "start": "549519",
    "end": "554640"
  },
  {
    "text": "several other standards as well so other tracing utilities had their own identifiers like microsoft application insights that",
    "start": "554640",
    "end": "560240"
  },
  {
    "text": "their their own identifiers and pretty much any distributed chasing visual visualizer on the market",
    "start": "560240",
    "end": "565600"
  },
  {
    "text": "had their own like custom spin on this and as the kcd comic goes you know what",
    "start": "565600",
    "end": "571200"
  },
  {
    "text": "happens when you have in standards uh in different implementations you make another standard",
    "start": "571200",
    "end": "576240"
  },
  {
    "text": "which is now n plus one implementations and so that's what uh some folks from a lot of different companies did",
    "start": "576240",
    "end": "581600"
  },
  {
    "text": "to get together and say let's let's build one single standard for all these different ways of doing these kinds of uh tracing",
    "start": "581600",
    "end": "588399"
  },
  {
    "text": "identifiers flowing through the system and so that's what the w3c uh",
    "start": "588399",
    "end": "593680"
  },
  {
    "text": "did that uh you know does a lot of different um a lot of different uh standardization",
    "start": "593680",
    "end": "600720"
  },
  {
    "text": "efforts they said let's get together with some folks from uh tracing tools and",
    "start": "600720",
    "end": "605920"
  },
  {
    "text": "and uh hosting providers and other distributed tracing tools uh visualizers as well and collectors and",
    "start": "605920",
    "end": "612000"
  },
  {
    "text": "and application service providers too and said let's get together and decide on a good standard for how do we show this",
    "start": "612000",
    "end": "618640"
  },
  {
    "text": "how do we trace this information through and so that's what the w3c trace context uh standard is all about",
    "start": "618640",
    "end": "625200"
  },
  {
    "text": "now this was just finalized earlier this year like february it was finally taken out of draft mode and into",
    "start": "625200",
    "end": "631680"
  },
  {
    "text": "like ready to go mode for for that standard and it describes a way of of uh",
    "start": "631680",
    "end": "639519"
  },
  {
    "text": "formulating the identifiers how to format them and then ways and behaviors of how different systems",
    "start": "639519",
    "end": "645519"
  },
  {
    "text": "should behave when they receive this tracing information now the next piece of the puzzle was",
    "start": "645519",
    "end": "651360"
  },
  {
    "text": "microsoft in the dot-net core world so this is distributed tracing made easy with net core well dot net",
    "start": "651360",
    "end": "657440"
  },
  {
    "text": "core and net has had diagnostics for a very long time and that api uh",
    "start": "657440",
    "end": "664800"
  },
  {
    "text": "was really customized uh for a lot of the microsoft environment so it didn't really jive with",
    "start": "664800",
    "end": "669839"
  },
  {
    "text": "this overall standardization support so as part of the w3c trace context effort microsoft",
    "start": "669839",
    "end": "677279"
  },
  {
    "text": "shifted their development of their diagnostics apis to now support these kinds of standards",
    "start": "677279",
    "end": "683040"
  },
  {
    "text": "out of the box so that's the other part i'll be showing today is the the apis inside of net core to support",
    "start": "683040",
    "end": "690880"
  },
  {
    "text": "these kinds of standard tracing supports so the identifiers of the flow through",
    "start": "690880",
    "end": "695920"
  },
  {
    "text": "the system uh this is coming from the activity api and then the ids that are transported",
    "start": "695920",
    "end": "702720"
  },
  {
    "text": "on the wire across services are done through it through a special header called the trace parent header so",
    "start": "702720",
    "end": "708480"
  },
  {
    "text": "you can actually inspect your traffic today and you'll probably see that for a lot of your traffic because it's starting to be turned on by default",
    "start": "708480",
    "end": "715120"
  },
  {
    "text": "and in a lot of systems these days now this w3c standard",
    "start": "715120",
    "end": "722720"
  },
  {
    "text": "was really described for http traffic so if i have services that use apis web apis to talk to each other",
    "start": "722720",
    "end": "729760"
  },
  {
    "text": "that's what that was all about they also had some extensions for grpc to have some more compact identifier",
    "start": "729760",
    "end": "735760"
  },
  {
    "text": "support so where grpc like the size and the wire really matters they shrunk down those identifiers for those",
    "start": "735760",
    "end": "741279"
  },
  {
    "text": "kinds of indications over the wire but the systems i work with don't just deal with grpc and http they",
    "start": "741279",
    "end": "748240"
  },
  {
    "text": "deal with a lot of messaging as well and so with messaging it's still a kind of communication going over the",
    "start": "748240",
    "end": "754560"
  },
  {
    "text": "network it just happens to be durable and written down as opposed to http which is more of a",
    "start": "754560",
    "end": "759920"
  },
  {
    "text": "stateless uh protocol so with that we have to figure out you know well look what do we need to do",
    "start": "759920",
    "end": "767200"
  },
  {
    "text": "for those kinds of systems when i have an api calling a service but then that uses rabbitmq",
    "start": "767200",
    "end": "772480"
  },
  {
    "text": "then how do i extend my system to be able to include the right context information on",
    "start": "772480",
    "end": "777519"
  },
  {
    "text": "communications going out the door and when i receive communications how do i ensure that it correctly sets",
    "start": "777519",
    "end": "782720"
  },
  {
    "text": "the current operation identifiers so that if any of any other calls making out the door that",
    "start": "782720",
    "end": "788160"
  },
  {
    "text": "the context is correctly flowed through so i'll be looking at that today as well",
    "start": "788160",
    "end": "794800"
  },
  {
    "text": "now the w3c trace context standard is really about that identifier on the wire and how to deal",
    "start": "795040",
    "end": "800560"
  },
  {
    "text": "with it whenever you receive it but it doesn't say anything about what to do with that information",
    "start": "800560",
    "end": "806079"
  },
  {
    "text": "so if i just had that trace information i guess i could still log it out to disk but that's boring and really difficult",
    "start": "806079",
    "end": "812320"
  },
  {
    "text": "to deal with because now i just have all these identifiers and log files that i have to again humpty dumpty back together again myself",
    "start": "812320",
    "end": "818480"
  },
  {
    "text": "not the most fun thing in the world to do so that last part is a new emerging",
    "start": "818480",
    "end": "825600"
  },
  {
    "text": "standard to be able to try to standardize on the collection of that information",
    "start": "825600",
    "end": "831760"
  },
  {
    "text": "and i really noticed the problem when i was trying to put in distributed chasing with the reason that with recent clients and they didn't",
    "start": "831760",
    "end": "837519"
  },
  {
    "text": "know yet what tracing tool to use in order to visualize their traces so we looked first at",
    "start": "837519",
    "end": "845040"
  },
  {
    "text": "zipkin zipkin has a lot of extensions for net core based applications and a ton of",
    "start": "845040",
    "end": "850639"
  },
  {
    "text": "other different platforms as well but if i am a product company that",
    "start": "850639",
    "end": "856079"
  },
  {
    "text": "wanted to build infrastructure plug-ins for tracing tools then i have to build one for",
    "start": "856079",
    "end": "861440"
  },
  {
    "text": "zipkin but there's like a dozen of these on the market these distributed tracing tools",
    "start": "861440",
    "end": "866880"
  },
  {
    "text": "so when the next one comes along around like jager then i would have to",
    "start": "866880",
    "end": "871920"
  },
  {
    "text": "develop these kind of api calls into this different tracing tool as well",
    "start": "871920",
    "end": "877040"
  },
  {
    "text": "and so a new effort came into play of not just trying to standardize on the communication between services",
    "start": "877040",
    "end": "883360"
  },
  {
    "text": "for these tracing calls but also recording of the traces as well because just communicating the",
    "start": "883360",
    "end": "889600"
  },
  {
    "text": "information between services is just one little like that's just kind of table stakes to be able to even do distributed tracing but then to report",
    "start": "889600",
    "end": "896720"
  },
  {
    "text": "on it i don't have to support all these different kind of tracing models so that's where the open telemetry",
    "start": "896720",
    "end": "902480"
  },
  {
    "text": "project comes into play so in addition to standardizing and the communication open telemetry strives to",
    "start": "902480",
    "end": "909199"
  },
  {
    "text": "standardize on the reporting of logs metrics and traces",
    "start": "909199",
    "end": "915440"
  },
  {
    "text": "now for a lot of platforms they don't have any kind of uh clear standard on how to do these",
    "start": "915440",
    "end": "920800"
  },
  {
    "text": "sort of things but some do like java java's ecosystem has a very well standardized way of dealing",
    "start": "920800",
    "end": "927360"
  },
  {
    "text": "with logs they don't necessarily have a great way of dealing with traces so open telemetry step says and says okay",
    "start": "927360",
    "end": "932639"
  },
  {
    "text": "we will define the uh the the apis for what this collection should look",
    "start": "932639",
    "end": "938720"
  },
  {
    "text": "like and these object models should look like and then all these different collecting and reporting utilities just need to go",
    "start": "938720",
    "end": "944880"
  },
  {
    "text": "off that common model in order for them to be able to be plugged in and work so with these",
    "start": "944880",
    "end": "951279"
  },
  {
    "text": "pieces in place open telemetry really pushing towards the standardized api",
    "start": "951279",
    "end": "956320"
  },
  {
    "text": "and the standards between the different communications and services that makes it really easy for me as an application developer to turn on",
    "start": "956320",
    "end": "963120"
  },
  {
    "text": "distributed tracing and be able to visualize it easy without having a lot of vendor lock-in to say well we picked zipkins so that's you",
    "start": "963120",
    "end": "969759"
  },
  {
    "text": "know that's what we got to do now because you know so architect somewhere decided that was the way to go",
    "start": "969759",
    "end": "975839"
  },
  {
    "text": "now i will say that one thing that is little different in dot in the dotnet world than other platforms is net already had",
    "start": "975839",
    "end": "983040"
  },
  {
    "text": "an api in place for reporting operations and traces and that's that activity api",
    "start": "983040",
    "end": "989680"
  },
  {
    "text": "so the folks from microsoft and the focus from for an open telemetry really wanted to have the best end user experience and so what",
    "start": "989680",
    "end": "997120"
  },
  {
    "text": "the team decided to do is instead of making this entirely new api to the side that would require them to throw away",
    "start": "997120",
    "end": "1002800"
  },
  {
    "text": "everything they've done so far with uh with any kind of tracing whatsoever instead of what they've done is",
    "start": "1002800",
    "end": "1008880"
  },
  {
    "text": "move the existing activity api to support the open telemetry model and the downside is the names don't",
    "start": "1008880",
    "end": "1015120"
  },
  {
    "text": "exactly match so it's called an activity versus a span uh they can't really do anything about that but that also meant that it was a",
    "start": "1015120",
    "end": "1021040"
  },
  {
    "text": "much faster uh way for them to get there without having to go through and just kind of replace all this existing code",
    "start": "1021040",
    "end": "1027120"
  },
  {
    "text": "that has worked for years and years and years and be very difficult to upgrade in place so",
    "start": "1027120",
    "end": "1032640"
  },
  {
    "text": "uh we'll be doing in a demo in a couple minutes here we'll be showing the activity api for",
    "start": "1032640",
    "end": "1039120"
  },
  {
    "text": "w3c trace context propagation we'll also be looking at how to include additional like user",
    "start": "1039120",
    "end": "1045199"
  },
  {
    "text": "or machine specific information to ensure that information finally shows up on the actual tracing information at the",
    "start": "1045199",
    "end": "1052000"
  },
  {
    "text": "end i'll be looking at the open telemetry for activity adapter that is the piece from open telemetry",
    "start": "1052000",
    "end": "1058480"
  },
  {
    "text": "that plugs into what the activity looks like and then finally we'll look at jager and zippin zipkin",
    "start": "1058480",
    "end": "1063760"
  },
  {
    "text": "as our open telemetry exporters all in uh net core 3.1 i wasn't quite brave enough",
    "start": "1063760",
    "end": "1069840"
  },
  {
    "text": "to go to dinette 5 rc2 which released like i don't know three hours ago um not quite that brave but i will be",
    "start": "1069840",
    "end": "1076400"
  },
  {
    "text": "showing what you will need to change when you move from.net core 31 to net 5",
    "start": "1076400",
    "end": "1081440"
  },
  {
    "text": "when it drops next month in order to get this to all continue to work so",
    "start": "1081440",
    "end": "1087520"
  },
  {
    "text": "first up let's just look at some basics of the activity api and one of the reasons why i think this",
    "start": "1087520",
    "end": "1092559"
  },
  {
    "text": "is important the underlying activity api is if you want to enrich your information that shows up in your traces you're going to",
    "start": "1092559",
    "end": "1098799"
  },
  {
    "text": "need to know how to deal with activities so let me swap over to the old visual",
    "start": "1098799",
    "end": "1104240"
  },
  {
    "text": "studio not the rc this is just a stock visual studio",
    "start": "1104240",
    "end": "1110240"
  },
  {
    "text": "and let's just see if we can make this application break so uh if i were to have a method here",
    "start": "1110640",
    "end": "1116960"
  },
  {
    "text": "public boy static stack i do something",
    "start": "1116960",
    "end": "1124159"
  },
  {
    "text": "and this through an exception",
    "start": "1126080",
    "end": "1129760"
  },
  {
    "text": "load up now if i call do something from right",
    "start": "1131120",
    "end": "1137440"
  },
  {
    "text": "here then of course i though an exception i",
    "start": "1137440",
    "end": "1142559"
  },
  {
    "text": "would get a stack trace and it would tell me exactly where that needs exactly where that exception occurred",
    "start": "1142559",
    "end": "1147840"
  },
  {
    "text": "now let's suppose that this do something method was not in my code",
    "start": "1147840",
    "end": "1152880"
  },
  {
    "text": "that was in someone else's code and then i consumed that code from inside my application",
    "start": "1152880",
    "end": "1158240"
  },
  {
    "text": "and if something went wrong i wanted some more insight into what was going on there well what typically would happen is you",
    "start": "1158240",
    "end": "1164240"
  },
  {
    "text": "would in that by in that consuming application that consuming code you would have logging statements inside",
    "start": "1164240",
    "end": "1170320"
  },
  {
    "text": "of there and microsoft has created the i logger of i",
    "start": "1170320",
    "end": "1176840"
  },
  {
    "text": "logger of t interface to provide a standard way of doing logging inside of systems",
    "start": "1176840",
    "end": "1183600"
  },
  {
    "text": "however if this do something method is not in this application but is",
    "start": "1183600",
    "end": "1190400"
  },
  {
    "text": "somewhere else completely then how do i make sure that whatever i'm",
    "start": "1190400",
    "end": "1195679"
  },
  {
    "text": "doing here i can still see what's going on over there and that's really where the activity api",
    "start": "1195679",
    "end": "1201280"
  },
  {
    "text": "comes into play so the first thing we do is we'll say var activity equals new activity",
    "start": "1201280",
    "end": "1210320"
  },
  {
    "text": "and we need to give the activity an operation name now this sometimes is the method name sometimes it's just the",
    "start": "1212400",
    "end": "1218640"
  },
  {
    "text": "the name of the logical operation that's happening like running application",
    "start": "1218640",
    "end": "1223679"
  },
  {
    "text": "and before this interesting operation happens then we need to start our activity so we",
    "start": "1223679",
    "end": "1231039"
  },
  {
    "text": "call activity.start we do whatever interesting operation",
    "start": "1231039",
    "end": "1237120"
  },
  {
    "text": "we're going to do and then the last thing we do is stop the activity not stop okay",
    "start": "1237120",
    "end": "1246320"
  },
  {
    "text": "when my activity is stopped we do get interesting information as part of it we get the duration as a time stamp so",
    "start": "1246320",
    "end": "1254000"
  },
  {
    "text": "if we're trying to get some metrics about what our system is doing that's kind of like a a stopwatch in",
    "start": "1254000",
    "end": "1259440"
  },
  {
    "text": "order to say this operation took this long to do",
    "start": "1259440",
    "end": "1264080"
  },
  {
    "text": "so what about in this do something method i'm going to get rid of this exception because that'll look ugly so i'll just do console.writeline",
    "start": "1264480",
    "end": "1273600"
  },
  {
    "text": "do something now imagine this line of code is",
    "start": "1274080",
    "end": "1279120"
  },
  {
    "text": "somewhere else completely and i need to provide some contextual information",
    "start": "1279120",
    "end": "1284320"
  },
  {
    "text": "to this method so that it knows where it's been called from the outside world",
    "start": "1284320",
    "end": "1289679"
  },
  {
    "text": "now inside this do something method we want to do the exact same thing we did before let's say var activity equals new activity",
    "start": "1289679",
    "end": "1296799"
  },
  {
    "text": "do something and we do the same thing activity let's",
    "start": "1298559",
    "end": "1304960"
  },
  {
    "text": "start and",
    "start": "1304960",
    "end": "1310158"
  },
  {
    "text": "yep that stop okay i'm gonna put some breakpoints in",
    "start": "1313360",
    "end": "1320320"
  },
  {
    "text": "here just to see what we see so i will put a breakpoint right here when we call do something and",
    "start": "1320320",
    "end": "1327840"
  },
  {
    "text": "then we call activity.stop and then we'll put another break point right here and right here okay",
    "start": "1327840",
    "end": "1336480"
  },
  {
    "text": "so uh as we go through it will instance the activity start it",
    "start": "1336480",
    "end": "1342320"
  },
  {
    "text": "call the other method and then the other method will call that activity.start as well",
    "start": "1342320",
    "end": "1347440"
  },
  {
    "text": "so we'll say activity.start and then if i look at the activity information we'll notice that the activity",
    "start": "1347440",
    "end": "1353760"
  },
  {
    "text": "has been given now an id an id looks gobbledygoop right it's like a",
    "start": "1353760",
    "end": "1359280"
  },
  {
    "text": "pipe character with some uh hexadecimal alphanumeric junk uh it's probably some",
    "start": "1359280",
    "end": "1366080"
  },
  {
    "text": "matrix code there i have no idea but it's calling inside of there i'll go ahead and continue",
    "start": "1366080",
    "end": "1372880"
  },
  {
    "text": "now that this activity that's not been started yet if i look at it we'll notice that it has no id as part of it just has the",
    "start": "1373200",
    "end": "1380240"
  },
  {
    "text": "name now if i hit f5 after we start let's go take a look",
    "start": "1380240",
    "end": "1386799"
  },
  {
    "text": "okay it's got an id well let's scroll down a little bit i also notice that it has a parent id",
    "start": "1386799",
    "end": "1393600"
  },
  {
    "text": "and that parent id is the id of the previous activity that you had in the other method",
    "start": "1393600",
    "end": "1399600"
  },
  {
    "text": "it even has a reference to the parent activity so i can go activity.parent dot id but",
    "start": "1399600",
    "end": "1406400"
  },
  {
    "text": "how did it do that i didn't pass the activity through like i didn't i didn't give it the activity just like i said activity.start",
    "start": "1406400",
    "end": "1412559"
  },
  {
    "text": "and it just kind of magically knew that there was an activity around to connect it to this activity that got",
    "start": "1412559",
    "end": "1418960"
  },
  {
    "text": "started so this is one of the key things that uh these tracing tools have to do is i need to be able to in my code somehow",
    "start": "1418960",
    "end": "1426000"
  },
  {
    "text": "flow context between different operations so that when i report on them i'm able to say like this is my parent operation",
    "start": "1426000",
    "end": "1432799"
  },
  {
    "text": "to be able to link those things together so depending on my platform it achieves it in different ways",
    "start": "1432799",
    "end": "1437840"
  },
  {
    "text": "and the way that this platform does it uh net core is with a special",
    "start": "1437840",
    "end": "1444480"
  },
  {
    "text": "very special property on the activity class called activity.current",
    "start": "1444480",
    "end": "1451120"
  },
  {
    "text": "so on the activity type there's an activity that current",
    "start": "1451600",
    "end": "1458240"
  },
  {
    "text": "property that's a nullable property so there may not be an activity and what that is is an async local",
    "start": "1458240",
    "end": "1465360"
  },
  {
    "text": "static property or static field underneath the covers um that's able to be shared across any",
    "start": "1465360",
    "end": "1472400"
  },
  {
    "text": "uh thread of code that's sharing the same async context so in an asp.net core application that",
    "start": "1472400",
    "end": "1478159"
  },
  {
    "text": "shares the common um and common async context that activity.current will continuously",
    "start": "1478159",
    "end": "1484480"
  },
  {
    "text": "updated whatever async local context i'm working with now some applications and systems they",
    "start": "1484480",
    "end": "1490000"
  },
  {
    "text": "don't have that available to it so instead of trying to rely on that thing they'll just stuff it in some collecting variable parameter that goes",
    "start": "1490000",
    "end": "1496640"
  },
  {
    "text": "through the infrastructure but uh anytime i call activity.start it will update",
    "start": "1496640",
    "end": "1502000"
  },
  {
    "text": "that current with the new currents and then connect the parent to whatever that current is i do this because i was so curious i",
    "start": "1502000",
    "end": "1508159"
  },
  {
    "text": "looked in the code like what how's this magic working but that's just all it's doing you know i have a new activity called start and",
    "start": "1508159",
    "end": "1513520"
  },
  {
    "text": "set the parent equal to the current activity and then set the new current to the new activity and i'm good to go",
    "start": "1513520",
    "end": "1520559"
  },
  {
    "text": "now uh those ids though you notice were not the greatest looking they were pretty ugly and so what we the next",
    "start": "1520559",
    "end": "1528080"
  },
  {
    "text": "thing we want to do is uh use this new w3c standard for our identifiers and so to do that",
    "start": "1528080",
    "end": "1535039"
  },
  {
    "text": "it's a little bit wonky in dinette core 3 0 and 3 1 but it works and the way we do that is",
    "start": "1535039",
    "end": "1540720"
  },
  {
    "text": "at the very beginning we say activity dot default id format equals and have a choice",
    "start": "1540720",
    "end": "1545840"
  },
  {
    "text": "hierarchical unknown or w3c the other two we don't want w3c is the one that we do want so that's",
    "start": "1545840",
    "end": "1552000"
  },
  {
    "text": "the w3c trace context format and something we also tend to do in our in our systems uh activity",
    "start": "1552000",
    "end": "1561120"
  },
  {
    "text": "that force default id format just to make sure that if someone fiddled with this we would get the one",
    "start": "1561120",
    "end": "1568320"
  },
  {
    "text": "that we just set so now let me run this again and see how our ids look different",
    "start": "1568320",
    "end": "1574720"
  },
  {
    "text": "and when we see them we'll see some additional information that we didn't see before",
    "start": "1580000",
    "end": "1585840"
  },
  {
    "text": "in my activity we'll see that the format of the id",
    "start": "1586799",
    "end": "1592158"
  },
  {
    "text": "is a lot bigger like zero zero dash gobbledygook dash more gobbledygook dash",
    "start": "1592240",
    "end": "1598960"
  },
  {
    "text": "another couple numbers at the end so this format is actually you know defined in the w3c trace",
    "start": "1598960",
    "end": "1605120"
  },
  {
    "text": "context standard and inside of that whole id we have a few things going on we have the id of the operation or the",
    "start": "1605120",
    "end": "1611840"
  },
  {
    "text": "span so the thing that's happening right now we also have the id of the entire trace that's the second part we see there the",
    "start": "1611840",
    "end": "1617760"
  },
  {
    "text": "4bd whatever so that is common across all operations",
    "start": "1617760",
    "end": "1622799"
  },
  {
    "text": "that are connected with this initial activity that started and then i can also have operation",
    "start": "1622799",
    "end": "1628720"
  },
  {
    "text": "individual operation numbers and so that's what those numbers are at the end which typically don't get used in my systems but are possible they're part of the",
    "start": "1628720",
    "end": "1634559"
  },
  {
    "text": "standard so in the next application activity i start what we'll notice",
    "start": "1634559",
    "end": "1640720"
  },
  {
    "text": "is that some of the numbers are much different so at the end here the ed4c that's very",
    "start": "1640720",
    "end": "1646880"
  },
  {
    "text": "different than 4db but the first part which is the trace identifier is going to be exactly the same",
    "start": "1646880",
    "end": "1652080"
  },
  {
    "text": "and this is so that collectors of this information can quickly index individual traces for all this real reporting of spans",
    "start": "1652080",
    "end": "1658720"
  },
  {
    "text": "coming in over the wire okay so another way of",
    "start": "1658720",
    "end": "1665600"
  },
  {
    "text": "providing activity operation information inside by writing application well the next thing we need to do is be",
    "start": "1665600",
    "end": "1672000"
  },
  {
    "text": "able to propagate that information out the door so that is when i make a an api call",
    "start": "1672000",
    "end": "1678080"
  },
  {
    "text": "on you know net core application i want to make sure that that trace identifier actually flows out",
    "start": "1678080",
    "end": "1683200"
  },
  {
    "text": "to the other side and then on the consumer side when i receive that api call if that",
    "start": "1683200",
    "end": "1688399"
  },
  {
    "text": "incoming api call has that header in there i want to make sure that i set that as my new activity parent id and",
    "start": "1688399",
    "end": "1694799"
  },
  {
    "text": "you can do that i can say activity dot parent id equals",
    "start": "1694799",
    "end": "1701679"
  },
  {
    "text": "hello in dc sydney",
    "start": "1702480",
    "end": "1707600"
  },
  {
    "text": "oh you could do that um probably want to use an actual standardized format for that but you can certainly do that oh yes i",
    "start": "1707600",
    "end": "1715679"
  },
  {
    "text": "just say set parent id but you get the idea i can set the parent id to anything i want so in my in infrastructure inside",
    "start": "1715679",
    "end": "1722640"
  },
  {
    "text": "asp.net core they do exactly this for incoming incoming asp.net core",
    "start": "1722640",
    "end": "1727679"
  },
  {
    "text": "calls they'll check the header if the header exists for that w3c standard they will then they will set the parent id of this",
    "start": "1727679",
    "end": "1734399"
  },
  {
    "text": "current activity for this asp.net request and when they make calls out the door using http",
    "start": "1734399",
    "end": "1740799"
  },
  {
    "text": "client they'll do the exact same thing in reverse they will set the trace context identifier on the header",
    "start": "1740799",
    "end": "1746480"
  },
  {
    "text": "as it goes out the door so let's go back uh that was just the",
    "start": "1746480",
    "end": "1752640"
  },
  {
    "text": "activity basics um that's useful for when we want to have our own uh operations and speeds that we",
    "start": "1752640",
    "end": "1758399"
  },
  {
    "text": "want to report on the next thing i want to show is open telemetry which is going to be the piece that consumes",
    "start": "1758399",
    "end": "1764080"
  },
  {
    "text": "those activity events to do something interesting with them now the activity api does have a way to",
    "start": "1764080",
    "end": "1771120"
  },
  {
    "text": "report on that information um but the api kind of sucks",
    "start": "1771120",
    "end": "1777120"
  },
  {
    "text": "um kind of sucks a lot actually so when i call activity.start um that can raise",
    "start": "1777120",
    "end": "1783679"
  },
  {
    "text": "an event for that information and that information event actually comes through a new api",
    "start": "1783679",
    "end": "1789840"
  },
  {
    "text": "called a diagnostic listener so typically what you have is a static diagnostic",
    "start": "1789840",
    "end": "1797440"
  },
  {
    "text": "source source equals new diagnostic listener and then the name of",
    "start": "1797760",
    "end": "1804720"
  },
  {
    "text": "the diagnostic listener is going to be the same name as your activity okay so the activity objects themselves",
    "start": "1804720",
    "end": "1812559"
  },
  {
    "text": "don't have events i can subscribe to instead what we have is instead of starting activity just like this what",
    "start": "1812559",
    "end": "1818159"
  },
  {
    "text": "we'll do is we'll say source dot start activity passing in the activity and we can also",
    "start": "1818159",
    "end": "1825760"
  },
  {
    "text": "pass in context i'm not going to pass in anything so what this will do is start the activity",
    "start": "1825760",
    "end": "1832240"
  },
  {
    "text": "and raise a diagnostic event so that something can subscribe to that and then act on it if they want to",
    "start": "1832240",
    "end": "1839200"
  },
  {
    "text": "and the way i can subscribe to that diagnostic event is that there is a diagnostic listener that all listeners",
    "start": "1839200",
    "end": "1846799"
  },
  {
    "text": "that's that is an observable of diagnostic listener and i could say subscribe to",
    "start": "1846799",
    "end": "1854559"
  },
  {
    "text": "this die observer diagnostic listener which also has events that give you the start stop and",
    "start": "1854559",
    "end": "1860880"
  },
  {
    "text": "exceptions for activities but i don't know like observables are fun and all but",
    "start": "1860880",
    "end": "1866240"
  },
  {
    "text": "they're they're kind of a pain to deal with in your infrastructure code um so what open telemetry will do",
    "start": "1866240",
    "end": "1873120"
  },
  {
    "text": "is kind of encapsulate all these different pieces for you so they don't have to have these these observables and subscribers and",
    "start": "1873120",
    "end": "1878720"
  },
  {
    "text": "just say here just implement this class tell me the name of the activity that you want to listen to",
    "start": "1878720",
    "end": "1883919"
  },
  {
    "text": "and here's a method that i will call whenever that thing happens",
    "start": "1883919",
    "end": "1888960"
  },
  {
    "text": "so i've got a slightly more complex application than",
    "start": "1889919",
    "end": "1896559"
  },
  {
    "text": "what we just saw to try to give you a little bit better illustration about um in a more complex distributed system how",
    "start": "1896559",
    "end": "1903679"
  },
  {
    "text": "these different calls get pieced together so i have a micro services based",
    "start": "1903679",
    "end": "1910080"
  },
  {
    "text": "application and in this micro services based application i've got a number of different services and components",
    "start": "1910080",
    "end": "1916000"
  },
  {
    "text": "running in order to be able to service individual requests so in this case it's a it's a website to",
    "start": "1916000",
    "end": "1921840"
  },
  {
    "text": "be able to view orders and place orders if you guys are doing microservices then it's got to be a spa right so we're",
    "start": "1921840",
    "end": "1928080"
  },
  {
    "text": "going to have an angular ui the angular ui talks to a composition gateway or api gateway it's a",
    "start": "1928080",
    "end": "1934240"
  },
  {
    "text": "bff or back in for front end so that api is explicitly designed for the one ui",
    "start": "1934240",
    "end": "1941279"
  },
  {
    "text": "and then that composition gateway will then compose multiple api calls from the back",
    "start": "1941279",
    "end": "1946799"
  },
  {
    "text": "end be able to service up that one call to the front end in this case it's just using like a like",
    "start": "1946799",
    "end": "1952480"
  },
  {
    "text": "a web api call which you can imagine that could be graphql or rest or just web api that's whatever you want",
    "start": "1952480",
    "end": "1959200"
  },
  {
    "text": "to do to be able to consume to be able to compose all these different information from the back end be able to display in the front",
    "start": "1959200",
    "end": "1965679"
  },
  {
    "text": "end now what i'd like to have happen in my",
    "start": "1965679",
    "end": "1971919"
  },
  {
    "text": "distributed trace is that if something goes wrong or if i just want to see some information about",
    "start": "1971919",
    "end": "1977679"
  },
  {
    "text": "all these different pieces that i can see just one kind of graph of calls that has all",
    "start": "1977679",
    "end": "1983200"
  },
  {
    "text": "these different communications that happen but what i'd like to have happen is not just have",
    "start": "1983200",
    "end": "1989360"
  },
  {
    "text": "like the http traffic as part of this picture in that distributed trace so if my api",
    "start": "1989360",
    "end": "1995600"
  },
  {
    "text": "call makes a call to a database well it would kind of be nice to know like what happened with that database was it was",
    "start": "1995600",
    "end": "2001519"
  },
  {
    "text": "it called to the database slow was it fast did it return too many records or not enough records what were the parameters being passed in",
    "start": "2001519",
    "end": "2008799"
  },
  {
    "text": "that could be valuable information for me if i'm trying to diagnose an issue of something going wrong in a test or",
    "start": "2008799",
    "end": "2014000"
  },
  {
    "text": "production environment so really what i want to have happen is every single one of these arrows",
    "start": "2014000",
    "end": "2019600"
  },
  {
    "text": "show up in my distributed trace the next one is going to be a lot more",
    "start": "2019600",
    "end": "2026559"
  },
  {
    "text": "complicated because this one is dealing with the rights on the reside it's kind of a very simple scenario usually it's a fan",
    "start": "2026559",
    "end": "2033360"
  },
  {
    "text": "out of calls gathering information and then pulling it back in again but for for the cases where i'm changing",
    "start": "2033360",
    "end": "2040159"
  },
  {
    "text": "information or performing an action or operation in the system well this time i could have a lot more pieces and they could be a lot more",
    "start": "2040159",
    "end": "2046399"
  },
  {
    "text": "distributed so in this application i've got a single angular front end and i click a button",
    "start": "2046399",
    "end": "2052800"
  },
  {
    "text": "on the page to say place order well that calls directly the sales api to say okay i want to place my order",
    "start": "2052800",
    "end": "2058720"
  },
  {
    "text": "but the sales api knows that it can't fulfill this order by itself so it's going to just record",
    "start": "2058720",
    "end": "2065280"
  },
  {
    "text": "some information in its database and send a message",
    "start": "2065280",
    "end": "2070560"
  },
  {
    "text": "to a back-end messaging endpoint to actually process the order and do its work",
    "start": "2070560",
    "end": "2076320"
  },
  {
    "text": "so this back-end messaging endpoint receives a message via rabbitmq or azure service bus or",
    "start": "2076320",
    "end": "2082158"
  },
  {
    "text": "whatever it might be makes a call to a database and now it needs to notify multiple consumers that the sale has",
    "start": "2082159",
    "end": "2089040"
  },
  {
    "text": "been made and now you need to start fulfilling the order so initially the sales made a call to",
    "start": "2089040",
    "end": "2094800"
  },
  {
    "text": "just send a message to a single endpoint but at this point i want to actually notify multiple consumers so i may use a fanout or pub",
    "start": "2094800",
    "end": "2101040"
  },
  {
    "text": "sub kind of message to notify lots of consumers that this order is in it's time to go to work be",
    "start": "2101040",
    "end": "2107359"
  },
  {
    "text": "yourself so at this point i'm going to publish a message out to multiple subscribers i've",
    "start": "2107359",
    "end": "2112960"
  },
  {
    "text": "got finance subscribing i've got shipping subscribing and i've got customer subscribing and then i'll subscribe to the order",
    "start": "2112960",
    "end": "2119200"
  },
  {
    "text": "submitted event now in each one of these they're going to perform their own",
    "start": "2119200",
    "end": "2124640"
  },
  {
    "text": "business logic to do their stuff so on finance side they need to do two things they have to call into a database",
    "start": "2124640",
    "end": "2130560"
  },
  {
    "text": "and make a call to a third party payment gateway so they'll split those up in two pieces and say how about let's first call the",
    "start": "2130560",
    "end": "2136480"
  },
  {
    "text": "call to the database and send another message to myself which is to initiate the payment process and it's doing this because i can't put",
    "start": "2136480",
    "end": "2142720"
  },
  {
    "text": "both of those in a single transaction i can't call stripe and talk to a database at the same time so split those up into",
    "start": "2142720",
    "end": "2148960"
  },
  {
    "text": "separate operations to be independently retried or failed by themselves so that call makes",
    "start": "2148960",
    "end": "2156720"
  },
  {
    "text": "out to another api to some other third-party payment gateway that we don't own",
    "start": "2156720",
    "end": "2161920"
  },
  {
    "text": "so in that case i want to see the error going into the payment gateway but i don't necessarily have any visual",
    "start": "2161920",
    "end": "2168960"
  },
  {
    "text": "i don't have any um i don't have any visibility into what goes on behind the scenes but i at least",
    "start": "2168960",
    "end": "2174560"
  },
  {
    "text": "want the api call out to it now shipping's got some more complex logic it says well i can ship",
    "start": "2174560",
    "end": "2181760"
  },
  {
    "text": "my product will never see both events order submitted and payment succeeded only when those",
    "start": "2181760",
    "end": "2187440"
  },
  {
    "text": "two things have happened successfully can actually shift the order so it's actually subscribed to two events it's subscribed to the order submitted of it",
    "start": "2187440",
    "end": "2194079"
  },
  {
    "text": "and is subscribed to the payment succeeded event and when both of those are received then it finally says okay go ship this",
    "start": "2194079",
    "end": "2200960"
  },
  {
    "text": "thing via fedex so another message goes out the door to our operations folks to ship the products via fedex or",
    "start": "2200960",
    "end": "2208640"
  },
  {
    "text": "whatever kangaroo or whatever i don't know um and then customers is just uh",
    "start": "2208640",
    "end": "2214079"
  },
  {
    "text": "recording uh recording order information for the customer service site and so if the",
    "start": "2214079",
    "end": "2220000"
  },
  {
    "text": "customer calls in for something they've got the list of orders orders there for the customer then they go they can go there and look up more",
    "start": "2220000",
    "end": "2225920"
  },
  {
    "text": "information and other systems so that's a ton of arrows but that's",
    "start": "2225920",
    "end": "2231200"
  },
  {
    "text": "like that pales in comparison with the typical number of connections i have with my distributed systems the ones that i deal with like there's",
    "start": "2231200",
    "end": "2237599"
  },
  {
    "text": "dozens of messages in some interactions you know 20 30 api calls",
    "start": "2237599",
    "end": "2243119"
  },
  {
    "text": "uh and so i although the graph can get big i still want to know like when something",
    "start": "2243119",
    "end": "2248320"
  },
  {
    "text": "goes wrong or even just like just i want to look up what happened i want to be able to see",
    "start": "2248320",
    "end": "2253359"
  },
  {
    "text": "all these different pieces uh pulled together so how do we make this happen well again",
    "start": "2253359",
    "end": "2259040"
  },
  {
    "text": "five years ago it would have sucked or even two years ago um i would have had to like very early on pick",
    "start": "2259040",
    "end": "2265040"
  },
  {
    "text": "a tracing tool because all of my infrastructure had to be built towards that one specific",
    "start": "2265040",
    "end": "2270320"
  },
  {
    "text": "tracing tool but these days i don't have to do that i can have my infrastructure code just go against the generic",
    "start": "2270320",
    "end": "2275680"
  },
  {
    "text": "activity api and then have open telemetry as a piece that's able to",
    "start": "2275680",
    "end": "2280720"
  },
  {
    "text": "listen for activity events and then pop them out the door to our um to whatever exporters we want",
    "start": "2280720",
    "end": "2287839"
  },
  {
    "text": "so to do this we're going to need some packages packages packages the first thing we're",
    "start": "2287839",
    "end": "2293680"
  },
  {
    "text": "going to need is the hook for open telemetry into asp.net core so this is the open telemetry extensions",
    "start": "2293680",
    "end": "2299839"
  },
  {
    "text": "hosting project and all this is is the ability to say services dot add open telemetry",
    "start": "2299839",
    "end": "2305920"
  },
  {
    "text": "and they build and then from there i can register uh individual extensions to open telemetry both on the",
    "start": "2305920",
    "end": "2312400"
  },
  {
    "text": "instrumentation side and the exporting side so the next thing i need to do is actually",
    "start": "2312400",
    "end": "2318240"
  },
  {
    "text": "instrument my application that comes for the open telemetry instrumentation packages so those packages are listening to",
    "start": "2318240",
    "end": "2324400"
  },
  {
    "text": "activity events via the diagnostic listener api uh record",
    "start": "2324400",
    "end": "2330000"
  },
  {
    "text": "specific interesting events or all of them and for those events bashing them up over to our",
    "start": "2330000",
    "end": "2336240"
  },
  {
    "text": "exporters so that's the last piece of the puzzle the exporter libraries so this point i would choose you know",
    "start": "2336240",
    "end": "2342960"
  },
  {
    "text": "which which exporter i want um there are exporters for all of the",
    "start": "2342960",
    "end": "2348079"
  },
  {
    "text": "all of the major distributed tracing tools out there and there's also an exporter for the",
    "start": "2348079",
    "end": "2354480"
  },
  {
    "text": "open telemetry api so open telemetry is also defined here's a standard web api http api um that",
    "start": "2354480",
    "end": "2362560"
  },
  {
    "text": "if you just conform to this then i don't have to change packages i just change urls so uh",
    "start": "2362560",
    "end": "2369359"
  },
  {
    "text": "some of the um some of the tracing tools have started to adopt that standard and what that would allow me to do is to",
    "start": "2369359",
    "end": "2375200"
  },
  {
    "text": "really just standardize on open telemetry and be agnostic towards any exporters that i'd be working with now it is still",
    "start": "2375200",
    "end": "2382400"
  },
  {
    "text": "important that i pull on the individual instrumentation libraries my code isn't instrumented by default i need to opt into this because it is",
    "start": "2382400",
    "end": "2389119"
  },
  {
    "text": "an operation that can slow the processing pipeline down like you know instrumentation is not free",
    "start": "2389119",
    "end": "2394160"
  },
  {
    "text": "some folks like to do auto instrumentation via logs i've never found that works very well um it doesn't triangulate well and if i",
    "start": "2394160",
    "end": "2400720"
  },
  {
    "text": "need to add additional information it's not that great to be able to change after the fact",
    "start": "2400720",
    "end": "2405839"
  },
  {
    "text": "and so what the instrumentation libraries do is will light on if something is actually",
    "start": "2405839",
    "end": "2411680"
  },
  {
    "text": "listening to it so i can turn it off in production and put into lower environments or turn it on at a lower rate in",
    "start": "2411680",
    "end": "2416880"
  },
  {
    "text": "production to ensure they don't degrade performance so let's now switch over to my uh",
    "start": "2416880",
    "end": "2423839"
  },
  {
    "text": "frankenstein's monster of a demo application and see what we see",
    "start": "2423839",
    "end": "2429839"
  },
  {
    "text": "okay now this microservices application go away i don't need to update now",
    "start": "2429839",
    "end": "2435920"
  },
  {
    "text": "please no this microservices application has everything inside a single solution because i'm lazy",
    "start": "2435920",
    "end": "2441839"
  },
  {
    "text": "and it's easier for me to run the whole thing all at once but in a production environment in a real development environment you",
    "start": "2441839",
    "end": "2447440"
  },
  {
    "text": "don't have everything inside a single solution each one of these top-level services would probably be in their own repository",
    "start": "2447440",
    "end": "2453119"
  },
  {
    "text": "maybe in a monorepo but definitely not in the same individual overall visual studio solution so i'm just making my life a little bit",
    "start": "2453119",
    "end": "2459040"
  },
  {
    "text": "easier so in each of the applications i've added the correct",
    "start": "2459040",
    "end": "2465520"
  },
  {
    "text": "packages for the hosting the generic hosting library so now i can",
    "start": "2465520",
    "end": "2471280"
  },
  {
    "text": "say services.blah i'm adding the appropriate instrumentation",
    "start": "2471280",
    "end": "2476480"
  },
  {
    "text": "as well so this is for asp.net core this is for sql clients",
    "start": "2476480",
    "end": "2481839"
  },
  {
    "text": "and then for this demo i'm actually showing two different exporters i'm showing jager and zipkin but there are a ton out",
    "start": "2481839",
    "end": "2488000"
  },
  {
    "text": "there that you can pull from app insights jager zipkin prometheus i don't know",
    "start": "2488000",
    "end": "2495599"
  },
  {
    "text": "other greek gods i think are up there as well um that you can pull from and just plug",
    "start": "2495599",
    "end": "2500640"
  },
  {
    "text": "in the one that you want to if the open telemetry api is not supported out of the box so",
    "start": "2500640",
    "end": "2506079"
  },
  {
    "text": "what i like to do is run through both of those scenarios um the get scenario and the post scenario and",
    "start": "2506079",
    "end": "2511599"
  },
  {
    "text": "see what we see in our exciting distributed tracing visualization",
    "start": "2511599",
    "end": "2518880"
  },
  {
    "text": "now i have put the turbo button on my laptop so hopefully things go a little bit faster building and running all these",
    "start": "2521280",
    "end": "2526480"
  },
  {
    "text": "applications we'll see",
    "start": "2526480",
    "end": "2529680"
  },
  {
    "text": "now you may notice some other packages there i've got um my library for doing messaging i'm using",
    "start": "2535200",
    "end": "2540640"
  },
  {
    "text": "in service bus because it's easier for me to get up and going and i've also included a package",
    "start": "2540640",
    "end": "2546240"
  },
  {
    "text": "for in service bus which includes the instrumentation support for that so out of the box.net core provides",
    "start": "2546240",
    "end": "2552640"
  },
  {
    "text": "instrumentation for asp.net core for http clients for sql",
    "start": "2552640",
    "end": "2557920"
  },
  {
    "text": "clients and for azure service bus but i don't always use",
    "start": "2557920",
    "end": "2564079"
  },
  {
    "text": "azure surface bus sometimes i'm using rabbitmq and so i don't have any instrumentation there so what i've done is added this",
    "start": "2564079",
    "end": "2570319"
  },
  {
    "text": "package the extensions diagnostics.open telemetry that does two things one is it is able to do the",
    "start": "2570319",
    "end": "2577200"
  },
  {
    "text": "whole header to activity to header translation",
    "start": "2577200",
    "end": "2582240"
  },
  {
    "text": "that asp.net core is doing as well as surface those events out to open telemetry",
    "start": "2582240",
    "end": "2589040"
  },
  {
    "text": "so uh here we should see a dialogue pop up here in a minute",
    "start": "2589040",
    "end": "2596799"
  },
  {
    "text": "that is using the full extent of my design and css",
    "start": "2600880",
    "end": "2606720"
  },
  {
    "text": "capabilities so prepare to be wowed yeah there we go and the first thing i'll do is look at",
    "start": "2606720",
    "end": "2613359"
  },
  {
    "text": "the list of orders so behind",
    "start": "2613359",
    "end": "2621839"
  },
  {
    "text": "uh sales and all the other ones uh pulling those pieces together to be able to show on the user interface",
    "start": "2627040",
    "end": "2634319"
  },
  {
    "text": "and eventually this will come back",
    "start": "2634319",
    "end": "2637839"
  },
  {
    "text": "yeah it's running like 10 console windows which is a lot",
    "start": "2647440",
    "end": "2655040"
  },
  {
    "text": "but it'll eventually come back with a list of uh list of orders um so while that's uh while it's going",
    "start": "2655680",
    "end": "2662240"
  },
  {
    "text": "what i'll do is i'll switch over to uh some of the other code to show you um what else i needed to set up for each of",
    "start": "2662240",
    "end": "2668240"
  },
  {
    "text": "these so back in my visual studio um the other piece of the puzzle i had",
    "start": "2668240",
    "end": "2674079"
  },
  {
    "text": "to do was in my program that's cs",
    "start": "2674079",
    "end": "2680720"
  },
  {
    "text": "for all of these applications i did have to turn on the default id format and to force the",
    "start": "2680720",
    "end": "2687440"
  },
  {
    "text": "default id format to true now this is a pane.net core 31 but this",
    "start": "2687440",
    "end": "2693200"
  },
  {
    "text": "is intentional because net core 30 and 31 were released before the w3c standard was finalized",
    "start": "2693200",
    "end": "2700000"
  },
  {
    "text": "and so to ensure that they didn't like accidentally switch everyone over to a different trace id format and like screw",
    "start": "2700000",
    "end": "2705599"
  },
  {
    "text": "everyone's code up instead what it is is this make this an opt-in feature so you have to explicitly turn on these things for that",
    "start": "2705599",
    "end": "2712720"
  },
  {
    "text": "net core 31. now for net core or done at five",
    "start": "2712720",
    "end": "2719040"
  },
  {
    "text": "those two things will be on by default or really just the x the activity format so in dotnet three five or done at five uh activity",
    "start": "2719040",
    "end": "2727359"
  },
  {
    "text": "activities will default to the standard format so it'd be uh good to go there",
    "start": "2727359",
    "end": "2733839"
  },
  {
    "text": "all right see if our api finally returned oh lord aps are running slow today",
    "start": "2734319",
    "end": "2747839"
  },
  {
    "text": "um okay let's swap over now to our",
    "start": "2752880",
    "end": "2758839"
  },
  {
    "text": "visualization of this traces and see what we see there",
    "start": "2758839",
    "end": "2765039"
  },
  {
    "text": "okay so i've got two windows open uh one is for zipkin and one is for",
    "start": "2765920",
    "end": "2772839"
  },
  {
    "text": "jager um now zipkin is like easy mode for distributed",
    "start": "2772839",
    "end": "2778079"
  },
  {
    "text": "tracing um out of the box it doesn't have uh you can run it without any kind of uh",
    "start": "2778079",
    "end": "2783200"
  },
  {
    "text": "persistence storage so you can just have these traces actually stored in memory",
    "start": "2783200",
    "end": "2788400"
  },
  {
    "text": "versus being stored in like a database or something but it just have plugins for like some",
    "start": "2788400",
    "end": "2794400"
  },
  {
    "text": "document databases they can store the traces in kafka as like streams you can store the traces in",
    "start": "2794400",
    "end": "2802079"
  },
  {
    "text": "elasticsearch and a couple others as well for some of my for my just running locally though",
    "start": "2802079",
    "end": "2807359"
  },
  {
    "text": "it's just easier to run it based on just in memory just to make my life a little bit easier",
    "start": "2807359",
    "end": "2813440"
  },
  {
    "text": "so if i search i don't have any traces coming up yet what i can do is go back a couple hours to show a let's",
    "start": "2813440",
    "end": "2819839"
  },
  {
    "text": "go back six hours to show a previously previous trace that i ran earlier",
    "start": "2819839",
    "end": "2826000"
  },
  {
    "text": "in case my slow api never actually comes up",
    "start": "2826000",
    "end": "2831838"
  },
  {
    "text": "okay so what is this trace what is a span this is the initial get request to",
    "start": "2831920",
    "end": "2838079"
  },
  {
    "text": "orders to be able to show the list of orders on the screen and when i was running earlier it was",
    "start": "2838079",
    "end": "2844319"
  },
  {
    "text": "pretty that was what almost a second or 660 milliseconds so that's not not",
    "start": "2844319",
    "end": "2849680"
  },
  {
    "text": "too not too great i had to be able to turn that all that information uh but we can see is that it's actually",
    "start": "2849680",
    "end": "2855119"
  },
  {
    "text": "pulling together the different services in one single uh one single visualization",
    "start": "2855119",
    "end": "2861040"
  },
  {
    "text": "so it starts off with that call to the composition gateway then the composition gateway is composed",
    "start": "2861040",
    "end": "2867760"
  },
  {
    "text": "of three different other api calls so i've got a call to the sales api i've got a call to the customers api",
    "start": "2867760",
    "end": "2874559"
  },
  {
    "text": "and i've got a call to the finance api and then each of those api calls also",
    "start": "2874559",
    "end": "2879599"
  },
  {
    "text": "makes a call to a database so we can see as part of the trace the actual calls to the databases as well",
    "start": "2879599",
    "end": "2885280"
  },
  {
    "text": "now the other piece of the puzzle here is well i want to see some information about each of these different operations so when i click one",
    "start": "2885280",
    "end": "2892079"
  },
  {
    "text": "of the operations over here on the right is some of the additional tags as part",
    "start": "2892079",
    "end": "2897760"
  },
  {
    "text": "of that individual operation so this is what um this is what open telemetry actually adds",
    "start": "2897760",
    "end": "2904000"
  },
  {
    "text": "on top of the activity information uh that comes just kind of standard from data core data core doesn't add any",
    "start": "2904000",
    "end": "2911119"
  },
  {
    "text": "additional information about what the request was doing and so ideally i don't just have like an api request is made great",
    "start": "2911119",
    "end": "2917119"
  },
  {
    "text": "i want some context about what that operation was so that's what all these different tags are it tells me the host information the method the path",
    "start": "2917119",
    "end": "2923920"
  },
  {
    "text": "uh what the status code of if it's good or not um yeah and then this is the incoming api",
    "start": "2923920",
    "end": "2930800"
  },
  {
    "text": "call now i have the second one which is making the api call uh this is the receiving one from",
    "start": "2930800",
    "end": "2935920"
  },
  {
    "text": "the sales side so receive that sales api call and i can see the additional information",
    "start": "2935920",
    "end": "2941520"
  },
  {
    "text": "we have there and then we can click down into the actual database call that i made so over here this is now a database kind",
    "start": "2941520",
    "end": "2948480"
  },
  {
    "text": "of trace plugging into sql client to be able to show uh sql information so",
    "start": "2948480",
    "end": "2956000"
  },
  {
    "text": "this information here is the actual statement being used inside of that sql call now it has",
    "start": "2956000",
    "end": "2962240"
  },
  {
    "text": "scrubbed out some of the identifying information so i won't see parameters i want more information like that that's when i start to switch over to a",
    "start": "2962240",
    "end": "2969280"
  },
  {
    "text": "log tool to see the individual set of details for that for that one call",
    "start": "2969280",
    "end": "2975760"
  },
  {
    "text": "so you can see that it's got all the api calls all of the database calls",
    "start": "2975760",
    "end": "2982319"
  },
  {
    "text": "all in this nice hierarchical view that plugs everything together so if i compare this picture with",
    "start": "2982319",
    "end": "2991040"
  },
  {
    "text": "yeah so it looks like this right i have the incoming call that one call that was the top-level operation okay the second level call and",
    "start": "2997359",
    "end": "3004240"
  },
  {
    "text": "then three calls to three databases well that's exactly what we have here in",
    "start": "3004240",
    "end": "3009280"
  },
  {
    "text": "one single view let's look at jager because jaeger is a bit nicer",
    "start": "3009280",
    "end": "3015440"
  },
  {
    "text": "and i'll go over to the composition gateway looking back at the last six hours and find those traces",
    "start": "3015440",
    "end": "3023359"
  },
  {
    "text": "and then we say oh my god it finally oh no that was from five hours ago yeah",
    "start": "3023359",
    "end": "3028400"
  },
  {
    "text": "the first one's like five seconds so this one might still be taking a while to uh to return",
    "start": "3028400",
    "end": "3035200"
  },
  {
    "text": "okay so uh let's look at the fast one that's more interesting um so yeah it's a similar kind of view",
    "start": "3035200",
    "end": "3040640"
  },
  {
    "text": "right we've got the overall the overall call we have the sub calls being made",
    "start": "3040640",
    "end": "3045680"
  },
  {
    "text": "into the different pieces of information i can see individual tags about what those look like um jager is a bit",
    "start": "3045680",
    "end": "3052480"
  },
  {
    "text": "nicer looking you can kind of see that it's a bit cleaner looking interface and its searching capabilities are a bit",
    "start": "3052480",
    "end": "3059119"
  },
  {
    "text": "nicer as well so that was the get operation let's see",
    "start": "3059119",
    "end": "3064319"
  },
  {
    "text": "if my ui ever returned did not",
    "start": "3064319",
    "end": "3069359"
  },
  {
    "text": "refresh to see if it ever comes back",
    "start": "3069359",
    "end": "3083838"
  },
  {
    "text": "i don't think it is that's okay i've got my old trace um so in my",
    "start": "3088079",
    "end": "3095200"
  },
  {
    "text": "more complex example where i had all these different things",
    "start": "3095200",
    "end": "3102400"
  },
  {
    "text": "going on all at once that starts to get now super super complicated of all these different pieces",
    "start": "3102400",
    "end": "3107520"
  },
  {
    "text": "uh getting plugged together so um this is where it can become a little bit",
    "start": "3107520",
    "end": "3112559"
  },
  {
    "text": "difficult to to even find this trace versus something else so after i show this trace i'll show you",
    "start": "3112559",
    "end": "3118160"
  },
  {
    "text": "ways of enhancing the the output inside of those different traces to be able to have more",
    "start": "3118160",
    "end": "3124160"
  },
  {
    "text": "contextual information for your individual trace uh distributed traces",
    "start": "3124160",
    "end": "3129839"
  },
  {
    "text": "so let's find this one now so this one starts off with the angular ui calling the sales api",
    "start": "3129839",
    "end": "3135119"
  },
  {
    "text": "so let's go back over to jager because jager is nicer and go back up to",
    "start": "3135119",
    "end": "3140160"
  },
  {
    "text": "the sales api like six hours and find the traces",
    "start": "3140160",
    "end": "3147839"
  },
  {
    "text": "okay here's one that is for creating an order and you notice now that i bump the size",
    "start": "3148000",
    "end": "3153359"
  },
  {
    "text": "up a little bit it's got a lot more services it's talking to so each of these little bubbles here are the different services",
    "start": "3153359",
    "end": "3160000"
  },
  {
    "text": "that were associated with this initial request they were part of this overall trace",
    "start": "3160000",
    "end": "3165280"
  },
  {
    "text": "if they click one of those no no this is this is a lot more complicated of things going on so let's collapse a",
    "start": "3165280",
    "end": "3171760"
  },
  {
    "text": "couple of these down to kind of walk through these steps one by one so he said the first thing was there's",
    "start": "3171760",
    "end": "3176960"
  },
  {
    "text": "an api call to say create an order so that's this first one we have here um i can see the tags as part of it you",
    "start": "3176960",
    "end": "3182480"
  },
  {
    "text": "notice it doesn't have like the the payload is part of it so it's not including that level of detail",
    "start": "3182480",
    "end": "3187520"
  },
  {
    "text": "that's intentional this tracing tool is not meant to replace your logs your",
    "start": "3187520",
    "end": "3193920"
  },
  {
    "text": "logs are still there to get the details but the problem with logs is that uh is a part of cardinality of the data",
    "start": "3193920",
    "end": "3199839"
  },
  {
    "text": "there's a ton of data in your logs that how do you find the right data that's really what the traces are intended to do so if for example i saw",
    "start": "3199839",
    "end": "3206800"
  },
  {
    "text": "something wrong going on with this call then what i would do is include a span id which is right over",
    "start": "3206800",
    "end": "3213920"
  },
  {
    "text": "here in my logs so if i include the span id and my logs i could search for that span",
    "start": "3213920",
    "end": "3219520"
  },
  {
    "text": "id in my logs and now just have just the logs for that one operation in my trades",
    "start": "3219520",
    "end": "3226079"
  },
  {
    "text": "so sales api sent a message via rabbitmq",
    "start": "3226079",
    "end": "3232559"
  },
  {
    "text": "that's the send we have right here and i can see some information about it it's a producer",
    "start": "3232559",
    "end": "3237839"
  },
  {
    "text": "there's a payload size there's 34 bytes and then have a consumer that's going to receive that information",
    "start": "3237839",
    "end": "3243200"
  },
  {
    "text": "and now process it and publish the message out so as part of this we should expect to see a couple things",
    "start": "3243200",
    "end": "3248559"
  },
  {
    "text": "talking to a database and publishing a message now inside of that i've actually got a",
    "start": "3248559",
    "end": "3255839"
  },
  {
    "text": "lot more information going on here so what i've done in the uh this is in service bus i'm using to",
    "start": "3255839",
    "end": "3262079"
  },
  {
    "text": "be able to record this information um i've enriched the tags on the activity with a lot of",
    "start": "3262079",
    "end": "3267119"
  },
  {
    "text": "contextual information so that if i'm someone that's needing to diagnose something wrong i've got a lot more information",
    "start": "3267119",
    "end": "3272160"
  },
  {
    "text": "for me um so what i've actually done here is in my configuration",
    "start": "3272160",
    "end": "3279440"
  },
  {
    "text": "i go just look at one of my endpoints",
    "start": "3279440",
    "end": "3282960"
  },
  {
    "text": "we will see that after i call add open telemetry tracing which is the",
    "start": "3288640",
    "end": "3294079"
  },
  {
    "text": "services dot from the extensions hosting i have the exporters for zipkin and jaeger which i just need to tell them",
    "start": "3294079",
    "end": "3299440"
  },
  {
    "text": "the url to point to then i have a different instrumentation and one of the things i've done for demo",
    "start": "3299440",
    "end": "3305280"
  },
  {
    "text": "purposes is to capture the actual body of the messages so probably it's not something you'd want",
    "start": "3305280",
    "end": "3311200"
  },
  {
    "text": "to do in a production and for my production environment but for demo purposes as well as for like",
    "start": "3311200",
    "end": "3316319"
  },
  {
    "text": "dev like any low environment lower than production you can flip that on so that you can more easily diagnose a bug in a",
    "start": "3316319",
    "end": "3323040"
  },
  {
    "text": "distributed system so back in my ui i can see like the full",
    "start": "3323040",
    "end": "3328559"
  },
  {
    "text": "message body is part of that so all the other junk that might be part of this one of these things the submit order command sure",
    "start": "3328559",
    "end": "3334319"
  },
  {
    "text": "and then we can see what does it do next it makes three calls to the database so",
    "start": "3334319",
    "end": "3339520"
  },
  {
    "text": "i can say one select the product id and name sure",
    "start": "3339520",
    "end": "3345280"
  },
  {
    "text": "two other calls of the database and then finally down here it has a publish the order submitted event",
    "start": "3345280",
    "end": "3350480"
  },
  {
    "text": "we saw that there was three subscribers to that event the customer service the finance service",
    "start": "3350480",
    "end": "3356480"
  },
  {
    "text": "and the shipping service now shipping didn't do anything at first because it was waiting for that second",
    "start": "3356480",
    "end": "3361839"
  },
  {
    "text": "event to come in so as part of its information we just see yep it",
    "start": "3361839",
    "end": "3367040"
  },
  {
    "text": "received this message that said this order has been submitted",
    "start": "3367040",
    "end": "3374640"
  },
  {
    "text": "but the other ones are more complicated so customers was doing some database stuff to insert some information about the customer",
    "start": "3374640",
    "end": "3380000"
  },
  {
    "text": "and then that then it was done and the finance did a couple things uh first it saved some information into",
    "start": "3380000",
    "end": "3385520"
  },
  {
    "text": "its database so it said save",
    "start": "3385520",
    "end": "3391359"
  },
  {
    "text": "yes save the data to the database or get give the information out and then save",
    "start": "3391359",
    "end": "3396880"
  },
  {
    "text": "the data to the database there we go yeah insert into this and some stuff",
    "start": "3396880",
    "end": "3402240"
  },
  {
    "text": "it's done all right and then it's going to publish a new message that is hey i have",
    "start": "3402240",
    "end": "3409280"
  },
  {
    "text": "uh oh no it needs to actually submit the payment so this one is going to send a message to itself to",
    "start": "3409280",
    "end": "3415040"
  },
  {
    "text": "say i need to charge the customer so this message is initiate the payment process",
    "start": "3415040",
    "end": "3422400"
  },
  {
    "text": "and then down here it's going to make a call the",
    "start": "3422400",
    "end": "3428079"
  },
  {
    "text": "api to this other third party api which is just localhost you get the idea to make the payments once that payment",
    "start": "3428079",
    "end": "3434400"
  },
  {
    "text": "is successful then i publish a message saying payment has succeeded shipping receives",
    "start": "3434400",
    "end": "3439599"
  },
  {
    "text": "it receives a message and says okay now that shipping is good i'm going to send a message to the operations to",
    "start": "3439599",
    "end": "3446720"
  },
  {
    "text": "ship with fedex here we are and then itops receives it",
    "start": "3446720",
    "end": "3455200"
  },
  {
    "text": "operations and save some information that said yes i'm going to ship this package to the",
    "start": "3455200",
    "end": "3461280"
  },
  {
    "text": "customer so that entire complicated graph of all those different services together",
    "start": "3461280",
    "end": "3466400"
  },
  {
    "text": "can be represented in one single distributor trace that we see here now these tags were done automatically",
    "start": "3466400",
    "end": "3474480"
  },
  {
    "text": "by our our uh really just by the underlying um uh exporters from",
    "start": "3474480",
    "end": "3481599"
  },
  {
    "text": "open telemetry putting all this information in there but if you wanted to add your own information to that let's say",
    "start": "3481599",
    "end": "3488000"
  },
  {
    "text": "we have",
    "start": "3488000",
    "end": "3490559"
  },
  {
    "text": "we have some additional context information that's relative to like our sre folks so when they're",
    "start": "3494640",
    "end": "3500319"
  },
  {
    "text": "trying to diagnose a problem they can fix it without worrying about like having to go back to the logs or",
    "start": "3500319",
    "end": "3506160"
  },
  {
    "text": "something like that so inside any of my api calls if i start to have like",
    "start": "3506160",
    "end": "3511520"
  },
  {
    "text": "some contextual information like this one for example i say oh i got a i got a customer id then what i could do",
    "start": "3511520",
    "end": "3517040"
  },
  {
    "text": "is go to activity dot current yes",
    "start": "3517040",
    "end": "3523200"
  },
  {
    "text": "dot current that's the current running activity so in this case would be the asp.net core activity",
    "start": "3527599",
    "end": "3533440"
  },
  {
    "text": "and then i could say add tag and it could put a tag in here",
    "start": "3533440",
    "end": "3540079"
  },
  {
    "text": "so it could be like customer.id and i give it a value of customer id",
    "start": "3540079",
    "end": "3547280"
  },
  {
    "text": "so now when we see our traces show up for this operation it",
    "start": "3548400",
    "end": "3554799"
  },
  {
    "text": "will include the customer id in my trace which means inside of jager instead of",
    "start": "3554799",
    "end": "3560559"
  },
  {
    "text": "just like blindly going around and like i don't know then what we can do is actually search by tag and say cust.id",
    "start": "3560559",
    "end": "3567200"
  },
  {
    "text": "equals three and now we'll pull up all the spans with that customer identifier",
    "start": "3567200",
    "end": "3574400"
  },
  {
    "text": "the last piece we can do is if i have additional context information that really needs to flow to",
    "start": "3574400",
    "end": "3579760"
  },
  {
    "text": "all of my traces tags are only associated with the current operation there's another piece",
    "start": "3579760",
    "end": "3585280"
  },
  {
    "text": "which is called baggage now baggage is part of a new emerging",
    "start": "3585280",
    "end": "3590960"
  },
  {
    "text": "standard which is designed to attach additional context information",
    "start": "3590960",
    "end": "3596319"
  },
  {
    "text": "to all of the communications that get the initial trace context identifier so in this case",
    "start": "3596319",
    "end": "3602880"
  },
  {
    "text": "add baggage will actually flow that baggage information to all the child activities and when it",
    "start": "3602880",
    "end": "3607920"
  },
  {
    "text": "make calls out the door via http or via rabbitmq or whatever it might be then those information is put together",
    "start": "3607920",
    "end": "3614640"
  },
  {
    "text": "into a single header that then flows out the door to be consumed on the other side so this would mean that that customer id would",
    "start": "3614640",
    "end": "3620640"
  },
  {
    "text": "show up for all of the subsequent spans and operations and activities for",
    "start": "3620640",
    "end": "3627760"
  },
  {
    "text": "this customer id so that's pretty cool we use that a lot in my clients to be able to quickly",
    "start": "3627760",
    "end": "3633200"
  },
  {
    "text": "triangulate like someone has a problem okay give me your order id i can quickly see all of the traces for",
    "start": "3633200",
    "end": "3639520"
  },
  {
    "text": "for that order across all the actions that users performed",
    "start": "3639520",
    "end": "3644640"
  },
  {
    "text": "pretty rad stuff so that was distributed tracing made",
    "start": "3644640",
    "end": "3651520"
  },
  {
    "text": "easy with net core we're looking for net5 the only thing we need to update is to remove the",
    "start": "3651520",
    "end": "3658000"
  },
  {
    "text": "move the the default the the activity id format from w3c because it's down by default otherwise it works exactly out of the",
    "start": "3658000",
    "end": "3664240"
  },
  {
    "text": "box now the other cool thing is that the activity api is not actually tied to net core it",
    "start": "3664240",
    "end": "3671040"
  },
  {
    "text": "targets.net standard and so classic asp.net web forms also has",
    "start": "3671040",
    "end": "3676319"
  },
  {
    "text": "this tracing stuff built into it as well so they have actually updated those to use this standard um as long as",
    "start": "3676319",
    "end": "3682720"
  },
  {
    "text": "you just update this out of band system diagnostics uh package you'll get the new w3c",
    "start": "3682720",
    "end": "3689920"
  },
  {
    "text": "tracing supports um out of the box so really cool stuff so um we have a couple minutes for",
    "start": "3689920",
    "end": "3697200"
  },
  {
    "text": "well negative one minute for questions so i'll just uh answer a couple of those real quick if i don't answer them in the next 30",
    "start": "3697200",
    "end": "3702640"
  },
  {
    "text": "seconds then i will answer them on the slack channel the first one was",
    "start": "3702640",
    "end": "3707680"
  },
  {
    "text": "um does the net framework 472 support open telemetry um yes it does because the system",
    "start": "3707680",
    "end": "3712720"
  },
  {
    "text": "diagnostics uh and open telemetry apis target net standard 2o so that means it actually supports uh",
    "start": "3712720",
    "end": "3720799"
  },
  {
    "text": "net472 now depending on the runtime that may be a little different so classic asp.net",
    "start": "3720799",
    "end": "3726240"
  },
  {
    "text": "versus asp.net core you'll have to check the details in each of those the other questions were over so i'll",
    "start": "3726240",
    "end": "3732319"
  },
  {
    "text": "take the rest of the questions and move them over to our slack otherwise good have a great",
    "start": "3732319",
    "end": "3739680"
  },
  {
    "text": "uh it's wednesday uh and i'll have a great tuesday evening so thanks everyone",
    "start": "3739680",
    "end": "3755200"
  }
]