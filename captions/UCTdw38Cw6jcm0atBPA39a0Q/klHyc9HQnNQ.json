[
  {
    "text": "okay should we get started yeah fantastic it's lovely lovely to see you or thanks so much for coming just in case anyone",
    "start": "3590",
    "end": "11250"
  },
  {
    "text": "in the front has trouble seeing because the obviously I'll be standing in front of this screen you feel free to shuffle",
    "start": "11250",
    "end": "16680"
  },
  {
    "text": "round as we go my name is Nick I'm from data lust I'm here to talk to",
    "start": "16680",
    "end": "22739"
  },
  {
    "text": "you about building passes in c-sharp like the kinds of phases that you write for little little languages probably from big languages but we're not really",
    "start": "22739",
    "end": "30450"
  },
  {
    "text": "just gonna look at the how I want to look at this from the very lowest level building blocks so that when you walk",
    "start": "30450",
    "end": "35910"
  },
  {
    "text": "out of here you might feel like there's no magic involved in parsing languages and that's something that you might",
    "start": "35910",
    "end": "41789"
  },
  {
    "text": "consider even using in your own real world applications things that other developers have to work on and maintain",
    "start": "41789",
    "end": "48499"
  },
  {
    "text": "but this story begins story begins ten",
    "start": "48499",
    "end": "53699"
  },
  {
    "text": "years ago I think my cold winter afternoon I was hunched over my desk in Microsoft Building 41 and an email",
    "start": "53699",
    "end": "60030"
  },
  {
    "text": "popped up into my inbox my boss is",
    "start": "60030",
    "end": "65640"
  },
  {
    "text": "really interested in this IRC stuff and he'd been doing some work in that area would you mind coming down to the cafe",
    "start": "65640",
    "end": "71040"
  },
  {
    "text": "to answer a few questions so I'm sure enough okay I'll come I'll come down have a chat quickly check the org chart",
    "start": "71040",
    "end": "76950"
  },
  {
    "text": "before I head down the stairs and ah this boss is Eric Meyer and with no",
    "start": "76950",
    "end": "82530"
  },
  {
    "text": "preparation at all I'm about to try and explain what I think are the benefits of dependency injection to dr. Meyer who",
    "start": "82530",
    "end": "88350"
  },
  {
    "text": "obviously needs no introduction so then sometime later when Eric Meyer was",
    "start": "88350",
    "end": "95850"
  },
  {
    "text": "explaining functional composition he quipped that dependency injection is just for programmers who don't know",
    "start": "95850",
    "end": "101969"
  },
  {
    "text": "maths and I had to stop and really look at it myself then but when I came back",
    "start": "101969",
    "end": "107159"
  },
  {
    "text": "to preparing this talk well I know I've got an hour slot I probably need to",
    "start": "107159",
    "end": "112380"
  },
  {
    "text": "allow 10 minutes at the end for questions or at least for running over and then I have around 30 30 meaty",
    "start": "112380",
    "end": "120899"
  },
  {
    "text": "slides to get through so how long do I have each slide I can't really do that in my head so maybe there's some truth in this",
    "start": "120899",
    "end": "126689"
  },
  {
    "text": "but I know a few things about computers and so is there a way that we could",
    "start": "126689",
    "end": "132060"
  },
  {
    "text": "simply get the computer to answer this for us and so I've got one hour and we've got 10 minutes at the end and",
    "start": "132060",
    "end": "142510"
  },
  {
    "text": "there 30 slides so I'll have to divide that I know that much and we need some",
    "start": "142510",
    "end": "148210"
  },
  {
    "text": "friends okay so we'll have 1 minute and 40 seconds for every slide that's plenty of time",
    "start": "148210",
    "end": "154090"
  },
  {
    "text": "right and if in that 10 minutes sorry in",
    "start": "154090",
    "end": "161050"
  },
  {
    "text": "10 minutes if I need 30 seconds per question say how many questions could we",
    "start": "161050",
    "end": "167680"
  },
  {
    "text": "could we get through we get through 20 I really do that in my head as well but you can see that in some domains little",
    "start": "167680",
    "end": "175150"
  },
  {
    "text": "little languages are a great great way to express problems and there there's some times faster P really user",
    "start": "175150",
    "end": "180550"
  },
  {
    "text": "interface to the other kinds of tools that we normally have in our tool kit like forms and buttons and and things",
    "start": "180550",
    "end": "187090"
  },
  {
    "text": "there's a whole class of interfaces that I really awful when they're implemented as gooeys and you can imagine especially",
    "start": "187090",
    "end": "193600"
  },
  {
    "text": "things like we recent issue trackers really bring that to the fore where little languages are fantastic and the",
    "start": "193600",
    "end": "200710"
  },
  {
    "text": "first the first kind of realization of that for me was when I was introduced to databases and then at that point I think",
    "start": "200710",
    "end": "208060"
  },
  {
    "text": "using ball and paradox writing a query meant kind of dragging around boxes that represented tables joining them up with",
    "start": "208060",
    "end": "215050"
  },
  {
    "text": "lines representing foreign keys and relationships and then kind of iterating until probably the wrong results that",
    "start": "215050",
    "end": "221800"
  },
  {
    "text": "came out but at least something that I could convince myself was what I needed once you learn sequel obviously you see that there's a there's a far superior",
    "start": "221800",
    "end": "228640"
  },
  {
    "text": "way if you have to work with databases a lot to interact with them through this little language just a force now a very",
    "start": "228640",
    "end": "233709"
  },
  {
    "text": "big language and we know this intuitively as programmers but we're",
    "start": "233709",
    "end": "240310"
  },
  {
    "text": "very hesitant to introduce languages into our own applications I think partly because when we first introduced to that",
    "start": "240310",
    "end": "246760"
  },
  {
    "text": "field it's a very large complex interesting field and all that detail kind of obscures the a few small truths",
    "start": "246760",
    "end": "254260"
  },
  {
    "text": "that you need to be able to handle languages once I learnt what we're going to talk about today in this talk I",
    "start": "254260",
    "end": "259470"
  },
  {
    "text": "started to see opportunities everywhere to use languages to improve api's and turn improve the way that the products I",
    "start": "259470",
    "end": "266470"
  },
  {
    "text": "worked on we used I'm some of the ones that I can talk about that a kind of public is I worked on an",
    "start": "266470",
    "end": "271630"
  },
  {
    "text": "octopus deploy in the early versions you were seeing the octopus folks downstairs Paul I were able to take the templating",
    "start": "271630",
    "end": "279850"
  },
  {
    "text": "language and octopus deploy and instead of just substituting variables into your configuration files and your and other",
    "start": "279850",
    "end": "288160"
  },
  {
    "text": "things at deployment time we introduced loops and control floater so that you can conditionally create your",
    "start": "288160",
    "end": "293500"
  },
  {
    "text": "configuration files or even generate them from the variables that describe that deployment of course languages",
    "start": "293500",
    "end": "301419"
  },
  {
    "text": "don't just appear in interfaces via for end-users they're also for developers and by using a little language to",
    "start": "301419",
    "end": "308139"
  },
  {
    "text": "capture structured log events sera log which I worked on was able to to make a",
    "start": "308139",
    "end": "313510"
  },
  {
    "text": "really low barrier to entry for structured logging unit and we now have that throughout and log and done that",
    "start": "313510",
    "end": "319750"
  },
  {
    "text": "framework as well and then day to day I work on this thing called seek which is",
    "start": "319750",
    "end": "325479"
  },
  {
    "text": "a sequel over Jason log log store or event store that's used for Diagnostics",
    "start": "325479",
    "end": "332530"
  },
  {
    "text": "and log analysis and you don't just sort of wake up one morning and say hey I'm gonna write a sequel over Jason the",
    "start": "332530",
    "end": "338229"
  },
  {
    "text": "Vince store and then I better go and learn how to how to deal with languages I think the the key to this is that once",
    "start": "338229",
    "end": "344620"
  },
  {
    "text": "you realize that these are just programming techniques that you can that you can apply those opportunities all",
    "start": "344620",
    "end": "350729"
  },
  {
    "text": "present themselves to you and the other way ah so what's the problem then why",
    "start": "350729",
    "end": "356830"
  },
  {
    "text": "don't we do this if you look at the expression in this in this example there's every chance that",
    "start": "356830",
    "end": "364330"
  },
  {
    "text": "you can see the problem at a glance I think we've we're all familiar with how",
    "start": "364330",
    "end": "369880"
  },
  {
    "text": "expressions a representative trees you have nodes that represent the values and",
    "start": "369880",
    "end": "375460"
  },
  {
    "text": "then you have higher level nodes that connect them up with operators like the minus and divide that we've got in this",
    "start": "375460",
    "end": "381130"
  },
  {
    "text": "example once once the data is represented as a tree then all the usual",
    "start": "381130",
    "end": "387880"
  },
  {
    "text": "tools that we're familiar with like recursion and and switch statements and",
    "start": "387880",
    "end": "395710"
  },
  {
    "text": "the rest of it can be brought to bear on calculating results so who's whose work",
    "start": "395710",
    "end": "401050"
  },
  {
    "text": "was recursion in the past yeah and an trees dealt with trees yeah",
    "start": "401050",
    "end": "406400"
  },
  {
    "text": "but there's there's a lot of experience in those in those kinds of technologies and you can see that evaluating an",
    "start": "406400",
    "end": "413150"
  },
  {
    "text": "expression that's represented as a tree where say here expression is the the root node in the class hierarchy and we've got duration value and numeric",
    "start": "413150",
    "end": "420080"
  },
  {
    "text": "value that evaluate to simple values and then we've got binary expression which",
    "start": "420080",
    "end": "426220"
  },
  {
    "text": "recursively evaluates its left and right sides before dispatching an operator now you'd imagine that sweating away over",
    "start": "426220",
    "end": "432889"
  },
  {
    "text": "switch statements and recursion for an afternoon most of us would be able to come up with the value of an expression",
    "start": "432889",
    "end": "439009"
  },
  {
    "text": "given the tree form so we can we can deal with trees and we can deal with recursion so what what is the problem",
    "start": "439009",
    "end": "446150"
  },
  {
    "text": "and it's this that we need to take the sequence of characters and and bunch it",
    "start": "446150",
    "end": "452270"
  },
  {
    "text": "up in just the right way so that it represents the the the correct tree structure that the the expression",
    "start": "452270",
    "end": "458620"
  },
  {
    "text": "describes and you might say well I know regular expressions I can just aura can",
    "start": "458620",
    "end": "465740"
  },
  {
    "text": "string split that and regular expressions can only produce lists the",
    "start": "465740",
    "end": "472690"
  },
  {
    "text": "limitation of regular expressions is they have no way to describe nesting and so if you are working with regular",
    "start": "472690",
    "end": "480500"
  },
  {
    "text": "expressions you can only really create flat data out of your input to create",
    "start": "480500",
    "end": "486050"
  },
  {
    "text": "data structures that are tree shaped you need to use a parsing technique this is",
    "start": "486050",
    "end": "491599"
  },
  {
    "text": "probably all you need to know about Chomsky's Grandma hierarchy in one slide for the practical programmer so what's a",
    "start": "491599",
    "end": "499970"
  },
  {
    "text": "parser a parser is just a function that takes a string as input and returns some",
    "start": "499970",
    "end": "506240"
  },
  {
    "text": "value as an output that's kind of a joke really because I mean obviously that tells us very much it tells us",
    "start": "506240",
    "end": "512419"
  },
  {
    "text": "everything nothing about passes to write useful parses and the ones that we'll",
    "start": "512419",
    "end": "518839"
  },
  {
    "text": "examine we need to be a bit more prescriptive about how they receive input and how they return results so the",
    "start": "518839",
    "end": "526250"
  },
  {
    "text": "two structs they'll introduce called input and result play this role like input is like a cursor into the source",
    "start": "526250",
    "end": "532459"
  },
  {
    "text": "text that we're gonna pass and it's immutable so the only way to advance input is to call",
    "start": "532459",
    "end": "538850"
  },
  {
    "text": "next jar and then you get a result that represents the either the successfully retrieved character or maybe a carry",
    "start": "538850",
    "end": "545420"
  },
  {
    "text": "scenario information like in this case probably we would have reached the end of the string and so we might get",
    "start": "545420",
    "end": "552320"
  },
  {
    "text": "nothing back once we do get a character back then the remainder on the result will give us the rest of the input that",
    "start": "552320",
    "end": "559130"
  },
  {
    "text": "we're yet to pass and using these two types we can work through the input",
    "start": "559130",
    "end": "565160"
  },
  {
    "text": "character by character in a fairly obvious way so to parse the number 123 we look at",
    "start": "565160",
    "end": "571160"
  },
  {
    "text": "the first character and if it's one of it's a digit then we take that digit value and store it away and if we look",
    "start": "571160",
    "end": "577010"
  },
  {
    "text": "and find another digit then we can just multiply whatever we have by ten and add that new value on so we multiply one by",
    "start": "577010",
    "end": "582740"
  },
  {
    "text": "one by ten and we get ten and then we had on the two and we continue that process through the rest of the string",
    "start": "582740",
    "end": "588110"
  },
  {
    "text": "and this is the mechanics of input and result so you can see in the first line",
    "start": "588110",
    "end": "594470"
  },
  {
    "text": "we call input dot next char and if the character is not a digit then we'll return the empty result but otherwise we",
    "start": "594470",
    "end": "600800"
  },
  {
    "text": "start that looping that we were talking about a moment ago multiplying by ten shifting stuff up and eventually we",
    "start": "600800",
    "end": "607100"
  },
  {
    "text": "we've consumed as many digits as we can find and we returned the whole remainder along with that value and this is not",
    "start": "607100",
    "end": "614089"
  },
  {
    "text": "pretty code this is certainly not intended to be exciting it's only really here on a slide just to prove that there",
    "start": "614089",
    "end": "619760"
  },
  {
    "text": "isn't any magic at this level we'll keep looking at more levels and and just off I guess any chance of there being magic",
    "start": "619760",
    "end": "626240"
  },
  {
    "text": "hidden in there too because pauses are",
    "start": "626240",
    "end": "631310"
  },
  {
    "text": "just functions we can use regular programming techniques to write pauses so to get a parser that can recognize",
    "start": "631310",
    "end": "637430"
  },
  {
    "text": "any particular character we can use this function sha 65,000 pauses for the price",
    "start": "637430",
    "end": "644240"
  },
  {
    "text": "of one and it will just look at the character that's next in the stream and if it matches what we're we're looking",
    "start": "644240",
    "end": "649279"
  },
  {
    "text": "for then it will succeed with that value in otherwise it won't given that we can",
    "start": "649279",
    "end": "656440"
  },
  {
    "text": "parse natural numbers and we can look for a dot in this case then it's not too",
    "start": "656440",
    "end": "663170"
  },
  {
    "text": "hard to imagine combining these two paths decimal numbers that have got a whole part and a decimal point in a",
    "start": "663170",
    "end": "669620"
  },
  {
    "text": "fraction of and you can see that we can do that in a fairly straightforward and mechanical",
    "start": "669620",
    "end": "675560"
  },
  {
    "text": "way here to create ourselves a double parser we just apply a natural which we wrote a moment ago we apply a dot and to",
    "start": "675560",
    "end": "682100"
  },
  {
    "text": "make sure that we've got a decimal point in the middle and if we've successfully gone all the way through there then you can imagine that we might have written",
    "start": "682100",
    "end": "687860"
  },
  {
    "text": "the fraction parser to deal with the leading zeros in the and the rest of the input and if all of that succeeds and we",
    "start": "687860",
    "end": "694430"
  },
  {
    "text": "get to the bottom then we can add the whole part and the fractional part and we've got our double we haven't really",
    "start": "694430",
    "end": "702110"
  },
  {
    "text": "written a lot of positive there and we've got a lot of code and it's very tedious code that was probably error-prone and I can't imagine that a",
    "start": "702110",
    "end": "708830"
  },
  {
    "text": "positon for a full-scale language would be very much fun to work with if we took this kind of direct approach so I stare",
    "start": "708830",
    "end": "719540"
  },
  {
    "text": "that all down I start again to improve",
    "start": "719540",
    "end": "725960"
  },
  {
    "text": "this situation we can observe that pauses of functions and c-sharp has got some good features for abstracting over",
    "start": "725960",
    "end": "733100"
  },
  {
    "text": "functions to use them we really have to describe what the signature of a person looks like and there's our a delegate",
    "start": "733100",
    "end": "739310"
  },
  {
    "text": "called positive T there that takes an input and returns a result once we have",
    "start": "739310",
    "end": "744440"
  },
  {
    "text": "that signature defined we can write other more tricky functions like many and many isn't a parser it will actually",
    "start": "744440",
    "end": "750350"
  },
  {
    "text": "take the deposit for an item here we've got say a positive called smiley which would take some ASCII characters that",
    "start": "750350",
    "end": "757460"
  },
  {
    "text": "describe a smiley and returned the Unicode equivalent now we can pass that through to many and many will just try",
    "start": "757460",
    "end": "764720"
  },
  {
    "text": "to apply that parser as many times as it can on the input stream until it can't succeed anymore and the results of",
    "start": "764720",
    "end": "770660"
  },
  {
    "text": "applying that it will return in a list so many works on any positive that conforms to that positive T signature to",
    "start": "770660",
    "end": "780920"
  },
  {
    "text": "make everything conform to that signature though we have to make some modifications to passes like char and",
    "start": "780920",
    "end": "786530"
  },
  {
    "text": "now instead of char being a positive that directly works on the input char is",
    "start": "786530",
    "end": "792620"
  },
  {
    "text": "a function that returns passes and we give it the character that we want to match in it will give us a positive back",
    "start": "792620",
    "end": "797720"
  },
  {
    "text": "that that will only match that character so we have two more ingredients that we",
    "start": "797720",
    "end": "806130"
  },
  {
    "text": "need in order to be able to simplify this kind of sequencing of parses then",
    "start": "806130",
    "end": "813780"
  },
  {
    "text": "is the the signature of then is admittedly a bit more complex than there then it would be pleasant to look at at",
    "start": "813780",
    "end": "819600"
  },
  {
    "text": "first sight but but then takes the positive that's going to be applied first and then if it can successfully",
    "start": "819600",
    "end": "826440"
  },
  {
    "text": "apply that parser it will call the function with the with its result to get the second parser to apply and once",
    "start": "826440",
    "end": "832320"
  },
  {
    "text": "they're both and once they've both been I once they're both being called it will",
    "start": "832320",
    "end": "838230"
  },
  {
    "text": "return the result of applying that second parser return is a little building block that simply succeeds with",
    "start": "838230",
    "end": "844740"
  },
  {
    "text": "a value and consumes no input a little bit mysterious but now if we go back to",
    "start": "844740",
    "end": "850620"
  },
  {
    "text": "this example of sequencing are three small passes into the into the larger one that can return doubles of house",
    "start": "850620",
    "end": "857160"
  },
  {
    "text": "doubles you see that we've got this declarative way of sequencing then we can hit we can say a double is natural",
    "start": "857160",
    "end": "863550"
  },
  {
    "text": "and then we take the whole pit part and we apply a char to pass the dot and if",
    "start": "863550",
    "end": "868920"
  },
  {
    "text": "we've successfully passed the dot then we call fraction and return the whole amount profit plus the fraction and I",
    "start": "868920",
    "end": "874800"
  },
  {
    "text": "can live with this because there probably isn't much of a simpler way to describe how three passes would be",
    "start": "874800",
    "end": "881280"
  },
  {
    "text": "applied though in sequence like that so many and and then and return are just",
    "start": "881280",
    "end": "889170"
  },
  {
    "text": "not the only games in town once you start thinking about ways that you can write functions to manipulate parsers",
    "start": "889170",
    "end": "895920"
  },
  {
    "text": "you can do all kinds of tricky things with them and these these functions that combine passes are called",
    "start": "895920",
    "end": "901230"
  },
  {
    "text": "positive carbon aiders and the technique is quite old but it was popularized that",
    "start": "901230",
    "end": "906390"
  },
  {
    "text": "surprisingly not surprisingly for this talk I guess in them paper by Graham Hutton and Eric Meyer in 1996 and so",
    "start": "906390",
    "end": "913350"
  },
  {
    "text": "there are implementations of this concept in quite a lot of programming languages and it also just so happens",
    "start": "913350",
    "end": "921600"
  },
  {
    "text": "that if we have a couple of specially crafted signatures for functions like where and select and select many we end",
    "start": "921600",
    "end": "929460"
  },
  {
    "text": "up with being able to use the link syntax in c-sharp to elegantly and with that all right would drift",
    "start": "929460",
    "end": "935490"
  },
  {
    "text": "go in sequence those three pauses that way you see this is the same positive written again but with a sprinkling of",
    "start": "935490",
    "end": "941279"
  },
  {
    "text": "some kind of magic I guess now the good",
    "start": "941279",
    "end": "946619"
  },
  {
    "text": "news is that this is a little bit of a bait-and-switch because we looked at the low-level building blocks but you don't",
    "start": "946619",
    "end": "952410"
  },
  {
    "text": "need to go and reemployment of this there are several libraries for.net that implement powers at Combinator's the one",
    "start": "952410",
    "end": "958199"
  },
  {
    "text": "that we'll look at in a bit more detail is called super power I wrote it particularly because I needed",
    "start": "958199",
    "end": "963600"
  },
  {
    "text": "end-user quality error messages out of the query files of for C there are other",
    "start": "963600",
    "end": "969600"
  },
  {
    "text": "there are there examples that will also have a quick review of if we have time towards the end of this talk you can",
    "start": "969600",
    "end": "975929"
  },
  {
    "text": "find super on get up and we do fit on the screen great so looking at super",
    "start": "975929",
    "end": "981300"
  },
  {
    "text": "power and it's Combinator library it's got a few differences from the simple",
    "start": "981300",
    "end": "986550"
  },
  {
    "text": "types that we just introduced but the the power of T type and super power that will first look at it's called text",
    "start": "986550",
    "end": "992579"
  },
  {
    "text": "parser a super power has a couple of different options for how to write passes and text passes the first of them",
    "start": "992579",
    "end": "999600"
  },
  {
    "text": "and it corresponds exactly to input and result that we were just looking at so",
    "start": "999600",
    "end": "1004759"
  },
  {
    "text": "yeah expression language for computing these little time calculations if we want to deal with the hour and minute",
    "start": "1004759",
    "end": "1012160"
  },
  {
    "text": "suffixes to these duration values then we can create a positive ándale those",
    "start": "1012160",
    "end": "1017509"
  },
  {
    "text": "and we'll look at this one called magnitude now we if you think about how",
    "start": "1017509",
    "end": "1023059"
  },
  {
    "text": "those values are actually structured one H is really 1 multiplied by 1 hour and",
    "start": "1023059",
    "end": "1029058"
  },
  {
    "text": "10 M is 10 multiplied by 1 minute and so that's why this positive written as a timespan it gives us the magnitude that",
    "start": "1029059",
    "end": "1035659"
  },
  {
    "text": "we can have that we can apply in a multiplication to get the full value",
    "start": "1035659",
    "end": "1041470"
  },
  {
    "text": "it's really the the parser itself is structured like a giant switch statement I left it deliberately a bit verbose and",
    "start": "1042069",
    "end": "1049039"
  },
  {
    "text": "ugly because I mean it is just code so we could refactor this and have a more elegant kind of a mapping from these",
    "start": "1049039",
    "end": "1055309"
  },
  {
    "text": "suffixes to the timescale values Ric",
    "start": "1055309",
    "end": "1063120"
  },
  {
    "text": "pulling out the carpet now but I wanted you to see that the the thing laid out",
    "start": "1063120",
    "end": "1068679"
  },
  {
    "text": "and it's it's kind of full detail and so we proceed through the input and we try and we try and match D and if we",
    "start": "1068679",
    "end": "1075100"
  },
  {
    "text": "successfully find the character D and a character dot equal to is just char is that there's a dessert library of these",
    "start": "1075100",
    "end": "1081970"
  },
  {
    "text": "kinds of pauses in superpower and so they've got a little bit more of a boast names so that you can kind of find them",
    "start": "1081970",
    "end": "1087160"
  },
  {
    "text": "in the classes that declare them now but if we if we match the character D then",
    "start": "1087160",
    "end": "1093190"
  },
  {
    "text": "we'll return one day and then we could work through hours and minutes seconds and milliseconds you see there's a bit",
    "start": "1093190",
    "end": "1100840"
  },
  {
    "text": "of an ambiguity when it comes to pausing minutes or milliseconds and if we tried",
    "start": "1100840",
    "end": "1105880"
  },
  {
    "text": "the minutes first because it's a prefix of milliseconds we would succeed right we would find an M and then we were done",
    "start": "1105880",
    "end": "1111970"
  },
  {
    "text": "and then we returned that and later on when we came to try to process the rest of the input there would be this s sitting there so we don't want that all",
    "start": "1111970",
    "end": "1121240"
  },
  {
    "text": "will actually run the these branches sequentially so to fix this problem we just put the MS option first and if we",
    "start": "1121240",
    "end": "1127120"
  },
  {
    "text": "if we can't successfully match the whole MS then we'll fall back and we might try and match just an M and for performance",
    "start": "1127120",
    "end": "1133780"
  },
  {
    "text": "reasons and also to improve error reporting the library we want to do this automatically and you have to actually",
    "start": "1133780",
    "end": "1138940"
  },
  {
    "text": "use try in order to declare that you want to backtrack if you if you succeed with a partial match or if you fail with",
    "start": "1138940",
    "end": "1144700"
  },
  {
    "text": "partial match I should say so there's the whole thing now once we once we have",
    "start": "1144700",
    "end": "1152770"
  },
  {
    "text": "the magnitude paths that we can combine it with a couple of other library passes like we have numeric decimal double",
    "start": "1152770",
    "end": "1158559"
  },
  {
    "text": "another very strange name but once you get used to the scheme this is a",
    "start": "1158559",
    "end": "1164190"
  },
  {
    "text": "positive that will pass decimal syntax and return that the value as a dotnet double so there is just numeric decimal",
    "start": "1164190",
    "end": "1170980"
  },
  {
    "text": "for pausing the the text that contains a decimal number and there's also a",
    "start": "1170980",
    "end": "1176140"
  },
  {
    "text": "decimal decimal and everything's is really hard at the same still so if we if we managed to pass the decimal part",
    "start": "1176140",
    "end": "1183820"
  },
  {
    "text": "then we can use magnitude to powers the little suffix and once we've got those",
    "start": "1183820",
    "end": "1191919"
  },
  {
    "text": "values we can multiply them out to get the duration representatives at times and unfortunately because superpower",
    "start": "1191919",
    "end": "1199270"
  },
  {
    "text": "uses structs and it's delegate signatures there's no there's no covariance and so there's a bit of a",
    "start": "1199270",
    "end": "1204580"
  },
  {
    "text": "caste in there because we want to work with passes over expressions we don't want to kind of let all of the concrete",
    "start": "1204580",
    "end": "1210430"
  },
  {
    "text": "implementation types leak all their way up to how we know any of this works at",
    "start": "1210430",
    "end": "1215920"
  },
  {
    "text": "all and this is the this is the next great thing about passes just being coded they're actually they're trivially",
    "start": "1215920",
    "end": "1222550"
  },
  {
    "text": "easy to test because the test deposit which is just a function then you simply call the function and see whether a",
    "start": "1222550",
    "end": "1227590"
  },
  {
    "text": "return to the result you're expecting and so test paws are is just a wrapper",
    "start": "1227590",
    "end": "1233080"
  },
  {
    "text": "here that kind of cuts a bit of slight bit of noise out of the slide but we can feed in 150 H and and see that that",
    "start": "1233080",
    "end": "1242020"
  },
  {
    "text": "gives us 150 hours just like we could take the magnitude parser and feed in an H and see that it gives us one hour and",
    "start": "1242020",
    "end": "1250320"
  },
  {
    "text": "the puzzles we gonna write are a bit fractal and that they're kind of the same at all levels by just being",
    "start": "1250320",
    "end": "1255340"
  },
  {
    "text": "functions that return values so the unit tests the test these little tiny chromatic elements like durations and",
    "start": "1255340",
    "end": "1261130"
  },
  {
    "text": "numbers are really called in exactly the same way as the higher level ones that come that are going to pass whole",
    "start": "1261130",
    "end": "1267520"
  },
  {
    "text": "expressions so all most of the projects that I've worked on that have used some kind of text parsing they're enjoy -",
    "start": "1267520",
    "end": "1274360"
  },
  {
    "text": "they're a joy to test and modify because your test suite becomes a really big long list of inputs really big long list",
    "start": "1274360",
    "end": "1280330"
  },
  {
    "text": "of their expected outputs and you can you can write data-driven tests they exercise a whole lot of different code paths without very much effort so when",
    "start": "1280330",
    "end": "1289150"
  },
  {
    "text": "you when you do go back to real life outside of the wonder of MDC and",
    "start": "1289150",
    "end": "1294760"
  },
  {
    "text": "consider adding some languages into your apps if you know if the maintenance",
    "start": "1294760",
    "end": "1300360"
  },
  {
    "text": "question is raised I think you could probably safely say that houses are a",
    "start": "1300360",
    "end": "1305380"
  },
  {
    "text": "lot nicer to maintain than most of the code that we always deal with like controllers and even worse web forms",
    "start": "1305380",
    "end": "1311560"
  },
  {
    "text": "those kinds of joys we've handled I",
    "start": "1311560",
    "end": "1317320"
  },
  {
    "text": "think I think you have a fairly clear idea of how we can handle the numeric values in our expressions and how we can",
    "start": "1317320",
    "end": "1322480"
  },
  {
    "text": "deal with those the duration values now looking at the next little element that",
    "start": "1322480",
    "end": "1328570"
  },
  {
    "text": "of ours is going handle and these very modular it's a kind of a modular approach that you take you can kind of build those poses up",
    "start": "1328570",
    "end": "1335250"
  },
  {
    "text": "from very small elements we just want to deal with passing out operators this time and unlike the very ugly you're a",
    "start": "1335250",
    "end": "1343470"
  },
  {
    "text": "magnitude passer we've actually done a little bit of refactoring refactoring here and we've got this op helper",
    "start": "1343470",
    "end": "1349410"
  },
  {
    "text": "function that will just generate passes for us that match your character every time an item from that enum you see plus",
    "start": "1349410",
    "end": "1357450"
  },
  {
    "text": "will give us an ADD etc and this is this is one of the other great things across",
    "start": "1357450",
    "end": "1362520"
  },
  {
    "text": "because writing a parser as a as a bunch of c-sharp code gives you all of these",
    "start": "1362520",
    "end": "1367590"
  },
  {
    "text": "great code organization and refactoring abilities that you just wouldn't get if you were using some kind of language",
    "start": "1367590",
    "end": "1373230"
  },
  {
    "text": "workbench because of course you can't declare yourself functions like up to simplify things and now we're into the",
    "start": "1373230",
    "end": "1381810"
  },
  {
    "text": "very worst of the code dump slides and this one describes how we produce the",
    "start": "1381810",
    "end": "1389220"
  },
  {
    "text": "expression tree I guess it's a bit tricky but there's some logic to it and",
    "start": "1389220",
    "end": "1394500"
  },
  {
    "text": "that if you look at the top that the pauses at the top they're kind of the tight grammatical units that were",
    "start": "1394500",
    "end": "1400080"
  },
  {
    "text": "passing in this case the language that we pass is made up of literals which are",
    "start": "1400080",
    "end": "1405120"
  },
  {
    "text": "either durations or numbers you see try in there because durations start with numbers this is one of the strengths and",
    "start": "1405120",
    "end": "1411480"
  },
  {
    "text": "weaknesses i guess of using Combinator based parsing you have to be aware of some of those ambiguities but you get",
    "start": "1411480",
    "end": "1417540"
  },
  {
    "text": "all of the usual programming techniques techniques to resolve them factor is a",
    "start": "1417540",
    "end": "1423650"
  },
  {
    "text": "historically kind of inherited name for this paz' it's called factor because",
    "start": "1423650",
    "end": "1428690"
  },
  {
    "text": "it's going to be the left or right operand of a multiplication or a",
    "start": "1428690",
    "end": "1433980"
  },
  {
    "text": "division and because of the way that operator precent precedence works and",
    "start": "1433980",
    "end": "1440640"
  },
  {
    "text": "binding then on the left hand side or the right hand side of one of these will",
    "start": "1440640",
    "end": "1446160"
  },
  {
    "text": "always have a parenthesized expression because if it's going to be say in",
    "start": "1446160",
    "end": "1451230"
  },
  {
    "text": "addition on the left will have two parenthesize it before it's going to be an operand of multiplication or it would",
    "start": "1451230",
    "end": "1458700"
  },
  {
    "text": "just be the the very low-level literal values term is pretty similar it's going to be",
    "start": "1458700",
    "end": "1465070"
  },
  {
    "text": "left to right hand side of an addition or a subtraction and it uses a helper function called pass chain which goes",
    "start": "1465070",
    "end": "1472480"
  },
  {
    "text": "and applies well it's a way of creating operator precedence passes without",
    "start": "1472480",
    "end": "1477910"
  },
  {
    "text": "getting stuck in things like left recursion which are problems with this technique and right up the top we've got",
    "start": "1477910",
    "end": "1483760"
  },
  {
    "text": "expression which adds the addition or subtraction operators in you can see",
    "start": "1483760",
    "end": "1489880"
  },
  {
    "text": "that you've you that you've got the the operator and then the the operand and",
    "start": "1489880",
    "end": "1495100"
  },
  {
    "text": "the binary expression dot create will construct your tree node but I know what",
    "start": "1495100",
    "end": "1501910"
  },
  {
    "text": "you're thinking right now right I've just told you to go and draw the rest of the owl yeah this is the other little",
    "start": "1501910",
    "end": "1510400"
  },
  {
    "text": "secret and if you put on x-ray goggles right you're the language that you're",
    "start": "1510400",
    "end": "1517360"
  },
  {
    "text": "setting out to pars in whatever your domain of interest is it's gonna share a lot with just just about a million other",
    "start": "1517360",
    "end": "1524260"
  },
  {
    "text": "languages of different kinds you see whether or not the the operator operands",
    "start": "1524260",
    "end": "1532510"
  },
  {
    "text": "of a plus B are columns in the sequel query or elements in a JSON document the",
    "start": "1532510",
    "end": "1538480"
  },
  {
    "text": "a plus B part of that syntax is the same it's what you do it's how the model works afterwards that um that is really",
    "start": "1538480",
    "end": "1545770"
  },
  {
    "text": "unique to your language unless you're doing something really crazy and in which case I could probably kind of help you but once you realize this you see",
    "start": "1545770",
    "end": "1553900"
  },
  {
    "text": "the C with this sort of extra x-ray vision that you can that libraries like",
    "start": "1553900",
    "end": "1559960"
  },
  {
    "text": "super power come with all kinds of examples there are expression parses out there that that showed this kind of",
    "start": "1559960",
    "end": "1566800"
  },
  {
    "text": "operator precedence structure if you were going to have strings or numbers in",
    "start": "1566800",
    "end": "1572380"
  },
  {
    "text": "your language then chances are very good that your your strings will be sequel strings or JavaScript strings or",
    "start": "1572380",
    "end": "1577420"
  },
  {
    "text": "something else that you can adapt from elsewhere and the same as there's other",
    "start": "1577420",
    "end": "1584020"
  },
  {
    "text": "classes of languages like templates where these things also where these things are also very common and so I",
    "start": "1584020",
    "end": "1591220"
  },
  {
    "text": "think you probably came expecting a computer science talk and I might have just told you instead to go and copy and",
    "start": "1591220",
    "end": "1597870"
  },
  {
    "text": "paste but in fact that's a that that's one of the real beauties I think of of using libraries like this to get started",
    "start": "1597870",
    "end": "1605820"
  },
  {
    "text": "on a passing project you can go find an example of how the grammar that you want to pass is passed elsewhere and",
    "start": "1605820",
    "end": "1612390"
  },
  {
    "text": "generally with a with a few shifts around for to match your own your own",
    "start": "1612390",
    "end": "1619799"
  },
  {
    "text": "target language get started without really having to go back and reinvent the wheel because I probably couldn't sit down and just on the first shot give",
    "start": "1619799",
    "end": "1626400"
  },
  {
    "text": "you the code in the last slide without a without at least a couple of edit and compile cycles so just to look at one",
    "start": "1626400",
    "end": "1636780"
  },
  {
    "text": "final little bit of detailed code to see how we're going to call the phone call these functions source is the ice I",
    "start": "1636780",
    "end": "1643770"
  },
  {
    "text": "almost promised that the last slide was the last slide of code but a source is a",
    "start": "1643770",
    "end": "1650030"
  },
  {
    "text": "parcel that just asserts that whatever else we've passed is at the end of its input because it wouldn't be it wouldn't",
    "start": "1650030",
    "end": "1655500"
  },
  {
    "text": "be a great experience if you type in 1 plus 2 ABC and you get 1 plus 2 as your",
    "start": "1655500",
    "end": "1660780"
  },
  {
    "text": "expression tree back and the ABC is ignored we want to make sure that whatever we've passed is going right up",
    "start": "1660780",
    "end": "1666360"
  },
  {
    "text": "to the end of the string so that's what source does and then try pass which superpower also provides I've kind of",
    "start": "1666360",
    "end": "1672630"
  },
  {
    "text": "expanded here to show you how we just construct a text span over the input pass it into that sauce parser and then",
    "start": "1672630",
    "end": "1679260"
  },
  {
    "text": "we can get an error result or a or a value out so let's see how it behaves that's really all there is to the",
    "start": "1679260",
    "end": "1685620"
  },
  {
    "text": "language that we've just been that we've just been playing with so you can see",
    "start": "1685620",
    "end": "1691380"
  },
  {
    "text": "that it does work as you did earlier",
    "start": "1691380",
    "end": "1697520"
  },
  {
    "text": "it also can handle some fairly so some",
    "start": "1697520",
    "end": "1704549"
  },
  {
    "text": "fairly awkward situations like for example if we leave an operand off the",
    "start": "1704549",
    "end": "1709710"
  },
  {
    "text": "operator then we get an error message that makes some kind of sense you know we expected past that first time we expected a left",
    "start": "1709710",
    "end": "1717419"
  },
  {
    "text": "paren or something else if we push it a bit further say you can",
    "start": "1717419",
    "end": "1726390"
  },
  {
    "text": "see things start to get a little bit awkward like unexpected Jay is a bit strange if you were a developer and you",
    "start": "1726390",
    "end": "1734640"
  },
  {
    "text": "were trying to interpret these error messages then you would probably be fine but if you're at a language that has to",
    "start": "1734640",
    "end": "1740610"
  },
  {
    "text": "be consumed by other non developer human beings or even if you really have to deal with it every you know every day",
    "start": "1740610",
    "end": "1747179"
  },
  {
    "text": "you don't really want to go hunting for an unexpected five in you know a hundred",
    "start": "1747179",
    "end": "1752340"
  },
  {
    "text": "lines of of cryptic text so if you like to properly to give you a proper",
    "start": "1752340",
    "end": "1759470"
  },
  {
    "text": "appreciation for how much work is going to be required if you do want to add these things to your your own projects",
    "start": "1759470",
    "end": "1766049"
  },
  {
    "text": "we'll have a look at another example oh no that's control five and not control f5 we have a look at another",
    "start": "1766049",
    "end": "1772710"
  },
  {
    "text": "example hopefully this one behaves slightly differently hang on I'm sorry",
    "start": "1772710",
    "end": "1783760"
  },
  {
    "text": "let me just make sure that I'm Charlie on the right branch",
    "start": "1783760",
    "end": "1788160"
  },
  {
    "text": "just one small detail a",
    "start": "1802530",
    "end": "1806059"
  },
  {
    "text": "thank you all right but now we're in business you can just mentally edit out",
    "start": "1813360",
    "end": "1820210"
  },
  {
    "text": "that little glitch there 45 hours plus",
    "start": "1820210",
    "end": "1825850"
  },
  {
    "text": "nothing yeah okay and this is a little bit better we've got something similar but we say we've got an unexpected left",
    "start": "1825850",
    "end": "1832600"
  },
  {
    "text": "paren durational number rather than then assign or digit 54 J gives us invalid",
    "start": "1832600",
    "end": "1842080"
  },
  {
    "text": "duration we unexpected J expected D H M s M or s and I think that that's the",
    "start": "1842080",
    "end": "1850660"
  },
  {
    "text": "that when we're talking about these things as invalid duration that gives a little bit more of a clue as to what we",
    "start": "1850660",
    "end": "1856990"
  },
  {
    "text": "should be looking for and here when we have that that final nasty example we have an unexpected number 54 which which",
    "start": "1856990",
    "end": "1864250"
  },
  {
    "text": "if someone is trying to build an expression to match whatever they want to compute that is gonna make a bit more sense to them than the unexpected five",
    "start": "1864250",
    "end": "1871500"
  },
  {
    "text": "and the tactic that this that this example is using is called token driven pausing now soaking driven pausing okay",
    "start": "1871500",
    "end": "1883530"
  },
  {
    "text": "okay token driven driven pausing is very very similar to what we've just been looking at but well our character parser",
    "start": "1883530",
    "end": "1890650"
  },
  {
    "text": "is just looking at the stream of input one character at a time a token based parser uses a pre-processing step to go",
    "start": "1890650",
    "end": "1898180"
  },
  {
    "text": "and find the chunks of that input that logically belong together like the parameters obviously still something",
    "start": "1898180",
    "end": "1904030"
  },
  {
    "text": "that stands on its own but you can see instead of one and H being separate the tokens that we've got in green on that",
    "start": "1904030",
    "end": "1909970"
  },
  {
    "text": "top line group up one one H and 10 M into individual values and the tokenizer",
    "start": "1909970",
    "end": "1916390"
  },
  {
    "text": "is also the place where we can strip out white space so that we don't need to pepper our parser with things like token",
    "start": "1916390",
    "end": "1922330"
  },
  {
    "text": "that we were seen in the earlier examples the other thing about tokens is",
    "start": "1922330",
    "end": "1927370"
  },
  {
    "text": "that they allow a little bit more metadata to be added to them they're not just a chunk of text but they're a chunk",
    "start": "1927370",
    "end": "1933820"
  },
  {
    "text": "of text with a label and in this case we've got a left paren and a duration and a minus and that means that when we",
    "start": "1933820",
    "end": "1941440"
  },
  {
    "text": "write the going to write the corresponding posit there at those the level of those elements and not",
    "start": "1941440",
    "end": "1946980"
  },
  {
    "text": "worry as much about character level ambiguities those kinds of things but once we do have this stream of tokens",
    "start": "1946980",
    "end": "1953490"
  },
  {
    "text": "that are all lined up sequentially then we can just use a usual technique and chomp them up with a parser",
    "start": "1953490",
    "end": "1959240"
  },
  {
    "text": "so let's have a look at the time calculator and how its tokens look you see that we've got an enum that declares",
    "start": "1959240",
    "end": "1966420"
  },
  {
    "text": "the kinds of tokens that the language exposes we've got numbers and durations just like we just like we did before the",
    "start": "1966420",
    "end": "1974550"
  },
  {
    "text": "token attribute adds a little bit more declarative information that can drive our error messages to produce the stret",
    "start": "1974550",
    "end": "1983580"
  },
  {
    "text": "the stream or list of tokens from the input though we use the type we use a tokenizer which can just be written by",
    "start": "1983580",
    "end": "1989220"
  },
  {
    "text": "hand you could write up a function that worked over the input character by character and and just yielded up tokens",
    "start": "1989220",
    "end": "1995340"
  },
  {
    "text": "as they were completed and that's that's not a difficult process and it's also something that regular expressions can",
    "start": "1995340",
    "end": "2001820"
  },
  {
    "text": "be used for because you're only going from list a list you're not trying to go from list to tree but they are tedious",
    "start": "2001820",
    "end": "2008210"
  },
  {
    "text": "to write and so super power comes with a tokenizer builder and it will use the",
    "start": "2008210",
    "end": "2013580"
  },
  {
    "text": "same kinds of passes that we've just looked at for howling text but use those to match the kinds of tokens that are in",
    "start": "2013580",
    "end": "2019310"
  },
  {
    "text": "the language and so we look for A+ and we end up emitting a plus token that has",
    "start": "2019310",
    "end": "2025550"
  },
  {
    "text": "that piece of that piece of text in it we're working our way through the operators we get to duration there and",
    "start": "2025550",
    "end": "2031370"
  },
  {
    "text": "that's the duration paths that we were just building a moment ago and it's the text parser that identifies those",
    "start": "2031370",
    "end": "2036590"
  },
  {
    "text": "alliteration expressions we can use that as a pinch it has this funky required",
    "start": "2036590",
    "end": "2043220"
  },
  {
    "text": "two limiters argument on the end because of this input down the bottom left-hand side so 4 5 d6 is obviously well to me",
    "start": "2043220",
    "end": "2052460"
  },
  {
    "text": "it just looks syntactically wrong you might your language might actually regard that as 45 days 6 but I don't",
    "start": "2052460",
    "end": "2059360"
  },
  {
    "text": "really know what kind of language that that what kind of concept that would explain and so requires limiters just",
    "start": "2059360",
    "end": "2065360"
  },
  {
    "text": "says that there has to be some other whitespace or another another token separating those ones that are that in",
    "start": "2065360",
    "end": "2072290"
  },
  {
    "text": "fact like that ignore spend on whites based on the bottom is the is the way to strip out",
    "start": "2072290",
    "end": "2078950"
  },
  {
    "text": "whitespace and we'll soon see that it can actually do a little bit more for us than that so how do the passes that we",
    "start": "2078950",
    "end": "2085340"
  },
  {
    "text": "wrote so far change we can take number and we get roughly the same structure but instead of trying to initially pass",
    "start": "2085340",
    "end": "2091398"
  },
  {
    "text": "the decimal impart of them of number we use token equal to expression token",
    "start": "2091399",
    "end": "2096980"
  },
  {
    "text": "number and then we can apply one of our text passes to convert that actually into a decimal value value or a double",
    "start": "2096980",
    "end": "2104030"
  },
  {
    "text": "value I should say we do that rather than use something like double dot powers because all the error reporting",
    "start": "2104030",
    "end": "2110990"
  },
  {
    "text": "is integrated and you remember that the the goal of superpowers to be an end user kind of equality error reporting",
    "start": "2110990",
    "end": "2116780"
  },
  {
    "text": "experience so because these two layers of the pausing process are kind of interlinked this text part like numerix",
    "start": "2116780",
    "end": "2123830"
  },
  {
    "text": "decimal double that's how we end up with things like invalid duration and it can point out what part of the duration is",
    "start": "2123830",
    "end": "2129080"
  },
  {
    "text": "wrong those sorts of things instead of just blowing up the way that the built-in dotnet type conversions would",
    "start": "2129080",
    "end": "2136750"
  },
  {
    "text": "factor is probably a better representation of what the impact of changing to a token driven process is",
    "start": "2137530",
    "end": "2143980"
  },
  {
    "text": "factor actually looks identical we've changed the initial kind of search for a",
    "start": "2143980",
    "end": "2149630"
  },
  {
    "text": "left paren to being a left paren token but otherwise the structure of this is the same and it's the same because it",
    "start": "2149630",
    "end": "2157580"
  },
  {
    "text": "really does the same thing it could be more it could be more confusing than enlightening but if you imagine that you",
    "start": "2157580",
    "end": "2165020"
  },
  {
    "text": "could define your own custom Unicode alphabet like it could be that it could be an infinite size and in it instead of",
    "start": "2165020",
    "end": "2172490"
  },
  {
    "text": "like a and B and C you have the the individual values that could appear as as tokens in your language like forty",
    "start": "2172490",
    "end": "2179540"
  },
  {
    "text": "five and three days then really we're just kind of writing a text parser over that giant infinite unicode alphabet",
    "start": "2179540",
    "end": "2186260"
  },
  {
    "text": "it's just the same except unfortunately we have to introduce these other kind of concepts because there's obviously no",
    "start": "2186260",
    "end": "2192140"
  },
  {
    "text": "such thing that we can do inside a computer but anyway that's a bit of a digression",
    "start": "2192140",
    "end": "2198400"
  },
  {
    "text": "so the duration calculate oh sorry about",
    "start": "2200019",
    "end": "2206839"
  },
  {
    "text": "me the duration calculated that we're looking right at right now it's based on",
    "start": "2206839",
    "end": "2214930"
  },
  {
    "text": "this tokenizer driven approach you see that if we decide let's just run it",
    "start": "2214930",
    "end": "2220970"
  },
  {
    "text": "again actually if we decide that we want to say one hour - ten minutes and we",
    "start": "2220970",
    "end": "2229609"
  },
  {
    "text": "maybe insert a shell style comment like this is how long we have you see that",
    "start": "2229609",
    "end": "2236180"
  },
  {
    "text": "that's that's obviously not able to be passed by the parts that we've got",
    "start": "2236180",
    "end": "2241930"
  },
  {
    "text": "jumping into the tokenizer though we ignore white space we can also for",
    "start": "2241930",
    "end": "2247190"
  },
  {
    "text": "example and trivially ignore comment shell style if we run this did I not",
    "start": "2247190",
    "end": "2259190"
  },
  {
    "text": "close it I did not okay if we run this one our total time you'll see that we get one",
    "start": "2259190",
    "end": "2267710"
  },
  {
    "text": "hour to do this with a character-driven",
    "start": "2267710",
    "end": "2272869"
  },
  {
    "text": "positive is not impossible but it's also is much less pleasant to work with especially because of the grammatical",
    "start": "2272869",
    "end": "2278029"
  },
  {
    "text": "level kind of ambiguities if we change our mind and we want to use C style comments then that's just as simple as",
    "start": "2278029",
    "end": "2283670"
  },
  {
    "text": "one hour plus I",
    "start": "2283670",
    "end": "2288190"
  },
  {
    "text": "really do I not know see what's going on",
    "start": "2294700",
    "end": "2301000"
  },
  {
    "text": "I'm sure that there's Boston yeah that's let's see you know what it",
    "start": "2305730",
    "end": "2313600"
  },
  {
    "text": "is of course it's the ambiguity that we have to deal with where we're pausing the slash as a division operator before",
    "start": "2313600",
    "end": "2320800"
  },
  {
    "text": "we try to ignore that text and so you get kind of like a real live feel for",
    "start": "2320800",
    "end": "2327430"
  },
  {
    "text": "what it is like to write a parser in this style now it's not all entirely",
    "start": "2327430",
    "end": "2332830"
  },
  {
    "text": "smooth sailing but it's also really explicable in programming terms we're not talking about oh that's not",
    "start": "2332830",
    "end": "2339310"
  },
  {
    "text": "compatible with the GL our parser or I have to use lalr or I have to use you know something else there it's really",
    "start": "2339310",
    "end": "2344770"
  },
  {
    "text": "just a piece of code that's executing top to bottom and when we have when we encounter bugs in parsers we can we can",
    "start": "2344770",
    "end": "2351160"
  },
  {
    "text": "use the typical techniques that we've got for debugging you can insert breakpoints in them I mean this is if you've ever had to try",
    "start": "2351160",
    "end": "2357760"
  },
  {
    "text": "to deal with a positive that some that's generated from a workbench then that's almost a revolutionary kind of concept",
    "start": "2357760",
    "end": "2363640"
  },
  {
    "text": "have meaningful breakpoints so we'll go one step further because I love this",
    "start": "2363640",
    "end": "2371080"
  },
  {
    "text": "little expression language and I need it I I almost need it in my day to day life I wish that my calendar understood it",
    "start": "2371080",
    "end": "2376690"
  },
  {
    "text": "because modulo arithmetic is just not my thing so let's go a bit further and say",
    "start": "2376690",
    "end": "2384940"
  },
  {
    "text": "if we want to say what's the title it's gonna be the time now plus seven days",
    "start": "2384940",
    "end": "2391050"
  },
  {
    "text": "now the now keyword obviously doesn't exist in our language yet but if we have",
    "start": "2391050",
    "end": "2399340"
  },
  {
    "text": "a if we have a token god let's let's keep things very very simple and direct",
    "start": "2399340",
    "end": "2404410"
  },
  {
    "text": "and we'll call the token now I could I",
    "start": "2404410",
    "end": "2409630"
  },
  {
    "text": "could type yesterday I promise and the category of this one which is going to",
    "start": "2409630",
    "end": "2415150"
  },
  {
    "text": "drive some nice error reporting is going to be keyword and I think that",
    "start": "2415150",
    "end": "2423540"
  },
  {
    "text": "before we get anything useful out of that we might need to match and we match a span equal to now and that will",
    "start": "2423620",
    "end": "2433520"
  },
  {
    "text": "produce expression token but now I'm",
    "start": "2433520",
    "end": "2438860"
  },
  {
    "text": "giving you a - I've never had t-shirts take his spot bugs before I f5 by the way I think probably a good strategy to",
    "start": "2438860",
    "end": "2445490"
  },
  {
    "text": "lighten up my suitcase heading back home so now - seven hours is still going to fare like I guess but instead of failing",
    "start": "2445490",
    "end": "2454540"
  },
  {
    "text": "right at the outset we've got a little bit further along we've got unexpected key word now and we're expecting either",
    "start": "2454540",
    "end": "2460580"
  },
  {
    "text": "a duration or a number so obviously the tokenizer has picked up that key word but unfortunately the",
    "start": "2460580",
    "end": "2466700"
  },
  {
    "text": "parson truly know what to do with it so in the passer that I think we could",
    "start": "2466700",
    "end": "2475910"
  },
  {
    "text": "probably safely say that a token a sorry a now a now token is going to be a",
    "start": "2475910",
    "end": "2483170"
  },
  {
    "text": "literal let's just say now and that's",
    "start": "2483170",
    "end": "2490910"
  },
  {
    "text": "going to be a public static expression",
    "start": "2490910",
    "end": "2496060"
  },
  {
    "text": "sorry so again this father of expression token",
    "start": "2496060",
    "end": "2503920"
  },
  {
    "text": "and expression now and that's going to",
    "start": "2507099",
    "end": "2513099"
  },
  {
    "text": "just be declared if I I have to be consistent you know I'll Drive everyone nuts but it's got to be a property I",
    "start": "2513099",
    "end": "2521319"
  },
  {
    "text": "don't know why and that was going to be token equal to now",
    "start": "2521319",
    "end": "2530460"
  },
  {
    "text": "and that's going to have a value of new now expression say and now expression",
    "start": "2537430",
    "end": "2545320"
  },
  {
    "text": "obviously doesn't exist might be too fussy about we put that type otherwise we will be here all day I love that",
    "start": "2545320",
    "end": "2551200"
  },
  {
    "text": "Rochelle picks up that that's going to be an expression and that's probably enough to get us a little bit further",
    "start": "2551200",
    "end": "2557080"
  },
  {
    "text": "down the track if we put the semicolon them that no one spotted and sorry",
    "start": "2557080",
    "end": "2567630"
  },
  {
    "text": "Kovarian this is just such a lovely thing when you have it so now we've",
    "start": "2569670",
    "end": "2576460"
  },
  {
    "text": "gotten one step further down the path we've ended up with the now expression embedded in that expression tree where",
    "start": "2576460",
    "end": "2583270"
  },
  {
    "text": "we have a now node on the left and we've got a - an operator a binary operator",
    "start": "2583270",
    "end": "2589330"
  },
  {
    "text": "and then we've got the seven-day value on the right when we end up back down in our expression evaluator we're failing",
    "start": "2589330",
    "end": "2596080"
  },
  {
    "text": "because we don't have an item in a switch statement that is going to give",
    "start": "2596080",
    "end": "2602440"
  },
  {
    "text": "us that value for a now expression and",
    "start": "2602440",
    "end": "2607600"
  },
  {
    "text": "it looks very much like all the other ones we can say you know evaluator we have a expression no that's a now",
    "start": "2607600",
    "end": "2617890"
  },
  {
    "text": "expression now and the result is going to be a new date time result",
    "start": "2617890",
    "end": "2629910"
  },
  {
    "text": "I'm not now I know I know everybody thinks we should be using UTC for sure",
    "start": "2631830",
    "end": "2638880"
  },
  {
    "text": "we've got bogies coming as soon as someone has to change the time zone time",
    "start": "2638880",
    "end": "2647200"
  },
  {
    "text": "zones are way beyond I will call that value so that the property gets a decent",
    "start": "2647200",
    "end": "2652660"
  },
  {
    "text": "name and we went through and result also",
    "start": "2652660",
    "end": "2659400"
  },
  {
    "text": "forces us to implement to string so we just return value to string and we do it",
    "start": "2659400",
    "end": "2666100"
  },
  {
    "text": "in ISO format because I saw 8 601 or",
    "start": "2666100",
    "end": "2671410"
  },
  {
    "text": "bust right okay how do we go now - seven days okay so the value seven days can't",
    "start": "2671410",
    "end": "2680500"
  },
  {
    "text": "be subtracted from well that's the date today it was same and we're in the earth only a short note we're in the UTC plus",
    "start": "2680500",
    "end": "2688480"
  },
  {
    "text": "ten uh-huh so you can see the bug already so that's",
    "start": "2688480",
    "end": "2693700"
  },
  {
    "text": "happening because it because in the evaluator once we've actually matched that binary expression we try to just",
    "start": "2693700",
    "end": "2699970"
  },
  {
    "text": "dispatch the subtraction operation and this is the hopefully the last piece",
    "start": "2699970",
    "end": "2704980"
  },
  {
    "text": "before we will get a meaningful result here so if the left is a date time",
    "start": "2704980",
    "end": "2710610"
  },
  {
    "text": "result I say LD and right is a duration",
    "start": "2710610",
    "end": "2718450"
  },
  {
    "text": "result Rd then we'll return a new and it",
    "start": "2718450",
    "end": "2727030"
  },
  {
    "text": "has to be a date time result and the left value is going to be the date time",
    "start": "2727030",
    "end": "2732960"
  },
  {
    "text": "the right value is going to be a timespan and amazingly and miraculously",
    "start": "2732960",
    "end": "2739750"
  },
  {
    "text": "done that can actually do those nice little calculations for us and finally yeah - seven days should make some sense",
    "start": "2739750",
    "end": "2748860"
  },
  {
    "text": "if you were in Australia right now then seven days ago that is what the time",
    "start": "2748860",
    "end": "2754240"
  },
  {
    "text": "would be and seven days before that just to show that you know we're really gone all the way into the language and not",
    "start": "2754240",
    "end": "2762730"
  },
  {
    "text": "just kind of paper this on top we can make it more interesting expression and say that 14 days ago that was the date",
    "start": "2762730",
    "end": "2770170"
  },
  {
    "text": "so the nice thing about about Paz is written in the style is that they are",
    "start": "2770170",
    "end": "2775790"
  },
  {
    "text": "very modular and extensible and having features is often very much a recipe driven kind of a process back to that",
    "start": "2775790",
    "end": "2787099"
  },
  {
    "text": "cut and paste okay so we've looked at",
    "start": "2787099",
    "end": "2792890"
  },
  {
    "text": "text phasers which have a really low I guess barrier to understanding they're",
    "start": "2792890",
    "end": "2799310"
  },
  {
    "text": "they just work on one level but we've looked at token passes and despite being",
    "start": "2799310",
    "end": "2804800"
  },
  {
    "text": "a little bit more complex they let us deal with a little a little bit more complex grammar in a simple way so",
    "start": "2804800",
    "end": "2810170"
  },
  {
    "text": "there's some pros and cons here I think that the the main decision that you would need to make if you were choosing between text and token based parsing",
    "start": "2810170",
    "end": "2817250"
  },
  {
    "text": "would simply be driven by the error message um the error messages if there's not any other pushing requirement that's",
    "start": "2817250",
    "end": "2822380"
  },
  {
    "text": "going to drive you towards one so what what we've learned today is that we do all of little languages right like if we",
    "start": "2822380",
    "end": "2829609"
  },
  {
    "text": "took a survey at the door what's your favorite technology I don't know if they",
    "start": "2829609",
    "end": "2834650"
  },
  {
    "text": "would I doubt that they would probably be responding in the room who would name something that didn't involve some kind",
    "start": "2834650",
    "end": "2840170"
  },
  {
    "text": "of little programming language so we really love writing for it we love we love working with programming languages",
    "start": "2840170",
    "end": "2846020"
  },
  {
    "text": "and domain-specific languages they are just code and so their programs that of",
    "start": "2846020",
    "end": "2851420"
  },
  {
    "text": "course we can write so so you can you can write programs and you can write pauses even pretty good ones if you have",
    "start": "2851420",
    "end": "2858050"
  },
  {
    "text": "prepared to spend a bit of time digging around in the details so thanks very",
    "start": "2858050",
    "end": "2863900"
  },
  {
    "text": "long the examples are in a repository on github called T calc and that has a",
    "start": "2863900",
    "end": "2869750"
  },
  {
    "text": "branch for the text as a variant and a branch for the token passive variant you",
    "start": "2869750",
    "end": "2875180"
  },
  {
    "text": "can sort of work your way through both of those and see all of the the ugly details that we looked at today I was",
    "start": "2875180",
    "end": "2882080"
  },
  {
    "text": "talking about superpower superpower is of course focused on that error handling",
    "start": "2882080",
    "end": "2888980"
  },
  {
    "text": "or the error reporting case Soraka is another positive Combinator library for.net",
    "start": "2888980",
    "end": "2894320"
  },
  {
    "text": "which is a little bit older as this is another attempt of mine that's ever is earlier than superpower and it's just",
    "start": "2894320",
    "end": "2900979"
  },
  {
    "text": "a purely a text driven thing it's probably a bit more learn about protocol and there's vastly more examples",
    "start": "2900979",
    "end": "2906979"
  },
  {
    "text": "available for it and it shows up in funny places like like in the credits",
    "start": "2906979",
    "end": "2913039"
  },
  {
    "text": "for eShop or I think and and lots of other spots if performance is your thing",
    "start": "2913039",
    "end": "2920150"
  },
  {
    "text": "that are perhaps and maybe you might be pausing something that's more akin to a serialization format or a data language",
    "start": "2920150",
    "end": "2926119"
  },
  {
    "text": "there's something that users are going to interactively type then one of the developer developers at Stack Overflow",
    "start": "2926119",
    "end": "2931130"
  },
  {
    "text": "benhodgson published a library called pigeon which is really an amazing very",
    "start": "2931130",
    "end": "2936319"
  },
  {
    "text": "very quick implementation of a text driven past parser Combinator librarian so if performance is like the number one",
    "start": "2936319",
    "end": "2943519"
  },
  {
    "text": "requirement on your list then you should definitely check that out so we've got",
    "start": "2943519",
    "end": "2949069"
  },
  {
    "text": "time for a couple of questions I think that we must be getting pretty close to I was running out if anybody would like",
    "start": "2949069",
    "end": "2956209"
  },
  {
    "text": "to put some questions and if everybody has a question that I'd like to put forward now we've got some time now it's",
    "start": "2956209",
    "end": "2961940"
  },
  {
    "text": "actually almost precisely 10 minutes which is an amazing like pute with that",
    "start": "2961940",
    "end": "2967160"
  },
  {
    "text": "little calculator there's no way we could have landed right on this yeah sorry over there",
    "start": "2967160",
    "end": "2973690"
  },
  {
    "text": "okay so the question was like what was what was the difference between I guess",
    "start": "2990060",
    "end": "2995140"
  },
  {
    "text": "the tokenization part of parsing and the and the expression parsing part you met",
    "start": "2995140",
    "end": "3000540"
  },
  {
    "text": "you mean with the rules like expression and alt and L paren and all those things in the factor in term yeah so if you",
    "start": "3000540",
    "end": "3012030"
  },
  {
    "text": "were tokenizing something like an if expression then you would end up with the tokens that correspond to things",
    "start": "3012030",
    "end": "3017820"
  },
  {
    "text": "like the if keyword and the parens involved in it if you were and so then",
    "start": "3017820",
    "end": "3023250"
  },
  {
    "text": "the resulting power would just operate on just operate on those if you said the",
    "start": "3023250",
    "end": "3030270"
  },
  {
    "text": "part the the tokenizer part would really just produce those tokens and then the parsing part would still need to build",
    "start": "3030270",
    "end": "3035730"
  },
  {
    "text": "that up into some kind of tree I'm not under percent sure I completely understand you but we might I might need to we can follow up on that one after",
    "start": "3035730",
    "end": "3042450"
  },
  {
    "text": "the talk if you'd like to dig into it in more detail yeah absolutely yeah I'm",
    "start": "3042450",
    "end": "3050550"
  },
  {
    "text": "sorry in terms of the the nodes in your expression in your abstract syntax tree you might end up with nodes that I like",
    "start": "3050550",
    "end": "3056730"
  },
  {
    "text": "an if expression and there would be a condition and there would be a body yeah building like inventing trees to",
    "start": "3056730",
    "end": "3062580"
  },
  {
    "text": "represent languages can be lots of fun and there's also lots of different ways to slice and dice them but I think that",
    "start": "3062580",
    "end": "3069420"
  },
  {
    "text": "that's the that's the enjoyable creative part of the process so it's really more than one way to have to tackle that",
    "start": "3069420",
    "end": "3075380"
  },
  {
    "text": "anybody else have anything like to put forward okay okay so thanks very much",
    "start": "3075380",
    "end": "3081000"
  },
  {
    "text": "for coming along I really appreciate you coming by I hope you enjoy the rest of the conference and I'll see you all soon",
    "start": "3081000",
    "end": "3086750"
  },
  {
    "text": "[Applause]",
    "start": "3086750",
    "end": "3091619"
  }
]