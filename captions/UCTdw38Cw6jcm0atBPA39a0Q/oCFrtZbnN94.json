[
  {
    "text": "okay let's get started welcome to this session about developing microservices with dapper",
    "start": "8160",
    "end": "14960"
  },
  {
    "text": "it's great to be here my name is jocobian i work at a company called active solution back in stockholm sweden",
    "start": "14960",
    "end": "21920"
  },
  {
    "text": "uh i'm an azure mvp i have a lot of interest in not just cloud architecture also devops",
    "start": "21920",
    "end": "28560"
  },
  {
    "text": "i've written a few books on the topic which is nothing that i really recommend uh unless you're interested in wasting a",
    "start": "28560",
    "end": "34079"
  },
  {
    "text": "lot of time without making any real money but it was a good experience anyway and uh it's great to be back here in oslo",
    "start": "34079",
    "end": "40640"
  },
  {
    "text": "actually i used to work for a norwegian company for for many years so i have run into a few old colleagues and friends",
    "start": "40640",
    "end": "46719"
  },
  {
    "text": "here so so really nice to be here and so this talk is about dapper which",
    "start": "46719",
    "end": "53680"
  },
  {
    "text": "is a framework for kind of developing microservices so just to set the context here you know",
    "start": "53680",
    "end": "59280"
  },
  {
    "text": "what is hard about microservices and actually there's a lot of things that is hard with",
    "start": "59280",
    "end": "64400"
  },
  {
    "text": "working or developing with microservices but if you think about the kind of the",
    "start": "64400",
    "end": "69680"
  },
  {
    "text": "the core idea behind microservices where you take your system you break them down into smaller pieces",
    "start": "69680",
    "end": "75680"
  },
  {
    "text": "where each service could be potentially developed by their own team",
    "start": "75680",
    "end": "81200"
  },
  {
    "text": "and ideally each team should be able to select their own technology stack their own type of storage you know the",
    "start": "81200",
    "end": "87840"
  },
  {
    "text": "technology that really fits that service um and if you do this right that could really give you a lot of benefits",
    "start": "87840",
    "end": "94079"
  },
  {
    "text": "and really create agile teams we can work at speed and you know develop and deploy in their service without",
    "start": "94079",
    "end": "100560"
  },
  {
    "text": "worrying about the rest of the system but the kind of the flip side of that is that now you have instead of have like",
    "start": "100560",
    "end": "106240"
  },
  {
    "text": "this big uh homogeneous system you have a lot of smaller services where each",
    "start": "106240",
    "end": "111920"
  },
  {
    "text": "service have like a different technology stack different platform different way of you know building",
    "start": "111920",
    "end": "117600"
  },
  {
    "text": "uh packaging deploying that service so it's a lot of things you need to build and you know since this is now a",
    "start": "117600",
    "end": "123520"
  },
  {
    "text": "distributed system you need to think about things like how do you do tracing like distributed tracing how do you do",
    "start": "123520",
    "end": "129759"
  },
  {
    "text": "things like service discovery uh resilience what do you do when you when your service call fails and and so on",
    "start": "129759",
    "end": "136720"
  },
  {
    "text": "and these are things that it's like cross-cutting concerns it's not really tied to your your business domain right this is technical things that you just",
    "start": "136720",
    "end": "143120"
  },
  {
    "text": "need to solve and it's not that this is super hard or super complicated",
    "start": "143120",
    "end": "148319"
  },
  {
    "text": "uh but you need to do it and you need to do it in all these services and again this could be now",
    "start": "148319",
    "end": "153599"
  },
  {
    "text": "one service could be developed in dot net core another one could be java the third could be python right different",
    "start": "153599",
    "end": "158640"
  },
  {
    "text": "type of storage so so a lot of things to to worry about and this is really the the core idea",
    "start": "158640",
    "end": "164160"
  },
  {
    "text": "about behind that but to try to to make this easier for you try to codify",
    "start": "164160",
    "end": "169599"
  },
  {
    "text": "best practices within this uh this area so that burst stands for distributed application runtime",
    "start": "169599",
    "end": "175599"
  },
  {
    "text": "so this is an open source project um you can read all about it at the dapper i o",
    "start": "175599",
    "end": "181760"
  },
  {
    "text": "uh and they had they went like generally available for three or four months ago so it's it's production support for for",
    "start": "181760",
    "end": "188159"
  },
  {
    "text": "this runtime and the core goals behind the upper is to kind of build these best practices uh",
    "start": "188159",
    "end": "195519"
  },
  {
    "text": "building blocks that you can use so again so you don't have to write this code",
    "start": "195519",
    "end": "201280"
  },
  {
    "text": "to kind of implement all the things that you need to implement and it's not tied to any particular language or framework",
    "start": "201280",
    "end": "206799"
  },
  {
    "text": "today i will show you a demo in the dotted core but supports really any kind of language that you want to use which",
    "start": "206799",
    "end": "212560"
  },
  {
    "text": "is again really core idea with microservices you shouldn't be tied into a specific technology stack",
    "start": "212560",
    "end": "219680"
  },
  {
    "text": "um and it's a community driven so it's a completely open source you can join their their weekly standups if you want",
    "start": "219680",
    "end": "225360"
  },
  {
    "text": "to and kind of affect the the the future of this project uh and it's not also it's also agnostic",
    "start": "225360",
    "end": "232000"
  },
  {
    "text": "in terms of where you want to run this so you can run this on premise on your your local machine on your servers",
    "start": "232000",
    "end": "237920"
  },
  {
    "text": "uh on really on any cloud uh so so kubernetes is one of the kind of",
    "start": "237920",
    "end": "243519"
  },
  {
    "text": "fitting platforms but there are other options as well uh and also importantly it's extensible",
    "start": "243519",
    "end": "249200"
  },
  {
    "text": "and pluggable so these components that implements these building blocks you can you know you can build new ones and and",
    "start": "249200",
    "end": "254959"
  },
  {
    "text": "new ones are being developed as we speak so here are the list of the the current",
    "start": "254959",
    "end": "261600"
  },
  {
    "text": "building blocks um so just to mention a few other now is the first one which is really really",
    "start": "261600",
    "end": "267440"
  },
  {
    "text": "really obvious one is a service to service invocation so of course you need a way to",
    "start": "267440",
    "end": "273199"
  },
  {
    "text": "call uh you know make call between your services um and you know when you're building",
    "start": "273199",
    "end": "279280"
  },
  {
    "text": "distributed systems that consists of multiple services and these services could be running on you know multiple machines you need a way to find where",
    "start": "279280",
    "end": "286560"
  },
  {
    "text": "where is my service actually located right now and i shouldn't have to worry about that i should just be able to make",
    "start": "286560",
    "end": "291840"
  },
  {
    "text": "a call to a service and then something should do the service discovery for me",
    "start": "291840",
    "end": "297040"
  },
  {
    "text": "we have state management so this is basically a kind of key value an abstraction of a key value store uh so",
    "start": "297040",
    "end": "303600"
  },
  {
    "text": "you can store things in like a redis cache cosmos db and so on and it's not just for storing and",
    "start": "303600",
    "end": "309199"
  },
  {
    "text": "receiving value it also solves like these problems of for example doing handling transient failures doing",
    "start": "309199",
    "end": "315199"
  },
  {
    "text": "transactions across multiple rights these kind of things that you shouldn't have to write yourself this is things",
    "start": "315199",
    "end": "320479"
  },
  {
    "text": "that the people can implement for you test it and then you should just be able to use it publish subscribe very common pattern",
    "start": "320479",
    "end": "327360"
  },
  {
    "text": "for doing you know event driven distributed systems resource binding and triggers this is a",
    "start": "327360",
    "end": "333680"
  },
  {
    "text": "way for letting your applications communicate with with other systems for example being triggered by an event",
    "start": "333680",
    "end": "339280"
  },
  {
    "text": "outside of your system or making a call to some external api for example",
    "start": "339280",
    "end": "344320"
  },
  {
    "text": "so again there will there are now a lot of already implemented components that just make this a lot easier for you",
    "start": "344320",
    "end": "351520"
  },
  {
    "text": "and there's a few more blocks there's an election an actor building block which is an implementation of the virtual",
    "start": "351520",
    "end": "357520"
  },
  {
    "text": "actor pattern very specific pattern so if you're interested in that definitely check it out i won't mention it in this talk but",
    "start": "357520",
    "end": "363840"
  },
  {
    "text": "it's there observability again super important so you get things like metrics distributed tracings which",
    "start": "363840",
    "end": "371440"
  },
  {
    "text": "will help you to troubleshoot your system uh which again is just harder when you have now a distributed system with many",
    "start": "371440",
    "end": "378160"
  },
  {
    "text": "running things at the same time how do you actually know what you know when you get a bug in one service how do you know",
    "start": "378160",
    "end": "383520"
  },
  {
    "text": "which service called that service you want to be able to trace it all the way back just to make it easier for you to",
    "start": "383520",
    "end": "389440"
  },
  {
    "text": "define the errors so but what's common about all these building blocks now is that",
    "start": "389440",
    "end": "394800"
  },
  {
    "text": "um these are now you can you communicate or you use them through standard protocols like http or grpc and this is an",
    "start": "394800",
    "end": "402720"
  },
  {
    "text": "important point now because it means that that's the reason why it's not tied to a specific language",
    "start": "402720",
    "end": "408319"
  },
  {
    "text": "or or you know runtime anything that can speak http or grpc",
    "start": "408319",
    "end": "413599"
  },
  {
    "text": "will be able to use dapper because that's how you communicate with it so so that's a very uh",
    "start": "413599",
    "end": "421280"
  },
  {
    "text": "that that's a choice they made um and what they're using to to implement this is something called the the side",
    "start": "421280",
    "end": "427759"
  },
  {
    "text": "car the sidecar is really a distributed system pattern it's a design pattern it's very very common",
    "start": "427759",
    "end": "434720"
  },
  {
    "text": "so if you take a look at an application that consists of two services and these two services uh wants to talk to each",
    "start": "434720",
    "end": "440880"
  },
  {
    "text": "other so we want to do service invocation right so instead of just finding out where is",
    "start": "440880",
    "end": "446560"
  },
  {
    "text": "service b running right now and make a call to it instead of that we're going to communicate with our side car",
    "start": "446560",
    "end": "452800"
  },
  {
    "text": "so when you're using dapper every time you launch your service it will have a side car so a separate",
    "start": "452800",
    "end": "458240"
  },
  {
    "text": "process running next to it and that's what you communicate with and you do that using again http or grpc",
    "start": "458240",
    "end": "465520"
  },
  {
    "text": "you can select that yourself so when i want to communicate with my with service b here i will actually just",
    "start": "465520",
    "end": "471919"
  },
  {
    "text": "make a call to the dapper sidecar it will actually make a call to service b sidecar and then that sidecar will now",
    "start": "471919",
    "end": "477759"
  },
  {
    "text": "call that service so it's a level of indirection here which actually this is where all the functionality and kind of the magic",
    "start": "477759",
    "end": "484240"
  },
  {
    "text": "about that happens so it will do the service discovery for me i just need to know basically the",
    "start": "484240",
    "end": "490160"
  },
  {
    "text": "name of the service and the method i want to call and the dapper sidecar will now find it for me in addition to that",
    "start": "490160",
    "end": "497280"
  },
  {
    "text": "it will add things like the observability for example so the tracing and login metrics and so on it's",
    "start": "497280",
    "end": "502879"
  },
  {
    "text": "just i get that for free i don't need to do anything to get that it also secures the communication",
    "start": "502879",
    "end": "508720"
  },
  {
    "text": "between the side cars so you get the tls for free as well which is very nice",
    "start": "508720",
    "end": "516719"
  },
  {
    "text": "so for the rest of the building blocks that you want to use you need to specify okay which of these building blocks do i",
    "start": "517839",
    "end": "522880"
  },
  {
    "text": "want to use and and which implementations of it and this is done using a component yaml",
    "start": "522880",
    "end": "528800"
  },
  {
    "text": "files you specify a component file that that says which for example which",
    "start": "528800",
    "end": "534000"
  },
  {
    "text": "do i want to use a state store or not and if i want to use a save store which type of state store do i want to use",
    "start": "534000",
    "end": "539600"
  },
  {
    "text": "redis or cosmos db or something like that so i specify this in a yaml file",
    "start": "539600",
    "end": "545920"
  },
  {
    "text": "which i'll use then when i run my system so and the aml files again this this is",
    "start": "545920",
    "end": "550959"
  },
  {
    "text": "now allows you to use things like the state stores you can use the the published subscribes building blocks",
    "start": "550959",
    "end": "558560"
  },
  {
    "text": "the resource bindings and again there are now many many implementations of these building blocks so you have a lot",
    "start": "558560",
    "end": "564080"
  },
  {
    "text": "of different options here so again for example if using state store you can you can select the store",
    "start": "564080",
    "end": "569279"
  },
  {
    "text": "your state in redis in cosmos db in uh aws dynamic db so this is a long list",
    "start": "569279",
    "end": "574800"
  },
  {
    "text": "and it's you know it keeps growing because this is community driven so so the number of options here will",
    "start": "574800",
    "end": "579920"
  },
  {
    "text": "just rise along the way here so again sidecar model you have your",
    "start": "579920",
    "end": "586480"
  },
  {
    "text": "application it speaks to this to the dapper sidecar and this is the the",
    "start": "586480",
    "end": "592080"
  },
  {
    "text": "the how the url actually looks um beneath the surface uh",
    "start": "592080",
    "end": "597760"
  },
  {
    "text": "and so the default port here will be three three five oh um and you know this will be running",
    "start": "597760",
    "end": "603920"
  },
  {
    "text": "next to your service that's really all you need to know and again if for example if you want to do a",
    "start": "603920",
    "end": "609279"
  },
  {
    "text": "service invocation you can see that that's the first example there so if slash invoke that's how you actually",
    "start": "609279",
    "end": "614399"
  },
  {
    "text": "call for example the the method called new order on the cart",
    "start": "614399",
    "end": "619519"
  },
  {
    "text": "service uh the next one is the the states so the url format is slash state and then",
    "start": "619519",
    "end": "626160"
  },
  {
    "text": "the name of your state store and for example give me the item with id item item67 for example",
    "start": "626160",
    "end": "633040"
  },
  {
    "text": "so this is really all you need to do to to use these building blocks just codify this this",
    "start": "633040",
    "end": "638079"
  },
  {
    "text": "http urls you can also use grpc as i mentioned now there are many sdks available which",
    "start": "638079",
    "end": "644880"
  },
  {
    "text": "makes it even more easy you don't actually have to write this http code and i will show you an example that in",
    "start": "644880",
    "end": "650480"
  },
  {
    "text": "the demo later so it makes it even easier but it is important to realize it's just http which allows you to use anything you",
    "start": "650480",
    "end": "656560"
  },
  {
    "text": "want that can speak http you just need to make sure that that your dapper's sidecar is running next to",
    "start": "656560",
    "end": "662320"
  },
  {
    "text": "your application the component files can look like this this is a yaml file of course everything",
    "start": "662320",
    "end": "668800"
  },
  {
    "text": "is yaml nowadays because we all love it and uh so and kind of the key thing here is the",
    "start": "668800",
    "end": "675920"
  },
  {
    "text": "type the type of the components in this case this is the uh the azure service bus",
    "start": "675920",
    "end": "682320"
  },
  {
    "text": "and depending on the type here it will have a set of you know metadata that is specific to that",
    "start": "682320",
    "end": "689200"
  },
  {
    "text": "service of course so in the in the case of a service bus you need to define a connection string and so on",
    "start": "689200",
    "end": "695200"
  },
  {
    "text": "uh and then you can see that it the the component also has a name in this case the name is message bus",
    "start": "695200",
    "end": "701360"
  },
  {
    "text": "and that's really all i need to know later on in my program if i want to kind of talk to this",
    "start": "701360",
    "end": "707279"
  },
  {
    "text": "to this service the azure service service i just need to refer to the name message bus",
    "start": "707279",
    "end": "712959"
  },
  {
    "text": "and then dapper will handle that for me so it's really a nice abstraction that that",
    "start": "712959",
    "end": "718560"
  },
  {
    "text": "keeps all these implementation details away from your application and just makes this really pluggable which is",
    "start": "718560",
    "end": "724079"
  },
  {
    "text": "really nice so again i'm just going to walk through a few of these just to kind of explain",
    "start": "724079",
    "end": "730560"
  },
  {
    "text": "how it actually works and then i will dive into a demo uh so again service invocation like this is",
    "start": "730560",
    "end": "736639"
  },
  {
    "text": "really basic this is something all you know basically all systems will use",
    "start": "736639",
    "end": "743279"
  },
  {
    "text": "again if you want to call to for example this case we have the front end it makes a call to the card service it actually",
    "start": "743279",
    "end": "748560"
  },
  {
    "text": "calls uh the dapper so you'll make a post uh to your adapter sidecar in this",
    "start": "748560",
    "end": "754320"
  },
  {
    "text": "case i'm calling the api checkout method on my cart service and i post some data to it",
    "start": "754320",
    "end": "761279"
  },
  {
    "text": "the diaper sidecar will then speak to the other side car and this communication is always done",
    "start": "761279",
    "end": "766800"
  },
  {
    "text": "using grpc because it just is much faster than http so you can select http or grpc when you",
    "start": "766800",
    "end": "774240"
  },
  {
    "text": "speak to the sidecar but you know between the sidecars it's always the rpc and then that title call will then",
    "start": "774240",
    "end": "780560"
  },
  {
    "text": "actually make the post to the card service and then return the answer back to to the front end and you don't really",
    "start": "780560",
    "end": "786320"
  },
  {
    "text": "notice this it's just done behind the scene but again in addition to do this service",
    "start": "786320",
    "end": "791680"
  },
  {
    "text": "discovery you get things like uh automatic retries for example if you get transient failures it will actually",
    "start": "791680",
    "end": "797839"
  },
  {
    "text": "retry it for you you get secure communication and also you get the observability kind of for",
    "start": "797839",
    "end": "803920"
  },
  {
    "text": "free so so really helps you with with debugging your systems when or if they will fail",
    "start": "803920",
    "end": "811040"
  },
  {
    "text": "also to understand things like performance and so on state management again this is a key",
    "start": "811040",
    "end": "817600"
  },
  {
    "text": "value implementation but again a value could of course is a document you can you can",
    "start": "817600",
    "end": "823199"
  },
  {
    "text": "store any complex orbit in here so again if you want to store something you'll make a post to the the state url",
    "start": "823199",
    "end": "829680"
  },
  {
    "text": "specifying the name of the state store and then you pass in a key and a value basically",
    "start": "829680",
    "end": "835040"
  },
  {
    "text": "so again this could be a simple integer string or it could be a complex document and again dapper will then store the",
    "start": "835040",
    "end": "841440"
  },
  {
    "text": "data for me and depending on my component yaml file uh it will be stored now in in this this",
    "start": "841440",
    "end": "847839"
  },
  {
    "text": "date store that i that i chose be it redis or cosmos and so on",
    "start": "847839",
    "end": "853440"
  },
  {
    "text": "and of course you can be able to retrieve this information later on after you saved it so you can you can do a get",
    "start": "853440",
    "end": "859440"
  },
  {
    "text": "there's also a query api that you can use again these are abstractions now",
    "start": "859440",
    "end": "865199"
  },
  {
    "text": "because they need to work with all of these underlying implementations and of course there will be cases when",
    "start": "865199",
    "end": "871040"
  },
  {
    "text": "this is not enough if you have like a heavy investment in in cosmos db and you you do a lot of weird things",
    "start": "871040",
    "end": "877440"
  },
  {
    "text": "this this building block might not be enough and then you can just you know select to go directly to cosmos db but",
    "start": "877440",
    "end": "883040"
  },
  {
    "text": "in many cases this building blocks will be enough for your services and if you have many services you could have like",
    "start": "883040",
    "end": "888079"
  },
  {
    "text": "20 50 100 services it just makes a lot of sense to to keep it simple",
    "start": "888079",
    "end": "893440"
  },
  {
    "text": "in my opinion you don't need to complicate things by by writing this stuff yourself but if you need to you",
    "start": "893440",
    "end": "898639"
  },
  {
    "text": "can of course do that you don't have to use dapper for everything right",
    "start": "898639",
    "end": "904079"
  },
  {
    "text": "again you have things like optimistic concurrency you get that for free automatically tries again you can also",
    "start": "904399",
    "end": "909680"
  },
  {
    "text": "do transactions if you do multiple rights so these are things that you typically",
    "start": "909680",
    "end": "915600"
  },
  {
    "text": "might miss to do maybe you don't think about it until you're actually in production here you just you can get that for for",
    "start": "915600",
    "end": "921839"
  },
  {
    "text": "free pub sub again you're starting to see the pattern here when you you want to",
    "start": "921839",
    "end": "927920"
  },
  {
    "text": "publish an event you do that through your sidecar you can select the type of you know message bus that you want to",
    "start": "927920",
    "end": "934000"
  },
  {
    "text": "use so read this or rabbit mq and service bus azure service bus so you publish an",
    "start": "934000",
    "end": "940720"
  },
  {
    "text": "event and you can specify uh any number of subscribers uh to that",
    "start": "940720",
    "end": "947120"
  },
  {
    "text": "to the topic of your of your service bus so of course very very common pattern in",
    "start": "947120",
    "end": "953120"
  },
  {
    "text": "distributed systems event-driven systems to do the pub sub communication form",
    "start": "953120",
    "end": "960560"
  },
  {
    "text": "again it has things like at least once guarantee you can specify message time to live and so on",
    "start": "962480",
    "end": "967600"
  },
  {
    "text": "and these are also things that being developed is being improved along the way of course so if you are starting to use dapper you",
    "start": "967600",
    "end": "973440"
  },
  {
    "text": "will actually you know you will you will get more functionality along the way because this is a thing that people are working on and it's open source so you",
    "start": "973440",
    "end": "980639"
  },
  {
    "text": "know you can contribute yourself okay so let's dive into a demo here so how you actually get started with that",
    "start": "980639",
    "end": "986720"
  },
  {
    "text": "but how it actually works so i'm having a super simple uh uh",
    "start": "986720",
    "end": "991759"
  },
  {
    "text": "sample application here with three components so we have like a web application we have an api",
    "start": "991759",
    "end": "996800"
  },
  {
    "text": "that will actually store an order for me and then i have a kind of a background thing called a warehouse api",
    "start": "996800",
    "end": "1002240"
  },
  {
    "text": "that will eventually listen to an event when an order is created and then do something",
    "start": "1002240",
    "end": "1008000"
  },
  {
    "text": "so i'm gonna you know try to show some of these building blocks how it actually works so of course we'll do service invocation",
    "start": "1008000",
    "end": "1014639"
  },
  {
    "text": "between the the web and the api we'll do pub sub so you know when we get",
    "start": "1014639",
    "end": "1019680"
  },
  {
    "text": "an order in the api we'll also raise or publish an event that the api will listen to",
    "start": "1019680",
    "end": "1025839"
  },
  {
    "text": "so we'll store the state in either redis or cosmos db i think we'll do both",
    "start": "1025839",
    "end": "1031678"
  },
  {
    "text": "uh if we're time we'll also see how we can trigger this from the outside world so for example if we get an event on a",
    "start": "1031679",
    "end": "1037918"
  },
  {
    "text": "service bus how can we trigger our application uh from that and also an example of",
    "start": "1037919",
    "end": "1044400"
  },
  {
    "text": "the output bindings as they're called the triggers and so in this case uh i'll",
    "start": "1044400",
    "end": "1049440"
  },
  {
    "text": "send a message through twilio every time i receive this order publish event",
    "start": "1049440",
    "end": "1055280"
  },
  {
    "text": "so that's kind of the the scope of this demo",
    "start": "1055280",
    "end": "1059679"
  },
  {
    "text": "so let's uh jump straight into vs code and",
    "start": "1060720",
    "end": "1067039"
  },
  {
    "text": "so these are the three uh uh",
    "start": "1067039",
    "end": "1072080"
  },
  {
    "text": "applications that i talked about the api in the web and the the warehouse api and this is the standard.net core it's",
    "start": "1072080",
    "end": "1077919"
  },
  {
    "text": "better than score applications and just to show you you know how do you",
    "start": "1077919",
    "end": "1083360"
  },
  {
    "text": "how do you run dapper with your applications because the thing is you need to have this uh the sidecar running next to your application",
    "start": "1083360",
    "end": "1090000"
  },
  {
    "text": "so one way of doing that you know if i would run this application in the normal way i would do a you know dotnet run and",
    "start": "1090000",
    "end": "1096240"
  },
  {
    "text": "it will run my dozen core applications so you know you know that of course but in this case i you know i need to",
    "start": "1096240",
    "end": "1101600"
  },
  {
    "text": "run my application and adapter sidecar so actually what i could do is to use the",
    "start": "1101600",
    "end": "1108160"
  },
  {
    "text": "dapper cli so i'm going to zoom in a little bit here",
    "start": "1108160",
    "end": "1113360"
  },
  {
    "text": "so add the dapper cli that's a see how you can use for example to run",
    "start": "1113919",
    "end": "1119039"
  },
  {
    "text": "the sidecar and also do a few other things and so what i do now i'll do a dapper run",
    "start": "1119039",
    "end": "1124559"
  },
  {
    "text": "and uh first up i need to specify the the app id so that's the the identification of my",
    "start": "1124559",
    "end": "1131280"
  },
  {
    "text": "application that's how other applications or services will know how to to communicate with my",
    "start": "1131280",
    "end": "1136799"
  },
  {
    "text": "service so when i run the order api service i will give it the app by the order uh order api and again that's that's all",
    "start": "1136799",
    "end": "1144240"
  },
  {
    "text": "the other servers need to know i also need to specify the port that my application listens sensitive so the",
    "start": "1144240",
    "end": "1149679"
  },
  {
    "text": "sidecar can actually communicate with my service that's the app port i can specify the the dapper http port",
    "start": "1149679",
    "end": "1157120"
  },
  {
    "text": "so by default this is a 3500 so i actually didn't have to to specify it here",
    "start": "1157120",
    "end": "1162799"
  },
  {
    "text": "but if you want to run multiple services on on one machine like i will do now you actually have to make sure that that you",
    "start": "1162799",
    "end": "1168480"
  },
  {
    "text": "know you can't listen to the same port so if i would run another one i would have to specify a different port here",
    "start": "1168480",
    "end": "1175440"
  },
  {
    "text": "and then at the end there i have the dotnet run so again i want to start my application as well",
    "start": "1175440",
    "end": "1181520"
  },
  {
    "text": "so the adapter cli actually lets me start the sidecar and my application in one simple command",
    "start": "1181520",
    "end": "1188320"
  },
  {
    "text": "so to show this i will run and",
    "start": "1188320",
    "end": "1195120"
  },
  {
    "text": "it actually now shows me when it's when i run it like this it will show me the output from the side car so everything in white here that's coming from the",
    "start": "1195840",
    "end": "1202480"
  },
  {
    "text": "side car so there's a lot of details here you know it initializes it reads component files and and you know yeah data a lot",
    "start": "1202480",
    "end": "1208799"
  },
  {
    "text": "of stuff i can also see the output here in blue which comes from from my application that the standard asp.net core output so",
    "start": "1208799",
    "end": "1215840"
  },
  {
    "text": "it's just mixed into one log output which is quite nice",
    "start": "1215840",
    "end": "1221039"
  },
  {
    "text": "so again now i have my order api running and so if i would just go to the normal",
    "start": "1221039",
    "end": "1227360"
  },
  {
    "text": "endpoint here for example slash order",
    "start": "1227360",
    "end": "1232559"
  },
  {
    "text": "uh i'll just hit my api endpoint so now i'm not really using that button i'm just hitting my my api",
    "start": "1233200",
    "end": "1240080"
  },
  {
    "text": "uh but what i could do now is i could actually access the same endpoint",
    "start": "1240080",
    "end": "1245200"
  },
  {
    "text": "uh through dapper so you know that that's the url that i just",
    "start": "1245200",
    "end": "1250720"
  },
  {
    "text": "hit but i can also use this url so let's just hit it first and of course i get back the same result",
    "start": "1250720",
    "end": "1258640"
  },
  {
    "text": "so if you remember from the slide that i showed you that's the the url format for service invocation",
    "start": "1258640",
    "end": "1266240"
  },
  {
    "text": "so now i actually communicate to my endpoint through my the dapper sidecar so i do slash invoke i do the name of",
    "start": "1266240",
    "end": "1272320"
  },
  {
    "text": "the of the service order api and then you have the the method which is called the order in this case",
    "start": "1272320",
    "end": "1278720"
  },
  {
    "text": "so that's all you need to know to actually speak to the service and what's",
    "start": "1278720",
    "end": "1283760"
  },
  {
    "text": "important to realize here is that i now i don't have to know where that service is running i just speak to my sidecar in",
    "start": "1283760",
    "end": "1289919"
  },
  {
    "text": "the first example i needed to know that it's actually listening to port 5109",
    "start": "1289919",
    "end": "1295360"
  },
  {
    "text": "and of course now this is just one machine this could be running on on a distributed system with multiple machines so service discovery like this",
    "start": "1295360",
    "end": "1302159"
  },
  {
    "text": "just makes a lot of things a lot simpler okay so",
    "start": "1302159",
    "end": "1308640"
  },
  {
    "text": "that is uh you know that's that's how you use the cli now typically you don't want to you know run",
    "start": "1308640",
    "end": "1314159"
  },
  {
    "text": "this cli for every every service that you're running you could have like you know 10 or 15 services in your solution",
    "start": "1314159",
    "end": "1319360"
  },
  {
    "text": "so you typically don't want to you know hit that run for each of your service when you're trying to to run them and",
    "start": "1319360",
    "end": "1324400"
  },
  {
    "text": "debug them and so on so if you're using vs code um there is a nice extension",
    "start": "1324400",
    "end": "1331440"
  },
  {
    "text": "for dapper and what this does it has a few",
    "start": "1331440",
    "end": "1336880"
  },
  {
    "text": "different functionalities but one of them is to make it easier for you to to work with dapper in vs code so",
    "start": "1336880",
    "end": "1343360"
  },
  {
    "text": "it will actually help you to to create this launch and test configuration so if",
    "start": "1343360",
    "end": "1349679"
  },
  {
    "text": "you if you're working with vs code you know that you can create launch configurations to you know specify how how do you start and debug",
    "start": "1349679",
    "end": "1355919"
  },
  {
    "text": "your applications and um so it will actually help you to scaffold these things automatically",
    "start": "1355919",
    "end": "1361919"
  },
  {
    "text": "and so for example if we're if we're going to run the order api i have a lot of",
    "start": "1361919",
    "end": "1367760"
  },
  {
    "text": "configuration here called order api adapter so it's actually a standard asp.net.net core launch configuration",
    "start": "1367760",
    "end": "1375200"
  },
  {
    "text": "with with two different or two differences it has this pre-launch task here",
    "start": "1375200",
    "end": "1380880"
  },
  {
    "text": "and then they have with the post debug task here so again the pre-launch task if you just hit quickly into here this",
    "start": "1380880",
    "end": "1388559"
  },
  {
    "text": "now comes with extension and this is now actually what starts the sidecar so here again you can see",
    "start": "1388559",
    "end": "1395520"
  },
  {
    "text": "a little bit of the information that i passed manually to the dapper cli here i just specify that in this task so i give",
    "start": "1395520",
    "end": "1403039"
  },
  {
    "text": "it the app id i give it the port the http port and a few other things and this is nice now because when i have",
    "start": "1403039",
    "end": "1409360"
  },
  {
    "text": "all this in place i can just hit f5 like usual and it will start all my my services with the dapper side cars i can",
    "start": "1409360",
    "end": "1415679"
  },
  {
    "text": "debug them you know just like any other application because you want to keep that you know that inner flow",
    "start": "1415679",
    "end": "1423120"
  },
  {
    "text": "to have that fast okay so",
    "start": "1423200",
    "end": "1428559"
  },
  {
    "text": "let's see how we actually use that for now in an application so if you go to the the web application uh which is just",
    "start": "1428559",
    "end": "1433919"
  },
  {
    "text": "super super simple i will create an order uh when i do that i want to call the the",
    "start": "1433919",
    "end": "1439039"
  },
  {
    "text": "order api here and so what i do know i i will instantiate",
    "start": "1439039",
    "end": "1446000"
  },
  {
    "text": "the the dapper clients and i'm using the sdk now the the the new get the package for dapper",
    "start": "1446000",
    "end": "1452400"
  },
  {
    "text": "and uh let me just show you i already installed it before so i have this adapter client nuget",
    "start": "1452400",
    "end": "1457679"
  },
  {
    "text": "package installed for me and this just makes it easier for me now i don't have to to create that url format that i",
    "start": "1457679",
    "end": "1462799"
  },
  {
    "text": "showed you before i can just",
    "start": "1462799",
    "end": "1466399"
  },
  {
    "text": "i can use this this object model instead so i'll create a client and if i do see what's in there",
    "start": "1469360",
    "end": "1475679"
  },
  {
    "text": "you can see that we have now methods for this various building blocks so for example we have the invoke method that's",
    "start": "1475679",
    "end": "1481919"
  },
  {
    "text": "how we do service invocation i have invoked binding to communicate with the external systems we have",
    "start": "1481919",
    "end": "1488080"
  },
  {
    "text": "published events and so on so this will create the the correct url formats for me so it just makes it a lot",
    "start": "1488080",
    "end": "1494880"
  },
  {
    "text": "simpler so let's call the api then so i'll just do an await here",
    "start": "1494880",
    "end": "1501520"
  },
  {
    "text": "and let's do an evoke method of sync so in this case i'm going to post the order to the api so i'm going to do",
    "start": "1501520",
    "end": "1509440"
  },
  {
    "text": "pass it as a type argument and so for for the parameters now the only",
    "start": "1509440",
    "end": "1514640"
  },
  {
    "text": "thing i really need to know now again is the the name of the service that i want to talk to and the method",
    "start": "1514640",
    "end": "1520000"
  },
  {
    "text": "so the first one is the app id which is now order api right that's what we specified",
    "start": "1520000",
    "end": "1526320"
  },
  {
    "text": "uh and the method in this case is just called the order the default post method and the last argument is the actual data",
    "start": "1526320",
    "end": "1533120"
  },
  {
    "text": "that i want to pass so i'm just going to pass the order here",
    "start": "1533120",
    "end": "1538240"
  },
  {
    "text": "so that's really all i need to do to actually do service invocation so the web will now call the api",
    "start": "1539840",
    "end": "1546240"
  },
  {
    "text": "uh let's head over to the api now to see because i don't want to just pass you",
    "start": "1546240",
    "end": "1552400"
  },
  {
    "text": "know the order around i actually want to save it as well so we will eventually",
    "start": "1552400",
    "end": "1557600"
  },
  {
    "text": "wind up here in the post order method in my api it will receive the order so again i will",
    "start": "1557600",
    "end": "1564400"
  },
  {
    "text": "create this one and again you can do you can actually inject this i don't i",
    "start": "1564400",
    "end": "1570000"
  },
  {
    "text": "don't have to do it like this way but just to make it clear what actually happens i'll create this client uh",
    "start": "1570000",
    "end": "1575679"
  },
  {
    "text": "kind of manually in each method so in this case i want to store this data so i i do a client and then i could",
    "start": "1575679",
    "end": "1583120"
  },
  {
    "text": "oops client.save state",
    "start": "1583120",
    "end": "1590960"
  },
  {
    "text": "and again i could pass the type here because i want to save a type order",
    "start": "1591039",
    "end": "1596080"
  },
  {
    "text": "and again now i need to specify um the state store the name of my state store",
    "start": "1596080",
    "end": "1601520"
  },
  {
    "text": "so i'm just going to pass actually a state store here i will get back to that",
    "start": "1601520",
    "end": "1607200"
  },
  {
    "text": "and it specified the key for my data so in this case i would typically use the the id for the",
    "start": "1607200",
    "end": "1613679"
  },
  {
    "text": "for the order and finally i need to pass the value so the order itself",
    "start": "1613679",
    "end": "1621279"
  },
  {
    "text": "so that's it and let's run this so let's set a breakpoint here",
    "start": "1621279",
    "end": "1627440"
  },
  {
    "text": "and we'll do an f5",
    "start": "1627440",
    "end": "1630559"
  },
  {
    "text": "so that's my beautiful web page where i can create an order and let's just type something here and",
    "start": "1636720",
    "end": "1643039"
  },
  {
    "text": "you see hoodie and i want to have three of them",
    "start": "1643039",
    "end": "1648080"
  },
  {
    "text": "so we hit the breakpoint here and so you can see now they've actually",
    "start": "1650080",
    "end": "1655279"
  },
  {
    "text": "come to the to the api endpoint so it was actually properly called from my web did the service invocation to the api",
    "start": "1655279",
    "end": "1662720"
  },
  {
    "text": "and it also stored my my order here so let's just take a look at the order uh the order that was",
    "start": "1662720",
    "end": "1669360"
  },
  {
    "text": "passed here so we can see it has the ndc hoodie the quantity was three and so on",
    "start": "1669360",
    "end": "1674559"
  },
  {
    "text": "uh and it was saved so okay but you know",
    "start": "1674559",
    "end": "1679760"
  },
  {
    "text": "what actually happened where is that order saved now so by default when you're when you're installing dapper",
    "start": "1679760",
    "end": "1685760"
  },
  {
    "text": "um it will actually also spin up a redis instance for you just to make it really",
    "start": "1685760",
    "end": "1691440"
  },
  {
    "text": "easy to get started and to work locally so by default you will get the state store",
    "start": "1691440",
    "end": "1696880"
  },
  {
    "text": "which is called state store which is using redis as as its",
    "start": "1696880",
    "end": "1702000"
  },
  {
    "text": "backing service so to actually show you where it ended up let's i have a relish explorer",
    "start": "1702000",
    "end": "1708840"
  },
  {
    "text": "here and so you can see now it actually has this",
    "start": "1708840",
    "end": "1714880"
  },
  {
    "text": "new entry here that was just created and this is actually where my data went up you can see the data coming in here",
    "start": "1714880",
    "end": "1722720"
  },
  {
    "text": "so this has happened automatically and uh the reason why this actually works is",
    "start": "1722720",
    "end": "1728080"
  },
  {
    "text": "again when you install dapper you will get this uh you know in your user profile you get this dot adapter",
    "start": "1728080",
    "end": "1733520"
  },
  {
    "text": "folder inside there you have some default components and configuration if you go into this",
    "start": "1733520",
    "end": "1739039"
  },
  {
    "text": "component directory you can see we have two yaml files here one for pub sub and one for state store",
    "start": "1739039",
    "end": "1744880"
  },
  {
    "text": "so just to open this one and zoom in a little bit this is the default states where you get",
    "start": "1744880",
    "end": "1751679"
  },
  {
    "text": "so again uses redis on your local machine and that's you know that's why that save state just worked without me",
    "start": "1751679",
    "end": "1757440"
  },
  {
    "text": "having to do anything extra so super simple to get started",
    "start": "1757440",
    "end": "1763840"
  },
  {
    "text": "and again the name is the key here so that's why i specified state store in my code so so the name is is really the key here",
    "start": "1763840",
    "end": "1772960"
  },
  {
    "text": "but let's say let's say i don't want to use you know redis for my state store i want to use cosmos for example",
    "start": "1774240",
    "end": "1782398"
  },
  {
    "text": "then i need to provide my my own component files so i have a folder now which is empty",
    "start": "1784000",
    "end": "1790720"
  },
  {
    "text": "called components copy",
    "start": "1790720",
    "end": "1796000"
  },
  {
    "text": "an existing one here so let's drag this one here and take a look at it",
    "start": "1796000",
    "end": "1802000"
  },
  {
    "text": "so this is the same as a component file it has the same name state store but in",
    "start": "1802640",
    "end": "1808159"
  },
  {
    "text": "this case i'm using state azure cosmos db and then i have some some information that's specific to this one and again",
    "start": "1808159",
    "end": "1815360"
  },
  {
    "text": "you don't you don't have to you know have secret information like i do now you can you can use for example a",
    "start": "1815360",
    "end": "1821279"
  },
  {
    "text": "key vault and tie that in automatically uh so this is just simpler",
    "start": "1821279",
    "end": "1826720"
  },
  {
    "text": "maybe maybe for you to understand so again the type is the cosmos db the metadata is you know how how can",
    "start": "1826720",
    "end": "1832960"
  },
  {
    "text": "actually dapper will communicate with the with the cosmos so let's run the same code again",
    "start": "1832960",
    "end": "1840480"
  },
  {
    "text": "and to do that i need to stop my side course because it needs to to reload this com",
    "start": "1840480",
    "end": "1845760"
  },
  {
    "text": "this file and i need to do one more thing i need to specify now the path where my component files are are located",
    "start": "1845760",
    "end": "1853120"
  },
  {
    "text": "so i will add to all of these three i will add a component path",
    "start": "1853120",
    "end": "1858320"
  },
  {
    "text": "which is uh to dot slash components so that's actually how dapper will know",
    "start": "1858320",
    "end": "1864399"
  },
  {
    "text": "where my component files are so to my three three different the api",
    "start": "1864399",
    "end": "1870799"
  },
  {
    "text": "warehouse and the web so now it knows where to look for it so let's do an f5",
    "start": "1870799",
    "end": "1877039"
  },
  {
    "text": "and run the same thing again",
    "start": "1877039",
    "end": "1880158"
  },
  {
    "text": "so let's do an ndc hoodie too",
    "start": "1882880",
    "end": "1888320"
  },
  {
    "text": "and we had a breakpoint just run that",
    "start": "1890559",
    "end": "1896159"
  },
  {
    "text": "and again now uh we shouldn't we shouldn't see a new entry here and we don't so the reason for that now of",
    "start": "1896159",
    "end": "1902080"
  },
  {
    "text": "course is that it actually was stored in uh my cosmos live account and",
    "start": "1902080",
    "end": "1907679"
  },
  {
    "text": "just to show you that i'm not lying let's just take a look here so this is my the cosmos db account that",
    "start": "1907679",
    "end": "1913840"
  },
  {
    "text": "i'm using and let's check the order one and we should see one item here now",
    "start": "1913840",
    "end": "1919200"
  },
  {
    "text": "maybe we could zoom in a little bit here so again you can see the same",
    "start": "1919200",
    "end": "1925120"
  },
  {
    "text": "information you have the item and quantity and then you have a lot of kind of customer specific stuff uh but that",
    "start": "1925120",
    "end": "1930320"
  },
  {
    "text": "wasn't anything that i needed to actually to worry about it was just done automatically by dapper so you can see",
    "start": "1930320",
    "end": "1935679"
  },
  {
    "text": "how easy it is to just plug a component in and the communication will just you know work without me having to write any",
    "start": "1935679",
    "end": "1940880"
  },
  {
    "text": "code for it i could potentially run the redis locally and then use cosmos db for my",
    "start": "1940880",
    "end": "1946159"
  },
  {
    "text": "testing and production environment if i want to um but i think the main thing is that you",
    "start": "1946159",
    "end": "1951440"
  },
  {
    "text": "don't have to do the implementation yourself uh the the possibility of switching opponents",
    "start": "1951440",
    "end": "1957279"
  },
  {
    "text": "different type stores that's nice but it's not you know that's not so common that you do that it's more about the",
    "start": "1957279",
    "end": "1962720"
  },
  {
    "text": "having the kind of the best practice implementation there okay so",
    "start": "1962720",
    "end": "1968640"
  },
  {
    "text": "let's uh move on to and to do some pub sub um so when i save this order i also want",
    "start": "1968640",
    "end": "1974720"
  },
  {
    "text": "to to raise an event to let anyone know that actually i",
    "start": "1974720",
    "end": "1980240"
  },
  {
    "text": "stored a new order so i use the same client object in this case i will do now a publish",
    "start": "1980240",
    "end": "1985919"
  },
  {
    "text": "event so add the publish event to let's pass the order",
    "start": "1985919",
    "end": "1992640"
  },
  {
    "text": "and i will give it the name so this is corresponding to the state store name like we did before now i need to specify",
    "start": "1992640",
    "end": "1997840"
  },
  {
    "text": "the name of my my pub sub store so i have a component file that i will use",
    "start": "1997840",
    "end": "2003679"
  },
  {
    "text": "and the name of that one is order pub sub and then specify the topic so this is",
    "start": "2003679",
    "end": "2009519"
  },
  {
    "text": "what the subscribers actually will listen to so you can have you know multiple topics and the subscribers will",
    "start": "2009519",
    "end": "2015519"
  },
  {
    "text": "listen to that topic and this one is called the order and again the last one is the data",
    "start": "2015519",
    "end": "2021760"
  },
  {
    "text": "itself so i'll just do an order so that's it that's everything i need to do",
    "start": "2021760",
    "end": "2027120"
  },
  {
    "text": "and let's head over to to the last one the last service the warehouse api",
    "start": "2027120",
    "end": "2033600"
  },
  {
    "text": "which we should then listen to this order and",
    "start": "2033600",
    "end": "2039760"
  },
  {
    "text": "uh what i need to do now is actually we can leave the method like this",
    "start": "2039760",
    "end": "2044840"
  },
  {
    "text": "and now we just need to add some component files here so i need to specify what kind of pub sub service or component i",
    "start": "2044840",
    "end": "2051679"
  },
  {
    "text": "want to use so in this case uh let's grab run from here",
    "start": "2051679",
    "end": "2056720"
  },
  {
    "text": "i'll use this one the pub sub which is under the hood just using redis so",
    "start": "2056720",
    "end": "2062079"
  },
  {
    "text": "that's the default but i could for example use the azure service bus here if i want to",
    "start": "2062079",
    "end": "2067200"
  },
  {
    "text": "uh so that's for publishing events then to in order to actually subscribe to the events",
    "start": "2067200",
    "end": "2073599"
  },
  {
    "text": "i can for example also use a component file for that so i have a subscription file here this",
    "start": "2073599",
    "end": "2079118"
  },
  {
    "text": "could actually also be done in code um but for the subscribers here i specify",
    "start": "2079119",
    "end": "2086878"
  },
  {
    "text": "the name of the pub sub the topic i want to listen to and where those messages should be routed so it should be routed",
    "start": "2086879",
    "end": "2092638"
  },
  {
    "text": "to the order created endpoint in the services and here you can also see uh the scopes",
    "start": "2092639",
    "end": "2098720"
  },
  {
    "text": "at the end here oops sorry um so that's actually how i can filter",
    "start": "2098720",
    "end": "2105760"
  },
  {
    "text": "these events so because i don't want to have all the services uh having this event routed to them i want to specify",
    "start": "2105760",
    "end": "2111520"
  },
  {
    "text": "only for which which subscribers are actually interested in this one so in this case it's the warehouse api that",
    "start": "2111520",
    "end": "2116640"
  },
  {
    "text": "should actually receive it so actually let's do one more thing at",
    "start": "2116640",
    "end": "2122480"
  },
  {
    "text": "the same time before we run that one because i also want to show you an example of",
    "start": "2122480",
    "end": "2128160"
  },
  {
    "text": "actually let's wait with that one we'll come back to that one so",
    "start": "2128160",
    "end": "2133359"
  },
  {
    "text": "let's stop the side course because we added some new components and let's stop here",
    "start": "2133359",
    "end": "2140880"
  },
  {
    "text": "so let's just build it and run it",
    "start": "2143680",
    "end": "2147680"
  },
  {
    "text": "and i think i had a break point at the end here so let's send another",
    "start": "2151359",
    "end": "2157200"
  },
  {
    "text": "order test 43",
    "start": "2157200",
    "end": "2162720"
  },
  {
    "text": "and i guess we get a break point here in actually after the publish event",
    "start": "2163200",
    "end": "2169200"
  },
  {
    "text": "let's keep running see did i add in a break point in that",
    "start": "2169200",
    "end": "2174640"
  },
  {
    "text": "method",
    "start": "2174640",
    "end": "2177640"
  },
  {
    "text": "i did so it actually should have been called now",
    "start": "2187839",
    "end": "2192079"
  },
  {
    "text": "let's see did we add this the subscription we did let's stop the side cars",
    "start": "2195200",
    "end": "2203039"
  },
  {
    "text": "okay let's try that one more time",
    "start": "2208240",
    "end": "2213280"
  },
  {
    "text": "so it should actually should hit my my endpoint over here let's put a breakpoint there as well",
    "start": "2213280",
    "end": "2221520"
  },
  {
    "text": "send this one again",
    "start": "2222800",
    "end": "2226359"
  },
  {
    "text": "okay so for some reason it actually didn't hit my api endpoint here so it should i'm not sure why that didn't work",
    "start": "2234240",
    "end": "2240000"
  },
  {
    "text": "uh okay but anyway that usually works uh when i do this demo uh but for some",
    "start": "2240000",
    "end": "2245839"
  },
  {
    "text": "reason the pubs didn't work here um but okay let's let's uh continue to",
    "start": "2245839",
    "end": "2251200"
  },
  {
    "text": "kind of the last block that i want to show you which was actually supposed to run here but instead let's run that from",
    "start": "2251200",
    "end": "2258240"
  },
  {
    "text": "the order api instead um because i want to show you how you can also",
    "start": "2258240",
    "end": "2264880"
  },
  {
    "text": "trigger or kind of communicate with external systems here both like like input and output",
    "start": "2264880",
    "end": "2270560"
  },
  {
    "text": "so what one way we could do here is to send a message every time we get an",
    "start": "2270560",
    "end": "2275680"
  },
  {
    "text": "order so i'll do an invoke binding here i want to send a message",
    "start": "2275680",
    "end": "2282079"
  },
  {
    "text": "through the twilio service so i have a twitter component defined",
    "start": "2282079",
    "end": "2289119"
  },
  {
    "text": "so if you have it's a very nice cloud service for sending various types of messages",
    "start": "2289119",
    "end": "2294400"
  },
  {
    "text": "and let's go to my folder here let's copy the twilio",
    "start": "2294400",
    "end": "2300640"
  },
  {
    "text": "component so again the information to my account",
    "start": "2300640",
    "end": "2306480"
  },
  {
    "text": "would like to now send a text message and the name of the component is twilio",
    "start": "2306480",
    "end": "2312960"
  },
  {
    "text": "so that means when i write this code i will specify the name here",
    "start": "2312960",
    "end": "2318640"
  },
  {
    "text": "so i'll do a sync i'll add the name of the component",
    "start": "2318640",
    "end": "2323760"
  },
  {
    "text": "and the operation in this case will be a create and then i will also add a text message so",
    "start": "2323760",
    "end": "2331760"
  },
  {
    "text": "let's type order created and just pass in the order id for",
    "start": "2331760",
    "end": "2337520"
  },
  {
    "text": "example",
    "start": "2337520",
    "end": "2340520"
  },
  {
    "text": "so let's run this one",
    "start": "2346000",
    "end": "2349800"
  },
  {
    "text": "see if this one makes me a little bit happier it should work",
    "start": "2360160",
    "end": "2366160"
  },
  {
    "text": "some quantity and we get a break point",
    "start": "2366160",
    "end": "2372720"
  },
  {
    "text": "first one let's run again it ran through here and well you probably didn't hear but i",
    "start": "2373440",
    "end": "2380079"
  },
  {
    "text": "actually got a text message here very powerful demonstration",
    "start": "2380079",
    "end": "2385440"
  },
  {
    "text": "you can come up afterwards and actually see i actually got a text message it says order created and it's a nice",
    "start": "2385440",
    "end": "2390800"
  },
  {
    "text": "grid okay but again one line of code that's all i needed to actually communicate within",
    "start": "2390800",
    "end": "2396000"
  },
  {
    "text": "this case twilio so that's an example of an output binding where i communicate with with an external system like",
    "start": "2396000",
    "end": "2401440"
  },
  {
    "text": "outbound another way is to trigger the system from the outside world using inbound",
    "start": "2401440",
    "end": "2407200"
  },
  {
    "text": "so let's say that now instead of just receiving orders from the web application i also want to be able to reach it through a service bus from",
    "start": "2407200",
    "end": "2413599"
  },
  {
    "text": "coming from an external system so let's try that and again to do that i need to have a",
    "start": "2413599",
    "end": "2420880"
  },
  {
    "text": "component file to specify you know which which service pass should i use",
    "start": "2420880",
    "end": "2427359"
  },
  {
    "text": "so let's stop this one and let's add the last one here it's the the binding here to the service bus",
    "start": "2427359",
    "end": "2434720"
  },
  {
    "text": "let's copy it here and again i'm using uh this in this case the type is the",
    "start": "2434720",
    "end": "2440720"
  },
  {
    "text": "bindings azure service bus cues uh and then you know connection string and so on to specify how to communicate with",
    "start": "2440720",
    "end": "2447680"
  },
  {
    "text": "that service bus and uh since i have that now i should just be able to run this",
    "start": "2447680",
    "end": "2455280"
  },
  {
    "text": "and let's head over to",
    "start": "2458800",
    "end": "2463359"
  },
  {
    "text": "my service bus",
    "start": "2463839",
    "end": "2467480"
  },
  {
    "text": "so that per demo",
    "start": "2469680",
    "end": "2473359"
  },
  {
    "text": "thank you so you know if you're using azure service bus you know that you can actually go in here and just send a test message so i'll use the service bus",
    "start": "2476560",
    "end": "2483119"
  },
  {
    "text": "explorer and maybe we can zoom in a bit",
    "start": "2483119",
    "end": "2488960"
  },
  {
    "text": "okay never mind so i'll just send a sample order here so i'll just select",
    "start": "2488960",
    "end": "2494480"
  },
  {
    "text": "json here and then i'm just going to copy a sample order in json format here so i",
    "start": "2494480",
    "end": "2500560"
  },
  {
    "text": "just and i just need to pass the item and the quantity here really like that",
    "start": "2500560",
    "end": "2506000"
  },
  {
    "text": "and send it and you can see now that it immediately hit my break point",
    "start": "2506000",
    "end": "2511359"
  },
  {
    "text": "so let's check the order that come in here you can see racing car 42",
    "start": "2511359",
    "end": "2516800"
  },
  {
    "text": "so again now i actually didn't write any code at all i just added the component file and that message is now received",
    "start": "2516800",
    "end": "2523040"
  },
  {
    "text": "automatically from the service bus and so you see how easy it is now to build connected systems like that both",
    "start": "2523040",
    "end": "2528640"
  },
  {
    "text": "synchronous uh and asynchronous with very very little code and and",
    "start": "2528640",
    "end": "2534480"
  },
  {
    "text": "it's not again not just the functionality of actually communicating with that particular service it's also handling things like uh",
    "start": "2534480",
    "end": "2541599"
  },
  {
    "text": "retries in case of failures and observability and so on",
    "start": "2541599",
    "end": "2546559"
  },
  {
    "text": "okay let's uh switch back to the presentation and talk a little bit about",
    "start": "2548079",
    "end": "2553119"
  },
  {
    "text": "hosting these things so hopefully you got a good sense of how you actually work with these things to how to get started",
    "start": "2553119",
    "end": "2559440"
  },
  {
    "text": "and uh so when you're hosting this you can do this self-hosted this is really what i",
    "start": "2559440",
    "end": "2565040"
  },
  {
    "text": "did now on my local machine and you could do the same thing on you know in the production environment but typically",
    "start": "2565040",
    "end": "2570560"
  },
  {
    "text": "you would use something like kubernetes for your platform uh now you can also use azure container",
    "start": "2570560",
    "end": "2576319"
  },
  {
    "text": "apps which is actually announced in preview at ignite which is a new really",
    "start": "2576319",
    "end": "2581839"
  },
  {
    "text": "kind of a serverless kubernetes service which will eventually make it just much more simpler for you to host your",
    "start": "2581839",
    "end": "2587760"
  },
  {
    "text": "microservices without having to know a lot of details about for example kubernetes so but in the case of self-hosted you",
    "start": "2587760",
    "end": "2594480"
  },
  {
    "text": "know we did this adapter run as the the slide shows here um so you run your application you're on",
    "start": "2594480",
    "end": "2600319"
  },
  {
    "text": "your sidecar and the other things actually runs like docker containers on your machine so the the red this the the zipkin for the",
    "start": "2600319",
    "end": "2607119"
  },
  {
    "text": "tracing and so on that will actually run like docker containers on your on on your machine where you run running these",
    "start": "2607119",
    "end": "2613119"
  },
  {
    "text": "things but again i'd say this is mostly for local development i would say",
    "start": "2613119",
    "end": "2618240"
  },
  {
    "text": "when you do self-hosted so if you're uh if you're on kubernetes um what you can do through the dapper cli you can do",
    "start": "2618240",
    "end": "2625280"
  },
  {
    "text": "dapper init k it will actually deploy the dapper components to your cluster",
    "start": "2625280",
    "end": "2630480"
  },
  {
    "text": "uh and then you can actually just deploy your your application of course but also the component files you can take them",
    "start": "2630480",
    "end": "2636480"
  },
  {
    "text": "just as they are and deploy them into kubernetes uh because dapper actually creates what's called a custom resource",
    "start": "2636480",
    "end": "2642240"
  },
  {
    "text": "definition so then we'll actually understand the same component files so it's really really simple to take",
    "start": "2642240",
    "end": "2648480"
  },
  {
    "text": "this application that i just showed you and just deploy it to kubernetes i just deployed the same files that i just showed you and in your deployment",
    "start": "2648480",
    "end": "2655119"
  },
  {
    "text": "manifests where i marked the red square there you add a few annotations to it and this is the trigger for that for",
    "start": "2655119",
    "end": "2661040"
  },
  {
    "text": "dapper to tell you this is actually that per application i want you to start that per side car that's the dapper io",
    "start": "2661040",
    "end": "2667359"
  },
  {
    "text": "enabled annotation here so that's kind of the magic and again then you have these different things",
    "start": "2667359",
    "end": "2672560"
  },
  {
    "text": "that i showed you before the app id the protocol and so on and i'll actually show you that in a quick demo afterwards",
    "start": "2672560",
    "end": "2681200"
  },
  {
    "text": "so again what actually happens uh you know behind the scene is that when a cubit is when you spin up a pod",
    "start": "2681520",
    "end": "2686880"
  },
  {
    "text": "incubators with your container in it the dapper operator will also inject the",
    "start": "2686880",
    "end": "2691920"
  },
  {
    "text": "sidecar into that pod just by magic you don't have to worry about it but again the communication work",
    "start": "2691920",
    "end": "2697680"
  },
  {
    "text": "and you still you just need to know the name of the service talk you don't need to change anything you can run it exactly in the same way as you do",
    "start": "2697680",
    "end": "2702880"
  },
  {
    "text": "locally but in this time it's in kubernetes and",
    "start": "2702880",
    "end": "2708560"
  },
  {
    "text": "just i wanted also to show you the possibility of now using azure container apps if you're an azure so this is something you should look into if you're",
    "start": "2708560",
    "end": "2714400"
  },
  {
    "text": "doing microservices but maybe you haven't invested a lot of time and effort to learn kubernetes",
    "start": "2714400",
    "end": "2719440"
  },
  {
    "text": "and i think we'll see more of this type of solution going forward from from various cloud providers just to kind of",
    "start": "2719440",
    "end": "2724640"
  },
  {
    "text": "abstract away the complexity of kubernetes and so to deploy your application you just",
    "start": "2724640",
    "end": "2731280"
  },
  {
    "text": "do an ac container upgrade and you just deploy it and you just pay for what you're using but you can also enable",
    "start": "2731280",
    "end": "2737119"
  },
  {
    "text": "dapper so if you're saying i want to run this as a dapper deprived application you just add these extra parameters so",
    "start": "2737119",
    "end": "2744160"
  },
  {
    "text": "enable dapper and again specifying the port the app id and so on",
    "start": "2744160",
    "end": "2749200"
  },
  {
    "text": "uh and of course this is much much simpler than to you know to actually spin up a kubernetes cluster and learn all about",
    "start": "2749200",
    "end": "2755280"
  },
  {
    "text": "this various deployment manifests and so on so it's still in preview but check it out if you're interested in",
    "start": "2755280",
    "end": "2760720"
  },
  {
    "text": "microservices on azure and so actually i have deployed this",
    "start": "2760720",
    "end": "2766319"
  },
  {
    "text": "application that i just showed you i have deployed them both to a kubernetes cluster and to an azure container app",
    "start": "2766319",
    "end": "2773440"
  },
  {
    "text": "so i just want to show you",
    "start": "2773440",
    "end": "2776640"
  },
  {
    "text": "what it actually looks like so i have a folder called deployment here and i have one for kubernetes and",
    "start": "2779040",
    "end": "2785280"
  },
  {
    "text": "one for container apps let's just take a look you can see i have four files here one of them is",
    "start": "2785280",
    "end": "2790880"
  },
  {
    "text": "related to tracing so i'll also show you how the tracing actually looks like but i have one deployment manifest for my",
    "start": "2790880",
    "end": "2797119"
  },
  {
    "text": "three different applications the api the web and the warehouse api and again if we take a look at this you",
    "start": "2797119",
    "end": "2802800"
  },
  {
    "text": "can see that well if you're if you're familiar with kubernetes you should recognize this as a standard deployment manifest",
    "start": "2802800",
    "end": "2810079"
  },
  {
    "text": "but what's specific here is this thing i added this this dapper annotations and",
    "start": "2810640",
    "end": "2817599"
  },
  {
    "text": "again this is what actually would uh automatically spin up this adapter sidecar next to my application and",
    "start": "2817599",
    "end": "2823760"
  },
  {
    "text": "specifying the app id the port and and the config in this case",
    "start": "2823760",
    "end": "2829040"
  },
  {
    "text": "that's all i need to add actually and the second part is the components so this is now again exactly the same files",
    "start": "2829040",
    "end": "2835760"
  },
  {
    "text": "that i just showed you i just switched a few things i don't want to use",
    "start": "2835760",
    "end": "2840960"
  },
  {
    "text": "actually i need to specify the name of the reddit service in my kubernetes so actually the end point will be a little bit different but but",
    "start": "2840960",
    "end": "2847520"
  },
  {
    "text": "it's the same component files um and you can just apply them deploy them in exactly the same way as you would do",
    "start": "2847520",
    "end": "2853839"
  },
  {
    "text": "with it with a kubernetes manifest so you know to deploy this",
    "start": "2853839",
    "end": "2860240"
  },
  {
    "text": "all i need to do now is to find a little front here somewhere",
    "start": "2860240",
    "end": "2867440"
  },
  {
    "text": "and go to deploy",
    "start": "2867440",
    "end": "2872800"
  },
  {
    "text": "so i have my files here i can go to the components and i can do a cube capital apply",
    "start": "2872800",
    "end": "2879200"
  },
  {
    "text": "and all the files and it will just deploy my my component manifest it says unchanged because i did that before",
    "start": "2879200",
    "end": "2886480"
  },
  {
    "text": "and then i would do the same thing with my with my deployment manifests so to show you this uh i will take a",
    "start": "2886480",
    "end": "2893839"
  },
  {
    "text": "peek inside my my cluster to see what's running in there so we can see i have my three different",
    "start": "2893839",
    "end": "2900960"
  },
  {
    "text": "applications where the order api or the web and the warehouse oops sorry",
    "start": "2900960",
    "end": "2907200"
  },
  {
    "text": "i also have a redis deployment running in there so i can use redis if i want to",
    "start": "2907520",
    "end": "2912880"
  },
  {
    "text": "and also at the zipkin which is the for the distributed tracing so let's take a look at",
    "start": "2912880",
    "end": "2919280"
  },
  {
    "text": "how we can access it so we have the public endpoint here for the web",
    "start": "2919280",
    "end": "2925280"
  },
  {
    "text": "so again let's take that one and browse to it and not very impressively it looks of",
    "start": "2925280",
    "end": "2931359"
  },
  {
    "text": "course exactly the same thing but now it's running inside kubernetes and i can use it in the same way",
    "start": "2931359",
    "end": "2939280"
  },
  {
    "text": "and i got text message uh but again i didn't the application is completely untouched i didn't have to",
    "start": "2940160",
    "end": "2946240"
  },
  {
    "text": "change anything i'm using dapper so it knows how to find the other components i just added the deployment manifest",
    "start": "2946240",
    "end": "2951599"
  },
  {
    "text": "deployed it into kubernetes and it's kind of it just worked and that that's a really nice aspect of",
    "start": "2951599",
    "end": "2957920"
  },
  {
    "text": "using dapper i think because everything is just handled by these components",
    "start": "2957920",
    "end": "2964319"
  },
  {
    "text": "and one of the building blocks that i didn't show you before is the tracing now so i just want to quickly show you",
    "start": "2965119",
    "end": "2970240"
  },
  {
    "text": "that one so i exposed the zipkin as a public ip just to make it easier to",
    "start": "2970240",
    "end": "2978480"
  },
  {
    "text": "to take a look at it so this is the standard zip key on the dashboard and of course you could you",
    "start": "2978480",
    "end": "2983920"
  },
  {
    "text": "can also export it to a lot of different tracing providers here but you get a few things",
    "start": "2983920",
    "end": "2990160"
  },
  {
    "text": "for free here you get a really small diagram so if you have very good eyes you can actually see like the communication",
    "start": "2990160",
    "end": "2996400"
  },
  {
    "text": "flowing here so you can see the the order web is calling the order api which is called in the warehouse api and so on",
    "start": "2996400",
    "end": "3002000"
  },
  {
    "text": "um and you can also see uh traces here which might be you know potentially is more interesting",
    "start": "3002000",
    "end": "3007680"
  },
  {
    "text": "so here i can see the thing that i just did a few a few seconds ago",
    "start": "3007680",
    "end": "3012720"
  },
  {
    "text": "and you can see a lot of information about there like how many times were this called service was this call down",
    "start": "3012720",
    "end": "3018079"
  },
  {
    "text": "which service called which service and so on so i could actually you know dive into this one particular call and i can",
    "start": "3018079",
    "end": "3023520"
  },
  {
    "text": "see that they order web called the older api and so on so this is just for free i didn't you know write a single piece of",
    "start": "3023520",
    "end": "3028880"
  },
  {
    "text": "code to do this i just enabled tracing in in dapper and i got this kind of for",
    "start": "3028880",
    "end": "3034079"
  },
  {
    "text": "free so that's that's really really nice",
    "start": "3034079",
    "end": "3040920"
  },
  {
    "text": "i also deployed it to azure container apps that i mentioned before",
    "start": "3041680",
    "end": "3047920"
  },
  {
    "text": "so for the capabilities part of course i had to create a kubernetes cluster and set up permissions and so on so that's a",
    "start": "3048800",
    "end": "3054960"
  },
  {
    "text": "little bit of a work and i need to kind of understand kubernetes in terms of container apps",
    "start": "3054960",
    "end": "3061119"
  },
  {
    "text": "it's kind of much easier because i don't need to spin up anything first i just deploy my application and",
    "start": "3061119",
    "end": "3067359"
  },
  {
    "text": "actually will deploy it for me somewhere in the cloud and i will just pay for it you know pay for how much i actually use",
    "start": "3067359",
    "end": "3074160"
  },
  {
    "text": "it so i have a deployment script here so",
    "start": "3074160",
    "end": "3080078"
  },
  {
    "text": "again this is all that it takes to create or actually to deploy an application so i use the ac container",
    "start": "3080880",
    "end": "3086559"
  },
  {
    "text": "app create i don't have to use dapper of course i can i can deploy any containers application like this",
    "start": "3086559",
    "end": "3091599"
  },
  {
    "text": "so i just specify an environment and an environment is actually created up here",
    "start": "3091599",
    "end": "3097200"
  },
  {
    "text": "that this is really the only command you need to run first to create the environment so",
    "start": "3097200",
    "end": "3103680"
  },
  {
    "text": "under the hood this is actually a namespace in a kubernetes cluster somewhere but you don't you know really",
    "start": "3103680",
    "end": "3108880"
  },
  {
    "text": "have to know about that you just create an environment for your application so it's like an isolated boundary where the the services can can talk to each other",
    "start": "3108880",
    "end": "3116079"
  },
  {
    "text": "and then you deploy your application into that environment so you just specify that here you're specifying in the image",
    "start": "3116079",
    "end": "3122559"
  },
  {
    "text": "if it should be publicly available or not with ingress and again i have this uh enable dapper and adapter information",
    "start": "3122559",
    "end": "3129920"
  },
  {
    "text": "added to it so let's take a look at",
    "start": "3129920",
    "end": "3136400"
  },
  {
    "text": "what i have here so i could do a ac container app",
    "start": "3136400",
    "end": "3144720"
  },
  {
    "text": "list just to see what container apps do i have in in this group and it will show me",
    "start": "3145760",
    "end": "3150880"
  },
  {
    "text": "i hope three container apps so again the web the api and that that warehouse api is running there",
    "start": "3150880",
    "end": "3156880"
  },
  {
    "text": "one of them now has a public endpoint because i specify that the other one is just internal they just need to be run",
    "start": "3156880",
    "end": "3163040"
  },
  {
    "text": "from the inside by default you will get this pretty strange url",
    "start": "3163040",
    "end": "3168720"
  },
  {
    "text": "uh of course eventually when this thing goes ga you you can attach a custom domain to it and so on",
    "start": "3168720",
    "end": "3174559"
  },
  {
    "text": "um but you get this kind of random url and again you can hit that and now i didn't run it for a while and",
    "start": "3174559",
    "end": "3182000"
  },
  {
    "text": "i think they're using kind of a low resource environment so it will take some time to spin up the first time",
    "start": "3182000",
    "end": "3188400"
  },
  {
    "text": "um so it's kind of similar to if you're using an app service plan you know the free version it will",
    "start": "3188400",
    "end": "3194559"
  },
  {
    "text": "die when you're not using it so it takes a few seconds the first time you hit it",
    "start": "3194559",
    "end": "3200000"
  },
  {
    "text": "and the excitement is enormous come on",
    "start": "3200000",
    "end": "3205960"
  },
  {
    "text": "and there we go and you know it will work in the same way here of course",
    "start": "3209839",
    "end": "3215040"
  },
  {
    "text": "but now he's running in in the cloud somewhere uh and using industrial container apps and again i didn't change",
    "start": "3215040",
    "end": "3220800"
  },
  {
    "text": "anything in my application it just actually just worked so now it actually spins out the api",
    "start": "3220800",
    "end": "3227599"
  },
  {
    "text": "behind the scene now so again if you're if you're trying to insert the microservices and maybe don't",
    "start": "3227599",
    "end": "3234559"
  },
  {
    "text": "want to learn everything about kubernetes which is actually kind of a barrier to get into it's it's a",
    "start": "3234559",
    "end": "3240160"
  },
  {
    "text": "can be pretty complicated even though if you have you have managed services like aks in azure but you still need to know",
    "start": "3240160",
    "end": "3245440"
  },
  {
    "text": "a lot of things about kubernetes and when you start getting errors you need to understand a lot of things these are the type of services that will be coming",
    "start": "3245440",
    "end": "3251280"
  },
  {
    "text": "a lot more now that will abstract these these things away for you so they are using kubernetes to host your things but",
    "start": "3251280",
    "end": "3257280"
  },
  {
    "text": "you can just deploy your apps and pay for the amount of resources that you're actually using",
    "start": "3257280",
    "end": "3263559"
  },
  {
    "text": "all right so those few options actually just also a slide on the on the sdk languages so i",
    "start": "3265520",
    "end": "3272720"
  },
  {
    "text": "showed you dot net core today but there's a lot of sdks for different types of languages",
    "start": "3272720",
    "end": "3278960"
  },
  {
    "text": "so you have a client sdk that's kind of the basic of it that i showed you with the you know the client and you can all",
    "start": "3278960",
    "end": "3285440"
  },
  {
    "text": "have this invoke methods then you have for some of these languages you have kind of an extra things like the server extensions so for",
    "start": "3285440",
    "end": "3291760"
  },
  {
    "text": "asp.net core for example uh it just makes it easier to to kind of connect a few things and and you can",
    "start": "3291760",
    "end": "3297839"
  },
  {
    "text": "codify some things just more more nicely you can inject that dapper client for example and so on but again",
    "start": "3297839",
    "end": "3304319"
  },
  {
    "text": "you can use any language that you want and that's really one of the key points here",
    "start": "3304319",
    "end": "3311040"
  },
  {
    "text": "and again take a look at the the dapper io site for more information",
    "start": "3311040",
    "end": "3316559"
  },
  {
    "text": "so for example i could show you",
    "start": "3316559",
    "end": "3321838"
  },
  {
    "text": "um so if you go to the adapter documentation sites you can for example look at all these component specs that i",
    "start": "3322640",
    "end": "3328240"
  },
  {
    "text": "showed you or i showed you some example of it so for example if you're interested in in the bindings to see i showed you the",
    "start": "3328240",
    "end": "3334559"
  },
  {
    "text": "twilio if you go in here you can see all the existing binding components so here",
    "start": "3334559",
    "end": "3340000"
  },
  {
    "text": "you would for example see twilio down here and you can go in here and then you can see the documentation on the on the",
    "start": "3340000",
    "end": "3346160"
  },
  {
    "text": "format or how you actually use these things but again as you can see this is a long list and just keeps growing",
    "start": "3346160",
    "end": "3352720"
  },
  {
    "text": "uh with things that you can communicate now without actually having to write any code to to do it",
    "start": "3352720",
    "end": "3359680"
  },
  {
    "text": "all right that's actually all that i had we actually have two minutes left so if there are any questions you can do it",
    "start": "3361760",
    "end": "3367040"
  },
  {
    "text": "now otherwise you can just come to me after the session and ask there or ask in the in the slack channel later on",
    "start": "3367040",
    "end": "3374400"
  },
  {
    "text": "um but uh i will just end by saying a big thank",
    "start": "3374400",
    "end": "3380160"
  },
  {
    "text": "you for for coming to my session i hope you learned something about dapper how it is how it works and how you can get started with",
    "start": "3380160",
    "end": "3386079"
  },
  {
    "text": "it and if it's right the right tool for you well you have to decide it for yourself and have a great rest of the conference",
    "start": "3386079",
    "end": "3392960"
  },
  {
    "text": "thank you",
    "start": "3392960",
    "end": "3396200"
  },
  {
    "text": "you",
    "start": "3410559",
    "end": "3412640"
  }
]