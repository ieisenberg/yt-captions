[
  {
    "text": "hello welcome everyone uh my name is mark brown and welcome to our session",
    "start": "8000",
    "end": "14559"
  },
  {
    "text": "data modeling and partitioning in cosmos db for achieving infinite scale in your",
    "start": "14559",
    "end": "19680"
  },
  {
    "text": "databases uh hi my name is mark brown and i'm a program manager on the cosmos db team",
    "start": "19680",
    "end": "25359"
  },
  {
    "text": "uh you can find me on twitter most times i'm at mark j brown feel free to reach out if you need",
    "start": "25359",
    "end": "31840"
  },
  {
    "text": "uh and follow our twitter handle as well as at azurecosmostv.com",
    "start": "31840",
    "end": "37880"
  },
  {
    "text": "okay i mean we will slide here okay uh for today's session over the",
    "start": "37920",
    "end": "45840"
  },
  {
    "text": "next hour uh we're gonna help you get familiar with core concepts for data modeling uh best practices",
    "start": "45840",
    "end": "53360"
  },
  {
    "text": "uh and we're gonna apply these to a quasi-real-world scenario and i'll show you that",
    "start": "53360",
    "end": "58480"
  },
  {
    "text": "and then hopefully you know for most of you who i'm guessing uh in the room today are new to cosmos db and are",
    "start": "58480",
    "end": "64400"
  },
  {
    "text": "familiar with relational databases and how to model for those and make them run efficiently uh hopefully this session",
    "start": "64400",
    "end": "69760"
  },
  {
    "text": "will help you understand how to how to jump from that relational world to a nosql world",
    "start": "69760",
    "end": "75520"
  },
  {
    "text": "uh and learning how to design and model uh for a database like cosmos tv",
    "start": "75520",
    "end": "81840"
  },
  {
    "text": "so what is console's tv well officially it's microsoft nosql database on azure",
    "start": "81840",
    "end": "87600"
  },
  {
    "text": "and when we say nosql what we mean is that cosmos db is both non-relational and also horizontally scalable so let me",
    "start": "87600",
    "end": "94799"
  },
  {
    "text": "dive into the horizontal scale aspects of cosmo cp unless your workload is really small",
    "start": "94799",
    "end": "100720"
  },
  {
    "text": "with just a little bit of data and requests you're likely going to be storing your data stored on a number of",
    "start": "100720",
    "end": "105840"
  },
  {
    "text": "different servers or what we call partitions within something we call a container",
    "start": "105840",
    "end": "111119"
  },
  {
    "text": "now in cosmos we abstract all this all this away but under the hood you're reading and writing data from across a",
    "start": "111119",
    "end": "117439"
  },
  {
    "text": "cluster of servers and this is better known as scale out and it's how we achieve this horizontal",
    "start": "117439",
    "end": "122799"
  },
  {
    "text": "scalability and it you know has some benefits enables practically unlimited storage uh theoretically unlimited or",
    "start": "122799",
    "end": "130160"
  },
  {
    "text": "infinite uh so when you need more servers we just simply keep adding more uh to the to your account",
    "start": "130160",
    "end": "136319"
  },
  {
    "text": "uh also because each of these servers has its own cpu and network card and",
    "start": "136319",
    "end": "141440"
  },
  {
    "text": "memory and io it also provides unlimited throughput to handle the request when",
    "start": "141440",
    "end": "146800"
  },
  {
    "text": "you need it for your database so cosmos tv is also non-relational now",
    "start": "146800",
    "end": "152800"
  },
  {
    "text": "when you're working with a relational database you have the ability to define relational constraints like you know joins and",
    "start": "152800",
    "end": "159280"
  },
  {
    "text": "um uh triggers and all these other different constraints foreign keys primary keys all these things",
    "start": "159280",
    "end": "165680"
  },
  {
    "text": "and this lets you do things like do joint operations across these different entity types",
    "start": "165680",
    "end": "171040"
  },
  {
    "text": "but in a database like cosmos db we don't implement any of these relational constraints now you may be asking why well because",
    "start": "171040",
    "end": "178159"
  },
  {
    "text": "cosmos is horizontally scalable and because your data is likely going to be spread across multiple servers could be",
    "start": "178159",
    "end": "184480"
  },
  {
    "text": "tens or hundreds of servers depending on your throughput and your storage needs now i don't want to suggest that it's",
    "start": "184480",
    "end": "190400"
  },
  {
    "text": "not technically possible to enforce relational constraints and put locks on data across a cluster of servers",
    "start": "190400",
    "end": "197680"
  },
  {
    "text": "but doing so could have enormous performance impacts and also can impact the availability of",
    "start": "197680",
    "end": "203519"
  },
  {
    "text": "your database if say one of those servers goes down and because cosmos is designed to provide predictable performance above",
    "start": "203519",
    "end": "210000"
  },
  {
    "text": "all else we don't really provide a way to declare these types of relational constraints and do this across a cluster of servers",
    "start": "210000",
    "end": "218159"
  },
  {
    "text": "so you may be asking well is cosmos even suitable for relational workloads and the answer is yes definitely",
    "start": "218159",
    "end": "224480"
  },
  {
    "text": "in fact most workloads on cosmos are relational uh you just need to learn the different techniques uh to implement",
    "start": "224480",
    "end": "230480"
  },
  {
    "text": "these relationships between your entities now this approach is very different than designing a data mall for a relational database",
    "start": "230480",
    "end": "236879"
  },
  {
    "text": "and for those of you that are new to this type of database you should not follow your intuitions here best practices in the relational world",
    "start": "236879",
    "end": "243840"
  },
  {
    "text": "don't translate well to this type of database and may even be an anti-pattern for us",
    "start": "243840",
    "end": "249760"
  },
  {
    "text": "okay so let's put this into practice i'm going to spend the rest of the session and i'm going to take a relational",
    "start": "249760",
    "end": "254879"
  },
  {
    "text": "database that i think anyone who's used sql server and hopefully that's most of you in this room uh should be familiar",
    "start": "254879",
    "end": "260000"
  },
  {
    "text": "with and that's the adventure works 2017 database well actually we're just going to take a subset of it now these tables represent",
    "start": "260000",
    "end": "267199"
  },
  {
    "text": "kind of a canonical e-commerce workload uh we've got our customer tables so i've got a",
    "start": "267199",
    "end": "272400"
  },
  {
    "text": "customer here and then i've got customer address uh and then of course i've got a customer password table in here and i've",
    "start": "272400",
    "end": "278800"
  },
  {
    "text": "got relationships defined between those things we've also got product tables so i've got my product table here we have a",
    "start": "278800",
    "end": "284960"
  },
  {
    "text": "product category table with a one-to-many relationship uh and then we have a product tag and then a mini",
    "start": "284960",
    "end": "290080"
  },
  {
    "text": "domain relationship to a product tags table uh within there so i've got a cross product of products and tags uh",
    "start": "290080",
    "end": "296880"
  },
  {
    "text": "stored within that table and then finally we've got our sales order so i've got sales order here uh",
    "start": "296880",
    "end": "302240"
  },
  {
    "text": "and then sales order detail now with a non-relational document database like cosmos db there isn't much",
    "start": "302240",
    "end": "308800"
  },
  {
    "text": "we can do with this as is you would never use these tables as is uh when you're trying to perform your operations",
    "start": "308800",
    "end": "315440"
  },
  {
    "text": "on it because the cost of accessing and managing this data would in fact be prohibitive another thing i want to",
    "start": "315440",
    "end": "321759"
  },
  {
    "text": "point out too is that in a relational database uh the relationship between the data is very important to modeling the",
    "start": "321759",
    "end": "328720"
  },
  {
    "text": "database for a database like cosmos this is actually only part of the story here what's most important when designing a",
    "start": "328720",
    "end": "335039"
  },
  {
    "text": "data model for a nosql database like cosmos is the access patterns for your data and as i go through this talk and",
    "start": "335039",
    "end": "341520"
  },
  {
    "text": "we remodel this data from relational database from a sql database to nosql database we're going to talk about these",
    "start": "341520",
    "end": "347680"
  },
  {
    "text": "access patterns and how it impacts the choices we're going to make when we're modeling our data",
    "start": "347680",
    "end": "353840"
  },
  {
    "text": "okay so let's talk about these access patterns for our app our real e-commerce platform would likely have a lot more",
    "start": "355120",
    "end": "362560"
  },
  {
    "text": "different types of operations they would need to do but for our purposes here we can kind of",
    "start": "362560",
    "end": "367680"
  },
  {
    "text": "boil it down to these operations here so for customers i want to create a customer edit a customer and then of",
    "start": "367680",
    "end": "373039"
  },
  {
    "text": "course i want to retrieve that customer particularly when they log in i need to create and edit product",
    "start": "373039",
    "end": "378560"
  },
  {
    "text": "categories i need to list all my categories i need to create and edit product tags and then list those",
    "start": "378560",
    "end": "384000"
  },
  {
    "text": "create and edit products and then i want to list all products from a category and i also want to include the name of",
    "start": "384000",
    "end": "390240"
  },
  {
    "text": "that category as well as the name of the tags in there and then finally i want to create a",
    "start": "390240",
    "end": "395759"
  },
  {
    "text": "sales order i need to list all sales orders for a customer that's a very frequent operation uh and then i've got another special",
    "start": "395759",
    "end": "402560"
  },
  {
    "text": "query in here i'm going to create top 10 customers by the number of sales orders uh let's",
    "start": "402560",
    "end": "408000"
  },
  {
    "text": "say i've got like a loyalty program and i need a way to identify my best customers so i can send them a special",
    "start": "408000",
    "end": "413280"
  },
  {
    "text": "gift every month maybe a gift card or something like that okay so those are kind of the main",
    "start": "413280",
    "end": "418319"
  },
  {
    "text": "operations uh that our ecommerce system is to do here so let's get started uh and we're going",
    "start": "418319",
    "end": "425199"
  },
  {
    "text": "to remodel this database from a relational model uh to a nosql model in cosmos db",
    "start": "425199",
    "end": "431199"
  },
  {
    "text": "and let's start with our customer entity here so we've got three tables here first thing i need to do is cosmos is a",
    "start": "431199",
    "end": "437120"
  },
  {
    "text": "json database store so we need to translate what we've got as tables uh into corresponding json documents within",
    "start": "437120",
    "end": "444000"
  },
  {
    "text": "cosmos tv now we could keep these in separate containers within cosmos db right the",
    "start": "444000",
    "end": "450560"
  },
  {
    "text": "container is kind of the logical wrapper around your data if you will uh for us",
    "start": "450560",
    "end": "456400"
  },
  {
    "text": "everything is a partition right that's the server right it sits on so the logical grouping of those things and",
    "start": "456400",
    "end": "462800"
  },
  {
    "text": "you can kind of think of it as a table but that's not quite the right way of thinking about it but let's talk about containers here now",
    "start": "462800",
    "end": "468960"
  },
  {
    "text": "we could store these as separate in separate containers uh but let's look at the operations we need to support here uh we've got to",
    "start": "468960",
    "end": "475680"
  },
  {
    "text": "create a customer we need to edit a customer and we need to retrieve a customer now",
    "start": "475680",
    "end": "481039"
  },
  {
    "text": "given that cosmos storage data is json another approach we could take here is to actually embed the address and the",
    "start": "481039",
    "end": "488400"
  },
  {
    "text": "password data into our customer table here or into our customer container now when i create a",
    "start": "488400",
    "end": "494080"
  },
  {
    "text": "new customer i only need to insert data into a single container it's all in one place",
    "start": "494080",
    "end": "499280"
  },
  {
    "text": "reading data is also easier because i only need to read from a single container as well so let me go into the portal and i want",
    "start": "499280",
    "end": "505520"
  },
  {
    "text": "to show you kind of the benefits you have with that so let me do my first little demo here",
    "start": "505520",
    "end": "512638"
  },
  {
    "text": "and here i've got uh well let me show you here i've got this is my cosmic works and by the way",
    "start": "516240",
    "end": "521919"
  },
  {
    "text": "i'll show you a link to where you can get all the stuff if you want to see it but what i've got here is a cosmos tv",
    "start": "521919",
    "end": "527120"
  },
  {
    "text": "account and i've got four versions of this database in here and this is the evolution of this data model as i go",
    "start": "527120",
    "end": "533839"
  },
  {
    "text": "from a very naive model here so i've got one customer one uh excuse me one",
    "start": "533839",
    "end": "539839"
  },
  {
    "text": "container per entity so each thing that was a table and say sql is now a container here",
    "start": "539839",
    "end": "545440"
  },
  {
    "text": "uh and then as i go through you will see that i'm going to evolve this data model so here you can see i've actually got",
    "start": "545440",
    "end": "551920"
  },
  {
    "text": "fewer containers in here because i'm evolving this model and i'm embedding data so",
    "start": "551920",
    "end": "557440"
  },
  {
    "text": "let's see uh what is the cost going to be and how many operations do i have to do if i use",
    "start": "557440",
    "end": "562720"
  },
  {
    "text": "a very naive like a relational law for databases here so this is going to query my customer container here",
    "start": "562720",
    "end": "569760"
  },
  {
    "text": "all right and let's run this one",
    "start": "569760",
    "end": "574080"
  },
  {
    "text": "and here's my customer here destiny peterson and let's take a look uh i can get the",
    "start": "575040",
    "end": "582240"
  },
  {
    "text": "cost of that query by clicking on query stats here in the portal and you can see uh about three are used per second uh",
    "start": "582240",
    "end": "589600"
  },
  {
    "text": "for the cost of that that's a request unit per second uh now let's get the customer address i need to get my customer address so they can we know",
    "start": "589600",
    "end": "595920"
  },
  {
    "text": "where to ship stuff or the customer can select their address to ship it and we'll run that query here",
    "start": "595920",
    "end": "602160"
  },
  {
    "text": "and where are you now there you are okay so i've got my address here",
    "start": "602160",
    "end": "607920"
  },
  {
    "text": "and let's get our query stats a little over 11 are used so a little more expensive",
    "start": "607920",
    "end": "613120"
  },
  {
    "text": "uh but there's probably a lot more investors under our customers in this database okay and last uh let's query the",
    "start": "613120",
    "end": "620480"
  },
  {
    "text": "customer password i need the password so when they log in i can get their password and verify that they're the",
    "start": "620480",
    "end": "626160"
  },
  {
    "text": "right person there so here i've got the password here for them and let's get that and",
    "start": "626160",
    "end": "631680"
  },
  {
    "text": "that's about three are you so i've got about three six and 11. so that's about 17 are you uh maybe a",
    "start": "631680",
    "end": "638000"
  },
  {
    "text": "little less on that uh and that's just one request and or one operation if you will which",
    "start": "638000",
    "end": "644000"
  },
  {
    "text": "is i need to retrieve that customer okay so i've got three queries three different requests and that's costing me",
    "start": "644000",
    "end": "649680"
  },
  {
    "text": "17 ru now let's try when i embed this data so this is from",
    "start": "649680",
    "end": "656880"
  },
  {
    "text": "my version 2 of my database and i'm going to run this one here here i've got",
    "start": "656880",
    "end": "662800"
  },
  {
    "text": "all of my customer data so here's the customer email name email address phone number here's their address",
    "start": "662800",
    "end": "669760"
  },
  {
    "text": "and then here's their password so what is the cost of that well it's just that 2.83 ru",
    "start": "669760",
    "end": "675680"
  },
  {
    "text": "on there so i've made an order of magnitude better performance at least cost for the for the database",
    "start": "675680",
    "end": "681839"
  },
  {
    "text": "but the other thing as well is that i've only i've done this in a single request so the latency is going to be better and less cpu usage on my client as well",
    "start": "681839",
    "end": "690240"
  },
  {
    "text": "okay so better performance when i embed data",
    "start": "690240",
    "end": "696240"
  },
  {
    "text": "like that and this is the nice thing about a database like cosmos db operations are faster and they're also",
    "start": "696240",
    "end": "702240"
  },
  {
    "text": "less expensive to execute because i've embedded this data inside a single container",
    "start": "702240",
    "end": "707680"
  },
  {
    "text": "okay so at this point people often ask well when would you embed data versus say reference that are stored as a",
    "start": "707680",
    "end": "713760"
  },
  {
    "text": "different row and there's actually some good rules of thumb around this uh in fact um",
    "start": "713760",
    "end": "720639"
  },
  {
    "text": "you generally want to embed data when there's a one-to-one relationship for that for the data for the entities",
    "start": "720880",
    "end": "726160"
  },
  {
    "text": "themselves in this case customer customer password there's a one-to-one relationship so that makes it a good candidate uh also",
    "start": "726160",
    "end": "732560"
  },
  {
    "text": "another uh scenario is a one-to-few relationship now you may be asking what is one to few",
    "start": "732560",
    "end": "737839"
  },
  {
    "text": "i know one to many but i've never heard of that one to few is a one-to-many relationship but it's a bounded relationship it's not",
    "start": "737839",
    "end": "744720"
  },
  {
    "text": "open-ended um you could think of customer address as a one-to-four relationship typically customers are",
    "start": "744720",
    "end": "750480"
  },
  {
    "text": "going to have a handful of addresses they want to ship to right they've got themselves maybe their mom their dad or their brother or sister or other",
    "start": "750480",
    "end": "757120"
  },
  {
    "text": "relatives they maybe have i don't know five six ten you know it's it's a bounded set uh uh",
    "start": "757120",
    "end": "763760"
  },
  {
    "text": "something that's unbounded likely would be maybe comments on a post for a blog or something right um i mean they may be",
    "start": "763760",
    "end": "770639"
  },
  {
    "text": "bounded in some respect but let's just say if your blog post got picked up on slashdot or something uh or on um",
    "start": "770639",
    "end": "778240"
  },
  {
    "text": "i don't know just went viral you've got thousands of posts uh at that point you're largely kind of unbounded at that point",
    "start": "778240",
    "end": "783680"
  },
  {
    "text": "uh and then the last scenario is if the entities uh are either queried or",
    "start": "783680",
    "end": "788880"
  },
  {
    "text": "updated together so that's another scenario because you're going to be able to do that in a",
    "start": "788880",
    "end": "794480"
  },
  {
    "text": "single request versus multiple requests like with our customer data here that data is always pretty much queried",
    "start": "794480",
    "end": "801600"
  },
  {
    "text": "uh at the same time or requests at the same time so that's a good relationship or that's a good scenario for putting that",
    "start": "801600",
    "end": "807120"
  },
  {
    "text": "together now you want to reference data when the items are in a one-to-many relationship right so that unbounded",
    "start": "807120",
    "end": "813920"
  },
  {
    "text": "relationship uh is what we're talking about also uh many-to-many relationships uh",
    "start": "813920",
    "end": "819199"
  },
  {
    "text": "you wanna reference that data uh you know there's also another thing you wanna you can do with it as well uh and",
    "start": "819199",
    "end": "824240"
  },
  {
    "text": "we'll talk about that a little bit later in our talk uh and then particularly when related items are either queried or",
    "start": "824240",
    "end": "830320"
  },
  {
    "text": "updated independently of each other this is also an area where",
    "start": "830320",
    "end": "835519"
  },
  {
    "text": "you should look at separating that data or storing it as different documents within your",
    "start": "835519",
    "end": "840560"
  },
  {
    "text": "container keep in mind that as documents get larger within cosmos db the cost of doing",
    "start": "840560",
    "end": "847920"
  },
  {
    "text": "operations on it can grow quite dramatically it's not linear if you will",
    "start": "847920",
    "end": "853519"
  },
  {
    "text": "so it can kind of grow like a hockey stick so if you have a pattern where you have kind of asymmetric updates",
    "start": "853519",
    "end": "859839"
  },
  {
    "text": "happening to say a small number of properties so i've got a small number of properties but i update those very very frequently",
    "start": "859839",
    "end": "865920"
  },
  {
    "text": "and then i have another set of properties maybe a larger set but i don't update as frequently that's a good scenario for where you would want to say",
    "start": "865920",
    "end": "872480"
  },
  {
    "text": "shred that document where you have your small number of properties that are updated quite frequently so there's high",
    "start": "872480",
    "end": "878000"
  },
  {
    "text": "concurrency with operations on there and then another document that has largely static data",
    "start": "878000",
    "end": "883360"
  },
  {
    "text": "and then if you want to bring it together you just query for it so that it brings back both documents and then you can deserialize that into your",
    "start": "883360",
    "end": "889440"
  },
  {
    "text": "classes and then use that within your application that's a better more efficient design",
    "start": "889440",
    "end": "894480"
  },
  {
    "text": "for a database like cosmos particularly if they're not used at the same time you really just want to be very",
    "start": "894480",
    "end": "900079"
  },
  {
    "text": "efficient with the request the payloads uh and and just be smart about how you're accessing that data and again it",
    "start": "900079",
    "end": "906720"
  },
  {
    "text": "comes down really to the access patterns for your data okay so uh we have our one to one and",
    "start": "906720",
    "end": "913360"
  },
  {
    "text": "one to few relationships between our entities here uh and because we retrieve all this data at one time it makes sense",
    "start": "913360",
    "end": "919440"
  },
  {
    "text": "to embed everything uh inside a single json document uh now that we've defined our first",
    "start": "919440",
    "end": "924639"
  },
  {
    "text": "entity we want to store this in our customer container uh that's what we'll call it we'll call it customer now when creating a new",
    "start": "924639",
    "end": "931360"
  },
  {
    "text": "container in cosmos db uh you you have to define a partition key for that data and you may be asking well",
    "start": "931360",
    "end": "937360"
  },
  {
    "text": "what is a partition key well remember earlier when i referred to cosmos db as",
    "start": "937360",
    "end": "942800"
  },
  {
    "text": "an abstraction over these different like a cluster of physical servers uh in here now when storing documents in",
    "start": "942800",
    "end": "950160"
  },
  {
    "text": "a cosmos db container these documents end up being dispatched to these different physical servers so the",
    "start": "950160",
    "end": "955839"
  },
  {
    "text": "question is well how do i decide which document goes to this server and which document goes to that server",
    "start": "955839",
    "end": "961120"
  },
  {
    "text": "now technically we don't really assign documents to servers here instead what we do is these documents are being",
    "start": "961120",
    "end": "966800"
  },
  {
    "text": "written to something we call a logical partition and it's these logical partitions that sit or reside on these",
    "start": "966800",
    "end": "973440"
  },
  {
    "text": "different physical servers or physical partitions and so from a user's perspective you don't really need to care about the physical servers we try",
    "start": "973440",
    "end": "980000"
  },
  {
    "text": "to abstract that away from you so you don't have to think about that sort of thing it's just you need to know that this",
    "start": "980000",
    "end": "986079"
  },
  {
    "text": "data is going to get to these different logical partitions okay so how do i decide which data how",
    "start": "986079",
    "end": "991680"
  },
  {
    "text": "this data gets stored on a logical partition well what we have is the partition key and so",
    "start": "991680",
    "end": "998160"
  },
  {
    "text": "when you define or create a new container in cosmos db uh you design this a property uh that's within each",
    "start": "998160",
    "end": "1005600"
  },
  {
    "text": "one of your documents and it decides which logical partition your data is going to go to",
    "start": "1005600",
    "end": "1011199"
  },
  {
    "text": "think of it as an address to kind of route your data right now using this example of a container",
    "start": "1011199",
    "end": "1017440"
  },
  {
    "text": "here we've got one that's partitioned by username so when we insert data with username of",
    "start": "1017440",
    "end": "1023360"
  },
  {
    "text": "say andrew it's going to go to that partition or with deborah or tim it'll go to the corresponding partition",
    "start": "1023360",
    "end": "1030640"
  },
  {
    "text": "that equals that for that user's name",
    "start": "1030640",
    "end": "1034558"
  },
  {
    "text": "okay so there's some constraints uh you need to keep an eye on uh when modeling your data uh for cosmos tv uh each",
    "start": "1036640",
    "end": "1044640"
  },
  {
    "text": "document have the maximum size of two megabytes now remember before when i said uh or when i was talking about when",
    "start": "1044640",
    "end": "1051440"
  },
  {
    "text": "doing bed versus when to reference uh one reason why you want to avoid uh these kind of unbounded arrays and there",
    "start": "1051440",
    "end": "1057919"
  },
  {
    "text": "are these unbounded one-to-many relationships is because your documents can't get any larger uh than two megabytes",
    "start": "1057919",
    "end": "1063919"
  },
  {
    "text": "uh it's also not efficient like i said before when you have large documents and you're only updating uh a small portion",
    "start": "1063919",
    "end": "1070400"
  },
  {
    "text": "of them right this these are these the cost of doing so can get prohibitive over time and it can increase the",
    "start": "1070400",
    "end": "1075919"
  },
  {
    "text": "latency when you're taking and moving a large chunk of data across the wire because every time you do an update",
    "start": "1075919",
    "end": "1082320"
  },
  {
    "text": "you're essentially replacing the entire document uh another thing to keep in mind too is",
    "start": "1082320",
    "end": "1087440"
  },
  {
    "text": "that each logical partition has a maximum size of 20 gigabytes so you can't have more than 20 gigabytes",
    "start": "1087440",
    "end": "1094160"
  },
  {
    "text": "where say username equals say andrew or debra for tim in there",
    "start": "1094160",
    "end": "1099280"
  },
  {
    "text": "okay well when working with data we want to strive to achieve an even distribution",
    "start": "1099280",
    "end": "1106320"
  },
  {
    "text": "of data across these different logical partitions so if one partition gets a lot more data",
    "start": "1106320",
    "end": "1112160"
  },
  {
    "text": "stored on it than the others this is what we call a hot partition and it's actually something you very much really want to avoid",
    "start": "1112160",
    "end": "1119039"
  },
  {
    "text": "same goes for the request as well if most or all of your requests hit that same logical partition this is going to",
    "start": "1119039",
    "end": "1125280"
  },
  {
    "text": "be a bottleneck that's going to drastically limit the overall scalability of your model keep in mind that as you provision",
    "start": "1125280",
    "end": "1132640"
  },
  {
    "text": "or add more storage and you add more physical partitions behind this thing you get additional cpu uh but you can't",
    "start": "1132640",
    "end": "1139039"
  },
  {
    "text": "like group that or put that cpu all in a single logical partition it has to be evenly spread right and so if you've got",
    "start": "1139039",
    "end": "1145280"
  },
  {
    "text": "additional physical partitions due to more logical partitions in here or more data",
    "start": "1145280",
    "end": "1150799"
  },
  {
    "text": "or you would provision additional throughput uh that provisions more physical partitions behind there um",
    "start": "1150799",
    "end": "1157520"
  },
  {
    "text": "it you have to the objective here is to make sure that you're using all of that available",
    "start": "1157520",
    "end": "1162720"
  },
  {
    "text": "throughput that you're getting otherwise what you get is you're going to get bottlenecks where say your requests are",
    "start": "1162720",
    "end": "1167840"
  },
  {
    "text": "also going to that same logical partition but your other partitions are just sitting idle not doing anything you're",
    "start": "1167840",
    "end": "1174480"
  },
  {
    "text": "paying for that throughput right you're paying for those physical partitions it's like a vm in that sense right so",
    "start": "1174480",
    "end": "1180320"
  },
  {
    "text": "why would you provision a massive vm and play solitaire on it or not use it for much it doesn't make sense right",
    "start": "1180320",
    "end": "1186559"
  },
  {
    "text": "economically or in any case it's the same thing for cosmos it's a provisioned environment you you provision these",
    "start": "1186559",
    "end": "1193760"
  },
  {
    "text": "resources as throughput or argues per second and then behind the scenes we provision all of these physical",
    "start": "1193760",
    "end": "1199280"
  },
  {
    "text": "resources in terms of these physical partitions or physical servers that are there to handle requests for",
    "start": "1199280",
    "end": "1206000"
  },
  {
    "text": "that data and store your data in there so this is very important that the thing you want",
    "start": "1206000",
    "end": "1211600"
  },
  {
    "text": "to achieve here is this even distribution of storage",
    "start": "1211600",
    "end": "1217840"
  },
  {
    "text": "and even distribution of throughput or requests that are accessing the data on each of these different logical",
    "start": "1217840",
    "end": "1223120"
  },
  {
    "text": "partitions so partition key plays an important role in both the performance and scalability",
    "start": "1223120",
    "end": "1228159"
  },
  {
    "text": "in fact it's absolutely critical uh in terms of that so let's take an example here where i've got my partition or my",
    "start": "1228159",
    "end": "1234720"
  },
  {
    "text": "my container that's partitioned by username and i'm going to use this sql query select star from c where c dot username",
    "start": "1234720",
    "end": "1240640"
  },
  {
    "text": "equals mark now you'll notice that this filter or this where condition uses",
    "start": "1240640",
    "end": "1245840"
  },
  {
    "text": "my partition key and this is a good thing because uh my query knows exactly where to send uh or my my console says",
    "start": "1245840",
    "end": "1253440"
  },
  {
    "text": "exactly where to send that query to go get that data so this is always going to perform rather well",
    "start": "1253440",
    "end": "1260960"
  },
  {
    "text": "uh because it's going to hit that same foot that one physical uh partition or server now uh let's try something else",
    "start": "1260960",
    "end": "1267039"
  },
  {
    "text": "so let's say i filtered by like favorite color here uh we would have no idea where these results are so in this case",
    "start": "1267039",
    "end": "1273520"
  },
  {
    "text": "cosmo cb is going to do what we call a fan out and it's going to hit every logical partition that does every",
    "start": "1273520",
    "end": "1278880"
  },
  {
    "text": "physical partition under underlyingness and this is what we call also a cross-partition query and",
    "start": "1278880",
    "end": "1286159"
  },
  {
    "text": "meaning it's going to hit every one of these for these physical partitions now this query will work but it's going",
    "start": "1286159",
    "end": "1292000"
  },
  {
    "text": "to have an impact on latency because it has to go and hit all these different servers and it's also going to have an",
    "start": "1292000",
    "end": "1297679"
  },
  {
    "text": "impact on cost because this is going to be a rather expensive query to be able to run",
    "start": "1297679",
    "end": "1303280"
  },
  {
    "text": "now with small containers or small workloads or databases where you don't have much data the performance",
    "start": "1303280",
    "end": "1309360"
  },
  {
    "text": "impact here is not that bad in fact this is kind of one of the insidious things about a scale-out database like cosmos",
    "start": "1309360",
    "end": "1314960"
  },
  {
    "text": "is if you test something like this and try to benchmark it with a low amount of data you're not going to see really",
    "start": "1314960",
    "end": "1321520"
  },
  {
    "text": "significant performance issues with it this is something that you don't really notice that you've got a problem until",
    "start": "1321520",
    "end": "1326640"
  },
  {
    "text": "you get into say a larger more scaled out environment or into production i see this quite often where uh developers",
    "start": "1326640",
    "end": "1333440"
  },
  {
    "text": "will go and they'll build in the design and they'll test and everything's looking good and then they go and put in production",
    "start": "1333440",
    "end": "1338480"
  },
  {
    "text": "start scaling it up and then they realize they've got huge problems with performance this is something you really",
    "start": "1338480",
    "end": "1344159"
  },
  {
    "text": "need to test and understand uh not just the access patterns but also the frequency of them as well uh so that you",
    "start": "1344159",
    "end": "1350559"
  },
  {
    "text": "can understand how is your data going to grow over time how are the requests going to grow as you get an additional load on this thing so that you can make",
    "start": "1350559",
    "end": "1357440"
  },
  {
    "text": "sure that you're designed for scale uh in the future um",
    "start": "1357440",
    "end": "1362960"
  },
  {
    "text": "okay well let's keep going so with all that knowledge now about partitioning uh how do we choose uh what's the right",
    "start": "1362960",
    "end": "1369760"
  },
  {
    "text": "partition key for our container here well again we're going to look to the",
    "start": "1369760",
    "end": "1375120"
  },
  {
    "text": "access patterns right and the operations we're going to do now i said we're going to create a customer and we're going to",
    "start": "1375120",
    "end": "1380159"
  },
  {
    "text": "edit a customer now those aren't operations we're going to do very frequently right you're only going to well obviously create a customer once or",
    "start": "1380159",
    "end": "1385919"
  },
  {
    "text": "every customer you've got and then they frequently are discovering infrequently would update the thing that",
    "start": "1385919",
    "end": "1391360"
  },
  {
    "text": "they're going to do is they're going to you're going to retrieve a customer that's going to be your high concurrency operation there and we're going to",
    "start": "1391360",
    "end": "1397679"
  },
  {
    "text": "retrieve them most commonly by id within there so this makes a good uh",
    "start": "1397679",
    "end": "1404400"
  },
  {
    "text": "partition key for our container",
    "start": "1404400",
    "end": "1408080"
  },
  {
    "text": "hold that slide okay uh no now one thing i want to point out is",
    "start": "1410159",
    "end": "1415600"
  },
  {
    "text": "that when using the id as a partition key for the container we end up with as many logical partitions as there are",
    "start": "1415600",
    "end": "1421360"
  },
  {
    "text": "documents in the container uh with each logical partition containing only a single document uh and most people you",
    "start": "1421360",
    "end": "1427840"
  },
  {
    "text": "know come and ask me like is that a problem and frankly the answer is no it's actually okay logical partitions are a virtual concept",
    "start": "1427840",
    "end": "1434960"
  },
  {
    "text": "uh you don't have to worry about that we will code to co-locate these on the physical partitions behind there and",
    "start": "1434960",
    "end": "1440480"
  },
  {
    "text": "then move them around as we need to as they as they kind of grow in size and there's no upper limit to how many",
    "start": "1440480",
    "end": "1446000"
  },
  {
    "text": "logical dishes you can have in a container in fact when you partition by id uh within a database like cosmos db",
    "start": "1446000",
    "end": "1451919"
  },
  {
    "text": "you functionally have like a key value store like a redis almost what's in there so it's not a problem at all okay",
    "start": "1451919",
    "end": "1457919"
  },
  {
    "text": "so let's do a demo i showed you how to query before uh",
    "start": "1457919",
    "end": "1463279"
  },
  {
    "text": "with uh the portal uh let's show you the sdk as well in here all right so",
    "start": "1463279",
    "end": "1469600"
  },
  {
    "text": "let me go and pull up where are we here we go",
    "start": "1469600",
    "end": "1475279"
  },
  {
    "text": "all right that's the portal now what i've got is i've got a",
    "start": "1475279",
    "end": "1481919"
  },
  {
    "text": "visual studio app here and i'll show you the code for this and actually i'll show you the link how to download all this if you want to",
    "start": "1481919",
    "end": "1487919"
  },
  {
    "text": "and we're going to run a couple of different operations here so i'm going to create a customer here so",
    "start": "1487919",
    "end": "1493120"
  },
  {
    "text": "here's my uh function to create a customer i'm going to get an instance to my database here that's",
    "start": "1493120",
    "end": "1498320"
  },
  {
    "text": "database v2 so this is my now embedded newly uh higher you know json friendly",
    "start": "1498320",
    "end": "1505360"
  },
  {
    "text": "customer data all modeled up in here and then i've got my customer id this is the same customer id i used before",
    "start": "1505360",
    "end": "1511919"
  },
  {
    "text": "i'm going to define my query select star from c where c dot id equals that id",
    "start": "1511919",
    "end": "1517919"
  },
  {
    "text": "i want to because i want to use my partition key as my filter right as my where clause here",
    "start": "1517919",
    "end": "1523600"
  },
  {
    "text": "and then here's the code to define my query here i've got my item query iterator",
    "start": "1523600",
    "end": "1529200"
  },
  {
    "text": "pass in my sql text there and then i'm defining a parameter at customer id",
    "start": "1529200",
    "end": "1535200"
  },
  {
    "text": "and then i'm going to pass in my partition key which is also my customer id now you don't have to do this uh when",
    "start": "1535200",
    "end": "1542559"
  },
  {
    "text": "you're running queries in consoles db but uh this is a good best practice because it better",
    "start": "1542559",
    "end": "1548080"
  },
  {
    "text": "uh provides kind of more self-documenting code so i know what the partition key is for my container here it also just",
    "start": "1548080",
    "end": "1554640"
  },
  {
    "text": "slightly reduces the overhead so that the query engine doesn't have to go and figure out okay what's the partition key",
    "start": "1554640",
    "end": "1560080"
  },
  {
    "text": "uh here that i'm going to use uh and then i'm going to write out something uh here and then loop through",
    "start": "1560080",
    "end": "1566400"
  },
  {
    "text": "although i'm just getting a single customer uh called renex async and then i'll loop through that customer in my",
    "start": "1566400",
    "end": "1572400"
  },
  {
    "text": "response object and then print it out i'm also going to show you the request charge uh that comes out of the response",
    "start": "1572400",
    "end": "1577919"
  },
  {
    "text": "object here uh there's lots of good stuff that comes out of the response object in our in our operations here i",
    "start": "1577919",
    "end": "1584080"
  },
  {
    "text": "won't go into them here but the one i'll care about most is the request charge because i want to measure uh the performance here so let's run",
    "start": "1584080",
    "end": "1591600"
  },
  {
    "text": "my query this is operation a query for a single customer",
    "start": "1591600",
    "end": "1597639"
  },
  {
    "text": "uh that's taking a second i haven't warmed this up uh so that's just making its first connection so the latency here is not normal in",
    "start": "1598080",
    "end": "1604960"
  },
  {
    "text": "fact here let's throw this run again i'll show you there you go it's pretty fast",
    "start": "1604960",
    "end": "1610240"
  },
  {
    "text": "so there's my customer same customer destiny peterson as before their email address phone number great date address",
    "start": "1610240",
    "end": "1617120"
  },
  {
    "text": "in here and their password and you can see here's the same cost request charge uh 2.83 ru",
    "start": "1617120",
    "end": "1624000"
  },
  {
    "text": "in there so that's called that's accruing a customer in there now",
    "start": "1624000",
    "end": "1629440"
  },
  {
    "text": "one thing i want to point out is uh we know the partition key uh for our",
    "start": "1629440",
    "end": "1634480"
  },
  {
    "text": "customer and also we're getting just a single we have the partition key and the id uh here as well because it's the same",
    "start": "1634480",
    "end": "1641120"
  },
  {
    "text": "thing we're also just getting a single uh item single document row of data if",
    "start": "1641120",
    "end": "1647279"
  },
  {
    "text": "we will and when we're doing that we can use another operation in cosmos which is called a point read",
    "start": "1647279",
    "end": "1653600"
  },
  {
    "text": "now let me show you how to do that so i'm going to do get the same database and container here same customer id",
    "start": "1653600",
    "end": "1659120"
  },
  {
    "text": "and i'm going to use a different operation here called read item async and i'm going to pass in two things i'm going to pass in the id for the customer",
    "start": "1659120",
    "end": "1665840"
  },
  {
    "text": "and i'm going to pass in the partition key for the customer both of these are required to call that data and then i'm",
    "start": "1665840",
    "end": "1671440"
  },
  {
    "text": "going to print out my response here and then print the request check for that so let me show you that operation here",
    "start": "1671440",
    "end": "1677600"
  },
  {
    "text": "that's b now i don't know if you noticed but that came back quite a bit faster",
    "start": "1677600",
    "end": "1683520"
  },
  {
    "text": "than the other one and the other thing i want you to notice is look at the request charge it's only a single ru uh",
    "start": "1683520",
    "end": "1689039"
  },
  {
    "text": "and what i want to point out here is that when you know the id and the partition key and you're just looking up a single item of data",
    "start": "1689039",
    "end": "1695440"
  },
  {
    "text": "especially if it's a high concurrency operation use a point read right the nice thing about these is they're less expensive because they don't go through",
    "start": "1695440",
    "end": "1702000"
  },
  {
    "text": "our query engine they're faster because they don't go through our query engine a point read using direct mode for our sdk",
    "start": "1702000",
    "end": "1707919"
  },
  {
    "text": "v3 which is the default goes directly to our backend data store the partition key will tell it where is this physical",
    "start": "1707919",
    "end": "1714720"
  },
  {
    "text": "where's the physical server right because we have a mapping of uh logical partition key ranges it's a",
    "start": "1714720",
    "end": "1720080"
  },
  {
    "text": "hash to what physical server it sits on and that sits inside the sdk when you initially connect to the container and",
    "start": "1720080",
    "end": "1726159"
  },
  {
    "text": "so when i pass in that partition key it says where is this data physically located we route the request directly to",
    "start": "1726159",
    "end": "1731600"
  },
  {
    "text": "that physical server that physical partition and then the id is used to do the index right the index seek to find",
    "start": "1731600",
    "end": "1737840"
  },
  {
    "text": "that row of data that document and then retrieve it back immediately so always use these they're much much faster",
    "start": "1737840",
    "end": "1743760"
  },
  {
    "text": "especially for high concurrency reads where you're pulling back just a single row of data okay let's go back to slides",
    "start": "1743760",
    "end": "1752039"
  },
  {
    "text": "okay there's my coffee here probably cold by now all right",
    "start": "1759279",
    "end": "1766440"
  },
  {
    "text": "all right next let's look at product tables here first up is my product category table",
    "start": "1766480",
    "end": "1773200"
  },
  {
    "text": "we're gonna do the same thing we did earlier uh which is translating this entity into a json document",
    "start": "1773200",
    "end": "1778720"
  },
  {
    "text": "and we're going to store that in a container and we'll call that unsurprisingly product category uh next",
    "start": "1778720",
    "end": "1784399"
  },
  {
    "text": "we need to figure out the partition key uh for this container here what are we going to use and again we're going to look at the",
    "start": "1784399",
    "end": "1790399"
  },
  {
    "text": "request that we need to support an app and here we need to create a product category we need to edit a product",
    "start": "1790399",
    "end": "1795600"
  },
  {
    "text": "category uh and we also need to list all product categories so uh",
    "start": "1795600",
    "end": "1801120"
  },
  {
    "text": "this is the query that we would use to get all of those out of there now i want to point out when you're",
    "start": "1801120",
    "end": "1806640"
  },
  {
    "text": "looking at the operations it's important to know the volume of these operations as well for instance we aren't creating or editing product categories very often",
    "start": "1806640",
    "end": "1813039"
  },
  {
    "text": "uh but we are going to list them uh quite frequently there is another issue here we have as well which is there's no filter wear on",
    "start": "1813039",
    "end": "1820159"
  },
  {
    "text": "this query so how do we make this a single partition query uh because for high concurrency operations we want to",
    "start": "1820159",
    "end": "1826000"
  },
  {
    "text": "try to at least achieve that um and again we'll look at the uh sorry uh",
    "start": "1826000",
    "end": "1832000"
  },
  {
    "text": "here we need to uh what's going on my slide hold on sorry okay so the answer here is i'm going to",
    "start": "1832000",
    "end": "1838720"
  },
  {
    "text": "use a little trick uh we're going to apply here and we're going to create a new property and we're going to give it a constant value in our document so here",
    "start": "1838720",
    "end": "1845120"
  },
  {
    "text": "i've created this new property called type and i've given it a constant value called category within each document now",
    "start": "1845120",
    "end": "1851760"
  },
  {
    "text": "a couple things i want to point out here is one there's not much data in product category",
    "start": "1851760",
    "end": "1857360"
  },
  {
    "text": "for this thing so in fact i don't need to use this type of technique to create a single partition query for this thing",
    "start": "1857360",
    "end": "1863279"
  },
  {
    "text": "i could just leave this in its own container and just call select star from c and just get back all the categories",
    "start": "1863279",
    "end": "1869600"
  },
  {
    "text": "there's only i think about 37 categories in adventure works so it's not for performance that i'm",
    "start": "1869600",
    "end": "1874960"
  },
  {
    "text": "doing this i actually have another reason why i'm creating or modeling my data this way and i'm going to show you",
    "start": "1874960",
    "end": "1881919"
  },
  {
    "text": "a little bit later in my talk because this is actually going to make a lot of sense and i know for most of you it probably looks pretty weird here",
    "start": "1881919",
    "end": "1888320"
  },
  {
    "text": "so let me do i'll do a little demo here and i'll show you the queries for that here",
    "start": "1888320",
    "end": "1894320"
  },
  {
    "text": "so we're going to create product by category id here so let me show you this function here",
    "start": "1894320",
    "end": "1899360"
  },
  {
    "text": "um you know uh sorry i want to list all product",
    "start": "1899360",
    "end": "1905200"
  },
  {
    "text": "categories there we go so getting my container product category",
    "start": "1905200",
    "end": "1911360"
  },
  {
    "text": "select star from c where c dot type equals category here's my query definition here my partition key is",
    "start": "1911360",
    "end": "1917760"
  },
  {
    "text": "going to be the value for that is going to be category because i'm just using that constant value and then i'm going to loop all through",
    "start": "1917760",
    "end": "1923840"
  },
  {
    "text": "these here and show you my request charge so let's list all product categories here",
    "start": "1923840",
    "end": "1929440"
  },
  {
    "text": "and here you can see got them all back there's a bunch of them in here i think it's 37 total",
    "start": "1929440",
    "end": "1935200"
  },
  {
    "text": "and my request charge is 4.04 and honestly if i just did this as a select star from c with no filter uh",
    "start": "1935200",
    "end": "1941760"
  },
  {
    "text": "it's going to be pretty much the same cost here because like i said this container is very very small",
    "start": "1941760",
    "end": "1948840"
  },
  {
    "text": "okay let's go back all right next uh we're gonna look at product tags here so i'm gonna apply the",
    "start": "1949200",
    "end": "1956559"
  },
  {
    "text": "same technique i did here i'm gonna put this into a json document uh and i'm gonna put it in its own container called",
    "start": "1956559",
    "end": "1962640"
  },
  {
    "text": "product tag uh and turns out uh i have the same exact uh access patterns here",
    "start": "1962640",
    "end": "1968559"
  },
  {
    "text": "uh so i'm just gonna apply that same strategy uh here uh that i did with product category and i'm gonna give it a",
    "start": "1968559",
    "end": "1975440"
  },
  {
    "text": "property called type and i'm going to give it a value of tag so that's going to have the same value for",
    "start": "1975440",
    "end": "1980960"
  },
  {
    "text": "each product tag in the product tag container there all right next let's look at products",
    "start": "1980960",
    "end": "1987039"
  },
  {
    "text": "uh first i want to translate to the json schema next i want to look at my relationship",
    "start": "1987039",
    "end": "1992159"
  },
  {
    "text": "between product tags and tables so our product table has as many as this many-to-many relationship with tags and",
    "start": "1992159",
    "end": "1999039"
  },
  {
    "text": "i need to access the product tags in my application meaning that when i display a product i need the tags to appear for",
    "start": "1999039",
    "end": "2005200"
  },
  {
    "text": "that as well i may also want to be able to query for a tag at some point as well now i could",
    "start": "2005200",
    "end": "2010559"
  },
  {
    "text": "do this in one of two ways in here i could store my product info in my product tags table or i could",
    "start": "2010559",
    "end": "2015840"
  },
  {
    "text": "materialize the tags in my product table embed them now there's much fewer",
    "start": "2015840",
    "end": "2021840"
  },
  {
    "text": "tags for product than products for tags so it makes more sense actually to embed this",
    "start": "2021840",
    "end": "2027039"
  },
  {
    "text": "in my product table and do that as an array remember too there's a one-to-foue relationship between products and tags",
    "start": "2027039",
    "end": "2032720"
  },
  {
    "text": "so this makes it actually a good candidate for embedding in our workload here next we're going to store our product",
    "start": "2032720",
    "end": "2038960"
  },
  {
    "text": "data in a product container we'll call that product and now let's figure out a good",
    "start": "2038960",
    "end": "2044399"
  },
  {
    "text": "partition key so again we'll look at the operations we want to support here and decide how we're going to do it so",
    "start": "2044399",
    "end": "2049599"
  },
  {
    "text": "of course we need to create and edit a product but the interesting operation here is we need to query for products",
    "start": "2049599",
    "end": "2055679"
  },
  {
    "text": "and we're going to do that by category in this scenario here because this may be at least we think this is how we're going to search for products so we want",
    "start": "2055679",
    "end": "2062560"
  },
  {
    "text": "to list all products that match a specific category so the corresponding query here is select star from c",
    "start": "2062560",
    "end": "2068960"
  },
  {
    "text": "where c category id equals say category a and this will return all the products",
    "start": "2068960",
    "end": "2074960"
  },
  {
    "text": "for that category so in order to make this a single partition query then",
    "start": "2074960",
    "end": "2080480"
  },
  {
    "text": "we would need to have all products in the same category sit in that same logical partition",
    "start": "2080480",
    "end": "2086638"
  },
  {
    "text": "so category id is what we're going to use as our parts secure here as it allows us to retrieve all of our products in a category very efficiently",
    "start": "2086639",
    "end": "2095040"
  },
  {
    "text": "now another problem i've got is that every time i create for products using my category",
    "start": "2095040",
    "end": "2100800"
  },
  {
    "text": "i get the category id uh and then also a bunch of tag ids that come back because remember this is what",
    "start": "2100800",
    "end": "2106800"
  },
  {
    "text": "our table looked like before right is where are you right i got category id in",
    "start": "2106800",
    "end": "2112000"
  },
  {
    "text": "here and then i just got my tag ids that i've embedded in here but what i need to",
    "start": "2112000",
    "end": "2117680"
  },
  {
    "text": "show when i keep going here is i want to show the category name uh for the",
    "start": "2117680",
    "end": "2122720"
  },
  {
    "text": "products in there right i need to show that that's the design for the app is to have it on there also the tag ids don't",
    "start": "2122720",
    "end": "2128320"
  },
  {
    "text": "make any sense uh if i display those on a page i want to show the name of those tags uh within there so how am i going",
    "start": "2128320",
    "end": "2134160"
  },
  {
    "text": "to do this well first i need to run my first query to get all of the all the products for that category",
    "start": "2134160",
    "end": "2139599"
  },
  {
    "text": "and then i need to go and issue a second query to my product category container to get all those back",
    "start": "2139599",
    "end": "2145280"
  },
  {
    "text": "and then because i have a bunch of product ids or tag ids that come back for each product i have to go and run",
    "start": "2145280",
    "end": "2151280"
  },
  {
    "text": "successive queries for each product that comes back and go and get all the the tag names uh for each of those tag",
    "start": "2151280",
    "end": "2157680"
  },
  {
    "text": "ids now this could work but it's not very scalable and you may be asking well hey",
    "start": "2157680",
    "end": "2162960"
  },
  {
    "text": "why not just join this stuff right well again remember cosmos db is a non-relational data store",
    "start": "2162960",
    "end": "2169760"
  },
  {
    "text": "we don't support joins across containers uh data that's modeled uh for this type of data store is optimized such that it",
    "start": "2169760",
    "end": "2176720"
  },
  {
    "text": "can be served in a single request and that's the uh that's the the objective that you want to apply here so to our",
    "start": "2176720",
    "end": "2183520"
  },
  {
    "text": "products table then uh what we're gonna do is we're going to add some additional properties we're going to add a category name here we're going to serial or it's",
    "start": "2183520",
    "end": "2190000"
  },
  {
    "text": "going to embed that in the table here and then for each of the tags in the tag array there we can uh we're also going",
    "start": "2190000",
    "end": "2196240"
  },
  {
    "text": "to embed the name for those tags as well and so by doing this now we can make sure that we can retrieve all the",
    "start": "2196240",
    "end": "2202079"
  },
  {
    "text": "products for the category and get all the data we need and do that in just one request",
    "start": "2202079",
    "end": "2207440"
  },
  {
    "text": "okay so let's query a product uh here by category name and get all the tag names back",
    "start": "2207440",
    "end": "2214640"
  },
  {
    "text": "whoops sorry all right let me go back sorry",
    "start": "2214640",
    "end": "2220560"
  },
  {
    "text": "okay",
    "start": "2220560",
    "end": "2222800"
  },
  {
    "text": "all right so we're going to run this function here query products by category id",
    "start": "2226960",
    "end": "2233200"
  },
  {
    "text": "and here i've got my database reference here's my product uh container here",
    "start": "2233200",
    "end": "2239119"
  },
  {
    "text": "uh and here's my category name so it's called components comma headsets and here's the category id that i'm going to",
    "start": "2239119",
    "end": "2244800"
  },
  {
    "text": "use and here's my query select star from c where c dot category id equals at category id",
    "start": "2244800",
    "end": "2251280"
  },
  {
    "text": "again this should be familiar here's my query definition my parameter that i'm passing in and my partition key as well",
    "start": "2251280",
    "end": "2257359"
  },
  {
    "text": "right okay and then i'm just gonna loop through those and then show all the products for that category",
    "start": "2257359",
    "end": "2263359"
  },
  {
    "text": "so let's run this one here this is option d query product by category id",
    "start": "2263359",
    "end": "2269599"
  },
  {
    "text": "and you can see i've got one product here two three products and i've got all the data",
    "start": "2269599",
    "end": "2276480"
  },
  {
    "text": "i need for them i have the category name the sku the name description price uh my array of tags with the id",
    "start": "2276480",
    "end": "2284320"
  },
  {
    "text": "and the name of the tag in there for each of the products i've got three products here and then the total cost of this is 2.91 ru uh so that's a good and",
    "start": "2284320",
    "end": "2292960"
  },
  {
    "text": "efficient query uh for our database here okay let me",
    "start": "2292960",
    "end": "2300000"
  },
  {
    "text": "all right let's go back to slides",
    "start": "2300000",
    "end": "2306960"
  },
  {
    "text": "okay so now we've created uh our we create our new product uh well what we",
    "start": "2307760",
    "end": "2312960"
  },
  {
    "text": "need to do is we need to populate these additional properties right so",
    "start": "2312960",
    "end": "2318320"
  },
  {
    "text": "what if we rename a product uh category or name a tag right so we've got a problem here in that we've",
    "start": "2318320",
    "end": "2324160"
  },
  {
    "text": "materialized that name and for the category and the tags uh in our product container right by denormalizing this",
    "start": "2324160",
    "end": "2330720"
  },
  {
    "text": "stuff and embedding it within there so the product the problem here is what if i rename one of those things right how",
    "start": "2330720",
    "end": "2336400"
  },
  {
    "text": "do i manage referential integrity uh between these containers well as it turns out cosmos has a really good way",
    "start": "2336400",
    "end": "2342240"
  },
  {
    "text": "of being able to handle that and it's called change feed change feeds an api that lives within",
    "start": "2342240",
    "end": "2347520"
  },
  {
    "text": "every cosmos db container in fact it actually lives within every physical partition within a container",
    "start": "2347520",
    "end": "2353280"
  },
  {
    "text": "but frankly you don't need to know that it's exposed through the container object so whenever data is written",
    "start": "2353280",
    "end": "2359520"
  },
  {
    "text": "to cosmos db such as an insert or an update in this case change speed can stream these changes to",
    "start": "2359520",
    "end": "2364960"
  },
  {
    "text": "an api to a delegate specifically that you can listen to and then use that event to respond to the data that was",
    "start": "2364960",
    "end": "2370880"
  },
  {
    "text": "changed so in our case we want to list some changes that occur to our product category container as well as our",
    "start": "2370880",
    "end": "2377040"
  },
  {
    "text": "product tag container and then every time that data is updated we want to propagate that change to the product",
    "start": "2377040",
    "end": "2382240"
  },
  {
    "text": "container uh accordingly okay so in this demo uh this one's fine i'm gonna show you how to use change",
    "start": "2382240",
    "end": "2388400"
  },
  {
    "text": "feed to do this so first i'm gonna query the product container for a specific category and then we'll count how many uh products we",
    "start": "2388400",
    "end": "2394880"
  },
  {
    "text": "have in that category i'm then going to update the category's name uh within the product category container and then i'll",
    "start": "2394880",
    "end": "2400480"
  },
  {
    "text": "show you how changeview handles those changes and then propagates that to the product container okay let's go back to code",
    "start": "2400480",
    "end": "2409880"
  },
  {
    "text": "okay so uh we're gonna create products for category we've",
    "start": "2410640",
    "end": "2416400"
  },
  {
    "text": "already shown you that one uh here here's i've got i haven't shown",
    "start": "2416400",
    "end": "2422079"
  },
  {
    "text": "you this one so this is what we're going to run we're going to run this one first this is create products for category and the category name i'm going to get here",
    "start": "2422079",
    "end": "2427920"
  },
  {
    "text": "is accessories tires and tubes okay and then we're going to do a count on that to see how many products we have within",
    "start": "2427920",
    "end": "2434079"
  },
  {
    "text": "that category next i'm going to update the product category here so i've got my product category",
    "start": "2434079",
    "end": "2440079"
  },
  {
    "text": "container here's my category name and then i'm going to make a very small change here i'm just going to change the word and and i'm going to replace it",
    "start": "2440079",
    "end": "2446640"
  },
  {
    "text": "with an ampersand instead okay and then i'm going to call this uh so here's i'm creating a new product",
    "start": "2446640",
    "end": "2452000"
  },
  {
    "text": "category object here and then here you can see i'm changing the name of that there and then i'm",
    "start": "2452000",
    "end": "2458560"
  },
  {
    "text": "going to call this function replace item async and that takes three things it takes a partition key it takes an id and then it",
    "start": "2458560",
    "end": "2465839"
  },
  {
    "text": "takes the item itself and that's the new product updated product category that i'm passed here",
    "start": "2465839",
    "end": "2471280"
  },
  {
    "text": "okay uh next i want to show you change feed so it's very simple",
    "start": "2471280",
    "end": "2477119"
  },
  {
    "text": "actually and i've only got two things in here i've got a main function so my entry function in here and it's",
    "start": "2477119",
    "end": "2483760"
  },
  {
    "text": "got a a reference to a thing called a lease container now lee's container is",
    "start": "2483760",
    "end": "2490960"
  },
  {
    "text": "functionally kind of a like a checkpoint kind of container so it keeps track of",
    "start": "2490960",
    "end": "2496319"
  },
  {
    "text": "the last time you picked up any changes from there to whatever's not changed in there so",
    "start": "2496319",
    "end": "2502160"
  },
  {
    "text": "you and how change feed works is that it will pull that lease container like every second and say hey is there any new changes",
    "start": "2502160",
    "end": "2508640"
  },
  {
    "text": "since the last time i was here and if there are it gives them back to you and the way that shows up is that it shows",
    "start": "2508640",
    "end": "2514560"
  },
  {
    "text": "up in this delegate here input and it comes back as an innumerable or i read only collection and you can deserialize",
    "start": "2514560",
    "end": "2521119"
  },
  {
    "text": "that into some type if you know what it is in here in this case we're going to deserialize that as product category",
    "start": "2521119",
    "end": "2527680"
  },
  {
    "text": "next i'm going to create a new list of tasks in here that i'm going to use to dispatch the",
    "start": "2527680",
    "end": "2533359"
  },
  {
    "text": "changes that come back and then i'm going to iterate through each of the items that come back in this i read only",
    "start": "2533359",
    "end": "2539119"
  },
  {
    "text": "collection and i'm going to pull out the category id and the category name because i'm listening to that container",
    "start": "2539119",
    "end": "2546480"
  },
  {
    "text": "and then i'm going to do something with this data that comes in in this case i'm going to call update product category",
    "start": "2546480",
    "end": "2551920"
  },
  {
    "text": "name and i'm going to pass in the category id and the new name that comes in and then i'm going to call as i go and i",
    "start": "2551920",
    "end": "2558079"
  },
  {
    "text": "iterate and i add those although the task list i'm just going to call when all on that and then dispatch all those",
    "start": "2558079",
    "end": "2563440"
  },
  {
    "text": "to go and run now let's look at update product category name here so this is the function i'm going to call first",
    "start": "2563440",
    "end": "2569119"
  },
  {
    "text": "thing i need to do is i need to query for all products with that category uh so that's gonna here's my my my sql",
    "start": "2569119",
    "end": "2576319"
  },
  {
    "text": "statement here uh and then this is going against the product container so i'm gonna have i have two references at the",
    "start": "2576319",
    "end": "2582880"
  },
  {
    "text": "top here you'll see i've got my product category container reference that i'm listening to and my product container",
    "start": "2582880",
    "end": "2589520"
  },
  {
    "text": "this is the container i'm gonna actually make the change to in here so this is the so i'll keep this reference",
    "start": "2589520",
    "end": "2595520"
  },
  {
    "text": "i've got a query here to get back all the products for that category and i'm going to",
    "start": "2595520",
    "end": "2600880"
  },
  {
    "text": "iterate through each of those here right and as i iterate through each of those i come back in the response",
    "start": "2600880",
    "end": "2606560"
  },
  {
    "text": "i'm going to do a couple of things i'm going to make a count here so i'm just going to increment this to see how many products we updated",
    "start": "2606560",
    "end": "2613119"
  },
  {
    "text": "i'm then going to change the name of the category right here so product.category name equals my new category name that uh",
    "start": "2613119",
    "end": "2619839"
  },
  {
    "text": "passed into this function and then for each product that i get back in my response i'm going to call",
    "start": "2619839",
    "end": "2625280"
  },
  {
    "text": "replace item async on the product itself then update it with the new product category name",
    "start": "2625280",
    "end": "2631119"
  },
  {
    "text": "all right so let's run it and see how this all goes so i've got uh my main app up here and",
    "start": "2631119",
    "end": "2638319"
  },
  {
    "text": "i'm gonna run this and i have change feed down here just running and it's listening so i want you to keep an eye",
    "start": "2638319",
    "end": "2643359"
  },
  {
    "text": "at the bottom left of your screen as i go and i run this so let's run this update product",
    "start": "2643359",
    "end": "2650960"
  },
  {
    "text": "category name so let's we're going to first print out the number of those products in that category and i've got 11",
    "start": "2650960",
    "end": "2657440"
  },
  {
    "text": "accessories tires and tubes now let's run this so we're going to replace the update now look at the bottom left here",
    "start": "2657440",
    "end": "2663440"
  },
  {
    "text": "change feed one change received and it's updated all 11 of those products in my product uh container okay that's",
    "start": "2663440",
    "end": "2671040"
  },
  {
    "text": "basically happened quite fast now uh let's print out that category name so",
    "start": "2671040",
    "end": "2676160"
  },
  {
    "text": "you can see still got the same 11 products uh and their new category name is accessories tires ampersand tubes",
    "start": "2676160",
    "end": "2683359"
  },
  {
    "text": "uh and we'll change it back right this thing like our name changer and you can see there it's picked it up again and",
    "start": "2683359",
    "end": "2689599"
  },
  {
    "text": "updated it back to the original name in there okay let's go back to",
    "start": "2689599",
    "end": "2697119"
  },
  {
    "text": "whoops let's go back to slides",
    "start": "2697119",
    "end": "2702280"
  },
  {
    "text": "okay uh we're on to our last set of entities here and that's the sales orders",
    "start": "2706720",
    "end": "2712079"
  },
  {
    "text": "that within here so same process as before we're going to create json documents for",
    "start": "2712079",
    "end": "2717280"
  },
  {
    "text": "each of our entities in here and obviously this is another good candidate for embedding because it's a",
    "start": "2717280",
    "end": "2722880"
  },
  {
    "text": "one-to-four relationship you don't typically have sales orders or e-commerce sites where",
    "start": "2722880",
    "end": "2728000"
  },
  {
    "text": "you have an unlimited or unbounded number of items in your shopping cart uh unless you're sure have a",
    "start": "2728000",
    "end": "2734000"
  },
  {
    "text": "some kind of problem there uh so we're gonna embed this here uh and then next we're gonna store it in its own",
    "start": "2734000",
    "end": "2739440"
  },
  {
    "text": "container and we'll call that sales order uh so again let's look at the operations here and we're gonna decide we need to",
    "start": "2739440",
    "end": "2745359"
  },
  {
    "text": "pick a partition key uh for what we're gonna do so we need to create a sales order and then we also need to list all",
    "start": "2745359",
    "end": "2750640"
  },
  {
    "text": "sales orders uh for our customers and when we do that we wanna list them",
    "start": "2750640",
    "end": "2756319"
  },
  {
    "text": "by customer id uh so this makes i think a good um",
    "start": "2756319",
    "end": "2762400"
  },
  {
    "text": "a good partition key here because we're going to create them by customer id obviously a customer owns the sales",
    "start": "2762400",
    "end": "2767520"
  },
  {
    "text": "in there right it's their sales and we're going to do a query uh somewhat high concurrency on listing those",
    "start": "2767520",
    "end": "2773680"
  },
  {
    "text": "then it makes sense here to do that and so every single logical partition",
    "start": "2773680",
    "end": "2779200"
  },
  {
    "text": "is going to include all the sales for that customer within there so we'll make customer id",
    "start": "2779200",
    "end": "2785520"
  },
  {
    "text": "our partition key here now before we go any further let's take a step back uh when we looked at the",
    "start": "2785520",
    "end": "2791280"
  },
  {
    "text": "containers we've defined so far it's interesting to know that we already have another container that's partitioned by",
    "start": "2791280",
    "end": "2796880"
  },
  {
    "text": "customer id and that's the customer container so could we store customers and sales orders in the same container",
    "start": "2796880",
    "end": "2803359"
  },
  {
    "text": "well absolutely yes in fact not only is this technically possible it's actually a best practice for a nosql database",
    "start": "2803359",
    "end": "2808960"
  },
  {
    "text": "positive is schema agnostic so this is something that's actually totally supported and it's frankly quite suitable when the",
    "start": "2808960",
    "end": "2815359"
  },
  {
    "text": "data share the same access patterns and the same partition key remember these access patterns really really matter it",
    "start": "2815359",
    "end": "2820960"
  },
  {
    "text": "is it helps really define how you want to store this data and then as well as partition",
    "start": "2820960",
    "end": "2827119"
  },
  {
    "text": "it so instead of storing customers and sales orders in different containers we're going to store them in the same",
    "start": "2827119",
    "end": "2832319"
  },
  {
    "text": "container and we'll call that the customer container here i'm also going to change the partition",
    "start": "2832319",
    "end": "2837599"
  },
  {
    "text": "key from id to customer id and then i also need to add oops i also need to add uh wherever you are uh",
    "start": "2837599",
    "end": "2845839"
  },
  {
    "text": "the customer id is a property to my customer document as well uh next uh i need to be able to",
    "start": "2845839",
    "end": "2852640"
  },
  {
    "text": "distinguish between sales orders and customers because i've got i'm mixing entities within the same container now",
    "start": "2852640",
    "end": "2857680"
  },
  {
    "text": "so i'm going to add an additional type property here and i'm going to call that sales order uh as a constant value for",
    "start": "2857680",
    "end": "2863760"
  },
  {
    "text": "each of the sales orders in there and then i've got one for customer this way i can query for these",
    "start": "2863760",
    "end": "2869280"
  },
  {
    "text": "things separately if i want within here okay so now what we've got is within each logical partition of customer id",
    "start": "2869280",
    "end": "2877040"
  },
  {
    "text": "i'm going to have exactly one customer document and all that customer sales orders within here",
    "start": "2877040",
    "end": "2882880"
  },
  {
    "text": "so now what we want to do is when we want to get all the sales orders uh for a customer this is going to be the query",
    "start": "2882880",
    "end": "2889040"
  },
  {
    "text": "we're going to use select star from c for c dot customer id equals customer a and c dot type equals sales order",
    "start": "2889040",
    "end": "2895760"
  },
  {
    "text": "okay so let's see what that looks like here i'm going to query sales orders by customer id",
    "start": "2895760",
    "end": "2903040"
  },
  {
    "text": "and let's go out of here and i'm going to",
    "start": "2903200",
    "end": "2909839"
  },
  {
    "text": "three sales orders by customer id here i've got my customer container reference here's my customer id this is",
    "start": "2909839",
    "end": "2916480"
  },
  {
    "text": "the same customer from before by the way uh here's my query that i showed you earlier uh here's my query definition my",
    "start": "2916480",
    "end": "2923200"
  },
  {
    "text": "parameter my partition key and then i'm going to iterate through that and show all the sales orders for that customer",
    "start": "2923200",
    "end": "2928960"
  },
  {
    "text": "here uh so that's operation f and here we go i've got one",
    "start": "2928960",
    "end": "2935440"
  },
  {
    "text": "order here this is uh some i don't know what this is looks like a bike frame expensive and then",
    "start": "2935440",
    "end": "2942559"
  },
  {
    "text": "we've got another sales order here so yep i got two orders uh for this",
    "start": "2942559",
    "end": "2947839"
  },
  {
    "text": "customer in here and you can see okay so let's go whoops",
    "start": "2947839",
    "end": "2957000"
  },
  {
    "text": "let's go back to slides",
    "start": "2957200",
    "end": "2960800"
  },
  {
    "text": "okay finally we're going to look at the last request we need to serve here and that is we want to query",
    "start": "2963359",
    "end": "2969040"
  },
  {
    "text": "top 10 customers based upon the number of sales orders they've had so this requires you to count the number of",
    "start": "2969040",
    "end": "2974559"
  },
  {
    "text": "sales orders for each customer and then sort these counts in descending order and then return the first 10 of",
    "start": "2974559",
    "end": "2980000"
  },
  {
    "text": "those now even though customers and sales orders sit in the same container this is",
    "start": "2980000",
    "end": "2985119"
  },
  {
    "text": "not actually something i can do with cosmo cb's query language so once again the solution here is we're",
    "start": "2985119",
    "end": "2990559"
  },
  {
    "text": "going to denormalize and i'm going to put a new property in my customer document",
    "start": "2990559",
    "end": "2995839"
  },
  {
    "text": "that's going to include the count of sales orders within my customer entity",
    "start": "2995839",
    "end": "3000880"
  },
  {
    "text": "so what we want to achieve is that each time i had a new sales order i'm",
    "start": "3000880",
    "end": "3006400"
  },
  {
    "text": "going to update my customer document within here now the nice thing is that because these things sit within the same",
    "start": "3006400",
    "end": "3012559"
  },
  {
    "text": "logical partition i can actually uh use transactions uh to do this operation and",
    "start": "3012559",
    "end": "3017839"
  },
  {
    "text": "do them in a very transactional or asset type manner and that may be unusual because i said",
    "start": "3017839",
    "end": "3023440"
  },
  {
    "text": "we don't support kind of relational constructs but cosmo cb does support transactions for data that sits within",
    "start": "3023440",
    "end": "3029839"
  },
  {
    "text": "the same logical partition and the reason we can do this is because because it sits in the same logical partition it",
    "start": "3029839",
    "end": "3034880"
  },
  {
    "text": "sits on the same physical partition and we can do these things uh when the data sits on the same physical piece of",
    "start": "3034880",
    "end": "3040079"
  },
  {
    "text": "compute now we can do this in two ways there's uh stored procedures uh which you can write using javascript uh using our uh",
    "start": "3040079",
    "end": "3047520"
  },
  {
    "text": "using our api there you can also use a new feature a relatively new feature in our sdk it's called transactional batch",
    "start": "3047520",
    "end": "3055520"
  },
  {
    "text": "okay so once i do that now i can serve that query or serve that operation with",
    "start": "3055520",
    "end": "3060559"
  },
  {
    "text": "this query select top 10 from c where c dot type equals customer and then",
    "start": "3060559",
    "end": "3066720"
  },
  {
    "text": "order by c dot sales order account uh in descending order there okay so in this demo i'm going to show",
    "start": "3066720",
    "end": "3072960"
  },
  {
    "text": "you a bunch of stuff i'm going to create a new sales order and i'm going to update uh the order uh sales order total",
    "start": "3072960",
    "end": "3078559"
  },
  {
    "text": "for the customer document and i'm going to do that in a transaction using transactional batch and then i'll show you how to query for our top 10",
    "start": "3078559",
    "end": "3084559"
  },
  {
    "text": "customers",
    "start": "3084559",
    "end": "3086960"
  },
  {
    "text": "okay a so customer and sales orders by",
    "start": "3091839",
    "end": "3097280"
  },
  {
    "text": "customer id uh sorry uh i am going to run that but i want to",
    "start": "3097280",
    "end": "3103359"
  },
  {
    "text": "show you this one here so create a new order and update customer order total so i got a reference to my customer uh",
    "start": "3103359",
    "end": "3109599"
  },
  {
    "text": "container here here's the customer id again same customer as always i'm gonna read that customer first put",
    "start": "3109599",
    "end": "3116400"
  },
  {
    "text": "that deserialize that into our customer object here i'm gonna increment salesforce account property uh just",
    "start": "3116400",
    "end": "3122400"
  },
  {
    "text": "sales order account plus plus i'm gonna then create a new sales order object here so i've got",
    "start": "3122400",
    "end": "3128240"
  },
  {
    "text": "order id sales order as my type customer id order date no shift date because it hasn't shipped yet",
    "start": "3128240",
    "end": "3134400"
  },
  {
    "text": "uh and then a couple of items in the cart so a mountain frame and some stocks and then i'm going to call this function",
    "start": "3134400",
    "end": "3140559"
  },
  {
    "text": "create transactional batch that sits on my container customer container object here and i'm",
    "start": "3140559",
    "end": "3146559"
  },
  {
    "text": "going to pass in the partition key and then i'm going to pass in the operations that i want to run in that",
    "start": "3146559",
    "end": "3151920"
  },
  {
    "text": "batch in that transaction i'm going to create an item first that's creating my sales order and then i'm going to call replace item",
    "start": "3151920",
    "end": "3157839"
  },
  {
    "text": "which is the update on my customer object there and pass it the customer id within there and then i'll call execute",
    "start": "3157839",
    "end": "3164000"
  },
  {
    "text": "async and then i'll check to see was this successful or not okay so",
    "start": "3164000",
    "end": "3169520"
  },
  {
    "text": "let's run this so we're going to create for the",
    "start": "3169520",
    "end": "3175359"
  },
  {
    "text": "customer and all orders let's run that one first g whoops that's not what i want",
    "start": "3175359",
    "end": "3181359"
  },
  {
    "text": "to create a problem here okay good",
    "start": "3181359",
    "end": "3186078"
  },
  {
    "text": "okay so here's my customer",
    "start": "3188000",
    "end": "3192559"
  },
  {
    "text": "oh you know what i want to show you one more thing i do want to show you this created by customers delivered to customer id",
    "start": "3193040",
    "end": "3198640"
  },
  {
    "text": "so let me show you this code uh because this is a little bit different when i'm mixing entities inside a container i can",
    "start": "3198640",
    "end": "3204720"
  },
  {
    "text": "no longer deserialize these directly into classes right because i have a mix of entities and i and i don't if i try",
    "start": "3204720",
    "end": "3211359"
  },
  {
    "text": "to do that i'm going to end up with a problem here so what i need to do is when i define my get item query iterator",
    "start": "3211359",
    "end": "3217599"
  },
  {
    "text": "i need to do that to serialize that against a dynamic object here and then as i iterate through that there",
    "start": "3217599",
    "end": "3223200"
  },
  {
    "text": "i need to inspect the type property right so because i'm getting both the customer object and the sales orders i'm",
    "start": "3223200",
    "end": "3229119"
  },
  {
    "text": "going to iterate through these and then figure out okay is this a customer object and then if it is okay great now",
    "start": "3229119",
    "end": "3234559"
  },
  {
    "text": "i'm going to just call deserialize object and then deserialize it into my customer object here and then the same",
    "start": "3234559",
    "end": "3240800"
  },
  {
    "text": "with the sales order right and because i've got multiple sales orders in here i'm going to add those to a to a list",
    "start": "3240800",
    "end": "3247119"
  },
  {
    "text": "object that's typed as sales order within there okay so i just wanted to show you that",
    "start": "3247119",
    "end": "3252480"
  },
  {
    "text": "quickly because here is the code for that i've got the customer id within here",
    "start": "3252480",
    "end": "3258079"
  },
  {
    "text": "excuse me where are you here we go i've got customer id here",
    "start": "3258079",
    "end": "3264880"
  },
  {
    "text": "customer their address and everything uh and then the sales order account in here so i've got two sales orders for this",
    "start": "3264880",
    "end": "3270720"
  },
  {
    "text": "customer and then both of their orders right so here's the first one and then here's the second one okay",
    "start": "3270720",
    "end": "3279079"
  },
  {
    "text": "all right now i'm going to create a new order and i'm going to update the total for that customer so that's operation h",
    "start": "3279119",
    "end": "3284960"
  },
  {
    "text": "that's the transactional batch within there now let me run that query again and you can see i've got here's my",
    "start": "3284960",
    "end": "3292559"
  },
  {
    "text": "customer destiny peterson again and sales order count of three within there and then",
    "start": "3292559",
    "end": "3298240"
  },
  {
    "text": "here's the first one that i had here's the second one that's it that's been in there right 2013 so it's old and",
    "start": "3298240",
    "end": "3305200"
  },
  {
    "text": "then here's the one from today right so the mountain frame and the socks within there right",
    "start": "3305200",
    "end": "3311359"
  },
  {
    "text": "now one other thing i want to show you is transaction batch that works great uh",
    "start": "3311359",
    "end": "3316480"
  },
  {
    "text": "for adding stuff but i can also use it to delete as well right so it's the same code again functionally",
    "start": "3316480",
    "end": "3322640"
  },
  {
    "text": "except i'm going to call sales order count minus minus and then i'm going to use transactional batch again i'm going to delete the",
    "start": "3322640",
    "end": "3328240"
  },
  {
    "text": "order out of the out of that container and then call update or replace item on the customer object to decrement the",
    "start": "3328240",
    "end": "3335040"
  },
  {
    "text": "sales or account so if i delete that order in here leave successfully and then query",
    "start": "3335040",
    "end": "3342720"
  },
  {
    "text": "g so i've only got those two orders and then look at sales order account is back to",
    "start": "3342799",
    "end": "3348799"
  },
  {
    "text": "two within here okay so there we go using transactions",
    "start": "3348799",
    "end": "3355760"
  },
  {
    "text": "to update different documents or to add a document and update a document all on the same",
    "start": "3355760",
    "end": "3361599"
  },
  {
    "text": "batch there right so this is exactly what you need for your e-commerce workload",
    "start": "3361599",
    "end": "3367760"
  },
  {
    "text": "okay uh all right moving on okay so we're nearly",
    "start": "3367760",
    "end": "3372880"
  },
  {
    "text": "done uh remodeling our database uh and we've created the following containers so i've got a customer container",
    "start": "3372880",
    "end": "3378160"
  },
  {
    "text": "partitioned by customer id and that's got my customer and sales order entities i've got a product container uh that's",
    "start": "3378160",
    "end": "3385119"
  },
  {
    "text": "uh partitioned my category id and that contains all my product entities then i have a product tag container with a",
    "start": "3385119",
    "end": "3391119"
  },
  {
    "text": "partition key of type and then a product category container partitioned by uh",
    "start": "3391119",
    "end": "3396400"
  },
  {
    "text": "type now uh as you may have already guessed i can make one more operation or one more",
    "start": "3396400",
    "end": "3402880"
  },
  {
    "text": "optimization here and i can store product category and product type in the same container right",
    "start": "3402880",
    "end": "3408559"
  },
  {
    "text": "remember they share the same partition key right and this is why i made this or",
    "start": "3408559",
    "end": "3413760"
  },
  {
    "text": "did that weird modeling thing where i created a type property and made them a single partition query uh it wasn't for the performance it's",
    "start": "3413760",
    "end": "3420319"
  },
  {
    "text": "because the optimization here is one around storage right now i can put all this data in a single container that's",
    "start": "3420319",
    "end": "3426799"
  },
  {
    "text": "got 400 ru throughput rather than uh two containers uh that have our 100 400",
    "start": "3426799",
    "end": "3434079"
  },
  {
    "text": "ru throughput which is the minimum amount of throughput you can have on a container and store them in there and when i want to get them i just use that",
    "start": "3434079",
    "end": "3440480"
  },
  {
    "text": "type property uh to do i can distinguish between what i'm using in there the",
    "start": "3440480",
    "end": "3445520"
  },
  {
    "text": "other thing as well uh is that um i only need one instance of azure of a azure function uh to",
    "start": "3445520",
    "end": "3452480"
  },
  {
    "text": "monitor it for any changes i want to make in there so this is really a best practice when i've got a lot of master",
    "start": "3452480",
    "end": "3457920"
  },
  {
    "text": "data or reference data within there just store it all in the same container and then just query for it as you need to",
    "start": "3457920",
    "end": "3463760"
  },
  {
    "text": "kind of hydrate your user your ux or your application or whatever it is",
    "start": "3463760",
    "end": "3468960"
  },
  {
    "text": "you're using it for okay so here's our final design we've gone",
    "start": "3468960",
    "end": "3474400"
  },
  {
    "text": "from nine tables in our relational model uh to just three containers and all of these are perfectly optimized uh to",
    "start": "3474400",
    "end": "3481359"
  },
  {
    "text": "scale uh to essentially infinite size uh it doesn't matter these are all",
    "start": "3481359",
    "end": "3486839"
  },
  {
    "text": "perfectly um optimized uh to be able to grow uh and they're gonna have good you're gonna have good performance uh",
    "start": "3486839",
    "end": "3493520"
  },
  {
    "text": "and good scale uh and do so efficiently uh as well okay so uh key takeaways i hopefully you",
    "start": "3493520",
    "end": "3500319"
  },
  {
    "text": "understand the importance of understanding access patterns for this understand that partitioning is absolutely critical",
    "start": "3500319",
    "end": "3506400"
  },
  {
    "text": "to designing for scale this is how you achieve that infinite scale is understanding the partitioning and",
    "start": "3506400",
    "end": "3511920"
  },
  {
    "text": "understanding that the access patterns for your data is what is so critical to getting that right uh using things like",
    "start": "3511920",
    "end": "3518799"
  },
  {
    "text": "embedding data and denormalizing and pre-aggregating these are all things that are fine in a nosql database you",
    "start": "3518799",
    "end": "3524640"
  },
  {
    "text": "really want to optimize around the request for your applications rather than storage right think about this when",
    "start": "3524640",
    "end": "3531839"
  },
  {
    "text": "when relational databases were designed or came to like 50 years ago right 1970",
    "start": "3531839",
    "end": "3536880"
  },
  {
    "text": "storage was really expensive today storage is cheap i've got a phone here with like a terabyte of storage on it",
    "start": "3536880",
    "end": "3542400"
  },
  {
    "text": "that just cost me a few hundred bucks the thing that's expensive today is compute relative to that storage so",
    "start": "3542400",
    "end": "3548400"
  },
  {
    "text": "duplicating data denormalizing all of that stuff perfectly fine you want to optimize around the request around the",
    "start": "3548400",
    "end": "3553760"
  },
  {
    "text": "compute for that uh and then you can achieve a lot of these things using just",
    "start": "3553760",
    "end": "3558799"
  },
  {
    "text": "different techniques and different methodologies whether you're using change feed or using our stored products or",
    "start": "3558799",
    "end": "3564000"
  },
  {
    "text": "transactional batch to achieve all these things cosmo cp has the tools",
    "start": "3564000",
    "end": "3570079"
  },
  {
    "text": "necessary to be able to do uh these types of things uh here's some links uh for going further uh everything i just",
    "start": "3570079",
    "end": "3576160"
  },
  {
    "text": "showed you is in github uh github.com slash azure cosmic db cosmic works i've",
    "start": "3576160",
    "end": "3581920"
  },
  {
    "text": "got a link to my deck in there got a link to everything uh it'll you can get an arm template you can set this up and",
    "start": "3581920",
    "end": "3587599"
  },
  {
    "text": "deploy it uh scripts you can run that'll set everything up load your data uh one thing i'll keep in mind is that",
    "start": "3587599",
    "end": "3593760"
  },
  {
    "text": "each one of these databases it's provisioned at the database level i try to keep it as efficient as possible but",
    "start": "3593760",
    "end": "3599680"
  },
  {
    "text": "it's 4000 ru in auto scale uh if you go and run this thing don't leave",
    "start": "3599680",
    "end": "3605359"
  },
  {
    "text": "it up because it's going to cost you like 100 us a month to keep it there so there's menus in there that'll load the",
    "start": "3605359",
    "end": "3611359"
  },
  {
    "text": "data and then unload it all so when you're not using it just run that option and it'll delete",
    "start": "3611359",
    "end": "3616400"
  },
  {
    "text": "everything and then you can keep the account up and that'll run that you get that for free youtube we've got lots of cool videos uh",
    "start": "3616400",
    "end": "3622400"
  },
  {
    "text": "i have a podcast that i run most every week uh aka ms slash cosmos tv live tv uh come and",
    "start": "3622400",
    "end": "3629119"
  },
  {
    "text": "check it out live uh or watch lots of uh lots of episodes on demand i have a",
    "start": "3629119",
    "end": "3634960"
  },
  {
    "text": "global user group that we've started meetup.com azure cosmos db google user group",
    "start": "3634960",
    "end": "3640319"
  },
  {
    "text": "feel free to come check that out we're running monthly meetups uh i think we're done for the end of the year but we'll pick up again in january",
    "start": "3640319",
    "end": "3646319"
  },
  {
    "text": "that's it i think i'm right on time for an hour uh and i'll take any questions",
    "start": "3646319",
    "end": "3651839"
  },
  {
    "text": "uh that you may have i think i've got uh a i've got some questions here",
    "start": "3651839",
    "end": "3658480"
  },
  {
    "text": "how would you handle history like customer changing address uh yeah uh",
    "start": "3658480",
    "end": "3664799"
  },
  {
    "text": "well i don't know why i would keep the old customer's address but i could use change feed on that and",
    "start": "3664799",
    "end": "3670160"
  },
  {
    "text": "so if a customer updated something i could write that to another container and keep it in there uh if i didn't want",
    "start": "3670160",
    "end": "3675520"
  },
  {
    "text": "to keep that hot i could probably use change feed and just write it to a blob storage or something like that",
    "start": "3675520",
    "end": "3680720"
  },
  {
    "text": "if i didn't need to keep it in there you also model the data such that i can have active addresses and inactive",
    "start": "3680720",
    "end": "3687440"
  },
  {
    "text": "addresses so i could have addresses that it's just simply an array inside there and then i would show the ones that i",
    "start": "3687440",
    "end": "3692880"
  },
  {
    "text": "want um what's the difference between cosmos and dynamodb uh i'm not going to answer that",
    "start": "3692880",
    "end": "3699040"
  },
  {
    "text": "question i don't work for dynamo and i don't do product comparisons how do you migrate a customer if they buy enough to go past",
    "start": "3699040",
    "end": "3705680"
  },
  {
    "text": "two megabytes per customer uh yeah so i would use change feed",
    "start": "3705680",
    "end": "3712400"
  },
  {
    "text": "and then design that such as it iterates through every document in there i'm going to basically either shred that",
    "start": "3712400",
    "end": "3717599"
  },
  {
    "text": "document or i'm going to do something where i need to put that data and split it up and put it into",
    "start": "3717599",
    "end": "3723599"
  },
  {
    "text": "different rows so i can get that customer um underneath two megabytes customer megabyte two megabytes a lot of data for",
    "start": "3723599",
    "end": "3730079"
  },
  {
    "text": "a customer uh so there'd have to be i definitely want to look at the model uh within there uh make sure that that's that's correct",
    "start": "3730079",
    "end": "3737359"
  },
  {
    "text": "um okay that's all i've got for questions i'll just leave that up there um",
    "start": "3737359",
    "end": "3743039"
  },
  {
    "text": "i don't think there's any more top questions okay uh that's it i'll hang out here for",
    "start": "3743039",
    "end": "3749680"
  },
  {
    "text": "a few minutes otherwise thank you very much for joining i wish i could have been there in person",
    "start": "3749680",
    "end": "3755280"
  },
  {
    "text": "i just found out about a week and a half ago how challenging it was for people in grey countries as they call them to get",
    "start": "3755280",
    "end": "3760400"
  },
  {
    "text": "into uh norway uh we'll try again next year hopefully things will get uh a little better",
    "start": "3760400",
    "end": "3766559"
  },
  {
    "text": "but thank you very much for joining and uh enjoy the rest of your event and enjoy your evening thank you",
    "start": "3766559",
    "end": "3774760"
  }
]