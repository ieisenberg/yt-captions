[
  {
    "text": "so hello I'm hannes and I'm this is the site that my company wants me to use as",
    "start": "2060",
    "end": "7740"
  },
  {
    "text": "a title slide this is the one that I wanted to use um how many of you are familiar with",
    "start": "7740",
    "end": "13380"
  },
  {
    "text": "celebrity death match like a little bit okay so I grew up in",
    "start": "13380",
    "end": "19140"
  },
  {
    "text": "the 90s with MTV and at first MTV was music videos right",
    "start": "19140",
    "end": "25439"
  },
  {
    "text": "um and actually played music videos hence the name Music Television um but then they started experimenting",
    "start": "25439",
    "end": "31800"
  },
  {
    "text": "with other stuff so we got beef and pot hat and that works really well so they expanded and eventually they had a thing",
    "start": "31800",
    "end": "38820"
  },
  {
    "text": "called celebrity death match now what is celebrity that match you might be wondering now what it was it",
    "start": "38820",
    "end": "45719"
  },
  {
    "text": "would have was one of those clay figure uh animated series",
    "start": "45719",
    "end": "50820"
  },
  {
    "text": "and it was they had two judges the commentators they were actually no these are these are the commentators uh Nick",
    "start": "50820",
    "end": "57180"
  },
  {
    "text": "Gomez and uh Tony Gomez and and Nick diamond and they are commenting on the",
    "start": "57180",
    "end": "62340"
  },
  {
    "text": "match like live from the from the Animated Series um there was also this guy who is the",
    "start": "62340",
    "end": "68939"
  },
  {
    "text": "referee his taglines were let's get it on or I'll allow it",
    "start": "68939",
    "end": "74760"
  },
  {
    "text": "um and it was celebrities fighting celebrities um it was actually actors fighting",
    "start": "74760",
    "end": "80880"
  },
  {
    "text": "actors so when I was thinking of like what to call this talk I figured like actors fighting actors that celebrated",
    "start": "80880",
    "end": "87180"
  },
  {
    "text": "that match now all I'm really trying to tell you is like I watched npv when it",
    "start": "87180",
    "end": "92520"
  },
  {
    "text": "was cool okay um now down to the to today's business",
    "start": "92520",
    "end": "99119"
  },
  {
    "text": "um what are we going to talk about today and first I want to talk to you a little bit about why you'd want to use actors",
    "start": "99119",
    "end": "105780"
  },
  {
    "text": "and a little bit of history about these Frameworks um and then I'll talk some about some",
    "start": "105780",
    "end": "111540"
  },
  {
    "text": "general concepts that are going to be common between the two and then we'll actually go into some",
    "start": "111540",
    "end": "117299"
  },
  {
    "text": "differences between them and some deciders that may help you choose one or",
    "start": "117299",
    "end": "123000"
  },
  {
    "text": "the other and at the end we will wrap things up you good with that",
    "start": "123000",
    "end": "128940"
  },
  {
    "text": "cool so why would you want to use actors what has changed now first of all we've",
    "start": "128940",
    "end": "136140"
  },
  {
    "text": "seen the last decade or so the scale of software has changed tremendously",
    "start": "136140",
    "end": "142140"
  },
  {
    "text": "we now have smartphones we now have the explosion of the Web Internet of things",
    "start": "142140",
    "end": "147260"
  },
  {
    "text": "and anything that you developed that is that has the potential to be web scale you have to think about it a little bit",
    "start": "147260",
    "end": "154500"
  },
  {
    "text": "differently and you're possibly going to build High throughput systems",
    "start": "154500",
    "end": "159599"
  },
  {
    "text": "what also has changed that is that instead of having dedicated servers and high-powered machines we're mostly",
    "start": "159599",
    "end": "165900"
  },
  {
    "text": "running everything on commodity Hardware now because that's what the data centers in the cloud are mostly doing right",
    "start": "165900",
    "end": "174300"
  },
  {
    "text": "there's also a big evolution going on in the CPU markets now when I was in",
    "start": "174300",
    "end": "179819"
  },
  {
    "text": "college and that's a while ago when we overclocked the Pentium 4 we could get",
    "start": "179819",
    "end": "185099"
  },
  {
    "text": "five gigahertz on liquid nitrogen now that number hasn't changed tremendously",
    "start": "185099",
    "end": "190140"
  },
  {
    "text": "clock speak speed has stabilized over the years so this is like data about",
    "start": "190140",
    "end": "196280"
  },
  {
    "text": "microprocessors that you can buy like commercial grade stuff so",
    "start": "196280",
    "end": "201959"
  },
  {
    "text": "like frequency clock frequency has really stabilized now what is also tapering off is single thread",
    "start": "201959",
    "end": "207720"
  },
  {
    "text": "performance it's still increasing but not by that much so the only line on this graph that is",
    "start": "207720",
    "end": "214620"
  },
  {
    "text": "actually giving us hope is the number of cores because when I was in college buying a",
    "start": "214620",
    "end": "221400"
  },
  {
    "text": "Pentium tree or a Pentium 4 with a single core as a desktop machine that was a very normal thing to do now who of",
    "start": "221400",
    "end": "227760"
  },
  {
    "text": "you have more than six cores in your pocket right now probably all of you okay",
    "start": "227760",
    "end": "233700"
  },
  {
    "text": "so this is the one number that is evolving in a direction that we could do something with as programmers to keep up",
    "start": "233700",
    "end": "240060"
  },
  {
    "text": "with that high scale software but running stuff on multiple cores also",
    "start": "240060",
    "end": "246360"
  },
  {
    "text": "comes with a problem because there is a mister called amdal who taught about how much we can speed",
    "start": "246360",
    "end": "253500"
  },
  {
    "text": "up workloads by throwing more resources or more CPUs at the problem",
    "start": "253500",
    "end": "259560"
  },
  {
    "text": "and we can theoretically speed it up in function of how much of the code we can run in parallel there's always a little",
    "start": "259560",
    "end": "266820"
  },
  {
    "text": "bit of your code that is going to need to run in series and that little bit of code is going to",
    "start": "266820",
    "end": "273360"
  },
  {
    "text": "block how far you can actually scale your problem by throwing more processors at it",
    "start": "273360",
    "end": "279600"
  },
  {
    "text": "and when we do that even if we have 95 percent parallelizable code it doesn't matter if we throw 10 000 CPUs at it we",
    "start": "279600",
    "end": "286860"
  },
  {
    "text": "can are never going to get it to more than 20 times faster so if we really want to take advantage",
    "start": "286860",
    "end": "293160"
  },
  {
    "text": "of multi-core systems we're going to need much higher degrees of",
    "start": "293160",
    "end": "298979"
  },
  {
    "text": "parallelization than 95 or even 99 we're going to need to get it way up there",
    "start": "298979",
    "end": "304139"
  },
  {
    "text": "because the mythical linear scaling let's throw more machines at the problem",
    "start": "304139",
    "end": "310199"
  },
  {
    "text": "that we're solving that can only be achieved if we can highly parallelize the stuff that we're doing",
    "start": "310199",
    "end": "317180"
  },
  {
    "text": "who of you have tried to manage threat your threads yourself okay was that fun",
    "start": "317580",
    "end": "325580"
  },
  {
    "text": "we well yeah Aaron has Aaron has done it for us thank you Aaron",
    "start": "326820",
    "end": "332100"
  },
  {
    "text": "now what happens with threads is there is always a little bit of shared state that you're going to want to access from",
    "start": "332100",
    "end": "338820"
  },
  {
    "text": "different pieces of your code and as soon as you have shared State you might get race conditions and if you get race",
    "start": "338820",
    "end": "343919"
  },
  {
    "text": "conditions you're gonna need to solve them which means you will and you will introduce blocking calls you will block",
    "start": "343919",
    "end": "350639"
  },
  {
    "text": "the resource when you are accessing it from a single threat which means the other threats need to wait",
    "start": "350639",
    "end": "356400"
  },
  {
    "text": "but by blocking it you're also introducing a little bit of serialized code because all the other threads have",
    "start": "356400",
    "end": "361740"
  },
  {
    "text": "to wait for this code to complete on the other threat you might also introduce Deadlocks and then we're not even",
    "start": "361740",
    "end": "368340"
  },
  {
    "text": "talking about how hard it is to keep a threat pool busy at all times by running",
    "start": "368340",
    "end": "373740"
  },
  {
    "text": "useful stuff right and that is the stuff that we don't really want to do ourselves it's",
    "start": "373740",
    "end": "379259"
  },
  {
    "text": "very hard to do and there were some ideas that really",
    "start": "379259",
    "end": "384840"
  },
  {
    "text": "helped solve this and that is the promise that all of these actor Frameworks or actor model implementations are really giving us",
    "start": "384840",
    "end": "392419"
  },
  {
    "text": "they're promising us as programmers a single threaded programming model so we",
    "start": "392419",
    "end": "398220"
  },
  {
    "text": "don't have to worry about all the blocking and they promise us a very high degree",
    "start": "398220",
    "end": "403380"
  },
  {
    "text": "of parallelization in the runtime code and they're promising us that we can scale out really easily right",
    "start": "403380",
    "end": "411120"
  },
  {
    "text": "so that we can build low latency High resilient highly resilient systems",
    "start": "411120",
    "end": "416880"
  },
  {
    "text": "so that's a promise that they made us so let's get into the history of where this all came from",
    "start": "416880",
    "end": "423300"
  },
  {
    "text": "now it was all thought off in the 1970s when",
    "start": "423300",
    "end": "428880"
  },
  {
    "text": "um Carl Hewitt and Peter bishop and so on they got and wrote a research paper",
    "start": "428880",
    "end": "434880"
  },
  {
    "text": "um in theory of course because they didn't have the hardware to do this they wrote a research paper about how they",
    "start": "434880",
    "end": "440340"
  },
  {
    "text": "could model software in a way that it behaved as physics so that they could",
    "start": "440340",
    "end": "445800"
  },
  {
    "text": "use it to model artificial intelligence now this was this was highly theoretical",
    "start": "445800",
    "end": "451139"
  },
  {
    "text": "but they were already thinking like how can we scale software to many independent microprocessors",
    "start": "451139",
    "end": "457080"
  },
  {
    "text": "and these ideas got refined by a number of computer researchers like a lot of the stuff that we use today",
    "start": "457080",
    "end": "463800"
  },
  {
    "text": "I don't know what it is either they had better drugs or they were less distracted by social media I don't know",
    "start": "463800",
    "end": "470280"
  },
  {
    "text": "why but like all the stuff that we were using today was invented in the 70s and 80s",
    "start": "470280",
    "end": "476360"
  },
  {
    "text": "and then the first implementation came and it came from Ericsson not a Norwegian company a Swedish company I'll",
    "start": "476580",
    "end": "482460"
  },
  {
    "text": "be in Sweden tomorrow afternoon um but from the nordics who remembers",
    "start": "482460",
    "end": "487979"
  },
  {
    "text": "Ericsson they're still highly active in the Telco Market they don't make phones anymore do",
    "start": "487979",
    "end": "494099"
  },
  {
    "text": "they um my first like cell phone was an Ericsson phone",
    "start": "494099",
    "end": "499139"
  },
  {
    "text": "now what they did is they had this Telco system the axt301 that they wanted to",
    "start": "499139",
    "end": "504780"
  },
  {
    "text": "build and they were actually thinking about how can we make our phone systems more resilient that was their Prime",
    "start": "504780",
    "end": "511139"
  },
  {
    "text": "reason for doing this because the way that telcos make money or made money at",
    "start": "511139",
    "end": "516659"
  },
  {
    "text": "least um is every phone connection that was established that was that meant that they could build a customer and every",
    "start": "516659",
    "end": "523140"
  },
  {
    "text": "minute that minute that it kept on they could build them more so every bit of",
    "start": "523140",
    "end": "528180"
  },
  {
    "text": "downtime where you're not able to make connections that is losing money so they really thought about this and",
    "start": "528180",
    "end": "534360"
  },
  {
    "text": "they saw these ideas from the actor models and they figured like this is something we can use we are going to",
    "start": "534360",
    "end": "540680"
  },
  {
    "text": "implement it but they didn't have a programming language that pitted so they invented erlang",
    "start": "540680",
    "end": "546480"
  },
  {
    "text": "now rumor has it that is is called after Ericsson language it's actually called",
    "start": "546480",
    "end": "552060"
  },
  {
    "text": "after a Danish computer researcher called erline but they did it and they wrote two",
    "start": "552060",
    "end": "559140"
  },
  {
    "text": "million lines of code of which I think about 800 000 were in Airline the rest",
    "start": "559140",
    "end": "564180"
  },
  {
    "text": "was C plus plus or C um and they managed to build a system that",
    "start": "564180",
    "end": "570480"
  },
  {
    "text": "could achieve nine nines of uptime now to put that into perspective nine",
    "start": "570480",
    "end": "575880"
  },
  {
    "text": "nines of uptime is 31 milliseconds of downtime a year right who has that",
    "start": "575880",
    "end": "582000"
  },
  {
    "text": "uptime on their system well not me um but at least this is massively",
    "start": "582000",
    "end": "587519"
  },
  {
    "text": "impressive and they had to invent the programming language to make it happen this was the 1980s",
    "start": "587519",
    "end": "593279"
  },
  {
    "text": "now we have gotten actor models on the.net ecosystem around 2015.",
    "start": "593279",
    "end": "601860"
  },
  {
    "text": "um first of all we got Orleans Orleans was um invented in the extreme Computing",
    "start": "602700",
    "end": "608820"
  },
  {
    "text": "group at Microsoft and it's at Microsoft research um rumor had it that this was built for",
    "start": "608820",
    "end": "615899"
  },
  {
    "text": "Halo 4 it went the other way around they had already had it floating around and",
    "start": "615899",
    "end": "621000"
  },
  {
    "text": "they used it for the back end of Halo 4. but for online gaming systems very important that your backend can keep up",
    "start": "621000",
    "end": "627600"
  },
  {
    "text": "on release day so they needed something they could scale up in their Xbox Live and Azure data centers and they had the",
    "start": "627600",
    "end": "634140"
  },
  {
    "text": "hardware they just needed a programming model that allowed them to do this so they used the thing from Microsoft",
    "start": "634140",
    "end": "640440"
  },
  {
    "text": "research and they built it on Orleans now Orleans is a virtual actor model",
    "start": "640440",
    "end": "646740"
  },
  {
    "text": "which means that they add a couple of abstractions on top of What actors are",
    "start": "646740",
    "end": "653579"
  },
  {
    "text": "but it's still highly available it's very easy to distribute across machines and it's really aimed at Cloud scenarios",
    "start": "653579",
    "end": "661019"
  },
  {
    "text": "because it comes from Microsoft and they were looking at azure now the other framework that we're",
    "start": "661019",
    "end": "666360"
  },
  {
    "text": "talking about is aka.net and akka was maybe Aaron can come up and tell this",
    "start": "666360",
    "end": "673200"
  },
  {
    "text": "part the way that I remember it Aaron was working on this and Roger was working on something called pigeon and",
    "start": "673200",
    "end": "681000"
  },
  {
    "text": "they learn about each other's efforts and they combine some of the parts together which and they got permission",
    "start": "681000",
    "end": "687060"
  },
  {
    "text": "from light Bend because light then makes akka on the jvm with a program language called Scala and",
    "start": "687060",
    "end": "694620"
  },
  {
    "text": "they got permission from akka to call this framework aka.net because it's support from jvm echa",
    "start": "694620",
    "end": "701279"
  },
  {
    "text": "first stable release only two months apart from the first official release of Orleans I think",
    "start": "701279",
    "end": "708060"
  },
  {
    "text": "um it's an open source and free thing that you can use the only paid component is",
    "start": "708060",
    "end": "714060"
  },
  {
    "text": "the monitoring component Phobos and it's really worth it supports open Telemetry",
    "start": "714060",
    "end": "719459"
  },
  {
    "text": "in its latest Incarnation and it's very high performance and the fault tolerance",
    "start": "719459",
    "end": "724560"
  },
  {
    "text": "is built in as well you can use it for literally anything uh High credit",
    "start": "724560",
    "end": "732240"
  },
  {
    "text": "so general concepts when we talk about these actor models I'm going to talk",
    "start": "732240",
    "end": "737339"
  },
  {
    "text": "about some general stuff that is going on in these two Frameworks so",
    "start": "737339",
    "end": "743100"
  },
  {
    "text": "first of all um in Orleans we call them grains and AKA we call them actors",
    "start": "743100",
    "end": "749040"
  },
  {
    "text": "um but what they are in essence is an object and that object holds its own State the",
    "start": "749040",
    "end": "757800"
  },
  {
    "text": "state is internal now that sounds fancy it means it has Fields right as a",
    "start": "757800",
    "end": "763019"
  },
  {
    "text": "programmer just have a class with fields now the behavior also sounds fancy it's",
    "start": "763019",
    "end": "768420"
  },
  {
    "text": "a word for functions and code which you can also write inside your class now where it gets interesting is they",
    "start": "768420",
    "end": "775620"
  },
  {
    "text": "have an inbox where you can send messages and all these messages get",
    "start": "775620",
    "end": "780660"
  },
  {
    "text": "processed in order on a single threat which means that within the scope of",
    "start": "780660",
    "end": "786180"
  },
  {
    "text": "your class you don't have to worry about locking or about being threat safe",
    "start": "786180",
    "end": "792420"
  },
  {
    "text": "because there's only a single message being processed at a time and that is very powerful it makes this highly",
    "start": "792420",
    "end": "799380"
  },
  {
    "text": "treaded system very easy to program because we don't need to worry about the Locking",
    "start": "799380",
    "end": "805019"
  },
  {
    "text": "so they're processed one by one in order and this guaranteed single threadedness is what we love",
    "start": "805019",
    "end": "811380"
  },
  {
    "text": "now a little bit more about messages the messages in both of these systems",
    "start": "811380",
    "end": "816720"
  },
  {
    "text": "are simple CLR objects so nothing fancy about them they don't need base classes",
    "start": "816720",
    "end": "822839"
  },
  {
    "text": "if they go across nodes from one node to the other they're definitely serialized",
    "start": "822839",
    "end": "827940"
  },
  {
    "text": "and deserialized so think about that in theory you could play with the message contents",
    "start": "827940",
    "end": "835019"
  },
  {
    "text": "if it's passed around on the same node in AKA and don't do it just design them for immutability it'll make your life so",
    "start": "835019",
    "end": "842700"
  },
  {
    "text": "much easier right just assume that as soon as you have created and dispatched a message then it's gone it's out of",
    "start": "842700",
    "end": "849000"
  },
  {
    "text": "your scope it might cross a node boundary and then you have no control over it anyway",
    "start": "849000",
    "end": "855199"
  },
  {
    "text": "so to orchestrate all of this we need some",
    "start": "855240",
    "end": "861060"
  },
  {
    "text": "kind of system and that is the system that does the heavy lifting for us it is the stuff that we already established",
    "start": "861060",
    "end": "867779"
  },
  {
    "text": "that we don't want to write all the threat scheduling and all the messaging and that sort of stuff and that is what the actor system",
    "start": "867779",
    "end": "874139"
  },
  {
    "text": "already Silo on our lean site take care of and you have all these actors living",
    "start": "874139",
    "end": "879660"
  },
  {
    "text": "inside the actor system now what do these extra systems do they control the actual life cycle they spin",
    "start": "879660",
    "end": "886860"
  },
  {
    "text": "up the objects for you and they control their lifetime if necessary to take them",
    "start": "886860",
    "end": "892320"
  },
  {
    "text": "down um if they crash they get spun up again all that sort of stuff it can be done by",
    "start": "892320",
    "end": "898260"
  },
  {
    "text": "the extra system it also controls the messaging and the threat scheduling so all the messages",
    "start": "898260",
    "end": "904440"
  },
  {
    "text": "and the inboxes and the scheduling is managed by the system as well there's also timers that you can use on",
    "start": "904440",
    "end": "912060"
  },
  {
    "text": "both sides because sometimes you want you want to send scheduled messages to actors so that is also controlled by the",
    "start": "912060",
    "end": "917940"
  },
  {
    "text": "actor system and there's even an implan bus where you can do Pub sub messaging between actors as well",
    "start": "917940",
    "end": "924560"
  },
  {
    "text": "it's probably not as powerful if you're thinking Azure service bus is probably not that powerful but you can subscribe",
    "start": "924560",
    "end": "931560"
  },
  {
    "text": "to certain message types from other actors the actor system",
    "start": "931560",
    "end": "937940"
  },
  {
    "text": "these actor systems or silos they can work together to form a cluster and that's where it's getting interesting if",
    "start": "937940",
    "end": "943440"
  },
  {
    "text": "we spin up a lot of these and run them on different nodes in kubernetes or on something else",
    "start": "943440",
    "end": "950519"
  },
  {
    "text": "um you can let them work together as one big system and that is where that linear scale out is going to come from by",
    "start": "950519",
    "end": "957600"
  },
  {
    "text": "throwing more nodes at our system we can actually increase the throughput of a throughput of the entire thing",
    "start": "957600",
    "end": "964860"
  },
  {
    "text": "so we let them work together and we are probably going to distribute our actors",
    "start": "964860",
    "end": "970019"
  },
  {
    "text": "across all the nodes in the system um and when a note goes down you can",
    "start": "970019",
    "end": "976560"
  },
  {
    "text": "recreate those no those actors on another note and continue so you're building some resiliency uh some of your",
    "start": "976560",
    "end": "983279"
  },
  {
    "text": "resiliency as well um and this will enable our scale out of",
    "start": "983279",
    "end": "989519"
  },
  {
    "text": "a bigger actor system because we cluster everything together",
    "start": "989519",
    "end": "994860"
  },
  {
    "text": "it's roughly stuff that is true for both of these Frameworks now we're going to talk about",
    "start": "994860",
    "end": "1002420"
  },
  {
    "text": "what separates the two and you are going to be the judge",
    "start": "1002420",
    "end": "1007699"
  },
  {
    "text": "I am going to try and take my preference and my opinion out of this",
    "start": "1007699",
    "end": "1012980"
  },
  {
    "text": "so I'm going to present you with a couple of differences between the true Frameworks this QR code will come back",
    "start": "1012980",
    "end": "1019579"
  },
  {
    "text": "on every slide where you have to vote and you're going to vote so I don't know which framework is going to win",
    "start": "1019579",
    "end": "1025459"
  },
  {
    "text": "um in London it was a tie but I've removed the question so now one",
    "start": "1025459",
    "end": "1030678"
  },
  {
    "text": "of them has to win right um",
    "start": "1030679",
    "end": "1036140"
  },
  {
    "text": "so here we go there's eight rounds so when you know that we make it to eight you know that this talk is over",
    "start": "1036140",
    "end": "1043938"
  },
  {
    "text": "so writing your actors um I first want to talk about the",
    "start": "1043939",
    "end": "1049880"
  },
  {
    "text": "programming model that is being used and how the code that you will be writing will look like",
    "start": "1049880",
    "end": "1056480"
  },
  {
    "text": "um in akka.net I will swap which framework I take first so I will not be",
    "start": "1056480",
    "end": "1062299"
  },
  {
    "text": "opinionated in that way either so there's always a base class in this case I've used the receive actor it is",
    "start": "1062299",
    "end": "1069980"
  },
  {
    "text": "the one that will feel more most comfortable to object oriented developers and because we get strongly",
    "start": "1069980",
    "end": "1076100"
  },
  {
    "text": "typed message handlers that we can register we can take Constructor",
    "start": "1076100",
    "end": "1081260"
  },
  {
    "text": "parameters later we will see where where we actually set these and but they are",
    "start": "1081260",
    "end": "1087260"
  },
  {
    "text": "passed when we create the instance of the actor so if your actor has some kind of ID",
    "start": "1087260",
    "end": "1093740"
  },
  {
    "text": "that you want to pass in you can just do it through through the Constructor this is how you register message handlers so",
    "start": "1093740",
    "end": "1100760"
  },
  {
    "text": "every complete round message that is going to come in to the inbox of this actor is",
    "start": "1100760",
    "end": "1107419"
  },
  {
    "text": "going to be dispatched to the method below now",
    "start": "1107419",
    "end": "1114020"
  },
  {
    "text": "for the um for the messages you can use whatever works in the CLR so you can use records",
    "start": "1114020",
    "end": "1122720"
  },
  {
    "text": "you can use classes it doesn't need a base class like all of this is just fine and it'll work",
    "start": "1122720",
    "end": "1129260"
  },
  {
    "text": "now your code is literally just going to be down there if you want to reply to the sender you",
    "start": "1129260",
    "end": "1137360"
  },
  {
    "text": "can just do something like this but you don't have to an account when something comes into",
    "start": "1137360",
    "end": "1142580"
  },
  {
    "text": "your inbox it is a one-way operation you receive the message and you do with it whatever you want but the sender",
    "start": "1142580",
    "end": "1149120"
  },
  {
    "text": "property is available so if you want to respond to the person or the actor that sent you this message you can reply to",
    "start": "1149120",
    "end": "1155360"
  },
  {
    "text": "it in this way that's what our actors look like in or",
    "start": "1155360",
    "end": "1160580"
  },
  {
    "text": "in okay in Orleans it looks a little bit different but quite similar",
    "start": "1160580",
    "end": "1165860"
  },
  {
    "text": "we also have a base class and a base interface",
    "start": "1165860",
    "end": "1171620"
  },
  {
    "text": "um in Orleans all your grains have to have some kind of key to",
    "start": "1171620",
    "end": "1178400"
  },
  {
    "text": "identify them so if you have a grain with a good key this is the base interface that you should be Implement",
    "start": "1178400",
    "end": "1184340"
  },
  {
    "text": "and you should always make an interface for your grains AKA doesn't require you to do that",
    "start": "1184340",
    "end": "1191480"
  },
  {
    "text": "and all the methods that you are going to call on your actor and you should",
    "start": "1191480",
    "end": "1196580"
  },
  {
    "text": "Define them in an async way why do you do them a sync because this is one of",
    "start": "1196580",
    "end": "1202460"
  },
  {
    "text": "the advantages and disadvantages of the virtual actor model you're abstracting",
    "start": "1202460",
    "end": "1207799"
  },
  {
    "text": "away the fact that you're sending a message and getting a reply it still happens behind the scenes",
    "start": "1207799",
    "end": "1212900"
  },
  {
    "text": "but it looks like an async method that you can call on the proxy to talk to your crane",
    "start": "1212900",
    "end": "1219140"
  },
  {
    "text": "if you then build your grain you just implement the methods and the only thing",
    "start": "1219140",
    "end": "1224240"
  },
  {
    "text": "that is different about the messages is that you have to have some kind of",
    "start": "1224240",
    "end": "1230600"
  },
  {
    "text": "serializable interfaces that are implemented so if you add the generate",
    "start": "1230600",
    "end": "1235700"
  },
  {
    "text": "serializer attributes on them you'll be fine all right and this round completed",
    "start": "1235700",
    "end": "1241280"
  },
  {
    "text": "content and the um the complete round content you can use them in the async signature of the",
    "start": "1241280",
    "end": "1247880"
  },
  {
    "text": "method that you're going to call on your interface so what happens if you do this in Orleans is you use the interface to ask",
    "start": "1247880",
    "end": "1256640"
  },
  {
    "text": "with the guide key to ask for an instance of your grain and the system will create it on one of the nodes and",
    "start": "1256640",
    "end": "1262280"
  },
  {
    "text": "you can call the async methods on the proxy and behind the scenes it will send the message and send a message back",
    "start": "1262280",
    "end": "1267980"
  },
  {
    "text": "but it will look like a sink to your consumer so your code is going to going to do",
    "start": "1267980",
    "end": "1274820"
  },
  {
    "text": "there and instead of sending a message back you're just returning a task it's potato potado right",
    "start": "1274820",
    "end": "1281000"
  },
  {
    "text": "right um these two programming models while very similar are different and you",
    "start": "1281000",
    "end": "1286520"
  },
  {
    "text": "probably have a preference to which one you liked best so let's see what happens",
    "start": "1286520",
    "end": "1292900"
  },
  {
    "text": "oh 50 50. I'm gonna have to wait for a few more votes",
    "start": "1301400",
    "end": "1306460"
  },
  {
    "text": "are you voting Aaron you're scared aren't you",
    "start": "1308919",
    "end": "1315700"
  },
  {
    "text": "[Laughter] you could vote for our lanes",
    "start": "1316220",
    "end": "1322480"
  },
  {
    "text": "okay I think probably most people voted um it's it's really close and I think the",
    "start": "1324020",
    "end": "1331760"
  },
  {
    "text": "reason it's really close because it's the two programming models are not all that different it's just the one that",
    "start": "1331760",
    "end": "1338720"
  },
  {
    "text": "you get used to but point for AKA so I'm noting that down",
    "start": "1338720",
    "end": "1344679"
  },
  {
    "text": "um when we've made our actors we're going to want to send messages to them and",
    "start": "1345140",
    "end": "1350480"
  },
  {
    "text": "instantiate our actors on the actor systems or silos",
    "start": "1350480",
    "end": "1356480"
  },
  {
    "text": "so when we're going to do that um it goes into different ways in",
    "start": "1356480",
    "end": "1362600"
  },
  {
    "text": "Orleans you get a grain Factory it's a it's an interface you can actually",
    "start": "1362600",
    "end": "1368659"
  },
  {
    "text": "inject this into your you can register it in your di container and inject it",
    "start": "1368659",
    "end": "1373940"
  },
  {
    "text": "into whatever you are using let's say an asp.net controller and the factory will",
    "start": "1373940",
    "end": "1379520"
  },
  {
    "text": "be able to instantiate your grain based on the interface and it will",
    "start": "1379520",
    "end": "1384980"
  },
  {
    "text": "automatically select which node it goes on um and then we just call the methods on",
    "start": "1384980",
    "end": "1391460"
  },
  {
    "text": "the interface and they're a sync so we just await them and we get results back and all of it is abstracted for us in",
    "start": "1391460",
    "end": "1399080"
  },
  {
    "text": "this way so that is literally all you need to do to create an actor and to send it a",
    "start": "1399080",
    "end": "1405860"
  },
  {
    "text": "message except the messages are in that async method",
    "start": "1405860",
    "end": "1411380"
  },
  {
    "text": "in icon.net that is a little bit different oh I yeah",
    "start": "1411380",
    "end": "1416799"
  },
  {
    "text": "and I cannot this is a little bit different um remember that we saw that Constructor a",
    "start": "1416840",
    "end": "1422720"
  },
  {
    "text": "couple of slides back if we want to pass parameters into a Constructor we have to use something called props",
    "start": "1422720",
    "end": "1429620"
  },
  {
    "text": "and I think the best way to explain props is this is a Constructor pointer",
    "start": "1429620",
    "end": "1434659"
  },
  {
    "text": "so you can use props to Define which Constructor needs to be called with",
    "start": "1434659",
    "end": "1439760"
  },
  {
    "text": "which parameters and this takes a parameter array of object that will translate to your",
    "start": "1439760",
    "end": "1445520"
  },
  {
    "text": "Constructor parameters on your actor so we can pass the ID in it this way",
    "start": "1445520",
    "end": "1452480"
  },
  {
    "text": "and then we tell the actor system to create the actor for us actor off",
    "start": "1452480",
    "end": "1461120"
  },
  {
    "text": "um this will tell the actor system to spin it up with this Constructor but we",
    "start": "1461120",
    "end": "1466280"
  },
  {
    "text": "never get the actual actor reference back we never get the object reference because we want to be able to only talk",
    "start": "1466280",
    "end": "1472700"
  },
  {
    "text": "to our actors through the messaging system so the ixrf that we get back is",
    "start": "1472700",
    "end": "1478280"
  },
  {
    "text": "basically a small proxy that allows us to talk to our actor much like the grain that we got in the previous slide",
    "start": "1478280",
    "end": "1486020"
  },
  {
    "text": "and then we use the tile method to send it a message you could you could do ask",
    "start": "1486020",
    "end": "1491240"
  },
  {
    "text": "as well and ask Will Wait for a reply um it works really well if you want to",
    "start": "1491240",
    "end": "1497780"
  },
  {
    "text": "call the actual system from the outside but inside actors system is kind of an anti-pattern to wait for other actors to",
    "start": "1497780",
    "end": "1504679"
  },
  {
    "text": "do stuff so you will just tell and they will tell back and it'll go into your inbox it'll be much more efficient",
    "start": "1504679",
    "end": "1510860"
  },
  {
    "text": "so the ask is down there but you have two messaging patterns where one where",
    "start": "1510860",
    "end": "1515900"
  },
  {
    "text": "you fire and forget and where one where you wait for the reply so a little bit more",
    "start": "1515900",
    "end": "1522919"
  },
  {
    "text": "closer to what's actually happening behind the scenes some of the scenes in Orleans some of the stuff has been",
    "start": "1522919",
    "end": "1529400"
  },
  {
    "text": "abstracted away from you as a developer which also makes it a little bit less code to write",
    "start": "1529400",
    "end": "1536120"
  },
  {
    "text": "so which do you prefer",
    "start": "1536120",
    "end": "1540340"
  },
  {
    "text": "that's pretty clear cut",
    "start": "1557720",
    "end": "1561039"
  },
  {
    "text": "it has it has um that's true",
    "start": "1567500",
    "end": "1573140"
  },
  {
    "text": "it has changed it has become a first-class citizen where it was a weird",
    "start": "1573140",
    "end": "1578360"
  },
  {
    "text": "add-on um can I call it a weird add-on Aaron yeah it used to be a weird error add-on",
    "start": "1578360",
    "end": "1586000"
  },
  {
    "text": "he's weird too um it used to be a weird add-on it has changed but it made it's mainly changed",
    "start": "1586000",
    "end": "1592279"
  },
  {
    "text": "inside of actors right when you're calling it from the outside the prop system hasn't really disappeared did it",
    "start": "1592279",
    "end": "1599559"
  },
  {
    "text": "it's my talk",
    "start": "1599559",
    "end": "1602980"
  },
  {
    "text": "so it has gotten better 84 so it's 1-1 now that's good",
    "start": "1605419",
    "end": "1612980"
  },
  {
    "text": "um topology and clusters um I think to me this is probably where",
    "start": "1612980",
    "end": "1618559"
  },
  {
    "text": "the two will defer the most",
    "start": "1618559",
    "end": "1623779"
  },
  {
    "text": "um and it also has an effect on how exceptions are caught and that is going",
    "start": "1623779",
    "end": "1629539"
  },
  {
    "text": "to come as the next round now in akka.net",
    "start": "1629539",
    "end": "1634700"
  },
  {
    "text": "actors are organized in a tree structure you get three actors out of the box of",
    "start": "1634700",
    "end": "1640159"
  },
  {
    "text": "the route the user system actor underneath the system actor all the stuff that um the actor system does lives",
    "start": "1640159",
    "end": "1646400"
  },
  {
    "text": "underneath there the ones that you create in user space live under the user actor",
    "start": "1646400",
    "end": "1652400"
  },
  {
    "text": "um so the one that we created in the previous round was a top left level actor because it was created on the",
    "start": "1652400",
    "end": "1658940"
  },
  {
    "text": "actor system but actors can spawn children and their children can spawn",
    "start": "1658940",
    "end": "1664419"
  },
  {
    "text": "grandchildren and so on and your um position in this hierarchy defines",
    "start": "1664419",
    "end": "1670039"
  },
  {
    "text": "your address um and that address has to be unique",
    "start": "1670039",
    "end": "1676400"
  },
  {
    "text": "um now this is all this all becomes relevant in the in the next round but",
    "start": "1676400",
    "end": "1681500"
  },
  {
    "text": "this is organized in this way so if we create a top level actor we do",
    "start": "1681500",
    "end": "1689059"
  },
  {
    "text": "it with the props on the um on the actor system now inside an",
    "start": "1689059",
    "end": "1694220"
  },
  {
    "text": "actor system we can do context actor off also with props and that will create a child",
    "start": "1694220",
    "end": "1700279"
  },
  {
    "text": "so you have control over how that hierarchy organizes and that is one of",
    "start": "1700279",
    "end": "1705860"
  },
  {
    "text": "the things that is going to help you to get your system up to the level where you want it to be",
    "start": "1705860",
    "end": "1712700"
  },
  {
    "text": "now inside a cluster we have all these nodes and they're basically all independent trees and they work together",
    "start": "1712700",
    "end": "1720380"
  },
  {
    "text": "so every node is kind of an independent Arc actor system but during the they all",
    "start": "1720380",
    "end": "1728659"
  },
  {
    "text": "work together and they can all talk to each other and actor references Camp has can be passed around through the whole",
    "start": "1728659",
    "end": "1735919"
  },
  {
    "text": "system and still work um if they get serialized and deserialized",
    "start": "1735919",
    "end": "1742100"
  },
  {
    "text": "um and for the sharding you basically have a lot of control over how your actors are distributed across the nodes",
    "start": "1742100",
    "end": "1750020"
  },
  {
    "text": "you can either write something yourself or you can rely on the um Anka cluster sharding package which will",
    "start": "1750020",
    "end": "1757940"
  },
  {
    "text": "allow you to Define Shard envelopes to distribute your actors across all of the nodes",
    "start": "1757940",
    "end": "1763059"
  },
  {
    "text": "or you can use routers to make something yourself that pushes all of the actors",
    "start": "1763059",
    "end": "1770539"
  },
  {
    "text": "onto the notes where you want them to be you can also have a cluster where all",
    "start": "1770539",
    "end": "1775940"
  },
  {
    "text": "the nodes have certain roles so you can have certain workloads only on certain",
    "start": "1775940",
    "end": "1781100"
  },
  {
    "text": "nodes and on the others it gives you a lot of control over what every node is doing inside your cluster",
    "start": "1781100",
    "end": "1788720"
  },
  {
    "text": "now it or leaves all the grains live in a silo and they're all identified by",
    "start": "1788720",
    "end": "1794840"
  },
  {
    "text": "their type well the interface that we defined and by their ID so if you made a grain with a good ID that that good",
    "start": "1794840",
    "end": "1801440"
  },
  {
    "text": "defines a certain instance so that identity defines",
    "start": "1801440",
    "end": "1807620"
  },
  {
    "text": "the grain there is no hierarchy so they're all grains in a bunch and you",
    "start": "1807620",
    "end": "1812659"
  },
  {
    "text": "throw them into a silo and they all operate independently",
    "start": "1812659",
    "end": "1817760"
  },
  {
    "text": "and in Orleans all of these silos much like with akka they work together in a",
    "start": "1817760",
    "end": "1825080"
  },
  {
    "text": "cluster so all these silos operate together but the sharding mechanisms are",
    "start": "1825080",
    "end": "1831020"
  },
  {
    "text": "built in into the client libraries and into the um clustering mechanism",
    "start": "1831020",
    "end": "1837559"
  },
  {
    "text": "which means that if you ask the client for a proxy you have very little control over where",
    "start": "1837559",
    "end": "1844399"
  },
  {
    "text": "that grain is created it goes on one of the notes that can either be a good or a bad thing",
    "start": "1844399",
    "end": "1852559"
  },
  {
    "text": "um it's the one less thing to worry about it's one less thing that you do not need to implement and I would say",
    "start": "1852559",
    "end": "1858140"
  },
  {
    "text": "that for most workloads this will work perfectly fine",
    "start": "1858140",
    "end": "1863179"
  },
  {
    "text": "um and it makes Discovery and addressing a little bit easier because just you just",
    "start": "1863179",
    "end": "1868580"
  },
  {
    "text": "need to know the interface and the identifier of the Grain and you can talk to it from any node in the cluster but",
    "start": "1868580",
    "end": "1875659"
  },
  {
    "text": "also from any client connecting to the cluster um whereas on Akai you would have to",
    "start": "1875659",
    "end": "1881659"
  },
  {
    "text": "figure out the ixrf or you would have to use an actor selection too or the short",
    "start": "1881659",
    "end": "1886760"
  },
  {
    "text": "envelope to talk to the actor that you want to talk to so which structure do you prefer more",
    "start": "1886760",
    "end": "1895778"
  },
  {
    "text": "we have a Microsoft minded audience today yes",
    "start": "1907100",
    "end": "1914120"
  },
  {
    "text": "okay to go on Ace okay",
    "start": "1917419",
    "end": "1924320"
  },
  {
    "text": "so more people voting for liens hopefully",
    "start": "1924320",
    "end": "1929320"
  },
  {
    "text": "have a way of these extracting yes",
    "start": "1940220",
    "end": "1944080"
  },
  {
    "text": "right but it makes it more explicit",
    "start": "1948919",
    "end": "1955000"
  },
  {
    "text": "okay so 2-1 for liens uh now one of the things that we",
    "start": "1960980",
    "end": "1968720"
  },
  {
    "text": "have as a big difference between the two is the way errors are handled handled inside your actors because what you will",
    "start": "1968720",
    "end": "1974779"
  },
  {
    "text": "get is you will get exceptions that might be happening on the other side of the network in",
    "start": "1974779",
    "end": "1981860"
  },
  {
    "text": "something that you have no control over so we're gonna need to catch them and",
    "start": "1981860",
    "end": "1986960"
  },
  {
    "text": "somehow deal with them now in Orleans exceptions get sent back",
    "start": "1986960",
    "end": "1993620"
  },
  {
    "text": "to the caller we have this task that waits for the actor to complete its uh",
    "start": "1993620",
    "end": "1999140"
  },
  {
    "text": "its work and that we await and so the exception is actually caught and",
    "start": "1999140",
    "end": "2004899"
  },
  {
    "text": "serialized and the serialized on the on the calling side and they're retrone",
    "start": "2004899",
    "end": "2010980"
  },
  {
    "text": "um so we can call them by we can actually catch our exceptions when we are calling",
    "start": "2011200",
    "end": "2017679"
  },
  {
    "text": "a client and we can catch them on the client's site now the downside to all of this is that",
    "start": "2017679",
    "end": "2024279"
  },
  {
    "text": "you have to wait for the response otherwise you cannot catch the exception if you would have a firearm forget mechanism you can never wait for",
    "start": "2024279",
    "end": "2032260"
  },
  {
    "text": "something that's happening on the other side there's no way to escalate it um now how that looks is on the collar",
    "start": "2032260",
    "end": "2040299"
  },
  {
    "text": "side we can just await one of the methods on our crane",
    "start": "2040299",
    "end": "2046059"
  },
  {
    "text": "interface and wait for the exception and actually call it except the call stack will get lost",
    "start": "2046059",
    "end": "2052020"
  },
  {
    "text": "because that lives on the other side of the network potentially",
    "start": "2052020",
    "end": "2057099"
  },
  {
    "text": "very convenient this is a programming model you're all used to using now in aqua.net we have a mechanism",
    "start": "2057099",
    "end": "2065440"
  },
  {
    "text": "called supervision and it is much like taking your children to a supermarket",
    "start": "2065440",
    "end": "2070599"
  },
  {
    "text": "and if you have children sure you do if you take them to the supermarket who is responsible",
    "start": "2070599",
    "end": "2077740"
  },
  {
    "text": "you as a parent right and because you as a parent are responsible and you are",
    "start": "2077740",
    "end": "2083200"
  },
  {
    "text": "responsible when they up and that is very much how it goes with actors and every exception that is",
    "start": "2083200",
    "end": "2090820"
  },
  {
    "text": "uncaught in an actor gets escalated to the parent actor and that actor can take",
    "start": "2090820",
    "end": "2096398"
  },
  {
    "text": "a decision on what needs to happen you can either assume like this is this exception is",
    "start": "2096399",
    "end": "2103119"
  },
  {
    "text": "not too bad you can just discard the message and continue with the next message which is resume",
    "start": "2103119",
    "end": "2109060"
  },
  {
    "text": "you can kill off the entire actor um don't do that to your kids but you can kill it off",
    "start": "2109060",
    "end": "2115540"
  },
  {
    "text": "um and delete the inbox which is a stop directive that you give or you can",
    "start": "2115540",
    "end": "2121960"
  },
  {
    "text": "restart the actor which means you throw away the actor instance but you preserve the inbox you recreate it with the same",
    "start": "2121960",
    "end": "2128800"
  },
  {
    "text": "props with the same Constructor parameters and you retry the message that just failed",
    "start": "2128800",
    "end": "2134260"
  },
  {
    "text": "and you can either apply that to the one failing actor or to all of your children the last the letter is very convenient",
    "start": "2134260",
    "end": "2141339"
  },
  {
    "text": "when you've cut up a huge workload into small pieces and the whole workload gets invalidated by one of the actors failing",
    "start": "2141339",
    "end": "2147780"
  },
  {
    "text": "you might want to stop processing all together and apply it to all of them",
    "start": "2147780",
    "end": "2153220"
  },
  {
    "text": "the way that you do that in code is on the parent actor you override the",
    "start": "2153220",
    "end": "2158260"
  },
  {
    "text": "supervisor strategy method and that is going to inspect the exception so this",
    "start": "2158260",
    "end": "2166660"
  },
  {
    "text": "applies to only the failing child you can expect inspect the exception and see",
    "start": "2166660",
    "end": "2173320"
  },
  {
    "text": "what it is if it's something fatal you can return stop if it's transient you",
    "start": "2173320",
    "end": "2179200"
  },
  {
    "text": "can try and restart that sort of stuff you can also escalate to the parent so",
    "start": "2179200",
    "end": "2185260"
  },
  {
    "text": "to the grandparent in this case um if you don't don't know what to do and then the supervisor strategy will",
    "start": "2185260",
    "end": "2190900"
  },
  {
    "text": "get triggered on that as well so this allows you to build self-healing",
    "start": "2190900",
    "end": "2197619"
  },
  {
    "text": "systems and if exceptions get caught and they get handled in their parents",
    "start": "2197619",
    "end": "2202720"
  },
  {
    "text": "and you can basically deal without it without you can deal with everything without your entire system failing you",
    "start": "2202720",
    "end": "2211119"
  },
  {
    "text": "can keep some actors running while some fail and get recreated and all that sort of stuff",
    "start": "2211119",
    "end": "2216160"
  },
  {
    "text": "the only problem is that from the caller side you don't see any of this happening and this happens inside the actor",
    "start": "2216160",
    "end": "2223359"
  },
  {
    "text": "systems that are running all right so two types of error handling or liens",
    "start": "2223359",
    "end": "2230260"
  },
  {
    "text": "where it gets escalated back to the caller and you can catch the exception there and deal with it as if it happens",
    "start": "2230260",
    "end": "2236320"
  },
  {
    "text": "in the same scope and in academ you have supervision where",
    "start": "2236320",
    "end": "2243160"
  },
  {
    "text": "you can actually monitor exceptions from your children and take actions based on",
    "start": "2243160",
    "end": "2248560"
  },
  {
    "text": "the exceptions happening in the parent",
    "start": "2248560",
    "end": "2252480"
  },
  {
    "text": "okay we're 2-2 cool",
    "start": "2254619",
    "end": "2260880"
  },
  {
    "text": "and the next thing is clients because once your cluster is up and running",
    "start": "2261820",
    "end": "2267339"
  },
  {
    "text": "you're going to want to talk to it you're going to want to talk to the actors or cranes that are in it you will",
    "start": "2267339",
    "end": "2273040"
  },
  {
    "text": "have the um system where you want to communicate and send",
    "start": "2273040",
    "end": "2278200"
  },
  {
    "text": "messages to your actors and see what happens now in aka.net actor systems can",
    "start": "2278200",
    "end": "2283660"
  },
  {
    "text": "talk to each other so if you want to build a client what you will actually do is you will spin up a small actor system",
    "start": "2283660",
    "end": "2290920"
  },
  {
    "text": "in your client create actors in debt and they can talk over Aqua dot remote or",
    "start": "2290920",
    "end": "2296160"
  },
  {
    "text": "dot cluster to all of the other nodes in the system so if you're running a a",
    "start": "2296160",
    "end": "2302440"
  },
  {
    "text": "cluster your client is actually going to join that cluster if you're using AKA dot remote it's actually going to set up",
    "start": "2302440",
    "end": "2308260"
  },
  {
    "text": "a communication socket with that remote actor system so that you can send",
    "start": "2308260",
    "end": "2315160"
  },
  {
    "text": "messages to it um it may seem cumbersome but like making a",
    "start": "2315160",
    "end": "2322300"
  },
  {
    "text": "small client extra system that has some proxies in it is not all that bad",
    "start": "2322300",
    "end": "2329740"
  },
  {
    "text": "um but this is something that you have to do and the way that you talk to remote actors you can only do that from another",
    "start": "2329740",
    "end": "2336520"
  },
  {
    "text": "actor system now in Orleans there is a dedicated client Library",
    "start": "2336520",
    "end": "2342640"
  },
  {
    "text": "um a client library that has a grain Factory that generate prox generates proxies that can talk to a remote",
    "start": "2342640",
    "end": "2348700"
  },
  {
    "text": "cluster right so a lot of that is abstracted away from you and the proxies",
    "start": "2348700",
    "end": "2356619"
  },
  {
    "text": "will actually contact the right Silo and the right grain for you and all you need",
    "start": "2356619",
    "end": "2362320"
  },
  {
    "text": "to do is register that client library in the right way in your code",
    "start": "2362320",
    "end": "2367780"
  },
  {
    "text": "um so what that looks like is you register it in your host Builder and like you're",
    "start": "2367780",
    "end": "2373720"
  },
  {
    "text": "used to doing um and once you are doing something you can get that cluster client interface",
    "start": "2373720",
    "end": "2381400"
  },
  {
    "text": "and that will allow you to call that get grain which gives you the proxy back so",
    "start": "2381400",
    "end": "2386740"
  },
  {
    "text": "you can uncheck that into your asp.net controllers or whatever you want to use it in and then it can talk to your",
    "start": "2386740",
    "end": "2392980"
  },
  {
    "text": "remote cluster nodes and remote cranes right",
    "start": "2392980",
    "end": "2398859"
  },
  {
    "text": "so creating client actor systems versus um having a full-fledged client library",
    "start": "2398859",
    "end": "2405820"
  },
  {
    "text": "that can talk to the cluster from the outside",
    "start": "2405820",
    "end": "2411240"
  },
  {
    "text": "that looks clear-cut don't need to let that go on for much longer um so we're three two for Orleans",
    "start": "2423640",
    "end": "2431320"
  },
  {
    "text": "um up till now we've only spoken about things in memory actors being in memory",
    "start": "2431320",
    "end": "2438099"
  },
  {
    "text": "and all of our data being in private fields in our actors or properties and our actors which means",
    "start": "2438099",
    "end": "2445180"
  },
  {
    "text": "as you would assume correctly that if you would re start this you would lose all the data",
    "start": "2445180",
    "end": "2452260"
  },
  {
    "text": "um we don't want that so at some point we're going to need to persist some of the stuff that is living inside our",
    "start": "2452260",
    "end": "2458380"
  },
  {
    "text": "actors so that when we recreate them on another note or when we recycle or",
    "start": "2458380",
    "end": "2463599"
  },
  {
    "text": "process because we have redeployed like there's any reasons that actors would get recreated we can actually get our",
    "start": "2463599",
    "end": "2469839"
  },
  {
    "text": "state back that is the whole point of persistence now in Orleans",
    "start": "2469839",
    "end": "2476560"
  },
  {
    "text": "um persistent start starts with creating some kind of state object right we",
    "start": "2476560",
    "end": "2483640"
  },
  {
    "text": "create a class for our state that has all the properties in it needs to be serializable",
    "start": "2483640",
    "end": "2489180"
  },
  {
    "text": "and that can get saved from the grain and the rate the way that we deal with",
    "start": "2489180",
    "end": "2496420"
  },
  {
    "text": "persistence in Orleans is in the Constructor we actually get something",
    "start": "2496420",
    "end": "2502180"
  },
  {
    "text": "called an eye persistent state with our state class with it",
    "start": "2502180",
    "end": "2507579"
  },
  {
    "text": "um and that will actually expose the persistence mechanism to the rest of our actors so that when we want to save the",
    "start": "2507579",
    "end": "2514780"
  },
  {
    "text": "state all we need to do is await the right State async method on that",
    "start": "2514780",
    "end": "2522280"
  },
  {
    "text": "persistent State object and and that will actually save the entire State object into the database that we connect",
    "start": "2522280",
    "end": "2530079"
  },
  {
    "text": "to it you can use different storage mechanisms with boat Orleans or akka so",
    "start": "2530079",
    "end": "2536560"
  },
  {
    "text": "that is not really a competition but just this just writes it to disk in this way",
    "start": "2536560",
    "end": "2542380"
  },
  {
    "text": "now the persistence mechanism in aqua.net is conceived a little bit differently it",
    "start": "2542380",
    "end": "2550119"
  },
  {
    "text": "is a we start with a persistent actor and it is an event sourced",
    "start": "2550119",
    "end": "2555180"
  },
  {
    "text": "persistent system so that means when we create our actor it needs a unique",
    "start": "2555180",
    "end": "2561400"
  },
  {
    "text": "persistence ID this needs to be unique across your entire cluster",
    "start": "2561400",
    "end": "2566920"
  },
  {
    "text": "uh because that's the key that it's going to use to contact storage and and now we have two kinds of event",
    "start": "2566920",
    "end": "2575260"
  },
  {
    "text": "handlers and we get command and recover where we had received before we now have",
    "start": "2575260",
    "end": "2580900"
  },
  {
    "text": "command and recover and command is coming from the inbox this is a message coming from the inbox recover is a",
    "start": "2580900",
    "end": "2587380"
  },
  {
    "text": "message that is coming from the persistence mechanism when the actor is first started up so when a persistent",
    "start": "2587380",
    "end": "2594040"
  },
  {
    "text": "actor is recreated in academic it contacts the storage fetches its",
    "start": "2594040",
    "end": "2599260"
  },
  {
    "text": "snapshot if there is any and gets all the messages that have happened since the last snapshot replays those through",
    "start": "2599260",
    "end": "2606460"
  },
  {
    "text": "the recover method and then it starts accepting messages from its inbox on the command methods right",
    "start": "2606460",
    "end": "2612900"
  },
  {
    "text": "to persist messages um you can see that here and you can call",
    "start": "2612900",
    "end": "2619540"
  },
  {
    "text": "persist and that will save the message to the persistence mechanism and in sync",
    "start": "2619540",
    "end": "2625300"
  },
  {
    "text": "it will also execute the it goes on a stack with all the other things that",
    "start": "2625300",
    "end": "2630940"
  },
  {
    "text": "need to be persisted and that will actually handle and mutate your internal state so the method that",
    "start": "2630940",
    "end": "2638380"
  },
  {
    "text": "mutates the state that is the only thing you want to call when you're doing a recover you don't want to repersist your",
    "start": "2638380",
    "end": "2643960"
  },
  {
    "text": "messages when you are recovering because that will create like a an event stream that is not the way that you want it to",
    "start": "2643960",
    "end": "2650980"
  },
  {
    "text": "be I didn't put snapshotting in the slides you can manually save a snapshot of your",
    "start": "2650980",
    "end": "2657940"
  },
  {
    "text": "state which behaves a little bit like what you saw in Orleans you save an entire object to a state store it",
    "start": "2657940",
    "end": "2664900"
  },
  {
    "text": "happens out of thread so it's also something that you will get messages back from whether it was successful or",
    "start": "2664900",
    "end": "2671280"
  },
  {
    "text": "whether it failed now to be honest on this if you want to use event sourced",
    "start": "2671280",
    "end": "2678180"
  },
  {
    "text": "persistence width Orleans you can also do that and there's also a library that",
    "start": "2678180",
    "end": "2683740"
  },
  {
    "text": "allows you to get a similar persistence mechanism here same way that you could",
    "start": "2683740",
    "end": "2688839"
  },
  {
    "text": "snapshot everything in academic and rely on that on the same way that Orleans does but the defaults in the two cases",
    "start": "2688839",
    "end": "2695380"
  },
  {
    "text": "or aqua.net is event sourced where you persist messages and replay them when",
    "start": "2695380",
    "end": "2701260"
  },
  {
    "text": "your actor gets created and in Orleans it's more of a snapshot system where you save state to a",
    "start": "2701260",
    "end": "2708460"
  },
  {
    "text": "database",
    "start": "2708460",
    "end": "2711460"
  },
  {
    "text": "I'm gonna let this go on for a little bit now for the next chapter the next round",
    "start": "2722920",
    "end": "2728500"
  },
  {
    "text": "um I removed one of the votes and that is the next round because this is also",
    "start": "2728500",
    "end": "2734440"
  },
  {
    "text": "something that changed in the latest versions of aqua.net but I wanted to leave it in just to mock it a little bit",
    "start": "2734440",
    "end": "2742359"
  },
  {
    "text": "um oh I how far were we okay so we're even again",
    "start": "2742359",
    "end": "2748480"
  },
  {
    "text": "with two rounds to go my God so 3-3 now",
    "start": "2748480",
    "end": "2754660"
  },
  {
    "text": "um configuration and this used to be horrible",
    "start": "2754660",
    "end": "2761619"
  },
  {
    "text": "um this actually didn't come from Aaron so he cannot take credit for this monstrosity it came from light bend on",
    "start": "2761619",
    "end": "2768700"
  },
  {
    "text": "the jvm it's a very beautiful cascaded configuration system that uses a a",
    "start": "2768700",
    "end": "2775000"
  },
  {
    "text": "different file format just what we needed it looks like Json but it's not it stands for human optimized",
    "start": "2775000",
    "end": "2781839"
  },
  {
    "text": "configuration object notation um and obviously you don't get intellisense",
    "start": "2781839",
    "end": "2787599"
  },
  {
    "text": "for it and that was the way that we used to configure um actor systems in Academia so all your clustering",
    "start": "2787599",
    "end": "2794619"
  },
  {
    "text": "persistence remoting all that stuff went into comfy files like this and luckily the",
    "start": "2794619",
    "end": "2802420"
  },
  {
    "text": "documentation on the website is really good but it's still a pain in the ass to deal with",
    "start": "2802420",
    "end": "2807579"
  },
  {
    "text": "now Orleans has this nice host Builder thing where we can just configure it",
    "start": "2807579",
    "end": "2812980"
  },
  {
    "text": "like we are used to with most.net applications now I think that Aaron saw",
    "start": "2812980",
    "end": "2818859"
  },
  {
    "text": "the previous version of this talk and he went like okay we need a host Builder too",
    "start": "2818859",
    "end": "2824260"
  },
  {
    "text": "um so now they actually have the same thing so we're not voting this is a tie okay",
    "start": "2824260",
    "end": "2831180"
  },
  {
    "text": "and then there is one last elephant in the room and for those of you who have watched Twitter last week uh oh yeah I'm",
    "start": "2831700",
    "end": "2840700"
  },
  {
    "text": "going going to go into it full full arm and this is a benchmark I ran on my",
    "start": "2840700",
    "end": "2846339"
  },
  {
    "text": "laptop and of course this is biased and broken",
    "start": "2846339",
    "end": "2853060"
  },
  {
    "text": "um what I did is I tried to dispatch as many messages per second to actors as I",
    "start": "2853060",
    "end": "2858220"
  },
  {
    "text": "could but the reason that this is skewed is that Orleans serializes all of the",
    "start": "2858220",
    "end": "2864220"
  },
  {
    "text": "messages and as long as you stay on the same node academ does not it Just passes",
    "start": "2864220",
    "end": "2869380"
  },
  {
    "text": "around an object reference which makes for the big skew in the top metric right",
    "start": "2869380",
    "end": "2876060"
  },
  {
    "text": "in the bottom metric um you can see that memory usage for",
    "start": "2876060",
    "end": "2881680"
  },
  {
    "text": "academic was slightly better and it took a little bit less long to create all of",
    "start": "2881680",
    "end": "2887859"
  },
  {
    "text": "the actors or grains but none of these are going to actually have a huge impact",
    "start": "2887859",
    "end": "2893800"
  },
  {
    "text": "on how your performance is going to be in production right",
    "start": "2893800",
    "end": "2899140"
  },
  {
    "text": "now the point that I want to make with this slide and why I think it is important that we have this anyway if",
    "start": "2899140",
    "end": "2906160"
  },
  {
    "text": "you're interested in squeezing every little bit of performance out of an actor system the fact that you have",
    "start": "2906160",
    "end": "2914700"
  },
  {
    "text": "the possibility to pass around object references between actors on the same",
    "start": "2914700",
    "end": "2920140"
  },
  {
    "text": "node you have control over your actor hierarchies which is something that you often do when you build ico.net systems",
    "start": "2920140",
    "end": "2927280"
  },
  {
    "text": "is you take in messages on one actor and you pass them around between your children that is a bunch of performance",
    "start": "2927280",
    "end": "2934480"
  },
  {
    "text": "that you can win because you're not dealing with virtual addressing between",
    "start": "2934480",
    "end": "2939880"
  },
  {
    "text": "actors and you don't have to serialize and deserialize your messages all the time",
    "start": "2939880",
    "end": "2945960"
  },
  {
    "text": "in reality that is not going to be the biggest thing if you start building it",
    "start": "2946119",
    "end": "2952720"
  },
  {
    "text": "because what you're getting is a programming model that will allow you to max out multi-core CPUs really easily on",
    "start": "2952720",
    "end": "2961540"
  },
  {
    "text": "machines and that is the most important part of most of this now if you want to",
    "start": "2961540",
    "end": "2967000"
  },
  {
    "text": "squeeze out the last bit of performance I think akka.net gives you a little bit more tools to do that than Orleans does",
    "start": "2967000",
    "end": "2974920"
  },
  {
    "text": "whether that matters I don't think it will for many",
    "start": "2974920",
    "end": "2980380"
  },
  {
    "text": "applications right you can use both of these and I don't think there is a system that I could build with one that",
    "start": "2980380",
    "end": "2986500"
  },
  {
    "text": "I couldn't build with the other but I still declared as the win of this",
    "start": "2986500",
    "end": "2991660"
  },
  {
    "text": "round no voting no it's faster I mean you can",
    "start": "2991660",
    "end": "2998740"
  },
  {
    "text": "squeeze more performance out of it so there's no voting um but it's no it is a okay that's what she",
    "start": "2998740",
    "end": "3007980"
  },
  {
    "text": "said now this does not matter as much as you",
    "start": "3007980",
    "end": "3014220"
  },
  {
    "text": "might think it does both of these are very very fast and and resilient programming",
    "start": "3014220",
    "end": "3020700"
  },
  {
    "text": "models to use um so this is not going to be the first decider I hope for the one that you",
    "start": "3020700",
    "end": "3027720"
  },
  {
    "text": "choose now let's wrap things up we've got 10 minutes so that's good and we'll have a",
    "start": "3027720",
    "end": "3033599"
  },
  {
    "text": "little bit of um time for questions so today's winner is",
    "start": "3033599",
    "end": "3041060"
  },
  {
    "text": "with four points now you may have felt this in the talk I",
    "start": "3042079",
    "end": "3047220"
  },
  {
    "text": "tried to take my bias out of it as much as I could but I've worked way more with akka than I did with Orleans so you can",
    "start": "3047220",
    "end": "3054660"
  },
  {
    "text": "vote now whether I have been successful in keeping my bias out of this talk I",
    "start": "3054660",
    "end": "3060000"
  },
  {
    "text": "hope um it wasn't too noticeable um I hope that I gave you a fair",
    "start": "3060000",
    "end": "3066240"
  },
  {
    "text": "comparison between the two and that you have a little bit of a grasp on what the",
    "start": "3066240",
    "end": "3071400"
  },
  {
    "text": "differences are between using a virtual actor model where",
    "start": "3071400",
    "end": "3076500"
  },
  {
    "text": "um a lot of the messaging gets abstracted away and you get distribution",
    "start": "3076500",
    "end": "3082640"
  },
  {
    "text": "out of the box you get a lot of um good defaults might take okay so only",
    "start": "3082640",
    "end": "3091619"
  },
  {
    "text": "one person really hated my bias on this cool",
    "start": "3091619",
    "end": "3097579"
  },
  {
    "text": "um now my take on most of this is with academic you get full control over",
    "start": "3098220",
    "end": "3104099"
  },
  {
    "text": "everything but it also means that sometimes you have to do more work as well",
    "start": "3104099",
    "end": "3109800"
  },
  {
    "text": "your messaging is more explicit in your code you're actually explicitly sending",
    "start": "3109800",
    "end": "3115200"
  },
  {
    "text": "messages whenever something goes to an other actor it's not a function call you you get a tell or an ask and you see",
    "start": "3115200",
    "end": "3120900"
  },
  {
    "text": "that you're sending something and you might get better performance especially when you stay on the same note",
    "start": "3120900",
    "end": "3127520"
  },
  {
    "text": "now Orleans is a very opinionated implementation of a virtual actor model",
    "start": "3127520",
    "end": "3134160"
  },
  {
    "text": "which gives you a whole bunch of useful defaults stuff that you can get up to",
    "start": "3134160",
    "end": "3139200"
  },
  {
    "text": "speed with really well they also made some sensible abstractions especially for c-sharp",
    "start": "3139200",
    "end": "3146640"
  },
  {
    "text": "developers because a lot of this looks like the code that you're already used to writing there's not really that much",
    "start": "3146640",
    "end": "3153480"
  },
  {
    "text": "to learn in terms of syntax and and that sort of stuff",
    "start": "3153480",
    "end": "3158539"
  },
  {
    "text": "so to me that is the biggest difference between those two but most will both",
    "start": "3158640",
    "end": "3165240"
  },
  {
    "text": "will work in most situations where you want to build something with an extra",
    "start": "3165240",
    "end": "3170640"
  },
  {
    "text": "model and what kind of systems would you build with this anything that is stateful and that we requires a high",
    "start": "3170640",
    "end": "3177480"
  },
  {
    "text": "degree of scaling and parallelization those two Frameworks would be amazing",
    "start": "3177480",
    "end": "3182760"
  },
  {
    "text": "choices to deal with that sort of problems I'm thinking stock trading systems gaming back-ends iot back-ends",
    "start": "3182760",
    "end": "3189900"
  },
  {
    "text": "like all that sort of stuff where you have state you want to have the high throughput you want to be able to",
    "start": "3189900",
    "end": "3195900"
  },
  {
    "text": "respond to requests from memory because all of this stuff lives in memory",
    "start": "3195900",
    "end": "3201180"
  },
  {
    "text": "um for all those cases these two Frameworks will both be brilliant and",
    "start": "3201180",
    "end": "3206220"
  },
  {
    "text": "will help you solve that that unicorn scaling",
    "start": "3206220",
    "end": "3212780"
  },
  {
    "text": "situation it will not be fully linear but it will get pretty close",
    "start": "3212780",
    "end": "3218520"
  },
  {
    "text": "now about me I'm hannes I'm the head of learning development at access in Belgium we already discussed what access",
    "start": "3218520",
    "end": "3224520"
  },
  {
    "text": "is at before the talk started that is my Twitter handle and my icq number I'm trying to make icq great again",
    "start": "3224520",
    "end": "3232400"
  },
  {
    "text": "there's an app and it still works I have it installed so message me on icq",
    "start": "3232400",
    "end": "3238619"
  },
  {
    "text": "foreign so we have five minutes for questions so either you go grab something to eat in",
    "start": "3238619",
    "end": "3246180"
  },
  {
    "text": "The Marvelous food stands in the exhibitor hall or you stick around and you can ask me questions",
    "start": "3246180",
    "end": "3251700"
  },
  {
    "text": "um I'll be here [Applause]",
    "start": "3251700",
    "end": "3260710"
  },
  {
    "text": "licensing yes",
    "start": "3264540",
    "end": "3267680"
  },
  {
    "text": "that's it no it doesn't",
    "start": "3272160",
    "end": "3276140"
  },
  {
    "text": "affect us basically what we're kind of limited from doing is porting any features they've written in the past",
    "start": "3278720",
    "end": "3284460"
  },
  {
    "text": "couple years which is honestly a bunch of weird Edge Computing stuff we don't want anyway add a bunch of java specific CDs because",
    "start": "3284460",
    "end": "3292380"
  },
  {
    "text": "apparently they don't do logging and serialization very well",
    "start": "3292380",
    "end": "3296839"
  },
  {
    "text": "so only paid components because both of them are free and open source and only",
    "start": "3298140",
    "end": "3303300"
  },
  {
    "text": "paid component is the monitoring component as I already mentioned licensing is 4K a year",
    "start": "3303300",
    "end": "3309839"
  },
  {
    "text": "so 4K a year that's for your entire organization um well worth it",
    "start": "3309839",
    "end": "3316260"
  },
  {
    "text": "um it supports open Telemetry you can plug it into whatever you're already using your honeycomb or data dog or",
    "start": "3316260",
    "end": "3322319"
  },
  {
    "text": "um you're not gonna write that yourself for that money no way",
    "start": "3322319",
    "end": "3327619"
  },
  {
    "text": "okay yes",
    "start": "3332640",
    "end": "3336058"
  },
  {
    "text": "well first of all first of all surface fabric actors um very weird that they called those",
    "start": "3343440",
    "end": "3351359"
  },
  {
    "text": "actors um because they do wait for Downstream processing in in in the call tree and it",
    "start": "3351359",
    "end": "3359099"
  },
  {
    "text": "makes the whole thing not as performant as you would hope it would be and deployment of this it ships you can run",
    "start": "3359099",
    "end": "3366960"
  },
  {
    "text": "both of these inside.net processes um so you basically build a con",
    "start": "3366960",
    "end": "3375119"
  },
  {
    "text": "um either an asp.net or a console application and all of this will run into that and you deploy it into",
    "start": "3375119",
    "end": "3380940"
  },
  {
    "text": "whatever you want to do so you could put them in Docker containers run them in kubernetes or you can just ship the",
    "start": "3380940",
    "end": "3388920"
  },
  {
    "text": "access and run the run them on a bare metal hardware if you want it basically",
    "start": "3388920",
    "end": "3394920"
  },
  {
    "text": "runs wherever.net does I would say um now the thing is the the difference",
    "start": "3394920",
    "end": "3403020"
  },
  {
    "text": "between them but also there they grew a lot closer together in the latest release of akadon that is how clusters",
    "start": "3403020",
    "end": "3409260"
  },
  {
    "text": "discover each other um in the in the past we needed a node",
    "start": "3409260",
    "end": "3414660"
  },
  {
    "text": "in accord.net that all of the cluster nodes could connect to so that they could discover each other and that has",
    "start": "3414660",
    "end": "3420480"
  },
  {
    "text": "been done away with to move towards a system that is very similar to the way that cluster nodes discover each other",
    "start": "3420480",
    "end": "3425940"
  },
  {
    "text": "in in or Lanes as well so the deployment for these two pretty",
    "start": "3425940",
    "end": "3431339"
  },
  {
    "text": "similar I would say um I think it's probably easier if you want",
    "start": "3431339",
    "end": "3437819"
  },
  {
    "text": "to have an in-process actor system to",
    "start": "3437819",
    "end": "3442880"
  },
  {
    "text": "just have a console application that maximizes the threats of the hardware",
    "start": "3442880",
    "end": "3448200"
  },
  {
    "text": "that you have at your disposal that's probably a little bit easier to do with our Condon with Orleans",
    "start": "3448200",
    "end": "3453839"
  },
  {
    "text": "because then you need to in Orleans you would need to spin up a",
    "start": "3453839",
    "end": "3459359"
  },
  {
    "text": "single node cluster because it's always working in in a cluster mechanism you",
    "start": "3459359",
    "end": "3464819"
  },
  {
    "text": "could do a local host single node cluster but it will still spin up some networking stuff",
    "start": "3464819",
    "end": "3470099"
  },
  {
    "text": "is that correct not really okay",
    "start": "3470099",
    "end": "3475579"
  },
  {
    "text": "oh it's not going to use networking okay we don't have to okay so I was wrong it's so it's completely the same then",
    "start": "3481319",
    "end": "3489740"
  },
  {
    "text": "okay",
    "start": "3490319",
    "end": "3492740"
  },
  {
    "text": "interesting question um because obviously these cluster nodes will spin up the notes by the contract",
    "start": "3499260",
    "end": "3506220"
  },
  {
    "text": "that they know and the implementation that they know",
    "start": "3506220",
    "end": "3510319"
  },
  {
    "text": "um I'm actually speaking in this room next in 15 minutes and I'll talk about how you handle that and knock it on there",
    "start": "3514140",
    "end": "3519900"
  },
  {
    "text": "mm-hmm yeah okay why not right",
    "start": "3519900",
    "end": "3527660"
  },
  {
    "text": "um well that's that's always excuse me",
    "start": "3531780",
    "end": "3536000"
  },
  {
    "text": "okay",
    "start": "3542460",
    "end": "3544940"
  },
  {
    "text": "okay",
    "start": "3552180",
    "end": "3555180"
  },
  {
    "text": "wait I can um it was on my previous laptop I'm not sure I probably committed it somewhere",
    "start": "3563400",
    "end": "3570720"
  },
  {
    "text": "um but yeah if you want we can talk about it afterwards okay",
    "start": "3570720",
    "end": "3576558"
  },
  {
    "text": "sure sure so the question was like should we use this for tasks that do not need",
    "start": "3587760",
    "end": "3593760"
  },
  {
    "text": "massive scaling um definitely I've used it to use",
    "start": "3593760",
    "end": "3599220"
  },
  {
    "text": "um I've built load testing tools for apis with it because it's really easy to spin up a bunch of actors in a process",
    "start": "3599220",
    "end": "3606420"
  },
  {
    "text": "and make let all of them do independent API calls um",
    "start": "3606420",
    "end": "3611460"
  },
  {
    "text": "you can build whatever if you just want to be able to respond to stuff in memory and you want to spin up actors to be",
    "start": "3611460",
    "end": "3618000"
  },
  {
    "text": "able to do that you could use it for that as well if you just do actorsystem.create you",
    "start": "3618000",
    "end": "3623700"
  },
  {
    "text": "have it in your process and it's not a cluster by default so",
    "start": "3623700",
    "end": "3629220"
  },
  {
    "text": "um you can use these two to just do hype",
    "start": "3629220",
    "end": "3634260"
  },
  {
    "text": "do do multi-threaded stuff in in a single process as well and make that easier for you",
    "start": "3634260",
    "end": "3640099"
  },
  {
    "text": "so definitely",
    "start": "3640099",
    "end": "3643400"
  },
  {
    "text": "okay and my time is up so [Applause]",
    "start": "3648240",
    "end": "3656939"
  }
]