[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "uh my name is Nuri I'm going to be talking about designing a good schema uh",
    "start": "2240",
    "end": "8340"
  },
  {
    "text": "to get better results um I've been a developer to start with",
    "start": "8340",
    "end": "14040"
  },
  {
    "text": "Delta lot with back end our database or data structures been doing a lot of data",
    "start": "14040",
    "end": "20580"
  },
  {
    "text": "migrations lately been doing a lot of c-sharp in my career also other programming languages python",
    "start": "20580",
    "end": "27720"
  },
  {
    "text": "JavaScript stuff like that and since I've been around I figured I put the stock together just to kind of",
    "start": "27720",
    "end": "34440"
  },
  {
    "text": "share my experience about what worked short term what worked longer term and",
    "start": "34440",
    "end": "40200"
  },
  {
    "text": "this is really about trying to optimize for longer term so if I break down the",
    "start": "40200",
    "end": "46879"
  },
  {
    "start": "45000",
    "end": "97000"
  },
  {
    "text": "slide into what I'm really looking at the use case scenario I'm kind of",
    "start": "46879",
    "end": "51960"
  },
  {
    "text": "envisioning here is that as a developer I want a good schema that I won't regret",
    "start": "51960",
    "end": "58980"
  },
  {
    "text": "later and we've all been there or maybe haven't um that we designed something we thought",
    "start": "58980",
    "end": "66360"
  },
  {
    "text": "it's great we thought it's quick we thought we fulfilled everything just to find out that after delivering the first",
    "start": "66360",
    "end": "73560"
  },
  {
    "text": "iteration or the first iteration into test or living with it for a year or five uh you discover all of these things",
    "start": "73560",
    "end": "81479"
  },
  {
    "text": "that all of these decisions that seemed right at the time and turned out not to be optimal",
    "start": "81479",
    "end": "87540"
  },
  {
    "text": "so breaking it down a little more we have to ask ourselves well good scheme assam's color qualifying what is the",
    "start": "87540",
    "end": "94200"
  },
  {
    "text": "word good like what do I mean by that okay that's a fair question so",
    "start": "94200",
    "end": "100259"
  },
  {
    "start": "97000",
    "end": "250000"
  },
  {
    "text": "the fitness criteria I'm looking for I need to stay in this song because otherwise I'm walking off camera okay",
    "start": "100259",
    "end": "106200"
  },
  {
    "text": "it's here so the fitness criteria I'm looking for are roughly that the schema",
    "start": "106200",
    "end": "113640"
  },
  {
    "text": "really wants to solve a business problem",
    "start": "113640",
    "end": "118860"
  },
  {
    "text": "um so what would be not a business problem like making my boss happy would not be a",
    "start": "118860",
    "end": "125579"
  },
  {
    "text": "business problem if it serves a customer yes it's a big it's a business problem but if it doesn't it really doesn't",
    "start": "125579",
    "end": "131700"
  },
  {
    "text": "belong in the things I need to solve so you gotta watch out for requirement creeps that tell you how to do things",
    "start": "131700",
    "end": "138300"
  },
  {
    "text": "that has nothing to do with the real business problem you're solving and within what you're solving for the real",
    "start": "138300",
    "end": "145920"
  },
  {
    "text": "business you want to make sure that it doesn't uh scope creep into things that",
    "start": "145920",
    "end": "153840"
  },
  {
    "text": "are not in the real world that are internal technical things that can creep",
    "start": "153840",
    "end": "159239"
  },
  {
    "text": "in and pressure you to make schema decisions based on that that don't belong to solving so it's the size of",
    "start": "159239",
    "end": "166019"
  },
  {
    "text": "the actual word that I care about and the things that serve that fit in the things that don't maybe a little less so",
    "start": "166019",
    "end": "173819"
  },
  {
    "text": "and the schema should be easy to reason with right note the future self I need to read this later I need to communicate",
    "start": "173819",
    "end": "181200"
  },
  {
    "text": "this with a team I need everybody to be on the same page and understand it I don't want something so convoluted that",
    "start": "181200",
    "end": "188099"
  },
  {
    "text": "is so difficult to use one example of that has anybody heard of",
    "start": "188099",
    "end": "193700"
  },
  {
    "text": "eav entity attribute value type schemas one over there",
    "start": "193700",
    "end": "201120"
  },
  {
    "text": "um if we have time I can go into this big anti-pattern for for any kind of medium",
    "start": "201120",
    "end": "209580"
  },
  {
    "text": "to large scale it's a way to represent things in a very flexible way in databases schemas that were designed to",
    "start": "209580",
    "end": "216420"
  },
  {
    "text": "be rigid and well defined the disaster with that is that querying",
    "start": "216420",
    "end": "222840"
  },
  {
    "text": "this thing in any kind of way is is just kind of horrific and convoluted and very",
    "start": "222840",
    "end": "228780"
  },
  {
    "text": "difficult to reason with and finally I wanted to be change tolerant so in the interest of future",
    "start": "228780",
    "end": "237480"
  },
  {
    "text": "self I want to be able to evolve this as my product evolves as our business case",
    "start": "237480",
    "end": "243720"
  },
  {
    "text": "evolves with a minimal set of impact",
    "start": "243720",
    "end": "250159"
  },
  {
    "start": "250000",
    "end": "290000"
  },
  {
    "text": "and I'm saying model but we got to talk about this for a second because that's a design thing",
    "start": "250200",
    "end": "256859"
  },
  {
    "text": "model versus schema so in the title I put schema and schema is very specific",
    "start": "256859",
    "end": "261959"
  },
  {
    "text": "model the real world is out there it's well we're in it right we're right here",
    "start": "261959",
    "end": "267259"
  },
  {
    "text": "and this is the domain this is the area in which we talk about models",
    "start": "267259",
    "end": "273780"
  },
  {
    "text": "so I can model a person I can look at real world things about a person their",
    "start": "273780",
    "end": "280199"
  },
  {
    "text": "height uh how they're dressed uh their hair color if they have any uh things",
    "start": "280199",
    "end": "286259"
  },
  {
    "text": "like that that was a joke sorry okay thank you",
    "start": "286259",
    "end": "291419"
  },
  {
    "start": "290000",
    "end": "328000"
  },
  {
    "text": "and then in the database world when we're talking about stuff we're talking about schema we're talking really about",
    "start": "291419",
    "end": "297240"
  },
  {
    "text": "the structures of how the data is actually stored and that dictates how it",
    "start": "297240",
    "end": "303660"
  },
  {
    "text": "would be processed and the most important thing is the design so the",
    "start": "303660",
    "end": "309120"
  },
  {
    "text": "design is moving from the world the real world the model into the schema",
    "start": "309120",
    "end": "318120"
  },
  {
    "text": "a model represents the uh real world",
    "start": "318120",
    "end": "325080"
  },
  {
    "text": "did you notice it looks like a smiley I don't know I kind of liked it uh a model represents the real world uh so the",
    "start": "325080",
    "end": "332759"
  },
  {
    "start": "328000",
    "end": "391000"
  },
  {
    "text": "model is looking at a person looking at properties that I can see looking at a I",
    "start": "332759",
    "end": "339600"
  },
  {
    "text": "don't know an oil rig a pipe a whatever it is we represent a catalog item is a",
    "start": "339600",
    "end": "346139"
  },
  {
    "text": "product right so catalog item belongs into this idea that we have some kind of",
    "start": "346139",
    "end": "352620"
  },
  {
    "text": "catalog maybe it's a real printable catalog and there's items that I show in the brochure and now I show it in the",
    "start": "352620",
    "end": "358440"
  },
  {
    "text": "web but that's representative of the real world I pick out things that are",
    "start": "358440",
    "end": "365220"
  },
  {
    "text": "observable about the thing I'm trying to represent so a catalog item has a name",
    "start": "365220",
    "end": "373020"
  },
  {
    "text": "and I give it a name it has some measurements things like that and it's",
    "start": "373020",
    "end": "379380"
  },
  {
    "text": "the stuff I care about for business so if I care about its weight then it's",
    "start": "379380",
    "end": "385080"
  },
  {
    "text": "in my model and if I don't care about its weight it's not in my model as simple as that",
    "start": "385080",
    "end": "391080"
  },
  {
    "start": "391000",
    "end": "685000"
  },
  {
    "text": "schema on their other hand schema implements the model so once we came up",
    "start": "391080",
    "end": "397560"
  },
  {
    "text": "with what we care about from the business perspective from The Real World",
    "start": "397560",
    "end": "403220"
  },
  {
    "text": "then we design we can move into schema land and schema land is where we get to",
    "start": "403220",
    "end": "409979"
  },
  {
    "text": "speak a different language because when I say an item has a weight",
    "start": "409979",
    "end": "417020"
  },
  {
    "text": "there is no weight inside computer language",
    "start": "417020",
    "end": "422639"
  },
  {
    "text": "there's numbers I can pick the right number for it or the right representation for whatever I'm trying",
    "start": "422639",
    "end": "428819"
  },
  {
    "text": "to do so I can say oh a weight is just a decimal representation of the weight in",
    "start": "428819",
    "end": "434759"
  },
  {
    "text": "kilograms or in grams or in pounds or stone or whatever I want",
    "start": "434759",
    "end": "439860"
  },
  {
    "text": "but there is no weight inside SQL SQL is its own language so really we're going to start",
    "start": "439860",
    "end": "446280"
  },
  {
    "text": "translating things that in the real world were expressed in all of the terms we know in our own language of what we",
    "start": "446280",
    "end": "453960"
  },
  {
    "text": "speak speaking language and translating it into schema in some way",
    "start": "453960",
    "end": "459599"
  },
  {
    "text": "and it describes an entity graph in that when we have things and I have",
    "start": "459599",
    "end": "466319"
  },
  {
    "text": "an item and I have a catalog that's a graph that's a representation of relationships between different things a",
    "start": "466319",
    "end": "473160"
  },
  {
    "text": "catalog item to a catalog in invoice of you know a piece of paper that details",
    "start": "473160",
    "end": "479940"
  },
  {
    "text": "you know the customer and the items they have in their shopping cart or stuff like that their prices the totals all of",
    "start": "479940",
    "end": "487020"
  },
  {
    "text": "these kind of things so all of these things are relationships between things and",
    "start": "487020",
    "end": "492240"
  },
  {
    "text": "um I just say this is a graph this is a a representation of nodes with",
    "start": "492240",
    "end": "498479"
  },
  {
    "text": "connections between them it can describe",
    "start": "498479",
    "end": "504080"
  },
  {
    "text": "constraints on values so that's a domain of schema so when I say hey I have",
    "start": "504080",
    "end": "511379"
  },
  {
    "text": "countries in the real world that's in my model in SQL there is no country's data type",
    "start": "511379",
    "end": "518099"
  },
  {
    "text": "right there's a stringy data type there's a numeric data type there's all kinds of things I can say okay well you",
    "start": "518099",
    "end": "526080"
  },
  {
    "text": "know I'll store it in a chart too because I have ISO two letter codes for",
    "start": "526080",
    "end": "531120"
  },
  {
    "text": "all countries that would be called a domain so it's a type meaning car Char",
    "start": "531120",
    "end": "537200"
  },
  {
    "text": "whatever you want and it has restrictions on what values it has it",
    "start": "537200",
    "end": "543240"
  },
  {
    "text": "doesn't have to be restriction it could be looked as allow us but in any case I'm describing that when I store this",
    "start": "543240",
    "end": "549720"
  },
  {
    "text": "stuff it better be in that domain and some databases actually support this",
    "start": "549720",
    "end": "556380"
  },
  {
    "text": "notion and allow you to declare a domain it's it's a it's a pretty pretty rare to",
    "start": "556380",
    "end": "562019"
  },
  {
    "text": "see that people really use domain more likely they're using what's called domain tables which is just creating a",
    "start": "562019",
    "end": "568260"
  },
  {
    "text": "table and saying ah this table is the universe of all values that could be ever used for a country",
    "start": "568260",
    "end": "575100"
  },
  {
    "text": "and your mileage may vary I'm not talking about specific database implementation",
    "start": "575100",
    "end": "581220"
  },
  {
    "text": "here so um you know you may find that you want to use domains you may find that you",
    "start": "581220",
    "end": "586380"
  },
  {
    "text": "want to use the more generic implementation of domain tables to",
    "start": "586380",
    "end": "591480"
  },
  {
    "text": "restrict which values can go in and finally the schema layout will",
    "start": "591480",
    "end": "599399"
  },
  {
    "text": "actually impact your performance and this is where I recommend to not come to my talk but go and hit the books talk to",
    "start": "599399",
    "end": "606779"
  },
  {
    "text": "your dbas uh go to courses study on your own read the manual however you find a",
    "start": "606779",
    "end": "613200"
  },
  {
    "text": "way to learn more about the implementation the engine itself how it works the better your performance will",
    "start": "613200",
    "end": "620160"
  },
  {
    "text": "be because as it turns out your schema could be implemented you can Define tables with",
    "start": "620160",
    "end": "628440"
  },
  {
    "text": "partitions you can define various indexing strategies clustered indexes all kinds of things that will",
    "start": "628440",
    "end": "635959"
  },
  {
    "text": "vastly improve your performance or totally kill it depending on what",
    "start": "635959",
    "end": "641220"
  },
  {
    "text": "choices you make so this is where beyond the concept of schema and just saying using generic ddl data definition",
    "start": "641220",
    "end": "648720"
  },
  {
    "text": "language to describe my tables and my stuff you can go in and use the",
    "start": "648720",
    "end": "654660"
  },
  {
    "text": "optimization that each engine provides for you in order to create say a partition table in order to map",
    "start": "654660",
    "end": "660899"
  },
  {
    "text": "partitions to files files groups things like that those kind of things if you",
    "start": "660899",
    "end": "666300"
  },
  {
    "text": "get deep into it can help you a lot and those tend to fold in a lot more",
    "start": "666300",
    "end": "673380"
  },
  {
    "text": "knowledge of not just the model but how your use case is going to lay out on",
    "start": "673380",
    "end": "678480"
  },
  {
    "text": "that meaning how often are you going to access things at what rate how much data",
    "start": "678480",
    "end": "684120"
  },
  {
    "text": "you expect things like that",
    "start": "684120",
    "end": "687320"
  },
  {
    "start": "685000",
    "end": "755000"
  },
  {
    "text": "and the main thing is I don't want to regret it right I don't want to make things that decisions today that I will",
    "start": "689640",
    "end": "696180"
  },
  {
    "text": "regret tomorrow so the question is what will I regret tomorrow I can tell you a few things I regretted one is things",
    "start": "696180",
    "end": "704160"
  },
  {
    "text": "were way too complicated too complicated I I did the eav model once regretted it",
    "start": "704160",
    "end": "710820"
  },
  {
    "text": "wholeheartedly it's a complex way to represent flexible objects and",
    "start": "710820",
    "end": "715860"
  },
  {
    "text": "relational databases are just not built for that so every query and everything we wanted to do it was an uphill battle",
    "start": "715860",
    "end": "724320"
  },
  {
    "text": "downtime when changes were too vast when I needed to make a change and it",
    "start": "724320",
    "end": "730200"
  },
  {
    "text": "required me to take the database offline and therefore the applications I talk to it offline that's very painful",
    "start": "730200",
    "end": "736560"
  },
  {
    "text": "and just lots of work if the changes are possible but just require a ton of work",
    "start": "736560",
    "end": "742740"
  },
  {
    "text": "that's big investment that's more planning that's more involvement of more people that's harder to roll into",
    "start": "742740",
    "end": "748260"
  },
  {
    "text": "production so those are all regrettable decisions",
    "start": "748260",
    "end": "753620"
  },
  {
    "start": "755000",
    "end": "985000"
  },
  {
    "text": "so in terms of work I kind of put together this thing and um",
    "start": "755579",
    "end": "762839"
  },
  {
    "text": "it it it's DB engine specific but I think it's worth staring at for a",
    "start": "762839",
    "end": "768660"
  },
  {
    "text": "little bit um I tried to say well how do we break down what is the impact",
    "start": "768660",
    "end": "776639"
  },
  {
    "text": "of change if I want to change something what does it involve so in terms of ddl and we're talking",
    "start": "776639",
    "end": "784139"
  },
  {
    "text": "about the data definition language how my tables are declared what do I declare",
    "start": "784139",
    "end": "789240"
  },
  {
    "text": "I declare that there is a table or there isn't right create a table okay that's cheap",
    "start": "789240",
    "end": "795899"
  },
  {
    "text": "just create a new table nobody used it before what's my dependencies another just about zero right I can do that all",
    "start": "795899",
    "end": "802980"
  },
  {
    "text": "day but if I drop a table I gotta ask myself hey was the stable involved with anybody",
    "start": "802980",
    "end": "810000"
  },
  {
    "text": "else was it part of a graph with other things in which case you know there may",
    "start": "810000",
    "end": "815639"
  },
  {
    "text": "be a little more impact or high impact depending on how uh how interconnected how many foreign Keys it has to other",
    "start": "815639",
    "end": "822660"
  },
  {
    "text": "things so dropping a table and creating a table not the same and dropping a table that",
    "start": "822660",
    "end": "830040"
  },
  {
    "text": "has strings and tentacles to other stuff more expensive adding a column with a null value",
    "start": "830040",
    "end": "837120"
  },
  {
    "text": "generally considered a zero cost operation populating it with values can",
    "start": "837120",
    "end": "843899"
  },
  {
    "text": "take a little more huge huge tables even more but still it's within the realm of kinda easy",
    "start": "843899",
    "end": "849899"
  },
  {
    "text": "right but if this was involved with other key",
    "start": "849899",
    "end": "856800"
  },
  {
    "text": "constraints if the column was involved in some constraints then we have to take",
    "start": "856800",
    "end": "863880"
  },
  {
    "text": "more care it's not a zero time operation on large tables when you manipulate",
    "start": "863880",
    "end": "870360"
  },
  {
    "text": "columns that participate in foreign key that's where your complexity suddenly",
    "start": "870360",
    "end": "875579"
  },
  {
    "text": "starts that's where interconnectivity shows up and then you may have cascading",
    "start": "875579",
    "end": "881220"
  },
  {
    "text": "updates in other places so that costs more",
    "start": "881220",
    "end": "885620"
  },
  {
    "text": "um talking about dropping column kind of similar to dropping a table that has that column because it all has to do",
    "start": "886800",
    "end": "893220"
  },
  {
    "text": "with these interconnected with this graph of objects that interact with each",
    "start": "893220",
    "end": "898980"
  },
  {
    "text": "other and finally changing a column type",
    "start": "898980",
    "end": "904880"
  },
  {
    "text": "it kind of depends if your column types become",
    "start": "905100",
    "end": "910800"
  },
  {
    "text": "um if if you had a numeric that was too narrow and you widened it you're really",
    "start": "910800",
    "end": "917639"
  },
  {
    "text": "more accommodating if you're taking a type and changing it completely it was string and now it's an INT anybody that",
    "start": "917639",
    "end": "924839"
  },
  {
    "text": "treated it before a string and wanted to parse it now has to worry about it so",
    "start": "924839",
    "end": "930000"
  },
  {
    "text": "that's a more sweeping change um and then if you're narrowing",
    "start": "930000",
    "end": "935160"
  },
  {
    "text": "something if you're taking something that was open and making it more restrictive then again you have to worry about",
    "start": "935160",
    "end": "942660"
  },
  {
    "text": "everybody that was using it making sure their math isn't harmed making sure your data didn't lose Precision without you",
    "start": "942660",
    "end": "950160"
  },
  {
    "text": "knowing and intending to do that so it's kind of good I think to map",
    "start": "950160",
    "end": "956699"
  },
  {
    "text": "the impact of the changes I anticipate or the changes I might experience as a",
    "start": "956699",
    "end": "963240"
  },
  {
    "text": "result of changing constraints to map it mentally to like what's the cost of this",
    "start": "963240",
    "end": "968639"
  },
  {
    "text": "change and if you start with that then when you're designing you say okay I'm doing",
    "start": "968639",
    "end": "974040"
  },
  {
    "text": "this decision now what if I had to change it what changes can happen to it and based on",
    "start": "974040",
    "end": "980339"
  },
  {
    "text": "that I can try to project well is it advisable to do today",
    "start": "980339",
    "end": "986360"
  },
  {
    "start": "985000",
    "end": "1315000"
  },
  {
    "text": "So based on what I just said I would start with seven ish kind of areas that I marked as",
    "start": "987060",
    "end": "995040"
  },
  {
    "text": "uh errors or things to know or things to do that might make your life better or",
    "start": "995040",
    "end": "1000259"
  },
  {
    "text": "pick data types opaque data types are data types that don't represent a single thing or don't",
    "start": "1000259",
    "end": "1008120"
  },
  {
    "text": "represent anything for the database itself a composed string can be an opaque data type",
    "start": "1008120",
    "end": "1015860"
  },
  {
    "text": "if I have full name as a field in my database",
    "start": "1015860",
    "end": "1021259"
  },
  {
    "text": "or a column in my database I should say and I always treat it as just full name",
    "start": "1021259",
    "end": "1027798"
  },
  {
    "text": "my database is just for label printing I put in the name it's part of the address",
    "start": "1027799",
    "end": "1032959"
  },
  {
    "text": "is full name it's just a thing that appears on the line I never care if it's",
    "start": "1032959",
    "end": "1038178"
  },
  {
    "text": "Nuri Halperin or Bob Smith or Jane J",
    "start": "1038179",
    "end": "1043400"
  },
  {
    "text": "Smith or whatever it is doesn't matter but it becomes an opaque data type if in",
    "start": "1043400",
    "end": "1050720"
  },
  {
    "text": "my business requirements I need to then go and sort it by last name",
    "start": "1050720",
    "end": "1056840"
  },
  {
    "text": "because the database has no idea that within this string there's some spaces and they mean",
    "start": "1056840",
    "end": "1062780"
  },
  {
    "text": "something and then that the last part of it is actually the last name",
    "start": "1062780",
    "end": "1068780"
  },
  {
    "text": "and sometimes last names are multi-word last names so actually counting and",
    "start": "1068780",
    "end": "1075020"
  },
  {
    "text": "going to the last is not going to work and the database has no idea about it right the database is just varchar and",
    "start": "1075020",
    "end": "1082039"
  },
  {
    "text": "varchar right as programmers we think string but same thing the database even",
    "start": "1082039",
    "end": "1087679"
  },
  {
    "text": "in string it's opaque because it has multiple parts so doing that",
    "start": "1087679",
    "end": "1093320"
  },
  {
    "text": "messes you up later it's better if you know that there are constituents to a",
    "start": "1093320",
    "end": "1098780"
  },
  {
    "text": "thing to break it apart into its constituents blob for the same reason a blob is",
    "start": "1098780",
    "end": "1105440"
  },
  {
    "text": "something that maybe doesn't have delimiters naturally in it or that they are not even attainable within the SQL",
    "start": "1105440",
    "end": "1113960"
  },
  {
    "text": "language a byte string would be a good example for that where",
    "start": "1113960",
    "end": "1122419"
  },
  {
    "text": "um you know it's just a sequence of bytes and sure in programming I know how",
    "start": "1122419",
    "end": "1127520"
  },
  {
    "text": "to scroll in and use protobufs and hop into the right byte to extract the field from it but as far as the database is",
    "start": "1127520",
    "end": "1134120"
  },
  {
    "text": "concerned it's a blob image data jpegs inside the database",
    "start": "1134120",
    "end": "1141760"
  },
  {
    "text": "I I never not regretted putting binary data in the database like there's an app",
    "start": "1141980",
    "end": "1147799"
  },
  {
    "text": "for that it's called the file system it's called buckets store the pointer",
    "start": "1147799",
    "end": "1153740"
  },
  {
    "text": "those are things for those are infrastructure for these things in the",
    "start": "1153740",
    "end": "1159500"
  },
  {
    "text": "database keep things that are relational that are property that are processable processible with logical operators",
    "start": "1159500",
    "end": "1167720"
  },
  {
    "text": "I can't say image one greater than image image two makes no sense I can't scroll",
    "start": "1167720",
    "end": "1174500"
  },
  {
    "text": "in there and even tell you if it's an exif A J fifth or a gif or a gif can't",
    "start": "1174500",
    "end": "1180919"
  },
  {
    "text": "say any of that just don't know and Json and XML suffer some from some",
    "start": "1180919",
    "end": "1186980"
  },
  {
    "text": "stuff that is very similar except as humans we can say oh what do you mean I",
    "start": "1186980",
    "end": "1192440"
  },
  {
    "text": "understand these delimiters but the database doesn't so don't do",
    "start": "1192440",
    "end": "1197480"
  },
  {
    "text": "that incorrect data types you know dates as strings is the most often seen one in my",
    "start": "1197480",
    "end": "1205460"
  },
  {
    "text": "experience it's just using the database uh to store seemingly flexible data type",
    "start": "1205460",
    "end": "1213700"
  },
  {
    "text": "or just shuttling it from the front end and having no marshalling so I can show",
    "start": "1213700",
    "end": "1218900"
  },
  {
    "text": "it as a string again the database doesn't know how to compare it correctly at best you will do an ISO",
    "start": "1218900",
    "end": "1226700"
  },
  {
    "text": "representation that is canonical and you can do comparisons of greater less than but then you'll have to break it apart",
    "start": "1226700",
    "end": "1233360"
  },
  {
    "text": "look at constituent of the time time zone offset things like that",
    "start": "1233360",
    "end": "1238940"
  },
  {
    "text": "ugly stuff there is a database data type for that in the database knows how to do",
    "start": "1238940",
    "end": "1244160"
  },
  {
    "text": "things like extract the time zone the minute the second the whatever from proper date types so use the proper date",
    "start": "1244160",
    "end": "1252380"
  },
  {
    "text": "time and finally non-domain values it's not",
    "start": "1252380",
    "end": "1257480"
  },
  {
    "text": "something you do in your ddl so much but if in your column you're going to shove",
    "start": "1257480",
    "end": "1263120"
  },
  {
    "text": "some random value that is not from your domain like you have all country codes and then",
    "start": "1263120",
    "end": "1269000"
  },
  {
    "text": "you represent Country Code Zero for all of those that you don't know the country code",
    "start": "1269000",
    "end": "1274580"
  },
  {
    "text": "that's wrong and putting null is also not something from the domain null",
    "start": "1274580",
    "end": "1280940"
  },
  {
    "text": "is it a type is it a value it's not a value it's a type right and it doesn't belong to the country codes there is no",
    "start": "1280940",
    "end": "1287960"
  },
  {
    "text": "country in the world that is null right so it's a non-domain value and",
    "start": "1287960",
    "end": "1293600"
  },
  {
    "text": "non-domain values mean that the database doesn't know that it doesn't belong",
    "start": "1293600",
    "end": "1298940"
  },
  {
    "text": "there so all comparisons are going to run against it as if it's just part of the domain but in fact it isn't and you",
    "start": "1298940",
    "end": "1306200"
  },
  {
    "text": "will have to write extra logic to handle it everywhere so don't store values that don't belong",
    "start": "1306200",
    "end": "1312559"
  },
  {
    "text": "to the domain that you intended",
    "start": "1312559",
    "end": "1316120"
  },
  {
    "start": "1315000",
    "end": "1354000"
  },
  {
    "text": "how do we fix OPEC data types I created a I think I talked about",
    "start": "1318200",
    "end": "1325940"
  },
  {
    "text": "the OPEC data type issues um",
    "start": "1325940",
    "end": "1331900"
  },
  {
    "text": "that SQL language is not made to do it there's limited support and opaque data",
    "start": "1332000",
    "end": "1338960"
  },
  {
    "text": "types and non-domain values are are hard to deal with and just inject a lot of",
    "start": "1338960",
    "end": "1345140"
  },
  {
    "text": "logic and later on you'll have to undo that or change it or handle it everywhere it just kind of spiders",
    "start": "1345140",
    "end": "1351260"
  },
  {
    "text": "throughout your organization so how to fix it it's pretty simple it looks cunningly",
    "start": "1351260",
    "end": "1357919"
  },
  {
    "start": "1354000",
    "end": "1513000"
  },
  {
    "text": "like denormalization templates uh except I",
    "start": "1357919",
    "end": "1363200"
  },
  {
    "text": "don't love the word denormalization um you start with a value",
    "start": "1363200",
    "end": "1369140"
  },
  {
    "text": "you have in your domain something you need to represent it you stare at it and",
    "start": "1369140",
    "end": "1374299"
  },
  {
    "text": "you ask yourself is it atomic is it Atomic yes I can map it directly to a",
    "start": "1374299",
    "end": "1380840"
  },
  {
    "text": "SQL data type if it's so that's the top branch on the",
    "start": "1380840",
    "end": "1386000"
  },
  {
    "text": "train then I've won let's see if pointer technology works here",
    "start": "1386000",
    "end": "1391760"
  },
  {
    "text": "so you go in here is it Atomic yes great good you just encode it as a SQL native",
    "start": "1391760",
    "end": "1399260"
  },
  {
    "text": "type and you've won you come in and it's not atomic and now the question is what's it what",
    "start": "1399260",
    "end": "1406520"
  },
  {
    "text": "is its non-atomicity is it because it's actually a set of",
    "start": "1406520",
    "end": "1411559"
  },
  {
    "text": "properties like you took a dictionary and tried to shove it into Json",
    "start": "1411559",
    "end": "1417200"
  },
  {
    "text": "if you did that then this is a key value really it's this Branch right here",
    "start": "1417200",
    "end": "1424340"
  },
  {
    "text": "and each key really wants to be a column the way to represent things in a SQL",
    "start": "1424340",
    "end": "1431000"
  },
  {
    "text": "database is assigning a column with a proper data type nanopic",
    "start": "1431000",
    "end": "1436580"
  },
  {
    "text": "so you take each one of the keys you turn it into a column name and you stare",
    "start": "1436580",
    "end": "1441919"
  },
  {
    "text": "at the value but you're not done because that value in itself",
    "start": "1441919",
    "end": "1447080"
  },
  {
    "text": "you have to look at it and ask yourself again is it Atomic yes okay I've won I'm",
    "start": "1447080",
    "end": "1452480"
  },
  {
    "text": "done with my column no it's not okay well ask yourself again is it a",
    "start": "1452480",
    "end": "1458120"
  },
  {
    "text": "dictionary with keys and values in which case you want to break it or is it a",
    "start": "1458120",
    "end": "1463280"
  },
  {
    "text": "sequence of items maybe you have an array masquerading as XML or something like that",
    "start": "1463280",
    "end": "1469820"
  },
  {
    "text": "or maybe you have a train of values represented by some buffer or something",
    "start": "1469820",
    "end": "1475280"
  },
  {
    "text": "like that and they are actually an array or a set of things so then the answer there is well if it's",
    "start": "1475280",
    "end": "1483260"
  },
  {
    "text": "a set of things since columns in SQL better be Atomic that means I need a",
    "start": "1483260",
    "end": "1489679"
  },
  {
    "text": "different table so it's going to become a column in another table with a reference back to",
    "start": "1489679",
    "end": "1497780"
  },
  {
    "text": "the parent table so that's my algorithm there",
    "start": "1497780",
    "end": "1505240"
  },
  {
    "text": "make sense any questions on that okay",
    "start": "1507200",
    "end": "1513820"
  },
  {
    "start": "1513000",
    "end": "1565000"
  },
  {
    "text": "which brings us to air 2. I see a lot multi-entity table",
    "start": "1516080",
    "end": "1522980"
  },
  {
    "text": "multi-entity table is a generalized table it's a table that wants to store kind of",
    "start": "1522980",
    "end": "1528740"
  },
  {
    "text": "the parent or the base and also all its children in one row",
    "start": "1528740",
    "end": "1535659"
  },
  {
    "text": "and the thing about it is that you can see it when you see rows",
    "start": "1539900",
    "end": "1546620"
  },
  {
    "text": "which have either pattern or unpatterned columns that are always null for some",
    "start": "1546620",
    "end": "1552500"
  },
  {
    "text": "rows and not null for others and they interleave with rows that are",
    "start": "1552500",
    "end": "1558020"
  },
  {
    "text": "null for others but not for some okay it's hard to say it in English",
    "start": "1558020",
    "end": "1564799"
  },
  {
    "text": "let's look at an example here we have a table of a catalog item",
    "start": "1564799",
    "end": "1571520"
  },
  {
    "start": "1565000",
    "end": "1668000"
  },
  {
    "text": "a catalog item in my catalog has a SKU SKU",
    "start": "1571520",
    "end": "1577580"
  },
  {
    "text": "something a code that represents that in my company a name every catalog item it's a shirt",
    "start": "1577580",
    "end": "1583880"
  },
  {
    "text": "it's pants it's something and it has numeric size and letter size and if I looked at values for this table",
    "start": "1583880",
    "end": "1590600"
  },
  {
    "text": "I probably would see that I have you know School ABC T-shirt size m",
    "start": "1590600",
    "end": "1599000"
  },
  {
    "text": "and size M will have numeric size as sorry letter size populated in numeric",
    "start": "1599000",
    "end": "1606020"
  },
  {
    "text": "size null versus I'll have you know pants with",
    "start": "1606020",
    "end": "1612320"
  },
  {
    "text": "size 32 and um then I'll have the letter size null",
    "start": "1612320",
    "end": "1617720"
  },
  {
    "text": "and the name so I can kind of look at it and see okay well the generalization",
    "start": "1617720",
    "end": "1623000"
  },
  {
    "text": "here is that I have a table and there's a generality that all items have a",
    "start": "1623000",
    "end": "1629120"
  },
  {
    "text": "school and a name but then I have some properties some",
    "start": "1629120",
    "end": "1635480"
  },
  {
    "text": "columns that are valid for some stuff but not other and that's because I have",
    "start": "1635480",
    "end": "1641299"
  },
  {
    "text": "products that are inherently different in the real world in the real world I find a shirt and it has an m on the back",
    "start": "1641299",
    "end": "1648740"
  },
  {
    "text": "or I have a shirt or a top that has a size numeric on the back and they're",
    "start": "1648740",
    "end": "1654620"
  },
  {
    "text": "kind of different they're cut different they're manufactured different they're aimed at different people",
    "start": "1654620",
    "end": "1660679"
  },
  {
    "text": "so they are really different but I made them live together in one table",
    "start": "1660679",
    "end": "1667480"
  },
  {
    "start": "1668000",
    "end": "1811000"
  },
  {
    "text": "so the way to kind of fix this is to say well I have a catalog item I",
    "start": "1670460",
    "end": "1676640"
  },
  {
    "text": "still want to be generic there could be category catalog items corresponding to different uh things in the real world",
    "start": "1676640",
    "end": "1683299"
  },
  {
    "text": "but then I have my numeric size catalog items and I",
    "start": "1683299",
    "end": "1688820"
  },
  {
    "text": "shortened the name of the table here but those are numeric sized things",
    "start": "1688820",
    "end": "1694159"
  },
  {
    "text": "and they have a numeric size and then I have a letter size and that lives in a different table",
    "start": "1694159",
    "end": "1702500"
  },
  {
    "text": "so I'm not going to have null in the letter size ever and catalog item that happened to be",
    "start": "1702500",
    "end": "1708919"
  },
  {
    "text": "letter sized will have a relationship to the stable and if I join it it will come out not null and vice versa and if I",
    "start": "1708919",
    "end": "1717200"
  },
  {
    "text": "ever wanted a view that joined both of them or all three tables then I would",
    "start": "1717200",
    "end": "1722779"
  },
  {
    "text": "have a flat thing but I will have it in different columns and I will know what to expect because I did this",
    "start": "1722779",
    "end": "1729080"
  },
  {
    "text": "right I know very easily that this is um an item that has a letter size",
    "start": "1729080",
    "end": "1735740"
  },
  {
    "text": "because it will have a school and a school for letter size dot school and a letter as letter size dot letter size",
    "start": "1735740",
    "end": "1742240"
  },
  {
    "text": "coming back in my joined uh expression to show me what it is so the database",
    "start": "1742240",
    "end": "1749120"
  },
  {
    "text": "doesn't have to think hard if it was more like it was on the left I will need to expose logic",
    "start": "1749120",
    "end": "1758059"
  },
  {
    "text": "um everywhere to tell if this row happens to be wanting to represent things in one way",
    "start": "1758059",
    "end": "1764120"
  },
  {
    "text": "or another or I will have to package it as an OPEC data type that's where people do type as string and just says oh I'll",
    "start": "1764120",
    "end": "1770840"
  },
  {
    "text": "just do size and it'll be a VAR binary and let the application worry about it",
    "start": "1770840",
    "end": "1776120"
  },
  {
    "text": "well great but then what if you want to sort Shirts by size",
    "start": "1776120",
    "end": "1782659"
  },
  {
    "text": "well you know your size 30 40 will sort correctly Maybe",
    "start": "1782659",
    "end": "1787940"
  },
  {
    "text": "or maybe it looks graphically and incorrectly and surely you know",
    "start": "1787940",
    "end": "1793120"
  },
  {
    "text": "SML XL double XL all of those uh extra small will sort weirdly",
    "start": "1793120",
    "end": "1800600"
  },
  {
    "text": "so it's just not good for anyone really to to do OPEC or to have these nulls",
    "start": "1800600",
    "end": "1805940"
  },
  {
    "text": "either way kind of messes you up onwards",
    "start": "1805940",
    "end": "1813640"
  },
  {
    "start": "1811000",
    "end": "1999000"
  },
  {
    "text": "um this one is about abnormal form which",
    "start": "1816919",
    "end": "1822080"
  },
  {
    "text": "means I failed to uh do my process for",
    "start": "1822080",
    "end": "1827419"
  },
  {
    "text": "storing things atomically and in their proper tables",
    "start": "1827419",
    "end": "1834158"
  },
  {
    "text": "so I have my table enrollment here and enrollment in my university has",
    "start": "1834799",
    "end": "1841000"
  },
  {
    "text": "people with a first name and a last name and I place uh",
    "start": "1841000",
    "end": "1847159"
  },
  {
    "text": "I have a placeholder for the scores for the exams uh and uh you know the course",
    "start": "1847159",
    "end": "1855020"
  },
  {
    "text": "belongs to a certain major no it's not the course it's the professor and",
    "start": "1855020",
    "end": "1860419"
  },
  {
    "text": "there's a course itself what the course code is and a teacher and assistant and stuff like that so A bunch of things",
    "start": "1860419",
    "end": "1866720"
  },
  {
    "text": "smell here let's kind of go through them the first thing is I'm limited to the",
    "start": "1866720",
    "end": "1872659"
  },
  {
    "text": "number of exams that can occur in a semester or a quarter or whatever system right because I chose to Pivot this and",
    "start": "1872659",
    "end": "1880220"
  },
  {
    "text": "just put the exams right there so where should it have been",
    "start": "1880220",
    "end": "1885580"
  },
  {
    "text": "a different table that's right and then if exam final exam hasn't",
    "start": "1887480",
    "end": "1893480"
  },
  {
    "text": "occurred yet there will be no row it's not like I have a placeholder because I know I have it it just doesn't exist at",
    "start": "1893480",
    "end": "1900440"
  },
  {
    "text": "this point",
    "start": "1900440",
    "end": "1902799"
  },
  {
    "text": "um in this I will have nulls often because I fixed the columns which means",
    "start": "1905600",
    "end": "1911360"
  },
  {
    "text": "that as time goes by I will start filling in the exam scores and if",
    "start": "1911360",
    "end": "1917120"
  },
  {
    "text": "somebody missed an exam it will forever be no also some of my courses uh just have a",
    "start": "1917120",
    "end": "1924860"
  },
  {
    "text": "teacher a professor some of them have a teaching assistant but that means that",
    "start": "1924860",
    "end": "1930320"
  },
  {
    "text": "rose that there is no teacher assistant forever will have null in there so we",
    "start": "1930320",
    "end": "1935480"
  },
  {
    "text": "talked about that that's silly we have a fixed faculty assignment which means for extremely uh large classes I",
    "start": "1935480",
    "end": "1944059"
  },
  {
    "text": "might not be able to accommodate another ta and other teacher assistance",
    "start": "1944059",
    "end": "1949460"
  },
  {
    "text": "um I might be duplicating data when I see these kind of things there's usually another table which represents the",
    "start": "1949460",
    "end": "1956899"
  },
  {
    "text": "teacher elsewhere so instead of using reference properly to just say well here's a teacher go join if you need",
    "start": "1956899",
    "end": "1963260"
  },
  {
    "text": "their name or whatever the primary key was um that that is probably duplicating data",
    "start": "1963260",
    "end": "1970700"
  },
  {
    "text": "which means at some point There's issues of maintaining consistency between this table and the other one",
    "start": "1970700",
    "end": "1978500"
  },
  {
    "text": "um and you're trying to predict the future you're trying to predict that this you know",
    "start": "1978500",
    "end": "1983960"
  },
  {
    "text": "student will actually complete the course you're trying to predict that you will need to accommodate teachers assistance",
    "start": "1983960",
    "end": "1990320"
  },
  {
    "text": "you're trying to do all kinds of things all kinds of assumptions that may not actually Bear in reality",
    "start": "1990320",
    "end": "1998500"
  },
  {
    "text": "so the effects of that you will have sparse columns that's the",
    "start": "2002620",
    "end": "2008559"
  },
  {
    "text": "ones with nulls that may forever be null may just populate over time it can",
    "start": "2008559",
    "end": "2015460"
  },
  {
    "text": "decrease your flexibility in case I wanted to play with how many Tas and things happen",
    "start": "2015460",
    "end": "2021659"
  },
  {
    "text": "it may negate the join engine the engine join optimizations where",
    "start": "2021659",
    "end": "2030940"
  },
  {
    "text": "um I have um the the query optimizers know",
    "start": "2031000",
    "end": "2037000"
  },
  {
    "text": "how to look at the statistics of indexes and see which query it should do first",
    "start": "2037000",
    "end": "2042340"
  },
  {
    "text": "if I joined you know all of my students into courses it knows which one has more",
    "start": "2042340",
    "end": "2048580"
  },
  {
    "text": "rows and knows how to do it faster if it gets right statistics but when you have",
    "start": "2048580",
    "end": "2053980"
  },
  {
    "text": "null columns it doesn't it just has to kind of guess as to which",
    "start": "2053980",
    "end": "2059500"
  },
  {
    "text": "of the values in the index you're going to hit and it's difficult for it to do without actually scanning the index",
    "start": "2059500",
    "end": "2067898"
  },
  {
    "text": "and as a result you will have indexes that need to contain references to all",
    "start": "2067899",
    "end": "2073300"
  },
  {
    "text": "of um the values in the columns so even if you have nulls some engines will still",
    "start": "2073300",
    "end": "2080378"
  },
  {
    "text": "keep index keys on it or reference to rows with the null value and that",
    "start": "2080379",
    "end": "2087040"
  },
  {
    "text": "increases the overall index size whereas if it was in a side table and there's only you know 10 Tas in the",
    "start": "2087040",
    "end": "2093940"
  },
  {
    "text": "whole school well the index size will be 10 entries",
    "start": "2093940",
    "end": "2099480"
  },
  {
    "text": "and depending on your engine locks and things like that will also creep up so",
    "start": "2100000",
    "end": "2106060"
  },
  {
    "text": "as you update tables that are multi-entity or that are of abnormal",
    "start": "2106060",
    "end": "2111640"
  },
  {
    "text": "form you will find that right lock contentions at a higher level like at",
    "start": "2111640",
    "end": "2118960"
  },
  {
    "text": "the table instead of just Roblox will start creeping up because everything you write is into the table whereas if you",
    "start": "2118960",
    "end": "2125859"
  },
  {
    "text": "just wanted to add a teacher's assistant in a teacher's assistant table you're locking there so now you made all the",
    "start": "2125859",
    "end": "2133119"
  },
  {
    "text": "locks kind of compete in this table space",
    "start": "2133119",
    "end": "2138900"
  },
  {
    "text": "so that's about it and the queries complex Point uh is is kind of similar",
    "start": "2142000",
    "end": "2147460"
  },
  {
    "text": "here and the multi-ended table which is um that queries need to bifurcate them I",
    "start": "2147460",
    "end": "2155020"
  },
  {
    "text": "querying here because I'm trying to hit the teacher and what they teach or the student or something and they need to",
    "start": "2155020",
    "end": "2161260"
  },
  {
    "text": "deal with the null ability of certain fields and say is this person not doing",
    "start": "2161260",
    "end": "2166660"
  },
  {
    "text": "this exam or the exam hasn't passed yet we don't know the exam date hasn't arrived yet sorry",
    "start": "2166660",
    "end": "2173740"
  },
  {
    "text": "so logic will creep in and be spread everywhere",
    "start": "2173740",
    "end": "2179760"
  },
  {
    "text": "this is my attempt at humor thank you thank you for your grace on",
    "start": "2180420",
    "end": "2187119"
  },
  {
    "text": "this um let's talk keys let's talk references",
    "start": "2187119",
    "end": "2192640"
  },
  {
    "start": "2188000",
    "end": "2432000"
  },
  {
    "text": "um so in the world of keys there's what's called a natural key and",
    "start": "2192640",
    "end": "2200200"
  },
  {
    "text": "a natural key is something that I can see in the real world so a natural key whatever I observe in",
    "start": "2200200",
    "end": "2208000"
  },
  {
    "text": "the outside world in my model it exists in the model then it could be natural if it doesn't exist in a model",
    "start": "2208000",
    "end": "2215500"
  },
  {
    "text": "it is probably not natural now natural doesn't mean",
    "start": "2215500",
    "end": "2220900"
  },
  {
    "text": "that it's always non-assigned so if I have an agency that issued the iso",
    "start": "2220900",
    "end": "2226960"
  },
  {
    "text": "two-letter code effectively it's a natural key of countries",
    "start": "2226960",
    "end": "2232540"
  },
  {
    "text": "because it's part of a real business world it's something that an authority",
    "start": "2232540",
    "end": "2238119"
  },
  {
    "text": "took over and it might be an authority of mine right I may be Twitter and I may",
    "start": "2238119",
    "end": "2243220"
  },
  {
    "text": "be issuing or allowing for user names or handles or whatever system we have and",
    "start": "2243220",
    "end": "2249700"
  },
  {
    "text": "that becomes a natural key because I manage it it's a thing so if it's for if",
    "start": "2249700",
    "end": "2256480"
  },
  {
    "text": "it's a thing then it still kind of belongs in the natural key part of",
    "start": "2256480",
    "end": "2262000"
  },
  {
    "text": "things most importantly it's meaningful and then it's part of the model",
    "start": "2262000",
    "end": "2268720"
  },
  {
    "text": "it exists outside of my database artificial keys",
    "start": "2268720",
    "end": "2274660"
  },
  {
    "text": "are meaningful they're known in the real world but they're kind of",
    "start": "2274660",
    "end": "2280839"
  },
  {
    "text": "foreign to The Entity itself so countries in a domain of country in if I",
    "start": "2280839",
    "end": "2286720"
  },
  {
    "text": "my entity was country that's a natural key but if it's me and my citizenship",
    "start": "2286720",
    "end": "2292839"
  },
  {
    "text": "my citizenship is not me I am a person I'm attached to a",
    "start": "2292839",
    "end": "2298480"
  },
  {
    "text": "citizenship it's foreign to the me It's associated it's still it's artificial",
    "start": "2298480",
    "end": "2304240"
  },
  {
    "text": "but it's still observable in some way shape or form associated in the real world",
    "start": "2304240",
    "end": "2310300"
  },
  {
    "text": "and now we go a little further in the rabbit hole don't slip and fall like the guy in the icon we have exposed locators",
    "start": "2310300",
    "end": "2318099"
  },
  {
    "text": "and exposed locators are things that are in the database but not in the real",
    "start": "2318099",
    "end": "2323260"
  },
  {
    "text": "world so those are primary keys let's say something that's a row ID an",
    "start": "2323260",
    "end": "2334119"
  },
  {
    "text": "exposed row ID so like an identity column uuid that I assigned as a primary",
    "start": "2334119",
    "end": "2341020"
  },
  {
    "text": "key as something a sequence those are things that are meaningful only to the",
    "start": "2341020",
    "end": "2346420"
  },
  {
    "text": "database engine but I can't go up to a person and say oh",
    "start": "2346420",
    "end": "2351880"
  },
  {
    "text": "year one two three four yeah yeah like there's no I like Pat him down there's no one two three four anywhere",
    "start": "2351880",
    "end": "2358060"
  },
  {
    "text": "in the pockets there's just doesn't exist it's just an artifact of the database which means a lot of times it's also an",
    "start": "2358060",
    "end": "2365740"
  },
  {
    "text": "artifact of that database instance like on that machine it's not everywhere",
    "start": "2365740",
    "end": "2371140"
  },
  {
    "text": "which means I will have drift in other environments and things like that if I try to replicate I might have collisions",
    "start": "2371140",
    "end": "2377680"
  },
  {
    "text": "if it was generated by two different uh systems things like that",
    "start": "2377680",
    "end": "2383440"
  },
  {
    "text": "and those are exposed locators the exposed part here is that it's visible meaning I can somehow interact with it",
    "start": "2383440",
    "end": "2390339"
  },
  {
    "text": "from my program this is a worse class which is the real surrogate key",
    "start": "2390339",
    "end": "2396240"
  },
  {
    "text": "and these are ones that are not exposed so as you can imagine internally",
    "start": "2396240",
    "end": "2401980"
  },
  {
    "text": "databases have identifiers for the blocks or for the row or things like",
    "start": "2401980",
    "end": "2407140"
  },
  {
    "text": "that that are not even exposed to the programmers and some systems kind of let you use them by using special functions saying",
    "start": "2407140",
    "end": "2414940"
  },
  {
    "text": "hey which version of this row do you have and it will give you a long ugly",
    "start": "2414940",
    "end": "2421359"
  },
  {
    "text": "number and says this is you know storage related so that's very crusty stuff don't use",
    "start": "2421359",
    "end": "2427480"
  },
  {
    "text": "that ever for uh primary keys",
    "start": "2427480",
    "end": "2431820"
  },
  {
    "text": "so using meaningless Keys is the error here if you're using meaningless Keys",
    "start": "2434619",
    "end": "2440380"
  },
  {
    "text": "things that don't participate in the real world either either being artificial or being",
    "start": "2440380",
    "end": "2446320"
  },
  {
    "text": "just not part of the real world not natural in any way shape or form",
    "start": "2446320",
    "end": "2452280"
  },
  {
    "text": "you are really um making everything more complicated",
    "start": "2453400",
    "end": "2460420"
  },
  {
    "text": "um the number of joins you'll need to do let's say I have country ID 3 on my UI I",
    "start": "2460420",
    "end": "2465820"
  },
  {
    "text": "can't say what this country ID is and Dora Angola I I forget but you know",
    "start": "2465820",
    "end": "2471880"
  },
  {
    "text": "I I don't know right if I ever want the country code or if I",
    "start": "2471880",
    "end": "2477040"
  },
  {
    "text": "ever want its name I would have to join to another table in order to get it if you use natural keys",
    "start": "2477040",
    "end": "2483520"
  },
  {
    "text": "and my natural key say is this iso2 letter code or the name of the country or ISO 3 then it's always there in my",
    "start": "2483520",
    "end": "2491980"
  },
  {
    "text": "column already it already answers this question and if I wanted to filter I could filter through this yes sir",
    "start": "2491980",
    "end": "2500940"
  },
  {
    "text": "yeah so there will be an impact in the impact on the change of the natural key",
    "start": "2502480",
    "end": "2507700"
  },
  {
    "text": "will be judged by how we look at the impact of change so would that be a type",
    "start": "2507700",
    "end": "2515320"
  },
  {
    "text": "change no it would be a domain change right it would be a",
    "start": "2515320",
    "end": "2521440"
  },
  {
    "text": "change in the value Universe of that domain and in case that it's additive",
    "start": "2521440",
    "end": "2528220"
  },
  {
    "text": "it's kind of similar to just adding a column that nobody used before and in case it's a change because",
    "start": "2528220",
    "end": "2535839"
  },
  {
    "text": "it's primary key I think the gentleman is hinting at the fact that primary Keys",
    "start": "2535839",
    "end": "2541300"
  },
  {
    "text": "need a property of immutability or rare changiness and that would have cascading",
    "start": "2541300",
    "end": "2547300"
  },
  {
    "text": "effect which means it's harder yeah but harder does not mean",
    "start": "2547300",
    "end": "2552339"
  },
  {
    "text": "don't ever do it harder means what is my main use case scenario for 99 of the",
    "start": "2552339",
    "end": "2558760"
  },
  {
    "text": "time right um yeah so good point and I will judge",
    "start": "2558760",
    "end": "2564099"
  },
  {
    "text": "it by the effort the pain it will cause me in the future the thing is",
    "start": "2564099",
    "end": "2570280"
  },
  {
    "text": "I always have to join always always always always when I use a circuit key or exposed",
    "start": "2570280",
    "end": "2578200"
  },
  {
    "text": "identifier I always have to do it so it's permeated through the whole thing",
    "start": "2578200",
    "end": "2584020"
  },
  {
    "text": "and I said oh well they're using identity column that's fine right but",
    "start": "2584020",
    "end": "2590319"
  },
  {
    "text": "everywhere in my joins everywhere join join join join join join and I'm like oh that's okay like oh my God there's a new",
    "start": "2590319",
    "end": "2597400"
  },
  {
    "text": "ISO letter code or a country split happens it's like happens once once in five",
    "start": "2597400",
    "end": "2603819"
  },
  {
    "text": "years it's not everywhere yeah it affects a lot of things but so",
    "start": "2603819",
    "end": "2610359"
  },
  {
    "text": "where where am I going to have more pain that's kind of my question I'll take more questions later let me um",
    "start": "2610359",
    "end": "2617800"
  },
  {
    "text": "continue on here um so it increases the number of joint tables great example by the way",
    "start": "2617800",
    "end": "2624780"
  },
  {
    "text": "increases the number of indexes because now because I have joins every foreign",
    "start": "2624780",
    "end": "2630579"
  },
  {
    "text": "key will need an index on the referencing table so it will increase that increase the",
    "start": "2630579",
    "end": "2638079"
  },
  {
    "text": "number of objects because I will need that index I will need that extra table",
    "start": "2638079",
    "end": "2643920"
  },
  {
    "text": "it may be sometimes I can have a domain represented already there",
    "start": "2643920",
    "end": "2649660"
  },
  {
    "text": "so what if country code is used for addresses and used for citizenships",
    "start": "2649660",
    "end": "2656380"
  },
  {
    "text": "do I need another table to just say oh my God these are country codes I better",
    "start": "2656380",
    "end": "2662079"
  },
  {
    "text": "have a table for country codes or can I use a constraint that says hey",
    "start": "2662079",
    "end": "2668079"
  },
  {
    "text": "in this country we only allow this array of items and use a check constraint or",
    "start": "2668079",
    "end": "2673960"
  },
  {
    "text": "use something else another mechanism to enforce that domain and not use domain",
    "start": "2673960",
    "end": "2679480"
  },
  {
    "text": "tables it's also possible",
    "start": "2679480",
    "end": "2683099"
  },
  {
    "text": "um the clustering indexing efficiency has to do with with the exact engine so SQL server has",
    "start": "2686319",
    "end": "2693880"
  },
  {
    "text": "this thing called the clustered index other databases don't quite do it this",
    "start": "2693880",
    "end": "2699640"
  },
  {
    "text": "way so uh your mileage may vary there uh what would happen is when you're issuing",
    "start": "2699640",
    "end": "2706900"
  },
  {
    "text": "sequences uh for the primary key when you're writing each right by definition",
    "start": "2706900",
    "end": "2713619"
  },
  {
    "text": "is just one number higher which means you kind of right into the table at the",
    "start": "2713619",
    "end": "2718660"
  },
  {
    "text": "end of the table and if you're updating it frequently that creates a hotspot",
    "start": "2718660",
    "end": "2723880"
  },
  {
    "text": "um other Technologies might have other Effects by this so um it kind of this is a place where you",
    "start": "2723880",
    "end": "2731859"
  },
  {
    "text": "want to really learn about your specific database and how these things behave speaking of which that's the next slide",
    "start": "2731859",
    "end": "2738400"
  },
  {
    "start": "2736000",
    "end": "2889000"
  },
  {
    "text": "is sequential primary key auto-generated keys and sequences are surrogate Keys",
    "start": "2738400",
    "end": "2746440"
  },
  {
    "text": "sequences are not meaningful in the uh real world they're just invented things",
    "start": "2746440",
    "end": "2752500"
  },
  {
    "text": "that I somehow glued to my object and because of that they suffer all of the",
    "start": "2752500",
    "end": "2758560"
  },
  {
    "text": "things we already discussed they're hard to migrate among systems so that",
    "start": "2758560",
    "end": "2766119"
  },
  {
    "text": "happened to me a lot where on day one you're in developer land on week two you're in production yeah we",
    "start": "2766119",
    "end": "2773859"
  },
  {
    "text": "threw things in production after two weeks um and then you know on year three we want",
    "start": "2773859",
    "end": "2781720"
  },
  {
    "text": "to simulate all the real problems we have in production so we asked the ddbas hey bring us back all the data from",
    "start": "2781720",
    "end": "2788560"
  },
  {
    "text": "production into uat or some area in order for us to simulate and run our",
    "start": "2788560",
    "end": "2794140"
  },
  {
    "text": "software on real data because our backend system as developers don't have",
    "start": "2794140",
    "end": "2799240"
  },
  {
    "text": "all this data in some of the conditions and things we want to check is on a variety of real world data",
    "start": "2799240",
    "end": "2805900"
  },
  {
    "text": "but then we kind of have to keep resetting everything according to production sanitize things like that",
    "start": "2805900",
    "end": "2812500"
  },
  {
    "text": "because there's collision with those keys and when you have more than one system then these keys that are",
    "start": "2812500",
    "end": "2820540"
  },
  {
    "text": "meaningless migrate into other systems and they're not in sync anymore",
    "start": "2820540",
    "end": "2826240"
  },
  {
    "text": "because this you know person's country ID says oh you know give me a list of",
    "start": "2826240",
    "end": "2832480"
  },
  {
    "text": "this country ID and another system and the other system that country ID has already changed because it's meaningless",
    "start": "2832480",
    "end": "2838119"
  },
  {
    "text": "it now collides with a different value a",
    "start": "2838119",
    "end": "2843220"
  },
  {
    "text": "different row altogether so it's harder to keep in sync um hotspot risks we spoke about and the",
    "start": "2843220",
    "end": "2852040"
  },
  {
    "text": "drift among environments can cause a lot of",
    "start": "2852040",
    "end": "2857740"
  },
  {
    "text": "a lot of havoc on its own also discourages schema migration so that",
    "start": "2857740",
    "end": "2864040"
  },
  {
    "text": "will come up in an later slide but I'll talk a little bit about schema migrations",
    "start": "2864040",
    "end": "2871200"
  },
  {
    "text": "so sequential primary keys are essentially exposed locators",
    "start": "2871780",
    "end": "2878980"
  },
  {
    "text": "most people don't talk about the difference between exposed locators and surrogate keys so we'll call it circuit",
    "start": "2878980",
    "end": "2885640"
  },
  {
    "text": "key to adhere with the world so what I want from a primary key I want",
    "start": "2885640",
    "end": "2891400"
  },
  {
    "start": "2889000",
    "end": "3058000"
  },
  {
    "text": "it to be familiar I want it to be something that somebody knowing the domain will say oh",
    "start": "2891400",
    "end": "2897819"
  },
  {
    "text": "yeah I get this right an email address a username fine",
    "start": "2897819",
    "end": "2903220"
  },
  {
    "text": "sometimes a number is okay if that number means something maybe it's your ID number national ID something like",
    "start": "2903220",
    "end": "2909940"
  },
  {
    "text": "that it's okay you want it to be stable as a gentleman stated",
    "start": "2909940",
    "end": "2916780"
  },
  {
    "text": "um if things change what then Well yeah if things change we'll need to",
    "start": "2916780",
    "end": "2922839"
  },
  {
    "text": "make changes the question is how rare is it so when we say it's stable we don't",
    "start": "2922839",
    "end": "2928359"
  },
  {
    "text": "mean immutable forever we mean mostly immunable",
    "start": "2928359",
    "end": "2933640"
  },
  {
    "text": "uh so mostly immunable means that sometimes it will change on their very rare condition",
    "start": "2933640",
    "end": "2939819"
  },
  {
    "text": "and then we'll have to deal with it most relational databases also a lot of the",
    "start": "2939819",
    "end": "2945160"
  },
  {
    "text": "nosql databases require you to keep to require not",
    "start": "2945160",
    "end": "2950680"
  },
  {
    "text": "require impose that the primary key is immutable those that support transactions allow",
    "start": "2950680",
    "end": "2958119"
  },
  {
    "text": "you to change that value under a cover of a transaction which means you basically delete the old",
    "start": "2958119",
    "end": "2964540"
  },
  {
    "text": "row insert a new row in its place with a change value under one transaction cover",
    "start": "2964540",
    "end": "2972040"
  },
  {
    "text": "the operation can be long running if there's a lot of dependencies or pretty short but in any event we expect that it",
    "start": "2972040",
    "end": "2980500"
  },
  {
    "text": "is rare so meaningful uh rarely changes",
    "start": "2980500",
    "end": "2986700"
  },
  {
    "text": "and convenient it's simple and compact so don't ask me about how to represent",
    "start": "2986700",
    "end": "2994240"
  },
  {
    "text": "people because it's a first name first name last name middle oh there's a collision what else can I do can I Pat",
    "start": "2994240",
    "end": "2999940"
  },
  {
    "text": "people down do I put their DNA sequence into the ID no that's a tougher one to",
    "start": "2999940",
    "end": "3006000"
  },
  {
    "text": "answer but typically it comes with something I'm making a system for the",
    "start": "3006000",
    "end": "3011160"
  },
  {
    "text": "immigration services okay it has to do with IDs it has to do with some other",
    "start": "3011160",
    "end": "3016400"
  },
  {
    "text": "external IDs that I can attach to it and make it as something right or I make my",
    "start": "3016400",
    "end": "3022260"
  },
  {
    "text": "own I say hey your email address is you I don't care what your name is your email address is you and you are the",
    "start": "3022260",
    "end": "3028740"
  },
  {
    "text": "recipient of all of those change passwords so this is you for all intensive purposes",
    "start": "3028740",
    "end": "3034440"
  },
  {
    "text": "or a username or something like that and then we don't want it to be too many elements we want it to be somewhat",
    "start": "3034440",
    "end": "3040560"
  },
  {
    "text": "compact so it's convenient we want it simple so we don't have to deal with a lot of",
    "start": "3040560",
    "end": "3046020"
  },
  {
    "text": "logic to have multiple you know 10 column primary Keys kind of gnarly and",
    "start": "3046020",
    "end": "3051660"
  },
  {
    "text": "it appears again and again and again in all your queries so we want it as simple as possible",
    "start": "3051660",
    "end": "3058520"
  },
  {
    "start": "3058000",
    "end": "3357000"
  },
  {
    "text": "and now we switch abruptly to not talking about the database so much but",
    "start": "3061619",
    "end": "3067319"
  },
  {
    "text": "talking about development and development practices and this is where orm comes into play",
    "start": "3067319",
    "end": "3074339"
  },
  {
    "text": "and as a developer I love orm I love the orm idea the first time I saw",
    "start": "3074339",
    "end": "3081960"
  },
  {
    "text": "it um then I went to production",
    "start": "3081960",
    "end": "3088160"
  },
  {
    "text": "so the trouble with orm is that tables are not classes tables are the language that proprietary",
    "start": "3088160",
    "end": "3095400"
  },
  {
    "text": "SQL language that describes the schema which has to do with the data layout which the engines are then optimized to",
    "start": "3095400",
    "end": "3102300"
  },
  {
    "text": "deal with an answer for but they're not classes in a class I don't have pointers to",
    "start": "3102300",
    "end": "3109800"
  },
  {
    "text": "other things like foreign Keys it's just a class has properties it's all in memory as some contiguous something",
    "start": "3109800",
    "end": "3117119"
  },
  {
    "text": "typically",
    "start": "3117119",
    "end": "3119720"
  },
  {
    "text": "and the database is not the repo pattern and orms kind of encourage the repo pattern which is like oh I have an",
    "start": "3122940",
    "end": "3131040"
  },
  {
    "text": "entity like invoices okay well that's my class invoice and the class has an array of invoice items",
    "start": "3131040",
    "end": "3138839"
  },
  {
    "text": "each one has a school and a quantity maybe I copy in the title of the name or",
    "start": "3138839",
    "end": "3144000"
  },
  {
    "text": "something who cares and it also has a customer which is a reference to you know",
    "start": "3144000",
    "end": "3149579"
  },
  {
    "text": "something so what the orm will happily do is just go and spider all of the tables because",
    "start": "3149579",
    "end": "3155579"
  },
  {
    "text": "you know School items items are many for one invoice I have a table and I have a",
    "start": "3155579",
    "end": "3160800"
  },
  {
    "text": "relationship and it will Traverse it and do the whole thing and and it will produce just gnarly uh queries in order",
    "start": "3160800",
    "end": "3168000"
  },
  {
    "text": "to do this and then when I say okay on top of this a repo essentially what I'm saying is suck up all of this data into",
    "start": "3168000",
    "end": "3175800"
  },
  {
    "text": "memory and let me in memory iterate it as if it's some kind of loop well that",
    "start": "3175800",
    "end": "3182880"
  },
  {
    "text": "will be either chatty like get me the next one the next one the next one with all the joins or it will be chunky like",
    "start": "3182880",
    "end": "3188940"
  },
  {
    "text": "load everything into memory and let me do it into memory in memory either one of those is a heavy operation",
    "start": "3188940",
    "end": "3196380"
  },
  {
    "text": "and the database engine can't really help you so it just gets gnarly's queries executes them on your behalf and",
    "start": "3196380",
    "end": "3203520"
  },
  {
    "text": "tries to deserialize everything and then the cost of serializing is also present",
    "start": "3203520",
    "end": "3209240"
  },
  {
    "text": "deserializing from the database so I don't like the database repo uh",
    "start": "3209240",
    "end": "3215400"
  },
  {
    "text": "kind of mentality uh database is a repo mentality that is imposed through using",
    "start": "3215400",
    "end": "3221220"
  },
  {
    "text": "an orm you have a diminished benefit from the",
    "start": "3221220",
    "end": "3226740"
  },
  {
    "text": "orm in my experience in that you start with you know oh Entity framework oh",
    "start": "3226740",
    "end": "3232740"
  },
  {
    "text": "forward generated schema or backwards generator schema my DBA did a good job let me just suck it in generate classes",
    "start": "3232740",
    "end": "3239940"
  },
  {
    "text": "either way this is great for week one hey Nuri did you manage to start the",
    "start": "3239940",
    "end": "3246660"
  },
  {
    "text": "project oh yeah I have working code now put it in production and for the next five years you're gonna fight it",
    "start": "3246660",
    "end": "3253140"
  },
  {
    "text": "all of those decisions you have a static class not a static you have a class that",
    "start": "3253140",
    "end": "3258240"
  },
  {
    "text": "got declared if you want to make any changes it has cascading impact into the database",
    "start": "3258240",
    "end": "3264660"
  },
  {
    "text": "because now you have to forward generate tables and you have to do migrations according to how the orm side vice versa",
    "start": "3264660",
    "end": "3272160"
  },
  {
    "text": "also same thing changes in the database now you have to change the classes that",
    "start": "3272160",
    "end": "3277200"
  },
  {
    "text": "are essentially the dto of your database right they are classes representing the",
    "start": "3277200",
    "end": "3283079"
  },
  {
    "text": "schema and it's not exactly the class you wanted it's a class that got derived because the orm said so",
    "start": "3283079",
    "end": "3290819"
  },
  {
    "text": "that's not how I like to live my life you'll have concurrency issues because",
    "start": "3290819",
    "end": "3296220"
  },
  {
    "text": "the repo model the repo mentality makes you think of the invoice as a single",
    "start": "3296220",
    "end": "3301319"
  },
  {
    "text": "thing but then if you want to change the invoice you're not thinking about just changing the element",
    "start": "3301319",
    "end": "3307440"
  },
  {
    "text": "and if you change just a line item and change the quantity the object that was in memory that was",
    "start": "3307440",
    "end": "3313079"
  },
  {
    "text": "the whole invoice and mapped to a class that you have at your disposal are not in sync",
    "start": "3313079",
    "end": "3318180"
  },
  {
    "text": "so you have to do things like concurrency tracking change tracking doing all kinds of back and forth to see",
    "start": "3318180",
    "end": "3325680"
  },
  {
    "text": "if it changed before you write it all kinds of stuff like that which would not be necessary if you went directly",
    "start": "3325680",
    "end": "3333680"
  },
  {
    "text": "and finally um it's once established not finally I",
    "start": "3334640",
    "end": "3340380"
  },
  {
    "text": "kind of mentioned it once you establish the entity to class mapping it's it's",
    "start": "3340380",
    "end": "3345540"
  },
  {
    "text": "kind of costly to change it and it's kind of opaque to change it you make these changes and you know a lot of",
    "start": "3345540",
    "end": "3350940"
  },
  {
    "text": "things happen in the background and chasing it everywhere becomes difficult",
    "start": "3350940",
    "end": "3356838"
  },
  {
    "text": "so Nuri do you really think RMS have no place well now I'm a consultant of",
    "start": "3356940",
    "end": "3362160"
  },
  {
    "start": "3357000",
    "end": "3467000"
  },
  {
    "text": "course it depends so the things I say maybe orms are",
    "start": "3362160",
    "end": "3368700"
  },
  {
    "text": "helpful are in the arena of connection management",
    "start": "3368700",
    "end": "3374700"
  },
  {
    "text": "it brings you some benefit that you don't have to do it on your own hide some connection pools or contains a",
    "start": "3374700",
    "end": "3381540"
  },
  {
    "text": "connection pooling and kind of instant Singleton instance that you can deal",
    "start": "3381540",
    "end": "3386700"
  },
  {
    "text": "with or multiple injectable items that map to the same underlying infrastructure not the lousiest idea",
    "start": "3386700",
    "end": "3393839"
  },
  {
    "text": "maybe that's a useful thing it does the codec work of mapping between the",
    "start": "3393839",
    "end": "3400260"
  },
  {
    "text": "tabular data format that came from The Wire into SQL types and into c-sharp types I like that that that's a good",
    "start": "3400260",
    "end": "3407339"
  },
  {
    "text": "thing right if I could get a bunch of stuff a bunch of tables and automatically marry them to my um",
    "start": "3407339",
    "end": "3414900"
  },
  {
    "text": "marry them to my to my classes I I kind of like this but I really don't like the",
    "start": "3414900",
    "end": "3421020"
  },
  {
    "text": "command marshalling the fact that I have to go through the orm just to call stored procedures functions things like",
    "start": "3421020",
    "end": "3427200"
  },
  {
    "text": "that and personally it just makes no sense to me you could use the driver the",
    "start": "3427200",
    "end": "3432960"
  },
  {
    "text": "driver actually does it not the orm so use the driver directly the abstractions",
    "start": "3432960",
    "end": "3438599"
  },
  {
    "text": "it provides such as repo patterns and stuff like that seem nice but",
    "start": "3438599",
    "end": "3444960"
  },
  {
    "text": "you know after week two I usually just fight against the orm instead of enjoying it so that tells me it's not",
    "start": "3444960",
    "end": "3451680"
  },
  {
    "text": "that useful and change detection concurrency uh handling and all of that I just that",
    "start": "3451680",
    "end": "3457920"
  },
  {
    "text": "that is something that I really uh resent every time I encounter it's just",
    "start": "3457920",
    "end": "3464220"
  },
  {
    "text": "not not fun and then the last one",
    "start": "3464220",
    "end": "3469920"
  },
  {
    "start": "3467000",
    "end": "3522000"
  },
  {
    "text": "uh we'll talk about here number seven uh is ad hoc ddl so the notion of uh going",
    "start": "3469920",
    "end": "3478680"
  },
  {
    "text": "and just adding a column by hand uh that you know I've seen dbas do this",
    "start": "3478680",
    "end": "3484740"
  },
  {
    "text": "I've seen various degrees of of responsibility around it the problem",
    "start": "3484740",
    "end": "3490380"
  },
  {
    "text": "with manual changes to ddl or creation is that it's not very repeatable or not",
    "start": "3490380",
    "end": "3496800"
  },
  {
    "text": "reliably repeatable you can't automate this you can't play this again in every",
    "start": "3496800",
    "end": "3502619"
  },
  {
    "text": "environment and you can't sometimes tell what happened if you don't have a good",
    "start": "3502619",
    "end": "3507780"
  },
  {
    "text": "record of who made the action who changed things how you're going to know",
    "start": "3507780",
    "end": "3513000"
  },
  {
    "text": "when Trouble Comes how come it was working yesterday and not working today like what is the change when did it",
    "start": "3513000",
    "end": "3519180"
  },
  {
    "text": "happen who did it for what purpose we don't know any of this and the foregone conclusion is well you know use",
    "start": "3519180",
    "end": "3526619"
  },
  {
    "start": "3522000",
    "end": "3573000"
  },
  {
    "text": "migration script so you can use uh you know Flyway liquid",
    "start": "3526619",
    "end": "3532020"
  },
  {
    "text": "base whatever your system supports or you love using uh if you're not using any of those please read up and uh look",
    "start": "3532020",
    "end": "3540480"
  },
  {
    "text": "at it the nice thing about migration scripts is you store them as files",
    "start": "3540480",
    "end": "3545599"
  },
  {
    "text": "the Frameworks themselves let you just play it you can play it on demand many",
    "start": "3545599",
    "end": "3551040"
  },
  {
    "text": "of them support the notion of rollback so if you made a mistake you can revert",
    "start": "3551040",
    "end": "3556220"
  },
  {
    "text": "having it in automation CI CD I'm sure we've all talked about in the last 10",
    "start": "3556220",
    "end": "3562140"
  },
  {
    "text": "years so this is what enables you to do CI CD with databases highly recommended",
    "start": "3562140",
    "end": "3571020"
  },
  {
    "text": "um and that's about it so my advice in summary is all just use",
    "start": "3571020",
    "end": "3578640"
  },
  {
    "start": "3573000",
    "end": "3599000"
  },
  {
    "text": "natural keys to the degree possible use the database how it was intended to be",
    "start": "3578640",
    "end": "3584460"
  },
  {
    "text": "used which is store Atomic values normalized to the degree possible concise data types for what you're",
    "start": "3584460",
    "end": "3591180"
  },
  {
    "text": "trying to represent and not wishy-washy things like Json and XML shoved in a",
    "start": "3591180",
    "end": "3596520"
  },
  {
    "text": "relational database come to my later if you want to talk about documents my mom will talk",
    "start": "3596520",
    "end": "3602099"
  },
  {
    "text": "later orms not my favorite at all and if you've ever had to fight your orm",
    "start": "3602099",
    "end": "3610500"
  },
  {
    "text": "and go below it and just hand it a statement you know that the orm didn't help you you know it",
    "start": "3610500",
    "end": "3616980"
  },
  {
    "text": "inside right okay so that is it I'll take questions we",
    "start": "3616980",
    "end": "3622980"
  },
  {
    "text": "have a couple minutes or we don't have minutes",
    "start": "3622980",
    "end": "3627799"
  },
  {
    "text": "okay I can't use natural Keys like a meaningful Keys would you recommend",
    "start": "3628500",
    "end": "3635880"
  },
  {
    "text": "using minions so the question is and uh don't feel obligated to sit down it's",
    "start": "3635880",
    "end": "3642240"
  },
  {
    "text": "past time here um in the case of natural if natural keys don't work would I recommend using a",
    "start": "3642240",
    "end": "3650220"
  },
  {
    "text": "non-natural key so synthetic yes uh exposed identifier or surrogate",
    "start": "3650220",
    "end": "3656819"
  },
  {
    "text": "surrogate it's almost impossible to use pure surrogate but",
    "start": "3656819",
    "end": "3662880"
  },
  {
    "text": "um I I would recommend against it in many all cases in other words Invent",
    "start": "3662880",
    "end": "3668940"
  },
  {
    "text": "Yourself if if nobody else if there's no Authority that lets you identify something then you are the authority and",
    "start": "3668940",
    "end": "3676319"
  },
  {
    "text": "if you are the authority maybe own up to it and become the authority on that like that is what a school is Right a stop",
    "start": "3676319",
    "end": "3683339"
  },
  {
    "text": "stock keeping unit no other manufacturer could tell me what the item number is because their item numbers are private",
    "start": "3683339",
    "end": "3690660"
  },
  {
    "text": "to them I'm the big shop that sells from many manufacturers and they could Collide so I assigned it a stock keeping",
    "start": "3690660",
    "end": "3698339"
  },
  {
    "text": "unit which is a number on the Shelf of how I keep it so I became the authority to that otherwise I would have to say",
    "start": "3698339",
    "end": "3705240"
  },
  {
    "text": "galvanized screw you know M3 and I would not be able to distinguish",
    "start": "3705240",
    "end": "3713460"
  },
  {
    "text": "it so how do I distinguish disambiguate it with a school that's completely synthetic or with a dash manufacturer",
    "start": "3713460",
    "end": "3719940"
  },
  {
    "text": "number or with a something I become the Authority for that and I store it",
    "start": "3719940",
    "end": "3726500"
  },
  {
    "text": "okay uh thank you so much um enjoy the rest of them",
    "start": "3729119",
    "end": "3736339"
  }
]