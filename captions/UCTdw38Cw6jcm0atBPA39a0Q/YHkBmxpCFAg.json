[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "hello welcome i'm jeremy clark and here i'm going to be giving a tour of go for the c-sharp",
    "start": "6080",
    "end": "12240"
  },
  {
    "text": "developer and uh we can think of this as kind of a tour that you take through an art museum so",
    "start": "12240",
    "end": "17440"
  },
  {
    "text": "maybe you're following a tour guide around for an hour and they'll be pointing out some",
    "start": "17440",
    "end": "22640"
  },
  {
    "text": "interesting things maybe giving some anecdotes here and there but after that's over you probably want",
    "start": "22640",
    "end": "28800"
  },
  {
    "text": "to go around and look at stuff yourself and maybe read all the signs and that sort of thing so this is an overview of some things i",
    "start": "28800",
    "end": "35520"
  },
  {
    "text": "find interesting about the go language and if you want to get the slides and",
    "start": "35520",
    "end": "40879"
  },
  {
    "text": "code samples they are available on github i'll go ahead and paste in some resource links to the",
    "start": "40879",
    "end": "48000"
  },
  {
    "text": "slack and to the chat and that way you can take those home",
    "start": "48000",
    "end": "54960"
  },
  {
    "text": "with you you can also hit my website at any time jeremybites.com and you'll find links to the resources",
    "start": "54960",
    "end": "61600"
  },
  {
    "text": "there as well and if you want to follow me on twitter i'm jeremy bites on twitter so that's pretty much where i am online",
    "start": "61600",
    "end": "69040"
  },
  {
    "text": "so i want to start out by saying i am not an expert and go",
    "start": "69040",
    "end": "74080"
  },
  {
    "start": "70000",
    "end": "136000"
  },
  {
    "text": "and this actually isn't designed for experts it's designed for c-sharp developers and c-sharp has actually been my primary",
    "start": "74080",
    "end": "80720"
  },
  {
    "text": "language for quite a while and why am i looking at go well",
    "start": "80720",
    "end": "86799"
  },
  {
    "text": "it's an interesting language i like getting out of my comfort zone",
    "start": "86799",
    "end": "92720"
  },
  {
    "text": "kind of as frequently as possible because that lets me see how other languages and environments",
    "start": "92720",
    "end": "99200"
  },
  {
    "text": "deal with certain problems and a lot of times there's things that i can take into my primary language and a lot of times there's",
    "start": "99200",
    "end": "104880"
  },
  {
    "text": "times where i say oh you know what i was working with go and it's really good at this problem that i have so",
    "start": "104880",
    "end": "111920"
  },
  {
    "text": "maybe i'll step out of my normal environment and uh go try that for a while so",
    "start": "111920",
    "end": "118880"
  },
  {
    "text": "my uh in my world why do i explore go well to see what kind of different programming and pro approaches there are",
    "start": "118880",
    "end": "125680"
  },
  {
    "text": "and if there's some interesting things that i can bring into my environment now i am going to spend",
    "start": "125680",
    "end": "130800"
  },
  {
    "text": "most of the time in live code so you get to watch me type as i show",
    "start": "130800",
    "end": "136080"
  },
  {
    "start": "136000",
    "end": "235000"
  },
  {
    "text": "kind of some of the things i ran into as someone who's used to c sharp as i was learning to edit and deal with",
    "start": "136080",
    "end": "142319"
  },
  {
    "text": "the linter and the compiler and some other things so first just a little tiny bit about go",
    "start": "142319",
    "end": "148400"
  },
  {
    "text": "this is a language that was created at google and it was first released in march 2012",
    "start": "148400",
    "end": "154239"
  },
  {
    "text": "so it's been around a while and a lot of times people will say well",
    "start": "154239",
    "end": "159440"
  },
  {
    "text": "you know this is good for kind of server and programmer tools and that sort of thing but it is in fact a",
    "start": "159440",
    "end": "165680"
  },
  {
    "text": "general purpose language so it can be used for all different kinds of things",
    "start": "165680",
    "end": "171200"
  },
  {
    "text": "and it does use a c like syntax i'll say c ish and a few things about the",
    "start": "171200",
    "end": "178720"
  },
  {
    "text": "language it is a statically typed language as opposed to a dynamically typed language like javascript",
    "start": "178720",
    "end": "184720"
  },
  {
    "text": "some things that were important when they were designing it they wanted to focus on things like memory safety so things that",
    "start": "184720",
    "end": "191519"
  },
  {
    "text": "you don't get in environments like c garbage collection is also something that's built into the",
    "start": "191519",
    "end": "197920"
  },
  {
    "text": "environment concurrency is a big thing and in fact i'll be showing some concurrency today",
    "start": "197920",
    "end": "204000"
  },
  {
    "text": "uh the um in order to make a method concur and go you use the",
    "start": "204000",
    "end": "209440"
  },
  {
    "text": "go keyword so that's how important it is and it was really focused on runtime efficiency this compiles to",
    "start": "209440",
    "end": "217440"
  },
  {
    "text": "native executables on the system so there's no runtime or interpreter it goes straight to native executables",
    "start": "217440",
    "end": "225200"
  },
  {
    "text": "and it is cross-platform so i'm running windows 10 today but i've also done the same examples on mac os",
    "start": "225200",
    "end": "231920"
  },
  {
    "text": "and it runs on linux as well so it's a good environment for that",
    "start": "231920",
    "end": "237040"
  },
  {
    "start": "235000",
    "end": "420000"
  },
  {
    "text": "today's topic these are some of the things i'm going to hit on and again as primarily a c-sharp",
    "start": "237040",
    "end": "242080"
  },
  {
    "text": "developer these are things that kind of stood out as interesting and made me go hmm i'd like to",
    "start": "242080",
    "end": "247760"
  },
  {
    "text": "think about how this might impact my day-to-day programming one thing is that go does have a very",
    "start": "247760",
    "end": "254640"
  },
  {
    "text": "opinionated syntax so for example where you put curly braces is important",
    "start": "254640",
    "end": "259759"
  },
  {
    "text": "and we'll see that when we look at the code we'll actually see all of these things another thing is unused variables",
    "start": "259759",
    "end": "266479"
  },
  {
    "text": "actually result in a compile error so if you declare something and don't use it you get a",
    "start": "266479",
    "end": "272080"
  },
  {
    "text": "compiler error so that's a best practice you know don't don't have things hanging around that",
    "start": "272080",
    "end": "277199"
  },
  {
    "text": "you're not using go actually enforces that i already talked a little bit about the baked in concurrency",
    "start": "277199",
    "end": "282720"
  },
  {
    "text": "it's so uh just kind of a few a few keywords and a few concepts",
    "start": "282720",
    "end": "289600"
  },
  {
    "text": "and hey i've got concurrent application uh there's another thing which is deferred calls",
    "start": "289600",
    "end": "295600"
  },
  {
    "text": "and this is kind of like a finally in a try finally block in the c-sharp world but it kind of has a feature that i like",
    "start": "295600",
    "end": "303039"
  },
  {
    "text": "that's a little better than that air handling in the go world is completely different",
    "start": "303039",
    "end": "308479"
  },
  {
    "text": "than sharp and i'm not going to dive into this but if you head out to the resources i do have an article that i wrote on",
    "start": "308479",
    "end": "315280"
  },
  {
    "text": "this in more in depth basically and go and air is a glorified string",
    "start": "315280",
    "end": "321120"
  },
  {
    "text": "so there isn't this exception handling mechanism where you know there's try catch blocks and if",
    "start": "321120",
    "end": "326800"
  },
  {
    "text": "you don't catch it it walks up the call stack and looks for something none of that exists so basically we're",
    "start": "326800",
    "end": "332479"
  },
  {
    "text": "passing these error messages around and deciding how we're going to deal with them go does have something that",
    "start": "332479",
    "end": "339280"
  },
  {
    "text": "is known as a panic which is for truly bad situations like reading beyond the end of an array or",
    "start": "339280",
    "end": "345680"
  },
  {
    "text": "something like that something that's generally considered dangerous or writing to a closed channel",
    "start": "345680",
    "end": "352479"
  },
  {
    "text": "and in those situations a panic behaves like an unhandled exception the application will exit there's no way to",
    "start": "352479",
    "end": "358319"
  },
  {
    "text": "catch it no way to stop it so those are our two options in the go world something else that i found really",
    "start": "358319",
    "end": "365120"
  },
  {
    "text": "interesting is that you can have multiple return values from functions",
    "start": "365120",
    "end": "370319"
  },
  {
    "text": "and this is not using tuples like we might in the c-sharp world this is actually",
    "start": "370319",
    "end": "375600"
  },
  {
    "text": "just like you can have multiple parameters you can have multiple return values and again that's something that's",
    "start": "375600",
    "end": "380639"
  },
  {
    "text": "interesting another thing is how interfaces are handled i have",
    "start": "380639",
    "end": "386720"
  },
  {
    "text": "a soft spot for interfaces in the c-sharp world and that's because it was difficult for me to learn",
    "start": "386720",
    "end": "391919"
  },
  {
    "text": "as a junior programmer and became really useful to me in my day-to-day programming in fact i",
    "start": "391919",
    "end": "397680"
  },
  {
    "text": "have a pluralsight course on c-sharp interfaces that's how near and dear to me they are go approaches interfaces in a really",
    "start": "397680",
    "end": "404720"
  },
  {
    "text": "interesting way through implicit implementation which is kind of cool",
    "start": "404720",
    "end": "410080"
  },
  {
    "text": "and we're going to look at that as well so that's enough talking about slides let's head over to code",
    "start": "410080",
    "end": "415520"
  },
  {
    "text": "and let me show you what we're going to build and uh we'll look at things from there so i'm going to flip",
    "start": "415520",
    "end": "422240"
  },
  {
    "start": "420000",
    "end": "543000"
  },
  {
    "text": "over to windows terminal and i have some powershell tabs already lined up here",
    "start": "422240",
    "end": "428639"
  },
  {
    "text": "if you do grab the repo then there's two folders there's an async",
    "start": "428639",
    "end": "433919"
  },
  {
    "text": "folder and that's where we're going to be writing our go code and then there's another folder that which is net people service",
    "start": "433919",
    "end": "441199"
  },
  {
    "text": "this is actually a net 5 service and we're going to be consuming the",
    "start": "441199",
    "end": "448000"
  },
  {
    "text": "service in our application so let me flip over to my second tab this",
    "start": "448000",
    "end": "453520"
  },
  {
    "text": "is navigated to that.net service i'm going to type in.net run just to fire it up",
    "start": "453520",
    "end": "460319"
  },
  {
    "text": "and we'll take a look at what that does let me head to my browser",
    "start": "460319",
    "end": "465919"
  },
  {
    "text": "and hit refresh here and the url that we have",
    "start": "465919",
    "end": "470960"
  },
  {
    "text": "see if i can make that a little bigger for you is localhost and i have a custom port",
    "start": "470960",
    "end": "476840"
  },
  {
    "text": "9874 people slash one so this is the end point that i'm hitting",
    "start": "476840",
    "end": "482479"
  },
  {
    "text": "i'm saying hey go to your people collection give me id number one and uh",
    "start": "482479",
    "end": "488639"
  },
  {
    "text": "in this case there's about a dozen values that are coming that are available from this service",
    "start": "488639",
    "end": "496720"
  },
  {
    "text": "now i have the completed application already in this tab and i'll just run it so we can see what",
    "start": "496720",
    "end": "503199"
  },
  {
    "text": "it does so first it prints out a list of here's the ids i'm going to fetch from the",
    "start": "503199",
    "end": "508479"
  },
  {
    "text": "service and then we get the values coming out of that service",
    "start": "508479",
    "end": "513760"
  },
  {
    "text": "now one thing that's kind of interesting about this is that the service has an artificial delay",
    "start": "513760",
    "end": "519200"
  },
  {
    "text": "built into it so each time i request one of these items there's a one second delay on the",
    "start": "519200",
    "end": "524880"
  },
  {
    "text": "server side and that's to simulate a little bit of real world and in this case you notice",
    "start": "524880",
    "end": "531360"
  },
  {
    "text": "they all come up kind of together and it takes a little over a second to run all nine of these requests and that's",
    "start": "531360",
    "end": "537519"
  },
  {
    "text": "because we're doing it concurrently and so uh that's what we're going to do",
    "start": "537519",
    "end": "542720"
  },
  {
    "text": "today so i'll head back over to my tab that has the uh root of the",
    "start": "542720",
    "end": "550800"
  },
  {
    "text": "repo and uh navigate to the async folder and if i look in this folder it is",
    "start": "550800",
    "end": "556640"
  },
  {
    "text": "currently empty so i'm going to start by just creating a new",
    "start": "556640",
    "end": "562000"
  },
  {
    "text": "go code file and i'll be using visual studio code today and the file will be called main dot go",
    "start": "562000",
    "end": "571680"
  },
  {
    "text": "and i will pop this open visual studio code is a great editor for this and visual studio code is also",
    "start": "571680",
    "end": "578480"
  },
  {
    "text": "cross-platform so that makes it handy one thing that makes it such a great",
    "start": "578480",
    "end": "583839"
  },
  {
    "text": "editor for go is that there is a plug-in uh an extension i should say that's available",
    "start": "583839",
    "end": "589120"
  },
  {
    "text": "for go and this does linting as well as code completion",
    "start": "589120",
    "end": "594880"
  },
  {
    "text": "and pop-up help and all that other fun stuff now i just want to know you'll you might",
    "start": "594880",
    "end": "600480"
  },
  {
    "text": "notice here that i it's saying hey you want to update your go extension well this extension",
    "start": "600480",
    "end": "606800"
  },
  {
    "text": "updated automatically two days ago and um i think there's a clash with the version of go that i'm actually running",
    "start": "606800",
    "end": "613360"
  },
  {
    "text": "on my machine because some of the code completion was coming out weird so i actually",
    "start": "613360",
    "end": "620560"
  },
  {
    "text": "downgraded my go extension for this demo okay",
    "start": "620560",
    "end": "625680"
  },
  {
    "text": "so let's go ahead and do hello world right we have to start with hello world",
    "start": "625680",
    "end": "631680"
  },
  {
    "text": "now go has everything in go is in a package and so we can think of a package as it's",
    "start": "631680",
    "end": "640000"
  },
  {
    "text": "somewhere between an assembly and a namespace so it's a unit of",
    "start": "640000",
    "end": "646160"
  },
  {
    "text": "stuff and uh for an application the entry point for",
    "start": "646160",
    "end": "653120"
  },
  {
    "text": "an application it has to be in package main and there's a function called funcma function should say funk",
    "start": "653120",
    "end": "659920"
  },
  {
    "text": "main which is in package main and that defines the entry point of the application",
    "start": "659920",
    "end": "666240"
  },
  {
    "text": "so we'll do a funk main and get started here so this is kind of",
    "start": "666240",
    "end": "673519"
  },
  {
    "text": "about as empty of an application as you can get i want to point out a few things here uh",
    "start": "673519",
    "end": "679920"
  },
  {
    "text": "so the main function that we have has a set of empty parentheses that represents parameters and in this",
    "start": "679920",
    "end": "686560"
  },
  {
    "text": "case main does not take parameters so if you're used to doing a console application for example",
    "start": "686560",
    "end": "692640"
  },
  {
    "text": "in net where you know you'll have parameters which",
    "start": "692640",
    "end": "698720"
  },
  {
    "text": "are arguments from the command line if you want to get arguments from the command line there is something in the",
    "start": "698720",
    "end": "704399"
  },
  {
    "text": "os package where you can get to those arguments i won't be showing that today but that's how you would get to them since they're",
    "start": "704399",
    "end": "710639"
  },
  {
    "text": "not passed in directly one other thing is you'll notice that the opening curly brace is",
    "start": "710639",
    "end": "716079"
  },
  {
    "text": "on the same line as the function opening curly braces must be on the same",
    "start": "716079",
    "end": "721839"
  },
  {
    "text": "line and this is enforced by the compiler so like i said go is very opinionated",
    "start": "721839",
    "end": "728639"
  },
  {
    "text": "about things this is the one of the things it's opinionated about and for anyone who's done javascript and",
    "start": "728639",
    "end": "734560"
  },
  {
    "text": "has run into the situation where if you don't have the opening brace on the same line",
    "start": "734560",
    "end": "740079"
  },
  {
    "text": "and you get that empty return value thing you understand how valuable this is",
    "start": "740079",
    "end": "747040"
  },
  {
    "text": "okay so i want to print something to the console and there's a print function that i can",
    "start": "747040",
    "end": "753360"
  },
  {
    "text": "use but i need to bring in another package for that and so this would be you know",
    "start": "753360",
    "end": "758399"
  },
  {
    "text": "similar to bringing in a a namespace slash assembly in the c-sharp world",
    "start": "758399",
    "end": "764560"
  },
  {
    "text": "and a lot of times what i'm used to doing in c-sharp is saying well i want to use a package instead of",
    "start": "764560",
    "end": "771200"
  },
  {
    "text": "saying using we'll say import and the package i want is the format",
    "start": "771200",
    "end": "777279"
  },
  {
    "text": "package or fmt so since i'm used to kind of typing and using statements at the top of my screen",
    "start": "777279",
    "end": "784160"
  },
  {
    "text": "i might say okay well i'm going to put all my imports at the top and then start using them",
    "start": "784160",
    "end": "789200"
  },
  {
    "text": "well there's a problem and it's not a problem once you get used to it",
    "start": "789200",
    "end": "794240"
  },
  {
    "text": "and that is go again doesn't like unused things in your application and in fact the linter um will",
    "start": "794240",
    "end": "802480"
  },
  {
    "text": "do some things for you so watch what happens when i save this file i'll hit ctrl s",
    "start": "802480",
    "end": "807600"
  },
  {
    "text": "and my import statement went away so uh when i first started doing this i was",
    "start": "807600",
    "end": "812720"
  },
  {
    "text": "really frustrated because i'm like okay import import import import and then i saved it because i'm always",
    "start": "812720",
    "end": "817839"
  },
  {
    "text": "interim saving and everything went away and what i learned was",
    "start": "817839",
    "end": "823360"
  },
  {
    "text": "let it go because the compiler or i should say the um the go extension will take care",
    "start": "823360",
    "end": "829040"
  },
  {
    "text": "of some things for me so if i want to use something from the format package i can type fm",
    "start": "829040",
    "end": "834800"
  },
  {
    "text": "fmt dot and we'll use print line print ln and now what happens",
    "start": "834800",
    "end": "841440"
  },
  {
    "text": "if i save it brings in the import for me so rather than managing imports myself",
    "start": "841440",
    "end": "848000"
  },
  {
    "text": "i am going to let this all happen kind of automatically okay so there's",
    "start": "848000",
    "end": "855360"
  },
  {
    "text": "print line function that goes out to the standard out which is console by default and we can put a hello world in there",
    "start": "855360",
    "end": "863360"
  },
  {
    "start": "860000",
    "end": "945000"
  },
  {
    "text": "and let's build this application so building from the command line uh you",
    "start": "863360",
    "end": "869680"
  },
  {
    "text": "just say go build and i'm not using a any kind of debugging and visual studio",
    "start": "869680",
    "end": "875839"
  },
  {
    "text": "code just because i haven't gotten it to work in all honesty so",
    "start": "875839",
    "end": "880880"
  },
  {
    "text": "i do my building and running from the command line now let's see what we have in our folder",
    "start": "880880",
    "end": "886959"
  },
  {
    "text": "so we have our main.go file that's the code file that we just typed in and then",
    "start": "886959",
    "end": "892800"
  },
  {
    "text": "you'll see i have an async.exe now since i'm on windows it is a exe if",
    "start": "892800",
    "end": "898959"
  },
  {
    "text": "i was in a different operating system it would be an executable file and you'll notice the size of that file",
    "start": "898959",
    "end": "905199"
  },
  {
    "text": "is kind of big and that's because this has everything that it needs to run this application",
    "start": "905199",
    "end": "911680"
  },
  {
    "text": "so there's no runtime there's nothing that's required to install on a particular machine so i",
    "start": "911680",
    "end": "918160"
  },
  {
    "text": "could take this async.exe file put it on a windows machine and it will",
    "start": "918160",
    "end": "923519"
  },
  {
    "text": "run assuming you know there's always architecture and other things",
    "start": "923519",
    "end": "929440"
  },
  {
    "text": "you know x64 versus 32-bit and whatnot uh but that is a complete application",
    "start": "929440",
    "end": "936320"
  },
  {
    "text": "all on its own and if we run it hello world so uh hopefully not too many",
    "start": "936320",
    "end": "944000"
  },
  {
    "text": "surprises so far uh one other thing that i'll point out is in the code on line six you'll notice",
    "start": "944000",
    "end": "949120"
  },
  {
    "start": "945000",
    "end": "1130000"
  },
  {
    "text": "there are no semicolons so if you're used to typing semicolons",
    "start": "949120",
    "end": "954560"
  },
  {
    "text": "that's something you can get unused to the nice thing is that if you do type semicolons when you hit save they",
    "start": "954560",
    "end": "961199"
  },
  {
    "text": "generally go away semicolons can be used to separate if we want multiple statements",
    "start": "961199",
    "end": "967440"
  },
  {
    "text": "on a single line for example with a 4 which we'll see a little bit later",
    "start": "967440",
    "end": "974320"
  },
  {
    "text": "but generally leave them out okay so um",
    "start": "975199",
    "end": "983279"
  },
  {
    "text": "i'm going to uh show how to do some variable as uh creations and assignments so i'm",
    "start": "983279",
    "end": "989680"
  },
  {
    "text": "going to create an array to hold the ids that i want to um that i want to look up",
    "start": "989680",
    "end": "997920"
  },
  {
    "text": "from this service and so i'll i'll say ids",
    "start": "997920",
    "end": "1003040"
  },
  {
    "text": "colon equals and the colon equals is a creation and assignment for a",
    "start": "1003040",
    "end": "1009199"
  },
  {
    "text": "variable so it works a lot like var in the c-sharp world",
    "start": "1009199",
    "end": "1014399"
  },
  {
    "text": "so depending on what i put on the right side of this equals that will be the type of this ids variable",
    "start": "1014399",
    "end": "1023199"
  },
  {
    "text": "now as i mentioned earlier go is strongly typed it's just that it will implicitly type it based on what we have",
    "start": "1023199",
    "end": "1030079"
  },
  {
    "text": "okay so here's how you declare an inter a so square brackets first saying hey this",
    "start": "1030079",
    "end": "1036720"
  },
  {
    "text": "is going to have nine elements in it and then we can also initialize it with a set of curly braces so",
    "start": "1036720",
    "end": "1044798"
  },
  {
    "text": "just like that so we'll put nine values in there and you'll notice that i have",
    "start": "1045039",
    "end": "1052160"
  },
  {
    "text": "red squigglies uh get used to red squigglies if i hover over this it's going to say",
    "start": "1052160",
    "end": "1058240"
  },
  {
    "text": "ids is declared and not used and if i try to build",
    "start": "1058240",
    "end": "1064880"
  },
  {
    "text": "compiler error so i promised you a compiler error if you have a variable you declare and don't use",
    "start": "1064880",
    "end": "1071840"
  },
  {
    "text": "oh man get used to it but we'll go ahead and put this in here",
    "start": "1071840",
    "end": "1081679"
  },
  {
    "text": "and now we can build it and we will output that value",
    "start": "1081679",
    "end": "1089120"
  },
  {
    "text": "so in here we see that we have those numbers separated by spaces in square brackets this is a default",
    "start": "1089440",
    "end": "1097120"
  },
  {
    "text": "output format for um for an integer array or actually for any",
    "start": "1097120",
    "end": "1103440"
  },
  {
    "text": "array it would come out in that format and we'll talk a little bit more about default formats in just a bit",
    "start": "1103440",
    "end": "1110640"
  },
  {
    "text": "okay now that we've done this let's actually make a service call if i",
    "start": "1110640",
    "end": "1117919"
  },
  {
    "text": "flip back to my service uh i have this person object and it's a",
    "start": "1117919",
    "end": "1124400"
  },
  {
    "text": "collection of properties there's some strings and integers and a date time in there in the middle somewhere",
    "start": "1124400",
    "end": "1131200"
  },
  {
    "start": "1130000",
    "end": "1250000"
  },
  {
    "text": "so i'm going to create a type that will have those values in it",
    "start": "1131200",
    "end": "1136480"
  },
  {
    "text": "that we can use so let's create a new type and for this we will say type person struct because",
    "start": "1136480",
    "end": "1143600"
  },
  {
    "text": "this will be a struct and then we can put in the fields that we'll be using here",
    "start": "1143600",
    "end": "1148960"
  },
  {
    "text": "now something that's interesting about go is that capitalization is important",
    "start": "1148960",
    "end": "1154000"
  },
  {
    "text": "again opinionated so you'll notice that my uh my type person starts with a",
    "start": "1154000",
    "end": "1160240"
  },
  {
    "text": "lowercase p my function main starts with a lowercase m if something starts with a lower case",
    "start": "1160240",
    "end": "1166640"
  },
  {
    "text": "it's internal to this package if something starts with an uppercase level it is exported",
    "start": "1166640",
    "end": "1173120"
  },
  {
    "text": "from this package so if i were to look in the fmt package then i would see this print line",
    "start": "1173120",
    "end": "1179520"
  },
  {
    "text": "function in there starts with a capital letter p so it's exported which means if somebody imports",
    "start": "1179520",
    "end": "1185120"
  },
  {
    "text": "this package they can use it so starting with a lower case",
    "start": "1185120",
    "end": "1191440"
  },
  {
    "text": "kind of similar-ish to private slash protected in the c-sharp world",
    "start": "1191440",
    "end": "1197360"
  },
  {
    "text": "if something starts with a capital then it is um public okay",
    "start": "1197360",
    "end": "1203679"
  },
  {
    "text": "so let's create some fields so we'll create an id field which is an int a given name which is a string a family",
    "start": "1203679",
    "end": "1210799"
  },
  {
    "text": "name which is also a string a start date which is a time dot time",
    "start": "1210799",
    "end": "1218840"
  },
  {
    "text": "and a rating which is an integer now a couple things i want to show here",
    "start": "1218840",
    "end": "1224080"
  },
  {
    "text": "watch what happens when i save okay first of all it brought in another import for the time package",
    "start": "1224080",
    "end": "1230480"
  },
  {
    "text": "but it lined up my um my types for my fields so that's",
    "start": "1230480",
    "end": "1237280"
  },
  {
    "text": "something that it's just doing for me so uh and then um in these declarations",
    "start": "1237280",
    "end": "1244720"
  },
  {
    "text": "you'll notice that the type comes second so the name comes first the type comes second",
    "start": "1244720",
    "end": "1250720"
  },
  {
    "start": "1250000",
    "end": "1325000"
  },
  {
    "text": "okay so now that we have something to put or a type to put these values into",
    "start": "1250720",
    "end": "1257760"
  },
  {
    "text": "let's make a service call i'll make a new function we'll call it get person and this will",
    "start": "1257760",
    "end": "1263440"
  },
  {
    "text": "take an id of integer or an id parameter that is an integer",
    "start": "1263440",
    "end": "1269200"
  },
  {
    "text": "and i'm going to return two values",
    "start": "1269200",
    "end": "1273440"
  },
  {
    "text": "so i mentioned how in go we can have multiple return values and that's baked into the language and",
    "start": "1274400",
    "end": "1281840"
  },
  {
    "text": "the return values come after the parameters so when we're talking about declaring a",
    "start": "1281840",
    "end": "1287919"
  },
  {
    "text": "function we have the func keyword then the name of the function then the parameters in parentheses and",
    "start": "1287919",
    "end": "1294640"
  },
  {
    "text": "if there's no parameters then empty parentheses and then a set of return values or return types",
    "start": "1294640",
    "end": "1303280"
  },
  {
    "text": "and then the opening curly brace if we only have one return type then we don't need",
    "start": "1303280",
    "end": "1308400"
  },
  {
    "text": "parentheses around it and if we don't have any return types we don't need any parentheses",
    "start": "1308400",
    "end": "1313760"
  },
  {
    "text": "as a reminder down on line 20 our func main no return type so we just kind of",
    "start": "1313760",
    "end": "1320799"
  },
  {
    "text": "don't mention that at all excuse me",
    "start": "1320799",
    "end": "1325600"
  },
  {
    "text": "okay so what i need to do is call",
    "start": "1326000",
    "end": "1332480"
  },
  {
    "text": "this url and put our own value into it so",
    "start": "1332480",
    "end": "1340000"
  },
  {
    "text": "i'm going to use another function from the um",
    "start": "1340000",
    "end": "1346480"
  },
  {
    "text": "the format package so fmt s print f",
    "start": "1346480",
    "end": "1351760"
  },
  {
    "text": "and then we will paste in our our url because i want to parameterize this so",
    "start": "1353440",
    "end": "1359919"
  },
  {
    "text": "rather than having a hard-coded 3 i would like the id value in here",
    "start": "1359919",
    "end": "1365520"
  },
  {
    "text": "now this does use a a format that's very similar to string",
    "start": "1365520",
    "end": "1370880"
  },
  {
    "text": "dot format in the c-sharp world so we have placeholders which are called verbs in go",
    "start": "1370880",
    "end": "1376480"
  },
  {
    "text": "the percent d is for um for an integer value um we'll also see",
    "start": "1376480",
    "end": "1382799"
  },
  {
    "text": "percent s and percent v a little bit later and this is how we can uh generate",
    "start": "1382799",
    "end": "1389679"
  },
  {
    "text": "uh strings so there's a lot of printf functions in the format package",
    "start": "1389679",
    "end": "1396799"
  },
  {
    "text": "printf means you know print something that's formatted so it potentially has these verbs in it",
    "start": "1396799",
    "end": "1402880"
  },
  {
    "text": "s printf will print to a string f printf will print to a file or",
    "start": "1402880",
    "end": "1408240"
  },
  {
    "text": "more appropriately anything that supports an i o writer and then there's just a printf that will",
    "start": "1408240",
    "end": "1413280"
  },
  {
    "text": "go out to the console and so you'll kind of see this pattern as a common thing",
    "start": "1413280",
    "end": "1418960"
  },
  {
    "text": "in go okay so that creates a url that we can use",
    "start": "1418960",
    "end": "1424000"
  },
  {
    "text": "let's make a service call and there's an http package that has a get function on it and again i'll save",
    "start": "1424000",
    "end": "1432400"
  },
  {
    "text": "and on line five it brought in net slash http i actually find myself saving quite a",
    "start": "1432400",
    "end": "1439279"
  },
  {
    "text": "bit because that's how you get the good help",
    "start": "1439279",
    "end": "1445600"
  },
  {
    "text": "so the pop-ups happen better if you're saving so we can see that the get function",
    "start": "1445600",
    "end": "1451679"
  },
  {
    "text": "takes a string for a url so we'll put that value in there now what's interesting here is this",
    "start": "1451679",
    "end": "1458000"
  },
  {
    "text": "returns two values it returns a pointer to a response and",
    "start": "1458000",
    "end": "1463360"
  },
  {
    "text": "an error and this is a very similar um this is a pretty common convention",
    "start": "1463360",
    "end": "1471760"
  },
  {
    "text": "for how to write your functions you'll notice that this get person i'm returning a person and an error so",
    "start": "1471760",
    "end": "1479440"
  },
  {
    "text": "the idea is that if this completes successfully the person value will be filled in and",
    "start": "1479440",
    "end": "1485200"
  },
  {
    "text": "error will be nil which is the equivalent of null in the c-sharp world",
    "start": "1485200",
    "end": "1491200"
  },
  {
    "text": "and so basically what we're doing is we're getting an error as one of the return values that we can",
    "start": "1491200",
    "end": "1498159"
  },
  {
    "text": "then check to see if it's populated or not",
    "start": "1498159",
    "end": "1503760"
  },
  {
    "text": "now for getting these values out you know i can say okay well here's response",
    "start": "1504000",
    "end": "1509760"
  },
  {
    "text": "set equal to the get but this returns two values",
    "start": "1509760",
    "end": "1517520"
  },
  {
    "text": "both the um pointer to the response and an error well you can assign both of those",
    "start": "1517520",
    "end": "1525039"
  },
  {
    "text": "values based on by just comma separating some variable names",
    "start": "1525039",
    "end": "1530960"
  },
  {
    "text": "so in this case resp will be a pointer to a response if i hover over this it should show that",
    "start": "1530960",
    "end": "1536720"
  },
  {
    "text": "yes and er is an error and again those are uh like vars in the",
    "start": "1536720",
    "end": "1543760"
  },
  {
    "text": "c-sharp world but these are in fact separate values as opposed to like a deconstructed uh tuple",
    "start": "1543760",
    "end": "1552159"
  },
  {
    "text": "and actually have an article that talks about that as well so if you want more details on multiple",
    "start": "1552159",
    "end": "1558080"
  },
  {
    "text": "return values there's resources on my website",
    "start": "1558080",
    "end": "1563120"
  },
  {
    "text": "so uh we should check to see if the error is populated before we go on",
    "start": "1563120",
    "end": "1571840"
  },
  {
    "text": "so i'll check to see if the error is not nil now when we're talking about if",
    "start": "1573600",
    "end": "1580400"
  },
  {
    "text": "conditions fairly similar to the c-sharp world one difference is there's no parentheses around the condition itself",
    "start": "1580400",
    "end": "1586960"
  },
  {
    "text": "so er not equal to nil is just there there's no parentheses uh the curly brace again on",
    "start": "1586960",
    "end": "1593440"
  },
  {
    "text": "the same line as the if another thing is that those curly braces are not optional if",
    "start": "1593440",
    "end": "1600000"
  },
  {
    "text": "you only have one line you must have them they must be there so again opinionated which is good",
    "start": "1600000",
    "end": "1607120"
  },
  {
    "text": "because it gets rid of some ambiguity now in this case what i've done is i've",
    "start": "1607120",
    "end": "1612960"
  },
  {
    "text": "said if there's an error i'm going to return an empty person and the same error object unfortunately",
    "start": "1612960",
    "end": "1620720"
  },
  {
    "text": "i won't have time to show you doing custom error messages today but again i've got a link on my on the",
    "start": "1620720",
    "end": "1626559"
  },
  {
    "text": "resources that talk about error handling in much more detail for now we'll just check to see if the error",
    "start": "1626559",
    "end": "1632400"
  },
  {
    "text": "is populated and if so we will uh return it this uh layout this way of",
    "start": "1632400",
    "end": "1639840"
  },
  {
    "text": "doing things is pretty common where if we hit an error we actually short circuit the function so generally",
    "start": "1639840",
    "end": "1646159"
  },
  {
    "text": "not an if else situation it's usually if this is true you know exit out go do something else",
    "start": "1646159",
    "end": "1652320"
  },
  {
    "text": "so again kind of um that's a convention that's not actually enforced",
    "start": "1652320",
    "end": "1657600"
  },
  {
    "text": "um but uh it's out there okay so now that i have a response",
    "start": "1657600",
    "end": "1664720"
  },
  {
    "start": "1658000",
    "end": "1770000"
  },
  {
    "text": "that's coming back i want to parse it and for this we'll use",
    "start": "1664720",
    "end": "1670399"
  },
  {
    "text": "a json decoder now there is a json package which is nice so i can say new decoder and again i'll",
    "start": "1670399",
    "end": "1677919"
  },
  {
    "text": "hit save just so that i've got my help populating nicely",
    "start": "1677919",
    "end": "1683360"
  },
  {
    "text": "and this is a function that takes an i o reader as a parameter and our response object",
    "start": "1683360",
    "end": "1691200"
  },
  {
    "text": "has a body and if i look at this it it says it's a read closer so this",
    "start": "1691200",
    "end": "1698799"
  },
  {
    "text": "actually implements both the i o reader interface and the i o closer interface so we can use that to",
    "start": "1698799",
    "end": "1706080"
  },
  {
    "text": "say hey jason go ahead and decode what's in uh this i o reader and then i can say dot",
    "start": "1706080",
    "end": "1714000"
  },
  {
    "text": "decode and tell it what i want to do with",
    "start": "1714000",
    "end": "1719440"
  },
  {
    "text": "the decoded the the decoded values",
    "start": "1719440",
    "end": "1724480"
  },
  {
    "text": "now one thing that's interesting about this decode function is if we look at the parameter it says it is interface that has empty",
    "start": "1724480",
    "end": "1731440"
  },
  {
    "text": "curly braces well this represents an empty interface so it's an interface that has no members",
    "start": "1731440",
    "end": "1737679"
  },
  {
    "text": "in it now because of the way go works with implicit implementation of interfaces",
    "start": "1737679",
    "end": "1743200"
  },
  {
    "text": "which again we'll see that a little more in person in just a moment",
    "start": "1743200",
    "end": "1748240"
  },
  {
    "text": "what this means is that this matches any type so the equivalent of this in",
    "start": "1748240",
    "end": "1755440"
  },
  {
    "text": "the c-sharp world would be object so if a function takes an object we can put anything we want in here",
    "start": "1755440",
    "end": "1762000"
  },
  {
    "text": "if a function takes an empty interface we can put any type that we want in there and it will match that interface",
    "start": "1762000",
    "end": "1770399"
  },
  {
    "start": "1770000",
    "end": "1885000"
  },
  {
    "text": "now one thing that we do have to do is we have to get into pointers a little bit",
    "start": "1770399",
    "end": "1775520"
  },
  {
    "text": "let me create a variable that we can use to decode our values into",
    "start": "1775520",
    "end": "1782799"
  },
  {
    "text": "now so far we've been declaring our val our variables with the colon equals which creates the value",
    "start": "1782799",
    "end": "1789520"
  },
  {
    "text": "or i should say declares it and assigns a value to it you can declare a variable using the var",
    "start": "1789520",
    "end": "1795440"
  },
  {
    "text": "keyword and in this case it's var then the name p and then the type",
    "start": "1795440",
    "end": "1800640"
  },
  {
    "text": "person now what i pass into this is actually ampersand p",
    "start": "1800640",
    "end": "1807039"
  },
  {
    "text": "so i mentioned that go does have pointers i'm sorry for those of you who thought you left pointers behind",
    "start": "1807039",
    "end": "1813679"
  },
  {
    "text": "uh it's actually don't think of this as c pointers though because again memory safety is something that is baked",
    "start": "1813679",
    "end": "1820960"
  },
  {
    "text": "into go it was one of the design principles but in this case decode does not return",
    "start": "1820960",
    "end": "1827600"
  },
  {
    "text": "a person it actually returns an error so in order to get the values out",
    "start": "1827600",
    "end": "1834880"
  },
  {
    "text": "we need to modify the parameter that's coming in so to be able to modify that parameter i",
    "start": "1834880",
    "end": "1842240"
  },
  {
    "text": "pass the address of that parameter using the ampersand into the decode and now it's able to",
    "start": "1842240",
    "end": "1849520"
  },
  {
    "text": "modify that particular variable if i were to just pass p in there it could use the values but",
    "start": "1849520",
    "end": "1856159"
  },
  {
    "text": "it could not modify it i mean it could modify them internally but it wouldn't be persistent",
    "start": "1856159",
    "end": "1861600"
  },
  {
    "text": "outside of the function so um kind of like an out in c-sharp but it's a little more",
    "start": "1861600",
    "end": "1869279"
  },
  {
    "text": "nuanced than that so it can actually assign these values okay and since this returns",
    "start": "1869279",
    "end": "1876320"
  },
  {
    "text": "an error i'll go ahead and pick that up and we'll just use our",
    "start": "1876320",
    "end": "1881919"
  },
  {
    "text": "a similar error block to what we used above and then if everything is happy",
    "start": "1881919",
    "end": "1889600"
  },
  {
    "start": "1885000",
    "end": "1985000"
  },
  {
    "text": "we will just return a person oh actually we'll return person and nil since we have two return values",
    "start": "1889600",
    "end": "1898960"
  },
  {
    "text": "so this is the code that we need to get a value from a service and i like that",
    "start": "1898960",
    "end": "1905200"
  },
  {
    "text": "it's fairly um you know there's not a whole lot to it which i like and there's a lot of things",
    "start": "1905200",
    "end": "1911679"
  },
  {
    "text": "built in like the http functions are all there the json decoders there",
    "start": "1911679",
    "end": "1918000"
  },
  {
    "text": "so um you know it kind of feels nice to start with okay so let's use our",
    "start": "1919279",
    "end": "1926799"
  },
  {
    "text": "newly found power in our main method and i'll start by",
    "start": "1926799",
    "end": "1932240"
  },
  {
    "text": "hard coding the value so we'll say get person and",
    "start": "1932240",
    "end": "1939360"
  },
  {
    "text": "i'll pass in an id of three and in fact we'll say person error and then we'll do",
    "start": "1939360",
    "end": "1947200"
  },
  {
    "text": "a format dot printf and we'll say percent",
    "start": "1947200",
    "end": "1952399"
  },
  {
    "text": "d percent v p dot id and p",
    "start": "1952399",
    "end": "1959600"
  },
  {
    "text": "okay and one thing i always forget to do with print uh printfs is there's no new line",
    "start": "1959600",
    "end": "1965440"
  },
  {
    "text": "automatically on there so backslash n for a new line",
    "start": "1965440",
    "end": "1970880"
  },
  {
    "text": "and what we have for this format string again percent d is a verb that means",
    "start": "1971120",
    "end": "1977360"
  },
  {
    "text": "integer so i'm going to print out the um the id",
    "start": "1977360",
    "end": "1983279"
  },
  {
    "text": "in fact let's put a colon after it and then percent v is a verb that stands for the",
    "start": "1983279",
    "end": "1990320"
  },
  {
    "start": "1985000",
    "end": "2165000"
  },
  {
    "text": "natural format and we can really think of this as a two string i could use a percent s and it would",
    "start": "1990320",
    "end": "1997200"
  },
  {
    "text": "have pretty much the same effect uh what we have for a struct is it will",
    "start": "1997200",
    "end": "2003120"
  },
  {
    "text": "print out all of the values of all of the fields that's the default way that structs work",
    "start": "2003120",
    "end": "2008640"
  },
  {
    "text": "now you'll see i have red squigglies and it says hey you're not using this error variable",
    "start": "2008640",
    "end": "2014960"
  },
  {
    "text": "well i'll come back and use this later but for now i'm going to skip over it and i can use",
    "start": "2014960",
    "end": "2021440"
  },
  {
    "text": "an underscore for that so an underscore is a it's known as a blank identifier",
    "start": "2021440",
    "end": "2027120"
  },
  {
    "text": "and go but it's a disc it's a discard so if i'm not going to use a value then i can skip over it i wouldn't",
    "start": "2027120",
    "end": "2034240"
  },
  {
    "text": "recommend skipping over errors but it is possible and will be",
    "start": "2034240",
    "end": "2043840"
  },
  {
    "text": "slash async so now if we run this now we get our values out and",
    "start": "2045039",
    "end": "2051760"
  },
  {
    "text": "it looks like i got a forward slash n instead of a backslash n at the end of",
    "start": "2051760",
    "end": "2057679"
  },
  {
    "text": "that so good job jeremy okay so backslash n uh but what we can see",
    "start": "2057679",
    "end": "2066158"
  },
  {
    "text": "is we've got the curly braces with all of the values of the fields printed out now i want to change that i",
    "start": "2066159",
    "end": "2074079"
  },
  {
    "text": "want it to have a different default output and in c-sharp we would",
    "start": "2074079",
    "end": "2079679"
  },
  {
    "text": "say oh well everything descends from object so just override the two-string method and you're good to go",
    "start": "2079679",
    "end": "2085040"
  },
  {
    "text": "well uh go doesn't have that but it does have an interface that is",
    "start": "2085040",
    "end": "2091118"
  },
  {
    "text": "used which is called the stringer interface and so we'll see how interfaces work for",
    "start": "2091119",
    "end": "2096960"
  },
  {
    "text": "this now when i'm looking things up online i will say like uh golang",
    "start": "2096960",
    "end": "2102400"
  },
  {
    "text": "fmt uh golang gives you better search results than go",
    "start": "2102400",
    "end": "2107520"
  },
  {
    "text": "fmt is the name of the package that i'm looking for and generally hit golang.org",
    "start": "2107520",
    "end": "2112640"
  },
  {
    "text": "with the documentation that you want so that's a good way of searching i'm going to hit the index and scroll",
    "start": "2112640",
    "end": "2118960"
  },
  {
    "text": "down to type stringer and we'll take a look at this",
    "start": "2118960",
    "end": "2124160"
  },
  {
    "text": "so stringer is an interface and just like interfaces in the c-sharp",
    "start": "2124160",
    "end": "2129280"
  },
  {
    "text": "world they have methods and in this case there's one method which is called string",
    "start": "2129280",
    "end": "2134880"
  },
  {
    "text": "with an uppercase s takes no parameters and returns a string",
    "start": "2134880",
    "end": "2140320"
  },
  {
    "text": "now i kind of mentioned earlier that go has implicit implementation for interfaces",
    "start": "2140320",
    "end": "2146800"
  },
  {
    "text": "what that means is that i do not need to mark my struct and say hey my struct is a stringer",
    "start": "2146800",
    "end": "2155359"
  },
  {
    "text": "i don't actually say that directly at all what i do instead is i implement",
    "start": "2155359",
    "end": "2162320"
  },
  {
    "text": "the string method on my struct and it automatically implements that",
    "start": "2162320",
    "end": "2168079"
  },
  {
    "text": "interface so it has implicit implementation of of interfaces which is",
    "start": "2168079",
    "end": "2173520"
  },
  {
    "text": "a really interesting topic that i've been exploring as i've come across different",
    "start": "2173520",
    "end": "2179599"
  },
  {
    "text": "things in my programming okay so let's create a func a named string that returns a string",
    "start": "2179599",
    "end": "2187119"
  },
  {
    "text": "okay well we have a little bit of a problem here because i need to associate this with",
    "start": "2187119",
    "end": "2194000"
  },
  {
    "text": "the person struct somehow now you can't put methods into a struct so unlike c sharp i can't add a",
    "start": "2194000",
    "end": "2200640"
  },
  {
    "text": "method directly to this strut but what i can do is between the func",
    "start": "2200640",
    "end": "2206720"
  },
  {
    "text": "and the string the function name i can add a um",
    "start": "2206720",
    "end": "2215838"
  },
  {
    "text": "a variable and a type and this is uh this associates",
    "start": "2216400",
    "end": "2224240"
  },
  {
    "text": "this string method with the person struck",
    "start": "2224240",
    "end": "2229599"
  },
  {
    "text": "so oh and man i'm totally having a brain freeze",
    "start": "2229599",
    "end": "2235760"
  },
  {
    "text": "because i forgot what that that actually that thing is called it's a method",
    "start": "2235760",
    "end": "2243520"
  },
  {
    "text": "okay i'll get back to you on that unfortunately my brain froze up okay so this is a method",
    "start": "2243520",
    "end": "2251920"
  },
  {
    "text": "now in c sharp we kind of use the terms function and method a little interchangeably",
    "start": "2251920",
    "end": "2257440"
  },
  {
    "text": "uh people in the f-sharp and functional programming world have much clearer definitions in the go world a",
    "start": "2257440",
    "end": "2263839"
  },
  {
    "text": "func a function is something that is not associated with a type so in this case uh function main on line",
    "start": "2263839",
    "end": "2271680"
  },
  {
    "text": "36 is a function the get person on line 10 is a function",
    "start": "2271680",
    "end": "2278000"
  },
  {
    "text": "but on line 32 this string is a method because it",
    "start": "2278000",
    "end": "2283440"
  },
  {
    "text": "belongs to the person type and then in here",
    "start": "2283440",
    "end": "2288800"
  },
  {
    "text": "i can say return fmt.s printf and let's give it a percent as",
    "start": "2288800",
    "end": "2295440"
  },
  {
    "text": "percent s and we'll pass in the given name and the family name",
    "start": "2295440",
    "end": "2303680"
  },
  {
    "text": "so here's what's really cool about this and i think it's really cool because if",
    "start": "2305040",
    "end": "2312000"
  },
  {
    "text": "i look at this all i did was add this method and if i rebuild my application and then run it",
    "start": "2312000",
    "end": "2321599"
  },
  {
    "text": "now it comes out in a completely different format so it comes out in the format that i want",
    "start": "2323200",
    "end": "2328560"
  },
  {
    "text": "so the implicit implementation of interfaces i find it really interesting because all",
    "start": "2328560",
    "end": "2334880"
  },
  {
    "text": "i did was add a string method and it's like oh well there's an interface that matches that and",
    "start": "2334880",
    "end": "2340320"
  },
  {
    "text": "my percent v format verb is going to use that um so i might get over excited about",
    "start": "2340320",
    "end": "2347200"
  },
  {
    "text": "that but i get over excited about interfaces in general so",
    "start": "2347200",
    "end": "2354160"
  },
  {
    "text": "uh okay uh let's do a little bit of looping because",
    "start": "2354160",
    "end": "2361440"
  },
  {
    "text": "loops are always important right now i just have a hard-coded value but i kind of like to go through all of",
    "start": "2361440",
    "end": "2367040"
  },
  {
    "text": "these ids now in the c-sharp world we have a lot of ways to do it we have a four",
    "start": "2367040",
    "end": "2372560"
  },
  {
    "text": "we have a four-each we have a do a while we have a do-while in go you have a four",
    "start": "2372560",
    "end": "2380000"
  },
  {
    "text": "that's all you have the good news is you can use a whole bunch of conditions uh different condition types that",
    "start": "2380000",
    "end": "2386400"
  },
  {
    "start": "2381000",
    "end": "2459000"
  },
  {
    "text": "actually covers the functionality of all of the different loop types that we have in c sharp",
    "start": "2386400",
    "end": "2392480"
  },
  {
    "text": "let's start by using an indexer so we'll say like a typical for loop so i equals zero",
    "start": "2392480",
    "end": "2400079"
  },
  {
    "text": "i less than lang ids and len is a built-in length function",
    "start": "2400079",
    "end": "2407040"
  },
  {
    "text": "and then i plus plus so hopefully this code is not terribly",
    "start": "2407040",
    "end": "2412319"
  },
  {
    "text": "frightening and then instead of passing this in",
    "start": "2412319",
    "end": "2418480"
  },
  {
    "text": "we'll say ids i will index into our array",
    "start": "2418480",
    "end": "2425839"
  },
  {
    "text": "so go build and now when we run the application",
    "start": "2427119",
    "end": "2432480"
  },
  {
    "text": "we'll get all of those values coming back now like i mentioned there is a one second delay that's built",
    "start": "2432480",
    "end": "2437839"
  },
  {
    "text": "into the service and that's why these are clicking back slowly we will get to the concurrency in just a",
    "start": "2437839",
    "end": "2444720"
  },
  {
    "text": "bit but we can see all of our values come out now i don't like four i like four each four",
    "start": "2444720",
    "end": "2451200"
  },
  {
    "text": "4-h is awesome in c-sharp well there's an equivalent of 4 each using the for loop and go",
    "start": "2451200",
    "end": "2459440"
  },
  {
    "start": "2459000",
    "end": "2511000"
  },
  {
    "text": "first we'll modify the way this indexer works because",
    "start": "2459440",
    "end": "2464560"
  },
  {
    "text": "using an indexer that iterates through you know however long something is is common well instead of",
    "start": "2464560",
    "end": "2470800"
  },
  {
    "text": "doing all of this i can say range ids and this will have the same effect",
    "start": "2470800",
    "end": "2476560"
  },
  {
    "text": "so it will index it will the i will be an index based on the",
    "start": "2476560",
    "end": "2482240"
  },
  {
    "text": "range or i'm sorry the about based on the number of items in the array and um",
    "start": "2482240",
    "end": "2490960"
  },
  {
    "text": "and it will actually work exactly the same way i know we've known each other for 40 minutes but i don't expect you to",
    "start": "2490960",
    "end": "2496800"
  },
  {
    "text": "trust me fully but you can see it does in fact do the same thing we just saw",
    "start": "2496800",
    "end": "2502880"
  },
  {
    "text": "now what's more interesting than this is range can take",
    "start": "2502880",
    "end": "2509040"
  },
  {
    "text": "can return two values and in this case i is an indexer so against zero through",
    "start": "2509040",
    "end": "2516160"
  },
  {
    "start": "2511000",
    "end": "2665000"
  },
  {
    "text": "eight in this case id will be the actual value the one two three four five six seven",
    "start": "2516160",
    "end": "2521680"
  },
  {
    "text": "eight nine so very much like the value that's coming out of a four each so instead of saying ids i",
    "start": "2521680",
    "end": "2529520"
  },
  {
    "text": "i can say id and this saves me from having to index back into that array again",
    "start": "2529520",
    "end": "2537119"
  },
  {
    "text": "so rather than you know iterating through the basically iterating the array and then",
    "start": "2537119",
    "end": "2543440"
  },
  {
    "text": "pulling each value out i can say oh you know give me that id value now again it'll say i is not being used",
    "start": "2543440",
    "end": "2551359"
  },
  {
    "text": "at this point but a blank identifier takes care of that",
    "start": "2551359",
    "end": "2556400"
  },
  {
    "text": "and again we'll just we'll just kind of do a build and a run",
    "start": "2556400",
    "end": "2561440"
  },
  {
    "text": "and see that we get exactly the same results",
    "start": "2561440",
    "end": "2566400"
  },
  {
    "text": "do you trust me yet maybe",
    "start": "2566880",
    "end": "2570880"
  },
  {
    "text": "okay so kind of the next step i want to do is i",
    "start": "2572000",
    "end": "2579359"
  },
  {
    "text": "want to run these things concurrently because this is taking too long",
    "start": "2579359",
    "end": "2584640"
  },
  {
    "text": "and in fact to see how long it is i'll just add a couple of um variables here so at the",
    "start": "2584640",
    "end": "2591280"
  },
  {
    "text": "top we'll say start equals time dot now so that will give me the current time and then down here i'll",
    "start": "2591280",
    "end": "2599359"
  },
  {
    "text": "create an elapsed variable and the time package has a",
    "start": "2599359",
    "end": "2605839"
  },
  {
    "text": "sense function and so i can say time sense start and this will give me",
    "start": "2605839",
    "end": "2613119"
  },
  {
    "text": "a duration and a duration actually kind of prints out nicely ish",
    "start": "2613119",
    "end": "2620880"
  },
  {
    "text": "in the standard format so we'll say format.printf",
    "start": "2620880",
    "end": "2626160"
  },
  {
    "text": "and we'll say total time percent v elapsed",
    "start": "2626160",
    "end": "2635839"
  },
  {
    "text": "go build and let's do a clear and then",
    "start": "2636960",
    "end": "2643520"
  },
  {
    "text": "run this and now we'll i'll actually wait for it",
    "start": "2643520",
    "end": "2648800"
  },
  {
    "text": "to finish this time so that we can see the total time at the end and nine seconds is a really long time",
    "start": "2648800",
    "end": "2654800"
  },
  {
    "text": "okay so there we can see we've got 9.09 seconds coming out of this",
    "start": "2654800",
    "end": "2662160"
  },
  {
    "text": "okay now i want to run this get person concurrently",
    "start": "2662160",
    "end": "2669440"
  },
  {
    "start": "2665000",
    "end": "2750000"
  },
  {
    "text": "so rather than doing something one value at a time i'd like to",
    "start": "2669440",
    "end": "2676400"
  },
  {
    "text": "you know kind of like think about running this as a task in c-sharp right i want to run these all at the same time and we",
    "start": "2676400",
    "end": "2683520"
  },
  {
    "text": "can definitely do that and go again concurrency is baked in and in fact it's called a go routine",
    "start": "2683520",
    "end": "2690000"
  },
  {
    "text": "that's how important it is go routines uh the name of the language",
    "start": "2690000",
    "end": "2695040"
  },
  {
    "text": "that's how important these are now one thing about this is now it gets",
    "start": "2695040",
    "end": "2700720"
  },
  {
    "text": "complicated because how do you return something from a go routine well rather than",
    "start": "2700720",
    "end": "2706160"
  },
  {
    "text": "kind of having um you know continuations and the interesting things that we have in",
    "start": "2706160",
    "end": "2711200"
  },
  {
    "text": "task and the await and so forth that makes up async await",
    "start": "2711200",
    "end": "2717440"
  },
  {
    "text": "there's a few different approaches we can use like a shared value uh that can be read from",
    "start": "2717440",
    "end": "2724880"
  },
  {
    "text": "uh different contexts uh something that is also part of the language is known as",
    "start": "2724880",
    "end": "2730079"
  },
  {
    "text": "a channel and you can think of a channel as a concurrent queue",
    "start": "2730079",
    "end": "2735599"
  },
  {
    "text": "so it's a concurrent friendly cue so i can have an asynchronous operation that's adding",
    "start": "2735599",
    "end": "2741920"
  },
  {
    "text": "things to the channel and then i can read off of that channels somewhere else",
    "start": "2741920",
    "end": "2747119"
  },
  {
    "text": "and so that's what we'll use today for this i will uh create a wrapper",
    "start": "2747119",
    "end": "2753599"
  },
  {
    "text": "around this get person more or less and i'm really bad at coming up with names so the best name that",
    "start": "2753599",
    "end": "2759440"
  },
  {
    "text": "i have right now is fetch person2 channel and i i apologize for that name and this",
    "start": "2759440",
    "end": "2767119"
  },
  {
    "text": "will take an id oh it'll actually take an id and a channel and we'll call the channel ch and",
    "start": "2767119",
    "end": "2774960"
  },
  {
    "text": "uh we'll we'll use this interesting syntax for that and this actually won't return",
    "start": "2774960",
    "end": "2781280"
  },
  {
    "text": "any values so here i have a channel and chan specifies the type",
    "start": "2781280",
    "end": "2788319"
  },
  {
    "text": "channels also have to have a type associated with them that says this is what this channel will hold",
    "start": "2788319",
    "end": "2794000"
  },
  {
    "text": "so channel can only hold one type and in this case we have a channel of person now that little arrow that's",
    "start": "2794000",
    "end": "2801359"
  },
  {
    "text": "pointed towards the chan that's indicating that this function is it's only going to be writing to the",
    "start": "2801359",
    "end": "2808800"
  },
  {
    "text": "channel so uh you can read from a channel right from a channel do a read and write from",
    "start": "2808800",
    "end": "2814720"
  },
  {
    "text": "the channel but in this case we're specifying hey i'm only going to be writing to this channel",
    "start": "2814720",
    "end": "2820319"
  },
  {
    "text": "and that gives the compiler chances to optimize things a little bit better and so",
    "start": "2820319",
    "end": "2827440"
  },
  {
    "text": "let's take the code that we have here",
    "start": "2827440",
    "end": "2831838"
  },
  {
    "text": "we'll cut that paste it up here and then to write to the channel",
    "start": "2833440",
    "end": "2841838"
  },
  {
    "text": "we use a skinny arrow as opposed to a fat arrow so what this will do is it will take",
    "start": "2842400",
    "end": "2850400"
  },
  {
    "text": "that value p and put it on to the channel",
    "start": "2850400",
    "end": "2855440"
  },
  {
    "text": "and i'm not comfortable with ignoring the errors but i want to",
    "start": "2855680",
    "end": "2862319"
  },
  {
    "text": "make sure i get through the rest of this concurrency and i'll go pick up that error if i have time that underscore on line 37 is",
    "start": "2862319",
    "end": "2868960"
  },
  {
    "text": "really bothering me right now if you do go look at the downloaded code that's on github",
    "start": "2868960",
    "end": "2874640"
  },
  {
    "text": "it does have full air handling so um again this is kind of the quick tour",
    "start": "2874640",
    "end": "2882000"
  },
  {
    "text": "okay and this is one way of handling this",
    "start": "2882000",
    "end": "2888640"
  },
  {
    "text": "um what i'm going to do is create two loops i'm going to create a loop",
    "start": "2888640",
    "end": "2894559"
  },
  {
    "text": "that will put values onto a channel and another loop that",
    "start": "2894559",
    "end": "2900079"
  },
  {
    "text": "will read values from the channel",
    "start": "2900079",
    "end": "2905359"
  },
  {
    "text": "okay let's get rid of that code and outside of these loops i'll create a",
    "start": "2905599",
    "end": "2911839"
  },
  {
    "text": "channel variable so to create a channel there's another built-in function",
    "start": "2911839",
    "end": "2917680"
  },
  {
    "start": "2913000",
    "end": "3032000"
  },
  {
    "text": "in go which is called make and this is used to to make channels as well as maps which",
    "start": "2917680",
    "end": "2924079"
  },
  {
    "text": "is like a dictionary and also slices which you'll want to read about slices it's kind of a",
    "start": "2924079",
    "end": "2930480"
  },
  {
    "text": "it's a view into an array and it's very common in go so i'll specify that i want to channel a",
    "start": "2930480",
    "end": "2936480"
  },
  {
    "text": "person and then also how big i want the channel to be in this case i'll say this channel is",
    "start": "2936480",
    "end": "2942160"
  },
  {
    "text": "capable of holding 10 elements this is important because if i leave this blank",
    "start": "2942160",
    "end": "2947839"
  },
  {
    "text": "this channel a channel by default has a capacity of one so if i write to the channel and then",
    "start": "2947839",
    "end": "2954960"
  },
  {
    "text": "something else tries to write to the channel it will block that operation until somebody first reads that value off of",
    "start": "2954960",
    "end": "2961760"
  },
  {
    "text": "the channel so depending on what you need that might work fine",
    "start": "2961760",
    "end": "2967200"
  },
  {
    "text": "in our case i want to be able to put a chunk of values onto the channel so that i can read them off somewhere",
    "start": "2967200",
    "end": "2973680"
  },
  {
    "text": "else so i'll create a capacity of 10. blocking gets",
    "start": "2973680",
    "end": "2979040"
  },
  {
    "text": "interesting and i don't have an article on this yet but i am going to have one very shortly",
    "start": "2979040",
    "end": "2986400"
  },
  {
    "text": "okay so for this we will call the fetch person to channel we'll pass from the id and the channel",
    "start": "2986400",
    "end": "2992559"
  },
  {
    "text": "and then to make this asynchronous we add go",
    "start": "2992559",
    "end": "2997280"
  },
  {
    "text": "and so now this uh fetch person to channel will uh kick off uh concurrently",
    "start": "2997599",
    "end": "3005760"
  },
  {
    "text": "and this loop will keep going so it won't wait the one second for the get person to complete it will",
    "start": "3005760",
    "end": "3011920"
  },
  {
    "text": "just keep going so these will run pretty much in parallel",
    "start": "3011920",
    "end": "3017440"
  },
  {
    "text": "okay to read values off of the channel i can create a variable and again i'll use the colon equals to create and assign",
    "start": "3017440",
    "end": "3025040"
  },
  {
    "text": "and use the arrow coming off of the channel like that",
    "start": "3025040",
    "end": "3032800"
  },
  {
    "text": "now in this case what i'm doing is i'm going to on line 48 i'm writing to the channel a",
    "start": "3032960",
    "end": "3039200"
  },
  {
    "text": "certain number of time based on the ids that i have on line 53 i'm reading",
    "start": "3039200",
    "end": "3044559"
  },
  {
    "text": "from the channel that same number of times based on the ids but i'm not actually using the values",
    "start": "3044559",
    "end": "3051119"
  },
  {
    "text": "that are coming out so it says hey ids is declared but not used so you don't want to do that",
    "start": "3051119",
    "end": "3057599"
  },
  {
    "text": "so another blank identifier uh no it doesn't like this either",
    "start": "3057599",
    "end": "3064240"
  },
  {
    "text": "because it says hey there's no variables on the left side of this assignment operator",
    "start": "3065440",
    "end": "3071359"
  },
  {
    "text": "well it turns out you can leave that out entirely so if you say four range ids then this",
    "start": "3071359",
    "end": "3078480"
  },
  {
    "text": "will loop the number of times in this case nine times based on how many elements are in",
    "start": "3078480",
    "end": "3083520"
  },
  {
    "text": "the ids array in this case but there's no",
    "start": "3083520",
    "end": "3090400"
  },
  {
    "text": "values i don't have an indexer or a value coming out this is not the best way to handle this",
    "start": "3090400",
    "end": "3097359"
  },
  {
    "text": "but i kind of i want to show you asynchrony without going into all of the details",
    "start": "3097359",
    "end": "3103760"
  },
  {
    "text": "because we only have nine minutes left now if you do want some more information again check out the resources",
    "start": "3103760",
    "end": "3110640"
  },
  {
    "text": "because the sample code that's out there uses something that's known as a weight group and a weight group is it's basically a",
    "start": "3110640",
    "end": "3118079"
  },
  {
    "text": "reference counter so i can say okay whenever i kick off this asynchronous process i'm",
    "start": "3118079",
    "end": "3125839"
  },
  {
    "text": "going to add one to a weight group variable and then up here when this process is complete",
    "start": "3125839",
    "end": "3133680"
  },
  {
    "start": "3131000",
    "end": "3256000"
  },
  {
    "text": "i'm going to subtract one from the weight group and then there's a weight group.weight",
    "start": "3133680",
    "end": "3140960"
  },
  {
    "text": "function that you can use and it will block so nothing will run below it until that weight group",
    "start": "3140960",
    "end": "3146480"
  },
  {
    "text": "hits zero and so in that case what i'd really want to do is close the channel at that point and",
    "start": "3146480",
    "end": "3154000"
  },
  {
    "text": "rather than reading the ids a certain number of time i would just keep reading from the",
    "start": "3154000",
    "end": "3160240"
  },
  {
    "text": "channel until it's closed so again something i don't really have time to show you today but something",
    "start": "3160240",
    "end": "3166319"
  },
  {
    "text": "that gets a little more complicated than what we have here but what we have here fingers crossed should be enough to get",
    "start": "3166319",
    "end": "3175040"
  },
  {
    "text": "the um concurrent operations going okay i'm feeling very confident fingers",
    "start": "3175040",
    "end": "3181599"
  },
  {
    "text": "crossed hey look at that tada okay uh applause applause applause",
    "start": "3181599",
    "end": "3190400"
  },
  {
    "text": "okay it's a little difficult when everybody's on mute but okay i get the general idea but we can",
    "start": "3190400",
    "end": "3197200"
  },
  {
    "text": "see up here our time when we were doing things non-concurrently nine seconds down here concurrently one second",
    "start": "3197200",
    "end": "3205040"
  },
  {
    "text": "so all of these operations are running at the same time you know as much as that's true in the computer world",
    "start": "3205040",
    "end": "3212240"
  },
  {
    "text": "now just like a lot of parallel programming when you get into concurrency things become non-deterministic",
    "start": "3212240",
    "end": "3218319"
  },
  {
    "text": "so if you notice the order that these ids are coming out in they're not coming out in any particular",
    "start": "3218319",
    "end": "3224079"
  },
  {
    "text": "order and if i run this again they'll come out in a different order so",
    "start": "3224079",
    "end": "3230160"
  },
  {
    "text": "if that's important to you you might need to do a little more a little more work but uh it's",
    "start": "3230160",
    "end": "3237119"
  },
  {
    "text": "a standard um a standard thing we have to deal with when it comes to concurrency",
    "start": "3237119",
    "end": "3244079"
  },
  {
    "text": "okay so um oh and uh richard evans was actually",
    "start": "3244079",
    "end": "3250319"
  },
  {
    "text": "paying attention uh when i was talking about methods earlier and i just saw it in the chat so line 32",
    "start": "3250319",
    "end": "3258079"
  },
  {
    "start": "3256000",
    "end": "3456000"
  },
  {
    "text": "this p person this is called a method receiver thank you yes that is the term that i",
    "start": "3258079",
    "end": "3263839"
  },
  {
    "text": "was searching my head for so uh thank you for that richard okay",
    "start": "3263839",
    "end": "3269359"
  },
  {
    "text": "so um i am not going to go back and add",
    "start": "3269359",
    "end": "3276720"
  },
  {
    "text": "better error handling at this point i will leave that as an exercise uh for the viewer but what i will do",
    "start": "3276720",
    "end": "3284799"
  },
  {
    "text": "is i want to show you um something that's kind of interesting",
    "start": "3284799",
    "end": "3293119"
  },
  {
    "text": "okay so if you do go out to the repository go for the c sharp dev",
    "start": "3293119",
    "end": "3301280"
  },
  {
    "text": "um this actually has something that is known as a code tour and a code tour is an extension for",
    "start": "3301280",
    "end": "3307839"
  },
  {
    "text": "visual studio and you'll see there's a tours folder here that's part of the repo",
    "start": "3307839",
    "end": "3314400"
  },
  {
    "text": "let me show you what that means uh let me just pull up",
    "start": "3314400",
    "end": "3321359"
  },
  {
    "text": "this code in visual studio code",
    "start": "3321359",
    "end": "3326400"
  },
  {
    "text": "with code",
    "start": "3327280",
    "end": "3334319"
  },
  {
    "text": "and let's see and then if you uh scroll through this",
    "start": "3334319",
    "end": "3340079"
  },
  {
    "text": "code i talked about weight groups so that's in here uh there's also",
    "start": "3340079",
    "end": "3345599"
  },
  {
    "text": "the weight and closing the channel and doing things some different ways now if you do have an extension and",
    "start": "3345599",
    "end": "3351839"
  },
  {
    "text": "again you can come in here and type in code tour and you'll find the code tour extension",
    "start": "3351839",
    "end": "3357520"
  },
  {
    "text": "available you'll see that in my explorer i have a",
    "start": "3357520",
    "end": "3362559"
  },
  {
    "text": "code tour tab and i have three tours that are set up here and if you click this little",
    "start": "3362559",
    "end": "3368319"
  },
  {
    "text": "start tour arrow this will walk you through the code and have annotations for it so here it's",
    "start": "3368319",
    "end": "3376160"
  },
  {
    "text": "pointing at package main that we saw at the beginning talks a little bit about that here we're looking at",
    "start": "3376160",
    "end": "3381839"
  },
  {
    "text": "funk main talks a little bit about funk mate uh where the curly braces go and a lot",
    "start": "3381839",
    "end": "3388240"
  },
  {
    "text": "of the things that we talked about today so this code tour is available",
    "start": "3388240",
    "end": "3396960"
  },
  {
    "text": "by just again getting the repo and installing that code tour extension so",
    "start": "3396960",
    "end": "3403760"
  },
  {
    "text": "and this goes into more detail than i had time to show you and then another thing is that down at",
    "start": "3403760",
    "end": "3409599"
  },
  {
    "text": "the bottom in the resources there are um some articles written",
    "start": "3409599",
    "end": "3415359"
  },
  {
    "text": "again kind of from the perspective of a c-sharp developer how are things different uh loops how do all the for loops work",
    "start": "3415359",
    "end": "3422079"
  },
  {
    "text": "and go defer which i actually skipped over i'm sorry i skipped over to fur that's",
    "start": "3422079",
    "end": "3429680"
  },
  {
    "text": "really cool air handling this is an article that talks all about the air handling",
    "start": "3429680",
    "end": "3434960"
  },
  {
    "text": "philosophy that's in go uh the multiple return values which are",
    "start": "3434960",
    "end": "3440720"
  },
  {
    "text": "similar to uh tuples and c sharp but they're actually different um and then i",
    "start": "3440720",
    "end": "3447359"
  },
  {
    "text": "do have some more articles that i have planned for this series as well so there's a lot",
    "start": "3447359",
    "end": "3452799"
  },
  {
    "text": "more out there in fact let's see how close i came okay so with today's topic we did see",
    "start": "3452799",
    "end": "3459599"
  },
  {
    "start": "3456000",
    "end": "3600000"
  },
  {
    "text": "the very opinionated syntax where you put your curly braces things like that unused variables actually",
    "start": "3459599",
    "end": "3465359"
  },
  {
    "text": "result in compile errors uh baked in concurrency go routines are",
    "start": "3465359",
    "end": "3470559"
  },
  {
    "text": "there deferred calls which i totally skipped over and i apologize for that error handling",
    "start": "3470559",
    "end": "3476079"
  },
  {
    "text": "again a different philosophy of error handling where as a programmer we take a little bit more of a hands-on approach",
    "start": "3476079",
    "end": "3482400"
  },
  {
    "text": "checking error return values we saw multiple return values and we saw interfaces with the stringer interface",
    "start": "3482400",
    "end": "3489599"
  },
  {
    "text": "there are a lot more topics so again this is a very quick tour uh talking about how packages work i can",
    "start": "3489599",
    "end": "3496880"
  },
  {
    "text": "write custom code and bring in a package like a library how exports worked i talk a little bit",
    "start": "3496880",
    "end": "3502319"
  },
  {
    "text": "about the capitalized versus not capitalized project structure types interfaces in",
    "start": "3502319",
    "end": "3507839"
  },
  {
    "text": "more detail named return values you can actually put a name on your return type uh",
    "start": "3507839",
    "end": "3514480"
  },
  {
    "text": "in in addition to just the type and bear returns go along with that the code tour actually mentions those uh",
    "start": "3514480",
    "end": "3520960"
  },
  {
    "text": "the difference between errors and panics pointers inline go routines which is an anonymous",
    "start": "3520960",
    "end": "3526240"
  },
  {
    "text": "function that has closures there's a lot a lot of really cool stuff out there",
    "start": "3526240",
    "end": "3533680"
  },
  {
    "text": "okay and again here's the links uh let me just check to see if we have",
    "start": "3533680",
    "end": "3539680"
  },
  {
    "text": "any i have not been keeping a good look at the slack",
    "start": "3539680",
    "end": "3547440"
  },
  {
    "text": "and it looks like there's no questions on either side so um",
    "start": "3547839",
    "end": "3555680"
  },
  {
    "text": "in the slack and in the chat it looks like i'm caught up which",
    "start": "3555680",
    "end": "3561200"
  },
  {
    "text": "is kind of interesting uh if you do have questions that come up",
    "start": "3561200",
    "end": "3566720"
  },
  {
    "text": "later feel free to drop me an email again i'm an explorer in this space but it is",
    "start": "3566720",
    "end": "3574160"
  },
  {
    "text": "interesting to think about hmm maybe i can use this to start writing my primary language a little bit",
    "start": "3574160",
    "end": "3580400"
  },
  {
    "text": "differently and if you go out to my website jeremybites.com you will find a link to the github repo as well so if you",
    "start": "3580400",
    "end": "3586640"
  },
  {
    "text": "lose track of that github repo i am jeremy bites on github as well as well as on twitter",
    "start": "3586640",
    "end": "3592720"
  },
  {
    "text": "and so with that i say thank you very much for spending this hour with me and there's one session left of",
    "start": "3592720",
    "end": "3600720"
  },
  {
    "text": "ndc so enjoy the last session and thank you very much for",
    "start": "3600720",
    "end": "3605839"
  },
  {
    "text": "joining me",
    "start": "3605839",
    "end": "3615839"
  },
  {
    "text": "you",
    "start": "3618559",
    "end": "3620640"
  }
]