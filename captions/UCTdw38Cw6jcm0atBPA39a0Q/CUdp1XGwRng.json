[
  {
    "text": "good day my name is John Ezra I'm actually in Australian but I work in Redmond I work on the Microsoft research",
    "start": "9730",
    "end": "17180"
  },
  {
    "text": "team doing some work with the quantum computing group and I do function programming and F sharp for day job so I",
    "start": "17180",
    "end": "26830"
  },
  {
    "text": "try to infect as many people as possible with this disease and get everybody to sort of look at things functionally and",
    "start": "26830",
    "end": "33200"
  },
  {
    "text": "so on so forth one of the interesting things I've found is a set of tools that",
    "start": "33200",
    "end": "38960"
  },
  {
    "text": "actually make it very easy to solve certain difficult problems and in some sense this talk is actually about that",
    "start": "38960",
    "end": "47350"
  },
  {
    "text": "we're going to cover four major questions you know what algebraic data types why do we care why do we need them",
    "start": "47740",
    "end": "54260"
  },
  {
    "text": "okay so so now that you've convinced me twist my arm that we need algebraic data",
    "start": "54260",
    "end": "59570"
  },
  {
    "text": "types what does it look like to have one in c-sharp and then how do we get c-sharp to actually give us these types",
    "start": "59570",
    "end": "65680"
  },
  {
    "text": "because it's one thing to write the thing down by hand can you do something better than that and really that's the",
    "start": "65680",
    "end": "71950"
  },
  {
    "text": "structure of the talk you'll realize a little bit later on that there's a bit",
    "start": "71950",
    "end": "77539"
  },
  {
    "text": "of bait and switch but I won't tell you what it is right just yet you'll have to stay awake and ask",
    "start": "77539",
    "end": "84649"
  },
  {
    "text": "questions and stuff like that actually thing too fast too loud to everything",
    "start": "84649",
    "end": "92060"
  },
  {
    "text": "okay clear awesome who knows what algebraic data types are Joe of course was cool so",
    "start": "92060",
    "end": "100969"
  },
  {
    "text": "we can start this with with the appropriate kind of threat I've",
    "start": "100969",
    "end": "106039"
  },
  {
    "text": "threatened to hit you with type theory at nine o'clock in the morning but this",
    "start": "106039",
    "end": "111139"
  },
  {
    "text": "is actually all the type theory you're going to need and all the type theory are going to learn what you're going to hear next thirty seconds or so what is a",
    "start": "111139",
    "end": "119329"
  },
  {
    "text": "type a type you can think of a type as a set of values okay so you have a set",
    "start": "119329",
    "end": "125359"
  },
  {
    "text": "which is just an unordered set of values so now you have a set how do you make a",
    "start": "125359",
    "end": "131390"
  },
  {
    "text": "bigger set with two sets well there are couple of ways of putting those sets together to create bigger sets so in",
    "start": "131390",
    "end": "138830"
  },
  {
    "text": "some sense the question really is how do you create a bigger type order the type and the algebraic mechanism",
    "start": "138830",
    "end": "147410"
  },
  {
    "text": "that we're going to talk about is really all there is to know about the type theory behind this all right",
    "start": "147410",
    "end": "154120"
  },
  {
    "text": "have I lost anyone already no so there",
    "start": "154120",
    "end": "159230"
  },
  {
    "text": "are two ways of making bigger types or the smaller ones at least two you can think of them as basically mathematical",
    "start": "159230",
    "end": "164720"
  },
  {
    "text": "operators on top of sets so think of one way of doing it is take every value in",
    "start": "164720",
    "end": "171410"
  },
  {
    "text": "one set and every value in the other set and then just cross pair that will like",
    "start": "171410",
    "end": "176690"
  },
  {
    "text": "the cross join if you think about what happens there the the cardinality the number of elements in this product set",
    "start": "176690",
    "end": "183440"
  },
  {
    "text": "is actually the multiplicative product of the cardinalities of individual sets",
    "start": "183440",
    "end": "188900"
  },
  {
    "text": "so if I have byte and character and I",
    "start": "188900",
    "end": "194030"
  },
  {
    "text": "put two of them together well my composite type will have all the possible bytes multiplied by all the",
    "start": "194030",
    "end": "200209"
  },
  {
    "text": "possible characters that's the cardinality that I would get right and some sense we're very familiar with this",
    "start": "200209",
    "end": "206060"
  },
  {
    "text": "because this is really the only sort of type composition stuff that see c-sharp",
    "start": "206060",
    "end": "211549"
  },
  {
    "text": "and Java kind of encourage it's basically structs of some kind another",
    "start": "211549",
    "end": "218690"
  },
  {
    "text": "way of doing looking at it is to basically take all the values in the one type tag them up with the name of the",
    "start": "218690",
    "end": "224390"
  },
  {
    "text": "type all the values with the other type tag them up with the name of the type and put them together in one set then",
    "start": "224390",
    "end": "230030"
  },
  {
    "text": "you'll have a sum of the cardinalities of the constituent types you guys with",
    "start": "230030",
    "end": "235100"
  },
  {
    "text": "me sofa turns out that's actually very useful to represent choice and when you",
    "start": "235100",
    "end": "243500"
  },
  {
    "text": "start doing domain modeling and stuff like that with just product types usually you'll end up having all kinds",
    "start": "243500",
    "end": "250220"
  },
  {
    "text": "of convoluted mechanisms to try and limit the kind of limit limit the the",
    "start": "250220",
    "end": "257840"
  },
  {
    "text": "space of values to just valid ones and so you'll end up having a whole ton of",
    "start": "257840",
    "end": "263080"
  },
  {
    "text": "things that are composed in the type system but I actually invalid for use",
    "start": "263080",
    "end": "269780"
  },
  {
    "text": "and and then you have tried a unit test to make sure that that invalid thing doesn't actually show up or if it does",
    "start": "269780",
    "end": "275210"
  },
  {
    "text": "then you do the right thing and in some sense you lose the ability for the compiler to tell you hey you",
    "start": "275210",
    "end": "280880"
  },
  {
    "text": "can't possibly create one of these things and you push it down to a unit test kind of thing or a runtime check to",
    "start": "280880",
    "end": "287150"
  },
  {
    "text": "figure out whether you've got something that makes sense or not the other thing that we need to kind of",
    "start": "287150",
    "end": "292760"
  },
  {
    "text": "be careful about is value semantics now if you think about sets sets and actually sets of values but if you think",
    "start": "292760",
    "end": "300170"
  },
  {
    "text": "of a Java class or a c-sharp class the cardinality of this of the type that",
    "start": "300170",
    "end": "307130"
  },
  {
    "text": "takes an int in a string for example of a string is bad idea but an int and say",
    "start": "307130",
    "end": "314120"
  },
  {
    "text": "a byte right when you create a class with those two properties the cardinality of the set of those types is",
    "start": "314120",
    "end": "321200"
  },
  {
    "text": "not related to the cardinality of the concision types because we can create reference we can create references and",
    "start": "321200",
    "end": "328760"
  },
  {
    "text": "pointers so you can create a hundred objects with the same int and the same",
    "start": "328760",
    "end": "334480"
  },
  {
    "text": "byte and the type system will think they're the same but the runtime system",
    "start": "334480",
    "end": "340130"
  },
  {
    "text": "will tell you that they are different because you're comparing references and so it's important in our discussion here",
    "start": "340130",
    "end": "347420"
  },
  {
    "text": "to talk about value semantics and we're going to try and get values actually to be the the primary way we think about",
    "start": "347420",
    "end": "354320"
  },
  {
    "text": "types and sets and values and so on and so forth so let's see so how many people",
    "start": "354320",
    "end": "370580"
  },
  {
    "text": "here do like domain driven development for a living you know build business",
    "start": "370580",
    "end": "378740"
  },
  {
    "text": "applications boring business applications yeah me too I used to do that when you do modeling with a boring",
    "start": "378740",
    "end": "386210"
  },
  {
    "text": "business application at the moment so I was just talking with Joe a couple minutes ago we're talking about payments",
    "start": "386210",
    "end": "391940"
  },
  {
    "text": "right what's a valid payment or give me cash of some kind you can give me a",
    "start": "391940",
    "end": "399500"
  },
  {
    "text": "credit card and you give me a check of in the u.s. you can get a check nobody",
    "start": "399500",
    "end": "406040"
  },
  {
    "text": "nobody's checks you anymore do they know but you can do this Abbi pay or whatever",
    "start": "406040",
    "end": "411660"
  },
  {
    "text": "it is and you'll end up having different mechanisms for doing that and each of those has a valid sort of adjoint value",
    "start": "411660",
    "end": "419610"
  },
  {
    "text": "associated with it so a check will be associated with a check number credit card associate with a credit card number and the traditional way of actually",
    "start": "419610",
    "end": "426330"
  },
  {
    "text": "modeling one of those things is to create this huge big record that you store in database with the whole bunch of fields are going to be null and then",
    "start": "426330",
    "end": "432960"
  },
  {
    "text": "somewhere along the line you have to write a little piece of validation code that says hey hang on make sure that at least the correct thing is here so if it",
    "start": "432960",
    "end": "438480"
  },
  {
    "text": "says that it's a credit card account there better be a credit card number in there and that level of validation makes",
    "start": "438480",
    "end": "445350"
  },
  {
    "text": "it very difficult for us to reason about the code itself how would it be if the type system didn't let you put in a",
    "start": "445350",
    "end": "452070"
  },
  {
    "text": "check without a check number or a credit card without a credit card number and still treat the whole thing as a payment",
    "start": "452070",
    "end": "458100"
  },
  {
    "text": "and some sense that's really what algebraic data types kind of good for they make it easy to represent the",
    "start": "458100",
    "end": "465660"
  },
  {
    "text": "values that are valid and make it difficult to represent values that are illegal and consequently they do that at",
    "start": "465660",
    "end": "473040"
  },
  {
    "text": "a compile time rather than a run time kind of 3x check so the type system in the compiler is actually going to",
    "start": "473040",
    "end": "478290"
  },
  {
    "text": "support you to make sure that you're doing the right thing and this is not whimsical and this is probably the only",
    "start": "478290",
    "end": "485040"
  },
  {
    "text": "time you'll hear me say this in the entire talk but there's actually mathematics behind it there is actually",
    "start": "485040",
    "end": "490950"
  },
  {
    "text": "strong mathematical theory that equates or relates propositional logic and type",
    "start": "490950",
    "end": "497370"
  },
  {
    "text": "logic and it turns out that if you have a strong type system you can actually",
    "start": "497370",
    "end": "502560"
  },
  {
    "text": "make strong claims about when the compiler passes a program whether it's actually correct or not you can make",
    "start": "502560",
    "end": "508830"
  },
  {
    "text": "certain claims about that so algebraic data types are useful for that kind of thing and now let's go and see what they",
    "start": "508830",
    "end": "517409"
  },
  {
    "text": "look like in seizure so we looked at two",
    "start": "517410",
    "end": "522750"
  },
  {
    "text": "different types there's product types and there's product types and then",
    "start": "522750",
    "end": "531810"
  },
  {
    "text": "there's sometimes so the way in which we do product types is very familiar everybody knows how to do this modulo",
    "start": "531810",
    "end": "538470"
  },
  {
    "text": "the value semantics piece right everybody knows how to build code in a struct or whatever it is that's kind of a product type it's",
    "start": "538470",
    "end": "544390"
  },
  {
    "text": "basically a tagged tuple if you want to go with strict mathematics you have you",
    "start": "544390",
    "end": "551769"
  },
  {
    "text": "know a name associated with each of the of the fields and that becomes in effect a product type",
    "start": "551769",
    "end": "558120"
  },
  {
    "text": "the thing about value semantics there that changes things because you can't modify anything anymore right because if",
    "start": "558120",
    "end": "564790"
  },
  {
    "text": "you say make something immutable you know a struct of B comma 3 is always",
    "start": "564790",
    "end": "571390"
  },
  {
    "text": "going to be B comma 3 it'll always be that so if you want to change the struct you have to actually have a new struct",
    "start": "571390",
    "end": "577390"
  },
  {
    "text": "that that has the appropriate value if you want to make 3/4 then you have to have a different struck there is B comma",
    "start": "577390",
    "end": "583930"
  },
  {
    "text": "for a different value in the type system that needs to come out and of course that makes it kind of difficult to write",
    "start": "583930",
    "end": "591100"
  },
  {
    "text": "because you know every time you want to do something you're going to copy it and then set the things so the only time you can actually make a change in the state",
    "start": "591100",
    "end": "597430"
  },
  {
    "text": "of the the struct the container is at construction time and so every time you",
    "start": "597430",
    "end": "604240"
  },
  {
    "text": "know imagine a struct with 40 40 different values in it you got to make sure that all the 40 different values in",
    "start": "604240",
    "end": "609640"
  },
  {
    "text": "copied over very brittle code every time someone adds a new property you're going to be more trouble right and it just",
    "start": "609640",
    "end": "616060"
  },
  {
    "text": "looks like you're about to shoot yourself in the foot the way to get around it is to use a copy constructor so effectively we will have some way of",
    "start": "616060",
    "end": "622810"
  },
  {
    "text": "actually saying here's a different constructor that allows me to set just one or two or three or four properties",
    "start": "622810",
    "end": "628839"
  },
  {
    "text": "and everything else that I say is actually from the source object and should automatically happen now I'm",
    "start": "628839",
    "end": "636550"
  },
  {
    "text": "going to show you what the code looks like but let's just talk about the structure for the moment and just get an idea of what what the code would look",
    "start": "636550",
    "end": "643870"
  },
  {
    "text": "like you know we'd create a sealed partial class because you know we don't believe inheritance like there's no",
    "start": "643870",
    "end": "650230"
  },
  {
    "text": "inheritance of values what is it what does it mean to inherit 3 doesn't mean anything well you can't inherit a tuple",
    "start": "650230",
    "end": "657399"
  },
  {
    "text": "of 3 comma B well so we'll create a sealed class we'll call it will make a",
    "start": "657399",
    "end": "662980"
  },
  {
    "text": "partial though because then we can do some interesting things with adding other behavior to the type but as far as",
    "start": "662980",
    "end": "671560"
  },
  {
    "text": "the type itself is concerned we only need to have it as sealed it'll have read-only properties because",
    "start": "671560",
    "end": "678170"
  },
  {
    "text": "you want to be able to look at the individual fields inside the tuple we",
    "start": "678170",
    "end": "684110"
  },
  {
    "text": "need a constructor because the constructor is how we actually create the initial parrying in the first place and then we talked about sort of vaguely",
    "start": "684110",
    "end": "691190"
  },
  {
    "text": "about this width thing which basically turns down and says yeah I have 15 properties you can set any two of them",
    "start": "691190",
    "end": "697579"
  },
  {
    "text": "or any one of them whatever it is you want and I'll copy the rest over from the original source that you have and",
    "start": "697579",
    "end": "703130"
  },
  {
    "text": "that should make it easier for us to do something functionally and then there's value semantics which make sure that",
    "start": "703130",
    "end": "709069"
  },
  {
    "text": "when you equate be comma 3 with another object that says be comma 3 they actually do turn out to be truly equal",
    "start": "709069",
    "end": "716449"
  },
  {
    "text": "so there are a couple of interfaces that dotnet has to that Norden its ask you to",
    "start": "716449",
    "end": "721579"
  },
  {
    "text": "provide you need to override a couple of methods and there's a bunch of boilerplate that needs to go in there to",
    "start": "721579",
    "end": "727430"
  },
  {
    "text": "make well your semantics book right now some types are a damn sight more complicated actually what we'll end up",
    "start": "727430",
    "end": "734569"
  },
  {
    "text": "doing is how do we normally how do we normally model some types in",
    "start": "734569",
    "end": "741790"
  },
  {
    "text": "object-oriented world base class bunch",
    "start": "741790",
    "end": "746899"
  },
  {
    "text": "of derived children some kind of runtime check to say which of the types of children you've got and then you have",
    "start": "746899",
    "end": "754220"
  },
  {
    "text": "you know so how I mean payment if you know if you crack open a book on c-sharp and ask how payment is actually",
    "start": "754220",
    "end": "760310"
  },
  {
    "text": "implemented there'll be an abstract base classes called payment and then there will be a check payment which inherits",
    "start": "760310",
    "end": "766220"
  },
  {
    "text": "from payment and there will be a credit card payment which inherits from something else and so on and so forth and you'll end up having this mechanism",
    "start": "766220",
    "end": "773000"
  },
  {
    "text": "where you see treat something as a patient payment but when you want to actually figure out what kind of payment",
    "start": "773000",
    "end": "778459"
  },
  {
    "text": "it is you've got to do some runtime type dispatching or runtime type checking to",
    "start": "778459",
    "end": "783740"
  },
  {
    "text": "figure out whether you're dealing with a cheque or a credit card or whatever it is there's a problem with that what if I",
    "start": "783740",
    "end": "790670"
  },
  {
    "text": "had a new type of payment how does the compiler tell you that there's a whole",
    "start": "790670",
    "end": "796250"
  },
  {
    "text": "ton of code there that's actually only trying to check against three different types when there's a fourth type that",
    "start": "796250",
    "end": "801649"
  },
  {
    "text": "I've just added you guys must be using resharper so because you don't have the",
    "start": "801649",
    "end": "807290"
  },
  {
    "text": "sense horror on your face but the reality is that in a very large system or in a",
    "start": "807290",
    "end": "812350"
  },
  {
    "text": "system that is only dependent on an open hierarchy and open open inheritance hierarchy you're going to land up having",
    "start": "812350",
    "end": "820240"
  },
  {
    "text": "this problem and we don't want to have this problem we want to have a closed hierarchy that basically doesn't allow",
    "start": "820240",
    "end": "826720"
  },
  {
    "text": "you to add something without you knowing about it you want every time something",
    "start": "826720",
    "end": "832150"
  },
  {
    "text": "changes in the payment hierarchy you want all the places where payment is used to actually turn around and say yes",
    "start": "832150",
    "end": "837790"
  },
  {
    "text": "I know how to handle this new case or oh we don't have check payments anymore I don't need to handle this new case I",
    "start": "837790",
    "end": "843670"
  },
  {
    "text": "don't need to handle this old case so we do that by basically creating a closed inheritance hierarchy and we make it",
    "start": "843670",
    "end": "850420"
  },
  {
    "text": "opaque so that we don't actually allow anyone to see what the individual types are inside because I don't want any",
    "start": "850420",
    "end": "856780"
  },
  {
    "text": "runtime checking because once I do that how in the world am I going to get the",
    "start": "856780",
    "end": "864850"
  },
  {
    "text": "behavior that I want which is going to be different for checks and different for credit cards and different for cash",
    "start": "864850",
    "end": "871750"
  },
  {
    "text": "how am I going to actually make that happen well we use functional techniques for this what we'll end up doing is",
    "start": "871750",
    "end": "877810"
  },
  {
    "text": "we'll create a method called match and we'll give a different lambda for each",
    "start": "877810",
    "end": "882820"
  },
  {
    "text": "different case and what that can do is delegate to the appropriate match",
    "start": "882820",
    "end": "889410"
  },
  {
    "text": "implementation inside the class and that can actually do the right thing so",
    "start": "889410",
    "end": "896830"
  },
  {
    "text": "that's the structure the code might actually look something like this let's you'd have a private constructor with a",
    "start": "896830",
    "end": "903880"
  },
  {
    "text": "sealed partial abstract class so nobody can actually extend this class anymore nobody can actually instantiate the",
    "start": "903880",
    "end": "910330"
  },
  {
    "text": "outer class there's no concept of making a payment because you have to tell me what kind of payment you want so there",
    "start": "910330",
    "end": "917020"
  },
  {
    "text": "is a private constructor that prevents you from doing anything funny with the outer class but I need to create one",
    "start": "917020",
    "end": "924070"
  },
  {
    "text": "value constructor per type on the inside so I'll have to have a check payment type of thing over there or a cash",
    "start": "924070",
    "end": "931120"
  },
  {
    "text": "payment type of thing over there so the choice constructor would allow me to create any instance of an object",
    "start": "931120",
    "end": "938530"
  },
  {
    "text": "and the instance of the object would be one of those private sealed partial choice classes so I created",
    "start": "938530",
    "end": "945520"
  },
  {
    "text": "one class for every type of discriminant in the in the discriminated union and be",
    "start": "945520",
    "end": "952540"
  },
  {
    "text": "able to create an instance of those so the only way you're going to get at one of those choice classes is through this",
    "start": "952540",
    "end": "958000"
  },
  {
    "text": "constructor and the only way you can actually get the choice class to do the right thing is to call the abstract",
    "start": "958000",
    "end": "964420"
  },
  {
    "text": "match function and say here are the four things that I the four choices that I have run the lambda against each of",
    "start": "964420",
    "end": "970780"
  },
  {
    "text": "those run the right lamda against each of those and because that is abstract and you have a concrete match function",
    "start": "970780",
    "end": "977470"
  },
  {
    "text": "that overrides that abstract function the right kind of payment will will",
    "start": "977470",
    "end": "983140"
  },
  {
    "text": "accept the call and call the right lambda with it and so in some sense you basically do a dynamic kind of dispatch",
    "start": "983140",
    "end": "990280"
  },
  {
    "text": "but you're doing it with static safety so imagine what would happen if I create",
    "start": "990280",
    "end": "996370"
  },
  {
    "text": "a new type of payment well I would have to open sealed partial I would have to open this class add a new choice class",
    "start": "996370",
    "end": "1003630"
  },
  {
    "text": "inside it and because I added a new choice class inside it I would have to",
    "start": "1003630",
    "end": "1008760"
  },
  {
    "text": "add a new argument to the abstract match function fix all of the others to actually fix the right thing fix all the",
    "start": "1008760",
    "end": "1015180"
  },
  {
    "text": "call sites to say hey you now have a new type of payment that you have to deal with what if I have a Bitcoin payment",
    "start": "1015180",
    "end": "1022620"
  },
  {
    "text": "give me the lambda that I need to use in your case and and so compiler will now",
    "start": "1022620",
    "end": "1027750"
  },
  {
    "text": "step up to the game and say I'm not going to let you go until you fix every one of these things and the whole bunch",
    "start": "1027750",
    "end": "1035819"
  },
  {
    "text": "of runtime problems go away and in some sense this is exactly how of course I",
    "start": "1035819",
    "end": "1042780"
  },
  {
    "text": "know on top of that you have value semantics which is a constant now this is in fact how most function language is",
    "start": "1042780",
    "end": "1049920"
  },
  {
    "text": "actually implemented if you look at the inside where I shop Union it'll look",
    "start": "1049920",
    "end": "1055500"
  },
  {
    "text": "kind of like this if you look at a scholar discriminative Union they",
    "start": "1055500",
    "end": "1061620"
  },
  {
    "text": "explicitly tell you hey this is what I want you to do create me a trait and create me these three classes they're",
    "start": "1061620",
    "end": "1068160"
  },
  {
    "text": "actually inherit from this trade and close the hierarchy for me and in some sense this is kind of what",
    "start": "1068160",
    "end": "1073269"
  },
  {
    "text": "we want now I've wasted 18 minutes of your time blathering on about type theory why because really the problem",
    "start": "1073269",
    "end": "1083380"
  },
  {
    "text": "that we're trying to solve is this one",
    "start": "1083380",
    "end": "1088440"
  },
  {
    "text": "it's all well and good to understand how you create an algebraic data type with",
    "start": "1088440",
    "end": "1093789"
  },
  {
    "text": "all of this boilerplate stuff but we",
    "start": "1093789",
    "end": "1098980"
  },
  {
    "text": "humans right we're lazy we are error-prone who wants to be writing this kind of stuff do you I",
    "start": "1098980",
    "end": "1105519"
  },
  {
    "text": "don't I want the language to give it to me I mean that shop gives it to me why try",
    "start": "1105519",
    "end": "1111730"
  },
  {
    "text": "and see shop do it it's Carla gives it to me why can't she shaft do it so really now what we're trying to do is",
    "start": "1111730",
    "end": "1121860"
  },
  {
    "text": "step back a bit and let's try to solve the real problem that we won't solve",
    "start": "1121860",
    "end": "1127500"
  },
  {
    "text": "right what we really want to say is I intend to have a discriminated union or",
    "start": "1127500",
    "end": "1134110"
  },
  {
    "text": "a an immutable record I don't care about the implementation detail I only want to",
    "start": "1134110",
    "end": "1139840"
  },
  {
    "text": "tell you hey by the way I have a choice class that is either maybe of something",
    "start": "1139840",
    "end": "1145809"
  },
  {
    "text": "or none because I don't want to have nulls in my my code all I want to do is",
    "start": "1145809",
    "end": "1151480"
  },
  {
    "text": "represent that and then I want to use some functional technique some",
    "start": "1151480",
    "end": "1157299"
  },
  {
    "text": "mathematically transformational technique to write the code for me because what are you going to do when",
    "start": "1157299",
    "end": "1164019"
  },
  {
    "text": "you have to write the code you're going to follow a recipe what is a recipe it's a program what's",
    "start": "1164019",
    "end": "1170320"
  },
  {
    "text": "good at running programs computers so why don't we write a program that takes this intent declaration and generate the",
    "start": "1170320",
    "end": "1178960"
  },
  {
    "text": "code does it sound familiar you kind of do this all the time don't you this is what compilers do this exactly what",
    "start": "1178960",
    "end": "1185049"
  },
  {
    "text": "compilers do you don't talk about bits and bytes and moving things around you talk about for loops you talk about maps",
    "start": "1185049",
    "end": "1191559"
  },
  {
    "text": "and you've talked about you know link the higher level abstractions you want",
    "start": "1191559",
    "end": "1196570"
  },
  {
    "text": "to extend the language the compiler of the language isn't giving you the support right now what you want to do is extend the language somehow and in some",
    "start": "1196570",
    "end": "1204429"
  },
  {
    "text": "sense this is the bait-and-switch part of the column that the whole talk I'm actually",
    "start": "1204429",
    "end": "1214180"
  },
  {
    "text": "not going to talk about type theory at all that was just a sneaky way of",
    "start": "1214180",
    "end": "1219730"
  },
  {
    "text": "getting you into this room at 9 o'clock in the morning on the day after the party right because the Fayetteville",
    "start": "1219730",
    "end": "1225700"
  },
  {
    "text": "will be here the really sneaky thing that I'm doing the real thing I won't talk about is the",
    "start": "1225700",
    "end": "1231100"
  },
  {
    "text": "approach of being able to create domain-specific language a little language to represent an abstract",
    "start": "1231100",
    "end": "1238240"
  },
  {
    "text": "thought find a way to actually do the transformation into code integrate it",
    "start": "1238240",
    "end": "1245560"
  },
  {
    "text": "into some form of tooling that allows you to use this on a daily basis without having to actually take a hair out by",
    "start": "1245560",
    "end": "1252040"
  },
  {
    "text": "the roots and start writing tens of thousands of lines of code for all kinds of stuff this approach I have found is",
    "start": "1252040",
    "end": "1258700"
  },
  {
    "text": "actually very very useful I've written all kinds of stuff with it including state machines running on our lanes and",
    "start": "1258700",
    "end": "1265720"
  },
  {
    "text": "all kinds of other things this is a very useful pattern it's a very useful tool",
    "start": "1265720",
    "end": "1270880"
  },
  {
    "text": "to have under your belt so I'm going to spend the rest of the 40 minutes talking about how to go about doing that the",
    "start": "1270880",
    "end": "1279100"
  },
  {
    "text": "approach that you take the tools you'll need and how you can actually start experimenting so if you're here looking",
    "start": "1279100",
    "end": "1285310"
  },
  {
    "text": "for real hardcore type theory it's the example not the point of the talk it's",
    "start": "1285310",
    "end": "1290380"
  },
  {
    "text": "the example in the talk is that okay cool right Scott lation comes up with",
    "start": "1290380",
    "end": "1302230"
  },
  {
    "text": "really cool ways of saying things he has a website called F sharp of one prophet of course we're going to now do DSL for",
    "start": "1302230",
    "end": "1309370"
  },
  {
    "text": "fun and profit so I'm pologize team and these are the sort of concepts that you",
    "start": "1309370",
    "end": "1314560"
  },
  {
    "text": "need in your mind in order to make this kind of thing work so there's representation right we need to figure out what it is that we're trying to",
    "start": "1314560",
    "end": "1320500"
  },
  {
    "text": "represent we need a syntax we'll probably need some semantics we need to basically make sure that we understand",
    "start": "1320500",
    "end": "1325660"
  },
  {
    "text": "what it is that we're representing in some sensible way not arbitrary way by",
    "start": "1325660",
    "end": "1331660"
  },
  {
    "text": "the way the arbitrary way is called a spec and you give it to a developer and then they sit and have discussions over",
    "start": "1331660",
    "end": "1336970"
  },
  {
    "text": "it for several months this is math you're going to talk about",
    "start": "1336970",
    "end": "1342790"
  },
  {
    "text": "it in precise unambiguous terms and there are tools for doing this and we're",
    "start": "1342790",
    "end": "1347830"
  },
  {
    "text": "going to talk about couple of them and we're going to talk about how we're actually going to implement some of this stuff and this becomes unambiguous and",
    "start": "1347830",
    "end": "1356110"
  },
  {
    "text": "when you have unambiguous input you can have reliable predictable deterministic",
    "start": "1356110",
    "end": "1361930"
  },
  {
    "text": "output and that's what that is and the last bit we're going to talk about is because we'll have Microsoft I work for",
    "start": "1361930",
    "end": "1369610"
  },
  {
    "text": "Microsoft and we use Visual Studio because it is the best we have a way of actually incorporating whatever tooling",
    "start": "1369610",
    "end": "1376510"
  },
  {
    "text": "that we have in here right into the visual studio so you can have a completely seamless dev experience even",
    "start": "1376510",
    "end": "1383860"
  },
  {
    "text": "though you cooked up the language on Tuesday and you whip the whole thing up by Friday people coming in on Monday",
    "start": "1383860",
    "end": "1389950"
  },
  {
    "text": "morning won't have to change anything about the way they work they have power in this right so let's actually talk",
    "start": "1389950",
    "end": "1397300"
  },
  {
    "text": "about how we're going to go about doing this so the first thing we need to do is",
    "start": "1397300",
    "end": "1403360"
  },
  {
    "text": "figure out what idiomatic representation of your problem looks like right you can",
    "start": "1403360",
    "end": "1408760"
  },
  {
    "text": "start by being simple you can talk about you know I would like maybe you know you you draw the architects will draw the",
    "start": "1408760",
    "end": "1415140"
  },
  {
    "text": "Maybachs programmers will write some pseudocode of some kind and really what",
    "start": "1415140",
    "end": "1422020"
  },
  {
    "text": "you're saying is the pseudocode is in some sense idiomatic with what I want to represent and it",
    "start": "1422020",
    "end": "1428170"
  },
  {
    "text": "hides the detail underneath another way of doing about it is actually using",
    "start": "1428170",
    "end": "1434340"
  },
  {
    "text": "proper semantics engineering now there is actually a whole slew a whole",
    "start": "1434340",
    "end": "1440380"
  },
  {
    "text": "spectrum of tools that you can use starting on the one hand which is simply expressing the grammar of what you're",
    "start": "1440380",
    "end": "1446080"
  },
  {
    "text": "trying to do in EB and F or some fairly low level tool going all the way up to",
    "start": "1446080",
    "end": "1452980"
  },
  {
    "text": "you know PL reread X and actually building out you know an evaluation context based semantics puzzle you can",
    "start": "1452980",
    "end": "1461080"
  },
  {
    "text": "do that you don't need to go all the way to that side but there's benefit in",
    "start": "1461080",
    "end": "1466150"
  },
  {
    "text": "pushing things further to the right because you'll end up getting more and more structure in what you're doing",
    "start": "1466150",
    "end": "1471940"
  },
  {
    "text": "the outcome of doing the semantics design is what is known as this an abstract syntax tree and that is",
    "start": "1471940",
    "end": "1477940"
  },
  {
    "text": "effectively a type that tells you what a valid node in this tree that represents",
    "start": "1477940",
    "end": "1483850"
  },
  {
    "text": "what you're going to represent what a valid node looks like and again there it",
    "start": "1483850",
    "end": "1489910"
  },
  {
    "text": "becomes fairly straightforward to actually use algebraic data types to",
    "start": "1489910",
    "end": "1496390"
  },
  {
    "text": "represent the tree so we'll use that in a sensible language let me show you what what I mean by that so can everybody see",
    "start": "1496390",
    "end": "1504370"
  },
  {
    "text": "this I'm going to show you the class",
    "start": "1504370",
    "end": "1512950"
  },
  {
    "text": "maybe okay now I would like okay let's",
    "start": "1512950",
    "end": "1518350"
  },
  {
    "text": "look notionally at this line right there I'm really saying there's I'm going to",
    "start": "1518350",
    "end": "1525670"
  },
  {
    "text": "define a type which is a some type I'm going to call it maybe it's a general",
    "start": "1525670",
    "end": "1530950"
  },
  {
    "text": "type of type T and it has two choices the value constructor of a constant",
    "start": "1530950",
    "end": "1536320"
  },
  {
    "text": "called done a singleton a value constructor that takes a value of type T and I'm going to tag it with some so",
    "start": "1536320",
    "end": "1543640"
  },
  {
    "text": "remember that we had the two types that we talked about and we're going to tag each of the types and then put it together the cardinality of this is",
    "start": "1543640",
    "end": "1551920"
  },
  {
    "text": "effectively the cardinality of T because every T we're going to tag with some",
    "start": "1551920",
    "end": "1557310"
  },
  {
    "text": "plus one which is this unit that tells you hey there's a value that is not of T",
    "start": "1557310",
    "end": "1563220"
  },
  {
    "text": "but it represents you know the absence of something if I had to go through and",
    "start": "1563220",
    "end": "1569860"
  },
  {
    "text": "do just this one line and go through the",
    "start": "1569860",
    "end": "1575860"
  },
  {
    "text": "process of actually implementing the the types that we talked about you know the hierarchy and so on so both this is what",
    "start": "1575860",
    "end": "1582160"
  },
  {
    "text": "it would look like there is your private constructor there's your match function there's the two value constructors here's a",
    "start": "1582160",
    "end": "1591190"
  },
  {
    "text": "container that holds the two choice types here's what none looks like here's",
    "start": "1591190",
    "end": "1597190"
  },
  {
    "text": "the value semantics peace of none which basically says if the other is none then I'm equal to it otherwise make sure that",
    "start": "1597190",
    "end": "1604090"
  },
  {
    "text": "you know I am actually the same as that because I'm comparing to Singleton's and here's the",
    "start": "1604090",
    "end": "1609160"
  },
  {
    "text": "match function that basically takes two lambdas one for man and one for some and in the case of none it says call the one",
    "start": "1609160",
    "end": "1617470"
  },
  {
    "text": "that I need to do for now right and then you do the same thing for some in here",
    "start": "1617470",
    "end": "1624150"
  },
  {
    "text": "but here you need to store a value and so the constructor is a bit complex and",
    "start": "1624150",
    "end": "1629500"
  },
  {
    "text": "then you do the same thing over here and here's the value semantics for the top-level thing that says given 2 maybes",
    "start": "1629500",
    "end": "1635860"
  },
  {
    "text": "are they the same who wants to write this on a daily basis I don't nobody",
    "start": "1635860",
    "end": "1641470"
  },
  {
    "text": "wants to the moment you start putting credit card payment and all of this other stuff you've got to keep track of",
    "start": "1641470",
    "end": "1646630"
  },
  {
    "text": "all of this thing and it just becomes difficult to do the pattern here is like",
    "start": "1646630",
    "end": "1652780"
  },
  {
    "text": "I said safe because it sealed opaque partial class that just doesn't you know",
    "start": "1652780",
    "end": "1658539"
  },
  {
    "text": "you can't do anything funky with it but to get this level of safety you really want someone else to do the work",
    "start": "1658539",
    "end": "1664390"
  },
  {
    "text": "for you you want to know machine to do the work for you so this is an example",
    "start": "1664390",
    "end": "1669789"
  },
  {
    "text": "of what syntax might look like and this is idiomatic if you saw this in c-sharp 9 you wouldn't bat an eyelid it doesn't",
    "start": "1669789",
    "end": "1677470"
  },
  {
    "text": "look like some other funky language it just has a new Union keyword and all the things inside are basically separated by",
    "start": "1677470",
    "end": "1684100"
  },
  {
    "text": "pipe it's not entirely unreasonable and the record type is exactly what you",
    "start": "1684100",
    "end": "1691240"
  },
  {
    "text": "would expect from a struct again not unreasonable so if I want to represent",
    "start": "1691240",
    "end": "1699070"
  },
  {
    "text": "this little language now I need an abstract syntax tree that represents it",
    "start": "1699070",
    "end": "1704590"
  },
  {
    "text": "so I need to have something which handles a namespace which handles what a namespace name looks like handles an",
    "start": "1704590",
    "end": "1711130"
  },
  {
    "text": "arbitrary block of members in it a union member looks like that",
    "start": "1711130",
    "end": "1717190"
  },
  {
    "text": "the record looks like that they can be generating on Jan break this method this constructor in here could be generally",
    "start": "1717190",
    "end": "1723940"
  },
  {
    "text": "cannot so it starts getting a little complicated the moment you start sitting sitting and thinking about this it",
    "start": "1723940",
    "end": "1729789"
  },
  {
    "text": "becomes a full-blown exercise in language design so we",
    "start": "1729789",
    "end": "1736080"
  },
  {
    "text": "represent the ast and in about 50 lines of a webshop",
    "start": "1736080",
    "end": "1741160"
  },
  {
    "text": "because the ast is actually builds on top of things they start with the bottom",
    "start": "1741160",
    "end": "1746210"
  },
  {
    "text": "and work backwards you got namespace which has a name which is a kind of dotted name namespace",
    "start": "1746210",
    "end": "1752030"
  },
  {
    "text": "members have a list of namespace member a namespace member is one of these three",
    "start": "1752030",
    "end": "1757130"
  },
  {
    "text": "types a using has a dotted name associated with it a record a vaster and so on and so forth then you build the",
    "start": "1757130",
    "end": "1763429"
  },
  {
    "text": "whole thing up all the way to the top and you finally come up with I know what a symbol is and symbol is just a bit of",
    "start": "1763429",
    "end": "1769130"
  },
  {
    "text": "string right so this is the most basic piece in this and we're composing it all",
    "start": "1769130",
    "end": "1774350"
  },
  {
    "text": "the way down and we can build up an ast with it now if I create an object of",
    "start": "1774350",
    "end": "1780169"
  },
  {
    "text": "type namespace will I get a valid namespace you bet I will",
    "start": "1780169",
    "end": "1786110"
  },
  {
    "text": "there is no concept of giving me a non using with a missing dotted name you",
    "start": "1786110",
    "end": "1793130"
  },
  {
    "text": "can't do that it's just not possible to do it because if you say that the namespace has a name space member the",
    "start": "1793130",
    "end": "1799429"
  },
  {
    "text": "namespace member is using it better have a dotted name or method inside and there's no way to construct one of these",
    "start": "1799429",
    "end": "1806450"
  },
  {
    "text": "things in an invalid way so now that you",
    "start": "1806450",
    "end": "1811580"
  },
  {
    "text": "have this thing and you have this thing you need to find a way from go from here to here and this interesting piece of",
    "start": "1811580",
    "end": "1820880"
  },
  {
    "text": "technology is called a puzzle now I'm not going to go down and get into the",
    "start": "1820880",
    "end": "1828110"
  },
  {
    "text": "nitty gritties or how to use the puzzle there's several very good references out",
    "start": "1828110",
    "end": "1835340"
  },
  {
    "text": "there Scot lation has one filter:alpha it has 1f POSIX just go look for it",
    "start": "1835340",
    "end": "1840830"
  },
  {
    "text": "you'll find the nitty-gritty details on how to get into that the purpose of this talk is to say here's all the pieces",
    "start": "1840830",
    "end": "1847309"
  },
  {
    "text": "that you need in order to make this big picture happen so and of course I'll answer questions but I'll give you an",
    "start": "1847309",
    "end": "1852919"
  },
  {
    "text": "idea what that looks like right so positive Combinator libraries like eff",
    "start": "1852919",
    "end": "1858200"
  },
  {
    "text": "posit do a very succinct beautifully clean job of actually representing",
    "start": "1858200",
    "end": "1863600"
  },
  {
    "text": "pieces of code that transform text into ast nodes they look something like this",
    "start": "1863600",
    "end": "1872169"
  },
  {
    "text": "which I will raise my mouse so if you",
    "start": "1874870",
    "end": "1880460"
  },
  {
    "text": "think about this forget about the the prelude which is there just to make the rest of it not look so red but a symbol",
    "start": "1880460",
    "end": "1887149"
  },
  {
    "text": "is basically a an identifier that may be surrounded by spaces that's what we",
    "start": "1887149",
    "end": "1893659"
  },
  {
    "text": "defined the symbol as when we create the ASD and this function called symbol now",
    "start": "1893659",
    "end": "1898970"
  },
  {
    "text": "basically we'll take a stream of information a stream of text and return",
    "start": "1898970",
    "end": "1906289"
  },
  {
    "text": "to you the first bit of it if it matches a symbol similarly dotted name says get me a",
    "start": "1906289",
    "end": "1913610"
  },
  {
    "text": "bunch of identifiers x' separated by dots and make sure there is at least one of them because the dotted identifier",
    "start": "1913610",
    "end": "1920870"
  },
  {
    "text": "might actually come in useful somewhere and we go all the way down you know we have something that says you know here's",
    "start": "1920870",
    "end": "1926899"
  },
  {
    "text": "a list of symbols in the type argument so for example you have the type",
    "start": "1926899",
    "end": "1932149"
  },
  {
    "text": "argument is very different from the type parameter list of an instantiation so if you look at if you look at this thing if",
    "start": "1932149",
    "end": "1943789"
  },
  {
    "text": "you look at this thing you can only get type arguments over there you can't put system dot enumerable dot list in there",
    "start": "1943789",
    "end": "1950990"
  },
  {
    "text": "you can't do that it's a type argument on this side so this better be a symbol",
    "start": "1950990",
    "end": "1956330"
  },
  {
    "text": "it should be a list of symbols potentially and that's what this says so",
    "start": "1956330",
    "end": "1961399"
  },
  {
    "text": "give me a type declaration is basically the type argument has a bunch of symbols separated by commas that have a point on",
    "start": "1961399",
    "end": "1968240"
  },
  {
    "text": "either side of it and then that should be followed by basically a symbol",
    "start": "1968240",
    "end": "1973639"
  },
  {
    "text": "followed by optionally type hogs will give you a type declaration and so on and so forth so we go down to type",
    "start": "1973639",
    "end": "1979250"
  },
  {
    "text": "reference and then we figure out a whole bunch of things and this is not quite 50 lines but 100 lines of code and we'll",
    "start": "1979250",
    "end": "1984799"
  },
  {
    "text": "actually figure out how to handle hole all the way down to name space again the",
    "start": "1984799",
    "end": "1990950"
  },
  {
    "text": "brevity of this should astonish you it doesn't take much to actually do the heavy-duty work that we're talking about",
    "start": "1990950",
    "end": "1997269"
  },
  {
    "text": "the tools are there there's just a whole slew of them that you just may be aware",
    "start": "1997269",
    "end": "2002409"
  },
  {
    "text": "of and then movement have that under your belt this becomes a valid alternative to actually hand",
    "start": "2002409",
    "end": "2009609"
  },
  {
    "text": "coding a bunch of stuff right how are we on time 35 minutes okay",
    "start": "2009609",
    "end": "2017158"
  },
  {
    "text": "clearly writing now I lied when I told you the DST wouldn't represent invalid",
    "start": "2017940",
    "end": "2023289"
  },
  {
    "text": "values somewhere along the line you can pass in an empty string is it okay to",
    "start": "2023289",
    "end": "2030789"
  },
  {
    "text": "have a namespace with an empty string as a name well the symbol regex may give you an",
    "start": "2030789",
    "end": "2037359"
  },
  {
    "text": "empty string and what am I going to do with it I need to find some way of actually validating it so in many cases",
    "start": "2037359",
    "end": "2044339"
  },
  {
    "text": "when you're starting to write more serious languages many cases you'll take",
    "start": "2044339",
    "end": "2049539"
  },
  {
    "text": "the ast that came from the positive which would have actually gone through a whole bunch of syntactic types yeah you know a syntactic checking and if you add",
    "start": "2049539",
    "end": "2056980"
  },
  {
    "text": "a simple table to it you can actually do type checking type of stuff so you can build a C+ if you want using this",
    "start": "2056980",
    "end": "2062079"
  },
  {
    "text": "mechanism all right and have a symbol table and pass it around make sure that you're only referring to things you've",
    "start": "2062079",
    "end": "2067569"
  },
  {
    "text": "already declared and all that kind of stuff but at the end of the day you may have some semantic rules that you need",
    "start": "2067569",
    "end": "2073658"
  },
  {
    "text": "to apply so usually there's a second pass in this whole thing where you've given a tree and you write a visitor",
    "start": "2073659",
    "end": "2080230"
  },
  {
    "text": "pattern kind of thing that takes that tree and returns another tree and this",
    "start": "2080230",
    "end": "2086169"
  },
  {
    "text": "the result may have nodes missing in it because you've removed them or it may",
    "start": "2086169",
    "end": "2091240"
  },
  {
    "text": "have nodes injected in it or you may replace a given node with two other nodes or whatever it is that you want to",
    "start": "2091240",
    "end": "2096309"
  },
  {
    "text": "do the rewriting portion of this is actually one of the phases in this whole sequence now because we're writing the",
    "start": "2096309",
    "end": "2105039"
  },
  {
    "text": "stuff in F sharp we have some interesting ways of composing these",
    "start": "2105039",
    "end": "2110589"
  },
  {
    "text": "building blocks I will use the word monad only once just because I have a",
    "start": "2110589",
    "end": "2117400"
  },
  {
    "text": "reputation for being I have the propensity to use it evidently so I'm",
    "start": "2117400",
    "end": "2123400"
  },
  {
    "text": "going to keep the reputation in life so I did say monadic composition of these",
    "start": "2123400",
    "end": "2128589"
  },
  {
    "text": "individual blocks and that's actually how you glue the pieces together so you have a positive that gives you a monadic",
    "start": "2128589",
    "end": "2134980"
  },
  {
    "text": "value of an ast and then you have rewriters to take monadic values AST and then give you more of those",
    "start": "2134980",
    "end": "2141240"
  },
  {
    "text": "until at the end of the day you come up to the last stage now how many of you've",
    "start": "2141240",
    "end": "2150819"
  },
  {
    "text": "used Roslin before Joe of course and",
    "start": "2150819",
    "end": "2156310"
  },
  {
    "text": "okay so we have one other person so brave person who's actually used Roslin have used quote dom has anyone use code",
    "start": "2156310",
    "end": "2162760"
  },
  {
    "text": "dom back in the day okay so code Roslin is basically Microsoft compiler services it has a full-blown",
    "start": "2162760",
    "end": "2170319"
  },
  {
    "text": "positive for c-sharp and so on and so forth in the front it also has a code generation piece which is very similar",
    "start": "2170319",
    "end": "2176890"
  },
  {
    "text": "to code the effectively replaces code dog so how did how do you think Rosslyn works well Roslin has its own EST right",
    "start": "2176890",
    "end": "2183430"
  },
  {
    "text": "it's good text it's going to take it it's gonna look like c-sharp the text looks like c-sharp it's going to create",
    "start": "2183430",
    "end": "2188470"
  },
  {
    "text": "an est that looks like the the meaning of the seizure program it's going to do a whole bunch of rewriting there so you",
    "start": "2188470",
    "end": "2194800"
  },
  {
    "text": "know all your refactorings and all the other stuff that can happen happen in the in the ast rewrite and then they",
    "start": "2194800",
    "end": "2201790"
  },
  {
    "text": "take that ast and they actually generate seizure code with it that's frozen Allah already knows how to do that if you give",
    "start": "2201790",
    "end": "2208150"
  },
  {
    "text": "it an ast that is valid now we want to actually cheat Roslyn now we say yeah",
    "start": "2208150",
    "end": "2215230"
  },
  {
    "text": "I'll give you a valid AST oh you well it'll trial Roslin AST you go off and do",
    "start": "2215230",
    "end": "2220930"
  },
  {
    "text": "the code generation for me and so the last transformation that you do is write",
    "start": "2220930",
    "end": "2227530"
  },
  {
    "text": "a transformer that takes your AST instance and converts it into a Roslin AST instance and then you let draws and",
    "start": "2227530",
    "end": "2235690"
  },
  {
    "text": "deal with the rest of it and that's kind of how we do this stuff but that's",
    "start": "2235690",
    "end": "2241089"
  },
  {
    "text": "actually kind of how do you say easier said than done let me show you what the Roselyn st",
    "start": "2241089",
    "end": "2246280"
  },
  {
    "text": "looks like so I'm going to again cheat I",
    "start": "2246280",
    "end": "2252960"
  },
  {
    "text": "want you to pay close attention to this class so starting in line 23 I'm going",
    "start": "2252960",
    "end": "2259810"
  },
  {
    "text": "down to line 39 pay close attention to that because the tree I'm about to show",
    "start": "2259810",
    "end": "2265900"
  },
  {
    "text": "you is only for that class now the whole thing just this bit right",
    "start": "2265900",
    "end": "2272710"
  },
  {
    "text": "there's a handy tool out there that actually allows you to generate the Roselyn equivalent of one of these",
    "start": "2272710",
    "end": "2279230"
  },
  {
    "text": "things and it actually buffs if you give it the whole class so I'm just asking",
    "start": "2279230",
    "end": "2287270"
  },
  {
    "text": "you to look at this so it's got a constructor with an argument it sets a property there's a private property there's a match function",
    "start": "2287270",
    "end": "2293270"
  },
  {
    "text": "there's a bunch of overrides that even you had there I'm asking you to not even",
    "start": "2293270",
    "end": "2298760"
  },
  {
    "text": "bother everything just ignore just let's look at just that class if I did that",
    "start": "2298760",
    "end": "2306580"
  },
  {
    "text": "you see that thing over there you're looking at that bit this is what",
    "start": "2307450",
    "end": "2314570"
  },
  {
    "text": "Rosaleen ast looks like anyone think that it's easier to read boilerplate",
    "start": "2314570",
    "end": "2320270"
  },
  {
    "text": "code than the Roslyn ast because I actually think that right you just shot yourself in the foot by saying I'm going",
    "start": "2320270",
    "end": "2326780"
  },
  {
    "text": "to build this thing and this thing is not even human readable I can at least write the boilerplate code and look at",
    "start": "2326780",
    "end": "2333170"
  },
  {
    "text": "it and have somebody code review it and make sure that it's actually doing I think anyone want to code review this",
    "start": "2333170",
    "end": "2340150"
  },
  {
    "text": "right so how are we going to create this thing from the ast that we had we had",
    "start": "2340150",
    "end": "2346220"
  },
  {
    "text": "nice clean ast that said here's a namespace and it's got a union type and it's got the Union type has a union type",
    "start": "2346220",
    "end": "2352790"
  },
  {
    "text": "member of you know something that takes the argument E and just that one node is",
    "start": "2352790",
    "end": "2359930"
  },
  {
    "text": "going to generate this kind of thing how am I going to actually get this piece",
    "start": "2359930",
    "end": "2364940"
  },
  {
    "text": "out and the answer to that is another DSL that we clever cleverly wrote a long",
    "start": "2364940",
    "end": "2373640"
  },
  {
    "text": "time ago using sort of F sharp black magic okay now sharp allows you to write",
    "start": "2373640",
    "end": "2380180"
  },
  {
    "text": "functions that have any number of arguments and you don't have this ceremony of putting brackets and commas",
    "start": "2380180",
    "end": "2387920"
  },
  {
    "text": "and things like that inside so because everything in F sharp is just an implicit list of arguments and you can",
    "start": "2387920",
    "end": "2396440"
  },
  {
    "text": "call things whatever you want we can actually create complex looking",
    "start": "2396440",
    "end": "2401750"
  },
  {
    "text": "functions with the very complex argument and make them look like the code we want to generate i'll give you an idea what",
    "start": "2401750",
    "end": "2408650"
  },
  {
    "text": "I'm talking about here so I could write a function called class that looks like",
    "start": "2408650",
    "end": "2414469"
  },
  {
    "text": "that which takes one argument called class name followed by some white noise",
    "start": "2414469",
    "end": "2420019"
  },
  {
    "text": "argument which I'm never going to use followed by a list of potentially type arguments another white noise : and then",
    "start": "2420019",
    "end": "2429890"
  },
  {
    "text": "something that tells you about the base classes and then a list of interfaces that I implement followed by a list of",
    "start": "2429890",
    "end": "2436400"
  },
  {
    "text": "modifiers followed by something that looks like a block and in that block I",
    "start": "2436400",
    "end": "2441920"
  },
  {
    "text": "will give you each of the statements that I want to put inside now if you look at this code it kind of looks like",
    "start": "2441920",
    "end": "2449449"
  },
  {
    "text": "what we want we want to create a class right I mean this is what we want to create we would create this class right",
    "start": "2449449",
    "end": "2455509"
  },
  {
    "text": "here okay a public partial class some colon maybe T so class this would be",
    "start": "2455509",
    "end": "2463880"
  },
  {
    "text": "maybe of T and then it has a base class",
    "start": "2463880",
    "end": "2470420"
  },
  {
    "text": "which is the other maybe of T and it's a public washroom class and it's got a",
    "start": "2470420",
    "end": "2476509"
  },
  {
    "text": "constructor inside it which has the same kind of principle behind it and it has",
    "start": "2476509",
    "end": "2481579"
  },
  {
    "text": "an override for equals which has an arrow method so you put a fat arrow in there input in equality expressions oh",
    "start": "2481579",
    "end": "2486829"
  },
  {
    "text": "and so forth this is much easier to write than it is to actually compose the a Steve from the",
    "start": "2486829",
    "end": "2492949"
  },
  {
    "text": "transform and this library is available on github so you can now go and get this",
    "start": "2492949",
    "end": "2498229"
  },
  {
    "text": "library down and it's got its funky set of functions in there and you can go off",
    "start": "2498229",
    "end": "2504170"
  },
  {
    "text": "and actually write the code that looks like that I'm going to switch to visual studio now and I'm going to show you how",
    "start": "2504170",
    "end": "2511489"
  },
  {
    "text": "the real code actually looks and have I lost anyone yeah I'll give you a second",
    "start": "2511489",
    "end": "2525439"
  },
  {
    "text": "give me give me a half a tick and I'll show you the exact code all right right",
    "start": "2525439",
    "end": "2533180"
  },
  {
    "text": "so it's a good question so the question that you asked was what does the",
    "start": "2533180",
    "end": "2539869"
  },
  {
    "text": "structure that function look like and why would I use it so in some sense this is what I talked about so here's our ASD",
    "start": "2539869",
    "end": "2546230"
  },
  {
    "text": "here's the posit that I showed you right and this time you know it's all compiling so it's you're doing the right",
    "start": "2546230",
    "end": "2551660"
  },
  {
    "text": "thing and here is the Declaration builder for the Union type class and in",
    "start": "2551660",
    "end": "2558980"
  },
  {
    "text": "this case what I'm actually doing is I'm going to turn around and say hey given a union type member I want to create the",
    "start": "2558980",
    "end": "2566450"
  },
  {
    "text": "constructor formatter right the Union type member will give me a name the",
    "start": "2566450",
    "end": "2574190"
  },
  {
    "text": "member name of the type and that's going to be useful if the Union type member has a type then I'm going to put a set",
    "start": "2574190",
    "end": "2582619"
  },
  {
    "text": "of arguments that says I need to have an argument named value of that type",
    "start": "2582619",
    "end": "2587960"
  },
  {
    "text": "otherwise I don't so if I go back to looking at this thing we look at both",
    "start": "2587960",
    "end": "2597200"
  },
  {
    "text": "the cases here there's none and some in this case we",
    "start": "2597200",
    "end": "2602569"
  },
  {
    "text": "don't even have to create a constructor because it's a singleton in the other",
    "start": "2602569",
    "end": "2608150"
  },
  {
    "text": "case we want to put a constructor in there as long as there is a type there's a type argument and in some sense that's",
    "start": "2608150",
    "end": "2614270"
  },
  {
    "text": "what this is",
    "start": "2614270",
    "end": "2617049"
  },
  {
    "text": "but what does this look like this basically says hey I'm going to create a tuple that looks like a tuple to you",
    "start": "2623300",
    "end": "2630880"
  },
  {
    "text": "right and it's good to have these two things in it which is the name of the variable and stripe so as soon as I",
    "start": "2630880",
    "end": "2638060"
  },
  {
    "text": "create a tuple it knows that that's going to be the value that I want outside and what is the statement inside",
    "start": "2638060",
    "end": "2644930"
  },
  {
    "text": "is basically please set the value property the big value identify that with a little identifier value and this",
    "start": "2644930",
    "end": "2653210"
  },
  {
    "text": "funky-looking operators effectively the assignment inside our second DSL so",
    "start": "2653210",
    "end": "2660320"
  },
  {
    "text": "we're using the F sharp DSL the Roselyn DSL to allow us to create expressions in",
    "start": "2660320",
    "end": "2665600"
  },
  {
    "text": "a nice clean way so that we don't have to deal with Rozlyn at all all the Roselyn member declaration",
    "start": "2665600",
    "end": "2672380"
  },
  {
    "text": "garbage that you need to put in from this piece all of these member explicit",
    "start": "2672380",
    "end": "2683240"
  },
  {
    "text": "expressions and with the expression body and so on and so forth all of these things which form part of the Rosalind",
    "start": "2683240",
    "end": "2689000"
  },
  {
    "text": "language that creates the Rozlyn ast for you is actually hidden away inside",
    "start": "2689000",
    "end": "2695900"
  },
  {
    "text": "things like this so this dsl is actually available as I said it's available on",
    "start": "2695900",
    "end": "2701540"
  },
  {
    "text": "github so it now means that you can write code that looks like this so here is given my thing you know here's what",
    "start": "2701540",
    "end": "2708590"
  },
  {
    "text": "the constructor looks like I have the assignment set up and that's based on whether I had a type constructor or not",
    "start": "2708590",
    "end": "2714410"
  },
  {
    "text": "and then in the same way I have a value property that only does something when",
    "start": "2714410",
    "end": "2719870"
  },
  {
    "text": "you have a so here's a they get a singleton or a value and then I have a",
    "start": "2719870",
    "end": "2725420"
  },
  {
    "text": "type reference to tell me hey you know that's a value of that type or just a",
    "start": "2725420",
    "end": "2730880"
  },
  {
    "text": "singleton value similarly the match function over it does the right thing so all of this starts to look similar to",
    "start": "2730880",
    "end": "2737090"
  },
  {
    "text": "the code that you want to write in the first place and you can test each piece individually and then it will generate a",
    "start": "2737090",
    "end": "2742460"
  },
  {
    "text": "piece of string that looks like the thing that you want and you can make sure that hey okay it's it's matching",
    "start": "2742460",
    "end": "2747650"
  },
  {
    "text": "what I want and that that passes my unit test so I am now generating the right thing compose the right set of builders",
    "start": "2747650",
    "end": "2754520"
  },
  {
    "text": "into this game if you like then all of a sudden you have this concept of the top level function taking",
    "start": "2754520",
    "end": "2761640"
  },
  {
    "text": "a whole bunch of these creators to give you this so you know make sure that I",
    "start": "2761640",
    "end": "2767220"
  },
  {
    "text": "have the base value set up make sure I have private constructor match function extract the access members themselves",
    "start": "2767220",
    "end": "2773809"
  },
  {
    "text": "any wrapper type that you need inside the equatable equals so on so forth each of these things is now a method and that",
    "start": "2773809",
    "end": "2781410"
  },
  {
    "text": "goes into this thing so I take class class name and then inside that you have",
    "start": "2781410",
    "end": "2787019"
  },
  {
    "text": "the members so this is a knot cleaner in terms of being able to build up the structure of the thing that you want",
    "start": "2787019",
    "end": "2793079"
  },
  {
    "text": "code generate rather than having to navigate through the Roselyn muck somebody else has already done the same",
    "start": "2793079",
    "end": "2799079"
  },
  {
    "text": "thing for you already in that library so you can use that and get this thing done right so are we",
    "start": "2799079",
    "end": "2807539"
  },
  {
    "text": "doing on time for you seven okay right so does everybody see how you can",
    "start": "2807539",
    "end": "2817079"
  },
  {
    "text": "actually generate the Roselyn ast from this thing using these transforms because in effect this is the last pile",
    "start": "2817079",
    "end": "2823019"
  },
  {
    "text": "of transforms that take your ast which is of this kind so this thing basically",
    "start": "2823019",
    "end": "2833759"
  },
  {
    "text": "takes a union type and gives me a member",
    "start": "2833759",
    "end": "2841440"
  },
  {
    "text": "declaration syntax right and these are",
    "start": "2841440",
    "end": "2846749"
  },
  {
    "text": "individual composable so rather than get this huge morass of things that you had in the past to get this whole tree and",
    "start": "2846749",
    "end": "2853410"
  },
  {
    "text": "then do tree splicing and all kinds of other stuff you actually build the thing up from the inside out by actually using",
    "start": "2853410",
    "end": "2859140"
  },
  {
    "text": "this functional composition mechanism and you'll create a bunch of these functions so this one goes from union",
    "start": "2859140",
    "end": "2866400"
  },
  {
    "text": "type to remember declaration there'll be another one that does records there's the namespace itself which if",
    "start": "2866400",
    "end": "2874259"
  },
  {
    "text": "you think about it has you know I want to put in some warnings I want to use",
    "start": "2874259",
    "end": "2879569"
  },
  {
    "text": "the usings in there to make sure that the right things he used so because I might actually reference a dotted type",
    "start": "2879569",
    "end": "2885900"
  },
  {
    "text": "in the class I won't have a using line put in there that's going to get generated correctly and then you have namespace",
    "start": "2885900",
    "end": "2892300"
  },
  {
    "text": "on apply and then you have this thing so it turns out that it's actually fairly easy to start putting these things",
    "start": "2892300",
    "end": "2900130"
  },
  {
    "text": "together because you're building them up piece by piece and then composing them into larger and larger blocks but at the",
    "start": "2900130",
    "end": "2906880"
  },
  {
    "text": "top level you'll end up getting something that turns around and says",
    "start": "2906880",
    "end": "2911819"
  },
  {
    "text": "give me one of the names namespace which is your ast on the left and I will give",
    "start": "2913560",
    "end": "2919990"
  },
  {
    "text": "you back a namespace declaration syntax which is the Roslyn ast on the right and",
    "start": "2919990",
    "end": "2925120"
  },
  {
    "text": "then you can take that and give it to Roslyn and say here's a valid tree go off and generate code for it",
    "start": "2925120",
    "end": "2931000"
  },
  {
    "text": "and it'll do that so that's what the code generator does actually so it basically does this given a file",
    "start": "2931000",
    "end": "2939370"
  },
  {
    "text": "open the input file open our foot file read though the text pause the namespace from the text and then go from that",
    "start": "2939370",
    "end": "2947260"
  },
  {
    "text": "namespace to a declaration and then write all the output in the output you're done so in effect we built a",
    "start": "2947260",
    "end": "2954820"
  },
  {
    "text": "little compiler for a little language using all the various stages of a proper",
    "start": "2954820",
    "end": "2960520"
  },
  {
    "text": "compiler and you can build an X and executable out of this which you can run on the command line but who wants to do",
    "start": "2960520",
    "end": "2966850"
  },
  {
    "text": "that let me actually come back to that",
    "start": "2966850",
    "end": "2972340"
  },
  {
    "text": "in one second actually I want to go back",
    "start": "2972340",
    "end": "2983100"
  },
  {
    "text": "so visual studio now gives us a very cool set of extension mechanisms for",
    "start": "2983100",
    "end": "2988840"
  },
  {
    "text": "doing this has anyone here programmed in asp.net WPF right so you guys know the",
    "start": "2988840",
    "end": "2997930"
  },
  {
    "text": "idea of the code behind file right what is that code behind whether that code",
    "start": "2997930",
    "end": "3004020"
  },
  {
    "text": "behind file is the code representation of the intent that you declared in whatever markup that you had up in front",
    "start": "3004020",
    "end": "3011180"
  },
  {
    "text": "right why is that any different from what I did just now I created some",
    "start": "3011180",
    "end": "3016860"
  },
  {
    "text": "intent in this Union thing why can't I have a code-behind file that",
    "start": "3016860",
    "end": "3022609"
  },
  {
    "text": "actually has the same code and speak at the back and then I'm done I can generate break points and all kinds of",
    "start": "3022609",
    "end": "3028310"
  },
  {
    "text": "other stuff look at the code so it turns out there's a very cool way of doing this you take this instead of creating",
    "start": "3028310",
    "end": "3035630"
  },
  {
    "text": "an executable like I showed you you create what is known as a single file generator itself is a little bit of",
    "start": "3035630",
    "end": "3041840"
  },
  {
    "text": "black magic because it's not well documented but it's roughly been the same in terms of its ethos since 2003",
    "start": "3041840",
    "end": "3048800"
  },
  {
    "text": "it's the only place I still use com in Microsoft in 2017 right it has not",
    "start": "3048800",
    "end": "3056840"
  },
  {
    "text": "changed at all there is actually a place we do a query interface for an interface and then you do a marshal whatever on it",
    "start": "3056840",
    "end": "3068440"
  },
  {
    "text": "so the single file generator approach and the v6 packaging is a little bit of",
    "start": "3068440",
    "end": "3073940"
  },
  {
    "text": "black magic and I'm happy to show you the code that does it it's extraordinary simple you can literally take the code that's in my",
    "start": "3073940",
    "end": "3079760"
  },
  {
    "text": "project and replace it with the function that you have and what it is is every",
    "start": "3079760",
    "end": "3085130"
  },
  {
    "text": "time you save the the top-level file it calls the tool gives it a bunch of text",
    "start": "3085130",
    "end": "3091550"
  },
  {
    "text": "and then expects to get a bunch of text back and if anyone attended Joe's talk",
    "start": "3091550",
    "end": "3097850"
  },
  {
    "text": "yesterday about how to get two processes to actually share memory it actually",
    "start": "3097850",
    "end": "3103070"
  },
  {
    "text": "uses shared memory to do precisely that that's exactly what it does so it's a very old fashioned comm inter-process",
    "start": "3103070",
    "end": "3109280"
  },
  {
    "text": "communication kind of mechanism but it works it works beautifully it has worked since 2003 continues to work today you",
    "start": "3109280",
    "end": "3117410"
  },
  {
    "text": "can provide even language support like code coloring and so on and so forth which I won't get into right now and if",
    "start": "3117410",
    "end": "3124460"
  },
  {
    "text": "you actually generate enough information why you generate your c-sharp code you can actually put breakpoints now in our",
    "start": "3124460",
    "end": "3129980"
  },
  {
    "text": "case we're only defining a type so there's nothing to really put a breakpoint on but you can quite easily see that if you were representing",
    "start": "3129980",
    "end": "3136550"
  },
  {
    "text": "sequences of operations you might want to step through the top-level language rather than stepping through the back",
    "start": "3136550",
    "end": "3142070"
  },
  {
    "text": "end of it and you can actually do that very straightforward way of doing it through this through this mechanism both",
    "start": "3142070",
    "end": "3148940"
  },
  {
    "text": "of which I'm not going to talk about right now so let me how are we doing on time ten",
    "start": "3148940",
    "end": "3154500"
  },
  {
    "text": "minutes excellent right yeah it's going to show",
    "start": "3154500",
    "end": "3163470"
  },
  {
    "text": "you the v6 code in the v6 code this is what the code generator looks like it is",
    "start": "3163470",
    "end": "3170670"
  },
  {
    "text": "ugly as sin it might have been less ugly if I done it the F sharp but then again",
    "start": "3170670",
    "end": "3176520"
  },
  {
    "text": "you wouldn't have you'd have it this should horrify you and it in and if that is the intent let's just put it",
    "start": "3176520",
    "end": "3183120"
  },
  {
    "text": "that way so we have a come visible true you have to create for yourself a new",
    "start": "3183120",
    "end": "3188490"
  },
  {
    "text": "grid and you have to register yourself a different type for the generator and has",
    "start": "3188490",
    "end": "3194940"
  },
  {
    "text": "to implement i via single file generator and what it does I did not lie we",
    "start": "3194940",
    "end": "3200850"
  },
  {
    "text": "actually do get I unknown for object and query interface and release yeah but",
    "start": "3200850",
    "end": "3207330"
  },
  {
    "text": "here's the magic you get the byte string that gives you the input on the on the",
    "start": "3207330",
    "end": "3212460"
  },
  {
    "text": "input it gives you a string and you generate code for the text and it generates code which you then put into a",
    "start": "3212460",
    "end": "3219510"
  },
  {
    "text": "byte array and send back Yuko I like to make sure that you have seen some shared memory back and forth literally the only",
    "start": "3219510",
    "end": "3226620"
  },
  {
    "text": "thing you will change is the entire file when you create your own little language is this one line or this one but that's",
    "start": "3226620",
    "end": "3233850"
  },
  {
    "text": "it so everything in here the black magics being sold out for you just",
    "start": "3233850",
    "end": "3238980"
  },
  {
    "text": "change that one function and you're done you can it's text in text out and it'll make sure that the generated file is",
    "start": "3238980",
    "end": "3245670"
  },
  {
    "text": "product and then they have a funny way of actually making this code thing available to anyone you wants it you",
    "start": "3245670",
    "end": "3252690"
  },
  {
    "text": "have to create a v6 project and go through some mumbo jumbo to do that again there's references out there that",
    "start": "3252690",
    "end": "3258360"
  },
  {
    "text": "allow you to pack is the thing properly and then you'll get sent off to go and",
    "start": "3258360",
    "end": "3263430"
  },
  {
    "text": "put things on visual studio marketplace so let me see actually do that",
    "start": "3263430",
    "end": "3271970"
  },
  {
    "text": "I think I killed the browser but there's a video stream marketplace that you can",
    "start": "3274299",
    "end": "3280599"
  },
  {
    "text": "actually publish your your stuff on and then that'll come up and you can I'll",
    "start": "3280599",
    "end": "3286029"
  },
  {
    "text": "show you how to do that so there's a little bit of extra little effort you",
    "start": "3286029",
    "end": "3292539"
  },
  {
    "text": "have to put but it ultimately turns around and gives you a very nice experience developer experience I'm",
    "start": "3292539",
    "end": "3299859"
  },
  {
    "text": "going to show you the developer experience I'm sorry for for fumbling around like this but I'm losing my mouse",
    "start": "3299859",
    "end": "3305199"
  },
  {
    "text": "I'm so used to not having so I'm going to take a look at this I'm gonna look at",
    "start": "3305199",
    "end": "3314170"
  },
  {
    "text": "the test classes here and we'll take a look at this reference class you see",
    "start": "3314170",
    "end": "3319689"
  },
  {
    "text": "here and I've created this maybe CS Union thing which has a bunch of union",
    "start": "3319689",
    "end": "3324880"
  },
  {
    "text": "types in there and I'm going to remove the code generator right and what this",
    "start": "3324880",
    "end": "3333160"
  },
  {
    "text": "can when you're in a co-op project and you create one of these files you can associate it with a custom tool and this",
    "start": "3333160",
    "end": "3340809"
  },
  {
    "text": "is that custom tool that you registered in in the comm database and when you install a package you'll go in here to",
    "start": "3340809",
    "end": "3348269"
  },
  {
    "text": "the extensions and in the visual studio extensions you can actually get from the",
    "start": "3348269",
    "end": "3353920"
  },
  {
    "text": "visual studio marketplace so the whole process is a little bit correlated but",
    "start": "3353920",
    "end": "3359109"
  },
  {
    "text": "this is how we package it for everybody to use you write this tool you put it into v6 you upload the v6 to the",
    "start": "3359109",
    "end": "3365349"
  },
  {
    "text": "marketplace and then use extensions updates to pull the thing back down and now it's available to everyone the dev",
    "start": "3365349",
    "end": "3372039"
  },
  {
    "text": "experience is easier but this is how you actually publish the thing out and then you have this Union thing which I've",
    "start": "3372039",
    "end": "3378039"
  },
  {
    "text": "created and it has documentation and so on and so forth and once you do that",
    "start": "3378039",
    "end": "3385420"
  },
  {
    "text": "this becomes available the custom tool interface becomes available you can",
    "start": "3385420",
    "end": "3390429"
  },
  {
    "text": "stick that in here and let's say that I go off and actually just make a change and save the file and voila",
    "start": "3390429",
    "end": "3398259"
  },
  {
    "text": "it creates the code-behind for you and this code behind should look familiar this is exactly and now because it's",
    "start": "3398259",
    "end": "3407019"
  },
  {
    "text": "partially you can actually create add adjuncts to it and do all kinds of cool stuff so if you want to",
    "start": "3407019",
    "end": "3413260"
  },
  {
    "text": "actually figure out if you want someone to tell you if you want me to tell you how to turn this maybe type into a",
    "start": "3413260",
    "end": "3418960"
  },
  {
    "text": "functor or into a more ad I'm happy to show you in fact you can actually get it",
    "start": "3418960",
    "end": "3424720"
  },
  {
    "text": "so that you can do link based syntax on one that maybe now it's very trivial to do it because I generated a partial and",
    "start": "3424720",
    "end": "3431859"
  },
  {
    "text": "then write another piece of partial code and I'm done so it's a very powerful way of actually building extensible code and",
    "start": "3431859",
    "end": "3439000"
  },
  {
    "text": "this is how it works alright so I'm going to summarize now on what are the",
    "start": "3439000",
    "end": "3444970"
  },
  {
    "text": "steps that you need looks like a long list design the semantics you need to",
    "start": "3444970",
    "end": "3452530"
  },
  {
    "text": "basically make sure that you have the language grammar sorted out properly think about the edge cases try and use",
    "start": "3452530",
    "end": "3459880"
  },
  {
    "text": "powerful tools they'll help you and then once you do that make sure you get the AST that that is equivalent to that",
    "start": "3459880",
    "end": "3467430"
  },
  {
    "text": "design reasonable syntax which actually gives you the the AST once you pause it",
    "start": "3467430",
    "end": "3472750"
  },
  {
    "text": "write a parser for it validate the thing using some tree rewriting stuff write the code generator",
    "start": "3472750",
    "end": "3479380"
  },
  {
    "text": "to convert your ast into a Roslyn ast and then set it up so that you invoke",
    "start": "3479380",
    "end": "3485470"
  },
  {
    "text": "the Roslyn code generator and put the visuals who your plumbing in there and pack is the whole thing into v6 and",
    "start": "3485470",
    "end": "3490960"
  },
  {
    "text": "babji don't go it done so even now extended c-sharp now anyone who uses this effectively extends it c-sharp to",
    "start": "3490960",
    "end": "3498640"
  },
  {
    "text": "have union types and product types without any change in the developer",
    "start": "3498640",
    "end": "3504579"
  },
  {
    "text": "experience so instead of creating the 300 lines of boilerplate you write the",
    "start": "3504579",
    "end": "3509770"
  },
  {
    "text": "one line of top-level code someone does the generation for you and it's all idiomatic seizure up after that so",
    "start": "3509770",
    "end": "3516520"
  },
  {
    "text": "you're not doing anything funky there's no background like you know binary doing generation and all kinds of stuff you",
    "start": "3516520",
    "end": "3521710"
  },
  {
    "text": "can go back and put breakpoints look at the code you know satisfy yourself with this what's doing so in terms of",
    "start": "3521710",
    "end": "3527740"
  },
  {
    "text": "actually even bringing the concept of Union types itself into the language for",
    "start": "3527740",
    "end": "3533289"
  },
  {
    "text": "you to use as a first generation type of thing the key takeaways for c-sharp",
    "start": "3533289",
    "end": "3539410"
  },
  {
    "text": "programmers is effectively this use ADT's they'll make your life easier right and it's a good thing right using",
    "start": "3539410",
    "end": "3548290"
  },
  {
    "text": "this mechanism you don't really have to even make life difficult for anyone",
    "start": "3548290",
    "end": "3554579"
  },
  {
    "text": "functional programmers think about the idea of writing a domain-specific",
    "start": "3555240",
    "end": "3560620"
  },
  {
    "text": "language when you want to abstract your problem up to the level where you only",
    "start": "3560620",
    "end": "3567670"
  },
  {
    "text": "need to talk about intent not the implementation so the moment you lift the abstraction level to the point where",
    "start": "3567670",
    "end": "3574390"
  },
  {
    "text": "you can talk about it sensibly there's a whole ton of mathematics that you can lean on that does the transformations",
    "start": "3574390",
    "end": "3580270"
  },
  {
    "text": "that you can actually generate the code so favor machine written code over hundred code favored higher level of",
    "start": "3580270",
    "end": "3585910"
  },
  {
    "text": "abstraction and there are tools that are freely available the parser Combinator library is available the code generator",
    "start": "3585910",
    "end": "3591850"
  },
  {
    "text": "is available and you basically can use that to do you know good stuff and",
    "start": "3591850",
    "end": "3597930"
  },
  {
    "text": "sometimes you know you have to show the seizure program is what they're missing",
    "start": "3597930",
    "end": "3603220"
  },
  {
    "text": "so you you got to get them across and say this stuff worked for me it made my",
    "start": "3603220",
    "end": "3610840"
  },
  {
    "text": "life easier so it's good to learn it kind of thing I think I'm done I want to",
    "start": "3610840",
    "end": "3617260"
  },
  {
    "text": "acknowledge Scott who basically has been extraordinary influential in giving us",
    "start": "3617260",
    "end": "3622480"
  },
  {
    "text": "new concepts and stuff like that making available for everybody to use a couple",
    "start": "3622480",
    "end": "3627580"
  },
  {
    "text": "of guys three guys from New Zealand and the US and Australia who who helped me",
    "start": "3627580",
    "end": "3634180"
  },
  {
    "text": "with the functional side of things and then Microsoft who I work for who is sponsored by coming here so thank you",
    "start": "3634180",
    "end": "3642400"
  },
  {
    "text": "very much I will take questions for the next five minutes though all the stuff",
    "start": "3642400",
    "end": "3647920"
  },
  {
    "text": "is available on github the v6 is available in the workplace and yeah if",
    "start": "3647920",
    "end": "3653170"
  },
  {
    "text": "you have a problem with any of the code I've written and you think you can do better which I think you should give me",
    "start": "3653170",
    "end": "3658930"
  },
  {
    "text": "a pull request and I will happily accept it thank you Joe",
    "start": "3658930",
    "end": "3664020"
  },
  {
    "text": "yeah so like I said the type theory part was the example not the point of the",
    "start": "3686890",
    "end": "3693140"
  },
  {
    "text": "talk right you are right in that you can do you can you can use genex to do that",
    "start": "3693140",
    "end": "3700190"
  },
  {
    "text": "the issue will end up becoming when you have none and some of T how do you",
    "start": "3700190",
    "end": "3705739"
  },
  {
    "text": "represent the thing that doesn't have a value and in some some cases like that",
    "start": "3705739",
    "end": "3710779"
  },
  {
    "text": "you'll end up having okay payment delinquent versus credit card partial",
    "start": "3710779",
    "end": "3716930"
  },
  {
    "text": "versus credit card full you don't know that there's there's probably one",
    "start": "3716930",
    "end": "3723200"
  },
  {
    "text": "discriminant in there that doesn't take a value how do you represent that and there are also places where you'll end",
    "start": "3723200",
    "end": "3728569"
  },
  {
    "text": "up taking more composite types inside and so and so forth so you'll end up having two pools of tuples and things like that so yeah I mean there's ways to",
    "start": "3728569",
    "end": "3736069"
  },
  {
    "text": "solve the the Union type problem then I picked this because this is actually the canonical way of doing it in Scala and F",
    "start": "3736069",
    "end": "3742190"
  },
  {
    "text": "now and it turns out that the the once",
    "start": "3742190",
    "end": "3747890"
  },
  {
    "text": "you put the syntax in place the the syntax is favorably terse in c-sharp it's actually more terse in c-sharp than",
    "start": "3747890",
    "end": "3754670"
  },
  {
    "text": "it is in F sharp because you don't create some of T you just say sama T and",
    "start": "3754670",
    "end": "3759680"
  },
  {
    "text": "you're done so yeah you have a valid point you can you can do your type theory stuff however you feel like to",
    "start": "3759680",
    "end": "3766730"
  },
  {
    "text": "solve the problem at hand but really the point of the talk was to actually talk about using a bigger set",
    "start": "3766730",
    "end": "3772489"
  },
  {
    "text": "of guns that you can bring to the problem to talk a more abstract way anyone else cool thank you",
    "start": "3772489",
    "end": "3783830"
  },
  {
    "text": "you",
    "start": "3783830",
    "end": "3785890"
  }
]