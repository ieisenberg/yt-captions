[
  {
    "text": "um all right let's give it a go let's give it a go uh morning everybody uh it is an absolute pleasure to be with you",
    "start": "280",
    "end": "5680"
  },
  {
    "text": "here at NDC Sydney uh my name is sonash I'm a developer Advocate at a company called Sona um Sona uh does code quality",
    "start": "5680",
    "end": "13160"
  },
  {
    "text": "tools that help you find and fix and security issues as you write them helping to avoid uh problems and and",
    "start": "13160",
    "end": "20039"
  },
  {
    "text": "write clean code uh we have things like Sona lint which is a free uh ID plugin uh that you can use to like check your",
    "start": "20039",
    "end": "26640"
  },
  {
    "text": "code as you write uh and then Sona Cube or Sona Cloud which uh sit in your uh cicd pipeline to uh check on your check",
    "start": "26640",
    "end": "33840"
  },
  {
    "text": "on your code as you uh as you submit as you commit and push um as I said my name is Phil Nash uh you can find me anywhere",
    "start": "33840",
    "end": "40559"
  },
  {
    "text": "on the internet as uh Phil Nash normally uh Twitter or whatever you want to call it uh masteron also still Blue Sky uh",
    "start": "40559",
    "end": "47920"
  },
  {
    "text": "LinkedIn uh whatever or just go to fil now.sh it's the it's an easy domain name",
    "start": "47920",
    "end": "53280"
  },
  {
    "text": "to remember if you can remember my name at least um it helps me remember it I guess",
    "start": "53280",
    "end": "59039"
  },
  {
    "text": "that's that's the important part and today uh this morning I want to talk to you a bit about code and complexity",
    "start": "59039",
    "end": "65640"
  },
  {
    "text": "um I'll start with a bit of going to do this in like three parts we're going to talk about like what is complexity uh",
    "start": "65640",
    "end": "71600"
  },
  {
    "text": "how we kind of measure it and then what we can do about it uh and so uh in terms of part one what is complexity I kind of",
    "start": "71600",
    "end": "78600"
  },
  {
    "text": "think that uh I don't mean to flatter us all uh in the room uh but our jobs are complex uh we have to keep a whole bunch",
    "start": "78600",
    "end": "86320"
  },
  {
    "text": "of stuff uh in our heads any times in order to build the applications build the sites build whatever we're working on um the problems we're working on uh",
    "start": "86320",
    "end": "94600"
  },
  {
    "text": "vary in complexity but they are all uh of some sort of complexity and uh we",
    "start": "94600",
    "end": "99640"
  },
  {
    "text": "have to build a code that kind of maps or abstracts onto actual real life problems uh and and and turning that",
    "start": "99640",
    "end": "106640"
  },
  {
    "text": "kind of idea of a bunch of text the computer can understand into something that's going to solve a real world problem is also inherently complex it",
    "start": "106640",
    "end": "113399"
  },
  {
    "text": "adds to that situation um uh and so whilst we deal with those",
    "start": "113399",
    "end": "119560"
  },
  {
    "text": "uh complexities ourselves we also um given the nature of code have to deal",
    "start": "119560",
    "end": "125200"
  },
  {
    "text": "with not adding extra complexities on top of it accidental complexity the the kind of stuff that um actually does make",
    "start": "125200",
    "end": "131760"
  },
  {
    "text": "you confused about what you're actually building at the end of the time end of the day and so effectively our job",
    "start": "131760",
    "end": "136800"
  },
  {
    "text": "becomes managing complexity it becomes uh writing code that's going to solve problems in such a way that we don't end",
    "start": "136800",
    "end": "143640"
  },
  {
    "text": "up uh uh writing overly complex things that eventually uh grind a project to a",
    "start": "143640",
    "end": "149480"
  },
  {
    "text": "halt because we can no longer understand what we started with our job is managing that complexity and uh and when we do",
    "start": "149480",
    "end": "156440"
  },
  {
    "text": "that successfully uh then we have a good time our codebase feels fresh it feels new and it feels like a joy to work in",
    "start": "156440",
    "end": "163400"
  },
  {
    "text": "when we don't do that uh we don't want to work on it uh we call it Legacy and then we ship it off to somebody else to",
    "start": "163400",
    "end": "168519"
  },
  {
    "text": "work on or we try to I don't",
    "start": "168519",
    "end": "172959"
  },
  {
    "text": "know and so I gave a talk uh over the course of 2023 uh not here at NDC Sydney",
    "start": "174040",
    "end": "179680"
  },
  {
    "text": "because because this is NDC Sydney 2023 I think we're we're just two months late um uh I gave a talk uh which was",
    "start": "179680",
    "end": "186599"
  },
  {
    "text": "entitled the top five issues in all our JavaScript projects and uh and this uh this talk used some of the data from",
    "start": "186599",
    "end": "192159"
  },
  {
    "text": "sonac cloud uh which scans hundreds of millions of lines of JavaScript and typescript to kind of find out what uh",
    "start": "192159",
    "end": "197840"
  },
  {
    "text": "what the issues uh what issues came up most commonly uh in JavaScript projects",
    "start": "197840",
    "end": "203599"
  },
  {
    "text": "uh and these were the top five a bunch of them are I think you could probably say relatively easy to deal with uh not",
    "start": "203599",
    "end": "209799"
  },
  {
    "text": "too much of an issue using VAR instead of let or const is a problem sure because we have things that because we",
    "start": "209799",
    "end": "214840"
  },
  {
    "text": "have let or const and that can do a better job but ultimately it's not going to cause a project to come grinding to a",
    "start": "214840",
    "end": "220000"
  },
  {
    "text": "halt but the second most common issue that we found uh using static analysis",
    "start": "220000",
    "end": "225360"
  },
  {
    "text": "was that the complexity of functions in JavaScript projects is too high and that's what I want to kind of dig into",
    "start": "225360",
    "end": "231519"
  },
  {
    "text": "today and see what we can do to handle that uh and recover that and we're also going to kind talk",
    "start": "231519",
    "end": "238079"
  },
  {
    "text": "about what is too high as well think um we'll see what this all matters um uh by",
    "start": "238079",
    "end": "244400"
  },
  {
    "text": "the end but when we ask about what is too high we actually have to uh start with a measurement in order to measure",
    "start": "244400",
    "end": "249920"
  },
  {
    "text": "that complexity uh and so that is part two how do we measure complexity has nobody got any ideas of kind of",
    "start": "249920",
    "end": "256359"
  },
  {
    "text": "measuring uh ways you'd measure complexity in your code base or something that you do maybe not Ben",
    "start": "256359",
    "end": "263400"
  },
  {
    "text": "out sure sorry how many of your colleagues hate you how many of your colleagues",
    "start": "263520",
    "end": "269160"
  },
  {
    "text": "hate you wow if that's a metric that you're keeping up to date um I guess in",
    "start": "269160",
    "end": "275120"
  },
  {
    "text": "like your own personal spreadsheet David what you to say",
    "start": "275120",
    "end": "280360"
  },
  {
    "text": "cyclomatic complex cyclomatic complexity that's a good that's a good one I'll get to that in a second uh good all right cool um I just want to take like two",
    "start": "280360",
    "end": "287919"
  },
  {
    "text": "example functions to kind of think about as we talk about measuring complexity uh the first one is this uh function it's a",
    "start": "287919",
    "end": "294880"
  },
  {
    "text": "um sum of prime numbers uh up to a maximum number um",
    "start": "294880",
    "end": "300759"
  },
  {
    "text": "uh it's not for anything it just does mathematical stuff uh and when it does it it uses a couple for Loops it's got a",
    "start": "300759",
    "end": "306680"
  },
  {
    "text": "couple of conditionals in there how complex is this I mean it's understandable it's not",
    "start": "306680",
    "end": "312600"
  },
  {
    "text": "too many like code it's not too bad I just wanted to contrast that to a",
    "start": "312600",
    "end": "317840"
  },
  {
    "text": "different function definitely not mathematical more about words I mean it still deals with numbers but like this kind of function here uh is a get words",
    "start": "317840",
    "end": "324479"
  },
  {
    "text": "function if you put a number into it you get out one or a couple or a few or many or Lots at the end of the day",
    "start": "324479",
    "end": "331080"
  },
  {
    "text": "and i' sort of argue that like the first one with a couple of conditionals and a couple of loops and and and a bunch of",
    "start": "331080",
    "end": "337199"
  },
  {
    "text": "stuff going on and some unnecessary short names but we'll deal with those later um that one I would argue is more",
    "start": "337199",
    "end": "344800"
  },
  {
    "text": "complex than this David said cyclomatic complexity which is great it's almost like he'd seen these slides coming",
    "start": "344800",
    "end": "351440"
  },
  {
    "text": "up um cyclomatic complexity is a score that we can use to measure complexity it was invented in",
    "start": "351440",
    "end": "357680"
  },
  {
    "text": "1976 uh so it's been around while um longer than I have incredibly um and catic complexity uh",
    "start": "357680",
    "end": "366440"
  },
  {
    "text": "scores gives a function of score uh based on um various Things based on it's",
    "start": "366440",
    "end": "372360"
  },
  {
    "text": "a function it basically based on how many times how many different ways you can go through the function uh and so you get a point for being a function and",
    "start": "372360",
    "end": "378840"
  },
  {
    "text": "then you get points for other things like breaking uh in in Loops or conditionals and so our sum of Prime's",
    "start": "378840",
    "end": "384599"
  },
  {
    "text": "function here uh scores one for being a a function woo up the top it scores one for being a function it scores one for",
    "start": "384599",
    "end": "390759"
  },
  {
    "text": "this first for Loop it scores one for the second for Loop it scores one for this conditional and then we got one",
    "start": "390759",
    "end": "396120"
  },
  {
    "text": "more conditional so we get a score of five and there are five different ways you'd have to write five tests to cover",
    "start": "396120",
    "end": "401759"
  },
  {
    "text": "all of this um but it turns out that the get wordss function um also scores one",
    "start": "401759",
    "end": "408280"
  },
  {
    "text": "for being a function and then four for each case uh in its switch uh and is also deemed as complex by cyclomatic",
    "start": "408280",
    "end": "414800"
  },
  {
    "text": "complexity uh as our sum of Prime's number and so",
    "start": "414800",
    "end": "420080"
  },
  {
    "text": "sigmatic complexity is useful it is useful for knowing things like how many paths you have to go through a function how many tests you'd have to write to",
    "start": "420080",
    "end": "426080"
  },
  {
    "text": "cover it I'm not in any way saying this is not a useful measure of something uh but complexity or at least how easy it",
    "start": "426080",
    "end": "433319"
  },
  {
    "text": "is to understand a function easy it is that you might be able to continue to work on it uh it's maybe not quite so",
    "start": "433319",
    "end": "439919"
  },
  {
    "text": "much it doesn't quite fit that mold uh and so how do we measure that",
    "start": "439919",
    "end": "445919"
  },
  {
    "text": "understandability how do we measure maintainability in a code uh in a code base",
    "start": "445919",
    "end": "451039"
  },
  {
    "text": "um I want to posit that cognitive complexity is a pretty good measure of this uh cognitive complexity was come up",
    "start": "451039",
    "end": "458160"
  },
  {
    "text": "with in 2016 uh by some of the people at Sona where I work uh I've only been there for just over a year so not score",
    "start": "458160",
    "end": "465560"
  },
  {
    "text": "I'm not trying to uh big up my own work here but just the work of my wonderful colleagues who were looking to find a",
    "start": "465560",
    "end": "472120"
  },
  {
    "text": "better way of in cyclomatic complexity to measure this and cognitive complexity still gives you a score um for a",
    "start": "472120",
    "end": "478639"
  },
  {
    "text": "function so it's still a number at the end it's still trying to quantify that uh but it does so in a slightly",
    "start": "478639",
    "end": "483840"
  },
  {
    "text": "different way uh instead of just incrementing for those Brakes in flow which it does do it also keeps the idea",
    "start": "483840",
    "end": "489520"
  },
  {
    "text": "of a nesting score in the back of its mind and so each time you Nest uh we increase a nesting score by one and then",
    "start": "489520",
    "end": "496080"
  },
  {
    "text": "each time we break in flow uh it adds both one plus the nesting score at the",
    "start": "496080",
    "end": "501360"
  },
  {
    "text": "moment uh and so you start with the nesting score of zero and then keep adding as you go in in and out and so if",
    "start": "501360",
    "end": "506560"
  },
  {
    "text": "we were to apply that to our sum of primes function uh we know longer have to score it for being a function like everything's a function and the idea of",
    "start": "506560",
    "end": "512959"
  },
  {
    "text": "a function with zero cognitive complexity is the idea that we get a function that just has each line that",
    "start": "512959",
    "end": "518719"
  },
  {
    "text": "runs happily after each other line and you can just read it like a story from beginning to end and I agree that has",
    "start": "518719",
    "end": "524240"
  },
  {
    "text": "pretty much zero complexity at least in terms of what you're reading at that time but in this one uh we score one for",
    "start": "524240",
    "end": "531040"
  },
  {
    "text": "our first uh for Loop uh we score and so then in the back of our minds we",
    "start": "531040",
    "end": "536080"
  },
  {
    "text": "increment nesting to one as well we get to our second for Loop uh and so we score two for that which is the one for",
    "start": "536080",
    "end": "541800"
  },
  {
    "text": "nesting plus one for being a loop uh our conditional in the middle is nested twice so it scores three two for nesting",
    "start": "541800",
    "end": "548200"
  },
  {
    "text": "one for being conditional uh then we drop out of the conditional we drop out of one of the loops and into another",
    "start": "548200",
    "end": "553519"
  },
  {
    "text": "conditional so that one's scoring two because the nesting is now just back down to one uh the cognitive complexity",
    "start": "553519",
    "end": "558959"
  },
  {
    "text": "score of some of primes here is now eight as opposed to the five we had before but our get words function is now",
    "start": "558959",
    "end": "566040"
  },
  {
    "text": "one because we have a big switch statement uh and uh and that kind of that makes sense to me it feels a bit",
    "start": "566040",
    "end": "571760"
  },
  {
    "text": "more right like a switch only deals with that one you know thing at the top uh",
    "start": "571760",
    "end": "577560"
  },
  {
    "text": "and we're comparing it a bunch of times uh if this was indeed a set of if else statements it would score one for each",
    "start": "577560",
    "end": "583320"
  },
  {
    "text": "of those ifs in there because an if else or an if statement suggests that it could be a different fun a different uh",
    "start": "583320",
    "end": "589800"
  },
  {
    "text": "thing under test each time uh whereas the switch were only ever testing that one",
    "start": "589800",
    "end": "594839"
  },
  {
    "text": "thing and so I feel like cni complexity Works a bit better uh and I kind of",
    "start": "594839",
    "end": "600079"
  },
  {
    "text": "think about it as like the your brain stack of how you're how you're thinking about things as I go through a function like um like that sum of primes uh I",
    "start": "600079",
    "end": "608680"
  },
  {
    "text": "know that uh as I hit that first for Loop I'm like okay now We're looping through some things and I've got to",
    "start": "608680",
    "end": "613880"
  },
  {
    "text": "consider that we we are inside of thing and dealing with one part of the loop and then we get inside that and we're dealing not with one but with two parts",
    "start": "613880",
    "end": "620079"
  },
  {
    "text": "of the loop because we actually have two looping variables that we're using at any time and then we get to a conditional in that we just keep kind of",
    "start": "620079",
    "end": "626120"
  },
  {
    "text": "adding things onto the stack um and then uh as as you get through things you then",
    "start": "626120",
    "end": "631279"
  },
  {
    "text": "pop things back off again and okay this is a bit simpler we're just in that first Loop uh but then we got another conditional to add and I like it's a bit",
    "start": "631279",
    "end": "638160"
  },
  {
    "text": "more complex uh than simply running through a switch statement for example and eventually we pop everything off the brain stack we finish uh the function",
    "start": "638160",
    "end": "645480"
  },
  {
    "text": "and hopefully we worked out what was going on in the middle of that uh but it's quite a lot of kind of inputs and outputs to the brain uh that that make",
    "start": "645480",
    "end": "653079"
  },
  {
    "text": "it just more complex to keep everything in your head and understand what the function is doing I will also understand",
    "start": "653079",
    "end": "658399"
  },
  {
    "text": "that complexity eight and a function that can fit on a slide is probably not complex enough to worry about for anybody in this room but we are worried",
    "start": "658399",
    "end": "664320"
  },
  {
    "text": "about maybe things more complex than that so let's get on to conquering that",
    "start": "664320",
    "end": "670360"
  },
  {
    "text": "complexity what are we going to do when we find uh we have complex functions to deal",
    "start": "670360",
    "end": "675560"
  },
  {
    "text": "with let's see the first problem is that we need to find that we have complex",
    "start": "675560",
    "end": "680680"
  },
  {
    "text": "functions to work with uh understanding where the complexity is is our first thing we have this score uh we have this",
    "start": "680680",
    "end": "686480"
  },
  {
    "text": "way of scoring things uh we need to sort of automate understand where that complexity lies uh in our",
    "start": "686480",
    "end": "692720"
  },
  {
    "text": "applications um I'll show you a quick demo uh I have uh an unnecessarily",
    "start": "692720",
    "end": "698000"
  },
  {
    "text": "complex function to look at um oops that's my slides uh that's exciting um give me one",
    "start": "698000",
    "end": "708000"
  },
  {
    "text": "second uh it's not working so that's it's exciting to just just to let you all know that we're going to find this",
    "start": "713000",
    "end": "718839"
  },
  {
    "text": "thing um soon uh so this is um it's a little project of mine uh called reveal",
    "start": "718839",
    "end": "724480"
  },
  {
    "text": "confetti uh it shows a confetti uh on slide decks uh you might see some of it",
    "start": "724480",
    "end": "729800"
  },
  {
    "text": "later um and it's currently not complaining at me",
    "start": "729800",
    "end": "734920"
  },
  {
    "text": "cool there we go all right that's fine uh so um it's revealed confetti uh it",
    "start": "734920",
    "end": "740760"
  },
  {
    "text": "runs only the end of a slide transition so we have this function onslide transition end uh which I can tell you",
    "start": "740760",
    "end": "746760"
  },
  {
    "text": "scores uh 16 uh in terms of cognitive complexity which should uh trigger an",
    "start": "746760",
    "end": "752519"
  },
  {
    "text": "underlining um on this particular page and it's not but I am still seeing that we have uh the locations of what's going",
    "start": "752519",
    "end": "758800"
  },
  {
    "text": "on here so I'm using S lint uh in my editor here uh just to uh to show this off and what it's going to do is show me",
    "start": "758800",
    "end": "764959"
  },
  {
    "text": "like where all the complexity from this function is and so like we start with a big if around the outside which is",
    "start": "764959",
    "end": "770519"
  },
  {
    "text": "scoring one for us you can see that just there um and then inside we have a a",
    "start": "770519",
    "end": "776120"
  },
  {
    "text": "turnery which is scoring one for being a turnery one for a conditional uh and one for being nested and then we",
    "start": "776120",
    "end": "781160"
  },
  {
    "text": "have another one which is also nested at the same level same as about this if this if uh eventually we get down to",
    "start": "781160",
    "end": "790440"
  },
  {
    "text": "um threes and fours yeah so inside uh uh seven here is a is a plus three",
    "start": "790600",
    "end": "797360"
  },
  {
    "text": "it's a turnery that's inside two nested conditionals uh and and this is it's just a little bit hard to read there",
    "start": "797360",
    "end": "803120"
  },
  {
    "text": "another nested conditional there it's cost cost four just to make sure that this thing hasn't finished yet so that's kind of nested in this particular case",
    "start": "803120",
    "end": "809480"
  },
  {
    "text": "inside of a internal function as well which the function itself doesn't incur any score for fin nesting but running",
    "start": "809480",
    "end": "815920"
  },
  {
    "text": "things from within it does um and that's just a big settings block uh but this this function you know",
    "start": "815920",
    "end": "822720"
  },
  {
    "text": "it's 90 almost 90 lines of code uh comes out as a score of 16 uh and son aent",
    "start": "822720",
    "end": "828600"
  },
  {
    "text": "here is suggesting that I could do some stuff to fix it up uh and uh and I appreciate that thank you son Lind",
    "start": "828600",
    "end": "836560"
  },
  {
    "text": "um I will go and fix it up we'll fix it up with some ideas in a bit um the second thing after finding",
    "start": "836560",
    "end": "843360"
  },
  {
    "text": "out where your complexity is in your project is to not do anything about it um so you breathe a side of Rel you're",
    "start": "843360",
    "end": "851040"
  },
  {
    "text": "not currently uh under any stress for for handling this right now uh because it turns out that the um uh if you find",
    "start": "851040",
    "end": "857680"
  },
  {
    "text": "out that you have a a a complex function somewhere but it's doing its job and it's doing it fine like there's nothing",
    "start": "857680",
    "end": "864160"
  },
  {
    "text": "wrong with it it doesn't need anything added or taken away or fixed with it we don't have to worry about it complexity",
    "start": "864160",
    "end": "869920"
  },
  {
    "text": "the complexity of code only really matters to us uh if you need to change it if you need to load that code into",
    "start": "869920",
    "end": "875199"
  },
  {
    "text": "your head and understand what it's doing if a function is is working as",
    "start": "875199",
    "end": "881160"
  },
  {
    "text": "expected uh and and is has a complexity of 2,000 I don't care as long as I don't have to change it if it turns out that",
    "start": "881160",
    "end": "887440"
  },
  {
    "text": "any of you have functions that have complexity of 2,000 I need you to tell me about it because I would really like",
    "start": "887440",
    "end": "892600"
  },
  {
    "text": "to see that um I have found uh I have found in open source projects complexity",
    "start": "892600",
    "end": "898480"
  },
  {
    "text": "of uh upwards of 100 120 uh but nothing in the four figures yet so actually if it's over a th I'd",
    "start": "898480",
    "end": "904560"
  },
  {
    "text": "love to know I really would um but again if it works if and if you know it works",
    "start": "904560",
    "end": "909959"
  },
  {
    "text": "like you kind have to know it works as well uh but if it works uh then you don't need to touch it and if again if",
    "start": "909959",
    "end": "915360"
  },
  {
    "text": "you're not adding features to that part of the code base you also do not need to touch it complexity is only an issue if",
    "start": "915360",
    "end": "921519"
  },
  {
    "text": "you need to change that complex code and so this kind of brings me on to then step three this is where you might",
    "start": "921519",
    "end": "927800"
  },
  {
    "text": "have to change something uh and this is uh this is kind of an idea that that we espouse at Sona which is that we we want",
    "start": "927800",
    "end": "935160"
  },
  {
    "text": "you to eventually work towards clean code a clean code state where nothing is complex and a whole bunch of issues are",
    "start": "935160",
    "end": "940720"
  },
  {
    "text": "also solved uh and we uh take that idea of cleaning as you code if you have to",
    "start": "940720",
    "end": "947120"
  },
  {
    "text": "change a function if it turns out you need to fix something add a feature take something away whatever it is and you",
    "start": "947120",
    "end": "952279"
  },
  {
    "text": "find that you've got an overly complex thing or some other errors with it uh we kind of encourage that you clean that up",
    "start": "952279",
    "end": "958639"
  },
  {
    "text": "as you are coding fix it uh or fix it first then make the change uh and",
    "start": "958639",
    "end": "964120"
  },
  {
    "text": "possibly even refactor again afterwards in order to make sure that you are leaving that code base in a better State than it was before if you continually do",
    "start": "964120",
    "end": "971480"
  },
  {
    "text": "this if you always work to improve upon bits of code that you're working on then ultimately over time your codebase is",
    "start": "971480",
    "end": "977240"
  },
  {
    "text": "going to become a much uh much better place to work in and so we say cley code and and I I",
    "start": "977240",
    "end": "983759"
  },
  {
    "text": "reckon the way to do this is to refactor first like you come across you've got to add a feature to um your reveal confetti",
    "start": "983759",
    "end": "989480"
  },
  {
    "text": "plugin we need to have more confetti it's a we see lots of confetti",
    "start": "989480",
    "end": "996000"
  },
  {
    "text": "it's fine um I'd always say like refactor first before you have to make a",
    "start": "996000",
    "end": "1001040"
  },
  {
    "text": "change to the product make it uh to a function you should make it easier to make that change in the first place um",
    "start": "1001040",
    "end": "1007759"
  },
  {
    "text": "doing that refactoring first will um uh be easier you've not added extra code to it at Point uh but it also makes it",
    "start": "1007759",
    "end": "1014839"
  },
  {
    "text": "easier to make that change ultimately as well um uh refactoring first also means",
    "start": "1014839",
    "end": "1021120"
  },
  {
    "text": "um you're improving how the code Works without changing what the code does uh",
    "start": "1021120",
    "end": "1027438"
  },
  {
    "text": "and that's really sort of the most important Point here about refactoring in",
    "start": "1027439",
    "end": "1032760"
  },
  {
    "text": "general uh when you are changing how the code Works without changing what it does you should absolutely to uh do so",
    "start": "1032760",
    "end": "1040079"
  },
  {
    "text": "without anything but we need we do need to have things in place to make sure that we don't change what the code does",
    "start": "1040079",
    "end": "1047959"
  },
  {
    "text": "uh and um I hope that you're all a fan of of of tests that uh cover your code uh and",
    "start": "1047959",
    "end": "1054720"
  },
  {
    "text": "give you that confidence in what it is um tests are the absolute kind of",
    "start": "1054720",
    "end": "1061160"
  },
  {
    "text": "most important thing when you're coming to refactor a thing uh because if you change some code and you cannot tell",
    "start": "1061160",
    "end": "1066400"
  },
  {
    "text": "that it is not doing or do it if you have no way to verify that it doesn't do the same thing that it did previously",
    "start": "1066400",
    "end": "1072559"
  },
  {
    "text": "you cannot know that you just refactored something all you can know is that you changeed some code uh tests absolutely",
    "start": "1072559",
    "end": "1078559"
  },
  {
    "text": "have to cover that uh in order yeah to give you that confidence that you haven't broken anything and more importantly test",
    "start": "1078559",
    "end": "1085360"
  },
  {
    "text": "should also ensure that they test what a function does and not how it does it as well so in refactoring we're changing",
    "start": "1085360",
    "end": "1090799"
  },
  {
    "text": "what it does and not how it does it sorry in refactoring we're changing how it does it not what it does the tests",
    "start": "1090799",
    "end": "1098520"
  },
  {
    "text": "must ensure that they test what it does and not how it does it if your tests are in any way tied to the implementation on",
    "start": "1098520",
    "end": "1105400"
  },
  {
    "text": "the inside and you change that implementation you're going to break the test tests and that's a bad spot to be",
    "start": "1105400",
    "end": "1111600"
  },
  {
    "text": "in uh now you think you've changed the code and refactored it without breaking anything but the tests uh have a",
    "start": "1111600",
    "end": "1118600"
  },
  {
    "text": "different opinion about that uh and that's not the best place to be in um so yeah do not kind of rely on",
    "start": "1118600",
    "end": "1126760"
  },
  {
    "text": "those interior details to a piece of code in order to test it um otherwise this is refactoring is going to break",
    "start": "1126760",
    "end": "1132919"
  },
  {
    "text": "those tests and so if you don't have tests covering your code uh step one of",
    "start": "1132919",
    "end": "1138200"
  },
  {
    "text": "refactoring is absolutely to come up with some tests that are going to cover this going to verify that your uh piece",
    "start": "1138200",
    "end": "1144880"
  },
  {
    "text": "of code currently does this and after we've changed it continues to do that",
    "start": "1144880",
    "end": "1150440"
  },
  {
    "text": "the important thing here also is if uh if we are refactoring before we are here to fix a bug uh this refractor shouldn't",
    "start": "1150440",
    "end": "1158000"
  },
  {
    "text": "fix the bug that would be changing how the code does something the refactoring is only going to sorry that would change",
    "start": "1158000",
    "end": "1165559"
  },
  {
    "text": "what it does I'll start that",
    "start": "1165559",
    "end": "1172120"
  },
  {
    "text": "again if you are changing something and you're trying to fix something uh refactoring should not include that fix",
    "start": "1172120",
    "end": "1178600"
  },
  {
    "text": "we are changing how the function does something and not what it does if currently what it does is wrong in order",
    "start": "1178600",
    "end": "1185840"
  },
  {
    "text": "to refactor it we have to maintain that it is wrong at the end of the refactoring as well and then we can fix",
    "start": "1185840",
    "end": "1191840"
  },
  {
    "text": "it those are two separate processes test must cover that existing behavior and it must cover the existing",
    "start": "1191840",
    "end": "1198760"
  },
  {
    "text": "Behavior even if that behavior is wrong so that we know that we haven't changed anything else about our system when we",
    "start": "1198760",
    "end": "1205640"
  },
  {
    "text": "finish the refactoring and once you finish the refactoring that is the point where you can fix the issue um separately it",
    "start": "1205640",
    "end": "1213760"
  },
  {
    "text": "should be easier to do so at that point it's easy to think about the and keep that cbase in your mind uh but like",
    "start": "1213760",
    "end": "1219679"
  },
  {
    "text": "ensure that your refactoring is not encroaching on feature adding or",
    "start": "1219679",
    "end": "1225240"
  },
  {
    "text": "fixing so yeah then we get to the point where we refactor",
    "start": "1225240",
    "end": "1230520"
  },
  {
    "text": "I've got some ideas as to how we can refactor with the idea of um cognitive complexity in mind uh there are many",
    "start": "1230520",
    "end": "1237240"
  },
  {
    "text": "many refactorings uh available and ways to refactor uh and I highly recommend",
    "start": "1237240",
    "end": "1242840"
  },
  {
    "text": "you know Martin F's book on refactoring also um s Mets Kina uh 99 bottles of oop",
    "start": "1242840",
    "end": "1250520"
  },
  {
    "text": "uh both excellent books on on ways to approach uh refactoring and things like this um I just want to think about it in",
    "start": "1250520",
    "end": "1257159"
  },
  {
    "text": "terms of just that cognitive complexity and how we're going to um keep less stuff I guess on the brain stack uh and",
    "start": "1257159",
    "end": "1262840"
  },
  {
    "text": "reduce uh our complexity so we can time make it easier to deal with our code",
    "start": "1262840",
    "end": "1268919"
  },
  {
    "text": "base and so because cognitive complexity itself uh punishes nesting uh",
    "start": "1268919",
    "end": "1274520"
  },
  {
    "text": "effectively um the best thing to do to reduce your complexity is indeed to reduce that",
    "start": "1274520",
    "end": "1280080"
  },
  {
    "text": "nesting uh there's kind of four different techniques here uh that I would suggest um you you'd aim for first",
    "start": "1280080",
    "end": "1287760"
  },
  {
    "text": "up uh is inverting the condition and and early exiting if you can inverting conditions and early exiting uh",
    "start": "1287760",
    "end": "1293480"
  },
  {
    "text": "structural collapse uh is is second um uh extracting helper methods and then",
    "start": "1293480",
    "end": "1299400"
  },
  {
    "text": "some other language features that I'll cover a couple of uh for JavaScript at least uh at the end um so inverting editions and early",
    "start": "1299400",
    "end": "1306720"
  },
  {
    "text": "exits uh this really comes to I I genuinely wrote uh my uh reveal confetti",
    "start": "1306720",
    "end": "1311840"
  },
  {
    "text": "to be um but I didn't actually think about um ter I put a big if statement",
    "start": "1311840",
    "end": "1319760"
  },
  {
    "text": "around the whole thing to say at the slide transition end",
    "start": "1319760",
    "end": "1325120"
  },
  {
    "text": "uh the sound hello are we good okay I'm back I can",
    "start": "1329159",
    "end": "1334840"
  },
  {
    "text": "hear it again I'll stop moving um I have a big uh if statement",
    "start": "1334840",
    "end": "1342159"
  },
  {
    "text": "around the uh body of this function uh that just says if there's confetti in a data attribute on the current slide then",
    "start": "1342159",
    "end": "1348720"
  },
  {
    "text": "let's go for it let's do some stuff uh and this of course starts as nesting stuff it puts uh I have to consider",
    "start": "1348720",
    "end": "1354960"
  },
  {
    "text": "where the confetti is on the slide onto the brain stack I have to then think about the rest of the things but if you",
    "start": "1354960",
    "end": "1361039"
  },
  {
    "text": "invert that condition if you get rid of if you get out of that early if there's no confetti and we don't have to think about anything else uh we can early",
    "start": "1361039",
    "end": "1368120"
  },
  {
    "text": "return and uh I told you it was coming um we can early return uh and the",
    "start": "1368120",
    "end": "1374000"
  },
  {
    "text": "function doesn't have to worry about anything else uh in terms of that kind of uh brain of things uh all you have to",
    "start": "1374000",
    "end": "1380080"
  },
  {
    "text": "know is that everything else from this point onwards is what you were intending to do anyway and you just dropped out early because you didn't have to worry",
    "start": "1380080",
    "end": "1386000"
  },
  {
    "text": "about the other thing um it just pops it off the brain stack and it makes me happier uh when I think about it that",
    "start": "1386000",
    "end": "1393720"
  },
  {
    "text": "way structural collapse on the other hand uh this is sort of a more madeup example and isn't in the current uh code",
    "start": "1393720",
    "end": "1400080"
  },
  {
    "text": "uh but structural collapse is where you find that you've got kind of two conditionals uh next to each other uh that nested within each other but don't",
    "start": "1400080",
    "end": "1406520"
  },
  {
    "text": "actually have to be um it's surprising how often this kind of comes up uh and in this particular",
    "start": "1406520",
    "end": "1413000"
  },
  {
    "text": "example this is two things that are going to deny us putting confetti on screen one uh uh in this case sorry",
    "start": "1413000",
    "end": "1419720"
  },
  {
    "text": "sorry there's are two things would allow us to put confetti on screen that is there's confetti on the data uh data",
    "start": "1419720",
    "end": "1424799"
  },
  {
    "text": "attribute and uh the current window uh says has a media query that says uh",
    "start": "1424799",
    "end": "1430480"
  },
  {
    "text": "nobody has said don't worry stop animations no preference for prefers reduced emotions it's a whole set of",
    "start": "1430480",
    "end": "1436159"
  },
  {
    "text": "negatives thank you CSS for that uh but um uh it basically says we don't want",
    "start": "1436159",
    "end": "1441279"
  },
  {
    "text": "animation oh sorry we're okay with animation and so if f is on the slide uh on on the data",
    "start": "1441279",
    "end": "1448240"
  },
  {
    "text": "set okay then we can throw confetti but we",
    "start": "1448240",
    "end": "1453520"
  },
  {
    "text": "don't need to Nest that we can just put it all into one thing uh and throw confetti both confetti is on the slide",
    "start": "1453520",
    "end": "1460440"
  },
  {
    "text": "and uh animation is is allow that is just is",
    "start": "1460440",
    "end": "1465559"
  },
  {
    "text": "red and everything incur an issue in",
    "start": "1465559",
    "end": "1471799"
  },
  {
    "text": "between or one and it pops off brain stack that's",
    "start": "1473840",
    "end": "1480679"
  },
  {
    "text": "one less thing to think about we're just we don't have to worry why we're nested so deep um we've just got through our",
    "start": "1480679",
    "end": "1487039"
  },
  {
    "text": "condition easily uh third one is to extract helper methods um part of my code I do find uh",
    "start": "1487039",
    "end": "1494799"
  },
  {
    "text": "that I reach into the data stuff and turn into in this case uh an integer uh",
    "start": "1494799",
    "end": "1501240"
  },
  {
    "text": "with a default fallback uh this in the first version of the code that I wrote uh use turn uh use",
    "start": "1501240",
    "end": "1507799"
  },
  {
    "text": "DET turnery each time to check that the thing existed in the data set and if it does it passes as an integer uh and if",
    "start": "1507799",
    "end": "1514480"
  },
  {
    "text": "it doesn't it Returns the default and so um we we get 200 particle count of",
    "start": "1514480",
    "end": "1520120"
  },
  {
    "text": "confetti and it can take Zer seconds um those are the kind of the defaults uh",
    "start": "1520120",
    "end": "1526080"
  },
  {
    "text": "but this is now duplicated code uh uh we're incurring uh a score for each of",
    "start": "1526080",
    "end": "1531640"
  },
  {
    "text": "these conditionals uh and you know not just one for each of them but one plus whatever nesting they in uh each time we",
    "start": "1531640",
    "end": "1538039"
  },
  {
    "text": "hit them uh and uh and it's just duplication it's stuff that we can",
    "start": "1538039",
    "end": "1543200"
  },
  {
    "text": "extract and so if we extract it to a function that is named after what it",
    "start": "1543200",
    "end": "1548279"
  },
  {
    "text": "does in this case it be it returns an integer data attribute or a default um",
    "start": "1548279",
    "end": "1554360"
  },
  {
    "text": "then we can use that uh in our code uh and when we reading the code it tells us",
    "start": "1554360",
    "end": "1560120"
  },
  {
    "text": "what it's doing rather than having to mentally PA a Turner conditional in this case um and it's going to dry up that",
    "start": "1560120",
    "end": "1568080"
  },
  {
    "text": "code right it's stopping us repeating things um but it also yeah as you're reading that hopefully it does make more",
    "start": "1568080",
    "end": "1574799"
  },
  {
    "text": "sense than having to read a a turnery I dislike Turner anyway but um yeah this",
    "start": "1574799",
    "end": "1581240"
  },
  {
    "text": "this one runs over three lines why have I even turny that it's very annoying",
    "start": "1581240",
    "end": "1586360"
  },
  {
    "text": "um so extracting health method whatever you've got there if you if you are repeating stuff or even if it is just a",
    "start": "1586360",
    "end": "1592120"
  },
  {
    "text": "sort of complex bit of code that you can actually name something which makes a lot more sense than trying to read the code itself um then you are helping",
    "start": "1592120",
    "end": "1600600"
  },
  {
    "text": "yourself helping yourself to read it uh and then secondly actually because you are extracting a helper method you can",
    "start": "1600600",
    "end": "1606399"
  },
  {
    "text": "then test that method independently as well we can now be happy that these methods are working independently of",
    "start": "1606399",
    "end": "1613360"
  },
  {
    "text": "everything else that is going on uh giving us again greater confidence in the overall ability",
    "start": "1613360",
    "end": "1618960"
  },
  {
    "text": "in terms of our refactoring we're stly worried about like not breaking the tests whilst we change stuff but if we",
    "start": "1618960",
    "end": "1624640"
  },
  {
    "text": "wanted to yeah add further tests to uh be certain about these other sort of",
    "start": "1624640",
    "end": "1629799"
  },
  {
    "text": "units of code then um uh we can do this you",
    "start": "1629799",
    "end": "1636640"
  },
  {
    "text": "add you you can add more tests to your main",
    "start": "1637919",
    "end": "1647679"
  },
  {
    "text": "sorry about this don't know which part of the microphone to",
    "start": "1649279",
    "end": "1656520"
  },
  {
    "text": "me anyway when once we extract that helper method once we have a good name for it once we've named the concept of",
    "start": "1656520",
    "end": "1663640"
  },
  {
    "text": "what we're dealing with in this thing that's worthy of being its own method uh we can understand what it's supposed to",
    "start": "1663640",
    "end": "1669399"
  },
  {
    "text": "do without knowing the details of the code and again scoreless on cognitive complexity pop it off the brain",
    "start": "1669399",
    "end": "1676279"
  },
  {
    "text": "stack and finally there's just you know some of the newer features of JavaScript that help us do this uh in uh in other",
    "start": "1676279",
    "end": "1683360"
  },
  {
    "text": "code like this um if you have nested objects that you need a property that's somewhere deep inside of it uh you",
    "start": "1683360",
    "end": "1690679"
  },
  {
    "text": "probably find yourself a few years ago you know checking that the first property exists and then moving on to",
    "start": "1690679",
    "end": "1696320"
  },
  {
    "text": "the second property uh and you know if you have to go deeper then you get longer and longer chains of make sure",
    "start": "1696320",
    "end": "1701840"
  },
  {
    "text": "this exists and then this exists and then this exists before we finally get the value that we want uh but instead we",
    "start": "1701840",
    "end": "1708279"
  },
  {
    "text": "now have optional chaining um which just removes that extra and it removes sort",
    "start": "1708279",
    "end": "1714480"
  },
  {
    "text": "of conditionals that we have to consider uh and is just an understandable line of code now and secondly uh like um if we",
    "start": "1714480",
    "end": "1723919"
  },
  {
    "text": "set up a default object do something with it in the meantime and then later we want to uh we want to set the colors",
    "start": "1723919",
    "end": "1730440"
  },
  {
    "text": "uh on the defaults but only if it's not already been set by something else um then we would have to check that if",
    "start": "1730440",
    "end": "1737120"
  },
  {
    "text": "default colors is is already undefined or null and if it is then we can set it to something and if it's not then we",
    "start": "1737120",
    "end": "1742720"
  },
  {
    "text": "just carry on uh but this is adding conditionals it's adding stuff to think about uh and JavaScript even more",
    "start": "1742720",
    "end": "1748559"
  },
  {
    "text": "recently added uh our nullish coloring uh you know what I mean um",
    "start": "1748559",
    "end": "1757320"
  },
  {
    "text": "nullish assignment uh so if default uh colors in this case is null or undefined",
    "start": "1757320",
    "end": "1762600"
  },
  {
    "text": "it will get ass sign if it's anything else it will not uh dropped out a conditional uh We've made things a lot",
    "start": "1762600",
    "end": "1768600"
  },
  {
    "text": "happier there we've popped it off the brain stack uh I just like the less things I have on that stack the happier",
    "start": "1768600",
    "end": "1774360"
  },
  {
    "text": "I am and those those things all allow us to help oh bonus",
    "start": "1774360",
    "end": "1781720"
  },
  {
    "text": "rent I mentioned Turner so I'm a big fan of prettier uh",
    "start": "1782120",
    "end": "1790000"
  },
  {
    "text": "it's a wonderful form matter helps us make our code look a lot better uh one of our other tenants of of clean code",
    "start": "1790000",
    "end": "1795720"
  },
  {
    "text": "that we try to talk about at soner is consistency formatting is absolute key to consistency so formatting is",
    "start": "1795720",
    "end": "1801600"
  },
  {
    "text": "something you absolutely should have in all your uh in all your code bases it stops Spike shedding about things it",
    "start": "1801600",
    "end": "1807080"
  },
  {
    "text": "stops arguing about what things should look like just let a format and it's",
    "start": "1807080",
    "end": "1812880"
  },
  {
    "text": "greatly prettier has been considering nested taries in fact it's been considering them uh for quite a long",
    "start": "1813880",
    "end": "1819919"
  },
  {
    "text": "time since it's stopped indenting nested taries uh after previously it was",
    "start": "1819919",
    "end": "1826880"
  },
  {
    "text": "indenting them then it start then there's a GitHub thread of 300 comments where they're like they should be nested",
    "start": "1826880",
    "end": "1832679"
  },
  {
    "text": "they shouldn't be they should look like this and there's there's no agreement uh internet about what Turner nested Turner",
    "start": "1832679",
    "end": "1839519"
  },
  {
    "text": "should look like um and they so Pria have put out an ex experimental uh",
    "start": "1839519",
    "end": "1845640"
  },
  {
    "text": "format for naries that ends up looking a bit like this this is their example and",
    "start": "1845640",
    "end": "1850799"
  },
  {
    "text": "on you know some lines when it's short enough uh things can happen on the same line if things are a bit longer or",
    "start": "1850799",
    "end": "1856399"
  },
  {
    "text": "whatever it will happen over more indented lines uh and I don't care",
    "start": "1856399",
    "end": "1862159"
  },
  {
    "text": "because weting taries this is a bad idea in general um I don't like reading this",
    "start": "1862159",
    "end": "1868799"
  },
  {
    "text": "because we've got an animal name we have to again this is just dealing with nesting uh on our it's adding things to",
    "start": "1868799",
    "end": "1875720"
  },
  {
    "text": "the brain stack we've got a pet that can bark and if it is scary then it's a wolf although why is that a pet I'm concerned",
    "start": "1875720",
    "end": "1881679"
  },
  {
    "text": "about that but it's just the example code um so we got a pet camark and then we check if it's scary and then it's a",
    "start": "1881679",
    "end": "1887240"
  },
  {
    "text": "wolf and if not it's a dog and you pull back out of that to another else and in",
    "start": "1887240",
    "end": "1892399"
  },
  {
    "text": "my mind I'm definitely changing colons have to uh and then we're okay",
    "start": "1892399",
    "end": "1897760"
  },
  {
    "text": "now it can meow and then it's a cat and then we've got another else it's probably a bunny I I hate it it's nested",
    "start": "1897760",
    "end": "1903559"
  },
  {
    "text": "it's horrible um it's just it's hard to opin other people have different",
    "start": "1903559",
    "end": "1909399"
  },
  {
    "text": "opinions about but arguably due to its nesting more complex we can",
    "start": "1909399",
    "end": "1916279"
  },
  {
    "text": "use a couple of the things I've just talked about early returning inverting",
    "start": "1916279",
    "end": "1921399"
  },
  {
    "text": "conditionals uh and um uh uh even extracting helper",
    "start": "1921399",
    "end": "1927080"
  },
  {
    "text": "functions to do this better that turnery whilst",
    "start": "1927080",
    "end": "1932320"
  },
  {
    "text": "shorter more line I guess shorter than this function um is much less readable",
    "start": "1932320",
    "end": "1938760"
  },
  {
    "text": "this animal name function takes a pet and if the pet can bark and is scary it's a wolf that's easy to read and if",
    "start": "1938760",
    "end": "1944440"
  },
  {
    "text": "it just comar it's a dog and if it cow it's a cat and the result is maybe a bunny we're returning out of this uh",
    "start": "1944440",
    "end": "1951480"
  },
  {
    "text": "early uh so we don't have to keep thinking about stuff if we know we've got a a a barking scary pet uh we we can",
    "start": "1951480",
    "end": "1958039"
  },
  {
    "text": "stop thinking about it after the first line uh and so can the code but even better we've extracted this as a helper",
    "start": "1958039",
    "end": "1964480"
  },
  {
    "text": "function which means we can test this uh and we can write down uh tests as to",
    "start": "1964480",
    "end": "1970080"
  },
  {
    "text": "which can verify what's going on inside what was previously an honestly ugly nested turnery uh and now is something",
    "start": "1970080",
    "end": "1976840"
  },
  {
    "text": "that we can uh reason against uh in our test Suite you could just extract the turnery to a function and test that but",
    "start": "1976840",
    "end": "1985320"
  },
  {
    "text": "I think this has made things better overall uh I wrote a whole article about this because it's not just a bonus rent",
    "start": "1985320",
    "end": "1991519"
  },
  {
    "text": "I I put it on the internet and then on redit and I'm sure you imagine where",
    "start": "1991519",
    "end": "1996840"
  },
  {
    "text": "that went um but that's it so that's kind of what I wanted to cover uh today um I've",
    "start": "1996840",
    "end": "2004039"
  },
  {
    "text": "talked a bit about what complexity is our jobs are complex code is complex and our jobs to manage that",
    "start": "2004039",
    "end": "2009760"
  },
  {
    "text": "complexity um if we manage it well uh then the only complexity that we will",
    "start": "2009760",
    "end": "2014799"
  },
  {
    "text": "find in our projects is that of the domain we're actually modeling and not of additional complexity that we add",
    "start": "2014799",
    "end": "2020880"
  },
  {
    "text": "through our own um use of code measuring complexity there are many",
    "start": "2020880",
    "end": "2026519"
  },
  {
    "text": "ways to do so I've heard of just using the number of Lin function to measure the complexity of it and that's you know",
    "start": "2026519",
    "end": "2032240"
  },
  {
    "text": "it's it's also a horis of sorts um cyclomatic complexity is quite useful particularly if you want to use it to",
    "start": "2032240",
    "end": "2039039"
  },
  {
    "text": "know how many tests you need to cover everything and cognitive complexity is certainly one that resonates with me",
    "start": "2039039",
    "end": "2045480"
  },
  {
    "text": "does with you as to uh proving that something is hard to",
    "start": "2045480",
    "end": "2050599"
  },
  {
    "text": "understand uh and then when we come to conquering this complexity uh we look to refactor things first we must have tests",
    "start": "2050599",
    "end": "2057200"
  },
  {
    "text": "to cover that code again a good reason to check on that cyclomatic complexity number to make sure we do indeed have",
    "start": "2057200",
    "end": "2062839"
  },
  {
    "text": "enough tests that cover this um we should have those tests to cover it if we we don't first job is to write them",
    "start": "2062839",
    "end": "2069520"
  },
  {
    "text": "and to cover the behavior that happens already we should then refactor without changing that behavior followed by uh",
    "start": "2069520",
    "end": "2076839"
  },
  {
    "text": "doing whatever we need to do to the function to fix add a feature or or or even remove",
    "start": "2076839",
    "end": "2083240"
  },
  {
    "text": "features and ultimately we can then uh once we've tested and and made that a solution uh reconsider once again uh",
    "start": "2083240",
    "end": "2090480"
  },
  {
    "text": "refactor at if again you have added more complexity as part of this kind of feature ad um and at the uh at the end",
    "start": "2090480",
    "end": "2098599"
  },
  {
    "text": "of uh all of that process uh yeah refactoring changing uh final refactor",
    "start": "2098599",
    "end": "2104560"
  },
  {
    "text": "you can uh commit with the knowledge that the codebase is now in a better State not just because you did the job",
    "start": "2104560",
    "end": "2110160"
  },
  {
    "text": "you asked to but because the code is much better uh as a result of it and that's what we want I think ever",
    "start": "2110160",
    "end": "2116200"
  },
  {
    "text": "improving code bases uh are the way that we're going to be ever happier as",
    "start": "2116200",
    "end": "2121320"
  },
  {
    "text": "developers so I have some tools uh that are going to help you with this um obviously I will uh tell you Sona Cloud",
    "start": "2121320",
    "end": "2128240"
  },
  {
    "text": "son Cube and Son lint are going to help with this uh Sona Cloud will do so as part of your cicd pipeline it is free",
    "start": "2128240",
    "end": "2133960"
  },
  {
    "text": "for open source project so if you want to uh check the the quality of your code for an open source project go check out",
    "start": "2133960",
    "end": "2139800"
  },
  {
    "text": "sonar Cloud right now it's easy and free to sign up for uh son you have to run yourself and there is a free Community Edition for that too um Sona lint lives",
    "start": "2139800",
    "end": "2147160"
  },
  {
    "text": "inside your IDE also free uh and can tell you about cognitive complexity uh as you are writing the code and I think",
    "start": "2147160",
    "end": "2153640"
  },
  {
    "text": "that is absolutely the best place to be doing this uh you don't want to check in and uh uh and several hours later here",
    "start": "2153640",
    "end": "2160119"
  },
  {
    "text": "that uh you wrote a way too complex function it is much easier to fix things as you working on them than it is to uh",
    "start": "2160119",
    "end": "2166760"
  },
  {
    "text": "reload everything into your brain and get back into that same state of mind um",
    "start": "2166760",
    "end": "2172319"
  },
  {
    "text": "of course if you already have eslint uh in in a JavaScript project uh eslint doesn't currently have a rule for",
    "start": "2172319",
    "end": "2177880"
  },
  {
    "text": "cognitive complexity but uh the Sona JavaScript team uh also maintains the",
    "start": "2177880",
    "end": "2182960"
  },
  {
    "text": "eslint plug-in Sona JS which has a bunch of rules in it but does include cognitive complexity",
    "start": "2182960",
    "end": "2188119"
  },
  {
    "text": "uh and so you can just enable that or check out the other rules as well just to see what you might be missing out on",
    "start": "2188119",
    "end": "2193599"
  },
  {
    "text": "uh I will share these slides those are all links to places but also Google um I do have some other links uh",
    "start": "2193599",
    "end": "2201280"
  },
  {
    "text": "there was a whole paper released on cognitive complexity back in I think actually turned out to be released in 2017 um uh it's very readable it's",
    "start": "2201280",
    "end": "2208920"
  },
  {
    "text": "actually really great um I've read it a surprising number of times at this point uh and I don't tend to read computer",
    "start": "2208920",
    "end": "2214720"
  },
  {
    "text": "science papers at all um and it just it's it's it's great um so check out",
    "start": "2214720",
    "end": "2220480"
  },
  {
    "text": "that paper it does go into a bit more detail on how things work uh including some other measurements like um uh if",
    "start": "2220480",
    "end": "2226400"
  },
  {
    "text": "you're using uh um logical operators uh it doesn't incur extra points unless you're switching operators somewhere",
    "start": "2226400",
    "end": "2232880"
  },
  {
    "text": "halfway between the thing and I didn't want to get into that today because I didn't have any examples of switching uh",
    "start": "2232880",
    "end": "2238839"
  },
  {
    "text": "Boolean operators um go read my blog post on stop nesting teries and share it with",
    "start": "2238839",
    "end": "2244680"
  },
  {
    "text": "everybody you know because I never want to see one again uh I don't care how nicely it's formatted I never want to",
    "start": "2244680",
    "end": "2249880"
  },
  {
    "text": "see it again and finally if you also want confetti on your slides uh and you use rjs you can go get that on GitHub as",
    "start": "2249880",
    "end": "2256440"
  },
  {
    "text": "well uh and you can make it do this um so that's it um let's get out there",
    "start": "2256440",
    "end": "2262200"
  },
  {
    "text": "let's complexity in our functions uh thank you so much for joining me this morning again my name is f as I'm a developer Advocate Sona I'm around for",
    "start": "2262200",
    "end": "2268920"
  },
  {
    "text": "the rest of the week so I'm I'd be delighted to meet and chat with you about any of this uh or hit me up online",
    "start": "2268920",
    "end": "2274000"
  },
  {
    "text": "if you need that otherwise thank you so much",
    "start": "2274000",
    "end": "2278720"
  },
  {
    "text": "and I guess we've got time for questions if anybody wants to shout out I don't know if we have a microphone for questions",
    "start": "2283040",
    "end": "2289000"
  },
  {
    "text": "but there's some discussion at the back I might borrow it myself make sure",
    "start": "2289000",
    "end": "2294240"
  },
  {
    "text": "I can still be heard we do have a microphone for questions yeah if anybody has a question throw hands up or if you",
    "start": "2294240",
    "end": "2299599"
  },
  {
    "text": "just want to storm straight to L play uh that's also fine I think it's lunch yeah uh thanks Phil that was",
    "start": "2299599",
    "end": "2307200"
  },
  {
    "text": "really good a lot of good points there but ultimately I mean you're moving the complexity out of your method but then",
    "start": "2307200",
    "end": "2314119"
  },
  {
    "text": "you're bringing your complexity into how methods work with each other um does",
    "start": "2314119",
    "end": "2319319"
  },
  {
    "text": "sonar Cloud give you some tools to reduce complexities of like long classes",
    "start": "2319319",
    "end": "2324680"
  },
  {
    "text": "or things like that with too many methods so um Sona cloud in or Sona",
    "start": "2324680",
    "end": "2329920"
  },
  {
    "text": "things in general uh tend to point out uh uh how things go wrong and suggest ways in which to fix them uh and uh and",
    "start": "2329920",
    "end": "2336800"
  },
  {
    "text": "and fixing complexity by kind of extracting things to other places is just sort of part of that suggestion now",
    "start": "2336800",
    "end": "2342319"
  },
  {
    "text": "I agree uh the ISS here is that you are uh anything that you do uh in code",
    "start": "2342319",
    "end": "2347839"
  },
  {
    "text": "incurs some sort of cost right nothing is free uh when we're changing things",
    "start": "2347839",
    "end": "2352960"
  },
  {
    "text": "changing how they work um and so uh I think the important thing is that um",
    "start": "2352960",
    "end": "2358800"
  },
  {
    "text": "whilst you're considering how best to refactor something like this",
    "start": "2358800",
    "end": "2364280"
  },
  {
    "text": "um wait so yes you have to deal with uh talking",
    "start": "2364280",
    "end": "2370599"
  },
  {
    "text": "back and forth to functions uh instead of just having everything in line I agree with that uh and that does make it",
    "start": "2370599",
    "end": "2377960"
  },
  {
    "text": "complex in sort of a different um on a different axis however I think the benefits you",
    "start": "2377960",
    "end": "2386560"
  },
  {
    "text": "can gain from say extracting helper functions potentially testing them independently and the way that you name",
    "start": "2386560",
    "end": "2392440"
  },
  {
    "text": "them for the things that they do I think that over over rides uh the difficulty",
    "start": "2392440",
    "end": "2399240"
  },
  {
    "text": "of having duplicated code or overly complex code inside one thing that you have to read through if you can if if as",
    "start": "2399240",
    "end": "2406760"
  },
  {
    "text": "you are debugging a function you can pinpoint down to uh this one method call",
    "start": "2406760",
    "end": "2411839"
  },
  {
    "text": "in the in the middle rather than having to find it in the mess of uh of of conditionals and Loops that uh an overly",
    "start": "2411839",
    "end": "2418760"
  },
  {
    "text": "complex function would be uh then you can pin down where you actually need to fix it as well um and so yeah uh it's",
    "start": "2418760",
    "end": "2426640"
  },
  {
    "text": "it's not um moving code around uh doesn't fix everything but I",
    "start": "2426640",
    "end": "2433280"
  },
  {
    "text": "believe that sort of uh that naming and understanding of of uh both the abstractions and the things that you're",
    "start": "2433280",
    "end": "2439079"
  },
  {
    "text": "dealing with inside of that code ultimately uh means that the cost is",
    "start": "2439079",
    "end": "2444800"
  },
  {
    "text": "outweighed by the benefits does that make sense do we have",
    "start": "2444800",
    "end": "2450079"
  },
  {
    "text": "tools to fix that no I don't think so um but uh but we are we we do",
    "start": "2450079",
    "end": "2456079"
  },
  {
    "text": "certainly have um I mean we're going to son is definitely going to suggest that you like you're not making functions",
    "start": "2456079",
    "end": "2462440"
  },
  {
    "text": "with 18 different um uh arguments and things like that if as some way to to",
    "start": "2462440",
    "end": "2468760"
  },
  {
    "text": "make it so like uh writing um poor uh abstractions uh that don't help you out",
    "start": "2468760",
    "end": "2474839"
  },
  {
    "text": "in this kind of thing will be kind of called out in other rules and other ways um so so there is is stuff like that but",
    "start": "2474839",
    "end": "2480839"
  },
  {
    "text": "um in terms of the overall shape and size of things we're we're working on more architectural stuff but uh uh right",
    "start": "2480839",
    "end": "2487000"
  },
  {
    "text": "now it's um more at the function level yeah got one at the back there",
    "start": "2487000",
    "end": "2494400"
  },
  {
    "text": "microphone's coming to you yes more question uh does the cognitive complexity function in serent",
    "start": "2494400",
    "end": "2502280"
  },
  {
    "text": "have support for all languages that serint has so yes like C and Java and do it for",
    "start": "2502280",
    "end": "2511160"
  },
  {
    "text": "those major okay I couldn't promise you that it definitely does it for PL because I've never never seen a",
    "start": "2511160",
    "end": "2518359"
  },
  {
    "text": "line um if you uh if you want to check that out um like check rules.on",
    "start": "2518359",
    "end": "2524640"
  },
  {
    "text": "source.com for the languages you're looking for it in and you should be able to find it uh in that language but yeah",
    "start": "2524640",
    "end": "2530119"
  },
  {
    "text": "it does cover for most if not all uh I can't think of one that it wouldn't do but I also yeah I haven't",
    "start": "2530119",
    "end": "2536280"
  },
  {
    "text": "checked every single language myself yeah that's all good all right",
    "start": "2536280",
    "end": "2540839"
  },
  {
    "text": "thanks uh got one down the front",
    "start": "2541400",
    "end": "2546119"
  },
  {
    "text": "uh this might be a silly question but thinking about um function complexity",
    "start": "2548400",
    "end": "2553640"
  },
  {
    "text": "like bigo notation if you're dealing with recursive functions I'm just thinking oh will it flag you know an o",
    "start": "2553640",
    "end": "2560680"
  },
  {
    "text": "ofen or something that's more efficient like log ofen would how would it flag those things uh so cognitive complexity",
    "start": "2560680",
    "end": "2567760"
  },
  {
    "text": "doesn't uh concern itself with um time or memory complexity in that",
    "start": "2567760",
    "end": "2575000"
  },
  {
    "text": "respect um uh I mean it certainly does still count things but like the way I described it",
    "start": "2575000",
    "end": "2581720"
  },
  {
    "text": "and and as I pointed out in the kind of code when you have a a like a nested function for example it doesn't count",
    "start": "2581720",
    "end": "2587760"
  },
  {
    "text": "the function being nested itself as a as an additional score but anything that is happening within their scores on that uh",
    "start": "2587760",
    "end": "2593760"
  },
  {
    "text": "but no it is not over complex things uh in terms of time or space but on the",
    "start": "2593760",
    "end": "2599000"
  },
  {
    "text": "other hand like sometimes you can't write a piece of code without that either and uh and",
    "start": "2599000",
    "end": "2604359"
  },
  {
    "text": "the things that we try and check for are are sort of as as verifiable and we we aim for precision uh for accuracy in",
    "start": "2604359",
    "end": "2610720"
  },
  {
    "text": "terms of things it'd be really annoying if you had to write an order end cubed thing because you had to uh and it was",
    "start": "2610720",
    "end": "2616119"
  },
  {
    "text": "just being like this is gonna you don't know what I'm trying to do here so uh yeah we don't we don't",
    "start": "2616119",
    "end": "2622240"
  },
  {
    "text": "deal with that kind of stuff but um uh yeah it's much more on the um leans on",
    "start": "2622240",
    "end": "2628280"
  },
  {
    "text": "the side of trying to make the code base better for you to work in as opposed to uh be correct uh or not take forever",
    "start": "2628280",
    "end": "2638839"
  },
  {
    "text": "yeah like sometimes you can't avoid exactly yeah cool thank you yeah no",
    "start": "2638839",
    "end": "2644880"
  },
  {
    "text": "reason all right I think that is it well thank you so much again for joining us again I'm going to be around for the rest of the uh rest of week uh",
    "start": "2645200",
    "end": "2651800"
  },
  {
    "text": "apparently I'm running a karaoke party tomorrow night I'll see you",
    "start": "2651800",
    "end": "2656799"
  },
  {
    "text": "there e",
    "start": "2666040",
    "end": "2670079"
  }
]