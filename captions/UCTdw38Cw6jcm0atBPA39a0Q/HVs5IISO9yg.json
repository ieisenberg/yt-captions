[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "all right hello everyone i am adrian teca i'm based in las vegas",
    "start": "9840",
    "end": "15519"
  },
  {
    "text": "and if i'm unusually chipper it's because this is the first time a conference like this has been in favor of my time zone so i'm",
    "start": "15519",
    "end": "23359"
  },
  {
    "text": "very happy that it's the normal waking hours for me here it's around 3 pm for me today i'd like to talk to",
    "start": "23359",
    "end": "31119"
  },
  {
    "text": "you about nosql databases specifically i'm hoping to possibly re-shift your",
    "start": "31119",
    "end": "38559"
  },
  {
    "text": "mindset and maybe even get you to say yes to nosql databases so let's get to it",
    "start": "38559",
    "end": "47360"
  },
  {
    "start": "49000",
    "end": "152000"
  },
  {
    "text": "so as relational developers or developers who are used to working with",
    "start": "49840",
    "end": "55600"
  },
  {
    "text": "relational databases relational databases are probably your bread and butter they were mine they were the first data",
    "start": "55600",
    "end": "62879"
  },
  {
    "text": "model and type of database that i worked with when i started out as a software developer and that's kind of",
    "start": "62879",
    "end": "68880"
  },
  {
    "text": "just what we use right we didn't really have a need for anything else or we probably didn't learn anything else and so along with",
    "start": "68880",
    "end": "76799"
  },
  {
    "text": "that you know all the other parts of it kind of became second nature sql is your jam joins where necessary",
    "start": "76799",
    "end": "84479"
  },
  {
    "text": "data is relational that's why they're called relational databases and for the most part they they work",
    "start": "84479",
    "end": "91280"
  },
  {
    "text": "kind of but they they worked so when this new kid around the black",
    "start": "91280",
    "end": "96320"
  },
  {
    "text": "came in called nosql they're probably just like me like what is it why would i need this what exactly is",
    "start": "96320",
    "end": "103600"
  },
  {
    "text": "nosql and to that i say you're completely justified",
    "start": "103600",
    "end": "108960"
  },
  {
    "text": "i mean it's been used in so many different ways it's been interchanged in different ways we call it nosql",
    "start": "108960",
    "end": "116719"
  },
  {
    "text": "non-sql or non-sql however you like to say it non-relational sql not only sql",
    "start": "116719",
    "end": "123360"
  },
  {
    "text": "so with all of these different definitions and variations and mutations of what we",
    "start": "123360",
    "end": "129759"
  },
  {
    "text": "assume nosql is it's not really uh hard to see why a lot of people are not",
    "start": "129759",
    "end": "134879"
  },
  {
    "text": "distinct and clear about what is a definitive nosql databases",
    "start": "134879",
    "end": "140400"
  },
  {
    "text": "and but this is not uh a problem because there are different permutations",
    "start": "140400",
    "end": "146000"
  },
  {
    "text": "of it so keeping this in mind i like to think of it this way at least in um",
    "start": "146000",
    "end": "154319"
  },
  {
    "start": "152000",
    "end": "215000"
  },
  {
    "text": "in contrast in contrast to what relational developers think of and so nosql is basically a different",
    "start": "154319",
    "end": "161680"
  },
  {
    "text": "way of storing and modeling data than the regular form that we are used to now keep in",
    "start": "161680",
    "end": "168959"
  },
  {
    "text": "mind these databases the notion of nosql databases they've actually already existed for",
    "start": "168959",
    "end": "175200"
  },
  {
    "text": "quite some time in fact they already were around in the 1960s but it did not gain popularity and",
    "start": "175200",
    "end": "181760"
  },
  {
    "text": "surge into tech buzzword lan until about the late 2000s when",
    "start": "181760",
    "end": "187040"
  },
  {
    "text": "costs of storage have dramatically increased and that makes more sense because as",
    "start": "187040",
    "end": "192159"
  },
  {
    "text": "we'll see in a bit nosql databases have some characteristics that make it more pragmatic for storage to cost way",
    "start": "192159",
    "end": "199120"
  },
  {
    "text": "less than what it did before so if not tabular data then how do we model it what do we do",
    "start": "199120",
    "end": "205280"
  },
  {
    "text": "we're used to our nice structured tables and joins and foreign keys how else would we",
    "start": "205280",
    "end": "210959"
  },
  {
    "text": "model this kind of data well there are four different ways four common ways that you would find",
    "start": "210959",
    "end": "217040"
  },
  {
    "start": "215000",
    "end": "381000"
  },
  {
    "text": "that are related to no sql and nosql data models in particular so the first is the",
    "start": "217040",
    "end": "224000"
  },
  {
    "text": "document store this is where you can store data in hierarchical ways",
    "start": "224000",
    "end": "229120"
  },
  {
    "text": "and they're stored within json based documents i think i work for one that you may know",
    "start": "229120",
    "end": "235200"
  },
  {
    "text": "it's called mongodb but there are others a second",
    "start": "235200",
    "end": "240799"
  },
  {
    "text": "form of a data model for nosql is the key value store so this one at",
    "start": "240799",
    "end": "246959"
  },
  {
    "text": "least when i first started learning about all the different models was a little bit more self-explanatory",
    "start": "246959",
    "end": "252080"
  },
  {
    "text": "the literal keys and values and you would use these keys to quickly",
    "start": "252080",
    "end": "257199"
  },
  {
    "text": "query any of the data that you may need and it's so fast because you would probably hash those",
    "start": "257199",
    "end": "263120"
  },
  {
    "text": "keys to be able to get it quickly so think your redises your rocks",
    "start": "263120",
    "end": "268639"
  },
  {
    "text": "db your apache ignites next there's the wide column store you",
    "start": "268639",
    "end": "275120"
  },
  {
    "text": "they might be interchanged with columnar columnar stores i always",
    "start": "275120",
    "end": "281680"
  },
  {
    "text": "say that incorrectly i always get self-conscious when i say it because i think i'm saying it wrong i'm gonna say wide column store",
    "start": "281680",
    "end": "287040"
  },
  {
    "text": "and this is where related data is stored as a set of nested key value pairs within a",
    "start": "287040",
    "end": "292880"
  },
  {
    "text": "single column so for me when i first read that and even saw some of the diagrams that didn't really make sense to me but what",
    "start": "292880",
    "end": "299199"
  },
  {
    "text": "did make sense to me is if you imagine let's say you had a customer column and within that column you actually had",
    "start": "299199",
    "end": "306000"
  },
  {
    "text": "two things like name or address some sort of related data that you would want to query together now you might have another",
    "start": "306000",
    "end": "312000"
  },
  {
    "text": "column with completely different data but is related to that person or that",
    "start": "312000",
    "end": "317120"
  },
  {
    "text": "row id and let's say you're the product column that could include the item and the price so in the wide column strategy you would",
    "start": "317120",
    "end": "324880"
  },
  {
    "text": "then be able to query either via a user id or something which would equate to the row of that table but be able to quickly get",
    "start": "324880",
    "end": "332080"
  },
  {
    "text": "the actual group of data that you need in this wide column store so these are your ciladbs and your",
    "start": "332080",
    "end": "338720"
  },
  {
    "text": "cassandras and finally there are the graph store",
    "start": "338720",
    "end": "344479"
  },
  {
    "text": "models so this is where we store data in nodes and edges so nodes store the entities the nouns",
    "start": "344479",
    "end": "352400"
  },
  {
    "text": "the people the places the things uh that of the data that we're capturing",
    "start": "352400",
    "end": "357440"
  },
  {
    "text": "and the edges store the relationships or i like to call them the verbs of what is related among these things these",
    "start": "357440",
    "end": "364240"
  },
  {
    "text": "entities so these are your neo4js and your janus graph",
    "start": "364240",
    "end": "369280"
  },
  {
    "text": "so keeping in mind that these are a different way of modeling data and that they have a different approach",
    "start": "369280",
    "end": "375120"
  },
  {
    "text": "to storing data naturally the next question that usually comes to mind when we start discussing",
    "start": "375120",
    "end": "381120"
  },
  {
    "start": "381000",
    "end": "490000"
  },
  {
    "text": "this is all right so are nosql database is better than relational databases",
    "start": "381120",
    "end": "387440"
  },
  {
    "text": "well technically i'm paid to say yes but the real answer of course is it",
    "start": "387440",
    "end": "394000"
  },
  {
    "text": "depends the lovely answer that is right almost all of the time it depends",
    "start": "394000",
    "end": "399759"
  },
  {
    "text": "and so in order to truly understand why the differences matter and how we can",
    "start": "399759",
    "end": "406560"
  },
  {
    "text": "use some of the things we uh or use the differences in our decision making we need to get some",
    "start": "406560",
    "end": "414000"
  },
  {
    "text": "dependencies into this presentation in fact we need to import some dependencies into",
    "start": "414000",
    "end": "421520"
  },
  {
    "text": "this presentation about some of the fundamentals and i know if you've heard this before it",
    "start": "421520",
    "end": "427599"
  },
  {
    "text": "might just be a quick refresher but i promise you that laying these fundamentals down and",
    "start": "427599",
    "end": "432960"
  },
  {
    "text": "understanding them will help in the later part of this presentation and hopefully in the later course",
    "start": "432960",
    "end": "438960"
  },
  {
    "text": "when you are making a decision on whether or not to choose a nosql database for your system",
    "start": "438960",
    "end": "445360"
  },
  {
    "text": "so those three dependencies are going to be the cap theorem acid and base and before anyone says",
    "start": "445360",
    "end": "452400"
  },
  {
    "text": "anything before you start typing in the chat in slack and saying oh this has been outdated this has been debated yes i",
    "start": "452400",
    "end": "459280"
  },
  {
    "text": "have read those articles i've read martin klepman's response to uh to cap theorem i understand",
    "start": "459280",
    "end": "466240"
  },
  {
    "text": "but the point i want to make here is to the fundamentals still stand and they still uh give us a very good framework of at",
    "start": "466240",
    "end": "473599"
  },
  {
    "text": "least asking us or forcing us to ask the questions with ourselves and with our team on whether or not we",
    "start": "473599",
    "end": "480720"
  },
  {
    "text": "need some of these properties and things when we are deciding on a technology to",
    "start": "480720",
    "end": "485919"
  },
  {
    "text": "choose so keeping that in mind we'll go through them",
    "start": "485919",
    "end": "491360"
  },
  {
    "start": "490000",
    "end": "542000"
  },
  {
    "text": "so cap theorem also known as brewer's theorem based on the computer scientist eric",
    "start": "491360",
    "end": "496720"
  },
  {
    "text": "brewer who has projected this out into the world and so he states in a distributed system it is impossible",
    "start": "496720",
    "end": "504240"
  },
  {
    "text": "to have more than two of the following three properties that's consistency availability and",
    "start": "504240",
    "end": "510800"
  },
  {
    "text": "partition tolerance cap right because we just need more acronyms and tech so quickly what are",
    "start": "510800",
    "end": "518800"
  },
  {
    "text": "those because even these are contested in what they actually mean and at least for the context of this",
    "start": "518800",
    "end": "524240"
  },
  {
    "text": "presentation i'd like to tell you what i see them as they're what",
    "start": "524240",
    "end": "529760"
  },
  {
    "text": "i feel they should be consistency states that a read from any node is",
    "start": "529760",
    "end": "535760"
  },
  {
    "text": "guaranteed to return the most recent estate so what does that exactly mean let's say",
    "start": "535760",
    "end": "542640"
  },
  {
    "start": "542000",
    "end": "670000"
  },
  {
    "text": "i have a cluster and i have four nodes and in these four nodes these are four computers whatever",
    "start": "542640",
    "end": "548000"
  },
  {
    "text": "i'll call them nodes just to be more generic uh we can read and write to this cluster",
    "start": "548000",
    "end": "554320"
  },
  {
    "text": "and right now the current state of my cluster is uh it has hey there in all four of the nodes",
    "start": "554320",
    "end": "560080"
  },
  {
    "text": "that's the state that's the value of all four nodes now let's say i want to",
    "start": "560080",
    "end": "566160"
  },
  {
    "text": "update the value to comusta instead of hey there because i figured if for those",
    "start": "566160",
    "end": "572000"
  },
  {
    "text": "who already know cap theorem hey maybe you'll learn something new too so comista is hey",
    "start": "572000",
    "end": "577279"
  },
  {
    "text": "there or hello in tagalog and when we send this call when we send this operation to",
    "start": "577279",
    "end": "583120"
  },
  {
    "text": "my cluster what will happen is as expected it will probably update the first node",
    "start": "583120",
    "end": "588800"
  },
  {
    "text": "that it reaches that accepts the call but in an inconsistent system what could",
    "start": "588800",
    "end": "594160"
  },
  {
    "text": "happen is that before replication is finished we might actually acknowledge to the",
    "start": "594160",
    "end": "600240"
  },
  {
    "text": "client that hey i'm done i've written and this is inconsistent",
    "start": "600240",
    "end": "605360"
  },
  {
    "text": "because what if right after that we decided we wanted to read something and this is done before",
    "start": "605360",
    "end": "612720"
  },
  {
    "text": "the replication has finished and let's say that this read call was sent to node",
    "start": "612720",
    "end": "618079"
  },
  {
    "text": "3. well you can see the problem we're going to get the value hey there instead of kumusta so this is where we say it's an",
    "start": "618079",
    "end": "625440"
  },
  {
    "text": "inconsistent system because it has it we're receiving steel data we're not getting the guarantee of",
    "start": "625440",
    "end": "631360"
  },
  {
    "text": "the kamusta on all of the nodes that we are expecting contrast that to a",
    "start": "631360",
    "end": "636959"
  },
  {
    "text": "consistent system what would probably happen is we wouldn't acknowledge to the client that we were done",
    "start": "636959",
    "end": "642800"
  },
  {
    "text": "until it has been fully uh confirmed that everything has been replicated to the majority of the nodes",
    "start": "642800",
    "end": "649519"
  },
  {
    "text": "to all of the nodes depending on you know some really granular things like write safety and write preferences",
    "start": "649519",
    "end": "656079"
  },
  {
    "text": "and mongodb and all the other options but in a consistent system we would be guaranteed that no matter which call is",
    "start": "656079",
    "end": "663519"
  },
  {
    "text": "made and no matter which node accepts it we are going to get the same data so that's consistency",
    "start": "663519",
    "end": "670959"
  },
  {
    "start": "670000",
    "end": "758000"
  },
  {
    "text": "a read from any node is guaranteed to return the most recent state",
    "start": "670959",
    "end": "677040"
  },
  {
    "text": "next is availability so availability in the cap theorem states",
    "start": "677040",
    "end": "682640"
  },
  {
    "text": "that every request received by a non-failing node will",
    "start": "682640",
    "end": "687680"
  },
  {
    "text": "return a response meaning no errors or timeouts either",
    "start": "687680",
    "end": "692880"
  },
  {
    "text": "so let's go back to our cluster same four nodes same values all hey there",
    "start": "692880",
    "end": "698160"
  },
  {
    "text": "now in an available system uh if we made a call we would be able to",
    "start": "698160",
    "end": "705040"
  },
  {
    "text": "still receive a response despite having say two nodes go offline just like it did in my",
    "start": "705040",
    "end": "711040"
  },
  {
    "text": "cluster an available system would be able to write komusta and it it will",
    "start": "711040",
    "end": "717279"
  },
  {
    "text": "uh reconcile the um replication of this in the back end but to the client to the",
    "start": "717279",
    "end": "723360"
  },
  {
    "text": "front end it's it's always available so that's where we get the problem of it",
    "start": "723360",
    "end": "728560"
  },
  {
    "text": "could still be sending us stale data because it's always available and you'll see that with if we try to",
    "start": "728560",
    "end": "735200"
  },
  {
    "text": "say read this now and that read call went to let's say the third node we'd still get hey there so there's that",
    "start": "735200",
    "end": "741519"
  },
  {
    "text": "possibility of steel data in this particular system",
    "start": "741519",
    "end": "746560"
  },
  {
    "text": "but being available just means that even if there are nodes down in the cluster",
    "start": "746560",
    "end": "751600"
  },
  {
    "text": "we are able to still have a functioning system it doesn't break because two nodes are",
    "start": "751600",
    "end": "756839"
  },
  {
    "text": "down so availability every request received by a non-failing node is going to get a",
    "start": "756839",
    "end": "763360"
  },
  {
    "text": "response and lastly partition tolerance so",
    "start": "763360",
    "end": "768720"
  },
  {
    "text": "despite network partitions aka when connections are severed between nodes they can't",
    "start": "768720",
    "end": "774880"
  },
  {
    "text": "communicate to each other again this the system should still function",
    "start": "774880",
    "end": "781519"
  },
  {
    "text": "so back to our cluster we have four nodes hey there is all there that's everything's fine and dandy right",
    "start": "782000",
    "end": "790079"
  },
  {
    "text": "now let's say that some communication breaks between node one and node four there's no way",
    "start": "790079",
    "end": "796639"
  },
  {
    "text": "for them to talk to each other and uh you know if this needed to write or",
    "start": "796639",
    "end": "801920"
  },
  {
    "text": "replicate something it's not able to do so because the communication has been severed well a partition tolerant system",
    "start": "801920",
    "end": "809680"
  },
  {
    "text": "says that even if this state exists right now even if node 1 and node 4 can't talk to each other we're still",
    "start": "809680",
    "end": "815920"
  },
  {
    "text": "going to get a response the the system is still going to be functional for",
    "start": "815920",
    "end": "821360"
  },
  {
    "text": "the user so partition tolerance despite network",
    "start": "821360",
    "end": "828079"
  },
  {
    "start": "823000",
    "end": "980000"
  },
  {
    "text": "disconnectivity or severed connections between nodes systems should still function",
    "start": "828079",
    "end": "835279"
  },
  {
    "text": "so cap's theorem says that we should only choose between these two or we can only",
    "start": "835600",
    "end": "843040"
  },
  {
    "text": "have two out of the three we can only have two out of three of consistency availability and partition tolerance",
    "start": "843040",
    "end": "850959"
  },
  {
    "text": "and again we can argue that that is kind of being challenged right now with spanner but again we'll save that",
    "start": "850959",
    "end": "857199"
  },
  {
    "text": "for later so this means that this area right here",
    "start": "857199",
    "end": "863199"
  },
  {
    "text": "in the middle that we can't possibly have all three at least with a fundamental understanding that",
    "start": "863199",
    "end": "868639"
  },
  {
    "text": "most of us have known for a while so with this in mind this means that there",
    "start": "868639",
    "end": "875199"
  },
  {
    "text": "are several combinations left for us to deliberate on when we choose on how to architect our system but",
    "start": "875199",
    "end": "882560"
  },
  {
    "text": "do we really because of the nature of distributed systems",
    "start": "882560",
    "end": "888399"
  },
  {
    "text": "we really only have to choose between two options or we are only left with",
    "start": "888399",
    "end": "894560"
  },
  {
    "text": "one or the other choice that we need to deliberate on because one has kind of already been chosen for",
    "start": "894560",
    "end": "900399"
  },
  {
    "text": "us so one of the logical fallacies of distributed computing is that the",
    "start": "900399",
    "end": "907600"
  },
  {
    "text": "network is reliable you'll even see here it's listed as on the official wikipedia",
    "start": "907600",
    "end": "912720"
  },
  {
    "text": "of fallacies of distributed computing it's number one on dare that that the number one fallacy is the network is",
    "start": "912720",
    "end": "919279"
  },
  {
    "text": "reliable networks are not reliable they go down they go down many times it's unexpected",
    "start": "919279",
    "end": "927040"
  },
  {
    "text": "i know many of you have probably encountered some sort of issue with a video call",
    "start": "927040",
    "end": "932959"
  },
  {
    "text": "networks are unreliable and so because we understand that",
    "start": "932959",
    "end": "938480"
  },
  {
    "text": "network failures will occur and they will at some point happen to our system",
    "start": "938480",
    "end": "944399"
  },
  {
    "text": "it's it's a given we must tolerate partitions in a distributed system so this is why i",
    "start": "944399",
    "end": "950720"
  },
  {
    "text": "say partition tolerance is an automatic choice it's not left to us if we're going to work",
    "start": "950720",
    "end": "956320"
  },
  {
    "text": "with distributed systems it is chosen by default for us",
    "start": "956320",
    "end": "962639"
  },
  {
    "text": "so now we're left with two options right do we choose partition tolerant consistent systems or",
    "start": "962720",
    "end": "969759"
  },
  {
    "text": "do we choose partition tolerant available systems in other words which one are we willing to",
    "start": "969759",
    "end": "975600"
  },
  {
    "text": "sacrifice consistency or availability",
    "start": "975600",
    "end": "980399"
  },
  {
    "start": "980000",
    "end": "1208000"
  },
  {
    "text": "in partition tolerant consistent systems obviously we're sacrificing availability but here if we choose a system like this",
    "start": "980880",
    "end": "988240"
  },
  {
    "text": "or build a system like this when consistency cannot be ensured we will probably get",
    "start": "988240",
    "end": "995360"
  },
  {
    "text": "errors or timeouts and in this kind of system that should be acceptable because we care more about the data",
    "start": "995360",
    "end": "1002320"
  },
  {
    "text": "integrity rather than the availability of our system so if consistency is crucial to the user",
    "start": "1002320",
    "end": "1010079"
  },
  {
    "text": "experience then these are some factors that you would consider and maybe leaning towards",
    "start": "1010079",
    "end": "1015199"
  },
  {
    "text": "a partition tolerant consistent system so you have to decide are errors okay to",
    "start": "1015199",
    "end": "1020639"
  },
  {
    "text": "show the client or are they not is consistency literally the thing that matters most in",
    "start": "1020639",
    "end": "1026319"
  },
  {
    "text": "this application or is it not and that's why the example of financial transactions or financial",
    "start": "1026319",
    "end": "1033280"
  },
  {
    "text": "applications kind of uses this because we all want to make sure our money is in our bank accounts and it's the right",
    "start": "1033280",
    "end": "1039839"
  },
  {
    "text": "amount now if we go the other direction we save them consistency is not really",
    "start": "1039839",
    "end": "1046400"
  },
  {
    "text": "too important availability is way more important in our application in our system now we may not get errors",
    "start": "1046400",
    "end": "1054000"
  },
  {
    "text": "or timeouts but the problem here now is that the data you receive could be outdated so even though it's always",
    "start": "1054000",
    "end": "1061600"
  },
  {
    "text": "always on always available to the user what's more important in these systems is that",
    "start": "1061600",
    "end": "1067520"
  },
  {
    "text": "data accumulation the amount of processing and rights that you're able to do on this system is more important than",
    "start": "1067520",
    "end": "1074720"
  },
  {
    "text": "data integrity so in these cases it's it's where",
    "start": "1074720",
    "end": "1079760"
  },
  {
    "text": "eventual consistency is acceptable it's where everything does not have to be the same mutual state",
    "start": "1079760",
    "end": "1086080"
  },
  {
    "text": "correct at the same time it's if this is at some later point it gets to the right state that's okay and so",
    "start": "1086080",
    "end": "1094160"
  },
  {
    "text": "these are the some of the things that you have to consider when you are deciding between these kinds of trade-offs and one last",
    "start": "1094160",
    "end": "1101840"
  },
  {
    "text": "thing to note about this is that so when we we learned about this or maybe if you're hearing about this",
    "start": "1101840",
    "end": "1107120"
  },
  {
    "text": "for the first time it might seem like these are these very binary design decisions right you have",
    "start": "1107120",
    "end": "1113280"
  },
  {
    "text": "to sacrifice full availability you have to sacrifice full consistency and that's absolutely not the case in fact eric brewer himself",
    "start": "1113280",
    "end": "1120960"
  },
  {
    "text": "came back you know some years later it was like it's not really that that rigid what's happening more",
    "start": "1120960",
    "end": "1128720"
  },
  {
    "text": "and more nowadays is it's more like a balancing act what are the trade-offs that you are willing to make what are",
    "start": "1128720",
    "end": "1135120"
  },
  {
    "text": "the trade-offs that your system can make and are acceptable that's what we are struck by are trying to find now",
    "start": "1135120",
    "end": "1141520"
  },
  {
    "text": "but the fundamentals of this still stand where it allows us to ask those questions to get",
    "start": "1141520",
    "end": "1147440"
  },
  {
    "text": "to those answers to see what is worth uh sacrificing and what what's",
    "start": "1147440",
    "end": "1152720"
  },
  {
    "text": "what percentage or level of consistency and availability we want to balance",
    "start": "1152720",
    "end": "1158960"
  },
  {
    "text": "so the funniest thing about this is that while i was you know finishing up my slides on on this and",
    "start": "1159120",
    "end": "1164720"
  },
  {
    "text": "talking about consistency and availability and making sure all my animations are sparkly smooth at around 8 35 p.m last",
    "start": "1164720",
    "end": "1172160"
  },
  {
    "text": "night um i used slides.com to create my slides i used to use reveal js which is the",
    "start": "1172160",
    "end": "1178320"
  },
  {
    "text": "open source project that this is based on but it got way too tedious so i gave in and got slides.com and i",
    "start": "1178320",
    "end": "1185280"
  },
  {
    "text": "got this and this is the last thing i wanted to see at this point i was telling myself",
    "start": "1185280",
    "end": "1190320"
  },
  {
    "text": "you know what slides.com i'd actually i'd rather you be available right now",
    "start": "1190320",
    "end": "1195520"
  },
  {
    "text": "than consistent but alas we're still here i was still able to make my changes",
    "start": "1195520",
    "end": "1200799"
  },
  {
    "text": "and i only lost maybe a couple objects so it's a it's a win for me",
    "start": "1200799",
    "end": "1207840"
  },
  {
    "start": "1208000",
    "end": "1430000"
  },
  {
    "text": "great so now we've laid the foundation for cap ethereum we understand the trade-offs that we have to make",
    "start": "1209919",
    "end": "1216080"
  },
  {
    "text": "between consistency and availability in a system where we are",
    "start": "1216080",
    "end": "1222159"
  },
  {
    "text": "now assuming that partition tolerance is default it's by nature it's a distributed system that is chosen for us",
    "start": "1222159",
    "end": "1227919"
  },
  {
    "text": "it has to be that way the next thing that we need to understand is the acid properties",
    "start": "1227919",
    "end": "1235360"
  },
  {
    "text": "versus base properties so you've seen these acronyms before maybe or if you've ever done any kind of",
    "start": "1235360",
    "end": "1240880"
  },
  {
    "text": "research on databases you'll you'll see this somewhere and what i want to make very clear",
    "start": "1240880",
    "end": "1246400"
  },
  {
    "text": "is that these are not one-to-one direct comparisons of the properties of",
    "start": "1246400",
    "end": "1252480"
  },
  {
    "text": "each other they are more like a set of guidelines that you again have to decide if it is right for",
    "start": "1252480",
    "end": "1259679"
  },
  {
    "text": "your system or not so the consistency model in acid",
    "start": "1259679",
    "end": "1266400"
  },
  {
    "text": "very quickly a atomic all operations in a transaction succeed",
    "start": "1266400",
    "end": "1271600"
  },
  {
    "text": "otherwise roll back the entire operation either it all happens or it doesn't at all",
    "start": "1271600",
    "end": "1276880"
  },
  {
    "text": "and then for c consistent meaning upon the completed transaction the database is structurally sound",
    "start": "1276880",
    "end": "1283840"
  },
  {
    "text": "meaning that the data should be in a consistent state both before and after a transaction i is isolated",
    "start": "1283840",
    "end": "1291440"
  },
  {
    "text": "that means if you have concurrently running transactions they shouldn't affect each other they shouldn't contend",
    "start": "1291440",
    "end": "1296480"
  },
  {
    "text": "with one another and the d stands for durable so upon a completed transaction despite",
    "start": "1296480",
    "end": "1302159"
  },
  {
    "text": "any failures the results that happen should be permanent so meaning if there are any hardware or",
    "start": "1302159",
    "end": "1309440"
  },
  {
    "text": "software failures any changes that have been committed to the database should still remain so as you can",
    "start": "1309440",
    "end": "1317200"
  },
  {
    "text": "kind of sense or if you've worked with this or you know you needed this in your systems you'll know that these are are very",
    "start": "1317200",
    "end": "1323760"
  },
  {
    "text": "rigid they're almost like a pessimistic model a pessimistic consistency model that you",
    "start": "1323760",
    "end": "1328960"
  },
  {
    "text": "need to guarantee and these are very much directly related to the transactions themselves in databases",
    "start": "1328960",
    "end": "1335200"
  },
  {
    "text": "so that's one thing to keep in mind because these acid guarantees kind of imply not always but",
    "start": "1335200",
    "end": "1341919"
  },
  {
    "text": "imply that right safety is more important for you",
    "start": "1341919",
    "end": "1347840"
  },
  {
    "text": "now if we compare the base properties base ba basic availability means the",
    "start": "1347840",
    "end": "1354159"
  },
  {
    "text": "database appears to work mostly it's mostly available it's mostly there the s stands for soft state which means that",
    "start": "1354159",
    "end": "1360880"
  },
  {
    "text": "the database state you need to be aware that it could change over time and due to eventual consistency and also",
    "start": "1360880",
    "end": "1367760"
  },
  {
    "text": "if there are no inputs that are happening at the moment and e itself is eventual consistency",
    "start": "1367760",
    "end": "1374000"
  },
  {
    "text": "so the database will be consistent at some later point so knowing all of this you can",
    "start": "1374000",
    "end": "1381120"
  },
  {
    "text": "already see that these are much looser properties they're not as rigid as acid and in fact a lot of",
    "start": "1381120",
    "end": "1389039"
  },
  {
    "text": "um research has shown that nosql databases kind of naturally fall more into the",
    "start": "1389039",
    "end": "1395280"
  },
  {
    "text": "base properties because they um have those more lacks uh guidelines than acid but",
    "start": "1395280",
    "end": "1403200"
  },
  {
    "text": "these are again things that you need to understand and be aware of because if you can get your team and",
    "start": "1403200",
    "end": "1410880"
  },
  {
    "text": "yourself to acknowledge and answer these questions of what your system actually needs you'll actually be better off in the",
    "start": "1410880",
    "end": "1416960"
  },
  {
    "text": "long run when we finally get to the point of choosing a nosql technology",
    "start": "1416960",
    "end": "1423360"
  },
  {
    "text": "if you ever get to a point and if it makes sense for you so all make sense very very soon",
    "start": "1423360",
    "end": "1431679"
  },
  {
    "start": "1430000",
    "end": "1472000"
  },
  {
    "text": "so we have spoken about cap theorem we've spoken about acid we've spoken about base so now",
    "start": "1431679",
    "end": "1438960"
  },
  {
    "text": "we can finally get into the what i call the three-step guide of ditching relational databases so",
    "start": "1438960",
    "end": "1446000"
  },
  {
    "text": "number one now that we have the fundamentals covered the first thing that we need to discuss",
    "start": "1446000",
    "end": "1452480"
  },
  {
    "text": "is is nosql actually the way to go in the very end is this even a you know this is the",
    "start": "1452480",
    "end": "1458960"
  },
  {
    "text": "first question you should ask and start with because this will not only cut you off short uh this will",
    "start": "1458960",
    "end": "1467039"
  },
  {
    "text": "also lead the way into whether or not nosql databases should be the way to go",
    "start": "1467039",
    "end": "1473200"
  },
  {
    "start": "1472000",
    "end": "1615000"
  },
  {
    "text": "and how do you do that well there are more things that you have to consider but for this first step what you really",
    "start": "1473200",
    "end": "1479760"
  },
  {
    "text": "need to take a look at is your data specifically four characteristics of your data",
    "start": "1479760",
    "end": "1485360"
  },
  {
    "text": "and what how they describe your data so when you're determining whether or not",
    "start": "1485360",
    "end": "1490880"
  },
  {
    "text": "nosql is the way to go you want to look at your data volume your data velocity",
    "start": "1490880",
    "end": "1496559"
  },
  {
    "text": "your data variety and your data valence and as a general rule very quick tldr",
    "start": "1496559",
    "end": "1504000"
  },
  {
    "text": "if you have large data volume if you have high data velocity if you have",
    "start": "1504000",
    "end": "1510799"
  },
  {
    "text": "volatility or high volatility varied types of varieties of data and if you have a",
    "start": "1510799",
    "end": "1517279"
  },
  {
    "text": "high date of valence then generally nosql is probably the way to go for",
    "start": "1517279",
    "end": "1523200"
  },
  {
    "text": "you so that's like general rule although there could definitely be some",
    "start": "1523200",
    "end": "1528960"
  },
  {
    "text": "exceptions but for the most part if you follow along that spectrum nosql is probably a",
    "start": "1528960",
    "end": "1534799"
  },
  {
    "text": "good bet so what do these mean exactly there's all these words and i like to structure things and",
    "start": "1534799",
    "end": "1541120"
  },
  {
    "text": "and use alliteration here with all the same letters but what does this actually mean so to start data volume meaning the size",
    "start": "1541120",
    "end": "1548640"
  },
  {
    "text": "of your stored data how large is your stored data and if you look at",
    "start": "1548640",
    "end": "1553679"
  },
  {
    "text": "the data sets that we have now large data sets are becoming even larger they are so large in fact",
    "start": "1553679",
    "end": "1560640"
  },
  {
    "text": "that they are almost becoming too unwieldy when we store them in a traditional relational database",
    "start": "1560640",
    "end": "1567120"
  },
  {
    "text": "model so what that means is whenever we have to query something",
    "start": "1567120",
    "end": "1572480"
  },
  {
    "text": "whenever we have to query against a really large volume of data if it's in a relational model and if it",
    "start": "1572480",
    "end": "1579600"
  },
  {
    "text": "has been modeled the way we are used to which means there's going to be lots of tables there's going to be a high number of",
    "start": "1579600",
    "end": "1586000"
  },
  {
    "text": "joins then it's going to be very very very slow so it's not a fault of relational",
    "start": "1586000",
    "end": "1592799"
  },
  {
    "text": "databases themselves but rather the data model so in this particular case i say if your",
    "start": "1592799",
    "end": "1599520"
  },
  {
    "text": "volume is large no sql is probably a better option than a relational data model",
    "start": "1599520",
    "end": "1606640"
  },
  {
    "text": "because they are much better at handling today's larger data sets they've been built to improve upon that fact",
    "start": "1606640",
    "end": "1614879"
  },
  {
    "start": "1615000",
    "end": "1761000"
  },
  {
    "text": "next is data velocity and what i mean by this is the rate at which your data changes",
    "start": "1616559",
    "end": "1622320"
  },
  {
    "text": "over time so there's two parts to this and the first one",
    "start": "1622320",
    "end": "1627600"
  },
  {
    "text": "is if um you have high right lows meaning if the rate at which your actual data",
    "start": "1627600",
    "end": "1632960"
  },
  {
    "text": "points change meaning how many edits you have and how much how many times you have to write to the database if that is high",
    "start": "1632960",
    "end": "1640559"
  },
  {
    "text": "and if the actual data structure your data model your schemas change constantly",
    "start": "1640559",
    "end": "1647039"
  },
  {
    "text": "over time if both of those are high then again it's another consideration uh leaning towards nosql",
    "start": "1647039",
    "end": "1654399"
  },
  {
    "text": "being the better option for you think about it so if you pair the first characteristic",
    "start": "1654399",
    "end": "1661840"
  },
  {
    "text": "which is having a large volume of data you pair that high volume with really",
    "start": "1661840",
    "end": "1667120"
  },
  {
    "text": "constant high right loads you're basically pushing whatever database that you're",
    "start": "1667120",
    "end": "1672480"
  },
  {
    "text": "using to deal with this amount of surging uh database activity you're going to be",
    "start": "1672480",
    "end": "1678640"
  },
  {
    "text": "peaking all the time and then when you talk about the data structure you have",
    "start": "1678640",
    "end": "1684399"
  },
  {
    "text": "the changes that occur over time and this can happen for many reasons",
    "start": "1684399",
    "end": "1689679"
  },
  {
    "text": "businesses move fast organizations acquire data data acquisition is experimental",
    "start": "1689679",
    "end": "1696320"
  },
  {
    "text": "you realize that the model you had was not correct or maybe you have new things that you need to capture",
    "start": "1696320",
    "end": "1702159"
  },
  {
    "text": "and again if you've worked with this in a relational model you know the pain of migrating a data",
    "start": "1702159",
    "end": "1708640"
  },
  {
    "text": "model especially if it's only just adding one extra um field and into the table",
    "start": "1708640",
    "end": "1715039"
  },
  {
    "text": "with all of these uh you have to consider that if you have these characteristics",
    "start": "1715039",
    "end": "1720799"
  },
  {
    "text": "if you have large volumes of data that you're dealing with if your velocity is high meaning you know you have a lot of",
    "start": "1720799",
    "end": "1727200"
  },
  {
    "text": "rights and you know that your data model is changing constantly you almost require a database",
    "start": "1727200",
    "end": "1732559"
  },
  {
    "text": "that is optimized for the high right loads and for the flexible data models",
    "start": "1732559",
    "end": "1738240"
  },
  {
    "text": "those are two things that a relational database is not usually prepared to handle and even more",
    "start": "1738240",
    "end": "1743679"
  },
  {
    "text": "so if they're not properly tuned so it's not saying they're absolutely not possible",
    "start": "1743679",
    "end": "1748799"
  },
  {
    "text": "it's just saying no sql databases have been built with this in mind and so for that if you do have high",
    "start": "1748799",
    "end": "1754399"
  },
  {
    "text": "velocity then nosql is probably a better way to go",
    "start": "1754399",
    "end": "1760720"
  },
  {
    "start": "1761000",
    "end": "1866000"
  },
  {
    "text": "thirdly data variety if you have high data variety meaning then the types of data that you",
    "start": "1762640",
    "end": "1769120"
  },
  {
    "text": "are storing is super varied it's it's all over the place it's not homogeneous at all",
    "start": "1769120",
    "end": "1774399"
  },
  {
    "text": "then again no sql is probably the way to go data is so diverse there's dense data",
    "start": "1774399",
    "end": "1782640"
  },
  {
    "text": "and sparse data there's data that's connected and disconnected data that is structured semi-structured",
    "start": "1782640",
    "end": "1789120"
  },
  {
    "text": "irregularly structured i mean with the amount of data that we are capturing now",
    "start": "1789120",
    "end": "1794559"
  },
  {
    "text": "from all kinds of different devices from all kinds of different sources there are just so many different ways",
    "start": "1794559",
    "end": "1800640"
  },
  {
    "text": "that the data can come in and for that we we have four data models that i spoke",
    "start": "1800640",
    "end": "1807279"
  },
  {
    "text": "about earlier which again have adopted their own strategy to deal with the how to handle this variety of",
    "start": "1807279",
    "end": "1814880"
  },
  {
    "text": "data that we see and i know that there are databases that can accommodate say",
    "start": "1814880",
    "end": "1821520"
  },
  {
    "text": "json for example but they're kind of always built as an afterthought so meaning yes you can store json in",
    "start": "1821520",
    "end": "1828320"
  },
  {
    "text": "there in a relational database but you're not going to get the native capabilities that you would in nosql",
    "start": "1828320",
    "end": "1834159"
  },
  {
    "text": "databases so for example in mongodb you can do embedded searches within",
    "start": "1834159",
    "end": "1839760"
  },
  {
    "text": "embedded documents or you can have automatic indexes on nested fields and that would be",
    "start": "1839760",
    "end": "1845520"
  },
  {
    "text": "something that's very difficult to do and certainly not native in some sort of add-on",
    "start": "1845520",
    "end": "1852000"
  },
  {
    "text": "or a database that does offer the storage of json and so for that if your data is all over",
    "start": "1852000",
    "end": "1858480"
  },
  {
    "text": "the place it's again one thing to consider that nosql is probably the way to go",
    "start": "1858480",
    "end": "1865840"
  },
  {
    "start": "1866000",
    "end": "2040000"
  },
  {
    "text": "and finally data valence so that's here i have it as connections",
    "start": "1867279",
    "end": "1873279"
  },
  {
    "text": "that exist within your data it's the ratio of connections that exist within your data",
    "start": "1873279",
    "end": "1879120"
  },
  {
    "text": "compared to the total number of possible connections so when i first researched this and was",
    "start": "1879120",
    "end": "1885760"
  },
  {
    "text": "learning about this i'm like that doesn't make any sense to me so i i hopefully these things will help",
    "start": "1885760",
    "end": "1891600"
  },
  {
    "text": "so fun fact latin root of valence is the same as value or valere which means to be strong",
    "start": "1891600",
    "end": "1899360"
  },
  {
    "text": "to be powerful influential or healthy now when i think about this in different spaces",
    "start": "1899360",
    "end": "1905519"
  },
  {
    "text": "i think it starts to make more sense in chemistry valence is the combining power of an",
    "start": "1905519",
    "end": "1912080"
  },
  {
    "text": "element in psychology valence means the intrinsic attractiveness of an object",
    "start": "1912080",
    "end": "1919279"
  },
  {
    "text": "and in linguistics it's the number of elements that a word combines so keeping",
    "start": "1919279",
    "end": "1926159"
  },
  {
    "text": "those kind of parallel definitions of it in the context of data valence is the",
    "start": "1926159",
    "end": "1932320"
  },
  {
    "text": "tendency of the individual data to connect as well as the overall connectedness of",
    "start": "1932320",
    "end": "1939440"
  },
  {
    "text": "the data set itself and if that still doesn't make sense because i know it took me a while the explain",
    "start": "1939440",
    "end": "1946559"
  },
  {
    "text": "like like m5 version is the higher the valence on your data set the more",
    "start": "1946559",
    "end": "1951600"
  },
  {
    "text": "connections there are within your data that's as simple as i could put it if you have a better one select me",
    "start": "1951600",
    "end": "1959279"
  },
  {
    "text": "so keeping that in mind knowing hopefully understanding what valence means",
    "start": "1959279",
    "end": "1964960"
  },
  {
    "text": "over time the data that we collect especially if we are a data heavy company they can it can",
    "start": "1964960",
    "end": "1971519"
  },
  {
    "text": "become very very dense we collect a lot of data over time and it can become",
    "start": "1971519",
    "end": "1976640"
  },
  {
    "text": "very very complex and when we continue to aggregate all this data and",
    "start": "1976640",
    "end": "1982159"
  },
  {
    "text": "run all of these analytics on it it can become way more unevenly connected meaning",
    "start": "1982159",
    "end": "1988480"
  },
  {
    "text": "the relationships between them can kind of be like five percent connected but then this one",
    "start": "1988480",
    "end": "1993519"
  },
  {
    "text": "could be 25 percent connected and then maybe some data from five years ago",
    "start": "1993519",
    "end": "1998720"
  },
  {
    "text": "is somehow connected to data you're going to collect in the future these kinds of connections these kinds",
    "start": "1998720",
    "end": "2004000"
  },
  {
    "text": "of relationships they become much much harder to analyze and moreover",
    "start": "2004000",
    "end": "2009360"
  },
  {
    "text": "break down especially if you are using analytics tools that for the most part have been built on top",
    "start": "2009360",
    "end": "2015919"
  },
  {
    "text": "of the relational data model so for scenarios like this new sql databases",
    "start": "2015919",
    "end": "2021679"
  },
  {
    "text": "may probably come to the rescue for you specifically graph databases because they are way more expressive in",
    "start": "2021679",
    "end": "2030159"
  },
  {
    "text": "in showing you the connections and relationships of your data especially if they are this complex and",
    "start": "2030159",
    "end": "2035600"
  },
  {
    "text": "this irregular",
    "start": "2035600",
    "end": "2038559"
  },
  {
    "text": "so is nosql the way to go again if you are on that top spectrum",
    "start": "2041440",
    "end": "2048000"
  },
  {
    "text": "there if you have large data volume if you have a high velocity of data meaning that",
    "start": "2048000",
    "end": "2054320"
  },
  {
    "text": "the you have a lot of rights the data points in that you're storing changes often as well as your schema your data model",
    "start": "2054320",
    "end": "2060960"
  },
  {
    "text": "changes often maybe you're adding fields left and right taking them out if if that's high if you have",
    "start": "2060960",
    "end": "2068240"
  },
  {
    "text": "a wide variety of data of volatility a high volatility of data meaning your",
    "start": "2068240",
    "end": "2073839"
  },
  {
    "text": "data is all over the place it's varied it's not as uniform as you would expect it to be and",
    "start": "2073839",
    "end": "2079358"
  },
  {
    "text": "if your data valence is high meaning you have a lot of connections that may not be as easily modeled in a relational",
    "start": "2079359",
    "end": "2087760"
  },
  {
    "text": "database then yes yes nosql is probably the way to go it's a general",
    "start": "2087760",
    "end": "2094960"
  },
  {
    "text": "rough rule there are of course exceptions but in in essence yes you can be confident that that is",
    "start": "2094960",
    "end": "2102400"
  },
  {
    "text": "the way to go however if you're on the opposite side",
    "start": "2102400",
    "end": "2107920"
  },
  {
    "text": "if your volume is not that large if you're not you know having to deal with web scale if if your",
    "start": "2107920",
    "end": "2113599"
  },
  {
    "text": "velocity of data is pretty consistent or predictable you don't need to you know that it's not",
    "start": "2113599",
    "end": "2119760"
  },
  {
    "text": "going to change often if the data that you have is more uniform it's more homogeneous it's",
    "start": "2119760",
    "end": "2125520"
  },
  {
    "text": "you know what kind of data you're going to be getting and if the connections that you have",
    "start": "2125520",
    "end": "2131200"
  },
  {
    "text": "can be expressed uh just fine with the relational databases then sorry to say but it's probably not",
    "start": "2131200",
    "end": "2139599"
  },
  {
    "text": "the way to go you probably are going to be better off just sticking with a relational database so yes the title of my talk may have",
    "start": "2139599",
    "end": "2147119"
  },
  {
    "text": "been like i work for mongodb and i'm going to sell you nosql but that's not the case i want to just show you",
    "start": "2147119",
    "end": "2152960"
  },
  {
    "text": "at least a framework a guideline some steps that you can hopefully take with",
    "start": "2152960",
    "end": "2158400"
  },
  {
    "text": "yourself and your team when you're brainstorming to kind of get these kinds of questions answered to see if it's really right",
    "start": "2158400",
    "end": "2164880"
  },
  {
    "text": "for you so great now we know is nosql the way to",
    "start": "2164880",
    "end": "2171440"
  },
  {
    "start": "2167000",
    "end": "2360000"
  },
  {
    "text": "go based on these four characteristics so step one check let's say that we find ourselves",
    "start": "2171440",
    "end": "2177599"
  },
  {
    "text": "on the higher end of those characteristics so we move on to the next step",
    "start": "2177599",
    "end": "2183280"
  },
  {
    "text": "and i like to call that acid or base and again i want to make very clear",
    "start": "2183280",
    "end": "2189200"
  },
  {
    "text": "these are not one-to-one comparisons i like to think of them as the the set of properties that i think the system",
    "start": "2189200",
    "end": "2195920"
  },
  {
    "text": "requires and so when we're thinking about these the questions that i think are the most",
    "start": "2195920",
    "end": "2201359"
  },
  {
    "text": "important when deciding among these these two models is",
    "start": "2201359",
    "end": "2206480"
  },
  {
    "text": "these four values here so if you know that you need safe rights",
    "start": "2206480",
    "end": "2213760"
  },
  {
    "text": "if you know that those need to be prioritized over fast rights if you know you have money to spend on",
    "start": "2213760",
    "end": "2220240"
  },
  {
    "text": "high-end hardware or know that you're going to be scaling vertically and if you know that you need a",
    "start": "2220240",
    "end": "2226000"
  },
  {
    "text": "pessimistic model a rigid model because of the right safety that you need",
    "start": "2226000",
    "end": "2231440"
  },
  {
    "text": "then okay fine we'll go with relational databases because again the fact of the",
    "start": "2231440",
    "end": "2236720"
  },
  {
    "text": "matter is it's probably going to be the best bet for you they're uh they have been built with",
    "start": "2236720",
    "end": "2243200"
  },
  {
    "text": "these properties in mind and they have just been working that way for a while so if these are the kinds of guarantees",
    "start": "2243200",
    "end": "2249680"
  },
  {
    "text": "that you require in your system then yes we're going to go to relational",
    "start": "2249680",
    "end": "2254839"
  },
  {
    "text": "databases it is worth noting though just a little",
    "start": "2254839",
    "end": "2260320"
  },
  {
    "text": "side note that there are some nosql um databases that do offer asset",
    "start": "2260320",
    "end": "2266880"
  },
  {
    "text": "guarantees to an extent so for example neo4j the graph database",
    "start": "2266880",
    "end": "2272400"
  },
  {
    "text": "does offer acid compliance in their graph databases same with mongodb at least via version",
    "start": "2272400",
    "end": "2279280"
  },
  {
    "text": "4.0 and higher we do have multi-document acid guarantees",
    "start": "2279280",
    "end": "2285839"
  },
  {
    "text": "now if you're thinking okay well the system doesn't need to be that rigid what we're building here",
    "start": "2287760",
    "end": "2293839"
  },
  {
    "text": "doesn't really need that what we need to focus on is fast rights we need to prioritize how",
    "start": "2293839",
    "end": "2300079"
  },
  {
    "text": "much we can write and how much we can get stored in our database the safety of it is not as important it doesn't mean",
    "start": "2300079",
    "end": "2306800"
  },
  {
    "text": "we're going to neglect it it doesn't mean we're not going to have it at all it just means it's not a priority",
    "start": "2306800",
    "end": "2312400"
  },
  {
    "text": "and if we know that this model that we require can be more optimistic if we know that",
    "start": "2312400",
    "end": "2318880"
  },
  {
    "text": "it can be more loose than the more rigid acid properties that we have seen",
    "start": "2318880",
    "end": "2324000"
  },
  {
    "text": "then base is probably the um set of guidelines that you want to look for when you are choosing",
    "start": "2324000",
    "end": "2330480"
  },
  {
    "text": "whether or not to go with a nosql technology or no sql database and for that reason",
    "start": "2330480",
    "end": "2336000"
  },
  {
    "text": "because most new sql databases do fulfill these properties these base properties",
    "start": "2336000",
    "end": "2342480"
  },
  {
    "text": "then that's another reason to say yes you have passed step two uh you fall within those those",
    "start": "2342480",
    "end": "2349200"
  },
  {
    "text": "lines and you can probably move ahead and keep going towards",
    "start": "2349200",
    "end": "2354640"
  },
  {
    "text": "some kind of nosql tech",
    "start": "2354640",
    "end": "2359279"
  },
  {
    "text": "so we have gotten through nosql databases we know that if we have high",
    "start": "2361280",
    "end": "2367760"
  },
  {
    "text": "data volume if you have high data variety our valence is high and we have a high velocity of",
    "start": "2367760",
    "end": "2374640"
  },
  {
    "text": "data that has checked we get to the next point if we know that the models that we need the properties that",
    "start": "2374640",
    "end": "2382320"
  },
  {
    "text": "we need fall more in line with the base properties they're a little bit more loose a little bit more optimistic we",
    "start": "2382320",
    "end": "2389119"
  },
  {
    "text": "can finally now get to the third step which is where i think a lot of us tend to start",
    "start": "2389119",
    "end": "2394640"
  },
  {
    "text": "and that is the cap filter so this is where i think a lot of us start",
    "start": "2394640",
    "end": "2401119"
  },
  {
    "text": "we just go what are we using and we don't really think of anything else and i think that's completely",
    "start": "2401119",
    "end": "2407599"
  },
  {
    "text": "turned uh turned around we shouldn't start with the tech we shouldn't say oh we're going to use",
    "start": "2407599",
    "end": "2412800"
  },
  {
    "text": "that immediately because i read some tweets somewhere that it's amazing and it's going to be great uh i i don't",
    "start": "2412800",
    "end": "2419440"
  },
  {
    "text": "think we should start that way i think that if we have gone through the first two steps of",
    "start": "2419440",
    "end": "2424560"
  },
  {
    "text": "asking ourselves of really truly understanding what our system requires by the time you get to this",
    "start": "2424560",
    "end": "2430960"
  },
  {
    "text": "step it's almost then it should almost be very very quick because",
    "start": "2430960",
    "end": "2436400"
  },
  {
    "text": "if you know that you need a partition tolerant consistent consistent system for example then you",
    "start": "2436400",
    "end": "2443280"
  },
  {
    "text": "can start to narrow down the available systems that fulfill that and then once you have that you can",
    "start": "2443280",
    "end": "2450319"
  },
  {
    "text": "narrow down even further via the data model that you find will be the most useful for you",
    "start": "2450319",
    "end": "2456240"
  },
  {
    "text": "so for example if we have gotten to this point it's almost like a a funnel or a sieve that has said okay",
    "start": "2456240",
    "end": "2462880"
  },
  {
    "text": "not move this out of the way move this out of the way and we're now excuse me at step three and we are",
    "start": "2462880",
    "end": "2470079"
  },
  {
    "text": "we have answered all those questions we know that we need at the very end a partition tolerant",
    "start": "2470079",
    "end": "2475359"
  },
  {
    "text": "consistent system now the only thing you'll have to do is decide what data model to use so you know if you know you need a",
    "start": "2475359",
    "end": "2481599"
  },
  {
    "text": "document database hey mongodb i think it's a great choice and maybe a little bit biased but",
    "start": "2481599",
    "end": "2487520"
  },
  {
    "text": "that's something that is i think a little bit easier to go through versus starting with mongodb then researching",
    "start": "2487520",
    "end": "2493920"
  },
  {
    "text": "everything else and then finding out oh this doesn't have something that we need or some other characteristic or let's",
    "start": "2493920",
    "end": "2500400"
  },
  {
    "text": "say you needed some kind of a key value store then you would go to redis and same thing with the other different",
    "start": "2500400",
    "end": "2506640"
  },
  {
    "text": "data models at this point it should be much easier for you to decide",
    "start": "2506640",
    "end": "2512160"
  },
  {
    "text": "which one to go with because you'll have your little checklist of things that you know you",
    "start": "2512160",
    "end": "2518400"
  },
  {
    "text": "need from the previous two steps and you'll know that you can kind of",
    "start": "2518400",
    "end": "2523920"
  },
  {
    "text": "have a framework and check against those things when you are eventually researching the um tech that",
    "start": "2523920",
    "end": "2529680"
  },
  {
    "text": "you need now on the other hand if you need a partition tolerant available system and you know you need a wide column store",
    "start": "2529680",
    "end": "2535680"
  },
  {
    "text": "cassandra's your best bet or you could start looking at couch couchdb at amazon dynamodb react again it's the",
    "start": "2535680",
    "end": "2543440"
  },
  {
    "text": "same thing where if you know you've gotten to this point the last thing to do",
    "start": "2543440",
    "end": "2548480"
  },
  {
    "text": "is see which data model fits for you and then find the database that matches that so",
    "start": "2548480",
    "end": "2556480"
  },
  {
    "start": "2556000",
    "end": "2695000"
  },
  {
    "text": "at the end of this three-step guide um what i have hopefully shown here is",
    "start": "2556560",
    "end": "2563359"
  },
  {
    "text": "that it's not necessarily a foolproof way to say this is the right tech that we're going",
    "start": "2563359",
    "end": "2570720"
  },
  {
    "text": "to use not at all this is more of a framework",
    "start": "2570720",
    "end": "2576240"
  },
  {
    "text": "almost an exercise for your team to be able to say do we know the answers to these questions do we know what we truly need",
    "start": "2576240",
    "end": "2583920"
  },
  {
    "text": "and do we know that we're not going to be biased or swayed any one way because of superfluous reasons",
    "start": "2583920",
    "end": "2591040"
  },
  {
    "text": "if we can answer the questions in uh step one which is is our data volume high velocity high",
    "start": "2591040",
    "end": "2598480"
  },
  {
    "text": "valence high variety high then you can be a little bit more confident that whatever whatever nosql database you end",
    "start": "2598480",
    "end": "2604880"
  },
  {
    "text": "up choosing it's going to work for you same thing you kind of just filter it down even",
    "start": "2604880",
    "end": "2610960"
  },
  {
    "text": "further if you go through the acid and base exercise and see which properties that you need",
    "start": "2610960",
    "end": "2616960"
  },
  {
    "text": "again you're just more solid and you're more confident in your decision because you are aware of the properties",
    "start": "2616960",
    "end": "2623119"
  },
  {
    "text": "that your system will need and finally by the time you get to the cap filter which should remain at step",
    "start": "2623119",
    "end": "2628640"
  },
  {
    "text": "three i wholeheartedly believe it should be much easier to just focus then on the data",
    "start": "2628640",
    "end": "2634400"
  },
  {
    "text": "model that you need so with all of that said i hopefully",
    "start": "2634400",
    "end": "2642480"
  },
  {
    "text": "i'm not necessarily hoping i've changed your mind specifically and said yes nosql databases",
    "start": "2642480",
    "end": "2648000"
  },
  {
    "text": "but i'm hoping that this has shown you a way a smarter way to consider if nosql",
    "start": "2648000",
    "end": "2653599"
  },
  {
    "text": "databases is right for you and in the end naturally you'll say yes",
    "start": "2653599",
    "end": "2658800"
  },
  {
    "text": "and that is say yes to nosql databases so that is it for me thank you salamat",
    "start": "2658800",
    "end": "2667040"
  },
  {
    "text": "that is thank you in tagalog um and that is it for me i'll be select checking out the slack if you have any",
    "start": "2667040",
    "end": "2672560"
  },
  {
    "text": "questions i will post the link to my slides there thank you for",
    "start": "2672560",
    "end": "2677599"
  },
  {
    "text": "your time and i hope you enjoy the rest of the last day of nbc sydney",
    "start": "2677599",
    "end": "2691839"
  },
  {
    "text": "you",
    "start": "2695040",
    "end": "2697119"
  }
]