[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "okay good afternoon all together I think I'm supposed to start because we are already a couple of minutes late and as",
    "start": "860",
    "end": "8970"
  },
  {
    "text": "a German living in Switzerland I'm not used to starting late it's not yet",
    "start": "8970",
    "end": "15000"
  },
  {
    "text": "southern Europe I'm a professor for software engineering and teach C++ and",
    "start": "15000",
    "end": "21390"
  },
  {
    "text": "other things and for the background that's our campus directly at Lake Zurich so this summer it was like 30",
    "start": "21390",
    "end": "27660"
  },
  {
    "text": "seconds from office or lecture hall to swimming if you really were eager to do that",
    "start": "27660",
    "end": "33780"
  },
  {
    "text": "I'm also the say inspire offer a C+ was IDE that we more or less started 10",
    "start": "33780",
    "end": "43230"
  },
  {
    "text": "years ago with the first attempts to do or more than 10 years ago with first",
    "start": "43230",
    "end": "48660"
  },
  {
    "text": "attempts to implement C++ refactoring and develop is the current release that",
    "start": "48660",
    "end": "55739"
  },
  {
    "text": "we have and we are still working on improving that and some of the dimensions we are trying to improve that",
    "start": "55739",
    "end": "61590"
  },
  {
    "text": "is providing you checkers for a core and other safety guidelines for C++ so you",
    "start": "61590",
    "end": "68880"
  },
  {
    "text": "get immediate feedback if you violate something I guess many of you have been",
    "start": "68880",
    "end": "74130"
  },
  {
    "text": "to Kate's talk this morning who has has not been there okay she was saying Const",
    "start": "74130",
    "end": "83430"
  },
  {
    "text": "all the things or something like that we actually have implemented that tooling to provide you suggesting to place Const",
    "start": "83430",
    "end": "90659"
  },
  {
    "text": "and then we'll do it for you in your source code just to let you know as an",
    "start": "90659",
    "end": "96060"
  },
  {
    "text": "example of what kind of refactorings we provide so my lifetime goal is actually",
    "start": "96060",
    "end": "101610"
  },
  {
    "start": "98000",
    "end": "127000"
  },
  {
    "text": "to eliminate bad software I cannot shoot all the non educated developers so my",
    "start": "101610",
    "end": "108829"
  },
  {
    "text": "task is to educate other developers and change them making them better developers like Kate tried this morning",
    "start": "108829",
    "end": "116670"
  },
  {
    "text": "as well and a pion is thriving as well and we all try to make you all better developers and making our life better",
    "start": "116670",
    "end": "124829"
  },
  {
    "text": "because today the world runs on software now what are guidelines this talk is",
    "start": "124829",
    "end": "130950"
  },
  {
    "start": "127000",
    "end": "240000"
  },
  {
    "text": "about guidelines guidelines can roles if you go to someone who is working in",
    "start": "130950",
    "end": "136069"
  },
  {
    "text": "systems that are about security or safety critical systems okay who's who",
    "start": "136069",
    "end": "143790"
  },
  {
    "text": "have the safety critical people are using misra guidelines a few only let's",
    "start": "143790",
    "end": "151739"
  },
  {
    "text": "say guidelines can actually play a role whether you like in the German Autobahn where you have let's say implicit",
    "start": "151739",
    "end": "158790"
  },
  {
    "text": "coordination allowing you to run faster and separating things like the lanes in",
    "start": "158790",
    "end": "164700"
  },
  {
    "text": "the in the Autobahn or highway that's one of the roles guidelines can play",
    "start": "164700",
    "end": "170370"
  },
  {
    "text": "very often they are more hope seem to hold you back from flooring the world",
    "start": "170370",
    "end": "175799"
  },
  {
    "text": "and and seeing how things actually work and they don't allow to you to go where you actually want to go in the extreme",
    "start": "175799",
    "end": "183090"
  },
  {
    "text": "case they can be like the kettle arrangement they're actually just giving",
    "start": "183090",
    "end": "188310"
  },
  {
    "text": "you one way to do something which might not be the best it might be very boring",
    "start": "188310",
    "end": "193470"
  },
  {
    "text": "and ugly and you don't like it in the hope that the resulting product will be",
    "start": "193470",
    "end": "199319"
  },
  {
    "text": "safer or better so I'm as a car driver you can can consider what my idea of",
    "start": "199319",
    "end": "206400"
  },
  {
    "text": "guidelines would be and the important thing if you violate a guideline if you",
    "start": "206400",
    "end": "211560"
  },
  {
    "text": "only learn that in the very end that you violated the guideline it's very bad might for example my car has kind of a",
    "start": "211560",
    "end": "218970"
  },
  {
    "text": "control if I just move a little bit out of the lane on the Autobahn it will actually vibrate the the steering wheel",
    "start": "218970",
    "end": "226169"
  },
  {
    "text": "so I can have immediate feedback oh maybe you're not going where you want to go to and that's that's that kind of",
    "start": "226169",
    "end": "232049"
  },
  {
    "text": "immediate feedback allowing you to change before something bad happens that's important for me this",
    "start": "232049",
    "end": "244859"
  },
  {
    "start": "240000",
    "end": "447000"
  },
  {
    "text": "is a kind of a tiny landscape of guidelines especially about the insecurities we have in in the lower",
    "start": "244859",
    "end": "252319"
  },
  {
    "text": "corner we have the sei the soft engineering Institute cert we're doing",
    "start": "252319",
    "end": "258359"
  },
  {
    "text": "kind of security stuff let's say and they have some kind of sea plasmas",
    "start": "258359",
    "end": "263880"
  },
  {
    "text": "coding standard they also have a C coding standard if you ask me",
    "start": "263880",
    "end": "269230"
  },
  {
    "text": "assistant program in C can by definition not be secure at least for if it's not",
    "start": "269230",
    "end": "278120"
  },
  {
    "text": "done by very very bright people with very very highly consciousness and not",
    "start": "278120",
    "end": "285650"
  },
  {
    "text": "maintained into a mode where it's no longer observable I've seen so many",
    "start": "285650",
    "end": "291200"
  },
  {
    "text": "badly written C and I was teaching C since nineteen eighty six seven so a",
    "start": "291200",
    "end": "297350"
  },
  {
    "text": "couple of years ago we have the see flashes core guidance the main topic that I wanted to rant about today but we",
    "start": "297350",
    "end": "305240"
  },
  {
    "text": "also have other guidelines and guidelines in the making like the high integrity C++ by the people from",
    "start": "305240",
    "end": "315580"
  },
  {
    "text": "programming research the automotive industry which might not be that popular",
    "start": "315580",
    "end": "320840"
  },
  {
    "text": "in you know I do it you don't have an auto mobile manufacturer no not here",
    "start": "320840",
    "end": "327590"
  },
  {
    "text": "okay out of a lot of automotive industry",
    "start": "327590",
    "end": "332750"
  },
  {
    "text": "they try to create new C++ guidelines for C+ was fourteen and some of the",
    "start": "332750",
    "end": "337940"
  },
  {
    "text": "guidelines that they have are already obsoleted by seventeen but that's that's the world misra is trying hard to",
    "start": "337940",
    "end": "344320"
  },
  {
    "text": "renovate their c-plus was guidance which then from 2008 then were written by ada",
    "start": "344320",
    "end": "350540"
  },
  {
    "text": "programmers who knew some c and try to provide c++ guidelines which is how they",
    "start": "350540",
    "end": "357170"
  },
  {
    "text": "when I first looked at them I said well whoever can think about writing C+ was in a way that they were talking about",
    "start": "357170",
    "end": "364360"
  },
  {
    "text": "but I learned there are people who do that and also the the ISO group that",
    "start": "364360",
    "end": "371530"
  },
  {
    "text": "it's not the C plasma committee but a neighboring company in the same subgroup",
    "start": "371530",
    "end": "377750"
  },
  {
    "text": "on programming language vulnerabilities they are also working trying to tell you what to look out for when you're using",
    "start": "377750",
    "end": "384170"
  },
  {
    "text": "C++ and let's say all these guidelines",
    "start": "384170",
    "end": "390710"
  },
  {
    "text": "inspire each other sometimes because the same people working on that on those groups but also because let's say what",
    "start": "390710",
    "end": "398060"
  },
  {
    "text": "is good code this kind of times as possible and sometimes not discussable so there are some rules that",
    "start": "398060",
    "end": "404950"
  },
  {
    "text": "are always if you don't follow that you're writing doing bad things but by",
    "start": "404950",
    "end": "410860"
  },
  {
    "text": "some things you might actually consider maybe in my context it's better to do that way then the way the guidelines say",
    "start": "410860",
    "end": "417700"
  },
  {
    "text": "so always if you are forced to use a guideline all the guidelines come more",
    "start": "417700",
    "end": "423280"
  },
  {
    "text": "or less with overarching rule please select what you really need there",
    "start": "423280",
    "end": "429940"
  },
  {
    "text": "can't be a reasonable misra compliance without rules that you don't follow and",
    "start": "429940",
    "end": "435880"
  },
  {
    "text": "you have to document that you don't follow them either in individual places or throughout your project but there",
    "start": "435880",
    "end": "442960"
  },
  {
    "text": "will be rules that don't make sense in your context so what is what is the role",
    "start": "442960",
    "end": "449920"
  },
  {
    "start": "447000",
    "end": "641000"
  },
  {
    "text": "of these guidelines if you look at the C++ standard there's a C++ grammar which",
    "start": "449920",
    "end": "456130"
  },
  {
    "text": "is a superset of what you can actually compile and there are a lot of text in",
    "start": "456130",
    "end": "462520"
  },
  {
    "text": "these C++ library that tells you what parts of the grammar are not allowed or",
    "start": "462520",
    "end": "468310"
  },
  {
    "text": "don't make sense but the grammar and underneath is bigger than what you have until in the language then there are a",
    "start": "468310",
    "end": "474700"
  },
  {
    "text": "lot of rules in the C++ standard that tell you what is actually compliant and",
    "start": "474700",
    "end": "482580"
  },
  {
    "text": "most compilers try to follow those rules but they might actually compile more",
    "start": "482580",
    "end": "488110"
  },
  {
    "text": "than what is valid C++ so the first step is if it compiles your savely within the",
    "start": "488110",
    "end": "496870"
  },
  {
    "text": "domain that the compiler understands sometimes you might even have stuff that is not compiling that is valid but",
    "start": "496870",
    "end": "503500"
  },
  {
    "text": "that's the problem of the compilers but even that code by definition can be not",
    "start": "503500",
    "end": "509950"
  },
  {
    "text": "valid because it might encounter undefined behavior so all safety",
    "start": "509950",
    "end": "517150"
  },
  {
    "text": "guidelines want to go where you don't have undefined behavior because that's a curse anything can happen and I have a",
    "start": "517150",
    "end": "523960"
  },
  {
    "text": "live slide showing you what can happen there and the biggest problem with",
    "start": "523960",
    "end": "529240"
  },
  {
    "text": "undefined behavior is the compiler doesn't need to tell you about",
    "start": "529240",
    "end": "534910"
  },
  {
    "text": "and that's that's you some compilers try hard but even they might not give you",
    "start": "534910",
    "end": "542380"
  },
  {
    "text": "all situations where you can have undefined behavior and warnings help a",
    "start": "542380",
    "end": "549610"
  },
  {
    "text": "lot so enable who is not enabling all warnings on his or her compiler who's",
    "start": "549610",
    "end": "555640"
  },
  {
    "text": "treating warnings not as errors go home",
    "start": "555640",
    "end": "562329"
  },
  {
    "text": "change your compiler settings enable all warnings that you can get and treat all",
    "start": "562329",
    "end": "568149"
  },
  {
    "text": "of them as errors unless you can prove that it's not a problem and then there",
    "start": "568149",
    "end": "574870"
  },
  {
    "text": "are the the the attempt to get understandable and safe C++ usually that",
    "start": "574870",
    "end": "581470"
  },
  {
    "text": "means you rule out even more that's safe and understandable and as I said a lot",
    "start": "581470",
    "end": "587410"
  },
  {
    "text": "of the guidelines actually have common rules but some times they differ and that's also some things but also",
    "start": "587410",
    "end": "595019"
  },
  {
    "text": "guidelines typically address rules and violations even up to what's not in the c-plus grammar misra is guilty of that",
    "start": "595019",
    "end": "602680"
  },
  {
    "text": "well it's because there have been some compilers that were compared saying we",
    "start": "602680",
    "end": "608950"
  },
  {
    "text": "are doing C++ that actually weren't doing C++ when the rules were written",
    "start": "608950",
    "end": "614410"
  },
  {
    "text": "and then we also have the false positives where the rules disallow",
    "start": "614410",
    "end": "620170"
  },
  {
    "text": "something that's quite valid and what you actually want to do even the warnings might give you false positives",
    "start": "620170",
    "end": "625720"
  },
  {
    "text": "and that's something also to consider there will always be rules that either",
    "start": "625720",
    "end": "632339"
  },
  {
    "text": "you need to violate or you have no better idea how to write your code not",
    "start": "632339",
    "end": "638680"
  },
  {
    "text": "violating it so undefined behavior I typically show the pink elephants some",
    "start": "638680",
    "end": "646480"
  },
  {
    "start": "641000",
    "end": "677000"
  },
  {
    "text": "people say that you get nasal Diamonds and I just recently last week or two weeks ago I found a tweet where oh",
    "start": "646480",
    "end": "653260"
  },
  {
    "text": "there's a tee t-shirt where the badness of undefined behavior it can anyth anything like a ring the unicorn or a",
    "start": "653260",
    "end": "660699"
  },
  {
    "text": "rainbow or a balloon of whatever but actually you don't know what you're getting you might not even be able to",
    "start": "660699",
    "end": "668259"
  },
  {
    "text": "that you get into undefined behavior because the compiler or the processor might do something that looks reasonable",
    "start": "668259",
    "end": "674290"
  },
  {
    "text": "but it's not guaranteed so watch out so guidelines try to do a lot of good",
    "start": "674290",
    "end": "681939"
  },
  {
    "start": "677000",
    "end": "975000"
  },
  {
    "text": "things but they also have some bad corners or bad some issues one thing is",
    "start": "681939",
    "end": "687339"
  },
  {
    "text": "some are not clear about the underlying philosophy the misra guidelines they",
    "start": "687339",
    "end": "693279"
  },
  {
    "text": "might be clear but usually they are not perceived like that because people turn on a tool with misra checks and then",
    "start": "693279",
    "end": "699009"
  },
  {
    "text": "they get a lot of feedback which means ridiculous error messages and warnings they have no clue where they come from",
    "start": "699009",
    "end": "704919"
  },
  {
    "text": "and without an underlying philosophy it's very hard to get there the c-plus or score guys are very clear",
    "start": "704919",
    "end": "711999"
  },
  {
    "text": "about this underlying philosophy and that's good some rules seem superfluous or contradictory a lot of the guidelines",
    "start": "711999",
    "end": "719709"
  },
  {
    "text": "can't come off with several layers of Defense so when you actually crossed one",
    "start": "719709",
    "end": "725459"
  },
  {
    "text": "or this table one of the rules the next one kicks in so that the badness is not",
    "start": "725459",
    "end": "731379"
  },
  {
    "text": "as bad as it should be so that's why some rules actually don't make sense when you look at all of them but some of",
    "start": "731379",
    "end": "737769"
  },
  {
    "text": "them are all only there to give you an additional safeguard if you cross a",
    "start": "737769",
    "end": "743139"
  },
  {
    "text": "cross out one of the other rules then we have things like okay we want to have a",
    "start": "743139",
    "end": "748839"
  },
  {
    "text": "safe or a secure system and the core guidelines might give you indirect safety and security because they give",
    "start": "748839",
    "end": "755199"
  },
  {
    "text": "you better good practice and this lower bad practice but they don't address safety and security learn deliberately",
    "start": "755199",
    "end": "760989"
  },
  {
    "text": "and they might not be let's say if you have a then that many and safety criticism but if you have to provide",
    "start": "760989",
    "end": "768309"
  },
  {
    "text": "kind of a guarantee then that means you",
    "start": "768309",
    "end": "773619"
  },
  {
    "text": "need to have other rules in place and also maybe with the exception of the",
    "start": "773619",
    "end": "779919"
  },
  {
    "text": "core guides a lot of these guidelines actually don't address don't show you how to do it right they only show it you",
    "start": "779919",
    "end": "786519"
  },
  {
    "text": "how to do how not to do it and sometimes it's also not addressing design misra",
    "start": "786519",
    "end": "793539"
  },
  {
    "text": "deliberately try suicides that we don't teach people design well but some",
    "start": "793539",
    "end": "799809"
  },
  {
    "text": "designs are really bad and I'm more let's say as a professor I can be varied this product so I can just",
    "start": "799809",
    "end": "805420"
  },
  {
    "text": "say do it this way or never do it that way and even though I know you might",
    "start": "805420",
    "end": "811930"
  },
  {
    "text": "want to do it differently it's easier to get your head around starting with something that works very often you have",
    "start": "811930",
    "end": "819550"
  },
  {
    "text": "rules that you cannot easily adopt because it's incremental",
    "start": "819550",
    "end": "825720"
  },
  {
    "text": "you cannot adopt it incremental because either all your code base is okay or not",
    "start": "826570",
    "end": "832330"
  },
  {
    "text": "Kate has something about Const correctness if you start adding cons to",
    "start": "832330",
    "end": "838570"
  },
  {
    "text": "a code base it was completely ignorant of Const it's very hard to get it to",
    "start": "838570",
    "end": "845020"
  },
  {
    "text": "compile again so you have to do it consciously wherever also you look at who is",
    "start": "845020",
    "end": "854440"
  },
  {
    "text": "actually behind the rules Marie often the tool vendors that actually write",
    "start": "854440",
    "end": "859870"
  },
  {
    "text": "checkers or sell checkers which can be very expensive are behind these rules so the majority of the rules are those that",
    "start": "859870",
    "end": "866530"
  },
  {
    "text": "are very easy to detect so it's not that hard to sell a product with that you",
    "start": "866530",
    "end": "872350"
  },
  {
    "text": "might have outer outdated rule sets because the C++ Senate moves along and I",
    "start": "872350",
    "end": "878580"
  },
  {
    "text": "except me before the core guidance none of the rules actually cover C+ or 17 yet and as Nico told us this morning each",
    "start": "878580",
    "end": "887410"
  },
  {
    "text": "new language and library version provides new features to either misuse or do something better and also what",
    "start": "887410",
    "end": "895960"
  },
  {
    "text": "they are not taught properly and it's very hard to teach something that's 500 plus pages and where you have to do",
    "start": "895960",
    "end": "902920"
  },
  {
    "text": "everything like that the tools are expensive who is using let's say a",
    "start": "902920",
    "end": "908140"
  },
  {
    "text": "static analysis tool for all of its steam or her team their team what is",
    "start": "908140",
    "end": "915250"
  },
  {
    "text": "this price proceed ruff hi",
    "start": "915250",
    "end": "921250"
  },
  {
    "text": "so usually ten at least one caper seed maybe 10k whatever maybe not Crona",
    "start": "921250",
    "end": "928090"
  },
  {
    "text": "but euros or dollars plus a set up",
    "start": "928090",
    "end": "933100"
  },
  {
    "text": "course which can't be significant and regular open focus on process and never product quality if you go to safety critical",
    "start": "933100",
    "end": "939490"
  },
  {
    "text": "systems there's their eyesore standards that tell you that you have to do",
    "start": "939490",
    "end": "945100"
  },
  {
    "text": "something error to define how to do something but not that the something that you do is actually good and if you",
    "start": "945100",
    "end": "952540"
  },
  {
    "text": "follow the your process you get your eyes covered so your insurance will pay",
    "start": "952540",
    "end": "960090"
  },
  {
    "text": "and very often like the guidelines get in the way especially a feedback comes",
    "start": "960420",
    "end": "966070"
  },
  {
    "text": "late and it's underappreciated the problem is you cannot learn to drive a clue rules alone I try to teach C++",
    "start": "966070",
    "end": "977890"
  },
  {
    "start": "975000",
    "end": "1003000"
  },
  {
    "text": "good see flashes practice with tracks and all over the past almost decade and",
    "start": "977890",
    "end": "983490"
  },
  {
    "text": "things like oh don't write assignment operators use curly braces you might",
    "start": "983490",
    "end": "990220"
  },
  {
    "text": "detect that don't use loops write algorithms and don't write special",
    "start": "990220",
    "end": "995230"
  },
  {
    "text": "member functions let the compiler provide the ones that are right for you and some things and almost always our or",
    "start": "995230",
    "end": "1001200"
  },
  {
    "text": "is also on that scene so now let's get back to the core thing the core",
    "start": "1001200",
    "end": "1006510"
  },
  {
    "start": "1003000",
    "end": "1133000"
  },
  {
    "text": "guidelines their goal is get",
    "start": "1006510",
    "end": "1011600"
  },
  {
    "text": "increasingly Blastoise code towards more modern C++ that's a lot of the addresses",
    "start": "1011600",
    "end": "1019680"
  },
  {
    "text": "I'm not sure be honest in the room I shouldn't complain too much about the process how the ec+ was Cora Gardens",
    "start": "1019680",
    "end": "1025550"
  },
  {
    "text": "came into existence because I didn't don't know about that but maybe he can tell me to not it with the beer",
    "start": "1025550",
    "end": "1032660"
  },
  {
    "text": "sometimes I get the impression of damage the rules or at least of some of the examples Microsoft went over their code",
    "start": "1032660",
    "end": "1038610"
  },
  {
    "text": "base and looked for all the bad things in Windows or their their programs and then wrote a guy landfill for that to",
    "start": "1038610",
    "end": "1045810"
  },
  {
    "text": "not make it happen again which might be a good thing to start with but there's",
    "start": "1045810",
    "end": "1051630"
  },
  {
    "text": "still a lot of work to do to make them great the good thing is it's the",
    "start": "1051630",
    "end": "1057240"
  },
  {
    "text": "underlying philosophy is write modern C++ code and get rid of undefined behavior things like good names are",
    "start": "1057240",
    "end": "1063870"
  },
  {
    "text": "universally truth the problem is with good naming sometimes it's very to get there and usually not being able",
    "start": "1063870",
    "end": "1071450"
  },
  {
    "text": "to find a good name is that you try to do too many things in one chunk I'm a",
    "start": "1071450",
    "end": "1079760"
  },
  {
    "text": "big fan of not commenting code because comments are wrong and you need to write",
    "start": "1079760",
    "end": "1086929"
  },
  {
    "text": "a comment it's definitely a chance to refactor your code to make it saying",
    "start": "1086929",
    "end": "1092779"
  },
  {
    "text": "what it is and that's in the philosophy of the easy plusses core Gardens so when whenever you write a comment in",
    "start": "1092779",
    "end": "1099950"
  },
  {
    "text": "your code especially within a function stop think about how to structure the",
    "start": "1099950",
    "end": "1105980"
  },
  {
    "text": "code better and refactor and I'm completely honest about every code that",
    "start": "1105980",
    "end": "1112159"
  },
  {
    "text": "needs the comment is wrong it comes with",
    "start": "1112159",
    "end": "1117919"
  },
  {
    "text": "the guidelines support libraries so that helps a lot to make something simpler and that's also a good thing misra",
    "start": "1117919",
    "end": "1127159"
  },
  {
    "text": "usually tells you how not to do it but doesn't provide you any clue on how to do it better so some examples are always",
    "start": "1127159",
    "end": "1136220"
  },
  {
    "start": "1133000",
    "end": "1409000"
  },
  {
    "text": "good like ok one we already have heard about this morning prefers the standard",
    "start": "1136220",
    "end": "1142490"
  },
  {
    "text": "library to other libraries and hand crafted code and here we see ok we",
    "start": "1142490",
    "end": "1147799"
  },
  {
    "text": "should use accumulate and instead of a strange loop that goes here to actually",
    "start": "1147799",
    "end": "1153740"
  },
  {
    "text": "sum up elements in an array in an array this piece of example code in the",
    "start": "1153740",
    "end": "1160960"
  },
  {
    "text": "sidelines is a glimpse of the future we are not there yet it would use and accumulate that in a sense ranges it's",
    "start": "1160960",
    "end": "1169070"
  },
  {
    "text": "implemented already but it's not standard C++ yet and loops like that",
    "start": "1169070",
    "end": "1175399"
  },
  {
    "text": "okay this is accumulate quite obvious but very easily if you get into the",
    "start": "1175399",
    "end": "1180669"
  },
  {
    "text": "example oh that's a rotate and nobody understands what you what the loop is actually doing and that's something try",
    "start": "1180669",
    "end": "1188870"
  },
  {
    "text": "to get rid of loops every loop is also a desire potential design problem if it's",
    "start": "1188870",
    "end": "1195889"
  },
  {
    "text": "not encapsulated in the generic function a function with more than one loop might",
    "start": "1195889",
    "end": "1201529"
  },
  {
    "text": "even be a bigger problem another thing that's",
    "start": "1201529",
    "end": "1206840"
  },
  {
    "text": "more obvious is okay if you have a non empty case in a switch statement it",
    "start": "1206840",
    "end": "1212359"
  },
  {
    "text": "should end with the break it's very easy to forget that sometimes fall through",
    "start": "1212359",
    "end": "1217940"
  },
  {
    "text": "are deliberate but if you don't see that it usually is a programming error and that's something some compilers even",
    "start": "1217940",
    "end": "1224929"
  },
  {
    "text": "complain about and also we have some students of mine implemented a checker that give you a little yellow back there",
    "start": "1224929",
    "end": "1231499"
  },
  {
    "text": "and allow you to actually fix what you're doing like adding the break statement or actually provide a suppress",
    "start": "1231499",
    "end": "1239269"
  },
  {
    "text": "comment saying this is a fall through that's deliberate but that's documenting the issue in that case and that's one of",
    "start": "1239269",
    "end": "1246229"
  },
  {
    "text": "the comments that you are allowed to do but usually a fall through is also a",
    "start": "1246229",
    "end": "1252639"
  },
  {
    "text": "potential problem in your code design and structure so what are the areas some",
    "start": "1252639",
    "end": "1262820"
  },
  {
    "text": "of the areas that we that our address is resource leaks is some a common problem especially the C programmers deal with",
    "start": "1262820",
    "end": "1269690"
  },
  {
    "text": "in C places there's no reason to have resource leak we have ra íí- thanks to",
    "start": "1269690",
    "end": "1276169"
  },
  {
    "text": "be honor and we have a unique pointer and other things that take ownership and",
    "start": "1276169",
    "end": "1281359"
  },
  {
    "text": "actually clean up on our own with the garbage collector that's the curly brace",
    "start": "1281359",
    "end": "1286749"
  },
  {
    "text": "there's some we're a high discipline is actually required is using valid",
    "start": "1286749",
    "end": "1294909"
  },
  {
    "text": "pointers or pointing things like iterators one thing is no raw pointers",
    "start": "1294909",
    "end": "1300969"
  },
  {
    "text": "they are the core guidance actually give you a hint of using raw pointers and I'm",
    "start": "1300969",
    "end": "1306259"
  },
  {
    "text": "not sure I like it because that's one of the things that's very hard to adopt incrementally if you have a code base",
    "start": "1306259",
    "end": "1312049"
  },
  {
    "text": "that's using pointers plane pointers and then you follow be honest rules about",
    "start": "1312049",
    "end": "1317719"
  },
  {
    "text": "okay plane pointer only is a non owning pointer you first have to get rid of all",
    "start": "1317719",
    "end": "1323929"
  },
  {
    "text": "the situations where the point pointer is actually owning some memory and you have an explicit or owning something and",
    "start": "1323929",
    "end": "1330259"
  },
  {
    "text": "you have to explicitly move it a deleted some things",
    "start": "1330259",
    "end": "1335990"
  },
  {
    "text": "about memory corruption like accessing out-of-bounds things is undefined behavior so getting rid of undefined",
    "start": "1335990",
    "end": "1342380"
  },
  {
    "text": "behavior and one thing is I learned to appreciate even more from working with a",
    "start": "1342380",
    "end": "1348080"
  },
  {
    "text": "colleague who is very good in theoretical things like type systems the",
    "start": "1348080",
    "end": "1354740"
  },
  {
    "text": "type system of the compiler is your biggest friend and if ever you can",
    "start": "1354740",
    "end": "1360920"
  },
  {
    "text": "employ the type system to detect an error at compile time that is what you want to get because",
    "start": "1360920",
    "end": "1369350"
  },
  {
    "text": "type systems were invented to avoid runtime problems and tomorrow I have a",
    "start": "1369350",
    "end": "1379550"
  },
  {
    "text": "talk about how to employ the type system even more to get better with that so in",
    "start": "1379550",
    "end": "1387920"
  },
  {
    "text": "general any typecast that you have in your code is a design problem because",
    "start": "1387920",
    "end": "1394850"
  },
  {
    "text": "you're violating the type system and you're doing something bad to your types and that tells you that your design",
    "start": "1394850",
    "end": "1400670"
  },
  {
    "text": "could be improved last thing is about code understandability and there are a lot of",
    "start": "1400670",
    "end": "1406220"
  },
  {
    "text": "things of doing about that good names are one of them so my current take on",
    "start": "1406220",
    "end": "1411710"
  },
  {
    "text": "the guidelines and I'm still a little bit nervous because Anna's here I might criticize his work but let my personal",
    "start": "1411710",
    "end": "1421520"
  },
  {
    "text": "opinion so and it's currently so that changed over time the pros are we have",
    "start": "1421520",
    "end": "1426920"
  },
  {
    "text": "modern supplies versatile the bad thing is there are many many rules very hard",
    "start": "1426920",
    "end": "1432200"
  },
  {
    "text": "to learn them all we have safer code less undefined behaviors fewer pink",
    "start": "1432200",
    "end": "1437720"
  },
  {
    "text": "elephants but the rules some rules must be prioritized to be useful that's true",
    "start": "1437720",
    "end": "1444590"
  },
  {
    "text": "with all the the guidelines we try to get pointer safety from the core guidelines let's go for the pros we get",
    "start": "1444590",
    "end": "1452660"
  },
  {
    "text": "the raw RAI we get parameter passing guidelines on how to pass things by down",
    "start": "1452660",
    "end": "1457880"
  },
  {
    "text": "the call chain we have some good software engineering principles that have been established over the last 25",
    "start": "1457880",
    "end": "1464150"
  },
  {
    "text": "years or more we have less verbosity so fewer code code",
    "start": "1464150",
    "end": "1469370"
  },
  {
    "text": "not there I'm sorry with the hearing aid",
    "start": "1469370",
    "end": "1476090"
  },
  {
    "text": "it rings in my ears even on silence so we have less verbosity we have a lot of common sense",
    "start": "1476090",
    "end": "1482020"
  },
  {
    "text": "which might not be so and so telling you what you should do but I know that you",
    "start": "1482020",
    "end": "1488150"
  },
  {
    "text": "should do it but you're not actually acting on it a lot of getting rid of Si plus the SI isms and 1990s code who has",
    "start": "1488150",
    "end": "1495950"
  },
  {
    "text": "a code base that started before 2011",
    "start": "1495950",
    "end": "1500649"
  },
  {
    "text": "that's where you're actually the target audience for the C+ escora guidelines to",
    "start": "1501460",
    "end": "1507320"
  },
  {
    "text": "modernize your code base and transformation guidelines there are",
    "start": "1507320",
    "end": "1513170"
  },
  {
    "text": "hints on how to change your code base we get the helper library and static analysis checks which we try to",
    "start": "1513170",
    "end": "1519590"
  },
  {
    "text": "implement some of the rules we have implemented and but Nala not all of them",
    "start": "1519590",
    "end": "1526460"
  },
  {
    "text": "are actually implementable because how do you define what is a good name look",
    "start": "1526460",
    "end": "1532970"
  },
  {
    "text": "it up in a dictionary well we might not have access to Norwegian dictionary or a",
    "start": "1532970",
    "end": "1538730"
  },
  {
    "text": "Swiss German one now for the bad things",
    "start": "1538730",
    "end": "1543880"
  },
  {
    "text": "again some rules only provide the bad examples you only get the violation signs and not how to do it better you",
    "start": "1543880",
    "end": "1551000"
  },
  {
    "text": "might be able to figure it out on your own but sometimes it's not clear what is the better way or there might be too",
    "start": "1551000",
    "end": "1557150"
  },
  {
    "text": "many to choose from some rules cannot be adapted incrementally like the constant",
    "start": "1557150",
    "end": "1562580"
  },
  {
    "text": "for example some rules are common sense only some rules are very specialists in",
    "start": "1562580",
    "end": "1569480"
  },
  {
    "text": "my opinion except for very various tiny pieces of your code base you should",
    "start": "1569480",
    "end": "1575780"
  },
  {
    "text": "never get to a point where you need that rule and you have that throughout your",
    "start": "1575780",
    "end": "1582230"
  },
  {
    "text": "code base you either have very bad at capsulation or you're doing really really hard stuff which is sometimes the",
    "start": "1582230",
    "end": "1590420"
  },
  {
    "text": "situation but very often things like that are done without need especially if you come with the code base from the",
    "start": "1590420",
    "end": "1595850"
  },
  {
    "text": "1990s some of the things might be too modern for your environment you might not get a compiler for your embedded",
    "start": "1595850",
    "end": "1601640"
  },
  {
    "text": "device that actually and the Stan C++ 14 yet but I would say",
    "start": "1601640",
    "end": "1608830"
  },
  {
    "text": "except for some of the vendors where I know that seem to do it deliberately choose a more modern hardware can",
    "start": "1608830",
    "end": "1615409"
  },
  {
    "text": "actually improve yourself the quality a lot or at least a vendor that provides a good compiler",
    "start": "1615409",
    "end": "1622220"
  },
  {
    "text": "I'm not saying which one but those who suffer know and one of the biggest thing",
    "start": "1622220",
    "end": "1628039"
  },
  {
    "text": "it when I first heard about it the marking pointers that own something I",
    "start": "1628039",
    "end": "1634270"
  },
  {
    "text": "thought it was a great idea today my opinion is owner T is a heck",
    "start": "1634270",
    "end": "1640990"
  },
  {
    "text": "because when you mark something that owns memory with own it he the better",
    "start": "1640990",
    "end": "1648830"
  },
  {
    "text": "the refactoring would be using unique put er T directly immediately when you",
    "start": "1648830",
    "end": "1655580"
  },
  {
    "text": "touch that code where you mark something is taking ownership do it immediately refactor it to use unique pointer even",
    "start": "1655580",
    "end": "1664070"
  },
  {
    "text": "if it needs a specialty leader object to to to clean up don't use owner the",
    "start": "1664070",
    "end": "1675919"
  },
  {
    "start": "1671000",
    "end": "1730000"
  },
  {
    "text": "philosophy behind the core guidance beyond the told us last who has been here last night for be honest talk okay",
    "start": "1675919",
    "end": "1683210"
  },
  {
    "text": "so I'm preaching true to you you already know all most of it right and send the C++ and so on don't leak resources don't",
    "start": "1683210",
    "end": "1690440"
  },
  {
    "text": "waste time or space prefer a mutable data to immutable data everything that",
    "start": "1690440",
    "end": "1695690"
  },
  {
    "text": "can be checked at compile time should be should not be that cannot be checked at",
    "start": "1695690",
    "end": "1701720"
  },
  {
    "text": "compile time should be checked checkable at runtime but some things we cannot check at run time but compile time",
    "start": "1701720",
    "end": "1707840"
  },
  {
    "text": "takings always always better than runtime checking and statically type",
    "start": "1707840",
    "end": "1714169"
  },
  {
    "text": "safe for me actually that ideally is something I'm a realist so it should not",
    "start": "1714169",
    "end": "1721070"
  },
  {
    "text": "be ideally a program should be statically typed safe full stop without",
    "start": "1721070",
    "end": "1726380"
  },
  {
    "text": "any need for casts",
    "start": "1726380",
    "end": "1729850"
  },
  {
    "start": "1730000",
    "end": "1883000"
  },
  {
    "text": "if you look at the area of the quagga dance cover there are plenty around 20",
    "start": "1732030",
    "end": "1738850"
  },
  {
    "text": "different area some supporting sections and I point that out because some of the myths that people who use see places for",
    "start": "1738850",
    "end": "1745780"
  },
  {
    "text": "a long time carry and some of the myths of what good software engineering practice is also there and they are",
    "start": "1745780",
    "end": "1752140"
  },
  {
    "text": "demystified so we have Mizpah also that's beyond work as an herb and whoever worked on that very kind of miss",
    "start": "1752140",
    "end": "1758560"
  },
  {
    "text": "Mythbusters all declarations on top of the functions that was compiled a technology of the 1960s and 70s no need",
    "start": "1758560",
    "end": "1768250"
  },
  {
    "text": "for that single return rule that comes from the function that hundreds of lines long",
    "start": "1768250",
    "end": "1774640"
  },
  {
    "text": "those functions need to be reflected first and usually that single return rule gives things like go to exit which",
    "start": "1774640",
    "end": "1782800"
  },
  {
    "text": "is also ridiculous no exceptions there have been times when",
    "start": "1782800",
    "end": "1788320"
  },
  {
    "text": "exceptions were expensive and we are currently again striving to get fewer exceptions but exceptions to guarantee",
    "start": "1788320",
    "end": "1795820"
  },
  {
    "text": "that an object is constructed correctly and completely are essential to the model of C++ one class per source file",
    "start": "1795820",
    "end": "1805560"
  },
  {
    "text": "that's also ridiculous today some people actually compile the complete project in",
    "start": "1805560",
    "end": "1811060"
  },
  {
    "text": "one file to speed up their bills that",
    "start": "1811060",
    "end": "1816430"
  },
  {
    "text": "might also be ridiculous they might have reason but one class per source file is the class might not be the granularity",
    "start": "1816430",
    "end": "1823930"
  },
  {
    "text": "of things that belong together what you can put in a source file should be what belongs together if that's a class or",
    "start": "1823930",
    "end": "1831250"
  },
  {
    "text": "ten classes that work together I don't care as long as it manageable and you can name that file one name that you",
    "start": "1831250",
    "end": "1839830"
  },
  {
    "text": "should never give a file is util because that means I'm too lazy or too",
    "start": "1839830",
    "end": "1847240"
  },
  {
    "text": "bored or I have too many things in one place and have no idea how to name it and the core guide and support library",
    "start": "1847240",
    "end": "1855160"
  },
  {
    "text": "is guilty of that as well and the standard library as well so and again",
    "start": "1855160",
    "end": "1860640"
  },
  {
    "text": "two-phase initialization who has code base that uses the init function for almost every class hmm",
    "start": "1860640",
    "end": "1868930"
  },
  {
    "text": "there was shy get rid of that that's so",
    "start": "1868930",
    "end": "1874480"
  },
  {
    "text": "1990s or even it wasn't valid in 1990s IANA will tell me it's not valid in the",
    "start": "1874480",
    "end": "1880450"
  },
  {
    "text": "1990 you see working around problems",
    "start": "1880450",
    "end": "1890800"
  },
  {
    "start": "1883000",
    "end": "1962000"
  },
  {
    "text": "give you give us rituals that we never understood why we have them now let's",
    "start": "1890800",
    "end": "1896860"
  },
  {
    "text": "check yeah speed up a little bit interfaces don't use Global's except",
    "start": "1896860",
    "end": "1903460"
  },
  {
    "text": "when they are read-only and don't in Global's can be lets say member",
    "start": "1903460",
    "end": "1911770"
  },
  {
    "text": "variables you'll freely mutate in your member functions it might make tests a",
    "start": "1911770",
    "end": "1918100"
  },
  {
    "text": "lot harder whenever you make some private member function public just for tests that's an indication that you",
    "start": "1918100",
    "end": "1924850"
  },
  {
    "text": "trying to do the wrong thing then the next thing is actually the main topic of",
    "start": "1924850",
    "end": "1931780"
  },
  {
    "text": "tomorrow's talk is if you use int or multiple ends as a parameter types it's",
    "start": "1931780",
    "end": "1939790"
  },
  {
    "text": "very hard to call your functions right especially you lose all kind of meaning",
    "start": "1939790",
    "end": "1944890"
  },
  {
    "text": "and Kate said something this morning",
    "start": "1944890",
    "end": "1949960"
  },
  {
    "text": "about using tuple don't don't return tuples except in very generic code use",
    "start": "1949960",
    "end": "1956470"
  },
  {
    "text": "structs and set name the stuff that you return if you have multiple returns to combine one rule is if you can avoid",
    "start": "1956470",
    "end": "1965560"
  },
  {
    "start": "1962000",
    "end": "2056000"
  },
  {
    "text": "defining default operations do I call it the rule of zero and that's where are my",
    "start": "1965560",
    "end": "1970870"
  },
  {
    "text": "traffic signs come on down right constructors copy constructors Scott Myers did a great job teaching all of us",
    "start": "1970870",
    "end": "1977830"
  },
  {
    "text": "how to write copy constructors and copy assignment and destructors for C++ 98 we",
    "start": "1977830",
    "end": "1984700"
  },
  {
    "text": "are no longer there you don't need constructors if your",
    "start": "1984700",
    "end": "1990399"
  },
  {
    "text": "class doesn't need any invariants doesn't need to guarantee arey any",
    "start": "1990399",
    "end": "1995470"
  },
  {
    "text": "inverse the struct is fine you get everything else for free if you you",
    "start": "1995470",
    "end": "2003720"
  },
  {
    "text": "should use member variables that have value types then also destruction is",
    "start": "2003720",
    "end": "2011000"
  },
  {
    "text": "easy initialization is easy you don't need these special member phones because",
    "start": "2011000",
    "end": "2017700"
  },
  {
    "text": "writing them correctly it's easy to get them wrong Nikko has an objection no no",
    "start": "2017700",
    "end": "2031019"
  },
  {
    "text": "I'm not saying that you should not write member function I'm just saying don't write special member functions an",
    "start": "2031019",
    "end": "2040889"
  },
  {
    "text": "ordinary constructor is not a special member func it is a special man fund but not one that the compiler provides for",
    "start": "2040889",
    "end": "2046649"
  },
  {
    "text": "you if your class has an invariant then you write it a regular constructor but",
    "start": "2046649",
    "end": "2052050"
  },
  {
    "text": "only that one not the others okay how",
    "start": "2052050",
    "end": "2057628"
  },
  {
    "start": "2056000",
    "end": "2097000"
  },
  {
    "text": "can I avoid default of operations use",
    "start": "2057629",
    "end": "2063628"
  },
  {
    "text": "member rails as variables no naked pointers at all use unique pointer that",
    "start": "2063629",
    "end": "2069179"
  },
  {
    "text": "makes your class move only which might be a good thing if you manage your resources through unique pointers you",
    "start": "2069179",
    "end": "2075858"
  },
  {
    "text": "should maybe stay away from playing arrays but it depends a little bit you",
    "start": "2075859",
    "end": "2081780"
  },
  {
    "text": "might want to use them but I I much prefer stood array instead of that and we don't because we don't have",
    "start": "2081780",
    "end": "2087750"
  },
  {
    "text": "variable-length arrays in C++ for a good reason the type system use member",
    "start": "2087750",
    "end": "2093510"
  },
  {
    "text": "initializes and use the standard library",
    "start": "2093510",
    "end": "2098599"
  },
  {
    "start": "2097000",
    "end": "2264000"
  },
  {
    "text": "when you want or need to get away from the rule of zero that's actually expert",
    "start": "2098599",
    "end": "2106470"
  },
  {
    "text": "territory and it became even more expedition in C++ 11 because we now have moved",
    "start": "2106470",
    "end": "2111810"
  },
  {
    "text": "constructors and move assignments and doing that correctly is really really hard so whenever you have something that",
    "start": "2111810",
    "end": "2121830"
  },
  {
    "text": "is an oo hierarchy which we now learned with variant from Niko V we don't",
    "start": "2121830",
    "end": "2127800"
  },
  {
    "text": "actually need that that much and Shawn parent has a different trick and on doing that but if you really want it you",
    "start": "2127800",
    "end": "2136290"
  },
  {
    "text": "have variation at runtime and you don't want to use variant and have one",
    "start": "2136290",
    "end": "2143490"
  },
  {
    "text": "extensibility arbitrarily a default adversely structure is a must if you",
    "start": "2143490",
    "end": "2149370"
  },
  {
    "text": "allocate stuff on the heap and that comes with a lot of applications and there's a nice table and a talk by",
    "start": "2149370",
    "end": "2156330"
  },
  {
    "text": "Horton and telling you what what default other operations are available or not",
    "start": "2156330",
    "end": "2163020"
  },
  {
    "text": "depending on what you define yourself so you if you have a virtual destructor in",
    "start": "2163020",
    "end": "2168570"
  },
  {
    "text": "your base class make all code all those classes non copyable and non moveable",
    "start": "2168570",
    "end": "2176270"
  },
  {
    "text": "the easy or the let's say the smallest change to get there is delete the move",
    "start": "2176270",
    "end": "2181920"
  },
  {
    "text": "and an operator which will get rid of all the copy and move operations which is a good thing you might sidestep the",
    "start": "2181920",
    "end": "2191400"
  },
  {
    "text": "virtual destructor using shared pointers but the slide is before I learn to hate",
    "start": "2191400",
    "end": "2196680"
  },
  {
    "text": "share pointers or just use the stuff on",
    "start": "2196680",
    "end": "2202650"
  },
  {
    "text": "the stack and pass it down the whole chain like you would do with a stream objects where you define all the",
    "start": "2202650",
    "end": "2208650"
  },
  {
    "text": "functions taking an output function taking old stream reference but never actually allocate a stream object on the",
    "start": "2208650",
    "end": "2216300"
  },
  {
    "text": "heap but allocating it on the heap you just use it on the stack and pass it down the call chain and we have our AI I",
    "start": "2216300",
    "end": "2224100"
  },
  {
    "text": "and if you write your own container classes stop first thing if you really",
    "start": "2224100",
    "end": "2230610"
  },
  {
    "text": "need it think of an adapter might be more appropriate to an existing container and I know there are some",
    "start": "2230610",
    "end": "2236700"
  },
  {
    "text": "special areas where you might want to provide a new container but it's but if it's really really useful and generic",
    "start": "2236700",
    "end": "2244660"
  },
  {
    "text": "submitted to the Senate library evolution working group as the first centralization if you're really doing a",
    "start": "2244660",
    "end": "2249790"
  },
  {
    "text": "good job and you might learn which other compiler which other container actually might better serve your purpose so",
    "start": "2249790",
    "end": "2257890"
  },
  {
    "text": "expert territory even the experts get it wrong that's the problem",
    "start": "2257890",
    "end": "2263040"
  },
  {
    "text": "watch out league resources I skipped over that rai",
    "start": "2263040",
    "end": "2269110"
  },
  {
    "start": "2264000",
    "end": "2346000"
  },
  {
    "text": "has been a told us a lot and there are some on the standard library and I'm trying for years now to get one that's",
    "start": "2269110",
    "end": "2276880"
  },
  {
    "text": "your own it's in P 52 and from that I",
    "start": "2276880",
    "end": "2282670"
  },
  {
    "text": "have a CPP con talk telling the story what's behind that if you ever want to ride your own ra íí- wrapper that is",
    "start": "2282670",
    "end": "2289690"
  },
  {
    "text": "generic don't try it you get it wrong me",
    "start": "2289690",
    "end": "2295540"
  },
  {
    "text": "and Eric Niebla we both got it wrong and I'm not sure it's correct right now but",
    "start": "2295540",
    "end": "2301450"
  },
  {
    "text": "I hope it is and I hope that the library working group is fine we'll find the remaining box in San Diego other things",
    "start": "2301450",
    "end": "2310060"
  },
  {
    "text": "that people have an overlooked taking the address of the standard lab fraction",
    "start": "2310060",
    "end": "2315730"
  },
  {
    "text": "is not sanctioned by the standard accept",
    "start": "2315730",
    "end": "2321130"
  },
  {
    "text": "words as specifically allowed so that call is actually creating a unique",
    "start": "2321130",
    "end": "2327250"
  },
  {
    "text": "resource object with class template argument detection is actually it might work but it's not guaranteed to work",
    "start": "2327250",
    "end": "2334060"
  },
  {
    "text": "everywhere so you actually need to ride a lambda calling as close because calling your library function is the",
    "start": "2334060",
    "end": "2340990"
  },
  {
    "text": "right way to do that that's always allowed and sanctioned if you really",
    "start": "2340990",
    "end": "2347950"
  },
  {
    "start": "2346000",
    "end": "2408000"
  },
  {
    "text": "want to ride an own Rai wrapper that's not generic there's another rule where only a single",
    "start": "2347950",
    "end": "2354940"
  },
  {
    "text": "resource because confus clean up",
    "start": "2354940",
    "end": "2360990"
  },
  {
    "text": "constructing might fail and you have two things where either one might fail to",
    "start": "2360990",
    "end": "2366520"
  },
  {
    "text": "construct correctly it's very hard to get the constructor cleaning out right with two it's almost possible but with",
    "start": "2366520",
    "end": "2375220"
  },
  {
    "text": "three it's gets very very hard you want all or nothing if you want to",
    "start": "2375220",
    "end": "2383350"
  },
  {
    "text": "combine multiple things in one thing use them as class members and having a multiple resource wrappers in a single",
    "start": "2383350",
    "end": "2392530"
  },
  {
    "text": "class that's working but not putting stuff let's say not having five plane pointers to five different files opening",
    "start": "2392530",
    "end": "2400750"
  },
  {
    "text": "the single constructor cleaning them up if one of the open fails is really really hard",
    "start": "2400750",
    "end": "2407310"
  },
  {
    "start": "2408000",
    "end": "2431000"
  },
  {
    "text": "owner I think I'm staying to that owner is a",
    "start": "2408990",
    "end": "2416550"
  },
  {
    "text": "thing that's a mistake in the core guidelines because our ownership should",
    "start": "2417060",
    "end": "2424870"
  },
  {
    "text": "be expressed by immediate cleanup and unique pointer is the way we have in the sender's library to do that naming and",
    "start": "2424870",
    "end": "2433330"
  },
  {
    "text": "layout another back in the core guidelines in my opinion I lost my my",
    "start": "2433330",
    "end": "2439780"
  },
  {
    "text": "ribbon but it's eased const if people",
    "start": "2439780",
    "end": "2449050"
  },
  {
    "text": "telling you that West cones like the first line in that example here is the right way to do it",
    "start": "2449050",
    "end": "2454210"
  },
  {
    "text": "I doubt it read an sex he told at all how to spell it",
    "start": "2454210",
    "end": "2459220"
  },
  {
    "text": "it's int Const why because then I meet and say see that Y is constant if it's",
    "start": "2459220",
    "end": "2464530"
  },
  {
    "text": "Auto its Auto Const why you have the",
    "start": "2464530",
    "end": "2471690"
  },
  {
    "text": "since I'm despotic you you have the freedom to to be against me and if you",
    "start": "2471690",
    "end": "2477700"
  },
  {
    "text": "use develop our IDE you can actually set a flag on where you want to place the cons and it will change all your code",
    "start": "2477700",
    "end": "2484150"
  },
  {
    "text": "based consistently so even if you have all of our code base is east cons and v1",
    "start": "2484150",
    "end": "2490360"
  },
  {
    "text": "West cons just change it or the other way around which is the better of option",
    "start": "2490360",
    "end": "2496660"
  },
  {
    "text": "in my opinion constants as I said we have that constantly nur and there are",
    "start": "2496660",
    "end": "2504250"
  },
  {
    "start": "2498000",
    "end": "2548000"
  },
  {
    "text": "five rules in the core guidelines were things were to place cons except for the concepts we which we haven't",
    "start": "2504250",
    "end": "2512340"
  },
  {
    "text": "targeted yet the first for implemented more or less good you might get some",
    "start": "2512340",
    "end": "2517780"
  },
  {
    "text": "false positive still but if you have them tell us we might be able to fix them like okay there's a variable in a",
    "start": "2517780",
    "end": "2524170"
  },
  {
    "text": "local variable that's never changed after initialization make it cons and it actually the tool will not only flag it",
    "start": "2524170",
    "end": "2530380"
  },
  {
    "text": "it will provide the cons for you on on your choice do it get your code cons",
    "start": "2530380",
    "end": "2537730"
  },
  {
    "text": "clean and even if you just use develop for that and then visual studio or whatever other idea you're using just to",
    "start": "2537730",
    "end": "2545110"
  },
  {
    "text": "it I want to get rid of bad code there are plenty of rules of functions there",
    "start": "2545110",
    "end": "2550960"
  },
  {
    "start": "2548000",
    "end": "2605000"
  },
  {
    "text": "are plenty of you rules in class and hierarchy I'm also not a fan of all of",
    "start": "2550960",
    "end": "2556510"
  },
  {
    "text": "them like C to use classes if the class as a in weren't you struct if the data members can vary independently I prefer",
    "start": "2556510",
    "end": "2564310"
  },
  {
    "text": "to use struct every time because want my code to spell out what the class",
    "start": "2564310",
    "end": "2570850"
  },
  {
    "text": "actually does what are the major functionalities upfront",
    "start": "2570850",
    "end": "2576420"
  },
  {
    "text": "especially since ideas tend to show the definition on hover it's very easy to",
    "start": "2576420",
    "end": "2582460"
  },
  {
    "text": "spot what the class is for if I hide that by using having to write public",
    "start": "2582460",
    "end": "2588160"
  },
  {
    "text": "somewhere and first maybe even spell out my member variables it might not actually show what it's about and that's",
    "start": "2588160",
    "end": "2594430"
  },
  {
    "text": "why I prefer a struct I save one line in the hover and get more information and",
    "start": "2594430",
    "end": "2601290"
  },
  {
    "text": "it's equivalent anyway so that's one of the things support library I'm not a fan",
    "start": "2601290",
    "end": "2609160"
  },
  {
    "start": "2605000",
    "end": "2699000"
  },
  {
    "text": "of owner and I'm not sure if I'm a fan of nodnol or not with contract support",
    "start": "2609160",
    "end": "2615130"
  },
  {
    "text": "there I expect and insurance macro there are superseded by C++ 20 count which we",
    "start": "2615130",
    "end": "2621460"
  },
  {
    "text": "voted in in rapperswil so we get contracts in C blast was 20 unless something weird happens which is never",
    "start": "2621460",
    "end": "2627970"
  },
  {
    "text": "sure and the until the standard is printed by in Geneva but let's hope for that and beyond afford hard to get that",
    "start": "2627970",
    "end": "2635290"
  },
  {
    "text": "so thank you be honor there's utility there's a scope guard",
    "start": "2635290",
    "end": "2640360"
  },
  {
    "text": "functionality and even though my unique resource paper introduced both guards to used I'm not sure if",
    "start": "2640360",
    "end": "2647559"
  },
  {
    "text": "scope guards is curing a symptom that is because you didn't use Rai I correctly",
    "start": "2647559",
    "end": "2656280"
  },
  {
    "text": "so that's why I'm not sure if finally is really the very best idea to do",
    "start": "2656280",
    "end": "2662260"
  },
  {
    "text": "something it's more or less kind of like owner it's a Aria I in waiting if you have",
    "start": "2662260",
    "end": "2673390"
  },
  {
    "text": "some specific extra cleanup so it's it's kind of Hecky thing and we will",
    "start": "2673390",
    "end": "2679480"
  },
  {
    "text": "hopefully provide that in the standard library with goecart classes but I'm still not sure if that's really really",
    "start": "2679480",
    "end": "2686940"
  },
  {
    "text": "something you could should you design around and their span and string span",
    "start": "2686940",
    "end": "2694839"
  },
  {
    "text": "and if we have string you in seventeen and maybe hopefully span in twenty and other things rev up the car gardens can",
    "start": "2694839",
    "end": "2703540"
  },
  {
    "start": "2699000",
    "end": "2755000"
  },
  {
    "text": "help you get rid of your old style synthesis code and most of the stuff you can actually change incrementally there",
    "start": "2703540",
    "end": "2710470"
  },
  {
    "text": "are ideas like C Line or Visual Studio or develop helping you to do that always",
    "start": "2710470",
    "end": "2718329"
  },
  {
    "text": "if you want to define guidelines take them with a grain of salt look at them",
    "start": "2718329",
    "end": "2723880"
  },
  {
    "text": "select what makes sense for you especially if you want to adopt them if you just be this body and say apply all",
    "start": "2723880",
    "end": "2730210"
  },
  {
    "text": "the core guidelines your developers will love you because 470 set seven pages as of today printing them is a very thing",
    "start": "2730210",
    "end": "2738309"
  },
  {
    "text": "learn and get your head around and we don't have tools that cover all of them yet and Klang also has some some tooling",
    "start": "2738309",
    "end": "2746230"
  },
  {
    "text": "around that and please try Civello if it's free give us feedback we want to",
    "start": "2746230",
    "end": "2752140"
  },
  {
    "text": "improve that because we want to get rid of bad software this is just a list of",
    "start": "2752140",
    "end": "2757750"
  },
  {
    "text": "what my students implemented some of the stuff works some of the stuff is e as",
    "start": "2757750",
    "end": "2763720"
  },
  {
    "text": "always but we try hard to make it a product quality in all of the areas and we are on our way to refactor and that",
    "start": "2763720",
    "end": "2770230"
  },
  {
    "text": "it's just a matter of having enough resources and funding to do it but we will do it and that's our compass and",
    "start": "2770230",
    "end": "2777849"
  },
  {
    "start": "2775000",
    "end": "2927000"
  },
  {
    "text": "you see the like in winter and winter is coming but not the bad things hopefully and whenever",
    "start": "2777849",
    "end": "2786220"
  },
  {
    "text": "you have questions feel free to grab me and ask me and we don't have time for",
    "start": "2786220",
    "end": "2791769"
  },
  {
    "text": "two questions but I have two hats to actually give away so I can take two",
    "start": "2791769",
    "end": "2797890"
  },
  {
    "text": "questions no question",
    "start": "2797890",
    "end": "2804779"
  },
  {
    "text": "bianna yeah you got you already have one [Laughter]",
    "start": "2804779",
    "end": "2813010"
  },
  {
    "text": "I've done that already and I got comments where I think the the",
    "start": "2839819",
    "end": "2845079"
  },
  {
    "text": "commander's perspective and mine just differ and that that happens and I am",
    "start": "2845079",
    "end": "2851529"
  },
  {
    "text": "showing my perspective here that's it yeah so I for some of the things I done that",
    "start": "2851529",
    "end": "2858579"
  },
  {
    "text": "some of the things I was too lazy to do it anything else so who wants ahead",
    "start": "2858579",
    "end": "2871259"
  },
  {
    "text": "nobody you are the first that I've seen and you",
    "start": "2871259",
    "end": "2878620"
  },
  {
    "text": "were the second one seen sorry for those who sit to the side my I have two more tomorrow so maybe think about a question",
    "start": "2878620",
    "end": "2885550"
  },
  {
    "text": "you want to ask tomorrow and maybe we are not running out of time like that tomorrow everyone vanquished by me who",
    "start": "2885550",
    "end": "2891640"
  },
  {
    "text": "has actually used Savelle ops so far I know of one but he's using it because I",
    "start": "2891640",
    "end": "2898120"
  },
  {
    "text": "kicked him hard enough so if you want to learn more about it I have some Flyers",
    "start": "2898120",
    "end": "2903160"
  },
  {
    "text": "to give you so if you want to learn about my perspective of what a modern idea should do for a c+ first grab me I",
    "start": "2903160",
    "end": "2911380"
  },
  {
    "text": "I can hand you a flier to take home - to try it or not so enjoy the rest of the",
    "start": "2911380",
    "end": "2917680"
  },
  {
    "text": "afternoon",
    "start": "2917680",
    "end": "2920250"
  }
]