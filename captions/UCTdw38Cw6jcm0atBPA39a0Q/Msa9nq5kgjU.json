[
  {
    "text": "who here knows about claur oh okay so I'll not explain what",
    "start": "10639",
    "end": "16278"
  },
  {
    "text": "we generally do I'll I'll just talk a little bit about myself first so I do",
    "start": "16279",
    "end": "22720"
  },
  {
    "text": "Linux at claer like we I manage the operating system we run in production",
    "start": "22720",
    "end": "27920"
  },
  {
    "text": "I'm passionate about system security performance and I enjoy low-level programming that is kernels drivers",
    "start": "27920",
    "end": "35719"
  },
  {
    "text": "bootloaders and other stuff written in unsafe programming languages I'm also a",
    "start": "35719",
    "end": "41800"
  },
  {
    "text": "DI hard Linux fan and you can see I'm presenting from a Mac now so and there",
    "start": "41800",
    "end": "48600"
  },
  {
    "text": "are reasons for that so Linux is great but it cannot do two things one is like",
    "start": "48600",
    "end": "53960"
  },
  {
    "text": "connect to external projectors and and power management so so",
    "start": "53960",
    "end": "61280"
  },
  {
    "text": "yeah uh okay uh today we're going to",
    "start": "61280",
    "end": "67080"
  },
  {
    "text": "talk about TPMS uh who knows what a TPM is trusted platform",
    "start": "67080",
    "end": "72680"
  },
  {
    "text": "module who here has a laptop who here thinks that their laptop",
    "start": "72680",
    "end": "79040"
  },
  {
    "text": "doesn't have a TPM okay so you'll see so yeah a TPM is",
    "start": "79040",
    "end": "85600"
  },
  {
    "text": "a small often discrete but in Modern Hardware it can be Integrated Security",
    "start": "85600",
    "end": "91119"
  },
  {
    "text": "chip it it is present on most modern laptops like and not even mod like I",
    "start": "91119",
    "end": "96960"
  },
  {
    "text": "think it has been around for many many years and like servers alike yeah it's",
    "start": "96960",
    "end": "103920"
  },
  {
    "text": "um it's a passive and non intrusive device uh uh it's not like some other",
    "start": "103920",
    "end": "110920"
  },
  {
    "text": "security systems that are very you know like try to spy on you it's it only it's",
    "start": "110920",
    "end": "116320"
  },
  {
    "text": "passive it only responds to Commons and performs stuff if you ask it if you don't ask it",
    "start": "116320",
    "end": "123159"
  },
  {
    "text": "to do it will not do anything so it doesn't tap into memory or anything uh but even though it's a very",
    "start": "123159",
    "end": "130200"
  },
  {
    "text": "cheap low powered slow device it allows you to build a great foundation for",
    "start": "130200",
    "end": "136720"
  },
  {
    "text": "platform Integrity authentication and remote attestation and luckily for us today",
    "start": "136720",
    "end": "144080"
  },
  {
    "text": "like it's a crypto chip so it can handle cryptography Keys which is good",
    "start": "144080",
    "end": "151840"
  },
  {
    "text": "if you ever been to uh previously to any s TPM talks like most talks and like",
    "start": "151879",
    "end": "158000"
  },
  {
    "text": "blog posts out there and uh everything is all about TPMS and remote attestation",
    "start": "158000",
    "end": "164920"
  },
  {
    "text": "right like anyone here doesn't know what a remote adastation is uh so yeah uh",
    "start": "164920",
    "end": "171800"
  },
  {
    "text": "remote adastation and platform Integrity so the the the primary usefulness of the",
    "start": "171800",
    "end": "177200"
  },
  {
    "text": "TPM that you can remotely ATT test your hardware and ask it like are you running",
    "start": "177200",
    "end": "183799"
  },
  {
    "text": "the operating system I expect you to run are you running the patches that you",
    "start": "183799",
    "end": "188920"
  },
  {
    "text": "expected to run did you boot the did you have the proper boot cycle so you can be remotely have guarantees of assurance of",
    "start": "188920",
    "end": "196200"
  },
  {
    "text": "a state of a platform at a particular point of time and it's a really nice feature for example even for Server",
    "start": "196200",
    "end": "202200"
  },
  {
    "text": "deployment like in Cloud where we have many many servers around the world and like there even we have data center",
    "start": "202200",
    "end": "207879"
  },
  {
    "text": "locations where there was never a single Cloud for employee even visiting it so",
    "start": "207879",
    "end": "213799"
  },
  {
    "text": "like but still like as as an operations team we can say like okay I know what this Ser is running right now which",
    "start": "213799",
    "end": "220239"
  },
  {
    "text": "operating system which software just because we have a TPM and it can provide this",
    "start": "220239",
    "end": "226799"
  },
  {
    "text": "information but TPMS are great so operating system use it like vendors use it Windows uses",
    "start": "226799",
    "end": "235120"
  },
  {
    "text": "it uh everything but it's available on every machine",
    "start": "235120",
    "end": "240480"
  },
  {
    "text": "I had a question is why there is not much open source or commercial software",
    "start": "240480",
    "end": "246079"
  },
  {
    "text": "actually utilizing TPM some more for storing your cryptographic keys right so like we all use UB Keys we all use like",
    "start": "246079",
    "end": "253319"
  },
  {
    "text": "fancy mobile authentication you have like a super secure chip in your",
    "start": "253319",
    "end": "259040"
  },
  {
    "text": "Hardware right here right now and there is actually almost zero software which can utilize it right so the question",
    "start": "259040",
    "end": "266600"
  },
  {
    "text": "about this presentation is not about remote adapation it's about as a developer I'm a software developer",
    "start": "266600",
    "end": "272919"
  },
  {
    "text": "imagine I just want to develop a tool which which stores cryptographic keys on the te can I store my keys in the",
    "start": "272919",
    "end": "280320"
  },
  {
    "text": "TPM yeah and this is basically my mental model as a developer right so I write code there",
    "start": "280320",
    "end": "288639"
  },
  {
    "text": "is a TPM I want to use it [Laughter]",
    "start": "288639",
    "end": "294000"
  },
  {
    "text": "right unfortunately apparently it's not that simple right like my code runs",
    "start": "294000",
    "end": "300360"
  },
  {
    "text": "on a computer which runs like modern computers runs operating system so you most likely use an operating system and",
    "start": "300360",
    "end": "307160"
  },
  {
    "text": "like if you're run an operating system you cannot talk to a hardware directly right you need to use operating system",
    "start": "307160",
    "end": "313440"
  },
  {
    "text": "abstractions because the operating system mediates applications and access to Hardware so if I run for example on",
    "start": "313440",
    "end": "320560"
  },
  {
    "text": "Linux and we'll be talking about Linux today like to access a TPM my",
    "start": "320560",
    "end": "325720"
  },
  {
    "text": "application needs to talk to /d TPM Z like a Linux device file representing",
    "start": "325720",
    "end": "331400"
  },
  {
    "text": "the TPM right so well okay but it's not over yet so uh what you to talk to the",
    "start": "331400",
    "end": "339440"
  },
  {
    "text": "TPM you need a thing called the resource manager and the problem is TP TPMS are",
    "start": "339440",
    "end": "345680"
  },
  {
    "text": "nice because they're super cheap so for vendors it's almost have zero cost putting them and if it breaks it's like",
    "start": "345680",
    "end": "351720"
  },
  {
    "text": "a five bucks replacement uh but on the other side they're not very powerful and they don't",
    "start": "351720",
    "end": "358720"
  },
  {
    "text": "support you know like multi-tenant access like simultaneous access and like",
    "start": "358720",
    "end": "365120"
  },
  {
    "text": "most likely if you run in an operating system you have a multitasking right so like there may be many applications",
    "start": "365120",
    "end": "371560"
  },
  {
    "text": "trying to access the TPM so what resource manager does is kind of serializes his access so the TPM doesn't",
    "start": "371560",
    "end": "378639"
  },
  {
    "text": "get confused right so I need this resource manager well and not only that so I also",
    "start": "378639",
    "end": "387400"
  },
  {
    "text": "need a TPM library right so like to talk through the resource manager to TPM I",
    "start": "387400",
    "end": "392720"
  },
  {
    "text": "need some kind of high level obstructions to uh to talk to so like my",
    "start": "392720",
    "end": "398680"
  },
  {
    "text": "initial mental model was application TPM but now I need all these things and know about all these things right so now",
    "start": "398680",
    "end": "406080"
  },
  {
    "text": "let's zoom into the re resource manager specifically so the other problem with the resource",
    "start": "406080",
    "end": "412919"
  },
  {
    "text": "manager the first implementation of the resource manager was a demon on Linux",
    "start": "412919",
    "end": "418199"
  },
  {
    "text": "right uh it was like a user space Service uh which mediated this access",
    "start": "418199",
    "end": "424240"
  },
  {
    "text": "and it it is very confusing for developer so like from your perspective",
    "start": "424240",
    "end": "429400"
  },
  {
    "text": "you kind of try to access a device but what if like that that demon is written in C and like it may crash or or didn't",
    "start": "429400",
    "end": "436840"
  },
  {
    "text": "start or the system may be misconfigured so like from my perspective I'm trying to access a device I know it exists but",
    "start": "436840",
    "end": "443759"
  },
  {
    "text": "because some service is not running like my application doesn't work so like this sounds not very very convenient so I",
    "start": "443759",
    "end": "451400"
  },
  {
    "text": "think like Linux kernel developers like recognize this and in more than Linux",
    "start": "451400",
    "end": "457520"
  },
  {
    "text": "kernel they basically reimplemented the resource manager directly into the operating system so the kernel always",
    "start": "457520",
    "end": "464159"
  },
  {
    "text": "runs don't so the resource manager is always running so basically now if you want to use inernal resource manager to",
    "start": "464159",
    "end": "471840"
  },
  {
    "text": "access the TPM you need not to talk to slpm H you need to talk to /de TPM RM",
    "start": "471840",
    "end": "479680"
  },
  {
    "text": "which stands for resource manager a different device file so if you're writing software talking to a TPM don't",
    "start": "479680",
    "end": "485879"
  },
  {
    "text": "never talk to TPM device directly talk to the resource man okay let's let's move to the TPM",
    "start": "485879",
    "end": "493840"
  },
  {
    "text": "Library what we can use these days and uh the situation here is not better so",
    "start": "493840",
    "end": "501080"
  },
  {
    "text": "we have like two major competing implementations one is called Intel TSS",
    "start": "501080",
    "end": "506280"
  },
  {
    "text": "TSS stands for trusted something",
    "start": "506280",
    "end": "512360"
  },
  {
    "text": "something TSS stack is like strust a software stack yeah and we have an",
    "start": "512399",
    "end": "517760"
  },
  {
    "text": "implementation from IBM like two companies propon major companies proping",
    "start": "517760",
    "end": "523719"
  },
  {
    "text": "TPM usage the problem with these they canot both try to follow standards but the",
    "start": "523719",
    "end": "530040"
  },
  {
    "text": "standards doesn't Define apis so like they have completely uh incompatible apis so for",
    "start": "530040",
    "end": "537880"
  },
  {
    "text": "example you have to choose either you use one or the other or you rpe a",
    "start": "537880",
    "end": "543040"
  },
  {
    "text": "wrapper that yeah you can use both but like you have to do more work here",
    "start": "543040",
    "end": "549480"
  },
  {
    "text": "because for example if you want to package your application for major Linux distributions you cannot be sure if the",
    "start": "549480",
    "end": "555839"
  },
  {
    "text": "distribution provides either this or that or both so like you have to think",
    "start": "555839",
    "end": "560920"
  },
  {
    "text": "about that so there's a a lot of stuff going on and and these are like C implementation",
    "start": "560920",
    "end": "568079"
  },
  {
    "text": "so if you for example write your code in go uh you know like go people they don't",
    "start": "568079",
    "end": "573880"
  },
  {
    "text": "even like external dependencies at all so they say like oh they Google implemented a pure go implementation of",
    "start": "573880",
    "end": "581200"
  },
  {
    "text": "the TPM L called go TPM and to be honest I never checked the rust space these",
    "start": "581200",
    "end": "586600"
  },
  {
    "text": "days but I'm sure maybe there is a rust implementation as well so like yeah so like you also need to understand what",
    "start": "586600",
    "end": "593440"
  },
  {
    "text": "kind of TPM library is available and you rely on that or should you bundle it",
    "start": "593440",
    "end": "598519"
  },
  {
    "text": "other stuff if you go to the GitHub page of the tpm2",
    "start": "598519",
    "end": "605880"
  },
  {
    "text": "software stack to understand what what that stack is all about you'll see the",
    "start": "605880",
    "end": "611480"
  },
  {
    "text": "slide right and they will say like oh you have these various layers where you",
    "start": "611480",
    "end": "616760"
  },
  {
    "text": "can hook into you have like the lower layers which is my closer API the high",
    "start": "616760",
    "end": "621800"
  },
  {
    "text": "levels which give you like more obstructed apis but you can do less things or or you have a middle layer",
    "start": "621800",
    "end": "627880"
  },
  {
    "text": "which you can basically Al reconfigure like like it all becomes really really",
    "start": "627880",
    "end": "634279"
  },
  {
    "text": "confusing like you just want to talk to a TPM and store the key",
    "start": "634279",
    "end": "639839"
  },
  {
    "text": "right but imagine you like understood all of that you researched it you're now a TPM expert you're finally ready to",
    "start": "639839",
    "end": "647560"
  },
  {
    "text": "write code so you write some code and the problem with this like your code you",
    "start": "647560",
    "end": "653399"
  },
  {
    "text": "have like if your application will try to access the resource manager on the",
    "start": "653399",
    "end": "658680"
  },
  {
    "text": "operating system you'll get permission denied uh why I mean and this is like",
    "start": "658680",
    "end": "664079"
  },
  {
    "text": "basically a standard barebones Debian installations for example uh why because well on the",
    "start": "664079",
    "end": "671200"
  },
  {
    "text": "standard Debian installation by default uh access to the TPM device is only",
    "start": "671200",
    "end": "677160"
  },
  {
    "text": "allowed for root and the same for the resource manager so like you know like",
    "start": "677160",
    "end": "682560"
  },
  {
    "text": "you write your code and you have to package it that it runs as root privileges and then like you want to",
    "start": "682560",
    "end": "688959"
  },
  {
    "text": "offic distributed from Debian Debian folks will ask you like why does your application need to run as root like",
    "start": "688959",
    "end": "694760"
  },
  {
    "text": "it's a privilege escalation right more confusingly if you on Dean at least like",
    "start": "694760",
    "end": "701480"
  },
  {
    "text": "if you do install the Intel TSS tpm2 TOS which use Intel TSS TCH you",
    "start": "701480",
    "end": "708120"
  },
  {
    "text": "will notice that the permissions will change on the TPM zero device now it's owned by a",
    "start": "708120",
    "end": "714920"
  },
  {
    "text": "special TSS user and yeah and TP PM resource manager will own by TSS user oh",
    "start": "714920",
    "end": "723000"
  },
  {
    "text": "here I have and TSS group so you can technically put your user from which",
    "start": "723000",
    "end": "729160"
  },
  {
    "text": "your application runs from to into TSS group and it can access EPM but again",
    "start": "729160",
    "end": "734680"
  },
  {
    "text": "you have all these packaging problems so you have to package for every",
    "start": "734680",
    "end": "740480"
  },
  {
    "text": "distribution like understand how it works you know like you have to convince the developers if you want to distribute",
    "start": "740480",
    "end": "746600"
  },
  {
    "text": "your package officially that you need to be in this group and like you have to understand how your users will run the",
    "start": "746600",
    "end": "752440"
  },
  {
    "text": "software will their user be in the TSS group like and and for example if your",
    "start": "752440",
    "end": "758160"
  },
  {
    "text": "application is written and go and you don't use the Intel TSS tag do you need to have TPM tools still as a dependency",
    "start": "758160",
    "end": "765160"
  },
  {
    "text": "so you get this configuration so yeah it's um it's very very",
    "start": "765160",
    "end": "771880"
  },
  {
    "text": "complicated and that's why like no software just don't do it right uh",
    "start": "771880",
    "end": "776920"
  },
  {
    "text": "because they can't figure all these out out really",
    "start": "776920",
    "end": "781959"
  },
  {
    "text": "well there is another way like who've been here in",
    "start": "781959",
    "end": "787959"
  },
  {
    "text": "2023 oh couple of people I don't know if you attended my talk about the Linux kernel key store so and if not it's okay",
    "start": "787959",
    "end": "797760"
  },
  {
    "text": "because I'm going to repeat some of this here Linux has a nice a cool feature",
    "start": "797760",
    "end": "803360"
  },
  {
    "text": "called Linux kernel key retention service AKA call it key Rings or key store for short who who knows that Linux",
    "start": "803360",
    "end": "811000"
  },
  {
    "text": "has a key store okay yeah so for for those who",
    "start": "811000",
    "end": "816360"
  },
  {
    "text": "doesn't know like key store is kind of like similar like keychain on Mac or I don't know what's the windows equivalent",
    "start": "816360",
    "end": "822519"
  },
  {
    "text": "where you store certificates and stuff uh crypto providers it was or",
    "start": "822519",
    "end": "828160"
  },
  {
    "text": "something like that yeah so Linux has a service and what it basically is is like",
    "start": "828160",
    "end": "835959"
  },
  {
    "text": "let's imagine you have many applications which run on Linux obviously you have the Linux kernel because you run on",
    "start": "835959",
    "end": "841440"
  },
  {
    "text": "Linux so the Linux kernel provides to Applications basically three specific",
    "start": "841440",
    "end": "846480"
  },
  {
    "text": "system calls to manage keys and applications can use these system calls",
    "start": "846480",
    "end": "852160"
  },
  {
    "text": "for example to store Keys as Kel object inside the kernel and originally it was",
    "start": "852160",
    "end": "859079"
  },
  {
    "text": "designed to provide cryptographic information to the kernel for in kernel sub systems so for example if you have",
    "start": "859079",
    "end": "865399"
  },
  {
    "text": "full dis encryption enabled which you should you need to provide the password to unlock the disk right so the kernel",
    "start": "865399",
    "end": "871720"
  },
  {
    "text": "needs to know your password so these system calls are the interface the applications your like",
    "start": "871720",
    "end": "877240"
  },
  {
    "text": "password unlocking program will provide it to the kernel and kernel will use that password to unlock your disk for",
    "start": "877240",
    "end": "883759"
  },
  {
    "text": "example but eventually it was extended that applications also can use uh these",
    "start": "883759",
    "end": "890000"
  },
  {
    "text": "keys that you provide to the kernel so some applications can provide keys to the kernel the other applications can",
    "start": "890000",
    "end": "895160"
  },
  {
    "text": "use those keys so like the key and the keys are kind of stored inside the kernel itself but applications are using",
    "start": "895160",
    "end": "901959"
  },
  {
    "text": "it so it's kind of like a software HSM model where keys are kept separately",
    "start": "901959",
    "end": "907279"
  },
  {
    "text": "from the application address memory space which is really good for security who here remembers hard",
    "start": "907279",
    "end": "914399"
  },
  {
    "text": "bleed oh yeah so like if if you store your TLS key in colel key store instead",
    "start": "914399",
    "end": "921079"
  },
  {
    "text": "of like in op SSL you would not be affected by hard way and internally uh keys and uh inside",
    "start": "921079",
    "end": "929880"
  },
  {
    "text": "the kernel represented as a collection of key rings and keys so key Rings may contain other keys and uh also key Rings",
    "start": "929880",
    "end": "938680"
  },
  {
    "text": "may contain keys so it's kind of similar to a file system hierarchy where key rings are directories like collections",
    "start": "938680",
    "end": "945160"
  },
  {
    "text": "of keys and the keys themselves are files the the objects that have the",
    "start": "945160",
    "end": "951120"
  },
  {
    "text": "cryptographic data or secret or whatever right the probably the difference is",
    "start": "951120",
    "end": "956240"
  },
  {
    "text": "like a key can be in two key rings simultaneously so and uh the key um the",
    "start": "956240",
    "end": "965600"
  },
  {
    "text": "key presence in a key ring defines the lifetime of the key so for example if",
    "start": "965600",
    "end": "971079"
  },
  {
    "text": "this key I will remove it from these both key rings so like a key cannot exist independently without any key",
    "start": "971079",
    "end": "977120"
  },
  {
    "text": "Rings the operating system will destroy it securely automatically so it will",
    "start": "977120",
    "end": "982319"
  },
  {
    "text": "release the memory backed by this key and zero it out so it's very great in",
    "start": "982319",
    "end": "987800"
  },
  {
    "text": "terms of even like security your key deltion so here is for example a basic",
    "start": "987800",
    "end": "994040"
  },
  {
    "text": "basic example of a Linux Kel key store and uh if you heard my presentations",
    "start": "994040",
    "end": "1000199"
  },
  {
    "text": "before I like to say that uh all these comments are copied from a real terminal",
    "start": "1000199",
    "end": "1005399"
  },
  {
    "text": "from my Dev Debian machine so consider this is a demo but unlike the demos we",
    "start": "1005399",
    "end": "1011079"
  },
  {
    "text": "see yesterdays with Michael Caris it doesn't fail because yeah but you can like walk",
    "start": "1011079",
    "end": "1018160"
  },
  {
    "text": "through and copy paste all of that and you should get the same result mostly so yeah we have like two",
    "start": "1018160",
    "end": "1024480"
  },
  {
    "text": "users uh on my system so Alice and Bob and we can see that they don't share any",
    "start": "1024480",
    "end": "1031280"
  },
  {
    "text": "credentials so they have separate user IDs they're not part of the same group nothing they're like just two separate",
    "start": "1031280",
    "end": "1037839"
  },
  {
    "text": "users right and let's imagine Alice wants to share a secret with Bob somehow",
    "start": "1037839",
    "end": "1043038"
  },
  {
    "text": "so Alice can use it key store so what Alice does is uh Alice adds with this",
    "start": "1043039",
    "end": "1049919"
  },
  {
    "text": "common Alice adds a key a secret basically with the contents of Hunter 2",
    "start": "1049919",
    "end": "1056559"
  },
  {
    "text": "uh to Alice Key store what Bob can now do Bob can now",
    "start": "1056559",
    "end": "1062760"
  },
  {
    "text": "create a new key ring which is basically an empty collection of keys and let's",
    "start": "1062760",
    "end": "1068760"
  },
  {
    "text": "call it from others so to receive Alice Keys now what Bob can do is that because",
    "start": "1068760",
    "end": "1073960"
  },
  {
    "text": "it's a proper kernel object now it has Associated permission similar to like file permiss permissions but there are",
    "start": "1073960",
    "end": "1080039"
  },
  {
    "text": "like more permissions uh on on the Kernel key object so what this means is basically",
    "start": "1080039",
    "end": "1086400"
  },
  {
    "text": "Bob allows anyone on the system to write to the key ring and writing to the key ring means putting keys there right so",
    "start": "1086400",
    "end": "1094159"
  },
  {
    "text": "it will make it like World writable so now Alice has access to that",
    "start": "1094159",
    "end": "1099440"
  },
  {
    "text": "key ring so Alice moves her key to and and yeah and every object like both keys",
    "start": "1099440",
    "end": "1106880"
  },
  {
    "text": "and key rings are represented by this unique number called a serial number so",
    "start": "1106880",
    "end": "1111919"
  },
  {
    "text": "like now Alice can use that serial number and move her key to the Bob's key ring and now Bob has a key and Bob can",
    "start": "1111919",
    "end": "1121799"
  },
  {
    "text": "actually read out the secret back so like Bob now has a secret and uh you can also see that Bob now possesses this key",
    "start": "1121799",
    "end": "1129200"
  },
  {
    "text": "what's called like having a key in your key ring means key possession and Alice actually because we move the key doesn't",
    "start": "1129200",
    "end": "1136280"
  },
  {
    "text": "have the key anymore Alice cannot read that Secret at",
    "start": "1136280",
    "end": "1141520"
  },
  {
    "text": "all and Linux kernel key store provides several key types so the example we just",
    "start": "1141520",
    "end": "1147559"
  },
  {
    "text": "saw is the simplest key type called user key and user key is basically a buffer with secret or or bites so one process",
    "start": "1147559",
    "end": "1156600"
  },
  {
    "text": "can put that key inside the kernel and either the same process or another",
    "start": "1156600",
    "end": "1161640"
  },
  {
    "text": "process who which has appropriate permissions can read that key back there",
    "start": "1161640",
    "end": "1167640"
  },
  {
    "text": "is a variation of user key called a log on key uh log on key is kind of the same",
    "start": "1167640",
    "end": "1173720"
  },
  {
    "text": "but once you put it inside the kernel no matter how which permissions do you have you can never read it back and why it's",
    "start": "1173720",
    "end": "1180919"
  },
  {
    "text": "useful it's exactly useful for providing cryptographic material to uh in colal",
    "start": "1180919",
    "end": "1187840"
  },
  {
    "text": "subsystem which need access to to it like dis encryption so if you have a",
    "start": "1187840",
    "end": "1192919"
  },
  {
    "text": "recently more than Linux distribution you will see that your disk unlocking password is actually provided as a log",
    "start": "1192919",
    "end": "1199880"
  },
  {
    "text": "on key you provided in the kernel once and boot but you technically never need to read it back so it's uh inserted in",
    "start": "1199880",
    "end": "1207880"
  },
  {
    "text": "the kernel is a log on key yeah there is also like asymmetric",
    "start": "1207880",
    "end": "1213919"
  },
  {
    "text": "key support which I think is cool so imagine you just don't have like a string of bytes of secret you have an",
    "start": "1213919",
    "end": "1219480"
  },
  {
    "text": "RSA key you can put it inside the kernel and another process instead of reading it",
    "start": "1219480",
    "end": "1226000"
  },
  {
    "text": "back if it has appropriate permissions it can perform cryptographic operations with that key so it doesn't need to read",
    "start": "1226000",
    "end": "1233039"
  },
  {
    "text": "the key but it can say hey Colonel uh please sign me this data with the key",
    "start": "1233039",
    "end": "1238960"
  },
  {
    "text": "you have which is referenced by the serial number and this is where it became cool like the kernel becomes your",
    "start": "1238960",
    "end": "1244480"
  },
  {
    "text": "like soft HSM uh or or a soft token right uh to handle your",
    "start": "1244480",
    "end": "1251520"
  },
  {
    "text": "keys so sounds good like so like we have this software HSM e subsystem we have",
    "start": "1252240",
    "end": "1259120"
  },
  {
    "text": "TPMS which is supposed to store cryptographic guills would it be better to somehow combine them together right",
    "start": "1259120",
    "end": "1265320"
  },
  {
    "text": "like in the very useful primitive and Linux actually kind of does it but like",
    "start": "1265320",
    "end": "1271559"
  },
  {
    "text": "in a very specific case so there is a key type called a trusted key and the",
    "start": "1271559",
    "end": "1278200"
  },
  {
    "text": "trusted key means like in in on the previous examples the problem is that",
    "start": "1278200",
    "end": "1284320"
  },
  {
    "text": "with user keys that even though you can insert it to the kernel the process itself that inserts it that still has",
    "start": "1284320",
    "end": "1291200"
  },
  {
    "text": "access to plain text cryptographic material right so there is still a a a window of time that sensitive material",
    "start": "1291200",
    "end": "1299279"
  },
  {
    "text": "is available to the process so if you still have a heart blade type of vulnerability which is triggered at that",
    "start": "1299279",
    "end": "1305679"
  },
  {
    "text": "exact moment that memory can be dumped and then your key will be leaked right would it be better to somehow design a",
    "start": "1305679",
    "end": "1311799"
  },
  {
    "text": "system where the plain text Secrets or key are never accessible to user space",
    "start": "1311799",
    "end": "1317240"
  },
  {
    "text": "only inside the kernel which is literally better protected so this is where rupt Keys come in so a rup key is",
    "start": "1317240",
    "end": "1324559"
  },
  {
    "text": "basically an encrypted blob with a secret encrypted to a particular TPM so",
    "start": "1324559",
    "end": "1330080"
  },
  {
    "text": "when some process inserts the rupt key the kernel internally talks to the TPM",
    "start": "1330080",
    "end": "1336520"
  },
  {
    "text": "to decrypt it so in the kernel space the key exists in plain text but if you try",
    "start": "1336520",
    "end": "1341720"
  },
  {
    "text": "to read it back it's almost automatically wrapped to this TPM again and in user space it's always in an",
    "start": "1341720",
    "end": "1348200"
  },
  {
    "text": "encrypt block but it's good but up until",
    "start": "1348200",
    "end": "1355880"
  },
  {
    "text": "recently it wasn't very useful so the only useful feature for that was actually again providing you uh the",
    "start": "1355880",
    "end": "1364360"
  },
  {
    "text": "ability to provide your dis encryption password in encrypted form to the kernel like nothing more because like in the",
    "start": "1364360",
    "end": "1371799"
  },
  {
    "text": "process you could could not use that R key at all because it's always encrypted",
    "start": "1371799",
    "end": "1377080"
  },
  {
    "text": "right um and this is where there is another subsystems called Linux crypto API in",
    "start": "1377080",
    "end": "1384039"
  },
  {
    "text": "Linux which is different from Linux kernel key store and was different from",
    "start": "1384039",
    "end": "1389440"
  },
  {
    "text": "TPMS uh so is Linux crypto API you can use the",
    "start": "1389440",
    "end": "1396400"
  },
  {
    "text": "Linux kernel as a crypto Library so for example if you run Linux on a small iot",
    "start": "1396400",
    "end": "1403080"
  },
  {
    "text": "device and you don't even have space for installing op SSL to do crypto in your software you can actually ask the konel",
    "start": "1403080",
    "end": "1410200"
  },
  {
    "text": "to do it and the way how it's done you create a special socket type uh it's not a network socket but",
    "start": "1410200",
    "end": "1418039"
  },
  {
    "text": "it's a socket basically from your process to the kernel and the scrypto socket will",
    "start": "1418039",
    "end": "1424919"
  },
  {
    "text": "instantiate like an instance of an encryption algorithm in the kernel uh so",
    "start": "1424919",
    "end": "1430159"
  },
  {
    "text": "for example as right now uh you as as a process you are responsible for",
    "start": "1430159",
    "end": "1435679"
  },
  {
    "text": "providing cryptographic material to initial iiz this instance so what you you have your cryptographic key which is",
    "start": "1435679",
    "end": "1441720"
  },
  {
    "text": "n key you send it through the socket and the kernel instantiates this",
    "start": "1441720",
    "end": "1448200"
  },
  {
    "text": "uh uh this encryption algorith and now you can send some data to that socket and the kernel will encrypt this data",
    "start": "1448200",
    "end": "1455320"
  },
  {
    "text": "with this key and and send the data back the problem with this and this is where",
    "start": "1455320",
    "end": "1460679"
  },
  {
    "text": "I say the Linux crypto API is independent from the key store API this is not a kernel key store key so these",
    "start": "1460679",
    "end": "1466679"
  },
  {
    "text": "are totally different subsystems this is just a bite buffer in your application which was silly so like uh uh we saw",
    "start": "1466679",
    "end": "1476600"
  },
  {
    "text": "that as an opportunity so what we uh did is we proposed a patch to the Linux",
    "start": "1476600",
    "end": "1483080"
  },
  {
    "text": "kernel to actually combine these two subsystem and allow you to instead of providing a bite buffer to encrypt",
    "start": "1483080",
    "end": "1490320"
  },
  {
    "text": "something with the kernel to actually reference a key store Key and uh so what",
    "start": "1490320",
    "end": "1496159"
  },
  {
    "text": "you can do now and this makes actually rap key is much more usable because for",
    "start": "1496159",
    "end": "1501399"
  },
  {
    "text": "example you provided a rra key to the kernel it's in plain text in the kernel but now you want to use it somehow so",
    "start": "1501399",
    "end": "1508120"
  },
  {
    "text": "you have a process fre for example which will create this crypto socket and instantiate an encryption algorithm but",
    "start": "1508120",
    "end": "1515240"
  },
  {
    "text": "instead of providing the key directly this process will say like hey I want",
    "start": "1515240",
    "end": "1520480"
  },
  {
    "text": "this algorithm to reference this key and then the kernel will do it for you and now you can kind of like uh incenter",
    "start": "1520480",
    "end": "1528399"
  },
  {
    "text": "rupt key into the kernel you don't know what the contents of that key but you can still use it and encrypt data with",
    "start": "1528399",
    "end": "1534399"
  },
  {
    "text": "it yeah so now the applications can encrypt the Crypt and it it even brings you even more closer to a proper",
    "start": "1534399",
    "end": "1541880"
  },
  {
    "text": "software HSM like and if you want to use this functionality it's been merged from Linux 6.2 so if you run an older kernel",
    "start": "1541880",
    "end": "1548919"
  },
  {
    "text": "it's not available but if 6.2 in orws it's",
    "start": "1548919",
    "end": "1554320"
  },
  {
    "text": "available the problem with this approach it only supports symmetric keys for now so you cannot you",
    "start": "1555159",
    "end": "1561399"
  },
  {
    "text": "can only encrypt and decrypt data but you cannot sign or verify for that you have to use the asymmetric key type",
    "start": "1561399",
    "end": "1568000"
  },
  {
    "text": "which is different and we also wanted to kind of",
    "start": "1568000",
    "end": "1574480"
  },
  {
    "text": "fix that and connect it all to the TPMS but uh actually the L kernel developers",
    "start": "1574480",
    "end": "1581039"
  },
  {
    "text": "are already on it so there is a patch set which is been uh developed by the",
    "start": "1581039",
    "end": "1587559"
  },
  {
    "text": "TPM Main containers for a couple of years so hopefully they'll they will merge it",
    "start": "1587559",
    "end": "1593559"
  },
  {
    "text": "soon the problem with this patch set though so it kind of like will allow you",
    "start": "1593559",
    "end": "1599039"
  },
  {
    "text": "to do this so like this is a a simple uh signing key right so you have",
    "start": "1599039",
    "end": "1606440"
  },
  {
    "text": "the signing key you can use it so now we want to bind it to TPM so we can never see the pl text asymmetric material so",
    "start": "1606440",
    "end": "1614120"
  },
  {
    "text": "they will do something like that so you have an RSA rra key and and you insert",
    "start": "1614120",
    "end": "1619240"
  },
  {
    "text": "it to the kernel and the kernel instead having the plain text and the kernel will handle it to the TPM so the key",
    "start": "1619240",
    "end": "1625679"
  },
  {
    "text": "will actually reside on the TPM and even the kernel will not have uh the plain",
    "start": "1625679",
    "end": "1631200"
  },
  {
    "text": "text cryptographic material and then you can use it but there is kind of like",
    "start": "1631200",
    "end": "1637000"
  },
  {
    "text": "inherent problem several problems with this approach uh the problem number one",
    "start": "1637000",
    "end": "1642840"
  },
  {
    "text": "is like if you do everything through the DPM remember at the beginning of the talk I said like TPMS are are slow right",
    "start": "1642840",
    "end": "1649440"
  },
  {
    "text": "so like you can not put actually many keys like this so you cannot if you",
    "start": "1649440",
    "end": "1654880"
  },
  {
    "text": "manage a web server you cannot put your TLS key there to protect it because",
    "start": "1654880",
    "end": "1660399"
  },
  {
    "text": "basically your web server will be slow your TLS handshake will be too",
    "start": "1660399",
    "end": "1665519"
  },
  {
    "text": "slow there is another problem with these rra keys and like a fundamental problem with the way how they create it uh so",
    "start": "1665519",
    "end": "1673480"
  },
  {
    "text": "and the way how they create it so you have a random number generator like how do you create Keys you generate them",
    "start": "1673480",
    "end": "1678919"
  },
  {
    "text": "randomly right so you generate some keys then you basically take your TPM and rub",
    "start": "1678919",
    "end": "1684880"
  },
  {
    "text": "this key into an encrypted blob which brings us to the next problem",
    "start": "1684880",
    "end": "1690760"
  },
  {
    "text": "so this approach solves the fact that your key is now protected but it has a",
    "start": "1690760",
    "end": "1697000"
  },
  {
    "text": "really poor Key Management part so imagine uh you can do all of that right",
    "start": "1697000",
    "end": "1703799"
  },
  {
    "text": "but what if you even though your rra key is R what if you lose it right what if you wrap your dis encryption password",
    "start": "1703799",
    "end": "1711320"
  },
  {
    "text": "like this and you lose that blob you you don't know what your disc encryption",
    "start": "1711320",
    "end": "1716720"
  },
  {
    "text": "password is because it's encrypted so you cannot recover it and you use Z blobs you cannot unlock your desk so",
    "start": "1716720",
    "end": "1722279"
  },
  {
    "text": "yeah uh so where to store these rra Keys like you obvious case you will store",
    "start": "1722279",
    "end": "1727360"
  },
  {
    "text": "them on disk but like at at least like what we have at scale problem and you",
    "start": "1727360",
    "end": "1732679"
  },
  {
    "text": "might even have it on your laptop what about like diskless systems right so",
    "start": "1732679",
    "end": "1738960"
  },
  {
    "text": "where do you store your rub blobs what about if your disc brokes and breaks and you don't have any backup copy so now",
    "start": "1738960",
    "end": "1745799"
  },
  {
    "text": "you have to think about proper key management and doing backup copies uh",
    "start": "1745799",
    "end": "1750840"
  },
  {
    "text": "what if you just accidentally wipe your disc it happened like our in our production environments for for example",
    "start": "1750840",
    "end": "1757600"
  },
  {
    "text": "a configuration management was misconfigured and it wiped a server everything is lost like any like you",
    "start": "1757600",
    "end": "1764159"
  },
  {
    "text": "don't even have to wipe all the data you only have to wipe this small blob and then boom you can't decrypt your data",
    "start": "1764159",
    "end": "1771320"
  },
  {
    "text": "anymore and the fundamental problem with this architecture is uh also you want to",
    "start": "1771320",
    "end": "1778760"
  },
  {
    "text": "have a unique key per application right so if you run write many applications",
    "start": "1778760",
    "end": "1784080"
  },
  {
    "text": "every application to use dedicated key so you have one blob uh what if you have more services",
    "start": "1784080",
    "end": "1790039"
  },
  {
    "text": "you have more blobs and more blobs and you have this you know like all extra",
    "start": "1790039",
    "end": "1795960"
  },
  {
    "text": "state which is really really critical for you that you have to keep an eye on like you have to store it somewhere you",
    "start": "1795960",
    "end": "1802200"
  },
  {
    "text": "have to back it up you have to do all these other things so I've been thinking like is",
    "start": "1802200",
    "end": "1808440"
  },
  {
    "text": "there a better way and what if we like flip how we",
    "start": "1808440",
    "end": "1813679"
  },
  {
    "text": "actually generate keys what if we turn R Keys into derived keys so like the way",
    "start": "1813679",
    "end": "1819159"
  },
  {
    "text": "how we create Keys would be different and we can do that with a TPM so with a TPM every TPM has a so called seed there",
    "start": "1819159",
    "end": "1828919"
  },
  {
    "text": "are like more than one but like for the purposes of this pronation seed is like a very secure large cryptographic",
    "start": "1828919",
    "end": "1835640"
  },
  {
    "text": "material which is unique to your TPM and by TPM design by all the standards you",
    "start": "1835640",
    "end": "1841039"
  },
  {
    "text": "can never never never ever get it from the TPM so it's like an internal TPM uh",
    "start": "1841039",
    "end": "1847039"
  },
  {
    "text": "an internal like secure string unique to the TPM what the TPM does provide is how to",
    "start": "1847039",
    "end": "1856039"
  },
  {
    "text": "access that seed is a key derivation function so even though you can't access the SE directly you can kind of derive keys",
    "start": "1856039",
    "end": "1862559"
  },
  {
    "text": "from that and this is all this is mandated by the TPM standard so like every TPM should have a seed and a kdf",
    "start": "1862559",
    "end": "1870760"
  },
  {
    "text": "like if it it's not it's like it's not compliant so every you can rely on the fact that every TPM has that right so",
    "start": "1870760",
    "end": "1877919"
  },
  {
    "text": "what if we instead of generating Keys what we use this approach and to make",
    "start": "1877919",
    "end": "1883240"
  },
  {
    "text": "the key unique per application we will provide a I call it a mix in like an",
    "start": "1883240",
    "end": "1888559"
  },
  {
    "text": "application metadata which is unique to application but it doesn't have to be secret it can be like anything like in",
    "start": "1888559",
    "end": "1896039"
  },
  {
    "text": "the examples that I will show later we can use like the pass on the file system right or something else like any",
    "start": "1896039",
    "end": "1901919"
  },
  {
    "text": "application metadata which uniquely defines an application so we can",
    "start": "1901919",
    "end": "1907960"
  },
  {
    "text": "generate reliably a key which is unique to application and Bas on the",
    "start": "1907960",
    "end": "1914039"
  },
  {
    "text": "TPM and the nice thing about this approach so let's how it scales right so",
    "start": "1914039",
    "end": "1919360"
  },
  {
    "text": "imagine we have many many applications and services for which we have want to have a TPM Bas key so we generate one if",
    "start": "1919360",
    "end": "1926519"
  },
  {
    "text": "we have more we can generate as many as we want as long as this mix in will be unique we can generate many more keys",
    "start": "1926519",
    "end": "1934120"
  },
  {
    "text": "but the nice thing about this approach this is totally disposable state right",
    "start": "1934120",
    "end": "1940279"
  },
  {
    "text": "because the process of key generation is totally reproducible from the TPM so you",
    "start": "1940279",
    "end": "1945799"
  },
  {
    "text": "don't have to store all of that you can basically do this on every machine or",
    "start": "1945799",
    "end": "1951200"
  },
  {
    "text": "sorry on every boot uh for example imagine you have a",
    "start": "1951200",
    "end": "1956880"
  },
  {
    "text": "dis small iot device where you want to SSH into right so anyone has a Raspberry",
    "start": "1956880",
    "end": "1963399"
  },
  {
    "text": "Pi or something like a project at home and like if you have if you don't have",
    "start": "1963399",
    "end": "1968559"
  },
  {
    "text": "like persistent memory if you SSH into that you will always have a random key and your SSH will complain oh that key",
    "start": "1968559",
    "end": "1975240"
  },
  {
    "text": "is different from what I've seen last time H yeah like I would like would you like to accept it so like it's it's not",
    "start": "1975240",
    "end": "1981440"
  },
  {
    "text": "a great security what if using this approach you can have a static SSH key",
    "start": "1981440",
    "end": "1987039"
  },
  {
    "text": "even in a disli system because with every boot U the software will be able",
    "start": "1987039",
    "end": "1992399"
  },
  {
    "text": "to rederive that key back from the TPM seed which is",
    "start": "1992399",
    "end": "1997360"
  },
  {
    "text": "static so how to implement all of that so and to do that there I I wanted to",
    "start": "1997600",
    "end": "2003320"
  },
  {
    "text": "explain the difference of two system calls in Linux it's called ad key and request key they are both part of the",
    "start": "2003320",
    "end": "2009320"
  },
  {
    "text": "Linux Cal key retention service but they have just semantic differences so with",
    "start": "2009320",
    "end": "2014639"
  },
  {
    "text": "ad Key System call and we've been using so far at Key in our examples the",
    "start": "2014639",
    "end": "2021200"
  },
  {
    "text": "process itself is responsible to providing cryptographic material to the",
    "start": "2021200",
    "end": "2026320"
  },
  {
    "text": "kernel so what the process is doing is like like hey I have some key material with user key it will be a plain text",
    "start": "2026320",
    "end": "2033880"
  },
  {
    "text": "cryptographic material with uh WRA key it will be encrypt the block but the process needs to get it from somewhere",
    "start": "2033880",
    "end": "2040799"
  },
  {
    "text": "right and it and it uses that key and the semantic is hey Colonel here's my key put it inside you right so and the",
    "start": "2040799",
    "end": "2049079"
  },
  {
    "text": "colonel does it request key is different with request key it is assumed that the",
    "start": "2049079",
    "end": "2055118"
  },
  {
    "text": "process itself doesn't have any access to any cryptographic material instead of says K it says to the colonel hey",
    "start": "2055119",
    "end": "2062560"
  },
  {
    "text": "Colonel give me the key give me my key right so like give me the key key from",
    "start": "2062560",
    "end": "2068200"
  },
  {
    "text": "me which I need to know like and the kernel is actually responsible to",
    "start": "2068200",
    "end": "2073800"
  },
  {
    "text": "somehow find a key for that process and of course everyone's setup is different",
    "start": "2073800",
    "end": "2079440"
  },
  {
    "text": "and you know like the kernel by itself doesn't know where to get your key from so what it does it creates a a",
    "start": "2079440",
    "end": "2085760"
  },
  {
    "text": "placeholder but what you can do to configure your system it will create a",
    "start": "2085760",
    "end": "2090919"
  },
  {
    "text": "user space a special user space process in the Linux kernel terminology is called a call out process which is",
    "start": "2090919",
    "end": "2098440"
  },
  {
    "text": "located any binary which is located at ASB request key and say hey help me to",
    "start": "2098440",
    "end": "2104400"
  },
  {
    "text": "find this key and uh you as a admin you can reconfigure that process or even",
    "start": "2104400",
    "end": "2110960"
  },
  {
    "text": "write custom modules through it to handle specific key types so for example if the key uh ID is uh you can par that",
    "start": "2110960",
    "end": "2120119"
  },
  {
    "text": "key ID and say like oh the process requested the key from I don't know my Amazon KMS or my local Vault inst or",
    "start": "2120119",
    "end": "2128280"
  },
  {
    "text": "something like that so you can actually uh satisfy that request and I was thinking like what if",
    "start": "2128280",
    "end": "2135720"
  },
  {
    "text": "I write a module where the request would be satisfied with a TPM so like I wrote",
    "start": "2135720",
    "end": "2141119"
  },
  {
    "text": "a module which basically redirects the request back to the TPM and what happens is like if the process request a key uh",
    "start": "2141119",
    "end": "2148960"
  },
  {
    "text": "the plugin properly works and it kind of like generates a key div with that architecture that I presented returns it",
    "start": "2148960",
    "end": "2156960"
  },
  {
    "text": "uh back and down the kernel that has the key and the kernel basically notifies",
    "start": "2156960",
    "end": "2162520"
  },
  {
    "text": "that the process that your key is ready you can use it so in this case basically the process doesn't have to even know",
    "start": "2162520",
    "end": "2170359"
  },
  {
    "text": "what key it needs it kind of say like hey give me my key and here's your key yeah and this plugin uh this is a",
    "start": "2170359",
    "end": "2178319"
  },
  {
    "text": "short link it's it's located in my GitHub I'll I'll can share the link I will reshare the link later uh I'm sorry",
    "start": "2178319",
    "end": "2186680"
  },
  {
    "text": "this is like a proof of concept so it's not it's written in Python and not a real programming language",
    "start": "2186680",
    "end": "2194560"
  },
  {
    "text": "so yeah but you can go and download and try it out and what it does is basically",
    "start": "2194560",
    "end": "2200560"
  },
  {
    "text": "it generates key not generates but derives key from the tpn seed reliably",
    "start": "2200560",
    "end": "2206800"
  },
  {
    "text": "based on application metadata on the application which requested and now you can do very very interesting things so",
    "start": "2206800",
    "end": "2214119"
  },
  {
    "text": "I'm this you don't have to under fully understand what this does it's basically",
    "start": "2214119",
    "end": "2219680"
  },
  {
    "text": "a way to config if you download my plugin how to reconfigure your system to actually use it so what what it",
    "start": "2219680",
    "end": "2226920"
  },
  {
    "text": "basically says is if an application requests a key which starts with an ID tpm2 derived and whatever the name",
    "start": "2226920",
    "end": "2234800"
  },
  {
    "text": "application gives here invoke my plugin which will talk to the TPM to generate",
    "start": "2234800",
    "end": "2240119"
  },
  {
    "text": "that key and now we can test it right so imagine uh I will not write my own code",
    "start": "2240119",
    "end": "2248079"
  },
  {
    "text": "but I will use the uh Linux provided uh system called wrappers uh as tools so",
    "start": "2248079",
    "end": "2255079"
  },
  {
    "text": "imagine my application wants to request a key and so like it it issues give me",
    "start": "2255079",
    "end": "2261200"
  },
  {
    "text": "my key it has to be a user key and the key ID is tpm2 derived test and it can also",
    "start": "2261200",
    "end": "2269960"
  },
  {
    "text": "provide some parameters and I implemented the P that it actually",
    "start": "2269960",
    "end": "2275160"
  },
  {
    "text": "parses two parameters the first one is 32 is basically the number of bytes the key should have so I'm requesting a 32",
    "start": "2275160",
    "end": "2281839"
  },
  {
    "text": "byte key and the second parameter actually identify tells my plug-in which",
    "start": "2281839",
    "end": "2287640"
  },
  {
    "text": "application specific metadata to use to make this key unique to my application and in this case I call I tell it hey",
    "start": "2287640",
    "end": "2294760"
  },
  {
    "text": "use my path right um yeah and like you see the request will be satisfied so I",
    "start": "2294760",
    "end": "2301160"
  },
  {
    "text": "get my key back and I can actually print it out so I if I print this key I get",
    "start": "2301160",
    "end": "2306839"
  },
  {
    "text": "some generated key here right and it will be unique to my application and now",
    "start": "2306839",
    "end": "2313000"
  },
  {
    "text": "to show you that it's Unique and fully reproducible I can delete it I can",
    "start": "2313000",
    "end": "2318640"
  },
  {
    "text": "delete it so the kernel will wipe the memory securely as it should and I can",
    "start": "2318640",
    "end": "2324560"
  },
  {
    "text": "request it again and now I can see from the kernel perspective I'm getting a different key because I'm getting a",
    "start": "2324560",
    "end": "2330560"
  },
  {
    "text": "different ID here so the key is regenerated but if I print it back you",
    "start": "2330560",
    "end": "2336240"
  },
  {
    "text": "it has the same content so this key is unique to my application and I don't need to worry about storing",
    "start": "2336240",
    "end": "2342680"
  },
  {
    "text": "it anywhere I can always recreate it when I need it cool yeah so now let's delete now",
    "start": "2342680",
    "end": "2350280"
  },
  {
    "text": "let's actually check that it it it it kind of like it is unique to my",
    "start": "2350280",
    "end": "2355640"
  },
  {
    "text": "application so I delete the key again and what I do now because I requested a",
    "start": "2355640",
    "end": "2361560"
  },
  {
    "text": "pass as an application metadata I copy my application from one place it was in user beIN to my home directory so it's",
    "start": "2361560",
    "end": "2368240"
  },
  {
    "text": "now in different place in the file system I will rerun it with the same arguments but then I have a different",
    "start": "2368240",
    "end": "2374720"
  },
  {
    "text": "key because now my application is located in a different uh spa place on",
    "start": "2374720",
    "end": "2380119"
  },
  {
    "text": "the file system so I will get a a different key this is how you can for example uh do the static SSH key for SSH",
    "start": "2380119",
    "end": "2388760"
  },
  {
    "text": "demon whatever is located at user bin sshd or sbin sshd will get an SSH key",
    "start": "2388760",
    "end": "2396359"
  },
  {
    "text": "for your system right but no other executable on your system will be able to get the same key because it's Unique",
    "start": "2396359",
    "end": "2402480"
  },
  {
    "text": "to that particular application U I also wanted to show you",
    "start": "2402480",
    "end": "2409760"
  },
  {
    "text": "so uh we're also taking a user ID into the account so like if I basically rerun",
    "start": "2409760",
    "end": "2415760"
  },
  {
    "text": "the same thing but with a different user I also get a different key so for example uh an application may have uh",
    "start": "2415760",
    "end": "2424800"
  },
  {
    "text": "permission B 755 executable by anyone right and if different users can execute",
    "start": "2424800",
    "end": "2430040"
  },
  {
    "text": "the same binary they should generally probably get different keys for that",
    "start": "2430040",
    "end": "2435079"
  },
  {
    "text": "because otherwise you can ex execute your SSH demon as an as your user not as",
    "start": "2435079",
    "end": "2440800"
  },
  {
    "text": "root and then you can kind of leak leak its unique key right which is not not",
    "start": "2440800",
    "end": "2446200"
  },
  {
    "text": "great there is another uh option I've implemented in my uh P plugin so in I I",
    "start": "2446200",
    "end": "2453800"
  },
  {
    "text": "request a different key now instead of uh well the same ID but the metadata",
    "start": "2453800",
    "end": "2459480"
  },
  {
    "text": "instead of pass I CH tell it uh keyword checkm and a checkm means checkm of the",
    "start": "2459480",
    "end": "2465760"
  },
  {
    "text": "application executable itself so now I'm binding my key to the platform via the",
    "start": "2465760",
    "end": "2471000"
  },
  {
    "text": "TPM and I also binding my key to the executable code itself which was",
    "start": "2471000",
    "end": "2476359"
  },
  {
    "text": "requested it and this is pretty cool as well so like yeah I can print it it has",
    "start": "2476359",
    "end": "2482040"
  },
  {
    "text": "some numbers I can delete it again uh now because I'm using using a different",
    "start": "2482040",
    "end": "2488119"
  },
  {
    "text": "metadata I can move this application from one pass to another I can move it from kctl 1 to kctl 2 uh I will request",
    "start": "2488119",
    "end": "2496560"
  },
  {
    "text": "it and I still get the same key right so because wherever I move this I can move",
    "start": "2496560",
    "end": "2502480"
  },
  {
    "text": "it anywhere in my system but the key is bind to the to the executable",
    "start": "2502480",
    "end": "2508720"
  },
  {
    "text": "itself and and to to prove that now let's I'll I'll patch my executable so I",
    "start": "2508720",
    "end": "2515560"
  },
  {
    "text": "know the key CTL utility has an error string called M bad message so I'll just",
    "start": "2515560",
    "end": "2522200"
  },
  {
    "text": "change one bite here I'll change bad massage it will still work right but one",
    "start": "2522200",
    "end": "2527359"
  },
  {
    "text": "bite if I rerun it I get a totally different key because the executable",
    "start": "2527359",
    "end": "2533160"
  },
  {
    "text": "change now so the key the key is",
    "start": "2533160",
    "end": "2537799"
  },
  {
    "text": "different okay similarly you can also do asymmetric keys with my plugin so uh you",
    "start": "2538640",
    "end": "2544720"
  },
  {
    "text": "can request an asymmetric key type and you get some key now you can generate some test data with open SSL and you can",
    "start": "2544720",
    "end": "2552119"
  },
  {
    "text": "ask the Linux kernel key store to sign it so like you get uh you get some",
    "start": "2552119",
    "end": "2558839"
  },
  {
    "text": "signature you can delete the key uh because you cannot actually read asymmetric keys back to prove it's the",
    "start": "2558839",
    "end": "2565079"
  },
  {
    "text": "same key I will delete it recreate again and generate the signature again and you see the signature is mat because the key",
    "start": "2565079",
    "end": "2571800"
  },
  {
    "text": "was reliably recreated and and and yeah you can and it's specific to your",
    "start": "2571800",
    "end": "2579559"
  },
  {
    "text": "application so yeah I find this architecture really really well there is",
    "start": "2579559",
    "end": "2584800"
  },
  {
    "text": "one small thing I still don't like about it right so like there's still this a place where the key exists in plain text",
    "start": "2584800",
    "end": "2592319"
  },
  {
    "text": "in user space right it's much better than before because it only exists in",
    "start": "2592319",
    "end": "2597400"
  },
  {
    "text": "this special like privilege process it's not exist like in your regular applications it's only one place so and",
    "start": "2597400",
    "end": "2604240"
  },
  {
    "text": "in mod Linux distribution you have address memory spaces installation so you will still probably not be affected",
    "start": "2604240",
    "end": "2610000"
  },
  {
    "text": "by hard bleed but like it would be even better if we just can cut this like",
    "start": "2610000",
    "end": "2615440"
  },
  {
    "text": "middle piece right and just like do this but for this uh we need kernel",
    "start": "2615440",
    "end": "2621520"
  },
  {
    "text": "development so and for historical reasons we need to replace uh the",
    "start": "2621520",
    "end": "2627240"
  },
  {
    "text": "request Key System called for ad keys and we would want to have something like that and the reason is basically because",
    "start": "2627240",
    "end": "2633839"
  },
  {
    "text": "R keys are using this where R Keys should be using request key properly so",
    "start": "2633839",
    "end": "2639839"
  },
  {
    "text": "I actually proposed a patch set to the Linux kernel last year actually",
    "start": "2639839",
    "end": "2644880"
  },
  {
    "text": "implementing all this but inside the kernel and describing all my use cases",
    "start": "2644880",
    "end": "2650559"
  },
  {
    "text": "everything that I told today the first feedback was like I don't honestly believe that this will Li solution for",
    "start": "2650559",
    "end": "2656960"
  },
  {
    "text": "any possible problem exist on this planet and partly this is why I'm doing",
    "start": "2656960",
    "end": "2663680"
  },
  {
    "text": "this presentation do you think it is useful yeah uh yeah so I can like feed that",
    "start": "2663680",
    "end": "2670280"
  },
  {
    "text": "data back and like but after some back and forth I think like we reached an",
    "start": "2670280",
    "end": "2676599"
  },
  {
    "text": "agreement that we should continue researching this further like the colonel folks proposed some good",
    "start": "2676599",
    "end": "2681800"
  },
  {
    "text": "improvements for example uh so you can make for example",
    "start": "2681800",
    "end": "2686920"
  },
  {
    "text": "your uh what they said like the concern was if you implement it in the kernel",
    "start": "2686920",
    "end": "2692440"
  },
  {
    "text": "let's say you use the kernel to generate a key in the TPM but then uh you have",
    "start": "2692440",
    "end": "2697960"
  },
  {
    "text": "root privileges on the system and you talk to the TPM directly and kind of steal that key because you can",
    "start": "2697960",
    "end": "2703000"
  },
  {
    "text": "regenerate it right and and steal it so uh they say like how can we address that",
    "start": "2703000",
    "end": "2708760"
  },
  {
    "text": "and my idea was through patching the TPM driver we can actually probably reserve a whole namespace of keys specifically",
    "start": "2708760",
    "end": "2716040"
  },
  {
    "text": "for the kernel so for example if the key starts tpm2 deriv kernel blah blah blah",
    "start": "2716040",
    "end": "2722280"
  },
  {
    "text": "only the kernel can generate this key from the TPM and if user user process",
    "start": "2722280",
    "end": "2728319"
  },
  {
    "text": "tries to generate the same key through the user space interface the driver will say like permission denied for example",
    "start": "2728319",
    "end": "2733839"
  },
  {
    "text": "this is where you can even be even closer to like a proper HSM and you can have like Hardware security and you can",
    "start": "2733839",
    "end": "2740079"
  },
  {
    "text": "have the static keys and you can have disle system you can have so many nice things all right uh that was I hope not",
    "start": "2740079",
    "end": "2747559"
  },
  {
    "text": "too much information uh conclusions uh but yeah",
    "start": "2747559",
    "end": "2752599"
  },
  {
    "text": "the whole point of this presentation was interfacing directly with TPMS is very hard card but kernel key store is this",
    "start": "2752599",
    "end": "2759000"
  },
  {
    "text": "really nice obstruction which is available to every application you don't need special permissions to talk to it",
    "start": "2759000",
    "end": "2764680"
  },
  {
    "text": "yeah so interfacing with TPMS is hard so that's why most application avoid them",
    "start": "2764680",
    "end": "2769760"
  },
  {
    "text": "all together yeah Linux kernel key retention service can be a good this abstraction",
    "start": "2769760",
    "end": "2775839"
  },
  {
    "text": "layer to abstract the TPM interaction complexity for application uh but as you saw like some",
    "start": "2775839",
    "end": "2782160"
  },
  {
    "text": "additional development might be required you have to as you plug in or wait for the current stuff to be merged um but",
    "start": "2782160",
    "end": "2790359"
  },
  {
    "text": "TPM derived Keys is probably a very good alternative alternative to TPM R",
    "start": "2790359",
    "end": "2796319"
  },
  {
    "text": "Keys um and it provides kind of similar Hardware based security guarantees as R",
    "start": "2796319",
    "end": "2802359"
  },
  {
    "text": "keys but with potentially really really much easier key management and uh",
    "start": "2802359",
    "end": "2808720"
  },
  {
    "text": "currently you can even use it now uh it can be implemented via request key plug-in for current kernels like you can",
    "start": "2808720",
    "end": "2815240"
  },
  {
    "text": "go and just download and improve my Plugin or rewrite it in a proper programming language or you can wait for",
    "start": "2815240",
    "end": "2822520"
  },
  {
    "text": "in chronal version to avoid exposing the pl text material to user space yeah and",
    "start": "2822520",
    "end": "2828559"
  },
  {
    "text": "uh yeah and like exposing TPMS through Linux c key store can provide applications to these uh uh",
    "start": "2828559",
    "end": "2836480"
  },
  {
    "text": "straightforward path to adopting uh Hardware security because from an application perspective now it's just",
    "start": "2836480",
    "end": "2841880"
  },
  {
    "text": "talking to the operating system through system calls some similar to reading a file or or doing Network iio right and",
    "start": "2841880",
    "end": "2850440"
  },
  {
    "text": "also it's probably true for other security chips I know like mobile phones have security chips these days some",
    "start": "2850440",
    "end": "2856520"
  },
  {
    "text": "companies do their own chips like Titans or like whatever like Amazon does so if",
    "start": "2856520",
    "end": "2862680"
  },
  {
    "text": "you're involved in development any security chip do consider exposing its",
    "start": "2862680",
    "end": "2868119"
  },
  {
    "text": "key store functionality through the Linux kernel key store IPI because if you do that like any application on the",
    "start": "2868119",
    "end": "2874119"
  },
  {
    "text": "system can now easily use your uh uh Hardware without like needing any extra",
    "start": "2874119",
    "end": "2879720"
  },
  {
    "text": "software dependencies well that's basically it uh here are some useful links so the first",
    "start": "2879720",
    "end": "2887119"
  },
  {
    "text": "two are the documentation for Linux kernel key store and The Trusted keys in",
    "start": "2887119",
    "end": "2892760"
  },
  {
    "text": "particular uh the third link is uh an ongoing effort for TPM maintainers to",
    "start": "2892760",
    "end": "2900079"
  },
  {
    "text": "implement an asymmetric TPM based key the fource link is an extended link for",
    "start": "2900079",
    "end": "2905319"
  },
  {
    "text": "my uh python an uh request key plugin which you can go and download and and",
    "start": "2905319",
    "end": "2910839"
  },
  {
    "text": "play with it and copy paste all the code from my presentation but you have to be prepared your output will be different",
    "start": "2910839",
    "end": "2917319"
  },
  {
    "text": "because you have a different TPM and different seed and if it's not please tell me please tell me because because",
    "start": "2917319",
    "end": "2923520"
  },
  {
    "text": "there probably vulnerability somewhere right um yeah and the fifth is like",
    "start": "2923520",
    "end": "2929599"
  },
  {
    "text": "follow this work if you want to follow along and see like if the inernal",
    "start": "2929599",
    "end": "2935160"
  },
  {
    "text": "versions will like make it into the kernel and you can start using it thank you very much and I think I have some",
    "start": "2935160",
    "end": "2941839"
  },
  {
    "text": "time for [Applause]",
    "start": "2941839",
    "end": "2950760"
  },
  {
    "text": "questions any questions",
    "start": "2950760",
    "end": "2954559"
  },
  {
    "text": "yes yeah yeah if you go into the code you will see like when the plugin receives a request from the kernel it",
    "start": "2959319",
    "end": "2965839"
  },
  {
    "text": "checks like okay which application uh uh requested it and which",
    "start": "2965839",
    "end": "2971440"
  },
  {
    "text": "user ID yeah so like it will use all that metadata to fit into the kdf hash",
    "start": "2971440",
    "end": "2977040"
  },
  {
    "text": "function to generate this unique key and you can probably tweak it with other use cases like this is a nice thing actually",
    "start": "2977040",
    "end": "2983720"
  },
  {
    "text": "about the plugin itself so you can actually rwe it to the metadata you think it is important you can like",
    "start": "2983720",
    "end": "2989680"
  },
  {
    "text": "Implement new metadata types you can make some metadata optional some metadata not so like depending on uh and",
    "start": "2989680",
    "end": "2997000"
  },
  {
    "text": "what what you want to do because like the reason I've implemented even two parts because I think like the check",
    "start": "2997000",
    "end": "3002280"
  },
  {
    "text": "some uh metadata is cooler because it's like securely binds your key to uh your",
    "start": "3002280",
    "end": "3008319"
  },
  {
    "text": "application but then the first question comes out how do you do software updates right for if your sshd man updates like",
    "start": "3008319",
    "end": "3015240"
  },
  {
    "text": "your key is invalid which is not great that's why like the pass is also useful option but maybe there are others",
    "start": "3015240",
    "end": "3023558"
  },
  {
    "text": "MH so good",
    "start": "3028559",
    "end": "3033880"
  },
  {
    "text": "question I I forgot to check this and I probably should uh no I mean generally",
    "start": "3033880",
    "end": "3040400"
  },
  {
    "text": "you can't bypass because I think uh the I have to check but the kernel key",
    "start": "3040400",
    "end": "3048160"
  },
  {
    "text": "store itself is not properly Nam SPAC I think it's like only Nam SPAC by username",
    "start": "3048160",
    "end": "3054319"
  },
  {
    "text": "spaces so when when basically when the request comes into the kernel when it",
    "start": "3054319",
    "end": "3059599"
  },
  {
    "text": "goes out it kind of strips all the uh container information which is kind of like a a bug and a feature at the same",
    "start": "3059599",
    "end": "3066799"
  },
  {
    "text": "time bug because like you cannot like containerize this but a feature for",
    "start": "3066799",
    "end": "3072240"
  },
  {
    "text": "example it allows you to uh use this in a multi-tenant system right so for",
    "start": "3072240",
    "end": "3078760"
  },
  {
    "text": "example imagine you have a Docker cluster Docker node right so and",
    "start": "3078760",
    "end": "3083920"
  },
  {
    "text": "containers requests are a key so you want host to be in the control which keys to you provide the containers",
    "start": "3083920",
    "end": "3089400"
  },
  {
    "text": "versus each container doing their own thing right yeah but I mean technically",
    "start": "3089400",
    "end": "3097720"
  },
  {
    "text": "because the plugin itself executes in the host namespace and it executes with root you can literally make the checks",
    "start": "3097720",
    "end": "3106000"
  },
  {
    "text": "as strict as you want you can go into proc file system and you see if it's a namespace if if the user ID is nam",
    "start": "3106000",
    "end": "3113599"
  },
  {
    "text": "spaced and like all do all sorts of things",
    "start": "3113599",
    "end": "3118520"
  },
  {
    "text": "yes no to be honest and this is where I even like from season K developers I I",
    "start": "3134920",
    "end": "3142000"
  },
  {
    "text": "met I don't know if you know James bonley who is considered to be the TPM guy in the",
    "start": "3142000",
    "end": "3147720"
  },
  {
    "text": "world and like he's like why don't why do you have this problem like why don't you store it on dis like discs like fail",
    "start": "3147720",
    "end": "3154000"
  },
  {
    "text": "and they're not always there right so like people just don't",
    "start": "3154000",
    "end": "3159760"
  },
  {
    "text": "consider these cases yeah I I never saw that a similar perspective and that's",
    "start": "3159760",
    "end": "3165280"
  },
  {
    "text": "why I went to the rabbit hole of developing it but to be honest in claer",
    "start": "3165280",
    "end": "3170680"
  },
  {
    "text": "we use uh a previous version of derived keys I had a talk about this myself like",
    "start": "3170680",
    "end": "3177599"
  },
  {
    "text": "seven or eight years ago uh which doesn't use TPM but he use a similar approach and it worked for us as a key",
    "start": "3177599",
    "end": "3184040"
  },
  {
    "text": "management like really really well because of this derived unique key approach you can really scale your keys",
    "start": "3184040",
    "end": "3190880"
  },
  {
    "text": "to millions of servers millions of applications and you don't have to worry too much about backing those up because",
    "start": "3190880",
    "end": "3196640"
  },
  {
    "text": "you eventually can always recreate it if you still have access to the C and so",
    "start": "3196640",
    "end": "3201720"
  },
  {
    "text": "this kind of prompted me to improve it by adding Hardware security and the tpn because ppms already provide All The",
    "start": "3201720",
    "end": "3208520"
  },
  {
    "text": "Primitives for for some reason ah uh to answer your question",
    "start": "3208520",
    "end": "3215520"
  },
  {
    "text": "it's not used in operating system but it's kind of natively used in the TPM",
    "start": "3215520",
    "end": "3221400"
  },
  {
    "text": "so the reason it actually exists when you do TPM initialization you create a",
    "start": "3221400",
    "end": "3227640"
  },
  {
    "text": "so-called storage root key like if you read any etpm set up guide and storage",
    "start": "3227640",
    "end": "3232880"
  },
  {
    "text": "root key is basically generates an asymmetric key uh from that seat in a uh",
    "start": "3232880",
    "end": "3239520"
  },
  {
    "text": "this reliable manner so like you can wipe the TPM regenerate and it will always be there so this is like this",
    "start": "3239520",
    "end": "3245599"
  },
  {
    "text": "approach is a Cornerstone of how TPM work any more",
    "start": "3245599",
    "end": "3252720"
  },
  {
    "text": "questions going once twice thank you",
    "start": "3252720",
    "end": "3258500"
  },
  {
    "text": "[Applause]",
    "start": "3258500",
    "end": "3261829"
  }
]