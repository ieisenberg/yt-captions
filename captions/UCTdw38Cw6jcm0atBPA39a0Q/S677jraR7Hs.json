[
  {
    "text": "hi there good afternoon and welcome to the session on graphed well so my name is Rob Crowley and I am the technical",
    "start": "9530",
    "end": "16430"
  },
  {
    "text": "product owner or technical lead for api's and authentication at Bank West and I work as part of the delivery",
    "start": "16430",
    "end": "23509"
  },
  {
    "text": "enablement team and one thing I really like about this team is that we build software for other developers within the",
    "start": "23509",
    "end": "30230"
  },
  {
    "text": "bank so our entire role is how can we let other developers other delivery",
    "start": "30230",
    "end": "35329"
  },
  {
    "text": "teams build more compelling user experiences for their particular cases that's awesome and that's really one of",
    "start": "35329",
    "end": "42379"
  },
  {
    "text": "the lenses which we'll be looking at today so building graph QL ap is such",
    "start": "42379",
    "end": "47570"
  },
  {
    "text": "that your front-end teams can deliver better more exciting and richer user experiences and we've got quite a lot",
    "start": "47570",
    "end": "53929"
  },
  {
    "text": "we've got a cover today so I don't want you to leave today with just I've seen a little bit of graph QL in action I",
    "start": "53929",
    "end": "60530"
  },
  {
    "text": "really want you to understand the category of problems that it will help you with because then you'll be able to decide whether this is a tool that will",
    "start": "60530",
    "end": "67010"
  },
  {
    "text": "help me our four particular problems that you know you might want to look at it moving forward after we set that",
    "start": "67010",
    "end": "72770"
  },
  {
    "text": "context we're gonna take a look at graph QL in action and for this year you'll see a couple of features I think everyone's kind of like got a click and",
    "start": "72770",
    "end": "78590"
  },
  {
    "text": "say yes I guess it right I think this makes sense from there we're gonna look",
    "start": "78590",
    "end": "84890"
  },
  {
    "text": "at how you can actually use graph QL effectively as part of your delivery",
    "start": "84890",
    "end": "90439"
  },
  {
    "text": "pipeline so in other words if you're actually building it as pairs of a team what are some of the tips and techniques",
    "start": "90439",
    "end": "96320"
  },
  {
    "text": "that you can get the most out of it but most of all today like realistically we",
    "start": "96320",
    "end": "103490"
  },
  {
    "text": "have an hour together I will not be able to make every single one of you in the room an expert in graph QL in one hour",
    "start": "103490",
    "end": "109119"
  },
  {
    "text": "but if I can inspire you just enough to leave the conference and learn more",
    "start": "109119",
    "end": "115009"
  },
  {
    "text": "about graph QL that would be absolutely a fantastic outcome for me so a little",
    "start": "115009",
    "end": "121159"
  },
  {
    "text": "bit of context so the recent shift to micro services rich web apps that's",
    "start": "121159",
    "end": "127219"
  },
  {
    "text": "really had quite a significant impact on our ability to build really rich and",
    "start": "127219",
    "end": "132830"
  },
  {
    "text": "compelling API experiences so rather",
    "start": "132830",
    "end": "137959"
  },
  {
    "text": "than just show you a little to-do app or something that's quite naughty let's actually look at what",
    "start": "137959",
    "end": "143000"
  },
  {
    "text": "your world you know site could look like today so I think this is going to be pretty you know familiar to everyone this is Amazon and there is obviously a",
    "start": "143000",
    "end": "149630"
  },
  {
    "text": "huge amount of data represented on this site so if we were to build this how",
    "start": "149630",
    "end": "156380"
  },
  {
    "text": "could we actually decompose this size into you know a number of modules and we",
    "start": "156380",
    "end": "161390"
  },
  {
    "text": "could slice this from a number of angles so first of all from a data perspective if we were to provide that daily into",
    "start": "161390",
    "end": "168110"
  },
  {
    "text": "for insisted a micro-services architecture it could look a little bit like this so for instance we could have",
    "start": "168110",
    "end": "173930"
  },
  {
    "text": "some core product details from a product service we could have some price from the pricing engine inventory promotions",
    "start": "173930",
    "end": "181330"
  },
  {
    "text": "images could be served from here a highly distributed image service and so on and so forth we could have certain",
    "start": "181330",
    "end": "187100"
  },
  {
    "text": "details therefore cross-selling each of these could have their own data store",
    "start": "187100",
    "end": "192200"
  },
  {
    "text": "could actually then be managed with you know its own pipeline its own speed of change but what about from a UI",
    "start": "192200",
    "end": "199670"
  },
  {
    "text": "perspective it looks quite different again we could have you know product header information product details but",
    "start": "199670",
    "end": "207049"
  },
  {
    "text": "then even tree that's got data from a number of different services in it like the key takeaway here is that there's",
    "start": "207049",
    "end": "213170"
  },
  {
    "text": "not a nice one-to-one mapping between the UI component and the underlying data",
    "start": "213170",
    "end": "218720"
  },
  {
    "text": "services so the question is how could we efficiently deliver this data to the",
    "start": "218720",
    "end": "225260"
  },
  {
    "text": "client and what we're going to take for the next five to ten minutes is a whistle-stop tour about how we as an",
    "start": "225260",
    "end": "231829"
  },
  {
    "text": "industry has looked to kind of solve this problem over time so starting off",
    "start": "231829",
    "end": "237489"
  },
  {
    "text": "we could say each one of the components could do its own orchestration so it",
    "start": "237489",
    "end": "243500"
  },
  {
    "text": "could call down to the various services that it needs pull down that data aggregated and put it on the screen on",
    "start": "243500",
    "end": "250970"
  },
  {
    "text": "the face of it that looks pretty sensible but when you actually consider over the network what that means you're",
    "start": "250970",
    "end": "256310"
  },
  {
    "text": "gonna have an incredibly chatty series of calls from each one of these components potentially over a very slow",
    "start": "256310",
    "end": "263060"
  },
  {
    "text": "Network link particularly if you're looking at emerging markets like that could lead to a terribly poor customer",
    "start": "263060",
    "end": "270020"
  },
  {
    "text": "experience so what can we do to improve that so this particular point in time you might say cool what we could do",
    "start": "270020",
    "end": "276160"
  },
  {
    "text": "we could put it on API gateway and this thing could then perform at a general back-end and we can do certain",
    "start": "276160",
    "end": "281560"
  },
  {
    "text": "aggregation here and deliver you know more normalized data to the client I",
    "start": "281560",
    "end": "286750"
  },
  {
    "text": "could absolutely be effective too but if you look at this as part of a delivery spectrum this then can quite often",
    "start": "286750",
    "end": "293500"
  },
  {
    "text": "become the constraint on delivery it's generally managed by a particular back-end team if your front-end teams",
    "start": "293500",
    "end": "299080"
  },
  {
    "text": "want to iterate quickly the two have to be tied in sync but that's really not the biggest issue with this is it's we",
    "start": "299080",
    "end": "306340"
  },
  {
    "text": "don't just build web sites anymore Mobile is everywhere your company might",
    "start": "306340",
    "end": "311680"
  },
  {
    "text": "have an upcoming line of wearable products each one of these experiences",
    "start": "311680",
    "end": "316810"
  },
  {
    "text": "needs a different set of data if you just got one back-end they're just serving this you know flat",
    "start": "316810",
    "end": "322690"
  },
  {
    "text": "resource structure your own ergo send too much data to the client or too little data to the client there is",
    "start": "322690",
    "end": "328870"
  },
  {
    "text": "always a trade-off so what can we do to improve that at this point we then",
    "start": "328870",
    "end": "335830"
  },
  {
    "text": "looked at backends for front ends so here we have each channel experience will have its own back-end API and",
    "start": "335830",
    "end": "346150"
  },
  {
    "text": "that's quite cool because this API is generally deemed to be an extension of the front end product so you're not really dealing with normal at well the",
    "start": "346150",
    "end": "353230"
  },
  {
    "text": "or Bulow's resource would you actually say how could I populate the data exactly for that particular view model",
    "start": "353230",
    "end": "358450"
  },
  {
    "text": "and again that's that's pretty good we've improved things we've removed a fair amount of the constraints that we",
    "start": "358450",
    "end": "364750"
  },
  {
    "text": "had with a single general-purpose back-end but there's always complications",
    "start": "364750",
    "end": "370419"
  },
  {
    "text": "what about versioning so again with websites we've been spoiled to update to",
    "start": "370419",
    "end": "376720"
  },
  {
    "text": "a new version they just redownload the page that's easy what about mobile what about you know",
    "start": "376720",
    "end": "382870"
  },
  {
    "text": "wearables where you actually have to Virginie API what about different requirements over time so much a version",
    "start": "382870",
    "end": "388720"
  },
  {
    "text": "would of my app just needs a smaller motor data we add features as we go and",
    "start": "388720",
    "end": "394270"
  },
  {
    "text": "overtime we're sending fare more data down to the client but if someone's still running version what why are we",
    "start": "394270",
    "end": "399310"
  },
  {
    "text": "sending all that extra data to them that they don't need again it's waste particularly if you're in an emerging",
    "start": "399310",
    "end": "404770"
  },
  {
    "text": "back is where days is expensive you don't want to be doing that I and we're having to trade off so what we",
    "start": "404770",
    "end": "412910"
  },
  {
    "text": "really want to do with this scenario if you had a perfect case we would send",
    "start": "412910",
    "end": "417920"
  },
  {
    "text": "exactly the data that the client needs irrespective of diversion and",
    "start": "417920",
    "end": "423140"
  },
  {
    "text": "irrespective of the channel and this is one of the cases that we're going to",
    "start": "423140",
    "end": "428150"
  },
  {
    "text": "explore for graph QL today gradual lets us said exactly the data and only the",
    "start": "428150",
    "end": "435110"
  },
  {
    "text": "data that each channel experience needs in one round-trip to the server that's",
    "start": "435110",
    "end": "441230"
  },
  {
    "text": "amazing because if you think in terms of a restful api you might go i will call",
    "start": "441230",
    "end": "446270"
  },
  {
    "text": "the root level resource it will return a set of children and then i will actually go through each one of those child",
    "start": "446270",
    "end": "451580"
  },
  {
    "text": "resources pull down the information it he'll have a lot of chattiness we will see irrespective of the data structure",
    "start": "451580",
    "end": "458240"
  },
  {
    "text": "would query to the backend and just to highlight this as well is we're not",
    "start": "458240",
    "end": "463280"
  },
  {
    "text": "really tied to just fronting you know HTTP services graph QL does not care",
    "start": "463280",
    "end": "469490"
  },
  {
    "text": "about the backend it could be directly really for a relational database could be soap over",
    "start": "469490",
    "end": "474770"
  },
  {
    "text": "web service it's to provide that age layer at a consistent interface outwards so when you leave today and if you're",
    "start": "474770",
    "end": "484370"
  },
  {
    "text": "sufficiently interested in graph QL I've written a quick demo app based on",
    "start": "484370",
    "end": "490479"
  },
  {
    "text": "Facebook's reference implementation of graph QL server which is written in JavaScript and the goal of this is to",
    "start": "490479",
    "end": "497510"
  },
  {
    "text": "answer the vast majority of the questions that you will have a you will face will you start a gradual how do you",
    "start": "497510",
    "end": "504770"
  },
  {
    "text": "get a server up how the bits tied together you know so you can explore",
    "start": "504770",
    "end": "509780"
  },
  {
    "text": "that and it actually covers like a number of reads rights and then some of the more advanced features which will",
    "start": "509780",
    "end": "515539"
  },
  {
    "text": "see as we continue through this presentation so the example domain that",
    "start": "515539",
    "end": "521330"
  },
  {
    "text": "we cover in that app is actually quite simple but it's complex enough to actually show you know a number of is of",
    "start": "521330",
    "end": "527000"
  },
  {
    "text": "interesting business rules so for this one that we're probably quite familiar with me about ists and assets can",
    "start": "527000",
    "end": "532910"
  },
  {
    "text": "release albums albums in turn released on labels and then we also have this",
    "start": "532910",
    "end": "539300"
  },
  {
    "text": "concept of a user so in this particular system you will be able to have a user and they will be reviews or create reviews on albums and",
    "start": "539300",
    "end": "547380"
  },
  {
    "text": "as we've got soothes through the the type system later you'll see that each one of these rules that we can introduce and then it kind of changes the way that",
    "start": "547380",
    "end": "553620"
  },
  {
    "text": "these interact so let's take a quick look at graph QL in action I think at",
    "start": "553620",
    "end": "559230"
  },
  {
    "text": "this point you'll kind of see the idea of okay I see how this thing works it's sending the data back and forth for the",
    "start": "559230",
    "end": "565620"
  },
  {
    "text": "server so what I've just loaded up here is called graphical so graphical is you",
    "start": "565620",
    "end": "570780"
  },
  {
    "text": "can think of as the IDE for graph QL so if you download one of the graphical",
    "start": "570780",
    "end": "577200"
  },
  {
    "text": "server implementations you will generally get this as part of it and this lets us compose queries in a pretty",
    "start": "577200",
    "end": "583140"
  },
  {
    "text": "elegant way and also they'd explore some of the API as we go so let's just start off there and you know just that like a",
    "start": "583140",
    "end": "590580"
  },
  {
    "text": "first initial our first initial query so we'll just go grab an artist and you",
    "start": "590580",
    "end": "595890"
  },
  {
    "text": "know get that a not very interesting is yes because we could do that with",
    "start": "595890",
    "end": "601380"
  },
  {
    "text": "restaurant though it would just look like slash out of slash ID so let's do",
    "start": "601380",
    "end": "608130"
  },
  {
    "text": "something a little bit more interesting so okay so we looked at before we said that you know Asus cared release albums",
    "start": "608130",
    "end": "614760"
  },
  {
    "text": "you know that's cool so that we go okay would call we say as it's now get",
    "start": "614760",
    "end": "619830"
  },
  {
    "text": "all the albums that they have again reasonably interesting let's continue we did say then that you know albums are",
    "start": "619830",
    "end": "626760"
  },
  {
    "text": "released odd labels so now we can pull down all the information for the label",
    "start": "626760",
    "end": "632630"
  },
  {
    "text": "this is where things get a little bit interesting because that again what I could say at this point is actually grab",
    "start": "632630",
    "end": "639780"
  },
  {
    "text": "me all the other albums that were released on that label as well and that",
    "start": "639780",
    "end": "644940"
  },
  {
    "text": "you can see that these things you could just grow them as you go forward and you",
    "start": "644940",
    "end": "650820"
  },
  {
    "text": "saw that each was at each time I went to one of these lists I'm actually getting a drop-down list of fields it's somehow",
    "start": "650820",
    "end": "658260"
  },
  {
    "text": "that graphical seems to know what our valid field or property is for this",
    "start": "658260",
    "end": "664140"
  },
  {
    "text": "particular query if I type in something that's you know not allows for this is",
    "start": "664140",
    "end": "670620"
  },
  {
    "text": "like foo I get an error it says foo isn't a valid member on this type",
    "start": "670620",
    "end": "676100"
  },
  {
    "text": "so that's pretty cool so this where I'm actually coding up my queries I will actually know well what's valid and",
    "start": "676100",
    "end": "682520"
  },
  {
    "text": "what's not valid that's pretty powerful there's also den on the right hand side",
    "start": "682520",
    "end": "688670"
  },
  {
    "text": "we can see certain documentation for the API so we can see I can do this set of",
    "start": "688670",
    "end": "693710"
  },
  {
    "text": "queries at the root element so I could grab labels artists albums user IDs and also tells you that what the valid",
    "start": "693710",
    "end": "700130"
  },
  {
    "text": "inputs and your outputs for them as well so it's robably some people at the room they're just thinking oh okay so you're",
    "start": "700130",
    "end": "706310"
  },
  {
    "text": "over and there's probably some sort of scheme or a type system involved and you'll be absolutely right and actually",
    "start": "706310",
    "end": "711860"
  },
  {
    "text": "we'll look at how that's composed next there's probably some other people in the room though and you know it's what",
    "start": "711860",
    "end": "720080"
  },
  {
    "text": "are you trying to pull here well he could actually do this with rest before and you probably could like we could",
    "start": "720080",
    "end": "726350"
  },
  {
    "text": "build an API and we could then have you know number of query parameters we might say okay well just return these",
    "start": "726350",
    "end": "732860"
  },
  {
    "text": "particular fields then we could also do dynamic includes and in fact if you look at JSON API it",
    "start": "732860",
    "end": "738500"
  },
  {
    "text": "actually covers a lot of this functionality already but the key point with graph QL is it makes it absolutely",
    "start": "738500",
    "end": "745580"
  },
  {
    "text": "trivial to do it if that's what it's designed about absolutely if you had a team and you know just to support you",
    "start": "745580",
    "end": "752840"
  },
  {
    "text": "know one particular channel system cool you could probably make that work this makes the functionality available for a",
    "start": "752840",
    "end": "759440"
  },
  {
    "text": "vast number of use cases it is incredibly quick to put a graph QL front at the top of your legacy API our legacy",
    "start": "759440",
    "end": "767450"
  },
  {
    "text": "back ed suite and then be able to move quickly forward it's not talking about weeks and months of development to craft",
    "start": "767450",
    "end": "774590"
  },
  {
    "text": "a REST API and even as my role as technical product owner for api's of the",
    "start": "774590",
    "end": "781340"
  },
  {
    "text": "bank even trying to get consistency in a REST API is that build from what delivery team to another it's actually a",
    "start": "781340",
    "end": "788300"
  },
  {
    "text": "bit of a nightmare there's a huge governance process the second you look to scale graph QL enforces a consistent",
    "start": "788300",
    "end": "794990"
  },
  {
    "text": "interface so at this point was got a sidestep a little bit and I want you to",
    "start": "794990",
    "end": "800540"
  },
  {
    "text": "really understand what was happening behind the scenes in that quick demo so",
    "start": "800540",
    "end": "806510"
  },
  {
    "text": "graticule itself is comprised of three main pets so we've already seen the",
    "start": "806510",
    "end": "813270"
  },
  {
    "text": "query language on the right hand side so this is where I was typing into graphical you could see that it defines",
    "start": "813270",
    "end": "819690"
  },
  {
    "text": "rules such that that each query has to open with a curly bracket and close with a curly bracket it defines what the",
    "start": "819690",
    "end": "825420"
  },
  {
    "text": "valid syntactic structure of a query is the type system on the left is a user",
    "start": "825420",
    "end": "832830"
  },
  {
    "text": "defined schema or set of types so in our particular debate it is albums reviews",
    "start": "832830",
    "end": "838800"
  },
  {
    "text": "artists on the right this is part of the standard on the left in the type system",
    "start": "838800",
    "end": "844950"
  },
  {
    "text": "this will be bespoke to your particular domain when you combine those two",
    "start": "844950",
    "end": "850410"
  },
  {
    "text": "together then that's what allows us to process that query and that's done by the execution engine so generally this",
    "start": "850410",
    "end": "856350"
  },
  {
    "text": "will be the graph QL server and it has two main jobs first of all validation so as I said",
    "start": "856350",
    "end": "863400"
  },
  {
    "text": "before you always know whether it's a valid query or not based on the language",
    "start": "863400",
    "end": "868740"
  },
  {
    "text": "and the domain you can mathematically prove whether that query will be successfully executed if validation",
    "start": "868740",
    "end": "875490"
  },
  {
    "text": "passes then we will be into the execution phase and this is one thing",
    "start": "875490",
    "end": "882420"
  },
  {
    "text": "that I incredibly like about graph QL particularly when you're trying to scale it in an organization and this is a",
    "start": "882420",
    "end": "888180"
  },
  {
    "text": "quote from Bertrand Meyer you might known from design by contract and this",
    "start": "888180",
    "end": "893370"
  },
  {
    "text": "is even in an O language we can generally have inconsistencies at module boundaries so interfaces and that's",
    "start": "893370",
    "end": "900270"
  },
  {
    "text": "between two parties imagine how much worse that is what rest when we don't have a strong interface is just implicit",
    "start": "900270",
    "end": "907320"
  },
  {
    "text": "typing what's a valid query upfront what's not you can eliminate a whole",
    "start": "907320",
    "end": "913100"
  },
  {
    "text": "category of issues right upfront and again there are ways that you can mitigate this with risk so a big quest",
    "start": "913100",
    "end": "920580"
  },
  {
    "text": "we use consumer different contracts a loss whereby each consumer of an API could then express their own set of",
    "start": "920580",
    "end": "926850"
  },
  {
    "text": "requirements for that provider scope and save all these Ted fields I'm only interested in these few that works",
    "start": "926850",
    "end": "934020"
  },
  {
    "text": "really well when you're a POS are used internally when you have a node number of consumers that does not work well at",
    "start": "934020",
    "end": "942090"
  },
  {
    "text": "all with public apos it just does not work at all and that's where the technique falls down so what",
    "start": "942090",
    "end": "948870"
  },
  {
    "text": "does a type look like in graph QL and we could define them quite succinctly so in",
    "start": "948870",
    "end": "954030"
  },
  {
    "text": "this case I say it's an artist and the artist has an ID property so in this case ID is just an opaque identifier",
    "start": "954030",
    "end": "960360"
  },
  {
    "text": "it's got a string that's a name and the exclamation mark of the right-hand side basically means non novel a value is",
    "start": "960360",
    "end": "967980"
  },
  {
    "text": "required it's got a number of aliases denoted this is a list by the square",
    "start": "967980",
    "end": "974550"
  },
  {
    "text": "brackets at the front and at the back and graph ul supports a number of other",
    "start": "974550",
    "end": "980460"
  },
  {
    "text": "scalar types so it supports boolean x' floats but you can also define your own",
    "start": "980460",
    "end": "987330"
  },
  {
    "text": "custom scalar type so for instance if you had a particular type of your system so for instance you might want to create",
    "start": "987330",
    "end": "992730"
  },
  {
    "text": "one for a daytime if you say I want to have ISO 8601 forward for my dates you could absolutely create a date scanner",
    "start": "992730",
    "end": "999090"
  },
  {
    "text": "type or for instance you might have what to say is this a valid URL so then the demo app shows you how you can actually",
    "start": "999090",
    "end": "1005510"
  },
  {
    "text": "create those scalar types that actually extend that type system yourself probably most interesting though we can",
    "start": "1005510",
    "end": "1011210"
  },
  {
    "text": "actually define a relation to another type that we defined in this particular case album so we can say this artist",
    "start": "1011210",
    "end": "1017210"
  },
  {
    "text": "will have a collection of albums associated with it and this relation is",
    "start": "1017210",
    "end": "1022580"
  },
  {
    "text": "actually what lets us traverse down when we were executing the queries so now",
    "start": "1022580",
    "end": "1029270"
  },
  {
    "text": "that we have a hierarchy of types how did we actually get that query executed",
    "start": "1029270",
    "end": "1035990"
  },
  {
    "text": "on the server so each type and each field on that type has a function",
    "start": "1035990",
    "end": "1041780"
  },
  {
    "text": "associated with it so for instance at the root level we associate this",
    "start": "1041780",
    "end": "1047660"
  },
  {
    "text": "particular function and in this case this can be whatever you want it to be purely you will take in this case what",
    "start": "1047660",
    "end": "1053630"
  },
  {
    "text": "input parameter which I had as the SSID and I just execute some arbitrary code to return that model and then each field",
    "start": "1053630",
    "end": "1062660"
  },
  {
    "text": "of that you can assign another function to it so in this case the artists name",
    "start": "1062660",
    "end": "1068750"
  },
  {
    "text": "will just be retrieved by passing in the artists which was returned by the route resolver at the type level and then just",
    "start": "1068750",
    "end": "1076070"
  },
  {
    "text": "pick out the name property of it but that again you can rise it to be as complex or as simple as",
    "start": "1076070",
    "end": "1082060"
  },
  {
    "text": "you need it to be so let's look through a query and actually then see how that would actually be you know conceptually",
    "start": "1082060",
    "end": "1088930"
  },
  {
    "text": "executed on the server so again this query is pretty straightforward you just say four artists with ID of five I'm",
    "start": "1088930",
    "end": "1095440"
  },
  {
    "text": "gonna get their name I want to get the list of albums and then off the album's I want to pull out the title and the",
    "start": "1095440",
    "end": "1100840"
  },
  {
    "text": "name of the label so the first thing that would happen is after the queries been validated it would hit the resolver",
    "start": "1100840",
    "end": "1108250"
  },
  {
    "text": "at the type level for artists and it would then in turn retrieve the heiress's model at that point in time",
    "start": "1108250",
    "end": "1114820"
  },
  {
    "text": "and then pass that data to the named resolver and the album's resolver first",
    "start": "1114820",
    "end": "1122530"
  },
  {
    "text": "off we would just retrieve the primitive Dame and in this case it might do another back-end service call to retrieve the collection of albums at",
    "start": "1122530",
    "end": "1129310"
  },
  {
    "text": "that point in time the result of each one of those albums is going to be passed to the album resolver function",
    "start": "1129310",
    "end": "1137350"
  },
  {
    "text": "and again it's going to go through the exact same process it's gonna call the title field resolver and they go to the",
    "start": "1137350",
    "end": "1143860"
  },
  {
    "text": "label and in turn traverse down to the label resolver itself so what you could really see is that the",
    "start": "1143860",
    "end": "1149950"
  },
  {
    "text": "structure of the query that we pass Eid is literally they just passed and each word of those notes execute a piece of",
    "start": "1149950",
    "end": "1157180"
  },
  {
    "text": "code at the back end and we just keep iterating down until we reach the leaf node of the query that data they get",
    "start": "1157180",
    "end": "1163210"
  },
  {
    "text": "bundled up and returned and that's why are the server-side and actually we could have you know multi ax here as",
    "start": "1163210",
    "end": "1170410"
  },
  {
    "text": "well this doesn't actually have to be a straight I could absolutely go from label back up to artists across to use",
    "start": "1170410",
    "end": "1175420"
  },
  {
    "text": "it this is all defied by yourself but the query itself will just be past the dead for each node and for each edge",
    "start": "1175420",
    "end": "1182470"
  },
  {
    "text": "which is the relationship between two nodes you will just execute that particular function on the back end and that's what you can actually grow",
    "start": "1182470",
    "end": "1188440"
  },
  {
    "text": "arbitrarily deep queries on the left-hand side like in the query to be executed on the server and this is",
    "start": "1188440",
    "end": "1195610"
  },
  {
    "text": "really a fundamental difference to what we have with rest with rest we model",
    "start": "1195610",
    "end": "1201310"
  },
  {
    "text": "resources and state transitions between those resources so we define on the server side how the client is going to",
    "start": "1201310",
    "end": "1208540"
  },
  {
    "text": "interact or retrieve that day with gradual we won't we don't do that",
    "start": "1208540",
    "end": "1213720"
  },
  {
    "text": "with graph QL we focus on creating the hierarchy of graph of objects on the",
    "start": "1213720",
    "end": "1220620"
  },
  {
    "text": "server side and then the clients can express their interest in a subsection",
    "start": "1220620",
    "end": "1225929"
  },
  {
    "text": "of that graph so we don't actually mandate here is exactly the call that",
    "start": "1225929",
    "end": "1233159"
  },
  {
    "text": "you can make we express the capabilities and then each queries the requirements that they need or that particular graph",
    "start": "1233159",
    "end": "1240799"
  },
  {
    "text": "so there's a number of types of operations that you can do with graph QL so so far we've been looking at queries",
    "start": "1240799",
    "end": "1248510"
  },
  {
    "text": "things without side effects you can also do mutations and mutations there when",
    "start": "1248510",
    "end": "1255210"
  },
  {
    "text": "you will actually send a command to the server side effects will happen and you will return the data back again just",
    "start": "1255210",
    "end": "1261769"
  },
  {
    "text": "like rest these are conceptual semantics meanings there is nothing to prevent me",
    "start": "1261769",
    "end": "1268200"
  },
  {
    "text": "from sending a query that did to a side effect or mutation that did it just like the rest I could do a side effect with a",
    "start": "1268200",
    "end": "1274200"
  },
  {
    "text": "guess it's not best practice but you absolutely could if you wanted to and in",
    "start": "1274200",
    "end": "1280380"
  },
  {
    "text": "each one of these types is one request and one response graph QL also supports",
    "start": "1280380",
    "end": "1286980"
  },
  {
    "text": "subscriptions and this is something we'll look at later in the talk but here it's radically different when I do a",
    "start": "1286980",
    "end": "1292320"
  },
  {
    "text": "subscription about saying I express an interest in zero or more occurrences of",
    "start": "1292320",
    "end": "1299130"
  },
  {
    "text": "something at some time in the future so I'm not actually expecting the data to",
    "start": "1299130",
    "end": "1304260"
  },
  {
    "text": "get come back to me straight away but I may get some data at some point in the future so as you can see these are",
    "start": "1304260",
    "end": "1311370"
  },
  {
    "text": "stateless operations but we will have to introduce some level of state or persistent connection on the server to",
    "start": "1311370",
    "end": "1317549"
  },
  {
    "text": "support them and we'll see how that works later so the second killer feature of graph QL",
    "start": "1317549",
    "end": "1324840"
  },
  {
    "text": "over above the type system is introspection and what this lets us do is actually issue queries against the",
    "start": "1324840",
    "end": "1332700"
  },
  {
    "text": "schema itself so I could ask the graph QL schema how many types do you have with you what are the names of those",
    "start": "1332700",
    "end": "1338880"
  },
  {
    "text": "types and in fact if you looked at graphical that is exactly what it was doing",
    "start": "1338880",
    "end": "1343980"
  },
  {
    "text": "to provide that drop-down list of available fields it was issuing a query to the server for this particular type",
    "start": "1343980",
    "end": "1350640"
  },
  {
    "text": "what are the valid fields for it and that's also how it generates the documentation tab that was on the rise",
    "start": "1350640",
    "end": "1356760"
  },
  {
    "text": "as well so obviously type-ahead is one",
    "start": "1356760",
    "end": "1362160"
  },
  {
    "text": "possible use for that what about cogeneration so if I already know what my query is and the structure",
    "start": "1362160",
    "end": "1369780"
  },
  {
    "text": "that I will get back why could I not generate a view model directly for that",
    "start": "1369780",
    "end": "1377570"
  },
  {
    "text": "why couldn't I just you know do all the translators for that you absolutely can",
    "start": "1377570",
    "end": "1382890"
  },
  {
    "text": "this gives you a huge amount of power to do things not at runtime but at build time and again you can also use that as",
    "start": "1382890",
    "end": "1390000"
  },
  {
    "text": "a valuable source of documentation maybe just like you do with swagger today so",
    "start": "1390000",
    "end": "1397470"
  },
  {
    "text": "over above the efficiency of a single call to the server and back this is actually quite beneficial for a client",
    "start": "1397470",
    "end": "1403860"
  },
  {
    "text": "as well because no longer do you have to issue multiple calls to back-end services and then aggregate that data or",
    "start": "1403860",
    "end": "1409710"
  },
  {
    "text": "the client or if one of those calls fail have to handle the retry logic all of",
    "start": "1409710",
    "end": "1415980"
  },
  {
    "text": "that burden is pushed to the server we will either get the result back or you",
    "start": "1415980",
    "end": "1421260"
  },
  {
    "text": "won't if that doesn't def fails just make one call again so all of that is dead handled on the server so great for",
    "start": "1421260",
    "end": "1429299"
  },
  {
    "text": "client developers actually pretty good for us API our back-end developers as well because we again don't have to",
    "start": "1429299",
    "end": "1437010"
  },
  {
    "text": "worry about exactly how we model the resource though we Express the capabilities of the graph and then each",
    "start": "1437010",
    "end": "1442590"
  },
  {
    "text": "of the clients then can query against that just to be clear like the examples",
    "start": "1442590",
    "end": "1450600"
  },
  {
    "text": "that I've showed you today all in Java Script graph QL does not equal Java Script there are implementations in the",
    "start": "1450600",
    "end": "1457500"
  },
  {
    "text": "vast majority of the popular programming languages today and in fact some of",
    "start": "1457500",
    "end": "1463620"
  },
  {
    "text": "these implementations are actually more feature-rich than the reference implementation from Facebook so for",
    "start": "1463620",
    "end": "1469200"
  },
  {
    "text": "instance in the scalar space they have sangria which was actually one of the first backends to support that push",
    "start": "1469200",
    "end": "1474750"
  },
  {
    "text": "based subscription model as well so I strongly encourage you to check that out this one's a dotnet this one's a Java huge",
    "start": "1474750",
    "end": "1481860"
  },
  {
    "text": "selection as well so don't think that if I'm gonna use graph QL I have to move my whole team over to JavaScript on node",
    "start": "1481860",
    "end": "1488160"
  },
  {
    "text": "that's not the case graph QL is not tied to HTTP they're",
    "start": "1488160",
    "end": "1494190"
  },
  {
    "text": "quite strong in that in the spec the vast majority of the implementations",
    "start": "1494190",
    "end": "1499860"
  },
  {
    "text": "will transport it over HTTP but we may see a shift in that moving forward so",
    "start": "1499860",
    "end": "1506700"
  },
  {
    "text": "long as the protocol supports exchanging character data that will be sufficient for graph QL graph QL is not a great",
    "start": "1506700",
    "end": "1517679"
  },
  {
    "text": "face for binary data so for instance if you want to handle file uploads or follow downloads",
    "start": "1517679",
    "end": "1523440"
  },
  {
    "text": "graph QL is not for you so that's why I don't see it as a complete replacement for REST API is that you might build it",
    "start": "1523440",
    "end": "1531000"
  },
  {
    "text": "is absolutely fantastic when you have data to expose to a number",
    "start": "1531000",
    "end": "1537150"
  },
  {
    "text": "of different clients and those clients have different data requirements so don't leave today thinking I will take",
    "start": "1537150",
    "end": "1543179"
  },
  {
    "text": "all of my REST API so just back them across they will absolutely continue to cohabitate in your ecosystem versioning",
    "start": "1543179",
    "end": "1553020"
  },
  {
    "text": "you can't talk about a POS without versioning and in fact when we actually",
    "start": "1553020",
    "end": "1561480"
  },
  {
    "text": "talk about versioning and Roy fielding was asked you know the father of rests you know when should you version a",
    "start": "1561480",
    "end": "1567750"
  },
  {
    "text": "restful api and his point was just like don't just don't do it and there's",
    "start": "1567750",
    "end": "1573120"
  },
  {
    "text": "always a trade-off when you do that I'm a bit more pragmatic I think at certain points in time you do after after you you know take that step and there's a",
    "start": "1573120",
    "end": "1579059"
  },
  {
    "text": "there's a myriad of ways we can do that with a restful api we can stick a version number in the URL because stick",
    "start": "1579059",
    "end": "1584700"
  },
  {
    "text": "it in the header we could do it properly and do it as a media-type but again there's always that concern",
    "start": "1584700",
    "end": "1590220"
  },
  {
    "text": "that when you do it will you be leaving old clients behind and void Fielding's",
    "start": "1590220",
    "end": "1596330"
  },
  {
    "text": "sort of viewpoint and this is you should always look to have a graceful evolution of your API contract so again just add",
    "start": "1596330",
    "end": "1603480"
  },
  {
    "text": "fields over time then check the usage and if they're no longer being used and remove them and in fact graph QL",
    "start": "1603480",
    "end": "1609450"
  },
  {
    "text": "supports versioning by not supporting versioning so again it forces you to do the exact same thing to",
    "start": "1609450",
    "end": "1615889"
  },
  {
    "text": "gracefully evolve your API and to provide some tooling for that so you can",
    "start": "1615889",
    "end": "1621169"
  },
  {
    "text": "mark the field as being deprecated so what this will do is when you're doing an introspection query to generate a",
    "start": "1621169",
    "end": "1627589"
  },
  {
    "text": "documentation for your site new consumers will no longer see that field",
    "start": "1627589",
    "end": "1633249"
  },
  {
    "text": "because you know exactly the fields that the client is interested in it's actually really easy to gauge is it safe",
    "start": "1633879",
    "end": "1641299"
  },
  {
    "text": "to remove this field whereas if they're just pulling down one restful resource you don't really know are they using all",
    "start": "1641299",
    "end": "1647959"
  },
  {
    "text": "the fields of that resource or only a subset of them so this actually makes",
    "start": "1647959",
    "end": "1653359"
  },
  {
    "text": "evolving your API I wouldn't say straightforward it never is but at least it makes it",
    "start": "1653359",
    "end": "1658609"
  },
  {
    "text": "deterministic in terms of whether a field is being used or not and if you know it's being used then you go and",
    "start": "1658609",
    "end": "1664700"
  },
  {
    "text": "have those conversations to say this particular feature will be sunsetted an exported time you know cupboard board a",
    "start": "1664700",
    "end": "1672969"
  },
  {
    "text": "key point is graph QL will not make you a database or like an API expert you",
    "start": "1673029",
    "end": "1680719"
  },
  {
    "text": "know modeling skills across you know any sort of like data environment it's still",
    "start": "1680719",
    "end": "1686029"
  },
  {
    "text": "table stakes so if you are having issues you know building or like having",
    "start": "1686029",
    "end": "1692539"
  },
  {
    "text": "governance across the api's that you build in your organization today graph you all will not instantly make that",
    "start": "1692539",
    "end": "1697729"
  },
  {
    "text": "better it will provide you a layer of the top wave and probably cover a multitude of sins you've made before I'd",
    "start": "1697729",
    "end": "1703879"
  },
  {
    "text": "make you know build it the way you wished you had the first time but if you just rush into it you will be using the",
    "start": "1703879",
    "end": "1709879"
  },
  {
    "text": "deprecated feature an awful lot so absolutely planet if you don't you know",
    "start": "1709879",
    "end": "1715789"
  },
  {
    "text": "you make up on stock but it would be remiss of me if I didn't offer you some",
    "start": "1715789",
    "end": "1721759"
  },
  {
    "text": "sage advice about how do you you know model your graph QL schema effectively and a very useful bit of information",
    "start": "1721759",
    "end": "1728539"
  },
  {
    "text": "that you actually see like a lot of graphic world talks is thinking graphs that's very zen isn't it but what does",
    "start": "1728539",
    "end": "1736700"
  },
  {
    "text": "this actually mean don't create fields that should be types so effectively from",
    "start": "1736700",
    "end": "1744379"
  },
  {
    "text": "there if you create let's just say I wanted to you know extend you know the artist type you",
    "start": "1744379",
    "end": "1750360"
  },
  {
    "text": "know and I want to say you know what producers have they been linked with don't just create a list like producer",
    "start": "1750360",
    "end": "1756120"
  },
  {
    "text": "ID with a scalar value rather create producer as an object and then assign a",
    "start": "1756120",
    "end": "1761670"
  },
  {
    "text": "name or an ID to it because what that lets you do is gracefully extend the",
    "start": "1761670",
    "end": "1766680"
  },
  {
    "text": "producer type as board data becomes available so what you should always be thinking of is how can I create separate",
    "start": "1766680",
    "end": "1773910"
  },
  {
    "text": "nodes for each one of those types I did the relationship between the two of them",
    "start": "1773910",
    "end": "1779780"
  },
  {
    "text": "so again we're going to look know as using graph QL as part of your delivery",
    "start": "1779780",
    "end": "1786630"
  },
  {
    "text": "pipeline and what are some of the things that it does really well for you what are some of the things that you should be concerned or you know pay special",
    "start": "1786630",
    "end": "1792929"
  },
  {
    "text": "attention to and the schema is absolutely fabulous for making",
    "start": "1792929",
    "end": "1800010"
  },
  {
    "text": "deterministic queries and on the other side of that it actually helps with API documentation as well but it's really",
    "start": "1800010",
    "end": "1807300"
  },
  {
    "text": "developer focused API documentation it gives you information on what the types",
    "start": "1807300",
    "end": "1812400"
  },
  {
    "text": "are a quick description of that field but if you were creating a public API you need out-of-band information as well",
    "start": "1812400",
    "end": "1818940"
  },
  {
    "text": "so for instance how do you sign up to get your API key is there rate limiting what about security none of that will be",
    "start": "1818940",
    "end": "1826200"
  },
  {
    "text": "part of the Skiba so if you really wanted to use this for public API documentation we need to do something a",
    "start": "1826200",
    "end": "1832500"
  },
  {
    "text": "little bit more but there's a number of tools in this space so this is just one called graph doc or what this lets you",
    "start": "1832500",
    "end": "1838679"
  },
  {
    "text": "do is take the graphical schema that you have and combine it with math down",
    "start": "1838679",
    "end": "1844800"
  },
  {
    "text": "documents to create a florid accessible documentation so this is incredibly",
    "start": "1844800",
    "end": "1850890"
  },
  {
    "text": "powerful because you can still get all of the benefits of the graph dwell schema but then write your own custom",
    "start": "1850890",
    "end": "1857570"
  },
  {
    "text": "documentation with it and then combine the two and then actually have that in other PDF something that you can just",
    "start": "1857570",
    "end": "1863910"
  },
  {
    "text": "head to someone or as a you know a separate website as well and so strongly consider something like this for the",
    "start": "1863910",
    "end": "1871230"
  },
  {
    "text": "environment in which you're operating don't roll your own graph QL client",
    "start": "1871230",
    "end": "1878810"
  },
  {
    "text": "so there's a number of clients at each one of the languages that we use and",
    "start": "1878810",
    "end": "1884030"
  },
  {
    "text": "they will actually help you build the query on the client side and also really help you you're managing the various",
    "start": "1884030",
    "end": "1890240"
  },
  {
    "text": "sort of like aggregation of sub queries that you might have in the UI as well so if you're using graph QL you should",
    "start": "1890240",
    "end": "1896660"
  },
  {
    "text": "absolutely be using a graph QL cloud but what are the key things that they do for you is really help you with caching and",
    "start": "1896660",
    "end": "1903530"
  },
  {
    "text": "we'll see exactly how they do their see the few slides in the JavaScript space",
    "start": "1903530",
    "end": "1908870"
  },
  {
    "text": "you've got three main options or at least two main options and then you know sort of blow some other ancillary ones",
    "start": "1908870",
    "end": "1915140"
  },
  {
    "text": "so first of all you could use relay which is Facebook's implementation as well then you can have the Apollo graph",
    "start": "1915140",
    "end": "1922040"
  },
  {
    "text": "QL client and Apollo are huge into space as well and actually the Apollo client is the one that I use for the vast",
    "start": "1922040",
    "end": "1927980"
  },
  {
    "text": "majority of work that I do it's very simple to get stairs it and it just allows you to deliver value really",
    "start": "1927980",
    "end": "1933800"
  },
  {
    "text": "quickly then there's also some lighter weight words like cachet again if you look at the reference slide at the end",
    "start": "1933800",
    "end": "1939500"
  },
  {
    "text": "you'll see where each way you can go to see where all the available clients fare air for you know your particular",
    "start": "1939500",
    "end": "1945110"
  },
  {
    "text": "language if you are going to support relay and really is the client library",
    "start": "1945110",
    "end": "1952970"
  },
  {
    "text": "that Facebook uses for data driven applications decides this really early",
    "start": "1952970",
    "end": "1958040"
  },
  {
    "text": "on relay is incredibly opinionated about how you need to structure your graph so",
    "start": "1958040",
    "end": "1965600"
  },
  {
    "text": "for instance relay mandates that between each node so that age you actually have",
    "start": "1965600",
    "end": "1971510"
  },
  {
    "text": "to model it as a connection itself and that connection then defines that relationship in more detail so you could",
    "start": "1971510",
    "end": "1978080"
  },
  {
    "text": "include things on at load you know paging information how you should be paged total number of Records",
    "start": "1978080",
    "end": "1984490"
  },
  {
    "text": "so you really have there is actually the graph QL spec is about that big the relay spec is about that big right so if",
    "start": "1984490",
    "end": "1991220"
  },
  {
    "text": "you're going to do that particularly again if it's going to be a public graphical ap I would encourage you to look s relay because they that's going",
    "start": "1991220",
    "end": "1998750"
  },
  {
    "text": "to be more flexible for you know your consumers but if it's for internal use you know maybe you need it maybe you",
    "start": "1998750",
    "end": "2005020"
  },
  {
    "text": "don't if you think you will third relay up front learn what it gives you a dead you know back that decision",
    "start": "2005020",
    "end": "2011770"
  },
  {
    "text": "it's got to be nasty to add it on afterwards though with restful APRs and",
    "start": "2011770",
    "end": "2020169"
  },
  {
    "text": "this is a large part of my role I really care about three things I care about what protocol the teams are gonna use I",
    "start": "2020169",
    "end": "2026980"
  },
  {
    "text": "care about what media type the teams are gonna use and again the media type will",
    "start": "2026980",
    "end": "2032230"
  },
  {
    "text": "define how the different a POS could actually communicate the structure because it's operable and the last one",
    "start": "2032230",
    "end": "2037779"
  },
  {
    "text": "is naming and graph QL is no different naming will be absolutely key for this",
    "start": "2037779",
    "end": "2045960"
  },
  {
    "text": "so there's a number of simple rules that you can come up with so for instance any boolean field whatever name that results",
    "start": "2045960",
    "end": "2053500"
  },
  {
    "text": "to a predicate so is can has four collections maybe you make them plural",
    "start": "2053500",
    "end": "2059740"
  },
  {
    "text": "nodes like what you would with resources I'm not writing these up to be prescriptive absolutely make these make",
    "start": "2059740",
    "end": "2067690"
  },
  {
    "text": "sense in your own domain boss come up with guidelines around naming up front",
    "start": "2067690",
    "end": "2073888"
  },
  {
    "text": "because graph QL really gives you a second chance to get this right don't squander it otherwise you will be",
    "start": "2073889",
    "end": "2081638"
  },
  {
    "text": "using deprecated a lot when you suddenly figure out that you want to call it something else and a bit of advice from",
    "start": "2081639",
    "end": "2090908"
  },
  {
    "text": "from you know sort of like my sort of years of building a POS is really look",
    "start": "2090909",
    "end": "2096730"
  },
  {
    "text": "for terms that reflect the terms of your business so talk to your product owners",
    "start": "2096730",
    "end": "2102010"
  },
  {
    "text": "talk to your users to see if there's certain names that come up time and time again so maybe not going quite to the sort of depth of like ubiquitous",
    "start": "2102010",
    "end": "2108070"
  },
  {
    "text": "language with debate over design but look for names that resonate with the business there's also a number of really",
    "start": "2108070",
    "end": "2113890"
  },
  {
    "text": "good resources online for this as well so schema.org you can go to it they'd say okay well what are the properties",
    "start": "2113890",
    "end": "2119349"
  },
  {
    "text": "that you might find on a person so for instance you might have you call it a nickname you also call it like also",
    "start": "2119349",
    "end": "2126160"
  },
  {
    "text": "donors you know what you Dave those fields if you go to schemer that all good keeps you at industry standards which will actually say alternate name",
    "start": "2126160",
    "end": "2132520"
  },
  {
    "text": "like it just gives you a tool to maybe get away from some of the by shedding conversations that you might have within",
    "start": "2132520",
    "end": "2137650"
  },
  {
    "text": "your team so naming right it's it's tough you will",
    "start": "2137650",
    "end": "2144400"
  },
  {
    "text": "spend a lot of time on us if you do we get rice and casings always the other one and graph QL really mandates a",
    "start": "2144400",
    "end": "2152590"
  },
  {
    "text": "different approach to how we handle persisting state are the client and with",
    "start": "2152590",
    "end": "2159340"
  },
  {
    "text": "restful api HTTP is absolutely amazing it gives us such fine grain control with",
    "start": "2159340",
    "end": "2165880"
  },
  {
    "text": "case control etags for traditional gets a conditional requests you know very if we're going to do a base of personalized",
    "start": "2165880",
    "end": "2171850"
  },
  {
    "text": "details or not and what we could also do is introduce intermediary caching layers",
    "start": "2171850",
    "end": "2178240"
  },
  {
    "text": "so restful api by design are very chatty but we mitigate that chatty this through intelligent caching so again if we for",
    "start": "2178240",
    "end": "2185950"
  },
  {
    "text": "instance with cache controller we could put a shared back to age and put that geographically close to the clients as",
    "start": "2185950",
    "end": "2191620"
  },
  {
    "text": "well very powerful graph QL doesn't play",
    "start": "2191620",
    "end": "2198040"
  },
  {
    "text": "nice with the web and that's you know if",
    "start": "2198040",
    "end": "2203440"
  },
  {
    "text": "your facebook that's fine you can you know build you know custom you know caching layers if you've got like endless resources with backwards we",
    "start": "2203440",
    "end": "2209290"
  },
  {
    "text": "don't we really wish that they actually used HTTP you know more effectively I really hope that this is something that",
    "start": "2209290",
    "end": "2215500"
  },
  {
    "text": "will change in the graph QL community moving forward but right now it treats it as a dub pipe so if you're looking at",
    "start": "2215500",
    "end": "2221380"
  },
  {
    "text": "caching you're looking at what can happen on the server side and in turn what can happen on the client side any",
    "start": "2221380",
    "end": "2227980"
  },
  {
    "text": "sort of intermediary keishon layers you know so very additional squid or any solutions that you might be using today",
    "start": "2227980",
    "end": "2233820"
  },
  {
    "text": "they're not going to be super helpful moving forward so what should you do on",
    "start": "2233820",
    "end": "2239140"
  },
  {
    "text": "the server side then so like I mentioned before graph QL is often a thin layer on",
    "start": "2239140",
    "end": "2244780"
  },
  {
    "text": "top of existing services that you already have I would absolutely recommend that you then look at a",
    "start": "2244780",
    "end": "2250840"
  },
  {
    "text": "caching layer in graph QL as well so this could be Redis this could be you know anything from there and the",
    "start": "2250840",
    "end": "2256150"
  },
  {
    "text": "patterns are really quite simple so for instance for a guess first of all try to get it from the case if it's not there",
    "start": "2256150",
    "end": "2262870"
  },
  {
    "text": "guess it from the underlying data store add it to the case and return the object",
    "start": "2262870",
    "end": "2269370"
  },
  {
    "text": "for the case of a mutation in this case I'm adding an album add the album to",
    "start": "2269370",
    "end": "2275440"
  },
  {
    "text": "that then basically retrieve that would be just added and you don't want to use the",
    "start": "2275440",
    "end": "2280450"
  },
  {
    "text": "input model because you might actually have additional properties that were created like creates de so you know any other sort of metadata so retrieve it",
    "start": "2280450",
    "end": "2287470"
  },
  {
    "text": "from the underlying store and then save it it's a simpler pattern as that graph",
    "start": "2287470",
    "end": "2293349"
  },
  {
    "text": "QL also often comes with data loader implementations so if you look at any of the sort of like starter documentation",
    "start": "2293349",
    "end": "2300369"
  },
  {
    "text": "for graph QL you will hear data loaders a lot and what that really does is provide you per request caching and",
    "start": "2300369",
    "end": "2308020"
  },
  {
    "text": "batching to the down end processes so for instance batching would be if I was retrieving each one of those albums so",
    "start": "2308020",
    "end": "2314710"
  },
  {
    "text": "for instance if I RS has had three albums instead of making three separate calls to the back-end system it could",
    "start": "2314710",
    "end": "2320349"
  },
  {
    "text": "actually batch them up and said one request to your delight services for those three albums so again the vast",
    "start": "2320349",
    "end": "2327369"
  },
  {
    "text": "majority of documentation which you will see with this covers data load or in quite some detail also in the demo app",
    "start": "2327369",
    "end": "2333369"
  },
  {
    "text": "that I provide you I actually show you how to actually use data loader at a couple of different cases the biggest",
    "start": "2333369",
    "end": "2340510"
  },
  {
    "text": "change for caching happens on the client side and this is really really the key points for why you want to use a",
    "start": "2340510",
    "end": "2346750"
  },
  {
    "text": "graphical client and instead of storing the hierarchical tree of data that comes",
    "start": "2346750",
    "end": "2353619"
  },
  {
    "text": "back from the server the graphical clients themselves actually break each row of that down and create a normalized",
    "start": "2353619",
    "end": "2361359"
  },
  {
    "text": "case for it so this is actually a pretty amazing thing and it's probably too much",
    "start": "2361359",
    "end": "2367000"
  },
  {
    "text": "detail to put on the slides but again it's quite covered in the relay spec as well but what this lets the client do is",
    "start": "2367000",
    "end": "2374250"
  },
  {
    "text": "make very intelligent caching about this is a piece of data within a tree",
    "start": "2374250",
    "end": "2380290"
  },
  {
    "text": "structure that I already have and if you're issuing a second query you can then say I already have this I don't",
    "start": "2380290",
    "end": "2385660"
  },
  {
    "text": "need to go back to the server for us so even though you're expressing your data as that query that might be exactly what",
    "start": "2385660",
    "end": "2392589"
  },
  {
    "text": "said to the server because you could have client-side caching there as well",
    "start": "2392589",
    "end": "2398160"
  },
  {
    "text": "so into a PR communication is really the lifeblood of rest it's actually how the",
    "start": "2398940",
    "end": "2405040"
  },
  {
    "text": "web works and hypermedia is actually probably one of",
    "start": "2405040",
    "end": "2410740"
  },
  {
    "text": "their like the most misunderstood sort of concepts when we're building rest api's and if you look at what Roy",
    "start": "2410740",
    "end": "2417910"
  },
  {
    "text": "fielding here described it as he said it was the simultaneous presentation of information and controls such as that",
    "start": "2417910",
    "end": "2423520"
  },
  {
    "text": "the information becomes the affordance through which the user receives options and takes actions is ever get that it",
    "start": "2423520",
    "end": "2432280"
  },
  {
    "text": "sounds like a bit of a funny topic but it's actually something there a lot of us would be familiar with so for instance HTML has a number of hypermedia",
    "start": "2432280",
    "end": "2438970"
  },
  {
    "text": "controls in it so for instance it has the anchor tag so what that say is when",
    "start": "2438970",
    "end": "2444400"
  },
  {
    "text": "and basically whatever the client passes that it will know if someone clicks on that anchor tag it will dereference the",
    "start": "2444400",
    "end": "2450970"
  },
  {
    "text": "reason was identified by the href tag cool it's got an image and basically it",
    "start": "2450970",
    "end": "2457329"
  },
  {
    "text": "will say whatever is whatever resource is defined by the source tag it will then pull down that images show us in",
    "start": "2457329",
    "end": "2462460"
  },
  {
    "text": "space in the screen let's go forms and forms we'll say I will take whatever data has been entered",
    "start": "2462460",
    "end": "2468310"
  },
  {
    "text": "by the user send it to the server refresh the page a hypermedia with regards to this particular rest",
    "start": "2468310",
    "end": "2475119"
  },
  {
    "text": "request in this case the client is calling the artist a P I is the underscore links element which is",
    "start": "2475119",
    "end": "2481030"
  },
  {
    "text": "defined by the Hal media type and what this lets you do is any client that then",
    "start": "2481030",
    "end": "2486430"
  },
  {
    "text": "understands how will they know okay I compare links that I know that I can actually then dereference that",
    "start": "2486430",
    "end": "2492640"
  },
  {
    "text": "particular events URL and this will be the format of the data that comes back",
    "start": "2492640",
    "end": "2497670"
  },
  {
    "text": "so again it's about delivering data that's in bandwidth the request and then",
    "start": "2497670",
    "end": "2502780"
  },
  {
    "text": "the semantics of that data's understood by both parties other than have it to go to the documentation figure out what it",
    "start": "2502780",
    "end": "2509500"
  },
  {
    "text": "is and then come back and this allows us to switch between a POS really easily so",
    "start": "2509500",
    "end": "2516040"
  },
  {
    "text": "I can just link between various a POS have pulled out the data and you'll see that that will be like incredibly",
    "start": "2516040",
    "end": "2522819"
  },
  {
    "text": "cupboard patted it's not that easy with",
    "start": "2522819",
    "end": "2528220"
  },
  {
    "text": "graph QL you can't easily fed erase between schemas with graph QL so graph",
    "start": "2528220",
    "end": "2535390"
  },
  {
    "text": "really wants you to have one big schema up front that covers everything",
    "start": "2535390",
    "end": "2541150"
  },
  {
    "text": "and that's actually you know might sound like quite a limp a stop front but what you should really look to sensei if you",
    "start": "2541150",
    "end": "2547329"
  },
  {
    "text": "need to access that data ideally included in your graph if you",
    "start": "2547329",
    "end": "2552819"
  },
  {
    "text": "can't then unfortunately you will be back to falling down to documentation to",
    "start": "2552819",
    "end": "2558190"
  },
  {
    "text": "try to figure it out so for instance if I call the graph QL API here I can get back this URL that",
    "start": "2558190",
    "end": "2563950"
  },
  {
    "text": "just points to events API and the performers with ID of 8 what's the",
    "start": "2563950",
    "end": "2570880"
  },
  {
    "text": "structure of that is that gonna be XML that I get back is that gonna be Jason it could be anything",
    "start": "2570880",
    "end": "2576130"
  },
  {
    "text": "we just don't know whereas obviously if we included that as part of our schema that the client would be able to know",
    "start": "2576130",
    "end": "2582099"
  },
  {
    "text": "exactly what was you know on offer in it so the other thing I think we should",
    "start": "2582099",
    "end": "2588160"
  },
  {
    "text": "talk about as well is authentication and authorization and where does that fit in",
    "start": "2588160",
    "end": "2594329"
  },
  {
    "text": "you know the work that you'll be doing and in this particular diagram we actually have both of those in play so",
    "start": "2594329",
    "end": "2601900"
  },
  {
    "text": "first of all we need person gets to the gate they will say who are you and I will present my passport at that point",
    "start": "2601900",
    "end": "2608230"
  },
  {
    "text": "in time that's the authentication pairs and at that point in time they'll say well do you have a valid visa to enter",
    "start": "2608230",
    "end": "2613749"
  },
  {
    "text": "it the country that's got to be the authorization pairs office and authentication should really be handled",
    "start": "2613749",
    "end": "2620559"
  },
  {
    "text": "as a cross-cutting concern so again you will not move or no likelihood you will not move from rest through to graph you",
    "start": "2620559",
    "end": "2627789"
  },
  {
    "text": "are on everything be covered bias you will have a bunch of legacy code maybe some stuff you know sort of like OPC",
    "start": "2627789",
    "end": "2633130"
  },
  {
    "text": "stuff or you know some rest apos handle it as a cross-cutting concern so again that might be you know open I did",
    "start": "2633130",
    "end": "2639369"
  },
  {
    "text": "connect north just as a security token service at that JWT could there be there just propagated through graph QL",
    "start": "2639369",
    "end": "2645900"
  },
  {
    "text": "authorization on the other hand is inherently a domain-specific concerned it is incredibly difficult to handle",
    "start": "2645900",
    "end": "2652269"
  },
  {
    "text": "that or I would say they are impossible to handle that as a cross-cutting concern so where should the",
    "start": "2652269",
    "end": "2658989"
  },
  {
    "text": "authorization object go you could obviously stick it into the graph QL resolver layer and that's probably quite",
    "start": "2658989",
    "end": "2664150"
  },
  {
    "text": "an easy way to get started but again what happens then if you need that in the REST API or in your PC calls as well",
    "start": "2664150",
    "end": "2671819"
  },
  {
    "text": "keep graph QL agnostic authorization logic graph QL should be an incredibly thin layer over existing",
    "start": "2671819",
    "end": "2678240"
  },
  {
    "text": "services but what would that really look",
    "start": "2678240",
    "end": "2685420"
  },
  {
    "text": "like then so as a user for instance this I want to be the only one permitted to see my personal details so that my right",
    "start": "2685420",
    "end": "2691510"
  },
  {
    "text": "to privacy is respected seems like a pretty legit user story so from a model perspective I always look to get one",
    "start": "2691510",
    "end": "2699760"
  },
  {
    "text": "source of truth for how you would retrieve one of those models so",
    "start": "2699760",
    "end": "2705070"
  },
  {
    "text": "irrespective of what entry point on the graph there should be one way of retrieving each type of entity so in",
    "start": "2705070",
    "end": "2710650"
  },
  {
    "text": "this particular case is I just issue every call we'll say to get a particular user we'll go through this method it",
    "start": "2710650",
    "end": "2717010"
  },
  {
    "text": "takes two arguments it takes an ID and the viewer and the viewer is the context of the person making the call and",
    "start": "2717010",
    "end": "2722380"
  },
  {
    "text": "they'll basically just check to see whether the viewer Logan equals the requested or the returned object login",
    "start": "2722380",
    "end": "2727870"
  },
  {
    "text": "and if the to match you return them if not just coalesce it to null I don't",
    "start": "2727870",
    "end": "2733300"
  },
  {
    "text": "throw an unauthorized request here so again if you're in the client and you've got a big tree of data",
    "start": "2733300",
    "end": "2738520"
  },
  {
    "text": "don't invalidate the entire tree for just one note and that's Jenny the practices that are adopted with graph QL",
    "start": "2738520",
    "end": "2744690"
  },
  {
    "text": "so this approach works really well for first party systems but what about third",
    "start": "2744690",
    "end": "2751840"
  },
  {
    "text": "party systems we've got delegated access so it's not only what the permissions the user has themselves but what",
    "start": "2751840",
    "end": "2757330"
  },
  {
    "text": "permissions or scopes that have been assigned to the platform that the user is making a call from and in this",
    "start": "2757330",
    "end": "2763780"
  },
  {
    "text": "particular case it is absolutely okay to do course grade authorization in your",
    "start": "2763780",
    "end": "2769270"
  },
  {
    "text": "graph QL layer so the authorization shouldn't be the sort of business type",
    "start": "2769270",
    "end": "2774730"
  },
  {
    "text": "rules like I just showed you but up from here what I've done is I've annotated the type definition so this is just one",
    "start": "2774730",
    "end": "2782340"
  },
  {
    "text": "looking in JavaScript with this allowed scopes property so in this particular",
    "start": "2782340",
    "end": "2787570"
  },
  {
    "text": "case it could look at the JSON web token which is effectively the access token for that what the person has",
    "start": "2787570",
    "end": "2793570"
  },
  {
    "text": "authenticated with and basically check whether it has this particular scope if it does it will then allow that call to",
    "start": "2793570",
    "end": "2800830"
  },
  {
    "text": "be propagated to the downstream southside apos if not it will terminate that right up front",
    "start": "2800830",
    "end": "2807160"
  },
  {
    "text": "coarse-ground authorization absolutely okay do not put fine-grained authorization in de Graaff ql there you",
    "start": "2807160",
    "end": "2815620"
  },
  {
    "text": "can actually annotate you know a number of different custom properties in your",
    "start": "2815620",
    "end": "2821200"
  },
  {
    "text": "type definitions so for instance github use a technique whereby they add visibility or audiences to their types",
    "start": "2821200",
    "end": "2828610"
  },
  {
    "text": "so they can actually then do this ones for internal use of github that this was a public use as well so always think",
    "start": "2828610",
    "end": "2834400"
  },
  {
    "text": "that as an extension point you can actually add your own data to type definitions so so far we've been pulling",
    "start": "2834400",
    "end": "2841570"
  },
  {
    "text": "data what if we could push data back to the client and this is what we hinted",
    "start": "2841570",
    "end": "2847030"
  },
  {
    "text": "about before with subscriptions so again",
    "start": "2847030",
    "end": "2852190"
  },
  {
    "text": "a requirement as a user I want to be able to be notified when my favorite artists release albums so that I keep up",
    "start": "2852190",
    "end": "2858880"
  },
  {
    "text": "to date with the music that I love and I found many of the applications that we create today need this rich sort of like",
    "start": "2858880",
    "end": "2866920"
  },
  {
    "text": "interactions of data it's not I'm gonna pull down some data then nothing happens you know as the user experience that",
    "start": "2866920",
    "end": "2872680"
  },
  {
    "text": "we're building though because Richard richer you really need to think about how could actually be informed when something happens on the back end so we",
    "start": "2872680",
    "end": "2879730"
  },
  {
    "text": "have a number of choices for real-time api's like traditionally we probably would have done polling and Poland's",
    "start": "2879730",
    "end": "2885040"
  },
  {
    "text": "absolutely find if you know the refresh rate of your data so for instance if we",
    "start": "2885040",
    "end": "2890800"
  },
  {
    "text": "had product rates interest rates that refresh once a day sure I'll just make one call a day described because I know",
    "start": "2890800",
    "end": "2896710"
  },
  {
    "text": "when they're gonna be refreshed if the data is more organic or evolving in",
    "start": "2896710",
    "end": "2901810"
  },
  {
    "text": "nature then polling quickly becomes problematic do you pull all the time this could be chatty do you do it too",
    "start": "2901810",
    "end": "2908530"
  },
  {
    "text": "infrequently you're gonna get lagged in the user experience what we really want is something to be pushed to the client",
    "start": "2908530",
    "end": "2914200"
  },
  {
    "text": "and there's two main options first of all there was this idea of live queries so this is where you could say I'm gonna",
    "start": "2914200",
    "end": "2919870"
  },
  {
    "text": "make a query and if anything with the underlying resolver there changes I just want to get a fresh copy of that query",
    "start": "2919870",
    "end": "2926560"
  },
  {
    "text": "push to the client really really really hard to implement so what the industry",
    "start": "2926560",
    "end": "2932260"
  },
  {
    "text": "or what what okay you know community have got a road is actually subscriptions which is a vent based so",
    "start": "2932260",
    "end": "2937600"
  },
  {
    "text": "what we actually do here is extra and interest in something happening on the server and then we will whether",
    "start": "2937600",
    "end": "2943870"
  },
  {
    "text": "happens we will they get that pushed back to the client and the subscriptions RFC has already been raised and it's",
    "start": "2943870",
    "end": "2950470"
  },
  {
    "text": "actually the most recent release of Facebook's reffered implementations support subscriptions and the general",
    "start": "2950470",
    "end": "2960160"
  },
  {
    "text": "idea here is I want to be told when something happens on the server and at some point in time when that does push",
    "start": "2960160",
    "end": "2967000"
  },
  {
    "text": "that data back to me they're read-only they're defined in the exact same way you would any other graph QL query and",
    "start": "2967000",
    "end": "2973420"
  },
  {
    "text": "they're absolutely not a replacement for queries you will not suddenly stop using",
    "start": "2973420",
    "end": "2978700"
  },
  {
    "text": "queries that everything's gonna be subscriptions it's just gonna be when something of interest happens on the",
    "start": "2978700",
    "end": "2984010"
  },
  {
    "text": "server you could then register your interest in this so you'll be using the two in concert so what does actually",
    "start": "2984010",
    "end": "2989740"
  },
  {
    "text": "look like so I'm the left hand side we have what a typical request response model would look like so obviously we",
    "start": "2989740",
    "end": "2996970"
  },
  {
    "text": "said this subscriptions are stateful so you need sort of a two-way bi-directional communication and this is",
    "start": "2996970",
    "end": "3004290"
  },
  {
    "text": "where this transport layer on the right hand side comes along so each of you",
    "start": "3004290",
    "end": "3009390"
  },
  {
    "text": "graph QL types could that expose a subscription method which will then be looked at by the subscription ad lib and",
    "start": "3009390",
    "end": "3015020"
  },
  {
    "text": "then the clients will then have the active subscription defined for that",
    "start": "3015020",
    "end": "3020420"
  },
  {
    "text": "when something of interest happens on the server side it can then raise an event the event will be added to that",
    "start": "3020420",
    "end": "3027270"
  },
  {
    "text": "same channel and then everything going well that subscription we raised and pushed to the client so let's walk to a",
    "start": "3027270",
    "end": "3035880"
  },
  {
    "text": "real example for what that would look like so in this particular case the",
    "start": "3035880",
    "end": "3041040"
  },
  {
    "text": "client opens up a call in this case using WebSockets to the subscriptions",
    "start": "3041040",
    "end": "3046290"
  },
  {
    "text": "endpoint which i've called forward slash subscriptions doesn't have to be there's not a standard there and it basically",
    "start": "3046290",
    "end": "3053610"
  },
  {
    "text": "then defines this particular structure or this query so a subscription and I want to be when an album is added and I",
    "start": "3053610",
    "end": "3060210"
  },
  {
    "text": "want to get the album title and the artist name so what's nice about here is it's not a it's not a fixed structure of",
    "start": "3060210",
    "end": "3068030"
  },
  {
    "text": "you know the event that gets pushed to the client the client still defines exactly the data structure that they",
    "start": "3068030",
    "end": "3075140"
  },
  {
    "text": "at some point of time the admin user then adds a particular album we then see",
    "start": "3075140",
    "end": "3082890"
  },
  {
    "text": "whether that particular user is interested in that event and whether that event is actually you know for one",
    "start": "3082890",
    "end": "3089010"
  },
  {
    "text": "of the areas in which they're interested in and then it pushes back the data to the client and this is exactly the",
    "start": "3089010",
    "end": "3094080"
  },
  {
    "text": "example that I do as parrot of the demo app as well so you'll be able to look at the code that actually powers this so in",
    "start": "3094080",
    "end": "3101640"
  },
  {
    "text": "the last couple of minutes that we have we'll look at a couple of other techniques that we have for low-friction development like how can you move",
    "start": "3101640",
    "end": "3107820"
  },
  {
    "text": "quicker with graph QL so the first piece",
    "start": "3107820",
    "end": "3113070"
  },
  {
    "text": "of advice I would give you is always start with the schema so the schema is",
    "start": "3113070",
    "end": "3118080"
  },
  {
    "text": "what will give you shared understanding between the client team building the",
    "start": "3118080",
    "end": "3123180"
  },
  {
    "text": "wrap and the server team building the API once the schema is agreed on both teams",
    "start": "3123180",
    "end": "3129480"
  },
  {
    "text": "can work in parallel so you're not waiting for the full API to be available and at this point in time once both of",
    "start": "3129480",
    "end": "3138390"
  },
  {
    "text": "these are complete you can then integrate them into the product at the end and finally rinse and repeat and",
    "start": "3138390",
    "end": "3143430"
  },
  {
    "text": "ship but always start with the schema first and then we'll actually quickly quickly let you iterate the design",
    "start": "3143430",
    "end": "3149880"
  },
  {
    "text": "rather than I've built it oh no wait that's not quite right let's start again so if the client team though is going to",
    "start": "3149880",
    "end": "3156960"
  },
  {
    "text": "be working in parallel you're gonna have to find a way to you know mock the data or use an API that's based on not the",
    "start": "3156960",
    "end": "3163500"
  },
  {
    "text": "actual back-end and then this really awesome tool which I absolutely love called graph QL Fator and what that lets",
    "start": "3163500",
    "end": "3169440"
  },
  {
    "text": "you do is actually set up a dynamic faking or proxy that will then let you",
    "start": "3169440",
    "end": "3174690"
  },
  {
    "text": "not only completely mock a back-end but also enrich certain functionality with it so the first thing graphical faker",
    "start": "3174690",
    "end": "3181380"
  },
  {
    "text": "does is it takes in a schema and at this point in time the clients can then issue",
    "start": "3181380",
    "end": "3187050"
  },
  {
    "text": "a request to the graphic UL faker proxy containing some of the real data and",
    "start": "3187050",
    "end": "3192960"
  },
  {
    "text": "just some faked data that we've defied in graph QL faker the real portion of that request will be",
    "start": "3192960",
    "end": "3199410"
  },
  {
    "text": "sent to the back-end server the backend server will then actually send back what the real data is we will enrich that",
    "start": "3199410",
    "end": "3206040"
  },
  {
    "text": "with some fake data and then that goes back to the client so you can probably see here is if you're just quickly iterating your",
    "start": "3206040",
    "end": "3211779"
  },
  {
    "text": "design you don't actually have to change the API you could say oh well what about you know this field does that does that",
    "start": "3211779",
    "end": "3219190"
  },
  {
    "text": "look rising you want to change some of the details for that and in fact let's just take a real quick look at that as",
    "start": "3219190",
    "end": "3226180"
  },
  {
    "text": "well so what we can do here is using the",
    "start": "3226180",
    "end": "3232359"
  },
  {
    "text": "extend notion we can actually then add additional properties to types so in",
    "start": "3232359",
    "end": "3238539"
  },
  {
    "text": "this particular case I've added a side property which I've just set as null string with just of type URL so if we",
    "start": "3238539",
    "end": "3245920"
  },
  {
    "text": "actually go back here what I can just do to solar illustrators we can say just",
    "start": "3245920",
    "end": "3254170"
  },
  {
    "text": "retrieve any old album and I want to retrieve you know the you know producer",
    "start": "3254170",
    "end": "3261549"
  },
  {
    "text": "details for that and at this point in time I'm just gonna say well you know it's you know I don't know what a",
    "start": "3261549",
    "end": "3273940"
  },
  {
    "text": "producer is it's not a real field it doesn't exist in the back ed schema so what we could then do in is basically go",
    "start": "3273940",
    "end": "3280269"
  },
  {
    "text": "in and say okay well actually let's just define what one of those would look like and on here I can just say okay well I",
    "start": "3280269",
    "end": "3286720"
  },
  {
    "text": "will create a field that's called producer and I will make it of type producer now will we go back to the",
    "start": "3286720",
    "end": "3294789"
  },
  {
    "text": "client I just get that mock data and that can be as rich or as simple as you",
    "start": "3294789",
    "end": "3301779"
  },
  {
    "text": "want it to be but what that lets you do was really rapidly without having to change and deploy your API iterate on",
    "start": "3301779",
    "end": "3308650"
  },
  {
    "text": "your design couple of points to finish",
    "start": "3308650",
    "end": "3314950"
  },
  {
    "text": "with telemetry is absolutely key for graph QL you could obviously see that",
    "start": "3314950",
    "end": "3320650"
  },
  {
    "text": "the cloud could send arbitrary depth queries to the back end absolutely put",
    "start": "3320650",
    "end": "3326440"
  },
  {
    "text": "typing details at every point in your package because performance can be key and you really want to see what query",
    "start": "3326440",
    "end": "3333730"
  },
  {
    "text": "came in and what queries on the south side did you actually execute to the",
    "start": "3333730",
    "end": "3339099"
  },
  {
    "text": "back-end services as well so think about this up front if you don't it could be painful to add in",
    "start": "3339099",
    "end": "3344170"
  },
  {
    "text": "afterwards or worse you're in production and something's running slowly that's not the situation you want to be in and",
    "start": "3344170",
    "end": "3350789"
  },
  {
    "text": "again build support for a phase release process so figure out if you're gonna",
    "start": "3350789",
    "end": "3356380"
  },
  {
    "text": "have one schemer how you can actually do pilot launches for that so again that might be through custom properties on",
    "start": "3356380",
    "end": "3362950"
  },
  {
    "text": "your schema so again saying this is for internal use this is for public use that's the technique that get abused but",
    "start": "3362950",
    "end": "3370119"
  },
  {
    "text": "again you want to find a way that you can actually put out these features and pilot them see that they're actually",
    "start": "3370119",
    "end": "3377650"
  },
  {
    "text": "solving the problem before you get into that costly deprecated versioning sort of approach for this so as you can see I",
    "start": "3377650",
    "end": "3386740"
  },
  {
    "text": "really hope that you've taken that from an efficiency point of view graph QL can",
    "start": "3386740",
    "end": "3392619"
  },
  {
    "text": "let you take exactly the data that you need and send it to each client experience it can really help you with",
    "start": "3392619",
    "end": "3398200"
  },
  {
    "text": "documentation it can help you fix some mistakes that you might have made with your previous implementations and it's",
    "start": "3398200",
    "end": "3407619"
  },
  {
    "text": "really incredibly good at solving the problem of multiple clients that have",
    "start": "3407619",
    "end": "3412930"
  },
  {
    "text": "very different data requirements so thank you I really hope that you've",
    "start": "3412930",
    "end": "3419289"
  },
  {
    "text": "really enjoyed the graph too I'll talk and I really hope that all your API consumers become little heroes on the",
    "start": "3419289",
    "end": "3424599"
  },
  {
    "text": "back of it thank you [Music]",
    "start": "3424599",
    "end": "3429159"
  },
  {
    "text": "okay so we have three minutes for questions if there's anything from the floor so the question is what is the",
    "start": "3431160",
    "end": "3444520"
  },
  {
    "text": "recommendation for pagination for large data lists so one of the things I didn't show you which within which can run to",
    "start": "3444520",
    "end": "3450370"
  },
  {
    "text": "afterwards is that each one of those connections can actually take a number",
    "start": "3450370",
    "end": "3457270"
  },
  {
    "text": "of inputs so for instance here we have albums list and I could actually pass in you know some details here so this",
    "start": "3457270",
    "end": "3463870"
  },
  {
    "text": "particular case I say that I just want you know the first two but I absolutely could and likewise I could do things",
    "start": "3463870",
    "end": "3470080"
  },
  {
    "text": "like you know order by these are just things that I've defined myself this absolutely there you could pass in a",
    "start": "3470080",
    "end": "3475480"
  },
  {
    "text": "number of arrogance which would say first fifty you know second fifty so with a graphical API would generally",
    "start": "3475480",
    "end": "3481480"
  },
  {
    "text": "actually recommend that you do cursor based pagination so you will actually just pass back a opaque cursor identifier which will they're actually",
    "start": "3481480",
    "end": "3487810"
  },
  {
    "text": "abstract away the pagination mechanism you know under the hood good question I",
    "start": "3487810",
    "end": "3492990"
  },
  {
    "text": "think we've time for one more sorry yeah",
    "start": "3492990",
    "end": "3500110"
  },
  {
    "text": "was there a question there okay",
    "start": "3500110",
    "end": "3503850"
  },
  {
    "text": "well so I guess the question is our mutations you know sort of like a dirty",
    "start": "3516690",
    "end": "3523090"
  },
  {
    "text": "concept in in graph QL I guess the",
    "start": "3523090",
    "end": "3528250"
  },
  {
    "text": "primary use case for was always about a query language is actually retrieving data and if you look at mutations they're effectively exactly like you",
    "start": "3528250",
    "end": "3534970"
  },
  {
    "text": "know an or PC state where take this particular set of data and apply it on the server you could argue it's a bit of",
    "start": "3534970",
    "end": "3543070"
  },
  {
    "text": "a bolt-on but i personally see nothing wrong with OPC i like rest",
    "start": "3543070",
    "end": "3548290"
  },
  {
    "text": "I like graph QL I think they're all perfectly good techniques for you know the use case ahead",
    "start": "3548290",
    "end": "3553420"
  },
  {
    "text": "the alternative thing would be that you try to model you know updates you know",
    "start": "3553420",
    "end": "3558790"
  },
  {
    "text": "in a different way what are the key things though that I really like about rest is when you have a workflow or a",
    "start": "3558790",
    "end": "3565240"
  },
  {
    "text": "lot of the business process so you can actually reify that as a resource so for instance you might create you know a",
    "start": "3565240",
    "end": "3570400"
  },
  {
    "text": "pricing request which might go through multiple phases so it might start with an open state and they go to approves",
    "start": "3570400",
    "end": "3575740"
  },
  {
    "text": "they go to closed and at each one of those transitions you could then apply certain business rules to say well what could you do next that's something that",
    "start": "3575740",
    "end": "3582400"
  },
  {
    "text": "you won't get from from graph you will I think that's all we have time for if",
    "start": "3582400",
    "end": "3587740"
  },
  {
    "text": "anybody else wants to come up have a chat afterwards that will be good cheers thank you [Applause]",
    "start": "3587740",
    "end": "3597210"
  }
]