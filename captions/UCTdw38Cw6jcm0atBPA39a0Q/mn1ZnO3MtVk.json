[
  {
    "text": "okay let's get started so welcome my name is Stephen Kelly I'm going to talk",
    "start": "820",
    "end": "6339"
  },
  {
    "text": "to you about embracing modern sea Mike it's always a nice thing to have so many people in one room who all have very",
    "start": "6339",
    "end": "12759"
  },
  {
    "text": "positive feelings about see Mike so who has positive feelings about see Mike put up your hand I'm actually surprised that",
    "start": "12759",
    "end": "20320"
  },
  {
    "text": "many yeah a lot of people don't like see make see Mike has been around for a long",
    "start": "20320",
    "end": "26350"
  },
  {
    "text": "time it has a lot of cruft and you do hit into it and you do see it in code",
    "start": "26350",
    "end": "31510"
  },
  {
    "text": "that other people have written so I want to tell you about modern sea make what that is where it came from and how you",
    "start": "31510",
    "end": "38380"
  },
  {
    "text": "can recognize the difference so a little bit about my background I've been",
    "start": "38380",
    "end": "44550"
  },
  {
    "text": "writing C++ code and open source for about 10 years starting out in KDE with",
    "start": "44550",
    "end": "50140"
  },
  {
    "text": "KML and Katie pimp getting into the libraries and then therefore getting",
    "start": "50140",
    "end": "55360"
  },
  {
    "text": "into cute and into see Mike so I vote the see make integration that shipped",
    "start": "55360",
    "end": "60550"
  },
  {
    "text": "with cute 5 and I thought well see make isn't good enough so I started working on see Mike then as well more recently",
    "start": "60550",
    "end": "68530"
  },
  {
    "text": "I've been working a bit on clang and clang tidy just to help you refactor",
    "start": "68530",
    "end": "73659"
  },
  {
    "text": "your code a little bit better more more mechanically so that's kind of how I got",
    "start": "73659",
    "end": "82180"
  },
  {
    "text": "from doing Katie work to doing see Mike work and creating modern see Mike so see",
    "start": "82180",
    "end": "91810"
  },
  {
    "text": "make is a build system generator that's you know it's not so much related to",
    "start": "91810",
    "end": "97330"
  },
  {
    "text": "make and that make invokes you compiler but see Mike generates other stuff which",
    "start": "97330",
    "end": "102670"
  },
  {
    "text": "then in turn invokes your compiler it stands for cross-platform make because",
    "start": "102670",
    "end": "108280"
  },
  {
    "text": "that was what was relevant back in 2000 when it was created different make systems existed but these days see make",
    "start": "108280",
    "end": "116979"
  },
  {
    "text": "also generates your build files for ninja and for Visual Studio and for Xcode and actually for some other",
    "start": "116979",
    "end": "123340"
  },
  {
    "text": "systems too it's part of a larger suite of productivity and test tools such as C",
    "start": "123340",
    "end": "129519"
  },
  {
    "text": "test and C pack I'm not going to be talking about those but they integrate very well with scene if you're using CMake already",
    "start": "129519",
    "end": "138750"
  },
  {
    "text": "here's just a plot of see my contributors over the last two years I just kind of like to show this kind of",
    "start": "139060",
    "end": "145840"
  },
  {
    "text": "thing to show where say makers coming from along the bottom you see Brad King",
    "start": "145840",
    "end": "150910"
  },
  {
    "text": "he's the maintainer of see Mike you have use everything does a great job and above that you see all these",
    "start": "150910",
    "end": "157810"
  },
  {
    "text": "contributions from all the other people but this is the last two years I'm",
    "start": "157810",
    "end": "164020"
  },
  {
    "text": "actually going to go back to about four years ago and this is me creating modern",
    "start": "164020",
    "end": "169060"
  },
  {
    "text": "C mix so I want to just show this because it shows you how old modern C",
    "start": "169060",
    "end": "174460"
  },
  {
    "text": "make actually is so it's so old that even you're going to 1604 system already",
    "start": "174460",
    "end": "181720"
  },
  {
    "text": "has a modern and off C make to do everything that I'm going to show in this presentation so just to sort of set",
    "start": "181720",
    "end": "192070"
  },
  {
    "text": "the set the scene a little bit when I'm talking about a build system I'm talking",
    "start": "192070",
    "end": "198160"
  },
  {
    "text": "about the stuff that you're a building from source and I have a dotted line around that and that can include various",
    "start": "198160",
    "end": "204040"
  },
  {
    "text": "libraries that you're building and executables and there could be dependencies between them the Nightside",
    "start": "204040",
    "end": "209950"
  },
  {
    "text": "of dotted box there's other stuff so your external dependencies it could be cute",
    "start": "209950",
    "end": "215080"
  },
  {
    "text": "boost you know google photo buff anything but what i'm going to mostly be",
    "start": "215080",
    "end": "221590"
  },
  {
    "text": "talking about is the stuff inside of this box so you're creating some libraries and some executables and those",
    "start": "221590",
    "end": "227380"
  },
  {
    "text": "things depend on each other where cemex",
    "start": "227380",
    "end": "233440"
  },
  {
    "text": "shines is in finding dependencies there's a lot of cross-platform reliable",
    "start": "233440",
    "end": "239590"
  },
  {
    "text": "ways to find external dependencies such as cute and boost it also excels in",
    "start": "239590",
    "end": "244870"
  },
  {
    "text": "portability in that you can use it with very various build system generators as",
    "start": "244870",
    "end": "251470"
  },
  {
    "text": "I already mentioned visual studio and make code generation you can define",
    "start": "251470",
    "end": "257769"
  },
  {
    "text": "custom commands and custom targets for example to generate your mock foe code",
    "start": "257769",
    "end": "262810"
  },
  {
    "text": "in a cute program there's also multi-language support this keeps growing",
    "start": "262810",
    "end": "268629"
  },
  {
    "text": "I think we've got C sharp and Swift support in C make now as well so if you",
    "start": "268629",
    "end": "273819"
  },
  {
    "text": "have a multilingual build system see Mike cannot handle a tune so modern C",
    "start": "273819",
    "end": "282729"
  },
  {
    "text": "make is it's kind of a mindset it's a little bit philosophical in that sense",
    "start": "282729",
    "end": "289889"
  },
  {
    "text": "and what it aims to do is get you writing less code or less see my code",
    "start": "289889",
    "end": "296229"
  },
  {
    "text": "have that code be more clean and dry don't repeat yourself and have you seen",
    "start": "296229",
    "end": "301690"
  },
  {
    "text": "my code be more target focused and not you know this sort of if you get this",
    "start": "301690",
    "end": "309069"
  },
  {
    "text": "right the other stuff just follows from that if you get your code target focused",
    "start": "309069",
    "end": "314430"
  },
  {
    "text": "it'll automatically be more clean and you'll have less of it so I mentioned",
    "start": "314430",
    "end": "321039"
  },
  {
    "text": "this already but the good news is that everything I'm showing you you can already use so I think everything in",
    "start": "321039",
    "end": "327370"
  },
  {
    "text": "this presentation is present in C make 3.1 in Eastern December 2014 and present",
    "start": "327370",
    "end": "334960"
  },
  {
    "text": "on traverse for a long time Debbie and Jesse and at least you've been to 1604",
    "start": "334960",
    "end": "345180"
  },
  {
    "text": "I'm going to show you some other stuff that was introduced in to 811 already so even if you're still depending on 1204",
    "start": "345180",
    "end": "352690"
  },
  {
    "text": "there's some things in this presentation that you'll still be able to use so",
    "start": "352690",
    "end": "361620"
  },
  {
    "text": "hello world well maybe a few steps above hello world see Mike build system might",
    "start": "361620",
    "end": "368020"
  },
  {
    "text": "look like this what we have is were defining the minimum version that we depend on a project name define a",
    "start": "368020",
    "end": "377650"
  },
  {
    "text": "library called Lib salutation which consists of salutation dot CPP we then",
    "start": "377650",
    "end": "385659"
  },
  {
    "text": "also have an executable called hello which is built from hello dot CPP and we",
    "start": "385659",
    "end": "391690"
  },
  {
    "text": "say that hello links to live salutation so you can just kind of imagine that hello dot CPP is somehow going to use",
    "start": "391690",
    "end": "398589"
  },
  {
    "text": "the functionality from web salutation and just to add a little bit more",
    "start": "398589",
    "end": "403860"
  },
  {
    "text": "interesting this and complexity goodbye dot CPP is built into goodbye",
    "start": "403860",
    "end": "409780"
  },
  {
    "text": "executable and that also depends on their salutation so this isn't too",
    "start": "409780",
    "end": "414850"
  },
  {
    "text": "complicated we're just defining three different targets and two of them depend on the library and this is not about",
    "start": "414850",
    "end": "422620"
  },
  {
    "text": "start but let's look closer at this line",
    "start": "422620",
    "end": "428470"
  },
  {
    "text": "number one because it's often overlooked and people don't really know what it",
    "start": "428470",
    "end": "433600"
  },
  {
    "text": "means I think so let's talk about policies when we have a Simo see make",
    "start": "433600",
    "end": "440860"
  },
  {
    "text": "minimum required line it specifies a version and that has a couple of",
    "start": "440860",
    "end": "447390"
  },
  {
    "text": "meanings that'll cause you see make executable to fail at one time if your",
    "start": "447390",
    "end": "454510"
  },
  {
    "text": "version is lower than version 2.8 it'll also populate a variable so you can test",
    "start": "454510",
    "end": "461200"
  },
  {
    "text": "in your seam a code what the minimum required version is you might want to do",
    "start": "461200",
    "end": "466630"
  },
  {
    "text": "that if you're going to guard the use of newer features if they're available for example it also resets runtime behavior",
    "start": "466630",
    "end": "475570"
  },
  {
    "text": "see make with policies and this is what I want to talk about essentially what",
    "start": "475570",
    "end": "482710"
  },
  {
    "text": "our policies so policies are a system built in to see make for deprecating old",
    "start": "482710",
    "end": "492400"
  },
  {
    "text": "behavior often if we hit a bug in c make will create a policy so that we maintain",
    "start": "492400",
    "end": "499750"
  },
  {
    "text": "the boogie behavior but we also have new behavior which is more sane and will",
    "start": "499750",
    "end": "506260"
  },
  {
    "text": "give you a warning if you're accidentally depending on the old behavior that might mean something like",
    "start": "506260",
    "end": "512860"
  },
  {
    "text": "the link order is incorrect on your command line that we generate and so we'd have a policy for you know",
    "start": "512860",
    "end": "519700"
  },
  {
    "text": "generating the correct link order small policies are in the warned state by",
    "start": "519700",
    "end": "525670"
  },
  {
    "text": "default and you can set them individually every time that you have AC",
    "start": "525670",
    "end": "531760"
  },
  {
    "text": "make minimum required line that is associate with a newest policy so if I say that my",
    "start": "531760",
    "end": "538840"
  },
  {
    "text": "see make minimum is 3.3 policy 57 and below will all be set to new behavior",
    "start": "538840",
    "end": "545380"
  },
  {
    "text": "instead of the old behavior and similar if I say the minimum required is 3.2 but",
    "start": "545380",
    "end": "551830"
  },
  {
    "text": "let's see 55 and below will be set to new behavior and all the others will be",
    "start": "551830",
    "end": "558180"
  },
  {
    "text": "old behavior and everything newer will be worn so here's how you would set a",
    "start": "558180",
    "end": "568630"
  },
  {
    "text": "policy individually you use the C make policy command and you set it to new if",
    "start": "568630",
    "end": "575800"
  },
  {
    "text": "it's if it's available so you can test whether a policy is available policy 53",
    "start": "575800",
    "end": "582220"
  },
  {
    "text": "is a policy which changed how C make parses your C make file that changed how",
    "start": "582220",
    "end": "589590"
  },
  {
    "text": "variables are processed it actually created a large speed improvement in her",
    "start": "589590",
    "end": "595600"
  },
  {
    "text": "variables are processed but because it had a slight behavior change we ought to create a policy for it and it was",
    "start": "595600",
    "end": "602410"
  },
  {
    "text": "introduced after a 3.0 so if my minimum was cuidado it's worn by default so I",
    "start": "602410",
    "end": "607660"
  },
  {
    "text": "said it explicitly to new it is possible to set a policy to old you almost never",
    "start": "607660",
    "end": "614500"
  },
  {
    "text": "want to do that if you're setting a policy to old that is a good indication that you are not using modern C make so",
    "start": "614500",
    "end": "624070"
  },
  {
    "text": "when you would set a policy to old here's a few conditions that you'd want to satisfy before doing that you might",
    "start": "624070",
    "end": "632710"
  },
  {
    "text": "want to do it if you're close to your own release but a new C Mac version has just been released and that's warning on",
    "start": "632710",
    "end": "638650"
  },
  {
    "text": "your code and you don't want to have those warnings when your clients are building your code so you would set the",
    "start": "638650",
    "end": "644470"
  },
  {
    "text": "policy to old in that case but even if you do you do want to have a plan to",
    "start": "644470",
    "end": "649630"
  },
  {
    "text": "migrate the new behavior of the policy and one of the reasons for that kind of",
    "start": "649630",
    "end": "657040"
  },
  {
    "text": "you know it reaches C++ developers sometimes if you can put things in terms",
    "start": "657040",
    "end": "662290"
  },
  {
    "text": "of performance any policy which exists",
    "start": "662290",
    "end": "667780"
  },
  {
    "text": "will a cost of implementing the old behavior and there will be a cost of implementing",
    "start": "667780",
    "end": "673700"
  },
  {
    "text": "the new behavior so say in the case of policy 53 the old slow way of parsing",
    "start": "673700",
    "end": "678950"
  },
  {
    "text": "variables and the new faster way but by default if that thing is worn setting",
    "start": "678950",
    "end": "685570"
  },
  {
    "text": "it'll actually do both and it'll compare the output so being extra overhead in",
    "start": "685570",
    "end": "692839"
  },
  {
    "text": "order to give you the warning so you want to always make sure that you set policies to new if if your build system",
    "start": "692839",
    "end": "701089"
  },
  {
    "text": "can handle it but just in terms of how",
    "start": "701089",
    "end": "709339"
  },
  {
    "text": "that code would look you would just use C make policy to set the policy to old",
    "start": "709339",
    "end": "715370"
  },
  {
    "text": "and you would you would do that even though the version is much newer so you use a new version to get new features",
    "start": "715370",
    "end": "722209"
  },
  {
    "text": "but then you set the policy to old to get old behavior in that specific case",
    "start": "722209",
    "end": "729459"
  },
  {
    "text": "but usually what you would do is you would have a list of policies that you",
    "start": "731500",
    "end": "736820"
  },
  {
    "text": "get warnings about but which actually you want the new behavior for and you set up a loop and you'd say if the",
    "start": "736820",
    "end": "743180"
  },
  {
    "text": "policy exists set it to new and you",
    "start": "743180",
    "end": "749330"
  },
  {
    "text": "would be able to remove this code once that your version is so high that those policies have already said to you so",
    "start": "749330",
    "end": "757490"
  },
  {
    "text": "you'll see this in a lot of modern cinema code there are some policies",
    "start": "757490",
    "end": "762860"
  },
  {
    "text": "which don't warn you by default here's the list of them they don't warn by",
    "start": "762860",
    "end": "768020"
  },
  {
    "text": "default because there would be too many warnings but you can just know that they",
    "start": "768020",
    "end": "773270"
  },
  {
    "text": "exist and if you get strange behavior you can try to enable them and see if that helps so what I'm trying to do in",
    "start": "773270",
    "end": "782209"
  },
  {
    "text": "this talk is just give you a list of guidelines that you can take back to your office on Monday and use them to",
    "start": "782209",
    "end": "790279"
  },
  {
    "text": "implement modern CMAC so the first one is use of today's policy settings in",
    "start": "790279",
    "end": "795860"
  },
  {
    "text": "your code I see a lot of code online on github etc",
    "start": "795860",
    "end": "801190"
  },
  {
    "text": "where they say see make minimum version 2.8 and that means 2.0 which was",
    "start": "801190",
    "end": "809079"
  },
  {
    "text": "released about ten years ago and every policy since then is said to warn so you",
    "start": "809079",
    "end": "815350"
  },
  {
    "text": "don't want to be doing that make sure you use a more recent version of C Mike",
    "start": "815350",
    "end": "820949"
  },
  {
    "text": "alright so the first thing that I want to talk to you about regarding modern",
    "start": "821040",
    "end": "828759"
  },
  {
    "text": "Semak is usage requirements that's the idea that a target that you create such",
    "start": "828759",
    "end": "836949"
  },
  {
    "text": "as a library knows what include directories you have to use in order to use that library so for example if",
    "start": "836949",
    "end": "845439"
  },
  {
    "text": "you're using cute the cute libraries know that you need to add - i blah blah",
    "start": "845439",
    "end": "850629"
  },
  {
    "text": "blah cute core to your command line in order to be able to process and include cue string so the cute core library",
    "start": "850629",
    "end": "858579"
  },
  {
    "text": "knows that and it needs to communicate that to all users of cute core so that",
    "start": "858579",
    "end": "865000"
  },
  {
    "text": "concept is what we call a usage requirement so we've seen this slide",
    "start": "865000",
    "end": "872079"
  },
  {
    "text": "already it's exactly the same as before I'm defining a library and two executables and what we might want to do",
    "start": "872079",
    "end": "878290"
  },
  {
    "text": "instead is put those things into into directories so I've put the libraries",
    "start": "878290",
    "end": "883930"
  },
  {
    "text": "into the libraries directory and the executables into the executable directory another question is how can we",
    "start": "883930",
    "end": "891790"
  },
  {
    "text": "make it still work so obviously if hello",
    "start": "891790",
    "end": "896980"
  },
  {
    "text": "dot cpp penn includes salutation dot h that will work because those two are in",
    "start": "896980",
    "end": "902050"
  },
  {
    "text": "the same directory here once i've moved them to new directories there's going to have to be a - i added to the compiled",
    "start": "902050",
    "end": "909069"
  },
  {
    "text": "line so how do we express that well the old way is to use the include",
    "start": "909069",
    "end": "915790"
  },
  {
    "text": "directories command with some variable that gets defined somewhere here it's",
    "start": "915790",
    "end": "921970"
  },
  {
    "text": "called salutation includes this is the old way because it's using the include",
    "start": "921970",
    "end": "928029"
  },
  {
    "text": "directories command and because it's using a variable I'm going to talk more in more depth about both of",
    "start": "928029",
    "end": "934990"
  },
  {
    "text": "those issues but a third downside of",
    "start": "934990",
    "end": "941589"
  },
  {
    "text": "this is that it's it's very wordy we",
    "start": "941589",
    "end": "946600"
  },
  {
    "text": "should have a way of lighting our see my code such that we just don't need that line at all so another way that we could",
    "start": "946600",
    "end": "956080"
  },
  {
    "text": "write this is we could use the target include directories command instead of the include directories command that's a",
    "start": "956080",
    "end": "962500"
  },
  {
    "text": "little bit better because it means that the include directories are only added",
    "start": "962500",
    "end": "967899"
  },
  {
    "text": "to the target hello and in this case they're only added to the target goodbye so you can imagine how long give I could",
    "start": "967899",
    "end": "975100"
  },
  {
    "text": "have different dependencies and they could have different needs of - I and - D stuff added to their command command",
    "start": "975100",
    "end": "983020"
  },
  {
    "text": "lines for compilation so this is a bit more specific to what the need actually",
    "start": "983020",
    "end": "990550"
  },
  {
    "text": "applies to you but it's still wordy like we don't actually want to specify these things at all what we want is just to",
    "start": "990550",
    "end": "999270"
  },
  {
    "text": "specify dependency with target linked libraries and have all of that",
    "start": "999270",
    "end": "1004579"
  },
  {
    "text": "compilation requirement magically determined and that's what modern C make is really I can go one step further from",
    "start": "1004579",
    "end": "1013260"
  },
  {
    "text": "this and I can put two colons in there in the name of the library and this is",
    "start": "1013260",
    "end": "1020010"
  },
  {
    "text": "maximal maximally modern C Mike at this point the double colons indicate C make",
    "start": "1020010",
    "end": "1026520"
  },
  {
    "text": "that this is a target name I'll go into a little bit more depth about that later - so when you're writing modern C make",
    "start": "1026520",
    "end": "1034500"
  },
  {
    "text": "it'll look mostly like this in your in wherever you define your executables in",
    "start": "1034500",
    "end": "1040350"
  },
  {
    "text": "your libraries you have at executable or add add library you'll specify some",
    "start": "1040350",
    "end": "1046530"
  },
  {
    "text": "sources and then you'll use target link libraries to specify what the dependencies are and all of the",
    "start": "1046530",
    "end": "1052800"
  },
  {
    "text": "dependencies will have some double colons in them",
    "start": "1052800",
    "end": "1057740"
  },
  {
    "text": "so what we moved away from is the include directories command which is not",
    "start": "1062430",
    "end": "1070840"
  },
  {
    "text": "target specific we want to move to a target based build system definition where most of what we're doing is just",
    "start": "1070840",
    "end": "1077410"
  },
  {
    "text": "expressing dependencies between different targets we want to have a single point of dependency specification",
    "start": "1077410",
    "end": "1084580"
  },
  {
    "text": "so remember that when I defined my executables I didn't have to explicitly",
    "start": "1084580",
    "end": "1092190"
  },
  {
    "text": "mention the dependency on the salutation includes and then also the salutation",
    "start": "1092190",
    "end": "1098650"
  },
  {
    "text": "library as a link dependency I only have to specify one thing which was the link dependency everything else followed and",
    "start": "1098650",
    "end": "1107710"
  },
  {
    "text": "that's because the targets themselves provide that information to their dependents all of the requirements he",
    "start": "1107710",
    "end": "1113530"
  },
  {
    "text": "needed to compile and Link are built into the targets themselves so how do we",
    "start": "1113530",
    "end": "1124360"
  },
  {
    "text": "actually write live salutations such that that works for those executables and the way to do that is use the target",
    "start": "1124360",
    "end": "1131920"
  },
  {
    "text": "include directories command and say that there's a public requirement to use this",
    "start": "1131920",
    "end": "1137830"
  },
  {
    "text": "include directory so in this case you can imagine that salutation dot H lives",
    "start": "1137830",
    "end": "1143770"
  },
  {
    "text": "in the include subdirectory and that's",
    "start": "1143770",
    "end": "1149110"
  },
  {
    "text": "the directory that the all depend oh is need to use so target include",
    "start": "1149110",
    "end": "1156940"
  },
  {
    "text": "directories anytime that you're using a command which starts with target there's",
    "start": "1156940",
    "end": "1162490"
  },
  {
    "text": "a good chance that you're doing the right thing and using modern seeming there's a question but so the the remark",
    "start": "1162490",
    "end": "1181570"
  },
  {
    "text": "is that I don't actually need to write this ad because dot slash include would",
    "start": "1181570",
    "end": "1186610"
  },
  {
    "text": "be resolved to to the current source directory anyway I",
    "start": "1186610",
    "end": "1192710"
  },
  {
    "text": "think that's true I'm usually explicit about it but that's also okay yeah",
    "start": "1192710",
    "end": "1199990"
  },
  {
    "text": "another question okay so the the dog",
    "start": "1199990",
    "end": "1207770"
  },
  {
    "text": "version maybe before maybe preferred because it's less wordy it's good point",
    "start": "1207770",
    "end": "1214000"
  },
  {
    "text": "so there was a keyword there in my use of target include directories where I used public I could also have used",
    "start": "1214000",
    "end": "1221720"
  },
  {
    "text": "private and and interface I have to use one of those and they each have a",
    "start": "1221720",
    "end": "1228260"
  },
  {
    "text": "different meaning and you might wonder what that meaning is so to illustrate",
    "start": "1228260",
    "end": "1234620"
  },
  {
    "text": "that I have a my class here in my C++ code and it inherits few dependency and",
    "start": "1234620",
    "end": "1241610"
  },
  {
    "text": "it append includes food dependency now assuming my classes in my class start H",
    "start": "1241610",
    "end": "1247360"
  },
  {
    "text": "anyone and including my class start H will also have to be able to find food a",
    "start": "1247360",
    "end": "1253970"
  },
  {
    "text": "pendency the file however my class uses",
    "start": "1253970",
    "end": "1260059"
  },
  {
    "text": "bio dependency internally in the C++ file and the C++ file also includes bar",
    "start": "1260059",
    "end": "1265700"
  },
  {
    "text": "dependency HSE any dependency which uses",
    "start": "1265700",
    "end": "1272539"
  },
  {
    "text": "my class H doesn't need to be able to find bar dependency H so that's why bar",
    "start": "1272539",
    "end": "1278059"
  },
  {
    "text": "is a private dependency of my class and fuel is a public dependency and just to",
    "start": "1278059",
    "end": "1285260"
  },
  {
    "text": "illustrate that with a diagram you can see that the executable will need to be able to find food RH but it will not be",
    "start": "1285260",
    "end": "1292669"
  },
  {
    "text": "a it will not be required to find bar dot H so that's really the difference between public and private I also",
    "start": "1292669",
    "end": "1299960"
  },
  {
    "text": "mentioned interface and that is relevant mostly just for ahead of only libraries because it means that a certain",
    "start": "1299960",
    "end": "1308690"
  },
  {
    "text": "directory is needed for clients but not for compiling myself so interface might",
    "start": "1308690",
    "end": "1316130"
  },
  {
    "text": "be a little bit more advanced so just a summary table there as well to",
    "start": "1316130",
    "end": "1323190"
  },
  {
    "text": "hammer that point home a little bit it's something that trips people up a lot what does public and five it mean it's",
    "start": "1323190",
    "end": "1329370"
  },
  {
    "text": "my most up voted answer on Stack Overflow so I kind of think it it must",
    "start": "1329370",
    "end": "1335790"
  },
  {
    "text": "be relevant somehow to people so we have",
    "start": "1335790",
    "end": "1343470"
  },
  {
    "text": "a view of modern semuc where you use target include directories the I also",
    "start": "1343470",
    "end": "1356190"
  },
  {
    "text": "mentioned these keywords but the thing is that you can use these keywords on the content multiple times in one target",
    "start": "1356190",
    "end": "1362820"
  },
  {
    "text": "target include directories call so you can make it a little bit less wordy",
    "start": "1362820",
    "end": "1368960"
  },
  {
    "text": "so just to explore the include directories command a bit more now what's so bad about it so for one thing",
    "start": "1369980",
    "end": "1379860"
  },
  {
    "text": "we know that it affects multiple libraries at the same time whether or not that's actually desired another",
    "start": "1379860",
    "end": "1385830"
  },
  {
    "text": "thing is that order may or may not matter so in this case when reading this",
    "start": "1385830",
    "end": "1391230"
  },
  {
    "text": "code you might think well include directories comes first so that's going to affect live a and Libby but what if",
    "start": "1391230",
    "end": "1398100"
  },
  {
    "text": "it comes in the middle is it going to affect Libby but not live a and he votes",
    "start": "1398100",
    "end": "1403350"
  },
  {
    "text": "show events he thinks it's going to affect live a two people three people it",
    "start": "1403350",
    "end": "1410430"
  },
  {
    "text": "will affect Libby and that's because see make way back was kind of aiming to be a",
    "start": "1410430",
    "end": "1415740"
  },
  {
    "text": "bit more declarative and all of the direct all of the commands that were",
    "start": "1415740",
    "end": "1421620"
  },
  {
    "text": "created back then affected everything in the directory so in this case sundar",
    "start": "1421620",
    "end": "1427770"
  },
  {
    "text": "will be a available to live a or rather this command on line three will affect",
    "start": "1427770",
    "end": "1433470"
  },
  {
    "text": "the command on line one that's also true of course if you put it at the end so it might make your you",
    "start": "1433470",
    "end": "1442170"
  },
  {
    "text": "might wonder where certain include directories are coming a despite order that you see in your cement code but",
    "start": "1442170",
    "end": "1448230"
  },
  {
    "text": "that's just how it works it can get more confusing and complicated though because now I've I'm",
    "start": "1448230",
    "end": "1454770"
  },
  {
    "text": "still defining live a but now I'm also adding subdirectory dr1 then I call",
    "start": "1454770",
    "end": "1461040"
  },
  {
    "text": "include directories and then I have another library in another subdirectory in this case live a is still affected",
    "start": "1461040",
    "end": "1468750"
  },
  {
    "text": "anything inside of dear one is not affected and anything inside of dear two is affected so again it's a bit wild but",
    "start": "1468750",
    "end": "1478549"
  },
  {
    "text": "you might see even older see my code which uses the subdues command and if",
    "start": "1478549",
    "end": "1484770"
  },
  {
    "text": "you see that the content of that is affected by this include directories command so I just want to illustrate to",
    "start": "1484770",
    "end": "1493919"
  },
  {
    "text": "you that if you're using commands like this that are very old you're going to get the archaic behavior of Semak which",
    "start": "1493919",
    "end": "1502020"
  },
  {
    "text": "is not very obvious all of the time",
    "start": "1502020",
    "end": "1507169"
  },
  {
    "text": "another issue with the include directories command is that it's not transitive",
    "start": "1509750",
    "end": "1515150"
  },
  {
    "text": "we saw some transitivity earlier that was where an executable depends on a lively you know which has public and",
    "start": "1515150",
    "end": "1522570"
  },
  {
    "text": "private dependencies so the includes are sort of propagated up through the public",
    "start": "1522570",
    "end": "1529530"
  },
  {
    "text": "edges code which does not use the target include directories command but uses the",
    "start": "1529530",
    "end": "1536130"
  },
  {
    "text": "include directories commands instead tends to have these kind of variables that are defines so we're saying that",
    "start": "1536130",
    "end": "1543570"
  },
  {
    "text": "the app includes are a combination of the live one Lib 2 and 3 includes and",
    "start": "1543570",
    "end": "1549200"
  },
  {
    "text": "then somewhere down here we you know we invoke include directories with that so",
    "start": "1549200",
    "end": "1556860"
  },
  {
    "text": "part of the problem with that is there could be a great distance between line 8 and line 1 they could be in different sub",
    "start": "1556860",
    "end": "1562380"
  },
  {
    "text": "directories entirely different parts of your build system another problem is this list then has to be maintained it",
    "start": "1562380",
    "end": "1570240"
  },
  {
    "text": "might be maintained badly there might be typos libraries might be removed or added and you could have all kinds of",
    "start": "1570240",
    "end": "1578190"
  },
  {
    "text": "problems in your build system and again it's also very wordy so",
    "start": "1578190",
    "end": "1583260"
  },
  {
    "text": "this case we would be creating a variable for includes and for libraries and affecting all of the sub directories",
    "start": "1583260",
    "end": "1592650"
  },
  {
    "text": "in the app itself so that that gets",
    "start": "1592650",
    "end": "1597780"
  },
  {
    "text": "unwieldy and that's that was the first motivation for creating modern C make",
    "start": "1597780",
    "end": "1602940"
  },
  {
    "text": "way back in 2011 so that was the include",
    "start": "1602940",
    "end": "1610320"
  },
  {
    "text": "directories command we were talking about there's another command called add definitions which has all of the same",
    "start": "1610320",
    "end": "1615420"
  },
  {
    "text": "drawbacks it works in almost the exact same way here's a call to it here where",
    "start": "1615420",
    "end": "1622050"
  },
  {
    "text": "we're defining use internal Cindy and use multi-threading which you might have in your build system but an alternative",
    "start": "1622050",
    "end": "1629160"
  },
  {
    "text": "to that which we have now in modern Semak is target compile definitions and",
    "start": "1629160",
    "end": "1635550"
  },
  {
    "text": "that works the exact same way as target include directories they have the same design they have the same keywords",
    "start": "1635550",
    "end": "1643380"
  },
  {
    "text": "public and private and interface and they work the same way so if you're",
    "start": "1643380",
    "end": "1648900"
  },
  {
    "text": "looking at code like this which is using target commands you're looking at modern seeming so there are other commands as",
    "start": "1648900",
    "end": "1660330"
  },
  {
    "text": "well which use target prefixes in their name these two we've looked at already",
    "start": "1660330",
    "end": "1668490"
  },
  {
    "text": "then there's target compile options for adding FP I see your warning flags on either a compile command line option",
    "start": "1668490",
    "end": "1676730"
  },
  {
    "text": "target link libraries target link options and target sources so you can define a target and then later you can",
    "start": "1676730",
    "end": "1683400"
  },
  {
    "text": "add sources to it the only odd one out in this list is target link options",
    "start": "1683400",
    "end": "1688520"
  },
  {
    "text": "because that was created in the last year all of the other ones have been around for years so you can already use",
    "start": "1688520",
    "end": "1694950"
  },
  {
    "text": "them even though this was only created in the last year it doesn't well there's",
    "start": "1694950",
    "end": "1702300"
  },
  {
    "text": "a good workaround if you want to use it but can't because all you have to do is pass the same arguments to target link",
    "start": "1702300",
    "end": "1707940"
  },
  {
    "text": "lodges target link libraries is a command which does a lot of things maybe",
    "start": "1707940",
    "end": "1714720"
  },
  {
    "text": "too many things which is why targeting cops was created but it is a workaround for",
    "start": "1714720",
    "end": "1721409"
  },
  {
    "text": "the lack of that command if you're using an even older C Mike yeah well if you",
    "start": "1721409",
    "end": "1738839"
  },
  {
    "text": "tell anyone I told you this I will deny all knowledge but you can't actually",
    "start": "1738839",
    "end": "1744269"
  },
  {
    "text": "redefine commands that are built-in to see Mike you can override them see if it were override it with like a fatal error",
    "start": "1744269",
    "end": "1750899"
  },
  {
    "text": "or something if you wanted but again I didn't say that yeah you shouldn't do",
    "start": "1750899",
    "end": "1757769"
  },
  {
    "text": "that really there's a lot of reasons that you shouldn't but that's just the answer to your question so just building",
    "start": "1757769",
    "end": "1767039"
  },
  {
    "text": "up this list of guidelines that I'm trying to give you there's going to be about four at the end so we've got the second one now my target centric code",
    "start": "1767039",
    "end": "1773879"
  },
  {
    "text": "and mostly that just means he's commands which have a target prefix oh another",
    "start": "1773879",
    "end": "1782039"
  },
  {
    "text": "thing which might excite you is there's a new command just went in to see Mike",
    "start": "1782039",
    "end": "1787169"
  },
  {
    "text": "last week called target precompiled headers so I believe it was someone from",
    "start": "1787169",
    "end": "1792869"
  },
  {
    "text": "the cute company that did that implemented that for the for the",
    "start": "1792869",
    "end": "1798629"
  },
  {
    "text": "purposes of cute itself because they want to be able to define precompiled",
    "start": "1798629",
    "end": "1804359"
  },
  {
    "text": "headers in their build system easily so that was yeah that's that was committed",
    "start": "1804359",
    "end": "1810209"
  },
  {
    "text": "just last week so that's the very latest and of course it works the same way it still has public private and interface",
    "start": "1810209",
    "end": "1816329"
  },
  {
    "text": "keywords the design is being you know used consistently from the past to the",
    "start": "1816329",
    "end": "1823499"
  },
  {
    "text": "future so when I talked about the lack",
    "start": "1823499",
    "end": "1831329"
  },
  {
    "text": "of transitivity I talked about the resulting need for creating variables",
    "start": "1831329",
    "end": "1836879"
  },
  {
    "text": "which people do in non-modern C make that has a few downsides you don't",
    "start": "1836879",
    "end": "1842129"
  },
  {
    "text": "actually want to rely on variables for things so here I have a new build system again I'm defining main sources which",
    "start": "1842129",
    "end": "1848819"
  },
  {
    "text": "contains just main dot CPP and then I passed that into our executable to create up I have an app",
    "start": "1848819",
    "end": "1855580"
  },
  {
    "text": "includes variable app defines our libraries and they are not defined in",
    "start": "1855580",
    "end": "1861220"
  },
  {
    "text": "the same file as this so they're defined elsewhere so the problem is maybe",
    "start": "1861220",
    "end": "1867660"
  },
  {
    "text": "because of different ordering of sub directories or something or somebody commented something out see make might",
    "start": "1867660",
    "end": "1873610"
  },
  {
    "text": "see this you know they might see make might see no content at all the variable",
    "start": "1873610",
    "end": "1879280"
  },
  {
    "text": "might be treated as not to find or empty and that's not an error from C make point of view you know seam variables",
    "start": "1879280",
    "end": "1886809"
  },
  {
    "text": "can be empty and that's not a problem but it is a problem for you because maybe it wasn't intended so what you",
    "start": "1886809",
    "end": "1897790"
  },
  {
    "text": "should do is try to avoid the use of variables don't create some kind of sources variable and populated you know",
    "start": "1897790",
    "end": "1904990"
  },
  {
    "text": "with different conditions and whatnot and then at the end call our executable just try to list all of the sources you",
    "start": "1904990",
    "end": "1911470"
  },
  {
    "text": "can in our executable directly and then anything else that you might",
    "start": "1911470",
    "end": "1917080"
  },
  {
    "text": "conditionally you want to add such as windows specific sources you can add them in conditions after I'll be showing",
    "start": "1917080",
    "end": "1923350"
  },
  {
    "text": "some slides about that in a moment here as well and listing the libraries explicitly instead of using a variable",
    "start": "1923350",
    "end": "1929800"
  },
  {
    "text": "there's there's two points about this is",
    "start": "1929800",
    "end": "1938679"
  },
  {
    "text": "it possible to use a policy to enforce that a variable exists no because it is",
    "start": "1938679",
    "end": "1944590"
  },
  {
    "text": "it is a normal state it makes trouble it's also relied upon it's like you know",
    "start": "1944590",
    "end": "1954150"
  },
  {
    "text": "it's like trying to say that C++ shouldn't be dependent on you know based",
    "start": "1954150",
    "end": "1961120"
  },
  {
    "text": "on C anymore you know there's some trouble that arises from not but it's really not worth it to fix it it's",
    "start": "1961120",
    "end": "1971440"
  },
  {
    "text": "difficult to find those errors I think maybe the solution is migrate C make",
    "start": "1971440",
    "end": "1978040"
  },
  {
    "text": "away from the C make language you know it's a bigger task but",
    "start": "1978040",
    "end": "1983210"
  },
  {
    "text": "you know in practice there's no way to do what you're asking I'm afraid mr.",
    "start": "1983210",
    "end": "1994519"
  },
  {
    "text": "comment over there as well no okay so",
    "start": "1994519",
    "end": "2000609"
  },
  {
    "text": "yeah there are issues with variables so you should try to reduce the use of",
    "start": "2000609",
    "end": "2007200"
  },
  {
    "text": "useless variables and just listings exactly where they should be",
    "start": "2007200",
    "end": "2012269"
  },
  {
    "text": "that's because variables are fragile they leak to other contexts so they leak into all of your sub directories code",
    "start": "2012269",
    "end": "2019299"
  },
  {
    "text": "which you may or may not want they don't have the same scope as your targets so",
    "start": "2019299",
    "end": "2025749"
  },
  {
    "text": "again they're they're not expressed in the scope of dependencies under not",
    "start": "2025749",
    "end": "2031899"
  },
  {
    "text": "checked for correctness or content so I think that's what your remark was about that these issues should mean that the",
    "start": "2031899",
    "end": "2039820"
  },
  {
    "text": "behavior variables should be changed but there is too much see my code relying on",
    "start": "2039820",
    "end": "2044889"
  },
  {
    "text": "the existing behavior so that's our",
    "start": "2044889",
    "end": "2050378"
  },
  {
    "text": "third guideline avoid unnecessary variables now on to generative",
    "start": "2050379",
    "end": "2058358"
  },
  {
    "text": "expressions this is a topic which you might not you might not encounter it in",
    "start": "2058359",
    "end": "2065710"
  },
  {
    "text": "your first month using modern C make but you will most likely encounter it after",
    "start": "2065710",
    "end": "2070898"
  },
  {
    "text": "that so I mentioned before that we want to avoid using variables so this is what",
    "start": "2070899",
    "end": "2079658"
  },
  {
    "text": "non modern see make might look like you might have a variable called main sources and you have a condition and you",
    "start": "2079659",
    "end": "2085658"
  },
  {
    "text": "append to that list and at the very end you create your executable the way to",
    "start": "2085659",
    "end": "2091919"
  },
  {
    "text": "not use variables in that case is to put",
    "start": "2091919",
    "end": "2097059"
  },
  {
    "text": "everything after the other executable line instead of before and use the target sources command so now I'm not",
    "start": "2097059",
    "end": "2103270"
  },
  {
    "text": "using any variables so that's already one step in the right direction another",
    "start": "2103270",
    "end": "2110200"
  },
  {
    "text": "step in the right direction is I could actually just list those things in the other executable call by using this",
    "start": "2110200",
    "end": "2115539"
  },
  {
    "text": "funny syntax so this is a generative expression just to break down a little bit I'm checking",
    "start": "2115539",
    "end": "2122440"
  },
  {
    "text": "the win32 variable I'm converting that to a bull so that it's you know 0 1 and",
    "start": "2122440",
    "end": "2129810"
  },
  {
    "text": "if it's true that if win32 is true then we use helper window CPP if not when 32",
    "start": "2129810",
    "end": "2137290"
  },
  {
    "text": "is true then we use helper POSIX CPP now",
    "start": "2137290",
    "end": "2148470"
  },
  {
    "text": "this sort of stuff you might not want in the main bulk of your build system you",
    "start": "2148470",
    "end": "2154690"
  },
  {
    "text": "don't want to be writing it throughout all of your build system code but what you can do is to find some helper target",
    "start": "2154690",
    "end": "2162430"
  },
  {
    "text": "for yourself which abstracts that away a little bit and then the you know most of",
    "start": "2162430",
    "end": "2169000"
  },
  {
    "text": "your code will still just be at executable and target linked libraries and that's always you go with modern C",
    "start": "2169000",
    "end": "2175210"
  },
  {
    "text": "make you really only want most of your C my code to be using three commands are",
    "start": "2175210",
    "end": "2181720"
  },
  {
    "text": "there are executable or add library and target linked libraries mostly that's what you want yeah sorry helper is : :",
    "start": "2181720",
    "end": "2196540"
  },
  {
    "text": "platform is a target name that's one single name yeah I'll talk more about",
    "start": "2196540",
    "end": "2203589"
  },
  {
    "text": "this double : in a minute but it just indicates the C make that this is a target name it comes down to the target",
    "start": "2203589",
    "end": "2211420"
  },
  {
    "text": "link libraries command and how it works in terms of legacy behavior yeah what",
    "start": "2211420",
    "end": "2219910"
  },
  {
    "text": "you what to take out of this slide is that you can create abstraction targets and then simplify most of your C mate",
    "start": "2219910",
    "end": "2228339"
  },
  {
    "text": "code just by relying in the target link libraries command yeah another comment",
    "start": "2228339",
    "end": "2235560"
  },
  {
    "text": "actually the CPP fights so when I compile it's not correct so yeah so the",
    "start": "2238570",
    "end": "2250510"
  },
  {
    "text": "remark is this is a library of sources so this isn't a compiled library because",
    "start": "2250510",
    "end": "2256390"
  },
  {
    "text": "I'm using the target sources command with interface it means we're not going",
    "start": "2256390",
    "end": "2261400"
  },
  {
    "text": "to build anything ourselves but anything that depends on this will use these",
    "start": "2261400",
    "end": "2267100"
  },
  {
    "text": "sources so typically something like this would be in the same file as this maybe but it kind of simplifies what hello the",
    "start": "2267100",
    "end": "2276510"
  },
  {
    "text": "executable does it looks like you can create a compiled library for that but",
    "start": "2276510",
    "end": "2283180"
  },
  {
    "text": "I'm kind of trying to illustrate different ways of specifying sources which are conditional yeah so the remark",
    "start": "2283180",
    "end": "2305560"
  },
  {
    "text": "is that this isn't the same as having a library campaign containing one of these sources and then linked and that's true",
    "start": "2305560",
    "end": "2312670"
  },
  {
    "text": "but it is the same as this code in this code I'm just going to illustrate that",
    "start": "2312670",
    "end": "2318670"
  },
  {
    "text": "there's other ways of conditionally making a source file part of a target",
    "start": "2318670",
    "end": "2325570"
  },
  {
    "text": "yeah ok so this connection you have a",
    "start": "2325570",
    "end": "2332380"
  },
  {
    "text": "correctness impact on your code as well you might see this kind of code in non modern ce mec where you're checking the",
    "start": "2332380",
    "end": "2338860"
  },
  {
    "text": "see make build type and checking if it's equal to debugger equal to release this",
    "start": "2338860",
    "end": "2345580"
  },
  {
    "text": "is non portable because it won't work with Visual Studio if you've ever used Visual Studio you know that you launch",
    "start": "2345580",
    "end": "2351940"
  },
  {
    "text": "it and when you want to build you can select to build either a debug or release and that's way after C makers",
    "start": "2351940",
    "end": "2358330"
  },
  {
    "text": "won so what you need to do is tell C",
    "start": "2358330",
    "end": "2363610"
  },
  {
    "text": "make that if it's generating for debug mode use help for debug and if it's not",
    "start": "2363610",
    "end": "2369040"
  },
  {
    "text": "generating for debug mode use helper really so see McDo if it's using Visual Studio",
    "start": "2369040",
    "end": "2377340"
  },
  {
    "text": "whether you're going to click the debug button or the release button so you have",
    "start": "2377340",
    "end": "2383710"
  },
  {
    "text": "to kind of tell it what to do in each case so it actually generates different visual studio project files for each",
    "start": "2383710",
    "end": "2390790"
  },
  {
    "text": "mode and that's how you communicate that",
    "start": "2390790",
    "end": "2396240"
  },
  {
    "text": "so those generative expressions they get evaluated after the last line of your",
    "start": "2396570",
    "end": "2404650"
  },
  {
    "text": "main cmakelists txt file at the top of your repository or anything like see",
    "start": "2404650",
    "end": "2412030"
  },
  {
    "text": "make will generate will process your see make list our text we call that the",
    "start": "2412030",
    "end": "2417700"
  },
  {
    "text": "configure stage then it'll compute various things such as which target depends on which other targets and what",
    "start": "2417700",
    "end": "2424060"
  },
  {
    "text": "order do I have to build things in in order to be able to link and then it'll",
    "start": "2424060",
    "end": "2429640"
  },
  {
    "text": "actually generate the build files and somewhere in between is where it processes those generative expressions",
    "start": "2429640",
    "end": "2439560"
  },
  {
    "text": "and that's helpful because the entire configuration step has been done already",
    "start": "2439560",
    "end": "2446230"
  },
  {
    "text": "so I'll tell you a little bit more about that in a few slides so just to",
    "start": "2446230",
    "end": "2452100"
  },
  {
    "text": "summarize the basics of generative expressions 1 : and some content will",
    "start": "2452100",
    "end": "2459790"
  },
  {
    "text": "result in the content itself 0 : the content will result in nothing at all empty config debug will result in one if",
    "start": "2459790",
    "end": "2469000"
  },
  {
    "text": "it's generating for debug mode and config debug will result in 0 if it's not generating for debug mode so by",
    "start": "2469000",
    "end": "2476620"
  },
  {
    "text": "nesting this one inside of a larger generative expression we get this and",
    "start": "2476620",
    "end": "2482740"
  },
  {
    "text": "you can see how it would collapse and sort of result in the content or not the content based on basically these two",
    "start": "2482740",
    "end": "2490690"
  },
  {
    "text": "simple rules and the fact that this generative expression evaluates to",
    "start": "2490690",
    "end": "2496300"
  },
  {
    "text": "either 1 or 0",
    "start": "2496300",
    "end": "2498960"
  },
  {
    "text": "the bool generator expression will have some truthiness conversion so it'll it's",
    "start": "2502880",
    "end": "2511290"
  },
  {
    "text": "able to process an empty string for example if I just put win32 which might",
    "start": "2511290",
    "end": "2516390"
  },
  {
    "text": "just be empty into a generative expression it would not be a valid expression so valid expressions have to",
    "start": "2516390",
    "end": "2523560"
  },
  {
    "text": "be either 1 or 0 so if I use bull I convert empty into 0 and that's why this",
    "start": "2523560",
    "end": "2530850"
  },
  {
    "text": "kind of code can work the a lot of Seema",
    "start": "2530850",
    "end": "2541440"
  },
  {
    "text": "commands have support for these generative expressions but not everything every see make command mostly",
    "start": "2541440",
    "end": "2547740"
  },
  {
    "text": "that's because the commands were not relevant to generation but hopefully all",
    "start": "2547740",
    "end": "2554370"
  },
  {
    "text": "of the needs that you have regarding use of generative expressions are already there in your C make version all of the",
    "start": "2554370",
    "end": "2560580"
  },
  {
    "text": "target commands can use them the file generate command can use it too that's",
    "start": "2560580",
    "end": "2566820"
  },
  {
    "text": "something you would use instead of using file right if if you want to have different content for debug mode and",
    "start": "2566820",
    "end": "2572790"
  },
  {
    "text": "release mode that's how you would have a portable build system to Visual Studio",
    "start": "2572790",
    "end": "2580100"
  },
  {
    "text": "etc so most of the commands where it's relevant it's possible to use generative",
    "start": "2580160",
    "end": "2585630"
  },
  {
    "text": "expressions so just another example of",
    "start": "2585630",
    "end": "2591360"
  },
  {
    "text": "where that can be relevant in this little snippet of C make I'm trying to",
    "start": "2591360",
    "end": "2597630"
  },
  {
    "text": "get the property build with threads on the target hello sorry I'm trying to get",
    "start": "2597630",
    "end": "2603120"
  },
  {
    "text": "the property called with threads on the target hello and I put that into the variable build with threads and I use",
    "start": "2603120",
    "end": "2611370"
  },
  {
    "text": "that to try to add a compile definition use thread so that's used with an F and",
    "start": "2611370",
    "end": "2617190"
  },
  {
    "text": "F in my C my code and then later I set the property to on so the problem is",
    "start": "2617190",
    "end": "2624000"
  },
  {
    "text": "I've set the property to on after trying to meet it and that's because C make",
    "start": "2624000",
    "end": "2630180"
  },
  {
    "text": "processes this file from top to bottom so the alternative way to do it is to",
    "start": "2630180",
    "end": "2636540"
  },
  {
    "text": "use generator expressions of course we're saying if the width Reds property",
    "start": "2636540",
    "end": "2642059"
  },
  {
    "text": "is true on the target specify the used",
    "start": "2642059",
    "end": "2647130"
  },
  {
    "text": "threads in target compiled definitions so I appreciate that there's a lot to unpack in that single line but you do",
    "start": "2647130",
    "end": "2655290"
  },
  {
    "text": "get used to it and it's quite powerful once you do and now even though I set",
    "start": "2655290",
    "end": "2661829"
  },
  {
    "text": "the property to on afterward it doesn't matter because the setting the property",
    "start": "2661829",
    "end": "2670049"
  },
  {
    "text": "to on happens in this stage the configure stage and testing it happens in the compute stage so that means that",
    "start": "2670049",
    "end": "2681930"
  },
  {
    "text": "I can't have bugs relating to ordering of commands inside of my teammate code",
    "start": "2681930",
    "end": "2687180"
  },
  {
    "text": "and this happens more than you think because you might have odd subdirectory calls which change target properties and",
    "start": "2687180",
    "end": "2696599"
  },
  {
    "text": "later they get red and it might not be obvious what order things happening so",
    "start": "2696599",
    "end": "2705109"
  },
  {
    "text": "use generate term conditions correctly",
    "start": "2705109",
    "end": "2709940"
  },
  {
    "text": "so the probably the last thing I'm going to have time to talk about is the target link libraries command I mentioned",
    "start": "2712910",
    "end": "2721440"
  },
  {
    "text": "before these double colons and target names and Illustrated that this is what",
    "start": "2721440",
    "end": "2727380"
  },
  {
    "text": "modern see make looks like when you're using all modern C make all of your",
    "start": "2727380",
    "end": "2733680"
  },
  {
    "text": "dependency libraries will have double columns in them so the reason for that",
    "start": "2733680",
    "end": "2739589"
  },
  {
    "text": "is the target link libraries command itself it's very old and it has legacy",
    "start": "2739589",
    "end": "2746280"
  },
  {
    "text": "behavior for any item that you give it C",
    "start": "2746280",
    "end": "2751680"
  },
  {
    "text": "make goes to a list of things that that autumn might be it'll see if that item is actually a C make target name so",
    "start": "2751680",
    "end": "2759210"
  },
  {
    "text": "library like live salutation if it's not a C make target name it'll test whether",
    "start": "2759210",
    "end": "2764849"
  },
  {
    "text": "it's a library name on there such as live salutation duress Oh if",
    "start": "2764849",
    "end": "2770310"
  },
  {
    "text": "that's not true it'll see if it's /opt /lib salutation daughter so it'll check",
    "start": "2770310",
    "end": "2776280"
  },
  {
    "text": "if it's a path and if that's not true it'll treat it as a link or flag and simply add it to your link line so",
    "start": "2776280",
    "end": "2783570"
  },
  {
    "text": "that's why you can use target link libraries with link options such as no one defined but it also means that if I",
    "start": "2783570",
    "end": "2790860"
  },
  {
    "text": "make a typo when trying to specify I see my target name it'll just be added as a",
    "start": "2790860",
    "end": "2797040"
  },
  {
    "text": "linker flag so if I have live salute a and that's it and I forget to write the rest of the",
    "start": "2797040",
    "end": "2803010"
  },
  {
    "text": "word that'll just be added to my link line and I won't have a dependency on that see make target so we we yeah so",
    "start": "2803010",
    "end": "2814440"
  },
  {
    "text": "this using an item with target link",
    "start": "2814440",
    "end": "2820200"
  },
  {
    "text": "libraries has a bunch of impacts on you on your build system it causes a link to",
    "start": "2820200",
    "end": "2826260"
  },
  {
    "text": "be made on your link line determines build order so that things are built before they're linked it consumes usage",
    "start": "2826260",
    "end": "2832920"
  },
  {
    "text": "requirements such as your dash on your dash D on your compile command line and your link options and it determines",
    "start": "2832920",
    "end": "2841560"
  },
  {
    "text": "compatibility which I won't get into now but basically you want to try to specify",
    "start": "2841560",
    "end": "2847920"
  },
  {
    "text": "C make targets where possible instead of library files or library paths yeah so I",
    "start": "2847920",
    "end": "2857760"
  },
  {
    "text": "mentioned that if you do make a typo C make checks what what it could be if",
    "start": "2857760",
    "end": "2863700"
  },
  {
    "text": "it's a target name etc but otherwise just adds it to your link liner and you don't want that so that's why mostly you",
    "start": "2863700",
    "end": "2870960"
  },
  {
    "text": "want to define targets with double colons in them that indicates to see",
    "start": "2870960",
    "end": "2876120"
  },
  {
    "text": "make that order this is a C make target name or it's an error",
    "start": "2876120",
    "end": "2881840"
  },
  {
    "text": "so I'm bypassing all of the other fallback logic that seemed a cascades",
    "start": "2886710",
    "end": "2892210"
  },
  {
    "text": "through because it always succeeds right it always gets to a success state of",
    "start": "2892210",
    "end": "2897849"
  },
  {
    "text": "just added to the link line even though it's a typo so if I have targets which have double",
    "start": "2897849",
    "end": "2904779"
  },
  {
    "text": "colons on their name see make knows that it must be a target name and if it can't",
    "start": "2904779",
    "end": "2910329"
  },
  {
    "text": "find a target of that name it gives you an error so that's why you got cute 5",
    "start": "2910329",
    "end": "2915729"
  },
  {
    "text": "colon colon core that's why you get boost colon colon thread etc and you can",
    "start": "2915729",
    "end": "2922089"
  },
  {
    "text": "do that for your own libraries as well",
    "start": "2922089",
    "end": "2925319"
  },
  {
    "text": "so there's a number of target types in see mech the top three are the ones that",
    "start": "2928710",
    "end": "2934450"
  },
  {
    "text": "you'll use most often that's executables shared in static libraries object libraries are quite",
    "start": "2934450",
    "end": "2941259"
  },
  {
    "text": "similar to static libraries but they just don't create an archive so it's just it's just a bunch of object files",
    "start": "2941259",
    "end": "2948660"
  },
  {
    "text": "interface libraries are used for header only libraries such as boost MPL and",
    "start": "2948660",
    "end": "2954420"
  },
  {
    "text": "alias levees are just a way to give another name to an existing library so",
    "start": "2954420",
    "end": "2960369"
  },
  {
    "text": "for example I created the lip salutation library and I would create an alias",
    "start": "2960369",
    "end": "2965979"
  },
  {
    "text": "called libs colon colon salutation in order for all of my all of the rest of",
    "start": "2965979",
    "end": "2971890"
  },
  {
    "text": "my build system to be using target names with two colons in them yeah",
    "start": "2971890",
    "end": "2981420"
  },
  {
    "text": "there's the violets on file naming it you can yeah",
    "start": "2983670",
    "end": "2989640"
  },
  {
    "text": "sorry can you yeah",
    "start": "2989640",
    "end": "3006890"
  },
  {
    "text": "so the remark is if I would just create lib salutation with the colon already I",
    "start": "3006890",
    "end": "3013340"
  },
  {
    "text": "wouldn't need the alias but that is not fine unfortunately yes so when you",
    "start": "3013340",
    "end": "3021620"
  },
  {
    "text": "create an actual build target that you're building in your build system like I shared a static library that you",
    "start": "3021620",
    "end": "3027320"
  },
  {
    "text": "build as opposed to one that you import it can't have the double colon on it",
    "start": "3027320",
    "end": "3033410"
  },
  {
    "text": "that's the convention that we came up with so yeah unfortunately you do need",
    "start": "3033410",
    "end": "3040820"
  },
  {
    "text": "the alias for that I kind of liked the idea of making that easier in the future",
    "start": "3040820",
    "end": "3047830"
  },
  {
    "text": "but it's the case now so I have a few",
    "start": "3047830",
    "end": "3053900"
  },
  {
    "text": "minutes to talk about dependencies when",
    "start": "3053900",
    "end": "3059690"
  },
  {
    "text": "you're using external dependencies you want it to be basically this simple you",
    "start": "3059690",
    "end": "3064700"
  },
  {
    "text": "do fine package and you use target link libraries with a target name which",
    "start": "3064700",
    "end": "3069770"
  },
  {
    "text": "contains two colons some older packages",
    "start": "3069770",
    "end": "3075140"
  },
  {
    "text": "that you might use might say well first you call fine package then you call include directories with few includes",
    "start": "3075140",
    "end": "3082310"
  },
  {
    "text": "etc but this is what you're aiming for in terms of simplicity and lack of",
    "start": "3082310",
    "end": "3091480"
  },
  {
    "text": "redundant commands you simply find package in there new target link libraries because this works",
    "start": "3091480",
    "end": "3101780"
  },
  {
    "text": "transitively in this example I'm calling fine package for cute five widgets I",
    "start": "3101780",
    "end": "3107300"
  },
  {
    "text": "have some local library in my build system and cute five widgets is a public",
    "start": "3107300",
    "end": "3112610"
  },
  {
    "text": "dependency of the local library also of hello that depends only on the local library",
    "start": "3112610",
    "end": "3119170"
  },
  {
    "text": "but it actually gets the include directories and everything from cute five widgets transitively that's because",
    "start": "3119170",
    "end": "3126320"
  },
  {
    "text": "local Lib uses cute five widgets publicly so it communicates that through the public edges all the way up and as I",
    "start": "3126320",
    "end": "3137210"
  },
  {
    "text": "mentioned the legacy pattern of doing this kind of thing is very wordy so what you would have to do with cute well cute",
    "start": "3137210",
    "end": "3145520"
  },
  {
    "text": "for way back in 2010 you would do something like this you would call fine package and then you would use our",
    "start": "3145520",
    "end": "3153380"
  },
  {
    "text": "definitions throughout all of the - D definitions then you would use include",
    "start": "3153380",
    "end": "3158630"
  },
  {
    "text": "directories to add all of the include directories then you would do some messing with your cxx flags then you",
    "start": "3158630",
    "end": "3166220"
  },
  {
    "text": "would have target link libraries with some variables and then you would set those variables as dependencies of the",
    "start": "3166220",
    "end": "3173720"
  },
  {
    "text": "next stuff in your build system so very worthy lots of stuff to go wrong lots of",
    "start": "3173720",
    "end": "3178910"
  },
  {
    "text": "potential for typos you don't want to do any of it so the you know the general",
    "start": "3178910",
    "end": "3187190"
  },
  {
    "text": "wrong way would be you call fine package and that provides some variables like",
    "start": "3187190",
    "end": "3193340"
  },
  {
    "text": "fill include deers few compile definitions you'll still find a lot of packages which only provide those kind",
    "start": "3193340",
    "end": "3199130"
  },
  {
    "text": "of things instead of providing targets",
    "start": "3199130",
    "end": "3203799"
  },
  {
    "text": "so the aim is that a package that you use provides a target with a double",
    "start": "3204190",
    "end": "3210950"
  },
  {
    "text": "colon in the name and of course if I have this correctly written but I",
    "start": "3210950",
    "end": "3217520"
  },
  {
    "text": "commentate the fine package or I forget to write it in the first place so you make will issue an error because it",
    "start": "3217520",
    "end": "3223100"
  },
  {
    "text": "knows that this is a target name and a can't finder so that's useful team",
    "start": "3223100",
    "end": "3230530"
  },
  {
    "text": "another thing to note that is that FoodCorps is what we call an imported library and you can note that that is",
    "start": "3231520",
    "end": "3242260"
  },
  {
    "text": "similar to the syntax that you would use for alias levels so again just the",
    "start": "3242260",
    "end": "3247640"
  },
  {
    "text": "double colons and I think that's my last guideline",
    "start": "3247640",
    "end": "3256309"
  },
  {
    "text": "that I had fee which is years into a imported targets provided by your dependencies I think the define package",
    "start": "3256309",
    "end": "3266780"
  },
  {
    "text": "scripts that are provided by C make some of them provide imported targets like",
    "start": "3266780",
    "end": "3273109"
  },
  {
    "text": "this but they also provide variables so in that case you should always prefer to use the important imported target in",
    "start": "3273109",
    "end": "3279740"
  },
  {
    "text": "your code I don't think I have yeah",
    "start": "3279740",
    "end": "3285940"
  },
  {
    "text": "anything else so the wiki has a lot of outdated",
    "start": "3285940",
    "end": "3292339"
  },
  {
    "text": "information so I would recommend avoiding that do you use the documentation I don't know people Google",
    "start": "3292339",
    "end": "3301430"
  },
  {
    "text": "things about C make and they find example code on Stack Overflow and on github but some of the answers are in",
    "start": "3301430",
    "end": "3310099"
  },
  {
    "text": "the same accommodation C make mailing lists also has good activity and Stack",
    "start": "3310099",
    "end": "3316700"
  },
  {
    "text": "Overflow does too so the people answering questions on Stack Overflow do",
    "start": "3316700",
    "end": "3321880"
  },
  {
    "text": "know modern C make and they do advocate for it shown quite happy but if you do",
    "start": "3321880",
    "end": "3328069"
  },
  {
    "text": "look at the C make documentation start here with the C make build system that's",
    "start": "3328069",
    "end": "3333859"
  },
  {
    "text": "like long-form prose about how to define your build system similar to this",
    "start": "3333859",
    "end": "3339410"
  },
  {
    "text": "presentation then you would look at C make packages that is some documentation",
    "start": "3339410",
    "end": "3345079"
  },
  {
    "text": "about how to create your own package files for your libraries so yeah just",
    "start": "3345079",
    "end": "3352309"
  },
  {
    "text": "thanks some of the ce mec contributor is in particular brad and pendant pendant robert and red it also gave me a lot of",
    "start": "3352309",
    "end": "3358579"
  },
  {
    "text": "feedback for the content of this talk to you so yeah there's a question",
    "start": "3358579",
    "end": "3366880"
  },
  {
    "text": "yes so the question is maybe we'll go",
    "start": "3385190",
    "end": "3390720"
  },
  {
    "text": "back to it yeah so the question is if I",
    "start": "3390720",
    "end": "3404130"
  },
  {
    "text": "want to make this work how do I do it",
    "start": "3404130",
    "end": "3410370"
  },
  {
    "text": "and so you would need to use target include directories but you would also",
    "start": "3410370",
    "end": "3415920"
  },
  {
    "text": "need to create an alias yeah that's the easiest way so I don't have that on this",
    "start": "3415920",
    "end": "3423210"
  },
  {
    "text": "slide but yeah maybe I should have that",
    "start": "3423210",
    "end": "3437400"
  },
  {
    "text": "on the slide yeah",
    "start": "3437400",
    "end": "3441710"
  },
  {
    "text": "I don't have any guidance to give about",
    "start": "3445690",
    "end": "3472030"
  },
  {
    "text": "that so so that the question is about",
    "start": "3472030",
    "end": "3476610"
  },
  {
    "text": "I'm not sure why people use more than one use of the project command I'm not",
    "start": "3479610",
    "end": "3485620"
  },
  {
    "text": "sure if you mean using project inside of subdirectories yes so the remark is just",
    "start": "3485620",
    "end": "3504970"
  },
  {
    "text": "about creating a naming convention I don't have any specific guidance so the",
    "start": "3504970",
    "end": "3560200"
  },
  {
    "text": "remark is about using dependencies which don't use cement themselves and use some other build system you would use the",
    "start": "3560200",
    "end": "3567880"
  },
  {
    "text": "external project see make module for that and beyond that you can create your",
    "start": "3567880",
    "end": "3574840"
  },
  {
    "text": "own targets with double colons in their name too",
    "start": "3574840",
    "end": "3580090"
  },
  {
    "text": "make it simple for the rest of your build system so you mentioned that you fall back to old C make way which I",
    "start": "3580090",
    "end": "3587410"
  },
  {
    "text": "guess is variables etc and what you would do is just take those variables",
    "start": "3587410",
    "end": "3593740"
  },
  {
    "text": "and define imported targets with those so you would define an imported target",
    "start": "3593740",
    "end": "3599109"
  },
  {
    "text": "yourself called this thread say a boost system and you would define what the",
    "start": "3599109",
    "end": "3606160"
  },
  {
    "text": "location of the binary is this system dot a and you would define the include",
    "start": "3606160",
    "end": "3611770"
  },
  {
    "text": "directories for that as well and then after that everything else works exactly",
    "start": "3611770",
    "end": "3616930"
  },
  {
    "text": "like in the presentation yeah and for examples of that you can look into the",
    "start": "3616930",
    "end": "3624480"
  },
  {
    "text": "into the interior ce mec distribution itself if you look in find PNG dot c",
    "start": "3624480",
    "end": "3630580"
  },
  {
    "text": "maker so that creates an imported target after you creating the variables and it",
    "start": "3630580",
    "end": "3636130"
  },
  {
    "text": "just uses those variables yeah mutation",
    "start": "3636130",
    "end": "3644410"
  },
  {
    "text": "level but in this specific library and then you have a conflict about you know",
    "start": "3644410",
    "end": "3651310"
  },
  {
    "text": "you don't want global variables but you also would like to have a default level",
    "start": "3651310",
    "end": "3656740"
  },
  {
    "text": "and so how do you how do you have a",
    "start": "3656740",
    "end": "3662170"
  },
  {
    "text": "default global warning level for example and be able to reduce that in some",
    "start": "3662170",
    "end": "3668020"
  },
  {
    "text": "specific target you can do some messing with target properties like I showed in",
    "start": "3668020",
    "end": "3674020"
  },
  {
    "text": "the slides and then I generate time have some generator expression specifying",
    "start": "3674020",
    "end": "3680260"
  },
  {
    "text": "which one to use but yeah that gets to advanced topics then as well yeah I",
    "start": "3680260",
    "end": "3688960"
  },
  {
    "text": "think we have time for one more question yeah",
    "start": "3688960",
    "end": "3693270"
  },
  {
    "text": "I proposed well on my own let's see",
    "start": "3697960",
    "end": "3711570"
  },
  {
    "text": "this is a cute paste text processing library that I have and then I maintain",
    "start": "3719059",
    "end": "3725640"
  },
  {
    "text": "for now it's just got two libraries inside of it so it's using a lot of",
    "start": "3725640",
    "end": "3732710"
  },
  {
    "text": "modern CMake techniques there's a bad",
    "start": "3732710",
    "end": "3743760"
  },
  {
    "text": "example but yeah so you know using target compiled features it's actually",
    "start": "3743760",
    "end": "3753270"
  },
  {
    "text": "doing a lot of wrong things but I hope it's using cute 5 : : qml so that's good",
    "start": "3753270",
    "end": "3759740"
  },
  {
    "text": "but yeah maybe look at the KDE libraries as well they're using modern CMake and",
    "start": "3759740",
    "end": "3765150"
  },
  {
    "text": "cute as well so it could be a good one to look at okay thanks for coming",
    "start": "3765150",
    "end": "3774000"
  },
  {
    "text": "[Applause]",
    "start": "3774000",
    "end": "3781630"
  }
]