[
  {
    "text": "all right good morning music has died down so that means it's my time to speak",
    "start": "4200",
    "end": "9559"
  },
  {
    "text": "um which I'm going to be doing for the next hour um I hope you've been enjoying the conference um I've been I've been",
    "start": "9559",
    "end": "15960"
  },
  {
    "text": "here myself for quite a few years and I truly absolutely enjoy it there's a lot of great content um a lot of great",
    "start": "15960",
    "end": "21760"
  },
  {
    "text": "speakers um I'm not sure if I count to that no I'll I'll do my best to make it great as well and this morning we're",
    "start": "21760",
    "end": "27240"
  },
  {
    "text": "going to talk about API security all right we're going to talk about various aspects of API security seven things um",
    "start": "27240",
    "end": "33600"
  },
  {
    "text": "to be honest I'm not going to keep counting my slides um doing seven things about API security is also very very",
    "start": "33600",
    "end": "38760"
  },
  {
    "text": "easy because there's a lot of stuff we can talk about a lot of different ways we can talk about API security um and",
    "start": "38760",
    "end": "44680"
  },
  {
    "text": "that's exactly what we're going to do and if you ever need to talk about seven things well having a list of 10 um like",
    "start": "44680",
    "end": "50199"
  },
  {
    "text": "the OAS top 10 for API security vulnerabilities is a very good starting point because you can just stick them off like yeah 1 2 3 4 5 six seven um and",
    "start": "50199",
    "end": "57160"
  },
  {
    "text": "off you go um this is a document really relased by oasp nonprofit organization aiming to improve the state of web",
    "start": "57160",
    "end": "63640"
  },
  {
    "text": "security and they had an oasp 10 for a very long time like two decades or",
    "start": "63640",
    "end": "68920"
  },
  {
    "text": "something and a couple of years ago they realized that the top 10 for web applications wasn't really directly",
    "start": "68920",
    "end": "75479"
  },
  {
    "text": "applicable to apis like some of the things mapped of course and other things were like UI specific which is not",
    "start": "75479",
    "end": "80600"
  },
  {
    "text": "relevant for apis and that's when a couple of people decided like yeah let's let's create an API top 10 and that's",
    "start": "80600",
    "end": "86640"
  },
  {
    "text": "how this uh project spun off and today it's actually kind of a very influential list it's get gets updated every couple",
    "start": "86640",
    "end": "93040"
  },
  {
    "text": "of years few minor changes tweaks uh some issues rise some issues drop uh new",
    "start": "93040",
    "end": "98079"
  },
  {
    "text": "issues come into the list and so on and so on this is not an exhaustive list this is not a checklist like this is not",
    "start": "98079",
    "end": "104360"
  },
  {
    "text": "like oh we're going to do API security here's a list of 10 items and if we're done with the list then uh good job uh",
    "start": "104360",
    "end": "109880"
  },
  {
    "text": "we have finished our API security program and we are now secure check um I know some certifications might work that",
    "start": "109880",
    "end": "116360"
  },
  {
    "text": "way or some vendors think that this works that way but that's not the goal here this is an awareness document like",
    "start": "116360",
    "end": "122439"
  },
  {
    "text": "it's basically the go the goal here is like yeah if you're doing apis and security is not really at the top of your mind maybe this is a good starting",
    "start": "122439",
    "end": "129440"
  },
  {
    "text": "point maybe these issues that we see in like an enormous amount of different apis maybe you want to look for these",
    "start": "129440",
    "end": "135120"
  },
  {
    "text": "things in your apis as well and that's kind of um what this um this list is supposed to be and that's also why I'm",
    "start": "135120",
    "end": "141280"
  },
  {
    "text": "going to talk about quite a few of the items on this list right here and we'll do that with me talking explaining",
    "start": "141280",
    "end": "146840"
  },
  {
    "text": "things showing you cases and I have some demos as well um that are always a bit more entertaining than just me yapping",
    "start": "146840",
    "end": "153080"
  },
  {
    "text": "and showing PowerPoint slides all right we're going to talk about concrete cases we're going to talk about a smart scale",
    "start": "153080",
    "end": "160280"
  },
  {
    "text": "um that wasn't very smart well not the scale but the app behind it was of course a scale with an app and the app",
    "start": "160280",
    "end": "165440"
  },
  {
    "text": "had an API and API has virtually no security and there's a lot of lessons to be learned from that specific story I'll",
    "start": "165440",
    "end": "172680"
  },
  {
    "text": "get back to that in in a bit lesson number one basically would be if you buy a scale buy a dumb scale that would be a",
    "start": "172680",
    "end": "178480"
  },
  {
    "text": "very good life lesson um the operation of weighing yourself and entering that information manually",
    "start": "178480",
    "end": "184640"
  },
  {
    "text": "in an app is probably going to not going to be that um problematic in your life you don't have to optimize that final",
    "start": "184640",
    "end": "191040"
  },
  {
    "text": "step because the consequences are not ideal Second Story we're going to discuss uh we're going to start with",
    "start": "191040",
    "end": "197480"
  },
  {
    "text": "that one in a bit is um a case at drawbox it wasn't a breach it was something that was discovered uh by an",
    "start": "197480",
    "end": "203400"
  },
  {
    "text": "ethical hacker and reported and Dropbox was like oh crap we we kind of screwed it up um and that's going to be about",
    "start": "203400",
    "end": "209760"
  },
  {
    "text": "server s side request forgery and that's actually uh pretty interesting as well um because it's one of these nasty",
    "start": "209760",
    "end": "215319"
  },
  {
    "text": "problems where it's very hard to apply the right defenses all right so that kind of sets the agenda that's uh the",
    "start": "215319",
    "end": "221799"
  },
  {
    "text": "warming up to to keep you engaged um you can have like a counter if you want to about seven things um and then you can",
    "start": "221799",
    "end": "227799"
  },
  {
    "text": "harass me later whether I met the quotum yes or no all right um this early",
    "start": "227799",
    "end": "233200"
  },
  {
    "text": "morning here in Oslo I'm Philip D I'm from Belgium and I'm a security expert so I did a PhD in web security like um",
    "start": "233200",
    "end": "240200"
  },
  {
    "text": "which seems like ages ago uh which probably also is ages ago and uh right now or since then I've been um helping",
    "start": "240200",
    "end": "247200"
  },
  {
    "text": "developers understand security so I understand a lot of very complex systems uh systems using oad open ID connect API",
    "start": "247200",
    "end": "253400"
  },
  {
    "text": "security and so on I help developers make sense of that understand what's going on uh the pros the cons the",
    "start": "253400",
    "end": "258959"
  },
  {
    "text": "trade-offs how to secure uh things best practices and what applies to you and I do that in various ways through",
    "start": "258959",
    "end": "264600"
  },
  {
    "text": "workshops I did a conference Workshop right here at NDC security so some of you were there um it's great to see you",
    "start": "264600",
    "end": "270080"
  },
  {
    "text": "back here again means you're not tired of me yet so that's good um I also do that with online courses and specialized",
    "start": "270080",
    "end": "276360"
  },
  {
    "text": "Consulting so uh I join a company um for a couple of hours per week and help them understand things answer questions work",
    "start": "276360",
    "end": "283039"
  },
  {
    "text": "out potential scenarios uh so that they can move forward all right finally I also organize SE abde and that's my",
    "start": "283039",
    "end": "289840"
  },
  {
    "text": "volunteer work it's a nonprofit course in Belgium um it runs every year a week long and we bring in experts from around",
    "start": "289840",
    "end": "296000"
  },
  {
    "text": "the world uh to teach about application security all right it's all about secure application development it's really",
    "start": "296000",
    "end": "302360"
  },
  {
    "text": "awesome it's the perfect opportunity to visit Belgium if you're there for a week you can try all all of our delicious um",
    "start": "302360",
    "end": "308800"
  },
  {
    "text": "activities and Tas things that's definitely a pro and of course you get to learn about application Security in",
    "start": "308800",
    "end": "314960"
  },
  {
    "text": "this very intimate immersive setting uh highly recommended small event uh 80 people Max um because we want to keep it",
    "start": "314960",
    "end": "321400"
  },
  {
    "text": "that way so that we can learn from each other enjoy each other and have a great",
    "start": "321400",
    "end": "326440"
  },
  {
    "text": "event all right so look it up if you want to it runs into June uh this year if you want to grab a copy of the slides",
    "start": "326440",
    "end": "333080"
  },
  {
    "text": "um here's a very safe QR code so that's test number one will you scan it or not uh no it's fine it just points on my",
    "start": "333080",
    "end": "339199"
  },
  {
    "text": "website uh you'll find the slides on my website it's very easy to find you can find them on my social media handles as",
    "start": "339199",
    "end": "344240"
  },
  {
    "text": "well um and well just Google my name uh that's one of the benefits if you get my name right it's very easy to find but",
    "start": "344240",
    "end": "351240"
  },
  {
    "text": "step number one is getting it right that's uh unfortunately something I can't uh change so it's something you'll",
    "start": "351240",
    "end": "356280"
  },
  {
    "text": "have to deal with all right good let's talk about oh sorry someone was taking a",
    "start": "356280",
    "end": "361840"
  },
  {
    "text": "picture here you go there's a time out timer like 10 n no it's it's perfectly",
    "start": "361840",
    "end": "367800"
  },
  {
    "text": "fine all right so first topic was like I promised serers side request forgery and",
    "start": "367800",
    "end": "373080"
  },
  {
    "text": "server side request forgery is this very weird thing and in general either it",
    "start": "373080",
    "end": "378479"
  },
  {
    "text": "applies to you and it's very irrelevant and very very dangerous or you don't",
    "start": "378479",
    "end": "383639"
  },
  {
    "text": "care about this at all it's like there there's usually no in between it's like oh crap or whatever um so let's talk to",
    "start": "383639",
    "end": "390080"
  },
  {
    "text": "the people that might have this problem uh and let's start by defining what what the problem really is and why it matters",
    "start": "390080",
    "end": "396240"
  },
  {
    "text": "so much and why it matters so much is because in our applications um we always have this line somewhere right we have a",
    "start": "396240",
    "end": "403560"
  },
  {
    "text": "line uh that's the perimeter the VPC firewall a wa somewhere uh shielding our",
    "start": "403560",
    "end": "408639"
  },
  {
    "text": "environment from the the dark dangerous world right so that's essentially how systems are built that should not be the",
    "start": "408639",
    "end": "416599"
  },
  {
    "text": "only defense there's talks about that here at the conference you shouldn't rely on your W for everything but it's",
    "start": "416599",
    "end": "421680"
  },
  {
    "text": "not bad to have some perimeter in place somewhere to separate the nasty outside world from the Pretty inside World well",
    "start": "421680",
    "end": "428120"
  },
  {
    "text": "pretty um depends on your point of view but on the inside we have our systems we have our backends API servers whatever",
    "start": "428120",
    "end": "434840"
  },
  {
    "text": "is running there and on the outside of course we have the attacker and more than once that brings me to the next",
    "start": "434840",
    "end": "440599"
  },
  {
    "text": "slide more than once people have argued like yeah but this system is running",
    "start": "440599",
    "end": "446879"
  },
  {
    "text": "internally and we trust our people like my colleagues are not the",
    "start": "446879",
    "end": "451919"
  },
  {
    "text": "adversary usually not but if something goes wrong that that already crumbles down and and there's an argument to be",
    "start": "451919",
    "end": "458280"
  },
  {
    "text": "made like internal systems don't have to be secured that well like it's fine to be a bit less more LAX here um and not",
    "start": "458280",
    "end": "465720"
  },
  {
    "text": "to District the security and this is a confession slide I I'm not going to ask you to confess here but um we've all",
    "start": "465720",
    "end": "471800"
  },
  {
    "text": "done that right we've all made that argument at some point like yeah this is should be better but for now it's fine",
    "start": "471800",
    "end": "478400"
  },
  {
    "text": "because it's internal and five years later it's still fine because it's internal and it never reaches the top of the priority list and so on and so",
    "start": "478400",
    "end": "485360"
  },
  {
    "text": "on in general you could argue like yeah this is fine however server side request",
    "start": "485360",
    "end": "490879"
  },
  {
    "text": "forgery is this type of vulnerability that has the nasty consequence that if the attacker can exploit it they get a",
    "start": "490879",
    "end": "497879"
  },
  {
    "text": "foothold inside your network serers side request forgery means that the attacker can control the destination of server",
    "start": "497879",
    "end": "504960"
  },
  {
    "text": "side requests and sometimes even more than just a destination and that means once the attacker can execute that",
    "start": "504960",
    "end": "510080"
  },
  {
    "text": "vulnerability they can start accessing things on Local Host right that service on Local Host where you said like yeah",
    "start": "510080",
    "end": "515159"
  },
  {
    "text": "nobody has access to Local Host so it's fine we can just keep it like that or uh internal servers internal apis all of a",
    "start": "515159",
    "end": "522080"
  },
  {
    "text": "sudden become reachable with serers side request forgery and that's the nature of",
    "start": "522080",
    "end": "527160"
  },
  {
    "text": "the P that's the danger of ssrf so how does that happen like H who",
    "start": "527160",
    "end": "533959"
  },
  {
    "text": "who comes up with that like how on Earth do we have an ssrf vulnerability in our applications well whenever ever you",
    "start": "533959",
    "end": "540519"
  },
  {
    "text": "accept URLs as input that's the general rule there's other types and variants like if you accept IP addresses or",
    "start": "540519",
    "end": "546839"
  },
  {
    "text": "domains or um you automatically resolve certain things you find the logs and so on but in general a good way to to",
    "start": "546839",
    "end": "553279"
  },
  {
    "text": "analyze your systems for this is like if you ever accept a URL as input theer can give you a URL and your server side code",
    "start": "553279",
    "end": "559839"
  },
  {
    "text": "has like a codepad that says like hey here's a URL let's fetch it and do something with a result and and at this",
    "start": "559839",
    "end": "565560"
  },
  {
    "text": "point you're probably thinking like yeah that's kind of weird but this happens a lot in things like a web hook whenever",
    "start": "565560",
    "end": "571720"
  },
  {
    "text": "you have a system at some point you're you're building a s and the customer is like yeah I want to get a call on my",
    "start": "571720",
    "end": "577360"
  },
  {
    "text": "system and something happens on your system and a good way to do that is a web hook so you tell the customer like",
    "start": "577360",
    "end": "582399"
  },
  {
    "text": "yeah just provide your uh poth or your url here as a web hook and when something happens we'll call that web",
    "start": "582399",
    "end": "587720"
  },
  {
    "text": "hook bam server side request fory because I can give you if I'm the attacker malicious user I can give you",
    "start": "587720",
    "end": "593720"
  },
  {
    "text": "any URL as a web hook and you're going to call it and that's a potential problem very easy to introduce just by",
    "start": "593720",
    "end": "600920"
  },
  {
    "text": "not thinking about ssrf bam and you have a potential vulnerability in your system other places if you do link previews",
    "start": "600920",
    "end": "607560"
  },
  {
    "text": "You're Building LinkedIn and somebody wants to post something you paste a URL in your LinkedIn post what does LinkedIn",
    "start": "607560",
    "end": "612839"
  },
  {
    "text": "do like oh yeah I'm going to fetch that URL and get some metadata and show you like the preview of the image and the title and the the short content and so",
    "start": "612839",
    "end": "619640"
  },
  {
    "text": "on that would also be a potential server side request forgery vulnerability and there's plenty of other cases where this",
    "start": "619640",
    "end": "625560"
  },
  {
    "text": "can go wrong um image loading for example as well like you allow a user to provide an URL to an image to do some",
    "start": "625560",
    "end": "632120"
  },
  {
    "text": "branding like I'll pull in your logo and show this on the page where the users are accessing that and so on and that's",
    "start": "632120",
    "end": "638200"
  },
  {
    "text": "the case that happened at Dropbox that was an image loading issue uh right there so these things are there if",
    "start": "638200",
    "end": "644839"
  },
  {
    "text": "they're there they can lead to nasty consequences real world SSR RF attacks have led to root access to Virtual",
    "start": "644839",
    "end": "652079"
  },
  {
    "text": "machines because the attack can now call an endpoint where there's credentials or create a new user somewhere and so on",
    "start": "652079",
    "end": "657880"
  },
  {
    "text": "and so on uh very very problematic they have led to the leakage of AWS credentials like you can call the the",
    "start": "657880",
    "end": "665040"
  },
  {
    "text": "credential metadata service and um you acting as the identity of the system you're sending the request from and that",
    "start": "665040",
    "end": "671279"
  },
  {
    "text": "system had too much access because AWS is a to configure um certain language and and so on so yeah that's",
    "start": "671279",
    "end": "678200"
  },
  {
    "text": "that's a consequence that can happen as well and of course with those credentials the attack can escalate to other resources assets S3 buckets",
    "start": "678200",
    "end": "684480"
  },
  {
    "text": "extract a whole bunch of files and create a whole bunch of problems all right",
    "start": "684480",
    "end": "691240"
  },
  {
    "text": "scared yet good let's fix it let's let's look at fixing this let's take a look at the image loading problem like this",
    "start": "693000",
    "end": "699680"
  },
  {
    "text": "shouldn't be that hard right this is valid input right if if you want to allow branding with a URL to an image I",
    "start": "699680",
    "end": "705399"
  },
  {
    "text": "can send you an image to my CDN example.com image.png and that should be valid input and then something like this",
    "start": "705399",
    "end": "713279"
  },
  {
    "text": "should be invalid input like a request pointing to Local Host that should be invalid right that's not acceptable uh",
    "start": "713279",
    "end": "719600"
  },
  {
    "text": "because makes zero sense uh in this use case also not for a web hook and for all the other cases this makes zero sense so",
    "start": "719600",
    "end": "726760"
  },
  {
    "text": "the question becomes how do we protect against that well a security best practice is to allow the or to only",
    "start": "726760",
    "end": "733639"
  },
  {
    "text": "allow what you approve and block everything else right that's why a block list is not a best practice and an allow",
    "start": "733639",
    "end": "740040"
  },
  {
    "text": "list is a lot better however in this case the allow list would be the entire",
    "start": "740040",
    "end": "745480"
  },
  {
    "text": "internet which is kind of hard except for these host where you really don't want the attacker to reach and that",
    "start": "745480",
    "end": "751720"
  },
  {
    "text": "already flips the scripts as in we can't really follow this best practice we can't really decide like yeah this is",
    "start": "751720",
    "end": "757880"
  },
  {
    "text": "fine because we have no idea the only thing we can do is say like yeah internal systems internal networks maybe",
    "start": "757880",
    "end": "764079"
  },
  {
    "text": "not that would be a way to do so that's a bit of a problem and then the challenge becomes like how do you",
    "start": "764079",
    "end": "769320"
  },
  {
    "text": "determine whether this is what the difference is between both and the URLs and",
    "start": "769320",
    "end": "774959"
  },
  {
    "text": "URLs well there's URL parsers so it's not that hard right you can parse the URL you can take out a host you can",
    "start": "774959",
    "end": "780839"
  },
  {
    "text": "verify that host name where it points to probably requires DNS resolution and so on and then you can be like yeah this is",
    "start": "780839",
    "end": "787720"
  },
  {
    "text": "pointing to like public IPS it's probably fine and then you do like fingers crossed and you send a request and you hope that things work out and",
    "start": "787720",
    "end": "794399"
  },
  {
    "text": "that's how you solve server side request forgery in theory that's how you solve server side request forgery in theory in",
    "start": "794399",
    "end": "802199"
  },
  {
    "text": "practice it turns out that URLs are absolutely nasty like I before I dove",
    "start": "802199",
    "end": "808519"
  },
  {
    "text": "into this I I was unaware how insane that world is and it turns out that URL",
    "start": "808519",
    "end": "813639"
  },
  {
    "text": "parsers have slightly different interpretations of a malicious URL not not a legitimate not a URL like the one",
    "start": "813639",
    "end": "820199"
  },
  {
    "text": "I showed you on the slide here sorry not a URL on the slide here these URLs are very easy to understand like there's not",
    "start": "820199",
    "end": "825880"
  },
  {
    "text": "going to be confusion nobody's going to think that the bottom URL all of a sudden points to somewhere else but if",
    "start": "825880",
    "end": "831040"
  },
  {
    "text": "you use malicious URLs like maliciously constructed URLs with for example two ad",
    "start": "831040",
    "end": "836639"
  },
  {
    "text": "signs which is not really supposed to happen but the can enter whatever they want it depends on who you ask what they",
    "start": "836639",
    "end": "843680"
  },
  {
    "text": "will see for example here the URL parsers uh in languages like no JS Pearl go PHP Ruby whatever they see a request",
    "start": "843680",
    "end": "851519"
  },
  {
    "text": "going to google.com they will resolve this with d NS find a public IP address and they're like yeah good enough for me",
    "start": "851519",
    "end": "857240"
  },
  {
    "text": "uh and they would allow that service side request however if you then actually send the request using an other Library",
    "start": "857240",
    "end": "863720"
  },
  {
    "text": "like lip curl very common for sending requests a lot of language libraries rely on curl and Li curl for sending",
    "start": "863720",
    "end": "869959"
  },
  {
    "text": "requests lip curl would par this and see like oh yeah evil.com awesome bam which of course translates to the attacker",
    "start": "869959",
    "end": "876480"
  },
  {
    "text": "will give you a URL you think it resolves to google.com you approve it and the actual request goes to evil.com",
    "start": "876480",
    "end": "882079"
  },
  {
    "text": "which can be Local Host and internal system and so on and so on and you have now fallen victim to a server side",
    "start": "882079",
    "end": "887399"
  },
  {
    "text": "request forgery attack because of this URL parsing mess that we have in practice all right there's other cases",
    "start": "887399",
    "end": "893759"
  },
  {
    "text": "there's a link at the bottom to the research behind this it's from a couple of years ago but there's a whole bunch of other cases um where things can go",
    "start": "893759",
    "end": "900279"
  },
  {
    "text": "wrong where you can confuse the parser about ports and stuff like that so definitely if you're interested in that definitely take a look at how that goes",
    "start": "900279",
    "end": "906759"
  },
  {
    "text": "wrong in practice this problem exactly this",
    "start": "906759",
    "end": "911920"
  },
  {
    "text": "problem occurred at drawbox the people at drawbox are actually really good um",
    "start": "911920",
    "end": "917399"
  },
  {
    "text": "I'm a user so I hope they're really good but I also know a few people there and they actually they have a very good",
    "start": "917399",
    "end": "922639"
  },
  {
    "text": "security program they do a lot of secure coding and drawbox has a lot of solid security however in this case they got",
    "start": "922639",
    "end": "929440"
  },
  {
    "text": "bitten by exactly this vulnerability so they had code in there that actually checked the destination they said like",
    "start": "929440",
    "end": "934759"
  },
  {
    "text": "yeah we we need to protect against this and the code that they used relied on Python's understanding of URLs and they",
    "start": "934759",
    "end": "942399"
  },
  {
    "text": "checked this and they said like yeah this host is fine and off it goes and then the actual request was sent with the library using lip curl and lip curl",
    "start": "942399",
    "end": "948920"
  },
  {
    "text": "saw the other thing like I showed you on the previous slide and that is why server side request forgery was possible",
    "start": "948920",
    "end": "955360"
  },
  {
    "text": "in the first place all right this hasn't resulted in a breach their internal infrastructure doesn't rely on HTTP",
    "start": "955360",
    "end": "961399"
  },
  {
    "text": "either so it probably wouldn't have been a problem but they said like you know what even though this probably was fine",
    "start": "961399",
    "end": "966759"
  },
  {
    "text": "um we're going to approve the Bounty anyway and they paid the guy that reported it and um that's a win-win",
    "start": "966759",
    "end": "972160"
  },
  {
    "text": "basically drawbox fixing security and you're getting paid and off you go so how do we fix this",
    "start": "972160",
    "end": "977680"
  },
  {
    "text": "well you can't really you can try to say like yeah but if we use a same EUR all",
    "start": "977680",
    "end": "983639"
  },
  {
    "text": "parel both when checking and sending now we see the same thing twice and that's probably going to be fine but that's a",
    "start": "983639",
    "end": "989000"
  },
  {
    "text": "very very risky part because it also means if you ever change the library that sends requests or something changes",
    "start": "989000",
    "end": "994519"
  },
  {
    "text": "under the hood you might become vulnerable again so that's something to take into account the best fix is to",
    "start": "994519",
    "end": "1003079"
  },
  {
    "text": "avoid this ambiguity because that's a problem here we have ambiguity meaning that we have a URL that can mean two",
    "start": "1003079",
    "end": "1008519"
  },
  {
    "text": "different things and we're trying to reason about this untrusted Mal form data which causes us problem so what we",
    "start": "1008519",
    "end": "1015399"
  },
  {
    "text": "can do is basically take away the ambiguity we take the untrusted your we transform it into",
    "start": "1015399",
    "end": "1021560"
  },
  {
    "text": "something that is easy to understand either the google.com or the evil.com doesn't matter one or one of the other",
    "start": "1021560",
    "end": "1028240"
  },
  {
    "text": "one or the other and that's the URL will reason about that will verify and use to send requests and that's what they did",
    "start": "1028240",
    "end": "1033678"
  },
  {
    "text": "at drawbox as well and I'll show you the the more generic version in a second so at drawbox they well actually they",
    "start": "1033679",
    "end": "1039720"
  },
  {
    "text": "realize they shouldn't have accepted a host name in the first place because it's always going to be their host they host The Branding images on their uh CDN",
    "start": "1039720",
    "end": "1046798"
  },
  {
    "text": "so they said like okay let's hardc go the host and just get rid of this all together but they also construct a safe",
    "start": "1046799",
    "end": "1052160"
  },
  {
    "text": "URI and in essence what you do is you take the input you make it safe like unambiguous single uh single meaning URL",
    "start": "1052160",
    "end": "1059240"
  },
  {
    "text": "and then you reason about whether you want to trust it and you use it for the server side request all right so what",
    "start": "1059240",
    "end": "1064880"
  },
  {
    "text": "does that mean in a more generic term in a more generic term it means we get the input um on line let me check here line",
    "start": "1064880",
    "end": "1071039"
  },
  {
    "text": "one we get some input from the user we transform it into a single representation by parsing it with a",
    "start": "1071039",
    "end": "1076919"
  },
  {
    "text": "parser doesn't matter which part of the URL it understands as the host it sees one host and with that part URL on line",
    "start": "1076919",
    "end": "1085400"
  },
  {
    "text": "five we reconstruct in new URL we fix the scheme it's HPS nothing else so you",
    "start": "1085400",
    "end": "1090679"
  },
  {
    "text": "can't temper with file schemes or gopher or data or whatever no it's HPS we take",
    "start": "1090679",
    "end": "1095960"
  },
  {
    "text": "the host from this one part understanding that's going to be the host and that's going to be the pot and of course you can add uh query",
    "start": "1095960",
    "end": "1102200"
  },
  {
    "text": "parameters and whatever not um that's completely up to you and at that point you have nor more confusion that URL",
    "start": "1102200",
    "end": "1109000"
  },
  {
    "text": "with evil.com google.com has now been parsed into either evil.com or google.com one or the other and that's",
    "start": "1109000",
    "end": "1115919"
  },
  {
    "text": "your url that you're going to use from now on and now you make your assessment like do we want to trust",
    "start": "1115919",
    "end": "1121760"
  },
  {
    "text": "this if it's google.com sure if it's evil.com probably not um and then of",
    "start": "1121760",
    "end": "1126880"
  },
  {
    "text": "course once you've trusted it and stored it later you can send the service side request you verify this again but that",
    "start": "1126880",
    "end": "1132039"
  },
  {
    "text": "unambiguous representation never makes it uh anywhere else apart from this input it's handled and it's basically",
    "start": "1132039",
    "end": "1138840"
  },
  {
    "text": "covered for the rest of your codebase and that's essentially how you counter service at request fory the right way at",
    "start": "1138840",
    "end": "1145960"
  },
  {
    "text": "input whenever you accept your El input you should stop parse it reconstruct it and then",
    "start": "1145960",
    "end": "1152200"
  },
  {
    "text": "you move forward all right that's in essence the take a way to protect against server side request forgery",
    "start": "1152200",
    "end": "1157880"
  },
  {
    "text": "first of all realize that there's no easy way to do this with allow lists usually depends on the use case but typically you need to work with block",
    "start": "1157880",
    "end": "1164520"
  },
  {
    "text": "lists like blocking locally local addresses and local ranges and then",
    "start": "1164520",
    "end": "1169799"
  },
  {
    "text": "allow everything else and if you accept URLs as input you have to parse them once construct them in an unambiguous",
    "start": "1169799",
    "end": "1176840"
  },
  {
    "text": "representation and then reason about whether you want to trust that yes or",
    "start": "1176840",
    "end": "1182280"
  },
  {
    "text": "no all right one down let's talk about",
    "start": "1184320",
    "end": "1191480"
  },
  {
    "text": "something else let's talk about broken authentication broken authentication o API security top 10 number one uh two",
    "start": "1191480",
    "end": "1197880"
  },
  {
    "text": "sorry two we'll talk about one later uh two that's why I have numbers there to",
    "start": "1197880",
    "end": "1203400"
  },
  {
    "text": "keep me keep me straight number two um also for you to verify what I'm saying makes any sense uh otherwise this would",
    "start": "1203400",
    "end": "1210039"
  },
  {
    "text": "not be very very useful and for this story I want to go back to the smart scale and the smart scale had a bit of a",
    "start": "1210039",
    "end": "1216720"
  },
  {
    "text": "problem well it had a lot of problems U more problems than non problems but sure",
    "start": "1216720",
    "end": "1221760"
  },
  {
    "text": "um and on the API you had accounts like so many applications have accounts and the accounts of course people can forget",
    "start": "1221760",
    "end": "1227919"
  },
  {
    "text": "their passwords so you have to deal with that and they had a password reset functionality as almost every other application has as well and a password",
    "start": "1227919",
    "end": "1235200"
  },
  {
    "text": "reset uh you know how this works right you enter an email address and it sends you a URL with a secret code and the secret code allows you to reset the",
    "start": "1235200",
    "end": "1241559"
  },
  {
    "text": "password and the secret code was six digits which is sure um why not right",
    "start": "1241559",
    "end": "1248080"
  },
  {
    "text": "why not and somebody figured out to break that um which is not that Earth shocking what",
    "start": "1248080",
    "end": "1255240"
  },
  {
    "text": "I'm going to do here I'm not going to explain you how this works well I am going to explain you not on slides but I'm going to use a demo I have a demo to",
    "start": "1255240",
    "end": "1261919"
  },
  {
    "text": "show you how these seemingly silly problems can cause massive issues in applications and also how to fix this",
    "start": "1261919",
    "end": "1268919"
  },
  {
    "text": "and avoid these problems from happening all right and then of course after the demo I have some takeaways that we can",
    "start": "1268919",
    "end": "1274440"
  },
  {
    "text": "look at as well all right so in this demo I'm going to use a tool called burpsuite burpsuite",
    "start": "1274440",
    "end": "1281320"
  },
  {
    "text": "is a tool that's also used by pentesters um because it has a lot of nifty features um to inspect applications and",
    "start": "1281320",
    "end": "1288120"
  },
  {
    "text": "tempor with requests and so on as well and one of the features I'm going to use is the bur proxy and the proxy basically",
    "start": "1288120",
    "end": "1293919"
  },
  {
    "text": "gives you a an embedded browser this is a modified chromium and it's modified in a sense that it will send all its",
    "start": "1293919",
    "end": "1299279"
  },
  {
    "text": "traffic through burp so all the communication between the browser and the server will be visible to burp we can inspect it um and do whatever we",
    "start": "1299279",
    "end": "1306320"
  },
  {
    "text": "want with this and we're going to go to my application uh restor grade it's about restaurant reviews um I like great",
    "start": "1306320",
    "end": "1313159"
  },
  {
    "text": "food great restaurants and I like application security so I use this as a training example U for restur reviews it",
    "start": "1313159",
    "end": "1319120"
  },
  {
    "text": "doesn't matter much just where the name comes from might make sense for this specific demo what do we have here well",
    "start": "1319120",
    "end": "1324919"
  },
  {
    "text": "we have a very simple application we can log in with a username and a password and of course we have a password reset",
    "start": "1324919",
    "end": "1330840"
  },
  {
    "text": "feature as well so let me show you that first password reset you enter an email address and you click reset password and",
    "start": "1330840",
    "end": "1337480"
  },
  {
    "text": "it sends you a password reset link like you know how this works you've used this countless of times um in the past as",
    "start": "1337480",
    "end": "1344039"
  },
  {
    "text": "well so what does this mean this means if you go to our web mail that we have received a password reset link and this",
    "start": "1344039",
    "end": "1349440"
  },
  {
    "text": "link allows us to reset the password you can already see in the URL that instead of six digits I made it a little bit",
    "start": "1349440",
    "end": "1355559"
  },
  {
    "text": "easier to attack four digits the concept is the same it just takes like five minutes uh longer to attack six digits",
    "start": "1355559",
    "end": "1362000"
  },
  {
    "text": "you can see that this is probably not the most secure system uh that we're dealing with what does this mean this",
    "start": "1362000",
    "end": "1367480"
  },
  {
    "text": "means that if we if I want to reset your the password for your",
    "start": "1367480",
    "end": "1372880"
  },
  {
    "text": "account if I can guess your email address that would be step number one and then step number two two I can reset",
    "start": "1372880",
    "end": "1379600"
  },
  {
    "text": "a password for the email address and then guess the authorization code like the the reset code if I can guess that",
    "start": "1379600",
    "end": "1385080"
  },
  {
    "text": "one which there's not that many combinations so I can do that um then I can reset the password through your",
    "start": "1385080",
    "end": "1390240"
  },
  {
    "text": "account all right problem is I don't know your email address I don't even know your names for",
    "start": "1390240",
    "end": "1397080"
  },
  {
    "text": "most of you so that's problem number one uh but I can start guessing um with",
    "start": "1397080",
    "end": "1402120"
  },
  {
    "text": "email addresses but the thing is this is kind of invisible you need to know an email address before you can actually make this work and so on and that brings",
    "start": "1402120",
    "end": "1408039"
  },
  {
    "text": "us to another attack first and that's username enumeration a username enumeration is an attack where you can",
    "start": "1408039",
    "end": "1415120"
  },
  {
    "text": "guess which usernames or identify which usernames exist in the system and this is often discarded as like yeah it's not",
    "start": "1415120",
    "end": "1422559"
  },
  {
    "text": "that important like yes but you can also learn that from LinkedIn by looking at our company profile and so on yeah sure",
    "start": "1422559",
    "end": "1428240"
  },
  {
    "text": "but this is still something you want to um take a little bit more serious than it's usually uh taken in practice so",
    "start": "1428240",
    "end": "1433679"
  },
  {
    "text": "what does this mean this means we can log in into the application username password there's nothing here because",
    "start": "1433679",
    "end": "1439400"
  },
  {
    "text": "it's a demo application um and we can log out again and sure that's very exciting I I'm fully aware of that if",
    "start": "1439400",
    "end": "1446039"
  },
  {
    "text": "you log in with a wrong password it doesn't work login failed",
    "start": "1446039",
    "end": "1453200"
  },
  {
    "text": "okay sure if we log in with a long wrong username it also doesn't work this is by",
    "start": "1453200",
    "end": "1461080"
  },
  {
    "text": "design by the way this is how password based authentication is supposed to work um however behind the scenes what what's",
    "start": "1461080",
    "end": "1468120"
  },
  {
    "text": "going on now we can go to burp we can look at the history here you can see all the requests that we've made you can see",
    "start": "1468120",
    "end": "1473640"
  },
  {
    "text": "that we uh opened the password reset um thingy here and so on and so on that's for later but now you can see that we",
    "start": "1473640",
    "end": "1480360"
  },
  {
    "text": "have tried to here's a legitimate login this is a login with my very secure password test 1 123 4 and that has don't",
    "start": "1480360",
    "end": "1487480"
  },
  {
    "text": "steal that password please thank you and that has succeeded um because we get this authorization token this is from my",
    "start": "1487480",
    "end": "1492799"
  },
  {
    "text": "account not your account so this is not very exciting here is the attempt for logging in with a not secure password um",
    "start": "1492799",
    "end": "1500120"
  },
  {
    "text": "but maybe a bit better it's at least long um but that didn't work it says invalid email or password um and it says",
    "start": "1500120",
    "end": "1506760"
  },
  {
    "text": "here and when we use the wrong username It also says invalid email or password now some applications are give different",
    "start": "1506760",
    "end": "1513279"
  },
  {
    "text": "error messages they're like oh invalid password and invalid username that's a good tell if it says like hey invalid uh",
    "start": "1513279",
    "end": "1519320"
  },
  {
    "text": "password that means the username exists but the password is wrong uh in this case there's no way to differentiate between both at least not visibly",
    "start": "1519320",
    "end": "1527159"
  },
  {
    "text": "however if you look at what happen behind the scenes in this case um there was no user in this case the user was",
    "start": "1527159",
    "end": "1533840"
  },
  {
    "text": "correct because it's our user but the password was wrong and if you look at the response times here in the last",
    "start": "1533840",
    "end": "1539320"
  },
  {
    "text": "column you can see that U the last request wrong username returned immediately it's like oh no we don't",
    "start": "1539320",
    "end": "1544559"
  },
  {
    "text": "know who that is and the other one took almost a second to complete it's like oh no we don't know who that is actually",
    "start": "1544559",
    "end": "1552000"
  },
  {
    "text": "the password is wrong we do know who that is and that's that's a a problem here because it allows a timing attack",
    "start": "1552000",
    "end": "1559080"
  },
  {
    "text": "right correct username with wrong password takes a second wrong username takes two milliseconds like hm that that",
    "start": "1559080",
    "end": "1566520"
  },
  {
    "text": "that might be interesting um because it would allow us to um to attack the system now before we dive in let me open",
    "start": "1566520",
    "end": "1573440"
  },
  {
    "text": "up the code just to show you why we have that problem and the problem here is",
    "start": "1573440",
    "end": "1578679"
  },
  {
    "text": "because uh what's going on here don't look at my uh very secure database what what's going on here is",
    "start": "1578679",
    "end": "1585840"
  },
  {
    "text": "that this this code snippet here from line 4 43 to 53 um shows you what's going on we try to find the user if it",
    "start": "1585840",
    "end": "1592559"
  },
  {
    "text": "doesn't exist then we return an error message and if it does exist if we found a user then we have to verify the",
    "start": "1592559",
    "end": "1599039"
  },
  {
    "text": "password and verifying passwords um is kind of supposed to take a long time we're using bcrypt here a password",
    "start": "1599039",
    "end": "1604960"
  },
  {
    "text": "verification or password hashing function it's supposed to take a long time to prevent Brute Force attacks and",
    "start": "1604960",
    "end": "1610640"
  },
  {
    "text": "that long time is basically what's causing that 1 second versus 2 milliseconds response time it's the",
    "start": "1610640",
    "end": "1616399"
  },
  {
    "text": "application checking a password which is the the wrong password using a slow uh password hashing function as is a",
    "start": "1616399",
    "end": "1622480"
  },
  {
    "text": "security best practice so how do we attack that and this is really cool by the way in burp you can take we can take",
    "start": "1622480",
    "end": "1627919"
  },
  {
    "text": "the request with the let me check my make sure I don't do it wrong here um we take a request with",
    "start": "1627919",
    "end": "1639000"
  },
  {
    "text": "a valid username sure let's send this to the Intruder and the Intruder is a burp",
    "start": "1639000",
    "end": "1644200"
  },
  {
    "text": "tool with a very ominous name it's basically a tool that will allow you to Launch a Brute Force attack all right so",
    "start": "1644200",
    "end": "1649960"
  },
  {
    "text": "what do we want to do here we want to um verify if email addresses exist so what",
    "start": "1649960",
    "end": "1656640"
  },
  {
    "text": "we can do is we can make this a payload meaning that we can sub insert different values for this uh this parameter and",
    "start": "1656640",
    "end": "1662880"
  },
  {
    "text": "it's a simple list and we're going to load a list of email addresses this list of email addresses I have downloaded",
    "start": "1662880",
    "end": "1668880"
  },
  {
    "text": "that one from the dark web no seriously you can just download a list of 50 billion email addresses or something",
    "start": "1668880",
    "end": "1674440"
  },
  {
    "text": "like that and that is gives you a very good starting point to see whether they exist or not or if I'm attacking your",
    "start": "1674440",
    "end": "1679559"
  },
  {
    "text": "company I'm going to go on LinkedIn look up your company name and then click on people and there's like whoop here's a whole list and if I have one email",
    "start": "1679559",
    "end": "1685559"
  },
  {
    "text": "address like John uh whatever at company.com then I can guess what the",
    "start": "1685559",
    "end": "1690720"
  },
  {
    "text": "other email addresses are going to be well for John's it's probably John 123 as well but that's a different story um",
    "start": "1690720",
    "end": "1696600"
  },
  {
    "text": "so here's a list of email addresses that may or may not exist all right so what do what do we want to do well we want to",
    "start": "1696600",
    "end": "1702159"
  },
  {
    "text": "inject them here we're not going to urall in code because of course we don't need that uh for Json data and we're",
    "start": "1702159",
    "end": "1709000"
  },
  {
    "text": "going to configure burp here to send one request at a time otherwise the timing attack may get",
    "start": "1709000",
    "end": "1715559"
  },
  {
    "text": "a bit confusing so one request at a time and we can start the attack so let's see",
    "start": "1715559",
    "end": "1720720"
  },
  {
    "text": "um if let me quickly check that I didn't screw it up yes we're all good has happened",
    "start": "1720720",
    "end": "1728240"
  },
  {
    "text": "before so always check before I run the demo all right so we see here that the requests are going out and you can see",
    "start": "1728240",
    "end": "1736480"
  },
  {
    "text": "um response received here like 1 milliseconds very fast very fast and then here this one takes",
    "start": "1736480",
    "end": "1743440"
  },
  {
    "text": "831 milliseconds as in h it's also very unsurprising the email address is victim",
    "start": "1743440",
    "end": "1749519"
  },
  {
    "text": "virtual food.com kind of gives it away but sure um this basically tells you that the",
    "start": "1749519",
    "end": "1755120"
  },
  {
    "text": "application has tried to verify a password in the background so it basically means that we have found an",
    "start": "1755120",
    "end": "1760240"
  },
  {
    "text": "existing account we don't know the password of course but we have found an existing account and that might allow us",
    "start": "1760240",
    "end": "1765679"
  },
  {
    "text": "for the to launch the second step in the attack basically resetting the password for that account and taking control all",
    "start": "1765679",
    "end": "1771120"
  },
  {
    "text": "right first let's fix this problem um there's a simple fix for this maybe not the most performant fix but the simple",
    "start": "1771120",
    "end": "1777960"
  },
  {
    "text": "fix would be to always calculate a password hash because that way the system always calculates something that",
    "start": "1777960",
    "end": "1784880"
  },
  {
    "text": "um takes a long time to do and in this case even when the user doesn't exist we're going to check a fake password",
    "start": "1784880",
    "end": "1791039"
  },
  {
    "text": "just like check anything and it will take some time to calculate it will be like half a second one one second",
    "start": "1791039",
    "end": "1797360"
  },
  {
    "text": "something like that and that should solve it so if we try this attack again we can repeat here",
    "start": "1797360",
    "end": "1804960"
  },
  {
    "text": "that's now all of them will take a long time and we can no longer easily",
    "start": "1805039",
    "end": "1810399"
  },
  {
    "text": "differentiate uh between a use which user exists and which user doesn't exist all right of course um you should also",
    "start": "1810399",
    "end": "1816679"
  },
  {
    "text": "block Brute Force attempts on the login form and stuff like that that should be uh defenses built in as well they're a",
    "start": "1816679",
    "end": "1822640"
  },
  {
    "text": "little bit more complicated but they can definitely get you there but this way the timing attack is at least gone and there's no more username enumeration all",
    "start": "1822640",
    "end": "1829240"
  },
  {
    "text": "right so that's good we have solved that problem on to the",
    "start": "1829240",
    "end": "1835080"
  },
  {
    "text": "next what are we going to do next well we want to log in as victim. virtual",
    "start": "1835080",
    "end": "1840440"
  },
  {
    "text": "foodi.com here but we don't know the password so we have to reset the password so what can we do oh we forgot our password we now know who ex who who",
    "start": "1840440",
    "end": "1848360"
  },
  {
    "text": "um which user exists victim at virtual food.com and we can reset the password and it's going to send the password",
    "start": "1848360",
    "end": "1854120"
  },
  {
    "text": "reset mail to that specific user all right that's how this works in",
    "start": "1854120",
    "end": "1861559"
  },
  {
    "text": "practice we can't access that user mailbox otherwise all of this is kind of a mood Point uh so we can't access uh",
    "start": "1861559",
    "end": "1867519"
  },
  {
    "text": "you're you guys are the victims here we can't access or I can't access your emails so I don't have the reset code to",
    "start": "1867519",
    "end": "1872600"
  },
  {
    "text": "do but we can guess what that reset code is supposed to be so let's see if we can do that uh we can go back here we um",
    "start": "1872600",
    "end": "1880200"
  },
  {
    "text": "reset our password did we do it before no we haven't um so we have to do",
    "start": "1880200",
    "end": "1886679"
  },
  {
    "text": "it um as a normal user first my",
    "start": "1886679",
    "end": "1892600"
  },
  {
    "text": "bad so I forgot my password reset password I can check my web mail there's",
    "start": "1892600",
    "end": "1898679"
  },
  {
    "text": "a password code here we can look at that set a new password Al also not a secure",
    "start": "1898679",
    "end": "1904600"
  },
  {
    "text": "password just in case you're wondering and we have reset our password",
    "start": "1904600",
    "end": "1910480"
  },
  {
    "text": "so we can now go back to the application there's a link here um we can log in as this one that fails obviously but Al now",
    "start": "1910480",
    "end": "1920639"
  },
  {
    "text": "works awesome this is very very uninteresting I'm fully aware of",
    "start": "1920639",
    "end": "1927080"
  },
  {
    "text": "that here's the call to reset a password right so that this was an API call it's a post request it's contains a code like",
    "start": "1927120",
    "end": "1934639"
  },
  {
    "text": "the four-digit code and a new password the four-digit code is linked to this account in the back end so now it resets",
    "start": "1934639",
    "end": "1939840"
  },
  {
    "text": "the password for Philip at restor grade.com so this is the request that we would like to tamper with all right so",
    "start": "1939840",
    "end": "1946200"
  },
  {
    "text": "we sent this again to the intruder what are we going to do well we don't know what the code is um so we're going",
    "start": "1946200",
    "end": "1951679"
  },
  {
    "text": "to add a payload for the code we password Oslo that's easy to remember so let's keep that one that's perfectly",
    "start": "1951679",
    "end": "1957440"
  },
  {
    "text": "fine and now we don't want a list well we could use a list but it's easier to just tell burp to use numbers because",
    "start": "1957440",
    "end": "1962960"
  },
  {
    "text": "it's going to be like numbers so that's very easy um let's do it sequential let's start from one step one to 999 you",
    "start": "1962960",
    "end": "1972880"
  },
  {
    "text": "know how numbers work right what's going on there we go and it's a four-digit",
    "start": "1972880",
    "end": "1978480"
  },
  {
    "text": "code so we set it to four and now it does like 00001 until 9999 and one of",
    "start": "1978480",
    "end": "1984039"
  },
  {
    "text": "these is probably going to be the right one all right so good good good you're all encoding let's not um what else well",
    "start": "1984039",
    "end": "1991799"
  },
  {
    "text": "we can now also let me go back here it says new password set for something",
    "start": "1991799",
    "end": "1997720"
  },
  {
    "text": "something so if you find that string in one of the responses we know we have been successful so let's set up response",
    "start": "1997720",
    "end": "2004440"
  },
  {
    "text": "checking here um a simple grap should do it let's clear the list and add a new",
    "start": "2004440",
    "end": "2010200"
  },
  {
    "text": "item to look for new password set all right resource pool we're going to do 10",
    "start": "2010200",
    "end": "2015480"
  },
  {
    "text": "at a time this time uh because that goes a bit faster and we will start the attack all right let it run for a",
    "start": "2015480",
    "end": "2024200"
  },
  {
    "text": "while always very exciting there we go",
    "start": "2025320",
    "end": "2032279"
  },
  {
    "text": "um um so here's a bunch of attempts you can see like 001 and so on and so on and",
    "start": "2032360",
    "end": "2037799"
  },
  {
    "text": "if you sort on this column there's one that has succeeded and if you look at the response it says like new password",
    "start": "2037799",
    "end": "2043399"
  },
  {
    "text": "set for valer victim virtual foodie.com so apparently the code was 6546 there we go um so what does this",
    "start": "2043399",
    "end": "2051079"
  },
  {
    "text": "mean this means that the password for Valerie is now Oslo so we can go here we can go like I'm victim at virtual",
    "start": "2051079",
    "end": "2057480"
  },
  {
    "text": "foodi.com the password is Oslo and we log in and we are now logged in as",
    "start": "2057480",
    "end": "2065839"
  },
  {
    "text": "fery go from restorate to the the smart scale that's the vulnerability at the Smart scale whoops six digits so you can",
    "start": "2065839",
    "end": "2071520"
  },
  {
    "text": "imagine to modify the attack you set like number of digits to six you click Start and you wait like a",
    "start": "2071520",
    "end": "2078398"
  },
  {
    "text": "few minutes longer and you're done that's in reality how these attacks work in practice now this is a very very",
    "start": "2078399",
    "end": "2085800"
  },
  {
    "text": "stupid problem to have no offense to the smart scale developers but it's a stupid problem to have first of all brute",
    "start": "2085800",
    "end": "2092720"
  },
  {
    "text": "forcing on password reset tokens is probably not something you want to allow and you can be like yeah come on who",
    "start": "2092720",
    "end": "2098760"
  },
  {
    "text": "does that well uh it happens all over the place uh Facebook had this a couple of years ago as a case they had a a beta",
    "start": "2098760",
    "end": "2105480"
  },
  {
    "text": "version of a new version of I think some Instagram app and the beta version did not enforce rate limiting on the",
    "start": "2105480",
    "end": "2111880"
  },
  {
    "text": "password reset endpoint but it used live production account so you could reset some of these account through that Beta",
    "start": "2111880",
    "end": "2117320"
  },
  {
    "text": "app and take control of that whoops um so this happens in quite a few places so brute forcing there probably not",
    "start": "2117320",
    "end": "2122720"
  },
  {
    "text": "something you want to allow four or six digigit codes not great either if you want to",
    "start": "2122720",
    "end": "2128640"
  },
  {
    "text": "use like random codes use long strings like unpredictable strings that's already a bit better it's still not",
    "start": "2128640",
    "end": "2135240"
  },
  {
    "text": "great though because you still allow somebody to temper with that why it's a URL parameter it's a parameter in the in",
    "start": "2135240",
    "end": "2141839"
  },
  {
    "text": "the URL or in the the post request in the body and an attacker can easily exchange that value for something else",
    "start": "2141839",
    "end": "2149000"
  },
  {
    "text": "and that's something we can actually take away what if we can include a value that's not just a string or a digit",
    "start": "2149000",
    "end": "2156240"
  },
  {
    "text": "string or whatever but we add maybe a signed object in there like an object",
    "start": "2156240",
    "end": "2161880"
  },
  {
    "text": "that represents a token and that token is for resetting the the email for this specific user if it's signed means that",
    "start": "2161880",
    "end": "2167960"
  },
  {
    "text": "there's data Integrity as well means that if the attacker would like to temper with that the signature",
    "start": "2167960",
    "end": "2173280"
  },
  {
    "text": "verification mechanism is going to fail and we reject that up front without even thinking about that and that's what I",
    "start": "2173280",
    "end": "2179119"
  },
  {
    "text": "want to show you next um we're going to update our",
    "start": "2179119",
    "end": "2184720"
  },
  {
    "text": "application so we're going to comment this line the we use these functions from the codes insecure file and we're",
    "start": "2184720",
    "end": "2190400"
  },
  {
    "text": "going to use the codes secure file um so let let me show you what that means here the codes insecure generated basically a",
    "start": "2190400",
    "end": "2198000"
  },
  {
    "text": "random number using mt. random which is also really really not good uh because these are predictable numbers uh once",
    "start": "2198000",
    "end": "2204720"
  },
  {
    "text": "you figure out a seed the whole uh sequence is predictable so that's also already a very bad start U so this this",
    "start": "2204720",
    "end": "2211480"
  },
  {
    "text": "is just crap don't don't use that this one is a lot better because here we're issuing a Json web token and inside the",
    "start": "2211480",
    "end": "2218000"
  },
  {
    "text": "Json web token it's going to be a signed token inside the token we put the email address of the user and a unique ID and",
    "start": "2218000",
    "end": "2223880"
  },
  {
    "text": "that's the data we will use to reset a password and now there is no way the attacker can temper with that I'm going",
    "start": "2223880",
    "end": "2229400"
  },
  {
    "text": "to show you that um so we use this we saved it good so let's go back to our",
    "start": "2229400",
    "end": "2234520"
  },
  {
    "text": "application here forgot your password reset password and let's go to the web mail again you can see that the URL is",
    "start": "2234520",
    "end": "2241599"
  },
  {
    "text": "now a lot longer and that there's a code in there and whenever you see a string starting with EJ",
    "start": "2241599",
    "end": "2248319"
  },
  {
    "text": "right the First characters of the blue of the code parameter EJ is basic4 encoding for Open Bracket means if you",
    "start": "2248319",
    "end": "2254240"
  },
  {
    "text": "throw this in a basic4 decoder it's probably going to be a Json object notation uh whatever and then a jot has",
    "start": "2254240",
    "end": "2261680"
  },
  {
    "text": "two of these strings a header and a payload and we can actually copy this value and drop it in a",
    "start": "2261680",
    "end": "2266760"
  },
  {
    "text": "debugger and somebody in my workshop told me that I should not use j. but j. Ms so let's do",
    "start": "2266760",
    "end": "2273520"
  },
  {
    "text": "that and we paste it in here and you can see it decodes this so the red part is a header the blue part is a payload the",
    "start": "2273520",
    "end": "2280520"
  },
  {
    "text": "the actual data and the green part is a signature and what it shows us here is that inside that token we have let me",
    "start": "2280520",
    "end": "2287119"
  },
  {
    "text": "make this a bit bigger inside that token we have an email address for the account you're trying to reset we have an issued at timestamp um which is now um and we",
    "start": "2287119",
    "end": "2295160"
  },
  {
    "text": "have an expiration time stamp which is in 1 hour all right and what we're basically doing here is um we are",
    "start": "2295160",
    "end": "2301160"
  },
  {
    "text": "putting the email we're no longer relying on random tokens we're putting the actual email address in the token so",
    "start": "2301160",
    "end": "2307040"
  },
  {
    "text": "if the attacker wants to well we can use this as a user so we can actually reset",
    "start": "2307040",
    "end": "2312560"
  },
  {
    "text": "this haha don't worry I reset the demo afterwards so I don't have to remember",
    "start": "2312560",
    "end": "2317920"
  },
  {
    "text": "the last crappy password I used um but if we look at this and we go back to the",
    "start": "2317920",
    "end": "2323240"
  },
  {
    "text": "Bur proxy we can now see that the reset password call includes this Json web",
    "start": "2323240",
    "end": "2330000"
  },
  {
    "text": "token and inside the Json web token is the email address so if you want to reset the password for victim virtual",
    "start": "2330000",
    "end": "2335319"
  },
  {
    "text": "food.com we would have to change the the the value inside the job token but that would make the signature invalid and if",
    "start": "2335319",
    "end": "2341400"
  },
  {
    "text": "the signature becomes invalid the the back end doesn't accept it so what we've done with adding Integrity to these",
    "start": "2341400",
    "end": "2347520"
  },
  {
    "text": "parameters is preventing the opportunity the attacker doesn't even have the way to temper with this anymore because that",
    "start": "2347520",
    "end": "2353040"
  },
  {
    "text": "is entirely taken away the only thing they can do is take like another complete valid jot and paste it",
    "start": "2353040",
    "end": "2359520"
  },
  {
    "text": "in place but they should not be able to obtain that you can't guess that you can't reforce that so that's basically",
    "start": "2359520",
    "end": "2365400"
  },
  {
    "text": "um impossible unless you have access to to the email address of the user all",
    "start": "2365400",
    "end": "2370480"
  },
  {
    "text": "right so that is how you can fix this in practice and that's a best",
    "start": "2370480",
    "end": "2376960"
  },
  {
    "text": "practice good back to our slides some",
    "start": "2377079",
    "end": "2385359"
  },
  {
    "text": "takeaways do not buy a smart scale seriously it's not in the slides but",
    "start": "2385359",
    "end": "2390920"
  },
  {
    "text": "it's it's a very important takeaway apps like specific takes takeaways avoid leaking information right API guys very",
    "start": "2390920",
    "end": "2398040"
  },
  {
    "text": "often leak information that shouldn't be there um it's timing attacks are one thing like error messages are another um",
    "start": "2398040",
    "end": "2404520"
  },
  {
    "text": "make sure you don't leak that information that's something you can take into account you can actually look at and you can approach and there's a",
    "start": "2404520",
    "end": "2411040"
  },
  {
    "text": "lot more advanced timing attacks as well so this is definitely something you uh want to take into account for very",
    "start": "2411040",
    "end": "2416920"
  },
  {
    "text": "sensitive operations that might result in the attacker learning uh binary information like Boolean information",
    "start": "2416920",
    "end": "2422760"
  },
  {
    "text": "does it exist yes or no that is a very very useful feature and you only need one data point for that the response",
    "start": "2422760",
    "end": "2428319"
  },
  {
    "text": "time Implement rate limiting very very important there's actually like an O API security 10 item about um not having",
    "start": "2428319",
    "end": "2435520"
  },
  {
    "text": "rate limiting on your resources this is absolutely critical on a variety of endpoints especially on endpoints like",
    "start": "2435520",
    "end": "2443000"
  },
  {
    "text": "password reset and authentication you definitely want to take that into account all right however be aware rate",
    "start": "2443000",
    "end": "2449280"
  },
  {
    "text": "limiting is kind of a catam mouse game as in you can build like a super smart rate limiting policy but an attacker",
    "start": "2449280",
    "end": "2455520"
  },
  {
    "text": "using like 15,000 different hosts all over the world might still be able to bypass that one way or another so rate",
    "start": "2455520",
    "end": "2461400"
  },
  {
    "text": "limiting is good as an line of defense as a layer but it's not the only defense",
    "start": "2461400",
    "end": "2467119"
  },
  {
    "text": "um that you should have in place and now finally mitigate guessing attacks think",
    "start": "2467119",
    "end": "2472319"
  },
  {
    "text": "about integrity protection of your data this one is really important I I'll Poe with that for you",
    "start": "2472319",
    "end": "2479000"
  },
  {
    "text": "if you want to this one is really important because all too often we we just drop parameters in URLs or left and",
    "start": "2479000",
    "end": "2486079"
  },
  {
    "text": "right and we allow an attacker to temper with that we actually do thread modeling and think like yeah the attacker can",
    "start": "2486079",
    "end": "2491800"
  },
  {
    "text": "temper with this data so how can we ensure that this does not result in bad well take away the",
    "start": "2491800",
    "end": "2496880"
  },
  {
    "text": "tempering that solves the problem altoe like sign this using anything you want",
    "start": "2496880",
    "end": "2502359"
  },
  {
    "text": "but Json web tokens are a very easy way to represent claims like this there's a gazillion libraries for that and there's",
    "start": "2502359",
    "end": "2507800"
  },
  {
    "text": "a few best practices to take into account that stuff for a different time but it definitely makes things a lot a",
    "start": "2507800",
    "end": "2514000"
  },
  {
    "text": "lot easier all right good",
    "start": "2514000",
    "end": "2519240"
  },
  {
    "text": "good number four by the way unrestricted resource consumption that is uh",
    "start": "2520640",
    "end": "2525800"
  },
  {
    "text": "translates to not having rate limiting in place I haven't highlighted it but I've covered",
    "start": "2525800",
    "end": "2531680"
  },
  {
    "text": "it just in case somebody's keeping count of uh how many things I have talked about let's talk",
    "start": "2531680",
    "end": "2538400"
  },
  {
    "text": "about authorization authorization is kind of important oh API security to number one and number five so um",
    "start": "2538400",
    "end": "2545680"
  },
  {
    "text": "authorization goes wrong in a very variety of ways and unsurprisingly authorization went wrong for the scale",
    "start": "2545680",
    "end": "2551920"
  },
  {
    "text": "application so what what happened here well somebody looking at this figured out that they could add family members",
    "start": "2551920",
    "end": "2558200"
  },
  {
    "text": "to other people's families which is like not great and of",
    "start": "2558200",
    "end": "2564319"
  },
  {
    "text": "course that was a stepping stone for something else so authorization is I'm I'm making fun of the scale here um if I",
    "start": "2564319",
    "end": "2570680"
  },
  {
    "text": "ever run into those developers I'm going to get a beating probably behind the talk so uh yeah whatever I'll take that",
    "start": "2570680",
    "end": "2576440"
  },
  {
    "text": "risk but um the scale is one thing but it's",
    "start": "2576440",
    "end": "2581839"
  },
  {
    "text": "number one in the API security top 10 so it's not just a scale application it goes wrong everywhere this is a massive",
    "start": "2581839",
    "end": "2588079"
  },
  {
    "text": "problem so why is it so hard to get authorization right it doesn't seem that hard right how hard can it be to not add",
    "start": "2588079",
    "end": "2595000"
  },
  {
    "text": "family members to somebody else's family well let's let's look at some examples here's a snippet of code of adding a",
    "start": "2595000",
    "end": "2601559"
  },
  {
    "text": "member to a family this is very non this is Powerpoint code but whatever um and",
    "start": "2601559",
    "end": "2606920"
  },
  {
    "text": "we check if the user has a role family owner right checking a role before allowing that is a good way to enforce",
    "start": "2606920",
    "end": "2613160"
  },
  {
    "text": "things like function level access control that's might might be something you want to implement however code",
    "start": "2613160",
    "end": "2618920"
  },
  {
    "text": "rarely looks this simple it's very like oh yeah has rooll who forgot about that no in reality it's going to be a little",
    "start": "2618920",
    "end": "2625400"
  },
  {
    "text": "bit more complex because you now you you you'll have different roles with different permissions you'll have a role family owner a role parent a role admin",
    "start": "2625400",
    "end": "2632440"
  },
  {
    "text": "and God knows what else you can think of role wise and that means you have your from a problem that's known as Ro",
    "start": "2632440",
    "end": "2638960"
  },
  {
    "text": "explosion like a lot of different roles with similar but different configurations and this policy is very",
    "start": "2638960",
    "end": "2644680"
  },
  {
    "text": "hard to maintain also having roles hardcoded in code that's what you see whenever whenever somebody talks about",
    "start": "2644680",
    "end": "2651280"
  },
  {
    "text": "arbac you see this annotation based or whatever and this also means if you add a new role you get to have the fun",
    "start": "2651280",
    "end": "2657000"
  },
  {
    "text": "morning of going through all your endpoints and deciding if you have to type or has roll my new role which is",
    "start": "2657000",
    "end": "2663480"
  },
  {
    "text": "and then you have to deploy the application it's not really a good way to handle authorization so while rback Ro based Access Control",
    "start": "2663480",
    "end": "2670480"
  },
  {
    "text": "may have its uses be careful with that that's what I'm trying to say rback is probably a little bit too rigid for what",
    "start": "2670480",
    "end": "2677040"
  },
  {
    "text": "you're trying to build in practice how can we fix that well we can add some abstraction in between we have the role",
    "start": "2677040",
    "end": "2683000"
  },
  {
    "text": "we have the endpoint and what we need in the middle is permissions and by using permissions we couple a permission to an",
    "start": "2683000",
    "end": "2689000"
  },
  {
    "text": "endpoint or a set of endpoints and then we can couple the permission to a user or to a roles of a user and now we don't",
    "start": "2689000",
    "end": "2695520"
  },
  {
    "text": "have to update our code every uh two seconds that we have to find a new role to add and this makes things a lot",
    "start": "2695520",
    "end": "2701520"
  },
  {
    "text": "better A lot easier to understand a lot easier to audit as well looking at endpoints like this you can easily map",
    "start": "2701520",
    "end": "2708000"
  },
  {
    "text": "the endpoint to a permission and say like H that seems to make sense versus with rols you have to know about all of",
    "start": "2708000",
    "end": "2713160"
  },
  {
    "text": "the rules and then decide if this makes sense yes or no so that's a very good way to solve authorization all right",
    "start": "2713160",
    "end": "2721200"
  },
  {
    "text": "seem simple on PowerPoint goes wrong or applications get this wrong quite often so that",
    "start": "2721200",
    "end": "2728040"
  },
  {
    "text": "wasn't that hard right I mean come on we can fix authorization in like an hour on Monday morning um something like",
    "start": "2728040",
    "end": "2734640"
  },
  {
    "text": "that however we only covered so far number five broken function level access",
    "start": "2734640",
    "end": "2740280"
  },
  {
    "text": "control number one is a bit more critical and number one is broken object level access control and that's",
    "start": "2740280",
    "end": "2746400"
  },
  {
    "text": "something that is often overlooked or often goes wrong uh in significant ways so what we've done now is we check if",
    "start": "2746400",
    "end": "2752800"
  },
  {
    "text": "the user has permission to add a family member because they're maybe the family owner right so if I have a family I am",
    "start": "2752800",
    "end": "2758680"
  },
  {
    "text": "the family owner and I can add members to my family good that's how we do this with post request create family member",
    "start": "2758680",
    "end": "2764680"
  },
  {
    "text": "and so on and so on awesome now if I want to add a member to your",
    "start": "2764680",
    "end": "2770000"
  },
  {
    "text": "family I'm going to use burp for a very sophisticated attack I'm going to swap out my family ID one for your family ID",
    "start": "2770000",
    "end": "2777800"
  },
  {
    "text": "seven and I got to send a request burp has a tool for that repeater you can modify the request click Send and the",
    "start": "2777800",
    "end": "2784520"
  },
  {
    "text": "application is going to check this like hold on authorization are you do you have a permission at",
    "start": "2784520",
    "end": "2790119"
  },
  {
    "text": "family member like oh yeah of course Philip is a family owner of course he has bam and we add a family member to your family and now you have an extra",
    "start": "2790119",
    "end": "2797559"
  },
  {
    "text": "family member which is usually a happy occasion in this case very much not so this is not something that's supposed to",
    "start": "2797559",
    "end": "2803400"
  },
  {
    "text": "happen and that is called broken object level Access Control we never checked the object level access the family level",
    "start": "2803400",
    "end": "2810880"
  },
  {
    "text": "access like is this user allowed to access this particular family and this goes wrong in a lot of cases for example",
    "start": "2810880",
    "end": "2818200"
  },
  {
    "text": "um a s with multiple tenants like multi- tency you typically have a header with like a tenant ID or a customer name or",
    "start": "2818200",
    "end": "2825280"
  },
  {
    "text": "it's somewhere in the URL or something like that forgetting to enforce that like limit the user to their own tenant",
    "start": "2825280",
    "end": "2831680"
  },
  {
    "text": "can result in similar problems like create admin user if I can do it for my tenant and I can do it for your tenant",
    "start": "2831680",
    "end": "2837720"
  },
  {
    "text": "two different cases that one is good one is very very bad all right so let's fix",
    "start": "2837720",
    "end": "2843079"
  },
  {
    "text": "this come on we're we're developers we can we can solve this problem right and that's where things get tricky",
    "start": "2843079",
    "end": "2849280"
  },
  {
    "text": "because to solve this problem you have to implement fine grained authorization checks you'll end up with code like this",
    "start": "2849280",
    "end": "2856079"
  },
  {
    "text": "um which Is Not Great by the way but um we have a permission check just like before and then we have to do an object",
    "start": "2856079",
    "end": "2861520"
  },
  {
    "text": "level permission check and you can see this online four and you can see this is super ugly code um and it's like",
    "start": "2861520",
    "end": "2866559"
  },
  {
    "text": "basically if the user is a family owner or a parent then we have to apply an additional check and they have to be a",
    "start": "2866559",
    "end": "2872400"
  },
  {
    "text": "member of this family otherwise uh we should not allow that all right so that",
    "start": "2872400",
    "end": "2877440"
  },
  {
    "text": "um I'm not saying this is recommended code uh the giveaway is that smiley faces are not a good way for handling",
    "start": "2877440",
    "end": "2883160"
  },
  {
    "text": "exceptions U Ju Just in case you're wondering um but this is not good code in in any aspect like all the thing code",
    "start": "2883160",
    "end": "2890160"
  },
  {
    "text": "like this is a mess right if you if I come in and you're you're asking me to help you uh to assess whether your",
    "start": "2890160",
    "end": "2895960"
  },
  {
    "text": "application is secure and we have to review this whenever you encounter rules like this it's going to be a nightmare",
    "start": "2895960",
    "end": "2901880"
  },
  {
    "text": "and we're typically in a room with a couple of developers and I'm asking like how do you check this how do you enforce that this document can only be read by",
    "start": "2901880",
    "end": "2908160"
  },
  {
    "text": "someone with permissions and all of a sudden everybody looks at one guy because there's all usually one guy writing authorization logic and you see",
    "start": "2908160",
    "end": "2914359"
  },
  {
    "text": "the guy thinking like yeah and sometimes it works out sometimes they're like oh yeah um we actually should be stricter",
    "start": "2914359",
    "end": "2920440"
  },
  {
    "text": "here and sometimes it actually happens that they start writing code on the fly in the meeting where we're discussing",
    "start": "2920440",
    "end": "2926960"
  },
  {
    "text": "security of system like oh yeah let me just fix it in code real quick and they start writing at additional rules it's like no no no no you can't do this well",
    "start": "2926960",
    "end": "2934760"
  },
  {
    "text": "you can but it's not going to work out the reason this doesn't work out is first of all it's going to be a mess",
    "start": "2934760",
    "end": "2941119"
  },
  {
    "text": "every endpoint will have like a gazillion of these checks it's not going to be pretty second thing is the moment",
    "start": "2941119",
    "end": "2947160"
  },
  {
    "text": "you add a new roller a new um whatever you'll have to go over the code again and be like try to understand what you",
    "start": "2947160",
    "end": "2953599"
  },
  {
    "text": "wrote like two years ago and whether it makes sense and try to figure out if you should add something there yes or no and",
    "start": "2953599",
    "end": "2960119"
  },
  {
    "text": "most importantly a policy like this is impossible to audit and if you have a policy like authorization that's about",
    "start": "2960119",
    "end": "2966079"
  },
  {
    "text": "security auditability goes hand in hand with security because if you can't audit it",
    "start": "2966079",
    "end": "2971280"
  },
  {
    "text": "if you can't assess whether your policy is secure then you don't know if it's secure so auditability is absolutely",
    "start": "2971280",
    "end": "2978880"
  },
  {
    "text": "crucial and you can ask the people in my workshop I keep hammering on about that auditability is absolutely crucial all",
    "start": "2978880",
    "end": "2985440"
  },
  {
    "text": "right so how can we fix this well that's the fun thing about doing",
    "start": "2985440",
    "end": "2991480"
  },
  {
    "text": "talks like this I can tell you how to fix things well you should pull out the authorization logic from your code this",
    "start": "2991480",
    "end": "2998400"
  },
  {
    "text": "is not maintainable this is not auditable this is crap no",
    "start": "2998400",
    "end": "3004559"
  },
  {
    "text": "offense when you bring me into your company I'll use more diplomatic",
    "start": "3004559",
    "end": "3009920"
  },
  {
    "text": "language yeah this this can probably be improved would be something uh so what what do you want to do here is you want",
    "start": "3010880",
    "end": "3016680"
  },
  {
    "text": "to pull this out what you want to do is you want to use a policy engine a policy engine is going to solve all your",
    "start": "3016680",
    "end": "3022040"
  },
  {
    "text": "problems especially if you talk to vendors offering you policy engines they will they will promise the r to you and I me you start using it it's like me but",
    "start": "3022040",
    "end": "3028799"
  },
  {
    "text": "in this case you don't need to buy stuff you can just write your own policy engine meaning in my case in a smart",
    "start": "3028799",
    "end": "3036160"
  },
  {
    "text": "scale case you write one class with a couple of static methods where you check permissions and what you do there is you",
    "start": "3036160",
    "end": "3042559"
  },
  {
    "text": "basically pull out all of the nasty logic and you ask family data. ad well no sorry policy. check permission line",
    "start": "3042559",
    "end": "3048760"
  },
  {
    "text": "three here we check permission add family member we provide the family we provide the user and that policy is",
    "start": "3048760",
    "end": "3055319"
  },
  {
    "text": "going to give us yes or no true or false and the policy will go through the checks like is the user an admin sure",
    "start": "3055319",
    "end": "3061240"
  },
  {
    "text": "allowed is the user um the owner of this family then yeah that's allowed is the user a member of this family with the",
    "start": "3061240",
    "end": "3067599"
  },
  {
    "text": "right permissions then yeah that's allowed otherwise no and that's essentially how you can solve this and",
    "start": "3067599",
    "end": "3073359"
  },
  {
    "text": "this is a very very simple way very cheap way of externalizing your authorization logic in a single file",
    "start": "3073359",
    "end": "3079680"
  },
  {
    "text": "which gives you a large amount of benefits what it gives you is auditability you can audit your endpoint",
    "start": "3079680",
    "end": "3086359"
  },
  {
    "text": "code you can even have like linting rules or codee scanning rules that say every endpoint here has to call the",
    "start": "3086359",
    "end": "3092520"
  },
  {
    "text": "policy check you can never forget to implement authorization good secondly",
    "start": "3092520",
    "end": "3098079"
  },
  {
    "text": "you can audit your actual authorization policy and see whether it makes sense you can unit test your authorization",
    "start": "3098079",
    "end": "3104640"
  },
  {
    "text": "policy you have methods here you can write unit tests to see that the authorization policy actually enforces",
    "start": "3104640",
    "end": "3109960"
  },
  {
    "text": "what you think it does which again improves auditability and since all the",
    "start": "3109960",
    "end": "3115040"
  },
  {
    "text": "authorization logic is now sent ized in a single file or a set of files you can also prevent unauthorized updates you",
    "start": "3115040",
    "end": "3123119"
  },
  {
    "text": "can prevent somebody in a PR from changing some of the authorization logic because that happens quite often like something doesn't work and somebody",
    "start": "3123119",
    "end": "3129520"
  },
  {
    "text": "starts messing around and maybe the AI uh tool in the IDE says like yeah maybe change this to that and um somebody does",
    "start": "3129520",
    "end": "3136400"
  },
  {
    "text": "and oh look it works and they commit and off you go but they may have change the authorization log I've seen this happen",
    "start": "3136400",
    "end": "3142440"
  },
  {
    "text": "in practice like a PR removing the check limiting a user to a specific",
    "start": "3142440",
    "end": "3147760"
  },
  {
    "text": "tenant wasn't suggested by AI was just a mistake but it removed that and it created a broken object level",
    "start": "3147760",
    "end": "3155440"
  },
  {
    "text": "authorization problem so having this centralized gives you a lot more control and allows you to basically address",
    "start": "3155440",
    "end": "3160839"
  },
  {
    "text": "these issues now centralization has a second benefit",
    "start": "3160839",
    "end": "3168119"
  },
  {
    "text": "you can do an encode that's the cheap version the not the simple version which is enough for a lot of applications but",
    "start": "3168119",
    "end": "3174760"
  },
  {
    "text": "sometimes you're building something super complex like a very complicated authorization policy something that you",
    "start": "3174760",
    "end": "3180240"
  },
  {
    "text": "can't easily check in code because it's it's just a behemoth of authorization and that's where you want to involve",
    "start": "3180240",
    "end": "3185880"
  },
  {
    "text": "like an additional service right you Ty typically have some companies have this internally like in in Banks you often",
    "start": "3185880",
    "end": "3192119"
  },
  {
    "text": "find like a an existing authorization policy engine that you want to call and ask whether something is allowed that's",
    "start": "3192119",
    "end": "3197839"
  },
  {
    "text": "one use case but you can also deploy something yourself with a tool like open policy agent an open policy agent allows",
    "start": "3197839",
    "end": "3203799"
  },
  {
    "text": "you to express an authorization policy and then deploy that policy alongside your API as an agent based service where",
    "start": "3203799",
    "end": "3209799"
  },
  {
    "text": "you can ask authorization decisions you provided all the content and it says like yeah yes or no or maybe",
    "start": "3209799",
    "end": "3216280"
  },
  {
    "text": "conditionally and so on and so on and you can plug in other things here as well maybe you have an internal authorization service and you plug it in",
    "start": "3216280",
    "end": "3222000"
  },
  {
    "text": "instead of open policy agent or if you want to use open fga you want to plug that one in in as instead of a policy",
    "start": "3222000",
    "end": "3228319"
  },
  {
    "text": "agent and it can definitely help you U make authorization decisions as well but that externalization process here",
    "start": "3228319",
    "end": "3233760"
  },
  {
    "text": "applies as well now it's not in code but it's a SE separate service that you want to uh move towards all right so you want",
    "start": "3233760",
    "end": "3240520"
  },
  {
    "text": "to centralize complex authorization logic that's the takeaway here um it should not be scattered throughout the",
    "start": "3240520",
    "end": "3245799"
  },
  {
    "text": "code but it should be centralized in a location where you can control it review it test it and um prevent unauthorized",
    "start": "3245799",
    "end": "3252280"
  },
  {
    "text": "updates you want to empower auditability as well I said I was going to say that this is important I'm going to repeat it",
    "start": "3252280",
    "end": "3258280"
  },
  {
    "text": "auditability goes hand inand with security if you can't audit this you cannot guarantee that it's secure keep",
    "start": "3258280",
    "end": "3265079"
  },
  {
    "text": "that in mind do your own applications for auditability if you don't understand the code from a couple of months or",
    "start": "3265079",
    "end": "3271160"
  },
  {
    "text": "years ago then guess what nobody else will either and there might be potential vulnerabilities",
    "start": "3271160",
    "end": "3277359"
  },
  {
    "text": "there good that brings us to the last item on the list broken",
    "start": "3277359",
    "end": "3284000"
  },
  {
    "text": "object property level authorization another authorization problem but now we added a letter to the abbreviation so",
    "start": "3284000",
    "end": "3290280"
  },
  {
    "text": "it's not Bola but it's bopla so in case you want to play abbreviation Bingo back",
    "start": "3290280",
    "end": "3295599"
  },
  {
    "text": "at your company you now have a new one to put on the list Bula broken object property level",
    "start": "3295599",
    "end": "3302040"
  },
  {
    "text": "authorization guess who had a problem with",
    "start": "3302400",
    "end": "3306440"
  },
  {
    "text": "Bula seriously this is going to end badly for me someday but what's Bula",
    "start": "3308119",
    "end": "3313200"
  },
  {
    "text": "well there's two versions of Bula there's a right version and a read version the right version is mass assignment uh I'm not going to talk",
    "start": "3313200",
    "end": "3319680"
  },
  {
    "text": "about that today that's uh maybe for some other time but the read version is excessive data exposure and it's",
    "start": "3319680",
    "end": "3325039"
  },
  {
    "text": "basically a problem where where the application or the API is giving the front end data too much data but the",
    "start": "3325039",
    "end": "3331440"
  },
  {
    "text": "frontend only uses a part of it for example here we have the API security swag shop and in the API security swag",
    "start": "3331440",
    "end": "3337720"
  },
  {
    "text": "shop we show a list of online users it's like a friendly community and we show our friends that are online and what we",
    "start": "3337720",
    "end": "3343559"
  },
  {
    "text": "basically have here is we have three online users John Jacob and Philip and they have IDs and names and so on and so",
    "start": "3343559",
    "end": "3349119"
  },
  {
    "text": "on and the front end uses the name and nothing else except the API returns user objects and users also have addresses",
    "start": "3349119",
    "end": "3355960"
  },
  {
    "text": "because shipping and so on and so on and we're returning that but the front end just ignores that so if you do like",
    "start": "3355960",
    "end": "3361839"
  },
  {
    "text": "quality assurance of the front end it's like yeah users all looks good awesome but if somebody an attacker uses the",
    "start": "3361839",
    "end": "3368280"
  },
  {
    "text": "application and the attacker um has some math skills like they open up the def tools in the browser they go to the",
    "start": "3368280",
    "end": "3373559"
  },
  {
    "text": "network tab this is really Advanced like the network tab you can see API requests and responses and you click on the API",
    "start": "3373559",
    "end": "3379480"
  },
  {
    "text": "request you look at the response data and there's like a bunch of Json that Json so this means just by going there",
    "start": "3379480",
    "end": "3386039"
  },
  {
    "text": "you can obtain addresses of users and that's excessive data exposure and that happens quite a bit as well has happened",
    "start": "3386039",
    "end": "3392599"
  },
  {
    "text": "with a smart scale by leaking access tokens and refresh tokens something that shouldn't have happened in the first place but happens in all kinds of places",
    "start": "3392599",
    "end": "3399839"
  },
  {
    "text": "results in a lot of real world problems why do we have that problem well usually because at some point uh we",
    "start": "3399839",
    "end": "3406640"
  },
  {
    "text": "drop a domain object like a user a model straight into a response which gets",
    "start": "3406640",
    "end": "3412039"
  },
  {
    "text": "translated to Json and that user object will have a couple of properties right here which all get exposed that's the",
    "start": "3412039",
    "end": "3418680"
  },
  {
    "text": "whole problem um whether you wrote whether it's an actual model or it's some something in between if you have",
    "start": "3418680",
    "end": "3424920"
  },
  {
    "text": "too much data fields in there they will get exposed and you will suffer from this problem how do we fix this well there's",
    "start": "3424920",
    "end": "3433400"
  },
  {
    "text": "annotations allowing you to hide Fields this is not a good practice this doesn't scale very well it's I don't know why",
    "start": "3433400",
    "end": "3439480"
  },
  {
    "text": "I'm even showing it probably because to tell you don't do this um adding Json ignore annotations is not a good",
    "start": "3439480",
    "end": "3445440"
  },
  {
    "text": "security model it's it's not going to end well if you start doing that the proper solution is to use dto or schemas",
    "start": "3445440",
    "end": "3451520"
  },
  {
    "text": "or something that validates or restricts data and their response and in this case it's a dto that's the Java way um",
    "start": "3451520",
    "end": "3457960"
  },
  {
    "text": "because in Java you have to write a lot of code to get things done um but it works and what we do here is we map our",
    "start": "3457960",
    "end": "3463480"
  },
  {
    "text": "user objects we still have users here but we map them to something called public user info and I'm always a very",
    "start": "3463480",
    "end": "3469400"
  },
  {
    "text": "big fan of using expressive names which is matches perfectly with the Java ideology of making things very verbos so",
    "start": "3469400",
    "end": "3476559"
  },
  {
    "text": "public user info will help you as a developer because if you're writing this or reviewing this or modifying this",
    "start": "3476559",
    "end": "3482760"
  },
  {
    "text": "public user info then you probably are not going to add Fields like address there or password or something like that",
    "start": "3482760",
    "end": "3488400"
  },
  {
    "text": "because it will make you think like me probably not the right place to put these values and that way we avoid",
    "start": "3488400",
    "end": "3493920"
  },
  {
    "text": "sensitive data exposure or excessive data exposure and we can solve that Bula vulnerability in our API all right that",
    "start": "3493920",
    "end": "3500839"
  },
  {
    "text": "brings me to um the last takeaway like this um I have some other takeaways coming but you want to avoid directly",
    "start": "3500839",
    "end": "3507680"
  },
  {
    "text": "exposing internal objects to the outside world because it's very easy to make a single mistake maybe not when you write",
    "start": "3507680",
    "end": "3513960"
  },
  {
    "text": "the API endpoint but later on a refactoring like oh yeah let's add a field here and all of a sudden that",
    "start": "3513960",
    "end": "3519000"
  },
  {
    "text": "field will be returned here in the API endpoint causing a potential issue so you want to be careful with that dto or",
    "start": "3519000",
    "end": "3525079"
  },
  {
    "text": "in between schemas or something like that is definitely the way to go to prevent uh this mistake from happening",
    "start": "3525079",
    "end": "3531440"
  },
  {
    "text": "all right that brings me back to the overview of the OAS API security top 10 in this hour here we covered quite a few",
    "start": "3531440",
    "end": "3538039"
  },
  {
    "text": "of these items um of course there's more so um keep track of what might work and you'll learn more about API security as",
    "start": "3538039",
    "end": "3545000"
  },
  {
    "text": "well I have some key takeaways takeaway number one the best authorization policy is well secure but also understandable",
    "start": "3545000",
    "end": "3552240"
  },
  {
    "text": "and auditable if you can't audit it you cannot guarantee the security like really really important you want to",
    "start": "3552240",
    "end": "3559000"
  },
  {
    "text": "analyze your apis for data leakage data exposure and Brute Force um attack",
    "start": "3559000",
    "end": "3564720"
  },
  {
    "text": "factors uh that's some you definitely want to look for um to improve the security and finally a perimeter",
    "start": "3564720",
    "end": "3571240"
  },
  {
    "text": "security cannot be your only defense it's still a good defense it still should be there but you should assume",
    "start": "3571240",
    "end": "3576480"
  },
  {
    "text": "that at some point your perimeter will be compromised and internal systems will become exposed systems and you need to",
    "start": "3576480",
    "end": "3582280"
  },
  {
    "text": "ensure the security of these systems as well if you don't things are going to end badly all right I'm running that",
    "start": "3582280",
    "end": "3590160"
  },
  {
    "text": "two-day API security Workshop in Oslo again in May at NDC NDC Oslo like the",
    "start": "3590160",
    "end": "3595280"
  },
  {
    "text": "big conference so if if you want to come there to learn more about API security definitely take a look at that and with",
    "start": "3595280",
    "end": "3600359"
  },
  {
    "text": "that I want to thank you uh for being here I hope you enjoyed the rest of the day and uh I'm doing a second talk uh",
    "start": "3600359",
    "end": "3606160"
  },
  {
    "text": "right after this one so if you want to learn more about o out in front ends that would be the place to be all right",
    "start": "3606160",
    "end": "3611599"
  },
  {
    "text": "thank you very much and enjoy the conference",
    "start": "3611599",
    "end": "3615720"
  }
]