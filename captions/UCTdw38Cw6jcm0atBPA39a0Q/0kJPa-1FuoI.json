[
  {
    "text": "okay I think we're going to be good to go thank you for coming along so I'm",
    "start": "30",
    "end": "5700"
  },
  {
    "text": "gonna do two presentations in on end this piece is sort of introduction to",
    "start": "5700",
    "end": "13920"
  },
  {
    "text": "namespaces in general or Linux what they are what they allow us to do but then",
    "start": "13920",
    "end": "20850"
  },
  {
    "text": "one of the most interesting types of namespaces is user namespaces and that's what I'm gonna sort of drill down to in",
    "start": "20850",
    "end": "28260"
  },
  {
    "text": "in in the second piece because user namespaces sort of bring all the other namespaces together in a way that let us",
    "start": "28260",
    "end": "34260"
  },
  {
    "text": "do some quite powerful things things like unprivileged containers for example",
    "start": "34260",
    "end": "39780"
  },
  {
    "text": "and I want to just describe how how that's possible how it's possible to be",
    "start": "39780",
    "end": "46850"
  },
  {
    "text": "super user inside a container or inside some other sort of isolation framework",
    "start": "46850",
    "end": "53640"
  },
  {
    "text": "while being unprivileged outside okay so",
    "start": "53640",
    "end": "62010"
  },
  {
    "text": "um just a little bit about me I'm the maintainer of the Linux man pages project I've been doing this for quite a",
    "start": "62010",
    "end": "68700"
  },
  {
    "text": "few years now this doesn't mean I'll look after tens of thousands of manual pages there is a certain project that",
    "start": "68700",
    "end": "74670"
  },
  {
    "text": "for historical reasons has called man pages it provides the manual pages that document the system calls of the Linux",
    "start": "74670",
    "end": "81689"
  },
  {
    "text": "kernel and see library functions and a few other bits and pieces and there's a bad thousand pages there and as I've",
    "start": "81689",
    "end": "89189"
  },
  {
    "text": "been doing that for a wee while along the way I wrote a book and these days",
    "start": "89189",
    "end": "94640"
  },
  {
    "text": "pretty much my full-time workers doing training courses and I like Norway",
    "start": "94640",
    "end": "102510"
  },
  {
    "text": "okay alrighty so just a bit of",
    "start": "102510",
    "end": "108150"
  },
  {
    "text": "background information that you want to might want to go and look at eventually",
    "start": "108150",
    "end": "113670"
  },
  {
    "text": "I did write a long series of articles about namespaces a few years back on LW",
    "start": "113670",
    "end": "119160"
  },
  {
    "text": "in you might find that useful look at at some point by now I've also a bunch of",
    "start": "119160",
    "end": "124980"
  },
  {
    "text": "manual pages talking about namespaces you can find them on your nearest Linux",
    "start": "124980",
    "end": "130830"
  },
  {
    "text": "system one other place that I like to point people ass is a webpage written by",
    "start": "130830",
    "end": "139340"
  },
  {
    "text": "an engineer in California she wrote the title in about four or five years ago",
    "start": "139340",
    "end": "147080"
  },
  {
    "text": "containers in five hundred lines of C she says nowadays is a bit more than 500",
    "start": "147080",
    "end": "153090"
  },
  {
    "text": "lines parent it's about five hundred and seventy CC she says I swear it was five",
    "start": "153090",
    "end": "158340"
  },
  {
    "text": "hundred but it's added a few pieces and the point I want to make there to begin with is doing the container thing you",
    "start": "158340",
    "end": "167430"
  },
  {
    "text": "know putting a process into a sort of an isolated environment or on on Linux the",
    "start": "167430",
    "end": "173310"
  },
  {
    "text": "amount of code that you need to do that is remarkably small the thing that makes container systems and other sorts of",
    "start": "173310",
    "end": "180450"
  },
  {
    "text": "rating systems so so complex is is all the orchestration that goes along with",
    "start": "180450",
    "end": "186870"
  },
  {
    "text": "it but the actual putting a process into an isolated environment the amount of code that's needed to do that is it's",
    "start": "186870",
    "end": "195030"
  },
  {
    "text": "very small so it's really hard to come",
    "start": "195030",
    "end": "201780"
  },
  {
    "text": "up with a simple one-sentence definition of what a namespaces this is this is sort of my attempt a namespace wraps",
    "start": "201780",
    "end": "210780"
  },
  {
    "text": "some global resource to provide isolation of that resource Linux",
    "start": "210780",
    "end": "218130"
  },
  {
    "text": "supports a number of different namespace types the the list has been growing over",
    "start": "218130",
    "end": "224400"
  },
  {
    "text": "time and it's about to grow a bit more very soon I think within within the next few months that's going to be another",
    "start": "224400",
    "end": "230100"
  },
  {
    "text": "namespace but for each one of these namespaces the",
    "start": "230100",
    "end": "235980"
  },
  {
    "text": "is multiple I'll rephrase that one or more name space instances on the system",
    "start": "235980",
    "end": "244290"
  },
  {
    "text": "when systems booted up there's one instance of each kind of of these",
    "start": "244290",
    "end": "249450"
  },
  {
    "text": "namespaces and every process resides in",
    "start": "249450",
    "end": "255030"
  },
  {
    "text": "one instance of a particular namespace so currently the seven namespaces each",
    "start": "255030",
    "end": "260370"
  },
  {
    "text": "process resides in one instance of the seven different namespace types for the",
    "start": "260370",
    "end": "268740"
  },
  {
    "text": "processes that are living inside that namespace instance they see a certain view of some resource and that view of",
    "start": "268740",
    "end": "276630"
  },
  {
    "text": "that resource is private to them and if one of those processes changes that resource the changes are visible to the",
    "start": "276630",
    "end": "282120"
  },
  {
    "text": "other processes in the same namespace but the change isn't visible to processes that are in other namespaces",
    "start": "282120",
    "end": "290120"
  },
  {
    "text": "when a new name when a new process is created that's in the same namespace as as parents so we've got at the moment",
    "start": "290120",
    "end": "298440"
  },
  {
    "text": "seven different types of name place starting with mount namespaces what",
    "start": "298440",
    "end": "304050"
  },
  {
    "text": "we're seeing here is a list ordered by time so the very first name space type was added back in 2002 the most recently",
    "start": "304050",
    "end": "312389"
  },
  {
    "text": "added one is 2016 and I expect I'll be able to add ones that list still this",
    "start": "312389",
    "end": "318240"
  },
  {
    "text": "year so there'll be one in new in 2019 and we're seeing there also the Linux",
    "start": "318240",
    "end": "323400"
  },
  {
    "text": "kernel version where the namespace types were added and these constants here",
    "start": "323400",
    "end": "328590"
  },
  {
    "text": "these clone new Flags these are constants that are used in various api's",
    "start": "328590",
    "end": "334169"
  },
  {
    "text": "when you want to refer to different types of namespaces system calls that work with namespaces now you you can use",
    "start": "334169",
    "end": "345479"
  },
  {
    "text": "individual namespace types on their own so going back to this timeline for instance way back early mount LAN spaces",
    "start": "345479",
    "end": "353580"
  },
  {
    "text": "were aid invented in 2002 this is quite a while before people were thinking about things like containers and that's",
    "start": "353580",
    "end": "360810"
  },
  {
    "text": "because people had particular use cases revolving just around the use of name",
    "start": "360810",
    "end": "365940"
  },
  {
    "text": "Mountain in space there's nothing to do with containers so some of these names place you can use them on their own but often",
    "start": "365940",
    "end": "373110"
  },
  {
    "text": "you want to use several namespace types together to build some sort of application one reason is that some of",
    "start": "373110",
    "end": "380220"
  },
  {
    "text": "the other namespace types like IPC namespaces see group namespaces PID",
    "start": "380220",
    "end": "385410"
  },
  {
    "text": "namespaces they make use of file systems that need to be mounted and probably in",
    "start": "385410",
    "end": "391110"
  },
  {
    "text": "order to have the mount points not visible to the rest of the system you create a mount namespace at the same",
    "start": "391110",
    "end": "396930"
  },
  {
    "text": "time because that's what mount namespaces do they isolate the set of mount points seen by a group of",
    "start": "396930",
    "end": "403770"
  },
  {
    "text": "processes in a container type framework",
    "start": "403770",
    "end": "409200"
  },
  {
    "text": "you're probably using all the namespace types together docker for example uses",
    "start": "409200",
    "end": "414240"
  },
  {
    "text": "nearly all of the namespace types it hasn't caught up with c group namespaces yet as far as I can see but I think",
    "start": "414240",
    "end": "419730"
  },
  {
    "text": "that's just because Dockers a bit slow to catch up with things sometimes and and see groups control groups are thrown",
    "start": "419730",
    "end": "426180"
  },
  {
    "text": "into the mix as well so it's a bit abstract so far and I want to make it a bit more concrete with a example of a",
    "start": "426180",
    "end": "433530"
  },
  {
    "text": "namespace UTS namespaces make it easy to provide an example because they're",
    "start": "433530",
    "end": "439760"
  },
  {
    "text": "relatively simple in terms of what they do and in terms of understanding how",
    "start": "439760",
    "end": "445500"
  },
  {
    "text": "namespaces work the idea with UTS namespaces is they isolate to system",
    "start": "445500",
    "end": "452970"
  },
  {
    "text": "identifiers the so the the node name and the domain name the node name is what we",
    "start": "452970",
    "end": "458670"
  },
  {
    "text": "more normally call the host name the domain names has got nothing to do with dns this is the NIS domain name or if",
    "start": "458670",
    "end": "467070"
  },
  {
    "text": "you're old enough to remember what it used to be called the Yellow Pages domain name it's just a system",
    "start": "467070",
    "end": "472950"
  },
  {
    "text": "identifier the reason why it might be",
    "start": "472950",
    "end": "478980"
  },
  {
    "text": "useful to isolate these identifiers is for instance memory container perspective you can have containers that",
    "start": "478980",
    "end": "485280"
  },
  {
    "text": "have different host name and different domain name and for instance some sort of initialization software in the",
    "start": "485280",
    "end": "491220"
  },
  {
    "text": "container might broadcast its hostname to DHCP so that the container gets",
    "start": "491220",
    "end": "497190"
  },
  {
    "text": "assigned a unique IP address",
    "start": "497190",
    "end": "502420"
  },
  {
    "text": "the name UTSA comes from an ancient [Music]",
    "start": "502420",
    "end": "509770"
  },
  {
    "text": "abbreviation the the the UTSA comes from a structure called UTSA name which is",
    "start": "509770",
    "end": "515900"
  },
  {
    "text": "returned by the you name system call which returns these identifiers the reason the UTSA name structure has its",
    "start": "515900",
    "end": "522020"
  },
  {
    "text": "name is because this system call returned the identifiers that were unique for your verse your particular",
    "start": "522020",
    "end": "530920"
  },
  {
    "text": "instantiation of the unix time sharing system because back then you know time",
    "start": "530920",
    "end": "537260"
  },
  {
    "text": "sharing was a thing it was sort of a new thing so the original name of UNIX was the unix time sharing system okay so on",
    "start": "537260",
    "end": "546650"
  },
  {
    "text": "am on a any particular linux system there might be multiple UTS namespace",
    "start": "546650",
    "end": "552890"
  },
  {
    "text": "instances and within a particular UTS namespace instance instance the",
    "start": "552890",
    "end": "559520"
  },
  {
    "text": "processes there will see a particular host name a particular domain name if one of those prices processes changes",
    "start": "559520",
    "end": "566690"
  },
  {
    "text": "the host name the change will be visible to the other processes that are in the same UTS namespace but that change won't",
    "start": "566690",
    "end": "574280"
  },
  {
    "text": "affect processes there in other duteous names baseness so each suit is namespace",
    "start": "574280",
    "end": "581810"
  },
  {
    "text": "has its own host name its own domain name and so we have a situation like this branch we've got on our system",
    "start": "581810",
    "end": "588860"
  },
  {
    "text": "preps and I'm sorry about the interlacing on the screen I hope you can still read it okay",
    "start": "588860",
    "end": "594860"
  },
  {
    "text": "the we've got three UTS namespaces here",
    "start": "594860",
    "end": "600650"
  },
  {
    "text": "with some black circles some processes inside and each namespace has its own",
    "start": "600650",
    "end": "607640"
  },
  {
    "text": "host name these processes here see this host name take a poll if one of these processes change that host name the",
    "start": "607640",
    "end": "613370"
  },
  {
    "text": "changes we visible just to these processes the processes over here are seeing a different host name and changes",
    "start": "613370",
    "end": "621560"
  },
  {
    "text": "over here won't affect these processes",
    "start": "621560",
    "end": "626470"
  },
  {
    "text": "so we've got some api's we've got some commands for working with namespaces one",
    "start": "626920",
    "end": "632810"
  },
  {
    "text": "of the things we have in terms of interfaces is the proc ped directory there's a",
    "start": "632810",
    "end": "638480"
  },
  {
    "text": "subdirectory called NES and inside that ns4 namespace obviously and what's inside that",
    "start": "638480",
    "end": "646399"
  },
  {
    "text": "directory is a bunch of symbolic links and these are kind of magic symbolic",
    "start": "646399",
    "end": "651980"
  },
  {
    "text": "links that give us information telling us which namespace does this process",
    "start": "651980",
    "end": "657470"
  },
  {
    "text": "belong to and you can see it as well that yeah there's one or two other sim",
    "start": "657470",
    "end": "662720"
  },
  {
    "text": "links in there as well but there's seven some links that are interesting to us at the moment and there's one sim link for",
    "start": "662720",
    "end": "668959"
  },
  {
    "text": "each one of the namespace types so see group IBC Mount and so on and the",
    "start": "668959",
    "end": "677779"
  },
  {
    "text": "content of these symbolic links normally the target of a symbolic link is a path name but if you read one of these",
    "start": "677779",
    "end": "684410"
  },
  {
    "text": "symbolic links using say read link you find a rather unusual string inside and",
    "start": "684410",
    "end": "690260"
  },
  {
    "text": "that the strings look like this some kind of namespace name colon and then in",
    "start": "690260",
    "end": "695930"
  },
  {
    "text": "square brackets an inode number just behind the scenes and you can't see this",
    "start": "695930",
    "end": "702050"
  },
  {
    "text": "from outside the kernel namespaces are implemented using a file system internal to the kernel and what you're seeing",
    "start": "702050",
    "end": "707750"
  },
  {
    "text": "here is the unique inode number corresponding to this namespace that's a sort of an irrelevant implementation",
    "start": "707750",
    "end": "715100"
  },
  {
    "text": "detail in a way the main point is this number is unique for this namespace",
    "start": "715100",
    "end": "720490"
  },
  {
    "text": "instance so one of the uses of these symbolic links is you can look at two",
    "start": "720490",
    "end": "726230"
  },
  {
    "text": "differents for two different processes you can look at the symbolic links and compare them if they are the same then",
    "start": "726230",
    "end": "732980"
  },
  {
    "text": "the two processes live inside the same namespace if they're different the two processes are in different namespaces",
    "start": "732980",
    "end": "741399"
  },
  {
    "text": "there's some system calls I'm not going to try and drill down to these system calls in any sort of way but just to",
    "start": "741790",
    "end": "747860"
  },
  {
    "text": "mention we've got clone clone is a sort of more general version of the fork",
    "start": "747860",
    "end": "752930"
  },
  {
    "text": "system call it allows you to create a new child process but at the same time you can say I want that new child",
    "start": "752930",
    "end": "758660"
  },
  {
    "text": "process to be in some new namespaces and you use some of those flags that I showed you in an earlier slide there to",
    "start": "758660",
    "end": "764270"
  },
  {
    "text": "say which kinds of new namespaces shares a bit like",
    "start": "764270",
    "end": "769790"
  },
  {
    "text": "it creates new namespaces but it doesn't create a new process it moves the calling process into those new",
    "start": "769790",
    "end": "776540"
  },
  {
    "text": "namespaces and then there's a system call called steadiness which allows a process to move itself from one",
    "start": "776540",
    "end": "783020"
  },
  {
    "text": "namespace where it's currently resident into another existing namespace and the",
    "start": "783020",
    "end": "789860"
  },
  {
    "text": "shell commands layered on top of these system calls there's a command called",
    "start": "789860",
    "end": "795200"
  },
  {
    "text": "unshare which lets you create new namespaces and execute some command in",
    "start": "795200",
    "end": "800210"
  },
  {
    "text": "those namespaces then there's InnoCentive this allows you to move into",
    "start": "800210",
    "end": "807260"
  },
  {
    "text": "some existing namespaces and execute some command in those namespaces and",
    "start": "807260",
    "end": "813400"
  },
  {
    "text": "each one of these commands has some flags that say what kind of namespaces",
    "start": "813400",
    "end": "818810"
  },
  {
    "text": "do you want to deal with so for unshare for instance you can say unshare - lower",
    "start": "818810",
    "end": "824750"
  },
  {
    "text": "case you create a new UTS namespace and there's different option letters there",
    "start": "824750",
    "end": "830570"
  },
  {
    "text": "to create different kinds of namespaces and correspondingly within Ian's Center what you can do is I want to go into",
    "start": "830570",
    "end": "836930"
  },
  {
    "text": "some existing namespaces one way of doing it you say I want to go to the existing namespaces orange from the",
    "start": "836930",
    "end": "842330"
  },
  {
    "text": "existing namespace the same as some target PID so you say - TP ID and then",
    "start": "842330",
    "end": "847760"
  },
  {
    "text": "you might say oh and I want to go into the same UTS namespace as their process so you you say - you there's some",
    "start": "847760",
    "end": "858950"
  },
  {
    "text": "there's some privilege requirements around creating namespaces to create user name spaces which I haven't yet said anything about yet much you don't",
    "start": "858950",
    "end": "865820"
  },
  {
    "text": "need any privilege but most of the other lofts I'll rephrase that for all of those types of mainstays you have a",
    "start": "865820",
    "end": "871640"
  },
  {
    "text": "privilege that is the caps sis admin capability okay so this yes I'll take a",
    "start": "871640",
    "end": "878630"
  },
  {
    "text": "question with respect to any one",
    "start": "878630",
    "end": "891080"
  },
  {
    "text": "particular namespace type the process is in exactly one instance of the namespace",
    "start": "891080",
    "end": "896500"
  },
  {
    "text": "now there are seven different types of namespace but at any particular moment",
    "start": "896500",
    "end": "902090"
  },
  {
    "text": "you know say with respect you tease namespaces the process is in one UTS namespace it can't be a member",
    "start": "902090",
    "end": "908089"
  },
  {
    "text": "of multiple UTS namespace instances when",
    "start": "908089",
    "end": "916910"
  },
  {
    "text": "you say independent namespace types independent I'm not sure UTS yes you can",
    "start": "916910",
    "end": "935389"
  },
  {
    "text": "you don't have to create yeah you can create individual namespace types",
    "start": "935389",
    "end": "941050"
  },
  {
    "text": "independently or a namespace instances I should say yes for some of the namespace",
    "start": "941050",
    "end": "947059"
  },
  {
    "text": "types that's useful to do this for individual namespace instances for just",
    "start": "947059",
    "end": "952999"
  },
  {
    "text": "for some of the types but for some others it's probably less interesting to do so okay but you know for instance",
    "start": "952999",
    "end": "958610"
  },
  {
    "text": "mountain spaces which I mentioned they were they appeared earlier on they were invented because at that point people",
    "start": "958610",
    "end": "964970"
  },
  {
    "text": "only thought about isolating mount mount point lists they weren't even thinking about other types of namespaces the",
    "start": "964970",
    "end": "971269"
  },
  {
    "text": "whole container idea only emerged into the consciousness a few years later and",
    "start": "971269",
    "end": "976279"
  },
  {
    "text": "then all the other namespaces started getting added enough that sounds odd your question or not but I would say you",
    "start": "976279",
    "end": "983000"
  },
  {
    "text": "want to come to the second session because I think you think you will some pieces will come together okay so it's",
    "start": "983000",
    "end": "989059"
  },
  {
    "text": "going to the demonstration so what I've",
    "start": "989059",
    "end": "994730"
  },
  {
    "text": "got here is two shell windows these these two shells are in the initial instances of each of the seven different",
    "start": "994730",
    "end": "1002500"
  },
  {
    "text": "namespace types and what I'm going to do up here is just just show that these two",
    "start": "1002500",
    "end": "1012670"
  },
  {
    "text": "shells are in the same UTS namespace so I'll say read link proc dollar dollar",
    "start": "1012670",
    "end": "1018639"
  },
  {
    "text": "PID of the shell UTS oh ah but of course",
    "start": "1018639",
    "end": "1026188"
  },
  {
    "text": "yes Innes there we go",
    "start": "1026189",
    "end": "1031270"
  },
  {
    "text": "okay we see a certain number there just yeah there's the PID of the shell and",
    "start": "1031270",
    "end": "1038400"
  },
  {
    "text": "then down here the ID of the shell and then I say relink /proc slash Dola Dola",
    "start": "1038400",
    "end": "1049570"
  },
  {
    "text": "Dola NS UTS okay we see the same number",
    "start": "1049570",
    "end": "1056050"
  },
  {
    "text": "these two shells are in the same UTS namespace now what I want to do then",
    "start": "1056050",
    "end": "1062230"
  },
  {
    "text": "down here is say well what's the host name on the system okay BN",
    "start": "1062230",
    "end": "1069040"
  },
  {
    "text": "now of course the host name up here is",
    "start": "1069040",
    "end": "1075420"
  },
  {
    "text": "is the same but what I'm now going to do is say sudo unshare - you create a new",
    "start": "1076200",
    "end": "1086440"
  },
  {
    "text": "UTS namespace and I'm gonna say run a shell in that new beauteous namespace",
    "start": "1086440",
    "end": "1095220"
  },
  {
    "text": "all righty now if I look at the hostname here it'd still be in now the reason is",
    "start": "1099640",
    "end": "1106299"
  },
  {
    "text": "that because when a new UTS namespace is created it it inherits a copy of the host name and the domain name from the",
    "start": "1106299",
    "end": "1112179"
  },
  {
    "text": "previous UTS namespace but what I could do now oh one thing I should do perhaps",
    "start": "1112179",
    "end": "1118120"
  },
  {
    "text": "to illustrate the point if I say read link dollar dollar UTS failing to learn",
    "start": "1118120",
    "end": "1130120"
  },
  {
    "text": "from experience I see a different number now there this shell is in a different",
    "start": "1130120",
    "end": "1137860"
  },
  {
    "text": "UTS namespace from the shell in the lower window so now I'm gonna change the",
    "start": "1137860",
    "end": "1143740"
  },
  {
    "text": "host name and just verify that change",
    "start": "1143740",
    "end": "1150880"
  },
  {
    "text": "okay different host name there but down",
    "start": "1150880",
    "end": "1155890"
  },
  {
    "text": "here the host name that this process this Chelsey's is to be in okay now I",
    "start": "1155890",
    "end": "1165880"
  },
  {
    "text": "could go a little bit further I should just echo the PID of the shell",
    "start": "1165880",
    "end": "1173910"
  },
  {
    "text": "okay one four eight zero five and then down here I could say sudo any Center",
    "start": "1173910",
    "end": "1182400"
  },
  {
    "text": "going to some some of the same name spaces as the PID one for like she won't",
    "start": "1182400",
    "end": "1190510"
  },
  {
    "text": "do one more thing before I do that I should realize just to demonstrate something else",
    "start": "1190510",
    "end": "1197940"
  },
  {
    "text": "oh yes thank you at least someone's reading my slides",
    "start": "1203760",
    "end": "1211730"
  },
  {
    "text": "okay these two processes are still in the same mountain namespace what this means I haven't said too much about",
    "start": "1219760",
    "end": "1225790"
  },
  {
    "text": "mountain there so this is yet but I mean hinting at it means they see the same set of mount points and the point is",
    "start": "1225790",
    "end": "1233470"
  },
  {
    "text": "about these two shells they are in the same instances of each of the other six different namespace types they're in the",
    "start": "1233470",
    "end": "1239050"
  },
  {
    "text": "same PID a space they're in the same network namespace they're in the same user name space and so on they only",
    "start": "1239050",
    "end": "1244420"
  },
  {
    "text": "differ in their membership of the UTS namespace now what I'm going to do down",
    "start": "1244420",
    "end": "1250840"
  },
  {
    "text": "here now is use the NS inter command saying I want to go into some of the",
    "start": "1250840",
    "end": "1256180"
  },
  {
    "text": "same name spaces as PID 1 4 8 0 5 - you",
    "start": "1256180",
    "end": "1262930"
  },
  {
    "text": "go into the UTS namespace or at the same UTS namespace as their process and I'll",
    "start": "1262930",
    "end": "1268390"
  },
  {
    "text": "just run a bash shell and of course I need to say sudo and now if I say well",
    "start": "1268390",
    "end": "1282130"
  },
  {
    "text": "first of all let's try saying read link /proc back up here should really just",
    "start": "1282130",
    "end": "1291390"
  },
  {
    "text": "there was the UTS namespace membership and now can let's compare that with the",
    "start": "1292200",
    "end": "1297460"
  },
  {
    "text": "UTS namespace membership down here same",
    "start": "1297460",
    "end": "1302470"
  },
  {
    "text": "number the shell down below is now in the new UTS namespace and now if I say",
    "start": "1302470",
    "end": "1308800"
  },
  {
    "text": "host name IC cakehole okay",
    "start": "1308800",
    "end": "1318660"
  },
  {
    "text": "now I think I've covered all that yeah so what is this about why are we doing",
    "start": "1323530",
    "end": "1331940"
  },
  {
    "text": "it well one of the important uses of namespaces is to do what people",
    "start": "1331940",
    "end": "1339260"
  },
  {
    "text": "sometimes call lightweight virtualization what they more commonly call containers when and what I mean by",
    "start": "1339260",
    "end": "1347570"
  },
  {
    "text": "virtualization is isolation of processes putting them in their own private world",
    "start": "1347570",
    "end": "1353240"
  },
  {
    "text": "in some sense the traditional way of doing hive of doing virtualization is",
    "start": "1353240",
    "end": "1359500"
  },
  {
    "text": "hypervisors the idea that you've got a host kernel and right on top of that host kernel there's a number of guest",
    "start": "1359500",
    "end": "1367490"
  },
  {
    "text": "kernels and with that sort of scheme the processes that are running on a",
    "start": "1367490",
    "end": "1373190"
  },
  {
    "text": "particular guest colonelcy their own private world created by that guest kernel and it's completely isolated from",
    "start": "1373190",
    "end": "1379700"
  },
  {
    "text": "the world provided by another guest kernel okay you just do this Firefly the",
    "start": "1379700",
    "end": "1384920"
  },
  {
    "text": "kernel and another guest kernel and you get sort of isolation for free by having a new kernel but also this has some some",
    "start": "1384920",
    "end": "1395470"
  },
  {
    "text": "some problems one of the things is that you your isolation is all or nothing",
    "start": "1395470",
    "end": "1401170"
  },
  {
    "text": "either two processes are in the same guest Colonel I see the same view of the world well there are two different guest kernels I see completely different",
    "start": "1401170",
    "end": "1407420"
  },
  {
    "text": "worlds and there's nothing that's sort of halfway between when we do",
    "start": "1407420",
    "end": "1415190"
  },
  {
    "text": "virtualization via namespaces then what's being done the isolation is being",
    "start": "1415190",
    "end": "1420620"
  },
  {
    "text": "done in the context of a single kernel and one of the results of that is we can",
    "start": "1420620",
    "end": "1428270"
  },
  {
    "text": "do partial isolation we don't need to isolate on all the possible dimensions you know we might have processes that",
    "start": "1428270",
    "end": "1433700"
  },
  {
    "text": "are in the same UTS namespace and same mount Lane space but are in different PID namespaces for example so we we can",
    "start": "1433700",
    "end": "1441290"
  },
  {
    "text": "have degrees of ization if it suits our application hypervisors relatively",
    "start": "1441290",
    "end": "1449420"
  },
  {
    "text": "speaking because i have to put the word relatively in there because people pull me up on this relatively speaking they",
    "start": "1449420",
    "end": "1455640"
  },
  {
    "text": "are simple to implement okay you've got to architect the conversation that goes on between the guest Colonel and the",
    "start": "1455640",
    "end": "1461460"
  },
  {
    "text": "host colonel but once you've architected that conversation you get isolation for free just by firing up another guest",
    "start": "1461460",
    "end": "1468630"
  },
  {
    "text": "colonel and the fact that this is these that hypervisors were relatively simple",
    "start": "1468630",
    "end": "1474240"
  },
  {
    "text": "to implement I mean that the first hypervisors actually appeared really quite a long time ago happy 20th",
    "start": "1474240",
    "end": "1480000"
  },
  {
    "text": "birthday VMware and the first free hypervisor implementations in had",
    "start": "1480000",
    "end": "1487380"
  },
  {
    "text": "already appeared back in 2003 one of the",
    "start": "1487380",
    "end": "1493200"
  },
  {
    "text": "other issues though with hypervisors is if you want to do isolation you need to fire another guest Colonel this is a",
    "start": "1493200",
    "end": "1498510"
  },
  {
    "text": "relatively resource intensive way of doing isolation takes a while to fire up the colonel the colonel needs resources",
    "start": "1498510",
    "end": "1505230"
  },
  {
    "text": "that the guest Colonel if we do isolation using namespaces containers",
    "start": "1505230",
    "end": "1511890"
  },
  {
    "text": "this is much cheaper in resource terms because there's only one colonel involved we can have degrees of",
    "start": "1511890",
    "end": "1517920"
  },
  {
    "text": "isolation and but the downside is it's much more work to implement because",
    "start": "1517920",
    "end": "1523680"
  },
  {
    "text": "there needs to be a whole lot of refactoring in the colonel to create the concept of separate instances of these",
    "start": "1523680",
    "end": "1530550"
  },
  {
    "text": "global resources so some of the main space types were especially complex to",
    "start": "1530550",
    "end": "1538050"
  },
  {
    "text": "implement use namespaces perhaps the most outstanding example of it took several years to complete the",
    "start": "1538050",
    "end": "1544680"
  },
  {
    "text": "implementation and well it's not a stool being implement to do the initial sort",
    "start": "1544680",
    "end": "1551550"
  },
  {
    "text": "of complete release took several years so what are the kinds of namespaces do",
    "start": "1551550",
    "end": "1557700"
  },
  {
    "text": "we have we've got mountain lane spaces what's being or backups in these were",
    "start": "1557700",
    "end": "1563100"
  },
  {
    "text": "the first namespace type that was implanted a motion to command line",
    "start": "1563100",
    "end": "1568110"
  },
  {
    "text": "Colonel back in 2002 the clone flag their clone new NS the kernel developer",
    "start": "1568110",
    "end": "1575220"
  },
  {
    "text": "back then still very much on the scene with Linux these days so went off into the woods for a few months and came back",
    "start": "1575220",
    "end": "1580230"
  },
  {
    "text": "and said I got this new thing I call it a namespace and here's the flag clone",
    "start": "1580230",
    "end": "1586710"
  },
  {
    "text": "you inis okay that point you know no one had cotton on today that will you know we might want",
    "start": "1586710",
    "end": "1592860"
  },
  {
    "text": "to isolate other sorts of things as well so a better name for the slag would have been your clone new mount but its",
    "start": "1592860",
    "end": "1599250"
  },
  {
    "text": "history what's being isolated here is the city the set of mount points that is",
    "start": "1599250",
    "end": "1607140"
  },
  {
    "text": "seen by a process and all that amount pointers is at Apple that connects",
    "start": "1607140",
    "end": "1614030"
  },
  {
    "text": "amounts or some sort of device to a path name and one other thing that's power",
    "start": "1614030",
    "end": "1619530"
  },
  {
    "text": "well there's a few things that are part of the trouble but the one of the other key things that's part of the tupple is an idea of a parent mount because the",
    "start": "1619530",
    "end": "1627660"
  },
  {
    "text": "interrelationship of mount points the parental relationship that defines the single directory hierarchy that you see",
    "start": "1627660",
    "end": "1634050"
  },
  {
    "text": "so all that's being isolated by mountain name spaces is this list of mount points",
    "start": "1634050",
    "end": "1640020"
  },
  {
    "text": "this these tuples of mount source path name parent mount ID and this means you",
    "start": "1640020",
    "end": "1645780"
  },
  {
    "text": "can have processes that are own different round name spaces that see a different set of mount points and they",
    "start": "1645780",
    "end": "1651300"
  },
  {
    "text": "so therefore they say can potentially a completely different single directory hierarchy tree I get a completely",
    "start": "1651300",
    "end": "1657780"
  },
  {
    "text": "different set of mounted file systems this means of course your container can",
    "start": "1657780",
    "end": "1663810"
  },
  {
    "text": "have its own set of file systems that are visible to other containers and you know heart necessarily visible to the",
    "start": "1663810",
    "end": "1669450"
  },
  {
    "text": "outside world either okay it means also",
    "start": "1669450",
    "end": "1675780"
  },
  {
    "text": "of course you know that many system calls needed to change in a mount and unmount they formerly worked on a single",
    "start": "1675780",
    "end": "1682380"
  },
  {
    "text": "global list of mount points that was shared by everyone on the system nowadays they needed to be retained then",
    "start": "1682380",
    "end": "1688050"
  },
  {
    "text": "they need to be refactored to deal with the fact that they should operate only on the mount namespace that the mount",
    "start": "1688050",
    "end": "1694590"
  },
  {
    "text": "point list of the mount namespace of the calling process and what can we do with",
    "start": "1694590",
    "end": "1703080"
  },
  {
    "text": "mount namespaces we can have the idea of per process private filesystem trees for",
    "start": "1703080",
    "end": "1710010"
  },
  {
    "text": "example you know you've got a multi-user system some user logs in there's a pam",
    "start": "1710010",
    "end": "1715080"
  },
  {
    "text": "module that kicks in the pam module create a new mount namespace mount some",
    "start": "1715080",
    "end": "1720630"
  },
  {
    "text": "file systems that user including perhaps their home directory and then a second user comes",
    "start": "1720630",
    "end": "1727049"
  },
  {
    "text": "along again a Pam module kicks in mount some file system including that users",
    "start": "1727049",
    "end": "1732419"
  },
  {
    "text": "home directory so the set of file systems that are seen by the two different users could be completely",
    "start": "1732419",
    "end": "1739320"
  },
  {
    "text": "different and in particular they couldn't even see each other's home directories because the amount points",
    "start": "1739320",
    "end": "1747419"
  },
  {
    "text": "are private to the mount namespace you can do the sort of thing that people",
    "start": "1747419",
    "end": "1754739"
  },
  {
    "text": "traditionally have done with chroot were you confine a process to a subtree of the filesystem but you can do it much",
    "start": "1754739",
    "end": "1761729"
  },
  {
    "text": "more flexibly with not only its basis you can completely rearrange the view of",
    "start": "1761729",
    "end": "1767399"
  },
  {
    "text": "file systems that processes the processes in the mount namespace is seeing chroot of course only issue say I",
    "start": "1767399",
    "end": "1774089"
  },
  {
    "text": "want to limit the process to some subtree of the existing single directory hierarchy but mountain ice isn't spaces",
    "start": "1774089",
    "end": "1780869"
  },
  {
    "text": "let you completely rearrange what processes are seeing one of the things",
    "start": "1780869",
    "end": "1787019"
  },
  {
    "text": "that's useful in the context of other namespace types and particular PID namespaces is you can mount certain file",
    "start": "1787019",
    "end": "1795809"
  },
  {
    "text": "systems like /proc without having side effects on processes that are in other",
    "start": "1795809",
    "end": "1802460"
  },
  {
    "text": "namespaces so one of the that you want to do with a PID namespace typically which I'll talk about soon",
    "start": "1802460",
    "end": "1809070"
  },
  {
    "text": "each PID in space has its own set of P IDs and if you want to see those PID is in a slash proc file system you need to",
    "start": "1809070",
    "end": "1816029"
  },
  {
    "text": "mount a slash proc file system show those pids too so quite commonly when",
    "start": "1816029",
    "end": "1822539"
  },
  {
    "text": "you creates a PID air space or for that matter an IPC namespace or C group",
    "start": "1822539",
    "end": "1828419"
  },
  {
    "text": "namespace at the same time you also create a mountain in space so that you can mount the necessary file systems for",
    "start": "1828419",
    "end": "1834989"
  },
  {
    "text": "those other kinds of name space without having side effects on the wider system",
    "start": "1834989",
    "end": "1840950"
  },
  {
    "text": "I don't know if I need to walk through this altogether we've got as I say there",
    "start": "1840950",
    "end": "1851729"
  },
  {
    "text": "was a lot of stuff that need to be reworked inside the kernel when mountain air space to read it now",
    "start": "1851729",
    "end": "1856740"
  },
  {
    "text": "new mounting system calls changed but everything that had anything to do with path names because path names of course",
    "start": "1856740",
    "end": "1863549"
  },
  {
    "text": "are interpreted with respect to mount points all of that code and the kernel neat that needed to be refactored so it",
    "start": "1863549",
    "end": "1869820"
  },
  {
    "text": "was quite a big piece of work yeah now",
    "start": "1869820",
    "end": "1875480"
  },
  {
    "text": "I'm just going to mention because I I don't have time to drill down at this",
    "start": "1875480",
    "end": "1880740"
  },
  {
    "text": "feature when mount main spaces were initially implemented what happened was we had the possibility of isolating a",
    "start": "1880740",
    "end": "1888480"
  },
  {
    "text": "set of mount points and you're gonna have mini mountain name space instances on the system and then people have to",
    "start": "1888480",
    "end": "1895110"
  },
  {
    "text": "offer after this implementation had been done people raised actually this is too much isolation we don't always want this",
    "start": "1895110",
    "end": "1902549"
  },
  {
    "text": "degree of isolation and the classic example use case that is often mentioned",
    "start": "1902549",
    "end": "1908610"
  },
  {
    "text": "here is you might have a system that had multiple mountain name spaces on it you know for different users log in or",
    "start": "1908610",
    "end": "1914520"
  },
  {
    "text": "whatever and maybe there's an optical disc drive on that system and you're not you want to put an optical disc drive",
    "start": "1914520",
    "end": "1919529"
  },
  {
    "text": "into the disc and you'd like it to be the the mounted optical disc to be visible to every mountain in space well",
    "start": "1919529",
    "end": "1927240"
  },
  {
    "text": "in the original implementation the only way you do that was to do a mount in every one of the mount namespaces which",
    "start": "1927240",
    "end": "1933360"
  },
  {
    "text": "and that's what I mean by too much isolation it would have been nice people realized if you could just do the mount",
    "start": "1933360",
    "end": "1938880"
  },
  {
    "text": "once and have it automatically propagate to all the other mountain namespaces so",
    "start": "1938880",
    "end": "1944130"
  },
  {
    "text": "three years later a feature called shared sub trees was implemented and it allows you to do exactly there propagate",
    "start": "1944130",
    "end": "1952049"
  },
  {
    "text": "mount events across mount namespaces it's it's kind of surprisingly complex",
    "start": "1952049",
    "end": "1958649"
  },
  {
    "text": "but it does the job unless you do many sort of quite magical things so right",
    "start": "1958649",
    "end": "1969390"
  },
  {
    "text": "what other kinds of namespaces do we have IPC namespaces what these are about is isolating certain IPC",
    "start": "1969390",
    "end": "1979580"
  },
  {
    "text": "I see IPC resources in particular system 5 IPC objects as shared-memory",
    "start": "1980700",
    "end": "1986430"
  },
  {
    "text": "semaphores message queues and so-called POSIX message queues as well and the",
    "start": "1986430",
    "end": "1992310"
  },
  {
    "text": "idea is that processes that are in a certain IPC namespace instance they'll see a certain set of set of those IPC objects but those IPC objects will be",
    "start": "1992310",
    "end": "1999540"
  },
  {
    "text": "invisible to a process in another IPC namespace instance and vice-versa",
    "start": "1999540",
    "end": "2006430"
  },
  {
    "text": "so each namespace has a set of IPC objects instead of identifiers for those",
    "start": "2006430",
    "end": "2011840"
  },
  {
    "text": "objects it has its own /dev /mq file system which you see the POSIX message",
    "start": "2011840",
    "end": "2017150"
  },
  {
    "text": "queue objects there's a certain files that are private and /proc and when the",
    "start": "2017150",
    "end": "2023900"
  },
  {
    "text": "namespace is destroyed then all the IPC",
    "start": "2023900",
    "end": "2029150"
  },
  {
    "text": "objects in the United space automatically evaporate okay now I'm not",
    "start": "2029150",
    "end": "2037340"
  },
  {
    "text": "gonna talk about sea route namespaces really because we'd need to understand what sea groups are and either you do or you don't but I can't do that here what",
    "start": "2037340",
    "end": "2045110"
  },
  {
    "text": "I want to say is you know see groups control groups are you know moderately complex pieces of infrastructure and",
    "start": "2045110",
    "end": "2052190"
  },
  {
    "text": "that makes you think that secret namespaces must be really complicated and not that's super simple but to",
    "start": "2052190",
    "end": "2059450"
  },
  {
    "text": "understand the way in which those super simple you need to understand what what's what see groups are but all I'll",
    "start": "2059450",
    "end": "2065300"
  },
  {
    "text": "say is if you're interested go and read the secrets men our secret namespaces a manual page and then just as an aside",
    "start": "2065300",
    "end": "2071030"
  },
  {
    "text": "I'll say all that's happening with these namespaces is certain path names that appear in certain prop files are being",
    "start": "2071030",
    "end": "2078320"
  },
  {
    "text": "virtualized and that's all that C group namespaces are doing it's no it's notice so it's really not complicated",
    "start": "2078320",
    "end": "2085840"
  },
  {
    "text": "then we've got network namespaces now what network namespaces are doing is isolating a whole bunch of network",
    "start": "2085840",
    "end": "2093440"
  },
  {
    "text": "resources things like routing table rules firewall rules the socket port",
    "start": "2093440",
    "end": "2099110"
  },
  {
    "text": "number space some directories in /proc",
    "start": "2099110",
    "end": "2104720"
  },
  {
    "text": "net and sysclass net and a few other bits and pieces and the general idea here is let's make our containers",
    "start": "2104720",
    "end": "2111660"
  },
  {
    "text": "useful from a networking perspective we can have the idea that each container",
    "start": "2111660",
    "end": "2117150"
  },
  {
    "text": "could have its own virtual networking device a virtual Ethernet device a death device and each container has its own",
    "start": "2117150",
    "end": "2124470"
  },
  {
    "text": "socket port number space so you can use these virtual Ethernet devices to connect the container to the outside",
    "start": "2124470",
    "end": "2129869"
  },
  {
    "text": "world there are two other containers for example or perhaps with some NAT rules out onto the big bad internet and then",
    "start": "2129869",
    "end": "2138539"
  },
  {
    "text": "on each container you could run a web server on port 80 for example because every container has its own socket port number space so what",
    "start": "2138539",
    "end": "2148319"
  },
  {
    "text": "sort of things can you do with network namespaces well you can have containerized network services where the",
    "start": "2148319",
    "end": "2154170"
  },
  {
    "text": "services live in their own sort of isolated world you can do things like",
    "start": "2154170",
    "end": "2160069"
  },
  {
    "text": "instead of if you want to develop a set of firewall rules and routing table rules for a real physical network you",
    "start": "2160069",
    "end": "2167339"
  },
  {
    "text": "could do the sort of ladder on the testing with real physical wires and boxes but then you know when you get",
    "start": "2167339",
    "end": "2172440"
  },
  {
    "text": "things wrong you have to move the wires and the boxes around potentially but instead you could do an emulation and",
    "start": "2172440",
    "end": "2179250"
  },
  {
    "text": "software using network namespaces and do it all in software and then when you work out your firewall rules and your",
    "start": "2179250",
    "end": "2185010"
  },
  {
    "text": "routing table rules are all correctly tested and working then you set up your",
    "start": "2185010",
    "end": "2190230"
  },
  {
    "text": "physical devices and wires that connect them and install the routing table rules and the firewall rules",
    "start": "2190230",
    "end": "2196289"
  },
  {
    "text": "there's even an emulator arm out there that lets you do exactly this the common",
    "start": "2196289",
    "end": "2203400"
  },
  {
    "text": "open research emulator someone's already done the work for you a lot of the use",
    "start": "2203400",
    "end": "2210000"
  },
  {
    "text": "cases for network namespaces resolve around or revolve around security because the thing about you know network",
    "start": "2210000",
    "end": "2216480"
  },
  {
    "text": "service if you put a network service up there it's fair game for any attacker to try and connect to that service so what",
    "start": "2216480",
    "end": "2225359"
  },
  {
    "text": "sort of things can you do then with network namespaces in there since one of the things is you can completely isolate",
    "start": "2225359",
    "end": "2232319"
  },
  {
    "text": "a process from the network when you create a new network namespace to begin",
    "start": "2232319",
    "end": "2237720"
  },
  {
    "text": "with it has no no network device",
    "start": "2237720",
    "end": "2244790"
  },
  {
    "text": "if you've got a process inside their network namespace then if it gets compromised somehow it can't do bad",
    "start": "2244790",
    "end": "2252770"
  },
  {
    "text": "stuff on the network because it simply can't create a network connection because there's no network device",
    "start": "2252770",
    "end": "2261190"
  },
  {
    "text": "another possibility is you can have you might have an internetwork service which",
    "start": "2263210",
    "end": "2270050"
  },
  {
    "text": "has helper processes helper processes that live inside network namespaces and",
    "start": "2270050",
    "end": "2277220"
  },
  {
    "text": "the idea would be that the the network service it's taking connections that come in from clients on the big bad",
    "start": "2277220",
    "end": "2283490"
  },
  {
    "text": "internet and it passes those connections to helper processes that are living",
    "start": "2283490",
    "end": "2288620"
  },
  {
    "text": "inside network namespaces and inside these network namespaces there are no network devices the helper process",
    "start": "2288620",
    "end": "2295520"
  },
  {
    "text": "inside the network namespace deals with the client and does whatever needs to be",
    "start": "2295520",
    "end": "2302960"
  },
  {
    "text": "done but if the client is somehow a malicious or somehow bad acts badly and",
    "start": "2302960",
    "end": "2309470"
  },
  {
    "text": "the the hell proces gets compromised it can't create new network actions that",
    "start": "2309470",
    "end": "2317060"
  },
  {
    "text": "can't you the attacker couldn't construct a compromise that would enable you know the helper process to say you",
    "start": "2317060",
    "end": "2323900"
  },
  {
    "text": "know create a new network connection cinder corporate database out over the",
    "start": "2323900",
    "end": "2330020"
  },
  {
    "text": "Internet to the attackers home base or something I've glossed over a little bit of magic",
    "start": "2330020",
    "end": "2336860"
  },
  {
    "text": "here because I said the help of the the master process the master server passes the network connection to the helper",
    "start": "2336860",
    "end": "2342980"
  },
  {
    "text": "process and I didn't say how that's done there is a technique for doing this it's a weird and wonderful techniques",
    "start": "2342980",
    "end": "2349640"
  },
  {
    "text": "have been available in UNIX systems for a long time including Linux where you",
    "start": "2349640",
    "end": "2355730"
  },
  {
    "text": "can have a UNIX domain socket connection between two processes and one process can pass a file descriptor to another",
    "start": "2355730",
    "end": "2362720"
  },
  {
    "text": "process over there connection so the idea would be that the master server accepts a connection gets a new file",
    "start": "2362720",
    "end": "2368900"
  },
  {
    "text": "descriptor for a new socket which is the socket this connect connected to the the client passes that file descriptors of",
    "start": "2368900",
    "end": "2374510"
  },
  {
    "text": "the helper process inside the network namespace and then the helper prosess has that connection to",
    "start": "2374510",
    "end": "2381349"
  },
  {
    "text": "the client okay no I'm doing good for",
    "start": "2381349",
    "end": "2390590"
  },
  {
    "text": "time okay prae no spaces now what's being isolated",
    "start": "2390590",
    "end": "2396650"
  },
  {
    "text": "here is process IDs the either is inside",
    "start": "2396650",
    "end": "2401690"
  },
  {
    "text": "a peon airspace there's a certain set of P IDs that are visible only inside the",
    "start": "2401690",
    "end": "2408800"
  },
  {
    "text": "PID namespace they're not visible outside the PID airspace why is this",
    "start": "2408800",
    "end": "2415369"
  },
  {
    "text": "useful well one one relevant use case we have the technology nowadays where you",
    "start": "2415369",
    "end": "2421760"
  },
  {
    "text": "can have a container that's running on one system one physical system and you can sort of freeze that container",
    "start": "2421760",
    "end": "2428960"
  },
  {
    "text": "transfer across the network and then reanimate it on another system now of",
    "start": "2428960",
    "end": "2434510"
  },
  {
    "text": "course if you were able to do that or you can do that that container was using a certain set of P IDs now if we move",
    "start": "2434510",
    "end": "2440960"
  },
  {
    "text": "that contain to another system maybe some of those PID s are already being used on that target system it's not a",
    "start": "2440960",
    "end": "2447800"
  },
  {
    "text": "problem with PID namespaces because the P IDs are only visible inside the PID",
    "start": "2447800",
    "end": "2453349"
  },
  {
    "text": "namespace so there's no possibility of conflict with existing PIDs another",
    "start": "2453349",
    "end": "2460010"
  },
  {
    "text": "benefit of PID namespaces is so nice a set of P IDs and you can have a PID one",
    "start": "2460010",
    "end": "2466220"
  },
  {
    "text": "an init process and PID one does you know some special things on any",
    "start": "2466220",
    "end": "2472270"
  },
  {
    "text": "unix-style system and it does special things in your container one of the",
    "start": "2472270",
    "end": "2477440"
  },
  {
    "text": "things for example PID one becomes the parent of orphaned processes and it's",
    "start": "2477440",
    "end": "2482869"
  },
  {
    "text": "usually responsible for doing certain system initializations piano namespaces are different from all",
    "start": "2482869",
    "end": "2489859"
  },
  {
    "text": "the other namespaces I mentioned so far they live in a hierarchy what I mean is each peon in space has a parent P or any",
    "start": "2489859",
    "end": "2496700"
  },
  {
    "text": "PID in airspace has a parent PID namespace going all the way back up to the initial PID main space there is a",
    "start": "2496700",
    "end": "2503750"
  },
  {
    "text": "maximum nesting depth but doesn't seem to be a problem for anyone yet next nesting depth of 32",
    "start": "2503750",
    "end": "2512000"
  },
  {
    "text": "there is an API which I'll just gloss over the week and you that you can actually use to discover these parental",
    "start": "2512000",
    "end": "2517430"
  },
  {
    "text": "relationships got a blog post there about it but I won't say more now the",
    "start": "2517430",
    "end": "2522829"
  },
  {
    "text": "thing is because of this hierarchy a process is a member of its own PID",
    "start": "2522829",
    "end": "2530089"
  },
  {
    "text": "namespace but it's also in effect a member of the parent PID man space and the grandparent PID namespace and all",
    "start": "2530089",
    "end": "2536990"
  },
  {
    "text": "the PID node space is going back to the initial pyrénées PID namespace but in",
    "start": "2536990",
    "end": "2542150"
  },
  {
    "text": "each one of those levels it's almost certainly going to have a different PID",
    "start": "2542150",
    "end": "2548680"
  },
  {
    "text": "okay from the initial PID namespace you can see all the processes on the system but",
    "start": "2548680",
    "end": "2554359"
  },
  {
    "text": "in a dissenter in an inferior a lower PID airspace the only thing that you can",
    "start": "2554359",
    "end": "2560240"
  },
  {
    "text": "see the process inside that pran space can see are the processes that are in that namespace all lower levels the",
    "start": "2560240",
    "end": "2566420"
  },
  {
    "text": "processes and lower-level pioneer space can't see the PID s in a high level PID",
    "start": "2566420",
    "end": "2572510"
  },
  {
    "text": "namespace picture helps here I think okay the idea here is then we have the",
    "start": "2572510",
    "end": "2579770"
  },
  {
    "text": "initial PID namespace and again I'm sorry about the rendering the initial PR United States and here's our true init",
    "start": "2579770",
    "end": "2587450"
  },
  {
    "text": "process PID one and perhaps PID one",
    "start": "2587450",
    "end": "2592630"
  },
  {
    "text": "creates a new process which has PID 'the 304 using for the black arrows represent",
    "start": "2592630",
    "end": "2598520"
  },
  {
    "text": "calls to fork and perhaps that process then uses a clone call with the clone",
    "start": "2598520",
    "end": "2605539"
  },
  {
    "text": "new PID flag to create a new PID namespace well the very first process in",
    "start": "2605539",
    "end": "2611270"
  },
  {
    "text": "that new PID no space will have PID 1 in that namespace but that process is also",
    "start": "2611270",
    "end": "2618140"
  },
  {
    "text": "visible on the level above where they have some other PID maybe this process",
    "start": "2618140",
    "end": "2623750"
  },
  {
    "text": "turns around in users fork to create another process prep which perhaps has PID 3 again their process is visible at",
    "start": "2623750",
    "end": "2631700"
  },
  {
    "text": "the higher level where it's going to have some PID maybe this process turns",
    "start": "2631700",
    "end": "2636980"
  },
  {
    "text": "around in users clone with the clone new PID flag to create a grandchild namespace the first process there has",
    "start": "2636980",
    "end": "2643609"
  },
  {
    "text": "PID one but it's also visible at the next level above where it has some other PID and",
    "start": "2643609",
    "end": "2649680"
  },
  {
    "text": "it's visible at the level above that where it again has some other PID make",
    "start": "2649680",
    "end": "2661650"
  },
  {
    "text": "sense okay so when you call when a",
    "start": "2661650",
    "end": "2667680"
  },
  {
    "text": "process calls get PID what it sees is its PID from the perspective of the namespace where it lives so if this",
    "start": "2667680",
    "end": "2674460"
  },
  {
    "text": "process called get PID it would see one",
    "start": "2674460",
    "end": "2679730"
  },
  {
    "text": "what about if it call get PP ID any thoughts get parent process ID I should",
    "start": "2679910",
    "end": "2686130"
  },
  {
    "text": "say any thoughts there's no visible parent is there not in this namespace in",
    "start": "2686130",
    "end": "2692760"
  },
  {
    "text": "that case get PP ID return zero no there's no visible parent there is a",
    "start": "2692760",
    "end": "2698310"
  },
  {
    "text": "parent but we can't see it from here okay all right I'll skip over that now",
    "start": "2698310",
    "end": "2711990"
  },
  {
    "text": "we've got the proc pin directory that contains the shows information about the",
    "start": "2711990",
    "end": "2717780"
  },
  {
    "text": "pids of a particular process visible in a particular PID namespace and this allows us to do certain kinds of",
    "start": "2717780",
    "end": "2725310"
  },
  {
    "text": "discovery so I'll just perhaps try quickly another demo so I'm gonna say",
    "start": "2725310",
    "end": "2735810"
  },
  {
    "text": "unshare - pee-ew I'm sure - P create a",
    "start": "2735810",
    "end": "2742890"
  },
  {
    "text": "new PID namespace and I mean these another flag that I don't want to try and explain which is useful for with PID",
    "start": "2742890",
    "end": "2748710"
  },
  {
    "text": "namespaces and say run a bash shell",
    "start": "2748710",
    "end": "2754190"
  },
  {
    "text": "and echo Dola Dola this shall has PID 1",
    "start": "2758580",
    "end": "2765960"
  },
  {
    "text": "the thing is if I go and look and /proc and look for all the entries you know",
    "start": "2765960",
    "end": "2773110"
  },
  {
    "text": "the big whose names and numbers - D I just wanna see the directories not the",
    "start": "2773110",
    "end": "2778630"
  },
  {
    "text": "contents of the directories I see a bunch of files which is weird isn't it",
    "start": "2778630",
    "end": "2785110"
  },
  {
    "text": "because as far as you know there's only one process in this PID namespace the reason is we're seeing a /proc mount",
    "start": "2785110",
    "end": "2790750"
  },
  {
    "text": "that corresponds to the initial PID namespace so one of these you need to do when you create a new PID namespace is",
    "start": "2790750",
    "end": "2796480"
  },
  {
    "text": "also renounce /proc but you don't want that slash mount to affect the other",
    "start": "2796480",
    "end": "2801880"
  },
  {
    "text": "process on the system so what you what we should have done was created the new mount namespace at the same time so I'm",
    "start": "2801880",
    "end": "2807820"
  },
  {
    "text": "gonna undo what I just did there and then I'm going to create a new PID",
    "start": "2807820",
    "end": "2813520"
  },
  {
    "text": "namespace again but at the same time there's a credit amount namespace and then I'll say mount - or first of all",
    "start": "2813520",
    "end": "2821620"
  },
  {
    "text": "let's look and let's look in proc again okay it's a mess okay just by the way we can",
    "start": "2821620",
    "end": "2829870"
  },
  {
    "text": "we can we can see that something weird is going on if we go and look at safe slash prop we know whether the show has PID 1 let's go and look at /proc / 1 /",
    "start": "2829870",
    "end": "2837370"
  },
  {
    "text": "status anyone this is a bash shell with",
    "start": "2837370",
    "end": "2843520"
  },
  {
    "text": "PID 1 no see that that's system D at system D in the initial PID namespace okay so what I want to do at this point",
    "start": "2843520",
    "end": "2850600"
  },
  {
    "text": "is say mount oops mount - T proc source",
    "start": "2850600",
    "end": "2857230"
  },
  {
    "text": "none because this is a pseudo file system and then /proc and now when I",
    "start": "2857230",
    "end": "2864100"
  },
  {
    "text": "look and /proc I see the right information okay that's why I said you",
    "start": "2864100",
    "end": "2869920"
  },
  {
    "text": "often want to use mount namespaces in conjunction with some of these other namespaces because you want to mount file systems where they're having side",
    "start": "2869920",
    "end": "2875620"
  },
  {
    "text": "effects on the wider system",
    "start": "2875620",
    "end": "2879450"
  },
  {
    "text": "okay that first process that PID one",
    "start": "2881720",
    "end": "2889430"
  },
  {
    "text": "insider namespace it's a new PI that fit that PID one and the new PID airspace is special it's the init process becomes",
    "start": "2889430",
    "end": "2896330"
  },
  {
    "text": "the parent of orphaned processes generally it does certain kinds of initialization so it will do some",
    "start": "2896330",
    "end": "2901640"
  },
  {
    "text": "initializations in your container for example it's also special in the sense",
    "start": "2901640",
    "end": "2907600"
  },
  {
    "text": "PID one on traditional unix system is special if it goes away i you know",
    "start": "2907600",
    "end": "2913400"
  },
  {
    "text": "somehow it gets killed or it terminates the colonel says the colonel knows that PID winner's fundamental to the",
    "start": "2913400",
    "end": "2919730"
  },
  {
    "text": "operation of the system and that in that colin that situation unix kernels panic",
    "start": "2919730",
    "end": "2925850"
  },
  {
    "text": "and reboot the system it's a similar situation with PRT namespaces a PID won't one goes away the namespace is",
    "start": "2925850",
    "end": "2932630"
  },
  {
    "text": "considered to be unusable after there all the other processes get killed and the namespace is dead okay who's coming",
    "start": "2932630",
    "end": "2943400"
  },
  {
    "text": "back for the next hour anyone not coming back i won't hold it against you okay i'll just say just two",
    "start": "2943400",
    "end": "2954710"
  },
  {
    "text": "minutes thing about user name spaces but you want to come back you for the next hour you do and what this is about is ID",
    "start": "2954710",
    "end": "2961520"
  },
  {
    "text": "i isolating the UID now the user IDs and group IDs the particular idea here is",
    "start": "2961520",
    "end": "2967610"
  },
  {
    "text": "you never process it since i do user name space it has well outside the user",
    "start": "2967610",
    "end": "2973670"
  },
  {
    "text": "name space it has an unprivileged user ID but inside the user name space it has UID 0 it is super user inside the user",
    "start": "2973670",
    "end": "2983090"
  },
  {
    "text": "name space and it can do privileged operations in a certain context and this",
    "start": "2983090",
    "end": "2989990"
  },
  {
    "text": "lets us do some really very interesting things and i think i'm just going to say",
    "start": "2989990",
    "end": "2999380"
  },
  {
    "text": "if you want to know more you're gonna have to come back in the next hour because i've reached the end of my",
    "start": "2999380",
    "end": "3006430"
  },
  {
    "text": "slides and thank you for coming along",
    "start": "3006430",
    "end": "3011440"
  },
  {
    "text": "and if there are any questions we took a couple minutes so is this some",
    "start": "3011440",
    "end": "3026650"
  },
  {
    "text": "sort of inheritance with mountain namespaces I do so I think there was a point that I go I sort of didn't say anything about when new mountain ice",
    "start": "3026650",
    "end": "3032950"
  },
  {
    "text": "mountain ounces base is created it inherits the mountain point list from the previous mountain namespace so there",
    "start": "3032950",
    "end": "3039880"
  },
  {
    "text": "are there is a set of amount points initially but then afterwards some processes inside that mountain own space",
    "start": "3039880",
    "end": "3044980"
  },
  {
    "text": "can rearrange the set of mount points add some remove some and so on yes okay",
    "start": "3044980",
    "end": "3062829"
  },
  {
    "text": "so if you add a new I'm sorry I should that you continue but I think I know where you're going yeah yeah so if you",
    "start": "3062829",
    "end": "3069069"
  },
  {
    "text": "add a new mount point in the namespace and you add a file in that mount of file",
    "start": "3069069",
    "end": "3075609"
  },
  {
    "text": "system what's the effect and this is a point that people often get confused about all that amount namespace is doing",
    "start": "3075609",
    "end": "3082030"
  },
  {
    "text": "is providing a set of mount points those mount points there might be different mountain spaces that mount the same file",
    "start": "3082030",
    "end": "3089260"
  },
  {
    "text": "system it's the same file system the files on that file system ah it's one",
    "start": "3089260",
    "end": "3094450"
  },
  {
    "text": "set of files so you know if two different mount namespaces happen to mount the same file system and one of",
    "start": "3094450",
    "end": "3100150"
  },
  {
    "text": "the prices in one file system sorry in one mountain space change one of those files well the change is gonna be",
    "start": "3100150",
    "end": "3105400"
  },
  {
    "text": "visible in another mountain a space where that file system happens to be Mountain it's only the mount points that",
    "start": "3105400",
    "end": "3111369"
  },
  {
    "text": "are being isolated not not the file systems now if you don't want those file",
    "start": "3111369",
    "end": "3116740"
  },
  {
    "text": "system to go changes to a file system by one mountain a space to be visible in another manís place then don't mail bay",
    "start": "3116740",
    "end": "3122980"
  },
  {
    "text": "at file system in the other mail namespace that's that's that's how it works",
    "start": "3122980",
    "end": "3128970"
  },
  {
    "text": "other questions",
    "start": "3129839",
    "end": "3133290"
  },
  {
    "text": "to another yet to a helper yes yep no no",
    "start": "3140939",
    "end": "3150159"
  },
  {
    "text": "I just need to have a UNIX domain socket connection and that's enough now they can be they can mean different",
    "start": "3150159",
    "end": "3156219"
  },
  {
    "text": "namespaces of different types or not that it's it's it's this is an",
    "start": "3156219",
    "end": "3162249"
  },
  {
    "text": "orthogonal technique well so people",
    "start": "3162249",
    "end": "3168789"
  },
  {
    "text": "people commonly call this technique passing a file descriptor in reality",
    "start": "3168789",
    "end": "3174249"
  },
  {
    "text": "what's being passed is a reference to the open file description probably you know in layer the the sending process",
    "start": "3174249",
    "end": "3179889"
  },
  {
    "text": "might be using a certain file descriptor number the receiving process gets a reference to the open file and probably",
    "start": "3179889",
    "end": "3186459"
  },
  {
    "text": "it gets a file to could be allocated in its file descriptor table it's probably a very different file descriptor number so even though it's called commonly file",
    "start": "3186459",
    "end": "3193119"
  },
  {
    "text": "descriptor passing it's not strictly accurate it's a reference to an open file that is being passed and probably",
    "start": "3193119",
    "end": "3199299"
  },
  {
    "text": "the receiving process uses a different file descriptor number other questions",
    "start": "3199299",
    "end": "3210389"
  },
  {
    "text": "see some of you in 20 minutes",
    "start": "3210389",
    "end": "3214048"
  },
  {
    "text": "[Applause]",
    "start": "3215700",
    "end": "3220179"
  }
]