[
  {
    "text": "good morning everyone how's everyone feeling this morning good yeah I hope",
    "start": "5400",
    "end": "11679"
  },
  {
    "text": "you've had a great conference so far I I love NDC it's one of the best conferences to go to and I promise I",
    "start": "11679",
    "end": "18000"
  },
  {
    "text": "don't say that at every place I go to um before we get started I'd like to show",
    "start": "18000",
    "end": "24000"
  },
  {
    "text": "my appreciation and I do this every time can we give the organizers a big round of applause",
    "start": "24000",
    "end": "31039"
  },
  {
    "text": "thank you they put on an amazing show here and what's funny now is that everyone around",
    "start": "32880",
    "end": "38040"
  },
  {
    "text": "us is going to be super confusing and think that we just finished um but that's not going to happen so we're",
    "start": "38040",
    "end": "43960"
  },
  {
    "text": "going to talk about C 12 and do net 8 there's a lot happening in this in this space and I hope you were excited to go",
    "start": "43960",
    "end": "50199"
  },
  {
    "text": "through some of my favorite features there's like a million different blog post from Microsoft covering all of the",
    "start": "50199",
    "end": "56120"
  },
  {
    "text": "different features and it can be quite daunting and hard to figure out exactly what's going on so I've gathered some of",
    "start": "56120",
    "end": "62519"
  },
  {
    "text": "my favorite things in net and in C and we're going to try and go through most of that here today I'm Philip egberg",
    "start": "62519",
    "end": "69640"
  },
  {
    "text": "I've been here many times before and I do appreciate if people send me emails asking questions if you have anything",
    "start": "69640",
    "end": "76400"
  },
  {
    "text": "you want to know about async in8 c.net or you know life in general just send me an email grab me the hway",
    "start": "76400",
    "end": "82960"
  },
  {
    "text": "afterwards with that out of the way let's talk about everything that's changed in C and net as anyone in here",
    "start": "82960",
    "end": "90040"
  },
  {
    "text": "been around since c 1 oh there's a handful so you know if you compare the language and as well the",
    "start": "90040",
    "end": "96759"
  },
  {
    "text": "framework to what you had in the early days is really different isn't it like",
    "start": "96759",
    "end": "102040"
  },
  {
    "text": "it changes and adapts to what the developers expect from both the language and what's available in net and it can",
    "start": "102040",
    "end": "108640"
  },
  {
    "text": "be really tricky if you've been out of the game for a while to understand how all of these different language features",
    "start": "108640",
    "end": "113880"
  },
  {
    "text": "and components of net how they all work together and how you're supposed to use that in your applications so hopefully",
    "start": "113880",
    "end": "120880"
  },
  {
    "text": "after this you'll uh you'll figure out exactly how we can use all of this in your applications and we're going to",
    "start": "120880",
    "end": "126200"
  },
  {
    "text": "start off talking about net 8 there's a lot of things in terms of performance",
    "start": "126200",
    "end": "131360"
  },
  {
    "text": "additions to net changes in AC in in asp.net core sorry and a lot of that",
    "start": "131360",
    "end": "137400"
  },
  {
    "text": "that we're going to try and cover here so what happens with net is that every year in November there's a long a",
    "start": "137400",
    "end": "143680"
  },
  {
    "text": "support release every second year there's a long-term support which means that in November last year they Rel net",
    "start": "143680",
    "end": "150440"
  },
  {
    "text": "8 and this is now going to be supported for at least 36 months and in November",
    "start": "150440",
    "end": "155920"
  },
  {
    "text": "this year they're going to release net 9 with some additions to it they're doing some experimentations as to for example",
    "start": "155920",
    "end": "162360"
  },
  {
    "text": "I I follow an issue in GitHub they do all of this in the open and they're investigating how could we improve async",
    "start": "162360",
    "end": "168159"
  },
  {
    "text": "and a weit for example what if the runtime and net and all of that knows",
    "start": "168159",
    "end": "173200"
  },
  {
    "text": "about the concept of async and a weit and not just knows about threading so there's a lot of work going in around",
    "start": "173200",
    "end": "179319"
  },
  {
    "text": "how to make net more effective how to improve performance but that's going to be a um",
    "start": "179319",
    "end": "185760"
  },
  {
    "text": "on the topic for next year now we're going to focus on the the latest version which is net8 which is a long-term",
    "start": "185760",
    "end": "191480"
  },
  {
    "text": "support version meaning that it's quite the first version of this new thing where they Incorporated both NET",
    "start": "191480",
    "end": "197920"
  },
  {
    "text": "Framework and net core it's the first version that's viable for all different platforms dot net has always been about",
    "start": "197920",
    "end": "205040"
  },
  {
    "text": "build anything and build anything for any platform and now even on any",
    "start": "205040",
    "end": "210120"
  },
  {
    "text": "platform you probably heard this many times and that's even more true for net 8 now that you can use net Maui you can",
    "start": "210120",
    "end": "217040"
  },
  {
    "text": "do full stack web UI with Blazer and you can build you know Asher web applications and desktop applications",
    "start": "217040",
    "end": "222920"
  },
  {
    "text": "and all of that using net it's it's now more crew than ever we're going to get back to Blazer and Maui a little bit",
    "start": "222920",
    "end": "230040"
  },
  {
    "text": "later on let's first focus on the additions in net 8 that I think are the",
    "start": "230040",
    "end": "235120"
  },
  {
    "text": "most important ones I guess one of the really big things that worked on the",
    "start": "235120",
    "end": "240599"
  },
  {
    "text": "past few versions starting with doet 5 6 7 and 8 is performance I mean I could jump around",
    "start": "240599",
    "end": "247000"
  },
  {
    "text": "here like Steve Balmer did screaming performance performance performance but that would probably break the stage so",
    "start": "247000",
    "end": "252280"
  },
  {
    "text": "I'm not going to do that but they've done a lot of work in terms of how to make net run better and how to make sure",
    "start": "252280",
    "end": "258400"
  },
  {
    "text": "that we have types available both in the language the runtime the framework so that we can write better performing",
    "start": "258400",
    "end": "264000"
  },
  {
    "text": "applications we're going to look at a couple of things that make this possible there's a new thing called a Time",
    "start": "264000",
    "end": "269240"
  },
  {
    "text": "abstraction that allows us to better work with dates and times there's improvements to how do we work with Json",
    "start": "269240",
    "end": "275479"
  },
  {
    "text": "how to work with asp.net core additions to minimal apis Blazer and a lot of other things in asp.net core that makes",
    "start": "275479",
    "end": "282400"
  },
  {
    "text": "net now complete if you want to do minimal apis and of course is anyone here using net",
    "start": "282400",
    "end": "288600"
  },
  {
    "text": "Maui oh wow about two handfuls that's great so now sometimes in the older",
    "start": "288600",
    "end": "295400"
  },
  {
    "text": "versions up until net 8 if we look at Net 5 6 7 and 8 that answer would have",
    "start": "295400",
    "end": "300680"
  },
  {
    "text": "been different a lot of people have waited until net 8 to actually jump on net Maui because this is the first",
    "start": "300680",
    "end": "306919"
  },
  {
    "text": "version where it feels like there's not a lot of bugs there's not a lot of",
    "start": "306919",
    "end": "312160"
  },
  {
    "text": "things in the way for you to actually build an application with it there's still small things I have to work on but again we'll get back to that soon so now",
    "start": "312160",
    "end": "319840"
  },
  {
    "text": "if we want to use the latest version ofet and the latest version of CP it can be quite tricky to know exactly how to",
    "start": "319840",
    "end": "326680"
  },
  {
    "text": "go about this now you have to use a specific version ofet to use a specific version of C this is The Official",
    "start": "326680",
    "end": "334120"
  },
  {
    "text": "Guidelines so if you use net 8 you'll have everything available from C2 but a lot of this is compiler magic",
    "start": "334120",
    "end": "342479"
  },
  {
    "text": "so if you want to use things in C 12 that is compatible with older iil or the older runtime then by all means you can",
    "start": "342479",
    "end": "349759"
  },
  {
    "text": "go into your CS Pride file and say Hey I want to use C 12 for my darket framework 1.0 project and that might work but it's",
    "start": "349759",
    "end": "358120"
  },
  {
    "text": "unsupported I've done this in projects where we can't upgrade to net ideally we should just be able to go into our",
    "start": "358120",
    "end": "364759"
  },
  {
    "text": "project and say hey I'd like to use this newer version of net and everything should just work fine does it always",
    "start": "364759",
    "end": "371759"
  },
  {
    "text": "though probably not but most of the times it works but if you want to use newer versions of C features you can do",
    "start": "371759",
    "end": "376800"
  },
  {
    "text": "that in older versions as well now I'd like to spend some time talking about the improvements to",
    "start": "376800",
    "end": "383199"
  },
  {
    "text": "Performance and I hope no one from Microsoft is here because I generally don't like that I talk about older",
    "start": "383199",
    "end": "388400"
  },
  {
    "text": "versions of theet framework and doet runtime as some something that's Rusty and old but in comparison to all the",
    "start": "388400",
    "end": "394880"
  },
  {
    "text": "work they've done in do net 8 even beginning with net 6 there's a lot of things in terms of how they work with",
    "start": "394880",
    "end": "401160"
  },
  {
    "text": "memory efficiency how to reduce the number of CPU operations all of that and",
    "start": "401160",
    "end": "406199"
  },
  {
    "text": "it really all goes back to language features and types in net that was",
    "start": "406199",
    "end": "411479"
  },
  {
    "text": "released a few versions ago but you know with the same goes for async and a wait",
    "start": "411479",
    "end": "416720"
  },
  {
    "text": "it takes some time for that to get traction and they've done a lot of these performance improvements by applying the",
    "start": "416720",
    "end": "423919"
  },
  {
    "text": "concept of using spans and ranges two concepts that were released many versions ago but there's still something",
    "start": "423919",
    "end": "431520"
  },
  {
    "text": "that people try to incorporate their in their applications to build better performing applications spans is really",
    "start": "431520",
    "end": "437639"
  },
  {
    "text": "just a way to use pointers in C A managed way to use pointers that is so you can effectively say that I have this",
    "start": "437639",
    "end": "443720"
  },
  {
    "text": "collection of data and now I now have the capability of pointing to different elements to Define where it starts and",
    "start": "443720",
    "end": "449120"
  },
  {
    "text": "ends without having to do any extra memory allocations and ranges is a way for us",
    "start": "449120",
    "end": "454919"
  },
  {
    "text": "to provide a Syntax for slicing things off for example we can say that I want",
    "start": "454919",
    "end": "460039"
  },
  {
    "text": "to grab everything from two off the elements at at the start I can say skip the first two elements I can say give me",
    "start": "460039",
    "end": "466159"
  },
  {
    "text": "everything except the last element or how about Skip everything until there's two elements left and give me the rest",
    "start": "466159",
    "end": "471960"
  },
  {
    "text": "of that list the concept of ranges and having this syntax available as well as",
    "start": "471960",
    "end": "477120"
  },
  {
    "text": "something that allows us to slice off collect of data without extra allocations means that we can build",
    "start": "477120",
    "end": "483400"
  },
  {
    "text": "really more performant code in terms of not having to do any memory allocations here's an example of that I have this",
    "start": "483400",
    "end": "490599"
  },
  {
    "text": "zero allocation code piece where I Define a payload of bytes it can be strings integers and whatnot I'm using",
    "start": "490599",
    "end": "497560"
  },
  {
    "text": "btes here because it makes me look like a hacker so I have this payload and I want to implicitly look at this as a span",
    "start": "497560",
    "end": "505319"
  },
  {
    "text": "this doesn't do any really conversion it just lets me point to different parts of that by default it's going to point to",
    "start": "505319",
    "end": "510919"
  },
  {
    "text": "the entire collection of data and then I can say how about you give me a subset of that this will give me a new pointer",
    "start": "510919",
    "end": "517080"
  },
  {
    "text": "to say everything from two off the back until the end so effectively the two last elements that will be in the subset",
    "start": "517080",
    "end": "524440"
  },
  {
    "text": "another example of this is to say that I have my name here as a utf8 string literal the reason I have the u8 at the",
    "start": "524440",
    "end": "531279"
  },
  {
    "text": "end there which is a c 11 feature is because net now doesn't have to convert",
    "start": "531279",
    "end": "536800"
  },
  {
    "text": "by default it's utf16 so it doesn't have to convert that into utf8 which is what I want to work with here so then I can",
    "start": "536800",
    "end": "543399"
  },
  {
    "text": "say that this here is a span of information I can slice off the first name and slice off the last name and this here is effectively doing zero",
    "start": "543399",
    "end": "550600"
  },
  {
    "text": "extra allocations someone in here is going to give me a yellow card saying there was",
    "start": "550600",
    "end": "556040"
  },
  {
    "text": "extra allocations you allocated two things on the stack sure but that's beside the point the point is that we're",
    "start": "556040",
    "end": "562320"
  },
  {
    "text": "not doing any extra allocations in terms of that entire collection of information imagine having to copy the entire string",
    "start": "562320",
    "end": "568959"
  },
  {
    "text": "over if that was a huge Json document for example and they're doing this internally for all the places where they",
    "start": "568959",
    "end": "575120"
  },
  {
    "text": "manipulate strings where they pass large collections of data over to different methods if you look at that as a memory",
    "start": "575120",
    "end": "581720"
  },
  {
    "text": "of te or a span of te you can more effectively work with that data without having to copy things all over the place",
    "start": "581720",
    "end": "588040"
  },
  {
    "text": "there are some gotchas around how this works so while this isn't new to net this is what really powers that",
    "start": "588040",
    "end": "594279"
  },
  {
    "text": "performance Improvement as well as knowing how to write effective code",
    "start": "594279",
    "end": "599800"
  },
  {
    "text": "now they also introduce a concept called native aot which means that we can Target specific platforms I can say I",
    "start": "599800",
    "end": "606360"
  },
  {
    "text": "want my net application to be compiled to an arm 64 or an x86 Intel CPU and",
    "start": "606360",
    "end": "614440"
  },
  {
    "text": "then what happens is that it will compile it down to that native platform using native instructions and bundle the",
    "start": "614440",
    "end": "619680"
  },
  {
    "text": "components of the runtime and the framework and everything that you need to run this application without having",
    "start": "619680",
    "end": "625760"
  },
  {
    "text": "to install net on that machine means it's faster to start means that everything's going to be running",
    "start": "625760",
    "end": "631279"
  },
  {
    "text": "natively and going to be very fast so for specific applications this could be really interesting and we see this",
    "start": "631279",
    "end": "638040"
  },
  {
    "text": "happening with mobile applications doet Maui does this for iOS for example while",
    "start": "638040",
    "end": "643760"
  },
  {
    "text": "Android still uses uh the jit compiler to run the applications they've also introduced",
    "start": "643760",
    "end": "650079"
  },
  {
    "text": "some performance Focus types in net to allow us to work more effectively with things like a",
    "start": "650079",
    "end": "655240"
  },
  {
    "text": "dictionary they've introduced this thing called system. collections. Frozen and while this anyone want to see me sing a",
    "start": "655240",
    "end": "661639"
  },
  {
    "text": "song from Frozen No no that would uh copyright strike",
    "start": "661639",
    "end": "669000"
  },
  {
    "text": "this video when it's on YouTube so I probably shouldn't do that I'm joking I'm not going to sing any songs uh that's definitely going to",
    "start": "669000",
    "end": "675839"
  },
  {
    "text": "fill the bucket up with red cards what this does though is allows me to point to a dictionary and say hey give me a",
    "start": "675839",
    "end": "681639"
  },
  {
    "text": "representation that's highly optimize for accessing elements and this here is",
    "start": "681639",
    "end": "687399"
  },
  {
    "text": "of course you're not going to do this all the time because it will require some extra operations to do this conversion extra allocations to do the",
    "start": "687399",
    "end": "693800"
  },
  {
    "text": "conversion but once you have that dictionary in this case in in memory and it's a performance Focus type it means",
    "start": "693800",
    "end": "699880"
  },
  {
    "text": "that accessing these elements will be a lot faster so that's kind of it that powers the performance parts of net now",
    "start": "699880",
    "end": "707519"
  },
  {
    "text": "let's uh jump over to visual studio and talk about some of the changes to system. text. Json I guess the is anyone",
    "start": "707519",
    "end": "714360"
  },
  {
    "text": "using system. text. Json but half of you is the rest of you",
    "start": "714360",
    "end": "719519"
  },
  {
    "text": "using Newton softare Json anyone using Newton softare Json about the rest of you so I guess",
    "start": "719519",
    "end": "727120"
  },
  {
    "text": "the reason they introduce system. tex. Json is to have a really highly performant alternative to Newton soft.",
    "start": "727120",
    "end": "734279"
  },
  {
    "text": "Json because Newton sof Json or json.net was never meant to be the most",
    "start": "734279",
    "end": "739560"
  },
  {
    "text": "performant way to dilize or sterilize data it supports a lot of different oddl",
    "start": "739560",
    "end": "746399"
  },
  {
    "text": "looking Json documents it can do a whole lot of H cases and meaning that then it",
    "start": "746399",
    "end": "751720"
  },
  {
    "text": "cannot be as performant as something that just follows a standard so if you use system. text. Json on both ends of",
    "start": "751720",
    "end": "757839"
  },
  {
    "text": "your communication that's going to be the fastest alternative but also a little bit limiting in terms of of",
    "start": "757839",
    "end": "763320"
  },
  {
    "text": "handling oddl looking Json documents but with that being said",
    "start": "763320",
    "end": "769079"
  },
  {
    "text": "they've added a lot of support in system. Tex adjacent to handle different types of situations and Inn net um 8",
    "start": "769079",
    "end": "777399"
  },
  {
    "text": "they've uh made some changes to this to support uh readon as well as required",
    "start": "777399",
    "end": "783880"
  },
  {
    "text": "and init only properties so let's take a look at adjacent document I have this Json data defined as an inside my code",
    "start": "783880",
    "end": "792240"
  },
  {
    "text": "here using the raw string literal even gives me a little bit of syntax highlighting in Visual Studio I specify",
    "start": "792240",
    "end": "798240"
  },
  {
    "text": "username I have a collection of phone numbers that I want to populate with some information looks like a very standard Json document now if we go to",
    "start": "798240",
    "end": "805279"
  },
  {
    "text": "the uh the actual record of this and look at what the implementation does it has a required property here which also",
    "start": "805279",
    "end": "811720"
  },
  {
    "text": "has an init only Auto property and previously Net 7 it",
    "start": "811720",
    "end": "817120"
  },
  {
    "text": "wouldn't really do anything with this I think you'd get an exception even if you tried to initialize this in it only Auto",
    "start": "817120",
    "end": "822440"
  },
  {
    "text": "property just didn't have a support for it but now it can set this to a value and if you neglect it from the Json",
    "start": "822440",
    "end": "828360"
  },
  {
    "text": "document and it has a required keyword here you will get an exception when you desizing this because it's now required",
    "start": "828360",
    "end": "834880"
  },
  {
    "text": "to specify this and now also notice that I have a public list of phone numbers here that's",
    "start": "834880",
    "end": "841279"
  },
  {
    "text": "read only I initialize this to a new instance when I initialize my record",
    "start": "841279",
    "end": "846480"
  },
  {
    "text": "type so traditionally what the Das distalizer would do is that it would see",
    "start": "846480",
    "end": "852040"
  },
  {
    "text": "that you have this this list of phone numbers specified here it would then create a new representation and try to",
    "start": "852040",
    "end": "858880"
  },
  {
    "text": "dreference what you have on your user or your object but that doesn't work because this here is",
    "start": "858880",
    "end": "865800"
  },
  {
    "text": "immutable so what they added was a support for saying when we create this we can specify how this property is",
    "start": "865800",
    "end": "872240"
  },
  {
    "text": "going to be handled and I can say that you should populate this with information if that's available in the Json document so we actually create an",
    "start": "872240",
    "end": "879360"
  },
  {
    "text": "instance of this class it will call the add method on that list and add the phone numbers to it while setting this",
    "start": "879360",
    "end": "885839"
  },
  {
    "text": "demo up or while experimenting with this prior to net 8 being released I noticed that well if I add a primary",
    "start": "885839",
    "end": "893720"
  },
  {
    "text": "Constructor I can't even spell if I add a primary Constructor this will not work and that should be upper case because",
    "start": "893720",
    "end": "899519"
  },
  {
    "text": "it's supposed to be publicly exposed if I do that then it doesn't work for some reason the dilzer was not capable or",
    "start": "899519",
    "end": "907040"
  },
  {
    "text": "deserializer wasn't capable of first using a primary Constructor and then also using the object creation handling",
    "start": "907040",
    "end": "913800"
  },
  {
    "text": "so if you run into this situation this is not going to work this is going to give you an exception so you cannot use",
    "start": "913800",
    "end": "919040"
  },
  {
    "text": "the primary Constructors as well as the Json object creation handling attributes",
    "start": "919040",
    "end": "924079"
  },
  {
    "text": "I reported this to Microsoft and they had two Alternatives one option was to rewrite",
    "start": "924079",
    "end": "930079"
  },
  {
    "text": "the entire serializer and this was about 2 weeks prior to8 being released anyone",
    "start": "930079",
    "end": "935360"
  },
  {
    "text": "think that's a good idea no I would have done it but then again I don't really work with that kind of thing um kind of",
    "start": "935360",
    "end": "942360"
  },
  {
    "text": "the reason I guess so they didn't do that instead what they did was the second best thing you're going to get an",
    "start": "942360",
    "end": "947560"
  },
  {
    "text": "exception saying that you can't do that so you can't combine those two concepts all right so that's um allowing",
    "start": "947560",
    "end": "954920"
  },
  {
    "text": "us to then use the required we have to specify this in Jon do it po also populates this uh with with information",
    "start": "954920",
    "end": "962480"
  },
  {
    "text": "the next thing is providing additions to some extensions so I have this",
    "start": "962480",
    "end": "968199"
  },
  {
    "text": "URL that points to an API and let's see if this API is still up and running this is just a a Json document a collection",
    "start": "968199",
    "end": "976120"
  },
  {
    "text": "and all that it has it's just a tiny list of of stock prices really every object is just an representation of what",
    "start": "976120",
    "end": "982720"
  },
  {
    "text": "a stock price could be and what I want to do is that I want to use an HTTP client I want to fetch",
    "start": "982720",
    "end": "988160"
  },
  {
    "text": "this document and I just want to serialize or deserialize each element what I can do is that I can use an",
    "start": "988160",
    "end": "994040"
  },
  {
    "text": "extension for for IAS syn enumerable that's for the HTTP client to say that",
    "start": "994040",
    "end": "999240"
  },
  {
    "text": "well based on my client we're going to get some Json and I'm going to treat that as an async innumerable each",
    "start": "999240",
    "end": "1005199"
  },
  {
    "text": "element that is going to be streamed into my for each Loop is going to be a stock representation right the stock is simply",
    "start": "1005199",
    "end": "1012440"
  },
  {
    "text": "a record type with the stock name uh and the trade date just to keep it very simple so this allows us to do then is",
    "start": "1012440",
    "end": "1020040"
  },
  {
    "text": "to say that this here is going to handle downloading the data and then I can use a weit for each to iterate across each",
    "start": "1020040",
    "end": "1026280"
  },
  {
    "text": "element that comes in from that stream of data this is a little bit confusing because it feels like it's going to",
    "start": "1026280",
    "end": "1032678"
  },
  {
    "text": "fetch one element at a time from the web server but that's not really what happens but there's still a lot of",
    "start": "1032679",
    "end": "1038240"
  },
  {
    "text": "performance improvements doing this and there's a lot of benefits of doing this approach instead in Net 7 I would",
    "start": "1038240",
    "end": "1044400"
  },
  {
    "text": "probably have gone ahead and said download all the string from this resource deserialize this entire",
    "start": "1044400",
    "end": "1049760"
  },
  {
    "text": "collection of data into my representation what this is doing instead is that it's opening up a socket",
    "start": "1049760",
    "end": "1054880"
  },
  {
    "text": "to the web server it's buffer loading some data it has a stream open to that website or the API it passes that onto",
    "start": "1054880",
    "end": "1062600"
  },
  {
    "text": "the Der serializer and as it has data available it's going to deserialize the information it has available so if the",
    "start": "1062600",
    "end": "1070039"
  },
  {
    "text": "response is really large and you're loading a few thousand bytes at a time",
    "start": "1070039",
    "end": "1075159"
  },
  {
    "text": "then this here will just load a little portion at a time as well so it's still uses that kind of idea of a buffer and",
    "start": "1075159",
    "end": "1080640"
  },
  {
    "text": "it doesn't do a lot of extra memory allocations it's a really clever way of working with",
    "start": "1080640",
    "end": "1085960"
  },
  {
    "text": "this so it doesn't add any pagination but still memory memory-wise it's a lot more",
    "start": "1085960",
    "end": "1091880"
  },
  {
    "text": "performant the final thing they've added support for in do Net 7 was the polymorphic deserialization and",
    "start": "1091880",
    "end": "1097880"
  },
  {
    "text": "serialization and they did some improvements to this in net 8 so we can have this attribute to Define that an",
    "start": "1097880",
    "end": "1103520"
  },
  {
    "text": "object can have a couple of subclasses to it we can add the discriminator to the Json document when it's generated",
    "start": "1103520",
    "end": "1110360"
  },
  {
    "text": "and now with N8 they also added support for having interfaces as a representation so they add small things",
    "start": "1110360",
    "end": "1117200"
  },
  {
    "text": "as well as some larger things to make this a little bit more complete because if you work with this in a real application you're going to run into",
    "start": "1117200",
    "end": "1123799"
  },
  {
    "text": "situations where it feels like you're missing things from Newton soft. Json but we're getting closer to the I guess",
    "start": "1123799",
    "end": "1130000"
  },
  {
    "text": "the the the um the state where this is feeling a little bit more",
    "start": "1130000",
    "end": "1135039"
  },
  {
    "text": "complete so next up we have something called the time",
    "start": "1135039",
    "end": "1141280"
  },
  {
    "text": "abstractions or rather it's called a Time provider but it's an abstraction for how to work with dates and times the",
    "start": "1141280",
    "end": "1147000"
  },
  {
    "text": "idea is that we want a better way to work with dates and times in net because we surely enough we can use datetime",
    "start": "1147000",
    "end": "1153240"
  },
  {
    "text": "offset or date time if you really want to but you know using this in a",
    "start": "1153240",
    "end": "1158520"
  },
  {
    "text": "situation like my code piece here I have this service that's handling some payment it has to calculate some",
    "start": "1158520",
    "end": "1164080"
  },
  {
    "text": "information and it's tightly coupled to daytime offset this is is really hard to test or",
    "start": "1164080",
    "end": "1171080"
  },
  {
    "text": "setting up different situations how to mock this with information and surely enough I could write my own wrapper",
    "start": "1171080",
    "end": "1177039"
  },
  {
    "text": "class for daytime offset I could have an action I could inject the daytime into this method but you know most developers",
    "start": "1177039",
    "end": "1183760"
  },
  {
    "text": "will probably just go with this and don't write a test which you shouldn't you should always write test for",
    "start": "1183760",
    "end": "1189720"
  },
  {
    "text": "everything but now in net there's something built in to help us work with this a little bit better so again let's",
    "start": "1189720",
    "end": "1196120"
  },
  {
    "text": "jump over to visual studio we have a new type called a Time provider and this is the same code piece",
    "start": "1196120",
    "end": "1202919"
  },
  {
    "text": "it has this order service has a method called has payment expired and instead of saying daytime offset UTC now I want",
    "start": "1202919",
    "end": "1209600"
  },
  {
    "text": "to leverage this built-in type for a fact most developers will try to use",
    "start": "1209600",
    "end": "1214679"
  },
  {
    "text": "built-in types instead of pulling down yug packages you can solve this with NOA time but that's a whole different",
    "start": "1214679",
    "end": "1220200"
  },
  {
    "text": "learning curve using the built-in stuff is a lot of a lot of the times what",
    "start": "1220200",
    "end": "1225480"
  },
  {
    "text": "people would do so I'm going to go ahead and introduce a Constructor because now I want something to be injected I want a",
    "start": "1225480",
    "end": "1231720"
  },
  {
    "text": "Time provider to be injected into this class and now that this is injected by",
    "start": "1231720",
    "end": "1236840"
  },
  {
    "text": "the dependency injection I can then use this and instead of using daytime after.",
    "start": "1236840",
    "end": "1241960"
  },
  {
    "text": "UTC now I'm going to do get UTC now effectively doing the same thing but",
    "start": "1241960",
    "end": "1247840"
  },
  {
    "text": "if we look at the implementation or the this class it has a virtual method called get UTC now which means that I",
    "start": "1247840",
    "end": "1254240"
  },
  {
    "text": "can overwrite this it lives in an abstract class called a Time provider which means that I can override this",
    "start": "1254240",
    "end": "1259559"
  },
  {
    "text": "myself meaning I can write fake implementations or custom implementations or use the built-in ones",
    "start": "1259559",
    "end": "1265200"
  },
  {
    "text": "if I wanted to and there is a um way for us of course then to override this I can",
    "start": "1265200",
    "end": "1271000"
  },
  {
    "text": "Implement my own custom time provider and set up some custom daytime offset or",
    "start": "1271000",
    "end": "1276159"
  },
  {
    "text": "how what happens actually when I call get UTC now and then I could use this for all my different",
    "start": "1276159",
    "end": "1281600"
  },
  {
    "text": "tests but of course we don't really have to do that we can use what's called a fake time Provider from uh microsoft.",
    "start": "1281600",
    "end": "1287679"
  },
  {
    "text": "extensions. time testing and what this allows us to do is to say that it sets up a default time when you create it and",
    "start": "1287679",
    "end": "1294600"
  },
  {
    "text": "unless you specify what happens when you call get UTC now it's going to be the same time but here I can say that every",
    "start": "1294600",
    "end": "1300880"
  },
  {
    "text": "time you request the time I'm going to automatically add one hour this would have been really",
    "start": "1300880",
    "end": "1306600"
  },
  {
    "text": "beneficial when I was working on an application for public transport where we had an issue twice a year tickets",
    "start": "1306600",
    "end": "1312880"
  },
  {
    "text": "would either be expiring 1 hour early or 1 hour later due to Daylight savings but",
    "start": "1312880",
    "end": "1318600"
  },
  {
    "text": "you know no one really cared because it happens as Saturday mornings at like 2:00 a.m. people forget at that time of",
    "start": "1318600",
    "end": "1325440"
  },
  {
    "text": "day so um yeah we just let it be until we refactor the solution and build",
    "start": "1325440",
    "end": "1330679"
  },
  {
    "text": "something new but this would have been helpful because then we could have built some really good tests for it and we can",
    "start": "1330679",
    "end": "1335840"
  },
  {
    "text": "also use the built-in system. time provider if we want to so there's a default implementation",
    "start": "1335840",
    "end": "1341559"
  },
  {
    "text": "that we can use make makes this a little bit easier to test and we no longer have to be tightly coupled to daytime offset",
    "start": "1341559",
    "end": "1347600"
  },
  {
    "text": "for example even though it's using daytime offset internally it's better to have an abstraction like",
    "start": "1347600",
    "end": "1352760"
  },
  {
    "text": "this the final thing in the core components of net is working with Randomness a small thing but every time",
    "start": "1352760",
    "end": "1358720"
  },
  {
    "text": "you need to set up like a seed for a new random instance it's a little bit tedious which means that your random",
    "start": "1358720",
    "end": "1365080"
  },
  {
    "text": "isn't really that random so this here is a little bit of a better alternative to say hey I'm going to use this shared instance I can pass a collection to it",
    "start": "1365080",
    "end": "1371760"
  },
  {
    "text": "to ask for a couple of random elements I can Shuffle I can get the next bites next integers and whatnot",
    "start": "1371760",
    "end": "1378600"
  },
  {
    "text": "so again that's it for the built-in or the the core components of net let's now talk about asp.net core and again this",
    "start": "1378600",
    "end": "1386600"
  },
  {
    "text": "here will leverage all of those performance improvements everything that's been used with ranges and all the",
    "start": "1386600",
    "end": "1392559"
  },
  {
    "text": "system. tex. Json improvements and all of that will be applicable you know in asp.net core in net Maui WPF wi fors and",
    "start": "1392559",
    "end": "1400960"
  },
  {
    "text": "whatnot but when it comes to h.net core they've made improvements in terms of adding HTTP 3 support there's uh laser",
    "start": "1400960",
    "end": "1408760"
  },
  {
    "text": "improvements better metrics better debugging there a whole lot of different things so instead of just showing you",
    "start": "1408760",
    "end": "1415559"
  },
  {
    "text": "slides I'm going to jump over to visal Studio I have this project simple",
    "start": "1415559",
    "end": "1420960"
  },
  {
    "text": "asp.net core application if you've never seen a top level statement this is the new way of building a an application in",
    "start": "1420960",
    "end": "1427799"
  },
  {
    "text": "net and especially for minimal apis this is the way that you're going to build your your API going forward so what I",
    "start": "1427799",
    "end": "1434480"
  },
  {
    "text": "can do here is I can set up my services I can register things I can use dependency injection and all of that the",
    "start": "1434480",
    "end": "1440880"
  },
  {
    "text": "first thing I'm going to do is to use this concept called a heed service so I want one interface and I have multiple",
    "start": "1440880",
    "end": "1448240"
  },
  {
    "text": "different implementations in older versions ofn net you couldn't really register multiple implementations for",
    "start": "1448240",
    "end": "1453960"
  },
  {
    "text": "that same interface it wasn't really easy so instead now I have this concept",
    "start": "1453960",
    "end": "1459159"
  },
  {
    "text": "of I key service so I can say I have a default transient one whenever I ask for an I cache it's going to give me this in",
    "start": "1459159",
    "end": "1465200"
  },
  {
    "text": "memory cache but if you request an cash and you just indicate that I'd like to",
    "start": "1465200",
    "end": "1471360"
  },
  {
    "text": "get a distributed cach if that's available then this will be injected instead or for this memory one and the",
    "start": "1471360",
    "end": "1478080"
  },
  {
    "text": "way that we use this is by defining an attribute so let's go down to a method here where I'm mapping the root of the",
    "start": "1478080",
    "end": "1484399"
  },
  {
    "text": "application and whenever this asp.net core application runs and you hit that endpoint it's going to automatically",
    "start": "1484399",
    "end": "1491000"
  },
  {
    "text": "pass the HTP context it's going to try and get an I cache from the the service collection and since I've added this",
    "start": "1491000",
    "end": "1497720"
  },
  {
    "text": "attribute it's it's going to try and get me that distributed cache if it's not available that's fine it's going to fall",
    "start": "1497720",
    "end": "1504080"
  },
  {
    "text": "back on the default one but at least this is a way for me to indicate what I'd like to get and for a test then that",
    "start": "1504080",
    "end": "1510159"
  },
  {
    "text": "means that I can pass whatever I want so the key services are a nice",
    "start": "1510159",
    "end": "1516480"
  },
  {
    "text": "addition as well as the global exception handling if we want to handle exceptions which we which we probably should we can",
    "start": "1516480",
    "end": "1522679"
  },
  {
    "text": "now very easily register exception handlers with uh with asp.net core so",
    "start": "1522679",
    "end": "1527960"
  },
  {
    "text": "I've implemented the I exception Handler which gives us the capability of having this try handle method it will try to",
    "start": "1527960",
    "end": "1534600"
  },
  {
    "text": "handle your exception and if it returns true it will just stop running your your your processing pipeline if it returns",
    "start": "1534600",
    "end": "1541480"
  },
  {
    "text": "false it's going to try and pass that onto the next exception Handler and if none of them handles it it's going to use the default built-in exception",
    "start": "1541480",
    "end": "1548480"
  },
  {
    "text": "handling which is probably just either you know displaying that developer error page or whatever custom error page that",
    "start": "1548480",
    "end": "1554480"
  },
  {
    "text": "you might have so that's a little bit easier makes it easier for us to just multiple different exception",
    "start": "1554480",
    "end": "1561080"
  },
  {
    "text": "handlers a bigger thing is probably the hosted Services has anyone use hosted services in asp.net",
    "start": "1561080",
    "end": "1567440"
  },
  {
    "text": "core okay about half of you that's amazing so there's a couple of changes",
    "start": "1567440",
    "end": "1573080"
  },
  {
    "text": "to this if I look at this hosted service which is really just a way for us to run",
    "start": "1573080",
    "end": "1579960"
  },
  {
    "text": "background work it's a way for us to set up a process that executes something in the background of our process of the hp.",
    "start": "1579960",
    "end": "1587000"
  },
  {
    "text": "core application it's not per request but it's running as a part of your application and processing stuff in the",
    "start": "1587000",
    "end": "1593640"
  },
  {
    "text": "background now previously we only had this interface called an IH hosted",
    "start": "1593640",
    "end": "1598679"
  },
  {
    "text": "service which gave us the capability of running code when we start the service and when we stop the service that's a",
    "start": "1598679",
    "end": "1604760"
  },
  {
    "text": "little bit limiting instead what they've done now is to introduce an IH hosted life cycle",
    "start": "1604760",
    "end": "1610640"
  },
  {
    "text": "service which gives us a whole more flexibility and it gives you more gr granularity as to what you can handle",
    "start": "1610640",
    "end": "1617159"
  },
  {
    "text": "and what you can do with your hosted service for example these are all in order of how they will execute so when",
    "start": "1617159",
    "end": "1623080"
  },
  {
    "text": "you're about to start your service you can run some information let's say that you want to create some cues you want to",
    "start": "1623080",
    "end": "1629440"
  },
  {
    "text": "create some in some stuff for this service to execute you want you don't want to have that inside your start",
    "start": "1629440",
    "end": "1634720"
  },
  {
    "text": "method you can then run code when that has started after it's actually starting",
    "start": "1634720",
    "end": "1639919"
  },
  {
    "text": "and then the same goes for when before it's stopping when it's stopping and after it has actually stopped so you have all these these different methods",
    "start": "1639919",
    "end": "1646320"
  },
  {
    "text": "that you can execute for your hostage service it's a nice addition to it because if you've used hosted Services",
    "start": "1646320",
    "end": "1651960"
  },
  {
    "text": "you probably ran into the situation where this would have been a nice addition to have now there's also a support for",
    "start": "1651960",
    "end": "1659799"
  },
  {
    "text": "something called a short circuit route for minimal apis so let's say that I want to execute this code piece here",
    "start": "1659799",
    "end": "1666200"
  },
  {
    "text": "immediately when you execute SL short-circuit if I add this method call",
    "start": "1666200",
    "end": "1673000"
  },
  {
    "text": "here at the end to indicate that this here should be a shortcircuit route that means that once a net core has",
    "start": "1673000",
    "end": "1679120"
  },
  {
    "text": "identified that you want to execute this particular action it will bypass all the other middlewares it won't do any",
    "start": "1679120",
    "end": "1685799"
  },
  {
    "text": "cookies it won't do any authentication or sessions or all of the other ones that executes after the routing is",
    "start": "1685799",
    "end": "1691799"
  },
  {
    "text": "done this is great for things like robots.txt or if you want to return some",
    "start": "1691799",
    "end": "1697519"
  },
  {
    "text": "status or something that doesn't depend on all your other middlewares that's set up for your",
    "start": "1697519",
    "end": "1702880"
  },
  {
    "text": "application finally in asp.net core we have the the concept of complex binding",
    "start": "1702880",
    "end": "1708360"
  },
  {
    "text": "so I can buy to complex types of data like a form file and here I've set up another mapkit to say that I want to be",
    "start": "1708360",
    "end": "1714799"
  },
  {
    "text": "able to upload some information it's going to get the HTP context it's going to also get the capability of doing",
    "start": "1714799",
    "end": "1720840"
  },
  {
    "text": "anti-forgery token which we really should use and then I'm doing some HTML inline",
    "start": "1720840",
    "end": "1726600"
  },
  {
    "text": "here and and honestly this brings me back 20 years to when I did PHP",
    "start": "1726600",
    "end": "1731679"
  },
  {
    "text": "everything was in my index.php and I had my HTML in line with my code and one filler resemblance now I'm just old I",
    "start": "1731679",
    "end": "1739880"
  },
  {
    "text": "guess all right so what I do here I set up a form that allows me to post into a map post and if we scroll down to that",
    "start": "1739880",
    "end": "1746399"
  },
  {
    "text": "one it allows me to then accept this iform file which is this concept of a binding to a complex type and you",
    "start": "1746399",
    "end": "1753039"
  },
  {
    "text": "couldn't do this before in minimal apis so this is a good addition meaning that it's now a little bit more complete as",
    "start": "1753039",
    "end": "1758799"
  },
  {
    "text": "to what you can do with these apis so let me just show you this and I'm going to go into SL upload",
    "start": "1758799",
    "end": "1764559"
  },
  {
    "text": "I'm going to choose a file we're going to upload this and we're going to see a couple of things first of all I can see",
    "start": "1764559",
    "end": "1770120"
  },
  {
    "text": "that I have my Forum file here it has all the data I can read the data from it and in older versions this wasn't",
    "start": "1770120",
    "end": "1776360"
  },
  {
    "text": "possible with the minimal apis you had to go back into the traditional MVC template if you wanted to do this",
    "start": "1776360",
    "end": "1783480"
  },
  {
    "text": "another addition is to the debugging experience so this might be hard to see but if I hover context for example it's",
    "start": "1783480",
    "end": "1790360"
  },
  {
    "text": "now going to show me the entire request that in instantiated this or or initiated this method call I can drill",
    "start": "1790360",
    "end": "1798519"
  },
  {
    "text": "down into this and there's now a lot more information right out of the box here so you don't have to drill down into like a million different properties",
    "start": "1798519",
    "end": "1805519"
  },
  {
    "text": "to get some good information this is all done by just overwriting two string it will then show",
    "start": "1805519",
    "end": "1811159"
  },
  {
    "text": "up in the debugger super simple but someone had to do it so",
    "start": "1811159",
    "end": "1816760"
  },
  {
    "text": "that's it for the core components of asp.net core we have the uh performance improvements we have support for HTTP 3",
    "start": "1816760",
    "end": "1824640"
  },
  {
    "text": "we have shortcircuit routes which allows us to then execute data IM immediately which is quite nice the cage Services is",
    "start": "1824640",
    "end": "1831679"
  },
  {
    "text": "a great addition because now we don't have to set up extra interfaces for the more granular things that we want to",
    "start": "1831679",
    "end": "1838039"
  },
  {
    "text": "inject and we can still write really good tests for this we also have the this notion of a",
    "start": "1838039",
    "end": "1845480"
  },
  {
    "text": "complex binding in a minimal API allows us to then bind to that I form file",
    "start": "1845480",
    "end": "1851559"
  },
  {
    "text": "making the minimal apis more complete making them more viable for real world",
    "start": "1851559",
    "end": "1857360"
  },
  {
    "text": "applications they've been good for a long time but you know this here just makes it a",
    "start": "1857360",
    "end": "1863399"
  },
  {
    "text": "little bit better makes it easier to use for most types of application that we might want to to",
    "start": "1863399",
    "end": "1868559"
  },
  {
    "text": "build and finally we have this IH hosted life cycle service which expands on the",
    "start": "1868559",
    "end": "1874120"
  },
  {
    "text": "concept of a hosted service if you want to run background work a nice addition and this also requires support in the",
    "start": "1874120",
    "end": "1880159"
  },
  {
    "text": "runtime so it's not just about adding support in net as a framework it's also",
    "start": "1880159",
    "end": "1888279"
  },
  {
    "text": "it also has to you know go back into the runtime that has to know about all of these different things but this has no been added and",
    "start": "1888279",
    "end": "1894880"
  },
  {
    "text": "it's a great addition and I guess we can't really talk about asp.net core and I can't say that I'm done with asp.net",
    "start": "1894880",
    "end": "1900600"
  },
  {
    "text": "core without even mentioning blacer is anyone here building Blazer",
    "start": "1900600",
    "end": "1906080"
  },
  {
    "text": "applications all right about two handfuls so with net 8 I've been very",
    "start": "1906080",
    "end": "1912039"
  },
  {
    "text": "intrigued by blazer for many versions of net but honestly just with net it's",
    "start": "1912039",
    "end": "1918279"
  },
  {
    "text": "probably a really viable Pro product to use for full stack web UI because now",
    "start": "1918279",
    "end": "1924120"
  },
  {
    "text": "you can develop applications that have different rendering modes it can be rendered you know at a Content um at a a",
    "start": "1924120",
    "end": "1931600"
  },
  {
    "text": "component level or page level you can have different streaming modes you can do a lot of different things with blazer",
    "start": "1931600",
    "end": "1936880"
  },
  {
    "text": "to allow you to build pretty powerful applications and if you've ever used web fors or you know older Technologies I'm",
    "start": "1936880",
    "end": "1944799"
  },
  {
    "text": "not going to say this is an evolution of web fors but it's honestly as easy as working with Razer and the concept of",
    "start": "1944799",
    "end": "1951000"
  },
  {
    "text": "working with something that runs really nicely like web firms did without a lot of the the problems that they' had back",
    "start": "1951000",
    "end": "1956559"
  },
  {
    "text": "in the day someone's going to comment that that was a really not a good thing to say but",
    "start": "1956559",
    "end": "1962279"
  },
  {
    "text": "you know I I like Blazer and with net8 it's a really good product to use for going forward for building web",
    "start": "1962279",
    "end": "1968360"
  },
  {
    "text": "applications especially if you're doing full stack web UI and again I guess we can't really talk about building web",
    "start": "1968360",
    "end": "1974760"
  },
  {
    "text": "applications without even mentioning what was talked about here earlier today and that's net Aspire net Aspire was",
    "start": "1974760",
    "end": "1981639"
  },
  {
    "text": "made generally available I guess a couple of weeks ago late May and it's um it's a little tricky to",
    "start": "1981639",
    "end": "1991200"
  },
  {
    "text": "understand exactly what it is if you go to the net Aspire website where they they try to tell you what this product",
    "start": "1991200",
    "end": "1997480"
  },
  {
    "text": "is about because the first thing that you you're met with is text saying this is a cloud ready stack for building",
    "start": "1997480",
    "end": "2005000"
  },
  {
    "text": "observable cloud ready production ready distributed applications I've probably read that text 15 times and I still have",
    "start": "2005000",
    "end": "2011519"
  },
  {
    "text": "no clue at all what that actually means so the best way to learn how",
    "start": "2011519",
    "end": "2016960"
  },
  {
    "text": "something works is to probably go into visual studio and try to set something up so because that bus Word Bingo",
    "start": "2016960",
    "end": "2024000"
  },
  {
    "text": "doesn't give me a lot but when I set up net Aspire in a sample product or some sample project I",
    "start": "2024000",
    "end": "2031120"
  },
  {
    "text": "found out that this here makes it a little bit easier for me to actually build my applications locally and get some overview of exactly what's going on",
    "start": "2031120",
    "end": "2037799"
  },
  {
    "text": "and then you can also use this to then distribute your applications and make that process easier as well but let me",
    "start": "2037799",
    "end": "2042919"
  },
  {
    "text": "show you exactly what's happening here so I created a new net Aspire pro project it gave me an API service which",
    "start": "2042919",
    "end": "2049158"
  },
  {
    "text": "is just a minimal API you probably already have a minimal API or an asp.net core API that you want to point to but",
    "start": "2049159",
    "end": "2056520"
  },
  {
    "text": "this just set up that for us and then it also gave us a web",
    "start": "2056520",
    "end": "2061839"
  },
  {
    "text": "frontend so there's two components in this and that's annoying stop doing that so this here set up",
    "start": "2061839",
    "end": "2069000"
  },
  {
    "text": "a Blazer application it doesn't really matter what kind of web UI framework you're using but this here set up an API",
    "start": "2069000",
    "end": "2075158"
  },
  {
    "text": "and a web frontend and you might have other services as well like something in Asher you might have some other",
    "start": "2075159",
    "end": "2080358"
  },
  {
    "text": "different services that you're running in part of your application so where net Aspire comes into the picture is has",
    "start": "2080359",
    "end": "2086480"
  },
  {
    "text": "nothing to do with these two Services what it actually does is that it's orchestrating information and let me",
    "start": "2086480",
    "end": "2092000"
  },
  {
    "text": "just close all of these other things it's going to orchestrate",
    "start": "2092000",
    "end": "2097320"
  },
  {
    "text": "information between these different services so I'm setting up a reference to my API service",
    "start": "2097320",
    "end": "2102800"
  },
  {
    "text": "and I'm going to reference that as an API service and then I'm going to set up a reference to my web front end I'm",
    "start": "2102800",
    "end": "2108760"
  },
  {
    "text": "going to specify that this is going to have some external HTP end points and it will have a reference to my API service",
    "start": "2108760",
    "end": "2115200"
  },
  {
    "text": "what that means is that now net Aspire will help me do a couple of things it will set up a dashboard it will start",
    "start": "2115200",
    "end": "2122040"
  },
  {
    "text": "both of these applications and it will populate configurations from the different services into this web front",
    "start": "2122040",
    "end": "2128920"
  },
  {
    "text": "and here so it will orchestrate information between them and allow us to work with this a little bit better for",
    "start": "2128920",
    "end": "2134599"
  },
  {
    "text": "local development this is really good and if I run this I have a single point",
    "start": "2134599",
    "end": "2140119"
  },
  {
    "text": "that I execute and start and this will then be in charge of running my applications making sure that I can",
    "start": "2140119",
    "end": "2145800"
  },
  {
    "text": "start my API I can run my my blazer application and it has a reference to",
    "start": "2145800",
    "end": "2151880"
  },
  {
    "text": "that weather API by just getting that URL injected into the application",
    "start": "2151880",
    "end": "2158720"
  },
  {
    "text": "it then gives us the console for the different applications as well if you want to drill down to the console output",
    "start": "2158720",
    "end": "2163839"
  },
  {
    "text": "I can get logs traces and some metrics as well so net Aspire allows us to to",
    "start": "2163839",
    "end": "2169960"
  },
  {
    "text": "kind of orchestrate information it allows us to set up One dashboard on one place to then work with our different",
    "start": "2169960",
    "end": "2176319"
  },
  {
    "text": "applications and for local development this is really",
    "start": "2176319",
    "end": "2181400"
  },
  {
    "text": "good all right the final thing that I want to talk about before we head over to talk about the language features of C",
    "start": "2182960",
    "end": "2190839"
  },
  {
    "text": "is net Maui net Maui has been a really interesting Evolution from",
    "start": "2190839",
    "end": "2197280"
  },
  {
    "text": "samaron and it's just with net 8 that I find that this was a good opportunity to",
    "start": "2197280",
    "end": "2203400"
  },
  {
    "text": "actually jump on and build a net Maui application and again I hope no one here",
    "start": "2203400",
    "end": "2210280"
  },
  {
    "text": "works at Microsoft because comparing net Maui to a uh an unfinished building is",
    "start": "2210280",
    "end": "2215720"
  },
  {
    "text": "probably not the best way to make friends but with net 6 honestly net Maui wasn't",
    "start": "2215720",
    "end": "2221319"
  },
  {
    "text": "really ready for production it wasn't re really ready to be used in real product",
    "start": "2221319",
    "end": "2226760"
  },
  {
    "text": "in real projects we were still using samarin in a lot someone's taking photos",
    "start": "2226760",
    "end": "2232200"
  },
  {
    "text": "no I'm just kidding so you know I we used samarin right up until net 8",
    "start": "2232200",
    "end": "2237800"
  },
  {
    "text": "because right now there's it feels like net Maui is at a stage where it's",
    "start": "2237800",
    "end": "2243440"
  },
  {
    "text": "actually really good to work with there's less bugs it's not going to be bug free for a long long time but the",
    "start": "2243440",
    "end": "2248800"
  },
  {
    "text": "developer experience is a lot better than what it used to be with samarin and what it used to be in the early days",
    "start": "2248800",
    "end": "2254079"
  },
  {
    "text": "ofet Maui as well so the idea is that now it's it's all done it's not really",
    "start": "2254079",
    "end": "2260680"
  },
  {
    "text": "but it's a at least it's a viable thing for crossplatform development and a more fair way to look at this is with Net 7",
    "start": "2260680",
    "end": "2267520"
  },
  {
    "text": "because they missed the deadline with net 6 they couldn't release it as a product with net 6 there were just too many things that didn't work and the",
    "start": "2267520",
    "end": "2274000"
  },
  {
    "text": "same goes for Net 7 which was a short-term release cycle no one at least",
    "start": "2274000",
    "end": "2279160"
  },
  {
    "text": "larger companies don't jump on to short-term release Cycles they want to wait until it feels like it's long-term",
    "start": "2279160",
    "end": "2285319"
  },
  {
    "text": "support even though you should upgrade with every version that makes your life a lot easier and I'm not just saying",
    "start": "2285319",
    "end": "2291160"
  },
  {
    "text": "that because I'm a consultant and get paid to upgrade but it is actually easier in the long term so with net it",
    "start": "2291160",
    "end": "2297680"
  },
  {
    "text": "feels like it's a more complete picture and the idea is still that you build this crossplatform UI and crossplatform",
    "start": "2297680",
    "end": "2303560"
  },
  {
    "text": "application targeting all these different applications or platforms I'm sorry it builds on the same Concepts as",
    "start": "2303560",
    "end": "2310400"
  },
  {
    "text": "samin did it's just a little bit easier to work with and with that being said let's uh",
    "start": "2310400",
    "end": "2317119"
  },
  {
    "text": "switch gears a little bit because we've talked about everything in performance- Wise we've talked about all the things in net that has been interesting enough",
    "start": "2317119",
    "end": "2324000"
  },
  {
    "text": "to talk about there's a million more things that you can read up on if you like to read up on performance and how",
    "start": "2324000",
    "end": "2329880"
  },
  {
    "text": "that has has been improved stepen to at Microsoft wrote a I think like 500 Page",
    "start": "2329880",
    "end": "2335760"
  },
  {
    "text": "Long blog post about a all the improvements made in just. net a alone",
    "start": "2335760",
    "end": "2340920"
  },
  {
    "text": "would take me like half a year to to read through all of that or talk about all of that so now we're going to talk",
    "start": "2340920",
    "end": "2346760"
  },
  {
    "text": "about C 12 and honestly this here is all the language features that have ever been released in",
    "start": "2346760",
    "end": "2352760"
  },
  {
    "text": "C there's a lot of these features that changes the way that we look at our C",
    "start": "2352760",
    "end": "2358079"
  },
  {
    "text": "applications and a lot of it is just an evolution of a concept that we might have had earlier or something that has",
    "start": "2358079",
    "end": "2364160"
  },
  {
    "text": "been around in other programming languages pattern matching is a good example of that we've always been able",
    "start": "2364160",
    "end": "2369599"
  },
  {
    "text": "to use the concept of a pattern or use the the the same principles or same way",
    "start": "2369599",
    "end": "2375000"
  },
  {
    "text": "of expressing ourselves it's just the syntax is a lot different it's easier to read it's easier to maintain and you",
    "start": "2375000",
    "end": "2382079"
  },
  {
    "text": "know easier to express yourself with so there's a lot of things in C as well as",
    "start": "2382079",
    "end": "2387920"
  },
  {
    "text": "C going forward that will help us write less code and that's more performant and you know generates a bit of code for us",
    "start": "2387920",
    "end": "2395920"
  },
  {
    "text": "so with the with c well there's a couple of features that are quite interesting",
    "start": "2395920",
    "end": "2402160"
  },
  {
    "text": "we're going to talk about primary Constructors primary Constructors is one of those things that I remember that",
    "start": "2402160",
    "end": "2409520"
  },
  {
    "text": "when they released the idea behind rebuilding the compilers back when then",
    "start": "2409520",
    "end": "2415319"
  },
  {
    "text": "they did C 6 or even before c 6 they did the project called Rosland which is now the net compiler platform they took",
    "start": "2415319",
    "end": "2422359"
  },
  {
    "text": "their old C++ compiler for C and rewrote everything in C and V B and one of the",
    "start": "2422359",
    "end": "2428880"
  },
  {
    "text": "first concept they showed off was using primary Constructors they wanted to introduce",
    "start": "2428880",
    "end": "2434040"
  },
  {
    "text": "records and and Constructors on classes and make the syntax a little bit more concise and make it easier to read and",
    "start": "2434040",
    "end": "2439839"
  },
  {
    "text": "work with but it took six versions to actually get this into the language because it's not an easy Fe it's not an",
    "start": "2439839",
    "end": "2446440"
  },
  {
    "text": "easy thing to fix it needs support in the language it needs support in you",
    "start": "2446440",
    "end": "2451960"
  },
  {
    "text": "know visual studio and all the other environments and tools that you can use as well then we see 12 we were also",
    "start": "2451960",
    "end": "2458240"
  },
  {
    "text": "getting something called a collection expression and a spread element I don't know if anyone in here",
    "start": "2458240",
    "end": "2464720"
  },
  {
    "text": "has has read about the spread element or the collection Expressions but it was previously referred to as a spread",
    "start": "2464720",
    "end": "2470000"
  },
  {
    "text": "operator but has since then been fixed in all the docks to now correctly refer",
    "start": "2470000",
    "end": "2475359"
  },
  {
    "text": "to it as a spread element we'll take a look at this as well there's a concept of interceptors and and code generation",
    "start": "2475359",
    "end": "2481359"
  },
  {
    "text": "and replacing code like I Weavers which is an interesting feature as well I have an example of that there's optional",
    "start": "2481359",
    "end": "2488079"
  },
  {
    "text": "parameters in lambdas there's Alias any type inline arrays refereed only parameters and the experimental",
    "start": "2488079",
    "end": "2493640"
  },
  {
    "text": "attribute the experimental attribute is kind of the opposite to the obsolete attribute where you can Define that I'm",
    "start": "2493640",
    "end": "2500599"
  },
  {
    "text": "experimenting with this feature and you should probably be be very cautious using my code here I think I should",
    "start": "2500599",
    "end": "2507440"
  },
  {
    "text": "probably put this on most code that I write but uh isn't all code experimental",
    "start": "2507440",
    "end": "2513200"
  },
  {
    "text": "really but it's good for Library developers because you can release something and tell people like hey I'm",
    "start": "2513200",
    "end": "2518359"
  },
  {
    "text": "not really ready with this code yet don't just put this on anything in your project um would be funny though if you",
    "start": "2518359",
    "end": "2525480"
  },
  {
    "text": "did for a final time let's jump over to visual studio all right so we're going to look",
    "start": "2525480",
    "end": "2531520"
  },
  {
    "text": "at all the features of C 12 and let me just close all of this first going to go",
    "start": "2531520",
    "end": "2536640"
  },
  {
    "text": "into not that one we're going to go into here first I want to talk about the collection Expressions The Collection",
    "start": "2536640",
    "end": "2543280"
  },
  {
    "text": "Expressions I've had this on a few slides prior as well but this is a syntax of defining a collection and I'm",
    "start": "2543280",
    "end": "2550520"
  },
  {
    "text": "not saying an array or a list because it's a way for you to create something that is what you expect on the",
    "start": "2550520",
    "end": "2557640"
  },
  {
    "text": "left hand side so in this case here I'm expressing that I want a collection of information and the target type will",
    "start": "2557640",
    "end": "2564000"
  },
  {
    "text": "then dictate exactly what's going to be generated and created in runtime so here",
    "start": "2564000",
    "end": "2569200"
  },
  {
    "text": "I can even change this I can change it to a span of a bite and it still works I can change this to an i inumerable",
    "start": "2569200",
    "end": "2575640"
  },
  {
    "text": "and it will and we create something that is appropriate an underlying data structure",
    "start": "2575640",
    "end": "2581559"
  },
  {
    "text": "that is appropriate to this type and then I can create another one",
    "start": "2581559",
    "end": "2586960"
  },
  {
    "text": "so I created my payload and again I'm a hacker so I'm using a bay here and using hex I'd like to take this payload that",
    "start": "2586960",
    "end": "2593960"
  },
  {
    "text": "I've created here as well as a check sum of this payload there are two completely different types one is a list one is a",
    "start": "2593960",
    "end": "2600319"
  },
  {
    "text": "bite array I'd like to combine these two previously in Net 7 I would probably",
    "start": "2600319",
    "end": "2606000"
  },
  {
    "text": "have relied on something like link to do this or write my own for each Loop to add it to a new list and create",
    "start": "2606000",
    "end": "2612400"
  },
  {
    "text": "something temporary like that but now instead of having to write this code",
    "start": "2612400",
    "end": "2618119"
  },
  {
    "text": "here as you'll notice this is the same data right I can say that take everything from the",
    "start": "2618119",
    "end": "2624319"
  },
  {
    "text": "payload and spread that across the start of this collection create a new collection and spread all the elements",
    "start": "2624319",
    "end": "2630240"
  },
  {
    "text": "from this first list onto the second one and I can do the same thing for my check sum",
    "start": "2630240",
    "end": "2637160"
  },
  {
    "text": "doesn't have to be two it can be like how many you'd like right this is very powerful because now I can more easily",
    "start": "2637160",
    "end": "2643680"
  },
  {
    "text": "create extra you know new representations of a combination of the different Collections and again the",
    "start": "2643680",
    "end": "2650480"
  },
  {
    "text": "collection expression will figure out that you want to spread some elements across and it will also figure out what",
    "start": "2650480",
    "end": "2656160"
  },
  {
    "text": "your target type is going to be so it's taking a list and combining that with a bite array I can even say that I'd like",
    "start": "2656160",
    "end": "2662240"
  },
  {
    "text": "the result to be a list I can say that I want this to be a span and everything will just",
    "start": "2662240",
    "end": "2668640"
  },
  {
    "text": "work of course this here is going to do extra allocations right because it",
    "start": "2668640",
    "end": "2674119"
  },
  {
    "text": "doesn't make sense to just build something with a lot of pointers this here will in fact copy that information",
    "start": "2674119",
    "end": "2680079"
  },
  {
    "text": "over and spread it across a new list of information but again the collection expressions and the spread elements is a",
    "start": "2680079",
    "end": "2686640"
  },
  {
    "text": "good addition to C next up we have this language feature called a primary",
    "start": "2686640",
    "end": "2692480"
  },
  {
    "text": "Constructor so look at this user class here I've defined that you have to specify a username when you create an",
    "start": "2692480",
    "end": "2699079"
  },
  {
    "text": "instance of the user but you know since this is a class and not a record what you notice that",
    "start": "2699079",
    "end": "2706040"
  },
  {
    "text": "I'm using a lowercase here that indicates that this is going to be private and that's exactly what's",
    "start": "2706040",
    "end": "2712280"
  },
  {
    "text": "happening in here it's going to generate a Constructor it's going to have a private field in that class and if you",
    "start": "2712280",
    "end": "2717920"
  },
  {
    "text": "want to publicly expose this you have to create your own property and initialize it to that",
    "start": "2717920",
    "end": "2723760"
  },
  {
    "text": "value so for a user maybe this doesn't make a lot of sense it makes a lot of sense in other situations and one",
    "start": "2723760",
    "end": "2731040"
  },
  {
    "text": "question that I very often get when showing off this feature is how would I",
    "start": "2731040",
    "end": "2736119"
  },
  {
    "text": "ensure that this has some Val like how do I add validation how do I ensure that this is set to an instance how do I",
    "start": "2736119",
    "end": "2742599"
  },
  {
    "text": "ensure that is has some certain value well you know in C 11 they um they",
    "start": "2742599",
    "end": "2750079"
  },
  {
    "text": "added a language feature prior to actually releasing the compilers it was called the damid operator",
    "start": "2750079",
    "end": "2757280"
  },
  {
    "text": "and as you'll notice there's quig here because they had to remove it because no one liked it what this would have",
    "start": "2757280",
    "end": "2763119"
  },
  {
    "text": "done is a couple of things it would check if it's null and if it's null it will then throw an exception a null",
    "start": "2763119",
    "end": "2768960"
  },
  {
    "text": "reference exception meaning that you'd have sort of validation but you'd have to to capture that somewhere",
    "start": "2768960",
    "end": "2775319"
  },
  {
    "text": "else the language team added this to c the Whole Net team went ahead and",
    "start": "2775319",
    "end": "2780760"
  },
  {
    "text": "refactor their entire code base on GitHub to use this and then the community didn't like it so they had to",
    "start": "2780760",
    "end": "2786520"
  },
  {
    "text": "revert all their changes it's a little bit annoying isn't it but you know by C",
    "start": "2786520",
    "end": "2792240"
  },
  {
    "text": "13 with all the dots and the exclamation marks and question marks we're going to end up having code like this",
    "start": "2792240",
    "end": "2798319"
  },
  {
    "text": "here probably it's going to look like another really interesting programming",
    "start": "2798319",
    "end": "2803400"
  },
  {
    "text": "language all joking aside if you want to add validation to this you can rely on",
    "start": "2803400",
    "end": "2809040"
  },
  {
    "text": "the compiler to know that this here should not be set to null because if you wanted nulls you'd use um you use the",
    "start": "2809040",
    "end": "2816119"
  },
  {
    "text": "nullable reference types so if we just trust the compiler and we try to use what we Define here",
    "start": "2816119",
    "end": "2823480"
  },
  {
    "text": "then we shouldn't have a problem but validating the content of the data would have to do separately so where does this make a lot",
    "start": "2823480",
    "end": "2830480"
  },
  {
    "text": "of sense it makes sense for things like let's say I have a controller I'm building an MVC application and I don't",
    "start": "2830480",
    "end": "2836520"
  },
  {
    "text": "know about you but I have a repository for every domain object I have a million",
    "start": "2836520",
    "end": "2841720"
  },
  {
    "text": "repositories and all controllers use all of them that's not the way you should do",
    "start": "2841720",
    "end": "2847160"
  },
  {
    "text": "though I'm glad no one said yes I'm doing that as well that was a trick question but I do have a lot of",
    "start": "2847160",
    "end": "2853079"
  },
  {
    "text": "repositories and a lot of services injected into my controllers and and other classes so it's quite nice that I",
    "start": "2853079",
    "end": "2858240"
  },
  {
    "text": "can say that I'd like the repository to be injected into this or i' like you to specify that when you create an instance",
    "start": "2858240",
    "end": "2864680"
  },
  {
    "text": "of the controller and this is then of course set up by the dependency injection or uh the service collection",
    "start": "2864680",
    "end": "2869839"
  },
  {
    "text": "and then I can use this inside my class I wouldn't want my repositories in this",
    "start": "2869839",
    "end": "2875280"
  },
  {
    "text": "case here or services to be exposed po publicly outside of this controller so for something like this it makes a lot",
    "start": "2875280",
    "end": "2880839"
  },
  {
    "text": "of sense and it reduces the I don't have to add a Constructor I don't have to add my own private backing fields to this it",
    "start": "2880839",
    "end": "2887559"
  },
  {
    "text": "will just um allow me to do this instead all right so the uh the final",
    "start": "2887559",
    "end": "2893280"
  },
  {
    "text": "thing I'm going to show you in Visual Studio is the concept of an Interceptor so I have this uh this class",
    "start": "2893280",
    "end": "2899880"
  },
  {
    "text": "called a logger and if we look at the implementation we can see that I have",
    "start": "2899880",
    "end": "2905480"
  },
  {
    "text": "this method called log takes a message calls log internal which throws an exception and I have a million different",
    "start": "2905480",
    "end": "2911240"
  },
  {
    "text": "break points here because I'm trying to figure out exactly what's going on because we can clearly see that it's",
    "start": "2911240",
    "end": "2916280"
  },
  {
    "text": "going to throw an exception and we can clearly see that I'm calling this method but when I run",
    "start": "2916280",
    "end": "2921800"
  },
  {
    "text": "this it's going to print something out to my console saying hello world so",
    "start": "2921800",
    "end": "2927880"
  },
  {
    "text": "something is taking control of my code here and intercepting that call something is changing what log internal",
    "start": "2927880",
    "end": "2934319"
  },
  {
    "text": "is doing if I run this with the debugger attached and I step into this method we can see",
    "start": "2934319",
    "end": "2939720"
  },
  {
    "text": "that I can't step into this nothing happens and I tried to press f11 but I just couldn't get anywhere so something",
    "start": "2939720",
    "end": "2946240"
  },
  {
    "text": "is stealing my code or stealing my my processing here the fact is that this",
    "start": "2946240",
    "end": "2951520"
  },
  {
    "text": "line here is replaced by an extension method so effectively what's going to happen is it's going to go this dot",
    "start": "2951520",
    "end": "2958400"
  },
  {
    "text": "debug log which is an extension on this class so something is doing this in in",
    "start": "2958400",
    "end": "2966720"
  },
  {
    "text": "compile time it's going to replace that call so let me undo this and I'm going to show you the code",
    "start": "2966720",
    "end": "2973359"
  },
  {
    "text": "that's being replacing this I have something called an Interceptor here",
    "start": "2973359",
    "end": "2978640"
  },
  {
    "text": "it's using the intercepts location attributes it's pointing to the exact file that I like to intercept I'm",
    "start": "2978640",
    "end": "2986240"
  },
  {
    "text": "pointing to a row in that file and a column and someone's probably thinking now like how on Earth would I know the",
    "start": "2986240",
    "end": "2992559"
  },
  {
    "text": "exact file location how would I know the line the column you have analyzers you",
    "start": "2992559",
    "end": "2997599"
  },
  {
    "text": "have Source generators you can do all of this when you're compiling your application you can pull down a Yu",
    "start": "2997599",
    "end": "3003480"
  },
  {
    "text": "package that does this for you that figures out exactly where to replace something in your code so this could be",
    "start": "3003480",
    "end": "3009240"
  },
  {
    "text": "a part of something that you're building um so actually what happens then is that",
    "start": "3009240",
    "end": "3014720"
  },
  {
    "text": "I'm pointing to that that location that column in the file and it's replacing it with this call",
    "start": "3014720",
    "end": "3020280"
  },
  {
    "text": "here the reason I can't step into it is because I added debugger hidden this is such a fun prank to pull",
    "start": "3020280",
    "end": "3026960"
  },
  {
    "text": "on your co-workers also a safe way to get fired",
    "start": "3026960",
    "end": "3032119"
  },
  {
    "text": "because people waste their time I mean it's uh you should have good review processes for all the code that",
    "start": "3032119",
    "end": "3038079"
  },
  {
    "text": "you right but if you don't surely this is a good way to get people's attention",
    "start": "3038079",
    "end": "3043960"
  },
  {
    "text": "so interceptors are used in a couple of different cases it's used in in Source",
    "start": "3043960",
    "end": "3051000"
  },
  {
    "text": "generation like imagine that I'm using aead of time compilation and now this is",
    "start": "3051000",
    "end": "3056200"
  },
  {
    "text": "a silly example because I'm just changing where I print my code but if I knew that I was going to compile this",
    "start": "3056200",
    "end": "3062880"
  },
  {
    "text": "application for a specific platform and I know that the code that I wrote will be faster if I follow a different",
    "start": "3062880",
    "end": "3069119"
  },
  {
    "text": "pattern I could use a source generator that will generate this code for me and then use the interceptors to intercept",
    "start": "3069119",
    "end": "3075760"
  },
  {
    "text": "with the code that I just generated very much like IL weaving very much like",
    "start": "3075760",
    "end": "3081480"
  },
  {
    "text": "using um using uh Source generation for things like notify property changed so",
    "start": "3081480",
    "end": "3087160"
  },
  {
    "text": "there's a lot that we can use with this and internally they use this quite heavily as well for especially native",
    "start": "3087160",
    "end": "3094040"
  },
  {
    "text": "aot so that's it for the stuff I want to show you in Visual Studio but to summarize what we've seen",
    "start": "3094040",
    "end": "3101119"
  },
  {
    "text": "here in C 12 there's the addition of primary Constructors took a while to get this into the language but it is a",
    "start": "3101119",
    "end": "3106640"
  },
  {
    "text": "welcome feature especially if you're using you know controllers and services",
    "start": "3106640",
    "end": "3111680"
  },
  {
    "text": "where you have a lot of things injected or view models for that matter as well and I I want to say this as well just",
    "start": "3111680",
    "end": "3117680"
  },
  {
    "text": "because I show you all of these amazing features it doesn't mean that you should go ahead and refactor all your codebases",
    "start": "3117680",
    "end": "3123040"
  },
  {
    "text": "to use everything that's new in net in C if you use Visual Studio or ryer or vs",
    "start": "3123040",
    "end": "3128599"
  },
  {
    "text": "code they will tell you where you could refactor your code when you're looking at it so do it one piece at a time some",
    "start": "3128599",
    "end": "3135880"
  },
  {
    "text": "of it will reduce the amount of characters some of it can be a little bit confusing if you've never used that before so just be a little bit cautious",
    "start": "3135880",
    "end": "3142640"
  },
  {
    "text": "about refactoring everything at once collection expressions are great and and then we saw all of these other features",
    "start": "3142640",
    "end": "3148040"
  },
  {
    "text": "as well which are a little bit um less important um we're going to take a look at the other ones here as well just",
    "start": "3148040",
    "end": "3154119"
  },
  {
    "text": "before we finish but to summarize that collection Expressions allows us to define a new collection using this new",
    "start": "3154119",
    "end": "3160359"
  },
  {
    "text": "syntax it will look at the Target type it will create that specific type for you and you can combine them then with",
    "start": "3160359",
    "end": "3167319"
  },
  {
    "text": "using the spread element some others might refer to it as a spread operator but now you know that the correct way to",
    "start": "3167319",
    "end": "3174000"
  },
  {
    "text": "use this is the spread element the primary Constructors are great for things like the the controllers but",
    "start": "3174000",
    "end": "3180559"
  },
  {
    "text": "maybe not as good for things like the user dto for example because if you look at the decompile code this just",
    "start": "3180559",
    "end": "3187480"
  },
  {
    "text": "introduces backing Fields I'm using IL spy here to look at what's generated behind the hoods so while it does in",
    "start": "3187480",
    "end": "3195079"
  },
  {
    "text": "introduce a two- string override as well it doesn't do any publicly exposed properties which is what you'd like if you using record types for example",
    "start": "3195079",
    "end": "3202559"
  },
  {
    "text": "things we didn't look at is the optional parameters in lambdas and you might have seen them has and spotted this in the minimal API this is one of the things",
    "start": "3202559",
    "end": "3209839"
  },
  {
    "text": "that I was missing when building minimal apis because what I ended up doing was creating a lot of different map GS to do",
    "start": "3209839",
    "end": "3217359"
  },
  {
    "text": "the different versions that I'd like to support but now with the optional parameters I can just say that well this",
    "start": "3217359",
    "end": "3223920"
  },
  {
    "text": "is optional if it's specified this method is going to do something else and of course I can then call this minimal",
    "start": "3223920",
    "end": "3229359"
  },
  {
    "text": "or this Anonymous method which is really what the minimal API uses or the Lambda",
    "start": "3229359",
    "end": "3235440"
  },
  {
    "text": "sort we can also Alias any type so I could for example say that I have this",
    "start": "3235440",
    "end": "3240960"
  },
  {
    "text": "point here and whenever you refer to this I'm going to use a topple where we",
    "start": "3240960",
    "end": "3246760"
  },
  {
    "text": "have an X and A Y and then I don't have to specify my own struct I don't have to",
    "start": "3246760",
    "end": "3252400"
  },
  {
    "text": "specify you know my own class for this this will then just be available throughout my entire application and I",
    "start": "3252400",
    "end": "3259280"
  },
  {
    "text": "guess if we append the global keyword in front of that Global using it will then be available in entire in my entire",
    "start": "3259280",
    "end": "3265359"
  },
  {
    "text": "application I don't know if you noticed that but I also used that in one of the applications as well you can have the global using statements to say that",
    "start": "3265359",
    "end": "3272200"
  },
  {
    "text": "whatever you using in this class will now be available in the entire project and then finally we looked at",
    "start": "3272200",
    "end": "3278160"
  },
  {
    "text": "the interceptors interceptors is a way for you to say that I have this code piece here I've written a separate",
    "start": "3278160",
    "end": "3284319"
  },
  {
    "text": "implementation that is maybe it's optimized for exactly a specific platform I'd like to you to replace that",
    "start": "3284319",
    "end": "3291520"
  },
  {
    "text": "method call replace it with with this code here and this can be done using source",
    "start": "3291520",
    "end": "3296920"
  },
  {
    "text": "generators and someone is probably a little bit worried that I can bring in any new get package and it could just",
    "start": "3296920",
    "end": "3302920"
  },
  {
    "text": "suddenly replace all my method calls but this is an opt-in feature you have to opt in to the name spaces that you allow",
    "start": "3302920",
    "end": "3309960"
  },
  {
    "text": "to override your code or intercept your code so it's not it could be a security",
    "start": "3309960",
    "end": "3315880"
  },
  {
    "text": "concern but you know it depends on how you use it and what you trust maybe don't trust like a wild card that could",
    "start": "3315880",
    "end": "3322280"
  },
  {
    "text": "be dangerous so where would this be used like I I I mentioned this that it's used internally as well or by by by Microsoft",
    "start": "3322280",
    "end": "3329200"
  },
  {
    "text": "and it is in asp.net core they use interceptors to generate um code using",
    "start": "3329200",
    "end": "3336839"
  },
  {
    "text": "the reest delegate generator and this is specifically for publish aot applications where you don't to Native",
    "start": "3336839",
    "end": "3342920"
  },
  {
    "text": "aot compile your applications and we'll see this quite more like we'll see this happening a lot more as well to be able",
    "start": "3342920",
    "end": "3349920"
  },
  {
    "text": "to generate code and replace that to something that's more performant I think it's a good option",
    "start": "3349920",
    "end": "3357079"
  },
  {
    "text": "so I guess with a couple of minutes left we can't really cover everything that's coming in C 13 and what's coming in do",
    "start": "3357079",
    "end": "3363720"
  },
  {
    "text": "net 9 I mentioned this earlier on in the talk that they're doing some investigation as to how how would async",
    "start": "3363720",
    "end": "3370880"
  },
  {
    "text": "and a weight work runtime wise if the runtime knew about asyn and A8 and knew",
    "start": "3370880",
    "end": "3377720"
  },
  {
    "text": "about tasks knew about green threads how could they change exactly how all of that works could we have a smaller",
    "start": "3377720",
    "end": "3385880"
  },
  {
    "text": "memory footprint or less CPU operations when creating new tasks or reusing tasks",
    "start": "3385880",
    "end": "3391319"
  },
  {
    "text": "or threads because they had to build all of that using the old Technologies and",
    "start": "3391319",
    "end": "3396440"
  },
  {
    "text": "using you know old components available at the time but now with new versions of",
    "start": "3396440",
    "end": "3402079"
  },
  {
    "text": "CP and net they try to make changes in both the language that also rely on",
    "start": "3402079",
    "end": "3407480"
  },
  {
    "text": "changes in the runtime so we'll see a lot more happening in that space as well",
    "start": "3407480",
    "end": "3412640"
  },
  {
    "text": "and then in terms of what's happening with C there's not a lot of interesting features that have been released yet but",
    "start": "3412640",
    "end": "3418119"
  },
  {
    "text": "if you'd like to you can go ahead and check the language feature status page they have a lot of things they'd like to",
    "start": "3418119",
    "end": "3424160"
  },
  {
    "text": "have like discriminate unions is one of the things I'd like to add to the language but again it takes time to",
    "start": "3424160",
    "end": "3430319"
  },
  {
    "text": "understand how people will use this they focus on adding things like the dam it operator that no one wants so you know",
    "start": "3430319",
    "end": "3436920"
  },
  {
    "text": "they do a lot of different work and if you'd like to participate you can always join the discussion as",
    "start": "3436920",
    "end": "3442480"
  },
  {
    "text": "well with that being said if you like listening to my voice I have like a lot of courses on plural site where I cover",
    "start": "3442480",
    "end": "3448440"
  },
  {
    "text": "everything around C and working with net and as I mentioned before as well I love to get questions you can send me emails",
    "start": "3448440",
    "end": "3455680"
  },
  {
    "text": "you can ping me on Twitter you can grab me afterwards and we'll have some discussions around CP and.net I hope you",
    "start": "3455680",
    "end": "3462160"
  },
  {
    "text": "found this useful and on your way out please do leave a green vote in the box",
    "start": "3462160",
    "end": "3468760"
  },
  {
    "text": "if you didn't like this you can just skip the line and go straight for a coffee all right I hope you enjoy this",
    "start": "3468760",
    "end": "3475559"
  },
  {
    "text": "let me know what you thank thank you so much for listening",
    "start": "3475559",
    "end": "3480280"
  }
]