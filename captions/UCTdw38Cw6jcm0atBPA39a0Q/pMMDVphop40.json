[
  {
    "start": "0",
    "end": "81000"
  },
  {
    "text": "so uh we'll have a nice small group for today which means we should have plenty of times for uh questions answers and",
    "start": "3040",
    "end": "9280"
  },
  {
    "text": "talking about different ways we can actually apply some of the things we'll be talking about today so uh thank you",
    "start": "9280",
    "end": "14320"
  },
  {
    "text": "for coming to my talk about what CRDTS distributed editing and the speed of light means to your writer friends so",
    "start": "14320",
    "end": "21520"
  },
  {
    "text": "hopefully that intrigues you a little bit and might motivate you um as we get through the rest of this talk so um a",
    "start": "21520",
    "end": "27840"
  },
  {
    "text": "little bit about me first i'm Jonathan Martin i'm an instructor and web developer with a consultancy in the US",
    "start": "27840",
    "end": "34239"
  },
  {
    "text": "called Big Nerd Ranch or if you prefer Smallge Geek Vinegaret i've heard it both ways we're based in Atlanta Georgia",
    "start": "34239",
    "end": "41760"
  },
  {
    "text": "in the US and uh at Big Nerd Ranch we develop web and mobile apps for our clients and we teach other developers to",
    "start": "41760",
    "end": "48399"
  },
  {
    "text": "do the same through our intensive 5-day boot camps or through our bestselling programming guides which you can find on",
    "start": "48399",
    "end": "54160"
  },
  {
    "text": "Amazon so because I work with Bigard Ranch I'm originally from Atlanta but um",
    "start": "54160",
    "end": "60000"
  },
  {
    "text": "I've done a little bit of traveling lately i've uh currently in Mobile and then for a little bit I was in Dallas so",
    "start": "60000",
    "end": "66000"
  },
  {
    "text": "really nowadays I work from anywhere not any particular place i can work from anywhere and this is because I'm a",
    "start": "66000",
    "end": "72479"
  },
  {
    "text": "digital nomad so digital nomads are people who leverage technology to work from anywhere and consequently they tend",
    "start": "72479",
    "end": "78960"
  },
  {
    "text": "to travel quite frequently and there's a lot of really cool perks to being a digital nomad i mean instead of working",
    "start": "78960",
    "end": "86000"
  },
  {
    "start": "81000",
    "end": "217000"
  },
  {
    "text": "from a space like this dayto-day uh I might have a view of Italy's Amafy coast",
    "start": "86000",
    "end": "91280"
  },
  {
    "text": "from my office on a given day this is the kind of office I like and so over the past 3 years this",
    "start": "91280",
    "end": "98560"
  },
  {
    "text": "nomadic lifestyle has allowed me to nurture my love for landscape photography but the nomadic lifestyle",
    "start": "98560",
    "end": "105040"
  },
  {
    "text": "didn't really come naturally to me at first cuz there's a lot of interesting skills you have to have to be a digital",
    "start": "105040",
    "end": "110960"
  },
  {
    "text": "nomad um you have to be really good at catching last minute flight deals and living out of a tiny little backpack for",
    "start": "110960",
    "end": "117520"
  },
  {
    "text": "a couple months at a time so some interesting skill sets um now digital",
    "start": "117520",
    "end": "122640"
  },
  {
    "text": "nomads come from a lot of different professions um for example a lot of bloggers journalists developers um",
    "start": "122640",
    "end": "130440"
  },
  {
    "text": "foodies all travel around the world and they enjoy the freedom that a digital nomadic lifestyle gives them um but",
    "start": "130440",
    "end": "136800"
  },
  {
    "text": "despite the diversity of these different backgrounds and professions all digital nomads tend to face uh some pretty",
    "start": "136800",
    "end": "143599"
  },
  {
    "text": "similar situations they're often collaborating with other colleagues on",
    "start": "143599",
    "end": "148640"
  },
  {
    "text": "the go from just about anywhere including places with either a poor internet connection or no internet",
    "start": "148640",
    "end": "154160"
  },
  {
    "text": "connection at all so really hotel and McDonald's Wi-Fi is pretty much as good",
    "start": "154160",
    "end": "159280"
  },
  {
    "text": "as Wi-Fi gets for a digital nomad so digital nomads face these sorts of interesting challenges that aren't",
    "start": "159280",
    "end": "166000"
  },
  {
    "text": "always solved by mainstream tools and applications that we might recommend to them well so my personal interest um at",
    "start": "166000",
    "end": "174480"
  },
  {
    "text": "Big Nerd Ranch is creating software for digital nomads for this interesting",
    "start": "174480",
    "end": "179519"
  },
  {
    "text": "class for this interesting group of people who have these interesting technological um requirements so to dive",
    "start": "179519",
    "end": "186159"
  },
  {
    "text": "into some of the different technical constraints we'll be dealing with we're going to focus on two travelers um we",
    "start": "186159",
    "end": "191680"
  },
  {
    "text": "have some really nice avatars up there um very memorable GitHub binary um bit",
    "start": "191680",
    "end": "199599"
  },
  {
    "text": "art so uh these two people are Alex and Beth alex is a foodie he's interested in",
    "start": "199599",
    "end": "204640"
  },
  {
    "text": "food culture and trying cuisine from all over the world and Beth is a traveler journalist and so Alex and Beth are",
    "start": "204640",
    "end": "210560"
  },
  {
    "text": "traveling through Europe together and they want to write a blog post about sandwiches just because well they want",
    "start": "210560",
    "end": "218720"
  },
  {
    "start": "217000",
    "end": "469000"
  },
  {
    "text": "to create this incredible expose on sandwich making as they travel through Europe so what tools right now would we",
    "start": "218720",
    "end": "225200"
  },
  {
    "text": "recommend to Alex and Beth so that they can write collaboratively on the go well",
    "start": "225200",
    "end": "231040"
  },
  {
    "text": "we're developers so we might suggest a version control system like Git git is after all offline first and it has",
    "start": "231040",
    "end": "237840"
  },
  {
    "text": "advanced workflows for merging changes so yay git um until this it's uh not",
    "start": "237840",
    "end": "244959"
  },
  {
    "text": "exceptionally well suited to writing diffs tend to be lineoriented and generate a lot of noise um and yes there",
    "start": "244959",
    "end": "251439"
  },
  {
    "text": "is a word diff mode but it doesn't work for patching so you can't patch in one word at a time so not so great um the",
    "start": "251439",
    "end": "258320"
  },
  {
    "text": "interface isn't exactly memorable either especially for people who don't tend to open the terminal on a daily basis so",
    "start": "258320",
    "end": "266240"
  },
  {
    "text": "and the get commit workflow is also kind of untimely so you're not going to have",
    "start": "266240",
    "end": "271360"
  },
  {
    "text": "any real-time collaboration feedback um unless you can really type get add and get commit and get push within a few",
    "start": "271360",
    "end": "278680"
  },
  {
    "text": "milliseconds so maybe Git isn't quite the best solution for our writers so naturally we might turn to",
    "start": "278680",
    "end": "285520"
  },
  {
    "text": "something like Google Docs google Docs is sort of the holy grail in collaboration um for on the- go so a lot",
    "start": "285520",
    "end": "292880"
  },
  {
    "text": "of digital nomads a lot of writers a lot of bloggers might use a tool like Google",
    "start": "292880",
    "end": "297919"
  },
  {
    "text": "Docs for this and it works pretty well um especially if you have an internet connection but if you don't have an",
    "start": "297919",
    "end": "303520"
  },
  {
    "text": "internet connection you'll probably be dealing with this so Google Docs is not resilient to being offline for long",
    "start": "303520",
    "end": "310440"
  },
  {
    "text": "spells even though there is an offline version of Google Docs you're not exactly going to be able to continue",
    "start": "310440",
    "end": "316080"
  },
  {
    "text": "collaborating if you make changes for too long and you get back online Google's simply going to tell you \"I",
    "start": "316080",
    "end": "321280"
  },
  {
    "text": "give up i can't merge these changes so Google Docs really isn't a great solution for the kinds of issues that",
    "start": "321280",
    "end": "328560"
  },
  {
    "text": "frequent travelers and digital nomads might be facing when they want to collaborate on the go well uh maybe",
    "start": "328560",
    "end": "334720"
  },
  {
    "text": "let's take a nerdier approach uh maybe you've heard of EtherPad it's after all Alex and Beth if they're traveling",
    "start": "334720",
    "end": "340320"
  },
  {
    "text": "together maybe they'll be close enough that they can create a little ad hoc network or use Bluetooth networking and",
    "start": "340320",
    "end": "346639"
  },
  {
    "text": "then use something like EtherPad to collaborate over that networking connection so that seems like it could work um",
    "start": "346639",
    "end": "354720"
  },
  {
    "text": "except that unless you're a nerd you've probably never heard of it and writers probably don't want to be using a plain",
    "start": "354720",
    "end": "360880"
  },
  {
    "text": "text editor so Git Etherpad and Google",
    "start": "360880",
    "end": "366160"
  },
  {
    "text": "Docs neither one of those solutions quite seems to fit the use case of a digital nomad if we really want to help",
    "start": "366160",
    "end": "372800"
  },
  {
    "text": "Alex and Beth we want to give them something that's offline resilient that gives them real-time collaboration when",
    "start": "372800",
    "end": "379039"
  },
  {
    "text": "they do have network connectivity and have it all be seamless that's you're kind of",
    "start": "379039",
    "end": "384960"
  },
  {
    "text": "hardressed to find a product that does those sorts of things now the good news is we actually already have the",
    "start": "384960",
    "end": "390720"
  },
  {
    "text": "algorithms to create great software for digital nomads like Alex and Beth so in this talk we're going to investigate the",
    "start": "390720",
    "end": "397199"
  },
  {
    "text": "three basic parts that you need to create a compelling collaborative experience for digital nomads or just",
    "start": "397199",
    "end": "403919"
  },
  {
    "text": "any kind of creative industry where you're collaborating so we're going to be discussing writers but in fact most",
    "start": "403919",
    "end": "409919"
  },
  {
    "text": "of the techniques we look at are applicable to collaborative music maybe you have two people who want to",
    "start": "409919",
    "end": "415440"
  },
  {
    "text": "collaborate on sheet music or maybe they want to collaborate on sound recording",
    "start": "415440",
    "end": "420880"
  },
  {
    "text": "they can do that with these same algorithms so the first part of this talk we're just going to look at the",
    "start": "420880",
    "end": "426560"
  },
  {
    "text": "algorithms behind conflict resolution how do you let two or more people make changes to the same document at a time",
    "start": "426560",
    "end": "433599"
  },
  {
    "text": "and then resolve those conflicts seamlessly that's going to make up the bulk of this talk um and then of course",
    "start": "433599",
    "end": "439759"
  },
  {
    "text": "we'll need some way to communicate those changes between peers some way to say",
    "start": "439759",
    "end": "444960"
  },
  {
    "text": "\"Hey I made a change you should probably update your copy of the document.\" So we could either do that over the internet",
    "start": "444960",
    "end": "450400"
  },
  {
    "text": "or we could look at some different peer-to-peer technology that allows these computers to collaborate without",
    "start": "450400",
    "end": "457120"
  },
  {
    "text": "being connected to the internet and then finally since they are writers they probably want a really compelling",
    "start": "457120",
    "end": "463199"
  },
  {
    "text": "editing experience so we'll take a look at what web technology offers us in the way of compelling editing experiences so",
    "start": "463199",
    "end": "470479"
  },
  {
    "start": "469000",
    "end": "627000"
  },
  {
    "text": "let's start with the hardest part of this talk and that is how do we resolve conflicts when multiple users edit the",
    "start": "470479",
    "end": "476319"
  },
  {
    "text": "same document simultaneously now in web development in",
    "start": "476319",
    "end": "481599"
  },
  {
    "text": "development in general we have a fundamental limit and that is the speed of light is slow it's so are routers",
    "start": "481599",
    "end": "488080"
  },
  {
    "text": "routers make it even slower computers are slow now relatively speaking it's",
    "start": "488080",
    "end": "494080"
  },
  {
    "text": "not that slow but it turns out it adds up and so for Alex and Beth to be able to make changes to the same document",
    "start": "494080",
    "end": "501720"
  },
  {
    "text": "simultaneously we can't force one to take turns we can't force Beth to not",
    "start": "501720",
    "end": "507360"
  },
  {
    "text": "touch the document while Alex adds a few characters here and there that's simply not feasible when we're talking about",
    "start": "507360",
    "end": "512800"
  },
  {
    "text": "peer-to-peer and real-time collaboration so we need to look at some algorithms",
    "start": "512800",
    "end": "517919"
  },
  {
    "text": "that allow Alex and Beth to make these changes simultaneously but have an algorithm",
    "start": "517919",
    "end": "523599"
  },
  {
    "text": "that can merge those changes without supervision after all we don't want to have them basically have the experience",
    "start": "523599",
    "end": "529839"
  },
  {
    "text": "of doing git diffs and git merge so we need an algorithm that can combine changes that were made at the same time",
    "start": "529839",
    "end": "536000"
  },
  {
    "text": "but does it in a very predictable way so that Alex and Beth always end up with exactly the same copy of the document",
    "start": "536000",
    "end": "543360"
  },
  {
    "text": "now this particular constraint is called strong eventual consistency now if you've looked into different database",
    "start": "543360",
    "end": "550160"
  },
  {
    "text": "paradigms or maybe you're using something other than Postgress as your main uh database backend you might be",
    "start": "550160",
    "end": "555200"
  },
  {
    "text": "familiar with the BAS database paradigm uh normally we think in terms of acid",
    "start": "555200",
    "end": "560320"
  },
  {
    "text": "which always guarantees that whenever we query a database that we're always getting the most recent data and that if",
    "start": "560320",
    "end": "566880"
  },
  {
    "text": "something's being written to it um that the database is going to be locked down",
    "start": "566880",
    "end": "572080"
  },
  {
    "text": "until that write has finished so certain constraints like that in the acid framework well in BASE instead we decide",
    "start": "572080",
    "end": "579760"
  },
  {
    "text": "okay we're going to give up read consistency but we're going to force or",
    "start": "579760",
    "end": "586080"
  },
  {
    "text": "we're going to make sure that at the end of the day once all these changes do get synced up that everyone ends up with the",
    "start": "586080",
    "end": "593040"
  },
  {
    "text": "exact same copy of the document we typically call these replicas so Alex and Beth if they're both working on a",
    "start": "593040",
    "end": "598880"
  },
  {
    "text": "document we would say that Alex and Beth have their own replicas of the same document and at the end of the day once",
    "start": "598880",
    "end": "605360"
  },
  {
    "text": "they communicate those changes with each other they should end up with exactly the same copy without having to do a",
    "start": "605360",
    "end": "611360"
  },
  {
    "text": "full reync so this is eventual consistency and it's one of the key",
    "start": "611360",
    "end": "616959"
  },
  {
    "text": "constraints we need to build a real time collaborative editor that works well when the network is poor or in some",
    "start": "616959",
    "end": "623760"
  },
  {
    "text": "cases when you don't have a network connection at all so we're going to take a look at",
    "start": "623760",
    "end": "629600"
  },
  {
    "start": "627000",
    "end": "1069000"
  },
  {
    "text": "some different scenarios to see how we can help Alex and Beth so in the first one Alex and Beth are hiking in a German",
    "start": "629600",
    "end": "635680"
  },
  {
    "text": "the German Alps and they decide while they're hiking they get a little hungry and they decide they like to have a picnic so they pass a market so",
    "start": "635680",
    "end": "642720"
  },
  {
    "text": "naturally they decide hey let's put together a grocery list let's split ways and just start getting the groceries",
    "start": "642720",
    "end": "648160"
  },
  {
    "text": "that way we can get this done in half the time so initially they put together",
    "start": "648160",
    "end": "653519"
  },
  {
    "text": "this great looking uh picnic milk bread and eggs so they go into the grocery",
    "start": "653519",
    "end": "659040"
  },
  {
    "text": "store and they say \"All right uh we're just going to get these items we'll go separate ways.\" While they've split up",
    "start": "659040",
    "end": "665120"
  },
  {
    "text": "however Alex remembers \"Oh you know what i'd really like to grab some apples and really I'd rather not get bread the",
    "start": "665120",
    "end": "671760"
  },
  {
    "text": "bread here isn't all that good.\" So Alex decides to make a change to his grocery list he decides to remove bread and add",
    "start": "671760",
    "end": "678800"
  },
  {
    "text": "apples to his copy of the grocery list beth on the other hand is lactose intolerant and so she takes milk away",
    "start": "678800",
    "end": "685440"
  },
  {
    "text": "from the list now when Alex and Beth get back together we now have a question how",
    "start": "685440",
    "end": "690720"
  },
  {
    "text": "are they going to merge these two different copies of the grocery list so that they end up with the same grocery",
    "start": "690720",
    "end": "696279"
  },
  {
    "text": "list so there's a few naive strategies we could take the easiest one would be",
    "start": "696279",
    "end": "701600"
  },
  {
    "text": "let's combine these two lists into a brand new one and just remove duplicates in other words we should have every item",
    "start": "701600",
    "end": "707760"
  },
  {
    "text": "from each person's list we call this the union strategy now the union strategy is",
    "start": "707760",
    "end": "713519"
  },
  {
    "text": "a valid strategy it's eventually consistent because Alex and Beth only have to tell each other what items they",
    "start": "713519",
    "end": "720079"
  },
  {
    "text": "added or removed and they will end up with exactly the same copy of the document so in other words union is",
    "start": "720079",
    "end": "725920"
  },
  {
    "text": "eventually consistent so it's a good algorithm in that case but there's also another equally valid strategy we could",
    "start": "725920",
    "end": "732800"
  },
  {
    "text": "use the intersection strategy to only keep items that are common between both lists so it's also eventually consistent",
    "start": "732800",
    "end": "740959"
  },
  {
    "text": "so uh which one do we pick well neither of those strategies solve the fundamental question if we go back to",
    "start": "740959",
    "end": "747279"
  },
  {
    "text": "the list and we look at what happens to bread and apples we'll see that Alex removed bread he added apples beth",
    "start": "747279",
    "end": "754560"
  },
  {
    "text": "removed milk if we look at the union or the intersection strategy neither of these solutions preserve Alex and Beth's",
    "start": "754560",
    "end": "762680"
  },
  {
    "text": "intentions if we look at the union strategy we see that Alex was not able",
    "start": "762680",
    "end": "767920"
  },
  {
    "text": "to remove bread like he had originally intended he was able to add apples however and we also see that Beth was",
    "start": "767920",
    "end": "773519"
  },
  {
    "text": "not able to remove milk so this means that in the union strategy one person can never remove an item both people",
    "start": "773519",
    "end": "780560"
  },
  {
    "text": "have to simultaneously remove an item and in the intersection strategy we have",
    "start": "780560",
    "end": "785600"
  },
  {
    "text": "the exact opposite problem you can never add an item unless both people do it at the same time so these strategies really",
    "start": "785600",
    "end": "793360"
  },
  {
    "text": "are a little bit too naive but the solution is right there in the way we",
    "start": "793360",
    "end": "798959"
  },
  {
    "text": "described this problem maybe instead of relaying exactly our current version of",
    "start": "798959",
    "end": "804800"
  },
  {
    "text": "the grocery list or in other words the final state of our grocery list maybe instead we should just relay these",
    "start": "804800",
    "end": "811600"
  },
  {
    "text": "changes kind of like a get diff so in this case we might describe these operations we might say that Alex",
    "start": "811600",
    "end": "817920"
  },
  {
    "text": "deleted bread he added apples and Beth removed milk well when they sync up all",
    "start": "817920",
    "end": "823760"
  },
  {
    "text": "they need to do is combine their changes not the final state but they combine",
    "start": "823760",
    "end": "829279"
  },
  {
    "text": "their changes together into a single list and now we can apply these changes one after another in no particular order",
    "start": "829279",
    "end": "836880"
  },
  {
    "text": "and end up at a solution which preserves both Alex's and Beth's intentions this",
    "start": "836880",
    "end": "842800"
  },
  {
    "text": "strategy is also eventually consistent and just as importantly it preserves user intentions for both Alex and Beth",
    "start": "842800",
    "end": "850399"
  },
  {
    "text": "so this is a usable strategy for resolving changes to a set or unordered list unordered lists are pretty easy to",
    "start": "850399",
    "end": "856800"
  },
  {
    "text": "deal with uh things change a little bit when you step into the realm of ordered sequences or an ordered list or if you",
    "start": "856800",
    "end": "863279"
  },
  {
    "text": "prefer a string maybe a text document so in our next scenario Alex and Beth have",
    "start": "863279",
    "end": "868800"
  },
  {
    "text": "finished their grocery shopping they've had their picnic and now they're ready to start working on that blog that expose about sandwiches from all over",
    "start": "868800",
    "end": "876160"
  },
  {
    "text": "the world eventually it's going to be this really great piece you'll probably see it on Hacker News but first they",
    "start": "876160",
    "end": "882880"
  },
  {
    "text": "start off with a very modest document and that is they start off with just the word sandwich in the",
    "start": "882880",
    "end": "889560"
  },
  {
    "text": "document so if we were trying to think about some different ways that Alex and Beth could make changes to this document",
    "start": "889560",
    "end": "896959"
  },
  {
    "text": "in isolation from each other we might try this scenario so let's say Alex and Beth both started off with this document",
    "start": "896959",
    "end": "903360"
  },
  {
    "text": "it said sandwich then they both lose internet connectivity for a little while and during that time Alex removes the",
    "start": "903360",
    "end": "909199"
  },
  {
    "text": "letter D from his copy of the document beth adds a letter to her copy of the",
    "start": "909199",
    "end": "914399"
  },
  {
    "text": "document she inserts the letter H at index 5 well we could immediately",
    "start": "914399",
    "end": "919760"
  },
  {
    "text": "revisit the concepts that we just saw in ordered sets maybe instead of relaying the final state the final copy of the",
    "start": "919760",
    "end": "926399"
  },
  {
    "text": "document we could just relay those changes so here's one way we might describe those changes we might say that",
    "start": "926399",
    "end": "932800"
  },
  {
    "text": "Alex deleted the letter D which was at index 3 and then we might say that Beth",
    "start": "932800",
    "end": "938560"
  },
  {
    "text": "inserted the letter H at index 5 so we could try that strategy before where all",
    "start": "938560",
    "end": "944480"
  },
  {
    "text": "we do is we combine these changes and we run them one after another in no particular order so in this case first",
    "start": "944480",
    "end": "950000"
  },
  {
    "text": "we'll apply Alex's operation we'll remove the letter D and then we'll insert the letter H at index 5",
    "start": "950000",
    "end": "957120"
  },
  {
    "text": "unfortunately we end up with this very interesting permutation of Sanhicha however you uh can pronounce",
    "start": "957120",
    "end": "965360"
  },
  {
    "text": "that that isn't quite what Beth had intended uh we see that Alex's intention",
    "start": "965360",
    "end": "970399"
  },
  {
    "text": "was preserved he wanted to remove the D and it's gone but the H was supposed to come after the",
    "start": "970399",
    "end": "975480"
  },
  {
    "text": "W so it's not quite enough when you have order to just apply these operations one",
    "start": "975480",
    "end": "980800"
  },
  {
    "text": "after another we have to make changes to resolve this so even though Alex and",
    "start": "980800",
    "end": "986800"
  },
  {
    "text": "Beth performed these changes concurrently which means they're basically doing it in isolation for all intents and purposes they're applying",
    "start": "986800",
    "end": "993199"
  },
  {
    "text": "these operations at the exact same time but depending on whether we decided to apply Alex's operation first or Beth's",
    "start": "993199",
    "end": "1000320"
  },
  {
    "text": "first we end up with different solutions this violates eventual consistency for this algorithm to work it has to be",
    "start": "1000320",
    "end": "1007600"
  },
  {
    "text": "eventually consistent so the problem here is that we applied",
    "start": "1007600",
    "end": "1012639"
  },
  {
    "text": "Beth's operation after Alex's and Alex's operation shifted the state so if we",
    "start": "1012639",
    "end": "1020399"
  },
  {
    "text": "take a look at Alex's delete operation as soon as we remove D it effectively",
    "start": "1020399",
    "end": "1026038"
  },
  {
    "text": "offsets all of the other letters there so we have this offset now of NE1 which",
    "start": "1026039",
    "end": "1031600"
  },
  {
    "text": "means if we want to figure out what Beth's operation would look like had she performed it on Alex's copy of the",
    "start": "1031600",
    "end": "1037240"
  },
  {
    "text": "document we can't just insert the letter at five we need to subtract one from it",
    "start": "1037240",
    "end": "1042558"
  },
  {
    "text": "to get a better index now we can run that and now we end up with a much more",
    "start": "1042559",
    "end": "1048799"
  },
  {
    "text": "satisfying uh misspelling of sandwich Sanitch so this particular version of a",
    "start": "1048799",
    "end": "1057640"
  },
  {
    "text": "text merging algorithm resolved those changes and it did preserve user",
    "start": "1057640",
    "end": "1063120"
  },
  {
    "text": "intention between both Alex and Beth even though they had to be applied in different",
    "start": "1063120",
    "end": "1068520"
  },
  {
    "text": "contexts now in a nutshell this is how operational transforms works so if",
    "start": "1068520",
    "end": "1074160"
  },
  {
    "text": "you've heard of Google Docs if you've used Google Docs or if you've used pretty much any collaborative experience you're probably using operational",
    "start": "1074160",
    "end": "1080160"
  },
  {
    "text": "transforms and essentially when changes are made concurrently each client performs the",
    "start": "1080160",
    "end": "1085679"
  },
  {
    "text": "changes in some predefined order and then it transforms any concurrent",
    "start": "1085679",
    "end": "1090799"
  },
  {
    "text": "operations so that they can be applied to a different copy of the document and still make sense now for operational",
    "start": "1090799",
    "end": "1098480"
  },
  {
    "text": "transforms to work they have to satisfy two mathematical properties which we call TP1 and TP2",
    "start": "1098480",
    "end": "1106440"
  },
  {
    "text": "tp1 is easy it stands for transformation property tp1 is essentially the problem",
    "start": "1106440",
    "end": "1112240"
  },
  {
    "text": "we just looked at and then there's a much more complex one called TP2 but",
    "start": "1112240",
    "end": "1117440"
  },
  {
    "text": "we'll go back to TP1 tp1 is fairly straightforward it's basically the",
    "start": "1117440",
    "end": "1122480"
  },
  {
    "text": "problem we just solved it says that when Alex and Beth make simultaneous edits to the same document and they exchange",
    "start": "1122480",
    "end": "1128880"
  },
  {
    "text": "those changes with each other we need to ensure that they end up at the same copy of the document so here's a classic",
    "start": "1128880",
    "end": "1136400"
  },
  {
    "text": "problem you would use to see if an operation or if a particular kind of operational transform was TP1 compliant",
    "start": "1136400",
    "end": "1143200"
  },
  {
    "text": "you might give it something like this you might say \"Okay Alex insert a letter at index 3 and Beth delete a letter at",
    "start": "1143200",
    "end": "1150240"
  },
  {
    "text": "index 2.\" And if this problem happens if they end up with different copies of",
    "start": "1150240",
    "end": "1155440"
  },
  {
    "text": "document like Alex ends up with ax and Beth ends up with ACX this algorithm doesn't work so for",
    "start": "1155440",
    "end": "1163280"
  },
  {
    "text": "an operational transform to be TP1 compliant it has to avoid this problem well the particular solution we looked",
    "start": "1163280",
    "end": "1169360"
  },
  {
    "text": "at did fix that so we should be good to go then so the algorithm we just looked at is TP1 compliant uh we kind of get a",
    "start": "1169360",
    "end": "1177520"
  },
  {
    "text": "quantum jump when we get to TP2 tp2 is essentially a problem that says when you",
    "start": "1177520",
    "end": "1182640"
  },
  {
    "text": "have three or more people collaborating how do you deal with this so this particular problem says what would",
    "start": "1182640",
    "end": "1188880"
  },
  {
    "text": "happen if you had Alex Beth and Chris collaborating on the same document and",
    "start": "1188880",
    "end": "1194080"
  },
  {
    "text": "Alex and Chris insert letters around the middle of the string and Beth decides to",
    "start": "1194080",
    "end": "1199440"
  },
  {
    "text": "remove that middle letter which is sort of like a pivot sort of like a reference point for Alex and Chris's",
    "start": "1199440",
    "end": "1204760"
  },
  {
    "text": "operations how do you make sure that all three of them end up at the exact same copy of the document a more naive",
    "start": "1204760",
    "end": "1211840"
  },
  {
    "text": "operational transform algorithm will end up with some people having axyc and some with a yxc this is a",
    "start": "1211840",
    "end": "1219520"
  },
  {
    "text": "problem because it has to be eventually consistent so TP2 much harder than TP1",
    "start": "1219520",
    "end": "1226799"
  },
  {
    "text": "if you can get TP1 and TP2 correct it essentially means that your algorithm will work amongst multiple peers and all",
    "start": "1226799",
    "end": "1233679"
  },
  {
    "text": "copies of the document will eventually be consistent unfortunately for text documents there are actually no correct",
    "start": "1233679",
    "end": "1241600"
  },
  {
    "text": "transformation functions up until recently there are and this is somewhat of a lie but they're all fairly",
    "start": "1241600",
    "end": "1247159"
  },
  {
    "text": "impractical so for text documents there are currently no correct transformation functions so this means that operational",
    "start": "1247159",
    "end": "1254559"
  },
  {
    "text": "transforms at least for a text document cannot be used to build a safe decentralized collaborative editor or in",
    "start": "1254559",
    "end": "1261520"
  },
  {
    "text": "other words operational transforms cannot be used to create a multi-eer editor instead you always have to have a",
    "start": "1261520",
    "end": "1268159"
  },
  {
    "text": "central server some sort of gobetween that transforms operations between these",
    "start": "1268159",
    "end": "1273200"
  },
  {
    "text": "different clients meet Google Docs that's essentially what Google Docs is doing so since operational transforms",
    "start": "1273200",
    "end": "1280640"
  },
  {
    "text": "the at least the ones that we tend to use only support two peers Google acts like one of the peers and then everyone",
    "start": "1280640",
    "end": "1287440"
  },
  {
    "text": "else is essentially that second peer so Google kind of acts like this go between between all the peers which is why you",
    "start": "1287440",
    "end": "1293919"
  },
  {
    "text": "have to have an internet connection directly to Google unfortunately this is slow um",
    "start": "1293919",
    "end": "1300320"
  },
  {
    "text": "maybe compared to using Git it isn't that slow but in a real-time scenario or",
    "start": "1300320",
    "end": "1305679"
  },
  {
    "text": "when you're have a slow network connection sometimes there can be quite a bit of lag when you're typing so it's",
    "start": "1305679",
    "end": "1310880"
  },
  {
    "text": "slow it's centralized and it requires a constant connection to Google server so this means that you can't really work on",
    "start": "1310880",
    "end": "1317120"
  },
  {
    "text": "a Google doc with a few friends in say one room using Bluetooth networking this",
    "start": "1317120",
    "end": "1323520"
  },
  {
    "text": "is also by the way why Google Docs does not work well when you go offline for long spells because it's really only",
    "start": "1323520",
    "end": "1330159"
  },
  {
    "text": "meant to work between two peers and it doesn't do a very good job at that so Google Docs the Google team did an",
    "start": "1330159",
    "end": "1336960"
  },
  {
    "text": "amazing job they shipped it it was originally part of Wave and then hit Google Docs so really cool algorithm but",
    "start": "1336960",
    "end": "1342799"
  },
  {
    "text": "it also turns out it's kind of the lower rung of collaborative algorithms we can actually do better so now we're going to",
    "start": "1342799",
    "end": "1349840"
  },
  {
    "start": "1349000",
    "end": "1366000"
  },
  {
    "text": "try to level up we're going to take a look at some tricks that might help us solve that TP2 problem in other words",
    "start": "1349840",
    "end": "1356000"
  },
  {
    "text": "having more than two peers collaborating directly with each other without a go between so two of the tricks we'll take",
    "start": "1356000",
    "end": "1363120"
  },
  {
    "text": "a look at are called preconditions and tombstones so first I'm going to show you guys a little bit of notation um",
    "start": "1363120",
    "end": "1370559"
  },
  {
    "start": "1366000",
    "end": "1396000"
  },
  {
    "text": "this notation is borrowed from set order notation uh it's a just a formal way to",
    "start": "1370559",
    "end": "1375840"
  },
  {
    "text": "describe how things are ordered in a set so if you think about it if you were to",
    "start": "1375840",
    "end": "1381840"
  },
  {
    "text": "see something like this this says that the letter S must come before the letter A must come before the letter N you",
    "start": "1381840",
    "end": "1387679"
  },
  {
    "text": "could also write this as the letter A must come after S and the letter A must come before N really fancy terminology",
    "start": "1387679",
    "end": "1394880"
  },
  {
    "text": "it's just an ordering so if we took our initial string sandwich we could write it out with this notation so this",
    "start": "1394880",
    "end": "1402440"
  },
  {
    "text": "notation is just saying that the letter S in this document comes before A comes before N etc now if you have a",
    "start": "1402440",
    "end": "1409840"
  },
  {
    "text": "background in computer science you might recognize this as a partially ordered set or post set and in this case it's a",
    "start": "1409840",
    "end": "1416159"
  },
  {
    "text": "post set with a total ordering which just means there's no ambiguity in terms of which letter comes before which",
    "start": "1416159",
    "end": "1422559"
  },
  {
    "text": "letter so when three people go to make changes",
    "start": "1422559",
    "end": "1427840"
  },
  {
    "text": "at the exact same time say now we have Alex Beth and Chris we're trying to see if this new algorithm will solve TP2",
    "start": "1427840",
    "end": "1435080"
  },
  {
    "text": "compliance we might try starting with Chris's operation first and so we see",
    "start": "1435080",
    "end": "1440720"
  },
  {
    "text": "that okay he deletes the letter D but notice that delete operation has a little bit more information than it did",
    "start": "1440720",
    "end": "1446640"
  },
  {
    "text": "before instead of having an index or anything like that it now has these preconditions on the left and right it",
    "start": "1446640",
    "end": "1453200"
  },
  {
    "text": "says before you can apply this delete operation check and make sure that there's a letter N somewhere to the left",
    "start": "1453200",
    "end": "1459600"
  },
  {
    "text": "of me and that there's a letter W somewhere to the right of me so to be able to apply this operation these",
    "start": "1459600",
    "end": "1466640"
  },
  {
    "text": "preconditions have to be fulfilled well we do see the letter D and it's between the letters N and W so we can easily",
    "start": "1466640",
    "end": "1473279"
  },
  {
    "text": "apply Chris's operation which deletes it but now once we get to Alex's",
    "start": "1473279",
    "end": "1479000"
  },
  {
    "text": "operation we already can't get any further it says to insert the letter Y so long as it goes between the letters D",
    "start": "1479000",
    "end": "1485760"
  },
  {
    "text": "and W but now that precondition on the left is no longer met we just deleted the letter D which was sort of a",
    "start": "1485760",
    "end": "1492159"
  },
  {
    "text": "reference point and now that it's gone we can't actually apply Alex's operation",
    "start": "1492159",
    "end": "1497360"
  },
  {
    "text": "anymore and nor can we continue on to Beth's so fundamentally the issue here",
    "start": "1497360",
    "end": "1502480"
  },
  {
    "start": "1500000",
    "end": "1590000"
  },
  {
    "text": "is that we lost information when we tried to resolve these conflicts so",
    "start": "1502480",
    "end": "1507600"
  },
  {
    "text": "maybe what if we didn't lose information what if instead of deleting the letter D",
    "start": "1507600",
    "end": "1513440"
  },
  {
    "text": "we just marked it as deleted but we kept a reference in memory to it this is",
    "start": "1513440",
    "end": "1518559"
  },
  {
    "text": "called a tombstone it's basically just a reminder in memory that hey there used to be a letter D here but it's gone now",
    "start": "1518559",
    "end": "1526400"
  },
  {
    "text": "but that means that operations that were applied concurrently can use that still as a reference point until they get a",
    "start": "1526400",
    "end": "1532480"
  },
  {
    "text": "chance to catch up so now if we leave that tombstone in there we can attempt to apply Alex's",
    "start": "1532480",
    "end": "1538799"
  },
  {
    "text": "operation so we see ah I want to insert the letter Y before D and after excuse",
    "start": "1538799",
    "end": "1544400"
  },
  {
    "text": "me after D and before W the D isn't there yet but at the time Alex made this",
    "start": "1544400",
    "end": "1550400"
  },
  {
    "text": "change there was a D there so at least I know where it should go and the same can be done for Beth now you'll notice in",
    "start": "1550400",
    "end": "1556000"
  },
  {
    "text": "Beth's case we could actually put the E in two different places because it's not the only letter between D and W it's up",
    "start": "1556000",
    "end": "1563520"
  },
  {
    "text": "to you how you decide to resolve that tie so long as all clients resolve that tie in exactly the same way and so then",
    "start": "1563520",
    "end": "1571120"
  },
  {
    "text": "when we want to figure out what the final string is we just hide the tombstones and we end up with the final",
    "start": "1571120",
    "end": "1576520"
  },
  {
    "text": "string so tombstones and preconditions are a useful trick that allow multiple",
    "start": "1576520",
    "end": "1581840"
  },
  {
    "text": "peers to collaborate on the same document without a central server so we're a little bit closer to multi-eer",
    "start": "1581840",
    "end": "1588559"
  },
  {
    "text": "collaboration there's one catch though so we dealt",
    "start": "1588559",
    "end": "1593760"
  },
  {
    "start": "1590000",
    "end": "1760000"
  },
  {
    "text": "with just one tombstone we just deleted the letter D from the document but let's say that you've been editing this",
    "start": "1593760",
    "end": "1599520"
  },
  {
    "text": "document for quite some time you might have a lot of tombstones and these tombstones take up memory",
    "start": "1599520",
    "end": "1606279"
  },
  {
    "text": "essentially this means that even if you have a document that only has a few characters in it the document might take",
    "start": "1606279",
    "end": "1612720"
  },
  {
    "text": "many megabytes in memory just because it's got all of this precondition excuse me all this tombstone information from",
    "start": "1612720",
    "end": "1619120"
  },
  {
    "text": "previous editing history this is fundamentally one of the difficulties dealing with the tombstone strategy it",
    "start": "1619120",
    "end": "1625600"
  },
  {
    "text": "typically requires some sort of complex garbage collection strategy and oftentimes those garbage collection",
    "start": "1625600",
    "end": "1630960"
  },
  {
    "text": "strategies are much more complicated to implement than the original algorithm was in the first place so it might work",
    "start": "1630960",
    "end": "1638559"
  },
  {
    "text": "and there are some implementations of it but they're fairly difficult to understand and they're not always practical so can we do better we've seen",
    "start": "1638559",
    "end": "1646240"
  },
  {
    "text": "two algorithms we've seen operational transforms and then we've seen techniques that use preconditions and",
    "start": "1646240",
    "end": "1651720"
  },
  {
    "text": "tombstones we can do a little bit better so now we get into a class of data types",
    "start": "1651720",
    "end": "1658159"
  },
  {
    "text": "called CRDTS crdts stands for conflict replic conflict free replicated data",
    "start": "1658159",
    "end": "1663440"
  },
  {
    "text": "types and they're not an algorithm they're actually a data type so kind of like a tree or a linked list crdts are a",
    "start": "1663440",
    "end": "1672159"
  },
  {
    "text": "data type that naturally resolve conflicts without any special resolution",
    "start": "1672159",
    "end": "1678200"
  },
  {
    "text": "algorithm so CRDTs are really cool if you implement the data structure correctly you automatically can handle",
    "start": "1678200",
    "end": "1684960"
  },
  {
    "text": "multiple changes at the same time and there's no such thing as a conflict so they're really cool theoretically and it",
    "start": "1684960",
    "end": "1690399"
  },
  {
    "text": "turns out they're actually easier in many cases to implement for real now",
    "start": "1690399",
    "end": "1695520"
  },
  {
    "text": "there are a lot of different kinds of crdts out there there's one for sets like grocery list there's one for",
    "start": "1695520",
    "end": "1701480"
  },
  {
    "text": "counters um unfortunately for a long time there hasn't been a good one for ordered sequences like text documents so",
    "start": "1701480",
    "end": "1709039"
  },
  {
    "text": "pretty much operational transforms was the only algorithm you could use to deal with text editing that has changed uh",
    "start": "1709039",
    "end": "1716480"
  },
  {
    "text": "we're going to take a look in particular at probably one of the coolest algorithms I've seen so far it's called",
    "start": "1716480",
    "end": "1722440"
  },
  {
    "text": "LSQ the linear sequence all this means is it's an ordered list so it could suit",
    "start": "1722440",
    "end": "1728000"
  },
  {
    "text": "an ordered grocery list it could sort or it could work with a to-do list or it could work with a text document where",
    "start": "1728000",
    "end": "1734559"
  },
  {
    "text": "every entry is a character or maybe every entry is a word depends on how you want to implement it now the interesting",
    "start": "1734559",
    "end": "1740960"
  },
  {
    "text": "thing about LSEQ compared to a lot of other textbased CRDTs is that it's actually fast a lot of text",
    "start": "1740960",
    "end": "1748039"
  },
  {
    "text": "implementations of a CRDT tend to be very slow and memory usage gets very",
    "start": "1748039",
    "end": "1753200"
  },
  {
    "text": "high and it gets very ownorous to make changes to that document lcq is actually",
    "start": "1753200",
    "end": "1758960"
  },
  {
    "text": "fast and memory efficient and let's take a look at the reason why we'll go back to our document here which was just the",
    "start": "1758960",
    "end": "1765200"
  },
  {
    "start": "1760000",
    "end": "1904000"
  },
  {
    "text": "string sandwich now on a computer we have many different ways that we could represent this string in memory on a",
    "start": "1765200",
    "end": "1771919"
  },
  {
    "text": "computer the easiest way would just be to have an array of characters so a",
    "start": "1771919",
    "end": "1777039"
  },
  {
    "text": "bunch of bites one after the other in memory but in a lot of programs we use",
    "start": "1777039",
    "end": "1782320"
  },
  {
    "text": "tree structures to store data like a binary tree tree structures have very useful properties in regards to",
    "start": "1782320",
    "end": "1788720"
  },
  {
    "text": "performance and memory usage well LSEQ is no exception in the LSCQ CRDT data",
    "start": "1788720",
    "end": "1795440"
  },
  {
    "text": "structure we have a very special kind of exponential tree this tree in particular",
    "start": "1795440",
    "end": "1800799"
  },
  {
    "text": "has a root node and it can have up to 10 branches so the branch factor if you're following me and uh digging back into",
    "start": "1800799",
    "end": "1807520"
  },
  {
    "text": "your bag of exponential tree knowledge has a branch factor of 10 now you can actually tune this you can pick other",
    "start": "1807520",
    "end": "1813760"
  },
  {
    "text": "branch factors but for our situation we're just going to pick 10 and each branch is labeled from 0 to 9 uh for now",
    "start": "1813760",
    "end": "1821360"
  },
  {
    "text": "0 and 9 are just reserved those are set aside for some implementation details but all the other branches can be used",
    "start": "1821360",
    "end": "1829520"
  },
  {
    "text": "and each subree works the same way you'll notice that these branches are labeled with some number",
    "start": "1829520",
    "end": "1836080"
  },
  {
    "text": "between 0 and 9 and they're ordered from left to right so to convert this tree to a",
    "start": "1836080",
    "end": "1842880"
  },
  {
    "text": "string you might ask yourself okay this tree looks really weird how on earth do I turn this into a string all you have",
    "start": "1842880",
    "end": "1848080"
  },
  {
    "text": "to do is a depth first traversal starting from the left so in this case",
    "start": "1848080",
    "end": "1854000"
  },
  {
    "text": "we just go down the tree and every time we touch a node we print out that character and we start with the left so",
    "start": "1854000",
    "end": "1859760"
  },
  {
    "text": "it's depth first traversal and eventually we end up with a string sandwich so in memory we don't represent",
    "start": "1859760",
    "end": "1865840"
  },
  {
    "text": "the string as a text document or as an array of characters we actually represent it as this tree structure",
    "start": "1865840",
    "end": "1871840"
  },
  {
    "text": "which will give us some really cool performance benefits later now we'll notice in this particular tree",
    "start": "1871840",
    "end": "1878480"
  },
  {
    "text": "it has three levels so to specify any particular node in this tree we could actually point out",
    "start": "1878480",
    "end": "1886000"
  },
  {
    "text": "the particular branches the particular branch number to point to a particular node so if I wanted to point to the node",
    "start": "1886000",
    "end": "1892799"
  },
  {
    "text": "D down there at the bottom I could say go down branch three",
    "start": "1892799",
    "end": "1898080"
  },
  {
    "text": "then branch seven then branch seven and now you know how to find node D",
    "start": "1898080",
    "end": "1903840"
  },
  {
    "text": "well that sort of gave us a unique thing it gave us an address you might even call this an ID now this ID has a lot of",
    "start": "1903840",
    "end": "1912320"
  },
  {
    "text": "really special properties that make it uh work much better than operational transforms in particular so this ID",
    "start": "1912320",
    "end": "1919919"
  },
  {
    "text": "you'll notice can get arbitrarily deep what this essentially means is that you never have to move things around in",
    "start": "1919919",
    "end": "1926159"
  },
  {
    "text": "memory you just keep inserting in between so unlike a an array of",
    "start": "1926159",
    "end": "1931440"
  },
  {
    "text": "characters where to insert something you have to offset everything after that character with this data structure you",
    "start": "1931440",
    "end": "1937840"
  },
  {
    "text": "don't you don't move things around which gives us some other really interesting properties so TLDDR the address is",
    "start": "1937840",
    "end": "1945600"
  },
  {
    "text": "essentially the ID for this node so if we want to talk about any changes we want to make in the document we could",
    "start": "1945600",
    "end": "1951679"
  },
  {
    "text": "talk about an insertion so let's say that someone wants to insert the letter Y between two other branches between",
    "start": "1951679",
    "end": "1958960"
  },
  {
    "text": "these two other addresses now if we looked these up we'd see that these are the nodes for letters D and W so this",
    "start": "1958960",
    "end": "1966480"
  },
  {
    "text": "insert operation is going to return a brand new address for us in other words",
    "start": "1966480",
    "end": "1971600"
  },
  {
    "text": "where we should add this new letter so if we wanted to insert the letter Y this algorithm is telling us hey you should",
    "start": "1971600",
    "end": "1977760"
  },
  {
    "text": "add a new letter Y you should add it at the address",
    "start": "1977760",
    "end": "1982919"
  },
  {
    "text": "3.7.9 now unfortunately I'm going to have to skim over this but actually the bulk of the paper if you go read about",
    "start": "1982919",
    "end": "1989120"
  },
  {
    "text": "the LSQ algorithm the bulk of the algorithm is actually about how do you pick these IDs when you have multiple",
    "start": "1989120",
    "end": "1994399"
  },
  {
    "text": "choices because if you make bad choices your tree gets very deep which essentially means you lose the",
    "start": "1994399",
    "end": "2000080"
  },
  {
    "text": "performance benefits of having it arranged like a tree structure but depending on how the user edits the",
    "start": "2000080",
    "end": "2006039"
  },
  {
    "text": "document you can't really figure out which ID you should pick if you have several choices so most of the paper is",
    "start": "2006039",
    "end": "2013279"
  },
  {
    "text": "actually dedicated to proving a uh unique strategy that regardless of the",
    "start": "2013279",
    "end": "2019440"
  },
  {
    "text": "user's editing behavior picks good IDs in our case we're going to wave our hands and we're going to pretend that we",
    "start": "2019440",
    "end": "2024799"
  },
  {
    "text": "came up with a great ID to start with we only had two choices after all so to apply this to the tree all we do",
    "start": "2024799",
    "end": "2032080"
  },
  {
    "text": "is we go down the tree looking for three seven and then we see nine hm there's not a branch for that let's just add it",
    "start": "2032080",
    "end": "2039120"
  },
  {
    "text": "and that's all we do and again if we were to read this out as a string using depth first traversal starting on the",
    "start": "2039120",
    "end": "2045039"
  },
  {
    "text": "left this now reads out as sandy witch now you'll notice even though we performed a a text insertion we didn't",
    "start": "2045039",
    "end": "2052158"
  },
  {
    "text": "move anything we just added a branch now there are a few edge cases where it does",
    "start": "2052159",
    "end": "2057358"
  },
  {
    "text": "cause you to move maybe two or three nodes but in the general case you don't",
    "start": "2057359",
    "end": "2062638"
  },
  {
    "text": "end up moving anything in memory this means that inserting into a tree and deleting from the tree is fast compared",
    "start": "2062639",
    "end": "2069919"
  },
  {
    "text": "to a lot of other text algorithms that were crdts these were very slow and typically they didn't work well with the",
    "start": "2069919",
    "end": "2076079"
  },
  {
    "text": "typical document you do in Google Docs this algorithm on the other hand is very fast but what if we have Alex and Beth again",
    "start": "2076079",
    "end": "2083280"
  },
  {
    "text": "and they're making changes at the same time so let's say that Alex did an insert operation he's inserting the",
    "start": "2083280",
    "end": "2089520"
  },
  {
    "text": "letter Y at the address 3.7.9 and Beth is inserting the letter H at 3.8.2 and",
    "start": "2089520",
    "end": "2096960"
  },
  {
    "text": "these changes were performed in isolation so now that they're going to sync up what do they have to do to",
    "start": "2096960",
    "end": "2102560"
  },
  {
    "text": "resolve the conflict they don't have to do anything they just apply the operations they don't even have to apply",
    "start": "2102560",
    "end": "2107920"
  },
  {
    "text": "them in any particular order and this is where that word commutative",
    "start": "2107920",
    "end": "2113440"
  },
  {
    "text": "you might have heard of so typically we talk about conflict free replicated data types um you'll also hear another",
    "start": "2113440",
    "end": "2118800"
  },
  {
    "text": "modifier where we call it commutative replicated data types this just means that the order of operations doesn't",
    "start": "2118800",
    "end": "2124880"
  },
  {
    "text": "matter if they happened concurrently so a lot of crdts including this one have this really cool property that it",
    "start": "2124880",
    "end": "2131760"
  },
  {
    "text": "doesn't matter if you insert the y first or you insert the h first you end up at",
    "start": "2131760",
    "end": "2137520"
  },
  {
    "text": "the exact same copy of the document and this is because those IDs never change",
    "start": "2137520",
    "end": "2143760"
  },
  {
    "text": "which means they're immutable which also means that once you delete characters",
    "start": "2143760",
    "end": "2149119"
  },
  {
    "text": "let's suppose you wanted to delete that H even though you no longer have a reference to that node in memory if",
    "start": "2149119",
    "end": "2155599"
  },
  {
    "text": "someone else was referencing that node those IDs tell you where it used to be",
    "start": "2155599",
    "end": "2160880"
  },
  {
    "text": "so you don't even need a tombstone for it so TLDDR",
    "start": "2160880",
    "end": "2167200"
  },
  {
    "text": "LSQ allows you to have very good memory performance because the tombstones don't need to exist the ids themselves tell",
    "start": "2167200",
    "end": "2174720"
  },
  {
    "text": "you where that item used to be so if we read this out to a string we now get sandy witch that's a lot easier than",
    "start": "2174720",
    "end": "2182079"
  },
  {
    "text": "what we were doing with operational transforms now the tree of course looks crazier than just doing our little",
    "start": "2182079",
    "end": "2187440"
  },
  {
    "text": "offset by one trick but this works for any number of peers and it turns out it's very resilient for long offline",
    "start": "2187440",
    "end": "2194480"
  },
  {
    "text": "spells so the key takeaway with CRDTS is that conflict resolution is baked into the",
    "start": "2194480",
    "end": "2200560"
  },
  {
    "text": "data type itself so a lot of times in computer science you'll hear about algorithms and data types being two",
    "start": "2200560",
    "end": "2206400"
  },
  {
    "text": "different ways to solve the same kinds of problems and this is a classic example of that and it turns out the",
    "start": "2206400",
    "end": "2211520"
  },
  {
    "text": "data type approach is very elegant it also works really really well so in",
    "start": "2211520",
    "end": "2216800"
  },
  {
    "text": "particular the LSQ algorith um data type is very powerful for text documents unlike operational transforms it doesn't",
    "start": "2216800",
    "end": "2224160"
  },
  {
    "text": "require a central server in other words if you have four people working on a document they don't need a one peer",
    "start": "2224160",
    "end": "2231119"
  },
  {
    "text": "translating operations between them they can talk directly to each other in sort of a gossip style uh so if you had 10",
    "start": "2231119",
    "end": "2238400"
  },
  {
    "text": "people on the top of a mountain without any internet connection why not it totally works this algorithm also",
    "start": "2238400",
    "end": "2244720"
  },
  {
    "text": "doesn't rely on any tombstones as we saw or complex garbage collection strategies",
    "start": "2244720",
    "end": "2250320"
  },
  {
    "text": "which are often the hardest part of implementing some of the tombstone based algorithms so in turn this means that",
    "start": "2250320",
    "end": "2257280"
  },
  {
    "text": "the size of an LCQ tree grows very slowly and because it's a tree structure",
    "start": "2257280",
    "end": "2262560"
  },
  {
    "text": "this generally means that when you apply an operation or like say insert a letter or delete a letter it happens in log n",
    "start": "2262560",
    "end": "2269920"
  },
  {
    "text": "time because the tree structure means you can get to these different nodes in the tree much",
    "start": "2269920",
    "end": "2276359"
  },
  {
    "text": "faster so LSQ is a very powerful algorithm unfortunately it's mostly hiding in an academic paper there's one",
    "start": "2276359",
    "end": "2283040"
  },
  {
    "text": "implementation of it I'm aware of which is one that I've hacked on this is a JavaScript implementation of it um it's",
    "start": "2283040",
    "end": "2290240"
  },
  {
    "text": "a very interesting algorithm and the implementation is a very research papery",
    "start": "2290240",
    "end": "2296400"
  },
  {
    "text": "so it's probably not something you'll use in a production application i do have a demo I'll be showing however to show you that hey it actually works and",
    "start": "2296400",
    "end": "2303520"
  },
  {
    "text": "it can work with multiple peers now there's actually some really cool",
    "start": "2303520",
    "end": "2308560"
  },
  {
    "text": "CRDT work that's been happening right now just in the last year a really exciting new CRDT came out it actually",
    "start": "2308560",
    "end": "2315839"
  },
  {
    "text": "came out the week or so before I first gave this talk and it's a CRDT for JSON",
    "start": "2315839",
    "end": "2322320"
  },
  {
    "text": "documents so imagine having a tree structure that has the same constraints of a JSON and being able to",
    "start": "2322320",
    "end": "2328720"
  },
  {
    "text": "automatically resolve changes and conflicts to it so the JSON CRDT is really amazing for cases where you want",
    "start": "2328720",
    "end": "2335920"
  },
  {
    "text": "the CRDT approach for maybe something that works more like a tree instead of a",
    "start": "2335920",
    "end": "2341520"
  },
  {
    "text": "string so some examples that come to mind Redux state maybe you just want an automagically sync state between a",
    "start": "2341520",
    "end": "2348160"
  },
  {
    "text": "couple React apps that are powered by Redux you could throw a JSON CRDT at it",
    "start": "2348160",
    "end": "2353280"
  },
  {
    "text": "uh or maybe you are dealing with a NoSQL database and you want to resolve conflicts in some of those objects you",
    "start": "2353280",
    "end": "2359920"
  },
  {
    "text": "could use that now unfortunately this is mostly hiding in a paper this is version two of the",
    "start": "2359920",
    "end": "2365440"
  },
  {
    "text": "paper they massively revised um the notation which isn't any easier for me to read than it was the first time",
    "start": "2365440",
    "end": "2372560"
  },
  {
    "text": "there's uh a reference implementation in Scala um and uh there's this really",
    "start": "2372560",
    "end": "2377680"
  },
  {
    "text": "great implementation in JavaScript too not really i really wish there was",
    "start": "2377680",
    "end": "2383359"
  },
  {
    "text": "um in fact I would love to implement this i banged my head on the paper notation for a couple months now it's",
    "start": "2383359",
    "end": "2389680"
  },
  {
    "text": "quite beyond me so actually if you're good with Scola or mathematical notation or Haskell please come find me because I",
    "start": "2389680",
    "end": "2396960"
  },
  {
    "text": "would like nothing better than to work with you for the over the next few days and hash out some sort of JavaScript",
    "start": "2396960",
    "end": "2403599"
  },
  {
    "text": "implementation because what more natural place to be using peer-to-peer and collaborative stuff than in the browser",
    "start": "2403599",
    "end": "2410720"
  },
  {
    "text": "where we all have internet connections or we're using WebRTC so help me make this a reality i",
    "start": "2410720",
    "end": "2417760"
  },
  {
    "text": "would love to build this sort of thing so now we've looked at some different",
    "start": "2417760",
    "end": "2422800"
  },
  {
    "start": "2419000",
    "end": "2663000"
  },
  {
    "text": "algorithms for dealing with conflicts so now we get to the second part of this talk which is how do we communicate",
    "start": "2422800",
    "end": "2428880"
  },
  {
    "text": "those changes now there's a lot of different strategies for dealing with this maybe if we have an internet connection we don't even have to worry",
    "start": "2428880",
    "end": "2435040"
  },
  {
    "text": "about that but if we're talking about algorithms that work between multiple peers without a central server we might",
    "start": "2435040",
    "end": "2441599"
  },
  {
    "text": "as well talk about peer-to-peer networking there's a lot of difficulty to doing",
    "start": "2441599",
    "end": "2447119"
  },
  {
    "text": "peer-to-p peer networking and I am just barely scratching the surface because I only know the surface because peer-to-p",
    "start": "2447119",
    "end": "2453440"
  },
  {
    "text": "peer networking is hard um you have to solve quite a few problems to deal with",
    "start": "2453440",
    "end": "2459040"
  },
  {
    "text": "creating a reliable and secure peer-to-peer mesh network that just automatically works in particular these",
    "start": "2459040",
    "end": "2466560"
  },
  {
    "text": "are four of the hardest problems you deal with creating a peer-to-peer network so the first is how",
    "start": "2466560",
    "end": "2472880"
  },
  {
    "text": "do you create a good network topology one that is fault tolerant so if there are 10 people in a room and each laptop",
    "start": "2472880",
    "end": "2478720"
  },
  {
    "text": "is going to connect to maybe two of its peers at most how do you pick those peers in such a way that most people can",
    "start": "2478720",
    "end": "2485040"
  },
  {
    "text": "get a message to everyone else in such a way that it's fault tolerant that's a difficult problem um how do you discover",
    "start": "2485040",
    "end": "2492000"
  },
  {
    "text": "those peers to begin with so what's the discovery mechanism how are you going to relay those messages in such a way that",
    "start": "2492000",
    "end": "2498319"
  },
  {
    "text": "you won't hear echoes maybe the same message makes its way back to you a few times how do you make sure that you",
    "start": "2498319",
    "end": "2504720"
  },
  {
    "text": "haven't heard this message before and then of course securing it how do you make sure that this message is authentic",
    "start": "2504720",
    "end": "2510079"
  },
  {
    "text": "and comes from someone you trust so with network topology let's suppose that Alex and",
    "start": "2510079",
    "end": "2516800"
  },
  {
    "text": "Beth are up in the mountains and they have a lot of hiking friends with them probably because they like sandwiches and they offered the rest of their",
    "start": "2516800",
    "end": "2522880"
  },
  {
    "text": "picnic and maybe Alex wants to send a message to Beth and there was this one",
    "start": "2522880",
    "end": "2528680"
  },
  {
    "text": "connection but the connection's a little bit fuzzy if that connection drops out",
    "start": "2528680",
    "end": "2533760"
  },
  {
    "text": "Alex now has no way to talk to Beth that's not good so there's an alternate",
    "start": "2533760",
    "end": "2540240"
  },
  {
    "text": "network topology that if we had that it would be much more resilient to problems",
    "start": "2540240",
    "end": "2545280"
  },
  {
    "text": "so now if any of these connections dropped along the way there's a better chance that Alex will be able to get his",
    "start": "2545280",
    "end": "2551119"
  },
  {
    "text": "messages through to Beth and so for the most part we can just assume that if",
    "start": "2551119",
    "end": "2556400"
  },
  {
    "text": "Alex wants to send a message to Beth that it eventually gets there somehow or another and so then we can abstract away",
    "start": "2556400",
    "end": "2564160"
  },
  {
    "text": "this networking layer and we can just assume that hey if I want to send messages from Alex to Beth the message",
    "start": "2564160",
    "end": "2570240"
  },
  {
    "text": "will eventually get there and it's reliable and it's secure all of this ought to be provided at the transport",
    "start": "2570240",
    "end": "2576400"
  },
  {
    "text": "and networking level now some of this should probably sound familiar because",
    "start": "2576400",
    "end": "2583280"
  },
  {
    "text": "we're basically reinventing how the internet already works with routers so the TCP IP protocol has incredible fault",
    "start": "2583280",
    "end": "2591440"
  },
  {
    "text": "tolerance if any router goes down or if one of the connections gets clogged TCP IP can automatically detect that and",
    "start": "2591440",
    "end": "2597680"
  },
  {
    "text": "pick alternate routes it also handles things like throttling connection speed and resending packages that packets that",
    "start": "2597680",
    "end": "2604880"
  },
  {
    "text": "get dropped so these are all things that ought to be handled at a networking level it turns out it's just a little",
    "start": "2604880",
    "end": "2611119"
  },
  {
    "text": "bit harder with peer-to-peer because instead of having routers that handle this sort of thing now you're making",
    "start": "2611119",
    "end": "2616240"
  },
  {
    "text": "everyone's computer a router so thankfully some other people have done the work of reinventing the",
    "start": "2616240",
    "end": "2622400"
  },
  {
    "text": "internet for us so you might be interested in checking out uh some of these different popular protocols",
    "start": "2622400",
    "end": "2628960"
  },
  {
    "text": "um these different network transports which give you reliable ways to send these messages in a peer-to-peer fashion",
    "start": "2628960",
    "end": "2635200"
  },
  {
    "text": "scuttlebutt gossip hyperlog there's even a um binary library that you can pull in",
    "start": "2635200",
    "end": "2640880"
  },
  {
    "text": "called lib P2P that gives you a lot of these network layer tools that you can use so there's a lot of really cool",
    "start": "2640880",
    "end": "2646880"
  },
  {
    "text": "stuff out there it is a little it's a little bit heady but most of it's beyond me so I just list it it's a little bit",
    "start": "2646880",
    "end": "2654160"
  },
  {
    "text": "easier than trying to explain how all the magic works any sufficiently difficult problem domain is",
    "start": "2654160",
    "end": "2660680"
  },
  {
    "text": "indistinguishable from magic now if you're interested in seeing some more peer-to-p peer awesomeness some",
    "start": "2660680",
    "end": "2666160"
  },
  {
    "start": "2663000",
    "end": "2913000"
  },
  {
    "text": "different things you can do with it there's this really great page uh I spent a lot of time just diving through",
    "start": "2666160",
    "end": "2671680"
  },
  {
    "text": "this all kinds of cool demos just showing you some of the cool problems you can solve with peer-to-peer",
    "start": "2671680",
    "end": "2677920"
  },
  {
    "text": "algorithms and peer-to-peer networks now the last component was Alex",
    "start": "2677920",
    "end": "2683119"
  },
  {
    "text": "and Beth if they're going to do this writing they need a really great collaborative editor and this is where the fun begins for front-end developers",
    "start": "2683119",
    "end": "2689760"
  },
  {
    "text": "creating this great experience so Alex and Beth can start collaborating on the go so I'm just to motivate this a little",
    "start": "2689760",
    "end": "2696079"
  },
  {
    "text": "bit I'll show you guys um a demo that uses the LCQ data",
    "start": "2696079",
    "end": "2703960"
  },
  {
    "text": "structure and in this case I'm cheating because I'm going to be using",
    "start": "2703960",
    "end": "2709880"
  },
  {
    "text": "um MDNS under the hood just to get them connected but this would theoretically",
    "start": "2709880",
    "end": "2715280"
  },
  {
    "text": "work over any transport so this is a rich markdown editing experience it's",
    "start": "2715280",
    "end": "2720400"
  },
  {
    "text": "powered by content editable in the browser and as you would expect it doesn't work probably because I started",
    "start": "2720400",
    "end": "2728400"
  },
  {
    "text": "this a few hours ago all right hello",
    "start": "2728400",
    "end": "2736800"
  },
  {
    "text": "Sandwiches so hey it's a markdown editor really exciting right but the point of",
    "start": "2743800",
    "end": "2749359"
  },
  {
    "text": "this is to show you LCQ is doing this in the backgrounds and LSQ is just very",
    "start": "2749359",
    "end": "2756560"
  },
  {
    "text": "powerful for text documents but now imagine you had three or four people working on this think about what kinds",
    "start": "2756560",
    "end": "2763280"
  },
  {
    "text": "of experiences and problems you could solve with any collaborative approach maybe you're a musician maybe you're",
    "start": "2763280",
    "end": "2769520"
  },
  {
    "text": "interested in how can three or four musicians collaborate on sheet music together there's some really cool text",
    "start": "2769520",
    "end": "2774880"
  },
  {
    "text": "languages out there like Lily Pond that allow you to describe music in text",
    "start": "2774880",
    "end": "2780160"
  },
  {
    "text": "perhaps you could wrap a collaborative editor around it or maybe you're interested in just replicating Redux",
    "start": "2780160",
    "end": "2787359"
  },
  {
    "text": "state you can pull the JSON CRDT and get these incredible collaborative experiences for free there are a lot of",
    "start": "2787359",
    "end": "2793280"
  },
  {
    "text": "really cool solutions out there and a lot of cool problems that you can apply CRDTS to",
    "start": "2793280",
    "end": "2801079"
  },
  {
    "text": "if you're interested in seeing the source code for that particular demo and some of the hacks that I did on the LSQ",
    "start": "2802000",
    "end": "2807440"
  },
  {
    "text": "code uh you can check out this repository i do have a fair amount of work i haven't committed back to it",
    "start": "2807440",
    "end": "2813200"
  },
  {
    "text": "because I just did a lot of hacking and I wasn't too sure I was ready to commit it yet but between these sorts of",
    "start": "2813200",
    "end": "2820560"
  },
  {
    "text": "algorithms and a lot of really exciting connectivity options that are coming out soon there's a lot of really cool stuff",
    "start": "2820560",
    "end": "2826079"
  },
  {
    "text": "you can do that has nothing to do with an internet connection in particular I'm really looking forward to LTE direct",
    "start": "2826079",
    "end": "2832480"
  },
  {
    "text": "imagine being able to do peer-to-peer mesh networking with people from miles",
    "start": "2832480",
    "end": "2838079"
  },
  {
    "text": "away without a cell tower there's a lot of really cool opportunities coming out and a lot of cool new standards coming",
    "start": "2838079",
    "end": "2843520"
  },
  {
    "text": "out that would allow Alex Smith to collaborate with a crowd of friends over any of these supported networking",
    "start": "2843520",
    "end": "2849119"
  },
  {
    "text": "options and since there's no central server and you don't need an internet connection peers can just directly talk",
    "start": "2849119",
    "end": "2855200"
  },
  {
    "text": "to each other and this gets us all closer to making great collaborative experiences for digital nomads like Alex",
    "start": "2855200",
    "end": "2862480"
  },
  {
    "text": "and Beth again we focus on collaborating as a writer but these same algorithms could be applied in music or to artists",
    "start": "2862480",
    "end": "2869760"
  },
  {
    "text": "who want to collaborate anywhere with the digital nomad lifestyle it's just that all these algorithms are hiding in",
    "start": "2869760",
    "end": "2876079"
  },
  {
    "text": "academic papers you know some light bedtime reading so there's a lot of cool stuff",
    "start": "2876079",
    "end": "2882000"
  },
  {
    "text": "out there but unfortunately a lot of it is hiding so if you're interested in tearing away some of the covers and",
    "start": "2882000",
    "end": "2887359"
  },
  {
    "text": "helping me figure out in particular Jason CRDT please find me because that is one that has not proved to be light",
    "start": "2887359",
    "end": "2893599"
  },
  {
    "text": "bedtime reading now if you're interested just in things related to the digital nomad",
    "start": "2893599",
    "end": "2899119"
  },
  {
    "text": "lifestyle or you like pretty pictures uh feel free to check out my site yellowscale.com or you can find me on",
    "start": "2899119",
    "end": "2906160"
  },
  {
    "text": "Twitter at nibbler uh any questions",
    "start": "2906160",
    "end": "2912760"
  }
]