[
  {
    "start": "0",
    "end": "101000"
  },
  {
    "text": "hello everyone hello so welcome to this interesting talk the",
    "start": "9420",
    "end": "16690"
  },
  {
    "text": "curiously recurring pattern of couple types you may notice that we are two on",
    "start": "16690",
    "end": "22000"
  },
  {
    "text": "the stage adi yeah and bjorn and actually brewing is gonna start so I'll just join right",
    "start": "22000",
    "end": "27790"
  },
  {
    "text": "join you guys so I won't bore you very much with a background you can read my",
    "start": "27790",
    "end": "34750"
  },
  {
    "text": "name beyond father I'm doing primarily c++ i live in stockholm fairly active in",
    "start": "34750",
    "end": "40480"
  },
  {
    "text": "the stockholm say professor user group so if you go there get in touch so we can get out on to the topic what i'm",
    "start": "40480",
    "end": "51339"
  },
  {
    "text": "going to talk about today me and addy is primarily concerning those of you who",
    "start": "51339",
    "end": "58390"
  },
  {
    "text": "program in languages with static typing and preferably with for some definition",
    "start": "58390",
    "end": "67150"
  },
  {
    "text": "sane type systems sanity can be a",
    "start": "67150",
    "end": "72190"
  },
  {
    "text": "gradual thing also a curious thing about",
    "start": "72190",
    "end": "78640"
  },
  {
    "text": "this is we're going to tell you things that you already know and despite this",
    "start": "78640",
    "end": "85240"
  },
  {
    "text": "we really think that we're going to change the way you view API design so",
    "start": "85240",
    "end": "92759"
  },
  {
    "text": "without further ado let's let's dive into some some examples a number of",
    "start": "92759",
    "end": "100299"
  },
  {
    "text": "examples here so we have a 2d space a plane and we have a vector on the plane",
    "start": "100299",
    "end": "107530"
  },
  {
    "start": "101000",
    "end": "101000"
  },
  {
    "text": "a vector really only has two properties it has a length and a direction we can",
    "start": "107530",
    "end": "116350"
  },
  {
    "text": "add another vector to hear a different length a different direction where they",
    "start": "116350",
    "end": "123999"
  },
  {
    "text": "are placed on the plane doesn't really matter it has no concern whatsoever so changing this is it looks different but",
    "start": "123999",
    "end": "131580"
  },
  {
    "text": "it's not really a difference what it represents though it's still the same two vectors V 1 we V 1 and V 2",
    "start": "131580",
    "end": "138840"
  },
  {
    "text": "but this representation makes it easier to talk about addition",
    "start": "138840",
    "end": "144319"
  },
  {
    "text": "because we see addition of vectors as just attaching them tail to no state to",
    "start": "144319",
    "end": "150469"
  },
  {
    "text": "nose and getting the result from the the",
    "start": "150469",
    "end": "155599"
  },
  {
    "text": "tail of the first to the head of the last and you know this right we can",
    "start": "155599",
    "end": "164629"
  },
  {
    "text": "negate a vector by just swapping its direction we can move them around as I",
    "start": "164629",
    "end": "170269"
  },
  {
    "text": "said and we can get a the difference between two vectors by adding with the",
    "start": "170269",
    "end": "176450"
  },
  {
    "text": "negation nothing new and we can multiply a vector with a scalar to extend it or",
    "start": "176450",
    "end": "184730"
  },
  {
    "text": "shrink it it only changes its lengths it doesn't change its direction multiplying",
    "start": "184730",
    "end": "194150"
  },
  {
    "text": "vectors after nonsense",
    "start": "194150",
    "end": "199819"
  },
  {
    "text": "doesn't make sense not in not in this universe and the way I come can have",
    "start": "199819",
    "end": "208940"
  },
  {
    "text": "positions on our plane so I have a position p1 and another position what",
    "start": "208940",
    "end": "216889"
  },
  {
    "text": "what can we do with those well we can for example subtract them and the difference between two points is a",
    "start": "216889",
    "end": "223699"
  },
  {
    "text": "vector that gets you from one of the points to the other and likewise if we",
    "start": "223699",
    "end": "229069"
  },
  {
    "text": "have another vector v2 here and that can",
    "start": "229069",
    "end": "234440"
  },
  {
    "text": "add this vector V T to P 1 and we get another to another point so the point",
    "start": "234440",
    "end": "241699"
  },
  {
    "text": "plus a vector is a point point - point is a vector and point plus point is",
    "start": "241699",
    "end": "251590"
  },
  {
    "text": "nonsense it doesn't make sense at least not in this universe",
    "start": "252849",
    "end": "259510"
  },
  {
    "text": "so let's forget about vectors and points and 2d planes for a moment I never look",
    "start": "262230",
    "end": "270520"
  },
  {
    "text": "at time so this is my showing of my extremely good skills of a graphic",
    "start": "270520",
    "end": "275590"
  },
  {
    "text": "design this is supposed to represent the clock face so we have a point in time",
    "start": "275590",
    "end": "282460"
  },
  {
    "text": "it's what can it be 4 minutes past 6:00 roughly something like that and they",
    "start": "282460",
    "end": "288970"
  },
  {
    "text": "have another clock face showing another point in time so what is the result of",
    "start": "288970",
    "end": "297430"
  },
  {
    "text": "subtracting this what's the difference sorry I heard a duration yes so we have",
    "start": "297430",
    "end": "305950"
  },
  {
    "text": "the amount of time that has passed from one of the time points until we reach",
    "start": "305950",
    "end": "311950"
  },
  {
    "text": "the other one so it's a duration and if you're C++ developers you know the",
    "start": "311950",
    "end": "317520"
  },
  {
    "text": "chrono library where we call these time points and durations what about adding",
    "start": "317520",
    "end": "326320"
  },
  {
    "text": "time points it doesn't make sense",
    "start": "326320",
    "end": "331570"
  },
  {
    "text": "I cannot do that it's it's a meaningless thing what is a quarter past six plus",
    "start": "331570",
    "end": "338919"
  },
  {
    "text": "seven o'clock I cannot comprehend that",
    "start": "338919",
    "end": "345870"
  },
  {
    "text": "but we can have a duration plus a time point and get another time point because",
    "start": "348500",
    "end": "354300"
  },
  {
    "text": "that makes sense so four minutes past six plus eight minutes yeah that makes",
    "start": "354300",
    "end": "361950"
  },
  {
    "text": "sense I can see that C programmers pointer",
    "start": "361950",
    "end": "369960"
  },
  {
    "text": "arithmetic the source of absolutely no problems ever in software development right so have an an array of A's doesn't",
    "start": "369960",
    "end": "381060"
  },
  {
    "text": "matter what a is it's completely irrelevant but we can have a pointer p1 that points into the array and another",
    "start": "381060",
    "end": "390180"
  },
  {
    "text": "pointer to somewhere else in the array what's the result of subtracting them",
    "start": "390180",
    "end": "396630"
  },
  {
    "text": "what is D in the C standard library the",
    "start": "396630",
    "end": "406590"
  },
  {
    "text": "type of D is PTO DT which is an integer which is interesting in itself but let's",
    "start": "406590",
    "end": "413070"
  },
  {
    "text": "not go there what D is the distance the",
    "start": "413070",
    "end": "418560"
  },
  {
    "text": "number of times you must increment the pointer from p1 until you reach p2 and",
    "start": "418560",
    "end": "427260"
  },
  {
    "text": "of course we can go the other way around well okay we can try to add pointers",
    "start": "427260",
    "end": "432810"
  },
  {
    "text": "what does that mean not much it's",
    "start": "432810",
    "end": "437960"
  },
  {
    "text": "nonsense operation we cannot add pointers but we can subtract a distance",
    "start": "437960",
    "end": "445710"
  },
  {
    "text": "from one pointer to get another pointer and this is curious I think it's really",
    "start": "445710",
    "end": "453450"
  },
  {
    "text": "curious because are you seeing a pattern well I've talked now about three",
    "start": "453450",
    "end": "461250"
  },
  {
    "text": "completely different things but you see a pattern",
    "start": "461250",
    "end": "465530"
  },
  {
    "text": "because I did I was working on a small",
    "start": "468070",
    "end": "475630"
  },
  {
    "text": "C++ type safety library to make it easy to express safe types strong types that",
    "start": "475630",
    "end": "484270"
  },
  {
    "text": "only allows the conversions that make sense and I had seen this pattern",
    "start": "484270",
    "end": "489400"
  },
  {
    "text": "repeatedly in the code I was working with and I wanted to model this in this",
    "start": "489400",
    "end": "496960"
  },
  {
    "text": "library but I didn't know how where actually I knew how to model it but it",
    "start": "496960",
    "end": "502030"
  },
  {
    "text": "didn't know what to call it and then comes addy my co-presenter so",
    "start": "502030",
    "end": "510520"
  },
  {
    "text": "he introduced me to this YouTube video and their idea of affine geometries",
    "start": "510520",
    "end": "517530"
  },
  {
    "text": "which is exactly what this is so the",
    "start": "517530",
    "end": "525040"
  },
  {
    "text": "three examples I showed you with a 2d plane doing vector arithmetic and points",
    "start": "525040",
    "end": "533140"
  },
  {
    "text": "and the chrono with time points and durations and the pointer arithmetic sin",
    "start": "533140",
    "end": "538270"
  },
  {
    "text": "arrays they are all representations of",
    "start": "538270",
    "end": "543820"
  },
  {
    "text": "an affine space geometry they're all the",
    "start": "543820",
    "end": "549400"
  },
  {
    "text": "two latter ones are one-dimensional geometries and the the plane is a two",
    "start": "549400",
    "end": "555550"
  },
  {
    "text": "dimension but it's the same principle so I have a deed to thank for finding the",
    "start": "555550",
    "end": "562260"
  },
  {
    "text": "name for this so that I could add it to my library and with that I hand over to",
    "start": "562260",
    "end": "568210"
  },
  {
    "text": "addy all right so I'm actually a computer",
    "start": "568210",
    "end": "576870"
  },
  {
    "text": "vision developer I do a lot of geometry and I came around to noticing this same",
    "start": "576870",
    "end": "583980"
  },
  {
    "text": "pattern through my work and I think a",
    "start": "583980",
    "end": "590040"
  },
  {
    "text": "lot of the number system and type systems or fundamental mathematical systems that we commonly encounter are",
    "start": "590040",
    "end": "597240"
  },
  {
    "text": "what's known in mathematics as monoids they're generally closed under some operations it's always an integer plus",
    "start": "597240",
    "end": "605160"
  },
  {
    "text": "an integer would give an integer usually the operations take two arguments of the",
    "start": "605160",
    "end": "610710"
  },
  {
    "text": "same type and return and the result is always the same type and I suddenly",
    "start": "610710",
    "end": "615720"
  },
  {
    "text": "noticed the same patterns that Bjorn was mentioning where we have a very",
    "start": "615720",
    "end": "620760"
  },
  {
    "text": "interesting interaction between two distinct types that has some very",
    "start": "620760",
    "end": "625950"
  },
  {
    "text": "interesting behavior and very and it turns out that this behavior is actually very well defined and very well known",
    "start": "625950",
    "end": "632100"
  },
  {
    "text": "for at least 200 years in math and all you have to do is just identify the term",
    "start": "632100",
    "end": "637110"
  },
  {
    "text": "and I didn't I think I was curious about this and somebody on slack happened to",
    "start": "637110",
    "end": "642330"
  },
  {
    "text": "just mention the name and I started digging and came across what we're going",
    "start": "642330",
    "end": "647400"
  },
  {
    "text": "to see today and although we will get into some mathematical terminology we're",
    "start": "647400",
    "end": "653850"
  },
  {
    "text": "not going to this is not a math talk because I think the important thing to take from here is how to do API design",
    "start": "653850",
    "end": "660630"
  },
  {
    "text": "how to design your fundamental types so that they save you from yourself but",
    "start": "660630",
    "end": "666480"
  },
  {
    "text": "before that let's talk a little bit about affine spaces and affine spaces",
    "start": "666480",
    "end": "671550"
  },
  {
    "text": "generally have intuitively they have two distinct types we have a point which as",
    "start": "671550",
    "end": "678120"
  },
  {
    "text": "we saw in the example before it can be some kind of position maybe it's specified with coordinate values the",
    "start": "678120",
    "end": "685170"
  },
  {
    "text": "actual internal representation isn't does it necessarily mean isn't really",
    "start": "685170",
    "end": "691260"
  },
  {
    "text": "related to the kind of to the behavior itself so it might have different types of representations but we can think of",
    "start": "691260",
    "end": "697530"
  },
  {
    "text": "poit points as locations or addresses or indices or any kind of thing that",
    "start": "697530",
    "end": "702630"
  },
  {
    "text": "represents a position the second type is which behaves basically as a normal",
    "start": "702630",
    "end": "710459"
  },
  {
    "text": "linear algebra 101 vector and it's defined as the difference between two",
    "start": "710459",
    "end": "716820"
  },
  {
    "text": "points and it's often referred to as a shift in 1d often or an offset or",
    "start": "716820",
    "end": "721980"
  },
  {
    "text": "displacement or when we're talking about time we may call it the English term would be duration but these are all",
    "start": "721980",
    "end": "729360"
  },
  {
    "text": "different names for the same mathematical object that the vector represents now I mentioned that the",
    "start": "729360",
    "end": "736769"
  },
  {
    "text": "internal representation may change so we might think of a point as implemented",
    "start": "736769",
    "end": "742230"
  },
  {
    "text": "internally as some kind of origin plus an offset however point is still not",
    "start": "742230",
    "end": "747750"
  },
  {
    "text": "even after even though we have this internal representation it doesn't mean that the point is the vector it's a",
    "start": "747750",
    "end": "753930"
  },
  {
    "text": "totally distinct type and it defines totally different behaviors now let's",
    "start": "753930",
    "end": "760829"
  },
  {
    "start": "760000",
    "end": "760000"
  },
  {
    "text": "look at some more at some definitions so as we said the affine space it has two",
    "start": "760829",
    "end": "766380"
  },
  {
    "text": "types of entities the points vector then of course scalars because now the vectors are in normal vector space",
    "start": "766380",
    "end": "772610"
  },
  {
    "text": "anyone who's taking any linear algebra you know we have closure and the usual operations like addition subtraction we",
    "start": "772610",
    "end": "779190"
  },
  {
    "text": "can multiply by the scalar and we can do linear combinations just like any vector",
    "start": "779190",
    "end": "785279"
  },
  {
    "text": "that I'm sure many of you have already implemented or used whenever you're doing graphics or gaming or anything to",
    "start": "785279",
    "end": "794430"
  },
  {
    "text": "do with multi dimensional data in the offering space adds these additional",
    "start": "794430",
    "end": "801449"
  },
  {
    "text": "following properties and it's exactly the ones we saw before I'm not going I'm actually not showing you anything that",
    "start": "801449",
    "end": "808380"
  },
  {
    "text": "Buuren hasn't shown before that given two points P and Q the difference",
    "start": "808380",
    "end": "814050"
  },
  {
    "text": "between them is the result or I want to say it because this is a talked about type design the input types to the",
    "start": "814050",
    "end": "821430"
  },
  {
    "text": "subtraction operation our points and the result type of the subtraction operation",
    "start": "821430",
    "end": "826740"
  },
  {
    "text": "is the vector so we are we're actually using the interesting the interaction between two different types and the",
    "start": "826740",
    "end": "833399"
  },
  {
    "text": "vector is defined as the difference between two points and similarly we can apply the addition operation between",
    "start": "833399",
    "end": "840810"
  },
  {
    "text": "and a vector and the result is another point so if we're familiar with the",
    "start": "840810",
    "end": "849510"
  },
  {
    "text": "normal vector space this is slightly a more general concept where we have this",
    "start": "849510",
    "end": "855270"
  },
  {
    "text": "interaction between points and displacements and these are the type of examples that we're going to see the",
    "start": "855270",
    "end": "862070"
  },
  {
    "text": "interface I'm not sure how many of you here are C++ developers oh wow I'm",
    "start": "862070",
    "end": "869550"
  },
  {
    "text": "impressed great so most of our examples would be",
    "start": "869550",
    "end": "874740"
  },
  {
    "text": "from C++ a but I do want to emphasize that everything we're talking about here has nothing specific to do with C++ this",
    "start": "874740",
    "end": "883110"
  },
  {
    "text": "is about type design and the vector operations on the left that we can see we have the addition operator which",
    "start": "883110",
    "end": "889680"
  },
  {
    "text": "takes two types this is a in fix notation in this case and the result is again a vector we have scalar",
    "start": "889680",
    "end": "896610"
  },
  {
    "text": "multiplication on the left and on the right and we have the two syntactic sugars of a vector subtraction which is",
    "start": "896610",
    "end": "904140"
  },
  {
    "text": "basically like multiplying by the negative right a negation there are n",
    "start": "904140",
    "end": "909990"
  },
  {
    "text": "operations as we mentioned before they take two point types return vector type we can define addition of a point with a",
    "start": "909990",
    "end": "917940"
  },
  {
    "text": "vector getting a new point and again a syntactic sugar of multiplying that set",
    "start": "917940",
    "end": "923850"
  },
  {
    "text": "vector by minus one which gives us the negation naturally we can also define",
    "start": "923850",
    "end": "929510"
  },
  {
    "text": "for the left side we can also have the mutating versions of plus equals and",
    "start": "929510",
    "end": "934640"
  },
  {
    "text": "multiplication in placement now let's go back to the examples that we just saw",
    "start": "934640",
    "end": "941760"
  },
  {
    "text": "and see how these things are actually already implemented that's why we're saying we're not going to teach you",
    "start": "941760",
    "end": "947280"
  },
  {
    "text": "anything you don't already know we're just we were very surprised to identify this feature which is so ingrained into",
    "start": "947280",
    "end": "955620"
  },
  {
    "text": "what we already know but nobody actually called gave it the proper names so",
    "start": "955620",
    "end": "961290"
  },
  {
    "text": "here's an example for Crono we can see on the first line there we have we can",
    "start": "961290",
    "end": "967980"
  },
  {
    "text": "take the start time we can save it in the bag and then end is after some time we have the end time",
    "start": "967980",
    "end": "975209"
  },
  {
    "text": "point so begin and end are the time points and the difference is saved in the variable doer which is not a time",
    "start": "975209",
    "end": "983429"
  },
  {
    "text": "point it is actually a duration and then we can define we can do some time chrono",
    "start": "983429",
    "end": "990149"
  },
  {
    "text": "arithmetic we can take the begin added some kind of duration and maybe one millisecond less that 1 Ms is it's a",
    "start": "990149",
    "end": "998309"
  },
  {
    "text": "standard literal for millisecond and almost is just before in the end and we can as we can see we can use scalar",
    "start": "998309",
    "end": "1005720"
  },
  {
    "text": "multiplication of doer during the duration and add that this is a point",
    "start": "1005720",
    "end": "1011119"
  },
  {
    "text": "plus vector so the result is another time point one interesting example just",
    "start": "1011119",
    "end": "1016879"
  },
  {
    "text": "if you guys are interested see plus 20 is actually bringing chrono into the",
    "start": "1016879",
    "end": "1021920"
  },
  {
    "text": "calendar it brings calendars and multiple clocks so in this case UTC",
    "start": "1021920",
    "end": "1028850"
  },
  {
    "text": "clock now is going to give us not the time where the machine is running but actually the time at Greenwich so this",
    "start": "1028850",
    "end": "1036470"
  },
  {
    "text": "is a different clock than what the system clock would have given and now UTC now is still a time point but it's",
    "start": "1036470",
    "end": "1044870"
  },
  {
    "text": "actually templated on a different clock so it's a different type so if we're taking if we look at the UTC next and",
    "start": "1044870",
    "end": "1052059"
  },
  {
    "text": "it's a sign UTC now plus 2 times duration that's okay because the",
    "start": "1052059",
    "end": "1057200"
  },
  {
    "text": "duration is still universal in between these two clocks because we let's say still on earth or still moving at",
    "start": "1057200",
    "end": "1065649"
  },
  {
    "text": "subliminal speed however when we try to subtract UTC now begin from UTC now now",
    "start": "1065649",
    "end": "1072740"
  },
  {
    "text": "we're trying to apply subtraction between points from different types and",
    "start": "1072740",
    "end": "1078260"
  },
  {
    "text": "this is not actually going to work so this is one extra level above that",
    "start": "1078260",
    "end": "1083630"
  },
  {
    "text": "chrono tsipras has 20 chrono gives us that we can't subtract two time points",
    "start": "1083630",
    "end": "1088640"
  },
  {
    "text": "which are two separate types so again the type system is saving us from",
    "start": "1088640",
    "end": "1093919"
  },
  {
    "text": "ourselves now let's see an example of iterators so we have a vector called",
    "start": "1093919",
    "end": "1101299"
  },
  {
    "start": "1098000",
    "end": "1098000"
  },
  {
    "text": "that four elements and again begin is begin and is iterator to the end I",
    "start": "1101299",
    "end": "1108170"
  },
  {
    "text": "remind you that early versions of the STL implement action implemented vector",
    "start": "1108170",
    "end": "1113750"
  },
  {
    "text": "iterator is as pointers so this this example is almost identical to the",
    "start": "1113750",
    "end": "1119240"
  },
  {
    "text": "version to the examples that Bjorn showed us earlier where we have an array and we have some pointer is pointing",
    "start": "1119240",
    "end": "1125090"
  },
  {
    "text": "into this array and we're going to we're doing some basic pointer arithmetic but in this case we're actually using",
    "start": "1125090",
    "end": "1130880"
  },
  {
    "text": "iterators which sometimes may be implemented as point as actual pointers",
    "start": "1130880",
    "end": "1136550"
  },
  {
    "text": "but they don't necessarily have to be and and we can see that count is the sub end - begin gives us the number of",
    "start": "1136550",
    "end": "1143480"
  },
  {
    "text": "elements or the displacement that one iterator needs to go through to go from begin to and last is the one before that",
    "start": "1143480",
    "end": "1151940"
  },
  {
    "text": "and nag is actually the negative displacement so this is an interesting",
    "start": "1151940",
    "end": "1158510"
  },
  {
    "text": "fact that we can see here is that displacements are almost always signed or in general they are signed it's fine",
    "start": "1158510",
    "end": "1165920"
  },
  {
    "text": "to say that we have a negative displacement between end and begin and a positive displacement between begin and",
    "start": "1165920",
    "end": "1172730"
  },
  {
    "text": "end so you might say well you know vector it really it's just an abstraction over an array and these are",
    "start": "1172730",
    "end": "1180380"
  },
  {
    "text": "just like sea pointers but what about associative containers so let's see an",
    "start": "1180380",
    "end": "1185750"
  },
  {
    "text": "example we have we can have an STD set which is an associative container",
    "start": "1185750",
    "end": "1192290"
  },
  {
    "text": "so essentially conceptually it's a sorted range and it has some kind of",
    "start": "1192290",
    "end": "1198020"
  },
  {
    "text": "order of less than let's say the default here so and it's it has 4 elements 0 1 2",
    "start": "1198020",
    "end": "1205520"
  },
  {
    "text": "& 3 and again you can see there is exact correspondence between the rows on the right and the rows on the left so big",
    "start": "1205520",
    "end": "1211700"
  },
  {
    "text": "big begin and end or at the beginning and however because STD set doesn't",
    "start": "1211700",
    "end": "1217970"
  },
  {
    "text": "provide random access iterators we cannot actually the iterators themselves",
    "start": "1217970",
    "end": "1223040"
  },
  {
    "text": "are not they don't have operator overloading of over the for addition and",
    "start": "1223040",
    "end": "1228320"
  },
  {
    "text": "subtraction because these require are required by the standard to provide certain perform complexity guarantees",
    "start": "1228320",
    "end": "1235850"
  },
  {
    "text": "however conceptually or at least mathematically we do have the exact corresponding",
    "start": "1235850",
    "end": "1242990"
  },
  {
    "text": "functions that give us the subtraction so we can see that STD distance is really equivalent to having a point",
    "start": "1242990",
    "end": "1248600"
  },
  {
    "text": "iterator subtraction to get the displacement between at the end and the beginning",
    "start": "1248600",
    "end": "1253790"
  },
  {
    "text": "similarly STD next is just almost ident is essentially the same concept as the",
    "start": "1253790",
    "end": "1261860"
  },
  {
    "text": "addition of a iterator and some kind of offset right so we're seeing that the",
    "start": "1261860",
    "end": "1267950"
  },
  {
    "text": "same pattern happens over and over and over inside these examples and I will",
    "start": "1267950",
    "end": "1275720"
  },
  {
    "text": "say if I if I had another panel on the left which was the C array is like that",
    "start": "1275720",
    "end": "1280760"
  },
  {
    "text": "Bjorn show showed before and it's that even 50 years ago when the designers of",
    "start": "1280760",
    "end": "1288080"
  },
  {
    "text": "the C language were deciding on how on the see the syntax and the semantics of",
    "start": "1288080",
    "end": "1293240"
  },
  {
    "text": "C they could have chosen you know pointer is just a number it's just",
    "start": "1293240",
    "end": "1298309"
  },
  {
    "text": "enough an index inside some kind of contiguous memory space but somehow",
    "start": "1298309",
    "end": "1306380"
  },
  {
    "text": "someone I don't even know who that is cos it's probably earlier than the C",
    "start": "1306380",
    "end": "1311420"
  },
  {
    "text": "language itself somebody already back then understood that the semantics for pointers are different than the",
    "start": "1311420",
    "end": "1318170"
  },
  {
    "text": "semantics for or with my integer arithmetic and the compiler saves us so",
    "start": "1318170",
    "end": "1323929"
  },
  {
    "text": "if you you know most of us don't have problems with pointer arithmetic but if you know if the compiler wouldn't have",
    "start": "1323929",
    "end": "1330410"
  },
  {
    "text": "caught some of these then the situation would have been even worse so this is",
    "start": "1330410",
    "end": "1335720"
  },
  {
    "text": "such a fundamental thing and we're so used to it that we somehow forgot this",
    "start": "1335720",
    "end": "1341600"
  },
  {
    "text": "200 year old knowledge now I want to",
    "start": "1341600",
    "end": "1346640"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "give some counter examples from I'm gonna pick on OpenCV because it's the",
    "start": "1346640",
    "end": "1351740"
  },
  {
    "text": "library that I work on for work on and with for many many years and it's got",
    "start": "1351740",
    "end": "1357260"
  },
  {
    "text": "this class type called point position and it's initialized to the hour",
    "start": "1357260",
    "end": "1362980"
  },
  {
    "text": "does anyone here not see the hour can you all see the hour yes okay good so it's initialized and we",
    "start": "1362980",
    "end": "1371780"
  },
  {
    "text": "can do the next pose is actually the addition of a point plus another point cast from a",
    "start": "1371780",
    "end": "1378410"
  },
  {
    "text": "pointer and as we said before what is actually adding points mean how can you",
    "start": "1378410",
    "end": "1384920"
  },
  {
    "text": "add Oslo and tel-aviv",
    "start": "1384920",
    "end": "1390610"
  },
  {
    "text": "there is no physical meaning to that operation but the inner pencil it works",
    "start": "1390610",
    "end": "1397190"
  },
  {
    "text": "just fine because it's just a struct of two numbers and somebody up over loaded the operator plus because the point is",
    "start": "1397190",
    "end": "1404000"
  },
  {
    "text": "literally behave just like a vector and similarly we can subtract two points but",
    "start": "1404000",
    "end": "1409340"
  },
  {
    "text": "the result is another point it's not a vector and you can negate a point again",
    "start": "1409340",
    "end": "1415610"
  },
  {
    "text": "what does that even mean or scale it now I'm not just gonna pick on Open City",
    "start": "1415610",
    "end": "1420770"
  },
  {
    "text": "because PC L which is the point cloud library it's one of the probably the most popular library for working with",
    "start": "1420770",
    "end": "1426650"
  },
  {
    "text": "point cloud and 3d unstructured 3d data also had this has been this problem and",
    "start": "1426650",
    "end": "1431950"
  },
  {
    "text": "again which is an amazing linear algebra library also doesn't basically totally",
    "start": "1431950",
    "end": "1438679"
  },
  {
    "text": "ignores the fact the distinction between points and vectors however the",
    "start": "1438679",
    "end": "1444130"
  },
  {
    "text": "computation of geography algorithm library does make this distinction and you might say well you know okay it's",
    "start": "1444130",
    "end": "1451790"
  },
  {
    "text": "interesting you know two-hundred-year-old information ok what's new and how bad",
    "start": "1451790",
    "end": "1458150"
  },
  {
    "text": "can this be and all I can say is remember the Mars climate orbiter this",
    "start": "1458150",
    "end": "1464419"
  },
  {
    "text": "was a project a multi-billion dollar project built by built by NASA and its contractors and I'll just quote from",
    "start": "1464419",
    "end": "1472000"
  },
  {
    "text": "that it crashed when after arriving at Mars after maybe 15 years of development",
    "start": "1472000",
    "end": "1478340"
  },
  {
    "text": "and the report the crash report says that software that calculated total impulse produced by thruster firings",
    "start": "1478340",
    "end": "1485299"
  },
  {
    "text": "produced results in pound for seconds the trajectory calculation software then use these results expected to be in",
    "start": "1485299",
    "end": "1492590"
  },
  {
    "text": "Newton seconds to update a predicted position of the spacecraft so in this",
    "start": "1492590",
    "end": "1498710"
  },
  {
    "text": "case this is a problem of the type system not enforcing the units of the",
    "start": "1498710",
    "end": "1505370"
  },
  {
    "text": "values they use bear maybe integer or floating-point numbers and there was no",
    "start": "1505370",
    "end": "1512779"
  },
  {
    "text": "enforcement of no compile-time enforcement of units and the type of",
    "start": "1512779",
    "end": "1517799"
  },
  {
    "text": "thing we're talking about here is very similar to a unit system proper unit system whenever we can leverage the",
    "start": "1517799",
    "end": "1525629"
  },
  {
    "text": "compile the type system to catch type errors at compile time instead of at the",
    "start": "1525629",
    "end": "1532980"
  },
  {
    "text": "point of the committee that has to investigating committee time or crash",
    "start": "1532980",
    "end": "1538980"
  },
  {
    "text": "time so now we're going to see some examples of what this might look like",
    "start": "1538980",
    "end": "1544759"
  },
  {
    "text": "when implemented so you're decided to",
    "start": "1544759",
    "end": "1558619"
  },
  {
    "text": "investigate a number of GUI libraries because I thought these are good examples are very very uses so I looked",
    "start": "1558619",
    "end": "1568679"
  },
  {
    "text": "at quite a lot of them I'll make no claims to have investigated them or",
    "start": "1568679",
    "end": "1576119"
  },
  {
    "text": "because there are many but an interesting observation is that not a single one of those that I would looked",
    "start": "1576119",
    "end": "1581789"
  },
  {
    "text": "at did this right so I'm proposing a different GUI library where in this case",
    "start": "1581789",
    "end": "1588869"
  },
  {
    "start": "1584000",
    "end": "1584000"
  },
  {
    "text": "we have a proper distinction between points on the screen and vectors so have",
    "start": "1588869",
    "end": "1596580"
  },
  {
    "text": "a window class and its constructor says I can I can construct a window at a",
    "start": "1596580",
    "end": "1603749"
  },
  {
    "text": "position a point and its size and the",
    "start": "1603749",
    "end": "1609269"
  },
  {
    "text": "size is a vector so we know its width and its height and the code on the right",
    "start": "1609269",
    "end": "1615389"
  },
  {
    "text": "we see how we can do this by saying in this case I happen to have two points",
    "start": "1615389",
    "end": "1621149"
  },
  {
    "text": "the where I want the the corners to be but since we are have a proper type",
    "start": "1621149",
    "end": "1628110"
  },
  {
    "text": "system where points can be subtracted to get vectors this is not a problem because then I just say yeah I want my",
    "start": "1628110",
    "end": "1634019"
  },
  {
    "text": "window to be on point one and the size is the difference between point two and point one",
    "start": "1634019",
    "end": "1639590"
  },
  {
    "text": "that is cool and also if we want to move",
    "start": "1639590",
    "end": "1645379"
  },
  {
    "text": "a window around all the screen translate we want to translate it with with an",
    "start": "1645379",
    "end": "1650720"
  },
  {
    "text": "offset so we give a vector say move it such and such as many pixels to the",
    "start": "1650720",
    "end": "1655970"
  },
  {
    "text": "right and so so many upwards and again I",
    "start": "1655970",
    "end": "1661700"
  },
  {
    "text": "can subtract 2.2 to get this get this",
    "start": "1661700",
    "end": "1667399"
  },
  {
    "text": "vector or maybe I actually want to to move it specifically to a point and the",
    "start": "1667399",
    "end": "1673639"
  },
  {
    "text": "important thing here is that if I make a mistake and I accidentally call move to",
    "start": "1673639",
    "end": "1680690"
  },
  {
    "text": "with with the vector I get a compilation error this is good we can actually have",
    "start": "1680690",
    "end": "1690080"
  },
  {
    "text": "a look yeah curious detail this talk was actually born here in a tendency of slow",
    "start": "1690080",
    "end": "1695389"
  },
  {
    "text": "last year so at the end I word speaker's here than too and we were talking about",
    "start": "1695389",
    "end": "1701480"
  },
  {
    "text": "how we should do this and on my way home my flight was delayed so I was extremely",
    "start": "1701480",
    "end": "1707749"
  },
  {
    "text": "bored at the airport so I started cranking out code so I I wrote a small",
    "start": "1707749",
    "end": "1715820"
  },
  {
    "text": "mini library which you have the URL to there it's a simple +17 library so let's",
    "start": "1715820",
    "end": "1727249"
  },
  {
    "text": "have a look at compiler explorer so to begin with did you know that you can",
    "start": "1727249",
    "end": "1733269"
  },
  {
    "text": "hash included URLs in compiler Explorer I think that is excellent for this",
    "start": "1733269",
    "end": "1739399"
  },
  {
    "text": "example I have a simple classic type of the 2d 2d vector V that of the kind that",
    "start": "1739399",
    "end": "1748039"
  },
  {
    "text": "a dimension from the other libraries that makes no distinction between what is what we just have an X and a Y and we",
    "start": "1748039",
    "end": "1756289"
  },
  {
    "text": "have plus Z equals minus equals and the in fix plus and minus operators but with",
    "start": "1756289",
    "end": "1763700"
  },
  {
    "text": "this library I can say that now a vector is a as an affine displacement of these",
    "start": "1763700",
    "end": "1770110"
  },
  {
    "text": "and I use a tag to discriminate between this and possibly",
    "start": "1770110",
    "end": "1775460"
  },
  {
    "text": "other types of displacements using also V but they may represent something",
    "start": "1775460",
    "end": "1780740"
  },
  {
    "text": "completely different and then I have a position type that is an affine position",
    "start": "1780740",
    "end": "1788510"
  },
  {
    "text": "of V so you use the same implementation under the hood and it uses the vector D",
    "start": "1788510",
    "end": "1795169"
  },
  {
    "text": "as its displacement type a curious thing",
    "start": "1795169",
    "end": "1801470"
  },
  {
    "text": "I heard a few months ago about I think",
    "start": "1801470",
    "end": "1806660"
  },
  {
    "text": "it was a ray tracing program that used one three-dimensional type for",
    "start": "1806660",
    "end": "1813130"
  },
  {
    "text": "interchangeably as position in space as a vector in space and as a color or G be",
    "start": "1813130",
    "end": "1820250"
  },
  {
    "text": "color interesting so we can have a position in space which we add this",
    "start": "1820250",
    "end": "1827650"
  },
  {
    "text": "yellow to whatever that means the compiler wouldn't catch it here",
    "start": "1827650",
    "end": "1834400"
  },
  {
    "text": "here we have absolutely no problems because these are now distinct types I will show you how we get combination",
    "start": "1834400",
    "end": "1840500"
  },
  {
    "text": "errors if we make a mistake also I made this library such that we can change it",
    "start": "1840500",
    "end": "1845840"
  },
  {
    "text": "and instead say that I have my position and just default a displacement form for",
    "start": "1845840",
    "end": "1852500"
  },
  {
    "text": "me and then I can use an internally defined type as the displacement we can",
    "start": "1852500",
    "end": "1860900"
  },
  {
    "text": "use that one instead that is why not and it changes absolutely nothing in the generated code",
    "start": "1860900",
    "end": "1868900"
  },
  {
    "text": "so with this I can have this window",
    "start": "1868900",
    "end": "1875440"
  },
  {
    "text": "closed this imaginary thing that I showed you earlier and we can have a create function that takes the the",
    "start": "1875440",
    "end": "1882350"
  },
  {
    "text": "corners as individual integers so I can",
    "start": "1882350",
    "end": "1888169"
  },
  {
    "text": "create a lower left and upper right from it and I can create a window as I as I",
    "start": "1888169",
    "end": "1896600"
  },
  {
    "text": "mentioned earlier by in this case I get the size the vector by subtracting the",
    "start": "1896600",
    "end": "1902540"
  },
  {
    "text": "two positions and if I make a mistake and try to",
    "start": "1902540",
    "end": "1908250"
  },
  {
    "text": "whoops if I make a mistake and try to",
    "start": "1908250",
    "end": "1918000"
  },
  {
    "text": "create the window using the the two points instead this does not compile",
    "start": "1918000",
    "end": "1926010"
  },
  {
    "text": "actually it does compile for a very long time we get an error saying no matching",
    "start": "1926010",
    "end": "1932680"
  },
  {
    "text": "function candidate position and size did",
    "start": "1932680",
    "end": "1940960"
  },
  {
    "text": "not match that is good",
    "start": "1940960",
    "end": "1944490"
  },
  {
    "text": "and likewise for the oops for the move",
    "start": "1951860",
    "end": "1958220"
  },
  {
    "text": "we can see how it just creates a vector from these types it's worth noting how",
    "start": "1958220",
    "end": "1964129"
  },
  {
    "text": "how good are you at a x86 64 assembly language how many of you were here for",
    "start": "1964129",
    "end": "1971159"
  },
  {
    "text": "Rob's talk just before this one when he he hack of that Ian my me a little bit",
    "start": "1971159",
    "end": "1978720"
  },
  {
    "text": "about the cost of abstractions this",
    "start": "1978720",
    "end": "1984990"
  },
  {
    "text": "window translate takes a vector how is the vector represented it is passed as",
    "start": "1984990",
    "end": "1991830"
  },
  {
    "text": "one 64-bit register so it's cheaper than passing these two insane because they",
    "start": "1991830",
    "end": "1996990"
  },
  {
    "text": "are in one register each so we have a negative cost obstruction yay",
    "start": "1996990",
    "end": "2003129"
  },
  {
    "text": "not just zero cost negative cost and it makes the code safer and more",
    "start": "2003129",
    "end": "2008929"
  },
  {
    "text": "maintainable so that's at least a double winner so don't be afraid from the this",
    "start": "2008929",
    "end": "2024320"
  },
  {
    "text": "is always a thing with with simple closed developer sees yeah but what's the cost what is what did I pay in terms",
    "start": "2024320",
    "end": "2030679"
  },
  {
    "text": "of performance don't worry it's not a problem at least not what I have experienced it",
    "start": "2030679",
    "end": "2038929"
  },
  {
    "text": "is possible that there are situations where you where you do carry a cost but I haven't experienced that also this is",
    "start": "2038929",
    "end": "2048980"
  },
  {
    "start": "2046000",
    "end": "2046000"
  },
  {
    "text": "a cool thing CP plus 20 concepts the",
    "start": "2048980",
    "end": "2056089"
  },
  {
    "text": "pepper whole embody the a guy from Stockholm is also active in the Stockholm syphilis user group II after",
    "start": "2056089",
    "end": "2063829"
  },
  {
    "text": "hearing a preview of this talk or these discussions before this talk he decided",
    "start": "2063829",
    "end": "2070398"
  },
  {
    "text": "to try to model this as as simple as 20 concepts and it's",
    "start": "2070399",
    "end": "2078470"
  },
  {
    "text": "surprisingly succinct will have a concept I find space that takes a",
    "start": "2078470",
    "end": "2084649"
  },
  {
    "text": "position a vector and a scalar and we say that yeah the the position must be",
    "start": "2084650",
    "end": "2090810"
  },
  {
    "text": "regular and V and s must define a vector space that is defined elsewhere and with",
    "start": "2090810",
    "end": "2097680"
  },
  {
    "text": "this we say that if we have compositions and constant vectors we can have these",
    "start": "2097680",
    "end": "2103370"
  },
  {
    "text": "operations that Adi showed earlier and also if we have non constant position we",
    "start": "2103370",
    "end": "2110880"
  },
  {
    "text": "we can modify it with with vectors so",
    "start": "2110880",
    "end": "2118510"
  },
  {
    "text": "[Music] it's surprisingly easy to model these things also in in future template code",
    "start": "2118510",
    "end": "2127380"
  },
  {
    "text": "where you use concepts and I think it's",
    "start": "2127380",
    "end": "2135810"
  },
  {
    "start": "2133000",
    "end": "2133000"
  },
  {
    "text": "time for you again Rd right so we if you",
    "start": "2135810",
    "end": "2145110"
  },
  {
    "text": "go to the mathematical literature about affine spaces there is one additional",
    "start": "2145110",
    "end": "2150980"
  },
  {
    "text": "operation which is called the affine combination which i think is very interesting and I want to present it and",
    "start": "2150980",
    "end": "2158880"
  },
  {
    "text": "mention it in a in our context of speaking about api's and types now the",
    "start": "2158880",
    "end": "2165510"
  },
  {
    "text": "definition remember vectors which",
    "start": "2165510",
    "end": "2170940"
  },
  {
    "text": "operate they're closed under vector operations vector arithmetic they have what's called linear combinations where",
    "start": "2170940",
    "end": "2177150"
  },
  {
    "text": "we can multiply a bunch of vectors by scalars and sum up the results to get a",
    "start": "2177150",
    "end": "2185160"
  },
  {
    "text": "new vector because we said vectors are closed under addition and multiplications by scalars now an afront",
    "start": "2185160",
    "end": "2192540"
  },
  {
    "text": "combination is a slightly more strict",
    "start": "2192540",
    "end": "2197990"
  },
  {
    "text": "operation basically it means that we can",
    "start": "2197990",
    "end": "2203640"
  },
  {
    "text": "have a weighted sum of one or more points and before you start shouting hey but you",
    "start": "2203640",
    "end": "2208890"
  },
  {
    "text": "said that we can't some points we're saying well hold your horses for a minute because then I'm going to put",
    "start": "2208890",
    "end": "2215220"
  },
  {
    "text": "some conditions that allow us to do that in very very specific cases and actually",
    "start": "2215220",
    "end": "2221010"
  },
  {
    "text": "the only two cases the first case and this is the more common case is where",
    "start": "2221010",
    "end": "2226620"
  },
  {
    "text": "the total some of the way it is exactly one and in that case the resulting type is a point I'm going to show you an",
    "start": "2226620",
    "end": "2234990"
  },
  {
    "text": "example in a minute the second case is where the total sum of the weight is exactly zero and the resulting type in",
    "start": "2234990",
    "end": "2241860"
  },
  {
    "text": "that case is a vector otherwise Efrain combinations are not defined for",
    "start": "2241860",
    "end": "2247470"
  },
  {
    "text": "a fun isn't it it's basically not a valid operation if anyway if anyone here",
    "start": "2247470",
    "end": "2255630"
  },
  {
    "text": "has heard who here has heard the term barycentric coordinates okay a few of",
    "start": "2255630",
    "end": "2261750"
  },
  {
    "text": "you so yea barycentric coordinates are basically the top the weight the couple",
    "start": "2261750",
    "end": "2267120"
  },
  {
    "text": "of weights of an affine combinations which sum up to one so you might say",
    "start": "2267120",
    "end": "2272220"
  },
  {
    "text": "okay but okay this sounds kind of ten years but why is that interesting and",
    "start": "2272220",
    "end": "2278360"
  },
  {
    "text": "I'll show an example so let's say we have this statement if a and B are",
    "start": "2278360",
    "end": "2286920"
  },
  {
    "text": "integers what what would M be well it says so in the comment it's the midpoint between a and B right so again I'm",
    "start": "2286920",
    "end": "2299070"
  },
  {
    "text": "ignoring truncation and ignoring overflow in this case and the question is when a and B the types of a and B are",
    "start": "2299070",
    "end": "2307380"
  },
  {
    "text": "pointers what is M anyone it's actually",
    "start": "2307380",
    "end": "2316500"
  },
  {
    "text": "testing if you were listening so you can see I'm we're summing up and B and we",
    "start": "2316500",
    "end": "2323490"
  },
  {
    "text": "cannot really sump we just said that they even the C type system doesn't allow us to some pointers right so we",
    "start": "2323490",
    "end": "2329700"
  },
  {
    "text": "cannot actually some pointers but conceptually if we have two pointers into this into a valid array there is a",
    "start": "2329700",
    "end": "2336780"
  },
  {
    "text": "midpoint between them so how do we calculate that well when you know basic math we can rewrite",
    "start": "2336780",
    "end": "2342720"
  },
  {
    "text": "that statement is a plus the difference between B and a divided by two so this",
    "start": "2342720",
    "end": "2348780"
  },
  {
    "text": "this actually uses valid affine space operations for performing because a is a",
    "start": "2348780",
    "end": "2357330"
  },
  {
    "text": "point and B minus a is already displacement right so and we can divide",
    "start": "2357330",
    "end": "2363180"
  },
  {
    "text": "we can multiply that by one-half or equivalent divided by two and we can add",
    "start": "2363180",
    "end": "2369450"
  },
  {
    "text": "that as a displacement to our pointer so another way to look at this is as if",
    "start": "2369450",
    "end": "2376740"
  },
  {
    "text": "we're multiplying a and B by two weights which sum up to one which is half and",
    "start": "2376740",
    "end": "2382590"
  },
  {
    "text": "half right so this is exactly an affine combination this is exactly the case",
    "start": "2382590",
    "end": "2387900"
  },
  {
    "text": "where we want to wear these affine combinations are interesting whenever we",
    "start": "2387900",
    "end": "2393960"
  },
  {
    "text": "want to find interesting points that are depend on the rest of our on the inputs",
    "start": "2393960",
    "end": "2401180"
  },
  {
    "text": "one very popular example is for example calculating this center of gravity so",
    "start": "2401180",
    "end": "2407070"
  },
  {
    "text": "let's say we have three points and this is actually independent of the not necessarily 2d points could be points in",
    "start": "2407070",
    "end": "2413820"
  },
  {
    "text": "any dimension if we multiply if our weight is one-third then again we're",
    "start": "2413820",
    "end": "2419700"
  },
  {
    "text": "getting the center of gravity of over point cloud' say in supastarz 20 we're",
    "start": "2419700",
    "end": "2429060"
  },
  {
    "text": "actually getting a function that's designed to allow us to that and it's called STD midpoint and I think the main",
    "start": "2429060",
    "end": "2435930"
  },
  {
    "text": "motivation is exactly the fact that you can't add pointers and the fact that you don't want to in this case they they you",
    "start": "2435930",
    "end": "2443070"
  },
  {
    "text": "want to avoid the overflow of summing so even when you're trying to sum two integers a plus B if B is the maximal",
    "start": "2443070",
    "end": "2450599"
  },
  {
    "text": "integer presentation you're going to overflow and then you get undefined you may get well you may get not get the",
    "start": "2450599",
    "end": "2456570"
  },
  {
    "text": "answer you were expecting because primary school math doesn't necessarily",
    "start": "2456570",
    "end": "2461880"
  },
  {
    "text": "work with such limited size numbers so we're getting STD midpoint would just",
    "start": "2461880",
    "end": "2467310"
  },
  {
    "text": "width which does exactly that now so to",
    "start": "2467310",
    "end": "2472650"
  },
  {
    "start": "2470000",
    "end": "2470000"
  },
  {
    "text": "summarize I think the main point of the talk is not just the fact that we already",
    "start": "2472650",
    "end": "2479840"
  },
  {
    "text": "know offense places and go and look once you start looking at your code knowing",
    "start": "2479840",
    "end": "2485090"
  },
  {
    "text": "this because you've already seen it before you might try to apply these concepts to your own api is but i think",
    "start": "2485090",
    "end": "2491680"
  },
  {
    "text": "it's that the message is much more powerful than that it's about creating strong api's it's about having this if",
    "start": "2491680",
    "end": "2499640"
  },
  {
    "text": "and only if relationship between the syntax and the semantics so whenever",
    "start": "2499640",
    "end": "2507460"
  },
  {
    "text": "something compiles it means that we got the semantics of the behaves emetics our",
    "start": "2507460",
    "end": "2513800"
  },
  {
    "text": "behavior syntax is the textual representation of our over of our code",
    "start": "2513800",
    "end": "2521770"
  },
  {
    "text": "semantics is the behavior the expected behavior of our code the fact that the",
    "start": "2521770",
    "end": "2527060"
  },
  {
    "text": "little arrow goes from left to right and right to left means that the inversion is also correct so a semantically",
    "start": "2527060",
    "end": "2533300"
  },
  {
    "text": "incorrect expression will always be a compilation error and this maybe is the",
    "start": "2533300",
    "end": "2539540"
  },
  {
    "text": "for me it's the most powerful message that you need to eat maybe if you need to take one take home from here is to",
    "start": "2539540",
    "end": "2546860"
  },
  {
    "text": "think about these always try to have stronger types and stricter type system",
    "start": "2546860",
    "end": "2554180"
  },
  {
    "text": "and affine space type relations are very very very common it's so common that we're almost there invisible to us but",
    "start": "2554180",
    "end": "2561620"
  },
  {
    "text": "once you point it you know it's like the hammer where everything looks like a thumb so yeah it's the same thing you're",
    "start": "2561620",
    "end": "2568670"
  },
  {
    "text": "gonna start seeing that so we need to we encourage you to try and identify them",
    "start": "2568670",
    "end": "2574940"
  },
  {
    "text": "and build your API since the way to give you this powerful and consistent",
    "start": "2574940",
    "end": "2583840"
  },
  {
    "text": "abstractions because math math has already done a lot of this foundational",
    "start": "2583840",
    "end": "2589310"
  },
  {
    "text": "work for us if you go and read a little bit more just sometimes it's a little",
    "start": "2589310",
    "end": "2595280"
  },
  {
    "text": "bit beyond what you might have studied in university read about abstract algebra and there's a lot of talk and a",
    "start": "2595280",
    "end": "2602810"
  },
  {
    "text": "lot of many many talks online about category theory which is getting a lot of I think it's a very very fruitful",
    "start": "2602810",
    "end": "2609140"
  },
  {
    "text": "field for API and type design I will encourage you",
    "start": "2609140",
    "end": "2614299"
  },
  {
    "text": "to go and watch that and as Buuren likes to say when in doubt do what chrono does",
    "start": "2614299",
    "end": "2621650"
  },
  {
    "text": "because chrono is an amazingly design library and they got so many things",
    "start": "2621650",
    "end": "2628339"
  },
  {
    "text": "right where other other libraries usually lacked some kind of abstraction",
    "start": "2628339",
    "end": "2636940"
  },
  {
    "text": "do you have any closing additional closing words yeah yes yes I do have one",
    "start": "2636940",
    "end": "2646789"
  },
  {
    "text": "thing and that is think about context so I mentioned very briefly when I first",
    "start": "2646789",
    "end": "2654859"
  },
  {
    "text": "went through the example with pointer arithmetic that the difference between two pointers is an integer and in",
    "start": "2654859",
    "end": "2663279"
  },
  {
    "text": "integer type which is wrong because with",
    "start": "2663279",
    "end": "2669770"
  },
  {
    "text": "an integer type you can do operations that don't make sense to do with pointer arithmetic that is for example you can",
    "start": "2669770",
    "end": "2675559"
  },
  {
    "text": "multiply them that doesn't make any sense chrono has forbidden multiplication of",
    "start": "2675559",
    "end": "2684859"
  },
  {
    "text": "durations think about context does it make sense to have second squared if",
    "start": "2684859",
    "end": "2692450"
  },
  {
    "text": "you're writing a scheduler or a calendar program no it does absolutely not so it",
    "start": "2692450",
    "end": "2700039"
  },
  {
    "text": "should be forbidden but if you're writing a some kind of physics programs you really want to be able to represent",
    "start": "2700039",
    "end": "2705920"
  },
  {
    "text": "seconds squared so think about the context where your types are or operating in that was the",
    "start": "2705920",
    "end": "2714829"
  },
  {
    "text": "addition okay some additional resources",
    "start": "2714829",
    "end": "2721579"
  },
  {
    "start": "2716000",
    "end": "2716000"
  },
  {
    "text": "if you want to learn a little bit more about this the addy wrote a series of really good blog posts about about this",
    "start": "2721579",
    "end": "2731480"
  },
  {
    "text": "with a number of examples and some reason if you're into C++ nerdery you",
    "start": "2731480",
    "end": "2737630"
  },
  {
    "text": "can watch my talk from AC see you last one last year",
    "start": "2737630",
    "end": "2742930"
  },
  {
    "text": "then Dean's talk was really good the significant one you should watch it I think I find that I mentioned only the",
    "start": "2742930",
    "end": "2749860"
  },
  {
    "text": "minute 13 and 53 seconds for about 20 seconds but a couple of minutes but it's",
    "start": "2749860",
    "end": "2755710"
  },
  {
    "text": "a great app and you should definitely go and watch it about operator operator overloading in general and the peter",
    "start": "2755710",
    "end": "2763870"
  },
  {
    "text": "stormare lads talk from cpp now that came out on youtube just a week ago or something it is going through all these",
    "start": "2763870",
    "end": "2773350"
  },
  {
    "text": "things with not just explaining how you write strong types but also this think",
    "start": "2773350",
    "end": "2778720"
  },
  {
    "text": "about context when when does which operations make sense and towards the very end the last few minutes of that",
    "start": "2778720",
    "end": "2785230"
  },
  {
    "text": "talk he actually goes through these I find space type combinations where the",
    "start": "2785230",
    "end": "2790780"
  },
  {
    "text": "position and the displacement are or well I wouldn't say meaningless on their",
    "start": "2790780",
    "end": "2796180"
  },
  {
    "text": "own but they don't mean a lot but together they do mean a lot I think if",
    "start": "2796180",
    "end": "2801340"
  },
  {
    "text": "anyone I didn't see the answer before if anyone was here for the previous talk by",
    "start": "2801340",
    "end": "2807160"
  },
  {
    "text": "Robert he talked about the architects role and that the architect needs to to",
    "start": "2807160",
    "end": "2815380"
  },
  {
    "text": "protect the principles and the design because the features will take care of",
    "start": "2815380",
    "end": "2821050"
  },
  {
    "text": "themselves there are enough stakeholders to take care of the features and in a way this is exactly what we're trying to",
    "start": "2821050",
    "end": "2827380"
  },
  {
    "text": "say if you design your systems properly you allow the compiler to to catch wrong",
    "start": "2827380",
    "end": "2834220"
  },
  {
    "text": "usages and catch these errors so early in the design process nobody actually ever makes the types of errors that then",
    "start": "2834220",
    "end": "2841720"
  },
  {
    "text": "crash may crash because really they kind to crash a spaceship on another planet",
    "start": "2841720",
    "end": "2848890"
  },
  {
    "text": "because of it a type or is ridiculous I",
    "start": "2848890",
    "end": "2854520"
  },
  {
    "text": "mean there are many things that can go wrong but a type should not be one of these reasons so I think we're",
    "start": "2854520",
    "end": "2862480"
  },
  {
    "text": "optimistic so we're big fans of strong type systems and static type systems and",
    "start": "2862480",
    "end": "2868030"
  },
  {
    "text": "we encourage everyone to join the revolution the 60 year old revolution",
    "start": "2868030",
    "end": "2873620"
  },
  {
    "text": "two-hundred-year-old thank you thank you very much",
    "start": "2873620",
    "end": "2879940"
  },
  {
    "text": "yes question the question was whether we",
    "start": "2881890",
    "end": "2926030"
  },
  {
    "text": "can apply the concept I'll repeat the question for the video and to make sure that I actually understood it is that",
    "start": "2926030",
    "end": "2931400"
  },
  {
    "text": "whether we can apply these principles in cases where the underlying types might",
    "start": "2931400",
    "end": "2938060"
  },
  {
    "text": "not be regular arithmetic types or like complex numbers or quaternions I would",
    "start": "2938060",
    "end": "2944860"
  },
  {
    "text": "counter that complex numbers they can be scalars and we saw many examples of",
    "start": "2944860",
    "end": "2950450"
  },
  {
    "text": "one-dimensional types that the underlying representation is still an arithmetic type but in terms",
    "start": "2950450",
    "end": "2957620"
  },
  {
    "text": "of the behavior of the type we can we distinguish between something that you",
    "start": "2957620",
    "end": "2963620"
  },
  {
    "text": "can do certain operations on and and some and disallow other operations which",
    "start": "2963620",
    "end": "2968690"
  },
  {
    "text": "would make sense on the underlying representation but not at the domain specific representation does that answer",
    "start": "2968690",
    "end": "2977240"
  },
  {
    "text": "your question for example a chrono let's say chrono doesn't do this but",
    "start": "2977240",
    "end": "2982970"
  },
  {
    "text": "hypothetically or you can represent a time point is not a single number which",
    "start": "2982970",
    "end": "2989330"
  },
  {
    "text": "is the number of milliseconds since January 1st 1970 and you can say that",
    "start": "2989330",
    "end": "2995300"
  },
  {
    "text": "the duration is just a signed integer so these are both integers and integers in",
    "start": "2995300",
    "end": "3002050"
  },
  {
    "text": "the type system support all the arithmetic operations on integers but",
    "start": "3002050",
    "end": "3007310"
  },
  {
    "text": "the API produced by this rapping type actually what it does it dis allows",
    "start": "3007310",
    "end": "3013310"
  },
  {
    "text": "certain operations in order to give you the proper API to avoid misuse it it",
    "start": "3013310",
    "end": "3036800"
  },
  {
    "text": "would disallow it would exactly were you",
    "start": "3036800",
    "end": "3046430"
  },
  {
    "text": "referring to the the library that I showed with a garbled example yeah it would it would work you can use that",
    "start": "3046430",
    "end": "3052730"
  },
  {
    "text": "it's it uses the underlying types",
    "start": "3052730",
    "end": "3057920"
  },
  {
    "text": "operators so it defines all the operations that make sense in the affine",
    "start": "3057920",
    "end": "3063980"
  },
  {
    "text": "space provided that the underlying type supports them so you can have in this",
    "start": "3063980",
    "end": "3070190"
  },
  {
    "text": "case I had position and displacement of this V struct where I had defined",
    "start": "3070190",
    "end": "3075410"
  },
  {
    "text": "operator plus and minus and the complex numbers of support operators operators",
    "start": "3075410",
    "end": "3081140"
  },
  {
    "text": "plus and minus so they can be used right away as is more questions",
    "start": "3081140",
    "end": "3090520"
  },
  {
    "text": "okay so to repeat you you're talking about the you're mentioning that your",
    "start": "3142500",
    "end": "3148600"
  },
  {
    "text": "problem you're talking about you need representations for physical units and",
    "start": "3148600",
    "end": "3154480"
  },
  {
    "text": "you you have several several different types of units for the same kind so you",
    "start": "3154480",
    "end": "3160210"
  },
  {
    "text": "have a matrix your millimeters your feet if you're bizarre and what we talked",
    "start": "3160210",
    "end": "3167320"
  },
  {
    "text": "about now about a fine space combinations that does not cover that it's a it's on a different scale so I",
    "start": "3167320",
    "end": "3174100"
  },
  {
    "text": "was talking about it's alright yeah mostly the you mentioned proposal for C",
    "start": "3174100",
    "end": "3183280"
  },
  {
    "text": "plus twenty years so that the one that materials push is it's working on okay",
    "start": "3183280",
    "end": "3191200"
  },
  {
    "text": "yeah he he presented the ACCE",
    "start": "3191200",
    "end": "3196560"
  },
  {
    "text": "work-in-progress physical units library and to me it looked extremely good about",
    "start": "3196560",
    "end": "3204400"
  },
  {
    "text": "it it's working progress so it was definitely not coming simple as twenty it with maybe come some time later but",
    "start": "3204400",
    "end": "3211870"
  },
  {
    "text": "it's also an important thing that I this presentation mentioned briefly of by",
    "start": "3211870",
    "end": "3218320"
  },
  {
    "text": "Peter some a lot from syphilis now just a couple of weeks ago he actually goes",
    "start": "3218320",
    "end": "3224770"
  },
  {
    "text": "into this ancestor fiscal units themselves are great but don't forget",
    "start": "3224770",
    "end": "3229920"
  },
  {
    "text": "context because in in in some context some operations make perfect sense in",
    "start": "3229920",
    "end": "3235030"
  },
  {
    "text": "other contexts they don't so it's having a representation of physical units is great but it's not enough but there are",
    "start": "3235030",
    "end": "3242020"
  },
  {
    "text": "some excellent unit libraries for at least for C++ that we know of and we in",
    "start": "3242020",
    "end": "3248560"
  },
  {
    "text": "cases where you do get problems with mismatch there is no reason to waste",
    "start": "3248560",
    "end": "3254880"
  },
  {
    "text": "cycles or developer time on finding tracking these down so define good",
    "start": "3254880",
    "end": "3260750"
  },
  {
    "text": "eunuch library I think boost has one and they're terrible but there is actually",
    "start": "3260750",
    "end": "3269099"
  },
  {
    "text": "there is a there is a connection between",
    "start": "3269099",
    "end": "3275270"
  },
  {
    "text": "physical units libraries and what we talked about the that physical units",
    "start": "3275270",
    "end": "3280740"
  },
  {
    "text": "libraries tend to fail and that shows extremely like clearly when you talk about temperatures because you have",
    "start": "3280740",
    "end": "3287280"
  },
  {
    "text": "temperature points and your temperature differences and doing arithmetics on",
    "start": "3287280",
    "end": "3293460"
  },
  {
    "text": "temperature differences in Celsius and Fahrenheit it's trivial it's really not",
    "start": "3293460",
    "end": "3298740"
  },
  {
    "text": "a problem but doing conversion between temperature points in in Celsius and",
    "start": "3298740",
    "end": "3304680"
  },
  {
    "text": "Fahrenheit is where you mess up and these libraries that I have seen tend to",
    "start": "3304680",
    "end": "3310650"
  },
  {
    "text": "miss that more questions all right thank",
    "start": "3310650",
    "end": "3319800"
  },
  {
    "text": "you very much [Applause]",
    "start": "3319800",
    "end": "3326139"
  }
]