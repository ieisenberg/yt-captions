[
  {
    "text": "hello everyone I hope you can hear me well um I have an issue with microphones",
    "start": "5799",
    "end": "10800"
  },
  {
    "text": "all the time so please tell me if I'm too slow or like too low in the voice",
    "start": "10800",
    "end": "16720"
  },
  {
    "text": "but uh welcome everyone I hope you're enjoying the day and uh welcome to the",
    "start": "16720",
    "end": "21920"
  },
  {
    "text": "exploring dependency injection and reflection in modern C++ so before we start I will just tell",
    "start": "21920",
    "end": "28599"
  },
  {
    "text": "a little bit about myself my name is melkin I'm a principal software engineer at remarkable we are hiring by the way",
    "start": "28599",
    "end": "35960"
  },
  {
    "text": "um I've been doing C++ for a while uh my main areas of interest is architecture I",
    "start": "35960",
    "end": "43000"
  },
  {
    "text": "like to build Frameworks I like to design libraries and I have a passion for build system I",
    "start": "43000",
    "end": "49239"
  },
  {
    "text": "think um I will promise that by the end of this talk we will build a small framework so get",
    "start": "49239",
    "end": "56440"
  },
  {
    "text": "ready um and our agenda we will talk about C++",
    "start": "56440",
    "end": "61840"
  },
  {
    "text": "specifically about C++ 20 that's what I think modern is it's not 11 not 14 not",
    "start": "61840",
    "end": "67799"
  },
  {
    "text": "17 20 we will look into dependency injection like Basics um it's not a",
    "start": "67799",
    "end": "75159"
  },
  {
    "text": "guide how to use it so don't expect it I will just show what options are we will",
    "start": "75159",
    "end": "81360"
  },
  {
    "text": "look at the reflection um what's available in C++ what we can do is that and then we will",
    "start": "81360",
    "end": "87960"
  },
  {
    "text": "try to combine dependency injection and reflection together and see what we can",
    "start": "87960",
    "end": "93159"
  },
  {
    "text": "do so let's start with dependency injection uh when I Google it I got this",
    "start": "93159",
    "end": "99880"
  },
  {
    "text": "uh on Wikipedia uh definition of it so it's basically a technique which uh uh",
    "start": "99880",
    "end": "105960"
  },
  {
    "text": "help you to pass some objects or function into the objects or the functions and it's try to solve the",
    "start": "105960",
    "end": "112320"
  },
  {
    "text": "problem of separating of concerns how to create the objects and how to use them and pass them so let's let's take a look",
    "start": "112320",
    "end": "120479"
  },
  {
    "text": "at the examples and uh be ready this is the function we will talk a lot today it's just a madeup example so that there",
    "start": "120479",
    "end": "128080"
  },
  {
    "text": "is no big sense into it but I think it will prove the point okay so we have a function uh get",
    "start": "128080",
    "end": "135879"
  },
  {
    "text": "temps it's create setting class inside try to read it manipulate with the data",
    "start": "135879",
    "end": "140959"
  },
  {
    "text": "and return the result uh it is quite a quite simple um",
    "start": "140959",
    "end": "146599"
  },
  {
    "text": "in this case the function doesn't receive anything it's create internally the",
    "start": "146599",
    "end": "152120"
  },
  {
    "text": "settings and I think it's creates a lot of issues in in the way to use that",
    "start": "152120",
    "end": "158200"
  },
  {
    "text": "function so let's try to test that function like imagine that we at some",
    "start": "158200",
    "end": "164000"
  },
  {
    "text": "point put a lot of logic into it and we not sure if the changes will break or not break so we're want to test the",
    "start": "164000",
    "end": "170360"
  },
  {
    "text": "function and we write two simple tests and we say that we have initial attempts",
    "start": "170360",
    "end": "177159"
  },
  {
    "text": "which basically first time we call it should be always zero this is our",
    "start": "177159",
    "end": "183000"
  },
  {
    "text": "requirements and the second one we do something somehow the the value gets",
    "start": "183000",
    "end": "188360"
  },
  {
    "text": "updated and then we get one for example as I said made up examples but it's",
    "start": "188360",
    "end": "194560"
  },
  {
    "text": "okay so my first question would be what happens if we swap the tests so first we",
    "start": "194560",
    "end": "201840"
  },
  {
    "text": "do update and then we check initial attempts as many of you can guess it",
    "start": "201840",
    "end": "207480"
  },
  {
    "text": "will be actually an error because the settings usually store something somewhere right it's a settings they",
    "start": "207480",
    "end": "213360"
  },
  {
    "text": "usually most likely store it in file system and database or something so if we execute the test sequentially and",
    "start": "213360",
    "end": "219959"
  },
  {
    "text": "swap them first we save the value it's there and the second time time we call it it will be not uh zero",
    "start": "219959",
    "end": "227680"
  },
  {
    "text": "anymore uh so what happens if we run the test twice because I said settings",
    "start": "227680",
    "end": "234040"
  },
  {
    "text": "usually save your settings somewhere right so when call usually second times the settings will be still preserved",
    "start": "234040",
    "end": "240680"
  },
  {
    "text": "because we didn't clean up it we didn't remove it we didn't do anything and the third question is what",
    "start": "240680",
    "end": "246879"
  },
  {
    "text": "happens if we run all these test cases in parallel which one will execute it first which result we will get so and as",
    "start": "246879",
    "end": "254959"
  },
  {
    "text": "you see the function is quite simple this one quite simple but it's already created a lot of problems and we will",
    "start": "254959",
    "end": "262360"
  },
  {
    "text": "try to solve them with dependency injection because as a definition says",
    "start": "262360",
    "end": "268440"
  },
  {
    "text": "that it kind of helps is this so let's try it out so we need to somehow pass the",
    "start": "268440",
    "end": "276080"
  },
  {
    "text": "settings to the function the question is how and what we should",
    "start": "276080",
    "end": "281120"
  },
  {
    "text": "pass so let's explore a couple of techniques uh which is available and I",
    "start": "281120",
    "end": "286919"
  },
  {
    "text": "think most of you know them uh there are some maybe you don't know but we will see okay the first one the first",
    "start": "286919",
    "end": "294039"
  },
  {
    "text": "technique is inheritance it's quite common to create the base class uh and",
    "start": "294039",
    "end": "299120"
  },
  {
    "text": "somehow pass it to our function and let's put a small like idea we want be",
    "start": "299120",
    "end": "304199"
  },
  {
    "text": "able this function uh to be tested so let's create P inheritance in",
    "start": "304199",
    "end": "309800"
  },
  {
    "text": "interface and pass it like I settings then we can create the",
    "start": "309800",
    "end": "314880"
  },
  {
    "text": "interface itself so we have a virtual Destructor uh some pure virtual function",
    "start": "314880",
    "end": "320919"
  },
  {
    "text": "which later we can Implement in two children so we have a settings which is",
    "start": "320919",
    "end": "326240"
  },
  {
    "text": "let's assume it's a real settings which store something in the file system and we have in memory settings which doesn't",
    "start": "326240",
    "end": "332479"
  },
  {
    "text": "do anything they just keep it in memory and once the the class is destroyed that",
    "start": "332479",
    "end": "337600"
  },
  {
    "text": "the data is lost so then in production we kind of",
    "start": "337600",
    "end": "342960"
  },
  {
    "text": "can create our settings the actual ones and pass it and everything works as expected and then when we do a test case",
    "start": "342960",
    "end": "350280"
  },
  {
    "text": "we can create the memory settings we can put some value and then we can see if",
    "start": "350280",
    "end": "356160"
  },
  {
    "text": "things actually works and I think this technique is quite",
    "start": "356160",
    "end": "362000"
  },
  {
    "text": "simple uh it's very simple to implement everyone knows what's the virtual function I think they've been in the",
    "start": "362000",
    "end": "367840"
  },
  {
    "text": "language since correct me from the beginning I not that old so I don't",
    "start": "367840",
    "end": "374000"
  },
  {
    "text": "remember how it was before um it's simple to implement it's simple to add to the current code base it's just",
    "start": "374000",
    "end": "380080"
  },
  {
    "text": "create a virtual Destructor in the Base Class add the virtual function that's it",
    "start": "380080",
    "end": "386160"
  },
  {
    "text": "however this approach has a lot of disadvantages at least in my opinion what I've saw is that it kind of couples",
    "start": "386160",
    "end": "393960"
  },
  {
    "text": "your code it's in many code base I've seen that uh the Base Class becomes the like a big one God object it's easy to",
    "start": "393960",
    "end": "401960"
  },
  {
    "text": "add the virtual functions you just keep putting them and then it's like your derive class has start to kind of depend",
    "start": "401960",
    "end": "408440"
  },
  {
    "text": "on it and it kind of get messy and as I said you can get a good",
    "start": "408440",
    "end": "413800"
  },
  {
    "text": "object and I'm not sure how many went to previous talk from Claus but there is overhead people will claim there is",
    "start": "413800",
    "end": "420280"
  },
  {
    "text": "overhead I've never seen it by myself but I believe it it's there so let's say",
    "start": "420280",
    "end": "425960"
  },
  {
    "text": "it's a valid point so there inheritance has an overhead so and from the same talk as",
    "start": "425960",
    "end": "433039"
  },
  {
    "text": "Cloud says uh there is another Technique we can use templates and it's basically no overhead",
    "start": "433039",
    "end": "439599"
  },
  {
    "text": "from that uh so let's uh try to use it so again our goal that we want to",
    "start": "439599",
    "end": "447080"
  },
  {
    "text": "test the function and",
    "start": "447080",
    "end": "451520"
  },
  {
    "text": "um H we don't want overhead let's say this is important for some reason we don't want overhead this is our",
    "start": "452599",
    "end": "460400"
  },
  {
    "text": "goal so yep we can basically Mark the function to be templated um and we will accept any type",
    "start": "460400",
    "end": "467840"
  },
  {
    "text": "T and uh since we can accept any type T we can pass anything and we can get uh",
    "start": "467840",
    "end": "473960"
  },
  {
    "text": "weird errors if the type doesn't match the doesn't have the value function so in+ plus 20 we kind of can restrict it",
    "start": "473960",
    "end": "482120"
  },
  {
    "text": "with the concept we can say settings concept requires that they at least have a value function which accept conch and",
    "start": "482120",
    "end": "490479"
  },
  {
    "text": "return string and then we can mark in our uh template that the type should meet the",
    "start": "490479",
    "end": "498080"
  },
  {
    "text": "requirements of the concept and then we can Implement our",
    "start": "498080",
    "end": "503599"
  },
  {
    "text": "two classes settings actual one and the memory settings and as you see they don't have any more Base Class so they",
    "start": "503599",
    "end": "509840"
  },
  {
    "text": "don't know anything about each other you're free to do whatever you",
    "start": "509840",
    "end": "514959"
  },
  {
    "text": "want and the use case would be quite similar",
    "start": "515240",
    "end": "521080"
  },
  {
    "text": "um no big differences from the users of the code it looks like a",
    "start": "521080",
    "end": "526480"
  },
  {
    "text": "regular the same as inheritance um yeah so as the result we don't have",
    "start": "526480",
    "end": "535680"
  },
  {
    "text": "any overhead because we don't have anyal dispatch we quite flexible with which types to pass if they meet requirements",
    "start": "535680",
    "end": "543000"
  },
  {
    "text": "uh they don't need to know anything about the base class however the problem is is that the",
    "start": "543000",
    "end": "548480"
  },
  {
    "text": "templates becomes everywhere because you don't have a base class you cannot just pass it you cannot just store it and uh",
    "start": "548480",
    "end": "556240"
  },
  {
    "text": "you kind of need the templates everywhere which kind of increase your compilation time and the more templates",
    "start": "556240",
    "end": "562560"
  },
  {
    "text": "you add the more complex ER messages you get I'm not sure how many templates you've done in your life but if you done",
    "start": "562560",
    "end": "569079"
  },
  {
    "text": "quite enough you will see 10K lines of erors which kind of hard to understand",
    "start": "569079",
    "end": "575040"
  },
  {
    "text": "the concepts claims that should help but I don't know in my experience they helps a bit but not that",
    "start": "575040",
    "end": "582680"
  },
  {
    "text": "much the next technique is linking um this is quite old technique",
    "start": "583480",
    "end": "589000"
  },
  {
    "text": "as far as I understand uh and um it's it's basically manipulation of the",
    "start": "589000",
    "end": "594360"
  },
  {
    "text": "libraries what do you link to so let's just Define again the goal I want to be able to test the function we don't want",
    "start": "594360",
    "end": "601600"
  },
  {
    "text": "overhead and we don't want templates all the way down but we still be able to kind of change the behavior of the",
    "start": "601600",
    "end": "607440"
  },
  {
    "text": "function so so the way it works is that basically you have somewhere a header file with",
    "start": "607440",
    "end": "613760"
  },
  {
    "text": "the settings which Define that you have a function value then you have two implementations and let's say file",
    "start": "613760",
    "end": "620399"
  },
  {
    "text": "system set. CPP implements it in one way memory settings. CVP implements it in",
    "start": "620399",
    "end": "626000"
  },
  {
    "text": "different way and then you can produce basically two different libraries you can create",
    "start": "626000",
    "end": "631720"
  },
  {
    "text": "compile have two different libraries and then you can choose which to link to you need some uh build system help here um",
    "start": "631720",
    "end": "639560"
  },
  {
    "text": "but you can if you use the dynamic libraries you can do it in runtime switch it through the environment",
    "start": "639560",
    "end": "645399"
  },
  {
    "text": "variables but basically by changing the library you kind of change in the behavior and um it kind of works I would",
    "start": "645399",
    "end": "654760"
  },
  {
    "text": "say it's quite a complicated technique but it can solve the problem if you",
    "start": "654760",
    "end": "660560"
  },
  {
    "text": "want and in test case you basically can do something similar like if you so our",
    "start": "660560",
    "end": "668040"
  },
  {
    "text": "memory implementation we have some Global variable which we can access and we can write the value and then kind of",
    "start": "668040",
    "end": "674399"
  },
  {
    "text": "test it however the problem arise that since it's a global settings again the",
    "start": "674399",
    "end": "679680"
  },
  {
    "text": "same issue if you have two test cases the value will been stored so there is another alternative how to use uh that",
    "start": "679680",
    "end": "687680"
  },
  {
    "text": "technique you can create create a make settings function which basically return you let's say a unique pointer of some",
    "start": "687680",
    "end": "695760"
  },
  {
    "text": "base class then we kind of bring in overhead a little bit we need to use",
    "start": "695760",
    "end": "701680"
  },
  {
    "text": "inheritance and then in the T case you can cast it to your specific class so this technique has some",
    "start": "701680",
    "end": "710000"
  },
  {
    "text": "advantages you don't need the code modifications if you want to basically swap the libraries in in a full",
    "start": "710000",
    "end": "717079"
  },
  {
    "text": "application it also allows you to modify and modifiable what I mean is that I've seen examples of using that technique",
    "start": "717079",
    "end": "723399"
  },
  {
    "text": "where basically the entire CIS calls to file system has been replaced and um you kind of can mock it",
    "start": "723399",
    "end": "732040"
  },
  {
    "text": "and test it so it was quite interesting even though it's quite complicated technique this is as a",
    "start": "732040",
    "end": "738519"
  },
  {
    "text": "disadvantage the error handling if like you have two libraries and some for some reason you have a updated one but forgot",
    "start": "738519",
    "end": "745120"
  },
  {
    "text": "to update the second one forget to recompile the errors could be like quite quite hard to understand what's",
    "start": "745120",
    "end": "752079"
  },
  {
    "text": "going on I don't think that any regular developer will kind of get it I would",
    "start": "752079",
    "end": "758000"
  },
  {
    "text": "also would say it's not a general use case you you I guess you haven't seen that much in your code base",
    "start": "758000",
    "end": "764079"
  },
  {
    "text": "right um yeah there is another uh technique",
    "start": "764079",
    "end": "769480"
  },
  {
    "text": "called type erer and I think this is like the most modern the most hyped I love it personally uh but uh let's take",
    "start": "769480",
    "end": "777440"
  },
  {
    "text": "a look so we want overhead we didn't want templates we don't want to mess with the build system with our",
    "start": "777440",
    "end": "783720"
  },
  {
    "text": "environment but still we want to do something here so and when I talk about the type",
    "start": "783720",
    "end": "790279"
  },
  {
    "text": "raure there is two things which very well known in C++ right now which eras",
    "start": "790279",
    "end": "796279"
  },
  {
    "text": "your type is SD function Andia how many of you know this can you just yeah okay",
    "start": "796279",
    "end": "802760"
  },
  {
    "text": "good estd any everyone knows okay quite a few good but I will",
    "start": "802760",
    "end": "808279"
  },
  {
    "text": "still show the Basics so basically you have a steady function but you say what the colable object should look like and",
    "start": "808279",
    "end": "814880"
  },
  {
    "text": "then you can bind other free function Lambda or you can even bind the call of",
    "start": "814880",
    "end": "820199"
  },
  {
    "text": "the object and you can just call it pretty simple it's erase the type you",
    "start": "820199",
    "end": "825320"
  },
  {
    "text": "don't know anything what you call to but you just call it um anes any is um it's good be",
    "start": "825320",
    "end": "833440"
  },
  {
    "text": "anything anything that what is copyable copy constructable I think so you can",
    "start": "833440",
    "end": "839199"
  },
  {
    "text": "just write as we do write integer then you can get integer you can override it",
    "start": "839199",
    "end": "846079"
  },
  {
    "text": "with the double here you are you get the double and then you can override it with",
    "start": "846079",
    "end": "851360"
  },
  {
    "text": "the bull and get the bull the the problem is with SD is that",
    "start": "851360",
    "end": "856800"
  },
  {
    "text": "you have to actually know the actual type which you want to get out because it's erase the type you don't know and",
    "start": "856800",
    "end": "862519"
  },
  {
    "text": "when you use it you need to know so we are not going to use STD here because we we never know the type uh but what we",
    "start": "862519",
    "end": "869920"
  },
  {
    "text": "can do is basically we can supply a steady function so now we don't know what it is",
    "start": "869920",
    "end": "879440"
  },
  {
    "text": "but it basically returns as a string we pass the key a string View and return",
    "start": "879440",
    "end": "884959"
  },
  {
    "text": "the string and the way how it can look like in a in a real code let's say is that in",
    "start": "884959",
    "end": "892720"
  },
  {
    "text": "production you have a Lambda which calls your settings in the test you can just mock it and return whatever value you",
    "start": "892720",
    "end": "898800"
  },
  {
    "text": "want that technique has an issue because it's basically let's say I wanted two methods",
    "start": "898800",
    "end": "907160"
  },
  {
    "text": "you need to two functions so structure sub stady functions and then you need kind of care about how to initialize",
    "start": "907160",
    "end": "913399"
  },
  {
    "text": "that and what's not initialize so there is another improved version of it which",
    "start": "913399",
    "end": "919519"
  },
  {
    "text": "not in a standard kind of library that there is no helpers there and um I will show you this have",
    "start": "919519",
    "end": "927560"
  },
  {
    "text": "anyone seen this before okay two people cool do you think it's a compilation error or is it actually",
    "start": "927560",
    "end": "934440"
  },
  {
    "text": "valid code those who know please don't say but those who doesn't know just",
    "start": "934440",
    "end": "940639"
  },
  {
    "text": "guess there is no base class there is basically yeah but if you compile that",
    "start": "940639",
    "end": "947680"
  },
  {
    "text": "code with some magic it will work it's called typ ration and you can",
    "start": "947680",
    "end": "954000"
  },
  {
    "text": "apply it for the class uh there is a cloudberg who",
    "start": "954000",
    "end": "959240"
  },
  {
    "text": "actually have a very nice amount of talks about explaining how it works and I'm not going to explain how the sbrand",
    "start": "959240",
    "end": "966000"
  },
  {
    "text": "version work because I think it's find it quite complicated uh we will stick with the",
    "start": "966000",
    "end": "971160"
  },
  {
    "text": "CLA version with this simple one I think um so let's try to",
    "start": "971160",
    "end": "979399"
  },
  {
    "text": "implement uh what we will do we will pass we will call it any settings it kind of could be anything uh and then we",
    "start": "979399",
    "end": "986399"
  },
  {
    "text": "try to Define that class so we start with very simple we Define the class",
    "start": "986399",
    "end": "991560"
  },
  {
    "text": "which has a Constructor which accept anything we'll a little bit restrain it",
    "start": "991560",
    "end": "997399"
  },
  {
    "text": "that it should accept only e settings everything would match our uh",
    "start": "997399",
    "end": "1003680"
  },
  {
    "text": "concept but still we kind of it's not a templated class it's just a templated Constructor so we can accept",
    "start": "1003680",
    "end": "1010800"
  },
  {
    "text": "everything and then what we do is we'll start to create this helper things",
    "start": "1010800",
    "end": "1016199"
  },
  {
    "text": "inside the class so we have a concept um which Define the",
    "start": "1016199",
    "end": "1021600"
  },
  {
    "text": "interface then we have a templated version of the model which very very",
    "start": "1021600",
    "end": "1027000"
  },
  {
    "text": "basically inherit from the concept and can store our",
    "start": "1027000",
    "end": "1032280"
  },
  {
    "text": "type and then we can keep the unique pointer to the actual implementation or",
    "start": "1032280",
    "end": "1037798"
  },
  {
    "text": "like for the interface and then we can create the model",
    "start": "1037799",
    "end": "1043240"
  },
  {
    "text": "version is everyone understand how it works it's I find it's very complicated",
    "start": "1043240",
    "end": "1048600"
  },
  {
    "text": "technique though but quite cool but the thing is that we created we have a concept which is a kind of um interface",
    "start": "1048600",
    "end": "1057440"
  },
  {
    "text": "we have a templated fun uh class which is inhered from it so we can store our particular type and then we create uh",
    "start": "1057440",
    "end": "1065360"
  },
  {
    "text": "that and the way we use it is just then we can concrete and get the value",
    "start": "1065360",
    "end": "1072160"
  },
  {
    "text": "so then to be able to use it we again we use the same thing as with templates we",
    "start": "1072160",
    "end": "1078039"
  },
  {
    "text": "have a settings and memory settings they don't have base class but we know that",
    "start": "1078039",
    "end": "1083559"
  },
  {
    "text": "any settings can accept them so we kind of decouple the",
    "start": "1083559",
    "end": "1088960"
  },
  {
    "text": "stuff and we combine both beauty of both words we can use inheritance and we can",
    "start": "1088960",
    "end": "1094520"
  },
  {
    "text": "use templates even though templates not all the way down and inheritance is very controlled and then the real code it",
    "start": "1094520",
    "end": "1101520"
  },
  {
    "text": "looks something like that so you wouldn't as a user wouldn't see a difference if you work with this type",
    "start": "1101520",
    "end": "1108280"
  },
  {
    "text": "ratio Tech technique you as a user just enjoy it as a developer it's kind of",
    "start": "1108280",
    "end": "1114640"
  },
  {
    "text": "hard to implement I would say but what it gives you it gives you a",
    "start": "1114640",
    "end": "1119760"
  },
  {
    "text": "lot of flexibilities because now you can mix the different types without even know",
    "start": "1119760",
    "end": "1124919"
  },
  {
    "text": "the type so you can forget about it and since you you have a type like templated",
    "start": "1124919",
    "end": "1130919"
  },
  {
    "text": "there is a lot of magic you can do with that I would say it's a little bit simplifies API since like you're not",
    "start": "1130919",
    "end": "1137760"
  },
  {
    "text": "anymore dependent on real type uh when in terms of inheritance we need to use",
    "start": "1137760",
    "end": "1142919"
  },
  {
    "text": "the Base Class a pointer unique pointer or something here we can embrace the Val semantic and make it easier to use I",
    "start": "1142919",
    "end": "1151120"
  },
  {
    "text": "would say it's it's kind of make it easy to maintain from the developer point of",
    "start": "1151120",
    "end": "1156760"
  },
  {
    "text": "view and from user but it's debatable as a disadvantage I would say",
    "start": "1156760",
    "end": "1162760"
  },
  {
    "text": "it's a complex implementation and I would say it's mostly for the library developers I would not imagine that you",
    "start": "1162760",
    "end": "1169799"
  },
  {
    "text": "do your business logic with this like implementing all of this stuff you",
    "start": "1169799",
    "end": "1175120"
  },
  {
    "text": "know I I would guess it's hard however some of you could say like why I didn't say anything about",
    "start": "1175120",
    "end": "1181280"
  },
  {
    "text": "performance we have a virtual class we we have like a virtual functions make",
    "start": "1181280",
    "end": "1186679"
  },
  {
    "text": "unique and that's why I said the implementation is complex because this this is very simple",
    "start": "1186679",
    "end": "1192480"
  },
  {
    "text": "implementation however you could make it less and less overhead and in a talk of",
    "start": "1192480",
    "end": "1198720"
  },
  {
    "text": "your brand it it's actually presented how to make your do it without inheritance at all and I think at CLA",
    "start": "1198720",
    "end": "1205320"
  },
  {
    "text": "you also show it in the latest examples right yeah so",
    "start": "1205320",
    "end": "1213320"
  },
  {
    "text": "yeah so I would say this is the most uh common techniques inheritance templates",
    "start": "1213960",
    "end": "1219720"
  },
  {
    "text": "leaking type ratio at least which I've seen in my experience there is one more which I",
    "start": "1219720",
    "end": "1225360"
  },
  {
    "text": "call Global it's actually not my name I took it but I was reference it later",
    "start": "1225360",
    "end": "1231120"
  },
  {
    "text": "it's not about how to pass the objects inside it's about how to do some Global",
    "start": "1231120",
    "end": "1238240"
  },
  {
    "text": "calls kind of let's say I want to log something I'm quite sure every all of",
    "start": "1238240",
    "end": "1243640"
  },
  {
    "text": "you have some login libraries and something the question is this is a",
    "start": "1243640",
    "end": "1248760"
  },
  {
    "text": "global function right and uh but we just learned that this is makes a lot of mistakes how we test it how we change it",
    "start": "1248760",
    "end": "1256440"
  },
  {
    "text": "uh so on so maybe we should pass it like that maybe it should be just an argument",
    "start": "1256440",
    "end": "1262919"
  },
  {
    "text": "and it should be a base class or type rase class something it doesn't really",
    "start": "1262919",
    "end": "1268760"
  },
  {
    "text": "matter the problem is that we need to pass it in every single function every time we want to do a logging we need to",
    "start": "1268760",
    "end": "1275080"
  },
  {
    "text": "do logs logs like pass it logger everywhere um I I don't think it's very",
    "start": "1275080",
    "end": "1282120"
  },
  {
    "text": "kind of nice and sufficient because then you have a file system maybe then you have I don't know time and like passing",
    "start": "1282120",
    "end": "1288240"
  },
  {
    "text": "everything everywhere it's just yeah quite hard you can create like a global static",
    "start": "1288240",
    "end": "1295960"
  },
  {
    "text": "variable in terms of your compilation file like say logger and use it but then",
    "start": "1295960",
    "end": "1302200"
  },
  {
    "text": "the problem is that if I want to change it that I need to have a somewhere should be some another Global function",
    "start": "1302200",
    "end": "1307799"
  },
  {
    "text": "which I do and yeah I wouldn't say even though it's workable but I think there",
    "start": "1307799",
    "end": "1313679"
  },
  {
    "text": "is quite better technique which I learned quite recently so the point is that we want to",
    "start": "1313679",
    "end": "1320159"
  },
  {
    "text": "be able to change what the log function does and we want to inject it",
    "start": "1320159",
    "end": "1326440"
  },
  {
    "text": "so how many have seen you this lighting talk from then bin",
    "start": "1326440",
    "end": "1331919"
  },
  {
    "text": "bin one at least cool okay so there was a lighting talk and it was like 10",
    "start": "1331919",
    "end": "1337520"
  },
  {
    "text": "minutes explaining everything what I explained you before like in 5 minutes uh but it highlight one cool",
    "start": "1337520",
    "end": "1343559"
  },
  {
    "text": "technique which I didn't know um and it's heavily templated mind-blowing and",
    "start": "1343559",
    "end": "1349400"
  },
  {
    "text": "it's okay to not understand it you have to try it but let's do so we write our",
    "start": "1349400",
    "end": "1355360"
  },
  {
    "text": "concept we have a logger which have a function log which you can pass some string and it returns",
    "start": "1355360",
    "end": "1362400"
  },
  {
    "text": "void then we can Implement our default logger which doesn't do anything it's just print to stud out take the string",
    "start": "1362400",
    "end": "1369720"
  },
  {
    "text": "and print and this is where the magic starts we created a templated variable with",
    "start": "1369720",
    "end": "1376799"
  },
  {
    "text": "vertic arguments and we assign our default logger and the",
    "start": "1376799",
    "end": "1381919"
  },
  {
    "text": "thing is since it's a templated variable it will be instantiated if I correct only when you kind of call it",
    "start": "1381919",
    "end": "1389679"
  },
  {
    "text": "explicitly and then you do this magic you create another templated variable uh",
    "start": "1389679",
    "end": "1396039"
  },
  {
    "text": "function which should never ever accept anything more than these Dum arcs which is zero but you need it to be able to",
    "start": "1396039",
    "end": "1403440"
  },
  {
    "text": "that it's not in state created right away and then you try to get your Global",
    "start": "1403440",
    "end": "1409960"
  },
  {
    "text": "variable and then you log the message so you need to do this",
    "start": "1409960",
    "end": "1415799"
  },
  {
    "text": "magic to be able to then call log and you will get the test so then when you want to replace",
    "start": "1415799",
    "end": "1423200"
  },
  {
    "text": "the logger you create a new logger that's how called Dam",
    "start": "1423200",
    "end": "1428279"
  },
  {
    "text": "logger and uh no implementation and then the only need to do is actually kind of",
    "start": "1428279",
    "end": "1435640"
  },
  {
    "text": "uh explicitly initialize your logger and now it's injected so now it doesn't",
    "start": "1435640",
    "end": "1442880"
  },
  {
    "text": "print anything anymore what these techniques is giving you is basically that you can in any",
    "start": "1442880",
    "end": "1449159"
  },
  {
    "text": "moment in any time at the end of your or beginning of your ex executable like replace it if you want quite explicitly",
    "start": "1449159",
    "end": "1456039"
  },
  {
    "text": "if you do it twice you will get a compilation error and uh yeah it's quite",
    "start": "1456039",
    "end": "1461679"
  },
  {
    "text": "cool technique it also allows you to do I didn't show it on the slide I tried to fit it but it couldn't but the point is",
    "start": "1461679",
    "end": "1467720"
  },
  {
    "text": "that you can accept um in your lock function you could Supply actual types which you",
    "start": "1467720",
    "end": "1473880"
  },
  {
    "text": "want to lock and then you can forward it to your log function so you kind of get a virtual templated function which is",
    "start": "1473880",
    "end": "1479600"
  },
  {
    "text": "not kind of allow by default yeah but I really recommend to watch this talk it explains it much",
    "start": "1479600",
    "end": "1486120"
  },
  {
    "text": "better than me and um yeah so I would say this technique is",
    "start": "1486120",
    "end": "1492120"
  },
  {
    "text": "quite cool when you need to kind of globally inject some singl tones even though singl tones is forbidden word but",
    "start": "1492120",
    "end": "1498679"
  },
  {
    "text": "the logger time file system in network is mostly singl",
    "start": "1498679",
    "end": "1504159"
  },
  {
    "text": "tons there is hardly imaged there is no file system in in general sense right",
    "start": "1504159",
    "end": "1509440"
  },
  {
    "text": "it's only one the same as a logger you don't want to have different types of logger in your application and I would",
    "start": "1509440",
    "end": "1515760"
  },
  {
    "text": "say that that you can do templated virtual function yes uh I would say disadvantage",
    "start": "1515760",
    "end": "1522240"
  },
  {
    "text": "is quite hard it's unreadable heavily templated and uh I would say you",
    "start": "1522240",
    "end": "1527960"
  },
  {
    "text": "wouldn't use it in every",
    "start": "1527960",
    "end": "1531600"
  },
  {
    "text": "place so I want to quickly talk about how to pass dependency injections",
    "start": "1533640",
    "end": "1540520"
  },
  {
    "text": "there's not that many options in my opinion so I will just focus on two of that you might come up with more examples but I think this is at least",
    "start": "1540520",
    "end": "1547520"
  },
  {
    "text": "the base which we need to know so basically there is a way to set your dependency through the Setters functions",
    "start": "1547520",
    "end": "1554399"
  },
  {
    "text": "like here we have an engine and we have a car car depends on engine",
    "start": "1554399",
    "end": "1559480"
  },
  {
    "text": "and then we can set the engine and problem with that approach is",
    "start": "1559480",
    "end": "1565840"
  },
  {
    "text": "that car object is broken without the engine it doesn't do anything right and you need to check all the time if there",
    "start": "1565840",
    "end": "1571760"
  },
  {
    "text": "is an engine blah blah blah so what happens if uh you change the engine",
    "start": "1571760",
    "end": "1578159"
  },
  {
    "text": "while you're driving um so there's so many of these questions so I would",
    "start": "1578159",
    "end": "1583760"
  },
  {
    "text": "generally don't recommend to use it and instead just accept everything in a",
    "start": "1583760",
    "end": "1589279"
  },
  {
    "text": "Constructor Constructor also allows you to do like now you can use a reference instead of a pointers so you don't need",
    "start": "1589279",
    "end": "1596080"
  },
  {
    "text": "to kind of do this um checks also like car object is always valid you need no",
    "start": "1596080",
    "end": "1603080"
  },
  {
    "text": "null checks so",
    "start": "1603080",
    "end": "1606799"
  },
  {
    "text": "yeah I want to just summarize a little bit and say dependency injection is heart we've seen all these different",
    "start": "1608360",
    "end": "1614200"
  },
  {
    "text": "techniques all of them has advantages disadvantages we talked about the testing but it's not only for testing",
    "start": "1614200",
    "end": "1621120"
  },
  {
    "text": "it's basically about to change behavior of your uh",
    "start": "1621120",
    "end": "1626440"
  },
  {
    "text": "application uh I would say if you don't do it at the beginning it's quite hard to add it later without some cost",
    "start": "1626440",
    "end": "1633559"
  },
  {
    "text": "because it is how it is and now I actually want to talk about",
    "start": "1633559",
    "end": "1638679"
  },
  {
    "text": "what happens in real life and this is just my observation what I've seen in many different",
    "start": "1638679",
    "end": "1645080"
  },
  {
    "text": "projects and I pick the setting class on purpose because I think most of the application have settings and they store",
    "start": "1645080",
    "end": "1652000"
  },
  {
    "text": "it somehow and the more you develop your software the more the settings class",
    "start": "1652000",
    "end": "1657720"
  },
  {
    "text": "grows you get more settings more functionality and more",
    "start": "1657720",
    "end": "1664679"
  },
  {
    "text": "functionality and it just becomes this so big and if you look inside this is",
    "start": "1664679",
    "end": "1670120"
  },
  {
    "text": "actually not a joke I've been working one project which settings been like this so what it new it's it's new it can",
    "start": "1670120",
    "end": "1677880"
  },
  {
    "text": "write in a file system or it can keep in memory there was a way to test it at some point we need to be secure so we",
    "start": "1677880",
    "end": "1685440"
  },
  {
    "text": "implemented encryption and at some point since the settings worked with the file system it",
    "start": "1685440",
    "end": "1691519"
  },
  {
    "text": "was file system was slow we cannot kind of block the main thread so we implemented executor so we had a temp",
    "start": "1691519",
    "end": "1697760"
  },
  {
    "text": "thread which was basically syncing everything to the file system it was inside one class",
    "start": "1697760",
    "end": "1703320"
  },
  {
    "text": "settings the more the project grow the more options we have and then we need to",
    "start": "1703320",
    "end": "1708679"
  },
  {
    "text": "migrate the old versions to the new ones so it was had the migration mechanism",
    "start": "1708679",
    "end": "1713720"
  },
  {
    "text": "itself and it more learn about the products that has start to have like product specific things into it and then",
    "start": "1713720",
    "end": "1721760"
  },
  {
    "text": "the more products you create the more knowledge you will accumulate there and I would say we kind of created",
    "start": "1721760",
    "end": "1729320"
  },
  {
    "text": "a god object it does everything you you cannot do anything without it and you",
    "start": "1729320",
    "end": "1734799"
  },
  {
    "text": "have to bury everything with you even though you don't need half of the functionality what I think is if you",
    "start": "1734799",
    "end": "1741799"
  },
  {
    "text": "look at the every good object you will find something like this AB c d stands here for like different classes it could",
    "start": "1741799",
    "end": "1748919"
  },
  {
    "text": "be completely separated they don't need to know in about the God object itself they self sustain so we can move them",
    "start": "1748919",
    "end": "1757399"
  },
  {
    "text": "out and uh we can say this is our core libraries your executor and file system",
    "start": "1757399",
    "end": "1763320"
  },
  {
    "text": "wherever he wants there uh migration mechanism",
    "start": "1763320",
    "end": "1768480"
  },
  {
    "text": "then what left is that we kind of have a lot of features into it like uh because we develop features we sell the software",
    "start": "1768480",
    "end": "1775279"
  },
  {
    "text": "right software has a features and we have temporary solutions because it's a deadline we need to do",
    "start": "1775279",
    "end": "1782600"
  },
  {
    "text": "something quick it's I don't know production failing so you have a bunch of this temporary",
    "start": "1782600",
    "end": "1790000"
  },
  {
    "text": "stuff but I think technically speaking we can move them all everything out and",
    "start": "1790000",
    "end": "1795240"
  },
  {
    "text": "it could be be like this so like each feature could be separate and the only thing left is from",
    "start": "1795240",
    "end": "1802200"
  },
  {
    "text": "the god object is kind of a glue logic how you combine all of this together how",
    "start": "1802200",
    "end": "1807480"
  },
  {
    "text": "do you provide all the dependencies and so on and I already said that word so how",
    "start": "1807480",
    "end": "1815679"
  },
  {
    "text": "to provide dependencies so technically speaking we kind of you can use dependency injection system here so",
    "start": "1815679",
    "end": "1822919"
  },
  {
    "text": "basically we could have that every feature temporary is more like a compon",
    "start": "1822919",
    "end": "1828880"
  },
  {
    "text": "components and they can Define what they provide and what they require and the dependence injection system will just",
    "start": "1828880",
    "end": "1835240"
  },
  {
    "text": "inject it I kind of started to talk about component based",
    "start": "1835240",
    "end": "1841000"
  },
  {
    "text": "architecture I find it's um quite uh cool technique where basically you",
    "start": "1841000",
    "end": "1847480"
  },
  {
    "text": "construct components which are self-contained they don't know anything about the rest of the system they",
    "start": "1847480",
    "end": "1853000"
  },
  {
    "text": "communicates with other modules strongly through the interfaces they could be reusable",
    "start": "1853000",
    "end": "1859159"
  },
  {
    "text": "you can always say I want these components I want to disable these components they explicit about the",
    "start": "1859159",
    "end": "1864639"
  },
  {
    "text": "dependency and what they provides so we can look at this example",
    "start": "1864639",
    "end": "1869799"
  },
  {
    "text": "like we have a settings component which knows about the settings where to store it and so on it provides our I settings",
    "start": "1869799",
    "end": "1876639"
  },
  {
    "text": "interface to the dependency system and then somebody come and say okay we want to create a new component new feature we",
    "start": "1876639",
    "end": "1883240"
  },
  {
    "text": "want to synchronize settings across the products cool then of course our",
    "start": "1883240",
    "end": "1888600"
  },
  {
    "text": "component should know everything about the settings right then it's request uh I settings",
    "start": "1888600",
    "end": "1895880"
  },
  {
    "text": "interface from dependency system and dependency system give it to you so quite cool let's try to implement",
    "start": "1895880",
    "end": "1905440"
  },
  {
    "text": "it uh and see what we can do I will take very naive Approach at",
    "start": "1905440",
    "end": "1911799"
  },
  {
    "text": "the beginning and the more we go uh the more worse it will become so let's say",
    "start": "1911799",
    "end": "1917960"
  },
  {
    "text": "have a component class which uh a base one it has a name that let's give every",
    "start": "1917960",
    "end": "1923240"
  },
  {
    "text": "component a name and it can return the provide and depend like what it provides on and what it depends on so the",
    "start": "1923240",
    "end": "1930720"
  },
  {
    "text": "dependency is some type ratio thing here so don't doesn't really matter and then we have init and tiar down because we",
    "start": "1930720",
    "end": "1937720"
  },
  {
    "text": "need to do compose all these components together right we need to resolve all the dependencies we need to initialize",
    "start": "1937720",
    "end": "1942760"
  },
  {
    "text": "everything so we cannot just use Constructors and destructors and so on",
    "start": "1942760",
    "end": "1948120"
  },
  {
    "text": "so our settings component could look like that we inher from component we say the name is settings it provides one",
    "start": "1948120",
    "end": "1955120"
  },
  {
    "text": "dependency settings and as I said it's um components to only through the",
    "start": "1955120",
    "end": "1960919"
  },
  {
    "text": "interfaces they don't know implementation so we need to kind of cast it to know the type and I use the I give a like a",
    "start": "1960919",
    "end": "1968919"
  },
  {
    "text": "string settings just to make sure that we can have different types of settings if I want and give him different names",
    "start": "1968919",
    "end": "1975480"
  },
  {
    "text": "and the component doesn't depend on anything and need need tear down just empty for",
    "start": "1975480",
    "end": "1981000"
  },
  {
    "text": "now our setting synchronizer component would do the same it has a name it",
    "start": "1981000",
    "end": "1986840"
  },
  {
    "text": "doesn't provide anything to the system but it rather depends so we kind of waiting when the dependency system",
    "start": "1986840",
    "end": "1994200"
  },
  {
    "text": "will inject that pointer into our component so this approach will work I",
    "start": "1994200",
    "end": "2001639"
  },
  {
    "text": "quite guarantee to you uh however it has a issue that it's require a lot of runtime dependency result solution so",
    "start": "2001639",
    "end": "2009080"
  },
  {
    "text": "all the errors will be at runtime so if you forget something if you typed if you",
    "start": "2009080",
    "end": "2014399"
  },
  {
    "text": "do a different type or something uh it's especially bad when you do cross",
    "start": "2014399",
    "end": "2020000"
  },
  {
    "text": "compilation so when you actually can run like if I you build if you're testing at your PC and then you need to actually",
    "start": "2020000",
    "end": "2026399"
  },
  {
    "text": "run it on iOS to realize that it's broken it's kind of bad and it requires",
    "start": "2026399",
    "end": "2032480"
  },
  {
    "text": "a lot of Boulder plate let's take a look at our NAA",
    "start": "2032480",
    "end": "2037799"
  },
  {
    "text": "approach and think what we can do better so if you look at the class name",
    "start": "2037799",
    "end": "2044399"
  },
  {
    "text": "it is actually a module name right if only we have a reflection to give it this information to us we don't need",
    "start": "2044399",
    "end": "2051118"
  },
  {
    "text": "this function we don't need this Bower plate code the same applies for dependency",
    "start": "2051119",
    "end": "2056320"
  },
  {
    "text": "name it's kind of a variable name right it's settings quite easy again we need a",
    "start": "2056320",
    "end": "2061599"
  },
  {
    "text": "reflection to take it and the type itself is base type of that variable we need need a reflection",
    "start": "2061599",
    "end": "2068919"
  },
  {
    "text": "right and it will help us to simplify the code this is my silly attempt to to",
    "start": "2068919",
    "end": "2074720"
  },
  {
    "text": "move to reflection you know so so",
    "start": "2074720",
    "end": "2080760"
  },
  {
    "text": "reflection I again Googled I don't remember if I took it but I found this definition I like it so it's ability to",
    "start": "2080760",
    "end": "2087638"
  },
  {
    "text": "program to inspect and modify its own structure Behavior at compile time or run time and uh basically you can inspect",
    "start": "2087639",
    "end": "2095000"
  },
  {
    "text": "the types you can access metadata about the classes method functions Fields you maybe can invoke the functions by name",
    "start": "2095000",
    "end": "2102640"
  },
  {
    "text": "instead of typing the code kind of and you could we modify the code itself so",
    "start": "2102640",
    "end": "2109880"
  },
  {
    "text": "this is a general definition which I found somewhere I don't remember but but",
    "start": "2109880",
    "end": "2115240"
  },
  {
    "text": "what's about C++ C++ doesn't have officially reflection and I heard the rumors it",
    "start": "2115240",
    "end": "2121680"
  },
  {
    "text": "maybe will be in C++ 26 and people saing this one maybe who is from Comm here can",
    "start": "2121680",
    "end": "2128040"
  },
  {
    "text": "say this is the the correct proposal which is there already and be accepted I don't",
    "start": "2128040",
    "end": "2133200"
  },
  {
    "text": "know but we said that we in C++ 20 world so what can we",
    "start": "2133200",
    "end": "2138520"
  },
  {
    "text": "do so I would say officially you can do only small amount of type",
    "start": "2138520",
    "end": "2144280"
  },
  {
    "text": "inspections unofficially you have method dat access and we will go through this",
    "start": "2144280",
    "end": "2149599"
  },
  {
    "text": "all the magic today be ready so let's take a look",
    "start": "2149599",
    "end": "2155280"
  },
  {
    "text": "first at what we have we have the type traits which can tell you something about the type Concepts which quite",
    "start": "2155280",
    "end": "2161920"
  },
  {
    "text": "similar uh size of it's will give you a size of the object and you have type ID",
    "start": "2161920",
    "end": "2168079"
  },
  {
    "text": "type info this is runtime information we don't really care about it right now so I will just drop",
    "start": "2168079",
    "end": "2175000"
  },
  {
    "text": "it I will show you a simple example how the type trps Works uh so basically and",
    "start": "2175000",
    "end": "2182920"
  },
  {
    "text": "the concepts and size of so if you create a structure you can ask the system is a",
    "start": "2182920",
    "end": "2188359"
  },
  {
    "text": "class uh and it will tell you true so our static assert is fine you can ask is",
    "start": "2188359",
    "end": "2194680"
  },
  {
    "text": "it the function and it will place to compile you can also check if that type is exactly the same and you can get the",
    "start": "2194680",
    "end": "2202200"
  },
  {
    "text": "size of of the structure now let's go to the",
    "start": "2202200",
    "end": "2207760"
  },
  {
    "text": "Magic by the way how many of you wrote reflection before in",
    "start": "2207760",
    "end": "2212960"
  },
  {
    "text": "C++ okay almost no one cool okay let's start with the simple one which is",
    "start": "2212960",
    "end": "2218599"
  },
  {
    "text": "called function traits and I will show you the example first and then I will tell you how it",
    "start": "2218599",
    "end": "2225200"
  },
  {
    "text": "works so what you can do is imagine you have a free function uh which is return",
    "start": "2225200",
    "end": "2230839"
  },
  {
    "text": "as to the string accept int and float you can have a su function trait",
    "start": "2230839",
    "end": "2236560"
  },
  {
    "text": "mechanism where you pass a function pointer and as a result you get uh how",
    "start": "2236560",
    "end": "2242000"
  },
  {
    "text": "many arguments what's the type of them you can access by index and you can even",
    "start": "2242000",
    "end": "2247160"
  },
  {
    "text": "know the the return type it also works for",
    "start": "2247160",
    "end": "2252520"
  },
  {
    "text": "lambdas it also works for the class functions the difference is a little bit in syntax though and for the class type",
    "start": "2252520",
    "end": "2259760"
  },
  {
    "text": "you for the classes you actually can get the Class Type um so let's take a look at the",
    "start": "2259760",
    "end": "2266000"
  },
  {
    "text": "implementation it's quite simple to be honest I don't know why it's not in the standard would be nice but it is how it",
    "start": "2266000",
    "end": "2273000"
  },
  {
    "text": "is so you have a function traits uh you define the related structure without implementation and then you do partial",
    "start": "2273000",
    "end": "2280760"
  },
  {
    "text": "specialization this one basically is a function pointer specialization so we",
    "start": "2280760",
    "end": "2286560"
  },
  {
    "text": "have a return type and arguments and then you can just use SD T pull to",
    "start": "2286560",
    "end": "2292440"
  },
  {
    "text": "access the type of the index you get the return type and you can count how many VAR arents you",
    "start": "2292440",
    "end": "2299560"
  },
  {
    "text": "get then you need a one specialization for the Lambda every Lambda has um it's",
    "start": "2299560",
    "end": "2306240"
  },
  {
    "text": "internally an object right uh so it has an Operator callable Operator so you",
    "start": "2306240",
    "end": "2311359"
  },
  {
    "text": "just need to take the pointer of it and then uh the same rules applies as",
    "start": "2311359",
    "end": "2318480"
  },
  {
    "text": "here and for the class you just need to a little bit specialize that it's actually a pointer to the method of the",
    "start": "2318480",
    "end": "2325359"
  },
  {
    "text": "class nothing else so quite simple available from C++ 11 since the vartic",
    "start": "2325359",
    "end": "2332680"
  },
  {
    "text": "arguments exists um how however this technique has one",
    "start": "2332680",
    "end": "2338520"
  },
  {
    "text": "limitation you cannot access to argument names just not available this",
    "start": "2338520",
    "end": "2345839"
  },
  {
    "text": "info the second magic is a type name and I will show you again the",
    "start": "2345839",
    "end": "2352640"
  },
  {
    "text": "example uh it's basically you can p you can have a helper function which you pass a type and get the string",
    "start": "2352640",
    "end": "2359079"
  },
  {
    "text": "representation of it so in this case we we say type name int we get the int as a",
    "start": "2359079",
    "end": "2364319"
  },
  {
    "text": "string at compile time uh we have a struct F we can pass Fu and print Fu and",
    "start": "2364319",
    "end": "2370800"
  },
  {
    "text": "the same for the any other types so let's take a look at the",
    "start": "2370800",
    "end": "2377920"
  },
  {
    "text": "implementation and we start with this uh Simple Thing as Source location how many of you know what it",
    "start": "2377920",
    "end": "2384160"
  },
  {
    "text": "is good many still say but basically you can know a source location contains the",
    "start": "2384160",
    "end": "2390640"
  },
  {
    "text": "information of the which file it is which line it is which function it is I think column as well I don't remember",
    "start": "2390640",
    "end": "2398160"
  },
  {
    "text": "but basically we can um second yeah my question would be",
    "start": "2398160",
    "end": "2405240"
  },
  {
    "text": "what's the output would be of this program if somebody guess so we call the current function we",
    "start": "2405240",
    "end": "2411240"
  },
  {
    "text": "pass the int and then we basically grab the current function name and print it",
    "start": "2411240",
    "end": "2417119"
  },
  {
    "text": "anyone would guess what's the answer",
    "start": "2417119",
    "end": "2422760"
  },
  {
    "text": "no okay let's go h",
    "start": "2422760",
    "end": "2428480"
  },
  {
    "text": "yes correct Uh current function something that's true so the GCC prints",
    "start": "2428480",
    "end": "2434040"
  },
  {
    "text": "this Con export AO current function with t",
    "start": "2434040",
    "end": "2439319"
  },
  {
    "text": "in Kang prints AO current function T in and msvc prints autoscore uncore cdal",
    "start": "2439319",
    "end": "2448599"
  },
  {
    "text": "current function int the most important thing is that we can grab this right and",
    "start": "2448599",
    "end": "2455079"
  },
  {
    "text": "I think it's undocumented I think that never decare that this is the how it should be so it's unspecified but I",
    "start": "2455079",
    "end": "2462240"
  },
  {
    "text": "think this syntax has been in a language for in every compiler for quite a long",
    "start": "2462240",
    "end": "2467480"
  },
  {
    "text": "time before we didn't have SE location but we can use pretty function or underscore underscore function",
    "start": "2467480",
    "end": "2473800"
  },
  {
    "text": "signature so what we could do is we can write our type name function we can grab",
    "start": "2473800",
    "end": "2479240"
  },
  {
    "text": "the current function name and then basically do this",
    "start": "2479240",
    "end": "2485079"
  },
  {
    "text": "beautiful if defs to parse that",
    "start": "2485079",
    "end": "2490319"
  },
  {
    "text": "output and as a result we go get the type name cool right it's a first reflection",
    "start": "2490319",
    "end": "2498560"
  },
  {
    "text": "a magical reflection I would say um even though I wrote only three",
    "start": "2498560",
    "end": "2503960"
  },
  {
    "text": "compilers here most of the compilers either follow the GCC or Kang so it's",
    "start": "2503960",
    "end": "2509960"
  },
  {
    "text": "quite stable thing to be honest so you can use it okay that technique has one one big",
    "start": "2509960",
    "end": "2519160"
  },
  {
    "text": "limitation it doesn't really work with LSS quite well because each",
    "start": "2519160",
    "end": "2524400"
  },
  {
    "text": "compiler prints different things this is if you call type name ISD string msvc",
    "start": "2524400",
    "end": "2529760"
  },
  {
    "text": "will print you the whole thing like uh because St string is an",
    "start": "2529760",
    "end": "2534839"
  },
  {
    "text": "alas Kang will Brint you this and GCC will print you this so if you're",
    "start": "2534839",
    "end": "2540760"
  },
  {
    "text": "planning to build like plugins or components across the different compilers and use that technique to save",
    "start": "2540760",
    "end": "2546839"
  },
  {
    "text": "the type name that's not uh probably a solution for",
    "start": "2546839",
    "end": "2552640"
  },
  {
    "text": "you okay uh the other magic is Magic get",
    "start": "2553000",
    "end": "2558359"
  },
  {
    "text": "it's actually original name of the library later it been accepted to the Boost as boost",
    "start": "2558359",
    "end": "2564280"
  },
  {
    "text": "p uh and this is how it looks question will it",
    "start": "2564280",
    "end": "2571720"
  },
  {
    "text": "compile basically what we have we have a structure we instantiate the object",
    "start": "2571880",
    "end": "2577200"
  },
  {
    "text": "object and then we call fmt Print anyone Brave can say will it",
    "start": "2577200",
    "end": "2583200"
  },
  {
    "text": "compile or not H not compile okay it will so the",
    "start": "2583200",
    "end": "2591720"
  },
  {
    "text": "output will be like this it will be my structure field uh e 100 c h and",
    "start": "2591720",
    "end": "2600000"
  },
  {
    "text": "D3 comma for B whatever the value there so",
    "start": "2600000",
    "end": "2607640"
  },
  {
    "text": "the reason it works is the Boost pfr provides you such helper tools it's",
    "start": "2607640",
    "end": "2613280"
  },
  {
    "text": "basically give you a size how many fields you have in a structure uh since you know how many",
    "start": "2613280",
    "end": "2619440"
  },
  {
    "text": "fields you can iterate them you can get that each type and you can get the",
    "start": "2619440",
    "end": "2625359"
  },
  {
    "text": "name so basically in this case it will be three Fields the first type is",
    "start": "2625359",
    "end": "2631200"
  },
  {
    "text": "integer and the name is I by the way that functionality works",
    "start": "2631200",
    "end": "2636520"
  },
  {
    "text": "even before C++ 20 accept the name name is only accessible from C++",
    "start": "2636520",
    "end": "2642480"
  },
  {
    "text": "20 and uh this is the actually author of that Library he gave us several",
    "start": "2642480",
    "end": "2648640"
  },
  {
    "text": "talks uh he went to the nitty d g tals to explain how he implement it so really",
    "start": "2648640",
    "end": "2655520"
  },
  {
    "text": "recommend to watch it if you want we will take the naif approach and we will do quite simple",
    "start": "2655520",
    "end": "2661680"
  },
  {
    "text": "implementation so let's start with the naive tole size and the way it works is that",
    "start": "2661680",
    "end": "2668359"
  },
  {
    "text": "basically in compile time when we call the Nave tle size we will try to",
    "start": "2668359",
    "end": "2674200"
  },
  {
    "text": "instantiate our type with uh let uh and then we'll Supply it with ubic which is",
    "start": "2674200",
    "end": "2681520"
  },
  {
    "text": "a special structure which can implicitly convert to any type so what it does is basically that",
    "start": "2681520",
    "end": "2688079"
  },
  {
    "text": "we can try to instantiate in the beginning with one element if it fails we will add one more",
    "start": "2688079",
    "end": "2695880"
  },
  {
    "text": "one more one more until we find how many types we need to supply to initialize",
    "start": "2695880",
    "end": "2702599"
  },
  {
    "text": "and in this case like we will try it with one no structure requires more two",
    "start": "2702599",
    "end": "2708920"
  },
  {
    "text": "three and that's okay that has an issue this is has a complex uh memory",
    "start": "2708920",
    "end": "2714720"
  },
  {
    "text": "consumption and this is very naive never use that approach the real implementation is much harder it is how",
    "start": "2714720",
    "end": "2721319"
  },
  {
    "text": "it is okay now since we know that the tle size",
    "start": "2721319",
    "end": "2728000"
  },
  {
    "text": "we can write this Bower plate code so if it's size of one we can do the structure",
    "start": "2728000",
    "end": "2734960"
  },
  {
    "text": "bindings to get their value I can make a top all it and then we can take the type",
    "start": "2734960",
    "end": "2740400"
  },
  {
    "text": "or get the value if you want a lot of repeats but I think you",
    "start": "2740400",
    "end": "2745640"
  },
  {
    "text": "don't really need that much if you have a structure more than 10 elements I think you're doing something wrong so",
    "start": "2745640",
    "end": "2752040"
  },
  {
    "text": "that's okay actually there is another implementation in C++ 14 which doesn't require any magic like that like we do",
    "start": "2752040",
    "end": "2758720"
  },
  {
    "text": "have coner but I think it was deprecated from C++ 17 something look at the Anon",
    "start": "2758720",
    "end": "2765160"
  },
  {
    "text": "talks he he will go through it and explain everything so as for the name it's",
    "start": "2765160",
    "end": "2772280"
  },
  {
    "text": "exactly the same technique as we get the type name the only difference is that we accept the",
    "start": "2772280",
    "end": "2777680"
  },
  {
    "text": "pointer as a template argument so when you supply a pointer to the field you",
    "start": "2777680",
    "end": "2783599"
  },
  {
    "text": "will get this uh string which you can parse again and get the field name",
    "start": "2783599",
    "end": "2789000"
  },
  {
    "text": "that's it so the magic G has uh few",
    "start": "2789000",
    "end": "2794480"
  },
  {
    "text": "limitations it only Aggregates types without base classes it cannot work with con Fields with reference and",
    "start": "2794480",
    "end": "2802880"
  },
  {
    "text": "cray not a real reflection but kind of works there is another magic Library",
    "start": "2802880",
    "end": "2809640"
  },
  {
    "text": "which I will just briefly mention because it's use exactly the same things as type name or magic get uh just a",
    "start": "2809640",
    "end": "2816880"
  },
  {
    "text": "separate Library called Magic anom I will show you quickly we we're not going to implement because it's exactly the",
    "start": "2816880",
    "end": "2821960"
  },
  {
    "text": "same so what you can do you can define an enom you can have a variable like",
    "start": "2821960",
    "end": "2827480"
  },
  {
    "text": "color which is red and then you can get a name and you will get red the same it",
    "start": "2827480",
    "end": "2832760"
  },
  {
    "text": "will like uh give you a type name color and you can convert the from string to",
    "start": "2832760",
    "end": "2839359"
  },
  {
    "text": "the value it's uses the same techniques which we went through so nothing new",
    "start": "2839359",
    "end": "2845160"
  },
  {
    "text": "here so now let's try our reflection and uh see what we can do",
    "start": "2845160",
    "end": "2851319"
  },
  {
    "text": "with our dependency injection and kind of how we can par all this info so the first thing uh boost does",
    "start": "2851319",
    "end": "2859599"
  },
  {
    "text": "allow us to inheritance so let's drop the um the base class we can use typ",
    "start": "2859599",
    "end": "2865400"
  },
  {
    "text": "rati technique to combine all the components later if we need secondly we don't need any more",
    "start": "2865400",
    "end": "2871640"
  },
  {
    "text": "name function because it's just a class name right so we just drop that one",
    "start": "2871640",
    "end": "2877960"
  },
  {
    "text": "now when it comes to the dependencies what you provides and what you depends",
    "start": "2877960",
    "end": "2884559"
  },
  {
    "text": "on we cannot use boost P4 to parse that so we need to have a concrete type so",
    "start": "2884559",
    "end": "2889839"
  },
  {
    "text": "let's introduce a structure like provides and let's say that the unit",
    "start": "2889839",
    "end": "2895920"
  },
  {
    "text": "function actually return the type provides we can use function trays to parse the unit",
    "start": "2895920",
    "end": "2902040"
  },
  {
    "text": "function we can do exactly the same for Depends we can say we require something",
    "start": "2902040",
    "end": "2907640"
  },
  {
    "text": "in this case we don't require anything so it's empty so we can actually make it kind of optional we can just drop it",
    "start": "2907640",
    "end": "2914599"
  },
  {
    "text": "because we can we know how many arguments is there so we can use all of these techniques like type name to",
    "start": "2914599",
    "end": "2920000"
  },
  {
    "text": "obtain the name of the component function traes to parse the unit method and then boost P4 plus type name to par",
    "start": "2920000",
    "end": "2926880"
  },
  {
    "text": "provides and requires so this this is how the settings component would look like I",
    "start": "2926880",
    "end": "2932720"
  },
  {
    "text": "think it becomes a little bit less borderer plate code a lot of magic but still a little bit",
    "start": "2932720",
    "end": "2939119"
  },
  {
    "text": "less and we can apply the same for CTIC synchronizer which will basically look like this it has a requires it requires",
    "start": "2939119",
    "end": "2947400"
  },
  {
    "text": "to have a settings interface we have an unit function which accept the requires",
    "start": "2947400",
    "end": "2953040"
  },
  {
    "text": "and then we store it that's it so this is our two",
    "start": "2953040",
    "end": "2959078"
  },
  {
    "text": "components however we talked a little bit how to pass the dependencies right and oh no sorry I will talk about later",
    "start": "2960400",
    "end": "2967240"
  },
  {
    "text": "forget we'll show you what we can do at compile time we can create a mic manifest function and we pass the our",
    "start": "2967240",
    "end": "2974040"
  },
  {
    "text": "class at compile time we get the name we know how many dependencies",
    "start": "2974040",
    "end": "2979480"
  },
  {
    "text": "settings doesn't depend on anything so it's zero it provides one we can access",
    "start": "2979480",
    "end": "2985160"
  },
  {
    "text": "by index type I settings uh pointer and the name is settings so all of this",
    "start": "2985160",
    "end": "2992200"
  },
  {
    "text": "available at compile time you can work it with any regular type so which is quite",
    "start": "2992200",
    "end": "2999799"
  },
  {
    "text": "nice uh we can do the same for setting synchronizer component which is the name is as a class name it depends on one I",
    "start": "2999799",
    "end": "3008400"
  },
  {
    "text": "settings pointer name provides zero so now what",
    "start": "3008400",
    "end": "3013480"
  },
  {
    "text": "we could do is we can create another helper function I'm not going to go in details of these functions just doesn't",
    "start": "3013480",
    "end": "3018920"
  },
  {
    "text": "really matter but you can basically say I want to make a bundle of the components and",
    "start": "3018920",
    "end": "3024640"
  },
  {
    "text": "that would be your first product then you can initialize it and tear down if you want and then for example you can",
    "start": "3024640",
    "end": "3031359"
  },
  {
    "text": "create a second product which is basically only settings and you initialize and tear",
    "start": "3031359",
    "end": "3038000"
  },
  {
    "text": "down so basically you can group these components at compile time verify um basically what we can do",
    "start": "3038000",
    "end": "3047160"
  },
  {
    "text": "we can do compile time dependency resolution we can check if the properties mismatch if there is a",
    "start": "3047160",
    "end": "3052680"
  },
  {
    "text": "dependency Loop we can deduce intialization order and a gener as",
    "start": "3052680",
    "end": "3057760"
  },
  {
    "text": "Boulder plate code how hard it",
    "start": "3057760",
    "end": "3062920"
  },
  {
    "text": "is I think silence so it's hard one last magic trick I",
    "start": "3062920",
    "end": "3069599"
  },
  {
    "text": "promise and this is nothing to relate it to reflection or depend injection but it's more about like what else we can do",
    "start": "3070200",
    "end": "3078280"
  },
  {
    "text": "with modern C++ so we talked about like in in case of U",
    "start": "3078280",
    "end": "3086000"
  },
  {
    "text": "let me go back sorry too many yeah so if we look at the",
    "start": "3086000",
    "end": "3091079"
  },
  {
    "text": "setting synchronizer component it's the class itself kind of unworkable unless you call in it and you",
    "start": "3091079",
    "end": "3098040"
  },
  {
    "text": "just need to pass the like your dependencies it would be nice if I can somehow improve",
    "start": "3098040",
    "end": "3103880"
  },
  {
    "text": "it so let's go back uh or further oops too much so let's start to",
    "start": "3103880",
    "end": "3112119"
  },
  {
    "text": "look at our settings components and let's get rid of the class replace it with npace we will still get the name of",
    "start": "3112119",
    "end": "3119240"
  },
  {
    "text": "the module through the nums space and the type name will give you to you the problem is right now is that the",
    "start": "3119240",
    "end": "3126480"
  },
  {
    "text": "setting is kind of a global variable which is not cool so it would be nice if we put it inside our setup function and",
    "start": "3126480",
    "end": "3134160"
  },
  {
    "text": "you see the code is now much more elegant and less however there is an issue right the settings is returning a",
    "start": "3134160",
    "end": "3141079"
  },
  {
    "text": "temper a pointer to a temper right it doesn't work it would be so cool if somehow we can prolong the lifetime of",
    "start": "3141079",
    "end": "3147839"
  },
  {
    "text": "this settings so we kind of and we also I dro the tear down function meanwhile",
    "start": "3147839",
    "end": "3153319"
  },
  {
    "text": "right because it would be nice if we can do everything inside of this one",
    "start": "3153319",
    "end": "3159079"
  },
  {
    "text": "function and I will just show the the answer to that we can use",
    "start": "3159079",
    "end": "3164319"
  },
  {
    "text": "cor uh I know that cortin is the big topic and every conference have it I",
    "start": "3164319",
    "end": "3169760"
  },
  {
    "text": "actually wanted to reference somebody from here but seems like this is the time there is no courin talks I quite",
    "start": "3169760",
    "end": "3175440"
  },
  {
    "text": "surprise but the point is that what we do is we use co co is a suspension Point",
    "start": "3175440",
    "end": "3183240"
  },
  {
    "text": "everything before is initialized coiled then we suspend return the value to the",
    "start": "3183240",
    "end": "3188440"
  },
  {
    "text": "caller and then when the caller call next time I can do a tear down so now technically we have a",
    "start": "3188440",
    "end": "3195359"
  },
  {
    "text": "function which can say what it requires and what it provides in one place um all",
    "start": "3195359",
    "end": "3201720"
  },
  {
    "text": "the local variables leave until the core return happens so until they end there's no memory Le",
    "start": "3201720",
    "end": "3207480"
  },
  {
    "text": "it's quite simple to write this quite simple to copy paste such things create",
    "start": "3207480",
    "end": "3212720"
  },
  {
    "text": "modules yeah and if you still doesn't understand how it works so you have a lot of questions I just referen talks",
    "start": "3212720",
    "end": "3219319"
  },
  {
    "text": "from te toown which was about cortines but go on YouTube Just Google C++ cortines I think you will find a lot",
    "start": "3219319",
    "end": "3226680"
  },
  {
    "text": "of talks how the thing works maybe you will find some of them which actually helps you to understand how it",
    "start": "3226680",
    "end": "3232920"
  },
  {
    "text": "works but yeah so basically our modules could look look like",
    "start": "3232920",
    "end": "3238200"
  },
  {
    "text": "this so uh one setup function and then you explicitly say are you requiring",
    "start": "3238200",
    "end": "3243400"
  },
  {
    "text": "something or you depend or you provide something and then at compile time it's",
    "start": "3243400",
    "end": "3248440"
  },
  {
    "text": "exactly the same information instead of passing the class you just pass a",
    "start": "3248440",
    "end": "3253480"
  },
  {
    "text": "function and uh the same applies for setting synchronizer the name will be",
    "start": "3253480",
    "end": "3258880"
  },
  {
    "text": "changed because uh we will get as a type name we will get the columns so we can replace them",
    "start": "3258880",
    "end": "3265040"
  },
  {
    "text": "at compile time to something else I just did the dash but doesn't really matter and it works exactly the same if you",
    "start": "3265040",
    "end": "3272599"
  },
  {
    "text": "don't know what's inside you would think that this is just a regular C++ I would",
    "start": "3272599",
    "end": "3279240"
  },
  {
    "text": "say so by using di uh depense injection reflection in corins we get the same",
    "start": "3279240",
    "end": "3285160"
  },
  {
    "text": "benefits of compile time dependency resolution and we get kind of even less Boulder",
    "start": "3285160",
    "end": "3290839"
  },
  {
    "text": "plate and uh if you want to play with that I will publish a small prototype",
    "start": "3290839",
    "end": "3296079"
  },
  {
    "text": "later today I didn't manage to fix all the compilers on a different systems but",
    "start": "3296079",
    "end": "3301599"
  },
  {
    "text": "I will do it later that's all for me if you have any questions oh yeah you was want to take a",
    "start": "3301599",
    "end": "3307720"
  },
  {
    "text": "picture yes if you have any questions",
    "start": "3307720",
    "end": "3313400"
  },
  {
    "text": "should if no then I have these links which I use to learn all of these things",
    "start": "3313400",
    "end": "3320440"
  },
  {
    "text": "so really recommend to watch all of these talks thank you so much",
    "start": "3320440",
    "end": "3327920"
  }
]