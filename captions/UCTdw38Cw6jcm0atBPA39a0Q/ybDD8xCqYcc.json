[
  {
    "text": "cool hey everyone thanks for making it in this morning I know you know coming into the early sessions",
    "start": "9020",
    "end": "15950"
  },
  {
    "text": "isn't always the easiest to do so thank you for finding some time to come hang out with me and we'll talk a bit you",
    "start": "15950",
    "end": "21560"
  },
  {
    "text": "know about Colin and then a bit about c-sharp you know when I do this talk it feels a little more natural to sort of",
    "start": "21560",
    "end": "28279"
  },
  {
    "text": "do it as a conversation because it's all sort of built around my experience being a c-sharp developer learning kata and",
    "start": "28279",
    "end": "34040"
  },
  {
    "text": "learning what I can build with it learning how to build with it sort of comparing and contrasting a lot of that",
    "start": "34040",
    "end": "39079"
  },
  {
    "text": "so sort of as you guys are following along with me as I do some of these comparing contrasting if you have",
    "start": "39079",
    "end": "44600"
  },
  {
    "text": "questions or anything at all throw your hand up I'm happy to answer them sort of on the spot if it's something that I'm",
    "start": "44600",
    "end": "49699"
  },
  {
    "text": "gonna get to later you know we'll we'll talk about that when we get there but I'll also sort of ask you questions for",
    "start": "49699",
    "end": "55309"
  },
  {
    "text": "to gauge where you guys are at in terms of what you use C sharp for what you're interested in using Colin for so yeah so",
    "start": "55309",
    "end": "61879"
  },
  {
    "text": "I'm Alex done on the Internet I'm not Alex done you'll find me a suave pirate because my name is so basic in the US",
    "start": "61879",
    "end": "69710"
  },
  {
    "text": "that I'm not the only Alex done that works with Microsoft technology so even",
    "start": "69710",
    "end": "75380"
  },
  {
    "text": "if you look up Alex Dunn Microsoft there's like three devs at Microsoft named Alex Dunn so when I was like",
    "start": "75380",
    "end": "80840"
  },
  {
    "text": "alright I'm gonna start having an internet presence I started looking up how I can use my name and stuff like that nothing without a ridiculous",
    "start": "80840",
    "end": "87440"
  },
  {
    "text": "combination of numbers and letters at the end so I use a name generator I",
    "start": "87440",
    "end": "92600"
  },
  {
    "text": "wrote when I was like eight years old boom suave pirate so if you need to find you'll find me there I'm a Microsoft MVP",
    "start": "92600",
    "end": "99110"
  },
  {
    "text": "for dotnet technology so all the the dev tools and stuff like that hence the sort of background in the C sharp space and",
    "start": "99110",
    "end": "105770"
  },
  {
    "text": "I'm also a Pluralsight author and you know I'll talk about my course towards the end but most of my Pluralsight",
    "start": "105770",
    "end": "111110"
  },
  {
    "text": "content is around Kotlin so you can sort of see how doing a lot of dotnet work a lot of c-sharp work a lot of column work",
    "start": "111110",
    "end": "117470"
  },
  {
    "text": "I sort of have both aspects that make it really interesting to come do these talks and introduce a new language so",
    "start": "117470",
    "end": "124430"
  },
  {
    "text": "those of you who haven't used it before so I want to sort of preface a little bit that this isn't a hey ditch c-sharp",
    "start": "124430",
    "end": "132319"
  },
  {
    "text": "and use Collins Collins the new and hot language and it's definitely not I'm gonna prove that Kotlin sucks and",
    "start": "132319",
    "end": "137510"
  },
  {
    "text": "c-sharp is still awesome I want to sort of lift both languages up because a lot of them a lot of the features that you",
    "start": "137510",
    "end": "143240"
  },
  {
    "text": "know you sort of see in both languages and we'll get into this quite a bit are very similar and they're both awesome",
    "start": "143240",
    "end": "149380"
  },
  {
    "text": "and we can do a lot with both languages and I'm hoping in the future potentially",
    "start": "149380",
    "end": "154930"
  },
  {
    "text": "use them actually together which would be pretty cool so to be a little",
    "start": "154930",
    "end": "161110"
  },
  {
    "text": "specific I'm talking about column 1.3 this is a more recent release so you know it's it's been interesting as I've",
    "start": "161110",
    "end": "166750"
  },
  {
    "text": "sort of run this talk over the last you know year and a half I've got to sort of build on it quite a bit because Collins",
    "start": "166750",
    "end": "172600"
  },
  {
    "text": "growing crazy fast they're throwing features out like every like three months or something like that when they're doing these minor releases so",
    "start": "172600",
    "end": "178990"
  },
  {
    "text": "it's been cool being like oh I can add this and I can compare how I would do that in c-sharp versa Scotland and now you know c-sharp is also growing really",
    "start": "178990",
    "end": "185530"
  },
  {
    "text": "fast I don't know if any of you guys have messed with all the c-sharp eight features we'll talk a little bit about that towards sort of the end but there's",
    "start": "185530",
    "end": "192550"
  },
  {
    "text": "a lot of sort of paradigm between the two and they both grow crazy fast so how many of you guys have actually used",
    "start": "192550",
    "end": "198340"
  },
  {
    "text": "Kotlin before or even know what it is that's actually not bad most of times it's like someone's like it's me how",
    "start": "198340",
    "end": "204760"
  },
  {
    "text": "many you guys didn't know Collin was a programming language before you walked in this room there it is yeah every time",
    "start": "204760",
    "end": "210790"
  },
  {
    "text": "someone's like alright I'm gonna learn about this Collin framework and write dotnet no no we're talking about a whole new language here so let me intro to",
    "start": "210790",
    "end": "218380"
  },
  {
    "text": "Collin a little bit Collin is a statically typed language it was originally written for the JVM and it",
    "start": "218380",
    "end": "224920"
  },
  {
    "text": "sort of when I was introduced to Collin everyone was saying this is what's finally gonna make you not have to write Java ever again so I was like alright",
    "start": "224920",
    "end": "231760"
  },
  {
    "text": "I'm invested already it's but it's it's written quite a bit differently and and you'll see that as we get to the",
    "start": "231760",
    "end": "237250"
  },
  {
    "text": "examples but you can write it with a lot of object-oriented style to what it sort of roots are in you can also write",
    "start": "237250",
    "end": "242560"
  },
  {
    "text": "functional style programming with Kotlin which we don't necessarily cover in this because again we're sort of comparing",
    "start": "242560",
    "end": "247570"
  },
  {
    "text": "c-sharp but definitely something worth worth looking into and like I said it runs on the JVM but",
    "start": "247570",
    "end": "253600"
  },
  {
    "text": "it does also have a lot of cross compilation capability so you can actually compile content to JavaScript",
    "start": "253600",
    "end": "259630"
  },
  {
    "text": "and you can compile it to native which sort of expands the horizons of it quite a bit which is pretty cool so column was",
    "start": "259630",
    "end": "265930"
  },
  {
    "text": "invented with pretty pretty sort of distinct set of expectations right so it",
    "start": "265930",
    "end": "273430"
  },
  {
    "text": "wasn't just there to be another language it wasn't just there to also get rid of Java but it was there to help reduce the",
    "start": "273430",
    "end": "279250"
  },
  {
    "text": "verbosity that a lot of Java developers have to through how many you guys have written Java in the last like 10 years or so",
    "start": "279250",
    "end": "285509"
  },
  {
    "text": "yeah see how many of you guys enjoyed writing Java in the last 10 years or so",
    "start": "285509",
    "end": "291569"
  },
  {
    "text": "okay most of you guys are in the right place then because we're gonna talk a lot of trash about Java today so again",
    "start": "291569",
    "end": "297580"
  },
  {
    "text": "the goal is to reduce verbosity so we're gonna write more efficient code it's still gonna be easy to read you know",
    "start": "297580",
    "end": "302650"
  },
  {
    "text": "it's not like we're going in and reading racket and there's parentheses everywhere or anything like objective-c which is just terrifying to look at if",
    "start": "302650",
    "end": "309310"
  },
  {
    "text": "you didn't write the code but it's there to support many different styles - like I said you can write object-oriented",
    "start": "309310",
    "end": "314590"
  },
  {
    "text": "Kotlin you can write functional Kotlin you can write procedural if you're into that and with all of the sort of reduced",
    "start": "314590",
    "end": "320919"
  },
  {
    "text": "verbosity and the ability to support all these different styles and preferences it still needs to support backwards",
    "start": "320919",
    "end": "326800"
  },
  {
    "text": "compatibility which means you get a hundred percent interoperability with java with anything that runs on the JVM",
    "start": "326800",
    "end": "332710"
  },
  {
    "text": "so you can write you know interconnect your java your scala your Kotlin your closure if you're into that and the goal",
    "start": "332710",
    "end": "339250"
  },
  {
    "text": "being like let's just write more code let's write it faster let's get stuff out you know we sort of live in a crazy",
    "start": "339250",
    "end": "344409"
  },
  {
    "text": "fast-paced software world right now and Kotlin does a great job and making it a bit easier to just get stuff out that's",
    "start": "344409",
    "end": "351280"
  },
  {
    "text": "written well and written strongly so I like to talk about this there's this concept in psychology called speech",
    "start": "351280",
    "end": "357699"
  },
  {
    "text": "convergence it basically is like when you put someone in an environment where someone speaks either with a different",
    "start": "357699",
    "end": "363940"
  },
  {
    "text": "accent or a different language they sort of tend to fall into that accident when communicating with that person and you",
    "start": "363940",
    "end": "369909"
  },
  {
    "text": "guys that have talked to me you might have noticed me really struggling not to like sort of copy your accent I don't",
    "start": "369909",
    "end": "375250"
  },
  {
    "text": "necessarily mean to mock it but I'm super bad at this but we find it interesting you know looking at sort of the newer programming languages that",
    "start": "375250",
    "end": "381610"
  },
  {
    "text": "come up they take the routes in other languages and you can sort of see as new features are built for one another ones",
    "start": "381610",
    "end": "387039"
  },
  {
    "text": "falling right up maybe they do something slightly different and I see a lot of that with c-sharp and Colin at least from my observations but Kotlin",
    "start": "387039",
    "end": "393580"
  },
  {
    "text": "straight-up says that it brings in a lot of inspiration from languages obviously like Java explicitly c-sharp javascript",
    "start": "393580",
    "end": "399969"
  },
  {
    "text": "in scala and groovy and also typescript as well so if any of you guys are in typescript you're gonna see a lot of",
    "start": "399969",
    "end": "405669"
  },
  {
    "text": "similarities and sort of the typing styles and stuff like that and it's actually how they get stuff to work as a",
    "start": "405669",
    "end": "411389"
  },
  {
    "text": "compilation from Kotlin to JavaScript with type safety pull in type script types which is",
    "start": "411389",
    "end": "417100"
  },
  {
    "text": "pretty cool so to start I want to do some sort of side-by-side so we're gonna",
    "start": "417100",
    "end": "422110"
  },
  {
    "text": "look at the sort of the foundational stuff you'll see c-sharp you'll see Kotlin and i want to just sort of get",
    "start": "422110",
    "end": "427270"
  },
  {
    "text": "you guys understanding what the basics are and then we'll talk about some of the platforms that they support why you",
    "start": "427270",
    "end": "432280"
  },
  {
    "text": "might actually be interested in using it and then we'll sort of do a little bit of a deeper dive into the really cool stuff all right first things first let's",
    "start": "432280",
    "end": "441700"
  },
  {
    "text": "look at a poco rights the sort of the foundation of our c-sharp it's the foundation of our java it's our basic",
    "start": "441700",
    "end": "448420"
  },
  {
    "text": "super basic class right plain ol CLR object or in this case plain old Java our plain old Collin object so I'm a big",
    "start": "448420",
    "end": "454810"
  },
  {
    "text": "dog fan I sort of started a Rescue League and stuff like that so all of",
    "start": "454810",
    "end": "460300"
  },
  {
    "text": "this stuff is gonna be dog related so just prepare yourself for that so we have a class named dog it's got a",
    "start": "460300",
    "end": "465610"
  },
  {
    "text": "name it's got an age and it's got a breed property super basic and c-sharp we use these all the time in Kotlin this",
    "start": "465610",
    "end": "472360"
  },
  {
    "text": "is sort of what the same thing would look like we have our class dog it's got these three properties name age breed",
    "start": "472360",
    "end": "477490"
  },
  {
    "text": "you'll notice the camelcase naming convention I'm sorry if you don't like that that's too bad one of the other",
    "start": "477490",
    "end": "482920"
  },
  {
    "text": "things you'll probably notice right away is that we actually have explicit null reference types so something that came",
    "start": "482920",
    "end": "489250"
  },
  {
    "text": "out in c-sharp 8:4 knowable reference types is default in Kotlin there's no",
    "start": "489250",
    "end": "494260"
  },
  {
    "text": "way around it so you have to initialize something either in the constructor or in the properties declaration so in this",
    "start": "494260",
    "end": "500110"
  },
  {
    "text": "case all of these are knowable types were initializing them with null there's a few different ways you could do this I",
    "start": "500110",
    "end": "505180"
  },
  {
    "text": "won't get into that but for the sake of the you know seeing them side by side that's what we're looking at so when",
    "start": "505180",
    "end": "511990"
  },
  {
    "text": "we're constructing our objects we need to have the same properties and we also need to have the ability to override",
    "start": "511990",
    "end": "517930"
  },
  {
    "text": "those same constructors so in this case we have our default constructor and then we have another one that takes in all",
    "start": "517930",
    "end": "523360"
  },
  {
    "text": "the properties and then we're setting them right in Kotlin our default constructor is actually defined in the",
    "start": "523360",
    "end": "529090"
  },
  {
    "text": "signature which you may have noticed in the previous slide when we had the sort of open and closed parens it's not",
    "start": "529090",
    "end": "534910"
  },
  {
    "text": "required if you are only going to do a default constructor with no parameters",
    "start": "534910",
    "end": "540310"
  },
  {
    "text": "but when we override our overload constructors rather we need to just",
    "start": "540310",
    "end": "545470"
  },
  {
    "text": "define constructor passing the parameters just like you sort of see in c-sharp this is some to other languages to JavaScript class",
    "start": "545470",
    "end": "551839"
  },
  {
    "text": "constructors can look like this and then the same thing properties all the way down Kotlin also has this concept of",
    "start": "551839",
    "end": "558199"
  },
  {
    "text": "data classes and you guys go to the the.net panel yesterday with with Damian",
    "start": "558199",
    "end": "564949"
  },
  {
    "text": "and and David Fowler and stuff like that someone asked sort of at the end you know winner record classes coming right",
    "start": "564949",
    "end": "571699"
  },
  {
    "text": "and they were supposed to be in c-sharp eight that got punted back we have the idea of records in in Kotlin and we call",
    "start": "571699",
    "end": "578660"
  },
  {
    "text": "them data classes and it's the same as any other class except you slap the data in front of it and then in the",
    "start": "578660",
    "end": "583819"
  },
  {
    "text": "constructor you're actually defining your properties and the constructor at the same time so this is this whole top",
    "start": "583819",
    "end": "590810"
  },
  {
    "text": "line here is an actual class declaration it's the definition and it's the constructor to create it which is really",
    "start": "590810",
    "end": "596750"
  },
  {
    "text": "cool and it's used a lot you can use this without data classes too you can sort of just define properties in the",
    "start": "596750",
    "end": "602060"
  },
  {
    "text": "constructor by just giving you either valid var or something like that and then we just construct it like this when we have a data class we get the",
    "start": "602060",
    "end": "608660"
  },
  {
    "text": "hash set automatically we get copy automatically similar to doing stuff with structs and c-sharp but we do get a",
    "start": "608660",
    "end": "614360"
  },
  {
    "text": "bit more - one of the other things you might have noticed is that we have this sort of concept of Val versus var and",
    "start": "614360",
    "end": "620810"
  },
  {
    "text": "this is also something that's pretty unique to Kotlin so var being a variable and Val being a value is similar to",
    "start": "620810",
    "end": "626480"
  },
  {
    "text": "having a read-only property and c-sharp except that Val and var is sort of a concept exists everywhere so it's more",
    "start": "626480",
    "end": "634040"
  },
  {
    "text": "like having Constable's var in JavaScript if you're familiar with that so value can only be set once when it's",
    "start": "634040",
    "end": "640430"
  },
  {
    "text": "initialized if you aren't initializing you're gonna get a compiler error if you try to change it you're gonna get a",
    "start": "640430",
    "end": "645649"
  },
  {
    "text": "compiler error before you can set it at sort of any time but it does still need to be initialized at the beginning",
    "start": "645649",
    "end": "652250"
  },
  {
    "text": "that's just how everything in Collin works so in this case you know we have our our var name which can be set again",
    "start": "652250",
    "end": "658250"
  },
  {
    "text": "and we also have the value read-only name and then in this sort of bark function we are trying to set the valve",
    "start": "658250",
    "end": "664880"
  },
  {
    "text": "to something else and that's not going to work when we set it at the bottom but we can set down sound to which is a",
    "start": "664880",
    "end": "671480"
  },
  {
    "text": "variable - something else totally fine so for those of you who have written",
    "start": "671480",
    "end": "677000"
  },
  {
    "text": "Java you probably know that getters and setters don't exist and we have to write and do our capsule",
    "start": "677000",
    "end": "683130"
  },
  {
    "text": "manually we have to have our private properties or private fields and then we have to explicitly write getter",
    "start": "683130",
    "end": "688230"
  },
  {
    "text": "functions and setter functions in c-sharp we have the awesome ability to write getters and setters which at",
    "start": "688230",
    "end": "694710"
  },
  {
    "text": "compile time actually build the same similar methods behind the scenes with sort of the get underscore and the name",
    "start": "694710",
    "end": "700170"
  },
  {
    "text": "of the property but in Colin we also get the same thing and this actually does some pretty cool cross compatibility",
    "start": "700170",
    "end": "706500"
  },
  {
    "text": "stuff in order to get this to work in Java right so everything that we're seeing happening right now in Kotlin",
    "start": "706500",
    "end": "712350"
  },
  {
    "text": "always still has to work when we're consuming in Java so although we have a property here called age and it only has",
    "start": "712350",
    "end": "718350"
  },
  {
    "text": "a getter when we look at this and try to access it in Java we're actually going to have a generated function called get",
    "start": "718350",
    "end": "726300"
  },
  {
    "text": "age just like you'd expect in sort of the similar Java syntax so not only is it make it cross compatibility across",
    "start": "726300",
    "end": "732630"
  },
  {
    "text": "compatible but we also actually get like the sort of Java convention of getting",
    "start": "732630",
    "end": "737940"
  },
  {
    "text": "and setting properties with the same naming convention everything which is a pretty neat solution they had put together so in this case you know we",
    "start": "737940",
    "end": "744270"
  },
  {
    "text": "have our dog with a a int age which is doing a little bit of a calculation based off of the current date and then",
    "start": "744270",
    "end": "750870"
  },
  {
    "text": "their birthday day time and then on the same side and column we're doing the same thing we're doing it yet except you",
    "start": "750870",
    "end": "756390"
  },
  {
    "text": "know Java doesn't have a very good date object so we're working with that sort of trash and then doing a whole bunch of",
    "start": "756390",
    "end": "762600"
  },
  {
    "text": "actual math to calculate the difference but same idea so sort of one of the last",
    "start": "762600",
    "end": "768540"
  },
  {
    "text": "few things I want to talk about in the basics is just methods and functions so in this case we have a dog adoption service it's a class it has two",
    "start": "768540",
    "end": "776220"
  },
  {
    "text": "different methods it has a void method which is just called adopt dog it's not going to return anything and then we",
    "start": "776220",
    "end": "782340"
  },
  {
    "text": "have our our method called adopter that actually returns an object or item that the object is defined below in in Kotlin",
    "start": "782340",
    "end": "789690"
  },
  {
    "text": "we have functions which we just call fun because functions are fun they get to do all the cool stuff so in this case we",
    "start": "789690",
    "end": "795300"
  },
  {
    "text": "have another data class up top again you can sort of see the verbosity in terms of like look at how big this C sharp",
    "start": "795300",
    "end": "800610"
  },
  {
    "text": "object is written versus literally three lines of code that could actually still be one line of code and Kotlin which is",
    "start": "800610",
    "end": "807540"
  },
  {
    "text": "pretty cool and then we have our different funds all the way down as you can sort of see how they're executed one",
    "start": "807540",
    "end": "813089"
  },
  {
    "text": "other thing you're going to notice here is that the Constructors in don't use new at all we just call the",
    "start": "813089",
    "end": "819810"
  },
  {
    "text": "name of the class with the parens we understand that it's a constructor why do we have to use the new keyword everywhere we don't need to read so much",
    "start": "819810",
    "end": "826560"
  },
  {
    "text": "while we're writing our code which is pretty cool another cool thing that c-sharp does is Lok no coalescing and",
    "start": "826560",
    "end": "832170"
  },
  {
    "text": "propagation so we have both of those great features so in this case we're looking at the same dog we have the",
    "start": "832170",
    "end": "838290"
  },
  {
    "text": "breed lifespan and then sort of the dangerous life span where the life span is is checking that that breed object is",
    "start": "838290",
    "end": "843570"
  },
  {
    "text": "not null and then checking the average life span and if not we're gonna return zero instead we also have the dangerous",
    "start": "843570",
    "end": "850320"
  },
  {
    "text": "one in which case we're actually going to assume breed is not null if it is we're gonna get a null reference",
    "start": "850320",
    "end": "855480"
  },
  {
    "text": "exception when we try to access that in Kotlin because we have noble reference types from the beginning we have to",
    "start": "855480",
    "end": "861660"
  },
  {
    "text": "explicitly check whether it's not null or it is no we make the assumption we make it clear that in this dangerous",
    "start": "861660",
    "end": "868050"
  },
  {
    "text": "lifespan getter breed better not be null and it's actually a nice sort of signal when you're reading the code to go okay",
    "start": "868050",
    "end": "874890"
  },
  {
    "text": "I know sort of the dangerous path I'm taking here I know what I'm playing with I can work under the assumption that",
    "start": "874890",
    "end": "881550"
  },
  {
    "text": "breeds not going to be no but every time I'm sort of reading through that code I'm gonna see the double bang there and",
    "start": "881550",
    "end": "887130"
  },
  {
    "text": "know that I'm making that assumption on making it hard but we get the same sort of question mark for the the propagation",
    "start": "887130",
    "end": "892500"
  },
  {
    "text": "that can go through and then the only other sort of naming convention thing is instead of the double question marks of the double ha we get the question mark",
    "start": "892500",
    "end": "899100"
  },
  {
    "text": "and then the colon to do sort of the same thing it's more like a in-between turn area that they do so any questions",
    "start": "899100",
    "end": "906120"
  },
  {
    "text": "on sort of the side-by-sides if now I'm gonna sort of compare and contrast the platform's that we can build for and",
    "start": "906120",
    "end": "912450"
  },
  {
    "text": "then we'll get into sort of the juicy bits of the code now cool so a lot of",
    "start": "912450",
    "end": "920430"
  },
  {
    "text": "these are my opinions or sort of what I see in terms of trends but I sort of want to highlight what are kind of the",
    "start": "920430",
    "end": "926100"
  },
  {
    "text": "primary developer platforms for c-sharp do then do the same thing for Kotlin in",
    "start": "926100",
    "end": "931230"
  },
  {
    "text": "terms of what they're pushing and then also talk a little bit about Kotlin sort of goals and making sort of this Colin",
    "start": "931230",
    "end": "937710"
  },
  {
    "text": "everywhere work which is it's just really cool so I always think of asp.net",
    "start": "937710",
    "end": "942720"
  },
  {
    "text": "sort of the primary thing that I see people using c-sharp for most of my friends who are c-sharp developers are",
    "start": "942720",
    "end": "948840"
  },
  {
    "text": "writing stuff in asp.net core how many of you guys use ASP - hey speed on a core or even asp.net like everyday",
    "start": "948840",
    "end": "955590"
  },
  {
    "text": "yeah exactly I figured I figured a lot of you would how about cloud apps so writing functions running background jobs doing",
    "start": "955590",
    "end": "962080"
  },
  {
    "text": "stuff in Azure that's not necessarily just a web app how many you guys are out there doing that with c-sharp okay a",
    "start": "962080",
    "end": "968140"
  },
  {
    "text": "little bit less my calculations are right what about windows developers winforms WPF uwp anything like that",
    "start": "968140",
    "end": "974440"
  },
  {
    "text": "closer and how about xamarin does where are my xamarin people at I love you guys",
    "start": "974440",
    "end": "981600"
  },
  {
    "text": "all right Kotlin has a number of different platforms like we talked about sort of along the same lines you can use",
    "start": "981600",
    "end": "987640"
  },
  {
    "text": "the spring MVC framework which is a Java framework or you can use from the Kotlin team this this project called case Orage",
    "start": "987640",
    "end": "993670"
  },
  {
    "text": "is like it's ridiculous it does a lot of sort of server and client side communications we're actually writing",
    "start": "993670",
    "end": "999250"
  },
  {
    "text": "Kotlin for javascript that gets compiled you also have Kotlin for the backend and you have sort of your api is and",
    "start": "999250",
    "end": "1005370"
  },
  {
    "text": "everything else it's really cool those of you who have used column the like four of you that are in here and if you",
    "start": "1005370",
    "end": "1010860"
  },
  {
    "text": "guys mess with that stuff yet or is it all Android dev yeah I figured okay same",
    "start": "1010860",
    "end": "1016140"
  },
  {
    "text": "thing with cloud apps if anyone's using AWS Kotlin is in and especially GCP colin is finally sort of like coming up",
    "start": "1016140",
    "end": "1023520"
  },
  {
    "text": "as like a pariah at form to write code for mostly because it's all the same",
    "start": "1023520",
    "end": "1028770"
  },
  {
    "text": "stuff for JVM they're just having to compile it and run it in the same places you always have and sort of the big one",
    "start": "1028770",
    "end": "1033839"
  },
  {
    "text": "that I see and this is how I got introduced to Colin was with Android development and about two years ago at",
    "start": "1033839",
    "end": "1039030"
  },
  {
    "text": "Google i/o Google had announced that Colin is finally going to be one of the official supported program and languages",
    "start": "1039030",
    "end": "1044850"
  },
  {
    "text": "for Android development which is really cool how many you guys have done native Android development with Java before and",
    "start": "1044850",
    "end": "1050730"
  },
  {
    "text": "how many of you guys have started to do it with Colin see this is where this is",
    "start": "1050730",
    "end": "1055830"
  },
  {
    "text": "this is a transition I want you guys to make if you have to do it again so there's a lot of other platforms both of",
    "start": "1055830",
    "end": "1062010"
  },
  {
    "text": "those supports let's go through some of the lists in in c-sharp so I would see we can write stuff on the edge with c-sharp you can do it with uwp embedded",
    "start": "1062010",
    "end": "1069570"
  },
  {
    "text": "you can do with some of the new stuff I don't know if anyone's been following the the the meadow work that they're",
    "start": "1069570",
    "end": "1075240"
  },
  {
    "text": "doing with the new boards and stuff like that which is pretty insane I'm sort of heavily invested in that I'm really",
    "start": "1075240",
    "end": "1081540"
  },
  {
    "text": "waiting for my stuff to come in to do some more IOT and c-sharp unity we can build really great games in",
    "start": "1081540",
    "end": "1087240"
  },
  {
    "text": "c-sharp we have the original mono which is still very relevant and sort of the backbone of everything from xamarin we",
    "start": "1087240",
    "end": "1093390"
  },
  {
    "text": "have uno which is a newer platform to sort of bring uwp everywhere that still lives sort of on top of xamarin same",
    "start": "1093390",
    "end": "1099090"
  },
  {
    "text": "idea and of course blazer how many of you guys have gone any of the Blazer talks here or taking a look at blazer if",
    "start": "1099090",
    "end": "1105930"
  },
  {
    "text": "you haven't I recommend it it's it's pretty insane being able to write webassembly in c-sharp it feels like",
    "start": "1105930",
    "end": "1111930"
  },
  {
    "text": "Silverlight but it's not Silverlight so everything's okay so Kotlin also supports a number of",
    "start": "1111930",
    "end": "1117480"
  },
  {
    "text": "platforms and sort of the what I see is the priority is iOS and I'll show you in a little bit sort of what I mean with",
    "start": "1117480",
    "end": "1124200"
  },
  {
    "text": "they're pushing iOS is an actual platform to build for and like I said before we can also compile the JavaScript so that's a pretty important",
    "start": "1124200",
    "end": "1131100"
  },
  {
    "text": "platform to build for and then anything native that's using the low-level virtual machine so we can compile it run",
    "start": "1131100",
    "end": "1137400"
  },
  {
    "text": "it on the LLVM anything we're writing a Colin can now basically run anywhere and then of course anywhere where there's a",
    "start": "1137400",
    "end": "1143370"
  },
  {
    "text": "JVM how many of you guys have had to install Java and you see running on a hundred bajillion devices worldwide all those",
    "start": "1143370",
    "end": "1150060"
  },
  {
    "text": "places can also run Kotlin so sort of looking at that list",
    "start": "1150060",
    "end": "1155520"
  },
  {
    "text": "the only platforms that like one supports that the other doesn't in one way or another is like Windows you can't",
    "start": "1155520",
    "end": "1161160"
  },
  {
    "text": "really do Colin for Windows yet and JVM we can't really compile C sharp and run",
    "start": "1161160",
    "end": "1167940"
  },
  {
    "text": "out on the JVM yet and I can't wait to talk about that with some of the stuff and on at 5 but that leaves like",
    "start": "1167940",
    "end": "1173670"
  },
  {
    "text": "literally everything else that both of these can support so I think it's important to know that you know we actually have options with people that",
    "start": "1173670",
    "end": "1179910"
  },
  {
    "text": "want to write with good programming languages if we want to stick to c-sharp we can do that if we need to venture off",
    "start": "1179910",
    "end": "1184980"
  },
  {
    "text": "and someone's like hey I really need you to work on this Java thing you can be like I'm not gonna work on this Java thing gonna work on this Kotlin thing",
    "start": "1184980",
    "end": "1191280"
  },
  {
    "text": "and it's gonna be good and you're gonna be able to read it and understand what's going on so cool any questions about any",
    "start": "1191280",
    "end": "1197340"
  },
  {
    "text": "of the platforms or any reason why you might want to write in Kotlin cool so",
    "start": "1197340",
    "end": "1204930"
  },
  {
    "text": "let's get back into the code then I want to talk about object-oriented programming it's a very important aspect",
    "start": "1204930",
    "end": "1210330"
  },
  {
    "text": "in c-sharp especially compared to some of the other CLR dotnet languages and so",
    "start": "1210330",
    "end": "1216150"
  },
  {
    "text": "I want to compare that obviously in this talk to and it's object-oriented routes so although I mentioned that Kotlin does",
    "start": "1216150",
    "end": "1222720"
  },
  {
    "text": "support functional programming I want to sort of like stray away from that let's focus in on on the object-oriented bits",
    "start": "1222720",
    "end": "1229470"
  },
  {
    "text": "and then we'll sort of compare and contrast that deeper into some of the cooler features that they both have so old slide you guys have seen this the",
    "start": "1229470",
    "end": "1237210"
  },
  {
    "text": "sort of foundation that we need is an object and so we have the ability to define our class but let's make sure we",
    "start": "1237210",
    "end": "1242430"
  },
  {
    "text": "can actually fill in sort of the four or three depending on who you talk to pillars of object-oriented programming",
    "start": "1242430",
    "end": "1248550"
  },
  {
    "text": "so let's go back into your computer science days and talk about abstraction we need to be able to create and handle",
    "start": "1248550",
    "end": "1257160"
  },
  {
    "text": "inheritance we need to be able to do encapsulation we need to control what properties are classes functions or",
    "start": "1257160",
    "end": "1263280"
  },
  {
    "text": "methods are accessible by what or by who we probably morphism we need inheritance",
    "start": "1263280",
    "end": "1268830"
  },
  {
    "text": "and we have all of those with both of them and one of the core things in order to support this and I'm gonna sort of go",
    "start": "1268830",
    "end": "1275510"
  },
  {
    "text": "sort of route feature by route feature here but the first one I always think of is interfaces so in order to support",
    "start": "1275510",
    "end": "1281580"
  },
  {
    "text": "things like polymorphism we need to be able to define interfaces and so in c-sharp we can do that our interfaces",
    "start": "1281580",
    "end": "1288120"
  },
  {
    "text": "are simply contracts at least in c-sharp 7 we don't have default implementations we can do default implementations in",
    "start": "1288120",
    "end": "1294840"
  },
  {
    "text": "c-sharp 8 and I'll show an example of that later but in this example we have our I adoption service and we have our",
    "start": "1294840",
    "end": "1300720"
  },
  {
    "text": "two methods one that's called adopt dogs takes in a dog one that's adopt dogs and it takes in a list of dogs and then we",
    "start": "1300720",
    "end": "1307560"
  },
  {
    "text": "have an implementation of that that does the logic of setting the is adopted flag to true and then another one that loops",
    "start": "1307560",
    "end": "1313740"
  },
  {
    "text": "over it and calls its own method therefore adopt dog and Kotlin we do have default interface implementations",
    "start": "1313740",
    "end": "1320580"
  },
  {
    "text": "that's mostly because Java had it from the get-go anyway it's one of the features that I actually missed when I",
    "start": "1320580",
    "end": "1326460"
  },
  {
    "text": "first sort of switched over its a c-sharp from from Java but now writing a",
    "start": "1326460",
    "end": "1331590"
  },
  {
    "text": "lot of Collin I get that back and it feels good and in c-sharp eight I get it which just feels even better so in this",
    "start": "1331590",
    "end": "1336750"
  },
  {
    "text": "case same deal we have an interface notice the naming convention we don't have the I and said we're sort of",
    "start": "1336750",
    "end": "1342210"
  },
  {
    "text": "sticking with the java naming convention of the interfaces the default name and then we slap that in pull on the end like a monster",
    "start": "1342210",
    "end": "1348840"
  },
  {
    "text": "so we have our interface we have a top dog which is implemented so this needs to be implemented by anything implementing the",
    "start": "1348840",
    "end": "1355280"
  },
  {
    "text": "dog adoption service and then we have the adopt dogs which has the default implementation it's going to do a four",
    "start": "1355280",
    "end": "1360950"
  },
  {
    "text": "loop over each of the dogs and the parameters and then call the adopt dog which is referenced above it and so in",
    "start": "1360950",
    "end": "1366770"
  },
  {
    "text": "the implementation we just have to override the one method we can also override the the adopt dogs one which",
    "start": "1366770",
    "end": "1373520"
  },
  {
    "text": "takes in the list but because we have the default we'll just continue to use it and so instead we just define adopt",
    "start": "1373520",
    "end": "1380390"
  },
  {
    "text": "dog as true but now because the interface knows that there is an adopt dogs it has the contract of what that",
    "start": "1380390",
    "end": "1385669"
  },
  {
    "text": "should do it can still reference it without referencing and implementation which is pretty cool so encapsulation is",
    "start": "1385669",
    "end": "1391520"
  },
  {
    "text": "pretty big c-sharp introduced a lot of different encapsulation keywords that other languages didn't have so in this",
    "start": "1391520",
    "end": "1397850"
  },
  {
    "text": "case I'm just throwing a whole bunch of them in here right so we have a public class we have a public property which is a string we have a protected int which",
    "start": "1397850",
    "end": "1405559"
  },
  {
    "text": "means that anything that's inheriting from dog can also access that age property we have private breed which",
    "start": "1405559",
    "end": "1410900"
  },
  {
    "text": "means nothing but this class can can talk to it and we also have a private class within that which then also has a",
    "start": "1410900",
    "end": "1416960"
  },
  {
    "text": "public property meaning nothing outside of the dog class can talk to breed and reference it but dog can reference any",
    "start": "1416960",
    "end": "1423290"
  },
  {
    "text": "of the public properties within it Kotlin we have sort of some different",
    "start": "1423290",
    "end": "1428330"
  },
  {
    "text": "defaults which is interesting so one of the things you may have noticed when we were defining properties back at the",
    "start": "1428330",
    "end": "1434270"
  },
  {
    "text": "beginning is that we're just like var name boom done default public in Kotlin",
    "start": "1434270",
    "end": "1439429"
  },
  {
    "text": "not the design decision I would have made because that you know that's sort of like letting people worry about what",
    "start": "1439429",
    "end": "1446270"
  },
  {
    "text": "to secure rather than default secure it and let them be aware of what they're making accessible but it does make it",
    "start": "1446270",
    "end": "1451970"
  },
  {
    "text": "quite verbose since most code is usually public that people are writing good or bad we have private same deal only dog",
    "start": "1451970",
    "end": "1459320"
  },
  {
    "text": "can reference it we have the private data class breed which then has a public Val name so the exact same scenario we",
    "start": "1459320",
    "end": "1465799"
  },
  {
    "text": "also have the same protected same deal anything inheriting from it can reference it but there are a number of",
    "start": "1465799",
    "end": "1471200"
  },
  {
    "text": "other keywords too so in c-sharp we have the idea of a sealed class meaning that nothing can inherit from it it's the",
    "start": "1471200",
    "end": "1478100"
  },
  {
    "text": "same concept as final one of the things you might have noticed I'll go back for a second is that we actually have is open class dog if we want to make",
    "start": "1478100",
    "end": "1484250"
  },
  {
    "text": "something inherited that's not an abstract class we have to actually say that it's an open class",
    "start": "1484250",
    "end": "1489529"
  },
  {
    "text": "meaning something else can inherit it default public and final everything in Kotlin mostly because that's how Java",
    "start": "1489529",
    "end": "1496009"
  },
  {
    "text": "developers write anyway and I'm sick of reading public final so we do have the concept of final which is default you",
    "start": "1496009",
    "end": "1502129"
  },
  {
    "text": "can still explicitly write it we have that open concept in Kotlin in c-sharp we have the idea of virtual which means",
    "start": "1502129",
    "end": "1508340"
  },
  {
    "text": "that you can override it if you're inheriting a class that has something virtual we have internal and c-sharp",
    "start": "1508340",
    "end": "1513619"
  },
  {
    "text": "which means only anything within its packages can can talk to it and then the default which depending on we're using",
    "start": "1513619",
    "end": "1519499"
  },
  {
    "text": "the default is either private or basically some form of private for Kotlin we also have internal same deal",
    "start": "1519499",
    "end": "1525739"
  },
  {
    "text": "only packages that are that it's in can talk to it and we also have an idea of external which is cool it's the exact",
    "start": "1525739",
    "end": "1532730"
  },
  {
    "text": "opposite right so nothing within the package can talk to anything external at first I was like why like who's using",
    "start": "1532730",
    "end": "1540080"
  },
  {
    "text": "that and then I actually ended up using it I was working on basically a little",
    "start": "1540080",
    "end": "1545659"
  },
  {
    "text": "library for people to consume and I wanted to sort of make all of those public methods and want people to call external which is an interesting concept",
    "start": "1545659",
    "end": "1552799"
  },
  {
    "text": "because then my stuff can't call that but it doesn't make sense because then it's sort of defining the data contract",
    "start": "1552799",
    "end": "1559399"
  },
  {
    "text": "for my library in terms of what people are gonna do and I'm not gonna mess it up by using it internally either I don't",
    "start": "1559399",
    "end": "1564769"
  },
  {
    "text": "know it's kind of cool I haven't really seen that anywhere else I probably really didn't even need to use it but I thought it was a neat concept so on top",
    "start": "1564769",
    "end": "1573139"
  },
  {
    "text": "of interfaces we have abstract classes and and I'll answer the question before it's asked of well if we have default",
    "start": "1573139",
    "end": "1579440"
  },
  {
    "text": "interface implementations what is the point of a stupid abstract class then so in an abstract class in c-sharp we can",
    "start": "1579440",
    "end": "1585710"
  },
  {
    "text": "actually use it almost like the default interface does and in this case there really is no difference we have the",
    "start": "1585710",
    "end": "1591679"
  },
  {
    "text": "adopt dog which is abstract meaning it has to be implemented by something inheriting it and then we also have the implemented version of adopt dogs calls",
    "start": "1591679",
    "end": "1599090"
  },
  {
    "text": "the abstract method pretty cool it doesn't need to know about the implementation then we have the the inheriting class of the adoption service",
    "start": "1599090",
    "end": "1606619"
  },
  {
    "text": "that dog adoption service that actually implements that adopt dog abstract method so in Kotlin same exact concept",
    "start": "1606619",
    "end": "1616009"
  },
  {
    "text": "just like we saw with the all interface implementations I'm pretty sure when I wrote this I literally just",
    "start": "1616009",
    "end": "1621830"
  },
  {
    "text": "like changed it in the slide from like abstract class to interface but it is",
    "start": "1621830",
    "end": "1627320"
  },
  {
    "text": "really similar the difference with the abstract classes is that we can actually define getters and setters and public",
    "start": "1627320",
    "end": "1633650"
  },
  {
    "text": "properties and private and protected stuff in our abstract class that we can't do in our interface because our",
    "start": "1633650",
    "end": "1639080"
  },
  {
    "text": "interface can only be aware of properties that can't reference fields and methods they need to implement need",
    "start": "1639080",
    "end": "1646040"
  },
  {
    "text": "to be implemented or funds if you will so on the not so pretty side of",
    "start": "1646040",
    "end": "1652120"
  },
  {
    "text": "object-oriented program we also got static stuff so c-sharp just like every",
    "start": "1652120",
    "end": "1658670"
  },
  {
    "text": "other sort of C style language we just slap static on everything so in this case we have a static class which means",
    "start": "1658670",
    "end": "1664040"
  },
  {
    "text": "anything in it needs to be static and we have this static void adopt dog same old thing right we're just sending a",
    "start": "1664040",
    "end": "1669230"
  },
  {
    "text": "property colin has an interesting concept in a naming convention for it which has been growing on me when I",
    "start": "1669230",
    "end": "1676160"
  },
  {
    "text": "first looked at I was like what is this why and and the next one will showed even more but instead of having like a",
    "start": "1676160",
    "end": "1681200"
  },
  {
    "text": "static class we actually just have an object and it makes sense if you think about it if we have a static class",
    "start": "1681200",
    "end": "1688160"
  },
  {
    "text": "within sort of a package or within a namespace when something is basically",
    "start": "1688160",
    "end": "1693230"
  },
  {
    "text": "referencing that entire package when the application starts up its initialized right it's initialized from the get-go so when you're reading it and Kotlin you",
    "start": "1693230",
    "end": "1699530"
  },
  {
    "text": "actually think like oh that's just an object I just always have that sort of instantiated object and that's exactly",
    "start": "1699530",
    "end": "1705200"
  },
  {
    "text": "what it is and then when we get into sort of functional style programming where we don't even need packages and we",
    "start": "1705200",
    "end": "1710420"
  },
  {
    "text": "can just like throw stuff anywhere nothing needs to be in a class this actually comes in handy so outside of",
    "start": "1710420",
    "end": "1716510"
  },
  {
    "text": "static classes we can have static members so in this case we have a service not static but within it we have",
    "start": "1716510",
    "end": "1723050"
  },
  {
    "text": "that static adopt and then we also have the non static instance adop so in c-sharp all we have to do is slap the",
    "start": "1723050",
    "end": "1729620"
  },
  {
    "text": "static on the method and then we can reference it just like we would in the previous example where we can just say",
    "start": "1729620",
    "end": "1734930"
  },
  {
    "text": "you know adoption service thought static adopt versus having to new up the adoption service to call the instance",
    "start": "1734930",
    "end": "1740090"
  },
  {
    "text": "method so this is where it was really confusing for me to pick up at first",
    "start": "1740090",
    "end": "1745310"
  },
  {
    "text": "because to have a static member on a non-static class in Kotlin you actually",
    "start": "1745310",
    "end": "1751520"
  },
  {
    "text": "add what's all the companion object and it basically means like hey we've got this object right it's it's always",
    "start": "1751520",
    "end": "1757420"
  },
  {
    "text": "instantiated but it's just gonna kind of like tag along with your class if you need it one of the things that's",
    "start": "1757420",
    "end": "1763180"
  },
  {
    "text": "interesting about it is that when you reference it in Kotlin or if you reference it in JavaScript when it's compiled you reference it like you'd",
    "start": "1763180",
    "end": "1769240"
  },
  {
    "text": "expect to reference a static method right so in this case here in this run function we have adoption service ah",
    "start": "1769240",
    "end": "1774580"
  },
  {
    "text": "static adopt just like we had in c-sharp but if you reference this in Java you actually have to call adoption service",
    "start": "1774580",
    "end": "1781050"
  },
  {
    "text": "companion dot static adopt because it's actually gonna initialize a static class within it which is that companion object",
    "start": "1781050",
    "end": "1788530"
  },
  {
    "text": "which is pretty neat again it was a little confusing for me at first but for the concept of having a static member a",
    "start": "1788530",
    "end": "1794470"
  },
  {
    "text": "static property a static function something like that on an instantiate Abul class you just slap it in a",
    "start": "1794470",
    "end": "1800350"
  },
  {
    "text": "companion object anything you put in there though is then static so in this case we only have the one function but",
    "start": "1800350",
    "end": "1806980"
  },
  {
    "text": "within our companion object that's where we would put all of our static stuff rather than having to have like a bunch of companion objects and each one is",
    "start": "1806980",
    "end": "1813460"
  },
  {
    "text": "like wrapping the function or property we just have it once and then everything in there sort of what belongs to that",
    "start": "1813460",
    "end": "1818740"
  },
  {
    "text": "companion so one of the things c-sharp did really well and one of the recent",
    "start": "1818740",
    "end": "1825010"
  },
  {
    "text": "issue right not an original feature of c-sharp is extension methods and so this is where a lot of people I write code",
    "start": "1825010",
    "end": "1832120"
  },
  {
    "text": "with abuse and they're like throwing a helper and utility and an extension method and it'll do all the magic for",
    "start": "1832120",
    "end": "1837430"
  },
  {
    "text": "you just called dot whatever I think when it does have a great use case it's it's amazing to use right so we have",
    "start": "1837430",
    "end": "1844450"
  },
  {
    "text": "things like link extensions on all of our collections and all we have to do is call dot where dot select and it's",
    "start": "1844450",
    "end": "1850150"
  },
  {
    "text": "pretty great all that's defined in a separate library than an eye collection is so in c-sharp we have our adoption",
    "start": "1850150",
    "end": "1857320"
  },
  {
    "text": "service and we have our existing adopt dog instance method and then we have to",
    "start": "1857320",
    "end": "1863230"
  },
  {
    "text": "create a static class to put all of our extensions in which is kind of interesting so in this case we have our",
    "start": "1863230",
    "end": "1869040"
  },
  {
    "text": "adoptable extensions and then we have that static adopt which then takes into this keyword in order to tell you that",
    "start": "1869040",
    "end": "1876010"
  },
  {
    "text": "the dog is the context again and that's what the extension is being applied to in terms of the the type in in Kotlin",
    "start": "1876010",
    "end": "1883570"
  },
  {
    "text": "it's a bit easier to read sort of following along the lines of reducing verbosity I mean you can even just see like compare the lines of",
    "start": "1883570",
    "end": "1889360"
  },
  {
    "text": "code we're shortening it by like four so same deal we got an adoption service we got a public function called adopt dog",
    "start": "1889360",
    "end": "1896530"
  },
  {
    "text": "it calls dog adopt and we're able to do that because we just defined this",
    "start": "1896530",
    "end": "1901600"
  },
  {
    "text": "extension function by just saying this is a function I don't care where it is it could be a not a package it can be it's sort of the",
    "start": "1901600",
    "end": "1907270"
  },
  {
    "text": "global namespace or it can be in a specific namespace or it can even exist within another class it can just you can",
    "start": "1907270",
    "end": "1914080"
  },
  {
    "text": "just slap it wherever but you just call adoptable dog adopt and then you define the function there which I think this is",
    "start": "1914080",
    "end": "1921250"
  },
  {
    "text": "a really cool way to write extension methods I don't have to shove them all into sort of one folder called",
    "start": "1921250",
    "end": "1927790"
  },
  {
    "text": "extensions and then have one for each type that I'm building extension methods for which I know a lot of other people",
    "start": "1927790",
    "end": "1933160"
  },
  {
    "text": "do and it makes it very terse and very easy to read and very easy to follow because now I can also kind of",
    "start": "1933160",
    "end": "1939340"
  },
  {
    "text": "contextualize my extension methods I can have this extension method exist only in",
    "start": "1939340",
    "end": "1944530"
  },
  {
    "text": "this one class that needs to use it it's no longer this globally accessible static method that someone can abuse I",
    "start": "1944530",
    "end": "1950590"
  },
  {
    "text": "can actually scope it properly Kotlin also has extension properties basically",
    "start": "1950590",
    "end": "1956080"
  },
  {
    "text": "they're able to do this because of how they handle again that translation into an actual method for for things like",
    "start": "1956080",
    "end": "1962620"
  },
  {
    "text": "Java right so in this case we're actually giving a Doppel dog a name property and it's just the calculated",
    "start": "1962620",
    "end": "1969640"
  },
  {
    "text": "get so you this this can't just be an open-ended property it has to have an explicit getter setter or one or the",
    "start": "1969640",
    "end": "1975640"
  },
  {
    "text": "other so in this case you know we're combining like a first name property and a last name property but we can actually",
    "start": "1975640",
    "end": "1981010"
  },
  {
    "text": "just access as you'd regularly expect to we can actually also extend can extend",
    "start": "1981010",
    "end": "1987640"
  },
  {
    "text": "companion objects which is cool and you can actually see that naming convention I was talking about where we actually have to call dot companion but it's",
    "start": "1987640",
    "end": "1994360"
  },
  {
    "text": "interesting because the same idea like I saw this as a feature and I was like what am I gonna do that when am I gonna",
    "start": "1994360",
    "end": "2000450"
  },
  {
    "text": "need to add a static member to a static class who's making these rules up and",
    "start": "2000450",
    "end": "2005790"
  },
  {
    "text": "then I did it once and I was like oh someone ran into this use case and I thought of it ahead of time for me which was pretty cool but again it comes down",
    "start": "2005790",
    "end": "2013140"
  },
  {
    "text": "to being able to sort of like scope those extension methods so in this case if I have the the",
    "start": "2013140",
    "end": "2018930"
  },
  {
    "text": "need to have a static member called get shelters or something like that but I",
    "start": "2018930",
    "end": "2023970"
  },
  {
    "text": "don't want to just allow anyone to sort of access it I don't want anyone that's",
    "start": "2023970",
    "end": "2029070"
  },
  {
    "text": "consuming my package to be able to use it I can actually scope it to a certain class and define it within a class",
    "start": "2029070",
    "end": "2034500"
  },
  {
    "text": "that's outside or within a package that's outside of the adoptable dog companion object or outside of the",
    "start": "2034500",
    "end": "2041430"
  },
  {
    "text": "library and I entirely which is pretty cool so another thing that c-sharp does",
    "start": "2041430",
    "end": "2047190"
  },
  {
    "text": "really well is a lot of this sort of like leaning towards a little more",
    "start": "2047190",
    "end": "2052200"
  },
  {
    "text": "dynamically typed with a lot of type inference and stuff like that or even the disgusting dynamic type how many you",
    "start": "2052200",
    "end": "2058200"
  },
  {
    "text": "guys actually have used dynamic in c-sharp a lot okay thanks guys I'm",
    "start": "2058200",
    "end": "2064139"
  },
  {
    "text": "opinionated on it just because it makes it a very unstable in certain cases but doing heavy calculations and stuff like",
    "start": "2064140",
    "end": "2070980"
  },
  {
    "text": "that it is a lot easier dynamic dynamic dynamic but you're sort of working under the assumption that you know what you're doing which is dangerous but it's also a",
    "start": "2070980",
    "end": "2078750"
  },
  {
    "text": "lot of fun if you do it right so in this case you know we have an example where we're taking in the dynamic pet we can",
    "start": "2078750",
    "end": "2084929"
  },
  {
    "text": "work under the assumption that it has this is adopted if it doesn't we're gonna crash at run time if we pass in",
    "start": "2084930",
    "end": "2090780"
  },
  {
    "text": "some random class or some object or we just pass in a string or something that's not going to work so Kotlin kind of has this we're again",
    "start": "2090780",
    "end": "2099900"
  },
  {
    "text": "the same thing you should define as a dynamic type but this actually doesn't work in the JVM and that's strictly",
    "start": "2099900",
    "end": "2104910"
  },
  {
    "text": "because the JVM needs to understand ahead of time what your types are but if we're compiling to JavaScript all of our",
    "start": "2104910",
    "end": "2111270"
  },
  {
    "text": "objects are dynamic no one cares anyway so if you're writing Kotlin code that's meant to go to JavaScript you can slap",
    "start": "2111270",
    "end": "2117090"
  },
  {
    "text": "in dynamic types at any point which is pretty cool all right let's look at type",
    "start": "2117090",
    "end": "2123720"
  },
  {
    "text": "inference this is one of the coolest things so that sort of Java developers",
    "start": "2123720",
    "end": "2129240"
  },
  {
    "text": "coming to C sharp or like this is the gross I need to define my types everywhere but I think it's pretty cool",
    "start": "2129240",
    "end": "2134370"
  },
  {
    "text": "so in this case right we have a a method called pet exists and it takes in a predicate in this case it's an",
    "start": "2134370",
    "end": "2140250"
  },
  {
    "text": "expression of a func but it could also just be a function for the sake of the argument but I did want to show it because basically when we're when we're",
    "start": "2140250",
    "end": "2147180"
  },
  {
    "text": "executing pet exists we're actually making two different type inferences here because all I have to do is",
    "start": "2147180",
    "end": "2152910"
  },
  {
    "text": "Piero peed ID equals ID right which is it's neat I understand what it is",
    "start": "2152910",
    "end": "2158130"
  },
  {
    "text": "because I can read the code I can go to Pet exist and I can say oh that is taking an expression of a funk of",
    "start": "2158130",
    "end": "2163980"
  },
  {
    "text": "adoptable pet needs to return bool but it's really terse and easy to read without having to read through all the",
    "start": "2163980",
    "end": "2170550"
  },
  {
    "text": "types and everything else so we're actually making two different type inferences here we're making an inference on the parameter type so just",
    "start": "2170550",
    "end": "2177270"
  },
  {
    "text": "the the the whole expression there that could just be a funk or it could be an expression but because it matches either",
    "start": "2177270",
    "end": "2182400"
  },
  {
    "text": "we're able to just assume that it's going to be an expression instantiate it as an expression but then within that",
    "start": "2182400",
    "end": "2188910"
  },
  {
    "text": "we're also instantiating P as an actual adoptable pet rather than just sort of",
    "start": "2188910",
    "end": "2194790"
  },
  {
    "text": "any object which is pretty cool we get a lot of the same goodness over in Kotlin",
    "start": "2194790",
    "end": "2200310"
  },
  {
    "text": "which for any of you guys who have written java recently you'd understand it like lambda functions aren't a thing and like they're allegedly gonna be a",
    "start": "2200310",
    "end": "2207540"
  },
  {
    "text": "thing but Colin's like we're gonna make it a thing so some weird things to read here which",
    "start": "2207540",
    "end": "2214110"
  },
  {
    "text": "makes it a little bit different coming from a c-sharp perspective so same idea right we have a predicate and this is",
    "start": "2214110",
    "end": "2219210"
  },
  {
    "text": "taking in basically a func that consumes of an adoptable pet and needs to return a bool so we we define those funks with",
    "start": "2219210",
    "end": "2225930"
  },
  {
    "text": "the input types as a parameter and then a little arrow and then what the return type should be and then on the sort of",
    "start": "2225930",
    "end": "2232860"
  },
  {
    "text": "execution of that we actually don't call it with parentheses we define it with braces almost like we're creating a new",
    "start": "2232860",
    "end": "2239280"
  },
  {
    "text": "function and that is essentially what's happening underneath but you'll see it everywhere where any where you're",
    "start": "2239280",
    "end": "2244380"
  },
  {
    "text": "passing in a predicate you're passing in a function you're passing in any sort of",
    "start": "2244380",
    "end": "2249690"
  },
  {
    "text": "executable code as as an instantiated bit we're passing it in in brackets rather than parameters so in this case",
    "start": "2249690",
    "end": "2256050"
  },
  {
    "text": "we have the brackets pee-peed ID again we to now work with the type or inference that this whole thing is the",
    "start": "2256050",
    "end": "2262740"
  },
  {
    "text": "proper predicate type and that p is an adoptable pet generics is also really",
    "start": "2262740",
    "end": "2269760"
  },
  {
    "text": "important and one of the things that c-sharp in my opinion does a lot better than other implementations of generics",
    "start": "2269760",
    "end": "2275190"
  },
  {
    "text": "is these sort of restrictions right so I can say a pet adoption service of type T but I can enforce the rule that T has to",
    "start": "2275190",
    "end": "2282240"
  },
  {
    "text": "inherit from adoptable pet I can enforce that it has to be a class I can enforce that it has the constructor that takes in certain",
    "start": "2282240",
    "end": "2288269"
  },
  {
    "text": "parameters we can do a lot with that and we can do all the same things with Kotlin and in my opinion it reads a bit",
    "start": "2288269",
    "end": "2294390"
  },
  {
    "text": "better too so you'll even notice sort of when I had to write this in c-sharp I actually added a new line in order to make it fit on a slide but in Kotlin I",
    "start": "2294390",
    "end": "2302039"
  },
  {
    "text": "actually have a larger font size here and can still fit it in because I actually say T has to inherit from adoptable pet right in the actual braces",
    "start": "2302039",
    "end": "2309900"
  },
  {
    "text": "where I'm defining the generic which is pretty cool and all of the types sort of worked that way but now I can actually",
    "start": "2309900",
    "end": "2315329"
  },
  {
    "text": "consume T I know T is going to have in his adopted flag just like we could make that assumption",
    "start": "2315329",
    "end": "2320339"
  },
  {
    "text": "over on the c-sharp side and then we're basically off and running another thing",
    "start": "2320339",
    "end": "2325710"
  },
  {
    "text": "that is sort of a newer feature in C sharp is tuples how many you guys actually use tuples in c-sharp regularly",
    "start": "2325710",
    "end": "2331559"
  },
  {
    "text": "I love tuples but they they're another thing that people can abused pretty easily but in c-sharp I love the way",
    "start": "2331559",
    "end": "2338579"
  },
  {
    "text": "they define tuples in so in this case where we have this data parameter that's going into this adopt method and that",
    "start": "2338579",
    "end": "2345150"
  },
  {
    "text": "takes in a tuple where the the left type needs to be dog and the right type needs to be shelter in c-sharp I can just add",
    "start": "2345150",
    "end": "2350700"
  },
  {
    "text": "more and more and more types of this so I can have a tuple of you know 13 different types that I need to pass in I",
    "start": "2350700",
    "end": "2355829"
  },
  {
    "text": "can name those types I could instead of just passing in dog and shelter I could say dog and it is of type dog and so now",
    "start": "2355829",
    "end": "2362219"
  },
  {
    "text": "I'm gonna have the objects per property name that I can access but in this case because I'm not defining it all I have",
    "start": "2362219",
    "end": "2368160"
  },
  {
    "text": "to do is called item 1 I now know that is that dog class and so I can hit that is adopted property so there are two",
    "start": "2368160",
    "end": "2375660"
  },
  {
    "text": "poles in Kotlin two they actually have some simple aliases for basically short handing tuples where if you have two or",
    "start": "2375660",
    "end": "2382799"
  },
  {
    "text": "three different types you can just call it a pair you'll notice you get the first in this case we're using a pair of",
    "start": "2382799",
    "end": "2388229"
  },
  {
    "text": "same thing dog and shelter and we get the same sort of aspect where in c-sharp we called item one in Kotlin where we're",
    "start": "2388229",
    "end": "2394559"
  },
  {
    "text": "calling just dot first and be called that second to get the second one that's pretty intuitive we don't have to have numbers it kind of makes sense you can",
    "start": "2394559",
    "end": "2401039"
  },
  {
    "text": "also use the type called triple if you have three different objects going into your tuple and you just called off first that second third and then beyond that",
    "start": "2401039",
    "end": "2407910"
  },
  {
    "text": "you actually have to just call tuple type and it's just a generic so this is actually one where was it was kind of",
    "start": "2407910",
    "end": "2413309"
  },
  {
    "text": "interesting where they did take a more verbose approach I'm not sure if that'll change it in the future once they",
    "start": "2413309",
    "end": "2418890"
  },
  {
    "text": "realize like other people are doing it like well we want to be the shortest one so we'll see but I actually like the",
    "start": "2418890",
    "end": "2425309"
  },
  {
    "text": "whole pair idea because it reads a little bit better so I think one of the",
    "start": "2425309",
    "end": "2431579"
  },
  {
    "text": "most important topics to talk about is asynchronous programming I'm not gonna spend a lot of time on it I can spend",
    "start": "2431579",
    "end": "2437459"
  },
  {
    "text": "days talking about it the session right after me is gonna do a big deep dive into co-routines and asynchronous",
    "start": "2437459",
    "end": "2442469"
  },
  {
    "text": "programming with Kotlin if you're gonna be around and you're actually still interested in Kotlin after this which I hope you are because that means I'm",
    "start": "2442469",
    "end": "2448349"
  },
  {
    "text": "doing my job stick around because Ilana's gonna do a big deep dive in asynchronous",
    "start": "2448349",
    "end": "2453689"
  },
  {
    "text": "programming which is actually a newer feature with co-routines that came out in that 1.3 I was talking about and they",
    "start": "2453689",
    "end": "2459689"
  },
  {
    "text": "do some pretty crazy stuff but let's just talk about sort of the the basics in this case right so in c-sharp we got",
    "start": "2459689",
    "end": "2465959"
  },
  {
    "text": "async/await which is awesome we were one of the first people to implement easy asynchronous programming made all of our",
    "start": "2465959",
    "end": "2471959"
  },
  {
    "text": "lives like a hundred times easier I don't have to care about threads I still probably should I don't necessarily have",
    "start": "2471959",
    "end": "2477689"
  },
  {
    "text": "to care about tasks management's definitely that again I probably should because a lot of people do it wrong and in this case you know this isn't",
    "start": "2477689",
    "end": "2483119"
  },
  {
    "text": "necessarily the the best code but I've read it to fit on a slide so in this case right we have an async task called",
    "start": "2483119",
    "end": "2488729"
  },
  {
    "text": "background get and we're just awaiting another async task easy in in column we",
    "start": "2488729",
    "end": "2495119"
  },
  {
    "text": "have this concept called co-routines and there are extension libraries you can install which actually give you a sink",
    "start": "2495119",
    "end": "2501269"
  },
  {
    "text": "awake capabilities but code routines on their own can do quite a bit and you can",
    "start": "2501269",
    "end": "2507479"
  },
  {
    "text": "define a whole bunch of different scopes for your ko routine so in this case we're essentially saying take the global scope just add a global code routine and",
    "start": "2507479",
    "end": "2513809"
  },
  {
    "text": "do it sort of your traditional fire office async task but I can actually define my own scopes I can nest scopes",
    "start": "2513809",
    "end": "2521159"
  },
  {
    "text": "within them I can add extension methods to these scopes in order to execute things sort of in a process I can also",
    "start": "2521159",
    "end": "2527249"
  },
  {
    "text": "within the execution of a code of teen just say like pause after this things done alright now continue that coaching",
    "start": "2527249",
    "end": "2533309"
  },
  {
    "text": "that was in the middle of running and I can also actually do things like bring it up in sort of join co-routines",
    "start": "2533309",
    "end": "2539130"
  },
  {
    "text": "together string them together await them all just like we can sort of await a bunch of tasks and stuff like that so",
    "start": "2539130",
    "end": "2544880"
  },
  {
    "text": "now that I'm done rambling about how awesome they are this simple example where we're just calling background get",
    "start": "2544880",
    "end": "2550439"
  },
  {
    "text": "all we say is global scope dot launch that's kicking off a new car routine and then we pass in a method you sort of see",
    "start": "2550439",
    "end": "2557670"
  },
  {
    "text": "that same thing where I was saying because we're passing in a function to be executed we're using those curly braces we're sort of traditional C sharp",
    "start": "2557670",
    "end": "2564750"
  },
  {
    "text": "development this would be like passing in a task as an object we would do it with parentheses within that launch",
    "start": "2564750",
    "end": "2570780"
  },
  {
    "text": "function so in a real issue world example of async await I wanted to take",
    "start": "2570780",
    "end": "2578130"
  },
  {
    "text": "a sample that I think we're all too familiar with and that's getting something from the internet so in this",
    "start": "2578130",
    "end": "2584160"
  },
  {
    "text": "case I'm mooing up an HTTP client I don't even care about disposing it I'm running wild over here my method and I'm",
    "start": "2584160",
    "end": "2589830"
  },
  {
    "text": "also just calling getstring async I'm not calling get async I just know what I'm gonna do I'm gonna take the performance hit I'm gonna assume all",
    "start": "2589830",
    "end": "2596730"
  },
  {
    "text": "exceptions are never gonna happen everything's gonna be good but in this case I'm awaiting that method which is",
    "start": "2596730",
    "end": "2602010"
  },
  {
    "text": "just gonna go hit some URL and get me the string of the response and then I'm going to deserialize it right and so",
    "start": "2602010",
    "end": "2607980"
  },
  {
    "text": "then in our background get all I have to do is have a list then I can kick it off on a background task which can set the",
    "start": "2607980",
    "end": "2612990"
  },
  {
    "text": "dog's I have to work under the assumption that background get is going to be held by a parent context otherwise",
    "start": "2612990",
    "end": "2618270"
  },
  {
    "text": "I should have used like tasks factory or something like that but that wouldn't fit on my one slide so no way so similar",
    "start": "2618270",
    "end": "2624990"
  },
  {
    "text": "example with Kotlin we get the JSON from",
    "start": "2624990",
    "end": "2630000"
  },
  {
    "text": "the URL by intention a URL object and then we just call read text again",
    "start": "2630000",
    "end": "2635070"
  },
  {
    "text": "probably shouldn't do this that's a synchronous call keep in mind and then basically we're going to use JSON and",
    "start": "2635070",
    "end": "2641400"
  },
  {
    "text": "like it's it's google's json library thing like json net in the java world and do this whole grouse type thing that",
    "start": "2641400",
    "end": "2648450"
  },
  {
    "text": "I have to do here which is just how JSON needs to work because Java doesn't",
    "start": "2648450",
    "end": "2654120"
  },
  {
    "text": "handle certain things very well for D serialization and then basically we're actually creating that adoptable dog",
    "start": "2654120",
    "end": "2660360"
  },
  {
    "text": "type from that JSON and then to execute that in the background I have my instantiated list of null for a list of",
    "start": "2660360",
    "end": "2668280"
  },
  {
    "text": "adoptable dogs and then I'm setting that in the background after it's been launched in that co-routine so basically",
    "start": "2668280",
    "end": "2674280"
  },
  {
    "text": "think of it like something's gonna call this get adopted dogs and background I'm gonna watch a KO routine but that get",
    "start": "2674280",
    "end": "2679740"
  },
  {
    "text": "adoptable dogs and background needs to hold on to that dogs because my ko routine is actually going to come and",
    "start": "2679740",
    "end": "2684840"
  },
  {
    "text": "set it after the fact which is pretty interesting there is also the the sort of simple way to await",
    "start": "2684840",
    "end": "2691320"
  },
  {
    "text": "the curtsy and I just have to take a reference to that global scope that launch ID in this case I just call it",
    "start": "2691320",
    "end": "2697500"
  },
  {
    "text": "tasks because we're all c-sharp developers and just called dot join and that's basically going to wait it but",
    "start": "2697500",
    "end": "2703320"
  },
  {
    "text": "basically because I'm working on like a current thread sort of my main thread if you will I can take my Co routine thread that was",
    "start": "2703320",
    "end": "2708990"
  },
  {
    "text": "just spun up and then join that Co routine to my current one so I was talking about where we can have like",
    "start": "2708990",
    "end": "2714240"
  },
  {
    "text": "nested Co routines and we can like join them up to each other keep them all in the same context and everything else so",
    "start": "2714240",
    "end": "2721200"
  },
  {
    "text": "I'm done talking about sort of these default code samples does anyone have any questions because that was quite a",
    "start": "2721200",
    "end": "2728130"
  },
  {
    "text": "bit of just code on slides right no awesome so talking about tooling for",
    "start": "2728130",
    "end": "2735030"
  },
  {
    "text": "c-sharp developers we have some of the best IDs in the world regardless of what language right we get you to use Visual",
    "start": "2735030",
    "end": "2740880"
  },
  {
    "text": "Studio vs code is there if you're doing stuff with the CLI we can write C sharp on the Mac with vias for Mac and yes I",
    "start": "2740880",
    "end": "2747270"
  },
  {
    "text": "know I need to update these icons to 2019 and we can even use JetBrains Rider if you've used writer before it's pretty",
    "start": "2747270",
    "end": "2752670"
  },
  {
    "text": "cool if you use resharper it's essentially resharper in an IDE I haven't really used it full time enough",
    "start": "2752670",
    "end": "2758790"
  },
  {
    "text": "but one of the things I do use is their Java editor called IntelliJ",
    "start": "2758790",
    "end": "2763800"
  },
  {
    "text": "it's basically riders like IntelliJ for C sharp which is pretty cool and they have a ton of stuff built in for Kotlin",
    "start": "2763800",
    "end": "2771570"
  },
  {
    "text": "in IntelliJ Android studio which is sort of the default it's free totally free",
    "start": "2771570",
    "end": "2777090"
  },
  {
    "text": "Google built it for you with support from JetBrains which basically it's living on top of",
    "start": "2777090",
    "end": "2782910"
  },
  {
    "text": "intelligent with a whole bunch of Android stuff built in this is sort of where I started with Kotlin back in the",
    "start": "2782910",
    "end": "2788580"
  },
  {
    "text": "preview of Android studio 3 and then if you feel like you can use eclipse with",
    "start": "2788580",
    "end": "2794940"
  },
  {
    "text": "some stuff I guess so I want to talk about sort of future state for both",
    "start": "2794940",
    "end": "2800730"
  },
  {
    "text": "these languages we we've done a lot of talks about c-sharp eight you've",
    "start": "2800730",
    "end": "2806400"
  },
  {
    "text": "probably sat in on a few you probably know some of this stuff but I want to sort of provide more of that context for",
    "start": "2806400",
    "end": "2811410"
  },
  {
    "text": "like hey this cool stuff that's coming out in c-sharp eight that stuff either already existed in Kotlin or it's coming",
    "start": "2811410",
    "end": "2816450"
  },
  {
    "text": "out in Kotlin or there's basically some way to do it that's still pretty neat so the first things first",
    "start": "2816450",
    "end": "2821760"
  },
  {
    "text": "Noble reference type I try turning this on one of my projects and it turned on warning his errors I don't know if any",
    "start": "2821760",
    "end": "2826920"
  },
  {
    "text": "of you guys have done that I came up with like 8,000 errors which is just gross and I feel like I'm just a bad",
    "start": "2826920",
    "end": "2833190"
  },
  {
    "text": "developer because that happened but in this case right we're looking at that same poco to pojo to poco with a k'",
    "start": "2833190",
    "end": "2840330"
  },
  {
    "text": "example where instead of just having default string we're actually explicitly saying this is a knowable string and so",
    "start": "2840330",
    "end": "2846780"
  },
  {
    "text": "now it looks a lot more similar to the cotton example where everything is knowable reference types from the get-go",
    "start": "2846780",
    "end": "2852380"
  },
  {
    "text": "we also have the the new concept of ranges I haven't really used this in production yet other than sort of",
    "start": "2852380",
    "end": "2857460"
  },
  {
    "text": "playing with it in the C sharp features and they're first announced but basically the idea is I can I can take a",
    "start": "2857460",
    "end": "2862920"
  },
  {
    "text": "list or any sort of AI collection and just cast the range to it and actually loop over that this is another one where",
    "start": "2862920",
    "end": "2868230"
  },
  {
    "text": "c-sharp did it really well Kotlin does have the concept of range and we can define it as a type there",
    "start": "2868230",
    "end": "2874290"
  },
  {
    "text": "isn't like basically a selector helper or extension to do it so in this case I'm defining the range and then I'm just",
    "start": "2874290",
    "end": "2880230"
  },
  {
    "text": "gonna call sub list grab you know the first and last thing in the range but you can do also this exact same thing",
    "start": "2880230",
    "end": "2885720"
  },
  {
    "text": "we're looking at in Collin and do it in the c-sharp side where you can define your range as a variable of range which",
    "start": "2885720",
    "end": "2892290"
  },
  {
    "text": "is a value type and then sort of carry on so I've talked about this a bunch of times already with default interface",
    "start": "2892290",
    "end": "2898680"
  },
  {
    "text": "implementation so c-sharp we're getting default interface implementations which is awesome basically it works the same",
    "start": "2898680",
    "end": "2906150"
  },
  {
    "text": "way as it does in Java and so it works the same way as it does in Kotlin and so now these two are also looking a little oddly similar we have our eye adoption",
    "start": "2906150",
    "end": "2913320"
  },
  {
    "text": "service we have a top dog that's not implemented and we have our default implementation for adopt dogs that references up to the one that's not",
    "start": "2913320",
    "end": "2920400"
  },
  {
    "text": "implemented and then all we have to implement is the adopt dog single one on both of those which is pretty cool",
    "start": "2920400",
    "end": "2926180"
  },
  {
    "text": "asynchronous streams this one I was really excited about because I do quite a bit of work with a lot of sort of",
    "start": "2926180",
    "end": "2932430"
  },
  {
    "text": "real-time data and basically this gives us the ability to have almost like a",
    "start": "2932430",
    "end": "2938070"
  },
  {
    "text": "list of available tasks so in this case where I'll sort of break down the example we've taken a list of dogs and",
    "start": "2938070",
    "end": "2944490"
  },
  {
    "text": "we want to get their names in a stream so in this case I'm just tasked to laying on each one but then I'm yield",
    "start": "2944490",
    "end": "2950040"
  },
  {
    "text": "returning each of that into the and that's gonna return an eye a sink a newer enumerable of the type because in",
    "start": "2950040",
    "end": "2956640"
  },
  {
    "text": "this case I'm returning the string name property and so when we execute that we can actually just loop over that as you",
    "start": "2956640",
    "end": "2963480"
  },
  {
    "text": "normally would and we can actually get that name so each time we're going through the loop where we're getting to that get names async again and for each",
    "start": "2963480",
    "end": "2970530"
  },
  {
    "text": "one in there we're actually waiting to get that response so we're gonna wait 200 milliseconds it's gonna hit the next loop cycle",
    "start": "2970530",
    "end": "2976410"
  },
  {
    "text": "wait 200 milliseconds next loop cycle and stuff like that c-sharp did this so amazingly well katli is possible with",
    "start": "2976410",
    "end": "2983430"
  },
  {
    "text": "Kotlin but as you probably tell this is getting a little hectic so in this case I'm actually creating custom scopes for",
    "start": "2983430",
    "end": "2990060"
  },
  {
    "text": "co-routines and then it's basically breaking down each of the methods so have the ability to get a name",
    "start": "2990060",
    "end": "2995190"
  },
  {
    "text": "asynchronously by creating this this extension on my co-routine scope and again just delaying 200 milliseconds and",
    "start": "2995190",
    "end": "3001880"
  },
  {
    "text": "return the name and then I have the ability to get those asynchronously where I'm actually calling like a map function and I'm calling the async name",
    "start": "3001880",
    "end": "3008540"
  },
  {
    "text": "so now I'm actually returning a list of deferred strings knowable strings and then I can loop over them and I just",
    "start": "3008540",
    "end": "3015260"
  },
  {
    "text": "have to call that dot await so basically the the is a little bit more work to do with it but you can still get that",
    "start": "3015260",
    "end": "3020600"
  },
  {
    "text": "actual sort of sensation of streaming each item in the loop because by the time we get to named oh wait we're",
    "start": "3020600",
    "end": "3026600"
  },
  {
    "text": "awaiting that full one that does the 200 milliseconds we hop back up and check the next item in the loop or basically",
    "start": "3026600",
    "end": "3032420"
  },
  {
    "text": "the difference between the two is then c-sharp we're waiting when we're getting to the next loop in this case we're",
    "start": "3032420",
    "end": "3037910"
  },
  {
    "text": "actually waiting in the loop and then we go to the next one so Collins got a lot of stuff going on - there's a lot more",
    "start": "3037910",
    "end": "3043520"
  },
  {
    "text": "work being done with co-routines it it launched into production in 1.3 they did some release like literally two days ago",
    "start": "3043520",
    "end": "3049790"
  },
  {
    "text": "actually which enhance like a couple of different things they're doing a lot more in native development so trying to",
    "start": "3049790",
    "end": "3055730"
  },
  {
    "text": "get the LLVM stuff to work better doing more project templates and stuff like that to work with iOS there's a ton of",
    "start": "3055730",
    "end": "3062900"
  },
  {
    "text": "IDE enhancements that are always coming out Android studio feels like they have another like extension you can use like",
    "start": "3062900",
    "end": "3068030"
  },
  {
    "text": "everyday so for the xamarin guys out there did you remember when Miguel was finally like oh you don't have to in",
    "start": "3068030",
    "end": "3075140"
  },
  {
    "text": "xamarin Android call find BIID anymore we'll just get it for you because that makes sense we like had that from the beginning with",
    "start": "3075140",
    "end": "3081770"
  },
  {
    "text": "Kotlin which was pretty cool and what's being pushed a lot right now and the cotton community's multi-platform",
    "start": "3081770",
    "end": "3088060"
  },
  {
    "text": "project so being able to have one code base that can be your webserver and",
    "start": "3088060",
    "end": "3094390"
  },
  {
    "text": "share logic with your client-side that's running in JavaScript which shares client with your iOS app and your Android app which all share their same",
    "start": "3094390",
    "end": "3101380"
  },
  {
    "text": "state logic but just have their different UI components and stuff like that and there's a lot of community",
    "start": "3101380",
    "end": "3106690"
  },
  {
    "text": "projects around that to where we're getting almost like a xamarin forms implementation and Kotlin where there's",
    "start": "3106690",
    "end": "3112510"
  },
  {
    "text": "a shared UI now and then that's being spread across the different platforms and all the sort of shared state happens",
    "start": "3112510",
    "end": "3118240"
  },
  {
    "text": "in a shared library in a shared package and they're calling that Kotlin everywhere and I mean like everywhere",
    "start": "3118240",
    "end": "3124150"
  },
  {
    "text": "like now you can actually come into IntelliJ just go down to a section for Colin rather than just going to like Android I mean like alright I'll do an",
    "start": "3124150",
    "end": "3130330"
  },
  {
    "text": "Android app and yes I'm selecting Kotlin because I'm brave in this case we can just pick up the different project tests",
    "start": "3130330",
    "end": "3136780"
  },
  {
    "text": "we can do JVM project if we're just doing something in Java we can do just JavaScript we can do just native we can",
    "start": "3136780",
    "end": "3142750"
  },
  {
    "text": "do basically the case where stuff J's client JVM server we can just do multi-platform so they give me all of them and I'll tell you which ones to",
    "start": "3142750",
    "end": "3149020"
  },
  {
    "text": "delete later you can do mobile with Jess and Roo and mobile with Android and iOS and then sort of that shared library for",
    "start": "3149020",
    "end": "3154480"
  },
  {
    "text": "mobile too and so one of the things I'm really excited about is a potential for",
    "start": "3154480",
    "end": "3159970"
  },
  {
    "text": "these to work together and this is something that you know the last time I gave this talk like right before build wasn't a thing I could talk about but",
    "start": "3159970",
    "end": "3167940"
  },
  {
    "text": "dotnet 5 is coming out in in 2020 and one of the things that they just kind of",
    "start": "3167940",
    "end": "3173710"
  },
  {
    "text": "snuck in there and like all the cool stuff we're gonna get with dotnet 5 better per fan all that I mean they're like oh but also we're gonna have a",
    "start": "3173710",
    "end": "3179200"
  },
  {
    "text": "hundred percent interoperability with Java and they just kind of like toss that in oh and we're gonna have interoperability with Swift and",
    "start": "3179200",
    "end": "3184869"
  },
  {
    "text": "objective-c on iOS and Mac OS and so now we sort of get this idea where if we can",
    "start": "3184869",
    "end": "3190450"
  },
  {
    "text": "actually take Java code and then run that in dotnet we can write in Kotlin we can write in c-sharp those things can",
    "start": "3190450",
    "end": "3196480"
  },
  {
    "text": "actually work together and now both of those together literally cover like every platform if I can write Kotlin",
    "start": "3196480",
    "end": "3201790"
  },
  {
    "text": "where I want to and I can write C sharp where I want to I can also then stay on top of what features I want to be working with and I'm I'm really excited",
    "start": "3201790",
    "end": "3208750"
  },
  {
    "text": "about this I'm hoping that you know by the time don''t 5 comes out we do have that that implementation of the",
    "start": "3208750",
    "end": "3215260"
  },
  {
    "text": "interoperability because I'm gonna be jumping on it and building tools to connect these two because I'm so torn between them all the time I",
    "start": "3215260",
    "end": "3221430"
  },
  {
    "text": "really have a talk because I'm so torn between them like someone write cotton with me please okay",
    "start": "3221430",
    "end": "3226650"
  },
  {
    "text": "let me summarize what happen both these languages are awesome right it can anyone agree with that cotton one",
    "start": "3226650",
    "end": "3232920"
  },
  {
    "text": "seems pretty cool anyone who hasn't used cotton before think cotton seems pretty neat anyone who's like nasty sharp is",
    "start": "3232920",
    "end": "3238170"
  },
  {
    "text": "still better I don't care yeah I get that but one of the things I want to emphasize is that like we we've really",
    "start": "3238170",
    "end": "3244890"
  },
  {
    "text": "did just barely scratch the surface with Kotlin here we didn't talk about any of the functional stuff we didn't really talk about design patterns and and how",
    "start": "3244890",
    "end": "3251220"
  },
  {
    "text": "easy they are to implement in cotton we didn't talk about some of the deeper language features we barely scratched co-routines we didn't talk about doing",
    "start": "3251220",
    "end": "3258630"
  },
  {
    "text": "the async oh and I'll wait with co-routines we didn't talk about anko we didn't talk about Native I didn't show you demos of it I just showed you code",
    "start": "3258630",
    "end": "3264990"
  },
  {
    "text": "snippets so if you want to learn more if you're interested in the Android side I've got a Pluralsight course called",
    "start": "3264990",
    "end": "3270180"
  },
  {
    "text": "building Android apps with Kotlin getting started we do a whole app from the beginning assumes you know nothing",
    "start": "3270180",
    "end": "3276120"
  },
  {
    "text": "about Android and assumes you know nothing about Kotlin and you get to actually build a real-world app which I",
    "start": "3276120",
    "end": "3282150"
  },
  {
    "text": "won't spoil too much about so resources for this talk every little code snippet that was there that's up on github so if",
    "start": "3282150",
    "end": "3288420"
  },
  {
    "text": "you want to see that compare and contrast I have both projects in one repo clone it look at them both pull",
    "start": "3288420",
    "end": "3293610"
  },
  {
    "text": "them up in code there's there's Collin extensions for code too if you feel like just looking at it all in one place which is cool check out the Pearl site",
    "start": "3293610",
    "end": "3300390"
  },
  {
    "text": "course I have a whole blog series on this stuff too specifically for c-sharp developers so doing a little deeper dive",
    "start": "3300390",
    "end": "3305910"
  },
  {
    "text": "on comparing a single weights of Koh routines and stuff like that and I'll put all these slides up on Twitter too it's it's up there from like older talks",
    "start": "3305910",
    "end": "3312630"
  },
  {
    "text": "but I want to get the updated stuff and if you're gonna stick around hang out",
    "start": "3312630",
    "end": "3317730"
  },
  {
    "text": "first fit Lana stock you know like I said Kerr teens are sick and and I'm",
    "start": "3317730",
    "end": "3322800"
  },
  {
    "text": "gonna be hanging out here too so I'm gonna go out and grab a drink if I didn't want to come and ask me questions I'll be in here for this talk and learn",
    "start": "3322800",
    "end": "3329700"
  },
  {
    "text": "a lot more about co-routines and asynchronous programming and Kotlin thanks guys",
    "start": "3329700",
    "end": "3335859"
  },
  {
    "text": "you",
    "start": "3335859",
    "end": "3337920"
  }
]