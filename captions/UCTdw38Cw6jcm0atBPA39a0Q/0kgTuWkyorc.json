[
  {
    "text": "okay go ahead so here we go so a computer program is essentially the",
    "start": "0",
    "end": "6420"
  },
  {
    "text": "collection of entities and actions on those entities and the kinds of entities I'm talking about are things like in C",
    "start": "6420",
    "end": "12150"
  },
  {
    "text": "functions objects constants types in C++ wheels have namespaces templates in fact",
    "start": "12150",
    "end": "17279"
  },
  {
    "text": "if you look in the standard there's an even larger list in the C++ standard of the sort of things but you get the idea",
    "start": "17279",
    "end": "23039"
  },
  {
    "text": "when I talk about an entity and one of the essential things that you do in",
    "start": "23039",
    "end": "28199"
  },
  {
    "text": "programs is that you write declarations for entities and when you do that you give the entity a name and a bunch of",
    "start": "28199",
    "end": "36239"
  },
  {
    "text": "other attributes those attributes are things like type scope storage duration and linkage and what I want to do is",
    "start": "36239",
    "end": "42870"
  },
  {
    "text": "talk about scope storage duration and linkage and why it is that they're so",
    "start": "42870",
    "end": "48570"
  },
  {
    "text": "jumbled together in the language and what you can do to help clarify this so",
    "start": "48570",
    "end": "57739"
  },
  {
    "text": "one key point is that names don't necessarily have all the attributes it",
    "start": "57739",
    "end": "62940"
  },
  {
    "text": "depends on the category of the entity so for example an object as all of those",
    "start": "62940",
    "end": "68040"
  },
  {
    "text": "things it has a scope a type a storage duration and linkage a function name has",
    "start": "68040",
    "end": "73409"
  },
  {
    "text": "everything except it doesn't have a storage duration there's no notion of a function occupying data storage and",
    "start": "73409",
    "end": "81299"
  },
  {
    "text": "having a lifetime the way an object does one of the least-used labor categories",
    "start": "81299",
    "end": "88110"
  },
  {
    "text": "is a label when you write a go-to statement which I hope is very infrequently you have to have a statement label statement labels don't",
    "start": "88110",
    "end": "94530"
  },
  {
    "text": "have any of the attributes except a scope so a declaration is a statement",
    "start": "94530",
    "end": "101100"
  },
  {
    "text": "there was a time way back when when C was first specified the declarations and",
    "start": "101100",
    "end": "107280"
  },
  {
    "text": "statements were considered to be distinct things now a declaration is actually considered to be just another",
    "start": "107280",
    "end": "112530"
  },
  {
    "text": "kind of statement you can interleave them in blocks with other action",
    "start": "112530",
    "end": "117780"
  },
  {
    "text": "statements what is a declaration it says basically here's a name and a bunch of attributes for something that exists in",
    "start": "117780",
    "end": "124829"
  },
  {
    "text": "the program possibly here possibly somewhere else a definition is a",
    "start": "124829",
    "end": "131069"
  },
  {
    "text": "declaration that not only says it exists but here it is all definitions",
    "start": "131069",
    "end": "139770"
  },
  {
    "text": "or declarations but not all declarations or definitions so simple example that's",
    "start": "139770",
    "end": "146640"
  },
  {
    "text": "a function declaration now a lot of people will call that a function prototype you'll note I'm not going to",
    "start": "146640",
    "end": "152700"
  },
  {
    "text": "use that word other than to tell you don't use it it actually has a different meaning that when most of you think it",
    "start": "152700",
    "end": "158010"
  },
  {
    "text": "means that's a function declaration that's a function definition the",
    "start": "158010",
    "end": "163110"
  },
  {
    "text": "difference is the previous one didn't have a function body this one does and",
    "start": "163110",
    "end": "168840"
  },
  {
    "text": "basically the definition is whether it's a function the functions are the easy ones to understand but whether it's a an",
    "start": "168840",
    "end": "174959"
  },
  {
    "text": "object or a template or a class the definition is here's everything you need",
    "start": "174959",
    "end": "180120"
  },
  {
    "text": "to know about it in order to make this thing real so once again a non defining",
    "start": "180120",
    "end": "186780"
  },
  {
    "text": "declaration for a function says it exists but not here the definition says",
    "start": "186780",
    "end": "193020"
  },
  {
    "text": "it exists and here it is and that's generally true with other things like objects it's generally true with classes",
    "start": "193020",
    "end": "201239"
  },
  {
    "text": "and templates as well in C++ interestingly there's just like in C++",
    "start": "201239",
    "end": "207500"
  },
  {
    "text": "there is this notion of a pure virtual function there's no official term for an impure virtual function well similarly",
    "start": "207500",
    "end": "215820"
  },
  {
    "text": "with the terminology of declarations and definitions there isn't any terminology in either C or C++ that says this is a",
    "start": "215820",
    "end": "223470"
  },
  {
    "text": "declaration that is not a definition you have so you'll notice that I have to keep repeating the awkward phrase a non",
    "start": "223470",
    "end": "230100"
  },
  {
    "text": "defining declaration because that's the best I could do now another point that I",
    "start": "230100",
    "end": "238799"
  },
  {
    "text": "think most of you know but it is notice that I'm emphasizing this is compilers translate one source file at a time they",
    "start": "238799",
    "end": "245640"
  },
  {
    "text": "don't you don't compile headers you only compile sources and you do one at a time and and when you compile it whether it's",
    "start": "245640",
    "end": "254040"
  },
  {
    "text": "C or C++ you're incorporating headers via include directives and this is",
    "start": "254040",
    "end": "260459"
  },
  {
    "text": "important there aren't any rules if you read both the sea and the C++ standards",
    "start": "260459",
    "end": "266800"
  },
  {
    "text": "there aren't any rules which say explicitly these constructs have to go into headers these constructs have to go",
    "start": "266800",
    "end": "274300"
  },
  {
    "text": "into source files and and you'll see why that is in just a moment but what they",
    "start": "274300",
    "end": "281830"
  },
  {
    "text": "do is they leave it to programmers to develop a sense of how to do this and",
    "start": "281830",
    "end": "287590"
  },
  {
    "text": "style guidelines will try their best sometimes to tell you to give you some",
    "start": "287590",
    "end": "295210"
  },
  {
    "text": "concrete guidance on this but I have yet to see a set of style guidelines which",
    "start": "295210",
    "end": "300699"
  },
  {
    "text": "is really that useful with respect to this stuff it still comes down to",
    "start": "300699",
    "end": "307150"
  },
  {
    "text": "there's no substitute for just understanding the problems that you face and being able to make the judgments and",
    "start": "307150",
    "end": "313690"
  },
  {
    "text": "it turns out that a lot of being able to make those judgments depends on understanding scope linkage and storage",
    "start": "313690",
    "end": "320349"
  },
  {
    "text": "duration and how they interact now the as you well know the initial phase of",
    "start": "320349",
    "end": "326139"
  },
  {
    "text": "translation in both C and C++ is running this thing called the preprocessor the preprocessor is what handles header file",
    "start": "326139",
    "end": "333039"
  },
  {
    "text": "inclusion macro substitution conditional compilation like hash if and hash else",
    "start": "333039",
    "end": "338469"
  },
  {
    "text": "and stuff like that but this is the key",
    "start": "338469",
    "end": "343750"
  },
  {
    "text": "term translation unit just out of curiosity how many of you are already",
    "start": "343750",
    "end": "348969"
  },
  {
    "text": "familiar with this term translation unit okay this is this is a major insight if",
    "start": "348969",
    "end": "355900"
  },
  {
    "text": "you read the standard you will see that in fact this term is used considerably",
    "start": "355900",
    "end": "361960"
  },
  {
    "text": "more than the terms header files and source files and that a way to picture",
    "start": "361960",
    "end": "371259"
  },
  {
    "text": "what's happening is that the compiler whether it's C or C++ takes your source",
    "start": "371259",
    "end": "377169"
  },
  {
    "text": "file and the first thing it does is it runs it through that portion of the compiler known as the preprocessor and",
    "start": "377169",
    "end": "383319"
  },
  {
    "text": "you can think of it as if the preprocessor is a separate program which",
    "start": "383319",
    "end": "389289"
  },
  {
    "text": "spits out another source file then that source file has a name it's called a",
    "start": "389289",
    "end": "395339"
  },
  {
    "text": "translation unit essentially a translation unit is the result of running a C or C++ source file",
    "start": "395339",
    "end": "402890"
  },
  {
    "text": "through the preprocessor and spitting out a new source file in which all of",
    "start": "402890",
    "end": "408810"
  },
  {
    "text": "the preprocessor directives have been processed all the includes have been",
    "start": "408810",
    "end": "414030"
  },
  {
    "text": "done all the conditional ifs and else's have been handled and now in fact most",
    "start": "414030",
    "end": "419850"
  },
  {
    "text": "compilers commercially available compilers have compile options to say pre process only if you want to debug a",
    "start": "419850",
    "end": "426960"
  },
  {
    "text": "macro you want to check that your conditionals are being handled properly you can actually say give me a",
    "start": "426960",
    "end": "432920"
  },
  {
    "text": "intermediate source file pre process only and often the extension that you see on that file is dot I or a I and in",
    "start": "432920",
    "end": "441150"
  },
  {
    "text": "fact most C and C++ compilers will accept one of those source files as the",
    "start": "441150",
    "end": "446790"
  },
  {
    "text": "input you can actually say here's a file that has already been pre processed and the compiler knows what to do with it it",
    "start": "446790",
    "end": "453390"
  },
  {
    "text": "knows not the pre process at any further and just run it through the rest of the compiler and so the reason why",
    "start": "453390",
    "end": "464580"
  },
  {
    "text": "translation units are so important is because many of the semantic rules",
    "start": "464580",
    "end": "470510"
  },
  {
    "text": "regarding things like linkage and storage duration are not expressed in",
    "start": "470510",
    "end": "476370"
  },
  {
    "text": "terms of headers and source files but they are expressed in terms of translation units some of you may be",
    "start": "476370",
    "end": "482040"
  },
  {
    "text": "familiar with c++ has this famous rule known as the OD are the one definition",
    "start": "482040",
    "end": "487170"
  },
  {
    "text": "rule and that stuff's all expressed in terms of translation units not in terms",
    "start": "487170",
    "end": "493290"
  },
  {
    "text": "of headers and source files but it still comes back that you're understanding about what's going on affects what you",
    "start": "493290",
    "end": "500580"
  },
  {
    "text": "decide to put into a header and what you decide to put into a source file then",
    "start": "500580",
    "end": "508620"
  },
  {
    "text": "again most of the insights come from understanding the difference between a declaration and a definition a non",
    "start": "508620",
    "end": "515039"
  },
  {
    "text": "defining declaration and a defining declaration linkage and storage duration",
    "start": "515040",
    "end": "520830"
  },
  {
    "text": "and that's where we're headed so with that little recap oh there's one other thing I want to talk about which is that",
    "start": "520830",
    "end": "526430"
  },
  {
    "text": "the compiler transforms each translation unit in an object file also known as an object",
    "start": "526430",
    "end": "533070"
  },
  {
    "text": "module and then it takes a collection of object files along with possibly",
    "start": "533070",
    "end": "539160"
  },
  {
    "text": "previously compiled object files that may be in the form of libraries links them together and produces an executable",
    "start": "539160",
    "end": "546530"
  },
  {
    "text": "now an executable program most compilers have the option of producing executables",
    "start": "546530",
    "end": "553290"
  },
  {
    "text": "which are release builds or debug builds and I'm going to focus most of my attention on the release ones the debug",
    "start": "553290",
    "end": "558990"
  },
  {
    "text": "builds are essentially release builds with a whole bunch of extra stuff thrown in for debugging purposes I'm just gonna",
    "start": "558990",
    "end": "566610"
  },
  {
    "text": "focus on the release build properties so what's in a typical object file of a",
    "start": "566610",
    "end": "575550"
  },
  {
    "text": "release built well there's two main pieces now I'm painting in broad strokes here that the details of course are a",
    "start": "575550",
    "end": "582330"
  },
  {
    "text": "little bit more intricate than this but",
    "start": "582330",
    "end": "587370"
  },
  {
    "text": "for the most part what you see in an object file the cut the information content falls into two broad categories",
    "start": "587370",
    "end": "595020"
  },
  {
    "text": "data and metadata what's the data well the data is things like machine",
    "start": "595020",
    "end": "600090"
  },
  {
    "text": "instructions turning your assignment statements and to moves loads and stores",
    "start": "600090",
    "end": "605280"
  },
  {
    "text": "and your comparisons and death into comparison Asteria if equal or while not",
    "start": "605280",
    "end": "612780"
  },
  {
    "text": "equal loops into compares and branches that's the machine instructions part and",
    "start": "612780",
    "end": "618570"
  },
  {
    "text": "then there could be values anytime you define storage for example a brace",
    "start": "618570",
    "end": "625890"
  },
  {
    "text": "initialized array that's going to become data that goes into the object file the",
    "start": "625890",
    "end": "633720"
  },
  {
    "text": "metadata falls into two broad categories and that is and this is this is key",
    "start": "633720",
    "end": "640170"
  },
  {
    "text": "right now we're gonna really build on this part right here which is that function names and object names can wind",
    "start": "640170",
    "end": "647700"
  },
  {
    "text": "up as metadata in the object files now what do I mean by metadata",
    "start": "647700",
    "end": "653520"
  },
  {
    "text": "it's that remember what the linker is going to do is take a bunch of these object files and try to weave them",
    "start": "653520",
    "end": "659520"
  },
  {
    "text": "together to produce an executable which is then a bunch of ones and zeros which loaded into memory to execute by the",
    "start": "659520",
    "end": "667950"
  },
  {
    "text": "time it gets loaded into memory things even like function names and the names of data objects are gone it's just a",
    "start": "667950",
    "end": "674850"
  },
  {
    "text": "bunch of machine instructions and bit patterns for data but the linker has to",
    "start": "674850",
    "end": "679950"
  },
  {
    "text": "use this stuff in order to be able to take to object modules in which there's",
    "start": "679950",
    "end": "686730"
  },
  {
    "text": "compiled code for example for a function code call over here calling a function",
    "start": "686730",
    "end": "692010"
  },
  {
    "text": "that's actually defined over there somehow or another the linker needs that information and so the function and",
    "start": "692010",
    "end": "698160"
  },
  {
    "text": "object names are often known as Deaf's and refs they are the definitions of",
    "start": "698160",
    "end": "705210"
  },
  {
    "text": "things like functions and objects and they are references to things like functions and objects and the linkers",
    "start": "705210",
    "end": "712290"
  },
  {
    "text": "job is to make them talk to each other and once it figures out numerically where those addresses are it says I",
    "start": "712290",
    "end": "718260"
  },
  {
    "text": "don't need that information and throws it away it doesn't wind up in the executable itself there's also stuff that guides",
    "start": "718260",
    "end": "728700"
  },
  {
    "text": "the linking program section names it's very common that code will be collected together into one logical section so",
    "start": "728700",
    "end": "735360"
  },
  {
    "text": "that if you have code in one object file and code in another object file in the",
    "start": "735360",
    "end": "740730"
  },
  {
    "text": "bound program they will become physically contiguous and similarly data in one object file and data in another",
    "start": "740730",
    "end": "747900"
  },
  {
    "text": "will be woven together by the linker so the data will be physically contiguous often and that's done through the notion",
    "start": "747900",
    "end": "755460"
  },
  {
    "text": "of logical sections but for our discussion that that part of the metadata isn't that important ok so now",
    "start": "755460",
    "end": "765990"
  },
  {
    "text": "let's talk for a moment about scope so I said I was gonna talk about three attributes scope storage duration and",
    "start": "765990",
    "end": "771330"
  },
  {
    "text": "linkage a fundamental activity within the compiler is as it sees declarations",
    "start": "771330",
    "end": "778940"
  },
  {
    "text": "the declarations have attributes associated with them and that attribute",
    "start": "778940",
    "end": "784380"
  },
  {
    "text": "information is important for two things one is it it's the information the compiler uses to validate is the name",
    "start": "784380",
    "end": "792630"
  },
  {
    "text": "being used correctly when it's being used in a context and the other part of the attribute is",
    "start": "792630",
    "end": "798240"
  },
  {
    "text": "and what do I do to generate code for it so the declarations the primary effect",
    "start": "798240",
    "end": "805560"
  },
  {
    "text": "of a declaration is to take information and put it into this internal structure known as the symbol table when the",
    "start": "805560",
    "end": "812370"
  },
  {
    "text": "compiler later sees the use of that name in the same translation unit it will",
    "start": "812370",
    "end": "817440"
  },
  {
    "text": "look it up and find out is the name declared what are the attributes is this",
    "start": "817440",
    "end": "823890"
  },
  {
    "text": "use of the name consistent with the prior declaration or is there a conflict",
    "start": "823890",
    "end": "830550"
  },
  {
    "text": "between this use and the attributes that would provoke a compiler complaint and",
    "start": "830550",
    "end": "836930"
  },
  {
    "text": "so the names are broken in distributing",
    "start": "836930",
    "end": "842220"
  },
  {
    "text": "their into regions called scope and in and essentially your informal",
    "start": "842220",
    "end": "847410"
  },
  {
    "text": "understanding is scope is a curly bracket at region of text it's not exactly that but that's most of our most",
    "start": "847410",
    "end": "854790"
  },
  {
    "text": "of us get by with that informal understanding in C there are two kinds",
    "start": "854790",
    "end": "859980"
  },
  {
    "text": "of scope regions there's actually there's four of them but the other corner cases are not even",
    "start": "859980",
    "end": "865709"
  },
  {
    "text": "worth wasting any time on there's block scope and there's file scope and basically block scope is the curly",
    "start": "865709",
    "end": "872820"
  },
  {
    "text": "bracket or block with the exception that when you're dealing with functions block scope includes names in the parameter",
    "start": "872820",
    "end": "880380"
  },
  {
    "text": "list of a function definition they are considered to be at the same scope level as local variables at the outermost",
    "start": "880380",
    "end": "886320"
  },
  {
    "text": "block and a function which is why you can't name a local variable the same as",
    "start": "886320",
    "end": "891899"
  },
  {
    "text": "a parameter and then there's file scope which is anything that is in block scope",
    "start": "891899",
    "end": "898339"
  },
  {
    "text": "anything outside of a function structure Union interestingly those of how many of",
    "start": "898339",
    "end": "904589"
  },
  {
    "text": "you program and see oh what fair number of you very interesting phenomenon this",
    "start": "904589",
    "end": "911070"
  },
  {
    "text": "is again language lawyering which is not worth laboring over a lot but C does not",
    "start": "911070",
    "end": "919410"
  },
  {
    "text": "have the notion of structure scope we often think of the names in a structure",
    "start": "919410",
    "end": "926430"
  },
  {
    "text": "as being in their own scope but that is not the formalism",
    "start": "926430",
    "end": "932100"
  },
  {
    "text": "you see when you read the C standard they actually say that each structure forms its own namespace which is an",
    "start": "932100",
    "end": "940079"
  },
  {
    "text": "alternate phrasing but the net effect is that structure scope in sorry structure",
    "start": "940079",
    "end": "947430"
  },
  {
    "text": "namespaces in C or almost the same in",
    "start": "947430",
    "end": "952470"
  },
  {
    "text": "behavior as if they were their own scope",
    "start": "952470",
    "end": "958370"
  },
  {
    "text": "but like for example one of the curious things about the structure namespace in",
    "start": "959180",
    "end": "966740"
  },
  {
    "text": "C is that you cannot declare things like types in a structure well you know what",
    "start": "966740",
    "end": "973410"
  },
  {
    "text": "happens if you do that does anyone know if you actually put a type def or an enumeration definition inside the curly",
    "start": "973410",
    "end": "980190"
  },
  {
    "text": "braces of a struct do you know what happens say C programmers don't even go there you do this all the time in C++",
    "start": "980190",
    "end": "987199"
  },
  {
    "text": "but in C all it does is it takes that definition and treats it as if it were",
    "start": "987199",
    "end": "992910"
  },
  {
    "text": "in the enclosing scope of the structured definition in other words you try to put it there and immediately it just gets",
    "start": "992910",
    "end": "998970"
  },
  {
    "text": "dragged out one level structures are not their own scope and see that's why I",
    "start": "998970",
    "end": "1005360"
  },
  {
    "text": "don't bring that up here in C++ what C calls block scope and file scope is",
    "start": "1005360",
    "end": "1012620"
  },
  {
    "text": "actually called global and local scope in C++ and I believe these are more",
    "start": "1012620",
    "end": "1017899"
  },
  {
    "text": "popular terms even C programmers will use these terms in preference to file",
    "start": "1017899",
    "end": "1023600"
  },
  {
    "text": "scope and block scope and that's so that's the way I'm going to do it since I'm trying to talk about both C and C++ here I'm going to use the C++",
    "start": "1023600",
    "end": "1031280"
  },
  {
    "text": "terminology C++ adds class scope and",
    "start": "1031280",
    "end": "1039048"
  },
  {
    "text": "namespace scope with these interesting notes first of all in C++ classes",
    "start": "1039049",
    "end": "1044120"
  },
  {
    "text": "structures and unions are all the same thing a struct is just a class in which",
    "start": "1044120",
    "end": "1052429"
  },
  {
    "text": "all of the members are public by default and a union is just a struct in which",
    "start": "1052429",
    "end": "1058010"
  },
  {
    "text": "all the members are at offset zero but otherwise they behave according to the",
    "start": "1058010",
    "end": "1064669"
  },
  {
    "text": "same rules and in C++ namespace scope is a",
    "start": "1064669",
    "end": "1069940"
  },
  {
    "text": "generalization of the global scope that essentially glow the global scope in C++",
    "start": "1069940",
    "end": "1076210"
  },
  {
    "text": "is just treated as another namespace and you will see examples of that very",
    "start": "1076210",
    "end": "1082389"
  },
  {
    "text": "shortly but there's enough similarities between what's going on with namespace scope in C++ and the global scope in C I",
    "start": "1082389",
    "end": "1091570"
  },
  {
    "text": "can talk about them as if they're all behaving according to consistent rules",
    "start": "1091570",
    "end": "1097860"
  },
  {
    "text": "okay now here is a biggie this is one of the key points of this talk well",
    "start": "1099600",
    "end": "1105669"
  },
  {
    "text": "everything else was leading up to that which is that the concept of scope",
    "start": "1105669",
    "end": "1111999"
  },
  {
    "text": "applies only to a single translation unit each one translation unit at a time",
    "start": "1111999",
    "end": "1117429"
  },
  {
    "text": "there is no such thing as global scope which somehow escapes a translation unit",
    "start": "1117429",
    "end": "1125470"
  },
  {
    "text": "into the program at large okay that's the myth that I see in a lot of articles",
    "start": "1125470",
    "end": "1132220"
  },
  {
    "text": "and just you know online discussions about C and C++ as they talk as if there",
    "start": "1132220",
    "end": "1140169"
  },
  {
    "text": "is something beyond the scope of a single translation unit and there isn't because a scope is just a region of text",
    "start": "1140169",
    "end": "1148299"
  },
  {
    "text": "in a translation unit in this in a source and a header file that's all it",
    "start": "1148299",
    "end": "1153669"
  },
  {
    "text": "is nothing higher than that so how is it that a name used in one translation unit",
    "start": "1153669",
    "end": "1162909"
  },
  {
    "text": "can refer to the same the name with the same spelling in another translation and",
    "start": "1162909",
    "end": "1167950"
  },
  {
    "text": "the answer is it does it with linkage and so I want to make these distinctions",
    "start": "1167950",
    "end": "1175119"
  },
  {
    "text": "really clear as to what's going on and give you what I think is a fairly accurate conceptual model of how this",
    "start": "1175119",
    "end": "1181240"
  },
  {
    "text": "happens within the compiler and how it affects the way you organize things so",
    "start": "1181240",
    "end": "1187119"
  },
  {
    "text": "once again you know the problem is a lot of programmers have trouble separating scope storage duration linkage and",
    "start": "1187119",
    "end": "1193119"
  },
  {
    "text": "that's because the language tries to get by both C and C plus",
    "start": "1193119",
    "end": "1199539"
  },
  {
    "text": "do this with probably arguably too few keywords in particular the keywords",
    "start": "1199539",
    "end": "1206830"
  },
  {
    "text": "static has been stretched to the breaking point in C++ and I'll show you",
    "start": "1206830",
    "end": "1212350"
  },
  {
    "text": "what I mean by that so from a language perspective this is",
    "start": "1212350",
    "end": "1218109"
  },
  {
    "text": "largely driven by these keywords in the language known as storage class specifiers if Auto X turns register",
    "start": "1218109",
    "end": "1226239"
  },
  {
    "text": "static thread-local and type def that's the current set in C now a couple of",
    "start": "1226239",
    "end": "1231669"
  },
  {
    "text": "things to know one of them is thread-local is actually not a key word and tomorrow I'm going to be giving a",
    "start": "1231669",
    "end": "1239830"
  },
  {
    "text": "talk on called new features in C and I'm going to explain the underlying",
    "start": "1239830",
    "end": "1245080"
  },
  {
    "text": "philosophy of why C does what I'm showing you here is but actually the key word is underscore capital T",
    "start": "1245080",
    "end": "1251489"
  },
  {
    "text": "thread-local that's the reserved word",
    "start": "1251489",
    "end": "1257460"
  },
  {
    "text": "thread-local itself with the lowercase T no leading underscore is actually a",
    "start": "1257460",
    "end": "1263349"
  },
  {
    "text": "macro and you can only use it by including a header first type def is not",
    "start": "1263349",
    "end": "1272979"
  },
  {
    "text": "really a storage class either the grammar of the C language throws type def in with these others simply as a",
    "start": "1272979",
    "end": "1281279"
  },
  {
    "text": "syntactic convenience and there's actually a footnote in the standard that says that this is a little it's a",
    "start": "1281279",
    "end": "1288249"
  },
  {
    "text": "grammatical hack they don't use that term just to make the grammar a little bit easier to write but type def is not",
    "start": "1288249",
    "end": "1296889"
  },
  {
    "text": "a storage class really C++ provides",
    "start": "1296889",
    "end": "1305200"
  },
  {
    "text": "these four extern mutable static and thread-local there is some overlap",
    "start": "1305200",
    "end": "1311039"
  },
  {
    "text": "mutable is used only in the declaration of class members and it's a way of",
    "start": "1311039",
    "end": "1317499"
  },
  {
    "text": "essentially nullifying constant asst and it again it's put in with the storage",
    "start": "1317499",
    "end": "1323409"
  },
  {
    "text": "classes but it's arguable that it doesn't really behave like the other storage classes in the way that I'm",
    "start": "1323409",
    "end": "1328869"
  },
  {
    "text": "about to show you what happened to Otto that was back",
    "start": "1328869",
    "end": "1335140"
  },
  {
    "text": "there in the list from C Otto has been a storage class specifier in C since C was",
    "start": "1335140",
    "end": "1343600"
  },
  {
    "text": "Z back in 1972 and nobody uses it and that's because the only valid place for",
    "start": "1343600",
    "end": "1352090"
  },
  {
    "text": "using the keyword Otto in C is to declare a local variable and the default",
    "start": "1352090",
    "end": "1357250"
  },
  {
    "text": "if you don't put the Otto there is Otto in other words so Otto is a keyword",
    "start": "1357250",
    "end": "1363010"
  },
  {
    "text": "whose only use is to restate a default and do nothing else it's pretty useless",
    "start": "1363010",
    "end": "1368860"
  },
  {
    "text": "so C++ said well since it's so useless we have a need for a keyword and we",
    "start": "1368860",
    "end": "1375550"
  },
  {
    "text": "don't want to invent a new one they actually stole it in C++ and made it a type specifier how about register what",
    "start": "1375550",
    "end": "1385180"
  },
  {
    "text": "happened to that register is still a keyword in C and but it says the meaning",
    "start": "1385180",
    "end": "1394270"
  },
  {
    "text": "is it's mostly it says it's implementation to find meaning it's up",
    "start": "1394270",
    "end": "1399400"
  },
  {
    "text": "to what the compiler wants to do with it and there's a footnote that says and the intent is it's supposed to speed things",
    "start": "1399400",
    "end": "1405370"
  },
  {
    "text": "up in some way well the in C++ the",
    "start": "1405370",
    "end": "1410590"
  },
  {
    "text": "attitude is hey come on optimizers do better than you can and so it's it's",
    "start": "1410590",
    "end": "1416800"
  },
  {
    "text": "been that way for at least twenty years now that C++ compilers have been ignoring the key word register and so",
    "start": "1416800",
    "end": "1425230"
  },
  {
    "text": "now the status of register in C++ is it's still a keyword and it has no meaning",
    "start": "1425230",
    "end": "1431790"
  },
  {
    "text": "that's simply they say it's a keyword with no meaning it will be repurposed sometime in the next decade that's",
    "start": "1431790",
    "end": "1439000"
  },
  {
    "text": "what's going to happen with it I believe the only difference in C with register",
    "start": "1439000",
    "end": "1444130"
  },
  {
    "text": "is there may be some subtleties about you can't take the address of a register object but other than that it behaves",
    "start": "1444130",
    "end": "1451570"
  },
  {
    "text": "just like an auto so let's focus our",
    "start": "1451570",
    "end": "1456670"
  },
  {
    "text": "attention on these three these are the three that are common to C and C++ and",
    "start": "1456670",
    "end": "1463300"
  },
  {
    "text": "there's a to create enough examples to show the distinction between linkage storage",
    "start": "1463300",
    "end": "1470779"
  },
  {
    "text": "duration now the rule is that most one",
    "start": "1470779",
    "end": "1477679"
  },
  {
    "text": "storage class specifier can appear on a declaration with one exception and that",
    "start": "1477679",
    "end": "1482900"
  },
  {
    "text": "exception is thread-local is allowed to appear with extern or static so you can",
    "start": "1482900",
    "end": "1489980"
  },
  {
    "text": "have external ocol or static thread-local but otherwise you can only have one of these and there are some",
    "start": "1489980",
    "end": "1497149"
  },
  {
    "text": "declarations where this stuff just isn't permitted at all for example you're not",
    "start": "1497149",
    "end": "1503720"
  },
  {
    "text": "allowed to use the keyword extern in either C or C++ to declare the member of",
    "start": "1503720",
    "end": "1509960"
  },
  {
    "text": "a struct or class that's not valid now",
    "start": "1509960",
    "end": "1516980"
  },
  {
    "text": "there are contexts in which the presence or absence of a particular keyword has",
    "start": "1516980",
    "end": "1522110"
  },
  {
    "text": "no effect right there those two are the same thing add or remove that X turn the program's",
    "start": "1522110",
    "end": "1529190"
  },
  {
    "text": "behavior doesn't change at all and this is true for both C and C++ in both cases",
    "start": "1529190",
    "end": "1535460"
  },
  {
    "text": "that is defining an object named n whose initial value is 42 and if this appears",
    "start": "1535460",
    "end": "1543559"
  },
  {
    "text": "at global scope or namespace scope and C++ they behave exactly the same on the",
    "start": "1543559",
    "end": "1555559"
  },
  {
    "text": "other hand most of the time when you do put a storage class specifier on a declaration expect it to have an effect",
    "start": "1555559",
    "end": "1562779"
  },
  {
    "text": "in particular with those two at the bottom the first one has the explicit",
    "start": "1562779",
    "end": "1570169"
  },
  {
    "text": "presence of extern that turns that declaration into a non defining",
    "start": "1570169",
    "end": "1576429"
  },
  {
    "text": "declaration says this is not a definition for n this is saying there is",
    "start": "1576429",
    "end": "1581600"
  },
  {
    "text": "an N and it's somewhere else but the",
    "start": "1581600",
    "end": "1586640"
  },
  {
    "text": "second one says there's an N and here it is and again this is true in both C and",
    "start": "1586640",
    "end": "1593840"
  },
  {
    "text": "C++ when this appears at non class scope",
    "start": "1593840",
    "end": "1599289"
  },
  {
    "text": "so what's the underlying principle behind that distinction between extern",
    "start": "1599830",
    "end": "1605300"
  },
  {
    "text": "or no extern it's that for object C with functions we saw earlier the distinction",
    "start": "1605300",
    "end": "1611390"
  },
  {
    "text": "between a declaration that's not a definition and a definition is the presence or absence of a function body",
    "start": "1611390",
    "end": "1619810"
  },
  {
    "text": "in with objects there isn't a simple",
    "start": "1619810",
    "end": "1625570"
  },
  {
    "text": "syntactic specification that says this one is a declaration not quite as clear",
    "start": "1625570",
    "end": "1633080"
  },
  {
    "text": "as is that but as you'll see in a moment it's almost as clear but the underlying",
    "start": "1633080",
    "end": "1638510"
  },
  {
    "text": "concept is that an object definition is going to allocate storage and an object",
    "start": "1638510",
    "end": "1643850"
  },
  {
    "text": "and a non defining declaration is not it's going to say it's somewhere else so",
    "start": "1643850",
    "end": "1653330"
  },
  {
    "text": "the C++ rule for definitions outside of",
    "start": "1653330",
    "end": "1661700"
  },
  {
    "text": "a class is right there in in bold it says that a definition the declaration",
    "start": "1661700",
    "end": "1668960"
  },
  {
    "text": "is a definition unless it has the keyword extern and no initializer so",
    "start": "1668960",
    "end": "1676040"
  },
  {
    "text": "that first one lacks an extern notice it",
    "start": "1676040",
    "end": "1681260"
  },
  {
    "text": "doesn't have initializer it died but it also lacks extern that's a definition that allocates storage for I what's its",
    "start": "1681260",
    "end": "1690380"
  },
  {
    "text": "initial value anyone know what's the",
    "start": "1690380",
    "end": "1697190"
  },
  {
    "text": "initial value pardon",
    "start": "1697190",
    "end": "1703629"
  },
  {
    "text": "yes if well if it if it's if it occurs outside of a block it's actually defined",
    "start": "1703690",
    "end": "1710720"
  },
  {
    "text": "behavior that it's zero and that's that's just not a quirk of some compiler",
    "start": "1710720",
    "end": "1715820"
  },
  {
    "text": "that is a specification of both the sea and the C++ standards that statically",
    "start": "1715820",
    "end": "1721960"
  },
  {
    "text": "that's actually I just jumped ahead it has the property that that thing is statically allocated which I'll get to",
    "start": "1721960",
    "end": "1728090"
  },
  {
    "text": "in a moment statically allocated objects are zeroed that at programs start up and",
    "start": "1728090",
    "end": "1735559"
  },
  {
    "text": "that's that is a well specified feature",
    "start": "1735559",
    "end": "1741279"
  },
  {
    "text": "now for local variables that's why you are hesitating local variables there's",
    "start": "1741279",
    "end": "1748880"
  },
  {
    "text": "the the official term is it has an indeterminate value which is a polite",
    "start": "1748880",
    "end": "1754640"
  },
  {
    "text": "way of saying it's whatever stray bits we're in there from some previous use of",
    "start": "1754640",
    "end": "1762289"
  },
  {
    "text": "that storage the second one of these extern int J that's the way you write a",
    "start": "1762289",
    "end": "1770419"
  },
  {
    "text": "declaration for an object in C++ to",
    "start": "1770419",
    "end": "1775490"
  },
  {
    "text": "guarantee that it's just a declaration and then the last one is a definition",
    "start": "1775490",
    "end": "1781130"
  },
  {
    "text": "because although it has extern it has an initializer which says hey I can't can't",
    "start": "1781130",
    "end": "1786649"
  },
  {
    "text": "put an initial value there unless I'm also allocating the storage so what are",
    "start": "1786649",
    "end": "1792679"
  },
  {
    "text": "the implications of this well if you want to you know what you'll see in a",
    "start": "1792679",
    "end": "1799880"
  },
  {
    "text": "moment is that there are real problems putting the first one or the last one in a header file only that only the one in",
    "start": "1799880",
    "end": "1807890"
  },
  {
    "text": "the middle can safely be placed in header files in general now the rules in",
    "start": "1807890",
    "end": "1815539"
  },
  {
    "text": "C are a bit more complicated than this but if you follow this C++ rule it will",
    "start": "1815539",
    "end": "1822110"
  },
  {
    "text": "work perfectly in C you see has some more intricate wording that allows a",
    "start": "1822110",
    "end": "1828559"
  },
  {
    "text": "little bit more slop and I just encourage people just follow the C++ rules whether you're in C++ or C and you",
    "start": "1828559",
    "end": "1835279"
  },
  {
    "text": "won't go wrong you will not have con flicks now here's what makes static",
    "start": "1835279",
    "end": "1844400"
  },
  {
    "text": "particularly troublesome one is that sometimes it affects the way programs",
    "start": "1844400",
    "end": "1849420"
  },
  {
    "text": "allocate storage other times it affects the way object files link together and",
    "start": "1849420",
    "end": "1854690"
  },
  {
    "text": "then in C++ it turns out that can alter the behavior of a class member function",
    "start": "1854690",
    "end": "1861800"
  },
  {
    "text": "that the keyword static doesn't change the storage allocation it doesn't change the linkage properties it only changes",
    "start": "1861800",
    "end": "1869640"
  },
  {
    "text": "the parameter list of a function in a subtle way so remember this about class",
    "start": "1869640",
    "end": "1876630"
  },
  {
    "text": "storage specifiers which is that they affect linkage and storage duration of names but they don't affect scope so",
    "start": "1876630",
    "end": "1886980"
  },
  {
    "text": "what I've used this term storage duration now let's dive in talk about a little bit about what it is it's that it",
    "start": "1886980",
    "end": "1892980"
  },
  {
    "text": "affects the lifetime of an object its how does the the runtime system of a",
    "start": "1892980",
    "end": "1898290"
  },
  {
    "text": "program manage the storage for an object by the way this is a property only of",
    "start": "1898290",
    "end": "1903660"
  },
  {
    "text": "objects not of functions not of data types but of objects and the four type",
    "start": "1903660",
    "end": "1910590"
  },
  {
    "text": "the four kinds of storage of duration are static thread automatic and dynamic",
    "start": "1910590",
    "end": "1916970"
  },
  {
    "text": "in thread is relatively new that was added in C++ 11 and in C 11 so what a",
    "start": "1916970",
    "end": "1928980"
  },
  {
    "text": "static storage means it means basically the storage for the object is allocated when the program starts and the object",
    "start": "1928980",
    "end": "1937200"
  },
  {
    "text": "stays where it is in place for the entire execution of the program and goes",
    "start": "1937200",
    "end": "1943590"
  },
  {
    "text": "away well after the program is done running you don't care whether it goes away or not thread storage duration is",
    "start": "1943590",
    "end": "1951870"
  },
  {
    "text": "there's a real similarity between that and static the only difference is that it's the duration of the execution of a",
    "start": "1951870",
    "end": "1958320"
  },
  {
    "text": "thread thread starts up if it has thread local storage that thread-local storage will be allocated at that time it may",
    "start": "1958320",
    "end": "1966720"
  },
  {
    "text": "have been set aside prior to the start of the thread conceptually you only have access to it until the",
    "start": "1966720",
    "end": "1974830"
  },
  {
    "text": "thread starts running and it's there as long as the thread remains running automatic this is the stuff that's",
    "start": "1974830",
    "end": "1982509"
  },
  {
    "text": "typically local to a block right inside a curly bracket and function body or a",
    "start": "1982509",
    "end": "1988360"
  },
  {
    "text": "block nested therein and the storage is allocated when the block begins now just a brief aside is that a function",
    "start": "1988360",
    "end": "1997649"
  },
  {
    "text": "functions can have blocks within them and there can be declarations within those curly bracket and bodies does the",
    "start": "1997649",
    "end": "2005730"
  },
  {
    "text": "runtime system wait until it enters a block to actually allocate that storage or does it is it allowed to do it",
    "start": "2005730",
    "end": "2012269"
  },
  {
    "text": "earlier and a lot of compilers will actually look at all the nested blocks and figure out how much storage do I",
    "start": "2012269",
    "end": "2018929"
  },
  {
    "text": "need for the most deeply nested for the outermost block and that most deeply nested one and it will allocate all of",
    "start": "2018929",
    "end": "2024809"
  },
  {
    "text": "that a Punk function entry and it may be that some of that stuff in the stack doesn't get used but the concept is",
    "start": "2024809",
    "end": "2033149"
  },
  {
    "text": "though that that storage isn't allocated until you actually cross over the curly",
    "start": "2033149",
    "end": "2038370"
  },
  {
    "text": "bracket 'add body and enter that block and conceptually it goes away when you",
    "start": "2038370",
    "end": "2046679"
  },
  {
    "text": "exit that block but it may be that it waits until it actually returns from the function to actually D allocate it from",
    "start": "2046679",
    "end": "2053520"
  },
  {
    "text": "the stack because that's often more efficient from a performance standpoint",
    "start": "2053520",
    "end": "2059510"
  },
  {
    "text": "dynamic this is the stuff that you do manually and see it would be commonly with malloc calloc realloc functions",
    "start": "2060919",
    "end": "2068700"
  },
  {
    "text": "like that and free in C++ it's typically operator new and operator delete and",
    "start": "2068700",
    "end": "2075300"
  },
  {
    "text": "there are lots of different flavors of operator new and delete in within C++ but it's a manual operation and you're",
    "start": "2075300",
    "end": "2083128"
  },
  {
    "text": "carving up a pool of memory often known as in C it's called the heap and C++",
    "start": "2083129",
    "end": "2088349"
  },
  {
    "text": "it's called the free store and now",
    "start": "2088349",
    "end": "2093839"
  },
  {
    "text": "linkage this is the most interesting one",
    "start": "2093839",
    "end": "2098030"
  },
  {
    "text": "essentially linkage is the property that a name can have which allows a name to",
    "start": "2099200",
    "end": "2106049"
  },
  {
    "text": "be declared in more than one place and have those two declarations wind up",
    "start": "2106049",
    "end": "2111660"
  },
  {
    "text": "referring to the same entity that's what linkage is and there are actual and",
    "start": "2111660",
    "end": "2120089"
  },
  {
    "text": "there are three kinds of linkage external internal and no linkage we're going to go through each of these in",
    "start": "2120089",
    "end": "2126450"
  },
  {
    "text": "some detail and then drum roll turns out C++ is going to add it's now in the the",
    "start": "2126450",
    "end": "2135960"
  },
  {
    "text": "new specification of C++ C++ 20 has a feature called modules and modules the",
    "start": "2135960",
    "end": "2142799"
  },
  {
    "text": "intent is to eventually replace they use some header files use it with a",
    "start": "2142799",
    "end": "2149250"
  },
  {
    "text": "different scheme for doing separate compilation that frees us from some of",
    "start": "2149250",
    "end": "2154290"
  },
  {
    "text": "the tyranny of the preprocessor and so in order to support the semantics of modules there's now another kind of",
    "start": "2154290",
    "end": "2161369"
  },
  {
    "text": "linkage called module linkage now modules are a whole nother lecture so",
    "start": "2161369",
    "end": "2166650"
  },
  {
    "text": "other than to mention that this is coming down the road I'm going to stick with the other three that'll take a the",
    "start": "2166650",
    "end": "2172890"
  },
  {
    "text": "available time we have anyway but my one of the things that I want to suggest is",
    "start": "2172890",
    "end": "2178980"
  },
  {
    "text": "that those of you who are going to be working in C++ what you want to do as",
    "start": "2178980",
    "end": "2184920"
  },
  {
    "text": "you a tackle your new understanding of modules is apply the kind of stuff that",
    "start": "2184920",
    "end": "2191099"
  },
  {
    "text": "I'm talking about here as the under make sure that you have an good underlying",
    "start": "2191099",
    "end": "2196410"
  },
  {
    "text": "model of what modulars are doing in terms of storage duration and linkage because that's where the key insights",
    "start": "2196410",
    "end": "2203940"
  },
  {
    "text": "are gonna you're gonna see a lot of tutorials that will just say don't worry just do this do this do this and it'll",
    "start": "2203940",
    "end": "2209400"
  },
  {
    "text": "work and there's a lot of that goes on in C and C++ and for the most part",
    "start": "2209400",
    "end": "2214559"
  },
  {
    "text": "people learn to program and C by not worrying about it until it bites them right and then you got to really figure",
    "start": "2214559",
    "end": "2222420"
  },
  {
    "text": "out what's going on here and and and and this is the model the kind of model you need",
    "start": "2222420",
    "end": "2228780"
  },
  {
    "text": "okay so external linkage is when you can",
    "start": "2228780",
    "end": "2233910"
  },
  {
    "text": "have a name declared in two completely separate translation units the same name",
    "start": "2233910",
    "end": "2241070"
  },
  {
    "text": "but at length time those two names become one so the external means that's",
    "start": "2241070",
    "end": "2247920"
  },
  {
    "text": "the way you cross one translation unit boundary this is what's really happening",
    "start": "2247920",
    "end": "2253860"
  },
  {
    "text": "when people tell you that that when you put the word static it takes it from",
    "start": "2253860",
    "end": "2261420"
  },
  {
    "text": "being this super global scope down to just being a module level scope well",
    "start": "2261420",
    "end": "2268170"
  },
  {
    "text": "they're really trying to avoid telling you that what the real machinery that does this is external linkage that's",
    "start": "2268170",
    "end": "2275970"
  },
  {
    "text": "that's really what's going on and so here we have a total an object called",
    "start": "2275970",
    "end": "2282240"
  },
  {
    "text": "total which is defined and file1 its but",
    "start": "2282240",
    "end": "2288270"
  },
  {
    "text": "notice it's it's got the keyword X turn on which says it has external linkage but that is a definition it does have an",
    "start": "2288270",
    "end": "2294480"
  },
  {
    "text": "initial value equals 0 in the second",
    "start": "2294480",
    "end": "2300170"
  },
  {
    "text": "translation unit file 2 it says X turn in total that does not have an initializer so that's just a non",
    "start": "2300170",
    "end": "2306450"
  },
  {
    "text": "defining declaration those two things become one after separately compiling",
    "start": "2306450",
    "end": "2314130"
  },
  {
    "text": "each of those you link them together there's only one total in this program",
    "start": "2314130",
    "end": "2320450"
  },
  {
    "text": "compare that with internal linkage names with internal linkage can be declared",
    "start": "2321050",
    "end": "2327210"
  },
  {
    "text": "multiple times within a single translation unit and they all wind up referring to the same thing but they",
    "start": "2327210",
    "end": "2334380"
  },
  {
    "text": "can't refer but nobody outside the translation unit can refer to those things with internal linkage so here in",
    "start": "2334380",
    "end": "2343200"
  },
  {
    "text": "file 1 we have total now declared with the keyword static that's not just a",
    "start": "2343200",
    "end": "2349110"
  },
  {
    "text": "declaration that's it's a definition for total with internal linkage and in the",
    "start": "2349110",
    "end": "2357630"
  },
  {
    "text": "other file you have a declan on defining declaration with external linkage and that says hey I don't have any",
    "start": "2357630",
    "end": "2365020"
  },
  {
    "text": "storage I need it from somewhere else but it can't get it from file one file",
    "start": "2365020",
    "end": "2372310"
  },
  {
    "text": "one does not have external linkage they these things the linker can't make them",
    "start": "2372310",
    "end": "2378010"
  },
  {
    "text": "become one so if you want this probe by",
    "start": "2378010",
    "end": "2383140"
  },
  {
    "text": "the way if you try to build this program because that's an unsatisfied reference",
    "start": "2383140",
    "end": "2388990"
  },
  {
    "text": "in file two you would probably get a",
    "start": "2388990",
    "end": "2394930"
  },
  {
    "text": "link error at that link time it would say I don't see a definition for total",
    "start": "2394930",
    "end": "2401470"
  },
  {
    "text": "to satisfy that and you say well can I get out of file one the answer is no",
    "start": "2401470",
    "end": "2406680"
  },
  {
    "text": "because file one doesn't know that that total does not have external linkage so",
    "start": "2406680",
    "end": "2416290"
  },
  {
    "text": "what you need is a third one there you need to have file three has a definition",
    "start": "2416290",
    "end": "2424360"
  },
  {
    "text": "for a total so that the one in file two can refer to the one in file three now",
    "start": "2424360",
    "end": "2431950"
  },
  {
    "text": "the program will build and how many totals are there in this program there are two of them one internal to file one",
    "start": "2431950",
    "end": "2439390"
  },
  {
    "text": "and one that's shared by file two and file three shared via external linkage",
    "start": "2439390",
    "end": "2446490"
  },
  {
    "text": "then there's the concept of no linkage local variables have no linkage you have",
    "start": "2447180",
    "end": "2453700"
  },
  {
    "text": "two functions F and G they each have a local variable name total but think",
    "start": "2453700",
    "end": "2459280"
  },
  {
    "text": "about it is there any way you can write a declaration for total anywhere else in",
    "start": "2459280",
    "end": "2464560"
  },
  {
    "text": "the program that will at linked time become a reference to one of those",
    "start": "2464560",
    "end": "2469930"
  },
  {
    "text": "totals that's inside the function body no thief those totals have automatic",
    "start": "2469930",
    "end": "2481360"
  },
  {
    "text": "storage they are not statically allocated because they don't have a fixed location there's no way that the",
    "start": "2481360",
    "end": "2488410"
  },
  {
    "text": "linker can say oh I know how to link to that thing because that thing doesn't have a guaranteed spot at runtime",
    "start": "2488410",
    "end": "2495550"
  },
  {
    "text": "the only things that can have linkage are things that have fixed locations",
    "start": "2495550",
    "end": "2502030"
  },
  {
    "text": "functions and objects with static storage so here's a good conceptual",
    "start": "2502030",
    "end": "2511040"
  },
  {
    "text": "model of what's happening is that names that have external linkage our names",
    "start": "2511040",
    "end": "2518060"
  },
  {
    "text": "that are passed on to the linker in a release build names that have internal",
    "start": "2518060",
    "end": "2525440"
  },
  {
    "text": "linkage and no linkage are useful if you're doing symbolic debugging but the",
    "start": "2525440",
    "end": "2531020"
  },
  {
    "text": "linker doesn't use them when it is combining object files together to",
    "start": "2531020",
    "end": "2537140"
  },
  {
    "text": "produce an executable so names defined",
    "start": "2537140",
    "end": "2542540"
  },
  {
    "text": "with external linkage in a translation you to become deaths definitions in the",
    "start": "2542540",
    "end": "2547790"
  },
  {
    "text": "compiled object file names declared with external linkage but not defined become",
    "start": "2547790",
    "end": "2553490"
  },
  {
    "text": "refs essentially add F in an object file says I've got an externally defined name",
    "start": "2553490",
    "end": "2560600"
  },
  {
    "text": "and I'm making it available for other people to refer to it a ref says my",
    "start": "2560600",
    "end": "2567590"
  },
  {
    "text": "translation unit needs this thing I'm mentioning this name but I don't have a",
    "start": "2567590",
    "end": "2573380"
  },
  {
    "text": "definition for it I need to get it from somewhere else those things are passed",
    "start": "2573380",
    "end": "2578720"
  },
  {
    "text": "on into the object files with if they have external linkage and for the most",
    "start": "2578720",
    "end": "2584720"
  },
  {
    "text": "part the compiler discards names that are declared with internal or no linkage",
    "start": "2584720",
    "end": "2591940"
  },
  {
    "text": "they don't make their way into the release build object files okay so let's",
    "start": "2591940",
    "end": "2600290"
  },
  {
    "text": "look at some examples here you know by default functions which are at file",
    "start": "2600290",
    "end": "2605780"
  },
  {
    "text": "scope in C have external linkage by default so most of the behaviors you're",
    "start": "2605780",
    "end": "2612680"
  },
  {
    "text": "about to see are things you're gonna nod yeah I see this and this model that you're giving me fits but I think it's",
    "start": "2612680",
    "end": "2618530"
  },
  {
    "text": "worth illustrating them with a few examples the same thing will happen if you put names at namespace scope in C++",
    "start": "2618530",
    "end": "2626630"
  },
  {
    "text": "adding the word extern on a function declaration has no effect for a function",
    "start": "2626630",
    "end": "2632989"
  },
  {
    "text": "that's at global scope or in a namespace in C++ whether you put the X turn there",
    "start": "2632989",
    "end": "2638450"
  },
  {
    "text": "and not the behavior is the same class",
    "start": "2638450",
    "end": "2643819"
  },
  {
    "text": "members in C++ have external linkage by default you know those of you who do",
    "start": "2643819",
    "end": "2649640"
  },
  {
    "text": "program in C++ know that you commonly place class definitions in header files",
    "start": "2649640",
    "end": "2655549"
  },
  {
    "text": "and you include those all over the place and create objects of that type and call",
    "start": "2655549",
    "end": "2660619"
  },
  {
    "text": "member functions on them and at nowhere did you say these things were extern you just treat them as if they are they have",
    "start": "2660619",
    "end": "2667400"
  },
  {
    "text": "external linkage by default and if you",
    "start": "2667400",
    "end": "2673279"
  },
  {
    "text": "explicitly put the word extra in there the compiler says no I got it covered",
    "start": "2673279",
    "end": "2681609"
  },
  {
    "text": "you have no choice about it its external so you can't even restate the default in",
    "start": "2681609",
    "end": "2688839"
  },
  {
    "text": "C++ now when you declare a function with the",
    "start": "2688839",
    "end": "2697460"
  },
  {
    "text": "keyword static all that does is change the linkage functions don't have a",
    "start": "2697460",
    "end": "2704210"
  },
  {
    "text": "storage duration so the only thing that this is doing is changing the linkage properties gives it internal linkage but",
    "start": "2704210",
    "end": "2712460"
  },
  {
    "text": "with C++ classes there are these things called static member functions and as I",
    "start": "2712460",
    "end": "2718849"
  },
  {
    "text": "stated a moment ago class members in C++ always have external linkage and this static doesn't change that even these",
    "start": "2718849",
    "end": "2727579"
  },
  {
    "text": "things called static member functions still have external linkage what happens",
    "start": "2727579",
    "end": "2733339"
  },
  {
    "text": "is it changes the parameter list in AC in C++ class member functions have an",
    "start": "2733339",
    "end": "2739700"
  },
  {
    "text": "implicitly generated parameter called this and what the keyword static does on",
    "start": "2739700",
    "end": "2745940"
  },
  {
    "text": "a function is it tells to the compiler take away this pointer from this",
    "start": "2745940",
    "end": "2753739"
  },
  {
    "text": "function which seems like what static does that it turns out it's it's actually because",
    "start": "2753739",
    "end": "2760790"
  },
  {
    "text": "that makes sense given what a static data member is that static member functions are used for manipulating",
    "start": "2760790",
    "end": "2766400"
  },
  {
    "text": "static data members and static data members turn out that's not such an outrageous thing to call them that in",
    "start": "2766400",
    "end": "2773000"
  },
  {
    "text": "C++ now objects that file our namespace",
    "start": "2773000",
    "end": "2778880"
  },
  {
    "text": "scope always have static storage duration it doesn't matter what keyword you put in front of them if it's global",
    "start": "2778880",
    "end": "2786200"
  },
  {
    "text": "or if it's in a namespace they always have static storage duration what is the static or extern do it changes the",
    "start": "2786200",
    "end": "2793250"
  },
  {
    "text": "linkage so let me just as an aside here",
    "start": "2793250",
    "end": "2798500"
  },
  {
    "text": "the key point I'm trying to make is the real insight into what's going on in C",
    "start": "2798500",
    "end": "2803540"
  },
  {
    "text": "and C++ with respect to objects and functions is to understand there are these three attributes scope storage",
    "start": "2803540",
    "end": "2810080"
  },
  {
    "text": "duration and linkage and the keywords can you really lead you astray because",
    "start": "2810080",
    "end": "2816140"
  },
  {
    "text": "if you're talking to somebody else you can just say I have a static object here what does that really mean are you",
    "start": "2816140",
    "end": "2822260"
  },
  {
    "text": "talking about something with static storage are you talking about something with external linkage and static storage",
    "start": "2822260",
    "end": "2828110"
  },
  {
    "text": "are you talking about something with internal linkage the way to clarify your conversations with your colleagues is to",
    "start": "2828110",
    "end": "2835520"
  },
  {
    "text": "use the underlying attribute when you talk about the property of the thing and and make it and then understand that the",
    "start": "2835520",
    "end": "2844340"
  },
  {
    "text": "way it got there was through the appropriate use of the keywords extern and Static and the proper placement in",
    "start": "2844340",
    "end": "2851390"
  },
  {
    "text": "scope objects at local scope can have",
    "start": "2851390",
    "end": "2858200"
  },
  {
    "text": "almost any storage duration as well in that notice that the first one has",
    "start": "2858200",
    "end": "2863740"
  },
  {
    "text": "static and the second one are both static storage duration the third one",
    "start": "2863740",
    "end": "2868790"
  },
  {
    "text": "has Auto storage duration notice that question mark behind the word external",
    "start": "2868790",
    "end": "2874490"
  },
  {
    "text": "there because extern actually has a curious behavior which is it extern",
    "start": "2874490",
    "end": "2882410"
  },
  {
    "text": "doesn't always mean external linkage",
    "start": "2882410",
    "end": "2886630"
  },
  {
    "text": "and let me show you the example here",
    "start": "2888120",
    "end": "2893680"
  },
  {
    "text": "which is that the actual rule in both C and C++ one which you should not I'm",
    "start": "2893680",
    "end": "2900700"
  },
  {
    "text": "showing you this more for entertainment value than anything else I would not take advantage of this very much in your",
    "start": "2900700",
    "end": "2906520"
  },
  {
    "text": "programming but a name declared extern has internal linkage if it was",
    "start": "2906520",
    "end": "2912880"
  },
  {
    "text": "previously declared in the translation unit with internal linkage the the",
    "start": "2912880",
    "end": "2919960"
  },
  {
    "text": "illustration here is notice I have foo is defined to be or declared to be a",
    "start": "2919960",
    "end": "2926230"
  },
  {
    "text": "function with internal linkage in this translation unit and then I come down into main and I say X turn int foo and",
    "start": "2926230",
    "end": "2932800"
  },
  {
    "text": "that X turn doesn't give it external linkage it looks and says oh you previously had internal linkage you",
    "start": "2932800",
    "end": "2938590"
  },
  {
    "text": "still have internal linkage now declaring functions locally like that",
    "start": "2938590",
    "end": "2944260"
  },
  {
    "text": "that's all left over from from C which most of us don't do anymore right but it",
    "start": "2944260",
    "end": "2953830"
  },
  {
    "text": "turns out that when you read the standard to find out what extern mean the it doesn't just say external linkage",
    "start": "2953830",
    "end": "2960310"
  },
  {
    "text": ". there's this extra verbiage for a feature you don't want but here's a",
    "start": "2960310",
    "end": "2970270"
  },
  {
    "text": "couple other things linkage also explains a subtle behavioral difference within a couple ways with with the",
    "start": "2970270",
    "end": "2978550"
  },
  {
    "text": "constant objects as you well know you know this the traditional way and see of",
    "start": "2978550",
    "end": "2983920"
  },
  {
    "text": "handling symbolic constants is to use macros this is discouraged very much in",
    "start": "2983920",
    "end": "2989590"
  },
  {
    "text": "C++ because in they don't observe the scope rules macros because they're",
    "start": "2989590",
    "end": "2997000"
  },
  {
    "text": "handled by the preprocessor and the preprocessor doesn't know any the preprocessor thinks like curly brace is",
    "start": "2997000",
    "end": "3003720"
  },
  {
    "text": "just an interesting looking character it has no semantic value to the preprocessor and so whereas with other",
    "start": "3003720",
    "end": "3012390"
  },
  {
    "text": "kinds of entities you can have local things local to a function where in C++",
    "start": "3012390",
    "end": "3018450"
  },
  {
    "text": "you can put him in namespaces or classes you can't do that with a macro and so C++ looked for",
    "start": "3018450",
    "end": "3025170"
  },
  {
    "text": "ways to avoid using macros for this purpose and came up with using constant objects now these things exist not only",
    "start": "3025170",
    "end": "3033719"
  },
  {
    "text": "in C++ but they were actually in C as well the history by the way is that they",
    "start": "3033719",
    "end": "3039509"
  },
  {
    "text": "started out in C++ and then they got brought over into C and this C committee",
    "start": "3039509",
    "end": "3046440"
  },
  {
    "text": "decided for whatever reasons to change the semantics so that they don't quite",
    "start": "3046440",
    "end": "3051660"
  },
  {
    "text": "work the same in both languages and it turns out linkage is part of the",
    "start": "3051660",
    "end": "3057599"
  },
  {
    "text": "difference and so I'll just show you so anyway you can have constant objects of",
    "start": "3057599",
    "end": "3063359"
  },
  {
    "text": "an integer type of a floating type of a pointer type and they observe the scope",
    "start": "3063359",
    "end": "3068880"
  },
  {
    "text": "rules here's the key thing is that there's this concept in both C and C++",
    "start": "3068880",
    "end": "3074609"
  },
  {
    "text": "of what's called a constant expression constant expressions appear in a number of places like for example when you",
    "start": "3074609",
    "end": "3081719"
  },
  {
    "text": "specify a bit field the width of a bit field has to be it can be a symbolic",
    "start": "3081719",
    "end": "3090420"
  },
  {
    "text": "constant but it has to be a constant whose value is known at compile time and that code right there compiles in C++",
    "start": "3090420",
    "end": "3098249"
  },
  {
    "text": "but not C because the C compiler does not regard max there as a symbolic",
    "start": "3098249",
    "end": "3105569"
  },
  {
    "text": "constant whose value is known at compile time it says this is an object which happens to have a 16 in it but I have to",
    "start": "3105569",
    "end": "3114329"
  },
  {
    "text": "act as if I don't know that the value is always 16 which makes symbolic constants",
    "start": "3114329",
    "end": "3120509"
  },
  {
    "text": "in C considerably less useful than they",
    "start": "3120509",
    "end": "3125519"
  },
  {
    "text": "are in C++ and so the difference is that",
    "start": "3125519",
    "end": "3132900"
  },
  {
    "text": "in C they have external linkage by default so if you were to do this where",
    "start": "3132900",
    "end": "3139259"
  },
  {
    "text": "you put a symbolic constant in one source file in and in another like that you'd actually get linked errors that",
    "start": "3139259",
    "end": "3147029"
  },
  {
    "text": "code will compile both translation units and then fail at linked time because the symbol sum is multiply defined",
    "start": "3147029",
    "end": "3154619"
  },
  {
    "text": "but in C++ in order to make it convenient to use these things as symbolic constants they said okay we're",
    "start": "3154619",
    "end": "3161640"
  },
  {
    "text": "gonna give these things internal linkage Const objects have internal linkage by",
    "start": "3161640",
    "end": "3166920"
  },
  {
    "text": "default in C++ so that you can just have a symbolic constant and have its value",
    "start": "3166920",
    "end": "3172799"
  },
  {
    "text": "known and you can also know that nobody in another translation unit is linking",
    "start": "3172799",
    "end": "3179940"
  },
  {
    "text": "to it to screw up the known value at compile time and so this makes it",
    "start": "3179940",
    "end": "3187109"
  },
  {
    "text": "feasible to do this to take this is the common thing is to be able to take a",
    "start": "3187109",
    "end": "3192329"
  },
  {
    "text": "symbolic constant definition like that put it in a header file and include it in multiple translation units which is",
    "start": "3192329",
    "end": "3199950"
  },
  {
    "text": "the way you'd like to treat a symbolic constant and it works in C++ because when you include the header in each of",
    "start": "3199950",
    "end": "3207150"
  },
  {
    "text": "those places some has internal linkage each translation unit has its own copy",
    "start": "3207150",
    "end": "3213450"
  },
  {
    "text": "that nobody else can see now in this case they all have a copy of something with the same value which is very useful",
    "start": "3213450",
    "end": "3220969"
  },
  {
    "text": "but the compiler can do can do all kinds of nice compile time analysis on it that",
    "start": "3220969",
    "end": "3228029"
  },
  {
    "text": "it can't do as easily in C because the",
    "start": "3228029",
    "end": "3233249"
  },
  {
    "text": "linkage gets in the way so the problem is that if you take this same code and compile as whoops my battery died here",
    "start": "3233249",
    "end": "3248119"
  },
  {
    "text": "can I use the cursor key here is there",
    "start": "3248119",
    "end": "3257160"
  },
  {
    "text": "on this unit that you covered up the cursor keys what should I use page up",
    "start": "3257160",
    "end": "3263160"
  },
  {
    "text": "and page down or",
    "start": "3263160",
    "end": "3266088"
  },
  {
    "text": "use that okay oh oh okay",
    "start": "3270550",
    "end": "3280310"
  },
  {
    "text": "it wasn't like clique or something at my did time out okay anyway so there that's",
    "start": "3280310",
    "end": "3287120"
  },
  {
    "text": "what happened was if you do this in C then that thing with internal linkage up",
    "start": "3287120",
    "end": "3293750"
  },
  {
    "text": "there could become sex sternal linkage now you get the same name with external linkage in both translation units and it",
    "start": "3293750",
    "end": "3299840"
  },
  {
    "text": "doesn't build last thing inline functions what's the behavior of those",
    "start": "3299840",
    "end": "3307040"
  },
  {
    "text": "well well how many here you familiar with in lines okay you know in lining",
    "start": "3307040",
    "end": "3313190"
  },
  {
    "text": "says what I'd like the compiler to do is substitute the body of the function at the point of the call but it's not a",
    "start": "3313190",
    "end": "3320360"
  },
  {
    "text": "guarantee you know this substituting the body the function at the point of the",
    "start": "3320360",
    "end": "3326180"
  },
  {
    "text": "call is the desired behavior but not a guarantee that it is possible that the",
    "start": "3326180",
    "end": "3332600"
  },
  {
    "text": "compiler will decide for various reasons I'm going to translate it into a non",
    "start": "3332600",
    "end": "3338300"
  },
  {
    "text": "inline call and so what happens then oh so the consequence is by the way that",
    "start": "3338300",
    "end": "3346450"
  },
  {
    "text": "with with normal non inline functions you declare them in a header and define",
    "start": "3346450",
    "end": "3353180"
  },
  {
    "text": "them in a C or CPP file but with inline functions you actually put the entire function definition in the header that's",
    "start": "3353180",
    "end": "3361610"
  },
  {
    "text": "so that the function definition is visible at the point of the call and",
    "start": "3361610",
    "end": "3367270"
  },
  {
    "text": "then the problem is that's now a definition of it of a function with",
    "start": "3367840",
    "end": "3373760"
  },
  {
    "text": "external linkage if it's not in lined you're gonna have multiply defined symbols but if it's in lined it's okay",
    "start": "3373760",
    "end": "3382600"
  },
  {
    "text": "and now but what happens if the compiler says but I'm not going to in line",
    "start": "3382600",
    "end": "3389260"
  },
  {
    "text": "because in lighting is only a request it's not a mandate what will happen is",
    "start": "3389260",
    "end": "3396800"
  },
  {
    "text": "the compiler will compile non inline calls into calls with external linkage and it",
    "start": "3396800",
    "end": "3404760"
  },
  {
    "text": "will then say the the copy that I generate of the non inline function there will only be one and everybody",
    "start": "3404760",
    "end": "3411630"
  },
  {
    "text": "goes to the same spot so so the when",
    "start": "3411630",
    "end": "3417510"
  },
  {
    "text": "they talk about inline functions having linkage if it's always in line there's",
    "start": "3417510",
    "end": "3424620"
  },
  {
    "text": "never a function to talk to but when it's not in line that you're guaranteed",
    "start": "3424620",
    "end": "3430920"
  },
  {
    "text": "there's one and only one copy and linkage again is a key part of that",
    "start": "3430920",
    "end": "3436350"
  },
  {
    "text": "explanation okay so that's it in summary",
    "start": "3436350",
    "end": "3442550"
  },
  {
    "text": "here the key points is the storage class specifiers extern and static don't",
    "start": "3442550",
    "end": "3448950"
  },
  {
    "text": "affect scope they affect these other properties called storage duration and linkage or in C++ they can affect a",
    "start": "3448950",
    "end": "3455940"
  },
  {
    "text": "parameter list of a static member function the scope the concept of scope",
    "start": "3455940",
    "end": "3461430"
  },
  {
    "text": "is only meaningful in a single translation unit there's no scope beyond a single translation unit and the key",
    "start": "3461430",
    "end": "3469590"
  },
  {
    "text": "thing that allows to translation units to communicate with each other is that",
    "start": "3469590",
    "end": "3475110"
  },
  {
    "text": "the names in them have external linkage and if you remember those key points most of the rest of this stuff makes an",
    "start": "3475110",
    "end": "3482700"
  },
  {
    "text": "awful lot more sense I hope that was helpful thanks very much for being here [Applause]",
    "start": "3482700",
    "end": "3495578"
  }
]