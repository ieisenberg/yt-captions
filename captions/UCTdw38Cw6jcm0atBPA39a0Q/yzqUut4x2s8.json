[
  {
    "text": "all right good afternoon everyone welcome back to my talk about c-sharp language internals and Barth I work at",
    "start": "9630",
    "end": "16770"
  },
  {
    "text": "Microsoft in back in the States currently on the bank team working on high scale services for event processing",
    "start": "16770",
    "end": "23849"
  },
  {
    "text": "systems and I will talk about that tomorrow in my talk about high performance netcode today we're just gonna take a",
    "start": "23849",
    "end": "30210"
  },
  {
    "text": "look behind the scenes of your favorite c-sharp language features it's actually",
    "start": "30210",
    "end": "35280"
  },
  {
    "text": "part of some series that I've been doing for the last maybe three years or so two",
    "start": "35280",
    "end": "40440"
  },
  {
    "text": "three years at various conferences I've given this this kind of presentation now",
    "start": "40440",
    "end": "45660"
  },
  {
    "text": "the nice thing about it is that the content is always different this enough language features to talk about so if",
    "start": "45660",
    "end": "51390"
  },
  {
    "text": "you want to see some more content on this you can actually go to two places you can go to channel 9 dot MSDN comm",
    "start": "51390",
    "end": "58379"
  },
  {
    "text": "which is the video website at MSDN there you can find plenty of videos from",
    "start": "58379",
    "end": "64198"
  },
  {
    "text": "different conferences in the Netherlands in Belgium and some other places where I've given a similar talk and there's",
    "start": "64199",
    "end": "69960"
  },
  {
    "text": "also a two-part little site course on c-sharp language internals which is kind of the same same content but of course",
    "start": "69960",
    "end": "77520"
  },
  {
    "text": "you know there we have much more time to go into much more depth so so that's",
    "start": "77520",
    "end": "82710"
  },
  {
    "text": "just to set the scene over here now the way that this talk actually works is very simple I don't know what's gonna",
    "start": "82710",
    "end": "88350"
  },
  {
    "text": "come up next I'm just gonna ask you what you want to see it's divided into three pieces I have some starters which are",
    "start": "88350",
    "end": "95579"
  },
  {
    "text": "just to warm up then we have some main courses which are a little bit heavier and then some you know lighty sorts we",
    "start": "95579",
    "end": "101220"
  },
  {
    "text": "sort of stopped with the mechanism is quite simple we pick something depending",
    "start": "101220",
    "end": "106409"
  },
  {
    "text": "on what you pick we'll pick our utility to study that language feature in much detail we may actually go into il code",
    "start": "106409",
    "end": "113700"
  },
  {
    "text": "to see how it works so fasten your seat belts we may open when debug to see like the native generated code for the",
    "start": "113700",
    "end": "120149"
  },
  {
    "text": "language feature or we may actually open the Rozlyn source code the the source code of the compiler can actually attach",
    "start": "120149",
    "end": "126299"
  },
  {
    "text": "a debugger to the compiler to step through some of the compilation process or sort of point out some interesting",
    "start": "126299",
    "end": "132180"
  },
  {
    "text": "tidbits as we browse the code so let's get started by well what else do start",
    "start": "132180",
    "end": "138030"
  },
  {
    "text": "weaved in a starter so we could talk a little bit about today initializers very simple language",
    "start": "138030",
    "end": "143860"
  },
  {
    "text": "seemingly but you know has some interesting cogent we could talk a little bit about events which has some",
    "start": "143860",
    "end": "148960"
  },
  {
    "text": "interesting stuff to do with synchronization that's all the way back to C sharp 1.0 we can also go a little",
    "start": "148960",
    "end": "154750"
  },
  {
    "text": "bit more modern with interpolated strings which we're going to reduce in C sharp 7 very recently and they also have",
    "start": "154750",
    "end": "161320"
  },
  {
    "text": "some interesting cogeneration so maybe show of hands how many want to see some",
    "start": "161320",
    "end": "166930"
  },
  {
    "text": "erase stuff mmm ok I'll have to assess how much that is how many want C events",
    "start": "166930",
    "end": "174330"
  },
  {
    "text": "it's a little bit more I think and interpolated strings mylord I think the events will have it",
    "start": "174330",
    "end": "181240"
  },
  {
    "text": "actually yeah okay so we'll do events for now ok so um I'll talk about very",
    "start": "181240",
    "end": "187900"
  },
  {
    "text": "simple events actually so let me actually just open some piece of code",
    "start": "187900",
    "end": "194680"
  },
  {
    "text": "here I have sitting handy that's the the simplest piece of code you could have",
    "start": "194680",
    "end": "200080"
  },
  {
    "text": "actually it's not the simplest we don't need the using how we do need using",
    "start": "200080",
    "end": "205900"
  },
  {
    "text": "sorry we need using for the action over there it's a very simple event over here public event action a couldn't make it",
    "start": "205900",
    "end": "214300"
  },
  {
    "text": "simple if I don't do static void main but you know whatever so that's the simplest kind of event you can have but",
    "start": "214300",
    "end": "220870"
  },
  {
    "text": "there's some interesting tidbits behind this like events actually are based on",
    "start": "220870",
    "end": "225910"
  },
  {
    "text": "delegates so one thing of course it everyone likely knows is it doesn't matter it's an event handler of T or",
    "start": "225910",
    "end": "231700"
  },
  {
    "text": "some other delegate type like I can use the action delegate type here just works fine the language doesn't care what what",
    "start": "231700",
    "end": "238000"
  },
  {
    "text": "delegate type you use there but there's some interesting stuff that needs to happen behind the scenes to make this",
    "start": "238000",
    "end": "243459"
  },
  {
    "text": "actually work because first of all if you have events well you can declare",
    "start": "243459",
    "end": "249070"
  },
  {
    "text": "them in two different ways right like I guess many people know that you can also take control over the way that event",
    "start": "249070",
    "end": "257680"
  },
  {
    "text": "handlers are added and the way event handlers are removed by adding an add and remove clause over here and actually",
    "start": "257680",
    "end": "265930"
  },
  {
    "text": "writing your own code using the value which is you know the thing that comes in to the plus equals or minus equals",
    "start": "265930",
    "end": "271530"
  },
  {
    "text": "operation so you could do that and actually there are many frameworks that do that like for example window",
    "start": "271530",
    "end": "276790"
  },
  {
    "text": "forums because if you use the default syntax which you know I had on the screen just a moment ago not looking",
    "start": "276790",
    "end": "283030"
  },
  {
    "text": "first to that right now if used this syntax you end up with a field behind the scenes which holds the delegates",
    "start": "283030",
    "end": "289120"
  },
  {
    "text": "instance that you will use to do the invocation of whoever is attached to that event and so if you want to avoid",
    "start": "289120",
    "end": "296680"
  },
  {
    "text": "the cost of those fields you can actually use add and remove yourself and build an event manager and in fact if",
    "start": "296680",
    "end": "301960"
  },
  {
    "text": "you browse the source code of Windows forums you will actually find an event manager that actually dissolved",
    "start": "301960",
    "end": "307720"
  },
  {
    "text": "registrations of events behind the scenes and not relying on any fields but",
    "start": "307720",
    "end": "313450"
  },
  {
    "text": "I'm gonna focus on on this particular guy here now what's interesting about this is that when at some point I do say",
    "start": "313450",
    "end": "320740"
  },
  {
    "text": "for example a plus equals and then I should make it static if I want to make",
    "start": "320740",
    "end": "325960"
  },
  {
    "text": "this compile eventually if I do a plus equals the simplest possible you know lambda over here for example",
    "start": "325960",
    "end": "333060"
  },
  {
    "text": "something interesting has to happen the way that those delegates get combined is",
    "start": "333060",
    "end": "338740"
  },
  {
    "text": "of course using the same thing that's used to do a combination of two delegates so like if I have action a",
    "start": "338740",
    "end": "344880"
  },
  {
    "text": "over here and I have action B equals something else these are two different",
    "start": "344880",
    "end": "351220"
  },
  {
    "text": "you know bodies here I can do action C equals a plus B all right you know you",
    "start": "351220",
    "end": "356410"
  },
  {
    "text": "can actually add two delegates together and then you end up with a multicast delegate and so this multicast delegates",
    "start": "356410",
    "end": "362260"
  },
  {
    "text": "the way that this a plus B actually translates is as follows it simply does delegate dot combined of a comma B and",
    "start": "362260",
    "end": "369370"
  },
  {
    "text": "then it will cast result over here to action and assign that to C so when an",
    "start": "369370",
    "end": "375460"
  },
  {
    "text": "event starts out with no event handlers attached it starts off as no and then",
    "start": "375460",
    "end": "381670"
  },
  {
    "text": "later you know I need two plus equals it basically does a combined inside the add method to add those two things together",
    "start": "381670",
    "end": "387640"
  },
  {
    "text": "which is of course a little caveat there was the caveat that you may actually have concurrent accesses to the event",
    "start": "387640",
    "end": "394510"
  },
  {
    "text": "plus you know plus equals and minus equals to add adds and remove event",
    "start": "394510",
    "end": "399610"
  },
  {
    "text": "handlers so there can be some concurrency there and you could actually be losing things because this plus is not atomic as you can see over here if",
    "start": "399610",
    "end": "407010"
  },
  {
    "text": "you would do a plus equals something let me do instead of this let me do a",
    "start": "407010",
    "end": "413470"
  },
  {
    "text": "plus equals B then you end up with code that looks like this which is pretty much the same as in",
    "start": "413470",
    "end": "420220"
  },
  {
    "text": "multi-threaded code writing something like a plus equals you know three or something then of course the read from a",
    "start": "420220",
    "end": "426880"
  },
  {
    "text": "and there I to a is not atomic so we have to do something in order to make this an atomic operation and so the way",
    "start": "426880",
    "end": "433660"
  },
  {
    "text": "that this works is by using some interesting code behind the scenes I'm just gonna remove all of this and let me",
    "start": "433660",
    "end": "440290"
  },
  {
    "text": "actually compile this over here using the c-sharp compiler I'll do / o + to do",
    "start": "440290",
    "end": "446889"
  },
  {
    "text": "it in an optimized build it says that the event a is never used I know that it's just for demo purposes but will",
    "start": "446889",
    "end": "453940"
  },
  {
    "text": "actually use I'll dancing over here to have a quick peek at what's going on behind the scenes here and so you see",
    "start": "453940",
    "end": "461200"
  },
  {
    "text": "that we actually have our event here for some reason events are under choosing an",
    "start": "461200",
    "end": "466540"
  },
  {
    "text": "upside-down triangle we sort of have all the shapes in Aisle dancin like it doesn't have any meaning but then you",
    "start": "466540",
    "end": "473080"
  },
  {
    "text": "know if you take a look over here you see this add and remove handler they have been generated for us and you see",
    "start": "473080",
    "end": "479110"
  },
  {
    "text": "the add a and remove a if you go in here you can see this beautiful thing over",
    "start": "479110",
    "end": "484630"
  },
  {
    "text": "here interlock compare exchange typical way of doing you know concurrent",
    "start": "484630",
    "end": "490630"
  },
  {
    "text": "programming is to do read fields then you try to update the field provided",
    "start": "490630",
    "end": "496390"
  },
  {
    "text": "that the field hasn't changed from the original value that you had before so this thing has actually generated a",
    "start": "496390",
    "end": "502180"
  },
  {
    "text": "while loop that you know infinitely long you know will sort of try to swap in you",
    "start": "502180",
    "end": "507190"
  },
  {
    "text": "know the thing that you're trying to add in a concurrency safe manner in fact in older versions of the",
    "start": "507190",
    "end": "512860"
  },
  {
    "text": "compiler we used to have synchronized access here just like you have in Java methods implementation attributes say in",
    "start": "512860",
    "end": "519219"
  },
  {
    "text": "this thing needs to be synchronized which took a lock on you know the current instance of the object or on the",
    "start": "519219",
    "end": "524440"
  },
  {
    "text": "type in case it's static static events and that's not a good thing so like I",
    "start": "524440",
    "end": "530200"
  },
  {
    "text": "believe it's starting from from c-sharp to point or something this has actually changed into using interlocked compare",
    "start": "530200",
    "end": "536830"
  },
  {
    "text": "exchange so now let's actually take a look at the source code on how this thing actually is implemented because",
    "start": "536830",
    "end": "542740"
  },
  {
    "text": "that's one of the beautiful you can do nowadays literally a couple of hours ago I did a get clone of the",
    "start": "542740",
    "end": "549130"
  },
  {
    "text": "Roslin source code how many of you have actually been to the Roslin github page",
    "start": "549130",
    "end": "554140"
  },
  {
    "text": "yeah did you look in the code a little bit yeah okay so I just let it get",
    "start": "554140",
    "end": "559810"
  },
  {
    "text": "cloned this morning so it's actually the latest and greatest version of the compiler I have sitting here and so I've",
    "start": "559810",
    "end": "567430"
  },
  {
    "text": "opened a solution called compiler sort SLM I've opened a whole bunch of things",
    "start": "567430",
    "end": "573250"
  },
  {
    "text": "here but in fact you know if you want to boil it down to the essence it's quite",
    "start": "573250",
    "end": "579190"
  },
  {
    "text": "easy to unload pretty much every tank this starts off with I believe 56",
    "start": "579190",
    "end": "585490"
  },
  {
    "text": "projects or something and if you open it also in dodecyl and it's like 150 projects like you don't want to you know",
    "start": "585490",
    "end": "591070"
  },
  {
    "text": "open that whole thing and hit that five every time you won't try to do something so just open compilers those SLM and",
    "start": "591070",
    "end": "597760"
  },
  {
    "text": "then just you know unload everything that's just code and you end up with eight projects which are the core of Roslin at the siege of compiler for",
    "start": "597760",
    "end": "604900"
  },
  {
    "text": "example over here and the command-line compiler and those kind of things and so what I've done is I've set C Acedo DXE",
    "start": "604900",
    "end": "612040"
  },
  {
    "text": "over here as the startup project and I've passed in over here I'll just read",
    "start": "612040",
    "end": "617380"
  },
  {
    "text": "it out loud the command line to compile a file called demo dot C S which sits on",
    "start": "617380",
    "end": "623080"
  },
  {
    "text": "my desktop okay so this demo dot C s file which we are using for our demos",
    "start": "623080",
    "end": "628780"
  },
  {
    "text": "over here will get compiled as soon as I hit a five so let me just do controller five it's a different file than the",
    "start": "628780",
    "end": "634750"
  },
  {
    "text": "event starts yes that I'm showing you right now we'll go into the event stuff in just a moment I'm just hitting ctrl",
    "start": "634750",
    "end": "641080"
  },
  {
    "text": "f5 and it's running and you will see a version of the c-sharp compiler version 4224 might and we sort of shipped you",
    "start": "641080",
    "end": "650710"
  },
  {
    "text": "know c-sharp eight all the way to 41 without you noticing it's just when you do a local build you end up with version",
    "start": "650710",
    "end": "656890"
  },
  {
    "text": "42 it says developer built over there and so I'm actually using some new",
    "start": "656890",
    "end": "662140"
  },
  {
    "text": "feature just to prove to you that this is actually c-sharp not seven but seven point one already from the master branch",
    "start": "662140",
    "end": "668320"
  },
  {
    "text": "where we have support for a feature called async main which is not enabled",
    "start": "668320",
    "end": "673480"
  },
  {
    "text": "yet but I will actually just go into the code to show you how this actually works I have this little piece of code here",
    "start": "673480",
    "end": "680830"
  },
  {
    "text": "sitting behind behind the scenes that's the one that I'm compiling I by",
    "start": "680830",
    "end": "686200"
  },
  {
    "text": "attaching the debugger to DC Sheriff compiler and you see over here async tasks mean this is a new thing that will",
    "start": "686200",
    "end": "691690"
  },
  {
    "text": "come and see sharp 7.1 you can actually have async methods for the main method instead of having to have synchronous",
    "start": "691690",
    "end": "698680"
  },
  {
    "text": "methods that return void torrents you can also have a sync matters that Twitter and tasks or tasks event and so",
    "start": "698680",
    "end": "704529"
  },
  {
    "text": "that's that's the piece of code I'm I'm actually gonna compile I'll also add my event over here so we can study that in",
    "start": "704529",
    "end": "711820"
  },
  {
    "text": "a little bit more detail so I'll just have my event action here the same as the one I had in the other file and so",
    "start": "711820",
    "end": "719320"
  },
  {
    "text": "I'm just gonna step through the compiler now to sort of give you a sense for you know the way you can sort of study those",
    "start": "719320",
    "end": "725140"
  },
  {
    "text": "language features and at your own pace at a later point in time so for async main I've already set some",
    "start": "725140",
    "end": "733529"
  },
  {
    "text": "bookmark over here just to make it a little easier to navigate today but so",
    "start": "733529",
    "end": "739300"
  },
  {
    "text": "the way that async main is actually built is by generating a synthetic entry",
    "start": "739300",
    "end": "745900"
  },
  {
    "text": "point it synthetic entry point that's actually a synchronous method because the CLR only supports synchronous entry",
    "start": "745900",
    "end": "751839"
  },
  {
    "text": "points and all that entry point will actually do is it will generate a forwarder to your asynchronous method",
    "start": "751839",
    "end": "758800"
  },
  {
    "text": "under needs which will actually call get awaited or get result on the task returned from the main method okay so",
    "start": "758800",
    "end": "766029"
  },
  {
    "text": "it's as if you're writing this little bit of plumbing yourself the reason for using get get away to get result is",
    "start": "766029",
    "end": "772450"
  },
  {
    "text": "because it's on the wraps exceptions and like for example getting a task and then simply doing a deterrent a soft result",
    "start": "772450",
    "end": "778570"
  },
  {
    "text": "well you will get aggregate exception as opposed to the original exception so it generates the code using get to you know",
    "start": "778570",
    "end": "785110"
  },
  {
    "text": "get the way to get result and this works against any anything it doesn't even have to be a task it can be anything",
    "start": "785110",
    "end": "791380"
  },
  {
    "text": "that starts like so anything that supports you know you know the gutter waiter and and get result bad and will",
    "start": "791380",
    "end": "797980"
  },
  {
    "text": "actually work with this okay so I'm just gonna and you know hit f5 now over here",
    "start": "797980",
    "end": "805350"
  },
  {
    "text": "to now build you know my little demo dot CS and we'll step to a little bit of",
    "start": "805350",
    "end": "811059"
  },
  {
    "text": "the source code actually I have some breakpoints that I set up a moment ago but you see C sharp compiler is spinning",
    "start": "811059",
    "end": "818529"
  },
  {
    "text": "up over here and the first thing that's interesting to know when you're actually gonna explore the new language features",
    "start": "818529",
    "end": "825189"
  },
  {
    "text": "is go to this particular file here message ID dot CS you don't have to remember that just search for literally",
    "start": "825189",
    "end": "831849"
  },
  {
    "text": "C sharp 7.1 across all of the text files and there you see feature detection",
    "start": "831849",
    "end": "838119"
  },
  {
    "text": "because the c-sharp compiler can actually be used to down level you can actually compile C sharp 6 and 5 & 4 by",
    "start": "838119",
    "end": "845169"
  },
  {
    "text": "specifying a certain flag the slash length version flag and so this is a new",
    "start": "845169",
    "end": "851709"
  },
  {
    "text": "feature in c-sharp 7.1 but I'm actually running the compiler with default flags which means it will still think that",
    "start": "851709",
    "end": "858549"
  },
  {
    "text": "c-sharp 7 is the latest because everything higher it's kind of experimental and here you can already start to see the menu of new things that",
    "start": "858549",
    "end": "866019"
  },
  {
    "text": "are coming in c-sharp 7.1 you see async main the default literal the default",
    "start": "866019",
    "end": "872079"
  },
  {
    "text": "littell is actually this I can write int x equals default without doing default",
    "start": "872079",
    "end": "877659"
  },
  {
    "text": "event that's using target typing so you know if you wanna sign it to an end that will automatically infer that you mean",
    "start": "877659",
    "end": "883419"
  },
  {
    "text": "you know to write default event over here that's another feature but so this",
    "start": "883419",
    "end": "888519"
  },
  {
    "text": "is the feature detection stuff and that's the one that was responsible to give this error message on the screen",
    "start": "888519",
    "end": "893529"
  },
  {
    "text": "earlier saying async main is not yet available so let me just you know step through this a little bit more and do a",
    "start": "893529",
    "end": "900579"
  },
  {
    "text": "little bit of hacking here you see it's actually calling some helper method over here to ask whether a feature is enabled",
    "start": "900579",
    "end": "907269"
  },
  {
    "text": "and so where are we coming from we're actually coming here from some piece of code that's trying to find the entry",
    "start": "907269",
    "end": "913989"
  },
  {
    "text": "point by using a set of candidates and in fact if you take a look at the source",
    "start": "913989",
    "end": "919449"
  },
  {
    "text": "code here of the c-sharp compiler you will actually see that it's using its own dog food all over the place for",
    "start": "919449",
    "end": "925719"
  },
  {
    "text": "example what you what you have over here if I go a little bit higher as a local methods local function you know that was",
    "start": "925719",
    "end": "932799"
  },
  {
    "text": "actually shipped in c-sharp 7 and the compiler uses that already you also see here in a very build off tuple types",
    "start": "932799",
    "end": "938379"
  },
  {
    "text": "also a new c-sharp 7.0 feature so you know it's full off you know all the new stuff immediately being you",
    "start": "938379",
    "end": "944750"
  },
  {
    "text": "inside the compiler source code and so what's happening here is that this piece of code is actually going to all the",
    "start": "944750",
    "end": "951140"
  },
  {
    "text": "candidates to try to find the synchronous main entry point and now it's also trying to find an asynchronous",
    "start": "951140",
    "end": "956750"
  },
  {
    "text": "main entry point it has found one but it's not checking whether it should allow you to use async main because",
    "start": "956750",
    "end": "962990"
  },
  {
    "text": "that's a new c-sharp seven point one feature and so it's gonna complain because it's still configured to use",
    "start": "962990",
    "end": "968000"
  },
  {
    "text": "c-sharp seven but of course you know no problem here what I can do is I can just say that the available version is the",
    "start": "968000",
    "end": "975440"
  },
  {
    "text": "required version in the debugger to just you know bypass this check actually no so let's just do a little bit of hacking",
    "start": "975440",
    "end": "981110"
  },
  {
    "text": "here I'm just gonna pretend I'm running c-sharp seven point one and now the",
    "start": "981110",
    "end": "986150"
  },
  {
    "text": "feature will just continue compiling so if I now hit f5 you see it actually",
    "start": "986150",
    "end": "992240"
  },
  {
    "text": "compiled the whole thing fine and I'm actually ending up here in another breakpoint that I've set which",
    "start": "992240",
    "end": "998840"
  },
  {
    "text": "is the async forward that I was pointing out a little bit ago and so if you just",
    "start": "998840",
    "end": "1004030"
  },
  {
    "text": "search and the simplest way to actually search for this kind of stuff is as follows you find a new feature you see",
    "start": "1004030",
    "end": "1009580"
  },
  {
    "text": "the place where you see the first hint for that new feature in the source code and then the very next thing you do is",
    "start": "1009580",
    "end": "1015100"
  },
  {
    "text": "you click over here on the github source code and then you just double click on the change list and lo and behold there",
    "start": "1015100",
    "end": "1022450"
  },
  {
    "text": "it goes that's you know the check in of the compiler team to add this feature to c-sharp seven point one so now you can",
    "start": "1022450",
    "end": "1028660"
  },
  {
    "text": "start to find all the affected files where you end up you know having any changes related to this this new",
    "start": "1028660",
    "end": "1035740"
  },
  {
    "text": "language feature and so what you see over here is that the body of the synchronous main method that we're",
    "start": "1035740",
    "end": "1041319"
  },
  {
    "text": "generating is effectively just containing a call to get await a get",
    "start": "1041319",
    "end": "1047079"
  },
  {
    "text": "result with a little bit of decoration around it suggests a return statement and just a block you know like you know",
    "start": "1047079",
    "end": "1052750"
  },
  {
    "text": "curly brace close curly brace and then inside of it it will just you get a way to get results for you and then just",
    "start": "1052750",
    "end": "1058990"
  },
  {
    "text": "return to the color in case it's async task events it will do pretty much the",
    "start": "1058990",
    "end": "1064390"
  },
  {
    "text": "same thing it will just return the result of get result which will contain the exit code right so now you can start",
    "start": "1064390",
    "end": "1070870"
  },
  {
    "text": "stopping to all of this and if you like you know I could just stand here and just do f10 for like likely the next six",
    "start": "1070870",
    "end": "1076510"
  },
  {
    "text": "hours to do line by line to see the il code being written we're not gonna do that you know I don't want to bore you to",
    "start": "1076510",
    "end": "1082690"
  },
  {
    "text": "death but I'll just show you one more thing which is the place where that event",
    "start": "1082690",
    "end": "1089050"
  },
  {
    "text": "stuff was actually happening actually I didn't have to exit the debugger for that but fine the event",
    "start": "1089050",
    "end": "1097120"
  },
  {
    "text": "stuff is sitting over here and the thing I want to point out by just going to this event stuff because it's kind of a",
    "start": "1097120",
    "end": "1103420"
  },
  {
    "text": "trivial language feature but still you know not everyone knows that it's actually using some synchronization",
    "start": "1103420",
    "end": "1108730"
  },
  {
    "text": "stuff under the hood if you actually start browsing the compiler source code you end up with a lot of references to",
    "start": "1108730",
    "end": "1115000"
  },
  {
    "text": "the language specification and also a lot of historical notes like you know this used to be this way and you know",
    "start": "1115000",
    "end": "1120280"
  },
  {
    "text": "Visual Studio 2013 and we changed because of that and so forth here's a little bit of information which is",
    "start": "1120280",
    "end": "1126550"
  },
  {
    "text": "likely easier to read than what we saw in our old Azzam like that compare exchange well you can spot that but it's",
    "start": "1126550",
    "end": "1133480"
  },
  {
    "text": "not that easy to spot the fact that there's some do loop around that hold language construct so you see over here",
    "start": "1133480",
    "end": "1139090"
  },
  {
    "text": "this is the code that this tries to generate and so now you can start matching those things up a little bit so",
    "start": "1139090",
    "end": "1145930"
  },
  {
    "text": "you see what what's really happening with the events is that we reach the backing field but of course by the time",
    "start": "1145930",
    "end": "1151660"
  },
  {
    "text": "we read the backing fields immediately after that somebody else could be winning the race over here for checking",
    "start": "1151660",
    "end": "1157360"
  },
  {
    "text": "in another event handler either by doing plus equals or minus equals so we have now to guard against you know doing an",
    "start": "1157360",
    "end": "1163450"
  },
  {
    "text": "invalid assignment where we overwrite a change that somebody else has made in the meantime and so that's what this",
    "start": "1163450",
    "end": "1169090"
  },
  {
    "text": "code is doing that I was sort of pointing out a little bit ago but you see over here we try to do the combine",
    "start": "1169090",
    "end": "1174940"
  },
  {
    "text": "cast it back to the original delegate type and then try to do a compare exchange which is a conditional",
    "start": "1174940",
    "end": "1180910"
  },
  {
    "text": "assignment based on an old value that we're at in case that's actually going to we can just bail out from that loop",
    "start": "1180910",
    "end": "1187390"
  },
  {
    "text": "and everything is good if that doesn't work and we'll just retry rereading that field and sort of continue doing that",
    "start": "1187390",
    "end": "1194170"
  },
  {
    "text": "and so what you see here is actually something that's very common to the",
    "start": "1194170",
    "end": "1199420"
  },
  {
    "text": "c-sharp compiler there's a lot of complexity of course but in a lot of",
    "start": "1199420",
    "end": "1204670"
  },
  {
    "text": "cases new language features just translate to old language features if you look at that async main but",
    "start": "1204670",
    "end": "1210909"
  },
  {
    "text": "a couple of files touch to just make some forward that makes an async main be",
    "start": "1210909",
    "end": "1216729"
  },
  {
    "text": "called from a synchronous main because that's all the CLR knows about so it's just gonna rewrite it as if it were a",
    "start": "1216729",
    "end": "1223090"
  },
  {
    "text": "human being writing the code that would do that that trivial piece of code as well in fact over here we could have said in c-sharp",
    "start": "1223090",
    "end": "1229720"
  },
  {
    "text": "1.0 well we will not provide you the convenience of field backed events you",
    "start": "1229720",
    "end": "1234849"
  },
  {
    "text": "just have to write this code yourself and in fact the compiler is doing that compiler is pretending there exists a",
    "start": "1234849",
    "end": "1240879"
  },
  {
    "text": "version of c-sharp that does not have this language feature let me translate it into something simpler and in fact",
    "start": "1240879",
    "end": "1246940"
  },
  {
    "text": "all of those rewrite steps sit in a folder called lowering so if you go and look over here you will find",
    "start": "1246940",
    "end": "1254799"
  },
  {
    "text": "a folder deep down here called lowering and you see a whole bunch of language",
    "start": "1254799",
    "end": "1260289"
  },
  {
    "text": "features here suggest async methods these are all based on lowering for each for example is based on lowering like",
    "start": "1260289",
    "end": "1267369"
  },
  {
    "text": "some subset of c-sharp doesn't know better for each loop it only knows about while loops so we can just compile",
    "start": "1267369",
    "end": "1273340"
  },
  {
    "text": "things into a simpler set of parameters so once you get your hands dirty with this you know this code doesn't look as",
    "start": "1273340",
    "end": "1279940"
  },
  {
    "text": "complicated as you may think at first because all this is doing is just generating you know code that accesses",
    "start": "1279940",
    "end": "1287139"
  },
  {
    "text": "fields that has while loops inside of it you can actually find over here this whole loop construct will sit in here",
    "start": "1287139",
    "end": "1293619"
  },
  {
    "text": "somewhere as well now there's one more thing you see over here that we also use",
    "start": "1293619",
    "end": "1299799"
  },
  {
    "text": "this thing called get well-known member this is also a beautiful place for you to go and take a look at the things that",
    "start": "1299799",
    "end": "1306009"
  },
  {
    "text": "the c-sharp compiler knows about these are features inside the dotnet framework that the compiler can talk to for",
    "start": "1306009",
    "end": "1312669"
  },
  {
    "text": "example for events that needs interlocked exchange for other things like string interpolation it will need",
    "start": "1312669",
    "end": "1318399"
  },
  {
    "text": "single format for example so you will find all those members over here but you will also be surprised that in a lot of",
    "start": "1318399",
    "end": "1324849"
  },
  {
    "text": "places we actually have checks that see if this member is available because on",
    "start": "1324849",
    "end": "1330399"
  },
  {
    "text": "certain frameworks we may not have interlocked compare exchange available and we need to do some other strategy",
    "start": "1330399",
    "end": "1335710"
  },
  {
    "text": "instead and so you see over here if we don't have this will actually go down",
    "start": "1335710",
    "end": "1341139"
  },
  {
    "text": "this other code part over here where we will actually generate all difficult and make the method synchronized as opposed to using a while",
    "start": "1341139",
    "end": "1348760"
  },
  {
    "text": "loop ourselves so there's a lot of you know forking in the codes to sort of support all the framework versions where",
    "start": "1348760",
    "end": "1355299"
  },
  {
    "text": "certain members may not be available okay good so that was kind of you know a",
    "start": "1355299",
    "end": "1360370"
  },
  {
    "text": "little warm-up we went through the debugger a little bit you know see how things kind of work and sort of looked",
    "start": "1360370",
    "end": "1365590"
  },
  {
    "text": "at a pretty simple relatively simple language feature okay now let's go for",
    "start": "1365590",
    "end": "1371260"
  },
  {
    "text": "the main courses I have three on offer tonight one is display classes display",
    "start": "1371260",
    "end": "1379990"
  },
  {
    "text": "class I used by lambdas and anonymous methods and now also by local functions and c-sharp 7.0 quite interesting new",
    "start": "1379990",
    "end": "1386320"
  },
  {
    "text": "language feature switch statements have also grown a lot over the years like now",
    "start": "1386320",
    "end": "1391330"
  },
  {
    "text": "in c-sharp seven we have pattern matching support and we also have a think methods over here which got a",
    "start": "1391330",
    "end": "1397059"
  },
  {
    "text": "little bit of a revamp in c-sharp six because now you can await insight catch and finally blocks so I think they're",
    "start": "1397059",
    "end": "1403000"
  },
  {
    "text": "all very appetizing that let's just do a little little vote here how many want to",
    "start": "1403000",
    "end": "1409000"
  },
  {
    "text": "see display classes okay how many want to see switch statements okay how many",
    "start": "1409000",
    "end": "1417309"
  },
  {
    "text": "won't see async methods that's what I fear it okay I've had this on you know",
    "start": "1417309",
    "end": "1424299"
  },
  {
    "text": "the main courses all the time and I had to tell white you know wrote on switch statements and things for my fetch for",
    "start": "1424299",
    "end": "1429970"
  },
  {
    "text": "display classes because they never get eaten so we'll just do async method instead okay async methods well you",
    "start": "1429970",
    "end": "1437260"
  },
  {
    "text": "already know where to look because I mentioned that just a moment ago async methods are based on lowering so what",
    "start": "1437260",
    "end": "1443409"
  },
  {
    "text": "that means is that async methods are just one big piece of deception right like you know it's as if you're building",
    "start": "1443409",
    "end": "1449769"
  },
  {
    "text": "a state machine completely yourself that splits up the matter then does all of the tacking on your behalf but of course",
    "start": "1449769",
    "end": "1457120"
  },
  {
    "text": "now that you have the c-sharp source code available you can now start seeing how all of this voodoo actually works",
    "start": "1457120",
    "end": "1462130"
  },
  {
    "text": "okay let's take a look at you know where this voodoo takes place it's pretty much",
    "start": "1462130",
    "end": "1467529"
  },
  {
    "text": "all over here in the async rewrite contains like six or seven files or a little bit more not too bad but let me",
    "start": "1467529",
    "end": "1475360"
  },
  {
    "text": "just start by writing a little piece of code at the common line and sort of looking at the base you",
    "start": "1475360",
    "end": "1480789"
  },
  {
    "text": "know functionality and an async method then done sort of work our way up from there okay so let me just do a single CS",
    "start": "1480789",
    "end": "1488379"
  },
  {
    "text": "over here is this actually big enough for the back or should I",
    "start": "1488379",
    "end": "1494350"
  },
  {
    "text": "boost it boost it okay I'll boost it 36",
    "start": "1494350",
    "end": "1501899"
  },
  {
    "text": "good good okay static void main you know",
    "start": "1501899",
    "end": "1507879"
  },
  {
    "text": "just to be happy could you static async mean actually that let's not do that okay static async task of foo async I think",
    "start": "1507879",
    "end": "1518379"
  },
  {
    "text": "that's the simplest async method you can get right like you know they think matter that doesn't do anything so let's",
    "start": "1518379",
    "end": "1523869"
  },
  {
    "text": "just start with that one and of course you know I'll need using system later because I will likely do some console",
    "start": "1523869",
    "end": "1530529"
  },
  {
    "text": "right lines and system dot reading tasks like this okay let me just compile this",
    "start": "1530529",
    "end": "1538419"
  },
  {
    "text": "guy a single CS let's not bother with you know well let's actually do an",
    "start": "1538419",
    "end": "1544119"
  },
  {
    "text": "optimized build why not okay so I have this it complains about an async method lacking and your weight and",
    "start": "1544119",
    "end": "1550720"
  },
  {
    "text": "the whole thing will run synchronously for demo purposes we don't care okay so let's just open this guy and I could",
    "start": "1550720",
    "end": "1556929"
  },
  {
    "text": "actually open it an aisle spy to make it a little bit more friendly so we'll just go to see demos and the",
    "start": "1556929",
    "end": "1564100"
  },
  {
    "text": "see a sink to the eggsy okay and so here we go I have my foo async and it did a",
    "start": "1564100",
    "end": "1571149"
  },
  {
    "text": "good job D compiling this thing in fact I got more keywords than I initially wrote so that's also good at the bonus I",
    "start": "1571149",
    "end": "1577600"
  },
  {
    "text": "got a private key work there but I will actually go to a few options and I'll",
    "start": "1577600",
    "end": "1583029"
  },
  {
    "text": "spy over here and just disable a sync matter D compilation to take a look at",
    "start": "1583029",
    "end": "1588100"
  },
  {
    "text": "what's going on and now we start seeing something slightly more interesting now how many of you have looked behind the",
    "start": "1588100",
    "end": "1594309"
  },
  {
    "text": "scenes of async methods before a few okay so this is a worthy endeavor you",
    "start": "1594309",
    "end": "1600129"
  },
  {
    "text": "know to go to it so what's going on here I'm not going to go to all of the",
    "start": "1600129",
    "end": "1605799"
  },
  {
    "text": "details but effectively what the compiler has done is built this",
    "start": "1605799",
    "end": "1611169"
  },
  {
    "text": "beautiful little thing here called the Xing state machine so the async state machine is the thing",
    "start": "1611169",
    "end": "1616420"
  },
  {
    "text": "that's responsible to proceed your methods when any of the things that are awaited inside the body finish it's the",
    "start": "1616420",
    "end": "1623590"
  },
  {
    "text": "thing that sort of does the bookkeeping it's kind of you know mimicking an instruction pointer it knows where it is",
    "start": "1623590",
    "end": "1629410"
  },
  {
    "text": "in the async method and then if it needs to go to sleep because it hits in a wait for some operation that's not yet done",
    "start": "1629410",
    "end": "1636370"
  },
  {
    "text": "it will just say I can return at a later point in time here and it will go to that away table object and just say",
    "start": "1636370",
    "end": "1643030"
  },
  {
    "text": "please wake me up when you're done okay and then it will re-enter and the state",
    "start": "1643030",
    "end": "1648190"
  },
  {
    "text": "machine will actually do a move next now what you see here in the move next is that not much is happening because well",
    "start": "1648190",
    "end": "1654190"
  },
  {
    "text": "there's almost nothing you know in my in my method but there's still some non-trivial stuff happening here well",
    "start": "1654190",
    "end": "1660730"
  },
  {
    "text": "first of all we have an empty you know try over here well that's not very useful but let's ignore that for now and",
    "start": "1660730",
    "end": "1667660"
  },
  {
    "text": "we also have this build a table set result that's the equivalent to me doing a return statement",
    "start": "1667660",
    "end": "1672970"
  },
  {
    "text": "okay let me make this quote a little bit bigger to sort of show you what this set resulting is doing so let me just go",
    "start": "1672970",
    "end": "1680080"
  },
  {
    "text": "here and change it to tasks of int and then over here do return 42 what we're",
    "start": "1680080",
    "end": "1686620"
  },
  {
    "text": "going to see now is that the set result will actually correspond to this return 42 so when I recompile this thing and I",
    "start": "1686620",
    "end": "1694960"
  },
  {
    "text": "just you know hit a 5 here in aisle Spy you see over here set result equals",
    "start": "1694960",
    "end": "1701080"
  },
  {
    "text": "result and result equals 42 well there's something interesting happening here already why didn't we do set result 42",
    "start": "1701080",
    "end": "1707650"
  },
  {
    "text": "here hmm we are doing such result after doing the result computation inside this",
    "start": "1707650",
    "end": "1714460"
  },
  {
    "text": "try-catch block that's because we want all exceptions that are happening during the execution of the async method to",
    "start": "1714460",
    "end": "1720760"
  },
  {
    "text": "come out on the task and not escape somewhere on the tadpole so if I make it a little bit more interesting once more",
    "start": "1720760",
    "end": "1728380"
  },
  {
    "text": "and I put in something to divide by and I do 1 divided by D I could pass in 0",
    "start": "1728380",
    "end": "1734230"
  },
  {
    "text": "and end up with a division by 0 exception we want that thing to come out on the task and not on the tadpole",
    "start": "1734230",
    "end": "1739810"
  },
  {
    "text": "somewhere in case we have beyond a certain asynchronous execution point so if I go here now it will be",
    "start": "1739810",
    "end": "1745850"
  },
  {
    "text": "unclear what that tie catches for that I catch is sitting there to protect",
    "start": "1745850",
    "end": "1750980"
  },
  {
    "text": "against anything that made two exceptions so pretty much all the user code will be in the tie block that we've",
    "start": "1750980",
    "end": "1756890"
  },
  {
    "text": "already established everything inside the catch here is a way to signal the exception back to the collar to the task",
    "start": "1756890",
    "end": "1763549"
  },
  {
    "text": "that was returned and the set result at the bottom corresponds to a return statements okay now let's try to see",
    "start": "1763549",
    "end": "1770240"
  },
  {
    "text": "whether if I introduce more return statements I end up with more set result calls right so let me just do that as",
    "start": "1770240",
    "end": "1776390"
  },
  {
    "text": "well if D equals zero then of course you",
    "start": "1776390",
    "end": "1782360"
  },
  {
    "text": "know from now on in mathematics it shall be known that dividing by zero returns",
    "start": "1782360",
    "end": "1787809"
  },
  {
    "text": "1983 okay beautiful so we are redefining mathematics that's hit f5 well no",
    "start": "1787809",
    "end": "1796340"
  },
  {
    "text": "there's not more than one set result call what's really happening here is that all my decision logic goes there we",
    "start": "1796340",
    "end": "1802909"
  },
  {
    "text": "store the result in a variable we do all of this stuff beautifully inside the protected region so in case something",
    "start": "1802909",
    "end": "1809000"
  },
  {
    "text": "blows up we don't blow up ourselves and then we do set result at the end okay so",
    "start": "1809000",
    "end": "1814340"
  },
  {
    "text": "far not super interesting because I'm not awaiting anything like I'm just using an async method as a expensive way",
    "start": "1814340",
    "end": "1821000"
  },
  {
    "text": "to return an integer by doing a heap allocation of a task right not something",
    "start": "1821000",
    "end": "1826309"
  },
  {
    "text": "you should be doing at home so now let's actually change this to first of all",
    "start": "1826309",
    "end": "1833799"
  },
  {
    "text": "let's actually keep it this way and I'll just do a weight TAS not yield which is",
    "start": "1833799",
    "end": "1839150"
  },
  {
    "text": "the simplest thing I could be awaiting here so what's gonna happen now is that",
    "start": "1839150",
    "end": "1844909"
  },
  {
    "text": "my method now needs to be split into two different stages the first stage is to stuff that turns as soon as I call the",
    "start": "1844909",
    "end": "1851390"
  },
  {
    "text": "method and the second part that runs here is what happens after the TAS not yield eventually completes so now the",
    "start": "1851390",
    "end": "1858049"
  },
  {
    "text": "state machine starts having a purpose in life it needs to track whenever it wakes up and I before this does not yield or",
    "start": "1858049",
    "end": "1865789"
  },
  {
    "text": "after this does not yield okay so now we'll see the method being split into pieces so let me go here compile this",
    "start": "1865789",
    "end": "1873200"
  },
  {
    "text": "thing and go back to that state machine and then I'll also explain how the state machine gets kicked off at",
    "start": "1873200",
    "end": "1879680"
  },
  {
    "text": "later point but now it starts to become interesting right so what you see here inside the try catch is the minimal",
    "start": "1879680",
    "end": "1886670"
  },
  {
    "text": "thing required to effectively do this pass and resume of the async method so",
    "start": "1886670",
    "end": "1891710"
  },
  {
    "text": "let's just walk through it step by step now first of all we have our code setting here turns out yield in the",
    "start": "1891710",
    "end": "1897650"
  },
  {
    "text": "middle and the Stars lot yield is interesting in the sense that it doesn't even return a task it just returns a",
    "start": "1897650",
    "end": "1904340"
  },
  {
    "text": "yield away table which implements this whole awaited pattern meaning it has a captive waiter and the gutter waiter",
    "start": "1904340",
    "end": "1910940"
  },
  {
    "text": "happens to have a result type which is yield to a table dot yield to waiter just an inert type in sight is yielded a",
    "start": "1910940",
    "end": "1918980"
  },
  {
    "text": "table so you see over here that there is some code that emitted get a waiter on",
    "start": "1918980",
    "end": "1924140"
  },
  {
    "text": "top of that this is the code we had before compilers are allowed to do go to you know so don't worry about that",
    "start": "1924140",
    "end": "1931940"
  },
  {
    "text": "but over here you see it does what you would get a waiter and now we can do two things we can either check whether this",
    "start": "1931940",
    "end": "1938090"
  },
  {
    "text": "thing is already done or whether it's not done yet let's assume that it's already done by the time you do the await everyone knows",
    "start": "1938090",
    "end": "1945440"
  },
  {
    "text": "that you know if you try to do some asynchronous programming and you have a chance to do any kind of overlapping you",
    "start": "1945440",
    "end": "1951710"
  },
  {
    "text": "should do so right like you know this a weight doesn't have to be fused to a task like in the coda right and in the",
    "start": "1951710",
    "end": "1958010"
  },
  {
    "text": "Bing stack for example there's a lot of places where we do a whole bunch of tasks you know task t1 equals something",
    "start": "1958010",
    "end": "1963890"
  },
  {
    "text": "and then you seven hours later we do in a wait till on right so chances are that this t1 will already be done by the time",
    "start": "1963890",
    "end": "1970550"
  },
  {
    "text": "we hit that a weight point right you don't have to do a weight of the thought everywhere like you can store things in",
    "start": "1970550",
    "end": "1976130"
  },
  {
    "text": "a local and then by the time you await it it may already be done okay that's a very relevant case to actually optimize",
    "start": "1976130",
    "end": "1982640"
  },
  {
    "text": "for and this is this this block over here so this yield to weight if it's not",
    "start": "1982640",
    "end": "1988130"
  },
  {
    "text": "completed will do something let's ignore that but in case we've already done we'll just fall to two not that point",
    "start": "1988130",
    "end": "1994910"
  },
  {
    "text": "but will fall to over here so what's this thing in case we have done we'll do",
    "start": "1994910",
    "end": "2001150"
  },
  {
    "text": "get result and that get result made to an exception because it's amazing cans operation that has just finished and",
    "start": "2001150",
    "end": "2007000"
  },
  {
    "text": "then we do the rest of the methods okay so that's kind of what happens when this whole thing completes",
    "start": "2007000",
    "end": "2013059"
  },
  {
    "text": "now what happens in case this away table objects says are not done yet that's the",
    "start": "2013059",
    "end": "2018460"
  },
  {
    "text": "other case that's what's happening here so when we call gets a waiter we check are you done and if it says I'm not done",
    "start": "2018460",
    "end": "2026080"
  },
  {
    "text": "yet then we have to do the heavy lifting and what's the heavy lifting well the heavy lifting is we need to put",
    "start": "2026080",
    "end": "2032049"
  },
  {
    "text": "ourselves asleep in such a way that we can be woken up as soon as that thing says you need to resume so what are we",
    "start": "2032049",
    "end": "2039789"
  },
  {
    "text": "gonna do well the first thing that we do is everything to do with this state thing what you see here is this num",
    "start": "2039789",
    "end": "2046919"
  },
  {
    "text": "right which is just a name that I'll Spy has given this variable in reality it's not called num in fact it doesn't have",
    "start": "2046919",
    "end": "2053530"
  },
  {
    "text": "any name in what the compiler limits but so we read the state which is kind of",
    "start": "2053530",
    "end": "2058929"
  },
  {
    "text": "the instruction pointer of the state machine and so the initial time the state will be set to some value over",
    "start": "2058929",
    "end": "2065829"
  },
  {
    "text": "here and that causes us to enter this piece of code and now we come to the",
    "start": "2065829",
    "end": "2070929"
  },
  {
    "text": "conclusion that you know starting in this state we need to go to sleep because we just kicked off this",
    "start": "2070929",
    "end": "2076358"
  },
  {
    "text": "asynchronous operation that's not done immediately so we increment our state to the next",
    "start": "2076359",
    "end": "2081760"
  },
  {
    "text": "state in the state machine we say when we want to be woken up we want to be in state zero what will that do will",
    "start": "2081760",
    "end": "2089440"
  },
  {
    "text": "reenter this method at some point all the way from the top and we'll jump to the else block right because we have F",
    "start": "2089440",
    "end": "2095108"
  },
  {
    "text": "num not equal zero we'll do this and if nom equals zero we'll end up over here so we first set our state to the next",
    "start": "2095109",
    "end": "2101650"
  },
  {
    "text": "state and then we'll actually go to some levels of indirection which I won't go",
    "start": "2101650",
    "end": "2106930"
  },
  {
    "text": "into detail about has to do with execution context and all that kind of stuff will actually tell this a waiter",
    "start": "2106930",
    "end": "2113290"
  },
  {
    "text": "over here you know please attach the state machine to your body so that by",
    "start": "2113290",
    "end": "2120790"
  },
  {
    "text": "the time you're done you can actually kick him in the back and say like wake up continue where you left off so we're",
    "start": "2120790",
    "end": "2127210"
  },
  {
    "text": "basically just telling the ax waiter here's the thing you have to wake up when you're done that's what this",
    "start": "2127210",
    "end": "2132339"
  },
  {
    "text": "indirection actually does this away ton save on complete okay now there's something else happening here which is",
    "start": "2132339",
    "end": "2138369"
  },
  {
    "text": "quite interesting if you take a look at this whole state machine thing notice this one key word here it's a struct",
    "start": "2138369",
    "end": "2145610"
  },
  {
    "text": "it's actually stack allocated but of course at the point that you need to do asynchronous work the stack frame will",
    "start": "2145610",
    "end": "2152720"
  },
  {
    "text": "return what will happen the task that comes out of the async method will be returned to the caller where it may be",
    "start": "2152720",
    "end": "2159290"
  },
  {
    "text": "awaited and that may also return to the caller so like we're basically taking down our call stack and if this thing is",
    "start": "2159290",
    "end": "2165830"
  },
  {
    "text": "stack allocated well that memory is no longer valid so what's happening is that this whole async state machine gets",
    "start": "2165830",
    "end": "2173060"
  },
  {
    "text": "passed by reference to this helper method this await unsafe on completed",
    "start": "2173060",
    "end": "2179510"
  },
  {
    "text": "and that thing will actually box it to the heap so in case you end up in the situation where your whole async method",
    "start": "2179510",
    "end": "2185810"
  },
  {
    "text": "runs synchronously no heap memory was killed in the process okay but as soon as you hit something",
    "start": "2185810",
    "end": "2192230"
  },
  {
    "text": "async you take the penalty of taking that whole state machine moving it up to the heap so it can live longer than the",
    "start": "2192230",
    "end": "2198410"
  },
  {
    "text": "current call stack and then at a later point in time we can resume it so async",
    "start": "2198410",
    "end": "2203450"
  },
  {
    "text": "method start off cheap once you hit the asynchronous aspect of them you pay some additional price but",
    "start": "2203450",
    "end": "2209780"
  },
  {
    "text": "that's surprised that that you're willing to pay because you know there's a lot of convenience in doing asynchronous programming this way okay",
    "start": "2209780",
    "end": "2215590"
  },
  {
    "text": "so now that's kind of the basics of how this works let me just make it more complex now by just adding a couple more",
    "start": "2215590",
    "end": "2223760"
  },
  {
    "text": "things here let me do a weight TAS not yield and then do console.writeline one",
    "start": "2223760",
    "end": "2228890"
  },
  {
    "text": "over here and now I'm just gonna copy paste this thing a couple of times okay",
    "start": "2228890",
    "end": "2234140"
  },
  {
    "text": "like this so that you get in a chance to",
    "start": "2234140",
    "end": "2239180"
  },
  {
    "text": "sort of see the state machine stuff in practice so I now have five yields and",
    "start": "2239180",
    "end": "2244340"
  },
  {
    "text": "here I could do all sorts of loop constructs let's not bother you with with all kinds of complex loop structures well just have five you know",
    "start": "2244340",
    "end": "2251450"
  },
  {
    "text": "task dot yields and I could do other things here doesn't have to be tossed off yield I could do tasks from result",
    "start": "2251450",
    "end": "2256790"
  },
  {
    "text": "one you know I don't know await another performance crime you know it's a sort",
    "start": "2256790",
    "end": "2263540"
  },
  {
    "text": "of run of nothing you know whatever right like you can be awaiting a whole bunch of things now if I go back here",
    "start": "2263540",
    "end": "2269540"
  },
  {
    "text": "and I compile this whole thing and I go back to my state machine over here",
    "start": "2269540",
    "end": "2275540"
  },
  {
    "text": "well now you start seeing what's really going on right like my method has five stages of execution",
    "start": "2275540",
    "end": "2280960"
  },
  {
    "text": "in the past it didn't look that complex because there were two stages and we compile it using if-else but now we have",
    "start": "2280960",
    "end": "2287930"
  },
  {
    "text": "five stages of execution so we need to have a big switch statement here so that we are in state zero we'll do this if",
    "start": "2287930",
    "end": "2294290"
  },
  {
    "text": "you don't state one we'll do this and we'll jump to label f9 if you're in case two we'll do this so for example case",
    "start": "2294290",
    "end": "2302030"
  },
  {
    "text": "two what case - gonna be well case two is that thing with the task from results apparently so if I go here once we're in",
    "start": "2302030",
    "end": "2309890"
  },
  {
    "text": "case two we'll do the next thing what needs to happen so you see you know in case one we need to do two from result",
    "start": "2309890",
    "end": "2315980"
  },
  {
    "text": "when the from result is done we need to get the result of this task from result and need to do the next thing when this",
    "start": "2315980",
    "end": "2322280"
  },
  {
    "text": "thing is done we need to do another yield over here I clicked on the wrong thing but you sort of see like you know",
    "start": "2322280",
    "end": "2328040"
  },
  {
    "text": "all the parts of your method nicely split up into pieces it's as if the compiler just took scissors and it's",
    "start": "2328040",
    "end": "2334070"
  },
  {
    "text": "cuts to all the await keywords and splits everything up right okay so let",
    "start": "2334070",
    "end": "2340280"
  },
  {
    "text": "me just point out one more interesting complication of all of this voodoo business right a weight is an",
    "start": "2340280",
    "end": "2348620"
  },
  {
    "text": "expression at some point it was considered very early on on the design should it be a statement or an",
    "start": "2348620",
    "end": "2353780"
  },
  {
    "text": "expression well you know it being an expression makes it very flexible because then it has a value and you can",
    "start": "2353780",
    "end": "2360080"
  },
  {
    "text": "use it anywhere you expect a value including an assignments 99% of people",
    "start": "2360080",
    "end": "2366050"
  },
  {
    "text": "will do int x equals a weight tassel from result but other people will do call a method passing in the result of a",
    "start": "2366050",
    "end": "2373130"
  },
  {
    "text": "waiting something right so I can do something slightly more evil over here",
    "start": "2373130",
    "end": "2380240"
  },
  {
    "text": "so let me just get rid of all of this nonsense to write more nonsense and so",
    "start": "2380240",
    "end": "2385940"
  },
  {
    "text": "what I will do is let me do console dot write line off console dot read line",
    "start": "2385940",
    "end": "2394390"
  },
  {
    "text": "okay and you actually try to outline this a little bit I'm a little bit OCD",
    "start": "2394390",
    "end": "2400130"
  },
  {
    "text": "so it needs to be a little bit sexy so console.writeline of console dot",
    "start": "2400130",
    "end": "2405800"
  },
  {
    "text": "readline plus let me do another console dot readline plus and",
    "start": "2405800",
    "end": "2411170"
  },
  {
    "text": "we actually make this thing associative this way now it starts to look",
    "start": "2411170",
    "end": "2416450"
  },
  {
    "text": "completely nonsense but you know over here a way to ask Todd from result of",
    "start": "2416450",
    "end": "2423010"
  },
  {
    "text": "hello doesn't mean anything it will just ask the user to enter two things right",
    "start": "2423010",
    "end": "2428329"
  },
  {
    "text": "like no I will enter a B and then it will print a B hello very useful like",
    "start": "2428329",
    "end": "2433609"
  },
  {
    "text": "you know can likely make it a store app and charge $0.99 for it we're not gonna",
    "start": "2433609",
    "end": "2439280"
  },
  {
    "text": "do that and that takes too much time but so what's happening here is something quite interesting what's happening is",
    "start": "2439280",
    "end": "2446540"
  },
  {
    "text": "that before we're gonna figure out that we have to go to sleep and wake up again",
    "start": "2446540",
    "end": "2451609"
  },
  {
    "text": "all of this nonsense with a sync state machines we are merrily executing stuff",
    "start": "2451609",
    "end": "2456740"
  },
  {
    "text": "we are executing a console headline asking the user about something then we do another console dot readline you know",
    "start": "2456740",
    "end": "2463250"
  },
  {
    "text": "and and then ultimately we do this task from result and we come to the conclusion oh we have to go to sleep so like how do you wake up all of",
    "start": "2463250",
    "end": "2470720"
  },
  {
    "text": "this calculation that's already happening what's happening here is that we have to store all of those",
    "start": "2470720",
    "end": "2477980"
  },
  {
    "text": "intermediate results so if I take a look over here that's where you end up with",
    "start": "2477980",
    "end": "2484520"
  },
  {
    "text": "this beautiful thing called a wrap okay and this wrap is actually a feature",
    "start": "2484520",
    "end": "2490730"
  },
  {
    "text": "called stacks building and that's the implication of having a weight as an expression it can occur anything in a",
    "start": "2490730",
    "end": "2497960"
  },
  {
    "text": "complex expression being evaluated so normally what would happen if you have something like this is that the code",
    "start": "2497960",
    "end": "2505099"
  },
  {
    "text": "that we would generate would be something like simply you know do console dot readline make a call to",
    "start": "2505099",
    "end": "2513500"
  },
  {
    "text": "console dot headline make another call to console dot readline then load that strength for a hello or",
    "start": "2513500",
    "end": "2521059"
  },
  {
    "text": "something and then do some add instructions well you can't do add instructions with strings you have to",
    "start": "2521059",
    "end": "2526069"
  },
  {
    "text": "call single concat they would just be stack based you would just be pushing one thing on the stack another thing on",
    "start": "2526069",
    "end": "2531500"
  },
  {
    "text": "the stack another thing on the stack and then merrily reducing the whole thing by doing you know operations like add and",
    "start": "2531500",
    "end": "2537079"
  },
  {
    "text": "subtract and multiply or what have you we can't do that anymore like we have stuff sitting on our evaluation stack",
    "start": "2537079",
    "end": "2543650"
  },
  {
    "text": "and now we have to go to sleep well what you have to do at that point is evacuate the whole furniture all right you know write it",
    "start": "2543650",
    "end": "2549440"
  },
  {
    "text": "all down on a piece of paper put it somewhere on the heap on a sticky note so that when you wake up you can restore",
    "start": "2549440",
    "end": "2554750"
  },
  {
    "text": "it and so those sticky notes are called the haps so that's what's happening here is normally those would just be sitting",
    "start": "2554750",
    "end": "2562040"
  },
  {
    "text": "in local variables but what happens is that we have to be prepared at at some",
    "start": "2562040",
    "end": "2567320"
  },
  {
    "text": "point this thing may have to go to sleep so we better put it in a position when we have to go to sleep we won't forget",
    "start": "2567320",
    "end": "2573890"
  },
  {
    "text": "about it so you see this console.readline console.readline they get assigned to rats and then later over",
    "start": "2573890",
    "end": "2580310"
  },
  {
    "text": "here we are actually restoring all of this using those apps that you see over here so you see we are eating those",
    "start": "2580310",
    "end": "2586910"
  },
  {
    "text": "things back from the fields at a later point in time and that's something that you will see a lot for those more",
    "start": "2586910",
    "end": "2592250"
  },
  {
    "text": "advanced language features is that things that look like locals or that look like intermediate results may",
    "start": "2592250",
    "end": "2597740"
  },
  {
    "text": "actually end up being fields on something allocated on the heap there's actually exactly the same thing as with",
    "start": "2597740",
    "end": "2602960"
  },
  {
    "text": "the closures that I was going to talk about for like delegates and and lambdas exactly the same thing something that",
    "start": "2602960",
    "end": "2609410"
  },
  {
    "text": "looks like a local may end up somewhere sitting on the heap because it needs to live longer than you would normally",
    "start": "2609410",
    "end": "2615230"
  },
  {
    "text": "expect okay and then of course you know we also generate codes to actually know how to use apps that's a change that",
    "start": "2615230",
    "end": "2621590"
  },
  {
    "text": "happened at some point because well if that async method turns for days and",
    "start": "2621590",
    "end": "2626960"
  },
  {
    "text": "days and days right and you have some expensive objects sitting there it will of course be hooted and not be ready for",
    "start": "2626960",
    "end": "2633170"
  },
  {
    "text": "garbage collection so we need to also allow those fields as soon as we are done with them in certain cases if you",
    "start": "2633170",
    "end": "2638510"
  },
  {
    "text": "have multiple await sites that have the same stacks billing requirements that will actually reuse those are fields so",
    "start": "2638510",
    "end": "2644900"
  },
  {
    "text": "if there's other places where you need the same types you know for temporary state to be stored it will try to to",
    "start": "2644900",
    "end": "2651830"
  },
  {
    "text": "reuse those airfields as well okay so that's what's going on with async",
    "start": "2651830",
    "end": "2657140"
  },
  {
    "text": "methods I'll just show you one more thing in the compiler source code if you",
    "start": "2657140",
    "end": "2662810"
  },
  {
    "text": "ever wondered how c-sharp 6.0 that it's magic to make it possible to await",
    "start": "2662810",
    "end": "2668570"
  },
  {
    "text": "inside a catch and a finally block let me actually make this bigger for the back over there this file does",
    "start": "2668570",
    "end": "2676070"
  },
  {
    "text": "everything need to be able to do in a wait inside a catch block and the wait inside of finally it's not easy",
    "start": "2676070",
    "end": "2682100"
  },
  {
    "text": "you know there's a lot of stuff that needs to be taken taken care of and so",
    "start": "2682100",
    "end": "2687560"
  },
  {
    "text": "here you see like all this case is nicely documented the C sharp compiler code is like a hit or miss in some sense",
    "start": "2687560",
    "end": "2693500"
  },
  {
    "text": "some pieces are very dense and not really documented other pieces are you know heavily documented so you know you",
    "start": "2693500",
    "end": "2700280"
  },
  {
    "text": "just have to be lucky that day and otherwise you just attach a debugger and try to figure out what's going on of course but so over here you see a",
    "start": "2700280",
    "end": "2707080"
  },
  {
    "text": "weights containing finally blocks there's a lot of stuff that actually has",
    "start": "2707080",
    "end": "2712340"
  },
  {
    "text": "to be done because what's really happening is that inside a finally block there's a hidden hot potato what do I",
    "start": "2712340",
    "end": "2719360"
  },
  {
    "text": "mean with a hidden hot potato there may be an exception sitting somewhere but it's not even sitting in a variable",
    "start": "2719360",
    "end": "2725030"
  },
  {
    "text": "because it's the CLR at the runtime that no switch exception is currently flying by and that when the finally block is",
    "start": "2725030",
    "end": "2732440"
  },
  {
    "text": "done that exception needs to come out again to the caller right so it needs to sort of keep that state somewhere now",
    "start": "2732440",
    "end": "2739100"
  },
  {
    "text": "the c-sharp compiler doesn't have an easy job here because that exception is not capable inside a finally block so if",
    "start": "2739100",
    "end": "2745340"
  },
  {
    "text": "you do in a wait inside finally and we have to put that matter to sleep we sort of have to find that hidden potato",
    "start": "2745340",
    "end": "2751820"
  },
  {
    "text": "buried and the count extract it keep it somewhere so we can retell which one today sync method resumes so all of this",
    "start": "2751820",
    "end": "2758780"
  },
  {
    "text": "stuff happens here and what's actually happening is if you have a tie finally within a wait inside finally you will",
    "start": "2758780",
    "end": "2765530"
  },
  {
    "text": "not find any finally block in the generated il code it will become a try-catch with a little kind of thing",
    "start": "2765530",
    "end": "2771500"
  },
  {
    "text": "now the Rito is not a plain Rito it actually says over here like Joey X but",
    "start": "2771500",
    "end": "2778430"
  },
  {
    "text": "in reality it's not really using a exits using an interesting type this guy",
    "start": "2778430",
    "end": "2784600"
  },
  {
    "text": "called exception dispatch infer how many of you know exception this pageant for",
    "start": "2784600",
    "end": "2789910"
  },
  {
    "text": "know if not you may want to know about it and exception dispatch infer was a",
    "start": "2789910",
    "end": "2796280"
  },
  {
    "text": "type that was actually introduced in c-sharp procedure in the dotnet framework together with c-sharp 5.0 is",
    "start": "2796280",
    "end": "2803780"
  },
  {
    "text": "this little helper in system runtime exception services and it's this thing",
    "start": "2803780",
    "end": "2809780"
  },
  {
    "text": "that allows you to do a so on an exception after you capture",
    "start": "2809780",
    "end": "2815300"
  },
  {
    "text": "the exception now you will say what's the big deal with all of this kind of stuff can't I just use ditto keyword to",
    "start": "2815300",
    "end": "2820730"
  },
  {
    "text": "itto the exception well if you Rito an exception the call stack gets reset okay so exception this pageant who allows you",
    "start": "2820730",
    "end": "2828020"
  },
  {
    "text": "to pretend nothing happens like you had an exception in your hand and you want to pretend that you never saw it never",
    "start": "2828020",
    "end": "2833960"
  },
  {
    "text": "Ito Ritu what you will just retail with as if you never had anything to do with it",
    "start": "2833960",
    "end": "2839270"
  },
  {
    "text": "so what's really happening is that the c-sharp compiler will generate code to Rito the exception in the most you know",
    "start": "2839270",
    "end": "2845900"
  },
  {
    "text": "innocent-looking way so that you can't sort of even tell that it was ever there and touch the hot potato okay and again",
    "start": "2845900",
    "end": "2853160"
  },
  {
    "text": "you know this is something that happens over here if it's available like if you",
    "start": "2853160",
    "end": "2858260"
  },
  {
    "text": "actually compile this code before it don't matter a big version that doesn't have it available then we'll just use a",
    "start": "2858260",
    "end": "2863750"
  },
  {
    "text": "regular Ito so you can actually experiment with the app try to run this thing against different a framework",
    "start": "2863750",
    "end": "2869720"
  },
  {
    "text": "versions and the call stack of an exception that's flying by to try finally may look different depending on",
    "start": "2869720",
    "end": "2876020"
  },
  {
    "text": "that framework version because in some cases we don't have the utilities available to be able to pretend nothing",
    "start": "2876020",
    "end": "2882260"
  },
  {
    "text": "happens and so that's what we call over here to better retail okay so that's",
    "start": "2882260",
    "end": "2888680"
  },
  {
    "text": "what's happening here this file is a beautiful file to study if you want to see all the intricacies of how to you",
    "start": "2888680",
    "end": "2894560"
  },
  {
    "text": "know deal with exceptions inside async and wait okay well you don't have to deal with it but like how to compile a",
    "start": "2894560",
    "end": "2900980"
  },
  {
    "text": "deal so it's okay so that's that's that one and we just have time for a small",
    "start": "2900980",
    "end": "2906950"
  },
  {
    "text": "dessert okay mmm well I don't have to maximize this you can read it I only",
    "start": "2906950",
    "end": "2913100"
  },
  {
    "text": "have two desserts today on the dessert cart one is about dynamic that gives us",
    "start": "2913100",
    "end": "2920810"
  },
  {
    "text": "a chance to potentially crack open win debug and do some native debugging if you're still hungry",
    "start": "2920810",
    "end": "2926720"
  },
  {
    "text": "or we could do something really light you know like a sorbet which will be the transparent identifier okay okay the",
    "start": "2926720",
    "end": "2934250"
  },
  {
    "text": "first one dynamic yes you know that's the chocolate lava cake and transparent",
    "start": "2934250",
    "end": "2942110"
  },
  {
    "text": "identifier okay I sort of influence to Paul over here I think mm-hmm let's do dynamic you",
    "start": "2942110",
    "end": "2950150"
  },
  {
    "text": "know and transparent identifies there's a couple of very good blog post about that one actually and I did that on a",
    "start": "2950150",
    "end": "2955790"
  },
  {
    "text": "different talk so if you go to the videos you will will likely find that one so dynamic people have a love/hate",
    "start": "2955790",
    "end": "2964970"
  },
  {
    "text": "relationship with dynamic I do as well but you know in cases where it's useful it's useful that sounds like a tautology",
    "start": "2964970",
    "end": "2972970"
  },
  {
    "text": "but here you go I've just prepared a very simple piece of code here where I",
    "start": "2972970",
    "end": "2980300"
  },
  {
    "text": "use static dynamic app taking in to dynamics and doing a plus B okay so this",
    "start": "2980300",
    "end": "2985340"
  },
  {
    "text": "can just add two things together using using dynamic and those two things you know can be anything that are edible and",
    "start": "2985340",
    "end": "2992630"
  },
  {
    "text": "it will figure it out at compile time how to do it now why is this interesting because in some cases and depends the",
    "start": "2992630",
    "end": "2999800"
  },
  {
    "text": "kind of code you write right you know if you're dealing with dynamically typed objects and so on well this may be a",
    "start": "2999800",
    "end": "3005140"
  },
  {
    "text": "good choice but also like sometimes in highly performant stacks like disturb",
    "start": "3005140",
    "end": "3010300"
  },
  {
    "text": "I'm working on and Bing sometimes we have to do a lot of late bound stuff using reflection and so on and then",
    "start": "3010300",
    "end": "3016420"
  },
  {
    "text": "actually you may want to consider well if we use dynamic a lot of optimizations",
    "start": "3016420",
    "end": "3022150"
  },
  {
    "text": "around reflection will be done for us without us having to do a lot of heavy stuff because once you start using",
    "start": "3022150",
    "end": "3028480"
  },
  {
    "text": "dynamic the code here that those a plus B will learn it will become",
    "start": "3028480",
    "end": "3035200"
  },
  {
    "text": "progressively better the more things you feed through it and that all happens dynamically at runtime the way that",
    "start": "3035200",
    "end": "3041530"
  },
  {
    "text": "happens is by something called polymorphic inline cache fully morphic inline - okay so what's gonna happen is",
    "start": "3041530",
    "end": "3051010"
  },
  {
    "text": "that the first time we call at with one and two this dynamic methods will cry",
    "start": "3051010",
    "end": "3056590"
  },
  {
    "text": "out to his daddy or mommy or whoever the compiler happens to be that day I will",
    "start": "3056590",
    "end": "3062080"
  },
  {
    "text": "just say like help I don't know how to have two integers together and then c-sharp compiler will come in at one",
    "start": "3062080",
    "end": "3067840"
  },
  {
    "text": "time like a Superman and say my son here's how you add a and B together okay",
    "start": "3067840",
    "end": "3073030"
  },
  {
    "text": "you will cause them to end you will do an ADD instruction in IL and you will do that",
    "start": "3073030",
    "end": "3078050"
  },
  {
    "text": "instruction okay go back to sleep you know continue doing that but then I will",
    "start": "3078050",
    "end": "3083060"
  },
  {
    "text": "bother it with a second question and so this polymorphic in line casual ready knows like if I get two ends I",
    "start": "3083060",
    "end": "3089060"
  },
  {
    "text": "know what to do I don't have to bother the compiler anymore but now I give it bar and foo and I oh my god like how do",
    "start": "3089060",
    "end": "3095690"
  },
  {
    "text": "I add two strings together so again it is the same thing it checks like arduous to think ends no they're not ends like",
    "start": "3095690",
    "end": "3102440"
  },
  {
    "text": "oh they're things I don't know about it will last a compiler to give it a piece of code that it will compile you know",
    "start": "3102440",
    "end": "3109160"
  },
  {
    "text": "using the JIT compiler it will become as fast as if it's statically written code and so it will now learn well to add to",
    "start": "3109160",
    "end": "3116540"
  },
  {
    "text": "his things together unity past operands back to string called the string dot concat method and - your answer and the",
    "start": "3116540",
    "end": "3123230"
  },
  {
    "text": "same thing for at the date time you know and anything that may go to this polymorphic and line cache so let me",
    "start": "3123230",
    "end": "3129349"
  },
  {
    "text": "just show you this one you know at one time now so I'll just turn this with the",
    "start": "3129349",
    "end": "3134930"
  },
  {
    "text": "optimizer turned on so I'm just compiling this guy it's called in for dynamic okay and I'm just gonna run then",
    "start": "3134930",
    "end": "3143060"
  },
  {
    "text": "over here actually let me run it with debug it attached how many of you have",
    "start": "3143060",
    "end": "3148730"
  },
  {
    "text": "used when debug couple okay yeah so when debug is a native debugger which",
    "start": "3148730",
    "end": "3154580"
  },
  {
    "text": "comes with the Windows SDK and a bunch of other SDK so you can definitely find",
    "start": "3154580",
    "end": "3160730"
  },
  {
    "text": "it it also tends to be forgetful about font settings I swear that I actually",
    "start": "3160730",
    "end": "3165740"
  },
  {
    "text": "changed it before I came down here you don't believe me or not it doesn't",
    "start": "3165740",
    "end": "3170960"
  },
  {
    "text": "matter here you go so I've just started this the right-hand side don't bother with",
    "start": "3170960",
    "end": "3177020"
  },
  {
    "text": "that that source code so I'll just do G here to run this thing so it's now running another debugger okay and I'll",
    "start": "3177020",
    "end": "3183920"
  },
  {
    "text": "just press Enter well let's not do percent yet let me break into the debugger so I will do debug dot break",
    "start": "3183920",
    "end": "3190670"
  },
  {
    "text": "and now I will load something oh by the way I'm not supposed to show this but",
    "start": "3190670",
    "end": "3195920"
  },
  {
    "text": "this is who knows Dave Cutler he's the guy who built Windows NT kernel and I",
    "start": "3195920",
    "end": "3203180"
  },
  {
    "text": "had the breakpoint I'm in his assembly code so like you know paste Lord you know so let me just close that you know",
    "start": "3203180",
    "end": "3209240"
  },
  {
    "text": "it's just in three instruction so there's nothing secret about that one but I'll just do load by s.o.s CLR to load something",
    "start": "3209240",
    "end": "3217310"
  },
  {
    "text": "called Sun of strike that's a debugger extension native debugger extension for the CLR and I can now do something like",
    "start": "3217310",
    "end": "3223760"
  },
  {
    "text": "dump to dump everything on the heap and I'll do it by type called dynamic",
    "start": "3223760",
    "end": "3230570"
  },
  {
    "text": "methods that's something I happen to know and there should be not much on the heap of that type actually I may",
    "start": "3230570",
    "end": "3237560"
  },
  {
    "text": "actually get stuck here because it's trying to download symbols and the Wi-Fi",
    "start": "3237560",
    "end": "3242630"
  },
  {
    "text": "is not exactly fiber-optic but yeah so like there's no no objects on the heap",
    "start": "3242630",
    "end": "3249500"
  },
  {
    "text": "of type dynamic methods so that's good so let me resume this debugging session and now press Enter",
    "start": "3249500",
    "end": "3255950"
  },
  {
    "text": "this is where my code actually cried out to the compiler to say help I need to",
    "start": "3255950",
    "end": "3262280"
  },
  {
    "text": "add two integers together how do I do that okay and so it now did that little dialogue with the c-sharp compiler at a",
    "start": "3262280",
    "end": "3267800"
  },
  {
    "text": "long time and it came to the conclusion that it now knows how to do that and so",
    "start": "3267800",
    "end": "3273020"
  },
  {
    "text": "you see it actually loaded systems of dynamic you know and all that kind of stuff so I will now break this guy again",
    "start": "3273020",
    "end": "3278780"
  },
  {
    "text": "you know in the debugger and I will can't get rid of Dave you know he's 76",
    "start": "3278780",
    "end": "3286220"
  },
  {
    "text": "he still comes to work every day so he always pops up everywhere but so here",
    "start": "3286220",
    "end": "3292280"
  },
  {
    "text": "you see we now have two dynamic methods sitting on the heap and what I will do",
    "start": "3292280",
    "end": "3298460"
  },
  {
    "text": "is I will take that one which is 112 bytes long I just happen to know that that's the one I'm looking for you just",
    "start": "3298460",
    "end": "3305869"
  },
  {
    "text": "poke around to all of these if you want to reproduce this but you will do dump il on those things and take a look at",
    "start": "3305869",
    "end": "3311780"
  },
  {
    "text": "the il code generated in the dynamic method and what we see over here is actually code to unbox two arguments to",
    "start": "3311780",
    "end": "3320900"
  },
  {
    "text": "ends you see over here unbox two n32 all sorts of things to actually unbox those",
    "start": "3320900",
    "end": "3327290"
  },
  {
    "text": "two guys let me also take a look at the other piece of generated code here and you see",
    "start": "3327290",
    "end": "3333890"
  },
  {
    "text": "over here which one is this one here you actually see oops I've kind of lost",
    "start": "3333890",
    "end": "3339380"
  },
  {
    "text": "myself here in the middle but here this there you go it has learned how to unbox",
    "start": "3339380",
    "end": "3346810"
  },
  {
    "text": "two integers and run the add instruction to get the sum of two integers it didn't know about it at compile time at the",
    "start": "3346810",
    "end": "3353230"
  },
  {
    "text": "wrong time the compiler told it that's how you do it so now let me actually resume this piece of code and bothered",
    "start": "3353230",
    "end": "3359859"
  },
  {
    "text": "that polymorphic inline cache by trying to add two strings together so it's now",
    "start": "3359859",
    "end": "3365800"
  },
  {
    "text": "adding two strings together it again did that whole cry out for help thing to the c-sharp compiler at the runtime and so",
    "start": "3365800",
    "end": "3372670"
  },
  {
    "text": "when I break into this thing and there he is again I will do dump heap and you see there's",
    "start": "3372670",
    "end": "3378700"
  },
  {
    "text": "more methods that have been generated so let me actually try to dump the il code",
    "start": "3378700",
    "end": "3384369"
  },
  {
    "text": "using dump il for one of these new guys and you see over here the C sharp compiler at the runtime has told it to",
    "start": "3384369",
    "end": "3391869"
  },
  {
    "text": "add two strings together please cast the two operands to system dot staying then call system dot",
    "start": "3391869",
    "end": "3397810"
  },
  {
    "text": "stinking cat on those two things and there's your answer so now when I call that thing again it's",
    "start": "3397810",
    "end": "3403180"
  },
  {
    "text": "as if that dynamic method was written by you at compile time to do type checks if",
    "start": "3403180",
    "end": "3408400"
  },
  {
    "text": "the two things are inside I'll do it this way if the two things are strings I will do it that way you can't get much",
    "start": "3408400",
    "end": "3414099"
  },
  {
    "text": "faster than that so like even though dynamic may have you know a bad name for like you know doing",
    "start": "3414099",
    "end": "3419950"
  },
  {
    "text": "a lot of heavy stuff at runtime when you really need it you can't really beat it all that much by doing your own kind of",
    "start": "3419950",
    "end": "3427480"
  },
  {
    "text": "you know runtime code generation all sorts of Voodoo then it's actually a good thing to use of course don't use it",
    "start": "3427480",
    "end": "3435099"
  },
  {
    "text": "in a way that you do search and replace inside all your c-sharp codes and change all of var to dynamic such that you have",
    "start": "3435099",
    "end": "3443650"
  },
  {
    "text": "a Java Script experience from now on and some people have that as a fetish I",
    "start": "3443650",
    "end": "3449200"
  },
  {
    "text": "don't bit like you could do that don't do that right like but in cases where it's actually useful it's actually darn",
    "start": "3449200",
    "end": "3455619"
  },
  {
    "text": "useful okay and of course I could do G over here and actually let it learn about daytime offset as well and it's",
    "start": "3455619",
    "end": "3461680"
  },
  {
    "text": "actually terminating the process at this point so I'm not sure whether I can still I can still find it but so if I",
    "start": "3461680",
    "end": "3466930"
  },
  {
    "text": "poke in here likely I will find out that it's now also learned about how to do",
    "start": "3466930",
    "end": "3472180"
  },
  {
    "text": "the OP underscore addition static method call to add a date timespan together because again it cried",
    "start": "3472180",
    "end": "3478270"
  },
  {
    "text": "out for help for that one but now if I keep calling this thing with date times and time spans and strings and strings",
    "start": "3478270",
    "end": "3483790"
  },
  {
    "text": "and incidents it will be as fast as you know static code almost it needs to do",
    "start": "3483790",
    "end": "3489310"
  },
  {
    "text": "some type checks of course but you know in a dynamic world without type checks",
    "start": "3489310",
    "end": "3494440"
  },
  {
    "text": "there's not much you can do okay so that's kind of a whirlwind tour of a",
    "start": "3494440",
    "end": "3499630"
  },
  {
    "text": "couple of language features and the key thing to actually take back home is this",
    "start": "3499630",
    "end": "3506530"
  },
  {
    "text": "beautiful thing right like you know a couple of years ago and the whole Walden effort started it's now all available on",
    "start": "3506530",
    "end": "3513040"
  },
  {
    "text": "github and open source you know just you know ctrl F gets you a long way and finding things like you know if you hear",
    "start": "3513040",
    "end": "3519430"
  },
  {
    "text": "oh they have this new thing called tuple deconstruction and you know the word deconstruct and how to spell that one",
    "start": "3519430",
    "end": "3526030"
  },
  {
    "text": "you can do search all over here in the code base and you will actually end up you know and you know finding a whole",
    "start": "3526030",
    "end": "3531760"
  },
  {
    "text": "bunch of things that have to do with deconstruction take a look at a change list you know try to find like a coat",
    "start": "3531760",
    "end": "3537520"
  },
  {
    "text": "hanger like a little light in the darkness like oh this looks interesting that's this new language feature go to",
    "start": "3537520",
    "end": "3543160"
  },
  {
    "text": "the commit list and you will actually typically find in the whole commit that has the whole language feature coming in",
    "start": "3543160",
    "end": "3548980"
  },
  {
    "text": "as one big pull request into the source code so a very very nice thing to be",
    "start": "3548980",
    "end": "3554710"
  },
  {
    "text": "able to to dig into now in the past you have to sort of reverse engineer everything okay so with that you know I",
    "start": "3554710",
    "end": "3562210"
  },
  {
    "text": "thank you for for your attention and swinging by I will be around you know in the venue so if you have any questions",
    "start": "3562210",
    "end": "3568480"
  },
  {
    "text": "please come to me I will also be here tomorrow for a talk about dotnet",
    "start": "3568480",
    "end": "3573790"
  },
  {
    "text": "performance I also have an ask me anything with bill bill walking it over there tomorrow I believe somewhere",
    "start": "3573790",
    "end": "3580900"
  },
  {
    "text": "around noon early afternoon yeah yeah exactly all right thank you",
    "start": "3580900",
    "end": "3588420"
  },
  {
    "text": "you",
    "start": "3589310",
    "end": "3591370"
  }
]