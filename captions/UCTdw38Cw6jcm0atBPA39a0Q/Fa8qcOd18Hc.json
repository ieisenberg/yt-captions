[
  {
    "text": "my name is Robert Secord uh if any of you were at the Oslo C plus plus User",
    "start": "7319",
    "end": "13139"
  },
  {
    "text": "Group yesterday this is a lot of overlap with that talk I'm just",
    "start": "13139",
    "end": "18600"
  },
  {
    "text": "gonna focus on the the second half of that talk which was signed versus",
    "start": "18600",
    "end": "24359"
  },
  {
    "text": "unsigned integers and provide a little bit more detail I don't have a ton of slides which I usually do which means",
    "start": "24359",
    "end": "29939"
  },
  {
    "text": "the talk might fit but also you know I could take questions while we're going",
    "start": "29939",
    "end": "35700"
  },
  {
    "text": "um I cut my travel very close so there's a car waiting outside to rush me to the",
    "start": "35700",
    "end": "40920"
  },
  {
    "text": "the train station and then I'm off to the airport and back to Portugal finished my three days left on my",
    "start": "40920",
    "end": "47160"
  },
  {
    "text": "vacation once I'm done here um and so uh so after after the talk",
    "start": "47160",
    "end": "52739"
  },
  {
    "text": "I've just got to run out so uh you know ask all the questions during the talk if you if you get between me and the door",
    "start": "52739",
    "end": "59460"
  },
  {
    "text": "after the talk I'm nearly 300 pounds and it's probably gonna hurt",
    "start": "59460",
    "end": "65600"
  },
  {
    "text": "um so let me get started um I did this poll question last night",
    "start": "65820",
    "end": "71460"
  },
  {
    "text": "but I'll do it again just just in case it's a different audience I've done this poll twice now and it's I've gotten",
    "start": "71460",
    "end": "78479"
  },
  {
    "text": "pretty much similar results each time uh but um",
    "start": "78479",
    "end": "83520"
  },
  {
    "text": "you know the questions around uh when you know why do you choose to use an unsigned",
    "start": "83520",
    "end": "90600"
  },
  {
    "text": "integer right and so the first reason is that you use it if you want to have",
    "start": "90600",
    "end": "96060"
  },
  {
    "text": "modular behavior and that's the only reason you choose an unsigned integer the second answer is that you use",
    "start": "96060",
    "end": "102840"
  },
  {
    "text": "unsigned integers because you you want to represent a value that can't become negative it only is zero or positive",
    "start": "102840",
    "end": "110880"
  },
  {
    "text": "value and then finally is the you know I'm here for the snacks I don't show me the results I don't really have a uh you",
    "start": "110880",
    "end": "118200"
  },
  {
    "text": "know uh a a horse in this race is that is that an idiom that translates horse",
    "start": "118200",
    "end": "123960"
  },
  {
    "text": "in this race it's a yeah I don't I don't really care what the outcome is I don't have an",
    "start": "123960",
    "end": "129780"
  },
  {
    "text": "opinion on this kind of thing um so how many uh number one you only",
    "start": "129780",
    "end": "136260"
  },
  {
    "text": "use unsigned integers for modular Behavior one two",
    "start": "136260",
    "end": "142200"
  },
  {
    "text": "two okay uh you only use unsigned integers represent values that cannot be negative",
    "start": "142200",
    "end": "148200"
  },
  {
    "text": "okay and I'm only here for the snacks okay so that's that's a consistent",
    "start": "148200",
    "end": "153840"
  },
  {
    "text": "result um even the snack bit is about the same each time",
    "start": "153840",
    "end": "159500"
  },
  {
    "text": "foreign",
    "start": "160860",
    "end": "163160"
  },
  {
    "text": "there uh yeah it's more about like when do you make this selection I'll I'll",
    "start": "167000",
    "end": "173220"
  },
  {
    "text": "work on the wording but but I'm okay with the results uh it's usually something like 20 or 30 to 1.",
    "start": "173220",
    "end": "181739"
  },
  {
    "text": "um in favor of the the middle answer okay so uh",
    "start": "181739",
    "end": "187500"
  },
  {
    "text": "last night I did the integers explained but uh here I'm cutting it out so I'm",
    "start": "187500",
    "end": "194519"
  },
  {
    "text": "I'm basically omitting the intro material uh it's kind of it's it's pretty obvious you know for those who",
    "start": "194519",
    "end": "201239"
  },
  {
    "text": "were there last night you know it's probably nothing you don't know it's kind of a good warm-up to kind of get",
    "start": "201239",
    "end": "206340"
  },
  {
    "text": "into the the mindset for the rest of it so so if you have questions right off that's fine",
    "start": "206340",
    "end": "211800"
  },
  {
    "text": "um so I'm going to present um the argument that's made for sine",
    "start": "211800",
    "end": "217560"
  },
  {
    "text": "integers and then I'll make the argument that's made for unsigned integers and I'll try a I'll try and and fail to",
    "start": "217560",
    "end": "225780"
  },
  {
    "text": "appear unbiased because I'm really biased and it's gonna start to come out no matter what I do",
    "start": "225780",
    "end": "232739"
  },
  {
    "text": "um so when you're arguing for um that first one that you only use",
    "start": "232739",
    "end": "238019"
  },
  {
    "text": "unsigned integers for for modular I mean you're arguing that you use signed integers almost all of the time and the",
    "start": "238019",
    "end": "244260"
  },
  {
    "text": "the first uh argument or maybe the strongest argument is made is uh what about these Loops that are limited by a",
    "start": "244260",
    "end": "251400"
  },
  {
    "text": "lower bound and so it's it's very uh easy to write tests that are",
    "start": "251400",
    "end": "259320"
  },
  {
    "text": "um you know always true or always false uh so you know because uh I size T is an",
    "start": "259320",
    "end": "266639"
  },
  {
    "text": "unsigned type it's used to um to",
    "start": "266639",
    "end": "272479"
  },
  {
    "text": "express the size of the largest object that can be allocated on a system so on",
    "start": "272479",
    "end": "278160"
  },
  {
    "text": "32-bit architectures it's usually a 32-bit unsigned type and on 64-bit architecture is usually a 64-bit unsight",
    "start": "278160",
    "end": "284880"
  },
  {
    "text": "type so I is unsigned meaning you know can never take on negative value so we have this Loop here that's going to Loop",
    "start": "284880",
    "end": "292620"
  },
  {
    "text": "while I is greater than or equal to zero and decrement I each time and so that's a rather obvious uh",
    "start": "292620",
    "end": "299160"
  },
  {
    "text": "infinite Loop if I get back there too far it starts to feed back on me",
    "start": "299160",
    "end": "305639"
  },
  {
    "text": "um so so this is probably not an error but there's no obvious uh defect in the",
    "start": "305639",
    "end": "313259"
  },
  {
    "text": "code I mean from a language perspective uh this code is fine there's no UB or",
    "start": "313259",
    "end": "318600"
  },
  {
    "text": "anything like that so so it's probably unlikely this would be a diagnosed now",
    "start": "318600",
    "end": "323699"
  },
  {
    "text": "whether or not it's actually an error depends on you know the algorithm and what it's meant to do but typically when you're counting things you know wrap",
    "start": "323699",
    "end": "330180"
  },
  {
    "text": "around is an error right so if you're Bezos and you have four billion dollars in your bank account you put another",
    "start": "330180",
    "end": "335699"
  },
  {
    "text": "dollar in your bank account and you have zero dollars you would typically view that as as an error",
    "start": "335699",
    "end": "342840"
  },
  {
    "text": "um so the question is you know that uh",
    "start": "342840",
    "end": "348539"
  },
  {
    "text": "you know according to kind of the the the the the signed engineer Advocates is is that this this Loop could be improved",
    "start": "348539",
    "end": "355440"
  },
  {
    "text": "by uh using signed integers right so here uh we're going to use a signed uh",
    "start": "355440",
    "end": "361740"
  },
  {
    "text": "size T type now now this type is defined by posix uh it's not in the C standard",
    "start": "361740",
    "end": "368759"
  },
  {
    "text": "um we had a TR at one point that had a sign size t on it and if it come up for uh vote to get into standard I would",
    "start": "368759",
    "end": "376500"
  },
  {
    "text": "have done everything I could to to block it unless this this part was changed uh",
    "start": "376500",
    "end": "381960"
  },
  {
    "text": "so you know a a kind of commented here and there see my biases are really coming out already but uh",
    "start": "381960",
    "end": "389280"
  },
  {
    "text": "um you know this is this is a hill I'm gonna die on you know I'm Gonna Stand atop this hill and I'm Gonna Keep sign",
    "start": "389280",
    "end": "397620"
  },
  {
    "text": "size types out of the C standard for as long as I draw a breath uh so",
    "start": "397620",
    "end": "402710"
  },
  {
    "text": "[Music] um and the other thing about C plus plus is they have a template class which takes",
    "start": "402710",
    "end": "410160"
  },
  {
    "text": "any type of unsigned type and turns it into a sign type and takes any type of sign type and turns it into an unsigned",
    "start": "410160",
    "end": "416039"
  },
  {
    "text": "type so just the fact that you have a size T type means that you could you know create a sine equivalent to that",
    "start": "416039",
    "end": "423419"
  },
  {
    "text": "type so so the concept is clearly present in in C plus and it's also you",
    "start": "423419",
    "end": "430259"
  },
  {
    "text": "know defined by posix uh so so now we have a loop that does",
    "start": "430259",
    "end": "435419"
  },
  {
    "text": "terminate right and what this sign size T type does is you know posits defines",
    "start": "435419",
    "end": "440759"
  },
  {
    "text": "it as having the range of minus one to size Max so they don't really care about",
    "start": "440759",
    "end": "446039"
  },
  {
    "text": "the full range of negative values they're just trying to basically Define",
    "start": "446039",
    "end": "451259"
  },
  {
    "text": "a value which is not a valid count right so they can have something which indicates typically an error right so",
    "start": "451259",
    "end": "457860"
  },
  {
    "text": "it's a way of doing inline errors which in itself is a flawed design right you should separate out your your values",
    "start": "457860",
    "end": "464340"
  },
  {
    "text": "from your your errors and C plus plus does that well right you have exception mechanism for reporting errors you don't",
    "start": "464340",
    "end": "469919"
  },
  {
    "text": "need to wrap them into the value um so",
    "start": "469919",
    "end": "475919"
  },
  {
    "text": "um so this Loop now terminates and and the reason you know again the sign interest argument goes is assigned",
    "start": "475919",
    "end": "483599"
  },
  {
    "text": "integers have this nice normal behavior around zero which is a very common value right it's very common for developers to",
    "start": "483599",
    "end": "491639"
  },
  {
    "text": "to have values integer values that are you know uh some Delta above and some",
    "start": "491639",
    "end": "497819"
  },
  {
    "text": "Delta below zero right so uh signed integers are nice you know the math uh",
    "start": "497819",
    "end": "504780"
  },
  {
    "text": "around xero all works uh very well so this code does have a conversion from",
    "start": "504780",
    "end": "513120"
  },
  {
    "text": "an unsigned type to a sign type uh so obviously uh not all the values that can",
    "start": "513120",
    "end": "520500"
  },
  {
    "text": "be represented in the size T type can be represented in the uh the signed a size",
    "start": "520500",
    "end": "526560"
  },
  {
    "text": "T type so so that's an issue with this code so you would probably have to add some sort of check to make sure that the",
    "start": "526560",
    "end": "532920"
  },
  {
    "text": "valid you know the value can be represented in the sign type and then you know if it can't then you have to",
    "start": "532920",
    "end": "538620"
  },
  {
    "text": "treat that as some sort of error condition so conversions to assigned type as we",
    "start": "538620",
    "end": "544860"
  },
  {
    "text": "see in this example are also a bit problematic um you know when an arbitrary intertape",
    "start": "544860",
    "end": "550080"
  },
  {
    "text": "is converted to a sign into type if the value can be represented is going to be preserved but if it can't be represented",
    "start": "550080",
    "end": "556920"
  },
  {
    "text": "there's either an implementation a defined result or an implementation to find signal is raised so there's there's",
    "start": "556920",
    "end": "563700"
  },
  {
    "text": "some things that can go wrong with that conversion so it's not uh you know it's not an unproblematic uh uh issue",
    "start": "563700",
    "end": "573420"
  },
  {
    "text": "okay so uh a size value that can't be represented as a size T is frequently",
    "start": "573420",
    "end": "580680"
  },
  {
    "text": "converted to a a negative sign value which for this particular Loop would",
    "start": "580680",
    "end": "586200"
  },
  {
    "text": "cause the immediate termination of the loop so um is that what's supposed to happen I",
    "start": "586200",
    "end": "592560"
  },
  {
    "text": "don't know I don't know what the hell a negative signed you know a negative size is supposed to represent right because",
    "start": "592560",
    "end": "598320"
  },
  {
    "text": "it's a it's not a it's not an actual concept right you have uh zero something and then you have you",
    "start": "598320",
    "end": "605459"
  },
  {
    "text": "get one and now you have one of something so you either have some positive number of things you have zero of those things right and even this sign",
    "start": "605459",
    "end": "612959"
  },
  {
    "text": "size type recognizes that they just allow for the negative one is a indication that there is no valid count",
    "start": "612959",
    "end": "620839"
  },
  {
    "text": "um so uh yeah so that Loop would would terminate uh if",
    "start": "621060",
    "end": "627959"
  },
  {
    "text": "the size couldn't be represented and then instead it gets turned into a negative value",
    "start": "627959",
    "end": "633959"
  },
  {
    "text": "so another solution is to initialize I to size -1 and decrement on each",
    "start": "633959",
    "end": "641580"
  },
  {
    "text": "iteration so uh here we have that so now when the counter reaches zero the decrement",
    "start": "641580",
    "end": "648540"
  },
  {
    "text": "causes the counter to wrap around to the maximum possible value which is size Max and that of course is well-defined",
    "start": "648540",
    "end": "654779"
  },
  {
    "text": "behavior that's how unsigned integers work by wrapping around so the value of i's are now larger than",
    "start": "654779",
    "end": "661019"
  },
  {
    "text": "size so the termination condition for the loop would evaluate to false and the loop",
    "start": "661019",
    "end": "668040"
  },
  {
    "text": "would terminate so again this is well defined in both CNC plus plus languages uh but",
    "start": "668040",
    "end": "676380"
  },
  {
    "text": "um unsigned integer wraparound is is problematic and um",
    "start": "676380",
    "end": "682019"
  },
  {
    "text": "it's problematic in in in like at multiple levels of abstraction so uh so",
    "start": "682019",
    "end": "689760"
  },
  {
    "text": "so at the the lowest level abstraction it's problematic because",
    "start": "689760",
    "end": "695339"
  },
  {
    "text": "um you know let's say you you take the second argument here which we all kind",
    "start": "695339",
    "end": "700800"
  },
  {
    "text": "of raised our hands for which is you know sizes should be represented by unsigned uh types",
    "start": "700800",
    "end": "707160"
  },
  {
    "text": "um if you take that argument then all the um you know all the arithmetic you're",
    "start": "707160",
    "end": "714540"
  },
  {
    "text": "performing to calculate sizes and to calculate um pointer locations is uh unsigned",
    "start": "714540",
    "end": "721620"
  },
  {
    "text": "arithmetic and that means that you're never going to have overflow right uh",
    "start": "721620",
    "end": "726959"
  },
  {
    "text": "unsigned integers cannot overflow they can only wrap around so you're only dealing with wrap around so uh you know",
    "start": "726959",
    "end": "734279"
  },
  {
    "text": "wraparound becomes an issue and and this this type of problem is uh really",
    "start": "734279",
    "end": "739500"
  },
  {
    "text": "associated with vulnerabilities right so uh if you memory safety issues right so",
    "start": "739500",
    "end": "745200"
  },
  {
    "text": "if you miscalculate the length of an object if you allocate too little storage uh you know if you have an upper",
    "start": "745200",
    "end": "751920"
  },
  {
    "text": "bound incorrect if you have pointer arithmetic this incorrect you could easily wind up writing outside the",
    "start": "751920",
    "end": "757800"
  },
  {
    "text": "bounds of an object because you've kind of lost track of where the bounds are um so so wraparound is really",
    "start": "757800",
    "end": "764100"
  },
  {
    "text": "problematic for security now as far as the C and C plus plus standard concerned it's it's well-defined Behavior so so",
    "start": "764100",
    "end": "771480"
  },
  {
    "text": "you do get this sort of well you know we can't trap on that we can't say people",
    "start": "771480",
    "end": "776760"
  },
  {
    "text": "can't do it because it's well defined so in the search C secure coding standard we definitely said no wrap around you",
    "start": "776760",
    "end": "784440"
  },
  {
    "text": "know and we allow we allow exceptions for it because their their algorithmic cases where you where you need to use it",
    "start": "784440",
    "end": "790560"
  },
  {
    "text": "uh you know one example is is modular arithmetic is used in uh some",
    "start": "790560",
    "end": "796860"
  },
  {
    "text": "um some encryption algorithms Daniella had another example last night about uh",
    "start": "796860",
    "end": "804120"
  },
  {
    "text": "signal processing yeah so so there are cases they're",
    "start": "804120",
    "end": "809160"
  },
  {
    "text": "pretty rare right but you have to allow for it so there has to be an exception to this but but the the larger cases you",
    "start": "809160",
    "end": "815579"
  },
  {
    "text": "know again if you're counting things and you have a wrap around it's it's it's you know typically an error so",
    "start": "815579",
    "end": "822360"
  },
  {
    "text": "um so you do want to you know look for this problem and diagnose it right and a real good way to",
    "start": "822360",
    "end": "828180"
  },
  {
    "text": "do that is with f sanitize unsigned integer overflow um so uh an issue here uh is that you",
    "start": "828180",
    "end": "837899"
  },
  {
    "text": "know if you're going to use that flag uh and you you design your Loops like this",
    "start": "837899",
    "end": "843300"
  },
  {
    "text": "right now these Loops are going to get flagged and so you've created uh kind of",
    "start": "843300",
    "end": "848579"
  },
  {
    "text": "a false uh false positive in your Diagnostics right and so that's that's a",
    "start": "848579",
    "end": "853920"
  },
  {
    "text": "that's a pita that's not Pete is pain in the ass",
    "start": "853920",
    "end": "859139"
  },
  {
    "text": "it's kind of funny because you say Peta to not say you know ass on video but",
    "start": "859139",
    "end": "865440"
  },
  {
    "text": "then you find yourself explaining what Peter means and saying ask three or four times on video [Laughter]",
    "start": "865440",
    "end": "873300"
  },
  {
    "text": "um so uh so one solution another solution is a do while loop and you know C",
    "start": "873300",
    "end": "881339"
  },
  {
    "text": "programmers and I guess C plus plus programs are pretty enamored with that for Loop uh but but the for Loop is not",
    "start": "881339",
    "end": "887699"
  },
  {
    "text": "fantastic [Music] um let's see if I have the I don't have a",
    "start": "887699",
    "end": "892800"
  },
  {
    "text": "really good example of a for Loop but but the problem with the for Loop is um you have the body following the for",
    "start": "892800",
    "end": "899100"
  },
  {
    "text": "Loop so this code is executed once before the loop uh this is executed as",
    "start": "899100",
    "end": "905040"
  },
  {
    "text": "part of the condition and this is executed after the body of the loop right so so the the order in which this",
    "start": "905040",
    "end": "911820"
  },
  {
    "text": "code is executed is different from the lexical order in which the code appears and people complain about that in other",
    "start": "911820",
    "end": "918600"
  },
  {
    "text": "constructs but here they sort of ignore it or don't notice it for some reason but it does make reading the card uh the",
    "start": "918600",
    "end": "926820"
  },
  {
    "text": "the code a little bit harder and people do wind up making mistakes as a result",
    "start": "926820",
    "end": "932220"
  },
  {
    "text": "so we can do a do while loop and uh I added that Top Line last night to",
    "start": "932220",
    "end": "937760"
  },
  {
    "text": "basically error out if if the size request is zero",
    "start": "937760",
    "end": "942959"
  },
  {
    "text": "um so the remainder of this um you know we just I have the do Loop",
    "start": "942959",
    "end": "948240"
  },
  {
    "text": "we've got a unsigned type and then we terminate um you know when we get to zero and so",
    "start": "948240",
    "end": "955560"
  },
  {
    "text": "so this kind of solves all the problems right we're using the the unsigned size",
    "start": "955560",
    "end": "960779"
  },
  {
    "text": "type uh we don't have any wrap around to be concerned about and",
    "start": "960779",
    "end": "966720"
  },
  {
    "text": "um you know we don't have to do a conversion from a sign to an un um unassigned type with you know possible",
    "start": "966720",
    "end": "973199"
  },
  {
    "text": "implementation defined Behavior possible out of range values and so forth",
    "start": "973199",
    "end": "978980"
  },
  {
    "text": "okay so uh kind of a related problem with unsigned integers that you know maybe a",
    "start": "979079",
    "end": "985800"
  },
  {
    "text": "more General version is uh you know you might uh have uh you know end index into",
    "start": "985800",
    "end": "993899"
  },
  {
    "text": "an array and a start index and you're checking to see if if the end is greater",
    "start": "993899",
    "end": "999300"
  },
  {
    "text": "than the start as a is greater than some safety margin which is trying to say prevent writing beyond the bounds of",
    "start": "999300",
    "end": "1006500"
  },
  {
    "text": "this array so the safety margin is typically some reasonably small integer uh the problem here is that if the",
    "start": "1006500",
    "end": "1013399"
  },
  {
    "text": "program fails to the programmer fails to guarantee uh that that engine indexes uh",
    "start": "1013399",
    "end": "1019639"
  },
  {
    "text": "greater than start index you [Music] um you this this this test could fail so",
    "start": "1019639",
    "end": "1027319"
  },
  {
    "text": "so there's a guarantee that has to be provided and you know it might be",
    "start": "1027319",
    "end": "1032418"
  },
  {
    "text": "provided by the code or it might be something that you have to test for",
    "start": "1032419",
    "end": "1039140"
  },
  {
    "text": "okay so both unsigned and signed operations can wind up being erroneous",
    "start": "1039140",
    "end": "1046339"
  },
  {
    "text": "um the um the bigger problem with with unsigned",
    "start": "1046339",
    "end": "1051860"
  },
  {
    "text": "is that the problem area is is you know less than zero and and so uh so this",
    "start": "1051860",
    "end": "1060080"
  },
  {
    "text": "area here is kind of a common area for people to perform operations again this",
    "start": "1060080",
    "end": "1065780"
  },
  {
    "text": "is the signed into the argument I'm trying to make it clear that that I don't necessarily buy this but but you",
    "start": "1065780",
    "end": "1072500"
  },
  {
    "text": "know the common operations are here around zero and so um you know so people programmers",
    "start": "1072500",
    "end": "1080600"
  },
  {
    "text": "commonly encountered the problem we are using unsigned so that's the argument to use signed so here around zero assigned",
    "start": "1080600",
    "end": "1087860"
  },
  {
    "text": "has has you know perfectly fine behavior and it's only out here on the fringes",
    "start": "1087860",
    "end": "1092900"
  },
  {
    "text": "that um signed integers become problematic and you know the theory is that uh we're probably not dealing with",
    "start": "1092900",
    "end": "1100460"
  },
  {
    "text": "with these very large and very small values quite as often",
    "start": "1100460",
    "end": "1106760"
  },
  {
    "text": "so uh now now the problem with that theory is um security right so when you're dealing",
    "start": "1106760",
    "end": "1114980"
  },
  {
    "text": "with safety you can kind of look at probability of things like what's the probability of of having this extreme",
    "start": "1114980",
    "end": "1120799"
  },
  {
    "text": "value occur but when looking at security you",
    "start": "1120799",
    "end": "1126620"
  },
  {
    "text": "know the probability of an edge case should be viewed as 100 because you're dealing with an intelligent adversary",
    "start": "1126620",
    "end": "1132860"
  },
  {
    "text": "like me say I'm your adversary right so if I'm pen testing or you know attacking",
    "start": "1132860",
    "end": "1138620"
  },
  {
    "text": "your system which you know I I wouldn't do because they're all very nice people but",
    "start": "1138620",
    "end": "1144919"
  },
  {
    "text": "um you know I'm going to I'm going to look for the edge cases right I'm going to input you know values at minimum",
    "start": "1144919",
    "end": "1151940"
  },
  {
    "text": "maximum ranges and see if I can you know trigger uh some Edge case that your code",
    "start": "1151940",
    "end": "1157340"
  },
  {
    "text": "failed to account for and then see what fun might ensue from there so if you're programming with you know",
    "start": "1157340",
    "end": "1165320"
  },
  {
    "text": "Safety and Security in mind you can't ignore the problem errors for signed",
    "start": "1165320",
    "end": "1170480"
  },
  {
    "text": "integers right but you're you're kind of trying to simplify things",
    "start": "1170480",
    "end": "1176960"
  },
  {
    "text": "so that you know really inexperienced programmers can you know luck out and get lucky more",
    "start": "1176960",
    "end": "1184880"
  },
  {
    "text": "often and have correct C plus code so uh",
    "start": "1184880",
    "end": "1190039"
  },
  {
    "text": "so I guess I don't really care you know it's kind of weird because I I've been in the C committee for a long",
    "start": "1190039",
    "end": "1196520"
  },
  {
    "text": "time and I've always noticed that they didn't care about um at all about",
    "start": "1196520",
    "end": "1202220"
  },
  {
    "text": "um about um naive programmers you know beginning programmers uh that really only cater to",
    "start": "1202220",
    "end": "1209960"
  },
  {
    "text": "experienced programmers but I'm now sort of seeing where they're coming from in that uh I I think it's really important",
    "start": "1209960",
    "end": "1216860"
  },
  {
    "text": "that you design the language and the libraries so that experienced",
    "start": "1216860",
    "end": "1221900"
  },
  {
    "text": "programmers can write correct code I think that's the most important thing I don't think you want to you know make it",
    "start": "1221900",
    "end": "1228620"
  },
  {
    "text": "hard to write correct code so that beginners won't trip on type of Errors",
    "start": "1228620",
    "end": "1234500"
  },
  {
    "text": "like JavaScript to me does a really really stupid thing right you can take five and add it to the string seven and",
    "start": "1234500",
    "end": "1242120"
  },
  {
    "text": "get 57 right and so that's nice from a user interface perspective right where a",
    "start": "1242120",
    "end": "1247460"
  },
  {
    "text": "beginner programmers don't understand the difference between numbers and strings right they all kind of look the same to them but that starts to create",
    "start": "1247460",
    "end": "1253940"
  },
  {
    "text": "some really problematic Behavior some unexpected things when uh you know",
    "start": "1253940",
    "end": "1259760"
  },
  {
    "text": "you're assuming some some level of type safety it's okay um so observations so far",
    "start": "1259760",
    "end": "1268160"
  },
  {
    "text": "um if developers are using sine integers to avoid thinking of the behavior around zero they are definitely not thinking",
    "start": "1268160",
    "end": "1275780"
  },
  {
    "text": "about the Overflow Behavior at the edges um you know the type of problems we've",
    "start": "1275780",
    "end": "1282080"
  },
  {
    "text": "seen so far that would result from using unsigned integers typically like an infinite loop on a counted down",
    "start": "1282080",
    "end": "1288039"
  },
  {
    "text": "for Loop and those are really easily detected during testing right uh see my",
    "start": "1288039",
    "end": "1294140"
  },
  {
    "text": "my program stopped responding to me right there's a there's an infinite Loop",
    "start": "1294140",
    "end": "1299480"
  },
  {
    "text": "um and uh and basically you know if you're doing security and safety safety",
    "start": "1299480",
    "end": "1306140"
  },
  {
    "text": "critical software yeah you really can't be you can't tolerate sloppy programming",
    "start": "1306140",
    "end": "1311600"
  },
  {
    "text": "of any kind right so kind of coming up with this approach in this design and",
    "start": "1311600",
    "end": "1317179"
  },
  {
    "text": "and sort of you know changing the the libraries the apis of the library to",
    "start": "1317179",
    "end": "1322460"
  },
  {
    "text": "accommodate you know the use of signed integers when really unsigned integers and appropriate is is a you know uh",
    "start": "1322460",
    "end": "1330260"
  },
  {
    "text": "is heading in the wrong direction for language like C or C plus plus",
    "start": "1330260",
    "end": "1336020"
  },
  {
    "text": "and so uh you know so so I never really thought I would give this talk I mean",
    "start": "1336020",
    "end": "1341720"
  },
  {
    "text": "I've been talking about integers uh since 2004 2005 I started teaching them",
    "start": "1341720",
    "end": "1346940"
  },
  {
    "text": "at CMU to CS undergraduates into graduate students in the ini program and",
    "start": "1346940",
    "end": "1352760"
  },
  {
    "text": "then you know about a year ago we were trying to adopt uh some bit utility interfaces from C plus plus for the C",
    "start": "1352760",
    "end": "1359480"
  },
  {
    "text": "language and there was this extensive use of sign types in the interfaces and so we were looking at this and thinking",
    "start": "1359480",
    "end": "1365960"
  },
  {
    "text": "now what the [ __ ] is going on here why why you know why are they using sign types to tell us which bit is being",
    "start": "1365960",
    "end": "1373460"
  },
  {
    "text": "referenced right it's it's an unsigned value it's between 0 and 32 or some",
    "start": "1373460",
    "end": "1379820"
  },
  {
    "text": "positive number um and so you know as I sort of saw this",
    "start": "1379820",
    "end": "1385039"
  },
  {
    "text": "Insanity more and more I developed a theory as to why this was happening and",
    "start": "1385039",
    "end": "1390380"
  },
  {
    "text": "about a month ago someone sent me the link to this talk uh and and this and",
    "start": "1390380",
    "end": "1395539"
  },
  {
    "text": "this was a panel uh at uh going neat of 2013 and and this was what I suspected",
    "start": "1395539",
    "end": "1403100"
  },
  {
    "text": "was behind this which is you know bjorna has come out on a couple occasions also",
    "start": "1403100",
    "end": "1410360"
  },
  {
    "text": "in his book and said uh you know just use signed ins you know just use it all",
    "start": "1410360",
    "end": "1416480"
  },
  {
    "text": "over the place uh and his argument is uh and you'll see this repeated in a second",
    "start": "1416480",
    "end": "1421880"
  },
  {
    "text": "you know his argument is um you know find and unsign being mixed",
    "start": "1421880",
    "end": "1428720"
  },
  {
    "text": "in a single expression causes a lot of problems so I agree with that but then",
    "start": "1428720",
    "end": "1434299"
  },
  {
    "text": "he's like well let's solve this by making everything fine and that part I disagree with and",
    "start": "1434299",
    "end": "1440480"
  },
  {
    "text": "I'll let me go a little further before I I respond to that more uh and so yeah so if you were there last",
    "start": "1440480",
    "end": "1448580"
  },
  {
    "text": "night I I mean I went a little further so I probably should do that here as well you know so so Bjorn and I I met",
    "start": "1448580",
    "end": "1455600"
  },
  {
    "text": "him a few times or actually Facebook friends for some reason and one of the cringiest moments in my life was someone",
    "start": "1455600",
    "end": "1461539"
  },
  {
    "text": "I went to high school with got into a an argument with him on my Facebook comment section",
    "start": "1461539",
    "end": "1467200"
  },
  {
    "text": "so I was just like really cringing through that entire thing",
    "start": "1467200",
    "end": "1472520"
  },
  {
    "text": "um but um you know he's he's a man right I mean he makes mistakes he's not always right",
    "start": "1472520",
    "end": "1479059"
  },
  {
    "text": "and the problem is if he if you take someone and you you know Elevate them to",
    "start": "1479059",
    "end": "1484400"
  },
  {
    "text": "to God status right that means they can't be wrong and suddenly you've got a cult of followers who who you know",
    "start": "1484400",
    "end": "1491240"
  },
  {
    "text": "whenever this man says something wrong they have to pretend like it's right and",
    "start": "1491240",
    "end": "1496700"
  },
  {
    "text": "then they have to create a new reality in which that thing turned out to be right and we have the same thing in in",
    "start": "1496700",
    "end": "1502820"
  },
  {
    "text": "the US around Trump you know he he's got all these this cult around him and he says things like oh my father was born",
    "start": "1502820",
    "end": "1509720"
  },
  {
    "text": "in Germany when his father was actually born in Queens and then you know within you know uh within a short while",
    "start": "1509720",
    "end": "1516140"
  },
  {
    "text": "suddenly uh Queens is part of Germany right because you have to adjust reality",
    "start": "1516140",
    "end": "1521179"
  },
  {
    "text": "to command to their statements and so uh so you know that's it's quite dangerous",
    "start": "1521179",
    "end": "1527419"
  },
  {
    "text": "for the for an ecosystem to you know establish a God you know I mean",
    "start": "1527419",
    "end": "1532880"
  },
  {
    "text": "you have to be able to you know people can be wrong you have to account for that",
    "start": "1532880",
    "end": "1539240"
  },
  {
    "text": "um so so the Google C plus plus style guideline uh you know kind of picks up and runs with all this right so so this",
    "start": "1539240",
    "end": "1546020"
  },
  {
    "text": "is another really high profile document that people look at and believe and",
    "start": "1546020",
    "end": "1551360"
  },
  {
    "text": "influences people so here's what it says I pretty much cut and paste this in so first it says unsigned integers are good",
    "start": "1551360",
    "end": "1557900"
  },
  {
    "text": "for representing bit fields and modulo arithmetic okay so I agree with that",
    "start": "1557900",
    "end": "1563720"
  },
  {
    "text": "entirely um the second thing it says because of a historical accident the C plus plus",
    "start": "1563720",
    "end": "1570740"
  },
  {
    "text": "standard uses unsigned integers to represent sizes uh many members of",
    "start": "1570740",
    "end": "1576020"
  },
  {
    "text": "Standards I believe this a mistake but it is effectively impossible to fix at this point okay no this was not a",
    "start": "1576020",
    "end": "1583100"
  },
  {
    "text": "mistake okay um c89 introduced the size T type to",
    "start": "1583100",
    "end": "1588140"
  },
  {
    "text": "represent sizes everyone in the C committee understands that size is an",
    "start": "1588140",
    "end": "1593480"
  },
  {
    "text": "unsigned quantity there's no wavering there's no mistake about it okay",
    "start": "1593480",
    "end": "1598520"
  },
  {
    "text": "um you know basically uh you know Bjorn has said use int and some members of the",
    "start": "1598520",
    "end": "1605900"
  },
  {
    "text": "standards body uh you know some collection of extreme uh worshipers or",
    "start": "1605900",
    "end": "1612080"
  },
  {
    "text": "Cinco fans you know have to accept that as as gospel and and go along with it",
    "start": "1612080",
    "end": "1617539"
  },
  {
    "text": "but it says many members it doesn't even say a majority of members right but you uh you now have this Insanity kind of",
    "start": "1617539",
    "end": "1624260"
  },
  {
    "text": "emanating from C plus plus and you know we got these interfaces in C and we had",
    "start": "1624260",
    "end": "1629659"
  },
  {
    "text": "to change them I mean they're just defined incorrectly so",
    "start": "1629659",
    "end": "1634700"
  },
  {
    "text": "um so and and they are right here that you know it's not going to change right",
    "start": "1634700",
    "end": "1640400"
  },
  {
    "text": "everyone's acknowledging that uh there's no way to change uh the signedness of size T type is",
    "start": "1640400",
    "end": "1648200"
  },
  {
    "text": "always going to be unsigned C and C plus plus are always going to have so so now saying let's make everything an INT you",
    "start": "1648200",
    "end": "1655760"
  },
  {
    "text": "know is the wrong choice that flies in the face of reality right because we've acknowledged",
    "start": "1655760",
    "end": "1661340"
  },
  {
    "text": "sizes are unsigned now they'll be unsigned forever why are you going to make new sizes int right now you're",
    "start": "1661340",
    "end": "1668179"
  },
  {
    "text": "exasperating situation where you've got Expressions that have both signs and unsigned numbers you know just make your",
    "start": "1668179",
    "end": "1674539"
  },
  {
    "text": "sizes a size t as uh you know God and the C standards",
    "start": "1674539",
    "end": "1680840"
  },
  {
    "text": "committee intended notice I I said and not you know",
    "start": "1680840",
    "end": "1687200"
  },
  {
    "text": "considering them to be the same thing um okay so what's next the fact that",
    "start": "1687200",
    "end": "1693679"
  },
  {
    "text": "unsound arithmetic does it model the behavior of a simple integer but is",
    "start": "1693679",
    "end": "1698900"
  },
  {
    "text": "defined to model modular arithmetic wrapping around an overflow underflow means that this significant class of",
    "start": "1698900",
    "end": "1705080"
  },
  {
    "text": "bugs cannot be diagnosed by the propyler okay so this again is just pure [ __ ] right so",
    "start": "1705080",
    "end": "1712039"
  },
  {
    "text": "um what do we say here unsigned arithmetic has modular Behavior what's assigned integers have undefined",
    "start": "1712039",
    "end": "1719179"
  },
  {
    "text": "Behavior right they can do anything one of the things they could do is have modulo Behavior right and typically",
    "start": "1719179",
    "end": "1725539"
  },
  {
    "text": "uh they silently wrap around they silently behave the same way as unsigned numbers but they could also trap which",
    "start": "1725539",
    "end": "1733640"
  },
  {
    "text": "uh you know many many instructions do uh give you know I give instruction on",
    "start": "1733640",
    "end": "1739580"
  },
  {
    "text": "Intel processors traps on overflow on uh you know a very common processor uh then",
    "start": "1739580",
    "end": "1746720"
  },
  {
    "text": "they say that significant class of bugs cannot be diagnosed and this is kind of",
    "start": "1746720",
    "end": "1752059"
  },
  {
    "text": "uh some additional um idiocy right so so so kind of what",
    "start": "1752059",
    "end": "1758120"
  },
  {
    "text": "this is hinting at is uh you know hey the advantage of signed integers is that they introduce UB right so now by using",
    "start": "1758120",
    "end": "1766100"
  },
  {
    "text": "sine integer you have more undefined behavior in your code and we can then you know because it's undefined Behavior",
    "start": "1766100",
    "end": "1772820"
  },
  {
    "text": "we can trap on that and give you more information so basically it's saying by",
    "start": "1772820",
    "end": "1778220"
  },
  {
    "text": "making your filling you know uh inserting a ton of bugs into your code you're making your code better okay so",
    "start": "1778220",
    "end": "1785600"
  },
  {
    "text": "when someone says that to you you just slap them across the head you know they are experiencing some form of delusion",
    "start": "1785600",
    "end": "1791600"
  },
  {
    "text": "that's the stupidest thing that you can ever say um and you know we just looked a minute",
    "start": "1791600",
    "end": "1796940"
  },
  {
    "text": "ago there's a sanitized flag for unsigned it says unsigned integer overflow that's a bit of misnomer it's",
    "start": "1796940",
    "end": "1802880"
  },
  {
    "text": "unsigned into giraffra but there's a flag for that so clearly tools can diagnose that even if it's well-defined",
    "start": "1802880",
    "end": "1809659"
  },
  {
    "text": "Behavior you can still diagnose it right okay it's not conforming to the standard",
    "start": "1809659",
    "end": "1815240"
  },
  {
    "text": "but it's not a big deal like you're not going to ship that you're using it in diagnostic mode and some compilers IBM",
    "start": "1815240",
    "end": "1822740"
  },
  {
    "text": "XL compiler uh you know with the default Flags it's non-conformed to standard it",
    "start": "1822740",
    "end": "1828020"
  },
  {
    "text": "actually assumes uh unsigned integers don't wrap around which of course is not",
    "start": "1828020",
    "end": "1833779"
  },
  {
    "text": "what the standard says and it doesn't matter that much so that's that's that's crap",
    "start": "1833779",
    "end": "1840919"
  },
  {
    "text": "uh in other cases defined Behavior impedes optimizations so I got a lot of these sort of sample codes and it's all",
    "start": "1840919",
    "end": "1848539"
  },
  {
    "text": "um you know uh basically adding extra code to sign integers which is UB and",
    "start": "1848539",
    "end": "1856340"
  },
  {
    "text": "gets optimized out by the the compiler because it's it can ignore the possibility of UV",
    "start": "1856340",
    "end": "1862399"
  },
  {
    "text": "um but no cases does is that code necessary and in no cases is you know",
    "start": "1862399",
    "end": "1868039"
  },
  {
    "text": "the sign code faster than the unsigned code so so that turns out to be a you",
    "start": "1868039",
    "end": "1873380"
  },
  {
    "text": "know an invalid argument as well um that said mixing signedness of",
    "start": "1873380",
    "end": "1878659"
  },
  {
    "text": "Interest responsible for a large class of problems okay again I agree with this I just disagree with the solution I",
    "start": "1878659",
    "end": "1885559"
  },
  {
    "text": "think if you make more things sign you're going to increase this problem because the sign the size types are not",
    "start": "1885559",
    "end": "1892700"
  },
  {
    "text": "going to change size of is always going to return a size T type an unsigned type you can't change that so",
    "start": "1892700",
    "end": "1900740"
  },
  {
    "text": "um so I agree with this problem but I I think creating more sign types is",
    "start": "1900740",
    "end": "1907340"
  },
  {
    "text": "um you know when unsigned types should be used is just exasperating the problem the best advice we can provide try to",
    "start": "1907340",
    "end": "1914360"
  },
  {
    "text": "use iterators and containers rather than pointers and sizes",
    "start": "1914360",
    "end": "1919399"
  },
  {
    "text": "um uh try not to make sightness so so this I agree with",
    "start": "1919399",
    "end": "1926059"
  },
  {
    "text": "um oh except that bit which says try to avoid unsigned interest I mean unsigned integers should should be used",
    "start": "1926059",
    "end": "1931820"
  },
  {
    "text": "exclusively for bit fields and modular arithmetic I kind of agree with that but",
    "start": "1931820",
    "end": "1937059"
  },
  {
    "text": "this try to avoid them is is nonsense um do not use the unsight type merely to",
    "start": "1937059",
    "end": "1943580"
  },
  {
    "text": "assert a variable is non-negative right this is what we took the poll on and right there there's you know every poll",
    "start": "1943580",
    "end": "1949399"
  },
  {
    "text": "the three polls I've done so far you know the overwhelming number of developers",
    "start": "1949399",
    "end": "1954620"
  },
  {
    "text": "are not morons right you all know that this is exactly why you use unsigned numbers so this is advice is contrary to",
    "start": "1954620",
    "end": "1962320"
  },
  {
    "text": "Common Sense and you know everything holy",
    "start": "1962320",
    "end": "1967340"
  },
  {
    "text": "uh and this is you know this is really embarrassing I mean Google's a you know great company with a lot of smart people",
    "start": "1967340",
    "end": "1973940"
  },
  {
    "text": "and and they're publishing you know garbage advice you know this is stuff",
    "start": "1973940",
    "end": "1979399"
  },
  {
    "text": "people believe you know I mean they're they're they're actively making things worse much worse",
    "start": "1979399",
    "end": "1988580"
  },
  {
    "text": "okay so many um uh vulnerabilities it's discovered using",
    "start": "1988580",
    "end": "1994519"
  },
  {
    "text": "a combination of um you know uh code instrumentation and",
    "start": "1994519",
    "end": "2001000"
  },
  {
    "text": "fuzzing uh so for example using a UB sand uh signed into overflow will",
    "start": "2001000",
    "end": "2008019"
  },
  {
    "text": "diagnose uh signed into overflow so um you know signed integer computations",
    "start": "2008019",
    "end": "2013840"
  },
  {
    "text": "can be diagnosed so that includes f-trap V sine division",
    "start": "2013840",
    "end": "2020519"
  },
  {
    "text": "overflow uh it doesn't include a lossy implicit conversions",
    "start": "2020519",
    "end": "2027039"
  },
  {
    "text": "uh here we've got a example of use of the unsigned integer overflow and again",
    "start": "2027039",
    "end": "2034240"
  },
  {
    "text": "it's a bit of a misnomer it should be unsigned interest to wrap around but um you know here we've got an unsign you",
    "start": "2034240",
    "end": "2041440"
  },
  {
    "text": "at 32t type we've got a wrap around here and uh you know the sanitizer does just",
    "start": "2041440",
    "end": "2048280"
  },
  {
    "text": "a fine job diagnosing this right so so the idea that these problems can't be",
    "start": "2048280",
    "end": "2053618"
  },
  {
    "text": "diagnosed is provably incorrect demonstratively incorrect",
    "start": "2053619",
    "end": "2060539"
  },
  {
    "text": "okay so when I first started um kind of realizing that there was these misconceptions about",
    "start": "2060760",
    "end": "2067960"
  },
  {
    "text": "how to use signed an unsigned type I I asked people you know where is this coming from and the first thing people",
    "start": "2067960",
    "end": "2074500"
  },
  {
    "text": "point at me at was this talk by Chandler Carruth who might be at this conference",
    "start": "2074500",
    "end": "2081460"
  },
  {
    "text": "um and so I looked at this first this is before I saw the bjorna talk which was",
    "start": "2081460",
    "end": "2087339"
  },
  {
    "text": "three years earlier than this and so um so Chandler talked about performance",
    "start": "2087339",
    "end": "2095138"
  },
  {
    "text": "of sign versus unsigned integers and he used this code which is",
    "start": "2095139",
    "end": "2100780"
  },
  {
    "text": "um from this one of the spec benchmarks I think it's the b-zip uh bench spec",
    "start": "2100780",
    "end": "2106300"
  },
  {
    "text": "marks and I had um maybe 10 years ago uh I I'd gotten a side gig to",
    "start": "2106300",
    "end": "2114780"
  },
  {
    "text": "analyze this piece of code using a kind of a manual analysis method to see if it",
    "start": "2114780",
    "end": "2120460"
  },
  {
    "text": "would could detect a potential buffer overflow so I was pretty familiar with this code",
    "start": "2120460",
    "end": "2126099"
  },
  {
    "text": "um and so uh so you know what Chandler pointed out is that on a 64-bit",
    "start": "2126099",
    "end": "2131500"
  },
  {
    "text": "architecture uh you know we're using un32t typed argument i1 and I2 to form",
    "start": "2131500",
    "end": "2141460"
  },
  {
    "text": "an address so this becomes a 64-bit operation but then later we're",
    "start": "2141460",
    "end": "2149099"
  },
  {
    "text": "incrementing i1 and I2 and in this context there's no promotions or",
    "start": "2149099",
    "end": "2155859"
  },
  {
    "text": "anything that are going to happen so so this operation has to be a 32-bit operation so because we have a 64-bit",
    "start": "2155859",
    "end": "2161980"
  },
  {
    "text": "operation and a 32-bit operation there's some uh redundancy in the code here",
    "start": "2161980",
    "end": "2167020"
  },
  {
    "text": "there's some operations that some additional instructions have to be generated making this code uh slightly",
    "start": "2167020",
    "end": "2173680"
  },
  {
    "text": "slower so here's uh oh so here's the reality of this so I took the code and uh tested it",
    "start": "2173680",
    "end": "2182560"
  },
  {
    "text": "and um using 64-bit architecture so with the",
    "start": "2182560",
    "end": "2188260"
  },
  {
    "text": "size T type at O3 size T produced the fastest code",
    "start": "2188260",
    "end": "2194400"
  },
  {
    "text": "for on GCC ICC and clang so all three cases using size T the correct type to",
    "start": "2194400",
    "end": "2202599"
  },
  {
    "text": "use here produces the fastest code so how about that you use the right type it's fastest",
    "start": "2202599",
    "end": "2208839"
  },
  {
    "text": "um the relative performance of signed uh int32t and unsigned uh un-32t depends on",
    "start": "2208839",
    "end": "2217060"
  },
  {
    "text": "the compiler but in all cases is worse than size t uh so you know using the properly typed",
    "start": "2217060",
    "end": "2224980"
  },
  {
    "text": "unsigned integers produces the fastest code right so I just tested this this",
    "start": "2224980",
    "end": "2230260"
  },
  {
    "text": "claim and it's just again uh incorrect so you know I",
    "start": "2230260",
    "end": "2236980"
  },
  {
    "text": "I I uh tweet it to Chandler to with the",
    "start": "2236980",
    "end": "2242500"
  },
  {
    "text": "results and so he says uh just to be clear this is six Euro talk the pilots",
    "start": "2242500",
    "end": "2248500"
  },
  {
    "text": "have actually changed the specific area significantly uh is also very brittle",
    "start": "2248500",
    "end": "2253540"
  },
  {
    "text": "area in retrospect I should use a more durable example which no one's shown me",
    "start": "2253540",
    "end": "2259420"
  },
  {
    "text": "yet um the idea was never to introduce UB but that got lost uh I don't think the",
    "start": "2259420",
    "end": "2266020"
  },
  {
    "text": "point of hoping to make came across I wish folks would stop signing this talk right so I'm gonna I'm gonna say that",
    "start": "2266020",
    "end": "2273579"
  },
  {
    "text": "that's a disavow of this talk right he's walking away from this uh this argument this claim that signed integers are",
    "start": "2273579",
    "end": "2280839"
  },
  {
    "text": "faster so if you went to that talk and you believed him um he's now telling you not to right",
    "start": "2280839",
    "end": "2287440"
  },
  {
    "text": "he's disavowed this talk uh okay so let's talk about why uh",
    "start": "2287440",
    "end": "2294520"
  },
  {
    "text": "unsigned makes more sense so signed into overflow is undefined",
    "start": "2294520",
    "end": "2300220"
  },
  {
    "text": "behavior in the C standard implementations can silently wrap which is the most common Behavior Uh it can",
    "start": "2300220",
    "end": "2307720"
  },
  {
    "text": "trap or it can do some combination and I usually use you know most familiar with Intel architecture Intel architecture",
    "start": "2307720",
    "end": "2314800"
  },
  {
    "text": "addition subtraction multiplication silently wrap around while a division of",
    "start": "2314800",
    "end": "2319960"
  },
  {
    "text": "remaining their operations trap so it's a fun a fun you know fun trick is that",
    "start": "2319960",
    "end": "2325380"
  },
  {
    "text": "int-min remained or minus one well mathematically that should produce a",
    "start": "2325380",
    "end": "2330460"
  },
  {
    "text": "zero on Intel processors that will actually trap because it's implemented as a division operation and the result",
    "start": "2330460",
    "end": "2338859"
  },
  {
    "text": "of the division operation is a overflow which results in a fault on x86",
    "start": "2338859",
    "end": "2346119"
  },
  {
    "text": "architecture so uh so you've got some operations assignment we wrap around basically the same as unsigned or",
    "start": "2346119",
    "end": "2353020"
  },
  {
    "text": "they'll trap so uh I've never built a compiler",
    "start": "2353020",
    "end": "2358480"
  },
  {
    "text": "probably some of you have uh but um you know there's there's there's three basic",
    "start": "2358480",
    "end": "2365380"
  },
  {
    "text": "um implementation strategies for student compiler uh the first is a hardware behavior model where you just generate",
    "start": "2365380",
    "end": "2372820"
  },
  {
    "text": "the corresponding assembly code and let the hardware do whatever the hardware does and uh you know for the the the the",
    "start": "2372820",
    "end": "2379660"
  },
  {
    "text": "more mature people in the room I'll say that the the old people okay and mature people",
    "start": "2379660",
    "end": "2386740"
  },
  {
    "text": "um you know that that's been the universal policy for many years so that's what many of us got used to",
    "start": "2386740",
    "end": "2393700"
  },
  {
    "text": "um there's a super debug model where uh to provide the Intensive debugging environment you try to trap nearly every",
    "start": "2393700",
    "end": "2399640"
  },
  {
    "text": "Behavior so things like address sanitizer and UV sanitizer are kind of an example that where you're trapping",
    "start": "2399640",
    "end": "2405839"
  },
  {
    "text": "undefined behaviors so this severely degrades performance so uh it's it's not",
    "start": "2405839",
    "end": "2412180"
  },
  {
    "text": "typically used for production code or for deploying uh software",
    "start": "2412180",
    "end": "2418359"
  },
  {
    "text": "um and then finally there's a total license model where undefined behaviors treat it as a can't happen condition and",
    "start": "2418359",
    "end": "2425380"
  },
  {
    "text": "that permits very aggressive optimization now now certainly one of the things I've",
    "start": "2425380",
    "end": "2430540"
  },
  {
    "text": "seen about um compilers is that you know compiler writers really don't have any principles",
    "start": "2430540",
    "end": "2437260"
  },
  {
    "text": "so so you don't really see a purely Hardware Behavior a model or a purely",
    "start": "2437260",
    "end": "2443320"
  },
  {
    "text": "total license model like you could take GCC and have two really similar Loops",
    "start": "2443320",
    "end": "2448660"
  },
  {
    "text": "that look almost identical and one will compile based on the hardware behavior model and the other one will compile",
    "start": "2448660",
    "end": "2454180"
  },
  {
    "text": "based on the total license model and it's just kind of a it's kind of a relationship compiler vendors what they",
    "start": "2454180",
    "end": "2460420"
  },
  {
    "text": "have with their code bases where you know the compiler has adjusted so the code that's compiled with it will work",
    "start": "2460420",
    "end": "2466900"
  },
  {
    "text": "and you know the code that's written for that compiler has kind of been tweaked so it works with the compiler uh and and",
    "start": "2466900",
    "end": "2473680"
  },
  {
    "text": "you know that's okay you know the compilers are trying to uh you know help",
    "start": "2473680",
    "end": "2479079"
  },
  {
    "text": "out their user base it's not wonderful for portability but but C is not and C plus plus are really",
    "start": "2479079",
    "end": "2486400"
  },
  {
    "text": "not intended to be portable languages uh they're they're intended to be able to write you know the optimally efficient",
    "start": "2486400",
    "end": "2494260"
  },
  {
    "text": "code for a particular Target architecture that's the main goal and it says so in the sea charter it says you",
    "start": "2494260",
    "end": "2500500"
  },
  {
    "text": "know um basically uh you know optimal efficiency takes precedence over",
    "start": "2500500",
    "end": "2506800"
  },
  {
    "text": "portability yeah and everyone knows that if you've used it right it's pretty paired Java is",
    "start": "2506800",
    "end": "2512380"
  },
  {
    "text": "an example of language which was designed to be portable and the consequence of that is",
    "start": "2512380",
    "end": "2518260"
  },
  {
    "text": "you know there's been maybe two desktop applications written in Java over the past 30 years uh because it's too",
    "start": "2518260",
    "end": "2525220"
  },
  {
    "text": "[ __ ] slow um you know so so they're both they're both fine languages they they they're",
    "start": "2525220",
    "end": "2532540"
  },
  {
    "text": "designed they have different requirements and you know uh if you give",
    "start": "2532540",
    "end": "2537760"
  },
  {
    "text": "us a bunch of really smart people the set of requirements that uh the C people",
    "start": "2537760",
    "end": "2543880"
  },
  {
    "text": "were given you wind up with the c language that's a natural outcome from from their requirements",
    "start": "2543880",
    "end": "2551200"
  },
  {
    "text": "um okay so so here's an example of a integer overflow uh so here's a bit of",
    "start": "2551200",
    "end": "2558099"
  },
  {
    "text": "code that takes a sign integer I and it tests to see if it's greater than zero",
    "start": "2558099",
    "end": "2563920"
  },
  {
    "text": "uh and then it uh doubles the value in I and so and then it increments a counter",
    "start": "2563920",
    "end": "2570099"
  },
  {
    "text": "and so basically this code is counting you know how many times can I double I uh before it wraps around right that's",
    "start": "2570099",
    "end": "2578079"
  },
  {
    "text": "sort of what this piece of code is doing but you know uh what what you can see in",
    "start": "2578079",
    "end": "2584500"
  },
  {
    "text": "this code is that there's an assumption of wrap around right and and wraparound",
    "start": "2584500",
    "end": "2590980"
  },
  {
    "text": "is undefined Behavior sorry you know overflow or whatever you want to call it here overflow is undefined Behavior so",
    "start": "2590980",
    "end": "2598240"
  },
  {
    "text": "the compiler knows that's undefined behavior and it can choose to",
    "start": "2598240",
    "end": "2603400"
  },
  {
    "text": "ignore it and uh if this code is compiled with GCC it does compile this",
    "start": "2603400",
    "end": "2609460"
  },
  {
    "text": "using the total license model which old flow cannot occur so when it looks at this code it says you know I'm doubling",
    "start": "2609460",
    "end": "2615700"
  },
  {
    "text": "a positive number until it becomes negative uh it's assuming uh you know infinitely range integers that can",
    "start": "2615700",
    "end": "2622660"
  },
  {
    "text": "double forever that wraparound's not going to occur and so it just says well they they want infinite Loop and it",
    "start": "2622660",
    "end": "2628900"
  },
  {
    "text": "generates an infinite Loop through this code and uh that is a valid",
    "start": "2628900",
    "end": "2633940"
  },
  {
    "text": "interpretation of this undefined Behavior I mean there's UB so it can do whatever it wants and that's what it",
    "start": "2633940",
    "end": "2640060"
  },
  {
    "text": "thinks you mean here um okay so if we look at operators that",
    "start": "2640060",
    "end": "2646839"
  },
  {
    "text": "wrap around you'll see that most of them might",
    "start": "2646839",
    "end": "2652380"
  },
  {
    "text": "I should almost just give up on this headset it's just not I got a little bit too much hair and it's a little bit too",
    "start": "2652480",
    "end": "2658180"
  },
  {
    "text": "springy and this thing just keeps popping off so",
    "start": "2658180",
    "end": "2664420"
  },
  {
    "text": "um so you'll see that you know most uh operators can can result in wraparound",
    "start": "2664420",
    "end": "2669640"
  },
  {
    "text": "two that can't or Division and uh remainder uh with unsigned unsigned values however",
    "start": "2669640",
    "end": "2677920"
  },
  {
    "text": "when you look at overflow both of these operators can overflow right and it's",
    "start": "2677920",
    "end": "2683619"
  },
  {
    "text": "because on a two's conflict representation you've got one more negative value than positive value rate",
    "start": "2683619",
    "end": "2690280"
  },
  {
    "text": "so like sine Char has a range of minus 128 to 127 right so if you negate the",
    "start": "2690280",
    "end": "2696339"
  },
  {
    "text": "most negative value it's not representable in that type so if you take into Min and divide it by -1 that",
    "start": "2696339",
    "end": "2703420"
  },
  {
    "text": "causes an overflow the result of that operation is not representable also if you use the unitary negation operation",
    "start": "2703420",
    "end": "2709480"
  },
  {
    "text": "on in it's unrepresentable and I already mentioned the problem with",
    "start": "2709480",
    "end": "2715960"
  },
  {
    "text": "a remainder it mean remained or minus one mathematically should produce a zero",
    "start": "2715960",
    "end": "2721300"
  },
  {
    "text": "but because it uses a division operation it will also fault so that's also undefined Behavior",
    "start": "2721300",
    "end": "2727599"
  },
  {
    "text": "so what we see just here in these two slides is that you know signed integers",
    "start": "2727599",
    "end": "2733240"
  },
  {
    "text": "have more problems right there's just more things that can go wrong with them I mean this is two more things but",
    "start": "2733240",
    "end": "2738760"
  },
  {
    "text": "there's there's a lot more things we've already seen the conversion is an issue",
    "start": "2738760",
    "end": "2744220"
  },
  {
    "text": "um okay so uh I think I've probably discussed",
    "start": "2744220",
    "end": "2751480"
  },
  {
    "text": "most of this um so you can get overflow with division when you're dividing a A 30-bit or",
    "start": "2751480",
    "end": "2759040"
  },
  {
    "text": "64-bit integer by one basically an in size integer or a you know a larger size",
    "start": "2759040",
    "end": "2764920"
  },
  {
    "text": "integer if you have a if you have a like the minimum short integer promotions is",
    "start": "2764920",
    "end": "2771099"
  },
  {
    "text": "going to prevent the Overflow because it'll be promoted to a larger size where the you know",
    "start": "2771099",
    "end": "2777420"
  },
  {
    "text": "where that resulting value can be represented but for in an in size and",
    "start": "2777420",
    "end": "2782440"
  },
  {
    "text": "larger you'll get a overflow uh so on x86s division error",
    "start": "2782440",
    "end": "2789099"
  },
  {
    "text": "um and you wind up with a fault on interrupt Vector zero",
    "start": "2789099",
    "end": "2794440"
  },
  {
    "text": "uh remainder um and you know it's kind of funny a lot of people think that's the modulo",
    "start": "2794440",
    "end": "2799900"
  },
  {
    "text": "operator and the C standard doesn't say uh anywhere what it is but you can tell",
    "start": "2799900",
    "end": "2806380"
  },
  {
    "text": "it's defined as part of division so it's pretty clearly remainder and the only",
    "start": "2806380",
    "end": "2811420"
  },
  {
    "text": "place the word remainder appears is in the index for this operator it says remainder and points you to the right",
    "start": "2811420",
    "end": "2817960"
  },
  {
    "text": "page so without that little little bit of hint there would be no mention at all",
    "start": "2817960",
    "end": "2823780"
  },
  {
    "text": "of the name of this operator um but um so uh yeah",
    "start": "2823780",
    "end": "2832180"
  },
  {
    "text": "let me see here okay so uh if we do this itmin remainder",
    "start": "2832180",
    "end": "2839319"
  },
  {
    "text": "minus one uh that can be implemented as part of division operation uh you can",
    "start": "2839319",
    "end": "2844720"
  },
  {
    "text": "get overflowed during the remainder operation and of course if you you know the first thing you do with this uh",
    "start": "2844720",
    "end": "2851500"
  },
  {
    "text": "information is you go write a test and you you type that in and it comes back with zero and you say oh my processor",
    "start": "2851500",
    "end": "2857680"
  },
  {
    "text": "works fine for this but of course the problem is that it's going to be constant folded by the preprocessor and",
    "start": "2857680",
    "end": "2863980"
  },
  {
    "text": "the pre-process is going to assert zeroing so you have to use variables and Supply the information to make sure the",
    "start": "2863980",
    "end": "2870520"
  },
  {
    "text": "actual instructions are generated your test is valid",
    "start": "2870520",
    "end": "2875818"
  },
  {
    "text": "um okay so what did we learn here uh not to box Muhammad Ali apparently",
    "start": "2875920",
    "end": "2883540"
  },
  {
    "text": "um but that sine integers you know they're they're the same or worse than",
    "start": "2883540",
    "end": "2888579"
  },
  {
    "text": "unsigned integers for division and and remainder operations right they are they're more difficult there's more edge",
    "start": "2888579",
    "end": "2894099"
  },
  {
    "text": "cases that you have to be concerned about I mean every time you do a division with two untrusted inputs you",
    "start": "2894099",
    "end": "2901180"
  },
  {
    "text": "have to check to see whether uh it's Ant-Man and minus one I mean you",
    "start": "2901180",
    "end": "2906520"
  },
  {
    "text": "have to test that edge case or your code could could crash",
    "start": "2906520",
    "end": "2911560"
  },
  {
    "text": "okay so uh there's a guy named uh Dave Dave LeBlanc and uh",
    "start": "2911560",
    "end": "2918880"
  },
  {
    "text": "uh he worked at Microsoft and he left Microsoft and he was back at Microsoft and now he's at Facebook he went to a",
    "start": "2918880",
    "end": "2925000"
  },
  {
    "text": "startup and it failed and then he went to Facebook um so he's he wrote the safe int C plus",
    "start": "2925000",
    "end": "2932200"
  },
  {
    "text": "plus library that ships with uh Microsoft Visual Studio and you know it's also available for other platforms",
    "start": "2932200",
    "end": "2939040"
  },
  {
    "text": "and recently uh implemented version of the library for for C uh and so he sent",
    "start": "2939040",
    "end": "2944800"
  },
  {
    "text": "me this code this is his code and basically what he said he's had apparently he's had this actual argument",
    "start": "2944800",
    "end": "2952000"
  },
  {
    "text": "directly with Bjorn which which I haven't had I'm just looking at things that he's publicly said but David's",
    "start": "2952000",
    "end": "2958660"
  },
  {
    "text": "actually had this argument with him um so this is an example of adding two",
    "start": "2958660",
    "end": "2963700"
  },
  {
    "text": "signed numbers uh so according to David there's one to three uh branches and",
    "start": "2963700",
    "end": "2970839"
  },
  {
    "text": "extra subtraction necessary to do uh you know signed integer Edition",
    "start": "2970839",
    "end": "2976260"
  },
  {
    "text": "uh correctly safely the the unsigned Edition looks like this",
    "start": "2976260",
    "end": "2981640"
  },
  {
    "text": "right so so there's no waste instructions there's only a comparison so you can test whether uh you got a",
    "start": "2981640",
    "end": "2988480"
  },
  {
    "text": "valid result so um I had an example of multiplication too but it's just the same thing if you",
    "start": "2988480",
    "end": "2995380"
  },
  {
    "text": "want to do you know if you want to write safe secure integer operations it's always a",
    "start": "2995380",
    "end": "3001619"
  },
  {
    "text": "lot more expensive using sign types and unsigned types right so this is this is",
    "start": "3001619",
    "end": "3006660"
  },
  {
    "text": "a big big reason why unsigned types should be preferred they're they're you",
    "start": "3006660",
    "end": "3012000"
  },
  {
    "text": "know uh you know so it's kind of it's kind of the",
    "start": "3012000",
    "end": "3017579"
  },
  {
    "text": "argument that you know if you don't mind if your code is incorrect uh signed",
    "start": "3017579",
    "end": "3023040"
  },
  {
    "text": "integers can be faster you know but if you want to write correct code unsigned integers are always faster right and if",
    "start": "3023040",
    "end": "3030119"
  },
  {
    "text": "you don't care if your code is correct or not I don't really know how to talk to you right I mean you could just write",
    "start": "3030119",
    "end": "3037140"
  },
  {
    "text": "code that says return X and uh hey it's incorrect you're done",
    "start": "3037140",
    "end": "3042380"
  },
  {
    "text": "you know it's not I don't I don't understand the concept",
    "start": "3042380",
    "end": "3047760"
  },
  {
    "text": "uh so you know presumably you want to write correct code especially if you",
    "start": "3047760",
    "end": "3054000"
  },
  {
    "text": "know there's safety or security concerns so it's always easier to uh and faster",
    "start": "3054000",
    "end": "3059940"
  },
  {
    "text": "check for unsigned uh wrap around than than signed overflow I think that's",
    "start": "3059940",
    "end": "3065640"
  },
  {
    "text": "typed in there on the right and then I'm actually not that old to",
    "start": "3065640",
    "end": "3071339"
  },
  {
    "text": "remember this I do remember Muhammad Ali boxing",
    "start": "3071339",
    "end": "3076500"
  },
  {
    "text": "um Okay so errors can occur using both signed and unsigned numbers you know there's not",
    "start": "3076500",
    "end": "3083520"
  },
  {
    "text": "um you know nothing is without problems but signed integers should have more ways to fail",
    "start": "3083520",
    "end": "3090059"
  },
  {
    "text": "um and so you can write correct code with signed integers and you know I I'd like it if you did uh but but when you",
    "start": "3090059",
    "end": "3097200"
  },
  {
    "text": "have signed integers there's a greater cost to making them work correctly so",
    "start": "3097200",
    "end": "3102540"
  },
  {
    "text": "it's going to be slower it's the opposite of what said assigned integers are always going",
    "start": "3102540",
    "end": "3108420"
  },
  {
    "text": "to be slower to use correctly um okay injecting UB into a program doesn't make it safer or more secure it",
    "start": "3108420",
    "end": "3116640"
  },
  {
    "text": "makes you look stupid I mean doesn't it you know oh I'm gonna inject",
    "start": "3116640",
    "end": "3122040"
  },
  {
    "text": "a bunch of undefined Behavior into my system right and that's somehow good",
    "start": "3122040",
    "end": "3127559"
  },
  {
    "text": "right it's it's it's not a nonsense card uh argument and of course misra says you",
    "start": "3127559",
    "end": "3133260"
  },
  {
    "text": "know no UB so so that's non not you know misra compliant",
    "start": "3133260",
    "end": "3138420"
  },
  {
    "text": "uh so unsigned answers are always less expensive if you're trying to uh program",
    "start": "3138420",
    "end": "3144119"
  },
  {
    "text": "correctly uh you know safely and securely so so there's this common misconception",
    "start": "3144119",
    "end": "3150540"
  },
  {
    "text": "among C plus plus developers and you know what I almost don't say misconception anymore I mean I think",
    "start": "3150540",
    "end": "3156540"
  },
  {
    "text": "it's uh I think it's a kind of a brainwashed thing right they've you know",
    "start": "3156540",
    "end": "3162300"
  },
  {
    "text": "they've heard um they've heard of bjornis say you signed",
    "start": "3162300",
    "end": "3167460"
  },
  {
    "text": "ants and so they've if somehow you know got their brains to think that",
    "start": "3167460",
    "end": "3172619"
  },
  {
    "text": "that's reality so they're now you know under this illusion",
    "start": "3172619",
    "end": "3177660"
  },
  {
    "text": "that's the word they're under an illusion that signed integers uh you",
    "start": "3177660",
    "end": "3182819"
  },
  {
    "text": "know should be the default type they should be used everywhere you don't need modular arithmetic right that's what the",
    "start": "3182819",
    "end": "3188880"
  },
  {
    "text": "Google style gunline said uh so so in fact the office is true is you should try to to maximize the use of unsigned",
    "start": "3188880",
    "end": "3196740"
  },
  {
    "text": "interest I mean so whenever you have a type that you know never has negative",
    "start": "3196740",
    "end": "3201839"
  },
  {
    "text": "value like a count of any kind like a size uh it really should be represented",
    "start": "3201839",
    "end": "3207180"
  },
  {
    "text": "as unsigned and particularly a size right because there's so many built-in things in the CNC plus plus standard",
    "start": "3207180",
    "end": "3214380"
  },
  {
    "text": "that assume you know return unsigned types or size and you can't get away from that",
    "start": "3214380",
    "end": "3220440"
  },
  {
    "text": "[Music] um yeah it's a good time because I have a",
    "start": "3220440",
    "end": "3226280"
  },
  {
    "text": "yeah so you said 10 things but I'll yeah I'll start with like one so if you",
    "start": "3233640",
    "end": "3240660"
  },
  {
    "text": "have if you have a variable right and say you have a value which can range from 0 to 255 okay so you could portably",
    "start": "3240660",
    "end": "3249300"
  },
  {
    "text": "declare that to the unsigned Char right now I wouldn't do that and the reason so",
    "start": "3249300",
    "end": "3256079"
  },
  {
    "text": "I would declare that to be unsigned int so it's a waste of three bytes but the",
    "start": "3256079",
    "end": "3262319"
  },
  {
    "text": "problem with small types is they undergo integer promotions uh so an unsigned uh",
    "start": "3262319",
    "end": "3268319"
  },
  {
    "text": "Char would be promoted to sign int and Well on most architectures right and so",
    "start": "3268319",
    "end": "3274920"
  },
  {
    "text": "the problem with integer promotions is that it introduces implementation defined Behavior into your code right so",
    "start": "3274920",
    "end": "3280680"
  },
  {
    "text": "depending on the architecture a small integer might get promoted to signed in so it might get promoted to unsigned in",
    "start": "3280680",
    "end": "3287220"
  },
  {
    "text": "so if I'm just dealing with a one-off variable and it's not a big concern about you know storage then I would use",
    "start": "3287220",
    "end": "3296160"
  },
  {
    "text": "nothing smaller than unsigned in or signed in now if I have to have an array of 10 000 elements 0 to 255 well yeah",
    "start": "3296160",
    "end": "3304500"
  },
  {
    "text": "I'm going to use unsung Char because because now you know the the there's a significant use of storage and then you",
    "start": "3304500",
    "end": "3311760"
  },
  {
    "text": "know probably what you want to do is document some assumptions using static assertions about the behavior of your",
    "start": "3311760",
    "end": "3317460"
  },
  {
    "text": "code if it depends on implementation Define behavior or you want to be very",
    "start": "3317460",
    "end": "3323099"
  },
  {
    "text": "careful about how you write this code you know there's some tricky things like",
    "start": "3323099",
    "end": "3328140"
  },
  {
    "text": "you know if you multiply the two largest unsigned short values uh it it it turns",
    "start": "3328140",
    "end": "3334800"
  },
  {
    "text": "into a sign in and it overflows unlike an xa6 architecture where the short is",
    "start": "3334800",
    "end": "3339960"
  },
  {
    "text": "16 bits into 32 and then you get all sorts of whack-a-doodle behavior because",
    "start": "3339960",
    "end": "3345180"
  },
  {
    "text": "it's UB uh so there's some Troublesome edge cases with",
    "start": "3345180",
    "end": "3351119"
  },
  {
    "text": "um you know small types short types less than and are signed in so yeah if it's",
    "start": "3351119",
    "end": "3357480"
  },
  {
    "text": "just a one-off variable I would never declare anything smaller than sign ninja or unsigned in",
    "start": "3357480",
    "end": "3362700"
  },
  {
    "text": "uh you I guess",
    "start": "3362700",
    "end": "3366318"
  },
  {
    "text": "25 days or instead of just",
    "start": "3367880",
    "end": "3374838"
  },
  {
    "text": "um so so UB exists for a variety of reasons I'm gonna guess at this a little",
    "start": "3376559",
    "end": "3382859"
  },
  {
    "text": "bit because again I'm not quite that old right these decision for me I started with the c Committee in 2004. so I've",
    "start": "3382859",
    "end": "3389400"
  },
  {
    "text": "been there about 20 years but a lot of these decisions were made well before me but but one reason for okay one reason",
    "start": "3389400",
    "end": "3396960"
  },
  {
    "text": "for declaring something UB is because it's hard to diagnose Behavior I don't think that that's it in this case the",
    "start": "3396960",
    "end": "3403079"
  },
  {
    "text": "second reason is because basically different implementations do",
    "start": "3403079",
    "end": "3408300"
  },
  {
    "text": "things differently and um the the C standard doesn't want to",
    "start": "3408300",
    "end": "3413880"
  },
  {
    "text": "dictate a particular approach so they make it UB to allow for differences in",
    "start": "3413880",
    "end": "3419400"
  },
  {
    "text": "implementation so you know uint remained or minus one is UB because some",
    "start": "3419400",
    "end": "3426359"
  },
  {
    "text": "implementations will produce a zero right if they have a remained instruction separated from a division",
    "start": "3426359",
    "end": "3431700"
  },
  {
    "text": "instruction but some will fault and so the standard says it's UB",
    "start": "3431700",
    "end": "3437240"
  },
  {
    "text": "because if they didn't you basically wind up with Java right so Java says in",
    "start": "3437240",
    "end": "3442680"
  },
  {
    "text": "men remainder minus one is zero right so on a Java compiler on an Intel processor",
    "start": "3442680",
    "end": "3448619"
  },
  {
    "text": "you have to write some code to test for that edge case and produce a zero on",
    "start": "3448619",
    "end": "3453780"
  },
  {
    "text": "Intel architecture you know introducing branches every time you have just a normal division structure that's",
    "start": "3453780",
    "end": "3459599"
  },
  {
    "text": "significantly going to slow down your code and that's not what CNC plus plus is about C plus C and C plus plus are",
    "start": "3459599",
    "end": "3466140"
  },
  {
    "text": "bails writing optimized code for a particular architecture and significantly Shifting the burden to the",
    "start": "3466140",
    "end": "3472500"
  },
  {
    "text": "programmer to make sure that you get it right um did that fully answer that question",
    "start": "3472500",
    "end": "3478319"
  },
  {
    "text": "okay because I forgot what the question was by the time I got to there",
    "start": "3478319",
    "end": "3484460"
  },
  {
    "text": "yeah I was wondering that as I was speaking but but that is definitely a category for why things are are",
    "start": "3493800",
    "end": "3500420"
  },
  {
    "text": "defined to be UB um so I'm going to answer a question you",
    "start": "3500420",
    "end": "3506220"
  },
  {
    "text": "didn't ask which is why don't they change it now and the reason they will",
    "start": "3506220",
    "end": "3511559"
  },
  {
    "text": "never change this is because compiler optimizers has spent the last 30 years",
    "start": "3511559",
    "end": "3517200"
  },
  {
    "text": "coming up with so many clever optimizations around the fact that",
    "start": "3517200",
    "end": "3522839"
  },
  {
    "text": "signed integer overflow is UB that if they if they defined it to be wrap",
    "start": "3522839",
    "end": "3528119"
  },
  {
    "text": "around or defined as implementation to find Behavior Uh they'd lose all those optimizations right because they",
    "start": "3528119",
    "end": "3534780"
  },
  {
    "text": "couldn't just assume the UB doesn't occur uh so it's become now baked into",
    "start": "3534780",
    "end": "3541500"
  },
  {
    "text": "the languages because of the investment in optimizations compiler vendors will never give it up and you know and and",
    "start": "3541500",
    "end": "3548819"
  },
  {
    "text": "I'm making compiler vendors sound awful I mean the problem is users will never get right because if compiler vendors",
    "start": "3548819",
    "end": "3557220"
  },
  {
    "text": "got rid of those optimizations and your code became 50 slower overnight right",
    "start": "3557220",
    "end": "3562319"
  },
  {
    "text": "you would [ __ ] a brick and start screaming at them on the phone and they would have to change it back so",
    "start": "3562319",
    "end": "3568980"
  },
  {
    "text": "they know this right uh and and the reality of things is that it's still a",
    "start": "3568980",
    "end": "3574440"
  },
  {
    "text": "performance driven world you know the performance takes precedence over security and safety and every other",
    "start": "3574440",
    "end": "3579900"
  },
  {
    "text": "thing and that hasn't changed yeah follow-up",
    "start": "3579900",
    "end": "3587520"
  },
  {
    "text": "foreign",
    "start": "3587520",
    "end": "3590520"
  },
  {
    "text": "don't worry they'll they'll bill you for that okay it's the last question because I",
    "start": "3597059",
    "end": "3603660"
  },
  {
    "text": "got to go but yeah",
    "start": "3603660",
    "end": "3606920"
  },
  {
    "text": "change um",
    "start": "3621180",
    "end": "3624680"
  },
  {
    "text": "yeah I think I think I think all the problems with signed an unsite can be song uh I think there are more problems",
    "start": "3632640",
    "end": "3639780"
  },
  {
    "text": "assigned and I think the cost of solving the problems is higher uh so that's you",
    "start": "3639780",
    "end": "3644940"
  },
  {
    "text": "know Advantage unsigned right okay thank you everyone and don't get in",
    "start": "3644940",
    "end": "3650160"
  },
  {
    "text": "my ways I try to exit the building",
    "start": "3650160",
    "end": "3653420"
  }
]