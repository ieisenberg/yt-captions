[
  {
    "text": "okay welcome everybody this is HTTP in",
    "start": "60",
    "end": "5069"
  },
  {
    "text": "asp.net core in Linux and docker Linux containers we're gonna dig into",
    "start": "5069",
    "end": "11900"
  },
  {
    "text": "certificates and how we use certificates inside of docker to produce a similar",
    "start": "11900",
    "end": "19230"
  },
  {
    "text": "debugging results which is really cool so here's the part where I tell you I'm definitely gonna post my slides on my",
    "start": "19230",
    "end": "25260"
  },
  {
    "text": "blog tonight you're gonna check tomorrow next week next month in about three",
    "start": "25260",
    "end": "31260"
  },
  {
    "text": "months you're gonna get tired of waiting you're gonna email me I'm gonna reply in six months and say no I'm definitely",
    "start": "31260",
    "end": "36840"
  },
  {
    "text": "going to post them on my blog tonight and I'll never post the middle which is why if you go to rob rich org right now",
    "start": "36840",
    "end": "44070"
  },
  {
    "text": "you can click on presentations you can scroll down to this talk right here and",
    "start": "44070",
    "end": "50129"
  },
  {
    "text": "you can look at the slides or the code right now they are online right now at",
    "start": "50129",
    "end": "56879"
  },
  {
    "text": "Rob rich org achievement unlocked so",
    "start": "56879",
    "end": "62640"
  },
  {
    "text": "while you're here click out here on about me and you'll learn a little bit about me I'm a Microsoft MVP a friend of",
    "start": "62640",
    "end": "68400"
  },
  {
    "text": "Redgate some of the other things that I've done Daisy give camp is particularly exciting a Z give camp",
    "start": "68400",
    "end": "74400"
  },
  {
    "text": "brings volunteer developers together with charities who otherwise couldn't afford software services we start",
    "start": "74400",
    "end": "80189"
  },
  {
    "text": "building software for them Friday after work Sunday afternoon we deliver those completed projects back to the charities",
    "start": "80189",
    "end": "86280"
  },
  {
    "text": "it is really really fun sleep is optional caffeine provided if you're in Arizona in Phoenix come look us up",
    "start": "86280",
    "end": "93180"
  },
  {
    "text": "because that is really really cool one of the things I'm particularly proud of is that I replied to a dotnet Rox",
    "start": "93180",
    "end": "100350"
  },
  {
    "text": "episode they read my reply on the air they sent me a mug and if you'd like a",
    "start": "100350",
    "end": "107189"
  },
  {
    "text": "written no just kidding so that's a little bit about me but we're here to learn about HTTP we talked about this",
    "start": "107189",
    "end": "115560"
  },
  {
    "text": "guy HTTP so here's kind of where we're gonna go why do we have certificates",
    "start": "115560",
    "end": "121310"
  },
  {
    "text": "what is what's in a certificate how does asp.net do this in the box and what can",
    "start": "121310",
    "end": "129270"
  },
  {
    "text": "we do about that how do we do that in docker and how do we fix it and then net result",
    "start": "129270",
    "end": "136250"
  },
  {
    "text": "do you give me five stars on Yelp whoa yeah so that's gonna be fun so why",
    "start": "136250",
    "end": "142910"
  },
  {
    "text": "certificates well this is Troy hunt he's the guy on the left he came to the",
    "start": "142910",
    "end": "150200"
  },
  {
    "text": "United States government and tried to explain to them how cybersecurity works",
    "start": "150200",
    "end": "155330"
  },
  {
    "text": "I love it his Aussie socks those are just really cool so you know ultimately government",
    "start": "155330",
    "end": "163069"
  },
  {
    "text": "people are what they are so they actually had to go interview Facebook and all these other people to try and figure out if their pics on their phone",
    "start": "163069",
    "end": "171080"
  },
  {
    "text": "got sent to their wives I'm not sure why that was a relevant question but yeah so why certificates if your answer is",
    "start": "171080",
    "end": "177920"
  },
  {
    "text": "because Troy told me so that is a perfectly legitimate answer and I completely applaud that yes use",
    "start": "177920",
    "end": "184970"
  },
  {
    "text": "certificates because Troy told me so so ultimately you know digging it a little",
    "start": "184970",
    "end": "190940"
  },
  {
    "text": "bit deeper than because Troy hunt told me to why would I use certificates well certificates usually serve two main",
    "start": "190940",
    "end": "197989"
  },
  {
    "text": "purposes the first one I will encrypt the traffic over the wire so that nobody",
    "start": "197989",
    "end": "204260"
  },
  {
    "text": "can snoop on it and see what I'm doing and the second is so that I can verify",
    "start": "204260",
    "end": "209269"
  },
  {
    "text": "that the server is who I expect it to be now that's the client validating that",
    "start": "209269",
    "end": "216260"
  },
  {
    "text": "the server is who we expect it to be we could use certificates the other way we could have client certificates so that",
    "start": "216260",
    "end": "222109"
  },
  {
    "text": "the server could validate that the client is who they say there but client",
    "start": "222109",
    "end": "227269"
  },
  {
    "text": "certificates are hard so we generally don't we generally use session cookies instead so as I first connect to the",
    "start": "227269",
    "end": "233239"
  },
  {
    "text": "service I'll authenticate to them they'll create a session cookie they'll put that on my machine and that's how",
    "start": "233239",
    "end": "239180"
  },
  {
    "text": "the server validates the client because I pass them back the session cookie next",
    "start": "239180",
    "end": "244430"
  },
  {
    "text": "time I make a request how does the client validate it's the server that I'm",
    "start": "244430",
    "end": "249440"
  },
  {
    "text": "talking to well that's certificates and so those are the two things we encrypt the",
    "start": "249440",
    "end": "254930"
  },
  {
    "text": "message and we validate the message so why is this important well here's fire",
    "start": "254930",
    "end": "261769"
  },
  {
    "text": "sheep fire sheep was a plugin for Firefox and fire sheep would",
    "start": "261769",
    "end": "267050"
  },
  {
    "text": "go to a particular website and go steal that session cookie so I have here on",
    "start": "267050",
    "end": "272599"
  },
  {
    "text": "the left a list of session cookies that I found in that coffee shop and now I just click on whatever persona I want to",
    "start": "272599",
    "end": "279919"
  },
  {
    "text": "be and it uses that session cookie to connect to the website so I just pick",
    "start": "279919",
    "end": "286370"
  },
  {
    "text": "who I want to be because I'm passing in the session cookie then the server says yeah here's your Facebook page why did",
    "start": "286370",
    "end": "293330"
  },
  {
    "text": "that happen because Facebook was using HTTP instead of HTTP so how do we block",
    "start": "293330",
    "end": "300590"
  },
  {
    "text": "this attack well use HTTP now my session cookie is no longer sent through the air",
    "start": "300590",
    "end": "306889"
  },
  {
    "text": "and ultimately we can't get to where we need to go our Packers can't get my data",
    "start": "306889",
    "end": "312199"
  },
  {
    "text": "in the middle another great example is a pineapple this device this little Wi-Fi",
    "start": "312199",
    "end": "318590"
  },
  {
    "text": "device will just listen to network traffic as I broadcast out saying hey is",
    "start": "318590",
    "end": "323719"
  },
  {
    "text": "my Wi-Fi network available you know how you get home and your phone automatically notices that you've gotten",
    "start": "323719",
    "end": "329599"
  },
  {
    "text": "home and connects to your Wi-Fi it's broadcasting looking for that Wi-Fi signal so the pineapple just says yeah",
    "start": "329599",
    "end": "336199"
  },
  {
    "text": "I'm that so of course I'm going to connect I'm going to pass in my Wi-Fi",
    "start": "336199",
    "end": "341240"
  },
  {
    "text": "credentials then I'm going to send all my web traffic through it the pineapple then very carefully proxies that traffic",
    "start": "341240",
    "end": "346669"
  },
  {
    "text": "off to the real server and I'm none the wiser that they're now able to spy on my",
    "start": "346669",
    "end": "351800"
  },
  {
    "text": "traffic well why are they able to spy on my traffic because I'm connecting to web",
    "start": "351800",
    "end": "357199"
  },
  {
    "text": "sites with HTTP instead of HTTPS so we",
    "start": "357199",
    "end": "362509"
  },
  {
    "text": "thwart this attack by using certificates now we can't see that traffic in transit",
    "start": "362509",
    "end": "367940"
  },
  {
    "text": "so let's take this example we create",
    "start": "367940",
    "end": "377060"
  },
  {
    "text": "these we create these tunnels these HTTP tunnels so that we encrypt all of our",
    "start": "377060",
    "end": "385099"
  },
  {
    "text": "traffic from here to there now that encryption process is really elegant and it makes sure that my",
    "start": "385099",
    "end": "392629"
  },
  {
    "text": "traffic can't be intercepted in the middle so let's imagine that we have Alice here and Alice is connecting to",
    "start": "392629",
    "end": "399889"
  },
  {
    "text": "Bob calm and Bob calm is using a TLS certificate so you know HTTP works",
    "start": "399889",
    "end": "406080"
  },
  {
    "text": "successfully and all is good all of the traffic is encrypted and ultimately we",
    "start": "406080",
    "end": "412680"
  },
  {
    "text": "we can't see what's going on in their communication now let's imagine that we have someone let's call him Jerry so",
    "start": "412680",
    "end": "420990"
  },
  {
    "text": "Jerry comes in here in the middle and Jerry's gonna try and spy on the traffic well Jerry can't see anything right because",
    "start": "420990",
    "end": "428400"
  },
  {
    "text": "it's it's HTTP well Jerry's gonna do something really interesting",
    "start": "428400",
    "end": "433590"
  },
  {
    "text": "Jerry is going to create an HTTPS certificate as well so Alice connects to",
    "start": "433590",
    "end": "439259"
  },
  {
    "text": "Jerry Jerry proxies the traffic back to Bob calm Bob calm hands of certificate",
    "start": "439259",
    "end": "445310"
  },
  {
    "text": "Jerry sends a new certificate back to Alice and Alice has an encrypted",
    "start": "445310",
    "end": "451470"
  },
  {
    "text": "connection to something and Alice believes all as well if we're only using",
    "start": "451470",
    "end": "457830"
  },
  {
    "text": "HTTPS for encryption then this is completely possible I put a certificate",
    "start": "457830",
    "end": "464039"
  },
  {
    "text": "in both places and I can attack any site that I need to so ultimately it's not",
    "start": "464039",
    "end": "471479"
  },
  {
    "text": "just about encryption it is also about validating that that server is who I say",
    "start": "471479",
    "end": "478949"
  },
  {
    "text": "that server is so in this case I don't want to talk to Jerry I want to talk to the website so how do we validate the",
    "start": "478949",
    "end": "488610"
  },
  {
    "text": "authenticity of a website ultimately we look for this we've taught our users",
    "start": "488610",
    "end": "493770"
  },
  {
    "text": "that they need to find that lock in the top left corner of their address bar and",
    "start": "493770",
    "end": "499080"
  },
  {
    "text": "each browser presents it in a little bit different way but ultimately you know I'm looking for that lock or that green",
    "start": "499080",
    "end": "506280"
  },
  {
    "text": "bar or that thing that says that that site is who I expect them to be and so",
    "start": "506280",
    "end": "514919"
  },
  {
    "text": "ultimately I get to a page like this and now we need to teach users that you don't just click advanced and click proceed that's a certificate fail I love",
    "start": "514919",
    "end": "524190"
  },
  {
    "text": "bad com bad certificate com because it's",
    "start": "524190",
    "end": "529230"
  },
  {
    "text": "able to highlight these kind of errors in really interesting ways so we're still",
    "start": "529230",
    "end": "534270"
  },
  {
    "text": "trying to teach them not to do this you know proceed anyway thing well your certificates expired",
    "start": "534270",
    "end": "540240"
  },
  {
    "text": "well temporarily can you just click proceed but never ever do that again except for every time I tell you to do",
    "start": "540240",
    "end": "547800"
  },
  {
    "text": "that you know that that's what we're kind of training our users to do is you know you look for the lock except for",
    "start": "547800",
    "end": "553020"
  },
  {
    "text": "when you don't so a moment about DV and DV certificates domain validated versus",
    "start": "553020",
    "end": "560700"
  },
  {
    "text": "extended validated certificates domain validated certificates tell me that that",
    "start": "560700",
    "end": "566280"
  },
  {
    "text": "server is responsible for that domain and that's all it says is that you know",
    "start": "566280",
    "end": "572310"
  },
  {
    "text": "if I were to reach out to that domain I'm reaching out to the correct server extended validated certificates take it",
    "start": "572310",
    "end": "578490"
  },
  {
    "text": "a step further and say that search it that server is part of this organization so to get an extended validation",
    "start": "578490",
    "end": "584970"
  },
  {
    "text": "certificate they'll call the phone number on their website they'll talk to executives and they'll validate that",
    "start": "584970",
    "end": "591630"
  },
  {
    "text": "that organization is who they say they're and ultimately then we either get a kind of nice green block or we get",
    "start": "591630",
    "end": "600630"
  },
  {
    "text": "the big green bar and that's interesting but you know ultimately our users are",
    "start": "600630",
    "end": "606900"
  },
  {
    "text": "like well is it this or is it not this do I have to click proceed anyway so you",
    "start": "606900",
    "end": "613620"
  },
  {
    "text": "know the industry kind of went yeah domain validated extended validated I",
    "start": "613620",
    "end": "619460"
  },
  {
    "text": "don't care I just don't want this so",
    "start": "619460",
    "end": "626760"
  },
  {
    "text": "browser certificates if I come up here I see that this site is trusted it has a",
    "start": "626760",
    "end": "635070"
  },
  {
    "text": "lock here in the corner and I can click on that and it'll pop up this box and it'll tell me about the certificate so",
    "start": "635070",
    "end": "644100"
  },
  {
    "text": "here in this certificate dialog and each operating system and browser is ever so slightly different but it'll tell me",
    "start": "644100",
    "end": "650190"
  },
  {
    "text": "that here the certificate was valid from January 7th 2019 to July 17th 2019 it",
    "start": "650190",
    "end": "660750"
  },
  {
    "text": "will tell me a little bit more about that certificate here's the version the signature algorithm sha-256 is a great",
    "start": "660750",
    "end": "667410"
  },
  {
    "text": "one I'm valid from invalid to which I'm not sure why Microsoft calls it that",
    "start": "667410",
    "end": "672930"
  },
  {
    "text": "everyone else calls it not before and not after but you know there's the dates here's the domains and other details",
    "start": "672930",
    "end": "680339"
  },
  {
    "text": "that it works for so you know this domain is sni one four seven five one seven CloudFlare SSL com so yeah proxy",
    "start": "680339",
    "end": "688470"
  },
  {
    "text": "my site through Claude Fleur some public key details here's subject alternate names and",
    "start": "688470",
    "end": "696750"
  },
  {
    "text": "subject alternate names is really interesting because this is the other domains that are also supported on the",
    "start": "696750",
    "end": "702930"
  },
  {
    "text": "same certificate so if this certificate came back from one of these other domains it would still be valid so",
    "start": "702930",
    "end": "709220"
  },
  {
    "text": "there's a few here you know CloudFlare",
    "start": "709220",
    "end": "715110"
  },
  {
    "text": "is wonderful at proxying lots of things but there's my site Rob rich org and now this certificate is trusted well why is",
    "start": "715110",
    "end": "722399"
  },
  {
    "text": "it trusted well one of the other things that we have in here is this thumbprint",
    "start": "722399",
    "end": "727860"
  },
  {
    "text": "and that's kind of the serial number for this certificate or the unique",
    "start": "727860",
    "end": "733500"
  },
  {
    "text": "identifier of this certificate yeah there's a certificate proper serial number property but we use thumbprint to",
    "start": "733500",
    "end": "740279"
  },
  {
    "text": "kind of reference that there's that thumbprint that serial number if I have that serial number then I know that I",
    "start": "740279",
    "end": "746939"
  },
  {
    "text": "have that certificate so we have then a trust chain why is this one green well",
    "start": "746939",
    "end": "753810"
  },
  {
    "text": "this certificate was signed by this certificate and I can click on this one and click view certificate and pull up",
    "start": "753810",
    "end": "759930"
  },
  {
    "text": "similar details for that certificate and that one was signed by this certificate and that one was signed by this",
    "start": "759930",
    "end": "765509"
  },
  {
    "text": "certificate and ultimately then I get to this certificate and now I'll come in to",
    "start": "765509",
    "end": "772330"
  },
  {
    "text": "[Music] manage user certificates or manage",
    "start": "772330",
    "end": "777839"
  },
  {
    "text": "computer certificates those assigned to my local machine or those assigned to me",
    "start": "777839",
    "end": "784379"
  },
  {
    "text": "personally so I've already pulled those up here's the user certificates and the",
    "start": "784379",
    "end": "790610"
  },
  {
    "text": "computer certificates I've popped open the trusted root certificate store",
    "start": "790610",
    "end": "796670"
  },
  {
    "text": "and here in the trusted root certificate store I can kind of cruise through the",
    "start": "797670",
    "end": "802800"
  },
  {
    "text": "certificates that have been pre-installed on my machine and Windows",
    "start": "802800",
    "end": "807840"
  },
  {
    "text": "Update gets these into place so as Windows Update goes it will give me new",
    "start": "807840",
    "end": "813180"
  },
  {
    "text": "root certificates and so ultimately that certificate here at the top of the chain",
    "start": "813180",
    "end": "819440"
  },
  {
    "text": "was pre-installed on my machine in here",
    "start": "819440",
    "end": "824520"
  },
  {
    "text": "I trust this certificate this",
    "start": "824520",
    "end": "829560"
  },
  {
    "text": "certificate signed this certificate which signed this certificate and ultimately signed this certificate and",
    "start": "829560",
    "end": "834750"
  },
  {
    "text": "therefore I will go green for this certificate so we looked at browser",
    "start": "834750",
    "end": "843930"
  },
  {
    "text": "certificates and we looked at certificate stores that's really interesting we saw some of the",
    "start": "843930",
    "end": "851970"
  },
  {
    "text": "properties associated with that as you pull up these slides later on Rob rich org that'll be really helpful to you",
    "start": "851970",
    "end": "857760"
  },
  {
    "text": "know see what we demoed in the previous slide we look through the subject name",
    "start": "857760",
    "end": "864270"
  },
  {
    "text": "the domain and the subject alternate names the other domains and in particular the thumbprint and the trust",
    "start": "864270",
    "end": "871980"
  },
  {
    "text": "chain we walked that trust chain to see that I pre trusted this certificate that",
    "start": "871980",
    "end": "877920"
  },
  {
    "text": "was there root of the certificate that ultimately served me and that's why the",
    "start": "877920",
    "end": "883170"
  },
  {
    "text": "certificate is green so what can go wrong here well probably the most likely",
    "start": "883170",
    "end": "888930"
  },
  {
    "text": "thing is that certificate expired when I get to that not after date and I'm past",
    "start": "888930",
    "end": "894960"
  },
  {
    "text": "that well yeah I'm gonna get that gray screen where I have to hit proceed because that certificate expired it'd be",
    "start": "894960",
    "end": "902610"
  },
  {
    "text": "nice to kind of keep track of that and you know know when I need to renew that do I have a calendar entry on my",
    "start": "902610",
    "end": "908880"
  },
  {
    "text": "calendar to make me go renew that certificate well what else can go wrong well we could use an insert cure",
    "start": "908880",
    "end": "915420"
  },
  {
    "text": "algorithm a year or two or three ago we all upgraded from sha-1 to sha-256 because sha-1 was no longer considered a",
    "start": "915420",
    "end": "922680"
  },
  {
    "text": "secure cryptographic algorithm the big thing that goes wrong and the thing",
    "start": "922680",
    "end": "927930"
  },
  {
    "text": "we'll focus on here is the trust chain and we saw where we act gently connected to Gerry instead of",
    "start": "927930",
    "end": "933480"
  },
  {
    "text": "connecting to the website that we wanted to and that ultimately didn't yield us a great experience I love bad SSL right",
    "start": "933480",
    "end": "942000"
  },
  {
    "text": "here this is a link that will pop open this site bad SSL is a site that allows",
    "start": "942000",
    "end": "947370"
  },
  {
    "text": "us to construct various bad certificate conditions so for example if I want to",
    "start": "947370",
    "end": "954720"
  },
  {
    "text": "hit a expired certificate and see what happens here's that thing it says error",
    "start": "954720",
    "end": "960990"
  },
  {
    "text": "cert date invalid and I could click proceed and dig into how that works but",
    "start": "960990",
    "end": "966960"
  },
  {
    "text": "I just got a bad certificate associated with this experience just by clicking in",
    "start": "966960",
    "end": "973440"
  },
  {
    "text": "through bad SSL com so as you're testing your site to make sure that it can do interesting things",
    "start": "973440",
    "end": "979560"
  },
  {
    "text": "that can be a great resource for finding broken trust chains finding expired or",
    "start": "979560",
    "end": "984930"
  },
  {
    "text": "invalid certificates and doing all kinds of other things okay so we looked at",
    "start": "984930",
    "end": "991950"
  },
  {
    "text": "certificate stores on Windows we have certain manager both the user side and the computer side that allows us to do",
    "start": "991950",
    "end": "998700"
  },
  {
    "text": "things Firefox takes it a little bit differently Firefox doesn't use that store rather they have their own if I",
    "start": "998700",
    "end": "1005390"
  },
  {
    "text": "come in here to options and I view",
    "start": "1005390",
    "end": "1012260"
  },
  {
    "text": "certificates here are the certificates that they've pre-installed rather than using the Windows trust store why do",
    "start": "1012260",
    "end": "1020330"
  },
  {
    "text": "they have their own yeah so that's",
    "start": "1020330",
    "end": "1026688"
  },
  {
    "text": "interesting so on Windows we have this central store on Linux I love this",
    "start": "1026689",
    "end": "1033709"
  },
  {
    "text": "comment on the asp.net github post they filed an issue and the answer was",
    "start": "1033709",
    "end": "1039740"
  },
  {
    "text": "trusting the certificate is only available on Windows and Mac OS because there is no standard way of trusting the",
    "start": "1039740",
    "end": "1045980"
  },
  {
    "text": "certificate on Linux well kind of if you're on this one you can trust it this",
    "start": "1045980",
    "end": "1052580"
  },
  {
    "text": "way and if you're on this one you can trust it this way here are all the places where they keep that master list",
    "start": "1052580",
    "end": "1057950"
  },
  {
    "text": "of certificates that they trust but you know I don't want to care about",
    "start": "1057950",
    "end": "1065510"
  },
  {
    "text": "this list so of course there's a bunch of programs that ignore that list completely Firefox Chrome on Linux",
    "start": "1065510",
    "end": "1072230"
  },
  {
    "text": "doesn't use that list they have their own Apache Java Kestrel the built-in",
    "start": "1072230",
    "end": "1079340"
  },
  {
    "text": "asp.net web server doesn't use the trust or they use a certificate placed",
    "start": "1079340",
    "end": "1084679"
  },
  {
    "text": "somewhere else so on Linux it's kind of this free-for-all as we get into docker",
    "start": "1084679",
    "end": "1090380"
  },
  {
    "text": "we're gonna kind of fall into that where there isn't a standard trust store that we need to play into so in production",
    "start": "1090380",
    "end": "1099679"
  },
  {
    "text": "how do I do production certificates I want that trust chain I want to be a",
    "start": "1099679",
    "end": "1104990"
  },
  {
    "text": "certificate that I bought from a valid place or that I grabbed from a trusted",
    "start": "1104990",
    "end": "1110059"
  },
  {
    "text": "spot so that then all of my users have pre-installed that trust chain and I'll",
    "start": "1110059",
    "end": "1115520"
  },
  {
    "text": "get a green certificate so step one use let's encrypt let's encrypt is really",
    "start": "1115520",
    "end": "1122570"
  },
  {
    "text": "elegant for this what if I do if I don't want to use let's encrypt well you start",
    "start": "1122570",
    "end": "1127790"
  },
  {
    "text": "off by buying a certificate and of course then you go looking for the download button and they say there isn't a download button so I go create a key I",
    "start": "1127790",
    "end": "1134870"
  },
  {
    "text": "use that to create a CSR I upload the CSR to their site they use that to sign the certificate in interesting ways I",
    "start": "1134870",
    "end": "1141230"
  },
  {
    "text": "download that certificate I go try and install it into my web server and oh crap I downloaded the wrong certificate",
    "start": "1141230",
    "end": "1147830"
  },
  {
    "text": "so now I go back to the site do I need to re-upload the CSR do I need to create a new CSR do I eventually get the right",
    "start": "1147830",
    "end": "1154640"
  },
  {
    "text": "certificate I installed it on my web server and ultimately it doesn't work and so then step nine I use let's",
    "start": "1154640",
    "end": "1160190"
  },
  {
    "text": "encrypt so let's encrypt let's encrypt is really really cool because they offer",
    "start": "1160190",
    "end": "1166340"
  },
  {
    "text": "this free certificate service you put a daemon on your website and you connect",
    "start": "1166340",
    "end": "1173150"
  },
  {
    "text": "to their cert their certificate store and you make a request they make a request back to validate that you own",
    "start": "1173150",
    "end": "1178640"
  },
  {
    "text": "that domain ultimately they issue the certificate and that daemon ends up installing that certificate on your web",
    "start": "1178640",
    "end": "1185570"
  },
  {
    "text": "server no fuss happens automatically so they have really short-lived certificates that are able to do that",
    "start": "1185570",
    "end": "1192890"
  },
  {
    "text": "process whenever they need to to keep your certificate up-to-date it is really",
    "start": "1192890",
    "end": "1198320"
  },
  {
    "text": "really cool so in production by a certificate or use",
    "start": "1198320",
    "end": "1203570"
  },
  {
    "text": "let's encrypt outside of production well",
    "start": "1203570",
    "end": "1209109"
  },
  {
    "text": "now what here on the let's encrypt docks they talk about what to do in production",
    "start": "1209109",
    "end": "1216619"
  },
  {
    "text": "are outside of production so one of the cool things that they do is validate",
    "start": "1216619",
    "end": "1223009"
  },
  {
    "text": "that you own the domain nobody can own",
    "start": "1223009",
    "end": "1228909"
  },
  {
    "text": "localhost so they can't issue a certificate for localhost they have to",
    "start": "1228909",
    "end": "1236479"
  },
  {
    "text": "make that inbound requests into your system so you don't have a public if you don't have a publicly accessible IP they",
    "start": "1236479",
    "end": "1244190"
  },
  {
    "text": "can't issue a certificate for that domain so in development and testing yeah we can't use let's encrypt that's a",
    "start": "1244190",
    "end": "1253879"
  },
  {
    "text": "bummer and ultimately what they invite us to do is to use open SSL to go create",
    "start": "1253879",
    "end": "1261349"
  },
  {
    "text": "a self-signed certificate yeah ok",
    "start": "1261349",
    "end": "1267559"
  },
  {
    "text": "so in development and testing what can we do well what's really cool because",
    "start": "1267559",
    "end": "1273109"
  },
  {
    "text": "we're in this asp.net ecosystem we have this really cool development experience",
    "start": "1273109",
    "end": "1280219"
  },
  {
    "text": "kind of baked in let's look at that I have Visual Studio 2017 here",
    "start": "1280219",
    "end": "1287149"
  },
  {
    "text": "I just went file new project I tweaked it a smidge but in this case it's the",
    "start": "1287149",
    "end": "1294499"
  },
  {
    "text": "standard stuff I'll set this as my startup project and because we want to use kestrel not is Express I'm going to",
    "start": "1294499",
    "end": "1301789"
  },
  {
    "text": "come in here to the drop-down and I'm going to choose the my project as",
    "start": "1301789",
    "end": "1307519"
  },
  {
    "text": "opposed to is Express I don't want the is Express details in this because we won't have i Express when we get to",
    "start": "1307519",
    "end": "1313849"
  },
  {
    "text": "docker so I'm going to fire up this solution I'll actually set multiple",
    "start": "1313849",
    "end": "1319369"
  },
  {
    "text": "startup projects here and let's fire up",
    "start": "1319369",
    "end": "1325039"
  },
  {
    "text": "this site there's kestrel firing up",
    "start": "1325039",
    "end": "1330219"
  },
  {
    "text": "it's gonna launch a browser here's my browser and I have a trusted certificate",
    "start": "1330260",
    "end": "1338429"
  },
  {
    "text": "I have a green lock well why is this lock green if I click here on view",
    "start": "1338429",
    "end": "1347070"
  },
  {
    "text": "certificate here's my certificate it's issued to localhost I'm browsing to localhost that's great",
    "start": "1347070",
    "end": "1352890"
  },
  {
    "text": "it's not expired I can come looking here at the details and see that it is the",
    "start": "1352890",
    "end": "1358200"
  },
  {
    "text": "asp.net development certificate I can look at this thumbprint ultimately that",
    "start": "1358200",
    "end": "1364620"
  },
  {
    "text": "certificate is here in my certificate store not that one this one here's the",
    "start": "1364620",
    "end": "1373500"
  },
  {
    "text": "localhost certificate and that one has",
    "start": "1373500",
    "end": "1379350"
  },
  {
    "text": "that same thumbprint FD zero eight one five here's the certificate that I trust",
    "start": "1379350",
    "end": "1386690"
  },
  {
    "text": "here's the certificate that I got from the website FD zero eight one five it is",
    "start": "1386690",
    "end": "1393480"
  },
  {
    "text": "a self signed certificate but I trust that certificate therefore I get HTTPS",
    "start": "1393480",
    "end": "1399360"
  },
  {
    "text": "in the box from visual studio well",
    "start": "1399360",
    "end": "1407730"
  },
  {
    "text": "that's really cool I also went to http localhost five thousand it did the automatic redirect that's really cool",
    "start": "1407730",
    "end": "1415340"
  },
  {
    "text": "here in Visual Studio let's go looking for you know where's the plumbing that did that well here in",
    "start": "1415340",
    "end": "1424559"
  },
  {
    "text": "program CS we don't see anything different from an HTTP to an HTTP project so it's not here here in",
    "start": "1424559",
    "end": "1434250"
  },
  {
    "text": "start-up CS we'll see a little bit of a distraction there's things in here about",
    "start": "1434250",
    "end": "1440250"
  },
  {
    "text": "use HTTP use HSTs certificate pinning that's really elegant because then they",
    "start": "1440250",
    "end": "1445950"
  },
  {
    "text": "won't have to keep downloading the certificate and I've told them to only use HTTPS going forward for this site we",
    "start": "1445950",
    "end": "1452760"
  },
  {
    "text": "only do that in production because we don't want to pin our development",
    "start": "1452760",
    "end": "1458100"
  },
  {
    "text": "machine to a fake certificate that would be bad undoing that as a really interesting",
    "start": "1458100",
    "end": "1464669"
  },
  {
    "text": "Google search by the way we see this use HTTP redirection that's interesting but those are the only clues here that we",
    "start": "1464669",
    "end": "1471899"
  },
  {
    "text": "have HTTPS going on well where is the HTTP magic is it in app settings no app",
    "start": "1471899",
    "end": "1482159"
  },
  {
    "text": "settings is pretty blend here inside launch settings inside the property",
    "start": "1482159",
    "end": "1488100"
  },
  {
    "text": "folder we see that is Express content we can just delete that we don't need that",
    "start": "1488100",
    "end": "1493440"
  },
  {
    "text": "for this demo we want to use kestrel so",
    "start": "1493440",
    "end": "1498630"
  },
  {
    "text": "going forward we have just that one thing in the list and we can see a little bit of a clue we now have two",
    "start": "1498630",
    "end": "1505710"
  },
  {
    "text": "URLs here the application URL is HTTP localhost 5001 and HTTP localhost 5,000",
    "start": "1505710",
    "end": "1515389"
  },
  {
    "text": "i've told it to launch on to urls instead of just one and one of them is",
    "start": "1515389",
    "end": "1521909"
  },
  {
    "text": "HTTP but I haven't specified a certificate I haven't done any of the rest of that well that's really cool",
    "start": "1521909",
    "end": "1531289"
  },
  {
    "text": "obligatory kittens so out of the box we have this great HTTP development story",
    "start": "1533809",
    "end": "1541470"
  },
  {
    "text": "from visual studio I have certificates that I've pre trusted I can hit that certificate and I",
    "start": "1541470",
    "end": "1547980"
  },
  {
    "text": "can do really elegant things it's going to do automatic HTTP redirection in",
    "start": "1547980",
    "end": "1553380"
  },
  {
    "text": "production all have certificate pinning that's great so ultimately how does this",
    "start": "1553380",
    "end": "1559620"
  },
  {
    "text": "happen in program CS we had web host create default web builder asp.net is",
    "start": "1559620",
    "end": "1567539"
  },
  {
    "text": "open source so let's go looking at create default web builder well that's",
    "start": "1567539",
    "end": "1574110"
  },
  {
    "text": "going to go create the builder and it goes and does a bunch of stuff about is it development go grab the user secrets",
    "start": "1574110",
    "end": "1581130"
  },
  {
    "text": "that's really cool grab environment variables configure logging ooh configure web defaults that's pretty",
    "start": "1581130",
    "end": "1587940"
  },
  {
    "text": "cool configure web defaults so configure web defaults and this is a",
    "start": "1587940",
    "end": "1594150"
  },
  {
    "text": "link that will pop us open to this page configure web default says hey builder",
    "start": "1594150",
    "end": "1600450"
  },
  {
    "text": "use kestrel okay so it's gonna go grab that kestrel section from the web config",
    "start": "1600450",
    "end": "1606140"
  },
  {
    "text": "we didn't have a Kestrel section in our web config so digging a little bit",
    "start": "1606140",
    "end": "1612570"
  },
  {
    "text": "deeper you know there's a whole lot more calls that happen and then ultimately we go try to find that developer",
    "start": "1612570",
    "end": "1619200"
  },
  {
    "text": "certificate file get try get certificate path so it's gonna look inside app data",
    "start": "1619200",
    "end": "1626910"
  },
  {
    "text": "it's gonna look inside the home environment variable if either of those are set it's gonna go look for a",
    "start": "1626910",
    "end": "1632780"
  },
  {
    "text": "specific path inside there and it's ultimately going to look for app name",
    "start": "1632780",
    "end": "1639240"
  },
  {
    "text": "dot pfx well I don't have an app named dot pfx but let's keep digging in there",
    "start": "1639240",
    "end": "1646850"
  },
  {
    "text": "ultimately it's going to look for CN equals localhost so that's here is it a",
    "start": "1646850",
    "end": "1653370"
  },
  {
    "text": "development certificate well it is if the CN is localhost if the domain is",
    "start": "1653370",
    "end": "1658610"
  },
  {
    "text": "specifically for localhost and only local host is that the development certificate digging it a bit further",
    "start": "1658610",
    "end": "1666780"
  },
  {
    "text": "it's like well how does it know how to use this as opposed to whatever's passed to it well if it has some addresses then",
    "start": "1666780",
    "end": "1673920"
  },
  {
    "text": "it'll use the addresses if it doesn't have the addresses then it will use this default address strategy which means go",
    "start": "1673920",
    "end": "1681090"
  },
  {
    "text": "figure it out if I didn't have those launch options JSON then it would dig in",
    "start": "1681090",
    "end": "1686910"
  },
  {
    "text": "here and ultimately there's a constant way way deep in that call stack which",
    "start": "1686910",
    "end": "1694020"
  },
  {
    "text": "says localhost 5,000 that's how it knows how to launch on localhost 5,000 go grab",
    "start": "1694020",
    "end": "1699600"
  },
  {
    "text": "that development certificate and ultimately launch kestrel to do interesting things and then what's",
    "start": "1699600",
    "end": "1704760"
  },
  {
    "text": "really cool is it also says now listening on and it'll spit out those those ports well how does it get these",
    "start": "1704760",
    "end": "1712950"
  },
  {
    "text": "ports it's looping through addresses that it gets here from the server",
    "start": "1712950",
    "end": "1719670"
  },
  {
    "text": "features the server address features and then it's just looping on the splitting",
    "start": "1719670",
    "end": "1724800"
  },
  {
    "text": "on semicolon so I passed it that list of URLs to",
    "start": "1724800",
    "end": "1729840"
  },
  {
    "text": "launch it split that on semicolon and did some interesting things and then ultimately console.log those to say I'm",
    "start": "1729840",
    "end": "1738090"
  },
  {
    "text": "now launching on these two ports I love that asp.net is open source now so",
    "start": "1738090",
    "end": "1748110"
  },
  {
    "text": "that's kind of how we get from this program that says nothing about a",
    "start": "1748110",
    "end": "1753620"
  },
  {
    "text": "certificate to automatically getting this certificate out of the box that's",
    "start": "1753620",
    "end": "1760140"
  },
  {
    "text": "really cool and all that was built in as I installed Visual Studio it fired it up",
    "start": "1760140",
    "end": "1765390"
  },
  {
    "text": "if I'm not using Visual Studio as I install the.net SDK on Linux",
    "start": "1765390",
    "end": "1773250"
  },
  {
    "text": "I'll get my certificate dumped in this directory dotnet slash core FX / you",
    "start": "1773250",
    "end": "1778440"
  },
  {
    "text": "know blah blah blah blah blah startup pfx and it's a PF X file it's not a PEM",
    "start": "1778440",
    "end": "1784710"
  },
  {
    "text": "server file even though it's on Linux it's a PF X file bummer it's not in that",
    "start": "1784710",
    "end": "1792870"
  },
  {
    "text": "Linux trust store they just kind of stuck it in this net directory okay",
    "start": "1792870",
    "end": "1798740"
  },
  {
    "text": "that's interesting so how do I make this certificate well I can from the command",
    "start": "1798740",
    "end": "1805050"
  },
  {
    "text": "line I can say dotnet dev certs HTTP - -",
    "start": "1805050",
    "end": "1810210"
  },
  {
    "text": "trust and it'll take that certificate and I'll put it in the trust store for",
    "start": "1810210",
    "end": "1815340"
  },
  {
    "text": "my OS so I can find this program here inside see Program Files net SDK 2.2",
    "start": "1815340",
    "end": "1827640"
  },
  {
    "text": "whatever version I'm on net tools net dev and so here in that spot here is",
    "start": "1827640",
    "end": "1833190"
  },
  {
    "text": "that dotnet dev certs DLL but yeah asp.net is open source so let's go look",
    "start": "1833190",
    "end": "1839850"
  },
  {
    "text": "at the source for that here's program CS and programs CS we'll go grab net dev certs HTTP and then go grab the command",
    "start": "1839850",
    "end": "1847740"
  },
  {
    "text": "lines as I say trust it'll then call into this method create asp net",
    "start": "1847740",
    "end": "1855540"
  },
  {
    "text": "development certificate and ultimately what's wonderful and annoying is this trust",
    "start": "1855540",
    "end": "1862500"
  },
  {
    "text": "certificate method down at the bottom if",
    "start": "1862500",
    "end": "1868470"
  },
  {
    "text": "the OS platform is Windows then trust it this way if the OS platform is Mac",
    "start": "1868470",
    "end": "1873600"
  },
  {
    "text": "trusted this way we're on Linux sorry",
    "start": "1873600",
    "end": "1880170"
  },
  {
    "text": "we're not gonna trust on Linux they just punted they didn't try and figure out you know this distro does it this way",
    "start": "1880170",
    "end": "1886080"
  },
  {
    "text": "and that distro does it that way they just say nope we're not gonna trust that or just get on Linux so if you say - - trust on",
    "start": "1886080",
    "end": "1895800"
  },
  {
    "text": "Linux it will not do that and thus it buries it in its directory",
    "start": "1895800",
    "end": "1902610"
  },
  {
    "text": "instead",
    "start": "1902610",
    "end": "1904850"
  },
  {
    "text": "okay so let's dig into how we do this in docker well in this application we did",
    "start": "1908420",
    "end": "1917010"
  },
  {
    "text": "some interesting things that I just kind of glossed over I've launched both",
    "start": "1917010",
    "end": "1923280"
  },
  {
    "text": "projects again here's that now listening",
    "start": "1923280",
    "end": "1933300"
  },
  {
    "text": "on HTTP 5001 and now listening on HTTP 5,000 here on the home page I'm gonna go",
    "start": "1933300",
    "end": "1941610"
  },
  {
    "text": "grab the list of addresses that I'm bound to which is pretty cool I just kind of reached into those environment",
    "start": "1941610",
    "end": "1947910"
  },
  {
    "text": "variables and I did that let's look at those environment variables here in the",
    "start": "1947910",
    "end": "1954060"
  },
  {
    "text": "home controller I just reach out into this gently get endpoint addresses service or method that looks pretty",
    "start": "1954060",
    "end": "1966120"
  },
  {
    "text": "familiar I go get the I server address features I go loop through those split",
    "start": "1966120",
    "end": "1972090"
  },
  {
    "text": "by semicolon and I go split a spit out those URLs well I also did something",
    "start": "1972090",
    "end": "1979110"
  },
  {
    "text": "else kind of interesting here I want to get at the certificate I want to get out",
    "start": "1979110",
    "end": "1985770"
  },
  {
    "text": "that thumbprint I want to get out the trust chain I want to see is that certificate is the development",
    "start": "1985770",
    "end": "1991170"
  },
  {
    "text": "certificate loaded in this case it is and what are those details about that certificate so of course I head off to",
    "start": "1991170",
    "end": "2001539"
  },
  {
    "text": "github and I go look at this comment where David Fowler very specifically",
    "start": "2002019",
    "end": "2009080"
  },
  {
    "text": "says no don't do it this way so here",
    "start": "2009080",
    "end": "2019220"
  },
  {
    "text": "inside Kestrel inside the options is this list of things so yeah of course",
    "start": "2019220",
    "end": "2027409"
  },
  {
    "text": "David Fowler said definitely don't do what we're about to do so we're gonna go grab that server up the listen options",
    "start": "2027409",
    "end": "2035090"
  },
  {
    "text": "we're gonna reflect into that listen options property because it's private let's grab those listen options and",
    "start": "2035090",
    "end": "2042349"
  },
  {
    "text": "we'll reflect out on those lists and options the HTTP details including the certificate or the HTTP details the",
    "start": "2042349",
    "end": "2051230"
  },
  {
    "text": "address and port so that we can show them nicely on the screen and while we're there let's reflect a couple more",
    "start": "2051230",
    "end": "2056839"
  },
  {
    "text": "interesting certificate details so this",
    "start": "2056839",
    "end": "2061940"
  },
  {
    "text": "page is trusted this page is trusted",
    "start": "2061940",
    "end": "2069069"
  },
  {
    "text": "because the certificate here this FD",
    "start": "2069069",
    "end": "2081319"
  },
  {
    "text": "zero eight one five certificate is in our trust chain it's a trusted certificate that's why that works",
    "start": "2081319",
    "end": "2088849"
  },
  {
    "text": "here's that FD zero eight one five certificate so the other interesting",
    "start": "2088849",
    "end": "2094760"
  },
  {
    "text": "thing that we're gonna do here in this is call an API so here in our home",
    "start": "2094760",
    "end": "2100220"
  },
  {
    "text": "controller we'll go create a URL and I",
    "start": "2100220",
    "end": "2106220"
  },
  {
    "text": "you know swap this out with bad SSL comm to kind of see that experience but then",
    "start": "2106220",
    "end": "2112040"
  },
  {
    "text": "we'll call this service now this service is going to do something interesting go",
    "start": "2112040",
    "end": "2117530"
  },
  {
    "text": "create that HTTP client handler get the string ace get a sync that URL grab the",
    "start": "2117530",
    "end": "2123829"
  },
  {
    "text": "status code grab the response deserialize it into JSON and ultimately returned that that",
    "start": "2123829",
    "end": "2130480"
  },
  {
    "text": "URL that values controller is back here that's doing something really similar that is just I don't know going and",
    "start": "2130480",
    "end": "2137920"
  },
  {
    "text": "hacking the end points and grabbing the certificates so ultimately it'll be able to return the certificates that the",
    "start": "2137920",
    "end": "2143860"
  },
  {
    "text": "server is hosting through that URL it's not resort returning the certificate itself but rather just unique list of",
    "start": "2143860",
    "end": "2151540"
  },
  {
    "text": "thumb prints so the other interesting thing that we're doing here is we're",
    "start": "2151540",
    "end": "2158380"
  },
  {
    "text": "gonna go grab that certificate in the middle of doing that TLS handshake so",
    "start": "2158380",
    "end": "2164020"
  },
  {
    "text": "step one when we google for anything and land on Stack Overflow about you know what's wrong with my HTTPS certificate",
    "start": "2164020",
    "end": "2170710"
  },
  {
    "text": "is that thing about how to turn off certificate validation remember Bob accidentally connecting to Jerry well",
    "start": "2170710",
    "end": "2178270"
  },
  {
    "text": "yeah if I go to do this server certificate custom validation callback and I return true here then it will",
    "start": "2178270",
    "end": "2185050"
  },
  {
    "text": "always accept it whether that certificate is invalid or not in this case we're very specifically not doing",
    "start": "2185050",
    "end": "2190870"
  },
  {
    "text": "that we're gonna look at does the error match none if it's not failing then it",
    "start": "2190870",
    "end": "2198910"
  },
  {
    "text": "is valid and we'll continue on and we'll just kind of grab the other details in here so how do we do this in docker well",
    "start": "2198910",
    "end": "2209680"
  },
  {
    "text": "while we're here here's that site but",
    "start": "2209680",
    "end": "2215560"
  },
  {
    "text": "inside of a docker file so I've hacked this docker file a smidge to be able to get at all of the details that we need",
    "start": "2215560",
    "end": "2223350"
  },
  {
    "text": "if I just said add docker support it would have had a little bit different",
    "start": "2223350",
    "end": "2229270"
  },
  {
    "text": "experience but I really wanted this asp net core URLs in here so I'm",
    "start": "2229270",
    "end": "2234310"
  },
  {
    "text": "specifically building in debug I'm specifically starting in development mode so I don't trigger that HSTs",
    "start": "2234310",
    "end": "2239950"
  },
  {
    "text": "certificate and then ultimately I'm launching there so let's kick this off in in docker docker run all the things",
    "start": "2239950",
    "end": "2251860"
  },
  {
    "text": "I've built that container previously we",
    "start": "2251860",
    "end": "2257140"
  },
  {
    "text": "failed the development certificate is installed",
    "start": "2257140",
    "end": "2263000"
  },
  {
    "text": "as the SDK is installed here inside vs",
    "start": "2263000",
    "end": "2268880"
  },
  {
    "text": "code we're not using the SDK we're using",
    "start": "2268880",
    "end": "2274070"
  },
  {
    "text": "the runtime image this runtime image doesn't have a development certificate",
    "start": "2274070",
    "end": "2279650"
  },
  {
    "text": "in it therefore there's no certificate for kestrel defined therefore starting this the file doesn't work so why does",
    "start": "2279650",
    "end": "2286820"
  },
  {
    "text": "this work when I just say docker compose up or push play inside Visual Studio when I add docker support because we",
    "start": "2286820",
    "end": "2293030"
  },
  {
    "text": "don't specify this URL here and so it",
    "start": "2293030",
    "end": "2298610"
  },
  {
    "text": "will happily launch an HTTP only mode have you ever deployed your site and you",
    "start": "2298610",
    "end": "2305750"
  },
  {
    "text": "accidentally left that one HTTP reference and of course the browser is",
    "start": "2305750",
    "end": "2310850"
  },
  {
    "text": "going to block it because the rest of the site is SSL is TLS and this one is not when we develop in HTTP we kind of",
    "start": "2310850",
    "end": "2319520"
  },
  {
    "text": "lie to ourselves let's really push forward and see if we can develop in HTTP so let's leave that one there and",
    "start": "2319520",
    "end": "2327170"
  },
  {
    "text": "let's take another stab at this so I know I need a certificate so I'm doing",
    "start": "2327170",
    "end": "2337130"
  },
  {
    "text": "the same thing up at the top I'm just running dotnet dev search HTTP just to make sure that that certificate is there",
    "start": "2337130",
    "end": "2343550"
  },
  {
    "text": "it'll output whether it was there or whether it created it that's kind of nice and then here's the magic right",
    "start": "2343550",
    "end": "2350360"
  },
  {
    "text": "here I'm gonna go grab the root net core FX cryptography and it goes on for a",
    "start": "2350360",
    "end": "2357260"
  },
  {
    "text": "while that directory and I'm going to copy it to the new containers root net FX core FX core quarry cryptography",
    "start": "2357260",
    "end": "2365330"
  },
  {
    "text": "directory now I have that root certificate now I have I have that development certificate so now when I",
    "start": "2365330",
    "end": "2372140"
  },
  {
    "text": "launch I'll be able to do really interesting things the rest of this is",
    "start": "2372140",
    "end": "2377930"
  },
  {
    "text": "identical so let's come in here to",
    "start": "2377930",
    "end": "2382480"
  },
  {
    "text": "this directory docker compose up we're",
    "start": "2383590",
    "end": "2395120"
  },
  {
    "text": "launching our server on localhost 5,000 and HTTP 5,000 1 our API is on four",
    "start": "2395120",
    "end": "2402410"
  },
  {
    "text": "thousand and four thousand one that's interesting let's go to localhost 5000",
    "start": "2402410",
    "end": "2411440"
  },
  {
    "text": "and we did get that redirection but we got a certificate fail why did we get",
    "start": "2411440",
    "end": "2419000"
  },
  {
    "text": "that certificate fail let's dig in here to view that certificate",
    "start": "2419000",
    "end": "2425349"
  },
  {
    "text": "well that development certificate thumbprint is edie III D 9 e 9 fe now",
    "start": "2426010",
    "end": "2439670"
  },
  {
    "text": "our development certificate is different this is for localhost and it's valid but",
    "start": "2439670",
    "end": "2448340"
  },
  {
    "text": "I don't pre trust this thumbprint I pre trust my development certificate",
    "start": "2448340",
    "end": "2454550"
  },
  {
    "text": "thumbprint this is Jerry jumping in the middle well let's not use that",
    "start": "2454550",
    "end": "2462920"
  },
  {
    "text": "development certificate let's instead let me clear that data just to make sure",
    "start": "2462920",
    "end": "2469910"
  },
  {
    "text": "that that is gone docker composed down",
    "start": "2469910",
    "end": "2478839"
  },
  {
    "text": "let's look instead at this so I start",
    "start": "2480040",
    "end": "2488510"
  },
  {
    "text": "out by getting my local development certificate and I'm going to use that same dotnet dev certs program to export",
    "start": "2488510",
    "end": "2495650"
  },
  {
    "text": "my certificate to localhost pfx and i need to set a password well why do I",
    "start": "2495650",
    "end": "2501710"
  },
  {
    "text": "need to set a password asp.net is open source so let's go look at the source to asp.net here",
    "start": "2501710",
    "end": "2508780"
  },
  {
    "text": "when I go grab that URL here's where it",
    "start": "2521259",
    "end": "2529459"
  },
  {
    "text": "goes and looks for it and it passes in password dot has value and on the other",
    "start": "2529459",
    "end": "2534529"
  },
  {
    "text": "side to password dot has value is where it takes in the include private key so",
    "start": "2534529",
    "end": "2542029"
  },
  {
    "text": "if I pass in a password it will export the private key and if I don't pass in a",
    "start": "2542029",
    "end": "2548660"
  },
  {
    "text": "password it will not export the private key which means the server can't sign requests why do I need a password",
    "start": "2548660",
    "end": "2556809"
  },
  {
    "text": "because they were lazy or were they security conscious you know either way",
    "start": "2556809",
    "end": "2563410"
  },
  {
    "text": "fine I need to set a password so I get",
    "start": "2563410",
    "end": "2568849"
  },
  {
    "text": "that localhost pfx and I'm just gonna set it inside this directory here's our",
    "start": "2568849",
    "end": "2576459"
  },
  {
    "text": "directory and I have I just put it right",
    "start": "2576459",
    "end": "2583999"
  },
  {
    "text": "here for convenience my localhost pfx I'm not going to check this in because it's the certificate that I trust but I",
    "start": "2583999",
    "end": "2591319"
  },
  {
    "text": "now have this certificate so inside of our docker file let's go",
    "start": "2591319",
    "end": "2596959"
  },
  {
    "text": "copy that certificate into place in our",
    "start": "2596959",
    "end": "2604599"
  },
  {
    "text": "running container now it has a certificate well kind of it has a",
    "start": "2604719",
    "end": "2610579"
  },
  {
    "text": "certificate but the certificate has a password and the development certificate",
    "start": "2610579",
    "end": "2615849"
  },
  {
    "text": "doesn't so I need to do some open SSL magic to convert it to a PEM and a key",
    "start": "2615849",
    "end": "2622579"
  },
  {
    "text": "convert it back into a pfx very specifically set a blank password here and now I have localhost no past pfx it",
    "start": "2622579",
    "end": "2631459"
  },
  {
    "text": "is my local trusted certificate with the private key inside of it but without a",
    "start": "2631459",
    "end": "2638329"
  },
  {
    "text": "password that I'm just going to copy into that magic directory where",
    "start": "2638329",
    "end": "2644679"
  },
  {
    "text": "kestrels gonna look for it that is great for the sake of time let's skip that",
    "start": "2644679",
    "end": "2651169"
  },
  {
    "text": "skip running that demo and dig straight into this next one so I've got that",
    "start": "2651169",
    "end": "2659709"
  },
  {
    "text": "certificate in place but as I call in to the API I noticed that that certificate",
    "start": "2659709",
    "end": "2666169"
  },
  {
    "text": "isn't trusted so I'm still not it's trusted by my local machine but it's not",
    "start": "2666169",
    "end": "2672949"
  },
  {
    "text": "trusted by the web server so I when I call the API the API still fails so",
    "start": "2672949",
    "end": "2679849"
  },
  {
    "text": "let's do a little bit more magic I'm going to convert it in to PIM and a key",
    "start": "2679849",
    "end": "2685099"
  },
  {
    "text": "and then I'm going to convert it back into a pfx with no password again I'm",
    "start": "2685099",
    "end": "2691159"
  },
  {
    "text": "going to copy that local host knoweth no pass dot pfx into",
    "start": "2691159",
    "end": "2698119"
  },
  {
    "text": "the proper spot but because linux generally uses PIM and key I'm going to copy that PIM and key into the right",
    "start": "2698119",
    "end": "2705079"
  },
  {
    "text": "spot and then ultimately run the trust the certificate piece appropriate to my",
    "start": "2705079",
    "end": "2711829"
  },
  {
    "text": "Linux distribution and in this case we're using Alpine and so alpine uses",
    "start": "2711829",
    "end": "2717829"
  },
  {
    "text": "certificates this way so I'm going to do this all in one step so it'll be one",
    "start": "2717829",
    "end": "2722869"
  },
  {
    "text": "layer I will apk update add the CA certificates remove that apk cache",
    "start": "2722869",
    "end": "2730749"
  },
  {
    "text": "update the CA certificate so that trusts the certificate in the certificate store I'll just go list the directory to",
    "start": "2730749",
    "end": "2738199"
  },
  {
    "text": "validate that that worked correctly and then I'll echo that it did ultimately",
    "start": "2738199",
    "end": "2743659"
  },
  {
    "text": "then firing up the thing so let's go in there to step five and let's go run that",
    "start": "2743659",
    "end": "2750049"
  },
  {
    "text": "one docker compose up it starts",
    "start": "2750049",
    "end": "2759980"
  },
  {
    "text": "that starts with the development certificate that's already trusted on my machine and so I'm gonna go to localhost",
    "start": "2759980",
    "end": "2768850"
  },
  {
    "text": "5000 and now I'll go into the hack and",
    "start": "2768850",
    "end": "2779000"
  },
  {
    "text": "the hack just say that I've got that FD zero eight one five certificate that's the certificate loaded I'm going to go",
    "start": "2779000",
    "end": "2785780"
  },
  {
    "text": "make an API call and the API call is going to fail well that development certificate is",
    "start": "2785780",
    "end": "2792800"
  },
  {
    "text": "very specifically bound to the domain localhost and this is making a call out",
    "start": "2792800",
    "end": "2801410"
  },
  {
    "text": "to HTTP API colon 4001 not localhost so",
    "start": "2801410",
    "end": "2809420"
  },
  {
    "text": "that's why that trust chain failed it's still the development certificate I've installed it in both places but I'm",
    "start": "2809420",
    "end": "2815869"
  },
  {
    "text": "using a different URL well now why did it fail here because the docker host",
    "start": "2815869",
    "end": "2823760"
  },
  {
    "text": "that I'm using is not actually on localhost it's on mini cube so I got a name fail here - so that's certificate",
    "start": "2823760",
    "end": "2835010"
  },
  {
    "text": "we can go look at that certificate it's",
    "start": "2835010",
    "end": "2844340"
  },
  {
    "text": "issued to local host I have the right thumbprint but the domain didn't match",
    "start": "2844340",
    "end": "2851780"
  },
  {
    "text": "and therefore I get this remote name mismatch okay let's clean that one out",
    "start": "2851780",
    "end": "2863770"
  },
  {
    "text": "docker composed down okay so for step six I'd like to do some open SSL magic",
    "start": "2865560",
    "end": "2873570"
  },
  {
    "text": "I'd like to you know go grab that certificate and transform it into all the things I'm going to create a",
    "start": "2873570",
    "end": "2880200"
  },
  {
    "text": "self-signed certificate but it's going to include mini cube and it's going to include API and you know maybe I can do",
    "start": "2880200",
    "end": "2887460"
  },
  {
    "text": "this really cool thing where I have a docker container that actually generates the root certificate and I'll map a",
    "start": "2887460",
    "end": "2892650"
  },
  {
    "text": "volume so that then maybe it'll just show up magically on my drive and that you ever get most of the way through an",
    "start": "2892650",
    "end": "2899460"
  },
  {
    "text": "engineering problem and realized that that was a really really dumb idea and",
    "start": "2899460",
    "end": "2906000"
  },
  {
    "text": "that was just overly complicated yeah all of those open SSL commands are just",
    "start": "2906000",
    "end": "2911820"
  },
  {
    "text": "scary so you know open SSL is wonderful and I love it but I reach for this all",
    "start": "2911820",
    "end": "2920820"
  },
  {
    "text": "the time I can never remember all those parameters the most common open SSL commands as I type open SSL commands it",
    "start": "2920820",
    "end": "2927930"
  },
  {
    "text": "is the first result on Google I'm not sure if it's because I just kept clicking it but it's wonderful here's",
    "start": "2927930",
    "end": "2934260"
  },
  {
    "text": "how to generate a CSR here's how to convert a thing to this thing here's how",
    "start": "2934260",
    "end": "2939390"
  },
  {
    "text": "to check to see if it worked here's how to convert it into two different formats all of that stuff in the previous docker files stick it in",
    "start": "2939390",
    "end": "2948270"
  },
  {
    "text": "place it is really cool so open SSL is interesting but that open SSL volume",
    "start": "2948270",
    "end": "2954090"
  },
  {
    "text": "mapping solution was just too hard so",
    "start": "2954090",
    "end": "2961170"
  },
  {
    "text": "let's do something different well there's this really cool program called",
    "start": "2961170",
    "end": "2967700"
  },
  {
    "text": "make cert Mik cert an open source program created by one of the engineers",
    "start": "2967700",
    "end": "2975780"
  },
  {
    "text": "at Google who wanted to do exactly this and so I download Mik cert using",
    "start": "2975780",
    "end": "2981270"
  },
  {
    "text": "whatever means that I need to I can grab it through homebrew or I can go grab it",
    "start": "2981270",
    "end": "2990570"
  },
  {
    "text": "in Linux from Linux brew after I've installed NSS tools or whatever I need",
    "start": "2990570",
    "end": "2996000"
  },
  {
    "text": "to I can grab a Windows binary from chocolatey or I can just flip over here",
    "start": "2996000",
    "end": "3001829"
  },
  {
    "text": "to the releases tab and go just download one so I'll just go download that Exe",
    "start": "3001829",
    "end": "3008369"
  },
  {
    "text": "and then it is just cake I start off by saying mixer install and that will",
    "start": "3008369",
    "end": "3016589"
  },
  {
    "text": "create my root certificate key and also the root certificate and I'll use that",
    "start": "3016589",
    "end": "3022500"
  },
  {
    "text": "to sign all of the other certificates now I have a trust chain that kind of more represents what I'll see in",
    "start": "3022500",
    "end": "3028319"
  },
  {
    "text": "production then I can run a second command mixed cert and just pass it a",
    "start": "3028319",
    "end": "3033450"
  },
  {
    "text": "list of domains and IP addresses all of those open SSL commands just disappear",
    "start": "3033450",
    "end": "3039059"
  },
  {
    "text": "so all of that complexity is gone and I now have a certificate that matches",
    "start": "3039059",
    "end": "3045390"
  },
  {
    "text": "exactly what I want it to be okay so I've downloaded make cert right",
    "start": "3045390",
    "end": "3058020"
  },
  {
    "text": "here I've run it - - install or -",
    "start": "3058020",
    "end": "3063780"
  },
  {
    "text": "install rather and it spit out my root CA and root CA - PEM or def key into",
    "start": "3063780",
    "end": "3070559"
  },
  {
    "text": "this user app local data folder now for",
    "start": "3070559",
    "end": "3077730"
  },
  {
    "text": "convenience I'm gonna copy it into my web directory just so I don't have to go reach for it in that local app data",
    "start": "3077730",
    "end": "3084900"
  },
  {
    "text": "folder I don't have the local app data environment variable set inside of",
    "start": "3084900",
    "end": "3090900"
  },
  {
    "text": "docker as I'm doing things so yeah that was annoying to copy through but let's",
    "start": "3090900",
    "end": "3096720"
  },
  {
    "text": "pop here into this docker file so it",
    "start": "3096720",
    "end": "3102359"
  },
  {
    "text": "turns out that getting mixer on Linux on Alpine is a little bit weird so it's",
    "start": "3102359",
    "end": "3109799"
  },
  {
    "text": "open source I'm just gonna go download it from github so I have this golang alpine container I'm going to call this",
    "start": "3109799",
    "end": "3118349"
  },
  {
    "text": "container cert I'll go grab NSS tools I need that to be",
    "start": "3118349",
    "end": "3123480"
  },
  {
    "text": "able to get mixer to run I'll go grab open SSL just cuz you know I'm here go",
    "start": "3123480",
    "end": "3129930"
  },
  {
    "text": "build that mixer from source and I now have mixer on /bin so now that I have mixed cert let",
    "start": "3129930",
    "end": "3138580"
  },
  {
    "text": "me go into that root directory and I will copy my local machines key and PEM",
    "start": "3138580",
    "end": "3144700"
  },
  {
    "text": "into place and those become the trusted root certificates for this app and then",
    "start": "3144700",
    "end": "3152860"
  },
  {
    "text": "I'm gonna say mixer install and mix cert key file I'm gonna output this as HTTP -",
    "start": "3152860",
    "end": "3159610"
  },
  {
    "text": "web key HTTP web PEM so there's my key and my certificate I'm gonna then just",
    "start": "3159610",
    "end": "3167440"
  },
  {
    "text": "list out all of the things that I need it to be so I'm gonna say mini cube I'll also grab the IP address of mini cube",
    "start": "3167440",
    "end": "3175210"
  },
  {
    "text": "I'll grab localhost I'll grab 127.0.0.1 I'll grab web because that's how docker",
    "start": "3175210",
    "end": "3181930"
  },
  {
    "text": "compose is gonna launch my app and ultimately then it'll spit out this key",
    "start": "3181930",
    "end": "3186970"
  },
  {
    "text": "and PEM a little open SSL magic that I went crap copied from the open SSL",
    "start": "3186970",
    "end": "3194200"
  },
  {
    "text": "commands thing and set it in place so that I can get a PF X file well why",
    "start": "3194200",
    "end": "3200260"
  },
  {
    "text": "can't I just make a PF X file here I love this part generating a p12 PKS file",
    "start": "3200260",
    "end": "3207940"
  },
  {
    "text": "also known as a PF X file containing certificate and key for legacy applications score brand-new platform",
    "start": "3207940",
    "end": "3218140"
  },
  {
    "text": "built on legacy content oops okay so I'm",
    "start": "3218140",
    "end": "3223450"
  },
  {
    "text": "gonna output it as PEM and key and then ultimately convert it into pfx I'm doing",
    "start": "3223450",
    "end": "3232840"
  },
  {
    "text": "my build in the normal way it's still a debug build because this is not for production this is for development it's",
    "start": "3232840",
    "end": "3239020"
  },
  {
    "text": "also gonna copy in that route CA - keep em my private key for my certificate",
    "start": "3239020",
    "end": "3244660"
  },
  {
    "text": "authority I don't want that to leak it's my local one but still that's not great practice but we're not gonna use",
    "start": "3244660",
    "end": "3251560"
  },
  {
    "text": "this container for anything interesting we're gonna throw this away in a minute our goal goal is to do the build here so",
    "start": "3251560",
    "end": "3259810"
  },
  {
    "text": "it'll just dump out this debug build into the dist folder and I'll copy that from the dist folder here into my app",
    "start": "3259810",
    "end": "3267290"
  },
  {
    "text": "folder like I did before setting the environment variables but I'm gonna do some other things too",
    "start": "3267290",
    "end": "3273290"
  },
  {
    "text": "I'm gonna go reach into the cert container and I'm going to grab from",
    "start": "3273290",
    "end": "3279230"
  },
  {
    "text": "that cert container that mixed search bin and I'm also going to grab the root",
    "start": "3279230",
    "end": "3284510"
  },
  {
    "text": "CA dot PEM the public key not the private key and I'm gonna go grab that",
    "start": "3284510",
    "end": "3290710"
  },
  {
    "text": "localhost - web pfx and set it in my app directory I could set it anywhere",
    "start": "3290710",
    "end": "3296030"
  },
  {
    "text": "because that's the one that will actually run with my website but putting it with the rest of my code seemed to",
    "start": "3296030",
    "end": "3302330"
  },
  {
    "text": "make sense in this case I'm going to set some environment variables which is not that unlike the config I would want to",
    "start": "3302330",
    "end": "3309200"
  },
  {
    "text": "set in the app settings dot JSON but because I don't want to change my",
    "start": "3309200",
    "end": "3314360"
  },
  {
    "text": "application at all for production use I'll just set it as environment variables here I'm gonna go grab NSS",
    "start": "3314360",
    "end": "3321470"
  },
  {
    "text": "tools to make mixer twerk mixer install",
    "start": "3321470",
    "end": "3326540"
  },
  {
    "text": "which will then trust this root certificate that I copied into place I don't have the key but I'm not issuing",
    "start": "3326540",
    "end": "3332870"
  },
  {
    "text": "certificates here so that's okay then I'm gonna delete NSS tools I don't need",
    "start": "3332870",
    "end": "3337910"
  },
  {
    "text": "that in my production thing and I'm doing this all as one layer so it's not like you know I'm adding it and then",
    "start": "3337910",
    "end": "3343580"
  },
  {
    "text": "removing it in different layers and then I'm going to remove that make search bin as well so I've kind of done all the",
    "start": "3343580",
    "end": "3350810"
  },
  {
    "text": "things I've trusted my certificate and put it in the spot where it's trusted and now I also have my localhost my HTTP",
    "start": "3350810",
    "end": "3360350"
  },
  {
    "text": "- web pfx in my app folder so that as I start up now I have this trusted chain",
    "start": "3360350",
    "end": "3368380"
  },
  {
    "text": "with the correct name so I have a similar docker file in the API project",
    "start": "3368380",
    "end": "3375620"
  },
  {
    "text": "that does exactly the same thing with the exception of it's going to have a different name here it's going to have",
    "start": "3375620",
    "end": "3381200"
  },
  {
    "text": "the API name instead of the web name but otherwise those are exactly the same",
    "start": "3381200",
    "end": "3388750"
  },
  {
    "text": "compose up my application is running",
    "start": "3392400",
    "end": "3402470"
  },
  {
    "text": "HTTP mini cube 5000 I didn't clear the",
    "start": "3402650",
    "end": "3414210"
  },
  {
    "text": "thing let me I did not change my directory let's do that again",
    "start": "3414210",
    "end": "3422730"
  },
  {
    "text": "I didn't docker compose down thank you so check out the wrong demo look it's",
    "start": "3422730",
    "end": "3431130"
  },
  {
    "text": "still broken CD 7 ok docker compose up",
    "start": "3431130",
    "end": "3441809"
  },
  {
    "text": "and I've built this docker file previously as well okay so my",
    "start": "3441809",
    "end": "3452369"
  },
  {
    "text": "certificate my website is running HTTP colon slash slash mini cube 5000 I",
    "start": "3452369",
    "end": "3461059"
  },
  {
    "text": "automatically get redirected to HTTPS let's go look at that certificate it's",
    "start": "3461059",
    "end": "3472529"
  },
  {
    "text": "issued to I have no idea what that is and that's fine because here in the",
    "start": "3472529",
    "end": "3479420"
  },
  {
    "text": "subject alternate names is all of those things that I specified mini cube local",
    "start": "3480289",
    "end": "3485369"
  },
  {
    "text": "host web now it's interesting this thumbprint isn't the thumbprint of the",
    "start": "3485369",
    "end": "3493890"
  },
  {
    "text": "certificate that I trusted you know here's that certificate that I trusted",
    "start": "3493890",
    "end": "3500089"
  },
  {
    "text": "here's my mixer certificate and it's thumbprint is BA 3",
    "start": "3505789",
    "end": "3513010"
  },
  {
    "text": "9 D and this web certificate is e 2 e 8 F so I should get a fail here right well",
    "start": "3513010",
    "end": "3522970"
  },
  {
    "text": "yeah I'm not trusting this certificate rather this certificate was signed by",
    "start": "3522970",
    "end": "3528720"
  },
  {
    "text": "that certificate and that certificate is",
    "start": "3528720",
    "end": "3535080"
  },
  {
    "text": "BA 390 that's the one that I've pre trusted and so I get a green lock well",
    "start": "3535500",
    "end": "3543940"
  },
  {
    "text": "let's go look at this again let's go hit that we see our 5,000 won and 5,000",
    "start": "3543940",
    "end": "3549220"
  },
  {
    "text": "let's go try and get the details of that certificate no it's not a dev cert but",
    "start": "3549220",
    "end": "3554560"
  },
  {
    "text": "here's that certificate e 2 e 8 F 3 now",
    "start": "3554560",
    "end": "3561250"
  },
  {
    "text": "the magic sauce can I call an API from another mini from another micro service",
    "start": "3561250",
    "end": "3568210"
  },
  {
    "text": "and have that trusted inside of Dockers local network yes I can I created that",
    "start": "3568210",
    "end": "3577870"
  },
  {
    "text": "API certificate there and it is trusted as well now it's not the same",
    "start": "3577870",
    "end": "3583570"
  },
  {
    "text": "certificate this is F 4 3 7 9 2 but that certificate is trusted by the same root",
    "start": "3583570",
    "end": "3590140"
  },
  {
    "text": "certificate I've trusted this root certificate of my local machine I've trusted it in each of my containers and",
    "start": "3590140",
    "end": "3595540"
  },
  {
    "text": "so I can make trusted connections to all of the places that I need to this is",
    "start": "3595540",
    "end": "3602260"
  },
  {
    "text": "really cool I can use HTTPS inside of docker and still start to experience the",
    "start": "3602260",
    "end": "3608650"
  },
  {
    "text": "way my website should behave in production in production yes use let's",
    "start": "3608650",
    "end": "3614170"
  },
  {
    "text": "encrypt because we can't use it Inlet because we can't use let's encrypt in",
    "start": "3614170",
    "end": "3619200"
  },
  {
    "text": "development let's instead use this mechanism for being able to sign",
    "start": "3619200",
    "end": "3624910"
  },
  {
    "text": "interesting things we walk through each of these demos where we did interesting things to try and build up the",
    "start": "3624910",
    "end": "3630340"
  },
  {
    "text": "development certificate we did a whole kind of interesting thing here on step 6",
    "start": "3630340",
    "end": "3636250"
  },
  {
    "text": "and ultimately abandoned it but mixed cert is really cool at doing interesting things to be able to",
    "start": "3636250",
    "end": "3643060"
  },
  {
    "text": "use development certificate straightaway as you pull these details these slides",
    "start": "3643060",
    "end": "3648730"
  },
  {
    "text": "from Roberta org here's some other reference material if you want to dig in deeper and that's what I've got thank",
    "start": "3648730",
    "end": "3656350"
  },
  {
    "text": "you for coming what shins yes what if",
    "start": "3656350",
    "end": "3682180"
  },
  {
    "text": "the API was only available inside the network it would still work just fine",
    "start": "3682180",
    "end": "3687310"
  },
  {
    "text": "because I have that trust chain between them I can make those requests I just happen to expose the API publicly just",
    "start": "3687310",
    "end": "3693970"
  },
  {
    "text": "so that I could poke out it too but if I flipped over to Cooper Nettie's and made it a cluster IP rather than a publicly",
    "start": "3693970",
    "end": "3700630"
  },
  {
    "text": "accessible API that would be just fine as well thanks for coming",
    "start": "3700630",
    "end": "3715830"
  }
]