[
  {
    "start": "0",
    "end": "189000"
  },
  {
    "text": "right morning everyone how we all doing you ready for the second day of NBC",
    "start": "7170",
    "end": "14879"
  },
  {
    "text": "right my name is Sandeep and today we're gonna have a look at building real-time api's",
    "start": "14879",
    "end": "21160"
  },
  {
    "text": "with the graph QL before we have a look at what we're gonna cover today and the agenda so one a quick couple of",
    "start": "21160",
    "end": "27130"
  },
  {
    "text": "questions just kind of get a gauge of where we are in the room has anyone not heard of Bradfield before coming to this",
    "start": "27130",
    "end": "33250"
  },
  {
    "text": "conference one it's pretty good too bad",
    "start": "33250",
    "end": "39750"
  },
  {
    "text": "okay so is anyone using it or how to play around with it anyone use it in production wow that's",
    "start": "39750",
    "end": "49000"
  },
  {
    "text": "pretty good it's impressive usually it's not happen so let's have a look at the agenda so",
    "start": "49000",
    "end": "56609"
  },
  {
    "text": "this talk is essentially split into two so the first half we can have a look at",
    "start": "56609",
    "end": "61780"
  },
  {
    "text": "what graph QL is what problems it solves how to build a graph QL server and then",
    "start": "61780",
    "end": "67390"
  },
  {
    "text": "look at some of the core concepts and the second half will kind of look at the real-time aspect of graph QL and how",
    "start": "67390",
    "end": "74230"
  },
  {
    "text": "subscriptions fits into the landscape when you're building these real-time API guys so let's start with the ultimate",
    "start": "74230",
    "end": "80740"
  },
  {
    "text": "question what is graph QL well essentially graph QL is call is a query",
    "start": "80740",
    "end": "86200"
  },
  {
    "text": "language for your API it gets confused a lot with being a database language",
    "start": "86200",
    "end": "91720"
  },
  {
    "text": "because the QL and people think it's like sequels but it's actually not it's actually query language for api's so",
    "start": "91720",
    "end": "97060"
  },
  {
    "text": "what do we mean by a query language we're api's well here's an example so",
    "start": "97060",
    "end": "102730"
  },
  {
    "text": "with the buzzkill you essentially describe your data which is basically your API to me and you do this via the",
    "start": "102730",
    "end": "110710"
  },
  {
    "text": "type system that's built into graph girl and then you can query graph QL to ask for a specific set of data so in the",
    "start": "110710",
    "end": "117520"
  },
  {
    "text": "middle we have a query and we're going for some patient information its name and there's an identifier with some",
    "start": "117520",
    "end": "122530"
  },
  {
    "text": "arbitrary string and at the right is the response and the most important thing about this example ultimately is is that",
    "start": "122530",
    "end": "129520"
  },
  {
    "text": "the query matches the same shape as a response and this all happens in one single network request from client to",
    "start": "129520",
    "end": "135219"
  },
  {
    "text": "server and that's essentially what graph QL is its call so graph QL is built on a spec and it's",
    "start": "135219",
    "end": "142420"
  },
  {
    "text": "a standard so it's not limited to JavaScript the demos that I'm going to do are in JavaScript but there's sangria",
    "start": "142420",
    "end": "148840"
  },
  {
    "text": "which is a Scala framework which is a very popular one which with one of the first actual implementations there's one",
    "start": "148840",
    "end": "154480"
  },
  {
    "text": "in net there's one in jabbers willing pretty much every language we can think of a graph girls hierarchical in the",
    "start": "154480",
    "end": "160030"
  },
  {
    "text": "sense that you have an object graph and the nested associations with them its",
    "start": "160030",
    "end": "165580"
  },
  {
    "text": "client driven in the sense the client dictates the shape of the query and",
    "start": "165580",
    "end": "170890"
  },
  {
    "text": "basically that's what they get back in their response so they're kind it's kind of like client driven development a lot of the stuff is moved from the server",
    "start": "170890",
    "end": "176950"
  },
  {
    "text": "down to the claim and graph girl comes with a type system so a strongly typed and each graph QL server has its own",
    "start": "176950",
    "end": "183790"
  },
  {
    "text": "specific application specific type system so why does graph QL exist it's a",
    "start": "183790",
    "end": "192250"
  },
  {
    "start": "189000",
    "end": "263000"
  },
  {
    "text": "good question because there's various other technologies when you build an API is this all there is rest there's",
    "start": "192250",
    "end": "198819"
  },
  {
    "text": "multiple different ones so if we think about one we're building api's today and",
    "start": "198819",
    "end": "205239"
  },
  {
    "text": "we think about all the challenges we face because now there's a lot of mobile devices with multiple platforms and",
    "start": "205239",
    "end": "211900"
  },
  {
    "text": "everything needs to be efficient and work on lower bandwidth networks ultimately so we have things like",
    "start": "211900",
    "end": "216970"
  },
  {
    "text": "efficiency is along the lines of how much data we actually go back how many",
    "start": "216970",
    "end": "222160"
  },
  {
    "text": "requests it take to get out of data then we've got things around prick'd ability do we expect the data back in the same",
    "start": "222160",
    "end": "229299"
  },
  {
    "text": "shape is it what we actually asked for then we are versioning and if you think about versioning there's various",
    "start": "229299",
    "end": "235450"
  },
  {
    "text": "different ways when do versioning ultimately if you can need to stick to evolution but you'll see stuff in the",
    "start": "235450",
    "end": "240609"
  },
  {
    "text": "headers and you'll see stuff against the URI there's caching how'd we do caching what",
    "start": "240609",
    "end": "245980"
  },
  {
    "text": "is it using the network layer do we have network caching you all or we using the application server to do our caching for",
    "start": "245980",
    "end": "251470"
  },
  {
    "text": "us and then we've got things that aren't secured to link documentation and various other things now you can see this quite a big list",
    "start": "251470",
    "end": "258039"
  },
  {
    "text": "and this is not really all of it and these are the kinds of things that we have to think about when we're building api's so let's have a look at an example",
    "start": "258039",
    "end": "264580"
  },
  {
    "start": "263000",
    "end": "574000"
  },
  {
    "text": "do we have any Game of Thrones fans who've I've got to be honest I've",
    "start": "264580",
    "end": "270280"
  },
  {
    "text": "already just started binge watching a so you probably all ahead of me on this one but this is an example of a screen where we have",
    "start": "270280",
    "end": "277870"
  },
  {
    "text": "three components so in the middle we have like a character's love information so it's Jon Snow and it's got this",
    "start": "277870",
    "end": "283870"
  },
  {
    "text": "gender and this culture and there's born and then we have and allegiances and then we have the books that they've",
    "start": "283870",
    "end": "289330"
  },
  {
    "text": "actually appeared in so it seems to have all three components here so interestingly enough does anyone know",
    "start": "289330",
    "end": "295810"
  },
  {
    "text": "about this API I have ice ice ax fire it's basically a great sir it's a REST",
    "start": "295810",
    "end": "303460"
  },
  {
    "text": "API that tells you everything about Game of Thrones so there's three end points",
    "start": "303460",
    "end": "308860"
  },
  {
    "text": "there's books characters and houses so if we think back to our example for our",
    "start": "308860",
    "end": "316240"
  },
  {
    "text": "character information and we'll use John snows as our character so here's our URL",
    "start": "316240",
    "end": "321610"
  },
  {
    "text": "and this is a day that's actually returned if we have a look at the payload in itself there's a lot of data",
    "start": "321610",
    "end": "327820"
  },
  {
    "text": "there and if you think back to our screen we don't really have that much data so this is this is the concept that",
    "start": "327820",
    "end": "334150"
  },
  {
    "text": "we call over fetching and it's when we're getting too much data from the server and we only this small part of it",
    "start": "334150",
    "end": "339670"
  },
  {
    "text": "and this is not really good if you want to build efficient api's because a lot this stuff will just got waste and it's",
    "start": "339670",
    "end": "346210"
  },
  {
    "text": "gonna cost people's bandwidth either way so there's other characters but interestingly enough we have the books",
    "start": "346210",
    "end": "354520"
  },
  {
    "text": "that appear in and the allegiances so if we have a look the allegiance is is actually another URL that we have to go",
    "start": "354520",
    "end": "362200"
  },
  {
    "text": "to gets information we don't actually know what this information actually looks like we know that this is how we get to it but we don't have an example",
    "start": "362200",
    "end": "368200"
  },
  {
    "text": "said it to contain the book's title author and so on and this is a concept that we call under fetching it's where",
    "start": "368200",
    "end": "375190"
  },
  {
    "text": "we don't get enough information that we need and then we have to make subsequent requests to the server to go back now",
    "start": "375190",
    "end": "380950"
  },
  {
    "text": "this is very common if you use in the hypermedia constraint of rest the bear you get implementing that the more this",
    "start": "380950",
    "end": "387160"
  },
  {
    "text": "happens because you deal with state transitions more often so if we think back we've got three potentially calls",
    "start": "387160",
    "end": "393970"
  },
  {
    "text": "that we've got to make for our data and we've got books and then we've got the houses so that's not exactly the best",
    "start": "393970",
    "end": "401380"
  },
  {
    "text": "kind of user experience it could it's gotta go over make multiple calls so",
    "start": "401380",
    "end": "407159"
  },
  {
    "text": "there's ways to solve this so if we think about the URL we could do an",
    "start": "407159",
    "end": "412809"
  },
  {
    "text": "includes so depending on which framework you use or if you roll your own or you have me to concentrate you can have",
    "start": "412809",
    "end": "418479"
  },
  {
    "text": "something called data inclusion or I could say okay give me the books as well as the leader says now that that kind of",
    "start": "418479",
    "end": "430539"
  },
  {
    "text": "my spelling is terrible but that kind of gets around this problem but at the same point you still have problem of over",
    "start": "430539",
    "end": "438429"
  },
  {
    "text": "fetching and you can add some you can add fields in you can have spatial field sets which allows you to do this so there's another Mexican so you can use",
    "start": "438429",
    "end": "444550"
  },
  {
    "text": "but there's no real standard there's various ways you can do this how this siren there's probably a few other ones",
    "start": "444550",
    "end": "450969"
  },
  {
    "text": "if you've made a REST API before with hypermedia constraint implemented so it's kind of like it's a bit difficult",
    "start": "450969",
    "end": "457800"
  },
  {
    "text": "so if we think about this and how we could actually change it and how is how would this work from a graph girl's",
    "start": "457800",
    "end": "463899"
  },
  {
    "text": "perspective well actually if I say API there's actually a graphically old version so this is not graph QL this is",
    "start": "463899",
    "end": "471789"
  },
  {
    "text": "called graphical so this is an ID that sits next to your endpoint and it comes",
    "start": "471789",
    "end": "477249"
  },
  {
    "text": "with all implementations and it's basically allows to run queries against your graph to your server and on the",
    "start": "477249",
    "end": "483039"
  },
  {
    "text": "right we have some documentation which is basically all the types that arm",
    "start": "483039",
    "end": "489189"
  },
  {
    "text": "system which we kind of briefly mentioned at the start and we have this is how we can query stuff so if we now",
    "start": "489189",
    "end": "496269"
  },
  {
    "text": "think back to how we wanted to get our data character five eight threes John",
    "start": "496269",
    "end": "501309"
  },
  {
    "text": "snows ID actually makes a little bit bigger and we can see we can actually have these nested objects on the left",
    "start": "501309",
    "end": "507369"
  },
  {
    "text": "for their leaders connection the book connection and we can get all this information in one request but secondly",
    "start": "507369",
    "end": "513068"
  },
  {
    "text": "we can get only the information that we need so for our supreme you don't have to over fetch and we don't under further",
    "start": "513069",
    "end": "518229"
  },
  {
    "text": "so this is a good example of something to api's exist the both public there",
    "start": "518229",
    "end": "524229"
  },
  {
    "text": "open source you can we can view in your own time if you're interested so yes",
    "start": "524229",
    "end": "529480"
  },
  {
    "text": "this is kind of leaked highlights the fact of what graphic yoli's so if I run this query just want to point out",
    "start": "529480",
    "end": "536319"
  },
  {
    "text": "something interesting that happens of the network just increase this as well is it everyone see the bottom was",
    "start": "536319",
    "end": "549149"
  },
  {
    "text": "it bit too small I can make it bigger so if you look at the bottom this actually our graphical works just a little bit of",
    "start": "549149",
    "end": "555540"
  },
  {
    "text": "context is that actually posts to your graph to your server so this is side by side and can see that it is in the",
    "start": "555540",
    "end": "561449"
  },
  {
    "text": "actual body in the pair Lord we have the query which is what we're interested in and then we have some variables",
    "start": "561449",
    "end": "566790"
  },
  {
    "text": "I just want to give you that just for a little bit of context cuz we're gonna see that more in action later",
    "start": "566790",
    "end": "572569"
  },
  {
    "text": "so now so graph QL solves ultimately the",
    "start": "572569",
    "end": "578069"
  },
  {
    "start": "574000",
    "end": "626000"
  },
  {
    "text": "efficiency issue that we have it helps a lot with them so you can think of Brockville as this translation layer",
    "start": "578069",
    "end": "583680"
  },
  {
    "text": "that sits in front of your business logic or your services behind and it's",
    "start": "583680",
    "end": "588689"
  },
  {
    "text": "in single point of truth so you don't have multiple endpoints and if you're an extended you can add objects to your",
    "start": "588689",
    "end": "594389"
  },
  {
    "text": "graph and that's how you go forward with it and so each the difference now that each channels so we've got mobile",
    "start": "594389",
    "end": "600839"
  },
  {
    "text": "desktop they can get they dated their need in their shape and however they feel fit there's no custom endpoint I",
    "start": "600839",
    "end": "606930"
  },
  {
    "text": "don't have to include anything on the queries there's nothing I have to do extra the developer and now as you can see you can actually solve these in rest",
    "start": "606930",
    "end": "613559"
  },
  {
    "text": "I'm not saying you car but the finger with graphed well it's an opinionated set of packages which does this for you",
    "start": "613559",
    "end": "619819"
  },
  {
    "text": "so it kind of wraps a lot of this logic up so if you're interested then that's one of the use cases of it so what about",
    "start": "619819",
    "end": "627509"
  },
  {
    "start": "626000",
    "end": "701000"
  },
  {
    "text": "versioning so how to talk too much about versioning in terms of gradual because graphical doesn't really it says inside",
    "start": "627509",
    "end": "635069"
  },
  {
    "text": "one of the best practices is not to version your API so what allows you to do is it allows you to run it forces you",
    "start": "635069",
    "end": "641610"
  },
  {
    "text": "to follow the evolution and what we mean by that is over time we will add new fields to our API and they will",
    "start": "641610",
    "end": "647699"
  },
  {
    "text": "deprecated old fields and then once these deprecated all fields are no longer in use we can remove them and so ultimately we're not going to break our",
    "start": "647699",
    "end": "653610"
  },
  {
    "text": "contract or our queries that people are running against the API so there's a",
    "start": "653610",
    "end": "660179"
  },
  {
    "text": "special directive this is called so this is a type and we have this deprecated directive and what this actually means",
    "start": "660179",
    "end": "665639"
  },
  {
    "text": "is is that new clients will actually see this in terms of when they query so",
    "start": "665639",
    "end": "671279"
  },
  {
    "text": "the intelligence of graphical they will actually see this but existing clients will so the power of having this",
    "start": "671279",
    "end": "676430"
  },
  {
    "text": "attribute or directory that's called is that you can monitor usage of the",
    "start": "676430",
    "end": "681629"
  },
  {
    "text": "queries so the query comes in and you can inspect the actual payload that comes in of what the query is and you",
    "start": "681629",
    "end": "687480"
  },
  {
    "text": "can say ok they keep using this deprecated fields and you know which clients using it because you know which kind is calling it so all the time it",
    "start": "687480",
    "end": "692790"
  },
  {
    "text": "comes very easy to manage and this is one of the real plus points about having something like this is kind of baked in",
    "start": "692790",
    "end": "698509"
  },
  {
    "text": "so that's what how it helps with version II so what about the tooling and developer experience because ultimately",
    "start": "698509",
    "end": "704519"
  },
  {
    "start": "701000",
    "end": "818000"
  },
  {
    "text": "as developers the developer experience is very important we don't want tools that either slow us down or make us do",
    "start": "704519",
    "end": "710279"
  },
  {
    "text": "extra work and we can achieve it with other technology in a simpler manner so graph curl is built on something called",
    "start": "710279",
    "end": "716910"
  },
  {
    "text": "introspection so if you think back to the graphical editor that we solved the ID that is built because of",
    "start": "716910",
    "end": "723540"
  },
  {
    "text": "introspection so because of introspection you can build tools and what we mean by introspection is if the dining-table developers who've heard",
    "start": "723540",
    "end": "730019"
  },
  {
    "text": "reflection it's essentially like reflection of your types and can understand the whole schema so you can query everything the whole structure",
    "start": "730019",
    "end": "736050"
  },
  {
    "text": "what operations you can do what queries easier what types out what types of the fields are the strings are the boolean",
    "start": "736050",
    "end": "741269"
  },
  {
    "text": "so on and so forth so this is really really good for building tools so I saw a graphical was built like that but you",
    "start": "741269",
    "end": "747509"
  },
  {
    "text": "also get things like autocomplete and you can validate a compile time because you know what the schema is so one of",
    "start": "747509",
    "end": "755069"
  },
  {
    "text": "the important things is code generation because you can query the schema imagine you have a you're using the c-sharp",
    "start": "755069",
    "end": "761069"
  },
  {
    "text": "implementation you could query your graphical endpoint and generate types off the back of this you can generate",
    "start": "761069",
    "end": "767009"
  },
  {
    "text": "c-sharp classes because you know all the types and what the fields are it's saying we can do with typescript so there's actually a code generation",
    "start": "767009",
    "end": "773360"
  },
  {
    "text": "package that is available it's in the resource at the end if anyone's interested I can talk you through that there's one for various different",
    "start": "773360",
    "end": "779399"
  },
  {
    "text": "languages and also we briefly saw the documentation and you get documentation",
    "start": "779399",
    "end": "784769"
  },
  {
    "text": "for free but there's a caveat to this documentation ultimately if documentation is good for developers it",
    "start": "784769",
    "end": "791040"
  },
  {
    "text": "loves to inspect the types and so on and so forth but doesn't take away the fact about proper documentation for your API",
    "start": "791040",
    "end": "796769"
  },
  {
    "text": "it's often confused too that it says it gives you this documentation which is fine but it doesn't tell you in this documentation you not going to put",
    "start": "796769",
    "end": "802410"
  },
  {
    "text": "things about rate limits and what is the usage of these APRs and explanations about how to do off my",
    "start": "802410",
    "end": "807690"
  },
  {
    "text": "authorization and authentication and so on and so forth so this is really good for developers money can add descriptions to your",
    "start": "807690",
    "end": "813450"
  },
  {
    "text": "actual types but it doesn't take away the fact that you need proper implementation so now we've got an",
    "start": "813450",
    "end": "820350"
  },
  {
    "start": "818000",
    "end": "1063000"
  },
  {
    "text": "understanding of what graph Google actually is and what kind of aims to solve then I just want to look at some",
    "start": "820350",
    "end": "827310"
  },
  {
    "text": "of the core concepts before we build actual graphic real server so I've actually broken these down into three",
    "start": "827310",
    "end": "833160"
  },
  {
    "text": "different areas so we have a type system and we have a schema and we have a query language so the type system is the way",
    "start": "833160",
    "end": "840540"
  },
  {
    "text": "we define our domain it's essentially we can define these types in this schema",
    "start": "840540",
    "end": "846000"
  },
  {
    "text": "definition language is what it's actually called and if we the first part is a type is that's how we donate and",
    "start": "846000",
    "end": "851640"
  },
  {
    "text": "then we give a name and as you can see there's various fields in this type and they all have a value in sense of their",
    "start": "851640",
    "end": "859110"
  },
  {
    "text": "fields have a type so do you have ID the special field which is essentially like your primary key and you have string and",
    "start": "859110",
    "end": "864810"
  },
  {
    "text": "then medications is one that I've put in myself and any a boolean and you can make your own scale are types as well so",
    "start": "864810",
    "end": "871290"
  },
  {
    "text": "it's not limited just to the ones that are already built in and there's various if he's in JavaScript and various",
    "start": "871290",
    "end": "877560"
  },
  {
    "text": "packages in NPM for like dates and extra one because it doesn't give you a date one at books so if our type system defines our data",
    "start": "877560",
    "end": "886260"
  },
  {
    "text": "model a schema then defines how we can query our graph as ultimately what the",
    "start": "886260",
    "end": "892020"
  },
  {
    "text": "schema is it's a specific entry point into the word that we can query and if",
    "start": "892020",
    "end": "897360"
  },
  {
    "text": "you look at the top we have a query and it says basically we have a patient and we've passed it a variable say have ID and it's an integer and it's going to",
    "start": "897360",
    "end": "903870"
  },
  {
    "text": "return type patient and then we have this schema property which says basically it has to well as 3 root",
    "start": "903870",
    "end": "910620"
  },
  {
    "text": "values but mandatory one is query so any graphical server that you build has to have a query as its root type but",
    "start": "910620",
    "end": "917550"
  },
  {
    "text": "there's other ones such as mutation subscriptions but they're optional but the actual query is mandatory so what",
    "start": "917550",
    "end": "924720"
  },
  {
    "text": "the scheme actually gives you it gives you a contract between your client and your server ultimately exposes the",
    "start": "924720",
    "end": "931290"
  },
  {
    "text": "capabilities of your API and that's essentially what a schema does so we've got a type system where we define our",
    "start": "931290",
    "end": "937200"
  },
  {
    "text": "actual structure of our Dale and how we model it and what schema I've said how can we actually query this data what we",
    "start": "937200",
    "end": "943350"
  },
  {
    "text": "actually do with API so where do you actually get any data route of this so how how does that magical piece come to",
    "start": "943350",
    "end": "948630"
  },
  {
    "text": "play so there's something called resolvers and resolvers each field on",
    "start": "948630",
    "end": "954209"
  },
  {
    "text": "one of the types has a resolver and resolve it at just basically wait and run arbitrary code has three parameters",
    "start": "954209",
    "end": "959490"
  },
  {
    "text": "there's the object which is a parent object and there's some arguments which we'll see what they're used for on the same with a context object are going to",
    "start": "959490",
    "end": "965190"
  },
  {
    "text": "end the demo a little bit more detail but ultimately this is where you actually say okay go to my database go",
    "start": "965190",
    "end": "970560"
  },
  {
    "text": "to my API go do any mapping that you want this is essentially the core of it",
    "start": "970560",
    "end": "975690"
  },
  {
    "text": "so that's how essentially graph your works you have you type and then you can resolve each type and then you have a",
    "start": "975690",
    "end": "981570"
  },
  {
    "text": "scheme which says okay this is how we can actually query in what operations that we can do so the query language as",
    "start": "981570",
    "end": "988649"
  },
  {
    "text": "a whole is the core of what graphical is so there's three operation types one is",
    "start": "988649",
    "end": "994860"
  },
  {
    "text": "queries which we've seen which we can send the query and return some data back mutations allow us to write data but all",
    "start": "994860",
    "end": "1000800"
  },
  {
    "text": "we always have to have return type when you write mutation so it reads data as well and then subscriptions is when",
    "start": "1000800",
    "end": "1006949"
  },
  {
    "text": "we're gonna see a little bit later on which allows you to build these real-time event driven systems there's",
    "start": "1006949",
    "end": "1012560"
  },
  {
    "text": "some other key features about the query language which are pretty cool you can have aliases so you can run multiple",
    "start": "1012560",
    "end": "1017570"
  },
  {
    "text": "nested queries in one query block so for example with our John Snow in the graphical we're just actually for John",
    "start": "1017570",
    "end": "1024199"
  },
  {
    "text": "Stoll but actually if we alias that and they'd search for another packed with a different ID you can run all that in one request and it comes basically in the",
    "start": "1024199",
    "end": "1030949"
  },
  {
    "text": "same chef that you asked for which is really good and this fragments and fragments will see in the demo as well",
    "start": "1030949",
    "end": "1036079"
  },
  {
    "text": "ultimately what fragments allow you to do if you have an application where you're building a bunch of components",
    "start": "1036079",
    "end": "1042048"
  },
  {
    "text": "and you'll have a lot of queries which is similar and a lot of equity to have similar fields in them like say a patient has name and you're referencing",
    "start": "1042049",
    "end": "1048199"
  },
  {
    "text": "that in many places fragments allow you to snap that bit of logic out and share it across there basically all queries so",
    "start": "1048199",
    "end": "1054440"
  },
  {
    "text": "you get sort of a duplication so it's really useful for that so now we've got",
    "start": "1054440",
    "end": "1059870"
  },
  {
    "text": "a night being like an example of the core concepts let's actually dive into building something useful so for some",
    "start": "1059870",
    "end": "1067820"
  },
  {
    "start": "1063000",
    "end": "1201000"
  },
  {
    "text": "context I'm just going to increase the font on this one but I'll",
    "start": "1067820",
    "end": "1073740"
  },
  {
    "text": "go through so the context that we're actually going to build is an electronic patient record system so we're gonna have a patient view which has some",
    "start": "1073740",
    "end": "1080370"
  },
  {
    "text": "information about the patients and some summary information and some information about the medications that they're on",
    "start": "1080370",
    "end": "1086370"
  },
  {
    "text": "and some information around their current encounter and then we're gonna have a like a list view that shows",
    "start": "1086370",
    "end": "1091799"
  },
  {
    "text": "patients on a specific ward and they see this is the database structure for it I've already pre-loaded it with some",
    "start": "1091799",
    "end": "1098190"
  },
  {
    "text": "data so let's get started so this is a structure of our application I'll make it a little bit",
    "start": "1098190",
    "end": "1105030"
  },
  {
    "text": "bigger so there's a client it's an angular client this is it's just I think it's using angular for from what",
    "start": "1105030",
    "end": "1111299"
  },
  {
    "text": "I remember and an application we have various components I'm using Apollo client which we will talk about a",
    "start": "1111299",
    "end": "1117419"
  },
  {
    "text": "clients for graphical API is a little bit shortly and then we have our server",
    "start": "1117419",
    "end": "1122700"
  },
  {
    "text": "which is basically a graphical server so this kind of structure you have like a",
    "start": "1122700",
    "end": "1128549"
  },
  {
    "text": "server file which loads and stateö api and then you have your graph QL schema which is currently empty and we have",
    "start": "1128549",
    "end": "1135750"
  },
  {
    "text": "separated our resolvers so it's basically easy to manage so as we go",
    "start": "1135750",
    "end": "1141600"
  },
  {
    "text": "through this I'll explain more about the structure of this because having built quite a lot of API so a graph QL I found",
    "start": "1141600",
    "end": "1148770"
  },
  {
    "text": "this sort of pattern and this sort of structure very easy to kind of work with and it allows you to unit test stuff and",
    "start": "1148770",
    "end": "1155070"
  },
  {
    "text": "if you're working in a fairly big team it's easy to manage so the first thing that we want to do is I've installed all",
    "start": "1155070",
    "end": "1161700"
  },
  {
    "text": "the packages already because of flaky internet connections usually served on up front so I've imported all the basically",
    "start": "1161700",
    "end": "1169200"
  },
  {
    "text": "dependencies this graph QL graphical Express so the first thing that we want to do is basically make it run so all",
    "start": "1169200",
    "end": "1179520"
  },
  {
    "text": "we're doing here is we're just saying when we get to the for such graphical or graph QL and point we pass in our schema",
    "start": "1179520",
    "end": "1186960"
  },
  {
    "text": "and that's that's really about it and then we're setting the endpoint up for graphical and so if you do four slash graphical that's what you're going to",
    "start": "1186960",
    "end": "1193470"
  },
  {
    "text": "get with that ID so the first thing that we want to do is actually add in our",
    "start": "1193470",
    "end": "1199940"
  },
  {
    "text": "schema so we're gonna use a schema definition language if you've seen online there's various ways to ultimately two",
    "start": "1199940",
    "end": "1206880"
  },
  {
    "start": "1201000",
    "end": "1276000"
  },
  {
    "text": "ways that you can do this there's an object type version and the screen schema definition language by default if",
    "start": "1206880",
    "end": "1213360"
  },
  {
    "text": "you can use a schema definition language because one it's very readable and it's very easy to snap out into smaller",
    "start": "1213360",
    "end": "1219120"
  },
  {
    "text": "components and secondly it was designed initially by Greta by the initial",
    "start": "1219120",
    "end": "1225270"
  },
  {
    "text": "reference implementation designed object graph types that you saw in JavaScript just to get the project out ultimately",
    "start": "1225270",
    "end": "1231210"
  },
  {
    "text": "but the schema definition language is I would advise you to if you can use that this I have about any differences in",
    "start": "1231210",
    "end": "1238050"
  },
  {
    "text": "either of them and using both and there's no real limitations so what we have here is we have a type and then we",
    "start": "1238050",
    "end": "1245280"
  },
  {
    "text": "have an ID in patient IDs got some fields on here it supports enums so I've got an enum",
    "start": "1245280",
    "end": "1250800"
  },
  {
    "text": "here and to add comments you just put a hash and I'll come in the documentation and we've got one query here which says",
    "start": "1250800",
    "end": "1257670"
  },
  {
    "text": "basically get the patient past an identifier the exclamation mark stands for is mandatory and the return type is",
    "start": "1257670",
    "end": "1264660"
  },
  {
    "text": "a patient and this is just what we're passing to our schema so now we've defined our type and a schema",
    "start": "1264660",
    "end": "1271140"
  },
  {
    "text": "all we've got left to do is add in the resolver so how we gonna get this data",
    "start": "1271140",
    "end": "1277950"
  },
  {
    "start": "1276000",
    "end": "1334000"
  },
  {
    "text": "so this is the interesting bit so as you",
    "start": "1277950",
    "end": "1283260"
  },
  {
    "text": "can see hopefully this makes it a little bigger as you can see all I've got here",
    "start": "1283260",
    "end": "1289170"
  },
  {
    "text": "is a plain JavaScript object I'm not calling the API I'm not calling the database I'm not doing anything like I say beacon different arbitrary",
    "start": "1289170",
    "end": "1295500"
  },
  {
    "text": "code in here this is all resolved as are so this three Frommer's is an object which is a parent object and we'll see",
    "start": "1295500",
    "end": "1301290"
  },
  {
    "text": "that one is we have nested associations arguments is we'll pass in the Agnes of the query so we said a patient ID I'll",
    "start": "1301290",
    "end": "1307380"
  },
  {
    "text": "pass that and I'll be a property on that and then we have this context of it which is a special object which is passed every time we make a request so",
    "start": "1307380",
    "end": "1314340"
  },
  {
    "text": "if you want to pass in something like the viewer or the authentication token or things like that that's where you",
    "start": "1314340",
    "end": "1319740"
  },
  {
    "text": "store that information and that's passed on every request so ultimately all we have here is just basically a plain",
    "start": "1319740",
    "end": "1327720"
  },
  {
    "text": "object so we've done everything apart from actually map these resolvers so",
    "start": "1327720",
    "end": "1333570"
  },
  {
    "text": "when you use this schema definition language you have to provide the implementation so if we step",
    "start": "1333570",
    "end": "1342330"
  },
  {
    "start": "1334000",
    "end": "1441000"
  },
  {
    "text": "back and go into this schema so there's a tool called graphical tools and it",
    "start": "1342330",
    "end": "1347789"
  },
  {
    "text": "basically makes your schema for you in this make executable schema so we passing the schema which we defined which was the graph QL file and we",
    "start": "1347789",
    "end": "1354299"
  },
  {
    "text": "passing the resolvers and the resolvers we have defined for patient and this is a resolver map we call so this literally",
    "start": "1354299",
    "end": "1361830"
  },
  {
    "text": "maps to your query so you can see it's got the same name patient so actually",
    "start": "1361830",
    "end": "1367080"
  },
  {
    "text": "what does it when it's actually running makes executable it basically matches our name and because with enums",
    "start": "1367080",
    "end": "1373830"
  },
  {
    "text": "generally you can have either strings of value or even have in those numbers you can put them on the route",
    "start": "1373830",
    "end": "1379500"
  },
  {
    "text": "type of your resolver because they're not actually in your they're not assigned to a query or anything so",
    "start": "1379500",
    "end": "1384900"
  },
  {
    "text": "that's how that will reference that so in our database it might be 0 it might be 1 and that's what the field we expect so if we run that and then go back",
    "start": "1384900",
    "end": "1398570"
  },
  {
    "text": "so here's our API and if we make a basic call now we can see we get back the data",
    "start": "1402830",
    "end": "1410420"
  },
  {
    "text": "which is just basically hard-coded and ultimately that's all graph QL is that's",
    "start": "1410420",
    "end": "1415520"
  },
  {
    "text": "if you understand that you've pretty much crushed all of or is is pretty much rinse and repeat it's very similar for",
    "start": "1415520",
    "end": "1421760"
  },
  {
    "text": "mutations it's very similar for adding in like a database or a back-end which we're going to do now but this is a core",
    "start": "1421760",
    "end": "1427550"
  },
  {
    "text": "principle this this is a very simple way to stand up an API so if you're interested in building stuff in like for",
    "start": "1427550",
    "end": "1433790"
  },
  {
    "text": "rapid development it's really really quick to stand up like a fake end point so this is definitely a real neat so",
    "start": "1433790",
    "end": "1441050"
  },
  {
    "start": "1441000",
    "end": "1601000"
  },
  {
    "text": "next let's make it a little bit more meaningful actually read from the database so ways a sequel like in",
    "start": "1441050",
    "end": "1449090"
  },
  {
    "text": "supplication so the first thing we're going to do is add in just a query so",
    "start": "1449090",
    "end": "1457520"
  },
  {
    "text": "all we're doing is reading from the database and we're passing in the ID these are just some helper methods at",
    "start": "1457520",
    "end": "1462980"
  },
  {
    "text": "the top which will see used a little bit later so that's how a database and ultimately resolved oh should be kept",
    "start": "1462980",
    "end": "1469910"
  },
  {
    "text": "small and if you don't really directly I don't think talk to the database in the sense he should have passed a context to",
    "start": "1469910",
    "end": "1476090"
  },
  {
    "text": "it you should have an intermediary so a good way is having models and they kind of these models act as your kind of controller between it like your mediator",
    "start": "1476090",
    "end": "1483170"
  },
  {
    "text": "so impatient now we can add basically",
    "start": "1483170",
    "end": "1491840"
  },
  {
    "text": "all adding disease is a new class and it's got some information how you can constructor a patient and it's got a",
    "start": "1491840",
    "end": "1497390"
  },
  {
    "text": "static method on we're getting by ID so now what we need to do we need to actually update our resolver to call",
    "start": "1497390",
    "end": "1504200"
  },
  {
    "text": "this so as you can see we're passing actually",
    "start": "1504200",
    "end": "1511350"
  },
  {
    "text": "in on the context now so it's context uh patient don't get by end up get by identifiable so if we go back to our",
    "start": "1511350",
    "end": "1518310"
  },
  {
    "text": "server we actually have to pass that in in our schema for every request and we'll see that so what we're doing here",
    "start": "1518310",
    "end": "1528960"
  },
  {
    "text": "on every request it will pass this context object in and we're just basically creating the object and passing in our model for patient so now",
    "start": "1528960",
    "end": "1535590"
  },
  {
    "text": "if we go back to our application if I just quickly set up the database so all",
    "start": "1535590",
    "end": "1544440"
  },
  {
    "text": "we're doing here is we're just opening the connection to our sequel Lite database and then start the application and so if we go back now if I run this",
    "start": "1544440",
    "end": "1555470"
  },
  {
    "text": "just actually see this chain just query slightly so that's the first record in",
    "start": "1555470",
    "end": "1564780"
  },
  {
    "text": "the database John - no and that's essentially how you you can work with databases it's fairly simple it's very",
    "start": "1564780",
    "end": "1570810"
  },
  {
    "text": "trivial if now if you wanted to in your model change the actual static method",
    "start": "1570810",
    "end": "1577530"
  },
  {
    "text": "that we call to get the patient you could call an API at that point you could just have static data you can pretty much do anything it's literally",
    "start": "1577530",
    "end": "1583620"
  },
  {
    "text": "as long as the data's returned as in the ship they expects it then generally that's all you have to do so what about",
    "start": "1583620",
    "end": "1590670"
  },
  {
    "text": "next to dissociations because for this example we have basically just a patient",
    "start": "1590670",
    "end": "1595770"
  },
  {
    "text": "field but we don't have anything that's related to the patient so a patient in",
    "start": "1595770",
    "end": "1600900"
  },
  {
    "text": "our system will have medications and it will have an admission as well because they're an impression so if we go back",
    "start": "1600900",
    "end": "1608030"
  },
  {
    "text": "the first thing that we will do is we'll add",
    "start": "1608030",
    "end": "1614360"
  },
  {
    "text": "nope wrong file",
    "start": "1616690",
    "end": "1620740"
  },
  {
    "text": "so all we've done here is now we have two new fields on our patient",
    "start": "1625540",
    "end": "1632740"
  },
  {
    "text": "what is medications and there's a new type for medication which has some proper person fields on it and then we",
    "start": "1632740",
    "end": "1639220"
  },
  {
    "text": "have an admission which has some more fields on it and the square brackets essentially mean that this is a list and",
    "start": "1639220",
    "end": "1645550"
  },
  {
    "text": "we have an argument that were passing they were going to limit this to not get all the information which we can pass in",
    "start": "1645550",
    "end": "1650950"
  },
  {
    "text": "we can get one two three or we get ten depending on what we want so now we defined our type let's",
    "start": "1650950",
    "end": "1657670"
  },
  {
    "text": "actually do what I said I was going to do add a query to getting set of",
    "start": "1657670",
    "end": "1662880"
  },
  {
    "text": "information out of the database so now",
    "start": "1662880",
    "end": "1670540"
  },
  {
    "text": "all I've done is basically add a way that we're going to read out of the database to get the patient admission",
    "start": "1670540",
    "end": "1676630"
  },
  {
    "text": "and the medications and what I'm actually going to do is I'm going to add a new model in for the medication and",
    "start": "1676630",
    "end": "1686890"
  },
  {
    "text": "this is how we return it this is the method we're going to use I'll do the same for admission and now if we go back",
    "start": "1686890",
    "end": "1697600"
  },
  {
    "text": "to our resolvers we need to resolve these so let's remove this",
    "start": "1697600",
    "end": "1704340"
  },
  {
    "text": "so we've added in two more resolvers we've got one for medications and one for admission and basically these are on",
    "start": "1706810",
    "end": "1712270"
  },
  {
    "text": "the context and this is how we get them but we have to still provide to our resolve a map for now so this is this is",
    "start": "1712270",
    "end": "1719350"
  },
  {
    "text": "where some magic happens and it's interesting to know what happens actually here so previously we had our",
    "start": "1719350",
    "end": "1725560"
  },
  {
    "text": "query and our query matches our schema and says what patient but as you can see there is a patient and it's called",
    "start": "1725560",
    "end": "1732430"
  },
  {
    "text": "medications and admission so the way this resolver mapper works is because on",
    "start": "1732430",
    "end": "1738160"
  },
  {
    "text": "our patient schema we had medications and admissions as fields to access those fields when it actually resolving or to",
    "start": "1738160",
    "end": "1744550"
  },
  {
    "text": "find out what the types are then we have to map them so ultimately this is going to when it runs in the actual scheme",
    "start": "1744550",
    "end": "1750460"
  },
  {
    "text": "it'll be patient medications so that's why I have an object that says patient and their medications an admission in the names match and that's how it kind",
    "start": "1750460",
    "end": "1757150"
  },
  {
    "text": "of works out which of your types to resolve it's pretty clever but it seems",
    "start": "1757150",
    "end": "1763060"
  },
  {
    "text": "like a little bit of magic but once you Garrett it makes a lot of sense so now we've added that and we've just Altima",
    "start": "1763060",
    "end": "1768700"
  },
  {
    "text": "tada one more thing to do we have to pass our new models into the context so",
    "start": "1768700",
    "end": "1776260"
  },
  {
    "text": "we get access to him so fulfill that and",
    "start": "1776260",
    "end": "1782760"
  },
  {
    "text": "now go back we clear this now if we run",
    "start": "1782760",
    "end": "1789280"
  },
  {
    "text": "this query you can see that we have some medications for a patient and we have an",
    "start": "1789280",
    "end": "1796660"
  },
  {
    "text": "admission as well and that's how you work with nested associations so I'm passing in a limit of 5 so just to test",
    "start": "1796660",
    "end": "1803140"
  },
  {
    "text": "it it actually works I'll pass in word and you can see it'll just limit that so",
    "start": "1803140",
    "end": "1810730"
  },
  {
    "text": "that's how you can do things like if you want to limit like the number of information that's brought back you can do paging that's how you pass in",
    "start": "1810730",
    "end": "1816880"
  },
  {
    "text": "variables and that's how you structure it so we've got this API now but what",
    "start": "1816880",
    "end": "1822040"
  },
  {
    "text": "would this look like from a UI perspective and how do we hook a graph QL API to a basically a UI so if we go",
    "start": "1822040",
    "end": "1830650"
  },
  {
    "text": "back to our code base",
    "start": "1830650",
    "end": "1834570"
  },
  {
    "text": "firstly just to save a little bit of time we're going to switch branches",
    "start": "1841350",
    "end": "1848820"
  },
  {
    "text": "let's die again so all I've done here is to switch to a",
    "start": "1854810",
    "end": "1861740"
  },
  {
    "text": "more up-to-date branch and because we've seen how queries are done I've actually added in a Ward query now to show us",
    "start": "1861740",
    "end": "1869720"
  },
  {
    "text": "they're like a ward view so if we go back to our schema we actually have a new war type and we have a new way to",
    "start": "1869720",
    "end": "1876470"
  },
  {
    "text": "get this ward basically passing the ward code and then if we just look at our is",
    "start": "1876470",
    "end": "1883310"
  },
  {
    "text": "over we now have a way to get ward here and then this we've get this is how we",
    "start": "1883310",
    "end": "1889160"
  },
  {
    "text": "do the mapping of the patient's so if we just double check that all works and",
    "start": "1889160",
    "end": "1898550"
  },
  {
    "text": "then we reward you so now we can actually have a look at the UI so this",
    "start": "1898550",
    "end": "1904550"
  },
  {
    "text": "is just a very simple angular application it's using Apollo client so",
    "start": "1904550",
    "end": "1910160"
  },
  {
    "start": "1906000",
    "end": "2116000"
  },
  {
    "text": "a little bit about clients the first thing about clients is if you using graphic world dot roll-your-own the",
    "start": "1910160",
    "end": "1916040"
  },
  {
    "text": "problems that you're going to solve have already been solved there's a palo on this relay or the two big ones if you're",
    "start": "1916040",
    "end": "1921110"
  },
  {
    "text": "interested in react and you're going down that pathway you should definitely look into relay it might be part of your",
    "start": "1921110",
    "end": "1926750"
  },
  {
    "text": "actual project in might work well but generally apollo client works with react",
    "start": "1926750",
    "end": "1932900"
  },
  {
    "text": "or what's an angular works with all of them it's not specific and to basically get an iOS version as well but clients",
    "start": "1932900",
    "end": "1940250"
  },
  {
    "text": "as a whole allow you to query graph QL API is in a very simple way they can be convenience methods to query mutate and",
    "start": "1940250",
    "end": "1946550"
  },
  {
    "text": "do things that subscriptions but also one of the problems with graphic QL is its caching so instead of solving the",
    "start": "1946550",
    "end": "1952490"
  },
  {
    "text": "caching yourself the client does a lot of this discussion for you it basically gives you a normalized cache which is",
    "start": "1952490",
    "end": "1958130"
  },
  {
    "text": "essentially if you had a few query the patient five times it along will be stored in this store once it's just a",
    "start": "1958130",
    "end": "1964220"
  },
  {
    "text": "flattened structure of the day of and I'll show you that in the UI because there's a prom plug-in called Apollo the",
    "start": "1964220",
    "end": "1970760"
  },
  {
    "text": "second part of a but that shows you the store and it shows you the cache that's very useful when you're debugging and really want to run queries in the",
    "start": "1970760",
    "end": "1976550"
  },
  {
    "text": "browser so that's a little bit about client so all we're doing this client is we're pointing it to our graphical",
    "start": "1976550",
    "end": "1982250"
  },
  {
    "text": "endpoint and we're basically adding a network interface and we're just going to inject this into our constructors",
    "start": "1982250",
    "end": "1988010"
  },
  {
    "text": "where we're going to use it so before we do that let's have a look at some of the queries",
    "start": "1988010",
    "end": "1994450"
  },
  {
    "text": "so graph QL tag is just a way of writing a query gives you an abstract syntax tree and we're going to pass this to",
    "start": "1994450",
    "end": "2000820"
  },
  {
    "text": "actually our method to query so interestingly enough we was talking about fragments so here's an example of",
    "start": "2000820",
    "end": "2005830"
  },
  {
    "text": "a fragment so I've defined fragment with patient the first name surname birthday identifying gender and because we're",
    "start": "2005830",
    "end": "2012310"
  },
  {
    "text": "using this information in various places I can use a spread operator to basically",
    "start": "2012310",
    "end": "2017710"
  },
  {
    "text": "expand and basically choose these fields because on the ward view we have a list of patients and their information and on",
    "start": "2017710",
    "end": "2023470"
  },
  {
    "text": "the patient summary we'll have the same sort of information so instead of duplication you can use fragments to do it they're very useful for this sort of",
    "start": "2023470",
    "end": "2030220"
  },
  {
    "text": "stuff and let's have a look at this actually from a UI perspective and see if it's running so in our board view we",
    "start": "2030220",
    "end": "2040630"
  },
  {
    "text": "should have a way to query so all it's",
    "start": "2040630",
    "end": "2045820"
  },
  {
    "text": "doing is the pollak line is passed in we're using a watch query and the ward query is what I just showed you and the",
    "start": "2045820",
    "end": "2052090"
  },
  {
    "text": "variables is taking the ID from the URL and it's passing this in as a ward code and then once we get some information",
    "start": "2052090",
    "end": "2058300"
  },
  {
    "text": "we'll get the ward and we'll get the ward patients back so now if I go back to the UI and see so we've made one",
    "start": "2058300",
    "end": "2070898"
  },
  {
    "text": "query there here to get the actual patients on a ward and we click through",
    "start": "2070899",
    "end": "2075940"
  },
  {
    "text": "we can see this a little bit of information about a patient but the",
    "start": "2075940",
    "end": "2081190"
  },
  {
    "text": "interesting part is about our saying about this plugging is that if you have a look here in Apollo you can actually",
    "start": "2081190",
    "end": "2087610"
  },
  {
    "text": "run queries and if you look at what's actually in this store the stores is a cache of what we've actually made a",
    "start": "2087610",
    "end": "2093730"
  },
  {
    "text": "query about so this is a very useful set of tools that you can use forward especially when you're doing development",
    "start": "2093730",
    "end": "2099370"
  },
  {
    "text": "and debugging so you can run queries it's just what queries that you actually run there's no mutation to determine run",
    "start": "2099370",
    "end": "2104770"
  },
  {
    "text": "only but it gives you this inline graphical editor that you can query instead of having your own one up and",
    "start": "2104770",
    "end": "2109810"
  },
  {
    "text": "running so it's definitely useful if you're debugging because it saves a lot of time when you look in what the state of the stories so let's go back to our",
    "start": "2109810",
    "end": "2118390"
  },
  {
    "start": "2116000",
    "end": "2406000"
  },
  {
    "text": "application so we've seen that we've now got a UI and we have a no decent",
    "start": "2118390",
    "end": "2124000"
  },
  {
    "text": "understanding of what queries are so let's have a look at what mutations are so in our system an",
    "start": "2124000",
    "end": "2130600"
  },
  {
    "text": "example mutation would be we want a discharge of patient and they want to be basically off a ward and queries and",
    "start": "2130600",
    "end": "2138040"
  },
  {
    "text": "mutations are very similar in that sense they'll have a resolve function think about mutations are that you will always",
    "start": "2138040",
    "end": "2143890"
  },
  {
    "text": "return to back and this could be a simple value for an integer or it could be a complex type so let's have a look",
    "start": "2143890",
    "end": "2150640"
  },
  {
    "text": "at this in our schema we need to define what this is gonna look like so all we",
    "start": "2150640",
    "end": "2162820"
  },
  {
    "text": "have here is important so the difference the main difference between queries and",
    "start": "2162820",
    "end": "2168780"
  },
  {
    "text": "mutations are is that we can pass this input object in which is like a complex",
    "start": "2168780",
    "end": "2175000"
  },
  {
    "text": "type instead of having single variables and this is useful when you you can add",
    "start": "2175000",
    "end": "2180390"
  },
  {
    "text": "other fields with other complex types that you've created yourself and it's a",
    "start": "2180390",
    "end": "2185860"
  },
  {
    "text": "really neat way of passing all the information basically on one property and what we do is we're returning this",
    "start": "2185860",
    "end": "2191050"
  },
  {
    "text": "payload called discharge patient payload and it's essentially just a lot of information about the patient below so",
    "start": "2191050",
    "end": "2202810"
  },
  {
    "text": "something that you might want to consider when you're doing this is is not directly returning the patient",
    "start": "2202810",
    "end": "2208810"
  },
  {
    "text": "information to straightaway in the sense that assigning a mutation to the patient because if you put a class or type in",
    "start": "2208810",
    "end": "2215860"
  },
  {
    "text": "this case like payload in you can add custom properties on like if there's any errors and if you think about how you're",
    "start": "2215860",
    "end": "2221950"
  },
  {
    "text": "going to evolve your API over time it's very easy to work with the structure like that because you can do additions",
    "start": "2221950",
    "end": "2227830"
  },
  {
    "text": "easily if you fix it to the patient type then you're kind of stuck with it you can't pass any extra information at a",
    "start": "2227830",
    "end": "2234640"
  },
  {
    "text": "point so it's just a little bit of hindsight it's kinda having to look at it and having a separate object always return now in this scenario for our",
    "start": "2234640",
    "end": "2240550"
  },
  {
    "text": "payload we could have a field which is a patient we could return the patient type in that and we can have a user errors",
    "start": "2240550",
    "end": "2246220"
  },
  {
    "text": "field and various other ones but I would always try to structure it without returning the same type as the normal",
    "start": "2246220",
    "end": "2253570"
  },
  {
    "text": "query does and ultimately don't return just a single value like in horrible and all some people recommend it but",
    "start": "2253570",
    "end": "2259660"
  },
  {
    "text": "again you you're in that same scenario that if you do that you are fixed for that overtime once you change that",
    "start": "2259660",
    "end": "2265390"
  },
  {
    "text": "you're going to break someone's implementation and the whole point is graph QL it's supposed to evolve we don't want to kind of snap people's",
    "start": "2265390",
    "end": "2272170"
  },
  {
    "text": "implementation for their country using in the wild and start having different versions so we've added our mutation",
    "start": "2272170",
    "end": "2277989"
  },
  {
    "text": "into our schema so let's just add our database query in how we're going to",
    "start": "2277989",
    "end": "2287920"
  },
  {
    "text": "return this so all we've got is a query",
    "start": "2287920",
    "end": "2292930"
  },
  {
    "text": "that runs and it deletes it from the table and then I return just the important usually when you return a",
    "start": "2292930",
    "end": "2299589"
  },
  {
    "text": "value you probably best off reading from the DB at this point I've just read from",
    "start": "2299589",
    "end": "2304689"
  },
  {
    "text": "the basically the day that's past thing because it's just it's a simple way of doing it but ultimately you want to double check if you seen actually the",
    "start": "2304689",
    "end": "2309999"
  },
  {
    "text": "database so now if I did that what we need to do is go to our patient and we",
    "start": "2309999",
    "end": "2316779"
  },
  {
    "text": "can add a convenience method that allows us to discharge and I will need to",
    "start": "2316779",
    "end": "2324339"
  },
  {
    "text": "resolve of how we're going to do this so",
    "start": "2324339",
    "end": "2330789"
  },
  {
    "text": "again it follows a similar pattern on the context it's on a patient and it's a method called discharge and we're passing in the input and that's the",
    "start": "2330789",
    "end": "2338289"
  },
  {
    "text": "input that we feed in about the information the patient that's getting discharged so once we've done that we've",
    "start": "2338289",
    "end": "2345130"
  },
  {
    "text": "got to add that to our schema so we can add that to our schema here",
    "start": "2345130",
    "end": "2351150"
  },
  {
    "text": "so you can see now we have a mutation and we have a discharged patient which then that marries up to the same naming",
    "start": "2353930",
    "end": "2360450"
  },
  {
    "text": "convention that is in the actual schema graph cool so now in theory if we go back to our application so don't annoy",
    "start": "2360450",
    "end": "2371130"
  },
  {
    "text": "us on that ward so let's go back to our editor and let's just actually brush",
    "start": "2371130",
    "end": "2378330"
  },
  {
    "text": "this and let's discharge so this is how",
    "start": "2378330",
    "end": "2384660"
  },
  {
    "text": "we basically write it there's an input type and it's just an object and we feed in various of the the fields that were",
    "start": "2384660",
    "end": "2390330"
  },
  {
    "text": "interested in and then we're going to return the encountering patient ID so that is that so if we go back to our UI",
    "start": "2390330",
    "end": "2398510"
  },
  {
    "text": "if we refresh Johnson or is no longer there anymore it's detached so",
    "start": "2398510",
    "end": "2405570"
  },
  {
    "text": "essentially that's mutations they're very similar as you can see the queries are pretty easy to set up but there's",
    "start": "2405570",
    "end": "2412740"
  },
  {
    "text": "one problem but I don't know if anyone's noticed here is that this is one of the caveats for graph QL is if you implant",
    "start": "2412740",
    "end": "2420690"
  },
  {
    "text": "in a very naive way with your associations your queries are pretty horrible and you'll hit the database",
    "start": "2420690",
    "end": "2426900"
  },
  {
    "text": "multiple times so for example I'm going to clear this out of here in this",
    "start": "2426900",
    "end": "2432840"
  },
  {
    "text": "console do you want to do that I want to clear it so we've run this again now if",
    "start": "2432840",
    "end": "2440040"
  },
  {
    "text": "we go back to our UI and if I have to request this page again don't snows back",
    "start": "2440040",
    "end": "2446310"
  },
  {
    "text": "because it don't really Davis rebuild every time so but have a look at this query that keeps running so I have one",
    "start": "2446310",
    "end": "2454530"
  },
  {
    "text": "query to get the patient information and then I've one query to get the ward but how many times do I call the same query",
    "start": "2454530",
    "end": "2461550"
  },
  {
    "text": "over and over again for each patient and that's because we have a nested Association and one of the big problems",
    "start": "2461550",
    "end": "2467580"
  },
  {
    "text": "is if you don't think about how you're going to design your system up front your nested associations will run very",
    "start": "2467580",
    "end": "2473460"
  },
  {
    "text": "very slow because you don't know how people are gonna use your API and this is one of the things that people say",
    "start": "2473460",
    "end": "2479369"
  },
  {
    "text": "about is graph Koken improve the performance of your system if anything I'll make it slower than your REST API",
    "start": "2479369",
    "end": "2484500"
  },
  {
    "text": "our only API they put them because generally you have a thing TenPoint and that'll do some data return to fixed dataset but because you can",
    "start": "2484500",
    "end": "2491039"
  },
  {
    "text": "query in any kind of way that your you exposed via your API if you don't care",
    "start": "2491039",
    "end": "2496079"
  },
  {
    "text": "about your associations you will get many n +1 queries and many too many queries all the time so you have to be",
    "start": "2496079",
    "end": "2501809"
  },
  {
    "text": "really cautious with this but there is something that you can do to solve this and it's called data loader and data",
    "start": "2501809",
    "end": "2507359"
  },
  {
    "text": "loader is a concept which exists in most graphical implementations the one I'm",
    "start": "2507359",
    "end": "2513719"
  },
  {
    "text": "gonna use the JavaScript form but the idea is that in a specific event loop it will keep track of all the IDS that you",
    "start": "2513719",
    "end": "2520229"
  },
  {
    "text": "make and I'll batch all those IDs in toward and then you can run one query instead of running multiple so how this",
    "start": "2520229",
    "end": "2526650"
  },
  {
    "text": "works on principle is this query is basically going off the patient ID so if I could have an array of patient IDs",
    "start": "2526650",
    "end": "2533279"
  },
  {
    "text": "it'd be make admit it make it a lot more efficient so the first thing I'm gonna do is I'm going to change how the query",
    "start": "2533279",
    "end": "2540119"
  },
  {
    "text": "actually runs I've actually got a del Darren Storr de Lawd it's actually a package which I've already put in so if we go to the",
    "start": "2540119",
    "end": "2546329"
  },
  {
    "text": "admission so now I'm basically feeding",
    "start": "2546329",
    "end": "2554160"
  },
  {
    "text": "in a bunch of IDs and I'm using an in statement of all the IDS in the just",
    "start": "2554160",
    "end": "2559829"
  },
  {
    "text": "comma separated instead of getting one by one and all this is doing on the return type is basically batching up the",
    "start": "2559829",
    "end": "2566339"
  },
  {
    "text": "admissions to the right persons and dry persons admissions and giving you an object back that's ultimately all that",
    "start": "2566339",
    "end": "2571469"
  },
  {
    "text": "does so what we have to do though is something slightly different we have to put our date loader in so this is how",
    "start": "2571469",
    "end": "2581069"
  },
  {
    "text": "you and every request you want to create a new instance update a lot of ultimately it does it does batching",
    "start": "2581069",
    "end": "2587160"
  },
  {
    "text": "first but it does caching as well and what means by caching is every time you make a request and you may be requesting",
    "start": "2587160",
    "end": "2593160"
  },
  {
    "text": "multiple say the same patient in a single request it puts it in a cache so you have to keep hitting the database",
    "start": "2593160",
    "end": "2598170"
  },
  {
    "text": "every time and it does that by default you can turn the cache off so this is why we create when every time because",
    "start": "2598170",
    "end": "2604140"
  },
  {
    "text": "you don't want to share that information across everyone using your system because if it's in a cache they're gonna get out of that day off basically and",
    "start": "2604140",
    "end": "2610739"
  },
  {
    "text": "you don't want that so this is how you instantiate a new data loader and it's basically I'm passing in a bunch of IDs",
    "start": "2610739",
    "end": "2616969"
  },
  {
    "text": "it's always going to do is it's going to look on the event loop and when it comes to assert period it's gonna say okay we are bunched all these 10 IDs or",
    "start": "2616969",
    "end": "2623710"
  },
  {
    "text": "how many patients what we have I'm gonna pass this now to this get admission method which is just our convenience method to go to the database so what we",
    "start": "2623710",
    "end": "2631540"
  },
  {
    "text": "have to do though is we have to change our loader here so we have a mission",
    "start": "2631540",
    "end": "2642330"
  },
  {
    "text": "so now we're getting the from admission and we're doing an admission loader and the do not load and this dot load will",
    "start": "2648010",
    "end": "2654160"
  },
  {
    "text": "basically please object is passing the patient ID so it's just going to group up a bunch of patient IDs so now if we",
    "start": "2654160",
    "end": "2659740"
  },
  {
    "text": "go back to our app we should see if I",
    "start": "2659740",
    "end": "2664990"
  },
  {
    "text": "was to refresh this nothing no that's",
    "start": "2664990",
    "end": "2671260"
  },
  {
    "text": "not entirely correct so let's see what missed",
    "start": "2671260",
    "end": "2677640"
  },
  {
    "text": "yes good job someone's watching so we go",
    "start": "2693400",
    "end": "2699350"
  },
  {
    "text": "back to our application in terms of the server I can now add in the missing",
    "start": "2699350",
    "end": "2706310"
  },
  {
    "text": "component right this isn't yeah that's kind of kind of",
    "start": "2706310",
    "end": "2721070"
  },
  {
    "text": "gone wrong slowly so let's fix that",
    "start": "2721070",
    "end": "2724660"
  },
  {
    "text": "so now what we've done we've set the admission to point to the loaders and",
    "start": "2732670",
    "end": "2737970"
  },
  {
    "text": "that's just passed in again on the context so let's clear this out let's",
    "start": "2737970",
    "end": "2748119"
  },
  {
    "text": "rerun this now if we go back that's much better we have three queries",
    "start": "2748119",
    "end": "2754930"
  },
  {
    "text": "instead of I think 12 or 30 so you have to be very cautious about how you",
    "start": "2754930",
    "end": "2760269"
  },
  {
    "text": "structure your data otherwise look great for the user and they will get the information they need but when your",
    "start": "2760269",
    "end": "2767289"
  },
  {
    "text": "query and your back-end engineers will be like this is worse than what we had before and that's ultimately what we",
    "start": "2767289",
    "end": "2772569"
  },
  {
    "text": "don't want to do so let's go back to the",
    "start": "2772569",
    "end": "2777730"
  },
  {
    "text": "slides so I've already mentioned some of the",
    "start": "2777730",
    "end": "2784329"
  },
  {
    "start": "2781000",
    "end": "2944000"
  },
  {
    "text": "challenges that you face around graph curl because it's one of those technologies where it's old with all",
    "start": "2784329",
    "end": "2792130"
  },
  {
    "text": "this great assets in the sense that it can help you an efficiency and so on and",
    "start": "2792130",
    "end": "2797380"
  },
  {
    "text": "so forth but actually there's a lot of problems it does have one yet for you trying to use in the real world it's not a straightforward it's just okay we can",
    "start": "2797380",
    "end": "2804039"
  },
  {
    "text": "use any salts all our problems it doesn't so some of these challenges are one of those unpredictable execution is",
    "start": "2804039",
    "end": "2810159"
  },
  {
    "text": "what we saw when we saw the nested queries and we got the n plus one this is a challenge you have to look at",
    "start": "2810159",
    "end": "2815949"
  },
  {
    "text": "upfront so I advise people to put like telemetry for your queries in either on",
    "start": "2815949",
    "end": "2821469"
  },
  {
    "text": "the back end or your resolve functions to keep a track of what is actually going on because ultimately you won't be able to solve any performance problems",
    "start": "2821469",
    "end": "2827499"
  },
  {
    "text": "without them and there's various tools that you can do with it the other one is graph QL doesn't handle",
    "start": "2827499",
    "end": "2833799"
  },
  {
    "text": "file uploads you can't do a multi-part HTP file upload or anything like that's a trial don't even think about using it",
    "start": "2833799",
    "end": "2839589"
  },
  {
    "text": "it's not designed for that stick to any of the RPC oh you arrest whatever you",
    "start": "2839589",
    "end": "2845229"
  },
  {
    "text": "want to use work graph cool as we've seen in the one of",
    "start": "2845229",
    "end": "2851139"
  },
  {
    "text": "the early things I want to show it in post so it's no longer at important so we don't have a concept of caching",
    "start": "2851139",
    "end": "2856539"
  },
  {
    "text": "anymore with a rest-based API you have you can leverage HTTP caching making these very can use headers there's",
    "start": "2856539",
    "end": "2862449"
  },
  {
    "text": "various things that you can do or we can have cache servers like varnish or squiggle that sit in front",
    "start": "2862449",
    "end": "2867789"
  },
  {
    "text": "they like to cache there but you can't do this regret curl so this causes a bit of a problem so ultimately there's a",
    "start": "2867789",
    "end": "2873549"
  },
  {
    "text": "couple of ways around this you use a client and that client that client will cache your information as and when needed but on the server you have to",
    "start": "2873549",
    "end": "2879789"
  },
  {
    "text": "think about how you're going to cache are you gonna put a cache in front of your business logic are you going to cache at the database level you have to",
    "start": "2879789",
    "end": "2884979"
  },
  {
    "text": "think about these things because otherwise the problem that you're gonna have is every time you're just going to hit the database are you gonna hit your",
    "start": "2884979",
    "end": "2890439"
  },
  {
    "text": "endpoint and if there is doesn't change so often that is not really much for benefit that you're going to get in",
    "start": "2890439",
    "end": "2896079"
  },
  {
    "text": "terms of performance or anything because you might as well stick to using a difficult REST API it doesn't really help you in that sense",
    "start": "2896079",
    "end": "2903719"
  },
  {
    "text": "and the other thing that haven't really talked about is authentication authorization and ultimately graph QL",
    "start": "2903719",
    "end": "2909039"
  },
  {
    "text": "doesn't care about this there's it's not bothered is there's has a context object",
    "start": "2909039",
    "end": "2914199"
  },
  {
    "text": "and you can pass the the JWT token whatever you want into it but there's a video that I've got on the",
    "start": "2914199",
    "end": "2920780"
  },
  {
    "text": "resource at the end from graphic real summer which shows you two or three patterns of how if you want to do authentication or off the reservation I",
    "start": "2920780",
    "end": "2926720"
  },
  {
    "text": "advise you to watch that because it's taken I think from how the way Twitter do it it's very informative and there's",
    "start": "2926720",
    "end": "2931760"
  },
  {
    "text": "different patterns that you can use so I'm not gonna go over that into much detail but as a whole it doesn't really particularly care about it's just it's a",
    "start": "2931760",
    "end": "2937970"
  },
  {
    "text": "thin wrapper over your API ultimately what you want to expose so what about",
    "start": "2937970",
    "end": "2945320"
  },
  {
    "start": "2944000",
    "end": "3049000"
  },
  {
    "text": "real-time data so now this is the second part of what I wanted to talk about so up until this point if we think about",
    "start": "2945320",
    "end": "2951530"
  },
  {
    "text": "what we've seen we have queries and we have mutations and we have this very simple request in response model we fire",
    "start": "2951530",
    "end": "2958400"
  },
  {
    "text": "some dairy off to a server and it gives us some something back always we fire someday after survey there's some sort of mutation on a side",
    "start": "2958400",
    "end": "2963890"
  },
  {
    "text": "effect and then we get some data back but with real-time day is is very different we want to have like an event",
    "start": "2963890",
    "end": "2970820"
  },
  {
    "text": "stream over time so we might get a result in the next five minutes or the next twenty minutes or the next half an",
    "start": "2970820",
    "end": "2975890"
  },
  {
    "text": "hour I'll get multiple ones every second it doesn't follow the same pattern as the request in responsible and one thing",
    "start": "2975890",
    "end": "2982250"
  },
  {
    "text": "about graph QL is that it's transport agnostic you don't have to use HTTP all",
    "start": "2982250",
    "end": "2988070"
  },
  {
    "text": "the demos will be HTTP but you can use WebSockets and I've seen people use mutations over WebSockets they've seen",
    "start": "2988070",
    "end": "2994640"
  },
  {
    "text": "people do queries over WebSocket so you can choose any transport protocol which basically allows you to do a character data set so that's why you with a graph",
    "start": "2994640",
    "end": "3002200"
  },
  {
    "text": "curl you can support real time because it's agnostic to its transport layer so what are the some of the use cases of",
    "start": "3002200",
    "end": "3008490"
  },
  {
    "text": "real time information so a typical one to chat so everyone's used to things like whatsapp slack and various other",
    "start": "3008490",
    "end": "3014830"
  },
  {
    "text": "bits in various other applications and then we have things like notifications so if you think about a good example is",
    "start": "3014830",
    "end": "3021550"
  },
  {
    "text": "Facebook and like people saying someone's like your post and so and so forth same with Twitter and retweets we have collaborative tools which is",
    "start": "3021550",
    "end": "3028510"
  },
  {
    "text": "kind of like online coding tools and things like them and we have live feeds so get a live feed just simply things",
    "start": "3028510",
    "end": "3034660"
  },
  {
    "text": "like if you think about the Guardian website or the BBC and you're watching you're waiting for an important event and it updates all the time with what's",
    "start": "3034660",
    "end": "3041410"
  },
  {
    "text": "the latest happening so these are kind of the use cases that we kind of see with real time applications",
    "start": "3041410",
    "end": "3048690"
  },
  {
    "text": "so real complications can be categorized into kind of two areas and it's",
    "start": "3048690",
    "end": "3054910"
  },
  {
    "start": "3049000",
    "end": "3229000"
  },
  {
    "text": "basically one called pollen water called push so Paul is a very simple scenario which we've all seen which is basically",
    "start": "3054910",
    "end": "3060430"
  },
  {
    "text": "just polling HDTV spec it's been around for a long time and it's very simple and",
    "start": "3060430",
    "end": "3065860"
  },
  {
    "text": "it can solve a lot of your problems generally if you have an application where you know how often the date is",
    "start": "3065860",
    "end": "3072190"
  },
  {
    "text": "refreshed and it's quite cheap to query that it's very easy to set up on the client side some more thing to Paul you",
    "start": "3072190",
    "end": "3079390"
  },
  {
    "text": "don't need anything else that I'll just work for you don't have to anything fancies it's a great solution still it",
    "start": "3079390",
    "end": "3084820"
  },
  {
    "text": "comes into play when you're Daria's kind of you don't know the time periods and",
    "start": "3084820",
    "end": "3090160"
  },
  {
    "text": "you maybe have an expensive query running every time then it's not so good to be using it but the common one is",
    "start": "3090160",
    "end": "3095740"
  },
  {
    "text": "pushed so we're all used to push notifications as a whole so people who have iPhones and Android phones you'll",
    "start": "3095740",
    "end": "3101800"
  },
  {
    "text": "see notifications from I box up and various other things they're all based on push notifications they pushed it out",
    "start": "3101800",
    "end": "3107320"
  },
  {
    "text": "when something's happened when it's an interesting event it'll send you saying okay this has happened so in graph QL",
    "start": "3107320",
    "end": "3112930"
  },
  {
    "text": "there's actually two ways to do real-time API is what I want to cover subscriptions live queries is kind of",
    "start": "3112930",
    "end": "3120070"
  },
  {
    "text": "experimental at the moment they spend a lot of packages if you want talk to me afterwards about that I can show you and",
    "start": "3120070",
    "end": "3125410"
  },
  {
    "text": "pointing to the right direction of those but that's not in the spec yet fully so what live queries are is kind of like",
    "start": "3125410",
    "end": "3130750"
  },
  {
    "text": "it's like cheap polling ultimately stay driven so has anyone used firebase before or meteor there's reactive layers",
    "start": "3130750",
    "end": "3138370"
  },
  {
    "text": "in meteor on this firebase has a real-time database that's ultimately if something changes it can fire stuff out",
    "start": "3138370",
    "end": "3144700"
  },
  {
    "text": "but the difference is between live paid subscriptions the ultimate thing is is what you have with libraries is you",
    "start": "3144700",
    "end": "3149890"
  },
  {
    "text": "don't care about why that happened if it's a change we just want to listen to it we're with subscriptions that gives you",
    "start": "3149890",
    "end": "3155950"
  },
  {
    "text": "the final control is like you understand why that happened because you have a payload in the event you knew why what the reason for was for that so the two",
    "start": "3155950",
    "end": "3162400"
  },
  {
    "text": "different scenarios in the soft kind of two different problems so that's what subscriptions ultimately are they're event-driven they're not they basically",
    "start": "3162400",
    "end": "3170440"
  },
  {
    "text": "allow you to subscribe to like it's like a query of data and then over time you",
    "start": "3170440",
    "end": "3176140"
  },
  {
    "text": "will get like a multiple number of vents back so we have a look a bit a little more detail query",
    "start": "3176140",
    "end": "3181590"
  },
  {
    "text": "subscriptions actually uh so they're based on real-time events so the idea that I just mentioned was if something interesting happens",
    "start": "3181590",
    "end": "3188180"
  },
  {
    "text": "tell me about it and tell me why that happened and ultimately client we find the ship of the day that's pushed to it",
    "start": "3188180",
    "end": "3194370"
  },
  {
    "text": "and what we mean by that the if you think about what the query was like subscription is very similarly changed subscription at the top to the from the",
    "start": "3194370",
    "end": "3201030"
  },
  {
    "text": "operator keyword and essentially you define the day that you want when it's pushed to you and that's ultimately what",
    "start": "3201030",
    "end": "3206400"
  },
  {
    "text": "happens so you define the data shape again it's very very similar so that's the ultimate premise of how it actually",
    "start": "3206400",
    "end": "3212220"
  },
  {
    "text": "works under the hood currently is the implementations that pubs are based in a",
    "start": "3212220",
    "end": "3218100"
  },
  {
    "text": "spec it doesn't say you have to use pub/sub but if you look at any packages available currently generally the",
    "start": "3218100",
    "end": "3223110"
  },
  {
    "text": "premises that a lot of people using pop up the pub sub pan and the publisher subscribe so when do you want to use",
    "start": "3223110",
    "end": "3230760"
  },
  {
    "start": "3229000",
    "end": "3296000"
  },
  {
    "text": "subscriptions because ultimately subscriptions for real-time data your",
    "start": "3230760",
    "end": "3236940"
  },
  {
    "text": "application generally will not be built entirely on real time daily not always only a small part of your application",
    "start": "3236940",
    "end": "3242640"
  },
  {
    "text": "potentially might be real time that you want for instance you might have a screen that fits in a filing system",
    "start": "3242640",
    "end": "3247860"
  },
  {
    "text": "where you want to keep up with stocks but the rest of the information in the stock itself or the address and so on self aesthetic that didn't have to be",
    "start": "3247860",
    "end": "3253380"
  },
  {
    "text": "real-time so one of the use cases is when the initial query is quite expensive but the subsequent following",
    "start": "3253380",
    "end": "3260430"
  },
  {
    "text": "editions all the events that happen are small so the incremental changes are small so that's a very good use case of",
    "start": "3260430",
    "end": "3266250"
  },
  {
    "text": "it so a typical example in graph QL is you can set for query by itself to blood",
    "start": "3266250",
    "end": "3271320"
  },
  {
    "text": "the data initially and then you can set a subscription afterwards say okay just keep updating my stall with this information that comes in so that's one",
    "start": "3271320",
    "end": "3278100"
  },
  {
    "text": "of the use cases and the other one is when you actually care about stuff in ultimately real time you want a low",
    "start": "3278100",
    "end": "3283440"
  },
  {
    "text": "latency update so for chapped locations say if he's using slack you don't want to wait five seconds for your actual",
    "start": "3283440",
    "end": "3289650"
  },
  {
    "text": "message to come through you expect it to come through in a reasonable time frame when that day is pushed so how they",
    "start": "3289650",
    "end": "3296400"
  },
  {
    "start": "3296000",
    "end": "3441000"
  },
  {
    "text": "actually implemented so on the left of this diagram in pink we have the typical",
    "start": "3296400",
    "end": "3303750"
  },
  {
    "text": "model of what graph QL is currently so obvious request response and we have a graph QL API and we have a domain which",
    "start": "3303750",
    "end": "3308910"
  },
  {
    "text": "goes off and gets our data so we can use queries and mutations on that side and that's how we work with crazy mutations",
    "start": "3308910",
    "end": "3315200"
  },
  {
    "text": "on the right we have two new components ultimately the first one is because we want real-time information we have to",
    "start": "3315200",
    "end": "3321200"
  },
  {
    "text": "have some way of delivering that information so one of the way it is we have this bi-directional transport so",
    "start": "3321200",
    "end": "3326720"
  },
  {
    "text": "the typical examples using WebSockets but you can use any bio-dad tional transport it's not limited to WebSockets so you need to kind of create a",
    "start": "3326720",
    "end": "3333260"
  },
  {
    "text": "connection on the server as well as a client to say okay now we have this connection I can tell you what's happening and then you have your the way",
    "start": "3333260",
    "end": "3339200"
  },
  {
    "text": "you handle subscriptions and so it's pub/sub based there's the one I'm going to use is an in-memory collection so",
    "start": "3339200",
    "end": "3345530"
  },
  {
    "text": "never use that in live because you'll fall over completely it's not designed for scale but for down purses it's",
    "start": "3345530",
    "end": "3350630"
  },
  {
    "text": "perfect but in the real world you want you something like Africa radius r mq QT and then we have our events so the",
    "start": "3350630",
    "end": "3357050"
  },
  {
    "text": "structure what happens is is that for instance when we have a mutation say when our patient wants to be discharged",
    "start": "3357050",
    "end": "3362380"
  },
  {
    "text": "we might want to update our UI to say remove them from the list because it's a real-time patient ward we don't want to",
    "start": "3362380",
    "end": "3367550"
  },
  {
    "text": "see them on the list anymore because it's not valid so in a mutation that's",
    "start": "3367550",
    "end": "3373190"
  },
  {
    "text": "an event that we care about we will basically say okay publish the fact that we've actually done something and we've",
    "start": "3373190",
    "end": "3379000"
  },
  {
    "text": "reaction has been discharged so now whoever subscribe tell them about",
    "start": "3379000",
    "end": "3384260"
  },
  {
    "text": "that and pass them the information they've asked for and that's that's ultimately how it works so this is the",
    "start": "3384260",
    "end": "3390050"
  },
  {
    "text": "architecture of Basin from a javascript point of view these are some of the packages are available so on the client you can use the same script in transport",
    "start": "3390050",
    "end": "3396560"
  },
  {
    "text": "which is a WebSocket it works with just plain old vanilla JavaScript relay and Apollo client in the middle we have the",
    "start": "3396560",
    "end": "3403400"
  },
  {
    "text": "actual server so you have your same transport layer and then you have subscriptions so I'm going to use an",
    "start": "3403400",
    "end": "3409790"
  },
  {
    "text": "in-memory package which is a graphical subscriptions one which is pub/sub based but there's Redis the post breast and",
    "start": "3409790",
    "end": "3415130"
  },
  {
    "text": "Mongoose non-employment but there's Kafka there's mqt there's a few other",
    "start": "3415130",
    "end": "3421430"
  },
  {
    "text": "ones it's quite a few there's now currently and then you have your reference implementation and this is generally how the structure is so what",
    "start": "3421430",
    "end": "3426560"
  },
  {
    "text": "what you can do is and we'll see you later in the client is you will have in when you're on the client you set up to certain levels of transport you set one",
    "start": "3426560",
    "end": "3433160"
  },
  {
    "text": "for HTTP which follows out queries and mutations and then we have our subscriptions which run over WebSockets and we'll go into that in a minute",
    "start": "3433160",
    "end": "3440530"
  },
  {
    "text": "so let's have a look at another example just to kind of like hammer home the point so imagine we go back to our UI",
    "start": "3440530",
    "end": "3448010"
  },
  {
    "text": "the top we have our patient view and the discharge button now which currently doesn't exist but on another screen a",
    "start": "3448010",
    "end": "3453200"
  },
  {
    "text": "nurse on award actually has a view of the wardrobe and they once you load that page they said okay and want to",
    "start": "3453200",
    "end": "3458330"
  },
  {
    "text": "subscribe to any patient discharge events so what happens is someone else wearing the hospital discharges the",
    "start": "3458330",
    "end": "3466250"
  },
  {
    "text": "patient so I will click on the button and then we run the mutation as normal on the server but the mutation itself",
    "start": "3466250",
    "end": "3471260"
  },
  {
    "text": "actually triggers a subscription that says okay this is actually happened this is how it's happened for and why I'm",
    "start": "3471260",
    "end": "3478010"
  },
  {
    "text": "going to send you this information and what happens is it will discharge the patients always no longer see the actual",
    "start": "3478010",
    "end": "3483830"
  },
  {
    "text": "patient at the bottom anymore and this is a general high-level view of how it works we'll see in principle that changing we need to make from a code",
    "start": "3483830",
    "end": "3489950"
  },
  {
    "text": "perspective of how it works but this is generally how subscriptions work currently so if we go to our demo now",
    "start": "3489950",
    "end": "3501970"
  },
  {
    "text": "what I'm going to do is I'm going to add the subscriptions in now so the first thing that we have to do like with any",
    "start": "3502720",
    "end": "3508670"
  },
  {
    "text": "of this so let's close all this to make it a bit clearer is in our schema we have to define our subscription so now",
    "start": "3508670",
    "end": "3522110"
  },
  {
    "text": "what we have we have on our scheme we have queries mutations our subscriptions and we have this concept of ascription",
    "start": "3522110",
    "end": "3527510"
  },
  {
    "text": "called patient discharged and we have this ward code about which war they've discharged from this is going to be very",
    "start": "3527510",
    "end": "3532550"
  },
  {
    "text": "important in a minute and I'll explain why and then we have the event that we care about and that is just here all",
    "start": "3532550",
    "end": "3542930"
  },
  {
    "text": "I've got is basically a return back encounter ID and went to about the patient ID and that's all we have so",
    "start": "3542930",
    "end": "3549740"
  },
  {
    "text": "that's how we do our schema but in the same way we have to change our mutation",
    "start": "3549740",
    "end": "3556640"
  },
  {
    "text": "so we no longer just basically remove the patient",
    "start": "3556640",
    "end": "3563470"
  },
  {
    "text": "so now it's mutation is slightly slightly update so I'm gonna quickly",
    "start": "3565590",
    "end": "3571270"
  },
  {
    "text": "waster this because we're nearly out of time we are our time bow quickly whiz",
    "start": "3571270",
    "end": "3576520"
  },
  {
    "text": "through this so essentially we have this discharged patient and what we have is a pub/sub and this is the the return type",
    "start": "3576520",
    "end": "3582490"
  },
  {
    "text": "of what comes back is what we're going to send to our basically our subscribers so if we go have a look in our",
    "start": "3582490",
    "end": "3591490"
  },
  {
    "text": "subscriptions that's actually first",
    "start": "3591490",
    "end": "3598650"
  },
  {
    "text": "resolve a function in so again our",
    "start": "3598650",
    "end": "3604150"
  },
  {
    "text": "resolve function and after groceries quickly is that we have this pop song it's an iterator and the topic we care",
    "start": "3604150",
    "end": "3610869"
  },
  {
    "text": "about is it discharged and we have basically if it's this ward code because you don't want to send it to any just",
    "start": "3610869",
    "end": "3616000"
  },
  {
    "text": "any old user we want to send it the people who subscribed by that ward because you don't send to ward 23 because that patient does exist on there",
    "start": "3616000",
    "end": "3621490"
  },
  {
    "text": "so that's how you said that description up in terms of this resolve function then we still have to update our resolve",
    "start": "3621490",
    "end": "3628030"
  },
  {
    "text": "mapper and the sense that the subscription patient discharge there and",
    "start": "3628030",
    "end": "3635460"
  },
  {
    "text": "now a subscription uses this pub sub framework so built-in memory one he's",
    "start": "3635460",
    "end": "3641560"
  },
  {
    "text": "just basically on top it says patient discharge and we do this pops up so now",
    "start": "3641560",
    "end": "3647880"
  },
  {
    "text": "if we just go back to our UI for a second yep all we have to do is change",
    "start": "3647880",
    "end": "3655390"
  },
  {
    "text": "our server to support",
    "start": "3655390",
    "end": "3658470"
  },
  {
    "text": "so I've updated this server file and ultimately is a new subscription server and this runs off WebSockets",
    "start": "3661119",
    "end": "3669619"
  },
  {
    "text": "so I'm gonna go through this quickly but all this code is available on github so anyone who wants to go through it can't",
    "start": "3669619",
    "end": "3674750"
  },
  {
    "text": "so ultimately how you set the server up so from a client's perspective all we have to do is add in our query for our",
    "start": "3674750",
    "end": "3686180"
  },
  {
    "text": "subscription I actually would change our",
    "start": "3686180",
    "end": "3691280"
  },
  {
    "text": "client first so our client supports both web sockets as well as HTTP so now we",
    "start": "3691280",
    "end": "3698960"
  },
  {
    "text": "have WebSockets client here and then if we go to queries we can add our query in",
    "start": "3698960",
    "end": "3707020"
  },
  {
    "text": "which is basically how we set up a description where it's very similar to a query what we want to return is encountering the patient ID and now all",
    "start": "3707020",
    "end": "3714770"
  },
  {
    "text": "we have to do is in our ward view is register that subscription and this is how you register a subscription it's",
    "start": "3714770",
    "end": "3720410"
  },
  {
    "text": "just like a query so we have our normal query at the top and then we set up a",
    "start": "3720410",
    "end": "3725960"
  },
  {
    "text": "subscription mode to subscribe to one or more events and all we're gonna do is remove from the list basically the entry",
    "start": "3725960",
    "end": "3731210"
  },
  {
    "text": "that's there so in theory if this is all worked if I reset this and I was to go",
    "start": "3731210",
    "end": "3738920"
  },
  {
    "text": "to discharge its discharged and oops the",
    "start": "3738920",
    "end": "3752119"
  },
  {
    "text": "user is gone and if we just refresh there won't exist hi the works the",
    "start": "3752119",
    "end": "3758060"
  },
  {
    "text": "database is rebuilt unfortunately but I just want to show you quickly the",
    "start": "3758060",
    "end": "3763359"
  },
  {
    "text": "subscription so you can look in the frames you will see actually how the subscriptions set up on the lifecycle or",
    "start": "3763359",
    "end": "3769369"
  },
  {
    "text": "subscription so we can see it's in its in its payload and it's subscribed and that's generally a very quick overview",
    "start": "3769369",
    "end": "3775070"
  },
  {
    "text": "of how to set up subscriptions because we kinda rack time so one last thing is",
    "start": "3775070",
    "end": "3781790"
  },
  {
    "text": "that you can enrich payload each resolver the cue subscription you can change your payload the return type that",
    "start": "3781790",
    "end": "3787220"
  },
  {
    "text": "you get back this in advanced scenario I probably haven't used it in anything useful yet but if you ever need to",
    "start": "3787220",
    "end": "3792260"
  },
  {
    "text": "change payload that comes back you can do which is pretty useful and there's no such thing as a free lunch",
    "start": "3792260",
    "end": "3798550"
  },
  {
    "text": "because subscriptions are stateful and a managing state is hard you can't just scale your server like",
    "start": "3798550",
    "end": "3804970"
  },
  {
    "text": "you would with an API import another web server in and put beyond do a lot of bouncing off you go because you have connections long-lived connections",
    "start": "3804970",
    "end": "3811630"
  },
  {
    "text": "between your clients and the messages that we're sending so you have to manage that and so you need to think about distributed load and then you have",
    "start": "3811630",
    "end": "3817660"
  },
  {
    "text": "quality of service at scale how you're going to manage the number of events that come through which take priority if",
    "start": "3817660",
    "end": "3824170"
  },
  {
    "text": "you look think of example I cook there's millions of likes and there you subscriptions and they use the same platform how what takes precedence how",
    "start": "3824170",
    "end": "3830410"
  },
  {
    "text": "many messages come through how big is there like two why they could come through can the client actually handle them so you have to think about throttling and buffering and how you can",
    "start": "3830410",
    "end": "3836530"
  },
  {
    "text": "organize your events and then these are some of the resources the authentication ones are bottom the the leap RM one they",
    "start": "3836530",
    "end": "3843460"
  },
  {
    "text": "want to learn more about subscriptions the event and may have how actually works it's an event system definitely go watch that the slides will be up repos",
    "start": "3843460",
    "end": "3850960"
  },
  {
    "text": "small on Twitter and unfortunately did run out of time with that but anything",
    "start": "3850960",
    "end": "3855970"
  },
  {
    "text": "else thank you and just ask me afterwards [Applause]",
    "start": "3855970",
    "end": "3867039"
  }
]