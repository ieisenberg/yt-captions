[
  {
    "text": "all right well I think we'll go ahead and get started so hello everybody my name is Aaron",
    "start": "1560",
    "end": "7020"
  },
  {
    "text": "standard I'm um one of the creators of aqua.net and in the sort of.net and Technology space that's kind of what I'm",
    "start": "7020",
    "end": "13679"
  },
  {
    "text": "known for uh this talk will mention it but it's not really about that it's about software architecture and some",
    "start": "13679",
    "end": "19920"
  },
  {
    "text": "lessons that I've learned over the years primarily by doing things wrong so we're going to talk about",
    "start": "19920",
    "end": "25320"
  },
  {
    "text": "what I think is essentially a style of well not really a style but more like a philosophy of software architecture that",
    "start": "25320",
    "end": "32700"
  },
  {
    "text": "will save you a lot of time Agony and most importantly money and risk down the road",
    "start": "32700",
    "end": "39000"
  },
  {
    "text": "so what is technical debt well technical debt is essentially when you have a baked in let's say",
    "start": "39000",
    "end": "46980"
  },
  {
    "text": "architectural Choice made early on in the life cycle of a project doesn't necessarily have to be software if",
    "start": "46980",
    "end": "53520"
  },
  {
    "text": "anyone's tried installing CAT5 in a really old house you know what technical debt is like in the physical world",
    "start": "53520",
    "end": "60360"
  },
  {
    "text": "um the idea behind this is that if we go ahead and build let's say a large-scale piece of enterprise software could be a",
    "start": "60360",
    "end": "67200"
  },
  {
    "text": "line of business application could be something that's customer facing all of them end up kind of in the same place",
    "start": "67200",
    "end": "73380"
  },
  {
    "text": "which is that let's say you go ahead and build a database driven application which is probably the most common style",
    "start": "73380",
    "end": "80280"
  },
  {
    "text": "of software application that's out there you have your relational database that has data that has table schema that has",
    "start": "80280",
    "end": "87540"
  },
  {
    "text": "stored procedures and Views and then on top of that you go ahead and have let's say your reporting and your object",
    "start": "87540",
    "end": "93600"
  },
  {
    "text": "relational mapping and then you might have your UI layer then you have your business processes that either your",
    "start": "93600",
    "end": "99600"
  },
  {
    "text": "customers or your internal stakeholders use and then on top of that you have all the historical data business value and",
    "start": "99600",
    "end": "107159"
  },
  {
    "text": "let's say built-in systems like human run systems and expectations all resting",
    "start": "107159",
    "end": "112619"
  },
  {
    "text": "on top of that so if you want to make a significant change down here that is going to",
    "start": "112619",
    "end": "118439"
  },
  {
    "text": "propagate all the way up through all the layers sitting on top of it that is the",
    "start": "118439",
    "end": "123600"
  },
  {
    "text": "essence of technical debt so if you wanted to do something like take a stored procedure that is 2 000",
    "start": "123600",
    "end": "130560"
  },
  {
    "text": "lines long and before you laugh and say that's unbelievable uh no it's very believable and happens way more often",
    "start": "130560",
    "end": "136739"
  },
  {
    "text": "than you think and probably involves horrible stuff like CLR data types and things like that",
    "start": "136739",
    "end": "142020"
  },
  {
    "text": "so if you want to make a change down there you have to find a way to essentially price that change in to all",
    "start": "142020",
    "end": "147840"
  },
  {
    "text": "the layers above it and that is technical debt and that's where the expense really comes from it's the",
    "start": "147840",
    "end": "153000"
  },
  {
    "text": "layering of basically additional layers on top of lower ones right",
    "start": "153000",
    "end": "158220"
  },
  {
    "text": "so technical debt when you're beginning with the Green Field project it's like a newborn baby",
    "start": "158220",
    "end": "164400"
  },
  {
    "text": "it's totally innocent doesn't have any history and has is nothing but pure potential right that's sort of our Clean",
    "start": "164400",
    "end": "171900"
  },
  {
    "text": "Slate that we're starting with well when you start making architectural choices really early on in the project",
    "start": "171900",
    "end": "178379"
  },
  {
    "text": "that is where technical debt is going to be born initially it begins right there",
    "start": "178379",
    "end": "183440"
  },
  {
    "text": "interest they kind of use a financial analogy here interest on your technical debt occurs",
    "start": "183440",
    "end": "190200"
  },
  {
    "text": "in the form of layering so if I make one technical decision very early on the life cycle of a project let's say it's",
    "start": "190200",
    "end": "196560"
  },
  {
    "text": "the decision to build for let's say we take this back 10 15 years ago and I",
    "start": "196560",
    "end": "201959"
  },
  {
    "text": "decided to build my e-commerce system on top of.net framework well that also means that I've made a decision to keep",
    "start": "201959",
    "end": "208920"
  },
  {
    "text": "my infrastructure married to Windows it means that all my developers need to buy Visual Studio subscriptions and it means",
    "start": "208920",
    "end": "215400"
  },
  {
    "text": "that we're probably going to be you know not able to this is all different now of",
    "start": "215400",
    "end": "220799"
  },
  {
    "text": "course these days but back then those are some of the types of technical debt that would accrue and you know other",
    "start": "220799",
    "end": "226620"
  },
  {
    "text": "ways that could potentially compound in the future is in the form of let's say unknown or unanticipated events that",
    "start": "226620",
    "end": "233640"
  },
  {
    "text": "arrive a good example I remember really clearly of let's say unanticipated technical debt with",
    "start": "233640",
    "end": "239760"
  },
  {
    "text": "the.net platform was back in around 2010 2011 web sockets first emerged on the",
    "start": "239760",
    "end": "246180"
  },
  {
    "text": "scene and this is one node.js was first taking off and kind of becoming a popular alternative to Ruby and asp.net",
    "start": "246180",
    "end": "254400"
  },
  {
    "text": "and other Technologies and one of the things that helps node.js really take off was it had by Far and Away the best",
    "start": "254400",
    "end": "260760"
  },
  {
    "text": "websocket support out of any platform that existed at the time well us.net developers were thinking wow",
    "start": "260760",
    "end": "267000"
  },
  {
    "text": "we would love to have all those same benefits of server push but guess what because our infrastructure is married to",
    "start": "267000",
    "end": "272820"
  },
  {
    "text": "Windows in order for us to get websocket support we actually had to wait for a Windows Server patch to get released and",
    "start": "272820",
    "end": "279600"
  },
  {
    "text": "that also required us to get an is patch which required us to also update the version of.net framework we're using and",
    "start": "279600",
    "end": "286560"
  },
  {
    "text": "required us to update the version of asp.net and you kind of see that's an example of an unanticipated change and",
    "start": "286560",
    "end": "292800"
  },
  {
    "text": "just something that kind of got priced in it's still technical debt nonetheless the purpose of this talk though is to",
    "start": "292800",
    "end": "299940"
  },
  {
    "text": "talk about technical debt you can anticipate some new technology coming out of left field in the browser space",
    "start": "299940",
    "end": "306120"
  },
  {
    "text": "and having and not knowing necessarily how closely your web stack was married to your operating system okay that's not",
    "start": "306120",
    "end": "313380"
  },
  {
    "text": "your fault but the failure to account for problems you can easily see coming",
    "start": "313380",
    "end": "318419"
  },
  {
    "text": "down the road to five ten years in the future that is something that you as an architect need to price into your",
    "start": "318419",
    "end": "325259"
  },
  {
    "text": "designs sooner rather than later and that's really kind of the essence of optionality",
    "start": "325259",
    "end": "330720"
  },
  {
    "text": "technical debt it's full amount is kind of expressed at the time you have to make a change if you have to do",
    "start": "330720",
    "end": "336479"
  },
  {
    "text": "something like migrate from.net framework to dot net six you're not going to know what the full cost of that",
    "start": "336479",
    "end": "341580"
  },
  {
    "text": "is until you start getting into the weeds and doing it right it's not very easy to predict ahead of time",
    "start": "341580",
    "end": "347220"
  },
  {
    "text": "what we're going to talk about today is this is a concept that originally is kind of in finance it's known as",
    "start": "347220",
    "end": "352320"
  },
  {
    "text": "optionality uh stock options or Futures contracts are really good examples of",
    "start": "352320",
    "end": "357419"
  },
  {
    "text": "optionality where someone can purchase a call option it's a right to buy a stock",
    "start": "357419",
    "end": "362580"
  },
  {
    "text": "at a fixed price at some future point in time call options are really useful if you think that the value of a stock is",
    "start": "362580",
    "end": "369660"
  },
  {
    "text": "going to go up at some point in the future or you know I'm from Houston this is like the energy capital of the United",
    "start": "369660",
    "end": "374820"
  },
  {
    "text": "States people buy oil futures for different types of petroleum products and they do that in order to try to keep",
    "start": "374820",
    "end": "381000"
  },
  {
    "text": "their costs down they basically know I'm going to be paying a hundred dollars a barrel for a price of oil uh at you know",
    "start": "381000",
    "end": "387900"
  },
  {
    "text": "some point in the next 12 months and if the price of oil goes beyond that I save a whole bunch of money that way so the",
    "start": "387900",
    "end": "393539"
  },
  {
    "text": "idea is that I pay a premium today I have to put in some money now to get that future and then I have the right to",
    "start": "393539",
    "end": "399720"
  },
  {
    "text": "exercise it at you know basically up until the option contract expires in terms of software with optionality we",
    "start": "399720",
    "end": "407220"
  },
  {
    "text": "pay for optionality by planning ahead and we exercise when we know that our",
    "start": "407220",
    "end": "413160"
  },
  {
    "text": "business and our software need to adjust accordingly in order to meet some business goal",
    "start": "413160",
    "end": "418440"
  },
  {
    "text": "so give you an example here in terms of optionality the further you are outside the circle",
    "start": "418440",
    "end": "425340"
  },
  {
    "text": "the more optionality you have in a green field project you have nothing but options no code is yet written no",
    "start": "425340",
    "end": "431400"
  },
  {
    "text": "infrastructure is yet picked unless you have an I.T Department that's dogmatic which some of us have",
    "start": "431400",
    "end": "437460"
  },
  {
    "text": "but no infrastructure is picked there's no schema there's no customer data all we have are our requirements and the set",
    "start": "437460",
    "end": "443940"
  },
  {
    "text": "of and basically our experience that's the only real thing you're kind of bringing into that project right",
    "start": "443940",
    "end": "449220"
  },
  {
    "text": "well once you start moving further down let's say you get a new product that has",
    "start": "449220",
    "end": "454740"
  },
  {
    "text": "only a few users you still have a lot more options for how you can make changes to that product than you do if",
    "start": "454740",
    "end": "461639"
  },
  {
    "text": "you're in this middle circle right here which is where you have a mission critical product you know so for example uh some of my",
    "start": "461639",
    "end": "467639"
  },
  {
    "text": "customers at Peta Bridge these are all people building large-scale event-driven applications some of their products are",
    "start": "467639",
    "end": "473639"
  },
  {
    "text": "responsible for I've got one customer that basically has a manufacturing line",
    "start": "473639",
    "end": "478979"
  },
  {
    "text": "that is worth probably close to let's say 50 billion dollars on there and it's all being",
    "start": "478979",
    "end": "484199"
  },
  {
    "text": "automated by awka.net and a bunch of other pieces of Technology they do not have a huge amount of options for how",
    "start": "484199",
    "end": "491520"
  },
  {
    "text": "they want to change that because they have to roll it out to a bunch of factories and they have to change all their business procedures and not to",
    "start": "491520",
    "end": "497340"
  },
  {
    "text": "mention the amount of disruption it would cause if they did that so that's an example of a product that doesn't",
    "start": "497340",
    "end": "502740"
  },
  {
    "text": "have a lot of options unless the developers built them into their architecture which is what we're going",
    "start": "502740",
    "end": "508259"
  },
  {
    "text": "to talk about so the big idea behind optionality is",
    "start": "508259",
    "end": "514020"
  },
  {
    "text": "that when you're starting here with a Greenfield project and you don't have any constraints it's to plan ahead for",
    "start": "514020",
    "end": "519959"
  },
  {
    "text": "how your business might possibly change in the future and being able to go ahead and pay a little bit of Premium now in",
    "start": "519959",
    "end": "526800"
  },
  {
    "text": "order to make sure that adjusting to those new business realities isn't a tremendously expensive project later",
    "start": "526800",
    "end": "532440"
  },
  {
    "text": "right so technical debt is basically the destruction of optionalities what that",
    "start": "532440",
    "end": "539580"
  },
  {
    "text": "really is where if I have a whole bunch of customer data and a bunch of business processes and a bunch of built-in",
    "start": "539580",
    "end": "546060"
  },
  {
    "text": "Knowledge from let's say you know if you're running an insurance business all of the claims adjusters know how to use",
    "start": "546060",
    "end": "551880"
  },
  {
    "text": "your internal software today if you want to radically change that you have to retrain all of them that's not as simple",
    "start": "551880",
    "end": "557580"
  },
  {
    "text": "as just a software problem anymore it's a big business issue so the technical debt that we occur",
    "start": "557580",
    "end": "563540"
  },
  {
    "text": "typically happens when we fail to plan for how software might evolve in the future now I'm going to give you some",
    "start": "563540",
    "end": "569279"
  },
  {
    "text": "examples of that from my own personal experience in just a second um a really good example of like a",
    "start": "569279",
    "end": "576180"
  },
  {
    "text": "rapid-fire technical debt accumulation tool is database driven development and the reason why is that unless you are",
    "start": "576180",
    "end": "582360"
  },
  {
    "text": "really confident your requirements aren't going to change or you have made a really simple schema that's very fast",
    "start": "582360",
    "end": "589800"
  },
  {
    "text": "and very flexible you're going to basically be bound by whatever the development constraints are of that",
    "start": "589800",
    "end": "595860"
  },
  {
    "text": "database for a lot of applications that will never realistically be an issue because maybe there are auxiliary",
    "start": "595860",
    "end": "601440"
  },
  {
    "text": "systems that don't get changed very often maybe they're very low traffic or maybe they're in an area of your",
    "start": "601440",
    "end": "606480"
  },
  {
    "text": "business that's fairly stable and you're not anticipating a lot of change in the future however if you're from startup",
    "start": "606480",
    "end": "611940"
  },
  {
    "text": "world like I am where you're launching let's say new products and you're not totally sure what product Market fit",
    "start": "611940",
    "end": "618060"
  },
  {
    "text": "looks like meaning that your business is probably going to adjust a bit over the next couple years this can be a disaster",
    "start": "618060",
    "end": "624120"
  },
  {
    "text": "in the making and that is exactly what happened to me and we'll get into that in the next slide",
    "start": "624120",
    "end": "629459"
  },
  {
    "text": "ah these are some of my favorite Twitter fights I get into about once a quarter",
    "start": "629459",
    "end": "635000"
  },
  {
    "text": "whoever needs to switch databases quick show of hands in this room who has ever",
    "start": "635000",
    "end": "640260"
  },
  {
    "text": "switched a database before in a production system okay the few and the proud thank you",
    "start": "640260",
    "end": "647220"
  },
  {
    "text": "um switching databases should be rare if you find yourself switching databases every year please fire your architect",
    "start": "647220",
    "end": "654480"
  },
  {
    "text": "um but there are cases where that has to be a viable solution and a lot of the",
    "start": "654480",
    "end": "659820"
  },
  {
    "text": "times the reason why people get into the whoever needs to switch databases Camp is because they've painted themselves",
    "start": "659820",
    "end": "665940"
  },
  {
    "text": "into a corner we're switching databases is never a feasible option in other words it's a self-fulfilling prophecy if",
    "start": "665940",
    "end": "672720"
  },
  {
    "text": "you believe that you should never have to switch databases you never make the you never create the options for that is",
    "start": "672720",
    "end": "678240"
  },
  {
    "text": "even viable um on top of that things like the repository pattern gets bashed all the",
    "start": "678240",
    "end": "684959"
  },
  {
    "text": "time probably because people try to make a repository like a one-size-fits-all thing that's not a great idea but",
    "start": "684959",
    "end": "692519"
  },
  {
    "text": "abstracting your data access layer behind some common abstraction uh both that's sort of let's say tailored to a",
    "start": "692519",
    "end": "698519"
  },
  {
    "text": "specific domain and very narrowly scoped actually can be really valuable as a former creating optionality and that'll",
    "start": "698519",
    "end": "705180"
  },
  {
    "text": "come up in my example the basic idea behind this is that",
    "start": "705180",
    "end": "710220"
  },
  {
    "text": "future technical debt can be mitigated by making some architectural choices today so I'm going to use an example from my",
    "start": "710220",
    "end": "716820"
  },
  {
    "text": "last company marked up we did real-time analytics and marketing automation for developers who are building apps for the",
    "start": "716820",
    "end": "723060"
  },
  {
    "text": "windows storm so Windows 8 Windows phone and eventually uh win32 desktop applications",
    "start": "723060",
    "end": "728640"
  },
  {
    "text": "so we're a real-time analytics startup um we originally this is like 2000 yeah 2012. we originally built our minimum",
    "start": "728640",
    "end": "737100"
  },
  {
    "text": "viable product so our first go to market Solution on top of ravendb using their mapreduce indices these worked great for",
    "start": "737100",
    "end": "744360"
  },
  {
    "text": "doing real-time Analytics and I had read ayinde's blog post basically knocking the repository",
    "start": "744360",
    "end": "751620"
  },
  {
    "text": "pattern and calling it an anti-pattern you shouldn't use it blah blah blah so I bought in on that you know Hook Line and",
    "start": "751620",
    "end": "757860"
  },
  {
    "text": "Sinker and basically went and had Raven DB calls everywhere in our system in our",
    "start": "757860",
    "end": "764459"
  },
  {
    "text": "right pipeline in our reporting system in our user registration system uh we basically said you know why bother",
    "start": "764459",
    "end": "770579"
  },
  {
    "text": "having a repository Allende is right this is you know going to be a a way to make sure we don't have unnecessary",
    "start": "770579",
    "end": "775980"
  },
  {
    "text": "abstractions inside our system well as I mentioned down here we were way more successful with our early",
    "start": "775980",
    "end": "782579"
  },
  {
    "text": "customer acquisition efforts than I thought we went from about ten thousand events per day and just in",
    "start": "782579",
    "end": "789600"
  },
  {
    "text": "our analytic system to about five to eight million events per day in the span of a three-day window",
    "start": "789600",
    "end": "795300"
  },
  {
    "text": "so that's like a what four hundred percent uh like day over day increase for three days in a row and the amount",
    "start": "795300",
    "end": "802320"
  },
  {
    "text": "of traffic that we are producing should have been something that Raven DB could handle but alas it could not",
    "start": "802320",
    "end": "809339"
  },
  {
    "text": "as a result of some of our architecture decisions our database logic was spread out everywhere",
    "start": "809339",
    "end": "815399"
  },
  {
    "text": "and Raven DB could not basically keep our reports up to date and this was during a critical window where we were",
    "start": "815399",
    "end": "821160"
  },
  {
    "text": "raising Venture Capital money and trying to basically prove to the market that we had a viable solution so I was staying",
    "start": "821160",
    "end": "828180"
  },
  {
    "text": "up until four o'clock in the morning and getting up at 10 A.M the following day for about three weeks trying to",
    "start": "828180",
    "end": "834899"
  },
  {
    "text": "basically furiously pay off this technical debt so we could successfully complete our fundraise and not lay",
    "start": "834899",
    "end": "840660"
  },
  {
    "text": "everybody off so the real risk here was because we hadn't taken made any effort to isolate",
    "start": "840660",
    "end": "847800"
  },
  {
    "text": "our database this decision away from the rest of our domain logic around transforming events managing customer",
    "start": "847800",
    "end": "853920"
  },
  {
    "text": "data and so forth and we had also depended on a raven DB specific feature these mapreduce indices both of those",
    "start": "853920",
    "end": "861360"
  },
  {
    "text": "choices coupled us very tightly to our database and there was nothing we could do to make Raven scale we even wrote Our",
    "start": "861360",
    "end": "868320"
  },
  {
    "text": "Own replication system and our own database migration system because Raven's built-in tooling utterly failed",
    "start": "868320",
    "end": "874079"
  },
  {
    "text": "at both so we threw everything we could at that and we had a uh I think a 64",
    "start": "874079",
    "end": "879899"
  },
  {
    "text": "core database instance trying to go ahead and process all this and if I showed you the graph what we basically",
    "start": "879899",
    "end": "885540"
  },
  {
    "text": "saw was CPU utilization at 100 percent disk utilization at 100 memory at like 1",
    "start": "885540",
    "end": "892440"
  },
  {
    "text": "12 the amount it should be using it basically wasn't using memory very efficiently so this created a really high risk",
    "start": "892440",
    "end": "899579"
  },
  {
    "text": "situation for our business and we had to basically do an emergency migration off of ravendb to something more scalable",
    "start": "899579",
    "end": "905820"
  },
  {
    "text": "otherwise our business would fail and we would not be able to successfully complete our fundraise",
    "start": "905820",
    "end": "912540"
  },
  {
    "text": "so here's what we did in the span of about yeah three to four weeks we refactored our system uh to an",
    "start": "912540",
    "end": "919500"
  },
  {
    "text": "event-driven processing model is what we did and I created a piece of middleware that could take all the events the",
    "start": "919500",
    "end": "925800"
  },
  {
    "text": "clients were sending to our HTTP API that was another form of technical debt but in this case it didn't really affect",
    "start": "925800",
    "end": "931980"
  },
  {
    "text": "us too bad uh we had to make sure the same events that were already embedded in those apps could get reprocessed in a",
    "start": "931980",
    "end": "937740"
  },
  {
    "text": "new system and produce the same reports so we created some middleware that could translate those events into an analytic",
    "start": "937740",
    "end": "944459"
  },
  {
    "text": "Delta basically it's a sort of a way of incrementing a counter without knowing what its full value is",
    "start": "944459",
    "end": "949800"
  },
  {
    "text": "and we separated our read and write models into discrete services that were abstracted away essentially repositories",
    "start": "949800",
    "end": "955920"
  },
  {
    "text": "uh well services plus repositories internally um the other thing that we couldn't",
    "start": "955920",
    "end": "961620"
  },
  {
    "text": "really do very well with our original implementation is because we were so closely married to our database we",
    "start": "961620",
    "end": "967920"
  },
  {
    "text": "didn't really have the ability to unit test we had to integration test everything with the Raven DB local instance up and running which again made",
    "start": "967920",
    "end": "975600"
  },
  {
    "text": "it very difficult for us to start making this change trying to move towards a database system that'd be more scalable",
    "start": "975600",
    "end": "981600"
  },
  {
    "text": "so we were able to add unit tests back because we had effectively abstracted away our persistence layer now",
    "start": "981600",
    "end": "988320"
  },
  {
    "text": "um we created a little DSL that allowed Dynamic per user filtering of events that was super useful and greatly",
    "start": "988320",
    "end": "994800"
  },
  {
    "text": "improved our developer throughput the database we switched to in case someone's at wondering is Apache",
    "start": "994800",
    "end": "1000320"
  },
  {
    "text": "Cassandra which is a big super right heavy system that's great at real-time analytics and we were able to replace",
    "start": "1000320",
    "end": "1006500"
  },
  {
    "text": "most of Raven's functionality uh there were a couple things we couldn't really do that we had to defer for a basically",
    "start": "1006500",
    "end": "1012980"
  },
  {
    "text": "another project in a future day but this helped us quite a bit and allowed us to get past these scaling challenges and to",
    "start": "1012980",
    "end": "1019220"
  },
  {
    "text": "scale horizontally going forward so what did we do differently here well basically we decided that you know",
    "start": "1019220",
    "end": "1025760"
  },
  {
    "text": "what we're not going to repeat the same mistake of putting all our eggs in one basket with one database",
    "start": "1025760",
    "end": "1032600"
  },
  {
    "text": "solution when we eventually would reach a scale we were doing about 100 million events today from millions of concurrent",
    "start": "1032600",
    "end": "1039438"
  },
  {
    "text": "users in the span of like a three hour window in the U.S so thankfully Cassandra was able to",
    "start": "1039439",
    "end": "1046040"
  },
  {
    "text": "scale with that but we were hedging our bets that you know what if if Cassandra started having problems and we started",
    "start": "1046040",
    "end": "1051320"
  },
  {
    "text": "reaching the 100 million billion you know sort of area we wanted to have the ability to move to something else if we",
    "start": "1051320",
    "end": "1057559"
  },
  {
    "text": "needed to that became a valuable option for us given the types of scaling issues we were dealing with on top of that we",
    "start": "1057559",
    "end": "1064580"
  },
  {
    "text": "really wanted to have unit testing and kind of keep our business logic around Computing Deltas completely isolated",
    "start": "1064580",
    "end": "1070039"
  },
  {
    "text": "from the database the real issue here is that software developers in terms of what the modern",
    "start": "1070039",
    "end": "1076100"
  },
  {
    "text": "consensus is around software design is you ain't going to need it build for",
    "start": "1076100",
    "end": "1081260"
  },
  {
    "text": "your requirements today anything I've worked with regard to Future requirements is tomorrow use problem",
    "start": "1081260",
    "end": "1086780"
  },
  {
    "text": "right future you they can figure it out well that is a really catastrophically",
    "start": "1086780",
    "end": "1092299"
  },
  {
    "text": "stupid decision in a lot of cases and the reason why is that yagni comes with an expiration date you are it really",
    "start": "1092299",
    "end": "1099020"
  },
  {
    "text": "should be you are eventually going to need it probably good example if I'm launching an",
    "start": "1099020",
    "end": "1104840"
  },
  {
    "text": "e-commerce startup and I go ahead and marry all of my business processes and designs to let's say stripe for doing my",
    "start": "1104840",
    "end": "1111440"
  },
  {
    "text": "credit card processing and subscriptions that's probably fine for the first several years of my startups business",
    "start": "1111440",
    "end": "1117080"
  },
  {
    "text": "right but if at some point in the future I want to expand into India or other",
    "start": "1117080",
    "end": "1122840"
  },
  {
    "text": "countries where stripe isn't the best processor or there's a local processor that works better or if I want to try to",
    "start": "1122840",
    "end": "1128600"
  },
  {
    "text": "switch to a different processor to reduce my charge fees so I can actually get more profit per transaction if I'm",
    "start": "1128600",
    "end": "1134840"
  },
  {
    "text": "totally married to stripe and everything in my API and in my data system is all stripe Centric that is going to be an",
    "start": "1134840",
    "end": "1141380"
  },
  {
    "text": "enormously expensive project down the road whereas if I design my payment processor system to be inherently",
    "start": "1141380",
    "end": "1147260"
  },
  {
    "text": "plugable from day one that becomes a much more achievable project in the future adding a new payment provider to",
    "start": "1147260",
    "end": "1153620"
  },
  {
    "text": "service customers and this geography or at or replacing stripe for new customers in the future to lower my credit card",
    "start": "1153620",
    "end": "1159440"
  },
  {
    "text": "fees and that's a requirement you can easily anticipate if you're going into that business that you know what there",
    "start": "1159440",
    "end": "1165919"
  },
  {
    "text": "will be some point when the business asks us to support a new credit card processor that's inevitable in any sort",
    "start": "1165919",
    "end": "1171380"
  },
  {
    "text": "of you know e-commerce customer facing business we need to build in the option",
    "start": "1171380",
    "end": "1176600"
  },
  {
    "text": "to do that when we're first getting started not engage in a giant you know",
    "start": "1176600",
    "end": "1181880"
  },
  {
    "text": "emergency fire drill sort of uh hair on fire exercise like we did at marked up",
    "start": "1181880",
    "end": "1188360"
  },
  {
    "text": "so let's talk about high optionality programming what are some techniques that will generally speaking preserve",
    "start": "1188360",
    "end": "1194780"
  },
  {
    "text": "optionality a lot better than things like crud for instance crud does not really preserve optionality so what are",
    "start": "1194780",
    "end": "1201440"
  },
  {
    "text": "some techniques that will help us do that well this isn't a exhaustive list these",
    "start": "1201440",
    "end": "1206900"
  },
  {
    "text": "are the big ones that in my personal experience have helped me a lot and any project where I did not start with this",
    "start": "1206900",
    "end": "1213320"
  },
  {
    "text": "I eventually ended up there through an expensive refactoring exercise that I'm trying to help you avoid",
    "start": "1213320",
    "end": "1219620"
  },
  {
    "text": "so event driven programming is probably the dominant one followed by event sourcing cqrs actors naturally and",
    "start": "1219620",
    "end": "1228260"
  },
  {
    "text": "extend only design let's talk about event driven programming first and how that preserves",
    "start": "1228260",
    "end": "1233299"
  },
  {
    "text": "optionality well if I have let's say a traditional RPC service let's say an HTTP API or you",
    "start": "1233299",
    "end": "1241700"
  },
  {
    "text": "know uh maybe some most types of grpc services I basically send a request and",
    "start": "1241700",
    "end": "1247220"
  },
  {
    "text": "I get a response back from the same server I was talking to and you know that's one of the Mill web",
    "start": "1247220",
    "end": "1252679"
  },
  {
    "text": "application development with an event driven system I have a lot more inherent flexibility",
    "start": "1252679",
    "end": "1258620"
  },
  {
    "text": "in the communication models between my client and my server than I do with an RPC system with our PC you're",
    "start": "1258620",
    "end": "1265100"
  },
  {
    "text": "essentially limited to request response that's the communication pattern that you get maybe you could also do one way",
    "start": "1265100",
    "end": "1270679"
  },
  {
    "text": "on there you could do fire and forget messaging by just returning a HTTP response before you do any processing",
    "start": "1270679",
    "end": "1275960"
  },
  {
    "text": "but it's all in essence request response with an event driven system you have a",
    "start": "1275960",
    "end": "1281720"
  },
  {
    "text": "lot more different possible messaging patterns out there than merely request response for example down here this is",
    "start": "1281720",
    "end": "1287539"
  },
  {
    "text": "what a publish And subscribe messaging pattern might look like you have a client sends one message to the server",
    "start": "1287539",
    "end": "1293480"
  },
  {
    "text": "and it can get a infinite stream of responses as things happen in real time",
    "start": "1293480",
    "end": "1298760"
  },
  {
    "text": "later and the technology you can use to implement this is pretty diverse you could use in-service bus you could use",
    "start": "1298760",
    "end": "1304460"
  },
  {
    "text": "awka.net you could use Orleans or you could use something like grpc to do that",
    "start": "1304460",
    "end": "1309860"
  },
  {
    "text": "if you wanted to so I have a lot more choices around how things work with an",
    "start": "1309860",
    "end": "1315200"
  },
  {
    "text": "inherently event driven system gives me more possible patterns and tools to leverage than a simple RPC system does",
    "start": "1315200",
    "end": "1323120"
  },
  {
    "text": "now the idea behind events let me pause here for a second",
    "start": "1323120",
    "end": "1328539"
  },
  {
    "text": "yeah there we go the idea behind events",
    "start": "1328539",
    "end": "1335120"
  },
  {
    "text": "there we go is that in essence um they have additional properties Beyond let's say just the simple payload",
    "start": "1335120",
    "end": "1341600"
  },
  {
    "text": "so you do have the payload that's your datum but you also usually have a reply to address now that can be explicitly",
    "start": "1341600",
    "end": "1347179"
  },
  {
    "text": "exposed like it would be in a octod.net system but it might also be implicit via",
    "start": "1347179",
    "end": "1352280"
  },
  {
    "text": "something like rapidmq where you might have a reply to channel on there and you don't necessarily know who's listening",
    "start": "1352280",
    "end": "1357380"
  },
  {
    "text": "to it um that's sort of the the first bit messaging and event driven systems are",
    "start": "1357380",
    "end": "1363080"
  },
  {
    "text": "almost always asynchronous so when you go ahead and pass an event somewhere you might be given a task you can a weight",
    "start": "1363080",
    "end": "1369380"
  },
  {
    "text": "on uh if you want to do requests uh request response style over a message",
    "start": "1369380",
    "end": "1374659"
  },
  {
    "text": "driven system but you don't have to most often these systems tend to be pretty fire and forget I write a message in a",
    "start": "1374659",
    "end": "1381440"
  },
  {
    "text": "rabbitmq I get an acknowledgment that the message is queued and then I don't worry about who's processing it I move",
    "start": "1381440",
    "end": "1386659"
  },
  {
    "text": "on and go back to the rest of my work that gives us a lot of flexibility around how processing is done and most",
    "start": "1386659",
    "end": "1394460"
  },
  {
    "text": "importantly with messaging is that the messages are always stored and serialized so there's",
    "start": "1394460",
    "end": "1400280"
  },
  {
    "text": "actually a real object you can point to that correlates to this request an HTTP request is a transient in-flight object",
    "start": "1400280",
    "end": "1407419"
  },
  {
    "text": "that has a real-time limit associated with it that's your timeout value right well with messaging you're a little bit",
    "start": "1407419",
    "end": "1413179"
  },
  {
    "text": "more flexible you have this serialized message body and it can be processed immediately if you have let's say a",
    "start": "1413179",
    "end": "1419000"
  },
  {
    "text": "bunch of competing consumers all trying to drain a queue or it could be processed over and over again in the",
    "start": "1419000",
    "end": "1424580"
  },
  {
    "text": "future if you have a tool like Apache Kafka where you have arbitrary clients and arbitrary groups that read",
    "start": "1424580",
    "end": "1430100"
  },
  {
    "text": "partitions over and over again it's a lot more flexible than what an RPC system can do",
    "start": "1430100",
    "end": "1436520"
  },
  {
    "text": "on top of that message oriented systems have the ability to change the order and",
    "start": "1436520",
    "end": "1442039"
  },
  {
    "text": "which requests are processed in a you know HTTP or RPC system everything's got",
    "start": "1442039",
    "end": "1447500"
  },
  {
    "text": "to be processed live right now you don't necessarily have the ability to reorder uh how those HTTP requests are processed",
    "start": "1447500",
    "end": "1454760"
  },
  {
    "text": "and the message driven system this is really trivial the recipient of the message can say okay before I process",
    "start": "1454760",
    "end": "1461000"
  },
  {
    "text": "this message I need to wait for this one to arrive because that has the data I need in order to process this request",
    "start": "1461000",
    "end": "1466220"
  },
  {
    "text": "and this is what we would call a deferral in a message processing system in a tool like akka.net you would use",
    "start": "1466220",
    "end": "1472340"
  },
  {
    "text": "Behavior switching and stashing to do that and then the most powerful property of an event driven system is that events",
    "start": "1472340",
    "end": "1478159"
  },
  {
    "text": "can be forwarded delegated or even broadcast to multiple parties you can't do that with a request or the function",
    "start": "1478159",
    "end": "1484700"
  },
  {
    "text": "call so the fact that you have this artifact this message that has possibly unique ID it can be serialized into a",
    "start": "1484700",
    "end": "1492020"
  },
  {
    "text": "byte array and can be shared across multiple parties is an inherently more flexible programming model than what a",
    "start": "1492020",
    "end": "1498980"
  },
  {
    "text": "purely procedural sort of application is going to look like",
    "start": "1498980",
    "end": "1504080"
  },
  {
    "text": "and so in terms of the interaction patterns for a message driven system these are going to be inherently more",
    "start": "1504080",
    "end": "1510200"
  },
  {
    "text": "diverse than what you get with RPC I can have a broadcast interaction where one party publishes its message to many",
    "start": "1510200",
    "end": "1516860"
  },
  {
    "text": "receivers this opens the door for all sorts of interesting communication patterns in a you know distributed",
    "start": "1516860",
    "end": "1522440"
  },
  {
    "text": "system I can do a proxy pattern this is basically how you delegate work inside an event driven system where I can hand",
    "start": "1522440",
    "end": "1528919"
  },
  {
    "text": "off the responsibility for processing a message from one party to another if I want to and then we also have",
    "start": "1528919",
    "end": "1534919"
  },
  {
    "text": "relationships like publish And subscribe where I can kind of invert control and the client basically receives",
    "start": "1534919",
    "end": "1540559"
  },
  {
    "text": "notifications from the server when State changes rather than the client having to pull the server for those changes you",
    "start": "1540559",
    "end": "1546679"
  },
  {
    "text": "know repeatedly down the road so the first sort of tool we're going to use for kind of limiting our technical debt",
    "start": "1546679",
    "end": "1553279"
  },
  {
    "text": "accumulation there we go yeah one-way messaging the first tool",
    "start": "1553279",
    "end": "1558679"
  },
  {
    "text": "the first kind of stop is using an event driven architecture generally speaking",
    "start": "1558679",
    "end": "1563840"
  },
  {
    "text": "event driven architectures scale really well with domain complexity and they buy you a lot more freedom in the future if",
    "start": "1563840",
    "end": "1571520"
  },
  {
    "text": "you need to change how processing is done a procedural system is going to be much harder to adjust because it's not",
    "start": "1571520",
    "end": "1578000"
  },
  {
    "text": "inherently flexible in the same way that this is the other reason why we want to look at event driven architectures is it",
    "start": "1578000",
    "end": "1583820"
  },
  {
    "text": "lends itself really well to the second third and fourth patterns which is event sourcing",
    "start": "1583820",
    "end": "1589460"
  },
  {
    "text": "why does event sourcing help us mitigate technical debt well this is how they Ock",
    "start": "1589460",
    "end": "1594500"
  },
  {
    "text": "it up resistance works for instance where we go ahead and we process messages in the order in which we",
    "start": "1594500",
    "end": "1600080"
  },
  {
    "text": "receive them initially for a single actor and a single actor represents like one business entity Insider system so if",
    "start": "1600080",
    "end": "1607039"
  },
  {
    "text": "I'm keeping track of let's say session state for a user and I want to see what",
    "start": "1607039",
    "end": "1612080"
  },
  {
    "text": "sorts of things that user might be looking at on our e-commerce site so I can try to personalize a recommendation",
    "start": "1612080",
    "end": "1617360"
  },
  {
    "text": "for them in real time I might be receiving a stream of Click events here inside the actor for that user and I",
    "start": "1617360",
    "end": "1624140"
  },
  {
    "text": "have an in-memory representation of that user's click stream right well every single time we go and",
    "start": "1624140",
    "end": "1631100"
  },
  {
    "text": "communicate with that actor that actor has an in-memory copy of that state but that state is also being event sourced",
    "start": "1631100",
    "end": "1637159"
  },
  {
    "text": "one click stream event at a time to whatever our database is and our database could be SQL could be Azure",
    "start": "1637159",
    "end": "1642980"
  },
  {
    "text": "table storage it's not really relevant it all kind of looks like a key value store inside this system",
    "start": "1642980",
    "end": "1648559"
  },
  {
    "text": "now how does this go and preserve optionality for US versus let's say just writing rows or modifying object",
    "start": "1648559",
    "end": "1655820"
  },
  {
    "text": "modifying a document in mongodb or inserting a row into SQL well Yep this is how we go and replay it",
    "start": "1655820",
    "end": "1664760"
  },
  {
    "text": "the reason why is that event sourcing inherently lends itself to providing a",
    "start": "1664760",
    "end": "1669980"
  },
  {
    "text": "complete history of how something changed it gives us the ability to see that the user did this did that did that",
    "start": "1669980",
    "end": "1675860"
  },
  {
    "text": "and that and that leads to their current state whatever that is right now that state could be a recommendation for what",
    "start": "1675860",
    "end": "1682460"
  },
  {
    "text": "sorts of products we should show that user that state could be the account balance for a bank account that state",
    "start": "1682460",
    "end": "1688460"
  },
  {
    "text": "could be the current state of a device operating a process line control system in a factory doesn't really necessarily",
    "start": "1688460",
    "end": "1695059"
  },
  {
    "text": "matter it works for any domain but the state can always be rebuilt by",
    "start": "1695059",
    "end": "1703100"
  },
  {
    "text": "replaying previous events this means that your current state the current application state of your objects is",
    "start": "1703100",
    "end": "1709159"
  },
  {
    "text": "something that you can reprogram on the fly without having to touch your data if you want to if you want to make an",
    "start": "1709159",
    "end": "1715039"
  },
  {
    "text": "update to the code that reconstitutes your state it's really easy to do that because it is effectively separate from",
    "start": "1715039",
    "end": "1721340"
  },
  {
    "text": "the data the data is all those past events they were immutable they are at rest inside your database somewhere and",
    "start": "1721340",
    "end": "1727760"
  },
  {
    "text": "you can't change what they mean right but you can go ahead and change how you",
    "start": "1727760",
    "end": "1732860"
  },
  {
    "text": "basically constitute those events in order to represent the state of your object so a good example if we change",
    "start": "1732860",
    "end": "1739520"
  },
  {
    "text": "the types of let's say um types of bank accounts that we support in our banking system and I want to have",
    "start": "1739520",
    "end": "1746240"
  },
  {
    "text": "the ability to show pending transactions and pending account balances as separately from the posted balance I",
    "start": "1746240",
    "end": "1752539"
  },
  {
    "text": "could reasonably do that by adding a new event type that represents pending operations and replaying all my old",
    "start": "1752539",
    "end": "1758419"
  },
  {
    "text": "types and I'll have in one section the current balance and then the pending balance and that doesn't require me to",
    "start": "1758419",
    "end": "1765200"
  },
  {
    "text": "do a dangerous data migration or anything else at all because all those old events that represent the user's",
    "start": "1765200",
    "end": "1770480"
  },
  {
    "text": "account history are still there inside the database so the way the state is built can be",
    "start": "1770480",
    "end": "1776840"
  },
  {
    "text": "changed without changing the events themselves that is a very powerful option another powerful option again I'll use a",
    "start": "1776840",
    "end": "1783500"
  },
  {
    "text": "financial example is that historical events can be replayed and reused in new",
    "start": "1783500",
    "end": "1789140"
  },
  {
    "text": "forms aside from what your application does you can use them for things like simulations or predictions or you can",
    "start": "1789140",
    "end": "1795799"
  },
  {
    "text": "even use them for validating a future version of the application for instance one of the ways they do testing of",
    "start": "1795799",
    "end": "1803240"
  },
  {
    "text": "really complex pieces of software like massively multiplayer online RPGs is by",
    "start": "1803240",
    "end": "1808520"
  },
  {
    "text": "replaying a saved game over the new client the reason why is it's not possible to go ahead and write unit",
    "start": "1808520",
    "end": "1814399"
  },
  {
    "text": "tests for every possible interaction that can happen between players so you want to go and take all the different",
    "start": "1814399",
    "end": "1820640"
  },
  {
    "text": "let's say events that occurred over the course of a game session and replay them through the new client and look for",
    "start": "1820640",
    "end": "1825980"
  },
  {
    "text": "unanticipated changes regressions that might occur there really easy to do that with an Event Source system we use this",
    "start": "1825980",
    "end": "1833059"
  },
  {
    "text": "for regression testing future versions of marked up actually we use it for doing a combination of load testing and",
    "start": "1833059",
    "end": "1839539"
  },
  {
    "text": "also making sure that our analog system work correctly these same events with the new code should still produce the",
    "start": "1839539",
    "end": "1845659"
  },
  {
    "text": "same total values as the old one lastly another option that event",
    "start": "1845659",
    "end": "1851299"
  },
  {
    "text": "sourcing gives us is the ability to safely introduce new event types without modifying existing",
    "start": "1851299",
    "end": "1857840"
  },
  {
    "text": "data the immutability of existing customer and business data is actually a really important selling point from the",
    "start": "1857840",
    "end": "1864679"
  },
  {
    "text": "riskiness of a system how many of you have had a automated database migration",
    "start": "1864679",
    "end": "1870260"
  },
  {
    "text": "go wrong in a production system before let's all be honest it can happen and",
    "start": "1870260",
    "end": "1876860"
  },
  {
    "text": "that's basically as a result of the fact that you're changing an object in a way that is not intrinsically safe is what's",
    "start": "1876860",
    "end": "1883340"
  },
  {
    "text": "going on there you're doing some sort of destructive action against your schema migration potentially we're going to",
    "start": "1883340",
    "end": "1888919"
  },
  {
    "text": "address how to manage that issue in the final section which is extend only design we'll get to that in a moment but",
    "start": "1888919",
    "end": "1894380"
  },
  {
    "text": "event sourcing naturally lends itself to that type of extension as well the other sort of thing that's",
    "start": "1894380",
    "end": "1900080"
  },
  {
    "text": "inherently useful about event sourcing is that typically it relies on really simple key value store architectures",
    "start": "1900080",
    "end": "1905720"
  },
  {
    "text": "this means that you can actually use event sourcing with pretty much any database out there even something really",
    "start": "1905720",
    "end": "1911000"
  },
  {
    "text": "simple like Azure table storage will work fine so you're not basically using um",
    "start": "1911000",
    "end": "1916520"
  },
  {
    "text": "super let's say bespoke database features that don't translate very well to another database in the event that",
    "start": "1916520",
    "end": "1922700"
  },
  {
    "text": "you needed to migrate in the future and honestly something that's pretty simple and robust like postgres will probably scale just fine for a really large Event",
    "start": "1922700",
    "end": "1929539"
  },
  {
    "text": "Source system because again we're using really simple constructs there's no left",
    "start": "1929539",
    "end": "1934640"
  },
  {
    "text": "outer joins against synthetic tables in here right now the next pattern that we're going to",
    "start": "1934640",
    "end": "1940940"
  },
  {
    "text": "get to and these all kind of uh compile on top of each other is cqrs command and query responsibility segregation",
    "start": "1940940",
    "end": "1948380"
  },
  {
    "text": "the idea behind this if you're not familiar with cqrs is basically to separate your read and write models from",
    "start": "1948380",
    "end": "1953659"
  },
  {
    "text": "each other uh one mistake that a lot of developers often make is having their read and write models be the exact same",
    "start": "1953659",
    "end": "1959899"
  },
  {
    "text": "thing and the reason why that doesn't work is the way there's impedance mismatch but the other",
    "start": "1959899",
    "end": "1965960"
  },
  {
    "text": "potential issue with it is is that certain databases are faster at performing reads and they are performing",
    "start": "1965960",
    "end": "1971120"
  },
  {
    "text": "rights and if your system becomes increasingly write heavy trying to have reads and rights use the same model is",
    "start": "1971120",
    "end": "1976940"
  },
  {
    "text": "going to create a lot of inherent friction and tension inside the system so the idea behind this is essentially",
    "start": "1976940",
    "end": "1982520"
  },
  {
    "text": "your right models should be optimized for rights your read models should be optimized for reads now you have a lot",
    "start": "1982520",
    "end": "1988399"
  },
  {
    "text": "of flexibility on how you produce a read model from your rights that's something you can do inside your application it's",
    "start": "1988399",
    "end": "1995179"
  },
  {
    "text": "something you could do with a database feature like like a view if you wanted to a materialized view",
    "start": "1995179",
    "end": "2000279"
  },
  {
    "text": "but the basic gist behind this is that you should optimize your models separately",
    "start": "2000279",
    "end": "2005860"
  },
  {
    "text": "so in the case of let's say our Event Source system it's optimized for super fast super simple rights that can be",
    "start": "2005860",
    "end": "2012340"
  },
  {
    "text": "done at high rates of speed even in a relational database like SQL Server which is traditionally a little bit",
    "start": "2012340",
    "end": "2017740"
  },
  {
    "text": "slower handling rights than something like mongodb or redis perhaps but with our read models we can go ahead",
    "start": "2017740",
    "end": "2024159"
  },
  {
    "text": "and build something that's a lot richer and a lot closer to the type of requirements your business users might actually want so if you want to have a",
    "start": "2024159",
    "end": "2030760"
  },
  {
    "text": "really nice reporting system or you want to go ahead and use you know SQL Server analysis services to produce a nice data",
    "start": "2030760",
    "end": "2037179"
  },
  {
    "text": "Cube your read models are what really handle that and they are kept separate from your right models and usually you",
    "start": "2037179",
    "end": "2043720"
  },
  {
    "text": "have a processor that will go ahead and either materialize the the read View at",
    "start": "2043720",
    "end": "2048878"
  },
  {
    "text": "the time the shortly after the ride occurs or you might use a database feature to go and do that potentially",
    "start": "2048879",
    "end": "2054460"
  },
  {
    "text": "the uh the real big benefit from an optionality point of view here is that you can always change your read models",
    "start": "2054460",
    "end": "2060940"
  },
  {
    "text": "independently from the data that's at rest you can always essentially rerun your projection process and recreate",
    "start": "2060940",
    "end": "2067240"
  },
  {
    "text": "those on the Fly there's synthetic data in other words right the thing we're trying to avoid doing with event",
    "start": "2067240",
    "end": "2073000"
  },
  {
    "text": "sourcing and cqrs is taking the valuable business data we've already recorded and",
    "start": "2073000",
    "end": "2078099"
  },
  {
    "text": "touching it in a potentially destructive way that's what we're trying to avoid from a business risk perspective",
    "start": "2078099",
    "end": "2083980"
  },
  {
    "text": "gqrs helps us do that by making sure that all of our read models can essentially be reproduced on the fly",
    "start": "2083980",
    "end": "2089440"
  },
  {
    "text": "when we need to because all the data that was written is still there and it's not inherently modified as part of our",
    "start": "2089440",
    "end": "2096638"
  },
  {
    "text": "projection process here the next option that we get out of this is that the performance characteristics",
    "start": "2096639",
    "end": "2103359"
  },
  {
    "text": "for read and write models can be tuned separately if you need to we might need to have a super efficient right model",
    "start": "2103359",
    "end": "2109420"
  },
  {
    "text": "for being able to handle lots of you know let's say millions of operations per second potentially but our read",
    "start": "2109420",
    "end": "2114940"
  },
  {
    "text": "model needs to be optimized for maybe being able to take a fairly large",
    "start": "2114940",
    "end": "2120040"
  },
  {
    "text": "amount of data and compress it into a really small HTTP response size or a really small analytic Delta we serve up",
    "start": "2120040",
    "end": "2126460"
  },
  {
    "text": "over signalr something like that you have the ability to kind of performance tune each of these individually which is",
    "start": "2126460",
    "end": "2131740"
  },
  {
    "text": "really useful on top of that not just tuning the performance but also tuning how human friendly they are your",
    "start": "2131740",
    "end": "2138400"
  },
  {
    "text": "right model should probably be machine friendly if you care about performance if you care about not getting fired your",
    "start": "2138400",
    "end": "2144640"
  },
  {
    "text": "read model should be human friendly that makes sense all right",
    "start": "2144640",
    "end": "2150220"
  },
  {
    "text": "and then yeah on top of that you can actually potentially use separate databases for reads and rights if you want to a good example of that we had a",
    "start": "2150220",
    "end": "2157000"
  },
  {
    "text": "customer that does uh really super detailed financial reporting for like government compliance and they use",
    "start": "2157000",
    "end": "2163720"
  },
  {
    "text": "basically an Event Source system on top of postgres for doing all of their inbound inbound rights and we used",
    "start": "2163720",
    "end": "2171579"
  },
  {
    "text": "basically kind of a don't hate me for this we use an Entity framework sort of schema for actually",
    "start": "2171579",
    "end": "2177460"
  },
  {
    "text": "going and producing the real reports Auditors would use inside their system and that was done all on top of postgres",
    "start": "2177460",
    "end": "2182800"
  },
  {
    "text": "as well but I could very easily have done that on SQL Server if I needed to there would have been very little cost",
    "start": "2182800",
    "end": "2188680"
  },
  {
    "text": "to doing that the last thing I go ahead and mention as far as the event as the sort of event",
    "start": "2188680",
    "end": "2194680"
  },
  {
    "text": "driven part is actors actors are Dynamic and they give you the ability to kind of",
    "start": "2194680",
    "end": "2199780"
  },
  {
    "text": "partition how you process streams of events that are inside your system so for instance I can go ahead and have one",
    "start": "2199780",
    "end": "2206859"
  },
  {
    "text": "actor per business entity that's being updated in real time I can have stateless actors that perform tasks like",
    "start": "2206859",
    "end": "2213400"
  },
  {
    "text": "sending transactional emails or writing to the database or calling a web API they're inherently flexible pieces of",
    "start": "2213400",
    "end": "2220780"
  },
  {
    "text": "code that are designed to be run in parallel with lots of other instances of themselves in order to achieve maximum",
    "start": "2220780",
    "end": "2227500"
  },
  {
    "text": "throughput and CPU utilization well what makes actors useful from an",
    "start": "2227500",
    "end": "2232780"
  },
  {
    "text": "optionality standpoint is their dynamism it's the fact that we can basically change where work is happening and how",
    "start": "2232780",
    "end": "2239320"
  },
  {
    "text": "work is done on the fly as we're receiving events in real time this is what a simple akadona actor",
    "start": "2239320",
    "end": "2246579"
  },
  {
    "text": "looks like for instance we have a little base type this receive actor and then we have some state in this case my state is",
    "start": "2246579",
    "end": "2252220"
  },
  {
    "text": "just our logging system handle and then we have the different types of message handlers that we're processing and these",
    "start": "2252220",
    "end": "2257380"
  },
  {
    "text": "messages are can be sent in memory or they can be sent over the network akka.net doesn't care and that's kind of",
    "start": "2257380",
    "end": "2262900"
  },
  {
    "text": "invisible to you as the end user and then you have some C sharp code or F sharp code optionally in here for being",
    "start": "2262900",
    "end": "2269260"
  },
  {
    "text": "able to do processing and in this case I'm scheduling a delayed reply back to the sender here if I just called",
    "start": "2269260",
    "end": "2275320"
  },
  {
    "text": "sender.tel I'll be replying to them back in real time one of the things that this actor can do",
    "start": "2275320",
    "end": "2280660"
  },
  {
    "text": "I'll skip this part one of the things the actors can inherently do is change their behavior",
    "start": "2280660",
    "end": "2287140"
  },
  {
    "text": "at runtime as they're processing a message I can say instead of processing we'll go back here",
    "start": "2287140",
    "end": "2293560"
  },
  {
    "text": "instead of processing this ping message using this function changed using this function instead until we get this",
    "start": "2293560",
    "end": "2300099"
  },
  {
    "text": "critical event that we're waiting for so imagine building something like a state machine for some part of your business",
    "start": "2300099",
    "end": "2305859"
  },
  {
    "text": "if you're doing something like transactional processing for an e-commerce system you might say okay the",
    "start": "2305859",
    "end": "2311619"
  },
  {
    "text": "first thing we need to do is submit the payment information to our payment Gateway and see if that result comes",
    "start": "2311619",
    "end": "2317200"
  },
  {
    "text": "back successfully if that result doesn't come back successfully we have a whole error flow we need to go through where",
    "start": "2317200",
    "end": "2322540"
  },
  {
    "text": "we let the user know why their card was declined we probably have to send them an email we probably still have to preserve everything in their cart or",
    "start": "2322540",
    "end": "2329440"
  },
  {
    "text": "maybe we might schedule a quick retry to see if it goes through a second time right whatever the case may be and if",
    "start": "2329440",
    "end": "2335800"
  },
  {
    "text": "the credit card transaction goes through successfully then we have a fulfillment process the actor is going to start running through where we might talk to",
    "start": "2335800",
    "end": "2342339"
  },
  {
    "text": "our fulfillment server and make sure that there's a entry for getting this product loaded into our shipping partner",
    "start": "2342339",
    "end": "2348220"
  },
  {
    "text": "and getting that out the door and actors can basically switch Behavior really quickly with a very minimal a code in",
    "start": "2348220",
    "end": "2355240"
  },
  {
    "text": "order to handle these types of cases this is a lot simpler because it's all self-contained inside one object that",
    "start": "2355240",
    "end": "2361960"
  },
  {
    "text": "owns this unit of work that it is trying to coordinate that across a whole bunch of different microservices or a whole",
    "start": "2361960",
    "end": "2368020"
  },
  {
    "text": "bunch of different procedural classes that are all spread out so the ability for us to kind of",
    "start": "2368020",
    "end": "2373359"
  },
  {
    "text": "dynamically shift How We Do processing in real time is very powerful exists the ability to compress what could be an",
    "start": "2373359",
    "end": "2380380"
  },
  {
    "text": "enormous amount of business logic into a relatively small amount of code so actors and optionality",
    "start": "2380380",
    "end": "2387520"
  },
  {
    "text": "well one of the things they also make possible is the ability to query your live application State at runtime if you",
    "start": "2387520",
    "end": "2394480"
  },
  {
    "text": "want to if I want to basically know what is the total amount of orders that are being processed right now that is very",
    "start": "2394480",
    "end": "2400839"
  },
  {
    "text": "trivial to implement with actors doing that with database driven development would probably require you to maintain a",
    "start": "2400839",
    "end": "2407380"
  },
  {
    "text": "whole separate set of calls to redis where you need to keep update or increment a counter decrement it then",
    "start": "2407380",
    "end": "2413740"
  },
  {
    "text": "you have to go ahead and basically add an error handling and retrying if that query doesn't go through whereas with",
    "start": "2413740",
    "end": "2419020"
  },
  {
    "text": "actors you can just run a quick um there's actually a number that gets exposed in aqua.net you can just pull to",
    "start": "2419020",
    "end": "2425619"
  },
  {
    "text": "see how many actors are alive right now it also makes stateful server-side applications viable one of my biggest",
    "start": "2425619",
    "end": "2432880"
  },
  {
    "text": "complaints about database driven development is it's inherently stateless all of it which is fine for probably I'd",
    "start": "2432880",
    "end": "2438700"
  },
  {
    "text": "say the vast majority of applications but the most critical ones in your business will often need to have some",
    "start": "2438700",
    "end": "2444940"
  },
  {
    "text": "measure of state in order to do things like keep request processing times low if you want to build an application that",
    "start": "2444940",
    "end": "2451480"
  },
  {
    "text": "can build let's say something like a real-time Banner ad exchange or real-time chat system or real-time you",
    "start": "2451480",
    "end": "2458740"
  },
  {
    "text": "know let's say Fleet Management System you need State inside your application to make that achievable actors are a",
    "start": "2458740",
    "end": "2466119"
  },
  {
    "text": "Pitch Perfect way of doing that inside your system whether you use akka.net Orleans doesn't really matter it's just",
    "start": "2466119",
    "end": "2471940"
  },
  {
    "text": "the general Paradigm is really useful at giving you that set of tools to do it",
    "start": "2471940",
    "end": "2477040"
  },
  {
    "text": "the other thing is that like we talked about event processing can become Dynamic rather than having a static set",
    "start": "2477040",
    "end": "2482920"
  },
  {
    "text": "of functions that are inherently stateless handling our business logic and our work we have entities that are",
    "start": "2482920",
    "end": "2488079"
  },
  {
    "text": "responsible for recovering their own State making decisions about what to do with events in real time based on what",
    "start": "2488079",
    "end": "2493780"
  },
  {
    "text": "their state is and they have the ability to dynamically do things like reroute a message somewhere else stash it and",
    "start": "2493780",
    "end": "2499720"
  },
  {
    "text": "process it later once we get a critical event that arrives or broadcast it to multiple parties over our Network all",
    "start": "2499720",
    "end": "2505540"
  },
  {
    "text": "these different event driven paradigms you discussed earlier are all very inexpensive to implement with actors and",
    "start": "2505540",
    "end": "2510880"
  },
  {
    "text": "don't require very much infrastructure either um the other thing is that actors have the ability to basically be distributed",
    "start": "2510880",
    "end": "2517720"
  },
  {
    "text": "over a network with very with essentially no code changes um actors tend to be location",
    "start": "2517720",
    "end": "2523599"
  },
  {
    "text": "transparent which means that if an actor moves from one process onto another as a",
    "start": "2523599",
    "end": "2529780"
  },
  {
    "text": "result of let's say the other process being shut down that's not going to have a tremendous amount of impact on your",
    "start": "2529780",
    "end": "2535720"
  },
  {
    "text": "code that's a routine thing actors can handle it's just like you know basically if you were to rebalance a Kafka",
    "start": "2535720",
    "end": "2542859"
  },
  {
    "text": "partition or add a new web server under your load balancer it's more or less the same sort of automated process for doing",
    "start": "2542859",
    "end": "2548920"
  },
  {
    "text": "that the last subject I'll touch on for being able to preserve optionality is what we",
    "start": "2548920",
    "end": "2554980"
  },
  {
    "text": "call extend only design now I have a full blog post that goes into a lot more detail on how to do this on my personal",
    "start": "2554980",
    "end": "2560800"
  },
  {
    "text": "website and I'll talk about that at the end but if you're doing database driven development this is the one pattern you",
    "start": "2560800",
    "end": "2567520"
  },
  {
    "text": "can Implement today that will help you a lot in terms of preserving optionality in your system this does not require you",
    "start": "2567520",
    "end": "2573579"
  },
  {
    "text": "to do an event driven architecture this does not require you to use actors you can do this with SQL server today",
    "start": "2573579",
    "end": "2579700"
  },
  {
    "text": "extendedly design is a methodology for making sure that there are no incompatible changes ever made to your",
    "start": "2579700",
    "end": "2586900"
  },
  {
    "text": "SQL schema at any point in the present moving forward it's basically a way of preserving backwards and forwards",
    "start": "2586900",
    "end": "2592900"
  },
  {
    "text": "compatibility the idea is that your schema your wire format so if you're doing serialization",
    "start": "2592900",
    "end": "2599020"
  },
  {
    "text": "that's what we're referring to there and apis are frozen for updates or deletes if you want to make a change to your",
    "start": "2599020",
    "end": "2605500"
  },
  {
    "text": "HTTP endpoint you're going to have to either introduce a new method where you're going to need to introduce a new",
    "start": "2605500",
    "end": "2611140"
  },
  {
    "text": "version where that has a separate URI prefix than what you had before which is basically how people version public web",
    "start": "2611140",
    "end": "2617319"
  },
  {
    "text": "apis typically so no destructive changes are allowed you're not allowed to change",
    "start": "2617319",
    "end": "2622480"
  },
  {
    "text": "how something worked you're not allowed to rename or repurpose something you're not allowed to delete stuff anything",
    "start": "2622480",
    "end": "2628900"
  },
  {
    "text": "that is being used by live stakeholders or being used by live clients stays",
    "start": "2628900",
    "end": "2633940"
  },
  {
    "text": "Frozen as is new things can always be added this is the extension part you can always add",
    "start": "2633940",
    "end": "2640119"
  },
  {
    "text": "new stuff that wasn't being used before you can add a new HTTP endpoint you can add a new message type to your event Source system you can add a new table",
    "start": "2640119",
    "end": "2647020"
  },
  {
    "text": "you can add a new column to an existing table you just can't go back and change the past you can basically change something",
    "start": "2647020",
    "end": "2654040"
  },
  {
    "text": "that's currently being used or currently has data in it that you know will be used",
    "start": "2654040",
    "end": "2659140"
  },
  {
    "text": "so old schema will be gradually made obsolete as the software updates if we",
    "start": "2659140",
    "end": "2664599"
  },
  {
    "text": "have some old SQL schema that we want to get rid of we can't delete it but we can gradually stop using it and then maybe",
    "start": "2664599",
    "end": "2671020"
  },
  {
    "text": "we could go back and delete it if we wanted to but that process takes a little while you have to kind of age out of your system",
    "start": "2671020",
    "end": "2676420"
  },
  {
    "text": "so why is extend only design useful it eliminates an entire risk category for",
    "start": "2676420",
    "end": "2682119"
  },
  {
    "text": "updating your software in the future and an entire area where technical debt gets created The Accidental destruction of",
    "start": "2682119",
    "end": "2689260"
  },
  {
    "text": "business value and on top of that the unknown unknowns of gee what happens if",
    "start": "2689260",
    "end": "2694359"
  },
  {
    "text": "I go through and change the schema on this table how many different calls are there to that table that I can't trace",
    "start": "2694359",
    "end": "2700960"
  },
  {
    "text": "inside all the various applications that talk to it that's something that can be to a degree unknowable inside your",
    "start": "2700960",
    "end": "2707800"
  },
  {
    "text": "application therefore it's risky to make those destructive changes with extend only design you avoid that entire",
    "start": "2707800",
    "end": "2714520"
  },
  {
    "text": "problem because you're not fundamentally changing the stuff that's already in use you're just adding new things that",
    "start": "2714520",
    "end": "2720579"
  },
  {
    "text": "updated clients and updated consumers will use down the road so a good example of like how we manage",
    "start": "2720579",
    "end": "2726520"
  },
  {
    "text": "versioning and like occodontist internal message formats we use Google protobuf for all of our internal message types",
    "start": "2726520",
    "end": "2732460"
  },
  {
    "text": "and protobuf lends it really well to this type of extend only design so for instance I might have a little",
    "start": "2732460",
    "end": "2739000"
  },
  {
    "text": "protobuf message that looks like this where okay I've got these five properties here and I want to add a",
    "start": "2739000",
    "end": "2744880"
  },
  {
    "text": "sixth property for figuring out if this user made this type of stock trading operation and ask I want to see this",
    "start": "2744880",
    "end": "2751480"
  },
  {
    "text": "person did this ask using margin meaning they borrowed money from us in order to buy that stock",
    "start": "2751480",
    "end": "2757060"
  },
  {
    "text": "uh okay did this person make this actually not to buy the stock to sell it in this case so they might be shorting or something",
    "start": "2757060",
    "end": "2763420"
  },
  {
    "text": "so this is a new field this new field can be added to this protobuf message and that protobuf message can be",
    "start": "2763420",
    "end": "2769240"
  },
  {
    "text": "recompiled into C sharp without breaking wire compatibility if I go and I'm",
    "start": "2769240",
    "end": "2774400"
  },
  {
    "text": "running this node in the cluster using this new version of the message all the older nodes that don't have that",
    "start": "2774400",
    "end": "2779980"
  },
  {
    "text": "definition for that field will see some unrecognized property and just ignore it now",
    "start": "2779980",
    "end": "2785380"
  },
  {
    "text": "that's not great from a data loss standpoint but it's a lot better than the alternative which might be bricking",
    "start": "2785380",
    "end": "2790780"
  },
  {
    "text": "the rest of the entire cluster as soon as that first node joints right so this ability to extend all this extend only",
    "start": "2790780",
    "end": "2797200"
  },
  {
    "text": "design ability gives us both forward and backwards compatibility in the backwards Direction",
    "start": "2797200",
    "end": "2802960"
  },
  {
    "text": "if my new client gets an old message from one of the old node types it can substitute a default value for that new",
    "start": "2802960",
    "end": "2810220"
  },
  {
    "text": "optional property okay if I'm getting a trade order from an old client that doesn't support margin",
    "start": "2810220",
    "end": "2815859"
  },
  {
    "text": "guess what that trade can't be done with margin therefore we're going to say that property is false Insider application",
    "start": "2815859",
    "end": "2821800"
  },
  {
    "text": "our serializer will go ahead and just use a safe default value there if you're building something like a extend only",
    "start": "2821800",
    "end": "2828760"
  },
  {
    "text": "designed with SQL schema you might have a default value you specify for for basically pre-existing for a rows that",
    "start": "2828760",
    "end": "2835119"
  },
  {
    "text": "didn't have that new column you're adding so it might be null might be a good example or maybe if you're using an integer the value is 0 or negative one",
    "start": "2835119",
    "end": "2841720"
  },
  {
    "text": "whatever kind of makes sense for your use case but the idea behind this is that by",
    "start": "2841720",
    "end": "2846819"
  },
  {
    "text": "using extend only design we preserve our old schema and we don't have to account for all the different",
    "start": "2846819",
    "end": "2853359"
  },
  {
    "text": "parts of our application that might be talking to it we can go ahead and add the new functionality we need without",
    "start": "2853359",
    "end": "2858940"
  },
  {
    "text": "destroying the old functionality that other clients might use and because the new client knows how to substitute a",
    "start": "2858940",
    "end": "2866380"
  },
  {
    "text": "safe default value for areas where that new data may not be available old clients and new clients can continue to",
    "start": "2866380",
    "end": "2872440"
  },
  {
    "text": "interact with each other safely over a longer period of time on top of that this also means you can",
    "start": "2872440",
    "end": "2879339"
  },
  {
    "text": "actually update your database schema independently from your application I can roll out my schema update well in",
    "start": "2879339",
    "end": "2885460"
  },
  {
    "text": "advance of the application that uses it so I don't have to have an Entity framework migration running live in my",
    "start": "2885460",
    "end": "2890980"
  },
  {
    "text": "CI CD pipeline our dbas can stage it execute it see it roll out and then the",
    "start": "2890980",
    "end": "2896260"
  },
  {
    "text": "application can get deployed you know that day or the following day if you want to it effectively decouples those",
    "start": "2896260",
    "end": "2901720"
  },
  {
    "text": "two activities together and lowers the risk of a deployment failing or a customer and business data being",
    "start": "2901720",
    "end": "2907660"
  },
  {
    "text": "destroyed uh yeah on top of that extend only design is a",
    "start": "2907660",
    "end": "2913839"
  },
  {
    "text": "great way to guarantee zero downtime deployments um I imagine that a lot of you have the ability to take your",
    "start": "2913839",
    "end": "2919720"
  },
  {
    "text": "systems offline and have downtime when you do a really big deployment but if you work in Industries like software as",
    "start": "2919720",
    "end": "2925660"
  },
  {
    "text": "a service or maybe doing things like you know manufacturing you want to try to avoid downtime to the extent that it's",
    "start": "2925660",
    "end": "2932380"
  },
  {
    "text": "possible because that represents a business outage and lost revenue and potentially mad customers extendedly",
    "start": "2932380",
    "end": "2938440"
  },
  {
    "text": "designed is an absolute must-have if that's important to you being able to essentially eliminate downtime in your",
    "start": "2938440",
    "end": "2944020"
  },
  {
    "text": "deployments so extend only down extend only design will help you tremendously",
    "start": "2944020",
    "end": "2950440"
  },
  {
    "text": "now what do these patterns all have in common these high optionality patterns what's the essence of this programming",
    "start": "2950440",
    "end": "2956020"
  },
  {
    "text": "methodology well immutability is probably the foremost concern here which is that one state is written somewhere",
    "start": "2956020",
    "end": "2963280"
  },
  {
    "text": "it can't its meaning can't be changed and it can't be destroyed unless you're being really intentional about it no",
    "start": "2963280",
    "end": "2969700"
  },
  {
    "text": "accidental side effects on data is what we're trying to avoid here so immutability kind of sits at the",
    "start": "2969700",
    "end": "2974980"
  },
  {
    "text": "Forefront of all these patterns it's all about trying to conserve the basically",
    "start": "2974980",
    "end": "2980260"
  },
  {
    "text": "the old datum in perpetuity for future use we're basically assuming data storage is cheap and honestly compared",
    "start": "2980260",
    "end": "2985839"
  },
  {
    "text": "to software development time it really is so we're going more than happy to go",
    "start": "2985839",
    "end": "2991000"
  },
  {
    "text": "ahead and trade a larger SQL Server instance in exchange for our developers not having to spend hundreds of man",
    "start": "2991000",
    "end": "2996940"
  },
  {
    "text": "years you know rewriting a piece of production code dynamism is another thing that we're",
    "start": "2996940",
    "end": "3001980"
  },
  {
    "text": "trying to preserve here uh we want to go ahead and dynamically route process and react to State changes in real time",
    "start": "3001980",
    "end": "3007640"
  },
  {
    "text": "systems that are more static are inherently less flexible and require a lot more effort on the part of the",
    "start": "3007640",
    "end": "3013740"
  },
  {
    "text": "developer to update systems that are inherently Dynamic from the get-go like event driven architectures or actors are",
    "start": "3013740",
    "end": "3020400"
  },
  {
    "text": "going to be easier to do on kind of an ad hoc basis over time and lastly we kind of separated our",
    "start": "3020400",
    "end": "3026819"
  },
  {
    "text": "concerns to some degree each of these patterns kind of addresses different facets of software actors are all about",
    "start": "3026819",
    "end": "3032160"
  },
  {
    "text": "how we process the system events are all about how we organize interactions between domains event sourcing is how we",
    "start": "3032160",
    "end": "3038700"
  },
  {
    "text": "write cqrs is how we read Etc these are all different sort of facets of our of",
    "start": "3038700",
    "end": "3044220"
  },
  {
    "text": "our application programming models but when we put them all together we end up with a system that's going to make be",
    "start": "3044220",
    "end": "3049800"
  },
  {
    "text": "easier to change down the road and easier to evolve there is cost to doing this for instance extend only design",
    "start": "3049800",
    "end": "3056460"
  },
  {
    "text": "requires a lot more planning and enforcement from a CI CD perspective than",
    "start": "3056460",
    "end": "3061940"
  },
  {
    "text": "YOLO crud or whatever people do by default so there is a cost to doing this and that's the premium when it comes to",
    "start": "3061940",
    "end": "3068520"
  },
  {
    "text": "options but the value is you get that flexibility to evolve your system naturally in the future in a way that's",
    "start": "3068520",
    "end": "3075059"
  },
  {
    "text": "going to be much less expensive and more importantly much less risky than what you might be doing today",
    "start": "3075059",
    "end": "3081420"
  },
  {
    "text": "so just to recap technical debts the destruction of options that's really what it is when",
    "start": "3081420",
    "end": "3087359"
  },
  {
    "text": "technical debt gets created you're basically destroying a viable future option as a result of making a choice",
    "start": "3087359",
    "end": "3092760"
  },
  {
    "text": "that is basically not flexible it's the idea behind it um High optionality architectures yeah I",
    "start": "3092760",
    "end": "3099300"
  },
  {
    "text": "just mentioned this they tend to cost a bit more to develop up front that is absolutely true that is the trade-off",
    "start": "3099300",
    "end": "3104700"
  },
  {
    "text": "basically that you're basically spending more time and money initially in your design but they'll pay for themselves",
    "start": "3104700",
    "end": "3110099"
  },
  {
    "text": "very quickly if your business evolves and then on top of that you're really",
    "start": "3110099",
    "end": "3115319"
  },
  {
    "text": "high optionality architectures are things you should do if you anticipate change being likely in your business over a long enough time Horizon change",
    "start": "3115319",
    "end": "3123119"
  },
  {
    "text": "is inevitable that will happen but there are you know cases where the application you're working on is probably pretty",
    "start": "3123119",
    "end": "3129599"
  },
  {
    "text": "stable and the likelihood of it changing significantly is low in those cases you should feel free to use whatever you",
    "start": "3129599",
    "end": "3135480"
  },
  {
    "text": "think is going to be the most expedient to getting the job done but most really critical business pieces of business",
    "start": "3135480",
    "end": "3141480"
  },
  {
    "text": "software more than likely they're going to change and if you want to enable your business to be agile and to be able to",
    "start": "3141480",
    "end": "3147119"
  },
  {
    "text": "react quickly to those changes and you as a software developer if you want to be happy and not bitching about Legacy",
    "start": "3147119",
    "end": "3152760"
  },
  {
    "text": "code all the time high optionality architecture is a really good investment and I would start by learning the event",
    "start": "3152760",
    "end": "3158940"
  },
  {
    "text": "driven part of it first is probably where I'd begin or if you want to get started with something right away think",
    "start": "3158940",
    "end": "3164460"
  },
  {
    "text": "about freezing your schema and applying extend only design to it that's something you can do without re-architecting your software so let's",
    "start": "3164460",
    "end": "3170700"
  },
  {
    "text": "start with that I think about changing how your cic D processes and your deployment systems might look if you did",
    "start": "3170700",
    "end": "3175980"
  },
  {
    "text": "that so that's it for my talk today if you go to petabridge.com you can see my",
    "start": "3175980",
    "end": "3181980"
  },
  {
    "text": "original uh articles I wrote about high optionality architecture and then my handle is Aaron on the web I tweeted out",
    "start": "3181980",
    "end": "3188400"
  },
  {
    "text": "some links to all of my more detailed articles on things like extend only design you can go ahead and find that on",
    "start": "3188400",
    "end": "3194400"
  },
  {
    "text": "there as well so thank you very much for your time and I'll be happy to take some questions",
    "start": "3194400",
    "end": "3199940"
  },
  {
    "text": "so you show hands yes",
    "start": "3204720",
    "end": "3207980"
  },
  {
    "text": "absolutely so we use like it up persistent in my in our system we use Aqueduct resistance",
    "start": "3217079",
    "end": "3223859"
  },
  {
    "text": "query to do projections where essentially I have actors that tail the events that are being persisted into a",
    "start": "3223859",
    "end": "3229319"
  },
  {
    "text": "materialized view and how granular that view might be can really really kind of depends on the domain I'm working in",
    "start": "3229319",
    "end": "3236280"
  },
  {
    "text": "um I might do a per entity let's say rock it up persistence query that spins up tails the events live as they come in",
    "start": "3236280",
    "end": "3243540"
  },
  {
    "text": "writes it all out into let's say a document or a set of SQL rows and then",
    "start": "3243540",
    "end": "3248819"
  },
  {
    "text": "if I make a really significant change the way our view models work I might go and introduce a totally new set of",
    "start": "3248819",
    "end": "3253920"
  },
  {
    "text": "projection actors to do that any other questions yes",
    "start": "3253920",
    "end": "3259700"
  },
  {
    "text": "yes so the question just to repeat it for",
    "start": "3268619",
    "end": "3273660"
  },
  {
    "text": "everyone here is how do you sell a upfront higher cost design methodology like optionality to startups the",
    "start": "3273660",
    "end": "3279720"
  },
  {
    "text": "companies the fewest resources and the greatest likelihood of change um so I have made two really crucial",
    "start": "3279720",
    "end": "3287040"
  },
  {
    "text": "mistakes with products I've owned where marked up was one of them and I've got a second one that we're currently still",
    "start": "3287040",
    "end": "3293160"
  },
  {
    "text": "struggling with actually where we basically did a minimum viable product so get something to Market quickly that",
    "start": "3293160",
    "end": "3298920"
  },
  {
    "text": "meets all the basic requirements of your customers and we were a little bit too minimal and not enough viable basically",
    "start": "3298920",
    "end": "3305220"
  },
  {
    "text": "it was the kind of the issue there the argument you should make for high optionality architecture is that not",
    "start": "3305220",
    "end": "3310800"
  },
  {
    "text": "doing this is betting against your success that's the the line you got to say there look if you think you're going to be",
    "start": "3310800",
    "end": "3316859"
  },
  {
    "text": "successful build it like you mean it if you don't think you're going to be successful why are you in this business",
    "start": "3316859",
    "end": "3322079"
  },
  {
    "text": "you know go do web you know cryptocurrency or AI or something right",
    "start": "3322079",
    "end": "3328380"
  },
  {
    "text": "next question",
    "start": "3328380",
    "end": "3331160"
  },
  {
    "text": "pivot oh yeah yeah basically that's another good argument is that high optionality increases the likelihood of",
    "start": "3334980",
    "end": "3340319"
  },
  {
    "text": "successful pivot you know when you do make that transition from um you know nfts to AI tools you know",
    "start": "3340319",
    "end": "3347760"
  },
  {
    "text": "that'll be really a really good selling point for that um I hate that I keep knocking the",
    "start": "3347760",
    "end": "3353940"
  },
  {
    "text": "startup industry those poor guys are having a rough time right now any other questions",
    "start": "3353940",
    "end": "3360140"
  },
  {
    "text": "yes",
    "start": "3362160",
    "end": "3364700"
  },
  {
    "text": "so do we um okay that's a good question so extend only design is what you're referring to right so does extend only design",
    "start": "3369599",
    "end": "3376619"
  },
  {
    "text": "introduce technical debt and my answer to that question is no it doesn't what it does leave behind is a lot of",
    "start": "3376619",
    "end": "3382819"
  },
  {
    "text": "cellular waste some to some extent some old tables and old code that may not be used anymore and once you're certain",
    "start": "3382819",
    "end": "3389880"
  },
  {
    "text": "that that's not being used actively anywhere in your application you can safely get rid of that stuff it's just",
    "start": "3389880",
    "end": "3395280"
  },
  {
    "text": "that the bet you're making is you know what in a large enough company with a large enough application with a lot of",
    "start": "3395280",
    "end": "3400319"
  },
  {
    "text": "different services using it the moment I deploy a new piece of schema I am not",
    "start": "3400319",
    "end": "3405839"
  },
  {
    "text": "100 certain what all the interactions of that table or that API or that piece of",
    "start": "3405839",
    "end": "3411119"
  },
  {
    "text": "data look like so I'm going to make the bet that there are some systems out there still using it the old way",
    "start": "3411119",
    "end": "3416720"
  },
  {
    "text": "therefore I want to go ahead and take eliminate the risk that that's going to cause a you know category five shitstorm",
    "start": "3416720",
    "end": "3423780"
  },
  {
    "text": "inside our Ops Department that day right so the extended only design is basically a way of lowering the risk on a per",
    "start": "3423780",
    "end": "3430020"
  },
  {
    "text": "deployment basis um the one thing that extendedly design will do is it'll force you to basically",
    "start": "3430020",
    "end": "3436260"
  },
  {
    "text": "try to enforce some rules in your CI CD pipeline to eliminate really destructive",
    "start": "3436260",
    "end": "3441300"
  },
  {
    "text": "actions so I'll give you an example of how we do that in the occodontic project we use a tool called a verify which is",
    "start": "3441300",
    "end": "3448079"
  },
  {
    "text": "basically a way of doing snapshot testing and we do an entire printout of what our public API looks like we render",
    "start": "3448079",
    "end": "3454440"
  },
  {
    "text": "it as a giant string basically and that gets written to a text file that gets checked into Source control verify will",
    "start": "3454440",
    "end": "3461040"
  },
  {
    "text": "let us know if someone went through and let's say added a new argument to a Constructor that is actually technically",
    "start": "3461040",
    "end": "3466920"
  },
  {
    "text": "a breaking change right even if they made that argument optional and that's not binary compatible and that means",
    "start": "3466920",
    "end": "3472680"
  },
  {
    "text": "that every plugin built on older versions of akka.net will break until it upgrades which is something we",
    "start": "3472680",
    "end": "3477720"
  },
  {
    "text": "explicitly do not allow in our versioning system except under very special circumstances",
    "start": "3477720",
    "end": "3483359"
  },
  {
    "text": "well that allows us so we basically have a habit as software developers are going and checking like ah nope can't do that",
    "start": "3483359",
    "end": "3489480"
  },
  {
    "text": "not allowed to make that change unless you do it in a way that's safe we have instructions written down on how to do",
    "start": "3489480",
    "end": "3494880"
  },
  {
    "text": "that you would need to check in a snapshot of something like your SQL schema for instance to go and make sure okay this person did",
    "start": "3494880",
    "end": "3501540"
  },
  {
    "text": "not drop the orders table by accident or this person did not do whatever tools",
    "start": "3501540",
    "end": "3506760"
  },
  {
    "text": "like an automatic Entity framework code first migration should seem terrifying to you because you have no idea if you",
    "start": "3506760",
    "end": "3513720"
  },
  {
    "text": "don't emit the output what it's really doing under the covers until it's starting to happen right",
    "start": "3513720",
    "end": "3519240"
  },
  {
    "text": "so that's sort of something you're going to have to incorporate into your build system a little bit uh ditto with things",
    "start": "3519240",
    "end": "3524339"
  },
  {
    "text": "like managing your wire format if you're using a tool like akka.net or Kafka where you're doing a serialization of",
    "start": "3524339",
    "end": "3530280"
  },
  {
    "text": "message types that's another thing you'll want to check into Source control and make sure there's a step where someone has to review that before it",
    "start": "3530280",
    "end": "3536220"
  },
  {
    "text": "gets merged in uh any other questions yes go ahead",
    "start": "3536220",
    "end": "3542960"
  },
  {
    "text": "yes so what do I mean the question was when I talk about partitioning of events",
    "start": "3546420",
    "end": "3551579"
  },
  {
    "text": "using actors or really you could do it with any sort of Q anything like even a Kafka client can be partitioned uh what",
    "start": "3551579",
    "end": "3557280"
  },
  {
    "text": "does that mean partitioning means if you have a giant fire hose of events rather than having a single class basically",
    "start": "3557280",
    "end": "3563640"
  },
  {
    "text": "responsible for processing all of them you have the ability to basically divide that giant let's say fire hose of events",
    "start": "3563640",
    "end": "3570839"
  },
  {
    "text": "into smaller streams that are organized by maybe the entity type or maybe by the",
    "start": "3570839",
    "end": "3576720"
  },
  {
    "text": "entity ID itself so let's say if I have a thousand users on my website I might partition The Click stream for all",
    "start": "3576720",
    "end": "3582960"
  },
  {
    "text": "thousand users into a thousand little streams one for each user anaka.net can route those messages to the single",
    "start": "3582960",
    "end": "3589680"
  },
  {
    "text": "entity actor that owns that individual user that's really what we mean by partitioning is sort of breaking up the",
    "start": "3589680",
    "end": "3595440"
  },
  {
    "text": "big stream into like manageable Parts essentially any other questions",
    "start": "3595440",
    "end": "3602119"
  },
  {
    "text": "well hey thanks for the great questions and thank you everyone for attending I really appreciate it uh I'll be I'll be",
    "start": "3603540",
    "end": "3608640"
  },
  {
    "text": "around I've got another talk on Friday morning on.net systems programming if you're interested but otherwise thank",
    "start": "3608640",
    "end": "3613980"
  },
  {
    "text": "you very much for your time I really appreciate it [Applause]",
    "start": "3613980",
    "end": "3620070"
  }
]