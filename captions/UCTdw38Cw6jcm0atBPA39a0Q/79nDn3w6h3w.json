[
  {
    "text": "hello so a bit uh bit of a jump in the",
    "start": "7840",
    "end": "10840"
  },
  {
    "text": "scenery here to something completely",
    "start": "10840",
    "end": "14160"
  },
  {
    "text": "different uh I'm going to talk about",
    "start": "14160",
    "end": "16320"
  },
  {
    "text": "primitive collections in EF core",
    "start": "16320",
    "end": "20199"
  },
  {
    "text": "8 so my name is hen Bron and I work for",
    "start": "20840",
    "end": "24760"
  },
  {
    "text": "a consultancy firm called novanet based",
    "start": "24760",
    "end": "27920"
  },
  {
    "text": "here in Oslo focusing on net and",
    "start": "27920",
    "end": "31520"
  },
  {
    "text": "Asher uh and this is my third time",
    "start": "31520",
    "end": "33760"
  },
  {
    "text": "speaking at NC so I think that's pretty",
    "start": "33760",
    "end": "37360"
  },
  {
    "text": "cool so I'm just going to jump straight",
    "start": "37360",
    "end": "39960"
  },
  {
    "text": "into a basic",
    "start": "39960",
    "end": "42200"
  },
  {
    "text": "example so we have a person with a",
    "start": "42200",
    "end": "45640"
  },
  {
    "text": "multiple phone",
    "start": "45640",
    "end": "47559"
  },
  {
    "text": "numbers so I created this uh class",
    "start": "47559",
    "end": "51120"
  },
  {
    "text": "person with an ID a name and a list of",
    "start": "51120",
    "end": "54359"
  },
  {
    "text": "strings representing the phone",
    "start": "54359",
    "end": "56399"
  },
  {
    "text": "numbers so how do we model this to the",
    "start": "56399",
    "end": "59320"
  },
  {
    "text": "database",
    "start": "59320",
    "end": "60960"
  },
  {
    "text": "well the traditional approach would be",
    "start": "60960",
    "end": "63800"
  },
  {
    "text": "to create a new table and have a foreign",
    "start": "63800",
    "end": "66960"
  },
  {
    "text": "key to the person table and then add an",
    "start": "66960",
    "end": "69520"
  },
  {
    "text": "entry for each phone number but that",
    "start": "69520",
    "end": "72759"
  },
  {
    "text": "might seem a bit too",
    "start": "72759",
    "end": "75200"
  },
  {
    "text": "much uh especially if you have uh other",
    "start": "75200",
    "end": "78400"
  },
  {
    "text": "stuff like email addresses uh and then",
    "start": "78400",
    "end": "81920"
  },
  {
    "text": "it gets to be even more",
    "start": "81920",
    "end": "84360"
  },
  {
    "text": "tables so a more pragmatic approach",
    "start": "84360",
    "end": "87640"
  },
  {
    "text": "would be to take this list of strings",
    "start": "87640",
    "end": "89920"
  },
  {
    "text": "and create a custom converter and",
    "start": "89920",
    "end": "91920"
  },
  {
    "text": "convert it to a to a one string for",
    "start": "91920",
    "end": "95320"
  },
  {
    "text": "instance a comma separated string or",
    "start": "95320",
    "end": "97360"
  },
  {
    "text": "just seriz it to",
    "start": "97360",
    "end": "100439"
  },
  {
    "text": "Jason and then in EF core 8 uh came",
    "start": "101799",
    "end": "105399"
  },
  {
    "text": "something called primitive collections",
    "start": "105399",
    "end": "107320"
  },
  {
    "text": "so primitive collections is out of the",
    "start": "107320",
    "end": "110079"
  },
  {
    "text": "box built-in support for serializing",
    "start": "110079",
    "end": "112920"
  },
  {
    "text": "using",
    "start": "112920",
    "end": "114000"
  },
  {
    "text": "Json so what is a primitive type A",
    "start": "114000",
    "end": "117200"
  },
  {
    "text": "Primitive type is a simple scaler",
    "start": "117200",
    "end": "120399"
  },
  {
    "text": "value so here's some",
    "start": "120399",
    "end": "122840"
  },
  {
    "text": "examples of a primitive",
    "start": "122840",
    "end": "125520"
  },
  {
    "text": "collections an EF core can map Anyan",
    "start": "125520",
    "end": "129399"
  },
  {
    "text": "numerable of T property where T is a",
    "start": "129399",
    "end": "132040"
  },
  {
    "text": "primitive type to adjacent column in the",
    "start": "132040",
    "end": "136040"
  },
  {
    "text": "database and this is done by convention",
    "start": "136040",
    "end": "138440"
  },
  {
    "text": "so the list needs to be public and it",
    "start": "138440",
    "end": "140400"
  },
  {
    "text": "needs a getter and a",
    "start": "140400",
    "end": "142720"
  },
  {
    "text": "Setter uh as you might notice the URI",
    "start": "142720",
    "end": "146400"
  },
  {
    "text": "class is is not a primitive type but e",
    "start": "146400",
    "end": "149160"
  },
  {
    "text": "of core Shi with some built-in",
    "start": "149160",
    "end": "151720"
  },
  {
    "text": "converters so uh it can be treated as a",
    "start": "151720",
    "end": "154640"
  },
  {
    "text": "primitive",
    "start": "154640",
    "end": "156280"
  },
  {
    "text": "type so what you get is that your",
    "start": "156280",
    "end": "159280"
  },
  {
    "text": "collection is kind of being treated as a",
    "start": "159280",
    "end": "162040"
  },
  {
    "text": "table without the overhead of actually",
    "start": "162040",
    "end": "164360"
  },
  {
    "text": "creating that",
    "start": "164360",
    "end": "166000"
  },
  {
    "text": "table and if you store a couple of phone",
    "start": "166000",
    "end": "168519"
  },
  {
    "text": "numbers uh in your table they will look",
    "start": "168519",
    "end": "171680"
  },
  {
    "text": "like this so as you can see it's just a",
    "start": "171680",
    "end": "174760"
  },
  {
    "text": "plain uh Json",
    "start": "174760",
    "end": "178040"
  },
  {
    "text": "array so how do we query these primitive",
    "start": "178040",
    "end": "182319"
  },
  {
    "text": "collections well it's uh nothing special",
    "start": "182319",
    "end": "185440"
  },
  {
    "text": "really you can just use Link as you",
    "start": "185440",
    "end": "187799"
  },
  {
    "text": "would do for anything",
    "start": "187799",
    "end": "189760"
  },
  {
    "text": "else here's an example where I I",
    "start": "189760",
    "end": "192560"
  },
  {
    "text": "retrieve some persons with a specific",
    "start": "192560",
    "end": "194799"
  },
  {
    "text": "phone",
    "start": "194799",
    "end": "196159"
  },
  {
    "text": "number what is uh kind of interesting is",
    "start": "196159",
    "end": "200120"
  },
  {
    "text": "the SQL that's been generated from this",
    "start": "200120",
    "end": "202640"
  },
  {
    "text": "basic link",
    "start": "202640",
    "end": "204400"
  },
  {
    "text": "query so the SQL will look like this and",
    "start": "204400",
    "end": "207760"
  },
  {
    "text": "there's two things to notice here one is",
    "start": "207760",
    "end": "210319"
  },
  {
    "text": "that it's using the openjson built-in",
    "start": "210319",
    "end": "212599"
  },
  {
    "text": "mechanisms of SQL server but it's also",
    "start": "212599",
    "end": "215799"
  },
  {
    "text": "passing in the phone number as a",
    "start": "215799",
    "end": "218040"
  },
  {
    "text": "parameter and that is a good thing",
    "start": "218040",
    "end": "220239"
  },
  {
    "text": "because SQL Server caches all query",
    "start": "220239",
    "end": "222560"
  },
  {
    "text": "plans so if you were to have the phone",
    "start": "222560",
    "end": "226120"
  },
  {
    "text": "number as a value then you would need to",
    "start": "226120",
    "end": "228480"
  },
  {
    "text": "cach a query plan for each unique phone",
    "start": "228480",
    "end": "230799"
  },
  {
    "text": "number but doing doing it this way with",
    "start": "230799",
    "end": "233360"
  },
  {
    "text": "a parameter you only need to cat one",
    "start": "233360",
    "end": "235760"
  },
  {
    "text": "query plan and it will work for every",
    "start": "235760",
    "end": "237760"
  },
  {
    "text": "phone number",
    "start": "237760",
    "end": "241040"
  },
  {
    "text": "so uh I wanted to show something from my",
    "start": "242000",
    "end": "245079"
  },
  {
    "text": "current project uh as I said I work as a",
    "start": "245079",
    "end": "247840"
  },
  {
    "text": "consultant and right now I'm at this",
    "start": "247840",
    "end": "250319"
  },
  {
    "text": "Bank uh building a case handling",
    "start": "250319",
    "end": "253519"
  },
  {
    "text": "system so a very uh demo friendly",
    "start": "253519",
    "end": "256840"
  },
  {
    "text": "simplified version of a case uh could",
    "start": "256840",
    "end": "259359"
  },
  {
    "text": "look something like",
    "start": "259359",
    "end": "260680"
  },
  {
    "text": "this and I use some primitive",
    "start": "260680",
    "end": "263240"
  },
  {
    "text": "collections on on the case for instance",
    "start": "263240",
    "end": "266160"
  },
  {
    "text": "I have a collection of completed steps",
    "start": "266160",
    "end": "269000"
  },
  {
    "text": "because a case uh needs to go through",
    "start": "269000",
    "end": "271639"
  },
  {
    "text": "different steps and not uh in a specific",
    "start": "271639",
    "end": "275000"
  },
  {
    "text": "order so I need to show in the UI which",
    "start": "275000",
    "end": "277880"
  },
  {
    "text": "steps have been completed so for that",
    "start": "277880",
    "end": "280639"
  },
  {
    "text": "purpose it's uh really nice to just",
    "start": "280639",
    "end": "282400"
  },
  {
    "text": "create a A Primitive collection and here",
    "start": "282400",
    "end": "285000"
  },
  {
    "text": "I use enum which also will work because",
    "start": "285000",
    "end": "287600"
  },
  {
    "text": "it's basically an",
    "start": "287600",
    "end": "289639"
  },
  {
    "text": "INT uh and I don't need to do any joints",
    "start": "289639",
    "end": "292400"
  },
  {
    "text": "uh or whatnot to retrieve these",
    "start": "292400",
    "end": "295639"
  },
  {
    "text": "steps so what what about non-primitive",
    "start": "295639",
    "end": "298479"
  },
  {
    "text": "types",
    "start": "298479",
    "end": "301479"
  },
  {
    "text": "uh EF core 8 also shipped with another",
    "start": "301759",
    "end": "305320"
  },
  {
    "text": "thing called another feature called",
    "start": "305320",
    "end": "307440"
  },
  {
    "text": "complex",
    "start": "307440",
    "end": "309039"
  },
  {
    "text": "types and what is a complex",
    "start": "309039",
    "end": "312280"
  },
  {
    "text": "type objects saved to the database uh",
    "start": "312280",
    "end": "315440"
  },
  {
    "text": "can mainly be split into three",
    "start": "315440",
    "end": "318000"
  },
  {
    "text": "categories primitive types as I just",
    "start": "318000",
    "end": "320360"
  },
  {
    "text": "mentioned then you have entity types",
    "start": "320360",
    "end": "323360"
  },
  {
    "text": "which are which is a structure with an",
    "start": "323360",
    "end": "325720"
  },
  {
    "text": "identity and then multiple values so",
    "start": "325720",
    "end": "328960"
  },
  {
    "text": "basically a table with a primary key and",
    "start": "328960",
    "end": "331199"
  },
  {
    "text": "some columns but then you have something",
    "start": "331199",
    "end": "334120"
  },
  {
    "text": "uh then you have the complex type and",
    "start": "334120",
    "end": "336400"
  },
  {
    "text": "one example of a complex type can be an",
    "start": "336400",
    "end": "338960"
  },
  {
    "text": "address where you have a street name a",
    "start": "338960",
    "end": "341360"
  },
  {
    "text": "street number a zip code and a country",
    "start": "341360",
    "end": "344120"
  },
  {
    "text": "code but no",
    "start": "344120",
    "end": "346680"
  },
  {
    "text": "identity so uh before EF core 8 there",
    "start": "346680",
    "end": "349800"
  },
  {
    "text": "was really no good way of mapping this",
    "start": "349800",
    "end": "352960"
  },
  {
    "text": "uh you could use something called own",
    "start": "352960",
    "end": "355560"
  },
  {
    "text": "types but they are intended to be used",
    "start": "355560",
    "end": "358240"
  },
  {
    "text": "for entity types so it's not really the",
    "start": "358240",
    "end": "360880"
  },
  {
    "text": "intended fit but it will it will",
    "start": "360880",
    "end": "363520"
  },
  {
    "text": "work uh so I'm going to show how to add",
    "start": "363520",
    "end": "367000"
  },
  {
    "text": "a complex type to my case class so I",
    "start": "367000",
    "end": "370960"
  },
  {
    "text": "create uh something called an",
    "start": "370960",
    "end": "373280"
  },
  {
    "text": "approval uh which has two members and a",
    "start": "373280",
    "end": "376680"
  },
  {
    "text": "unique value uh for the called an",
    "start": "376680",
    "end": "379520"
  },
  {
    "text": "approval stamp and just the time for the",
    "start": "379520",
    "end": "381639"
  },
  {
    "text": "approval and I don't need to know uh",
    "start": "381639",
    "end": "384919"
  },
  {
    "text": "which person did the approval because",
    "start": "384919",
    "end": "386400"
  },
  {
    "text": "it's more of a collective effort in this",
    "start": "386400",
    "end": "388479"
  },
  {
    "text": "case uh so I just need these so I add",
    "start": "388479",
    "end": "392360"
  },
  {
    "text": "the approval and I name it approval",
    "start": "392360",
    "end": "395240"
  },
  {
    "text": "which is important uh to the case",
    "start": "395240",
    "end": "398319"
  },
  {
    "text": "class like this and then I want to",
    "start": "398319",
    "end": "401520"
  },
  {
    "text": "configure it uh to be a complex uh type",
    "start": "401520",
    "end": "405840"
  },
  {
    "text": "so I I specify that approval is a",
    "start": "405840",
    "end": "408240"
  },
  {
    "text": "complex property in my",
    "start": "408240",
    "end": "410800"
  },
  {
    "text": "configuration so when I run my",
    "start": "410800",
    "end": "412680"
  },
  {
    "text": "migrations and I update the",
    "start": "412680",
    "end": "414840"
  },
  {
    "text": "database I will have two new columns in",
    "start": "414840",
    "end": "418160"
  },
  {
    "text": "my table and as you can see uh both",
    "start": "418160",
    "end": "421160"
  },
  {
    "text": "members of the approval record is being",
    "start": "421160",
    "end": "423479"
  },
  {
    "text": "mapped to two separate columns and",
    "start": "423479",
    "end": "425599"
  },
  {
    "text": "prefixed with approval so this is the",
    "start": "425599",
    "end": "428440"
  },
  {
    "text": "only way to map a complex type in EF",
    "start": "428440",
    "end": "430759"
  },
  {
    "text": "core 8 and um according to the",
    "start": "430759",
    "end": "433639"
  },
  {
    "text": "documentation there is no",
    "start": "433639",
    "end": "435919"
  },
  {
    "text": "intention uh to letting you be able to",
    "start": "435919",
    "end": "438919"
  },
  {
    "text": "map this to a separate table but they do",
    "start": "438919",
    "end": "442319"
  },
  {
    "text": "want uh to be able uh to enable you to",
    "start": "442319",
    "end": "446240"
  },
  {
    "text": "to map it to adjacent column and I think",
    "start": "446240",
    "end": "449000"
  },
  {
    "text": "this is a really perfect fit for",
    "start": "449000",
    "end": "450479"
  },
  {
    "text": "adjacent column because the if if it was",
    "start": "450479",
    "end": "453280"
  },
  {
    "text": "an address it would",
    "start": "453280",
    "end": "454720"
  },
  {
    "text": "be uh more members and then it would be",
    "start": "454720",
    "end": "458840"
  },
  {
    "text": "a bit strange to have all these columns",
    "start": "458840",
    "end": "460720"
  },
  {
    "text": "with the prefix I would rather have it",
    "start": "460720",
    "end": "462199"
  },
  {
    "text": "in one Jason",
    "start": "462199",
    "end": "463680"
  },
  {
    "text": "column so if you go to the GitHub page",
    "start": "463680",
    "end": "466520"
  },
  {
    "text": "for EF core 8 there is a list of the",
    "start": "466520",
    "end": "469039"
  },
  {
    "text": "most voted issues and the by far most",
    "start": "469039",
    "end": "472360"
  },
  {
    "text": "voted issue is the one uh concerning",
    "start": "472360",
    "end": "475960"
  },
  {
    "text": "mapping a complex type to adjacent",
    "start": "475960",
    "end": "478080"
  },
  {
    "text": "column so I think that's uh um is coming",
    "start": "478080",
    "end": "481240"
  },
  {
    "text": "in the near future",
    "start": "481240",
    "end": "482879"
  },
  {
    "text": "future uh but uh there are uh as far as",
    "start": "482879",
    "end": "488080"
  },
  {
    "text": "I know only five Microsoft employees",
    "start": "488080",
    "end": "490280"
  },
  {
    "text": "working on the ecore team so I think",
    "start": "490280",
    "end": "491759"
  },
  {
    "text": "they have their hands full but hopefully",
    "start": "491759",
    "end": "494120"
  },
  {
    "text": "as",
    "start": "494120",
    "end": "495000"
  },
  {
    "text": "soon so back to my case handling",
    "start": "495000",
    "end": "498919"
  },
  {
    "text": "system if I had gone with the kind of",
    "start": "498919",
    "end": "501440"
  },
  {
    "text": "the traditional approach adding tables",
    "start": "501440",
    "end": "503479"
  },
  {
    "text": "for each list then I would have ended up",
    "start": "503479",
    "end": "506240"
  },
  {
    "text": "with something like",
    "start": "506240",
    "end": "507560"
  },
  {
    "text": "this uh one for each uh thing and lots",
    "start": "507560",
    "end": "511840"
  },
  {
    "text": "of joints and includes to retrieve my",
    "start": "511840",
    "end": "515000"
  },
  {
    "text": "data with the more kind of Json based uh",
    "start": "515000",
    "end": "519279"
  },
  {
    "text": "approach I'm still I only have still",
    "start": "519279",
    "end": "522200"
  },
  {
    "text": "only this case",
    "start": "522200",
    "end": "524000"
  },
  {
    "text": "table um and as long as it doesn't get",
    "start": "524000",
    "end": "527440"
  },
  {
    "text": "too bloated I'm really happy with that",
    "start": "527440",
    "end": "530160"
  },
  {
    "text": "because no joints means that um it's",
    "start": "530160",
    "end": "533480"
  },
  {
    "text": "faster to retrieve the the data uh I",
    "start": "533480",
    "end": "536720"
  },
  {
    "text": "only need to look up the primary key and",
    "start": "536720",
    "end": "538240"
  },
  {
    "text": "then I have all the stuff I want and the",
    "start": "538240",
    "end": "541760"
  },
  {
    "text": "code gets cleaner because you don't need",
    "start": "541760",
    "end": "543640"
  },
  {
    "text": "the big list of includes and you don't",
    "start": "543640",
    "end": "545399"
  },
  {
    "text": "need to forget to add includes and also",
    "start": "545399",
    "end": "549160"
  },
  {
    "text": "in in this system cases is really a",
    "start": "549160",
    "end": "551839"
  },
  {
    "text": "natural aggregate route and uh it makes",
    "start": "551839",
    "end": "555160"
  },
  {
    "text": "sense to load related data into the",
    "start": "555160",
    "end": "558120"
  },
  {
    "text": "cases object",
    "start": "558120",
    "end": "560920"
  },
  {
    "text": "anyway so it seems to me that the EF",
    "start": "563079",
    "end": "565680"
  },
  {
    "text": "core team is moving towards extended use",
    "start": "565680",
    "end": "568360"
  },
  {
    "text": "of Json",
    "start": "568360",
    "end": "570440"
  },
  {
    "text": "and that means uh that we're moving",
    "start": "570440",
    "end": "572800"
  },
  {
    "text": "towards a more hybrid between",
    "start": "572800",
    "end": "575480"
  },
  {
    "text": "traditional table heavy",
    "start": "575480",
    "end": "578200"
  },
  {
    "text": "relationships and a more pragmatic",
    "start": "578200",
    "end": "580760"
  },
  {
    "text": "column based uh storage based on",
    "start": "580760",
    "end": "583079"
  },
  {
    "text": "principles from key value and document",
    "start": "583079",
    "end": "585320"
  },
  {
    "text": "databases and these are powerful",
    "start": "585320",
    "end": "587279"
  },
  {
    "text": "techniques uh when you learn to master",
    "start": "587279",
    "end": "590399"
  },
  {
    "text": "them so less tables uh means a cleaner",
    "start": "590399",
    "end": "594800"
  },
  {
    "text": "solution and a more understandable",
    "start": "594800",
    "end": "597399"
  },
  {
    "text": "solution and then I think that equals a",
    "start": "597399",
    "end": "600720"
  },
  {
    "text": "better solution so I encourage you all",
    "start": "600720",
    "end": "603160"
  },
  {
    "text": "to check out the newest features of EF",
    "start": "603160",
    "end": "605600"
  },
  {
    "text": "core 8 and to join the Jason column",
    "start": "605600",
    "end": "608720"
  },
  {
    "text": "Revolution",
    "start": "608720",
    "end": "611720"
  },
  {
    "text": "andr thank you",
    "start": "612000",
    "end": "616160"
  }
]