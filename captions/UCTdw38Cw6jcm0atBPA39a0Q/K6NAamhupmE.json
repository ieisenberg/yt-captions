[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "hello everybody how are we doing today good fine thumbs up okay seems",
    "start": "7799",
    "end": "14400"
  },
  {
    "text": "reasonable you're not an Angry Crowd then no good not yet",
    "start": "14400",
    "end": "20439"
  },
  {
    "text": "yeah so I started working with some of the features that were being defined for what was at that time es6 but what we",
    "start": "20439",
    "end": "27679"
  },
  {
    "text": "came to know is ecmascript 2015 these new features of JavaScript I started working with them actually in early 2014",
    "start": "27679",
    "end": "33680"
  },
  {
    "text": "around January of 2014 because I was very excited about these changes to the JavaScript language and the beautiful",
    "start": "33680",
    "end": "40000"
  },
  {
    "text": "thing was if you were using a transpiler tool like back at that time there was Tracer and there was I forget what Babel",
    "start": "40000",
    "end": "47559"
  },
  {
    "text": "was called before Babel right at the moment but when you compiled your code from ecmascript 2015 this new synxs into",
    "start": "47559",
    "end": "54640"
  },
  {
    "text": "regular es5 code you can run it in any browser so I saw a lot of advantages of trying to get ahead of the Curve and",
    "start": "54640",
    "end": "60239"
  },
  {
    "text": "trying to use these new features of JavaScript because some of them are quite wonderful but then I realized over the course of the ne last couple years",
    "start": "60239",
    "end": "67439"
  },
  {
    "text": "that there are consistently areas that where people run into problems with these new features so in the old days",
    "start": "67439",
    "end": "74560"
  },
  {
    "start": "70000",
    "end": "127000"
  },
  {
    "text": "cartographers used to come up with maps that would try to describe the world and they would occasionally place these",
    "start": "74560",
    "end": "80119"
  },
  {
    "text": "mythical sea creatures and beasts that look angry like they're going to eat someone they would Place those in the",
    "start": "80119",
    "end": "85960"
  },
  {
    "text": "areas of the map that were either unexplored or known to be dangerous because there are rocks in the water and",
    "start": "85960",
    "end": "91920"
  },
  {
    "text": "so forth so my goal is to give you a map of some of these ecmascript 2015",
    "start": "91920",
    "end": "97079"
  },
  {
    "text": "features and talk about where you need to be careful and just some things to be aware of tips and tricks and things not",
    "start": "97079",
    "end": "103399"
  },
  {
    "text": "to do which it's actually amazing with these new features how many areas that",
    "start": "103399",
    "end": "109880"
  },
  {
    "text": "look so simple that create problems in projects or behaviors that you don't understand for example we'll first talk",
    "start": "109880",
    "end": "116439"
  },
  {
    "text": "about Arrow functions which I thought were very simple and it turns out I've seen more people run into unexpected",
    "start": "116439",
    "end": "123960"
  },
  {
    "text": "Behavior with arrow functions than anything else so for those of you that aren't familiar with some of the ecmascript 2015 features I'll just do a",
    "start": "123960",
    "end": "131200"
  },
  {
    "start": "127000",
    "end": "253000"
  },
  {
    "text": "brief review of each one that I talk about so AOS syntax in ecmascript",
    "start": "131200",
    "end": "136280"
  },
  {
    "text": "2015 is very similar to the Lambda syntax in C for net developers I can",
    "start": "136280",
    "end": "141760"
  },
  {
    "text": "create a function definition where a parameter X that was not the expected",
    "start": "141760",
    "end": "148200"
  },
  {
    "text": "Behavior one second have to remember how to use my",
    "start": "148200",
    "end": "155200"
  },
  {
    "text": "keyboard there we go and now if I hit this key that's not what I wanted let me try",
    "start": "155200",
    "end": "162599"
  },
  {
    "text": "well let me just try to use the mouse the I'm trying to use a little red marker but it's not behaving well this",
    "start": "162599",
    "end": "169080"
  },
  {
    "text": "function this is a function definition Square I'm so I'm I'm assigning a function definition to a variable Square",
    "start": "169080",
    "end": "174159"
  },
  {
    "text": "it's a function where it takes one parameter X and that goes to the expression x x x so just like in C sh",
    "start": "174159",
    "end": "180519"
  },
  {
    "text": "you don't need curly braces you don't need a return statement um and of course it's JavaScript so you don't need types",
    "start": "180519",
    "end": "186319"
  },
  {
    "text": "but I now have a function that I can invoke and pass in the number three and will return to be nine and here's a",
    "start": "186319",
    "end": "193040"
  },
  {
    "text": "function definition that takes two parameters so just like in C if you have more than one parameter or if you have zero parameters the parentheses are",
    "start": "193040",
    "end": "200040"
  },
  {
    "text": "required around the function signature so two parameters X and Y they go to the expression X Plus y I can pass in two",
    "start": "200040",
    "end": "206239"
  },
  {
    "text": "numbers and get a result so it looks simple it seems simple there's a couple",
    "start": "206239",
    "end": "211599"
  },
  {
    "text": "things to be aware of with this syntax though it's wonderful in JavaScript because JavaScript is basically a",
    "start": "211599",
    "end": "216879"
  },
  {
    "text": "functional programming language we have to write a lot of functions functions are basically our one unit of abstraction that we can",
    "start": "216879",
    "end": "223879"
  },
  {
    "text": "use in JavaScript and there's a lot of higher order functions in JavaScript so if you look at the array one of the",
    "start": "223879",
    "end": "229040"
  },
  {
    "text": "built-in apis now is a mapping function that I can pass in another",
    "start": "229040",
    "end": "234360"
  },
  {
    "text": "function that will be used to evaluate and produce a new array will be used against each element in the array so",
    "start": "234360",
    "end": "241120"
  },
  {
    "text": "this is doubling 1 two and three to turn it into an array of 2 four and six and it's nice",
    "start": "241120",
    "end": "246360"
  },
  {
    "text": "that I can just write a Lambda expression there instead of typing out the function keyword and so forth but what sort of things can go wrong so",
    "start": "246360",
    "end": "252599"
  },
  {
    "text": "let's start with a simple one what if I want to take that mapping function and return an object literal so for these",
    "start": "252599",
    "end": "257799"
  },
  {
    "start": "253000",
    "end": "334000"
  },
  {
    "text": "values one two and three what I'm trying to do is produce an array that says value one value two value three but this",
    "start": "257799",
    "end": "265440"
  },
  {
    "text": "doesn't work so the curly braces are not required in an Arrow function just like",
    "start": "265440",
    "end": "270880"
  },
  {
    "text": "in C if you just have an expression that you want evaluated and returned you don't have to use the curlies but as",
    "start": "270880",
    "end": "276160"
  },
  {
    "text": "soon as you do use the curlies the JavaScript interpreter this doesn't see this as an object literal it sees it as",
    "start": "276160",
    "end": "281840"
  },
  {
    "text": "now a block of code that has to be executed and has to have an explicit return statement in order to produce",
    "start": "281840",
    "end": "288800"
  },
  {
    "text": "something from that function so what I'm really doing is I'm saying for each value in in the array pass it in as n",
    "start": "288800",
    "end": "296000"
  },
  {
    "text": "and execute this code value n and just throw it away and you might say well what you know what is value colon n how",
    "start": "296000",
    "end": "304400"
  },
  {
    "text": "does that even work in JavaScript well it turns out JavaScript has labels so what the JavaScript interpreter or runtime sees is you have a label called",
    "start": "304400",
    "end": "311120"
  },
  {
    "text": "value and it points to this thing that just uses n so anyway end result there is I get back undefined undefined",
    "start": "311120",
    "end": "317120"
  },
  {
    "text": "undefined to do that properly one way to do it would be to add an explicit return statement and say",
    "start": "317120",
    "end": "323520"
  },
  {
    "text": "return value colon n or I can just wrap my expression in parentheses and that produce the",
    "start": "323520",
    "end": "330199"
  },
  {
    "text": "expected result value one value two value three very good what else can go wrong well it turns out one of the",
    "start": "330199",
    "end": "336319"
  },
  {
    "start": "334000",
    "end": "468000"
  },
  {
    "text": "problems they triy to solve in ecmascript 2015 is the slippery this pointer in JavaScript if you've been",
    "start": "336319",
    "end": "342280"
  },
  {
    "text": "doing JavaScript for any length of time then you probably know that the this the this reference can change on you when",
    "start": "342280",
    "end": "349160"
  },
  {
    "text": "you have a callback function that gets invoked from a different context so quite often when we use something like",
    "start": "349160",
    "end": "355039"
  },
  {
    "text": "set timeout in JavaScript and we expect that the call back function when the timer expires to have a this reference",
    "start": "355039",
    "end": "361520"
  },
  {
    "text": "that still points to our same object uh quite often it'll well it will point to the window object in the Callback",
    "start": "361520",
    "end": "367280"
  },
  {
    "text": "because set timeout is invoking that function from a different context than where we originally called set",
    "start": "367280",
    "end": "373240"
  },
  {
    "text": "timeout that would be a problem for example in this bit of code where I say numbers. for each call this function for",
    "start": "373240",
    "end": "379560"
  },
  {
    "text": "each n and try to get to this. sum what I'll get as a result of this expression",
    "start": "379560",
    "end": "386120"
  },
  {
    "text": "is cannot read property sum because the this reference is not pointing to my Adder anymore so in ecmascript 2015 they",
    "start": "386120",
    "end": "393319"
  },
  {
    "text": "tried to help with this Behavior by saying when you write this as an aror function what an error function will do",
    "start": "393319",
    "end": "399840"
  },
  {
    "text": "is lexically capture the value of this for you so you don't have to write uh",
    "start": "399840",
    "end": "405160"
  },
  {
    "text": "VAR self equals this or varme equals this or any of those patterns that you've probably seen in the past where",
    "start": "405160",
    "end": "410479"
  },
  {
    "text": "people capture the this reference and form a closure around it so that it's saved somewhere in a different",
    "start": "410479",
    "end": "417120"
  },
  {
    "text": "variable instead with the Javas one time will do for this Arrow function Arrow",
    "start": "417120",
    "end": "422960"
  },
  {
    "text": "functions will always have a this reference that is lexically the same as the outer scope so if I'm inside of a",
    "start": "422960",
    "end": "429440"
  },
  {
    "text": "method called add and I invoked add through the adder so that would pass in that Adder object as the this reference",
    "start": "429440",
    "end": "436800"
  },
  {
    "text": "I'm guaranteed that the this reference here will be the same as the this reference just above that line of code",
    "start": "436800",
    "end": "445759"
  },
  {
    "text": "right which is nice still makes me nervous When I See This inside of a",
    "start": "445759",
    "end": "451479"
  },
  {
    "text": "callback function but it works always works but because of that there's a couple things to be aware of with arrow",
    "start": "451479",
    "end": "457240"
  },
  {
    "text": "functions Arrow functions are not a replacement for a regular function there's a couple rules about Arrow",
    "start": "457240",
    "end": "464039"
  },
  {
    "text": "functions they behave differently than regular functions because of this so one of the implications of that is that uh",
    "start": "464039",
    "end": "470879"
  },
  {
    "start": "468000",
    "end": "530000"
  },
  {
    "text": "first of all you can have too many Arrow functions so the difference between the code that we see or sorry this is the",
    "start": "470879",
    "end": "476720"
  },
  {
    "text": "code that works this is a function definition inside of an object literal I don't need",
    "start": "476720",
    "end": "482120"
  },
  {
    "text": "the function keyword there but that's not an arrow function the arrow function still inside of here this will still",
    "start": "482120",
    "end": "488319"
  },
  {
    "text": "reference my Adder object and this will still be the same as it is outside of that but if I write it this way where I",
    "start": "488319",
    "end": "496919"
  },
  {
    "text": "place add as a method on my Adder using an aror function definition well again",
    "start": "496919",
    "end": "502319"
  },
  {
    "text": "that Arrow function captures the this reference that is in in scope lexically",
    "start": "502319",
    "end": "508280"
  },
  {
    "text": "outside of this definition which would be the line right above Adder which might be your if you're",
    "start": "508280",
    "end": "515200"
  },
  {
    "text": "inside of a module that this reference will be null uh or undefined if you're",
    "start": "515200",
    "end": "520240"
  },
  {
    "text": "in an es5 file the this reference would go back to be the window so that's a little bit of a problem you have to be",
    "start": "520240",
    "end": "526360"
  },
  {
    "text": "careful about what context what lexical context you're actually picking up and then the other big one is this code so",
    "start": "526360",
    "end": "532600"
  },
  {
    "start": "530000",
    "end": "624000"
  },
  {
    "text": "what I'm trying to do is Define a method or to find an object called Adder it has no behavior on it yet there's no methods",
    "start": "532600",
    "end": "539560"
  },
  {
    "text": "on it but I want to dynamically Place some Behavior into this so what I'm going to do is Define a function called",
    "start": "539560",
    "end": "545440"
  },
  {
    "text": "ad using an arrow function and then I'm going to talk call tell JavaScript that I want to bind",
    "start": "545440",
    "end": "551760"
  },
  {
    "text": "Adder to add so the bind method if you've never used it it's quite useful it's a way of",
    "start": "551760",
    "end": "557839"
  },
  {
    "text": "saying when someone invokes this add I'm going to bind it to Adder so that the",
    "start": "557839",
    "end": "562959"
  },
  {
    "text": "this reference can always be set up to point to this object but bind does not work on Arrow functions that's the",
    "start": "562959",
    "end": "569399"
  },
  {
    "text": "important thing to understand when the JavaScript runtime Encounters this Arrow function it permanently bakes the value",
    "start": "569399",
    "end": "577519"
  },
  {
    "text": "of this into the arrow function so the value of this right here inside this Arrow function will always always always",
    "start": "577519",
    "end": "584959"
  },
  {
    "text": "always be whatever this was right here in the that space which could be null",
    "start": "584959",
    "end": "590320"
  },
  {
    "text": "could be window could be anything and there's there's just no possible way to change that value you cannot use bind to",
    "start": "590320",
    "end": "596200"
  },
  {
    "text": "change that value you couldn't invoke the function an arrow function with apply for example and change the value",
    "start": "596200",
    "end": "602839"
  },
  {
    "text": "of this like you could with other functions and that has a number of serious implications I see this a lot in",
    "start": "602839",
    "end": "608360"
  },
  {
    "text": "react code where react programmers will commonly uh use function. bind to try to",
    "start": "608360",
    "end": "614440"
  },
  {
    "text": "take a a method that will handle a click event and bind it to a component and then they'll try to Define that method",
    "start": "614440",
    "end": "620279"
  },
  {
    "text": "or function using an arrow function it just it just does not work it also just introduces sometimes subtle bugs so if",
    "start": "620279",
    "end": "626720"
  },
  {
    "text": "you've ever used the Jasmine unit testing suite for JavaScript you might",
    "start": "626720",
    "end": "631880"
  },
  {
    "text": "know that the way I can set up a tech test context that I where I can share",
    "start": "631880",
    "end": "637399"
  },
  {
    "text": "stuff between like setup code and the test inside of a unit test here is just to attach things to the this reference",
    "start": "637399",
    "end": "644399"
  },
  {
    "text": "so outside of here I could say something like this do test Suite name equals F",
    "start": "644399",
    "end": "650000"
  },
  {
    "text": "and then I would expect inside of here to say this. test Suite whatever is and",
    "start": "650000",
    "end": "655040"
  },
  {
    "text": "get that value but it doesn't work with error functions when Jasmine invokes the call back function to execute my test it",
    "start": "655040",
    "end": "662440"
  },
  {
    "text": "tries to set the value of the this reference to the current test context but it fails because you can't do that with error functions here's another",
    "start": "662440",
    "end": "668480"
  },
  {
    "text": "example I'm going to be fancy and try using jQuery to say when the button is clicked then I want to change the name",
    "start": "668480",
    "end": "675200"
  },
  {
    "text": "of the button to click so if I would do that as a regular function definition this would work because when jQuery",
    "start": "675200",
    "end": "680560"
  },
  {
    "text": "invokes your event handling call back it sets up the this reference to point to the thing where the event originated",
    "start": "680560",
    "end": "687320"
  },
  {
    "text": "like the button unfortunately with an arrow function the value of this will be",
    "start": "687320",
    "end": "692600"
  },
  {
    "text": "whatever's out here right lexically and scope and jQuery cannot change that therefore I'm probably setting the name",
    "start": "692600",
    "end": "698519"
  },
  {
    "text": "of the window object instead of the name of the Button making any sense all right I'll keep going then I",
    "start": "698519",
    "end": "705880"
  },
  {
    "text": "had a ginger shot right before this session which might have not been the best idea because I feel a little jumpy right",
    "start": "705880",
    "end": "712480"
  },
  {
    "text": "now so Arrow functions are entirely different they essent there's no way to change the this reference and they're",
    "start": "712920",
    "end": "719079"
  },
  {
    "text": "not not normal functions for one thing they have no implicit arguments variable you know typically in JavaScript when",
    "start": "719079",
    "end": "725000"
  },
  {
    "text": "you invoke a function you can look at arguments and it looks like an array of everything that was passed in but no not",
    "start": "725000",
    "end": "730160"
  },
  {
    "text": "with error functions this arguments will be if you're inside of another function would be the arguments from the outer",
    "start": "730160",
    "end": "736199"
  },
  {
    "text": "function so there's no implicit arguments evaluating that code would say",
    "start": "736199",
    "end": "741440"
  },
  {
    "text": "result that length is zero so that's Arrow functions let's talk about template literals another",
    "start": "741440",
    "end": "747639"
  },
  {
    "text": "extremely useful feature in script 2015 what a template allows me to do is",
    "start": "747639",
    "end": "753519"
  },
  {
    "start": "751000",
    "end": "875000"
  },
  {
    "text": "to say basically string interpolation so it's like the dollar sign double quotes and C 6 that were introduced I want to",
    "start": "753519",
    "end": "760880"
  },
  {
    "text": "have a string where I produce a string like three + 5 equals 8 so I can poke",
    "start": "760880",
    "end": "768079"
  },
  {
    "text": "variables into my string I can evaluate expressions into a string and of course those are back ticks not single quotes",
    "start": "768079",
    "end": "775279"
  },
  {
    "text": "not double quotes you have to use a have a back tick to have a template but when people see the word template they think",
    "start": "775279",
    "end": "781560"
  },
  {
    "text": "oh I can define a template and then reuse it in different areas of my application unfortunately that's not how",
    "start": "781560",
    "end": "787480"
  },
  {
    "text": "they work in JavaScript in fact in one of the earlier specifications for ecmascript 2015 they called these quasi",
    "start": "787480",
    "end": "795240"
  },
  {
    "text": "templates like pseudo templates because the way they behave is",
    "start": "795240",
    "end": "801199"
  },
  {
    "text": "when the JavaScript interpreter hits this template X and Y have to be in scope they have to be defined they have",
    "start": "801199",
    "end": "807519"
  },
  {
    "text": "to be available so it's not like I can find this template and pass it to someone else who has an X and A Y no the",
    "start": "807519",
    "end": "812959"
  },
  {
    "text": "X and A Y everything is evaluated right there in place but you can make them reusable for example if I have something",
    "start": "812959",
    "end": "820760"
  },
  {
    "text": "called template that is an arrow function so now it's a function definition takes two parameters X and Y",
    "start": "820760",
    "end": "826040"
  },
  {
    "text": "well now anyone can reuse that template I can say template 2 and two template six and two and I'll get back the expected output like 2 plus 2 equal 4 so",
    "start": "826040",
    "end": "834040"
  },
  {
    "text": "that's good the other thing you can do if you're familiar with the destructuring Sy tax in ecmascript 2015 is I could",
    "start": "834040",
    "end": "841759"
  },
  {
    "text": "even pass in objects here so I'm defining a template that takes an object that has to have X and Y properties um",
    "start": "841759",
    "end": "848839"
  },
  {
    "text": "the curly braces here mean I'm destructuring or or ripping out properties out of that object I'm ripping out the x value ripping out the",
    "start": "848839",
    "end": "855360"
  },
  {
    "text": "y-v value putting them into individual variable declarations and now someone can invoke my template and pass in a model object",
    "start": "855360",
    "end": "863079"
  },
  {
    "text": "so here's my model object for a point it has a two and a two so I'll get out 2 plus two equal four",
    "start": "863079",
    "end": "870600"
  },
  {
    "text": "crazy syntax JavaScript has always had some crazy syntax so that destructuring",
    "start": "871040",
    "end": "876199"
  },
  {
    "start": "875000",
    "end": "1016000"
  },
  {
    "text": "syntax is actually very interesting but uh I've seen a couple places where it becomes dangerous so there's object",
    "start": "876199",
    "end": "883160"
  },
  {
    "text": "destructuring and there's array destructuring um and there's some additional destructuring that's coming",
    "start": "883160",
    "end": "888480"
  },
  {
    "text": "in the future but square brackets on the right hand side of an assignment that is constructing an object right so we're",
    "start": "888480",
    "end": "895519"
  },
  {
    "text": "creating an object literal here with two values 22 and 44 square brackets on the left hand side of",
    "start": "895519",
    "end": "901600"
  },
  {
    "text": "an assignment that's destructuring so this line of code is creating two new variables that are const X and Y and the",
    "start": "901600",
    "end": "909279"
  },
  {
    "text": "way JavaScript will work is to say oh you have this array I'm going to pull out the first value put it into X I'll",
    "start": "909279",
    "end": "914480"
  },
  {
    "text": "pull out the second value put it into 44 thus this unit test would pass X would be 22 y would be 44 very good and you",
    "start": "914480",
    "end": "921839"
  },
  {
    "text": "can also have object destructuring so curly braces on the right hand of an assignment that's constructing an object",
    "start": "921839",
    "end": "928680"
  },
  {
    "text": "curly braces on the left hand side that's destructuring an object so I'm creating a new variable called State the",
    "start": "928680",
    "end": "935079"
  },
  {
    "text": "default value will be New York in other words if the object I'm D structuring from doesn't have a state property this",
    "start": "935079",
    "end": "940639"
  },
  {
    "text": "will get the value New York and Country would be USA in this case state would be Maryland country would be USA there was",
    "start": "940639",
    "end": "947440"
  },
  {
    "text": "no country in the address that all seems fine and simple when you once you",
    "start": "947440",
    "end": "952839"
  },
  {
    "text": "understand D structuring and you look at simple expressions like that unfortunately you can do crazy things so here's a more complicated object",
    "start": "952839",
    "end": "959040"
  },
  {
    "text": "employee has first name has a nested object address it has an array of favorite numbers this bit of code here",
    "start": "959040",
    "end": "965839"
  },
  {
    "text": "saying create a new variable first name by just structuring out the first name of that employee okay so fine that'll be",
    "start": "965839",
    "end": "972040"
  },
  {
    "text": "Scott uh create a variable state so we're not creating a variable address we're creating a variable state that",
    "start": "972040",
    "end": "977519"
  },
  {
    "text": "will be destructured by going to address. State on that object destructure a variable called favorite",
    "start": "977519",
    "end": "983079"
  },
  {
    "text": "numbers that will go into the array and pick out the second value that's in the array 55 so that's all D structured out",
    "start": "983079",
    "end": "989560"
  },
  {
    "text": "of employee and I'll have first name equals Scott State equals Maryland favorite numbers",
    "start": "989560",
    "end": "995920"
  },
  {
    "text": "55 that's a little bit weird and you can do things like this what is the value there well we we are creating a new",
    "start": "995920",
    "end": "1002560"
  },
  {
    "text": "variable length that will be destructured from the string so what do length would be four right that looks a",
    "start": "1002560",
    "end": "1009759"
  },
  {
    "text": "little bit weird but it gets better I mean I think this is hard to read That's just weird but it gets better so you're",
    "start": "1009759",
    "end": "1018000"
  },
  {
    "start": "1016000",
    "end": "1200000"
  },
  {
    "text": "familiar with the Bang Bang You're a Boolean type coercion in JavaScript",
    "start": "1018000",
    "end": "1023720"
  },
  {
    "text": "where use two exclamation points this is a way of saying I need to know the truth I need to know if value should be",
    "start": "1023720",
    "end": "1030000"
  },
  {
    "text": "considered as true or false uh so I'm not what I'm going to do is apply the",
    "start": "1030000",
    "end": "1035400"
  },
  {
    "text": "negation operator which in this case would return false and then I'll apply the negation",
    "start": "1035400",
    "end": "1042480"
  },
  {
    "text": "operator again to turn that false into a true but what I get into the result is a true Boolean so Bang Bang you're a",
    "start": "1042480",
    "end": "1049240"
  },
  {
    "text": "Boolean I want to know if you're true or false that's weird but we can combine",
    "start": "1049240",
    "end": "1055080"
  },
  {
    "text": "that with other syntax like d structuring to do better things oh actually so not D structuring this is",
    "start": "1055080",
    "end": "1061480"
  },
  {
    "text": "the um spread syntax so dot dot dot is a new feature of ecmascript 2015 where I",
    "start": "1061480",
    "end": "1067840"
  },
  {
    "text": "can take an array and I can spread it into another array or actually I can also use it when I invoke a function to spread parameters across the individual",
    "start": "1067840",
    "end": "1075280"
  },
  {
    "text": "parameters of a function but the result of this expression is is an array 1 2 3 4 5 six",
    "start": "1075280",
    "end": "1080600"
  },
  {
    "text": "so it spreads those values out into the array so let's combine bang bang your aoan with spreading and a new feature",
    "start": "1080600",
    "end": "1086679"
  },
  {
    "text": "that's in um coming up in ecmascript I think it's",
    "start": "1086679",
    "end": "1091799"
  },
  {
    "text": "in the 2017 specification which is an object spread which is actually extremely useful what I want to do is I",
    "start": "1091799",
    "end": "1098799"
  },
  {
    "text": "want to build a result from an object literal expression",
    "start": "1098799",
    "end": "1104039"
  },
  {
    "text": "I want result to have a name which will be a string whatever and I want to take this data object and spread it into that",
    "start": "1104039",
    "end": "1110400"
  },
  {
    "text": "object as if it's a so it's a part of the object I don't want to say result. data I want to say result. x and that's",
    "start": "1110400",
    "end": "1116600"
  },
  {
    "text": "exactly what that dot dot dot syntax will do take the properties out of data plug them out put them into this other object extremely useful right there's a",
    "start": "1116600",
    "end": "1123760"
  },
  {
    "text": "lot of um places like in react where you're always copying little pieces of State around so that'll be very useful",
    "start": "1123760",
    "end": "1129799"
  },
  {
    "text": "so what does this do so this is this is where we this is in the Redux library",
    "start": "1129799",
    "end": "1135240"
  },
  {
    "text": "and you look at this expression dot dot dot bang bang data and it takes a",
    "start": "1135240",
    "end": "1141840"
  },
  {
    "text": "second but the important part to understand here is that the the operator",
    "start": "1141840",
    "end": "1147360"
  },
  {
    "text": "precedence the JavaScript will apply will first do bang bang data to get a Boolean value so basically I want to",
    "start": "1147360",
    "end": "1154159"
  },
  {
    "text": "know if data is there or not there I want to know if it's true or false so if",
    "start": "1154159",
    "end": "1159320"
  },
  {
    "text": "it's true now we have this tary expression um that will be evaluated next so let's say data is true in that",
    "start": "1159320",
    "end": "1166080"
  },
  {
    "text": "case I will take data if data is false false I will take this object literal Default true and then the last operator",
    "start": "1166080",
    "end": "1173559"
  },
  {
    "text": "to be applied because it's the lowest precedence is this object spread operator so basically I'm building a",
    "start": "1173559",
    "end": "1178760"
  },
  {
    "text": "result that if I have data will contain the data but if it does not have data it",
    "start": "1178760",
    "end": "1183960"
  },
  {
    "text": "will have just name and um Default true right so it's a neat little syntax but",
    "start": "1183960",
    "end": "1191799"
  },
  {
    "text": "the first time you encounter it you have to go do some research with it let's talk about cons I've already",
    "start": "1191799",
    "end": "1199440"
  },
  {
    "text": "been using it because a lot of people say never use VAR anymore never use let always use const unless you really do",
    "start": "1199440",
    "end": "1206559"
  },
  {
    "start": "1200000",
    "end": "1254000"
  },
  {
    "text": "have to reassign to a a variable declaration so what does con do well if I create a const x equals 2 and then I",
    "start": "1206559",
    "end": "1212960"
  },
  {
    "text": "try to assign to X I should have a type error at runtime assignment to constant variable I shouldn't be allowed to",
    "start": "1212960",
    "end": "1219320"
  },
  {
    "text": "change the value that is inside that variable but it doesn't mean that I cannot change something that that",
    "start": "1219320",
    "end": "1225159"
  },
  {
    "text": "variable references or points to so if I have an array that const I cannot change",
    "start": "1225159",
    "end": "1230679"
  },
  {
    "text": "the reference in that variable but I can certainly still change the array so I could push and pop and slice and do whatever I want to",
    "start": "1230679",
    "end": "1237960"
  },
  {
    "text": "it if I really wanted to make that array immutable there's an object. freeze API",
    "start": "1237960",
    "end": "1243919"
  },
  {
    "text": "where I could say let's freeze the array and then trying to push into it that would be a type",
    "start": "1243919",
    "end": "1249679"
  },
  {
    "text": "error let's talk about collections for a second there's new Collections and new",
    "start": "1249880",
    "end": "1255240"
  },
  {
    "start": "1254000",
    "end": "1347000"
  },
  {
    "text": "collection apis in ecmascript 2015 uh one best practice that is suggested now is never tried to create",
    "start": "1255240",
    "end": "1262679"
  },
  {
    "text": "so so I want to create an array typically I just use an object literal but let's say I'm in a more",
    "start": "1262679",
    "end": "1268440"
  },
  {
    "text": "Dynamic piece of code that is trying to be uh very Dynamic we I'm I'm not",
    "start": "1268440",
    "end": "1274279"
  },
  {
    "text": "exactly sure what parameters the people are going to pass to me but I just know that what they give me I have to turn into an array so one way to do that is",
    "start": "1274279",
    "end": "1280400"
  },
  {
    "text": "to invoke the array method pass in values it will produce an array that's",
    "start": "1280400",
    "end": "1285720"
  },
  {
    "text": "good unfortunately if you invoke array with just a single parameter though array assumes that oh you want an",
    "start": "1285720",
    "end": "1292480"
  },
  {
    "text": "array of this size and I'll just fill in undefined you know so this one produces",
    "start": "1292480",
    "end": "1298120"
  },
  {
    "text": "an array this one produces an array of 10 things that are undefined so there's",
    "start": "1298120",
    "end": "1303320"
  },
  {
    "text": "this in congruity in the behavior of array the suggestion as of ecmascript 2015 is to always use of if you expect",
    "start": "1303320",
    "end": "1310600"
  },
  {
    "text": "to take a value and produce an array out of it just use array. of pass in however many parameters they will always be an",
    "start": "1310600",
    "end": "1316600"
  },
  {
    "text": "array and there's also array. from which",
    "start": "1316600",
    "end": "1321840"
  },
  {
    "text": "interestingly enough will work with anything that has a length property so I can I can say array. from uh I'm going",
    "start": "1321840",
    "end": "1327960"
  },
  {
    "text": "to pass in an object that has a length property set to five and this is a little callback function that'll always",
    "start": "1327960",
    "end": "1333960"
  },
  {
    "text": "just take a value um and the key that is used and we're just going to write out",
    "start": "1333960",
    "end": "1339120"
  },
  {
    "text": "the key value so I get one two 0 one two three 4 from that expression that's the",
    "start": "1339120",
    "end": "1344200"
  },
  {
    "text": "key values as it iterates through that there's also a set they're set in map in",
    "start": "1344200",
    "end": "1349919"
  },
  {
    "start": "1347000",
    "end": "1397000"
  },
  {
    "text": "ecmascript 2015 they're quite useful in a number of scenarios but they are shallow in other words if I create a new",
    "start": "1349919",
    "end": "1355400"
  },
  {
    "text": "set and add the same try to add the same value twice the set size will just be one because it will not accept the",
    "start": "1355400",
    "end": "1361320"
  },
  {
    "text": "second nine it won't throw an air just you know won't add anything to the set Nine's already in the set but if I Tred",
    "start": "1361320",
    "end": "1368080"
  },
  {
    "text": "to pass into arrays that contain the values nine um you might hope that it's",
    "start": "1368080",
    "end": "1373200"
  },
  {
    "text": "smart enough to realize they contain the same values but it doesn't do that all it sees is two different object",
    "start": "1373200",
    "end": "1379039"
  },
  {
    "text": "references two different references coming in so the size will be two",
    "start": "1379039",
    "end": "1384640"
  },
  {
    "text": "there and but of course if I do try to add the same reference twice so array is",
    "start": "1384640",
    "end": "1391960"
  },
  {
    "text": "pointing to this that was created from an array literal that would be a set size of one another common question is we have",
    "start": "1391960",
    "end": "1399279"
  },
  {
    "text": "this these new collections map and set they're quite useful in a number of scenarios and we can create arrays using",
    "start": "1399279",
    "end": "1405039"
  },
  {
    "text": "object literal syntax we can create objects using object literal syntax is there an is there an a literal",
    "start": "1405039",
    "end": "1411760"
  },
  {
    "text": "notation for map and set no the way you would create a new map or a new set is to invoke The Constructor and with map",
    "start": "1411760",
    "end": "1418960"
  },
  {
    "text": "The Constructor is a little bit weird but you basically pass in an array an array of arrays right so the first",
    "start": "1418960",
    "end": "1425120"
  },
  {
    "text": "element here would be mapping one to the string representation of one and two to the string representation of two would",
    "start": "1425120",
    "end": "1430159"
  },
  {
    "text": "be the second element in that map classes so the big thing right",
    "start": "1430159",
    "end": "1439039"
  },
  {
    "start": "1438000",
    "end": "1498000"
  },
  {
    "text": "we when I explain ecmascript 2015 classes and same thing goes for",
    "start": "1439039",
    "end": "1445240"
  },
  {
    "text": "typescript too I I always explain them you know these are really just syntactic sugar for what some people used to do in",
    "start": "1445240",
    "end": "1452760"
  },
  {
    "text": "JavaScript which is the code here on the right when the JavaScript runtime or when a transpiler runs across this this",
    "start": "1452760",
    "end": "1459520"
  },
  {
    "text": "employee class you could implement the same thing just by first defining a Constructor",
    "start": "1459520",
    "end": "1465640"
  },
  {
    "text": "function that takes a name and assigns name internally as a field to that object and",
    "start": "1465640",
    "end": "1472240"
  },
  {
    "text": "then set up the Prototype object on that Constructor function to have the methods or the shared behavior that you",
    "start": "1472240",
    "end": "1479279"
  },
  {
    "text": "want and it's true the code over here and the code over here would function",
    "start": "1479279",
    "end": "1484360"
  },
  {
    "text": "pretty much identically I can say new employee pass in Scott and then invoke do work on that employee they both do",
    "start": "1484360",
    "end": "1490080"
  },
  {
    "text": "the same thing but there are some subtle differences that it's always those",
    "start": "1490080",
    "end": "1495159"
  },
  {
    "text": "little things that people run into on certain projects so for examp example",
    "start": "1495159",
    "end": "1500279"
  },
  {
    "start": "1498000",
    "end": "1585000"
  },
  {
    "text": "hoisting if I if I if if in JavaScript you might be familiar",
    "start": "1500279",
    "end": "1506840"
  },
  {
    "text": "with this term hoisting it it hoisting happens on VAR declarations and fun function declarations it's basically the",
    "start": "1506840",
    "end": "1512919"
  },
  {
    "text": "JavaScript runtime looking through my file and saying oh I see you have a function declaration down",
    "start": "1512919",
    "end": "1518919"
  },
  {
    "text": "here I'm going to hoist that up so essentially that symbol like employee is",
    "start": "1518919",
    "end": "1524679"
  },
  {
    "text": "at the top of the file and that means I can write code like this I'm going to create a new employee so I'm going to say con equals new employee and this",
    "start": "1524679",
    "end": "1531279"
  },
  {
    "text": "code would work even though the functions defined later in the file you know maybe it's a utility function or it's a class that I don't really want to",
    "start": "1531279",
    "end": "1538600"
  },
  {
    "text": "think about it I'm going to push it down beneath the the code that does some real work and that's fine that does not",
    "start": "1538600",
    "end": "1543960"
  },
  {
    "text": "happen with classes if I try to instantiate a new employee an employee",
    "start": "1543960",
    "end": "1549120"
  },
  {
    "text": "was a class definition that'll be a runtime reference air so your class definitions have to come and appear",
    "start": "1549120",
    "end": "1554840"
  },
  {
    "text": "lexically before you try to use them",
    "start": "1554840",
    "end": "1560200"
  },
  {
    "text": "and the interesting thing is that class is actually hoisted this is just a weird",
    "start": "1560200",
    "end": "1565960"
  },
  {
    "text": "thing in the JavaScript specifications they actually say sorry let me go back a second they actually say CL this",
    "start": "1565960",
    "end": "1573000"
  },
  {
    "text": "employee symbol it is actually hoisted so that the definition is actually available up here but for class",
    "start": "1573000",
    "end": "1580919"
  },
  {
    "text": "definitions let variables and const variables the ecmascript specification",
    "start": "1580919",
    "end": "1586799"
  },
  {
    "start": "1585000",
    "end": "1634000"
  },
  {
    "text": "describes this thing called the temporal Dead Zone anyone ever hear that term I",
    "start": "1586799",
    "end": "1592039"
  },
  {
    "text": "love that term temporal Dead Zone sounds scary the temporal dead zone is what",
    "start": "1592039",
    "end": "1598360"
  },
  {
    "text": "they Define as the area where above the place where something",
    "start": "1598360",
    "end": "1605000"
  },
  {
    "text": "was defined so if I say let x equals 2 here in the middle of the function yes X",
    "start": "1605000",
    "end": "1610919"
  },
  {
    "text": "is hoisted to the top but it is inside of its temporal Dead Zone and if I try",
    "start": "1610919",
    "end": "1616960"
  },
  {
    "text": "to do anything without that symbol X I should get a reference error so if I try",
    "start": "1616960",
    "end": "1622320"
  },
  {
    "text": "to assign to it if I try to read it even if I try to use type of on that variable it'll throw a reference er error it's in",
    "start": "1622320",
    "end": "1628679"
  },
  {
    "text": "the tdz and that goes for const and that goes for classes",
    "start": "1628679",
    "end": "1633919"
  },
  {
    "text": "also here's another difference if I Define so this is a Constructor function human equals function and then uh",
    "start": "1633919",
    "end": "1640600"
  },
  {
    "text": "modifying the Prototype human. prototype. do work as a function so that's the old way of defining a class",
    "start": "1640600",
    "end": "1645840"
  },
  {
    "text": "or a type in JavaScript I can use a 4in loop to go through a new instance of",
    "start": "1645840",
    "end": "1652799"
  },
  {
    "text": "that human object and look at all the things that are available that I can index into and I will get out the value",
    "start": "1652799",
    "end": "1658679"
  },
  {
    "text": "do work if you do the same thing with a class which is to define a class have a",
    "start": "1658679",
    "end": "1664799"
  },
  {
    "text": "do work method try to iterate through it four in that'll produce an empty array I",
    "start": "1664799",
    "end": "1670760"
  },
  {
    "text": "cannot get to the the method definitions that are on an object using a 4N at least if you do",
    "start": "1670760",
    "end": "1678840"
  },
  {
    "text": "want to write code like that you can write code something like this so I'll instantiate a new horse and invoke",
    "start": "1678840",
    "end": "1684440"
  },
  {
    "text": "object. prototype of and then I will use a four of loop uh we could talk about",
    "start": "1684440",
    "end": "1690440"
  },
  {
    "text": "that too today but four of is pretty simple to understand it iterates the values inside of something instead of the keys that are in something I will",
    "start": "1690440",
    "end": "1697000"
  },
  {
    "text": "iterate through object. get own property names for the Prototype object of that",
    "start": "1697000",
    "end": "1702480"
  },
  {
    "text": "and that will actually give me back the methods that are available and that will actually include the Constructor too so even if I don't have an a Constructor",
    "start": "1702480",
    "end": "1709720"
  },
  {
    "text": "defined it's kind of like C where if you have no Constructor defined you get the default",
    "start": "1709720",
    "end": "1715279"
  },
  {
    "text": "Constructor same thing in JavaScript I'll have a Constructor and I'll have a method called do",
    "start": "1715279",
    "end": "1721640"
  },
  {
    "text": "work new is required so we used to do this thing in the old days of JavaScript",
    "start": "1722840",
    "end": "1729960"
  },
  {
    "text": "where we'd write a Constructor function and then we would write defensive code to make sure that someone invoked that",
    "start": "1729960",
    "end": "1735600"
  },
  {
    "text": "Constructor function using the new keyword that was something you could check by using like the instance of",
    "start": "1735600",
    "end": "1741080"
  },
  {
    "text": "operator to make sure the instance of this uh was the same as your Constructor",
    "start": "1741080",
    "end": "1746200"
  },
  {
    "text": "function we don't have to do that anymore um we used to do that by the way because if someone invoked a Constructor",
    "start": "1746200",
    "end": "1752159"
  },
  {
    "text": "function without using the new keyword the this reference would be set up to be like the window object Global variable",
    "start": "1752159",
    "end": "1758679"
  },
  {
    "text": "and so everything that happened inside the Constructor would be creating new variable Global varibles which is bad don't have to worry about that with uh",
    "start": "1758679",
    "end": "1764799"
  },
  {
    "text": "classes if someone tries to invoke basically the structor function for for",
    "start": "1764799",
    "end": "1769880"
  },
  {
    "text": "this class definition there will be a type error you have to use new but this being",
    "start": "1769880",
    "end": "1776919"
  },
  {
    "text": "JavaScript you can actually Implement a Constructor function that does not return a horse you can return anything",
    "start": "1776919",
    "end": "1782919"
  },
  {
    "text": "you want it's JavaScript right so I can have a Constructor function that returns some object with the name of",
    "start": "1782919",
    "end": "1788480"
  },
  {
    "text": "jippy that's legal yes shake your",
    "start": "1788480",
    "end": "1794240"
  },
  {
    "text": "heads let's talk about modules so",
    "start": "1794240",
    "end": "1799559"
  },
  {
    "text": "when I first started reading about modules in ecmascript 2015 I was so excited I thought finally this language",
    "start": "1799559",
    "end": "1807120"
  },
  {
    "text": "will have something that has been needed since the beginning of time a a feature that every serious programming language",
    "start": "1807120",
    "end": "1813440"
  },
  {
    "text": "has to have I mean without modules you just can't scale up in complexity and then after a couple years",
    "start": "1813440",
    "end": "1819799"
  },
  {
    "text": "of working with them I'm reminded of this quote from an Oscar Wild play When the gods wish to punish us they answer",
    "start": "1819799",
    "end": "1825720"
  },
  {
    "text": "our prayers so yes I have modules now but there's times when I find them a a",
    "start": "1825720",
    "end": "1831559"
  },
  {
    "text": "little bit frustrating so just to review modules in the old days of JavaScript we",
    "start": "1831559",
    "end": "1838519"
  },
  {
    "start": "1834000",
    "end": "1930000"
  },
  {
    "text": "try very hard to constrain the scope of the things that we're creating the variables we're creating the function",
    "start": "1838519",
    "end": "1844200"
  },
  {
    "text": "definitions and you know if you just open up a JS file that gets loaded into the browser and you just start writing a",
    "start": "1844200",
    "end": "1849640"
  },
  {
    "text": "function definition um it's very easy to create a global variable in the window object so after a while people started",
    "start": "1849640",
    "end": "1855960"
  },
  {
    "text": "following this pattern of using an iffy immediately evaluated uh immediately",
    "start": "1855960",
    "end": "1861039"
  },
  {
    "text": "invoked function expression because everything in JavaScript can be scoped to a function and now anything that I do",
    "start": "1861039",
    "end": "1868000"
  },
  {
    "text": "inside of here any code that I place will be local to that function but I can choose what I want to expose by",
    "start": "1868000",
    "end": "1874320"
  },
  {
    "text": "returning an object or explicitly attaching something to the window object and then when es 5.1 was",
    "start": "1874320",
    "end": "1881559"
  },
  {
    "text": "introduced whoop sorry we got or es5 was introduced we also started adding you",
    "start": "1881559",
    "end": "1886639"
  },
  {
    "text": "strict on this to place the JavaScript interpreter into strict mode which would uh allow it to perform a little little",
    "start": "1886639",
    "end": "1892639"
  },
  {
    "text": "bit better and also help us avoid some common mistakes however uh with eosp",
    "start": "1892639",
    "end": "1898159"
  },
  {
    "text": "2015 modules all of this goes away when I write ajs file that is going to be",
    "start": "1898159",
    "end": "1904240"
  },
  {
    "text": "transpiled by something like uh webpack well not webpack by Babel or the typescript compiler even and I'm using",
    "start": "1904240",
    "end": "1911440"
  },
  {
    "text": "things like Import and Export in that file it's assumed that I am writing a module so I don't think about it I don't",
    "start": "1911440",
    "end": "1917919"
  },
  {
    "text": "don't think about it as a file anymore and anything I do in that module is going to be implicitly scoped to that",
    "start": "1917919",
    "end": "1924440"
  },
  {
    "text": "module it's not going to be available outside of it at all I have to explicitly export",
    "start": "1924440",
    "end": "1930880"
  },
  {
    "start": "1930000",
    "end": "2092000"
  },
  {
    "text": "something like this to make it available from outside of this file so if I don't export work it doesn't have to be in an",
    "start": "1930880",
    "end": "1938200"
  },
  {
    "text": "if or anything else it's private to this module the file that I'm working in also",
    "start": "1938200",
    "end": "1944559"
  },
  {
    "text": "use strict is no longer required with ecmascript when you're writing code in a module it's just assumed to be in strict",
    "start": "1944559",
    "end": "1950760"
  },
  {
    "text": "mode so you never have to use that strange object object literal again anyway the export syntax and ecri 2015 I",
    "start": "1950760",
    "end": "1956880"
  },
  {
    "text": "can export U multiple objects I can put my exports down here I could have also written export use the keyword right in",
    "start": "1956880",
    "end": "1963960"
  },
  {
    "text": "front of the class definition to say export class person I can have aliases so I could do something like export work",
    "start": "1963960",
    "end": "1970840"
  },
  {
    "text": "as Fu comma person so I could change the name of this when I exposed it publicly",
    "start": "1970840",
    "end": "1976440"
  },
  {
    "text": "there's also the concept of a default default export which is a little bit confusing uh because the way you import",
    "start": "1976440",
    "end": "1982000"
  },
  {
    "text": "a default export uses a different syntax than the way you would import these other two pieces that were exported as",
    "start": "1982000",
    "end": "1988760"
  },
  {
    "text": "not as defaults but as symbols but we'll talk about that and there's also this syntax which",
    "start": "1988760",
    "end": "1995760"
  },
  {
    "text": "is quite useful and this has been been around for a",
    "start": "1995760",
    "end": "2001679"
  },
  {
    "text": "while on angular 2 us this quite a bit I think they call it uh Barrel rollups but basically when I'm when I'm building a",
    "start": "2001679",
    "end": "2006960"
  },
  {
    "text": "JavaScript application Now using modules I might have a a folder in my file system that contains a bunch of stuff",
    "start": "2006960",
    "end": "2013120"
  },
  {
    "text": "that has to work together to do something so let's say it wraps a an API on my server and I have things in there",
    "start": "2013120",
    "end": "2018519"
  },
  {
    "text": "to make HTTP calls and I have things in there to do special serializations and add off tokens and all that stuff so",
    "start": "2018519",
    "end": "2024120"
  },
  {
    "text": "there's a lot of implementation details in there someone who who is consuming that stuff who is importing some things",
    "start": "2024120",
    "end": "2029799"
  },
  {
    "text": "from there I don't necessarily want them to know about specific files that are in that folder or specific",
    "start": "2029799",
    "end": "2035880"
  },
  {
    "text": "capabilities I so let's say all this is is in a folder called Services what I want them to be able to",
    "start": "2035880",
    "end": "2042600"
  },
  {
    "text": "do is say import something from services and just reference that folder",
    "start": "2042600",
    "end": "2048320"
  },
  {
    "text": "which is easy to do with most tools if you just provide an index.js file that",
    "start": "2048320",
    "end": "2053440"
  },
  {
    "text": "exports just the things that you want from inside of that collection of things hopefully I'm making sense with those",
    "start": "2053440",
    "end": "2060240"
  },
  {
    "text": "the index.js file could could look something like this if I just wanted to export everything from this other file",
    "start": "2060240",
    "end": "2065679"
  },
  {
    "text": "called creatures I can do it that way ort everything from humans or I could selectively export",
    "start": "2065679",
    "end": "2071480"
  },
  {
    "text": "things and by the way in ecmascript 2015 you don't specify a file extension here but implicitly this would be creatures.",
    "start": "2071480",
    "end": "2077919"
  },
  {
    "text": "JS that's what we would go looking for there unless creatures is also a folder",
    "start": "2077919",
    "end": "2083878"
  },
  {
    "text": "that has an index file inside of it then we could get the U exports from",
    "start": "2083879",
    "end": "2089079"
  },
  {
    "text": "everything that is exported from that index.js anyway Imports so I'm going to",
    "start": "2089079",
    "end": "2094440"
  },
  {
    "start": "2092000",
    "end": "2105000"
  },
  {
    "text": "import things so I'm importing person an animal from lib so just backing up a",
    "start": "2094440",
    "end": "2100520"
  },
  {
    "text": "second um pretend I have an export like this it looks like destructuring syntax",
    "start": "2100520",
    "end": "2108680"
  },
  {
    "text": "but never ever ever consider this to be destructuring syntax I'll talk about this in a minute we are not creating new",
    "start": "2108680",
    "end": "2115359"
  },
  {
    "text": "variables called person and animal we're doing something very similar but I'll talk about the difference here in just a bit and that's a big point of confusion",
    "start": "2115359",
    "end": "2121400"
  },
  {
    "text": "with modules so I when to import person and animal presumably they were exported from this module as person and animal",
    "start": "2121400",
    "end": "2129720"
  },
  {
    "text": "this syntax without the curly braces that is asking for the default export",
    "start": "2129720",
    "end": "2136040"
  },
  {
    "text": "from this module so un unless this module has a line of code that says",
    "start": "2136040",
    "end": "2141560"
  },
  {
    "text": "export default something um I will not get anything here for human",
    "start": "2141560",
    "end": "2148480"
  },
  {
    "text": "person and that's important and it's not like it throws a runtime air you just get a a null value there I can also",
    "start": "2148480",
    "end": "2155599"
  },
  {
    "text": "import things by importing everything s ort it into this name space so I could say import everything from uh",
    "start": "2155599",
    "end": "2162480"
  },
  {
    "text": "react and then this becomes a almost like a name space to get to the things",
    "start": "2162480",
    "end": "2168040"
  },
  {
    "text": "inside of that module I would say li. FU or li. bar or li. animal to get to the",
    "start": "2168040",
    "end": "2173480"
  },
  {
    "text": "indiv individual things that were exported from there is that making some",
    "start": "2173480",
    "end": "2179079"
  },
  {
    "text": "sense so let's talk about sorry back up one second let's talk about what these are it's not destructuring it's not like",
    "start": "2179400",
    "end": "2185599"
  },
  {
    "text": "this thing exposes a model OB uh a module object and I'm destructuring things out of the exports no what I'm",
    "start": "2185599",
    "end": "2192000"
  },
  {
    "start": "2192000",
    "end": "2322000"
  },
  {
    "text": "creating is what's known as an immutable binding so yes it is like a variable but",
    "start": "2192000",
    "end": "2197880"
  },
  {
    "text": "behind the scenes for people that have done things like C++ it's almost like a pointer to a pointer so let me explain what I mean by that let's say I write a",
    "start": "2197880",
    "end": "2204920"
  },
  {
    "text": "module where I export a simple variable counter because you can export all sorts of different things in JavaScript export",
    "start": "2204920",
    "end": "2211079"
  },
  {
    "text": "variables export functions export object literals export class definitions so this is just exporting a simple variable",
    "start": "2211079",
    "end": "2217280"
  },
  {
    "text": "cter equals z it's not const it can be reassigned to so that means I can also",
    "start": "2217280",
    "end": "2222560"
  },
  {
    "text": "export a function increment where if someone invokes that I can say counter plus equals one and return the new value",
    "start": "2222560",
    "end": "2228400"
  },
  {
    "text": "seems good now over here in some other code let's try to import counter from lib creatures so yes it's like I have a",
    "start": "2228400",
    "end": "2235839"
  },
  {
    "text": "variable named counter uh but it's immutable so it's",
    "start": "2235839",
    "end": "2241400"
  },
  {
    "text": "almost like it was defined with const if I try to modify that it's not like local to my module uh I'll get a syntax air",
    "start": "2241400",
    "end": "2248880"
  },
  {
    "text": "trying to change the value that is in that module variable in that binding",
    "start": "2248880",
    "end": "2253920"
  },
  {
    "text": "sorry but I can import both counter and increment from creatures and this is",
    "start": "2253920",
    "end": "2260960"
  },
  {
    "text": "just proving that these bindings are live so you might think back backing up a second if I get a simple primitive",
    "start": "2260960",
    "end": "2267960"
  },
  {
    "text": "value like a number into a variable I probably got a copy of it from that module right that's what I",
    "start": "2267960",
    "end": "2274200"
  },
  {
    "text": "would that's what I thought at first I import this simple very value from another module well if it started off as",
    "start": "2274200",
    "end": "2280680"
  },
  {
    "text": "a nine the other thing could change to a 10 I wouldn't know but that's not how these bindings work they're a little bit magical that's why I say they're like a",
    "start": "2280680",
    "end": "2286680"
  },
  {
    "text": "pointer to a pointer or a reference to a reference if I import counter and increment from this Southern module and",
    "start": "2286680",
    "end": "2292440"
  },
  {
    "text": "I invoke increments well this code inside the module is allowed to change counter inside this module let uh the",
    "start": "2292440",
    "end": "2299079"
  },
  {
    "text": "counter is just a simple variable so we can change it inside of here and what I will see from the other module is I will",
    "start": "2299079",
    "end": "2305480"
  },
  {
    "text": "see that new value of counter which to me was amazing when I realized this so",
    "start": "2305480",
    "end": "2310800"
  },
  {
    "text": "it's almost like I can have a Singleton here defined in my module and when I make changes to it the entire",
    "start": "2310800",
    "end": "2316480"
  },
  {
    "text": "application sees the changes in that making some",
    "start": "2316480",
    "end": "2321359"
  },
  {
    "text": "sense and the bindings are live so let's take another example I'm going to export an object literal creature this object",
    "start": "2321720",
    "end": "2329480"
  },
  {
    "text": "has a name of Oscar I'm going to export a function inspect just so I can look at",
    "start": "2329480",
    "end": "2334640"
  },
  {
    "text": "the creature's name and I'm going to export a function function reset which will just give me a new object creature.",
    "start": "2334640",
    "end": "2341560"
  },
  {
    "text": "name equals Oscar so let's do a few things with that um let's say I import",
    "start": "2341560",
    "end": "2347520"
  },
  {
    "text": "creature from this module and I say creature. name equals Winnie that's legal I'm not trying to change so if I",
    "start": "2347520",
    "end": "2354319"
  },
  {
    "text": "did import creature from this module creature is the binding and I'm not",
    "start": "2354319",
    "end": "2360359"
  },
  {
    "text": "modifying The Binding I'm modifying something that The Binding points do so from outside the module I can still",
    "start": "2360359",
    "end": "2365680"
  },
  {
    "text": "change the name of the creature and I see the change and if I call into that",
    "start": "2365680",
    "end": "2371160"
  },
  {
    "text": "module it sees the change too so these live bindings work both way it truly is",
    "start": "2371160",
    "end": "2376319"
  },
  {
    "text": "like a Singleton object that gets exported and I can reset it and see that",
    "start": "2376319",
    "end": "2382359"
  },
  {
    "text": "change from the outside world to what is the default value of this",
    "start": "2382359",
    "end": "2389040"
  },
  {
    "start": "2385000",
    "end": "2405000"
  },
  {
    "text": "inside of a module it's not the window object anymore it is undefined so when you're inside one of these files writing",
    "start": "2389040",
    "end": "2395520"
  },
  {
    "text": "Import and Export statements and you refer to this you'll get an un we'll get an undefined until you get like inside",
    "start": "2395520",
    "end": "2401560"
  },
  {
    "text": "of a class definition why do I not like modules",
    "start": "2401560",
    "end": "2407640"
  },
  {
    "start": "2405000",
    "end": "2437000"
  },
  {
    "text": "sometimes they feel like a lot of bookkeeping um this particular code",
    "start": "2407640",
    "end": "2412760"
  },
  {
    "text": "snippet was taken from the some unit tests from the angular 2 source code and",
    "start": "2412760",
    "end": "2417800"
  },
  {
    "text": "I don't know if it's visible from the back but those the these are import statements that stretch for 30 lines of",
    "start": "2417800",
    "end": "2424079"
  },
  {
    "text": "code before we even get to the unit test so you open up the this file and we're importing so many things we can't even",
    "start": "2424079",
    "end": "2429440"
  },
  {
    "text": "see the test that we want to modify or look for what's broken uh because of all the import noise that's in",
    "start": "2429440",
    "end": "2437079"
  },
  {
    "start": "2437000",
    "end": "2577000"
  },
  {
    "text": "here the other thing to be aware of is ecmascript the standards committee was",
    "start": "2437079",
    "end": "2442560"
  },
  {
    "text": "very purposeful when they designed this import export syntax and it has",
    "start": "2442560",
    "end": "2447680"
  },
  {
    "text": "irritated a lot of people so when they defined this syntax they wanted to start",
    "start": "2447680",
    "end": "2453520"
  },
  {
    "text": "pushing JavaScript a little more towards being a dependent language that you can",
    "start": "2453520",
    "end": "2459240"
  },
  {
    "text": "analyze with static tools and when they designed the import import syntax they provided no mechanism",
    "start": "2459240",
    "end": "2465800"
  },
  {
    "text": "to do things like I'm going to determine what module I import at runtime by passing in a string or evaluating an",
    "start": "2465800",
    "end": "2472560"
  },
  {
    "text": "argument so if you've ever done any node.js programming or programming outside the browser um you might know",
    "start": "2472560",
    "end": "2478680"
  },
  {
    "text": "like the with commonjs the way to import something is to require it and require is very",
    "start": "2478680",
    "end": "2484040"
  },
  {
    "text": "Dynamic I can actually have code and and say I'm going to go through the file system and search for files and just",
    "start": "2484040",
    "end": "2490160"
  },
  {
    "text": "require everything in the subdirectory there's no possible way to do that with Import and Export reason being again",
    "start": "2490160",
    "end": "2496520"
  },
  {
    "text": "they wanted to make this a toolable they they wanted this syntax to be toolable and to be able to analyze",
    "start": "2496520",
    "end": "2503000"
  },
  {
    "text": "things in a static manner so in other words when a tool like webpack comes along to build your code into a bundle",
    "start": "2503000",
    "end": "2509720"
  },
  {
    "text": "it can look at the top of the file and say oh I see you're importing food from bar importing creature from library and",
    "start": "2509720",
    "end": "2517640"
  },
  {
    "text": "I know exactly what your dependencies are and I know I have to go out and grab these other modules and put them",
    "start": "2517640",
    "end": "2523359"
  },
  {
    "text": "together in order to be able to run the code inside of your module and it can do that with static analysis and without",
    "start": "2523359",
    "end": "2529319"
  },
  {
    "text": "executing any code um whereas something like the require syntax how do I know",
    "start": "2529319",
    "end": "2535040"
  },
  {
    "text": "what this is requiring well I pretty much have to execute the code at runtime in the correct environment to know anything about what's going on so the",
    "start": "2535040",
    "end": "2542640"
  },
  {
    "text": "benefits of the static syntax are that you can build tools that do amazing things is they can analyze an entire",
    "start": "2542640",
    "end": "2548440"
  },
  {
    "text": "dependency tree they can tell you what you're using what you're not using uh what could be thrown away potentially",
    "start": "2548440",
    "end": "2554000"
  },
  {
    "text": "because it's not actually being imported and consumed by anyone and that's really nice but there",
    "start": "2554000",
    "end": "2559640"
  },
  {
    "text": "are some times when we want some flexibility and I will tell you that they are currently working on a proposal",
    "start": "2559640",
    "end": "2566960"
  },
  {
    "text": "for an import function which which would provide Dynamic capabilities so it's an",
    "start": "2566960",
    "end": "2572319"
  },
  {
    "text": "import function not like the import keyword here",
    "start": "2572319",
    "end": "2577960"
  },
  {
    "start": "2577000",
    "end": "2597000"
  },
  {
    "text": "W had to go back too many slides for import well there's an import here so instead of being a syntax where",
    "start": "2578960",
    "end": "2585280"
  },
  {
    "text": "I say import like that it would be an import function so parenthesis and I could pass",
    "start": "2585280",
    "end": "2590480"
  },
  {
    "text": "in an expression but that's uh very early on right now it would give me the ability to do some Dynamic",
    "start": "2590480",
    "end": "2597440"
  },
  {
    "text": "Imports and of course the biggest stumbling block with modules and what makes this new world so painful is that",
    "start": "2597440",
    "end": "2604000"
  },
  {
    "text": "modules don't work in the browser so we're in this weird position position where the easr 2015 standard has been",
    "start": "2604000",
    "end": "2610839"
  },
  {
    "text": "finished it's been sealed so this Import and Export syntax it's with us it's not going to change we're on firm footing uh",
    "start": "2610839",
    "end": "2618839"
  },
  {
    "text": "we're on Solid Ground when we use Import and Export but they purposefully didn't",
    "start": "2618839",
    "end": "2624280"
  },
  {
    "text": "Define how browsers should behave or forget browsers any JavaScript runtime",
    "start": "2624280",
    "end": "2629839"
  },
  {
    "text": "environment they haven't defined how a JavaScript runtime should use Import and",
    "start": "2629839",
    "end": "2636599"
  },
  {
    "text": "Export they only Define the syntax so that's put that puts us in this weird situation where we can use the syntax",
    "start": "2636599",
    "end": "2642480"
  },
  {
    "text": "but we have to transpile it or change it into a syntax that a runtime will actually understand and that's why when",
    "start": "2642480",
    "end": "2649480"
  },
  {
    "text": "you're using angular 2 or you're using um aelia or any of these next Generation",
    "start": "2649480",
    "end": "2654760"
  },
  {
    "text": "Frameworks that rely on things like modules you have to use a tool like webpack or rollup that understand Import",
    "start": "2654760",
    "end": "2663119"
  },
  {
    "text": "and Export and can convert it into a syntax that a browser will actually work with or at a run time that the browser",
    "start": "2663119",
    "end": "2669480"
  },
  {
    "text": "will actually work with and that's where things kind of get crazy so for a long time I was using a tool systemjs anyone",
    "start": "2669480",
    "end": "2675800"
  },
  {
    "start": "2671000",
    "end": "2711000"
  },
  {
    "text": "using systemjs AIA was originally built to use system JJs the nice thing about systemjs",
    "start": "2675800",
    "end": "2683200"
  },
  {
    "text": "is that when I first found this repository I thought this is the thing I want to use because what systemjs said is that",
    "start": "2683200",
    "end": "2691720"
  },
  {
    "text": "we're going to try to be as close to the specification on how things should behave as possible so there is there is",
    "start": "2691720",
    "end": "2698880"
  },
  {
    "text": "a specification out there that says here's how imports and exports are going to work in the browser and that's what systemjs tries to follow and it works",
    "start": "2698880",
    "end": "2706559"
  },
  {
    "text": "and it's good unfortunately that specification keeps",
    "start": "2706559",
    "end": "2712680"
  },
  {
    "start": "2711000",
    "end": "2773000"
  },
  {
    "text": "changing and systemjs will update to match the specification so using systemjs on a production application can",
    "start": "2712680",
    "end": "2719599"
  },
  {
    "text": "sometimes be frustrating because you uh npm install the latest version of systemjs and suddenly nothing",
    "start": "2719599",
    "end": "2725960"
  },
  {
    "text": "works the other problem with systemjs is it can be unless you pre-build stuff",
    "start": "2725960",
    "end": "2731400"
  },
  {
    "text": "using other tools it can be a little bit slower than using some of the other tools because it's actually trying to",
    "start": "2731400",
    "end": "2737720"
  },
  {
    "text": "well uh import things dynamically for you behind the scenes that that one's easy to avoid uh but the one interesting",
    "start": "2737720",
    "end": "2744359"
  },
  {
    "text": "problem we did run run into with systemjs once was it makes heavy use of promises and the native promise",
    "start": "2744359",
    "end": "2751040"
  },
  {
    "text": "implementation in some browsers from Microsoft isn't that good and uh it was",
    "start": "2751040",
    "end": "2757400"
  },
  {
    "text": "amazing because just loading up an application would take um 300",
    "start": "2757400",
    "end": "2762680"
  },
  {
    "text": "milliseconds in Chrome and it would take three seconds in a certain browser from",
    "start": "2762680",
    "end": "2768760"
  },
  {
    "text": "a large company anyway that was fixed by the way in that browser so that's okay",
    "start": "2768760",
    "end": "2774760"
  },
  {
    "start": "2773000",
    "end": "2954000"
  },
  {
    "text": "the tool I use most often is webpack webpack in a way is a very simple tool",
    "start": "2774760",
    "end": "2780240"
  },
  {
    "text": "its sole purpose in life is to analyze dependencies JavaScript CSS whatever you",
    "start": "2780240",
    "end": "2785359"
  },
  {
    "text": "have and to package stuff up into a bundle into a single file or multiple files if you want it something that can",
    "start": "2785359",
    "end": "2791599"
  },
  {
    "text": "be pushed down to the web browser it doesn't do transpilation but you can add a plugin to it to to transpile using",
    "start": "2791599",
    "end": "2798119"
  },
  {
    "text": "Babel or using typescript it doesn't understand how to Minify JavaScript you",
    "start": "2798119",
    "end": "2803559"
  },
  {
    "text": "can add a plugin for that it doesn't understand how to uh read in an HTML file and embed it in your JavaScript so",
    "start": "2803559",
    "end": "2809119"
  },
  {
    "text": "you don't have a an extra template file to to include over HTTP it doesn't understand any of those things but",
    "start": "2809119",
    "end": "2815040"
  },
  {
    "text": "there's plugins for almost everything so at the end of the day webpack can do just about do everything but cook lunch",
    "start": "2815040",
    "end": "2821160"
  },
  {
    "text": "through through a series of plugins I like webpack a simple configuration would look like this so I",
    "start": "2821160",
    "end": "2828319"
  },
  {
    "text": "give webpack an entry point the entry point would be the thing typically the bootstraps my application or the thing",
    "start": "2828319",
    "end": "2834960"
  },
  {
    "text": "that is the you know the first bit of code that I need invoked on a page and webpack will look at that file entry. JS",
    "start": "2834960",
    "end": "2842520"
  },
  {
    "text": "or entry. TS whatever you have and it'll say what are the import statements that",
    "start": "2842520",
    "end": "2847880"
  },
  {
    "text": "is what does this file depend on and it will follow them and it'll find other JS files that have Imports and it'll follow",
    "start": "2847880",
    "end": "2853760"
  },
  {
    "text": "those so you know if",
    "start": "2853760",
    "end": "2857200"
  },
  {
    "text": "entry.jpg 2 and bring all that code in and place",
    "start": "2858839",
    "end": "2866280"
  },
  {
    "text": "it into an output so in this case I went a single output with a file name of bundle.js in this directory and just all",
    "start": "2866280",
    "end": "2873200"
  },
  {
    "text": "that JavaScript code would be included and placed into the file and everything works perfectly there's no import or",
    "start": "2873200",
    "end": "2878760"
  },
  {
    "text": "export statements inside of it it's all code that the browser would understand so webpack is again just one of the tools that can do this there's another",
    "start": "2878760",
    "end": "2885040"
  },
  {
    "text": "one called roll out roll up that I evaluated just a few weeks ago but for me it just wasn't the right tool um the",
    "start": "2885040",
    "end": "2891359"
  },
  {
    "text": "criticism with webpack at least before 2.0 was that the code the way it bundled things maybe the",
    "start": "2891359",
    "end": "2898599"
  },
  {
    "text": "the code could be a little bit smaller if they did some more optimizations and I haven't tried 2.0 just yet it was",
    "start": "2898599",
    "end": "2904720"
  },
  {
    "text": "released last month and I haven't wanted to try to upgrade anything things just yet might try in a couple weeks uh they",
    "start": "2904720",
    "end": "2910559"
  },
  {
    "text": "should have improved on that and the other thing you'll typically see with uh webpack is you'll",
    "start": "2910559",
    "end": "2916880"
  },
  {
    "text": "configure a series of loaders which basically say okay someone imported a CSS file",
    "start": "2916880",
    "end": "2923960"
  },
  {
    "text": "which I'll talk about in just a second but someone wants the CSS file to be part of the bundle uh I know of a loader",
    "start": "2923960",
    "end": "2929920"
  },
  {
    "text": "that can take that CSS and format it format it in a way that it could placed in my bundle in my Javascript file but",
    "start": "2929920",
    "end": "2936880"
  },
  {
    "text": "then loaded into the browser as a CSS resource for it to understand the Styles so this is all about packing things down",
    "start": "2936880",
    "end": "2943280"
  },
  {
    "text": "right I don't want to have 15 requests for JavaScript files and two more requests for CSS files and 13 requests",
    "start": "2943280",
    "end": "2949839"
  },
  {
    "text": "for HTML templates that I have out there webpack and put it all together what's the thing that worries me about webpack",
    "start": "2949839",
    "end": "2956079"
  },
  {
    "start": "2954000",
    "end": "3041000"
  },
  {
    "text": "sometimes well it's not standard like we have this beautiful world of web standards where we've defined the syntax",
    "start": "2956079",
    "end": "2961920"
  },
  {
    "text": "for Import and Export we've defined the syntax for XML HTTP request and fat and",
    "start": "2961920",
    "end": "2967000"
  },
  {
    "text": "all these other things but yet we still need this tool that um just you know comes with its own way of doing things",
    "start": "2967000",
    "end": "2974119"
  },
  {
    "text": "and it allows you to write code like this so this is an angular 2 component this angular 2 component requires an",
    "start": "2974119",
    "end": "2980280"
  },
  {
    "text": "HTML template which I could Define the template inline or I could just Define it without this require and just say",
    "start": "2980280",
    "end": "2985839"
  },
  {
    "text": "it's app. component. HTML but that would mean at runtime there's an extra Network request to go out and fetch this",
    "start": "2985839",
    "end": "2991799"
  },
  {
    "text": "template well if I'm using webpack I can actually write a require statement here",
    "start": "2991799",
    "end": "2996920"
  },
  {
    "text": "and for those that use commonjs modules in the past with no JS you'll know that requires like an import it's a way of",
    "start": "2996920",
    "end": "3003079"
  },
  {
    "text": "saying hey I require this HTML file and webpack has the right sort of plugins",
    "start": "3003079",
    "end": "3009359"
  },
  {
    "text": "available where webpack will recognize that statement and say oh let me go out to the file system read that HTML and",
    "start": "3009359",
    "end": "3015880"
  },
  {
    "text": "and just place it into the JavaScript so that everything's in line right I don't have to do an extra Fetch and what so",
    "start": "3015880",
    "end": "3022000"
  },
  {
    "text": "just what worries me is when an entire application starts depending on that it's not standard I wish we could",
    "start": "3022000",
    "end": "3029799"
  },
  {
    "text": "be I wish I hope my grandkids I hope the web programming is better when my grandkids are are doing programming",
    "start": "3029799",
    "end": "3036359"
  },
  {
    "text": "that's all hope we figured it all out or moved on I don't know and the other thing that people",
    "start": "3036359",
    "end": "3043599"
  },
  {
    "start": "3041000",
    "end": "3096000"
  },
  {
    "text": "struggle with is if I'm a library or framework author and I need I went to write one of these new um libraries or",
    "start": "3043599",
    "end": "3051400"
  },
  {
    "text": "utilities that's going to be using ecos 2015 I'm going to be putting it with Import and Export statements",
    "start": "3051400",
    "end": "3057280"
  },
  {
    "text": "um should I pre-compile things for you and if I do should I compile them into commonjs format or uh maybe you're not",
    "start": "3057280",
    "end": "3063480"
  },
  {
    "text": "going to be using webpack I don't know so do I need to compile it into the universal module definition which adds a lot of prefix uh prefix code to every",
    "start": "3063480",
    "end": "3071119"
  },
  {
    "text": "JavaScript function what about polyfill so I'm writing utility that's going to depend on a native promise",
    "start": "3071119",
    "end": "3077119"
  },
  {
    "text": "implementation or a promise implementation being available in the browser do I add that polyfill or do do I just tell tell you in the",
    "start": "3077119",
    "end": "3084000"
  },
  {
    "text": "documentation that you have to have a promise available there's all sorts of questions that are still being um hashed",
    "start": "3084000",
    "end": "3089680"
  },
  {
    "text": "out and there's no perfect way to solve these problems in this world that we have right now but maybe someday and",
    "start": "3089680",
    "end": "3095799"
  },
  {
    "text": "that's where I just get sort of um frustrated uh the Tooling in this area is like living on the",
    "start": "3095799",
    "end": "3101960"
  },
  {
    "start": "3096000",
    "end": "3128000"
  },
  {
    "text": "sea sometimes it's very exciting and you're in the boat and you're thinking this is great I'm on the I'm in a wave",
    "start": "3101960",
    "end": "3107359"
  },
  {
    "text": "and I'm still living but then there's days where you get very close to that inner circle there and you just want to",
    "start": "3107359",
    "end": "3112559"
  },
  {
    "text": "walk out of the office and give up and it's been a lot better I will say this",
    "start": "3112559",
    "end": "3119559"
  },
  {
    "text": "it's been a lot better over the last six months than it was throughout 2014 and 2015 and most of 2016 things have",
    "start": "3119559",
    "end": "3126760"
  },
  {
    "text": "settled down just a bit and I think uh that's all I have for you so maybe you could grab lunch a little bit early but",
    "start": "3126760",
    "end": "3133200"
  },
  {
    "start": "3128000",
    "end": "3166000"
  },
  {
    "text": "if you have any questions about this I'll stick around that's my email address if you have any questions too you can email me um I can point you to",
    "start": "3133200",
    "end": "3141040"
  },
  {
    "text": "an entire repository of GitHub of code on GitHub that's not well organized but it has a lot of uh the little examples",
    "start": "3141040",
    "end": "3147520"
  },
  {
    "text": "that I use to figure out or just document how some of these things work and how some of these things don't work",
    "start": "3147520",
    "end": "3153520"
  },
  {
    "text": "um and if you really want to look at that just send me an email and I'll send it off but thank you for coming hope you",
    "start": "3153520",
    "end": "3160240"
  },
  {
    "text": "enjoyed it",
    "start": "3160240",
    "end": "3163559"
  }
]