[
  {
    "text": "um so i welcome to this talk called secure coding back to basics um i had",
    "start": "8240",
    "end": "14719"
  },
  {
    "text": "the idea for this talk uh a few years ago and i've kind of been wanting to do it for some time",
    "start": "14719",
    "end": "20400"
  },
  {
    "text": "and the idea of the talk was to do a talk that was um kind of beginner friendly because we",
    "start": "20400",
    "end": "26480"
  },
  {
    "text": "have a lot of people kind of moving into security uh that uh and in a lot of other talks we talk",
    "start": "26480",
    "end": "33040"
  },
  {
    "text": "about like advanced exploits and stuff like that but what about like the basics",
    "start": "33040",
    "end": "38079"
  },
  {
    "text": "but i also wanted to create a talk that was uh valuable also for experienced programmers so",
    "start": "38079",
    "end": "44800"
  },
  {
    "text": "i'm going to try to show you some concepts that we can use in code that you might or may not find valuable i",
    "start": "44800",
    "end": "51440"
  },
  {
    "text": "think they're really useful because i've used them in projects and",
    "start": "51440",
    "end": "57280"
  },
  {
    "text": "we'll see how that goes i i will show some code in many of the slides the code",
    "start": "57280",
    "end": "62800"
  },
  {
    "text": "will be in various languages uh i know a lot of people going to ndc is uh like",
    "start": "62800",
    "end": "68400"
  },
  {
    "text": "c-sharp programmers and stuff like that but this will be like java and kotlin and even typescript uh but uh i think it",
    "start": "68400",
    "end": "75200"
  },
  {
    "text": "will be very much translatable over to for instance c sharp because i know people who have done it",
    "start": "75200",
    "end": "80960"
  },
  {
    "text": "uh i'm alan i work as a security researcher as at cross point labs which is actually in",
    "start": "80960",
    "end": "87360"
  },
  {
    "text": "this building i recently started there i write casual bug bounty hunter because i",
    "start": "87360",
    "end": "93119"
  },
  {
    "text": "there's longer longer breaks between each time i do bug hunting these days and i also build and maintain some open",
    "start": "93119",
    "end": "100240"
  },
  {
    "text": "source security tools and i'm an always chapter leader in in norway actually to",
    "start": "100240",
    "end": "105280"
  },
  {
    "text": "say oslo because we now have a christian son chapter as well which is great um",
    "start": "105280",
    "end": "111840"
  },
  {
    "text": "first thing first complexity is the enemy of security this has been said many many times and it's really true",
    "start": "111840",
    "end": "117920"
  },
  {
    "text": "like the the more complex our code becomes the harder it is to secure",
    "start": "117920",
    "end": "123280"
  },
  {
    "text": "uh and things tend to grow over time right uh but but like if you we keep",
    "start": "123280",
    "end": "128399"
  },
  {
    "text": "adding stuff we keep adding stuff and and making things more complex they start out it's something simple we have an idea for a program that we want to",
    "start": "128399",
    "end": "134879"
  },
  {
    "text": "build or a website or whatever and we build it and and then we get new features and we kind of add stuff and",
    "start": "134879",
    "end": "140720"
  },
  {
    "text": "especially if we're pressed on time we never have time to kind of rewrite stuff and simplify stuff so things tend to get",
    "start": "140720",
    "end": "147680"
  },
  {
    "text": "more and more complex as we go and this is of course a problem the more complex stuff is as i said the",
    "start": "147680",
    "end": "154400"
  },
  {
    "text": "more the harder it is to secure and the harder is to get things right",
    "start": "154400",
    "end": "159760"
  },
  {
    "text": "and when we don't get things right we have bugs and vulnerabilities they are",
    "start": "159760",
    "end": "164800"
  },
  {
    "text": "also just bugs there's nothing special about a security bug as opposed to another bug they're just bugs",
    "start": "164800",
    "end": "171519"
  },
  {
    "text": "so when we write something that happens to be insecure our code can do something that it wasn't supposed to do",
    "start": "171519",
    "end": "178400"
  },
  {
    "text": "in under some certain circumstances and various security companies have",
    "start": "178400",
    "end": "183920"
  },
  {
    "text": "suggested that 50 of uh security vulnerabilities are actually logical security bugs",
    "start": "183920",
    "end": "190400"
  },
  {
    "text": "and this part is quite interesting because a generic scanner can only find generic",
    "start": "190400",
    "end": "196239"
  },
  {
    "text": "bugs it can't find the logical security bugs because the logical security bugs are",
    "start": "196239",
    "end": "201760"
  },
  {
    "text": "based on the rules of the of the domain we're in so",
    "start": "201760",
    "end": "206959"
  },
  {
    "text": "if if we're writing a code for a certain business function and that function has to certain rules that there's no way a",
    "start": "206959",
    "end": "212400"
  },
  {
    "text": "scanner can know about those rules so we will have problems that are related to",
    "start": "212400",
    "end": "217519"
  },
  {
    "text": "uh things that can be done in weird order uh things that can be broken like",
    "start": "217519",
    "end": "222720"
  },
  {
    "text": "authorization bugs and all kinds of stuff that can go wrong i'm going to show you bug types in",
    "start": "222720",
    "end": "229760"
  },
  {
    "text": "order of personal preference some of you might not agree with this but i really like compile time errors",
    "start": "229760",
    "end": "236480"
  },
  {
    "text": "those are the best because i get them in my face immediately so i know there's something to fix right there there hey you did something",
    "start": "236480",
    "end": "243599"
  },
  {
    "text": "wrong you're stupid fix it okay cool i'll fix it uh the next type of bugs that i i i'd",
    "start": "243599",
    "end": "250080"
  },
  {
    "text": "rather have them as compile-time bugs but okay if they're caught by automated tests that's cool i i'll find them before i go",
    "start": "250080",
    "end": "256959"
  },
  {
    "text": "into production great or maybe i have some colleagues that kind of looking at my code and say hey",
    "start": "256959",
    "end": "263199"
  },
  {
    "text": "what are you doing here okay that's fine as well i'd rather have them found by the automated tests but okay as long as",
    "start": "263199",
    "end": "268960"
  },
  {
    "text": "someone finds them that's fine even manual tests better than having things into",
    "start": "268960",
    "end": "274960"
  },
  {
    "text": "production then of course a standard runtime bug",
    "start": "274960",
    "end": "280240"
  },
  {
    "text": "something that was supposed to work in a certain way didn't uh but wasn't necessarily vulnerability",
    "start": "280240",
    "end": "286800"
  },
  {
    "text": "which is the next thing i don't want vulnerabilities in productions and i especially don't want",
    "start": "286800",
    "end": "293680"
  },
  {
    "text": "exploited vulnerabilities in production and uh i have to add this at the end like those",
    "start": "293680",
    "end": "300240"
  },
  {
    "text": "really annoying bugs that only occur under certain circumstances and you can't really find out what they are and",
    "start": "300240",
    "end": "306400"
  },
  {
    "text": "you spend days and weeks trying to figure out exactly what's going on and why this stupid message is ending up in",
    "start": "306400",
    "end": "311919"
  },
  {
    "text": "the log every thursday at 12 or something uh but yeah um",
    "start": "311919",
    "end": "318000"
  },
  {
    "text": "the point of this is i want things to move upwards like the more things that i can have as compile-time",
    "start": "318000",
    "end": "324160"
  },
  {
    "text": "errors the happier i will be um and i've been in the security space for",
    "start": "324160",
    "end": "330960"
  },
  {
    "text": "quite a long time i i wrote this blog post in 2006 and i was",
    "start": "330960",
    "end": "336320"
  },
  {
    "text": "thinking about like okay what's what's going on why do we have all these security issues",
    "start": "336320",
    "end": "341840"
  },
  {
    "text": "uh and people kept saying uh you have to validate your inputs and of course yeah i should validate my",
    "start": "341840",
    "end": "347680"
  },
  {
    "text": "inputs but then at some point i realized well validating our inputs is not going to stop sql injection or cross-site",
    "start": "347680",
    "end": "353520"
  },
  {
    "text": "scripting because it's kind of a different problem and it's kind of paradoxical that i'm",
    "start": "353520",
    "end": "359600"
  },
  {
    "text": "now going to talk a lot about input validation for the next minute but i still think input validation has a place",
    "start": "359600",
    "end": "365520"
  },
  {
    "text": "and is super important but it's not necessarily what's going to stop sql injection and cross-site scripting",
    "start": "365520",
    "end": "372160"
  },
  {
    "text": "but the reason why i'm bringing this up is i wrote this blog post and then later i wrote a series of blog posts that",
    "start": "372160",
    "end": "377919"
  },
  {
    "text": "caught the attention of some sweets and these suites work for a company",
    "start": "377919",
    "end": "383039"
  },
  {
    "text": "called omegapoint and they are really smart and so they were working on an idea that",
    "start": "383039",
    "end": "389039"
  },
  {
    "text": "they were calling domain driven security and they read my blog post and say hey this",
    "start": "389039",
    "end": "394160"
  },
  {
    "text": "guy's thinking about some of the same stuff as us we should talk to him and and so um a guy called don byjunson",
    "start": "394160",
    "end": "400720"
  },
  {
    "text": "contacted me and said hey i i saw your blog post this is interesting because we're working on this idea over here and",
    "start": "400720",
    "end": "406160"
  },
  {
    "text": "i really like their idea they their ideas were much better than mine and they actually also uh they they",
    "start": "406160",
    "end": "412479"
  },
  {
    "text": "took uh some inspiration from the main driven design hence the name domain driven security and then they uh they",
    "start": "412479",
    "end": "418720"
  },
  {
    "text": "kind of built stuff around it and use the concepts from the main driven design",
    "start": "418720",
    "end": "423759"
  },
  {
    "text": "and it also ended up in a book that they wrote called a secure by design which i",
    "start": "423759",
    "end": "428800"
  },
  {
    "text": "highly recommend um so i mentioned domain driven design",
    "start": "428800",
    "end": "435039"
  },
  {
    "text": "for those of you who are not fluent in the main drawing design i'm going to just mention three",
    "start": "435039",
    "end": "440639"
  },
  {
    "text": "terms that are often used in the main drum design we have a ubiquitous language which is like a language that",
    "start": "440639",
    "end": "447120"
  },
  {
    "text": "we use within a company or in a certain part of a company where we have specific words",
    "start": "447120",
    "end": "453360"
  },
  {
    "text": "with a specific meaning that may not mean anything to someone or may mean something completely different to",
    "start": "453360",
    "end": "458639"
  },
  {
    "text": "someone outside we have a bounded context this is kind of a closed context where this thing is",
    "start": "458639",
    "end": "466240"
  },
  {
    "text": "valid and we can have many bounded contexts and then we have what we call an",
    "start": "466240",
    "end": "471280"
  },
  {
    "text": "anti-corruption layer which is when we move things in and out of the bounded context we want to make",
    "start": "471280",
    "end": "477919"
  },
  {
    "text": "sure that we don't break stuff and that we interpret things in the right order kind of like input validation",
    "start": "477919",
    "end": "484960"
  },
  {
    "text": "to show you an example if we have a quantity in in a web shop",
    "start": "486639",
    "end": "493440"
  },
  {
    "text": "uh for the website itself for the web shop itself uh we if we're gonna buy something it needs to be larger than",
    "start": "493440",
    "end": "499120"
  },
  {
    "text": "zero because we can't buy zero uh computers we have to buy at least one computer if you want to buy something",
    "start": "499120",
    "end": "505840"
  },
  {
    "text": "but probably we don't want something or someone ordering like a huge amount of stuff either so we we have some rules",
    "start": "505840",
    "end": "511840"
  },
  {
    "text": "around what what isn't what is a quantity when we want to order something so but however in in the returns",
    "start": "511840",
    "end": "518479"
  },
  {
    "text": "department a quantity might be negative because we're getting something back like there's someone returning something",
    "start": "518479",
    "end": "524000"
  },
  {
    "text": "so we now get in uh a computer that someone didn't want so they're returning it to us now a",
    "start": "524000",
    "end": "530480"
  },
  {
    "text": "quantity can suddenly be negative and so we can see we have two bounded contexts where the same",
    "start": "530480",
    "end": "535920"
  },
  {
    "text": "terminology or the same term means different things and this is often a cause of security problems because we",
    "start": "535920",
    "end": "543040"
  },
  {
    "text": "think we're talking about the same thing but we're not and maybe it's possible on the website to order minus two books and",
    "start": "543040",
    "end": "549360"
  },
  {
    "text": "then we have a problem um and uh",
    "start": "549360",
    "end": "554560"
  },
  {
    "text": "when i was talking to to uh don baionsen and the others about this uh uh",
    "start": "554560",
    "end": "559839"
  },
  {
    "text": "don by johnson also held a talk where he talked about like how what happens with with data how can data be represented",
    "start": "559839",
    "end": "567360"
  },
  {
    "text": "and i i created this this slide where we have some data in the database",
    "start": "567360",
    "end": "573360"
  },
  {
    "text": "and then that data can be represented in many different ways in our system so this is a very simple system where we",
    "start": "573360",
    "end": "579839"
  },
  {
    "text": "have a database we have a server uh we have some json going back and forth we",
    "start": "579839",
    "end": "584880"
  },
  {
    "text": "have some query language that we can query the database we're transferring it over to some javascript running on the front",
    "start": "584880",
    "end": "590880"
  },
  {
    "text": "then which then uses some templating and it's rendered into html",
    "start": "590880",
    "end": "597200"
  },
  {
    "text": "so the same entity sitting in a database can be a an object on the server it can be an object in",
    "start": "597200",
    "end": "604399"
  },
  {
    "text": "javascript or just a struct in javascript and it can be represented in many",
    "start": "604399",
    "end": "609839"
  },
  {
    "text": "different ways in html so for instance if it's a user it could be a row in the database but it could it could be the",
    "start": "609839",
    "end": "616160"
  },
  {
    "text": "icon up at the top that shows that you are like your avatar it could be the forum where you can edit your profile",
    "start": "616160",
    "end": "622000"
  },
  {
    "text": "those are all representation of the same entity and the point here is so many of the problems that we have",
    "start": "622000",
    "end": "629279"
  },
  {
    "text": "related to security they happen when we move from one representation to another",
    "start": "629279",
    "end": "635600"
  },
  {
    "text": "so when we go from server side into a query language that's where sql injection occurs when we go from javascript into html that's where xss",
    "start": "635600",
    "end": "643519"
  },
  {
    "text": "occurs and and when things are coming in from the client side into the server side that's where all kinds of authorization",
    "start": "643519",
    "end": "649680"
  },
  {
    "text": "errors and deserialization errors and all that kind of stuff occurs so this going back and forth between",
    "start": "649680",
    "end": "655360"
  },
  {
    "text": "different representations that's the that's a big part of the problem hence we need to talk about input",
    "start": "655360",
    "end": "661040"
  },
  {
    "text": "validation but i don't think that input validation necessarily is",
    "start": "661040",
    "end": "666880"
  },
  {
    "text": "only a security mechanism i actually think it's more of a thing that we should think about as a",
    "start": "666880",
    "end": "672160"
  },
  {
    "text": "data quality thing like we want to make sure that this piece of data is valid like does it make sense for for this",
    "start": "672160",
    "end": "678800"
  },
  {
    "text": "system to have this piece of data uh can a username be a thousand characters probably not",
    "start": "678800",
    "end": "685839"
  },
  {
    "text": "because we we have some ideas of of the lengths of things and how things are supposed to be structured",
    "start": "685839",
    "end": "692320"
  },
  {
    "text": "so the fact that it stops or limits many types of attacks that's actually kind of a side effect",
    "start": "692320",
    "end": "699600"
  },
  {
    "text": "though that side effect is important so um when we talk about input validation",
    "start": "700399",
    "end": "706800"
  },
  {
    "text": "there are many ways of doing the input validation so we can think about format so the syntax of of the input does this",
    "start": "706800",
    "end": "714320"
  },
  {
    "text": "look like a date or is it just garbage but",
    "start": "714320",
    "end": "719440"
  },
  {
    "text": "if it's just a date well a date can be any date it could be a thousand years into the future or it could be year zero",
    "start": "719440",
    "end": "726560"
  },
  {
    "text": "so we probably want some semantics so if this is a birth date",
    "start": "726560",
    "end": "732000"
  },
  {
    "text": "our users are probably not born in 1556 and they're probably not born in 2048",
    "start": "732000",
    "end": "737519"
  },
  {
    "text": "because that doesn't make any sense they probably weren't even born in 2022",
    "start": "737519",
    "end": "743440"
  },
  {
    "text": "because uh babies rarely use the internet so we need some kind of validation",
    "start": "743440",
    "end": "750160"
  },
  {
    "text": "uh sometimes we also uh want to check the data with other data that we have so",
    "start": "750160",
    "end": "755360"
  },
  {
    "text": "we might want to look up stuff in a database the words i'm using here syntax semantics domain people use different",
    "start": "755360",
    "end": "761920"
  },
  {
    "text": "terms for this this can be confusing but just remember that some some things are just syntax some",
    "start": "761920",
    "end": "768160"
  },
  {
    "text": "things are are the values somehow valid does do they seem valid in this context and then",
    "start": "768160",
    "end": "774000"
  },
  {
    "text": "sometimes we can't just do simple validation we have to go look them up somewhere that's the important part",
    "start": "774000",
    "end": "780480"
  },
  {
    "text": "so we we talked about a birth date so we could start just validating the syntax with the regex okay so we have a year we",
    "start": "780480",
    "end": "787600"
  },
  {
    "text": "have a month and we have uh um a day but as mentioned we probably want to",
    "start": "787600",
    "end": "794000"
  },
  {
    "text": "check that it's kind of between some sensible limits that we have if we want to to check that this this value looks",
    "start": "794000",
    "end": "800720"
  },
  {
    "text": "valid sorry yeah the month could be 99 up here true",
    "start": "800720",
    "end": "807680"
  },
  {
    "text": "so that's also a problem uh like so so it's a bit simplistic the the regis at the top",
    "start": "807680",
    "end": "813440"
  },
  {
    "text": "but we want to start somewhere next up a product id maybe the product",
    "start": "813440",
    "end": "820000"
  },
  {
    "text": "is just a number but we also want to check that that product actually exists before we allow it into an order for",
    "start": "820000",
    "end": "826240"
  },
  {
    "text": "instance so we can't order a product that that we don't have uh but then we move into the the harder",
    "start": "826240",
    "end": "832480"
  },
  {
    "text": "things to to validate like uh a comment so okay so we could allow letters and",
    "start": "832480",
    "end": "838720"
  },
  {
    "text": "numbers and spaces and stuff like that but then suddenly if this was stack overflow and you wanted people to be",
    "start": "838720",
    "end": "844720"
  },
  {
    "text": "able to discuss programming then you suddenly have to start allowing characters that can be used for attacks",
    "start": "844720",
    "end": "851760"
  },
  {
    "text": "for instance a sql injection or a cross-site scripting",
    "start": "851760",
    "end": "857199"
  },
  {
    "text": "another problem is encoding in coding things can be encoded in so many",
    "start": "857199",
    "end": "863120"
  },
  {
    "text": "different ways so in javascript for instance the string abc has a length of three",
    "start": "863120",
    "end": "869760"
  },
  {
    "text": "but this string which also looks like it has three characters has a length of four",
    "start": "869760",
    "end": "874959"
  },
  {
    "text": "because why not the center character is a multi-byte character so it consists of two",
    "start": "874959",
    "end": "880399"
  },
  {
    "text": "surrogate pairs and so javascript thinks this has a length of four we can also have weird stuff going on",
    "start": "880399",
    "end": "886399"
  },
  {
    "text": "like this so we have an a with an accent equals an a with an accent and javascript says no",
    "start": "886399",
    "end": "893040"
  },
  {
    "text": "okay why is that well because one of them is the letter",
    "start": "893040",
    "end": "898399"
  },
  {
    "text": "an accent and an a so it's a combining character and the other one is the",
    "start": "898399",
    "end": "903600"
  },
  {
    "text": "actual letter a with an accent so we can have an a with many accents",
    "start": "903600",
    "end": "912600"
  },
  {
    "text": "and then we have emojis looks like one character has length 11.",
    "start": "913120",
    "end": "919360"
  },
  {
    "text": "okay but this tells us something like it can be hard in certain languages to",
    "start": "919360",
    "end": "924720"
  },
  {
    "text": "know the length of something if we want to impose limits so uh elm for instance they had the",
    "start": "924720",
    "end": "930160"
  },
  {
    "text": "exact same same issue because they kind of compiled stuff into javascript and they inherited all the weird length",
    "start": "930160",
    "end": "936079"
  },
  {
    "text": "stuff that you see here so we have to normalize input somehow uh",
    "start": "936079",
    "end": "942000"
  },
  {
    "text": "and we can do that by just deciding on a form uh so if we have",
    "start": "942000",
    "end": "947279"
  },
  {
    "text": "the a with the accent we could decide we always want to split these two things out so we want to have the letter with",
    "start": "947279",
    "end": "953519"
  },
  {
    "text": "an accent and then the a or we could say well if it's an a with an accent we always use the letter a so same thing",
    "start": "953519",
    "end": "960560"
  },
  {
    "text": "for xml like an empty tag could be an opening and a closing tag just next",
    "start": "960560",
    "end": "965839"
  },
  {
    "text": "to each other or it could be like a self-closing tag but we have to decide if we want to do validation and then emails and urls and",
    "start": "965839",
    "end": "972560"
  },
  {
    "text": "host names well you can have international letters in in host names for instance but there",
    "start": "972560",
    "end": "978800"
  },
  {
    "text": "you have to decide do you want to look at this as puny code or do you actually want to allow those characters in there",
    "start": "978800",
    "end": "985600"
  },
  {
    "text": "and you have to decide on this before you start doing the syntax validation and stuff like that do i have to normalize the input",
    "start": "985600",
    "end": "993040"
  },
  {
    "text": "another principle here is don't try to clean invalid inputs so if you know",
    "start": "993040",
    "end": "998320"
  },
  {
    "text": "something is bad don't try to fix it by removing stuff just say i don't want this as an",
    "start": "998320",
    "end": "1006000"
  },
  {
    "text": "application just i i this is invalid data i don't want it don't try to okay we're gonna fix stuff i'm just gonna",
    "start": "1006000",
    "end": "1011839"
  },
  {
    "text": "remove some stuff because this is a very simple example like okay we're gonna remove all the script tags so we remove",
    "start": "1011839",
    "end": "1018079"
  },
  {
    "text": "it once and then we have a new script type because like things are concatenated and then you have a script all over again so this is just a really",
    "start": "1018079",
    "end": "1024400"
  },
  {
    "text": "dumb and simple example but you can imagine stuff like this happening if you try to fix fix the input to clean the input then",
    "start": "1024400",
    "end": "1030640"
  },
  {
    "text": "this might happen so there are good cleaners that can do this for for html like dom purify",
    "start": "1030640",
    "end": "1037360"
  },
  {
    "text": "so if you want to do it or actually want need to clean something because you can't just reject everything then at",
    "start": "1037360",
    "end": "1043678"
  },
  {
    "text": "least use something that has been very well tested but try to avoid it if you can just reject the input and say i",
    "start": "1043679",
    "end": "1050400"
  },
  {
    "text": "don't want this so we have a set of steps we normalize the input we check the",
    "start": "1050400",
    "end": "1057200"
  },
  {
    "text": "length first and we check the length first before we go into reg x's or stuff like that because if we have a quite a",
    "start": "1057200",
    "end": "1063440"
  },
  {
    "text": "long string that doesn't exactly match we might end up with our redos if our regular expression",
    "start": "1063440",
    "end": "1069360"
  },
  {
    "text": "was poorly created and other similar stuff so we check the length before we go into the next things",
    "start": "1069360",
    "end": "1077120"
  },
  {
    "text": "so check the format we check the semantics and then we use the value that",
    "start": "1077120",
    "end": "1082559"
  },
  {
    "text": "we validated this is also something i've seen so many times where people do normalization and all kinds of checks",
    "start": "1082559",
    "end": "1089120"
  },
  {
    "text": "and then they end up using the value they started out with which was not the one that went through normalization et",
    "start": "1089120",
    "end": "1094160"
  },
  {
    "text": "cetera and last but not least we check the domain if that's necessary like so we",
    "start": "1094160",
    "end": "1099200"
  },
  {
    "text": "can go and look up the id in a database or whatever it is so",
    "start": "1099200",
    "end": "1104960"
  },
  {
    "text": "i now just talked about the input validation what is this domain driven security thing",
    "start": "1104960",
    "end": "1111200"
  },
  {
    "text": "this is a rather funny example or depending on who you are this was apple they were going to show",
    "start": "1111600",
    "end": "1118400"
  },
  {
    "text": "you your password hint but they accidentally showed you your password instead",
    "start": "1118400",
    "end": "1123520"
  },
  {
    "text": "so you had two fields the hint and the password and they were accidentally flipped in the code so you showed the",
    "start": "1123520",
    "end": "1129919"
  },
  {
    "text": "wrong thing uh and this can happen because we tend to",
    "start": "1129919",
    "end": "1135200"
  },
  {
    "text": "pick stupid types for stuff basically so this is aina hust who works at",
    "start": "1135200",
    "end": "1140720"
  },
  {
    "text": "anacond and he says did i mention i hate string i hate string people who have the",
    "start": "1140720",
    "end": "1146559"
  },
  {
    "text": "decency to refrain from using object will still gladly use string with assumptions all over the place",
    "start": "1146559",
    "end": "1152640"
  },
  {
    "text": "we tend to use strings and and primitive types a lot and we don't necessarily mean",
    "start": "1152640",
    "end": "1158720"
  },
  {
    "text": "string because a string can be zero bytes it can be two gigabytes is",
    "start": "1158720",
    "end": "1164400"
  },
  {
    "text": "that the string is that the string we want i don't know i found another blog post called something isn't something else",
    "start": "1164400",
    "end": "1173120"
  },
  {
    "text": "and i really like this this picture so we have this idea of something another main concept",
    "start": "1173360",
    "end": "1178799"
  },
  {
    "text": "and then we kind of try to transfer that concept into code and it doesn't really match because we we're",
    "start": "1178799",
    "end": "1185039"
  },
  {
    "text": "taking a lot of shortcuts uh and it mentions primitive obsession down here so we tend to like just pick",
    "start": "1185039",
    "end": "1191520"
  },
  {
    "text": "some some primitive some strings and stuff and just okay that works uh but then we end up with something",
    "start": "1191520",
    "end": "1198720"
  },
  {
    "text": "that's called stringly typed code we don't really use the type system we",
    "start": "1198720",
    "end": "1204320"
  },
  {
    "text": "just use strings string string string public void register string email",
    "start": "1204320",
    "end": "1209360"
  },
  {
    "text": "address screen password string phone number are they all the same really",
    "start": "1209360",
    "end": "1215600"
  },
  {
    "text": "if we look at like if we could like imagine this as the total amount of strings that we could have",
    "start": "1215600",
    "end": "1222559"
  },
  {
    "text": "so we have email addresses and we have phone numbers and they don't overlap but we said string spring string right",
    "start": "1222559",
    "end": "1228960"
  },
  {
    "text": "this is odd why are we doing this because well it's easy but what if we did something like this",
    "start": "1228960",
    "end": "1234720"
  },
  {
    "text": "instead email address password phone number we had some classes we had some types then",
    "start": "1234720",
    "end": "1240000"
  },
  {
    "text": "we wouldn't accidentally flip the password and phone number or something like that because",
    "start": "1240000",
    "end": "1245039"
  },
  {
    "text": "the compiler would yell at us hey this is not a this is not a phone number this is a password",
    "start": "1245039",
    "end": "1250640"
  },
  {
    "text": "okay we could even do something like this we could package them together in a class",
    "start": "1250640",
    "end": "1256000"
  },
  {
    "text": "and actually have a proper encapsulation of them and not pass a lot of strings okay",
    "start": "1256000",
    "end": "1263840"
  },
  {
    "text": "so but if we look at the center one so we we we have something called an email",
    "start": "1263840",
    "end": "1269440"
  },
  {
    "text": "address we have something called a phone number this is what is called in",
    "start": "1269440",
    "end": "1274880"
  },
  {
    "text": "a domain primitive so we we take a value and we kind of wrap it in a class",
    "start": "1274880",
    "end": "1281039"
  },
  {
    "text": "and the point of this is that class can enforce rules",
    "start": "1281039",
    "end": "1286400"
  },
  {
    "text": "so we take an implicit concept which was a string and we now make it explicit so",
    "start": "1286400",
    "end": "1291919"
  },
  {
    "text": "we have an email address instead of a string email address we now have a proper email address or a phone number",
    "start": "1291919",
    "end": "1298000"
  },
  {
    "text": "so we can create a class and within that class if you if in the constructor we're going",
    "start": "1298000",
    "end": "1303200"
  },
  {
    "text": "to check that the string that we give it is in fact a phone number or we might throw an exception and say hey this is",
    "start": "1303200",
    "end": "1309120"
  },
  {
    "text": "not a phone number this is a password or is this an email address it's not gonna say that it's just gonna say invalid phone number but you get the idea",
    "start": "1309120",
    "end": "1315840"
  },
  {
    "text": "we can have the class itself enforce that you're you're not inputting invalid data and",
    "start": "1315840",
    "end": "1322080"
  },
  {
    "text": "the point of this is whenever we have an object of type phone number we know that",
    "start": "1322080",
    "end": "1327919"
  },
  {
    "text": "it contains valid data it a phone number object will never contain an email address because it it's you can't create",
    "start": "1327919",
    "end": "1334640"
  },
  {
    "text": "an object like that so and we could also have like a a method a static method so you could",
    "start": "1334640",
    "end": "1341120"
  },
  {
    "text": "check something if you don't didn't want to to go right into throwing exceptions and stuff like that",
    "start": "1341120",
    "end": "1347600"
  },
  {
    "text": "so so this is one way of doing it and and of course when people see this they often think",
    "start": "1347600",
    "end": "1353760"
  },
  {
    "text": "well okay so i'm just going to write all these domain primitives and then they kind of start accessing the value up",
    "start": "1353760",
    "end": "1359200"
  },
  {
    "text": "there because it's public final string value why is it public why is it a string why",
    "start": "1359200",
    "end": "1365360"
  },
  {
    "text": "is it available well it's available because in this case it's immutable we don't want anyone to",
    "start": "1365360",
    "end": "1372000"
  },
  {
    "text": "be able to modify this later so we we set it up as a constant as final and we want we actually want code later to be",
    "start": "1372000",
    "end": "1378559"
  },
  {
    "text": "able to get the value but if you ever need to do an operation that belongs to phone number say i want the area code or",
    "start": "1378559",
    "end": "1385520"
  },
  {
    "text": "i want the country code then that also belongs in this class so so don't make like wrappers around data and then put",
    "start": "1385520",
    "end": "1392720"
  },
  {
    "text": "logic that relates to that concept elsewhere also add stuff like that",
    "start": "1392720",
    "end": "1399039"
  },
  {
    "text": "yep",
    "start": "1399039",
    "end": "1402039"
  },
  {
    "text": "yes this is this is definitely a part of the main driven design uh so this is not not specific but the point of this is we",
    "start": "1404159",
    "end": "1411600"
  },
  {
    "text": "should use this more in as a part of getting better security so this is a part of we call it value objects in the",
    "start": "1411600",
    "end": "1418640"
  },
  {
    "text": "main driven design but enforcing invariants is is something",
    "start": "1418640",
    "end": "1423760"
  },
  {
    "text": "that people tend to to forget or they they write too little of these validation rules so uh we could we could go a bit",
    "start": "1423760",
    "end": "1431520"
  },
  {
    "text": "further with the phone number class so in this this case we could go to kotlin and we can can write it a bit in a bit",
    "start": "1431520",
    "end": "1438480"
  },
  {
    "text": "of a different fashion so again we have a constant where we have we store the value",
    "start": "1438480",
    "end": "1445039"
  },
  {
    "text": "and we have an init which is kind of the constructor and we say that this value must satisfy some checks",
    "start": "1445039",
    "end": "1452159"
  },
  {
    "text": "and then we have the checks where we can so we can kind of simplify stuff and use reuse stuff across so we have some",
    "start": "1452159",
    "end": "1458000"
  },
  {
    "text": "checks to say the length must be between 8 and 20 and it must match a certain",
    "start": "1458000",
    "end": "1463440"
  },
  {
    "text": "regex and the point of this is we have a list of functions that we can call and then we",
    "start": "1463440",
    "end": "1469679"
  },
  {
    "text": "can reuse them as in in other functions so we can create a create method that returns what",
    "start": "1469679",
    "end": "1476159"
  },
  {
    "text": "we call an either and then either is a union type if or you might see it as a union type so",
    "start": "1476159",
    "end": "1481919"
  },
  {
    "text": "we and either either is either a validation error or it's a phone number and the point of this is we might not",
    "start": "1481919",
    "end": "1488240"
  },
  {
    "text": "want to throw exceptions we might want to be able to return validation messages so we can show them to the users without",
    "start": "1488240",
    "end": "1494799"
  },
  {
    "text": "kind of catching stuff and and maybe we want to validate the larger objects and get all the validation errors so now we",
    "start": "1494799",
    "end": "1501360"
  },
  {
    "text": "can do that we can try to to to instantiate this object and we either get a validation error or we get a phone",
    "start": "1501360",
    "end": "1508320"
  },
  {
    "text": "number back and then we can act on that and we can also have the the function that we had very is valid we just",
    "start": "1508320",
    "end": "1514559"
  },
  {
    "text": "checked that it returned a write so an either has is an object that has either a left or a right it doesn't have it",
    "start": "1514559",
    "end": "1520720"
  },
  {
    "text": "never has both a validation error and a phone number it either has one of them or the other",
    "start": "1520720",
    "end": "1526640"
  },
  {
    "text": "so that's taking it one step further next we can uh we can look at the",
    "start": "1526640",
    "end": "1531840"
  },
  {
    "text": "password primitive so the password primitive we might want to ensure that",
    "start": "1531840",
    "end": "1537039"
  },
  {
    "text": "no one ever makes the mistake of doing two string because that might happen if we're doing like deserialization or just",
    "start": "1537039",
    "end": "1542880"
  },
  {
    "text": "a log statement or something like that we never want to print the value and we don't want to have a public variable in",
    "start": "1542880",
    "end": "1549440"
  },
  {
    "text": "this case because we want to make sure that we only ask for the password for this class",
    "start": "1549440",
    "end": "1555360"
  },
  {
    "text": "if we absolutely mean to so in this case where we can create a aspiring function just to have it we could even have a",
    "start": "1555360",
    "end": "1561679"
  },
  {
    "text": "counter there it says you can only access this value a certain number of times and then it will",
    "start": "1561679",
    "end": "1566720"
  },
  {
    "text": "throw an exception for instance so we make sure that we we're not like accidentally stealing this data",
    "start": "1566720",
    "end": "1572159"
  },
  {
    "text": "elsewhere so that's also one way to avoid having uh stuff printed we again we're using",
    "start": "1572159",
    "end": "1579200"
  },
  {
    "text": "these primitives to handle it so we don't have to know when we're writing a log statement like okay i need to make",
    "start": "1579200",
    "end": "1584559"
  },
  {
    "text": "sure that i don't print this thing and this thing uh it's it's handled by the class instead",
    "start": "1584559",
    "end": "1591279"
  },
  {
    "text": "so some more examples email maybe we want to check if the email is unique because",
    "start": "1591279",
    "end": "1596799"
  },
  {
    "text": "it's for user registration so we want to check is does this user already exist",
    "start": "1596799",
    "end": "1602000"
  },
  {
    "text": "that's not something we can enforce in the email object itself so we have to go check somewhere",
    "start": "1602000",
    "end": "1608480"
  },
  {
    "text": "phone number you might want to check that it's a mobile phone number and that's quite hard and google has a",
    "start": "1608480",
    "end": "1613600"
  },
  {
    "text": "library called for this where that has all the rules for all kinds of countries where what's what's a mobile number",
    "start": "1613600",
    "end": "1620080"
  },
  {
    "text": "what's like a landline and what's all other types of phone numbers that you can have",
    "start": "1620080",
    "end": "1625600"
  },
  {
    "text": "but that's uh that's also something we might have to check if we're going to use this for two-factor sms which we probably shouldn't but anyway",
    "start": "1625600",
    "end": "1633039"
  },
  {
    "text": "passwords we can have rules that says it should not contain the email or the phone",
    "start": "1633039",
    "end": "1638399"
  },
  {
    "text": "number of the user engine not contain the names of the users and you can kind of see where this is going it's hard for",
    "start": "1638399",
    "end": "1643600"
  },
  {
    "text": "the password object itself to know what the user's names and email and phone numbers are",
    "start": "1643600",
    "end": "1649760"
  },
  {
    "text": "so we can't necessarily enforce these in the primitive itself",
    "start": "1649760",
    "end": "1654799"
  },
  {
    "text": "but that's why we have the entities so i mentioned the the registration entity earlier so here's the user registration",
    "start": "1654799",
    "end": "1660880"
  },
  {
    "text": "entity so the the uh the primitives that we have up there",
    "start": "1660880",
    "end": "1666080"
  },
  {
    "text": "they enforce the stuff that they can do but then the entity can wrap these",
    "start": "1666080",
    "end": "1671840"
  },
  {
    "text": "things and enforce rules across them so it can check that we don't have the phone number in the password etc",
    "start": "1671840",
    "end": "1680240"
  },
  {
    "text": "um and uh we want to register this user we're using this this user registration",
    "start": "1680240",
    "end": "1685360"
  },
  {
    "text": "instead of uh like separate fields because we want them to be valid all together as a concept",
    "start": "1685360",
    "end": "1693679"
  },
  {
    "text": "now next up we we see this this this thing here so we're going to store the exact",
    "start": "1693840",
    "end": "1698960"
  },
  {
    "text": "credentials because those are going to be stored in a specific way and in this case we have a username",
    "start": "1698960",
    "end": "1704799"
  },
  {
    "text": "that's an email address and then we have a validated password so how do we get a validated password",
    "start": "1704799",
    "end": "1710640"
  },
  {
    "text": "what does it even mean well a validated password could mean that we we kind of go and look it up and",
    "start": "1710640",
    "end": "1715679"
  },
  {
    "text": "see that this is not one of the the commonly breached passwords that are spread across the internet in all kinds",
    "start": "1715679",
    "end": "1721279"
  },
  {
    "text": "of lists and that's not something that the password primitive can know itself so in in this case we need kind of a",
    "start": "1721279",
    "end": "1728000"
  },
  {
    "text": "transformer where we can go from a candidate password and to a validate password and we can ask a service hey",
    "start": "1728000",
    "end": "1734000"
  },
  {
    "text": "can you validate this password can i use this password and then it can do the the the things i mentioned it can go and",
    "start": "1734000",
    "end": "1739919"
  },
  {
    "text": "look in one of these uh commonly breached password lists and say no this is not a good password or",
    "start": "1739919",
    "end": "1745760"
  },
  {
    "text": "you could say yes you can use this password it's good and we can have the other rules that we want there",
    "start": "1745760",
    "end": "1751760"
  },
  {
    "text": "so the the password primitive itself it could enforce like simple syntax so the",
    "start": "1751760",
    "end": "1756799"
  },
  {
    "text": "password should be of a certain length for instance but we do do need these services to actually do uh some of the",
    "start": "1756799",
    "end": "1763760"
  },
  {
    "text": "work regardless so next up um apis",
    "start": "1763760",
    "end": "1770880"
  },
  {
    "text": "we have again our simple application here just even more simplified because we've kind of merged the stuff on the",
    "start": "1770880",
    "end": "1777120"
  },
  {
    "text": "left into a client and then we have some data in the database and we're going to read that data so the",
    "start": "1777120",
    "end": "1783760"
  },
  {
    "text": "client asks hey can i get some data and we read it out of the database we create an object on the server side and",
    "start": "1783760",
    "end": "1789279"
  },
  {
    "text": "we send it over to the client works perfectly then at some point we decided to add",
    "start": "1789279",
    "end": "1795520"
  },
  {
    "text": "this new field let's say this was a credit rating or something that was secret a token or a 2fa",
    "start": "1795520",
    "end": "1802640"
  },
  {
    "text": "secret for for the authenticator app and we store this together with the user data in this case",
    "start": "1802640",
    "end": "1808799"
  },
  {
    "text": "and but because we followed uh um let's say we were using ruby on rails or",
    "start": "1808799",
    "end": "1814000"
  },
  {
    "text": "some other framework which kind of just oh you have a model in your database you're just going to send it right out to the client and when we add this new",
    "start": "1814000",
    "end": "1820399"
  },
  {
    "text": "field we might accidentally end up also sending the new field out to the clients",
    "start": "1820399",
    "end": "1825919"
  },
  {
    "text": "because we didn't do anything specific to hide that field in the api",
    "start": "1825919",
    "end": "1831200"
  },
  {
    "text": "similarly we could have a way to store data and normally in the web ui we only",
    "start": "1831200",
    "end": "1836240"
  },
  {
    "text": "send two fields the two fields are sent in we read the data from the database we overwrite the",
    "start": "1836240",
    "end": "1842559"
  },
  {
    "text": "two fields in question and then we store the data back in the database that works perfectly but what happens if",
    "start": "1842559",
    "end": "1849120"
  },
  {
    "text": "the user were to specify the third field",
    "start": "1849120",
    "end": "1854720"
  },
  {
    "text": "and send it in well depending on how we wrote the server side code in this case we might have and we might end up overwriting the",
    "start": "1854720",
    "end": "1862159"
  },
  {
    "text": "data that we weren't supposed to overwrite so suddenly we have some read only data that the user could influence",
    "start": "1862159",
    "end": "1869679"
  },
  {
    "text": "this is called a mass assignment attack and there have been many many uh",
    "start": "1869679",
    "end": "1875200"
  },
  {
    "text": "examples of this the most famous one being edgar homakoff on github",
    "start": "1875200",
    "end": "1880799"
  },
  {
    "text": "igor hamakov he opened a github issue that was a thousand and one years into the future",
    "start": "1880799",
    "end": "1886880"
  },
  {
    "text": "because he was able to overwrite the created timestamp of this issue",
    "start": "1886880",
    "end": "1893120"
  },
  {
    "text": "and the reason why he did this was he he was trying to tell the ruby and rails community hey ribbon rails is doing",
    "start": "1893120",
    "end": "1898720"
  },
  {
    "text": "something stupid here like they're kind of exposing everything and it doesn't do any filtering by default so i can just",
    "start": "1898720",
    "end": "1904640"
  },
  {
    "text": "write whatever back and and then github was vulnerable to this and he went as far because no one listened to him so he",
    "start": "1904640",
    "end": "1910960"
  },
  {
    "text": "went as far as adding his own ssh key to the ribbon rails github repo and then he got got the attention he was",
    "start": "1910960",
    "end": "1917840"
  },
  {
    "text": "kicked out of of github for a while and then they kind of realized that he was only trying to do this to show that this",
    "start": "1917840",
    "end": "1923360"
  },
  {
    "text": "is an actual problem and by doing this he influenced the design of the next version of ruby on rails",
    "start": "1923360",
    "end": "1930000"
  },
  {
    "text": "where things were handled a bit differently you had to tell which which",
    "start": "1930000",
    "end": "1935760"
  },
  {
    "text": "properties that were allowed to be set from the outside but i think that's still kind of taking",
    "start": "1935760",
    "end": "1941440"
  },
  {
    "text": "a model that we have on the server side and exposing it directly to the client i don't like it because then if i want",
    "start": "1941440",
    "end": "1948320"
  },
  {
    "text": "to change something in my internal model now i suddenly expose that to the",
    "start": "1948320",
    "end": "1953679"
  },
  {
    "text": "clients so we should of course have what we call",
    "start": "1953679",
    "end": "1959519"
  },
  {
    "text": "dtos or contracts or even we could call it an anti-corruption layer",
    "start": "1959519",
    "end": "1964720"
  },
  {
    "text": "we want to have a specific type of object that represents the contrast the contracts that we have with our clients",
    "start": "1964720",
    "end": "1972000"
  },
  {
    "text": "so data transfer objects con contracts whatever they have many names so in this case instead of exposing the",
    "start": "1972000",
    "end": "1978799"
  },
  {
    "text": "model directly we copy stuff out just the fields that we want so we leave the secret field",
    "start": "1978799",
    "end": "1985200"
  },
  {
    "text": "just on the server and we send it to the client so the client will not see the new field because it's not a part of the",
    "start": "1985200",
    "end": "1991279"
  },
  {
    "text": "model that we use for the communication with the client similarly with this malicious client",
    "start": "1991279",
    "end": "1996960"
  },
  {
    "text": "that's sending this extra extra field down here that extra field that doesn't exist in",
    "start": "1996960",
    "end": "2002880"
  },
  {
    "text": "the in the dto in the contract so it's just going to be either discarded or we just re reject",
    "start": "2002880",
    "end": "2008320"
  },
  {
    "text": "the request altogether but if we if we decide to just discard any field we don't know about well at least we'll",
    "start": "2008320",
    "end": "2014159"
  },
  {
    "text": "just copy the two fields that we like and put them back in the database",
    "start": "2014159",
    "end": "2019760"
  },
  {
    "text": "again we just we take like a really simple thing uh it's a few lines of code to integrate",
    "start": "2019760",
    "end": "2025679"
  },
  {
    "text": "these contracts but people tend to think it's it's too difficult i i have to maintain all this stuff but i can assure",
    "start": "2025679",
    "end": "2031760"
  },
  {
    "text": "you it kind of gets harder if you don't so uh let's say this is the wire format",
    "start": "2031760",
    "end": "2037360"
  },
  {
    "text": "that we have we have an order uh the order has an id which is a grid or a uid and we have some items and",
    "start": "2037360",
    "end": "2044240"
  },
  {
    "text": "each of the items also has an id and then we have some quantities so uh we're going to create a dto for it",
    "start": "2044240",
    "end": "2052079"
  },
  {
    "text": "so we have an order dto which has an id and some items and we have an order line",
    "start": "2052079",
    "end": "2058240"
  },
  {
    "text": "dto which has a product at the end of quantity and as you can see here we're mostly",
    "start": "2058240",
    "end": "2064158"
  },
  {
    "text": "using primitives because this is the dto this is going to be json or xml or whatever in the in the format that the",
    "start": "2064159",
    "end": "2070079"
  },
  {
    "text": "data is coming in as so in this case we're using strings we're using ins because that's the representation we",
    "start": "2070079",
    "end": "2075118"
  },
  {
    "text": "have when we're going to json but we're gonna when the data comes in we want to",
    "start": "2075119",
    "end": "2081118"
  },
  {
    "text": "actually transform it into stuff that we where we validate stuff and we can actually put this in the dtos themselves",
    "start": "2081119",
    "end": "2087200"
  },
  {
    "text": "so we can create a two domain method which will take this dto data and try to",
    "start": "2087200",
    "end": "2092960"
  },
  {
    "text": "create the proper objects for it so in this case it will create an order id with the string and so it becomes a",
    "start": "2092960",
    "end": "2100160"
  },
  {
    "text": "proper order id where it checks that it's actually a uuid and then it takes all the items that was",
    "start": "2100160",
    "end": "2105920"
  },
  {
    "text": "in the list and and creates proper objects for them as well where we have a quantity that enforces",
    "start": "2105920",
    "end": "2112720"
  },
  {
    "text": "the limits of what is a quantity is it 1 is it 500 and also a product that a and these two",
    "start": "2112720",
    "end": "2119359"
  },
  {
    "text": "can be different because we probably want to separate order ids from product ids we don't want to accidentally add an",
    "start": "2119359",
    "end": "2125760"
  },
  {
    "text": "order as a product line and this is actually a lot easier to do",
    "start": "2125760",
    "end": "2132480"
  },
  {
    "text": "than in at least in in in a typed language because we can create like a wrapped function and then just",
    "start": "2132480",
    "end": "2139520"
  },
  {
    "text": "use inheritance to get the two others so it's like two lines of code to get them separate but now we won't accidentally",
    "start": "2139520",
    "end": "2145200"
  },
  {
    "text": "in our code use a product id instead of an order id or or vice versa",
    "start": "2145200",
    "end": "2151119"
  },
  {
    "text": "which is really really nice it it might seem like a very trivial",
    "start": "2151119",
    "end": "2156640"
  },
  {
    "text": "thing but actually when you're writing code it's really nice because you get compile time errors every time you try",
    "start": "2156640",
    "end": "2161839"
  },
  {
    "text": "to use the wrong thing maybe you have like something that's just an id and you don't know where it's coming from now at least it has a type",
    "start": "2161839",
    "end": "2169760"
  },
  {
    "text": "and we can also say say that the order dto is not only responsible for going from the wire format into the domain but",
    "start": "2170720",
    "end": "2177440"
  },
  {
    "text": "it's also responsible for going in the other direction so the order dto or the dtos in in",
    "start": "2177440",
    "end": "2183520"
  },
  {
    "text": "in total they now have a responsibility their responsibility is to know how to",
    "start": "2183520",
    "end": "2189440"
  },
  {
    "text": "map from the wire format or the dto format and into the",
    "start": "2189440",
    "end": "2194800"
  },
  {
    "text": "proper format that we want internally so it's all hidden here",
    "start": "2194800",
    "end": "2201119"
  },
  {
    "text": "and so so the the our internal objects the the proper order it doesn't have to",
    "start": "2201119",
    "end": "2206160"
  },
  {
    "text": "know anything about json or it doesn't have to have these weird annotations where json serializable or all kinds of",
    "start": "2206160",
    "end": "2212960"
  },
  {
    "text": "stuff like that it doesn't have to care about that that's the job of the dto",
    "start": "2212960",
    "end": "2218240"
  },
  {
    "text": "then we can also because we talked about immutability earlier like we have all these things",
    "start": "2220079",
    "end": "2226000"
  },
  {
    "text": "that are val which is a constant maybe we also want if you're going to",
    "start": "2226000",
    "end": "2231839"
  },
  {
    "text": "add a new uh order line to an order we want that to be immutable as well so instead of just adding it to the list",
    "start": "2231839",
    "end": "2238800"
  },
  {
    "text": "the list could be a read-only list and instead we create an ad function that returns",
    "start": "2238800",
    "end": "2244240"
  },
  {
    "text": "either a new order with the new item added or a validation order",
    "start": "2244240",
    "end": "2249359"
  },
  {
    "text": "a validation error and then we have some checks that checks that well you can't have more than a certain amount of items",
    "start": "2249359",
    "end": "2256160"
  },
  {
    "text": "in total on this order and that can be enforced uh by the order",
    "start": "2256160",
    "end": "2261200"
  },
  {
    "text": "uh entity in this case so now we're kind of we",
    "start": "2261200",
    "end": "2266960"
  },
  {
    "text": "we we have this immutability which is nice as well because we don't accidentally change values across and",
    "start": "2266960",
    "end": "2272320"
  },
  {
    "text": "then suddenly there's something new in the list and suddenly we have too many items now it's not possible to create an",
    "start": "2272320",
    "end": "2278640"
  },
  {
    "text": "order that has too many items because it does the validation before it's created",
    "start": "2278640",
    "end": "2284480"
  },
  {
    "text": "so we now have also a way to decide on what's the the",
    "start": "2284480",
    "end": "2291680"
  },
  {
    "text": "uh responsibility of a controller a function or an endpoint function",
    "start": "2291680",
    "end": "2297200"
  },
  {
    "text": "what's what's it supposed to do well it's supposed to map the request to the domain objects and thereby validate them",
    "start": "2297200",
    "end": "2302960"
  },
  {
    "text": "because it tries to create the proper objects then it calls the correct processing method",
    "start": "2302960",
    "end": "2308720"
  },
  {
    "text": "and then we map the results back to http response in this case so now we",
    "start": "2308720",
    "end": "2314079"
  },
  {
    "text": "have this is what every controller method should do it should not do any logic that's that's belongs to the processing",
    "start": "2314079",
    "end": "2321119"
  },
  {
    "text": "method so it could be like a service class or whatever sits behind it",
    "start": "2321119",
    "end": "2327240"
  },
  {
    "text": "and then we're back to this thing so now i talked a lot about input validation how if you want to create an",
    "start": "2327839",
    "end": "2334320"
  },
  {
    "text": "object you have to check everything it should enforce stuff and if you have a valid instance of an object then",
    "start": "2334320",
    "end": "2340640"
  },
  {
    "text": "that's uh it's certainly valid because we've done all the checks but it's not the solution for sql",
    "start": "2340640",
    "end": "2347599"
  },
  {
    "text": "injection why is that we could ask this guy",
    "start": "2347599",
    "end": "2354079"
  },
  {
    "text": "yeah i think he's dutch and he tries to try to register his name and that's his name it's a",
    "start": "2354079",
    "end": "2360640"
  },
  {
    "text": "valid name and then he got a sequel injection error or a sequel error when you try to register",
    "start": "2360640",
    "end": "2367680"
  },
  {
    "text": "and there's something with clear text passwords and stuff in there as well which is",
    "start": "2367680",
    "end": "2372720"
  },
  {
    "text": "bad error message but still if we wanted to apply input validation",
    "start": "2372720",
    "end": "2378720"
  },
  {
    "text": "well it's still his name he should be allowed to have that name right",
    "start": "2378720",
    "end": "2383839"
  },
  {
    "text": "so in this case input validation fails us because well there's this attacking character that he has in his name and it",
    "start": "2383839",
    "end": "2390480"
  },
  {
    "text": "kind of slides directly into most a lot like bobby tables right",
    "start": "2390480",
    "end": "2395680"
  },
  {
    "text": "so the problem with cross-site scripting in sql injection is",
    "start": "2395680",
    "end": "2400880"
  },
  {
    "text": "data does not stay data so we have some data coming in we're",
    "start": "2400880",
    "end": "2407119"
  },
  {
    "text": "going to put it as i mentioned in the beginning we're going to put it into a query language and then we kind of break",
    "start": "2407119",
    "end": "2413520"
  },
  {
    "text": "stuff so data does not stay data this is a bug right data should stay data it should not",
    "start": "2413520",
    "end": "2420000"
  },
  {
    "text": "suddenly become control it's a bug but this is the problem with injections",
    "start": "2420000",
    "end": "2425040"
  },
  {
    "text": "is not that we necessarily allowed all kinds of weird characters because as we saw with the dutch guy",
    "start": "2425040",
    "end": "2430960"
  },
  {
    "text": "like those those letters should be valid so",
    "start": "2430960",
    "end": "2435920"
  },
  {
    "text": "there have been some attempts and i did this uh earl in my early career when i started the code as well like i tried to",
    "start": "2436160",
    "end": "2442079"
  },
  {
    "text": "encode stuff when during input validation so like i took the okay i have the string it contains this uh the",
    "start": "2442079",
    "end": "2447839"
  },
  {
    "text": "single quote i'm going to encode it now because now i'm getting it into my code and i'm going to encode it immediately",
    "start": "2447839",
    "end": "2453280"
  },
  {
    "text": "so it never hits the sql injection endpoint and php did this for a long time by default so whenever there was a",
    "start": "2453280",
    "end": "2459200"
  },
  {
    "text": "single quote coming in it would add a slash in front of it which was super annoying when you tried to show that in",
    "start": "2459200",
    "end": "2464319"
  },
  {
    "text": "html and there was always a slash in front of all the all the single quotes",
    "start": "2464319",
    "end": "2469520"
  },
  {
    "text": "so uh don't do it during input validation because you don't know what the format is you don't know where this",
    "start": "2469520",
    "end": "2476160"
  },
  {
    "text": "thing is going to end up it might end up in a database today but like next week maybe you you've swapped the database or",
    "start": "2476160",
    "end": "2481760"
  },
  {
    "text": "maybe you're going to send it out in the json request so don't do it there you should do it when you're moving to the other format",
    "start": "2481760",
    "end": "2490400"
  },
  {
    "text": "so we should use the languages we should use the constructs would you use the apis that we have to do this so for",
    "start": "2490400",
    "end": "2497440"
  },
  {
    "text": "instance with sql injection there is uh parametrized queries they handle this for us we don't have to care",
    "start": "2497440",
    "end": "2503359"
  },
  {
    "text": "good it's just that we still tend to not use them in a lot of places because sequel injection is obviously still a problem",
    "start": "2503359",
    "end": "2510079"
  },
  {
    "text": "then we have process scripting now we have uh frameworks like react and angular and and svelta and all those",
    "start": "2510079",
    "end": "2516079"
  },
  {
    "text": "kinds of things they most of the time they handle crosstalk scripting for us they they tend to",
    "start": "2516079",
    "end": "2522480"
  },
  {
    "text": "escape stuff for us so we don't have to care except if we're using like dangerously set inner html and",
    "start": "2522480",
    "end": "2528560"
  },
  {
    "text": "friends of that and then for other types we might have to escape or encode",
    "start": "2528560",
    "end": "2534480"
  },
  {
    "text": "and now i have a confession to make i failed to communicate once or i failed",
    "start": "2534480",
    "end": "2540000"
  },
  {
    "text": "many times but i failed to communicate once i was doing a source code review",
    "start": "2540000",
    "end": "2546160"
  },
  {
    "text": "and i found lots of sql injections with code looking like this",
    "start": "2546160",
    "end": "2551599"
  },
  {
    "text": "so there's uh there's some string concatenation happening here uh this is not nice uh",
    "start": "2551599",
    "end": "2557200"
  },
  {
    "text": "so i so i was kind of finishing up my report and i sent it over and said hey",
    "start": "2557200",
    "end": "2563359"
  },
  {
    "text": "it's not a good idea to do string concatenation when you're building sql statements you should really use prepared",
    "start": "2563359",
    "end": "2569359"
  },
  {
    "text": "statements and so what i expected to happen was something like this in this case like so we have the question mark instead of the",
    "start": "2569359",
    "end": "2575680"
  },
  {
    "text": "parameter and then we say statement set string to this id and then we execute the query",
    "start": "2575680",
    "end": "2581680"
  },
  {
    "text": "but what i got back a few weeks later was this",
    "start": "2581680",
    "end": "2587760"
  },
  {
    "text": "so they just used prepare statement was still doing the string concatenation because i didn't say stop doing string concatenation i said",
    "start": "2588319",
    "end": "2595040"
  },
  {
    "text": "only said stop doing prepared statements and this is a fault of mine i",
    "start": "2595040",
    "end": "2600480"
  },
  {
    "text": "communicated badly and i think we sometimes do this as security people as well we kind of assume that everyone",
    "start": "2600480",
    "end": "2606160"
  },
  {
    "text": "else knows you should do it in this way and then we don't explain it well enough",
    "start": "2606160",
    "end": "2611920"
  },
  {
    "text": "but the question is can we do something with the apis and i think philippe dirk who was",
    "start": "2611920",
    "end": "2617760"
  },
  {
    "text": "talking yesterday he had some great examples of this we can wrap stuff we can wrap security",
    "start": "2617760",
    "end": "2623520"
  },
  {
    "text": "libraries we can wrap stuff in things that helps us uh convey the message and and makes it",
    "start": "2623520",
    "end": "2628960"
  },
  {
    "text": "easier for our fellow developers to do things right so uh the the example philip showed was",
    "start": "2628960",
    "end": "2635520"
  },
  {
    "text": "um uh a react mod module called uh or a react component",
    "start": "2635520",
    "end": "2640720"
  },
  {
    "text": "called safe html which you was using dangerously set in html but was also using dom purify so that you could",
    "start": "2640720",
    "end": "2647520"
  },
  {
    "text": "display rich data without risking cross-site scripting but i'll also show you another example",
    "start": "2647520",
    "end": "2655200"
  },
  {
    "text": "trust the types this was mentioned in the the keynote by jim yesterday",
    "start": "2655200",
    "end": "2660800"
  },
  {
    "text": "what is trusted types uh in our uh in our browsers when we're",
    "start": "2660800",
    "end": "2667280"
  },
  {
    "text": "writing code one of the problems that we have with client-side crossover scripting is we sometimes assign",
    "start": "2667280",
    "end": "2675599"
  },
  {
    "text": "paint the data which is data coming from a user which they are in control over to inner html or outer html or we do",
    "start": "2675599",
    "end": "2681680"
  },
  {
    "text": "document write or we do all kinds of other stuff or we use this dangerously set inner html thing",
    "start": "2681680",
    "end": "2687760"
  },
  {
    "text": "as shown down here in react so we're kind of assigning painted data into the dom",
    "start": "2687760",
    "end": "2693359"
  },
  {
    "text": "which causes a cross-site scripting so we trusted types we kind of changed the api",
    "start": "2693359",
    "end": "2700240"
  },
  {
    "text": "so the way we do it is we set the header which says enforce trusted types4 script",
    "start": "2700240",
    "end": "2706079"
  },
  {
    "text": "and now if we try to assign a string to innerhtml it says well you can't do that anymore",
    "start": "2706079",
    "end": "2712800"
  },
  {
    "text": "because you've enforced trusted types so we we modified the api to say the",
    "start": "2712800",
    "end": "2718000"
  },
  {
    "text": "only thing that you can assign to an html is something called trusted html so you have to create a trusted html first",
    "start": "2718000",
    "end": "2724079"
  },
  {
    "text": "aha how do i create a trusted html well you create a trusted htm",
    "start": "2724079",
    "end": "2729760"
  },
  {
    "text": "html by creating a policy you use trusted types to create a policy and there you have a create html method",
    "start": "2729760",
    "end": "2736640"
  },
  {
    "text": "that takes the string data and then converts it somehow and then we can assign it after or use",
    "start": "2736640",
    "end": "2742960"
  },
  {
    "text": "that policy afterwards to assign to innerhtml uh uh we can actually skip the policy if",
    "start": "2742960",
    "end": "2750079"
  },
  {
    "text": "we want to because don't purify the guys behind it are very clever so they created a sanitized function that",
    "start": "2750079",
    "end": "2755920"
  },
  {
    "text": "returns a trusted type so if we have trusted types and uh and first we can",
    "start": "2755920",
    "end": "2760960"
  },
  {
    "text": "just ask don't purify to say hey return and trust the type once you've cleaned this data and then things work as",
    "start": "2760960",
    "end": "2767040"
  },
  {
    "text": "perfect another thing we could do and this is something philip derek showed me",
    "start": "2767040",
    "end": "2772640"
  },
  {
    "text": "some some months ago is we can use a default policy so the default policy will trigger if",
    "start": "2772640",
    "end": "2779440"
  },
  {
    "text": "you try to assign a string to innerhtml so instead of just blindly assigning the string it's going to call the default",
    "start": "2779440",
    "end": "2786160"
  },
  {
    "text": "policy to clean it so now we can we can use don't purify and this would even work in libraries",
    "start": "2786160",
    "end": "2792640"
  },
  {
    "text": "right so we have a library and the library is somewhere is doing a stupid uh inner html assignment it would even",
    "start": "2792640",
    "end": "2798640"
  },
  {
    "text": "catch that so if we if we just enforce truster type and and and only have like a specific",
    "start": "2798640",
    "end": "2805040"
  },
  {
    "text": "policy that you have to remember to call we might end up breaking some libraries but in this case we we can even fix that",
    "start": "2805040",
    "end": "2813520"
  },
  {
    "text": "so um i've talked about some code that was kind of kotlin-ish and",
    "start": "2813839",
    "end": "2819520"
  },
  {
    "text": "it could also have been very similar in c sharp uh or in java",
    "start": "2819520",
    "end": "2824560"
  },
  {
    "text": "but what about typescript a lot of developers these days are using",
    "start": "2824560",
    "end": "2829680"
  },
  {
    "text": "typescript well like we use it in lambdas we use it on the client side in a of course in a in compiled to",
    "start": "2829680",
    "end": "2835839"
  },
  {
    "text": "javascript way uh but what can we do here like if we want to do the input validation bit what can we do so uh",
    "start": "2835839",
    "end": "2843200"
  },
  {
    "text": "we now have classes oh let's use classes so okay so we create a username class and then we have a constructor that",
    "start": "2843200",
    "end": "2849520"
  },
  {
    "text": "takes some value and it's a read-only so it's very much similar to what we saw",
    "start": "2849520",
    "end": "2855119"
  },
  {
    "text": "earlier and then we do some checks and then we do the same thing for password and we create two",
    "start": "2855119",
    "end": "2862160"
  },
  {
    "text": "two instances one of the user name and one of password and we try to call this register function",
    "start": "2862160",
    "end": "2867920"
  },
  {
    "text": "so this uh this should work right register username password that's great the problem is",
    "start": "2867920",
    "end": "2873040"
  },
  {
    "text": "this also works so if we flip flip them it's still going to work because typescript",
    "start": "2873040",
    "end": "2879520"
  },
  {
    "text": "well not because typescript because of duct typing so",
    "start": "2879520",
    "end": "2884720"
  },
  {
    "text": "what typescript actually sees here is not username and password it says",
    "start": "2884720",
    "end": "2890960"
  },
  {
    "text": "some type with a thing called value that's a string and some other type that's a value and it contains a string",
    "start": "2890960",
    "end": "2897680"
  },
  {
    "text": "and so that's that's why we can flip them so we could even do something like this and bypass the validation",
    "start": "2897680",
    "end": "2902880"
  },
  {
    "text": "altogether because yeah these this match what we have up there like m two empty",
    "start": "2902880",
    "end": "2907920"
  },
  {
    "text": "strings that matches okay crap um what can we do about this then well one",
    "start": "2907920",
    "end": "2914800"
  },
  {
    "text": "thing we could do which i don't recommend is we could add private fields to all the method in this",
    "start": "2914800",
    "end": "2920800"
  },
  {
    "text": "case i'm adding a private field it's uh called underscore i it could be called",
    "start": "2920800",
    "end": "2927520"
  },
  {
    "text": "and anything contains the value of one and we've added it in both places so why are they here",
    "start": "2927520",
    "end": "2933119"
  },
  {
    "text": "well in this case typescript compiler will actually complain we'll say hey",
    "start": "2933119",
    "end": "2939440"
  },
  {
    "text": "you have a password and you have a username but they have different uh declarations of this private property",
    "start": "2939440",
    "end": "2946079"
  },
  {
    "text": "so i don't like this and and it's going to throw an exception but this is",
    "start": "2946079",
    "end": "2951280"
  },
  {
    "text": "a bit ugly in my opinion so again we could of course go to the",
    "start": "2951280",
    "end": "2956319"
  },
  {
    "text": "entities and um create an entity where we have proper names for the fields and then use that",
    "start": "2956319",
    "end": "2963440"
  },
  {
    "text": "so at least there's only one place we can go wrong and that's in the constructor so we accidentally give the",
    "start": "2963440",
    "end": "2969040"
  },
  {
    "text": "two two values in reverse to the constructor i think that's probably a better option",
    "start": "2969040",
    "end": "2974319"
  },
  {
    "text": "but what about input validation of json data i see um",
    "start": "2974319",
    "end": "2980319"
  },
  {
    "text": "lots of places where people are kind of just assuming that data coming from the server is valid according to",
    "start": "2980319",
    "end": "2987839"
  },
  {
    "text": "what they expect in in the client side code or vice versa end of server side code we just assume that",
    "start": "2987839",
    "end": "2993599"
  },
  {
    "text": "the code that's coming in it has some strings that has some hints in the right places and we just kind of do like an ass",
    "start": "2993599",
    "end": "3000240"
  },
  {
    "text": "to to cast it uh and and it's not so nice but i discovered this library called sod",
    "start": "3000240",
    "end": "3007599"
  },
  {
    "text": "and props to whoever colon is because this is a great piece of code",
    "start": "3007599",
    "end": "3013040"
  },
  {
    "text": "so what we can do with saat is we can create contracts",
    "start": "3013040",
    "end": "3018240"
  },
  {
    "text": "so in this case i'm creating a registration parser and in this case i'm saying okay an email is a string it has a minimum length of 10 and a maximum",
    "start": "3018240",
    "end": "3024880"
  },
  {
    "text": "size of 60 and it's going to match the specific reg x and then i take the reg x from the uh",
    "start": "3024880",
    "end": "3031359"
  },
  {
    "text": "specs for what you allow in a browser for an input field of type email and use that so",
    "start": "3031359",
    "end": "3036400"
  },
  {
    "text": "that's one way to go for a password in this case i'm just going to check that it's a string and it has a length between 8 and 256. so you",
    "start": "3036400",
    "end": "3043920"
  },
  {
    "text": "could easily add lots of more uh validation rules here and this is just a simple example to show it and you could",
    "start": "3043920",
    "end": "3051040"
  },
  {
    "text": "also combine these so you could take the email like you say an email is this set string stuff and then you use reuse that",
    "start": "3051040",
    "end": "3058079"
  },
  {
    "text": "across many uh different of the parsers and the cool thing about this is",
    "start": "3058079",
    "end": "3064160"
  },
  {
    "text": "we can also ask sod to create a type for it so in this case it won't be a fantastic",
    "start": "3064160",
    "end": "3070880"
  },
  {
    "text": "type with proper classes and all kinds of stuff it will still be primitives but at least",
    "start": "3070880",
    "end": "3076240"
  },
  {
    "text": "now we have a way to do proper input validation and get out a type without having to use json schema which is not",
    "start": "3076240",
    "end": "3082960"
  },
  {
    "text": "in tune with the classes that we have or the objects that we expect the types that we created now it's all coming from",
    "start": "3082960",
    "end": "3089040"
  },
  {
    "text": "this thing and it becomes a type and",
    "start": "3089040",
    "end": "3094319"
  },
  {
    "text": "the way we use it is we parse the json data with a parse function and it will throw",
    "start": "3094319",
    "end": "3099599"
  },
  {
    "text": "an error if it's invalid it would also remove all fields that it doesn't recognize by",
    "start": "3099599",
    "end": "3106160"
  },
  {
    "text": "default you can you can add a fall through if you don't want that or you could tell it to",
    "start": "3106160",
    "end": "3111839"
  },
  {
    "text": "to throw an error if there are extra fields that you don't want but this is one way of using it it also",
    "start": "3111839",
    "end": "3118240"
  },
  {
    "text": "has a similar way of using it as the either we can use safe parse",
    "start": "3118240",
    "end": "3124800"
  },
  {
    "text": "so with safe parse it's going to return a union type and the union type is either a success",
    "start": "3124800",
    "end": "3131119"
  },
  {
    "text": "or it's an error so in this case i'm asking is this a success and no it's not then i have parse result error which i",
    "start": "3131119",
    "end": "3137520"
  },
  {
    "text": "can use to if i want to show an error message or if i want to login error message or whatever and then i can use parse result.data to",
    "start": "3137520",
    "end": "3144400"
  },
  {
    "text": "get the actual data that's now been parsed and validated and all that stuff",
    "start": "3144400",
    "end": "3150319"
  },
  {
    "text": "so um no we can't get like the necessarily the the proper type stuff that we had in the",
    "start": "3150319",
    "end": "3155839"
  },
  {
    "text": "the strongly typed languages because uh it's duct type but at least we can get a lot further using this approach than",
    "start": "3155839",
    "end": "3161920"
  },
  {
    "text": "just casting things so i i really really like and recommend this library",
    "start": "3161920",
    "end": "3168559"
  },
  {
    "text": "so um i've done this talk once before and i'll always get the same questions",
    "start": "3168559",
    "end": "3174480"
  },
  {
    "text": "and i'm going to preempt some of your questions the main primitives seem fine and all but have you ever used this on a real",
    "start": "3174480",
    "end": "3181440"
  },
  {
    "text": "project yes i have i worked on a project for three years and the only pieces of code i didn't",
    "start": "3181440",
    "end": "3187200"
  },
  {
    "text": "like was the ones that where we didn't use this because it was very very nice to have",
    "start": "3187200",
    "end": "3193359"
  },
  {
    "text": "the problems is often that where do we put this input validation logic if we don't have the primitives well okay so",
    "start": "3193359",
    "end": "3198960"
  },
  {
    "text": "we're going to have like a list of regulators somewhere or some validation function with some static functions that does stuff",
    "start": "3198960",
    "end": "3204960"
  },
  {
    "text": "and we kind of tend to spread things around and the validation rules they don't have a home they kind of just okay",
    "start": "3204960",
    "end": "3210400"
  },
  {
    "text": "they're in the validation class which is super long because it's used for all kinds of validation where do we put it",
    "start": "3210400",
    "end": "3216480"
  },
  {
    "text": "now we have a home for it it belongs in the primitives so that's a nice thing of course it can be an issue as well if",
    "start": "3216480",
    "end": "3222880"
  },
  {
    "text": "you want to use the same rules both on the client side and on the server side and you want to kind of expose them but there are ways around that but yes i",
    "start": "3222880",
    "end": "3229680"
  },
  {
    "text": "have used this on a real project and yes i really like it it must take a lot of time to create all",
    "start": "3229680",
    "end": "3236640"
  },
  {
    "text": "those small classes it's not free but security isn't free",
    "start": "3236640",
    "end": "3242240"
  },
  {
    "text": "and if you're not using the classes you still should do validation so the the discussion is more do you want to do",
    "start": "3242240",
    "end": "3248000"
  },
  {
    "text": "validation or not and if you want to do validation then this is i think a good way of doing it",
    "start": "3248000",
    "end": "3253920"
  },
  {
    "text": "if not you're going to have to spread it around and find ways of doing it that may or may",
    "start": "3253920",
    "end": "3259040"
  },
  {
    "text": "not work of course you could use schemas of course you could do it in other ways but i like the fact that it belongs in a",
    "start": "3259040",
    "end": "3265119"
  },
  {
    "text": "specific place what about equals and hash codes in in those classes you created ah well",
    "start": "3265119",
    "end": "3272319"
  },
  {
    "text": "you got me there you have to implement equals in ash code as well of course because you have to check that the value",
    "start": "3272319",
    "end": "3277440"
  },
  {
    "text": "is the same so i deliberately skipped it because i didn't want to show really long classes to to trick you all",
    "start": "3277440",
    "end": "3284559"
  },
  {
    "text": "now but uh i yes you have to do that because if you want to check if two usernames",
    "start": "3284559",
    "end": "3290079"
  },
  {
    "text": "are the same of course you have to write the the equals method so it actually checks that the the value is a match",
    "start": "3290079",
    "end": "3298400"
  },
  {
    "text": "what if we need to change the validation rules ah this is the most difficult question",
    "start": "3298640",
    "end": "3303920"
  },
  {
    "text": "what if you already have data in the database and then you need to change the validation rules and then you have data",
    "start": "3303920",
    "end": "3310720"
  },
  {
    "text": "in the database that no longer matches the new rules that you create yeah this is annoying this is super",
    "start": "3310720",
    "end": "3316559"
  },
  {
    "text": "annoying this is also a problem you will have regardless of how you do it but you will the the",
    "start": "3316559",
    "end": "3323119"
  },
  {
    "text": "problem here is you'll trigger it when you read data from the database and you try to convert them into objects it will",
    "start": "3323119",
    "end": "3328640"
  },
  {
    "text": "fail there and that's a bit odd but at least you you know that you have a problem so um if you want to change the",
    "start": "3328640",
    "end": "3334240"
  },
  {
    "text": "rules uh one way of doing it is to have a script that you run before you go you",
    "start": "3334240",
    "end": "3339920"
  },
  {
    "text": "actually deploy the code so you you kind of run a script before you deploy a new version to check",
    "start": "3339920",
    "end": "3346720"
  },
  {
    "text": "all the fields okay i'm going to check all the email address and check that they match this new validator that we created and see if",
    "start": "3346720",
    "end": "3353119"
  },
  {
    "text": "there are some errors and then you can fix those so we had this problem we had some phone numbers that where people have been just writing garbage data and",
    "start": "3353119",
    "end": "3359359"
  },
  {
    "text": "we had to import some data from an old system and so we had lots of bad data in the database and we had this exact",
    "start": "3359359",
    "end": "3365520"
  },
  {
    "text": "problem and there are ways around it and it's annoying there and then but in the long",
    "start": "3365520",
    "end": "3371119"
  },
  {
    "text": "run having proper data is so much better so uh",
    "start": "3371119",
    "end": "3377520"
  },
  {
    "text": "i'm going to try to summarize the things that i think about this you might disagree but i think",
    "start": "3377520",
    "end": "3383680"
  },
  {
    "text": "the first part input validation and encoding or escaping stuff both of them are needed it's defense in",
    "start": "3383680",
    "end": "3390079"
  },
  {
    "text": "depth we need to invalidate data as it comes into the application and we also need to encode or escape it as it's",
    "start": "3390079",
    "end": "3396319"
  },
  {
    "text": "leaving the application i think domain driven security can help us here i think it puts input validation",
    "start": "3396319",
    "end": "3402559"
  },
  {
    "text": "in the right place i think it can enforce better data quality because we have proper types going around and it",
    "start": "3402559",
    "end": "3409359"
  },
  {
    "text": "can stop and hamper many types of attack because of the input validation stuff and we can get things that used to be",
    "start": "3409359",
    "end": "3415599"
  },
  {
    "text": "runtime bugs to become compile time bugs because we're going to catch them because the types are wrong",
    "start": "3415599",
    "end": "3422000"
  },
  {
    "text": "and then we can have questions if there are any so i'm going to try to summarize for for",
    "start": "3422000",
    "end": "3428799"
  },
  {
    "text": "the people on stream so one of the points was if you're using just domain primitives then uh",
    "start": "3428799",
    "end": "3436319"
  },
  {
    "text": "you can't kind of reuse and you can't do validation across different primitives and as i mentioned",
    "start": "3436319",
    "end": "3442240"
  },
  {
    "text": "we have the entities so the entities can do cross field validation the other point was",
    "start": "3442240",
    "end": "3448160"
  },
  {
    "text": "when we're creating all these classes we're using more memory so it might make sense to instead of",
    "start": "3448160",
    "end": "3454079"
  },
  {
    "text": "validating each field to have to do the validation on the uh on the",
    "start": "3454079",
    "end": "3460079"
  },
  {
    "text": "aggregate route uh or like the entity just just on the entity and then still have strings and those those are valid",
    "start": "3460079",
    "end": "3466319"
  },
  {
    "text": "valid concerns if if memory is an issue in the systems that i have been working",
    "start": "3466319",
    "end": "3472240"
  },
  {
    "text": "on where we had lots of lots of transactions going through it we didn't really see the memory issue as a big",
    "start": "3472240",
    "end": "3478559"
  },
  {
    "text": "thing for us but of course that might be a valid concern for for your code so so the question was here um is there uh",
    "start": "3478559",
    "end": "3485520"
  },
  {
    "text": "like in in my examples i showed that we had the the input validations rule into the objects and is there a way to",
    "start": "3485520",
    "end": "3492400"
  },
  {
    "text": "specify them kind of outside the code and have them uh either compiled into or",
    "start": "3492400",
    "end": "3498720"
  },
  {
    "text": "stuff like that there probably is um i i think that having them there makes a lot",
    "start": "3498720",
    "end": "3504400"
  },
  {
    "text": "of sense because they kind of belong to that object i know where it's where it is i know where i have to fix it if it's there",
    "start": "3504400",
    "end": "3510160"
  },
  {
    "text": "but in there are cases as mentioned if you want to have the same input validation rules on the client and on",
    "start": "3510160",
    "end": "3516160"
  },
  {
    "text": "the server you might have to extract them so you can kind of use them in both places and and have them available both",
    "start": "3516160",
    "end": "3521760"
  },
  {
    "text": "to let's say java or typescript and something like that so so this is not a perfect solution but i just think it's",
    "start": "3521760",
    "end": "3528559"
  },
  {
    "text": "it's a lot better than uh lots of other stuff i worked on and seen so yeah",
    "start": "3528559",
    "end": "3536160"
  },
  {
    "text": "and i think that's it we're out of time if you have any more questions please feel free to come up and and heckle me",
    "start": "3536799",
    "end": "3542319"
  },
  {
    "text": "that's fine thank you",
    "start": "3542319",
    "end": "3546920"
  }
]