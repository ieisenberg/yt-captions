[
  {
    "text": "but don't worry okay steady pass that means I ought to talk about stuff now so hello",
    "start": "120",
    "end": "6720"
  },
  {
    "text": "um I there's a link to my website in the event that anyone has any interest in speaking to me again uh there's links to",
    "start": "6720",
    "end": "14040"
  },
  {
    "text": "my Twitter and all the rest of it so if at the end of this you have questions uh at least one's about about programming",
    "start": "14040",
    "end": "20039"
  },
  {
    "text": "my mum still has the rest of those questions she's been pondering those for the last 40 years but um",
    "start": "20039",
    "end": "25680"
  },
  {
    "text": "yeah feel free to reach out so getting going briefly about me I'm not",
    "start": "25680",
    "end": "31859"
  },
  {
    "text": "going to go through all of this I've been in it an awfully long time now it's coming on two decades I really am that",
    "start": "31859",
    "end": "38160"
  },
  {
    "text": "old um I I've worked in a whole load of different um uh different sectors I've done",
    "start": "38160",
    "end": "44280"
  },
  {
    "text": "gatherment and made sure that you folks all pay your taxes hey um I've done",
    "start": "44280",
    "end": "49820"
  },
  {
    "text": "manufacturing retail these days I was briefly one of those contractors that your mum used to warn you about and",
    "start": "49820",
    "end": "56699"
  },
  {
    "text": "these days I work for Muller as in corner I am told at some point I'll be",
    "start": "56699",
    "end": "61980"
  },
  {
    "text": "given some free yogurt but it hasn't materialized yet so Liam when he watches",
    "start": "61980",
    "end": "67140"
  },
  {
    "text": "this video later uh but anyway that's enough about me",
    "start": "67140",
    "end": "72659"
  },
  {
    "text": "this is my program of events I like films so I have a program of events you see uh this is and I'm going with the",
    "start": "72659",
    "end": "79080"
  },
  {
    "text": "slightly inaccurately named uh sixws who what where when why and how a functional",
    "start": "79080",
    "end": "85740"
  },
  {
    "text": "programming that's that's that's my uh that's my structure for my talk so first off who is it these are a",
    "start": "85740",
    "end": "92100"
  },
  {
    "text": "couple of individuals who are significant to the history of functional programming one of them is a developer",
    "start": "92100",
    "end": "97500"
  },
  {
    "text": "see if you can guess which one uh this gentleman though is a mathematician his name is Alonso Church uh he's",
    "start": "97500",
    "end": "104360"
  },
  {
    "text": "significant to us for a couple of reasons mostly down to this Lotto down here which I'm not going to pretend I",
    "start": "104360",
    "end": "109500"
  },
  {
    "text": "entirely understand because I am not a mathematician caveat going in I am not a mathematician but here we go it's an",
    "start": "109500",
    "end": "116579"
  },
  {
    "text": "arrow this is a shorthand way of describing a function in mathematics it's an arrow function there you go",
    "start": "116579",
    "end": "121680"
  },
  {
    "text": "thanks to him and over here that there that's the Greek letter Lambda which donates a parameter hence",
    "start": "121680",
    "end": "128580"
  },
  {
    "text": "Lambda expression that's where they come from uh this was from the 1950s as well",
    "start": "128580",
    "end": "134700"
  },
  {
    "text": "so this man is um Haskell Curry who has no fewer than three programming",
    "start": "134700",
    "end": "139800"
  },
  {
    "text": "languages named after him including rather famously Haskell uh and this is",
    "start": "139800",
    "end": "145500"
  },
  {
    "text": "one of his other contributions here this is an example of carrying don't worry about that at the moment but he wrote",
    "start": "145500",
    "end": "152700"
  },
  {
    "text": "maths papers which serve as an awful lot of the underpinning of functional programming",
    "start": "152700",
    "end": "159860"
  },
  {
    "text": "could this be possibly yeah it is uh this is John McCarthy who",
    "start": "160980",
    "end": "167640"
  },
  {
    "text": "created arguably the first functional programming language lisp in the 1960s",
    "start": "167640",
    "end": "173340"
  },
  {
    "text": "that is a bit of lisp over there I don't know what that does either uh apparently list still has its fans apparently it's",
    "start": "173340",
    "end": "180060"
  },
  {
    "text": "pretty wild apparently you can do incredible things like rewriting innumerables as you go or something I",
    "start": "180060",
    "end": "185160"
  },
  {
    "text": "don't know but in any case 1960s and that's that's how far back it goes",
    "start": "185160",
    "end": "191220"
  },
  {
    "text": "so what is it not well the main point of those last few",
    "start": "191220",
    "end": "197220"
  },
  {
    "text": "slides is it is not new in fact functional programming in some senses",
    "start": "197220",
    "end": "203099"
  },
  {
    "text": "predates object oriented um it dates back to maths papers which",
    "start": "203099",
    "end": "208260"
  },
  {
    "text": "are written largely in the 50s but I once wasted a Sunday uh if you can call",
    "start": "208260",
    "end": "213480"
  },
  {
    "text": "it that um trying to trace how far back that particular Rabbit Hole really goes and it a lot of the very first work was late",
    "start": "213480",
    "end": "220560"
  },
  {
    "text": "1800s so it's really flipping old it is not um",
    "start": "220560",
    "end": "226080"
  },
  {
    "text": "it is not the latest trendy um JavaScript framework it is not the",
    "start": "226080",
    "end": "231180"
  },
  {
    "text": "latest um whatever in the development environment it is really old it predates",
    "start": "231180",
    "end": "237420"
  },
  {
    "text": "Microsoft it predates most programming languages you're likely to have ever used it is not a language in fact",
    "start": "237420",
    "end": "245640"
  },
  {
    "text": "um it's a paradigm now what's a paradigm well Paradigm is a style of programming",
    "start": "245640",
    "end": "251280"
  },
  {
    "text": "if you want a metaphor then take a guitar with a guitar you may play many styles of music on you could play Rock",
    "start": "251280",
    "end": "257579"
  },
  {
    "text": "you could play pop you can play country and western if you have no soul but you get the idea it is a style of programming not in and",
    "start": "257579",
    "end": "265620"
  },
  {
    "text": "of itself a language and it is not imperative imperative is the common alternative Paradigm though in fact I I",
    "start": "265620",
    "end": "271919"
  },
  {
    "text": "again this is one of those rabbit holes I went into there are actually lots and lots of paradigms but the two Big E's",
    "start": "271919",
    "end": "277979"
  },
  {
    "text": "well the two big families of them are uh imperative and declarative imperative is",
    "start": "277979",
    "end": "283620"
  },
  {
    "text": "your object-oriented coding and it is not like that imperative code is very concerned with",
    "start": "283620",
    "end": "290699"
  },
  {
    "text": "the very precise order of operations start here go here loop around like this",
    "start": "290699",
    "end": "295979"
  },
  {
    "text": "go here that's an imperative approach declarative programming is what",
    "start": "295979",
    "end": "301320"
  },
  {
    "text": "functional programming belongs to the rather more familiar form of declarative programming to you folks is probably SQL",
    "start": "301320",
    "end": "308880"
  },
  {
    "text": "SQL is declarative if you think about it you're not concerned with the order of operations",
    "start": "308880",
    "end": "314360"
  },
  {
    "text": "in tsql or whichever other flavor you tend to write select and then maybe some",
    "start": "314360",
    "end": "320820"
  },
  {
    "text": "joins somewhere an order by maybe a group by is that order actually the",
    "start": "320820",
    "end": "326400"
  },
  {
    "text": "order of execution no no it's not quite often the select's the last thing that's run not always but often you get the",
    "start": "326400",
    "end": "333300"
  },
  {
    "text": "idea with declarative we are not concerned with the order of operations we are more concerned with describing",
    "start": "333300",
    "end": "339300"
  },
  {
    "text": "what we want and then largely leaving the environment to worry about the",
    "start": "339300",
    "end": "344340"
  },
  {
    "text": "precise way it goes about them it's not the solution to all of your problems uh it will not make coffee in",
    "start": "344340",
    "end": "351360"
  },
  {
    "text": "the morning I have tried this it does not work but I would argue it is the solution to many of them nor is it",
    "start": "351360",
    "end": "357720"
  },
  {
    "text": "difficult and that's one of the other ones that gets chucked at functional programming that it's difficult it's not it's not difficult at all in fact there",
    "start": "357720",
    "end": "364320"
  },
  {
    "text": "are fewer things to learn in in functional programming compared to object oriented if you don't believe me",
    "start": "364320",
    "end": "371280"
  },
  {
    "text": "go and find a non-technical member of your family and try and explain object orientation to them try it'll take you a",
    "start": "371280",
    "end": "377520"
  },
  {
    "text": "lot longer than you think you've probably just been doing this for a while um most of the folks that I have",
    "start": "377520",
    "end": "383100"
  },
  {
    "text": "encountered who are uh the keenest to adopt functional are often folks who are new to the business who may be fresh out",
    "start": "383100",
    "end": "389520"
  },
  {
    "text": "of University who simply haven't spent that time getting used to the um the object-oriented Paradigm and the",
    "start": "389520",
    "end": "395460"
  },
  {
    "text": "folks who tend to be the most resistant are often those who've spent an awfully long time and object oriented and don't",
    "start": "395460",
    "end": "400500"
  },
  {
    "text": "really want to shift gears and do something entirely different but I would still argue that if you were choosing",
    "start": "400500",
    "end": "405720"
  },
  {
    "text": "Fresh then this is probably the easier of the two options you've got",
    "start": "405720",
    "end": "411500"
  },
  {
    "text": "no there we go and what actually is it well",
    "start": "411780",
    "end": "417240"
  },
  {
    "text": "here's all of the properties of functional programming some of these have scary names but none of them are",
    "start": "417240",
    "end": "422280"
  },
  {
    "text": "actually all that hard uh it's the clarity I've already talked about that so as I say we are not concerned with",
    "start": "422280",
    "end": "428100"
  },
  {
    "text": "the order of operations we are simply describing and letting the machine get on with it uh it is it uses immutability",
    "start": "428100",
    "end": "435240"
  },
  {
    "text": "which basically means that once a variable has been set you may not change it or any of its properties ever again",
    "start": "435240",
    "end": "442319"
  },
  {
    "text": "basically treat everything as a cast uh everything or read only or whatever",
    "start": "442319",
    "end": "447599"
  },
  {
    "text": "and all its properties you can't change it done so stop using lists basically",
    "start": "447599",
    "end": "453000"
  },
  {
    "text": "and a few other things too I'll get on to that higher order functions funky name not",
    "start": "453000",
    "end": "458940"
  },
  {
    "text": "really very hard you've probably been doing it if you've done C sharp for any amount of time for a while and that is",
    "start": "458940",
    "end": "464120"
  },
  {
    "text": "variables passed around either as the parameter to a function or as the return",
    "start": "464120",
    "end": "469919"
  },
  {
    "text": "from a function so link if you've done an arrow functioning link that's what it",
    "start": "469919",
    "end": "475319"
  },
  {
    "text": "is uh functions not statement so statements what are those statements are things which do not actually return anything",
    "start": "475319",
    "end": "482639"
  },
  {
    "text": "um so four four each if while we don't use them",
    "start": "482639",
    "end": "488340"
  },
  {
    "text": "so this is fun this is programming without those structures those are uh imperative structures",
    "start": "488340",
    "end": "495360"
  },
  {
    "text": "referential transparency also called Pure functions so this is the idea that",
    "start": "495360",
    "end": "500460"
  },
  {
    "text": "given the same set of parameters a function will always to return the same",
    "start": "500460",
    "end": "505560"
  },
  {
    "text": "result no matter what no matter the life of the universe no matter the state of a system accepting",
    "start": "505560",
    "end": "511740"
  },
  {
    "text": "that you you know turn the computer off other than that given these parameters you will always get this result uh it's",
    "start": "511740",
    "end": "517979"
  },
  {
    "text": "called reference it's called a referential transparency because effectively you can just switch the",
    "start": "517979",
    "end": "524459"
  },
  {
    "text": "reference of the function with the parameters for the actual value or something but anyway uh recursion are",
    "start": "524459",
    "end": "530459"
  },
  {
    "text": "we all good on recursion good gonna be a tough talk for you otherwise uh pattern matching I used to",
    "start": "530459",
    "end": "536640"
  },
  {
    "text": "have to explain this but I don't these days since I have been doing this talk and I've been doing this talk about four",
    "start": "536640",
    "end": "542160"
  },
  {
    "text": "or five years now uh that's pretty much become a thing in C sharp and this is good if anyone has played with the",
    "start": "542160",
    "end": "549360"
  },
  {
    "text": "switch Expressions which are there since what about C sharp six seven I think",
    "start": "549360",
    "end": "554580"
  },
  {
    "text": "um that's pattern matching and every single version of C sharp that has been",
    "start": "554580",
    "end": "559740"
  },
  {
    "text": "um that's come out has had more pattern matching in uh even down to uh C sharp 11 it gave us the the as everyone's in",
    "start": "559740",
    "end": "566700"
  },
  {
    "text": "the new the list matching it's our new one that's pretty cool there is still further probably to go on it and there",
    "start": "566700",
    "end": "572339"
  },
  {
    "text": "is something called active patterns which we may or may not get but anyway pattern matching is definitely a amazing",
    "start": "572339",
    "end": "578399"
  },
  {
    "text": "feature and it's it's there in C sharp is now it's stateless there's no concept of State",
    "start": "578399",
    "end": "585080"
  },
  {
    "text": "object-oriented code typically goes by the idea that you have a state object we will do a thing and the state object",
    "start": "585080",
    "end": "592320"
  },
  {
    "text": "will sit there and the thing will periodically ping the state and update it get it update it get it that's not a",
    "start": "592320",
    "end": "599220"
  },
  {
    "text": "concept in uh functional program we don't have a state if anybody has messed with react and has",
    "start": "599220",
    "end": "605640"
  },
  {
    "text": "played with Redux that's roughly the idea of what we go with it's the um what",
    "start": "605640",
    "end": "610740"
  },
  {
    "text": "you have is a state which exists for the length of the life of a function effectively and you change it by having",
    "start": "610740",
    "end": "616500"
  },
  {
    "text": "a function which takes the Old State and an instruction and then creates new state so rather than a single state",
    "start": "616500",
    "end": "622920"
  },
  {
    "text": "object We have basically a series of them that exist for a moment and a constantly sort of Disappearing and",
    "start": "622920",
    "end": "628860"
  },
  {
    "text": "coming about within a new form uh that's monads you say those are the ones that",
    "start": "628860",
    "end": "635640"
  },
  {
    "text": "tend to make people's ears bleed if you try to explain to them uh there's a talk",
    "start": "635640",
    "end": "641279"
  },
  {
    "text": "by Douglas crockford where he says the curse of the monad is that once you gain the ability to understand it uh you lose",
    "start": "641279",
    "end": "648180"
  },
  {
    "text": "the ability to explain it so I shant and not difficult I hope you'll agree by",
    "start": "648180",
    "end": "655500"
  },
  {
    "text": "the end of the talk so where is it well it can go anywhere",
    "start": "655500",
    "end": "662579"
  },
  {
    "text": "and I will probably get into trouble over some of the things I say if there's any any uh pure functional programming folks in the crowd today but uh it can",
    "start": "662579",
    "end": "669779"
  },
  {
    "text": "go anywhere it can do anything but there are places where it is happiest uh and a",
    "start": "669779",
    "end": "675180"
  },
  {
    "text": "better fit if if you're having to compromise a well these are the languages there for a",
    "start": "675180",
    "end": "681180"
  },
  {
    "text": "start where you that you can use it so there's the the pure functional language or pure I don't think all of these are",
    "start": "681180",
    "end": "686339"
  },
  {
    "text": "necessarily entirely pure but certainly Haskell is airline's a biggie an Elm I don't know if anyone's used rabbit mq",
    "start": "686339",
    "end": "691920"
  },
  {
    "text": "that was I think that was Airline so I believe that is uh um done with functional programming and",
    "start": "691920",
    "end": "697800"
  },
  {
    "text": "the claim of these languages the functional ones is that with some of them that once you actually get the thing to compile and run nothing will",
    "start": "697800",
    "end": "704459"
  },
  {
    "text": "bring it down like it's rock solid and can't be can't be defeated brought off and that might well be true now we're",
    "start": "704459",
    "end": "710220"
  },
  {
    "text": "not entirely going to get that in C sharp but I would argue that we're moving closer to that goal by adopting",
    "start": "710220",
    "end": "715740"
  },
  {
    "text": "this approach and I'll show you how later as the hybrid languages well C sharp C sharp is a hybrid language it is a",
    "start": "715740",
    "end": "722279"
  },
  {
    "text": "stated intention of the Microsoft team that they will support both paradigms I",
    "start": "722279",
    "end": "727860"
  },
  {
    "text": "mean it's true that right at the beginning it was object oriented only but these days we're getting close to",
    "start": "727860",
    "end": "732959"
  },
  {
    "text": "having a 50 50 split so you couldn't just about programming whichever Paradigm you like there are there are some fuzzy edges around which you'll",
    "start": "732959",
    "end": "739860"
  },
  {
    "text": "have to compromise but by and large we can do most of it and that's probably something that will always continue with",
    "start": "739860",
    "end": "745200"
  },
  {
    "text": "time uh mads Torgerson is a fan of functional programming and as far as I'm aware he intends to continue this trend",
    "start": "745200",
    "end": "751200"
  },
  {
    "text": "and on top of that you've also got the F sharp guys F sharp is the functional language inside.net and quite often they",
    "start": "751200",
    "end": "757200"
  },
  {
    "text": "will request something for the Intermediate Language and since they can part of the same Intermediate Language there's a good chance that we in the C",
    "start": "757200",
    "end": "762899"
  },
  {
    "text": "sharp world will benefit from that too so it's probably a process that's not going to end anytime soon I have not yet",
    "start": "762899",
    "end": "768420"
  },
  {
    "text": "seen much in the way of a spec for C sharp 12 but I am anticipating it'll probably be something for a city sharp",
    "start": "768420",
    "end": "773760"
  },
  {
    "text": "12 as well and yes there's F sharp and JavaScript well JavaScript supports everything",
    "start": "773760",
    "end": "779220"
  },
  {
    "text": "because JavaScript is everything except when it isn't because everything in JavaScript is everything except when it isn't except when it's an array except",
    "start": "779220",
    "end": "785820"
  },
  {
    "text": "when it's a function except when it's not a number or something I don't know because it's the wild west of programming and it does everything",
    "start": "785820",
    "end": "792120"
  },
  {
    "text": "um JavaScript does functional programming far better than than we ever could hope and I have other talks on",
    "start": "792120",
    "end": "797880"
  },
  {
    "text": "this subject uh check out ramda.js if you want to see some really wild JavaScript",
    "start": "797880",
    "end": "803279"
  },
  {
    "text": "to when again it can go everywhere it can do anything but these are the things it's the most happy at doing as it were",
    "start": "803279",
    "end": "811079"
  },
  {
    "text": "um data processing that is take data from this form turn it into this it likes doing that concurrent systems",
    "start": "811079",
    "end": "816300"
  },
  {
    "text": "meaning you've got lots of things running uh in in parallel because there's no state if there's no State you",
    "start": "816300",
    "end": "822899"
  },
  {
    "text": "tend not to get resource contention issues and you'll tend to have a happier result so if you're interested in stuff",
    "start": "822899",
    "end": "829740"
  },
  {
    "text": "like serverless functions or feeding off the same queue or or anything of that",
    "start": "829740",
    "end": "835019"
  },
  {
    "text": "sort then functional programming tends to support you very well uh High criticality because in general",
    "start": "835019",
    "end": "841320"
  },
  {
    "text": "functional programming is more robust than the object-oriented alternatives",
    "start": "841320",
    "end": "846600"
  },
  {
    "text": "so if it's very important to you that this go up and knock them down you might want to start adopting more functional",
    "start": "846600",
    "end": "852180"
  },
  {
    "text": "programming techniques and uh serverless that's kind of dates back ties back to the the idea of the",
    "start": "852180",
    "end": "858060"
  },
  {
    "text": "concurrent systems if you are interested in the serverless route again this is probably the some of the things you want to think about",
    "start": "858060",
    "end": "864120"
  },
  {
    "text": "when is it not now once again I I want to check my exits but it can do these things it can indeed but functional",
    "start": "864120",
    "end": "871800"
  },
  {
    "text": "programming is predicated on the idea that there are it is built up of functions which are pure that is no side",
    "start": "871800",
    "end": "877440"
  },
  {
    "text": "effects uh no nothing is happening except data comes in and out you know so",
    "start": "877440",
    "end": "882540"
  },
  {
    "text": "these are places where you have to make compromises in order to let it happen",
    "start": "882540",
    "end": "887699"
  },
  {
    "text": "um there are all thoughts of options out there I know certainly Haskell has as a monad based system for dealing with",
    "start": "887699",
    "end": "893699"
  },
  {
    "text": "these but this is where compromises are necessary so UI is one because there is nothing more impure than a human being",
    "start": "893699",
    "end": "901740"
  },
  {
    "text": "um external interactions with other systems you don't know what's going to happen when you're when your HTTP request goes out who knows what happened",
    "start": "901740",
    "end": "907079"
  },
  {
    "text": "was it goes down the wire and it may not necessarily be your fault um it probably is though and um and I",
    "start": "907079",
    "end": "913139"
  },
  {
    "text": "have a same sort of idea so you can but again a compromise is necessary there is",
    "start": "913139",
    "end": "919260"
  },
  {
    "text": "now there are the metaphor I use is that if you look at a shadow there are plenty around here if you care to look at one",
    "start": "919260",
    "end": "925139"
  },
  {
    "text": "there are two parts to any Shadow there is the dark solid part in the middle that's the Umbra and the gray fuzzy bit",
    "start": "925139",
    "end": "931860"
  },
  {
    "text": "around the edge that is the penumbra uh and I'm learning drawing I know there's more than two there's like 12 but two",
    "start": "931860",
    "end": "937500"
  },
  {
    "text": "for the purposes of this metaphor and um but that solid bit in the middle is what",
    "start": "937500",
    "end": "943260"
  },
  {
    "text": "I think of is the functional part of the system I make that as solidly functional as I can as much of a system as I can",
    "start": "943260",
    "end": "948779"
  },
  {
    "text": "and the places where I have to compromise I make as small as possible and push to the fringes of the system",
    "start": "948779",
    "end": "954120"
  },
  {
    "text": "where I worry about them less nah the big all-important question why",
    "start": "954120",
    "end": "960839"
  },
  {
    "text": "why do I should I even care um it is concise now you don't always get that talked up as a reason for the",
    "start": "960839",
    "end": "967920"
  },
  {
    "text": "functional programming being a good idea but I really like it it is more concise it's",
    "start": "967920",
    "end": "974279"
  },
  {
    "text": "um it's often up to about half the size or depending of of the amount of code",
    "start": "974279",
    "end": "979560"
  },
  {
    "text": "written for an object-oriented alternative I am incredibly lazy and as",
    "start": "979560",
    "end": "984839"
  },
  {
    "text": "such I like typing less stuff uh I like and it's not only more concise but also",
    "start": "984839",
    "end": "991199"
  },
  {
    "text": "it is more descriptive in part because it has been compacted down so small to it is usually easier to tell what on",
    "start": "991199",
    "end": "998220"
  },
  {
    "text": "Earth a function is doing because there's not all this code noise in the way which is you know your loops and all",
    "start": "998220",
    "end": "1003440"
  },
  {
    "text": "this and your code structure that exists to to actually deliver your results with",
    "start": "1003440",
    "end": "1009500"
  },
  {
    "text": "puncture program we don't have any of that so we can just we can just write a quick few lines and get on with it I get readable there we go extremely testable",
    "start": "1009500",
    "end": "1015800"
  },
  {
    "text": "now that is one that comes up a lot and a lot of people like this for it is again going back to the idea of pure",
    "start": "1015800",
    "end": "1020899"
  },
  {
    "text": "functions um you tend to get incredibly consistent reliable results with functional code",
    "start": "1020899",
    "end": "1027918"
  },
  {
    "text": "so um it's very easy to unit test strictly speaking in a pure functional",
    "start": "1027919",
    "end": "1033500"
  },
  {
    "text": "environment you shouldn't even have dependency injection and all sorts but in C sharp World frankly we do but still",
    "start": "1033500",
    "end": "1039020"
  },
  {
    "text": "it will tend to get you better results in in a testing scenario enables",
    "start": "1039020",
    "end": "1044480"
  },
  {
    "text": "concurrency we've discussed that before more robust kind of talked about that and it's fun I think it's fun and hopefully again you guys will agree by",
    "start": "1044480",
    "end": "1050720"
  },
  {
    "text": "the end of this so here is a bit of very much non-functional code",
    "start": "1050720",
    "end": "1057559"
  },
  {
    "text": "what does that do you've got five seconds nope see it's not how easy is it",
    "start": "1057559",
    "end": "1065500"
  },
  {
    "text": "and what that's actually trying to do is um we are taking a CSV file and we're",
    "start": "1065500",
    "end": "1073820"
  },
  {
    "text": "going to start up a list we are going to Loop and inside the loop we are going to do various things we're going to do some",
    "start": "1073820",
    "end": "1079700"
  },
  {
    "text": "parsing we're going to do a bit of filtering and that's all fine um but there's a lot of a lot of lines",
    "start": "1079700",
    "end": "1085640"
  },
  {
    "text": "of code to do something and you might even notice here that uh that resharper is is tugging up my sleeve say hey hey",
    "start": "1085640",
    "end": "1091700"
  },
  {
    "text": "boss hey I got a good idea and and that's because it tends towards",
    "start": "1091700",
    "end": "1097640"
  },
  {
    "text": "more functional code if you follow all of resharper's suggestions because the functional oh and also internally if",
    "start": "1097640",
    "end": "1104120"
  },
  {
    "text": "anyone recognizes these uh these these titles here you're automatically my friend because uh those are the um story",
    "start": "1104120",
    "end": "1109940"
  },
  {
    "text": "titles in the very first series of Doctor Who from 1963. there may be references to Doctor Who in",
    "start": "1109940",
    "end": "1116240"
  },
  {
    "text": "this talk just just warning you because Doctor Who is cool um but anyway what would this look like",
    "start": "1116240",
    "end": "1121700"
  },
  {
    "text": "functionally like that now try explaining that in five seconds",
    "start": "1121700",
    "end": "1127220"
  },
  {
    "text": "and it gets an awful lot easier doesn't it Point anyone's gonna say that looks like",
    "start": "1127220",
    "end": "1132799"
  },
  {
    "text": "an awful lot of link that that's an awful lot of Link I'll let you in on a little secret link",
    "start": "1132799",
    "end": "1140419"
  },
  {
    "text": "is functional link is entirely based around the functional Paradigm if you're using link",
    "start": "1140419",
    "end": "1146419"
  },
  {
    "text": "you are doing functional programming if you think about it um a select statement does not change",
    "start": "1146419",
    "end": "1153679"
  },
  {
    "text": "the original um whatever was there before the original enumerable it creates a new one",
    "start": "1153679",
    "end": "1158840"
  },
  {
    "text": "based on the old one so it is enabling you to immutably create an array",
    "start": "1158840",
    "end": "1165500"
  },
  {
    "text": "um these here higher order functions you're passing functions in as",
    "start": "1165500",
    "end": "1170840"
  },
  {
    "text": "parameters again based in the functional paradigm so my goal is to effectively put the",
    "start": "1170840",
    "end": "1176240"
  },
  {
    "text": "whole rest of c-sharp into link and that's roughly the approach I'm going for but note also first off this",
    "start": "1176240",
    "end": "1184039"
  },
  {
    "text": "is a lot more concise it's easier to say what it does and this more closely",
    "start": "1184039",
    "end": "1189200"
  },
  {
    "text": "matches um logically what I want to do in the order that I want to do these things",
    "start": "1189200",
    "end": "1195200"
  },
  {
    "text": "logically this is not actually the order of operations that you see here innumerables will execute in the order",
    "start": "1195200",
    "end": "1202280"
  },
  {
    "text": "they feel that they wish to at the time and may not even execute at all but none of that really is your concern all",
    "start": "1202280",
    "end": "1209720"
  },
  {
    "text": "you're doing is describing what you want in the order you want it as if you were describing it to another human being",
    "start": "1209720",
    "end": "1215240"
  },
  {
    "text": "and that's fundamentally I think a good thing because if you were fresh to programming and you were presented with",
    "start": "1215240",
    "end": "1221120"
  },
  {
    "text": "this or this which one are you going to be able to understand quicker I'd say this one",
    "start": "1221120",
    "end": "1228760"
  },
  {
    "text": "are we oh are we nope nope stop stop oh",
    "start": "1229880",
    "end": "1235940"
  },
  {
    "text": "Bob the rise uh there's another bit of very non-functional code this is",
    "start": "1235940",
    "end": "1241460"
  },
  {
    "text": "something that I had to deal with an awful lot back when I worked for hmrc you're very welcome",
    "start": "1241460",
    "end": "1247820"
  },
  {
    "text": "um this is the rules for um uh validating a Nino does anyone",
    "start": "1247820",
    "end": "1253580"
  },
  {
    "text": "happen to know what a Nino is it something I had to be very familiar with at the time it's a national insurance number",
    "start": "1253580",
    "end": "1259100"
  },
  {
    "text": "and there are a set of rather esoteric rules for deciding whether it's a good Nino or not and it's all to do with",
    "start": "1259100",
    "end": "1266360"
  },
  {
    "text": "which letters exist in which places is it an alphanumeric and so on there's a whole load of them and there's a big",
    "start": "1266360",
    "end": "1273500"
  },
  {
    "text": "heap of code structure here and a lot of repeated code structure so we've got check each rule if the rules doesn't",
    "start": "1273500",
    "end": "1279980"
  },
  {
    "text": "match then we'll return false if this rule doesn't match we're going to return false eventually at the bottom it's",
    "start": "1279980",
    "end": "1285200"
  },
  {
    "text": "slightly missing off the bottom of the screen there we'll do a return true at the end",
    "start": "1285200",
    "end": "1290320"
  },
  {
    "text": "or we could do something like this so this is something you can do and I",
    "start": "1290960",
    "end": "1298280"
  },
  {
    "text": "some I see some people do it but mostly people don't you can actually put Bank delegates that is you know your arrow",
    "start": "1298280",
    "end": "1304100"
  },
  {
    "text": "functions in arrays it's possible and not only that but then you can apply",
    "start": "1304100",
    "end": "1310039"
  },
  {
    "text": "link uh link perm functions to them so",
    "start": "1310039",
    "end": "1316220"
  },
  {
    "text": "um and there we go so this is an array of funks so that's actually oh they're",
    "start": "1316220",
    "end": "1322400"
  },
  {
    "text": "all described at the top here you don't have to put them in separately like but you know I like that I like the descriptive name there's nothing wrong",
    "start": "1322400",
    "end": "1327559"
  },
  {
    "text": "with that that's a matter of choice these are all turned string to Boom so take a string return a bull meaning give",
    "start": "1327559",
    "end": "1334580"
  },
  {
    "text": "me the Nino based on the Nino I will therefore decide whether it is good or not in a Boolean and here I am calling a",
    "start": "1334580",
    "end": "1342620"
  },
  {
    "text": "link or now what all does is run whatever's inside here now what I'm actually doing",
    "start": "1342620",
    "end": "1348740"
  },
  {
    "text": "here is take the Nino and pass it into the function and then return its result which is true or false the rule of the",
    "start": "1348740",
    "end": "1355640"
  },
  {
    "text": "all is that every single one of these whatever happens in here must return true if a single one of them doesn't",
    "start": "1355640",
    "end": "1362299"
  },
  {
    "text": "then stop at that point don't bother to execute the rest and just return out early which is a precise replica of the",
    "start": "1362299",
    "end": "1370460"
  },
  {
    "text": "code on the previous page only I'm doing it in this much code",
    "start": "1370460",
    "end": "1375640"
  },
  {
    "text": "oh and you can even take a step further and do something like this now some people are down on um down on uh",
    "start": "1376220",
    "end": "1383240"
  },
  {
    "text": "extension methods I'm not I like them quite a lot they have their places just don't be putting any business logic in",
    "start": "1383240",
    "end": "1388460"
  },
  {
    "text": "there that way Madness lies but uh there we go so I've extended it to t t being",
    "start": "1388460",
    "end": "1394760"
  },
  {
    "text": "everything because it's a generic so it applies to everything and then based on that t I'm also taking a params of",
    "start": "1394760",
    "end": "1400940"
  },
  {
    "text": "whatever that was into a bull and it's paramed just so I don't have to bother instantiating a new array every time",
    "start": "1400940",
    "end": "1406400"
  },
  {
    "text": "because I'm just too lazy for that um and then will call out all that there we go",
    "start": "1406400",
    "end": "1413900"
  },
  {
    "text": "so that means that with this teeny tiny little extension method up here we now have a function uh call validate which",
    "start": "1413900",
    "end": "1419600"
  },
  {
    "text": "hangs off everything and then you can pass it a series of rules one after the other and that will tell you whether that thing was valid or not according to",
    "start": "1419600",
    "end": "1425960"
  },
  {
    "text": "all your rules so again nice and concise and descriptive you could even show that to your your non-technical boss and and",
    "start": "1425960",
    "end": "1433460"
  },
  {
    "text": "the chances are they would understand what it does even if they couldn't necessarily maintain it themselves",
    "start": "1433460",
    "end": "1440080"
  },
  {
    "text": "here's another example of a function structure this uh I'm calling it alt here it I've seen it have other names",
    "start": "1440360",
    "end": "1447679"
  },
  {
    "text": "this is a common theme I found when I've been digging deeper into this is that there is no great big bumper Every Kid's",
    "start": "1447679",
    "end": "1454400"
  },
  {
    "text": "book of functional programming which gives you literally the definitions of what everything is and what it's called it may exist but it's probably a maths",
    "start": "1454400",
    "end": "1461419"
  },
  {
    "text": "paper in which case I won't read it but a lot of these things have other names so the names I use here you might find",
    "start": "1461419",
    "end": "1467720"
  },
  {
    "text": "the same exact Concepts used elsewhere with a different name so just be aware of that but I'm calling it alt and the",
    "start": "1467720",
    "end": "1473240"
  },
  {
    "text": "idea is that I've got two two functions which go away and get a thing string to",
    "start": "1473240",
    "end": "1478640"
  },
  {
    "text": "string in my case it could be anything now maybe these represent two different data sources maybe one of them's a",
    "start": "1478640",
    "end": "1483980"
  },
  {
    "text": "database maybe one of them's a web API it doesn't really matter they're actually just funks for the purposes of the demonstration but you get the idea",
    "start": "1483980",
    "end": "1490159"
  },
  {
    "text": "and in my case one of them works and one of them doesn't you know in object-oriented code you",
    "start": "1490159",
    "end": "1496039"
  },
  {
    "text": "would need to um and you would try two different alternative data sources then you would have to put an if in there",
    "start": "1496039",
    "end": "1502220"
  },
  {
    "text": "you'd have to do a null check and so on but here with my ALT all I do is say here's one item here's the other item",
    "start": "1502220",
    "end": "1509419"
  },
  {
    "text": "try these one after the other and then the first one that works you return that I think the tsql equivalent is a",
    "start": "1509419",
    "end": "1515720"
  },
  {
    "text": "coalesce I think it's coalesce um and there we go that's an awful lot",
    "start": "1515720",
    "end": "1521960"
  },
  {
    "text": "of code I don't need to write in this case this one does not return it's a null and if I run this code then this",
    "start": "1521960",
    "end": "1529880"
  },
  {
    "text": "one would be tried it will find null it will try this one and this string will actually be a this works with my name",
    "start": "1529880",
    "end": "1535700"
  },
  {
    "text": "appended on the end now how does that work under the surface and it looks like that",
    "start": "1535700",
    "end": "1540919"
  },
  {
    "text": "so a couple of extension methods they're a little messy looking but that's fine",
    "start": "1540919",
    "end": "1546799"
  },
  {
    "text": "the thing about extension methods is they are a block of code that I just want to write them once and then never",
    "start": "1546799",
    "end": "1552500"
  },
  {
    "text": "care about again they are like the proverbial snarf action figure from thundercaps in the 1980s I have it I",
    "start": "1552500",
    "end": "1559880"
  },
  {
    "text": "don't necessarily want anyone to see it but I have it actually I don't I'm lying I never was",
    "start": "1559880",
    "end": "1565700"
  },
  {
    "text": "never cool enough to have a snuff but um right what are we doing here so attach",
    "start": "1565700",
    "end": "1571460"
  },
  {
    "text": "again to a generic meaning attaches to everything um and then run Function One",
    "start": "1571460",
    "end": "1577220"
  },
  {
    "text": "I've gone into another extension method which is if default do which means it assesses the result of this if it's default I can't say null because we're",
    "start": "1577220",
    "end": "1584179"
  },
  {
    "text": "dealing with generics and not everything defaults to not integers",
    "start": "1584179",
    "end": "1589460"
  },
  {
    "text": "default to zero booleans default false and so on uh there may be others",
    "start": "1589460",
    "end": "1594860"
  },
  {
    "text": "and then here's the alternative if what it means is if this returns default then do this otherwise just return the",
    "start": "1594860",
    "end": "1600559"
  },
  {
    "text": "original and down here this is the default do which takes to this takes the function and takes the alternative input",
    "start": "1600559",
    "end": "1606919"
  },
  {
    "text": "and it decides this is a slightly scary bit of code which is just a generic version of a null check because again",
    "start": "1606919",
    "end": "1613700"
  },
  {
    "text": "you can't do a null check on a generic and what it will do is just assess whatever this is if it's null then run",
    "start": "1613700",
    "end": "1620659"
  },
  {
    "text": "the function if it is not null then simply just return the value itself it's like a gatekeeper function sitting",
    "start": "1620659",
    "end": "1626539"
  },
  {
    "text": "between you and the outside world and it's sort of you're trying to pass and it'll stand in the way or not depending",
    "start": "1626539",
    "end": "1631940"
  },
  {
    "text": "on what your what you're carrying now this is a ridiculously simple",
    "start": "1631940",
    "end": "1637580"
  },
  {
    "text": "example but I just wanted to keep the example simple um and all I'm trying to do is it for",
    "start": "1637580",
    "end": "1645740"
  },
  {
    "text": "some reason create a a and count of all the A's the B's and the C's in that string at the top there I could have",
    "start": "1645740",
    "end": "1651380"
  },
  {
    "text": "done all sorts of things but I went with simple because I like simple this is a fork once again I've heard",
    "start": "1651380",
    "end": "1656419"
  },
  {
    "text": "these call a few things uh like myself and um what it will do is start with a value",
    "start": "1656419",
    "end": "1663860"
  },
  {
    "text": "and then it's all split off into a series of prongs as it were of the fork",
    "start": "1663860",
    "end": "1669220"
  },
  {
    "text": "each prong will act on the original in ice complete isolation and then a",
    "start": "1669220",
    "end": "1675380"
  },
  {
    "text": "further function will glue all of the prongs back together into a single result so in my case I'm starting with a string",
    "start": "1675380",
    "end": "1682520"
  },
  {
    "text": "and then I'm forking this is the joining function which is a simple sum and here I am going count all the A's count all",
    "start": "1682520",
    "end": "1689960"
  },
  {
    "text": "the B's so what I'm going to end up with in fact is start with a string convert that to an array of integers via these",
    "start": "1689960",
    "end": "1697400"
  },
  {
    "text": "three functions here which will be executed separately on the same input and then finally take that array of integers and turn it into a sum",
    "start": "1697400",
    "end": "1705260"
  },
  {
    "text": "and yet show up to nine and that's what that looks like again little extension method",
    "start": "1705260",
    "end": "1712100"
  },
  {
    "text": "uh attached to everything and this is oh yeah that's map now that's just to be",
    "start": "1712100",
    "end": "1719120"
  },
  {
    "text": "clear that is not the same as map in uh automaper this is like map in I think",
    "start": "1719120",
    "end": "1725539"
  },
  {
    "text": "it's the way JavaScript uses map which is like select but it's not like select okay this is",
    "start": "1725539",
    "end": "1732140"
  },
  {
    "text": "for some reason this is weirdly easy to get a mistaken on but map doesn't act",
    "start": "1732140",
    "end": "1737659"
  },
  {
    "text": "like select in that it turns one thing into another thing but select acts on",
    "start": "1737659",
    "end": "1743720"
  },
  {
    "text": "each element of an array separately map acts on the whole thing so you can call map on a string and then",
    "start": "1743720",
    "end": "1751159"
  },
  {
    "text": "this Arrow phone this function will turn string into whatever else you want if you fed map an array then this would be",
    "start": "1751159",
    "end": "1759260"
  },
  {
    "text": "an array or a numerable or whatever it's the whole object not individual elements of it so it's one of those funky little",
    "start": "1759260",
    "end": "1766159"
  },
  {
    "text": "helper functions I find ever so useful actually no map I think in the JavaScript world is more like a select",
    "start": "1766159",
    "end": "1772580"
  },
  {
    "text": "so not like JavaScript and all it does is convert one thing to another and I just find it saves me a",
    "start": "1772580",
    "end": "1778399"
  },
  {
    "text": "lot of space because I don't need an intermediate variable to store it in or or anything I can just do this",
    "start": "1778399",
    "end": "1784700"
  },
  {
    "text": "dot map converted something else and so this is my Fork though start with the uh the input whatever that might be and uh",
    "start": "1784700",
    "end": "1792260"
  },
  {
    "text": "there's the prongs which are my functions and my join function so prongs.select bit of Link there so and",
    "start": "1792260",
    "end": "1799580"
  },
  {
    "text": "then inside the select what I'm saying is for each prong give it um this whatever the original this is",
    "start": "1799580",
    "end": "1806200"
  },
  {
    "text": "and return that result which will give us an array of whatever's and then call",
    "start": "1806200",
    "end": "1812299"
  },
  {
    "text": "map to say turn that array into something so this is a join function which takes an array of whatever's and",
    "start": "1812299",
    "end": "1817940"
  },
  {
    "text": "uh turns it into a final single result to explain but it doesn't take an awful lot of time",
    "start": "1817940",
    "end": "1823340"
  },
  {
    "text": "to write one of these things oh I'm not sure if I need to entirely go",
    "start": "1823340",
    "end": "1830299"
  },
  {
    "text": "into this in too much detail these days because this talk is a few years old now so this has become fairly fairly common",
    "start": "1830299",
    "end": "1836539"
  },
  {
    "text": "in the uh in the C sharp world now but just in case here it is so some pattern recognition it's a pattern matching I",
    "start": "1836539",
    "end": "1842059"
  },
  {
    "text": "was doing that um let's start with bank accounts since that seems to be the go-to example of how to do these sorts of things we'll",
    "start": "1842059",
    "end": "1848899"
  },
  {
    "text": "have a standard bank account I'll inherit off that with a super duper bank account which has got a Bonus interest",
    "start": "1848899",
    "end": "1854899"
  },
  {
    "text": "rate and a dodgy bank account which has got a brown paper bag stuffed with money probably handed over in a car park for",
    "start": "1854899",
    "end": "1862039"
  },
  {
    "text": "some reason I'd I when I started this I usually inserted a reference to",
    "start": "1862039",
    "end": "1867260"
  },
  {
    "text": "whichever politician was in disgrace these days at the moment take your pick plenty to choose from",
    "start": "1867260",
    "end": "1873559"
  },
  {
    "text": "and I I it's just not even worse it's it's like shooting was it fishing a barrel these days okay and there we go",
    "start": "1873559",
    "end": "1879980"
  },
  {
    "text": "pattern matching I don't know if everyone's familiar with these uh with this this stuff now but you can now",
    "start": "1879980",
    "end": "1886279"
  },
  {
    "text": "switch based on the actual type of an object which has many sub types so I am",
    "start": "1886279",
    "end": "1892940"
  },
  {
    "text": "this ba is actually the based on the is the base type which is bank account and then under that I'm switching based on",
    "start": "1892940",
    "end": "1899059"
  },
  {
    "text": "it's a dodgy bank account and then here it will automatic if it's actually a Dodger bank account it will",
    "start": "1899059",
    "end": "1905179"
  },
  {
    "text": "automatically um wrap it into the correct type and this variable here can be referenced",
    "start": "1905179",
    "end": "1911360"
  },
  {
    "text": "inside the the um inside the switch switch to the right type so imagine just",
    "start": "1911360",
    "end": "1917059"
  },
  {
    "text": "how much code you'd have to write in order to do that if I didn't use this structure it would be quite a lot and it",
    "start": "1917059",
    "end": "1922580"
  },
  {
    "text": "might well use reflection so this is say this alone is saving us a colossal",
    "start": "1922580",
    "end": "1928100"
  },
  {
    "text": "amount of effort um and yeah you can go a lot further",
    "start": "1928100",
    "end": "1934279"
  },
  {
    "text": "these days this is I think this is fairly up to date I don't have a slide on um on list matching which is the very",
    "start": "1934279",
    "end": "1940520"
  },
  {
    "text": "latest thing but now you can do all these sorts of funky switches where you can like switch on properties like this",
    "start": "1940520",
    "end": "1945860"
  },
  {
    "text": "in a sort of Json format and you can really go quite complicated with these",
    "start": "1945860",
    "end": "1952100"
  },
  {
    "text": "sorts of things it's it's astonishing just how much code you can write with this and this this is entirely that comes from from the functional world",
    "start": "1952100",
    "end": "1958399"
  },
  {
    "text": "that's where that's what's inspired all of this so on the subjects for mutability",
    "start": "1958399",
    "end": "1963919"
  },
  {
    "text": "can we actually have immutability in C sharp well here's a few demonstrations this pretty much is immutable I've got",
    "start": "1963919",
    "end": "1972440"
  },
  {
    "text": "gets and no sets uh these days actually you can do init as well uh in its instead of saying that that'll pretty",
    "start": "1972440",
    "end": "1977960"
  },
  {
    "text": "much do the same thing in it meaning um you can set this property when you instantiate the object and then you can't change it again which is typically",
    "start": "1977960",
    "end": "1984500"
  },
  {
    "text": "what I tend to do um and fine we're only we're not allowing these to be set in the outside world and we are at least forcing this",
    "start": "1984500",
    "end": "1991760"
  },
  {
    "text": "to come in in um in in the Constructor so that's so mutable that's good",
    "start": "1991760",
    "end": "1998600"
  },
  {
    "text": "how about now is that immutable see I'm not letting anyone um uh change",
    "start": "1998600",
    "end": "2004779"
  },
  {
    "text": "them I am not I'm forcing it to be done in the Constructor is this immutable no no it's not that's a list lists I can't",
    "start": "2004779",
    "end": "2012820"
  },
  {
    "text": "replace the list with another list but I can still add and remove and mess",
    "start": "2012820",
    "end": "2017919"
  },
  {
    "text": "around with the list because that's lists so that I could go and make it in a mutable array now it's immutable super",
    "start": "2017919",
    "end": "2024519"
  },
  {
    "text": "duper uh you can pass a list in all you like but nope I am making an immutable array so tough luck now it's not",
    "start": "2024519",
    "end": "2031600"
  },
  {
    "text": "so that's good what about now subclass I don't even know what's inside",
    "start": "2031600",
    "end": "2037360"
  },
  {
    "text": "class I just made it up that's why but I am in any case is this immutable",
    "start": "2037360",
    "end": "2042940"
  },
  {
    "text": "they don't even know but there's the problem I don't know if every single class in your whole code base was coded",
    "start": "2042940",
    "end": "2049960"
  },
  {
    "text": "based on this approach sure ish but then as soon as you try and throw in something that's come out and you get",
    "start": "2049960",
    "end": "2055658"
  },
  {
    "text": "some sort of third-party coding structure it all goes out the window because once again we return to I don't",
    "start": "2055659",
    "end": "2062260"
  },
  {
    "text": "even know so this is this is one of my more controversial opinions on this subject",
    "start": "2062260",
    "end": "2068858"
  },
  {
    "text": "I think immutability in C sharp is a pipe dream I mean fundamentally they're not going",
    "start": "2068859",
    "end": "2074679"
  },
  {
    "text": "to change the language so that we can't support everything going backwards they want it to be so that pretty much any",
    "start": "2074679",
    "end": "2081220"
  },
  {
    "text": "older older code always tends to run in the environment so they're not just going to sweeping make a change that",
    "start": "2081220",
    "end": "2087520"
  },
  {
    "text": "will just suddenly make everything immutable because it break half of the code in the world probably more than that so",
    "start": "2087520",
    "end": "2093339"
  },
  {
    "text": "my Approach is just pretend which seems absurd but you'd be",
    "start": "2093339",
    "end": "2099040"
  },
  {
    "text": "surprised how much good code you can write that way just pretend everything is immutable write code as if that were",
    "start": "2099040",
    "end": "2105040"
  },
  {
    "text": "true now it is unfortunate you can't enforce it but that's just the way it is",
    "start": "2105040",
    "end": "2110260"
  },
  {
    "text": "this is C Sharp it is always going to support multiple paradigms that's not going to change they're not going to",
    "start": "2110260",
    "end": "2116800"
  },
  {
    "text": "drop support for object-oriented coding so we just have to do the best we can",
    "start": "2116800",
    "end": "2122920"
  },
  {
    "text": "and yeah you can put stuff like this in where you can have compiler warnings like your nullable enable that's pretty",
    "start": "2122920",
    "end": "2128380"
  },
  {
    "text": "good but you know that's nice I do enable that but um once again we really",
    "start": "2128380",
    "end": "2134740"
  },
  {
    "text": "it's only a compiler warning at least the last time I looked it was I don't think it'll actually break the code and if you want to override it you can put",
    "start": "2134740",
    "end": "2140800"
  },
  {
    "text": "an exclamation whereas uh there's somewhere uh there we go yeah uh where",
    "start": "2140800",
    "end": "2146260"
  },
  {
    "text": "they put it I've lost it but there's an exclamation in there somewhere ah there it is there it is yeah the exclamation is there to",
    "start": "2146260",
    "end": "2153339"
  },
  {
    "text": "say yes I'm a grown-up yes I know do it anyway uh which does exist in some functional languages as well I think get",
    "start": "2153339",
    "end": "2159460"
  },
  {
    "text": "F sharp everything is immutable by default but you can make mutable um types but you have to specifically",
    "start": "2159460",
    "end": "2165339"
  },
  {
    "text": "create so you know that's that's not an entirely wrong thing to do but you know this is nice but I honestly I find the",
    "start": "2165339",
    "end": "2171940"
  },
  {
    "text": "just pretend approach Works an awful lot better and you can enable it uh globally like that",
    "start": "2171940",
    "end": "2178060"
  },
  {
    "text": "how do we tell this guy how old this talk is now um right",
    "start": "2178060",
    "end": "2184300"
  },
  {
    "text": "now oh a class oh yes so yes there's the init type I've already mentioned that in",
    "start": "2184300",
    "end": "2190480"
  },
  {
    "text": "it I do use that quite a lot I find that quite handy that's that's more of a that's the closest I get to actually",
    "start": "2190480",
    "end": "2196000"
  },
  {
    "text": "enforcing immutability um so it just means I can just instantiate a new object like this",
    "start": "2196000",
    "end": "2201880"
  },
  {
    "text": "and then if I try to change one of those properties later to something else that actually will break it that'll actually",
    "start": "2201880",
    "end": "2207099"
  },
  {
    "text": "cause a compiler error and it won't even build so that I use I use I would recommend using that pretty widely",
    "start": "2207099",
    "end": "2214619"
  },
  {
    "text": "there we go and Records uh we I don't know if everyone's familiar with records now records are one of my favorite",
    "start": "2216700",
    "end": "2222640"
  },
  {
    "text": "things since the other favorite things that they introduced but since link and",
    "start": "2222640",
    "end": "2227680"
  },
  {
    "text": "pattern matching records is my other favorite thing um that is again something that has come",
    "start": "2227680",
    "end": "2234820"
  },
  {
    "text": "around to help support the functional Paradigm because it enables you to easily create a new object from an L1",
    "start": "2234820",
    "end": "2241000"
  },
  {
    "text": "which is exactly what we tend to use in the non-record world when writing an update function we wouldn't update the",
    "start": "2241000",
    "end": "2247300"
  },
  {
    "text": "object we would literally create a new one copy over each and every property one after the other and Records just",
    "start": "2247300",
    "end": "2254680"
  },
  {
    "text": "allows us to skip all of that because now with records you can just say with tell it what the one change that you",
    "start": "2254680",
    "end": "2260320"
  },
  {
    "text": "want to make is and then you'll get a new object back with just that type now I believe as of now this is actually",
    "start": "2260320",
    "end": "2267520"
  },
  {
    "text": "still um a reference type but I believe there are changes coming in to allow it to be",
    "start": "2267520",
    "end": "2273220"
  },
  {
    "text": "um a pass by value as well but I'm not quite sure where we are on that this this as it happens is just a silly bit",
    "start": "2273220",
    "end": "2278680"
  },
  {
    "text": "of code to tell me which property of this you want to update and then give",
    "start": "2278680",
    "end": "2283960"
  },
  {
    "text": "give me uh give me a new one with the one changed property and maybe a bit of parsing or whatever as appropriate",
    "start": "2283960",
    "end": "2291180"
  },
  {
    "text": "so currying I did say I would talk about currying and here it is hurrying nothing to do with delicious delicious Indian",
    "start": "2291820",
    "end": "2298000"
  },
  {
    "text": "food um sadly but right this is a",
    "start": "2298000",
    "end": "2303160"
  },
  {
    "text": "hypothetical example of currying sort of that's just a normal Arrow function an",
    "start": "2303160",
    "end": "2308200"
  },
  {
    "text": "ad at one a plus b so if I give it 10 and 20 I get back 30. simple",
    "start": "2308200",
    "end": "2314800"
  },
  {
    "text": "um at least one of my daughters could manage this um mentioning her name's Katie",
    "start": "2314800",
    "end": "2320760"
  },
  {
    "text": "uh and but what if it was a courage function what if by waving my magic wand I could make currying a thing that",
    "start": "2320760",
    "end": "2327520"
  },
  {
    "text": "happened by default in C sharp which it doesn't it does in F sharp not in C sharp so it's a bit imagine for a moment",
    "start": "2327520",
    "end": "2332920"
  },
  {
    "text": "I have just given it one parameter the function requires two does anyone happen to know what will happen if this is a",
    "start": "2332920",
    "end": "2339579"
  },
  {
    "text": "curried function anyone to take a guess okay well there is a rule of thumb in",
    "start": "2339579",
    "end": "2347920"
  },
  {
    "text": "functional programming if there is a question the answers functions and that roughly holds true",
    "start": "2347920",
    "end": "2354820"
  },
  {
    "text": "so if a curried function you pass in one of the parameters of two",
    "start": "2354820",
    "end": "2360040"
  },
  {
    "text": "what you'll get back is there we go what you'll get back is a function",
    "start": "2360040",
    "end": "2365260"
  },
  {
    "text": "and the function will be equivalent to the original function accepting that",
    "start": "2365260",
    "end": "2370839"
  },
  {
    "text": "everywhere where parameter one was referenced is now replaced with the actual value that you gave",
    "start": "2370839",
    "end": "2377619"
  },
  {
    "text": "so when I have an ad with two properties two parameters",
    "start": "2377619",
    "end": "2383560"
  },
  {
    "text": "and I give it one effectively what I've turned into is an add 10 function",
    "start": "2383560",
    "end": "2388720"
  },
  {
    "text": "so now this is still an ad but the one property has been replaced simply with 10.",
    "start": "2388720",
    "end": "2395140"
  },
  {
    "text": "that's what carrying is and strictly speak this is true carrying",
    "start": "2395140",
    "end": "2401220"
  },
  {
    "text": "never mind um there's also partial application where so currying truecarrying is where you do",
    "start": "2404079",
    "end": "2410859"
  },
  {
    "text": "the functions one after the other so if you um if you have five parameters then you'd have to like carry it about five",
    "start": "2410859",
    "end": "2417400"
  },
  {
    "text": "times to actually get a result out there's also partial application where you can just apply them in clusters like",
    "start": "2417400",
    "end": "2423040"
  },
  {
    "text": "you know I'll do two parameters then three but frankly I'm blurring the lines horribly because I'm not really",
    "start": "2423040",
    "end": "2428680"
  },
  {
    "text": "interested enough to go to the entire the purity of of the the some of these definitions but anyway can we do this in",
    "start": "2428680",
    "end": "2435760"
  },
  {
    "text": "C sharp is probably the question that's uh that's occurring to folks now the",
    "start": "2435760",
    "end": "2440920"
  },
  {
    "text": "answer is well the short answer is no ish uh the long answer is yes kind of",
    "start": "2440920",
    "end": "2450460"
  },
  {
    "text": "um first off carrying scratch are quite easy that looks like this now note that there are two arrows in each of these",
    "start": "2450460",
    "end": "2458800"
  },
  {
    "text": "okay Arrow one Arrow two there are two arrows these are Arrow functions that",
    "start": "2458800",
    "end": "2464800"
  },
  {
    "text": "return another arrow function so yes this is curry does this have uses some",
    "start": "2464800",
    "end": "2470680"
  },
  {
    "text": "uh I sometimes throw things like this together to kind of save myself a little bit of um a little bit of code noise or",
    "start": "2470680",
    "end": "2478420"
  },
  {
    "text": "or maybe to make something look a bit more descriptive when I'm putting together a big chain of functions something like that let's add it uses",
    "start": "2478420",
    "end": "2483880"
  },
  {
    "text": "but unlike in the F sharp world we can't just arbitrarily then go and apply both",
    "start": "2483880",
    "end": "2489160"
  },
  {
    "text": "parameters we've got to strictly do them in order there is an alternative that's that's",
    "start": "2489160",
    "end": "2495579"
  },
  {
    "text": "more like what we call partial application which is roughly the same concept so this once again returning to Doctor Who I told you might be back",
    "start": "2495579",
    "end": "2501880"
  },
  {
    "text": "again yay um this is a really generic version",
    "start": "2501880",
    "end": "2507040"
  },
  {
    "text": "another a rather crude um uh parser for a csb where it was split",
    "start": "2507040",
    "end": "2513700"
  },
  {
    "text": "by by line first split Again by um by by field so by line will be new",
    "start": "2513700",
    "end": "2521380"
  },
  {
    "text": "line by field it'll be a comma like you see there um maybe do some trimming and selecting",
    "start": "2521380",
    "end": "2526660"
  },
  {
    "text": "and then of the array of arrays will then go through the whole lot and return one of the fields from it okay so it's",
    "start": "2526660",
    "end": "2533500"
  },
  {
    "text": "doing an awful lot of stuff that's that's a fairly complicated little function and I'm going to pass in um three parameters to make it happen a",
    "start": "2533500",
    "end": "2540460"
  },
  {
    "text": "string a car uh and an INT",
    "start": "2540460",
    "end": "2545160"
  },
  {
    "text": "if I wanted to do partial application I could use it like this so I'm using an extension method I'll",
    "start": "2545859",
    "end": "2551260"
  },
  {
    "text": "show you in a minute um called apply so apply means give me back a function which is the equivalent",
    "start": "2551260",
    "end": "2557440"
  },
  {
    "text": "of the original but with these parameters filled in so that is my kind of my carrying my partial application so",
    "start": "2557440",
    "end": "2563260"
  },
  {
    "text": "first off start with the original function and apply a new line and comma",
    "start": "2563260",
    "end": "2569380"
  },
  {
    "text": "so what I've now got here is something which will take a CSV content it will",
    "start": "2569380",
    "end": "2577420"
  },
  {
    "text": "split it by line it will split it by by column and then um it still requires you to tell me",
    "start": "2577420",
    "end": "2584200"
  },
  {
    "text": "first off which field do you want and then actually give me the string because I don't have it yet",
    "start": "2584200",
    "end": "2589359"
  },
  {
    "text": "then I could call it again I could I could partially apply this one and say I",
    "start": "2589359",
    "end": "2594460"
  },
  {
    "text": "want the zeroth field which is the story code because every doc two story has a story code so what I've now got is a",
    "start": "2594460",
    "end": "2600819"
  },
  {
    "text": "function which takes a string which is a csb and then does all of that business it splits it splits it and then gets the",
    "start": "2600819",
    "end": "2606760"
  },
  {
    "text": "zeroth item and here we can call the pars here and differently apply it give",
    "start": "2606760",
    "end": "2613540"
  },
  {
    "text": "it a one which now means I've got something that will take the CSV split it split it give me the story title so",
    "start": "2613540",
    "end": "2619599"
  },
  {
    "text": "I've created two different functions with an awful lot of functionality but I've actually only written one function",
    "start": "2619599",
    "end": "2625300"
  },
  {
    "text": "there's still only one pass function everything else is just kind of a",
    "start": "2625300",
    "end": "2631000"
  },
  {
    "text": "functional equivalent of trying to give it many ways to be used kind of like trying to turn into different shapes to",
    "start": "2631000",
    "end": "2637119"
  },
  {
    "text": "go in the different holes as it were now how do you actually do this Ah that's pretty ugly not gonna lie but",
    "start": "2637119",
    "end": "2644500"
  },
  {
    "text": "that's how you do it so uh once again this if you were to use this this is something you show up to",
    "start": "2644500",
    "end": "2650200"
  },
  {
    "text": "the back of your code base and try really hard to forget but this is roughly what it's done again two arrows",
    "start": "2650200",
    "end": "2655660"
  },
  {
    "text": "Arrow Arrow this is an arrow function returning another arrow function and it is taking the original Arrow function",
    "start": "2655660",
    "end": "2662140"
  },
  {
    "text": "now it'll only be possible to apply this to um funks because you cannot hang",
    "start": "2662140",
    "end": "2668260"
  },
  {
    "text": "um a function called can't have an extension method in C sharp so that's one limitation you'll have to take your",
    "start": "2668260",
    "end": "2674680"
  },
  {
    "text": "your function and store it in a funk somewhere and then having done that we call this and it Returns the new",
    "start": "2674680",
    "end": "2680260"
  },
  {
    "text": "function with some of the parameters coming from the new arrow that you're creating and some coming from the",
    "start": "2680260",
    "end": "2686020"
  },
  {
    "text": "original uh call which days sort of stored in in memory as a reference until such time as um uh you actually collapse",
    "start": "2686020",
    "end": "2694060"
  },
  {
    "text": "this into a value and the other problem here is you have to create one of these for every combination of variables going",
    "start": "2694060",
    "end": "2701680"
  },
  {
    "text": "out to variables uh coming in so you might have to write a lot of these none",
    "start": "2701680",
    "end": "2707260"
  },
  {
    "text": "of them are terribly complicated this won't take a lot of time to do but you'll have to create one version of this for everything you know five to one",
    "start": "2707260",
    "end": "2714220"
  },
  {
    "text": "five to two five to three and so on so if okay",
    "start": "2714220",
    "end": "2720520"
  },
  {
    "text": "so this is a typical flow in a in a functional function",
    "start": "2720520",
    "end": "2725560"
  },
  {
    "text": "start with one thing first opportunity you get split it into a list of things of some description uh this this is why",
    "start": "2725560",
    "end": "2731740"
  },
  {
    "text": "a lisp had its name it was the was it list processing language because functional works best when you have",
    "start": "2731740",
    "end": "2737380"
  },
  {
    "text": "turned something into an array else whatever and you are applying list based operations to it uh maybe do some",
    "start": "2737380",
    "end": "2743680"
  },
  {
    "text": "wearing maybe do some selecting to turn it into a different type and then finally this is the last bit aggregating",
    "start": "2743680",
    "end": "2750359"
  },
  {
    "text": "aggregating is the art of turning many things into one thing and this is the bit that probably tends",
    "start": "2750359",
    "end": "2757180"
  },
  {
    "text": "to loot a lot of folks uh when they're trying to move when they're when they're trying to move away from the object-oriented approaches well we have",
    "start": "2757180",
    "end": "2763780"
  },
  {
    "text": "a whole load built into C sharp already uh this is an example of what you would do in the old odd Victorian world to",
    "start": "2763780",
    "end": "2771880"
  },
  {
    "text": "um aggregate something you'd uh maybe I'll put a string builder in because I'm I've been doing this for a bit I know",
    "start": "2771880",
    "end": "2777460"
  },
  {
    "text": "about the don't and Pen strings in a loop thing if you don't know about that ask ask a friend and uh I'll loop around",
    "start": "2777460",
    "end": "2784480"
  },
  {
    "text": "append lines I also need to put an if in there to say well if it's the last one don't append uh a comma to uh and then",
    "start": "2784480",
    "end": "2792160"
  },
  {
    "text": "eventually we'll get a list of all the um all these story titles with a comma accepting on the last one and some new lines so super that's object oriented",
    "start": "2792160",
    "end": "2799180"
  },
  {
    "text": "code that's the functional version yeah be a little facetious here string.join if you don't know what",
    "start": "2799180",
    "end": "2805060"
  },
  {
    "text": "string dot would join use it today it's brilliant it's one of my favorite functions in the whole of C sharp but",
    "start": "2805060",
    "end": "2810099"
  },
  {
    "text": "yeah it gets around that problem of um how what do you do with the last item because this does all that for you",
    "start": "2810099",
    "end": "2815859"
  },
  {
    "text": "get the idea that is an example of aggregation but yeah the slightly more grown-up version of it uh so let's take",
    "start": "2815859",
    "end": "2822339"
  },
  {
    "text": "a list of um this is these are objects representing Doctor Who stories so I've",
    "start": "2822339",
    "end": "2827680"
  },
  {
    "text": "got my code my title my rating that's my personal rating of whether I liked it or not first dialect story is good the",
    "start": "2827680",
    "end": "2833440"
  },
  {
    "text": "sensor rights is terrible and you get the idea a number of episodes because in the old days Doctor Who was all serials",
    "start": "2833440",
    "end": "2839200"
  },
  {
    "text": "many episodes per story and the number of missing episodes because there are two date 97 missing episodes if any of",
    "start": "2839200",
    "end": "2845020"
  },
  {
    "text": "you have them I'd be awfully grateful if you'd if you'd hand them over especially if it's Fury from the deep I'd quite like to see that one",
    "start": "2845020",
    "end": "2851260"
  },
  {
    "text": "um but anyway and I want to put some sort of report together of comparing say number of episodes to number of missing",
    "start": "2851260",
    "end": "2857020"
  },
  {
    "text": "episodes per season now of course the sums sum is another",
    "start": "2857020",
    "end": "2862420"
  },
  {
    "text": "form of aggregation exists that's that's a link method some is good uh there's average which calls it average I think",
    "start": "2862420",
    "end": "2868720"
  },
  {
    "text": "is actually a mean because then like three kinds of averages or something like that but fine it exists I don't think there's a way to do mediums easily",
    "start": "2868720",
    "end": "2874119"
  },
  {
    "text": "in in C sharp uh that but this is the grown-up version",
    "start": "2874119",
    "end": "2879760"
  },
  {
    "text": "aggregate uh it was I am astonished by how many people don't know this exists but it's",
    "start": "2879760",
    "end": "2885760"
  },
  {
    "text": "been in C sharp since a very very long time it's it seems to be one of those great unknown things of C sharp almost",
    "start": "2885760",
    "end": "2891760"
  },
  {
    "text": "and I will carry on talking about it and until people's tell me that that this is old stuff now but this is brilliant",
    "start": "2891760",
    "end": "2898060"
  },
  {
    "text": "aggregate is incredible I use it a lot and what it means is",
    "start": "2898060",
    "end": "2903900"
  },
  {
    "text": "uh it's not unlike a select statement in that we apply it to an array or an",
    "start": "2903900",
    "end": "2909760"
  },
  {
    "text": "innumerable rather and it'll apply to each island to minute separately um but here we start with a starting",
    "start": "2909760",
    "end": "2915280"
  },
  {
    "text": "state I'm using a tuple uh of zero zero meaning uh the number of missing episodes in here and the number of",
    "start": "2915280",
    "end": "2921700"
  },
  {
    "text": "actual episodes here and then you give it a function after that the function is this is the running total so far and",
    "start": "2921700",
    "end": "2929980"
  },
  {
    "text": "this is the current item this is like your X in an actual select statement and this slot is give me a new running",
    "start": "2929980",
    "end": "2938020"
  },
  {
    "text": "total based on the old running total and the current item and then it'll apply that to every item in the entire",
    "start": "2938020",
    "end": "2944680"
  },
  {
    "text": "enumerable and then finally what you'll get is is literally just whatever the final version of this is so",
    "start": "2944680",
    "end": "2951280"
  },
  {
    "text": "the first time this runs it'll be zero zero so we'll go into here that zero zero that's the current item which is",
    "start": "2951280",
    "end": "2957900"
  },
  {
    "text": "Earthly child four episodes non-missing um so this will be zero and this will be",
    "start": "2957900",
    "end": "2964480"
  },
  {
    "text": "four so this will return a new Tuple of four zero then it'll execute again and",
    "start": "2964480",
    "end": "2969819"
  },
  {
    "text": "it'll be uh the Dalek seven episodes and I'm missing um which the current then this will be",
    "start": "2969819",
    "end": "2975760"
  },
  {
    "text": "four zero because it's already run once this will be seven zero you get the idea and so on and so forth all the way to",
    "start": "2975760",
    "end": "2981880"
  },
  {
    "text": "the end this is I think the last item I'm going",
    "start": "2981880",
    "end": "2988300"
  },
  {
    "text": "to introduce to you so this is something that I used to do quite a lot when I worked for an American company",
    "start": "2988300",
    "end": "2993819"
  },
  {
    "text": "um I I'm British as you can probably tell and um and as you guys probably",
    "start": "2993819",
    "end": "2998980"
  },
  {
    "text": "mostly know we do indeed talk about the weather an awful lot it is a thing that we do um and I would ask my American",
    "start": "2998980",
    "end": "3004260"
  },
  {
    "text": "colleagues what the weather is like and they would say that the temperature is 100 degrees outside and I think 100 degrees that's the boiling point of",
    "start": "3004260",
    "end": "3010800"
  },
  {
    "text": "water um my goodness that sounds quite serious uh but of course they're talking",
    "start": "3010800",
    "end": "3015839"
  },
  {
    "text": "Fahrenheit which is used by America and I use celsius which is used by everyone else",
    "start": "3015839",
    "end": "3021359"
  },
  {
    "text": "um and uh so the conversion is deduct 32 multiplied by 5 divided by nine",
    "start": "3021359",
    "end": "3026400"
  },
  {
    "text": "something of that sort of course it is so one point is I've got a series of operations here start with a thing do a",
    "start": "3026400",
    "end": "3032940"
  },
  {
    "text": "thing get the new value do another thing get a new value do another thing yeah",
    "start": "3032940",
    "end": "3038520"
  },
  {
    "text": "um it's like a relay race of operations one after the other now I could store these intermediate variables if I wanted",
    "start": "3038520",
    "end": "3044280"
  },
  {
    "text": "to make this more functional and that's great but then I've created all these intermediate variables",
    "start": "3044280",
    "end": "3049559"
  },
  {
    "text": "um and before any anyone points out yes you could all just put this one great big line but then I would have no demonstration so imagine swapping these",
    "start": "3049559",
    "end": "3058020"
  },
  {
    "text": "out for um some more complex operations I am keeping life simple by giving you this example but how could I do this in",
    "start": "3058020",
    "end": "3064680"
  },
  {
    "text": "a much better way well this is an object called identity here I've heard this called a few things",
    "start": "3064680",
    "end": "3071460"
  },
  {
    "text": "um it's an identity of type T this is a class and here we go it's got one property which is simply value",
    "start": "3071460",
    "end": "3078900"
  },
  {
    "text": "um you put a bit of syntactic sugar in here so you can just turn things into an identity or not or to be honest I often",
    "start": "3078900",
    "end": "3084180"
  },
  {
    "text": "just create extension methods and that's fine think of identity as thing in a box thing in the box that's all it is this",
    "start": "3084180",
    "end": "3091140"
  },
  {
    "text": "box got a thing and it's a t so it could be anything I don't know what it doesn't matter but it's a thing in a box",
    "start": "3091140",
    "end": "3097800"
  },
  {
    "text": "and there we go there's my extension method and I'll create a function hanging off it called bind her disc",
    "start": "3097800",
    "end": "3103319"
  },
  {
    "text": "called a few things too but bind is as good as anything for now and this is not unlike my map function from earlier",
    "start": "3103319",
    "end": "3110339"
  },
  {
    "text": "um and what this does is take a function which turns old thing to new thing most",
    "start": "3110339",
    "end": "3115380"
  },
  {
    "text": "of the time in that previous example I think it'd be decimals to decimals but it could be decimal to string oh who knows what it doesn't really matter but",
    "start": "3115380",
    "end": "3120839"
  },
  {
    "text": "thing to thing and so what this function does is take the old box pull the thing out do a thing to it pop",
    "start": "3120839",
    "end": "3128400"
  },
  {
    "text": "it in the new box send it off and then the next guy will do the exact same thing it's a relay race of of",
    "start": "3128400",
    "end": "3134880"
  },
  {
    "text": "functions each uh each person takes the old item does a thing passes it on and",
    "start": "3134880",
    "end": "3141839"
  },
  {
    "text": "each time it's a new box with the old one effectively chucked away the moment it was done because everything is",
    "start": "3141839",
    "end": "3147180"
  },
  {
    "text": "transitive in in functional and then what can end up with something like this now look there's my um there's my code",
    "start": "3147180",
    "end": "3153599"
  },
  {
    "text": "functions they're back see they have their uses um and so that looks pretty good no",
    "start": "3153599",
    "end": "3160140"
  },
  {
    "text": "intermediate variables everything is immutable each of those um values exists for a moment and it's",
    "start": "3160140",
    "end": "3166140"
  },
  {
    "text": "chucked away so that's great uh technically this will um probably maybe",
    "start": "3166140",
    "end": "3171599"
  },
  {
    "text": "have some Savings in one of those large complex object because it's basically chucked away the moment you've used it that's great so this is a simple example",
    "start": "3171599",
    "end": "3178559"
  },
  {
    "text": "of what's called a monad uh in case anyone ever felt they didn't know what they were there they are",
    "start": "3178559",
    "end": "3184859"
  },
  {
    "text": "don't be looking them upon Wikipedia by the way uh the technical definitions are really quite terrifying I've been doing",
    "start": "3184859",
    "end": "3191819"
  },
  {
    "text": "this for years and even I don't understand the technical definitions but you won't know what a monad is relay race take a thing do a thing pass it on",
    "start": "3191819",
    "end": "3199380"
  },
  {
    "text": "that's it it's a way of chaining functions there's a bit more to it but this is good enough I'm an engineer I",
    "start": "3199380",
    "end": "3205619"
  },
  {
    "text": "need an engineer's description so there is another form of monad",
    "start": "3205619",
    "end": "3211079"
  },
  {
    "text": "because there's a load of different monads for different purposes there's loads on I only use probably two or three because that's all I need at least",
    "start": "3211079",
    "end": "3218339"
  },
  {
    "text": "in the C sharp World Haskell's got a ton but I don't use Haskell I'm a C sharp developer um but this one's maybe now this is",
    "start": "3218339",
    "end": "3225599"
  },
  {
    "text": "similar to my previous one the identity one but there's a difference okay there's a difference",
    "start": "3225599",
    "end": "3231240"
  },
  {
    "text": "um first this deals with the problem of what if something explodes what if there's an error stuff like that it",
    "start": "3231240",
    "end": "3236940"
  },
  {
    "text": "deals with that problem for you so we've got some sort of get person function here which goes away maybe it does a",
    "start": "3236940",
    "end": "3244140"
  },
  {
    "text": "database operation doesn't really matter and what if that returns null well if",
    "start": "3244140",
    "end": "3249240"
  },
  {
    "text": "that return to null then on the existing system this this will just explode because null reference exception the the",
    "start": "3249240",
    "end": "3257099"
  },
  {
    "text": "so-called was it million dollar mistake um I I don't want that to explode I want",
    "start": "3257099",
    "end": "3263579"
  },
  {
    "text": "that to be handled I want the maybe the the the bind function to be smart and handle that problem and when each little",
    "start": "3263579",
    "end": "3270119"
  },
  {
    "text": "bind to be like a a safe environment to run the function but not be affected by it",
    "start": "3270119",
    "end": "3276240"
  },
  {
    "text": "so so this is another one of those places where I I know about dozen names for",
    "start": "3276240",
    "end": "3283200"
  },
  {
    "text": "this particular structure but I'm making an abstract class called maybe again it's a type T and it's got a value",
    "start": "3283200",
    "end": "3289020"
  },
  {
    "text": "meaning I've got a thing in a box just the same and I'll inherit of it twice once has",
    "start": "3289020",
    "end": "3296220"
  },
  {
    "text": "just I've also heard this called sum maybe I've also heard called option so you may hear different names",
    "start": "3296220",
    "end": "3302760"
  },
  {
    "text": "um and this means it works there was a thing the thing was taken in the",
    "start": "3302760",
    "end": "3308220"
  },
  {
    "text": "function was executed something was returned out it was good and this is nothing meaning didn't work it aired or",
    "start": "3308220",
    "end": "3316260"
  },
  {
    "text": "um a null came back or something but the point is that if it's a nothing it is nothing and I'm just going to replace",
    "start": "3316260",
    "end": "3321540"
  },
  {
    "text": "that with the default and there's my more complicated bind",
    "start": "3321540",
    "end": "3327240"
  },
  {
    "text": "so now I'll you do a switch to say okay look at the item you've just handed me",
    "start": "3327240",
    "end": "3332420"
  },
  {
    "text": "did it actually contain something as in was it a just store or something or",
    "start": "3332420",
    "end": "3338460"
  },
  {
    "text": "whatever uh was it not null if it was something and it was not null in that",
    "start": "3338460",
    "end": "3345660"
  },
  {
    "text": "case run the new function and then take the result put it in a new maybe box and",
    "start": "3345660",
    "end": "3351359"
  },
  {
    "text": "send it on its way all other circumstances result in just ain't gonna do a thing I'm just going to return to",
    "start": "3351359",
    "end": "3357780"
  },
  {
    "text": "nothing and if anything fails it'll also return to nothing if there's a it's a Catch catches",
    "start": "3357780",
    "end": "3364380"
  },
  {
    "text": "the best analogy to this I've ever read was on Scott blashian's website it's a very good website F-sharp Fun and Profit",
    "start": "3364380",
    "end": "3369780"
  },
  {
    "text": "it's not just refsharp developers there's a lot of good theory articles on there too um but he called it a railway orientated",
    "start": "3369780",
    "end": "3375599"
  },
  {
    "text": "architecture I believe and so the idea is that you've got two railway tracks running along like this and there's a",
    "start": "3375599",
    "end": "3381480"
  },
  {
    "text": "set of points each point is a function and then it'll execute each function and the top track is the the something the",
    "start": "3381480",
    "end": "3388079"
  },
  {
    "text": "happy path and if at any point something fails you switch tracks and then just Glides to the end without doing another",
    "start": "3388079",
    "end": "3395220"
  },
  {
    "text": "thing so if I just there we go if I blast back to this so in my example here so this is",
    "start": "3395220",
    "end": "3402780"
  },
  {
    "text": "now a maybe this bind will check the inside of the maybe it's something it is a personal ID what 12 whatever 12 means",
    "start": "3402780",
    "end": "3410180"
  },
  {
    "text": "and uh it'll then fair enough I will execute that function now the person two maybe it's a null or maybe it throws an",
    "start": "3410180",
    "end": "3417660"
  },
  {
    "text": "error who knows it doesn't matter what the point is it doesn't work in which case you'll get nothing back so this bind executes it has a look inside the",
    "start": "3417660",
    "end": "3424920"
  },
  {
    "text": "box and it says actually the type of this is a nothing I'm not going to do it so this function here is not executed",
    "start": "3424920",
    "end": "3434040"
  },
  {
    "text": "nor any of these what I get back is a null the last function that was executed was this one",
    "start": "3434040",
    "end": "3440940"
  },
  {
    "text": "so the whole concept of worrying about null checks and try catches goes away",
    "start": "3440940",
    "end": "3447420"
  },
  {
    "text": "it's now baked into the structure of this this binded maybe system",
    "start": "3447420",
    "end": "3453240"
  },
  {
    "text": "so basically no more errors anymore in theory I mean you could probably find",
    "start": "3453240",
    "end": "3458339"
  },
  {
    "text": "new and creative ways to add them in but it is an awful lot harder you're going to work for your errors this is an",
    "start": "3458339",
    "end": "3464220"
  },
  {
    "text": "alternative it's called either um it it's um again I've heard a few names but it",
    "start": "3464220",
    "end": "3469800"
  },
  {
    "text": "has a right and a left that's there so it's usually defined the the right is the the happy path the the right hand of",
    "start": "3469800",
    "end": "3475619"
  },
  {
    "text": "Justice or whatever and the left the left hand of Darkness the left hand of evil as it often is in many cultures is",
    "start": "3475619",
    "end": "3481740"
  },
  {
    "text": "is where it didn't work so in my case I'm just giving it radically different things so I'm saying there's a value here and here there's uh nothing a",
    "start": "3481740",
    "end": "3487800"
  },
  {
    "text": "default and I'm actually capturing the exception so in the case of this one when I get to the end of my chain of",
    "start": "3487800",
    "end": "3494520"
  },
  {
    "text": "functions I can examine it and then not only do I have a check already baked in",
    "start": "3494520",
    "end": "3500520"
  },
  {
    "text": "to say did it work or not but if it didn't I'll actually catch the exception and I can display that to screen or log",
    "start": "3500520",
    "end": "3508380"
  },
  {
    "text": "it or whatever I need to do but I haven't actually broken the order of operations you've slightly modified two either now",
    "start": "3508380",
    "end": "3516119"
  },
  {
    "text": "in in production to be honest I tend to merge these two together so I create like a three-state uh monad which isn't",
    "start": "3516119",
    "end": "3523859"
  },
  {
    "text": "exactly strict functional um uh Theory but it works for me so I have",
    "start": "3523859",
    "end": "3531059"
  },
  {
    "text": "like something nothing error because those are the three states I tend to always need to check after every",
    "start": "3531059",
    "end": "3536579"
  },
  {
    "text": "operation did it work did I get something did it throw an error and that means I just do a switch operation",
    "start": "3536579",
    "end": "3543359"
  },
  {
    "text": "afterwards to collapse that possible three-state thing into a one-state thing it's like it's like shreddinger's object",
    "start": "3543359",
    "end": "3549480"
  },
  {
    "text": "you get this box uh there might be a dead cat or it might not be a dead cat but you can check but only at the moment",
    "start": "3549480",
    "end": "3557280"
  },
  {
    "text": "you check does it matter otherwise you can simply pass it on without opening it so are there any libraries which exist",
    "start": "3557280",
    "end": "3565020"
  },
  {
    "text": "in nuget for doing functional yes there are language X is probably the largest and most mature of all of them",
    "start": "3565020",
    "end": "3571619"
  },
  {
    "text": "um language X is a is a good one if you if you want to now personally I don't use it it's not because it's not good I",
    "start": "3571619",
    "end": "3578040"
  },
  {
    "text": "think it is good but I think that it's so simple to write your own that largely that's what I do",
    "start": "3578040",
    "end": "3584160"
  },
  {
    "text": "and also it's good for learning the theory which again is what I like to do so I can personalize to exactly my taste",
    "start": "3584160",
    "end": "3590880"
  },
  {
    "text": "but if if you just want to use language X go for it more power to you there is nothing wrong with it there are others",
    "start": "3590880",
    "end": "3596700"
  },
  {
    "text": "but this is the main one probably and that's what the language X version of Sir of my monad looks like except it",
    "start": "3596700",
    "end": "3604140"
  },
  {
    "text": "calls it map instead of bind well strictly speaking map and bind to different things which they they actually respect inside language x i i",
    "start": "3604140",
    "end": "3610740"
  },
  {
    "text": "kind of ignore the difference difference but when I'm not going too deep into Theory",
    "start": "3610740",
    "end": "3616799"
  },
  {
    "text": "finally further material there is an excellent book by Enrico buenano published by",
    "start": "3616799",
    "end": "3624839"
  },
  {
    "text": "Manning it's in the second edition now this is an excellent book um that's functional programming and C",
    "start": "3624839",
    "end": "3630000"
  },
  {
    "text": "sharp that was one of the things that put me down this path originally um there are there is a talk there is",
    "start": "3630000",
    "end": "3635579"
  },
  {
    "text": "one by pacts by I hope I'm saying this right Vishnu angoro um uh one day he'll be in the audience",
    "start": "3635579",
    "end": "3641640"
  },
  {
    "text": "he'll be like chucking stuff up he said no it's nothing to say my name but I I hope it's not too bad but uh",
    "start": "3641640",
    "end": "3647280"
  },
  {
    "text": "that's that's pretty good although I like the the one I know book is is really quite excellent there is a talk which is actually what the first",
    "start": "3647280",
    "end": "3653520"
  },
  {
    "text": "introduction I ever got to functional programming by Kathleen dollar uh that was done at NDC Oslo many years ago it's still on YouTube if you were to be able",
    "start": "3653520",
    "end": "3659940"
  },
  {
    "text": "to do magic and turn the camera around on that video you'd see me stir gorping with uh uh or the nice talk there are a",
    "start": "3659940",
    "end": "3668040"
  },
  {
    "text": "couple of pluralsight talks and there is Scott lashen's website which I do recommend even if you don't plan to do F-sharp and and then learn your Haskell",
    "start": "3668040",
    "end": "3675119"
  },
  {
    "text": "for great good I mean yes if you want to go all the way uh you can sure you pick a pascal and also as my book I have a",
    "start": "3675119",
    "end": "3681720"
  },
  {
    "text": "book uh yay my book um it's not quite as as probably not as",
    "start": "3681720",
    "end": "3688260"
  },
  {
    "text": "as in-depth and pure to the functional Paradigm as the uh the buenano book is which is an excellent book still I I I'm",
    "start": "3688260",
    "end": "3694380"
  },
  {
    "text": "more the the Silly Fun Uncle of the programming world and it is full of terrible dad jokes I'm just warning you",
    "start": "3694380",
    "end": "3699780"
  },
  {
    "text": "I keep expecting the editors to take them out and they're not doing it so I'll keep putting them in",
    "start": "3699780",
    "end": "3705180"
  },
  {
    "text": "so that is not incidentally my animal uh I don't know what the animal's gonna be apparently there is a secret cabal of",
    "start": "3705180",
    "end": "3710940"
  },
  {
    "text": "animal choosers somewhere deep in the dark depths of O'Reilly and they will descend from on high when it's",
    "start": "3710940",
    "end": "3717660"
  },
  {
    "text": "publication day and then I will know my animal and knowing my luck it'll probably be something repulsive like a naked mole rat or something but I I will",
    "start": "3717660",
    "end": "3725040"
  },
  {
    "text": "I will cope with whatever I get uh this um barcode by the way O'Reilly gave me that um it'll give you I think some",
    "start": "3725040",
    "end": "3730500"
  },
  {
    "text": "months free on there on their website so the pre-release version is available there's nine chapters of the book I",
    "start": "3730500",
    "end": "3736799"
  },
  {
    "text": "think available on there at the present um I'm currently writing chapter 13. so yeah it's fresh it's thought to be",
    "start": "3736799",
    "end": "3743760"
  },
  {
    "text": "coming out probably in the summer um although probably the only people ever buy it'll be like my parents and",
    "start": "3743760",
    "end": "3749760"
  },
  {
    "text": "anyone that I um give a 20 pound note to take a copy from me but still if you're",
    "start": "3749760",
    "end": "3754799"
  },
  {
    "text": "interested there's my book oh I can take a short breathe does",
    "start": "3754799",
    "end": "3760799"
  },
  {
    "text": "anyone have any questions at this point odd silence",
    "start": "3760799",
    "end": "3767099"
  },
  {
    "text": "not sure if good or bad",
    "start": "3767099",
    "end": "3770359"
  },
  {
    "text": "okay memory management you're curious about how I deal with memory management okay so there is",
    "start": "3772380",
    "end": "3777900"
  },
  {
    "text": "um there is a widely held opinion that functional programming is not good on memory management it tends to use more memory that is not itself is true",
    "start": "3777900",
    "end": "3784319"
  },
  {
    "text": "functional programming does use more memory compared to object-oriented Alternatives",
    "start": "3784319",
    "end": "3789660"
  },
  {
    "text": "um if if memory usage and speed are your absolute main 100 priority you probably",
    "start": "3789660",
    "end": "3797339"
  },
  {
    "text": "don't want to do this because you know like an object oriented code is always going",
    "start": "3797339",
    "end": "3804000"
  },
  {
    "text": "to be slightly faster and slightly more memory efficient generally speaking but the difference isn't that much most of",
    "start": "3804000",
    "end": "3810720"
  },
  {
    "text": "the time I've done a whole load of checks and if you compare how long the function",
    "start": "3810720",
    "end": "3815760"
  },
  {
    "text": "runs object orientated compared to functional uh it's it's like there's a",
    "start": "3815760",
    "end": "3820920"
  },
  {
    "text": "bit of difference but then you throw in something like a file read it's like this much difference",
    "start": "3820920",
    "end": "3826380"
  },
  {
    "text": "so the difference gen for most cases is insignificant compared to the problems",
    "start": "3826380",
    "end": "3831599"
  },
  {
    "text": "of read a file or go away over and do an HTTP request",
    "start": "3831599",
    "end": "3836599"
  },
  {
    "text": "very large amount of data you can use like generators so you'll need to have like a little piece of ground",
    "start": "3838099",
    "end": "3844859"
  },
  {
    "text": "okay generate okay with python you have generators and I'm afraid I'm not familiar with those uh",
    "start": "3844859",
    "end": "3852420"
  },
  {
    "text": "okay lazy okay well effectively okay it's gonna instantiate something in a",
    "start": "3854240",
    "end": "3859380"
  },
  {
    "text": "lazy manner we can't I mean innumerables have that of course let enumerables are lazy I'm not sure how much else we can",
    "start": "3859380",
    "end": "3864839"
  },
  {
    "text": "do in the I mean we are still constrained by the limits of the c-sharp language so on this I'm going to have to plead ignorance but um the only thing I",
    "start": "3864839",
    "end": "3872819"
  },
  {
    "text": "would say though is avoid recursion I do joke about recursion but yeah it's not a joke that stuff's horrible",
    "start": "3872819",
    "end": "3878700"
  },
  {
    "text": "um it'll explode fast in in the c-sharp world but um f sharp you can actually do",
    "start": "3878700",
    "end": "3885000"
  },
  {
    "text": "recursion safely it has something in place which if you look in the intermediate languages uh hidden while loop but",
    "start": "3885000",
    "end": "3891000"
  },
  {
    "text": "um basically but no I'm afraid I I wish I could provide you with more than that but um",
    "start": "3891000",
    "end": "3896099"
  },
  {
    "text": "uh but no I I I don't know I'm not I'll look into generators and maybe I'll I'll",
    "start": "3896099",
    "end": "3901260"
  },
  {
    "text": "write something up on that sure sure yeah does anyone else does anyone else have",
    "start": "3901260",
    "end": "3907680"
  },
  {
    "text": "any further question oh I have two sir",
    "start": "3907680",
    "end": "3912839"
  },
  {
    "text": "uh I noticed you were using X unit is that more friendly no X unit so I was",
    "start": "3912839",
    "end": "3918780"
  },
  {
    "text": "using X unit yes uh no not particularly I just like it uh I just happen to like X unit that's that's just a preference",
    "start": "3918780",
    "end": "3925319"
  },
  {
    "text": "uh I also quite like fluent Expressions uh the fluid assertion sorry fluid assertions just like it it looks",
    "start": "3925319",
    "end": "3932339"
  },
  {
    "text": "friendly no it's got nothing to do with functional not functional that's just what I like to use",
    "start": "3932339",
    "end": "3937380"
  },
  {
    "text": "so",
    "start": "3937380",
    "end": "3940380"
  },
  {
    "text": "okay how much are you talking about a null co-listing so in how do I balance",
    "start": "3952079",
    "end": "3957299"
  },
  {
    "text": "um null coalescing with full monads well this is where you get more into the art than the science of these things but uh",
    "start": "3957299",
    "end": "3964079"
  },
  {
    "text": "if it's if it's really simple then I'd probably just throw a quick null coalesce if if there's any number of",
    "start": "3964079",
    "end": "3969420"
  },
  {
    "text": "operations whatsoever Full Moon ads it is I have a little bit of a preference to be honest for literally writing",
    "start": "3969420",
    "end": "3974640"
  },
  {
    "text": "everything as an arrow function and never putting a body on any function ever but probably people at my work",
    "start": "3974640",
    "end": "3980280"
  },
  {
    "text": "would just throw things at me if I tried doing that so uh go and have a look at my answers to the adventure code if you",
    "start": "3980280",
    "end": "3986520"
  },
  {
    "text": "want to see me going all 100 as far as I can go but uh yeah that's my rough rule of thumb it's simple no Co less more",
    "start": "3986520",
    "end": "3993000"
  },
  {
    "text": "than that moan as it is or if there's any possibility of an exception happening if there's a chance it might",
    "start": "3993000",
    "end": "3998760"
  },
  {
    "text": "throw then we're going back into the monad because the monad's like a nice safe environment to let things explode",
    "start": "3998760",
    "end": "4003920"
  },
  {
    "text": "isn't it so if I'm doing a database operation and usually most of my return types in my uh on my any database",
    "start": "4003920",
    "end": "4010819"
  },
  {
    "text": "operations is actually usually maybe or whatever it is maybe even you it's awful when you get into async it's like May uh",
    "start": "4010819",
    "end": "4017059"
  },
  {
    "text": "May task of maybe of a new of donkeys or whatever but still it does",
    "start": "4017059",
    "end": "4024740"
  },
  {
    "text": "we all know what that does it's sort of unwrapping I've done wrap one at a time though but anymore for any more",
    "start": "4024740",
    "end": "4032420"
  },
  {
    "text": "going once go oh there we",
    "start": "4032420",
    "end": "4037780"
  },
  {
    "text": "do I use any other container mode ads in fact uh as I say I actually use one which is kind of a mix of maybe and",
    "start": "4042020",
    "end": "4047960"
  },
  {
    "text": "option or uh either uh so minus three states as I say uh the the something the",
    "start": "4047960",
    "end": "4055819"
  },
  {
    "text": "nothing and the error which is not strict functional um Paradigm correct but it works and it",
    "start": "4055819",
    "end": "4063020"
  },
  {
    "text": "does everything I want to do so by and large I use that I have been known to use a reader",
    "start": "4063020",
    "end": "4068660"
  },
  {
    "text": "um but I don't even use that very often to be honest largely an estate moan I'd",
    "start": "4068660",
    "end": "4075319"
  },
  {
    "text": "have used those once or twice lordly though my little my funky uh jury rigged three-state monad is the one I use",
    "start": "4075319",
    "end": "4081680"
  },
  {
    "text": "so um I I got all that in the book if you're interested I'll have a chat with me afterwards but uh yeah any more for",
    "start": "4081680",
    "end": "4088700"
  },
  {
    "text": "any more so validations",
    "start": "4088700",
    "end": "4094700"
  },
  {
    "text": "uh the the fluent um yeah the validation put your mind of",
    "start": "4094720",
    "end": "4100100"
  },
  {
    "text": "fluid validations would I recommend that I haven't actually used that myself but I think it's the same guys that use fluent expression affluent assertions",
    "start": "4100100",
    "end": "4106338"
  },
  {
    "text": "and I know people who use that and love it I actually know before they brought that out I actually had a colleague who",
    "start": "4106339",
    "end": "4112940"
  },
  {
    "text": "tried wanted to use fluent assertions in production code because he loved it that much and until everyone started throwing",
    "start": "4112940",
    "end": "4119540"
  },
  {
    "text": "their shoes at him but um yes I definitely would I probably should pick that up myself and it's probably just",
    "start": "4119540",
    "end": "4124818"
  },
  {
    "text": "sheer laziness I haven't but yeah absolutely fluent assertions is lovely and by extension also uh yeah we're",
    "start": "4124819",
    "end": "4132620"
  },
  {
    "text": "starting to lose people now but I'm still happy to take questions anyone else got any questions",
    "start": "4132620",
    "end": "4138140"
  },
  {
    "text": "going once going twice death solved thank you very much",
    "start": "4138140",
    "end": "4145239"
  }
]