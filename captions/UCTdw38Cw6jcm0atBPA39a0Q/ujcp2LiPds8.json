[
  {
    "text": "all right let's do this welcome everyone it's the session right after lunch so",
    "start": "9740",
    "end": "15440"
  },
  {
    "text": "it's usually when everyone doses off a little bit so I hope that's not gonna be the case in this session for those of",
    "start": "15440",
    "end": "21349"
  },
  {
    "text": "you who are who are here to learn about building micro services within an IDE",
    "start": "21349",
    "end": "26419"
  },
  {
    "text": "I'm afraid I will have to disappoint you if you are here to learn about how at",
    "start": "26419",
    "end": "31520"
  },
  {
    "text": "JetBrains we have built writer using a micro Services technique then you're in the right place and welcome so I'm",
    "start": "31520",
    "end": "38840"
  },
  {
    "text": "Martin I work at JetBrains and basically on resharper and writer and so on and I",
    "start": "38840",
    "end": "44480"
  },
  {
    "text": "really want to give you some insights into how we have built writer and why we have built it the way we have built it",
    "start": "44480",
    "end": "50660"
  },
  {
    "text": "over the past years so just a quick show of hands any one of you is currently using writer alright a lot of hands",
    "start": "50660",
    "end": "58219"
  },
  {
    "text": "thank you for those who you haven't ever seen writer before I'll give you a quick",
    "start": "58219",
    "end": "63350"
  },
  {
    "text": "demo of what it looks like the idea is not to go too deep into what it can do but just to give you a feel of what it",
    "start": "63350",
    "end": "69260"
  },
  {
    "text": "looks like and what is there so we have on the Left we have a solution Explorer",
    "start": "69260",
    "end": "74560"
  },
  {
    "text": "obviously you can select files you can navigate to wherever you want to navigate so let's navigate to our",
    "start": "74560",
    "end": "80090"
  },
  {
    "text": "ilogger interface we can go back and forth we can write code we get inspections and so on we have version",
    "start": "80090",
    "end": "87110"
  },
  {
    "text": "control a new get to window we have a database connection so you can look at your tables you can look at all of the",
    "start": "87110",
    "end": "92990"
  },
  {
    "text": "different columns that are in there and so on but all of this is built into technology studnets and the JVM so Java",
    "start": "92990",
    "end": "101180"
  },
  {
    "text": "and cotton as a language and it's really fluent it works well and I want to",
    "start": "101180",
    "end": "106670"
  },
  {
    "text": "quickly show you how it's built so writer is a cross-platform full stack",
    "start": "106670",
    "end": "112369"
  },
  {
    "text": "net IDE so it does a lot of things it does wind forms it does asp.net MVC it does typescript HTML unity wind forms",
    "start": "112369",
    "end": "120109"
  },
  {
    "text": "whatever you want it to do on fold up nets on mono on dotnet core pretty much every version of.net core it's",
    "start": "120109",
    "end": "126770"
  },
  {
    "text": "lightweight and and fast but it is a complete ID so you get all of the inspections you get all of the code",
    "start": "126770",
    "end": "132830"
  },
  {
    "text": "completion and refactorings and so on that are in there all of that is in there because resharper is actually in",
    "start": "132830",
    "end": "139640"
  },
  {
    "text": "there so for those of you are using resharper writer is in fact Harper with the UI on top that is not",
    "start": "139640",
    "end": "145209"
  },
  {
    "text": "Visual Studio there's lots of plugins available as well because the front-end we have built is really IntelliJ and all",
    "start": "145209",
    "end": "151659"
  },
  {
    "text": "of those plugins are available in writer as well and for those of you who want to try it there's a trial available on on",
    "start": "151659",
    "end": "157989"
  },
  {
    "text": "the websites now just want to give you a quick view of the history of JetBrains as a company so we were founded in 2000",
    "start": "157989",
    "end": "165370"
  },
  {
    "text": "in Prague and we started off with one project or one product called IntelliJ renamer anyone who has ever used that",
    "start": "165370",
    "end": "172689"
  },
  {
    "text": "thing before because if you have I would love to get my hands on an actual binary of that thing to just look at how what",
    "start": "172689",
    "end": "179889"
  },
  {
    "text": "it looks like because that thing was basically just one form that allowed you to point to a file in your codebase and",
    "start": "179889",
    "end": "187510"
  },
  {
    "text": "you could rename that file it would figure out what all the references were and update all that so basically the",
    "start": "187510",
    "end": "192519"
  },
  {
    "text": "rename refactoring as a standalone tool in 2001 we decided okay maybe that",
    "start": "192519",
    "end": "197919"
  },
  {
    "text": "standalone tool is not enough maybe we have to build a full IDE and that became IntelliJ now you see three years after",
    "start": "197919",
    "end": "204579"
  },
  {
    "text": "IntelliJ we also started building resharper so a tool for dotnet the reason for that is really eclipse in",
    "start": "204579",
    "end": "212340"
  },
  {
    "text": "2004 Eclipse came about as well as a competitive a competitor to IntelliJ as",
    "start": "212340",
    "end": "218590"
  },
  {
    "text": "a Java IDE and we decided ok maybe we need something else that is not JVM that",
    "start": "218590",
    "end": "224319"
  },
  {
    "text": "is not Java and maybe we want to have an actual nets thing as well fast forward",
    "start": "224319",
    "end": "229540"
  },
  {
    "text": "to today we have more than 20 IDs but all of them are roughly built on top of IntelliJ so all of that history is there",
    "start": "229540",
    "end": "237040"
  },
  {
    "text": "and we've built on top of that history now anyone has ever used resharper in in",
    "start": "237040",
    "end": "242979"
  },
  {
    "text": "their early days anyone seen this one yeah a couple of people apparently so",
    "start": "242979",
    "end": "249849"
  },
  {
    "text": "this was resharper in fact when we first start building resharper we weren't yet",
    "start": "249849",
    "end": "255370"
  },
  {
    "text": "sure whether first of all Visual Studio was gonna take off whether we should build a plug-in to Visual Studio or",
    "start": "255370",
    "end": "261820"
  },
  {
    "text": "built our own ID so he basically bet on two horses and we built it both as a plugin as well as a standalone ID so",
    "start": "261820",
    "end": "269380"
  },
  {
    "text": "this is resharper I think version 2.0 because 1.0 really never saw the light",
    "start": "269380",
    "end": "274930"
  },
  {
    "text": "of day but we built this entire thing in wind form so you see a nice solution Explorer on the left you see all of the",
    "start": "274930",
    "end": "280750"
  },
  {
    "text": "classes and namespaces and so on in that dotnet assembly you see the code you can navigate to code there's a rich in",
    "start": "280750",
    "end": "287530"
  },
  {
    "text": "editor summaries and and information about the code that you are writing there's find usages at the bottom so it",
    "start": "287530",
    "end": "294730"
  },
  {
    "text": "could actually navigate through that code base as well so a lot of the things that you see in writer today that you",
    "start": "294730",
    "end": "300310"
  },
  {
    "text": "see in Visual Studio and and resharper today are still based on what we built in in this resharper 2.0 now that",
    "start": "300310",
    "end": "308470"
  },
  {
    "text": "resharper ide indians never really saw the light of day apart from some preview versions because we thought okay maybe",
    "start": "308470",
    "end": "315580"
  },
  {
    "text": "building a plug-in to Visual Studio is probably the right way to go with resharper's so we held that the project",
    "start": "315580",
    "end": "321010"
  },
  {
    "text": "of building that standalone IDE for doughnuts but several concepts and part",
    "start": "321010",
    "end": "326500"
  },
  {
    "text": "of the architecture remains so to find usages we know that you saw in there that's still roughly the same codebase",
    "start": "326500",
    "end": "331720"
  },
  {
    "text": "or at least roughly the same techniques as the one that we currently have in resharper also we kept the fact that we",
    "start": "331720",
    "end": "339910"
  },
  {
    "text": "bet on two horses so that we could build a plug-in as well as a standalone IDE we kept that around and we basically made",
    "start": "339910",
    "end": "346600"
  },
  {
    "text": "that a competitive strength for us because we could now plug in to Visual",
    "start": "346600",
    "end": "351790"
  },
  {
    "text": "Studio 2010 still today 2013 2015 and so on because we had that abstraction",
    "start": "351790",
    "end": "358240"
  },
  {
    "text": "between having a plug-in as well as having a full ID so we wrote the necessary things to make that abstract",
    "start": "358240",
    "end": "364780"
  },
  {
    "text": "and and work we also have resharper command-line tools so resharper if you want to use this on your build server",
    "start": "364780",
    "end": "370660"
  },
  {
    "text": "for example and run a code cleanup from the command line you can do that that's the exact same engine but it's just a",
    "start": "370660",
    "end": "377290"
  },
  {
    "text": "different interface on top of that resharper core that we have in there so it hasn't gone to waste",
    "start": "377290",
    "end": "383320"
  },
  {
    "text": "but we kept a lot of the techniques in there that are available now we have",
    "start": "383320",
    "end": "388480"
  },
  {
    "text": "boots at conferences I even think this is NEC London and at boots a lot of",
    "start": "388480",
    "end": "393520"
  },
  {
    "text": "people over the past years came to us and asked when will JetBrains come with their own net IDE so that I can actually",
    "start": "393520",
    "end": "399670"
  },
  {
    "text": "use a JetBrains ID instead of having to have this plugin into Visual Studio for",
    "start": "399670",
    "end": "405520"
  },
  {
    "text": "years ago with it and then everyone said why did you build your own idea",
    "start": "405520",
    "end": "411360"
  },
  {
    "text": "but still we did the first reason was people were asking for it second reason was Ruslan came about",
    "start": "411360",
    "end": "418000"
  },
  {
    "text": "Visual Studio became bigger and bigger and Visual Studio is a 32-bit process and we have some constraints there even",
    "start": "418000",
    "end": "424960"
  },
  {
    "text": "if you have 64 gigabytes of RAM in your machine you only basically gets like 2 gigabytes of memory out of Visual Studio",
    "start": "424960",
    "end": "431320"
  },
  {
    "text": "and that's all we have Rossellini's in there Visual Studio is in there we are in there and roughly everyone is",
    "start": "431320",
    "end": "437170"
  },
  {
    "text": "competing for that limited amount of memory so we decided ok let's see if we can take resharper out of that thing use",
    "start": "437170",
    "end": "444520"
  },
  {
    "text": "it as a 64-bit process and basically have our own engine running as a faster thing so that's one of the reasons also",
    "start": "444520",
    "end": "451330"
  },
  {
    "text": "a lot of changes in visual studio started impacting resharper I think at some point lightweight solution load was",
    "start": "451330",
    "end": "457690"
  },
  {
    "text": "introduced and the global that JSON file and so on and those were pretty invasive changes and we had to respond to those",
    "start": "457690",
    "end": "463690"
  },
  {
    "text": "even though we didn't really know whether that was gonna have some take up or not so we had to adapt resharper to",
    "start": "463690",
    "end": "469570"
  },
  {
    "text": "those things as well and we wanted to sort of isolate ourselves from a lot of changes there also dotnet core happens",
    "start": "469570",
    "end": "476410"
  },
  {
    "text": "we saw that dotnet core parently ran on Linux and on Mac OS and and so on and",
    "start": "476410",
    "end": "481660"
  },
  {
    "text": "the only alternative back then was probably monodevelop I don't know if anyone has used it at that time it's",
    "start": "481660",
    "end": "488560"
  },
  {
    "text": "it's a proper IDE but it's not resharper it's not Visual Studio as such so we",
    "start": "488560",
    "end": "493780"
  },
  {
    "text": "decided ok maybe there's a space for us with a separate IDE that runs cross-platform that runs on Linux Mac",
    "start": "493780",
    "end": "500500"
  },
  {
    "text": "and Windows now the problem is if you want to run cross-platform it's fairly easy if you",
    "start": "500500",
    "end": "506950"
  },
  {
    "text": "have like that back-end that runs as a command-line tool and you want to port that to dotnet core and have it run on Linux or Mac OSX or whatever you could",
    "start": "506950",
    "end": "514780"
  },
  {
    "text": "use mono or dotnet core or whatever you want but you also need a UI toolkit if we have resharper and you have a rename",
    "start": "514780",
    "end": "521800"
  },
  {
    "text": "refactoring where you see UI where you can enter a new name and refactor whatever you want to refactor there you",
    "start": "521800",
    "end": "527050"
  },
  {
    "text": "need UI elements you need to visualize whatever you want to do there in your IDE so we thought ok well what's the",
    "start": "527050",
    "end": "534640"
  },
  {
    "text": "cross platform story that we can do in terms of UI because resharper is built mostly in wind forms and WPF and that's",
    "start": "534640",
    "end": "541330"
  },
  {
    "text": "not really cross-platform so we looked at yeah how could we maybe rebuild our UI",
    "start": "541330",
    "end": "546730"
  },
  {
    "text": "could reuse wind forms on mono maybe could we use jtq sharp which can pass",
    "start": "546730",
    "end": "552610"
  },
  {
    "text": "the windows and to Linux and Mac maybe QT and so on but we decided okay maybe",
    "start": "552610",
    "end": "557710"
  },
  {
    "text": "this is not the best thing because we would have to rebuild everything that is in resharper in terms of UI plus",
    "start": "557710",
    "end": "563560"
  },
  {
    "text": "everything that consists that you want to have any UI in in an IDE UI so a",
    "start": "563560",
    "end": "569650"
  },
  {
    "text": "solution Explorer an editor and so on which we were currently reusing from Visual Studio right so we started",
    "start": "569650",
    "end": "577510"
  },
  {
    "text": "thinking and we thought okay we have this IDE IntelliJ and all of our other",
    "start": "577510",
    "end": "582940"
  },
  {
    "text": "IDs are built on top of IntelliJ which is the platform which has an editor and so on so why not maybe we use that to",
    "start": "582940",
    "end": "590920"
  },
  {
    "text": "have it work with resharper so we decided okay let's look into our own IntelliJ platform which is that shared",
    "start": "590920",
    "end": "598690"
  },
  {
    "text": "core between all the IDs we have because that thing already has a UI is crud",
    "start": "598690",
    "end": "603910"
  },
  {
    "text": "cross-platform because it's written on the JVM it has a project view it has a",
    "start": "603910",
    "end": "609280"
  },
  {
    "text": "source control plug-in it has a terminal it has plug-in systems and so on and we",
    "start": "609280",
    "end": "614680"
  },
  {
    "text": "have been successfully building other IDs on top of that thing and others have as well if you use Android studio for",
    "start": "614680",
    "end": "620920"
  },
  {
    "text": "example that thing is built on top of the IntelliJ platform open source project that exists I don't there's",
    "start": "620920",
    "end": "627910"
  },
  {
    "text": "there's a pearl IDE as well around which is also built on top of IntelliJ and if you want to build your own IDE you can",
    "start": "627910",
    "end": "634840"
  },
  {
    "text": "actually do that if you want so we thought okay let's reuse this it's cross-platform",
    "start": "634840",
    "end": "640240"
  },
  {
    "text": "runs on the JVM so let's let's look into that now IntelliJ has all those standard",
    "start": "640240",
    "end": "646840"
  },
  {
    "text": "components like an editor and and the view one on a project and a file system and so on but it's JVM whereas resharper",
    "start": "646840",
    "end": "654250"
  },
  {
    "text": "on the other hand is everything that we have for not Nets but it's written in dog nets how could we marry that JVM",
    "start": "654250",
    "end": "661540"
  },
  {
    "text": "process with that dotnet process how could we bring those two together so we",
    "start": "661540",
    "end": "666910"
  },
  {
    "text": "thought of some options one option could be to maybe rewrite resharper in Java so",
    "start": "666910",
    "end": "672460"
  },
  {
    "text": "that we could plug it into IntelliJ and run it all as a JVM thing we quickly decide that",
    "start": "672460",
    "end": "677790"
  },
  {
    "text": "was probably not gonna work because resharper has been around for 15 years and you all know the big rewrite it's",
    "start": "677790",
    "end": "683790"
  },
  {
    "text": "never gonna work so we decided okay let's maybe not rewrite this thing in a different technology let's maybe look at",
    "start": "683790",
    "end": "690510"
  },
  {
    "text": "an automatic conversion I mean c-sharp looks a bit like Java",
    "start": "690510",
    "end": "695610"
  },
  {
    "text": "maybe we can convert everything and automatically transpile into Java and do something there we also taught that's",
    "start": "695610",
    "end": "701730"
  },
  {
    "text": "pretty insane so we decided not to go with that now we look back and we have",
    "start": "701730",
    "end": "708210"
  },
  {
    "text": "those command-line tools for resharper as well so we thought ok what if we run resharper as a process headless and have",
    "start": "708210",
    "end": "716310"
  },
  {
    "text": "IntelliJ as a thin UI on top communicating with that process and basically getting the information we",
    "start": "716310",
    "end": "722700"
  },
  {
    "text": "want from resharper and working with that resharper process in there so we thought yeah that's that's a good idea we just need our own UI on top and just",
    "start": "722700",
    "end": "730980"
  },
  {
    "text": "need our own UI on top it turned out to be more complex than we thought but still we ventured on that Avenue so",
    "start": "730980",
    "end": "738720"
  },
  {
    "text": "headless resharper as a language server which would be easy because it's all dotnet we could run it on nets on",
    "start": "738720",
    "end": "744960"
  },
  {
    "text": "windows and we could use mono on Linux and Mac no real constraints because it is resharper we could reuse everything",
    "start": "744960",
    "end": "751800"
  },
  {
    "text": "and we could have two projects based on one code base which was resharper and then have IntelliJ as a thin UI on top",
    "start": "751800",
    "end": "758730"
  },
  {
    "text": "now the problem is is IntelliJ really thin UI because that is a real IDE it",
    "start": "758730",
    "end": "765750"
  },
  {
    "text": "powers Java developers it powers Kaplan developers we have phpstorm which which powers PHP developers it is an actual",
    "start": "765750",
    "end": "772740"
  },
  {
    "text": "IDE we have the concept of navigation in there we have a concept of a solution structure in there as well resharper on",
    "start": "772740",
    "end": "779850"
  },
  {
    "text": "the same at the same time has similar concepts we also have a solution structure in there we have to know how",
    "start": "779850",
    "end": "785190"
  },
  {
    "text": "everything in your project fits together and basically both IntelliJ as well as resharper even though it's headless are",
    "start": "785190",
    "end": "791670"
  },
  {
    "text": "a full stack ID or a full-blown IDE we",
    "start": "791670",
    "end": "796680"
  },
  {
    "text": "also started looking at the different features that are available on both of the sites and there are cases where IntelliJ could do everything use version",
    "start": "796680",
    "end": "804030"
  },
  {
    "text": "control in writer that's pretty much all front ends no resharper is involved there there are cases where we Sharper",
    "start": "804030",
    "end": "811380"
  },
  {
    "text": "does everything if you edit dotnet code if you added C sharp or vb.net or F sharp",
    "start": "811380",
    "end": "816540"
  },
  {
    "text": "that's probably gonna be powered by resharper because there's no real C sharp concepts in the IntelliJ",
    "start": "816540",
    "end": "823020"
  },
  {
    "text": "front-ends and there are cases where both IDs may actually contribute to the same feature and make may be a new",
    "start": "823020",
    "end": "829740"
  },
  {
    "text": "feature even possible so I'll give you a quick demo of a couple of things that are handled by one of both sides there",
    "start": "829740",
    "end": "836690"
  },
  {
    "text": "so obviously if you write dotnet if you write any c-sharp codes you're working",
    "start": "836690",
    "end": "842070"
  },
  {
    "text": "in resharper so all of the editing you do all of the writing codes that you may do if you write a public void foo and",
    "start": "842070",
    "end": "849450"
  },
  {
    "text": "add that as a methods all of that is resharper you're writing this in in",
    "start": "849450",
    "end": "855029"
  },
  {
    "text": "resharper except for the editor itself which is IntelliJ but still most of the",
    "start": "855029",
    "end": "860459"
  },
  {
    "text": "logic here that you will see is powered by resharper if you go into an HTML file all of that it looks the same the editor",
    "start": "860459",
    "end": "867660"
  },
  {
    "text": "behaves the same and so on but everything you do in here is powered by IntelliJ because IntelliJ already has",
    "start": "867660",
    "end": "873540"
  },
  {
    "text": "HTML support typescript support JavaScript support and so on and we don't need with sharper for that even",
    "start": "873540",
    "end": "879330"
  },
  {
    "text": "though typescript is supported in in on the resharper side as well but it's not",
    "start": "879330",
    "end": "885150"
  },
  {
    "text": "really needed there we also have cases where we mix features if you look at a",
    "start": "885150",
    "end": "890490"
  },
  {
    "text": "razor page for example that's HTML mixed with with some c-sharp codes in the",
    "start": "890490",
    "end": "896640"
  },
  {
    "text": "beginning of writer we basically thought okay we have HTML editing and razor editing in resharper so let's handle",
    "start": "896640",
    "end": "902700"
  },
  {
    "text": "this entirely by resharper but then we thought okay then we're not on par in",
    "start": "902700",
    "end": "907709"
  },
  {
    "text": "terms of features with the standard HTML editor so we thought okay maybe the HTML",
    "start": "907709",
    "end": "913440"
  },
  {
    "text": "in here should be powered by IntelliJ whereas the dotnet in here the the razor syntax in there should be powered by",
    "start": "913440",
    "end": "919680"
  },
  {
    "text": "resharper so combine them in one editor if you look at this one that's a really",
    "start": "919680",
    "end": "926459"
  },
  {
    "text": "interesting one I have a database connection here and I'm connected to a database and I'm using dotnet or entity",
    "start": "926459",
    "end": "933839"
  },
  {
    "text": "framework or and making use of raw sequel queries and writing sequel code they're basically passing in a string to",
    "start": "933839",
    "end": "940560"
  },
  {
    "text": "entity framework what happens is if in that string I trigger completion I get code completion based on that",
    "start": "940560",
    "end": "947040"
  },
  {
    "text": "database connection I have I can select and like it completion from the tables and the columns that I have in my",
    "start": "947040",
    "end": "952740"
  },
  {
    "text": "database all of the c-sharp you see there is powered by resharper except for",
    "start": "952740",
    "end": "958080"
  },
  {
    "text": "that Stinney string that is in there which is powered by IntelliJ in this case because that feature has been there",
    "start": "958080",
    "end": "963450"
  },
  {
    "text": "for 12 years or so and we're basically reusing that just inside that string so this is where both of the IDs created a",
    "start": "963450",
    "end": "971279"
  },
  {
    "text": "new feature together and make writer better than what we could do in resharper for example so there's a",
    "start": "971279",
    "end": "977550"
  },
  {
    "text": "couple of cases there where yeah it's either one or the other or both at the same time good so we decided okay we",
    "start": "977550",
    "end": "987630"
  },
  {
    "text": "have that JVM process we have that dotnet process how do we make those to communicate with one another I mean it's",
    "start": "987630",
    "end": "993750"
  },
  {
    "text": "not as simple as using shared memory or whatever because it's two different ecosystems even two different garbage",
    "start": "993750",
    "end": "1000440"
  },
  {
    "text": "collectors in two different platforms that are running so we started looking",
    "start": "1000440",
    "end": "1006500"
  },
  {
    "text": "at the features that we have in our IDs and one of the examples there is the contextual actions you're editing codes",
    "start": "1006500",
    "end": "1013100"
  },
  {
    "text": "all of a sudden you see this light bulb pop up and you press alt enter and you see whatever options are available like",
    "start": "1013100",
    "end": "1019640"
  },
  {
    "text": "removing using statements or making a public method private and so on you press alt enter and basically what",
    "start": "1019640",
    "end": "1026808"
  },
  {
    "text": "happens in writer is that the IntelliJ front-ends will ask the current editor give me your language and tell me what",
    "start": "1026809",
    "end": "1034819"
  },
  {
    "text": "items I should display for this language for building writer we could plug a",
    "start": "1034819",
    "end": "1040069"
  },
  {
    "text": "virtual language proxy in there where the document could be like a proxy to resharper so that if we press alt enter",
    "start": "1040069",
    "end": "1046938"
  },
  {
    "text": "in that IntelliJ Java documents editor we could get options from resharper to",
    "start": "1046939",
    "end": "1052400"
  },
  {
    "text": "see whatever is in there and IntelliJ could then render them and show you all of the options that are available but if",
    "start": "1052400",
    "end": "1058040"
  },
  {
    "text": "you look at purely at the data that has to go between the two processes that's actually a very simple structure you",
    "start": "1058040",
    "end": "1064160"
  },
  {
    "text": "have your documents a document has line numbers and column numbers so we can find whatever character you want to show",
    "start": "1064160",
    "end": "1070790"
  },
  {
    "text": "the notification on so basically what we could do is pass a tree from one side to",
    "start": "1070790",
    "end": "1076940"
  },
  {
    "text": "the other tree that holds which line which column and what's the name of the inspection to show here and what",
    "start": "1076940",
    "end": "1083000"
  },
  {
    "text": "should be the icon is it a warning or is it an error for example so the data structure is very easy if we look at the",
    "start": "1083000",
    "end": "1090980"
  },
  {
    "text": "actual inspection so the squiggle is you see while coding that is also kind of a simple data structure again we can have",
    "start": "1090980",
    "end": "1099020"
  },
  {
    "text": "our IntelliJ as the current documents what its language is have this virtual proxy towards our resharper process and",
    "start": "1099020",
    "end": "1106010"
  },
  {
    "text": "have resharper publish whatever inspections it wants to publish to IntelliJ the data set there is also",
    "start": "1106010",
    "end": "1112700"
  },
  {
    "text": "fairly easy it's going to be a name of an inspection it's going to be an icon a severity again maybe a tooltip and maybe",
    "start": "1112700",
    "end": "1118760"
  },
  {
    "text": "the text range where we want to show that squiggle but important is we cannot do a remote procedure call there if we",
    "start": "1118760",
    "end": "1125600"
  },
  {
    "text": "have IntelliJ calling to resharper and wait for it for a response before we display anything in the IDE that's not",
    "start": "1125600",
    "end": "1132590"
  },
  {
    "text": "going to work because resharper may have to think about whatever is available in that context maybe takes 400",
    "start": "1132590",
    "end": "1138680"
  },
  {
    "text": "milliseconds maybe takes close to a second to give you back that information we don't want to have any lag in the",
    "start": "1138680",
    "end": "1144890"
  },
  {
    "text": "editor if you're writing code you really want to write code and you don't want to have to wait for the cursor to respond",
    "start": "1144890",
    "end": "1150800"
  },
  {
    "text": "again because some process communication is happening on the back so it couldn't do any RPC but the data itself is very",
    "start": "1150800",
    "end": "1157640"
  },
  {
    "text": "simple when writing codes that's a bi-directional thing you're writing code in the editor in IntelliJ",
    "start": "1157640",
    "end": "1164720"
  },
  {
    "text": "but you're also kind of writing that code on the resharper side because resharper can provide suggestions and",
    "start": "1164720",
    "end": "1170720"
  },
  {
    "text": "can provide code completion and all of those things so that's kind of a bi-directional thing you're writing here",
    "start": "1170720",
    "end": "1175910"
  },
  {
    "text": "but resharper may complete the statement and publish it back to IntelliJ right so",
    "start": "1175910",
    "end": "1181130"
  },
  {
    "text": "that's something that happens at the same time if you look at the data structure that has to go between those",
    "start": "1181130",
    "end": "1186560"
  },
  {
    "text": "two processes that's gonna be easy it's gonna be a delta of how the document has changed between a number of keystrokes",
    "start": "1186560",
    "end": "1193490"
  },
  {
    "text": "if I write public and resharper adds a method name or brackets or whatever we can have a delta that says okay two",
    "start": "1193490",
    "end": "1200030"
  },
  {
    "text": "brackets have been added and published at vice vice versa between the two projects so the data itself is again",
    "start": "1200030",
    "end": "1207830"
  },
  {
    "text": "fairly easy so we decided if the data types are not that complex if we have those context",
    "start": "1207830",
    "end": "1215060"
  },
  {
    "text": "actions as a tree and inspections as a set of names and so on that's very simple so if we can write something that",
    "start": "1215060",
    "end": "1221360"
  },
  {
    "text": "is abstract enough to just pass around these simple messages we can have",
    "start": "1221360",
    "end": "1226400"
  },
  {
    "text": "everything work if we make one inspection work and have some structure that makes an inspection in IAD work we",
    "start": "1226400",
    "end": "1232940"
  },
  {
    "text": "can make all of them work because it's gonna be ideally the same abstraction in the same way of passing around that data",
    "start": "1232940",
    "end": "1238640"
  },
  {
    "text": "between the two projects then we decided okay we know what data to pass how are",
    "start": "1238640",
    "end": "1245540"
  },
  {
    "text": "we going to pass this data between the two processes do we reuse the language server protocol anyone familiar with",
    "start": "1245540",
    "end": "1251300"
  },
  {
    "text": "that one okay one two a couple of people the language server protocol or LSP is",
    "start": "1251300",
    "end": "1257930"
  },
  {
    "text": "basically what PS code is using so what they do is they also have kind of a front-end running and whenever you want",
    "start": "1257930",
    "end": "1265160"
  },
  {
    "text": "to invoke code completion or you want to get inspections and so on they also call into the language server for whatever",
    "start": "1265160",
    "end": "1271130"
  },
  {
    "text": "language or editing could be typescript could be c-sharp and they publish that",
    "start": "1271130",
    "end": "1276410"
  },
  {
    "text": "result back so LSP in itself kind of has the same goal it wants to build an IDE",
    "start": "1276410",
    "end": "1282710"
  },
  {
    "text": "and make something happen between two processes except for us it wasn't really",
    "start": "1282710",
    "end": "1288110"
  },
  {
    "text": "on par with the feature set we had in resharper we also have a lot of people",
    "start": "1288110",
    "end": "1293210"
  },
  {
    "text": "asking about when it's which I prefer vs code gonna happen I don't think it's ever gonna happen because right now LSP",
    "start": "1293210",
    "end": "1299510"
  },
  {
    "text": "is too limited and if we would build resharper for vs code it would be a very limited resharper edition there so",
    "start": "1299510",
    "end": "1305540"
  },
  {
    "text": "that's the reason why we are not doing that but also because of that reason we could not reuse the language server",
    "start": "1305540",
    "end": "1311480"
  },
  {
    "text": "protocol the only way to reuse the language server protocol is if we would add a lot a number of customizations and",
    "start": "1311480",
    "end": "1318230"
  },
  {
    "text": "extensions on top which is possible in LSP but if we have to build a lot of",
    "start": "1318230",
    "end": "1323780"
  },
  {
    "text": "extensions on top then we're kind of shoehorning everything into LSP maybe we should look into something else and make",
    "start": "1323780",
    "end": "1330560"
  },
  {
    "text": "something that works better for our use case so we started experimenting with our own rest like protocol basically",
    "start": "1330560",
    "end": "1337580"
  },
  {
    "text": "have a web server running in resharper and pass around some JSON or passer and some protobuf in a request response",
    "start": "1337580",
    "end": "1344450"
  },
  {
    "text": "style where both processes could make calls and get responses back and so on we did that that kind of worked but it",
    "start": "1344450",
    "end": "1352280"
  },
  {
    "text": "proved one slow and also very clunky to work with our developers would have to",
    "start": "1352280",
    "end": "1358490"
  },
  {
    "text": "always create like a controller at attributes on top and really they had to",
    "start": "1358490",
    "end": "1363860"
  },
  {
    "text": "go to a lot of boilerplate to make that work in that type of protocol also we realized that a lot of things are",
    "start": "1363860",
    "end": "1370450"
  },
  {
    "text": "request/response but not everything and you also have to shoehorn the bi-directional communication into a",
    "start": "1370450",
    "end": "1376790"
  },
  {
    "text": "request response that works from resharper to IntelliJ and from IntelliJ to resharper so we decided okay this",
    "start": "1376790",
    "end": "1383059"
  },
  {
    "text": "works but it's probably not the best because it's gonna slow us down if we develop writer like this there's another",
    "start": "1383059",
    "end": "1391910"
  },
  {
    "text": "interesting thing and that is in conflict resolution I mentioned that resharper can do something and IntelliJ",
    "start": "1391910",
    "end": "1399080"
  },
  {
    "text": "can do something imagine you are writing codes and you invoke a refactoring and",
    "start": "1399080",
    "end": "1404350"
  },
  {
    "text": "it's a big code base and resharper has to think about that refactoring for a couple of seconds and during that couple",
    "start": "1404350",
    "end": "1411260"
  },
  {
    "text": "of seconds you remove the file from the IntelliJ side which side wins is it the",
    "start": "1411260",
    "end": "1417290"
  },
  {
    "text": "result of the refactoring restoring essentially the file that you just deleted or is the file gun also deaths",
    "start": "1417290",
    "end": "1424400"
  },
  {
    "text": "is not really in the language server protocol so we needed something that also handled those cases where there's a",
    "start": "1424400",
    "end": "1431390"
  },
  {
    "text": "delay between both ends processing something we came to realization maybe",
    "start": "1431390",
    "end": "1437390"
  },
  {
    "text": "request response style is not something we need our messages our data is really",
    "start": "1437390",
    "end": "1443090"
  },
  {
    "text": "simple but request response we have to do it both ways and it doesn't really work for us also if you do this request",
    "start": "1443090",
    "end": "1451309"
  },
  {
    "text": "response style there's a lot of data overheads like if you post this line of code has been deleted or added we have",
    "start": "1451309",
    "end": "1458240"
  },
  {
    "text": "also we also have to post which solution this was in what path this was in what a",
    "start": "1458240",
    "end": "1463669"
  },
  {
    "text": "lot of state information has to go over the wire between the two sites in in writer so we decided okay maybe if we",
    "start": "1463669",
    "end": "1472160"
  },
  {
    "text": "can model this as a model view viewmodel type of approach maybe this would work better what if on both sides both in",
    "start": "1472160",
    "end": "1479630"
  },
  {
    "text": "IntelliJ as well as on the resharper side we could have a structure of concepts that",
    "start": "1479630",
    "end": "1485570"
  },
  {
    "text": "we have in the IDs or project that has files what if we could just call on add methods on that collection and have that",
    "start": "1485570",
    "end": "1492590"
  },
  {
    "text": "file appear on both sides of the protocol what if if we do a delete or we want to render an inspection we could",
    "start": "1492590",
    "end": "1499070"
  },
  {
    "text": "just post an inspection to a collection and it will appear on both sides well visually on the IntelliJ side and",
    "start": "1499070",
    "end": "1505060"
  },
  {
    "text": "invisibly in the out of process Rieser resharper there both sides of the",
    "start": "1505060",
    "end": "1510560"
  },
  {
    "text": "protocol could react to such changes if we add a file both could react and do",
    "start": "1510560",
    "end": "1515690"
  },
  {
    "text": "something with whatever we are doing there if we want to publish a warning both sides could react to that still",
    "start": "1515690",
    "end": "1522500"
  },
  {
    "text": "that conflict resolution was also in there that Model View mod mvvm way of",
    "start": "1522500",
    "end": "1527960"
  },
  {
    "text": "working looked promising but there was still the idea of conflict resolution if IntelliJ does something and you",
    "start": "1527960",
    "end": "1534770"
  },
  {
    "text": "delete it while resharper is refactoring you don't want to have that so it is a-okay maybe we can introduce the",
    "start": "1534770",
    "end": "1541730"
  },
  {
    "text": "concept of locking so that when you invoke a refactoring you cannot delete a",
    "start": "1541730",
    "end": "1547070"
  },
  {
    "text": "file but again we decide okay you want to have your flow as a developer we",
    "start": "1547070",
    "end": "1552320"
  },
  {
    "text": "don't want to really lock both sides until an operation finishes we want this to be asynchronous and work so we came",
    "start": "1552320",
    "end": "1559010"
  },
  {
    "text": "up with some conventions and those conventions are basically last one wins so if you delete a file while resharper",
    "start": "1559010",
    "end": "1566030"
  },
  {
    "text": "is refactoring it comes back the delete is more important and it's probably last in the last known good state of the file",
    "start": "1566030",
    "end": "1573380"
  },
  {
    "text": "it's deleted so that thing wins and the file will be deleted and the way we do",
    "start": "1573380",
    "end": "1579080"
  },
  {
    "text": "that is by adding versions so every operation that goes over the wire has a version and if the version is newer or",
    "start": "1579080",
    "end": "1586160"
  },
  {
    "text": "the same we accept the change from the other side if not we revoke the change from the other sides so that's the the",
    "start": "1586160",
    "end": "1592490"
  },
  {
    "text": "conventions in there we came up with our own protocol to have this view model",
    "start": "1592490",
    "end": "1597850"
  },
  {
    "text": "kind of way of working there we have writer we have resharper writer is",
    "start": "1597850",
    "end": "1603910"
  },
  {
    "text": "IntelliJ and JVM resharper is running on that net or mono and in between we want",
    "start": "1603910",
    "end": "1609080"
  },
  {
    "text": "to have this magic protocol fixing whatever problems we have in communicating between two differ",
    "start": "1609080",
    "end": "1614279"
  },
  {
    "text": "ecosystems ideally our developers in different teams don't have to know about",
    "start": "1614279",
    "end": "1620669"
  },
  {
    "text": "all of the details of that protocol in between the two sites they don't have to care about States they don't have",
    "start": "1620669",
    "end": "1627179"
  },
  {
    "text": "ideally they don't have to care about that versioning and that conflict resolution they just want to have that",
    "start": "1627179",
    "end": "1632999"
  },
  {
    "text": "view model and add files remove files post inspections etc etc so we came up",
    "start": "1632999",
    "end": "1638429"
  },
  {
    "text": "with that writer protocol which is our reactive distributed communication protocol it's open source you can find",
    "start": "1638429",
    "end": "1644700"
  },
  {
    "text": "it on github and essentially what it is is a framework that works for dotnet for",
    "start": "1644700",
    "end": "1649830"
  },
  {
    "text": "Catalan for JavaScript and C++ or you could write your own language if you want basically you're writing more or",
    "start": "1649830",
    "end": "1657359"
  },
  {
    "text": "less like if you're doing G RPC you're writing your model definition based on that model definition you generate codes",
    "start": "1657359",
    "end": "1664499"
  },
  {
    "text": "on the dotnet site as well as on the JVM sites and the protocol magically glues",
    "start": "1664499",
    "end": "1669599"
  },
  {
    "text": "them together and provides you a unified protocol to work with those things and have those things communicate with one",
    "start": "1669599",
    "end": "1675809"
  },
  {
    "text": "another so looks very complex because there's lots of layers in the diagram there but essentially all our developers",
    "start": "1675809",
    "end": "1682289"
  },
  {
    "text": "have to know is if you want to extend something in the IDE you write something",
    "start": "1682289",
    "end": "1687599"
  },
  {
    "text": "in that model you generate the codes and you just work with it if you're writing on the dotnet site it's gonna be a",
    "start": "1687599",
    "end": "1692879"
  },
  {
    "text": "collection or a string or a very simple data type if you're on the Java site if you're writing something in the actual",
    "start": "1692879",
    "end": "1698789"
  },
  {
    "text": "UI it's gonna be a Java string or a Java list or whatever and that's generated and we glue it all together the",
    "start": "1698789",
    "end": "1705629"
  },
  {
    "text": "versioning the conflict handling and so on is handled by the lower layers and ideally our deaths don't have to know",
    "start": "1705629",
    "end": "1711570"
  },
  {
    "text": "about those lower lower layers the way it works is its socket based that's a",
    "start": "1711570",
    "end": "1717239"
  },
  {
    "text": "very important one so the protocol could work over a network could work over named pipe could work basically on every",
    "start": "1717239",
    "end": "1724169"
  },
  {
    "text": "kind of wire protocol you want to plug in our needs right so we only have to",
    "start": "1724169",
    "end": "1730679"
  },
  {
    "text": "know about those data types and creating that model we get the code generated and",
    "start": "1730679",
    "end": "1736229"
  },
  {
    "text": "so on and the good things are by generating that codes that we don't have anything that has to do introspection or",
    "start": "1736229",
    "end": "1744330"
  },
  {
    "text": "reflection or whatever to figure out what the structure of that code is because the code is generated in c-sharp for the.net site so",
    "start": "1744330",
    "end": "1750809"
  },
  {
    "text": "we just work with the c-sharp site there the protocol is also hierarchical and",
    "start": "1750809",
    "end": "1755970"
  },
  {
    "text": "supports lifetimes now that sounds a bit abstract I know so let's go over that in",
    "start": "1755970",
    "end": "1761490"
  },
  {
    "text": "a second first of all I want to show you how the protocol essentially works in those",
    "start": "1761490",
    "end": "1767250"
  },
  {
    "text": "primitives so it's a very simple protocol we have a couple of interfaces you can have a source and a source is",
    "start": "1767250",
    "end": "1773250"
  },
  {
    "text": "basically something that can fire in events on a protocol we can have a sync which is basically a receiver of",
    "start": "1773250",
    "end": "1779640"
  },
  {
    "text": "whatever message we pass around and then we can have a signal which is basically a bi-directional kind of type of event",
    "start": "1779640",
    "end": "1786149"
  },
  {
    "text": "that we have in there so it's really the observer pattern if we would create a virtual collection that is a source and",
    "start": "1786149",
    "end": "1792990"
  },
  {
    "text": "a sink whenever we would add an a an elements to that collection we would fire an event and the other site would receive",
    "start": "1792990",
    "end": "1799380"
  },
  {
    "text": "it as a message and we could add it to the collection on the Java site there as well the primitives in the protocol are",
    "start": "1799380",
    "end": "1806970"
  },
  {
    "text": "those signals and properties but also collections we have strings in there we have bytes in there shorts so all of the",
    "start": "1806970",
    "end": "1814019"
  },
  {
    "text": "standard data types that you see on c-sharp sites or on the JVM sites are",
    "start": "1814019",
    "end": "1819149"
  },
  {
    "text": "pretty much support so devs don't really have to think about what the shape of the data is going to look like or what",
    "start": "1819149",
    "end": "1824580"
  },
  {
    "text": "data type is in there I mentioned hierarchical and lifetimes lifetimes I'll cover those first are",
    "start": "1824580",
    "end": "1831600"
  },
  {
    "text": "useful for cleanup and resource management so you all know that you have the using and the disposed pattern so",
    "start": "1831600",
    "end": "1838500"
  },
  {
    "text": "basically you have an object you put a using statement around and when that thing goes out of scope you basically",
    "start": "1838500",
    "end": "1843510"
  },
  {
    "text": "call that disposed and the object disappears now imagine you're building an IDE and you have a solution that",
    "start": "1843510",
    "end": "1849960"
  },
  {
    "text": "contains projects that contains multiple documents with editors every editor has multiple inspections you already see",
    "start": "1849960",
    "end": "1856380"
  },
  {
    "text": "there's a big hierarchy of all kinds of data structures that you want to clean",
    "start": "1856380",
    "end": "1861419"
  },
  {
    "text": "up when for example you close an editor window you want to close the editor you want to close all of the inspections and",
    "start": "1861419",
    "end": "1867000"
  },
  {
    "text": "so on and basically having multiple using statements and manually going around and calling dot dispose is not",
    "start": "1867000",
    "end": "1873539"
  },
  {
    "text": "something you want to do so we came up with the concept of lifetime's in the protocol where we basically have this",
    "start": "1873539",
    "end": "1879330"
  },
  {
    "text": "very simple class that has a stack of actions to execute whenever it's disposed so basically whenever we open",
    "start": "1879330",
    "end": "1885900"
  },
  {
    "text": "up a new editor window the editor window registers itself with its parent lifetime says attach me to your lifetime",
    "start": "1885900",
    "end": "1893130"
  },
  {
    "text": "and whenever the lifetime closes everything underneath that lifetime is also gonna be closed so we don't have to",
    "start": "1893130",
    "end": "1898920"
  },
  {
    "text": "manually go around and call this pose and everything in there that's also open",
    "start": "1898920",
    "end": "1904800"
  },
  {
    "text": "source by the way it's it's a fairly simple library but it's quite useful in our use case it's hierarchical in that",
    "start": "1904800",
    "end": "1911850"
  },
  {
    "text": "all those lifetimes are a hierarchy and also the hierarchy and the lifetimes are",
    "start": "1911850",
    "end": "1916950"
  },
  {
    "text": "communicated over the protocol because only IntelliJ site we have a project that has a new key to window that has",
    "start": "1916950",
    "end": "1923820"
  },
  {
    "text": "editor tabs with inspections and languages and so on and on the resharper",
    "start": "1923820",
    "end": "1929220"
  },
  {
    "text": "site we have a similar structure so if you close the editor tab we not only want to close the entire lifetime",
    "start": "1929220",
    "end": "1935160"
  },
  {
    "text": "underneath on the IntelliJ side but also on the resharper sides if we Sharper all of a sudden decides okay this way this",
    "start": "1935160",
    "end": "1942060"
  },
  {
    "text": "refactoring has to close a certain editor tab we also want when we close the lifetime on the resharper side we",
    "start": "1942060",
    "end": "1948210"
  },
  {
    "text": "also want it to be closed on the IntelliJ side there so all of that also traverses the protocol there right I'll",
    "start": "1948210",
    "end": "1955890"
  },
  {
    "text": "give you a quick example because I know this is kind of abstract so I want to give you some examples from the actual",
    "start": "1955890",
    "end": "1961530"
  },
  {
    "text": "code base so everything in the protocol starts with writing that model and that",
    "start": "1961530",
    "end": "1967500"
  },
  {
    "text": "model is written in Catalan Catalan is a language on the JVM and it looks very",
    "start": "1967500",
    "end": "1973200"
  },
  {
    "text": "similar to c-sharp a couple of differences as well but it's it's very similar so for example if you would look",
    "start": "1973200",
    "end": "1978780"
  },
  {
    "text": "at how the new gate host is built in writers I'll quickly show you then you get hosts so this entire two window",
    "start": "1978780",
    "end": "1985140"
  },
  {
    "text": "where you can search for new get back edges and so on where you can manage the package sources look at the log of",
    "start": "1985140",
    "end": "1990810"
  },
  {
    "text": "whatever operations you do in there is defined as something in the protocol all of the data that you see here is",
    "start": "1990810",
    "end": "1997380"
  },
  {
    "text": "something that lives in the protocol so the way it works is we have to extend",
    "start": "1997380",
    "end": "2002870"
  },
  {
    "text": "our base our base object model in that protocol and say ok we have something",
    "start": "2002870",
    "end": "2009710"
  },
  {
    "text": "that's going to be called the Rd nougat host so the writer nougat host in there we will",
    "start": "2009710",
    "end": "2014990"
  },
  {
    "text": "have some enumerations in there so we can say there's a conflict action which is prompt or ignore all or overwrite all",
    "start": "2014990",
    "end": "2021380"
  },
  {
    "text": "and so on and at some point we will add a sink that is called log and it's an",
    "start": "2021380",
    "end": "2027470"
  },
  {
    "text": "immutable list of log messages so in our model we define that for this writer new",
    "start": "2027470",
    "end": "2034580"
  },
  {
    "text": "get tap where we see the log of all of the operations that's basically going to be a collection of messages and that's",
    "start": "2034580",
    "end": "2041540"
  },
  {
    "text": "this thing in the model so we have a sink something that accepts data from the other sides and that is modeled as a",
    "start": "2041540",
    "end": "2047750"
  },
  {
    "text": "list of new get log messages that have a time stem fields a context fields a",
    "start": "2047750",
    "end": "2053118"
  },
  {
    "text": "level field and a text fields and you also see the types of data that will be",
    "start": "2053119",
    "end": "2058158"
  },
  {
    "text": "stored in there now all of this is written in Kaplan unit in a domain-specific language modeled to our",
    "start": "2058159",
    "end": "2063980"
  },
  {
    "text": "protocol and we model whatever we want to pass around between all of the sides there once we figure out what our model",
    "start": "2063980",
    "end": "2071300"
  },
  {
    "text": "will look like what our view model will look like we run that code generation and we get actual calculon code that we",
    "start": "2071300",
    "end": "2077658"
  },
  {
    "text": "can work with on the IntelliJ side and c-sharp codes that we can work with on the dotnet sides so if we look on the on",
    "start": "2077659",
    "end": "2085878"
  },
  {
    "text": "the IntelliJ sides if I search for my Rd new get log message it's not finding it",
    "start": "2085879",
    "end": "2093470"
  },
  {
    "text": "because it's a big solution awesome you will see when we start using it that we",
    "start": "2093470",
    "end": "2099020"
  },
  {
    "text": "can connect to our reach our or to our protocol hosts and then use that log",
    "start": "2099020",
    "end": "2104330"
  },
  {
    "text": "property that we just defined in our protocol model so this protocol model where we said we have this sink called",
    "start": "2104330",
    "end": "2112580"
  },
  {
    "text": "log this one is converted into actual code that we can work with and this is a",
    "start": "2112580",
    "end": "2117980"
  },
  {
    "text": "collection where we say observe this collection in this lifetime so that when",
    "start": "2117980",
    "end": "2123440"
  },
  {
    "text": "this lifetime closes when we close a solution we are no longer interested in that subscription whenever you see some message edits to",
    "start": "2123440",
    "end": "2130520"
  },
  {
    "text": "that list that we defined in the protocol I want you to run this method called add message and do something with",
    "start": "2130520",
    "end": "2135950"
  },
  {
    "text": "it now this is everything the lock thing or the lock window does on the IntelliJ",
    "start": "2135950",
    "end": "2142070"
  },
  {
    "text": "sites basically it subscribes to a collection and whenever a message appears in that collection we added",
    "start": "2142070",
    "end": "2148310"
  },
  {
    "text": "into that to window the more interesting thing is the resharper side here or the yet the resharper back and sides so",
    "start": "2148310",
    "end": "2155390"
  },
  {
    "text": "basically that exact same protocol or view model that we defined in our",
    "start": "2155390",
    "end": "2160670"
  },
  {
    "text": "cutting file is now also generated into c-sharp we get the exact same model but",
    "start": "2160670",
    "end": "2166340"
  },
  {
    "text": "in c-sharp and somewhere in that model we will see there is something called log there it is so we have a lot",
    "start": "2166340",
    "end": "2174290"
  },
  {
    "text": "property there that is a list of rd you get log messages this is the c-sharp site and that rd new get log message is",
    "start": "2174290",
    "end": "2181640"
  },
  {
    "text": "exactly what we defined in that model file it's containing a timestamp in this",
    "start": "2181640",
    "end": "2186890"
  },
  {
    "text": "case of a date time in the C sharp roads it contains the context also defined in our view model that we have in a text",
    "start": "2186890",
    "end": "2193580"
  },
  {
    "text": "which is a string now on the resharper",
    "start": "2193580",
    "end": "2199220"
  },
  {
    "text": "site whenever we have some operation happening in the nougat clients basically what we do is again connect to",
    "start": "2199220",
    "end": "2205850"
  },
  {
    "text": "our protocol hosts find that log property and fire the fact that we are adding one of those log messages and by",
    "start": "2205850",
    "end": "2212690"
  },
  {
    "text": "doing this on the c-sharp sites and having that subscription on the IntelliJ sites magic happens and we get that message",
    "start": "2212690",
    "end": "2219530"
  },
  {
    "text": "from one side to the other so this is one thing that works in one direction there's other things that work in in",
    "start": "2219530",
    "end": "2225920"
  },
  {
    "text": "different directions so we could have a collection where we add something on the IntelliJ site and it will appear on the",
    "start": "2225920",
    "end": "2231530"
  },
  {
    "text": "resharper side and vice versa but in this case we wanted to lock from c-sharp into the IntelliJ front-ends I also",
    "start": "2231530",
    "end": "2239870"
  },
  {
    "text": "mentioned those lifetimes and I will show you what those look like on the dotnet sites so whenever we create the",
    "start": "2239870",
    "end": "2246110"
  },
  {
    "text": "new gate clients we also want to handle for example if you're using Azure dev ops we want to handle authentication to",
    "start": "2246110",
    "end": "2253250"
  },
  {
    "text": "the negate feeds that you want to work with so what we do is we create a new writer new gate credential service which",
    "start": "2253250",
    "end": "2259730"
  },
  {
    "text": "under the hoods reuses whatever is in the new gate clients but the nougat client is filled with statics and if you",
    "start": "2259730",
    "end": "2266360"
  },
  {
    "text": "don't clean them up you have a nice memory leak so what we do is we subscribe to the current lifetime of our",
    "start": "2266360",
    "end": "2272060"
  },
  {
    "text": "solution and we say whenever the lifetime is terminated I want you to set these values to null so that we don't",
    "start": "2272060",
    "end": "2278540"
  },
  {
    "text": "have that memory so this means essentially that we don't have to track the disposed methods on",
    "start": "2278540",
    "end": "2284340"
  },
  {
    "text": "that's on that lifetime or on these credential handlers it will magically be terminated whenever we close whenever we",
    "start": "2284340",
    "end": "2290520"
  },
  {
    "text": "have open in our solution there because of those lifetimes and again it works",
    "start": "2290520",
    "end": "2296130"
  },
  {
    "text": "over the protocols so if we close it on the IntelliJ side resharper knows it should close that solution and project but also that nigut",
    "start": "2296130",
    "end": "2302670"
  },
  {
    "text": "client that credential management etc so I hope that kind of makes sense I know it's sort of complicated but really it's",
    "start": "2302670",
    "end": "2309780"
  },
  {
    "text": "building the model generating codes and subscribing and publishing messages over that protocol into that thing all of the",
    "start": "2309780",
    "end": "2316890"
  },
  {
    "text": "versioning of the conflict handling and so on is handled in a protocol right so",
    "start": "2316890",
    "end": "2325080"
  },
  {
    "text": "it's very extensible through the coupling DSL that we have so we can basically define classes we can add",
    "start": "2325080",
    "end": "2330780"
  },
  {
    "text": "primitives like strings and integers and so on and it's really easy to work with for our developers they can update a",
    "start": "2330780",
    "end": "2336630"
  },
  {
    "text": "view model generate code and they're up and running they can start working on whatever feature they are working on a",
    "start": "2336630",
    "end": "2341730"
  },
  {
    "text": "really interesting side effect of having that DSL to generates our protocol in so",
    "start": "2341730",
    "end": "2347850"
  },
  {
    "text": "you see the DSL here is that the DSL is actual codes and our IntelliJ IDE can",
    "start": "2347850",
    "end": "2353460"
  },
  {
    "text": "use navigation and code completion and so on in our model files as well out-of-the-box because we're just using",
    "start": "2353460",
    "end": "2359580"
  },
  {
    "text": "a programming language as a model definition and not JSON or whatever formats so we actually have intelligence",
    "start": "2359580",
    "end": "2365610"
  },
  {
    "text": "on there we don't have to think about the multiple processes not about State",
    "start": "2365610",
    "end": "2371460"
  },
  {
    "text": "not about that conflict resolution it just works it's cross language so it works in dotnet as well as on the JVM as",
    "start": "2371460",
    "end": "2378120"
  },
  {
    "text": "well as on JavaScript in C++ so essentially if you wanted to plug something onto writer that is written in",
    "start": "2378120",
    "end": "2385050"
  },
  {
    "text": "JavaScript you could do so if you find the protocol connection and want to generate the codes in JavaScript as well",
    "start": "2385050",
    "end": "2390710"
  },
  {
    "text": "one downside of the protocol is that writing plugins and extensions to writer becomes more complex so if you want to",
    "start": "2390710",
    "end": "2397620"
  },
  {
    "text": "write an extension for writer you typically have to build something for the UI in in the IntelliJ site as well",
    "start": "2397620",
    "end": "2403980"
  },
  {
    "text": "as something on the resharper site to get your plug-in up and running and get something working we do have examples if",
    "start": "2403980",
    "end": "2410310"
  },
  {
    "text": "you're ever using the F char support in writer that is an open-source plug into writer where you can actually",
    "start": "2410310",
    "end": "2416390"
  },
  {
    "text": "see how that thing works and is slightly less complex than the entirety of writer same thing with a unity plug-in that we",
    "start": "2416390",
    "end": "2423320"
  },
  {
    "text": "have you can look at the source to see what's the protocol or the mvvm model looks like what the generated code on",
    "start": "2423320",
    "end": "2429560"
  },
  {
    "text": "both sides look like looks like and how it all fits together so if you want some examples those are good ones right now",
    "start": "2429560",
    "end": "2437090"
  },
  {
    "text": "you all came here to hear me talk about micro services and so far it's been protocol and two processes talking with",
    "start": "2437090",
    "end": "2444050"
  },
  {
    "text": "one another that's not really micro services right it's one product and two processes and that's it's well there's a",
    "start": "2444050",
    "end": "2450380"
  },
  {
    "text": "couple of interesting things that we realized while building this protocol and looking at it first of all writer in",
    "start": "2450380",
    "end": "2457430"
  },
  {
    "text": "itself is two processes which means we have isolation we even have separate garbage collection for the UI as well as",
    "start": "2457430",
    "end": "2464480"
  },
  {
    "text": "the backend because one is JVM one is dotnet and they have their own cycles there each also has their own 64 bits",
    "start": "2464480",
    "end": "2472430"
  },
  {
    "text": "memory space so if the UI becomes complex and needs more memory that's fine resharper is not affected by that same",
    "start": "2472430",
    "end": "2478580"
  },
  {
    "text": "thing if you have a big solution in which are pressed to do a lot of things DUI can be a very small process because",
    "start": "2478580",
    "end": "2484640"
  },
  {
    "text": "not a lot may be needed in there by having these two processes out-of-the-box we also out of the box",
    "start": "2484640",
    "end": "2491900"
  },
  {
    "text": "have multi-core supports because if your operating system decides that the UI and",
    "start": "2491900",
    "end": "2497150"
  },
  {
    "text": "resharper should run on a different core in your machine we have multi core out-of-the-box and we can really use",
    "start": "2497150",
    "end": "2502820"
  },
  {
    "text": "your cpu there another cool thing is that we could essentially start the two processes out of bands they could be",
    "start": "2502820",
    "end": "2510260"
  },
  {
    "text": "started independently actually if you open up writer for the first time let's",
    "start": "2510260",
    "end": "2515570"
  },
  {
    "text": "open up my second version here if you open up writer and you see the welcome",
    "start": "2515570",
    "end": "2520760"
  },
  {
    "text": "screen appear so you see the splash screen appear and then you see the welcome screen at some points when you",
    "start": "2520760",
    "end": "2527600"
  },
  {
    "text": "see this thing we haven't started the resharper host yet this is pure IntelliJ and only when you open up a solution we",
    "start": "2527600",
    "end": "2534590"
  },
  {
    "text": "actually start that second process and make that thing work right",
    "start": "2534590",
    "end": "2541970"
  },
  {
    "text": "if you're using debugging in writer we automatically create multiple processes basically we have IntelliJ as the front",
    "start": "2541970",
    "end": "2548930"
  },
  {
    "text": "entry char press the back ends your application that you want to debug is also running but we also start a",
    "start": "2548930",
    "end": "2555079"
  },
  {
    "text": "separate debugger worker whenever you want to debug we start an additional process that attaches to your process",
    "start": "2555079",
    "end": "2560750"
  },
  {
    "text": "and that we attach to as well to get information about breakpoints and value states and so on that you have in the",
    "start": "2560750",
    "end": "2567049"
  },
  {
    "text": "memory space of that thing the reason for that is first of all it's kind of nice because you get nice separation and",
    "start": "2567049",
    "end": "2572869"
  },
  {
    "text": "isolation of the code there but second of all if for some reason your application crashes or makes the",
    "start": "2572869",
    "end": "2578509"
  },
  {
    "text": "debugger crash you don't take the entire resharper host down your debugging session will stop but everything else",
    "start": "2578509",
    "end": "2585230"
  },
  {
    "text": "will still be working we don't crash your entire working environment if the debugger fails in this case so we get",
    "start": "2585230",
    "end": "2591920"
  },
  {
    "text": "four processes for debugging we thought okay well we have this for debugging",
    "start": "2591920",
    "end": "2597410"
  },
  {
    "text": "out-of-the-box now what if we could do certain features as a separate process if you do WPF basically not everyone is",
    "start": "2597410",
    "end": "2606380"
  },
  {
    "text": "continuously working on the UI in their WPF application we only need to run the",
    "start": "2606380",
    "end": "2612289"
  },
  {
    "text": "designer or the previewer whenever you are actually doing WPF or whenever you are doing WinForms and so on so we could",
    "start": "2612289",
    "end": "2618859"
  },
  {
    "text": "launch that preview window that you see where you see the preview of whatever is ml code you are writing we only start",
    "start": "2618859",
    "end": "2625369"
  },
  {
    "text": "that process rendering the preview whenever you open up a demo file so we don't run it all the time",
    "start": "2625369",
    "end": "2630589"
  },
  {
    "text": "again if you have some invalid Cemil in that process crashes that's fine for",
    "start": "2630589",
    "end": "2635630"
  },
  {
    "text": "that process but the rest of writer doesn't really care because it's a separate process that can fail",
    "start": "2635630",
    "end": "2641210"
  },
  {
    "text": "independently from the rest in there another cool thing is because we have",
    "start": "2641210",
    "end": "2646910"
  },
  {
    "text": "that shared view model those additional processes can also contribute to that view model so I don't know if anyone",
    "start": "2646910",
    "end": "2653720"
  },
  {
    "text": "using writer has ever seen that there's also rustling analyzers supported in there what we do is whenever we discover",
    "start": "2653720",
    "end": "2661579"
  },
  {
    "text": "you have ruslan analyzers referenced in your C sharp projects we start a",
    "start": "2661579",
    "end": "2666650"
  },
  {
    "text": "separate process that runs all of the rustling inspections on top of your codes and contributes the inspections",
    "start": "2666650",
    "end": "2673339"
  },
  {
    "text": "back to the protocol I just adding a name and I can severity tooltip and a text range so again that",
    "start": "2673339",
    "end": "2679520"
  },
  {
    "text": "simple data format that we have in there but it's a third process basically contributing that to the same view model",
    "start": "2679520",
    "end": "2685900"
  },
  {
    "text": "so the protocol is the view model and we just add things in there so that they work across the boards and this is",
    "start": "2685900",
    "end": "2693799"
  },
  {
    "text": "basically what it looks like if you look at the processes there if you have something that has rustling inspections",
    "start": "2693799",
    "end": "2699859"
  },
  {
    "text": "you will see that in the UI as well whenever something is there and you will see a separate process running that",
    "start": "2699859",
    "end": "2705170"
  },
  {
    "text": "thing in your process Explorer if you don't have Roslyn analyzers we don't start that process because it doesn't",
    "start": "2705170",
    "end": "2711020"
  },
  {
    "text": "really make sense to run it in that case another cool thing since the protocol is",
    "start": "2711020",
    "end": "2717339"
  },
  {
    "text": "socket based we could run the protocol across machines and that's especially",
    "start": "2717339",
    "end": "2722420"
  },
  {
    "text": "handy when you're using docker and you want to debug your docker container in fact that's really a different sort of",
    "start": "2722420",
    "end": "2729740"
  },
  {
    "text": "machine that you are using the talker container so we could run our debugger process inside of the container and then",
    "start": "2729740",
    "end": "2736279"
  },
  {
    "text": "set up a socket connection with writer to get information when you debug an application that is running in that",
    "start": "2736279",
    "end": "2742069"
  },
  {
    "text": "container so docker debugging works like this and remote debugging works like this as well the Unity game engine",
    "start": "2742069",
    "end": "2750339"
  },
  {
    "text": "anyone here ever developed something with unity ok cool a couple of people we",
    "start": "2750339",
    "end": "2756319"
  },
  {
    "text": "have an extension to our view model that also supports the unity editor and basically what we have is that unity",
    "start": "2756319",
    "end": "2762950"
  },
  {
    "text": "extension plugs into the IntelliJ site plugs into the writers are in the resharper side of writer but it also",
    "start": "2762950",
    "end": "2770029"
  },
  {
    "text": "plugs into the actual unity editor so basically what we can do is have our view model across three different types",
    "start": "2770029",
    "end": "2776990"
  },
  {
    "text": "of processes across three different types of IDs basically and that allows us to do really cool things I'll quickly",
    "start": "2776990",
    "end": "2783890"
  },
  {
    "text": "show you a video so this is writer and in writer of course you can do a find usages of a certain button in this case",
    "start": "2783890",
    "end": "2791210"
  },
  {
    "text": "so if we do a find usages what we can do is publish on our protocol the fact that we want to find usages and all of a",
    "start": "2791210",
    "end": "2798470"
  },
  {
    "text": "sudden we can magically make the unity editor appear which is a separate process that we don't really control",
    "start": "2798470",
    "end": "2803779"
  },
  {
    "text": "apart from our plugin in there and find the usage of where you have a button even tender on that thing so we can even",
    "start": "2803779",
    "end": "2810650"
  },
  {
    "text": "work across different types of applications if we have a plugin in there that's kind of cool to do right",
    "start": "2810650",
    "end": "2819020"
  },
  {
    "text": "now that brings me to the future so this is what Reiter is currently and and what",
    "start": "2819020",
    "end": "2824720"
  },
  {
    "text": "the protocol offers currently now the fact that we can run this thing on multiple machines the fact that it is",
    "start": "2824720",
    "end": "2831200"
  },
  {
    "text": "socket based and so on sort of gave us some ideas to build on top of that protocol one of the things we want to do",
    "start": "2831200",
    "end": "2838550"
  },
  {
    "text": "and are actually doing for a lot of the new features right now is built our you ice as a model in that protocol as well",
    "start": "2838550",
    "end": "2845240"
  },
  {
    "text": "so if you ever go to the options in writer you will see this two window for configuring c-sharp interactive for",
    "start": "2845240",
    "end": "2851690"
  },
  {
    "text": "example that is code where we basically add UI on to our protocol in a list",
    "start": "2851690",
    "end": "2857720"
  },
  {
    "text": "basically in that protocol to render that UI the cool thing about this is that since resharper is also still a",
    "start": "2857720",
    "end": "2864380"
  },
  {
    "text": "plug-in to visuals to you we can reuse the same view definition that we have in code there to also render that UI in in",
    "start": "2864380",
    "end": "2871670"
  },
  {
    "text": "visual studio if we wanted to so we can start sharing the UI between two pro two",
    "start": "2871670",
    "end": "2876680"
  },
  {
    "text": "separate products as well if we wanted to so that is in active work so we were actually using this today now some",
    "start": "2876680",
    "end": "2885290"
  },
  {
    "text": "things that we are thinking about and experimenting with and and having fun with is things like really making use of",
    "start": "2885290",
    "end": "2892160"
  },
  {
    "text": "the fact that we can run the protocol on multiple machines imagine you are using a Mac for your day-to-day developments",
    "start": "2892160",
    "end": "2898820"
  },
  {
    "text": "but you have to work on a WPF application most people will not want to",
    "start": "2898820",
    "end": "2903830"
  },
  {
    "text": "have a virtual machine just to have WPF working well maybe we could run part of",
    "start": "2903830",
    "end": "2908900"
  },
  {
    "text": "the protocol on a Windows machine to render your WPF preview there and you",
    "start": "2908900",
    "end": "2914150"
  },
  {
    "text": "can still develop it on a Mac that's one of the things that we are experimenting and playing with another thing could be",
    "start": "2914150",
    "end": "2921170"
  },
  {
    "text": "that we could run IntelliJ the front-end on one machine and have resharper running on some other machine and just",
    "start": "2921170",
    "end": "2926510"
  },
  {
    "text": "communicate over the network in fact I saw a demo of some of our team members a",
    "start": "2926510",
    "end": "2931609"
  },
  {
    "text": "couple of weeks ago where they were using the protocol to share the resharper caches across multiple",
    "start": "2931609",
    "end": "2937160"
  },
  {
    "text": "machines using the protocol so you know if you have a very big solution writer has to index everything in there",
    "start": "2937160",
    "end": "2944120"
  },
  {
    "text": "and make sure that it knows how everything fits together well why not share that information using the",
    "start": "2944120",
    "end": "2949190"
  },
  {
    "text": "protocol across multiple developers even so that's one thing we're playing with as well and a very crazy idea I don't",
    "start": "2949190",
    "end": "2957590"
  },
  {
    "text": "think this is gonna happen anytime soon but I've seen some prototypes there is that what if we could make every of our",
    "start": "2957590",
    "end": "2964520"
  },
  {
    "text": "IDs something that uses the protocol and exposes the protocol so they can",
    "start": "2964520",
    "end": "2970040"
  },
  {
    "text": "contribute features to one another right now if you use resharper in Visual Studio we have our own typescript",
    "start": "2970040",
    "end": "2976160"
  },
  {
    "text": "implementation in in which our pen in visual studio but if you're using",
    "start": "2976160",
    "end": "2981350"
  },
  {
    "text": "webstorm we also have a typescript implementation in there what if we could at some point expose webstorm as a",
    "start": "2981350",
    "end": "2988250"
  },
  {
    "text": "protocol contributor and remove everything from resharper in terms of",
    "start": "2988250",
    "end": "2993470"
  },
  {
    "text": "typescript and simply use webstorm as the typescript engine in resharper that's also a very cool idea again",
    "start": "2993470",
    "end": "2999680"
  },
  {
    "text": "this is gonna be a lot of work for us if we ever want to do this but this is our current line of thinking maybe we can",
    "start": "2999680",
    "end": "3005110"
  },
  {
    "text": "reuse whatever we already have in there it could even be and that that's a really cool idea that some of the Deaf's",
    "start": "3005110",
    "end": "3011710"
  },
  {
    "text": "came up with what if we could use Visual Studio to power some of the features in webstorm for example so vice versa and",
    "start": "3011710",
    "end": "3019390"
  },
  {
    "text": "yeah again it's not gonna happen soon but it's a cool idea I think so with that in summary I don't think a lot",
    "start": "3019390",
    "end": "3027160"
  },
  {
    "text": "of this talk is going to apply to your day to day work although I hope that some of the concepts that we have in",
    "start": "3027160",
    "end": "3032530"
  },
  {
    "text": "terms of the mvvm model there are maybe something that you can apply in your own",
    "start": "3032530",
    "end": "3037900"
  },
  {
    "text": "projects but I did want to give you a peek into how we came about a building",
    "start": "3037900",
    "end": "3043240"
  },
  {
    "text": "rider how it is built and how those two things work together and basically how",
    "start": "3043240",
    "end": "3048570"
  },
  {
    "text": "basically starting to work on this IDE and making sure two different languages",
    "start": "3048570",
    "end": "3053620"
  },
  {
    "text": "two differents JVM and dotnet could work with one another how that basically gave",
    "start": "3053620",
    "end": "3058840"
  },
  {
    "text": "us a glimpse into the future of what writer could become over the next year's so we have a rich and easy programming",
    "start": "3058840",
    "end": "3065200"
  },
  {
    "text": "model there that the developers really like they only have to build the model generate some code and it automatically",
    "start": "3065200",
    "end": "3070780"
  },
  {
    "text": "works with everything that we discussed here and having everything sockets based and a view model that can be shared",
    "start": "3070780",
    "end": "3076900"
  },
  {
    "text": "across multiple processes is really interesting for the future so with that thank you for being here and if you have",
    "start": "3076900",
    "end": "3083110"
  },
  {
    "text": "any questions feel free to ask them Thanks [Applause]",
    "start": "3083110",
    "end": "3091539"
  }
]