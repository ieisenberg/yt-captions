[
  {
    "text": "thank you everybody for coming to this presentation a typical C plus plus but",
    "start": "7799",
    "end": "13139"
  },
  {
    "text": "why or maybe it's typical C plus plus but why",
    "start": "13139",
    "end": "19560"
  },
  {
    "text": "we'll see um for those of you who don't know me um bjorno I've been here actually at every",
    "start": "19560",
    "end": "27180"
  },
  {
    "text": "NBC Tech town so feels good to be back um",
    "start": "27180",
    "end": "32700"
  },
  {
    "text": "I work for net Insight in Stockholm we do Network e stuff like these things and",
    "start": "32700",
    "end": "40079"
  },
  {
    "text": "those I don't know how many computers are on",
    "start": "40079",
    "end": "46440"
  },
  {
    "text": "there there every plugin board has at least two CPUs and at least one fpga and they are internally networked with the",
    "start": "46440",
    "end": "52680"
  },
  {
    "text": "Redundant ethernet and then we connect these together in large often nation-sized Networks",
    "start": "52680",
    "end": "60539"
  },
  {
    "text": "and we do everything with this we we designed the mechanics the electronics the low level software program the fpga",
    "start": "60539",
    "end": "66720"
  },
  {
    "text": "is write the network stack the services that run on them and on top of all the",
    "start": "66720",
    "end": "71880"
  },
  {
    "text": "the network management system that shows the whole operation so that is cool um incidentally we are",
    "start": "71880",
    "end": "79260"
  },
  {
    "text": "hiring so you know just saying",
    "start": "79260",
    "end": "85020"
  },
  {
    "text": "but let's not talk about that let's talk about jigsaw puzzles um did you know that",
    "start": "85020",
    "end": "93000"
  },
  {
    "text": "makers of jigsaw puzzles have a limited set of standard cut patterns for",
    "start": "93000",
    "end": "101040"
  },
  {
    "text": "the jigsaw pieces so if you buy different",
    "start": "101040",
    "end": "108240"
  },
  {
    "text": "the different puzzles from the same maker that has the the same dimensions",
    "start": "108240",
    "end": "114360"
  },
  {
    "text": "and the same number of pieces chances are that they fit together",
    "start": "114360",
    "end": "119180"
  },
  {
    "text": "um this uh artist Tim Klein he obviously knows this",
    "start": "120479",
    "end": "126420"
  },
  {
    "text": "so he makes these absolutely wonderful interleaved jigsaw puzzles",
    "start": "126420",
    "end": "133500"
  },
  {
    "text": "and this is extremely suitable for this presentation because this actually makes me think a little bit about how C plus",
    "start": "133500",
    "end": "140459"
  },
  {
    "text": "this type system works because",
    "start": "140459",
    "end": "145440"
  },
  {
    "text": "Instagram plus the type system we have a small set of standard pieces standard type",
    "start": "145860",
    "end": "152220"
  },
  {
    "text": "which often fit in places where they shouldn't",
    "start": "152220",
    "end": "158060"
  },
  {
    "text": "but unlike jigsaw puzzles we actually have the means to create our own pieces",
    "start": "158879",
    "end": "164879"
  },
  {
    "text": "and in addition to the ones that are given to us",
    "start": "164879",
    "end": "170099"
  },
  {
    "text": "and we can make those as generic or as specific as we want them to be",
    "start": "170099",
    "end": "176840"
  },
  {
    "text": "but an observation of mine is that most simple plus developers they create",
    "start": "176840",
    "end": "183780"
  },
  {
    "text": "the pieces that make up the big picture this big structure of the programs you have all those requests that Pence",
    "start": "183780",
    "end": "191720"
  },
  {
    "text": "responses you have all the monsters you have all the network connections",
    "start": "191720",
    "end": "196980"
  },
  {
    "text": "but rarely for the information that is posed between the pieces and I'm specifically thinking about",
    "start": "196980",
    "end": "205140"
  },
  {
    "text": "uh function calls the arguments you pause",
    "start": "205140",
    "end": "210859"
  },
  {
    "text": "and I mean c plus allows you to do this you can do this you can write your own types",
    "start": "212640",
    "end": "219120"
  },
  {
    "text": "for this and in fact my plan today quite subversively is to make you want to go",
    "start": "219120",
    "end": "226200"
  },
  {
    "text": "back to work and rewrite your code that is what I want to do",
    "start": "226200",
    "end": "232379"
  },
  {
    "text": "uh the way I do this is",
    "start": "232379",
    "end": "239040"
  },
  {
    "text": "I'm going to show a number of examples of code that is a",
    "start": "239040",
    "end": "245819"
  },
  {
    "text": "little bit problematic and for every every such code I will try",
    "start": "245819",
    "end": "251280"
  },
  {
    "text": "to explain why I think it's problematic and give examples of how we can make it better",
    "start": "251280",
    "end": "257040"
  },
  {
    "text": "this set is by no mean exhaustive but it's a it's a number of things that I",
    "start": "257040",
    "end": "262860"
  },
  {
    "text": "have seen throughout my career and I should also say that",
    "start": "262860",
    "end": "269400"
  },
  {
    "text": "contrary to previous experiences you may have had with me on stage here before these are",
    "start": "269400",
    "end": "276419"
  },
  {
    "text": "not about com very complex Advanced C plus plus things this is very basic simple to us",
    "start": "276419",
    "end": "283199"
  },
  {
    "text": "so I I don't think my intention is for this to be easy to follow even if you're",
    "start": "283199",
    "end": "289199"
  },
  {
    "text": "a novice programmer I may have failed at that but that is my plan so",
    "start": "289199",
    "end": "295940"
  },
  {
    "text": "first first example the wrong argument",
    "start": "297419",
    "end": "303560"
  },
  {
    "text": "this is a classic we have code that",
    "start": "304440",
    "end": "311220"
  },
  {
    "text": "we we can get some kind of user input and we want to query a database from",
    "start": "311220",
    "end": "316259"
  },
  {
    "text": "this uh and we know that",
    "start": "316259",
    "end": "321360"
  },
  {
    "text": "some users are evil and try to write bad queries to destroy your database so",
    "start": "321360",
    "end": "329220"
  },
  {
    "text": "we have some sanitized input function so we we have this code that reacts to",
    "start": "329220",
    "end": "335400"
  },
  {
    "text": "user input gets an input sanitizes it and then it logs it and queries it",
    "start": "335400",
    "end": "341780"
  },
  {
    "text": "but we have a problem here because the sanitized input is only used",
    "start": "343080",
    "end": "348300"
  },
  {
    "text": "for the logging and the queries down on the row input",
    "start": "348300",
    "end": "353840"
  },
  {
    "text": "see you don't want to write code that makes you end up on an XKCD comic you you",
    "start": "363740",
    "end": "371160"
  },
  {
    "text": "don't want to write that code foreign",
    "start": "371160",
    "end": "377120"
  },
  {
    "text": "but the problem is the the programs have wrote this code actually knew about the problem otherwise they",
    "start": "377120",
    "end": "383280"
  },
  {
    "text": "wouldn't have this sanitized input function they knew about it but the but it slipped",
    "start": "383280",
    "end": "388440"
  },
  {
    "text": "anyway you don't get any warning for this from any compiler because sanitized input is",
    "start": "388440",
    "end": "395400"
  },
  {
    "text": "used in the logging so it's it's not an unused variable so",
    "start": "395400",
    "end": "400440"
  },
  {
    "text": "from the compiler's perspective everything is fine not even the slightest bit suspicious",
    "start": "400440",
    "end": "406020"
  },
  {
    "text": "so what can we do well one thing we can do is we can make",
    "start": "406020",
    "end": "411240"
  },
  {
    "text": "a very small change we can say that sanitized input returns a sanitized string and the query user data uses a sanitized",
    "start": "411240",
    "end": "418860"
  },
  {
    "text": "string not a stitch string and we can do just this super simple",
    "start": "418860",
    "end": "425220"
  },
  {
    "text": "just just destruct that contains the actual string",
    "start": "425220",
    "end": "431120"
  },
  {
    "text": "and when we try to compile this code look at this",
    "start": "433259",
    "end": "438979"
  },
  {
    "text": "so just by this extremely simple action of creating a new struct that holds the",
    "start": "439800",
    "end": "445020"
  },
  {
    "text": "value that we want we have transformed a problem that was a",
    "start": "445020",
    "end": "450960"
  },
  {
    "text": "debugging session or maybe just some head scratching after a failed unit test into a builder",
    "start": "450960",
    "end": "459419"
  },
  {
    "text": "I prefer the latter so we don't really need to do a lot to",
    "start": "459419",
    "end": "465840"
  },
  {
    "text": "make Improvement but we can do it better we can do it",
    "start": "465840",
    "end": "471060"
  },
  {
    "text": "even better so we can make sanitizing a proper class",
    "start": "471060",
    "end": "477000"
  },
  {
    "text": "with with the conversion operator uh",
    "start": "477000",
    "end": "482520"
  },
  {
    "text": "I don't know if if you're familiar with the conversion operators so it's the way",
    "start": "482520",
    "end": "487620"
  },
  {
    "text": "it works is like this in this case I have a class C",
    "start": "487620",
    "end": "493080"
  },
  {
    "text": "and I have a function int and I'm calling function work that takes an hint and I'm",
    "start": "493080",
    "end": "499379"
  },
  {
    "text": "calling work with a c now A C is not an INT but the compiler looks is there a",
    "start": "499379",
    "end": "505379"
  },
  {
    "text": "way to make an INT out of a c and it does this by looking for a",
    "start": "505379",
    "end": "511860"
  },
  {
    "text": "conversion operator and that is the operator int here",
    "start": "511860",
    "end": "517200"
  },
  {
    "text": "so the compiler in this case sees that aha see has a conversion operator tree",
    "start": "517200",
    "end": "522539"
  },
  {
    "text": "and now I know how to make an INT out of a c so it calls a conversion operator and gives a result of that",
    "start": "522539",
    "end": "530100"
  },
  {
    "text": "to the function work unfortunately since we have this Pride",
    "start": "530100",
    "end": "536940"
  },
  {
    "text": "proud tradition in C plus of having all the defaults wrong the",
    "start": "536940",
    "end": "543300"
  },
  {
    "text": "conversion operator is implicit by default meaning that it's",
    "start": "543300",
    "end": "548399"
  },
  {
    "text": "very easy to accidentally get an hint so what you can do instead is say yeah I",
    "start": "548399",
    "end": "554519"
  },
  {
    "text": "want my operator to be explicit which should have been the default in my opinion and when you do that you have to",
    "start": "554519",
    "end": "562620"
  },
  {
    "text": "make a conscious effort to get the int out of",
    "start": "562620",
    "end": "568080"
  },
  {
    "text": "there which maybe it doesn't exactly improve code",
    "start": "568080",
    "end": "573360"
  },
  {
    "text": "readability but it reduces the risk for for problems",
    "start": "573360",
    "end": "579260"
  },
  {
    "text": "so with that we can look at this thing where we have",
    "start": "579600",
    "end": "585180"
  },
  {
    "text": "the string the original string but it's it's a private member so no one can",
    "start": "585180",
    "end": "591839"
  },
  {
    "text": "change this one by by accident or create an illegal value",
    "start": "591839",
    "end": "599160"
  },
  {
    "text": "we have access to to get the underlying string if if we want to and the the the",
    "start": "599160",
    "end": "605100"
  },
  {
    "text": "function uh the queer user data will need to do that if we'll need to access the",
    "start": "605100",
    "end": "610800"
  },
  {
    "text": "underlying string to to be able to make the query but we also have this Constructor that",
    "start": "610800",
    "end": "617399"
  },
  {
    "text": "is explicit and in case things are completely Bonkers it can throw",
    "start": "617399",
    "end": "623459"
  },
  {
    "text": "which means that it's more or less impossible to get an object of sanitized",
    "start": "623459",
    "end": "630060"
  },
  {
    "text": "string that is not a valid thing because it does the sanitation",
    "start": "630060",
    "end": "636320"
  },
  {
    "text": "sanitation sanitization inside the the Constructor",
    "start": "636320",
    "end": "643160"
  },
  {
    "text": "which means that we can rewrite the code like this where we just",
    "start": "644760",
    "end": "649880"
  },
  {
    "text": "read the input we get the sanitized data so that we can log it and we we query the use data with it",
    "start": "649920",
    "end": "655560"
  },
  {
    "text": "and this code is clean so no ifs no checks whatever it's it's just there I",
    "start": "655560",
    "end": "661500"
  },
  {
    "text": "either the sanitize string Constructor Thrills in which case it's somebody else's problem",
    "start": "661500",
    "end": "667560"
  },
  {
    "text": "or we have or we have something that is valid to to query",
    "start": "667560",
    "end": "675660"
  },
  {
    "text": "so it's clean it's easy to read and it's correct by Design",
    "start": "675660",
    "end": "680180"
  },
  {
    "text": "so this is good so what we can see that",
    "start": "681240",
    "end": "686339"
  },
  {
    "text": "even something as simple as a named struct that just holds a value eliminates",
    "start": "686339",
    "end": "692519"
  },
  {
    "text": "a class of errors which is good and private data and the throwing",
    "start": "692519",
    "end": "699240"
  },
  {
    "text": "construct structure makes it really hard to do the wrong thing you you seriously have to work for it",
    "start": "699240",
    "end": "705000"
  },
  {
    "text": "and doing the right thing just happens the compiler will complain if you get it wrong",
    "start": "705000",
    "end": "710940"
  },
  {
    "text": "and almost always use explicit for your Constructors and conversion operators there are exceptions but almost always",
    "start": "710940",
    "end": "719480"
  },
  {
    "text": "I think next next example a loadable",
    "start": "721079",
    "end": "728700"
  },
  {
    "text": "I had so much fun just a few days ago I asked on Twitter what this kind of",
    "start": "728700",
    "end": "735240"
  },
  {
    "text": "anti-pattern should be called and boy did I get responses",
    "start": "735240",
    "end": "740180"
  },
  {
    "text": "a loadable was one of the more friendly ones to use in public",
    "start": "741300",
    "end": "747959"
  },
  {
    "text": "situations we have all seen functions like this",
    "start": "747959",
    "end": "755220"
  },
  {
    "text": "Kate showed one this morning so we have some kind of print functions",
    "start": "755220",
    "end": "761820"
  },
  {
    "text": "that prints a string and we have some Flags to say if if the string is short",
    "start": "761820",
    "end": "767220"
  },
  {
    "text": "is too long for the implied field length should be truncated uh and if it's",
    "start": "767220",
    "end": "772920"
  },
  {
    "text": "shorter than the implied field size should we pad it with something and do we want to break the line with a with",
    "start": "772920",
    "end": "781260"
  },
  {
    "text": "a line feed or not afterwards and this looks okay the function",
    "start": "781260",
    "end": "787620"
  },
  {
    "text": "signature looks okay it's it's readable absolutely foreign",
    "start": "787620",
    "end": "793760"
  },
  {
    "text": "false tree it's a this you don't want to see this",
    "start": "795480",
    "end": "800760"
  },
  {
    "text": "in your code you just don't want to do that and some coding standards say that yeah but don't use the direct values use",
    "start": "800760",
    "end": "809300"
  },
  {
    "text": "variables with names that says uh truncate or don't truncate pad or don't",
    "start": "809300",
    "end": "814500"
  },
  {
    "text": "pad or whatever but that doesn't actually solve that much of",
    "start": "814500",
    "end": "821880"
  },
  {
    "text": "a problem because if you if you switch the order between them they're still all just Bulls",
    "start": "821880",
    "end": "827459"
  },
  {
    "text": "I said this is bad this is just bad don't write code like this",
    "start": "827459",
    "end": "834000"
  },
  {
    "text": "but what can we do well E M class is really good",
    "start": "834000",
    "end": "840980"
  },
  {
    "text": "because every single of these claws are here now",
    "start": "841320",
    "end": "847800"
  },
  {
    "text": "you know called truncate pad and Line Feed each of these is its own unique type",
    "start": "847800",
    "end": "855720"
  },
  {
    "text": "they are not interchangeable even though the values between them are interchangeable they are on and off all",
    "start": "855720",
    "end": "861000"
  },
  {
    "text": "of them this caller is now undoubtedly a bit",
    "start": "861000",
    "end": "866820"
  },
  {
    "text": "more verbose but you can actually see what it is what it means",
    "start": "866820",
    "end": "873019"
  },
  {
    "text": "it is a bit on a nice or about the names of the actual parameters that I admit",
    "start": "874079",
    "end": "879540"
  },
  {
    "text": "you there are several ways of how to do this and all of them are various degrees of",
    "start": "879540",
    "end": "886680"
  },
  {
    "text": "bad I think but it's a Badness that",
    "start": "886680",
    "end": "892380"
  },
  {
    "text": "is Tiny compared to all the good that this brings do note however that you",
    "start": "892380",
    "end": "897720"
  },
  {
    "text": "really need to use enumclass if you just use a straight uh a c style enum you have just made a",
    "start": "897720",
    "end": "905519"
  },
  {
    "text": "glorified int and you have not solved anything so enumclaws enumclose is the thing you",
    "start": "905519",
    "end": "912899"
  },
  {
    "text": "need and if you change the orders of these you get a compilation error because part",
    "start": "912899",
    "end": "919199"
  },
  {
    "text": "of colon colon off is not convertible to truncate",
    "start": "919199",
    "end": "924620"
  },
  {
    "text": "that is good so you almost never want Google",
    "start": "924779",
    "end": "930060"
  },
  {
    "text": "parameters and you're absolutely certainly don't want several",
    "start": "930060",
    "end": "935160"
  },
  {
    "text": "and enumclass adds a good kind of verbosity that enhances readability",
    "start": "935160",
    "end": "941699"
  },
  {
    "text": "yes it makes your lines a little bit longer but they are easier to understand what is happening",
    "start": "941699",
    "end": "948440"
  },
  {
    "text": "this piece is called a rare rabbit by the way um dangerous default yes yes yes this is",
    "start": "954959",
    "end": "963180"
  },
  {
    "text": "fun we have the same example except that we decided that",
    "start": "963180",
    "end": "970920"
  },
  {
    "text": "we want Line Feed to be the default it makes sense that is almost always",
    "start": "970920",
    "end": "977220"
  },
  {
    "text": "what you want and everything is fine and dandy well it's not see the",
    "start": "977220",
    "end": "984420"
  },
  {
    "text": "previous slide but it it works people have used this it",
    "start": "984420",
    "end": "990839"
  },
  {
    "text": "it does its job and after some time",
    "start": "990839",
    "end": "997620"
  },
  {
    "text": "we realize that having an implied implicit",
    "start": "997620",
    "end": "1004279"
  },
  {
    "text": "field size was maybe not the wisest decision so we expanded with a field",
    "start": "1004279",
    "end": "1009680"
  },
  {
    "text": "size parameter can anyone want to see the problem",
    "start": "1009680",
    "end": "1017560"
  },
  {
    "text": "see some nodes yeah this compiles this is great we're calling print with",
    "start": "1017720",
    "end": "1023600"
  },
  {
    "text": "the field size of zero uh trunk of false and part of true",
    "start": "1023600",
    "end": "1028880"
  },
  {
    "text": "and Line Feed is true by default",
    "start": "1028880",
    "end": "1032678"
  },
  {
    "text": "um I had a couple of colleagues who ran into an extremely similar problem a",
    "start": "1035299",
    "end": "1042438"
  },
  {
    "text": "number of years ago it took a very long time to find out what the problem was",
    "start": "1042439",
    "end": "1049040"
  },
  {
    "text": "ideally this should have been caught in unit tests but if my experience is anything to go by then most of your unit",
    "start": "1049040",
    "end": "1055100"
  },
  {
    "text": "tests are not strong enough sorry",
    "start": "1055100",
    "end": "1059020"
  },
  {
    "text": "and for those who don't feel insulted by why you just said then great for you",
    "start": "1060140",
    "end": "1067240"
  },
  {
    "text": "what can we do well actually go back to the enumclose because that does solve the problem",
    "start": "1068660",
    "end": "1074900"
  },
  {
    "text": "except that now the parameter list became so long that it's not slide friendly anymore",
    "start": "1074900",
    "end": "1081759"
  },
  {
    "text": "but this main program now that calls Foo without having taking this field size",
    "start": "1081919",
    "end": "1088039"
  },
  {
    "text": "into account becomes a compilation error this is good",
    "start": "1088039",
    "end": "1095020"
  },
  {
    "text": "so even if your unit test Suite is weak you're saved it's good we moved a problem from the",
    "start": "1096260",
    "end": "1102679"
  },
  {
    "text": "from the runtime domain into the compile time domain",
    "start": "1102679",
    "end": "1107780"
  },
  {
    "text": "in runtime you may miss it if I could buy it under there is just no way you can continue using this program",
    "start": "1107780",
    "end": "1114440"
  },
  {
    "text": "when it doesn't compile so you you cannot ignore it you cannot fail to to discover the problem",
    "start": "1114440",
    "end": "1123340"
  },
  {
    "text": "so the lesson here is Kate touched on this in the keynote this",
    "start": "1125260",
    "end": "1131179"
  },
  {
    "text": "morning but it's don't have",
    "start": "1131179",
    "end": "1136640"
  },
  {
    "text": "adjacent parameters of not just the same type but types that are convertible to",
    "start": "1136640",
    "end": "1143179"
  },
  {
    "text": "each other because in this case",
    "start": "1143179",
    "end": "1149020"
  },
  {
    "text": "Falls is not a size t but it's implicitly convertible to one",
    "start": "1149240",
    "end": "1154520"
  },
  {
    "text": "and you will not get a compilation warning from any compiler because the bull is an unsigned size an",
    "start": "1154520",
    "end": "1162679"
  },
  {
    "text": "unsigned integer type with a value space of zero and one often called false and true",
    "start": "1162679",
    "end": "1168020"
  },
  {
    "text": "and zero and one fits very nicely inside the value space of size t",
    "start": "1168020",
    "end": "1174760"
  },
  {
    "text": "so again enumclaws to the rescue you know each of them are unique and not interchangeable types",
    "start": "1175400",
    "end": "1184480"
  },
  {
    "text": "so yeah default parameters are extremely dangerous over time that is the difference this",
    "start": "1187760",
    "end": "1195020"
  },
  {
    "text": "was a function that failed after an intended minor exchange",
    "start": "1195020",
    "end": "1201740"
  },
  {
    "text": "it it wasn't something that was wrong when we originally wrote it but we made a change",
    "start": "1201740",
    "end": "1207320"
  },
  {
    "text": "and we tripped uh terrible problem but by making sure that the parameters are of types that are not",
    "start": "1207320",
    "end": "1214460"
  },
  {
    "text": "interchangeable it doesn't matter the compiler will change will notice when we make the",
    "start": "1214460",
    "end": "1219620"
  },
  {
    "text": "change that would have broken our code",
    "start": "1219620",
    "end": "1223720"
  },
  {
    "text": "so ensure that you use types that are different",
    "start": "1224840",
    "end": "1230200"
  },
  {
    "text": "coupled parameters I think this one was called How the West",
    "start": "1240220",
    "end": "1246380"
  },
  {
    "text": "Was Won but I'm not quite sure I do networking",
    "start": "1246380",
    "end": "1253340"
  },
  {
    "text": "you often find functions that look something more or less like this where we have a pointer to the beginning",
    "start": "1253340",
    "end": "1260900"
  },
  {
    "text": "of a message buffer and a length all the",
    "start": "1260900",
    "end": "1267559"
  },
  {
    "text": "I think all at least of the posix functions related to networking it looks",
    "start": "1267559",
    "end": "1274160"
  },
  {
    "text": "sort of like that so we have some functional received packet here where we",
    "start": "1274160",
    "end": "1280700"
  },
  {
    "text": "do something we we parse the header we get the length of the header and then we copy the payload if when you're talking",
    "start": "1280700",
    "end": "1287179"
  },
  {
    "text": "about uh binary Network protocols you you see the the packet is just a",
    "start": "1287179",
    "end": "1294260"
  },
  {
    "text": "sequence of bytes and you have a header of some size and after that you have",
    "start": "1294260",
    "end": "1299900"
  },
  {
    "text": "everything after the header is the the payload so we want to copy the payload to somewhere",
    "start": "1299900",
    "end": "1307220"
  },
  {
    "text": "uh so we copied buffer plus header length because we don't want to store",
    "start": "1307220",
    "end": "1312559"
  },
  {
    "text": "the header here and then",
    "start": "1312559",
    "end": "1318820"
  },
  {
    "text": "we have a buffer over on error foreign",
    "start": "1319520",
    "end": "1324340"
  },
  {
    "text": "that's one way to get famous um the call should have been done with",
    "start": "1325520",
    "end": "1331100"
  },
  {
    "text": "buffer length minus header Len",
    "start": "1331100",
    "end": "1335140"
  },
  {
    "text": "this is a mistake that is so incredibly easy to make when you're",
    "start": "1337580",
    "end": "1344179"
  },
  {
    "text": "working with uh these kind of function signatures",
    "start": "1344179",
    "end": "1350380"
  },
  {
    "text": "probably everybody everyone who's ever dealt with these kind of low level",
    "start": "1351080",
    "end": "1357140"
  },
  {
    "text": "binary packets have have made at least once in their career I see some nodding",
    "start": "1357140",
    "end": "1364900"
  },
  {
    "text": "the problem is that these two parameters are not to see they describe one thing",
    "start": "1365480",
    "end": "1371360"
  },
  {
    "text": "they describe a contiguous range of memory that can be inspected",
    "start": "1371360",
    "end": "1376820"
  },
  {
    "text": "so what is better is of course to represent that as as one parameter",
    "start": "1376820",
    "end": "1383980"
  },
  {
    "text": "so one thing we can do is we can have a buffer view type",
    "start": "1385360",
    "end": "1394179"
  },
  {
    "text": "and I'm using const public data here because it's super simple because it just",
    "start": "1394520",
    "end": "1401559"
  },
  {
    "text": "initialize it with the values and then you know that you have them they will not change no one can",
    "start": "1401559",
    "end": "1407720"
  },
  {
    "text": "make this big become compromised in any way",
    "start": "1407720",
    "end": "1413860"
  },
  {
    "text": "and then we have functions to to create new buff reviews there are sub",
    "start": "1414620",
    "end": "1420980"
  },
  {
    "text": "views into the a prefix of some length or whatever",
    "start": "1420980",
    "end": "1426679"
  },
  {
    "text": "comes after the prefix uh you have a choice here of what to do if",
    "start": "1426679",
    "end": "1434299"
  },
  {
    "text": "you you want if you're outside the boundaries you may choose to terminate you may",
    "start": "1434299",
    "end": "1441140"
  },
  {
    "text": "choose to throw an exception I choose to truncate",
    "start": "1441140",
    "end": "1447460"
  },
  {
    "text": "what is Right depends on many things but make a choice",
    "start": "1447620",
    "end": "1454899"
  },
  {
    "text": "and then the program can be much easier so we we just say my received packet function takes a",
    "start": "1455059",
    "end": "1461900"
  },
  {
    "text": "buffer view for a packet and outpours the header I get the the header back",
    "start": "1461900",
    "end": "1467120"
  },
  {
    "text": "and then I call Copy payload load with a packet with the suffix after the header length",
    "start": "1467120",
    "end": "1474340"
  },
  {
    "text": "it's a lot easier to understand what is meant to happen here",
    "start": "1476480",
    "end": "1481580"
  },
  {
    "text": "because the code actually says copy copy the suffix after the length of the header it it really just says exactly",
    "start": "1481580",
    "end": "1487940"
  },
  {
    "text": "what you want to do and there is a reduced risk of error",
    "start": "1487940",
    "end": "1492980"
  },
  {
    "text": "because you don't have to deal with these these arithmetics distributed",
    "start": "1492980",
    "end": "1498740"
  },
  {
    "text": "throughout your code base you have it in one place or two maybe uh",
    "start": "1498740",
    "end": "1505940"
  },
  {
    "text": "and so India in the case you make an error you you fix it in one place and",
    "start": "1505940",
    "end": "1512059"
  },
  {
    "text": "then you're done so this is in my opinion a lot better and",
    "start": "1512059",
    "end": "1520820"
  },
  {
    "text": "this trick of having immutable data and creating new new data from it makes it much easier to",
    "start": "1520820",
    "end": "1529220"
  },
  {
    "text": "to reason about your code because it const don't change during the lifetime",
    "start": "1529220",
    "end": "1535460"
  },
  {
    "text": "of their scope but immutable members can be problematic",
    "start": "1535460",
    "end": "1542299"
  },
  {
    "text": "for example if you want to store several of these buffer views in a vector say",
    "start": "1542299",
    "end": "1548240"
  },
  {
    "text": "here are the packets I have and some functions in",
    "start": "1548240",
    "end": "1554600"
  },
  {
    "text": "in Vector requires that the the members are assignable and you",
    "start": "1554600",
    "end": "1559880"
  },
  {
    "text": "you cannot assign to something that is const so an alternative way of doing this is",
    "start": "1559880",
    "end": "1568220"
  },
  {
    "text": "to have a somewhat more complicated buffer view that has this starting length as members",
    "start": "1568220",
    "end": "1577460"
  },
  {
    "text": "and then there are no currently they are",
    "start": "1577460",
    "end": "1583360"
  },
  {
    "text": "private and and they are mutable but by making them private it's it's not",
    "start": "1583400",
    "end": "1590360"
  },
  {
    "text": "so easy to get them wrong from from the outside from a user of the buffer U class",
    "start": "1590360",
    "end": "1596000"
  },
  {
    "text": "and all of the member functions every single one of them is const so they promise to",
    "start": "1596000",
    "end": "1601640"
  },
  {
    "text": "not change this uh I added a begin and end function instead",
    "start": "1601640",
    "end": "1608179"
  },
  {
    "text": "of gets us access to the to the data to",
    "start": "1608179",
    "end": "1613580"
  },
  {
    "text": "inspect it and I'll choose begin and end because they are very friendly for a",
    "start": "1613580",
    "end": "1619039"
  },
  {
    "text": "brain space for Loop you can just say uh four",
    "start": "1619039",
    "end": "1625340"
  },
  {
    "text": "uh you in date byte colon buffer View and then you just",
    "start": "1625340",
    "end": "1631100"
  },
  {
    "text": "Traverse them if you so want but",
    "start": "1631100",
    "end": "1636940"
  },
  {
    "text": "after you have written this sit on your hands a long time stare at the code",
    "start": "1637220",
    "end": "1643460"
  },
  {
    "text": "and think do I really know do I really need more and the answer is no you don't",
    "start": "1643460",
    "end": "1648620"
  },
  {
    "text": "you really don't need more um I don't know if you're familiar with",
    "start": "1648620",
    "end": "1653960"
  },
  {
    "text": "John Carmack he became extremely famous in in the game development World way",
    "start": "1653960",
    "end": "1660559"
  },
  {
    "text": "back when when he wrote the game engines for for Doom and Quake that",
    "start": "1660559",
    "end": "1665960"
  },
  {
    "text": "long back and he still working with high performance software",
    "start": "1665960",
    "end": "1671659"
  },
  {
    "text": "and I really like this quote from him it's",
    "start": "1671659",
    "end": "1677120"
  },
  {
    "text": "hard for Less experienced developers to appreciate how rarely architecturing for future requirements or applications turn",
    "start": "1677120",
    "end": "1683120"
  },
  {
    "text": "out net positive I admit I have fallen into this trap so",
    "start": "1683120",
    "end": "1689480"
  },
  {
    "text": "many times this will be good someone will need this this will be useful it",
    "start": "1689480",
    "end": "1694940"
  },
  {
    "text": "isn't just don't don't write it so",
    "start": "1694940",
    "end": "1701000"
  },
  {
    "text": "write exactly what you need right now it's not casting Stone it's software you",
    "start": "1701000",
    "end": "1706520"
  },
  {
    "text": "can you can change these you know so when you later a few months down the",
    "start": "1706520",
    "end": "1712159"
  },
  {
    "text": "line realize that you're missing a function then add it it's okay you're allowed to do that",
    "start": "1712159",
    "end": "1719559"
  },
  {
    "text": "so the the really important thing here is to see that when when you have several parameters that",
    "start": "1722059",
    "end": "1727700"
  },
  {
    "text": "together describe one thing that is a problem and you try to figure out a way",
    "start": "1727700",
    "end": "1733159"
  },
  {
    "text": "to model this one thing in one type",
    "start": "1733159",
    "end": "1738860"
  },
  {
    "text": "future you will thank you and your colleagues will thank you a lot I should mention that in simpleplus 20",
    "start": "1738860",
    "end": "1745460"
  },
  {
    "text": "you have a span foreign as the parameter in these cases used to",
    "start": "1745460",
    "end": "1754100"
  },
  {
    "text": "span to implement this buffer View the reason for this is that the span is",
    "start": "1754100",
    "end": "1761299"
  },
  {
    "text": "of this kind that is it's extremely versatile it has so many functions that you can do to manipulate things that you",
    "start": "1761299",
    "end": "1768679"
  },
  {
    "text": "actually don't want to do for the for the network buffers so implement the buffer view in terms of",
    "start": "1768679",
    "end": "1774980"
  },
  {
    "text": "span that saves you a lot of headache but don't use this band directly in the",
    "start": "1774980",
    "end": "1781940"
  },
  {
    "text": "function signatures I'm saying that as a person who did exactly this a year and a half ago so",
    "start": "1781940",
    "end": "1789200"
  },
  {
    "text": "don't it's not the end of the world you're not destroying anything but but you're",
    "start": "1789200",
    "end": "1796220"
  },
  {
    "text": "your ability to limit the users from doing stupid things is",
    "start": "1796220",
    "end": "1802279"
  },
  {
    "text": "gone so keep the scope of what you're allowed to do to exactly what is needed to do",
    "start": "1802279",
    "end": "1811539"
  },
  {
    "text": "foreign the name of that piece",
    "start": "1812960",
    "end": "1821559"
  },
  {
    "text": "ah this example is not great but um",
    "start": "1824440",
    "end": "1829360"
  },
  {
    "text": "bear with me so we have some kind of socket server socket where we give it",
    "start": "1831080",
    "end": "1837080"
  },
  {
    "text": "which IP port to listen to and where there is TCP or UCP uh",
    "start": "1837080",
    "end": "1842860"
  },
  {
    "text": "the the address to listen to uh 0.0.0.0",
    "start": "1842860",
    "end": "1847940"
  },
  {
    "text": "is the default address saying that I'm listening to every Network address that this server has",
    "start": "1847940",
    "end": "1855980"
  },
  {
    "text": "uh and maybe I want to actually receive a",
    "start": "1855980",
    "end": "1861919"
  },
  {
    "text": "multicast stream that is not usual so it's it's a stood optional that defaults to and are left",
    "start": "1861919",
    "end": "1867740"
  },
  {
    "text": "uh and maybe I want to be able to choose between",
    "start": "1867740",
    "end": "1874059"
  },
  {
    "text": "these sockets being blocking or non-blocking i o",
    "start": "1874059",
    "end": "1880000"
  },
  {
    "text": "but it makes sense to default them to to be non-blocking",
    "start": "1880460",
    "end": "1885399"
  },
  {
    "text": "but what if I want all of these with the defaults except for non-blocking",
    "start": "1885500",
    "end": "1891460"
  },
  {
    "text": "the this is not a pleasant API to work with uh as a user",
    "start": "1891919",
    "end": "1898179"
  },
  {
    "text": "but what you can do is you create a a config struct",
    "start": "1898279",
    "end": "1905000"
  },
  {
    "text": "I think this situation is most common in in configuration cases where you have",
    "start": "1905000",
    "end": "1910580"
  },
  {
    "text": "a large number of things that you can tweak and they have defaults that make sense but you occasionally want to",
    "start": "1910580",
    "end": "1918080"
  },
  {
    "text": "change a few of them so now we can just transmogrify this parameter list into",
    "start": "1918080",
    "end": "1926059"
  },
  {
    "text": "members of the struct and say which which Port TCP string View for the address and the multicast etc etc",
    "start": "1926059",
    "end": "1934220"
  },
  {
    "text": "and we use member initializers for the default so if you just create a config",
    "start": "1934220",
    "end": "1941419"
  },
  {
    "text": "everything will be as defaulted here and we can call",
    "start": "1941419",
    "end": "1947360"
  },
  {
    "text": "our Constructor in this case with just saying exactly the things we want we want Port 60 and 66 we want the address",
    "start": "1947360",
    "end": "1953059"
  },
  {
    "text": "to be localhost and we want non-blocking and everything else is what was the default",
    "start": "1953059",
    "end": "1960380"
  },
  {
    "text": "this is used in simple plus 20 designated the initializing list which makes life so nice",
    "start": "1960380",
    "end": "1968240"
  },
  {
    "text": "you really want these if you don't have a C4 plus 20 yet which",
    "start": "1968240",
    "end": "1975559"
  },
  {
    "text": "you should but if you don't you you can just create the create an instance first or as a local",
    "start": "1975559",
    "end": "1982460"
  },
  {
    "text": "variable and then you change the the values that you need to it's it's not the end of the world and this is",
    "start": "1982460",
    "end": "1988220"
  },
  {
    "text": "something that compilers if you're worried about the performance of this hint you're calling the Constructor for",
    "start": "1988220",
    "end": "1994399"
  },
  {
    "text": "a socket so it doesn't matter but if you are if you are the compiler is really good",
    "start": "1994399",
    "end": "2001960"
  },
  {
    "text": "at optimizing this but a meeting Port is not an error",
    "start": "2001960",
    "end": "2009760"
  },
  {
    "text": "it is if if you create this without giving a value to Port",
    "start": "2009760",
    "end": "2015340"
  },
  {
    "text": "this is extremely well defined by the by the language or what happens what it",
    "start": "2015340",
    "end": "2021640"
  },
  {
    "text": "means so compilers don't warn that it's almost",
    "start": "2021640",
    "end": "2027340"
  },
  {
    "text": "true uh msvc I have not I have not been able",
    "start": "2027340",
    "end": "2033039"
  },
  {
    "text": "to get msvc to warn me for this with regardless of what flags I've tried the same with clang clang is perfectly happy",
    "start": "2033039",
    "end": "2039340"
  },
  {
    "text": "with this Jesus see once almost always if you have compiled",
    "start": "2039340",
    "end": "2046299"
  },
  {
    "text": "with a W extra almost always the exception being if you",
    "start": "2046299",
    "end": "2052480"
  },
  {
    "text": "just default construct the whole config then it says absolutely nothing",
    "start": "2052480",
    "end": "2057839"
  },
  {
    "text": "so this is a little bit of a problem I think because it's a it's a really bad",
    "start": "2058659",
    "end": "2064540"
  },
  {
    "text": "thing to to not be explicit about what port is",
    "start": "2064540",
    "end": "2070560"
  },
  {
    "text": "so how can we do that how can we ensure that the color of this",
    "start": "2070720",
    "end": "2077260"
  },
  {
    "text": "gives us support well here is the most advanced simple plus",
    "start": "2077260",
    "end": "2083080"
  },
  {
    "text": "I'm going to show today because it's a template and create notice this morning that it's only the",
    "start": "2083080",
    "end": "2089679"
  },
  {
    "text": "front row that likes writing templates so I have a",
    "start": "2089679",
    "end": "2096099"
  },
  {
    "text": "template clause a closed template sorry a close template must init of t",
    "start": "2096099",
    "end": "2102580"
  },
  {
    "text": "and we have a must-init Constructor of that takes a t",
    "start": "2102580",
    "end": "2109180"
  },
  {
    "text": "and we do not write a default Constructor and neither will the compiler write one for us which means",
    "start": "2109180",
    "end": "2115540"
  },
  {
    "text": "that a mastinate of T is not default constructable",
    "start": "2115540",
    "end": "2120300"
  },
  {
    "text": "we have access operators conversion operators for the",
    "start": "2121180",
    "end": "2127000"
  },
  {
    "text": "underlying types for the underlying value sorry and uh",
    "start": "2127000",
    "end": "2133000"
  },
  {
    "text": "now I just violated what I said a few slides back and saying that you should you almost always want these to be",
    "start": "2133000",
    "end": "2139780"
  },
  {
    "text": "explicit and in this case I think",
    "start": "2139780",
    "end": "2145119"
  },
  {
    "text": "it doesn't matter sure write them explicit if you want to it's not wrong but I think in this case",
    "start": "2145119",
    "end": "2152260"
  },
  {
    "text": "it doesn't matter if I want a must in it of int then for all practical purposes I",
    "start": "2152260",
    "end": "2158740"
  },
  {
    "text": "just want an end except I want to ensure that it is is initialized",
    "start": "2158740",
    "end": "2165460"
  },
  {
    "text": "so it's in this case at least it's not a problem that they are implicit",
    "start": "2165460",
    "end": "2171820"
  },
  {
    "text": "so I can rewrite the config struct to have a must init of viewing 16t",
    "start": "2171820",
    "end": "2178920"
  },
  {
    "text": "and what happens now if I forget to initialize it",
    "start": "2179200",
    "end": "2185940"
  },
  {
    "text": "is a compilation error",
    "start": "2185940",
    "end": "2190020"
  },
  {
    "text": "that is good that is what we want",
    "start": "2191680",
    "end": "2196019"
  },
  {
    "text": "you have now an an interface that is easy to use",
    "start": "2197200",
    "end": "2203200"
  },
  {
    "text": "you express exactly the things you you want to express and getting it wrong is really hard",
    "start": "2203200",
    "end": "2210520"
  },
  {
    "text": "that is good so creating structs with parameters is",
    "start": "2210520",
    "end": "2217540"
  },
  {
    "text": "especially helpful when many of them have reasonable defaults typically it's uh",
    "start": "2217540",
    "end": "2223680"
  },
  {
    "text": "configuration in my experience and the technique is extra useful since",
    "start": "2223680",
    "end": "2229720"
  },
  {
    "text": "C plus 20 because the designated initializer syntax is just so nice",
    "start": "2229720",
    "end": "2237599"
  },
  {
    "text": "yeah right wrong key",
    "start": "2238480",
    "end": "2244180"
  },
  {
    "text": "wrong key is interesting so we have some kind of",
    "start": "2244180",
    "end": "2250020"
  },
  {
    "text": "broker of networking connections",
    "start": "2251280",
    "end": "2256619"
  },
  {
    "text": "and we have we have maps of client sessions and",
    "start": "2256619",
    "end": "2262960"
  },
  {
    "text": "service sessions and we have here this function close server because that takes a server ID",
    "start": "2262960",
    "end": "2268540"
  },
  {
    "text": "foreign and I think we may have made a mistake",
    "start": "2268540",
    "end": "2275440"
  },
  {
    "text": "this is probably not what you want um the compiler will not complain",
    "start": "2275440",
    "end": "2282539"
  },
  {
    "text": "the reason it will not is because our client ID and server ID are ends because",
    "start": "2282780",
    "end": "2289300"
  },
  {
    "text": "they are just type Alias is there it's type Alias for an INT which means that it's basically a comment and it says",
    "start": "2289300",
    "end": "2296220"
  },
  {
    "text": "Dear reader this hint here is meant to be a server ID",
    "start": "2296220",
    "end": "2301839"
  },
  {
    "text": "I don't care if you give it a file descriptor or a whatever",
    "start": "2301839",
    "end": "2308338"
  },
  {
    "text": "but be advised that it really should be a server ID",
    "start": "2309460",
    "end": "2314560"
  },
  {
    "text": "which means that in this case client ID and server ID are the same type they're just spelled differently",
    "start": "2314560",
    "end": "2322359"
  },
  {
    "text": "they're both ends so again E M class to the rescue",
    "start": "2322359",
    "end": "2328359"
  },
  {
    "text": "but this this time we say enumclose client ID colon int which means that we",
    "start": "2328359",
    "end": "2333760"
  },
  {
    "text": "say that client ID is a unique type",
    "start": "2333760",
    "end": "2338800"
  },
  {
    "text": "that is an INT and server ID is another unique type",
    "start": "2338800",
    "end": "2344980"
  },
  {
    "text": "that isn't it and these are not interchangeable",
    "start": "2344980",
    "end": "2351060"
  },
  {
    "text": "this was introduced in CFL 17 by the way if you're before c plus 17 I'm very",
    "start": "2352560",
    "end": "2357940"
  },
  {
    "text": "sorry get on with the times it's 2022",
    "start": "2357940",
    "end": "2363720"
  },
  {
    "text": "in this case we get a compilation error here saying oh you're trying to close a",
    "start": "2366820",
    "end": "2373960"
  },
  {
    "text": "client session with a server ID that doesn't work",
    "start": "2373960",
    "end": "2378720"
  },
  {
    "text": "again we have moved a debugging session in worst case or in",
    "start": "2379119",
    "end": "2384460"
  },
  {
    "text": "best case a failed unit test into a compilation error it's good",
    "start": "2384460",
    "end": "2391859"
  },
  {
    "text": "uh another observation is that there is some redundancy here but closing a",
    "start": "2392980",
    "end": "2398380"
  },
  {
    "text": "server with a server ID on which we call the server session arrays uh so it's a server server",
    "start": "2398380",
    "end": "2406300"
  },
  {
    "text": "thing and a client-client thing and",
    "start": "2406300",
    "end": "2412599"
  },
  {
    "text": "we already have all the information we need in in the type because these now these aren't just comments these are",
    "start": "2412599",
    "end": "2419440"
  },
  {
    "text": "actual real types which means that we can if we want to",
    "start": "2419440",
    "end": "2425500"
  },
  {
    "text": "use overload say just closed session of a server ID or close the session of a client ID",
    "start": "2425500",
    "end": "2431339"
  },
  {
    "text": "whether you want to use overloading here is dependent on context and of preference I",
    "start": "2431339",
    "end": "2439599"
  },
  {
    "text": "guess but since these are unique non-interchangeable types you now have",
    "start": "2439599",
    "end": "2445720"
  },
  {
    "text": "the choice when they were just type aliases for INT you did not have that choice",
    "start": "2445720",
    "end": "2453480"
  },
  {
    "text": "but yeah okay let's look a little bit about how this works the the",
    "start": "2458859",
    "end": "2464800"
  },
  {
    "text": "they are kind of limited these e m classes that uh Implement a given type so you can you",
    "start": "2464800",
    "end": "2475599"
  },
  {
    "text": "can create a client ID with the curly braces and the underlying type in this",
    "start": "2475599",
    "end": "2481660"
  },
  {
    "text": "case and they're copyable and to get the underlying type you use a static cost to",
    "start": "2481660",
    "end": "2488380"
  },
  {
    "text": "to get it back and the compiler implements all the comparison operators for you so you have",
    "start": "2488380",
    "end": "2495400"
  },
  {
    "text": "equals not equals less than less equal greater than greater or equal",
    "start": "2495400",
    "end": "2500859"
  },
  {
    "text": "which means that they work perfectly in this case as keys to a student-up",
    "start": "2500859",
    "end": "2508619"
  },
  {
    "text": "bottom we may have a problem if we go on and say that",
    "start": "2511240",
    "end": "2518260"
  },
  {
    "text": "maybe identify these as ins was a mistake maybe maybe they should be strings",
    "start": "2518260",
    "end": "2525540"
  },
  {
    "text": "and we cannot have an E M Class of of a string that doesn't make sense it",
    "start": "2525820",
    "end": "2532780"
  },
  {
    "text": "well you can argue that it could make sense but it doesn't um enumclaws Works only for the",
    "start": "2532780",
    "end": "2540460"
  },
  {
    "text": "for the built-in integral types that is all you can do so how do we handle this",
    "start": "2540460",
    "end": "2545980"
  },
  {
    "text": "if we if we really want our client ID and server ID to to be identified by",
    "start": "2545980",
    "end": "2551980"
  },
  {
    "text": "strings well we can create a server ID clause",
    "start": "2551980",
    "end": "2558400"
  },
  {
    "text": "and you're probably beginning to see a pattern here so we have an explicit Constructor we have",
    "start": "2558400",
    "end": "2564700"
  },
  {
    "text": "a conversion operator to get the underlying string which can be useful in",
    "start": "2564700",
    "end": "2571599"
  },
  {
    "text": "some cases and we use the simple plus 20 Starship",
    "start": "2571599",
    "end": "2577060"
  },
  {
    "text": "operator Starship operator will Implement uh",
    "start": "2577060",
    "end": "2583420"
  },
  {
    "text": "all of the comparison functions so equal equal not equal less than less equal",
    "start": "2583420",
    "end": "2588819"
  },
  {
    "text": "greater than greater equal in terms of the the same comparisons of the",
    "start": "2588819",
    "end": "2595599"
  },
  {
    "text": "of the members of the data members so really all you need to do to get this",
    "start": "2595599",
    "end": "2601359"
  },
  {
    "text": "is to have this include compare at the top and auto operator Starship",
    "start": "2601359",
    "end": "2608319"
  },
  {
    "text": "and the equal to default at the end if you have several members they will be in",
    "start": "2608319",
    "end": "2614440"
  },
  {
    "text": "the the ordered comparisons will be in lexicographical order",
    "start": "2614440",
    "end": "2619599"
  },
  {
    "text": "in the order they are written as members which might be important to",
    "start": "2619599",
    "end": "2625359"
  },
  {
    "text": "to know but when you have only one single member it's super easy",
    "start": "2625359",
    "end": "2633180"
  },
  {
    "text": "and that that is actually all you need to do to be able to use it as a as a key in this case it works fine",
    "start": "2635079",
    "end": "2644460"
  },
  {
    "text": "so you've seen a pattern here how we create a type for what we need with one",
    "start": "2645460",
    "end": "2650940"
  },
  {
    "text": "data member and explicit Constructor and a conversion operator and then some",
    "start": "2650940",
    "end": "2656800"
  },
  {
    "text": "whatever extra functions that we need in this case comparisons",
    "start": "2656800",
    "end": "2662319"
  },
  {
    "text": "so enumclaws is absolutely amazing for creating new integer types",
    "start": "2662339",
    "end": "2668680"
  },
  {
    "text": "but they must be into decide I should actually",
    "start": "2668680",
    "end": "2674619"
  },
  {
    "text": "clarify this it's great for creating key style types based on Integer types",
    "start": "2674619",
    "end": "2681160"
  },
  {
    "text": "you do not get for example the any arithmetic operators bit arithmetics whatever they they are",
    "start": "2681160",
    "end": "2688660"
  },
  {
    "text": "not given to you you can write them because in terms of your new type but they are not given for free only the",
    "start": "2688660",
    "end": "2694839"
  },
  {
    "text": "comparisons are given for free by the compiler uh and also simple plus 20 spaceship",
    "start": "2694839",
    "end": "2701859"
  },
  {
    "text": "operator is amazing saves a lot of work",
    "start": "2701859",
    "end": "2707700"
  },
  {
    "text": "so",
    "start": "2709720",
    "end": "2712440"
  },
  {
    "text": "by using type by writing types you",
    "start": "2717060",
    "end": "2722980"
  },
  {
    "text": "reduce the risk of calling functions with the wrong values you've reduced the risk that dependent values diverge I'm",
    "start": "2722980",
    "end": "2730900"
  },
  {
    "text": "thinking specifically about this example with the network packet buffer",
    "start": "2730900",
    "end": "2737099"
  },
  {
    "text": "which is it's it's one thing so merge those into one types it makes",
    "start": "2737099",
    "end": "2743020"
  },
  {
    "text": "it easier to manage defaults and this is both in the case of the of the configuration and in the case of",
    "start": "2743020",
    "end": "2751060"
  },
  {
    "text": "functions that have some default parameter",
    "start": "2751060",
    "end": "2756220"
  },
  {
    "text": "that can be used to help prevent uninitialized data as you saw in this",
    "start": "2757000",
    "end": "2762579"
  },
  {
    "text": "mastinate template all of this is so much more convenient",
    "start": "2762579",
    "end": "2768819"
  },
  {
    "text": "if you use Simple plus 20 so please upgrade to C4 plus 20 it will make your life easier",
    "start": "2768819",
    "end": "2774640"
  },
  {
    "text": "a lot these types that you write also makes",
    "start": "2774640",
    "end": "2779740"
  },
  {
    "text": "your apis more expressive they are expressed in terms of what you want to",
    "start": "2779740",
    "end": "2785980"
  },
  {
    "text": "happen this is good and here's an important thing to know",
    "start": "2785980",
    "end": "2792040"
  },
  {
    "text": "um unless you're writing code for something that you are extremely familiar with you normally don't know",
    "start": "2792040",
    "end": "2798760"
  },
  {
    "text": "what types you will need you discover this as you work and when you discover that",
    "start": "2798760",
    "end": "2805839"
  },
  {
    "text": "hey this should be a type you write that type and you'll go back to the rest of your code base and incorporate that type",
    "start": "2805839",
    "end": "2812200"
  },
  {
    "text": "and then you continue developing and you discover another type so you write that type and you go back and introduce it to",
    "start": "2812200",
    "end": "2817839"
  },
  {
    "text": "to the rest of your code base and what happens over time with that",
    "start": "2817839",
    "end": "2823060"
  },
  {
    "text": "is that your code gradually magically",
    "start": "2823060",
    "end": "2829540"
  },
  {
    "text": "becomes easier and easier to maintain",
    "start": "2829540",
    "end": "2834720"
  },
  {
    "text": "have you heard about code rot that your your code starts with a",
    "start": "2834819",
    "end": "2842140"
  },
  {
    "text": "fairly clean and nice design and you you implement it and then reality hits and",
    "start": "2842140",
    "end": "2847480"
  },
  {
    "text": "you fix bugs and everything becomes more and more convoluted everything depends on everything it takes longer and longer to fix",
    "start": "2847480",
    "end": "2854380"
  },
  {
    "text": "problems it takes longer and longer to add new features",
    "start": "2854380",
    "end": "2859599"
  },
  {
    "text": "this is not the case if you're doing this I I used to believe in in code Rod",
    "start": "2859599",
    "end": "2864839"
  },
  {
    "text": "uh in fact I have stated as a fact that code becomes",
    "start": "2864839",
    "end": "2872140"
  },
  {
    "text": "impossible to maintain after a number of years of evolution this is wrong I was completely utterly wrong the important",
    "start": "2872140",
    "end": "2878920"
  },
  {
    "text": "thing is to when when you discover things that is a more expressive way to",
    "start": "2878920",
    "end": "2884380"
  },
  {
    "text": "do it then you then you do it you introduce a new type you refactor your code to use",
    "start": "2884380",
    "end": "2890020"
  },
  {
    "text": "the new type and the code starts to speak to the reader in terms of the problem domain",
    "start": "2890020",
    "end": "2898780"
  },
  {
    "text": "instead of in the details of the mechanisms used to solve",
    "start": "2898780",
    "end": "2904720"
  },
  {
    "text": "the problems in the domain which is important it makes your life so",
    "start": "2904720",
    "end": "2912460"
  },
  {
    "text": "much easier the color becomes just easier and easier to work with as you discover more and more of what the",
    "start": "2912460",
    "end": "2917680"
  },
  {
    "text": "actual terms of the problem domain are which I think reflects a lot of to",
    "start": "2917680",
    "end": "2924119"
  },
  {
    "text": "Kate's keynote this morning",
    "start": "2924119",
    "end": "2928200"
  },
  {
    "text": "uh if you want to learn more I unfortunately it's not out yet I strongly recommend that you watch",
    "start": "2929380",
    "end": "2936220"
  },
  {
    "text": "this talk by Chandra darga is about",
    "start": "2936220",
    "end": "2941920"
  },
  {
    "text": "uh strongly typed containers that he held at civil Plus on C uh earlier this",
    "start": "2941920",
    "end": "2947740"
  },
  {
    "text": "summer unfortunately it's it premieres on September 18th so it's it's a few weeks",
    "start": "2947740",
    "end": "2953920"
  },
  {
    "text": "out this is also not an advanced simple past talk at all but it goes through a",
    "start": "2953920",
    "end": "2959319"
  },
  {
    "text": "number of the the benefits and The Traps when making types for containers",
    "start": "2959319",
    "end": "2966220"
  },
  {
    "text": "so go watch that one and if you're interested in learning more about things",
    "start": "2966220",
    "end": "2973180"
  },
  {
    "text": "to think about when designing new types uh Peter somalad had a really good I",
    "start": "2973180",
    "end": "2980500"
  },
  {
    "text": "think presentation at CPP con uh 2021",
    "start": "2980500",
    "end": "2985960"
  },
  {
    "text": "where he he goes into some of someone more of the theory and gives names to",
    "start": "2985960",
    "end": "2992640"
  },
  {
    "text": "types of types so to speak uh just watch that one it's it's useful",
    "start": "2992640",
    "end": "3000540"
  },
  {
    "text": "and of course go go watch uh Tim Klein's web page with this amazing interleaved",
    "start": "3000540",
    "end": "3008040"
  },
  {
    "text": "personal art you can actually buy them uh so go and have a look I think they're super",
    "start": "3008040",
    "end": "3016579"
  },
  {
    "text": "and with that I say say thank you for your kind attention [Applause]",
    "start": "3016619",
    "end": "3031560"
  },
  {
    "text": "questions tomatoes",
    "start": "3031560",
    "end": "3034940"
  },
  {
    "text": "okay",
    "start": "3037260",
    "end": "3039740"
  },
  {
    "text": "foreign",
    "start": "3042780",
    "end": "3045780"
  },
  {
    "text": "what is my take on core guideline number 51 was it 51 about a prefer",
    "start": "3054780",
    "end": "3062000"
  },
  {
    "text": "prefer default parameters over overload um",
    "start": "3062000",
    "end": "3067760"
  },
  {
    "text": "you're evil I think they are right but you really",
    "start": "3070319",
    "end": "3076500"
  },
  {
    "text": "need to be careful about the the types that you have in the function if you have function f of int equals three then",
    "start": "3076500",
    "end": "3085619"
  },
  {
    "text": "then you're in a really bad situation but if you have all the parameters are of unique and non-interchangeable types",
    "start": "3085619",
    "end": "3092280"
  },
  {
    "text": "and it makes perfect sense and it's very good the reason for that uh",
    "start": "3092280",
    "end": "3098400"
  },
  {
    "text": "for that guideline is if we hear the interviews Developers for",
    "start": "3098400",
    "end": "3106079"
  },
  {
    "text": "your company a few hands yeah have you ever interviewed someone who",
    "start": "3106079",
    "end": "3112020"
  },
  {
    "text": "says that they are a c plus expert yeah have you not asked them to describe the",
    "start": "3112020",
    "end": "3118500"
  },
  {
    "text": "the rules for a overload resolution that that is that is why that rule",
    "start": "3118500",
    "end": "3125579"
  },
  {
    "text": "exists because no one knows the roof for a overload resolution",
    "start": "3125579",
    "end": "3133640"
  },
  {
    "text": "other questions",
    "start": "3134940",
    "end": "3137720"
  },
  {
    "text": "it seems like we need a new type Dev that actually defines a new type instead",
    "start": "3143099",
    "end": "3148559"
  },
  {
    "text": "of an alias yes I agree 100 it would be great we don't have it though",
    "start": "3148559",
    "end": "3155339"
  },
  {
    "text": "under",
    "start": "3155339",
    "end": "3157880"
  },
  {
    "text": "do I want to mention some libraries for strong types uh foreign",
    "start": "3162240",
    "end": "3168859"
  },
  {
    "text": "okay I I've written one uh you can find it on my GitHub my GitHub user is roll bear uh",
    "start": "3170599",
    "end": "3179280"
  },
  {
    "text": "Peter somala that I mentioned has one Anthony Williams who wrote the a lot of",
    "start": "3179280",
    "end": "3187740"
  },
  {
    "text": "a lot of threading things has one library that I know of uh",
    "start": "3187740",
    "end": "3194099"
  },
  {
    "text": "sorry Jonathan bakara yes of course yes",
    "start": "3194099",
    "end": "3199500"
  },
  {
    "text": "definitely um those are the ones I can come up with",
    "start": "3199500",
    "end": "3205619"
  },
  {
    "text": "on top of my head not familiar of course Jonathan Miller",
    "start": "3205619",
    "end": "3210660"
  },
  {
    "text": "yes the the original strong type library for C plus plus",
    "start": "3210660",
    "end": "3216500"
  },
  {
    "text": "no okay no more questions",
    "start": "3217079",
    "end": "3222740"
  },
  {
    "text": "thank you again [Applause]",
    "start": "3222740",
    "end": "3232389"
  }
]