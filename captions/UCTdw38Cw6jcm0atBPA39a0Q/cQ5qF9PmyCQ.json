[
  {
    "text": "okay it's after lunch this is the best time slot to have because I know you guys are all tired",
    "start": "8760",
    "end": "14879"
  },
  {
    "text": "right now I'll try to be as entertaining as possible uh I'm here to talk about delegates and the reason I talk about",
    "start": "14879",
    "end": "21640"
  },
  {
    "text": "delegates is because it's one of those things that was difficult for me to learn as a developer but once I finally",
    "start": "21640",
    "end": "27240"
  },
  {
    "text": "got it I'm like these things are really awesome they're really useful so I try",
    "start": "27240",
    "end": "32360"
  },
  {
    "text": "to help people get over that hurdle we're going to be looking at kind of some basics of delegates but then we're",
    "start": "32360",
    "end": "37719"
  },
  {
    "text": "going to ramp up and kind of look at a lot of the features that are out there um you know it's and just as a warning",
    "start": "37719",
    "end": "45480"
  },
  {
    "text": "for those of you who don't know delegates are kind of a Gateway into functional programming so if you're",
    "start": "45480",
    "end": "51800"
  },
  {
    "text": "afraid of functional programming you might not want to sit around for this talk um otherwise it'll make you excited",
    "start": "51800",
    "end": "59079"
  },
  {
    "text": "so if you're looking for these slides you can go to my website Jeremy bites.com and feel free to tweet awesome",
    "start": "59079",
    "end": "64920"
  },
  {
    "text": "things about me as I'm doing the talk if you'd like to tweet not awesome things about me please come talk to me about it",
    "start": "64920",
    "end": "71799"
  },
  {
    "text": "because I'm always trying to improve so uh with that let's go ahead and get started now the first thing that we have",
    "start": "71799",
    "end": "78880"
  },
  {
    "text": "a problem with delegates is kind of understanding exactly what it is so I start out with a definition that",
    "start": "78880",
    "end": "85360"
  },
  {
    "text": "actually comes from the Microsoft documentation and a delegate is a type type that defines a method",
    "start": "85360",
    "end": "93320"
  },
  {
    "text": "signature that takes a little while to wrap your head around because if you're a c programmer and you're kind of used",
    "start": "93320",
    "end": "99439"
  },
  {
    "text": "to well yeah I understand types you know we've got classes they've got properties and they've got methods and all these",
    "start": "99439",
    "end": "105200"
  },
  {
    "text": "other things we've got structs value types we've got stuff like int and list of T and all that cool stuff there's I",
    "start": "105200",
    "end": "112520"
  },
  {
    "text": "understand types but this isn't quite like those types instead of this being",
    "start": "112520",
    "end": "118399"
  },
  {
    "text": "something that's like holding data and has functionality all it does is represent the signature of a method so",
    "start": "118399",
    "end": "126280"
  },
  {
    "text": "it's something that we can actually assign to and later on we can invoke any methods that are hooked up to a delegate",
    "start": "126280",
    "end": "133360"
  },
  {
    "text": "but um it's it's kind of odd and like I",
    "start": "133360",
    "end": "138640"
  },
  {
    "text": "said it took me a while to wrap my head around that now we might say well what do we care about delegates well there's",
    "start": "138640",
    "end": "144680"
  },
  {
    "text": "a lot of cool features and there's a lot of places where we find them already one cool feature of them is decoupling code",
    "start": "144680",
    "end": "151120"
  },
  {
    "text": "and we're going to be looking at that today so they they actually allow us to kind of easily implement the strategy",
    "start": "151120",
    "end": "157599"
  },
  {
    "text": "pattern which sounds a lot smarter than it really is what we'll see it's just like choosing what we want to do later",
    "start": "157599",
    "end": "164159"
  },
  {
    "text": "is kind of what that means uh it also helps us with um because we can use",
    "start": "164159",
    "end": "169400"
  },
  {
    "text": "methods as parameters and like I said kind of a Gateway into the functional programming World these are what are",
    "start": "169400",
    "end": "174599"
  },
  {
    "text": "known as higher order functions where we actually have methods that take U methods as parameters and it's actually",
    "start": "174599",
    "end": "181800"
  },
  {
    "text": "kind of a cool thing now they have a cool capability which is called multicasting and I'll show you what that",
    "start": "181800",
    "end": "188360"
  },
  {
    "text": "is because that's really cool and then also um if you've ever used an event handler you've already used a delegate",
    "start": "188360",
    "end": "194920"
  },
  {
    "text": "without even knowing it because event handlers are in fact just special kinds of delegates they're delegates that have",
    "start": "194920",
    "end": "200400"
  },
  {
    "text": "a few more restrictions on them and then the most awesome thing in C is link",
    "start": "200400",
    "end": "205680"
  },
  {
    "text": "language integrated query I love link link is amazingly awesome I also love lambed Expressions as you'll see as we",
    "start": "205680",
    "end": "212239"
  },
  {
    "text": "go and the thing is you know we've got all this cool stuff that we can look at um but we're not going to look at",
    "start": "212239",
    "end": "219200"
  },
  {
    "text": "them in slides because I'm not a big fan of slides in fact that's my last slide",
    "start": "219200",
    "end": "224959"
  },
  {
    "text": "is that okay with everybody I love coat I love showing things in coat so we're going to spend",
    "start": "224959",
    "end": "230200"
  },
  {
    "text": "the rest of our time in visual studio now the first thing I'm going to do is",
    "start": "230200",
    "end": "235319"
  },
  {
    "text": "wow you with my amazing UI development skills trust me just hang on to",
    "start": "235319",
    "end": "243079"
  },
  {
    "text": "something come on Visual Studio I know you can do",
    "start": "243079",
    "end": "248120"
  },
  {
    "text": "it I always get concerned when it like says writing component",
    "start": "248840",
    "end": "254480"
  },
  {
    "text": "cache it's like didn't you do that",
    "start": "254480",
    "end": "258639"
  },
  {
    "text": "earlier come on you can do",
    "start": "260519",
    "end": "264280"
  },
  {
    "text": "it I'm pretty sure Visual Studio can do this so um in the meantime I think I",
    "start": "267800",
    "end": "274280"
  },
  {
    "text": "have some shadow puppets that I can do come",
    "start": "274280",
    "end": "280400"
  },
  {
    "text": "on okay I like that much better so let me run this application before we look at what's inside of it because again I",
    "start": "280919",
    "end": "286440"
  },
  {
    "text": "want you to be amazed at my UI skills now this is WPF because I love zaml zaml",
    "start": "286440",
    "end": "292000"
  },
  {
    "text": "is an awesome UI development tool and as you can see on the left hand side we have a list of uh data items these are",
    "start": "292000",
    "end": "299360"
  },
  {
    "text": "person objects which we'll see in just a bit and for those of you who are like yeah it's been kind of a really long",
    "start": "299360",
    "end": "307039"
  },
  {
    "text": "week so far and I'm kind of tired after lunch if you want to give up on the delegates talk I'll give you a little",
    "start": "307039",
    "end": "313039"
  },
  {
    "text": "challenge figure out what my data set is but you're not allowed to use any internet connected device for that so if",
    "start": "313039",
    "end": "319800"
  },
  {
    "text": "you can figure out what my data set is please come talk to me afterwards because you're the kind of geek I want to hang out with but what we're going to",
    "start": "319800",
    "end": "326240"
  },
  {
    "text": "do is we're actually going to work with this data by just doing some processing with it and we'll see how delegates work",
    "start": "326240",
    "end": "332319"
  },
  {
    "text": "by doing this so you can see we've got some radio buttons here that we can pick and we're going to put some output data",
    "start": "332319",
    "end": "339880"
  },
  {
    "text": "in that box on the left hand side we also have some actions with some checkboxes and right now this process",
    "start": "339880",
    "end": "345199"
  },
  {
    "text": "data button doesn't do anything this is what we're going to fill in so first of all let's take a look at",
    "start": "345199",
    "end": "351639"
  },
  {
    "text": "our data class which is called person and it's an amazingly simple class it has four",
    "start": "351639",
    "end": "358800"
  },
  {
    "text": "properties and a two string method so it's just got the first name a last name a start date and a rating so that's just",
    "start": "358800",
    "end": "365199"
  },
  {
    "text": "the shape of our data and then I've overwritten the default two string so",
    "start": "365199",
    "end": "370319"
  },
  {
    "text": "that we can kind of give a nice format if someone just ch two string on this now what I want to do is I want to be",
    "start": "370319",
    "end": "376960"
  },
  {
    "text": "able to Output Different Strings you know different uh ways of outputting",
    "start": "376960",
    "end": "382120"
  },
  {
    "text": "this particular uh class without having to go in and write a whole bunch of different methods inside this class and",
    "start": "382120",
    "end": "389599"
  },
  {
    "text": "so the way I'm going to do that is by using a delegate now a delegate like I",
    "start": "389599",
    "end": "395720"
  },
  {
    "text": "said is a type that defines a method signature so what I want if I wanted to",
    "start": "395720",
    "end": "402039"
  },
  {
    "text": "for example have something that could do this to string I could write a method that takes a person object as a",
    "start": "402039",
    "end": "408199"
  },
  {
    "text": "parameter and returns a string that's a pretty simple signature so I'm going to write a custom Delegate for this just to",
    "start": "408199",
    "end": "414120"
  },
  {
    "text": "start out with so I'm going to say public we'll make it a public delegate delegate and it's going to return a",
    "start": "414120",
    "end": "421000"
  },
  {
    "text": "string we'll go ahead and call this person",
    "start": "421000",
    "end": "425479"
  },
  {
    "text": "formatter and it will take a person as a parameter which we'll just call",
    "start": "426720",
    "end": "432680"
  },
  {
    "text": "input so if you notice here I just have a method signature there's no method",
    "start": "432680",
    "end": "438120"
  },
  {
    "text": "body all I'm saying is I'm creating this custom type and this custom type",
    "start": "438120",
    "end": "443800"
  },
  {
    "text": "represents a method that takes a person as a parameter and returns a string now",
    "start": "443800",
    "end": "449720"
  },
  {
    "text": "you might say what's the use of this well now I can create a custom two string method really really easily in my",
    "start": "449720",
    "end": "455639"
  },
  {
    "text": "class so what I'm going to do is just create another two string here so we'll say",
    "start": "455639",
    "end": "460960"
  },
  {
    "text": "public return a string called two string and this is going to take a",
    "start": "460960",
    "end": "468120"
  },
  {
    "text": "person formatter delegate as a variable so basically what we're going",
    "start": "468120",
    "end": "474680"
  },
  {
    "text": "to do is pass a method as a parameter to another method now do we want to do this",
    "start": "474680",
    "end": "480639"
  },
  {
    "text": "well you'll see why we want to do this in just a bit for now inside the body of this method I need to run this method",
    "start": "480639",
    "end": "487560"
  },
  {
    "text": "that's hooked up to it and that's known as invoking the delegate so I can say formatter do",
    "start": "487560",
    "end": "493400"
  },
  {
    "text": "invoke and then if you notice down here when we uh the parameter that the invoke",
    "start": "493400",
    "end": "499680"
  },
  {
    "text": "wants is a person object and that makes sense because again we need a person as a parameter and we're going to return a",
    "start": "499680",
    "end": "504800"
  },
  {
    "text": "string here now since we're inside a person class I'm just going to use this as the parameter so you're going to use",
    "start": "504800",
    "end": "510599"
  },
  {
    "text": "whatever object that we're currently in and then again this does return a",
    "start": "510599",
    "end": "515800"
  },
  {
    "text": "string so that means that we can just return the output of this for our two",
    "start": "515800",
    "end": "521120"
  },
  {
    "text": "string method and so basically what we're going to do is run the delegate and return whatever string that delegate",
    "start": "521120",
    "end": "528000"
  },
  {
    "text": "method gives us back why would we want to do that I keep",
    "start": "528000",
    "end": "534600"
  },
  {
    "text": "asking that question well let's do something with it so that we can see why now for this I'm going to flip to the",
    "start": "534600",
    "end": "540880"
  },
  {
    "text": "code behind of our form just to keep things simple I just have everything in the code behind so that we can focus on",
    "start": "540880",
    "end": "547040"
  },
  {
    "text": "delegates and not necessarily you know gigantic cool architectures for complex applications and you can see I have this",
    "start": "547040",
    "end": "553360"
  },
  {
    "text": "process data button undor click event handler here and right now it's just clearing that output list box so what I",
    "start": "553360",
    "end": "560560"
  },
  {
    "text": "want to do is I want to use that two string method but in order to that use that two",
    "start": "560560",
    "end": "566640"
  },
  {
    "text": "string method I'm going to need something that matches that delegate well first let me go ahead",
    "start": "566640",
    "end": "572920"
  },
  {
    "text": "and and uh put in a for each Loop here so I'm going to Loop",
    "start": "573680",
    "end": "579040"
  },
  {
    "text": "through each person in our list box so we've got the person list box.",
    "start": "579040",
    "end": "584640"
  },
  {
    "text": "items and then I have this add to list method which we can see down at the",
    "start": "584640",
    "end": "589720"
  },
  {
    "text": "bottom which will just add items to our output list and this wants a string so I could say person. two string and that",
    "start": "589720",
    "end": "596480"
  },
  {
    "text": "would just give us the default two string method on the object but we have",
    "start": "596480",
    "end": "601560"
  },
  {
    "text": "an overload that says hey we can pass in a person formatter variable",
    "start": "601560",
    "end": "607920"
  },
  {
    "text": "here okay how do we pass in a person formatter all we need to do is create a",
    "start": "607920",
    "end": "613720"
  },
  {
    "text": "method that matches that uh method signature so up here I'm just going to",
    "start": "613720",
    "end": "619760"
  },
  {
    "text": "create a private method that returns a string so again it has to return a string take a person as a parameter I'm",
    "start": "619760",
    "end": "626640"
  },
  {
    "text": "going to call this output last name it's going to take a person as a parameter",
    "start": "626640",
    "end": "633160"
  },
  {
    "text": "input and then we're just going to return input. last name are you guys",
    "start": "633160",
    "end": "639079"
  },
  {
    "text": "horribly impressed with my coding skills yet trust me it does get better I I",
    "start": "639079",
    "end": "646200"
  },
  {
    "text": "hope so now that I have this I can actually call I can actually pass this",
    "start": "647399",
    "end": "652839"
  },
  {
    "text": "method to my two string method that I have down here so I'm going to Loop",
    "start": "652839",
    "end": "658279"
  },
  {
    "text": "through all the items it's going to call the two- string method passing in this other method that",
    "start": "658279",
    "end": "663720"
  },
  {
    "text": "says here's what you want to do with this and if I run this right now and click our process data button you can",
    "start": "663720",
    "end": "670360"
  },
  {
    "text": "see we have the output that's showing that now that's not real impressive because this is kind of hardcoded at",
    "start": "670360",
    "end": "677040"
  },
  {
    "text": "compile time and uh if you notice I have some radio buttons there and I'd really like to hook those up so I can change",
    "start": "677040",
    "end": "683079"
  },
  {
    "text": "Behavior at runtime so let's go ahead and head that direction so what I'm",
    "start": "683079",
    "end": "688279"
  },
  {
    "text": "going to do is create a variable actually we'll go and put this at the top which is of type person formatter so",
    "start": "688279",
    "end": "696399"
  },
  {
    "text": "again that's our delegate type and I'm going to just call this variable",
    "start": "696399",
    "end": "702880"
  },
  {
    "text": "formatter so what this is is this is now a variable that I can assign methods to",
    "start": "702880",
    "end": "708920"
  },
  {
    "text": "as long as they match our delegate signature so again take a person as a parameter return a",
    "start": "708920",
    "end": "714399"
  },
  {
    "text": "string so that means down here in my code rather than using output last name",
    "start": "714399",
    "end": "721200"
  },
  {
    "text": "directly we can say formatter equals output last name so again assign it to",
    "start": "721200",
    "end": "727440"
  },
  {
    "text": "the method we want to use and then pass that variable",
    "start": "727440",
    "end": "732639"
  },
  {
    "text": "in now this isn't real exciting all I did was create an intermediate variable",
    "start": "732639",
    "end": "737959"
  },
  {
    "text": "but what we can see is that our code still behaves the same way at this point but now out that I have that",
    "start": "737959",
    "end": "744079"
  },
  {
    "text": "intermediate variable it would be real easy for me to just figure out",
    "start": "744079",
    "end": "750079"
  },
  {
    "text": "that I want to sign one of four five six seven different methods as many methods as I'd like to it so in this case I want",
    "start": "750079",
    "end": "757279"
  },
  {
    "text": "to create uh some methods that we can use so I'm going to add a new",
    "start": "757279",
    "end": "763880"
  },
  {
    "text": "class and we'll call this form matters and this will be a public static",
    "start": "763880",
    "end": "770920"
  },
  {
    "text": "class and it will have some public static methods in it now these public static methods will need to match our",
    "start": "770920",
    "end": "778720"
  },
  {
    "text": "delegate signature again take a person as a parameter return a string so we'll create a public static method that",
    "start": "778720",
    "end": "784639"
  },
  {
    "text": "returns a string I'm just going to call this one default pass in a person and this one you guys are going",
    "start": "784639",
    "end": "792639"
  },
  {
    "text": "to be really impressed with this this is just going to call the no parameter two string",
    "start": "792639",
    "end": "798560"
  },
  {
    "text": "method wow I see a lot of really excited people",
    "start": "798560",
    "end": "804720"
  },
  {
    "text": "out there yeah there's at least one",
    "start": "804720",
    "end": "810000"
  },
  {
    "text": "now uh lucky for you um you don't have to watch me type the rest of these unless you want to watch me type anyone",
    "start": "810000",
    "end": "815440"
  },
  {
    "text": "want to watch me type see the thing is if I have to type Big Blocks of code I'll start to tell",
    "start": "815440",
    "end": "821240"
  },
  {
    "text": "really bad jokes and you guys really don't want to hear that so what I've just pasted in is a",
    "start": "821240",
    "end": "827360"
  },
  {
    "text": "set of four methods that all match our delegate method signature so we can see",
    "start": "827360",
    "end": "832600"
  },
  {
    "text": "they all take a person as a parameter and they all return a string but they all do something uh slightly different",
    "start": "832600",
    "end": "839160"
  },
  {
    "text": "so again that first one there we're just going to do the default that's on our person class the second one here called",
    "start": "839160",
    "end": "845279"
  },
  {
    "text": "last name two upper that uppercase is the last name hopefully that's kind of",
    "start": "845279",
    "end": "850399"
  },
  {
    "text": "self-explanatory first name to lower we'll go ahead and lowercase the first name and then I have full name down at",
    "start": "850399",
    "end": "856040"
  },
  {
    "text": "the bottom and this will do last name comma first name and so that's okay for",
    "start": "856040",
    "end": "861800"
  },
  {
    "text": "most western names for Eastern names that doesn't work out too well but um I'll leave localization up to you so now",
    "start": "861800",
    "end": "869079"
  },
  {
    "text": "now that I have these four different methods that match the method signature I can assign any one of these to my",
    "start": "869079",
    "end": "876160"
  },
  {
    "text": "delegate variable that I have and what that means is I can hook that up to the",
    "start": "876160",
    "end": "881320"
  },
  {
    "text": "radio buttons that I have in my UI and this is where things start to get really cool so I'm just going to create a",
    "start": "881320",
    "end": "888040"
  },
  {
    "text": "little method here private void called assign delegate and what we're going to do in",
    "start": "888040",
    "end": "893959"
  },
  {
    "text": "here is we're just going to assign one of these values to the format or variable that we have have now uh again",
    "start": "893959",
    "end": "902480"
  },
  {
    "text": "I won't make you watch me type in all this code unless you want me",
    "start": "902480",
    "end": "908519"
  },
  {
    "text": "to anyone yeah I",
    "start": "908519",
    "end": "915000"
  },
  {
    "text": "know and so basically what I'm doing is I'm looking at",
    "start": "916759",
    "end": "922120"
  },
  {
    "text": "um okay apparently I named it something different",
    "start": "922120",
    "end": "927480"
  },
  {
    "text": "fine actually I like format person better I'm going the other",
    "start": "927480",
    "end": "933600"
  },
  {
    "text": "way okay so what I've done in this assigned delegate is based on the various radio buttons we have so I have",
    "start": "937480",
    "end": "944160"
  },
  {
    "text": "a default string button a last name String button a first name String button a full name String button based on that",
    "start": "944160",
    "end": "949839"
  },
  {
    "text": "I'm just going to assign one of those uh formatter methods to my uh delegate that",
    "start": "949839",
    "end": "956440"
  },
  {
    "text": "I have here you guys following me so far this is where things now start to change",
    "start": "956440",
    "end": "961639"
  },
  {
    "text": "at runtime because instead of assigning this format person directly to this output last name method that I have here",
    "start": "961639",
    "end": "968560"
  },
  {
    "text": "I'm going to call assign delegate and what that will do is that will look at the state of our UI elements and decide",
    "start": "968560",
    "end": "974800"
  },
  {
    "text": "which thing we want to do in fact we'll go ahead and just get rid of that output last name",
    "start": "974800",
    "end": "981319"
  },
  {
    "text": "completely now when I run the application we'll see that our radio buttons actually",
    "start": "982199",
    "end": "987680"
  },
  {
    "text": "work so if we click on the process data button the default again is the default two string that we have on the person",
    "start": "987680",
    "end": "994319"
  },
  {
    "text": "class if I click on the last name now we get the last name to uppercase first",
    "start": "994319",
    "end": "999399"
  },
  {
    "text": "name is first name to lowercase and full name is last name comma first",
    "start": "999399",
    "end": "1006160"
  },
  {
    "text": "name that starts to get really interesting when we think about what's actually happening",
    "start": "1006160",
    "end": "1012639"
  },
  {
    "text": "here because if we go back to our code and look at our person class",
    "start": "1012639",
    "end": "1020120"
  },
  {
    "text": "what this has given me the ability to do is change the behavior of my person",
    "start": "1020120",
    "end": "1025600"
  },
  {
    "text": "class without having to change the person class itself it's given me an",
    "start": "1025600",
    "end": "1030798"
  },
  {
    "text": "extensibility point and if you're one of those solid design principles people this is an example of the open closed",
    "start": "1030799",
    "end": "1037520"
  },
  {
    "text": "principle it's open for extension but closed for modification so I can change",
    "start": "1037520",
    "end": "1043480"
  },
  {
    "text": "how this class displays itself when I call two string without having to change the class itself",
    "start": "1043480",
    "end": "1049880"
  },
  {
    "text": "now this class is pretty simple but we could also argue that this is an example of the single responsibility Principle",
    "start": "1049880",
    "end": "1055280"
  },
  {
    "text": "as well because we could say okay what's the responsibility of this class what is its reason to change well it's not doing",
    "start": "1055280",
    "end": "1063240"
  },
  {
    "text": "much right now granted but probably its primary responsibility is holding the data holding those fields that it has",
    "start": "1063240",
    "end": "1070080"
  },
  {
    "text": "its responsibility isn't figuring out what format it should output itself in that should be somebody else's job so",
    "start": "1070080",
    "end": "1077880"
  },
  {
    "text": "this gives us a really really easy way to do that and when I first saw this I'm like this is really really cool wow and",
    "start": "1077880",
    "end": "1086720"
  },
  {
    "text": "then I think I mentioned that I might talk about the strategy pattern this is a very simple implementation of the",
    "start": "1086720",
    "end": "1092600"
  },
  {
    "text": "strategy pattern too so if you're one of those people that are looking for those kinds of elements and saying oh that's",
    "start": "1092600",
    "end": "1098320"
  },
  {
    "text": "curious maybe I can use that in the future delegates are a really awesome way that we can get there now if you",
    "start": "1098320",
    "end": "1106039"
  },
  {
    "text": "notice I created a custom delegate now you probably didn't notice that but my",
    "start": "1106039",
    "end": "1111200"
  },
  {
    "text": "custom delegate is called person formatter and that's actually a custom type that I created just like my person",
    "start": "1111200",
    "end": "1118480"
  },
  {
    "text": "class is a custom type that I created but I don't have to create custom types for delegates because theet framework",
    "start": "1118480",
    "end": "1125480"
  },
  {
    "text": "has these really awesome built-in delegate types called funk in action has",
    "start": "1125480",
    "end": "1130520"
  },
  {
    "text": "anyone seen Funk well yeah I'm sure you",
    "start": "1130520",
    "end": "1135679"
  },
  {
    "text": "have so Funk is awesome but the first time you see it you're like I have no",
    "start": "1135679",
    "end": "1141000"
  },
  {
    "text": "idea what this thing is so I'm going to go to help because I I read documentation for some reason I'm just",
    "start": "1141000",
    "end": "1147039"
  },
  {
    "text": "going to type in Funk of T we'll grab this one Funk of t t result and all this is It's a built-in",
    "start": "1147039",
    "end": "1155000"
  },
  {
    "text": "delegate type that uses generics so if we look at this we'll see",
    "start": "1155000",
    "end": "1160159"
  },
  {
    "text": "I have Funk of TT result now T is the argument it's kind",
    "start": "1160159",
    "end": "1165360"
  },
  {
    "text": "of hard to tell but those are just parentheses so this T AR that's the parameter that this method takes and T",
    "start": "1165360",
    "end": "1172320"
  },
  {
    "text": "result if we can see is actually the return type that's coming back from this funk so basically this can represent any",
    "start": "1172320",
    "end": "1179720"
  },
  {
    "text": "method that takes one parameter and returns a result that means that I can get rid of",
    "start": "1179720",
    "end": "1186000"
  },
  {
    "text": "my custom delegate type and use this one instead now before I do that I want to show how related these are I'm just",
    "start": "1186000",
    "end": "1193320"
  },
  {
    "text": "going to copy this code and paste it",
    "start": "1193320",
    "end": "1199360"
  },
  {
    "text": "right underneath my custom delegate and then get rid of some of this white space here and just show how these things line",
    "start": "1199360",
    "end": "1208480"
  },
  {
    "text": "up because again the first time I saw funk I was like yeah I'm not exactly sure what this thing is but it's just a",
    "start": "1208480",
    "end": "1215440"
  },
  {
    "text": "custom delegate or a built-in delegate I should say that has generics so we can see in our instead of having string we",
    "start": "1215440",
    "end": "1222440"
  },
  {
    "text": "have t result so that again we can put in whatever type we want there and then for the uh parameter instead of having",
    "start": "1222440",
    "end": "1231159"
  },
  {
    "text": "person we have t and so that means that we can pick any",
    "start": "1231159",
    "end": "1236400"
  },
  {
    "text": "type that we want for that so that means is instead of creating this custom type I can use this buil-in one and that's",
    "start": "1236400",
    "end": "1243240"
  },
  {
    "text": "what I'm going to do I'm just going to delete my custom delegate type now you'll notice my two string method is no",
    "start": "1243240",
    "end": "1249640"
  },
  {
    "text": "longer happy but all I can do is replace this with funk of person",
    "start": "1249640",
    "end": "1257320"
  },
  {
    "text": "string and this has the same method signature so again looking at the two",
    "start": "1257400",
    "end": "1263600"
  },
  {
    "text": "generic type parameters that we have there the first one is the parameter so again person is the parameter the last",
    "start": "1263600",
    "end": "1269000"
  },
  {
    "text": "one is our output so that's our string coming back from it now notice nothing",
    "start": "1269000",
    "end": "1274840"
  },
  {
    "text": "else in this code is complaining it's like that's fine take a person as a parameter return a string I totally",
    "start": "1274840",
    "end": "1281000"
  },
  {
    "text": "understand that how much code do we need to change on the calling side well it turns out not much this person formatter",
    "start": "1281000",
    "end": "1289760"
  },
  {
    "text": "field that I have here he's no longer happy because this custom type doesn't exist but if I change this to a funk of",
    "start": "1289760",
    "end": "1295400"
  },
  {
    "text": "person string now everybody's happy",
    "start": "1295400",
    "end": "1301480"
  },
  {
    "text": "again and I don't have to change any of the other codes so I can rebuild I can rerun the application and we'll see that",
    "start": "1301480",
    "end": "1307960"
  },
  {
    "text": "it behaves exactly the same way so there's our last name or our default our last name to Upper first name to lower",
    "start": "1307960",
    "end": "1315120"
  },
  {
    "text": "and the full name so it still all works exactly the same way now there's a couple things that I",
    "start": "1315120",
    "end": "1322679"
  },
  {
    "text": "like about using funk I mean there's nothing that stops us from creating custom delegates but Funk is builtin so",
    "start": "1322679",
    "end": "1328880"
  },
  {
    "text": "I like to use stuff that's already there if I don't have to create something that's better uh there's also something",
    "start": "1328880",
    "end": "1334200"
  },
  {
    "text": "that's a little um I don't want to say esoteric but um if you have two custom",
    "start": "1334200",
    "end": "1340400"
  },
  {
    "text": "delegate types even if they have the same method signatures you can't directly assign them to each other you",
    "start": "1340400",
    "end": "1345640"
  },
  {
    "text": "have to do some casting and Dave fer knows how to do that because he was just showing me that uh in the case of funk I",
    "start": "1345640",
    "end": "1353200"
  },
  {
    "text": "can assign anything to this that matches this uh method signature so again takes a person as a parameter returns a string",
    "start": "1353200",
    "end": "1360480"
  },
  {
    "text": "and that's why all of our stuff still works now from a practical standpoint as a programmer I really like this as well",
    "start": "1360480",
    "end": "1367080"
  },
  {
    "text": "because let me come back down to this two string method now if you remember before when I did my little popup to say",
    "start": "1367080",
    "end": "1372880"
  },
  {
    "text": "hey what parameters does this two string method take well before I said this takes a person formatter if I don't know",
    "start": "1372880",
    "end": "1379400"
  },
  {
    "text": "what that is I have to go look it up I have to say oh person formatter takes a person as a parameter returns a string",
    "start": "1379400",
    "end": "1386159"
  },
  {
    "text": "but if I look at it when it's using Funk right here it says this is a funk of person string that gives me all the",
    "start": "1386159",
    "end": "1393480"
  },
  {
    "text": "information that I need in order to use this function because it's like okay I",
    "start": "1393480",
    "end": "1398960"
  },
  {
    "text": "just need a method that takes a person as a parameter and returns a string so I have all the information here and I love",
    "start": "1398960",
    "end": "1405520"
  },
  {
    "text": "when code is obvious I I hate I hate code that hides",
    "start": "1405520",
    "end": "1411600"
  },
  {
    "text": "its intention so I really like this now the cool thing about what's built into the the",
    "start": "1411600",
    "end": "1418760"
  },
  {
    "text": "framework is that there's more than just this funk of TT result there's",
    "start": "1418760",
    "end": "1425919"
  },
  {
    "text": "also Funk of T1 T2 T result so this takes two parameters and has a return",
    "start": "1426000",
    "end": "1433720"
  },
  {
    "text": "type and then it keeps going in the net 3.5 world",
    "start": "1433720",
    "end": "1439799"
  },
  {
    "text": "we were limited to this right here which is a funk of T1 T2 T3 T4 T result so we",
    "start": "1439799",
    "end": "1448799"
  },
  {
    "text": "could have four parameters and a return type now these ins and outs that you see here",
    "start": "1448799",
    "end": "1455480"
  },
  {
    "text": "these technically have to do with covariant and contravariant which I'm totally not going to talk about",
    "start": "1455480",
    "end": "1460520"
  },
  {
    "text": "today and that's in the generics world but I use these as a little clue to say",
    "start": "1460520",
    "end": "1465799"
  },
  {
    "text": "is this a parameter going in or is this a return type coming out so you can look at the signatures and see that now",
    "start": "1465799",
    "end": "1472000"
  },
  {
    "text": "someone decided years ago that four parameters might not be enough so we want to have more and so in net 4.0 we",
    "start": "1472000",
    "end": "1479039"
  },
  {
    "text": "actually got this one I really love this one this",
    "start": "1479039",
    "end": "1484120"
  },
  {
    "text": "represents a delegate that takes 16 parameters okay here's a clue if you",
    "start": "1484120",
    "end": "1490679"
  },
  {
    "text": "have a method that takes 16 parameters please please please ask a friend to look at your code I would not recommend",
    "start": "1490679",
    "end": "1498120"
  },
  {
    "text": "you using this now I was really hoping that in net 4.5 I could have one that",
    "start": "1498120",
    "end": "1503360"
  },
  {
    "text": "takes 64 parameters but apparently someone decided 16 was enough um so",
    "start": "1503360",
    "end": "1510080"
  },
  {
    "text": "anyway the the correct number is I don't know how much so we don't have to just",
    "start": "1510080",
    "end": "1515200"
  },
  {
    "text": "have one parameter coming in in order to use Funk we can use it for a variety of different",
    "start": "1515200",
    "end": "1521559"
  },
  {
    "text": "situations now if we look at what we have here here in so has anyone figured out my",
    "start": "1526159",
    "end": "1531799"
  },
  {
    "text": "data set yet don't shout it out you'll give it",
    "start": "1531799",
    "end": "1537520"
  },
  {
    "text": "away I'm going to ask you how many of them you actually know how many do you know two there's",
    "start": "1537520",
    "end": "1545159"
  },
  {
    "text": "seven of them out there anyone know more than two okay talk to me",
    "start": "1545159",
    "end": "1551039"
  },
  {
    "text": "afterwards so we've seen that we can easily swap out things at runtime we can",
    "start": "1551200",
    "end": "1557039"
  },
  {
    "text": "change the behavior of a class without changing its code I love that kind of power now you",
    "start": "1557039",
    "end": "1564520"
  },
  {
    "text": "might say um are we going to get into trouble like abusing that power well if",
    "start": "1564520",
    "end": "1570799"
  },
  {
    "text": "we look at the class that we have there's really not much that we can do with it because what we're doing is",
    "start": "1570799",
    "end": "1576000"
  },
  {
    "text": "we're saying okay this is going to take a person as a parameter technically whatever we pass in is allowed to modify",
    "start": "1576000",
    "end": "1583640"
  },
  {
    "text": "that object so it can change the properties of the person class if it",
    "start": "1583640",
    "end": "1589080"
  },
  {
    "text": "really wants to but if you notice this particular class all of the all of the members are",
    "start": "1589080",
    "end": "1595799"
  },
  {
    "text": "readr so they all have public Setters and public Getters so you can change all of those anyway now if you're more",
    "start": "1595799",
    "end": "1602360"
  },
  {
    "text": "concerned about you know am I am I uh able to change the things that are coming in here there's ways that you can",
    "start": "1602360",
    "end": "1609600"
  },
  {
    "text": "get around that so if I were to create for example read only properties have a Constructor to populate those then I",
    "start": "1609600",
    "end": "1615080"
  },
  {
    "text": "could actually make a copy of the object and make sure that you're not MO modifying anything directly but in this",
    "start": "1615080",
    "end": "1620840"
  },
  {
    "text": "case this will work for what we have now when we look at the invoke here we are going to add a little bit of exception",
    "start": "1620840",
    "end": "1626399"
  },
  {
    "text": "handling in a bit but there's a shorter uh format that we can use for this",
    "start": "1626399",
    "end": "1631960"
  },
  {
    "text": "instead of calling invoke we can just put parentheses directly after the delegate itself and",
    "start": "1631960",
    "end": "1639640"
  },
  {
    "text": "that will execute the method now there's times you may want to use this and times that you want you may",
    "start": "1639640",
    "end": "1645279"
  },
  {
    "text": "want to use invoke and we'll see that in just a bit and more for semantic purposes but this works exactly the same",
    "start": "1645279",
    "end": "1651880"
  },
  {
    "text": "way it will still invoke the delegate and run the method that's associated with",
    "start": "1651880",
    "end": "1657559"
  },
  {
    "text": "it okay so let's move on to the other part of the UI that I have here this is",
    "start": "1657559",
    "end": "1662760"
  },
  {
    "text": "where things get this is where you have to start thinking and it's really cool what you",
    "start": "1662760",
    "end": "1668320"
  },
  {
    "text": "have to start thinking about because if you notice I have this action section here and it's a set of checkboxes and so",
    "start": "1668320",
    "end": "1675799"
  },
  {
    "text": "if we look at the actions I have average rating okay so it needs to go through the items in the list and figure out if you'll",
    "start": "1675799",
    "end": "1682519"
  },
  {
    "text": "notice there's like six out of 10 Stars eight out of 10 Stars I want to take that rating value and get an average for",
    "start": "1682519",
    "end": "1688039"
  },
  {
    "text": "it for everything that's in the list for the earliest start date I want to go through the list and you'll notice these",
    "start": "1688039",
    "end": "1693600"
  },
  {
    "text": "all have years associated with them and I want to pick out the year that is earliest",
    "start": "1693600",
    "end": "1698840"
  },
  {
    "text": "chronologically for the best commander I want to go through the items in the list",
    "start": "1698840",
    "end": "1704679"
  },
  {
    "text": "pick out the one with the highest rating and display that person's name and then",
    "start": "1704679",
    "end": "1709919"
  },
  {
    "text": "for first letters what I want to do is I want to go through the items in the list pick out the first letter of the last",
    "start": "1709919",
    "end": "1715720"
  },
  {
    "text": "names and output those to the screen so if you notice I want to",
    "start": "1715720",
    "end": "1721600"
  },
  {
    "text": "perform some kind of operation based on the list itself now for this I'm not",
    "start": "1721600",
    "end": "1728320"
  },
  {
    "text": "going to have any return values instead what I'm going to have is uh methods",
    "start": "1728320",
    "end": "1733559"
  },
  {
    "text": "that just return void but take a list as a parameter",
    "start": "1733559",
    "end": "1739679"
  },
  {
    "text": "so let's just see how would I create a custom Delegate for that well again I could say uh delegate",
    "start": "1739679",
    "end": "1748559"
  },
  {
    "text": "void again it returns void and we'll call this um person action and this",
    "start": "1748559",
    "end": "1755600"
  },
  {
    "text": "takes a list of person as a parameter which we'll call input so if I wanted to create a custom",
    "start": "1755600",
    "end": "1762360"
  },
  {
    "text": "delegate this is the signature that I'd want to use and again I could take the list Loop through it output stuff into",
    "start": "1762360",
    "end": "1768880"
  },
  {
    "text": "my UI my UI output box but instead of doing that I want to use another built-in delegate",
    "start": "1768880",
    "end": "1776159"
  },
  {
    "text": "type and that is action of T now Funk of T and action of T are closely related as",
    "start": "1776159",
    "end": "1782200"
  },
  {
    "text": "you might guess action of T is a built-in delegate",
    "start": "1782200",
    "end": "1790279"
  },
  {
    "text": "that returns void so rather than returning a value it performs some type of action and we can see I've got a",
    "start": "1790279",
    "end": "1797360"
  },
  {
    "text": "parameter here so returns void takes a generic type as a parameter so again we can use this however we'd like now again",
    "start": "1797360",
    "end": "1806559"
  },
  {
    "text": "in the net 3.5 world we did have up to four parameters available and for you",
    "start": "1806559",
    "end": "1812279"
  },
  {
    "text": "brave souls who are writing really hard to read code you can have 16 parameters for Action as",
    "start": "1812279",
    "end": "1817880"
  },
  {
    "text": "well and so this is where things start to get interesting because we're going",
    "start": "1817880",
    "end": "1823279"
  },
  {
    "text": "to have some nested generics and those kind of frighten me a little bit especially the first time I saw this",
    "start": "1823279",
    "end": "1829279"
  },
  {
    "text": "that's why I wrote out this custom delegate to start with so this is going to be an",
    "start": "1829279",
    "end": "1834679"
  },
  {
    "text": "action uh and we're going to go ahead and call this process",
    "start": "1834679",
    "end": "1839919"
  },
  {
    "text": "people but I do want a parameter for this okay now the parameter that's",
    "start": "1840120",
    "end": "1847080"
  },
  {
    "text": "coming in is a list of person so I want to have an action of",
    "start": "1847080",
    "end": "1854039"
  },
  {
    "text": "list of person I love nested generic it's even better when you start using",
    "start": "1854039",
    "end": "1860639"
  },
  {
    "text": "task because like a task continuation has a parameter which is a task of",
    "start": "1860639",
    "end": "1865760"
  },
  {
    "text": "action of list of person the way that I use it so yeah nested generics are",
    "start": "1865760",
    "end": "1871200"
  },
  {
    "text": "really cool so it does take a little while to wrap your head around this but remember kind of the outer uh angle",
    "start": "1871200",
    "end": "1878159"
  },
  {
    "text": "brackets that we have there just say okay these are the parameters inside and then list of person just has its own",
    "start": "1878159",
    "end": "1884200"
  },
  {
    "text": "generic type along with it so let's go ahead and get rid of this custom delegate it because again we can just use this class level field that we have",
    "start": "1884200",
    "end": "1892399"
  },
  {
    "text": "and I want to hook up some methods to this as well now before that I'm going to do a",
    "start": "1892399",
    "end": "1898000"
  },
  {
    "text": "little bit of housekeeping because this code that I already wrote I only want this to run if our string expander is",
    "start": "1898000",
    "end": "1907200"
  },
  {
    "text": "open so if our string expander is expanded go ahead and run this little block of code that you already ran and",
    "start": "1907200",
    "end": "1914480"
  },
  {
    "text": "then if our action expander is expanded",
    "start": "1914480",
    "end": "1919840"
  },
  {
    "text": "we'll go ahead and do something else and so what I want to do is basically kind of go through the same",
    "start": "1921320",
    "end": "1927200"
  },
  {
    "text": "process that I did with our funk I want to go ahead and create a method that",
    "start": "1927200",
    "end": "1932639"
  },
  {
    "text": "will go ahead and assign whatever we want to our action delegate that we have",
    "start": "1932639",
    "end": "1939840"
  },
  {
    "text": "so I'll go ahead and create another method here called private void assign",
    "start": "1939840",
    "end": "1945559"
  },
  {
    "text": "action and I'm going to start out really simply by just assigning to this process",
    "start": "1946840",
    "end": "1952360"
  },
  {
    "text": "people variable that we",
    "start": "1952360",
    "end": "1955840"
  },
  {
    "text": "have now one thing that I love are Lambda Expressions does anyone here love",
    "start": "1957519",
    "end": "1964919"
  },
  {
    "text": "Lambda Expressions does anybody here hate Lambda",
    "start": "1964919",
    "end": "1970200"
  },
  {
    "text": "Expressions that few people wow if you hate Lambda Expressions I have a video",
    "start": "1970200",
    "end": "1976240"
  },
  {
    "text": "on my website called learn to love lamb lambdas and so you should go watch that like immediately because Lambda",
    "start": "1976240",
    "end": "1981960"
  },
  {
    "text": "expressions are awesome and if you go to my website and follow the links for the materials for this talk you will find",
    "start": "1981960",
    "end": "1988240"
  },
  {
    "text": "that there okay so I'm just going to use a Lambda expression here to get the I'm",
    "start": "1988240",
    "end": "1995080"
  },
  {
    "text": "just going to do the first one which is the average rating that we have uh for",
    "start": "1995080",
    "end": "2000320"
  },
  {
    "text": "all of the items that we have in the list so this is fun I'm going to say p",
    "start": "2000320",
    "end": "2006240"
  },
  {
    "text": "goes to oh did I lose you already p. average R goes to r.",
    "start": "2006240",
    "end": "2014639"
  },
  {
    "text": "rating and then we'll say two string and then I want to put this in",
    "start": "2014639",
    "end": "2020880"
  },
  {
    "text": "the output box so I'm going to wrap this whole thing in an add to",
    "start": "2020880",
    "end": "2028720"
  },
  {
    "text": "list wow okay when I go lamb Expressions I go lamb Expressions hard",
    "start": "2032200",
    "end": "2039720"
  },
  {
    "text": "well let's see what this does so let's go ahead and uh collapse our string",
    "start": "2039799",
    "end": "2045200"
  },
  {
    "text": "Handler and expand our action now I'm not hooked up to any checkboxes yet in",
    "start": "2045200",
    "end": "2050440"
  },
  {
    "text": "fact I'm not even calling this method yet am I um calling this method would probably be uh make things work a lot",
    "start": "2050440",
    "end": "2057919"
  },
  {
    "text": "better so go ahead and call the assign action and then what we'll want to do is also invoke that delegate right so we",
    "start": "2057919",
    "end": "2064960"
  },
  {
    "text": "have the person format or delegate that we want to or I'm sorry process person",
    "start": "2064960",
    "end": "2071000"
  },
  {
    "text": "process people man apparently I didn't get enough lunch we have our process",
    "start": "2071000",
    "end": "2077919"
  },
  {
    "text": "people a delegate that we want to invoke and again if we look at the",
    "start": "2077919",
    "end": "2084000"
  },
  {
    "text": "parameter that this wants it wants a list of person as a parameter well I have a little method that will get me",
    "start": "2084000",
    "end": "2089480"
  },
  {
    "text": "the collection of person objects so I can say VAR people",
    "start": "2089480",
    "end": "2095638"
  },
  {
    "text": "equals people come on. get people and so that give me a list of person objects",
    "start": "2095800",
    "end": "2102079"
  },
  {
    "text": "that I can pass through here people there we go so what I'm doing is",
    "start": "2102079",
    "end": "2109760"
  },
  {
    "text": "I'm calling aign action and that will assign this add to list this p goes",
    "start": "2109760",
    "end": "2117720"
  },
  {
    "text": "to add to list to my process people delegate variable that I have and then",
    "start": "2117720",
    "end": "2123440"
  },
  {
    "text": "down here we're going to go ahead and invoke that",
    "start": "2123440",
    "end": "2129800"
  },
  {
    "text": "delegate based on this uh people collection that we have does anyone have",
    "start": "2129800",
    "end": "2135200"
  },
  {
    "text": "any idea what this might do nobody at",
    "start": "2135200",
    "end": "2141119"
  },
  {
    "text": "all this is a quiet room don't make me tell jokes so I click the button and I get",
    "start": "2142119",
    "end": "2150800"
  },
  {
    "text": "the average rating for my seven items that I have here with a lot of decimal places but here's something that's",
    "start": "2150800",
    "end": "2157079"
  },
  {
    "text": "interesting um because if I click the button again now I have two of them in my list box I",
    "start": "2157079",
    "end": "2164800"
  },
  {
    "text": "click it again now I have three of them in my list box Jeremy must not be clearing out the",
    "start": "2164800",
    "end": "2172160"
  },
  {
    "text": "list box very well he's pretty bad at that but it turns out at the top of this",
    "start": "2172160",
    "end": "2178280"
  },
  {
    "text": "method I am in fact clearing the list box but what I've actually",
    "start": "2178280",
    "end": "2185720"
  },
  {
    "text": "done is I've used multi casting without even pointing to it now you notice that",
    "start": "2185720",
    "end": "2191599"
  },
  {
    "text": "in this assign action where I assigned to this process people uh variable that",
    "start": "2191599",
    "end": "2196680"
  },
  {
    "text": "we have I used a plus equals instead of an equals now anyone who has hooked up",
    "start": "2196680",
    "end": "2202680"
  },
  {
    "text": "an event handler will recognize that because usually if we hook up a button click event handler in code we say plus",
    "start": "2202680",
    "end": "2208599"
  },
  {
    "text": "equals and we give it our own method that's so that we can add our own method to the event uh to the event handler so",
    "start": "2208599",
    "end": "2215160"
  },
  {
    "text": "that it'll get fired when the event is fired we can do the same thing with any delegate variable so what's happening is",
    "start": "2215160",
    "end": "2222359"
  },
  {
    "text": "each time I click the button it's calling assign action and it's adding a",
    "start": "2222359",
    "end": "2228480"
  },
  {
    "text": "new method to it each time so the first time I click the button it adds it and",
    "start": "2228480",
    "end": "2234160"
  },
  {
    "text": "then executes it the second time I click the button it adds another one and so",
    "start": "2234160",
    "end": "2240200"
  },
  {
    "text": "then runs both of those the third time I click the button now there's three of them in there so that's what's Happening Here",
    "start": "2240200",
    "end": "2248200"
  },
  {
    "text": "I had so much trouble getting my head around that it's like wow that's kind of",
    "start": "2249640",
    "end": "2255160"
  },
  {
    "text": "interesting now there is an easy way around this because inside our assign action we can just reset our variable so",
    "start": "2255160",
    "end": "2261720"
  },
  {
    "text": "we can say process people equals null and so that will clear it out every time we click the button so now if we do the",
    "start": "2261720",
    "end": "2268839"
  },
  {
    "text": "same thing we'll only get it one time that that deserves a little bit of",
    "start": "2268839",
    "end": "2275800"
  },
  {
    "text": "applause [Applause] if you have to ask for it it's not",
    "start": "2275800",
    "end": "2284040"
  },
  {
    "text": "genuine okay um I'm going to take pity on you because I saw some people that didn't really love delegates or I'm",
    "start": "2285119",
    "end": "2291599"
  },
  {
    "text": "sorry love lamb Expressions so I'm going to show you how awesome Lambda expressions are by",
    "start": "2291599",
    "end": "2298599"
  },
  {
    "text": "modifying our assigned delegates that we have here now if you remember this this is based on the radio buttons and right",
    "start": "2298599",
    "end": "2305680"
  },
  {
    "text": "now we're calling these separate method in this separate class but what I would rather do is have",
    "start": "2305680",
    "end": "2312000"
  },
  {
    "text": "code that's like really obvious and easy to read and for that I'm going to use a Lambda expression now the problem with",
    "start": "2312000",
    "end": "2318240"
  },
  {
    "text": "Lambda Expressions is",
    "start": "2318240",
    "end": "2324720"
  },
  {
    "text": "this right the problem is if you don't understand them you look at it and you're kind of like I have a general",
    "start": "2324720",
    "end": "2330440"
  },
  {
    "text": "idea of what's that what that's doing but I don't know really what it's doing well the lamb expression here is",
    "start": "2330440",
    "end": "2336960"
  },
  {
    "text": "simply acting as an anonymous method and if our Anonymous method",
    "start": "2336960",
    "end": "2342520"
  },
  {
    "text": "matches the signature of our delegate we can assign it to that now all I have to do to kind of get to a",
    "start": "2342520",
    "end": "2350760"
  },
  {
    "text": "Lambda expression is to create an anonymous delegate instead of a named delegate this terminology is really",
    "start": "2350760",
    "end": "2357839"
  },
  {
    "text": "awesome I love this so what we have right now uh inside of our assigned",
    "start": "2357839",
    "end": "2363520"
  },
  {
    "text": "delegate method this form matters. default formatters last name 2 ER these are all named delegates they're",
    "start": "2363520",
    "end": "2369480"
  },
  {
    "text": "delegates with names now the terminology does get confusing because they are also just methods but it's the delegate again",
    "start": "2369480",
    "end": "2378480"
  },
  {
    "text": "represents a type that represents the method signature and then we have variables of that type and then we",
    "start": "2378480",
    "end": "2384280"
  },
  {
    "text": "assign methods to that type and it makes my head hurt whenever I have to think about that terminology and I've had",
    "start": "2384280",
    "end": "2390760"
  },
  {
    "text": "discussions with people of like what's the best way to talk about this stuff and usually they're like I have no idea",
    "start": "2390760",
    "end": "2396760"
  },
  {
    "text": "so what I'm going to do is instead of using these name delegates I'm going to use an anonymous delegate so if you",
    "start": "2396760",
    "end": "2402480"
  },
  {
    "text": "notice here I have my default method from my formatters class I'm going to highlight the parameters and the method",
    "start": "2402480",
    "end": "2408880"
  },
  {
    "text": "body and I'm going to copy that code and come back over here and instead of using",
    "start": "2408880",
    "end": "2414280"
  },
  {
    "text": "this form matters. default directly I'm going to type in the delegate keyword and then",
    "start": "2414280",
    "end": "2421960"
  },
  {
    "text": "paste and what I've just done is inlined that code and this is what's known as an",
    "start": "2421960",
    "end": "2428400"
  },
  {
    "text": "anonymous delegate which is a delegate without a name and so I have this Anonymous",
    "start": "2428400",
    "end": "2434240"
  },
  {
    "text": "delegate here and I kind of said that Lambda Expressions can be used as Anonymous delegates didn't I so that",
    "start": "2434240",
    "end": "2441800"
  },
  {
    "text": "means I can turn this into a Lambda expression now if you've never seen an anonymous delegate turned into a Lambda",
    "start": "2441800",
    "end": "2447520"
  },
  {
    "text": "expression you are going to be amazed if there's one thing you write down this is the thing you write down okay so are you",
    "start": "2447520",
    "end": "2455200"
  },
  {
    "text": "ready I'm going to take the delegate ke word and delete it and then in between the parameters",
    "start": "2455200",
    "end": "2462400"
  },
  {
    "text": "and the method body I'm going to add the equals greater than sign maybe going to try to add the equals",
    "start": "2462400",
    "end": "2469440"
  },
  {
    "text": "greater than sign that's our Lambda operator that's it now that's a Lambda expression but the thing is this isn't",
    "start": "2469440",
    "end": "2476839"
  },
  {
    "text": "usually the way we see Lambda Expressions this is way too readable right I can see the parameter is of type",
    "start": "2476839",
    "end": "2482920"
  },
  {
    "text": "person and it's called input that looks very obviously like a parameter and I've got my method body in curly braces well",
    "start": "2482920",
    "end": "2489599"
  },
  {
    "text": "the thing about lamb Expressions is they were designed to be very compact we got lambed Expressions at the same time we",
    "start": "2489599",
    "end": "2495319"
  },
  {
    "text": "got link and that's when we're like okay we want these really short station uh statements that we can put as parameters",
    "start": "2495319",
    "end": "2501599"
  },
  {
    "text": "and methods and just have them all in one spot easy to read without like blowing up the code so there's a lot of",
    "start": "2501599",
    "end": "2506880"
  },
  {
    "text": "syntactic sugar around Lambda Expressions that allow us to shrink this down the first one is something called",
    "start": "2506880",
    "end": "2513599"
  },
  {
    "text": "parameter type inference you should remember that because if you say it while your boss is",
    "start": "2513599",
    "end": "2519400"
  },
  {
    "text": "around you sound really smart all parameter type inference means",
    "start": "2519400",
    "end": "2525440"
  },
  {
    "text": "is that if the compiler can figure out the type of this parameter I don't have to type it",
    "start": "2525440",
    "end": "2531280"
  },
  {
    "text": "in so I can come up here to this person type that I have listed and delete",
    "start": "2531280",
    "end": "2538160"
  },
  {
    "text": "it now this is still strongly typed if I put my cursor over input it still tells",
    "start": "2538160",
    "end": "2543240"
  },
  {
    "text": "me this is a person how does it know that well because I'm assigning it to",
    "start": "2543240",
    "end": "2548960"
  },
  {
    "text": "our format person variable and that's a funk of person string so the only thing I'm allowed to assign to this is",
    "start": "2548960",
    "end": "2555400"
  },
  {
    "text": "something that takes one parameter of type person so the compiler already knows what I'm allowed to assign to this",
    "start": "2555400",
    "end": "2561720"
  },
  {
    "text": "so I don't have to type in the type another thing is that if I only have one parameter I don't need parentheses",
    "start": "2561720",
    "end": "2568599"
  },
  {
    "text": "around it another thing by",
    "start": "2568599",
    "end": "2573760"
  },
  {
    "text": "convention is that because we're trying to make things compact it's very common to use single characters for parameter",
    "start": "2573760",
    "end": "2580040"
  },
  {
    "text": "names in my Lambda Expressions so instead of using input I might use P now when I'm picking single characters",
    "start": "2580040",
    "end": "2587480"
  },
  {
    "text": "I try to pick one that reminds me of what it is since this is a person object I'm going to use p and that's to help my",
    "start": "2587480",
    "end": "2593599"
  },
  {
    "text": "brain another thing is if I only have a single a single expression that",
    "start": "2593599",
    "end": "2601640"
  },
  {
    "text": "has a return type I can that has a that's returning a value I can get rid",
    "start": "2601640",
    "end": "2606880"
  },
  {
    "text": "of the curly braces and the return",
    "start": "2606880",
    "end": "2612359"
  },
  {
    "text": "word and that is a complete Lambda expression and it has the same functionality as my separate method that",
    "start": "2615000",
    "end": "2622160"
  },
  {
    "text": "I was calling formats. default now I know we've known each",
    "start": "2622160",
    "end": "2627200"
  },
  {
    "text": "other for almost 45 minutes now but I also know you don't trust me so what I'm",
    "start": "2627200",
    "end": "2632880"
  },
  {
    "text": "going to do is I'm going to comment out the form matters. default method so that it's no longer",
    "start": "2632880",
    "end": "2638040"
  },
  {
    "text": "available and I'm going to run the code and we're going to see that still",
    "start": "2638040",
    "end": "2645759"
  },
  {
    "text": "works yeah that's pretty cool okay let me do",
    "start": "2646079",
    "end": "2651240"
  },
  {
    "text": "that one more time a little bit faster with this last name to Upper so again I'm going to copy the parameters in the",
    "start": "2651240",
    "end": "2656319"
  },
  {
    "text": "method body we're going to come over here and type in the delegate keyword and paste and again now I'm going to",
    "start": "2656319",
    "end": "2663880"
  },
  {
    "text": "delete the delegate keyword and put in the greater than sign I can delete the parameter type",
    "start": "2663880",
    "end": "2671880"
  },
  {
    "text": "since I've only got one parameter I can get rid of these parentheses around it by convention Single Character parameter",
    "start": "2671880",
    "end": "2678839"
  },
  {
    "text": "names and I can get rid of the curly braces and the return",
    "start": "2678839",
    "end": "2685359"
  },
  {
    "text": "keyword that doesn't seem quite as difficult as it did before does it in fact once you get used to this now you",
    "start": "2687079",
    "end": "2693920"
  },
  {
    "text": "can just start typing Lambda Expressions directly into this so this first name to lowercase well I can say p goes to p.",
    "start": "2693920",
    "end": "2701240"
  },
  {
    "text": "first name. to lower and down here for full name I can",
    "start": "2701240",
    "end": "2707839"
  },
  {
    "text": "say p goes to uh in this case I'm going to do some string",
    "start": "2707839",
    "end": "2713040"
  },
  {
    "text": "interpolation p. last name comma p. first",
    "start": "2713040",
    "end": "2719599"
  },
  {
    "text": "name just like that and again because I know you don't believe me I'm going to comment out the",
    "start": "2719599",
    "end": "2726200"
  },
  {
    "text": "entire for matters classo commented out gone so the only",
    "start": "2726200",
    "end": "2735160"
  },
  {
    "text": "code that I have is the code that I'm seeing right here and my code behaves exactly the",
    "start": "2735160",
    "end": "2740680"
  },
  {
    "text": "same way as it did before so again there's my default two string last name to uppercase first name to lowercase",
    "start": "2740680",
    "end": "2747440"
  },
  {
    "text": "full name and when I look at this code",
    "start": "2747440",
    "end": "2753599"
  },
  {
    "text": "everything I need to know about it is on this one screen and I like that I don't",
    "start": "2753599",
    "end": "2758680"
  },
  {
    "text": "like to have to go to other places to look for code now obviously it makes sense to separate things when you've got",
    "start": "2758680",
    "end": "2764599"
  },
  {
    "text": "big chunks you're trying to make things understandable and readable but as far as the number of lines of code that I have here on this screen I have exactly",
    "start": "2764599",
    "end": "2771800"
  },
  {
    "text": "the same number of lines that I had when I was using the form matters class but now I see exactly what's going",
    "start": "2771800",
    "end": "2779040"
  },
  {
    "text": "on right here next to my code and I really love that so I can see oh use the",
    "start": "2779040",
    "end": "2785040"
  },
  {
    "text": "default two string oh it does last name uppercase first name to lower case those were probably obvious based on the names",
    "start": "2785040",
    "end": "2791839"
  },
  {
    "text": "of the methods but for full name what does full name mean well here I can see it means last name comma space first",
    "start": "2791839",
    "end": "2798240"
  },
  {
    "text": "name so I like having that code directly in front of me and once you see that",
    "start": "2798240",
    "end": "2803480"
  },
  {
    "text": "again you kind of get used to it you work with it for a while and uh pretty",
    "start": "2803480",
    "end": "2808880"
  },
  {
    "text": "soon something like this doesn't look quite so foreign now I do have uh some other uh I",
    "start": "2808880",
    "end": "2817000"
  },
  {
    "text": "want to hook up the check boxes here so I'm going to go to my Snippets I'm going to not going to make you watch me type",
    "start": "2817000",
    "end": "2822480"
  },
  {
    "text": "all of this code because this is a lot of code but we can walk through what it's",
    "start": "2822480",
    "end": "2830200"
  },
  {
    "text": "doing now since we have uh let me get rid of my",
    "start": "2832359",
    "end": "2838880"
  },
  {
    "text": "um let me get rid of my taskbar so that'll give me a little bit more space here lock the taskbar automatically hide",
    "start": "2838880",
    "end": "2846559"
  },
  {
    "text": "there we go I think I can see the whole thing oh that's close",
    "start": "2846559",
    "end": "2853599"
  },
  {
    "text": "enough so uh now I've hooked up things to the check boxes so I have the four check boxes now you'll notice here I",
    "start": "2853599",
    "end": "2860680"
  },
  {
    "text": "don't have um you know if statements that return instead what I'm doing is I'm using that plus equals operator for",
    "start": "2860680",
    "end": "2867000"
  },
  {
    "text": "each of these so I can assign more than one method to the same delegate variable",
    "start": "2867000",
    "end": "2872480"
  },
  {
    "text": "and then when we invoke it all of them are going to run just like we saw three copies of the same method running we can",
    "start": "2872480",
    "end": "2877920"
  },
  {
    "text": "have copies of different methods that all run at the same time now this first one again we've already seen that takes",
    "start": "2877920",
    "end": "2883720"
  },
  {
    "text": "the average rating and then outputs it to the list box that we have on the left hand side of the screen or right hand",
    "start": "2883720",
    "end": "2890359"
  },
  {
    "text": "side of the screen I should say now the second one is getting the earliest start date so it's using a Min a cool link",
    "start": "2890359",
    "end": "2897160"
  },
  {
    "text": "function on the start date two string based on short date format I will apologize for that format before you see",
    "start": "2897160",
    "end": "2902960"
  },
  {
    "text": "it and I'm adding that to the output list now this third one is actually doing a messagebox",
    "start": "2902960",
    "end": "2908839"
  },
  {
    "text": "doow so this is where we want to show the name of the highest raater the highest rated Commander that we have on",
    "start": "2908839",
    "end": "2915640"
  },
  {
    "text": "the list so it's going to do a little bit of Link order by descending based on the rating so the highest one will be at",
    "start": "2915640",
    "end": "2920920"
  },
  {
    "text": "the top take the first one two string that stick it into a message box and this last one is actually going to write",
    "start": "2920920",
    "end": "2927520"
  },
  {
    "text": "to the output window of our uh application so it's just gonna do a",
    "start": "2927520",
    "end": "2933240"
  },
  {
    "text": "console. write and it's going to take the first character of the last name and then just kind of append those together",
    "start": "2933240",
    "end": "2938680"
  },
  {
    "text": "so that we'll see all seven of those okay let's see how these",
    "start": "2938680",
    "end": "2944280"
  },
  {
    "text": "work because multicasting man I love this stuff okay I'm going to do them one",
    "start": "2944280",
    "end": "2950119"
  },
  {
    "text": "at a time because I'm not feeling really Brave at the moment so there's our average rating 6.4 okay so we have some",
    "start": "2950119",
    "end": "2956400"
  },
  {
    "text": "formatting for uh the decimal places earliest start date is 1017 1975 now I",
    "start": "2956400",
    "end": "2964240"
  },
  {
    "text": "apologize because I am American if you haven't figured that out yet and so we do our dates backwards so that's",
    "start": "2964240",
    "end": "2970520"
  },
  {
    "text": "actually October 17th um but we can see that in the output window and if we were to look at the items in our list it",
    "start": "2970520",
    "end": "2976680"
  },
  {
    "text": "looks like John Koenig was from 1975 and so uh that's his date up there",
    "start": "2976680",
    "end": "2982880"
  },
  {
    "text": "and then for the best commander again we'll get a popup box which in this case",
    "start": "2982880",
    "end": "2988720"
  },
  {
    "text": "says Dave liser and we can see uh Dave here has a rating of nine out of 10 stars and then",
    "start": "2988720",
    "end": "2996119"
  },
  {
    "text": "we have the first letters of the last names now I want you to look way down here in this part of the",
    "start": "2996119",
    "end": "3004119"
  },
  {
    "text": "screen because when I choose that one they output to",
    "start": "3004119",
    "end": "3010400"
  },
  {
    "text": "there now these are kind of arbitrary actions that I'm performing at the moment but I just want to show you know",
    "start": "3010400",
    "end": "3016599"
  },
  {
    "text": "uh KH HC LS mg that uh represents the last names kig hunt Kon Lister sharidan",
    "start": "3016599",
    "end": "3022920"
  },
  {
    "text": "Montana gampo okay so I'm outputting all that now things get interesting when we start doing this together uh I'm just",
    "start": "3022920",
    "end": "3029559"
  },
  {
    "text": "going to restart it so the output uh so that my console output clears because let's see what happens",
    "start": "3029559",
    "end": "3035920"
  },
  {
    "text": "when I start clicking multiple ones in fact I'm feeling really Brave I'm going to click all of them so I'm going to",
    "start": "3035920",
    "end": "3042400"
  },
  {
    "text": "have all four of those methods run at the same time sort",
    "start": "3042400",
    "end": "3047920"
  },
  {
    "text": "of it's really easy to think that oh I can assign like multiple methods to this",
    "start": "3047920",
    "end": "3054040"
  },
  {
    "text": "delicate and when I invoke it they're all going to run and it's probably doing some magic threading on the background",
    "start": "3054040",
    "end": "3059440"
  },
  {
    "text": "so everything runs at the same time no it does not do that it actually runs the",
    "start": "3059440",
    "end": "3065880"
  },
  {
    "text": "methods in the sequence that they're assigned so the way that I can tell by looking at this code is if you notice I",
    "start": "3065880",
    "end": "3072799"
  },
  {
    "text": "did get my average trading I got my earliest start date and then I got my messagebox doow which is a modal",
    "start": "3072799",
    "end": "3078680"
  },
  {
    "text": "dialogue which means my application stops processing so if I were to look way down here in the corner where I",
    "start": "3078680",
    "end": "3085119"
  },
  {
    "text": "expect to find the first letters of the last names I don't see those yet and if",
    "start": "3085119",
    "end": "3090520"
  },
  {
    "text": "I click okay we'll see those pop up Boop so there's no magic threading",
    "start": "3090520",
    "end": "3097079"
  },
  {
    "text": "what's happening is the methods are simply being run in the order that we assign them and uh things get kind of",
    "start": "3097079",
    "end": "3104040"
  },
  {
    "text": "interesting in some other scenarios but before I talk about that just to show this a little more clearly this one",
    "start": "3104040",
    "end": "3110480"
  },
  {
    "text": "that's using that message box I'm going to move that up in this method so it's assigned first",
    "start": "3110480",
    "end": "3117960"
  },
  {
    "text": "so now if we do that same thing what we'll see is that the message box pops up but because it's model none",
    "start": "3117960",
    "end": "3126359"
  },
  {
    "text": "of the other methods have run yet and this is something that's important to keep in mind because things",
    "start": "3126359",
    "end": "3133400"
  },
  {
    "text": "get interesting once we start talking about what happens if you get an exception in one of these",
    "start": "3133400",
    "end": "3140400"
  },
  {
    "text": "methods well the default behavior is for example if the first one gets an exception the other three will not",
    "start": "3140400",
    "end": "3147280"
  },
  {
    "text": "run that's the default way that it works now there are ways around that you can handle",
    "start": "3147280",
    "end": "3153240"
  },
  {
    "text": "exceptions kind of not by doing the easy. invoke but there are ways that you",
    "start": "3153240",
    "end": "3158720"
  },
  {
    "text": "can get into the method list and you can go through and loop through it and run each individually and run each individually inside a TR catch block so",
    "start": "3158720",
    "end": "3166400"
  },
  {
    "text": "that if one of them fails you can still go ahead and run the other ones if you want some information on that again follow the links that are on my website",
    "start": "3166400",
    "end": "3172680"
  },
  {
    "text": "for this talk and you'll see some articles that I've written about uh exception handling using",
    "start": "3172680",
    "end": "3177839"
  },
  {
    "text": "delegates so that's something to keep in mind so again model as soon as I click okay now those other three methods run",
    "start": "3177839",
    "end": "3184839"
  },
  {
    "text": "now there is one other scenario we need to think about because what if none of the check boxes are",
    "start": "3184839",
    "end": "3191519"
  },
  {
    "text": "checked well I get an old reference exception because if you notice I'm",
    "start": "3191640",
    "end": "3197000"
  },
  {
    "text": "trying to invoke on this process people uh variable that I have here that",
    "start": "3197000",
    "end": "3203319"
  },
  {
    "text": "is not populated it's actually null because I didn't assign anything to it",
    "start": "3203319",
    "end": "3208400"
  },
  {
    "text": "so this is something else that we need to think about is how do we handle if someone",
    "start": "3208400",
    "end": "3214520"
  },
  {
    "text": "gives us a null now there's a couple ways of doing this let me just show you",
    "start": "3214520",
    "end": "3219799"
  },
  {
    "text": "what Visual Studio does because the visual studio intellisense and the popup help and the little light bulb thing",
    "start": "3219799",
    "end": "3225720"
  },
  {
    "text": "gets so awesome with each iteration of this product so what I'm going to do is I'm going to use the one that doesn't",
    "start": "3225720",
    "end": "3231920"
  },
  {
    "text": "use invoke and I'm just going to say if process people",
    "start": "3231920",
    "end": "3237280"
  },
  {
    "text": "is not equal to null then go ahead and do",
    "start": "3237280",
    "end": "3242799"
  },
  {
    "text": "this now you'll notice that before we look at why it's gray out let me just",
    "start": "3242880",
    "end": "3249319"
  },
  {
    "text": "show you that this actually does not throw an exception now because if nothing's checked nothing runs you know",
    "start": "3249319",
    "end": "3256040"
  },
  {
    "text": "and again these still work but you'll notice Visual Studio has grayed out that if line and it's given",
    "start": "3256040",
    "end": "3262839"
  },
  {
    "text": "me a little popup here that says hey I can make this look better okay go",
    "start": "3262839",
    "end": "3269880"
  },
  {
    "text": "ahead so what it did was it went back to using the explicit invoke and then it",
    "start": "3269880",
    "end": "3275520"
  },
  {
    "text": "used the cool Elvis operator so that's our null conditional operator so with the question mark before the dot if",
    "start": "3275520",
    "end": "3282720"
  },
  {
    "text": "process people happens to be null it's not going to process any it's not going to run anything else so process people",
    "start": "3282720",
    "end": "3288200"
  },
  {
    "text": "is null it's not going to do anything if it's not null it's going to invoke the delegate so that's cool stuff and I love",
    "start": "3288200",
    "end": "3294920"
  },
  {
    "text": "how visual studio just says hey do you want to use this new syntax that you didn't used to have that's cool I feel",
    "start": "3294920",
    "end": "3301359"
  },
  {
    "text": "really bad for the resharper guys because every time Visual Studio comes out like half of their product is in it",
    "start": "3301359",
    "end": "3307200"
  },
  {
    "text": "right so they have to keep coming up with new stuff so this is really really cool stuff that I like now I could",
    "start": "3307200",
    "end": "3316000"
  },
  {
    "text": "um you know what I'm GNA do it I'm feeling brave I'm GNA coat up some more because something that I'm sure you know",
    "start": "3316000",
    "end": "3324160"
  },
  {
    "text": "as uh o developers you're probably not not bothered by this but I know there's some functional programmers in the room",
    "start": "3324160",
    "end": "3329440"
  },
  {
    "text": "and they're really bothered with the way that I've been assigning these delegates I can I can see the look in",
    "start": "3329440",
    "end": "3335200"
  },
  {
    "text": "their eyes so again I kept this code intentionally simple so that we could focus on okay how do these variables how",
    "start": "3335200",
    "end": "3341720"
  },
  {
    "text": "do these delegate variables work how do we assign stuff can we do U multicasting and all that but what I would probably",
    "start": "3341720",
    "end": "3347920"
  },
  {
    "text": "do is instead of having actually this separate class level",
    "start": "3347920",
    "end": "3353640"
  },
  {
    "text": "field I would make it so that this delegate would actually return or this",
    "start": "3353640",
    "end": "3359000"
  },
  {
    "text": "method would return the delegate itself so in this case let me go ahead and move this guy down so that he's",
    "start": "3359000",
    "end": "3368240"
  },
  {
    "text": "local and we'll just set him to null to start",
    "start": "3368359",
    "end": "3373480"
  },
  {
    "text": "with come on and then down at the bottom we can return actually no I don't want",
    "start": "3373480",
    "end": "3381039"
  },
  {
    "text": "to do that what am I thinking I am over complicating things",
    "start": "3381039",
    "end": "3387079"
  },
  {
    "text": "all I have to do is return the Lambda",
    "start": "3387079",
    "end": "3390960"
  },
  {
    "text": "expression because uh again these are the radio buttons so as soon as it hits one of these if conditionals that",
    "start": "3393520",
    "end": "3400000"
  },
  {
    "text": "matches it should go ahead and um return something appropriate now this is going to still be upset so I'm going to return",
    "start": "3400000",
    "end": "3406680"
  },
  {
    "text": "null if it gets past all of those and so instead of having this uh",
    "start": "3406680",
    "end": "3413359"
  },
  {
    "text": "oh yeah so instead of having this intermediate uh value I'm just going to",
    "start": "3413359",
    "end": "3420960"
  },
  {
    "text": "return the delegate itself from this method so just like we can use methods as return as uh parameters we can use",
    "start": "3420960",
    "end": "3427760"
  },
  {
    "text": "methods as return types too and that's really cool so down here uh I have to get rid of this format",
    "start": "3427760",
    "end": "3435359"
  },
  {
    "text": "person because this doesn't work anymore but I could actually just put assigned",
    "start": "3435359",
    "end": "3440520"
  },
  {
    "text": "delegate uh right in here um I'm not real happy with the readability for that",
    "start": "3440520",
    "end": "3447160"
  },
  {
    "text": "so what I would probably do is u i call this call it form",
    "start": "3447160",
    "end": "3454839"
  },
  {
    "text": "formatter and then I would pass this through because I don't like nesting",
    "start": "3454839",
    "end": "3459960"
  },
  {
    "text": "things too deeply but that's more style than anything else but what's happening now is I'm just kind of passing this",
    "start": "3459960",
    "end": "3467280"
  },
  {
    "text": "delicate this funk of person string around as a return type um you know into",
    "start": "3467280",
    "end": "3472640"
  },
  {
    "text": "a parameter and this and that and that rather than having you know these class level variables which we try to get rid of anyway and I would do exactly the",
    "start": "3472640",
    "end": "3480000"
  },
  {
    "text": "same thing with the action so we could do the same thing return that type um okay I'm I'm feeling like I am",
    "start": "3480000",
    "end": "3489319"
  },
  {
    "text": "out of time so I'm not going to do that one it would take me two minutes and I have one minute so what we're going to",
    "start": "3489319",
    "end": "3495640"
  },
  {
    "text": "do is just do a quick review of why delegates are awesome hopefully I've",
    "start": "3495640",
    "end": "3500720"
  },
  {
    "text": "convinced you that it's at least something to look in a little further and hopefully you're a little more comfortable with what they are and how",
    "start": "3500720",
    "end": "3507000"
  },
  {
    "text": "they work in particular Funk and action are amazing you see them everywhere in",
    "start": "3507000",
    "end": "3512440"
  },
  {
    "text": "link and quite honestly wherever I see a method that takes a funk or an action as",
    "start": "3512440",
    "end": "3518200"
  },
  {
    "text": "a parameter I treat that as a big flashing sign that says put your Lambda expression here so I end up using lamb",
    "start": "3518200",
    "end": "3525359"
  },
  {
    "text": "Expressions quite a bit and again I'm using them just as Anonymous delicates it's not that hard it's really really",
    "start": "3525359",
    "end": "3532720"
  },
  {
    "text": "cool and I love it it was a huge hurdle for me it took me a it took me like six months before I really got lambed",
    "start": "3532720",
    "end": "3539280"
  },
  {
    "text": "Expressions but once I did I'm like oh that's awesome how do I how do I help",
    "start": "3539280",
    "end": "3544559"
  },
  {
    "text": "other people get that too so hopefully I've done that today uh if you do have any questions uh feel free to talk to me",
    "start": "3544559",
    "end": "3550760"
  },
  {
    "text": "I'll be wandering around outside and uh feel free to shoot me an email if you have something that comes up later",
    "start": "3550760",
    "end": "3556000"
  },
  {
    "text": "because I found that if you have a question probably other people do too and so they turn into great blog",
    "start": "3556000",
    "end": "3561319"
  },
  {
    "text": "articles uh with that thank you very much for coming [Applause]",
    "start": "3561319",
    "end": "3569018"
  }
]