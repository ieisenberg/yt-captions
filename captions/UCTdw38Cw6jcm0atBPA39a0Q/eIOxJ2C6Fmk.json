[
  {
    "text": "good afternoon everyone so for many years now the Linux Community have had all the fun they've had Docker they've",
    "start": "9719",
    "end": "16680"
  },
  {
    "text": "had great ways of deploying packages they've had all of this core technology and us people running Windows so are",
    "start": "16680",
    "end": "24080"
  },
  {
    "text": "haven't had quite so much fun well thankfully with Windows Server 2016 that's all changing",
    "start": "24080",
    "end": "30679"
  },
  {
    "text": "and this is what the subject of my talk will be about it's describing what Windows containers are and how you can",
    "start": "30679",
    "end": "35760"
  },
  {
    "text": "start implementing them on uh 20136 so my name is Ben Hall uh I am the",
    "start": "35760",
    "end": "43200"
  },
  {
    "text": "founder of oselot uproar we spend a lot of time helping companies adopt containers and adopt Docker and how they",
    "start": "43200",
    "end": "50840"
  },
  {
    "text": "can potentially improve their architecture with it we also build our own products internally one of which is",
    "start": "50840",
    "end": "57320"
  },
  {
    "text": "brown bag which is aiming to be like Netflix for developers so aggregating",
    "start": "57320",
    "end": "62719"
  },
  {
    "text": "all of the best conference videos for example from here um and representing them in a very nice easy way to find",
    "start": "62719",
    "end": "69280"
  },
  {
    "text": "them the other is katacoda katacoda is an Interactive Learning platform for software developers we basically have a",
    "start": "69280",
    "end": "76799"
  },
  {
    "text": "series of step-by-step tutorials with combined with interactive um browser",
    "start": "76799",
    "end": "82040"
  },
  {
    "text": "based environments so you can start learning Docker kubernetes mesosphere all directly accessible from your",
    "start": "82040",
    "end": "88079"
  },
  {
    "text": "browser all for free so today what I want to do is start with",
    "start": "88079",
    "end": "93439"
  },
  {
    "text": "an introduction into what Docker and what containers are in the first place I then want to talk about how that applies",
    "start": "93439",
    "end": "99320"
  },
  {
    "text": "to the windows world and how the changes are being introduced we then look at an example of actually deploying an IIs and",
    "start": "99320",
    "end": "106360"
  },
  {
    "text": "asp.net application as a Windows container and then how that actually looks by running it in production and",
    "start": "106360",
    "end": "112119"
  },
  {
    "text": "what are the tooling and what support you need in this new world and then finally we'll look towards the future",
    "start": "112119",
    "end": "118399"
  },
  {
    "text": "and where I see the trend of containers and especially Windows containers",
    "start": "118399",
    "end": "124159"
  },
  {
    "text": "going so as I said at the beginning containers have like they're all the AG at the",
    "start": "124159",
    "end": "130879"
  },
  {
    "text": "moment they are the simplest way to get through the top of hacken news they're a great way to get retweets when you blog",
    "start": "130879",
    "end": "137280"
  },
  {
    "text": "anything they are what everyone is talking about um but what actually is a",
    "start": "137280",
    "end": "142680"
  },
  {
    "text": "container so if we take a step back and if we look at the physical real world every day billions of items are sent all",
    "start": "142680",
    "end": "149440"
  },
  {
    "text": "the way around the world in these huge big metal shipping containers and these shipping containers have certain Key",
    "start": "149440",
    "end": "155800"
  },
  {
    "text": "Properties they are certain size of a certain height um and they have the door in a certain location but most",
    "start": "155800",
    "end": "162800"
  },
  {
    "text": "importantly they have on every single Corner they have a hook and this hook allows them to be connected to other",
    "start": "162800",
    "end": "168599"
  },
  {
    "text": "containers and that's a let how they can build a very strong coherent unit which can be put on shipping containers and",
    "start": "168599",
    "end": "175159"
  },
  {
    "text": "sent all the way around the world but actually what's on the inside and what's inside the con container doesn't really matter that much it could",
    "start": "175159",
    "end": "181599"
  },
  {
    "text": "be cards it could be t-shirts it could be um multi time pre uh part built",
    "start": "181599",
    "end": "188120"
  },
  {
    "text": "products the most important bit is that they are the same spec the same standard the same approach without that they",
    "start": "188120",
    "end": "194480"
  },
  {
    "text": "wouldn't work we wouldn't be able to connect them together and we wouldn't be able to utilize and um get the capacity",
    "start": "194480",
    "end": "200000"
  },
  {
    "text": "which we have and software containers have taken the same mentality software containers are all B",
    "start": "200000",
    "end": "206120"
  },
  {
    "text": "based on how do you start them how do you build them how do you run them making sure that they can all connect",
    "start": "206120",
    "end": "211760"
  },
  {
    "text": "and communicate with each other but actually what's on the inside doesn't really matter that much they could be a",
    "start": "211760",
    "end": "217319"
  },
  {
    "text": "Java application and the jvm they could be a goang binary or now they could be a Windows container running IIs that is",
    "start": "217319",
    "end": "225560"
  },
  {
    "text": "not important what's important is a consistent way to start and build and run and this is what Docker brings us so",
    "start": "225560",
    "end": "232680"
  },
  {
    "text": "a container starts as a image the image has got everything which your application needs in order to be able to",
    "start": "232680",
    "end": "239439"
  },
  {
    "text": "run so it's got any R time dependencies for example um for C application it will be",
    "start": "239439",
    "end": "245840"
  },
  {
    "text": "built and it will be compiled it will have all the new getap dependencies which it needs it will have any",
    "start": "245840",
    "end": "251000"
  },
  {
    "text": "configuration and it will also have the Net Framework and the core the core CLR if it's one of the new fan rul",
    "start": "251000",
    "end": "257880"
  },
  {
    "text": "applications and if it's Java it will look the same it will have the jvm set up with whatever particular version it",
    "start": "257880",
    "end": "263120"
  },
  {
    "text": "needs it'll have the application jar and they will have everything to uh",
    "start": "263120",
    "end": "268240"
  },
  {
    "text": "launch on top of underneath that that is all running on top of Docker or the docker engine now the docker engine is",
    "start": "268240",
    "end": "275720"
  },
  {
    "text": "offering kernel virtualization so if you think back to traditional ways of virtualizing applications and virtual",
    "start": "275720",
    "end": "282080"
  },
  {
    "text": "machines they will running on top of hypervisors you have uh ESX or then",
    "start": "282080",
    "end": "287840"
  },
  {
    "text": "managing the communication between your guest operating system and your virtual machine to your underlying host",
    "start": "287840",
    "end": "292960"
  },
  {
    "text": "operating system and adert the interl hardware but this virtualization and the traditional way of doing it off uh also",
    "start": "292960",
    "end": "300440"
  },
  {
    "text": "in also includes a lot of additional overhead because your application and your guest operating system need a",
    "start": "300440",
    "end": "306919"
  },
  {
    "text": "certain amount of memory and so you have to pre-allocate a certain amount of ram it has also performance benef uh impact",
    "start": "306919",
    "end": "314639"
  },
  {
    "text": "because it's having that translation and because it's um being a Gateway it can't",
    "start": "314639",
    "end": "320000"
  },
  {
    "text": "maximize the io and it can't maximize the CPU uses as it would if it was just running on Raw host operating system",
    "start": "320000",
    "end": "326360"
  },
  {
    "text": "itself this is where Docker is significantly different do is offering kernel virtualization basically it's",
    "start": "326360",
    "end": "333039"
  },
  {
    "text": "taking advantage of the kernel from the host operating system and making it available to each and every single",
    "start": "333039",
    "end": "338720"
  },
  {
    "text": "container ex this kernel virtualization which is also offering the protection and the isolation and the security",
    "start": "338720",
    "end": "345319"
  },
  {
    "text": "mechanisms it's restricting what the container can do and what the container can",
    "start": "345319",
    "end": "350720"
  },
  {
    "text": "see do with managing that layer and then below that we have the host operating system which you would expect sobu thos",
    "start": "350720",
    "end": "358160"
  },
  {
    "text": "Red Hat window th 2016 and then we have our bare metal server ec2 machine",
    "start": "358160",
    "end": "363400"
  },
  {
    "text": "whatever we would normally have and so why you can think of containers like virtual machines they",
    "start": "363400",
    "end": "369440"
  },
  {
    "text": "have got some significant different properties they have their own process space so when you go into a container",
    "start": "369440",
    "end": "375960"
  },
  {
    "text": "and you ask it what is actually running it will only say what it actually has been started so if you're only running a",
    "start": "375960",
    "end": "383000"
  },
  {
    "text": "bass prompt it will just say the only thing running is Bash if you're running a darket application it will say the",
    "start": "383000",
    "end": "389240"
  },
  {
    "text": "only thing running is this net application even though the host operating system may have thousands and",
    "start": "389240",
    "end": "395000"
  },
  {
    "text": "hundreds of thousands of different processes and different containers from the container's Viewpoint it's the only",
    "start": "395000",
    "end": "400280"
  },
  {
    "text": "thing running on that host itself each container have their own network interface they have their own",
    "start": "400280",
    "end": "406639"
  },
  {
    "text": "own IP address and so you can open ports you can send packets and you can operate and deal with it and manage it as if it",
    "start": "406639",
    "end": "412599"
  },
  {
    "text": "was a physical virtual uh physical machine they have their own rout directories and so if you list all the",
    "start": "412599",
    "end": "419000"
  },
  {
    "text": "files on directory you'll commonly think things like uh The Ether directory a home directory a bin directory",
    "start": "419000",
    "end": "425759"
  },
  {
    "text": "everything which you would expect from an underline operating system but this operating system is completely independent from the host and so you can",
    "start": "425759",
    "end": "433520"
  },
  {
    "text": "completely delete everything inside of a container and the host will be infected and this is because it's completely",
    "start": "433520",
    "end": "438879"
  },
  {
    "text": "sandboxed it's completely isolated and shielded and so any security is mitigated and protected and the host is",
    "start": "438879",
    "end": "446360"
  },
  {
    "text": "always secure they also have a lot more benefits than what virtual machines do",
    "start": "446360",
    "end": "452400"
  },
  {
    "text": "so because we've got this kernel of virtualization and because a container is communicating with everything that the kernel everything is a lot quicker",
    "start": "452400",
    "end": "458960"
  },
  {
    "text": "and a lot more uh performant than what you would expect otherwise and so we have things like the native CPU performance and Native memory but most",
    "start": "458960",
    "end": "465919"
  },
  {
    "text": "importantly we have native IO and so we when we're running big uh big tasks such as running databases or Oracle databases",
    "start": "465919",
    "end": "473120"
  },
  {
    "text": "or SQL server has not been impacted by having this virtualization layer which we traditionally had with virtual",
    "start": "473120",
    "end": "480159"
  },
  {
    "text": "machines instead we're getting the maximum performance that the host can offer and also we don't have any",
    "start": "480159",
    "end": "485639"
  },
  {
    "text": "pre-allocation because we don't have this operating system sitting in the W to manage everything we don't have to",
    "start": "485639",
    "end": "490879"
  },
  {
    "text": "pre-allocate that 8 gig of RAM and as we can get much better capacity and much better utilization of the hardware and",
    "start": "490879",
    "end": "497759"
  },
  {
    "text": "the service which we have available because the only thing which is actually being used is the memory and is the CPU",
    "start": "497759",
    "end": "503800"
  },
  {
    "text": "cycles that the process is running and what the process requires and I said we can now start pack us server and",
    "start": "503800",
    "end": "510560"
  },
  {
    "text": "actually getting the maximum return on our investment and when you start a container all a container is doing is",
    "start": "510560",
    "end": "517000"
  },
  {
    "text": "literally just launching the process as if it was running on the host operating system and as said everything takes",
    "start": "517000",
    "end": "522159"
  },
  {
    "text": "milliseconds to launch because the host is already there the kernel is already ready and waiting the only thing which",
    "start": "522159",
    "end": "528360"
  },
  {
    "text": "needs to start is the process itself and so everything becomes milliseconds and I that you can change how your application",
    "start": "528360",
    "end": "535080"
  },
  {
    "text": "works and operates and scales you can move workloads around a lot quicker ER and a lot more seamlessly what you could",
    "start": "535080",
    "end": "541920"
  },
  {
    "text": "before because everything's so much quicker to be operating with in terms of containers they have",
    "start": "541920",
    "end": "548240"
  },
  {
    "text": "been around for a while they got created in FreeBSD um because the developer of FreeBSD needed to be able to develop",
    "start": "548240",
    "end": "555160"
  },
  {
    "text": "future versions of fbsd and so we needed to be able to run them side by side and this is where the concept was introduced",
    "start": "555160",
    "end": "562120"
  },
  {
    "text": "we then had solaras and zones and jails which are a very similar kind of concept to containers and just with a slightly",
    "start": "562120",
    "end": "568680"
  },
  {
    "text": "different way in Linux the alexc um functionality was introduced and red hat",
    "start": "568680",
    "end": "574040"
  },
  {
    "text": "and Google implemented a lot of additional support in order to make that happen and make that secure and",
    "start": "574040",
    "end": "579880"
  },
  {
    "text": "performant all of this was there and it' been ready and waiting and companies have been taking advantage of it for a",
    "start": "579880",
    "end": "585120"
  },
  {
    "text": "number of years but it was actually very difficult in order to be able to build applications on top of these containers",
    "start": "585120",
    "end": "590560"
  },
  {
    "text": "you had to understand the internal workings of Linux networking and Bash scripts and the kernel in order to be",
    "start": "590560",
    "end": "597880"
  },
  {
    "text": "able to take advantage and so the barrier to entry was significant this is why everyone loves",
    "start": "597880",
    "end": "603920"
  },
  {
    "text": "Ducker Ducker has just removed that barrier to entry they've made containers accessible and approachable for everyone",
    "start": "603920",
    "end": "610959"
  },
  {
    "text": "and so it's now a very simple process in order to take advantage of all the existing benefits in a very nice clean",
    "start": "610959",
    "end": "617399"
  },
  {
    "text": "structured way with a great tool set and a great Community but more importantly if not",
    "start": "617399",
    "end": "622880"
  },
  {
    "text": "the tooling is the fact that they've actually got us to agree on something they've got us to agree on what it means",
    "start": "622880",
    "end": "628200"
  },
  {
    "text": "to be a container how containers have started how containers are built what do the images",
    "start": "628200",
    "end": "633839"
  },
  {
    "text": "look like how are they shared how are they progressed and if you think back to how the metal shipping containers if",
    "start": "633839",
    "end": "639839"
  },
  {
    "text": "that wasn't a standard they wouldn't work and Docker has started to introduce this platform and this standard for",
    "start": "639839",
    "end": "645560"
  },
  {
    "text": "people to adopt and build around and this is why we're seeing a huge ecosystem starting to pop up because we",
    "start": "645560",
    "end": "652120"
  },
  {
    "text": "have this now standardization Docker itself has got some great tools so if you go out onto",
    "start": "652120",
    "end": "658519"
  },
  {
    "text": "Docker and download the tool set to your laptop you'll get the toolbox the toolbox is made up of three",
    "start": "658519",
    "end": "666120"
  },
  {
    "text": "different uh tools to solve different problems so the octopus is Docker compose this is a way to define multiple",
    "start": "666120",
    "end": "673519"
  },
  {
    "text": "containers as a single one uh file uh",
    "start": "673519",
    "end": "678920"
  },
  {
    "text": "definition um and then you can use that definition you can commit it to your Source control and then that can launch",
    "start": "678920",
    "end": "684360"
  },
  {
    "text": "all of the containers which you need all of the dependencies such as red and my SQL as one single file you then have uh",
    "start": "684360",
    "end": "692839"
  },
  {
    "text": "Docker machine which is the uh tank and whale uh this is for managing your SE",
    "start": "692839",
    "end": "698680"
  },
  {
    "text": "machines on your local laptop um so creating new environments being able to quickly upgrade them spin them up just",
    "start": "698680",
    "end": "704519"
  },
  {
    "text": "manage your local Dev infrastructure it's also got um hwks into various uh",
    "start": "704519",
    "end": "709639"
  },
  {
    "text": "Cloud providers and so you can tell it to launch anour machine or a digital ocean droplet and it will set up Dock",
    "start": "709639",
    "end": "715959"
  },
  {
    "text": "and have everything working and configured for you the other one with uh whales plus",
    "start": "715959",
    "end": "721800"
  },
  {
    "text": "containers is swarm so swarm is a way to do Docker on multiple different hosts so",
    "start": "721800",
    "end": "728440"
  },
  {
    "text": "um manage containers managing where they're running ensuring that they're always available or up even if you lose",
    "start": "728440",
    "end": "733839"
  },
  {
    "text": "a host and managing the network and the service Discovery and how you can actually start doing uh working with",
    "start": "733839",
    "end": "740120"
  },
  {
    "text": "Docker at scale but Docker is appreciated and respectful that it can't solve every",
    "start": "740120",
    "end": "746600"
  },
  {
    "text": "single problem even though it does try to it that every company has a slightly different way that they need their",
    "start": "746600",
    "end": "752199"
  },
  {
    "text": "Network configured or they have different requirements for their storage drivers and as such their mentality is",
    "start": "752199",
    "end": "758120"
  },
  {
    "text": "that the batteries are included but removable if you want to replace how the networking works that's fine that the",
    "start": "758120",
    "end": "763880"
  },
  {
    "text": "whole ecosystem around it which supports it so you just simply swap it out and when you launch the container you just",
    "start": "763880",
    "end": "769639"
  },
  {
    "text": "tell it to use a different way of running the network and then it will just Ducker will go cool we'll just do",
    "start": "769639",
    "end": "774920"
  },
  {
    "text": "that instead and so this opens up and this makes it actually easier to adopt",
    "start": "774920",
    "end": "780240"
  },
  {
    "text": "and migrate your existing infrastructure over to Docker because if you have special scenarios you can actually still",
    "start": "780240",
    "end": "786320"
  },
  {
    "text": "start taking advantage of",
    "start": "786320",
    "end": "789560"
  },
  {
    "text": "it so when we have containers all containers are started based on a Docker",
    "start": "794399",
    "end": "800120"
  },
  {
    "text": "image this image is basically a um layered file system and um of all of the",
    "start": "800120",
    "end": "807560"
  },
  {
    "text": "changes which are required in order to get get your application to a certain configuration and so at the bottom this",
    "start": "807560",
    "end": "812800"
  },
  {
    "text": "is the history of building a darker image at the bottom you'll see certain files are being added we're doing things",
    "start": "812800",
    "end": "819720"
  },
  {
    "text": "like um app get um app app installed for install installing things like mono in",
    "start": "819720",
    "end": "825279"
  },
  {
    "text": "this example and we progressively enhancing our base operating system and adding more and more functionality up to",
    "start": "825279",
    "end": "831120"
  },
  {
    "text": "the top where we have our um done that application which was one of the",
    "start": "831120",
    "end": "836279"
  },
  {
    "text": "original versions because it's still using KPM um and that's being installed and that's being deployed it's this",
    "start": "836279",
    "end": "842720"
  },
  {
    "text": "layered file system which has given us a great advantage in terms of reuse we don't have to keep rebuilding an image",
    "start": "842720",
    "end": "848959"
  },
  {
    "text": "from complete scratch per application instead we can have a Bas layer and a base image which has got for example",
    "start": "848959",
    "end": "855360"
  },
  {
    "text": "mono installed and then all we need to worry about is adding our own application on top of it and all of our",
    "start": "855360",
    "end": "860480"
  },
  {
    "text": "mono based dependent applications can reuse the same base image when we need to roll out security updates we can do",
    "start": "860480",
    "end": "867440"
  },
  {
    "text": "that very simply because we can just change the base image and all of our uh applications can get that benefit and",
    "start": "867440",
    "end": "873800"
  },
  {
    "text": "get that Advantage um and so it makes it very simple um to start managing how",
    "start": "873800",
    "end": "879600"
  },
  {
    "text": "things are being deployed internally how this actually looks from the application's point of view the application doesn't see as a layered",
    "start": "879600",
    "end": "885959"
  },
  {
    "text": "layered file system instead it will just see a normal dis it will just see as a normal um directory doesn't make any",
    "start": "885959",
    "end": "893000"
  },
  {
    "text": "differences internally Docker is managing this VI storage drivers and so it will in your layer in your image if",
    "start": "893000",
    "end": "899560"
  },
  {
    "text": "that's been overridden by later versions or later layers then the application will see that latest version very",
    "start": "899560",
    "end": "905639"
  },
  {
    "text": "similar to how uh git works and a g repository will work your master and your head will be the latest version but",
    "start": "905639",
    "end": "912240"
  },
  {
    "text": "you can go back and you can move around and you can C checkpoint and Branch um in a very similar",
    "start": "912240",
    "end": "918040"
  },
  {
    "text": "way and in order to launch a container we simply use the Ducker CLI or use",
    "start": "918040",
    "end": "923120"
  },
  {
    "text": "their API and we do Docker run to tell it to launch a container in this case we're saying that we also need access to",
    "start": "923120",
    "end": "928560"
  },
  {
    "text": "some p ports so we say open up Port 6379 um on our host and that's also what",
    "start": "928560",
    "end": "934519"
  },
  {
    "text": "should be um communicated with the traffic and a process running it inside the container and 6379 and then start",
    "start": "934519",
    "end": "941079"
  },
  {
    "text": "the image called redish by default this looks up at the doco Hub which is a registry where all of the images are",
    "start": "941079",
    "end": "947800"
  },
  {
    "text": "available it looks for the official one called reddish if it's not on your local machine it will download it and then you",
    "start": "947800",
    "end": "954160"
  },
  {
    "text": "have the red process running this is exactly the same process which you would have if you installed it natively if you",
    "start": "954160",
    "end": "959759"
  },
  {
    "text": "downloaded Source built it compiled it and have it running and so now you can just simply have a r process and it's",
    "start": "959759",
    "end": "966240"
  },
  {
    "text": "the same process which you would do for MySQL postgress all of these other applications just ready available um so",
    "start": "966240",
    "end": "973639"
  },
  {
    "text": "you can just start downloading and running them inside containers and so just from a very simple development time",
    "start": "973639",
    "end": "979680"
  },
  {
    "text": "experience you don't have to worry about versioning you don't have to worry about how it get configured you don't have to",
    "start": "979680",
    "end": "985000"
  },
  {
    "text": "worry about different developers on different machines having slightly different versions which may become our",
    "start": "985000",
    "end": "991199"
  },
  {
    "text": "sync which may or may not introduce certain problems instead you can have it all running at a Docker container",
    "start": "991199",
    "end": "996959"
  },
  {
    "text": "everything will process in dependency and um everything can be consistent and shared amongst your",
    "start": "996959",
    "end": "1003240"
  },
  {
    "text": "developers but there's a l more Advantage than just development time dependencies because it's removed a lot",
    "start": "1003240",
    "end": "1008880"
  },
  {
    "text": "of the pain of installing and setting up um and actually ruing the processes you",
    "start": "1008880",
    "end": "1014079"
  },
  {
    "text": "can start getting much more reuse and taking advantage of work which other people have done for you so for example",
    "start": "1014079",
    "end": "1019440"
  },
  {
    "text": "I wanted to do some data science and some data analytics in a very simple way because I don't understand it um and I",
    "start": "1019440",
    "end": "1025918"
  },
  {
    "text": "wanted to use R because that seem like a same choice but I didn't want to go through the stress and pain of",
    "start": "1025919",
    "end": "1031079"
  },
  {
    "text": "understanding how to setup are on my laptop and actually I didn't want to clutching around and hanging around when I didn't even know if I'd be using it in",
    "start": "1031079",
    "end": "1037600"
  },
  {
    "text": "two weeks um so instead I just do downloaded it as a container so there's",
    "start": "1037600",
    "end": "1042678"
  },
  {
    "text": "a r Studio which is like a uh IDE you run the container it's got everything",
    "start": "1042679",
    "end": "1047918"
  },
  {
    "text": "which everything set up it's got R installed it's got everything configured correctly and you open all the port and",
    "start": "1047919",
    "end": "1054000"
  },
  {
    "text": "then you can access it via a web browser you don't have to worry about how it works internally you don't have to worry",
    "start": "1054000",
    "end": "1059679"
  },
  {
    "text": "about how to configure it it's just there V set and ready for you to start playing and start experimenting and",
    "start": "1059679",
    "end": "1066480"
  },
  {
    "text": "start to gain the value which you want the first place not how to configure it so that's how Linux works and that's",
    "start": "1066480",
    "end": "1073679"
  },
  {
    "text": "how containers have worked uh for the last two years",
    "start": "1073679",
    "end": "1079440"
  },
  {
    "text": "but what we have now is that Docker doesn't want to be just focus on LS Docker wants to allow you to deploy your",
    "start": "1079440",
    "end": "1086679"
  },
  {
    "text": "applications anywhere be it no matter what operating system no matter what device and so it supported rasby pi and",
    "start": "1086679",
    "end": "1094640"
  },
  {
    "text": "um arm devices and arm CPUs for the last year and now with Windows Server 2016 we",
    "start": "1094640",
    "end": "1100720"
  },
  {
    "text": "now have support for Windows Server so what does that look like so at the moment it's currently in technical",
    "start": "1100720",
    "end": "1107120"
  },
  {
    "text": "preview 5 uh I am I believe it will be out um at ignite",
    "start": "1107120",
    "end": "1115360"
  },
  {
    "text": "in September I believe there will be another announcement whether it be an RC or some further updates further",
    "start": "1115360",
    "end": "1121240"
  },
  {
    "text": "technical previews but you can go ahead you can start playing with a technical preview you can run it on azour download",
    "start": "1121240",
    "end": "1126720"
  },
  {
    "text": "the isi um and start experimenting and running containers today and what server 2016 brings is",
    "start": "1126720",
    "end": "1134480"
  },
  {
    "text": "four key components four new components we've got Windows Server core and windows Nano those are two new operating",
    "start": "1134480",
    "end": "1142159"
  },
  {
    "text": "systems for Windows we then have Windows containers and we have Windows hyperv containers significant difference but",
    "start": "1142159",
    "end": "1149600"
  },
  {
    "text": "Opera and work in a very similar way and how it actually look and feel is",
    "start": "1149600",
    "end": "1154679"
  },
  {
    "text": "how doco runs on Linux it's got a very consistent and very portable way of How",
    "start": "1154679",
    "end": "1161360"
  },
  {
    "text": "It's adopted and how it's uh move to the windows world and again Docker doesn't want you to have to relearn different",
    "start": "1161360",
    "end": "1167000"
  },
  {
    "text": "things or worry about different AR Tex is they want it to feel transparent and that's what they've actually done a very",
    "start": "1167000",
    "end": "1172600"
  },
  {
    "text": "good job of doing and so we'll have our new operating system window know 2016 we",
    "start": "1172600",
    "end": "1178559"
  },
  {
    "text": "would have the windows kernel which we have already but with the added benefits of container awareness and container",
    "start": "1178559",
    "end": "1186159"
  },
  {
    "text": "based features which we didn't have before we'll have the windows version of the docker engine which works and looks",
    "start": "1186159",
    "end": "1192159"
  },
  {
    "text": "in a very similar way and then on top of that we can run containers but now we can run containers which are actually",
    "start": "1192159",
    "end": "1197400"
  },
  {
    "text": "running Windows binaries so things like SQL Server things like msnq I and",
    "start": "1197400",
    "end": "1203280"
  },
  {
    "text": "asp.net applications taking all of the benefits and all the advantage which we had in Linux but bringing them to the windows",
    "start": "1203280",
    "end": "1210799"
  },
  {
    "text": "World in terms of hyperv containers hyperv containers add an additional layer of security and protection around",
    "start": "1210799",
    "end": "1217480"
  },
  {
    "text": "the container itself and so by default containers are secure right they are uh they have been",
    "start": "1217480",
    "end": "1224080"
  },
  {
    "text": "locked down they have um additional security and uh I know from kakoda",
    "start": "1224080",
    "end": "1229760"
  },
  {
    "text": "people do try and break out and they are there have been no reported breakouts um in the last two",
    "start": "1229760",
    "end": "1236760"
  },
  {
    "text": "years however certain companies and certain approaches like PTI",
    "start": "1236760",
    "end": "1243919"
  },
  {
    "text": "compliance kind of add additional restrictions and so having that shared kernel um could potentially introduce",
    "start": "1243919",
    "end": "1249960"
  },
  {
    "text": "some problems and so this is where hyperv containers come in hyperv containers basically add an additional",
    "start": "1249960",
    "end": "1255919"
  },
  {
    "text": "layer of security around the winning container itself this additional layer is a very mini very lightweight virtual",
    "start": "1255919",
    "end": "1263159"
  },
  {
    "text": "machine and so when you do Ducker R launch hyperv container what it's doing is actually launching a virtual machine",
    "start": "1263159",
    "end": "1270559"
  },
  {
    "text": "which will give you a different uh brand new isolated little Windows kernel and",
    "start": "1270559",
    "end": "1276600"
  },
  {
    "text": "then on top of that your container is running it's all transparent it's all managed for you under the covers the",
    "start": "1276600",
    "end": "1282559"
  },
  {
    "text": "very little overhead it only adds around 200 milliseconds to boot up so again the",
    "start": "1282559",
    "end": "1287640"
  },
  {
    "text": "timing isn't that far off but we have split the kernel and so from a security",
    "start": "1287640",
    "end": "1293840"
  },
  {
    "text": "point of view it's a lot more",
    "start": "1293840",
    "end": "1296880"
  },
  {
    "text": "secure in terms of use cases generally for most Pro companies and most problems",
    "start": "1300520",
    "end": "1307120"
  },
  {
    "text": "Windows containers will solve everything that you need however there's two ones which kind of where hyperv kind of comes",
    "start": "1307120",
    "end": "1313600"
  },
  {
    "text": "into its own one is shed hosting so if you are aure and you are winning",
    "start": "1313600",
    "end": "1319440"
  },
  {
    "text": "malicious potentially malicious code which is kind of designed to attack the windows kernel adding that additional",
    "start": "1319440",
    "end": "1325919"
  },
  {
    "text": "layer now in not sharing the same kernel between different clients and different hosts protects everyone else on the",
    "start": "1325919",
    "end": "1332080"
  },
  {
    "text": "system and so even if they do manage to break out of a container they'll only get to the virtual machine inside hyperv",
    "start": "1332080",
    "end": "1339640"
  },
  {
    "text": "and they can't they'll have to then break out of hyperv and it becomes a lot more problematic for them the other one",
    "start": "1339640",
    "end": "1345320"
  },
  {
    "text": "is multitenancy so where you want to have more restriction and more control over which machines um which tenants can",
    "start": "1345320",
    "end": "1352840"
  },
  {
    "text": "talk to which other tenants and so this is where the scenario is where you'll be using hyperv containers over Windows",
    "start": "1352840",
    "end": "1358640"
  },
  {
    "text": "containers for for the most part Windows containers will solve the problem so that's how we've got new",
    "start": "1358640",
    "end": "1365240"
  },
  {
    "text": "features which run containers on Windows the two new operating systems enable the processes running inside the container",
    "start": "1365240",
    "end": "1371960"
  },
  {
    "text": "themselves so window server core is it's kind of like Windows Server it's cut all",
    "start": "1371960",
    "end": "1378799"
  },
  {
    "text": "of the same or nearly all of the same apis it works and feels and looks like",
    "start": "1378799",
    "end": "1383880"
  },
  {
    "text": "Windows um and uh it's got all the things which You' expect from Windows so",
    "start": "1383880",
    "end": "1388960"
  },
  {
    "text": "you can remote desktop into it you have Windows Defender running if you really really want to for some strange reason",
    "start": "1388960",
    "end": "1395600"
  },
  {
    "text": "um and so it works and operates and handles Windows Server the benefit of this is if your application is currently",
    "start": "1395600",
    "end": "1402320"
  },
  {
    "text": "running on Windows Server it should be very easy to pull over to Windows Server core because the API and the way it",
    "start": "1402320",
    "end": "1408039"
  },
  {
    "text": "operates and the way it looks is very similar Windows Nano is the new those",
    "start": "1408039",
    "end": "1413720"
  },
  {
    "text": "streamline very cut down version of Windows it's be it has been designed",
    "start": "1413720",
    "end": "1419279"
  },
  {
    "text": "with containers and cloudbased deployment in in mind and that's been",
    "start": "1419279",
    "end": "1424559"
  },
  {
    "text": "Microsoft Focus especially because they needed something lighter for Azure and so this is how they came down with",
    "start": "1424559",
    "end": "1430120"
  },
  {
    "text": "Windows Nano everything has been stripped down apart from the very Bare Essentials for example networking",
    "start": "1430120",
    "end": "1435760"
  },
  {
    "text": "storage drivers uh the kernel at fa and a few other bits and pieces like hyperb",
    "start": "1435760",
    "end": "1441960"
  },
  {
    "text": "um and the course up and so you're talking like it's 12th of the thighs it's like it's really streamlined it",
    "start": "1441960",
    "end": "1448559"
  },
  {
    "text": "takes uh milliseconds to boot up and um as such this is a foundation for your uh",
    "start": "1448559",
    "end": "1455279"
  },
  {
    "text": "container image which people you can which you can use to run your own",
    "start": "1455279",
    "end": "1460919"
  },
  {
    "text": "applications if you think back kind of like if you compare these two new operating systems to Linux um Windows",
    "start": "1460919",
    "end": "1466960"
  },
  {
    "text": "Ser core is like the big uh proper operating system like a red hat or Anu or Centos it's got all of the",
    "start": "1466960",
    "end": "1474159"
  },
  {
    "text": "libraries all of the apis it's got Legacy backward compatibility and it will Ru pretty much most applications",
    "start": "1474159",
    "end": "1481080"
  },
  {
    "text": "Windows Nano is kind of like the new cool Alpine Linux it's been designed",
    "start": "1481080",
    "end": "1486320"
  },
  {
    "text": "with optimization it designed to be small it's designed to be lightweight and as such if you're POR in",
    "start": "1486320",
    "end": "1492000"
  },
  {
    "text": "applications you may or may not need to make changes like it'll make a best",
    "start": "1492000",
    "end": "1497080"
  },
  {
    "text": "effort and if you're not doing anything too weird and wonderful it will probably work but your migration may vary",
    "start": "1497080",
    "end": "1503440"
  },
  {
    "text": "especially as you progress to older um older Technologies and so that's how I",
    "start": "1503440",
    "end": "1508720"
  },
  {
    "text": "see when people are going to be migrating people will probably start with Windows Server core get something working and then sample an experiment",
    "start": "1508720",
    "end": "1514960"
  },
  {
    "text": "with Windows Nano to see if they can make it more lightweight and more streamlined and then make changes where",
    "start": "1514960",
    "end": "1520200"
  },
  {
    "text": "as them when they need to um when they can so how do we actually do this how do we get started and how do we start uh",
    "start": "1520200",
    "end": "1526559"
  },
  {
    "text": "using everything so um once you've got Windows Server 2016 set up there's a new windows feature",
    "start": "1526559",
    "end": "1533399"
  },
  {
    "text": "called containers fining enough um so you install that and that opens up and that adds all the hooks and all of the",
    "start": "1533399",
    "end": "1539279"
  },
  {
    "text": "apis which Docker needs to be able to deal with Windows the then two help",
    "start": "1539279",
    "end": "1544360"
  },
  {
    "text": "scripts um which you can download which installs everything and it will just ru and configure the host to have docka and",
    "start": "1544360",
    "end": "1550919"
  },
  {
    "text": "containers and everything set up which you need uh this script can take a while to run but it's it's kind of like it's",
    "start": "1550919",
    "end": "1558320"
  },
  {
    "text": "it's not that bad um but it downloads everything you need it sets up all the services it downloads Docker and it also",
    "start": "1558320",
    "end": "1563559"
  },
  {
    "text": "does some really interesting things while I was GL prepared such is downloading the nssm which was like that's a bit weird",
    "start": "1563559",
    "end": "1570840"
  },
  {
    "text": "um I had nothing seen that before and was a little bit concerned like I want to know what's winning turns out it's then for the non sucking service manager",
    "start": "1570840",
    "end": "1578000"
  },
  {
    "text": "which was like okay when you need when you don't want to be dealing with Windows service manager I can understand",
    "start": "1578000",
    "end": "1583200"
  },
  {
    "text": "you want to get something out the door and so this is the approach which a team took is like let's get something working",
    "start": "1583200",
    "end": "1588760"
  },
  {
    "text": "and let's get our feedback instead of making and fixing um fixing all of the",
    "start": "1588760",
    "end": "1594200"
  },
  {
    "text": "potential issues which may arise um I have been told that in the future versions it will run the proper Windows",
    "start": "1594200",
    "end": "1599960"
  },
  {
    "text": "manager so they won't need this but it was a nice way that the team are approaching the problem of getting containers working on Windows is do",
    "start": "1599960",
    "end": "1606279"
  },
  {
    "text": "whatever it takes and so once you've got containers and once you've got duck set up it kind of it looks and feels like it's on Linux",
    "start": "1606279",
    "end": "1614279"
  },
  {
    "text": "it looks and feels it's got the same apis and everything is consistent and so when you deal dealing with it it will kind of look and feel like this you'll",
    "start": "1614279",
    "end": "1620360"
  },
  {
    "text": "have your Docker client which will be like winning on your Mac Linux Windows machine and then that can talk and",
    "start": "1620360",
    "end": "1626760"
  },
  {
    "text": "communicate with Windows hosts or Linux hosts and then the duck demon will talk to the underly kernel it will know how",
    "start": "1626760",
    "end": "1632640"
  },
  {
    "text": "to launch processes and how to interact and do everything that you need again from the Viewpoint of how um",
    "start": "1632640",
    "end": "1640039"
  },
  {
    "text": "the Ducker images are structured and how they're layered um and how they're built it's identical it's the same theyve",
    "start": "1640039",
    "end": "1646039"
  },
  {
    "text": "taken the same experience and adapt it to the windows um Foundation or the",
    "start": "1646039",
    "end": "1651240"
  },
  {
    "text": "windows world and so um we'll have the registry we'll have our container base",
    "start": "1651240",
    "end": "1656480"
  },
  {
    "text": "image um which is Windows Ser core or Windows Nano and then on top of that we'll have whatever applications and",
    "start": "1656480",
    "end": "1662000"
  },
  {
    "text": "whatever configuration we need be it eqal server or IIs and everything which we need and then from the container",
    "start": "1662000",
    "end": "1667840"
  },
  {
    "text": "point of view and when you start it you do uh dur on the drive and it will have",
    "start": "1667840",
    "end": "1673039"
  },
  {
    "text": "program files it has the windows directory it will have system 32 and it will look and feel like a complete",
    "start": "1673039",
    "end": "1678159"
  },
  {
    "text": "Windows host and that's because it is it's just running inside of a",
    "start": "1678159",
    "end": "1683440"
  },
  {
    "text": "container you may be familiar with the new windows Linux",
    "start": "1683440",
    "end": "1689120"
  },
  {
    "text": "subsystem this was introduced in Windows 10 and it's kind of like the cool you",
    "start": "1689159",
    "end": "1694399"
  },
  {
    "text": "can win bash on Windows this is completely independent of Windows containers Windows containers are native",
    "start": "1694399",
    "end": "1701640"
  },
  {
    "text": "they're winning native applications not um a shall kind of like shim layer going",
    "start": "1701640",
    "end": "1707399"
  },
  {
    "text": "on and and so this is all work inside the kernel and the windows kernel team has been trying to get this working for",
    "start": "1707399",
    "end": "1713640"
  },
  {
    "text": "a very very long time and so it's only recently that they've actually made made the breakthroughs what they needed in",
    "start": "1713640",
    "end": "1719279"
  },
  {
    "text": "terms of the research in order to be able to get it in and I think the um advantage of Docker being around has",
    "start": "1719279",
    "end": "1725360"
  },
  {
    "text": "kind of made it jump a few priority lists in um Microsoft's",
    "start": "1725360",
    "end": "1730919"
  },
  {
    "text": "schedule so what is a Windows Docker image and how do you actually build and run these Docker images so when you",
    "start": "1730919",
    "end": "1738159"
  },
  {
    "text": "start after you've installed that lovely script um you will have two new doer",
    "start": "1738159",
    "end": "1743320"
  },
  {
    "text": "images ready and waiting you'll have Nano server and you'll have Windows Server core with darker images",
    "start": "1743320",
    "end": "1749159"
  },
  {
    "text": "everything is immutable so you won't be running Windows updates you won't be applying security patches to the running",
    "start": "1749159",
    "end": "1755720"
  },
  {
    "text": "uh Windows version which you would actually expect if it was a real virtual machine instead you'll be downloading and pulling the later versions of",
    "start": "1755720",
    "end": "1762600"
  },
  {
    "text": "Windows Server core and then you'll be using that as the base for your application and redeploying um your your",
    "start": "1762600",
    "end": "1768880"
  },
  {
    "text": "um redeploying your new Docker image and so when we start our container",
    "start": "1768880",
    "end": "1774360"
  },
  {
    "text": "again we're using Docker R like we did with renis uh redis with a run our Windows Ser core and start a command",
    "start": "1774360",
    "end": "1781320"
  },
  {
    "text": "prompt so in the blue we've got my host running from Powershell you can see it's got the uh install script um which I",
    "start": "1781320",
    "end": "1788760"
  },
  {
    "text": "downloaded and then inside our container um we do a list and it's just it's just",
    "start": "1788760",
    "end": "1794159"
  },
  {
    "text": "completely isolated it looks and feels like a Windows machine but it's complet completely separate also note that it's running a",
    "start": "1794159",
    "end": "1802240"
  },
  {
    "text": "UI so in Linux it's a bit different because uh of the how the display port",
    "start": "1802240",
    "end": "1808120"
  },
  {
    "text": "works but in Windows a container can launch UI processes which will make for",
    "start": "1808120",
    "end": "1813720"
  },
  {
    "text": "interesting future um opportunities so how has this actually",
    "start": "1813720",
    "end": "1819919"
  },
  {
    "text": "been being built so if we start a container we can start making modifications and we can",
    "start": "1819919",
    "end": "1826200"
  },
  {
    "text": "start installing things which we we need for our application to run so let's configure and set up IIs so we can run",
    "start": "1826200",
    "end": "1833799"
  },
  {
    "text": "whatever commands which we normally would run on Windows for example ip config we get given back the uh Network",
    "start": "1833799",
    "end": "1841080"
  },
  {
    "text": "um card information and the IP address so it's actually running and it can do whatever you need it to do and then we",
    "start": "1841080",
    "end": "1846840"
  },
  {
    "text": "can use whatever features of Windows which we'd normally use um in order to be able to configure a box so for",
    "start": "1846840",
    "end": "1852720"
  },
  {
    "text": "example install uh Windows feature web server so this will install I inside of a container",
    "start": "1852720",
    "end": "1858960"
  },
  {
    "text": "and then we like that seems to be like a good feature that's brought our container and our Windows machine up to",
    "start": "1858960",
    "end": "1864559"
  },
  {
    "text": "the level which we require and so we can exit Great go back to our host and then",
    "start": "1864559",
    "end": "1869639"
  },
  {
    "text": "we can use Docker commit to save that um to save that customized container and",
    "start": "1869639",
    "end": "1876919"
  },
  {
    "text": "convert it from a container back into an image we can then use this image and share it around and promote it from our",
    "start": "1876919",
    "end": "1882880"
  },
  {
    "text": "de machine to staging to production we can then also run it so we",
    "start": "1882880",
    "end": "1888159"
  },
  {
    "text": "can take a newly built um newly built IIs Windows container and we can start",
    "start": "1888159",
    "end": "1894960"
  },
  {
    "text": "it and so in this case um we give it a uh we're exposing Port 80 instead of",
    "start": "1894960",
    "end": "1900559"
  },
  {
    "text": "with reddish we exposed 6379 we're now running on Port 80 we're giving it the name of the image which we just built in",
    "start": "1900559",
    "end": "1907200"
  },
  {
    "text": "this case Windows Server core I um and I temporally work around of we need to tell it something to Ru um in the",
    "start": "1907200",
    "end": "1913880"
  },
  {
    "text": "foreground because they can't do background yet but that will be fixed soon we tell it to win CMD but in the background that will bring up",
    "start": "1913880",
    "end": "1919679"
  },
  {
    "text": "the container that will bring up IIs and so we can access it um from a web browser and we can see the IIs set page",
    "start": "1919679",
    "end": "1926080"
  },
  {
    "text": "or running inside of a container which we would expect however doing Docker commit is",
    "start": "1926080",
    "end": "1931840"
  },
  {
    "text": "kind of a complete antipattern in the dock W because it's not repeatable right if you manually going in and touching",
    "start": "1931840",
    "end": "1938720"
  },
  {
    "text": "containers and changing them the next time you have to upgrade for security fixes you have to repeat those steps",
    "start": "1938720",
    "end": "1944880"
  },
  {
    "text": "again and the CH are you will break something or forget something in or lose the original script and have to start it",
    "start": "1944880",
    "end": "1950600"
  },
  {
    "text": "all again so what we actually have is a Docker file the docker file is a list of",
    "start": "1950600",
    "end": "1956000"
  },
  {
    "text": "instructions um which Define what commands need to be run in order to build your Docker image in the first",
    "start": "1956000",
    "end": "1961679"
  },
  {
    "text": "place and so in this example I may have an example going forward we've got a",
    "start": "1961679",
    "end": "1967080"
  },
  {
    "text": "Docker file which says ruin install feature web server and then we can use",
    "start": "1967080",
    "end": "1972600"
  },
  {
    "text": "that and we can update that script with everything which we need in order to build our Docker image",
    "start": "1972600",
    "end": "1979840"
  },
  {
    "text": "but a lot of the time you don't even need to build an image yourself a lot of time images are already available and",
    "start": "1983240",
    "end": "1988760"
  },
  {
    "text": "already accessible on the docker Hub and so there's already a lot for things like um SQL Server it's already been built",
    "start": "1988760",
    "end": "1995159"
  },
  {
    "text": "and already available some samples which Microsoft have produced for example reddis um for the windows build some",
    "start": "1995159",
    "end": "2001279"
  },
  {
    "text": "window binderies mongod DP my SQL um I which we' expect all ready and wasting",
    "start": "2001279",
    "end": "2007960"
  },
  {
    "text": "so you can just take these images and you can extend them or you can just run them in your system if you're happy with the defaults and so again like with the",
    "start": "2007960",
    "end": "2014960"
  },
  {
    "text": "Linux world we now have that same features in Windows and this is an example of the",
    "start": "2014960",
    "end": "2020360"
  },
  {
    "text": "docker file I was talking about so we can specify our base image which originally we did dock of run in order",
    "start": "2020360",
    "end": "2026760"
  },
  {
    "text": "to start it we now specify that's our starting point we can give it some nice metadata so we know actually what that",
    "start": "2026760",
    "end": "2033039"
  },
  {
    "text": "container is running and what particular versions and then we can Define whatever commands which we need in order to build",
    "start": "2033039",
    "end": "2039279"
  },
  {
    "text": "that Ducker image and bring it up to our spec in this case launch P shell and add the web",
    "start": "2039279",
    "end": "2045880"
  },
  {
    "text": "server so in order to build the image um instead of doing Docker commit which",
    "start": "2048480",
    "end": "2053638"
  },
  {
    "text": "commits a live running container and turns it into an image we use duck a build we give it a nice friendly name in",
    "start": "2053639",
    "end": "2059760"
  },
  {
    "text": "this case I um and we give it a tag in this case 10 this tag allows us to give",
    "start": "2059760",
    "end": "2065280"
  },
  {
    "text": "it um a particular verion and so we can start verion ing um our different container images and as we upgrade and",
    "start": "2065280",
    "end": "2071440"
  },
  {
    "text": "we have IIs version 11 we can just roll out that new version and that new",
    "start": "2071440",
    "end": "2076919"
  },
  {
    "text": "tag and then when we do dock a list we now have our original images plus the one which we are just newly built based",
    "start": "2076919",
    "end": "2083440"
  },
  {
    "text": "on the instructions in our duck",
    "start": "2083440",
    "end": "2087078"
  },
  {
    "text": "file in terms of actually doing this for a real application we can't just install",
    "start": "2089000",
    "end": "2094118"
  },
  {
    "text": "um iOS we also need to be able to install our own source code and so the simplest way to do that would",
    "start": "2094119",
    "end": "2099760"
  },
  {
    "text": "be using um docka run and so what we can do is run a command simply Echo Hello",
    "start": "2099760",
    "end": "2105480"
  },
  {
    "text": "World um to the index at HTML as part of our build step and then uh when we",
    "start": "2105480",
    "end": "2111839"
  },
  {
    "text": "rebuild our application I um it will take the IIs which we had previously built as a foundation so it assumes",
    "start": "2111839",
    "end": "2120000"
  },
  {
    "text": "the do file assume that I has been configured it's been set up it's got everything which we need we build that",
    "start": "2120000",
    "end": "2126359"
  },
  {
    "text": "and so we now have our I Bas image we have the customizations which we added for our own application in this case um",
    "start": "2126359",
    "end": "2133599"
  },
  {
    "text": "creating the index.html and then we can run that newly created um container uh again",
    "start": "2133599",
    "end": "2139720"
  },
  {
    "text": "opening up the port and then it's accessible from uh from our web brow",
    "start": "2139720",
    "end": "2145400"
  },
  {
    "text": "which we' expect and we've deployed an iOS application running on Windows containers uh using Docker and if we",
    "start": "2145400",
    "end": "2154440"
  },
  {
    "text": "wanted to add that additional level of security I not R it as a Windows container but we're in as a Windows hyperv container we simply specified the",
    "start": "2154440",
    "end": "2161800"
  },
  {
    "text": "isolation level and we say isolation equals hyperv and so now when we launch that it will launch that very mini cut",
    "start": "2161800",
    "end": "2169079"
  },
  {
    "text": "down uh virtual machine and run our newly built docko image as a container",
    "start": "2169079",
    "end": "2174839"
  },
  {
    "text": "inside of that virtual machine and not on our host kernel",
    "start": "2174839",
    "end": "2180760"
  },
  {
    "text": "yes there other question whe is this something like boot stcker no so um this",
    "start": "2183960",
    "end": "2190359"
  },
  {
    "text": "is it's something which mic have to done which I'm not internally familiar with because it's um it's not open source",
    "start": "2190359",
    "end": "2197640"
  },
  {
    "text": "however what I believe it is doing is it's um all it's doing is basically the",
    "start": "2197640",
    "end": "2203079"
  },
  {
    "text": "Windows Server kernel um that's what it's boting up and so it's just a very",
    "start": "2203079",
    "end": "2208760"
  },
  {
    "text": "very like cut down version and it doesn't even run it's not running Docker it's not running any hooks it's um the",
    "start": "2208760",
    "end": "2216359"
  },
  {
    "text": "window server host knows how to use that newly built kernel in order to be able",
    "start": "2216359",
    "end": "2221440"
  },
  {
    "text": "to start the process and that's what the process is communicating with via or communicating fire and so yeah it's it's",
    "start": "2221440",
    "end": "2227319"
  },
  {
    "text": "different to the boot to Docker stuff you don't no so again you don't",
    "start": "2227319",
    "end": "2234520"
  },
  {
    "text": "because it's not a proper virtual machine you don't have to preallocate the memory You Don't Have to Give It 2 G",
    "start": "2234520",
    "end": "2240200"
  },
  {
    "text": "Ram it's just like um a proxy for the Windows host kernel I think that's probably the best way of putting it um",
    "start": "2240200",
    "end": "2245480"
  },
  {
    "text": "using the hyperv technology now I was saying all of these uh do",
    "start": "2245480",
    "end": "2252280"
  },
  {
    "text": "images should be immutable because we like immutable infrastructure and we don't like things randomly changing and",
    "start": "2252280",
    "end": "2257920"
  },
  {
    "text": "so when we wanted to upgrade our image we wanted to roll out security patches with a new version we' reuse um the",
    "start": "2257920",
    "end": "2264000"
  },
  {
    "text": "docker build command we'd give it we uh execute the docker run file uh Docker",
    "start": "2264000",
    "end": "2269440"
  },
  {
    "text": "file reun all the the commands and I thir would have a newly built image which would then deploy onto our system",
    "start": "2269440",
    "end": "2278040"
  },
  {
    "text": "and so you'll see things like this um you'll have IOS and then you'll have uh the app and then you'll have 1.1 1.2 1.3",
    "start": "2278040",
    "end": "2286000"
  },
  {
    "text": "um and then sometimes people like to label um have multiple different tags for the same image so in this case we've",
    "start": "2286000",
    "end": "2291960"
  },
  {
    "text": "got 1.1.3 with a certain image ID which we also tagged as latest and so people",
    "start": "2291960",
    "end": "2298240"
  },
  {
    "text": "when you want to know what the latest is you just simply do DOA R latest and then that will pull down whichever particular",
    "start": "2298240",
    "end": "2303800"
  },
  {
    "text": "version is and so you don't necessarily need to be tracking the version numbers in a different place you just always say",
    "start": "2303800",
    "end": "2309040"
  },
  {
    "text": "like just always deploy the latest version and then that will always make sure um it's it will tag um pull down",
    "start": "2309040",
    "end": "2315079"
  },
  {
    "text": "whichever one is being tagged to when you start containers you also",
    "start": "2315079",
    "end": "2320960"
  },
  {
    "text": "have a lot of customizations you also have a lot of different details and lot of different options um to configurate",
    "start": "2320960",
    "end": "2326119"
  },
  {
    "text": "how your application may be required and so for example you can specify the MAC address of the network interface of the",
    "start": "2326119",
    "end": "2332599"
  },
  {
    "text": "container itself useful if you're dealing with licensing because it's all the license may be attached to the MAC",
    "start": "2332599",
    "end": "2338880"
  },
  {
    "text": "address and as such that's how you uh identify the machine and identify the container and so you can start",
    "start": "2338880",
    "end": "2344200"
  },
  {
    "text": "customizing that you can then also customize the ports so we didn't want we don't necessarily always want um Port 80",
    "start": "2344200",
    "end": "2351319"
  },
  {
    "text": "being M to Port 80 we can split those we can have multiple different things we're on uh different ports on our host but",
    "start": "2351319",
    "end": "2358079"
  },
  {
    "text": "internally they could all be mapped to Port 80 useful for low testing testing scalability um testing things side by",
    "start": "2358079",
    "end": "2366119"
  },
  {
    "text": "side um and just making sure splitting that um containers container",
    "start": "2366119",
    "end": "2371200"
  },
  {
    "text": "configuration and host configuration other things like persistent data is quite important you",
    "start": "2371200",
    "end": "2377480"
  },
  {
    "text": "don't want the data which has been saved for example from SQL server or my SQL living inside the container because when",
    "start": "2377480",
    "end": "2384119"
  },
  {
    "text": "you like move the container or you upgrade a container the data will go with it and as se you will lose all the",
    "start": "2384119",
    "end": "2390079"
  },
  {
    "text": "data which I did and it's embarrassing and you don't really want that to happen so instead you can specify when you",
    "start": "2390079",
    "end": "2396119"
  },
  {
    "text": "launch a container you can specify um a volume to map in using the hyphen V and",
    "start": "2396119",
    "end": "2401240"
  },
  {
    "text": "so you say um point a directory on my host to actually being a directory inside the container and so when",
    "start": "2401240",
    "end": "2407800"
  },
  {
    "text": "anything gets wrote to SL dat it's actually being written to my host in op",
    "start": "2407800",
    "end": "2413359"
  },
  {
    "text": "Docker elastic search when we launch newly updated containers we point it",
    "start": "2413359",
    "end": "2419200"
  },
  {
    "text": "back to the same directory and we can ensure that the data is consistent um and available um",
    "start": "2419200",
    "end": "2425119"
  },
  {
    "text": "across across multiple different IND independent versions we can then also start locking it down so we can start",
    "start": "2425119",
    "end": "2431440"
  },
  {
    "text": "adding additional security restrictions to running processes and so we can say that in this example this certain",
    "start": "2431440",
    "end": "2437920"
  },
  {
    "text": "container is only allowed uh 20% of the CPU shares for example and so we can",
    "start": "2437920",
    "end": "2443040"
  },
  {
    "text": "start adding restrictions and adding additional security and quality of service to ensure that um highly",
    "start": "2443040",
    "end": "2450000"
  },
  {
    "text": "available highly important applications have higher shares than less background",
    "start": "2450000",
    "end": "2455079"
  },
  {
    "text": "winning processes and also Ensure that one container can't completely saturate the",
    "start": "2455079",
    "end": "2461000"
  },
  {
    "text": "host but the fundamental aim of all of this is to simpli simplify deployment simplify how we can automate um the LI",
    "start": "2461000",
    "end": "2471440"
  },
  {
    "text": "cycle so how it actually looks and how um everything looks in terms of a",
    "start": "2472839",
    "end": "2478280"
  },
  {
    "text": "pipeline so we have like our G repository or a team Foundation repository a developer comes along makes",
    "start": "2478280",
    "end": "2485440"
  },
  {
    "text": "some change commits into team found that will send a web hook and that will kick off a build task that build task",
    "start": "2485440",
    "end": "2492400"
  },
  {
    "text": "instead of just building um the binaries like we do at the moment it will also build and package those binaries as a",
    "start": "2492400",
    "end": "2498760"
  },
  {
    "text": "doer image it's then this Docker image which will promote and upgrade to the various",
    "start": "2498760",
    "end": "2504160"
  },
  {
    "text": "different environments and we want to reuse that same image from testing to QA",
    "start": "2504160",
    "end": "2509400"
  },
  {
    "text": "to production because we want to ensure that we're releasing the same components and that the thing which we built is",
    "start": "2509400",
    "end": "2514720"
  },
  {
    "text": "actually what we're releasing um and testing and pushing it through the way we can deal with that",
    "start": "2514720",
    "end": "2521680"
  },
  {
    "text": "and the way we can actually work with Docker I personally like the docker CLI because that's what I'm familiar with",
    "start": "2521680",
    "end": "2526839"
  },
  {
    "text": "but for people who like Po shell or like to automate and combine it with lter scripts there is a PO shell API I find",
    "start": "2526839",
    "end": "2533560"
  },
  {
    "text": "it a little bit more as a boss but it fits um fits with the PO Shell community and there's lots of commandlets so this",
    "start": "2533560",
    "end": "2540119"
  },
  {
    "text": "is commandlet for launching a new container again under the covers it's using the same API as D Run It just fits",
    "start": "2540119",
    "end": "2546040"
  },
  {
    "text": "and feels more familiar for the windows um admins who like",
    "start": "2546040",
    "end": "2551760"
  },
  {
    "text": "Powershell so what's actually happening under the covers and what's going on internally so the way that Linux",
    "start": "2551760",
    "end": "2559400"
  },
  {
    "text": "containers um add the security and add the restrictions is through the groups and Nam spaces the groups were created",
    "start": "2559400",
    "end": "2566680"
  },
  {
    "text": "and built by developer that Google and they limit what a container can or a",
    "start": "2566680",
    "end": "2571880"
  },
  {
    "text": "process can access um and utilize and so this is where it will say",
    "start": "2571880",
    "end": "2577559"
  },
  {
    "text": "um this one process can only access CPUs one to four it can only ever maximize",
    "start": "2577559",
    "end": "2583040"
  },
  {
    "text": "50% of the CPU Cycles it can only ever use 512 of memory and there C Group",
    "start": "2583040",
    "end": "2589160"
  },
  {
    "text": "which are making and enforcing those restrictions Nam spaces control what",
    "start": "2589160",
    "end": "2594480"
  },
  {
    "text": "that process can see and what that process uh can interact with and so this is how when I said at the beginning",
    "start": "2594480",
    "end": "2600599"
  },
  {
    "text": "where you ask a container wall it's running and it says just me it's because it's in the Nam space or by itself and",
    "start": "2600599",
    "end": "2607520"
  },
  {
    "text": "all other processes belong to that same Nam space the windows Kel has introduced",
    "start": "2607520",
    "end": "2613440"
  },
  {
    "text": "this and they've introduced the same Concepts and the same principles as what's been in the lynux kernel and so",
    "start": "2613440",
    "end": "2618800"
  },
  {
    "text": "they will look and feel very similar even though they're completely independent and completely separate as I",
    "start": "2618800",
    "end": "2623839"
  },
  {
    "text": "said the Windows Server team has went to this for a while they did drawbridge which was like an early prototype",
    "start": "2623839",
    "end": "2629200"
  },
  {
    "text": "they've done secure OS operating systems which have like kind of come and gone uh but now it's all available and all in to",
    "start": "2629200",
    "end": "2637200"
  },
  {
    "text": "point where this is a Microsoft Le initiative Microsoft reached out to Docker and said let's work together on",
    "start": "2637200",
    "end": "2643680"
  },
  {
    "text": "this and let's make a very consistent um standard API instead of Docker going to Microsoft and going like we really want",
    "start": "2643680",
    "end": "2650079"
  },
  {
    "text": "this um so it's a Microsoft Le thing and so that's why I think we'll see a lot of weight being put behind it as 2015 comes",
    "start": "2650079",
    "end": "2656760"
  },
  {
    "text": "out and as it progresses and goes forward and everything is open source or",
    "start": "2656760",
    "end": "2661800"
  },
  {
    "text": "large parts of it is open source the most important part kind of is the shim between how dacka and how did the",
    "start": "2661800",
    "end": "2668359"
  },
  {
    "text": "Windows Server uh kernel kind of communicate and while it's quite interesting go code and it's quite scary",
    "start": "2668359",
    "end": "2675880"
  },
  {
    "text": "in places it is all open source and so you can kind of see how Docker communicates with the shim and how the",
    "start": "2675880",
    "end": "2681559"
  },
  {
    "text": "shim interacts with the windows kernel and so if you inclined and you want to know what's really happening this is a",
    "start": "2681559",
    "end": "2686720"
  },
  {
    "text": "great place to go um on the Microsoft GitHub in terms of adding building",
    "start": "2686720",
    "end": "2692240"
  },
  {
    "text": "containers I said that the Hub has got lots of images already pre-built there's also lot lots of documentation around",
    "start": "2692240",
    "end": "2698559"
  },
  {
    "text": "how you can um take uh have certain requirements or features which you need",
    "start": "2698559",
    "end": "2704000"
  },
  {
    "text": "implementing and doc files which describe how to Ru and how to build those particular images for example um",
    "start": "2704000",
    "end": "2710280"
  },
  {
    "text": "asp.net applications IIs my SQL and it's to dock ofile with all of the instructions which you need in order to",
    "start": "2710280",
    "end": "2716720"
  },
  {
    "text": "be able to build and deploy um what your application requires in terms of things like uh",
    "start": "2716720",
    "end": "2724400"
  },
  {
    "text": "doing engine X Eng Genex um you'll see everything will look and feel very",
    "start": "2724400",
    "end": "2729440"
  },
  {
    "text": "familiar because the docker file doesn't have that many instructions it's quite uh",
    "start": "2729440",
    "end": "2734880"
  },
  {
    "text": "streamlined and so we'll see things like there's always a form there's always a base layer of some kind for your Docker",
    "start": "2734880",
    "end": "2740680"
  },
  {
    "text": "image you'll see kind of like metadata and labels to give it some description you'll see run commands which and",
    "start": "2740680",
    "end": "2747160"
  },
  {
    "text": "previously we just ran Parell install feature web server this is kind of doing something more complex but funded the",
    "start": "2747160",
    "end": "2754040"
  },
  {
    "text": "same process and then we can set things like um the work directory so that when we start the container or fuge commands",
    "start": "2754040",
    "end": "2760319"
  },
  {
    "text": "always R from that particular directory and then we can give it like um what is a default command in order to launch",
    "start": "2760319",
    "end": "2767040"
  },
  {
    "text": "this process so if we don't specify anything assume that we want to launch the um engine X executable and so that's",
    "start": "2767040",
    "end": "2774760"
  },
  {
    "text": "it's all baked into the image for things like uh Java it looks and feels the same in this case we're",
    "start": "2774760",
    "end": "2781520"
  },
  {
    "text": "adding uh because of Licensing and Oracle you have to go and download uh",
    "start": "2781520",
    "end": "2786640"
  },
  {
    "text": "thir certain files from the arle website copy all them into a certain directory and then manually uh using the add",
    "start": "2786640",
    "end": "2793160"
  },
  {
    "text": "command add them into the docker image as it being built and but it kind of works and feels the",
    "start": "2793160",
    "end": "2800520"
  },
  {
    "text": "same in terms of actually the docker image um because Docker is now this",
    "start": "2803480",
    "end": "2808760"
  },
  {
    "text": "crossplatform thing during Docker run on Linux should also look and feel the same",
    "start": "2808760",
    "end": "2814559"
  },
  {
    "text": "as if you do it on Windows and so Docker made certain changes in order to make that possible so a Docker image now",
    "start": "2814559",
    "end": "2821400"
  },
  {
    "text": "knows how to uh run itself on different architectures and so it's got a manifest",
    "start": "2821400",
    "end": "2827839"
  },
  {
    "text": "file and so when you do Docker pull reddis on Windows it will download and pull the Microsoft Windows uh or the",
    "start": "2827839",
    "end": "2835400"
  },
  {
    "text": "windows related binaries and the windows related Docker image when you do the same command on Linux it will do the",
    "start": "2835400",
    "end": "2841760"
  },
  {
    "text": "appropriate thing and download the Linux binaries and run those and when you do it an arm it will download 32-bit",
    "start": "2841760",
    "end": "2847720"
  },
  {
    "text": "Concepts and so when you're moving around and when you're uh running Docker",
    "start": "2847720",
    "end": "2853000"
  },
  {
    "text": "containers on different architectures and different machines it will look and feel the same and Ducker will do the",
    "start": "2853000",
    "end": "2858119"
  },
  {
    "text": "right thing you won't have to worry about prefixing it with uh windows or",
    "start": "2858119",
    "end": "2863280"
  },
  {
    "text": "having certain different versions or certain different namings that will all happen internally and under the covers",
    "start": "2863280",
    "end": "2868599"
  },
  {
    "text": "for you but what about the developers right it's all great having Windows containers",
    "start": "2868599",
    "end": "2873720"
  },
  {
    "text": "on server 2016 but like no one's going to be running that on their local laptop and so what do you actually do so",
    "start": "2873720",
    "end": "2880720"
  },
  {
    "text": "thankfully M have also realized this um and have come up with a story so Windows",
    "start": "2880720",
    "end": "2887040"
  },
  {
    "text": "uh Windows 10 uh the like The Insider release has Windows container support",
    "start": "2887040",
    "end": "2893920"
  },
  {
    "text": "built in um so you can download it from here uh um download the inside of release and",
    "start": "2893920",
    "end": "2900680"
  },
  {
    "text": "you can get a quick start fundamentally it looks and feels uh like Windows Server 10 uh Windows Server 20 16 you",
    "start": "2900680",
    "end": "2907839"
  },
  {
    "text": "simply enable a feature you enable hyperv you download and invoke some particular scripts and executables and",
    "start": "2907839",
    "end": "2915240"
  },
  {
    "text": "then you have Windows containers rning on Windows 10 the way it manages to do",
    "start": "2915240",
    "end": "2920920"
  },
  {
    "text": "this and the way it works is by using that hyperv isolation so it's taken advantage of that isolation level in",
    "start": "2920920",
    "end": "2928000"
  },
  {
    "text": "order to execute and boot a different oper different Windows host kernel and",
    "start": "2928000",
    "end": "2934440"
  },
  {
    "text": "it just happened that this Windows Server kernel inside the isolation is one which has got Windows container",
    "start": "2934440",
    "end": "2939760"
  },
  {
    "text": "support and so that's how they've managed to very quickly bootstrap Windows 10 in order to be able to have",
    "start": "2939760",
    "end": "2945480"
  },
  {
    "text": "it to run and build Docker images by using hyperv which makes perfect sense and now we can just run Docker on our",
    "start": "2945480",
    "end": "2952760"
  },
  {
    "text": "local laptops we can use that to then uh build our images and then we can use that to promote and push it into",
    "start": "2952760",
    "end": "2958920"
  },
  {
    "text": "production where it will run as Windows containers on Windows th 2016 and we can just work it and",
    "start": "2958920",
    "end": "2965680"
  },
  {
    "text": "operating the same way Visual Studio has additional plugins and so you can build Ducker images from",
    "start": "2965680",
    "end": "2971880"
  },
  {
    "text": "within visual studio um add some nice support and add some nice shortcuts and just make everything feel a little bit",
    "start": "2971880",
    "end": "2978280"
  },
  {
    "text": "more um together so how does this actually look",
    "start": "2978280",
    "end": "2983400"
  },
  {
    "text": "when you're running it in production how do you actually run containers um in production so for those who may have saw",
    "start": "2983400",
    "end": "2989079"
  },
  {
    "text": "my talk this morning on kubernetes kubernetes is a great way of managing containers at scale um across multiple",
    "start": "2989079",
    "end": "2996000"
  },
  {
    "text": "different hosts it will give you very nice visability it will do Health checking it will do um stealth healing",
    "start": "2996000",
    "end": "3001880"
  },
  {
    "text": "it will manage autoscaling it will have all of these awesome features which you kind of need when you're running containers at uh at particular scale and",
    "start": "3001880",
    "end": "3009359"
  },
  {
    "text": "it's also got things like it understands how your application works and how it operates and so when you say deploy this",
    "start": "3009359",
    "end": "3016119"
  },
  {
    "text": "particular thing it will deploy it onto the most uh appropriate host depending",
    "start": "3016119",
    "end": "3021400"
  },
  {
    "text": "on what the things are happening in your syn so you don't know you no longer even need to do capacity planning",
    "start": "3021400",
    "end": "3027240"
  },
  {
    "text": "because kubernetes are doing the capacity planning for you so that's pretty cool and that's a pattern called",
    "start": "3027240",
    "end": "3033119"
  },
  {
    "text": "bin packing and this is what Google do internally Google match Henning memory",
    "start": "3033119",
    "end": "3038680"
  },
  {
    "text": "requirements or memory applications which require low CPU could together on",
    "start": "3038680",
    "end": "3043880"
  },
  {
    "text": "the same machine as high CPU applications which require very low memory because they are not constrained",
    "start": "3043880",
    "end": "3049079"
  },
  {
    "text": "and because they're not fighting other the same resources your Google understands how to really maximize the",
    "start": "3049079",
    "end": "3054680"
  },
  {
    "text": "utilization of a box because is understanding the metrics of the application internally and this is what",
    "start": "3054680",
    "end": "3059920"
  },
  {
    "text": "we be coming to kubernetes hopefully one day we'll all be uh administering servers like this",
    "start": "3059920",
    "end": "3067200"
  },
  {
    "text": "and we can actually start flying through and seeing all them in pretty light which be",
    "start": "3067200",
    "end": "3072359"
  },
  {
    "text": "awesome another one which I really like is mesir uh DC when you are using Azure",
    "start": "3072359",
    "end": "3078599"
  },
  {
    "text": "and if you're using the Azure container service this is actually what is powering that Microsoft have partnered",
    "start": "3078599",
    "end": "3084240"
  },
  {
    "text": "with aour partnered with mesosphere in order to be able to rent it and this has",
    "start": "3084240",
    "end": "3089760"
  },
  {
    "text": "kind of like this has also got really cool features which will probably come to kubernetes but uh host finger",
    "start": "3089760",
    "end": "3094920"
  },
  {
    "text": "printing so when you've got a cluster of different hosts of different types meths",
    "start": "3094920",
    "end": "3099960"
  },
  {
    "text": "will understand which host can win which types of workloads and so when you",
    "start": "3099960",
    "end": "3105559"
  },
  {
    "text": "execute a um a Windows container and put it into a cluster of multihost it will",
    "start": "3105559",
    "end": "3112160"
  },
  {
    "text": "understand that it can only RN it on Windows containers or containers uh wholesale particular functionality and",
    "start": "3112160",
    "end": "3119119"
  },
  {
    "text": "so we'll start looking like this where like a Linux clask will only ever run on Linux for like example",
    "start": "3119119",
    "end": "3126240"
  },
  {
    "text": "um whatever is Linux only with Windows Bash that's a little bit more blurry now because Windows Convent but ah windows",
    "start": "3126240",
    "end": "3135000"
  },
  {
    "text": "so Linux based tasks and so that will go into mesos and marathon and that will",
    "start": "3135000",
    "end": "3140280"
  },
  {
    "text": "get scheduled onto the Linux only operating systems things like Java which is portable and cross uh language will",
    "start": "3140280",
    "end": "3146640"
  },
  {
    "text": "be deployed onto any available hosts whichever have the most resources uh free and then W things like Windows",
    "start": "3146640",
    "end": "3153559"
  },
  {
    "text": "containers will obviously only be deployed onto host which support Windows containers and so this will be all",
    "start": "3153559",
    "end": "3159520"
  },
  {
    "text": "managed from the Viewpoint of the administrators and the developers they don't care they just say Ru this",
    "start": "3159520",
    "end": "3165400"
  },
  {
    "text": "container and then mesos and Marathon will manage uh which hosted the most appropriate whether it's windows or",
    "start": "3165400",
    "end": "3172720"
  },
  {
    "text": "Linux so this is great um and so that's all available now and we can start winning and building windows containers",
    "start": "3172720",
    "end": "3179079"
  },
  {
    "text": "and shipping applications inside of them but what about the future and what does that look like so Docker will be on ilt",
    "start": "3179079",
    "end": "3186040"
  },
  {
    "text": "devices there cool startups um like resin which will manage um deploying",
    "start": "3186040",
    "end": "3191599"
  },
  {
    "text": "Docker images onto um Arm based devices at scale so they've got really great Dem",
    "start": "3191599",
    "end": "3197559"
  },
  {
    "text": "where they've got 3,000 different devices they do a Docker push and it pushes to every single image and you can",
    "start": "3197559",
    "end": "3202640"
  },
  {
    "text": "see it doing a rolling update across iot devices or you the docker API which is",
    "start": "3202640",
    "end": "3208280"
  },
  {
    "text": "kind of impressive and kind of better than the alternative ways of deploying software onto uh",
    "start": "3208280",
    "end": "3214200"
  },
  {
    "text": "iot SQL Server the container is now a thing so like why do we have to go through the 10 pages of tick boxes just",
    "start": "3214200",
    "end": "3221640"
  },
  {
    "text": "to install SQL Server when we can just do a Docker pull and Docker run and have a default version of SQL Server running",
    "start": "3221640",
    "end": "3229400"
  },
  {
    "text": "and like we don't have to go through that stress and that pain but if we're doing that for Windows server and",
    "start": "3229400",
    "end": "3235720"
  },
  {
    "text": "Windows 10 now has container functionality then why can't we do it with Visual Studio as we saw earlier",
    "start": "3235720",
    "end": "3243480"
  },
  {
    "text": "Windows containers can launch uis they can launch a command prompt so why can't they launch other applications so why",
    "start": "3243480",
    "end": "3250280"
  },
  {
    "text": "can't they run Visual Studio why do we have to download 2 GB of uh installation",
    "start": "3250280",
    "end": "3256839"
  },
  {
    "text": "files to spend another 3 hours of them installing and optimizing themselves when Microsoft could do that all for US",
    "start": "3256839",
    "end": "3263400"
  },
  {
    "text": "ship it as a Docker image and then we just do docker visual studio and everything just works and you can also",
    "start": "3263400",
    "end": "3270079"
  },
  {
    "text": "run versions independently and side by side and they won't have versioning conflicts and when a new version comes",
    "start": "3270079",
    "end": "3275920"
  },
  {
    "text": "out we just do a Docker pull Visual Studio colon 2 and it will download and",
    "start": "3275920",
    "end": "3281000"
  },
  {
    "text": "pull the latest version and again we can RN them side by side so that's something which I would love to see and then we",
    "start": "3281000",
    "end": "3287079"
  },
  {
    "text": "start talking about uh everything as a container be it our deployed applications be it our iot devices be it",
    "start": "3287079",
    "end": "3294559"
  },
  {
    "text": "our desktop applications everything is running and deployed as these uh as these Docker images and as these Docker",
    "start": "3294559",
    "end": "3301240"
  },
  {
    "text": "containers and they can be deployed anywhere because everything is independent and it knows what can RN",
    "start": "3301240",
    "end": "3307839"
  },
  {
    "text": "where we ship it into the cloud and it just will Ru on what is a most available",
    "start": "3307839",
    "end": "3313599"
  },
  {
    "text": "most appropriate hardware and it will be deciding that for us and so we won't have to we can then focus on more",
    "start": "3313599",
    "end": "3320200"
  },
  {
    "text": "important things like beer with that in mind containers and the ecosystem and docker as a whole",
    "start": "3320200",
    "end": "3326960"
  },
  {
    "text": "there's lots to learn it's all very new and um there's lots to try and get your",
    "start": "3326960",
    "end": "3332200"
  },
  {
    "text": "head around and so to try and help that that was one of the motivations why I built katacoda is to give you a",
    "start": "3332200",
    "end": "3338000"
  },
  {
    "text": "centralized place where you can go and actually take a step-by-step guide and understand and learn things that you",
    "start": "3338000",
    "end": "3343640"
  },
  {
    "text": "actually need and so I I would love to hear your feedback I'd love to hear your thoughts if you have questions then",
    "start": "3343640",
    "end": "3349760"
  },
  {
    "text": "please do reach out um and contact me with that in mind um we started off by looking at the",
    "start": "3349760",
    "end": "3358119"
  },
  {
    "text": "physical world we started off looking at what containers are in the physical world and then adapting them and how",
    "start": "3358119",
    "end": "3363280"
  },
  {
    "text": "they apply to the software and how we can have these very consistent ways of building images using DOA build and the",
    "start": "3363280",
    "end": "3369799"
  },
  {
    "text": "API Runing them using DOA run um and making it feel and look um identical no",
    "start": "3369799",
    "end": "3375839"
  },
  {
    "text": "matter whether it's reddish or IIs with on the inside do the matter",
    "start": "3375839",
    "end": "3381319"
  },
  {
    "text": "window Ser 2016 brings together four key components about how containers will",
    "start": "3381319",
    "end": "3388000"
  },
  {
    "text": "operate and how containers will R in production we've got Windows Server core and windows Nano which is the new",
    "start": "3388000",
    "end": "3393640"
  },
  {
    "text": "operating systems new base layers to build and deploy our containers um",
    "start": "3393640",
    "end": "3399119"
  },
  {
    "text": "from the containers will then be running from Windows containers and then if you want that additional security layer",
    "start": "3399119",
    "end": "3404920"
  },
  {
    "text": "Windows hyperv containers everything is a mutable so once that container have been built it doesn't change it just",
    "start": "3404920",
    "end": "3410880"
  },
  {
    "text": "gets promoted and then when you need to make an update for example security updates or new Vis of your app you'll",
    "start": "3410880",
    "end": "3417640"
  },
  {
    "text": "rebuild that container again promote it through and everything will be automated and scripted for you and now we have it",
    "start": "3417640",
    "end": "3423680"
  },
  {
    "text": "on Windows 10 we have the same level and the same support for Docker and winning",
    "start": "3423680",
    "end": "3428760"
  },
  {
    "text": "containers what we have on Windows Server 16 available to developers who are needing to build and operate and run",
    "start": "3428760",
    "end": "3435880"
  },
  {
    "text": "these containers and get them ready for production next steps I recommend obviously katoda but if you want to play",
    "start": "3435880",
    "end": "3442640"
  },
  {
    "text": "with this play with it on azour it's not very expensive and it you downloading like huge amounts of IIs and Docker",
    "start": "3442640",
    "end": "3450119"
  },
  {
    "text": "images and it's very quick and very easy to get started with and then if you want to play with the developer editions and",
    "start": "3450119",
    "end": "3455920"
  },
  {
    "text": "the developer Windows support download the Windows 10 in thiro release and it will be there ready and waiting for you",
    "start": "3455920",
    "end": "3461760"
  },
  {
    "text": "with that thank you there for your time and uh thank you very much",
    "start": "3461760",
    "end": "3466770"
  },
  {
    "text": "[Applause]",
    "start": "3466770",
    "end": "3471079"
  }
]