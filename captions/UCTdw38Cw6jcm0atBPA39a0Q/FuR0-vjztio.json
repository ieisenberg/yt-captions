[
  {
    "text": "good morning everyone really happy to see so many people here",
    "start": "1700",
    "end": "7620"
  },
  {
    "text": "I'm really happy to be back in Oslo this is truly one of the best conferences to go to in Europe and to show our",
    "start": "7620",
    "end": "13620"
  },
  {
    "text": "appreciation before we get started could we please give a round of applause to the organizers",
    "start": "13620",
    "end": "20119"
  },
  {
    "text": "thanks this is also going to confuse everyone else that's not in this room all right so this is about what's new in",
    "start": "23880",
    "end": "31619"
  },
  {
    "text": "c-sharp some of the features that have been added the past few years or actually the past decade and also some",
    "start": "31619",
    "end": "37680"
  },
  {
    "text": "of the things that we are going to expect in newer versions of c-sharp I usually joke and say that c-sharp is",
    "start": "37680",
    "end": "43680"
  },
  {
    "text": "turning into F sharp and I'm gonna stop making that joke because the truth actually hurts quite a bit",
    "start": "43680",
    "end": "51020"
  },
  {
    "text": "but in all honesty c-sharp is taking inspiration from so many different programming languages not only F-sharp",
    "start": "51059",
    "end": "57360"
  },
  {
    "text": "but also Java kotlin Swift and all of the other amazing programming languages but what the they are doing with the",
    "start": "57360",
    "end": "64140"
  },
  {
    "text": "language is that they were making it a part of c-sharp so that we as c-sharp developers are familiar with those",
    "start": "64140",
    "end": "69659"
  },
  {
    "text": "features so my name is Philip Ekberg if you do have any questions after this talk send",
    "start": "69659",
    "end": "75600"
  },
  {
    "text": "me an email it's funny no one told me that I forgot to put my email on my slides I've been telling people to email me for years I",
    "start": "75600",
    "end": "83340"
  },
  {
    "text": "never received any emails but now it's out there send me an email if you have any questions so c-sharp has gotten all of these",
    "start": "83340",
    "end": "90299"
  },
  {
    "text": "amazing language features added to it in the past decade things such as generics",
    "start": "90299",
    "end": "95340"
  },
  {
    "text": "async and weight and pattern matching are some of the things that architecturally change how we look at",
    "start": "95340",
    "end": "101280"
  },
  {
    "text": "our Solutions we can architect our applications a little bit differently to make them more readable more",
    "start": "101280",
    "end": "107579"
  },
  {
    "text": "maintainable and honestly a little bit more fun to work with while we're not going to be able to cover all of this here I I just got out",
    "start": "107579",
    "end": "114360"
  },
  {
    "text": "of a two-day workshop going into detail on all of these different language features so we're not going to be able",
    "start": "114360",
    "end": "120060"
  },
  {
    "text": "to cover everything in depth but I'm going to give you some inspiration to what c-sharp has been improved with over",
    "start": "120060",
    "end": "126540"
  },
  {
    "text": "the past few years and what's interesting with c-sharp and also VB if you if you like that",
    "start": "126540",
    "end": "131819"
  },
  {
    "text": "programming language it's all open source you can go on to GitHub and you can participate in discussions around",
    "start": "131819",
    "end": "137520"
  },
  {
    "text": "what to get into the language you can ask the language designers why they would want to add some certain features",
    "start": "137520",
    "end": "144239"
  },
  {
    "text": "and you can also see what other developers are expecting from these features so not everyone knows that c-sharp has",
    "start": "144239",
    "end": "151020"
  },
  {
    "text": "been open source for quite some time so it's easy to follow along with the progress of the language",
    "start": "151020",
    "end": "156300"
  },
  {
    "text": "they've done all the things such as records pattern matching all of those improvements have all been done through",
    "start": "156300",
    "end": "161640"
  },
  {
    "text": "GitHub open discussions getting inspiration from other programmers out there that are using the language",
    "start": "161640",
    "end": "167879"
  },
  {
    "text": "because honestly if you build a product if you're not getting some feedback it's really hard to know if people actually",
    "start": "167879",
    "end": "173879"
  },
  {
    "text": "like what you're doing and I'll show you this later but there's one language feature that they added",
    "start": "173879",
    "end": "179280"
  },
  {
    "text": "into c-sharp as a preview feature and then they got a lot of community backlash no one wanted this language",
    "start": "179280",
    "end": "185400"
  },
  {
    "text": "feature so they removed it funnily enough everyone at Microsoft thought that this is going into the",
    "start": "185400",
    "end": "192000"
  },
  {
    "text": "language everyone was using the preview version and added it to their repositories so all of a sudden everyone",
    "start": "192000",
    "end": "197099"
  },
  {
    "text": "had to go back and refactor their application a second time so don't always jump on the preview",
    "start": "197099",
    "end": "203340"
  },
  {
    "text": "features so if we want to use the latest version of c-sharp how do we do that",
    "start": "203340",
    "end": "208680"
  },
  {
    "text": "now some of the language features require a particular runtime for example c-sharp H requires dot net core 3.1 if",
    "start": "208680",
    "end": "216120"
  },
  {
    "text": "you want to use c-sharp9.5 and so forth now this is because some of the language",
    "start": "216120",
    "end": "223019"
  },
  {
    "text": "features require things in the runtime as well in the.net SDK",
    "start": "223019",
    "end": "228420"
  },
  {
    "text": "I tend to say in the framework but it's very confusing because there's no longer any.net framework",
    "start": "228420",
    "end": "234599"
  },
  {
    "text": "now if you require some of the language features that also require a runtime change you will have to have both the of",
    "start": "234599",
    "end": "241920"
  },
  {
    "text": "course the compilers as well as the runtime installed and you get that with the latest version of Visual Studio",
    "start": "241920",
    "end": "247379"
  },
  {
    "text": "but an unsupported feature of this is that you can in fact use a c-sharp 12",
    "start": "247379",
    "end": "253500"
  },
  {
    "text": "feature for example that doesn't require a runtime or dot net",
    "start": "253500",
    "end": "259079"
  },
  {
    "text": "type you can use that for older versions of net as well because it all just is",
    "start": "259079",
    "end": "265020"
  },
  {
    "text": "compiler magic or just uses compilation to translate this into the IL which is",
    "start": "265020",
    "end": "270360"
  },
  {
    "text": "then also compatible with older versions of the runtime so that's quite cool",
    "start": "270360",
    "end": "275520"
  },
  {
    "text": "so with that being said we're going to be looking at quite a lot of features from c-sharp 8 through all the way to C sharp 12.",
    "start": "275520",
    "end": "281520"
  },
  {
    "text": "but before we get into c-sharp 12 and what's coming in the future I want to talk about some highlights from c-sharp",
    "start": "281520",
    "end": "287040"
  },
  {
    "text": "8. there was quite a lot of language features added to this iteration of the language now you would imagine that once",
    "start": "287040",
    "end": "294060"
  },
  {
    "text": "you've gone to the eighth iteration of your product you would be finished that's not the case and if that was the",
    "start": "294060",
    "end": "300000"
  },
  {
    "text": "case I wouldn't be standing here so some highlights from C sharp eight they introduced a truly true way if",
    "start": "300000",
    "end": "306120"
  },
  {
    "text": "you're doing read-only members you can have default interface methods I'm going to look at a few of these in just a",
    "start": "306120",
    "end": "311460"
  },
  {
    "text": "moment switch Expressions which is pattern matching enhancements some using declaration static local functions",
    "start": "311460",
    "end": "317160"
  },
  {
    "text": "there's a lot of things that was added in c-sharp 8. that will help us express",
    "start": "317160",
    "end": "323039"
  },
  {
    "text": "ourselves a little bit differently I've highlighted a couple of these here which are the important features pattern",
    "start": "323039",
    "end": "329220"
  },
  {
    "text": "matching enhancements using what's called switch Expressions which we're going to dig into we're going to look at some nullable reference types and",
    "start": "329220",
    "end": "335039"
  },
  {
    "text": "asynchronous streams this is just to get you up to speed about what's added to c-sharp over the past few years",
    "start": "335039",
    "end": "341580"
  },
  {
    "text": "before we talk about the useful features there's one feature called default interface methods or default interface",
    "start": "341580",
    "end": "348660"
  },
  {
    "text": "implementations I normally say that this is dividing developers into two groups",
    "start": "348660",
    "end": "354360"
  },
  {
    "text": "some people love this feature actually I haven't met anyone that loves",
    "start": "354360",
    "end": "359400"
  },
  {
    "text": "it so either you hate it or you just don't like it so with this feature look at this",
    "start": "359400",
    "end": "364979"
  },
  {
    "text": "interface here I've I've deployed this to my all my users I have a million users on GitHub that's using my",
    "start": "364979",
    "end": "370199"
  },
  {
    "text": "interface and all of a sudden I want to extend this with more methods",
    "start": "370199",
    "end": "375539"
  },
  {
    "text": "if I do this if I add a method to this interface everyone that's using my",
    "start": "375539",
    "end": "380759"
  },
  {
    "text": "package will then have to implement that new method which is a little bit annoying especially if you're a library",
    "start": "380759",
    "end": "386340"
  },
  {
    "text": "developer so what's the the best way to fix this why not allow you to actually have a",
    "start": "386340",
    "end": "394020"
  },
  {
    "text": "method implementation on your interface so while I'm using an expression body member here to create this method",
    "start": "394020",
    "end": "400380"
  },
  {
    "text": "implementation this could have been a normal method body so now my interface knows how to execute",
    "start": "400380",
    "end": "407340"
  },
  {
    "text": "code and obviously this requires a runtime change because previously no one expected that",
    "start": "407340",
    "end": "413460"
  },
  {
    "text": "an interface which is a contract would be able to actually execute some logic",
    "start": "413460",
    "end": "419340"
  },
  {
    "text": "so this is good if you're a library developer I've seen people use this to introduce converters and whatnot I'm not",
    "start": "419340",
    "end": "425280"
  },
  {
    "text": "sure if this is the best approach to introduce a helper class or doing multiple inheritance but it's there",
    "start": "425280",
    "end": "431400"
  },
  {
    "text": "now in terms of useful language features there's this thing called nullable reference types",
    "start": "431400",
    "end": "436500"
  },
  {
    "text": "so in C sharp boring actually in all other programming languages we've all probably experienced",
    "start": "436500",
    "end": "443099"
  },
  {
    "text": "this if you haven't welcome to the world of programming this might be your first day",
    "start": "443099",
    "end": "449880"
  },
  {
    "text": "tomorrow you'll get this but in all honesty if they were to",
    "start": "449880",
    "end": "456120"
  },
  {
    "text": "rebuild the compilers today just throw everything out of the of whatever's there in visual studio and in produce",
    "start": "456120",
    "end": "462419"
  },
  {
    "text": "c-sharp as a new programming language they would make it really hard for anyone to use nulls they do this in",
    "start": "462419",
    "end": "468539"
  },
  {
    "text": "kotlin in kotlin you have to explicitly say that I want this to be null I want to allow you to use nulls for this thing",
    "start": "468539",
    "end": "475380"
  },
  {
    "text": "and the compiler is going to smack you on the fingers and tell you to not to because it's not a good idea",
    "start": "475380",
    "end": "481979"
  },
  {
    "text": "the problem with null ability is that we'll end up having null checks all over the place it's going to clutter the code",
    "start": "481979",
    "end": "487979"
  },
  {
    "text": "with unnecessary if blocks or unnecessary question marks or exclamation marks in the case of C sharp",
    "start": "487979",
    "end": "495000"
  },
  {
    "text": "but also what does it actually mean to return null from from a method",
    "start": "495000",
    "end": "500460"
  },
  {
    "text": "as an example if I have a repository that fetches a user from a database that returns null did that mean that I",
    "start": "500460",
    "end": "507539"
  },
  {
    "text": "couldn't find the user was the user deleted did I get an exception",
    "start": "507539",
    "end": "513719"
  },
  {
    "text": "personally I always return now so I should probably listen to my own device here and not do this because it's very",
    "start": "513719",
    "end": "519659"
  },
  {
    "text": "confusing it might make sense the first time you write the code but in the long run it doesn't",
    "start": "519659",
    "end": "526080"
  },
  {
    "text": "so instead a better approach would have been to introduce standard objects or default objects for example you inherit",
    "start": "526080",
    "end": "533459"
  },
  {
    "text": "from the user and have a not found user or deleted user and you can then use pattern matching to determine exactly",
    "start": "533459",
    "end": "539820"
  },
  {
    "text": "what that user is it's better similar to nulls but it's at",
    "start": "539820",
    "end": "545339"
  },
  {
    "text": "least a little bit more understanding what you're doing and also introducing nulls in the",
    "start": "545339",
    "end": "551040"
  },
  {
    "text": "language means that we encourage objects to be mutable that means that we can change the state once I create an object",
    "start": "551040",
    "end": "558300"
  },
  {
    "text": "I don't want that to be changed at any time without it being dereferenced",
    "start": "558300",
    "end": "563519"
  },
  {
    "text": "because there's going to be some issues with multi-threading if you're building multi-threaded applications or applications that get",
    "start": "563519",
    "end": "570600"
  },
  {
    "text": "get data at the same time from different places then you might end up having race conditions and if you are objects that",
    "start": "570600",
    "end": "577260"
  },
  {
    "text": "are not immutable you'll end up having some issues so we can fix this we can of course look",
    "start": "577260",
    "end": "583920"
  },
  {
    "text": "for nulls all over the place but this here is ugly and someone's going to tell me well you",
    "start": "583920",
    "end": "588959"
  },
  {
    "text": "can write this much better obviously I can write this if statement a little bit nicer but introducing question marks all",
    "start": "588959",
    "end": "595800"
  },
  {
    "text": "over my code base it's not really the best architecture or not the best approach",
    "start": "595800",
    "end": "601440"
  },
  {
    "text": "while it's obvious what I want to do here it's not very very nice without if I tell the compiler to treat",
    "start": "601440",
    "end": "609120"
  },
  {
    "text": "all my nullables or all my reference types as being not nullable",
    "start": "609120",
    "end": "614820"
  },
  {
    "text": "so what does that actually mean it can enable this feature in a couple of different ways",
    "start": "614820",
    "end": "620519"
  },
  {
    "text": "so traditionally this is a normal c-sharp application but traditionally everything such as an innumerable",
    "start": "620519",
    "end": "627779"
  },
  {
    "text": "or you know a normal string they're all nullable and this application doesn't give me any compiler",
    "start": "627779",
    "end": "633720"
  },
  {
    "text": "errors it doesn't give me any warnings or anything like that but when I enable this language feature",
    "start": "633720",
    "end": "639720"
  },
  {
    "text": "called nullable reference types I can say nullable enable and now all of a sudden it's going to",
    "start": "639720",
    "end": "646320"
  },
  {
    "text": "tell me or give me a little bit of a squiggly here telling me that you have a little bit of a warning here",
    "start": "646320",
    "end": "652860"
  },
  {
    "text": "we all know that as soon as we get a warning in our compiled application we go and fix that",
    "start": "652860",
    "end": "658820"
  },
  {
    "text": "everyone that's laughing you don't do it I know I'm the same I just ignore all the warnings",
    "start": "658820",
    "end": "665279"
  },
  {
    "text": "there's a fix for that as well so I want to enable this instead of doing this per class like it's a good option to be able to if I want to refactor an older",
    "start": "665279",
    "end": "671820"
  },
  {
    "text": "version of my application I can go ahead and enable this for a class a method just a field if I wanted to do that but",
    "start": "671820",
    "end": "679260"
  },
  {
    "text": "honestly what I want to do here is that instead of doing it per per line I want to go into the project file",
    "start": "679260",
    "end": "685980"
  },
  {
    "text": "and say that I want to enable this language feature",
    "start": "685980",
    "end": "690319"
  },
  {
    "text": "and now I've enabled these nullable reference types",
    "start": "691200",
    "end": "696440"
  },
  {
    "text": "and I've also enabled another thing called treat warnings as errors this is probably the most amazing thing",
    "start": "696779",
    "end": "703560"
  },
  {
    "text": "that you can do in a project so if I save this here and I go back and all of a sudden we",
    "start": "703560",
    "end": "710459"
  },
  {
    "text": "have nullable reference types enabled and instead of getting a warning I get a compiler warn error I can no longer",
    "start": "710459",
    "end": "716339"
  },
  {
    "text": "compile the application because I haven't guaranteed that this is set to an instance",
    "start": "716339",
    "end": "721860"
  },
  {
    "text": "now another reference types in this this type was introduced in C sharp eight there is a there's a lot of improvements",
    "start": "721860",
    "end": "728880"
  },
  {
    "text": "to how we work with this coming in c-sharp 11 as well but let me get to that in just a moment to get rid of these compiler errors",
    "start": "728880",
    "end": "737760"
  },
  {
    "text": "we have to guarantee that this is set to an instance so I could of course introduce a",
    "start": "737760",
    "end": "743519"
  },
  {
    "text": "Constructor and now if I do that it's going to tell me that well the Constructor of a class should be in",
    "start": "743519",
    "end": "748620"
  },
  {
    "text": "charge of instancing these objects the problem with then changing this",
    "start": "748620",
    "end": "754980"
  },
  {
    "text": "first name String last name I'm going to set these two",
    "start": "754980",
    "end": "760140"
  },
  {
    "text": "the corresponding values let's do last name and now I don't have any errors anymore",
    "start": "760140",
    "end": "765899"
  },
  {
    "text": "but then when I compile this application everyone that's using this class is now going to be incompatible not the best",
    "start": "765899",
    "end": "772019"
  },
  {
    "text": "approach so we have two options I really don't want to introduce a Constructor",
    "start": "772019",
    "end": "777540"
  },
  {
    "text": "and I'm going to get ahead of myself here and show you a language feature of c-sharp 11 that allows us to get around",
    "start": "777540",
    "end": "783000"
  },
  {
    "text": "this problem I can say that this is required if I can spell this there we go",
    "start": "783000",
    "end": "790320"
  },
  {
    "text": "I can now say that anyone that's creating an instance of this has to set this value",
    "start": "790320",
    "end": "796200"
  },
  {
    "text": "and they can do that in the object initializer which is very different from introducing a Constructor",
    "start": "796200",
    "end": "801959"
  },
  {
    "text": "because anyone that's deserializing this if you're using system.text.json which",
    "start": "801959",
    "end": "807120"
  },
  {
    "text": "is the built-in Json serializer in.net it will look for required properties and",
    "start": "807120",
    "end": "812339"
  },
  {
    "text": "if it's not available in your Json that you're deserializing you'll get an exception if you're trying to create an",
    "start": "812339",
    "end": "819300"
  },
  {
    "text": "instance of this class without setting this first name in The Collection initializer it's going to tell you that",
    "start": "819300",
    "end": "824820"
  },
  {
    "text": "you have a problem so if we require this here and you might have also spotted that I",
    "start": "824820",
    "end": "830880"
  },
  {
    "text": "have another keyword here called init only this is from C sharp 9 where I say that you can initialize this but you can",
    "start": "830880",
    "end": "836220"
  },
  {
    "text": "only do it once so after that this is going to be immutable so we're required to set this but then you cannot change",
    "start": "836220",
    "end": "842579"
  },
  {
    "text": "it I could set it to set and then it's no no longer immutable but that's not a",
    "start": "842579",
    "end": "848220"
  },
  {
    "text": "good idea so I want to require the first name but honestly I don't want to um require the",
    "start": "848220",
    "end": "854459"
  },
  {
    "text": "last name for some reason so there was a few different ways to solve this as well but I just want to",
    "start": "854459",
    "end": "860459"
  },
  {
    "text": "allow this to be set to null and this is the nullable reference type I can now say that a reference type is allowed to",
    "start": "860459",
    "end": "866160"
  },
  {
    "text": "be set to null so you introduce a question mark all right so now the problem wasn't",
    "start": "866160",
    "end": "873660"
  },
  {
    "text": "really in this class the the nullable the null reference exceptions would have occurred where someone uses this class",
    "start": "873660",
    "end": "879920"
  },
  {
    "text": "and that would have been so let me just do the same thing for where this class is used this wouldn't be set to",
    "start": "879920",
    "end": "885959"
  },
  {
    "text": "reference null reference exception either this wouldn't throw anything so I'm going to say that I allow this class to also be set to null when you",
    "start": "885959",
    "end": "892260"
  },
  {
    "text": "instantiate this person class now if I expand this method here I know",
    "start": "892260",
    "end": "897480"
  },
  {
    "text": "that this here gave me a little bit of a compiler error as well so the compiler is really smart here it",
    "start": "897480",
    "end": "904260"
  },
  {
    "text": "knows that you have something that could potentially be null and I can say that well",
    "start": "904260",
    "end": "909300"
  },
  {
    "text": "I want to do perform a null check I know that details can be null this is a nullable reference type last name can",
    "start": "909300",
    "end": "914760"
  },
  {
    "text": "also be null and then all of a sudden I've performed the appropriate null checks",
    "start": "914760",
    "end": "920040"
  },
  {
    "text": "without enabling this language feature I wouldn't have known that this would have been a potential null reference",
    "start": "920040",
    "end": "925920"
  },
  {
    "text": "exception but you don't have to end up doing question marks all over the place",
    "start": "925920",
    "end": "932040"
  },
  {
    "text": "can also the compiler is really smart IT introduces something called null State static analysis so that it keeps track",
    "start": "932040",
    "end": "939180"
  },
  {
    "text": "of if you've performed a null check so I could say well if person",
    "start": "939180",
    "end": "945779"
  },
  {
    "text": "dot details is no continue if person dot details dot last name is",
    "start": "945779",
    "end": "954540"
  },
  {
    "text": "no continue and then it knows that I've performed",
    "start": "954540",
    "end": "959760"
  },
  {
    "text": "these appropriate null checks and of course we could write this in many different ways but this is just to illustrate that it's not going to",
    "start": "959760",
    "end": "966060"
  },
  {
    "text": "complain about details here because if I don't do this Republic complain that I'm not doing the",
    "start": "966060",
    "end": "972240"
  },
  {
    "text": "null check here so now I can do this in many different ways it's a quite powerful language feature",
    "start": "972240",
    "end": "979079"
  },
  {
    "text": "but it also knows that if I perform the null check in another method that I call and that method can then promise that",
    "start": "979079",
    "end": "985139"
  },
  {
    "text": "it's performing the appropriate null checks so an example of that would have been to say there's a class called argument",
    "start": "985139",
    "end": "992519"
  },
  {
    "text": "null exception throw if null and I can say person dot details",
    "start": "992519",
    "end": "1000079"
  },
  {
    "text": "and we could do the same for the last name and now it knows that this method",
    "start": "1000079",
    "end": "1006199"
  },
  {
    "text": "promises that if this is null it's going to throw an exception so it validates this input argument and then tells me if",
    "start": "1006199",
    "end": "1012680"
  },
  {
    "text": "there's an exception I prefer or there's no null references",
    "start": "1012680",
    "end": "1018019"
  },
  {
    "text": "compiler is doing a whole lot of smart things here so I know a lot of people that enable",
    "start": "1018019",
    "end": "1023540"
  },
  {
    "text": "this in their projects and I find a lot of potential non-reference exceptions which is better to do in compile time",
    "start": "1023540",
    "end": "1029720"
  },
  {
    "text": "rather than in runtime there's another place in this application",
    "start": "1029720",
    "end": "1034880"
  },
  {
    "text": "before I get to that let me show you another option here if we remove this I could also say that I'm smarter than",
    "start": "1034880",
    "end": "1040280"
  },
  {
    "text": "the compiler and say that I'm going to damage give me the details this is the damage operator",
    "start": "1040280",
    "end": "1047860"
  },
  {
    "text": "you think this is a good idea Maybe this was a fix to uh to get rid of not",
    "start": "1048140",
    "end": "1055400"
  },
  {
    "text": "having the required keyword previously in in c-sharp 10 so you could say that I",
    "start": "1055400",
    "end": "1060919"
  },
  {
    "text": "require this to be non-null but the default is null damn it",
    "start": "1060919",
    "end": "1065679"
  },
  {
    "text": "um not the best design anyways let's keep it like that for now and then instead we're going to go down here and",
    "start": "1066080",
    "end": "1072620"
  },
  {
    "text": "see that there's another problem I'm saying that this here requires that I return an instance of something that",
    "start": "1072620",
    "end": "1078500"
  },
  {
    "text": "implements I enumerable I could say that it's potentially null or that it is",
    "start": "1078500",
    "end": "1083539"
  },
  {
    "text": "potentially contains potential null references and in C sharp 13 you'll be",
    "start": "1083539",
    "end": "1088760"
  },
  {
    "text": "able to do question marks explosion work all over the place write the code for you",
    "start": "1088760",
    "end": "1095299"
  },
  {
    "text": "I'm kidding so I don't want to do that honestly that is the last resort allowing to return all is just to be",
    "start": "1095299",
    "end": "1102380"
  },
  {
    "text": "able to get this to into an older application but doing this from scratch is probably not the best idea so instead",
    "start": "1102380",
    "end": "1109100"
  },
  {
    "text": "I want to ensure that I've created this instance I can do that by saying I want to return",
    "start": "1109100",
    "end": "1115160"
  },
  {
    "text": "I want to yield return something you can do yield return that means I don't have to create a temporary",
    "start": "1115160",
    "end": "1121160"
  },
  {
    "text": "list I can use the target type new expression to tell me just create a new person",
    "start": "1121160",
    "end": "1126500"
  },
  {
    "text": "so the compiler will use this new language feature called Target type new expression to figure out what type it",
    "start": "1126500",
    "end": "1132500"
  },
  {
    "text": "needs to create and then give me an instance of that because I'm not required to create the",
    "start": "1132500",
    "end": "1138440"
  },
  {
    "text": "details class this is not going to give me an exception but look at what happens if I say I want",
    "start": "1138440",
    "end": "1144140"
  },
  {
    "text": "to also create a new instance of details now it's going to give me a compiler error here because I haven't set the",
    "start": "1144140",
    "end": "1150679"
  },
  {
    "text": "required property first name so I can do that as well just to",
    "start": "1150679",
    "end": "1156380"
  },
  {
    "text": "illustrate exactly how this works I can say first name and look at that",
    "start": "1156380",
    "end": "1162020"
  },
  {
    "text": "an indent is a little bit nicer it even tells us that first name is",
    "start": "1162020",
    "end": "1168080"
  },
  {
    "text": "required so visual studio will tell us that you are required to set this to an instance",
    "start": "1168080",
    "end": "1173660"
  },
  {
    "text": "right there we go set it to an instance",
    "start": "1173660",
    "end": "1181179"
  },
  {
    "text": "probably not the best idea so while you think you are smarter than",
    "start": "1181340",
    "end": "1187640"
  },
  {
    "text": "the compiler you're most certainly not therefore we should set this to some default value",
    "start": "1187640",
    "end": "1193220"
  },
  {
    "text": "maybe we do string dot empty instead if you want to do that you get the idea right so we can set it",
    "start": "1193220",
    "end": "1198980"
  },
  {
    "text": "to a default object instead which is not null so the nullable reference types allow us",
    "start": "1198980",
    "end": "1204620"
  },
  {
    "text": "to quickly find places that could potentially cause exceptions and we can enable and disable this I don't I can't",
    "start": "1204620",
    "end": "1210980"
  },
  {
    "text": "only enable this but I could say that nullable disable for this method if it's causing a little bit of nuance in my",
    "start": "1210980",
    "end": "1216559"
  },
  {
    "text": "upgrade or I can enable it for certain portions all right so with that being said",
    "start": "1216559",
    "end": "1223340"
  },
  {
    "text": "I do recommend that you turn this feature on and while I do usually I joke",
    "start": "1223340",
    "end": "1229460"
  },
  {
    "text": "and say you should turn this on and check in your code and just leave work you should actually try this it will be",
    "start": "1229460",
    "end": "1235760"
  },
  {
    "text": "such a fun social experiment turn it on and just check in your code and go on vacation",
    "start": "1235760",
    "end": "1242500"
  },
  {
    "text": "summer will fix the code I promise so with C sharp eight we also got this thing called asynchronous streams which",
    "start": "1242900",
    "end": "1249140"
  },
  {
    "text": "is a quite powerful language feature it allows you to consume and produce streams of data I have a talk later",
    "start": "1249140",
    "end": "1256400"
  },
  {
    "text": "today on building asynchronous programming in c-sharp and doing that efficiently it's at three o'clock so",
    "start": "1256400",
    "end": "1261500"
  },
  {
    "text": "we'll quickly just go through exactly what this language feature is doing basically I can consume a stream of data",
    "start": "1261500",
    "end": "1267980"
  },
  {
    "text": "like this here so what does it actually mean to then say I want to await a for each Loop",
    "start": "1267980",
    "end": "1273740"
  },
  {
    "text": "let's jump over to visual studio again and I have a sample for this so what I can do here is that I can say",
    "start": "1273740",
    "end": "1280760"
  },
  {
    "text": "I have this await for each that's going to retrieve elements asynchronously",
    "start": "1280760",
    "end": "1287179"
  },
  {
    "text": "so to create one of these it probably makes more sense if you look at how to produce a stream of elements I have a",
    "start": "1287179",
    "end": "1293240"
  },
  {
    "text": "method called read async which is going to produce an i async enumerable of",
    "start": "1293240",
    "end": "1298700"
  },
  {
    "text": "string which means that it can give me strings on the Fly basically it could be retrieving them from a message bus let's",
    "start": "1298700",
    "end": "1305360"
  },
  {
    "text": "say an Azure message queue could retrieve it from a disk memory whatever doesn't matter the idea is that I get",
    "start": "1305360",
    "end": "1311659"
  },
  {
    "text": "one element at a time I don't know how many I'm gonna get but as soon as I get the elements I'm going to be happy and",
    "start": "1311659",
    "end": "1318140"
  },
  {
    "text": "this is of course marked as being async I'm using a language feature from C sharp 8 called using declarations so I",
    "start": "1318140",
    "end": "1325039"
  },
  {
    "text": "can say using VAR stream this means that once this Method All completes and finishes it's going to dispose of that",
    "start": "1325039",
    "end": "1330919"
  },
  {
    "text": "disposable type so I no longer have to wrap my entire code inside a using statement",
    "start": "1330919",
    "end": "1336980"
  },
  {
    "text": "and then I have some a while loop here that's saying I want to read the next line from a phylon disk",
    "start": "1336980",
    "end": "1343340"
  },
  {
    "text": "I'm using pattern mashing which we're going to talk about in just a moment to say that as long as this is an instance",
    "start": "1343340",
    "end": "1348860"
  },
  {
    "text": "of a string I'm going to capture this in a local variable which is only available inside the scope of this while loop",
    "start": "1348860",
    "end": "1357460"
  },
  {
    "text": "it's quite handy the previous versions of C sharp if you did this in C sharp 8 or C sharp 7 you'd have to write a",
    "start": "1357500",
    "end": "1364400"
  },
  {
    "text": "little bit more code than than this here so not only does it validate that it's set to an instance it also capture this",
    "start": "1364400",
    "end": "1371240"
  },
  {
    "text": "into the local variable co-line I can then say I want to process this line this might take some time it might",
    "start": "1371240",
    "end": "1377360"
  },
  {
    "text": "be sending it off to another queue and waiting for that response might be storing it to disk or whatever you get the idea",
    "start": "1377360",
    "end": "1383360"
  },
  {
    "text": "it's an asynchronous process that takes a little bit of time doesn't matter what it's doing and then I use yield return now yield",
    "start": "1383360",
    "end": "1389419"
  },
  {
    "text": "together with the I async enumerable is what's making this magic work so this here will indicate to the iterator that",
    "start": "1389419",
    "end": "1396020"
  },
  {
    "text": "it's now a new element available to process and honestly the async and await keywords together with the iasync",
    "start": "1396020",
    "end": "1402559"
  },
  {
    "text": "enumerable and yield keyword there's a lot of context switching and jumping between threads and to make this work",
    "start": "1402559",
    "end": "1408559"
  },
  {
    "text": "it's it's really quite amazing so now this produces a stream now",
    "start": "1408559",
    "end": "1414020"
  },
  {
    "text": "normally you might use a producer like the Azure SDK for example to say connect",
    "start": "1414020",
    "end": "1419240"
  },
  {
    "text": "me to a a message queue so maybe you don't write this portion of",
    "start": "1419240",
    "end": "1424340"
  },
  {
    "text": "the code but you do write the consumer part of things which is this a wait for each Loop what you might have seen before is that",
    "start": "1424340",
    "end": "1430760"
  },
  {
    "text": "you say I want to iterate through all the elements available in this chunk of data so when you have a weight in front",
    "start": "1430760",
    "end": "1437659"
  },
  {
    "text": "of something it means that give me all of that all of the result when you're done the await in front of the for each Loop",
    "start": "1437659",
    "end": "1444559"
  },
  {
    "text": "means that each element is going to be retrieved asynchronously",
    "start": "1444559",
    "end": "1449500"
  },
  {
    "text": "so I'll give it a break point in here and I'm just going to print that to the console if I put a breakpoint here I'll put a",
    "start": "1449840",
    "end": "1455600"
  },
  {
    "text": "breakpoint inside the while loop and I'm going to run this with the debugger attached just to make sure we run the",
    "start": "1455600",
    "end": "1461780"
  },
  {
    "text": "right project and you'll see here that it it starts reading one of the lines and then we get",
    "start": "1461780",
    "end": "1468740"
  },
  {
    "text": "up into the the for each Loop it processes this I could choose now to not",
    "start": "1468740",
    "end": "1474020"
  },
  {
    "text": "continue break out of the loop and that would stop reading from the Stream but then when I want to read the next",
    "start": "1474020",
    "end": "1480080"
  },
  {
    "text": "element it goes ahead and reads that comes back to my for each Loop when that element is available",
    "start": "1480080",
    "end": "1486440"
  },
  {
    "text": "so if I release this this here is going to show you my favorite song I'm sorry",
    "start": "1486440",
    "end": "1493960"
  },
  {
    "text": "not really all right so that's the asynchronous streams they're quite powerful and I'm using this together with that pattern",
    "start": "1494000",
    "end": "1500780"
  },
  {
    "text": "matching enhancements as well that we're going to talk about next so there's a lot happening in this code",
    "start": "1500780",
    "end": "1506299"
  },
  {
    "text": "snippet here even though it looks very simple there's a lot of code generated to make this work the task parallel",
    "start": "1506299",
    "end": "1512840"
  },
  {
    "text": "library to get with the with the generated State machine it's doing a lot of things internally",
    "start": "1512840",
    "end": "1518419"
  },
  {
    "text": "I'm just happy I don't have to write that code myself",
    "start": "1518419",
    "end": "1523059"
  },
  {
    "text": "so also with C sharp 9 we got a thing called records now records is another",
    "start": "1523520",
    "end": "1528740"
  },
  {
    "text": "way of creating a reference type this was one of the language features they wanted to add when they started the work",
    "start": "1528740",
    "end": "1535580"
  },
  {
    "text": "on the open source compilers but apparently it was very difficult to get this language feature created and",
    "start": "1535580",
    "end": "1542120"
  },
  {
    "text": "added to the language so therefore it took a little bit of time and one of the things you'll notice with the work on all of these language",
    "start": "1542120",
    "end": "1547760"
  },
  {
    "text": "features is that they want to make it a part of c-sharp they want to make it feel like it's it's meant to be a",
    "start": "1547760",
    "end": "1554299"
  },
  {
    "text": "c-sharp language feature although if anyone in here has ever done c-sharp one it's very different today",
    "start": "1554299",
    "end": "1560059"
  },
  {
    "text": "but it keeps improving with every version of the language and it feels like it belongs in the current time",
    "start": "1560059",
    "end": "1567799"
  },
  {
    "text": "we looked at the ended only Setters which is a way for us to create a immutable or or",
    "start": "1567799",
    "end": "1573440"
  },
  {
    "text": "said only once Setter on a property we have something called a top level statement",
    "start": "1573440",
    "end": "1580039"
  },
  {
    "text": "we have pattern matching enhancements in C sharp nine there's this target type new Expressions which I showed you just",
    "start": "1580039",
    "end": "1585260"
  },
  {
    "text": "a moment ago and there's a whole lot of more language features that are more important if you are working with very",
    "start": "1585260",
    "end": "1592880"
  },
  {
    "text": "low level programming there's some caching going on as well there's a whole lot of language features",
    "start": "1592880",
    "end": "1599000"
  },
  {
    "text": "like even if this is the ninth iteration of C sharp we're not going to spend time looking at all of these here because some of them are just important for very",
    "start": "1599000",
    "end": "1606020"
  },
  {
    "text": "specific use cases but what we are going to to look at is",
    "start": "1606020",
    "end": "1611059"
  },
  {
    "text": "how to use record types and pattern matching and I didn't say this but we also have",
    "start": "1611059",
    "end": "1616700"
  },
  {
    "text": "this language features called top level statements and let me show you this here real quickly if you haven't seen this",
    "start": "1616700",
    "end": "1621860"
  },
  {
    "text": "before this here is actually a normal program file so I don't have a public static void main or anything like that",
    "start": "1621860",
    "end": "1627440"
  },
  {
    "text": "this here is the new style of writing a console application for example but it's",
    "start": "1627440",
    "end": "1633020"
  },
  {
    "text": "also what you use if you want to create something called a minimal API so there's this new concept of allowing you",
    "start": "1633020",
    "end": "1639140"
  },
  {
    "text": "to quickly create a web application that only lives in a console application like",
    "start": "1639140",
    "end": "1645380"
  },
  {
    "text": "this it's very simple to read and um it's quite powerful",
    "start": "1645380",
    "end": "1650539"
  },
  {
    "text": "so with that being said we're going to be talking a little bit about pattern matching so pattern matching was introduced as a",
    "start": "1650539",
    "end": "1657500"
  },
  {
    "text": "first iteration in C sharp seven but at that point it didn't really make a lot of sense because it required a lot more",
    "start": "1657500",
    "end": "1664279"
  },
  {
    "text": "code to express yourself and the whole idea with pattern matching is that we want to write less code and express",
    "start": "1664279",
    "end": "1670940"
  },
  {
    "text": "ourselves better and the code to make sense but I'll show you how to not make sense",
    "start": "1670940",
    "end": "1676340"
  },
  {
    "text": "in a moment as well so pattern matching is all about allowing us to determine what things are",
    "start": "1676340",
    "end": "1681440"
  },
  {
    "text": "so in this case here we could check if a fruit is edible the color if the puzzle piece is transparent what order these",
    "start": "1681440",
    "end": "1688640"
  },
  {
    "text": "things are in the the poster and so forth I like to talk about this like matching",
    "start": "1688640",
    "end": "1693740"
  },
  {
    "text": "on an attribute or matching on the type and I'm not talking about the attribute in terms of what you decorate a method",
    "start": "1693740",
    "end": "1700100"
  },
  {
    "text": "or a class with or a parameter but an attribute as the color for example so in C sharp one through six we've been",
    "start": "1700100",
    "end": "1706820"
  },
  {
    "text": "able to do this as well it's just a little bit different you could say that I want to get the type of what I'm",
    "start": "1706820",
    "end": "1712100"
  },
  {
    "text": "looking at and I can compare that to a type of something and then I can also check a property if that property was",
    "start": "1712100",
    "end": "1718820"
  },
  {
    "text": "only available on the subclass I'd have to to cast it myself we've all seen code like this here it's",
    "start": "1718820",
    "end": "1725480"
  },
  {
    "text": "it's nothing wrong with it but we could probably improve on this a little bit one of the the themes of improvements in",
    "start": "1725480",
    "end": "1732440"
  },
  {
    "text": "c-sharp is allowing us to write less code to express the same idea so that's why in C sharp 7 they require",
    "start": "1732440",
    "end": "1739340"
  },
  {
    "text": "a lot more code to express the same thing but this Builds on to what's coming in C",
    "start": "1739340",
    "end": "1746299"
  },
  {
    "text": "sharp 8 9 10 11 and 12. the improvements to pattern matching so in this first iteration of of pattern matching in C",
    "start": "1746299",
    "end": "1752900"
  },
  {
    "text": "sharp 7 there's quite a few things happening in here the first thing is that we can use that type as the input",
    "start": "1752900",
    "end": "1758480"
  },
  {
    "text": "to the switch inside the case we can say if this is of my type that I'm looking for I'm",
    "start": "1758480",
    "end": "1763520"
  },
  {
    "text": "capturing this to a local variable and I can then also use it as the concrete type without having to do sorry without",
    "start": "1763520",
    "end": "1770480"
  },
  {
    "text": "having to do any type casting which is quite powerful",
    "start": "1770480",
    "end": "1775700"
  },
  {
    "text": "but at the time that C sharp 7 came out I didn't use this a lot but with C sharp 8 we got this thing",
    "start": "1775700",
    "end": "1782120"
  },
  {
    "text": "called a switch expression this here is a little bit of a different way of writing the pattern matching",
    "start": "1782120",
    "end": "1788360"
  },
  {
    "text": "using pattern matching we can also use pattern matching with normal if statements and elsif but this is a",
    "start": "1788360",
    "end": "1795080"
  },
  {
    "text": "really good addition to that so I could say that this object I want to create patterns for this to determine what this",
    "start": "1795080",
    "end": "1800299"
  },
  {
    "text": "is and I fill this switch expression with",
    "start": "1800299",
    "end": "1805880"
  },
  {
    "text": "uh with expressions which is determining what it returns so here's an example of that I could say",
    "start": "1805880",
    "end": "1812179"
  },
  {
    "text": "that well I'm looking for a specific type and then it's going to return some",
    "start": "1812179",
    "end": "1817220"
  },
  {
    "text": "data it doesn't have to To Be Strings it's just a very simple example",
    "start": "1817220",
    "end": "1823399"
  },
  {
    "text": "but it could also return critical column method that returns a complex object could return anything right",
    "start": "1823399",
    "end": "1828860"
  },
  {
    "text": "and then the underscore that's the discard it's a way for me to say that I want to match on anything I don't care",
    "start": "1828860",
    "end": "1834260"
  },
  {
    "text": "if it's null I don't care if it's even a fruit in this case like I don't really care at all",
    "start": "1834260",
    "end": "1839840"
  },
  {
    "text": "so that's a quite powerful powerful pattern as well now there are a lot of patterns so I",
    "start": "1839840",
    "end": "1846620"
  },
  {
    "text": "said that C sharp 8 and 9 and 10 and 11 introduces some enhancements to pattern matching that's an understatement",
    "start": "1846620",
    "end": "1853880"
  },
  {
    "text": "because of course it's powerful enough to be able to say what type is this but I'd also like to be able to to check on",
    "start": "1853880",
    "end": "1859520"
  },
  {
    "text": "a couple of more things so we can we can do a type pattern so this is all the patterns available in c-sharp we're",
    "start": "1859520",
    "end": "1865100"
  },
  {
    "text": "going to jump over to some code and explore this as well we can all see something called a",
    "start": "1865100",
    "end": "1870320"
  },
  {
    "text": "positional pattern if we take an object then we can deconstruct that and pull it apart into different variables we can",
    "start": "1870320",
    "end": "1876260"
  },
  {
    "text": "also use that together with something that looks like a tuple we can match on property values we can",
    "start": "1876260",
    "end": "1882380"
  },
  {
    "text": "match on exact Tuple values or tuples or however you like to pronounce that",
    "start": "1882380",
    "end": "1887779"
  },
  {
    "text": "we can use relational patterns so for example let's say I want to find a person that's over 30 years old I can",
    "start": "1887779",
    "end": "1894320"
  },
  {
    "text": "use a pattern to express that I can group these together to for example say people between 18 and 40 or 18 and 100.",
    "start": "1894320",
    "end": "1902779"
  },
  {
    "text": "I can use or to exclude elements I can use parenthesize patterns negated not",
    "start": "1902779",
    "end": "1907880"
  },
  {
    "text": "recursive patterns and in C sharp 11 we also got something called a list pattern",
    "start": "1907880",
    "end": "1913580"
  },
  {
    "text": "so now you know all about patterns no kidding we're going to jump into visual studio and actually look at how these are applied",
    "start": "1913580",
    "end": "1920440"
  },
  {
    "text": "all right so before we look at the pattern matching part I want to show you this object that I've created here so",
    "start": "1920779",
    "end": "1926659"
  },
  {
    "text": "this here is is showing us a test result which is obviously failed here if we",
    "start": "1926659",
    "end": "1932779"
  },
  {
    "text": "drill into this type it's using this new thing called a record a record is a reference type it gives us",
    "start": "1932779",
    "end": "1940820"
  },
  {
    "text": "quite a lot of things behind the scenes it gives us value-based equality it gives us immutability and it also is",
    "start": "1940820",
    "end": "1948380"
  },
  {
    "text": "defined by a primary Constructor everything you use in the primary Constructor will be available as a",
    "start": "1948380",
    "end": "1955159"
  },
  {
    "text": "public property so I have another example of this I'm going to swap over to another IDE",
    "start": "1955159",
    "end": "1962840"
  },
  {
    "text": "someone told me you have to start using writer because it's the best IDE available ever try to do this in my",
    "start": "1962840",
    "end": "1968659"
  },
  {
    "text": "workshop and crashed all the time it wasn't a very good idea I blame the HDMI cable",
    "start": "1968659",
    "end": "1975559"
  },
  {
    "text": "all right so I have this public record called person doesn't have to be public but it is now it has to to uh properties",
    "start": "1975559",
    "end": "1984020"
  },
  {
    "text": "available defining the primary Constructor when I compile this this will generate",
    "start": "1984020",
    "end": "1989779"
  },
  {
    "text": "I'm going to show you this here this is looking at the lower level C sharp and this is why I love Rider because I can",
    "start": "1989779",
    "end": "1994820"
  },
  {
    "text": "look at the IL or the lower level C sharp but this decompiles into so when you compile This Record it's",
    "start": "1994820",
    "end": "2000760"
  },
  {
    "text": "going to create a public class called person it's going to implement I equatable it's going to give you a",
    "start": "2000760",
    "end": "2007240"
  },
  {
    "text": "Constructor that lets you set the backing fields it's going to give you the properties that are in it only you can only set",
    "start": "2007240",
    "end": "2013480"
  },
  {
    "text": "them once but they're public so you can get that value out of the object it's also going to implement two string",
    "start": "2013480",
    "end": "2019360"
  },
  {
    "text": "to be able to give a nice representation of the object it's going to also give you the operator overloads for",
    "start": "2019360",
    "end": "2026320"
  },
  {
    "text": "inequality inequality which is very handy and if we scroll down to what our equatable is actually",
    "start": "2026320",
    "end": "2032440"
  },
  {
    "text": "giving us we have this equals method that takes a person this here lets you",
    "start": "2032440",
    "end": "2039399"
  },
  {
    "text": "compare the backing fields of for example the name you compare that with the other",
    "start": "2039399",
    "end": "2044860"
  },
  {
    "text": "person's backing field of the name which means that if you compare two reference types if the records it's gonna compare",
    "start": "2044860",
    "end": "2050980"
  },
  {
    "text": "the properties so for example",
    "start": "2050980",
    "end": "2056618"
  },
  {
    "text": "if we go back to this code here with the with the test result if I do this this twice like this here test result 2 this",
    "start": "2056619",
    "end": "2064720"
  },
  {
    "text": "would be same this would yield true because they have",
    "start": "2064720",
    "end": "2070839"
  },
  {
    "text": "the same values now I'm using daytime offset.min value here to make sure that they are in fact",
    "start": "2070839",
    "end": "2077200"
  },
  {
    "text": "identical a little gotcha with this is that if I do UTC now or just now",
    "start": "2077200",
    "end": "2083618"
  },
  {
    "text": "they would have different ticks so they would be inequal makes sense right little side notes so that's why records",
    "start": "2083619",
    "end": "2091419"
  },
  {
    "text": "are truly powerful and they also give you a deconstruct method out of the box so I could say that",
    "start": "2091419",
    "end": "2098140"
  },
  {
    "text": "I could deconstruct this this test into whatever the deconstruct method gives me",
    "start": "2098140",
    "end": "2103180"
  },
  {
    "text": "and if we look at what that means is that it generates a method that has this this annotation",
    "start": "2103180",
    "end": "2109720"
  },
  {
    "text": "or this notation it's called deconstruct that's required it has a couple of out parameters so it gives me a daytime",
    "start": "2109720",
    "end": "2116380"
  },
  {
    "text": "offset it gives me an integer and it gives me a Boolean so why is this important",
    "start": "2116380",
    "end": "2121780"
  },
  {
    "text": "because now I could say if we go back to that file",
    "start": "2121780",
    "end": "2128140"
  },
  {
    "text": "here we go I could say I want to get the the date some integer and a Bool",
    "start": "2128140",
    "end": "2136720"
  },
  {
    "text": "and now I could deref or deconstruct this object into these three different values",
    "start": "2136720",
    "end": "2142599"
  },
  {
    "text": "so why would you want to do this this is important when it comes to pattern matching because now I could use",
    "start": "2142599",
    "end": "2148720"
  },
  {
    "text": "these these positions to say that I want to find the integer that is greater than a certain value",
    "start": "2148720",
    "end": "2155920"
  },
  {
    "text": "so let me show you how to do that we can do if test result",
    "start": "2155920",
    "end": "2161500"
  },
  {
    "text": "not that test result is capable of being deconstructed into",
    "start": "2161500",
    "end": "2167440"
  },
  {
    "text": "something where that integer is more than 10 and I don't care about the Boolean",
    "start": "2167440",
    "end": "2174400"
  },
  {
    "text": "this code makes a lot of sense right everyone will know what this is doing",
    "start": "2174400",
    "end": "2181920"
  },
  {
    "text": "so there are a couple of things that are not good with this there's there's no",
    "start": "2182260",
    "end": "2188320"
  },
  {
    "text": "intellisense for what a deconstruct deconstruct into so if I if I know I",
    "start": "2188320",
    "end": "2194440"
  },
  {
    "text": "have to know exactly what this what this is called so let's go into test result it's called dates since",
    "start": "2194440",
    "end": "2201420"
  },
  {
    "text": "I have to know exactly the casing and exactly the name of it but I can use it as a name parameter but this is a little",
    "start": "2201460",
    "end": "2207220"
  },
  {
    "text": "bit problematic because it means that the code becomes a little bit unreadable",
    "start": "2207220",
    "end": "2212260"
  },
  {
    "text": "a better approach would have been to use this with some of the other patterns so you'll see you see here now that you",
    "start": "2212260",
    "end": "2218260"
  },
  {
    "text": "can use this with the if statement but we can also say that I want to get a result based on whatever this test",
    "start": "2218260",
    "end": "2224619"
  },
  {
    "text": "result is I'm going to create one of these switch expressions and I'm going to say that okay I want to",
    "start": "2224619",
    "end": "2231099"
  },
  {
    "text": "find failed tests perfect I can do that but I can also say it has to be a failed",
    "start": "2231099",
    "end": "2236200"
  },
  {
    "text": "test where the number of attempts are less than or less than 10 and greater",
    "start": "2236200",
    "end": "2242740"
  },
  {
    "text": "than let's see here",
    "start": "2242740",
    "end": "2249700"
  },
  {
    "text": "I could do this I actually have to go the other way around more than 10",
    "start": "2249700",
    "end": "2256720"
  },
  {
    "text": "and more than 20 sure this makes a lot of sense it does",
    "start": "2256720",
    "end": "2264460"
  },
  {
    "text": "or less than 20. so I could do this to create a range right it's going to be quite smart to",
    "start": "2264460",
    "end": "2270099"
  },
  {
    "text": "determining exactly what I'm looking for so this here is a recursive pattern it first checks that it's failed",
    "start": "2270099",
    "end": "2276640"
  },
  {
    "text": "and that it can have a property that is that has this value",
    "start": "2276640",
    "end": "2282880"
  },
  {
    "text": "I could also say that I don't care which type it is as long as",
    "start": "2282880",
    "end": "2288220"
  },
  {
    "text": "this is of an instance or an instance yeah as long as this is of an instance I",
    "start": "2288220",
    "end": "2293380"
  },
  {
    "text": "can check that it has this property so this will perform a null check and also perform a check on the properties",
    "start": "2293380",
    "end": "2300640"
  },
  {
    "text": "you can write patterns that are very confusing and you can write them like this here where they quite make a",
    "start": "2300640",
    "end": "2307300"
  },
  {
    "text": "lot of sense and of course we could also um we could also use this with tuples",
    "start": "2307300",
    "end": "2313480"
  },
  {
    "text": "and other types as well but where it's powerful let's say that I just want to use this like it's it's",
    "start": "2313480",
    "end": "2319180"
  },
  {
    "text": "totally okay to use it to say if it's failed Let's uh",
    "start": "2319180",
    "end": "2324280"
  },
  {
    "text": "return to failed page if uses an asp.net if",
    "start": "2324280",
    "end": "2330640"
  },
  {
    "text": "it's uh passed we're going to do something else it's we're not going to throw divide by zero exception",
    "start": "2330640",
    "end": "2338079"
  },
  {
    "text": "so that would be odd okay and now we can also say for everything",
    "start": "2338079",
    "end": "2343240"
  },
  {
    "text": "else we can just return 4 4.",
    "start": "2343240",
    "end": "2348460"
  },
  {
    "text": "right but what's interesting with the Discord let's say that this here was from a method call like I have the",
    "start": "2348460",
    "end": "2354760"
  },
  {
    "text": "object here so of course I could access the properties of test result in this",
    "start": "2354760",
    "end": "2360400"
  },
  {
    "text": "case here but sometimes you might not have the variable and as I said earlier",
    "start": "2360400",
    "end": "2365800"
  },
  {
    "text": "test result here we don't know if this is an object or not so let's say here I'm going to get the test date I can do",
    "start": "2365800",
    "end": "2373119"
  },
  {
    "text": "that because that's available on this type let's do two string and but if I do this and set it to an",
    "start": "2373119",
    "end": "2380680"
  },
  {
    "text": "object test date doesn't exist on the object makes sense right",
    "start": "2380680",
    "end": "2386800"
  },
  {
    "text": "so instead to get around that I can say that well if it's a test or a result",
    "start": "2386800",
    "end": "2392680"
  },
  {
    "text": "I can use this as a local variable inside that switch instead or inside that that expression",
    "start": "2392680",
    "end": "2399820"
  },
  {
    "text": "it's quite powerful so you can write patterns that are truly powerful and you can also write patterns",
    "start": "2399820",
    "end": "2406720"
  },
  {
    "text": "that make no sense at all so like with any other feature in c-sharp and net and other programming languages just be very",
    "start": "2406720",
    "end": "2413560"
  },
  {
    "text": "careful with how you use it and how you add it it makes a lot of sense to use it to find a certain property value",
    "start": "2413560",
    "end": "2419619"
  },
  {
    "text": "or for example in this case we're just looking at the base types",
    "start": "2419619",
    "end": "2424900"
  },
  {
    "text": "now I do want to say this as well because this is a question I get quite often surely enough it's nice that I can",
    "start": "2424900",
    "end": "2431260"
  },
  {
    "text": "say if this is a fail test and I'm looking for a particular property value",
    "start": "2431260",
    "end": "2437020"
  },
  {
    "text": "let's say number of attempts has to be the number 10 but if I don't have this as a constant how do I do how do I use",
    "start": "2437020",
    "end": "2445180"
  },
  {
    "text": "this you would have to introduce another approach and say you want to capture this when",
    "start": "2445180",
    "end": "2453339"
  },
  {
    "text": "you have one over here when rest stops number of attempts is more than 10 for",
    "start": "2453339",
    "end": "2459880"
  },
  {
    "text": "example you can do that as well so if you introduce the when keyword you've introduced a a when expression where you",
    "start": "2459880",
    "end": "2467560"
  },
  {
    "text": "can actually call methods so while this will be very performant and and compile time checks and so forth this here",
    "start": "2467560",
    "end": "2475900"
  },
  {
    "text": "will allow you to call method calls which is one of the things I hear people ask quite a lot",
    "start": "2475900",
    "end": "2481420"
  },
  {
    "text": "now in C sharp in C sharp 11 or 12 let's see here we also got another",
    "start": "2481420",
    "end": "2489220"
  },
  {
    "text": "way of of working with patterns so I have this list of people here and I can",
    "start": "2489220",
    "end": "2494560"
  },
  {
    "text": "say that if this this data is",
    "start": "2494560",
    "end": "2500380"
  },
  {
    "text": "is empty I want to do that this more more frequently you might want to",
    "start": "2500380",
    "end": "2506859"
  },
  {
    "text": "say if it's not empty so I can negate anything to say that it's not a certain thing",
    "start": "2506859",
    "end": "2513040"
  },
  {
    "text": "obviously you can negate anything like this right put not in front of this and",
    "start": "2513040",
    "end": "2518680"
  },
  {
    "text": "who knows whatever that means now so again you can write patterns that are",
    "start": "2518680",
    "end": "2523960"
  },
  {
    "text": "very confusing but also in this case here it's quite obvious I'm looking for data that is not empty",
    "start": "2523960",
    "end": "2530079"
  },
  {
    "text": "I could also say that I want to get a result out of this here to say that based on my data",
    "start": "2530079",
    "end": "2536859"
  },
  {
    "text": "or my list here I'm going to create a a list pattern where I can say well if it's empty I",
    "start": "2536859",
    "end": "2543640"
  },
  {
    "text": "want to uh do something but if there are elements",
    "start": "2543640",
    "end": "2550480"
  },
  {
    "text": "I that damn divide by zero exception",
    "start": "2550480",
    "end": "2555838"
  },
  {
    "text": "I'm gonna blame the keyboard here we go I could then say that this here is now going to say that as long as it has or",
    "start": "2556660",
    "end": "2563800"
  },
  {
    "text": "not empties or this match is empty but I could capture that range to say that for example I'm going to",
    "start": "2563800",
    "end": "2570640"
  },
  {
    "text": "show you an example here I could say that the first element in this array or list of people",
    "start": "2570640",
    "end": "2577180"
  },
  {
    "text": "has to have a name where the name is Philip",
    "start": "2577180",
    "end": "2584700"
  },
  {
    "text": "so the list patterns allows you to do again recursive patterns I can say that this list has to be of some sort",
    "start": "2585640",
    "end": "2592300"
  },
  {
    "text": "obviously a list of people isn't where you would use this you could use this to determine payload coming in from some",
    "start": "2592300",
    "end": "2598480"
  },
  {
    "text": "external system where you're looking for certain bytes in the start or the end or whatnot because I could say that I don't",
    "start": "2598480",
    "end": "2604540"
  },
  {
    "text": "care about what's in the middle I want to make sure that the last element is set to an instance and that the the name",
    "start": "2604540",
    "end": "2612460"
  },
  {
    "text": "is in this case Elise so again you can write quite complex",
    "start": "2612460",
    "end": "2618400"
  },
  {
    "text": "complex things here I could also say while there's something in the middle it",
    "start": "2618400",
    "end": "2624940"
  },
  {
    "text": "has to start with A Philip it has to end with Elise but I can also capture all the elements in the middle",
    "start": "2624940",
    "end": "2632200"
  },
  {
    "text": "right so you can use this to slice off portions of the array makes it quite powerful",
    "start": "2632200",
    "end": "2639099"
  },
  {
    "text": "so pattern matching is a great addition to the language but it also comes with some responsibilities right we want to",
    "start": "2639099",
    "end": "2645160"
  },
  {
    "text": "make sure that our code is readable maintainable and honestly fun to work with",
    "start": "2645160",
    "end": "2650859"
  },
  {
    "text": "right so let's jump back into talking a little bit more about what's been added in C sharp 10. so with the records being",
    "start": "2650859",
    "end": "2657460"
  },
  {
    "text": "added to C sharp 9 they also increase record structs in C sharp 10.",
    "start": "2657460",
    "end": "2662680"
  },
  {
    "text": "if you want to do that it's just about where they are stored I gotcha with the record structs is that they are not",
    "start": "2662680",
    "end": "2668680"
  },
  {
    "text": "immutable record classes are immutable by default but the record stocks are not you have",
    "start": "2668680",
    "end": "2674380"
  },
  {
    "text": "to also append the read-only keyword in front of it to make it a read-only record struct",
    "start": "2674380",
    "end": "2679480"
  },
  {
    "text": "because why be consistent they also made some other improvements they introduced a global using directive",
    "start": "2679480",
    "end": "2685300"
  },
  {
    "text": "and file scope namespaces so you might have seen this when I swapped over to Ryder I had this",
    "start": "2685300",
    "end": "2692619"
  },
  {
    "text": "namespace at the top here but I don't have to wrap my entire class in this namespace I can just declare the",
    "start": "2692619",
    "end": "2698020"
  },
  {
    "text": "namespace for the entire file at the top again this is to make it easier to um",
    "start": "2698020",
    "end": "2705880"
  },
  {
    "text": "review code I guess so when you submit a pull request reduce white space reduce noise",
    "start": "2705880",
    "end": "2711400"
  },
  {
    "text": "they also made some changes to pattern matching again to the property patterns and did a whole lot of other",
    "start": "2711400",
    "end": "2717160"
  },
  {
    "text": "improvements to c-sharp 10. so it's interesting to see that they're still keeping adding important features",
    "start": "2717160",
    "end": "2723579"
  },
  {
    "text": "but some of these are less important than what we've gotten in c-sharp 7 8",
    "start": "2723579",
    "end": "2728619"
  },
  {
    "text": "and 9 and the reason is that some of the improvements in c-sharp 10 is to make it better to write these minimal apis",
    "start": "2728619",
    "end": "2736540"
  },
  {
    "text": "one of the features that they're allowing you to do is constant interpolated strings so in this sample",
    "start": "2736540",
    "end": "2742180"
  },
  {
    "text": "here I'm creating an application name called visma and I'm just using string interpolation with a constant which is",
    "start": "2742180",
    "end": "2748900"
  },
  {
    "text": "something you couldn't do prior to C sharp 10. a little bit more of an important",
    "start": "2748900",
    "end": "2754540"
  },
  {
    "text": "language feature is when we're working with lambdas so in this case here in this is C Sharp eight",
    "start": "2754540",
    "end": "2762460"
  },
  {
    "text": "where I'm saying that I have a function it will return an integer it takes a",
    "start": "2762460",
    "end": "2768220"
  },
  {
    "text": "string as an input and then it does something but wouldn't it be nice if the compiler could just infer this for us so",
    "start": "2768220",
    "end": "2774220"
  },
  {
    "text": "it's going to infer the type so with C sharp actually this um is a C sharp 9 even so in C sharp 10",
    "start": "2774220",
    "end": "2781300"
  },
  {
    "text": "you'd have to then you can then say bar Parts in this case here and it will infer whatever this function is actually",
    "start": "2781300",
    "end": "2786520"
  },
  {
    "text": "doing which is nice so you know no longer have to explicitly say what kind of action or",
    "start": "2786520",
    "end": "2792400"
  },
  {
    "text": "function you're doing because the compiler will try to be very smart about understanding exactly what's going on",
    "start": "2792400",
    "end": "2799599"
  },
  {
    "text": "here's an example of one of these minimal apis and also an example of one of the c-sharp 10 features so you're able to",
    "start": "2799599",
    "end": "2806800"
  },
  {
    "text": "now have attributes in your lambdas so that in this case here I have a very simple application that is mapping the",
    "start": "2806800",
    "end": "2813220"
  },
  {
    "text": "root of the application to return some data and I can say that it should get that data from the content header but in",
    "start": "2813220",
    "end": "2820720"
  },
  {
    "text": "previous versions of C sharp you were not able to do this and another Improvement that they're making in",
    "start": "2820720",
    "end": "2825819"
  },
  {
    "text": "c-sharp 11 is that they are allowing you to have default values in lambdas so I",
    "start": "2825819",
    "end": "2831160"
  },
  {
    "text": "could say that if you don't pass an ID here the default is zero for example which is also one of those features that",
    "start": "2831160",
    "end": "2837640"
  },
  {
    "text": "I don't understand white took so long time to add this to the language",
    "start": "2837640",
    "end": "2842920"
  },
  {
    "text": "now with c-sharp 11 which is the current version now we this was released in November and we're not going to have",
    "start": "2842920",
    "end": "2849339"
  },
  {
    "text": "much time to talk about c-sharp 12 and there's a reason for that they tend to always talk about all the amazing",
    "start": "2849339",
    "end": "2856240"
  },
  {
    "text": "features they are going to add to the language and then two days before they release it they just scratch all of it",
    "start": "2856240",
    "end": "2862300"
  },
  {
    "text": "that makes my life very hard so I'm going to talk a little bit about c-sharp 11 instead we looked at these uh",
    "start": "2862300",
    "end": "2869680"
  },
  {
    "text": "these patterns these were added to c-sharp 11 where you can match on the",
    "start": "2869680",
    "end": "2875079"
  },
  {
    "text": "contents of a list you can slice off portions of a list you might not know this but the syntax",
    "start": "2875079",
    "end": "2881740"
  },
  {
    "text": "that I used here this here is the range syntax which is also something that you use to slice off",
    "start": "2881740",
    "end": "2888819"
  },
  {
    "text": "data in an array so if I have a an array of bytes for example I can say that I",
    "start": "2888819",
    "end": "2894160"
  },
  {
    "text": "want to slice off portions of that I have an example of that in just a",
    "start": "2894160",
    "end": "2899260"
  },
  {
    "text": "moment so we also got more patterns improvements in in c-sharp 12 as well",
    "start": "2899260",
    "end": "2906579"
  },
  {
    "text": "where we are going to I can assure you with that they're also introducing name of parameter and finally they're caching",
    "start": "2906579",
    "end": "2912700"
  },
  {
    "text": "the uh the delegates for static method groups now this might sound silly but this is a huge performance hit in older",
    "start": "2912700",
    "end": "2919839"
  },
  {
    "text": "versions so it's quite important if you use this it's going to be quite",
    "start": "2919839",
    "end": "2924880"
  },
  {
    "text": "performant I showed you the required properties and what's interesting with the required",
    "start": "2924880",
    "end": "2929920"
  },
  {
    "text": "properties is that you can now write a little bit more fluent code there's nothing stopping you from enabling this",
    "start": "2929920",
    "end": "2936400"
  },
  {
    "text": "this language feature of nullable reference types because you can now go ahead and enable that and set all your",
    "start": "2936400",
    "end": "2942339"
  },
  {
    "text": "properties to required and just fix some of the places rather than having to introduce a Constructor all over the",
    "start": "2942339",
    "end": "2948520"
  },
  {
    "text": "place more keywords is better right so this",
    "start": "2948520",
    "end": "2953619"
  },
  {
    "text": "here is a required string called name there's another language feature called",
    "start": "2953619",
    "end": "2958780"
  },
  {
    "text": "raw string literals which I have an example of soon there's something called Static members and",
    "start": "2958780",
    "end": "2964420"
  },
  {
    "text": "interfaces there's also utf-8 string literals so example a lot of the data that we're",
    "start": "2964420",
    "end": "2971500"
  },
  {
    "text": "getting from the web is all utf-8 but by default or c-sharp is utf-16",
    "start": "2971500",
    "end": "2977920"
  },
  {
    "text": "so all the data that you work with that's coming in from the web you have to convert that into utf-16 and then you",
    "start": "2977920",
    "end": "2983560"
  },
  {
    "text": "can do processing with utf-8 there's a lot of memory that you have to shuffle around and it's just a little bit not",
    "start": "2983560",
    "end": "2990339"
  },
  {
    "text": "very performant so instead they allow you to add the u8 at the end of a string and this will give you a span of a byte",
    "start": "2990339",
    "end": "2996280"
  },
  {
    "text": "array or a read-only span of a byte array actually and this will let you do processing on",
    "start": "2996280",
    "end": "3001500"
  },
  {
    "text": "this string or this byte array there's a generic math",
    "start": "3001500",
    "end": "3006540"
  },
  {
    "text": "there's generic attributes so this is also one of those features if you've been working with older versions of asp.net you might have introduced your",
    "start": "3006540",
    "end": "3014160"
  },
  {
    "text": "own attribute class and you've never been able to do it do a generic attribute up until c-sharp 11.",
    "start": "3014160",
    "end": "3020880"
  },
  {
    "text": "now finally there's a thing called parameter null checking",
    "start": "3020880",
    "end": "3026339"
  },
  {
    "text": "which they withdrew but some of you if you haven't been keeping keeping up with the language which why would you be here",
    "start": "3026339",
    "end": "3033000"
  },
  {
    "text": "if you have so if we go into uh let's go to this this class here now instead of me having to",
    "start": "3033000",
    "end": "3040319"
  },
  {
    "text": "perform this check here at the bottom what they suggested was that",
    "start": "3040319",
    "end": "3045660"
  },
  {
    "text": "why not use double bangs and it will automatically perform a null check and throw an exception in your",
    "start": "3045660",
    "end": "3051480"
  },
  {
    "text": "face if this was null imagine how many people like this idea",
    "start": "3051480",
    "end": "3056760"
  },
  {
    "text": "they refactored a whole lot of projects internally or actually on GitHub so it's not internal but a lot of internal",
    "start": "3056760",
    "end": "3062220"
  },
  {
    "text": "projects that will have people on Microsoft working on them they refactor a whole lot of things to use this while it did reduce a bit of code it also adds",
    "start": "3062220",
    "end": "3069300"
  },
  {
    "text": "Some Noise having exclamation marks all over the place it's not very readable it's not very nice so due to a lot of",
    "start": "3069300",
    "end": "3077220"
  },
  {
    "text": "community backlash they had to remove this language feature which is nice which is one of the",
    "start": "3077220",
    "end": "3083099"
  },
  {
    "text": "reasons this being open source is a great idea because we can participate in the discussions and we can give ideas or",
    "start": "3083099",
    "end": "3090000"
  },
  {
    "text": "we can just tell them things we don't like and they might listen and they actually did in this this time",
    "start": "3090000",
    "end": "3096300"
  },
  {
    "text": "so the list patterns are quite complex as well as I showed you earlier we can grab the the middle elements and you can",
    "start": "3096300",
    "end": "3102059"
  },
  {
    "text": "use that then inside the uh the the right hand side of that expression we",
    "start": "3102059",
    "end": "3107160"
  },
  {
    "text": "can make sure that a second element is of a certain value we can say that I don't care about the start of the",
    "start": "3107160",
    "end": "3113220"
  },
  {
    "text": "elements I just want to get all of it so we can do quite a lot of things here with that list pattern there's another",
    "start": "3113220",
    "end": "3120240"
  },
  {
    "text": "the other feature that is important is string or raw string literals where I could say that I'm using three",
    "start": "3120240",
    "end": "3127440"
  },
  {
    "text": "double quotes to say that I'm going to write some code here now with XML I'm not getting any",
    "start": "3127440",
    "end": "3133859"
  },
  {
    "text": "any syntax highlighting but I can use the string interpolation here as well",
    "start": "3133859",
    "end": "3139980"
  },
  {
    "text": "if I jump over to uh to Rider I think I have an example of that here",
    "start": "3139980",
    "end": "3146280"
  },
  {
    "text": "where I use this with Json so I have I'm going to deserialize some Json I'm using the raw spring literals",
    "start": "3146280",
    "end": "3153000"
  },
  {
    "text": "to say that here's my Json object that I've defined inline and I'm getting some syntax highlighting",
    "start": "3153000",
    "end": "3159059"
  },
  {
    "text": "it's also going to remove the white space at this Frontier so that's a quite nice feature",
    "start": "3159059",
    "end": "3165660"
  },
  {
    "text": "now I've mentioned the raw string literals or utf-8 string literals in this case",
    "start": "3165660",
    "end": "3171000"
  },
  {
    "text": "here I take my name I convert that into a read-only span of bytes and then I can",
    "start": "3171000",
    "end": "3177900"
  },
  {
    "text": "say that based on this payload I want to be able to then grab the index of the first space where the index is also a a",
    "start": "3177900",
    "end": "3185700"
  },
  {
    "text": "utf-8 space and then I can use the uh the range syntax together with with slicing",
    "start": "3185700",
    "end": "3192960"
  },
  {
    "text": "to say that I want to get my first name and the last name why is this important because this here",
    "start": "3192960",
    "end": "3198540"
  },
  {
    "text": "is the allocation free it's a little bit of a lie because it does allocate one variable to On On The",
    "start": "3198540",
    "end": "3204720"
  },
  {
    "text": "Stack here to hold the reference to that array of or that that span of bytes but",
    "start": "3204720",
    "end": "3211440"
  },
  {
    "text": "it doesn't have to do any copy of my content which is very performant and",
    "start": "3211440",
    "end": "3217200"
  },
  {
    "text": "it's very much better than having to copy a race over all the time and do some more processing the alternative and",
    "start": "3217200",
    "end": "3223619"
  },
  {
    "text": "the way that I use this before is to use Link which is not the very most performant thing to use for something",
    "start": "3223619",
    "end": "3229559"
  },
  {
    "text": "like this they're also in producing a concept called Static members and interfaces or",
    "start": "3229559",
    "end": "3236460"
  },
  {
    "text": "study abstract members in interfaces we've always been able to do static in interfaces but it just never gave us any",
    "start": "3236460",
    "end": "3243540"
  },
  {
    "text": "any warning so here I have a static T inside",
    "start": "3243540",
    "end": "3248579"
  },
  {
    "text": "my inside my interface there's no warnings that I haven't implemented this on my class",
    "start": "3248579",
    "end": "3254880"
  },
  {
    "text": "so again why not just add another keyword to this to actually enforce us to implement what the interface dictates",
    "start": "3254880",
    "end": "3262980"
  },
  {
    "text": "so here I add the abstract keyword and now it's going to tell me that you have to implement this",
    "start": "3262980",
    "end": "3269040"
  },
  {
    "text": "I would have assumed that you had to previously as well but for some reason they they didn't enforce that",
    "start": "3269040",
    "end": "3275760"
  },
  {
    "text": "so that's all there is to C sharp 11. now the question is what's next we have",
    "start": "3275760",
    "end": "3280920"
  },
  {
    "text": "another few minutes to talk about the upcoming features and I have a link here that's showing",
    "start": "3280920",
    "end": "3287280"
  },
  {
    "text": "all the progress of all the different language features of.net and c-sharp marshalling C sharp they have a GitHub",
    "start": "3287280",
    "end": "3293760"
  },
  {
    "text": "page where they're doing all of this in the open they take comments from users and they want to get the community",
    "start": "3293760",
    "end": "3299339"
  },
  {
    "text": "participation so that they know that they work on the right thing one of the things they want to add is a",
    "start": "3299339",
    "end": "3304980"
  },
  {
    "text": "concept called a primary Constructor this looks very much like a record it's",
    "start": "3304980",
    "end": "3311520"
  },
  {
    "text": "a little bit different though so with records you use a concept also called primary Constructors which is very",
    "start": "3311520",
    "end": "3317339"
  },
  {
    "text": "confusing because they're very different they are fundamentally different notice how I have a a lowercase name here that",
    "start": "3317339",
    "end": "3325859"
  },
  {
    "text": "is to indicate that this is in fact not a public property now it doesn't matter that I have lowercase or not it's just",
    "start": "3325859",
    "end": "3331980"
  },
  {
    "text": "this is a field in my class it's not going to create a property behind the",
    "start": "3331980",
    "end": "3337079"
  },
  {
    "text": "scenes when this is compiled and that's where it's different from records records the primary Constructor",
    "start": "3337079",
    "end": "3342780"
  },
  {
    "text": "introduces a public property but this does not slight difference so if you want this to",
    "start": "3342780",
    "end": "3349500"
  },
  {
    "text": "be publicly available you'd have to first introduce that as well you have to introduce it and you can use the primary",
    "start": "3349500",
    "end": "3355440"
  },
  {
    "text": "Constructor value to set it and you'll see that if we decompile the application",
    "start": "3355440",
    "end": "3360720"
  },
  {
    "text": "what it's doing is that we have we got this Constructor and it's simply setting it back in field",
    "start": "3360720",
    "end": "3366780"
  },
  {
    "text": "so it's a little bit different from from the record",
    "start": "3366780",
    "end": "3372180"
  },
  {
    "text": "but this is not released yet so who knows they might change it so take this with a grain of salt",
    "start": "3372180",
    "end": "3379400"
  },
  {
    "text": "and then what they also want to add is a default for or optional parameters in Lambda expressions or also known as",
    "start": "3379559",
    "end": "3386160"
  },
  {
    "text": "default Expressions it's funny when you read the documentations even the official Microsoft announcement of this",
    "start": "3386160",
    "end": "3391800"
  },
  {
    "text": "they talk about this using two different names but it's the same language feature so",
    "start": "3391800",
    "end": "3396839"
  },
  {
    "text": "again with the consistency but they'll get there once this is released in November we'll know the name and",
    "start": "3396839",
    "end": "3402119"
  },
  {
    "text": "hopefully it will make it into the language because for minimal apis where I set up very small asp.net apis in a",
    "start": "3402119",
    "end": "3408839"
  },
  {
    "text": "small console application which can then later grow into something bigger this is a nice addition",
    "start": "3408839",
    "end": "3415319"
  },
  {
    "text": "means I don't have to introduce more endpoints I can rather just add default parameters",
    "start": "3415319",
    "end": "3420420"
  },
  {
    "text": "and don't use null as a default we've already covered that so I could call this with a with or",
    "start": "3420420",
    "end": "3426300"
  },
  {
    "text": "without a value doesn't really matter and this would print my name to the console the final feature that they have",
    "start": "3426300",
    "end": "3432839"
  },
  {
    "text": "officially said that they are getting into c-sharp 12 is the way to Alias pretty much anything",
    "start": "3432839",
    "end": "3440940"
  },
  {
    "text": "this is an interesting language feature so I'll go into my class and I'll say I want to use the name point and whenever",
    "start": "3440940",
    "end": "3448559"
  },
  {
    "text": "I call something a point this should refer to the Tuple or Tuple now we",
    "start": "3448559",
    "end": "3453720"
  },
  {
    "text": "haven't talked about this but in C sharp 7 they introduce the concept of tuples or tuples whatever you want to call it",
    "start": "3453720",
    "end": "3459780"
  },
  {
    "text": "as a as a first class citizen in the language this introduces a container of",
    "start": "3459780",
    "end": "3465059"
  },
  {
    "text": "sorts of just fields on a little class very handy very useful feature so now if",
    "start": "3465059",
    "end": "3472200"
  },
  {
    "text": "I do this I'm going to say I want to use the name point on the right call that I'm going to get a tuple with two values",
    "start": "3472200",
    "end": "3478260"
  },
  {
    "text": "or two Fields so I can use this as an input parameter and if you put Global in front of this it's going to be globally",
    "start": "3478260",
    "end": "3484619"
  },
  {
    "text": "available throughout your entire project quite a useful feature",
    "start": "3484619",
    "end": "3490440"
  },
  {
    "text": "but then again there's so much added to c-sharp and there's probably a little bit of confusion as well as to where the",
    "start": "3490440",
    "end": "3496559"
  },
  {
    "text": "language is going but just because they're adding a language feature doesn't mean that we have to jump on it",
    "start": "3496559",
    "end": "3502619"
  },
  {
    "text": "and use it it's very nice to be able to come from F sharp or kotlin or Java and find that oh",
    "start": "3502619",
    "end": "3508920"
  },
  {
    "text": "I have pattern matching available in c-sharp I can somewhat take my code and translate that into c-sharp if I need to",
    "start": "3508920",
    "end": "3516839"
  },
  {
    "text": "actually I don't personally translate any code anymore I just paste it on a",
    "start": "3516839",
    "end": "3522000"
  },
  {
    "text": "very popular website and something just pops up and it just works",
    "start": "3522000",
    "end": "3527520"
  },
  {
    "text": "I'm guessing everyone's getting a bit tired of talking about chat TPT so I'm not gonna do that but the language features that have been",
    "start": "3527520",
    "end": "3535140"
  },
  {
    "text": "added in c-sharp so far they feel like they are familiar to a c-sharp developer they have a purpose we can obviously",
    "start": "3535140",
    "end": "3542040"
  },
  {
    "text": "misuse all of it but we should try to avoid doing that uh if you've liked this I have a lot of",
    "start": "3542040",
    "end": "3548520"
  },
  {
    "text": "courses on pluralsight covering language features of c-sharp asynchronous programming which I also have a session",
    "start": "3548520",
    "end": "3554160"
  },
  {
    "text": "on at three o'clock today but there's a whole lot of things to check out if you'd like to again I hope you've",
    "start": "3554160",
    "end": "3559920"
  },
  {
    "text": "enjoyed this thank you so much for coming please vote on your way out if you didn't like this send me an email",
    "start": "3559920",
    "end": "3565799"
  },
  {
    "text": "and forget to vote I'm kidding enjoy the rest of the conference thank you so much",
    "start": "3565799",
    "end": "3573200"
  },
  {
    "text": "thank you",
    "start": "3575040",
    "end": "3577640"
  }
]