[
  {
    "text": "okay it is Time come on in come on in we're pedling only slightly used uh",
    "start": "1040",
    "end": "6960"
  },
  {
    "text": "programming paradigms here uh they've got about 20 years on",
    "start": "6960",
    "end": "13040"
  },
  {
    "text": "them but uh or more but uh they're still good as",
    "start": "13040",
    "end": "18160"
  },
  {
    "text": "new come and have a nice seat preferably up front I can keep an eye on",
    "start": "18160",
    "end": "25480"
  },
  {
    "text": "you okay um I've got absolutely no slides today",
    "start": "25480",
    "end": "30759"
  },
  {
    "text": "as you can see the only thing open is Visual Studio I have functional Journey one and functional journey two and",
    "start": "30759",
    "end": "36280"
  },
  {
    "text": "that's where we'll spend the next hour I'm match Tuson I design C for a living",
    "start": "36280",
    "end": "43160"
  },
  {
    "text": "um and yesterday I told you all my secrets about what might happen so",
    "start": "43160",
    "end": "49199"
  },
  {
    "text": "there'll be absolutely nothing new today okay there might be things that are new to you or new ways of thinking about it",
    "start": "49199",
    "end": "55879"
  },
  {
    "text": "but other than that you know this is a trip down memory lane you can lean back",
    "start": "55879",
    "end": "61079"
  },
  {
    "text": "and just uh rest in the uh in the knowledge that this has already",
    "start": "61079",
    "end": "67439"
  },
  {
    "text": "happened uh there's nothing we can change here um",
    "start": "67439",
    "end": "73960"
  },
  {
    "text": "so C started out as a very sort of a very typical up your programming",
    "start": "73960",
    "end": "81640"
  },
  {
    "text": "language for its time um and um as you know has evolved a lot ever since and a",
    "start": "81640",
    "end": "89000"
  },
  {
    "text": "lot not all of that Evolution but a lot of it has been inspired by functional programming so there was objector",
    "start": "89000",
    "end": "95320"
  },
  {
    "text": "programming and functional programming back then and they were largely separate there are a few early uh Valiant",
    "start": "95320",
    "end": "101720"
  },
  {
    "text": "attempts to unify the two paradigms Scala is an early example of that um",
    "start": "101720",
    "end": "107880"
  },
  {
    "text": "trying to take these seemingly opposite uh Concepts and and bringing them",
    "start": "107880",
    "end": "113560"
  },
  {
    "text": "together um C started out way in one corner and we found that a lot of the",
    "start": "113560",
    "end": "118640"
  },
  {
    "text": "functional stuff has been a good supplement and helps kind of make the language um um sort of give you a full",
    "start": "118640",
    "end": "127119"
  },
  {
    "text": "range of options um and so we tried uh again and again to take functional",
    "start": "127119",
    "end": "132760"
  },
  {
    "text": "Concepts and integrate them as well as we can into C making them trying to make them not stick out and feel like foreign",
    "start": "132760",
    "end": "139519"
  },
  {
    "text": "element but merge them as as well as we can with um with what's already there",
    "start": "139519",
    "end": "144800"
  },
  {
    "text": "and the sort of core optic oriented um feel of of it so um",
    "start": "144800",
    "end": "150720"
  },
  {
    "text": "so what I'll do today is just take you on a journey starting with C 1 and then we'll just see how far we get within the",
    "start": "150720",
    "end": "157560"
  },
  {
    "text": "hour um and talk about each of the functional Concepts and how it relates to the optic oriented counterparts and",
    "start": "157560",
    "end": "163879"
  },
  {
    "text": "how we integrate them in the language along the way so it's also maybe a bit of a refresher course if you had a functional programming course in um in",
    "start": "163879",
    "end": "171680"
  },
  {
    "text": "in University or something um or if you're working in a functional programming language today it's a chance to be um snarky and say huh you call",
    "start": "171680",
    "end": "179640"
  },
  {
    "text": "that functional programming so whatever floats you boat uh many ways you can take this and feel free to ask questions",
    "start": "179640",
    "end": "186519"
  },
  {
    "text": "along the way and you know we'll get as far as we get",
    "start": "186519",
    "end": "191560"
  },
  {
    "text": "so this is more or less uh pure C Shar one that I have here on the screen I",
    "start": "191560",
    "end": "198000"
  },
  {
    "text": "don't like that my code kind of doesn't fit on the screen for demo so we're going to just start out by cheating and",
    "start": "198000",
    "end": "204080"
  },
  {
    "text": "using some newer language features uh that don't have much to do with functional programming so I don't feel",
    "start": "204080",
    "end": "210360"
  },
  {
    "text": "bad about it um but I I want to just to use I want to use top level um statements um you know CP in demo mode",
    "start": "210360",
    "end": "218640"
  },
  {
    "text": "essentially um no that's not where I go I go to the main method and I'm just going to use a refactoring for it um uh",
    "start": "218640",
    "end": "225760"
  },
  {
    "text": "convert to to level statements so there you go it's Tob level statements and there are some local functions as well",
    "start": "225760",
    "end": "232159"
  },
  {
    "text": "and they didn't exist until much later don't worry about it okay so functional",
    "start": "232159",
    "end": "238280"
  },
  {
    "text": "programming at sort of at the very very core if you were to say one thing that is the core engine of",
    "start": "238280",
    "end": "246640"
  },
  {
    "text": "functional programming it's first class functions it's the fact that functions can be values and they can be passed to",
    "start": "246640",
    "end": "254000"
  },
  {
    "text": "other functions that can invoke them and the function that takes another function is a higher order function and that's",
    "start": "254000",
    "end": "260120"
  },
  {
    "text": "how you do your abstraction that's a core abstraction mechanism that makes everything else tick it goes all the way",
    "start": "260120",
    "end": "266520"
  },
  {
    "text": "back to the Lambda calculus which is a is a math matical model that was invented before we even had like",
    "start": "266520",
    "end": "273000"
  },
  {
    "text": "physical computers to run things on and the core Lambda calculus in its simplest form really has only one thing in it and",
    "start": "273000",
    "end": "279880"
  },
  {
    "text": "that's functions that take fun other functions call other functions return other functions and that's all there is",
    "start": "279880",
    "end": "286479"
  },
  {
    "text": "that's really the core bread and butter inside of functional programming um and most object",
    "start": "286479",
    "end": "295120"
  },
  {
    "text": "programming languages at the time did not have a notion of first class functions like you could still you can",
    "start": "295120",
    "end": "300280"
  },
  {
    "text": "still so um I have here some code that takes a predicate right that's so I'm",
    "start": "300280",
    "end": "305639"
  },
  {
    "text": "taking in another function that I can you that I can call to get a result that I can then um that depends on what what",
    "start": "305639",
    "end": "312520"
  },
  {
    "text": "function was passed in like if you were in a language like Java for instance um you would like probably have an",
    "start": "312520",
    "end": "318319"
  },
  {
    "text": "interface some you know interface I predicate and it would have a single you",
    "start": "318319",
    "end": "325160"
  },
  {
    "text": "know it would have a um a bu do in I",
    "start": "325160",
    "end": "332039"
  },
  {
    "text": "method or something like that right that we so you can fake first class functions with objects by having a shared",
    "start": "332039",
    "end": "338199"
  },
  {
    "text": "interface saying here's this here's a thing that has a function that has a method inside of it and you can pass the thing around and then call the method",
    "start": "338199",
    "end": "344479"
  },
  {
    "text": "and that's like having a first class function you kind of have to emulate it and it's extra um work and so on and so",
    "start": "344479",
    "end": "350160"
  },
  {
    "text": "one of the few functional ises things in C from the from the outset is delegate",
    "start": "350160",
    "end": "356479"
  },
  {
    "text": "types delegate types are are a form of function types and they allow you to pass functions around first class it's a",
    "start": "356479",
    "end": "363720"
  },
  {
    "text": "pretty primitive thing it's not like it does not look like any respectable functional programming language but it's",
    "start": "363720",
    "end": "369280"
  },
  {
    "text": "there you delegate types of these like type declarations you make they're name types just like classes um and um so",
    "start": "369280",
    "end": "379560"
  },
  {
    "text": "there's no like Anonymous function types that you can just mention on the Fly you have to you have to create one um",
    "start": "379560",
    "end": "387160"
  },
  {
    "text": "there's all kinds of ugliness about delegat to them barely even going to talk about they're also a collection",
    "start": "387160",
    "end": "392400"
  },
  {
    "text": "type for some reason like there could be multiple functions inside of a delegate and it's just that's all some nastiness",
    "start": "392400",
    "end": "398840"
  },
  {
    "text": "that somebody just asked me before the talk if I had a time machine could go back and that would be one of the things I would change but anyway and now and",
    "start": "398840",
    "end": "406400"
  },
  {
    "text": "when you and so but I I can use it the the the delegate here for my filter",
    "start": "406400",
    "end": "412280"
  },
  {
    "text": "function and I can um let's see p here I I can call P here as you know as if as a",
    "start": "412280",
    "end": "418440"
  },
  {
    "text": "method call as a function call when I pass it I have to um pass it by name I have to have like a named method",
    "start": "418440",
    "end": "425479"
  },
  {
    "text": "somewhere and then I I I pass that method by name so I have to declare the function as well as something named",
    "start": "425479",
    "end": "432360"
  },
  {
    "text": "don't just have Anonymous function values at this point but it's a good start and um and we'll leave that like",
    "start": "432360",
    "end": "440639"
  },
  {
    "text": "first class function thing there for a bit as we go and talk about c 2 so the the really big thing that happened in C",
    "start": "440639",
    "end": "447160"
  },
  {
    "text": "2 was generics um shha one did not have generics you see me using array list",
    "start": "447160",
    "end": "453560"
  },
  {
    "text": "here and um that really gets us into talking about um",
    "start": "453560",
    "end": "460560"
  },
  {
    "text": "polymorphism there's sort of several kinds of polymorph morphism um",
    "start": "460560",
    "end": "467639"
  },
  {
    "text": "floating around polymorphism is Greek and it means something like many forms or something like that many shapes and",
    "start": "467639",
    "end": "474599"
  },
  {
    "text": "polymorphism is really about how how am",
    "start": "474599",
    "end": "479680"
  },
  {
    "text": "able to write code that applies to multiple different types okay and object",
    "start": "479680",
    "end": "486159"
  },
  {
    "text": "or programming and functional programming take very different approaches to this in their outset object programming is all about subtype",
    "start": "486159",
    "end": "493000"
  },
  {
    "text": "polymorphism where we say everything's an object and there's a whole like hierarchy of Isa all the way up and if",
    "start": "493000",
    "end": "499159"
  },
  {
    "text": "you pick yourself a type up there then everything else in the hierarchy underneath it can be substituted in so",
    "start": "499159",
    "end": "505639"
  },
  {
    "text": "in the case of AR Ray list that has an implied element type of object and we",
    "start": "505639",
    "end": "511120"
  },
  {
    "text": "can put everything into an array list like you can have in the same array list",
    "start": "511120",
    "end": "516880"
  },
  {
    "text": "you can have all kinds of objects you know just um all together in there so",
    "start": "516880",
    "end": "522240"
  },
  {
    "text": "that subtype polymorphism um it's about",
    "start": "522240",
    "end": "527519"
  },
  {
    "text": "everything um then there's um parametric polymorphism um which is um a very",
    "start": "527519",
    "end": "535320"
  },
  {
    "text": "functional concept and and um every strongly tight functional programming",
    "start": "535320",
    "end": "540680"
  },
  {
    "text": "language has that as a core concept where you can where type can be a",
    "start": "540680",
    "end": "545920"
  },
  {
    "text": "function too right and you can say something like I'm a list but I take a parameter uh and that's a type parameter",
    "start": "545920",
    "end": "553519"
  },
  {
    "text": "um H so I can be a list of in this case int um and then the the list type is no",
    "start": "553519",
    "end": "562800"
  },
  {
    "text": "longer a list of everything it's a list of anything but you have to say which of the anything it is a list of right so",
    "start": "562800",
    "end": "569800"
  },
  {
    "text": "it's a different kind of polymorphism that lets you be specific but you can still but it still enables you to write",
    "start": "569800",
    "end": "575680"
  },
  {
    "text": "code that applies to to everything um now",
    "start": "575680",
    "end": "581079"
  },
  {
    "text": "um that's really we and and we go and add this other kind of polymorphism to",
    "start": "581079",
    "end": "586880"
  },
  {
    "text": "to C and many other object red programming languages do this as well because it's really annoying to have a",
    "start": "586880",
    "end": "593200"
  },
  {
    "text": "list of everything when I I know I'm only going to put ins in there but the compiler doesn't know it's like hey",
    "start": "593200",
    "end": "598560"
  },
  {
    "text": "there might be like pigs and cars and whatnot in there too so just to be on the safe side when things come back out",
    "start": "598560",
    "end": "605279"
  },
  {
    "text": "we're going to make you you know cast them back to end that you perfectly well knew that was already in there",
    "start": "605279",
    "end": "611680"
  },
  {
    "text": "parametric polymorphism on the other hand lets you say what's in there and so as soon as I",
    "start": "611680",
    "end": "620120"
  },
  {
    "text": "get my code up and working here again um I no longer have to cast things when",
    "start": "620120",
    "end": "628399"
  },
  {
    "text": "they come back out because I already know that they're in I have a strongly typed um collection type instead of a",
    "start": "628399",
    "end": "635160"
  },
  {
    "text": "weekly type one great and of course generics really really change the face",
    "start": "635160",
    "end": "640959"
  },
  {
    "text": "of C programming forever it's a big deal but that is that's like the first major",
    "start": "640959",
    "end": "646720"
  },
  {
    "text": "import from functional programming languages unless you count delegates as the first um so really important here",
    "start": "646720",
    "end": "652920"
  },
  {
    "text": "and it's not just that I okay I can get rid of a cast you know whoop DDO um but",
    "start": "652920",
    "end": "658959"
  },
  {
    "text": "it also means because because list of in is now strongly typed um uh collection",
    "start": "658959",
    "end": "665360"
  },
  {
    "text": "type I can have strongly typed helper methods on that type right I can use so",
    "start": "665360",
    "end": "670680"
  },
  {
    "text": "in in in objectoriented fashion it can offer a bunch of methods but in uh in",
    "start": "670680",
    "end": "677519"
  },
  {
    "text": "sort of functional fashion they can be strongly typed along with the element type of the uh of the collection itself",
    "start": "677519",
    "end": "683600"
  },
  {
    "text": "so instead of actually creating my own array here using these two lines to allocate an array and fill things into",
    "start": "683600",
    "end": "688680"
  },
  {
    "text": "it so that things uh are strongly typed I can just return DST do2 array you know",
    "start": "688680",
    "end": "697079"
  },
  {
    "text": "and call that strongly typed helper function and have it create the array for me and now um I can just delete oh I",
    "start": "697079",
    "end": "704839"
  },
  {
    "text": "just delete these what these two lines of code here hang on F fingers there we",
    "start": "704839",
    "end": "712200"
  },
  {
    "text": "go right so great Improvement um and it also means that we can",
    "start": "712200",
    "end": "719839"
  },
  {
    "text": "um it means that array is no longer the only strongly typed collection type in",
    "start": "719839",
    "end": "725639"
  },
  {
    "text": "the language so an arrays so instead of using arrays as interchange types which is all kinds of bad right you know who",
    "start": "725639",
    "end": "732760"
  },
  {
    "text": "knows you know how do you even do that safely you know you're passing you're",
    "start": "732760",
    "end": "738560"
  },
  {
    "text": "passing someone an array well they can't trust that you aren't changing it on them while they're looking at it and you",
    "start": "738560",
    "end": "744839"
  },
  {
    "text": "can't trust that they aren't changing it while they're looking at it and so you you either have to do the defensive",
    "start": "744839",
    "end": "750000"
  },
  {
    "text": "copying or all kinds of stuff it's not a good exchange type for many things um but now we could use other exchange type",
    "start": "750000",
    "end": "756360"
  },
  {
    "text": "we could use list of T which is also mutable we could also just abstract away for just the things we need and use for",
    "start": "756360",
    "end": "763000"
  },
  {
    "text": "instance I knowable of of int here okay um and now we could return that as well",
    "start": "763000",
    "end": "769720"
  },
  {
    "text": "and then we um let's return that and now we get a complaint from up",
    "start": "769720",
    "end": "778000"
  },
  {
    "text": "here that this is no longer array well that's fine we can just do that as well because ibles are things that can be for",
    "start": "778000",
    "end": "783680"
  },
  {
    "text": "each and everything's hcor okay so um but of course not only can we consume",
    "start": "783680",
    "end": "790519"
  },
  {
    "text": "generics we can also write our own generic things yay so um let's start",
    "start": "790519",
    "end": "796240"
  },
  {
    "text": "with you know predicate here we can have our own generic types so predicat should",
    "start": "796240",
    "end": "802440"
  },
  {
    "text": "really be predicates of anything right so we um so I could um make it predicate",
    "start": "802440",
    "end": "809000"
  },
  {
    "text": "of T and say t t here instead and then use uh predicate of in",
    "start": "809000",
    "end": "817199"
  },
  {
    "text": "up here and now you know I'm reusing my my generic type across um potentially",
    "start": "817199",
    "end": "823399"
  },
  {
    "text": "across many different types I can also have generic methods so we could make the filter method itself generic and say",
    "start": "823399",
    "end": "829959"
  },
  {
    "text": "it's actually not just filtering for ins it's filtering for T's and now I have to go and write tea a bunch of places I",
    "start": "829959",
    "end": "836880"
  },
  {
    "text": "just had coffee so little tea be fine okay",
    "start": "836880",
    "end": "842800"
  },
  {
    "text": "um T I should there's probably you know um",
    "start": "842800",
    "end": "849000"
  },
  {
    "text": "hey co-pilot please replace all the right ins for",
    "start": "849000",
    "end": "854639"
  },
  {
    "text": "here okay there we go and all of a sudden we have that same functionality work for every for anything rather not for",
    "start": "854639",
    "end": "860720"
  },
  {
    "text": "everything and um so we can generif our own things you notice that I should",
    "start": "860720",
    "end": "865800"
  },
  {
    "text": "really be saying filter of int up here passing that type argument to the type parameter but another thing",
    "start": "865800",
    "end": "872240"
  },
  {
    "text": "like functional languages that are strongly typed often lean into a lot is",
    "start": "872240",
    "end": "878040"
  },
  {
    "text": "type inference it's like okay um there's a lot of types going on here types and",
    "start": "878040",
    "end": "884800"
  },
  {
    "text": "functional languages tend to get very large partly because they don't have subtyping and those things um so if you",
    "start": "884800",
    "end": "892399"
  },
  {
    "text": "look at the types they can be sort of a little overwhelming and um and so",
    "start": "892399",
    "end": "897440"
  },
  {
    "text": "generally these languages do a lot to keep the types to themselves and not",
    "start": "897440",
    "end": "902720"
  },
  {
    "text": "have you say them or look at them as much as possible um and so they do very",
    "start": "902720",
    "end": "908360"
  },
  {
    "text": "aggressive type inference now in an object Ral language for subtyping just we can't do as much type inference",
    "start": "908360",
    "end": "914839"
  },
  {
    "text": "because there's less we can know when we look at a at um person we can't know if",
    "start": "914839",
    "end": "921759"
  },
  {
    "text": "it's a student or teacher or whatnot so we can't be as precise in typ inference but we also may not want to it it it",
    "start": "921759",
    "end": "927800"
  },
  {
    "text": "sort of feels like the cautious and right thing to do at this point in C Evolution to be cautious about how much",
    "start": "927800",
    "end": "933759"
  },
  {
    "text": "type inference we do so that it's kind of local and that it's it um it doesn't",
    "start": "933759",
    "end": "939720"
  },
  {
    "text": "surprise you and it doesn't depend on things that are too far flung like if you in my talk yesterday I talked about",
    "start": "939720",
    "end": "945639"
  },
  {
    "text": "um spooky action at a distance like you change something up here and then the type down here becomes a different one",
    "start": "945639",
    "end": "951519"
  },
  {
    "text": "which means we pick a different overload over here which means that the thing that's returned down here is empty okay",
    "start": "951519",
    "end": "957839"
  },
  {
    "text": "let me debug that right so um so we try to be generally still very explicit with",
    "start": "957839",
    "end": "963000"
  },
  {
    "text": "types but we do like ourselves a little bit of type inference you don't have to say the types so often especially",
    "start": "963000",
    "end": "968639"
  },
  {
    "text": "because the types now tend to be bigger because they will have type arguments and some of those type arguments will",
    "start": "968639",
    "end": "974759"
  },
  {
    "text": "have type arguments and you know before you know it you have a lot of angle brackets so we so uh we do that like we",
    "start": "974759",
    "end": "981079"
  },
  {
    "text": "do type inference just for type Arguments for generic methods not for generic types and we also do like very",
    "start": "981079",
    "end": "988399"
  },
  {
    "text": "simple just VAR here that you can sort of not really type inference right it's just looking at hey does the thing on",
    "start": "988399",
    "end": "993680"
  },
  {
    "text": "the right hand side have a have a type well let's pick that one it's not like it's not rocket science here um so so",
    "start": "993680",
    "end": "1001519"
  },
  {
    "text": "VAR as well um and I'm cheating a little here because VAR actually only comes in in C 3 but I was talking about type",
    "start": "1001519",
    "end": "1007199"
  },
  {
    "text": "inference you get it now you know without um extra cost oh I couldn't do that because the way I'm creating the",
    "start": "1007199",
    "end": "1013519"
  },
  {
    "text": "array is array specific",
    "start": "1013519",
    "end": "1018399"
  },
  {
    "text": "okay no I can't do that I can't I can't cheat either okay let's just keep the array typ okay there we go um all right",
    "start": "1019279",
    "end": "1027199"
  },
  {
    "text": "with me so um there are a few other things",
    "start": "1027199",
    "end": "1032438"
  },
  {
    "text": "that we steal from functional programming at this time um uh Beyond",
    "start": "1032439",
    "end": "1037600"
  },
  {
    "text": "generics uh generics is really the big one but there there are a couple other things um there's this notion of",
    "start": "1037600",
    "end": "1044558"
  },
  {
    "text": "generators um where you have a function that generates",
    "start": "1044559",
    "end": "1049919"
  },
  {
    "text": "elements along along the way that sort of sort of kind of comes from functional",
    "start": "1049919",
    "end": "1055400"
  },
  {
    "text": "programming and the idea really is and we we can um we can watch it here in the um in the filter method that instead of",
    "start": "1055400",
    "end": "1062760"
  },
  {
    "text": "creating an array and sending it back um I could really just yield out the the",
    "start": "1062760",
    "end": "1069360"
  },
  {
    "text": "elements one by one as I create them with the the beautiful yield return syntax that we landed on for breaking",
    "start": "1069360",
    "end": "1076760"
  },
  {
    "text": "change purposes yeah Y and now um now this",
    "start": "1076760",
    "end": "1082480"
  },
  {
    "text": "because of the presence of yield return this method becomes a generator and it actually wants you to not return",
    "start": "1082480",
    "end": "1088640"
  },
  {
    "text": "anything explicitly because it the compiler is going to take care of generating a suitable uh class that",
    "start": "1088640",
    "end": "1094400"
  },
  {
    "text": "implements uh inable and um and implementing it such in such a way that",
    "start": "1094400",
    "end": "1100440"
  },
  {
    "text": "this code runs a little step a step further every time you ask for the next element right",
    "start": "1100440",
    "end": "1106720"
  },
  {
    "text": "so it's kind of lacy running the code inside as soon as you yielded something it's just going to sit here for a bit",
    "start": "1106720",
    "end": "1112919"
  },
  {
    "text": "waiting until the next time the F up here comes around and say okay give me another one it be like Yay they want me",
    "start": "1112919",
    "end": "1119080"
  },
  {
    "text": "to help out again and they call the predicate on the next thing and they keep going lazily",
    "start": "1119080",
    "end": "1124880"
  },
  {
    "text": "right um and you have you have functional languages like hasal that are lazy at at heart like the way that they",
    "start": "1124880",
    "end": "1132000"
  },
  {
    "text": "do the whole evaluation strategy is is you you only call things at the very",
    "start": "1132000",
    "end": "1137320"
  },
  {
    "text": "last moment when you're absolutely sure that you're going to need them um so um",
    "start": "1137320",
    "end": "1142679"
  },
  {
    "text": "that kind of um references back to that a little bit as well all right and I want to show",
    "start": "1142679",
    "end": "1149200"
  },
  {
    "text": "one more thing we talked about first class functions um and while classes well we",
    "start": "1149200",
    "end": "1155080"
  },
  {
    "text": "sort of embrace classes as or functions as first class values already in in c 1",
    "start": "1155080",
    "end": "1162120"
  },
  {
    "text": "we didn't really let you write Anonymous function you can't just write an expression that's a function and and at",
    "start": "1162120",
    "end": "1167600"
  },
  {
    "text": "c 2 we're like we're we're going to we're going to fix that we're going to have a great Syntax for um writing a a",
    "start": "1167600",
    "end": "1175280"
  },
  {
    "text": "function in line as just an expression and that great syntax is going to be not",
    "start": "1175280",
    "end": "1180480"
  },
  {
    "text": "Lambda Expressions okay so we have this this little intermediate thing that we",
    "start": "1180480",
    "end": "1188400"
  },
  {
    "text": "thought was going to be good enough in C 2 where you put the delegate keyword Anonymous methods we call it and then",
    "start": "1188400",
    "end": "1194799"
  },
  {
    "text": "you take the thing that the rest of the method essentially and put it there with the you know parameters and and a",
    "start": "1194799",
    "end": "1202120"
  },
  {
    "text": "body and it's an anonymous function you don't have to have this declaration anymore so our code got a little shorter",
    "start": "1202120",
    "end": "1208679"
  },
  {
    "text": "again that's very nice um and we're going to come back to that in just a minute so see what's that line n don't",
    "start": "1208679",
    "end": "1216679"
  },
  {
    "text": "need line nine either oh you're right thank you thank you good catch good",
    "start": "1216679",
    "end": "1221919"
  },
  {
    "text": "catch yeah um anyone else want to play uh co-pilot",
    "start": "1221919",
    "end": "1228600"
  },
  {
    "text": "yes so he's pointing out that um that using inable as the exchange type here",
    "start": "1244120",
    "end": "1249840"
  },
  {
    "text": "while it protects against much mutation um also has a pitfall because",
    "start": "1249840",
    "end": "1255559"
  },
  {
    "text": "it can be you could get you could get like just like we producing iables that are lazily evaluated here you could get",
    "start": "1255559",
    "end": "1261679"
  },
  {
    "text": "one of those as well and that means that if you iterate them multiple times well",
    "start": "1261679",
    "end": "1266960"
  },
  {
    "text": "everything gets evaluated multiple times right there's a cost to this um to this lazy kind of inable um that you you you",
    "start": "1266960",
    "end": "1276279"
  },
  {
    "text": "just have to be aware of um now you all of a sudden you're you have to think is",
    "start": "1276279",
    "end": "1281600"
  },
  {
    "text": "my is my thing um already realized and I'm just kind of going over the results",
    "start": "1281600",
    "end": "1287400"
  },
  {
    "text": "or am I realizing every time I go over it um and if you think that's bad now we",
    "start": "1287400",
    "end": "1293480"
  },
  {
    "text": "hold my beer right because now we're going to c 3 um where we really lean into this like",
    "start": "1293480",
    "end": "1299960"
  },
  {
    "text": "big time so thanks yes many developers still don't",
    "start": "1299960",
    "end": "1306080"
  },
  {
    "text": "realize that one of the things that like but let's let's get to that when we've shown uh when we got into queries I mean",
    "start": "1306080",
    "end": "1313159"
  },
  {
    "text": "this is um um yeah this will become obvious in a moment let's for now let's",
    "start": "1313159",
    "end": "1318799"
  },
  {
    "text": "just say Okay C 3 we're like we want to slay querying once and",
    "start": "1318799",
    "end": "1326240"
  },
  {
    "text": "for all and functional programming has a whole toolbox of things that you can use",
    "start": "1326240",
    "end": "1332960"
  },
  {
    "text": "to make querying a really good experience okay so databases they're all",
    "start": "1332960",
    "end": "1338440"
  },
  {
    "text": "the rage they're the future and we want to do better with them like object AR programming and databases have been at",
    "start": "1338440",
    "end": "1344080"
  },
  {
    "text": "odds lots of impedance mismatch we want to we want to fix that or make it a lot better better here and that's a whole",
    "start": "1344080",
    "end": "1349880"
  },
  {
    "text": "mission like up and down the stack including a lot of stuff in the language so we go to town um and we're going to",
    "start": "1349880",
    "end": "1357480"
  },
  {
    "text": "need a lot of uh first class functions and stuff here so let's start by doing",
    "start": "1357480",
    "end": "1363480"
  },
  {
    "text": "better on the anonymous functions okay it was a thing but it wasn't it wasn't",
    "start": "1363480",
    "end": "1369159"
  },
  {
    "text": "good enough we it this does not feel first class like this this a very clunky",
    "start": "1369159",
    "end": "1374480"
  },
  {
    "text": "thing to have in the middle of your expression can we do better just syntactically and yes we can and and",
    "start": "1374480",
    "end": "1379960"
  },
  {
    "text": "again inspired by functional programming and that Lambda calculus I mentioned up front we now have what we call Lambda",
    "start": "1379960",
    "end": "1386480"
  },
  {
    "text": "Expressions it's it's sufficiently cryptic it almost sounds like a brand name of sorts um but it's really just",
    "start": "1386480",
    "end": "1394760"
  },
  {
    "text": "like um another name for function literals function",
    "start": "1394760",
    "end": "1401159"
  },
  {
    "text": "Expressions so we could do this like we get rid of that big keyword and put an arrow in again okay I guess that's all",
    "start": "1401159",
    "end": "1408080"
  },
  {
    "text": "right but um another thing that you find in functional programming languages that they're often very expression oriented",
    "start": "1408080",
    "end": "1414440"
  },
  {
    "text": "they because they have less imperative programming they don't need statements so much you're not really changing things um and so most things are just",
    "start": "1414440",
    "end": "1423400"
  },
  {
    "text": "Expressions some functional languages don't have notion of statements it's all just Expressions um and so when you have just",
    "start": "1423400",
    "end": "1430760"
  },
  {
    "text": "a single return statement well maybe you should be able to just put an expression instead right so just put that and have",
    "start": "1430760",
    "end": "1437159"
  },
  {
    "text": "an expression body in your Lambda instead and and things got a lot more tur and nice all of a sudden and oh by",
    "start": "1437159",
    "end": "1444039"
  },
  {
    "text": "the way you know uh we're passing this to a we're passing this to a predicate",
    "start": "1444039",
    "end": "1449520"
  },
  {
    "text": "of int how do we know it's a predicate of int well that's because um we are",
    "start": "1449520",
    "end": "1455880"
  },
  {
    "text": "calling filter of int well how do we know we're calling filter of int well that's because we passed an array of int",
    "start": "1455880",
    "end": "1461679"
  },
  {
    "text": "okay good so type inference can go through and figure out what kind of",
    "start": "1461679",
    "end": "1466919"
  },
  {
    "text": "function we are P we are supposed to pass here and it knows that we're supposed to pass something that has an",
    "start": "1466919",
    "end": "1472480"
  },
  {
    "text": "INT parameter why do we have to say that again then well and then you don't right",
    "start": "1472480",
    "end": "1477559"
  },
  {
    "text": "you can just infer from Context the the parameter type of a Lambda and when you have only one uh you can even remove the",
    "start": "1477559",
    "end": "1485200"
  },
  {
    "text": "parenthesis and everything gets super nice it's almost like squint you have functional programming now you can",
    "start": "1485200",
    "end": "1491120"
  },
  {
    "text": "really Implement look you can do Lambda calculus stuff now in C it's beautiful and elegant um and very weird and mind B",
    "start": "1491120",
    "end": "1499000"
  },
  {
    "text": "um so I'm not going to do that okay so far so good",
    "start": "1499000",
    "end": "1505159"
  },
  {
    "text": "um and um this is nice and functional but what",
    "start": "1505159",
    "end": "1511480"
  },
  {
    "text": "if I want to you know quering I'm going to probably do more than just filter once right I'm going to call multi okay",
    "start": "1511480",
    "end": "1517640"
  },
  {
    "text": "so let's say filter is like it's a it's a query method of sorts but I'm probably going to want to app apply multiple",
    "start": "1517640",
    "end": "1523559"
  },
  {
    "text": "different ones or same ones I'm not going to write other ones here but let's say I want to filter the out put a",
    "start": "1523559",
    "end": "1528679"
  },
  {
    "text": "filter now we get to a thing that's not so nice in kind of functional um notation here let's say I",
    "start": "1528679",
    "end": "1536200"
  },
  {
    "text": "want to filter the output um and pass it a Lambda to save you know I want I only want the even ones I modular two is zero",
    "start": "1536200",
    "end": "1545559"
  },
  {
    "text": "I can do that but that now you start code becomes hard to read right you start you start in the Middle with an",
    "start": "1545559",
    "end": "1551000"
  },
  {
    "text": "array and then you you wrap it in the in the first filtering and then you wrap all of that in the next filtering you",
    "start": "1551000",
    "end": "1556799"
  },
  {
    "text": "have stuff both both before and after the the thing that kind of belongs",
    "start": "1556799",
    "end": "1561880"
  },
  {
    "text": "together so this is this code doesn't flow very well and and functional languages have addressed this long ago",
    "start": "1561880",
    "end": "1568399"
  },
  {
    "text": "with um an alternative function call syntax that is pipelining okay so instead of um I'm going to cheat and lie",
    "start": "1568399",
    "end": "1577080"
  },
  {
    "text": "a little bit here but you know the general um the general premise holds",
    "start": "1577080",
    "end": "1582399"
  },
  {
    "text": "true instead of having you know slapping function calls around you're going to pipe things through",
    "start": "1582399",
    "end": "1588919"
  },
  {
    "text": "um like a a a chain of functions from from left to right and the way that",
    "start": "1588919",
    "end": "1594760"
  },
  {
    "text": "might look if we were doing that in C which we which we aren't is let's say that um you know I take the result of",
    "start": "1594760",
    "end": "1601840"
  },
  {
    "text": "this first filter and instead of slapping filter around it I take the outcome from it and let's just let's",
    "start": "1601840",
    "end": "1610000"
  },
  {
    "text": "abuse the shift operator here um I pipe it into a call to another call to filter",
    "start": "1610000",
    "end": "1616360"
  },
  {
    "text": "like that but a call where the first first uh argument has been omitted because that's already coming in on the",
    "start": "1616360",
    "end": "1624399"
  },
  {
    "text": "pipe um so and you could even imagine doing that twice right we could we could",
    "start": "1624399",
    "end": "1630200"
  },
  {
    "text": "actually start with the array and then we can pipe it in to a call to filter",
    "start": "1630200",
    "end": "1635279"
  },
  {
    "text": "the first time as well and you all of a sudden the code U flows really nicely um",
    "start": "1635279",
    "end": "1641520"
  },
  {
    "text": "apart from the fact that you know you get red squiggles because this doesn't actually exist in cart um but you know",
    "start": "1641520",
    "end": "1647960"
  },
  {
    "text": "we want to get that kind of fluent as it as it has come to be called that kind of",
    "start": "1647960",
    "end": "1653039"
  },
  {
    "text": "fluent um style of invocation",
    "start": "1653039",
    "end": "1661039"
  },
  {
    "text": "so this is a place where we have to get a little more creative because we we want to get that but we also want it to",
    "start": "1661519",
    "end": "1666919"
  },
  {
    "text": "feel more object oriented and we actually like the discoverability of when you say dot you know what your",
    "start": "1666919",
    "end": "1674039"
  },
  {
    "text": "options are so this is where we come up with extension methods okay so we we want to take this filter method and we",
    "start": "1674039",
    "end": "1680039"
  },
  {
    "text": "want to make it an extension method so bear with me for a bit as I create a",
    "start": "1680039",
    "end": "1685399"
  },
  {
    "text": "static class static class let's call",
    "start": "1685399",
    "end": "1691320"
  },
  {
    "text": "it um oh that's because I have the filter method there first let um I can I can do this",
    "start": "1692840",
    "end": "1700039"
  },
  {
    "text": "Public public I wish there was a refactoring for this but I would be the only one ever using it public static",
    "start": "1700039",
    "end": "1706679"
  },
  {
    "text": "class",
    "start": "1706679",
    "end": "1709679"
  },
  {
    "text": "extensions open curly close curly okay we getting there",
    "start": "1711880",
    "end": "1718519"
  },
  {
    "text": "now this guy needs to be public and static as well",
    "start": "1718519",
    "end": "1724200"
  },
  {
    "text": "and um what's wrong with it oh accessibility",
    "start": "1724200",
    "end": "1729360"
  },
  {
    "text": "uh predicate down here needs to be public as well okay back in green and",
    "start": "1729360",
    "end": "1736039"
  },
  {
    "text": "now the new language feature is you can put a special um modifier on your on the",
    "start": "1736039",
    "end": "1742039"
  },
  {
    "text": "first parameter of your static method and it is now an extension method it is",
    "start": "1742039",
    "end": "1747159"
  },
  {
    "text": "supposed to be able to pretend that it's an instance method on its first",
    "start": "1747159",
    "end": "1752240"
  },
  {
    "text": "argument and with that we can now go and say dot",
    "start": "1752240",
    "end": "1758200"
  },
  {
    "text": "filter right so you can see how this is this is pipelining and its own way it's pipelining that the function has to",
    "start": "1758200",
    "end": "1764919"
  },
  {
    "text": "anticipate that it's going to be pipelined right so so it's not a free and and ever present as pipelining in in",
    "start": "1764919",
    "end": "1772519"
  },
  {
    "text": "in functional programming but on the other hand you know um what you win is that when you press doc you can see all",
    "start": "1772519",
    "end": "1778919"
  },
  {
    "text": "the extension methods as well so you get this um in in the IDE in the tooling you",
    "start": "1778919",
    "end": "1784679"
  },
  {
    "text": "can get this like strong assistance with what what are my options right here and you get these",
    "start": "1784679",
    "end": "1790440"
  },
  {
    "text": "contextual um uh contextual members essentially that only exist if you're in",
    "start": "1790440",
    "end": "1796200"
  },
  {
    "text": "a context where they Mak sense um and as you talked about yesterday",
    "start": "1796200",
    "end": "1801399"
  },
  {
    "text": "like extension methods become a runaway hit in terms of just software composition and we're now trying to come up with a way of generalizing them to",
    "start": "1801399",
    "end": "1808600"
  },
  {
    "text": "extension properties and Statics and operators and all kinds of things okay so very nice and fluent",
    "start": "1808600",
    "end": "1816559"
  },
  {
    "text": "there um it should look more like SQL so let's call it wear instead of",
    "start": "1816559",
    "end": "1823519"
  },
  {
    "text": "filter um and actually uh we're going to make a library of these guys",
    "start": "1823519",
    "end": "1828919"
  },
  {
    "text": "um these extension methods so I'm actually and and literally this was the implementation of the first wear method",
    "start": "1828919",
    "end": "1835159"
  },
  {
    "text": "we made it a little more efficient since then but logically that is this is what the wear uh method extension method",
    "start": "1835159",
    "end": "1842440"
  },
  {
    "text": "looked like in in the career libraries that we built and um and now you can",
    "start": "1842440",
    "end": "1848279"
  },
  {
    "text": "also say select and and um uh you know join and all kinds of squally stuff as",
    "start": "1848279",
    "end": "1855880"
  },
  {
    "text": "functions here um now this is really cool if you want to",
    "start": "1855880",
    "end": "1862919"
  },
  {
    "text": "query in memory data it's cool syntactically at least some will say it's not the most efficient way of doing",
    "start": "1862919",
    "end": "1869159"
  },
  {
    "text": "it partly because of the uh of the Lacy evaluation and uh which in and of itself",
    "start": "1869159",
    "end": "1874360"
  },
  {
    "text": "adds overhead and then you might accidentally do it twice and it adds twice as much",
    "start": "1874360",
    "end": "1879919"
  },
  {
    "text": "overhead so there's some there's some unpredictability it's hard to kind of",
    "start": "1879919",
    "end": "1885279"
  },
  {
    "text": "look at code and and and predict its performance characteristics I think that's something that we weren't as",
    "start": "1885279",
    "end": "1890440"
  },
  {
    "text": "aware of back then um in our defense neither were the functional programming languages um so uh but we really want to",
    "start": "1890440",
    "end": "1899880"
  },
  {
    "text": "query you know external data really just SQL but hey let's make a general",
    "start": "1899880",
    "end": "1905360"
  },
  {
    "text": "mechanism for it and if and uh to query external data we need to uh do something",
    "start": "1905360",
    "end": "1910440"
  },
  {
    "text": "smarter um we can't just like um we don't want to you know call SQL database",
    "start": "1910440",
    "end": "1917200"
  },
  {
    "text": "for every single wear wear method and sort of say hey uh can you filter with this and now can you filter with this",
    "start": "1917200",
    "end": "1923120"
  },
  {
    "text": "and now can you filter with this that's very chatty and very expensive and and um you know so or we or we could",
    "start": "1923120",
    "end": "1929679"
  },
  {
    "text": "download all the data and do it locally and and lose every benefit from from having a career database so what to do",
    "start": "1929679",
    "end": "1935880"
  },
  {
    "text": "but what we really want to do is to we want to take the whole career and kind of bundle it up and send it off to the",
    "start": "1935880",
    "end": "1942799"
  },
  {
    "text": "database as a SQL query how can we do that well we use another thing that is",
    "start": "1942799",
    "end": "1948159"
  },
  {
    "text": "um a functional um staple which is code quotation right we we code as data it's",
    "start": "1948159",
    "end": "1955200"
  },
  {
    "text": "a this what's arguably the oldest uh actual functional programming language lisp it leans into this very heavily",
    "start": "1955200",
    "end": "1961960"
  },
  {
    "text": "like code and data looks exactly the same it's all it's all parens and identifiers and that's pretty much all",
    "start": "1961960",
    "end": "1968120"
  },
  {
    "text": "there is in the whole language right and so code will be something uh in parns",
    "start": "1968120",
    "end": "1973720"
  },
  {
    "text": "with some identifiers and some more parns and data will be something in parns with you know that's just what everything looks like and it means that",
    "start": "1973720",
    "end": "1981039"
  },
  {
    "text": "you can very easily quote some code and all of a sudden it's just a data structure um and this code quotation",
    "start": "1981039",
    "end": "1989440"
  },
  {
    "text": "means we can get code as a value at runtime the code itself is an",
    "start": "1989440",
    "end": "1994559"
  },
  {
    "text": "inspectable data structure can we do that if we can do that here as well we can do some Nifty tricks and so uh so",
    "start": "1994559",
    "end": "2002399"
  },
  {
    "text": "code quotation in the form of expression trees becomes a thing um in in in uh c 3",
    "start": "2002399",
    "end": "2009679"
  },
  {
    "text": "so the way we do it is if if array was actually a SQL database it would Implement an interface called I",
    "start": "2009679",
    "end": "2016519"
  },
  {
    "text": "queriable uh that's like iable but for things that need to quote the um the the",
    "start": "2016519",
    "end": "2023399"
  },
  {
    "text": "quote the query um expressions and it's not but I can um I can pretend it is",
    "start": "2023399",
    "end": "2031039"
  },
  {
    "text": "here by just saying ask queriable there's a method for that and if we turn our array into a queriable and we look",
    "start": "2031039",
    "end": "2037279"
  },
  {
    "text": "at the we method we can see that it has changed its signature now we get overload resolution gives us a different",
    "start": "2037279",
    "end": "2042760"
  },
  {
    "text": "wear method that does not can I point in here without it going away I can instead",
    "start": "2042760",
    "end": "2048320"
  },
  {
    "text": "of taking a funk of income I forgot to tell you about Funk let's get there um it's just like the next level C 3 uh we",
    "start": "2048320",
    "end": "2056560"
  },
  {
    "text": "we take the next level of generalization of of delegate types and we just have Funk of action and get closer to you not",
    "start": "2056560",
    "end": "2063960"
  },
  {
    "text": "having to ever declare them you can just use the ones we have in our library now um aside but you so there's a delegate",
    "start": "2063960",
    "end": "2070398"
  },
  {
    "text": "type inside here but it's an expression of that delegate type and when the compiler sees expression of something it",
    "start": "2070399",
    "end": "2076560"
  },
  {
    "text": "says aha they don't actually want a delegate they don't want a first class function they want a first class syntax",
    "start": "2076560",
    "end": "2083200"
  },
  {
    "text": "tree of a function and so instead of compiling this into code they compile it into a",
    "start": "2083200",
    "end": "2091398"
  },
  {
    "text": "data structure rather code that generates a data structure that resembles the structure of the Lambda itself okay and so so the wear method",
    "start": "2091399",
    "end": "2100079"
  },
  {
    "text": "gets a little syntax tree of your Lambda and then it says instead of doing something starting executing on that it",
    "start": "2100079",
    "end": "2106359"
  },
  {
    "text": "says Hey based on that let me build actually let me quote myself let me give",
    "start": "2106359",
    "end": "2111720"
  },
  {
    "text": "you a little wear call that's a syntax tree and then I stitch in the one I get I got and I have a wearall and I and put",
    "start": "2111720",
    "end": "2119119"
  },
  {
    "text": "that into another iable and then uh the next wear call takes that and says let",
    "start": "2119119",
    "end": "2124200"
  },
  {
    "text": "me Stitch that and and so it so all of these wear call they they combine to",
    "start": "2124200",
    "end": "2129920"
  },
  {
    "text": "build up a big syntax tree of the whole query and stick it inside the thing",
    "start": "2129920",
    "end": "2135520"
  },
  {
    "text": "that's returned here the I quable that's returned and then the magic happens when you for it down",
    "start": "2135520",
    "end": "2143440"
  },
  {
    "text": "here it'll go and say hey I should ask what provider I belong to like where",
    "start": "2143440",
    "end": "2151040"
  },
  {
    "text": "I started where the array came from to begin with I should ask it to to do this",
    "start": "2151040",
    "end": "2157280"
  },
  {
    "text": "query for me and what the SQL provider will do is to say okay got a whole query",
    "start": "2157280",
    "end": "2162920"
  },
  {
    "text": "here let me translate that to SQL right now as one big query just at runtime in",
    "start": "2162920",
    "end": "2168560"
  },
  {
    "text": "the middle of everything just translate that to a query send it over get the results back and and uh start yielding",
    "start": "2168560",
    "end": "2177400"
  },
  {
    "text": "those out to the user as part of this R okay it's a lot but it",
    "start": "2177400",
    "end": "2184359"
  },
  {
    "text": "works and it's pretty cool um and you know Entity framework to this day I",
    "start": "2184359",
    "end": "2190480"
  },
  {
    "text": "guess it's a big part of how that whole thing works um so it had a lot of staying power too all right querying doesn't",
    "start": "2190480",
    "end": "2198040"
  },
  {
    "text": "quite look like SQL yet wouldn't it be cool if we just had SQL in C uh that's really gonna that's going to be the",
    "start": "2198040",
    "end": "2203560"
  },
  {
    "text": "Marquee feature we're going to have this beautiful SQL syntax and every SQL Developer will flock to",
    "start": "2203560",
    "end": "2209400"
  },
  {
    "text": "C and so we come up with a syntactic sugar over these method calls here that",
    "start": "2209400",
    "end": "2214520"
  },
  {
    "text": "is query Expressions so you can say um",
    "start": "2214520",
    "end": "2220280"
  },
  {
    "text": "from I in this thing",
    "start": "2220280",
    "end": "2225839"
  },
  {
    "text": "where as a keyword where and then the I kind of gets reuse",
    "start": "2225839",
    "end": "2233839"
  },
  {
    "text": "down here you can see how we do the syntactic uh transformation wear another thing",
    "start": "2233839",
    "end": "2240359"
  },
  {
    "text": "okay um and again the lambas go away but it's it it trans it translates into",
    "start": "2240359",
    "end": "2246680"
  },
  {
    "text": "exactly the same thing Lambda is an all underneath and it's going to insist that we end with a select Clause",
    "start": "2246680",
    "end": "2253839"
  },
  {
    "text": "because um SQL um unlike SQL though we don't start",
    "start": "2253839",
    "end": "2259720"
  },
  {
    "text": "with a select Clause we end with it because if you start by selecting something how do you know what you have to choose from right so from a",
    "start": "2259720",
    "end": "2265040"
  },
  {
    "text": "programming language perspective it's better to have the things that introduce the variables before the things that uh",
    "start": "2265040",
    "end": "2270960"
  },
  {
    "text": "consume the variables so we did flip that around and you have much more freedom compared to SQL in terms of",
    "start": "2270960",
    "end": "2277079"
  },
  {
    "text": "which quer Clauses you have in which order and so on but it's familiar it's familiar okay so c 3 all about quering",
    "start": "2277079",
    "end": "2285960"
  },
  {
    "text": "lots and lots of functional stuff you tired yet okay well let's go",
    "start": "2285960",
    "end": "2291599"
  },
  {
    "text": "for more uh C 4 okay so actually now we get to a bit of a uh a dead zone in um",
    "start": "2291599",
    "end": "2298680"
  },
  {
    "text": "in the Continuum of time in terms of functional stuff like we really we feel like we've exhausted our functional",
    "start": "2298680",
    "end": "2304760"
  },
  {
    "text": "plunder now for a bit uh C 4 we're all about Dynamic uh it was a whole thing you know",
    "start": "2304760",
    "end": "2310640"
  },
  {
    "text": "we wanted Python and Ruby on. net as well and it should all like be one happy family calling across JavaScript you",
    "start": "2310640",
    "end": "2317400"
  },
  {
    "text": "name it came up with this great big thing that lets you be super Dynamic but",
    "start": "2317400",
    "end": "2322599"
  },
  {
    "text": "has nothing to do with functional programming so luckily I get to skip it C",
    "start": "2322599",
    "end": "2328960"
  },
  {
    "text": "five um at this point fshp has a really cool",
    "start": "2328960",
    "end": "2338359"
  },
  {
    "text": "comes out with a really cool uh implementation of async that is super inspiring to us um and they use this",
    "start": "2338359",
    "end": "2346480"
  },
  {
    "text": "they use what's called monads and really uh queries are as this is a very uh",
    "start": "2346480",
    "end": "2353800"
  },
  {
    "text": "query specific Syntax for it but the way we do quer and C really is also monads it's just tailored specifically to query",
    "start": "2353800",
    "end": "2361040"
  },
  {
    "text": "but monads are an abstraction mechanism that lets you do a lot of things where you have a a a flow of code that you",
    "start": "2361040",
    "end": "2367079"
  },
  {
    "text": "want to somehow abstract over the whole flow and do things behind the scenes uh so F has this general purpose feature",
    "start": "2367079",
    "end": "2374680"
  },
  {
    "text": "for that it's called workflows I think and um and they do async with that as",
    "start": "2374680",
    "end": "2380440"
  },
  {
    "text": "well as other things they're like oo async because now we now the cloud you know back be back when we did this stuff",
    "start": "2380440",
    "end": "2387680"
  },
  {
    "text": "the cloud wasn't really much of a thing it's kind it's just it's just coming but now the cloud we need to do a bunch of",
    "start": "2387680",
    "end": "2394480"
  },
  {
    "text": "of um distributor programming essentially and you need be able to deal with asynchrony and doing that without",
    "start": "2394480",
    "end": "2400480"
  },
  {
    "text": "language support sucks so we look very hard at what F sharp does we decide that",
    "start": "2400480",
    "end": "2406599"
  },
  {
    "text": "it simply is not a good fit for an imperative programming language and so we do something else instead and so",
    "start": "2406599",
    "end": "2411839"
  },
  {
    "text": "we're not going to talk about ASN much in here today because the way we chose to solve it was materially different",
    "start": "2411839",
    "end": "2417359"
  },
  {
    "text": "from what F sharp did but it was still a big inspiration for us in like having async be integrated into your code flow",
    "start": "2417359",
    "end": "2425319"
  },
  {
    "text": "um so I I still want to mention it instead I want to go to C 6 we didn't do",
    "start": "2425319",
    "end": "2431640"
  },
  {
    "text": "much in C 6 and I'm going to switch to a different a different demo here we didn't do much in C 6 because we're busy",
    "start": "2431640",
    "end": "2437040"
  },
  {
    "text": "building our own compiler uh again but this time in C and so they said can you please not add too",
    "start": "2437040",
    "end": "2444440"
  },
  {
    "text": "many language features for a bit and um that was fateful because Andrew and I were like but that's what we do we add",
    "start": "2444440",
    "end": "2449720"
  },
  {
    "text": "language features what do you want us to do and we went over and did typescript instead",
    "start": "2449720",
    "end": "2455119"
  },
  {
    "text": "so um and then they said okay we're ready and I came back and Andre stayed and that's why I'm up here today and not",
    "start": "2455119",
    "end": "2461720"
  },
  {
    "text": "him so take that Anders um but um of course there are more",
    "start": "2461720",
    "end": "2469079"
  },
  {
    "text": "things to learn uh from from functional programming and they also have to do with the cloud the next chapter we get",
    "start": "2469079",
    "end": "2475240"
  },
  {
    "text": "into here let's see we have 20 minutes left okay um so upian programming great",
    "start": "2475240",
    "end": "2482960"
  },
  {
    "text": "we encapsulate uh data and functionality together strongly and",
    "start": "2482960",
    "end": "2489520"
  },
  {
    "text": "um um like for instance when you have functionality that's sort of shape dependent right you you want it it's",
    "start": "2489520",
    "end": "2497160"
  },
  {
    "text": "logically the same thing but it behaves differently in the specifics depending on what type it's for we do that with",
    "start": "2497160",
    "end": "2502960"
  },
  {
    "text": "virtual methods so I'm I'm having this render method here and it's virtual over",
    "start": "2502960",
    "end": "2508079"
  },
  {
    "text": "my hierarchy of two types but demo um and you know I just override and do",
    "start": "2508079",
    "end": "2514599"
  },
  {
    "text": "something different but it's logically the same function that's how how I make something uh that behaves dependent on",
    "start": "2514599",
    "end": "2520240"
  },
  {
    "text": "the shape but is really the same function um that becomes a problem in",
    "start": "2520240",
    "end": "2526800"
  },
  {
    "text": "the cloud because you see a vast separation of data and functionality",
    "start": "2526800",
    "end": "2533160"
  },
  {
    "text": "data becomes long lived the shape of data becomes long lived and it becomes detached from what it's being used for",
    "start": "2533160",
    "end": "2539040"
  },
  {
    "text": "there might be a few key things that you always want to do with that data but by and large you'll have many different",
    "start": "2539040",
    "end": "2545720"
  },
  {
    "text": "apps or services or whatnot and using the same data and they also want to have",
    "start": "2545720",
    "end": "2551240"
  },
  {
    "text": "shape dependent Behavior but they can't all become virtual methods on the data itself right they can't all like go in",
    "start": "2551240",
    "end": "2556599"
  },
  {
    "text": "there and and put in their own virtual methods so there's a separation of concerns that needs to happen here and",
    "start": "2556599",
    "end": "2562440"
  },
  {
    "text": "functional languages they were on the right side of history with this one again and so uh we so it's time to go",
    "start": "2562440",
    "end": "2570280"
  },
  {
    "text": "stealing again and um and so let's try to look at if we wanted to do it the",
    "start": "2570280",
    "end": "2575559"
  },
  {
    "text": "functional way using the tools we had at at the time what that would look like so instead of having a virtual method here",
    "start": "2575559",
    "end": "2582000"
  },
  {
    "text": "instead of calling mads do render here we would say render mads okay so it would be a function",
    "start": "2582000",
    "end": "2587880"
  },
  {
    "text": "render would be a single function and let's write that function and that function itself has uh you know string",
    "start": "2587880",
    "end": "2595119"
  },
  {
    "text": "render that function itself then has Type dependent Behavior built into it so",
    "start": "2595119",
    "end": "2601160"
  },
  {
    "text": "render um person p and how should we Implement that well",
    "start": "2601160",
    "end": "2610000"
  },
  {
    "text": "it'll have to be a bunch of like if then logic so um let's see if we can do it as an",
    "start": "2610000",
    "end": "2616040"
  },
  {
    "text": "expression boded member because hang on expressions are cool right so um not",
    "start": "2616040",
    "end": "2621640"
  },
  {
    "text": "just so not only lambas at this time but uh other functions as well should be able to be expression bodied in fact",
    "start": "2621640",
    "end": "2627280"
  },
  {
    "text": "these guys down here could be expression bodied as well that's another like little inspiration um but you know uh",
    "start": "2627280",
    "end": "2634480"
  },
  {
    "text": "beside that um let's start with just doing the person stuff we should like all else equal we should do what what a",
    "start": "2634480",
    "end": "2641400"
  },
  {
    "text": "person does here um so to start with let's do that but really we want to",
    "start": "2641400",
    "end": "2647920"
  },
  {
    "text": "first check is it is it that other kind um but before we do that we notice we",
    "start": "2647920",
    "end": "2654040"
  },
  {
    "text": "got red squiggles here because we don't have privileged access to the data anymore we are outside of the of the",
    "start": "2654040",
    "end": "2661319"
  },
  {
    "text": "type we we need to restrict ourselves to only public data now so this separation of concerns means you're no longer",
    "start": "2661319",
    "end": "2668200"
  },
  {
    "text": "encapsulating with the data and that means you're limited to public data only so it's a lot more like de encapsulation",
    "start": "2668200",
    "end": "2676440"
  },
  {
    "text": "decapsulation Decap something decapitation um okay so but we can do",
    "start": "2676440",
    "end": "2684400"
  },
  {
    "text": "that we can we can dot in that's fine but now we want to say okay we have all these many derived classes I only have",
    "start": "2684400",
    "end": "2690079"
  },
  {
    "text": "one but that's you know um you you get the idea so we have to first ask is is",
    "start": "2690079",
    "end": "2696599"
  },
  {
    "text": "this thing really if if p is a student you know um",
    "start": "2696599",
    "end": "2704440"
  },
  {
    "text": "then then do the student thing otherwise uh do the um do the the the person thing",
    "start": "2704440",
    "end": "2713240"
  },
  {
    "text": "I'm going to take this the student thing we're just going to do the same thing right we're just going to put it in",
    "start": "2713240",
    "end": "2718280"
  },
  {
    "text": "there and make it uh go through um through the public thing pet",
    "start": "2718280",
    "end": "2725359"
  },
  {
    "text": "first name great pet last name great p. ID you know I'm getting the hang of this",
    "start": "2725359",
    "end": "2731440"
  },
  {
    "text": "no sweat well oops hang on right um I need the co on here as well but",
    "start": "2731440",
    "end": "2739559"
  },
  {
    "text": "there's still a squiggle left because person doesn't have an ID this is cumbersome how do functional",
    "start": "2739559",
    "end": "2746119"
  },
  {
    "text": "programmers Live Well they have pattern matching and this is where we add pattern matching to",
    "start": "2746119",
    "end": "2751960"
  },
  {
    "text": "C as the alternative to Virtual methods to get",
    "start": "2751960",
    "end": "2758079"
  },
  {
    "text": "shape dependent Behavior so we start small we introduce",
    "start": "2758079",
    "end": "2764640"
  },
  {
    "text": "this new thing called a pattern a pattern is essentially a thing that is both a predicate like it it it checks",
    "start": "2764640",
    "end": "2772079"
  },
  {
    "text": "whether something is true but when that something is true it is also an",
    "start": "2772079",
    "end": "2777200"
  },
  {
    "text": "extractor it can extract data when the predicate part was true and that's",
    "start": "2777200",
    "end": "2783359"
  },
  {
    "text": "really powerful abstraction so the one pattern is student s here is is a new",
    "start": "2783359",
    "end": "2789200"
  },
  {
    "text": "pattern um which says if you're a student let's extract you as a student",
    "start": "2789200",
    "end": "2794720"
  },
  {
    "text": "and now we have a stronger type variable um for the same thing it's the same object as P but uh because we checked",
    "start": "2794720",
    "end": "2802440"
  },
  {
    "text": "that it was a student we can use it over here and actually access the ID so pattern matching great um and now we can",
    "start": "2802440",
    "end": "2811079"
  },
  {
    "text": "we can go and get rid of our virtual methods down here and um and this is now the way that we do our our shape",
    "start": "2811079",
    "end": "2816440"
  },
  {
    "text": "dependent behavior and now we can go and have independently implemented shape dependent behavior in multiple different",
    "start": "2816440",
    "end": "2821839"
  },
  {
    "text": "apps and servic and all over the place great um still a little clunky you can",
    "start": "2821839",
    "end": "2827119"
  },
  {
    "text": "also use so in C um I think we're in seven at this point uh you can use patterns in is",
    "start": "2827119",
    "end": "2835480"
  },
  {
    "text": "expressions and in switch statements but switch statements are from hell right nobody wants to write those um so in C 8",
    "start": "2835480",
    "end": "2843480"
  },
  {
    "text": "um we do switch Expressions which are like the cool cussing of switch",
    "start": "2843480",
    "end": "2848720"
  },
  {
    "text": "statements so the way you do that is you say switch oh you say p",
    "start": "2848720",
    "end": "2855200"
  },
  {
    "text": "switch and then a switch body that is um that is going to take us a little like a",
    "start": "2855200",
    "end": "2862240"
  },
  {
    "text": "minute or two before the squiggles go away um uh so essentially what you do is you",
    "start": "2862240",
    "end": "2869119"
  },
  {
    "text": "put cases in a switch and they start with a pattern and then they have that fat arrow that we know from lambdas and",
    "start": "2869119",
    "end": "2875359"
  },
  {
    "text": "then they have an expression that is the result we want if it's a student and that's just the thing down here right",
    "start": "2875359",
    "end": "2880760"
  },
  {
    "text": "that's just this um comma and then the next one is sort of like we just say",
    "start": "2880760",
    "end": "2887119"
  },
  {
    "text": "that's the default case so that's it's similar to having an if then or a conditional structure in many ways but",
    "start": "2887119",
    "end": "2893400"
  },
  {
    "text": "it's stronger first of all it's more readable right you can read the cases D it's like the it's like the um the",
    "start": "2893400",
    "end": "2901240"
  },
  {
    "text": "fluent it it just makes it's just it's good for readability and it's in the",
    "start": "2901240",
    "end": "2906319"
  },
  {
    "text": "order that it happens and when you when you get one that catches you're good but it also has Beyond like being less",
    "start": "2906319",
    "end": "2913520"
  },
  {
    "text": "confusing code like no more nested if than else's um it also has stronger",
    "start": "2913520",
    "end": "2920160"
  },
  {
    "text": "checking um let's say we didn't do that last part it's going to give us a warning saying hey you're not handling",
    "start": "2920160",
    "end": "2925319"
  },
  {
    "text": "all the possible values you're only handing handling the student ones would you like to handle the rest or would you",
    "start": "2925319",
    "end": "2930400"
  },
  {
    "text": "like me to throw you an exception um I'll handle the rest thank you very much um and also like if I swap",
    "start": "2930400",
    "end": "2938319"
  },
  {
    "text": "these two it'll say in a Sterner voice this time with a red squiggle be like",
    "start": "2938319",
    "end": "2944760"
  },
  {
    "text": "hey you can't ever get here that's wrong and um and that way it helps you",
    "start": "2944760",
    "end": "2952960"
  },
  {
    "text": "kind of keep your your logic clean and avoid kind of over time through",
    "start": "2952960",
    "end": "2958079"
  },
  {
    "text": "maintenance and whatnot kind of having having that decay of your your conditional logic that we all know so",
    "start": "2958079",
    "end": "2965319"
  },
  {
    "text": "well um that's really cool um but we also so",
    "start": "2965319",
    "end": "2971000"
  },
  {
    "text": "really a big step forward with the switch Expressions um but also um we add",
    "start": "2971000",
    "end": "2976720"
  },
  {
    "text": "more and more patterns to c c 8 C 9 we keep adding more kinds of patterns let's say so this this really a little bug in",
    "start": "2976720",
    "end": "2982960"
  },
  {
    "text": "here right because what if the first name is empty um and I'm taking the first letter of it like that's going to throw well why don't we deal with that",
    "start": "2982960",
    "end": "2989839"
  },
  {
    "text": "case um so we can deal with it in multiple ways we can we actually add like a Boolean condition we can say",
    "start": "2989839",
    "end": "2995680"
  },
  {
    "text": "underscore when um P do first",
    "start": "2995680",
    "end": "3000839"
  },
  {
    "text": "name uh dot uh um length equals zero or",
    "start": "3000839",
    "end": "3006559"
  },
  {
    "text": "something like that right we could do that um but we can also use recursive",
    "start": "3006559",
    "end": "3011640"
  },
  {
    "text": "patterns which are patterns that look at a value de sort of deconstruct it and",
    "start": "3011640",
    "end": "3016960"
  },
  {
    "text": "look at its parts right so there's an object pattern for instance here we can say if the thing that comes in if the",
    "start": "3016960",
    "end": "3022160"
  },
  {
    "text": "person that comes in has a first name",
    "start": "3022160",
    "end": "3028119"
  },
  {
    "text": "for which this following pattern applies so if it has a first name uh where the um that is the empty",
    "start": "3028119",
    "end": "3036200"
  },
  {
    "text": "string for instance a constant pattern then we'll just output you know the last name p a last name say okay or we could",
    "start": "3036200",
    "end": "3044160"
  },
  {
    "text": "say you know looking forward to list P list patterns which will be in a later version we can say if it's an the empty",
    "start": "3044160",
    "end": "3050240"
  },
  {
    "text": "list of of characters let's do that or we can say um if it's um",
    "start": "3050240",
    "end": "3057920"
  },
  {
    "text": "what's that if it is null or empty we could use the when Clause again to say is null or",
    "start": "3057920",
    "end": "3063480"
  },
  {
    "text": "empty or we could but we could also do that as a pattern because we also at this point have uh introduced um",
    "start": "3063480",
    "end": "3070880"
  },
  {
    "text": "combination of patterns so you can say if it's null or the empty string like that right or we could say if first name",
    "start": "3070880",
    "end": "3080040"
  },
  {
    "text": "dot uh we can actually apply recursive patterns inside a recursive pattern we say if first name is a thing where the L",
    "start": "3080040",
    "end": "3086599"
  },
  {
    "text": "L is the constant zero you you there's so many ways of recombining these recursive patterns and just pick",
    "start": "3086599",
    "end": "3092319"
  },
  {
    "text": "whichever one makes sense for you and and if you go too crazy uh people will tell you in code review so because it",
    "start": "3092319",
    "end": "3098599"
  },
  {
    "text": "can get pretty gnarly but it you know you can also just kind of stop when",
    "start": "3098599",
    "end": "3103960"
  },
  {
    "text": "while it's good while it's good right so um pattern matching a thing that we've",
    "start": "3103960",
    "end": "3109640"
  },
  {
    "text": "leaned into a lot and people use it a lot and it's really cleaning up a lot of code especially when virtual methods",
    "start": "3109640",
    "end": "3115440"
  },
  {
    "text": "just aren't the right thing for so the last thing I want to talk about is immutability and again we're sort of",
    "start": "3115440",
    "end": "3122960"
  },
  {
    "text": "at a at a core difference between sort of the pure optic ored and the pure",
    "start": "3122960",
    "end": "3129200"
  },
  {
    "text": "functional Paradigm pure optic ored programming is imperative in nature objects have state and they their state",
    "start": "3129200",
    "end": "3135880"
  },
  {
    "text": "evolves over time as you mutate them okay that's just how we model the world functional programming is more",
    "start": "3135880",
    "end": "3143160"
  },
  {
    "text": "mathematical it's about values and by default you don't have mutable State you",
    "start": "3143160",
    "end": "3150680"
  },
  {
    "text": "a value is a value is a value so",
    "start": "3150680",
    "end": "3156119"
  },
  {
    "text": "um what you want to model is really not like the the object there won't be like",
    "start": "3156119",
    "end": "3162280"
  },
  {
    "text": "a single thing in there that models me there will be a maybe even a set of",
    "start": "3162280",
    "end": "3167599"
  },
  {
    "text": "different records different values that represent snapshots of my state at any given time that's a really powerful way",
    "start": "3167599",
    "end": "3174160"
  },
  {
    "text": "of programming because of a number of reasons um one is parallelism if you",
    "start": "3174160",
    "end": "3179760"
  },
  {
    "text": "don't have mutable State you don't have shared mutable State and you don't have to have all these locking things that will always go wrong all over the place",
    "start": "3179760",
    "end": "3187200"
  },
  {
    "text": "um and undo is great because you can keep the previous state and you can just revert to it and it was still there like",
    "start": "3187200",
    "end": "3193520"
  },
  {
    "text": "it wasn't destroyed in a destructive mutation so how does this all work like let's look at me and let's say so I",
    "start": "3193520",
    "end": "3198920"
  },
  {
    "text": "actually used to be before I got married I used to have a different uh uh last",
    "start": "3198920",
    "end": "3203960"
  },
  {
    "text": "name so let's say that um somebody nefarious tries to change it back match that last name equals um Nelson is what",
    "start": "3203960",
    "end": "3212000"
  },
  {
    "text": "I used to be called um okay uh bad I don't want that to change I want to be",
    "start": "3212000",
    "end": "3218720"
  },
  {
    "text": "immutable so how first how can we support immutability well we can we allow you in your auto properties to not",
    "start": "3218720",
    "end": "3225079"
  },
  {
    "text": "have Setters we can just have a get or only Auto property here but that's that",
    "start": "3225079",
    "end": "3230760"
  },
  {
    "text": "prevents that but it also unfortunately prevents initialization up here and we really like object initializers so so we",
    "start": "3230760",
    "end": "3237119"
  },
  {
    "text": "introduce the middle ground of inits which are Setters that only they're only",
    "start": "3237119",
    "end": "3243240"
  },
  {
    "text": "valid until the end of your object initialization and then so so this is allowed but this is not okay good we can",
    "start": "3243240",
    "end": "3250240"
  },
  {
    "text": "now Express objects that are immutable after construction awesome but how what",
    "start": "3250240",
    "end": "3257040"
  },
  {
    "text": "how do you mutate an immutable how do you mutate it now right okay it's immutable great how do I mutate it I",
    "start": "3257040",
    "end": "3262319"
  },
  {
    "text": "want I if I want to make this transformation how do I do it well you use n structive mutation which is a",
    "start": "3262319",
    "end": "3267559"
  },
  {
    "text": "common pattern that is and you can express it without any language features where you go up to you essentially but",
    "start": "3267559",
    "end": "3274720"
  },
  {
    "text": "it's very arduous right if you look at the rosling compiler um it uses non-destructive mutation all over the",
    "start": "3274720",
    "end": "3281079"
  },
  {
    "text": "place but before what I'm about to show you so it has with methods all over the place so there'll be like a public",
    "start": "3281079",
    "end": "3286760"
  },
  {
    "text": "method in there that's public person with last",
    "start": "3286760",
    "end": "3294359"
  },
  {
    "text": "name String name String last name and then you know it'll return you another",
    "start": "3294359",
    "end": "3300440"
  },
  {
    "text": "person that's like the one you called it on but with a last name change copy and replace a few things that's you know",
    "start": "3300440",
    "end": "3307400"
  },
  {
    "text": "writing all that out um is no fun uh so we made a language feature for it instead essentially what we say is there",
    "start": "3307400",
    "end": "3314640"
  },
  {
    "text": "a if you want to be value based if you want your things to represent values and not objects mutable state if you want",
    "start": "3314640",
    "end": "3320000"
  },
  {
    "text": "them to be information and not substance in a way well you can now get all the",
    "start": "3320000",
    "end": "3325359"
  },
  {
    "text": "right defaults generated for you by calling them records so you can annotate these classes as being record classes",
    "start": "3325359",
    "end": "3331440"
  },
  {
    "text": "and that's also record structs um and now all the defaults change and they values by default they have value based",
    "start": "3331440",
    "end": "3337799"
  },
  {
    "text": "equality they even have a nice value based um um two-ring uh but they also support",
    "start": "3337799",
    "end": "3345359"
  },
  {
    "text": "non-destructive mutation okay so I said they had a nice two- string so I'm just going to delete",
    "start": "3345359",
    "end": "3351760"
  },
  {
    "text": "some code here to make to make use of that just get rid of the render here completely",
    "start": "3351760",
    "end": "3358160"
  },
  {
    "text": "um so what does nondestructive mutation look like on a record well the way it works is that I can walk up to let's say",
    "start": "3358160",
    "end": "3365200"
  },
  {
    "text": "so I want to create a new another mads value let's call it old mads from back when he was nson I'm creating a record",
    "start": "3365200",
    "end": "3371480"
  },
  {
    "text": "of the past I can say Ms with and then an object initializer like",
    "start": "3371480",
    "end": "3380680"
  },
  {
    "text": "that H so that's what record support that's new and that means I get a Ms that's exactly like",
    "start": "3380680",
    "end": "3386960"
  },
  {
    "text": "the the one I'm calling it on except that the last name is changed and bear",
    "start": "3386960",
    "end": "3392240"
  },
  {
    "text": "in mind that this is like I'm only looking at mads statically type here as a person but mads was",
    "start": "3392240",
    "end": "3398839"
  },
  {
    "text": "really a student right um and and with works with that it actually creates",
    "start": "3398839",
    "end": "3404359"
  },
  {
    "text": "another student and copies over all the student specific data as well it's not like you're just generating the copy",
    "start": "3404359",
    "end": "3409839"
  },
  {
    "text": "this copy that in place here there's some virtual functionality inside of the records that we generate for you that",
    "start": "3409839",
    "end": "3415960"
  },
  {
    "text": "takes takes care of that and the same goes for equality if I right",
    "start": "3415960",
    "end": "3421240"
  },
  {
    "text": "line um whether uh old",
    "start": "3421240",
    "end": "3426720"
  },
  {
    "text": "mads I old mads with the last name",
    "start": "3426720",
    "end": "3432319"
  },
  {
    "text": "changed back to torguson now would be pretty embarrassing if I can't spell that but",
    "start": "3432319",
    "end": "3437960"
  },
  {
    "text": "no one else in the world can so um is that equal to M well if you",
    "start": "3437960",
    "end": "3443160"
  },
  {
    "text": "think about it in op or a way it shouldn't be because they're two different objects but value based",
    "start": "3443160",
    "end": "3451640"
  },
  {
    "text": "equality has been implemented in the records so that they should be equal so for so just this once let's actually run",
    "start": "3451680",
    "end": "3458000"
  },
  {
    "text": "the code that I have on the screen um and we should see I don't know",
    "start": "3458000",
    "end": "3463799"
  },
  {
    "text": "why this takes so long probably some AI thing um",
    "start": "3463799",
    "end": "3470319"
  },
  {
    "text": "um and not only do I have a beautiful uh two string but I also have true like",
    "start": "3470319",
    "end": "3476319"
  },
  {
    "text": "they're compared as values and that again that actually implementing value-based equality on an object",
    "start": "3476319",
    "end": "3481960"
  },
  {
    "text": "hierarchy is super hard like because they can be different types and how do you make sure to compare the things you",
    "start": "3481960",
    "end": "3488319"
  },
  {
    "text": "can't see statically and da da we do it for you you never have to make those bugs again um so we really leaned into",
    "start": "3488319",
    "end": "3495039"
  },
  {
    "text": "having like a full records are really like value semantics as full yes we can",
    "start": "3495039",
    "end": "3500839"
  },
  {
    "text": "possibly Implement them thus kind of letting you do the the immutable thing",
    "start": "3500839",
    "end": "3506280"
  },
  {
    "text": "the value based thing that you would be the default mode of programming in a pure functional sty okay so I think I'm",
    "start": "3506280",
    "end": "3513000"
  },
  {
    "text": "going to stop there um that's that takes us through um most of the major",
    "start": "3513000",
    "end": "3520760"
  },
  {
    "text": "functional influences on C of course we're not done yet I people who were were at my talk yesterday will know that",
    "start": "3520760",
    "end": "3526480"
  },
  {
    "text": "we're tinkering with unions now and seeing what we can scavenge from there",
    "start": "3526480",
    "end": "3532640"
  },
  {
    "text": "um but this is a good place to uh to get off the train um and I just want to say something at",
    "start": "3532640",
    "end": "3540440"
  },
  {
    "text": "the end that I I hoped I would have time for and I do which is all of this doesn't mean that c is a functional",
    "start": "3540440",
    "end": "3546359"
  },
  {
    "text": "programming language now it's an OP programming language at heart that's still kind of the default and that's",
    "start": "3546359",
    "end": "3552079"
  },
  {
    "text": "still the grain right that's um so you're not getting a full functional",
    "start": "3552079",
    "end": "3558319"
  },
  {
    "text": "programming experience in C and you're never going to get that go and try a functional programming language if you",
    "start": "3558319",
    "end": "3564400"
  },
  {
    "text": "want that and you'll feel how are still different when all of these things are the default right when you have to bend",
    "start": "3564400",
    "end": "3569880"
  },
  {
    "text": "over backwards to have mutable State and to you know um it's not actually that hard enough sharp because it's a",
    "start": "3569880",
    "end": "3575480"
  },
  {
    "text": "beautiful language that integrates as much object red programming as we do functional programming but that so just",
    "start": "3575480",
    "end": "3582079"
  },
  {
    "text": "to just to give these languages their due like the pure experience is is mindboggling and cool and if you go and",
    "start": "3582079",
    "end": "3588359"
  },
  {
    "text": "programming an actual functional programming language and come back to C if you ever want to come back but I hope you do but kind of hope you don't also I",
    "start": "3588359",
    "end": "3595640"
  },
  {
    "text": "don't know f is really cool um you you might be a better C programmer for it",
    "start": "3595640",
    "end": "3602319"
  },
  {
    "text": "right so so this is not to say we've absorbed the functional Paradigm we've",
    "start": "3602319",
    "end": "3607359"
  },
  {
    "text": "absorbed a lot of things from it but the pure thing is out there and and it's really cool to try it too maybe if you",
    "start": "3607359",
    "end": "3613799"
  },
  {
    "text": "do you come up with another feature that would be really cool in C you come and tell us and we can steal that one as",
    "start": "3613799",
    "end": "3619200"
  },
  {
    "text": "well okay so that's it thank you very much",
    "start": "3619200",
    "end": "3624839"
  }
]