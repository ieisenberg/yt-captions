[
  {
    "text": "the person that was supposed to be here is ill so I'm replacing him with a different talk which was a very last",
    "start": "6279",
    "end": "12360"
  },
  {
    "text": "minute change so I don't blame you if you now leave happy that you all showed up here it's always scary as a speaker",
    "start": "12360",
    "end": "20400"
  },
  {
    "text": "to you know get a last last minute session and nobody showing up all right",
    "start": "20400",
    "end": "25480"
  },
  {
    "text": "I'll start um I'm very loud or not",
    "start": "25480",
    "end": "30640"
  },
  {
    "text": "is my voice very loud it sounds very loud okay yeah I need to keep you awake because some of you actually went to the",
    "start": "30640",
    "end": "37840"
  },
  {
    "text": "uh opening dinner maybe had a couple of beers too much I didn't anyway um I'm",
    "start": "37840",
    "end": "43360"
  },
  {
    "text": "going to talk about test driv development um who is like is everybody here do net developers like just raise",
    "start": "43360",
    "end": "48760"
  },
  {
    "text": "your hands like a couple of them okay so oh the rest is doing something else managers maybe Architects something",
    "start": "48760",
    "end": "56640"
  },
  {
    "text": "like that um I'm going to share with you and I'm really bad at counting I stopped",
    "start": "56640",
    "end": "62960"
  },
  {
    "text": "counting I think it's more than 25 my tips and tricks after 15 years of practicing test driven development I'm",
    "start": "62960",
    "end": "69119"
  },
  {
    "text": "also the author of uh a little Library maybe you have heard of that fluent assertions uh which is yeah seems to be",
    "start": "69119",
    "end": "75200"
  },
  {
    "text": "reasonably popular in Ault net space uh which came from that um there's",
    "start": "75200",
    "end": "80240"
  },
  {
    "text": "interestingly enough there's another talk on tdd happening in the same uh same slot where somebody's saying that",
    "start": "80240",
    "end": "85960"
  },
  {
    "text": "you shouldn't use it or something like that well it's interesting because I have a slide about that so in my",
    "start": "85960",
    "end": "92920"
  },
  {
    "text": "experience if you go through see somebody just realized it's the wrong session no worries enjoy",
    "start": "92920",
    "end": "100759"
  },
  {
    "text": "enjoy it's confusing so has everybody seen this before the garden of hyp cycle",
    "start": "100759",
    "end": "107040"
  },
  {
    "text": "it's very cool so whenever somebody actually comes up with a new idea learns",
    "start": "107040",
    "end": "112320"
  },
  {
    "text": "a new trick a new pattern a new tool at a conference for example the first thing is you you do is you become enthusiastic",
    "start": "112320",
    "end": "118920"
  },
  {
    "text": "about it provided that sounds cool so you go back to the office you start to talk to your colleagues and they like me",
    "start": "118920",
    "end": "124880"
  },
  {
    "text": "we don't need that what problem does it solve I don't need it oh she's back cool awesome um so then what happens at some",
    "start": "124880",
    "end": "132120"
  },
  {
    "text": "point you start to become a little bit more enthusiastic you know you start to I don't know do internal presentations",
    "start": "132120",
    "end": "137760"
  },
  {
    "text": "maybe write an internal blog post maybe even go in you know open you go in the in the community you you create a plal",
    "start": "137760",
    "end": "144280"
  },
  {
    "text": "side training you write a YouTube videos about it you write blogs you go on stage and talk about tdd and how awesome it",
    "start": "144280",
    "end": "150080"
  },
  {
    "text": "this uh but then somewhere at some point you start to realize that okay I can",
    "start": "150080",
    "end": "155879"
  },
  {
    "text": "actually do this wrong or I'm actually doing it wrong or I'm running into the situation that every time I start to",
    "start": "155879",
    "end": "162159"
  },
  {
    "text": "refactor my code I to rewrite my tests you know what I don't have can say that but tdd sucks you know that that's what",
    "start": "162159",
    "end": "168200"
  },
  {
    "text": "happens and then and that's what they call the peak of inflated expectations and then you slowly go down you become",
    "start": "168200",
    "end": "174159"
  },
  {
    "text": "more negative you start to write blog post about the Dark Side of tdd or why you shouldn't practice test driven",
    "start": "174159",
    "end": "179319"
  },
  {
    "text": "development and by the way you can replace this with anything microsurfaces JavaScript or anything like that um and",
    "start": "179319",
    "end": "186120"
  },
  {
    "text": "you become so negative you do plural side trainings about like the good the bad the ugly and mostly the ugly of tdd",
    "start": "186120",
    "end": "192120"
  },
  {
    "text": "and that's what they call the thrw of disillusionment you're so disappointed you were so enthusiastic about this new",
    "start": "192120",
    "end": "198040"
  },
  {
    "text": "thing and now you realize it really is such a bad thing we should never do that anymore um I've been through this cycle",
    "start": "198040",
    "end": "204799"
  },
  {
    "text": "many times before but then you know there's light at the end of the tunnel you start to realize that every",
    "start": "204799",
    "end": "211239"
  },
  {
    "text": "principle practice tool or whatever thought has pros and cons you need to",
    "start": "211239",
    "end": "216959"
  },
  {
    "text": "understand the context on which is applies you need to understand what rules to follow what rules not to follow",
    "start": "216959",
    "end": "222319"
  },
  {
    "text": "to not be dogmatic that's what they call the plateau of productivity I mean usually it starts with a bit of",
    "start": "222319",
    "end": "228280"
  },
  {
    "text": "enlightment you realize this you know and then at some point you become productive I like to think and I will be",
    "start": "228280",
    "end": "235239"
  },
  {
    "text": "I might be proven wrong today or the next couple of weeks that I'm at the Proto productivity when it comes to tdd",
    "start": "235239",
    "end": "241959"
  },
  {
    "text": "with everything else no so every time I I put this in my face and I wonder where am I with this am I really being",
    "start": "241959",
    "end": "248599"
  },
  {
    "text": "productive do you recognize this just checking like yeah anybody right now in",
    "start": "248599",
    "end": "253640"
  },
  {
    "text": "the throw of this illusionment no of course not we're all on the plateau of productivity so to help you get to that",
    "start": "253640",
    "end": "260280"
  },
  {
    "text": "Plateau productivity uh when it deals with tdd I'm going to share you a couple of things oh by the way I forgot a",
    "start": "260280",
    "end": "265800"
  },
  {
    "text": "couple of things uh about myself this is me um actually it's already outdated I'm",
    "start": "265800",
    "end": "271440"
  },
  {
    "text": "in the do net space for 27 years I turned 50 this year I started on the cor",
    "start": "271440",
    "end": "276479"
  },
  {
    "text": "64 when I was 11 or something like that so I I I'm supposed to be nerd but I'm",
    "start": "276479",
    "end": "282400"
  },
  {
    "text": "I'm in rejection I don't think I am uh and I help companies to improve the entire software development effort I'm",
    "start": "282400",
    "end": "288320"
  },
  {
    "text": "usually play the coding architect try to all kinds of principal practices show people how to write clean code stuff",
    "start": "288320",
    "end": "294080"
  },
  {
    "text": "like that I have a couple of things uh a Blog uh coding guidelines for the last 20 years uh a couple of Open Source",
    "start": "294080",
    "end": "301360"
  },
  {
    "text": "libraries uh and of course fluent insertions um yeah that's it um if you",
    "start": "301360",
    "end": "307199"
  },
  {
    "text": "want to win a one-year license for ryer which is jet brains IDE I love that tool",
    "start": "307199",
    "end": "312680"
  },
  {
    "text": "take a nice picture say something nice about me can also be something very nasty is also cool doesn't matter on",
    "start": "312680",
    "end": "318560"
  },
  {
    "text": "Twitter uh or madon or blue sky or whatever is popular these days Facebook no probably for the old people only yeah",
    "start": "318560",
    "end": "326360"
  },
  {
    "text": "okay design for testability the first one I have one hour no clue because this is",
    "start": "326360",
    "end": "332639"
  },
  {
    "text": "a slide deck this is important nobody in their clear mind will start to create a test",
    "start": "332639",
    "end": "340319"
  },
  {
    "text": "out of the blue even though every every book about test driven development tells you that you you shall write a test",
    "start": "340319",
    "end": "348440"
  },
  {
    "text": "before you write production code doesn't work like that nobody does that you",
    "start": "348440",
    "end": "353600"
  },
  {
    "text": "start with a process which is called thinking this is kind of the cycle",
    "start": "353600",
    "end": "360199"
  },
  {
    "text": "everybody is supposed to think about okay what are the classes what are the elements in there what function",
    "start": "360199",
    "end": "365680"
  },
  {
    "text": "components exist how do things relate to each other where the responsibility fit how do things interact with each other",
    "start": "365680",
    "end": "372520"
  },
  {
    "text": "whether you do that on a physical paper or you do it on some kind of I don't know a whiteboard or you discuss it with",
    "start": "372520",
    "end": "378759"
  },
  {
    "text": "colleagues or even better you know start coding a little bit try to create a couple of classes or functions or",
    "start": "378759",
    "end": "384280"
  },
  {
    "text": "whatever language because this is this is univers univers applicable to any language by the way C typescript",
    "start": "384280",
    "end": "390479"
  },
  {
    "text": "JavaScript uh it doesn't matter PHP but you start to come up with these these ideas and and this is how I work I start",
    "start": "390479",
    "end": "397319"
  },
  {
    "text": "to create some classes I start to look at the apis I'm start to think like okay does this make sense why does this",
    "start": "397319",
    "end": "403160"
  },
  {
    "text": "method suddenly have like four or five parameters am I not creating too much coupling or did I create the wrong unit",
    "start": "403160",
    "end": "409120"
  },
  {
    "text": "here do I have to reishit that a little bit and I play around with that and then I might actually start creating a test",
    "start": "409120",
    "end": "415520"
  },
  {
    "text": "and then I go through the whole cycle so you know you write your first test you generate the stops you make sure that your test fails for the right reason um",
    "start": "415520",
    "end": "422759"
  },
  {
    "text": "you make sure the test becomes green and then you have the whole red green thing you may you maybe have heard about that",
    "start": "422759",
    "end": "428560"
  },
  {
    "text": "but you don't refactor immediately because refactoring is about identifying",
    "start": "428560",
    "end": "434840"
  },
  {
    "text": "patterns and trying to solve those or ref refresh or refactor that pattern so",
    "start": "434840",
    "end": "439960"
  },
  {
    "text": "that it actually reuses code but you don't know that if you have not seen at least I don't know three different",
    "start": "439960",
    "end": "445960"
  },
  {
    "text": "scenarios where the same implementation is used I always say it's I think it's called the rule three like if things",
    "start": "445960",
    "end": "452000"
  },
  {
    "text": "happen twice you see the same code twice it's probably coincidence if it's three or more that might be a pattern and that",
    "start": "452000",
    "end": "458080"
  },
  {
    "text": "you should could be refactored because refactoring can also lead to coupling think about that if you",
    "start": "458080",
    "end": "464560"
  },
  {
    "text": "actually start to see hey these are three I have three different implementations they're exactly the same are they are they maybe the same right",
    "start": "464560",
    "end": "471199"
  },
  {
    "text": "now maybe they change over time and they actually start to diverge trying to force yourself to keep it the same",
    "start": "471199",
    "end": "476360"
  },
  {
    "text": "implementation apply dry and I'm already going to screw up my slide deck now oh sorry I'm recorded I have to be I'm um",
    "start": "476360",
    "end": "482919"
  },
  {
    "text": "I'm mixing up my slide decks um you have to be careful about that because over",
    "start": "482919",
    "end": "488080"
  },
  {
    "text": "overuse of refactoring and dry leads to over leads to coupling which is something you want to avoid at all costs",
    "start": "488080",
    "end": "495039"
  },
  {
    "text": "so that's why I repeat a couple of times usually I just copy paste some test cases start to you know Implement them",
    "start": "495039",
    "end": "501520"
  },
  {
    "text": "again look at the scenarios and only then I'm going to look at like okay are these test cases actually the same do",
    "start": "501520",
    "end": "506680"
  },
  {
    "text": "they look the same is there something in the test case that that can refactor that's the point where I do that but I'm",
    "start": "506680",
    "end": "512159"
  },
  {
    "text": "very conservative with that because I've seen so many developers running into this situation that create all kinds of",
    "start": "512159",
    "end": "517839"
  },
  {
    "text": "Base classes and helper methods just to keep those test test methods very clean",
    "start": "517839",
    "end": "522919"
  },
  {
    "text": "and that's a good thing but then they actually start to hide the wrong things so we'll cover that later on and then",
    "start": "522919",
    "end": "528120"
  },
  {
    "text": "you start to refactor and then the whole cycle happens over and over again obviously this is not a waterfall",
    "start": "528120",
    "end": "533800"
  },
  {
    "text": "process it's an iterative process it's creative that's that it's supposed to be",
    "start": "533800",
    "end": "538920"
  },
  {
    "text": "like that that make sense okay well and then we use the test to drive the design",
    "start": "538920",
    "end": "544440"
  },
  {
    "text": "further so this is a screenshot from a pool request that I'm working on for a year already on fluent assertions where",
    "start": "544440",
    "end": "551079"
  },
  {
    "text": "I'm actually was starting to implement a couple of test cases and while doing that I started to identify all kinds of",
    "start": "551079",
    "end": "557279"
  },
  {
    "text": "additional scenarios and I didn't want to waste time on implementing those scenarios creating tests for that I just",
    "start": "557279",
    "end": "562600"
  },
  {
    "text": "wrote it down so it has become kind of a bread Crump I haven't looked at this pool request for like six months because",
    "start": "562600",
    "end": "568440"
  },
  {
    "text": "I've been busy with things I have a live and I have to do presentations and kits and everything but if if I read them I",
    "start": "568440",
    "end": "575000"
  },
  {
    "text": "literally haven't seen them in a while I immediately recognize and remember oh yeah it jogs my memory it brings back",
    "start": "575000",
    "end": "580640"
  },
  {
    "text": "all these complicated scenarios so this is what I literally do I put it in Source C check it in in my pool request",
    "start": "580640",
    "end": "586640"
  },
  {
    "text": "so it actually is available in my repo for later usage that that that's a pretty simple",
    "start": "586640",
    "end": "592279"
  },
  {
    "text": "technique because that's what you do you use the test to drive the design and that's what test driven development is",
    "start": "592279",
    "end": "598079"
  },
  {
    "text": "really about dve driving your design using the tests that's the the creu The",
    "start": "598079",
    "end": "603399"
  },
  {
    "text": "crucial element of that I hope that that resonates with you the other thing is you should",
    "start": "603399",
    "end": "609160"
  },
  {
    "text": "organize your code by capabilities or functional slices because that helps you",
    "start": "609160",
    "end": "615480"
  },
  {
    "text": "identify um natural seams in your architecture this is a nice uh picture",
    "start": "615480",
    "end": "620640"
  },
  {
    "text": "of a what some people call virtual slice architecture I basically have a couple of functional slices and I treat them as",
    "start": "620640",
    "end": "627160"
  },
  {
    "text": "separate boundaries within the system which also means that aligns really well with everything else that I'm going to",
    "start": "627160",
    "end": "632399"
  },
  {
    "text": "be talking about dependency inversion principle anybody knows solid by heart",
    "start": "632399",
    "end": "638120"
  },
  {
    "text": "oh good no I'm not going to ask you to do that but the the D in solid and by",
    "start": "638120",
    "end": "644320"
  },
  {
    "text": "the way solid itself the whole principle if you go to YouTube you'll find somebody saying solid sucks or the the",
    "start": "644320",
    "end": "652360"
  },
  {
    "text": "bad side of yeah really look it up I promise it's true but the D in solid",
    "start": "652360",
    "end": "658040"
  },
  {
    "text": "stands for dependency inversion principle which a lot of people confuse with dependency",
    "start": "658040",
    "end": "663639"
  },
  {
    "text": "injection yes dependency injection is a tool dependency inversion is actually dependency sorry the def dependency",
    "start": "663639",
    "end": "670399"
  },
  {
    "text": "inversion principle is a a way of thinking so I don't know you can see that all the way in the back but we have",
    "start": "670399",
    "end": "676320"
  },
  {
    "text": "this blue box which we call order processing which has a dependency on something an abstraction called ey store",
    "start": "676320",
    "end": "682720"
  },
  {
    "text": "orders which has a couple of methods query of t uh add of T delete of T which",
    "start": "682720",
    "end": "688160"
  },
  {
    "text": "are very generic methods right and then there's an unhibernate repository or an anti framework repository if you really",
    "start": "688160",
    "end": "694200"
  },
  {
    "text": "want to pain yourself um you see the dependency right and you see also the",
    "start": "694200",
    "end": "699480"
  },
  {
    "text": "ordering so it's almost like you have your domain layer maybe there's a presentation layer on top and then at",
    "start": "699480",
    "end": "704600"
  },
  {
    "text": "the bottom you have the data layer so who thinks the data layer is specific or",
    "start": "704600",
    "end": "710639"
  },
  {
    "text": "generic who thinks it's generic the data layer who thinks it's",
    "start": "710639",
    "end": "716560"
  },
  {
    "text": "specific who doesn't have any thoughts right now now is just waking up so okay I'll explain it to you the",
    "start": "716560",
    "end": "724880"
  },
  {
    "text": "domain layer is very sorry the data layer is very generic it has all kinds of generic methods it cannot make any",
    "start": "724880",
    "end": "730959"
  },
  {
    "text": "assumptions about what happens on top of it because dependencies go downwards it can only optimize for what actually",
    "start": "730959",
    "end": "737600"
  },
  {
    "text": "happens at runtime you cannot actually look at the data layer look at the methods and optimize it you know if you",
    "start": "737600",
    "end": "743000"
  },
  {
    "text": "know about databases you have stuff like clustered indexes non-clustered indexes you need to use that information to",
    "start": "743000",
    "end": "748480"
  },
  {
    "text": "optimize Behavior yes you can use a profile but generally the lower layers of your system are the most generic one",
    "start": "748480",
    "end": "756000"
  },
  {
    "text": "or what um uh Robert C Martin in his book calls the lower lower level",
    "start": "756000",
    "end": "762199"
  },
  {
    "text": "abstractions what the dependency verion does and by the way the methods are also usually very generic it starts with a",
    "start": "762199",
    "end": "768000"
  },
  {
    "text": "single method and then you add another a couple of parameters to it to make it you know to provide more support and it",
    "start": "768000",
    "end": "773199"
  },
  {
    "text": "becomes worse and worse and worse dep pendency inversion principle actually reverses that well yeah that's what the",
    "start": "773199",
    "end": "779000"
  },
  {
    "text": "dependency of the reversion part come from so the big difference is is now we",
    "start": "779000",
    "end": "784040"
  },
  {
    "text": "have still we still have an abstraction here but the abstraction is actually part and owned by the domain layer hence",
    "start": "784040",
    "end": "791800"
  },
  {
    "text": "the coloring I don't know if if you're color blind you can see the difference but the top part is blue so even though it looks the same",
    "start": "791800",
    "end": "799079"
  },
  {
    "text": "it's not because every method on abstraction is very concrete very specific for that particular module the",
    "start": "799079",
    "end": "805240"
  },
  {
    "text": "aut processing module and now what you'll see is the dependency will actually go upwards so the lower level",
    "start": "805240",
    "end": "812880"
  },
  {
    "text": "of your system your data layer takes a dependency on the higher level which is a completely different thing if you look",
    "start": "812880",
    "end": "819920"
  },
  {
    "text": "at it from a codess perspective you're like what's the big deal here but the the idea the thing the mindset behind",
    "start": "819920",
    "end": "825639"
  },
  {
    "text": "that is really crucial this it makes a big difference this also reduces the need for uh complicated mocking",
    "start": "825639",
    "end": "832360"
  },
  {
    "text": "strategies because these methods are usually very simple very very clear very well well phrased very ref",
    "start": "832360",
    "end": "839560"
  },
  {
    "text": "focused that's is what makes difference so the dependency inversion principle is something that I absolutely encourage",
    "start": "839560",
    "end": "845680"
  },
  {
    "text": "you to use all over the place really and and if you want to talk about it later on I'll be around the whole day or",
    "start": "845680",
    "end": "851040"
  },
  {
    "text": "tomorrow as well um as I said earlier you have all these slices and as I",
    "start": "851040",
    "end": "857320"
  },
  {
    "text": "already mentioned that they will they will kind of become the natural seams in your system this also helps applying dry",
    "start": "857320",
    "end": "864920"
  },
  {
    "text": "at the right level dry don't repeat yourself right which I'm doing continuously in this talk I know but",
    "start": "864920",
    "end": "870720"
  },
  {
    "text": "it's early um so essentially what you see here now is that we have for example a duplicate do I have you I don't have",
    "start": "870720",
    "end": "877399"
  },
  {
    "text": "animations here um for example a duplicated surface you see them in every slice because dry leads to coupling dry",
    "start": "877399",
    "end": "885480"
  },
  {
    "text": "makes it also very hard to test things what I'm doing here is actually saying okay you know what I'm just duplicating",
    "start": "885480",
    "end": "891920"
  },
  {
    "text": "all over the place I don't care every slice for me is a is an internal seam in my system I do not want cop",
    "start": "891920",
    "end": "899440"
  },
  {
    "text": "you know I want to control that so I'm very careful to apply dry and I make sure that I basically duplicate code",
    "start": "899440",
    "end": "905279"
  },
  {
    "text": "across the modules across these fcal slices I see people wonder like but you're duplicating code that means you",
    "start": "905279",
    "end": "911040"
  },
  {
    "text": "have to fix bucks in three different places I hear that all the time that never happened to me and I'm doing this",
    "start": "911040",
    "end": "917399"
  },
  {
    "text": "job for 27 years um not saying that that means anything because I've only doing TD for 15 years but it it never happens",
    "start": "917399",
    "end": "924279"
  },
  {
    "text": "to me because what happens is that duplicated code is quite often",
    "start": "924279",
    "end": "929319"
  },
  {
    "text": "much more simple than all this generic code that you put in your your I don't know your common your helpers your",
    "start": "929319",
    "end": "934800"
  },
  {
    "text": "infrastructure project and that's the real thing here if you make things simple keep keep keep think what is it",
    "start": "934800",
    "end": "942240"
  },
  {
    "text": "keep keep everything simple stupid or something what was it kiss kiss keep keep it simple stupid of course um I",
    "start": "942240",
    "end": "949839"
  },
  {
    "text": "didn't have my coffee yet that's here as well if you just duplicate it quite",
    "start": "949839",
    "end": "955199"
  },
  {
    "text": "often that that duplicated code is much easier to understand and so there's less chance of bucks however there's never",
    "start": "955199",
    "end": "962959"
  },
  {
    "text": "one end of the scale or the other end of the scale it's always in in depends there's always code that you do want to",
    "start": "962959",
    "end": "968839"
  },
  {
    "text": "centralize especially if it's complicated and that's why you see for instance this blue bar at the bottom C",
    "start": "968839",
    "end": "974920"
  },
  {
    "text": "where there's a centralized service so I'm not dogmatic about it but because of my own painful history and I love Legacy",
    "start": "974920",
    "end": "981720"
  },
  {
    "text": "code bases I have another talk about this next this Friday tomorrow at same time same room by the way without being",
    "start": "981720",
    "end": "987000"
  },
  {
    "text": "shared with another speaker um what I was going to say I forgot see",
    "start": "987000",
    "end": "993199"
  },
  {
    "text": "that's what happens help me I don't remember anymore okay doesn't matter we go on so",
    "start": "993199",
    "end": "1001079"
  },
  {
    "text": "um the other thing that almost everybody struggles with is finding the right",
    "start": "1001079",
    "end": "1006120"
  },
  {
    "text": "scope of testing so I'll show you something there is something called I'll",
    "start": "1006120",
    "end": "1012720"
  },
  {
    "text": "I can even zoom in a little bit here this is a piece of code it's called the database manager and has a has a method",
    "start": "1012720",
    "end": "1018279"
  },
  {
    "text": "called ensure table exists right and you pass in a table",
    "start": "1018279",
    "end": "1024199"
  },
  {
    "text": "name and what does it do it ensures that the table exists very obvious this is the implementation of that I don't know",
    "start": "1024199",
    "end": "1031360"
  },
  {
    "text": "if you can read this this is a very ancient language like it's called uml unified modeling language it's very old",
    "start": "1031360",
    "end": "1038760"
  },
  {
    "text": "only the people without hair or gray hair can still read this but it basically means that the database",
    "start": "1038760",
    "end": "1044199"
  },
  {
    "text": "manager is the one that's in charge but it delegates the responsibil ities to I",
    "start": "1044199",
    "end": "1049919"
  },
  {
    "text": "I don't know I database adapter some kind of abstraction and it has one implementation the SQL database adapter",
    "start": "1049919",
    "end": "1057160"
  },
  {
    "text": "but because you have an adapter and you've read the design patterns book and you know you've all had it on your your desk like a long time ago um you also",
    "start": "1057160",
    "end": "1064919"
  },
  {
    "text": "need a factory for that because yeah you need something to create a concrete implementation of that abstraction so",
    "start": "1064919",
    "end": "1070080"
  },
  {
    "text": "now you have two abstractions uh and of course you need to have an implementation for that so now my question is what is the unit",
    "start": "1070080",
    "end": "1077400"
  },
  {
    "text": "here what's the unit if you have to create test for this piece of code because you haven't practiced tdd what",
    "start": "1077400",
    "end": "1083720"
  },
  {
    "text": "is the unit is it the database manager itself and then you I don't know you",
    "start": "1083720",
    "end": "1089320"
  },
  {
    "text": "need to probably create a mock implementation of the adapter but yeah since you also need the factory you also",
    "start": "1089320",
    "end": "1094600"
  },
  {
    "text": "need to create a mock implementation of the adapter Factory and then the mock implementation actually returns a mock",
    "start": "1094600",
    "end": "1100280"
  },
  {
    "text": "of the other one yeah yeah people recognize that isn't that",
    "start": "1100280",
    "end": "1106159"
  },
  {
    "text": "stupid why now so the question is what does this data base manager actually do",
    "start": "1106159",
    "end": "1112360"
  },
  {
    "text": "what does the implementation of database manager and sure table exist do do just",
    "start": "1112360",
    "end": "1117400"
  },
  {
    "text": "imagine one line adapter. Ure table assist so it's not doing anything if you",
    "start": "1117400",
    "end": "1124360"
  },
  {
    "text": "if you test code like that it's actually just you know you're testing whether it's passing parameters from one mock to",
    "start": "1124360",
    "end": "1129880"
  },
  {
    "text": "the other it doesn't make sense so I'm testing this whole thing as one unit",
    "start": "1129880",
    "end": "1135640"
  },
  {
    "text": "really yeah completely makes sense to me I hope hope it does for you as well and I explain this to you so this is an",
    "start": "1135640",
    "end": "1141880"
  },
  {
    "text": "example from a real life code base created by a software development okay people already falling asleep um um from",
    "start": "1141880",
    "end": "1149720"
  },
  {
    "text": "a real life code base written by an architect with 20 years of experience and ask him like why do you need these",
    "start": "1149720",
    "end": "1155559"
  },
  {
    "text": "adapters he said well it's solid it's clean code you know it's a design",
    "start": "1155559",
    "end": "1160840"
  },
  {
    "text": "pattern we need to practice design P said no we don't need to said so ask him like okay how many implementations of",
    "start": "1160840",
    "end": "1167640"
  },
  {
    "text": "this effect do you have or this adapter do you have uh one okay and how many expect how many",
    "start": "1167640",
    "end": "1174480"
  },
  {
    "text": "implementation do you expect in time uh one this happens and I'm pretty sure you",
    "start": "1174480",
    "end": "1181400"
  },
  {
    "text": "recognize this this happens everywhere that's so we actually introducing unnecessary abstractions and you don't",
    "start": "1181400",
    "end": "1187679"
  },
  {
    "text": "need that but my point really is this is a unit because everything else is an",
    "start": "1187679",
    "end": "1192960"
  },
  {
    "text": "implementation detail I have one more example this one yeah you don't have to",
    "start": "1192960",
    "end": "1199280"
  },
  {
    "text": "be able to read it all the way in the back but there's a lot of components here a lot of classes here this is oh I",
    "start": "1199280",
    "end": "1205320"
  },
  {
    "text": "can actually zoom in a little bit I don't know if you've used fluent assertions but there's a method that you",
    "start": "1205320",
    "end": "1211120"
  },
  {
    "text": "can use that can say what you can use to say I want this I want to verify in my unit test that this event is equivalent",
    "start": "1211120",
    "end": "1218520"
  },
  {
    "text": "to another object in this case anonymous anonymous type with with one property which is a very powerful feature and uh",
    "start": "1218520",
    "end": "1226360"
  },
  {
    "text": "because yeah this object this case it's called event I have no clue what it is can be anything can be a complicated",
    "start": "1226360",
    "end": "1232280"
  },
  {
    "text": "object that has reference to other objects contains lists and dictionaries and whatever else so the implementation",
    "start": "1232280",
    "end": "1237840"
  },
  {
    "text": "behind that that's a part of the implementation that's just a subset of the implementation who actually thinks that",
    "start": "1237840",
    "end": "1245159"
  },
  {
    "text": "you should test this all these individual classes separately of course nobody's okay okay",
    "start": "1245159",
    "end": "1252919"
  },
  {
    "text": "good you do it just to challenge me I know that so if I would have done this",
    "start": "1252919",
    "end": "1258520"
  },
  {
    "text": "because 13 years ago I started with this method this B equivalent 2 do you think it actually consisted out of the all",
    "start": "1258520",
    "end": "1264480"
  },
  {
    "text": "these classes of course not initially it was a very simp impementation it was just one method with a couple of lines",
    "start": "1264480",
    "end": "1271240"
  },
  {
    "text": "of code and then over time I added more capabilities to it and that code became bigger what do you do when the code",
    "start": "1271240",
    "end": "1276960"
  },
  {
    "text": "becomes more difficult to maintain refector did it change my tests no",
    "start": "1276960",
    "end": "1283320"
  },
  {
    "text": "because I was actually using the B equivalent method which was the real one that really that's really important every everything else was just you know",
    "start": "1283320",
    "end": "1290120"
  },
  {
    "text": "how I re refactored it and reimplemented it are am I using design patterns yes I",
    "start": "1290120",
    "end": "1295240"
  },
  {
    "text": "am but that's because I use Des design patterns as a way to explain to people",
    "start": "1295240",
    "end": "1301039"
  },
  {
    "text": "what kind of design to expect which is the only value of design patterns it's just a name if I tell you I'm using the",
    "start": "1301039",
    "end": "1307840"
  },
  {
    "text": "strategy pattern I suppose that everybody knows kind of has a feeling what it means if I say it's a Singleton",
    "start": "1307840",
    "end": "1314000"
  },
  {
    "text": "everybody knows what it is that's the value of design patterns everything else it's not not important so I'm saying",
    "start": "1314000",
    "end": "1320799"
  },
  {
    "text": "that this whole thing for me is one unit because there's no reason why I would ever want to test this individually in",
    "start": "1320799",
    "end": "1327520"
  },
  {
    "text": "fact if I would have done that I would have to rewrite all my test every time I refected something and that is bad",
    "start": "1327520",
    "end": "1333559"
  },
  {
    "text": "because that's what people what makes people actually hate tddd because they keep re rewriting their test so that's",
    "start": "1333559",
    "end": "1339600"
  },
  {
    "text": "your smell if you recognize yourself and see that you have to rewrite your test every time that is the signal that you",
    "start": "1339600",
    "end": "1345960"
  },
  {
    "text": "may be doing it wrong or at least there's room for improvement because again it's not there's no black and",
    "start": "1345960",
    "end": "1351880"
  },
  {
    "text": "white sometimes you have to test smaller now what is cool about this",
    "start": "1351880",
    "end": "1357159"
  },
  {
    "text": "whole functional slice that I talked about is that it actually also creates not only a natural Seam for applying dry",
    "start": "1357159",
    "end": "1363679"
  },
  {
    "text": "but also becomes almost the natural candidate for unit testing so I actually treat uh individual slices for like this",
    "start": "1363679",
    "end": "1371520"
  },
  {
    "text": "this could be an entire unit HTTP requests coming in connecting with the database applying all the domain logic",
    "start": "1371520",
    "end": "1378360"
  },
  {
    "text": "that could be a unit I've I've done that and that works really well um the same with the other slice",
    "start": "1378360",
    "end": "1384440"
  },
  {
    "text": "and then maybe within that there's a surface that I would test separately because it's a small reusable piece of",
    "start": "1384440",
    "end": "1390640"
  },
  {
    "text": "component within that scope that I actually want to test separately um another surface here or",
    "start": "1390640",
    "end": "1397720"
  },
  {
    "text": "this slce here as well and of course the stuff at the bottom which is really supposed to be generic and probably comp",
    "start": "1397720",
    "end": "1404240"
  },
  {
    "text": "complicated I also test it separately this works really well this is this changed when I started doing this it",
    "start": "1404240",
    "end": "1410200"
  },
  {
    "text": "completely changed the way I look at tdd and the design and everything so I treat everything now I start to organize",
    "start": "1410200",
    "end": "1415559"
  },
  {
    "text": "everything in a in a functional way don't worry if it it doesn't get if",
    "start": "1415559",
    "end": "1421520"
  },
  {
    "text": "it does it doesn't click with you yet it will hopefully and otherwise you can blame me so align your test scope with",
    "start": "1421520",
    "end": "1428679"
  },
  {
    "text": "that but sometimes it's also completely okay to test a little bit smaller that's that it's always happening again don't",
    "start": "1428679",
    "end": "1434880"
  },
  {
    "text": "be dogmatic use it as a Uris test bigger you know align it with your",
    "start": "1434880",
    "end": "1439960"
  },
  {
    "text": "architectural slices with your internal boundaries but don't don't worry that you sometimes have to test smaller like",
    "start": "1439960",
    "end": "1446000"
  },
  {
    "text": "here this critical component which is inside a functional slice I might even test the individual parts that's",
    "start": "1446000",
    "end": "1451799"
  },
  {
    "text": "completely okay sometimes you have to do that so the rule of thump here is that",
    "start": "1451799",
    "end": "1457840"
  },
  {
    "text": "things that are reusable should be tested separately no correction things that are designed to",
    "start": "1457840",
    "end": "1465279"
  },
  {
    "text": "be reusable should be tested separately because everything is potentially reusable but then generally the whole",
    "start": "1465279",
    "end": "1472279"
  },
  {
    "text": "idea of reusable code I think it's kind of flawed it's very difficult to reach that point so if you actually intended",
    "start": "1472279",
    "end": "1479240"
  },
  {
    "text": "this piece of code or this a group of classes to be reusable test it separately otherwise treat it as an",
    "start": "1479240",
    "end": "1485919"
  },
  {
    "text": "implementation detail of a biger scope everybody's thinking like okay",
    "start": "1485919",
    "end": "1492039"
  },
  {
    "text": "wait a second yes now that also means that if you for example organize your code in a functional structure",
    "start": "1492039",
    "end": "1498640"
  },
  {
    "text": "that the folders which are side by side adjacent of each other you should also see them as separate boundaries so is",
    "start": "1498640",
    "end": "1504840"
  },
  {
    "text": "anybody using a net couple of people uh do you have your folder structures like",
    "start": "1504840",
    "end": "1510720"
  },
  {
    "text": "views controllers repositories that kind of stuff who has that yeah um it's",
    "start": "1510720",
    "end": "1515840"
  },
  {
    "text": "probably not because you did that but because Microsoft actually did that by default I think that's wrong because if",
    "start": "1515840",
    "end": "1521960"
  },
  {
    "text": "you look at that code if I'm actually I have no experience with your code base if I'm going into that code base I see folders like fuse controllers I don't",
    "start": "1521960",
    "end": "1529120"
  },
  {
    "text": "know repositories fuel models whatever pattern you use and then I'm wondering okay but what belongs together Which F",
    "start": "1529120",
    "end": "1536240"
  },
  {
    "text": "belongs to which Fu model because there's usually some kind of onetoone correlation but it's not obvious from",
    "start": "1536240",
    "end": "1541640"
  },
  {
    "text": "the codebase so if there's no unit testing yeah very low code coverage and I have to introduce unit testing I like",
    "start": "1541640",
    "end": "1548200"
  },
  {
    "text": "but wait a second this is in a different folder I cannot actually assume that this F model is always used by this few",
    "start": "1548200",
    "end": "1555039"
  },
  {
    "text": "so you know what I'm actually going to use abstractions and mocking and you find these eye interfaces all over the",
    "start": "1555039",
    "end": "1561559"
  },
  {
    "text": "place that's a signal because you structured your code in a technical way and that never leads to the right",
    "start": "1561559",
    "end": "1567399"
  },
  {
    "text": "solution so always group things together it makes everything so much easier",
    "start": "1567399",
    "end": "1572720"
  },
  {
    "text": "people will understand your code base much easier again I'm repeating myself which I shouldn't is you can align hey",
    "start": "1572720",
    "end": "1579360"
  },
  {
    "text": "dry with that your unit testing scope all of that becomes completely obvious to you I don't know if you've heard",
    "start": "1579360",
    "end": "1584840"
  },
  {
    "text": "about the term uh the screaming architecture which literally means you look at code bases and you immediately",
    "start": "1584840",
    "end": "1590520"
  },
  {
    "text": "see the architecture behind that that is what you want to achieve I'm not saying that's simple because otherwise I",
    "start": "1590520",
    "end": "1596480"
  },
  {
    "text": "wouldn't be a consultant but still what else well um another",
    "start": "1596480",
    "end": "1602520"
  },
  {
    "text": "example um asp.net if you build an htpn point I don't call it the rest API",
    "start": "1602520",
    "end": "1609080"
  },
  {
    "text": "because it's going to lead to a necessary debate but an HTP API uh in net you do that using a",
    "start": "1609080",
    "end": "1616159"
  },
  {
    "text": "controller or if you're really fancy with a slightly different structure with minimal apis but in principle there's a",
    "start": "1616159",
    "end": "1621559"
  },
  {
    "text": "controller that controller has a method usually the name of the method and there's some attributes on top of it um",
    "start": "1621559",
    "end": "1628080"
  },
  {
    "text": "if you create test for that what do you do well it's class you create an instance of that class like here you can",
    "start": "1628080",
    "end": "1635960"
  },
  {
    "text": "see that pretty small but you have controller. get counts per state with a country",
    "start": "1635960",
    "end": "1641760"
  },
  {
    "text": "code so you literally create uh here a oh doesn't work like that it's too",
    "start": "1641760",
    "end": "1647200"
  },
  {
    "text": "farward cheap cheap uh AliExpress thing oh yeah I'm",
    "start": "1647200",
    "end": "1654320"
  },
  {
    "text": "back so what a lot of people have seen doing it is to literally create an instance of the controller class and",
    "start": "1654320",
    "end": "1660240"
  },
  {
    "text": "then call the the method on it just from a unit test but then I wonder like but wait a second a controller is just an",
    "start": "1660240",
    "end": "1667480"
  },
  {
    "text": "implementation detail if you're adopting newer versions of do net you might actually want to adopt minimal API or",
    "start": "1667480",
    "end": "1674120"
  },
  {
    "text": "use something else in the past we had other open source libraries for that like l those are implementation details what is",
    "start": "1674120",
    "end": "1680720"
  },
  {
    "text": "the only entry point in that piece of code the HTTP request so you really want",
    "start": "1680720",
    "end": "1687039"
  },
  {
    "text": "to send an HTP request to your I don't know component let's call it like that",
    "start": "1687039",
    "end": "1692120"
  },
  {
    "text": "including headers about you know what kind of serialization you expect and what you expect back is headers about",
    "start": "1692120",
    "end": "1699080"
  },
  {
    "text": "you know HTP codes like is it a bad request if it's a 200 okay maybe it returns caching headers that is the real",
    "start": "1699080",
    "end": "1705919"
  },
  {
    "text": "service area and then is what you should be testing unfortunately I suppose most",
    "start": "1705919",
    "end": "1711559"
  },
  {
    "text": "people are somewhere in the net space that is Trivial in net it's pretty easy to create an entire application",
    "start": "1711559",
    "end": "1718320"
  },
  {
    "text": "including the HTP server run it in process without without touching the network layer and you can send an HTP",
    "start": "1718320",
    "end": "1724120"
  },
  {
    "text": "request that's what you should do I have plenty examples on my op on the on the",
    "start": "1724120",
    "end": "1729200"
  },
  {
    "text": "on my GI up repos if you're interested but I'm literally calling get a sync",
    "start": "1729200",
    "end": "1734600"
  },
  {
    "text": "with a full URL because that's part of the contract that that is the service area the URL the query parameters that's",
    "start": "1734600",
    "end": "1740960"
  },
  {
    "text": "all part that's what you're actually doing here so that's what you want to see that's important don't go through a",
    "start": "1740960",
    "end": "1747159"
  },
  {
    "text": "back door into the database for example don't do that use the service",
    "start": "1747159",
    "end": "1752799"
  },
  {
    "text": "area the slides will be on the internet and and I kind of alluded to that",
    "start": "1753200",
    "end": "1759159"
  },
  {
    "text": "earlier it's completely fine to include the database in your tests you can even",
    "start": "1759159",
    "end": "1764399"
  },
  {
    "text": "call them unit tests because you made a conscious decision or I did that my unit is a little bit bigger but it's still",
    "start": "1764399",
    "end": "1771039"
  },
  {
    "text": "unit and I but wait a second database isn't that an integration test it's slow",
    "start": "1771039",
    "end": "1776120"
  },
  {
    "text": "no because it's 2023 almost 2024 we can now create as part of our unit test",
    "start": "1776120",
    "end": "1782640"
  },
  {
    "text": "create a Docker container running Linux and SQL surf if you want to and it will be lightening fast completely",
    "start": "1782640",
    "end": "1789159"
  },
  {
    "text": "independent of a test will not cause any side effects it complies to all the traditional you know rules of what unit",
    "start": "1789159",
    "end": "1796159"
  },
  {
    "text": "test should entail it just works it's beautiful this is an example of I think it's called test containers forn net I",
    "start": "1796159",
    "end": "1802480"
  },
  {
    "text": "think actually it is and it will just spin up a container at the beginning of a set of tests",
    "start": "1802480",
    "end": "1807640"
  },
  {
    "text": "execute your test in order sequentially in the end clean it up and if you use something more modern like I don't know",
    "start": "1807640",
    "end": "1813559"
  },
  {
    "text": "Raven DB or mongodb they all have inmemory implementations which are 100% compliant with the production",
    "start": "1813559",
    "end": "1819080"
  },
  {
    "text": "environment that's what I would use makes everything so easy the example with the database manager that I showed",
    "start": "1819080",
    "end": "1825159"
  },
  {
    "text": "you earlier where the person was actually testing mocks interaction with mocks perfect because the only value or",
    "start": "1825159",
    "end": "1831919"
  },
  {
    "text": "sorry the only responsibility thinking about single responsibility principle of the database manager",
    "start": "1831919",
    "end": "1839320"
  },
  {
    "text": "is no nobody to manage the database so yeah then your test should also deal",
    "start": "1839320",
    "end": "1845799"
  },
  {
    "text": "with the database because what else are you testing them well this is a a more simple",
    "start": "1845799",
    "end": "1852480"
  },
  {
    "text": "example uh you do want to make it clear what's the range part you know the entry criteria",
    "start": "1852480",
    "end": "1857760"
  },
  {
    "text": "what's the ACT what is the test actually doing what method is it exercising or what ATP request is sending and what is",
    "start": "1857760",
    "end": "1864200"
  },
  {
    "text": "it asserting asserting so I typically use this arrange act assert everywhere you wonder if your test are really clean",
    "start": "1864200",
    "end": "1870880"
  },
  {
    "text": "do you need that yeah probably not but this is some of the areas where I'm a little bit dogmatic because I noticed",
    "start": "1870880",
    "end": "1876639"
  },
  {
    "text": "that it helps younger people understand what's happening um but sometimes it's also",
    "start": "1876639",
    "end": "1882000"
  },
  {
    "text": "totally okay to adopt a more bdd style test it is not Behavior driven development as it was initially meant to",
    "start": "1882000",
    "end": "1889200"
  },
  {
    "text": "because that involves uh business people which are typically not involved in writing automated tests at this level",
    "start": "1889200",
    "end": "1895279"
  },
  {
    "text": "but this is an example of using chill you don't need to be able to read everything you can look it up later on but where I'm actually using a different",
    "start": "1895279",
    "end": "1901639"
  },
  {
    "text": "style because the the the the piece of code or the the the component that I'm testing is actually much more",
    "start": "1901639",
    "end": "1907480"
  },
  {
    "text": "orchestrational by Nature it interacts with all kinds of different components and I really want to test that",
    "start": "1907480",
    "end": "1913159"
  },
  {
    "text": "interaction between it and sometimes or often times it's actually a I'm doing one act but that act triggers multiple",
    "start": "1913159",
    "end": "1919880"
  },
  {
    "text": "different operations interactions with other parts of the system in that case a more bdd style testing is is better or",
    "start": "1919880",
    "end": "1926200"
  },
  {
    "text": "can be better again it's an option uh what else yeah I already",
    "start": "1926200",
    "end": "1931600"
  },
  {
    "text": "alluded to that as well don't bother trying to identify or Define what a unit",
    "start": "1931600",
    "end": "1937240"
  },
  {
    "text": "integration test I did because I thought like oh this this miscommunication I need to write it down on confidence you",
    "start": "1937240",
    "end": "1943399"
  },
  {
    "text": "know try to Define this what is a unit test it doesn't matter you know I uh I had a colleague that",
    "start": "1943399",
    "end": "1950159"
  },
  {
    "text": "that kind of called it I think it was called an appropriately sized test it doesn't you know come out of that that",
    "start": "1950159",
    "end": "1956519"
  },
  {
    "text": "smoothly so I just call them automated test it's just a test doesn't matter whether it's a unit integration it",
    "start": "1956519",
    "end": "1962120"
  },
  {
    "text": "matters that you thought about the scope of the test and it also matters that you understand that there's different levels",
    "start": "1962120",
    "end": "1968039"
  },
  {
    "text": "of testing you have small Scopes you have bigger Scopes you have UI test you know you remember the pyramid this still",
    "start": "1968039",
    "end": "1973720"
  },
  {
    "text": "applies I'm not challenging any of that I'm just saying don't bother about the term it's just",
    "start": "1973720",
    "end": "1980240"
  },
  {
    "text": "testing some some guidelines well write your test like you write your production code assuming that you actually write",
    "start": "1980240",
    "end": "1987320"
  },
  {
    "text": "production code that you care about so the same thing applies naming",
    "start": "1987320",
    "end": "1992720"
  },
  {
    "text": "documentation if you want if you do that uh using all kinds of analyzers like additor config for code layouts or Russ",
    "start": "1992720",
    "end": "2000240"
  },
  {
    "text": "analyzers to to make sure you don't make stupid mistakes that applies to test code as well it is first class citizen",
    "start": "2000240",
    "end": "2006039"
  },
  {
    "text": "in fact if you practice tdd it's very likely that at least 50% of your entire",
    "start": "2006039",
    "end": "2012279"
  },
  {
    "text": "code base is test test code that's quite normal and your manager will say but isn't that a waste of time yeah try to",
    "start": "2012279",
    "end": "2018639"
  },
  {
    "text": "put something in production without tests for me it's like driving without seat belt I don't know if it's common in",
    "start": "2018639",
    "end": "2023880"
  },
  {
    "text": "Portugal but in the Netherlands it's not well it's not supposed to be it's it's real really uncomfortable if I have to",
    "start": "2023880",
    "end": "2030080"
  },
  {
    "text": "deal with a codebase without test and this is by the way what I'm talking about what I'm going to be talking about tomorrow at the same slot because I've",
    "start": "2030080",
    "end": "2037159"
  },
  {
    "text": "dealt with a lot of Legacy code uh by the way Legacy code is also stuff that I wrote last week just for the record and",
    "start": "2037159",
    "end": "2044159"
  },
  {
    "text": "the same that you wrote this is the ultimate promise of",
    "start": "2044159",
    "end": "2049520"
  },
  {
    "text": "tdd that you can actually use your tests as documentation I believe it's true all",
    "start": "2049520",
    "end": "2055240"
  },
  {
    "text": "of it like if I use it my look at my own open source project flu insertion uh we have like 97% code",
    "start": "2055240",
    "end": "2062079"
  },
  {
    "text": "coverage it's very high unrealistically high but it's because all these trior",
    "start": "2062079",
    "end": "2067280"
  },
  {
    "text": "love to increase the code coverage and we use mutation testing and stuff like that but the point is every test that I",
    "start": "2067280",
    "end": "2073320"
  },
  {
    "text": "wrote that I wrote that I wrote myself I treat that as an example of how you can use the library so quite often if I get",
    "start": "2073320",
    "end": "2080440"
  },
  {
    "text": "questions on stack Overflow well not anymore because stof flow is not used now we have ai but never I get questions",
    "start": "2080440",
    "end": "2086760"
  },
  {
    "text": "um hope I didn't insult anybody that works at stof flow but um what oh yeah",
    "start": "2086760",
    "end": "2093320"
  },
  {
    "text": "so quite often I get questions over slack over email on Twitter something I quite often the first thing as I do is",
    "start": "2093320",
    "end": "2099280"
  },
  {
    "text": "go to the examples to see okay how can I actually do that what was the the API that I supported for that and then I",
    "start": "2099280",
    "end": "2105200"
  },
  {
    "text": "sent them a link to the particular test case because that is actually the best explanation of how the thing is supposed",
    "start": "2105200",
    "end": "2110720"
  },
  {
    "text": "to work also when I get a pool request to review generally also in my projects",
    "start": "2110720",
    "end": "2116119"
  },
  {
    "text": "the first thing as I do is actually go to the tests to try to understand okay what is the scope what is this thing",
    "start": "2116119",
    "end": "2122000"
  },
  {
    "text": "supposed to do what are the semantics what kind of behavior is it supposed to expose because that helps me understand",
    "start": "2122000",
    "end": "2127599"
  },
  {
    "text": "what's happening and also identifies it helps me identify missing scenarios hey did you actually think of when what",
    "start": "2127599",
    "end": "2133800"
  },
  {
    "text": "happens if you call this method before that other method is that valid you know or if it's an HTP request are you",
    "start": "2133800",
    "end": "2140480"
  },
  {
    "text": "actually returning the right um HTP HTP error code like if I sent you a message",
    "start": "2140480",
    "end": "2146800"
  },
  {
    "text": "that is technically correct is just functionally at that point in the wrong state do you send me a bad request or do",
    "start": "2146800",
    "end": "2153079"
  },
  {
    "text": "I get something Bel like is it 207 conflict or something like that that that is what I think about I treat them",
    "start": "2153079",
    "end": "2159640"
  },
  {
    "text": "as documentation and you should do as well also I don't know if you're in Ault",
    "start": "2159640",
    "end": "2166319"
  },
  {
    "text": "net space but it's there seems to be some kind of common thing where you take a class and then create an interface",
    "start": "2166319",
    "end": "2172960"
  },
  {
    "text": "behind that put an eye in front of it for everything that is weird you can",
    "start": "2172960",
    "end": "2178400"
  },
  {
    "text": "totally inject concrete classes that is completely normal every dependency injection framework supports that you",
    "start": "2178400",
    "end": "2184599"
  },
  {
    "text": "don't need interfaces in fact I would say that if you introduce interface like that you might be on the wrong path you",
    "start": "2184599",
    "end": "2192240"
  },
  {
    "text": "might not think again hard enough about what is your internal boundary yeah but I need to be able to create mocks out of",
    "start": "2192240",
    "end": "2198319"
  },
  {
    "text": "that no you don't if you start to create a little bit of bigger scope understand that things belong together half of the",
    "start": "2198319",
    "end": "2205079"
  },
  {
    "text": "time you don't need mocks and you don't need that interface it's unnecessary abstractions unless you use role based",
    "start": "2205079",
    "end": "2212079"
  },
  {
    "text": "interfaces which is a different thing which by the way is the eye in solid",
    "start": "2212079",
    "end": "2217640"
  },
  {
    "text": "interface segregation pattern no yes no oh now I'm lost myself yes the inter",
    "start": "2217640",
    "end": "2224480"
  },
  {
    "text": "interface segregation principle it's separating interfaces so they represent",
    "start": "2224480",
    "end": "2229520"
  },
  {
    "text": "what they're supposed to do not what they what the implementation need behind",
    "start": "2229520",
    "end": "2235040"
  },
  {
    "text": "that but it doesn't mean that mocking is bad no mocking is very useful but within",
    "start": "2236079",
    "end": "2242160"
  },
  {
    "text": "boundaries so you see here example that between the two left slices you can totally use mocking because they",
    "start": "2242160",
    "end": "2248160"
  },
  {
    "text": "different boundaries and you don't want to create coupling between them so between those you do have interfaces or",
    "start": "2248160",
    "end": "2254680"
  },
  {
    "text": "abstractions or some other way of decoupling the same here between the other slices and maybe here as well",
    "start": "2254680",
    "end": "2261079"
  },
  {
    "text": "between the shared services they probably have an interface um but inside no you don't",
    "start": "2261079",
    "end": "2266920"
  },
  {
    "text": "need to if you test bigger you don't need mocking and what's even worse and I",
    "start": "2266920",
    "end": "2272440"
  },
  {
    "text": "already mentioned it earlier don't return mocks for mocks if you do that and again it's not always bad but it's",
    "start": "2272440",
    "end": "2279440"
  },
  {
    "text": "always bad so don't do that if you see that you start to rle yourself like what do this dude at the NDC important",
    "start": "2279440",
    "end": "2285400"
  },
  {
    "text": "mention something about mocking and not using mocking and stuff like that and again I'm not saying these are not Rules",
    "start": "2285400",
    "end": "2291240"
  },
  {
    "text": "by the way and this is just a risk I want you I would like that you start to think about this thing if you didn't",
    "start": "2291240",
    "end": "2296680"
  },
  {
    "text": "already do that and completely agree with me that would be perfect of course um this is one of the most",
    "start": "2296680",
    "end": "2303160"
  },
  {
    "text": "important rules that I follow or principles that I follow write tests hide things that are not important for",
    "start": "2303160",
    "end": "2311240"
  },
  {
    "text": "that specific test okay so for",
    "start": "2311240",
    "end": "2316560"
  },
  {
    "text": "example I have I use the test data Builder aot so if you build HTP tests",
    "start": "2316560",
    "end": "2322839"
  },
  {
    "text": "tests that actually interact with an HTTP pipeline so you're going to send HTTP requests there's usually quite some",
    "start": "2322839",
    "end": "2328680"
  },
  {
    "text": "Plumbing needed to spin up the HTTP server in net you know create the Builder use the web Builder register all",
    "start": "2328680",
    "end": "2335400"
  },
  {
    "text": "the the services there's quite a lot of noise that noise is not important for",
    "start": "2335400",
    "end": "2340800"
  },
  {
    "text": "the test right except if you have a test that is actually about making sure that",
    "start": "2340800",
    "end": "2346280"
  },
  {
    "text": "all the Tendencies have been registered correctly but most of the other tests you don't want that in that case using",
    "start": "2346280",
    "end": "2351359"
  },
  {
    "text": "something like a test data Builder that will do that for you is a very nice way of doing it so in this case in my test I",
    "start": "2351359",
    "end": "2358560"
  },
  {
    "text": "just say I want to have a test host Builder and it needs to be using my document store which is some kind of",
    "start": "2358560",
    "end": "2363839"
  },
  {
    "text": "nosql solution and I'm using event sourcing so it's using event store and I have a couple of a. net core modules",
    "start": "2363839",
    "end": "2370640"
  },
  {
    "text": "that need to be registered I don't care for that particular test how that happens I just need it to be set up in",
    "start": "2370640",
    "end": "2377520"
  },
  {
    "text": "as in little as little lines as possible without hiding details and that's important rule so things which are not",
    "start": "2377520",
    "end": "2384800"
  },
  {
    "text": "important for that particular test case you should try to hide if it's needed in the next test case you actually should",
    "start": "2384800",
    "end": "2391560"
  },
  {
    "text": "show it and that's also why I said it earlier be very careful with refactoring tests be very careful with applying dry",
    "start": "2391560",
    "end": "2399240"
  },
  {
    "text": "in your test cases every test case should be self self-sufficient should explain the cause and effect and hide",
    "start": "2399240",
    "end": "2405359"
  },
  {
    "text": "everything else oh and also the opposite is also true because it also means that the",
    "start": "2405359",
    "end": "2411319"
  },
  {
    "text": "things that are important like the route that you sent an HTP request to needs to",
    "start": "2411319",
    "end": "2417480"
  },
  {
    "text": "be shown because that's important if for that test it's important to know that I'm actually sending I don't know an eag",
    "start": "2417480",
    "end": "2424800"
  },
  {
    "text": "because I'm verifying that my HTP response is actually taken into account caching then I want to show that it",
    "start": "2424800",
    "end": "2430240"
  },
  {
    "text": "needs to be clear don't hide it in a base class or something you know what's the worst thing is when people create a",
    "start": "2430240",
    "end": "2435839"
  },
  {
    "text": "base class for all that unit test and then realize that oh crap now I have a couple of tests that need a slightly",
    "start": "2435839",
    "end": "2441800"
  },
  {
    "text": "different Behavior you know what I'll make some method on my Base Class virtual override it I see people shaking",
    "start": "2441800",
    "end": "2447240"
  },
  {
    "text": "the head means it's a good thing that you shouldn't be doing that I've seen it myself I've done that you know what's",
    "start": "2447240",
    "end": "2452960"
  },
  {
    "text": "worse multiple levels of Base classes that's even worse so you don't have to be",
    "start": "2452960",
    "end": "2459480"
  },
  {
    "text": "embarrassed if you do that I've done that uh and sometimes it's okay sometimes actually solves a problem if",
    "start": "2459480",
    "end": "2466240"
  },
  {
    "text": "you're building these complicated endtoend test cases like I do for the functional slices you're inevitably",
    "start": "2466240",
    "end": "2472119"
  },
  {
    "text": "going to build some kind of little framework around that and then it becomes becomes useful to have something",
    "start": "2472119",
    "end": "2477359"
  },
  {
    "text": "like that but again that rule is is going to remain there you always have to follow the",
    "start": "2477359",
    "end": "2482960"
  },
  {
    "text": "rule in Germany there um there's an artist from",
    "start": "2482960",
    "end": "2488200"
  },
  {
    "text": "the '90s was very popular I'm pretty sure you don't know him he's called scooter yes okay yeah so so people are",
    "start": "2488200",
    "end": "2494599"
  },
  {
    "text": "old enough and um there was a he has a has a has a phrase somewhere in his song",
    "start": "2494599",
    "end": "2499680"
  },
  {
    "text": "called it's nice to be important it's more important to be nice and because of that my colleagues actually call this",
    "start": "2499680",
    "end": "2504800"
  },
  {
    "text": "the scooter R because it's about the point I don't know it's probably not even funny but uh unless you know the",
    "start": "2504800",
    "end": "2509920"
  },
  {
    "text": "song play hyper hyper you remember then I know what I'm talking about well I",
    "start": "2509920",
    "end": "2515280"
  },
  {
    "text": "think this was mentioned already had another conference session this week Ure that it fills for the right reason make",
    "start": "2515280",
    "end": "2521599"
  },
  {
    "text": "sure that if you create a test especially if you if you solving a buck first create the test case to make sure",
    "start": "2521599",
    "end": "2527560"
  },
  {
    "text": "that you can reproduce the bug make sure it fails but also make sure it fills for the right reason does it actually give",
    "start": "2527560",
    "end": "2533280"
  },
  {
    "text": "you the response data or the uh the result or actually uh throw the right",
    "start": "2533280",
    "end": "2539200"
  },
  {
    "text": "type of exception with the right type of message exception message that you're expecting before you start implementing",
    "start": "2539200",
    "end": "2545680"
  },
  {
    "text": "it it's even wor I'm so um sometimes so wondering about this that even if I fix",
    "start": "2545680",
    "end": "2551920"
  },
  {
    "text": "the book and the test is green I sometimes just undo the change to make sure the test still fills which is very",
    "start": "2551920",
    "end": "2558520"
  },
  {
    "text": "useful because you would not be the first one to fix a Burg put it in production or you know create a pool",
    "start": "2558520",
    "end": "2563760"
  },
  {
    "text": "request the QA engineer starts testing it's still broken but what my unit test is green right that",
    "start": "2563760",
    "end": "2572520"
  },
  {
    "text": "happens other thing is like you know we've all been trained you know with with with whips and everything that you",
    "start": "2572520",
    "end": "2579359"
  },
  {
    "text": "should not use magic numbers right actually I'm saying that in your unit test or you automated test you should",
    "start": "2579359",
    "end": "2585880"
  },
  {
    "text": "use magic numbers and you should use magic strings and everything else because defining all these con at the",
    "start": "2585880",
    "end": "2592119"
  },
  {
    "text": "top of your test is not going to help your test understand you know if you have a number like I don't know one two",
    "start": "2592119",
    "end": "2598880"
  },
  {
    "text": "three do you just use one two three in your test cases it's much easier to read and have some constant font of that it's",
    "start": "2598880",
    "end": "2604800"
  },
  {
    "text": "for everything I quite often use things like um the client or a company or some",
    "start": "2604800",
    "end": "2610599"
  },
  {
    "text": "company if I use strings for that to emphasize the the um the significance of that value but I don't Define const for",
    "start": "2610599",
    "end": "2617160"
  },
  {
    "text": "that because a const is another line of code that makes it more difficult to read my test exception of course is a guid",
    "start": "2617160",
    "end": "2625520"
  },
  {
    "text": "because I'm pretty sure you're not very good at understanding whether the guid is correct are you",
    "start": "2625520",
    "end": "2631160"
  },
  {
    "text": "okay oh you have an example country code document number kind State versus just",
    "start": "2631160",
    "end": "2637800"
  },
  {
    "text": "using it there document 1 two3 it's completely readable if you can't see the",
    "start": "2637800",
    "end": "2642839"
  },
  {
    "text": "cause and effect that in a couple of L of code then something is wrong you need probably need to get some",
    "start": "2642839",
    "end": "2649240"
  },
  {
    "text": "classes again this is what I do it doesn't mean you have to do it um the other thing is",
    "start": "2649319",
    "end": "2657200"
  },
  {
    "text": "that oh the other thing is that if you for example have an HTP request uh or",
    "start": "2657200",
    "end": "2662839"
  },
  {
    "text": "something else that returns Json what quite often happens is people then like in your production code you",
    "start": "2662839",
    "end": "2669040"
  },
  {
    "text": "probably have some kind of type that you've configured to be able to serialize to Jason right maybe it's a",
    "start": "2669040",
    "end": "2674200"
  },
  {
    "text": "record maybe it's a class maybe it's something else what you shouldn't do is then take the same class and use it in",
    "start": "2674200",
    "end": "2680920"
  },
  {
    "text": "your test to deserialize to but wait why that's very nice because then if I change my class you know my test won't",
    "start": "2680920",
    "end": "2687960"
  },
  {
    "text": "break that makes it very ref factorable yes that is true but the",
    "start": "2687960",
    "end": "2693160"
  },
  {
    "text": "thing is if you change you add a new property to that class that you use in your I don't know AET controller you're",
    "start": "2693160",
    "end": "2700800"
  },
  {
    "text": "actually changing the contract and what is your test supposed to do make sure that you don't break your",
    "start": "2700800",
    "end": "2706640"
  },
  {
    "text": "contract so don't do that changing the implementation uh if that implementation",
    "start": "2706640",
    "end": "2713599"
  },
  {
    "text": "affects the way your API responds or the data that returns back is a breaking change you need to make that explicit so",
    "start": "2713599",
    "end": "2720960"
  },
  {
    "text": "I never do that and that's one of the reasons why I initially wrote this B equivalent to in this example I'm",
    "start": "2720960",
    "end": "2726599"
  },
  {
    "text": "actually wrote A specialized version of B equivalent 2 um that would take an",
    "start": "2726599",
    "end": "2731720"
  },
  {
    "text": "object sorry it takes a Json response and HTP response serial deserializes",
    "start": "2731720",
    "end": "2736920"
  },
  {
    "text": "into an anonymous type where I only specify the properties that are relevant for my test and then verify them against",
    "start": "2736920",
    "end": "2743839"
  },
  {
    "text": "this so here you see this is not the best example because I'm actually using it I don't have a picture yes here I",
    "start": "2743839",
    "end": "2749720"
  },
  {
    "text": "have a picture so this response object is an HTP response message and I'm saying it should be equival equalent to",
    "start": "2749720",
    "end": "2756920"
  },
  {
    "text": "a collection or an array that contains one object which has two properties everything else IR relevant and this B",
    "start": "2756920",
    "end": "2764000"
  },
  {
    "text": "equivalent to will then deize whatever is in the response message into anonymous type with that",
    "start": "2764000",
    "end": "2770680"
  },
  {
    "text": "structure ignores all the other data because not relevant and then compare it with that so if the Jon actually returns",
    "start": "2770680",
    "end": "2777960"
  },
  {
    "text": "lowercase like pasal case properties I should use pasal case here as well I'm",
    "start": "2777960",
    "end": "2783160"
  },
  {
    "text": "literally assuring asserting that what is what comes back matches my expectation without using production",
    "start": "2783160",
    "end": "2789280"
  },
  {
    "text": "code if somebody changed the implementation this test will break and it should",
    "start": "2789280",
    "end": "2795480"
  },
  {
    "text": "break all right well this is uh of course what you get if you do pract if you practice tdd correctly if you have",
    "start": "2796160",
    "end": "2803559"
  },
  {
    "text": "test cases that are self-describing that actually uh fill with really clear messages like that's",
    "start": "2803559",
    "end": "2810760"
  },
  {
    "text": "what I why I created fluid assertions it should keep you at the deburger hell that's what you try to do so in this",
    "start": "2810760",
    "end": "2816440"
  },
  {
    "text": "case it will say something like expected property counters index zero that state",
    "start": "2816440",
    "end": "2821480"
  },
  {
    "text": "to be closed but active differs new near act index zero in a newer version we",
    "start": "2821480",
    "end": "2827400"
  },
  {
    "text": "even in introduce like things like Arrow so you see where is the mismatch because that's what you want especially if like",
    "start": "2827400",
    "end": "2833520"
  },
  {
    "text": "long phrases I don't want to copy paste those the the expectation and the and the result into a diff or something like",
    "start": "2833520",
    "end": "2840760"
  },
  {
    "text": "that if you need to do that that's already a signal that you can improve yourself here IDE",
    "start": "2840760",
    "end": "2846319"
  },
  {
    "text": "it keeps you out of the deburger hell so uh in terms of naming an organization I actually am postfix all",
    "start": "2846319",
    "end": "2854079"
  },
  {
    "text": "my test files with specs not tests specs why it's just a stupid practice because",
    "start": "2854079",
    "end": "2860920"
  },
  {
    "text": "I like to emphasize the fact that my test cases are actually specifying the behavior of my test some of my",
    "start": "2860920",
    "end": "2867839"
  },
  {
    "text": "colleagues like why are you so being so dramatic about this so if you if you challenge this then I wonder if you're",
    "start": "2867839",
    "end": "2873480"
  },
  {
    "text": "actually practicing tdd in the way it's supposed to happen you're designing the behavior of your system then these are",
    "start": "2873480",
    "end": "2881200"
  },
  {
    "text": "specs stupid little thing I also group test by API or or concept or capability",
    "start": "2881200",
    "end": "2887880"
  },
  {
    "text": "because if you have like uh especially in codebase like fluent assertions there's a lot of test cases we have six",
    "start": "2887880",
    "end": "2893000"
  },
  {
    "text": "and a half thousand test cases because there's a lot of functionality in there but there's lots of different variations",
    "start": "2893000",
    "end": "2898280"
  },
  {
    "text": "of those tests and then they become very long and how do you differentiate you get very long test names so I sometimes",
    "start": "2898280",
    "end": "2904920"
  },
  {
    "text": "start to group them like member hiding you see that on the top including excluding properties accessibility which",
    "start": "2904920",
    "end": "2911480"
  },
  {
    "text": "makes my allows me to create much smaller naming test names and I have another example of that I actually use",
    "start": "2911480",
    "end": "2918880"
  },
  {
    "text": "fact based names like why is it duplicate okay like um respecting runtime type includes both properties",
    "start": "2918880",
    "end": "2925240"
  },
  {
    "text": "and Fields not I used to do when this and this happens it should happen that",
    "start": "2925240",
    "end": "2931319"
  },
  {
    "text": "like that I love that because I like I like my test to be functionally named but over the years I realized that",
    "start": "2931319",
    "end": "2937400"
  },
  {
    "text": "there's actually a lot of noise there was a blog post I wrote about that that I read about that that actually changed",
    "start": "2937400",
    "end": "2942680"
  },
  {
    "text": "my mind so now I use fact-based I try to State what is the expected",
    "start": "2942680",
    "end": "2948400"
  },
  {
    "text": "Behavior like what should it do and that's quite hard by the way but it makes your test much easier to read",
    "start": "2948400",
    "end": "2954319"
  },
  {
    "text": "Because if you don't and you have like um an overview of all the methods in your test file they probably all start",
    "start": "2954319",
    "end": "2959920"
  },
  {
    "text": "with the same piece of text that doesn't really help I want to you know if you use ryer you have this um stru window",
    "start": "2959920",
    "end": "2966119"
  },
  {
    "text": "that shows you an overview of your file with all the names and everything I use that a lot to scan through the test names especially when I'm reviewing code",
    "start": "2966119",
    "end": "2973040"
  },
  {
    "text": "to see okay what are the different scenarios if everything starts when quarrying the database underscore when",
    "start": "2973040",
    "end": "2978720"
  },
  {
    "text": "quarrying the database underscore when quing the database that doesn't really help unless you have a wi",
    "start": "2978720",
    "end": "2984480"
  },
  {
    "text": "screen otherwise it doesn't work so that that's a tick you can actually see some examples from the",
    "start": "2984480",
    "end": "2989839"
  },
  {
    "text": "codebase so I'm done um I think I shared a lot of things",
    "start": "2989839",
    "end": "2996079"
  },
  {
    "text": "that definitely more than 25 I think they were 35 or something at least I hope I made you think you know when you",
    "start": "2996079",
    "end": "3003200"
  },
  {
    "text": "go back to work next Monday you start to rethink or maybe challenge some of the things you've been doing if you have",
    "start": "3003200",
    "end": "3008640"
  },
  {
    "text": "questions if you if you run into issues you can reach me here on the different channels there's also a fluent resion",
    "start": "3008640",
    "end": "3014599"
  },
  {
    "text": "slack which I use to ask answer all kinds of tdd related things you can also ask chat DPT or AI assistant but they",
    "start": "3014599",
    "end": "3021960"
  },
  {
    "text": "will probably just recommend using my library it's literally what happens by the way um and if you're interested in dealing",
    "start": "3021960",
    "end": "3028119"
  },
  {
    "text": "with Legacy code tomorrow at the same room same time I'll also talk about that all my pain and struggles and what you",
    "start": "3028119",
    "end": "3034200"
  },
  {
    "text": "can learn from that thank you for being here I hope you enjoy the rest of the [Applause]",
    "start": "3034200",
    "end": "3042920"
  },
  {
    "text": "conference",
    "start": "3042920",
    "end": "3045920"
  }
]