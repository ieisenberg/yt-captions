[
  {
    "text": "yeah my name is Nikolay Azotus I'm [Music] couple of city suspects",
    "start": "8080",
    "end": "14430"
  },
  {
    "text": "years now doing super specialization and I learn and voluntario about c++ sleeper",
    "start": "14430",
    "end": "23970"
  },
  {
    "text": "cell 17 so we have established c plus or 17 and i want to tell you what it's all about",
    "start": "23970",
    "end": "31640"
  },
  {
    "text": "[Music] yes c purposes just one the next step of",
    "start": "31760",
    "end": "37830"
  },
  {
    "text": "a couple of seasons of learnings we had in the past we started with C versus nineteen eight I was already involved",
    "start": "37830",
    "end": "45150"
  },
  {
    "text": "there and then we had just the back six in 2003 and then where was the big step",
    "start": "45150",
    "end": "52079"
  },
  {
    "text": "of modern C++ how we call it with C++ 11 and with some fixes and some enhancement",
    "start": "52079",
    "end": "60180"
  },
  {
    "text": "but only small enhancement in C++ 14 and now C / 17 is around the corner which to",
    "start": "60180",
    "end": "66330"
  },
  {
    "text": "some extent was announced as the next major version but it turned out it's not",
    "start": "66330",
    "end": "71790"
  },
  {
    "text": "a next major version it's probably what I would call a medium version now so",
    "start": "71790",
    "end": "77369"
  },
  {
    "text": "something between the innovation of C plus 14 and C++ 11 the status is that we",
    "start": "77369",
    "end": "85350"
  },
  {
    "text": "count V so it's not done yet we are not done yet the status is that we look with",
    "start": "85350",
    "end": "92670"
  },
  {
    "text": "a draft for national body feedback so that formerly some countries can say",
    "start": "92670",
    "end": "99240"
  },
  {
    "text": "this should change and then otherwise I have a problem with this new standard",
    "start": "99240",
    "end": "105590"
  },
  {
    "text": "and we want to fix all these commands we started to fix them already in in autumn",
    "start": "105590",
    "end": "111659"
  },
  {
    "text": "and want to fix them again in February in Kona Hawaii so there we should finish",
    "start": "111659",
    "end": "119850"
  },
  {
    "text": "the semester seventies done it if ssing cents goes fine unfortunately I can't be",
    "start": "119850",
    "end": "126360"
  },
  {
    "text": "there so the SEO history it turned out that we",
    "start": "126360",
    "end": "134010"
  },
  {
    "text": "now have this three-year schedule of C++ and that means that we are also think",
    "start": "134010",
    "end": "141810"
  },
  {
    "text": "about trying out new things before we standardize them so one thing that",
    "start": "141810",
    "end": "146820"
  },
  {
    "text": "happened in the past we have so-called TSS technical specifications for a couple of topics",
    "start": "146820",
    "end": "152849"
  },
  {
    "text": "and as you can see here in dark green only a few of them went into C++ 17 most",
    "start": "152849",
    "end": "160230"
  },
  {
    "text": "of them went not which to some extent surprised some people including the",
    "start": "160230",
    "end": "166560"
  },
  {
    "text": "father of fitness of 17 who said we are too slow but on the other hand we are doing now standardization with about a",
    "start": "166560",
    "end": "173370"
  },
  {
    "text": "hundred people in the world and we as a hundred people have to have some consensus about the next step and you",
    "start": "173370",
    "end": "180390"
  },
  {
    "text": "see well yes it's like in politics sometimes you have to find ya it's sometimes tricky to have condenses even",
    "start": "180390",
    "end": "187830"
  },
  {
    "text": "about the direction so there might be although although there are a couple of new things there might be some",
    "start": "187830",
    "end": "194700"
  },
  {
    "text": "disappointment in the community about what's coming well I think it's good enough to update some books and that's",
    "start": "194700",
    "end": "201090"
  },
  {
    "text": "good for me at least so let's see is there support already yes while the",
    "start": "201090",
    "end": "207450"
  },
  {
    "text": "standard is not is not out yet we already have support for a couple of",
    "start": "207450",
    "end": "213030"
  },
  {
    "text": "features most of the features I can even say the best support you have when you",
    "start": "213030",
    "end": "218519"
  },
  {
    "text": "try a GCC or D plus plus there is the base is a version set o at work and this",
    "start": "218519",
    "end": "226140"
  },
  {
    "text": "seven dot over them will have support for C plus 17 most if not all of it",
    "start": "226140",
    "end": "233730"
  },
  {
    "text": "where they account be working on that it's still in development but the goal",
    "start": "233730",
    "end": "239579"
  },
  {
    "text": "is to have support for C++ 70 in there and if you want to try it out just in",
    "start": "239579",
    "end": "246540"
  },
  {
    "text": "case you you don't know there are a couple of online compilers available so",
    "start": "246540",
    "end": "251640"
  },
  {
    "text": "if you want to try out C++ 11 feature a C++ 17 series also other features try",
    "start": "251640",
    "end": "258120"
  },
  {
    "text": "for example rent box which is a compiler that overnight please gives you then the",
    "start": "258120",
    "end": "264750"
  },
  {
    "text": "newest version of the GCC and also of the clang compiler there here for example it's a head of some 7.0 and I",
    "start": "264750",
    "end": "273720"
  },
  {
    "text": "can try out here what compiles here of a couple of new features you might be able to read here",
    "start": "273720",
    "end": "280620"
  },
  {
    "text": "or not that become too all these examples later so as I said most of the things I can test I could",
    "start": "280620",
    "end": "287159"
  },
  {
    "text": "test already with that so I have some application programming experience with",
    "start": "287159",
    "end": "293069"
  },
  {
    "text": "superstar 17 although it's not finalized and that's good we still find some",
    "start": "293069",
    "end": "299279"
  },
  {
    "text": "issues especially when we bring together different features because in",
    "start": "299279",
    "end": "304319"
  },
  {
    "text": "combination of some surprising behavior sometimes comes as we had in the past so",
    "start": "304319",
    "end": "311209"
  },
  {
    "text": "what was not voted in C++ 17 the biggest things that are not there and a lot of",
    "start": "311209",
    "end": "318329"
  },
  {
    "text": "people as I said are waiting for them that's modules concepts ranges",
    "start": "318329",
    "end": "323399"
  },
  {
    "text": "co-routines reflection overloading operator dot default comparison operators uniform course in text or a",
    "start": "323399",
    "end": "329879"
  },
  {
    "text": "library such as boost SEO which we for example now have in 80s and in the",
    "start": "329879",
    "end": "337259"
  },
  {
    "text": "detail standard what but it will not make it into C++ 17 most of it for what",
    "start": "337259",
    "end": "343679"
  },
  {
    "text": "the reason was we are not we are not",
    "start": "343679",
    "end": "348709"
  },
  {
    "text": "convinced that this is mature enough for both for language features or library features if they didn't come in this",
    "start": "348709",
    "end": "356579"
  },
  {
    "text": "might surprise to some people for example for concepts a lot of discussion is already there about the past 10 years",
    "start": "356579",
    "end": "363539"
  },
  {
    "text": "but yes it's not done yet so I was that that was probably the most thing I was",
    "start": "363539",
    "end": "368969"
  },
  {
    "text": "surprised about yeah for anything else there might be good reasons or not some",
    "start": "368969",
    "end": "375329"
  },
  {
    "text": "of them I'm happy that they are not already there because I myself think they are not well done or surprising",
    "start": "375329",
    "end": "381899"
  },
  {
    "text": "behavior so yeah that's the way it is unfortunately every opinion is different in the Senate committee why isn't it",
    "start": "381899",
    "end": "392399"
  },
  {
    "text": "working now some interesting Windows program took my",
    "start": "392399",
    "end": "402350"
  },
  {
    "text": "focus",
    "start": "402350",
    "end": "404890"
  },
  {
    "text": "you so one small part before we jump into",
    "start": "408409",
    "end": "416330"
  },
  {
    "text": "details and generally change that C++ a lesson should be on top of c11 instead",
    "start": "416330",
    "end": "425540"
  },
  {
    "text": "of c99 so we still have to go to support C functionality from the C library but",
    "start": "425540",
    "end": "431630"
  },
  {
    "text": "it will switch to c11 and with some minor fixes but in general we should",
    "start": "431630",
    "end": "438470"
  },
  {
    "text": "support all the data from there so let's talk in this first talk about the",
    "start": "438470",
    "end": "445490"
  },
  {
    "text": "language features and then after the break in the next talk I talked about the library features knowing that there",
    "start": "445490",
    "end": "452240"
  },
  {
    "text": "sometimes it's a little bit difficult to know is it a library or language feature because we have language support in the",
    "start": "452240",
    "end": "458780"
  },
  {
    "text": "library let's see how it works out so the first thing here is structured",
    "start": "458780",
    "end": "464960"
  },
  {
    "text": "bindings structured bindings is something you see here which means you",
    "start": "464960",
    "end": "470960"
  },
  {
    "text": "can declare an object that in fact declares multiple objects so it",
    "start": "470960",
    "end": "478000"
  },
  {
    "text": "initializes a variable U and V by what is returned by function foo and you can",
    "start": "478000",
    "end": "486920"
  },
  {
    "text": "use to initialize U and V by a structure",
    "start": "486920",
    "end": "492140"
  },
  {
    "text": "by some class that has a gap support like couple or by written by arrays or",
    "start": "492140",
    "end": "499520"
  },
  {
    "text": "return arrays here you see we have a structure internally in the stack life",
    "start": "499520",
    "end": "505580"
  },
  {
    "text": "and integer and a double so you will be deduced to be an integer we will be",
    "start": "505580",
    "end": "511310"
  },
  {
    "text": "deduced to be a double and they will get the corresponding values what is returned here from foo same here if the",
    "start": "511310",
    "end": "518810"
  },
  {
    "text": "function returns a couple of character float and string a B and C will have the",
    "start": "518810",
    "end": "524240"
  },
  {
    "text": "corresponding types character float and string and will have the corresponding values depending on what the value was",
    "start": "524240",
    "end": "531050"
  },
  {
    "text": "which was returned from G and also I can direct the initializes with an array",
    "start": "531050",
    "end": "536450"
  },
  {
    "text": "here an array of 47 and 11 so that means x and y integers initialized by these",
    "start": "536450",
    "end": "544350"
  },
  {
    "text": "various let's just makes it some things more convenient you can still have the",
    "start": "544350",
    "end": "550950"
  },
  {
    "text": "usual qualifiers you can say I want to have the reference I want to have the",
    "start": "550950",
    "end": "556650"
  },
  {
    "text": "Const value of this but you have to use Auto if you have a reference of course",
    "start": "556650",
    "end": "563340"
  },
  {
    "text": "that means that you have access to what was returned from the function is it was",
    "start": "563340",
    "end": "569490"
  },
  {
    "text": "returned by reference and yeah so you can change it if there still is it's",
    "start": "569490",
    "end": "575400"
  },
  {
    "text": "still valid to modify it some interesting consequences this asks for",
    "start": "575400",
    "end": "582570"
  },
  {
    "text": "example this is a nice example a matter of string and double what we can write",
    "start": "582570",
    "end": "589320"
  },
  {
    "text": "now is this we iterate over this map by saying well I I want to iterate over the",
    "start": "589320",
    "end": "596850"
  },
  {
    "text": "element the elements are key value pairs so I want to have them by reference and",
    "start": "596850",
    "end": "602790"
  },
  {
    "text": "that means instead of having the strange pair where we use first and second and",
    "start": "602790",
    "end": "608910"
  },
  {
    "text": "nobody can understand that then unless they know about C++ I can read this",
    "start": "608910",
    "end": "615060"
  },
  {
    "text": "perfectly if key is greater than 20 I double the value and I can use this loop now to iterate over the elements and for",
    "start": "615060",
    "end": "624270"
  },
  {
    "text": "the same reason I can now use the auto f4 key and value and print key and",
    "start": "624270",
    "end": "629340"
  },
  {
    "text": "baryons is definitely more readable code than using our first and second in my",
    "start": "629340",
    "end": "635580"
  },
  {
    "text": "opinion",
    "start": "635580",
    "end": "638120"
  },
  {
    "text": "he is doing and greater than 20 yeah yes there was a hidden secret here yeah no",
    "start": "640990",
    "end": "648820"
  },
  {
    "text": "you're right I changed the slides but not completely yeah thank you so yes of course the first thing should",
    "start": "648820",
    "end": "655660"
  },
  {
    "text": "be a so yeah with the usual route you",
    "start": "655660",
    "end": "663520"
  },
  {
    "text": "have for autograph extending temporaries account autograph extending 10% usual",
    "start": "663520",
    "end": "669100"
  },
  {
    "text": "woods apply next thing um we were so",
    "start": "669100",
    "end": "676959"
  },
  {
    "text": "successful with the extension of the for loop to becoming a range bass follow that we thought oh that's a cool set to",
    "start": "676959",
    "end": "683380"
  },
  {
    "text": "go so let's do something else and one thing we extend it now was if",
    "start": "683380",
    "end": "688839"
  },
  {
    "text": "and switch so that we can now besides the condition in front we can have an",
    "start": "688839",
    "end": "695470"
  },
  {
    "text": "initialization that means if you have something like this this probably the",
    "start": "695470",
    "end": "701260"
  },
  {
    "text": "typical example you have an initialization of something which you want to check then and which you still",
    "start": "701260",
    "end": "707680"
  },
  {
    "text": "need them because if you don't need it then you can do it in one expression but",
    "start": "707680",
    "end": "713079"
  },
  {
    "text": "if you still need it then you have to do something like this you can now write it as this you can say initialization is",
    "start": "713079",
    "end": "720520"
  },
  {
    "text": "status s is the result of check and then I check whether s is not equal success",
    "start": "720520",
    "end": "726490"
  },
  {
    "text": "and I use this as with the scope that the assets only valid inside the scope",
    "start": "726490",
    "end": "732850"
  },
  {
    "text": "of this expression that also helps for lock guards for example if lock guards",
    "start": "732850",
    "end": "739870"
  },
  {
    "text": "you read lock guards to do something like I want to have a vector and if it's",
    "start": "739870",
    "end": "745000"
  },
  {
    "text": "not empty I print front I now can write this as follows to saying I initialize the lock gut and",
    "start": "745000",
    "end": "751930"
  },
  {
    "text": "then I do a check and then I do something with thee with a vector that's also possible and it's also possible for",
    "start": "751930",
    "end": "759010"
  },
  {
    "text": "a switch statement so if I have an initialization and then switch over the result I can now do the initialization",
    "start": "759010",
    "end": "766149"
  },
  {
    "text": "inside the switch statement and I'm in the scope of this switch statement",
    "start": "766149",
    "end": "773310"
  },
  {
    "text": "okay yeah",
    "start": "773569",
    "end": "777920"
  },
  {
    "text": "so the question is if I initialize it just a temporary will it survive",
    "start": "784319",
    "end": "791540"
  },
  {
    "text": "yeah actually I'm not sure about the route that I didn't try that out there",
    "start": "794150",
    "end": "801020"
  },
  {
    "text": "must be some correlation and I will think about it so I have no answer yet",
    "start": "801020",
    "end": "806560"
  },
  {
    "text": "Thanks yeah but here's something also bringing",
    "start": "806560",
    "end": "817220"
  },
  {
    "text": "two of these features together just to show you what happens if I knew if I use structured bindings and then the the",
    "start": "817220",
    "end": "824660"
  },
  {
    "text": "initialization is so if I have something like I have on a insert into a",
    "start": "824660",
    "end": "830389"
  },
  {
    "text": "collection of value of 42 the return value is the pair where the first",
    "start": "830389",
    "end": "836660"
  },
  {
    "text": "element refers to the element if it was exerted and the second element tells you",
    "start": "836660",
    "end": "842119"
  },
  {
    "text": "whether this was successful or not so you have to write this strange code saying well if it was not successful I",
    "start": "842119",
    "end": "849789"
  },
  {
    "text": "can tell you we i we already have there another element and that's this who can",
    "start": "849789",
    "end": "855049"
  },
  {
    "text": "read that so we can do it now better we can say if initialize with auto with",
    "start": "855049",
    "end": "862189"
  },
  {
    "text": "sector finding a position and done from insert why we are not done or if we are",
    "start": "862189",
    "end": "868489"
  },
  {
    "text": "not done then we initialize key and value from what position refers to and",
    "start": "868489",
    "end": "873649"
  },
  {
    "text": "then we can use the key and that's probably better readable code than before good something different because",
    "start": "873649",
    "end": "889699"
  },
  {
    "text": "I could one valid name of these",
    "start": "889699",
    "end": "896749"
  },
  {
    "text": "variables are just an underscore yeah but some people love that",
    "start": "896749",
    "end": "902299"
  },
  {
    "text": "I am getting a little bit nervous when I see where I ever file it like that but it's possible yes you can say Const Auto",
    "start": "902299",
    "end": "916009"
  },
  {
    "text": "rev key comma underscore if you don't care you could but you could also use",
    "start": "916009",
    "end": "922399"
  },
  {
    "text": "the underscore if you care but that's your problem then oh yeah yeah and any",
    "start": "922399",
    "end": "930319"
  },
  {
    "text": "new features is as a new ability to obscure behavior by I don't know",
    "start": "930319",
    "end": "936470"
  },
  {
    "text": "encryption mobile server argumented action for class templates we",
    "start": "936470",
    "end": "942180"
  },
  {
    "text": "have now the ability that we don't necessarily have to specify template",
    "start": "942180",
    "end": "950330"
  },
  {
    "text": "arguments they can be reduced by the constructor like template arguments can",
    "start": "950330",
    "end": "957960"
  },
  {
    "text": "be deduced by parameters when I have function templates now we have that in",
    "start": "957960",
    "end": "964140"
  },
  {
    "text": "classes so do you see here usually if I have a class B with two types and I say",
    "start": "964140",
    "end": "970590"
  },
  {
    "text": "I want to have an object of this type I can say I have to say please instantiate",
    "start": "970590",
    "end": "977190"
  },
  {
    "text": "this for two strings with or without the initialization now I can skip the types",
    "start": "977190",
    "end": "986520"
  },
  {
    "text": "if it if the types can be deduced from the parameters like and function",
    "start": "986520",
    "end": "993690"
  },
  {
    "text": "templates so I can write here D 2 is high work the types by the way are the",
    "start": "993690",
    "end": "1001070"
  },
  {
    "text": "first type is and three characters and the second is six characters and here we",
    "start": "1001070",
    "end": "1010490"
  },
  {
    "text": "have it's an int and it's a double and by the way I have I think no I'm this is",
    "start": "1010490",
    "end": "1018410"
  },
  {
    "text": "also not correct because this is using the argument by value this will decay so",
    "start": "1018410",
    "end": "1025250"
  },
  {
    "text": "these two types will be charged as if they would the argument would be defined",
    "start": "1025250",
    "end": "1032720"
  },
  {
    "text": "by reference then this would be the two types of T 1 and T 2 it's again it's the",
    "start": "1032720",
    "end": "1038930"
  },
  {
    "text": "same rules as for function templates but now for class templates you don't have to specify the types if they can be",
    "start": "1038930",
    "end": "1045890"
  },
  {
    "text": "deduced it's an of course an error if they can't be deduced so you can't write",
    "start": "1045890",
    "end": "1051500"
  },
  {
    "text": "that and you can use it for simple things like this you can say complex now",
    "start": "1051500",
    "end": "1057230"
  },
  {
    "text": "it does not need an int here as a complex number is initialized by 5",
    "start": "1057230",
    "end": "1063470"
  },
  {
    "text": "and 3 both are integers so this will deduce a complex of int it will not work",
    "start": "1063470",
    "end": "1071650"
  },
  {
    "text": "according to class complex if the types differ because complex requires that both",
    "start": "1071650",
    "end": "1077220"
  },
  {
    "text": "arguments are the same and as for function templates if the deduction gives the contradiction and there's no",
    "start": "1077220",
    "end": "1084450"
  },
  {
    "text": "automatic type conversion then this is an error",
    "start": "1084450",
    "end": "1089870"
  },
  {
    "text": "the rule is either you specify all or none you can't partially specify this class",
    "start": "1090659",
    "end": "1098730"
  },
  {
    "text": "template deduction argument so here I specify all of them well there's a",
    "start": "1098730",
    "end": "1104309"
  },
  {
    "text": "special behavior if I as a default type then you don't have specialists like",
    "start": "1104309",
    "end": "1109559"
  },
  {
    "text": "that one but if I say something like I don't specialize anything but here I",
    "start": "1109559",
    "end": "1116129"
  },
  {
    "text": "special I hire a past one and here I passed two and that's fine but if I here",
    "start": "1116129",
    "end": "1124740"
  },
  {
    "text": "say I pass two arguments but I specialize only one this is an error so",
    "start": "1124740",
    "end": "1131669"
  },
  {
    "text": "we can only specify all that have no default where you'll or none so anything",
    "start": "1131669",
    "end": "1137879"
  },
  {
    "text": "else is an error that's by the way something to help you because here",
    "start": "1137879",
    "end": "1144619"
  },
  {
    "text": "consider this if we could sparsely specify things a couple partially",
    "start": "1144619",
    "end": "1152129"
  },
  {
    "text": "specified for in taking two ends then we would not take this as an error we would",
    "start": "1152129",
    "end": "1158610"
  },
  {
    "text": "say yeah we would say this is a table by to end but yeah so this seems seemed not",
    "start": "1158610",
    "end": "1165299"
  },
  {
    "text": "to be useful and therefore we said no we either all or nothing",
    "start": "1165299",
    "end": "1171919"
  },
  {
    "text": "- that we can't do the following now we can't say I want to have a set of ends",
    "start": "1171980",
    "end": "1179460"
  },
  {
    "text": "and my sorting criteria wrong is passed as argument because it's this has a",
    "start": "1179460",
    "end": "1185369"
  },
  {
    "text": "specific type which is the second parameter I still have to specify the second parameter we we are thinking",
    "start": "1185369",
    "end": "1192869"
  },
  {
    "text": "about placing something here like comma question mark or something like that so",
    "start": "1192869",
    "end": "1199169"
  },
  {
    "text": "that we can say it's our intention that we have two to ten",
    "start": "1199169",
    "end": "1205890"
  },
  {
    "text": "parameters but that we still want to have only the second one to be deduced",
    "start": "1205890",
    "end": "1211370"
  },
  {
    "text": "but that's not in C + 417 that's something that might come later another",
    "start": "1211370",
    "end": "1220890"
  },
  {
    "text": "interesting thing is that sometimes deduction doesn't work or gives you",
    "start": "1220890",
    "end": "1225990"
  },
  {
    "text": "surprising behavior so one thing here is",
    "start": "1225990",
    "end": "1231750"
  },
  {
    "text": "pair I no longer need for a pair to",
    "start": "1231750",
    "end": "1237000"
  },
  {
    "text": "specify what is the type of the first and the second element of the pair I can do it that way however this will not",
    "start": "1237000",
    "end": "1245130"
  },
  {
    "text": "compile and the reason is that it's not",
    "start": "1245130",
    "end": "1251130"
  },
  {
    "text": "allowed to copy or initialize array parameters and this is an array so I",
    "start": "1251130",
    "end": "1257760"
  },
  {
    "text": "still need make pair because this decays and make payable decay to a contra star",
    "start": "1257760",
    "end": "1265710"
  },
  {
    "text": "here and so sometimes the convenient functions functions are still there",
    "start": "1265710",
    "end": "1271280"
  },
  {
    "text": "another good example shared pointer you can say I want to skip to initialize a",
    "start": "1271280",
    "end": "1277860"
  },
  {
    "text": "shared point of end by a new in I want to skip this in because I can deduce",
    "start": "1277860",
    "end": "1282960"
  },
  {
    "text": "this from the constructor but this is an error and it will probably remain to be",
    "start": "1282960",
    "end": "1290010"
  },
  {
    "text": "an error why is it an error because in class shared pointer we have a template",
    "start": "1290010",
    "end": "1298290"
  },
  {
    "text": "parameter T that's this one but the constructor takes a different template",
    "start": "1298290",
    "end": "1306210"
  },
  {
    "text": "parameter because the construction happens with another template parameter to have to support automatic type",
    "start": "1306210",
    "end": "1312270"
  },
  {
    "text": "conversion and there is no rule to convert this Y into this T so therefore",
    "start": "1312270",
    "end": "1318690"
  },
  {
    "text": "this will not work we can deduce this Y but we can't abuse this T now there is",
    "start": "1318690",
    "end": "1325800"
  },
  {
    "text": "something interesting something interesting you can specify roots for that which is called so-called deduction",
    "start": "1325800",
    "end": "1333240"
  },
  {
    "text": "guides you can specify how I want to use this mechanism to",
    "start": "1333240",
    "end": "1338770"
  },
  {
    "text": "use types and I can say for example the following if I initialize a shared",
    "start": "1338770",
    "end": "1345400"
  },
  {
    "text": "pointer by a y star and Y is a template parameter then please did use that chat",
    "start": "1345400",
    "end": "1355060"
  },
  {
    "text": "pointer of Y is used so the Y is used st in shared pointer I can do that so",
    "start": "1355060",
    "end": "1362500"
  },
  {
    "text": "that's a deduction guide and if that if you define that then this is fine and",
    "start": "1362500",
    "end": "1367900"
  },
  {
    "text": "will work we are currently discussing whether we want to have that and it will",
    "start": "1367900",
    "end": "1373720"
  },
  {
    "text": "probably not be the case in C++ 17 because then we can initialize such a",
    "start": "1373720",
    "end": "1381340"
  },
  {
    "text": "shared pointer by a new integer array because internal areas are also in stuff",
    "start": "1381340",
    "end": "1387880"
  },
  {
    "text": "and that will though may be causing more interesting problems in your programs so",
    "start": "1387880",
    "end": "1395760"
  },
  {
    "text": "there will be some surprises in the future about this in general oh yeah",
    "start": "1395760",
    "end": "1402850"
  },
  {
    "text": "here's the example in general we will have that these deduction guys are at work and we are still working on them",
    "start": "1402850",
    "end": "1409480"
  },
  {
    "text": "and for example one if he is one example if you have a vector you initialize it",
    "start": "1409480",
    "end": "1415330"
  },
  {
    "text": "by two iterators you want to deduce the element type from the iterators but you",
    "start": "1415330",
    "end": "1422620"
  },
  {
    "text": "have to say that i want to then have a vector which uses the iterator tripes",
    "start": "1422620",
    "end": "1428310"
  },
  {
    "text": "traits Vario type as element type so that's that will be that will probably",
    "start": "1428310",
    "end": "1434050"
  },
  {
    "text": "be in the standard for all the containers and some of them also yeah and you can also do it yourself you",
    "start": "1434050",
    "end": "1440770"
  },
  {
    "text": "can have something like if I have a struct F and it it doesn't have to be a",
    "start": "1440770",
    "end": "1446760"
  },
  {
    "text": "template the deduction guy you can say if I have a s for a string literal or",
    "start": "1446760",
    "end": "1453400"
  },
  {
    "text": "chakhan star please did use s to use as a as a template parameter to be string",
    "start": "1453400",
    "end": "1461170"
  },
  {
    "text": "and then this will automatically happen if you then initialize s by a spring",
    "start": "1461170",
    "end": "1466810"
  },
  {
    "text": "little it will be an S string that's possible you have to do it in the same scope",
    "start": "1466810",
    "end": "1473320"
  },
  {
    "text": "where you define the type so if you want to extend behavior of the standard library you have to define these",
    "start": "1473320",
    "end": "1479470"
  },
  {
    "text": "deduction guides in this namespace SCD which is officially not allowed but",
    "start": "1479470",
    "end": "1485340"
  },
  {
    "text": "possible so you have to do it in the same context where the original data",
    "start": "1485340",
    "end": "1491350"
  },
  {
    "text": "type is different good very attic templates we introduced in",
    "start": "1491350",
    "end": "1499170"
  },
  {
    "text": "C++ 11 very attic template which means we have here parameter take a list of",
    "start": "1499170",
    "end": "1505510"
  },
  {
    "text": "parameters and we can use them to do something with them one thing we can do",
    "start": "1505510",
    "end": "1512500"
  },
  {
    "text": "now which we couldn't do before to say we wanna we want to have this recursion",
    "start": "1512500",
    "end": "1519300"
  },
  {
    "text": "and not the point is we take arguments the first argument is handled",
    "start": "1519300",
    "end": "1526750"
  },
  {
    "text": "differently it's printed out and the other remaining arguments are printed are passed to print again so that way",
    "start": "1526750",
    "end": "1533560"
  },
  {
    "text": "one argument off of the other we print all the elements but we need an end criterion because somewhere the",
    "start": "1533560",
    "end": "1541480"
  },
  {
    "text": "recursion has to end and the problem is we could write the end caterham here",
    "start": "1541480",
    "end": "1547600"
  },
  {
    "text": "because we had no if at compile time saying we want to hear only use this",
    "start": "1547600",
    "end": "1555310"
  },
  {
    "text": "call if the number of elements is 0 is not 0 of course so now we have that we",
    "start": "1555310",
    "end": "1562420"
  },
  {
    "text": "have a compile time if statement the name of under which it was proposed both",
    "start": "1562420",
    "end": "1569220"
  },
  {
    "text": "expert if it was changed into its context but the term is still the name",
    "start": "1569220",
    "end": "1575110"
  },
  {
    "text": "is still context raised but the syntax is is cons expert and that means here",
    "start": "1575110",
    "end": "1580330"
  },
  {
    "text": "there must be a compile time expression if this a compile time expression is",
    "start": "1580330",
    "end": "1585550"
  },
  {
    "text": "true and only then this will be are used in the template to generate code",
    "start": "1585550",
    "end": "1592030"
  },
  {
    "text": "otherwise this is ignored and you can have an adze part the same way we call",
    "start": "1592030",
    "end": "1600010"
  },
  {
    "text": "that a discarded statement then here you",
    "start": "1600010",
    "end": "1604740"
  },
  {
    "text": "okay let's cool by the way that will change a lot of template code and we",
    "start": "1605210",
    "end": "1612029"
  },
  {
    "text": "have even more for these variadic templates we have now so called fold expressions instead of using all these",
    "start": "1612029",
    "end": "1619049"
  },
  {
    "text": "recursions to process one argument after the other we can say let's combine all",
    "start": "1619049",
    "end": "1625830"
  },
  {
    "text": "these arguments with one Operator for example by saying dot dot dot plus s and",
    "start": "1625830",
    "end": "1633899"
  },
  {
    "text": "s is a list of arguments of different types that comes here any length we can",
    "start": "1633899",
    "end": "1641159"
  },
  {
    "text": "say we want to sum up all the elements here so this will expand to s1 plus s2",
    "start": "1641159",
    "end": "1647389"
  },
  {
    "text": "plus s3 as one two three are the different elements of this parameter",
    "start": "1647389",
    "end": "1654179"
  },
  {
    "text": "which is a very a deck template parameter so representing different",
    "start": "1654179",
    "end": "1659279"
  },
  {
    "text": "values so this will expand - this is left binding and with the dot dot at the",
    "start": "1659279",
    "end": "1668250"
  },
  {
    "text": "end it's right binding and we can have an initialization so you can do something like this I want a",
    "start": "1668250",
    "end": "1676100"
  },
  {
    "text": "initializing have my see out and I want to print all the elements I pass here to",
    "start": "1676100",
    "end": "1682049"
  },
  {
    "text": "see out I can write it that way unfortunately not easily with some white",
    "start": "1682049",
    "end": "1687659"
  },
  {
    "text": "space in between so that's that's a problem here that we have no syntax for that yet you have to do some tricks with",
    "start": "1687659",
    "end": "1694440"
  },
  {
    "text": "some I don't know factors also to do that okay another thing template auto of",
    "start": "1694440",
    "end": "1704159"
  },
  {
    "text": "course Auto more and more Auto we have now we can say we have a template a non",
    "start": "1704159",
    "end": "1710129"
  },
  {
    "text": "type tender so a template for an integer or longer forever where we are not",
    "start": "1710129",
    "end": "1715399"
  },
  {
    "text": "defining inner hand which type it is so we can say we instantiate this s by 42",
    "start": "1715399",
    "end": "1723330"
  },
  {
    "text": "or by a character and then the type will depend on that I didn't have a slide",
    "start": "1723330",
    "end": "1729059"
  },
  {
    "text": "just at the moment I present this of course now with class template argument deduction we could again now say let's",
    "start": "1729059",
    "end": "1736769"
  },
  {
    "text": "deduce this from the constructor I have to try it out at least so but that's something",
    "start": "1736769",
    "end": "1742620"
  },
  {
    "text": "yeah I could try out later it this is no magic to to allow something that was not",
    "start": "1742620",
    "end": "1750030"
  },
  {
    "text": "allowed before so we can't still in instantiate this for double as we can't",
    "start": "1750030",
    "end": "1756000"
  },
  {
    "text": "declare a template for a double n that's still not possible you can partly",
    "start": "1756000",
    "end": "1762030"
  },
  {
    "text": "specialize it so you can say this is a general guideline but for integers I have special implementation or for",
    "start": "1762030",
    "end": "1768300"
  },
  {
    "text": "pointers I have a special implementation and you can do some interesting street tricks you can for example say Auto dot",
    "start": "1768300",
    "end": "1776040"
  },
  {
    "text": "or dot here then you have a value list a template parameter are lists of values",
    "start": "1776040",
    "end": "1783720"
  },
  {
    "text": "of different types and if you want to have this list homogenious you say my",
    "start": "1783720",
    "end": "1790770"
  },
  {
    "text": "first template parameter is auto so it's deduced from the argument and all the",
    "start": "1790770",
    "end": "1796410"
  },
  {
    "text": "other arguments have to have the same type so it's deco type of this type you",
    "start": "1796410",
    "end": "1801590"
  },
  {
    "text": "will find out what this will be used for in practice I'm pretty sure something",
    "start": "1801590",
    "end": "1809250"
  },
  {
    "text": "else this is really something nice who of you doesn't have the problem saying I",
    "start": "1809250",
    "end": "1816120"
  },
  {
    "text": "only need this C++ file this this",
    "start": "1816120",
    "end": "1821430"
  },
  {
    "text": "compilation unit just to clear one global object because a global object",
    "start": "1821430",
    "end": "1826580"
  },
  {
    "text": "according to the one definition rule or the hour rule has to be in one",
    "start": "1826580",
    "end": "1831860"
  },
  {
    "text": "translation unit but not in everything so you can't declare it in your header",
    "start": "1831860",
    "end": "1837330"
  },
  {
    "text": "file you need a CPP file for that that's gone you can say by placing inline here",
    "start": "1837330",
    "end": "1844970"
  },
  {
    "text": "you have an inline static object and that means the standard not guarantees",
    "start": "1844970",
    "end": "1852840"
  },
  {
    "text": "that this object is exists once in your program is visible in all the files that",
    "start": "1852840",
    "end": "1860700"
  },
  {
    "text": "include this header file and doesn't need outside a definition so you can",
    "start": "1860700",
    "end": "1867660"
  },
  {
    "text": "include this and include this here and both can access energy and they have it you have it once in",
    "start": "1867660",
    "end": "1874139"
  },
  {
    "text": "your program and you can do it for a couple of places you can for example do something like this you have a class",
    "start": "1874139",
    "end": "1880440"
  },
  {
    "text": "money tour sorry a single thing you have a class and you want to have this",
    "start": "1880440",
    "end": "1886289"
  },
  {
    "text": "monitor once in your program just in your head as I write in line monitor I",
    "start": "1886289",
    "end": "1892169"
  },
  {
    "text": "create my global money tour and that's enough all your translation units want to use",
    "start": "1892169",
    "end": "1898799"
  },
  {
    "text": "this monitor includes the code the peasant matter how much translation",
    "start": "1898799",
    "end": "1904049"
  },
  {
    "text": "units you have you will have this once and it will be shared by all the different translation units you are just",
    "start": "1904049",
    "end": "1912809"
  },
  {
    "text": "cooking looking very straight and the other thing is that every context breh",
    "start": "1912809",
    "end": "1919070"
  },
  {
    "text": "implies in line which was by the way the fact already before so that's nothing",
    "start": "1919070",
    "end": "1925289"
  },
  {
    "text": "new but the funny thing is that we can now in C++ say this context / implies in",
    "start": "1925289",
    "end": "1932159"
  },
  {
    "text": "life so this still makes sense but that's nothing new you could wrote write",
    "start": "1932159",
    "end": "1937679"
  },
  {
    "text": "that before in C++ 11 yeah yeah that's nothing new but but now we we see this",
    "start": "1937679",
    "end": "1943499"
  },
  {
    "text": "expression under a different rule saying this is an inline definition of the back string okay I'm pretty sure it has been",
    "start": "1943499",
    "end": "1955529"
  },
  {
    "text": "considered in the context of modules but I have no clue about the outcome because",
    "start": "1955529",
    "end": "1960720"
  },
  {
    "text": "I'm happy I understood all the features that made it into C++ 17 I still not",
    "start": "1960720",
    "end": "1965999"
  },
  {
    "text": "take an expert in modules sorry so I can't answer that question another",
    "start": "1965999",
    "end": "1973799"
  },
  {
    "text": "rule we have now aggregates that can",
    "start": "1973799",
    "end": "1978889"
  },
  {
    "text": "derive from other aggregates I mean this has been possible before you could define a structure deriving",
    "start": "1978889",
    "end": "1986879"
  },
  {
    "text": "form a structure for example a C structure that's nothing new but what is",
    "start": "1986879",
    "end": "1992639"
  },
  {
    "text": "new is that this is still an aggregate so aggregate rules apply and that might",
    "start": "1992639",
    "end": "1999419"
  },
  {
    "text": "be some special language rules apply and there's a specific new way to",
    "start": "1999419",
    "end": "2005029"
  },
  {
    "text": "initialize this completely so you can now write something like this I declare",
    "start": "2005029",
    "end": "2010609"
  },
  {
    "text": "a variable d1 of this type and I have 42 which shows the Shadley pass through the",
    "start": "2010609",
    "end": "2017359"
  },
  {
    "text": "base class to initialize the base class and then comma 1 to initialize the",
    "start": "2017359",
    "end": "2022369"
  },
  {
    "text": "derived class and if you don't want to initialize the base class you use empty",
    "start": "2022369",
    "end": "2027859"
  },
  {
    "text": "armed curly braces this is now an error just initializing v3 with the empty",
    "start": "2027859",
    "end": "2034789"
  },
  {
    "text": "curly braces it's now an error I expect this will still compile for some why",
    "start": "2034789",
    "end": "2040069"
  },
  {
    "text": "because this might break existing programs but according to the language this is now a change and should make it",
    "start": "2040069",
    "end": "2047539"
  },
  {
    "text": "easier to deal with yeah as you say some extensions to existing types to",
    "start": "2047539",
    "end": "2053118"
  },
  {
    "text": "initialize the object because without that we always had the need to provide a",
    "start": "2053119",
    "end": "2058429"
  },
  {
    "text": "corresponding constructor here that then passes the arguments to the base class",
    "start": "2058429",
    "end": "2063470"
  },
  {
    "text": "and that's no longer necessary yeah then",
    "start": "2063470",
    "end": "2070669"
  },
  {
    "text": "something else Sean and me were talking yesterday already privately on the on a trip with",
    "start": "2070669",
    "end": "2078259"
  },
  {
    "text": "about we now have a change in the routes",
    "start": "2078259",
    "end": "2083720"
  },
  {
    "text": "about optimisation of return values you know we have two things in C++ we have",
    "start": "2083720",
    "end": "2090529"
  },
  {
    "text": "return values that have a name like this X and we return values that don't have a",
    "start": "2090529",
    "end": "2096888"
  },
  {
    "text": "name and there's a rule that some optimization happens so that not",
    "start": "2096889",
    "end": "2102259"
  },
  {
    "text": "necessarily a copy constructor is called here the return value optimization of",
    "start": "2102259",
    "end": "2108859"
  },
  {
    "text": "the names return value optimization and in C++ 17 this optimization is no longer",
    "start": "2108859",
    "end": "2116390"
  },
  {
    "text": "optional it's mandatory it's required and that has an interesting effect that",
    "start": "2116390",
    "end": "2124819"
  },
  {
    "text": "there is no longer the need to have a copy or move constructor to support that",
    "start": "2124819",
    "end": "2132470"
  },
  {
    "text": "so even if you are not allowed to copy or move your objects this is",
    "start": "2132470",
    "end": "2138540"
  },
  {
    "text": "no valid code which will change from what we have right now so you can say",
    "start": "2138540",
    "end": "2143910"
  },
  {
    "text": "something like this I have a class X I delete my copy constructor I delete my",
    "start": "2143910",
    "end": "2150180"
  },
  {
    "text": "move constructor but I can still return a temporary object here of this type and",
    "start": "2150180",
    "end": "2157680"
  },
  {
    "text": "it will compile and you can also assign",
    "start": "2157680",
    "end": "2163260"
  },
  {
    "text": "it to another object yeah so this will change the some things I'm also sure you",
    "start": "2163260",
    "end": "2173640"
  },
  {
    "text": "attribute C++ defines a couple of you attributes of formal annotations and",
    "start": "2173640",
    "end": "2178790"
  },
  {
    "text": "these are all things I think that people who know lint and C know already so",
    "start": "2178790",
    "end": "2185640"
  },
  {
    "text": "something like no discard that means we want to have no we want to have a",
    "start": "2185640",
    "end": "2193320"
  },
  {
    "text": "warning if we throw away the return value of something and one good example",
    "start": "2193320",
    "end": "2200730"
  },
  {
    "text": "is acing those people of you who know async async has a problem it starts an",
    "start": "2200730",
    "end": "2207120"
  },
  {
    "text": "asynchronous task and as in Cronus yeah",
    "start": "2207120",
    "end": "2212790"
  },
  {
    "text": "functionality but it blocks in the",
    "start": "2212790",
    "end": "2218430"
  },
  {
    "text": "destructor for the end of that so if you don't use the return value this means",
    "start": "2218430",
    "end": "2226620"
  },
  {
    "text": "this is a synchronous call of this function and that that's a contradiction in itself so we now say a thing should",
    "start": "2226620",
    "end": "2235800"
  },
  {
    "text": "be s be marked at the compilers warned explicitly about if you if you don't use",
    "start": "2235800",
    "end": "2242430"
  },
  {
    "text": "the return value of async and there might be other examples where we think about changing things but existing",
    "start": "2242430",
    "end": "2251250"
  },
  {
    "text": "practice is an interesting issue here - whether we really want to enable it or not so some people thought about",
    "start": "2251250",
    "end": "2257840"
  },
  {
    "text": "operator new saying no discard or something like that so but let's see",
    "start": "2257840",
    "end": "2263820"
  },
  {
    "text": "whether this will work out this is a language feature where we are still not you",
    "start": "2263820",
    "end": "2269790"
  },
  {
    "text": "we still don't know where to apply it in the library that's a general problem we",
    "start": "2269790",
    "end": "2274980"
  },
  {
    "text": "have we are making car language changes until the end and the library people",
    "start": "2274980",
    "end": "2281370"
  },
  {
    "text": "have to follow that so it's not like an ordinary project management yet to say",
    "start": "2281370",
    "end": "2286680"
  },
  {
    "text": "let's let's stop developing the framework and then work on the application of the framework it's",
    "start": "2286680",
    "end": "2293990"
  },
  {
    "text": "unfortunately a little bit different here so I have no clue what happens in the last week of C++ analyzation with",
    "start": "2293990",
    "end": "2301710"
  },
  {
    "text": "the question where should be the apply notice card in the language in the library another thing is that you can",
    "start": "2301710",
    "end": "2312300"
  },
  {
    "text": "intentionally say yes I assigned the return value to Y but I didn't use it so",
    "start": "2312300",
    "end": "2318690"
  },
  {
    "text": "that's also an attribute you have now and fall through is for switch cases",
    "start": "2318690",
    "end": "2324660"
  },
  {
    "text": "where you're intentionally fall through in another case and if you have even if",
    "start": "2324660",
    "end": "2331500"
  },
  {
    "text": "you have between the two case some statements",
    "start": "2331500",
    "end": "2335990"
  },
  {
    "text": "some small things needs that namespaces",
    "start": "2336880",
    "end": "2341930"
  },
  {
    "text": "you don't have to spell them out that way you can now spell them out that way if you want to use them you can now say",
    "start": "2341930",
    "end": "2351829"
  },
  {
    "text": "in static assertions that the message here is no longer mandatory you don't",
    "start": "2351829",
    "end": "2358010"
  },
  {
    "text": "have to write a message you can just say this is the assertion that should be checked by the compiler and if it's a",
    "start": "2358010",
    "end": "2364550"
  },
  {
    "text": "little of the compiler too has a good message about that the funny thing is",
    "start": "2364550",
    "end": "2369920"
  },
  {
    "text": "that the compiler then has to care about internationalization so here we have to",
    "start": "2369920",
    "end": "2375109"
  },
  {
    "text": "care and yeah so that's one thing in",
    "start": "2375109",
    "end": "2380390"
  },
  {
    "text": "lambdas we can now capture star this this means if you have a lambda lambda",
    "start": "2380390",
    "end": "2387650"
  },
  {
    "text": "can exist inside member functions so if you are if you have an object of Class C",
    "start": "2387650",
    "end": "2393440"
  },
  {
    "text": "and inside your member function you calling a lambda then you have this and",
    "start": "2393440",
    "end": "2398770"
  },
  {
    "text": "usually what happens if you pass this either by reference or by value in",
    "start": "2398770",
    "end": "2405050"
  },
  {
    "text": "general or by passing the name you will pass a pointer and that means you refer",
    "start": "2405050",
    "end": "2411349"
  },
  {
    "text": "to the original object now guess what your start is a new thread and in the",
    "start": "2411349",
    "end": "2416869"
  },
  {
    "text": "new thread you are working on the original object without copying this object and to be able to be safe there",
    "start": "2416869",
    "end": "2425089"
  },
  {
    "text": "you can say now star this I'm honest I want to have that when I call the lambda",
    "start": "2425089",
    "end": "2430760"
  },
  {
    "text": "that it uses a copy of the object where I call this lambda for",
    "start": "2430760",
    "end": "2437470"
  },
  {
    "text": "new on delete now support arm alignment",
    "start": "2438510",
    "end": "2443940"
  },
  {
    "text": "in memory we had alignment introduced for four stack objects so we had a line",
    "start": "2443940",
    "end": "2452880"
  },
  {
    "text": "of a line as keywords introduced but they were not used in allocated memory",
    "start": "2452880",
    "end": "2458339"
  },
  {
    "text": "and memory allocation on the heat and that's that has some interesting",
    "start": "2458339",
    "end": "2463500"
  },
  {
    "text": "consequences because it means that if you call if you define your operator new",
    "start": "2463500",
    "end": "2468800"
  },
  {
    "text": "operator you might take into account the alignment of the objects I don't know",
    "start": "2468800",
    "end": "2474869"
  },
  {
    "text": "the details already but there will be new operators new and deletes etc which",
    "start": "2474869",
    "end": "2480720"
  },
  {
    "text": "have additional arguments for alignment of your data so that you can use this",
    "start": "2480720",
    "end": "2486119"
  },
  {
    "text": "argument to fulfill when you when you allocate the memory on the heap that you fully fulfill the requirement that it",
    "start": "2486119",
    "end": "2493650"
  },
  {
    "text": "should be aligned according to some value on on the heap then so this will",
    "start": "2493650",
    "end": "2499980"
  },
  {
    "text": "also be there",
    "start": "2499980",
    "end": "2503329"
  },
  {
    "text": "yeah the question is what happens we'll see with the existing implementations yeah so the default is that an operator",
    "start": "2512760",
    "end": "2521940"
  },
  {
    "text": "should choose one of these two which means in backward compatibility you only",
    "start": "2521940",
    "end": "2527400"
  },
  {
    "text": "have this one and then this should be used with the existing behavior so of course this feature has to be backward",
    "start": "2527400",
    "end": "2533130"
  },
  {
    "text": "countable compatible otherwise we put have would be in big trouble yeah you can now you have no new",
    "start": "2533130",
    "end": "2542670"
  },
  {
    "text": "preprocessor statement which asked for whether a header file exists or can be",
    "start": "2542670",
    "end": "2550020"
  },
  {
    "text": "found according to the part of edify so you can write something like this if I",
    "start": "2550020",
    "end": "2555210"
  },
  {
    "text": "find the header file optional then I do something if I find the experimental",
    "start": "2555210",
    "end": "2561810"
  },
  {
    "text": "optional line then I do something else and otherwise I do something different this way I have in my program some way",
    "start": "2561810",
    "end": "2569250"
  },
  {
    "text": "to find out whether a feature which is in some header files is supported or not",
    "start": "2569250",
    "end": "2576119"
  },
  {
    "text": "and I don't have to use some other techniques we have and then we have a",
    "start": "2576119",
    "end": "2582599"
  },
  {
    "text": "couple of minor things I think I don't have time to to go through a lot of them",
    "start": "2582599",
    "end": "2590609"
  },
  {
    "text": "one interesting thing is expression evaluation order we are starting to",
    "start": "2590609",
    "end": "2597750"
  },
  {
    "text": "define now for operators the order of evaluation we had it in the past only",
    "start": "2597750",
    "end": "2604440"
  },
  {
    "text": "for boolean operators so that we said end on our operation shall be evaluates",
    "start": "2604440",
    "end": "2610290"
  },
  {
    "text": "from left to right but anything else we said it's up to the compiler to decide",
    "start": "2610290",
    "end": "2615329"
  },
  {
    "text": "whether they evaluate first the right operand or the left operand this is going to change intentionally I don't",
    "start": "2615329",
    "end": "2623550"
  },
  {
    "text": "have a slide about that because I don't want to have that you write code that depends on that so and we still fight a",
    "start": "2623550",
    "end": "2633420"
  },
  {
    "text": "little bit about it some compiler writers are not very happy about this thing so yeah so be in ramadi remember",
    "start": "2633420",
    "end": "2642660"
  },
  {
    "text": "C++ 17 is not done yet so there might happen something in the last meeting and",
    "start": "2642660",
    "end": "2649959"
  },
  {
    "text": "it's getting very word that this might not be the last meeting the next meeting for about six or seventeen okay maybe",
    "start": "2649959",
    "end": "2658509"
  },
  {
    "text": "maybe I tell you two or three things a based on the time I have left one",
    "start": "2658509",
    "end": "2665049"
  },
  {
    "text": "interesting thing is this one this is uncaught exceptions uncaught exceptions",
    "start": "2665049",
    "end": "2673029"
  },
  {
    "text": "with an S at the end we have already under standard uncaught exception",
    "start": "2673029",
    "end": "2680859"
  },
  {
    "text": "without an S at the end which returns a boolean value and it tells you whether",
    "start": "2680859",
    "end": "2688329"
  },
  {
    "text": "you are in a face handling an exception",
    "start": "2688329",
    "end": "2694769"
  },
  {
    "text": "and then you can react accordingly the problem is and you could use that code",
    "start": "2695400",
    "end": "2701700"
  },
  {
    "text": "to say well oh when I when I'm handling an exception I should not commit my transaction I",
    "start": "2701700",
    "end": "2707610"
  },
  {
    "text": "should roll it back something like that unfortunately it could happen that while",
    "start": "2707610",
    "end": "2713640"
  },
  {
    "text": "you are handling an exception you start",
    "start": "2713640",
    "end": "2718650"
  },
  {
    "text": "some code where it's perfectly valid to fulfill the transaction and that was not",
    "start": "2718650",
    "end": "2725940"
  },
  {
    "text": "possible with the old interface which is now possible with the new interface where we can say I can ask for the",
    "start": "2725940",
    "end": "2733230"
  },
  {
    "text": "number of uncaught exceptions I have here and can be a number of zero one two",
    "start": "2733230",
    "end": "2739470"
  },
  {
    "text": "or more and I when I keep it in my constructor I can check it against that",
    "start": "2739470",
    "end": "2745050"
  },
  {
    "text": "in the destructor and again and then I can decide whether I want to commit or",
    "start": "2745050",
    "end": "2750150"
  },
  {
    "text": "rollback I give you an example here this is a little bit tricky to code so I have",
    "start": "2750150",
    "end": "2757020"
  },
  {
    "text": "here I have this class C C's has to decide whether to commit or rollback the",
    "start": "2757020",
    "end": "2764340"
  },
  {
    "text": "code I have here a class D and E Class E so what happens is the following I",
    "start": "2764340",
    "end": "2770760"
  },
  {
    "text": "create a C objects so the C object nothing with D and E is involved",
    "start": "2770760",
    "end": "2775950"
  },
  {
    "text": "remember now when I declared this object I was not in the context of handling an",
    "start": "2775950",
    "end": "2782280"
  },
  {
    "text": "exception good then I create a D now",
    "start": "2782280",
    "end": "2787890"
  },
  {
    "text": "when I create Adi Adi is yep that's the",
    "start": "2787890",
    "end": "2794880"
  },
  {
    "text": "an ordinary constructor and then I now I throw an exception so what happens now",
    "start": "2794880",
    "end": "2801630"
  },
  {
    "text": "is because we throw an exception we have to call the destructors in the other",
    "start": "2801630",
    "end": "2806790"
  },
  {
    "text": "order so the destructor for D and here you see the interesting thing destructive because of funky called",
    "start": "2806790",
    "end": "2813300"
  },
  {
    "text": "clean up the cleanup funky creates a C",
    "start": "2813300",
    "end": "2818480"
  },
  {
    "text": "now what we have we are in the context of handing districts so and except",
    "start": "2818480",
    "end": "2827190"
  },
  {
    "text": "but it's it's not we are not rolling back we are using why we handle this",
    "start": "2827190",
    "end": "2832850"
  },
  {
    "text": "with this exception we have just created this object see so we have now in the",
    "start": "2832850",
    "end": "2838920"
  },
  {
    "text": "constructor we see that this C was created why we are in one uncaught",
    "start": "2838920",
    "end": "2845630"
  },
  {
    "text": "exception and we create now an object e and inside a try-catch class we create",
    "start": "2845630",
    "end": "2853620"
  },
  {
    "text": "another C and another e and now we say",
    "start": "2853620",
    "end": "2859710"
  },
  {
    "text": "throw an exception so why we are handling an exception we are get another",
    "start": "2859710",
    "end": "2866760"
  },
  {
    "text": "exception here which is okay as long as we catch it and handle it so now now the",
    "start": "2866760",
    "end": "2874980"
  },
  {
    "text": "interesting things happens now we say we call the destructor for e the destructor",
    "start": "2874980",
    "end": "2880530"
  },
  {
    "text": "for e uses a C again so they create a C and now the C knows",
    "start": "2880530",
    "end": "2887280"
  },
  {
    "text": "that when I get created I was in the context of two unhandled exceptions now",
    "start": "2887280",
    "end": "2894750"
  },
  {
    "text": "the destructor finds out nothing happens between construction and destruction so",
    "start": "2894750",
    "end": "2900540"
  },
  {
    "text": "I can commit whatever was at a store C so this was fine code now when I then",
    "start": "2900540",
    "end": "2907230"
  },
  {
    "text": "call the destructor of the outer C so this was here now with this C I find I",
    "start": "2907230",
    "end": "2915270"
  },
  {
    "text": "am a context of to uncork instructions but exceptions but when I close in the",
    "start": "2915270",
    "end": "2921750"
  },
  {
    "text": "construction I had one uncaught exception so I'm now in a rollback mode for this C and that means I call",
    "start": "2921750",
    "end": "2929100"
  },
  {
    "text": "rollback so that that's the way you can you can now program and do the right",
    "start": "2929100",
    "end": "2934470"
  },
  {
    "text": "thing or to the better thing to decide whether this is due to a rollback over",
    "start": "2934470",
    "end": "2940320"
  },
  {
    "text": "this it's just why we are handling exceptions just the destruction code",
    "start": "2940320",
    "end": "2946590"
  },
  {
    "text": "destructor call okay we can skip the rest some other minor things here for",
    "start": "2946590",
    "end": "2953400"
  },
  {
    "text": "example some relaxations that we say if I have an enumeration",
    "start": "2953400",
    "end": "2960600"
  },
  {
    "text": "and I want to initialize this enumeration by a by a ordinary value",
    "start": "2960600",
    "end": "2968510"
  },
  {
    "text": "whether it's in on class on ordinary enum usually that's not allowed but now",
    "start": "2968510",
    "end": "2975930"
  },
  {
    "text": "we allow it if we use curly braces but only then so that means that it becomes",
    "start": "2975930",
    "end": "2985470"
  },
  {
    "text": "easier to say something like I won't use enum to define my own integral type",
    "start": "2985470",
    "end": "2993810"
  },
  {
    "text": "which has the same values like an unsigned char and I can initialize it by",
    "start": "2993810",
    "end": "2999810"
  },
  {
    "text": "42 well it's it's just a support to make this more convenient because in the past",
    "start": "2999810",
    "end": "3005720"
  },
  {
    "text": "you had to use a static cast here we",
    "start": "3005720",
    "end": "3010940"
  },
  {
    "text": "have four new utf-8 character literals we don't have utf-8 support we only have",
    "start": "3010940",
    "end": "3020000"
  },
  {
    "text": "the literals and the literals are only valid when they are valid in the the normal as a normal character and then we",
    "start": "3020000",
    "end": "3029750"
  },
  {
    "text": "also are still thinking about no except no except if discussed to become part of",
    "start": "3029750",
    "end": "3038810"
  },
  {
    "text": "the type so that you say for example",
    "start": "3038810",
    "end": "3044960"
  },
  {
    "text": "something like this I have here a P at a",
    "start": "3044960",
    "end": "3050780"
  },
  {
    "text": "pointer to P to a pointer to a function that gets no argument and returns",
    "start": "3050780",
    "end": "3058100"
  },
  {
    "text": "nothing but it's not signaled to be no",
    "start": "3058100",
    "end": "3063590"
  },
  {
    "text": "except so it's a function pointer that might refer to a function that might",
    "start": "3063590",
    "end": "3068840"
  },
  {
    "text": "throw an exception and in the past currently I can assign this pointer to a",
    "start": "3068840",
    "end": "3075230"
  },
  {
    "text": "reference referring to a function not allowing to throw an exception and this",
    "start": "3075230",
    "end": "3082520"
  },
  {
    "text": "should be fixed by by this type that by",
    "start": "3082520",
    "end": "3087950"
  },
  {
    "text": "by making no except part of the type which does of course not mean you can overload no functions",
    "start": "3087950",
    "end": "3093900"
  },
  {
    "text": "for no accept and not know except like you can't do it for different return",
    "start": "3093900",
    "end": "3099420"
  },
  {
    "text": "types this is still under discussion because it turned out over the last two",
    "start": "3099420",
    "end": "3105690"
  },
  {
    "text": "or three months a lot of people found a lot of interesting problems that fall",
    "start": "3105690",
    "end": "3110940"
  },
  {
    "text": "out from this so this is also not clear whether it will come so what else",
    "start": "3110940",
    "end": "3118980"
  },
  {
    "text": "we have a huge number of bug fixes I will show you one as an example we for",
    "start": "3118980",
    "end": "3127440"
  },
  {
    "text": "example one one small well not bug fixes but making it consistent for example the",
    "start": "3127440",
    "end": "3132779"
  },
  {
    "text": "deprecated attribute can now apply to enumeration in namespaces we removed",
    "start": "3132779",
    "end": "3139859"
  },
  {
    "text": "some stuff so we we no longer have operator plus plus for bool and - - of",
    "start": "3139859",
    "end": "3146760"
  },
  {
    "text": "course also not try grave paragraphs are not supported the keyboard register is",
    "start": "3146760",
    "end": "3152490"
  },
  {
    "text": "no longer supported also it's still a reserved keyword so we also clean some",
    "start": "3152490",
    "end": "3158279"
  },
  {
    "text": "things up in the language here's one example that is for example fixed as a",
    "start": "3158279",
    "end": "3163890"
  },
  {
    "text": "back author let's see as an interesting behavior we have already if you write",
    "start": "3163890",
    "end": "3171299"
  },
  {
    "text": "this look here well let's start here Auto X is inertia",
    "start": "3171299",
    "end": "3177690"
  },
  {
    "text": "lies by the integer 42 everybody of you",
    "start": "3177690",
    "end": "3183150"
  },
  {
    "text": "would read accessing in the good news is it is correct access it used to be an",
    "start": "3183150",
    "end": "3190799"
  },
  {
    "text": "end but the interesting thing happens if we use the modern form of initialization",
    "start": "3190799",
    "end": "3197420"
  },
  {
    "text": "the curly braces I put that that most of",
    "start": "3197420",
    "end": "3203609"
  },
  {
    "text": "you would say oh axis and initialized by 42 but according to the standard X is an",
    "start": "3203609",
    "end": "3210869"
  },
  {
    "text": "initializer list having one element named 42 the funny thing is compilers",
    "start": "3210869",
    "end": "3220079"
  },
  {
    "text": "also already make it correct and if you have this Auto X 1 comma 2 what is this",
    "start": "3220079",
    "end": "3226410"
  },
  {
    "text": "in your opinion and we clarified for example things like",
    "start": "3226410",
    "end": "3231779"
  },
  {
    "text": "this it's interesting how we clarify that we say now a direct initialization",
    "start": "3231779",
    "end": "3238589"
  },
  {
    "text": "with curly braces it's not an initializer this when you use auto here",
    "start": "3238589",
    "end": "3244279"
  },
  {
    "text": "so this initialize an integer if you have a comma here that's an error now",
    "start": "3244279",
    "end": "3252319"
  },
  {
    "text": "but if you use the copy initialization so the assignment operator here then",
    "start": "3252319",
    "end": "3261359"
  },
  {
    "text": "this on the Left will be initialize honest initialize a list of one element of multiple elements so that I'm not",
    "start": "3261359",
    "end": "3270479"
  },
  {
    "text": "sure whether this is not more surprising than before but because I'm personally",
    "start": "3270479",
    "end": "3277380"
  },
  {
    "text": "I'm a friend of of reducing the difference between initialization without and with the equal sign but I'm",
    "start": "3277380",
    "end": "3285869"
  },
  {
    "text": "not a car guy I'm just an application programmer but now you know the rules and by the way these rules are already",
    "start": "3285869",
    "end": "3292259"
  },
  {
    "text": "implemented in the compilers because too many people were too confused by what is happening here things like this we fix",
    "start": "3292259",
    "end": "3303140"
  },
  {
    "text": "which Mike to some extent even break existing programs but yeah so yeah let's",
    "start": "3303140",
    "end": "3311219"
  },
  {
    "text": "that's progress so that's it for the moment that's only the language features that",
    "start": "3311219",
    "end": "3318599"
  },
  {
    "text": "only the language features I had time for or I have understood enough to present them there's more definitely as",
    "start": "3318599",
    "end": "3327179"
  },
  {
    "text": "I said after a break I will come to the library features and I think we have",
    "start": "3327179",
    "end": "3332939"
  },
  {
    "text": "time next for three minutes or so for some questions I don't guarantee that I'm able to",
    "start": "3332939",
    "end": "3339029"
  },
  {
    "text": "answer them yeah structured binding",
    "start": "3339029",
    "end": "3350510"
  },
  {
    "text": "just about circle - yeah so the question",
    "start": "3350510",
    "end": "3371730"
  },
  {
    "text": "is can I use cine to restrict which structure bindings are allowed or",
    "start": "3371730",
    "end": "3379309"
  },
  {
    "text": "I see no reason that the swinish should not work here and the way I usually",
    "start": "3388080",
    "end": "3395030"
  },
  {
    "text": "handle this is I don't guarantee I want to try it out at least in two compilers",
    "start": "3395030",
    "end": "3400860"
  },
  {
    "text": "or find the corresponding wording but I see no reason not to allow it here",
    "start": "3400860",
    "end": "3406140"
  },
  {
    "text": "because to some extent we don't we don't want to introduce you a really new",
    "start": "3406140",
    "end": "3411450"
  },
  {
    "text": "feature so it should be something like Auto uke and Auto V are initialized here and",
    "start": "3411450",
    "end": "3418680"
  },
  {
    "text": "all the other rules should apply as before so I would imagine that you can",
    "start": "3418680",
    "end": "3425040"
  },
  {
    "text": "spin out things here are the template",
    "start": "3425040",
    "end": "3435510"
  },
  {
    "text": "constructor destruction okay okay",
    "start": "3435510",
    "end": "3442250"
  },
  {
    "text": "yeah so here's again the question could",
    "start": "3448470",
    "end": "3462700"
  },
  {
    "text": "be used in a to disable this deduction I would also assume that yeah because the",
    "start": "3462700",
    "end": "3471850"
  },
  {
    "text": "trick of a sign is make it not compile and whenever template code does not",
    "start": "3471850",
    "end": "3478090"
  },
  {
    "text": "compile it's not the an error it's just ignored and I see no reason that this would not apply here",
    "start": "3478090",
    "end": "3486900"
  },
  {
    "text": "you so say it again so we yeah we have yeah",
    "start": "3490130",
    "end": "3500150"
  },
  {
    "text": "we that's right so we could use Finny instead of the deduction guides I mean to some extent deduction guides a",
    "start": "3500150",
    "end": "3507430"
  },
  {
    "text": "convenient way to to 3d out everything here but it's not only that I mean yeah",
    "start": "3507430",
    "end": "3517090"
  },
  {
    "text": "where are they I can't speak and move at the same time so here they are",
    "start": "3517090",
    "end": "3522170"
  },
  {
    "text": "yeah so and I I would expect to some",
    "start": "3522170",
    "end": "3527390"
  },
  {
    "text": "extent that both is possible spinning out and use deduction guide to do the right thing certainly the deduction guys as a more",
    "start": "3527390",
    "end": "3534470"
  },
  {
    "text": "intuitive interface I mean I I hate funny I have to say I would really",
    "start": "3534470",
    "end": "3540890"
  },
  {
    "text": "prefer to have Sweeney as a language feature instead of a template act using",
    "start": "3540890",
    "end": "3546200"
  },
  {
    "text": "using template trick nobody can understand what happens there unless people I don't know have smart minds",
    "start": "3546200",
    "end": "3553790"
  },
  {
    "text": "also so if we just would say something like requires yeah yeah I mean that's",
    "start": "3553790",
    "end": "3561620"
  },
  {
    "text": "more or less that's more or less saying I want to have concepts yeah and now with concepts we could we could skip a",
    "start": "3561620",
    "end": "3568220"
  },
  {
    "text": "lot of fini unfortunately we can't skip it now yeah yeah",
    "start": "3568220",
    "end": "3577010"
  },
  {
    "text": "okay one last question so the question",
    "start": "3577010",
    "end": "3594860"
  },
  {
    "text": "is can be used equals delete yeah I see no reason that it should not go up mine",
    "start": "3594860",
    "end": "3601820"
  },
  {
    "text": "you can you can apply equal to delete everywhere yeah but I will try it out",
    "start": "3601820",
    "end": "3607280"
  },
  {
    "text": "and later so just using even a deduction guide with equal to it oh no I'm not",
    "start": "3607280",
    "end": "3613130"
  },
  {
    "text": "sure about that I don't think that specified yeah but yeah mmm probably not",
    "start": "3613130",
    "end": "3622190"
  },
  {
    "text": "memory no I I have no clue you see so let's find out",
    "start": "3622190",
    "end": "3628270"
  },
  {
    "text": "yeah",
    "start": "3633610",
    "end": "3636610"
  },
  {
    "text": "so you are saying a call Bangkok's temporaries initialized in in",
    "start": "3642160",
    "end": "3647809"
  },
  {
    "text": "the in the essence which destroyed I be",
    "start": "3647809",
    "end": "3653059"
  },
  {
    "text": "careful with that so no because because I think all these which are in a very early stage so I",
    "start": "3653059",
    "end": "3659329"
  },
  {
    "text": "don't think this is a proof for anything and even this might still be under consideration as a consequence of what",
    "start": "3659329",
    "end": "3667670"
  },
  {
    "text": "we standardized here so I would not say that this is a proof that this is the",
    "start": "3667670",
    "end": "3672920"
  },
  {
    "text": "case I personally would be a little bit surprised if the chain if the woods would this was there because in the S",
    "start": "3672920",
    "end": "3681349"
  },
  {
    "text": "state mental I consider to be very dangerous to say that it doesn't extend",
    "start": "3681349",
    "end": "3688970"
  },
  {
    "text": "the lifetime until the end of the if statement personally and it would be at",
    "start": "3688970",
    "end": "3694579"
  },
  {
    "text": "least inconsistent to the existing rules we will we have to find it out okay",
    "start": "3694579",
    "end": "3701470"
  },
  {
    "text": "that's it thank you very much if you want in 20 minutes or 15 minutes we talk",
    "start": "3701470",
    "end": "3706640"
  },
  {
    "text": "about the library thank you",
    "start": "3706640",
    "end": "3711278"
  }
]