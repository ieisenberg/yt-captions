[
  {
    "text": "hello everyone uh thank you for being here my name is Timo dumner also known",
    "start": "6960",
    "end": "12360"
  },
  {
    "text": "as Timor audio on Twitter I am developer Advocate at jetbrains we make um developer tools for example the c-line",
    "start": "12360",
    "end": "19680"
  },
  {
    "text": "IDE and other stuff um this is actually talk two of my three talk center row",
    "start": "19680",
    "end": "26400"
  },
  {
    "text": "talk Marathon here on this conference so ain't going well so far and this one I was actually not supposed to give this",
    "start": "26400",
    "end": "32640"
  },
  {
    "text": "one I only signed up for this one two days ago because they had some free slots available this talk that I was originally preparing for another",
    "start": "32640",
    "end": "38219"
  },
  {
    "text": "conference which is going to happen later so um I only put together the slides this week I haven't practiced this talk",
    "start": "38219",
    "end": "44579"
  },
  {
    "text": "at all so don't know how this is going to go this is a kind of very spontaneous one this one",
    "start": "44579",
    "end": "49680"
  },
  {
    "text": "um so I would really appreciate because of that um if you could give me feedback afterwards because it might be quite a little bit raw around the edges like",
    "start": "49680",
    "end": "57180"
  },
  {
    "text": "if you find anything that's wrong that you don't like where like the pacing of the talk doesn't quite work or whatever like please let me know because this is",
    "start": "57180",
    "end": "64559"
  },
  {
    "text": "a talk that I actually supposed to prepare for another conference later so I'm still working on it so I would",
    "start": "64559",
    "end": "69659"
  },
  {
    "text": "really appreciate your feedback on this talk um anyway let's talk about C plus 23",
    "start": "69659",
    "end": "75360"
  },
  {
    "text": "um which is not yet the official standard but it is now feature complete",
    "start": "75360",
    "end": "80700"
  },
  {
    "text": "this is something that happened just one month ago at our last plenary session committee plan recession",
    "start": "80700",
    "end": "87180"
  },
  {
    "text": "um and uh so it's not done done yet we have about half a year left to fix bugs which",
    "start": "87180",
    "end": "92580"
  },
  {
    "text": "is called ballot resolution on the committee there's two more committee meetings basically I don't think anything dramatic is going to happen in",
    "start": "92580",
    "end": "98579"
  },
  {
    "text": "these two meetings so we basically know the feature set of C plus 23 already so that's a great time to talk about it",
    "start": "98579",
    "end": "104640"
  },
  {
    "text": "even though it's only going to be officially become the standard next year developing C plus 23 I mean I should say",
    "start": "104640",
    "end": "111299"
  },
  {
    "text": "I'm a member of the committee I have been on the committee for about seven years now I think so not as long as some",
    "start": "111299",
    "end": "116340"
  },
  {
    "text": "other people but long enough to have been around for all of some of C plus 7 17 all of C plus 20 and now all of C",
    "start": "116340",
    "end": "123479"
  },
  {
    "text": "plus 23. and 23 felt very different because it was all done remotely because of the pandemic we had to do all the",
    "start": "123479",
    "end": "130080"
  },
  {
    "text": "committee meetings online um which was a completely different way of working together and um we didn't",
    "start": "130080",
    "end": "136800"
  },
  {
    "text": "have an in-person committee meeting since February 2020 and I think that's part of the reason why we didn't get all",
    "start": "136800",
    "end": "141840"
  },
  {
    "text": "the things in the C bus plus 23 that we wanted to get in so we didn't get executors we didn't get networking we",
    "start": "141840",
    "end": "147180"
  },
  {
    "text": "didn't get pattern matching we didn't get contracts uh but given the circumstances I think the committee did a pretty good job",
    "start": "147180",
    "end": "152940"
  },
  {
    "text": "because we did actually get a lot of really good stuff in C plus plus 23. um so there is a lot of good stuff in",
    "start": "152940",
    "end": "158520"
  },
  {
    "text": "there and I was as I Was preparing this talk I was like okay but which of these should I talk about and I have done",
    "start": "158520",
    "end": "164099"
  },
  {
    "text": "talks about C plus 20 like three years ago when that was the thing that we were working on",
    "start": "164099",
    "end": "169200"
  },
  {
    "text": "um um there were two of them one was a talk at cppcon C plus 20 the small",
    "start": "169200",
    "end": "174480"
  },
  {
    "text": "things which was like a talk where I put like I talked about 30 different features that were in 620 and I thought",
    "start": "174480",
    "end": "180420"
  },
  {
    "text": "yeah I don't really want to do that kind of talk where I just talk about one picture after the other because like there's not really enough time to talk",
    "start": "180420",
    "end": "186540"
  },
  {
    "text": "in depth about any of them and then the other talk that I gave on C plus 20 was called House 20 changes the",
    "start": "186540",
    "end": "193140"
  },
  {
    "text": "way you write code and I shamelessly stole the title from that talk for this one which is the 23 Edition",
    "start": "193140",
    "end": "199860"
  },
  {
    "text": "and at the C plus 20 talk I talked basically about the four big features of",
    "start": "199860",
    "end": "204900"
  },
  {
    "text": "C plus 20 which were quarantine's Concepts ranges and modules and obviously those four changed the way we",
    "start": "204900",
    "end": "211620"
  },
  {
    "text": "write code in very very significant ways they're not just tools you can use they change our mental",
    "start": "211620",
    "end": "217260"
  },
  {
    "text": "model of what C plus plus is and how we use it right so they change the way we think about functions the way we think",
    "start": "217260",
    "end": "223019"
  },
  {
    "text": "about templates the way you think about algorithms and the way you think about you know organizing and compiling and packaging",
    "start": "223019",
    "end": "229500"
  },
  {
    "text": "our code which are extremely fundamental things so I spoke about those four in in that talk and C plus 23 by comparison is a",
    "start": "229500",
    "end": "237360"
  },
  {
    "text": "much smaller release right we don't have these features that are going to completely change the world like like",
    "start": "237360",
    "end": "242519"
  },
  {
    "text": "these um but I would argue that it still has a handful of features that will change the",
    "start": "242519",
    "end": "247799"
  },
  {
    "text": "way people write code and it will change the way people think about C plus plus and learn C plus plus and use C plus",
    "start": "247799",
    "end": "253200"
  },
  {
    "text": "plus the way you think about this is that c plus class is basically like a really large toolbox right so you have your sauce chisels screwdrivers and then",
    "start": "253200",
    "end": "260940"
  },
  {
    "text": "you have some if you talk about screwdrivers for example you have like a slotted screwdrivers and Phillips screwdrivers and maybe Torx screwdrivers",
    "start": "260940",
    "end": "267720"
  },
  {
    "text": "and then you know someone invents a pentalope screw which you know it's great for a particular type of product",
    "start": "267720",
    "end": "273680"
  },
  {
    "text": "maybe maybe it solves a very particular problem hopefully like if you have that",
    "start": "273680",
    "end": "278820"
  },
  {
    "text": "problem you're going to reach for that pentalobe screwdriver because you need to fix your IPhone so you're gonna reach for that screwdriver right",
    "start": "278820",
    "end": "286620"
  },
  {
    "text": "um and most new features in the language are kind of like this right but what I want to talk about is not that it's more",
    "start": "286620",
    "end": "292320"
  },
  {
    "text": "like features that are like the introduction of the cordless electric screwdriver right which is really going to change how you",
    "start": "292320",
    "end": "298020"
  },
  {
    "text": "deal with screws in general right you don't have to turn the screws by hand anymore you can just go right and that's",
    "start": "298020",
    "end": "303840"
  },
  {
    "text": "that's a game changer so these are kind of the features that I'm more interested in um like everybody should be aware of",
    "start": "303840",
    "end": "310199"
  },
  {
    "text": "those and and we have a few things in C plus 23 where you can argue you know they're kind of like that",
    "start": "310199",
    "end": "317340"
  },
  {
    "text": "um so what is in C plus 23 as of right now again like there's going to be half",
    "start": "317340",
    "end": "322500"
  },
  {
    "text": "a year of bug fixing but there's not going to be any more new features added because we passed the feature freeze if",
    "start": "322500",
    "end": "327960"
  },
  {
    "text": "you go to CPP reference there is this page there it's called C plus compiler support and it has this big table which",
    "start": "327960",
    "end": "333419"
  },
  {
    "text": "basically enumerates all the all the features that are um in the C plus 23 draft as of now so there's a",
    "start": "333419",
    "end": "341100"
  },
  {
    "text": "long list of core language features I'm sure some of you have seen this table and then there's an even longer",
    "start": "341100",
    "end": "347400"
  },
  {
    "text": "list of Library features and which compilers already support them basically so that's a very very long list that's a",
    "start": "347400",
    "end": "354240"
  },
  {
    "text": "lot of stuff actually right it's small release and maybe not that small we have so many features in there if you zoom",
    "start": "354240",
    "end": "359340"
  },
  {
    "text": "out this is what it looks like it's quite a long list this leftmost column these are",
    "start": "359340",
    "end": "364500"
  },
  {
    "text": "the actual features um almost half of these by the way got approved just at the last Canary meeting",
    "start": "364500",
    "end": "370080"
  },
  {
    "text": "in July so that's pretty pretty interesting let me just extract this kind of leftmost column into one slide",
    "start": "370080",
    "end": "375539"
  },
  {
    "text": "and then we get basically three pages it doesn't even fit into one page so here are all the new here's all the new core",
    "start": "375539",
    "end": "381180"
  },
  {
    "text": "language stuff and then we have two pages of new standard Library stuff right that's that's all let's see plus",
    "start": "381180",
    "end": "386460"
  },
  {
    "text": "finished for you now and obviously I don't want to talk about all of this this is way too much like I",
    "start": "386460",
    "end": "391500"
  },
  {
    "text": "would spend a week talking about this so I need to kind of Whittle this down to like end up with like",
    "start": "391500",
    "end": "397919"
  },
  {
    "text": "a few features that I think are most significant so how am I going to do this I looked at this and I went ahead and I",
    "start": "397919",
    "end": "403800"
  },
  {
    "text": "removed all the defect reports deprecations and deprecations clarifications there's a lot of like",
    "start": "403800",
    "end": "409380"
  },
  {
    "text": "make something const Expo make something no except add a new Constructor here so I just you know said I'm not going to",
    "start": "409380",
    "end": "416039"
  },
  {
    "text": "talk about any of this stuff then there is a big topic um character encoding and unicode support and all",
    "start": "416039",
    "end": "421620"
  },
  {
    "text": "that and a lot of work has gone into um that in C plus 23 a big shout out in",
    "start": "421620",
    "end": "427319"
  },
  {
    "text": "particular to coronation who has done a lot of work on that unfortunately I'm not the expert I don't",
    "start": "427319",
    "end": "432900"
  },
  {
    "text": "I don't know how text works in C plus plus so I'm really not qualified to talk about that if you want to know about",
    "start": "432900",
    "end": "437940"
  },
  {
    "text": "that talk to content and the other people who have done work on this um and the same with uh ranges there has",
    "start": "437940",
    "end": "444419"
  },
  {
    "text": "been a lot of work on ranges a lot of stuff got added to ranges compared to CBS 20 and again",
    "start": "444419",
    "end": "449699"
  },
  {
    "text": "it's quite a big and complicated feature and there are brilliant people who are doing talks on ranges and the new stuff",
    "start": "449699",
    "end": "455280"
  },
  {
    "text": "in CSS 23 so um I'm just going to even though it's very interesting not talk about that so",
    "start": "455280",
    "end": "461699"
  },
  {
    "text": "there are talks about Rangers and they're brilliant people doing those talks so go there if you want to learn about Rangers and all the cool new stuff",
    "start": "461699",
    "end": "467280"
  },
  {
    "text": "and ranges in csr23 not gonna talk about here and then I went ahead and also kind of removed",
    "start": "467280",
    "end": "473520"
  },
  {
    "text": "everything else that I felt was cool but it was like in addition to an existing feature or an improvement of an existing",
    "start": "473520",
    "end": "479699"
  },
  {
    "text": "feature rather than a completely new feature on its own right and so if I remove all of these things then everything kind of fits onto one page",
    "start": "479699",
    "end": "486840"
  },
  {
    "text": "and this is kind of the list of really brand new features in zip 23 that are",
    "start": "486840",
    "end": "492900"
  },
  {
    "text": "not improvements or additions but just completely new stuff and we can consider talking about all of this now",
    "start": "492900",
    "end": "499680"
  },
  {
    "text": "a lot of them are kind of relatively small and relatively self-contained and specialized so these are kind of the the",
    "start": "499680",
    "end": "505500"
  },
  {
    "text": "pentalobe screwdrivers or something like this so I don't want to really talk about those so I remove all of these and",
    "start": "505500",
    "end": "512279"
  },
  {
    "text": "we're left with this short list which is kind of the bigger features this is kind of the meat right of of C plus 23.",
    "start": "512279",
    "end": "520080"
  },
  {
    "text": "and yeah this is this is a good list um it's a little bit too much for one hour so I need to list down a little bit",
    "start": "520080",
    "end": "525779"
  },
  {
    "text": "further these two are kind of complementing C plus 20 right so we now have the standard Library as a module",
    "start": "525779",
    "end": "531540"
  },
  {
    "text": "and we have some rudimentary uh support for core routines and a standard library in the form of the generator it's not",
    "start": "531540",
    "end": "538740"
  },
  {
    "text": "really something completely new it's more like complementing there's a 20 and then we have these things stack twist",
    "start": "538740",
    "end": "544080"
  },
  {
    "text": "Library move only function flat map flats are super cool great addition to the standard Library very useful and you",
    "start": "544080",
    "end": "549540"
  },
  {
    "text": "will use them if you need them but again I would say they're kind of self-contained they don't touch other stuff around them they're like this is",
    "start": "549540",
    "end": "555959"
  },
  {
    "text": "this feature it's great you can you can use it so they're great at their job but they will not really change the way we think",
    "start": "555959",
    "end": "561779"
  },
  {
    "text": "about C plus plus they will just kind of give you another tool so I'm not going to talk about these and",
    "start": "561779",
    "end": "568680"
  },
  {
    "text": "then we're left with these four and that's what the rest of the talk is going to be about and I believe these",
    "start": "568680",
    "end": "573779"
  },
  {
    "text": "are kind of the cross-cutting C plus 360 features that every Superstars developer",
    "start": "573779",
    "end": "579240"
  },
  {
    "text": "should be aware of and that will have the biggest impact on how we think about C plus plus how we write C plus plus how",
    "start": "579240",
    "end": "584820"
  },
  {
    "text": "we learn C plus plus so let's talk about these um four things let's start with deducing this this uh",
    "start": "584820",
    "end": "592140"
  },
  {
    "text": "using this is by far the most significant uh core language feature in C plus 23 so it's not like modules which",
    "start": "592140",
    "end": "597660"
  },
  {
    "text": "like changes the entire ecosystem it's not like that you can certainly write C plus plus without knowing about deducing",
    "start": "597660",
    "end": "603600"
  },
  {
    "text": "this but it's actually surprising how many consequences this feature actually has and how much benefit it gives you so I",
    "start": "603600",
    "end": "609360"
  },
  {
    "text": "think you should really be aware of this this is the front page of the paper The Proposal",
    "start": "609360",
    "end": "614820"
  },
  {
    "text": "um according to bendeen who is one of the authors um this feature has been kind of gestating since somewhere around 2013 so the idea",
    "start": "614820",
    "end": "622380"
  },
  {
    "text": "has been floating around for a while it took a while to standardize that we now have it in C plus 20. bendeen himself",
    "start": "622380",
    "end": "628200"
  },
  {
    "text": "gave a fantastic talk last year at cppcon called deducing these patterns if",
    "start": "628200",
    "end": "633240"
  },
  {
    "text": "you want to know all the details about this feature I recommend you watch this talk it's like a whole hour just about deducing this",
    "start": "633240",
    "end": "639300"
  },
  {
    "text": "as of right now I think this is the ultimate reference on deducing this obviously like I'm not going to repeat all of this",
    "start": "639300",
    "end": "645360"
  },
  {
    "text": "I'm going to give a little bit of a condensed version um but yeah um do you think this is remarkable",
    "start": "645360",
    "end": "651899"
  },
  {
    "text": "because um I remember I think it was piano I'm not sure somebody said um there is this quote uh you know if you're adding stuff",
    "start": "651899",
    "end": "659220"
  },
  {
    "text": "to the language which of those editions are actually good new features and um this quote says that a core language",
    "start": "659220",
    "end": "665579"
  },
  {
    "text": "proposal is good if the proposed feature solves three seemingly unrelated problems simultaneously",
    "start": "665579",
    "end": "671579"
  },
  {
    "text": "right then it's a good feature which is worth adding which is worth adding to the complexity of Super Source C plus",
    "start": "671579",
    "end": "677040"
  },
  {
    "text": "plus because it gives us all this benefit and it turns out that um using this is actually",
    "start": "677040",
    "end": "682500"
  },
  {
    "text": "fits that pretty well so here's the first problem that it solves so let's say we have a template",
    "start": "682500",
    "end": "689760"
  },
  {
    "text": "or just you know any class and in simplest class and as you probably",
    "start": "689760",
    "end": "695519"
  },
  {
    "text": "all know you can overload a member function on whether or not it's const basically whether or not the this object itself that you're calling it on whether",
    "start": "695519",
    "end": "701760"
  },
  {
    "text": "or not that const this is I hope well now and hopefully to everybody here",
    "start": "701760",
    "end": "707000"
  },
  {
    "text": "somewhat less known is that you can also overload a member function on whether the um this object is an R value or an L",
    "start": "707000",
    "end": "714120"
  },
  {
    "text": "value and you do that by adding these ref specifiers here and you can also combine this",
    "start": "714120",
    "end": "720360"
  },
  {
    "text": "and then you get these four overloads uh ref ref and then constrap and construfref",
    "start": "720360",
    "end": "727440"
  },
  {
    "text": "um and so that's something that you know comes up and um it's kind of the simplest way of thinking about using",
    "start": "727440",
    "end": "734519"
  },
  {
    "text": "this is that it the first thing it does it adds a new syntax to write the same thing because it's like this kind of",
    "start": "734519",
    "end": "739800"
  },
  {
    "text": "weird thing you you have this like thing at the end uh which is uh saying something about",
    "start": "739800",
    "end": "745560"
  },
  {
    "text": "the implicit first argument of a member function which is the this pointer right it's the implicit first argument that",
    "start": "745560",
    "end": "751019"
  },
  {
    "text": "you don't write so the first thing that that using this does it actually lets you write that explicitly so now you can",
    "start": "751019",
    "end": "756959"
  },
  {
    "text": "it's just a different Syntax for exactly the same thing so you can now write this parameter declaration",
    "start": "756959",
    "end": "763800"
  },
  {
    "text": "and then that's the the implicit first uh argument which is not being made",
    "start": "763800",
    "end": "769500"
  },
  {
    "text": "explicit and you can spell out now whether that's constrap const ref and so on and so on",
    "start": "769500",
    "end": "774959"
  },
  {
    "text": "so that's just another way of spelling the same thing by making this first argument explicit rather than implicit",
    "start": "774959",
    "end": "782339"
  },
  {
    "text": "and the other thing that lets you do is it lets you name that right so I can just name that argument",
    "start": "782339",
    "end": "787860"
  },
  {
    "text": "um call itself that's you know I guess python people are probably used to this",
    "start": "787860",
    "end": "793019"
  },
  {
    "text": "but now the really cool thing is you can not only write it like this but you can actually template on this so you can",
    "start": "793019",
    "end": "798240"
  },
  {
    "text": "write it like that and all of a sudden the duplication goes away so you can template on the type of this and you can",
    "start": "798240",
    "end": "805139"
  },
  {
    "text": "also template on whether it's a reference or however you reference or constant non-constant you're going to get template argument deduction which is",
    "start": "805139",
    "end": "811500"
  },
  {
    "text": "going to tell you what it is and because it's just a template you can also use the alternative syntax here",
    "start": "811500",
    "end": "818880"
  },
  {
    "text": "and yeah when this is useful so the problem the first problem it solves is duplication this actually comes up",
    "start": "818880",
    "end": "824880"
  },
  {
    "text": "here's an example if you're implementing stood optional value it just returns you know the value of",
    "start": "824880",
    "end": "830760"
  },
  {
    "text": "the optional but you have to do this kind of stuff because the optional could be reference RV reference non-content",
    "start": "830760",
    "end": "837660"
  },
  {
    "text": "depending on that you need to return a different type so you end up repeating pretty much the same code four times",
    "start": "837660",
    "end": "843300"
  },
  {
    "text": "which is ugly right it's the same logic why do you have to write this four times and turns out",
    "start": "843300",
    "end": "848459"
  },
  {
    "text": "in C plus 20 yet before there isn't really a good solution for this so one thing you can do is you can just repeat",
    "start": "848459",
    "end": "853800"
  },
  {
    "text": "the same code four times or essentially the same code another thing you can do is you can use one of the overloads",
    "start": "853800",
    "end": "859320"
  },
  {
    "text": "which is going to have the implementation and the other three are going to kind of refer to it but then you have to do all these ugly casts because like the parameter types and the",
    "start": "859320",
    "end": "866639"
  },
  {
    "text": "return times they don't quite match so that's also ugly you can also Factor it out into a private implementation",
    "start": "866639",
    "end": "872459"
  },
  {
    "text": "function and you have the other four members kind of refer to that it's also kind of ugly um so um but in C",
    "start": "872459",
    "end": "880019"
  },
  {
    "text": "plus 23 we don't have to do any of this stuff because we can just template on the type of self and then it's going to",
    "start": "880019",
    "end": "885959"
  },
  {
    "text": "look like this so now you only have to write it once and that's going to do the right thing here and again I have this new syntax",
    "start": "885959",
    "end": "892079"
  },
  {
    "text": "this self and self I can write something else there but I just call itself",
    "start": "892079",
    "end": "898459"
  },
  {
    "text": "and you also have the short Syntax for that so now this whole code just boils",
    "start": "898459",
    "end": "903959"
  },
  {
    "text": "down to these four lines of code and it works for all of these cases and you don't have to duplicate anything so",
    "start": "903959",
    "end": "909060"
  },
  {
    "text": "that's the first problem that it solves that's pretty great the second problem that it solves is um",
    "start": "909060",
    "end": "915899"
  },
  {
    "text": "it solves the problem of the Curiosity recurring template pattern being a bit of a pain in the neck",
    "start": "915899",
    "end": "923820"
  },
  {
    "text": "um I don't know um how your experience was but I remember what my experience was",
    "start": "923820",
    "end": "929459"
  },
  {
    "text": "uh with this um this is actually one way in which you know a new feature can change not only the way we use super",
    "start": "929459",
    "end": "934740"
  },
  {
    "text": "stuff but also the way we learn it so I remember how I learned C plus plus this is a picture of me many years ago I",
    "start": "934740",
    "end": "941820"
  },
  {
    "text": "was actually at the time working at the astrophysics Institute of Potsdam in Germany I was not doing C plus plus I",
    "start": "941820",
    "end": "948000"
  },
  {
    "text": "was doing fortnite and C and I decided I want to learn I want to leave Academia and become a super fast",
    "start": "948000",
    "end": "953940"
  },
  {
    "text": "developer because I have just kind of discovered C plus plus I thought this is really cool I want to you know do that professionally and I Was preparing for",
    "start": "953940",
    "end": "960300"
  },
  {
    "text": "my first job interview so what was I doing I read Scott Myers that was one thing one book I read and",
    "start": "960300",
    "end": "965880"
  },
  {
    "text": "the other one was this online book C plus idioms and everybody said oh this is the stuff that you really need to",
    "start": "965880",
    "end": "970980"
  },
  {
    "text": "know like this is the stuff they're going to ask you at the interview so there's stuff like the pimple idiom the erase remove idiom and crtp and you",
    "start": "970980",
    "end": "977160"
  },
  {
    "text": "really got to know these things if you want to call yourself a simple stuff developer the pimple idiom I haven't really seen",
    "start": "977160",
    "end": "982860"
  },
  {
    "text": "it around as much anymore the razor move idiom we got rid of and C plus 20 we now have study rays",
    "start": "982860",
    "end": "988680"
  },
  {
    "text": "you pass on a vector you don't have to do this ever again so we kind of we are simplifying these things these",
    "start": "988680",
    "end": "994560"
  },
  {
    "text": "things are ugly they're hard to learn right and the one by one like we are kind of getting rid of them and",
    "start": "994560",
    "end": "1000139"
  },
  {
    "text": "now we're getting rid of crtp which I'm very happy about um what is crtp just quick primer for",
    "start": "1000139",
    "end": "1006259"
  },
  {
    "text": "people who might forgot me at half maybe forgotten what this is here's how you do like this is the",
    "start": "1006259",
    "end": "1012259"
  },
  {
    "text": "classical polymorphism the classical kind of object oriented like this is the same you do in Java or any other like",
    "start": "1012259",
    "end": "1018019"
  },
  {
    "text": "object-oriented language uh you have a base class animal and then it has a virtual function speak and then",
    "start": "1018019",
    "end": "1024620"
  },
  {
    "text": "you have like a cat and a dog inherit from it and they like cat makes meow and the dog makes wolf right everybody knows",
    "start": "1024620",
    "end": "1031760"
  },
  {
    "text": "this the gonna find this in every programming book and you have a reference to an animal or",
    "start": "1031760",
    "end": "1036980"
  },
  {
    "text": "a pointer to an animal and it's going to call the right thing um if you do this like this you have run",
    "start": "1036980",
    "end": "1042079"
  },
  {
    "text": "time a virtual function dispatch right so you're gonna pay runtime cost for this you're gonna have virtual function",
    "start": "1042079",
    "end": "1047418"
  },
  {
    "text": "dispatch pointer indirection blah blah blah blah a lot of the time you know at compile",
    "start": "1047419",
    "end": "1054080"
  },
  {
    "text": "time but the most derived class is so you can just not pay the cost for that and do compile time polymorphism and",
    "start": "1054080",
    "end": "1059780"
  },
  {
    "text": "that's where crtp comes in and now you have to do this weird thing where you have your base class the",
    "start": "1059780",
    "end": "1065780"
  },
  {
    "text": "animal and you template it on the derived class right this is what crtp does",
    "start": "1065780",
    "end": "1071120"
  },
  {
    "text": "so you template it on the class that it's later going to be deriving that is going to be deriving from it later right",
    "start": "1071120",
    "end": "1078620"
  },
  {
    "text": "and then the other thing you have to do is you have to do this weird static cast to derive in order to call any of the",
    "start": "1078620",
    "end": "1084020"
  },
  {
    "text": "functions so this is kind of our virtual function call but like at compile time and then uh if you're inheriting from it",
    "start": "1084020",
    "end": "1091160"
  },
  {
    "text": "and you're implementing your cat or your dog this you have to do this other weird thing where you inherit from the base clasp then you have to pass yourself in",
    "start": "1091160",
    "end": "1097940"
  },
  {
    "text": "as a template parameter of the base class right this is this is how crtp works everybody has seen this before right has",
    "start": "1097940",
    "end": "1104360"
  },
  {
    "text": "anybody not seen this before okay most okay a few people but most people seem to be familiar with it this",
    "start": "1104360",
    "end": "1110000"
  },
  {
    "text": "is this is how you do compile time polymorphism and C plus 20 and before and it's just super awkward right it's",
    "start": "1110000",
    "end": "1116000"
  },
  {
    "text": "just weird like for years I couldn't remember if the bass was templated on the derived or the derived it says",
    "start": "1116000",
    "end": "1121280"
  },
  {
    "text": "templated on the base and it's just it's just not intuitive at all this is one of those things that makes",
    "start": "1121280",
    "end": "1127700"
  },
  {
    "text": "Superstars really hard to learn um well do you think this makes it",
    "start": "1127700",
    "end": "1133039"
  },
  {
    "text": "easier because instead of doing this steady cast Drive thing we now can just write this Auto self",
    "start": "1133039",
    "end": "1139400"
  },
  {
    "text": "right so we can use deducing this here and the important thing here is that deducing this is actually going to",
    "start": "1139400",
    "end": "1144980"
  },
  {
    "text": "deduce the most aesthetically known derived class so the type of the self here is going to",
    "start": "1144980",
    "end": "1153740"
  },
  {
    "text": "be cat or doggo it's not going to be animal it's going to be cat or dog or whatever you're deriving from whatever",
    "start": "1153740",
    "end": "1159080"
  },
  {
    "text": "your most derived classes that's known at compile time right so this is already better because you",
    "start": "1159080",
    "end": "1165080"
  },
  {
    "text": "don't have to do the static cast to the right thing you can just call it right because it's deducing the derived type",
    "start": "1165080",
    "end": "1171799"
  },
  {
    "text": "for you there and you will also notice that we don't need any of the template stuff anymore",
    "start": "1171799",
    "end": "1177320"
  },
  {
    "text": "right did you think this will deduce derived using normal template argument deduction",
    "start": "1177320",
    "end": "1182660"
  },
  {
    "text": "rules so you don't need to template on derived anymore it's just all evaporates and we're left with this",
    "start": "1182660",
    "end": "1189380"
  },
  {
    "text": "it's much simpler code we don't need any curious recursion anymore we don't need any templates anymore we just literally",
    "start": "1189380",
    "end": "1194960"
  },
  {
    "text": "write hey take the actual class of the thing that you know like the most derived one that you know of at compile",
    "start": "1194960",
    "end": "1201260"
  },
  {
    "text": "time and just call that function and that's it it's very easy it's very straightforward it makes did you so it",
    "start": "1201260",
    "end": "1206660"
  },
  {
    "text": "makes crtp completely obsolete uh you can have more fun with this like you can write a concept",
    "start": "1206660",
    "end": "1213500"
  },
  {
    "text": "and then you know you can uh kind of constrain the member function that this this argument on on that",
    "start": "1213500",
    "end": "1220760"
  },
  {
    "text": "concept being uh met by the derived class right so and",
    "start": "1220760",
    "end": "1226760"
  },
  {
    "text": "then if you have if we derive uh from animal and we don't implement",
    "start": "1226760",
    "end": "1232039"
  },
  {
    "text": "this like we have a fish which can't speak no it's fine we can create one of those",
    "start": "1232039",
    "end": "1237380"
  },
  {
    "text": "and then if we uh if we try to make a fish speak we're going to get a compile error saying glass fish does not satisfy",
    "start": "1237380",
    "end": "1243860"
  },
  {
    "text": "constraint speaking right so uh what we can do with this",
    "start": "1243860",
    "end": "1249020"
  },
  {
    "text": "is we can basically constrain a member function on the properties of the class itself that is a member function of okay",
    "start": "1249020",
    "end": "1255860"
  },
  {
    "text": "and by the class that it's a member function of I don't mean the Base Class animal which is where it's written but",
    "start": "1255860",
    "end": "1261620"
  },
  {
    "text": "the actual derived type the most derived type that's known in compile time so this is really really cool this is something that we could not do before in",
    "start": "1261620",
    "end": "1267799"
  },
  {
    "text": "C plus plus and it opens a lot more possibilities and if you want to know more about this watch Ben's talk bending",
    "start": "1267799",
    "end": "1274039"
  },
  {
    "text": "great talk and here's the third problem that it solves it lets you write recursive",
    "start": "1274039",
    "end": "1279080"
  },
  {
    "text": "lambdas in a really cool way um and that one actually um I decided to skip for now you can",
    "start": "1279080",
    "end": "1287059"
  },
  {
    "text": "stay in the room and listen to the next talk that I'm gonna give just after this one and I'm going to talk in depth about",
    "start": "1287059",
    "end": "1292340"
  },
  {
    "text": "lambdas and I'm also going to cover this as well so uh this is really cool stay",
    "start": "1292340",
    "end": "1297440"
  },
  {
    "text": "in the room if you're interested in how to do this right uh this is uh deducing this",
    "start": "1297440",
    "end": "1304220"
  },
  {
    "text": "um next one it's not expected uh set expected again is",
    "start": "1304220",
    "end": "1310580"
  },
  {
    "text": "um a proposal that has been in the works for quite a while the first revision or this is the paper um three three authors",
    "start": "1310580",
    "end": "1317240"
  },
  {
    "text": "the first version of this paper is from 2016. but actually the idea can be traced back",
    "start": "1317240",
    "end": "1323360"
  },
  {
    "text": "to this talk by Andre alexandresco which is from 2012 so that's like 10 years ago so all these features that I'm talking",
    "start": "1323360",
    "end": "1329480"
  },
  {
    "text": "about today have been in development for a really really long time and now you finally get them in a standard",
    "start": "1329480",
    "end": "1334580"
  },
  {
    "text": "and this is a tool for error handling right and the reason why I think it's so important is that error handling is kind",
    "start": "1334580",
    "end": "1339919"
  },
  {
    "text": "of one of those cross-cutting concerns right if you start a new project you should figure out how to do error",
    "start": "1339919",
    "end": "1345440"
  },
  {
    "text": "handling from the beginning otherwise it will be very very hard to get it right later and there are many many ways to do",
    "start": "1345440",
    "end": "1351559"
  },
  {
    "text": "error handling we actually had um a talk um earlier yesterday at this conference uh",
    "start": "1351559",
    "end": "1358580"
  },
  {
    "text": "by Vitalia on this topic they have in countless talks given already about error handling I think this is one of",
    "start": "1358580",
    "end": "1364460"
  },
  {
    "text": "the most popular topics usually at first conferences so there's ah",
    "start": "1364460",
    "end": "1370640"
  },
  {
    "text": "a million a million ways to do it um they all have different trade-offs and instead expected is actually a",
    "start": "1370640",
    "end": "1377179"
  },
  {
    "text": "really cool tool to have in the Arsenal here's another another talk um by Phil Nash from uh snow 2018. this",
    "start": "1377179",
    "end": "1385520"
  },
  {
    "text": "is really cool talk uh one and a half hours he looks at something like 10 different ways to do error handling",
    "start": "1385520",
    "end": "1391600"
  },
  {
    "text": "or you can return an error from a function and you give like a scored scorecard for every method like based on",
    "start": "1391600",
    "end": "1399020"
  },
  {
    "text": "overhead safety noise code separation reasonability compost ability how much information about the error you can",
    "start": "1399020",
    "end": "1405260"
  },
  {
    "text": "propagate it's really worth watching I don't have time to dive quite as deep so I'm just gonna kind of scratch the surface",
    "start": "1405260",
    "end": "1411919"
  },
  {
    "text": "here's a very quick kind of simple example um what you're doing here is you're writing an Alexa for JavaScript right",
    "start": "1411919",
    "end": "1418280"
  },
  {
    "text": "and we want to pass a number we have some source code we have a string view that's like the source code and it",
    "start": "1418280",
    "end": "1424159"
  },
  {
    "text": "contains a number literal like I don't know 3.5 or whatever as a string and you want to pass this and make this into a",
    "start": "1424159",
    "end": "1430280"
  },
  {
    "text": "double because in JavaScript all numbers are doubles you don't really have integers right but we just want to implement this",
    "start": "1430280",
    "end": "1436520"
  },
  {
    "text": "basically um and we're not going to implement this from scratch we're going to um",
    "start": "1436520",
    "end": "1441740"
  },
  {
    "text": "use this wonderful standard Library function still Todd which passes the",
    "start": "1441740",
    "end": "1447320"
  },
  {
    "text": "string and returns you a double and if you haven't been aware of this wonderful function until now now you are",
    "start": "1447320",
    "end": "1455179"
  },
  {
    "text": "um and then so it's just going to return us to double basically you give it a string it returns a double and um and",
    "start": "1455179",
    "end": "1461299"
  },
  {
    "text": "then we do this which basically takes the string View and Advance us the beginning of the string view to after that string so you can keep passing",
    "start": "1461299",
    "end": "1468260"
  },
  {
    "text": "other tokens afterwards right so we kind of just Advance the begin pointer of the",
    "start": "1468260",
    "end": "1473419"
  },
  {
    "text": "string view essentially and then we return the the double value that we have first so this is the implementation on",
    "start": "1473419",
    "end": "1480380"
  },
  {
    "text": "the left and on the right is the the call code where we have some source code which is not a number",
    "start": "1480380",
    "end": "1487100"
  },
  {
    "text": "um and we are trying to pause it as a number and print it and um what is this function going to",
    "start": "1487100",
    "end": "1494059"
  },
  {
    "text": "return or what's this going to print or what's going to happen here",
    "start": "1494059",
    "end": "1500740"
  },
  {
    "text": "okay it's going to print zero ish y ish",
    "start": "1501320",
    "end": "1509140"
  },
  {
    "text": "well no but in this case the string is not actually a number so we get an error inside sterton",
    "start": "1513159",
    "end": "1519320"
  },
  {
    "text": "and what's that starter does if it can't pass the value it just Returns the value zero so you get the value zero",
    "start": "1519320",
    "end": "1525620"
  },
  {
    "text": "so you can't distinguish whether it's actually the literal zero or whether something went wrong so you don't you",
    "start": "1525620",
    "end": "1530840"
  },
  {
    "text": "need error handling here um so what does stereotype do if it",
    "start": "1530840",
    "end": "1536360"
  },
  {
    "text": "can't pass the number it's gonna write the value of begin into n so we need to check whether beginning and end are",
    "start": "1536360",
    "end": "1542539"
  },
  {
    "text": "equal and if they are then something went wrong and we can uh report an error and here I'm going to",
    "start": "1542539",
    "end": "1549380"
  },
  {
    "text": "just do this with exceptions because this is kind of the default that we're supposed to use right so let's see what that looks like if we use it with",
    "start": "1549380",
    "end": "1555140"
  },
  {
    "text": "exceptions and then there's another case um that can go wrong if your number is like your string is too long and has too",
    "start": "1555140",
    "end": "1560779"
  },
  {
    "text": "many digits it doesn't fit into into a double right you have like 10 to the power of 1000 something",
    "start": "1560779",
    "end": "1568039"
  },
  {
    "text": "like this it doesn't fit into a double so you get an overflow error and the still taught",
    "start": "1568039",
    "end": "1574580"
  },
  {
    "text": "sets the red vowel to like this kind of special macro value and so you have to catch that as well so these are the two",
    "start": "1574580",
    "end": "1580400"
  },
  {
    "text": "possible errors that you want to handle and um you know one thing you can do is you can throw in an exception right",
    "start": "1580400",
    "end": "1585679"
  },
  {
    "text": "and on the call side we then have to so basically on the cold side we can do multiple things right we can",
    "start": "1585679",
    "end": "1592460"
  },
  {
    "text": "we can we can handle exceptions right there we can write a try catch block right so you have to catch the individual exceptions",
    "start": "1592460",
    "end": "1598820"
  },
  {
    "text": "there's really good stuff about exceptions right it's a separate Communication channel it's not like the return value it's like it doesn't",
    "start": "1598820",
    "end": "1604940"
  },
  {
    "text": "pollute the function signature or the function call all the error handling code is separate from the",
    "start": "1604940",
    "end": "1610039"
  },
  {
    "text": "kind of business logic um and the other thing is we don't even",
    "start": "1610039",
    "end": "1615080"
  },
  {
    "text": "have to handle this here if you don't want to right if the exception if you don't handle it here the exception can be propagated up the stack and it can be",
    "start": "1615080",
    "end": "1621260"
  },
  {
    "text": "handled somewhere outside and that's a great option if it's a critical error you know that happens very rarely and",
    "start": "1621260",
    "end": "1626419"
  },
  {
    "text": "it's like if this happens we need to stop everything and tell the user parties over please try something else",
    "start": "1626419",
    "end": "1631580"
  },
  {
    "text": "we're done here um so so that's great but in this case it's probably not what you want to do",
    "start": "1631580",
    "end": "1636860"
  },
  {
    "text": "because this is not a critical error this is something that's going to happen quite often and it's something that's easy to recover from you know you just",
    "start": "1636860",
    "end": "1643100"
  },
  {
    "text": "try and pass it as something else so you know we can handle it right here in a catch block",
    "start": "1643100",
    "end": "1650419"
  },
  {
    "text": "and um there's good news and bad news uh if you do exception if you use exceptions here um",
    "start": "1650419",
    "end": "1656779"
  },
  {
    "text": "the happy path basically on Modern platforms has like 64-bit Intel and arm uh Windows like Linux pretty much has no",
    "start": "1656779",
    "end": "1664940"
  },
  {
    "text": "overhead um the sad path typically has a significant overhead right because if you end up in",
    "start": "1664940",
    "end": "1671659"
  },
  {
    "text": "this catch block then you do have runtime overhead because you need to do all this extra work but doing the stack unwinding and everything which you don't",
    "start": "1671659",
    "end": "1677480"
  },
  {
    "text": "need to do here right and also it has a non-deterministic execution time you can't really use it",
    "start": "1677480",
    "end": "1683059"
  },
  {
    "text": "in any kind of low latency time critical environment and also like this whole information",
    "start": "1683059",
    "end": "1688159"
  },
  {
    "text": "about how to unwind the stack it's going to increase your binary size as well so those are some of the reasons why",
    "start": "1688159",
    "end": "1693980"
  },
  {
    "text": "Community surveys consistently show that about half of developers work on code bases that don't use exceptions at all",
    "start": "1693980",
    "end": "1700400"
  },
  {
    "text": "right so what else can we do in standard C plus plus well we can return an error",
    "start": "1700400",
    "end": "1705980"
  },
  {
    "text": "code right so uh now uh we just handle it by you know",
    "start": "1705980",
    "end": "1713659"
  },
  {
    "text": "checking the error code and now it's good because we're forced to like deal with it right there where",
    "start": "1713659",
    "end": "1719600"
  },
  {
    "text": "the function call is that can be a good thing for these like very common kind of non-critical errors",
    "start": "1719600",
    "end": "1725779"
  },
  {
    "text": "that you can like handle immediately uh we got rid of all the performance overhead so that's very efficient that's",
    "start": "1725779",
    "end": "1731240"
  },
  {
    "text": "great uh the bad thing is that the signature of the function now looks like this right so the arrow handling now takes",
    "start": "1731240",
    "end": "1737179"
  },
  {
    "text": "over the normal Communication channel of the function call which is the return value now that's just the error handling and the actual return value needs to be",
    "start": "1737179",
    "end": "1744740"
  },
  {
    "text": "done by the by like this in out parameter so it makes the quote ugly hard to read hard to reason about so",
    "start": "1744740",
    "end": "1750860"
  },
  {
    "text": "uh since I think C plus 17 we have set optional right stud optionals it's pretty great",
    "start": "1750860",
    "end": "1756860"
  },
  {
    "text": "um for this kind of stuff uh we got a reasonable function signature again code looks clean",
    "start": "1756860",
    "end": "1762860"
  },
  {
    "text": "gotta handle it right there uh you know we kind of check whether the number is there or not and if it is we can use it",
    "start": "1762860",
    "end": "1769760"
  },
  {
    "text": "if not we can do some error handling however we lost the possibility to",
    "start": "1769760",
    "end": "1776600"
  },
  {
    "text": "figure out what error we got right because optional is just we have a value or we don't have a value right we don't",
    "start": "1776600",
    "end": "1781880"
  },
  {
    "text": "have any information about which of the errors actually occurred there's no way there's no way to do this",
    "start": "1781880",
    "end": "1787760"
  },
  {
    "text": "and we probably do want to tell the user whether it's a bad character error or whether it's an overflow error this is",
    "start": "1787760",
    "end": "1792860"
  },
  {
    "text": "like important information so a stud option was great where like the value is either there or not there",
    "start": "1792860",
    "end": "1799220"
  },
  {
    "text": "and it's either obvious why not or it's unimportant why not like think about I don't know user preferences and they",
    "start": "1799220",
    "end": "1805880"
  },
  {
    "text": "have some I don't know and then you know maybe it's not there because the user has not set that Preference",
    "start": "1805880",
    "end": "1811100"
  },
  {
    "text": "they have never gone into the settings to like take a box there so that information is just not there that's pretty obvious but",
    "start": "1811100",
    "end": "1817159"
  },
  {
    "text": "like if you have something like this optional is not really a good mechanism for error handling in my opinion",
    "start": "1817159",
    "end": "1823700"
  },
  {
    "text": "and that's where I expected comes in with expected",
    "start": "1823700",
    "end": "1828860"
  },
  {
    "text": "which we now have until 23 and the function looks like this so it looks very very similar to the optional except",
    "start": "1828860",
    "end": "1835159"
  },
  {
    "text": "that instead of sub optional which is a value or nothing we have expected which is a value or an error right so you can",
    "start": "1835159",
    "end": "1842360"
  },
  {
    "text": "use any type you like as the second parameter the second template parameter doesn't have to be an exception it can",
    "start": "1842360",
    "end": "1847880"
  },
  {
    "text": "be just a string with a message or whatever um and it's very generic",
    "start": "1847880",
    "end": "1855140"
  },
  {
    "text": "and um it's pretty easy to use like if you are on the left hand side and we use that expected we have a conversion an",
    "start": "1855140",
    "end": "1863000"
  },
  {
    "text": "implicit conversion from the value type to expect it so we can just return our double and it's going to be converted to",
    "start": "1863000",
    "end": "1868460"
  },
  {
    "text": "the accepted it's like the optional right uh so there's no sync tactic overhead",
    "start": "1868460",
    "end": "1873799"
  },
  {
    "text": "whatsoever here for the happy path which is good there is some tactic overhead for the sad path the conversion from error to",
    "start": "1873799",
    "end": "1881600"
  },
  {
    "text": "expected needs to have an explicit kind of stood unexpected kind of thingy so the sad path is kind of visible",
    "start": "1881600",
    "end": "1888440"
  },
  {
    "text": "syntactically uh the other thing is that on the quality side",
    "start": "1888440",
    "end": "1894260"
  },
  {
    "text": "um should expect that it's kind of like optional in that sense it has a conversion to Bool so you can check it",
    "start": "1894260",
    "end": "1899419"
  },
  {
    "text": "like this it also has a half Value method just like optional uh if there's a value you can dereference it it's just like optional",
    "start": "1899419",
    "end": "1906080"
  },
  {
    "text": "in that sense or you can write dot value again like optional so it's it's very unsurprising if you're familiar with",
    "start": "1906080",
    "end": "1912020"
  },
  {
    "text": "with optional however it also has this dot error function which gives you the error",
    "start": "1912020",
    "end": "1918440"
  },
  {
    "text": "and it's important to note here that dot error is uh has a narrow contract so if there is actually is no error and you",
    "start": "1918440",
    "end": "1924980"
  },
  {
    "text": "call it it's undefined Behavior so you could always have to check whether there's an error which is what you're doing here",
    "start": "1924980",
    "end": "1931240"
  },
  {
    "text": "um yeah and um that's basically the minimum that you need to know to use",
    "start": "1931880",
    "end": "1937700"
  },
  {
    "text": "expected and you can kind of figure out the rest as you go if you're familiar with um you know variant and optional",
    "start": "1937700",
    "end": "1943399"
  },
  {
    "text": "and those other things on the standard library then the rest of the API I've expected is not going to be surprising",
    "start": "1943399",
    "end": "1948799"
  },
  {
    "text": "for you I would argue it's quite easy to use so it fulfills also really real need because I think every application",
    "start": "1948799",
    "end": "1955220"
  },
  {
    "text": "framework that I've ever worked on had something similar to sit expected somewhere there so but the standard",
    "start": "1955220",
    "end": "1960440"
  },
  {
    "text": "version is just much more generic and it's much more thought through you know than all of these Homegrown Solutions because they they have really thought",
    "start": "1960440",
    "end": "1966559"
  },
  {
    "text": "about all the all the kind of corner cases and everything and it's a correct specification",
    "start": "1966559",
    "end": "1971960"
  },
  {
    "text": "uh and very complete specification as well and so because of this I expect I expect",
    "start": "1971960",
    "end": "1978320"
  },
  {
    "text": "that expected to pop up quite a lot in UC plus projects right I think it's going to",
    "start": "1978320",
    "end": "1983840"
  },
  {
    "text": "start start to be using um people are going to start to use it quite a lot and that's why I included it in this talk",
    "start": "1983840",
    "end": "1991340"
  },
  {
    "text": "um of course it's not a silver bullet for all your error handling there are cases where you might want to go for exceptions",
    "start": "1991340",
    "end": "1996980"
  },
  {
    "text": "if you look at other like more modern programming languages like rust or Zig they have like really cool kind of core",
    "start": "1996980",
    "end": "2002679"
  },
  {
    "text": "language solutions for some of these things which are better than this uh also easier to compose which with",
    "start": "2002679",
    "end": "2010240"
  },
  {
    "text": "this is not quite set forward we don't have the kind of uh uh",
    "start": "2010240",
    "end": "2015659"
  },
  {
    "text": "monadic operations um in the standard for this so it's kind of not easy to compose",
    "start": "2015659",
    "end": "2021940"
  },
  {
    "text": "uh this stuff you can do it in raster zagor any of these languages so maybe we will get there you know someday in C",
    "start": "2021940",
    "end": "2028899"
  },
  {
    "text": "plus plus uh we still have this paper from herb from three years ago where he proposed the core language mechanism for",
    "start": "2028899",
    "end": "2035200"
  },
  {
    "text": "zero overhead deterministic exceptions which is actually really cool and low overhead and easy to compose",
    "start": "2035200",
    "end": "2042000"
  },
  {
    "text": "um I don't think I think nothing really much has happened with this proposal in the last few years I don't know it looks",
    "start": "2042100",
    "end": "2048280"
  },
  {
    "text": "like it's probably dormant so I don't know if you're ever gonna get it um maybe or maybe you're gonna get something else but for now",
    "start": "2048280",
    "end": "2054820"
  },
  {
    "text": "you know we have uh still expected which I think is is pretty cool right",
    "start": "2054820",
    "end": "2060339"
  },
  {
    "text": "let's go to the next one third MD span this is this is really cool",
    "start": "2060339",
    "end": "2065500"
  },
  {
    "text": "um so um here's again the paper this paper has a very long list of authors it's been in development for",
    "start": "2065500",
    "end": "2071618"
  },
  {
    "text": "something like eight years or maybe even more the paper number is p0009 so 18th",
    "start": "2071619",
    "end": "2077618"
  },
  {
    "text": "revision was the one that actually got into the standard so it's been in development for a long long time it's an",
    "start": "2077619",
    "end": "2082720"
  },
  {
    "text": "old paper you finally voted it into civil 23 last month and if you're doing scientific Computing or numerics or",
    "start": "2082720",
    "end": "2088839"
  },
  {
    "text": "Digital Signal processing or Graphics or anything else that crunches numbers then this is a real game changer",
    "start": "2088839",
    "end": "2095020"
  },
  {
    "text": "and I want to rewind again to uh my days before I became a professional C plus",
    "start": "2095020",
    "end": "2101560"
  },
  {
    "text": "plus uh programmer I was an astrophysics and we were doing these numerical",
    "start": "2101560",
    "end": "2107920"
  },
  {
    "text": "simulations um like this one it kind of simulates the last case structure of the universe so we're here interested in kind of",
    "start": "2107920",
    "end": "2114460"
  },
  {
    "text": "scales of galaxies and Beyond and the way you do this is you do like a discrete 3D grid imagine something like",
    "start": "2114460",
    "end": "2120040"
  },
  {
    "text": "voxels like 3D pixels so you sample everything like this you model the universe as basically a 3D box with this",
    "start": "2120040",
    "end": "2126880"
  },
  {
    "text": "grid with periodic boundary conditions because it's infinite but you can't have an infinite box and then you kind of throw together",
    "start": "2126880",
    "end": "2133000"
  },
  {
    "text": "equations for hydrodynamics gravity and then Cosmic expansion and you just evolve the system over time and this is",
    "start": "2133000",
    "end": "2138040"
  },
  {
    "text": "kind of what you were doing and you look what happens and you hope that it's going to be somewhat similar to the stuff that you see on the sky and this",
    "start": "2138040",
    "end": "2144160"
  },
  {
    "text": "is kind of the research I was doing at the time and I was writing lots of Fortran this was all done in fortnite this is the first programming language",
    "start": "2144160",
    "end": "2150280"
  },
  {
    "text": "that I learned and if you want to do this stuff or you",
    "start": "2150280",
    "end": "2155320"
  },
  {
    "text": "know many many other kind of scientific numeric domains you end up writing a lot of multi-dimensional arrays so for that",
    "start": "2155320",
    "end": "2161560"
  },
  {
    "text": "kind of stuff obviously you have lots of feeder Rays you have lots of 4D arrays because you have three dimensions of space and then the fourth dimension is",
    "start": "2161560",
    "end": "2167740"
  },
  {
    "text": "like the quantity you're looking at like density velocity whatever so",
    "start": "2167740",
    "end": "2172900"
  },
  {
    "text": "um you have lots of multi-dimensional arrays it's just what you have to do if you're in any of these numerical domains",
    "start": "2172900",
    "end": "2178599"
  },
  {
    "text": "and you have statically allocated arrays and you also have dynamically allocated arrays if they're like really big or",
    "start": "2178599",
    "end": "2184000"
  },
  {
    "text": "whatever and I was doing this in Fortran in Fortran it looks like this if you want to just",
    "start": "2184000",
    "end": "2189760"
  },
  {
    "text": "hear a 3D array and you want to initialize it this is the way it looks like in fortnite",
    "start": "2189760",
    "end": "2195760"
  },
  {
    "text": "you just declare the 3D array here with its dimensions and then you kind of write a nested Loop and you can write",
    "start": "2195760",
    "end": "2202060"
  },
  {
    "text": "some numbers into it it's not important like what this exactly is but in the end the array is going to be initialized so",
    "start": "2202060",
    "end": "2207820"
  },
  {
    "text": "that's how it looks on Fortran that's nice and easy uh and fourth one multi-dimensional",
    "start": "2207820",
    "end": "2213040"
  },
  {
    "text": "arrays are actually a core language data type it's not Library thing it's like built into the language which is really",
    "start": "2213040",
    "end": "2218079"
  },
  {
    "text": "cool you can multiply a 3D array with a number and it's going to do like the element-wise multiplication you can",
    "start": "2218079",
    "end": "2224920"
  },
  {
    "text": "print the whole thing in one statement like in C plus plus we now got a",
    "start": "2224920",
    "end": "2231040"
  },
  {
    "text": "formatted output for ranges now in C plus 23 in fortnite you could do this in the 60s right so photon is really cool",
    "start": "2231040",
    "end": "2238359"
  },
  {
    "text": "if you want an array that lives on the Heap because it's big you can just",
    "start": "2238359",
    "end": "2243520"
  },
  {
    "text": "call it like declare it as allocatable and then you can allocate it you don't have to worry about cleaning it up it's",
    "start": "2243520",
    "end": "2250540"
  },
  {
    "text": "going to do it automatically if it goes out of scope so it's it's really really easy to work",
    "start": "2250540",
    "end": "2256119"
  },
  {
    "text": "with this this is how I learned programming basically in uni when I was studying physics and then I did this for",
    "start": "2256119",
    "end": "2261940"
  },
  {
    "text": "a while and then you know there was another project that I where like I looked at the code and it was in C instead of Fortran",
    "start": "2261940",
    "end": "2268300"
  },
  {
    "text": "so at some point I had to learn C which was like the next thing and in C uh well if you have a static",
    "start": "2268300",
    "end": "2276099"
  },
  {
    "text": "array it's still reasonable right you can declare a multi-dimensional array like this but if you need a dynamic array on",
    "start": "2276099",
    "end": "2283119"
  },
  {
    "text": "the Heap this is how my supervisor taught me how to do this",
    "start": "2283119",
    "end": "2288339"
  },
  {
    "text": "and this pattern was all over the code base like it was like there was a hundred places where where you would see",
    "start": "2288339",
    "end": "2294220"
  },
  {
    "text": "essentially this and it was also in 4D and sometimes even 60 so you can imagine like what that would look like",
    "start": "2294220",
    "end": "2300700"
  },
  {
    "text": "so first of all here you do the allocation right and then it's declared",
    "start": "2300700",
    "end": "2306760"
  },
  {
    "text": "as like the first allocation the whole thing is declared as a pointer to point at the pointer because we have a 3D",
    "start": "2306760",
    "end": "2312640"
  },
  {
    "text": "array and then you have to allocate every Dimension separately and then this is the loop where you",
    "start": "2312640",
    "end": "2318460"
  },
  {
    "text": "actually initialize the values or do something with it again not really important what that is but this is how you access it you know every element",
    "start": "2318460",
    "end": "2325420"
  },
  {
    "text": "and then in the end you have to clean it up again and again per Dimension right and if you forget to do that or you",
    "start": "2325420",
    "end": "2331300"
  },
  {
    "text": "screw that up then you get a memory leak or something worse and it's a very sad uh world to live in and",
    "start": "2331300",
    "end": "2338140"
  },
  {
    "text": "much later much much later I learned that this is actually not great [Music]",
    "start": "2338140",
    "end": "2343800"
  },
  {
    "text": "in general if you do it like this will not be contiguous in memory that's not ideal so a much better way of doing it",
    "start": "2343800",
    "end": "2349900"
  },
  {
    "text": "in C is to do this where you actually allocate a 1D array right you allocate it once",
    "start": "2349900",
    "end": "2357099"
  },
  {
    "text": "and then when you loop at it you just pretend it was a 3D array by using like 3D indices and then you have this um",
    "start": "2357099",
    "end": "2362920"
  },
  {
    "text": "kind of element access formula where from the three indices to kind of figure out like what element in the 1D array",
    "start": "2362920",
    "end": "2369280"
  },
  {
    "text": "it's actually mapping to and if you get this formula right we can compute that offset and and then um you",
    "start": "2369280",
    "end": "2375460"
  },
  {
    "text": "know there's a c in c plus we can do it a little bit better like we are doing essentially the same thing but you can",
    "start": "2375460",
    "end": "2380500"
  },
  {
    "text": "wrap it into a class right so we can make the element type a template parameter we can hide this formula",
    "start": "2380500",
    "end": "2386200"
  },
  {
    "text": "behind like some kind of operator param paren which takes the indices and then the formula is going to be in there",
    "start": "2386200",
    "end": "2393300"
  },
  {
    "text": "um and that returns a reference to the correct element who here has written something like this in C plus plus",
    "start": "2393339",
    "end": "2400300"
  },
  {
    "text": "okay this is like half the room I had to write this at least four times I think",
    "start": "2400300",
    "end": "2406060"
  },
  {
    "text": "this is this is not really a lot of fun and especially uh if you are starting to do kind of",
    "start": "2406060",
    "end": "2412240"
  },
  {
    "text": "more interesting stuff like templated on the number of Dimensions right so the number of Dimensions becomes a template",
    "start": "2412240",
    "end": "2417760"
  },
  {
    "text": "so all the member functions now become very attic templates and they take a pack of indices and you have to get that",
    "start": "2417760",
    "end": "2422980"
  },
  {
    "text": "right it gets even more fun if you wanted to be const expert because they want to benefit from optimizations if you know",
    "start": "2422980",
    "end": "2428680"
  },
  {
    "text": "the size of compile time or maybe know the size of one dimensional compile time but not the other",
    "start": "2428680",
    "end": "2433720"
  },
  {
    "text": "this is really really hard to get right okay and this is where MD span comes in",
    "start": "2433720",
    "end": "2439480"
  },
  {
    "text": "because they have basically solved all of these problems and in this space and we can now just use it okay so how does",
    "start": "2439480",
    "end": "2445480"
  },
  {
    "text": "it work same thing some data doesn't really matter where it comes from it's",
    "start": "2445480",
    "end": "2450700"
  },
  {
    "text": "allocated somewhere and now we can declare an MB span we pass it a point of the data and we pass",
    "start": "2450700",
    "end": "2456579"
  },
  {
    "text": "it the extents of every dimension and um note that we don't have to write any",
    "start": "2456579",
    "end": "2463180"
  },
  {
    "text": "template arguments because MD spanner relies heavily on ctad so it kind of just deduces the template Arguments for",
    "start": "2463180",
    "end": "2468760"
  },
  {
    "text": "us and once we have our MD span we can access the elements like this",
    "start": "2468760",
    "end": "2474300"
  },
  {
    "text": "um and now there's two things that are noteworthy about this first is it's not owning the data it's kind of just",
    "start": "2474760",
    "end": "2480579"
  },
  {
    "text": "wrapping it right and the second is like Stitch span but in multiple dimensions and the second",
    "start": "2480579",
    "end": "2487660"
  },
  {
    "text": "thing about this is that the way we access this here is with this square bracket operator and now it can take",
    "start": "2487660",
    "end": "2493119"
  },
  {
    "text": "multiple parameters and this is like a new thing that we a new core language feature that we added into the core",
    "start": "2493119",
    "end": "2498880"
  },
  {
    "text": "language and C plus 23 to enable the syntax which I think is a very very nice syntax",
    "start": "2498880",
    "end": "2504880"
  },
  {
    "text": "and um because it's not owning the data you can have multiple memory spans accessing the same data right so you can",
    "start": "2504880",
    "end": "2511480"
  },
  {
    "text": "view the same block of memory as a 3D array you can have another MD span viewing the same block of memory as a 2d",
    "start": "2511480",
    "end": "2517359"
  },
  {
    "text": "array um there's no problem there is there is a member function called dot rank which",
    "start": "2517359",
    "end": "2523060"
  },
  {
    "text": "returns you what the number of Dimensions is and it can handle both static and",
    "start": "2523060",
    "end": "2528700"
  },
  {
    "text": "dynamic extents and the way to do this is you have this helper clustered extent and you can tell it okay",
    "start": "2528700",
    "end": "2534640"
  },
  {
    "text": "uh my uh index type not the element type the index type can be in or a size t or",
    "start": "2534640",
    "end": "2540220"
  },
  {
    "text": "some other integer type and then we have one dimension size four statically known at compile time the second dimension",
    "start": "2540220",
    "end": "2546579"
  },
  {
    "text": "size four and the third dimension is dynamic right for example and then you create this extense object and you",
    "start": "2546579",
    "end": "2551800"
  },
  {
    "text": "create a MD span pass in your data pointer and passing those extents and it just works and",
    "start": "2551800",
    "end": "2558640"
  },
  {
    "text": "another way to write the same thing is you can do it directly because the extents are actually the second",
    "start": "2558640",
    "end": "2563800"
  },
  {
    "text": "template argument of MD span are the extents so you can either let ctet deduce it but if you want to do",
    "start": "2563800",
    "end": "2569980"
  },
  {
    "text": "something more interesting you can specify this template argument explicitly",
    "start": "2569980",
    "end": "2575020"
  },
  {
    "text": "uh if all your extents are Dynamic um you can you know write it like that",
    "start": "2575020",
    "end": "2580980"
  },
  {
    "text": "basically this is the same as the Spanish that span also has this Dynamic extent so we just took the same thing",
    "start": "2580980",
    "end": "2586359"
  },
  {
    "text": "for span and we we now use it in ND span but if if all of them are Dynamic then there is this",
    "start": "2586359",
    "end": "2592599"
  },
  {
    "text": "very um handy type Dev which is called the d-extends it just means three dimensions",
    "start": "2592599",
    "end": "2598000"
  },
  {
    "text": "all of them are Dynamic extents so that's very cool and actually um here's",
    "start": "2598000",
    "end": "2603400"
  },
  {
    "text": "the full Declaration of MB spans it has actually Four template parameters the first one is obviously the element type the second one is",
    "start": "2603400",
    "end": "2610000"
  },
  {
    "text": "um the extents we already talked about this let's briefly talk about the other two there's the layout policy this is",
    "start": "2610000",
    "end": "2616300"
  },
  {
    "text": "really really cool this is basically how your this is the mapping formula how does the mapping formula work how does the how do your 3D",
    "start": "2616300",
    "end": "2624099"
  },
  {
    "text": "indices or whatever how many dimensions you have how do they map to the actual position in the block of memory",
    "start": "2624099",
    "end": "2630220"
  },
  {
    "text": "that you're you're wrapping and there's at least two common ways to do this it's raw major order which is What",
    "start": "2630220",
    "end": "2636460"
  },
  {
    "text": "CNC plus use um where like the last Dimension is like the the one that's contiguous and",
    "start": "2636460",
    "end": "2642099"
  },
  {
    "text": "there's the column major order which is what Photon and Matlab use which is basically the other way around and for",
    "start": "2642099",
    "end": "2647140"
  },
  {
    "text": "some reason um 23 calls them instead layout right instead layout left I I have no idea why",
    "start": "2647140",
    "end": "2653740"
  },
  {
    "text": "they didn't just say raw major color major but it is what it is so layout right is um kind of the C plus plus way",
    "start": "2653740",
    "end": "2660640"
  },
  {
    "text": "or the C way and then you can also use layout left which is the fourth Runway which is the other way around",
    "start": "2660640",
    "end": "2666700"
  },
  {
    "text": "and then you have to write the loop the other way around right so if you do layout right then the innermost Loop is",
    "start": "2666700",
    "end": "2671800"
  },
  {
    "text": "the index at the end and then the left is the outermost index is the one at the end the last Index right so but it's",
    "start": "2671800",
    "end": "2677319"
  },
  {
    "text": "really cool if you're interfacing with Fortran code for example you want to look at the same array from both",
    "start": "2677319",
    "end": "2682720"
  },
  {
    "text": "programming languages and this is pretty great uh and turns out not only do we have the",
    "start": "2682720",
    "end": "2689260"
  },
  {
    "text": "right and still layer left you actually can Implement your own and plug that in for example again when I was working in",
    "start": "2689260",
    "end": "2694839"
  },
  {
    "text": "astrophysics and we were doing these simulations there was a use case where we needed a Hilbert curve mapping which",
    "start": "2694839",
    "end": "2699880"
  },
  {
    "text": "is another way of mapping a 1D index into multiple Dimensions so this is how it looks in 2D this is how it",
    "start": "2699880",
    "end": "2706420"
  },
  {
    "text": "looks and 3D and you can just implement this mapping which is a different mapping as a layout",
    "start": "2706420",
    "end": "2713740"
  },
  {
    "text": "object and you just Implement some API that C plus plus specifies and just plug",
    "start": "2713740",
    "end": "2719020"
  },
  {
    "text": "that into mdspan as the third template parameter and it just works and I wish I had and we spent back then",
    "start": "2719020",
    "end": "2725319"
  },
  {
    "text": "when we were using this astrophysics stuff because it would have made my life so much easier it would have saved so much time",
    "start": "2725319",
    "end": "2730359"
  },
  {
    "text": "anyway uh you can write these custom mappings they don't even have to be continuous or they don't have to even be",
    "start": "2730359",
    "end": "2736060"
  },
  {
    "text": "unique like you can have different indices mapping to the same point in in memory for example you have",
    "start": "2736060",
    "end": "2743319"
  },
  {
    "text": "a matrix you know it's symmetric so you know that the upper quadrant and the lower quad like the quadrant what are",
    "start": "2743319",
    "end": "2748960"
  },
  {
    "text": "they called the upper half and the lower half that they're the same so you don't have to store the lower half and whenever you index into the lower half",
    "start": "2748960",
    "end": "2755200"
  },
  {
    "text": "it's just going to redirect you to the upper half so you save almost half the memory right so you just you just Implement that as a layout plug that in",
    "start": "2755200",
    "end": "2761440"
  },
  {
    "text": "everything works it's beautiful um and the last finally the last template argument is an accessor policy",
    "start": "2761440",
    "end": "2768040"
  },
  {
    "text": "which is once you have your mapping you know which memory you're looking at to get an element how do you actually access that",
    "start": "2768040",
    "end": "2774460"
  },
  {
    "text": "and the default is well you just return a reference to it but you can do some more interesting stuff for example you",
    "start": "2774460",
    "end": "2779859"
  },
  {
    "text": "can instead of returning a reference you can return an atomic graph if you want to look at the element atomically you",
    "start": "2779859",
    "end": "2786220"
  },
  {
    "text": "know if you're doing it from multiple threads or whatever so you can again Implement your your custom accessor and",
    "start": "2786220",
    "end": "2791319"
  },
  {
    "text": "that's going to Define how you look at the elements so and you can do even more interesting stuff with that so",
    "start": "2791319",
    "end": "2797740"
  },
  {
    "text": "um it's a super powerful super extendable I would say relatively easy to use as well it's it's really cool if",
    "start": "2797740",
    "end": "2803680"
  },
  {
    "text": "you want to know more about this there is again a talk about this by uh Bryce slabach which is one and a half hours of",
    "start": "2803680",
    "end": "2811660"
  },
  {
    "text": "just explaining how MB span works um and yeah I recommend you check that",
    "start": "2811660",
    "end": "2817300"
  },
  {
    "text": "out if you want to know more and this Pan actually pops up on all kinds of domains it's not just kind of this kind",
    "start": "2817300",
    "end": "2822460"
  },
  {
    "text": "of scientific numeric stuff like for example when I finally left Academia and got a job as a z plus developer I I went",
    "start": "2822460",
    "end": "2828819"
  },
  {
    "text": "into a music software and audio processing software and stuff like this and there we have an audio buffer which",
    "start": "2828819",
    "end": "2834579"
  },
  {
    "text": "is like audio data multiple channels left and right or surround or whatever it turns out so anybody who has seen like my audio",
    "start": "2834579",
    "end": "2841300"
  },
  {
    "text": "talks like knows that you know there's a lot of that stuff as well you have different layouts and audio you have like",
    "start": "2841300",
    "end": "2847300"
  },
  {
    "text": "interleaf the interleaved audio files Channel layouts like and it turns out",
    "start": "2847300",
    "end": "2853119"
  },
  {
    "text": "this is all just really special cases of MD span you can handle all of this with MB span and like custom layouts and all",
    "start": "2853119",
    "end": "2858760"
  },
  {
    "text": "of that so this is super cool um so empty span as I said it's non-owning like stud span um there's",
    "start": "2858760",
    "end": "2865540"
  },
  {
    "text": "also stood MD array which is like the multi-dimensional version of the vector essentially which is not in C plus 23",
    "start": "2865540",
    "end": "2872260"
  },
  {
    "text": "but it's coming up hopefully in typos 26. it's like the owning version that's",
    "start": "2872260",
    "end": "2877420"
  },
  {
    "text": "going to actually deallocate the memory if it goes out of scope um",
    "start": "2877420",
    "end": "2883060"
  },
  {
    "text": "yeah so that's empty span that's that's really cool um and now we come to the last section",
    "start": "2883060",
    "end": "2888880"
  },
  {
    "text": "of this talk which is also very fun stud print and this is literally",
    "start": "2888880",
    "end": "2895000"
  },
  {
    "text": "changing the world and namely it changes how you write hello world which is",
    "start": "2895000",
    "end": "2900160"
  },
  {
    "text": "something that hasn't happened in I think three decades it's um this paper by Victorious",
    "start": "2900160",
    "end": "2908380"
  },
  {
    "text": "um formatted output again has been through a lot of revisions this paper",
    "start": "2908380",
    "end": "2914260"
  },
  {
    "text": "and that is really cool that solves um that solves a very interesting problem",
    "start": "2914260",
    "end": "2920319"
  },
  {
    "text": "which is how do you write hello World um so if you look at any programming book about C plus plus this is pretty",
    "start": "2920319",
    "end": "2926920"
  },
  {
    "text": "much the first thing that you're gonna see um this is from Jana's book um",
    "start": "2926920",
    "end": "2932380"
  },
  {
    "text": "but you can open any other C plus book this is the first code snippet in that book",
    "start": "2932380",
    "end": "2937599"
  },
  {
    "text": "uh just literally hello world you can also open any IDE and say create a new project I",
    "start": "2937599",
    "end": "2945220"
  },
  {
    "text": "can do this in C line which is obviously my favorite IDE and I can just go to new project and",
    "start": "2945220",
    "end": "2950680"
  },
  {
    "text": "it's gonna create a project which looks like this again hello world",
    "start": "2950680",
    "end": "2956260"
  },
  {
    "text": "C line and Diana don't agree on like some of the details for example C line is using stud enroll Diana uses",
    "start": "2956260",
    "end": "2962260"
  },
  {
    "text": "backslash n and also C line the default template is going to return 0 which you don't really have to write",
    "start": "2962260",
    "end": "2968200"
  },
  {
    "text": "but that's not really important like the important thing is to see out there and um",
    "start": "2968200",
    "end": "2973420"
  },
  {
    "text": "Let's ignore like those other issues for a bit and and talk about statcr until this is again Beyond this version",
    "start": "2973420",
    "end": "2979900"
  },
  {
    "text": "um so let's do a code review here what's wrong with this code what are the problems in this code",
    "start": "2979900",
    "end": "2986339"
  },
  {
    "text": "it doesn't flash okay yeah um that's one problem",
    "start": "2986339",
    "end": "2991839"
  },
  {
    "text": "um more basic problem is performance this is not good performance printf is a",
    "start": "2991839",
    "end": "2998500"
  },
  {
    "text": "lot faster than this of course printf is also not type safe so it uses these like runtime periodic arguments so if you use",
    "start": "2998500",
    "end": "3004319"
  },
  {
    "text": "printf format strings it's very easy to make a code crash or perhaps introduce a security vulnerability and I think",
    "start": "3004319",
    "end": "3011760"
  },
  {
    "text": "Patricia has a talk about that uh that's a different topic again but the fact is even if you you know even if",
    "start": "3011760",
    "end": "3018900"
  },
  {
    "text": "you forget about that problem stitzy out is not that like IO streams do not have great performance they they are really",
    "start": "3018900",
    "end": "3025079"
  },
  {
    "text": "slow um second problem is that the interface is really awkward you have these like",
    "start": "3025079",
    "end": "3030180"
  },
  {
    "text": "shift shift operators and then you got this zoo of like so-called i o manipulators that you also have to pipe",
    "start": "3030180",
    "end": "3036839"
  },
  {
    "text": "into with the shift operator for example uh you want to print a bull um what is this going to print",
    "start": "3036839",
    "end": "3044400"
  },
  {
    "text": "one okay let's print one what if you actually want to print true or false how",
    "start": "3044400",
    "end": "3049440"
  },
  {
    "text": "you do that what yeah yeah yeah so it's called stood bull",
    "start": "3049440",
    "end": "3056760"
  },
  {
    "text": "Alpha that's the thing you need to put in there in order to print true or false",
    "start": "3056760",
    "end": "3062460"
  },
  {
    "text": "and there's a whole zoo of these manipulators some of them are included in header IO stream others like set W",
    "start": "3062460",
    "end": "3068640"
  },
  {
    "text": "which is the one you need to set the field with uh you need to actually hash include IO manip to get that",
    "start": "3068640",
    "end": "3075660"
  },
  {
    "text": "it's very difficult to use very awkward interface but that's not even the worst part the worst part is",
    "start": "3075660",
    "end": "3080760"
  },
  {
    "text": "um this is like the English version and if I write this then you know it's going to",
    "start": "3080760",
    "end": "3086460"
  },
  {
    "text": "print hello world but if I want to do the same thing in my mother tongue",
    "start": "3086460",
    "end": "3092339"
  },
  {
    "text": "um I write hello world and my first language was this Russian private Mir",
    "start": "3092339",
    "end": "3098819"
  },
  {
    "text": "and I get this at least on Windows um which is not what I wrote there",
    "start": "3098819",
    "end": "3105540"
  },
  {
    "text": "it's very sad I don't fully understand why this is the case maybe Victor or contour and somebody else here can",
    "start": "3105540",
    "end": "3111780"
  },
  {
    "text": "explain it to me I know that it has something to do with code page 437 and how Windows handles encodings on the",
    "start": "3111780",
    "end": "3118440"
  },
  {
    "text": "terminal I don't really know what that means maybe you can explain it to me later um but the fact is it just doesn't work",
    "start": "3118440",
    "end": "3125640"
  },
  {
    "text": "and this is one of those reasons why the python people keep laughing at us C plus plus people because they have solved",
    "start": "3125640",
    "end": "3131099"
  },
  {
    "text": "this problem one and a half decades ago right this works on every modern programming language except in C plus",
    "start": "3131099",
    "end": "3137960"
  },
  {
    "text": "um so you know we solved part of the problem actually in C plus plus 20 in C plus 20 we got still format which is you",
    "start": "3138480",
    "end": "3145559"
  },
  {
    "text": "know another work by Victor's very rich which is pretty great so with the format if you have Unicode non-english",
    "start": "3145559",
    "end": "3152040"
  },
  {
    "text": "characters like Russian characters in this case it kind of just works because it supports Unicode and you also have",
    "start": "3152040",
    "end": "3159000"
  },
  {
    "text": "the syntax to um print variables right you have these like Curly braces which you can use as",
    "start": "3159000",
    "end": "3164280"
  },
  {
    "text": "placeholders so here we can print our bull there first of all it's going to do the right thing it's going to print true or false",
    "start": "3164280",
    "end": "3171540"
  },
  {
    "text": "and but if you want to print it as an integer like we can do that too we put that in the curly braces there it's safe",
    "start": "3171540",
    "end": "3178140"
  },
  {
    "text": "like if we have the like that string is going to be positive compile time if you have like the wrong if you forget to write the B there you're going to get",
    "start": "3178140",
    "end": "3184200"
  },
  {
    "text": "the compile error hey you forgot to put an argument there so it's actually safe",
    "start": "3184200",
    "end": "3189480"
  },
  {
    "text": "um it doesn't care about Locale which is another pain in the neck if you're you know working with IO streams so we don't",
    "start": "3189480",
    "end": "3195420"
  },
  {
    "text": "have to worry about that um problem is this is super sustain you're right it creates the string but",
    "start": "3195420",
    "end": "3201720"
  },
  {
    "text": "it still doesn't print it how do you print it well you got to do that again",
    "start": "3201720",
    "end": "3208140"
  },
  {
    "text": "and that's not great so first of all like that's going to allocate the Temporaries string object which is",
    "start": "3208140",
    "end": "3214440"
  },
  {
    "text": "potentially another memory allocation we don't need that object second it calls operator left shift again which is a",
    "start": "3214440",
    "end": "3220319"
  },
  {
    "text": "function call that we don't need stats yard performs formatted output on",
    "start": "3220319",
    "end": "3225540"
  },
  {
    "text": "a string that's already formatted so that's also not just a waste of CPU cycles and then",
    "start": "3225540",
    "end": "3231180"
  },
  {
    "text": "it's still not going to correctly print my non-english Unicode characters because still CR just doesn't understand",
    "start": "3231180",
    "end": "3237000"
  },
  {
    "text": "unicode so um yeah even in zip 20 this problem",
    "start": "3237000",
    "end": "3242280"
  },
  {
    "text": "has still not been solved but we now solve that in C plus 23 because now we can write this and everything is",
    "start": "3242280",
    "end": "3247800"
  },
  {
    "text": "wonderful you can write sub print forget about statcr yes there's a question yes is",
    "start": "3247800",
    "end": "3253200"
  },
  {
    "text": "there a way to make it really correct which means not writing true in English but writing true the same language",
    "start": "3253200",
    "end": "3259760"
  },
  {
    "text": "yes the question was what if you want to write true in a non-english language as well and you",
    "start": "3259760",
    "end": "3266700"
  },
  {
    "text": "can have a custom formatter for that and just kind of plug that in right or",
    "start": "3266700",
    "end": "3272240"
  },
  {
    "text": "you use the local version does format work with locals",
    "start": "3272240",
    "end": "3277920"
  },
  {
    "text": "okay I'm not okay",
    "start": "3277920",
    "end": "3285260"
  },
  {
    "text": "all right that's super interesting let's talk about this later I want to know more about this so I can include this in",
    "start": "3285420",
    "end": "3290880"
  },
  {
    "text": "a future version of this talk because I don't quite know how this works you're talking about locales over here so let's",
    "start": "3290880",
    "end": "3296280"
  },
  {
    "text": "let's talk about this later yes there's another question very very much",
    "start": "3296280",
    "end": "3302880"
  },
  {
    "text": "it looks very much like one yes it looks like printf but it's not",
    "start": "3302880",
    "end": "3308339"
  },
  {
    "text": "like printf because it's safe right",
    "start": "3308339",
    "end": "3313099"
  },
  {
    "text": "capabilities um I yes it has all the capabilities that",
    "start": "3318000",
    "end": "3323760"
  },
  {
    "text": "printf has and more the syntax is slightly different like instead of I don't know up percent I you need to",
    "start": "3323760",
    "end": "3330839"
  },
  {
    "text": "write like colon I I think inside the curly braces so it's you have to learn a little bit of a new the main specific",
    "start": "3330839",
    "end": "3336900"
  },
  {
    "text": "language but it's actually easy and it's very very powerful it's it's better than printf and every every way really",
    "start": "3336900",
    "end": "3343920"
  },
  {
    "text": "um so um this is also very performant according to uh benchmarks it's faster than",
    "start": "3343920",
    "end": "3349619"
  },
  {
    "text": "uh it's faster than statsy out it has all the advantages of format right it supports everything that's the",
    "start": "3349619",
    "end": "3355680"
  },
  {
    "text": "format already supports in supersus 20. if you want to write to another stream",
    "start": "3355680",
    "end": "3360780"
  },
  {
    "text": "then standard output there's overloads for that as well so this is just absolutely awesome and",
    "start": "3360780",
    "end": "3367020"
  },
  {
    "text": "um yeah so in C plus 23 we changed how to write hello world the canonical way",
    "start": "3367020",
    "end": "3373200"
  },
  {
    "text": "to write hello world is now this except not quite we actually changed hello world twice because now um we also have",
    "start": "3373200",
    "end": "3379859"
  },
  {
    "text": "standard Library modules so actually instead of hash include print you can do import then",
    "start": "3379859",
    "end": "3386280"
  },
  {
    "text": "um and that's now hello world in C plus plus um so slip Prince still um doesn't print",
    "start": "3386280",
    "end": "3393119"
  },
  {
    "text": "a new line at the end which is why we still need that backslash n but we have a thing for that as well we now also",
    "start": "3393119",
    "end": "3398819"
  },
  {
    "text": "have different line um and that will print your new line at",
    "start": "3398819",
    "end": "3404339"
  },
  {
    "text": "the end for you automatically as well so I'm actually kind of curious which one of the two is going to establish itself as the canonical hello world is it going",
    "start": "3404339",
    "end": "3410940"
  },
  {
    "text": "to be print with backslash n at the end or is it going to be print line which looks very much like I think Java is print line right",
    "start": "3410940",
    "end": "3419400"
  },
  {
    "text": "and lots of lots of it Pascal so it looks a lot like you know other programming languages now",
    "start": "3419400",
    "end": "3425640"
  },
  {
    "text": "um so yeah um very curious which one of the two is gonna win I don't know do you have any",
    "start": "3425640",
    "end": "3431760"
  },
  {
    "text": "favorite who likes the first one more okay three people who likes the second",
    "start": "3431760",
    "end": "3437160"
  },
  {
    "text": "one more Okay cool so then I declare the Sprint line version as the canonical way to",
    "start": "3437160",
    "end": "3442740"
  },
  {
    "text": "write hello world and C plus plus as of C plus 23. thank you",
    "start": "3442740",
    "end": "3449480"
  },
  {
    "text": "and I think we even have two and a half minutes for questions yes",
    "start": "3454319",
    "end": "3461000"
  },
  {
    "text": "yes the question was if you have still",
    "start": "3466140",
    "end": "3472020"
  },
  {
    "text": "expected and you use an actual exception type as the second template parameter can you actually throw that",
    "start": "3472020",
    "end": "3477540"
  },
  {
    "text": "as far as I know not by default like you you would have to explicitly throw that",
    "start": "3477540",
    "end": "3483480"
  },
  {
    "text": "somehow I don't really know I mean if you want to use exceptions then just use exceptions so I I don't think that makes",
    "start": "3483480",
    "end": "3489599"
  },
  {
    "text": "sense but I guess you can get it out with DOT error and then throw it but you would kind of mix two different ways to",
    "start": "3489599",
    "end": "3495780"
  },
  {
    "text": "do error handling so I'm not sure when you would do it but it's possible it's",
    "start": "3495780",
    "end": "3501000"
  },
  {
    "text": "not the default though X you can use exception Daniela as saying you can use exception pointer",
    "start": "3501000",
    "end": "3507839"
  },
  {
    "text": "all right there's another question here",
    "start": "3507839",
    "end": "3511400"
  },
  {
    "text": "if you used to expect it and you don't check whether the value is legal exactly the same thing happens as what's that",
    "start": "3516900",
    "end": "3522780"
  },
  {
    "text": "optional which is if you dereference it without checking it it's undefined Behavior",
    "start": "3522780",
    "end": "3528540"
  },
  {
    "text": "it's exactly like optional in that sense you have the same you have the same",
    "start": "3528540",
    "end": "3534359"
  },
  {
    "text": "interface you have like operator star operator Arrow you have dot has value and you have dot value",
    "start": "3534359",
    "end": "3541279"
  },
  {
    "text": "um I don't see any other questions so thank you very much for coming and if you want to stick around we're going to",
    "start": "3544740",
    "end": "3550799"
  },
  {
    "text": "talk about lambdas and recursive numbers and all kinds of other fun Lambda stuff so hope to see you there thank you",
    "start": "3550799",
    "end": "3558859"
  }
]