[
  {
    "text": "okay good morning everyone thanks for coming I hope you all had your coffee",
    "start": "7139",
    "end": "12869"
  },
  {
    "text": "several like this morning I know I'm a bit tired from last night but let's get",
    "start": "12869",
    "end": "20619"
  },
  {
    "text": "into it so my name is Daniel chambers and I work as a senior consultant for",
    "start": "20619",
    "end": "26289"
  },
  {
    "text": "edify my twitter handles up on the slide so if you have any questions or feedback please feel free to tweet it at me or if",
    "start": "26289",
    "end": "33160"
  },
  {
    "text": "you see me around the conference please do come up and have a chat happy to talk",
    "start": "33160",
    "end": "38430"
  },
  {
    "text": "I'm so out of all the talks that I've done so far my most popular one is",
    "start": "38430",
    "end": "43720"
  },
  {
    "text": "probably the one where I introduced f-sharp to.net programmers I like f-sharp and I think more people",
    "start": "43720",
    "end": "49630"
  },
  {
    "text": "are dotnet so they should use it to write cleaning composable code so you might then be wondering what I'm doing",
    "start": "49630",
    "end": "55630"
  },
  {
    "text": "doing a functional programming talk in c-sharp and JavaScript instead of an f-sharp well there's kind of two reasons",
    "start": "55630",
    "end": "62920"
  },
  {
    "text": "one is that I do have a talk later this afternoon on high school so that's fulfilling my hard core functional side",
    "start": "62920",
    "end": "68820"
  },
  {
    "text": "but the other is that when I realized what I realized when I did that f-sharp talk was that whilst a lot of people",
    "start": "68820",
    "end": "75100"
  },
  {
    "text": "like the look of f-sharp they can't just jump ship off what they're coding in right now and for most",
    "start": "75100",
    "end": "81490"
  },
  {
    "text": "people what that means is it's probably c-sharp and JavaScript we've got years investment of these in these code bases",
    "start": "81490",
    "end": "88119"
  },
  {
    "text": "and we can't just chuck all of that away overnight I'm going to quote directly out of the",
    "start": "88119",
    "end": "93159"
  },
  {
    "text": "Lord of the Rings and say what Boromir says is that one does not simply shifter f-sharp",
    "start": "93159",
    "end": "99659"
  },
  {
    "text": "some people are scared off by functional programming because it can be quite different from the typical imperative",
    "start": "99749",
    "end": "105340"
  },
  {
    "text": "style code that most people write in their day jobs but what most people don't realize is that they've been doing",
    "start": "105340",
    "end": "111639"
  },
  {
    "text": "little bits of functional programming for a while now because functional programming contract constructs have",
    "start": "111639",
    "end": "117429"
  },
  {
    "text": "been stealthily added to c-sharp and JavaScript for quite a few years",
    "start": "117429",
    "end": "122459"
  },
  {
    "text": "the problem is is that most people don't use these features to their fullest extent that they could and when I look",
    "start": "122459",
    "end": "129369"
  },
  {
    "text": "at the code that I see written you know there's a lot more that people",
    "start": "129369",
    "end": "134500"
  },
  {
    "text": "could do there so the aim of the talk is to show you how you can use these functional features of your language together with",
    "start": "134500",
    "end": "141610"
  },
  {
    "text": "functional libraries so that you can get some of those functional programming benefits now in your day job then once",
    "start": "141610",
    "end": "147849"
  },
  {
    "text": "you're used to this first level of functional programming you'll be naturally attracted to more full-blown functional languages like f-sharp and",
    "start": "147849",
    "end": "154629"
  },
  {
    "text": "functional techniques so first a little bit of history to put",
    "start": "154629",
    "end": "160299"
  },
  {
    "text": "functional programming in its context so in the beginning there was unstructured programming where we used go-to",
    "start": "160299",
    "end": "166690"
  },
  {
    "text": "statements to allow the programmer to quote control that flow of development",
    "start": "166690",
    "end": "171700"
  },
  {
    "text": "that flow of the programs so this allowed us to write programs that quickly grew out of control and ended up",
    "start": "171700",
    "end": "179140"
  },
  {
    "text": "being quite messy this is where structured programming was introduced to kill off that go-to we",
    "start": "179140",
    "end": "185230"
  },
  {
    "text": "littered that level of abstraction up a notch by formalizing those those looping constructs into four and while loops we",
    "start": "185230",
    "end": "192760"
  },
  {
    "text": "introduced procedures and subroutines and they were added to split code out and make it more easy to reuse",
    "start": "192760",
    "end": "199290"
  },
  {
    "text": "structured programming was an attempt to make the flow of control clear this was a big step up from unstructured",
    "start": "199290",
    "end": "205420"
  },
  {
    "text": "programming because it made that code much more easy to reason about because of those common control structures",
    "start": "205420",
    "end": "212489"
  },
  {
    "text": "unfortunately structured programming still has a nasty floor and that's global variables everyone here I'm sure",
    "start": "212489",
    "end": "218560"
  },
  {
    "text": "knows the pain of global variables and how that how code that uses them is extraordinarily hard to understand and",
    "start": "218560",
    "end": "224349"
  },
  {
    "text": "reason about so solve this object-oriented programming was created to kill off that",
    "start": "224349",
    "end": "230560"
  },
  {
    "text": "global variable by providing language features that make it easy to encapsulate state it does this by tying",
    "start": "230560",
    "end": "237040"
  },
  {
    "text": "data and subroutines together into a concept of a class it also takes further steps towards code reuse by introducing",
    "start": "237040",
    "end": "244000"
  },
  {
    "text": "inheritance and composition again we've lifted that level of abstraction up a notch with the aim to improve our",
    "start": "244000",
    "end": "249880"
  },
  {
    "text": "ability to understand code and reason about it this again allowed the complexity of our",
    "start": "249880",
    "end": "255519"
  },
  {
    "text": "software to jump up but as you probably know there's there's still issues with state management in a",
    "start": "255519",
    "end": "262139"
  },
  {
    "text": "while variables are local to classes they're still variable and they're shared by everything in the class and",
    "start": "262139",
    "end": "267640"
  },
  {
    "text": "and possibly externally functional programming takes this the",
    "start": "267640",
    "end": "272770"
  },
  {
    "text": "next level its aim is to remove state altogether state is variables whose values can change we can remove state",
    "start": "272770",
    "end": "280389"
  },
  {
    "text": "through the judicious use of pure functions which are functions that have no side effects and therefore always",
    "start": "280389",
    "end": "285970"
  },
  {
    "text": "return the same output for the same input this simplifies the code by",
    "start": "285970",
    "end": "291280"
  },
  {
    "text": "removing moving parts where the moving parts in your code are those variables",
    "start": "291280",
    "end": "298320"
  },
  {
    "text": "functional program functional programming words that level of abstraction even further by treating",
    "start": "298320",
    "end": "303970"
  },
  {
    "text": "functions as values which makes reusing code trivially easy it also allows for",
    "start": "303970",
    "end": "309669"
  },
  {
    "text": "that for the implementation of libraries that act as domain-specific languages which make it easy for you to focus on",
    "start": "309669",
    "end": "315729"
  },
  {
    "text": "writing your business logic rather than writing control logic so an example of such a library is link and the domain of",
    "start": "315729",
    "end": "323020"
  },
  {
    "text": "link is the sequences of values so you're probably wondering well don't",
    "start": "323020",
    "end": "329289"
  },
  {
    "text": "I need a functional programming language in order to do functional programming and the answer is no Eric Meyer of the",
    "start": "329289",
    "end": "335320"
  },
  {
    "text": "lincoln eric's reactive extensions firm he defines functional programming as a style of programming where expressions",
    "start": "335320",
    "end": "341500"
  },
  {
    "text": "are more important than statements this is a key point in understanding practical functional programming",
    "start": "341500",
    "end": "347909"
  },
  {
    "text": "expressions take input and deliver a result and we combine those expressions",
    "start": "347909",
    "end": "352930"
  },
  {
    "text": "together to express a wider program expressions don't have side effects they",
    "start": "352930",
    "end": "358720"
  },
  {
    "text": "return a value this means statements are the antithesis of expressions and therefore of",
    "start": "358720",
    "end": "364659"
  },
  {
    "text": "functional programming but have an explicit in they have an implicit side effect against the global state and since we're trying to eliminate state",
    "start": "364659",
    "end": "371349"
  },
  {
    "text": "altogether we need to get rid of statements and focus on expressions so functional programming languages make",
    "start": "371349",
    "end": "378550"
  },
  {
    "text": "writing codes solely in expressions easier by adding language features to help support this good news some of",
    "start": "378550",
    "end": "385030"
  },
  {
    "text": "those features have been brought into the language we use the languages we use every day such as c-sharp and JavaScript",
    "start": "385030",
    "end": "391260"
  },
  {
    "text": "so let's have a look at how we can use our day-to-day languages to start doing a little bit of functional programming",
    "start": "391260",
    "end": "397320"
  },
  {
    "text": "so c-sharp 3 introduced lambda expressions and this makes functions as",
    "start": "397320",
    "end": "402669"
  },
  {
    "text": "first-class values easy this introduced a wave of functional libraries to be added to don't net link is the best",
    "start": "402669",
    "end": "409809"
  },
  {
    "text": "known library link is basically functional programming sneaked into the language by stealth so guess what if",
    "start": "409809",
    "end": "415900"
  },
  {
    "text": "you've used a bit of link you've already done a little bit of functional programming link is really a set of higher-order",
    "start": "415900",
    "end": "422319"
  },
  {
    "text": "functions that is functions that take other functions as parameters that and that lets us deal with sequence",
    "start": "422319",
    "end": "428830"
  },
  {
    "text": "of sequences of values using only expressions and no statements this means",
    "start": "428830",
    "end": "434589"
  },
  {
    "text": "that we can eliminate side-effects and variables from our code when we deal with sequences and it also allows us to",
    "start": "434589",
    "end": "441189"
  },
  {
    "text": "write simpler and more readable code so link is typical of functional",
    "start": "441189",
    "end": "446620"
  },
  {
    "text": "programming it raises the level of abstraction up when we're dealing with a domain in this case the domain is of",
    "start": "446620",
    "end": "451990"
  },
  {
    "text": "sequences and the library allows us to reuse code that has already been written to deal with sequences this means that",
    "start": "451990",
    "end": "458169"
  },
  {
    "text": "we can write business logic that states what we want rather than how to get what we want this style of declarative",
    "start": "458169",
    "end": "464680"
  },
  {
    "text": "programming is easy to do when you're programming functionally",
    "start": "464680",
    "end": "470099"
  },
  {
    "text": "all functional programming languages will have a library like link in them however in order to think it's a sort of",
    "start": "470159",
    "end": "476169"
  },
  {
    "text": "sneaked functional programming into dotnet without scaring people Microsoft used different function names to what",
    "start": "476169",
    "end": "481270"
  },
  {
    "text": "you typically see in in functional norms so for example in most functional programming languages the Select method",
    "start": "481270",
    "end": "488499"
  },
  {
    "text": "is called map aggregate is called reduce or fold any is called exists",
    "start": "488499",
    "end": "495449"
  },
  {
    "text": "so hopefully you're starting to realize that functional programming isn't a totally weird beast that can seem",
    "start": "496349",
    "end": "502870"
  },
  {
    "text": "terrifying you're already using it a bit with libraries like link however what I see when I look at most C sharp and",
    "start": "502870",
    "end": "508930"
  },
  {
    "text": "JavaScript code is that people are dabbling a little in functional programming but they couldn't prove their code even more by fully embracing",
    "start": "508930",
    "end": "515740"
  },
  {
    "text": "it so let's start looking at some practical code examples of how you could write",
    "start": "515740",
    "end": "522010"
  },
  {
    "text": "your code more functionally to get rid of state and make your code more readable and maintainable this way you can start taking further",
    "start": "522010",
    "end": "528880"
  },
  {
    "text": "steps down that functional programming path and do it in your day job so let me",
    "start": "528880",
    "end": "534339"
  },
  {
    "text": "switch out of the slides and I've got some first initial examples",
    "start": "534339",
    "end": "541180"
  },
  {
    "text": "in link pad so what I've done here is I basically",
    "start": "541180",
    "end": "546940"
  },
  {
    "text": "written some code in c-sharp and I've written an imperative version of some code and then I've transformed it into a",
    "start": "546940",
    "end": "553210"
  },
  {
    "text": "functional version so that we can sort of contrast compare what that means for us so in this first example it's a very",
    "start": "553210",
    "end": "559360"
  },
  {
    "text": "simple it's a very simple little algorithm we're basically taking a string which would contain someone's",
    "start": "559360",
    "end": "565300"
  },
  {
    "text": "name and splitting it up into first names middle name and surname in a name",
    "start": "565300",
    "end": "570640"
  },
  {
    "text": "class so this is some pretty typical logic we might write a name in our business applications",
    "start": "570640",
    "end": "576630"
  },
  {
    "text": "so this is the code that we'd look to write if we were writing this imperative",
    "start": "576630",
    "end": "582190"
  },
  {
    "text": "Lee so you know we take that string in and we're returning the the name class out",
    "start": "582190",
    "end": "589390"
  },
  {
    "text": "so the first thing we're going to do is we're going to take that name string we're going to split it up on spaces so",
    "start": "589390",
    "end": "595060"
  },
  {
    "text": "we can just get out the individual names and we've also used this overload which",
    "start": "595060",
    "end": "600279"
  },
  {
    "text": "means that if there's any double spaces we get rid of those empty strings then what we're going to do is we're going to create that that new name class and it's",
    "start": "600279",
    "end": "607240"
  },
  {
    "text": "going to be an uninitialized set at this point effectively all those properties will be null then we're going to write some imperative conditional code where",
    "start": "607240",
    "end": "613839"
  },
  {
    "text": "we're going to manually check the length of the array we're going to say okay if there's one or more names than the first",
    "start": "613839",
    "end": "620110"
  },
  {
    "text": "name so the first thing in the array where so we're going to manually index into that will be our first name and",
    "start": "620110",
    "end": "625180"
  },
  {
    "text": "we're going to side-effect against first name in order to store that if we've got",
    "start": "625180",
    "end": "630580"
  },
  {
    "text": "two or more names we're going to manually index to the end of the array grab the last name stored is the surname with a side-effect if we've got three or",
    "start": "630580",
    "end": "638050"
  },
  {
    "text": "more names that naturally means we must have at least one middle name so what we're going to do then is loop through the middle names with a manual for loop",
    "start": "638050",
    "end": "645190"
  },
  {
    "text": "and start from the second element and go up until the second last and then append them together in a string builder",
    "start": "645190",
    "end": "651300"
  },
  {
    "text": "now the string builder is naturally going to end up with a trailing space so we'll have to trim that off and we take",
    "start": "651300",
    "end": "656860"
  },
  {
    "text": "the string out of the string builder and then side-effect it into the the middle name on on the class then we'll return",
    "start": "656860",
    "end": "662860"
  },
  {
    "text": "that instance from the from the from the method so this is pretty typical",
    "start": "662860",
    "end": "668650"
  },
  {
    "text": "imperative code that I'm sure we've all written at some point what the the first thing you'll notice",
    "start": "668650",
    "end": "674940"
  },
  {
    "text": "here is that what we're doing is we're literally instructing the program how to get what we want what we'd rather do is",
    "start": "674940",
    "end": "680790"
  },
  {
    "text": "declare what we want and work at a higher level of abstraction to make this smaller and more and more readable so",
    "start": "680790",
    "end": "687720"
  },
  {
    "text": "let's have a look at a first version of the way we might do that",
    "start": "687720",
    "end": "692240"
  },
  {
    "text": "so in this first version what we're going to do is again we're going to do our split and then what we're going to",
    "start": "695750",
    "end": "701460"
  },
  {
    "text": "do is we're going to create the the name class instance but this time we're going to do it using an object initializer",
    "start": "701460",
    "end": "706980"
  },
  {
    "text": "expression so straight away what we're doing is we're initializing a name class instance but with no point in this code",
    "start": "706980",
    "end": "713280"
  },
  {
    "text": "here have we ever got a name class instance that's half initialized it always this expression when it can",
    "start": "713280",
    "end": "719760"
  },
  {
    "text": "evaluate some completes will return a valid name so this object initializer",
    "start": "719760",
    "end": "725190"
  },
  {
    "text": "allows us to set our properties so here what we're gonna do to get the first name is instead of manually indexing",
    "start": "725190",
    "end": "730920"
  },
  {
    "text": "into an array and having conditional logic we're going to lift our level of abstraction up and think about sequences",
    "start": "730920",
    "end": "735990"
  },
  {
    "text": "so we have an array an array as a sequence a library for sequences is linked and link has a first to default",
    "start": "735990",
    "end": "741540"
  },
  {
    "text": "method that we're probably all used at some point so this is a great example of where we could write manual logic but",
    "start": "741540",
    "end": "747780"
  },
  {
    "text": "really if we work at this high level of abstraction and declare what we write was rather than how we actually end up",
    "start": "747780",
    "end": "752790"
  },
  {
    "text": "with code that's a lot simpler and much more readable to get a surname what we're going to do",
    "start": "752790",
    "end": "758400"
  },
  {
    "text": "is we're gonna use a ternary expression so ternary expressions are great for allowing you to write conditional logic",
    "start": "758400",
    "end": "763470"
  },
  {
    "text": "but then stay writing expressions rather than writing statements so here if we've got one or more name we're going to use",
    "start": "763470",
    "end": "769710"
  },
  {
    "text": "the last so again instead of manually indexing into the end of an array we'll just say give me the last so again we're",
    "start": "769710",
    "end": "775440"
  },
  {
    "text": "sort of working at at that declarative in that declarative space for the middle name we're going to use a",
    "start": "775440",
    "end": "782190"
  },
  {
    "text": "ternary expression to check to see whether got three or more names and then if we do we're going to write a bit of a",
    "start": "782190",
    "end": "787440"
  },
  {
    "text": "link pipeline here so in c-sharp because C sharp isn't a full-blown functional",
    "start": "787440",
    "end": "792900"
  },
  {
    "text": "programming language we don't have nice ways of composing functions using operators so in c-sharp there's we",
    "start": "792900",
    "end": "799530"
  },
  {
    "text": "typically use this fluent style where it's generally implemented using Methos where we can sort of dot from one",
    "start": "799530",
    "end": "804639"
  },
  {
    "text": "function to the next so in this case what we're going to do is going to take our name sequence and we're going to",
    "start": "804639",
    "end": "810579"
  },
  {
    "text": "skip off skip away from the first one because that one's just our first name and then we're going to take up until",
    "start": "810579",
    "end": "815889"
  },
  {
    "text": "the last the last element but not including the last element then what",
    "start": "815889",
    "end": "821139"
  },
  {
    "text": "we're going to do with our sequence of middle names because that's what that expression effectively represents now is",
    "start": "821139",
    "end": "826660"
  },
  {
    "text": "we're going to aggregate it down to a single item so aggregate is how you would take a sequence of items and",
    "start": "826660",
    "end": "832269"
  },
  {
    "text": "reduce it down to a single one which is typically why it's called reduce in in functional programming languages so here",
    "start": "832269",
    "end": "839859"
  },
  {
    "text": "this will reduce it down to a single name but of course because of the way this works a bit like our imperative",
    "start": "839859",
    "end": "845410"
  },
  {
    "text": "version we're going to end up with a proceeding space in this case because the very first time we're going to take",
    "start": "845410",
    "end": "850779"
  },
  {
    "text": "the first middle name and add it to this empty string so we're going to end up with a space so trim solves that for us",
    "start": "850779",
    "end": "857609"
  },
  {
    "text": "so what we can see here is that we've written code that's a lot shorter than",
    "start": "857609",
    "end": "863109"
  },
  {
    "text": "what was there before it's much more declarative we've eliminated all the state in that code and all of the side",
    "start": "863109",
    "end": "868329"
  },
  {
    "text": "effects and we've just worked with expressions rather than with statements but there's still something here which",
    "start": "868329",
    "end": "874029"
  },
  {
    "text": "is a bit icky and that's that trim wouldn't it be nice if we could just you know get a string and in the right",
    "start": "874029",
    "end": "879369"
  },
  {
    "text": "format to begin with rather than getting one that's a little bit wrong and then fixing it so let's look at how we could do that",
    "start": "879369",
    "end": "886110"
  },
  {
    "text": "so this is where we could kind of look around you know in our libraries and we find out that okay we've got something",
    "start": "886619",
    "end": "892839"
  },
  {
    "text": "called string join and that will give us the behavior we want it will take a sequence of strings and then give us the",
    "start": "892839",
    "end": "898629"
  },
  {
    "text": "back joint together in this case with a space but if there is only one string it will just return that string rather than",
    "start": "898629",
    "end": "904809"
  },
  {
    "text": "trying to mash it together with the empty string but we've now lost the readability of the code because again",
    "start": "904809",
    "end": "911519"
  },
  {
    "text": "c-sharp not being fully functional we do have to use string joint in this in this prefix position rather than where we",
    "start": "911519",
    "end": "917889"
  },
  {
    "text": "rather than where we'd prefer it being in sort of postfix position but we can work around that quite easily so what we",
    "start": "917889",
    "end": "924910"
  },
  {
    "text": "can do is we can just create a little extension methods class and then create an extension method off of this the",
    "start": "924910",
    "end": "931179"
  },
  {
    "text": "ienumerable of string and then just pass through to the string join and what this means is that we can to end up in the",
    "start": "931179",
    "end": "937000"
  },
  {
    "text": "place where we want where we can add string join to the end of this pipeline of functions and now this reads reads",
    "start": "937000",
    "end": "943510"
  },
  {
    "text": "much more nicely so you can kind of see what we've done here is we've been able to reduce our",
    "start": "943510",
    "end": "949779"
  },
  {
    "text": "code down we've eliminated the use of statements and just work with an expression so that we can sort of lift our level of abstraction up and program",
    "start": "949779",
    "end": "956470"
  },
  {
    "text": "declaratively stating what we want rather than how to get what we want",
    "start": "956470",
    "end": "962820"
  },
  {
    "text": "so another example I've got for you here is this one so what we've got here is a",
    "start": "962880",
    "end": "969940"
  },
  {
    "text": "little data model so we've got something called an application so you can kind of think of an application in this case to",
    "start": "969940",
    "end": "975310"
  },
  {
    "text": "be like what one would fill out on paper so like you know you're filling out a form and this form has a life cycle and",
    "start": "975310",
    "end": "982540"
  },
  {
    "text": "it goes through a number of state changes so on the model we track the state changes this thing's gone through",
    "start": "982540",
    "end": "987610"
  },
  {
    "text": "so you know it started out in state 1 and we record the time that it moved into that state and then at some point",
    "start": "987610",
    "end": "993190"
  },
  {
    "text": "it moved into state 2 at this time and then it moved into state 3 at this time now imagine where we're taking this in",
    "start": "993190",
    "end": "999820"
  },
  {
    "text": "this model and we want to display it to the user you know and one of the nice things we want to do for the user is not just show",
    "start": "999820",
    "end": "1006270"
  },
  {
    "text": "them the start date but we also want to show them how long it was in a particular state for so how we typically",
    "start": "1006270",
    "end": "1012570"
  },
  {
    "text": "handle that is we'll create a view model for the for the state change and on the bat we'll calculate that duration and",
    "start": "1012570",
    "end": "1018180"
  },
  {
    "text": "then just to make it easy to bind it in to the UI so what we're going to do is write a bit of code here to calculate",
    "start": "1018180",
    "end": "1024360"
  },
  {
    "text": "that duration so if we think about how we're going to do that it's basically a set of",
    "start": "1024360",
    "end": "1029550"
  },
  {
    "text": "subtractions so in order to defect in order to figure out the duration of a state we basically want to take it's the",
    "start": "1029550",
    "end": "1034890"
  },
  {
    "text": "time that it started and the time that it ends ended and then subtract the start from the end to get the duration",
    "start": "1034890",
    "end": "1040890"
  },
  {
    "text": "so we can say that the end time of a particular state is the start time of its successor so in this case to get",
    "start": "1040890",
    "end": "1047339"
  },
  {
    "text": "state once duration we want to take state to start date and subtract state 1 start date away from it and then state",
    "start": "1047339",
    "end": "1054570"
  },
  {
    "text": "threes for to get state twos duration we want to take start state 3 start date and subtract from it state to start date",
    "start": "1054570",
    "end": "1060840"
  },
  {
    "text": "and for state 3 it's a little bit different because that's the state we're currently in so there is no real end date so we'll just use now time to",
    "start": "1060840",
    "end": "1067650"
  },
  {
    "text": "represent the end date because that way we can say well how long have we in the state up until now",
    "start": "1067650",
    "end": "1074180"
  },
  {
    "text": "so if we're going to write some imperative code here in order to to calculate this and create those view",
    "start": "1074180",
    "end": "1080400"
  },
  {
    "text": "models what we'll have is a function that probably looks a bit like this so what we're going to have is basically a",
    "start": "1080400",
    "end": "1086970"
  },
  {
    "text": "function which takes our state changes in and returns a list of state change view models out so we'll create our list",
    "start": "1086970",
    "end": "1094170"
  },
  {
    "text": "of of view models and then what we're going to do is we're just going to loop through those state changes and and yank",
    "start": "1094170",
    "end": "1101340"
  },
  {
    "text": "out from using the index the current state now we need to determine what the end date is for this particular state so",
    "start": "1101340",
    "end": "1107760"
  },
  {
    "text": "what we're going to do is we're going to index forward one in the array to get the next state start date to be the end",
    "start": "1107760",
    "end": "1113160"
  },
  {
    "text": "date of course we need to be careful we don't end index off the end of the array so we have an if statement to protect us",
    "start": "1113160",
    "end": "1119070"
  },
  {
    "text": "from that so and then if we are in the the final position in the array we obviously grab the now time to use as",
    "start": "1119070",
    "end": "1126450"
  },
  {
    "text": "our as our end date we use our object initializer to create our view model and calculate our duration by subtracting",
    "start": "1126450",
    "end": "1133470"
  },
  {
    "text": "the start date away from the end date then we take that view models and then add it to the edit to the view models",
    "start": "1133470",
    "end": "1140010"
  },
  {
    "text": "list and eventually once we've gone around that loop we return the view models now that's that's pretty typical",
    "start": "1140010",
    "end": "1147390"
  },
  {
    "text": "code not particularly difficult but we could improve it a lot by again lifting a level of abstraction up and thinking",
    "start": "1147390",
    "end": "1153600"
  },
  {
    "text": "about sequences and thinking about how we could write this in a declarative style rather than this imperative style",
    "start": "1153600",
    "end": "1159290"
  },
  {
    "text": "so let's take a step back and think about the problem so what we've",
    "start": "1159290",
    "end": "1164670"
  },
  {
    "text": "basically got here is effectively two sequences of dates we've basically got our start dates in a sequence and we've",
    "start": "1164670",
    "end": "1171420"
  },
  {
    "text": "got our end dates in a sequence and what we basically want to do is subtract",
    "start": "1171420",
    "end": "1177360"
  },
  {
    "text": "those two off of each other so we want to be able to walk through those two sequences together and then subtract off each pair",
    "start": "1177360",
    "end": "1184160"
  },
  {
    "text": "so naturally you know that being an operation over sequences we can hope that there's something in our DSL for",
    "start": "1184160",
    "end": "1191640"
  },
  {
    "text": "sequences which is in this case is linked to help us do that and there is there's a function called zip so what",
    "start": "1191640",
    "end": "1198780"
  },
  {
    "text": "we're going to do first is get our two sequences so we basically got our sequences of start dates or that's our",
    "start": "1198780",
    "end": "1205200"
  },
  {
    "text": "state changes list that's basically the same thing and what we now need to get is our sequence of end dates here and we",
    "start": "1205200",
    "end": "1212970"
  },
  {
    "text": "can do that here by basically just taking our state changes skipping the first one so that we end up starting on",
    "start": "1212970",
    "end": "1219090"
  },
  {
    "text": "state two and then concatenate sequence an additional state change which",
    "start": "1219090",
    "end": "1225210"
  },
  {
    "text": "contains our hour now time right so that means we're now have both this sequence",
    "start": "1225210",
    "end": "1230250"
  },
  {
    "text": "and this sequence here so then what we want to do is basically step through those two sequences",
    "start": "1230250",
    "end": "1236610"
  },
  {
    "text": "together so we're going to use zip to do that so zip takes two sequences the state change and then the next states",
    "start": "1236610",
    "end": "1242580"
  },
  {
    "text": "and then you give it a lambda where it basically calls the lambda with each pair so we'll take our current in our",
    "start": "1242580",
    "end": "1248850"
  },
  {
    "text": "next states and then we'll use an object initializer to calculate our duration by",
    "start": "1248850",
    "end": "1254190"
  },
  {
    "text": "doing the subtraction and then to list that out and return it so you can see when we transform this",
    "start": "1254190",
    "end": "1261900"
  },
  {
    "text": "into using a declarative style and and used linked as our DSL over sequences",
    "start": "1261900",
    "end": "1267270"
  },
  {
    "text": "we're able to write code that's a lot more simple and a lot more readable and",
    "start": "1267270",
    "end": "1272940"
  },
  {
    "text": "it's also a lot shorter so this is sort of the perfect example of a case where",
    "start": "1272940",
    "end": "1278910"
  },
  {
    "text": "you know we could we could write how to get what we want and this in you know our imperative version here is literally",
    "start": "1278910",
    "end": "1284730"
  },
  {
    "text": "saying how to get what we want we want to index forward in an array and look forward but we don't want to go off the end so we're managing all these little",
    "start": "1284730",
    "end": "1291510"
  },
  {
    "text": "bits ourselves managing that state let's not manage state let's lift ourselves up and declare what we want rather than how",
    "start": "1291510",
    "end": "1297660"
  },
  {
    "text": "to get what we want okay so so far we sort of looked at dear",
    "start": "1297660",
    "end": "1305910"
  },
  {
    "text": "selves over sequences another thing we work a lot with in languages like C sharp and JavaScript is novel types so",
    "start": "1305910",
    "end": "1313170"
  },
  {
    "text": "we can make our lives a little bit easier by programming functionally when we're dealing with novel types so here's",
    "start": "1313170",
    "end": "1321090"
  },
  {
    "text": "a very typical example of a bunch of null checking you've probably written before so again we've got some",
    "start": "1321090",
    "end": "1326130"
  },
  {
    "text": "application and on it we have say it some identity details and energies those of someone filling their stuff out and",
    "start": "1326130",
    "end": "1331500"
  },
  {
    "text": "on that we have their address and then on their address we have their suburb and here we basically want to pull out",
    "start": "1331500",
    "end": "1337530"
  },
  {
    "text": "that suburb but of course the path could be null along the way at any point right so we need to make sure that it's not",
    "start": "1337530",
    "end": "1343120"
  },
  {
    "text": "null so we don't get our null reference exception and if it is not anywhere along the way we basically want to",
    "start": "1343120",
    "end": "1349270"
  },
  {
    "text": "return unknown as the suburb so we start with that we do an if statement and then",
    "start": "1349270",
    "end": "1354730"
  },
  {
    "text": "if we can get to where we want we start affecting and suburb and overwrite it with the value that we want so this is",
    "start": "1354730",
    "end": "1361240"
  },
  {
    "text": "using statements let's see if there's a way to write using expressions instead so the first thing we want to do is add",
    "start": "1361240",
    "end": "1367870"
  },
  {
    "text": "a couple of add a couple of tools to our toolbox so we basically want to write this little maybe function and what this",
    "start": "1367870",
    "end": "1374950"
  },
  {
    "text": "may be function does is it's an extension method that extends off of in this case reference type so T can be any",
    "start": "1374950",
    "end": "1381549"
  },
  {
    "text": "reference type that's what this is saying here and then it takes a function which takes whatever that T is and",
    "start": "1381549",
    "end": "1388179"
  },
  {
    "text": "returns something so that can be whatever that lambda decides it wants to return so the implementation is very",
    "start": "1388179",
    "end": "1394990"
  },
  {
    "text": "simple all we do is we use a ternary expression to say is our T our object not null if it isn't null call the",
    "start": "1394990",
    "end": "1401890"
  },
  {
    "text": "function with it if it is null return whatever the default value of T return",
    "start": "1401890",
    "end": "1407110"
  },
  {
    "text": "would have been so if T return was like a strings or some reference type then it will be null if it's a value type it'll",
    "start": "1407110",
    "end": "1412450"
  },
  {
    "text": "be the default of whatever value type is similarly we have a version for value types nullable value types here as well",
    "start": "1412450",
    "end": "1419110"
  },
  {
    "text": "so this particular version takes a T which is a value type so struct and but",
    "start": "1419110",
    "end": "1424570"
  },
  {
    "text": "it's an honorable value type so it has a users has value and then does a very",
    "start": "1424570",
    "end": "1429880"
  },
  {
    "text": "similar thing so if we use this maybe function we can",
    "start": "1429880",
    "end": "1435100"
  },
  {
    "text": "write to that null checking instead using expressions rather than our statement so here what we can basically do is say grab our identity details",
    "start": "1435100",
    "end": "1443040"
  },
  {
    "text": "maybe if it's not null access to the address maybe if the address is not null access",
    "start": "1443040",
    "end": "1449799"
  },
  {
    "text": "to suburb and then what we're going to do is we're going to use the null coalesced operator to basically fall",
    "start": "1449799",
    "end": "1454990"
  },
  {
    "text": "back to the unknown value if anything along this path is null because if this",
    "start": "1454990",
    "end": "1460510"
  },
  {
    "text": "is null then this will not run and this will not run right well the land that",
    "start": "1460510",
    "end": "1466690"
  },
  {
    "text": "won't be called you just fall back to know if address is null then this lambda won't be called because the",
    "start": "1466690",
    "end": "1473740"
  },
  {
    "text": "address was null so it just flows and composes through quite nicely that's such a nice pattern that in in",
    "start": "1473740",
    "end": "1480160"
  },
  {
    "text": "c-sharp six they actually decided to lift that idea up into the language so that's a great example of more and more",
    "start": "1480160",
    "end": "1485410"
  },
  {
    "text": "sort of functional ideas getting incorporated into the language so in c-sharp six you can actually get rid of the maybes altogether and just use your",
    "start": "1485410",
    "end": "1492670"
  },
  {
    "text": "conditional member access operator so in here you can basically you just go question mark dot and you sort of get",
    "start": "1492670",
    "end": "1500020"
  },
  {
    "text": "the same behavior where identity details is then if identity details is is null",
    "start": "1500020",
    "end": "1506110"
  },
  {
    "text": "we won't access address and if we if it isn't well we'll we'll access it and so on so that's a much Tercel way of",
    "start": "1506110",
    "end": "1511960"
  },
  {
    "text": "writing the same the same logic however that doesn't mean that the maybe",
    "start": "1511960",
    "end": "1517480"
  },
  {
    "text": "method can just go in the bin it's still about its uses so imagine the case here",
    "start": "1517480",
    "end": "1522930"
  },
  {
    "text": "where we basically want to drill into the same data structure but instead of grabbing the suburb we want to grab",
    "start": "1522930",
    "end": "1528820"
  },
  {
    "text": "whether or not it's an apartment address and then we want to say yes or no is the string because think maybe we're",
    "start": "1528820",
    "end": "1534340"
  },
  {
    "text": "displaying this in the UI and we just don't want to display true or false we want to give it a bit more of a friendly human when he's friendly human words so",
    "start": "1534340",
    "end": "1542830"
  },
  {
    "text": "here again we're using if statements were sight affecting into his apartment yes/no let's tighten this up using that",
    "start": "1542830",
    "end": "1549910"
  },
  {
    "text": "conditional member access operator and maybe so we can basically do add any",
    "start": "1549910",
    "end": "1555340"
  },
  {
    "text": "details question mark dot address so optionally access address and then maybe",
    "start": "1555340",
    "end": "1560530"
  },
  {
    "text": "if address is not null look at the apartment and use a conditional to get a",
    "start": "1560530",
    "end": "1566980"
  },
  {
    "text": "conditional expression to transform yes or no so maybe is great",
    "start": "1566980",
    "end": "1573010"
  },
  {
    "text": "when you want to drill through a path but you maybe also want to do a transform and run a bit of code at the same time the conditional member access",
    "start": "1573010",
    "end": "1579190"
  },
  {
    "text": "operators great but you can't do that you can't do this with that so this should still be in your in still be in",
    "start": "1579190",
    "end": "1584500"
  },
  {
    "text": "your toolbox to allow you to keep writing those declarative expressions rather than writing statements",
    "start": "1584500",
    "end": "1591450"
  },
  {
    "text": "so we've sort of seen a few examples in c-sharp now let's switch over and have a look at a few examples in in JavaScript",
    "start": "1591810",
    "end": "1599320"
  },
  {
    "text": "instead so I've got BS code here and I can't make that any smaller so",
    "start": "1599320",
    "end": "1605950"
  },
  {
    "text": "what I've done here is I made a few examples in node they're quite simple and this first one is basically putting",
    "start": "1605950",
    "end": "1612640"
  },
  {
    "text": "the the logic we did for splitting full names into into JavaScript so you can",
    "start": "1612640",
    "end": "1619240"
  },
  {
    "text": "kind of see here that the things that you learn and these libraries that you learn in c-sharp it's not wasted it's",
    "start": "1619240",
    "end": "1626140"
  },
  {
    "text": "not wasted knowledge that's sort of that sort of DSL over sequences is widely reusable across languages it might look",
    "start": "1626140",
    "end": "1632830"
  },
  {
    "text": "a little bit different but the ideas and those concepts are the same so if you if you go looking in JavaScript you can",
    "start": "1632830",
    "end": "1639730"
  },
  {
    "text": "find a library called lodash which will give you those that DSL over sequences if you go to F sharp you've got the same",
    "start": "1639730",
    "end": "1646299"
  },
  {
    "text": "sort of thing there if you go to Scala you've got the same sort of thing there if you go to Haskell again it's the same sort of thing so this these are these",
    "start": "1646299",
    "end": "1652480"
  },
  {
    "text": "ideas and these and these knowledge is you know you don't lose it when you move from one platform to another",
    "start": "1652480",
    "end": "1658169"
  },
  {
    "text": "so javascript tends to come with a pretty anemic standard library you don't",
    "start": "1658169",
    "end": "1663490"
  },
  {
    "text": "get much out of the box but that's where the open source community is sort of stepped up and there are lots of libraries that you can pull in to fill",
    "start": "1663490",
    "end": "1670210"
  },
  {
    "text": "in the gaps so if we want this sequence we want this DSL over sequences of",
    "start": "1670210",
    "end": "1675490"
  },
  {
    "text": "values this is where a library called lodash can come in and save the day so lodash is sort of the successor to a",
    "start": "1675490",
    "end": "1682840"
  },
  {
    "text": "library called underscore which was called underscore because it used the underscore and then lo - they played on",
    "start": "1682840",
    "end": "1688779"
  },
  {
    "text": "the name and and that's how they sort of got the lo - name so in this particular example what we're",
    "start": "1688779",
    "end": "1697450"
  },
  {
    "text": "going to do is again do this support this full name splitting so we're going to split both by string and in this case",
    "start": "1697450",
    "end": "1703179"
  },
  {
    "text": "we don't have that overload to just eliminate empty strings for us so we'll just do a filter ourselves by hand to",
    "start": "1703179",
    "end": "1708700"
  },
  {
    "text": "get rid of the empty strings then we'll create an object with those properties and you'll notice that again we're using",
    "start": "1708700",
    "end": "1713919"
  },
  {
    "text": "underscore dot and we've got those very similar functions that we had in link we've still got them in JavaScript so in",
    "start": "1713919",
    "end": "1719679"
  },
  {
    "text": "this case we can call first on our array of names and it will return the first",
    "start": "1719679",
    "end": "1725140"
  },
  {
    "text": "and I think it returns undefined if that is empty so that's why we use the basically a truth a check to fallback to",
    "start": "1725140",
    "end": "1732070"
  },
  {
    "text": "null because I'd rather have null undefined' here for surname we've got ternary expressions in JavaScript so we",
    "start": "1732070",
    "end": "1738120"
  },
  {
    "text": "can do the same sort of thing here we've got a last so we can call that now for middle name it's a little bit different",
    "start": "1738120",
    "end": "1743310"
  },
  {
    "text": "so JavaScript in c-sharp aren't the same obviously so in c-sharp to compose",
    "start": "1743310",
    "end": "1748410"
  },
  {
    "text": "functions nicely we use 10 to use extension methods in JavaScript there are a number of ways of achieving the",
    "start": "1748410",
    "end": "1753960"
  },
  {
    "text": "same sort of thing so in this version of lodash there's a function called chain which they're basically",
    "start": "1753960",
    "end": "1761060"
  },
  {
    "text": "implemented which what we'll do is you give it the input to your chain and function calls and it returns some",
    "start": "1761060",
    "end": "1766950"
  },
  {
    "text": "objects which you could continually dot off of and build up that set of operations so in this case we start out",
    "start": "1766950",
    "end": "1773550"
  },
  {
    "text": "with chain we do a drop to skip our first one so notice it's drop rather than skip but it does the same sort of",
    "start": "1773550",
    "end": "1779700"
  },
  {
    "text": "thing take we do a join and then value is how we sort of exit out of that chain",
    "start": "1779700",
    "end": "1785040"
  },
  {
    "text": "and get our final our final value out of it so if I run this I can prove that it",
    "start": "1785040",
    "end": "1790980"
  },
  {
    "text": "does work so it runs and you know splits up our",
    "start": "1790980",
    "end": "1796110"
  },
  {
    "text": "names as we expect so you can kind of see here that we're also able to lift our level of abstraction up and write",
    "start": "1796110",
    "end": "1802590"
  },
  {
    "text": "declarative code in JavaScript as well now the lodash team have this is the",
    "start": "1802590",
    "end": "1808620"
  },
  {
    "text": "sort of code that you might write if you're using a slightly older version of lodash if you're coming in new you'll",
    "start": "1808620",
    "end": "1813630"
  },
  {
    "text": "probably use the latest version which case they've got a slightly different way of composing functions because what they realize is when they implemented",
    "start": "1813630",
    "end": "1819960"
  },
  {
    "text": "chain is that the way chains implemented requires them to basically pull in all of lodash in to require the whole thing",
    "start": "1819960",
    "end": "1827850"
  },
  {
    "text": "in now when we're bundling up our JavaScript and sending it to the sending it to the client we want to try and keep",
    "start": "1827850",
    "end": "1832860"
  },
  {
    "text": "our bundle as small as possible so we're not you know using up too much bandwidth and we don't want it to be slow so the",
    "start": "1832860",
    "end": "1838920"
  },
  {
    "text": "lodash is kind of a kitchen sink of lots of different functions so if you only use a small subset of them why send all",
    "start": "1838920",
    "end": "1844470"
  },
  {
    "text": "across all the ones you're not using so they didn't really want you to have to require in all of lo - they just wanted",
    "start": "1844470",
    "end": "1850020"
  },
  {
    "text": "you to be able to requiring the bits that you wanted and chain didn't let them do that not in a clean and easy way",
    "start": "1850020",
    "end": "1855060"
  },
  {
    "text": "so in low - 4 they implemented an FP an FP sort of module where you can",
    "start": "1855060",
    "end": "1861660"
  },
  {
    "text": "individually require in functions you want you don't have to but even though if you're trying to keep your",
    "start": "1861660",
    "end": "1867480"
  },
  {
    "text": "keep your bundle size down then this does help so you can see here I've required in all the same functions we",
    "start": "1867480",
    "end": "1873060"
  },
  {
    "text": "were using before but this time the way we compose them together we don't use chain we use flow instead now flow is a",
    "start": "1873060",
    "end": "1881100"
  },
  {
    "text": "function which basically takes multiple parameters so JavaScript being",
    "start": "1881100",
    "end": "1886350"
  },
  {
    "text": "dynamic we can pass as many parameters to a function as we want and it can figure it out later",
    "start": "1886350",
    "end": "1891360"
  },
  {
    "text": "so you basically just pass as many different functions to flow as you want and then flow returns itself a function",
    "start": "1891360",
    "end": "1899580"
  },
  {
    "text": "which you call with the input to your chain of functions so again here we're",
    "start": "1899580",
    "end": "1904680"
  },
  {
    "text": "just calling drop take and join but it's a bit weird this time because you know we're not dotting things together we're",
    "start": "1904680",
    "end": "1910920"
  },
  {
    "text": "sort of calling drop and then it returns something which goes into flow and somehow magic happens so let's see how",
    "start": "1910920",
    "end": "1917760"
  },
  {
    "text": "that magic works so what what the low - guys have done is they've basically",
    "start": "1917760",
    "end": "1923220"
  },
  {
    "text": "picked up a technique from functional programming land called function currying so here's an example of an",
    "start": "1923220",
    "end": "1928710"
  },
  {
    "text": "uncrewed function and these are what we're typically used to writing in c-sharp and JavaScript basically functions that have more than one",
    "start": "1928710",
    "end": "1935820"
  },
  {
    "text": "parameter right so there is an example of how you'd write drop in that unpowered form so you'd have count and",
    "start": "1935820",
    "end": "1942720"
  },
  {
    "text": "array as to its distinct parameters on the function if we were to carry this",
    "start": "1942720",
    "end": "1947760"
  },
  {
    "text": "function we need to be able to reduce it down so the function only ever takes one parameter at a time so my drop down here",
    "start": "1947760",
    "end": "1954420"
  },
  {
    "text": "is the curried version of that so it takes one parameter the first one count and then returns a function that takes",
    "start": "1954420",
    "end": "1960660"
  },
  {
    "text": "the next parameter array which when invoked does your action so you know",
    "start": "1960660",
    "end": "1966330"
  },
  {
    "text": "that's kind of how they split up those multiple parameters into into functions that each take one parameter at a time",
    "start": "1966330",
    "end": "1974090"
  },
  {
    "text": "so down here you can kind of see how that's how that's um invoked so you call",
    "start": "1974090",
    "end": "1979830"
  },
  {
    "text": "my drop with the first parameter it returns a function you invoke that and you know if things happen so that's",
    "start": "1979830",
    "end": "1985140"
  },
  {
    "text": "what's happening up in here when we compose together our function so we're calling drop one here and that what",
    "start": "1985140",
    "end": "1990630"
  },
  {
    "text": "that's doing is returning a function that when given an array will drop one thing from that array and return an",
    "start": "1990630",
    "end": "1996540"
  },
  {
    "text": "array and then take is returning a function that when you give it an array it will return an array so what Flo is",
    "start": "1996540",
    "end": "2003500"
  },
  {
    "text": "basically doing it's very simple it returns a function that when you give it an array it will pass that array to the",
    "start": "2003500",
    "end": "2010490"
  },
  {
    "text": "first function here that function will take it return something Flo will take the return value from the first function",
    "start": "2010490",
    "end": "2016580"
  },
  {
    "text": "and pass it to that as the input to the second the second function will do something return something Flo will take the output from that passes the input to",
    "start": "2016580",
    "end": "2023510"
  },
  {
    "text": "this and so on and so forth so you can basically flow together many functions into a single larger function so this is",
    "start": "2023510",
    "end": "2030650"
  },
  {
    "text": "this is basically how functional programming languages do functional composition they compose together these",
    "start": "2030650",
    "end": "2036890"
  },
  {
    "text": "functions into a wider function and that's exactly what Flo is doing so Flo here all of that expression is returning",
    "start": "2036890",
    "end": "2042470"
  },
  {
    "text": "a function that is the the composition of those inner functions",
    "start": "2042470",
    "end": "2048099"
  },
  {
    "text": "so another interesting thing about the way this is done is you can introduce your",
    "start": "2048099",
    "end": "2054020"
  },
  {
    "text": "own functions here so if there isn't one in that bag and there probably is because lodash has a ton of them so",
    "start": "2054020",
    "end": "2059240"
  },
  {
    "text": "always look in there doc to see whether there's something that does what you need before before writing your own but",
    "start": "2059240",
    "end": "2064970"
  },
  {
    "text": "if you want to you can actually put your own functions in here and they can just participate because this thing just",
    "start": "2064970",
    "end": "2070940"
  },
  {
    "text": "composes together any old functions so if I put in the one I implemented below and run this it'll work just fine even",
    "start": "2070940",
    "end": "2079070"
  },
  {
    "text": "though it's not a function that was from from lodash",
    "start": "2079070",
    "end": "2083290"
  },
  {
    "text": "so if I switch over to this example this is another good example of where if we",
    "start": "2084399",
    "end": "2090858"
  },
  {
    "text": "were to write this code in an imperative style we'd end up having to write a bunch of state management code when",
    "start": "2090859",
    "end": "2096560"
  },
  {
    "text": "really we just want to state what we want and get it so this particular example we've got a list of users they",
    "start": "2096560",
    "end": "2102980"
  },
  {
    "text": "have email addresses and names and what we want to do is write a bit of logic that figures out whether or not an email",
    "start": "2102980",
    "end": "2108230"
  },
  {
    "text": "address appears more than once in this list of users so maybe we can put a warning up in the UI and say hey you've",
    "start": "2108230",
    "end": "2113330"
  },
  {
    "text": "entered the same thing in twice so in this particular example what we're",
    "start": "2113330",
    "end": "2118760"
  },
  {
    "text": "going to do is we've pulled in all of lodash FP so you know I can't be",
    "start": "2118760",
    "end": "2123950"
  },
  {
    "text": "bothered pulling it in each of the functions by hand here so I can still do the same underscore dot and get my functions so we're flowing together a",
    "start": "2123950",
    "end": "2131150"
  },
  {
    "text": "number of different functions here the first one being count by and what that's going to do is it's going to take our list of users and then",
    "start": "2131150",
    "end": "2138600"
  },
  {
    "text": "it's going to run our lambda for each of the users and the lambda is going to return some value which count by is",
    "start": "2138600",
    "end": "2144720"
  },
  {
    "text": "going to count the number of times that value turns up so in this case what we're doing is we're returning an email",
    "start": "2144720",
    "end": "2149880"
  },
  {
    "text": "address which we're lower casing and trimming so that if there's different casing we ignore it if there's trailing spaces we",
    "start": "2149880",
    "end": "2156090"
  },
  {
    "text": "fix that up and it will count the number of times that email address shows up and whatever we do is in a very JavaScript",
    "start": "2156090",
    "end": "2163200"
  },
  {
    "text": "fashion it will return object so it won't return an array it'll return an object where the properties on the",
    "start": "2163200",
    "end": "2168780"
  },
  {
    "text": "object the property names are the email addresses and the property values are the the counts the number the number of",
    "start": "2168780",
    "end": "2174720"
  },
  {
    "text": "times that email address is turned up so then what pic buyer will do is pick by",
    "start": "2174720",
    "end": "2180150"
  },
  {
    "text": "will take an object and it will filter the properties on that object so it will call this lambda with the the name of",
    "start": "2180150",
    "end": "2188760"
  },
  {
    "text": "the property which in this case is the email address and the value of the property which in this case is the count and allow us to basically filter off",
    "start": "2188760",
    "end": "2195230"
  },
  {
    "text": "properties we're not interested in so in this case we're saying okay I only keep the properties we're only keep the email",
    "start": "2195230",
    "end": "2201000"
  },
  {
    "text": "addresses where the count is greater than one because we want to look for the duplicates or the triplicates or whatever right then we can flow the",
    "start": "2201000",
    "end": "2209790"
  },
  {
    "text": "output of that which will be in the object with only the duplicate email address properties on it in two keys and",
    "start": "2209790",
    "end": "2215010"
  },
  {
    "text": "what keys will do is only keep the property names and return them in an array so effectively we're passing in an",
    "start": "2215010",
    "end": "2220290"
  },
  {
    "text": "array of users and we're getting back an array of email addresses so I can run it",
    "start": "2220290",
    "end": "2226760"
  },
  {
    "text": "and we get back out a duplicate email address from our list so if you think",
    "start": "2226760",
    "end": "2233430"
  },
  {
    "text": "about how you'd implement that imperative lis it would be a lot more gross than that so you basically have to do something where maybe you'd loop",
    "start": "2233430",
    "end": "2240480"
  },
  {
    "text": "through your your your list of users and you take each email address and you put it in an array and then as you did that",
    "start": "2240480",
    "end": "2246030"
  },
  {
    "text": "you'd say well there's this thing already in the array if it is then put it in another race so that we can return that with because it will contain the",
    "start": "2246030",
    "end": "2251880"
  },
  {
    "text": "duplicates either there's a lot of this basically passing around in state management that when we work at this high level of abstraction we work with",
    "start": "2251880",
    "end": "2257850"
  },
  {
    "text": "these D cells over sequences you know we don't have to do that instead of writing how to get what we want we want to",
    "start": "2257850",
    "end": "2263490"
  },
  {
    "text": "declare what we want up front so we want to use that declarative programming style",
    "start": "2263490",
    "end": "2268760"
  },
  {
    "text": "what's an interesting here is that we can actually shrink this code down into an IVA short even shorter form so what",
    "start": "2270000",
    "end": "2276900"
  },
  {
    "text": "we can do here is we can actually eliminate this function all together because all this function is actually",
    "start": "2276900",
    "end": "2282360"
  },
  {
    "text": "doing is just taking users and passing it to whatever flow returns so that's that's a bit redundant if we want to we",
    "start": "2282360",
    "end": "2289110"
  },
  {
    "text": "can actually shrink this down even further so if we get rid of the function body",
    "start": "2289110",
    "end": "2295730"
  },
  {
    "text": "and put our equals there get rid of our return and all we're doing here is we're",
    "start": "2295730",
    "end": "2302790"
  },
  {
    "text": "just keeping the function that flow returns and that is exactly the same code as what we had before so when I run",
    "start": "2302790",
    "end": "2311040"
  },
  {
    "text": "it same output so you know we can shrink that down even further which is nice",
    "start": "2311040",
    "end": "2317630"
  },
  {
    "text": "alright so what we've looked at so far is DSL over sequences of values and sort",
    "start": "2318200",
    "end": "2324360"
  },
  {
    "text": "of some DSL DSL function over dealing with nala ball types so now let's let's",
    "start": "2324360",
    "end": "2329670"
  },
  {
    "text": "shift gears and look at a different type of DSL that can help us so if I switch over to a different",
    "start": "2329670",
    "end": "2337380"
  },
  {
    "text": "folder let's go over to rxjs what we're going to look at is a",
    "start": "2337380",
    "end": "2344760"
  },
  {
    "text": "use of a library called Rx which you may or may not have heard of our Rx is pretty cool",
    "start": "2344760",
    "end": "2351440"
  },
  {
    "text": "so what we've looked at we've looked at a sequence overvalues is",
    "start": "2351440",
    "end": "2357470"
  },
  {
    "text": "you know we've looked at something where the sequences are pool based so when you when you iterate over like for example",
    "start": "2357470",
    "end": "2365430"
  },
  {
    "text": "an array and think about a for each loop you're basically saying give me the next item give me the next item give me the next item and then maybe you quit out",
    "start": "2365430",
    "end": "2371070"
  },
  {
    "text": "earlier with a break or something like that but you're in control you get to say when I want the next value sequences",
    "start": "2371070",
    "end": "2376620"
  },
  {
    "text": "of events are different right so you don't necessarily have control over the source of those events so if you think",
    "start": "2376620",
    "end": "2383280"
  },
  {
    "text": "about maybe a map a user moving their mouse across the screen and as they move their mouse events are firing with the",
    "start": "2383280",
    "end": "2388890"
  },
  {
    "text": "XY positions of their of their mouse coordinates you can't control how the user is moving their hand they get to",
    "start": "2388890",
    "end": "2394260"
  },
  {
    "text": "move the hand however they like there's just firing events and you effectively have to catch those events and handle",
    "start": "2394260",
    "end": "2399540"
  },
  {
    "text": "them as they come in so you're not in control the sorts of events you basically receive them as they get sprayed at you so secret when you're",
    "start": "2399540",
    "end": "2406220"
  },
  {
    "text": "dealing with a sequence of values you don't have to worry so much about time you're in control but with sequences of events you do have to worry about time",
    "start": "2406220",
    "end": "2412880"
  },
  {
    "text": "and writing imperative code to deal with timing is hard this is where our X could",
    "start": "2412880",
    "end": "2418460"
  },
  {
    "text": "come in handy because not only can it deal with sequences because it's it deals with sequences of events but it can also deal with timing of events and",
    "start": "2418460",
    "end": "2425270"
  },
  {
    "text": "that's super useful because when you can just declarative loose a deal with time for me it makes your code so much more",
    "start": "2425270",
    "end": "2431450"
  },
  {
    "text": "simple so I've got a couple of pretty neat examples of what that could do for you so in this particular project it's",
    "start": "2431450",
    "end": "2439400"
  },
  {
    "text": "just a little node server a little node Express server that's running some stuff",
    "start": "2439400",
    "end": "2444470"
  },
  {
    "text": "and a little angular app so I am I going to go into the Express and angler stuff it's not really the point",
    "start": "2444470",
    "end": "2450820"
  },
  {
    "text": "we'll just look at the RX stuff so if I switch over to the website",
    "start": "2450820",
    "end": "2457900"
  },
  {
    "text": "okay so the first example is a pretty typical one where we've got a user",
    "start": "2457900",
    "end": "2464090"
  },
  {
    "text": "driven search page so here what we've basically got is a text box they can type into and then because we want to",
    "start": "2464090",
    "end": "2470570"
  },
  {
    "text": "keep our user experience nice and live we basically do searches as they type as opposed to wait till they're finished",
    "start": "2470570",
    "end": "2476180"
  },
  {
    "text": "and then have them press a button to execute the search we want to keep that nice you know fast user experience so",
    "start": "2476180",
    "end": "2483290"
  },
  {
    "text": "you know to implement that's not exactly hard you just do requests as they type but there are some subtle there are some",
    "start": "2483290",
    "end": "2490970"
  },
  {
    "text": "subtle bugs that can come in when you just do it in a naive way so one of the",
    "start": "2490970",
    "end": "2496280"
  },
  {
    "text": "interesting things about asynchrony is that things may not necessarily come in the order that you expect so as the user",
    "start": "2496280",
    "end": "2502190"
  },
  {
    "text": "types in to this box and we're sending out HTTP requests there's no guarantee those responses will come back in the",
    "start": "2502190",
    "end": "2507560"
  },
  {
    "text": "same order that we sent out the requests because you know a request one a request may take longer than another maybe the",
    "start": "2507560",
    "end": "2513200"
  },
  {
    "text": "network got a little bit slow maybe that search is a bit more expensive maybe your servers a bit more under load there's no guarantee there so you have",
    "start": "2513200",
    "end": "2519170"
  },
  {
    "text": "to be able to deal with that but when you write a naive implementation like what's on what's better code that's",
    "start": "2519170",
    "end": "2524780"
  },
  {
    "text": "backing this particular page you can get yourself into some strife so when I type",
    "start": "2524780",
    "end": "2529820"
  },
  {
    "text": "into this box and I type the term slow in that particular request I'm on the server side I force that to be quite a",
    "start": "2529820",
    "end": "2535220"
  },
  {
    "text": "slow and then the words slow fast that result will come back quickly and we'll see things come back out of order so as",
    "start": "2535220",
    "end": "2542070"
  },
  {
    "text": "I type this we can see the responses coming back we've got our seventh zero",
    "start": "2542070",
    "end": "2547230"
  },
  {
    "text": "indexed and then suddenly we flip back to our third response and it's overwritten our later response and now",
    "start": "2547230",
    "end": "2554310"
  },
  {
    "text": "we're showing the wrong search results on the screen this is actually more common than you'd expect I think the latest place where I saw this turn up",
    "start": "2554310",
    "end": "2561180"
  },
  {
    "text": "was on the power website if you go there and type into their package search they have this issue where sometimes if the",
    "start": "2561180",
    "end": "2567240"
  },
  {
    "text": "things come back out of water you get stuff coming back and overriding your search results which is a bit annoying now let's have a look at the code that",
    "start": "2567240",
    "end": "2574349"
  },
  {
    "text": "that implements this so this is a bit of angular code",
    "start": "2574349",
    "end": "2580520"
  },
  {
    "text": "if you don't if you're not familiar with angular don't worry too much about it it's pretty typical basically the scope",
    "start": "2580520",
    "end": "2587400"
  },
  {
    "text": "is a view model on which you put things and then the view can bind to the stuff on the scope and you can also put",
    "start": "2587400",
    "end": "2592920"
  },
  {
    "text": "functions on the scope that the view can basically call when things happen so in",
    "start": "2592920",
    "end": "2598170"
  },
  {
    "text": "this case what we're doing is we're setting a search function on the scope and that search function will be invoked",
    "start": "2598170",
    "end": "2603510"
  },
  {
    "text": "every time the user types into that textbox so effectively for every key press this search function is going to",
    "start": "2603510",
    "end": "2608670"
  },
  {
    "text": "get called this search function what it will do is immediately bundle up their search terms and then call you know do",
    "start": "2608670",
    "end": "2617640"
  },
  {
    "text": "an HTTP request to our server side pass those parameters through and then this particular function will return a",
    "start": "2617640",
    "end": "2623099"
  },
  {
    "text": "promise which allows us to hook a call back in to receive the response asynchronously so this is our callback",
    "start": "2623099",
    "end": "2629280"
  },
  {
    "text": "here we'll receive our response we'll just grab the results and put them in the scope so that you know they're",
    "start": "2629280",
    "end": "2634770"
  },
  {
    "text": "displayed on the screen but the subtle bug here is a timing bug where you know these responses there's no guarantee",
    "start": "2634770",
    "end": "2640740"
  },
  {
    "text": "that these callbacks will be called in the same order that we actually sent out those requests so we need to we need to",
    "start": "2640740",
    "end": "2645930"
  },
  {
    "text": "be able to solve that that timing issue now we could do that by hand by you know putting it put in it capturing an index",
    "start": "2645930",
    "end": "2652440"
  },
  {
    "text": "using the closure and then making sure the index that we could see here is you know make sure that it's not you know",
    "start": "2652440",
    "end": "2658380"
  },
  {
    "text": "less than the one that we've set somewhere else and we do all this munching and state handling but that",
    "start": "2658380",
    "end": "2663930"
  },
  {
    "text": "just makes our code more complicated and again we're stating how to get what we want rather than just what we want we",
    "start": "2663930",
    "end": "2669480"
  },
  {
    "text": "want to lift our level of abstraction up and in this case we can think about our problem in terms of sequences of events",
    "start": "2669480",
    "end": "2675450"
  },
  {
    "text": "and we've got a library on hand that it does allow us to lift that level of abstraction up and and write declarative",
    "start": "2675450",
    "end": "2681180"
  },
  {
    "text": "code over sequences of events so let's have a look at the good example",
    "start": "2681180",
    "end": "2687859"
  },
  {
    "text": "so this one is basically the same code but instead rewritten to use our X so",
    "start": "2687859",
    "end": "2693270"
  },
  {
    "text": "our X is available across multiple platforms it's in JavaScript so there's rxjs and there's also our excellent Nick",
    "start": "2693270",
    "end": "2701369"
  },
  {
    "text": "because that's kind of where it started it and I believe there's ports for our X for the JVM and a whole bunch of other platforms going as well so I'm also",
    "start": "2701369",
    "end": "2709290"
  },
  {
    "text": "using a library called rx angular which just provides a little bit of glue between between angular and rx just to",
    "start": "2709290",
    "end": "2716130"
  },
  {
    "text": "make things a little bit easier so one of the things that Glu provides is this create observable function function on",
    "start": "2716130",
    "end": "2724290"
  },
  {
    "text": "the scope and what will do is it will put a function in this case called search just like we had before on our",
    "start": "2724290",
    "end": "2730230"
  },
  {
    "text": "scope object so it will this thing will mutate the scope which is a bit weird and then it will return this observable",
    "start": "2730230",
    "end": "2738210"
  },
  {
    "text": "sequence so this search observable is and is a sequence of events it represents a sequence of events so just",
    "start": "2738210",
    "end": "2746369"
  },
  {
    "text": "like before that search function is put on the scope and then we've got something in the view which basically will call that function every time",
    "start": "2746369",
    "end": "2751770"
  },
  {
    "text": "someone types which means that our search observable represents a sequence of events of the user typing right so as",
    "start": "2751770",
    "end": "2758849"
  },
  {
    "text": "they enter it keys into that into that textbox we're going to get events firing",
    "start": "2758849",
    "end": "2764160"
  },
  {
    "text": "down this pipeline right so then what we're going to do is we're going to use like our functional Combinator functions",
    "start": "2764160",
    "end": "2771180"
  },
  {
    "text": "here so we're going to use flat map now flat map in link is called select many",
    "start": "2771180",
    "end": "2777119"
  },
  {
    "text": "so there's not too much scary there so what it basically does is it takes a sequence of sequences and then flattens",
    "start": "2777119",
    "end": "2783329"
  },
  {
    "text": "it into a single sequence so here our outer sequence is our sequence of",
    "start": "2783329",
    "end": "2789420"
  },
  {
    "text": "keystrokes effectively and our inner sequence is HTTP requests so you can you",
    "start": "2789420",
    "end": "2796290"
  },
  {
    "text": "can imagine HTTP requests being a sequence if you think about them in terms of the event of their response",
    "start": "2796290",
    "end": "2802290"
  },
  {
    "text": "their response arriving so they end up being sequences or one event where the one event firing is the response but",
    "start": "2802290",
    "end": "2808869"
  },
  {
    "text": "they are a sequence nonetheless and that's the way our ex allows you to do things so you can actually in here what",
    "start": "2808869",
    "end": "2814570"
  },
  {
    "text": "I'm doing is I'm just returning that inner sequence which is that HTTP request and that's a promise and Rx is",
    "start": "2814570",
    "end": "2820840"
  },
  {
    "text": "smart enough to look at a promise and go oh this is a promise cool I'll just treat that like a sequence of one event",
    "start": "2820840",
    "end": "2826590"
  },
  {
    "text": "so after this code here has evaluated what what we effectively have on hand is",
    "start": "2826590",
    "end": "2833410"
  },
  {
    "text": "a sequence of responses now but what's interesting here is we've actually used flatmap latest and this is where our X's",
    "start": "2833410",
    "end": "2841020"
  },
  {
    "text": "ability to deal with time comes in super handy because flat mount pilatus not only flattens a sequence but it also",
    "start": "2841020",
    "end": "2847810"
  },
  {
    "text": "deals with time and it says that if any earlier in a sinner see like any events come back just throw them away if later",
    "start": "2847810",
    "end": "2855100"
  },
  {
    "text": "things have started so this will just straight away solve the problem and any requests that come back out of order any",
    "start": "2855100",
    "end": "2860740"
  },
  {
    "text": "earlier earlier made requests whose response comes back after a later request has already gone out those will",
    "start": "2860740",
    "end": "2867250"
  },
  {
    "text": "just be discarded automatically by our X so this here is basically how we take",
    "start": "2867250",
    "end": "2874330"
  },
  {
    "text": "our sequence of responses and then effectively handle each of those",
    "start": "2874330",
    "end": "2879369"
  },
  {
    "text": "responses so safe apply is something that our X angular gives you so that you can hand it the scope so that it can do",
    "start": "2879369",
    "end": "2884440"
  },
  {
    "text": "all the angular munging of apply and digest and stuff to make sure that when you update your view model the view is",
    "start": "2884440",
    "end": "2889930"
  },
  {
    "text": "rebound and so on and so forth so here we're basically just taking our responses just like whoever before",
    "start": "2889930",
    "end": "2896020"
  },
  {
    "text": "assigning them onto the onto the scope and and we're done so on the very last time",
    "start": "2896020",
    "end": "2902740"
  },
  {
    "text": "you do subscribe and that's effectively what activates your pipeline and starts you listening to that sequences that",
    "start": "2902740",
    "end": "2908560"
  },
  {
    "text": "sequence of events so straight away we can see that you know this is this is",
    "start": "2908560",
    "end": "2914500"
  },
  {
    "text": "not a huge transform to the code we had before in fact the main structure which is basically this stuff right is pretty",
    "start": "2914500",
    "end": "2920740"
  },
  {
    "text": "much intact and this bit here as well and we've just changed how we've composed it together to use our X",
    "start": "2920740",
    "end": "2925930"
  },
  {
    "text": "instead of you know doing it by hand and because our X does allow us to work at",
    "start": "2925930",
    "end": "2930970"
  },
  {
    "text": "that high level we can we can get free stuff like flat map latest so let's have a look at",
    "start": "2930970",
    "end": "2936880"
  },
  {
    "text": "how this will work now that we've got this new code",
    "start": "2936880",
    "end": "2941640"
  },
  {
    "text": "so if I type this in we can see the right response comes back",
    "start": "2942210",
    "end": "2947440"
  },
  {
    "text": "and then if we wait a few seconds there won't be any other requests coming back and stomping on my current results so",
    "start": "2947440",
    "end": "2955090"
  },
  {
    "text": "let's just solve that problem straight out of hand now because we're sort of working in",
    "start": "2955090",
    "end": "2960220"
  },
  {
    "text": "this functional declarative style we can add new things to this quite easily in a in a very safe way so you'll notice here",
    "start": "2960220",
    "end": "2966990"
  },
  {
    "text": "you know this is quite an efficient for every keystrokes that I did I sent out a request so I sent eight requests here",
    "start": "2966990",
    "end": "2973390"
  },
  {
    "text": "been really you know one or two - effaced so we can solve this very easily",
    "start": "2973390",
    "end": "2978700"
  },
  {
    "text": "by using our X now if you think about try and think in your head how you do that if you were doing imperative code",
    "start": "2978700",
    "end": "2984820"
  },
  {
    "text": "you'd have to write a whole bunch of state management to say oh how long has it been since the last time that the",
    "start": "2984820",
    "end": "2990010"
  },
  {
    "text": "user put a keystroke e and has it been long enough and if it has then send request I don't want to do that you",
    "start": "2990010",
    "end": "2995860"
  },
  {
    "text": "don't want to do that we just want to use D bounce and D bounce we can just",
    "start": "2995860",
    "end": "3000960"
  },
  {
    "text": "compose it in straight there and what this is going to do is going to take that sequence of keystrokes and then",
    "start": "3000960",
    "end": "3007220"
  },
  {
    "text": "transform it into a sequence where it will only allow events down the pipeline",
    "start": "3007220",
    "end": "3012240"
  },
  {
    "text": "once the pipeline's been quiet for 200 milliseconds so if no event has come down the pipeline for 200 milliseconds",
    "start": "3012240",
    "end": "3018060"
  },
  {
    "text": "it'll like it'll let only the last one through so that way the basically throttles our our rate of events down",
    "start": "3018060",
    "end": "3024840"
  },
  {
    "text": "this thing so if I now fresh this guy and type in here",
    "start": "3024840",
    "end": "3030050"
  },
  {
    "text": "we get run request rather than eight and it was one line of code to change that so you know those are the sorts of",
    "start": "3030050",
    "end": "3036570"
  },
  {
    "text": "advantages that we get by working at that high level abstraction and leaning on these libraries to allow us to",
    "start": "3036570",
    "end": "3041700"
  },
  {
    "text": "program declaratively so I have a final example",
    "start": "3041700",
    "end": "3047330"
  },
  {
    "text": "here which is one which does a bit of polling so here what we've basically got",
    "start": "3047330",
    "end": "3055170"
  },
  {
    "text": "is a little page which pulls the server for State so on a previous project that I worked on you know we basically built",
    "start": "3055170",
    "end": "3061920"
  },
  {
    "text": "an application form where the user could enter in a whole bunch of details and then eventually submit the thing and it",
    "start": "3061920",
    "end": "3068220"
  },
  {
    "text": "would go off and be processed async I see on the service side so that processing may take a few a few seconds",
    "start": "3068220",
    "end": "3073770"
  },
  {
    "text": "so we basically drop them onto a Status page where we live showed them the status of their application as it moves",
    "start": "3073770",
    "end": "3079770"
  },
  {
    "text": "through certain states so you can probably see where the source of that state change example came from",
    "start": "3079770",
    "end": "3085010"
  },
  {
    "text": "so we knew that it would probably only take a few seconds for the full process",
    "start": "3085010",
    "end": "3090030"
  },
  {
    "text": "to complete so we wanted to keep that UI pretty alive so we just polled pretty quickly and but we knew that sometimes",
    "start": "3090030",
    "end": "3096860"
  },
  {
    "text": "third-party services got slow and when they did there's not a lot we could do about it you just had to wait so we",
    "start": "3096860",
    "end": "3103950"
  },
  {
    "text": "didn't want to just pound the server every second while this thing sat there for maybe a couple of minutes because that's just wasteful so what we wanted",
    "start": "3103950",
    "end": "3110370"
  },
  {
    "text": "to do is basically slow up holing down so that we you know eventually we were only pulling every 10 seconds so we kind",
    "start": "3110370",
    "end": "3116580"
  },
  {
    "text": "of set up a little polling function which basically allowed us to poll every one second ten times",
    "start": "3116580",
    "end": "3122790"
  },
  {
    "text": "when the page first loaded then every four seconds ten times and then every 10",
    "start": "3122790",
    "end": "3128820"
  },
  {
    "text": "seconds until eventually we got into the state we wanted in which case we didn't want to poll anymore because we've moved",
    "start": "3128820",
    "end": "3134580"
  },
  {
    "text": "into in this case I simplified it down to just loading and complete so once we're in that completes state we don't",
    "start": "3134580",
    "end": "3140250"
  },
  {
    "text": "want to poll anymore because we're done we don't need to so we want to stop pulling in a certain point so we sort of hold fast slow down and then slow down",
    "start": "3140250",
    "end": "3146640"
  },
  {
    "text": "further so if we go to the code what we've got here",
    "start": "3146640",
    "end": "3155430"
  },
  {
    "text": "is how we construct that so the nice thing about working with sequences of",
    "start": "3155430",
    "end": "3160980"
  },
  {
    "text": "events is that we can actually write this declarative code so if you think about polling that is just a sequence of",
    "start": "3160980",
    "end": "3166680"
  },
  {
    "text": "events it's a sequence of clock ticks right so we can model that so what we can do here is use our X so in this",
    "start": "3166680",
    "end": "3173250"
  },
  {
    "text": "first line our x observable return is going to create a sequence that fires one event because what we want to do is",
    "start": "3173250",
    "end": "3180330"
  },
  {
    "text": "basically fire immediately so I you know we wanted we want to poll once a second ten times but first we want to send one",
    "start": "3180330",
    "end": "3186480"
  },
  {
    "text": "amelie we don't want to wait one second so this gives us the sequence which fires once immediately and the value",
    "start": "3186480",
    "end": "3193020"
  },
  {
    "text": "that gets fired down this sequence is null because I don't actually care what the the events are in this case all I",
    "start": "3193020",
    "end": "3198390"
  },
  {
    "text": "want is the timing and for them to drive something so then to that sequence we simply concatenate another sequence in",
    "start": "3198390",
    "end": "3206250"
  },
  {
    "text": "this case we're going to concatenate a sequence where we've ticks every one seconds that's interval a thousand and",
    "start": "3206250",
    "end": "3213510"
  },
  {
    "text": "then that's just a sequence so we can say take ten and that just limits it to note you complete after ten then we",
    "start": "3213510",
    "end": "3220080"
  },
  {
    "text": "concatenate to that a sequence of ticking every four seconds ten times and then to that a sequence of ticking every",
    "start": "3220080",
    "end": "3227490"
  },
  {
    "text": "ten times into infinity because we haven't limited that with a take so that will just continue ticking every 10",
    "start": "3227490",
    "end": "3233460"
  },
  {
    "text": "seconds until eventually we want it to stop so that gives us our polling",
    "start": "3233460",
    "end": "3238920"
  },
  {
    "text": "observable which is our sequence of events that will tick in that behavior so we'll take that polling observable",
    "start": "3238920",
    "end": "3246150"
  },
  {
    "text": "and just like in the previous example what we're going to do is we're going to use flatmap latest to basically hook",
    "start": "3246150",
    "end": "3251490"
  },
  {
    "text": "onto that and do our HTTP requests so again flatmap latest to make sure that our responses if they do come back out",
    "start": "3251490",
    "end": "3257610"
  },
  {
    "text": "of order just it to take take and care for us then what we do is we take our safe",
    "start": "3257610",
    "end": "3263340"
  },
  {
    "text": "apply and you know as the responses come in we apply those changes to this to the to the scope so that we can see them in",
    "start": "3263340",
    "end": "3270210"
  },
  {
    "text": "the UI so we take the state and put it in there and now interestingly what we do here is we look we look for the",
    "start": "3270210",
    "end": "3276420"
  },
  {
    "text": "completed state and if we have completed what we do is we take the subscription that comes out of doing a subscribe so",
    "start": "3276420",
    "end": "3283020"
  },
  {
    "text": "if when you do is subscribe back from that you get a subscription and if you",
    "start": "3283020",
    "end": "3289650"
  },
  {
    "text": "want to stop listening what you do is you take that subscription and you dispose it and that basically stops",
    "start": "3289650",
    "end": "3295200"
  },
  {
    "text": "listening so in this case once we've headed complete once we've hit completed we don't want to listen anymore so we",
    "start": "3295200",
    "end": "3300720"
  },
  {
    "text": "just dispose our subscription and we stop ticking and we stop doing our HTTP",
    "start": "3300720",
    "end": "3306480"
  },
  {
    "text": "request and polling the server so let's have a look at how that works in action so let's refresh this you can",
    "start": "3306480",
    "end": "3313650"
  },
  {
    "text": "say that this is ticking up once per second and then after 10 seconds it will slow down and start doing it once every",
    "start": "3313650",
    "end": "3319740"
  },
  {
    "text": "4 seconds and then over on this other tab I've basically got a that's gone to the 4 second stage now",
    "start": "3319740",
    "end": "3326510"
  },
  {
    "text": "over on the other tab I basically got something that lets me set the complete on the server side so let's set that completed come back here it's already",
    "start": "3326510",
    "end": "3333720"
  },
  {
    "text": "picked it up we're now completed we're not pulling anymore these numbers won't change so we've been able to write",
    "start": "3333720",
    "end": "3340039"
  },
  {
    "text": "something that if you were to try and write that sort of timing logic declare by hand using imperative style code",
    "start": "3340039",
    "end": "3345529"
  },
  {
    "text": "would be pretty hard but when we're programming functionally and we've lifted we're lifting our level of abstraction up and writing declarative",
    "start": "3345529",
    "end": "3352190"
  },
  {
    "text": "code code instead you know and we use the right libraries things like rx we",
    "start": "3352190",
    "end": "3357349"
  },
  {
    "text": "can write this sort of complex timing logic in a really simple clear way that's very understandable for other",
    "start": "3357349",
    "end": "3362839"
  },
  {
    "text": "people to read and therefore quite maintainable okay so that's the last coding example",
    "start": "3362839",
    "end": "3370579"
  },
  {
    "text": "so we'll just click back to the slides and wrap up",
    "start": "3370579",
    "end": "3376088"
  },
  {
    "text": "so what we've seen today is how we can apply functional techniques to solve",
    "start": "3376839",
    "end": "3382099"
  },
  {
    "text": "day-to-day problems functional programming features are present in our modern imperative languages and new",
    "start": "3382099",
    "end": "3388369"
  },
  {
    "text": "versions of these languages tend to bring more functional features so we sort of saw how that",
    "start": "3388369",
    "end": "3394930"
  },
  {
    "text": "c-sharp added that conditional member access and obviously way back when it added lambda functions and JavaScript",
    "start": "3394930",
    "end": "3402140"
  },
  {
    "text": "itself has actually added arrow functions relatively recently so arrow functions they're named for lambda functions you might have seen one of",
    "start": "3402140",
    "end": "3408349"
  },
  {
    "text": "those in the examples I put one in there so you know we can see that these languages are pulling in these",
    "start": "3408349",
    "end": "3414079"
  },
  {
    "text": "functional features over time so that should give us a bit of an indication of you know the way things are heading",
    "start": "3414079",
    "end": "3419170"
  },
  {
    "text": "functional techniques techniques do allow us to program at that higher level of abstraction we program declaratively",
    "start": "3419170",
    "end": "3425509"
  },
  {
    "text": "and we state what we want rather than how to get what we want we eliminate side-effects from our code because we",
    "start": "3425509",
    "end": "3432229"
  },
  {
    "text": "program with expressions rather than statements this makes our code shorter more readable and therefore more",
    "start": "3432229",
    "end": "3437599"
  },
  {
    "text": "maintainable the code does look a bit different but it's not impossibly different it doesn't take long before",
    "start": "3437599",
    "end": "3443239"
  },
  {
    "text": "you find that style of code natural to read it's a similar step forward that the unstructured programmer took when he",
    "start": "3443239",
    "end": "3448579"
  },
  {
    "text": "abandoned the go-to for the for loop obviously there's a lot more to functional programming than what we've seen here this is just sort of the tip",
    "start": "3448579",
    "end": "3455089"
  },
  {
    "text": "of the iceberg but this is a great way that you can get started in your current code base and reap some real benefits so",
    "start": "3455089",
    "end": "3462019"
  },
  {
    "text": "once you get your toes wet I think you'll quickly realize that programming functionally isn't that hard after all",
    "start": "3462019",
    "end": "3468349"
  },
  {
    "text": "and you're going to want more of it so the slides and code for this are available up on github there's a link",
    "start": "3468349",
    "end": "3474500"
  },
  {
    "text": "there so feel free to go check them out and have a look at how things are done in more detail and if you have any",
    "start": "3474500",
    "end": "3480500"
  },
  {
    "text": "questions please do ask them now or if you want you can talk to me after the session or if you see me around or Twitter or whatever so if you have any",
    "start": "3480500",
    "end": "3486680"
  },
  {
    "text": "questions please do pop your hand up yep",
    "start": "3486680",
    "end": "3490808"
  },
  {
    "text": "yep so in order to do that what you probably end up doing is putting",
    "start": "3510460",
    "end": "3515809"
  },
  {
    "text": "composing another function in there that just for example prints it out to the console because you can easily compose",
    "start": "3515809",
    "end": "3521059"
  },
  {
    "text": "other functions in there the simplest way to check that is probably just to put you know a console out in there or",
    "start": "3521059",
    "end": "3526789"
  },
  {
    "text": "if you want stick a lambda in there and then put a breakpoint in the lambda if you've really got a if you've really got",
    "start": "3526789",
    "end": "3532160"
  },
  {
    "text": "to pause the execution and have a look at everything there so you can hook into it it is a little bit more awkward",
    "start": "3532160",
    "end": "3537920"
  },
  {
    "text": "because breakpoints are kind of just sort of designed around imperative step-by-step code so yeah it does make",
    "start": "3537920",
    "end": "3543980"
  },
  {
    "text": "it harder it's a bit like that in link as well so sometimes it helps so if you need to get into the middle of a like an",
    "start": "3543980",
    "end": "3551450"
  },
  {
    "text": "expression like that sometimes it helps to just split the expression into two expressions and then that way you can",
    "start": "3551450",
    "end": "3556789"
  },
  {
    "text": "put a breakpoint on the result of the of the first half of the expression and see what it evaluates to and then and then",
    "start": "3556789",
    "end": "3563150"
  },
  {
    "text": "once you've finished debugging just put it back together so that that's often the simplest way to to get a debugger",
    "start": "3563150",
    "end": "3568400"
  },
  {
    "text": "into that expression and see what's going on anyone else",
    "start": "3568400",
    "end": "3575859"
  },
  {
    "text": "so yes if you're using f-sharp you will get currying so f-sharp is is that's",
    "start": "3579740",
    "end": "3585180"
  },
  {
    "text": "part of it the way it does functions it will carry things automatically for you and it's got the optimizations to make",
    "start": "3585180",
    "end": "3591540"
  },
  {
    "text": "that that fast on the.net runtime c-sharp I don't think so you could do it yourself but to be honest I don't think",
    "start": "3591540",
    "end": "3598410"
  },
  {
    "text": "the coded it you'd end up the code it'd be pretty ugly to do it like you could do it but I don't know whether on the on",
    "start": "3598410",
    "end": "3605100"
  },
  {
    "text": "the whole that would actually make your code more readable or less readable so it's sort of a double-edged sword there",
    "start": "3605100",
    "end": "3610110"
  },
  {
    "text": "I think if you're gonna if you're gonna really embrace that sort of thing I highly recommend you look at f sharp",
    "start": "3610110",
    "end": "3615870"
  },
  {
    "text": "because it does it is a dotnet language so you can still get all the nice things that you've got in dotnet and stay there",
    "start": "3615870",
    "end": "3621840"
  },
  {
    "text": "but you then do get a fully functional language which can do these things for you so you get occurring for free and it",
    "start": "3621840",
    "end": "3627330"
  },
  {
    "text": "just deals with it which is cool yep",
    "start": "3627330",
    "end": "3632960"
  },
  {
    "text": "if you're doing like really really highly performant stuff you'll probably",
    "start": "3643910",
    "end": "3649110"
  },
  {
    "text": "find it a bit slower because yeah you are incurring additional function of calls there and there are there is a",
    "start": "3649110",
    "end": "3654480"
  },
  {
    "text": "little bit more like bookkeeping going on I know the I remember reading about",
    "start": "3654480",
    "end": "3660870"
  },
  {
    "text": "the resharper guys and there they were using link all over the place in their codebase and of course resharper needs",
    "start": "3660870",
    "end": "3667410"
  },
  {
    "text": "to be really fast like really fast so they actually had to go and unroll a few things and do it by hand because it",
    "start": "3667410",
    "end": "3673620"
  },
  {
    "text": "was a bit slower so yeah in those cases if I were you what I would do is what",
    "start": "3673620",
    "end": "3678840"
  },
  {
    "text": "they did which is basically implements it with link and a nice way first and then if you find that it is causing",
    "start": "3678840",
    "end": "3685760"
  },
  {
    "text": "performance problems down the line then unroll it invited imperatively but I think it's unwise to try and prematurely",
    "start": "3685760",
    "end": "3692370"
  },
  {
    "text": "optimize by just going out I'm not going to touch that because in most cases that's not where the bottleneck in your",
    "start": "3692370",
    "end": "3697470"
  },
  {
    "text": "code is going to lie in most cases going to be somewhere else like a database query or something else it's not normally that bit of the code but look",
    "start": "3697470",
    "end": "3703740"
  },
  {
    "text": "if you are writing code that is that bottleneck does like that then yeah it's gonna be a little bit slower but this is",
    "start": "3703740",
    "end": "3711090"
  },
  {
    "text": "where other languages like things like Haskell where it's built for that can optimize for that and it's a bit faster",
    "start": "3711090",
    "end": "3717150"
  },
  {
    "text": "in those languages so sort of you you pay a cost figure readability in something like C sharp and F sharp so",
    "start": "3717150",
    "end": "3725630"
  },
  {
    "text": "anybody else know okay cool thanks guys thank you for coming [Applause]",
    "start": "3725720",
    "end": "3736989"
  }
]