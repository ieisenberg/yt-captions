[
  {
    "text": "um functional programming on net The Best of Both Worlds uh right so that's",
    "start": "5560",
    "end": "11040"
  },
  {
    "text": "me my name's Isaac Abraham uh I'm a consultant in the UK um I spent a few",
    "start": "11040",
    "end": "17520"
  },
  {
    "text": "years in Germany um but I'm primarily from the UK I run a consultancy um",
    "start": "17520",
    "end": "23039"
  },
  {
    "text": "called compositional it we do fop consulting.net aure um I've basically been working in",
    "start": "23039",
    "end": "30519"
  },
  {
    "text": "net for since net 1.0 I don't even want to think about how long ago that was but",
    "start": "30519",
    "end": "36320"
  },
  {
    "text": "uh since the very beginning since uh Visual Studio 7 I think it was um and I",
    "start": "36320",
    "end": "41879"
  },
  {
    "text": "spent probably 10 15 years in the SE World exclusively and then I've moved on to F and I still sort of dabble a bit in",
    "start": "41879",
    "end": "48600"
  },
  {
    "text": "in C um before I sort of go too much further",
    "start": "48600",
    "end": "53960"
  },
  {
    "text": "I just want to get an idea of who I'm talking to which will help me sort of understand where I should emphasize and not so just a quick of hands how many",
    "start": "53960",
    "end": "60800"
  },
  {
    "text": "here of you today are doing C today okay excellent um how many of you would you",
    "start": "60800",
    "end": "67479"
  },
  {
    "text": "say you're doing modern C and by that I mean c double digits you know 101 link",
    "start": "67479",
    "end": "74159"
  },
  {
    "text": "you're allowed to use VAR you're allowed to use Link uh you know this the drill",
    "start": "74159",
    "end": "79400"
  },
  {
    "text": "is there anyone here doing F all right that's the 12 of us in the",
    "start": "79400",
    "end": "84520"
  },
  {
    "text": "whole world right uh and uh how many of you have got any experience in any functional language whether it's Elm hll",
    "start": "84520",
    "end": "92479"
  },
  {
    "text": "Scala something like this okay good good okay so what I really want to do today",
    "start": "92479",
    "end": "99520"
  },
  {
    "text": "is to address like the the why why should I be interested in functional programming um if anyone here saw mad",
    "start": "99520",
    "end": "106600"
  },
  {
    "text": "terson's talk from like a week ago it was on YouTube from uh NDC Sydney um",
    "start": "106600",
    "end": "112000"
  },
  {
    "text": "that kind of it's not going to hurt if you've watched that or if you watch that after this but it's not going to be the",
    "start": "112000",
    "end": "117280"
  },
  {
    "text": "same sort of uh content but I really want to talk about what is FP really um",
    "start": "117280",
    "end": "122600"
  },
  {
    "text": "what is it at its heart how can we start to use it in cop if we wanted to and",
    "start": "122600",
    "end": "127640"
  },
  {
    "text": "should you should you even be trying to do functional programming today in um in",
    "start": "127640",
    "end": "132720"
  },
  {
    "text": "C and and what those limitations are um so I think there's there's quite a lot",
    "start": "132720",
    "end": "139319"
  },
  {
    "text": "of misunderstanding about what is functional programming today um particularly in the net World um and I",
    "start": "139319",
    "end": "147000"
  },
  {
    "text": "think it's led to functional programming having kind of reputation is being hard",
    "start": "147000",
    "end": "152239"
  },
  {
    "text": "maybe it's for maths and science it's not for general purpose programming um or at best there's kind of a belief that",
    "start": "152239",
    "end": "159760"
  },
  {
    "text": "well functional programming is cool it's really interesting but it's too hard to learn or it's ugly there's loads of",
    "start": "159760",
    "end": "167560"
  },
  {
    "text": "generic arguments and why would I want to do this sort of thing in in in in C",
    "start": "167560",
    "end": "172800"
  },
  {
    "text": "um and my aim today is to kind of dispel that um and show you that actually you",
    "start": "172800",
    "end": "179879"
  },
  {
    "text": "you don't necessarily have to give up the good things about being productive",
    "start": "179879",
    "end": "185000"
  },
  {
    "text": "good tooling net um but also let you benefit from functional programming",
    "start": "185000",
    "end": "191319"
  },
  {
    "text": "techniques um what do I mean by like simple F",
    "start": "191319",
    "end": "196720"
  },
  {
    "text": "though and and functional programming I guess um has anyone seen this diagram before it's like a journey that many of",
    "start": "196720",
    "end": "202360"
  },
  {
    "text": "us have taken I think and I put myself in that that category where I started doing fairly simple code when I got out",
    "start": "202360",
    "end": "208439"
  },
  {
    "text": "of uni I didn't really know what was doing and then I got these books like Uncle Bob and gang of four and stuff",
    "start": "208439",
    "end": "215280"
  },
  {
    "text": "like this on design patterns and I sort of went crazy and I started doing design patterns everywhere and it got super",
    "start": "215280",
    "end": "222040"
  },
  {
    "text": "complicated and then I ended up going back to fairly simple code with just a few patterns and not much more and I",
    "start": "222040",
    "end": "229640"
  },
  {
    "text": "think when people think about F and functional programming we think of this bit in the middle here with um things",
    "start": "229640",
    "end": "236360"
  },
  {
    "text": "like applicatives and monads and category Theory all these things that no one really wants to do and and and gets",
    "start": "236360",
    "end": "243400"
  },
  {
    "text": "scared of and I want to sort of ignore all of that forget about all of that just think about simple things like",
    "start": "243400",
    "end": "249480"
  },
  {
    "text": "functions data and types really not much more than that so fairly simple Concepts",
    "start": "249480",
    "end": "254959"
  },
  {
    "text": "that you guys already know and how we can use those um there will be no talk",
    "start": "254959",
    "end": "260280"
  },
  {
    "text": "about hard FP Concepts today none of that so just the the why and I'm going",
    "start": "260280",
    "end": "267520"
  },
  {
    "text": "to do this very briefly um and I'm talking from a perspective of having done functional programming for probably",
    "start": "267520",
    "end": "273840"
  },
  {
    "text": "10 years on net now um and it's pretty simple um lower total cost of ownership",
    "start": "273840",
    "end": "279639"
  },
  {
    "text": "less bugs happier developers and improv time to Market um it really is that",
    "start": "279639",
    "end": "285160"
  },
  {
    "text": "simple and it does work um but don't just take my word of for it um look at",
    "start": "285160",
    "end": "292639"
  },
  {
    "text": "this phrase here so when it comes to Cloud programming history is on the side of FP I'm sorry object oriented progr",
    "start": "292639",
    "end": "299680"
  },
  {
    "text": "programming is just not good for that Simon pton Jones Eric Meyer or Don",
    "start": "299680",
    "end": "308639"
  },
  {
    "text": "um who said this that's right it was actually mad Tuson the C program",
    "start": "308639",
    "end": "316120"
  },
  {
    "text": "manager um so when I say this this is not controversial and if you look at the",
    "start": "316120",
    "end": "321360"
  },
  {
    "text": "direction C is going it's getting more and more of these pseudo functional features um in the",
    "start": "321360",
    "end": "328160"
  },
  {
    "text": "language um but why would he be saying that what does he really mean when he says that um so I think it's worth just",
    "start": "328160",
    "end": "334199"
  },
  {
    "text": "spending a few minutes talking about what actually functional programming is",
    "start": "334199",
    "end": "339400"
  },
  {
    "text": "and I think this is really the the Crux of it um we have all these sorts of terms that you may have heard of you",
    "start": "339400",
    "end": "345440"
  },
  {
    "text": "know Lambda functions um extension methods pattern matching records you",
    "start": "345440",
    "end": "350479"
  },
  {
    "text": "know these are things that have come into C in the last few versions you know lambdas have been there a bit longer and",
    "start": "350479",
    "end": "357039"
  },
  {
    "text": "then we've got other features that may be coming in the future things like tagged unions um and maybe pure",
    "start": "357039",
    "end": "363080"
  },
  {
    "text": "functions and curried functions um the truth is in my opinion none of that",
    "start": "363080",
    "end": "368800"
  },
  {
    "text": "matters none of these Technologies or tools or terms actually really are about functional programming",
    "start": "368800",
    "end": "375039"
  },
  {
    "text": "really um functional programming for for humans is really just two things",
    "start": "375039",
    "end": "381479"
  },
  {
    "text": "expressions and immutability and if you can get your head around those two and they're really not hard then you",
    "start": "381479",
    "end": "387360"
  },
  {
    "text": "understand functional programming and you can see how to use it in C",
    "start": "387360",
    "end": "392800"
  },
  {
    "text": "today um if you do those things and stick to these two rules then you can",
    "start": "392800",
    "end": "398240"
  },
  {
    "text": "start worrying about other things like composition with functions and simple code and separation of data and behavior",
    "start": "398240",
    "end": "405240"
  },
  {
    "text": "but those kind of things come because of these two things on the left um so I'm just going to talk about",
    "start": "405240",
    "end": "411479"
  },
  {
    "text": "what they are um is who here understands and says",
    "start": "411479",
    "end": "417800"
  },
  {
    "text": "they're confident they know what an expr is in C pretty much what I thought um and it's",
    "start": "417800",
    "end": "424680"
  },
  {
    "text": "actually really simple um if you look on docs Microsoft comom it's got this huge",
    "start": "424680",
    "end": "430160"
  },
  {
    "text": "article that I didn't understand any of it when I looked at it last week um it's",
    "start": "430160",
    "end": "435759"
  },
  {
    "text": "got things called expression statements and all sorts of crazy stuff and I was like I don't understand this let's find",
    "start": "435759",
    "end": "441960"
  },
  {
    "text": "a simpler way of defining what expressions are so this is all an expression is whenever you see that word",
    "start": "441960",
    "end": "448479"
  },
  {
    "text": "expression this is is all it means it's a block of code that you can assign to",
    "start": "448479",
    "end": "454400"
  },
  {
    "text": "something um so ask yourself this question can it be assigned is there a left hand side of an",
    "start": "454400",
    "end": "461680"
  },
  {
    "text": "equals if it is it's an expression congratulations",
    "start": "461680",
    "end": "468400"
  },
  {
    "text": "oh okay we're on so here are some examples so add is a function it takes",
    "start": "468400",
    "end": "475400"
  },
  {
    "text": "in some data and it's going to return you an answer that's an",
    "start": "475400",
    "end": "481280"
  },
  {
    "text": "expression that's an expression equality it's got something assignable to the left hand side it's got a result this is",
    "start": "481280",
    "end": "488720"
  },
  {
    "text": "uh our friend theary operator it's also can be assigned to the left hand",
    "start": "488720",
    "end": "494240"
  },
  {
    "text": "side um switch expressions for those modern C devs you'll know what this is again",
    "start": "494240",
    "end": "501280"
  },
  {
    "text": "that's giving you um a result on the leand side that's either yes or",
    "start": "501280",
    "end": "506639"
  },
  {
    "text": "no on the other hand we've got statements and essentially anything that's not an expression that doesn't",
    "start": "506639",
    "end": "513279"
  },
  {
    "text": "fall into that category of can it be assigned to the to the left hand side that's what I would call a statement so",
    "start": "513279",
    "end": "519200"
  },
  {
    "text": "it's a block of code that has no result so the sorts of things I'm",
    "start": "519200",
    "end": "524519"
  },
  {
    "text": "thinking of are does it return void does it have a result can you",
    "start": "524519",
    "end": "530040"
  },
  {
    "text": "assign it or does it have some assignment in the middle of it if it is it's probably a",
    "start": "530040",
    "end": "535120"
  },
  {
    "text": "statement so Adam print here that's a statement in effect or a procedure it's",
    "start": "535120",
    "end": "541120"
  },
  {
    "text": "returning void you can't assign it to anything console right line is also really a statement can't be assigned it",
    "start": "541120",
    "end": "547760"
  },
  {
    "text": "has no result for each Loops um switch",
    "start": "547760",
    "end": "552839"
  },
  {
    "text": "case statements um if statements they're all statements they have no result why",
    "start": "552839",
    "end": "558920"
  },
  {
    "text": "am I sort of making a point about these two things it's because expressions are much much easier to work with um you can",
    "start": "558920",
    "end": "567600"
  },
  {
    "text": "understand them better they're safer you get less bugs when you use them um they're simpler to test um usually",
    "start": "567600",
    "end": "575360"
  },
  {
    "text": "they're easier to reuse and compose together so I would always say like this",
    "start": "575360",
    "end": "581920"
  },
  {
    "text": "is a really core part of functional programming is this idea of something goes in you do some operation and you",
    "start": "581920",
    "end": "588120"
  },
  {
    "text": "get something back out what you do with it is up to the caller it's not about the the",
    "start": "588120",
    "end": "594000"
  },
  {
    "text": "implementation now I've just put together a really simple example of of it's a bit of a straw man hopefully you",
    "start": "594000",
    "end": "599920"
  },
  {
    "text": "can see what I'm talking about here so this is some code that will basically",
    "start": "599920",
    "end": "605160"
  },
  {
    "text": "take in a customer and it's going to look at the status of the customer the logged in state and if they're logged in",
    "start": "605160",
    "end": "610600"
  },
  {
    "text": "we're going to set the name to Fred otherwise we're going to set it to someone and then at the very bottom we're going to print out hello",
    "start": "610600",
    "end": "618720"
  },
  {
    "text": "Fred but there are a couple of ways that this could go wrong and this is really simple code and you may look at it and",
    "start": "618720",
    "end": "624360"
  },
  {
    "text": "think I would never do this but um obviously we have to start by assigning name to",
    "start": "624360",
    "end": "630920"
  },
  {
    "text": "null now if we were to remove this Branch this code would still compile the",
    "start": "630920",
    "end": "636240"
  },
  {
    "text": "compiler has no idea that you're doing something wrong you've missed out a branch and it will just happily go ahead",
    "start": "636240",
    "end": "641720"
  },
  {
    "text": "and print hello null now the compiler may warn you that you've got this potential un assignment but it will",
    "start": "641720",
    "end": "647560"
  },
  {
    "text": "still compile it's still going to work fine you could also do something like that and assign accidentally to the",
    "start": "647560",
    "end": "654360"
  },
  {
    "text": "wrong variable again the compiler has no idea what you're really trying to do is to guarantee I want to assign something",
    "start": "654360",
    "end": "661160"
  },
  {
    "text": "to name if you did this as an expression that whole thing goes away so I'm using",
    "start": "661160",
    "end": "667000"
  },
  {
    "text": "a switch expression here and here we've got this notion of like if it's logged in return Fred",
    "start": "667000",
    "end": "673959"
  },
  {
    "text": "otherwise return someone but the result of that entire expression goes into name",
    "start": "673959",
    "end": "679680"
  },
  {
    "text": "so just by moving to this notion of Expressions we've removed these possible bugs and classes of bugs and obviously",
    "start": "679680",
    "end": "685639"
  },
  {
    "text": "it's a very simple example here but this idea of telling the compiler we want to",
    "start": "685639",
    "end": "690680"
  },
  {
    "text": "do some logic and assign the result into something else is quite powerful and if",
    "start": "690680",
    "end": "695920"
  },
  {
    "text": "you use this everywhere entire sort of issues that you face will just vanish um",
    "start": "695920",
    "end": "701200"
  },
  {
    "text": "in terms of accidentally assigning refactoring and so on so that's kind of",
    "start": "701200",
    "end": "706839"
  },
  {
    "text": "the first thing the other one is immutability um again I looked on docs",
    "start": "706839",
    "end": "712399"
  },
  {
    "text": "microsoft.com I found one article about immutability that started talking about Entity framework so I skipped that out",
    "start": "712399",
    "end": "720160"
  },
  {
    "text": "um this is all immutability means something can never change you create some data and its value is fixed for",
    "start": "720160",
    "end": "727240"
  },
  {
    "text": "life that's it if you want to do a change you make a copy of the data and then the copy has the",
    "start": "727240",
    "end": "734760"
  },
  {
    "text": "changes um so simple test is all the data readon if it is this thing is",
    "start": "734760",
    "end": "740760"
  },
  {
    "text": "immutable if it's not it's",
    "start": "740760",
    "end": "744240"
  },
  {
    "text": "not so why would we want to do IM ability and it's the same sort of thing",
    "start": "746600",
    "end": "752440"
  },
  {
    "text": "code is easier to reason about with immutability um you don't have to worry for example if you've got an object you",
    "start": "752440",
    "end": "759160"
  },
  {
    "text": "can give it to someone else some other part of code you don't have to worry about it changing behind your back the value is",
    "start": "759160",
    "end": "766760"
  },
  {
    "text": "fixed for life you can decouple it much more easily because for example if data",
    "start": "766760",
    "end": "772519"
  },
  {
    "text": "is immutable you can probably make it public and if it's public you can",
    "start": "772519",
    "end": "778240"
  },
  {
    "text": "probably write fun that deal with this data much more easily than you would if it's all encapsulated in a private",
    "start": "778240",
    "end": "784680"
  },
  {
    "text": "class um multi-threading definitely is a benefit because you have no shared mutable state so you don't have locking",
    "start": "784680",
    "end": "791160"
  },
  {
    "text": "or any sort of race conditions to worry about you have data anyone can read from it as often as you",
    "start": "791160",
    "end": "798560"
  },
  {
    "text": "want if anyone is worrying that what I'm talking about means your entire app has to be IM mutable the answer is",
    "start": "798560",
    "end": "805160"
  },
  {
    "text": "no there will always be some mutable state in your application the important thing is that it should be",
    "start": "805160",
    "end": "812160"
  },
  {
    "text": "fairly um closely scoped small scope um and the exception to the rule rather",
    "start": "812160",
    "end": "818600"
  },
  {
    "text": "than what we have today where most data is mutable and you might have immutable data now and",
    "start": "818600",
    "end": "825120"
  },
  {
    "text": "again um if anyone's seen these kind of art architectures like hexagonal and onion they all basically are talking",
    "start": "825120",
    "end": "831440"
  },
  {
    "text": "about this mutable State on the edges of your app and then immutable state in the",
    "start": "831440",
    "end": "837000"
  },
  {
    "text": "middle um that's it we're 15 minutes in you've",
    "start": "837000",
    "end": "842839"
  },
  {
    "text": "now learned functional programming that is really all there is to it um Expressions everything should have a",
    "start": "842839",
    "end": "849519"
  },
  {
    "text": "result and immutability everything is fixed for life if you can follow those",
    "start": "849519",
    "end": "855800"
  },
  {
    "text": "two simple rules um you're you're basically doing functional programming the challenge is that those two things",
    "start": "855800",
    "end": "861560"
  },
  {
    "text": "are actually somewhat difficult to do consistently in in",
    "start": "861560",
    "end": "866600"
  },
  {
    "text": "C I want to take a little step back now and just talk about what that might look like at a higher level um in terms of",
    "start": "868040",
    "end": "875240"
  },
  {
    "text": "how we compose code how we build blocks together so these are the sorts of",
    "start": "875240",
    "end": "881440"
  },
  {
    "text": "things you will probably avoid if you're trying to do functional programming today like class hierarchies",
    "start": "881440",
    "end": "888519"
  },
  {
    "text": "inheritance that's basically out instead you would probably look at static classes static",
    "start": "888519",
    "end": "895079"
  },
  {
    "text": "methods um interfaces Maybe but instead you're going to prefer functions just",
    "start": "895079",
    "end": "901480"
  },
  {
    "text": "Standalone functions that you plug together um instead of stateful objects pure functions and this last one is",
    "start": "901480",
    "end": "908040"
  },
  {
    "text": "actually quite important you probably will move away from Constructor injection and just have arguments into",
    "start": "908040",
    "end": "914399"
  },
  {
    "text": "functions that is it there's no other way of sort of injecting State into a",
    "start": "914399",
    "end": "919639"
  },
  {
    "text": "function you just have normal function arguments and that kind of leads to",
    "start": "919639",
    "end": "925680"
  },
  {
    "text": "separation of behavior and data so instead of having a class that has data in it and then methods that act on the",
    "start": "925680",
    "end": "932480"
  },
  {
    "text": "data we've got data on one side and functions on the other and the functions take in some data and they return some",
    "start": "932480",
    "end": "939240"
  },
  {
    "text": "other data but they live independently they operate independently and this is really what mads was talking about in",
    "start": "939240",
    "end": "945680"
  },
  {
    "text": "his talk last year with this idea of having data that's coming from some",
    "start": "945680",
    "end": "951000"
  },
  {
    "text": "source and then the ability to abstract over it in many different ways",
    "start": "951000",
    "end": "958120"
  },
  {
    "text": "an example of how this might look so this is a very simple calculator class and I've written it in a kind of ooe",
    "start": "961959",
    "end": "969519"
  },
  {
    "text": "style should we say so we've got um some dependency injection here cuz my calculator needs to log what it's doing",
    "start": "969519",
    "end": "976519"
  },
  {
    "text": "so I'm injecting an ilogger there and I'm using the nice new um simple uh Constructor syntax and C",
    "start": "976519",
    "end": "984319"
  },
  {
    "text": "which is very nice um and then down here we're calling this logger log method so",
    "start": "984319",
    "end": "990120"
  },
  {
    "text": "I've got this method on the type I'm calling um I've got some mutable State here so I've got this value and every",
    "start": "990120",
    "end": "996920"
  },
  {
    "text": "time I call add it's going to then mutate that state so it's going to add whatever I've passed in and add it to",
    "start": "996920",
    "end": "1003560"
  },
  {
    "text": "the value the thing that I don't like about this is the signature of AD it's kind of",
    "start": "1003560",
    "end": "1010440"
  },
  {
    "text": "lying to us it says you give me a number and I will give you back nothing you",
    "start": "1010440",
    "end": "1016800"
  },
  {
    "text": "can't see what it's doing behind the scenes you need to look into the code to understand what it's doing you don't",
    "start": "1016800",
    "end": "1023240"
  },
  {
    "text": "know just from looking at ad that it's calling logger you have no idea that it's doing that either so there's kind",
    "start": "1023240",
    "end": "1029199"
  },
  {
    "text": "of this a bit of magic going on here um what about testing the same sort",
    "start": "1029199",
    "end": "1035199"
  },
  {
    "text": "of thing if we wanted to write a unit test for this function you call this calculator and",
    "start": "1035199",
    "end": "1040798"
  },
  {
    "text": "you pass in a logger you don't know where it's used you call add but then you assert on a different",
    "start": "1040799",
    "end": "1047959"
  },
  {
    "text": "thing completely you assert against value it's like you have to know I called add but that's going to modify",
    "start": "1047959",
    "end": "1053000"
  },
  {
    "text": "this value property and it's like there's kind of action at a distance should we",
    "start": "1053000",
    "end": "1059799"
  },
  {
    "text": "say if I was to do this in a kind of a more functional style this is what I would probably look",
    "start": "1059799",
    "end": "1065559"
  },
  {
    "text": "for so instead of having a an instance class this will just be static there is only one calculator we don't need many",
    "start": "1065559",
    "end": "1072760"
  },
  {
    "text": "of them there's no Constructor anymore that's gone",
    "start": "1072760",
    "end": "1079080"
  },
  {
    "text": "and all my dependencies all my arguments are going into the method",
    "start": "1079280",
    "end": "1084840"
  },
  {
    "text": "directly so I've got the loger being passed in and I've got the state the value coming in as well as the uh the",
    "start": "1084840",
    "end": "1091960"
  },
  {
    "text": "value I want to add to it also here you'll notice that logger is no longer a type it's not a class",
    "start": "1091960",
    "end": "1099520"
  },
  {
    "text": "it's just a function that I've passed in it's just an action this is kind of a bit like what we do with link when we're",
    "start": "1099520",
    "end": "1104840"
  },
  {
    "text": "passing in functions and instead of mutating I just return",
    "start": "1104840",
    "end": "1111520"
  },
  {
    "text": "the answer it's up to the caller to decide what to do with it I'm not",
    "start": "1111520",
    "end": "1117000"
  },
  {
    "text": "interested and the function signature now is actually much more honest I can now see that I'm returning",
    "start": "1117000",
    "end": "1123720"
  },
  {
    "text": "an integer and these are the things that this function depends upon there's no kind of magic",
    "start": "1123720",
    "end": "1130840"
  },
  {
    "text": "there testing it is also much much easier now yeah I can explicitly see this is",
    "start": "1130840",
    "end": "1138240"
  },
  {
    "text": "the log function that I depend on I don't depend on just this entire logotype and I know it's being called from within ad because it's",
    "start": "1138240",
    "end": "1145039"
  },
  {
    "text": "needed um and there's no internal State I simply get back an answer and I can",
    "start": "1145039",
    "end": "1150960"
  },
  {
    "text": "assert that so there's no magic going on or anything like that and this kind of principle of Simplicity of just I call",
    "start": "1150960",
    "end": "1157760"
  },
  {
    "text": "something I see what it needs and I get back an answer that's what we're really talking about",
    "start": "1157760",
    "end": "1164240"
  },
  {
    "text": "here so I want to come back now to all these other things we spoke about like I I've not touched on anything things like",
    "start": "1164240",
    "end": "1170559"
  },
  {
    "text": "lambdas or records or TS and yet everyone is saying that like C is",
    "start": "1170559",
    "end": "1176000"
  },
  {
    "text": "functional now because it has these things like how do those two things resolve",
    "start": "1176000",
    "end": "1183159"
  },
  {
    "text": "so if we [Music]",
    "start": "1183159",
    "end": "1189819"
  },
  {
    "text": "wonderful okay we all good to carry on there's no nuclear threat um okay so uh",
    "start": "1202200",
    "end": "1210120"
  },
  {
    "text": "let's go back there so right how do we resolve these things to uh what I've just been talking about for",
    "start": "1210120",
    "end": "1215919"
  },
  {
    "text": "the last 20 minutes so let's start with expressions and immutability at the bottom those are like fundamental",
    "start": "1215919",
    "end": "1222200"
  },
  {
    "text": "pillars that I've just spoken about um above that are things we want",
    "start": "1222200",
    "end": "1227480"
  },
  {
    "text": "to do in an app you know defining types uh reasoning about data working with",
    "start": "1227480",
    "end": "1232679"
  },
  {
    "text": "functions and on top of that we have all these nice features that c has yeah",
    "start": "1232679",
    "end": "1238240"
  },
  {
    "text": "things like records and tupal and pattern matching and lambdas none of",
    "start": "1238240",
    "end": "1243440"
  },
  {
    "text": "those are kind of fundamental to functional programming really all they are is syntactic sugar most of them that",
    "start": "1243440",
    "end": "1250600"
  },
  {
    "text": "make your life easier to try and make use of these kind of things that I've shown you yeah so instead of records and",
    "start": "1250600",
    "end": "1257600"
  },
  {
    "text": "tuples you could just use classes but we all know that it's a pain to use classes to do like value objects",
    "start": "1257600",
    "end": "1264280"
  },
  {
    "text": "to do immutable data that's what records are there to make life easier but just because you're using records doesn't",
    "start": "1264280",
    "end": "1270400"
  },
  {
    "text": "mean you're doing functional programming like don't confuse the two um and I just want to focus on",
    "start": "1270400",
    "end": "1276760"
  },
  {
    "text": "lambdas particularly because everyone talks about Lambda calculus and Lambda",
    "start": "1276760",
    "end": "1281960"
  },
  {
    "text": "expressions and functional blah blah blah um I just want to show you what I mean when I say that lambdas are not",
    "start": "1281960",
    "end": "1287559"
  },
  {
    "text": "necessarily like a gateway to functional programming um this is a for Loop that's",
    "start": "1287559",
    "end": "1294360"
  },
  {
    "text": "going through some numbers and calling Adam print um is this bottom one more",
    "start": "1294360",
    "end": "1299480"
  },
  {
    "text": "functional because I've changed it to use a Lambda expression no it's exactly the same just",
    "start": "1299480",
    "end": "1305600"
  },
  {
    "text": "because I happen to replace it with a Lambda expression does not mean I'm doing functional programming now it's",
    "start": "1305600",
    "end": "1311559"
  },
  {
    "text": "exactly the same as the top one the same way that if I'm using link",
    "start": "1311559",
    "end": "1316840"
  },
  {
    "text": "and I've got this select here if I replace it with an anonymous method",
    "start": "1316840",
    "end": "1322840"
  },
  {
    "text": "from c 2 does that mean this is less functional to me it's exactly the same",
    "start": "1322840",
    "end": "1329000"
  },
  {
    "text": "code it's just a slightly more complicated syntax if I assign a Lambda to a funk",
    "start": "1329000",
    "end": "1336919"
  },
  {
    "text": "and pass that in it's exactly the same and if I have a static method in a class",
    "start": "1336919",
    "end": "1343400"
  },
  {
    "text": "or even an instance method it's no more or less functional the these are all exactly the",
    "start": "1343400",
    "end": "1349600"
  },
  {
    "text": "same just because we're using a a shorthand syntax doesn't make it functional",
    "start": "1349600",
    "end": "1355640"
  },
  {
    "text": "programming um they are just syntactic sugar they just make it easier to start",
    "start": "1355640",
    "end": "1361640"
  },
  {
    "text": "working with functions they don't do anything more than that so just remember",
    "start": "1361640",
    "end": "1367600"
  },
  {
    "text": "that um for those of you that are using link and that are allowed to use",
    "start": "1367600",
    "end": "1373720"
  },
  {
    "text": "Link um I just want to focus on why it is functional because if I was to ask",
    "start": "1373720",
    "end": "1379960"
  },
  {
    "text": "and I have done in the past like why is link functional the first thing everyone says to me is Lambda",
    "start": "1379960",
    "end": "1385880"
  },
  {
    "text": "expressions and the second thing they say is extension methods but to be honest that is to my mind that those are",
    "start": "1385880",
    "end": "1393039"
  },
  {
    "text": "not functional programming things as such what's more important is that it's expression",
    "start": "1393039",
    "end": "1398799"
  },
  {
    "text": "oriented each of these stages in the pipeline is going to get some data push",
    "start": "1398799",
    "end": "1403960"
  },
  {
    "text": "it to another stage that's going to get the data push it to another stage",
    "start": "1403960",
    "end": "1409360"
  },
  {
    "text": "yeah these are all immutable collections yes it's IR inumerable but the idea is you've got one collection",
    "start": "1409360",
    "end": "1416400"
  },
  {
    "text": "that's then pushed into another one which does a modification which does another one and each of these are",
    "start": "1416400",
    "end": "1421799"
  },
  {
    "text": "independent from one another you can change them you can reorder them nothing is going to",
    "start": "1421799",
    "end": "1427880"
  },
  {
    "text": "break um we can compose functions together so I've got select and I've got",
    "start": "1427880",
    "end": "1433480"
  },
  {
    "text": "a square and I can compose them to make a function called select squares that's really what that's doing",
    "start": "1433480",
    "end": "1439440"
  },
  {
    "text": "do and lastly we've got this separation of data and behavior so I've got numbers",
    "start": "1439440",
    "end": "1445640"
  },
  {
    "text": "and then I've got my functions but these functions don't live on numbers they're not coupled to it they're completely",
    "start": "1445640",
    "end": "1454080"
  },
  {
    "text": "decoupled just as an exercise I decided to see what would it look like if we had done link with objects instead of",
    "start": "1456360",
    "end": "1464679"
  },
  {
    "text": "functions and I'm just going to show you a couple of examples of what it might have been like",
    "start": "1464679",
    "end": "1469960"
  },
  {
    "text": "um so for select where we had our X goes to X before you would probably need an interface you know I selectable and if",
    "start": "1469960",
    "end": "1477399"
  },
  {
    "text": "you wanted to do wear you would need an i filterable interface and then you'd probably have to implement each one of them every time",
    "start": "1477399",
    "end": "1484960"
  },
  {
    "text": "you wanted is that me again",
    "start": "1484960",
    "end": "1492799"
  },
  {
    "text": "no okay You' probably have to filter do this every time you wanted another pipeline stage you'd have to make a new",
    "start": "1494640",
    "end": "1501200"
  },
  {
    "text": "class implement this interface as a new type and then you'd be passing them in",
    "start": "1501200",
    "end": "1506720"
  },
  {
    "text": "everywhere so we'd have select with a new square number operator and a new even",
    "start": "1506720",
    "end": "1512880"
  },
  {
    "text": "number so we're using things like decorator pattern and strategy pattern and we've got parameterization via",
    "start": "1512880",
    "end": "1519120"
  },
  {
    "text": "Constructors again it's all back to where we were like in the c one and two",
    "start": "1519120",
    "end": "1525919"
  },
  {
    "text": "days let's go forward again that's a good click um so just so you",
    "start": "1526159",
    "end": "1534440"
  },
  {
    "text": "can see like that's the distinction that I'm getting at it's not so much the Lambda Expressions that's",
    "start": "1534440",
    "end": "1540600"
  },
  {
    "text": "important so what would FP light look like if we wanted to do FP and C today",
    "start": "1540600",
    "end": "1545720"
  },
  {
    "text": "what sort of features would be be looking at and this is really what what I want to explore a little bit is we",
    "start": "1545720",
    "end": "1552880"
  },
  {
    "text": "would basically be focusing on or I'm focusing on standard C features I don't want to use liaries like langx or um one",
    "start": "1552880",
    "end": "1560399"
  },
  {
    "text": "of or things like that just what is out of the box in C today um let's just use",
    "start": "1560399",
    "end": "1565880"
  },
  {
    "text": "Simple Rules we're going to focus on this core set of functional programming just expressions and immutable",
    "start": "1565880",
    "end": "1572240"
  },
  {
    "text": "data what would that look like um and to do this I would say let's",
    "start": "1572240",
    "end": "1578000"
  },
  {
    "text": "take the approach that some other languages like f take which is let's split the language in two and we're",
    "start": "1578000",
    "end": "1584720"
  },
  {
    "text": "going to keep the the bits of C that are useful and we're going to throw away the bits that are not useful for functional",
    "start": "1584720",
    "end": "1591159"
  },
  {
    "text": "programming and and what is what's left basically so to me what's not useful are",
    "start": "1591159",
    "end": "1596880"
  },
  {
    "text": "things like mutable data um statements inheritance combining data and behavior",
    "start": "1596880",
    "end": "1603919"
  },
  {
    "text": "and like fire and forget we want to get rid of all of that and we want to focus on these things on the right yeah",
    "start": "1603919",
    "end": "1610240"
  },
  {
    "text": "immutability Expressions composition separation of data and behavior and",
    "start": "1610240",
    "end": "1616600"
  },
  {
    "text": "functions which really looks like this um you can't use instance classes anymore you basically never use",
    "start": "1616600",
    "end": "1623440"
  },
  {
    "text": "them um void methods not allowed so you must always return",
    "start": "1623440",
    "end": "1629080"
  },
  {
    "text": "something Constructor parameters out um inheritance",
    "start": "1629080",
    "end": "1635679"
  },
  {
    "text": "out polymorphism definitely out um so instead of that you've got records for",
    "start": "1635679",
    "end": "1641720"
  },
  {
    "text": "data static methods for functions function arguments records for",
    "start": "1641720",
    "end": "1647360"
  },
  {
    "text": "for data and pattern matching those are that's basically how you would work together the only type of inherit",
    "start": "1647360",
    "end": "1654279"
  },
  {
    "text": "inheritance you could use would be in very specific cases where you want to show like a subtyping but without any",
    "start": "1654279",
    "end": "1661840"
  },
  {
    "text": "Behavior we'll come to whether or not I think that's a good thing or not to do but this is what I would say that if you",
    "start": "1665120",
    "end": "1670399"
  },
  {
    "text": "wanted to do functional programming in cop that's what it would probably look like and if I was to go back to writing",
    "start": "1670399",
    "end": "1676000"
  },
  {
    "text": "cop today that was probably what I'd be doing I probably wouldn't enjoy it very much",
    "start": "1676000",
    "end": "1683760"
  },
  {
    "text": "um what is missing though from the language and and where might it be going next um now I can't speak for the for",
    "start": "1683919",
    "end": "1690960"
  },
  {
    "text": "the C team but these are the sorts of things I would expect to see in the future if C is continuing down this",
    "start": "1690960",
    "end": "1698559"
  },
  {
    "text": "journey of um of adding more functional features so these would be things like",
    "start": "1698559",
    "end": "1705480"
  },
  {
    "text": "Union types has anyone heard of Union types um yeah a few of you okay good we'll go",
    "start": "1705480",
    "end": "1710519"
  },
  {
    "text": "through a quick example of that um probably exhaustive matching will",
    "start": "1710519",
    "end": "1716679"
  },
  {
    "text": "come in as part of that um and maybe simpler composition the things I think will be harder to get in C will be",
    "start": "1716679",
    "end": "1724960"
  },
  {
    "text": "immutability and expressions everywhere because that basically is a breaking change you can't break",
    "start": "1724960",
    "end": "1731360"
  },
  {
    "text": "c um so I think those two are probably off the table and then courage functions",
    "start": "1731360",
    "end": "1737440"
  },
  {
    "text": "which is basic uh a way to compose and work with functions more easily probably won't",
    "start": "1737440",
    "end": "1743080"
  },
  {
    "text": "happen um and the same for this um effect management I don't think c will get them but let's focus on unions",
    "start": "1743080",
    "end": "1750519"
  },
  {
    "text": "because that one is is probably coming in the next version of",
    "start": "1750519",
    "end": "1755240"
  },
  {
    "text": "C so in in O today and in C you can do and very easily you know a customer has",
    "start": "1757559",
    "end": "1763720"
  },
  {
    "text": "a name and an age and an address and those are just Fields what you can't do",
    "start": "1763720",
    "end": "1770440"
  },
  {
    "text": "very easily is model exclusion um a customer is this or this they are credit",
    "start": "1770440",
    "end": "1776720"
  },
  {
    "text": "worthy or they are a credit risk it's not so easy to do that kind of thing um",
    "start": "1776720",
    "end": "1782120"
  },
  {
    "text": "today we would probably use um inheritance for that and that's really what unions are",
    "start": "1782120",
    "end": "1787600"
  },
  {
    "text": "supposed to solve um so just to give you an example let's say we had um a customer we wanted to model in C and",
    "start": "1787600",
    "end": "1795120"
  },
  {
    "text": "they've got a contact method and the contact me method is either email or post or telephone but only one can be",
    "start": "1795120",
    "end": "1802519"
  },
  {
    "text": "selected at any one time um and you need to be able to contact by them so you know I can either",
    "start": "1802519",
    "end": "1809600"
  },
  {
    "text": "contact by email contact by post or contact by telephone um I've asked this question",
    "start": "1809600",
    "end": "1815600"
  },
  {
    "text": "dozens of times and and every time this is basically the answer I will end up with which is well you put all the",
    "start": "1815600",
    "end": "1822200"
  },
  {
    "text": "fields on your class yeah you know the telephone number the address and the email address",
    "start": "1822200",
    "end": "1828760"
  },
  {
    "text": "and you set the ones to null that you're not using and the ones that you are using you fill",
    "start": "1828760",
    "end": "1834799"
  },
  {
    "text": "in and you can maybe do something like this like if the telephone number is not null then they must have the telephone",
    "start": "1834799",
    "end": "1841320"
  },
  {
    "text": "number set and and we'll we'll use that data or if the address line one isn't",
    "start": "1841320",
    "end": "1846480"
  },
  {
    "text": "null then that must mean we've got an address let's use that otherwise it must be the email let's use",
    "start": "1846480",
    "end": "1853559"
  },
  {
    "text": "that right and then someone will say in the in in the audience usually wait a minute add an enum because that will",
    "start": "1853559",
    "end": "1860320"
  },
  {
    "text": "solve it so we'll have an enum that specifies this is what I want and then you can match over that and and get the",
    "start": "1860320",
    "end": "1866840"
  },
  {
    "text": "data but it's basically the same thing you know and if someone is is accidentally sets the enum and",
    "start": "1866840",
    "end": "1873279"
  },
  {
    "text": "forgets to sets the data then you'll get a null reference exception and and just in case anyone is",
    "start": "1873279",
    "end": "1880320"
  },
  {
    "text": "thinking like oh wait C has got non nullable reference types that won't help you in this situation you can't use it",
    "start": "1880320",
    "end": "1886440"
  },
  {
    "text": "for Mutual exclusion so forget that um let's skip that one out this is the",
    "start": "1886440",
    "end": "1894200"
  },
  {
    "text": "the the real way that you would do it in an object-oriented language is you would use inheritance so you would have a",
    "start": "1894200",
    "end": "1900360"
  },
  {
    "text": "contact method abstract class and then you'd inherit from it so you'd have a telephone contact method an address",
    "start": "1900360",
    "end": "1905679"
  },
  {
    "text": "contact method and a email method and they'd have the data on it and then you'd have a contact uh method on it as",
    "start": "1905679",
    "end": "1913639"
  },
  {
    "text": "well who here would actually do that today like anyone y like one person's raised their hands",
    "start": "1913639",
    "end": "1920399"
  },
  {
    "text": "two people who here would actually have done something more like enums and if then sort of",
    "start": "1920399",
    "end": "1926360"
  },
  {
    "text": "thing yeah a few people more switch case sort of thing I mean I'm not sure what",
    "start": "1926360",
    "end": "1932480"
  },
  {
    "text": "other way there is really of doing this apart from those two kind of ways",
    "start": "1932480",
    "end": "1938240"
  },
  {
    "text": "um the way you can do it in um cop I think 10 onwards is you can use pattern",
    "start": "1938240",
    "end": "1943399"
  },
  {
    "text": "matching so that's kind of the more modern way where you would have a subass but rather than using polymorphism you'd",
    "start": "1943399",
    "end": "1949880"
  },
  {
    "text": "have a single method called Contact and then you'd switch over the contact method and you try and safely unwrap it",
    "start": "1949880",
    "end": "1958240"
  },
  {
    "text": "so you'd safely cast it across if it's telephone then unwrap it and and use the data but I don't see many people doing",
    "start": "1958240",
    "end": "1965279"
  },
  {
    "text": "this today um and that's just an example of like",
    "start": "1965279",
    "end": "1970600"
  },
  {
    "text": "how this sort of thing it's it's not clear how to do this sort of what should be fairly simple to do today but in C",
    "start": "1970600",
    "end": "1977639"
  },
  {
    "text": "there's not a really good story for this yet and that's the sort of thing that tag unions will solve it will allow you",
    "start": "1977639",
    "end": "1982720"
  },
  {
    "text": "to model Mutual exclusion a customer has this or this or this and to safely deal",
    "start": "1982720",
    "end": "1988360"
  },
  {
    "text": "with that data should you do what I've outlined today we've still got 20 minutes which",
    "start": "1988360",
    "end": "1994919"
  },
  {
    "text": "is good I can spend plenty of time um my gut fill is what I've showed you",
    "start": "1994919",
    "end": "2002159"
  },
  {
    "text": "would probably be less than satisfying if you were to just stick to static methods records two pools and a few",
    "start": "2002159",
    "end": "2008399"
  },
  {
    "text": "other bits and pieces because you're you're cutting away probably 60% of the language um you could start doing it and",
    "start": "2008399",
    "end": "2016120"
  },
  {
    "text": "your fellow colleagues on your team would come in and look at this and say what have you done stop doing this it's like completely unidiomatic",
    "start": "2016120",
    "end": "2023159"
  },
  {
    "text": "c um and it's just not what cop is designed for um more than that the the",
    "start": "2023159",
    "end": "2029519"
  },
  {
    "text": "functional features are somewhat limited um I just want to show you again what mad said and he said this last week so",
    "start": "2029519",
    "end": "2036480"
  },
  {
    "text": "this is not controversial C is it is heart and O language um and you're not",
    "start": "2036480",
    "end": "2041639"
  },
  {
    "text": "going to get a full FP experience in C um so you will get these nice language",
    "start": "2041639",
    "end": "2047639"
  },
  {
    "text": "features like lambdas and pattern matching but the fundamentals are never going to change c will always have this",
    "start": "2047639",
    "end": "2055079"
  },
  {
    "text": "mutable State at its heart and what we're really trying to do is go against the grain when we're trying to say I",
    "start": "2055079",
    "end": "2060839"
  },
  {
    "text": "want to do functional programming in c um and there's a reason why that is",
    "start": "2060839",
    "end": "2066679"
  },
  {
    "text": "it's like the more time times you add new language features they have to integrate with every existing feature",
    "start": "2066679",
    "end": "2073638"
  },
  {
    "text": "and because cop has this mentality of we will not have any breaking changes ever",
    "start": "2073639",
    "end": "2079240"
  },
  {
    "text": "there's always a smaller space that new language features can fit into without going against any of the other",
    "start": "2079240",
    "end": "2085679"
  },
  {
    "text": "ones um this isn't controversial or shouldn't be this doesn't mean that c is",
    "start": "2085679",
    "end": "2090839"
  },
  {
    "text": "bad or that f is better is but beside the point um what just means is that you",
    "start": "2090839",
    "end": "2099440"
  },
  {
    "text": "can't continually add features it's not like yeah you know I like ice cream I",
    "start": "2099440",
    "end": "2107720"
  },
  {
    "text": "like cheese I like chicken and I like parsnips but it doesn't mean that I can",
    "start": "2107720",
    "end": "2113480"
  },
  {
    "text": "just throw them all into a big pot and I'm going to get something that's really tasty at the end of it you can't just continually randomly add features",
    "start": "2113480",
    "end": "2120119"
  },
  {
    "text": "because you'll end up with something like that um so you have to really think carefully especially as some features in",
    "start": "2120119",
    "end": "2127200"
  },
  {
    "text": "a language will actively work against other ones so just as an example I",
    "start": "2127200",
    "end": "2132400"
  },
  {
    "text": "talked about things like CED functions before um you can't really do them in C",
    "start": "2132400",
    "end": "2138599"
  },
  {
    "text": "um the same way as type inference is somewhat limited because you've got these features on the left that are really good features in C you know we",
    "start": "2138599",
    "end": "2145960"
  },
  {
    "text": "love overloading for example and we like cyclical references and we wouldn't want",
    "start": "2145960",
    "end": "2151200"
  },
  {
    "text": "to lose them but if you have them you can't do something else or if you do it's somewhat limited so don't think of",
    "start": "2151200",
    "end": "2158000"
  },
  {
    "text": "features in a language as just additive but they have to work together and each",
    "start": "2158000",
    "end": "2163119"
  },
  {
    "text": "one of them is a trade-off with another one",
    "start": "2163119",
    "end": "2169560"
  },
  {
    "text": "um so when I hear people talk about FP on C I think there are some good things",
    "start": "2169560",
    "end": "2174960"
  },
  {
    "text": "about that people are more excited about this idea functional programming and from an",
    "start": "2174960",
    "end": "2182079"
  },
  {
    "text": "F perspective which is what I'm very passionate about um I like that because",
    "start": "2182079",
    "end": "2187599"
  },
  {
    "text": "features like pattern matching Lambda functions um unions those were kind",
    "start": "2187599",
    "end": "2194200"
  },
  {
    "text": "of those were considered somehow difficult a few years ago but",
    "start": "2194200",
    "end": "2199880"
  },
  {
    "text": "nowadays you know records are pretty simple in C and people realize there's nothing to be scared of so that's like",
    "start": "2199880",
    "end": "2205960"
  },
  {
    "text": "the good side the thing that I don't like is or that I'm worried about is people will try and do functional",
    "start": "2205960",
    "end": "2211560"
  },
  {
    "text": "programming in c and then say Oh it's really ugly I have generic arguments everywhere or or",
    "start": "2211560",
    "end": "2217800"
  },
  {
    "text": "it's really ugly I have to put readon and I have to put private everywhere and I have to change all my the way I'm",
    "start": "2217800",
    "end": "2223480"
  },
  {
    "text": "writing code and static everywhere um or that we say well I know F I know",
    "start": "2223480",
    "end": "2228920"
  },
  {
    "text": "functional programming because I'm using Lambda functions there's nothing more to learn believe me that that that's like a",
    "start": "2228920",
    "end": "2235079"
  },
  {
    "text": "very superficial way of thinking about it and the better way to look at it is there are other things to do you know",
    "start": "2235079",
    "end": "2240920"
  },
  {
    "text": "the same as mads has said try a language that is functional first and you'll see just how the defaults are very different",
    "start": "2240920",
    "end": "2246800"
  },
  {
    "text": "and I'll show you that in a minute so just to finish off the kind of C story here and and functional",
    "start": "2246800",
    "end": "2254200"
  },
  {
    "text": "programming I would say yeah there are no shortcuts um if you want to do functional programming those kind of things I've",
    "start": "2254200",
    "end": "2260760"
  },
  {
    "text": "talked about expressions and immutability you can't skip them you have to do them otherwise you're sort of",
    "start": "2260760",
    "end": "2266560"
  },
  {
    "text": "building on unsafe foundations and there's no point doing it um c will always be an O first language that's not",
    "start": "2266560",
    "end": "2273560"
  },
  {
    "text": "a criticism that's just what it's optimized for and it's great at doing that and it's got some extensions that",
    "start": "2273560",
    "end": "2281079"
  },
  {
    "text": "kind of make it easier to do some kind of functional composition but if you want to do these",
    "start": "2281079",
    "end": "2286200"
  },
  {
    "text": "kind of basic things I want to work with immutable data everywhere and I want to use Expressions everywhere c will never",
    "start": "2286200",
    "end": "2294040"
  },
  {
    "text": "it's not optimized for that because it was never designed from that from the start so don't um see that as a",
    "start": "2294040",
    "end": "2301119"
  },
  {
    "text": "criticism of the language it's simply the design choices of it and the fact that you can't you can't",
    "start": "2301119",
    "end": "2307160"
  },
  {
    "text": "do everything in one language so this is where I come to the fun bit and I I've got 20 minutes left",
    "start": "2307160",
    "end": "2313960"
  },
  {
    "text": "to really talk about F so that's the the other net language if we forget about VB",
    "start": "2313960",
    "end": "2319599"
  },
  {
    "text": "for the minute it's a great language as well but from an interesting point of view it's basically C with a slightly",
    "start": "2319599",
    "end": "2325200"
  },
  {
    "text": "different syntax apologies for that but that's how I see it um you really should",
    "start": "2325200",
    "end": "2331160"
  },
  {
    "text": "try F shop if you want to get a feel for what functional programming on net really would look like or does look like",
    "start": "2331160",
    "end": "2338040"
  },
  {
    "text": "um in the same way that c is optimized for objectoriented programming with some",
    "start": "2338040",
    "end": "2343839"
  },
  {
    "text": "functional extensions you can flip that around and think of f as a functional",
    "start": "2343839",
    "end": "2349079"
  },
  {
    "text": "first language with objectoriented extensions um so if you like for example",
    "start": "2349079",
    "end": "2355359"
  },
  {
    "text": "link you like records you like pattern matching um you tend to be writing",
    "start": "2355359",
    "end": "2360760"
  },
  {
    "text": "simple functions that you pass around that is what F was designed for and",
    "start": "2360760",
    "end": "2366720"
  },
  {
    "text": "everything about the language is geared up towards that way of thinking so if that sort of thing you like you should",
    "start": "2366720",
    "end": "2372599"
  },
  {
    "text": "really try F because you'll probably find it much more natural for what you want to do um the big difference is whereas f um",
    "start": "2372599",
    "end": "2382079"
  },
  {
    "text": "C rather started with like these core foundations of like classes mutability",
    "start": "2382079",
    "end": "2387880"
  },
  {
    "text": "inheritance in cop one and then it's added in on top of that afterwards these",
    "start": "2387880",
    "end": "2393040"
  },
  {
    "text": "kind of other functional style features and F shs always had this kind",
    "start": "2393040",
    "end": "2398720"
  },
  {
    "text": "of two halves to the language it's got a functional half and an objectoriented half and the two don't really interact",
    "start": "2398720",
    "end": "2404839"
  },
  {
    "text": "if you want to do objects you know go ahead have fun but if you want to do the functional side then you have this very",
    "start": "2404839",
    "end": "2410400"
  },
  {
    "text": "clean subset of the language that is just designed to do that really really well um",
    "start": "2410400",
    "end": "2416720"
  },
  {
    "text": "so probably got slightly more than 60 seconds I was going to do some coding in",
    "start": "2416720",
    "end": "2421960"
  },
  {
    "text": "C but when I was practicing for this slide for this talk for the last two weeks I realized that I've just lost it",
    "start": "2421960",
    "end": "2428480"
  },
  {
    "text": "I I can't do c anymore and I was just fumbling everywhere so that's why all the slides were in were pre-done but I",
    "start": "2428480",
    "end": "2434520"
  },
  {
    "text": "do know F somewhat so I'll I'll be doing that instead so I'm just using VSS code here",
    "start": "2434520",
    "end": "2441880"
  },
  {
    "text": "um that visible for the back row all good lovely thank you um so I'm just",
    "start": "2441880",
    "end": "2447599"
  },
  {
    "text": "going to give you an idea of the language now what I'm using here is in vs code is this thing called a repple",
    "start": "2447599",
    "end": "2454319"
  },
  {
    "text": "which is um f you can do console apps class libraries web apps all of that but",
    "start": "2454319",
    "end": "2460160"
  },
  {
    "text": "it's also got this scripting mode where I can write code and just execute a few lines and get the results while I'm",
    "start": "2460160",
    "end": "2467640"
  },
  {
    "text": "coding so it's kind of like the immediate window when you're debugging c apps but while you're typing rather than",
    "start": "2467640",
    "end": "2474720"
  },
  {
    "text": "running an application so you can just explore things really quickly so I can say things like let x",
    "start": "2474720",
    "end": "2480960"
  },
  {
    "text": "equals 5 and then I can hit Alt Enter and you'll see at the bottom here I get x =",
    "start": "2480960",
    "end": "2489040"
  },
  {
    "text": "5 and then I could do something like x + 10 and I get 15 at the bottom but I can",
    "start": "2489040",
    "end": "2496280"
  },
  {
    "text": "do this with I can create types I can create data I can do all sorts of things and and and start working",
    "start": "2496280",
    "end": "2502520"
  },
  {
    "text": "nicely so I just want to show you now the the two things that I started on which was immutability and",
    "start": "2502520",
    "end": "2508160"
  },
  {
    "text": "expressions um so for example in F if I say let x equals 5 you could sort of",
    "start": "2508160",
    "end": "2514760"
  },
  {
    "text": "translate that to VAR X is five except in f um you can't mutate so if I",
    "start": "2514760",
    "end": "2522079"
  },
  {
    "text": "try and change this value it says this value is not mutable and I've got to put in the word",
    "start": "2522079",
    "end": "2528400"
  },
  {
    "text": "mutable here instead and then I've actually got a a mutable variable this",
    "start": "2528400",
    "end": "2533640"
  },
  {
    "text": "is like the opposite of of C where by default it's mutable and if you want to",
    "start": "2533640",
    "end": "2539000"
  },
  {
    "text": "make something immutable you've got to use read only or ConEd and there are certain ways to get around it in F it's",
    "start": "2539000",
    "end": "2544119"
  },
  {
    "text": "the opposite everything is consed without you having to say it",
    "start": "2544119",
    "end": "2549119"
  },
  {
    "text": "um in fop everything is in expression so by that I mean um even something like if",
    "start": "2552400",
    "end": "2560240"
  },
  {
    "text": "then so if I was to say something like let y equals if um I don't know system",
    "start": "2560240",
    "end": "2568480"
  },
  {
    "text": "date time now hour equals 10 then hello",
    "start": "2568480",
    "end": "2575720"
  },
  {
    "text": "Oslo else good so this is actually a branch of",
    "start": "2575720",
    "end": "2584318"
  },
  {
    "text": "code that can actually have a result so the result of this entire thing is assigned to Y so it's more like a switch",
    "start": "2584839",
    "end": "2591920"
  },
  {
    "text": "expression but in F that's like if is also an expression so you don't have this notion of like a statement",
    "start": "2591920",
    "end": "2598720"
  },
  {
    "text": "everything has a result and if you even have a void method in F that's not a",
    "start": "2598720",
    "end": "2603960"
  },
  {
    "text": "void method that actually returns an object that has no value in it but you can still assign it to something so",
    "start": "2603960",
    "end": "2610359"
  },
  {
    "text": "everything has a result in in F we call it unit and this notion of unit is actually getting quite popular now I see",
    "start": "2610359",
    "end": "2616960"
  },
  {
    "text": "it in some C libraries where people are designing their own type called Unit to do exactly this sort of",
    "start": "2616960",
    "end": "2624200"
  },
  {
    "text": "thing um so records in F are very very simple",
    "start": "2624200",
    "end": "2633200"
  },
  {
    "text": "um for those of you using records in C today anyone yep I was having a look at them and I I",
    "start": "2633200",
    "end": "2639960"
  },
  {
    "text": "I like what they give you what I don't like is there's kind of two ways of doing it and that you have to have these",
    "start": "2639960",
    "end": "2646520"
  },
  {
    "text": "like init and read only and other keywords that are sort of needed and",
    "start": "2646520",
    "end": "2651880"
  },
  {
    "text": "they kind of make it a bit more um a bit less pleasurable should we say",
    "start": "2651880",
    "end": "2657359"
  },
  {
    "text": "to use um f records are super simple like that is it you just say I want a",
    "start": "2657359",
    "end": "2662559"
  },
  {
    "text": "type person it's got a name and an age and there's really not more not much",
    "start": "2662559",
    "end": "2668079"
  },
  {
    "text": "more to it than that um if you want to create one then you simply start assigning the",
    "start": "2668079",
    "end": "2674040"
  },
  {
    "text": "fields and if you just look where my mouse is there you'll see that the compiler already knows that this is a",
    "start": "2674040",
    "end": "2679839"
  },
  {
    "text": "type person I don't even have to give it a type the compiler smart enough to see well you've given it name and age",
    "start": "2679839",
    "end": "2686480"
  },
  {
    "text": "there's a type above called name and age it must be one of",
    "start": "2686480",
    "end": "2691480"
  },
  {
    "text": "those and if I miss out one it will actually tell me like you've not given the field age so please do it so it's",
    "start": "2691599",
    "end": "2699680"
  },
  {
    "text": "not dynamically typed it's fully static it's just really smart about inferring",
    "start": "2699680",
    "end": "2706000"
  },
  {
    "text": "stuff and of course I get the usual sorts of um equality so these will be",
    "start": "2708240",
    "end": "2713880"
  },
  {
    "text": "considered the same because they have the same value let's just Define",
    "start": "2713880",
    "end": "2721119"
  },
  {
    "text": "that so person one equals person two um in F",
    "start": "2721119",
    "end": "2727079"
  },
  {
    "text": "equals means equals it doesn't mean assignment so you don't need to double",
    "start": "2727079",
    "end": "2732520"
  },
  {
    "text": "equals anyway okay good um and if you want to",
    "start": "2732520",
    "end": "2738839"
  },
  {
    "text": "do sort of mutation style stuff you can say person with age equals 31 so the",
    "start": "2738839",
    "end": "2746119"
  },
  {
    "text": "same sort of wi syntax except it's built into the language here rather than as kind of code generated um methods",
    "start": "2746119",
    "end": "2755880"
  },
  {
    "text": "okay um I want to show you briefly the calculator AR um example that I showed",
    "start": "2757319",
    "end": "2763359"
  },
  {
    "text": "you before which was doing the adding with the logging and just show you what that would look like in F and how we can",
    "start": "2763359",
    "end": "2769720"
  },
  {
    "text": "sort of make use of this kind of very simple function composition and of course yeah I know this is a really",
    "start": "2769720",
    "end": "2775480"
  },
  {
    "text": "arbitrary example of a calculator I know that we're not spending our full-time jobs writing calculators I get",
    "start": "2775480",
    "end": "2783319"
  },
  {
    "text": "that but if we remember remember it had um we were adding with a logger and it had some State and then it was the value",
    "start": "2785359",
    "end": "2791920"
  },
  {
    "text": "we wanted to add and we were doing like something like this so we were saying logger and",
    "start": "2791920",
    "end": "2799400"
  },
  {
    "text": "that was a function that was adding value to State and then we were returning it back out now in fop you",
    "start": "2799400",
    "end": "2804920"
  },
  {
    "text": "don't need to use the return keyword because everything is an expression so we can just strip that out we don't need",
    "start": "2804920",
    "end": "2810920"
  },
  {
    "text": "curly braces because it's Whit space sensitive so you just indent to get your scope so you don't need to B with curly",
    "start": "2810920",
    "end": "2817920"
  },
  {
    "text": "brackets um and the compiler has basically figured out the types of all of these things for us so if I Mouse",
    "start": "2817920",
    "end": "2824359"
  },
  {
    "text": "just above it you'll see that it knows that state is an integer value is an INT and we're returning an",
    "start": "2824359",
    "end": "2830800"
  },
  {
    "text": "INT I could type them if I wanted to like this but that's not needed the",
    "start": "2830800",
    "end": "2836480"
  },
  {
    "text": "compiler is is pretty smart and it figures things out",
    "start": "2836480",
    "end": "2841839"
  },
  {
    "text": "um oops let's get rid of that",
    "start": "2841839",
    "end": "2847200"
  },
  {
    "text": "now where it comes into a bit more um Power and this is where things will be a bit foreign for for looking at this from",
    "start": "2848800",
    "end": "2854359"
  },
  {
    "text": "a a cart perspective is if I was to call this function and I want to pass in my logger function so here I'm just going",
    "start": "2854359",
    "end": "2860559"
  },
  {
    "text": "to use console right line so I'm going to say system console right line and",
    "start": "2860559",
    "end": "2865839"
  },
  {
    "text": "then I'm going to start with uh let's actually invert",
    "start": "2865839",
    "end": "2870400"
  },
  {
    "text": "these so I'm saying that I want to use the right line function as my logger I want to add 10 to zero",
    "start": "2870880",
    "end": "2878240"
  },
  {
    "text": "and I can compile this and then I can call it and you can see at the bottom there I got adding 10 to zero the answer",
    "start": "2878240",
    "end": "2884920"
  },
  {
    "text": "is 10 wonderful um what if I wanted to add another number to that so I could",
    "start": "2884920",
    "end": "2890760"
  },
  {
    "text": "either sort of bind that to something here so I could say let X1 equals this and then add that to",
    "start": "2890760",
    "end": "2896880"
  },
  {
    "text": "X2 or I could call it again so I can say let's do this and",
    "start": "2896880",
    "end": "2903079"
  },
  {
    "text": "let's add five again so that would be like the state for the for the second call you know",
    "start": "2903079",
    "end": "2910240"
  },
  {
    "text": "this is the sort of thing we've seen in cop where you're chaining functions and you sort of have this expanding",
    "start": "2910240",
    "end": "2916000"
  },
  {
    "text": "brackets but it's kind of a bit ugly now we're having to pass in system console right line twice if we' have used object",
    "start": "2916000",
    "end": "2923480"
  },
  {
    "text": "orientation we would have passed that in as a dependency on the Constructor this isn't so nice but but F",
    "start": "2923480",
    "end": "2929480"
  },
  {
    "text": "lets us do the same kind of thing with functions so I can say add with console",
    "start": "2929480",
    "end": "2936960"
  },
  {
    "text": "and then I've kind of built my own version of AD which just takes in the first argument and the rest are still",
    "start": "2941240",
    "end": "2946920"
  },
  {
    "text": "left left standing and I can still reuse them so I've just kind of quickly composed the function and I don't have",
    "start": "2946920",
    "end": "2952839"
  },
  {
    "text": "to bother sort of doing that by hand and then what I can then do is I",
    "start": "2952839",
    "end": "2959240"
  },
  {
    "text": "can get rid of these parns and I can invert them with this thing called a pipeline so this says take this value",
    "start": "2959240",
    "end": "2966760"
  },
  {
    "text": "let me just get rid of uh this get the value of the first line and pipe it to",
    "start": "2966760",
    "end": "2972200"
  },
  {
    "text": "the second one and then I can get rid of my paren and I can get rid of",
    "start": "2972200",
    "end": "2978079"
  },
  {
    "text": "this and now I've got this nice little DSL that I've built very very easily",
    "start": "2978079",
    "end": "2984079"
  },
  {
    "text": "where I can say start with zero add 10 to it add five to it and add seven to it and it just flows line by",
    "start": "2984079",
    "end": "2991440"
  },
  {
    "text": "line and I've not had to create extension methods I've not had to do much in in the way of like hard work",
    "start": "2991440",
    "end": "2997920"
  },
  {
    "text": "this is just like fundamental features in the language so it lets me build functions very very easily and compose",
    "start": "2997920",
    "end": "3004839"
  },
  {
    "text": "them in different",
    "start": "3004839",
    "end": "3007440"
  },
  {
    "text": "ways uh well how much time we've got left we'll skip this out let's um just look",
    "start": "3009960",
    "end": "3016079"
  },
  {
    "text": "at some domain modeling very briefly so this is the um the example I",
    "start": "3016079",
    "end": "3021799"
  },
  {
    "text": "touched on before with the contact methods and this is probably what it would look like in F and what it might",
    "start": "3021799",
    "end": "3028079"
  },
  {
    "text": "look like in C with some syntactic differences so I wanted to have",
    "start": "3028079",
    "end": "3033880"
  },
  {
    "text": "different contact methods which is either email or telephone or post and if it's email I'm",
    "start": "3033880",
    "end": "3041160"
  },
  {
    "text": "going to capture the address which is over here if it's telephone then I want to",
    "start": "3041160",
    "end": "3048319"
  },
  {
    "text": "capture the phone number which is an integer and if it's post I want to capture the three lines of the",
    "start": "3048319",
    "end": "3055200"
  },
  {
    "text": "address and then I'm going to going to compose that with customer so I'm going to say customer has a name and a contact",
    "start": "3055200",
    "end": "3061760"
  },
  {
    "text": "method which is either email or telephone or post and you can just",
    "start": "3061760",
    "end": "3067160"
  },
  {
    "text": "continually plug these things together and and or this or that and this or",
    "start": "3067160",
    "end": "3073400"
  },
  {
    "text": "that we can create a record very easily and then we can use",
    "start": "3073400",
    "end": "3078480"
  },
  {
    "text": "pattern matching to match on top of this field so I've got here a function called Contact which takes in a customer and",
    "start": "3078480",
    "end": "3086319"
  },
  {
    "text": "I'm switching on contact and saying if it's an email I'm going to send them an email if it's a phone number I'm going",
    "start": "3086319",
    "end": "3092200"
  },
  {
    "text": "to call them and of course if I comment out a line there then I'm going to get a",
    "start": "3092200",
    "end": "3098280"
  },
  {
    "text": "warning that says oh you haven't handled the post condition please remember to handle",
    "start": "3098280",
    "end": "3105200"
  },
  {
    "text": "that if I was to put in an arbitrary email address",
    "start": "3105640",
    "end": "3110960"
  },
  {
    "text": "there then I'm going to get a warning I haven't handled another email address please handle all the cases and it will",
    "start": "3111599",
    "end": "3118640"
  },
  {
    "text": "continually go through and make sure that I've handled every conceivable potential case of emails telephones and",
    "start": "3118640",
    "end": "3126040"
  },
  {
    "text": "contact methods okay jolly good",
    "start": "3126040",
    "end": "3133400"
  },
  {
    "text": "um I think we're nearly done let's have a look",
    "start": "3133400",
    "end": "3140200"
  },
  {
    "text": "dbd yeah the calculator I've already done okay good um",
    "start": "3140200",
    "end": "3147200"
  },
  {
    "text": "uh yeah fine I haven't shown you everything in 60 seconds there clearly in F but take it from me when I say you",
    "start": "3149760",
    "end": "3155920"
  },
  {
    "text": "can do all the normal things like you have the full NET Framework or the BCL you can use everything from there you",
    "start": "3155920",
    "end": "3162000"
  },
  {
    "text": "can use ASP net core there are lovely web Frameworks um you can use on top of",
    "start": "3162000",
    "end": "3167760"
  },
  {
    "text": "ASP net core you can also do F in the browser there's a project that lets you transpar f into JavaScript so we're",
    "start": "3167760",
    "end": "3174640"
  },
  {
    "text": "using that to do full stack web apps entirely in f um called safe stack you can have a look at that um but that's",
    "start": "3174640",
    "end": "3182240"
  },
  {
    "text": "basically enough to to to hopefully get you interested in just exploring it and just seeing you can open up vs code you",
    "start": "3182240",
    "end": "3188760"
  },
  {
    "text": "download one extension called ionide and you're good to go so just to wrap up um we got five",
    "start": "3188760",
    "end": "3196079"
  },
  {
    "text": "minutes left which is fine um one is c a functional programming language I would",
    "start": "3196079",
    "end": "3202079"
  },
  {
    "text": "say no it's an objectoriented language with some functional extension",
    "start": "3202079",
    "end": "3207640"
  },
  {
    "text": "um how do I feel about the FP languages in C I think they're good to let you put your toe in the water to get a feel for",
    "start": "3207640",
    "end": "3214000"
  },
  {
    "text": "it but please don't think that um if you find the experience suboptimal in C if",
    "start": "3214000",
    "end": "3222520"
  },
  {
    "text": "you find it's a bit clunky when you're trying to do things like I've described that that means F uh that FP is clunky",
    "start": "3222520",
    "end": "3229480"
  },
  {
    "text": "it's more the fact that it's not what C was designed for um so should you try it",
    "start": "3229480",
    "end": "3235920"
  },
  {
    "text": "yes but but don't expect a perfect experience like take mad's word for it",
    "start": "3235920",
    "end": "3241839"
  },
  {
    "text": "don't take mine for it try a language ideally on net because you know the framework already it's not hard file new",
    "start": "3241839",
    "end": "3248960"
  },
  {
    "text": "project in Visual Studio or Ryder net c.net new you have all the the",
    "start": "3248960",
    "end": "3254799"
  },
  {
    "text": "the standard templates in f as well um so yes I would certainly try it you can",
    "start": "3254799",
    "end": "3260119"
  },
  {
    "text": "also do mixed language Solutions so you could do C and F F has a really good interrupt story so you can write F",
    "start": "3260119",
    "end": "3267319"
  },
  {
    "text": "functions and they just look like methods to C um records just look like classes to",
    "start": "3267319",
    "end": "3274000"
  },
  {
    "text": "C um yeah let's leave it as that so I will",
    "start": "3274000",
    "end": "3279760"
  },
  {
    "text": "just wrap up to say thank you very much um you can get me on Twitter Isaac Abraham you can contact me on our",
    "start": "3279760",
    "end": "3286520"
  },
  {
    "text": "company email address info@ composition it um we are hiring we don't need F",
    "start": "3286520",
    "end": "3292000"
  },
  {
    "text": "experience devs we don't even need net devs we do provide Visa sponsorship if you're interested um my book has just",
    "start": "3292000",
    "end": "3299760"
  },
  {
    "text": "been released finally it took a bit longer than I thought um if you're interested I do have some free codes to",
    "start": "3299760",
    "end": "3305200"
  },
  {
    "text": "the book so if you want to try it out you can literally get started for free um just hit me up after this talk and I",
    "start": "3305200",
    "end": "3310680"
  },
  {
    "text": "will send you a code so thank you very",
    "start": "3310680",
    "end": "3314760"
  },
  {
    "text": "much we do have four minutes if you want any questions let's come over and um we can chat thank you",
    "start": "3320319",
    "end": "3328160"
  }
]