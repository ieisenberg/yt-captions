[
  {
    "start": "0",
    "end": "536000"
  },
  {
    "text": "do that right right morning um so what I'd like to talk about",
    "start": "9080",
    "end": "19000"
  },
  {
    "text": "is uh not dysfunctional C++ but uh the functional stuff um because everybody",
    "start": "19000",
    "end": "26279"
  },
  {
    "text": "seems to be talking about that now it's a little overdue uh would say about six",
    "start": "26279",
    "end": "31880"
  },
  {
    "text": "decades overdue um but you know it's better better late than never um and",
    "start": "31880",
    "end": "38960"
  },
  {
    "text": "everyone is looking at how they can either extend their respective languages",
    "start": "38960",
    "end": "44600"
  },
  {
    "text": "um to embrace more uh Concepts um that we find in functional programming and indeed in other paradigms but um because",
    "start": "44600",
    "end": "51719"
  },
  {
    "text": "there's been a bit of bit of a land grab um there's a bunch of stuff that now goes under the functional bucket that's actually logic programming and so on um",
    "start": "51719",
    "end": "59120"
  },
  {
    "text": "but there is this idea that people are becoming a little more open to um uh",
    "start": "59120",
    "end": "64559"
  },
  {
    "text": "sort of uh broader Paradigm ideas and there's a lot more cross fertilization between languages now any language that",
    "start": "64559",
    "end": "70080"
  },
  {
    "text": "starts adding this stuff later is automatically at a disadvantage uh from its Heritage so each language is going",
    "start": "70080",
    "end": "76600"
  },
  {
    "text": "to manifest itself differently based on accidents of birth it's uh there are things that it will support better than",
    "start": "76600",
    "end": "82560"
  },
  {
    "text": "other languages and there are things in C++ that work far better than things in Java in supporting uh functional",
    "start": "82560",
    "end": "88159"
  },
  {
    "text": "programming and vice versa um and so what I'm going to concentrate on here is I'm not going to go hardcore",
    "start": "88159",
    "end": "94680"
  },
  {
    "text": "functional I'm just going to start looking first of all at what are the points of adjacency in other words what",
    "start": "94680",
    "end": "100240"
  },
  {
    "text": "are the things that are comfortable for people uh who may already be working in C++ and a relatively nearby uh in terms",
    "start": "100240",
    "end": "108840"
  },
  {
    "text": "of their reach uh into the functional space and then take things a little bit further in one sense there's two aspect",
    "start": "108840",
    "end": "115439"
  },
  {
    "text": "there's two halves to this talk and the second half is kind of the talk I'm doing this afternoon thinking outside",
    "start": "115439",
    "end": "120759"
  },
  {
    "text": "the synchronization quadrant so apart from obliquely mentioning concurrency a few times this morning I'm not going to",
    "start": "120759",
    "end": "128039"
  },
  {
    "text": "explore that although it's obviously uh one of the motivation areas of motivation from C++ um and a functional",
    "start": "128039",
    "end": "135160"
  },
  {
    "text": "approach I'm not going to do that because most of that stuff is going to find itself in this afternoon so just so you know if you're wondering where this",
    "start": "135160",
    "end": "142360"
  },
  {
    "text": "stuff is why is he not talking about concurrency there is a specific reason to now in terms of my background um I",
    "start": "142360",
    "end": "149560"
  },
  {
    "text": "have a long standing interest in terms of uh patents patents as a way of thinking not as a a shopping list of um",
    "start": "149560",
    "end": "156280"
  },
  {
    "text": "uh cargo cult programming that I should shove into my program every pattern is a problem solving structure so I generally",
    "start": "156280",
    "end": "162159"
  },
  {
    "text": "approach things when people present me with new language features or new library extensions um I although there is a",
    "start": "162159",
    "end": "170920"
  },
  {
    "text": "little bit of me that enjoys the technology for technology sake the little language features for their own",
    "start": "170920",
    "end": "176440"
  },
  {
    "text": "sake the there's also another bit of me that goes yeah but why would this be useful is this a is this a solution in",
    "start": "176440",
    "end": "182400"
  },
  {
    "text": "search for a problem and in many cases we do find this to be the case so I'm very interested well why would I use this what problem does this solve um",
    "start": "182400",
    "end": "189400"
  },
  {
    "text": "which for me characterizes uh why I'm interested in different languages and paradigms um but I'm also interested in",
    "start": "189400",
    "end": "195200"
  },
  {
    "text": "the code level of things um and uh why I um pulled together this book a couple of",
    "start": "195200",
    "end": "201000"
  },
  {
    "text": "years back um I've had a past in which I have been involved in the C++ standard",
    "start": "201000",
    "end": "207560"
  },
  {
    "text": "um as well as a couple of other languages and couple of other um uh industry",
    "start": "207560",
    "end": "213239"
  },
  {
    "text": "bodies um but what I'm going to do is I'm going to start off very very simply with um very simple perspective from",
    "start": "213239",
    "end": "219840"
  },
  {
    "text": "Michael feathers um you know there are lots of different ways of characterizing different paradigms we're only going to",
    "start": "219840",
    "end": "225319"
  },
  {
    "text": "pick on object orientation and functional we could talk about procedure we could talk about logic we could talk",
    "start": "225319",
    "end": "230519"
  },
  {
    "text": "about aop and a bunch of others but let's just pick on those two um and there are different ways of characterizing them and I quite like",
    "start": "230519",
    "end": "237079"
  },
  {
    "text": "this one from Michael feathers it it fits conveniently into a tweet um object orientation makes code",
    "start": "237079",
    "end": "242519"
  },
  {
    "text": "understandable by encapsulating moving Parts functional programming makes code understandable by minimizing moving",
    "start": "242519",
    "end": "247959"
  },
  {
    "text": "parts and that's not a bad way of kind of capturing the respective ethos of",
    "start": "247959",
    "end": "253519"
  },
  {
    "text": "both of these things and what we see with functional programming this reduction of moving Parts is very very",
    "start": "253519",
    "end": "258560"
  },
  {
    "text": "helpful now that is obviously not something that is unique to functional programming it is just strongly",
    "start": "258560",
    "end": "266120"
  },
  {
    "text": "characterized uh within functional programming and certainly when I started um working in",
    "start": "266120",
    "end": "272199"
  },
  {
    "text": "C and uh uh C++ extensively I'd had the Good Fortune to have been exposed to um",
    "start": "272199",
    "end": "279960"
  },
  {
    "text": "a couple of functional programming languages and I found that very strongly influenced my style around that second",
    "start": "279960",
    "end": "285160"
  },
  {
    "text": "sentence U that idea of reducing um State change localizing State change um",
    "start": "285160",
    "end": "291919"
  },
  {
    "text": "minimizing State change very powerful Concepts so taking this into um going to",
    "start": "291919",
    "end": "297680"
  },
  {
    "text": "kind of the source of all functional wisdom or at least has school programmers would have you believe that that's the source of all functional",
    "start": "297680",
    "end": "303160"
  },
  {
    "text": "programming wisdom um this simple idea in functional programming uh programs",
    "start": "303160",
    "end": "308680"
  },
  {
    "text": "are executed by evaluating expressions in contrast with imperative program where uh imperative programs where",
    "start": "308680",
    "end": "314199"
  },
  {
    "text": "programs are composed of statements which change Global State when executed one thing to understand here is that",
    "start": "314199",
    "end": "319919"
  },
  {
    "text": "there is a shift in the terminology um normally when we talk about global State we are talking about globally accessible",
    "start": "319919",
    "end": "327600"
  },
  {
    "text": "via scope State as in um this is a global variable or um some",
    "start": "327600",
    "end": "334560"
  },
  {
    "text": "sometimes people say well we don't have Global variables in our programming uh in our programming language because we're using C or something like as well",
    "start": "334560",
    "end": "340199"
  },
  {
    "text": "yeah you do Statics public Statics are basically Global variables with scoping etiquette but they are still Global um",
    "start": "340199",
    "end": "348080"
  },
  {
    "text": "that is what most people will refer to when they talk about global State what is being referred to here is the overall",
    "start": "348080",
    "end": "354639"
  },
  {
    "text": "um accessible state of the whole program that is that is how they view that they're not talking about global",
    "start": "354639",
    "end": "360560"
  },
  {
    "text": "variables here um functional programming typically avoids using mutable State okay so um observations many programming",
    "start": "360560",
    "end": "367880"
  },
  {
    "text": "languages support programming in both functional and imperative style but the syntax and Facilities of a language are",
    "start": "367880",
    "end": "373680"
  },
  {
    "text": "typically optimized for only one of these Styles and social factors like coding conventions and libraries often",
    "start": "373680",
    "end": "379319"
  },
  {
    "text": "Force the programmer towards one of the Styles now I think this for me is one of the most important insights because",
    "start": "379319",
    "end": "385160"
  },
  {
    "text": "people often will come into a language or a paradigm they will look at the language and what it offers divorced",
    "start": "385160",
    "end": "391840"
  },
  {
    "text": "from its ecosystem but also its culture its social conventions um I found this",
    "start": "391840",
    "end": "397560"
  },
  {
    "text": "fascinating for quite a long time because um in my in a long long distant",
    "start": "397560",
    "end": "402759"
  },
  {
    "text": "past I I programmed Fortran and I remember when when people started talking about Fortran having modules and",
    "start": "402759",
    "end": "409560"
  },
  {
    "text": "things added and I was a little skeptical that some of the data abstraction facilities that have been added would be embraced widely and that",
    "start": "409560",
    "end": "416319"
  },
  {
    "text": "skepticism is actually reasonably well born out because it's just not in the culture cult that's not where the as it",
    "start": "416319",
    "end": "422440"
  },
  {
    "text": "were the the center of that language is um and so we what we find is that there",
    "start": "422440",
    "end": "427720"
  },
  {
    "text": "are languages in which you can do a number of things but people don't either because of expectation because of history but also there's a strong",
    "start": "427720",
    "end": "434680"
  },
  {
    "text": "pressure exerted by the libraries around them and people um sometimes find that",
    "start": "434680",
    "end": "439759"
  },
  {
    "text": "they have to swim upstream in order to get the effect that they want so what we see is um the influence of all these",
    "start": "439759",
    "end": "446000"
  },
  {
    "text": "other external factors not just the language itself I'm going to try and isolate the language a bit here but I want you to recognize that this is what",
    "start": "446000",
    "end": "452440"
  },
  {
    "text": "uh kind of holds sway so for example a number of languages have had uh lambdas or lamba like facilities for a very long",
    "start": "452440",
    "end": "459440"
  },
  {
    "text": "time um but it was only I mean I'm going to pick on JavaScript for a moment JavaScript kind of basically gave",
    "start": "459440",
    "end": "465800"
  },
  {
    "text": "lambdas to the masses um but it was really particular Frameworks and particular Styles in event driven",
    "start": "465800",
    "end": "472159"
  },
  {
    "text": "programming that really drove that into people's um uh common everyday p uh",
    "start": "472159",
    "end": "478039"
  },
  {
    "text": "programm if you look at the early dhtml stuff very little use of um this idea of anonymous functions being passed around",
    "start": "478039",
    "end": "484720"
  },
  {
    "text": "and then you look at modern JavaScript the world has changed quite radically and also in terms of supporting it so",
    "start": "484720",
    "end": "490520"
  },
  {
    "text": "what we see is that some of these Frameworks and styles and architectures will influence that we may see the same thing happening with C++ as the years",
    "start": "490520",
    "end": "497280"
  },
  {
    "text": "unfold now I guess the first question I ought to ask um because I know part of the answer for this is who here is",
    "start": "497280",
    "end": "503479"
  },
  {
    "text": "actually actively using C++ so I can find out okay has used C++ in the past",
    "start": "503479",
    "end": "510720"
  },
  {
    "text": "right okay um uh using C++ 11",
    "start": "510720",
    "end": "515880"
  },
  {
    "text": "onwards okay about half okay so I'm going to try that's that's quite a large",
    "start": "515880",
    "end": "521279"
  },
  {
    "text": "gap to bridge um because I know sha there is on the committee um so that's",
    "start": "521279",
    "end": "527200"
  },
  {
    "text": "quite that's a bit of a span so I will not try to keep all of the people happy all of the time so if you sit there in",
    "start": "527200",
    "end": "533279"
  },
  {
    "text": "curly bracket misery that's just tough you know too much okay um so let's pick",
    "start": "533279",
    "end": "539160"
  },
  {
    "start": "536000",
    "end": "750000"
  },
  {
    "text": "some practi practical examples because people people often say well you know is anybody actually using this stuff is anybody actually using this to influence",
    "start": "539160",
    "end": "545519"
  },
  {
    "text": "their architecture plain and simple Yes um an example from um Facebook uh in",
    "start": "545519",
    "end": "551720"
  },
  {
    "text": "talking about how they built the um uh moment subsystem uh to keep our C++ API",
    "start": "551720",
    "end": "557800"
  },
  {
    "text": "boundary simple we adopted one-way data flow the uh so first thing to observe um",
    "start": "557800",
    "end": "564079"
  },
  {
    "text": "they are driving this from the idea of um simplicity so there's a goal here",
    "start": "564079",
    "end": "569560"
  },
  {
    "text": "they're not they don't open with efficiency or rather they open with developer efficiency not runtime efficiency their opening hand is let's",
    "start": "569560",
    "end": "576200"
  },
  {
    "text": "try and keep the API simple okay let's try and make this easy to work with Okay",
    "start": "576200",
    "end": "582160"
  },
  {
    "text": "um uh adopting one-way data flow basically One Way data flow allows you to eliminate um the challenge of",
    "start": "582160",
    "end": "589360"
  },
  {
    "text": "interaction CH interaction is a non-trivial thing that we deal with in code I do something over there it does",
    "start": "589360",
    "end": "595000"
  },
  {
    "text": "something back to me and suddenly everybody has to know everybody else's state or know something about them so",
    "start": "595000",
    "end": "600600"
  },
  {
    "text": "there is an idea here of reducing the knowledge and coupling within the code one way data flow is simply a way of",
    "start": "600600",
    "end": "606839"
  },
  {
    "text": "saying I hand something off and actually quite frankly I have no idea where it's going to nor do I care um so if you can",
    "start": "606839",
    "end": "612920"
  },
  {
    "text": "structure code in that way and we see this in the adoption of reactive programming uh and so on again not",
    "start": "612920",
    "end": "619519"
  },
  {
    "text": "coincidentally from uh Facebook but that idea of being able to I just pass it on and I really don't worry about it I can",
    "start": "619519",
    "end": "625360"
  },
  {
    "text": "have a very simple view of the world I receive stuff I pass things on I receive stuff I pass things on um does simplify",
    "start": "625360",
    "end": "631839"
  },
  {
    "text": "things radically uh the API consists of methods to perform fire and forget mutations so State change may happen but",
    "start": "631839",
    "end": "638519"
  },
  {
    "text": "if you don't know about it your little bubble universe is um effectively immutable so this's kind of like slight",
    "start": "638519",
    "end": "644839"
  },
  {
    "text": "of hand trick that a number of um functional programming uh and functional architectures uh actually achieve by",
    "start": "644839",
    "end": "651880"
  },
  {
    "text": "saying well this piece of code doesn't actually know that there's a p there's a side effect caused over here and it doesn't affect it it is not affected in",
    "start": "651880",
    "end": "658240"
  },
  {
    "text": "that sense as opposed to something like a classic Observer um uh relationship where perhaps I send a notification",
    "start": "658240",
    "end": "665399"
  },
  {
    "text": "something comes back to me and says well what did what changed well there is clearly a coupling between the two of us if I send a notification saying here is",
    "start": "665399",
    "end": "671480"
  },
  {
    "text": "everything you need to know I have no idea what this other party is going to do with it this view for example so",
    "start": "671480",
    "end": "676720"
  },
  {
    "text": "therefore I have a very simple view of the universe it's a a constrained one my bubble is immutable change happens",
    "start": "676720",
    "end": "683720"
  },
  {
    "text": "elsewhere if it happens at all uh and methods to compute view models required by specific views in other words The",
    "start": "683720",
    "end": "689399"
  },
  {
    "text": "View being um uh effectively immutable to keep the code understandable again the developmental view we write",
    "start": "689399",
    "end": "695480"
  },
  {
    "text": "functional style code converting converting raw data objects into immutable view models by default okay",
    "start": "695480",
    "end": "701120"
  },
  {
    "text": "now we actually start caring about performance as we identify performance bottlenecks through profiling we added",
    "start": "701120",
    "end": "707560"
  },
  {
    "text": "caches to avoid recomputing unchanged intermediate results in other words the idea is that it's a smoke and mirrors",
    "start": "707560",
    "end": "713320"
  },
  {
    "text": "thing we're going to support the idea of a simple programming model and if that means we have to do more work under the",
    "start": "713320",
    "end": "719680"
  },
  {
    "text": "hood then we do more work under the hood rather than expose it on the outside this is very different if you've",
    "start": "719680",
    "end": "725760"
  },
  {
    "text": "dealt with Legacy C++ code this is kind of quite different Legacy C++ code has",
    "start": "725760",
    "end": "731160"
  },
  {
    "text": "this very strong characteristic of um mechanics on the outside and that's what it feels like that you're always",
    "start": "731160",
    "end": "736279"
  },
  {
    "text": "combating and dealing with mechanics the word Simplicity is not the first one that comes to people's",
    "start": "736279",
    "end": "741959"
  },
  {
    "text": "minds the resulting functional code is easy to maintain without sacrificing performance so there's that simple idea",
    "start": "741959",
    "end": "747839"
  },
  {
    "text": "of this these are the priorities this is how we're going to reason about it so I'm going to start off with just a very simple um uh kind of uh having mentioned",
    "start": "747839",
    "end": "756360"
  },
  {
    "start": "750000",
    "end": "900000"
  },
  {
    "text": "the Observer approach I want to look at how we can move around the um move around the",
    "start": "756360",
    "end": "764320"
  },
  {
    "text": "space um and get get uh sort of use this as a little bit of a way of exploring and flushing out a couple of C++ 11",
    "start": "764320",
    "end": "770839"
  },
  {
    "text": "features as well as differences in Era uh in terms of how people would uh",
    "start": "770839",
    "end": "776120"
  },
  {
    "text": "approach C++ so it's winter um as I slid from the",
    "start": "776120",
    "end": "781880"
  },
  {
    "text": "hotel over the uh paving stones to get here uh it's a bit chilly so therefore",
    "start": "781880",
    "end": "787079"
  },
  {
    "text": "the heating system uh is is quite useful and I'd rather not have to just turn on the heating system myself and turn it",
    "start": "787079",
    "end": "793560"
  },
  {
    "text": "off manually um what I'd really like to do is have a timer and uh trigger it from a timer so here's a timer uh I'm",
    "start": "793560",
    "end": "800720"
  },
  {
    "text": "going to try and decouple it I don't want my timer coupled directly to um the",
    "start": "800720",
    "end": "805839"
  },
  {
    "text": "heating system so in kind of miso era middle C++ the way I would do it is I'd",
    "start": "805839",
    "end": "812360"
  },
  {
    "text": "just go to pick up the um gang of four book and say right I'm going to I'm going to decouple this using a command",
    "start": "812360",
    "end": "817839"
  },
  {
    "text": "object and I'm going to have a command object timer the command object will then go and run turning on or turning",
    "start": "817839",
    "end": "824760"
  },
  {
    "text": "off and in fact I have to do that kind of yeah so it's very simple I end up with a sort of interface like um class",
    "start": "824760",
    "end": "831759"
  },
  {
    "text": "purely abstract there's nothing else in that interface except perhaps a virtual Destructor uh and so we have the this",
    "start": "831759",
    "end": "839360"
  },
  {
    "text": "kind of ritual and choreography and it yeah it kind of gets a bit boiler platey",
    "start": "839360",
    "end": "846040"
  },
  {
    "text": "um very very quickly if we look at this I've now got a turn on command I pass in a heating system I",
    "start": "846040",
    "end": "852800"
  },
  {
    "text": "remember the heating system I override the execute um uh uh function and then I",
    "start": "852800",
    "end": "858279"
  },
  {
    "text": "turn the heating on so when it's cool back I turn the heating system on and I have to remember the heating system so I've got private State uh there is only",
    "start": "858279",
    "end": "865519"
  },
  {
    "text": "one line of code that actually does anything in there and everything else is just adding and that's just turn on so",
    "start": "865519",
    "end": "872000"
  },
  {
    "text": "in the name of Enterprise coding um we go and copy and paste that and just change a couple of things and then",
    "start": "872000",
    "end": "877199"
  },
  {
    "text": "somebody says well maybe we could use inheritance and factor out the commonality and just down that pathway",
    "start": "877199",
    "end": "882519"
  },
  {
    "text": "lies keystrokes and boredom there is no real benefit to this this is a lot of",
    "start": "882519",
    "end": "887560"
  },
  {
    "text": "work to get a very simple idea of could you please turn on at this time could you please turn off at that time the",
    "start": "887560",
    "end": "892800"
  },
  {
    "text": "idea that might that the English is actually far far shorter and easier to understand is definitely not working in",
    "start": "892800",
    "end": "898440"
  },
  {
    "text": "this style 's favor okay so some people will then realizing that C++ um you know",
    "start": "898440",
    "end": "906240"
  },
  {
    "start": "900000",
    "end": "1304000"
  },
  {
    "text": "they recognize and this is the problem with a lot of C++ out there is it's not really C++ regardless of whether it's",
    "start": "906240",
    "end": "912440"
  },
  {
    "text": "C++ 11 onwards it's C+ it's kind of like well yeah it's C with a few bits of C++",
    "start": "912440",
    "end": "919920"
  },
  {
    "text": "thrown in and a little more um bits of library and a little more type safety um",
    "start": "919920",
    "end": "925079"
  },
  {
    "text": "they will reach for the void pointer they will reach for how they did call backs and see and there is a problem",
    "start": "925079",
    "end": "931920"
  },
  {
    "text": "here um although I've tried to name this and uh use syntax that makes it as clear as possible what I'm going to do is I'm",
    "start": "931920",
    "end": "937800"
  },
  {
    "text": "now going to pass in a function and then I'm going to pass in the data that the function must operate",
    "start": "937800",
    "end": "943360"
  },
  {
    "text": "the only way to make this general purpose and decou in a statically typed language in this sense um is to use the",
    "start": "943360",
    "end": "950759"
  },
  {
    "text": "void pointer now the void pointer is quite simply a way of telling the compiler hey thanks for your help but",
    "start": "950759",
    "end": "955920"
  },
  {
    "text": "trust me I'll take it from here you know it's it's there's a there's a a sense that if you if you got void pointers",
    "start": "955920",
    "end": "961480"
  },
  {
    "text": "floating around high level code it is not high level code uh the per void pointer is there for a very good reason",
    "start": "961480",
    "end": "966839"
  },
  {
    "text": "this is not really it there is also something else missing here there's a coupling it's an important idea there's",
    "start": "966839",
    "end": "972800"
  },
  {
    "text": "a coupling between the function and the argument that you pass in the coupling",
    "start": "972800",
    "end": "978319"
  },
  {
    "text": "is that they must be the right type when you bind things together when",
    "start": "978319",
    "end": "983880"
  },
  {
    "text": "you have two things that are coupled together we tend to call that a thing or an object so in other words what we've done done is we've defragmented an",
    "start": "983880",
    "end": "990199"
  },
  {
    "text": "object two things that naturally go together should be together we going in the opposite direction here but for this there is a benefit there is",
    "start": "990199",
    "end": "998480"
  },
  {
    "text": "a brevity um you know rather than having huge amount of boiler plate I've only got a tiny amount of boiler plate it's",
    "start": "998480",
    "end": "1004240"
  },
  {
    "text": "as ugly as Sin and if you are not currently if you've not currently Incorporated keyword casts into your",
    "start": "1004240",
    "end": "1009319"
  },
  {
    "text": "coding style u they've only been around since the mid 90s and I know the C++",
    "start": "1009319",
    "end": "1014480"
  },
  {
    "text": "world gets a little geological in its Pace sometimes but um I remember",
    "start": "1014480",
    "end": "1019639"
  },
  {
    "text": "having a discussion with somebody they objected to the use of things like static cast um as opposed to",
    "start": "1019639",
    "end": "1026280"
  },
  {
    "text": "Old sea style casts I said well it just makes my code look ugly and I said well casts are an ugly thing they should not",
    "start": "1026280",
    "end": "1031678"
  },
  {
    "text": "look beautiful they should be if you there are ugly things they should be easy to identify and they should also be very greable um so yeah uh we've got",
    "start": "1031679",
    "end": "1039319"
  },
  {
    "text": "this however we are playing a little fast and loose with the type system so yeah this is this is sort of a a C+",
    "start": "1039319",
    "end": "1045240"
  },
  {
    "text": "approach now",
    "start": "1045240",
    "end": "1049240"
  },
  {
    "text": "from kind of boost the Boost libraries um and Doug Gregor's work originally on",
    "start": "1050360",
    "end": "1056240"
  },
  {
    "text": "this through the uh tr1 technical report one that informed um quite a lot of the",
    "start": "1056240",
    "end": "1062200"
  },
  {
    "text": "library uh additions in C++ 11 um polymorphic function wrappers were",
    "start": "1062200",
    "end": "1068320"
  },
  {
    "text": "added the idea of a universal function pointer effectively very simple idea I can now point to a function I can point",
    "start": "1068320",
    "end": "1075799"
  },
  {
    "text": "to um a member function I can point to an object that masquerades as a function it really doesn't matter as long as I",
    "start": "1075799",
    "end": "1081880"
  },
  {
    "text": "can call it like a function then that's good and I can pass it in there so this idea of the universal function Point are",
    "start": "1081880",
    "end": "1087320"
  },
  {
    "text": "being provided in the library rather than language um there's a sort of a tighter relationship we're going to see in a moment with uh library and language",
    "start": "1087320",
    "end": "1094960"
  },
  {
    "text": "um this is definitely when it comes to standard function it is massively convenient um but I would say uh it's a",
    "start": "1094960",
    "end": "1104080"
  },
  {
    "text": "little bit like sausages if you look at the implementation um it's one of those things of you know many people enjoy",
    "start": "1104080",
    "end": "1110280"
  },
  {
    "text": "eating sausages but if they saw how they were made they'd be uh they'd definitely be uh less keen on it um so don't look",
    "start": "1110280",
    "end": "1117080"
  },
  {
    "text": "at the inside of standard function just use it as a universal function pointer um so what does that give us",
    "start": "1117080",
    "end": "1123919"
  },
  {
    "text": "well the simplest thing is that now we can actually I'm now actually declaring two objects on and off um two timers but",
    "start": "1123919",
    "end": "1131799"
  },
  {
    "text": "what I've got here is I no longer actually have to introduce an intermediate abstraction in the First Command style solution I introduced",
    "start": "1131799",
    "end": "1138080"
  },
  {
    "text": "classes with a lot of boilerplate code in the C style solution I introduced",
    "start": "1138080",
    "end": "1143320"
  },
  {
    "text": "functions which still had a little bit of boilerplate and also played fast and loose with the type system here I don't need anything intermediate whatsoever",
    "start": "1143320",
    "end": "1150240"
  },
  {
    "text": "the bind function does it all for me okay basically it's a partial application um it takes the heating",
    "start": "1150240",
    "end": "1156320"
  },
  {
    "text": "system turn on function and it binds it to the heating object takes the heating system turnoff function binds it to the",
    "start": "1156320",
    "end": "1163200"
  },
  {
    "text": "uh heating object and for later execution and that's what happens so there's a really good decoupling here we",
    "start": "1163200",
    "end": "1169440"
  },
  {
    "text": "are now just working with functions effectively um we can go a step further and use um C++ 11's Lambda signex um",
    "start": "1169440",
    "end": "1178840"
  },
  {
    "text": "where I simply just pass in now this is where the language and the library kind of get well rather the uh uh language",
    "start": "1178840",
    "end": "1185679"
  },
  {
    "text": "and conventions get a little bit closer together um the uh the function function",
    "start": "1185679",
    "end": "1192360"
  },
  {
    "text": "objects are surprisingly uh efficient um there's no real indirection going on",
    "start": "1192360",
    "end": "1197400"
  },
  {
    "text": "with them they generate um the lamb does actually generate simple function objects um from the compiler point of",
    "start": "1197400",
    "end": "1203640"
  },
  {
    "text": "view uh that are available for optimization so they are genuinely objects it's just that you cannot name or talk about their types meaningfully",
    "start": "1203640",
    "end": "1211000"
  },
  {
    "text": "uh and they're very lightweight there's no there's no indirection uh no real IND Direction going on here and this one",
    "start": "1211000",
    "end": "1218039"
  },
  {
    "text": "works really rather nicely and is actually slightly um tidier in some ways than the uh the bind solution which was",
    "start": "1218039",
    "end": "1223640"
  },
  {
    "text": "the kind of the default way of looking at it now when we look at a lot of",
    "start": "1223640",
    "end": "1229159"
  },
  {
    "text": "people will go like hey look lambdas that's that's very functional and of course they are the foundation of",
    "start": "1229159",
    "end": "1234640"
  },
  {
    "text": "functional programming but is also worth pointing out that this solution is both a good object-oriented solution and a",
    "start": "1234640",
    "end": "1240320"
  },
  {
    "text": "good functional uh functionally influenced solution um the idea that being able to pass a function around is",
    "start": "1240320",
    "end": "1247679"
  },
  {
    "text": "a purely functional idea is definitely not the case it's been uh the idea of being able to pass a a block of code",
    "start": "1247679",
    "end": "1253679"
  },
  {
    "text": "around as an object has been present in function in um objectoriented program in",
    "start": "1253679",
    "end": "1259000"
  },
  {
    "text": "since 1967 with the first uh programming language um that could claim to be objectoriented simul simulus 67 uh it",
    "start": "1259000",
    "end": "1266440"
  },
  {
    "text": "was possible to pass blocks of code around but somewhere in there that kind of got lost and we're only just",
    "start": "1266440",
    "end": "1272320"
  },
  {
    "text": "rediscovering it here and if you take it to his logical extreme this wonderful observation from William Cook uh in a",
    "start": "1272320",
    "end": "1278760"
  },
  {
    "text": "paper from about five five six years back on understanding data abstraction Revisited makes the observation that Lambda calculus was the first",
    "start": "1278760",
    "end": "1285159"
  },
  {
    "text": "object-oriented language if you really explore this uh in terms of for lambas with closure um you end up with a",
    "start": "1285159",
    "end": "1291760"
  },
  {
    "text": "perfect object model um although he's wrong about the year was actually older um so",
    "start": "1291760",
    "end": "1297520"
  },
  {
    "text": "basically um C++ 11 onwards allows you to program like it's the 1930s like yes",
    "start": "1297520",
    "end": "1303279"
  },
  {
    "text": "Back to the Future um but there is some joy in c++'s choice of syntax every language goes its",
    "start": "1303279",
    "end": "1308880"
  },
  {
    "start": "1304000",
    "end": "1337000"
  },
  {
    "text": "own way this is actually legal C++ um this is um a Lambda that takes no",
    "start": "1308880",
    "end": "1316360"
  },
  {
    "text": "arguments and does nothing and this is its execution yeah so you can have great fun",
    "start": "1316360",
    "end": "1322880"
  },
  {
    "text": "with this kind of stuff um uh but yeah so that's a legal character sequence",
    "start": "1322880",
    "end": "1328400"
  },
  {
    "text": "feel free in your board moments to see other long character sequences of punctuation you we can have a lot of fun",
    "start": "1328400",
    "end": "1334320"
  },
  {
    "text": "with this um so take this a bit further uh in 97 things there's a a nice",
    "start": "1334320",
    "end": "1342360"
  },
  {
    "start": "1337000",
    "end": "1439000"
  },
  {
    "text": "observation from award gar and apply functional programming principles refers to F referential transparency um",
    "start": "1342360",
    "end": "1348760"
  },
  {
    "text": "desirable property it implies functions consistently yield the same results given the same input irrespective of",
    "start": "1348760",
    "end": "1354200"
  },
  {
    "text": "where and when they are invoked now we often look at this sometimes people approach this from the point of view of",
    "start": "1354200",
    "end": "1360039"
  },
  {
    "text": "mathematical Elegance um but there's another aspect here and",
    "start": "1360039",
    "end": "1365600"
  },
  {
    "text": "this gives us this gives us the idea of reducing mutable State because for something to be consistent in this way",
    "start": "1365600",
    "end": "1372080"
  },
  {
    "text": "you can't go around changing stuff so function evaluation depends less ideally not at all on the side effects of mutable State now I'm not going to",
    "start": "1372080",
    "end": "1379120"
  },
  {
    "text": "advocate immutability for its own sake I'm not even going to Advocate it based on mathematical Purity uh or even",
    "start": "1379120",
    "end": "1386039"
  },
  {
    "text": "fashion it is quite simply um to do with this it goes back to a point I made earlier in terms of cognitive load um",
    "start": "1386039",
    "end": "1393679"
  },
  {
    "text": "understanding the ability to understand something if everything keeps changing you have to keep track of that as a programmer and the more plates you keep",
    "start": "1393679",
    "end": "1400760"
  },
  {
    "text": "spinning in your head the more that are likely to fall so this idea very very simply is we can have this simple",
    "start": "1400760",
    "end": "1407000"
  },
  {
    "text": "concept of flow and that thing is exactly where I left it when something does not change when I leave something",
    "start": "1407000",
    "end": "1413039"
  },
  {
    "text": "it does not change for reasons that are unknown to me or surprising I'm not even talking threaded here you can get all of",
    "start": "1413039",
    "end": "1418320"
  },
  {
    "text": "this in a single threaded uh program the principle of astonishment um uh",
    "start": "1418320",
    "end": "1423679"
  },
  {
    "text": "principle of least astonishment is often violated um through such mutable state so there's this simple idea that the",
    "start": "1423679",
    "end": "1430039"
  },
  {
    "text": "last time I did this I got this result the next time I do I should get the same result uh it allows you to focus more on",
    "start": "1430039",
    "end": "1436440"
  },
  {
    "text": "the code and less on managing the state bertr Meer captured this by saying asking a",
    "start": "1436440",
    "end": "1443200"
  },
  {
    "start": "1439000",
    "end": "1471000"
  },
  {
    "text": "question should not change the answer um I can I'm going to make a bold bold observation here I suspect ber meire",
    "start": "1443200",
    "end": "1449240"
  },
  {
    "text": "doesn't have kids um because this definitely is not a child property it's a property of mathematics but not of",
    "start": "1449240",
    "end": "1455400"
  },
  {
    "text": "children um but there's another observation that's sort of a follow on U which is um asking uh nor should asking",
    "start": "1455400",
    "end": "1462000"
  },
  {
    "text": "it twice ditto for children okay um but there is this idea that uh you keep",
    "start": "1462000",
    "end": "1467200"
  },
  {
    "text": "asking the same thing and you get the same answer there is a consistency",
    "start": "1467200",
    "end": "1472399"
  },
  {
    "start": "1471000",
    "end": "1573000"
  },
  {
    "text": "here so the most obvious entry point into C++ on this one is going to be something like const and con correctness",
    "start": "1472399",
    "end": "1479880"
  },
  {
    "text": "um again there's a that's something that people find they struggle with depending",
    "start": "1479880",
    "end": "1485440"
  },
  {
    "text": "on their background um I have to say that through accidents of early exposure",
    "start": "1485440",
    "end": "1491320"
  },
  {
    "text": "to functional programming ideas I found it a very comfortable thing to slip into when I worked uh when I started working",
    "start": "1491320",
    "end": "1497080"
  },
  {
    "text": "with C++ the idea and indeed C c89 the idea that I was able to say look this",
    "start": "1497080",
    "end": "1502440"
  },
  {
    "text": "one shouldn't change and I know it's not a hard and fast promise in a language that supports things like um void",
    "start": "1502440",
    "end": "1508440"
  },
  {
    "text": "pointers and um memet it's not a hard and fast promise but it's a fairly good promise and you can do an awful lot to",
    "start": "1508440",
    "end": "1514799"
  },
  {
    "text": "have it supported and thrown back at you if you violate it and it's also an act of communication that is",
    "start": "1514799",
    "end": "1520080"
  },
  {
    "text": "enforceable um but paring everything around we also care about references um",
    "start": "1520080",
    "end": "1527320"
  },
  {
    "text": "some objects get quite Lar large we would rather not copy them around by um uh by value if they get too large so",
    "start": "1527320",
    "end": "1533080"
  },
  {
    "text": "therefore we pass things by constant reference uh C++ 11 onwards allows you to um use r value references uh and",
    "start": "1533080",
    "end": "1542320"
  },
  {
    "text": "therefore mitigate certain copying costs again this puts a lot more load on uh",
    "start": "1542320",
    "end": "1547760"
  },
  {
    "text": "many developers if they're developing new abstractions but I think one of the most comfortable things is that if",
    "start": "1547760",
    "end": "1553120"
  },
  {
    "text": "you're using just standard Library um this has been done for you if you're passing vectors around and returning",
    "start": "1553120",
    "end": "1558799"
  },
  {
    "text": "them by value you are not paying the cost that you think you are by looking at the code uh and this is a really",
    "start": "1558799",
    "end": "1564600"
  },
  {
    "text": "important point because sometimes people will distort their coding habits because of anticipated or mythical um uh",
    "start": "1564600",
    "end": "1571520"
  },
  {
    "text": "performance problems but let's take this a step further how do we isolate code for this",
    "start": "1571520",
    "end": "1577600"
  },
  {
    "start": "1573000",
    "end": "1659000"
  },
  {
    "text": "referential transparency idea one aspect is immutable value Define a value object",
    "start": "1577600",
    "end": "1582760"
  },
  {
    "text": "type whose instances are immutable but C++ is a copy based language so although we care about this",
    "start": "1582760",
    "end": "1589000"
  },
  {
    "text": "immutability at one level there's another way of achieving isolation and the other way of achieving",
    "start": "1589000",
    "end": "1594159"
  },
  {
    "text": "isolation is by using copied values again this is one of those things I want to pick up from a comment I made earlier",
    "start": "1594159",
    "end": "1600279"
  },
  {
    "text": "about uh the differences in languages and where they start from if I'm working in something like",
    "start": "1600279",
    "end": "1606000"
  },
  {
    "text": "Java it's more natural to use this because Java is a reference-based language everything is pointed to I'm",
    "start": "1606000",
    "end": "1611960"
  },
  {
    "text": "passing everything around by sharing it that's how I communicate that's its default mode this is actually quite",
    "start": "1611960",
    "end": "1617440"
  },
  {
    "text": "uncomfortable in Java and requires um programmers to remember to clone objects",
    "start": "1617440",
    "end": "1623200"
  },
  {
    "text": "and it's not particularly efficient you keep hitting the Heap all the time so this is the natural way of expressing that C++ has a default mode um of saying",
    "start": "1623200",
    "end": "1632799"
  },
  {
    "text": "I copy if you if you name a type then it gets copied and that gives us a certain isolation in other words the idea that",
    "start": "1632799",
    "end": "1639000"
  },
  {
    "text": "if I have um if I am an object that has State you ask me a question I can return you a copy of that and you can do what",
    "start": "1639000",
    "end": "1645320"
  },
  {
    "text": "you like with the copy but it will not affect me similarly if were immutable I would have an isolation there as well so",
    "start": "1645320",
    "end": "1650640"
  },
  {
    "text": "there's this idea these are two techniques for isolating things make a copy of something um or make it",
    "start": "1650640",
    "end": "1655799"
  },
  {
    "text": "unchangeable it's something I'm going to pick up um this afternoon so from a C++ point of view I'm I'm going to pick on",
    "start": "1655799",
    "end": "1662080"
  },
  {
    "start": "1659000",
    "end": "2171000"
  },
  {
    "text": "um my all favorite the uh the date class um dates are always I I do this for a",
    "start": "1662080",
    "end": "1668480"
  },
  {
    "text": "number of reasons one everybody's familiar with the domain two very few people are actually really deeply familiar with the domain um I'm not",
    "start": "1668480",
    "end": "1675120"
  },
  {
    "text": "going to do a full date class that's that's great fun but well beyond the scope of uh uh this",
    "start": "1675120",
    "end": "1680519"
  },
  {
    "text": "talk so there's only one true ordering for the",
    "start": "1680519",
    "end": "1685559"
  },
  {
    "text": "Constructor uh I'm going to pass in three integers I could use types to distinguish those but that's um that's",
    "start": "1685559",
    "end": "1690799"
  },
  {
    "text": "not relevant to this example but there's only one true ordering that's iso8601 year month day if you're using anything",
    "start": "1690799",
    "end": "1696559"
  },
  {
    "text": "else you're wrong okay it's as simple as that um there's three orderings big endian little Indian and middle endian U",
    "start": "1696559",
    "end": "1703960"
  },
  {
    "text": "Middle endian is what is used in North America and it was a reminder of why we have an Atlantic Ocean okay it's it's",
    "start": "1703960",
    "end": "1709760"
  },
  {
    "text": "it's an isolation War um but here uh year month day um I'm going to let the",
    "start": "1709760",
    "end": "1716200"
  },
  {
    "text": "compiler default the copying uh operations and others um going to get the year get the month get the day in",
    "start": "1716200",
    "end": "1721880"
  },
  {
    "text": "the month set the year set the month set the day in the month this is um this is a kind of a habit that people have um",
    "start": "1721880",
    "end": "1730279"
  },
  {
    "text": "for every getter they have a Setter and they don't even know they're doing it in fact sometimes we we optimize doing the",
    "start": "1730279",
    "end": "1735480"
  },
  {
    "text": "wrong thing by allowing IDs and editors like yeah generate me a pair of those people don't even know they're doing it",
    "start": "1735480",
    "end": "1740960"
  },
  {
    "text": "when I run when I run classes I'm often fascinated by you know s of ask somebody well you've got a seter for that why is",
    "start": "1740960",
    "end": "1747640"
  },
  {
    "text": "it oh I didn't realize I had that there they don't even know they just go into kind of like a a fog of just like autot",
    "start": "1747640",
    "end": "1753200"
  },
  {
    "text": "typing I've got a I've got a I've got some data member I must have a getter and a Setter I've even seen a coding convention that says for every data",
    "start": "1753200",
    "end": "1760600"
  },
  {
    "text": "member you must have a getter and a seta yeah it's a it's a you know an encoded way of doing doing the wrong thing badly",
    "start": "1760600",
    "end": "1767840"
  },
  {
    "text": "so so yeah just because you have a GTO doesn't mean you should have a matching seter so I'm going to sort of we let's",
    "start": "1767840",
    "end": "1773159"
  },
  {
    "text": "let's tidy this one up slightly and we'll have a seter let's treat this transactionally typically you don't just",
    "start": "1773159",
    "end": "1778519"
  },
  {
    "text": "tweak dates you normally have something that you want to do you don't want to go through intermediate states that are awkward either um the idea is for",
    "start": "1778519",
    "end": "1785159"
  },
  {
    "text": "example if I have the 30th of January and I decide that I want to move this to February clearly this there's a",
    "start": "1785159",
    "end": "1791279"
  },
  {
    "text": "sequence dependency there if I try and set the month to February uh whilst I've",
    "start": "1791279",
    "end": "1796480"
  },
  {
    "text": "left the day and the month at 30 then that's invalid but if I swap the two operations around then suddenly it",
    "start": "1796480",
    "end": "1801679"
  },
  {
    "text": "becomes valid it case well hang on this is a bit awkward we don't want to get we don't want to get that situation I want",
    "start": "1801679",
    "end": "1807320"
  },
  {
    "text": "to treat the data as a whole so we end up with a set that's a lot of people will walk into that and you get today's",
    "start": "1807320",
    "end": "1814279"
  },
  {
    "text": "date set like this what many people don't realize is they've already got this operation we don't need this we can",
    "start": "1814279",
    "end": "1820760"
  },
  {
    "text": "actually restrict the mutability in other words what I'd like is the date class to be I'm going to leave one",
    "start": "1820760",
    "end": "1826640"
  },
  {
    "text": "mutable operation and it's actually the one generated by the compiler um we've already got it it's",
    "start": "1826640",
    "end": "1835480"
  },
  {
    "text": "called the assignment operator if I treat the assignment as a rebinding then everything else is about the object it's about",
    "start": "1835480",
    "end": "1842519"
  },
  {
    "text": "asking it questions you get to create it you get to ask it questions the only other thing you can do is aign and",
    "start": "1842519",
    "end": "1848039"
  },
  {
    "text": "that's that's already taken care of if you're worried about validation the validation happens in the Constructor we don't need to repeat the validation code",
    "start": "1848039",
    "end": "1855399"
  },
  {
    "text": "validation code takes up a lot of space when people have all these indiv ID Setters and yet I can achieve exactly what I did before but it's now simpler",
    "start": "1855399",
    "end": "1863760"
  },
  {
    "text": "but I can also take this a step further I mean we can um if we start playing around with C++ 11 syntax we can start",
    "start": "1863760",
    "end": "1870080"
  },
  {
    "text": "uh getting it really quite light um the only other thing I would suggest here on",
    "start": "1870080",
    "end": "1875639"
  },
  {
    "text": "a point of so so this is kind of basically my recommendation you're going to start creating value types where",
    "start": "1875639",
    "end": "1881159"
  },
  {
    "text": "possible don't have state modifiers treat them as they were as if the only",
    "start": "1881159",
    "end": "1886760"
  },
  {
    "text": "operation that you can change is to rebind in other words treat assignment as rebinding um but also I'm going to say",
    "start": "1886760",
    "end": "1893679"
  },
  {
    "text": "get rid of the noise um get something is an imperative with an expected side effect this programming this this little",
    "start": "1893679",
    "end": "1901320"
  },
  {
    "text": "naming thing that we've been doing um I I found an article that I wrote In",
    "start": "1901320",
    "end": "1909039"
  },
  {
    "text": "1995 where I was complaining about the prevalence of people using get as a prefix it has only got worse since the",
    "start": "1909120",
    "end": "1915440"
  },
  {
    "text": "'90s um people use get as if it's some kind of natural query but if you think about it",
    "start": "1915440",
    "end": "1921760"
  },
  {
    "text": "in English that's not its role get is not a query it does not mean go go and do something without side effect it does",
    "start": "1921760",
    "end": "1928360"
  },
  {
    "text": "not mean ask a question okay um We've Ended up with this rather dysfunctional",
    "start": "1928360",
    "end": "1933799"
  },
  {
    "text": "noise prepended to all of our functions if I get money from a cash machine",
    "start": "1933799",
    "end": "1938919"
  },
  {
    "text": "there's a huge great side effect on my bank account disappointingly if you get married there is a state change in your",
    "start": "1938919",
    "end": "1944559"
  },
  {
    "text": "life okay it is not without side effect so it's it's not particularly helpful",
    "start": "1944559",
    "end": "1950320"
  },
  {
    "text": "either and so therefore if you want to try and embrace a more functional",
    "start": "1950320",
    "end": "1955639"
  },
  {
    "text": "approach then I'm going to make a very simple suggestion stop using imperative names get is an imperative name if you",
    "start": "1955639",
    "end": "1961240"
  },
  {
    "text": "want the code to feel functional you got to get your head in the right space language is strongly influential and what's interesting is the minute I drop",
    "start": "1961240",
    "end": "1967399"
  },
  {
    "text": "the get this simultaneously becomes better functional code and better object-oriented code yeah we get rid of",
    "start": "1967399",
    "end": "1973080"
  },
  {
    "text": "the object-oriented assembler that plagues so many code bases Okay so",
    "start": "1973080",
    "end": "1978200"
  },
  {
    "text": "that's great if I want to change the whole date but normally people don't want to just change the whole date and they will object to this and say well",
    "start": "1978200",
    "end": "1984200"
  },
  {
    "text": "look that I I see what you're doing there but actually I do want to just change the month I want to deal with the",
    "start": "1984200",
    "end": "1990720"
  },
  {
    "text": "first of every month I want to cycle through the month so I really just want to change one field effectively well",
    "start": "1990720",
    "end": "1996000"
  },
  {
    "text": "okay uh let's do that so what we're going to do here is um",
    "start": "1996000",
    "end": "2001559"
  },
  {
    "text": "we're going to just say Okay I want that date with the year as something else or with the month as something else or with",
    "start": "2001559",
    "end": "2007360"
  },
  {
    "text": "the date day in the month or something else rather than change that state we",
    "start": "2007360",
    "end": "2012399"
  },
  {
    "text": "ask a question what would the day be if we did that um so this style um is kind",
    "start": "2012399",
    "end": "2020000"
  },
  {
    "text": "of the Builder style we see that in a number of fluent apis uh it's very very common but it is sometimes it's not been",
    "start": "2020000",
    "end": "2026159"
  },
  {
    "text": "as embraced in this respect as I as I think um uh it could be people often use",
    "start": "2026159",
    "end": "2031760"
  },
  {
    "text": "it really for building complex option objects that's where they think about it uh or creating full dsls but I'm going",
    "start": "2031760",
    "end": "2039039"
  },
  {
    "text": "to say that every small class every single value type is its own little language um you need to kind of explore",
    "start": "2039039",
    "end": "2044440"
  },
  {
    "text": "this idea of how do I talk about the values and their relationships that's what you want to talk about the relationships between values hence",
    "start": "2044440",
    "end": "2051280"
  },
  {
    "text": "functions that is what they are um so we end up with a style that um looks a",
    "start": "2051280",
    "end": "2056398"
  },
  {
    "text": "little bit like that um and should we not wish to reinvoke the Constructor",
    "start": "2056399",
    "end": "2061679"
  },
  {
    "text": "which that call is doing there we if we wish not to reinvoke the Constructor if actually turns out that the result",
    "start": "2061679",
    "end": "2067720"
  },
  {
    "text": "result of the operation is exactly the same as the current date then we can put that in the point is that that's hidden",
    "start": "2067720",
    "end": "2073320"
  },
  {
    "text": "behind the scene and we can elaborate it with year with month with day and month and so on so we end up with some very",
    "start": "2073320",
    "end": "2078760"
  },
  {
    "text": "very simple Styles um and it's really a case of what we need to do is when we say we often talk about abstractions we",
    "start": "2078760",
    "end": "2086118"
  },
  {
    "text": "say um for my data types for the values um uh and knowledge that my code has",
    "start": "2086119",
    "end": "2092638"
  },
  {
    "text": "during runtime what are the things I can do with this object and perhaps do is a bit",
    "start": "2092639",
    "end": "2100440"
  },
  {
    "text": "misleading that's a very strong imperative and we tend to default to thinking about um uh the idea of uh do",
    "start": "2100440",
    "end": "2108720"
  },
  {
    "text": "having a side effect and we think of many objects as being State machines which has its value but perhaps a",
    "start": "2108720",
    "end": "2115079"
  },
  {
    "text": "different way of approaching this particularly for Value style objects is to not think about doing but what uh put",
    "start": "2115079",
    "end": "2120920"
  },
  {
    "text": "it another way um what questions can I ask of this what conversations can I have with this object that puts you in a",
    "start": "2120920",
    "end": "2126240"
  },
  {
    "text": "slightly different frame uh and you're less you end up not dictating the terms of things you end up having a a",
    "start": "2126240",
    "end": "2132760"
  },
  {
    "text": "reasonable side effect free conversation um that is based on Transformations which is exactly what's going on here",
    "start": "2132760",
    "end": "2139560"
  },
  {
    "text": "now as you're fully aware most code doesn't just deal with date examples um you normally have in fact most most most",
    "start": "2139560",
    "end": "2148320"
  },
  {
    "text": "state in code is inside uh collections inside containers of things how does",
    "start": "2148320",
    "end": "2154440"
  },
  {
    "text": "this kind of thinking apply to that because sometimes people feel they hit a brick wall it's yeah I see the individual values I can support these",
    "start": "2154440",
    "end": "2161839"
  },
  {
    "text": "immutable ideas I can have this idea of a much more purer style but I need containers of this stuff I need vectors",
    "start": "2161839",
    "end": "2168440"
  },
  {
    "text": "of this stuff I need maps of this stuff um so here's the question um containers",
    "start": "2168440",
    "end": "2175839"
  },
  {
    "text": "how do we do this so I'm going to imagine so this is not a real Library I'm just going to sort of put this out",
    "start": "2175839",
    "end": "2181200"
  },
  {
    "text": "there as I I've doodled around with this on my uh on my machine in the past I'm just going to put this one out there is",
    "start": "2181200",
    "end": "2187160"
  },
  {
    "text": "here's an idea U I'm going to joke you know jokingly called the FTL um uh",
    "start": "2187160",
    "end": "2192280"
  },
  {
    "text": "functional template Library as opposed to the STL what would be involved in such a thing if I were to adopt a",
    "start": "2192280",
    "end": "2198400"
  },
  {
    "text": "functional style what would be involved uh well I'm going to have um all my",
    "start": "2198400",
    "end": "2204000"
  },
  {
    "text": "value types uh if you ask for the value types it's always going to be const um iterators we only have one iterator type",
    "start": "2204000",
    "end": "2209680"
  },
  {
    "text": "there are no const iterators because there's no difference between a const iterator and an iterator keep everything really simple um you can ask a container",
    "start": "2209680",
    "end": "2217880"
  },
  {
    "text": "if it's empty it size begin the end the only non-constant operation we're going to offer is the assignment operator and",
    "start": "2217880",
    "end": "2225440"
  },
  {
    "text": "again I'm going to use the philosophy of rebinding okay what's that going to look like we're basically saying the",
    "start": "2225440",
    "end": "2230839"
  },
  {
    "text": "container is not going to change well I'm going to pick a very simple example to start with um a set um and this is a",
    "start": "2230839",
    "end": "2237560"
  },
  {
    "text": "truly immutable set once you've set it you cannot change anything and there's nothing else that you can do with it except ask it questions and relatively",
    "start": "2237560",
    "end": "2244160"
  },
  {
    "text": "simple questions here um I'm going to choose uh a an",
    "start": "2244160",
    "end": "2250000"
  },
  {
    "text": "optimal representation in the sense of I'm going to uh represent it as an array of its value members um therefore it's",
    "start": "2250000",
    "end": "2257280"
  },
  {
    "text": "very cache friendly uh it's going to be in sorted order um therefore compatible with the idea that you find the set in",
    "start": "2257280",
    "end": "2263560"
  },
  {
    "text": "the STL um and you can find things you can count things you can you know uh uh",
    "start": "2263560",
    "end": "2269760"
  },
  {
    "text": "uh you can do the basic search operations um and we can initialize it",
    "start": "2269760",
    "end": "2275000"
  },
  {
    "text": "I'm going to use the C++ 11 uh initializer list form there in fact that's essential to this approach I",
    "start": "2275000",
    "end": "2280760"
  },
  {
    "text": "don't need a builder approach to build this I'm basically going to say this is great for reference data in other words",
    "start": "2280760",
    "end": "2286040"
  },
  {
    "text": "I have a set of things that's never going to change and I would just constantly like to just check whether something's there there's no tree",
    "start": "2286040",
    "end": "2291680"
  },
  {
    "text": "structures involved there's no hashing involved this is very very friendly and very fast to look up I just can't change",
    "start": "2291680",
    "end": "2297280"
  },
  {
    "text": "anything nonetheless there are cases even in regular code where um without transforming when I say regular code I",
    "start": "2297280",
    "end": "2303720"
  },
  {
    "text": "mean regular C++ where this uh turns out to be useful let's another example let's have an array an array",
    "start": "2303720",
    "end": "2312520"
  },
  {
    "text": "actually looks very much the same uh but I can index into it um and again this is completely immutable um once you've set",
    "start": "2312520",
    "end": "2320200"
  },
  {
    "text": "the array you cannot change its content its size or anything like that and this is logically similar to the C++ uh 11 um",
    "start": "2320200",
    "end": "2328960"
  },
  {
    "text": "array uh template which is actually mostly useless I found um uh part of its",
    "start": "2328960",
    "end": "2334640"
  },
  {
    "text": "reason for existence was to allow simple uh initialization but we find that it's",
    "start": "2334640",
    "end": "2339960"
  },
  {
    "text": "less useful than we hoped okay this is all good but you you can see that this only applies to a very",
    "start": "2339960",
    "end": "2346359"
  },
  {
    "text": "very restricted range of things that I want to do I really have to know the values that I want uh when I create an",
    "start": "2346359",
    "end": "2353560"
  },
  {
    "text": "array or a set and I cannot change them I cannot change anything about it there's no transformation here that is",
    "start": "2353560",
    "end": "2358720"
  },
  {
    "text": "going to be cheap so how do we get around this well I don't propose to give you a um a full",
    "start": "2358720",
    "end": "2365280"
  },
  {
    "start": "2360000",
    "end": "2448000"
  },
  {
    "text": "introduction to persistent data structures I'll give you a light introduction to persistent data structures uh persistent data structure",
    "start": "2365280",
    "end": "2371440"
  },
  {
    "text": "is a data structure that always preserves the previous version of itself when it is modified such data structures are",
    "start": "2371440",
    "end": "2378359"
  },
  {
    "text": "effectively immutable as their operations do not visibly update the structure in place but instead always",
    "start": "2378359",
    "end": "2383440"
  },
  {
    "text": "yield a new updated structure there is a slight of hand here in other words there's a very a neat trick that we're",
    "start": "2383440",
    "end": "2390000"
  },
  {
    "text": "basically saying if you hold a container",
    "start": "2390000",
    "end": "2395079"
  },
  {
    "text": "and somebody else comes along and maybe pushes something into it or pop something from it they will get a version of that that is the popped or",
    "start": "2395079",
    "end": "2401560"
  },
  {
    "text": "the pushed version but you will retain your version you will retain your view they will actually get a effectively new",
    "start": "2401560",
    "end": "2408000"
  },
  {
    "text": "object but the way that it's done is that nobody can ever prove without a debugger that actually new stuff and",
    "start": "2408000",
    "end": "2414560"
  },
  {
    "text": "side effects happened okay it's it's a beautiful illusion um not to be confused with the other use of the word",
    "start": "2414560",
    "end": "2420800"
  },
  {
    "text": "persistence although that said there is an interesting idea that I observed um recently that persistent data structures",
    "start": "2420800",
    "end": "2427359"
  },
  {
    "text": "is we often talk about them in terms of concurrency but even without concurrency they make sense because they are all",
    "start": "2427359",
    "end": "2433319"
  },
  {
    "text": "about decoupling um uh temporal decoupling decoupling State across time whether that time is affected by",
    "start": "2433319",
    "end": "2439599"
  },
  {
    "text": "concurrency or whether that time is later points of execution they are bound um in the same uh same sort of ethical",
    "start": "2439599",
    "end": "2447440"
  },
  {
    "text": "set okay so what I'm going to do now is I'm going to look at a simple Vector um this Vector is based on contiguous",
    "start": "2447440",
    "end": "2453560"
  },
  {
    "start": "2448000",
    "end": "2706000"
  },
  {
    "text": "memory as the name Vector implies um we uh continuous memory and um usual",
    "start": "2453560",
    "end": "2460520"
  },
  {
    "text": "operations empty size it's array based as we can see down there I can subscript I can ask the front and the back and I",
    "start": "2460520",
    "end": "2466400"
  },
  {
    "text": "can get the raw representation um but there are two apparent modifier operations or modifier",
    "start": "2466400",
    "end": "2472880"
  },
  {
    "text": "related operations pop front and pop back um these are constant time operations",
    "start": "2472880",
    "end": "2480079"
  },
  {
    "text": "and I'm going to maintain the ethos of the STL these are constant time operations uh and so it turns out that",
    "start": "2480079",
    "end": "2485800"
  },
  {
    "text": "unlike the TL um the there is a pop front here that can be done in constant",
    "start": "2485800",
    "end": "2492359"
  },
  {
    "text": "time so similar philosophy but we're going to see the operation say slightly different but for just one moment I'm",
    "start": "2492359",
    "end": "2498960"
  },
  {
    "text": "going to concentrate on this um I'm going to change the names um because",
    "start": "2498960",
    "end": "2505000"
  },
  {
    "text": "those names have a radically different effect if somebody comes from the STL and looks for pop front they're going to",
    "start": "2505000",
    "end": "2510280"
  },
  {
    "text": "be surprised that this does not do what pop front um expects they expect it to do popf front should change the state of",
    "start": "2510280",
    "end": "2516480"
  },
  {
    "text": "the current object they are working from that is an expectation that has been set um since the early",
    "start": "2516480",
    "end": "2522040"
  },
  {
    "text": "1990s um but it also there's another Point here that I mentioned earlier if you want to you know pop back is an",
    "start": "2522040",
    "end": "2528400"
  },
  {
    "text": "imperative what I'm asking really is something different this Vector I would like to see the popped front version",
    "start": "2528400",
    "end": "2535319"
  },
  {
    "text": "it's more of an adjective driven phrase than a verb driven phrase so I'm going to use a different but clearly related",
    "start": "2535319",
    "end": "2541640"
  },
  {
    "text": "name but also one that is not an imperative uh to distinguish these so you get back now you get back a new",
    "start": "2541640",
    "end": "2548160"
  },
  {
    "text": "Vector is that is that going to be expensive well not not really um um because what we've got here is in the",
    "start": "2548160",
    "end": "2555839"
  },
  {
    "text": "representation we've got um basically pointers iterators showing you where the",
    "start": "2555839",
    "end": "2560880"
  },
  {
    "text": "beginning and the ending are and so therefore you can pop front and pop back to your heart's content and share the representation all that's happening in",
    "start": "2560880",
    "end": "2567839"
  },
  {
    "text": "each pop each pop front and pop back operation is a return of those three Return of the anchor and the from and",
    "start": "2567839",
    "end": "2573599"
  },
  {
    "text": "the until and that's all good so what's this looking like in memory",
    "start": "2573599",
    "end": "2578720"
  },
  {
    "text": "this going to look like this I'm going to end up with say a variable a we initialize our Vector with four values b",
    "start": "2578720",
    "end": "2585680"
  },
  {
    "text": "equals a okay we're now aliasing now an important Point here and one of the things that C++ favors in contrast to a",
    "start": "2585680",
    "end": "2592720"
  },
  {
    "text": "number of other languages um is that I can maintain the solution",
    "start": "2592720",
    "end": "2598839"
  },
  {
    "text": "quite successfully thanks to the use of const um because I've said that it only contains const values there's no way",
    "start": "2598839",
    "end": "2605520"
  },
  {
    "text": "that B can make changes except by doing the extreme violence that is available to us in C++ but that's generally",
    "start": "2605520",
    "end": "2611480"
  },
  {
    "text": "visible through costs um but there's this idea that actually by default there is nothing that somebody can do to",
    "start": "2611480",
    "end": "2617319"
  },
  {
    "text": "change the view that a has of this this is very different to something like Java JavaScript and most C stuff um where by",
    "start": "2617319",
    "end": "2624079"
  },
  {
    "text": "default you have no ability to say by the way the contents of this cannot change the best you can do is offer a",
    "start": "2624079",
    "end": "2629880"
  },
  {
    "text": "comment please don't put objects in here that could be changed via other means the point here is that we've actually got a type level guarantee um",
    "start": "2629880",
    "end": "2637760"
  },
  {
    "text": "uh about how we work it does it does work with the way that we work now more interestingly is what happens when we",
    "start": "2637760",
    "end": "2643839"
  },
  {
    "text": "pop it C equals a pop front we get back the version that looks like this as far as the user of C is concerned they've",
    "start": "2643839",
    "end": "2650040"
  },
  {
    "text": "now got a new Vector that is only size three the user of a does not see any change B sees the same thing as well",
    "start": "2650040",
    "end": "2658040"
  },
  {
    "text": "that's great for popping but sometimes we want to push now the only way to get that sorted is to use a linked",
    "start": "2658040",
    "end": "2665440"
  },
  {
    "text": "representation so we can uh we can link this out and we can end up with a we can do the B thing again we can do the",
    "start": "2665440",
    "end": "2671880"
  },
  {
    "text": "popped front but now this is the great illusion um if we push then what we end",
    "start": "2671880",
    "end": "2677480"
  },
  {
    "text": "up with is um a new prepended head and if somebody else pushes on the front of",
    "start": "2677480",
    "end": "2683160"
  },
  {
    "text": "it you end up with a rather beautiful tree in memory um the idea is that everybody's sharing representation and",
    "start": "2683160",
    "end": "2688800"
  },
  {
    "text": "there's no side effect without doing violence with the type system there's no side effect that they can induce uh that",
    "start": "2688800",
    "end": "2694920"
  },
  {
    "text": "will undermine this illusion so the represent presentation sharing that guarantee uh that gives us some kind of",
    "start": "2694920",
    "end": "2700559"
  },
  {
    "text": "guarantee of immutability is absolutely profound uh in this it's also not a new idea um uh this idea is uh really rather",
    "start": "2700559",
    "end": "2708800"
  },
  {
    "text": "old uh I quite like old books this is my copy of the list 1.5 programers manual",
    "start": "2708800",
    "end": "2713839"
  },
  {
    "text": "uh it was originally published in the early 1960s um it turns out we knew this in",
    "start": "2713839",
    "end": "2719200"
  },
  {
    "text": "the past I did have a brief Obsession well two brief obsessions with lisp at different points in my programming",
    "start": "2719200",
    "end": "2724240"
  },
  {
    "text": "career never never never programmed commercially but uh I did uh point out I have a deep fondness for the list model",
    "start": "2724240",
    "end": "2729960"
  },
  {
    "text": "it is simple elegant and something with which all developers should have an infatuation at least once in their programming life because it will change",
    "start": "2729960",
    "end": "2735280"
  },
  {
    "text": "the way that you think just have a you can have the infatuation in private you don't have to make it public um you can",
    "start": "2735280",
    "end": "2740319"
  },
  {
    "text": "you can do that and you know if you if you think lisps a bit old hat go for closure you nobody's watching um so",
    "start": "2740319",
    "end": "2748359"
  },
  {
    "text": "there is this however um and actually this is part of an article series that I",
    "start": "2748359",
    "end": "2753520"
  },
  {
    "text": "wrote uh when I was uh writing for the um uh uh C C++ users Journal uh it's",
    "start": "2753520",
    "end": "2760359"
  },
  {
    "text": "also a timely reminder I was always told never write articles that have part numbers in",
    "start": "2760359",
    "end": "2766040"
  },
  {
    "text": "them um I used to and I I had two columns for different magazines where I submitted such and such part one and the",
    "start": "2766040",
    "end": "2773720"
  },
  {
    "text": "editor came back and said I'm going to change that title I said why he said well I don't know that you're not going to get run over by a bus uh or that",
    "start": "2773720",
    "end": "2781440"
  },
  {
    "text": "we're not going to fold as a magazine or that you never submit the second part or something happens you know just it",
    "start": "2781440",
    "end": "2786920"
  },
  {
    "text": "should look reasonably self-contained so the only time I've ever successfully published something that's called that",
    "start": "2786920",
    "end": "2792440"
  },
  {
    "text": "has part one in it is this one and I've never wrote part two um so I left people",
    "start": "2792440",
    "end": "2798920"
  },
  {
    "text": "hanging there for a bit and in fact there's and I wrote as this class called there was a list I was very pleased with",
    "start": "2798920",
    "end": "2804960"
  },
  {
    "text": "that the idea of a list that is list-like in C++ very I probably put more effort into the name than anything",
    "start": "2804960",
    "end": "2810079"
  },
  {
    "text": "else but there is an important point there there is a dangling reference here to part two part two never exists",
    "start": "2810079",
    "end": "2818119"
  },
  {
    "text": "um and this leads us into one thing if you have been watching this closely you you may have noticed there may be a",
    "start": "2818119",
    "end": "2824040"
  },
  {
    "text": "little problem let me just sh let's just show what the list let's just reclaim the idea of a list which is effectively",
    "start": "2824040",
    "end": "2830480"
  },
  {
    "text": "a forward list um this is how we might represent it um that list that I showed you um",
    "start": "2830480",
    "end": "2837359"
  },
  {
    "text": "that is uh that that holds um uh const values there's popped front and pushed",
    "start": "2837359",
    "end": "2842880"
  },
  {
    "text": "front there's no back operations and we've got the classic kind of Link structure in there it's a singly link",
    "start": "2842880",
    "end": "2848240"
  },
  {
    "text": "list um I put the length in there because you can actually reliably hold on to the length here whereas that's not",
    "start": "2848240",
    "end": "2853920"
  },
  {
    "text": "the case with forward list um in uh the standard but if you're watching",
    "start": "2853920",
    "end": "2859720"
  },
  {
    "text": "carefully there is a little bit of a problem that problem is that in not",
    "start": "2859720",
    "end": "2865559"
  },
  {
    "text": "single one of the slides that I have shown you have I talked about there's this question I've got raw pointers here",
    "start": "2865559",
    "end": "2870760"
  },
  {
    "text": "have I talked about the question of um memory management which is the the you",
    "start": "2870760",
    "end": "2876240"
  },
  {
    "text": "know the classic the classic issue that people didn't come to with data structures such as this um and so there",
    "start": "2876240",
    "end": "2884160"
  },
  {
    "text": "are basically two philosophies um and two philosophies of how you deal with",
    "start": "2884160",
    "end": "2889359"
  },
  {
    "text": "objects you're no longer using um",
    "start": "2889359",
    "end": "2894440"
  },
  {
    "start": "2896000",
    "end": "3084000"
  },
  {
    "text": "and it turns out that Shakespeare um carefully and cunningly",
    "start": "2896640",
    "end": "2904359"
  },
  {
    "text": "coded these two philosophies in into Hamlet now you thought that this was the",
    "start": "2904359",
    "end": "2909880"
  },
  {
    "text": "tragedy of Hamlet Prince of Denmark actually this was a discussion about memory management models very cunningly",
    "start": "2909880",
    "end": "2915800"
  },
  {
    "text": "encoded Hamlet favors garbage collection yay from the table of my",
    "start": "2915800",
    "end": "2921040"
  },
  {
    "text": "memory I'll wipe away all trivial Fone records he favors that kind of approach now where does C++ stand on this one",
    "start": "2921040",
    "end": "2926800"
  },
  {
    "text": "that's an interesting one um and there is a funny enough I'm I'm kind",
    "start": "2926800",
    "end": "2934240"
  },
  {
    "text": "of glad Sean's in the room um because we were on a panel in Las Vegas 10 years ago 11 years ago was it yeah something",
    "start": "2934240",
    "end": "2941400"
  },
  {
    "text": "like it was another decade it a long time ago in a galaxy far far away um and",
    "start": "2941400",
    "end": "2946760"
  },
  {
    "text": "there was a question about the future of C++ what things you should you see added and that was in those hey days of",
    "start": "2946760",
    "end": "2951960"
  },
  {
    "text": "optimism where people actually thought that um uh C++ o x uh the value of x would",
    "start": "2951960",
    "end": "2958400"
  },
  {
    "text": "actually be decimal and there would be a 2008 or 2009 standard um but I mentioned at the time",
    "start": "2958400",
    "end": "2964839"
  },
  {
    "text": "I said there are four things the if C++ is cons to be considered a systems programming language which is its heart",
    "start": "2964839",
    "end": "2971760"
  },
  {
    "text": "its Center as it were if it is to continue to be considered a system programming language then there are four",
    "start": "2971760",
    "end": "2977319"
  },
  {
    "text": "things that it must have one of them is concurrency it must be able to support a",
    "start": "2977319",
    "end": "2982880"
  },
  {
    "text": "Threading model because Systems Support threading models increasingly therefore having a systems programming language",
    "start": "2982880",
    "end": "2988880"
  },
  {
    "text": "that has no view on this um is ridiculous so I said that's an absolute must um another one was Dynamic loading",
    "start": "2988880",
    "end": "2997280"
  },
  {
    "text": "um because again um operating system architectures have been doing this for decades to have a systems programming",
    "start": "2997280",
    "end": "3004000"
  },
  {
    "text": "language that does not have a consistent philosophy of uh Dynamic linking again",
    "start": "3004000",
    "end": "3009040"
  },
  {
    "text": "does not make sense third one was um a decent system of reflection there are",
    "start": "3009040",
    "end": "3016160"
  },
  {
    "text": "large classes of architecture that are enabled and simplified um through the presence of reflection and these have",
    "start": "3016160",
    "end": "3022680"
  },
  {
    "text": "become increasingly common um plug-in architectures it's one of the things that you can always tell there's a difference",
    "start": "3022680",
    "end": "3028599"
  },
  {
    "text": "in terms of how maybe a C++ programmer versus um a dver or C programmer will",
    "start": "3028599",
    "end": "3034400"
  },
  {
    "text": "approach something in terms of framework design um and one of them is the availability of reflection just opens up",
    "start": "3034400",
    "end": "3041480"
  },
  {
    "text": "large classes uh uh of simple approaches to architecture and that was missing from C++ and the fourth one was garbage",
    "start": "3041480",
    "end": "3049440"
  },
  {
    "text": "collection increasingly systems have a garbage collector um we saw this at the time with net um having a C++ binding",
    "start": "3049440",
    "end": "3058240"
  },
  {
    "text": "and uh the workarounds that were enabled for that so those are my those are my that was what I basically said this the",
    "start": "3058240",
    "end": "3064480"
  },
  {
    "text": "language really needs to have these to be uh to to to make it in the future well we got the",
    "start": "3064480",
    "end": "3069920"
  },
  {
    "text": "threading the dynamic linking is kind of happening a little bit later than",
    "start": "3070680",
    "end": "3076839"
  },
  {
    "text": "expected the reflection is nowhere to be seen what about the garbage collection well",
    "start": "3076839",
    "end": "3083400"
  },
  {
    "text": "yeah so B sums it up on the C++ 11 FAQ",
    "start": "3083400",
    "end": "3088920"
  },
  {
    "start": "3084000",
    "end": "3156000"
  },
  {
    "text": "on his uh uh on his homepage garbage collection is optional in C++ that is a garbage collector is",
    "start": "3088920",
    "end": "3095160"
  },
  {
    "text": "not a compulsory part of an implementation C++ 11 allows you to have",
    "start": "3095160",
    "end": "3100520"
  },
  {
    "text": "this actually it doesn't it does not allow you to have it",
    "start": "3100520",
    "end": "3105960"
  },
  {
    "text": "it allows the vendor of the C++ compiler to have it that's not the same as you",
    "start": "3105960",
    "end": "3113079"
  },
  {
    "text": "there's a very subtle difference it basically means you cannot write program that is portable and relies on garbage",
    "start": "3113079",
    "end": "3119319"
  },
  {
    "text": "collection you have no control I don't mind the idea that it's optional but it's no longer under programmer control",
    "start": "3119319",
    "end": "3124920"
  },
  {
    "text": "I cannot therefore reliably all that code that I wrote before where I wasn't managing the memory and all the other",
    "start": "3124920",
    "end": "3131880"
  },
  {
    "text": "slides if this assertion is satisfied in other words we have garbage strong",
    "start": "3131880",
    "end": "3137160"
  },
  {
    "text": "garbage collection if we have that available all of my code works if it if it we don't have this available I've got",
    "start": "3137160",
    "end": "3142920"
  },
  {
    "text": "memory leaks everywhere and I can't ask for its availability it is not a feature I control it is a thing I can answer so",
    "start": "3142920",
    "end": "3150280"
  },
  {
    "text": "we have a little bit of a problem there it's it's almost worse than not having it at all it's a bit of a halfway house",
    "start": "3150280",
    "end": "3156240"
  },
  {
    "text": "so we're back to ailia it turns out whose philosophy is more classically C++ it is in my memory locked and you",
    "start": "3156240",
    "end": "3161640"
  },
  {
    "text": "yourself shall keep the key of it you're going to have to manage it yourself now for a lot of people managing it was",
    "start": "3161640",
    "end": "3168359"
  },
  {
    "text": "always a bit of choreography and C++ 11 came along and said you know what you don't have to worry about this I'm going",
    "start": "3168359",
    "end": "3173720"
  },
  {
    "text": "to give you um smart pointer for reference counting the shared pointer great that kind of works couple of",
    "start": "3173720",
    "end": "3180520"
  },
  {
    "text": "little caveats is that you have to provide your own deleter if you want it to delete an array but you know that's",
    "start": "3180520",
    "end": "3186400"
  },
  {
    "text": "that that's that's not entirely unreasonable but we also have to respect this something else um shed having a",
    "start": "3186400",
    "end": "3194520"
  },
  {
    "text": "reference counted pointer is um there are a surprising number of inefficiencies it can be",
    "start": "3194520",
    "end": "3201359"
  },
  {
    "text": "efficient in some cases but there are some surprises um Rob Murray observed this a long time ago um in C++",
    "start": "3201359",
    "end": "3209200"
  },
  {
    "text": "strategies and tactics he said his observation from an implementation point of view is certainly certainly sound um",
    "start": "3209200",
    "end": "3215599"
  },
  {
    "text": "a use counted class is more complicated than a non-use counted equivalent all of this horsing around with use counts",
    "start": "3215599",
    "end": "3221400"
  },
  {
    "text": "takes a significant amount of processing time it is not cheap okay there is a simple Point here",
    "start": "3221400",
    "end": "3227640"
  },
  {
    "text": "that garbage collection run asynchronously modern garbage collectors running in different threads they will",
    "start": "3227640",
    "end": "3232799"
  },
  {
    "text": "be intrinsically potentially more efficient and there are different classes of efficent efficiency you may care about um but if you are always",
    "start": "3232799",
    "end": "3239520"
  },
  {
    "text": "hitting um uh something and expecting to increment and decrement a count that's",
    "start": "3239520",
    "end": "3245480"
  },
  {
    "text": "going to pay you're going to pay a cost for that particularly in a threaded program okay there's uh it turns out",
    "start": "3245480",
    "end": "3250760"
  },
  {
    "text": "that um if you can guarantee your code is single threaded this is just going to be a simple plus plus or minus minus if",
    "start": "3250760",
    "end": "3257280"
  },
  {
    "text": "you can't guarantee that you're going to end up with an interlocked increment or decrement if it turns out that your",
    "start": "3257280",
    "end": "3262400"
  },
  {
    "text": "object the object that you are sharing is only shared within one",
    "start": "3262400",
    "end": "3267480"
  },
  {
    "text": "thread you will still pay the interlocked increment and decrement cost you have no way of signaling to the",
    "start": "3267480",
    "end": "3273599"
  },
  {
    "text": "compiler by the way I'm not actually sharing this between threads so go with this minus minus plus plus so there is a bunch of costs here we haven't really",
    "start": "3273599",
    "end": "3280400"
  },
  {
    "text": "taken it away from the programmer there's also an additional memory cost um there's an a separate allocation in this case unfortunately because we can't",
    "start": "3280400",
    "end": "3287119"
  },
  {
    "text": "use makes shared so there's a bunch of stuff here it's not as efficient as people uh would like to think of it and",
    "start": "3287119",
    "end": "3293760"
  },
  {
    "text": "then there is a what we might consider to be the ultimate show stopper if I put it into that list class that I showed",
    "start": "3293760",
    "end": "3299960"
  },
  {
    "text": "you I mean the for the vector um uh class Works absolutely fine there's no R",
    "start": "3299960",
    "end": "3305799"
  },
  {
    "text": "there's no problems with this other than the ones I've outlined uh which probably won't be too problematic with the this",
    "start": "3305799",
    "end": "3312760"
  },
  {
    "text": "the usage of this particular uh type um but if I go to the list there is",
    "start": "3312760",
    "end": "3318599"
  },
  {
    "start": "3316000",
    "end": "3476000"
  },
  {
    "text": "genuinely a problem if I transform those raw pointers into shared pointers we have a",
    "start": "3318599",
    "end": "3324039"
  },
  {
    "text": "problem that problem is a very subtle one and uh can lie hidden it's not that you",
    "start": "3324039",
    "end": "3329119"
  },
  {
    "text": "can't solve it it's just that you have to solve it and this is the problem",
    "start": "3329119",
    "end": "3334280"
  },
  {
    "text": "um I'm going to have a list of stuff it doesn't really matter what the stuff is",
    "start": "3334280",
    "end": "3339319"
  },
  {
    "text": "be a list of integers a list of string that is not relevant I'm now going to fill that list by doing a push front I'm",
    "start": "3339319",
    "end": "3347119"
  },
  {
    "text": "going to push I'm going to basically uh add all of that um I'll have to do a little extra adaptation",
    "start": "3347119",
    "end": "3353520"
  },
  {
    "text": "because it won't know about pushed front um uh but um if we do if we tweak around",
    "start": "3353520",
    "end": "3360359"
  },
  {
    "text": "with that then we would hope that we would be able to create let's just add a thousand",
    "start": "3360359",
    "end": "3366520"
  },
  {
    "text": "items we end up with a chain we end up with a list of a thousand links that's",
    "start": "3366520",
    "end": "3372079"
  },
  {
    "text": "absolutely fine each one of which has a shared pointer pointing to the next one so",
    "start": "3372079",
    "end": "3377520"
  },
  {
    "text": "there's this is all good except for one small problem I put",
    "start": "3377520",
    "end": "3383039"
  },
  {
    "text": "the curly brackets into for this example to highlight the fact the chain goes out of scope at the closing",
    "start": "3383039",
    "end": "3389319"
  },
  {
    "text": "curly goes out of scope at the closing curly which means that the destructor for chain will be called now this is a",
    "start": "3389319",
    "end": "3395760"
  },
  {
    "text": "link structure so we got a we got a pointed to the Head the destructor for the head will be called it is referring",
    "start": "3395760",
    "end": "3402520"
  },
  {
    "text": "to one other object so its count goes to zero it's going to refer to another",
    "start": "3402520",
    "end": "3408559"
  },
  {
    "text": "object hey guess what you need to go as well because my Destructor is executing and we end up with this down the chain",
    "start": "3408559",
    "end": "3413599"
  },
  {
    "text": "that's great except that it's a recursive call it turns out this blows blows your stack",
    "start": "3413599",
    "end": "3420760"
  },
  {
    "text": "for surprisingly small values you should be okay with a thousand but around 2,000 it blows up which is a trivially small",
    "start": "3420760",
    "end": "3426960"
  },
  {
    "text": "list this is a problem it's not that you can't solve it as I said and this is the",
    "start": "3426960",
    "end": "3432039"
  },
  {
    "text": "problem with the C++ Community I find at times is that hey I've got a really clever technique the fact that you need a clever technique and you need to see",
    "start": "3432039",
    "end": "3438160"
  },
  {
    "text": "this is actually the problem this is a problem that garbage collection solves um out of the box you have to you cannot",
    "start": "3438160",
    "end": "3444720"
  },
  {
    "text": "just simply have um um a simple persistent data structure um which is frustrating uh from this point of view",
    "start": "3444720",
    "end": "3452000"
  },
  {
    "text": "uh you can have trees but you going to struggle with actually long chains um so",
    "start": "3452000",
    "end": "3457799"
  },
  {
    "text": "this is frustrating the plus side is that we get to use const which means we can ensure something about",
    "start": "3457799",
    "end": "3462880"
  },
  {
    "text": "representation sharing but there is a complexity cost uh a cognitive complexity cost and code complexity cost",
    "start": "3462880",
    "end": "3470000"
  },
  {
    "text": "um to dealing with uh reference counting as our default way of trying to manage sharing so",
    "start": "3470000",
    "end": "3476720"
  },
  {
    "start": "3476000",
    "end": "3600000"
  },
  {
    "text": "I wrap up with uh observation from uh John Kack um the the games demig God um",
    "start": "3476720",
    "end": "3484240"
  },
  {
    "text": "no matter what language you work in programming in a functional style provides benefits you should do it whenever it is convenient and you should",
    "start": "3484240",
    "end": "3490079"
  },
  {
    "text": "think hard about the decision when it isn't convenient you may find you cannot adopt all of these techniques or even",
    "start": "3490079",
    "end": "3495400"
  },
  {
    "text": "the superet because obviously I only covered a subset of ideas here um in your coat uh if you're already using STL",
    "start": "3495400",
    "end": "3502640"
  },
  {
    "text": "um extensively and uh you've been shying away from function objects now is the",
    "start": "3502640",
    "end": "3507799"
  },
  {
    "text": "time to kind of go back and revisit that you will find that the stl's design was informed um quite extensively from Alex",
    "start": "3507799",
    "end": "3515559"
  },
  {
    "text": "stepanov's experience with scheme it has a very strong functional overtone it's not necessarily fully functional but there's a lot of stuff there um that uh",
    "start": "3515559",
    "end": "3523680"
  },
  {
    "text": "uh uh gets you thinking a a very different way from the kind of classical um C++ approach and even traditional um",
    "start": "3523680",
    "end": "3530440"
  },
  {
    "text": "STL usage once you've got um once you start using lambas and um binds and",
    "start": "3530440",
    "end": "3536559"
  },
  {
    "text": "polymorphic function wrappers that gets uh that starts achieving an awful lot more in terms of this",
    "start": "3536559",
    "end": "3542559"
  },
  {
    "text": "expressiveness but it's not just on that side it's not just a matter of libery sprinkling const over your code it is",
    "start": "3542559",
    "end": "3548280"
  },
  {
    "text": "about Shifting the idea of this object doubting you should open with any any discussion with an object you should",
    "start": "3548280",
    "end": "3555000"
  },
  {
    "text": "open with the a strong doubt that you need to change um its state okay you",
    "start": "3555000",
    "end": "3560200"
  },
  {
    "text": "should seriously doubt that that is a reasonable thing to do you should use that as your as your position of design",
    "start": "3560200",
    "end": "3566160"
  },
  {
    "text": "until otherwise proven um sometimes you will find actually though this is the right way of doing it State change is",
    "start": "3566160",
    "end": "3571480"
  },
  {
    "text": "the appropriate answer but rather than choosing that as your default um you should choose it as as the the other",
    "start": "3571480",
    "end": "3577000"
  },
  {
    "text": "answer the default should be I'm not going to change it and I have a battery of techniques that will allow me to not",
    "start": "3577000",
    "end": "3582200"
  },
  {
    "text": "change it but occasionally you will come out in fact possibly quite frequently depending on the age and uh architecture",
    "start": "3582200",
    "end": "3588440"
  },
  {
    "text": "of your code base you will say well you know I recognize that this would be good um and I have thought hard about it but",
    "start": "3588440",
    "end": "3595880"
  },
  {
    "text": "it is not convenient but now you know okay but you'll be surprised how many other cases can be moved over the line",
    "start": "3595880",
    "end": "3602440"
  },
  {
    "text": "to something that is not simply functional for its o sake but actually really rather simple to reason about and",
    "start": "3602440",
    "end": "3608319"
  },
  {
    "text": "understand so I'm going to finish with a Russian word that has been incorporated into uh the artist artistic world as a",
    "start": "3608319",
    "end": "3615079"
  },
  {
    "text": "kind of movement or philosophy ostra um defamiliarization the artistic technique",
    "start": "3615079",
    "end": "3621440"
  },
  {
    "text": "of presenting to audiences common things in an unfamiliar or strange way in order to enhance per of the familiar in other",
    "start": "3621440",
    "end": "3627720"
  },
  {
    "text": "words what I've done here is taken C++ and um try to offer it from a very different perspective people often throw",
    "start": "3627720",
    "end": "3634160"
  },
  {
    "text": "phrases like multi Paradigm around um but uh I I want to look at it just from",
    "start": "3634160",
    "end": "3639319"
  },
  {
    "text": "that point of view um and show you where it fits and where it doesn't and perhaps some uh new ideas and I hope that has",
    "start": "3639319",
    "end": "3646119"
  },
  {
    "text": "been useful thank you very",
    "start": "3646119",
    "end": "3649400"
  },
  {
    "text": "much but I'm standing here so if you want to ask me question come up and ask me questions then uh that's great thank",
    "start": "3653119",
    "end": "3658440"
  },
  {
    "text": "you",
    "start": "3658440",
    "end": "3661440"
  }
]