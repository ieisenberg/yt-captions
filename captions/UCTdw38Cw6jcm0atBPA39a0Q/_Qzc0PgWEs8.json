[
  {
    "text": "yes so well this is ndc there are loads of interesting talks out there so thank you",
    "start": "4160",
    "end": "10160"
  },
  {
    "text": "for picking up my session in particular my goal today is to un-traumatize you",
    "start": "10160",
    "end": "16720"
  },
  {
    "text": "with git because you know many of us have suffered a lot with git",
    "start": "16720",
    "end": "22080"
  },
  {
    "text": "and um we'll try to transform it from a set of magic spells into a tool that you can",
    "start": "22080",
    "end": "29519"
  },
  {
    "text": "actually control and take advantage of so just let me put out there i am no",
    "start": "29519",
    "end": "35200"
  },
  {
    "text": "expert i'm just someone who got fed up with not understanding what the heck is going on and came back to report what i",
    "start": "35200",
    "end": "41600"
  },
  {
    "text": "found so speaking of me uh i am",
    "start": "41600",
    "end": "46800"
  },
  {
    "text": "manu maganesh i am a devs a cops developer i was born in brazil that's why i have",
    "start": "46800",
    "end": "52399"
  },
  {
    "text": "this also charming accent and i come from a non-traditional background in tech as a trained",
    "start": "52399",
    "end": "58480"
  },
  {
    "text": "journalist and professional translator i used to generate new information but",
    "start": "58480",
    "end": "63600"
  },
  {
    "text": "since i learned software development at a free and pretty awesome bootcamp i instead started protecting information",
    "start": "63600",
    "end": "71600"
  },
  {
    "text": "from source to screen at sky uk so",
    "start": "71600",
    "end": "77600"
  },
  {
    "text": "it wouldn't be surprising if our git mental model were like this image",
    "start": "77600",
    "end": "82799"
  },
  {
    "text": "git as a collection of barbed wires dangerous that are",
    "start": "82799",
    "end": "88400"
  },
  {
    "text": "you know just something you don't want to touch every spike is a commit every wire is a",
    "start": "88400",
    "end": "94000"
  },
  {
    "text": "branch and guess what they get entangled by default not cool better not mess with them or you might",
    "start": "94000",
    "end": "100320"
  },
  {
    "text": "bleed to that right and it's understandable because most often than not when we learn git people",
    "start": "100320",
    "end": "107200"
  },
  {
    "text": "tell us oh just type this command and you'll be all right and also git is for most people means to",
    "start": "107200",
    "end": "114640"
  },
  {
    "text": "an end you know you're not there to work with git you're there to create software",
    "start": "114640",
    "end": "119680"
  },
  {
    "text": "so git is just a place where you store your code or something like this",
    "start": "119680",
    "end": "125360"
  },
  {
    "text": "uh and also we generally trust that someone somewhere in stack overflow will give us",
    "start": "125360",
    "end": "131920"
  },
  {
    "text": "the secret you know commands to solve all our problems right and then the barbed wires continue in",
    "start": "131920",
    "end": "139120"
  },
  {
    "text": "our heads so i would like to propose a mental model that is a bit more",
    "start": "139120",
    "end": "145760"
  },
  {
    "text": "accurate and a lot more friendly uh this doesn't seem to be working at all",
    "start": "145760",
    "end": "152560"
  },
  {
    "text": "okay so in 2011 the british documentary called wasteland",
    "start": "152560",
    "end": "157840"
  },
  {
    "text": "was shortlisted for the oscars and it showed how the brazilian artist vic monish created a collection called",
    "start": "157840",
    "end": "164959"
  },
  {
    "text": "pictures of garbage so vic-moniz worked in collaboration with garbage speakers in rio and gave",
    "start": "164959",
    "end": "171680"
  },
  {
    "text": "them the profits well done to create images on a massive scale using discarded objects like tires wires",
    "start": "171680",
    "end": "179920"
  },
  {
    "text": "toilet covers and so on and the final product was a series of",
    "start": "179920",
    "end": "185680"
  },
  {
    "text": "photos taken from above uh showing the whole picture you can see there the shed where it happened and the",
    "start": "185680",
    "end": "193599"
  },
  {
    "text": "in the side uh one of the final pieces so well this is pretty much how git",
    "start": "193599",
    "end": "200480"
  },
  {
    "text": "works and that's the mental model that worked for me don't get me wrong i'm not saying that",
    "start": "200480",
    "end": "206720"
  },
  {
    "text": "your code is rubbish but like the garbage speakers we are constantly adding removing replacing",
    "start": "206720",
    "end": "213519"
  },
  {
    "text": "objects that together create this big picture that is then photographed as the",
    "start": "213519",
    "end": "219599"
  },
  {
    "text": "masterpiece and this is git secret git is a series of snapshots",
    "start": "219599",
    "end": "226400"
  },
  {
    "text": "that shows what it each object looks like at a certain point in time okay let",
    "start": "226400",
    "end": "232000"
  },
  {
    "text": "me say that again git is a collection of snapshots that shows what an object looks like at a",
    "start": "232000",
    "end": "239920"
  },
  {
    "text": "certain point in time just like this artwork and this is one of the features that",
    "start": "239920",
    "end": "245200"
  },
  {
    "text": "sets git apart from other version control systems",
    "start": "245200",
    "end": "250239"
  },
  {
    "text": "this mental model also helps you correct the misconception that git is a version control system",
    "start": "250239",
    "end": "256639"
  },
  {
    "text": "that keeps track of your files uh as if it were some sort of backup or that it only tracks dips",
    "start": "256639",
    "end": "264720"
  },
  {
    "text": "um or you know changes to the files so to make it clear",
    "start": "264720",
    "end": "271040"
  },
  {
    "text": "gift tracks content if you don't believe me check the main",
    "start": "271040",
    "end": "276560"
  },
  {
    "text": "page it's right there the stupid content tracker and the building blocks of git as you",
    "start": "276560",
    "end": "282720"
  },
  {
    "text": "can see are not our files folder structures or devs but your actual",
    "start": "282720",
    "end": "287919"
  },
  {
    "text": "content but let me show you something first yay how does this help us",
    "start": "287919",
    "end": "295600"
  },
  {
    "text": "well this is just my name manu but it's hashed a hash is what happens when you pass",
    "start": "295600",
    "end": "303120"
  },
  {
    "text": "some data through a formula and hashes are generally a string of characters and no matter how big or",
    "start": "303120",
    "end": "310320"
  },
  {
    "text": "small the the input is hashes that use the same formula will always have the same string",
    "start": "310320",
    "end": "316720"
  },
  {
    "text": "length and hushes are always unique fast and secure",
    "start": "316720",
    "end": "322560"
  },
  {
    "text": "if i hadn't told you that this is my name you would probably never ever guess because it's virtually impossible to",
    "start": "322560",
    "end": "328720"
  },
  {
    "text": "determine what was the input based on the hash value alone",
    "start": "328720",
    "end": "334000"
  },
  {
    "text": "and here's a quick example we have the word fox with only three characters and we have a whole sentence below but",
    "start": "334000",
    "end": "341360"
  },
  {
    "text": "both of them generate a string of 40 characters and if you change the input just a",
    "start": "341360",
    "end": "346960"
  },
  {
    "text": "little you know we changed over to over the result is completely different",
    "start": "346960",
    "end": "354479"
  },
  {
    "text": "so but why are we even bothering about hashes because git owes its life to them",
    "start": "354479",
    "end": "361199"
  },
  {
    "text": "although hashes are mainly used in a security context git depends on hashing",
    "start": "361199",
    "end": "366400"
  },
  {
    "text": "to identify object objects and commits and ensure their integrity",
    "start": "366400",
    "end": "372880"
  },
  {
    "text": "and you see it soon right now let's explore the anatomy of a git repo",
    "start": "372880",
    "end": "379520"
  },
  {
    "text": "so here i have used the command three just to list my direct",
    "start": "379520",
    "end": "384720"
  },
  {
    "text": "directory in a pretty way and can you tell me what is my git repo in this screenshot",
    "start": "384720",
    "end": "392560"
  },
  {
    "text": "is it wannabe the last line of course not that's a text file",
    "start": "392560",
    "end": "398319"
  },
  {
    "text": "is it spice girls in red no that's the branch name so ah don't be silly everyone knows that",
    "start": "398319",
    "end": "405759"
  },
  {
    "text": "it's the light blue there my lyrics right no",
    "start": "405759",
    "end": "410880"
  },
  {
    "text": "that is my directory name so this was a little gotcha because git",
    "start": "410880",
    "end": "416080"
  },
  {
    "text": "repos are by default hidden so",
    "start": "416080",
    "end": "421520"
  },
  {
    "text": "let's create um git repo from scratch",
    "start": "421520",
    "end": "426560"
  },
  {
    "text": "and when you run getting it you create one and in this folder countries we'll",
    "start": "426560",
    "end": "433120"
  },
  {
    "text": "just list uh whatever is in there and the dash a allows us to see what are the hidden",
    "start": "433120",
    "end": "438960"
  },
  {
    "text": "files so you can see there the dot kit that is the actual git repo",
    "start": "438960",
    "end": "445680"
  },
  {
    "text": "um and this is all brand new we just created it no files that were added yet",
    "start": "445680",
    "end": "452160"
  },
  {
    "text": "so what do you expect we will find inside the repo if we see the intro git",
    "start": "452160",
    "end": "457919"
  },
  {
    "text": "and this stuff do you think it will be empty or will it have something on it",
    "start": "457919",
    "end": "465520"
  },
  {
    "text": "well let's see let's clear this and see what is inside our repo",
    "start": "465520",
    "end": "473280"
  },
  {
    "text": "and there you go this is totally not what i was expecting the first time i did this operation",
    "start": "473280",
    "end": "480160"
  },
  {
    "text": "we have three files there in the top in white we have four folders the bottom ones in",
    "start": "480160",
    "end": "486560"
  },
  {
    "text": "bold blue and starting with the files the head file is a bit so important for",
    "start": "486560",
    "end": "493360"
  },
  {
    "text": "us to cover right now so we'll come back to it later and the file called description is not super",
    "start": "493360",
    "end": "500400"
  },
  {
    "text": "important because it's only used by some obscure web interface that git provides",
    "start": "500400",
    "end": "505919"
  },
  {
    "text": "and then yes you find someone who has ever used it so let's go to config",
    "start": "505919",
    "end": "512479"
  },
  {
    "text": "the file config has configuration options that are specific to your project",
    "start": "512479",
    "end": "517839"
  },
  {
    "text": "so for example if i want to change my username and my email for a particular project the config file will hold that",
    "start": "517839",
    "end": "525920"
  },
  {
    "text": "information so let's clear this again",
    "start": "525920",
    "end": "531040"
  },
  {
    "text": "and if i type git config user dot name and some random name i chose shuri",
    "start": "531040",
    "end": "539600"
  },
  {
    "text": "i can update my name and if i do the same with user.email and some random",
    "start": "539600",
    "end": "545440"
  },
  {
    "text": "email i believe sure is an avenger so there we go so now if we print the",
    "start": "545440",
    "end": "552240"
  },
  {
    "text": "config file we will see there you go my name and my email were",
    "start": "552240",
    "end": "558240"
  },
  {
    "text": "updated so for the duration of this project i am the princess of wakanda thank you very much",
    "start": "558240",
    "end": "565200"
  },
  {
    "text": "and now let's go back to the folders and see what else we have there",
    "start": "565200",
    "end": "571200"
  },
  {
    "text": "we have the hooks folder it is for hook script which we're not covering today but it's",
    "start": "571200",
    "end": "577680"
  },
  {
    "text": "worth mentioning because um hooks have very interesting use cases for example",
    "start": "577680",
    "end": "583279"
  },
  {
    "text": "you can prevent people from committing your aws credentials you know if if the",
    "start": "583279",
    "end": "589760"
  },
  {
    "text": "the code matches the regex then they are forbid to commit or you can run linters before committing all this stuff and",
    "start": "589760",
    "end": "596720"
  },
  {
    "text": "this is where they go uh and the next directory",
    "start": "596720",
    "end": "602880"
  },
  {
    "text": "is the info one and inside it there is only one file called exclude",
    "start": "602880",
    "end": "608720"
  },
  {
    "text": "um this file works kind of like a git ignore but it's mainly for things that",
    "start": "608720",
    "end": "615360"
  },
  {
    "text": "you want to ignore yourself without imposing it on other people that are sharing your project with you",
    "start": "615360",
    "end": "621440"
  },
  {
    "text": "so git ignore makes everyone ignore certain files and excludes that is inside the info folder makes only you",
    "start": "621440",
    "end": "628480"
  },
  {
    "text": "ignore those pro those files and next we have the tastier",
    "start": "628480",
    "end": "633839"
  },
  {
    "text": "folder of all which is objects this folder is where our content and our",
    "start": "633839",
    "end": "639920"
  },
  {
    "text": "commits live so this project is still brand new and empty",
    "start": "639920",
    "end": "645519"
  },
  {
    "text": "so if we search for regular files in this folder we will find basically",
    "start": "645519",
    "end": "650959"
  },
  {
    "text": "nothing as soon as this is finished yeah there you go nothing",
    "start": "650959",
    "end": "657920"
  },
  {
    "text": "so let's create a file and explore the repo again so i created chili and let's",
    "start": "657920",
    "end": "663519"
  },
  {
    "text": "see what happens ah nothing happened why let's see if git status help us",
    "start": "663519",
    "end": "670880"
  },
  {
    "text": "you can see chile is in red meaning that it is untracked git is paying no attention to your file",
    "start": "670959",
    "end": "677440"
  },
  {
    "text": "until you do a git add and when you do it and you print there you go",
    "start": "677440",
    "end": "684880"
  },
  {
    "text": "you now have object there whatever it is",
    "start": "684880",
    "end": "691200"
  },
  {
    "text": "but it will finally pay attention to your file and index with your content remember this word index",
    "start": "691200",
    "end": "698480"
  },
  {
    "text": "if you look again you may recognize that whole number as a hash there is a slash after the two first",
    "start": "698480",
    "end": "706000"
  },
  {
    "text": "letters because git uses the first two letters as a directory just to speed up data",
    "start": "706000",
    "end": "711680"
  },
  {
    "text": "retrieval and if we go ahead and commit this file",
    "start": "711680",
    "end": "717200"
  },
  {
    "text": "we can check if anything changes in our objects folder",
    "start": "717200",
    "end": "722639"
  },
  {
    "text": "so we commit and you can see that i'm very slow at",
    "start": "722639",
    "end": "728959"
  },
  {
    "text": "typing and we list but well we have tripled the number of",
    "start": "728959",
    "end": "735760"
  },
  {
    "text": "objects in this folder why we just added a commit what are those extra objects",
    "start": "735760",
    "end": "744399"
  },
  {
    "text": "so git has a special command to help us identify what type of objects these hashes represent",
    "start": "744399",
    "end": "750800"
  },
  {
    "text": "the dash t gives us the object type so we can see now that we have a blob",
    "start": "750800",
    "end": "757839"
  },
  {
    "text": "we also have a tree and lastly we have",
    "start": "757839",
    "end": "763440"
  },
  {
    "text": "a commit so this right there is the beating heart of",
    "start": "763440",
    "end": "769839"
  },
  {
    "text": "git every time you get ad even if it's just a file with a content version 2",
    "start": "769839",
    "end": "777360"
  },
  {
    "text": "you're telling it to store your content as a blog blob is just a funny word that was",
    "start": "777360",
    "end": "783519"
  },
  {
    "text": "forced into becoming a technical word that means binary large object",
    "start": "783519",
    "end": "789200"
  },
  {
    "text": "git blobs don't have any metadata like file name timestamp or extension type",
    "start": "789200",
    "end": "795120"
  },
  {
    "text": "nothing a blob is pure content and once a blob is created git",
    "start": "795120",
    "end": "800560"
  },
  {
    "text": "compresses it and hashes it and let's see that happening in the command line",
    "start": "800560",
    "end": "807120"
  },
  {
    "text": "so we will add some content to our file because right now it's empty let's add",
    "start": "807120",
    "end": "812160"
  },
  {
    "text": "santiago to chile for obvious reasons and when we add we are telling it that the",
    "start": "812160",
    "end": "819040"
  },
  {
    "text": "content needs to be stored and if we list our objects again we will see a new one",
    "start": "819040",
    "end": "825680"
  },
  {
    "text": "starting with 7d which is the second line and if we print the content for that",
    "start": "825680",
    "end": "831360"
  },
  {
    "text": "hash we will find santiago as we expect",
    "start": "831360",
    "end": "837279"
  },
  {
    "text": "and you will see that i always make the dash b yeah you will",
    "start": "837279",
    "end": "843360"
  },
  {
    "text": "see that there is no indication of where this file belongs or anything else",
    "start": "843360",
    "end": "849440"
  },
  {
    "text": "because a blob is just content so",
    "start": "849440",
    "end": "854959"
  },
  {
    "text": "how does git relate content with file names and",
    "start": "854959",
    "end": "860240"
  },
  {
    "text": "folder structures that's what we see next with trees",
    "start": "860240",
    "end": "865920"
  },
  {
    "text": "what is a tree a tree is a pointer a tree will point to your blobs",
    "start": "865920",
    "end": "872399"
  },
  {
    "text": "but how by storing the blob hashes and holding the respective file names and other",
    "start": "872399",
    "end": "878560"
  },
  {
    "text": "information and because this is it guess what a tree also has its own hash",
    "start": "878560",
    "end": "886240"
  },
  {
    "text": "so let's see that for rio by pretty printing our tree in the command line",
    "start": "886240",
    "end": "892959"
  },
  {
    "text": "there we go now okay so you can see the first block",
    "start": "893040",
    "end": "898240"
  },
  {
    "text": "the first block there it is about permissions the second one is the",
    "start": "898240",
    "end": "904399"
  },
  {
    "text": "the object type which is a blob and the third one is our whole hash",
    "start": "904399",
    "end": "910480"
  },
  {
    "text": "and the fourth block is the file name so this is what a tree looks like it gets",
    "start": "910480",
    "end": "915839"
  },
  {
    "text": "the metadata for that blob but what if we have more than one file",
    "start": "915839",
    "end": "922320"
  },
  {
    "text": "what happens to the tree we will create two more files",
    "start": "922320",
    "end": "929600"
  },
  {
    "text": "and do another git add to generate the blobs and then we will confirm that the blobs",
    "start": "929600",
    "end": "936000"
  },
  {
    "text": "are there okay so let's add all those these two files",
    "start": "936000",
    "end": "943759"
  },
  {
    "text": "and list to see if they are there",
    "start": "943759",
    "end": "949600"
  },
  {
    "text": "yes they are so let's try and print our tree again",
    "start": "950800",
    "end": "956880"
  },
  {
    "text": "and i'm so slow that i can even drink water",
    "start": "956880",
    "end": "960800"
  },
  {
    "text": "okay so there's still only one blob why",
    "start": "966839",
    "end": "972079"
  },
  {
    "text": "why hasn't it added the new files well git only generates trees once we",
    "start": "972079",
    "end": "977839"
  },
  {
    "text": "run git commit and trees also cannot be edited",
    "start": "977839",
    "end": "983519"
  },
  {
    "text": "so every time you do a git commit you are necessarily creating a new tree",
    "start": "983519",
    "end": "990399"
  },
  {
    "text": "so when we print the tree let's print it",
    "start": "990480",
    "end": "995759"
  },
  {
    "text": "we will see if our blobs got added so let's go",
    "start": "995759",
    "end": "1001600"
  },
  {
    "text": "and there we are we now have all three files in that three",
    "start": "1001600",
    "end": "1006800"
  },
  {
    "text": "but what if we move one of those blobs to a step folder",
    "start": "1006800",
    "end": "1013040"
  },
  {
    "text": "we are creating a new directory called mercosur and we're moving argentina to it",
    "start": "1013519",
    "end": "1019680"
  },
  {
    "text": "so we have some geography for you there and we add and we added a blob but we've seen",
    "start": "1019680",
    "end": "1026720"
  },
  {
    "text": "before that this new blob will not be attached to its metadata in other words don't create a tree until we commit",
    "start": "1026720",
    "end": "1033839"
  },
  {
    "text": "so let's commit and print the new tree",
    "start": "1033839",
    "end": "1039839"
  },
  {
    "text": "okay the new tree is going to be printed in a second there you go can you see the last line",
    "start": "1046079",
    "end": "1053200"
  },
  {
    "text": "there a tree cannot only hold blobs but also other trees",
    "start": "1053200",
    "end": "1058880"
  },
  {
    "text": "and this is how git creates our whole folder structure one",
    "start": "1058880",
    "end": "1063919"
  },
  {
    "text": "tree that points to another tree and blobs and so on",
    "start": "1063919",
    "end": "1069039"
  },
  {
    "text": "and as we saw the job of the tree is just to point to your content while",
    "start": "1069200",
    "end": "1075600"
  },
  {
    "text": "organizing it as well and remember when we said that git is a collection of snapshots",
    "start": "1075600",
    "end": "1082320"
  },
  {
    "text": "that shows what each object looks like at a certain point in time can you see that taking shape",
    "start": "1082320",
    "end": "1089039"
  },
  {
    "text": "uh the trees take cares of the composition of your of your directory and even though blobs",
    "start": "1089039",
    "end": "1096080"
  },
  {
    "text": "are the stars of the show because the content actually live there the trees are the soul of these",
    "start": "1096080",
    "end": "1101679"
  },
  {
    "text": "mechanics but we still have one more object that is also generated when you commit",
    "start": "1101679",
    "end": "1109200"
  },
  {
    "text": "which is a commit but what is a commit we've seen that",
    "start": "1109200",
    "end": "1114640"
  },
  {
    "text": "objects are content trees are pointers and commits are",
    "start": "1114640",
    "end": "1120840"
  },
  {
    "text": "pointers a commit is nothing more than a pointer to a particular tree",
    "start": "1120840",
    "end": "1128320"
  },
  {
    "text": "and what is the commit made of let's print a commit and see for ourselves",
    "start": "1128400",
    "end": "1136200"
  },
  {
    "text": "there we go so a commit is made basically of five elements the first one the tree that",
    "start": "1137200",
    "end": "1143840"
  },
  {
    "text": "holds the whole screenshot together the second element is a pointer to the",
    "start": "1143840",
    "end": "1149360"
  },
  {
    "text": "parent commit the third element is the author of the change with",
    "start": "1149360",
    "end": "1156240"
  },
  {
    "text": "a time stamp in our case the author and the committer are the same person but that might not",
    "start": "1156240",
    "end": "1162799"
  },
  {
    "text": "always be the case because you know someone made my create a patch and send it via email for",
    "start": "1162799",
    "end": "1170000"
  },
  {
    "text": "someone to actually commit i don't think this is done anymore but the possibility is still there",
    "start": "1170000",
    "end": "1175440"
  },
  {
    "text": "and lastly we have the commit message",
    "start": "1175440",
    "end": "1180799"
  },
  {
    "text": "and going back to the idea of the snapshot every time you commit you are pulling the trigger of your",
    "start": "1181039",
    "end": "1187440"
  },
  {
    "text": "camera git will capture whatever was pushed to your index and generate the",
    "start": "1187440",
    "end": "1193520"
  },
  {
    "text": "tree beside gitz also logged metadata about the commit as we just saw",
    "start": "1193520",
    "end": "1200880"
  },
  {
    "text": "so you can know metadata about what happened to your repo who did what so you can blame no no",
    "start": "1200880",
    "end": "1207200"
  },
  {
    "text": "we don't blame people so in this image here you can see the third commit in the top",
    "start": "1207200",
    "end": "1212559"
  },
  {
    "text": "it is linked to every single file in in this image there",
    "start": "1212559",
    "end": "1219200"
  },
  {
    "text": "so it's it shows how the structure even though the test file was not changed it's still",
    "start": "1219200",
    "end": "1226720"
  },
  {
    "text": "linked to the third commit so everything is linked in one tree and that is where",
    "start": "1226720",
    "end": "1232480"
  },
  {
    "text": "the the commit points to um",
    "start": "1232480",
    "end": "1238000"
  },
  {
    "text": "so as we continue working we keep chaining commit object",
    "start": "1238000",
    "end": "1244400"
  },
  {
    "text": "and although time goes forward our commits they point backwards to",
    "start": "1244400",
    "end": "1250240"
  },
  {
    "text": "their parent and in this example each commit has only one parent but commit can have multiple",
    "start": "1250240",
    "end": "1257200"
  },
  {
    "text": "parents if you are doing a merge for example of two branches or more and this is basically how git works",
    "start": "1257200",
    "end": "1264640"
  },
  {
    "text": "under the hood and now that we have seen what git objects are and how they interact with",
    "start": "1264640",
    "end": "1271600"
  },
  {
    "text": "each other there's a principle that you may have worked out by yourself by now",
    "start": "1271600",
    "end": "1276960"
  },
  {
    "text": "git objects are immutable like hieroglyphs carved in stone",
    "start": "1276960",
    "end": "1282880"
  },
  {
    "text": "yeah we can't understand hieroglyphs we can't understand commit as well right so what happens when you find a typo in",
    "start": "1282880",
    "end": "1290320"
  },
  {
    "text": "your commit or a typo in your commit message i'm sorry to say but what is done is",
    "start": "1290320",
    "end": "1296159"
  },
  {
    "text": "done game over move on the best thing you can do is just correct the typo in your code and do a",
    "start": "1296159",
    "end": "1302159"
  },
  {
    "text": "new commit and some people may say oh no but you can edit for example typos in your commit message",
    "start": "1302159",
    "end": "1309039"
  },
  {
    "text": "with amends right well yes but no because that would break the",
    "start": "1309039",
    "end": "1315120"
  },
  {
    "text": "immutability principle do you want to see what happens when we do a git amend commit amend",
    "start": "1315120",
    "end": "1321520"
  },
  {
    "text": "so we will create a new file and we will on purpose add a typo to the",
    "start": "1321520",
    "end": "1328320"
  },
  {
    "text": "commit message so we are committing bolivia and we will add an extra a to it",
    "start": "1328320",
    "end": "1336240"
  },
  {
    "text": "oh no it's colombia not bolivia yeah so look at the hush there",
    "start": "1336240",
    "end": "1342400"
  },
  {
    "text": "okay that's the commit hush and now we are amending we are removing the typo",
    "start": "1342400",
    "end": "1348640"
  },
  {
    "text": "and look we got rid of the typo but we also have a new hash so what is actually happening",
    "start": "1348640",
    "end": "1356640"
  },
  {
    "text": "is that you just replaced commit so you did not",
    "start": "1356640",
    "end": "1361679"
  },
  {
    "text": "edit you just did a new commit and forgot about the one with the typo",
    "start": "1361679",
    "end": "1368960"
  },
  {
    "text": "so all this object stuff that we talked about so far happens under the hood and",
    "start": "1368960",
    "end": "1374559"
  },
  {
    "text": "because we're humans we also need a way to keep track of our commit",
    "start": "1374559",
    "end": "1380240"
  },
  {
    "text": "so let's suppose you had this amazing day you worked on several branches did all these commits and then you get a",
    "start": "1380240",
    "end": "1386480"
  },
  {
    "text": "colleague to review your code and you know your colleague agrees and",
    "start": "1386480",
    "end": "1391919"
  },
  {
    "text": "she asks you to send the details and you say oh sure check out the commit",
    "start": "1391919",
    "end": "1397840"
  },
  {
    "text": "h3 lpm it won't work right so we need a",
    "start": "1397840",
    "end": "1402880"
  },
  {
    "text": "human-friendly way to manage our work streams and that's the job of git references",
    "start": "1402880",
    "end": "1410320"
  },
  {
    "text": "the most famous reference we have in yet are the branches uh and what are branches we saw that",
    "start": "1410320",
    "end": "1417919"
  },
  {
    "text": "object is content trees are pointers commits are pointers and branches are",
    "start": "1417919",
    "end": "1425039"
  },
  {
    "text": "come on you know pointer yeah well uh brenton gate is simply a movable",
    "start": "1425039",
    "end": "1431679"
  },
  {
    "text": "pointer to a commit picture it as a tour guide that moves around the landmarks you want",
    "start": "1431679",
    "end": "1437840"
  },
  {
    "text": "to visit in town so the tour guide is not the landmark itself it is just",
    "start": "1437840",
    "end": "1444320"
  },
  {
    "text": "pointing to the landmarks and moving from one to the next so every time you commit your branch",
    "start": "1444320",
    "end": "1451360"
  },
  {
    "text": "automatically moves and points to the next to the most recent commit",
    "start": "1451360",
    "end": "1456799"
  },
  {
    "text": "and the most famous or infamous branch in git is called master",
    "start": "1456799",
    "end": "1462799"
  },
  {
    "text": "and i think that it was last year that github and gitlab changed master to maine and git was also in the process of",
    "start": "1462799",
    "end": "1470240"
  },
  {
    "text": "changing it to maine i'm not sure if they have finished the tests but it will soon be",
    "start": "1470240",
    "end": "1475600"
  },
  {
    "text": "default for git as well main so this is a excerpt from a git a book called pro git",
    "start": "1475600",
    "end": "1482799"
  },
  {
    "text": "and it's this the master branch in git is not a special branch it is exactly",
    "start": "1482799",
    "end": "1488720"
  },
  {
    "text": "like any other branch the only reason nearly every repository has one",
    "start": "1488720",
    "end": "1494240"
  },
  {
    "text": "is that the git init command creates it by default and most people don't bother",
    "start": "1494240",
    "end": "1499440"
  },
  {
    "text": "to change it so if there's nothing special about maine or",
    "start": "1499440",
    "end": "1505440"
  },
  {
    "text": "master let's call it maine does it mean that even maine is just a pointer",
    "start": "1505440",
    "end": "1512480"
  },
  {
    "text": "let's see so let's bring back our repo and inspect inspect the refs folder",
    "start": "1512480",
    "end": "1518559"
  },
  {
    "text": "which was the last one that we haven't seen yet you will see that there are some new things there because we now have you",
    "start": "1518559",
    "end": "1525360"
  },
  {
    "text": "know actual information in the repo but if we list the refs",
    "start": "1525360",
    "end": "1530960"
  },
  {
    "text": "we won't find the branches folder because they are technically called heads and right now we only have one branch",
    "start": "1530960",
    "end": "1537919"
  },
  {
    "text": "which is main and let's see what main is made of let's",
    "start": "1537919",
    "end": "1542960"
  },
  {
    "text": "cut it and there you go it's just a hush and what is this hunch about let's print",
    "start": "1542960",
    "end": "1550640"
  },
  {
    "text": "it and see",
    "start": "1550640",
    "end": "1553960"
  },
  {
    "text": "there you go it's our last commit colombia without the typo",
    "start": "1557279",
    "end": "1563120"
  },
  {
    "text": "so if branches are pointers what happens when you delete a branch",
    "start": "1564720",
    "end": "1571760"
  },
  {
    "text": "again let's see what happens we will create a new um branch called africa because we only",
    "start": "1571760",
    "end": "1577840"
  },
  {
    "text": "have one branch at the moment and we will check what is inside heads just to certify that africa was added",
    "start": "1577840",
    "end": "1584640"
  },
  {
    "text": "there there we go we have both so now we will delete one of the branches and it",
    "start": "1584640",
    "end": "1590000"
  },
  {
    "text": "will be main because we are both we will delete the most important branch",
    "start": "1590000",
    "end": "1595039"
  },
  {
    "text": "and oh my god we deleted main what now don't fret",
    "start": "1595039",
    "end": "1600240"
  },
  {
    "text": "you see that there is a hush there not always lost we still have the hush so it means that we can check out that hush",
    "start": "1600240",
    "end": "1607279"
  },
  {
    "text": "and get back to where to what maine was and we check it out",
    "start": "1607279",
    "end": "1613919"
  },
  {
    "text": "you know git will send you all this message crazy like oh my god you are in detached head state",
    "start": "1613919",
    "end": "1620240"
  },
  {
    "text": "it's fine it's nothing to worry about by now we'll cover that later uh but now you can create a new branch",
    "start": "1620240",
    "end": "1627200"
  },
  {
    "text": "from off from this um this checkout that you have so if we do",
    "start": "1627200",
    "end": "1633760"
  },
  {
    "text": "git switch dash c we will create a new branch and we call it main again",
    "start": "1633760",
    "end": "1640720"
  },
  {
    "text": "and okay let's print again our refs to see",
    "start": "1640720",
    "end": "1645760"
  },
  {
    "text": "if our main got there there you go all is good again",
    "start": "1645760",
    "end": "1652000"
  },
  {
    "text": "two notes though remember that this is here is a local project it's only mine",
    "start": "1652000",
    "end": "1657279"
  },
  {
    "text": "so i can do whatever i want and i can't delete branch uh the main branch but you shouldn't do this at work and if you",
    "start": "1657279",
    "end": "1664080"
  },
  {
    "text": "do it's your responsibility if they fire you it's not on me okay and another thing",
    "start": "1664080",
    "end": "1670159"
  },
  {
    "text": "uh in professional settings people generally protect the main branch so even if you tried you would probably not",
    "start": "1670159",
    "end": "1677279"
  },
  {
    "text": "be able to delete the main branch but anyway don't even try okay this is not safe",
    "start": "1677279",
    "end": "1683679"
  },
  {
    "text": "and another word of caution a commit chain that is not associated to",
    "start": "1683679",
    "end": "1690320"
  },
  {
    "text": "a branch like what you did or checking out a random hash",
    "start": "1690320",
    "end": "1695760"
  },
  {
    "text": "it will eventually be deleted by the garbage collection and there is a default grace period of",
    "start": "1695760",
    "end": "1703039"
  },
  {
    "text": "90 days before git delete orphan commits and this grace period is customizable",
    "start": "1703039",
    "end": "1709120"
  },
  {
    "text": "you can make it different but and if you don't want to wait for git default garbage collection you can",
    "start": "1709120",
    "end": "1716559"
  },
  {
    "text": "trigger it by using git prone but remember you will lose orphan content",
    "start": "1716559",
    "end": "1724159"
  },
  {
    "text": "right so when you create a new branch git creates a new reference",
    "start": "1724159",
    "end": "1729279"
  },
  {
    "text": "so let's suppose you created a new branch called feature like this",
    "start": "1729279",
    "end": "1734480"
  },
  {
    "text": "by using the git branch command your commit has now two references as",
    "start": "1734480",
    "end": "1740000"
  },
  {
    "text": "you can see there so how does git know which branch you are actually working on",
    "start": "1740000",
    "end": "1748320"
  },
  {
    "text": "git uses a second type of reference called head or capped head",
    "start": "1748559",
    "end": "1753919"
  },
  {
    "text": "you know in portuguese when something is very difficult we call it a beast with seven heads and unfortunately for us git",
    "start": "1753919",
    "end": "1761039"
  },
  {
    "text": "has way more than seven heads but this uppercase head",
    "start": "1761039",
    "end": "1766559"
  },
  {
    "text": "for a user perspective it tames all others uh the uppercase head is simply a",
    "start": "1766559",
    "end": "1773520"
  },
  {
    "text": "pointer to where you are uh as it will always move with you most",
    "start": "1773520",
    "end": "1780640"
  },
  {
    "text": "of times your uppercase head will match the branch reference you're",
    "start": "1780640",
    "end": "1786000"
  },
  {
    "text": "working on and works as a snapshot of your last commit on that",
    "start": "1786000",
    "end": "1792840"
  },
  {
    "text": "branch when you check out or switch you are moving your head in that",
    "start": "1792840",
    "end": "1798159"
  },
  {
    "text": "direction so only your head moves and checkouts don't affect the commit a",
    "start": "1798159",
    "end": "1804080"
  },
  {
    "text": "branch is pointing to it's only the head other things happen as well when you check out but now we're just looking at",
    "start": "1804080",
    "end": "1810960"
  },
  {
    "text": "the head movement and if you can check out a branch you can",
    "start": "1810960",
    "end": "1816480"
  },
  {
    "text": "check out any commit as well and unless you fell prey to the french",
    "start": "1816480",
    "end": "1823440"
  },
  {
    "text": "revolution your head is always attached to you and it goes anywhere you go",
    "start": "1823440",
    "end": "1830799"
  },
  {
    "text": "um when you check out a random commit you get a case of detached head",
    "start": "1830799",
    "end": "1836720"
  },
  {
    "text": "it's quite a dramatic terminology but it only means that your head got",
    "start": "1836720",
    "end": "1842080"
  },
  {
    "text": "detached from a branch it's still connected to you but it's not connected to any branch",
    "start": "1842080",
    "end": "1848080"
  },
  {
    "text": "and this is totally fine as long as you are mindful of that and git will also",
    "start": "1848080",
    "end": "1853440"
  },
  {
    "text": "help you remember that with messages in your cli um but why would this be a problem",
    "start": "1853440",
    "end": "1860080"
  },
  {
    "text": "um remember the garbage collection if you keep working on a detached head",
    "start": "1860080",
    "end": "1865519"
  },
  {
    "text": "you know over time the contents that you're working on is subject to deletion on garbage collection day so if you ever",
    "start": "1865519",
    "end": "1872399"
  },
  {
    "text": "detach your head please ensure that you create a branch out of it",
    "start": "1872399",
    "end": "1877519"
  },
  {
    "text": "and here we have the proof that references do change unlike object",
    "start": "1877519",
    "end": "1882799"
  },
  {
    "text": "so we will print you know that firehead that we said before right now it's pointing to main",
    "start": "1882799",
    "end": "1889279"
  },
  {
    "text": "but if we check out africa and print head again it will point to africa so it",
    "start": "1889279",
    "end": "1895360"
  },
  {
    "text": "is a movable reference and that's the proof the last type of reference are",
    "start": "1895360",
    "end": "1901760"
  },
  {
    "text": "lightweight tags tags in general work like frozen branches",
    "start": "1901760",
    "end": "1907360"
  },
  {
    "text": "or like the flag on the moon that will be stuck there and left alone",
    "start": "1907360",
    "end": "1912480"
  },
  {
    "text": "in the code forever without ever moving again so lightweight tags are quick references",
    "start": "1912480",
    "end": "1918880"
  },
  {
    "text": "with no metadata associated to it to create one you just need to run git",
    "start": "1918880",
    "end": "1924880"
  },
  {
    "text": "tag and some name for your for your tag and that's it",
    "start": "1924880",
    "end": "1930399"
  },
  {
    "text": "there's also a second type of uh tag that is the annotated tag it works in",
    "start": "1930399",
    "end": "1937279"
  },
  {
    "text": "the same way as a lightweight tag but it is in fact a git object so this",
    "start": "1937279",
    "end": "1942880"
  },
  {
    "text": "means that annotated tags get the full git treatment you know they have a checksum they have author date and",
    "start": "1942880",
    "end": "1948720"
  },
  {
    "text": "everything so for example if you are tagging a release it's recommendable to use an annotated",
    "start": "1948720",
    "end": "1954480"
  },
  {
    "text": "tag because then you can know you know uh what is what are the features in your you know release who did it and what",
    "start": "1954480",
    "end": "1962320"
  },
  {
    "text": "what not and one thing to be mindful about tags is",
    "start": "1962320",
    "end": "1968080"
  },
  {
    "text": "that by default git push the command git push doesn't transfer tags to remote servers",
    "start": "1968080",
    "end": "1975360"
  },
  {
    "text": "like github gitlab bitbucket whatever to do it you need to run git push origin",
    "start": "1975360",
    "end": "1981919"
  },
  {
    "text": "and the name of your tag or git push origin dash dash tags that will push all of them at once",
    "start": "1981919",
    "end": "1990240"
  },
  {
    "text": "although annotated tags and lightweight tags have a different nature they are",
    "start": "1990240",
    "end": "1995440"
  },
  {
    "text": "both stored in the same place they live under the refs folder in your repo on a dedicated subdirectory",
    "start": "1995440",
    "end": "2002799"
  },
  {
    "text": "called tags and now that we're done with the internal workings of git you might have",
    "start": "2002799",
    "end": "2010080"
  },
  {
    "text": "realized that git is all about your past kit knows what you did last summer and",
    "start": "2010080",
    "end": "2016000"
  },
  {
    "text": "it's the power of git and there are different ways to look at",
    "start": "2016000",
    "end": "2021120"
  },
  {
    "text": "your past the first one is git log gitlock works pretty much like this",
    "start": "2021120",
    "end": "2027519"
  },
  {
    "text": "picture here you have a child their mother grandmother great grandmother",
    "start": "2027519",
    "end": "2032880"
  },
  {
    "text": "and git log follows the same logic like an ancestry list",
    "start": "2032880",
    "end": "2038720"
  },
  {
    "text": "it goes upstream checking the parents for a certain commit and",
    "start": "2038720",
    "end": "2044159"
  },
  {
    "text": "this is what a git log looks like when you don't add any flag to it",
    "start": "2044159",
    "end": "2050000"
  },
  {
    "text": "but if you add some flags you can make it a bit more user friendly",
    "start": "2050000",
    "end": "2055118"
  },
  {
    "text": "like this or like this and i found out that there is this",
    "start": "2055119",
    "end": "2060480"
  },
  {
    "text": "secret sport of you know customizing your git log so i'd encourage you to own",
    "start": "2060480",
    "end": "2065599"
  },
  {
    "text": "your gate and come up with what you think is the best version of a git log",
    "start": "2065599",
    "end": "2072079"
  },
  {
    "text": "and there is another one and this is gold which is git rep log it's another",
    "start": "2072079",
    "end": "2077520"
  },
  {
    "text": "way to look at your history but this time instead of calling on your parents it will look at your own path it will",
    "start": "2077520",
    "end": "2084240"
  },
  {
    "text": "follow your own head a brace hud um red log can be compared to animal",
    "start": "2084240",
    "end": "2090079"
  },
  {
    "text": "tracks in the snow because it shows where they have been regardless of boundaries",
    "start": "2090079",
    "end": "2095679"
  },
  {
    "text": "so it is basically an ordered list of commit your head has pointed to or a control z",
    "start": "2095679",
    "end": "2103200"
  },
  {
    "text": "it's literally retracing your steps reflog can be quite detailed as you can",
    "start": "2103200",
    "end": "2109280"
  },
  {
    "text": "see there and it's one of the most life saving commits in kit as you can see nearly everything you've",
    "start": "2109280",
    "end": "2116000"
  },
  {
    "text": "touched in your repo however note that the ref log is not part of",
    "start": "2116000",
    "end": "2122400"
  },
  {
    "text": "your repo itself it's purely local so when garbage collection happens you are",
    "start": "2122400",
    "end": "2127839"
  },
  {
    "text": "at risk of losing orphan commits because they will not show there anymore",
    "start": "2127839",
    "end": "2134800"
  },
  {
    "text": "and to finish the basics you can't miss about git we need to cover the three",
    "start": "2134880",
    "end": "2140960"
  },
  {
    "text": "trees of git as well you may be familiar with these git status messages",
    "start": "2140960",
    "end": "2147040"
  },
  {
    "text": "so the first one in red is when you create an untracked file or you make",
    "start": "2147040",
    "end": "2152640"
  },
  {
    "text": "some edits and doesn't don't have and you haven't",
    "start": "2152640",
    "end": "2158160"
  },
  {
    "text": "added them yet the second one is when you did a git ad but did haven't committed yet and the",
    "start": "2158160",
    "end": "2164320"
  },
  {
    "text": "last one you are done industry right you go home to netflix right so these messages reveal what's",
    "start": "2164320",
    "end": "2171520"
  },
  {
    "text": "happening in the three trees of git not the object trees but git as a collection",
    "start": "2171520",
    "end": "2177760"
  },
  {
    "text": "of files so the three trees of kit are composed",
    "start": "2177760",
    "end": "2182880"
  },
  {
    "text": "of head index and working directory we already know what the uppercase head",
    "start": "2182880",
    "end": "2189119"
  },
  {
    "text": "is so let's talk about the index we've mentioned the word index a few",
    "start": "2189119",
    "end": "2194160"
  },
  {
    "text": "times already and some people refer to it as a staging area too the index is one of the files",
    "start": "2194160",
    "end": "2201920"
  },
  {
    "text": "in your git repo in the format of a manifest when you check out a branch",
    "start": "2201920",
    "end": "2208720"
  },
  {
    "text": "the checkout will populate your index and make your working directory look the",
    "start": "2208720",
    "end": "2214160"
  },
  {
    "text": "same and the index is what your files look like",
    "start": "2214160",
    "end": "2220320"
  },
  {
    "text": "at the moment of checkout and as you work and commit your changes",
    "start": "2220320",
    "end": "2225520"
  },
  {
    "text": "the index gets updated with new versions of your files",
    "start": "2225520",
    "end": "2230880"
  },
  {
    "text": "and although the git is the the index is in a manifest format with that command",
    "start": "2230880",
    "end": "2236000"
  },
  {
    "text": "git ls files dash s you are able to see what your index is made of",
    "start": "2236000",
    "end": "2242480"
  },
  {
    "text": "and lastly we have the working directory remember in the beginning when i showed",
    "start": "2242480",
    "end": "2248640"
  },
  {
    "text": "you my spice girls brand and you know that it was not my git repo that was my",
    "start": "2248640",
    "end": "2254079"
  },
  {
    "text": "working tree that is another name for working directory so that is what we are talking",
    "start": "2254079",
    "end": "2260560"
  },
  {
    "text": "about the index and the head store content in a compact way that is not super human",
    "start": "2260560",
    "end": "2267040"
  },
  {
    "text": "friendly but when you check out git will give you",
    "start": "2267040",
    "end": "2273359"
  },
  {
    "text": "files that are ready to be edited and are human friendly so it's all unpacked into your working",
    "start": "2273359",
    "end": "2280560"
  },
  {
    "text": "directory and have you ever noticed that when you",
    "start": "2280560",
    "end": "2286079"
  },
  {
    "text": "open your project folder you know using your windows explorer or whatever uh",
    "start": "2286079",
    "end": "2291440"
  },
  {
    "text": "sometimes your files have a different content or there are extra files or they are",
    "start": "2291440",
    "end": "2297760"
  },
  {
    "text": "missing files or no files at all that is why because whatever is in your",
    "start": "2297760",
    "end": "2303119"
  },
  {
    "text": "working directory is kind of a borrowed file from your index so when you change",
    "start": "2303119",
    "end": "2308320"
  },
  {
    "text": "your your branch you are automatically change what shows in your working directory",
    "start": "2308320",
    "end": "2315680"
  },
  {
    "text": "and there's more to be said about git internal workings and i'd love to cover",
    "start": "2315839",
    "end": "2320880"
  },
  {
    "text": "how to undo things but we don't have enough time for that but if you understood well what we have",
    "start": "2320880",
    "end": "2326640"
  },
  {
    "text": "covered so far you now have enough tools to explore git by yourself",
    "start": "2326640",
    "end": "2331920"
  },
  {
    "text": "and knowing that you can keep your call because most of your operations will not",
    "start": "2331920",
    "end": "2337920"
  },
  {
    "text": "be lost there are certainly a few risky operations that may lead you to losing content but",
    "start": "2337920",
    "end": "2346160"
  },
  {
    "text": "you will rarely lose content unintentionally but i wouldn't un-traumatize you if i",
    "start": "2346160",
    "end": "2353440"
  },
  {
    "text": "never mentioned the operations that put you at risk right so this is a list of commands that can",
    "start": "2353440",
    "end": "2361119"
  },
  {
    "text": "change whatever you have stored in your git commit",
    "start": "2361119",
    "end": "2366240"
  },
  {
    "text": "and there is less column here wd safe uh it means is it working directory safe so",
    "start": "2366240",
    "end": "2374000"
  },
  {
    "text": "if you change whatever is in your past as long as there is a yes you're safe",
    "start": "2374000",
    "end": "2379280"
  },
  {
    "text": "nothing you will lose nothing but you will see that if you run get reset hard",
    "start": "2379280",
    "end": "2384960"
  },
  {
    "text": "or get checked out commit with a path you are at risk of losing things",
    "start": "2384960",
    "end": "2391920"
  },
  {
    "text": "and let's explore why well first remember that the working",
    "start": "2391920",
    "end": "2398400"
  },
  {
    "text": "directory is the most vulnerable area you haven't get because it is actually",
    "start": "2398400",
    "end": "2405040"
  },
  {
    "text": "the things that you are working on right now that are only saved on your local machine you know it's not stored in git",
    "start": "2405040",
    "end": "2411599"
  },
  {
    "text": "yet until you add and commit so let's move on and see the difference",
    "start": "2411599",
    "end": "2417440"
  },
  {
    "text": "between a checkout and a reset so when you check out the what you're",
    "start": "2417440",
    "end": "2422960"
  },
  {
    "text": "doing is um basically moving your head as we already covered and you can do this for a",
    "start": "2422960",
    "end": "2429920"
  },
  {
    "text": "single commit but when you reset you are moving not only your head",
    "start": "2429920",
    "end": "2435440"
  },
  {
    "text": "but also the tip of your branch and that is the danger of it because if you see",
    "start": "2435440",
    "end": "2440880"
  },
  {
    "text": "in the second one with the reset the two left commits they are kind of left",
    "start": "2440880",
    "end": "2446640"
  },
  {
    "text": "behind so you might also remember that uh there are three types of reset right get",
    "start": "2446640",
    "end": "2455119"
  },
  {
    "text": "reset stopped mixed which is the default option and reset hard",
    "start": "2455119",
    "end": "2460480"
  },
  {
    "text": "the dangerous one is the reset hard because differently to check out",
    "start": "2460480",
    "end": "2468160"
  },
  {
    "text": "uh reset heart will just erase anything you have in your working directory the",
    "start": "2468160",
    "end": "2473599"
  },
  {
    "text": "checkout will keep your working directory as as it was but reset hard we'll just not care about",
    "start": "2473599",
    "end": "2480880"
  },
  {
    "text": "it just delete everything and the commits that you had before will be offering",
    "start": "2480880",
    "end": "2486960"
  },
  {
    "text": "so um if you ever find yourself in a situation that you did a git reset hard and you",
    "start": "2486960",
    "end": "2493200"
  },
  {
    "text": "are desperate because oh my god that commits those commits were relevant and i need them back",
    "start": "2493200",
    "end": "2500000"
  },
  {
    "text": "relax drink some water and then run a git wrap log why because if your head at any point",
    "start": "2500000",
    "end": "2507520"
  },
  {
    "text": "have visited those two commits you can still check uh check out them using the hash",
    "start": "2507520",
    "end": "2513280"
  },
  {
    "text": "value again don't trust it because you know if there was garbage collection they might",
    "start": "2513280",
    "end": "2519200"
  },
  {
    "text": "be lost but it's still your last hope so fingers crossed is still there anyway",
    "start": "2519200",
    "end": "2525280"
  },
  {
    "text": "just run your git reset hard when you are absolutely sure that you don't need anything else that is being left behind",
    "start": "2525280",
    "end": "2532319"
  },
  {
    "text": "okay and the other operation that can make you lose content is a checkout with a",
    "start": "2532319",
    "end": "2539680"
  },
  {
    "text": "path and why is that so when you run a git checkout with a pod",
    "start": "2539680",
    "end": "2544720"
  },
  {
    "text": "you are not moving your head you're just updating your index and there is a side effect to that the",
    "start": "2544720",
    "end": "2551839"
  },
  {
    "text": "index will also update your working directory this is dangerous because it will wipe",
    "start": "2551839",
    "end": "2559119"
  },
  {
    "text": "out your working directory but it is very useful when you mess up your file in such a way that you just pray oh my",
    "start": "2559119",
    "end": "2566079"
  },
  {
    "text": "god i need to start all over again so you can run this command and instead of",
    "start": "2566079",
    "end": "2571680"
  },
  {
    "text": "checking out copying whatever you had before checking out again and ctrl v you",
    "start": "2571680",
    "end": "2576960"
  },
  {
    "text": "can just do this and this is a awesome way to reset the working file that you",
    "start": "2576960",
    "end": "2582240"
  },
  {
    "text": "just messed up [Music]",
    "start": "2582240",
    "end": "2587920"
  },
  {
    "text": "and apart from these two commands reset hard and check out with a path",
    "start": "2587920",
    "end": "2593920"
  },
  {
    "text": "you can be pretty sure that you will not lose content otherwise",
    "start": "2593920",
    "end": "2599119"
  },
  {
    "text": "another advantage of knowing the ins and outs of kit is that you have a better appreciation for commit messages",
    "start": "2599119",
    "end": "2606640"
  },
  {
    "text": "you know we over time we became so reliant on messages from full requests or merge requests",
    "start": "2606640",
    "end": "2613200"
  },
  {
    "text": "and if we need to debug or fix cold errors very few people can actually do a",
    "start": "2613200",
    "end": "2619440"
  },
  {
    "text": "git revert or get cherry pick because their commits are way too long or they",
    "start": "2619440",
    "end": "2624480"
  },
  {
    "text": "kind of mean nothing so giving small commits and well detailed",
    "start": "2624480",
    "end": "2630960"
  },
  {
    "text": "will be your friend in the future you can also change history",
    "start": "2630960",
    "end": "2637040"
  },
  {
    "text": "uh yeah marty mcfly is not there at random but it is a bit of a controversial topic",
    "start": "2637040",
    "end": "2643119"
  },
  {
    "text": "and people have very strong opinions about it but there is one thing that unites all",
    "start": "2643119",
    "end": "2648880"
  },
  {
    "text": "tribes don't you dare change history in public branches it can be a disaster for",
    "start": "2648880",
    "end": "2654960"
  },
  {
    "text": "everyone and by changing history i mean for example amending your commit messages",
    "start": "2654960",
    "end": "2660319"
  },
  {
    "text": "because of a typo or reordering commits or squashing commits splitting commits",
    "start": "2660319",
    "end": "2665440"
  },
  {
    "text": "and loads more so rule of thumb do whatever you want in your local branch but once you push it forget about",
    "start": "2665440",
    "end": "2672640"
  },
  {
    "text": "it it's public domain now and by taking ownership of your use of",
    "start": "2672640",
    "end": "2678720"
  },
  {
    "text": "git you can reason and even use your intuition to get out of trouble",
    "start": "2678720",
    "end": "2683839"
  },
  {
    "text": "so let's see what problems we can solve with a simple git checkout",
    "start": "2683839",
    "end": "2689040"
  },
  {
    "text": "the main page says sketch account switch branches or restore working three files",
    "start": "2689040",
    "end": "2697280"
  },
  {
    "text": "so it says i can switch branches can i switch to a branch that doesn't exist yet",
    "start": "2697599",
    "end": "2703599"
  },
  {
    "text": "yes you put a dash b and you create a new branch this is super handy when you",
    "start": "2703599",
    "end": "2708640"
  },
  {
    "text": "are working and out of the blue you realize oh no i'm working in maine what do i do now i",
    "start": "2708640",
    "end": "2714880"
  },
  {
    "text": "don't want to lose my work you just check out b and all the things that you have in your working",
    "start": "2714880",
    "end": "2720960"
  },
  {
    "text": "directory will be transferred to this new branch and main will be like it was before as if you never",
    "start": "2720960",
    "end": "2727119"
  },
  {
    "text": "touched it um next you know git checkout mentions restore",
    "start": "2727119",
    "end": "2734240"
  },
  {
    "text": "working tree files can i restore a file i just ruined since my last commit",
    "start": "2734240",
    "end": "2740160"
  },
  {
    "text": "yes we saw the git checkout and the password file remember this will wipe out what you you",
    "start": "2740160",
    "end": "2747200"
  },
  {
    "text": "have in your working directory but your uh your file will be brand new as you",
    "start": "2747200",
    "end": "2753280"
  },
  {
    "text": "had in your last checkout but restore just a copy paste from a",
    "start": "2753280",
    "end": "2759440"
  },
  {
    "text": "certain commit right can i then restore a file from an even older commit in my branch",
    "start": "2759440",
    "end": "2765920"
  },
  {
    "text": "yes you do check out use the hash value from in your branch and pass through the file",
    "start": "2765920",
    "end": "2773680"
  },
  {
    "text": "but if i can restore from a commit in my current branch so this means that i can also do it for any",
    "start": "2773680",
    "end": "2780720"
  },
  {
    "text": "other branch i can use any hash right yes you can check out the good branch name",
    "start": "2780720",
    "end": "2787680"
  },
  {
    "text": "and then the pass through the file and to close let me share a quote from a",
    "start": "2787680",
    "end": "2793440"
  },
  {
    "text": "book called death comes at the end by agatha christie fear is incomplete",
    "start": "2793440",
    "end": "2799440"
  },
  {
    "text": "knowledge i hope that you build up a bit more of",
    "start": "2799440",
    "end": "2804640"
  },
  {
    "text": "your knowledge around kit and that this will help you to conquer your fear",
    "start": "2804640",
    "end": "2810319"
  },
  {
    "text": "and now that you have the main bricks and you know about them you know what makes git uh feel free to go on and",
    "start": "2810319",
    "end": "2817599"
  },
  {
    "text": "explore it by yourself create a dummy repo and play around feel free because you know everything is safe",
    "start": "2817599",
    "end": "2824640"
  },
  {
    "text": "there unless you do this those two things and feel free to boldly go where everyone has gone before",
    "start": "2824640",
    "end": "2832160"
  },
  {
    "text": "because git is all about your best right thank you very much",
    "start": "2832160",
    "end": "2838040"
  }
]