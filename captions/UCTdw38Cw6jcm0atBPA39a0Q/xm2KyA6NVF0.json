[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "who saw my talk yesterday yeah and with okay so the first slides have nothing to",
    "start": "4660",
    "end": "10840"
  },
  {
    "text": "do with my talks and I'll go fast because they the same as yesterday this",
    "start": "10840",
    "end": "16690"
  },
  {
    "text": "is like just ensure I work at a company called Christy we do projectors what I do is called projection mapping where",
    "start": "16690",
    "end": "22480"
  },
  {
    "text": "you take a bunch of projectors and make it look like one projector by stitching it all together and we do it on really",
    "start": "22480",
    "end": "30010"
  },
  {
    "text": "giant screens there could be a whole pile of projectors on that screen and we do it on ice surfaces in basketball",
    "start": "30010",
    "end": "36100"
  },
  {
    "text": "courts and stuff like that and you watch the beginning opening of a sport thing we doing on giant buildings like",
    "start": "36100",
    "end": "42129"
  },
  {
    "text": "Canadian Parliament that's Moscow there's a that at the",
    "start": "42129",
    "end": "47140"
  },
  {
    "text": "bottom there it's a link to a YouTube video of that being lit up and it's really well aligned to the building and",
    "start": "47140",
    "end": "53199"
  },
  {
    "text": "that's a great car car is whatever color you would like it to be because we project the color onto the car you can",
    "start": "53199",
    "end": "59499"
  },
  {
    "text": "see at the bottom there that it's actually just a dark grey car so that's",
    "start": "59499",
    "end": "64870"
  },
  {
    "text": "not yellow that's great or red or blue in the cars you know it's a little model",
    "start": "64870",
    "end": "70149"
  },
  {
    "text": "it's this big and even the like the brakes and the wheels and everything the",
    "start": "70149",
    "end": "76810"
  },
  {
    "text": "calipers is all projected onto the car and then that's what how we do it you",
    "start": "76810",
    "end": "82210"
  },
  {
    "text": "shine some light shine some patterns and then you know where the object is but that's what I do at work I'm not gonna talk about that I'm kind of gonna talk",
    "start": "82210",
    "end": "88930"
  },
  {
    "text": "about that actually they'd be a little bit of code from from my work but I'm just gonna talk about coding in general so I guess you know nothing but it's an",
    "start": "88930",
    "end": "95740"
  },
  {
    "text": "interesting topic but someday I'll talk about it more more in depth this talk is",
    "start": "95740",
    "end": "100929"
  },
  {
    "start": "100000",
    "end": "498000"
  },
  {
    "text": "words of wisdom and I'm Tony vineyard finally put my Twitter handle up there",
    "start": "100929",
    "end": "105939"
  },
  {
    "text": "cuz that's why I give talks so you follow me on Twitter and Who am I to",
    "start": "105939",
    "end": "111490"
  },
  {
    "text": "give so it's words of wisdom they're not mostly not my words of wisdom but do I even have the credentials to like you",
    "start": "111490",
    "end": "117759"
  },
  {
    "text": "know edit these words of wisdom together well here's a quote because it's all about quotes Tony's code is righteous",
    "start": "117759",
    "end": "124119"
  },
  {
    "text": "herb Sutter right and that is that is directly from an email to the committee",
    "start": "124119",
    "end": "129399"
  },
  {
    "text": "and herb even said it was okay for me to show a committee email because it's his email and and the very beginning of it",
    "start": "129399",
    "end": "137110"
  },
  {
    "text": "is Tony's code is righteous it actually says and any coding standard that bans it should be dragged through",
    "start": "137110",
    "end": "142990"
  },
  {
    "text": "sewage and pilloried pilloried it's the like you know block thing in the old",
    "start": "142990",
    "end": "148360"
  },
  {
    "text": "medieval times and he just goes on and on about how he's gonna not talk about",
    "start": "148360",
    "end": "153850"
  },
  {
    "text": "it my how much he feels about it but then he keeps going on about how great it is tony's code falls every good",
    "start": "153850",
    "end": "160300"
  },
  {
    "text": "practices that be strongly encouraged and i mean a little bit of context this was some sample code about multiple",
    "start": "160300",
    "end": "168040"
  },
  {
    "text": "returns as being an okay thing but i'm sure he wasn't talking just about my one example i'm sure he was talking about",
    "start": "168040",
    "end": "173650"
  },
  {
    "text": "all the code i've ever written and ever will ever will write i know i doubt I'm taking him out of context so tony's good",
    "start": "173650",
    "end": "181060"
  },
  {
    "text": "was righteous and you know i'm clicking next i just really like this slide I've",
    "start": "181060",
    "end": "187300"
  },
  {
    "text": "got three copies of it uh yarn has said things about my you know this this is",
    "start": "187300",
    "end": "193510"
  },
  {
    "text": "what Bjorn says in in committee emails you say something fairly intelligent once in a while plus one that's all that's all you get I",
    "start": "193510",
    "end": "201180"
  },
  {
    "text": "have gotten nice rule of thumb and I did get a nicely put recently so I've got",
    "start": "201180",
    "end": "208239"
  },
  {
    "text": "about like I so the plus ones and everything I print them out I print out the email and I put it on my on my wall",
    "start": "208239",
    "end": "214330"
  },
  {
    "text": "you know at work so if I get an argument someone about something and say no no look plus one yarn said I'm right about",
    "start": "214330",
    "end": "221050"
  },
  {
    "text": "this so anyhow so here's just the the",
    "start": "221050",
    "end": "228340"
  },
  {
    "text": "you know when yet when you have like multiple courses and like a really fancy meal at a fancy restaurant and so",
    "start": "228340",
    "end": "233860"
  },
  {
    "text": "multiple course meal and between each course they give you like something - like cleanse your palate so I've got",
    "start": "233860",
    "end": "239410"
  },
  {
    "text": "these these classic clich√©s or just like something for it to cleanse your brain for a second it has nothing to do with",
    "start": "239410",
    "end": "244780"
  },
  {
    "text": "my talk hardly it's two separate sections of my talk so the first section is this one",
    "start": "244780",
    "end": "251370"
  },
  {
    "text": "so we all know what he said right he said copy or copy not there is no",
    "start": "255030",
    "end": "261790"
  },
  {
    "text": "shallow okay people get that wrong all time I don't know why they think it he said something else and this is such a",
    "start": "261790",
    "end": "269230"
  },
  {
    "text": "fundamental thing in in C++ and I mean I've run into it",
    "start": "269230",
    "end": "274450"
  },
  {
    "text": "I had to more explain it to in other languages like Java and stuff of like should should you just copy the like you",
    "start": "274450",
    "end": "281530"
  },
  {
    "text": "know if you have a class with internal references or internal pointers should you copy it deep or shallow and it's like there's only one answer to this",
    "start": "281530",
    "end": "288810"
  },
  {
    "text": "because copying is just the most fundamental piece of C++ and you know",
    "start": "288810",
    "end": "296020"
  },
  {
    "text": "not just master Yoda but master stepping off Alec stepping off he wrote the STL",
    "start": "296020",
    "end": "301110"
  },
  {
    "text": "he's got this set of concepts of like when you construct a thing from another",
    "start": "301110",
    "end": "306550"
  },
  {
    "text": "thing then they better be equal after that construction and if you assign it it's also the same and if you",
    "start": "306550",
    "end": "311590"
  },
  {
    "text": "have two things that are equal a and B both equals C and you change one of them then while be still equals C and a",
    "start": "311590",
    "end": "318130"
  },
  {
    "text": "doesn't equal B anymore an important part of that last one is that when you make a copy it's distinct from the other",
    "start": "318130",
    "end": "323500"
  },
  {
    "text": "one like you copy an int those two ins aren't tied together anymore right you don't want you know Einstein a",
    "start": "323500",
    "end": "330840"
  },
  {
    "text": "action spooky action at a distance when you change this object in this object over here changes right you need the",
    "start": "330840",
    "end": "336370"
  },
  {
    "text": "objects to be distinct and that sounds very basic and simple but we get it wrong all the time including the",
    "start": "336370",
    "end": "343150"
  },
  {
    "text": "committee and but it's fundamental like C++ is the only problem probably",
    "start": "343150",
    "end": "349390"
  },
  {
    "text": "possibly the only language where you can override the copy constructor yet the",
    "start": "349390",
    "end": "354730"
  },
  {
    "text": "compilers like I know what a copy constructor is supposed to do and I will not call it whenever I don't want to",
    "start": "354730",
    "end": "359800"
  },
  {
    "text": "call it all right you can just delete you know just get rid of that copy even if it had side effects or whatever because the language is like your copy",
    "start": "359800",
    "end": "367150"
  },
  {
    "text": "shouldn't have side effects and it shouldn't be doing anything weird a copy should be a copy and also think of what",
    "start": "367150",
    "end": "374850"
  },
  {
    "text": "compilers do to in optimizations right with normal int sand things modern you",
    "start": "374850",
    "end": "381010"
  },
  {
    "text": "know native types compilers will do hosting and sub-expression elimination and all these",
    "start": "381010",
    "end": "387700"
  },
  {
    "text": "kind of optimation optimizations that they do knowing how an integer work that you can you know make a copy you can do",
    "start": "387700",
    "end": "393250"
  },
  {
    "text": "all these things and it can't necessarily do that with your classes because it can't be sure what's going on with your class but if a compiler can't",
    "start": "393250",
    "end": "401080"
  },
  {
    "text": "do it you still do it in your code all the time you write code like simple code like this where you're like oh there's",
    "start": "401080",
    "end": "407410"
  },
  {
    "text": "the old one I make a change and I'll return you what what it used to be or like you know that's like plus plus",
    "start": "407410",
    "end": "412690"
  },
  {
    "text": "operator you know we'll have to do that the post increment plus plus or just like you you just have an expression and",
    "start": "412690",
    "end": "419770"
  },
  {
    "text": "you save that as a temporary then you reuse it all the place you do this all the time like you move code around",
    "start": "419770",
    "end": "424810"
  },
  {
    "text": "knowing that a copy is a copy and and I can make a temporary and not worry how",
    "start": "424810",
    "end": "430000"
  },
  {
    "text": "that affects the other thing so whenever you're at a class that doesn't do that someone's gonna you know be confused",
    "start": "430000",
    "end": "436270"
  },
  {
    "text": "because it's such an assumption yet we break the rule a lot that's stepping off",
    "start": "436270",
    "end": "444310"
  },
  {
    "text": "and more more from Yoda on this so what",
    "start": "444310",
    "end": "455229"
  },
  {
    "text": "was the last thing he said the last one oh I didn't really mean to hear that",
    "start": "455229",
    "end": "460479"
  },
  {
    "text": "again he said state leads to suffering state",
    "start": "460479",
    "end": "467800"
  },
  {
    "text": "leads to objects right you've got a some state you want to keep track of that state so you put it in an object and okay now you've got objects when we've",
    "start": "467800",
    "end": "473950"
  },
  {
    "text": "got a bunch of objects you need to have you know people interact with these objects so you have references to these objects and then when you got references",
    "start": "473950",
    "end": "479860"
  },
  {
    "text": "and I got a reference and you got a reference we start sharing these references and now they got sharing and now you got entanglement and",
    "start": "479860",
    "end": "485080"
  },
  {
    "text": "entanglement leads to suffering right so state leads to suffering I mean we have",
    "start": "485080",
    "end": "490990"
  },
  {
    "text": "the secondary problem of you know programs are all about state so it's a hard problem to get away from but we",
    "start": "490990",
    "end": "496240"
  },
  {
    "text": "have to you have to be aware of it and see that's about objects and copy and",
    "start": "496240",
    "end": "503080"
  },
  {
    "start": "498000",
    "end": "758000"
  },
  {
    "text": "stuff is about values and you know I you kind of use these terms loosely but what",
    "start": "503080",
    "end": "508360"
  },
  {
    "text": "am I trying to mean here typically something like a button is an object right there it is it's a button you",
    "start": "508360",
    "end": "513820"
  },
  {
    "text": "don't have a copy constructor on a button you don't just make a copy of a button because then you would have two buttons showing up in your you",
    "start": "513820",
    "end": "519289"
  },
  {
    "text": "or something like that typically you don't do that but and in some languages",
    "start": "519289",
    "end": "524720"
  },
  {
    "text": "like you have and other object-oriented languages you know you have objects all over the place and it's kind of good typically that they're not copyable and",
    "start": "524720",
    "end": "530899"
  },
  {
    "text": "an object is this thing and it changes over time and it adds a long lifetime and then objects can have relationships",
    "start": "530899",
    "end": "536990"
  },
  {
    "text": "between each other where a value is kind of like an int or string they tend to be copyable and I've got",
    "start": "536990",
    "end": "543620"
  },
  {
    "text": "these weird words that kind of think how does this make any sense that they're immutable ephemera bol and timeless how",
    "start": "543620",
    "end": "550579"
  },
  {
    "text": "can you be both ephemeral and timeless and you know int and string are not",
    "start": "550579",
    "end": "555740"
  },
  {
    "text": "immutable right but the number 17 is immutable it's always 17 right",
    "start": "555740",
    "end": "560810"
  },
  {
    "text": "that number will temporarily be in a string in an integer somewhere but the number is always 17 the int can change",
    "start": "560810",
    "end": "567680"
  },
  {
    "text": "but that's kind of just a temporary thing that kind of flows through your program usually right you tend to have",
    "start": "567680",
    "end": "572889"
  },
  {
    "text": "these are these are types that come and go through your program that's why it's kind of on one hand ephemeral and",
    "start": "572889",
    "end": "578630"
  },
  {
    "text": "they'll and they're timeless and you get you know math but I don't just mean math",
    "start": "578630",
    "end": "584839"
  },
  {
    "text": "on integers and numbers but math in general in the sense of you write functions that take values in and they",
    "start": "584839",
    "end": "590839"
  },
  {
    "text": "return a value out and when you do that then your code is more mathematical I mean your codes more mathematical it's",
    "start": "590839",
    "end": "596000"
  },
  {
    "text": "more easy to reason about so you have these two you know sides to things that",
    "start": "596000",
    "end": "601399"
  },
  {
    "text": "kind of fight each other and you need both in a program but the question is how much of one and how much of the",
    "start": "601399",
    "end": "606560"
  },
  {
    "text": "other and you got this especially when I have taught I've taught the C++ that you have a programmers before and the first thing",
    "start": "606560",
    "end": "612920"
  },
  {
    "text": "they worry about is pointers right oh I don't want to deal with pointers I'm like Java only has pointers like you",
    "start": "612920",
    "end": "618050"
  },
  {
    "text": "don't think about it but it's like every reference is a pointer but now if you work with value types you can just it's",
    "start": "618050",
    "end": "623660"
  },
  {
    "text": "not like oh no pointers it's oh no pointers you don't you don't need to have a pointer ever ever anywhere right",
    "start": "623660",
    "end": "628760"
  },
  {
    "text": "vector hides a pointer inside of it but you don't have to ever see it you can treat it like a value and with move",
    "start": "628760",
    "end": "636019"
  },
  {
    "text": "semantics can pass it back like a value passed in like a value and then my question that I often think about and",
    "start": "636019",
    "end": "643730"
  },
  {
    "text": "ask other people is the queen of clubs is the queen of clubs kind of like an object or is it kind of like a value",
    "start": "643730",
    "end": "649160"
  },
  {
    "text": "right and I was actually writing my kids are always like why don't you ever write or something so I'm like okay I'll write",
    "start": "649160",
    "end": "654480"
  },
  {
    "text": "a card game and it's like okay class card card has a you know rank a number",
    "start": "654480",
    "end": "659910"
  },
  {
    "text": "and then a suit you know clubs diamonds whatever and that's just it's got a number in a new minute and say okay",
    "start": "659910",
    "end": "665910"
  },
  {
    "text": "great and it's like copy constructor all right that's kind of normal I was like wait a second",
    "start": "665910",
    "end": "671040"
  },
  {
    "text": "should the queen of clubs have a copy constructor do I want to end up with two queens of clubs in my code I was like oh",
    "start": "671040",
    "end": "676470"
  },
  {
    "text": "that's probably you know I'm gonna screw up if I ever have a copy constructor on the queen of clubs so I that like that's",
    "start": "676470",
    "end": "684209"
  },
  {
    "text": "basically this is why I never finished the game oh yeah this is a tricky",
    "start": "684209",
    "end": "689370"
  },
  {
    "text": "problem do I make this class kind of like an object or do we make it kind of like a and and you know the other thing I should mention is anything that is a",
    "start": "689370",
    "end": "695579"
  },
  {
    "text": "value like an int or a string or something you can easily make it into an object take an integer and make it a",
    "start": "695579",
    "end": "700649"
  },
  {
    "text": "static in your clock in your program suddenly its object like because everyone can reference it and everything",
    "start": "700649",
    "end": "705689"
  },
  {
    "text": "now it's a thing that lasts and acts more like an object so it's not it's not so much these aren't like a type is",
    "start": "705689",
    "end": "711720"
  },
  {
    "text": "either one of the other it's kind of the semantics of how you use it but often when you make it class you you know what",
    "start": "711720",
    "end": "717629"
  },
  {
    "text": "kind of semantics you're going for and you'll lean one way or the other so the you know I'm still torn on this question",
    "start": "717629",
    "end": "723720"
  },
  {
    "text": "of whether the queen of clubs because there should only be one of them unless you're you know using a multi deck thing",
    "start": "723720",
    "end": "728850"
  },
  {
    "text": "but you know it's it's in your hand it's a thing that has relationships as well it's like in your hand or it's played on",
    "start": "728850",
    "end": "734730"
  },
  {
    "text": "the table or whatever um so I'll let you guys think about that to ask me ask me",
    "start": "734730",
    "end": "740279"
  },
  {
    "text": "later or tell me later what you think but there is a philosopher out there Socrates if you postulate a universe",
    "start": "740279",
    "end": "745379"
  },
  {
    "text": "composed of objects truth is eliminated I don't know what that means but you know but it's about objects he",
    "start": "745379",
    "end": "752639"
  },
  {
    "text": "doesn't seem to like them another philosopher said Sean parent no",
    "start": "752639",
    "end": "759889"
  },
  {
    "start": "758000",
    "end": "985000"
  },
  {
    "text": "programmer philosopher yeah everyone knows Sean parent you should watch all his videos seriously every video he's",
    "start": "759889",
    "end": "767639"
  },
  {
    "text": "got oh he's a developer at Adobe senior been there forever",
    "start": "767639",
    "end": "773389"
  },
  {
    "text": "you just you should all know who Sean parent is and watch all his videos he has this thing called incidental data",
    "start": "773939",
    "end": "779879"
  },
  {
    "text": "structures and even though that's not even a complete sentence I kind of think I know what he's talking about and so if",
    "start": "779879",
    "end": "785939"
  },
  {
    "text": "you have kind of contact like a contact person on your phone that maybe that contact has a",
    "start": "785939",
    "end": "791310"
  },
  {
    "text": "location where the person lives you can think of that even if it's like two separate objects possibly I mean in in",
    "start": "791310",
    "end": "798090"
  },
  {
    "text": "C++ you'd probably just have it an embedded member but in some other languages it might be two separate objects with a pointer or reference you",
    "start": "798090",
    "end": "805770"
  },
  {
    "text": "treat the whole thing as a single object right it's a single data data structure and then you might have another one over",
    "start": "805770",
    "end": "811020"
  },
  {
    "text": "there right okay that's fine but then you might do something like make a copy that's - that's shallow or maybe these",
    "start": "811020",
    "end": "817890"
  },
  {
    "text": "two peoples are just living together whatever they're now sharing a location okay fine it's still you know two data",
    "start": "817890",
    "end": "823740"
  },
  {
    "text": "structures sharing a location and Shawn's like no that is not two data structures that are overlapped that is one data structure and and this is kind",
    "start": "823740",
    "end": "831330"
  },
  {
    "text": "of a made-up example but think of your code base how much of your code base is filled with objects that point to other",
    "start": "831330",
    "end": "838020"
  },
  {
    "text": "objects and you think oh these are all just separate things but they are all interrelated and they got pointers to each other and they're entangled and",
    "start": "838020",
    "end": "844380"
  },
  {
    "text": "Shawn's whole concept is find that data structure that is hiding inside your program and rip the thing out and",
    "start": "844380",
    "end": "851760"
  },
  {
    "text": "encapsulate it into an actual class that is like this is the class that has all these relationships and this class will",
    "start": "851760",
    "end": "857730"
  },
  {
    "text": "manage it because right now in your code base that management is just spread out all over the place at least that's a my",
    "start": "857730",
    "end": "864870"
  },
  {
    "text": "code base every code base I've ever seen has this problem of you you think you've got all these little data structures",
    "start": "864870",
    "end": "870420"
  },
  {
    "text": "that are independent and you want to keep them independent but who's managing all the relationships those relationships are just like hey don't",
    "start": "870420",
    "end": "876720"
  },
  {
    "text": "forget and it's like you tell another developer instead of it just being built into the code so that's called instant",
    "start": "876720",
    "end": "883170"
  },
  {
    "text": "data structure and I've tried to wonder about that on this this problem of maybe the queen of clubs is just a member of a",
    "start": "883170",
    "end": "891180"
  },
  {
    "text": "bigger data structure called the deck of cards or the state of the game or whatever that you know maybe this will",
    "start": "891180",
    "end": "896970"
  },
  {
    "text": "help solve where is the value because once you pull out your incidental data structure like Photoshop the the docq",
    "start": "896970",
    "end": "906360"
  },
  {
    "text": "the Photoshop document has this giant image in and whatever else in it that's a value type in in Photoshop you make a",
    "start": "906360",
    "end": "913890"
  },
  {
    "text": "copy of that when you do an undo and it's like wait a second I've got like this 20 Meg or 200 mega image and it just makes a copy on undo",
    "start": "913890",
    "end": "920769"
  },
  {
    "text": "course it has a very efficient copy at cheats and whatever underneath the surface but as a programmer you just make a copy of the document you put it",
    "start": "920769",
    "end": "927670"
  },
  {
    "text": "in the undo stack you know it magically only copies the part that changed but it",
    "start": "927670",
    "end": "933759"
  },
  {
    "text": "acts like a like a value type and that's what everything Shawn writes is like a",
    "start": "933759",
    "end": "938769"
  },
  {
    "text": "value type so and another beautiful Shawn's my favorite quote from Shawn a",
    "start": "938769",
    "end": "945339"
  },
  {
    "text": "shared pointers as good as a global variable and that he means both a pointer that happens to be shared and",
    "start": "945339",
    "end": "950769"
  },
  {
    "text": "also shared underscore PTR for exactly those reasons is well I mean I think the",
    "start": "950769",
    "end": "956470"
  },
  {
    "text": "quote speaks for itself it's it acts like a global variable and everyone knows those are bad and so shared",
    "start": "956470",
    "end": "961809"
  },
  {
    "text": "pointer is overused and if you don't trust Shawn we can go to Shakespeare neither a borrower nor a lender be okay",
    "start": "961809",
    "end": "969149"
  },
  {
    "text": "so that's that let you think about that while I figure out what's next ah more",
    "start": "969149",
    "end": "977139"
  },
  {
    "text": "and more Star Wars obi-wan Kenobi on",
    "start": "977139",
    "end": "986069"
  },
  {
    "start": "985000",
    "end": "1426000"
  },
  {
    "text": "whoops sign verses unsigned right this is a raging argument in the committee",
    "start": "986069",
    "end": "993249"
  },
  {
    "text": "and in the C++ community about whether you sign their own signed integers for many things like size of a vector or",
    "start": "993249",
    "end": "999549"
  },
  {
    "text": "something and obviously only a Sith deals in absolutes you should use sign none",
    "start": "999549",
    "end": "1005040"
  },
  {
    "text": "unsigned and here's my example I'm writing a square root function I you",
    "start": "1005040",
    "end": "1010439"
  },
  {
    "text": "know only handle unsigned numbers so I say unsigned int and it's it's not the",
    "start": "1010439",
    "end": "1015509"
  },
  {
    "text": "most accurate square root but it's very fast it's currently I'm using",
    "start": "1015509",
    "end": "1021209"
  },
  {
    "text": "test-driven development it's currently working so far but anyhow I you know",
    "start": "1021209",
    "end": "1030480"
  },
  {
    "text": "maybe I decided to use the unsigned int because I'm like I don't want you to pass negative numbers into it I can't handle negative so far I could probably",
    "start": "1030480",
    "end": "1036688"
  },
  {
    "text": "handle negative numbers fairly well but you know if I'm if I improve this function I probably won't be able to handle negative numbers so I don't want",
    "start": "1036689",
    "end": "1043260"
  },
  {
    "text": "you be able to call it like this right yeah well that's that's the problems like oh isn't this a file error no it's",
    "start": "1043260",
    "end": "1049200"
  },
  {
    "text": "maybe at best a warning G so I'm not preventing anything from happening and",
    "start": "1049200",
    "end": "1054340"
  },
  {
    "text": "making it not my problem that you've passed the bad a bad integer but it's",
    "start": "1054340",
    "end": "1059420"
  },
  {
    "text": "not really helping that much not as much as I would like and here's a better example because this does not give a",
    "start": "1059420",
    "end": "1064880"
  },
  {
    "text": "compiler warning it and I've tried it on a number of compilers of warning settings I haven't be able to pull a warning out of this but there's a bug in",
    "start": "1064880",
    "end": "1071660"
  },
  {
    "text": "there when the vector is empty it goes",
    "start": "1071660",
    "end": "1076820"
  },
  {
    "text": "off the end right and this is this is not exactly I shortened it to a you know is sorted it's kind of a simple example",
    "start": "1076820",
    "end": "1082490"
  },
  {
    "text": "but this was straight out of our code base we were doing something bigger and of course the function was this big and",
    "start": "1082490",
    "end": "1087500"
  },
  {
    "text": "this was just a little part of it and it was comparing things beside each other and it said minus one right and we",
    "start": "1087500",
    "end": "1094669"
  },
  {
    "text": "happen to never have an empty vector so it you know is it a bug if it never",
    "start": "1094669",
    "end": "1099830"
  },
  {
    "text": "happens and tree yeah vector of one even yeah what do you",
    "start": "1099830",
    "end": "1108070"
  },
  {
    "text": "yeah it was it was it worked like it's the classic it's not correct but it",
    "start": "1108580",
    "end": "1114500"
  },
  {
    "text": "works right kids just cuz we always had lots of data and this is my answer to",
    "start": "1114500",
    "end": "1123110"
  },
  {
    "text": "you know should you signed or unsigned people expect numbers to work like numbers you expect to be able to do",
    "start": "1123110",
    "end": "1128330"
  },
  {
    "text": "subtraction and it just does something sensible unsigned numbers do not do sensible thing of subtraction they put",
    "start": "1128330",
    "end": "1135080"
  },
  {
    "text": "you off on the other end like integers at the ends don't do sensible things either they overflow and underflow but",
    "start": "1135080",
    "end": "1140870"
  },
  {
    "text": "unsigned numbers do it right near zero where all your all your numbers are all the numbers we typically use so I like",
    "start": "1140870",
    "end": "1147740"
  },
  {
    "text": "to avoid signed unsigned numbers and this is the nicely put from structure so",
    "start": "1147740",
    "end": "1154940"
  },
  {
    "text": "so don't argue with me about this if you really want to argue about sine vs on sine you have to argue against all these",
    "start": "1154940",
    "end": "1161150"
  },
  {
    "text": "people but you can go find the video the links there and everything I've given you the time codes of where they talk",
    "start": "1161150",
    "end": "1167750"
  },
  {
    "text": "about sine versus on sine and the last time the last question someone get asked them was why does standard vector and",
    "start": "1167750",
    "end": "1174500"
  },
  {
    "text": "all the standard things returned unsigned with with the size that you know size T is unsigned and they said",
    "start": "1174500",
    "end": "1179929"
  },
  {
    "text": "sorry and someone else said you we were young and foolish at the time",
    "start": "1179929",
    "end": "1187019"
  },
  {
    "text": "so you know I would like to do better and unsign would be great if it was a",
    "start": "1187019",
    "end": "1192689"
  },
  {
    "text": "stronger type but we inherited the the C rules of conversions and stuff so I",
    "start": "1192689",
    "end": "1199169"
  },
  {
    "text": "would like to do better I would like to make my own type you know like unsigned int or something my unsigned int that would be stronger and give me a compiler",
    "start": "1199169",
    "end": "1205139"
  },
  {
    "text": "errors and maybe throw or do something and I'd haven't done it for int but I've",
    "start": "1205139",
    "end": "1210809"
  },
  {
    "text": "done it for this case where I have a string right and I have this is you know",
    "start": "1210809",
    "end": "1217349"
  },
  {
    "text": "my code that does project her stuff and I also have another function hello that",
    "start": "1217349",
    "end": "1222629"
  },
  {
    "text": "gets camera it also takes a string for the ID and obviously you look at those two and you think Oh someone's gonna pass a camera ID to the string function",
    "start": "1222629",
    "end": "1229529"
  },
  {
    "text": "and pass the string i projector ID to the camera function they're gonna mix them up so I wrote a strong ID class",
    "start": "1229529",
    "end": "1235619"
  },
  {
    "text": "that says you know takes under it wraps a string but gives it a unique type so",
    "start": "1235619",
    "end": "1241499"
  },
  {
    "text": "now you can't mix up camera IDs and projector IDs nor can you pass a string",
    "start": "1241499",
    "end": "1246629"
  },
  {
    "text": "in because it won't automatically convert to an ID because and that's",
    "start": "1246629",
    "end": "1252959"
  },
  {
    "text": "because of the keyword explicit so this quote is from the keyword explicit and I have a whole paper in the Committee on",
    "start": "1252959",
    "end": "1260869"
  },
  {
    "text": "which things including like when someone proposes something for the committee",
    "start": "1260869",
    "end": "1265949"
  },
  {
    "text": "should the constructor be explicit or not and someone I've been told that half the reason they said yes to me talking",
    "start": "1265949",
    "end": "1272999"
  },
  {
    "text": "at this conference is because of this thing called Toni tables and everyone's like you did Toni tables and they're just like tables we use in the committee",
    "start": "1272999",
    "end": "1279719"
  },
  {
    "text": "this is not a this is only a toni table because it's a table that i made but it's not the classic toni table it's a",
    "start": "1279719",
    "end": "1285029"
  },
  {
    "text": "different kind of table and it's really complicated hard to understand but if you think about some class you're going",
    "start": "1285029",
    "end": "1290399"
  },
  {
    "text": "to write your middle of writing a class you got that in your mind and you're like this class is going to take a foo as a constructor and then you have to",
    "start": "1290399",
    "end": "1297029"
  },
  {
    "text": "think about is this foo you know as a constructor the same as I should just",
    "start": "1297029",
    "end": "1303809"
  },
  {
    "text": "have an example here's an example image class right it takes a char star filename which is bad for other reasons",
    "start": "1303809",
    "end": "1309979"
  },
  {
    "text": "an image class should not be the guy doing the reading that should be separate but if you had an image class",
    "start": "1309979",
    "end": "1315809"
  },
  {
    "text": "it takes a char star as in its constructor well a char star the same as an image you're",
    "start": "1315809",
    "end": "1321659"
  },
  {
    "text": "like no those are not the same thing I'm not trying to model the same platonic thing in the sense that integers try to",
    "start": "1321659",
    "end": "1326879"
  },
  {
    "text": "model the concept of number right and a string in a filename are assuring in an",
    "start": "1326879",
    "end": "1333179"
  },
  {
    "text": "image or just no way the same thing so this should be explicit because it fails",
    "start": "1333179",
    "end": "1338850"
  },
  {
    "text": "my first question right and then there's a whole bunch of other questions are like well the you know integer and",
    "start": "1338850",
    "end": "1344460"
  },
  {
    "text": "double try to model the same thing but you lose information you got fidelity loss so maybe they should be explicit",
    "start": "1344460",
    "end": "1350899"
  },
  {
    "text": "but we're stuck with what we have for that one and then a whole bunch of other questions about the that and then your",
    "start": "1350899",
    "end": "1358259"
  },
  {
    "text": "idea is you go through the table and you check off where are you and wherever your checks are to the right that",
    "start": "1358259",
    "end": "1364649"
  },
  {
    "text": "answers your question right if you've got a even 1 check in the middle column there you and then you should have an",
    "start": "1364649",
    "end": "1369749"
  },
  {
    "text": "explicit constructor and the farthest column is uh things like to string right",
    "start": "1369749",
    "end": "1375360"
  },
  {
    "text": "not only do you want you want to be able convert an int to a string but you don't want string to have an integer",
    "start": "1375360",
    "end": "1380879"
  },
  {
    "text": "constructor you don't even want it to have an explicit constructor because like two string is more of an operation you do so you want it to be an actual",
    "start": "1380879",
    "end": "1387119"
  },
  {
    "text": "function name so the final column is for things you want to be a named function and the important one is the bottom",
    "start": "1387119",
    "end": "1394259"
  },
  {
    "text": "question are you sure if you're not sure then make it explicit right so you that's why you have to",
    "start": "1394259",
    "end": "1401070"
  },
  {
    "text": "answer yes to that very bottom question so this is in in progress with the",
    "start": "1401070",
    "end": "1406230"
  },
  {
    "text": "Committee I gotta update the paper but it's on my github and right now the",
    "start": "1406230",
    "end": "1411840"
  },
  {
    "text": "committee sees proposals come in and we argue about each one differently every",
    "start": "1411840",
    "end": "1418049"
  },
  {
    "text": "time we argue about them and it's like we should have a standard you know kind of model for how we make these decisions",
    "start": "1418049",
    "end": "1423389"
  },
  {
    "text": "so this was a EE anyone know what that",
    "start": "1423389",
    "end": "1429960"
  },
  {
    "start": "1426000",
    "end": "1584000"
  },
  {
    "text": "stands for it's almost always explicit that's always the answer you want and if",
    "start": "1429960",
    "end": "1436590"
  },
  {
    "text": "you want a strong ID class I've got one on github and there's like plenty of others out there other like I just got",
    "start": "1436590",
    "end": "1441690"
  },
  {
    "text": "like one class these other people have full you know kind of libraries of strong types really useful",
    "start": "1441690",
    "end": "1448120"
  },
  {
    "text": "oh right yeah you got to think about the center in addition to these quotes from",
    "start": "1448120",
    "end": "1456700"
  },
  {
    "text": "people that I know in read about we've got some ancient C++ cones that have",
    "start": "1456700",
    "end": "1462580"
  },
  {
    "text": "been uncovered and you know we're still trying to figure out where these things come from almost all of them are exactly",
    "start": "1462580",
    "end": "1468850"
  },
  {
    "text": "140 characters but recently we found this one which is 280 characters so I'm not sure what's going on there but you",
    "start": "1468850",
    "end": "1476680"
  },
  {
    "text": "know the story is that the master is you",
    "start": "1476680",
    "end": "1482590"
  },
  {
    "text": "know walking his dog and he visits his student and he's like oh I was just out walking my dog but while I'm here I want",
    "start": "1482590",
    "end": "1488500"
  },
  {
    "text": "to ask you about this new function you're writing and you know why does why do you pass in big common struct instead of just X and Y and the students is like",
    "start": "1488500",
    "end": "1495280"
  },
  {
    "text": "well big common struct is where we keep x and y so obviously I'll just I'll just pass that in this that's where that's",
    "start": "1495280",
    "end": "1500470"
  },
  {
    "text": "that's the way we do things around here and and then the dog barks math and masters like oh so sorry my dog's hungry",
    "start": "1500470",
    "end": "1507070"
  },
  {
    "text": "and the student of course you know he's like oh let me prepare a meal for your dog please let me you know prepare some",
    "start": "1507070",
    "end": "1514000"
  },
  {
    "text": "food for him the masters like oh no that's fine just open the fridge door let dog take what he wants so I don't",
    "start": "1514000",
    "end": "1524200"
  },
  {
    "text": "explain cones they just there's there for you to think about that's the whole",
    "start": "1524200",
    "end": "1531370"
  },
  {
    "text": "topic that's just one slide there's a whole bunch of cones out there I don't know I don't know where you might be",
    "start": "1531370",
    "end": "1537130"
  },
  {
    "text": "able to find them but they're all 140 and 280 characters what's in a name that",
    "start": "1537130",
    "end": "1547120"
  },
  {
    "text": "which we call rose by any other word it's interesting that by any other word or by any other name would smell as",
    "start": "1547120",
    "end": "1553000"
  },
  {
    "text": "sweet there's like multiple copies of Shakespeare out there so you actually can't get the exact quote depends on",
    "start": "1553000",
    "end": "1558730"
  },
  {
    "text": "like which version of Shakespeare they dug up not the person the papers and",
    "start": "1558730",
    "end": "1565650"
  },
  {
    "text": "actually people have done experiments on this and turns out roses don't smell as",
    "start": "1565650",
    "end": "1571900"
  },
  {
    "text": "sweet if you give them a different name yeah they put scents in front of people not knowing what the scent was and told",
    "start": "1571900",
    "end": "1577390"
  },
  {
    "text": "them you know it's here here's this scent it's called this and you know turns out names me names are",
    "start": "1577390",
    "end": "1583620"
  },
  {
    "text": "important so finally a quote for me essence is the essence of naming I have",
    "start": "1583620",
    "end": "1590820"
  },
  {
    "start": "1584000",
    "end": "2076000"
  },
  {
    "text": "a you know I should have its I should I one day I will have a talk just on naming but it's basically all on this",
    "start": "1590820",
    "end": "1596580"
  },
  {
    "text": "slide and I'm not gonna go through all these things they don't have time but",
    "start": "1596580",
    "end": "1601940"
  },
  {
    "text": "determine essence is right what what is this thing that you're creating and and you would think you would know you're",
    "start": "1602030",
    "end": "1608280"
  },
  {
    "text": "writing a class you know what the class is but nine times out of ten you turns out you don't know what the class is at least that's what I find whether it's me",
    "start": "1608280",
    "end": "1614790"
  },
  {
    "text": "writing it or whoever's writing it a recent one was in the committee called span and the span is like string view if",
    "start": "1614790",
    "end": "1620400"
  },
  {
    "text": "you know string view it's just like it points to some array of things and it just has beginning and it says there's",
    "start": "1620400",
    "end": "1626880"
  },
  {
    "text": "these things over here I don't own those things but I can tell you that there's 27 integers and you know if you want",
    "start": "1626880",
    "end": "1632040"
  },
  {
    "text": "access to them you know it's like a beginning an iterator packed together that's all it is right it's just a pointer and a length so then the",
    "start": "1632040",
    "end": "1639420"
  },
  {
    "text": "question is things like should spam be regular and regular was those stepping off things at the beginning it's like",
    "start": "1639420",
    "end": "1644610"
  },
  {
    "text": "what happens when you copy a span what does equal equal do all these things it's like does it work like an integer",
    "start": "1644610",
    "end": "1649710"
  },
  {
    "text": "and the question in the community was what should span equal equal do should",
    "start": "1649710",
    "end": "1655050"
  },
  {
    "text": "it should a span be equal if it points to these elements and those elements",
    "start": "1655050",
    "end": "1660330"
  },
  {
    "text": "these two spans have the same eat all the elements are equal or are two spans equal if they point to the same place",
    "start": "1660330",
    "end": "1666540"
  },
  {
    "text": "right and either one makes sense depending on well what do you mean by span and so I wrote a paper this is",
    "start": "1666540",
    "end": "1673800"
  },
  {
    "text": "actually straight out of my paper I write ASCII diagrams as Committee papers sometimes not only tables I also do",
    "start": "1673800",
    "end": "1680400"
  },
  {
    "text": "ASCII diagrams and my first point is that if we can decide whether spans",
    "start": "1680400",
    "end": "1687030"
  },
  {
    "text": "should be regular or not we should name it properly so if a span two spans are equal because the reference things that",
    "start": "1687030",
    "end": "1693450"
  },
  {
    "text": "are equal then it should be called a spanning raffinate has reference semantics but if the span is just a",
    "start": "1693450",
    "end": "1698850"
  },
  {
    "text": "pointer in a length and two spans are equal if they point to the same place and then you call it a spanning pointer and everyone knows how pointer equal",
    "start": "1698850",
    "end": "1705450"
  },
  {
    "text": "equal works right it works by just the pointer equal not you know is equality deep are not and",
    "start": "1705450",
    "end": "1712140"
  },
  {
    "text": "then you get these other questions about his Kant's deeper and and all these other things and I said",
    "start": "1712140",
    "end": "1717180"
  },
  {
    "text": "there's some some answers I think are not good answers but the problem if it",
    "start": "1717180",
    "end": "1723210"
  },
  {
    "text": "is we have this type called span and it's like oh it does some cool stuff we kind of put some stuff together and it's",
    "start": "1723210",
    "end": "1728280"
  },
  {
    "text": "like okay but what is it right if you can't answer the fundamental questions of what does equality view what does",
    "start": "1728280",
    "end": "1734130"
  },
  {
    "text": "copy do and stuff like that then you really don't know what it is you have and if you don't know what it is and the",
    "start": "1734130",
    "end": "1739590"
  },
  {
    "text": "other half of that is if you can get the right name for it then any follow-on questions that come up later like string",
    "start": "1739590",
    "end": "1745800"
  },
  {
    "text": "view we've had questions come up like two years later people are still like well what do we mean by string view it's like if you can get the right name and",
    "start": "1745800",
    "end": "1752460"
  },
  {
    "text": "nail it down then every other question becomes clear and the other half of it is if you if you if you don't know it if",
    "start": "1752460",
    "end": "1759510"
  },
  {
    "text": "you can't name it you don't know what it is if you don't know what it is you don't know what it isn't if you don't know what it isn't you don't know what code shouldn't be in it",
    "start": "1759510",
    "end": "1765570"
  },
  {
    "text": "and most of the code shouldn't be in it thank you we got code just like people throw code into this function because",
    "start": "1765570",
    "end": "1771420"
  },
  {
    "text": "well that's you know I throw another if in that solve my problem right it's like is that is that where this belongs and",
    "start": "1771420",
    "end": "1776910"
  },
  {
    "text": "if you can name your classes and name your functions well then it'll be clear that oh this doesn't belong here and",
    "start": "1776910",
    "end": "1782160"
  },
  {
    "text": "you'll put it in the right place this is just me ranting on Twitter and the",
    "start": "1782160",
    "end": "1789660"
  },
  {
    "text": "number one rule of of naming and the number of number one rule of API design is just be consistent and then I've just",
    "start": "1789660",
    "end": "1796770"
  },
  {
    "text": "recently added an addendum to that called consistent warning signs and yeah",
    "start": "1796770",
    "end": "1804740"
  },
  {
    "text": "and I had this problem with I wrote the strong ID class and it's like great you",
    "start": "1804740",
    "end": "1810900"
  },
  {
    "text": "can't convert from string or not but every now and then you do want to convert the strong ID back to a string",
    "start": "1810900",
    "end": "1816600"
  },
  {
    "text": "because maybe you want to print it out or some function takes the string and people will be writing you know take",
    "start": "1816600",
    "end": "1822210"
  },
  {
    "text": "string projector ID dot and they're looking for the function that gives me",
    "start": "1822210",
    "end": "1827220"
  },
  {
    "text": "the string out of the ID and know what function they find they find dot operator string and like okay that does",
    "start": "1827220",
    "end": "1834570"
  },
  {
    "text": "it and then they continue on and they leave that in the code it's just like that's not how you call operator string",
    "start": "1834570",
    "end": "1840030"
  },
  {
    "text": "but because of an IDE you type dot it shows you the list of functions they",
    "start": "1840030",
    "end": "1845730"
  },
  {
    "text": "just take that function right so I need a function name or for how to get the string how to get",
    "start": "1845730",
    "end": "1851720"
  },
  {
    "text": "the value out of an object that wraps the value how to unwrap the value get",
    "start": "1851720",
    "end": "1857340"
  },
  {
    "text": "the value out unwrap an object get the value out so what should I name this function anyone any guesses hmm value",
    "start": "1857340",
    "end": "1868770"
  },
  {
    "text": "yeah see this I said three war I tried to say three words unwrap get invaluable",
    "start": "1868770",
    "end": "1876260"
  },
  {
    "text": "which is a really bad name because it's very generic but things like shared",
    "start": "1888799",
    "end": "1893970"
  },
  {
    "text": "pointer unique pointer all these things that use get get is the sign of like oh look I'm gonna unwrap this object that",
    "start": "1893970",
    "end": "1900570"
  },
  {
    "text": "was here to protect something I'm gonna crack it open and kind of get I'm gonna do something a little unsafe so there's",
    "start": "1900570",
    "end": "1907620"
  },
  {
    "text": "a there's a little bit of a warning sign with dot get and whenever I look at if I'm doing a code review and I see someone calling get on a shared pointer",
    "start": "1907620",
    "end": "1914400"
  },
  {
    "text": "or something I'm like oh why do you need the raw pointer here why aren't you just using the shared pointer and so I want",
    "start": "1914400",
    "end": "1920010"
  },
  {
    "text": "that same warning sign when I see someone using dot get on my strong type I'm like why are you opening up the",
    "start": "1920010",
    "end": "1925290"
  },
  {
    "text": "strong type you should keep the strong type as long as far as possible and you can look at the code and go oh",
    "start": "1925290",
    "end": "1930360"
  },
  {
    "text": "yeah I see why you need to do that that's fine it's not a terrible thing but it's just a little warning sign so I",
    "start": "1930360",
    "end": "1935610"
  },
  {
    "text": "picked the name because it's already a warning sign in at least anyone who does",
    "start": "1935610",
    "end": "1941190"
  },
  {
    "text": "a lot of code reviews I think that's a good reason for naming something and then I if you can be consistent which is",
    "start": "1941190",
    "end": "1948419"
  },
  {
    "text": "really really hard I mean QT is a really good example of consistency you know things I don't like",
    "start": "1948419",
    "end": "1954450"
  },
  {
    "text": "about Qt but they're very consistent with how they name things and do things if you can be really consistent then you",
    "start": "1954450",
    "end": "1959970"
  },
  {
    "text": "have this thing called be glaringly inconsistent and I have an example of that in C++ we got optional we're about",
    "start": "1959970",
    "end": "1966000"
  },
  {
    "text": "to get unexpected and we have in any and all three of those things can either hold a value or not hold a value the",
    "start": "1966000",
    "end": "1973590"
  },
  {
    "text": "expected either holds a value or an excuse for why you don't have a value but the other two will just be empty so",
    "start": "1973590",
    "end": "1979980"
  },
  {
    "text": "you can ask all of these things do you have a value and then we have standard variant which",
    "start": "1979980",
    "end": "1986310"
  },
  {
    "text": "can have you know multiple things in it but it's very much similar to the other ones an optional is basically a variant",
    "start": "1986310",
    "end": "1991500"
  },
  {
    "text": "of float and nothing and expected is basically a Verity of those two things and the the general variant can have",
    "start": "1991500",
    "end": "1997650"
  },
  {
    "text": "like as many types as you want but it you know what should it's empty state be",
    "start": "1997650",
    "end": "2003110"
  },
  {
    "text": "called should it be having has value function and almost it has a valueless",
    "start": "2003110",
    "end": "2008810"
  },
  {
    "text": "by exception function it's like wow that is a little different that is glaringly different than all the other ones",
    "start": "2008810",
    "end": "2014120"
  },
  {
    "text": "because it's different it's meant to be different because the thing with a variant it should always be a float or",
    "start": "2014120",
    "end": "2020780"
  },
  {
    "text": "an int it should never be empty it's gonna be one or the other there's this one little corner case where it can get",
    "start": "2020780",
    "end": "2026000"
  },
  {
    "text": "empty and it's only because you threw an exception at a really bad time and you should basically never ever call this function never worry about this case but",
    "start": "2026000",
    "end": "2032750"
  },
  {
    "text": "it's there in case you have to maybe in a catch clause but basically the other",
    "start": "2032750",
    "end": "2040490"
  },
  {
    "text": "three functions are normal things to call go ahead and call them all you want this last function if I see in their code and in code I'm gonna be like what",
    "start": "2040490",
    "end": "2047330"
  },
  {
    "text": "are you doing here why why are you doing this why why can your variant get empty it should never be able to get empty so",
    "start": "2047330",
    "end": "2053899"
  },
  {
    "text": "that's how to have if you have consistent API then you should be able to have it when someone sees something",
    "start": "2053900",
    "end": "2059389"
  },
  {
    "text": "that's wait a second this doesn't look like the rest of the stuff that should make you stop and think I should go read the document on this and understand",
    "start": "2059390",
    "end": "2065690"
  },
  {
    "text": "what's going on here that's that's what glaringly inconsistent does and that's the nice rule of thumb from screw stroke",
    "start": "2065690",
    "end": "2072800"
  },
  {
    "text": "yay for me that's naming in sooth I know not why",
    "start": "2072800",
    "end": "2079820"
  },
  {
    "start": "2076000",
    "end": "2406000"
  },
  {
    "text": "all quotes are bad it worries me I say you where do you this is the opening line from Antonio from the merchant or",
    "start": "2079820",
    "end": "2086690"
  },
  {
    "text": "coder Aventis I think it's the coder of Venice it's another one of these cases where you were not sure what exactly what Shakespeare wrote you know you",
    "start": "2086690",
    "end": "2092210"
  },
  {
    "text": "wrote a lot of things it was a version of the of the play I like this version",
    "start": "2092210",
    "end": "2097730"
  },
  {
    "text": "better it's like in suits I know not why I am so sad it worries me it's pretty",
    "start": "2097730",
    "end": "2103460"
  },
  {
    "text": "much the same quote and this is like it you know this is a rant by Antonio in",
    "start": "2103460",
    "end": "2109850"
  },
  {
    "text": "the Merchant of Venice so here's my rant all everything is just like keep your",
    "start": "2109850",
    "end": "2115760"
  },
  {
    "text": "code independent I don't care about OOP I don't care about what language I don't care where you put your brackets just",
    "start": "2115760",
    "end": "2121220"
  },
  {
    "text": "separate your code and name things well and name things well because naming things well helps you separate your code among other things and my other part my",
    "start": "2121220",
    "end": "2131240"
  },
  {
    "text": "other you know it's like a continuation rant of you see everyone who does abstraction they go I've extracted that",
    "start": "2131240",
    "end": "2136550"
  },
  {
    "text": "into a class and then you go look inside their class and their class is a big pile of mess right it's like why didn't you keep the distracting things inside",
    "start": "2136550",
    "end": "2142550"
  },
  {
    "text": "your class and didn't want to really say",
    "start": "2142550",
    "end": "2148700"
  },
  {
    "text": "I do want to say mess and then say oh here I have an example because this is this is not a mess Jonathan Bakara has a",
    "start": "2148700",
    "end": "2155720"
  },
  {
    "text": "really good blog on fluency plus plus it's called is his blog and he had this one thing about should in this",
    "start": "2155720",
    "end": "2162410"
  },
  {
    "text": "particular case should we use a map or a multi map or a map of vectors and basically it's his cases he's writing",
    "start": "2162410",
    "end": "2169310"
  },
  {
    "text": "you know another event system that we've all written where an event happens whether it's an email or button click or",
    "start": "2169310",
    "end": "2176660"
  },
  {
    "text": "whatever an event happens and you have you've registered some people who want to listen to that event and you call them all right so you can either do that",
    "start": "2176660",
    "end": "2183260"
  },
  {
    "text": "with a map from the event to who wants to hear it and have a list of people that want to hear it and there's the",
    "start": "2183260",
    "end": "2189440"
  },
  {
    "text": "second second event with a list of the listeners or you can do it as a multi map where it's",
    "start": "2189440",
    "end": "2195530"
  },
  {
    "text": "you know one-to-one but you can have like three three foods in your multi map each pointing to one one listener and",
    "start": "2195530",
    "end": "2202940"
  },
  {
    "text": "it's like there's reasons to do either one and that that's really what his blog is talking about is what's the good and",
    "start": "2202940",
    "end": "2208850"
  },
  {
    "text": "bad of doing it either way so he his code is purposely done to show the differences between between these",
    "start": "2208850",
    "end": "2215390"
  },
  {
    "text": "two so this is the first case where you have a map to a vector and so you just",
    "start": "2215390",
    "end": "2220430"
  },
  {
    "text": "do a find you get the vector and then you iterate on the on the vectors and",
    "start": "2220430",
    "end": "2229490"
  },
  {
    "text": "you call every one the other one is the multi map case and a multi map you call",
    "start": "2229490",
    "end": "2235370"
  },
  {
    "text": "equal range to get all the entries that equal that event and then you iterate",
    "start": "2235370",
    "end": "2240770"
  },
  {
    "text": "from the beginning and end of that of that sub range very similar code you know and then he talks about how you",
    "start": "2240770",
    "end": "2247220"
  },
  {
    "text": "know one of the one one of the first piece of code is kind of double indented and there's other reasons to",
    "start": "2247220",
    "end": "2252980"
  },
  {
    "text": "like you know slight differences but basically both pieces of code are like go get all the listeners and then call",
    "start": "2252980",
    "end": "2258619"
  },
  {
    "text": "them all right so the thing that really piqued my interest was that I had just",
    "start": "2258619",
    "end": "2263779"
  },
  {
    "text": "written the exact same thing and almost to the same I think mine is also called mediator like it's like it's the same",
    "start": "2263779",
    "end": "2269299"
  },
  {
    "text": "and I went looked at my code my code looks like this it's like get listeners call the listeners right so which data",
    "start": "2269299",
    "end": "2276140"
  },
  {
    "text": "structure did I use inside my class did I use the map of vectors or the multi map who cares and who knows right it's",
    "start": "2276140",
    "end": "2283819"
  },
  {
    "text": "like this function here doesn't care this function is just exactly what you think of what the function should have",
    "start": "2283819",
    "end": "2289549"
  },
  {
    "text": "done get the listeners then call them all right so I was kind of happy I was like I you know it's not like I",
    "start": "2289549",
    "end": "2295369"
  },
  {
    "text": "refactored the code to this point this I just wrote it this way because it's just like why not write the code this way",
    "start": "2295369",
    "end": "2300380"
  },
  {
    "text": "from the start and and again Jonathan was writing example code for a certain reason so I'm not saying his code was",
    "start": "2300380",
    "end": "2306740"
  },
  {
    "text": "bad or anything but I was like this is how we should write the code because it's just you see at all time we're ins",
    "start": "2306740",
    "end": "2313940"
  },
  {
    "text": "once you get inside a class or inside a function you're like all your abstraction goes away it's like no no you can stay abstract for a while code",
    "start": "2313940",
    "end": "2321230"
  },
  {
    "text": "looks cleaner and better and then of course I went and looked at my own code and this is like some lock free code",
    "start": "2321230",
    "end": "2326749"
  },
  {
    "text": "that I wrote on the on the left hand side there and lock for your code especially is kind of code where you're",
    "start": "2326749",
    "end": "2332269"
  },
  {
    "text": "like I want to know the state of everything I want everything right in front of me I needed it all here now because it's complicated lock free code",
    "start": "2332269",
    "end": "2338019"
  },
  {
    "text": "but then I was doing it in a talk and I was like I should listen to my own advice and write the code like that over",
    "start": "2338019",
    "end": "2343549"
  },
  {
    "text": "there because this code I don't know what it's doing but over there is like it's it's a lock free Q so first thing",
    "start": "2343549",
    "end": "2349249"
  },
  {
    "text": "you have to do is find the tail you try to write to the tail and if it fails you you loop around and then you you reset",
    "start": "2349249",
    "end": "2355339"
  },
  {
    "text": "the tail at the end and you leave right it's like three lines of code whereas over here I don't know what's going on",
    "start": "2355339",
    "end": "2360589"
  },
  {
    "text": "so I don't abstract properly none of us do right Buuren often asks the committee",
    "start": "2360589",
    "end": "2369559"
  },
  {
    "text": "for like I you know what's the real feature that's gonna change the way we code like what what's a really impactful",
    "start": "2369559",
    "end": "2375380"
  },
  {
    "text": "feature so one time I said let's just limit the size of functions like let's you know we'll start at 50 and we'll",
    "start": "2375380",
    "end": "2381140"
  },
  {
    "text": "just cut down from there I'm just like does not compiled if it's more than this big and like that will change for the better",
    "start": "2381140",
    "end": "2387380"
  },
  {
    "text": "all our code more than any other feature we could ever add to the language we",
    "start": "2387380",
    "end": "2393200"
  },
  {
    "text": "have this problem with backwards compatibility men we don't like breaking that much code but even if I did this",
    "start": "2393200",
    "end": "2398300"
  },
  {
    "text": "big and we just kept every release cutting it back he gave me a plus one I",
    "start": "2398300",
    "end": "2405260"
  },
  {
    "text": "don't know I can't remember yeah so I'm",
    "start": "2405260",
    "end": "2410930"
  },
  {
    "start": "2406000",
    "end": "2749000"
  },
  {
    "text": "almost at a time ah yes so the oh my my question is like why don't we write",
    "start": "2410930",
    "end": "2417410"
  },
  {
    "text": "better code right apparently not because",
    "start": "2417410",
    "end": "2427400"
  },
  {
    "text": "all the code I've written all the code I've seen our code amia doesn't always start out bad but it just gets worse",
    "start": "2427400",
    "end": "2432620"
  },
  {
    "text": "over time right everyone just adds to that function it gets bigger and bigger and why why is our code not good the",
    "start": "2432620",
    "end": "2439640"
  },
  {
    "text": "usual answer is time crunch I don't have time to write good code all right I've often often found that you know I",
    "start": "2439640",
    "end": "2446300"
  },
  {
    "text": "remember being like six months behind on our project so we're just cutting corners right and then six months later",
    "start": "2446300",
    "end": "2451430"
  },
  {
    "text": "we're a year behind on the project and we're tripping over the corners that we've cut before it's like a time crunch",
    "start": "2451430",
    "end": "2456650"
  },
  {
    "text": "is not always a good excuse but I think there's another excuse of instant gratification you want to write some code as fast as you can and see it work",
    "start": "2456650",
    "end": "2464000"
  },
  {
    "text": "right and and you don't care about anything else and when you're fixing that bug all you want to do is see that the bug is fixed so if I just add",
    "start": "2464000",
    "end": "2470000"
  },
  {
    "text": "another if statement here that fixes the bug and I can go home and you want that you know you want that quick loop of",
    "start": "2470000",
    "end": "2475280"
  },
  {
    "text": "show me the code running and then I can you know see it and the ATT everyone",
    "start": "2475280",
    "end": "2481790"
  },
  {
    "text": "knows the 8020 rule but to me the 8020 rule is kind of like not that I run marathons",
    "start": "2481790",
    "end": "2487070"
  },
  {
    "text": "no but marathon runners talk about hitting the wall right and how many times are you working on a project and",
    "start": "2487070",
    "end": "2492530"
  },
  {
    "text": "you're like I'm 80% done and you know management is like oh yeah you're so close to being done you're like actually",
    "start": "2492530",
    "end": "2497900"
  },
  {
    "text": "I'm hitting the marathon wall I am dying here and I can't get this last 20% like that that's how often I you know so that",
    "start": "2497900",
    "end": "2504530"
  },
  {
    "text": "that last 20% is where we just really you know the code the code goes downhill and and you know the question with these",
    "start": "2504530",
    "end": "2513920"
  },
  {
    "text": "excuses you think about what can we do about it too but the other one is on certainty it's like I can look at some code I can be writing code thinking how",
    "start": "2513920",
    "end": "2520460"
  },
  {
    "text": "this I don't think this is quite the right way to do it but I'm like I'm not sure what the right way is so I just you know keep going right and I think that's",
    "start": "2520460",
    "end": "2526370"
  },
  {
    "text": "that's sometimes that's just confidence and stuff is just like no just you know or or if you know it's not the right way",
    "start": "2526370",
    "end": "2533180"
  },
  {
    "text": "try keep trying things until you get the right way you know which just goes back to take the time but sometimes I feel",
    "start": "2533180",
    "end": "2538880"
  },
  {
    "text": "people are just uncertain about you know their their first instinct of what's good and bad because usually you're",
    "start": "2538880",
    "end": "2545720"
  },
  {
    "text": "looking at code later you can see the difference being good and bad code but you know I can say that's bad I can't",
    "start": "2545720",
    "end": "2551390"
  },
  {
    "text": "tell you what what the right answer is right so it's it's hard but you know we're smarter than this what can we do",
    "start": "2551390",
    "end": "2556760"
  },
  {
    "text": "about it pair programming is often can can help it helps keep you from you know the bad",
    "start": "2556760",
    "end": "2563780"
  },
  {
    "text": "habits or whatever and that whole thing about like hitting that wall of the marathon it's like you know and and",
    "start": "2563780",
    "end": "2570400"
  },
  {
    "text": "everyone you know Sprint's everyone talks about Sprint's and like man if I sprint all the time I can't run a marathon by sprinting constantly right",
    "start": "2570400",
    "end": "2577600"
  },
  {
    "text": "so you know when you've done that 80% you're hitting a wall get some help get",
    "start": "2577600",
    "end": "2582920"
  },
  {
    "text": "someone else to help with you make it a relay a handoff but a low piece of it get some other people to work with you",
    "start": "2582920",
    "end": "2588170"
  },
  {
    "text": "and as a senior developer and stuff positive feedback that we're gonna team",
    "start": "2588170",
    "end": "2595880"
  },
  {
    "text": "that you've just seen are stand-ups and stuff so I'm gonna say oh so one so help me with this thing yesterday that's what I did yesterday so you know thank you",
    "start": "2595880",
    "end": "2601250"
  },
  {
    "text": "for helping me with this thing and it's just like this little positive feedback and then it's like contagious like all",
    "start": "2601250",
    "end": "2606410"
  },
  {
    "text": "we do in stand-ups is thank each other it's like great yeah it's awesome but",
    "start": "2606410",
    "end": "2611690"
  },
  {
    "text": "I'm trying even in code reviews because if you're doing a code review and it's good code you don't say anything at all",
    "start": "2611690",
    "end": "2617360"
  },
  {
    "text": "right you just like oh yeah that's fine that's fine then he's fine it's find something oh I'm not sure about this can you explain why you did this you just",
    "start": "2617360",
    "end": "2623060"
  },
  {
    "text": "you know complain about some small bad thing you put the bracket in the wrong place or just you know actual code",
    "start": "2623060",
    "end": "2628520"
  },
  {
    "text": "that's bad but I'm trying to get into this habit of like if I fly through a code review and I've gone through two or",
    "start": "2628520",
    "end": "2634430"
  },
  {
    "text": "three files where I don't have anything bad to say I should say something good this this code is decent thank you for",
    "start": "2634430",
    "end": "2640670"
  },
  {
    "text": "writing good code anything to give that positive feedback so that next time when they think I should just hack this in",
    "start": "2640670",
    "end": "2645980"
  },
  {
    "text": "then people think no I you know I like that positive feedback of writing good code and for the",
    "start": "2645980",
    "end": "2651470"
  },
  {
    "text": "instant gratification loop you know writing test is a good way of getting that instant gratification of does this",
    "start": "2651470",
    "end": "2656599"
  },
  {
    "text": "work well write a test and see that it works and then when you get a big set of tests you start feeling like I'm doing",
    "start": "2656599",
    "end": "2662299"
  },
  {
    "text": "something like things are working I've got I've got I've got these these tests working and similar to the positive",
    "start": "2662299",
    "end": "2668030"
  },
  {
    "text": "feedback praise publicly you know I'm now I'm starting to think you know gamified do I need to like give out",
    "start": "2668030",
    "end": "2673520"
  },
  {
    "text": "prizes for fixing bugs or writing good code or something I don't know and visualization like athletes when they're",
    "start": "2673520",
    "end": "2679730"
  },
  {
    "text": "trying to like do high jump or run a race something they visualize jumping over the thing before they actually do",
    "start": "2679730",
    "end": "2685069"
  },
  {
    "text": "it and it's like this Bruce Lee quote a goal is not always to be reached it's often serves to simply do something to",
    "start": "2685069",
    "end": "2692030"
  },
  {
    "text": "aim at and that's what I try to do my coding is like what how do we want this code to look eventually where which way are we going and we don't have to fix",
    "start": "2692030",
    "end": "2698510"
  },
  {
    "text": "all the code now just make sure we're going in this direction that's something something they try to do who and I think I'm just on time here",
    "start": "2698510",
    "end": "2707619"
  },
  {
    "text": "these are I purposely tried to make the colors clash as much as possible and also not line up because that's just",
    "start": "2707619",
    "end": "2713599"
  },
  {
    "text": "like jarring so anyone know what the point of all these cliches clash of",
    "start": "2713599",
    "end": "2719029"
  },
  {
    "text": "cliches is obviously they're all opposites to each other right and they're all good advice right even even",
    "start": "2719029",
    "end": "2726289"
  },
  {
    "text": "though they're opposites they're all good advice at time so I gave you a bunch of words of wisdom but that",
    "start": "2726289",
    "end": "2731329"
  },
  {
    "text": "doesn't mean you know the opposite things are not also good advice you know take it all with a grain of salt basically as what I'm saying here and",
    "start": "2731329",
    "end": "2739490"
  },
  {
    "text": "that is the end [Applause] [Music]",
    "start": "2739490",
    "end": "2746558"
  }
]