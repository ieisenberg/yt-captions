[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "hello everyone good morning thank you for waking up early thank you for coming",
    "start": "6600",
    "end": "14129"
  },
  {
    "text": "it's an absolute pleasure to be here you know as low I'm if you can't tell from",
    "start": "14129",
    "end": "19900"
  },
  {
    "text": "the accent I've come all the way from Australia hopefully I don't have too",
    "start": "19900",
    "end": "25119"
  },
  {
    "text": "many colour queal isms that you won't understand but I think we should be right my name is Dave says somewhere I work",
    "start": "25119",
    "end": "33610"
  },
  {
    "text": "for Microsoft I I work on part of dotnet Pat on the.net tooling side of things so",
    "start": "33610",
    "end": "39670"
  },
  {
    "text": "the project system team which is part of Visual Studio and I'm not talking about",
    "start": "39670",
    "end": "45130"
  },
  {
    "text": "any of that today this is all just my own experience and the first half anyway",
    "start": "45130",
    "end": "52600"
  },
  {
    "text": "is largely in my own opinion but yeah yeah I think things that I think are",
    "start": "52600",
    "end": "59920"
  },
  {
    "text": "good to think about so premature",
    "start": "59920",
    "end": "65500"
  },
  {
    "start": "63000",
    "end": "425000"
  },
  {
    "text": "optimization is the root of all evil I won't bother asking who's heard this",
    "start": "65500",
    "end": "71320"
  },
  {
    "text": "saying because I'm pretty sure everyone has it's fairly well known and popular",
    "start": "71320",
    "end": "76980"
  },
  {
    "text": "does anyone know who said it you know I want to shout a guess very",
    "start": "76980",
    "end": "83530"
  },
  {
    "text": "good Donald Knuth's or Knuth or nuther I'm sure he knows how to pronounce but I",
    "start": "83530",
    "end": "89229"
  },
  {
    "text": "don't so this is a short little eight",
    "start": "89229",
    "end": "97030"
  },
  {
    "text": "words yeah that word and it gets doled",
    "start": "97030",
    "end": "102310"
  },
  {
    "text": "out reasonably often in certain I wouldn't say disparaging but I've seen",
    "start": "102310",
    "end": "111909"
  },
  {
    "text": "quite a few times you know someone will post let's say you know a simple message on Twitter like yeah here's a code",
    "start": "111909",
    "end": "118869"
  },
  {
    "text": "snippet should this use a list or should I use an immutable list and invariably",
    "start": "118869",
    "end": "124479"
  },
  {
    "text": "there's always someone who will reply premature optimization is the root of all evil possibly thinking they're",
    "start": "124479",
    "end": "129938"
  },
  {
    "text": "helping possibly not we don't know it is Twitter and it's usually said as a well",
    "start": "129939",
    "end": "137890"
  },
  {
    "text": "I think as a means of laziness by well as a it's",
    "start": "137890",
    "end": "144250"
  },
  {
    "text": "sort of an excuse to be lazy so that there's actually I was actually on a",
    "start": "144250",
    "end": "149430"
  },
  {
    "text": "pull request that I submitted it was in my previous job not Microsoft and I so I",
    "start": "149430",
    "end": "159609"
  },
  {
    "text": "wrote a for each loop or it was probably like some nested free it was a",
    "start": "159609",
    "end": "166780"
  },
  {
    "text": "reasonably complex code that iterated over something but I did is a for each loop and I got a comment saying you",
    "start": "166780",
    "end": "173409"
  },
  {
    "text": "could rewrite this in one line using link and I replied saying yes you could",
    "start": "173409",
    "end": "179169"
  },
  {
    "text": "that's right but it would be a little bit slower and it would use more memory or whatever it was and I personally find",
    "start": "179169",
    "end": "186669"
  },
  {
    "text": "this to be just as readable and the reply from that person was then you",
    "start": "186669",
    "end": "194500"
  },
  {
    "text": "shouldn't have done this because link might be slow because that's premature optimization and they doled out this",
    "start": "194500",
    "end": "201669"
  },
  {
    "text": "message what I should have done was write the link query because that's the single line some people like yeah one",
    "start": "201669",
    "end": "208810"
  },
  {
    "text": "line of code where possible and then if performance is a problem then you solve",
    "start": "208810",
    "end": "215319"
  },
  {
    "text": "it and I kind of get that ideal you know you don't want to be going down a rabbit",
    "start": "215319",
    "end": "222669"
  },
  {
    "text": "hole unnecessarily but I also think that well firstly that's kind of making your",
    "start": "222669",
    "end": "230079"
  },
  {
    "text": "users find your performance bugs which is not very good I think we can all agree or maybe you're lucky and you have a QA department who'll find them for you",
    "start": "230079",
    "end": "235690"
  },
  {
    "text": "but either way but I also think that's not really the spirit of what Donald",
    "start": "235690",
    "end": "241599"
  },
  {
    "text": "Knuth who was maybe trying to say because it turns out Donal things",
    "start": "241599",
    "end": "246970"
  },
  {
    "text": "actually said more than just eight words as you may be able to tell by my weird placement of text in PowerPoint",
    "start": "246970",
    "end": "253209"
  },
  {
    "text": "I do actually know how to use PowerPoint this is part of a longer sentence and if",
    "start": "253209",
    "end": "259539"
  },
  {
    "text": "we had a little bit more context to this I think things get a bit more interesting so the rest of this sentence",
    "start": "259539",
    "end": "266169"
  },
  {
    "text": "is we should forget about small efficiencies about 97% of and yet we should not pass up our",
    "start": "266169",
    "end": "275580"
  },
  {
    "text": "opportunities in that critical 3% and I think that's really kind of telling because when you take these eight words",
    "start": "275580",
    "end": "282389"
  },
  {
    "text": "out of context it kind of sounds like never think about performance it's always a bad idea and what Donald Knuth",
    "start": "282389",
    "end": "288720"
  },
  {
    "text": "is actually saying is sometimes it's super critical to think about it and what sort of unwritten here is to me",
    "start": "288720",
    "end": "296910"
  },
  {
    "text": "anyway you have to think about whether your code is in there three percent before you then know whether you can",
    "start": "296910",
    "end": "302310"
  },
  {
    "text": "think about performance right so you know don't shy away from it now I",
    "start": "302310",
    "end": "308099"
  },
  {
    "text": "promise I do know what I'm doing with PowerPoint there's even more that we can bring into this and obviously this is",
    "start": "308099",
    "end": "313380"
  },
  {
    "text": "you could keep going forever but the sentence before this I think sort of completes the picture so it says program",
    "start": "313380",
    "end": "321419"
  },
  {
    "text": "is waste enormous amounts of time thinking about but worrying about the speed of non-critical parts of their programs these attempts at efficiency",
    "start": "321419",
    "end": "327599"
  },
  {
    "text": "actually have a strong negative impact when debugging and Mainers are concerned it's a very long sentence to me this",
    "start": "327599",
    "end": "335430"
  },
  {
    "text": "sort of like completes a picture because when I think about how we should treat",
    "start": "335430",
    "end": "340620"
  },
  {
    "text": "performance you should never say don't do it it's the root of all evil",
    "start": "340620",
    "end": "346409"
  },
  {
    "text": "but you also shouldn't say focus on that above all else so neuf mentions",
    "start": "346409",
    "end": "352320"
  },
  {
    "text": "debugging and maintenance you know I would add in there things like readability and I guess maybe",
    "start": "352320",
    "end": "359520"
  },
  {
    "text": "scalability in today's sort of more different world so this passage here",
    "start": "359520",
    "end": "365340"
  },
  {
    "text": "comes from like 40 years ago so obviously computing was different then",
    "start": "365340",
    "end": "370490"
  },
  {
    "text": "but to me what this means is don't focus on any one thing you have to think about",
    "start": "370639",
    "end": "376530"
  },
  {
    "text": "all the things now for bonus internet points does anyone know what article or",
    "start": "376530",
    "end": "382229"
  },
  {
    "text": "book or essay I don't know yeah this came from I didn't either don't worry",
    "start": "382229",
    "end": "388380"
  },
  {
    "text": "but I think it's kind of funny because so the people on Twitter who spat out",
    "start": "388380",
    "end": "394440"
  },
  {
    "text": "premature optimization is the root of all evil is a way to make themselves seem smarter they probably also don't",
    "start": "394440",
    "end": "400409"
  },
  {
    "text": "like it when people use go-to statements and this little passage came from structured programming with go-to",
    "start": "400409",
    "end": "405669"
  },
  {
    "text": "statements where it's kind of funny and actually it's kind of fitting because",
    "start": "405669",
    "end": "412440"
  },
  {
    "text": "this is an argument for where goto statements make sense and you know",
    "start": "412440",
    "end": "418569"
  },
  {
    "text": "there's times in programming where everything makes sense it's all a matter of how you use it",
    "start": "418569",
    "end": "423819"
  },
  {
    "text": "so anyway onto what if I read in a",
    "start": "423819",
    "end": "428919"
  },
  {
    "start": "425000",
    "end": "551000"
  },
  {
    "text": "little bit and take a bit of poetic license what I think Donald Knuth was talking about and what I think anyway",
    "start": "428919",
    "end": "434669"
  },
  {
    "text": "essentially coding is about trade-offs right as programmers it's our job to decide these performance important here",
    "start": "434669",
    "end": "441639"
  },
  {
    "text": "or is readability more an important all maintenance or all the rest of them and if we didn't do that if we didn't have",
    "start": "441639",
    "end": "448569"
  },
  {
    "text": "that as part of our jobs we're essentially just typing and that's kind of boring and so performance is",
    "start": "448569",
    "end": "453759"
  },
  {
    "text": "absolutely one of the factors and it should be considered all the time but it's only one of the factors right the",
    "start": "453759",
    "end": "460630"
  },
  {
    "text": "job is about balance so we need to work out how do we weigh up these factors how",
    "start": "460630",
    "end": "468099"
  },
  {
    "text": "do we weigh up the maintainability and debug ability and readability and the",
    "start": "468099",
    "end": "473590"
  },
  {
    "text": "perform ability of stuff right thinking about optimization is good you have to",
    "start": "473590",
    "end": "481659"
  },
  {
    "text": "think about it in order to decide where they're acting on it would be premature right so it's got to be part of your",
    "start": "481659",
    "end": "488219"
  },
  {
    "text": "your thinking and ideally if you can at work in your teams if you can bring in",
    "start": "488219",
    "end": "497139"
  },
  {
    "text": "performance thinking as part of the culture of work then you get better results you know if if this pull request",
    "start": "497139",
    "end": "504210"
  },
  {
    "text": "where someone writes a link statement and you might be worried that maybe it's going to be too slow well if you trust",
    "start": "504210",
    "end": "511210"
  },
  {
    "text": "and and if you have a culture of this sort of thinking in your teams then you",
    "start": "511210",
    "end": "517510"
  },
  {
    "text": "can trust that the person who wrote this has thought about it and has worked out",
    "start": "517510",
    "end": "522700"
  },
  {
    "text": "which is the more appropriate thing to go in favor of readability for this as performance and this is what they've",
    "start": "522700",
    "end": "528970"
  },
  {
    "text": "come to know hopefully there might be a comment at the top saying I'm doing this because but you know",
    "start": "528970",
    "end": "534690"
  },
  {
    "text": "getting to that level is is a good thing and it kind of elevates a whole team",
    "start": "534690",
    "end": "539920"
  },
  {
    "text": "right when junior programmers see senior program is making these trade offs and",
    "start": "539920",
    "end": "545320"
  },
  {
    "text": "where the trade offs are visible then it educates them about that aspect of the",
    "start": "545320",
    "end": "550570"
  },
  {
    "text": "job so how do you work out what's important or how do you work out when performances abroad so you have to know",
    "start": "550570",
    "end": "559600"
  },
  {
    "text": "a bit about what you're writing which make sense you have to know the context",
    "start": "559600",
    "end": "565180"
  },
  {
    "text": "of your execution right if you're writing code in a web service that's",
    "start": "565180",
    "end": "570610"
  },
  {
    "text": "going to get hit you know a hundred times a minute then that has some",
    "start": "570610",
    "end": "575770"
  },
  {
    "text": "performance needs and if you're writing code in a web service that gets hit only",
    "start": "575770",
    "end": "583180"
  },
  {
    "text": "from the back in you know admin site and it's from a button that gets pressed once a month by the accounts person at",
    "start": "583180",
    "end": "589750"
  },
  {
    "text": "the end of the month when they're reconciling books you maybe can make some different trade-offs right but you",
    "start": "589750",
    "end": "594880"
  },
  {
    "text": "have to know where your code is going to execute and how often and then you have to know what kind of data your code is",
    "start": "594880",
    "end": "601420"
  },
  {
    "text": "processing if it's processing data so where I used to work we used to we",
    "start": "601420",
    "end": "608830"
  },
  {
    "text": "worked with universities and some of the universities were very smart and would",
    "start": "608830",
    "end": "615310"
  },
  {
    "text": "make a web service call to our system when a student's data was updated with a",
    "start": "615310",
    "end": "620470"
  },
  {
    "text": "change that we cared about so we would only get the messages that we needed which was great and then some of the",
    "start": "620470",
    "end": "627820"
  },
  {
    "text": "universities their IT systems are a bit older and all they could do was give us a batch file that had you know all of",
    "start": "627820",
    "end": "636220"
  },
  {
    "text": "the student data for all of the university campus we might have cared about 10% of it and then we had to go",
    "start": "636220",
    "end": "642160"
  },
  {
    "text": "and work out what has changed so those two systems they're both ostensibly importing data",
    "start": "642160",
    "end": "648100"
  },
  {
    "text": "but they have very different requirements you have to validate your",
    "start": "648100",
    "end": "653920"
  },
  {
    "text": "assumptions so this web service call that was coming in a can you assume that",
    "start": "653920",
    "end": "659980"
  },
  {
    "text": "it only comes in when you need to know about it or is there may be some",
    "start": "659980",
    "end": "665020"
  },
  {
    "text": "difference in business logic there between their system and ours where maybe they don't know when we",
    "start": "665020",
    "end": "670339"
  },
  {
    "text": "need to know about it can you assume that this file is always going to have this many records in it validate your",
    "start": "670339",
    "end": "676699"
  },
  {
    "text": "assumptions actually goes down to even like the lowest level I've seen seen",
    "start": "676699",
    "end": "682399"
  },
  {
    "text": "people where they'll write some code and someone might say well you know this is inefficient whatever and I say oh yeah",
    "start": "682399",
    "end": "688549"
  },
  {
    "text": "but the compiler will optimize that or the jitter will fix that for me and",
    "start": "688549",
    "end": "694069"
  },
  {
    "text": "that's cool sometimes it does but you should check right and then you have to",
    "start": "694069",
    "end": "700730"
  },
  {
    "text": "consider the worst case one of these big imports that ran on I was like a hundred",
    "start": "700730",
    "end": "708589"
  },
  {
    "text": "thousand records in this file so the university kicked off our import at 1:00",
    "start": "708589",
    "end": "714379"
  },
  {
    "text": "a.m. so that no one was using the system less chance of database locks taking",
    "start": "714379",
    "end": "719600"
  },
  {
    "text": "longer whatever and it ran in about seven hours which was ok but what",
    "start": "719600",
    "end": "724730"
  },
  {
    "text": "happens over time if that starts getting longer you know what happens if your nightly run takes 10 hours and now",
    "start": "724730",
    "end": "730639"
  },
  {
    "text": "starts to overlap with the working day or what happens in the worst worst case what happens if your nightly run takes",
    "start": "730639",
    "end": "737299"
  },
  {
    "text": "26 hours and you're now past when you should have done the next one do you do another one or is that cause overlap or",
    "start": "737299",
    "end": "743779"
  },
  {
    "text": "do you skip a day or is that cause problems and you've got to think about all these things and then make sure you",
    "start": "743779",
    "end": "752199"
  },
  {
    "text": "think about the bigger picture of what you're doing as well as the actual code",
    "start": "752199",
    "end": "760639"
  },
  {
    "text": "you're implementing so you know if you're importing a list of a hundred thousand students don't worry about",
    "start": "760639",
    "end": "767720"
  },
  {
    "text": "optimizing a method that takes a an array with a hundred thousand things think about whether you should have an array with a hundred thousand things in",
    "start": "767720",
    "end": "773929"
  },
  {
    "text": "it you know think about the big picture but if you can if you can get down to",
    "start": "773929",
    "end": "781399"
  },
  {
    "text": "the level where you can say this code path is where I have a performance problem then micro benchmarking that is",
    "start": "781399",
    "end": "789230"
  },
  {
    "text": "a super effective way of really nailing down what is a good approach matza bad",
    "start": "789230",
    "end": "795290"
  },
  {
    "text": "approach and that's kind of what we're gonna be talking about today but you have to sort of think about all these things before you can get to that",
    "start": "795290",
    "end": "801380"
  },
  {
    "text": "level you're not allowed to benchmark your whole application and say well this Ram took an hour and now I'll try this",
    "start": "801380",
    "end": "807380"
  },
  {
    "text": "one and this takes an hour and three minutes allowed so how do we do",
    "start": "807380",
    "end": "813319"
  },
  {
    "start": "810000",
    "end": "852000"
  },
  {
    "text": "performance work well this is a very simple slide the only way to assess the",
    "start": "813319",
    "end": "819230"
  },
  {
    "text": "performance of code is to measure it obviously you can bring your experience to bear but hopefully that experience is",
    "start": "819230",
    "end": "827000"
  },
  {
    "text": "bought out of a series of times where you have measured things you measure",
    "start": "827000",
    "end": "833300"
  },
  {
    "text": "your code make some changes and measure it again and maybe you try five different things measure them all you",
    "start": "833300",
    "end": "839839"
  },
  {
    "text": "can't look at a piece of code in complete you know the void and determine",
    "start": "839839",
    "end": "847790"
  },
  {
    "text": "which one's going to perform better or worse because there's so many things hopefully I'll illustrate that anyway",
    "start": "847790",
    "end": "854389"
  },
  {
    "start": "852000",
    "end": "946000"
  },
  {
    "text": "this this brings us onto this line of code this line of code is what caused",
    "start": "854389",
    "end": "859730"
  },
  {
    "text": "this talk to be created because I saw this code in a pull request someone",
    "start": "859730",
    "end": "865910"
  },
  {
    "text": "wrote this and I stared at it and I stared at it for about five minutes",
    "start": "865910",
    "end": "871459"
  },
  {
    "text": "because I actually don't really use that oh I've haven't really used the aggregate method much and I didn't know",
    "start": "871459",
    "end": "877639"
  },
  {
    "text": "what it did and in case you don't either so aggregate is one of the extension methods that came in with link data in",
    "start": "877639",
    "end": "884720"
  },
  {
    "text": "this case was a list of strings what this does is it turns a list of strings",
    "start": "884720",
    "end": "891110"
  },
  {
    "text": "into a comma separated string and I",
    "start": "891110",
    "end": "896680"
  },
  {
    "text": "looked at this and I went well that seems like a really roundabout way to do",
    "start": "896680",
    "end": "901790"
  },
  {
    "text": "that because it's string join which is easier and it's using link and it's",
    "start": "901790",
    "end": "908600"
  },
  {
    "text": "using a lambda and all this sort of things and I said well don't do that that's slow and it uses too much memory",
    "start": "908600",
    "end": "914139"
  },
  {
    "text": "and of course that comment is a really bad comment and you should never leave that comment and a pull request so I saw",
    "start": "914139",
    "end": "920689"
  },
  {
    "text": "the error of my ways right that's slow well how slow is it and how slow is too slow how fast does this code need to be",
    "start": "920689",
    "end": "927290"
  },
  {
    "text": "right you can't look at that method and tell me that's too slow because you don't know what it the rest it's right uses too much memory again",
    "start": "927290",
    "end": "933950"
  },
  {
    "text": "how much memory is this running on a Raspberry Pi in an IOT device or is this running on a huge chunky web server so",
    "start": "933950",
    "end": "941440"
  },
  {
    "text": "fine I went away and I benchmarked so how do",
    "start": "941440",
    "end": "948350"
  },
  {
    "text": "we measure how fast code is this is the hopefully you can see it it's big enough",
    "start": "948350",
    "end": "954140"
  },
  {
    "text": "this is the sort of maybe first this maybe second attempt that people have to",
    "start": "954140",
    "end": "961040"
  },
  {
    "text": "measure code and there's a few problems with it the first attempt that people usually do I guess would be without the loop the",
    "start": "961040",
    "end": "967700"
  },
  {
    "text": "loops kind of like whoa hang on does anyone want to share that some reasons why this is bad if you're brave you",
    "start": "967700",
    "end": "976160"
  },
  {
    "text": "won't get hurt I promise yeah no warm-up very good anyone else there's like one sort of main thing that",
    "start": "976160",
    "end": "983450"
  },
  {
    "text": "people notice and that's its using date/time so that can be bad so this is",
    "start": "983450",
    "end": "989930"
  },
  {
    "text": "the good version right this is the more complete version and we'll just talk",
    "start": "989930",
    "end": "995480"
  },
  {
    "text": "through what it's doing so the first thing it does is sits the process priority and thread priority to as high",
    "start": "995480",
    "end": "1002050"
  },
  {
    "text": "as possible and the reason for that is what we want to do when we're benchmarking we want to measure our",
    "start": "1002050",
    "end": "1008290"
  },
  {
    "text": "little payload and we don't want anything else on the machine to affect that because that's gonna affect our",
    "start": "1008290",
    "end": "1013780"
  },
  {
    "text": "results so this is just saying hey computer don't worry about the 300 tabs I have everybody prone don't worry about",
    "start": "1013780",
    "end": "1019900"
  },
  {
    "text": "my virus scanner try and give this process and this this work as much CPU",
    "start": "1019900",
    "end": "1025660"
  },
  {
    "text": "as you can because the actual numbers here when we're benchmarking don't really matter it kind of doesn't matter",
    "start": "1025660",
    "end": "1031060"
  },
  {
    "text": "if this code runs in two seconds or four seconds it's how this code runs compared to the new code you're going to write",
    "start": "1031060",
    "end": "1038550"
  },
  {
    "text": "then we call our function so that's our warmup all right dotnet is compiled to",
    "start": "1038550",
    "end": "1044770"
  },
  {
    "text": "immediate language immediate languages then run through the JIT the just-in-time compiler and that has to",
    "start": "1044770",
    "end": "1050110"
  },
  {
    "text": "chew on your code for a bit so letting the JIT to have a go before we start",
    "start": "1050110",
    "end": "1055270"
  },
  {
    "text": "timing means we don't get we're not measuring that time so we warm up and",
    "start": "1055270",
    "end": "1060520"
  },
  {
    "text": "then we use a stopwatch so stop watching date/time are both as precise as each other they",
    "start": "1060520",
    "end": "1069620"
  },
  {
    "text": "both go down to the tech level but date time it's not granular the values don't",
    "start": "1069620",
    "end": "1075110"
  },
  {
    "text": "change as much wait if I got that wrong is it great anyway one of them said if you if you",
    "start": "1075110",
    "end": "1081350"
  },
  {
    "text": "had a tight loop when you were outputting stopwatch ticks and day time ticks they both output values but you",
    "start": "1081350",
    "end": "1087200"
  },
  {
    "text": "would see the stopwatch value change while the date time doesn't and then the date date time we're kind of catch up after a while they're always you",
    "start": "1087200",
    "end": "1094039"
  },
  {
    "text": "stopwatch and it's not like it has any overhead it's not actually timing it just pulls a high performance counter so",
    "start": "1094039",
    "end": "1101059"
  },
  {
    "text": "then we tell the garbage collector to go and do some stuff and again this is because we want our payload to be the only thing that matters garbage",
    "start": "1101059",
    "end": "1107690"
  },
  {
    "text": "collection takes time and if your payload needs garbage collection then that's cool you have to count that",
    "start": "1107690",
    "end": "1113480"
  },
  {
    "text": "because that's a real were thing but you don't want your measurement affected by collecting something else that happened",
    "start": "1113480",
    "end": "1119630"
  },
  {
    "text": "before you got to your code and then we have our loop and then we output the",
    "start": "1119630",
    "end": "1125630"
  },
  {
    "text": "other possible thing that people in the past have commented that might be wrong about this is that it's looping a hundred times and maybe that's not",
    "start": "1125630",
    "end": "1131720"
  },
  {
    "text": "enough and that's a good point it's kind of a little bit unknown you can't",
    "start": "1131720",
    "end": "1137360"
  },
  {
    "text": "there's no like one answer for how many times to run code but the theory is the more you run it the smoother you sort of",
    "start": "1137360",
    "end": "1144440"
  },
  {
    "text": "smooth out the peaks look the quirks the thing is you shouldn't use this code either sorry for everyone who took a",
    "start": "1144440",
    "end": "1149990"
  },
  {
    "text": "photo um the real way to measure coding dotnet is to use benchmark on it and",
    "start": "1149990",
    "end": "1156230"
  },
  {
    "start": "1153000",
    "end": "1252000"
  },
  {
    "text": "this is again why this talk exists because when I saw that line the pull request and I said no that's slow I",
    "start": "1156230",
    "end": "1161360"
  },
  {
    "text": "thought well I've been meaning to try up inched up my benchmark on it so let's see what it let's see how it works so",
    "start": "1161360",
    "end": "1167929"
  },
  {
    "text": "benchmark dotnet if you haven't heard of it it's an open source project it's part of the.net foundation but that's you",
    "start": "1167929",
    "end": "1174710"
  },
  {
    "text": "know it's not official Microsoft code one of the guys who works on that does work for Microsoft one of the other guys",
    "start": "1174710",
    "end": "1180710"
  },
  {
    "text": "works for JetBrains so it's kind of even um but it's used internally by Microsoft",
    "start": "1180710",
    "end": "1187340"
  },
  {
    "text": "by heaps of people and it's sort of the main performance tool the core Donna",
    "start": "1187340",
    "end": "1193669"
  },
  {
    "text": "core used these days so the Adam sit Nick is his name he who he",
    "start": "1193669",
    "end": "1200399"
  },
  {
    "text": "worked on BET's mark.net then got hired by Microsoft and then has sort of helped to bring it in and then move all the",
    "start": "1200399",
    "end": "1207450"
  },
  {
    "text": "performance work the.net core has to it and at the same time that's improved better fact on that a bunch which is",
    "start": "1207450",
    "end": "1214320"
  },
  {
    "text": "good it's super powerful so you can use it to compare all sorts of things I'm",
    "start": "1214320",
    "end": "1219870"
  },
  {
    "text": "focusing on comparing my code because essentially that's where you know that's",
    "start": "1219870",
    "end": "1226500"
  },
  {
    "text": "where most of the problems gonna lie I need to get my stuff right first but you can use it to compare full framework",
    "start": "1226500",
    "end": "1232110"
  },
  {
    "text": "versus dotnet core or the legacy jitter versus the new Riu jitter or x64 versus",
    "start": "1232110",
    "end": "1238379"
  },
  {
    "text": "x86 or all sorts things and there's of course plugins you know people can write their own extensions etc and you can",
    "start": "1238379",
    "end": "1243990"
  },
  {
    "text": "measure a bunch of things you can measure speed and memory and it tells you about garbage collections",
    "start": "1243990",
    "end": "1249210"
  },
  {
    "text": "it's got expose all sorts of cool stuff how it works is kind of simple but also",
    "start": "1249210",
    "end": "1257850"
  },
  {
    "start": "1252000",
    "end": "1261000"
  },
  {
    "text": "kind of long-winded so I'm not going to tell you I'm going to show you instead but this is not a demo heavy session",
    "start": "1257850",
    "end": "1266490"
  },
  {
    "start": "1261000",
    "end": "1282000"
  },
  {
    "text": "because benchmarks are slow and that's a good thing right most things when they're slow especially since we're",
    "start": "1266490",
    "end": "1272580"
  },
  {
    "text": "talking about performance you think god that's bad but actually it's good and it's good because it's really thorough which we'll see in a second so it's",
    "start": "1272580",
    "end": "1280830"
  },
  {
    "text": "gonna get bright should be big enough hopefully right let's write a benchmark",
    "start": "1280830",
    "end": "1287220"
  },
  {
    "start": "1282000",
    "end": "1528000"
  },
  {
    "text": "so this is a class low console application I've all I've done is added",
    "start": "1287220",
    "end": "1294750"
  },
  {
    "text": "a reference to benchmark dotnet from nougat and then I've built and saved and whatever just so we don't have any Wi-Fi issues there's no other cheating there's",
    "start": "1294750",
    "end": "1302279"
  },
  {
    "text": "no magical files here it's just one program file because benchmarks are",
    "start": "1302279",
    "end": "1307470"
  },
  {
    "text": "really simple to get started so the first thing we'll do is we'll tell our benchmark runner to run our benchmarks",
    "start": "1307470",
    "end": "1314490"
  },
  {
    "text": "and I'm gonna say to run them run all the benchmarks in the program class and",
    "start": "1314490",
    "end": "1321509"
  },
  {
    "text": "this is fairly standard for you know basic benchmarking but as you build up Suites of these things obviously you",
    "start": "1321509",
    "end": "1326669"
  },
  {
    "text": "have different classes for things there's also a benchmarks switcher which a little console app like a little menu",
    "start": "1326669",
    "end": "1332789"
  },
  {
    "text": "just cool so we've told benchmark don't net to run our benchmarks in this class simple as that",
    "start": "1332789",
    "end": "1338639"
  },
  {
    "text": "now to write a benchmark we just write a method so string and you string join and",
    "start": "1338639",
    "end": "1348710"
  },
  {
    "text": "transgender join comma separated and I",
    "start": "1348710",
    "end": "1354090"
  },
  {
    "text": "want to join my data so I'm just going to recreate that little line of code so for the data",
    "start": "1354090",
    "end": "1359970"
  },
  {
    "text": "I want a it's got a string array and I'll be lazy",
    "start": "1359970",
    "end": "1367700"
  },
  {
    "text": "you can kind of ignore this because this is not part of the benchmark so we have",
    "start": "1370360",
    "end": "1376360"
  },
  {
    "text": "an array of numbers from 1 to 10 obviously this would be real data in the real world why is that green really yeah",
    "start": "1376360",
    "end": "1384850"
  },
  {
    "text": "then what and so I've written the method and this method is my payload right this is what I've got a benchmark and that",
    "start": "1384850",
    "end": "1390490"
  },
  {
    "text": "means buck this string duck join that stream drawing with it now one thing you might have noticed is I'm returning a",
    "start": "1390490",
    "end": "1395649"
  },
  {
    "text": "value from it this is best practice for benchmarks because in the real world code that",
    "start": "1395649",
    "end": "1403299"
  },
  {
    "text": "you're emulating here you're going to use this value right the result of this string joint there are cases and this",
    "start": "1403299",
    "end": "1410409"
  },
  {
    "text": "one isn't one of them because the c-sharp compilers not quite smart enough to do this but there are cases where if you don't use the value",
    "start": "1410409",
    "end": "1418450"
  },
  {
    "text": "in your benchmark if I just called string going like this it's possible that a smart enough compiler or jitter",
    "start": "1418450",
    "end": "1424899"
  },
  {
    "text": "or something in future would know that string doc joint has no side effects and simply remove that line of code and of course",
    "start": "1424899",
    "end": "1431529"
  },
  {
    "text": "if I do that my benchmarks gonna look really good but I'm not gonna be able to trust it so we kind of pnow work by",
    "start": "1431529",
    "end": "1438639"
  },
  {
    "text": "returning a value and then the way we tell benchmark net that this is something we want to measure is we just",
    "start": "1438639",
    "end": "1444370"
  },
  {
    "text": "use the benchmark attribute so this is now a benchmark net program I can run",
    "start": "1444370",
    "end": "1451120"
  },
  {
    "text": "this this will work obviously benchmarking one thing is kind of irrelevant right what we want to do is",
    "start": "1451120",
    "end": "1456730"
  },
  {
    "text": "compare so I'll put in the other method",
    "start": "1456730",
    "end": "1463480"
  },
  {
    "text": "which is a great we'll compare the two",
    "start": "1463480",
    "end": "1470600"
  },
  {
    "text": "so it was start with string not empty then it passes in the current state and",
    "start": "1470940",
    "end": "1476660"
  },
  {
    "text": "the next state and we return the next",
    "start": "1476660",
    "end": "1482310"
  },
  {
    "text": "state is that right yeah convulse all",
    "start": "1482310",
    "end": "1487530"
  },
  {
    "text": "right so I'm gonna leave it like this this is a simple very simple benchmark",
    "start": "1487530",
    "end": "1493440"
  },
  {
    "text": "but I've got slides for slightly better ones for the same thing in a minute all",
    "start": "1493440",
    "end": "1500280"
  },
  {
    "text": "right so then we run oh one more thing before you run any benchmark you have to be in release mode if you're not in",
    "start": "1500280",
    "end": "1506580"
  },
  {
    "text": "release mode then again you're not really getting a good benchmark and actually benchmarked on there we'll just refuse to run so let's run the benchmark",
    "start": "1506580",
    "end": "1515430"
  },
  {
    "text": "and we'll talk through what it does once my machine compiles this",
    "start": "1515430",
    "end": "1523310"
  },
  {
    "text": "horrendously long program okay so this",
    "start": "1523310",
    "end": "1529140"
  },
  {
    "start": "1528000",
    "end": "1868000"
  },
  {
    "text": "is gonna spin up some words on the screen which you don't need to follow but that we've lost the left let me know",
    "start": "1529140",
    "end": "1538640"
  },
  {
    "text": "so what benchmark dotnet does is it goes through a bunch of phases and the phase",
    "start": "1538640",
    "end": "1545970"
  },
  {
    "text": "that it's working on is this name in the left ear so we wrapped a workload actual so it has its five stages it all that",
    "start": "1545970",
    "end": "1555660"
  },
  {
    "text": "stuff about priming the jitter of things is mainly what it's trying to do so the",
    "start": "1555660",
    "end": "1562440"
  },
  {
    "text": "first thing it does is it actually works out it measures itself to work out the",
    "start": "1562440",
    "end": "1568230"
  },
  {
    "text": "overhead of having benchmarked on that in your code then it measures your code",
    "start": "1568230",
    "end": "1573270"
  },
  {
    "text": "plus itself to work out roughly how long that piece of work will take and it does",
    "start": "1573270",
    "end": "1580140"
  },
  {
    "text": "that to try to work out how many times to run their code so when I said that a hundred might not be enough this is",
    "start": "1580140",
    "end": "1585900"
  },
  {
    "text": "actually running my code two million times right so two million operations that's for that one run and you can see",
    "start": "1585900",
    "end": "1593190"
  },
  {
    "text": "this is work load actual so this is the real work this is we're really measuring and all it's doing now is it's just",
    "start": "1593190",
    "end": "1598619"
  },
  {
    "text": "doing this over and over again for some amount of time until this number at the end here which is how long it takes kind",
    "start": "1598619",
    "end": "1605789"
  },
  {
    "text": "of settles down and stops being too picky and this is really important so before in my previous good example I was",
    "start": "1605789",
    "end": "1613799"
  },
  {
    "text": "running the code once to warm up the jitter and that's cool and it used to be cool in the past but now we have a thing",
    "start": "1613799",
    "end": "1621749"
  },
  {
    "text": "called tiered compilation and what that will do is the more you run your code the more aggressively the jitter will try and optimize it so at the moment you",
    "start": "1621749",
    "end": "1630899"
  },
  {
    "text": "know maybe it takes ten runs before it has finished trying its hardest and I'll leave you alone but in future that might",
    "start": "1630899",
    "end": "1637019"
  },
  {
    "text": "change right so benchmarking on that tries to just look at the numbers and just wait until things have settled down",
    "start": "1637019",
    "end": "1643649"
  },
  {
    "text": "you can see this is the start of a new run you can see how choppy these numbers are right there's a 900 800 we're over a",
    "start": "1643649",
    "end": "1649379"
  },
  {
    "text": "microsecond you can also see here now we're only doing 500,000 runs so I can",
    "start": "1649379",
    "end": "1657090"
  },
  {
    "text": "actually tell you right now this is the slow one right you can look at this and go well one of these is clearly way slower than the other because",
    "start": "1657090",
    "end": "1663980"
  },
  {
    "text": "essentially it worked out it couldn't do as many operations and it kind of does",
    "start": "1663980",
    "end": "1669809"
  },
  {
    "text": "they're just so that you know if your benchmark takes half an hour run does want to run your code a million times because that'll take too long",
    "start": "1669809",
    "end": "1675860"
  },
  {
    "text": "anyway so it's finished now that only took two minutes oops because they here run time two",
    "start": "1675860",
    "end": "1682110"
  },
  {
    "text": "minutes 17 seconds so that's not bad but that's a really simple benchmark as I've",
    "start": "1682110",
    "end": "1688619"
  },
  {
    "text": "got some pre-canned results held I'm running sort of five different things to benchmark and it runs them 24 times each",
    "start": "1688619",
    "end": "1695700"
  },
  {
    "text": "so it gets long the main thing we sort of look at here though is this table and so you can see that string join took on",
    "start": "1695700",
    "end": "1703710"
  },
  {
    "text": "average 336 nanoseconds an aggregate took 897 nanoseconds so it's almost but",
    "start": "1703710",
    "end": "1711389"
  },
  {
    "text": "not quite three times slower and that's our answer right if if all we were doing was trying to assess is this method",
    "start": "1711389",
    "end": "1717809"
  },
  {
    "text": "faster than this there's our answer and it is you know it's it's not",
    "start": "1717809",
    "end": "1723059"
  },
  {
    "text": "debatable right this is a number born of experimentation there's no opinion here there's no oh oh but I like Lincoln",
    "start": "1723059",
    "end": "1730200"
  },
  {
    "text": "like land returns that's cool if you're trying to work out which is faster this will tell you the answer so it's actually a really good tool to solve",
    "start": "1730200",
    "end": "1736170"
  },
  {
    "text": "arguments if you can get you have to you have to go through the argument that",
    "start": "1736170",
    "end": "1742140"
  },
  {
    "text": "everyone agrees that this is a good thing to test but if you can get to that so some other things that it does I'll",
    "start": "1742140",
    "end": "1749130"
  },
  {
    "text": "just scroll up hopefully I can find yeah yeah so as it's on the screen almost you can",
    "start": "1749130",
    "end": "1757200"
  },
  {
    "text": "see here it says build script so what this actually does what benchmarked on it does and if you can see it's kind of",
    "start": "1757200",
    "end": "1763860"
  },
  {
    "text": "float over the end here but it's a batch file and then here there's an exe so you",
    "start": "1763860",
    "end": "1768990"
  },
  {
    "text": "can't see the E and the X what benchmark net does is it actually recompiles your code so it spits out a bunch of code to",
    "start": "1768990",
    "end": "1776760"
  },
  {
    "text": "do the benchmarking then it puts your code in the middle of that and it compiles a new Exe so all that stuff I",
    "start": "1776760",
    "end": "1783180"
  },
  {
    "text": "said about process affinity and like garbage collection and making sure no runs affect other runs bets on",
    "start": "1783180",
    "end": "1791160"
  },
  {
    "text": "that solves this problem by just every time it does something you just generates a brand new exe so when one",
    "start": "1791160",
    "end": "1797370"
  },
  {
    "text": "benchmark finishes it can't affect the other one because the whole process just goes away which is really cool so you",
    "start": "1797370",
    "end": "1803340"
  },
  {
    "text": "can see whoops I can't scroll with the mouse so you can see where it's working out the overhead of jetting this pilot",
    "start": "1803340",
    "end": "1810210"
  },
  {
    "text": "phase here so it starts with 16 operations and then just grows exponentially until it gets to a number",
    "start": "1810210",
    "end": "1816270"
  },
  {
    "text": "where it's big enough but doesn't take too long I don't know the exact numbers",
    "start": "1816270",
    "end": "1822420"
  },
  {
    "text": "it tries to aim for but that's what it does then it doesn't warm up which is",
    "start": "1822420",
    "end": "1828210"
  },
  {
    "text": "warming up you know the jitter and those sort of things including all the code but that's called the overhead warm up",
    "start": "1828210",
    "end": "1835020"
  },
  {
    "text": "so that's measuring the overhead of measuring your code so when I said slow I meant fara you can see why then",
    "start": "1835020",
    "end": "1841710"
  },
  {
    "text": "there's the overhead of actually running your code and then we have all of the runs so this one did 100 runs this next",
    "start": "1841710",
    "end": "1849480"
  },
  {
    "text": "one I did 100 as well sometimes it stops after 30 it's really dependent on the",
    "start": "1849480",
    "end": "1855240"
  },
  {
    "text": "numbers you get I'm running on a laptop on battery power and that has a reasonable effect on things but",
    "start": "1855240",
    "end": "1863010"
  },
  {
    "text": "it's a benchmark let's go back to our slides so this is this is how easy it",
    "start": "1863010",
    "end": "1873300"
  },
  {
    "start": "1868000",
    "end": "2001000"
  },
  {
    "text": "can be to write a simple benchmark we can get a little bit fancier so this is the real sort of benchmark that I wrote",
    "start": "1873300",
    "end": "1879750"
  },
  {
    "text": "to actually answer this question of joining strings together so there's a few more things to this class firstly",
    "start": "1879750",
    "end": "1886320"
  },
  {
    "text": "there's two attributes at the top one is memory diagnosed so in that benchmark I just ran all I was doing was measuring",
    "start": "1886320",
    "end": "1892350"
  },
  {
    "text": "time I wasn't measuring memory add in the memory diagnose or attribute now we excuse me now we measure memory the our",
    "start": "1892350",
    "end": "1901800"
  },
  {
    "text": "plot exporter produces some nice graphs you'll see them in a minute there's also exporters that can produce",
    "start": "1901800",
    "end": "1907470"
  },
  {
    "text": "flame graphs you can get it to output the resulting assembler code of your bench method so you actually if you want",
    "start": "1907470",
    "end": "1914820"
  },
  {
    "text": "to get down to it see which one is more efficient in assembler I don't personally understand a simple bit and",
    "start": "1914820",
    "end": "1922320"
  },
  {
    "text": "so then the next thing I'm doing here is there's this program's attribute so if",
    "start": "1922320",
    "end": "1929160"
  },
  {
    "text": "you've ever used X unit theories it's a very similar concept what benchmark dotnet will do with this",
    "start": "1929160",
    "end": "1935190"
  },
  {
    "text": "code is it will run you all of the benchmarks in your file and your class with that property set to 1 then it'll",
    "start": "1935190",
    "end": "1942960"
  },
  {
    "text": "run all the benchmarks in your class with that property set to 2 and so on and so forth so this class has five",
    "start": "1942960",
    "end": "1949260"
  },
  {
    "text": "benchmarks there's 12 values in that array right this is going to run lots and lots of times each one you know a",
    "start": "1949260",
    "end": "1955500"
  },
  {
    "text": "separate process can't come slick with the other so it's really far then we",
    "start": "1955500",
    "end": "1960960"
  },
  {
    "text": "have our global setup so this is like class initialize if we continue with the test metaphor and they kind of end up",
    "start": "1960960",
    "end": "1966780"
  },
  {
    "text": "looking like tests and kind of get into the same sort of mindset so what we're doing here is initializing the data it's",
    "start": "1966780",
    "end": "1973380"
  },
  {
    "text": "kind of important that we do this in the setup method because benchmarked on that",
    "start": "1973380",
    "end": "1978660"
  },
  {
    "text": "we'll run this setup method once per iteration but not once per operation",
    "start": "1978660",
    "end": "1984420"
  },
  {
    "text": "right so the iteration was the one to a hundred thing that did and then the operation was when around the code two million times and you need to be able to",
    "start": "1984420",
    "end": "1990870"
  },
  {
    "text": "compare apples to apples so if you're constantly randomizing your data you may be not getting good results",
    "start": "1990870",
    "end": "1996290"
  },
  {
    "text": "so it's important to tell benchmarking on that hey here's where I want to do my setup and then here's the five things",
    "start": "1996290",
    "end": "2003140"
  },
  {
    "start": "2001000",
    "end": "2095000"
  },
  {
    "text": "that I benchmarked so first one the top left string concatenation this is like",
    "start": "2003140",
    "end": "2009530"
  },
  {
    "text": "the bad thing to do right this is what we're told never do never use the plus equals operator on a string in a loop",
    "start": "2009530",
    "end": "2015260"
  },
  {
    "text": "bad idea well let's see how bad it is underneath that we have string builder that's the",
    "start": "2015260",
    "end": "2020990"
  },
  {
    "text": "good version this is what we're all told to do instead so let's see and then I thought just for fun up on the top right",
    "start": "2020990",
    "end": "2027200"
  },
  {
    "text": "I thought what happens if I use a string builder but I can work out how long this resulting string is going to be so what",
    "start": "2027200",
    "end": "2033950"
  },
  {
    "text": "happens if I tell done that does it get any better then we have string dot join which is my favorite and then we have",
    "start": "2033950",
    "end": "2041090"
  },
  {
    "text": "aggregate the only other thing that's different on this screen is there's this bass line equals true parameter here and",
    "start": "2041090",
    "end": "2048200"
  },
  {
    "text": "what that does is it simply tells benchmark net for all of the times of",
    "start": "2048200",
    "end": "2054050"
  },
  {
    "text": "running compare them all against that method right and usually you would use this to say this is my existing code and",
    "start": "2054050",
    "end": "2059810"
  },
  {
    "text": "here's four different attempts at how I could change it and what this will mean is in the output table it'll they'll",
    "start": "2059810",
    "end": "2066200"
  },
  {
    "text": "have a scaled column and that method will always be set to one and then the rest will be set to something either",
    "start": "2066200",
    "end": "2072200"
  },
  {
    "text": "higher or greater than one and if you really want to just make it super simple do this with all your benchmarks put it",
    "start": "2072200",
    "end": "2078620"
  },
  {
    "text": "in baseline look at the table at the end find the one that's underneath one that one's better and if it's one that's",
    "start": "2078620",
    "end": "2083929"
  },
  {
    "text": "above one it's worse don't use that code it's really simple if you don't want to you know if you if what you're trying to",
    "start": "2083930",
    "end": "2089000"
  },
  {
    "text": "do is not get down into deep analysis that just tells you the answer so let's",
    "start": "2089000",
    "end": "2094220"
  },
  {
    "text": "look good results it's kind of a hard graph to read so there's some lines here",
    "start": "2094220",
    "end": "2099260"
  },
  {
    "text": "but we have aggregate so stream link aggregate method string builder an",
    "start": "2099260",
    "end": "2105950"
  },
  {
    "text": "initialized string builder string concatenation in a loop and then string go join so for one string string",
    "start": "2105950",
    "end": "2113750"
  },
  {
    "text": "concatenation wins there's a tiny little blip here and a tiny blip here and that makes sense because for one string",
    "start": "2113750",
    "end": "2119840"
  },
  {
    "text": "we're not can captain any anything right loop isn't going to do anything for two and three and four",
    "start": "2119840",
    "end": "2127160"
  },
  {
    "text": "stringbuilder with capacity wins with in initialize capacity there's a really",
    "start": "2127160",
    "end": "2133740"
  },
  {
    "text": "time in the line they basically can't say that but it's like a pixel high and essentially sorry to get that wrong",
    "start": "2133740",
    "end": "2141660"
  },
  {
    "text": "yes re-stream to live without capacity wins up to 4 sorry at 4 that's when stringbuilder says I'll hang",
    "start": "2141660",
    "end": "2148860"
  },
  {
    "text": "on I'm gonna run out of room and it has to go and do some work to allocate some more so that's why now stringbuilder",
    "start": "2148860",
    "end": "2154470"
  },
  {
    "text": "with capacity wins and stream builder with capacity wins the whole way up everything so you might look at this",
    "start": "2154470",
    "end": "2161370"
  },
  {
    "text": "code and you'd say okay I'm gonna go and set a capacity and all my string builders right this is for 1 to 10",
    "start": "2161370",
    "end": "2167460"
  },
  {
    "text": "strings if we do a hundred strings we kind of get a different picture right there's clearly three good methods and",
    "start": "2167460",
    "end": "2173790"
  },
  {
    "text": "too bad methods and the good methods are twice as fast as the bad minutes if we add in the thousand at good methods and",
    "start": "2173790",
    "end": "2180930"
  },
  {
    "text": "our four times as fast as out bad words if we go to 10,000 you can barely see",
    "start": "2180930",
    "end": "2186240"
  },
  {
    "text": "the good methods so this is where knowing how much data you're processing is really important if you're regularly",
    "start": "2186240",
    "end": "2196790"
  },
  {
    "text": "concatenated 8,000 strings then as long as you're not using one of these two methods it probably doesn't matter yeah",
    "start": "2196790",
    "end": "2205410"
  },
  {
    "text": "I say probably because sometimes it will depends what you're doing but there's clearly three good methods so this is",
    "start": "2205410",
    "end": "2213000"
  },
  {
    "text": "where I would say if you always only use",
    "start": "2213000",
    "end": "2218550"
  },
  {
    "text": "a string builder and initialize its capacity that's going too far right that's premature optimization but",
    "start": "2218550",
    "end": "2225360"
  },
  {
    "text": "if you put in the thought and the effort to decide okay I'm gonna use one of these three but I'm gonna pick the one",
    "start": "2225360",
    "end": "2232110"
  },
  {
    "text": "that's easiest to debug or easy to read then that's perfect alright that's where I think you should get to there's even",
    "start": "2232110",
    "end": "2237930"
  },
  {
    "text": "an argument if we go back to here that if you're only concatenated you know seven or eight strings maybe doesn't",
    "start": "2237930",
    "end": "2244680"
  },
  {
    "text": "matter which method you use it all depending on how often it runs but you need to understand these things this",
    "start": "2244680",
    "end": "2252120"
  },
  {
    "text": "code actually I've got on this slide so yes so you need to know the context right you need to know how many strings",
    "start": "2252120",
    "end": "2259200"
  },
  {
    "text": "your concatenate in example and how often you're doing it and it's totally fine to just say this",
    "start": "2259200",
    "end": "2265210"
  },
  {
    "text": "is good enough it's four times faster than what we used to have but it's more readable from this one which is you know",
    "start": "2265210",
    "end": "2271540"
  },
  {
    "text": "4.2 times faster it's totally fine just make it a conscious decision the thing",
    "start": "2271540",
    "end": "2277750"
  },
  {
    "text": "you also have to config consider is whether you're going after speed or memory or both and usually it's a",
    "start": "2277750",
    "end": "2284830"
  },
  {
    "text": "trade-off right by caching things we can make things faster but they take more RAM that's almost universal truth in",
    "start": "2284830",
    "end": "2291670"
  },
  {
    "text": "programming so you need to consider that as well if we have 320 character strings",
    "start": "2291670",
    "end": "2296940"
  },
  {
    "text": "string builder is still twice as fast as concatenation but it uses more memory",
    "start": "2296940",
    "end": "2302370"
  },
  {
    "text": "now 206 36 bytes it's not a lot of memory but maybe running on an IOT edge",
    "start": "2302370",
    "end": "2308620"
  },
  {
    "text": "device it is I don't know if your can cap combining 3 2 Meg strings again",
    "start": "2308620",
    "end": "2314350"
  },
  {
    "text": "string builder still twice as fast but now it uses less memory right and so if you analyze the wrong if you have a",
    "start": "2314350",
    "end": "2320530"
  },
  {
    "text": "benchmark that's looking at the wrong data you'll get the wrong results in the case where this full request was the",
    "start": "2320530",
    "end": "2328030"
  },
  {
    "text": "data list was up to three strings each one with about 15 characters so actually",
    "start": "2328030",
    "end": "2335470"
  },
  {
    "text": "none of this stuff mattered Dada Dada grant was totally fine and in fact what we did was for readability we",
    "start": "2335470",
    "end": "2342010"
  },
  {
    "text": "actually changed it to use string concatenation because there was an if statement series of here stainless that would had things to add to a list and",
    "start": "2342010",
    "end": "2348970"
  },
  {
    "text": "then combine them together and we just said let's just build up a string and because we're this code was used it was like once on page load and then it was a",
    "start": "2348970",
    "end": "2355720"
  },
  {
    "text": "single page application so it never Darrell again didn't matter but that was a deliberate decision and closed a",
    "start": "2355720",
    "end": "2361900"
  },
  {
    "text": "comment in the code saying yes I know we're not supposed to use string concatenation but anyway we go all right",
    "start": "2361900",
    "end": "2368790"
  },
  {
    "text": "some more examples for fun performance things",
    "start": "2368790",
    "end": "2373950"
  },
  {
    "start": "2369000",
    "end": "2418000"
  },
  {
    "text": "dictionary verses I dictionary so again we have our benchmark we have a memory diagnosis oh we have two fields one's a",
    "start": "2374710",
    "end": "2385249"
  },
  {
    "text": "dictionary one's an ayah dictionary both string to string and in global setup we're creating one dictionary and we're",
    "start": "2385249",
    "end": "2392599"
  },
  {
    "text": "storing a reference to it in each field one as a dictionary one as an ideally at",
    "start": "2392599",
    "end": "2398150"
  },
  {
    "text": "no point are we adding anything to a dictionary it's empty and then all our",
    "start": "2398150",
    "end": "2403190"
  },
  {
    "text": "benchmarks do is loop through and emptied its me and return it because we don't want to be thrown away does anyone",
    "start": "2403190",
    "end": "2411470"
  },
  {
    "text": "want to guess what the graphs gonna look like I mean that's kind of like if it looked the same I wouldn't be here right",
    "start": "2411470",
    "end": "2417410"
  },
  {
    "text": "so this is what the graph looks like this is kind of eye-opening to me using",
    "start": "2417410",
    "end": "2423680"
  },
  {
    "start": "2418000",
    "end": "2491000"
  },
  {
    "text": "I dictionary is twice as slow as using a dictionary and I mean it allocates",
    "start": "2423680",
    "end": "2431210"
  },
  {
    "text": "infinitely more RAM because dictionary allocates nothing but it allocates Ram a little bit around if there were things",
    "start": "2431210",
    "end": "2437480"
  },
  {
    "text": "in this dictionary the difference would actually grow if you use an eye dictionary every call every time you you",
    "start": "2437480",
    "end": "2446299"
  },
  {
    "text": "iterate through it's a little bit slower does anyone know why I heard it over",
    "start": "2446299",
    "end": "2452269"
  },
  {
    "text": "there boxing someone said it the answer is boxing so a dictionary enumerator is a struct which means it",
    "start": "2452269",
    "end": "2458960"
  },
  {
    "text": "can live on the stack and it can be really efficient and it allocates no memory but if you go through an interface dotnet doesn't know that it's",
    "start": "2458960",
    "end": "2466460"
  },
  {
    "text": "a stack you kind of lose that information so everything has to be boxed too deep and then every call to",
    "start": "2466460",
    "end": "2473869"
  },
  {
    "text": "any method on it has to be null checked it has to be a virtual call in case you're there's no inheritance play so",
    "start": "2473869",
    "end": "2482059"
  },
  {
    "text": "all these things that structs can't do that dotnet or the runtime can know about and",
    "start": "2482059",
    "end": "2488299"
  },
  {
    "text": "optimize for we kind of lose all that information so this one's interesting because a lot of people have in their",
    "start": "2488299",
    "end": "2494869"
  },
  {
    "start": "2491000",
    "end": "2557000"
  },
  {
    "text": "coding standards always go to interfaces and there's lots of reasons why that's really good but in the project I work on",
    "start": "2494869",
    "end": "2502489"
  },
  {
    "text": "the.net project system we've had multiple where we've had performance traces that",
    "start": "2502489",
    "end": "2509600"
  },
  {
    "text": "have pointed to this sort of thing and we have deliberately changed from interfaces to concrete's as parameters",
    "start": "2509600",
    "end": "2516320"
  },
  {
    "text": "in certain cases to save hundreds of megabytes of RAM so you kind of need to",
    "start": "2516320",
    "end": "2521840"
  },
  {
    "text": "be open to any possibility right this is where I said question your assumptions you assume that coding standards are",
    "start": "2521840",
    "end": "2528910"
  },
  {
    "text": "good and I mean they are but coding standards have a specific goal and",
    "start": "2528910",
    "end": "2535240"
  },
  {
    "text": "performance is not that and hopefully maybe readability is and maybe",
    "start": "2535240",
    "end": "2540320"
  },
  {
    "text": "maintainability but maybe not you know some some coding standards are just about consistency because there's a high",
    "start": "2540320",
    "end": "2546380"
  },
  {
    "text": "turnover of developers in the team so you kind of need to be open to question things if you're getting down to try to",
    "start": "2546380",
    "end": "2551840"
  },
  {
    "text": "you know fix some code you need to be open to all these things loops versus",
    "start": "2551840",
    "end": "2558740"
  },
  {
    "start": "2557000",
    "end": "2677000"
  },
  {
    "text": "link I kind of mentioned this one briefly at the start I like so I'm old I",
    "start": "2558740",
    "end": "2563960"
  },
  {
    "text": "like loops I like link as well but when I start typing my brain just writes loops by",
    "start": "2563960",
    "end": "2569420"
  },
  {
    "text": "itself so this benchmark we have an array of 10 things strings and we're",
    "start": "2569420",
    "end": "2577460"
  },
  {
    "text": "looping through finding the one called 5 and returning it it's a very simple filtering and then with the link",
    "start": "2577460",
    "end": "2585260"
  },
  {
    "text": "extension the filtering being done in first or default versus filtering and where and then calling excuse me calling",
    "start": "2585260",
    "end": "2592520"
  },
  {
    "text": "first to default so not a huge difference here right and obviously the loops gonna win because again it",
    "start": "2592520",
    "end": "2597860"
  },
  {
    "text": "wouldn't be on the screen if it didn't but the interesting thing here is the difference between the two link methods",
    "start": "2597860",
    "end": "2604280"
  },
  {
    "text": "I think plus if you're going after memory right loops don't allocate for",
    "start": "2604280",
    "end": "2610910"
  },
  {
    "text": "loop return allocates as simple as that they can be compiled straight to Al has a bunch of go-to statements and it's",
    "start": "2610910",
    "end": "2615920"
  },
  {
    "text": "done link will always use more memory I actually remember I should have tried",
    "start": "2615920",
    "end": "2621350"
  },
  {
    "text": "to find it for the slides but I remember seeing a tweet by James noon king who wrote Jason dotnet and he said he",
    "start": "2621350",
    "end": "2628660"
  },
  {
    "text": "commented out all the usings of system got linked in his code and then fixed up all the compilers and ran whatever tests",
    "start": "2628660",
    "end": "2637250"
  },
  {
    "text": "or benchmarks he had and it used 19 Meg less ram just by",
    "start": "2637250",
    "end": "2642390"
  },
  {
    "text": "removing link right there is an overhead to it now that's not say it's bad you shouldn't use it but there's an overhead",
    "start": "2642390",
    "end": "2647869"
  },
  {
    "text": "the difference between first or default aware is interesting as well and it comes from deferred execution so",
    "start": "2647869",
    "end": "2653670"
  },
  {
    "text": "essentially the wear method doesn't do anything it just remembers that you want to filter when you get there first or",
    "start": "2653670",
    "end": "2659550"
  },
  {
    "text": "default is then the thing that does something of course that remembering has to be stored somewhere so minor",
    "start": "2659550",
    "end": "2667650"
  },
  {
    "text": "differences like this can have an effect and this you know again this is 12 bytes right we're not talking big numbers but",
    "start": "2667650",
    "end": "2673710"
  },
  {
    "text": "these are micro benchmarks so you have to extrapolate these out the other thing to consider when you're looking at link",
    "start": "2673710",
    "end": "2680340"
  },
  {
    "start": "2677000",
    "end": "2742000"
  },
  {
    "text": "particularly with benchmarking is you've got to make sure you're measuring the right thing so that was linked over an",
    "start": "2680340",
    "end": "2688140"
  },
  {
    "text": "array that's linked to objects if you're trying to work out whether to use we're",
    "start": "2688140",
    "end": "2693270"
  },
  {
    "text": "then first of default or just first or default and you're using any framework then this benchmark doesn't tell you",
    "start": "2693270",
    "end": "2698760"
  },
  {
    "text": "that answer because when you use link to SQL or entity framework or any other link provider it has completely",
    "start": "2698760",
    "end": "2705150"
  },
  {
    "text": "different characteristics I actually wrote a link provider once that did",
    "start": "2705150",
    "end": "2710190"
  },
  {
    "text": "database access kind of like an any framework obviously not as big but and in my provider those two methods that",
    "start": "2710190",
    "end": "2719640"
  },
  {
    "text": "the way then first really fought I'll just first are they felt they would have executed the exact same code path because that's just how I wrote the code",
    "start": "2719640",
    "end": "2726589"
  },
  {
    "text": "so you need to make sure you're testing the right thing the other thing is if you are using database if you try and",
    "start": "2726589",
    "end": "2733920"
  },
  {
    "text": "benchmark something without a real database you're probably just going to get numbers that don't matter because",
    "start": "2733920",
    "end": "2739109"
  },
  {
    "text": "the database access and the network and whatever is always going to be slower alright last one again very simple we",
    "start": "2739109",
    "end": "2748080"
  },
  {
    "start": "2742000",
    "end": "2771000"
  },
  {
    "text": "have one string and we're calling - lower - lower invariant - upper and - upper endurance I did this one because I",
    "start": "2748080",
    "end": "2755640"
  },
  {
    "text": "remembered seeing some guidelines in documentation that said I think was to lower invariant was specifically",
    "start": "2755640",
    "end": "2762330"
  },
  {
    "text": "designed for performance you should always use that before you use a switch statement I thought that was interesting",
    "start": "2762330",
    "end": "2768869"
  },
  {
    "text": "so I thought I'd test it so you may notice there's two graphs on this screen",
    "start": "2768869",
    "end": "2774829"
  },
  {
    "start": "2771000",
    "end": "2835000"
  },
  {
    "text": "so the one on the left is dotnet framework and one on the right is Donna call so not that framework to lower",
    "start": "2774829",
    "end": "2782369"
  },
  {
    "text": "invariant is the fastest the documentation is correct interestingly don't leak or to upper invariant is the",
    "start": "2782369",
    "end": "2788339"
  },
  {
    "text": "fastest now clearly yeah there's a lot much in it and it's probably not worth",
    "start": "2788339",
    "end": "2793739"
  },
  {
    "text": "going and changing all of your code but again we have this situation where there's clear to worse performing ones",
    "start": "2793739",
    "end": "2799680"
  },
  {
    "text": "and two good ones and two lower is easy to read and it looks nice but if you",
    "start": "2799680",
    "end": "2805920"
  },
  {
    "text": "don't need culture then the invariant has a bunch of work it doesn't have to do but the really interesting thing",
    "start": "2805920",
    "end": "2812130"
  },
  {
    "text": "about this graph is the number in the top left so dotnet core is twice as fast as not",
    "start": "2812130",
    "end": "2818940"
  },
  {
    "text": "in that framework for string comparisons not for everything for but for this specific thing there's been multiple",
    "start": "2818940",
    "end": "2825150"
  },
  {
    "text": "optimizations done so even the slow the slowest one in.net core is faster than",
    "start": "2825150",
    "end": "2831809"
  },
  {
    "text": "the fastest woman on the framework so when I said be open to anything maybe you need to be open to changing a",
    "start": "2831809",
    "end": "2838829"
  },
  {
    "start": "2835000",
    "end": "2877000"
  },
  {
    "text": "framework right if you're doing performance work on a dotnet framework gap especially we've got an air core 3",
    "start": "2838829",
    "end": "2845039"
  },
  {
    "text": "and WinForms and WPF being a possibility it might be quicker to upgrade your app to done their core and don't even worry",
    "start": "2845039",
    "end": "2852450"
  },
  {
    "text": "about the performance work because you might just get a free speed bump or certainly worry about it after you make",
    "start": "2852450",
    "end": "2857700"
  },
  {
    "text": "that major change but you also need to know the quirks of the environment right this comes down to testing the right",
    "start": "2857700",
    "end": "2863009"
  },
  {
    "text": "thing if you're writing your benchmarks in a dotnet framework console app and then you're deploying your code on a",
    "start": "2863009",
    "end": "2869249"
  },
  {
    "text": "Linux boxes on that core you can't really make any decisions based on the number so make sure you test in the",
    "start": "2869249",
    "end": "2875700"
  },
  {
    "text": "right thing and then this this is my ideal this is my this is my favorite",
    "start": "2875700",
    "end": "2882900"
  },
  {
    "start": "2877000",
    "end": "3010000"
  },
  {
    "text": "coding on it this is straight from reference source microsoft.com and its",
    "start": "2882900",
    "end": "2889109"
  },
  {
    "text": "class called hybrid dictionary which probably no one in this room has used because it's very old it predates generics and it doesn't really have a",
    "start": "2889109",
    "end": "2896219"
  },
  {
    "text": "point anymore but hybrid dictionary is a dictionary class and its job is to it",
    "start": "2896219",
    "end": "2906330"
  },
  {
    "text": "changes its internal storage depending on which one depending on what's going",
    "start": "2906330",
    "end": "2911820"
  },
  {
    "text": "to perform faster and if you told me hey",
    "start": "2911820",
    "end": "2917850"
  },
  {
    "text": "Dave going around a dictionary that changes its internal store based on what's going to perform faster faster ah",
    "start": "2917850",
    "end": "2922970"
  },
  {
    "text": "my mind would be racing with right well if we time every time we couldn't add",
    "start": "2922970",
    "end": "2928290"
  },
  {
    "text": "method and we measure how long that takes and then we maybe build up a table or like oh maybe we could use machine",
    "start": "2928290",
    "end": "2933720"
  },
  {
    "text": "learning or build a neural network in this no no another nine nine is the answer right hybrid dictionary uses a",
    "start": "2933720",
    "end": "2940890"
  },
  {
    "text": "list internally you add add add add add and as soon as you get to nine it swaps copies your stuff to a dictionary a hash",
    "start": "2940890",
    "end": "2947760"
  },
  {
    "text": "hash table and it uses that that's all it does so the reason I love this",
    "start": "2947760",
    "end": "2954300"
  },
  {
    "text": "because I think this kind of sums up the whole picture of what Don Knuth was talking about right here is a class",
    "start": "2954300",
    "end": "2961350"
  },
  {
    "text": "where performance is super important right it's written on the tin this is supposed to be the fastest thing they",
    "start": "2961350",
    "end": "2968040"
  },
  {
    "text": "haven't gone and written the most complicated over-the-top thing in the world because that would be premature but they haven't ignored it they have",
    "start": "2968040",
    "end": "2975690"
  },
  {
    "text": "done exhaustive testing they have this comment is not me right this is in the code they have carefully tested and they",
    "start": "2975690",
    "end": "2984000"
  },
  {
    "text": "have worked out that in most cases and maybe being Microsoft and dotnet you know maybe they knew the real world",
    "start": "2984000",
    "end": "2989340"
  },
  {
    "text": "usage of this class from internal code I don't know but they have worked out that",
    "start": "2989340",
    "end": "2994770"
  },
  {
    "text": "for most people if we just cut over at nine we get very good results we get a",
    "start": "2994770",
    "end": "2999840"
  },
  {
    "text": "class that's easy to understand it's probably got less bugs this is the performance culture at work this is what",
    "start": "2999840",
    "end": "3005780"
  },
  {
    "text": "I love to see I love to see comments as like I know this looks weird but so in",
    "start": "3005780",
    "end": "3011450"
  },
  {
    "start": "3010000",
    "end": "3402000"
  },
  {
    "text": "summary should you always use a dictionary in seven I'd agree personally I think yes we can have for that",
    "start": "3011450",
    "end": "3016910"
  },
  {
    "text": "argument later but not like the answer to everything in programming it depends",
    "start": "3016910",
    "end": "3022660"
  },
  {
    "text": "you have to do the thinking and you have to not shy away from their thinking in",
    "start": "3022660",
    "end": "3028430"
  },
  {
    "text": "order to work out what the answer is for every single case because it always depends",
    "start": "3028430",
    "end": "3033650"
  },
  {
    "text": "so premature optimization isn't the root of all evil but sometimes it is that's",
    "start": "3033650",
    "end": "3040490"
  },
  {
    "text": "it thank you does anyone have any questions if there's no questions you",
    "start": "3040490",
    "end": "3050809"
  },
  {
    "text": "can go get coffee early yeah we're sorry",
    "start": "3050809",
    "end": "3062499"
  },
  {
    "text": "so the question was did I test for aggregate with a stringbuilder I didn't I suspect the answer will be",
    "start": "3067180",
    "end": "3075859"
  },
  {
    "text": "somewhere in the middle because the stringbuilder will make those additions faster but links still going to have an",
    "start": "3075859",
    "end": "3081230"
  },
  {
    "text": "overhead and a lambdas still going to have an overhead and in fact if you want to know why lambda has an overhead I'm talking tomorrow at 22 to about what the",
    "start": "3081230",
    "end": "3088249"
  },
  {
    "text": "compiler does to lambdas but I suspect that would be somewhere in the middle but it would probably still",
    "start": "3088249",
    "end": "3094130"
  },
  {
    "text": "be on the bad side in that it would probably still grow actually no maybe",
    "start": "3094130",
    "end": "3101480"
  },
  {
    "text": "not because the stringbuilder will make it yeah so yeah I suspect it'll be somewhere in the middle but yeah maybe it would be closer to the good results",
    "start": "3101480",
    "end": "3108589"
  },
  {
    "text": "as it as you grow your number of strings it's probably gonna hang down the bottom not at the top but the only way to tell",
    "start": "3108589",
    "end": "3115819"
  },
  {
    "text": "is to measure that's right any other questions yeah",
    "start": "3115819",
    "end": "3123789"
  },
  {
    "text": "that's a good question so the question was do we use any linting tools that for things that may require of you there are",
    "start": "3130930",
    "end": "3138520"
  },
  {
    "text": "heaps of Roselyn analyzers out there that can help with various situations we",
    "start": "3138520",
    "end": "3144790"
  },
  {
    "text": "specifically in the project system and in a lot of code that's in visual studio",
    "start": "3144790",
    "end": "3149880"
  },
  {
    "text": "we use a series of analyzers for threading problems because visually she",
    "start": "3149880",
    "end": "3154960"
  },
  {
    "text": "is highly sensitive to UI thread problems that's kind of I mean it's not",
    "start": "3154960",
    "end": "3160390"
  },
  {
    "text": "an itch it's not specific to video but it is something that you know a lot of people wouldn't need",
    "start": "3160390",
    "end": "3165940"
  },
  {
    "text": "I know there are analyzers around warning you about hidden allocations for",
    "start": "3165940",
    "end": "3171160"
  },
  {
    "text": "memory they're really good I've used them in the past so things like if you have a method that has a parameter on",
    "start": "3171160",
    "end": "3178450"
  },
  {
    "text": "the end if you don't pass anything for that params right it'll warn you and say",
    "start": "3178450",
    "end": "3183550"
  },
  {
    "text": "this is still going to allocate an array even though you're not using it and you could consider adding another overload if possible so things like that there's",
    "start": "3183550",
    "end": "3190030"
  },
  {
    "text": "some good ones for I don't recall any sort of general analysis ones",
    "start": "3190030",
    "end": "3195390"
  },
  {
    "text": "performance analyzers but I'm sure there's some out there I mean there's you know there's there's packs you can",
    "start": "3195390",
    "end": "3200620"
  },
  {
    "text": "get like gum I think code rush and all those sort of things and there's just hundreds of analyzers so yeah there's",
    "start": "3200620",
    "end": "3207070"
  },
  {
    "text": "probably a lot that the the trick with analyzers is if you have too many your performance off your coding environments",
    "start": "3207070",
    "end": "3213760"
  },
  {
    "text": "starts to you know fail so you've got to trade that off cool",
    "start": "3213760",
    "end": "3223380"
  },
  {
    "text": "because so they sued me the question was sometimes in the results you see red highlights if I benchmarked net it says",
    "start": "3237930",
    "end": "3244980"
  },
  {
    "text": "things like you know three iterations excluded for some reason and it's",
    "start": "3244980",
    "end": "3250260"
  },
  {
    "text": "basically it comes down to statistical analysis there's a bunch of maths the benchmarked on that does to work out",
    "start": "3250260",
    "end": "3255930"
  },
  {
    "text": "standard deviations and that sort of thing and so what that's doing is warning you that it's had to throw out some numbers",
    "start": "3255930",
    "end": "3261089"
  },
  {
    "text": "and therefore you know you kind of just need to take things with a grain of salt",
    "start": "3261089",
    "end": "3266910"
  },
  {
    "text": "right out of a hundred iterations doing two million operations if you'd have to",
    "start": "3266910",
    "end": "3272220"
  },
  {
    "text": "throw out three or four maybe it's not worth worrying about but maybe it is if",
    "start": "3272220",
    "end": "3277650"
  },
  {
    "text": "you get it repeatedly on like the same running it running the same benchmark in",
    "start": "3277650",
    "end": "3284309"
  },
  {
    "text": "the same environment over again like on a computer that's plugged into electricity then you maybe maybe it means your",
    "start": "3284309",
    "end": "3290130"
  },
  {
    "text": "benchmark your sort of benchmarking too much or there's too much variance in there and if you can narrow it down to",
    "start": "3290130",
    "end": "3296730"
  },
  {
    "text": "focus on a different bit of it or maybe this bit separately to this bit you might get better results but yeah",
    "start": "3296730",
    "end": "3303180"
  },
  {
    "text": "depending on how much it's having to exclude you sometimes can ignore it",
    "start": "3303180",
    "end": "3308250"
  },
  {
    "text": "and that also depends on how close your results are right if you've got two things your benchmarking and the numbers",
    "start": "3308250",
    "end": "3314160"
  },
  {
    "text": "are really close together and it's had to exclude some then you might not want to put too much faith in that but if one is a clear winner and it's had to",
    "start": "3314160",
    "end": "3320039"
  },
  {
    "text": "exclude some maybe doesn't matter the other thing just on that to remember is",
    "start": "3320039",
    "end": "3326190"
  },
  {
    "text": "that the numbers aren't important like the numbers aren't real right that took",
    "start": "3326190",
    "end": "3331200"
  },
  {
    "text": "300 nanoseconds on my machine doesn't matter it's not going to take 300 and a",
    "start": "3331200",
    "end": "3336660"
  },
  {
    "text": "seconds in production you know especially not on a cloud environment where there's lots of web requests",
    "start": "3336660",
    "end": "3341819"
  },
  {
    "text": "coming in or whatever it's not the real numbers it's the comparisons and really",
    "start": "3341819",
    "end": "3349170"
  },
  {
    "text": "that's like so the cool thing about motion I should have mentioned this earlier the so the granularity of stopwatch on my machine the most",
    "start": "3349170",
    "end": "3356279"
  },
  {
    "text": "granular thing you can use and on it is 300 nanoseconds on this machine on this laptop on battery belt",
    "start": "3356279",
    "end": "3361470"
  },
  {
    "text": "I cannot time more than that if I just time it myself so the fact that benchmark net can even determine the",
    "start": "3361470",
    "end": "3366990"
  },
  {
    "text": "difference is where its power comes in in running that many up and doing all that statistical analysis",
    "start": "3366990",
    "end": "3373130"
  },
  {
    "text": "so you need to kind of keep that in mind because yeah if something takes around",
    "start": "3373130",
    "end": "3378240"
  },
  {
    "text": "300 nanoseconds on this machine I'm not gonna notice it right like that's as",
    "start": "3378240",
    "end": "3383850"
  },
  {
    "text": "fast as this processor can report things back to the software running on that kind of thing so um yeah so don't get",
    "start": "3383850",
    "end": "3390660"
  },
  {
    "text": "too caught up on the actual numbers cool",
    "start": "3390660",
    "end": "3395960"
  },
  {
    "text": "thank you I'll be around if you know a small chat [Applause]",
    "start": "3395960",
    "end": "3404580"
  }
]