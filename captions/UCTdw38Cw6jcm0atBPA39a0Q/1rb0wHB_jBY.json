[
  {
    "text": "hello everyone hi welcome to my talk dotnet data security or net cord they",
    "start": "1250",
    "end": "6450"
  },
  {
    "text": "discuss a hope is not a strategy hi my name is stephen haunts and big privilege",
    "start": "6450",
    "end": "12690"
  },
  {
    "text": "to be here it's a remarkable job that NBC and dylan have done making this conference go virtual with such short",
    "start": "12690",
    "end": "19109"
  },
  {
    "text": "notice so massive respect to everyone involved okay so let's get started so my",
    "start": "19109",
    "end": "26099"
  },
  {
    "text": "name's Steven haunts and I'm a Microsoft MVP for developer tools I also run a",
    "start": "26099",
    "end": "31560"
  },
  {
    "text": "training company called Steven Tom's training although most of my in-person training is canceled at the moment and I",
    "start": "31560",
    "end": "38940"
  },
  {
    "text": "also do training for Prosise I have 21 almost 22 courses on the site so the",
    "start": "38940",
    "end": "47219"
  },
  {
    "text": "reason I'm doing this talk is I believe it is a developer's responsibility and when you're working at an organization",
    "start": "47219",
    "end": "52309"
  },
  {
    "text": "to look after your company's data and as software developers we have quite a lot of power and responsibility during that",
    "start": "52309",
    "end": "60050"
  },
  {
    "text": "quite often we see this kind of very blas√© attitude towards companies and",
    "start": "60050",
    "end": "65820"
  },
  {
    "text": "that they think they're not going to get hacked or attack you know have any kind of data stolen and really what they're",
    "start": "65820",
    "end": "72960"
  },
  {
    "text": "doing is hope is not a strategy basically so I'm hoping that you're not going to get attacked I'll have someone steal your data credit card data custom",
    "start": "72960",
    "end": "79890"
  },
  {
    "text": "data it's just not a strategy and you know it could be mixtone or attacker",
    "start": "79890",
    "end": "84900"
  },
  {
    "text": "back in from the outside like we see in the films or it could be a member of staff finger is disgruntled with the",
    "start": "84900",
    "end": "90150"
  },
  {
    "text": "company happens to have sequel Turner / sequel admin access and select stars",
    "start": "90150",
    "end": "95700"
  },
  {
    "text": "around a date swings to a spreadsheet now these attacks can happen from pretty much any any angle so the hope that",
    "start": "95700",
    "end": "102600"
  },
  {
    "text": "you're not going to have a problem is not strategy a quite a lot of time and certainly what I've found in projects as",
    "start": "102600",
    "end": "108210"
  },
  {
    "text": "well is that really when you're working on a large-scale project security tends",
    "start": "108210",
    "end": "114630"
  },
  {
    "text": "to get pushed back and back and back in the development cycle because it's not a big visual feature business people they",
    "start": "114630",
    "end": "121469"
  },
  {
    "text": "know security is important but it's not something they can normally touch and fill so generally it gets pushed back",
    "start": "121469",
    "end": "127879"
  },
  {
    "text": "which is a real shame so what is talk or what is not about say so it's",
    "start": "127879",
    "end": "133510"
  },
  {
    "text": "not a talk about mathematics which is good because I'm rubbish at maths and it's not a talk about how to break",
    "start": "133510",
    "end": "138670"
  },
  {
    "text": "cryptographic ciphers and it's not about the CIA the FBI in what his talk is",
    "start": "138670",
    "end": "145390"
  },
  {
    "text": "about it is about people like me and you you go into companies every day sit down we write code and you know just like",
    "start": "145390",
    "end": "153069"
  },
  {
    "text": "everyone else we're under tight deadlines we have to get stuff out and sometimes a lot the security stuff",
    "start": "153069",
    "end": "159040"
  },
  {
    "text": "really isn't that straightforward and it's not generally that well documented and you'll see from some of the class names today some of it is a bit cryptic",
    "start": "159040",
    "end": "166959"
  },
  {
    "text": "itself in dotnet which is kind of ironic so what we're talking about is kind of",
    "start": "166959",
    "end": "174129"
  },
  {
    "text": "you know nets but that core dotnet framework and generally a lot of the stuff gets used on the server side",
    "start": "174129",
    "end": "180010"
  },
  {
    "text": "although you can use the in client side as well now when dotnet call first came",
    "start": "180010",
    "end": "185379"
  },
  {
    "text": "around sort of around the dotnet called 1.1 here don't know standard 1.6 a majority of the cryptographic protocols",
    "start": "185379",
    "end": "192219"
  },
  {
    "text": "or algorithms that we wanted to use we're not their core which meant thought they call it wasn't really at the time",
    "start": "192219",
    "end": "198609"
  },
  {
    "text": "robust enough for the enterprise but when we got stop make call to their",
    "start": "198609",
    "end": "203949"
  },
  {
    "text": "standard to which things around summer 2017 that's when things really changed so we started to get quite near you know",
    "start": "203949",
    "end": "210609"
  },
  {
    "text": "feature parity with what was in the original data framework and now is where you know going through future versions",
    "start": "210609",
    "end": "217510"
  },
  {
    "text": "of.net are actually getting more primitive to being added in so this talk",
    "start": "217510",
    "end": "223449"
  },
  {
    "text": "is mostly about Microsoft technology it's about dotnet and on that core and but really the principles of what we're",
    "start": "223449",
    "end": "229269"
  },
  {
    "text": "talking about kind of transcend any platform so just because we're looking at specific but on an API what we're",
    "start": "229269",
    "end": "235870"
  },
  {
    "text": "talking about it's just as varied in PHP Python Swift Ruby api's would be",
    "start": "235870",
    "end": "240939"
  },
  {
    "text": "different but generally things are going to look very similar okay so what we're",
    "start": "240939",
    "end": "246129"
  },
  {
    "text": "going to so we're gonna cover quite a lot today this is gonna be quite a packed hour so I appreciate everyone's probably very tired and this is probably to make you",
    "start": "246129",
    "end": "252290"
  },
  {
    "text": "even more tired so we're gonna start off by looking at random numbers then we're",
    "start": "252290",
    "end": "259519"
  },
  {
    "text": "going to look at hashing and H max or hash message authentication codes then we're going to take a little detour and",
    "start": "259519",
    "end": "264950"
  },
  {
    "text": "talk about passwords and bring a talk about symmetric encryption using AES we're gonna talk about asymmetric",
    "start": "264950",
    "end": "271370"
  },
  {
    "text": "encryption using RSA and then we're gonna talk about digital signatures and once we've covered all of the primitives",
    "start": "271370",
    "end": "276919"
  },
  {
    "text": "we're going to start using some of them together so you know look at how we can you know combine so many different",
    "start": "276919",
    "end": "282080"
  },
  {
    "text": "primitives to build something bigger so what we're going to end up looking at is we're going to build a little what we're",
    "start": "282080",
    "end": "287360"
  },
  {
    "text": "going to show a little some kind of theoretical demo of a system with Alice and Bob what to send a secure message to each other Rikard me a very simple chat",
    "start": "287360",
    "end": "294380"
  },
  {
    "text": "so education now as I said we're gonna cover quite a lot quite quickly so if a",
    "start": "294380",
    "end": "300919"
  },
  {
    "text": "lot this stuff is very neat to you and if it gets the end of the talk and you're certainly thinking yourself oh my",
    "start": "300919",
    "end": "306229"
  },
  {
    "text": "god this is too much don't worry treat this talk is kind of an art of the possible week's kind of",
    "start": "306229",
    "end": "311780"
  },
  {
    "text": "gives you a little glimpse into what you can do with encryption and cryptography I'm going to provide you lots of",
    "start": "311780",
    "end": "317120"
  },
  {
    "text": "resources that you can go away with again talk if you want to and I'm gonna give you lots of code resources you can",
    "start": "317120",
    "end": "322580"
  },
  {
    "text": "download from github which are very easy to use and I want to give you lots of book and sort promo cycles recommendations as well I think if this",
    "start": "322580",
    "end": "329210"
  },
  {
    "text": "is kind of like your intro into the world and then I'll give you lots of stuff that you can use afterwards so",
    "start": "329210",
    "end": "334669"
  },
  {
    "text": "saying that this is where a real conference people will be putting their phones out and taking a photograph the",
    "start": "334669",
    "end": "341630"
  },
  {
    "text": "screen but the github repo I've got there contains all of the code from one of the versions of my workshop so I'll",
    "start": "341630",
    "end": "347390"
  },
  {
    "text": "do a one day workshop and all of what I'm talking about today is contained in",
    "start": "347390",
    "end": "352700"
  },
  {
    "text": "that workshop and so if you do download that zip file or you clone the repository in the complete folder and",
    "start": "352700",
    "end": "359930"
  },
  {
    "text": "you can basically download the solution that's in there it's all donate call compatible and all of the examples in",
    "start": "359930",
    "end": "367880"
  },
  {
    "text": "there all self-contained console applications so they're very easy to run build one and step through and it",
    "start": "367880",
    "end": "374150"
  },
  {
    "text": "contains everything that we're talking about here so if you do want so you know spend a bit of time but your leisure going through some of the stuff",
    "start": "374150",
    "end": "379879"
  },
  {
    "text": "in there a case of weights cryptography so generally we think of it as",
    "start": "379879",
    "end": "385429"
  },
  {
    "text": "protecting information we have some the information we want to hide it from people or you know make it unreadable",
    "start": "385429",
    "end": "391149"
  },
  {
    "text": "you do that using encryption encryption Germany uses something called encryption keys the results of what we encrypt is",
    "start": "391149",
    "end": "398929"
  },
  {
    "text": "called ciphertext and the art or the science of trying to break cryptographic",
    "start": "398929",
    "end": "404119"
  },
  {
    "text": "algorithms called cryptanalysis but there's kind of more to it than that",
    "start": "404119",
    "end": "409189"
  },
  {
    "text": "so cryptography basically falls down into four distinct pillars so we have confidentiality have integrity of",
    "start": "409189",
    "end": "417169"
  },
  {
    "text": "authentication and non-repudiation so confidentiality is you know making something confidential so you can't read",
    "start": "417169",
    "end": "422749"
  },
  {
    "text": "it integrity is about checking if something has become corrupted or has been",
    "start": "422749",
    "end": "429019"
  },
  {
    "text": "maliciously tampered with so we can look at some primitives for that authentication is about checking whether",
    "start": "429019",
    "end": "434959"
  },
  {
    "text": "someone has permission to to do something call check something which is",
    "start": "434959",
    "end": "440059"
  },
  {
    "text": "kind of an extension to the integrity model then we're going to look at it's not an appreciation which is a good way",
    "start": "440059",
    "end": "446599"
  },
  {
    "text": "of thinking about this it's kind of like a contract so if you sign a contract with someone there's some work safer I don't know thousand pounds or thousand",
    "start": "446599",
    "end": "452689"
  },
  {
    "text": "euros if you complete that work and then try and say no you're supposed to pay me two thousand euros you have a contract",
    "start": "452689",
    "end": "459019"
  },
  {
    "text": "in place so that you sort of one person can't refute it this is going to be computer equivalent that so cryptography",
    "start": "459019",
    "end": "467990"
  },
  {
    "text": "is used pretty much everywhere you cannot get out of bed in the morning without some kind of crypto going on so",
    "start": "467990",
    "end": "473179"
  },
  {
    "text": "online shopping if you use Amazon or any other websites Jemmy that's going to be behind you know",
    "start": "473179",
    "end": "479029"
  },
  {
    "text": "TLS and they're gonna have lots of encryption going on with all your card details when you use the cash machine I",
    "start": "479029",
    "end": "485419"
  },
  {
    "text": "guess many of us actually using cash at the moment but when the good old days when we used it more cash you put your",
    "start": "485419",
    "end": "491539"
  },
  {
    "text": "card into the Machine you type your PIN number in there's a cryptographic handshake going on between that machine and Bank to prove that you are the",
    "start": "491539",
    "end": "498349"
  },
  {
    "text": "person who owns that card and then you can withdraw your money smart phones",
    "start": "498349",
    "end": "503569"
  },
  {
    "text": "these days especially Apple I'm not quite sure about Androids I don't use one but you know soon as you switch the",
    "start": "503569",
    "end": "509839"
  },
  {
    "text": "phone on pretty much everything is encrypted locked down but then this kind of some other options",
    "start": "509839",
    "end": "516260"
  },
  {
    "text": "as well so things like Bitcoin and all the other 4,000 different types of coins are out there they're all based around",
    "start": "516260",
    "end": "521779"
  },
  {
    "text": "cryptography and how they work and also electronic voting systems starting to",
    "start": "521779",
    "end": "528110"
  },
  {
    "text": "spring up as well which use cryptography now I'm not going to get into an argument about whether electronic voting is good or bad and but it is an area",
    "start": "528110",
    "end": "535310"
  },
  {
    "text": "that is being used okay so let's start with our first primitive which is random",
    "start": "535310",
    "end": "543589"
  },
  {
    "text": "numbers so random numbers are pivotal to everything we do in security they are",
    "start": "543589",
    "end": "549769"
  },
  {
    "text": "basically what we used to generate how encryption keys now one of the easiest",
    "start": "549769",
    "end": "557000"
  },
  {
    "text": "ways to generate a random number Humanity's two systems at random and if you're trying to roll the dice or",
    "start": "557000",
    "end": "563480"
  },
  {
    "text": "generate lottery numbers then system dot random is perfectly fine if it generates a non deterministic encryption key",
    "start": "563480",
    "end": "570019"
  },
  {
    "text": "system that random is not very good a better one to use and a more deliberate",
    "start": "570019",
    "end": "575240"
  },
  {
    "text": "one in the API to use is one called RNG crypto service provider which is in the system security cryptography namespace",
    "start": "575240",
    "end": "581930"
  },
  {
    "text": "as is everything else that we're discussing today very easy to use I have",
    "start": "581930",
    "end": "588440"
  },
  {
    "text": "a little bit of sample code here so we have a method called generate random number we pass in a length which is a",
    "start": "588440",
    "end": "594230"
  },
  {
    "text": "number in bytes so if you want to focus you by the number you pass 42 into there instantiate the class you create a new",
    "start": "594230",
    "end": "601699"
  },
  {
    "text": "byte array of our design them and we call get bias passing in that byte array and then we get it filled with lots of",
    "start": "601699",
    "end": "608660"
  },
  {
    "text": "random data just great and then that gets returned as a byte array pretty much everything we're doing in the",
    "start": "608660",
    "end": "615380"
  },
  {
    "text": "sample code you see today uses byte array so sometimes you have to do a bit conversion between byte arrays and meet basic 64 encoded strings but",
    "start": "615380",
    "end": "622940"
  },
  {
    "text": "fundamentally we're dealing with batteries at its core that's found a",
    "start": "622940",
    "end": "628339"
  },
  {
    "text": "number that's very simple is seven or eight lines of code next one is hashing",
    "start": "628339",
    "end": "634660"
  },
  {
    "text": "so a good way of thinking of hashing is it's a bit like creating a fingerprint",
    "start": "634660",
    "end": "639949"
  },
  {
    "text": "for a piece of data so if you have cumin say a PDF and you run hashing",
    "start": "639949",
    "end": "644950"
  },
  {
    "text": "algorithm over it you're gonna get a big long number out back there and actually algorithm so that number is called a",
    "start": "644950",
    "end": "651790"
  },
  {
    "text": "hash it is kind of like a fingerprint if any of that data changes in that PDF",
    "start": "651790",
    "end": "657070"
  },
  {
    "text": "document so someone changes a name or even if you just trained one single bit in that document recalculate the hash",
    "start": "657070",
    "end": "663540"
  },
  {
    "text": "the entire document will be completely do what the tire hash will be completely different this is a good way of checking",
    "start": "663540",
    "end": "670810"
  },
  {
    "text": "integrity of files and data that we send across the internet so there's four",
    "start": "670810",
    "end": "676560"
  },
  {
    "text": "general principles or general guidelines for a hash algorithm so first of all it",
    "start": "676560",
    "end": "682300"
  },
  {
    "text": "has to be easy to compute I have some data I pass in and data hash it we get a",
    "start": "682300",
    "end": "689350"
  },
  {
    "text": "hash code out the back it should be infeasible to generate a specific hash so you can't start with a hash and go",
    "start": "689350",
    "end": "695680"
  },
  {
    "text": "hmm a piece of data do I need to generate the hash you can't do that it",
    "start": "695680",
    "end": "700810"
  },
  {
    "text": "should be infeasible to modify a message without changing the hash so going back to my PDF example when if he changes one",
    "start": "700810",
    "end": "706390"
  },
  {
    "text": "single bit any of that file in the hash code will be completely different and it",
    "start": "706390",
    "end": "712480"
  },
  {
    "text": "should be infeasible to find two identical hashes so if you have two pieces of data or two to PDF files you",
    "start": "712480",
    "end": "719200"
  },
  {
    "text": "generate a hash code for both of those files and the hash code is the same then unless those documents are identical you",
    "start": "719200",
    "end": "724899"
  },
  {
    "text": "shouldn't be able to do that that's called a hash collision some older algorithms like md5 do exhibit that",
    "start": "724899",
    "end": "731860"
  },
  {
    "text": "problem another good way of thinking about hashing and a good way of framing",
    "start": "731860",
    "end": "736899"
  },
  {
    "text": "the mental model around is when we talk about encryption it's a two-way operation so he has some data encrypted",
    "start": "736899",
    "end": "742060"
  },
  {
    "text": "with a key decrypt it in the same key data backs it's two-way hashing it's",
    "start": "742060",
    "end": "747339"
  },
  {
    "text": "one-way so you can't find a hash for a piece of data and then reverse that hash into which update that's impossible to",
    "start": "747339",
    "end": "754149"
  },
  {
    "text": "do it's also what guess is one of the interesting unique properties around hashing there's lots of different",
    "start": "754149",
    "end": "761880"
  },
  {
    "text": "though one that we were all probably familiar with his md5 and used quite a lot on UNIX and Linux so this produces a",
    "start": "761880",
    "end": "769770"
  },
  {
    "text": "16 by hash value it was designed by ron rivest in 1991 and you know for a while",
    "start": "769770",
    "end": "776130"
  },
  {
    "text": "it was quite well regarded but in 1996 a collision resistant vulnerability was",
    "start": "776130",
    "end": "781500"
  },
  {
    "text": "discovered where he know you can had two different pieces of data that generate the same hash it's still worth talking",
    "start": "781500",
    "end": "787170"
  },
  {
    "text": "about today because if you're integrating with an older legacy system you may still have to calculate md5 hashes at the",
    "start": "787170",
    "end": "794640"
  },
  {
    "text": "sample code I pointed you to at the beginning of the talk now there are examples of md5 in there so I works for",
    "start": "794640",
    "end": "801630"
  },
  {
    "text": "a bank in the UK one's called egg and we had a very old of as400 you know",
    "start": "801630",
    "end": "806850"
  },
  {
    "text": "mainframe system that sat in the back and data that was passing between those systems regularly had to do md5 hash",
    "start": "806850",
    "end": "813000"
  },
  {
    "text": "checks between the data so if you're working for an older legacy company or legacy system you might still need to",
    "start": "813000",
    "end": "819390"
  },
  {
    "text": "use it so then we have what's called the Shah family or the secure hash algorithm",
    "start": "819390",
    "end": "825060"
  },
  {
    "text": "family and it's very different variants that we have support for in.net so sha-1",
    "start": "825060",
    "end": "830570"
  },
  {
    "text": "juice is a 20-byte hash or 160 bits in sha - you can generate hashes at 256",
    "start": "830570",
    "end": "838650"
  },
  {
    "text": "bits in them which is 40 bytes or 512 bits after 64 bytes there is a newer one",
    "start": "838650",
    "end": "845310"
  },
  {
    "text": "called char free and the main fundamental differences that char 1 and char 2 had the involvement at the NSA",
    "start": "845310",
    "end": "852570"
  },
  {
    "text": "when they were designed which actually makes people in little nervous these days so there's a competition to find a",
    "start": "852570",
    "end": "858330"
  },
  {
    "text": "new hashing algorithm where the NSA isn't involved and that was based on a",
    "start": "858330",
    "end": "864480"
  },
  {
    "text": "cipher called kakaka finkley's city known as our name but it's",
    "start": "864480",
    "end": "869760"
  },
  {
    "text": "effective what's become char free now this isn't natively supported on that call yet and I imagine it might come at",
    "start": "869760",
    "end": "875730"
  },
  {
    "text": "some point in the future but at the moment is not you can find C sharp based open-source implementations of it but",
    "start": "875730",
    "end": "883230"
  },
  {
    "text": "I've seen you need to use anything like that at your peril and that's a discussion you have with your security officer but we're going to look at today",
    "start": "883230",
    "end": "890910"
  },
  {
    "text": "we can use sha-256 so again it's very it's very easy to use",
    "start": "890910",
    "end": "898320"
  },
  {
    "text": "most of what we're looking at today is actually quite easy to use so have a method here compute a sha-256 we pass in",
    "start": "898320",
    "end": "905850"
  },
  {
    "text": "a byte array of the information we wants a hash so this could be you know how PDF file that we've loaded up into a byte",
    "start": "905850",
    "end": "912570"
  },
  {
    "text": "array we call the static create method on the sha-256 class and then we call",
    "start": "912570",
    "end": "918660"
  },
  {
    "text": "compute hash passing the data that we want to hash and that will give us a bite already back that we return so in",
    "start": "918660",
    "end": "925350"
  },
  {
    "text": "this case it'll be 32 bytes in them so",
    "start": "925350",
    "end": "931770"
  },
  {
    "text": "that was hashing so there's a kind of a metallurgical step for hashing called authenticated hashing now this is very",
    "start": "931770",
    "end": "939090"
  },
  {
    "text": "very similar so as you see we have green boxes the hashing algorithm we pass some data in we get a hash out but in this",
    "start": "939090",
    "end": "946110"
  },
  {
    "text": "instance we also pass a key into the hashing algorithm so for example one",
    "start": "946110",
    "end": "951690"
  },
  {
    "text": "we're going to look at the keys 32 bytes in them so what this means is that if I hash a piece of data I have a key I then",
    "start": "951690",
    "end": "960120"
  },
  {
    "text": "send that piece of data or that hash code and a piece of data to someone else if you want to calculate that same hash",
    "start": "960120",
    "end": "965880"
  },
  {
    "text": "you have to have the same key if you pass the different Keynes weight you're going to get a completely different hash",
    "start": "965880",
    "end": "971070"
  },
  {
    "text": "code out the back this is why we call it hashing so if you think of it you know your mental model is that the keys come",
    "start": "971070",
    "end": "977580"
  },
  {
    "text": "like a password you both need to know the password to create the same hash this is where the authentication aspect",
    "start": "977580",
    "end": "983040"
  },
  {
    "text": "comes in so all your recipients have to have that key now sharing these keys is",
    "start": "983040",
    "end": "988320"
  },
  {
    "text": "very very difficult we're going to talk about that later under mentally for now everyone that wants to recalculate that same hash has",
    "start": "988320",
    "end": "994890"
  },
  {
    "text": "to have the same key yep so this is",
    "start": "994890",
    "end": "1000780"
  },
  {
    "text": "for verifying both integrity and authentication integrity in that we're calculating a hash for a piece of data",
    "start": "1000780",
    "end": "1006210"
  },
  {
    "text": "we can easily tell if a piece of data has been tampered with because a hash will change and hash codes or H facts",
    "start": "1006210",
    "end": "1014280"
  },
  {
    "text": "are based around md5 and the char family just as we looked at before and strength",
    "start": "1014280",
    "end": "1019800"
  },
  {
    "text": "is based on the length of the key so the longer the key you provide it the more secure this thing's going to be so the",
    "start": "1019800",
    "end": "1026130"
  },
  {
    "text": "most common attack against H Mac is a brute-force attack which is where you try you know billions of combinations of",
    "start": "1026130",
    "end": "1032699"
  },
  {
    "text": "keys and so you get the one that you want I'll see the longer the better",
    "start": "1032700",
    "end": "1038150"
  },
  {
    "text": "okay very simple to use looks kind of similar to what we looked up before so we have a method we pass in our data",
    "start": "1038150",
    "end": "1043920"
  },
  {
    "text": "that we want to hash we also pass in our King Mikey's going to be a 32 by its random number in this case generated in",
    "start": "1043920",
    "end": "1051120"
  },
  {
    "text": "the same way that we looked at earlier if RNG crypto service provider so if you",
    "start": "1051120",
    "end": "1056760"
  },
  {
    "text": "want to do a sha-256 based HVAC we instantiate the HVAC shanty 56 class and",
    "start": "1056760",
    "end": "1063000"
  },
  {
    "text": "we passed a key into its constructor and once we've done that we call compute hash and that objects asking the dates",
    "start": "1063000",
    "end": "1068760"
  },
  {
    "text": "that we want to hash and then out pops our hash on the other side so very very powerful concept what it lets us to but",
    "start": "1068760",
    "end": "1076770"
  },
  {
    "text": "just a few lines of code to use it which is fantastic so what we're talking about",
    "start": "1076770",
    "end": "1082140"
  },
  {
    "text": "hashing on take a little sort of detour and down the road of passwords something that affects us all",
    "start": "1082140",
    "end": "1088520"
  },
  {
    "text": "so securing storing passwords securely is very very important you know you have",
    "start": "1088520",
    "end": "1096660"
  },
  {
    "text": "to look every day when you see Troy hunk posting on Twitter there's some there's been some massive data breach and hole",
    "start": "1096660",
    "end": "1102960"
  },
  {
    "text": "loaded passwords have been stolen or maybe you've signed up for have I been pounding you see if one of his password and breach emails I've had that seven",
    "start": "1102960",
    "end": "1110550"
  },
  {
    "text": "times so storing passwords is very important because they do get stolen and people do manage to reverse-engineer",
    "start": "1110550",
    "end": "1116520"
  },
  {
    "text": "them very very easily which we'll look at in a moment so the way that we store",
    "start": "1116520",
    "end": "1121560"
  },
  {
    "text": "passwords in our system is you're doing it by hand is very very important there's two common attacks",
    "start": "1121560",
    "end": "1128400"
  },
  {
    "text": "we can use against passwords one is a brute-force attack this is where you try billions and billions and billions of",
    "start": "1128400",
    "end": "1134130"
  },
  {
    "text": "combinations of passwords until you get the password and to hash it so you get a",
    "start": "1134130",
    "end": "1140190"
  },
  {
    "text": "password that produces the same hashes we could store in your database typically passwords are stored as hashes so brute-force attacks what's it sounds",
    "start": "1140190",
    "end": "1148410"
  },
  {
    "text": "like a big job is actually becoming easier every year I mean when every time and video releases a new gtx card mms",
    "start": "1148410",
    "end": "1155180"
  },
  {
    "text": "you know we use graphics hardware as the means for brute force in passwords as",
    "start": "1155180",
    "end": "1161760"
  },
  {
    "text": "comments all for doing it is a tool called hash cat very easy to use you can just download it you can download a dictionary from somewhere or you can get",
    "start": "1161760",
    "end": "1168870"
  },
  {
    "text": "it to brute-force the password and it will just transfer away cracking passwords for you ever attack is called",
    "start": "1168870",
    "end": "1175500"
  },
  {
    "text": "a dictionary or a rainbow table attack and fundamentally what this is is it's a",
    "start": "1175500",
    "end": "1180600"
  },
  {
    "text": "pass it's a file which could be multiple gigabytes in size which has my chevy",
    "start": "1180600",
    "end": "1185700"
  },
  {
    "text": "single password you can think of and all of the variants you know what we tried to be clever by changing bowels into numbers and sticky and exclamation marks",
    "start": "1185700",
    "end": "1192240"
  },
  {
    "text": "around to the place no attackers are thoughts of all this they're not stupid so all of these combinations are in a",
    "start": "1192240",
    "end": "1198600"
  },
  {
    "text": "dictionary and then all that's all a hash caster there is he just looks in the dictionary it's literally just a",
    "start": "1198600",
    "end": "1204060"
  },
  {
    "text": "dictionary lookup a good way of demonstrating this if you're trying to",
    "start": "1204060",
    "end": "1209520"
  },
  {
    "text": "scare people in your organization's to take passwords security more seriously so as a website here called crack",
    "start": "1209520",
    "end": "1214920"
  },
  {
    "text": "station net this is quite a nice little tool so you take a password so in the",
    "start": "1214920",
    "end": "1220170"
  },
  {
    "text": "gray box here we have a sha-256 password you paste it in there you fill out the",
    "start": "1220170",
    "end": "1225450"
  },
  {
    "text": "CAPTCHA hit crack hash as you can see here in the green at the bottom is worked out that it is a sha-256 hash and",
    "start": "1225450",
    "end": "1231750"
  },
  {
    "text": "the password of secret 69 and on this same website you can actually make them a few dollars of work free agent you can",
    "start": "1231750",
    "end": "1237960"
  },
  {
    "text": "actually download the dictionary that they use on the site so what we talked",
    "start": "1237960",
    "end": "1246240"
  },
  {
    "text": "about here then is you know the most common way of storing passwords is to take a password the user types in you",
    "start": "1246240",
    "end": "1253230"
  },
  {
    "text": "hash it with a sha-256 and you store the hash in you date that's been a very common way of doing it for years now",
    "start": "1253230",
    "end": "1259710"
  },
  {
    "text": "normally when I can see the audience people put their hands up and tell me over there companies do this home do you",
    "start": "1259710",
    "end": "1266399"
  },
  {
    "text": "see that many video feeds on so we won't bother so the next common way of doing",
    "start": "1266399",
    "end": "1272100"
  },
  {
    "text": "this is what's called a salted hash now this is fundamentally very similar",
    "start": "1272100",
    "end": "1277139"
  },
  {
    "text": "except what we do is we append on to the password something called a salt and the salt is just a piece of entropy that you",
    "start": "1277139",
    "end": "1283379"
  },
  {
    "text": "add on to the password so it could be a few digit number or it could be a 32 by",
    "start": "1283379",
    "end": "1289200"
  },
  {
    "text": "random number that you append on to the password your hash the password and then you store that hash in your database but",
    "start": "1289200",
    "end": "1295499"
  },
  {
    "text": "you also have to store salt as well maybe not necessarily in the same table as the password but you do need to store",
    "start": "1295499",
    "end": "1301619"
  },
  {
    "text": "it somewhere so that when the user me types in their password on a system you look up that user you bring bet you know",
    "start": "1301619",
    "end": "1308730"
  },
  {
    "text": "you pull back their salt combine it with the password do the hash and in check with what's in the database this is incredibly common I'd say",
    "start": "1308730",
    "end": "1315779"
  },
  {
    "text": "probably you know 50 60 % the companies out there still do this and that's fine and the problem with this though is",
    "start": "1315779",
    "end": "1324740"
  },
  {
    "text": "whilst that might be a secure password now and they might take you know haschke",
    "start": "1324740",
    "end": "1331159"
  },
  {
    "text": "decades to try and crack those passwords as GPU hardware gets more powerful and",
    "start": "1331159",
    "end": "1336509"
  },
  {
    "text": "did you know that the rates in which gtx or nvidia AMD cards is progressing is",
    "start": "1336509",
    "end": "1341639"
  },
  {
    "text": "quite scary what might be a secure password now with this salt in five",
    "start": "1341639",
    "end": "1346799"
  },
  {
    "text": "years time could be not secure as a big problem so there's another technique that we",
    "start": "1346799",
    "end": "1352919"
  },
  {
    "text": "want to use which is called a password-based key derivation function sounds lovely",
    "start": "1352919",
    "end": "1358470"
  },
  {
    "text": "or a pbkdf2 you want to really impress people with acronyms what it's doing is",
    "start": "1358470",
    "end": "1367139"
  },
  {
    "text": "actually quite simple so it's the same as before we have a password and we have a salt but we also have a number which",
    "start": "1367139",
    "end": "1372389"
  },
  {
    "text": "is called a number of iterations so if you pass 10 a number of iterations it's",
    "start": "1372389",
    "end": "1377399"
  },
  {
    "text": "gonna rehash that password with the salt ten times before it gives you the final password if you put 10,000 in there it's",
    "start": "1377399",
    "end": "1385049"
  },
  {
    "text": "going to hash that pass for 10,000 times what a million in there to do a million times and the reason this is important",
    "start": "1385049",
    "end": "1391799"
  },
  {
    "text": "is because what it's doing is its algorithmically slowing down at hashing process so instead of hash",
    "start": "1391799",
    "end": "1398350"
  },
  {
    "text": "cap you know what's crack say a billion passwords a second you might slow it",
    "start": "1398350",
    "end": "1404080"
  },
  {
    "text": "down to a thousand hundred ten one it",
    "start": "1404080",
    "end": "1409150"
  },
  {
    "text": "depends on what that value is he what's in there so I'm sure you've all seen on some websites when you log on to the",
    "start": "1409150",
    "end": "1415600"
  },
  {
    "text": "website you type in username and password and it shows that there's kind of like a 5-6 second delay before anything actually happens behind the",
    "start": "1415600",
    "end": "1422260"
  },
  {
    "text": "scenes they're probably doing something like this you're probably waiting for their pbkdf2 function to run and it's",
    "start": "1422260",
    "end": "1430120"
  },
  {
    "text": "this is a great way of doing it because it's slowing down that password hashing process so if you want to do this in net",
    "start": "1430120",
    "end": "1438310"
  },
  {
    "text": "it's very very easy to do now there's a class that we use called RFC two eight nine eight derive bytes there's a lovely",
    "start": "1438310",
    "end": "1445240"
  },
  {
    "text": "piece of class mainly if you're intimately familiar with RFC spec numbers then that completely makes sense",
    "start": "1445240",
    "end": "1451560"
  },
  {
    "text": "for the rest of us normal people who aren't familiar with RFC spec numbers it's a bit confusing so if you click",
    "start": "1451560",
    "end": "1458470"
  },
  {
    "text": "through the documentation for dotnet you're probably gonna skip over it because you just doesn't make sense generally that is incredibly easy to use",
    "start": "1458470",
    "end": "1468520"
  },
  {
    "text": "which is great so in our method we have the password to be hashed you have our",
    "start": "1468520",
    "end": "1473560"
  },
  {
    "text": "salt as a battery and we have an iteration number that we pass it so we instantiate RFC two eight nine eight -",
    "start": "1473560",
    "end": "1480670"
  },
  {
    "text": "I've bytes past those three values in and we call get by it's 20 that gives us our hash code back and a reason we",
    "start": "1480670",
    "end": "1487990"
  },
  {
    "text": "passed 20 in to get bytes is because high in the scenes the RFC to eight nine",
    "start": "1487990",
    "end": "1493300"
  },
  {
    "text": "eight spec use sha-1 to do its hashing which gives you a hundred and sixty bits",
    "start": "1493300",
    "end": "1498850"
  },
  {
    "text": "hash code back which is 20 bytes Oh spec specifies a sha-1 so that's what",
    "start": "1498850",
    "end": "1505210"
  },
  {
    "text": "Microsoft is implemented so you only need to bring back the first 20 bytes",
    "start": "1505210",
    "end": "1510300"
  },
  {
    "text": "once you've run that you then go and store your password in the database along with the salts as previous and",
    "start": "1510300",
    "end": "1517140"
  },
  {
    "text": "your system obviously needs to know what the iteration counter is so that's probably can be stored in some secret convicts on we're now quite",
    "start": "1517140",
    "end": "1525929"
  },
  {
    "text": "the original version of this talk I did some timings on a much slower laptop time I'm using today but it kind of",
    "start": "1525929",
    "end": "1533070"
  },
  {
    "text": "illustrates a point so hundred iterations at the time took two milliseconds a thousand took 16",
    "start": "1533070",
    "end": "1538679"
  },
  {
    "text": "milliseconds right the way up to half a million which took seven seconds seven",
    "start": "1538679",
    "end": "1543929"
  },
  {
    "text": "seconds you might be thinking no way am I going to make my users wait seven seconds so what you need to do is you",
    "start": "1543929",
    "end": "1549570"
  },
  {
    "text": "need to have a conversation between your security officers organisations and people in the business and you have to",
    "start": "1549570",
    "end": "1556200"
  },
  {
    "text": "work out what your tolerance to that delay is going to be a company might say",
    "start": "1556200",
    "end": "1562710"
  },
  {
    "text": "- eh okay well three seconds is okay and or if your Amazon they might say well no",
    "start": "1562710",
    "end": "1568769"
  },
  {
    "text": "that's three seconds he's like a billion billion dollars twice so you need to you",
    "start": "1568769",
    "end": "1574889"
  },
  {
    "text": "know check that number or check what not be one to use over time you may want to",
    "start": "1574889",
    "end": "1582629"
  },
  {
    "text": "change that number so as servers and computers get faster no if you had half",
    "start": "1582629",
    "end": "1588929"
  },
  {
    "text": "a million as your iteration count today five years time I see that could be a",
    "start": "1588929",
    "end": "1594629"
  },
  {
    "text": "lot shorter in length so organizations I've worked in so we might have had say a hundred thousand as our iteration",
    "start": "1594629",
    "end": "1600659"
  },
  {
    "text": "count and then we wanted to double it say every year - um yeah five hundred thousand one easy way of doing that he's",
    "start": "1600659",
    "end": "1608730"
  },
  {
    "text": "dead if you want to do a gradual rollout of those changes then you just have a bit of logic in there that says you know",
    "start": "1608730",
    "end": "1614129"
  },
  {
    "text": "when your user logs in you automatically invalidate their password and then you spin them some yarn about how we want to",
    "start": "1614129",
    "end": "1620429"
  },
  {
    "text": "improve our security get them to type in their password again rehash it and then store it or you could have a more brute",
    "start": "1620429",
    "end": "1627720"
  },
  {
    "text": "force attack system we and validate everyone's passwords and then try and",
    "start": "1627720",
    "end": "1633029"
  },
  {
    "text": "get them to reload back in that's probably the easiest way of doing it",
    "start": "1633029",
    "end": "1638149"
  },
  {
    "text": "this is Shirley of Ashley Madison it's been discussed at conferences for quite a few years and if",
    "start": "1638149",
    "end": "1645320"
  },
  {
    "text": "anyone's not familiar with Ashley Madison it's a dating web sites the encourages people to have affairs not",
    "start": "1645320",
    "end": "1650750"
  },
  {
    "text": "particularly pleasant websites and but a few years ago they had a big data breach",
    "start": "1650750",
    "end": "1655990"
  },
  {
    "text": "maybe coordinated attack against them so all of their dates are stolen including",
    "start": "1655990",
    "end": "1661820"
  },
  {
    "text": "all of their passwords and behind the scenes and they try to crack these",
    "start": "1661820",
    "end": "1667370"
  },
  {
    "text": "passwords they found that they use a system called beat crypt for hashing their passwords a beat crypt is face",
    "start": "1667370",
    "end": "1672770"
  },
  {
    "text": "similar to what we've just looked at at the past web based key derivation function interface wise it's the same data to hash assault iteration number",
    "start": "1672770",
    "end": "1680810"
  },
  {
    "text": "how many differences these beat crypts uses the Blowfish I think it uses uses a",
    "start": "1680810",
    "end": "1686060"
  },
  {
    "text": "different algorithm internally doesn't matter they used an iterated hash",
    "start": "1686060",
    "end": "1691580"
  },
  {
    "text": "function which is good but I have a problem if Ashley Madison as they also",
    "start": "1691580",
    "end": "1696800"
  },
  {
    "text": "stole the source code which is a big problem as well so they broke through the source code and they found that some",
    "start": "1696800",
    "end": "1701870"
  },
  {
    "text": "enterprising developer may be a junior developer you know but come along and",
    "start": "1701870",
    "end": "1707900"
  },
  {
    "text": "tried to optimize the logon process so when you logged in it would then cache",
    "start": "1707900",
    "end": "1714080"
  },
  {
    "text": "an md5 token if you password so the next time you log in if you had that token you could just check that instead it",
    "start": "1714080",
    "end": "1721070"
  },
  {
    "text": "would lock you in faster which someone who doesn't know how these things work seems like you know a fairly reasonable",
    "start": "1721070",
    "end": "1726980"
  },
  {
    "text": "optimization once it found this out and knew where the tokens were they manage to go reverse at 90 percent all of the",
    "start": "1726980",
    "end": "1734600"
  },
  {
    "text": "passwords in their database Scherzer bit of a problem for them there's a link",
    "start": "1734600",
    "end": "1741980"
  },
  {
    "text": "here to an ARS technica article that kind of goes through this whole actually matters something in a lot more detail",
    "start": "1741980",
    "end": "1747530"
  },
  {
    "text": "and really interesting I highly recommend reading it okay so and",
    "start": "1747530",
    "end": "1756870"
  },
  {
    "text": "to look at then is symmetric encryption I hope everyone's still following me so far how will you see anyone on the",
    "start": "1756870",
    "end": "1763590"
  },
  {
    "text": "screen you'll get your camera's office there in mind okay so you spoke encryption the way this works is we have",
    "start": "1763590",
    "end": "1771120"
  },
  {
    "text": "some data we encrypts with a key which gives you your cipher text or your encrypted data then use the same",
    "start": "1771120",
    "end": "1777630"
  },
  {
    "text": "encryption key to decrypt the data and get original data back that's why it's called symmetric it's the same key for",
    "start": "1777630",
    "end": "1783270"
  },
  {
    "text": "both increase and decrypt now encryption this ways is good in one way it's very",
    "start": "1783270",
    "end": "1789990"
  },
  {
    "text": "very fast its algorithmic it's what computers are good at and but a problem is sharing those keys between people is",
    "start": "1789990",
    "end": "1796110"
  },
  {
    "text": "very hard I mean how do I get my encryption key to someone they wouldn t mail it probably not gonna send you on",
    "start": "1796110",
    "end": "1801780"
  },
  {
    "text": "whatsapp or to get in the database somewhere so there's a particular problem of symmetric encryption but the",
    "start": "1801780",
    "end": "1808500"
  },
  {
    "text": "actual speed of him having symmetric encryption is very very fast so as I",
    "start": "1808500",
    "end": "1815100"
  },
  {
    "text": "said before going back to our mental model but as we've said hashing was one way encryption is two-way as he wants you",
    "start": "1815100",
    "end": "1821820"
  },
  {
    "text": "out to recover they to be encrypted and a weighted symmetric encryption works is",
    "start": "1821820",
    "end": "1827100"
  },
  {
    "text": "it encrypts several bytes at a time so these bias called blocks Oh blocks",
    "start": "1827100",
    "end": "1832260"
  },
  {
    "text": "are padded so each block is the same size so if you've got a piece of data and you say got a block size of 128",
    "start": "1832260",
    "end": "1838130"
  },
  {
    "text": "bytes once you get to the end if it doesn't quite fill up on from 28 bytes or get padded no listen there's some",
    "start": "1838130",
    "end": "1845820"
  },
  {
    "text": "known data for zeros so in dotnet all of",
    "start": "1845820",
    "end": "1852210"
  },
  {
    "text": "our encryption algorithms derive from a class called symmetric algorithm so the one that we care about today is AES",
    "start": "1852210",
    "end": "1858690"
  },
  {
    "text": "crypto service provider but we do have implementations for DES crypto service provider and triple des of crypto",
    "start": "1858690",
    "end": "1864870"
  },
  {
    "text": "service provider so those are much older encryption algorithms not recommended for use from new systems as I said",
    "start": "1864870",
    "end": "1871080"
  },
  {
    "text": "before if you're integrating with something there's a lot older in legacy and you have to decrypt and there's",
    "start": "1871080",
    "end": "1876330"
  },
  {
    "text": "encrypted data is handy to know how to do it but because each of these algorithms inherits from that same base",
    "start": "1876330",
    "end": "1882630"
  },
  {
    "text": "class the interfaces are the same so once you know how to use one know how to use all of them",
    "start": "1882630",
    "end": "1889700"
  },
  {
    "text": "so a yes it's a is a standard with the National Institutes of Standards and",
    "start": "1890110",
    "end": "1895300"
  },
  {
    "text": "Technology became a standard in 2001 so it's quite old now and it was designed",
    "start": "1895300",
    "end": "1901330"
  },
  {
    "text": "by two Belgian mathematicians so Joan Damon and Genson Roman and it's based on a cipher called lime now some of you may",
    "start": "1901330",
    "end": "1908650"
  },
  {
    "text": "say that there's wine they'll manage class in Nets as well as a is crypto service provider fundamentally they're both the same",
    "start": "1908650",
    "end": "1914680"
  },
  {
    "text": "pretty much the same and it was based on the wind-down cipher so the way this",
    "start": "1914680",
    "end": "1921460"
  },
  {
    "text": "works is if you want to encryption data we pass in our plaintext so by its rays are they to answer encrypt you're",
    "start": "1921460",
    "end": "1927910"
  },
  {
    "text": "passing something called an initialization vector which in this case is going to be 16 a 16 byte andum number",
    "start": "1927910",
    "end": "1933490"
  },
  {
    "text": "and that's used to help actually kickstart the encryption of the first block now that number that IV is not a",
    "start": "1933490",
    "end": "1940780"
  },
  {
    "text": "key it's not secret you don't treat it the same as you treat a key but you do need to store it because when you go to",
    "start": "1940780",
    "end": "1946360"
  },
  {
    "text": "the crypts your data you need to pass the same IV into AES and we have three",
    "start": "1946360",
    "end": "1952480"
  },
  {
    "text": "key sizes we can use 128 bits 192 bits or 256 bits we're just gonna go straight",
    "start": "1952480",
    "end": "1958840"
  },
  {
    "text": "for 256 bits there's the bigger the better so you pass those free things in",
    "start": "1958840",
    "end": "1964840"
  },
  {
    "text": "you run the algorithm and you get your ciphertext out the other side Swink Nets you've got two versions of",
    "start": "1964840",
    "end": "1972370"
  },
  {
    "text": "this class you've got a EES managed and AES crypto service provider I've -",
    "start": "1972370",
    "end": "1977590"
  },
  {
    "text": "exactly the same thing and I'm most likely gonna keep exactly the same results the main difference is that IES",
    "start": "1977590",
    "end": "1984490"
  },
  {
    "text": "managed is a native dr implementations it's raining pretty sharp you know it's",
    "start": "1984490",
    "end": "1992020"
  },
  {
    "text": "an i/o based implementation but it's not it's not a certified implementation so there's a ratification process called",
    "start": "1992020",
    "end": "1997870"
  },
  {
    "text": "Phipps and it's Phipps 197 - - so this version isn't online 7-2 certified",
    "start": "1997870",
    "end": "2004520"
  },
  {
    "text": "whereas AES crypto service provider is now this uses the underlying windows crypto platform off using.net call on a",
    "start": "2004520",
    "end": "2011400"
  },
  {
    "text": "Mac it uses erm secure SSL this one is",
    "start": "2011400",
    "end": "2016980"
  },
  {
    "text": "35 now what that means is it's been officially tested so that means if I encrypt some data on my machine here in",
    "start": "2016980",
    "end": "2023100"
  },
  {
    "text": "botnet core and pass it over to another system that's implemented in Java and their version is Flip certified we can",
    "start": "2023100",
    "end": "2030720"
  },
  {
    "text": "guarantee that they're gonna be able to decrypt my data I send them and vice versa that's what that certification",
    "start": "2030720",
    "end": "2037290"
  },
  {
    "text": "means so slightly more complex to use this is probably the most complex piece",
    "start": "2037290",
    "end": "2043860"
  },
  {
    "text": "of code we can look at today so we have our in crypto effort your party now data",
    "start": "2043860",
    "end": "2049530"
  },
  {
    "text": "to encrypt you pass in how key is a byte array and we pass in our initialization",
    "start": "2049530",
    "end": "2055350"
  },
  {
    "text": "vector which is 16 bytes instantiate AES crypto service provider here I'm",
    "start": "2055350",
    "end": "2061500"
  },
  {
    "text": "explicitly setting the keys and we create a memory stream in a crypto",
    "start": "2061500",
    "end": "2066750"
  },
  {
    "text": "stream because it's stream based which means you can create very large amounts of data we pass the data in we call",
    "start": "2066750",
    "end": "2075290"
  },
  {
    "text": "crypto stream got write and flash remedy to array and then that gives us back our encrypted data now encryption decryption",
    "start": "2075290",
    "end": "2084780"
  },
  {
    "text": "is very very similar so most of that code is to say that's difficult to point",
    "start": "2084780",
    "end": "2090090"
  },
  {
    "text": "to the screen but the line here where it says new crypto stream Open bracket memory OMA it says AES crates decrypt",
    "start": "2090090",
    "end": "2097620"
  },
  {
    "text": "are there whereas on the previous slide it so it creates encryptor that's the only difference you quit the stream",
    "start": "2097620",
    "end": "2103950"
  },
  {
    "text": "write it flush it all to array that gives you your original data back as a byte array so if it was text so if it",
    "start": "2103950",
    "end": "2112590"
  },
  {
    "text": "was occur I know someone's name it from a database you'd probably pull that backers and you'd have it as text you",
    "start": "2112590",
    "end": "2119490"
  },
  {
    "text": "convert it to a byte array you encrypt it then you're probably going to base 64 encode that results story database and",
    "start": "2119490",
    "end": "2126000"
  },
  {
    "text": "you want to decrypt it you're gonna know i'm base64 encoded it back into a byte",
    "start": "2126000",
    "end": "2131160"
  },
  {
    "text": "array it crypt it and then convert it to back into normal string now in dotnet",
    "start": "2131160",
    "end": "2142210"
  },
  {
    "text": "to the current versions of.net something called free there's different modes of",
    "start": "2142210",
    "end": "2147339"
  },
  {
    "text": "AES that we can use and only use one called AES cipher block chaining mode",
    "start": "2147339",
    "end": "2154349"
  },
  {
    "text": "which is kind of insta for mode and typically what we do is in normal usage what we do is we encrypt some data using",
    "start": "2154349",
    "end": "2161710"
  },
  {
    "text": "AES and then using the same key we create a hash Mac of the encrypted data",
    "start": "2161710",
    "end": "2167790"
  },
  {
    "text": "so then we know that once we've sent our data to our recipients if they've got that key they can check the hash Mac",
    "start": "2167790",
    "end": "2174130"
  },
  {
    "text": "first to make sure the data hasn't been tampered with if it hasn't they can then decrypt it that's called an encrypt and",
    "start": "2174130",
    "end": "2180460"
  },
  {
    "text": "then Mac in the latest version of.net core we have a new mode is called GCM",
    "start": "2180460",
    "end": "2187300"
  },
  {
    "text": "mode which is called Gallinas cancer mode so what this basically does is it takes that hashing process at the ends",
    "start": "2187300",
    "end": "2194140"
  },
  {
    "text": "but it does it internally whilst it's encrypting which makes it quite fast and efficient and you'll get",
    "start": "2194140",
    "end": "2200650"
  },
  {
    "text": "in your hash Mac by default oh this looks slightly different to use but it's",
    "start": "2200650",
    "end": "2208180"
  },
  {
    "text": "quite straightforward so here we have some texts that ones have encrypt so mary had a little lamb and we pass in",
    "start": "2208180",
    "end": "2214750"
  },
  {
    "text": "three pieces of data and we have a nonce which is basically fundamentally the same as the initialization vector but in",
    "start": "2214750",
    "end": "2220390"
  },
  {
    "text": "the spec it's called a nonce nan borns in this case is 12 bytes we pass in our",
    "start": "2220390",
    "end": "2226240"
  },
  {
    "text": "key just said you did perform and then we can also pass in something called associated dates and this is just metadata the and passing along if you",
    "start": "2226240",
    "end": "2233710"
  },
  {
    "text": "are around data that you want to encrypt typically when I've used I've just passed it null I never said satiated",
    "start": "2233710",
    "end": "2240310"
  },
  {
    "text": "data in imagine if you had a customer record name address telephone number that sort of thing the Associated data",
    "start": "2240310",
    "end": "2246250"
  },
  {
    "text": "might be the king my defend database example she passed all of that in and",
    "start": "2246250",
    "end": "2253260"
  },
  {
    "text": "just realize I've got a mistake on this slide and I'll explain do you run all of",
    "start": "2253260",
    "end": "2258339"
  },
  {
    "text": "that you get your cipher text at the bottom but you also receive another piece of data out of it called a tag which is a byte array of data now that",
    "start": "2258339",
    "end": "2265390"
  },
  {
    "text": "tag is your hash mark so you're receiving two things back out of this so needs are going to fix that slide choose",
    "start": "2265390",
    "end": "2273940"
  },
  {
    "text": "G mode you know it's nice and easy which is great so we have our encrypt method",
    "start": "2273940",
    "end": "2279929"
  },
  {
    "text": "we're passing our data to encrypt passing the key passing the nonce which is 12 bytes so random number you",
    "start": "2279929",
    "end": "2286949"
  },
  {
    "text": "generate a new nonce every time you encrypt and data and we have our Associated data so then what I do is I",
    "start": "2286949",
    "end": "2294599"
  },
  {
    "text": "pre initialize some arrays so you have the tag which is 16 bytes so the hash",
    "start": "2294599",
    "end": "2300479"
  },
  {
    "text": "Mac we get back is 16 bytes we then initialize an array for our cipher text",
    "start": "2300479",
    "end": "2307130"
  },
  {
    "text": "we creates the AES GCM class by passing in K we call encrypt where we part in",
    "start": "2307130",
    "end": "2313829"
  },
  {
    "text": "our nonce and ASA to encrypt the cipher text array we want to fill the tag that we want to fill and the Associated data",
    "start": "2313829",
    "end": "2319939"
  },
  {
    "text": "and that gives us back our cipher text and our tag populated so we need some K",
    "start": "2319939",
    "end": "2325469"
  },
  {
    "text": "so I'm just returning a tuple or a topple and are you forming the world that gets returned back to the client's",
    "start": "2325469",
    "end": "2331969"
  },
  {
    "text": "so to decrypt what we do is we pass in what looks like 100 math things into our",
    "start": "2331969",
    "end": "2338459"
  },
  {
    "text": "methods and pass in our cipher text that's an encrypted data the party in the original key we passing the original",
    "start": "2338459",
    "end": "2344549"
  },
  {
    "text": "nonce that was used to encrypt the data we pass in the tag if he was given the",
    "start": "2344549",
    "end": "2350549"
  },
  {
    "text": "encrypt method you're passing the Associated data parse all that into a",
    "start": "2350549",
    "end": "2355890"
  },
  {
    "text": "decrypt method and then we get our data decrypted so if any of that cipher text",
    "start": "2355890",
    "end": "2362130"
  },
  {
    "text": "has changed or the tag has been modified or the nonce has been modified or you pass in the wrong key obviously not",
    "start": "2362130",
    "end": "2367199"
  },
  {
    "text": "reversal decrypt data so all those things have to be the same ok",
    "start": "2367199",
    "end": "2375419"
  },
  {
    "text": "a symmetric encryption so this is",
    "start": "2375419",
    "end": "2381439"
  },
  {
    "text": "fundamentally we were trying to achieve the same thing we try to take some data trying to scramble it in a way so that",
    "start": "2381439",
    "end": "2388049"
  },
  {
    "text": "people can't read it and we wants a way to decrypt it way this works and we've",
    "start": "2388049",
    "end": "2394109"
  },
  {
    "text": "things like RSA is he sort of having one key but have a key pair a public in the private key so what we do is we encrypt",
    "start": "2394109",
    "end": "2400919"
  },
  {
    "text": "with our public key and then our recipient decrypt with their private key",
    "start": "2400919",
    "end": "2406559"
  },
  {
    "text": "so if I'm saying in my data to fix on in the audience is Jessica I'm there to pretend I was here",
    "start": "2406559",
    "end": "2413340"
  },
  {
    "text": "she said she was going to turn it on so if I wanted to send some data to her I would request her public key she'll send",
    "start": "2413340",
    "end": "2419010"
  },
  {
    "text": "that to me it's public anyone can know it's I didn't quit the data with her public key send her the encrypted data",
    "start": "2419010",
    "end": "2424470"
  },
  {
    "text": "and then she would use her private key which only she knows to decrypt that data that's how things like I race how",
    "start": "2424470",
    "end": "2431520"
  },
  {
    "text": "you work this was developed by RSA data security incorporated by Rivest Shamir",
    "start": "2431520",
    "end": "2438570"
  },
  {
    "text": "and Adleman into name RSA the way this works is based around very very large",
    "start": "2438570",
    "end": "2443850"
  },
  {
    "text": "prime numbers of modular arithmetic and it's based on that way there's no efficient way to factor a very large",
    "start": "2443850",
    "end": "2449310"
  },
  {
    "text": "prime numbers so a minimum recommended kilo piss about 2048 bits the case",
    "start": "2449310",
    "end": "2455310"
  },
  {
    "text": "they're quite big and per typically you might use 4096 bit keys now RSA it's a",
    "start": "2455310",
    "end": "2463200"
  },
  {
    "text": "mathematical encryption scheme and there is a limitation you can only encrypts data up to the size of the key so if",
    "start": "2463200",
    "end": "2470340"
  },
  {
    "text": "you've got a 4096 bits okay you can't encrypt some piece of data and larger than that which is a little bit of a",
    "start": "2470340",
    "end": "2478890"
  },
  {
    "text": "limitation and you could say oh I could just get my data and split into lots of",
    "start": "2478890",
    "end": "2484050"
  },
  {
    "text": "chunks and encrypt those but you probably are gonna want to do that because RSA is the same you slow about",
    "start": "2484050",
    "end": "2489240"
  },
  {
    "text": "something like AES so as I said it's based around prime numbers and prime",
    "start": "2489240",
    "end": "2494910"
  },
  {
    "text": "number factorizations so if I said to you and you know what's 23 times 17s",
    "start": "2494910",
    "end": "2500580"
  },
  {
    "text": "that's easy work it out in your head on a calculator it's 391",
    "start": "2500580",
    "end": "2506090"
  },
  {
    "text": "now if I Saturn man and say what two prime numbers do I multiply together to make five thousand nine hundred",
    "start": "2506090",
    "end": "2511590"
  },
  {
    "text": "sixty-three normally I make the audience wet at this point trying to work it out and but I'm not going to do that now",
    "start": "2511590",
    "end": "2517880"
  },
  {
    "text": "it's much harder to do so the answer is 67 times 89 five thousand nine hundred",
    "start": "2517880",
    "end": "2524070"
  },
  {
    "text": "and sixty three so people now back into our key analogy so the public keys to",
    "start": "2524070",
    "end": "2529590"
  },
  {
    "text": "five thousand nine hundred and sixty-three it's the easy bit and the bit that was hard trying to work out",
    "start": "2529590",
    "end": "2534960"
  },
  {
    "text": "those two prime factors is the private key so go mad",
    "start": "2534960",
    "end": "2540710"
  },
  {
    "text": "you know I'm sending some dates it's Jessica she would have both of those keys I would request her public key five",
    "start": "2540710",
    "end": "2547849"
  },
  {
    "text": "nine six three encrypt the data send it to her and then she uses her private key 67 times eighty nine to decrypt the data",
    "start": "2547849",
    "end": "2557320"
  },
  {
    "text": "so all sounds a bit complex it's actually very easy to use so if I want",
    "start": "2557320",
    "end": "2562400"
  },
  {
    "text": "to generate the key pair public and private key I create class called RSA",
    "start": "2562400",
    "end": "2568040"
  },
  {
    "text": "crypto service provider passing my once well then call RSA dot X for parameters",
    "start": "2568040",
    "end": "2574490"
  },
  {
    "text": "false it's gonna be the public key and then RSA export parameters true give me",
    "start": "2574490",
    "end": "2579589"
  },
  {
    "text": "the private key it's kind of interesting API design there I've seen true and false to get the public and private key",
    "start": "2579589",
    "end": "2585680"
  },
  {
    "text": "less that's kinda how it works and dotnet which encryption data now that",
    "start": "2585680",
    "end": "2591500"
  },
  {
    "text": "we've actually generated those two keys so I pass in my data that I want to encrypt I then instantiate RSA crypto",
    "start": "2591500",
    "end": "2598970"
  },
  {
    "text": "service provider I import my public key recipients public key and I then just",
    "start": "2598970",
    "end": "2604700"
  },
  {
    "text": "call RSA encrypt passing in the data it gives me back encrypted data if we now",
    "start": "2604700",
    "end": "2610940"
  },
  {
    "text": "assume that I've sent that data to my recipients they come along and they instantiate crypto service provider RSA",
    "start": "2610940",
    "end": "2618650"
  },
  {
    "text": "crypto service provider the imports their private key it's their key only notes they call decrypt by passing in",
    "start": "2618650",
    "end": "2625400"
  },
  {
    "text": "the encrypted data and they get the encrypted by its way back out you have a",
    "start": "2625400",
    "end": "2630440"
  },
  {
    "text": "random they get the decrypted by its way back so that's yeah it's quite easy easy",
    "start": "2630440",
    "end": "2638270"
  },
  {
    "text": "to use very very powerful uses his ability to have this split key system",
    "start": "2638270",
    "end": "2643520"
  },
  {
    "text": "which we're going to come on soon why that's useful a moment just quickly I want to",
    "start": "2643520",
    "end": "2649150"
  },
  {
    "text": "primitives by looking at digital signatures so a digital signature is",
    "start": "2649150",
    "end": "2654190"
  },
  {
    "text": "something that's based on RSA it uses the public/private key scheme a good way",
    "start": "2654190",
    "end": "2659799"
  },
  {
    "text": "of thinking of a digital signature is you can have a piece of data and you can have how it digitally signed with",
    "start": "2659799",
    "end": "2665140"
  },
  {
    "text": "someone's private key so that if anyone further along tries to refute that data",
    "start": "2665140",
    "end": "2670740"
  },
  {
    "text": "that they've been sent because it's been encrypted or signed with a private key you can kind of prove who signs that",
    "start": "2670740",
    "end": "2677410"
  },
  {
    "text": "message a great way of thinking about this is if you've used any websites like DocuSign where you can go on and sign",
    "start": "2677410",
    "end": "2684490"
  },
  {
    "text": "contracts what they're staying behind the scenes it's creating digital signatures so that if anyone signed the",
    "start": "2684490",
    "end": "2690400"
  },
  {
    "text": "contracts on their own buying house or car you signed you're gonna pay one",
    "start": "2690400",
    "end": "2697450"
  },
  {
    "text": "Valley but then you try and refute it by saying you want to pay a different value that document is we mathematically",
    "start": "2697450",
    "end": "2702670"
  },
  {
    "text": "signed which you can use as evidence in court which is quite handy so three",
    "start": "2702670",
    "end": "2708579"
  },
  {
    "text": "parts of a digital signature we have key generation we have signing algorithm and",
    "start": "2708579",
    "end": "2713589"
  },
  {
    "text": "a signature verifier so the way this works in so what we want to do to create",
    "start": "2713589",
    "end": "2719829"
  },
  {
    "text": "digital signature now we talked about the limits with RSA in that you can only encrypt ops and size the key length",
    "start": "2719829",
    "end": "2725289"
  },
  {
    "text": "that's the same with a digital signature so what we do first is we get our data that we want to sign then this could be",
    "start": "2725289",
    "end": "2731440"
  },
  {
    "text": "a PDF of contracts that people have no physical e signed or whatever we then",
    "start": "2731440",
    "end": "2736599"
  },
  {
    "text": "take a hash or hash mark of that and documents we then sign the hash and that",
    "start": "2736599",
    "end": "2743260"
  },
  {
    "text": "gives us our digital signature so if we look at my brilliant piece of arts here",
    "start": "2743260",
    "end": "2749680"
  },
  {
    "text": "so we have Bob so Bob gets his private key and he creates a digital signature",
    "start": "2749680",
    "end": "2755819"
  },
  {
    "text": "he sends that he sends that digital thing shows the internet and then Alice here uses Bob's public key to verify",
    "start": "2755819",
    "end": "2761589"
  },
  {
    "text": "that our signature is true or not now when we talked about RSA we talked about",
    "start": "2761589",
    "end": "2767619"
  },
  {
    "text": "the fact that you encrypt with the recipients public key the main decrypt with their private key so here is the",
    "start": "2767619",
    "end": "2772930"
  },
  {
    "text": "other way around so the sender is using their private key to basically create a signature and then the recipient is",
    "start": "2772930",
    "end": "2779289"
  },
  {
    "text": "requesting his public key to verify that signature it's me so generating keys for digital",
    "start": "2779289",
    "end": "2789160"
  },
  {
    "text": "signatures is exactly the same as what we saw before and we'll cover that again",
    "start": "2789160",
    "end": "2796030"
  },
  {
    "text": "so then to sign the data so we pass in the hash of the data that we want to",
    "start": "2796030",
    "end": "2801339"
  },
  {
    "text": "sign we instantiate RSA crypto service provider we imports the private key and",
    "start": "2801339",
    "end": "2808210"
  },
  {
    "text": "then we have to create a class called RSA pkcs1 signature formatter brilliant",
    "start": "2808210",
    "end": "2813490"
  },
  {
    "text": "piece and Vern asked naming we then have to tell it what hashing algorithm we're using internally so obviously we we're",
    "start": "2813490",
    "end": "2820359"
  },
  {
    "text": "passing in a hash so to set that we had to pass in a magic string that says charlotte's you 56 in lap case",
    "start": "2820359",
    "end": "2826890"
  },
  {
    "text": "kid you not then what we do is we call create signature you pass in that hash",
    "start": "2826890",
    "end": "2832390"
  },
  {
    "text": "and then what that's going to do is it's going to return a byte array about digital signature so we've digitally",
    "start": "2832390",
    "end": "2839410"
  },
  {
    "text": "signed our PDF we've sent it to someone and they want to verify their signature is valid so what do they do so they take",
    "start": "2839410",
    "end": "2846490"
  },
  {
    "text": "the hash of the data and we send them the hash we send them the signature which is calculated the imports the",
    "start": "2846490",
    "end": "2854920"
  },
  {
    "text": "originators public key we then call RSA pkcs what we then least and she ate RSA",
    "start": "2854920",
    "end": "2860950"
  },
  {
    "text": "pkcs1 signature D formatter it's formatted before an HD formatter",
    "start": "2860950",
    "end": "2866579"
  },
  {
    "text": "again we take what hashing algorithm we use in so sha-256 and then we call",
    "start": "2866579",
    "end": "2872140"
  },
  {
    "text": "verify signature and that will return true or false true if it's a valid signature false if it's not",
    "start": "2872140",
    "end": "2880230"
  },
  {
    "text": "okay so I'm gonna need to I'm gonna need to get a wiggle on hex we're running out of time so we have quick recap so",
    "start": "2880230",
    "end": "2887290"
  },
  {
    "text": "confidentiality we look to IES and RSA integrity we look to char 256",
    "start": "2887290",
    "end": "2894480"
  },
  {
    "text": "authentication we look to H max and non-repudiation we looked at digital signatures so each of those four pillars",
    "start": "2894480",
    "end": "2901060"
  },
  {
    "text": "we now have a very simple primitive that we can use satisfying those pillars so",
    "start": "2901060",
    "end": "2907089"
  },
  {
    "text": "what we'll do now is we'll combine some of these together now as I said before we like this it's gonna go reasonably",
    "start": "2907089",
    "end": "2913839"
  },
  {
    "text": "quickly and if you are interested in how this works download the source code I said at the beginning I'll give you the",
    "start": "2913839",
    "end": "2919540"
  },
  {
    "text": "link at the end post it into slack because I've got very simple console apps with all of this",
    "start": "2919540",
    "end": "2925150"
  },
  {
    "text": "stuff in that you can run and step through really easily so I have it encryption so RSA has limits on the",
    "start": "2925150",
    "end": "2932859"
  },
  {
    "text": "amount of data you can encrypt discuss that but what the flexibility and speed",
    "start": "2932859",
    "end": "2937990"
  },
  {
    "text": "of AES sharing keys is hard so what we can do in this first instance is we're going to combine our essay and a es and",
    "start": "2937990",
    "end": "2946299"
  },
  {
    "text": "what we're going to do is we can have Alice and Bob and they're going to send a message between each other in a secure",
    "start": "2946299",
    "end": "2954009"
  },
  {
    "text": "fashion so what do we do then so we start off we take our or we generate an",
    "start": "2954009",
    "end": "2961000"
  },
  {
    "text": "Aes session key it's just a 32 by E that we're going to use for this particular conversation we encrypt our message",
    "start": "2961000",
    "end": "2969240"
  },
  {
    "text": "using that session key using AES just like what we looked at before then what",
    "start": "2969240",
    "end": "2975009"
  },
  {
    "text": "alice is going to do she requests Bob's public key he sends it to her and she",
    "start": "2975009",
    "end": "2980500"
  },
  {
    "text": "encrypts her own session key with RSA is in Bob's public key",
    "start": "2980500",
    "end": "2985950"
  },
  {
    "text": "she sends her encrypted message and her encrypted key over to Bob and an initialization vector as well why should",
    "start": "2985950",
    "end": "2991990"
  },
  {
    "text": "hurt Bob then uses his private key to decrypt the AES key once he's done that",
    "start": "2991990",
    "end": "2999579"
  },
  {
    "text": "he can then use that IES key to recover the original data ID krypton it with AES a fundamentally that's quite simple so",
    "start": "2999579",
    "end": "3008039"
  },
  {
    "text": "if it was imagining that as a packet of data or a class of data we have our RSA",
    "start": "3008039",
    "end": "3013769"
  },
  {
    "text": "encrypted session key that we send him we have our initialization vector I just realized I left off the previous diagram and we have our AES encrypted data so",
    "start": "3013769",
    "end": "3022890"
  },
  {
    "text": "let's run through this as quick example it's go place walk through the problem ok yes Alice generates an aes key",
    "start": "3022890",
    "end": "3031349"
  },
  {
    "text": "there's two bytes she generates an initialization vector 16 bytes she",
    "start": "3031349",
    "end": "3036599"
  },
  {
    "text": "encrypts her message using AES session key and the initialization vector she",
    "start": "3036599",
    "end": "3042690"
  },
  {
    "text": "encrypts the session key using Bob's publicly packages it all up sends it",
    "start": "3042690",
    "end": "3048210"
  },
  {
    "text": "over to Bob and he receives a message so he takes that he uses his private key to decrypt the",
    "start": "3048210",
    "end": "3056670"
  },
  {
    "text": "session key he's now got the original session key back he then uses that session key and initialization vector to",
    "start": "3056670",
    "end": "3063420"
  },
  {
    "text": "decrypt the message so the messages meet me at noon blow the clock tower where a red rose in the model",
    "start": "3063420",
    "end": "3068570"
  },
  {
    "text": "what we've done here then is we've managed to get a symmetric key between two people securely using RSA that's",
    "start": "3068570",
    "end": "3075450"
  },
  {
    "text": "that's the benefit we've got so Bob now wants to send a reply so he generates a new key so every session he created new",
    "start": "3075450",
    "end": "3081810"
  },
  {
    "text": "clean he creates a mission a new internationalization vector encrypts his",
    "start": "3081810",
    "end": "3087180"
  },
  {
    "text": "data using the key in the ivy he sends its crypts of session key of IRS I use",
    "start": "3087180",
    "end": "3096089"
  },
  {
    "text": "analysis public keys he's had some requests Alice's pocket key this time crypts that sends it across Alice",
    "start": "3096089",
    "end": "3103079"
  },
  {
    "text": "receives a message and now she wants to decrypt the message so she uses her private key to recover the session key",
    "start": "3103079",
    "end": "3109970"
  },
  {
    "text": "she then uses that session key and initialization vectors decrypt the message it says I will meet you I'll be",
    "start": "3109970",
    "end": "3117240"
  },
  {
    "text": "wearing a blue hat and red boots I'll be very fashionable like Bob great",
    "start": "3117240",
    "end": "3123540"
  },
  {
    "text": "so we've got data backwards and forwards between two people relatively easily using RSA and AES brilliant what can we",
    "start": "3123540",
    "end": "3132569"
  },
  {
    "text": "do now so we want to add integrity into this now so exactly the same as what we",
    "start": "3132569",
    "end": "3138990"
  },
  {
    "text": "did before except we had this orange blob in the middle so once we've encrypted our data once we've encrypted",
    "start": "3138990",
    "end": "3145560"
  },
  {
    "text": "the key using the recipients public key then create a hash Mac of the ciphertext in an initialization vector now we",
    "start": "3145560",
    "end": "3153630"
  },
  {
    "text": "create a hash Mac because we have access to that session key so well known as we use it to create the hash mag we then",
    "start": "3153630",
    "end": "3161220"
  },
  {
    "text": "saw that hash Mac in a packet of data and then on the other end Bob has to use when he has to decrypt",
    "start": "3161220",
    "end": "3168390"
  },
  {
    "text": "the session key first with virus on his private key once he's got the session key he can then recalculate the hash Mac",
    "start": "3168390",
    "end": "3173730"
  },
  {
    "text": "to make sure it hasn't been tampered with if he's happy he can then go and decrypt the data so again",
    "start": "3173730",
    "end": "3181770"
  },
  {
    "text": "as packets of data that we're sending so we have the encrypted session key initialization vector the encrypted data",
    "start": "3181770",
    "end": "3187890"
  },
  {
    "text": "and a hash mark of the encrypted data and the IV now this example here B is",
    "start": "3187890",
    "end": "3193800"
  },
  {
    "text": "using AES in cipher block chaining mode so if you're using if you have to use an older version of AES uses cipher block",
    "start": "3193800",
    "end": "3200400"
  },
  {
    "text": "chaining or you've got some legacy code or an older version of.net so this is how you do it if you didn't call three",
    "start": "3200400",
    "end": "3207860"
  },
  {
    "text": "you would use AES GCM moment now the beauty of GCM mode is it does that hashing process for you internally so",
    "start": "3207860",
    "end": "3214830"
  },
  {
    "text": "our original diagram it we have here looks very much like the original diagram and that we looked at at the",
    "start": "3214830",
    "end": "3220860"
  },
  {
    "text": "beginning of the hybrid encryption section so if using GCM you don't need to do that additional hash process which",
    "start": "3220860",
    "end": "3227520"
  },
  {
    "text": "is good but you would have slightly different packet that you sense you'd have your encrypted session key you'd",
    "start": "3227520",
    "end": "3233850"
  },
  {
    "text": "have the nonce you generated you'd have encrypted data and you'd have the tag which is effectively that H map right",
    "start": "3233850",
    "end": "3244200"
  },
  {
    "text": "let's go one step so we've conquered confidentiality as we've managed to encrypt data and",
    "start": "3244200",
    "end": "3249850"
  },
  {
    "text": "managed to swap the keys we've used integrity and authentication because we've used H Mac if we're internally in",
    "start": "3249850",
    "end": "3258370"
  },
  {
    "text": "GCM mode or manually so we have integrity and authentication you have to",
    "start": "3258370",
    "end": "3264220"
  },
  {
    "text": "be in possession of that decrypted AES key to cut that same hash Mac that's authentication if any of the data has",
    "start": "3264220",
    "end": "3271090"
  },
  {
    "text": "been tampered with then the hash Mac isn't going to match the one that sent e you recalculate it so that gives you a",
    "start": "3271090",
    "end": "3276640"
  },
  {
    "text": "gritty as well so let's add a digital signature into the mix so what we do",
    "start": "3276640",
    "end": "3283990"
  },
  {
    "text": "here is once we've calculated that hash Mac H Mac we can then pass that into a",
    "start": "3283990",
    "end": "3289450"
  },
  {
    "text": "digital signature algorithm carried it's a digital signature using the recipients private key so that means that when I",
    "start": "3289450",
    "end": "3297520"
  },
  {
    "text": "get sent across to the recipients they then have to use the sender's public key",
    "start": "3297520",
    "end": "3302530"
  },
  {
    "text": "to calculates the digital signature but they can't do that until they've decrypted the session key so they",
    "start": "3302530",
    "end": "3309610"
  },
  {
    "text": "decrypt the session key they check that the hash value then by recalculating it if it is they check whether the",
    "start": "3309610",
    "end": "3315340"
  },
  {
    "text": "signatures valid if it returns true and then go and decrypt the original message now that sounds like quite a lot we went",
    "start": "3315340",
    "end": "3322030"
  },
  {
    "text": "through that quite quickly but as I said if you do want to play around with it's not actually that complicated once you start stepping through some code so I do",
    "start": "3322030",
    "end": "3328180"
  },
  {
    "text": "encourage you to downloads sample code just have a play around with it I've tried I've documented it all fairly well",
    "start": "3328180",
    "end": "3333730"
  },
  {
    "text": "I think I might actually start playing around with it it actually becomes quite a bit clearer and what we discuss here",
    "start": "3333730",
    "end": "3341410"
  },
  {
    "text": "is kind of a very rudimentary way in which a very simple you know two-way chat system might work and the way that",
    "start": "3341410",
    "end": "3347440"
  },
  {
    "text": "you're sending data between people also if you think about when you're using a server you know you on the internet and",
    "start": "3347440",
    "end": "3353620"
  },
  {
    "text": "then it's a secure website using HTTPS so you've got a TLS connection going on",
    "start": "3353620",
    "end": "3358950"
  },
  {
    "text": "what it just describes is very similar to what TLS is so your server or your",
    "start": "3358950",
    "end": "3365080"
  },
  {
    "text": "website and the server will negotiate initially they will work they'll agree what ciphers they use in so they might",
    "start": "3365080",
    "end": "3371380"
  },
  {
    "text": "go let's use RSA let's use AES let's use hash max 256 so once they've agreed on",
    "start": "3371380",
    "end": "3377590"
  },
  {
    "text": "the protocols they're going to use you know your machine will then creates this session key it encrypts it send it",
    "start": "3377590",
    "end": "3384680"
  },
  {
    "text": "across to the receiver so that means they've got the session start in turn only traffic you send over HTTPS is",
    "start": "3384680",
    "end": "3391580"
  },
  {
    "text": "going to be using that symmetric key that's already been shared a similar",
    "start": "3391580",
    "end": "3396800"
  },
  {
    "text": "principle ok we've covered quite a lot here so that's what we've gone through",
    "start": "3396800",
    "end": "3403100"
  },
  {
    "text": "today I'm not going to read through it all again you've gone through it at length and but the stuff that's in",
    "start": "3403100",
    "end": "3410210"
  },
  {
    "text": "dotnet is and many other systems it's very powerful when you get to start using this stuff and it's actually",
    "start": "3410210",
    "end": "3415280"
  },
  {
    "text": "fascinating so if you are still interested after this is some things",
    "start": "3415280",
    "end": "3421580"
  },
  {
    "text": "that you can use so there's three really interesting books here so the first one on the Left code book by Simon Singh is",
    "start": "3421580",
    "end": "3429010"
  },
  {
    "text": "written for mere mortals to understand and it's kind of like a history books it starts from ancient times and it goes",
    "start": "3429010",
    "end": "3434690"
  },
  {
    "text": "from what way for you to reasonably modern times it's a fascinating read and my wife is horrified once when I read it",
    "start": "3434690",
    "end": "3441080"
  },
  {
    "text": "on the holiday it kind of reads a bit like a novel book in the middle every day cryptography eyes what an advance",
    "start": "3441080",
    "end": "3448609"
  },
  {
    "text": "books and the first half talks about all the premises we discuss today but it tells you how they work in terms quite an in-depth book and the second",
    "start": "3448609",
    "end": "3456109"
  },
  {
    "text": "half of the book talks about how they used every day so one section in the book talks about how cash machine on ATM",
    "start": "3456109",
    "end": "3462770"
  },
  {
    "text": "negotiates with the bank and it goes into a lot of detail how that works fascinating book that is quite heavy going applied cryptography on the right",
    "start": "3462770",
    "end": "3471080"
  },
  {
    "text": "there is the book that in the 90s the NSA tried to ban basically you know back",
    "start": "3471080",
    "end": "3477320"
  },
  {
    "text": "in the day encryption algorithms run it out to be exported from the US that were classes munitions and this book",
    "start": "3477320",
    "end": "3482990"
  },
  {
    "text": "obviously upset a lot of people it goes into a lot of detail about how or not these algorithms work it doesn't cover",
    "start": "3482990",
    "end": "3489290"
  },
  {
    "text": "AES and fortunately because it wasn't around time if you've liked maps and",
    "start": "3489290",
    "end": "3494540"
  },
  {
    "text": "your glutton for punishment there's some really good books to look at if you're a",
    "start": "3494540",
    "end": "3500330"
  },
  {
    "text": "pro star subscriber I've got a few things that you might find interesting so my course practical cryptography net and basically goes through what we've",
    "start": "3500330",
    "end": "3507680"
  },
  {
    "text": "done today but at a much slower pace with a lot more explanation it's about of course and I'm about planning to",
    "start": "3507680",
    "end": "3515839"
  },
  {
    "text": "update this course soon to make it fleece or net core so example is you download and the demos are doing that",
    "start": "3515839",
    "end": "3522049"
  },
  {
    "text": "course our doctorate framework but apart from the project fellow differences most",
    "start": "3522049",
    "end": "3527179"
  },
  {
    "text": "of the code is completely identical so the course is completely valid and by own plane to update it I'm some point",
    "start": "3527179",
    "end": "3533359"
  },
  {
    "text": "soon well at the back play-by-play enterprise data encryption if as you",
    "start": "3533359",
    "end": "3538369"
  },
  {
    "text": "revealed is of course a typical answer Clint's when we talk about Asia key volts anyone's interested in that and",
    "start": "3538369",
    "end": "3543519"
  },
  {
    "text": "its last course here blockchain principles and practices is of course I wrote about blockchain and the main",
    "start": "3543519",
    "end": "3550279"
  },
  {
    "text": "principle of the course is that if your CI CTO turns around to you and says I want a blockchain if I seem to do quite",
    "start": "3550279",
    "end": "3556160"
  },
  {
    "text": "a lot this course tells you exactly how they work what it's all about and it",
    "start": "3556160",
    "end": "3561199"
  },
  {
    "text": "builds up an example blockchain in c-sharp using some of the techniques that we've discussed in this talk so if",
    "start": "3561199",
    "end": "3567349"
  },
  {
    "text": "you think of this course is a bit of ammunition that you can have in your CTO city one's a blockchain you'll give you",
    "start": "3567349",
    "end": "3573289"
  },
  {
    "text": "the ammo you need to tome and say even yes that's a good idea or no that's a terrible idea no he's normally the correct answer so",
    "start": "3573289",
    "end": "3581619"
  },
  {
    "text": "thank you very much affirmation to finish one minute before the end that's quite amazing and I have a blog that",
    "start": "3581619",
    "end": "3589189"
  },
  {
    "text": "Stephen haunts come I'll blog about all sorts of things I've got a on Twitter",
    "start": "3589189",
    "end": "3594650"
  },
  {
    "text": "and of Steven haunts be great to interact on there maybe once this whole",
    "start": "3594650",
    "end": "3601849"
  },
  {
    "text": "pandemic nightmare is over maybe I can come back to Porto another year and I can bum my two day that you've got my",
    "start": "3601849",
    "end": "3607969"
  },
  {
    "text": "two days security workshop which you might find interesting apart from that thank you very much for",
    "start": "3607969",
    "end": "3613640"
  },
  {
    "text": "having me I know she doing a virtual conference has been very hard for everyone it's a lot of screen time for",
    "start": "3613640",
    "end": "3619519"
  },
  {
    "text": "people and a lot of us speakers have had to grapple with how to do this but I think it's gone fairly well so again",
    "start": "3619519",
    "end": "3626179"
  },
  {
    "text": "thank you very much to NDC and didn't BT pulling this all together and thank you very much to everyone for attending I",
    "start": "3626179",
    "end": "3632419"
  },
  {
    "text": "thank you",
    "start": "3632419",
    "end": "3635078"
  }
]