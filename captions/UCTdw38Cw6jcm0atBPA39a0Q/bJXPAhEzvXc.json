[
  {
    "text": "hi Oslo yeah are Dave",
    "start": "2840",
    "end": "9240"
  },
  {
    "text": "Aron there go for",
    "start": "16439",
    "end": "23080"
  },
  {
    "text": "[Applause] mainly because you've just heard almost",
    "start": "33320",
    "end": "39160"
  },
  {
    "text": "all the Norwegian I speak so what are genetic algorithms in",
    "start": "39160",
    "end": "44920"
  },
  {
    "text": "the first place the concept as a whole is an optimization",
    "start": "44920",
    "end": "51359"
  },
  {
    "text": "metaheuristic which is fancy talk for a kind of shortcuts to find good solutions",
    "start": "51359",
    "end": "58840"
  },
  {
    "text": "to some problems ideally the best solution but we'll usually have to",
    "start": "58840",
    "end": "64198"
  },
  {
    "text": "settle for something good enough due to constraints like time or",
    "start": "64199",
    "end": "69400"
  },
  {
    "text": "money there are many kinds of such optimization humanistics but what",
    "start": "69400",
    "end": "77080"
  },
  {
    "text": "makes genetic algorithms unique is that as you may have guessed from the name",
    "start": "77080",
    "end": "82720"
  },
  {
    "text": "they are inspired by realworld biological evolution primarily the",
    "start": "82720",
    "end": "87799"
  },
  {
    "text": "principles of survival of the fit random combination of different sets of old",
    "start": "87799",
    "end": "94320"
  },
  {
    "text": "genes no not like these into new ones and random",
    "start": "94320",
    "end": "100040"
  },
  {
    "text": "mutations the history goes back to about 1950 When Alan touring as in touring",
    "start": "100040",
    "end": "107479"
  },
  {
    "text": "test touring machine touring completeness and so on proposed a learning machine in which he figured",
    "start": "107479",
    "end": "114960"
  },
  {
    "text": "that the mechanism of learning would be something similar to evolution",
    "start": "114960",
    "end": "120159"
  },
  {
    "text": "nothing much ever came of that approach to machine learning and it took a few",
    "start": "120159",
    "end": "125240"
  },
  {
    "text": "decades for genetic algorithms in general to get much serious traction but",
    "start": "125240",
    "end": "132200"
  },
  {
    "text": "in the late 1980s the first commercial product based on genetic algorithms a",
    "start": "132200",
    "end": "138599"
  },
  {
    "text": "Mainframe toolkit for industrial processes came out from General Electric",
    "start": "138599",
    "end": "144800"
  },
  {
    "text": "and in 1989 a genetic algorithm toolkit called evolver came out for PCs as those were",
    "start": "144800",
    "end": "153040"
  },
  {
    "text": "the hot new thing at the time these days systems such as mat lab have some",
    "start": "153040",
    "end": "160680"
  },
  {
    "text": "genetic algorithm rout routines and functions and such built in and most",
    "start": "160680",
    "end": "167120"
  },
  {
    "text": "major programming languages have some kind of genetic algorithm libraries or",
    "start": "167120",
    "end": "172440"
  },
  {
    "text": "other such packages available but the actual usage of",
    "start": "172440",
    "end": "178080"
  },
  {
    "text": "genetic algorithms Still Remains mostly obscure used by companies internally for",
    "start": "178080",
    "end": "183840"
  },
  {
    "text": "their industrial processes Logistics and scheduling and so forth but once in a",
    "start": "183840",
    "end": "189959"
  },
  {
    "text": "while it does get used for something a little more interesting and more publicly known most famously in 2005",
    "start": "189959",
    "end": "198040"
  },
  {
    "text": "NASA used a genetic algorithm to design the antenna for its st5 series of",
    "start": "198040",
    "end": "205000"
  },
  {
    "text": "satellites which then got launched in 2006 no that's not just a paperclip that",
    "start": "205000",
    "end": "210760"
  },
  {
    "text": "you got bent up by someone sitting fidgeting in a boring meeting the NASA jet propulsion",
    "start": "210760",
    "end": "217959"
  },
  {
    "text": "laboratory website says its unusual shape is expected because most human",
    "start": "217959",
    "end": "223080"
  },
  {
    "text": "antenna designers would never think of such a design and that is one of the great advantages of this approach these",
    "start": "223080",
    "end": "230319"
  },
  {
    "text": "algorithms are much less hampered by any expectation of similarity to previous",
    "start": "230319",
    "end": "237799"
  },
  {
    "text": "Solutions however today will only be looking at much simpler problem domains",
    "start": "237799",
    "end": "243720"
  },
  {
    "text": "for the purpose of making understandable demos so how do genetic algorithms work",
    "start": "243720",
    "end": "251120"
  },
  {
    "text": "most people upon hearing about them think oh that must be terribly",
    "start": "251120",
    "end": "256320"
  },
  {
    "text": "complicated but they're not really they consist of a series of fairly simple",
    "start": "256320",
    "end": "262600"
  },
  {
    "text": "steps first we create an initial population of candidates in genetic",
    "start": "262600",
    "end": "269039"
  },
  {
    "text": "algorithm link lingos lingo these are generally called chromosomes but since",
    "start": "269039",
    "end": "274560"
  },
  {
    "text": "every living thing contains lots and lots of chromosomes in every cell I don't like that term I think it just",
    "start": "274560",
    "end": "280800"
  },
  {
    "text": "leads to confusion so I'm just going to call them candidates I've also heard them called individuals or Solutions or",
    "start": "280800",
    "end": "288720"
  },
  {
    "text": "phenotypes to use another actual genetic term but most people don't know that one",
    "start": "288720",
    "end": "293840"
  },
  {
    "text": "so yeah I'm going to ignore that one too the next step is to assess the Fitness",
    "start": "293840",
    "end": "301039"
  },
  {
    "text": "of each of these candidates according to whatever criteria we want to apply we do",
    "start": "301039",
    "end": "307039"
  },
  {
    "text": "it at this point mainly because it supplies the data usually used in The Next Step which is to ask are we there",
    "start": "307039",
    "end": "314120"
  },
  {
    "text": "yet I mean are We Done Yet this is usually based on the fitness",
    "start": "314120",
    "end": "319280"
  },
  {
    "text": "but could be based on other criteria we'll see some of those later or a combination of both Fitness and other",
    "start": "319280",
    "end": "328280"
  },
  {
    "text": "criteria assuming were're not yet done then next we select some breeders to use",
    "start": "328280",
    "end": "334120"
  },
  {
    "text": "in actually breeding the Next Generation and this is also usually based on the",
    "start": "334120",
    "end": "339199"
  },
  {
    "text": "fitness to simulate survival of the fittest after that as you may have",
    "start": "339199",
    "end": "344800"
  },
  {
    "text": "guessed we then use those breeders to breed the Next Generation and some of the previous",
    "start": "344800",
    "end": "350840"
  },
  {
    "text": "population particularly the fittest ones may be carried over into this new population but usually",
    "start": "350840",
    "end": "358639"
  },
  {
    "text": "not next is a very important but unusual and easily forgotten step when you're",
    "start": "358639",
    "end": "364880"
  },
  {
    "text": "talking about it which is to mutate those new candidates so we get some more",
    "start": "364880",
    "end": "370080"
  },
  {
    "text": "diversity in the gene pool and finally we go back to assessing the fitness of",
    "start": "370080",
    "end": "376000"
  },
  {
    "text": "these new candidates and this sequence could be",
    "start": "376000",
    "end": "381319"
  },
  {
    "text": "represented at a very high level with some fairly simple code like so and this happens to be in Ruby which",
    "start": "381319",
    "end": "389039"
  },
  {
    "text": "I chose because it reads fairly close to just plain English so even those of you",
    "start": "389039",
    "end": "395720"
  },
  {
    "text": "coming from like Java or fshp or whatever uh you'll probably understand",
    "start": "395720",
    "end": "400880"
  },
  {
    "text": "that if not uh well I'm hoping that the surrounding verbiage will at least",
    "start": "400880",
    "end": "406360"
  },
  {
    "text": "convey the general concepts now let's take a closer look at",
    "start": "406360",
    "end": "411759"
  },
  {
    "text": "what goes on at each step by working through an example first we create an initial",
    "start": "411759",
    "end": "417960"
  },
  {
    "text": "population of candidates but what is a candidate and how do we create",
    "start": "417960",
    "end": "423280"
  },
  {
    "text": "one these are different solutions to some problem like the shape of an",
    "start": "423280",
    "end": "428440"
  },
  {
    "text": "antenna and can be represented usually as different instances of the same data structure",
    "start": "428440",
    "end": "435599"
  },
  {
    "text": "that can be any data structure we want so long as we can feed that to functions",
    "start": "435599",
    "end": "441440"
  },
  {
    "text": "that will evaluate the fitness and uh combine old ones into new ones and",
    "start": "441440",
    "end": "448080"
  },
  {
    "text": "mutate them the simplest common type of candidate is just a string of bits and this will do",
    "start": "448080",
    "end": "455199"
  },
  {
    "text": "fine for candidates that consist of a series of yes no decisions that may sound simplistic but",
    "start": "455199",
    "end": "462560"
  },
  {
    "text": "there is a huge category of problems that boil down to this called napsack problems which is a category of",
    "start": "462560",
    "end": "470240"
  },
  {
    "text": "constrained resource allocation problems the canonical example is that you have a",
    "start": "470240",
    "end": "478000"
  },
  {
    "text": "napsack or sack backpack whatever you call it and a bunch of different things",
    "start": "478000",
    "end": "483479"
  },
  {
    "text": "that you want to carry in it but they won't all fit or maybe it totals up to",
    "start": "483479",
    "end": "490159"
  },
  {
    "text": "more weight than you personally can carry or maybe",
    "start": "490159",
    "end": "495400"
  },
  {
    "text": "both or sometimes there's other constraints so we want to find the",
    "start": "495400",
    "end": "501680"
  },
  {
    "text": "combination of items that will fit in the backpack but has the maximum value",
    "start": "501680",
    "end": "509080"
  },
  {
    "text": "and that could be the literal cash value as in the example we'll get into in a moment or something more",
    "start": "509080",
    "end": "517479"
  },
  {
    "text": "metaphorical to look at a concrete example suppose we know a farmer with a",
    "start": "517479",
    "end": "523000"
  },
  {
    "text": "smallish truck and he needs to decide what to take to the market once a week",
    "start": "523000",
    "end": "529440"
  },
  {
    "text": "and on this farm he has some cows EI e IO so among the things he can take are",
    "start": "529440",
    "end": "537480"
  },
  {
    "text": "cows milk cheese butter ice cream meat and leather and for the sake of",
    "start": "537480",
    "end": "543720"
  },
  {
    "text": "Simplicity we won't differentiate between price and profit or between meat and dairy cows and he always has the",
    "start": "543720",
    "end": "553720"
  },
  {
    "text": "exact amount on hand uh and he can only take a specific set amount of each thing",
    "start": "553720",
    "end": "561079"
  },
  {
    "text": "now his truck has room to take all these items but it can only take so much weight so that's going to be our",
    "start": "561079",
    "end": "567480"
  },
  {
    "text": "constraint his choices are as follows and you don't need to memorize any of",
    "start": "567480",
    "end": "573839"
  },
  {
    "text": "that just notice that it totals up to 8,600 lb but his truck suspension can",
    "start": "573839",
    "end": "579720"
  },
  {
    "text": "only handle 2 tons in other words 4,000 lb so let's see what happens if we use a",
    "start": "579720",
    "end": "588680"
  },
  {
    "text": "genetic algorithm to evolve a good enough truckload first we need a way to",
    "start": "588680",
    "end": "596079"
  },
  {
    "text": "represent each candidate in other words each truckload and in Ruby we could just make it a",
    "start": "596079",
    "end": "602680"
  },
  {
    "text": "class with a uh Constructor like",
    "start": "602680",
    "end": "607720"
  },
  {
    "text": "this oh that looks like we're just creating a random number that's right we're creating a random number with",
    "start": "607720",
    "end": "614600"
  },
  {
    "text": "seven bits one for each item thus yielding a random one or zero indicating",
    "start": "614600",
    "end": "621519"
  },
  {
    "text": "whether we take that item or not and we could get as complex as we",
    "start": "621519",
    "end": "627760"
  },
  {
    "text": "want in this function like like requiring a minimum or maximum number of",
    "start": "627760",
    "end": "632959"
  },
  {
    "text": "items per truckload but we're just going to keep it simple to create an initial",
    "start": "632959",
    "end": "639160"
  },
  {
    "text": "population we can just create a whole bunch of these truckloads and stuff them into an array or other such container",
    "start": "639160",
    "end": "646560"
  },
  {
    "text": "structure like so and this could actually be done with much more idiomatic Ruby so those of you who know",
    "start": "646560",
    "end": "653800"
  },
  {
    "text": "Ruby please don't scold me for this I'm just trying to keep it very broadly understandable",
    "start": "653800",
    "end": "660160"
  },
  {
    "text": "so if we create an initial population of 10 truckloads it might look something",
    "start": "660160",
    "end": "665880"
  },
  {
    "text": "like this now why 10 because that's what fits on the screen in a decent decently",
    "start": "665880",
    "end": "671880"
  },
  {
    "text": "readable size if I were doing this for real with a more complex domain I might use a 100 a thousand a million",
    "start": "671880",
    "end": "680600"
  },
  {
    "text": "whatever but how did we get from those random numbers to these combinations",
    "start": "680600",
    "end": "686000"
  },
  {
    "text": "behind the scenes such a translation might look like this we have a list of items that we could take each described",
    "start": "686000",
    "end": "693200"
  },
  {
    "text": "as instances of a generic item class and to check what's in our cargo manifest we",
    "start": "693200",
    "end": "699920"
  },
  {
    "text": "can just Loop through them and see if the corresponding bit is on I'll skip over that code just to keep the code in",
    "start": "699920",
    "end": "707720"
  },
  {
    "text": "this presentation simple now that we're done with the initialization we assess the fitness of",
    "start": "707720",
    "end": "715279"
  },
  {
    "text": "each of these candidates so we do this with what's",
    "start": "715279",
    "end": "720440"
  },
  {
    "text": "called a fitness function surprise and just how just like how",
    "start": "720440",
    "end": "726399"
  },
  {
    "text": "biological creatures might be a perfect fit for one ecological niche but a lousy",
    "start": "726399",
    "end": "733240"
  },
  {
    "text": "fit for another this needs to reflect exactly what purpose we're",
    "start": "733240",
    "end": "739839"
  },
  {
    "text": "applying here and you know in this case we want the cash",
    "start": "739839",
    "end": "746079"
  },
  {
    "text": "value however any load that's too heavy for the truck is totally worthless no",
    "start": "746079",
    "end": "752560"
  },
  {
    "text": "matter how much the value of those items would total up to so in Ruby that could",
    "start": "752560",
    "end": "757880"
  },
  {
    "text": "look like this we iterate through the item numbers summing up the weights of",
    "start": "757880",
    "end": "763600"
  },
  {
    "text": "the things we want to take and the bit on ex uh function is",
    "start": "763600",
    "end": "769279"
  },
  {
    "text": "left as an exercise for the reader and if that exceeds the truck's capacity we return zero else we use the",
    "start": "769279",
    "end": "776199"
  },
  {
    "text": "same technique to sum up their values again we could get as complex as we want",
    "start": "776199",
    "end": "782199"
  },
  {
    "text": "in this function and NASA's antenna fit inness function certainly must have been",
    "start": "782199",
    "end": "787560"
  },
  {
    "text": "for instance if the truck was a little smaller and couldn't physically fit",
    "start": "787560",
    "end": "793440"
  },
  {
    "text": "everything and we had the volume of every item we could total those up and make sure that that particular truckload",
    "start": "793440",
    "end": "800600"
  },
  {
    "text": "will physically fit within the confines of the truck anyway if we run this on our",
    "start": "800600",
    "end": "807560"
  },
  {
    "text": "current population we get this nothing you need to memorize except notice that",
    "start": "807560",
    "end": "813839"
  },
  {
    "text": "the best one scores 20,000 so now that we've assessed their",
    "start": "813839",
    "end": "820279"
  },
  {
    "text": "Fitness we check are we done yet but what are our criteria this function can be quite",
    "start": "820279",
    "end": "827279"
  },
  {
    "text": "simple but it can take some thinking to figure out exactly what it should do",
    "start": "827279",
    "end": "832639"
  },
  {
    "text": "with an nsac type problem a very good solution even the absolute best solution",
    "start": "832639",
    "end": "838320"
  },
  {
    "text": "can then be made absolutely worthless by adding just one more we thin item and",
    "start": "838320",
    "end": "845680"
  },
  {
    "text": "thereby exceeding the constraints and making it totally",
    "start": "845680",
    "end": "852040"
  },
  {
    "text": "undoable so what we're going to do is record the best we've seen",
    "start": "852040",
    "end": "858800"
  },
  {
    "text": "and say that we're done if we haven't seen anything better within a 100",
    "start": "858800",
    "end": "863839"
  },
  {
    "text": "Generations why 100 pretty much random it seemed like a good chance for improvement",
    "start": "863839",
    "end": "869600"
  },
  {
    "text": "and since our functions are simple and our population is small it's not going to really take all that long and in Ruby",
    "start": "869600",
    "end": "877600"
  },
  {
    "text": "that could look like this when this code is initially parsed we set the best",
    "start": "877600",
    "end": "883759"
  },
  {
    "text": "truckload we've seen as an empty one and the count of generation since we've seen",
    "start": "883759",
    "end": "889199"
  },
  {
    "text": "it as zero and then when we call the",
    "start": "889199",
    "end": "894480"
  },
  {
    "text": "function we increment the number of generations look at the Fitness of each",
    "start": "894480",
    "end": "901720"
  },
  {
    "text": "candidate select only those that are better than our current Benchmark if there are none we return",
    "start": "901720",
    "end": "909639"
  },
  {
    "text": "true if it's been at least 100 Generations since we saw the best one because that is our agreed on definition",
    "start": "909639",
    "end": "915519"
  },
  {
    "text": "of done otherwise we return false but if there is at least",
    "start": "915519",
    "end": "921320"
  },
  {
    "text": "one truckload in the current population that is better than what we've recorded",
    "start": "921320",
    "end": "927720"
  },
  {
    "text": "as the best we've seen so far far we take the best one make that our new",
    "start": "927720",
    "end": "933079"
  },
  {
    "text": "Benchmark and reset our count of generations and return Falls to say no",
    "start": "933079",
    "end": "938680"
  },
  {
    "text": "we're not done yet we're starting the whole 100 Generations over again and once again we can get as",
    "start": "938680",
    "end": "946880"
  },
  {
    "text": "complex as we want in this function like checking not only the maximum Fitness",
    "start": "946880",
    "end": "952519"
  },
  {
    "text": "but maybe the minimum Fitness the average fitness or a couple things not having to do with the fitness at all",
    "start": "952519",
    "end": "958680"
  },
  {
    "text": "like some maximum number of generations or time whether watch time or CPU time",
    "start": "958680",
    "end": "965480"
  },
  {
    "text": "or letting the user press a stop button or any combination of things but as far",
    "start": "965480",
    "end": "970560"
  },
  {
    "text": "as our code goes I'm just going to keep it simple now since this is the first cycle",
    "start": "970560",
    "end": "977720"
  },
  {
    "text": "through we're obviously not done so next we select some breeders with which to breed the Next Generation and the",
    "start": "977720",
    "end": "984839"
  },
  {
    "text": "obvious way to do that is to take the top two most fit we take the population sort them by",
    "start": "984839",
    "end": "992240"
  },
  {
    "text": "Fitness descending take the first two pretty simple out of our current population that would get us these",
    "start": "992240",
    "end": "999079"
  },
  {
    "text": "two and as usual we could get as complicated as we want in this function",
    "start": "999079",
    "end": "1005240"
  },
  {
    "text": "uh one other common way of selecting the Breeders is what's called roulette wheel",
    "start": "1005240",
    "end": "1012160"
  },
  {
    "text": "selection in which each candidate has a chance to be chosen proportional to",
    "start": "1012160",
    "end": "1017920"
  },
  {
    "text": "their Fitness and and we randomly find some spot on the roulette wheel see",
    "start": "1017920",
    "end": "1023839"
  },
  {
    "text": "whose variable size wedge that falls into and lots of other ways we could",
    "start": "1023839",
    "end": "1030160"
  },
  {
    "text": "also take more than two whether to breed all pairs within that set or to breed",
    "start": "1030160",
    "end": "1036839"
  },
  {
    "text": "more than two at a time because these don't have to follow the same rules as biological",
    "start": "1036839",
    "end": "1043480"
  },
  {
    "text": "organisms uh or we could even combine such things like breeding all trios out",
    "start": "1043480",
    "end": "1049200"
  },
  {
    "text": "of a set of four chosen by roulette selection now that we've chosen our",
    "start": "1049200",
    "end": "1055640"
  },
  {
    "text": "breeders we actually breed them and the usual way is something called crossover",
    "start": "1055640",
    "end": "1062080"
  },
  {
    "text": "and that consists of taking the data points or in genetic algorithm terms the",
    "start": "1062080",
    "end": "1068240"
  },
  {
    "text": "Al from one parent up to some randomly chosen crossover point and then we start",
    "start": "1068240",
    "end": "1073880"
  },
  {
    "text": "taking them from the other parent and again this could be complic licated",
    "start": "1073880",
    "end": "1079320"
  },
  {
    "text": "further you could use multiple crossover points especially if you're using more than two parents but we're not going to do that",
    "start": "1079320",
    "end": "1086320"
  },
  {
    "text": "we're just going to use one like so we establish the crossover point for each",
    "start": "1086320",
    "end": "1091640"
  },
  {
    "text": "new candidate as a random number between zero and however many number uh many",
    "start": "1091640",
    "end": "1097600"
  },
  {
    "text": "items we have inclusive we iterate through them if we haven't hit the crossover Point yet we take it from the",
    "start": "1097600",
    "end": "1103919"
  },
  {
    "text": "first parent else the second parent so that means it could get copied",
    "start": "1103919",
    "end": "1109440"
  },
  {
    "text": "from the first parent or the second parent or it could switch over at some point if we do this once with a randomly",
    "start": "1109440",
    "end": "1116919"
  },
  {
    "text": "chosen crossover point of three that gets us a result like",
    "start": "1116919",
    "end": "1122080"
  },
  {
    "text": "this and I've called the ones from the first parent in green and the second in",
    "start": "1122080",
    "end": "1127240"
  },
  {
    "text": "red to to show the mixing and this is just one of 10",
    "start": "1127240",
    "end": "1132280"
  },
  {
    "text": "results because we're making a whole new population like so and you may not",
    "start": "1132280",
    "end": "1138760"
  },
  {
    "text": "notice that this is almost exactly like how we created the initial population",
    "start": "1138760",
    "end": "1144039"
  },
  {
    "text": "the only difference is that now each candidate is the result of breeding our",
    "start": "1144039",
    "end": "1149960"
  },
  {
    "text": "two chosen breeders as opposed to making it from scratch and the resulting list might",
    "start": "1149960",
    "end": "1156880"
  },
  {
    "text": "look like this you can see lots of family resemblance there none of these",
    "start": "1156880",
    "end": "1162320"
  },
  {
    "text": "truckloads includes a cow butter or leather and they all include cheese",
    "start": "1162320",
    "end": "1169600"
  },
  {
    "text": "that's because both of our breeders were like that if we were to just continue breeding the best of each generation we",
    "start": "1169600",
    "end": "1176720"
  },
  {
    "text": "would never see any loads that contain a cow butter leather or no cheese but we",
    "start": "1176720",
    "end": "1183280"
  },
  {
    "text": "fix that in the next step which is to mutate them and again I'm going to keep it very simple I'll just give it a one",
    "start": "1183280",
    "end": "1190960"
  },
  {
    "text": "CH four chance of flipping each gene and in code that would look like",
    "start": "1190960",
    "end": "1196440"
  },
  {
    "text": "this we iterate through the item numbers and if a random number from 0 to three",
    "start": "1196440",
    "end": "1201760"
  },
  {
    "text": "is a zero we flip that bit as usual we could get as complex as",
    "start": "1201760",
    "end": "1207360"
  },
  {
    "text": "we want like having some genes more likely to mutate than other genes or having a minimum or maximum number of",
    "start": "1207360",
    "end": "1214440"
  },
  {
    "text": "mutations per candidate or all kinds of other complications if we run this on our",
    "start": "1214440",
    "end": "1221080"
  },
  {
    "text": "current population we wind up with something like this where the green color means that it changed",
    "start": "1221080",
    "end": "1228840"
  },
  {
    "text": "you can see that we now do have truckloads that contain a cow butter or",
    "start": "1228840",
    "end": "1233960"
  },
  {
    "text": "leather or no cheese so now we go back to assessing how fit each of these",
    "start": "1233960",
    "end": "1239200"
  },
  {
    "text": "candidates is and we couldn't do that until after the mutating because the mutating would change how fit each",
    "start": "1239200",
    "end": "1246280"
  },
  {
    "text": "candidate is if we sort on Fitness descending just to make it easy to find",
    "start": "1246280",
    "end": "1251520"
  },
  {
    "text": "the best ones we wind up with this oh nose our maximum Fitness actually went",
    "start": "1251520",
    "end": "1258440"
  },
  {
    "text": "down down as you may recall our previous best one scored 20,000 now we're down to",
    "start": "1258440",
    "end": "1265720"
  },
  {
    "text": "15,000 but don't worry as you may recall from our are We Done Yet function we",
    "start": "1265720",
    "end": "1270799"
  },
  {
    "text": "hang on to the best one and just try to outdo it so we haven't lost it it's fine",
    "start": "1270799",
    "end": "1276080"
  },
  {
    "text": "the Next Generation might look like this a small improvement over our previous",
    "start": "1276080",
    "end": "1281559"
  },
  {
    "text": "best so we set that top one as our new Benchmark reset the generation counter",
    "start": "1281559",
    "end": "1289120"
  },
  {
    "text": "and start trying to outdo that within a 100 Generations or more and if we let",
    "start": "1289120",
    "end": "1295400"
  },
  {
    "text": "this run to completion we might wind up with something like this with our best truckload scoring 26,000 points made up",
    "start": "1295400",
    "end": "1304000"
  },
  {
    "text": "of cheese meat and Leather so that's one complete run of a genetic algorithm and",
    "start": "1304000",
    "end": "1310640"
  },
  {
    "text": "if we wanted to make sure whether this was the best that this algorithm could produce we could just run it again and",
    "start": "1310640",
    "end": "1317880"
  },
  {
    "text": "again and again as many times as we like within reason because it's so much faster than brute foring our way through",
    "start": "1317880",
    "end": "1325679"
  },
  {
    "text": "the whole solution space or precise calculation now that might not actually",
    "start": "1325679",
    "end": "1331320"
  },
  {
    "text": "be true when we have such simple criteria only seven items one truckload",
    "start": "1331320",
    "end": "1336880"
  },
  {
    "text": "a week but if we were you choosing from among hundreds of items for several",
    "start": "1336880",
    "end": "1342200"
  },
  {
    "text": "truckloads a day variable amounts of different things on hand and more",
    "start": "1342200",
    "end": "1347600"
  },
  {
    "text": "complex criteria then yes writing a genetic algorithm would probably be well worth",
    "start": "1347600",
    "end": "1354120"
  },
  {
    "text": "it now suppose we want to evolve something completely different suppose we want to evolve a",
    "start": "1354120",
    "end": "1361440"
  },
  {
    "text": "good set of stats for a Dungeons and Dragons Fighter character so our candidates are going to",
    "start": "1361440",
    "end": "1368799"
  },
  {
    "text": "be tupes or if you prefer topples of numbers rather than strings of bits and",
    "start": "1368799",
    "end": "1376080"
  },
  {
    "text": "d and d character stats are strength into intelligence dexterity Constitution wisdom and Charisma each rolled I each",
    "start": "1376080",
    "end": "1385279"
  },
  {
    "text": "determined by Rolling a set of three six-sided dice or",
    "start": "1385279",
    "end": "1390640"
  },
  {
    "text": "3d6 I'm going to gloss over how you can sometimes have extra strength in Ruby",
    "start": "1390640",
    "end": "1396640"
  },
  {
    "text": "that might look like this with the roll function left as an exercise to keep this code",
    "start": "1396640",
    "end": "1402600"
  },
  {
    "text": "simple so our initial population might look like this next we assess how fit each of",
    "start": "1402600",
    "end": "1410760"
  },
  {
    "text": "these characters is and we're trying to evolve a set of fighter stats so this should be based",
    "start": "1410760",
    "end": "1418159"
  },
  {
    "text": "mostly on the strength the Constitution and a little bit of dexterity but you",
    "start": "1418159",
    "end": "1424159"
  },
  {
    "text": "know the intelligence and wisdom Charisma not so much but we don't want them too low because of occasional",
    "start": "1424159",
    "end": "1430760"
  },
  {
    "text": "saving throws I tried several different things like initially totaling up double the",
    "start": "1430760",
    "end": "1438120"
  },
  {
    "text": "strength and the Constitution and half the dexterity but the other stats tended",
    "start": "1438120",
    "end": "1443840"
  },
  {
    "text": "to get too low even the dexterity was suffering pretty badly so I tried",
    "start": "1443840",
    "end": "1450159"
  },
  {
    "text": "prioritizing them linearly adding up six times excuse me yeah six times the",
    "start": "1450159",
    "end": "1455919"
  },
  {
    "text": "strength five times the Constitution and so on down to one times the Charisma but then the other stats got",
    "start": "1455919",
    "end": "1462559"
  },
  {
    "text": "too high in the characters seemed too generalized I finally settled on prioritizing them much more strongly",
    "start": "1462559",
    "end": "1469640"
  },
  {
    "text": "with a geometric progression totaling up 32 times the strength 16 times the",
    "start": "1469640",
    "end": "1476679"
  },
  {
    "text": "Constitution and so on down to one times the Charisma and this illustrates how the",
    "start": "1476679",
    "end": "1485000"
  },
  {
    "text": "fitness function may be very simple but it can take a lot of thinking and",
    "start": "1485000",
    "end": "1490880"
  },
  {
    "text": "experimenting and so forth to come up with one that will yield just the right mix of Al's especially in ones that are",
    "start": "1490880",
    "end": "1500600"
  },
  {
    "text": "not considered immediately important anyway if we run this on our",
    "start": "1500600",
    "end": "1507480"
  },
  {
    "text": "current population we get this now we can ask are we done yet but",
    "start": "1507480",
    "end": "1516120"
  },
  {
    "text": "what are our criteria let's say we're done if any",
    "start": "1516120",
    "end": "1521799"
  },
  {
    "text": "character scores 90% of the total value of total maximum possible value of our",
    "start": "1521799",
    "end": "1529120"
  },
  {
    "text": "fitness function and I'll spare you the math but that would be 1,21 and in code that would be fairly",
    "start": "1529120",
    "end": "1536840"
  },
  {
    "text": "simple like this none of our current candidates score anywhere near 1,21 so",
    "start": "1536840",
    "end": "1542760"
  },
  {
    "text": "we're not done yet so we next select some breeders to breed the Next",
    "start": "1542760",
    "end": "1547960"
  },
  {
    "text": "Generation and I'm going to stick with just taking the top two most fit in this",
    "start": "1547960",
    "end": "1553200"
  },
  {
    "text": "case that would get us these two and the abstraction now gets a little more obviously leaky now because",
    "start": "1553200",
    "end": "1562159"
  },
  {
    "text": "we're totally ignoring the issue of sexes we have no guarantee that these",
    "start": "1562159",
    "end": "1567720"
  },
  {
    "text": "two are going to be a male and a female that's not even part of our data and we had the same leak last time",
    "start": "1567720",
    "end": "1574679"
  },
  {
    "text": "with the truckloads but since it wasn't as relevant I let it slide for the moment now that they're actual living",
    "start": "1574679",
    "end": "1581919"
  },
  {
    "text": "human beings well imaginary but still whether they're elves or dwarves or",
    "start": "1581919",
    "end": "1587399"
  },
  {
    "text": "whatever we could add that factor in and many other complications such as",
    "start": "1587399",
    "end": "1593320"
  },
  {
    "text": "compatibility and so on that could complicate our selection function",
    "start": "1593320",
    "end": "1598480"
  },
  {
    "text": "enormously possibly even make it impossible to find a viable pair among",
    "start": "1598480",
    "end": "1603919"
  },
  {
    "text": "such a small population anyway next we actually breed",
    "start": "1603919",
    "end": "1610159"
  },
  {
    "text": "our chosen pair and this time I'm going to use a slightly different strategy which consists of essentially",
    "start": "1610159",
    "end": "1617440"
  },
  {
    "text": "flipping a coin Co or is we used to call it a D2 for each gene like so we go",
    "start": "1617440",
    "end": "1623840"
  },
  {
    "text": "through them one by one flip a coin if it comes up heads we get from the first parent else we get it from the second",
    "start": "1623840",
    "end": "1630159"
  },
  {
    "text": "parent and that could get us a result like this and again this is just one of",
    "start": "1630159",
    "end": "1636240"
  },
  {
    "text": "10 results the whole new population might look like this and there are two",
    "start": "1636240",
    "end": "1642200"
  },
  {
    "text": "things to notice here first the number of red and green is not always the same",
    "start": "1642200",
    "end": "1647919"
  },
  {
    "text": "NE Nei within an individual nor in the whole population it's a series of random",
    "start": "1647919",
    "end": "1653799"
  },
  {
    "text": "coin flips so on average it's going to be three and three but it could be anywhere up to 6 to zero in either",
    "start": "1653799",
    "end": "1662120"
  },
  {
    "text": "direction secondly once again we have some pretty strong family resemblance for each stat once again",
    "start": "1662120",
    "end": "1669440"
  },
  {
    "text": "there are only two possible alals uh two possible values or in",
    "start": "1669440",
    "end": "1675159"
  },
  {
    "text": "genetic algorithm terms Al for each Gene now that was true before because we were",
    "start": "1675159",
    "end": "1680799"
  },
  {
    "text": "only dealing with true false yes no whatever you want to call it but now we have the whole range of numbers from 3",
    "start": "1680799",
    "end": "1687760"
  },
  {
    "text": "to 18 so it's a little more concerning and there would be only one",
    "start": "1687760",
    "end": "1694240"
  },
  {
    "text": "possible value and therefore half as many possible combinations if any stat were the same",
    "start": "1694240",
    "end": "1700600"
  },
  {
    "text": "between the two parents at a glance these look on",
    "start": "1700600",
    "end": "1706159"
  },
  {
    "text": "average much more suitable as Fighters than our previous generation we'll",
    "start": "1706159",
    "end": "1711320"
  },
  {
    "text": "figure their actual Fitness in a moment if we were to just continue breeding the best of these we'd never see any change",
    "start": "1711320",
    "end": "1719279"
  },
  {
    "text": "in the possible values for each stat in other words the alals for each",
    "start": "1719279",
    "end": "1725120"
  },
  {
    "text": "gene but again we fix that in the next step which is to mutate them and again",
    "start": "1725120",
    "end": "1730720"
  },
  {
    "text": "I'm going to keep it simple and just give each gene a one in three chance each of staying the same or going up a",
    "start": "1730720",
    "end": "1737679"
  },
  {
    "text": "point or down a point within the valid range of 3 to 18 and in code that would look like",
    "start": "1737679",
    "end": "1744880"
  },
  {
    "text": "this for each stat we add a random number from 0o to two and then subtract",
    "start": "1744880",
    "end": "1750320"
  },
  {
    "text": "one which is effectively the same as adding a random number from minus one to",
    "start": "1750320",
    "end": "1755640"
  },
  {
    "text": "1 and then we clamp it within the range of 3 to 18 as usual we could get us complex as",
    "start": "1755640",
    "end": "1762760"
  },
  {
    "text": "we want maybe do things like Let It Go I",
    "start": "1762760",
    "end": "1767880"
  },
  {
    "text": "let have a higher chance of going up or down if it was very low or very high",
    "start": "1767880",
    "end": "1773840"
  },
  {
    "text": "possibly by multiple points and that would help simulate the",
    "start": "1773840",
    "end": "1779200"
  },
  {
    "text": "real world phenomenon of regression to the mean if we run this on our current",
    "start": "1779200",
    "end": "1785640"
  },
  {
    "text": "population we wind up with something like this where the green means it went",
    "start": "1785640",
    "end": "1790720"
  },
  {
    "text": "up and the red means it went down and looking at the values in each column you can see we now have much more",
    "start": "1790720",
    "end": "1800039"
  },
  {
    "text": "diversity now we go back to step two and assess the fitness of each of these",
    "start": "1800200",
    "end": "1806159"
  },
  {
    "text": "candidates if we sort on the fitness descending just to make it easy to find the best we wind up with this now it's",
    "start": "1806159",
    "end": "1813399"
  },
  {
    "text": "easy to see that this generation is much improved over the previous one the old",
    "start": "1813399",
    "end": "1818960"
  },
  {
    "text": "one ranged from 476 to 760 and the new one goes from 635 to",
    "start": "1818960",
    "end": "1826320"
  },
  {
    "text": "851 it's still no we near our stopping Criterion of a21 though so fast",
    "start": "1826320",
    "end": "1832559"
  },
  {
    "text": "forwarding through several more Generations we finally get one suitable character having 18 the maximum strength",
    "start": "1832559",
    "end": "1841200"
  },
  {
    "text": "and Constitution acceptable though kind of subpar dexterity and surprisingly High",
    "start": "1841200",
    "end": "1849120"
  },
  {
    "text": "Intelligence that's not a problem but it is a bit of a waste if we really wanted",
    "start": "1849120",
    "end": "1854640"
  },
  {
    "text": "it more specialized we could complicate the Fitness function even further and do",
    "start": "1854640",
    "end": "1860600"
  },
  {
    "text": "things like explicitly demand well above average um scores in each of the class's",
    "start": "1860600",
    "end": "1870039"
  },
  {
    "text": "primary useful stats and forbid it to be so high or at least apply a penalty in",
    "start": "1870039",
    "end": "1876600"
  },
  {
    "text": "the class's less useful stats so now we've evolved a set of",
    "start": "1876600",
    "end": "1882519"
  },
  {
    "text": "fighter stats let's suppose we don't need any more fighters in the party but",
    "start": "1882519",
    "end": "1887600"
  },
  {
    "text": "now we want a wizard all we need to do is tweak the",
    "start": "1887600",
    "end": "1892799"
  },
  {
    "text": "fitness function like so to prioritize now intelligence wisdom and dexterity",
    "start": "1892799",
    "end": "1898320"
  },
  {
    "text": "and so on down to strength and in an initial population would look roughly",
    "start": "1898320",
    "end": "1904840"
  },
  {
    "text": "the same since we haven't changed how that's generated so I'll spare you those steps but after 11 Generations I finally",
    "start": "1904840",
    "end": "1913320"
  },
  {
    "text": "got this with three candidates 90% fit to be Wizards they're mostly pretty good",
    "start": "1913320",
    "end": "1919840"
  },
  {
    "text": "in the other stats but oh what happened",
    "start": "1919840",
    "end": "1925120"
  },
  {
    "text": "there okay okay all right they're mostly pretty",
    "start": "1930639",
    "end": "1936880"
  },
  {
    "text": "good in the other stats but not so much as to be obviously better suited for",
    "start": "1936880",
    "end": "1942279"
  },
  {
    "text": "some other class though that top one looks kind of like a good Bard to me",
    "start": "1942279",
    "end": "1948760"
  },
  {
    "text": "remember though that this is all very random it might converge more quickly or",
    "start": "1948760",
    "end": "1954639"
  },
  {
    "text": "more slowly and the fitness function may be good or poor getting just the right mix",
    "start": "1954639",
    "end": "1962159"
  },
  {
    "text": "of ales now suppose we want to evolve yet another kind of thing by the rule of",
    "start": "1962159",
    "end": "1969519"
  },
  {
    "text": "three it's time we extract the common parts into something that they can all",
    "start": "1969519",
    "end": "1975039"
  },
  {
    "text": "use something with a name like oh say evolver that's my actual license plate",
    "start": "1975039",
    "end": "1980919"
  },
  {
    "text": "by the way I've had it for several years since long before I ever got into",
    "start": "1980919",
    "end": "1986639"
  },
  {
    "text": "genetic algorithms and I use that name for the code I've been showing since before I ever heard of the evolver PC",
    "start": "1986639",
    "end": "1994200"
  },
  {
    "text": "toolkit that I mentioned near the start anyway with just a little bit of",
    "start": "1994200",
    "end": "1999559"
  },
  {
    "text": "tweaking and a slight sprinkling of Ruby magic dust we can create a class that",
    "start": "1999559",
    "end": "2005720"
  },
  {
    "text": "will Define the common parts and accept another class to define the varying",
    "start": "2005720",
    "end": "2010880"
  },
  {
    "text": "parts and run Evolution on it like so no I don't expect you to read all that at",
    "start": "2010880",
    "end": "2017200"
  },
  {
    "text": "once we'll go through it piece by piece since it's meant to accept a class and hang on to it for later reference we can",
    "start": "2017200",
    "end": "2023960"
  },
  {
    "text": "use a Constructor like so it just stashes that class and juston",
    "start": "2023960",
    "end": "2029399"
  },
  {
    "text": "also an option for how big a population to use and how we tell it to run Evolution can look like this just a",
    "start": "2029399",
    "end": "2037080"
  },
  {
    "text": "slight VAR creation on our original highle code mainly we're passing the",
    "start": "2037080",
    "end": "2042600"
  },
  {
    "text": "responsibility for determining whether we're done selecting the Breeders and mutating each candidate over to the",
    "start": "2042600",
    "end": "2050520"
  },
  {
    "text": "class that got passed in and stashed and we're also sorting them on descending",
    "start": "2050520",
    "end": "2056560"
  },
  {
    "text": "Fitness just for convenience creating the initial population could look like this again",
    "start": "2056560",
    "end": "2063878"
  },
  {
    "text": "nearly identical to our original code but pass ing the responsibility for",
    "start": "2063879",
    "end": "2069280"
  },
  {
    "text": "creating each individual candidate over to our pin class reading a new",
    "start": "2069280",
    "end": "2075839"
  },
  {
    "text": "population could also look very similar but passing the responsibility for",
    "start": "2075839",
    "end": "2081520"
  },
  {
    "text": "combination over to the Past in class so with this evolver class handling most of",
    "start": "2081520",
    "end": "2087760"
  },
  {
    "text": "the infrastructure we don't need to repeat most of the boiler plate that we had in the truckload and character",
    "start": "2087760",
    "end": "2094200"
  },
  {
    "text": "classes and we can demonstrate that be by evolving something else and supplying",
    "start": "2094200",
    "end": "2100040"
  },
  {
    "text": "only the parts that vary so what now in my spare time I make mead a",
    "start": "2100040",
    "end": "2107240"
  },
  {
    "text": "wine-like drink made by fermenting honey let's see if we can evolve a good",
    "start": "2107240",
    "end": "2112680"
  },
  {
    "text": "recipe our recipes will be based on two simple factors the ratio of water to",
    "start": "2112680",
    "end": "2118880"
  },
  {
    "text": "honey and the alcohol tolerance level of the yeast we'll use to ferment",
    "start": "2118880",
    "end": "2124720"
  },
  {
    "text": "it the resulting percent alcohol by volume or ABV and the",
    "start": "2124720",
    "end": "2130680"
  },
  {
    "text": "sweetness will be how we will evaluate the recipes but I'll spare you the",
    "start": "2130680",
    "end": "2136440"
  },
  {
    "text": "details of how we get from those inputs to those outputs if you really want to know catch me during the hallway track",
    "start": "2136440",
    "end": "2143160"
  },
  {
    "text": "or party or whatever and I'll talk your ears off about making",
    "start": "2143160",
    "end": "2148839"
  },
  {
    "text": "me Beyond just creating the recipes will need a way to evaluate their Fitness and",
    "start": "2148839",
    "end": "2156119"
  },
  {
    "text": "this one looks at how far off we are from some Target values we do a little bit of fancy math",
    "start": "2156119",
    "end": "2163680"
  },
  {
    "text": "to uh keep them both close rather than trading one off directly for the",
    "start": "2163680",
    "end": "2170359"
  },
  {
    "text": "other and you can see here that we're targeting 12% ABV out of a range of",
    "start": "2170359",
    "end": "2176440"
  },
  {
    "text": "typically 0 to about 20 and 15 points of",
    "start": "2176440",
    "end": "2181599"
  },
  {
    "text": "sweetness what is that well that's on sort of a custom scale like this 0 to",
    "start": "2181599",
    "end": "2188000"
  },
  {
    "text": "about 60 or 80 for anything reasonable as a finished product uh explaining this",
    "start": "2188000",
    "end": "2194760"
  },
  {
    "text": "chart is again beyond the scope of this talk but catch me later and I can tell",
    "start": "2194760",
    "end": "2199839"
  },
  {
    "text": "you all about it anyway this means we're going for roughly typical wine strength",
    "start": "2199839",
    "end": "2204960"
  },
  {
    "text": "and semi site and we'll stick with the breeder selection function of just taking the top two most fit but we'll",
    "start": "2204960",
    "end": "2212200"
  },
  {
    "text": "also need a combiner function and that could look like this sticking with a tactic of flipping a",
    "start": "2212200",
    "end": "2219560"
  },
  {
    "text": "coin or rolling a D2 for to see which parent contributes which",
    "start": "2219560",
    "end": "2226480"
  },
  {
    "text": "Gene once each candidate combination is created we'll also need a way to mutate it such as this and what this does put",
    "start": "2226480",
    "end": "2235079"
  },
  {
    "text": "briefly is to let the stat go up to 19%",
    "start": "2235079",
    "end": "2240200"
  },
  {
    "text": "up or down everything else such as creating",
    "start": "2240200",
    "end": "2245599"
  },
  {
    "text": "the initial population selecting the the Breeders breeding a new population the",
    "start": "2245599",
    "end": "2250640"
  },
  {
    "text": "concept of how to check if we're done though now with a different threshold and the overall structure of how it",
    "start": "2250640",
    "end": "2257640"
  },
  {
    "text": "simulates evolution is handled by the evolver class and to use the evolver",
    "start": "2257640",
    "end": "2263520"
  },
  {
    "text": "class and the recipe class together would look as simple as this this would return the current",
    "start": "2263520",
    "end": "2270319"
  },
  {
    "text": "population of recipes when the recipe class says yeah it's",
    "start": "2270319",
    "end": "2275440"
  },
  {
    "text": "done and to demonstrate briefly how it might evolve me recipes an initial",
    "start": "2275440",
    "end": "2282079"
  },
  {
    "text": "population might look like this and yes we can have negative Fitness It's usually the order that matters the Next",
    "start": "2282079",
    "end": "2290560"
  },
  {
    "text": "Generation might look like this with slightly improved Fitness and a narrower",
    "start": "2290560",
    "end": "2296040"
  },
  {
    "text": "range of Fitness after seven generations I got this just a little bit weaker and",
    "start": "2296040",
    "end": "2302240"
  },
  {
    "text": "sweeter than I wanted but within the 90% fit criteria",
    "start": "2302240",
    "end": "2308720"
  },
  {
    "text": "if we got really picky and demanded a 99.9% fit or as sres would say go from",
    "start": "2308720",
    "end": "2315200"
  },
  {
    "text": "one9 to three my first run like that took 45 generations and yielded this a a tiny",
    "start": "2315200",
    "end": "2322319"
  },
  {
    "text": "bit weaker and sweeter than I asked for now just like the Dungeons and",
    "start": "2322319",
    "end": "2327960"
  },
  {
    "text": "Dragons characters if we want something different all we have to do is tweak the fitness function so I tweak that to ask",
    "start": "2327960",
    "end": "2336160"
  },
  {
    "text": "for 7% alcohol and only five points of sweetness a low Alcohol dry me often",
    "start": "2336160",
    "end": "2342680"
  },
  {
    "text": "called a session me and still demanding a 99.9%",
    "start": "2342680",
    "end": "2348720"
  },
  {
    "text": "fit it took only 37 generations to get this spot on in sweetness and just a",
    "start": "2348720",
    "end": "2355240"
  },
  {
    "text": "tiny bit weaker then I asked for 16% alcohol and a sweetness of 35 Way",
    "start": "2355240",
    "end": "2364040"
  },
  {
    "text": "Beyond what I actually like a strong and sweet me historically known as a Sac me",
    "start": "2364040",
    "end": "2369560"
  },
  {
    "text": "or great me a style very popular in Poland the largest producer of me these",
    "start": "2369560",
    "end": "2375240"
  },
  {
    "text": "days that took 149 Generations but that was still very fast because the",
    "start": "2375240",
    "end": "2381240"
  },
  {
    "text": "population was so small and the functions were so simple to produce this just a tiny bit stronger and drier than",
    "start": "2381240",
    "end": "2389599"
  },
  {
    "text": "I asked for there are many other ways we can use genetic algorithms they can",
    "start": "2389599",
    "end": "2394880"
  },
  {
    "text": "produce images and music and even code so think about it and there might be",
    "start": "2394880",
    "end": "2401319"
  },
  {
    "text": "some way that each of you can use genetic algorithms to recap what you've",
    "start": "2401319",
    "end": "2407000"
  },
  {
    "text": "learned here today genetic algorithms are optimization her istics which is",
    "start": "2407000",
    "end": "2413599"
  },
  {
    "text": "fancy talk for shortcuts to finding a good enough solution to some problem",
    "start": "2413599",
    "end": "2419280"
  },
  {
    "text": "they're simpler than you probably thought all you need to do is create an initial population and cycle through",
    "start": "2419280",
    "end": "2425800"
  },
  {
    "text": "five fairly simple steps until you're done they can use very simple functions",
    "start": "2425800",
    "end": "2432560"
  },
  {
    "text": "but it can be tricky to figure out exactly what those functions should do especially for evaluating the fitness",
    "start": "2432560",
    "end": "2439800"
  },
  {
    "text": "and figuring out if we're done so is to make the solutions converge quickly enough but not ignore too many other",
    "start": "2439800",
    "end": "2447920"
  },
  {
    "text": "very good Solutions this approach is applicable to a huge variety of problems",
    "start": "2447920",
    "end": "2454520"
  },
  {
    "text": "including one so complex that a semi- random algorithm can come",
    "start": "2454520",
    "end": "2460200"
  },
  {
    "text": "up with very good solutions that we humans would never have thought",
    "start": "2460200",
    "end": "2465880"
  },
  {
    "text": "of now if you have any questions I'll take them now or at that contact information up there as for the other",
    "start": "2465880",
    "end": "2473400"
  },
  {
    "text": "URLs the first one at GitHub is for all the code and the slides in HTML CSS and",
    "start": "2473400",
    "end": "2482359"
  },
  {
    "text": "JavaScript because I'm using reveal and the second one is as you may have gued asked for the slides in PDF complete",
    "start": "2482359",
    "end": "2490839"
  },
  {
    "text": "with a script which I've more or less stuck to so any",
    "start": "2490839",
    "end": "2497560"
  },
  {
    "text": "questions okay how different is this from machine learning deep learning",
    "start": "2509800",
    "end": "2516160"
  },
  {
    "text": "neural networks and so forth he sees many similarities unfortunately I am not",
    "start": "2516160",
    "end": "2521319"
  },
  {
    "text": "that familiar with deep learning machine learning neural networks",
    "start": "2521319",
    "end": "2527000"
  },
  {
    "text": "Etc some people would consider this a form of machine learning so you could",
    "start": "2527000",
    "end": "2532960"
  },
  {
    "text": "say that maybe touring was a little bit right but I for one do not really",
    "start": "2532960",
    "end": "2538319"
  },
  {
    "text": "consider this to be machine learning it's not really learning to do anything",
    "start": "2538319",
    "end": "2543960"
  },
  {
    "text": "it's not understanding anything it is just tweaking",
    "start": "2543960",
    "end": "2549400"
  },
  {
    "text": "data like I need to tweak how these windows are set up or something there we",
    "start": "2549400",
    "end": "2558440"
  },
  {
    "text": "go um H that derailed my train of",
    "start": "2561599",
    "end": "2568720"
  },
  {
    "text": "thought uh if I were more well-versed in Ai and such things I could possibly",
    "start": "2569480",
    "end": "2576440"
  },
  {
    "text": "draw some more parallels but the main thing that Springs to my mind at least",
    "start": "2576440",
    "end": "2582119"
  },
  {
    "text": "is that with at least my understanding of machine learning and so forth you",
    "start": "2582119",
    "end": "2587319"
  },
  {
    "text": "wind up with a trained model that will do better and better whereas with",
    "start": "2587319",
    "end": "2593800"
  },
  {
    "text": "this you run the algorithm again it might come up with something better but",
    "start": "2593800",
    "end": "2598960"
  },
  {
    "text": "you maybe not it's not generally going to be influenced At All by having run it",
    "start": "2598960",
    "end": "2606359"
  },
  {
    "text": "before",
    "start": "2606359",
    "end": "2609119"
  },
  {
    "text": "yes overfitting is not a problem is overfitting a",
    "start": "2614839",
    "end": "2620400"
  },
  {
    "text": "problem Oh interesting question I have heard that discussed in the context of",
    "start": "2620400",
    "end": "2626920"
  },
  {
    "text": "uh machine learning and so forth I suppose one could over complicate one's",
    "start": "2626920",
    "end": "2633760"
  },
  {
    "text": "Fitness function and thereby",
    "start": "2633760",
    "end": "2639040"
  },
  {
    "text": "dictate the uh alals of the",
    "start": "2639040",
    "end": "2644480"
  },
  {
    "text": "candidate uh more than one should uh for instance if we",
    "start": "2644480",
    "end": "2651119"
  },
  {
    "text": "were uh to try to deliberately overfit a fitness function for Dungeons and",
    "start": "2651119",
    "end": "2657480"
  },
  {
    "text": "Dragons Fighter characters okay it's got to be 18 18 18 I forget what sequence",
    "start": "2657480",
    "end": "2664480"
  },
  {
    "text": "they're in but know 18 strength Constitution and dexterity and um oh let's say 12 or 14",
    "start": "2664480",
    "end": "2673440"
  },
  {
    "text": "or something in the others and yeah that's going to drive the results to be",
    "start": "2673440",
    "end": "2678680"
  },
  {
    "text": "closer and closer to that but if you want to use a genetic",
    "start": "2678680",
    "end": "2685359"
  },
  {
    "text": "algorithm chances are you're not going to be using something where you can so precisely predict you know what your",
    "start": "2685359",
    "end": "2691960"
  },
  {
    "text": "absolute ideal is going to be um would it be be a problem in a more",
    "start": "2691960",
    "end": "2699760"
  },
  {
    "text": "complex domain like say uh antenna",
    "start": "2699760",
    "end": "2704839"
  },
  {
    "text": "design I could see it possibly being but uh I'm not familiar enough with that",
    "start": "2704839",
    "end": "2711680"
  },
  {
    "text": "sort of domain to see how that would apply so the short answer is I don't",
    "start": "2711680",
    "end": "2719359"
  },
  {
    "text": "know but I guess theoretically it probably could",
    "start": "2719359",
    "end": "2724400"
  },
  {
    "text": "be any more questions",
    "start": "2725160",
    "end": "2728960"
  },
  {
    "text": "going once going twice okay looks like we get about four",
    "start": "2730920",
    "end": "2736800"
  },
  {
    "text": "minutes of our life back thank you thank you",
    "start": "2736800",
    "end": "2745040"
  }
]