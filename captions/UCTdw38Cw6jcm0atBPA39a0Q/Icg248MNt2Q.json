[
  {
    "text": "hello everyone let's maybe start uh so first of all I'm really glad to see you",
    "start": "7319",
    "end": "12360"
  },
  {
    "text": "all here in the room I have to say that I haven't done the talk live talk on that big event since middle of 2019 so",
    "start": "12360",
    "end": "20939"
  },
  {
    "text": "it's really great to be back uh mostly because yeah the pandemic so that's a",
    "start": "20939",
    "end": "25980"
  },
  {
    "text": "great feeling I really love to see all the faces so um we gotta talk about the",
    "start": "25980",
    "end": "31619"
  },
  {
    "text": "code analysis so I gonna touch a little bit of the philosophic part of it about",
    "start": "31619",
    "end": "36899"
  },
  {
    "text": "the code quality we're gonna talk about code analysis specifically for C plus plus and it's more than Evolution and",
    "start": "36899",
    "end": "43980"
  },
  {
    "text": "how it evolves together with the language what it gets from it what are the hopes how the tooling is evolving",
    "start": "43980",
    "end": "50940"
  },
  {
    "text": "I'm not gonna focus on any specific tooling so you'll see screenshots from various tunics definitely they will be",
    "start": "50940",
    "end": "56460"
  },
  {
    "text": "chairprints tools but not only um so yeah that's the plan for um for",
    "start": "56460",
    "end": "62879"
  },
  {
    "text": "the talk for the next hour so my name is Anastasia kazakova I work in term brains",
    "start": "62879",
    "end": "68340"
  },
  {
    "text": "um actually I was doing uh sequence plus development in the embedded and",
    "start": "68340",
    "end": "73500"
  },
  {
    "text": "networking area for eight years I launched 4G LTE networks had all this",
    "start": "73500",
    "end": "79320"
  },
  {
    "text": "fun that was really cool um then I moved to jailbrains and I'm responsible for the product marketing",
    "start": "79320",
    "end": "86220"
  },
  {
    "text": "surprisingly for all our C plus plus tools uh mostly because I feel the passion for the tools and I love C plus",
    "start": "86220",
    "end": "92280"
  },
  {
    "text": "plus so that that's a good combination for the role and you can usually reach out to me on Twitter and the same name",
    "start": "92280",
    "end": "99420"
  },
  {
    "text": "works for GitHub or you can just you know drop me in a meal at anastasia.com",
    "start": "99420",
    "end": "104780"
  },
  {
    "text": "brains.com so I'm usually very helpful with our tools or any questions so",
    "start": "104780",
    "end": "110100"
  },
  {
    "text": "please welcome um yeah so we're gonna talk about the",
    "start": "110100",
    "end": "115380"
  },
  {
    "text": "code analysis and when you talk about the current analysis the first question is why do we need it for it so why and",
    "start": "115380",
    "end": "123000"
  },
  {
    "text": "the obvious answer here is software quality this is obvious but let's try and dig a",
    "start": "123000",
    "end": "129780"
  },
  {
    "text": "little bit into this philosophic aspect of what the software quality actually means so uh stay with me for five to ten",
    "start": "129780",
    "end": "137160"
  },
  {
    "text": "minutes maybe maximum I promise not to get long for it but it's kind of important so that we are all on the same",
    "start": "137160",
    "end": "142980"
  },
  {
    "text": "page so if you ask yourself about the software quality try to think about",
    "start": "142980",
    "end": "148379"
  },
  {
    "text": "maybe one or two or maximum free words that describes the software quality for",
    "start": "148379",
    "end": "154080"
  },
  {
    "text": "you so just think in your hand okay um I asked that question on Twitter many",
    "start": "154080",
    "end": "159180"
  },
  {
    "text": "times I asked my colleagues I ask people around and I got a huge list of answers",
    "start": "159180",
    "end": "164519"
  },
  {
    "text": "some of them I hear those which I usually hear quite often so there are",
    "start": "164519",
    "end": "170340"
  },
  {
    "text": "different words so like the people say that it should be like readability and maintainability which is kind of close",
    "start": "170340",
    "end": "177060"
  },
  {
    "text": "and related um testing like security reliability good API uh less undefined Behavior",
    "start": "177060",
    "end": "186000"
  },
  {
    "text": "probably coming from the Civil plus audience you might guess um documented like expressive code uh",
    "start": "186000",
    "end": "193620"
  },
  {
    "text": "whatever like reviews and testing uh also there size which means the reasonable size for the tasks you are",
    "start": "193620",
    "end": "200099"
  },
  {
    "text": "solving with the code so there are many words but surprisingly there is a specific concert term which made a",
    "start": "200099",
    "end": "207060"
  },
  {
    "text": "formal definition of the software quality and they actually selected these five words maintainability security",
    "start": "207060",
    "end": "212720"
  },
  {
    "text": "reliability size and efficiency in terms of the resources um",
    "start": "212720",
    "end": "217860"
  },
  {
    "text": "I don't know that's their choice I would probably select a little bit different set but that also works for me so the",
    "start": "217860",
    "end": "225180"
  },
  {
    "text": "idea is that you need to decide what you mean actually when you say it's a great quality what is more important I guess for different maybe areas and tasks and",
    "start": "225180",
    "end": "233519"
  },
  {
    "text": "focus the definition might be a little bit different I mean like real-time systems the networking I was working at",
    "start": "233519",
    "end": "239459"
  },
  {
    "text": "or the automotive they might have slightly different Focus than other systems that that's fine but like yeah",
    "start": "239459",
    "end": "246299"
  },
  {
    "text": "at least we understand that there are these things which are important um and when talking about the software",
    "start": "246299",
    "end": "252540"
  },
  {
    "text": "equality I have to say that I really like the article by Martin Fuller",
    "start": "252540",
    "end": "258359"
  },
  {
    "text": "um I know where did brains Akin with Martin Fuller because of his refactoring articles uh but he has a very good",
    "start": "258359",
    "end": "265680"
  },
  {
    "text": "article about the trade-off between internal and external quality and the",
    "start": "265680",
    "end": "271020"
  },
  {
    "text": "idea that there is actually no trade-off because both are important and the internal quality guarantees the external",
    "start": "271020",
    "end": "277620"
  },
  {
    "text": "quality and this is the graph how they evolves so you probably understand the idea so if you you know",
    "start": "277620",
    "end": "284540"
  },
  {
    "text": "design the system badly there there will be no external quality in a while so it",
    "start": "284540",
    "end": "290699"
  },
  {
    "text": "might start in the from the beginning but while you're working on the system you're extending it everything just go",
    "start": "290699",
    "end": "296400"
  },
  {
    "text": "go um got worse and yeah the low internal",
    "start": "296400",
    "end": "301800"
  },
  {
    "text": "quality actually affects how it looks externally um okay so",
    "start": "301800",
    "end": "308580"
  },
  {
    "text": "um the software equality is something we usually care a lot so there are lots of",
    "start": "308580",
    "end": "313680"
  },
  {
    "text": "articles there are lots of these words which kinda important for us and we want",
    "start": "313680",
    "end": "319320"
  },
  {
    "text": "to make our quality good enough in terms of the um like yeah this software equality and",
    "start": "319320",
    "end": "325500"
  },
  {
    "text": "if we as a C plus plus developers if we think um what we also have in our head when we",
    "start": "325500",
    "end": "333600"
  },
  {
    "text": "think about the software equality is lowering the frustration",
    "start": "333600",
    "end": "339240"
  },
  {
    "text": "uh because the bad code is actually very frustrating you know so when you look at",
    "start": "339240",
    "end": "344639"
  },
  {
    "text": "the bad code especially when you're like yeah you open some code base and you see like oh what's going on here what a bad",
    "start": "344639",
    "end": "351360"
  },
  {
    "text": "code you really really frustrated you don't want to spend your time on you know improving all this stuff and there",
    "start": "351360",
    "end": "357539"
  },
  {
    "text": "are lots of specific C plus related frustration uh which I would like to highlight here I took a look at the um",
    "start": "357539",
    "end": "365720"
  },
  {
    "text": "Foundation C plus plus developer survey light result for this year surprisingly",
    "start": "365720",
    "end": "370979"
  },
  {
    "text": "for this point they're nearly the same as like previous two years so I haven't",
    "start": "370979",
    "end": "376560"
  },
  {
    "text": "I was actually opening this year results to update my slides but I haven't updated any single number nearly so",
    "start": "376560",
    "end": "384180"
  },
  {
    "text": "these are the frustration points for C plus plus developers in 2022 let's take",
    "start": "384180",
    "end": "389340"
  },
  {
    "text": "a look so um yeah so it's kind of yeah the colors are",
    "start": "389340",
    "end": "395220"
  },
  {
    "text": "a little bit different from the original but actually here are three colors so the parallelism support should be in um",
    "start": "395220",
    "end": "401699"
  },
  {
    "text": "like kind of pink one because that's for the language so uh that that's the point like that the uh the developers are",
    "start": "401699",
    "end": "408600"
  },
  {
    "text": "missing some language supports and Library support for the parallelism the other colors the yellow and the blue",
    "start": "408600",
    "end": "416280"
  },
  {
    "text": "so the yellow is something which is coming from the language blue is something which is coming from",
    "start": "416280",
    "end": "421860"
  },
  {
    "text": "the tools like from the ecosystem you can see that the blue actually dominates",
    "start": "421860",
    "end": "427199"
  },
  {
    "text": "on the top and yeah that's the ecosystem we live in so for many many years we",
    "start": "427199",
    "end": "433440"
  },
  {
    "text": "have issues with the like ecosystem in terms of the Tooling in terms of the um like package manager build system",
    "start": "433440",
    "end": "440580"
  },
  {
    "text": "whatever I can say here I think yeah it has some something uh for you in terms",
    "start": "440580",
    "end": "445740"
  },
  {
    "text": "of the frustration points from the C plus plus but the yellow part is the language and I'm actually gonna Focus",
    "start": "445740",
    "end": "452220"
  },
  {
    "text": "today on how to um how to catch up with this yellow part so how to limit these frustration points",
    "start": "452220",
    "end": "458819"
  },
  {
    "text": "for the yellow part so for the blue part yeah I kind of uh maybe unusual to hear",
    "start": "458819",
    "end": "464520"
  },
  {
    "text": "from the person from the tool vendor but I'm not going to use it right now um",
    "start": "464520",
    "end": "471319"
  },
  {
    "text": "simple Splash frustration so where is it coming from let's look at the example I",
    "start": "471479",
    "end": "477479"
  },
  {
    "text": "like it very much I show it very often in my talks and this is an artificial example it came out of our QA Engineers",
    "start": "477479",
    "end": "484560"
  },
  {
    "text": "who created a case for testing some feature in the ID it doesn't matter which one it doesn't matter like what",
    "start": "484560",
    "end": "490919"
  },
  {
    "text": "they were actually doing the thing was that this is a like example in C plus plus which you can",
    "start": "490919",
    "end": "497699"
  },
  {
    "text": "compile successfully and it broke some feature in the ID and the question from",
    "start": "497699",
    "end": "503039"
  },
  {
    "text": "the developers uh was actually what this code is actually doing why it doesn't look like that uh and you know after",
    "start": "503039",
    "end": "511680"
  },
  {
    "text": "some discussions and some iterations we found out that that's the code that's the same code that's all that it does it",
    "start": "511680",
    "end": "518880"
  },
  {
    "text": "actually just returns this answer to life universe and everything and that's it",
    "start": "518880",
    "end": "524219"
  },
  {
    "text": "so if you remove all these templates variable templates all discuss you just",
    "start": "524219",
    "end": "529920"
  },
  {
    "text": "get return 42 and that's absolutely correct code just the same as the one on",
    "start": "529920",
    "end": "537120"
  },
  {
    "text": "the left and that's probably one of the issue pointed by many people now uh nowadays",
    "start": "537120",
    "end": "545940"
  },
  {
    "text": "at least I captured a few quotes from Twitter surprisingly mostly coming from The Game",
    "start": "545940",
    "end": "552180"
  },
  {
    "text": "Dev guys um I don't know why probably there uh they see that more often or they're more",
    "start": "552180",
    "end": "557700"
  },
  {
    "text": "frustrated than others or they're just more loud than others uh so yeah Tim",
    "start": "557700",
    "end": "562860"
  },
  {
    "text": "Sweeney from epic games are us working in unity the point here is that we literally have",
    "start": "562860",
    "end": "570060"
  },
  {
    "text": "10 or 100 ways of doing one simple thing in sequence Plus and that that happens",
    "start": "570060",
    "end": "576060"
  },
  {
    "text": "to us so we have many ways we have a very powerful language to make it even more powerful every release and",
    "start": "576060",
    "end": "582300"
  },
  {
    "text": "sometimes we found out that yeah we can do one thing in many ways like in this example when we have you know this",
    "start": "582300",
    "end": "590220"
  },
  {
    "text": "return 42 and I can write it in like for example this way um",
    "start": "590220",
    "end": "595800"
  },
  {
    "text": "yeah so this is the frustration coming from the community and the reason is",
    "start": "595800",
    "end": "602760"
  },
  {
    "text": "that if you have turned ways to do one thing there will be people even in your",
    "start": "602760",
    "end": "608279"
  },
  {
    "text": "team who will be using all the 10 ways to do that and like if you read this nice book by",
    "start": "608279",
    "end": "615000"
  },
  {
    "text": "Google Engineers about software engineering Google that quote was about the API with the sufficient numbers of",
    "start": "615000",
    "end": "622140"
  },
  {
    "text": "users of an API it doesn't matter what you promise in the contract all observable behaviors of your system will",
    "start": "622140",
    "end": "628320"
  },
  {
    "text": "be dependent on by somebody the same applies to the language if you have 10 ways of doing the thing they will be",
    "start": "628320",
    "end": "635040"
  },
  {
    "text": "used and quite often at least half of them will be using a code base and you",
    "start": "635040",
    "end": "642060"
  },
  {
    "text": "have to kind of spot that they're the same and kinda you know apply some guidelines probably to make them look",
    "start": "642060",
    "end": "649500"
  },
  {
    "text": "similar um and this is a very important point of frustration I actually hear it now even",
    "start": "649500",
    "end": "656100"
  },
  {
    "text": "more often probably because the language gets um it tries to be simpler but it also",
    "start": "656100",
    "end": "662279"
  },
  {
    "text": "gets more complex because it becomes more powerful um like because we're getting more more",
    "start": "662279",
    "end": "667980"
  },
  {
    "text": "approaches to how to do things um available in the language",
    "start": "667980",
    "end": "673440"
  },
  {
    "text": "um another thing which bothers SQL scores developers a lot and uh you probably see",
    "start": "673440",
    "end": "679740"
  },
  {
    "text": "that in the list of my keywords defining the software equality is the limiting the undefined Behavior the undefined",
    "start": "679740",
    "end": "687000"
  },
  {
    "text": "behavior is not good we know that uh and there is a very nice story uh",
    "start": "687000",
    "end": "693420"
  },
  {
    "text": "about the Linux kernel and about the vulnerability which luckily wasn't like that dangerous so it was captured by the",
    "start": "693420",
    "end": "701100"
  },
  {
    "text": "developers early so they fixed that quite early but they after that a big thanks to them they actually wrote a",
    "start": "701100",
    "end": "707940"
  },
  {
    "text": "nice article about that uh I will publish the slides there's a link so you can find the story about this",
    "start": "707940",
    "end": "714360"
  },
  {
    "text": "vulnerability in the kernel and just look at the piece of code and find the line where the issue is",
    "start": "714360",
    "end": "723600"
  },
  {
    "text": "um it is here um where it's reference in the pointer",
    "start": "723600",
    "end": "729720"
  },
  {
    "text": "we're not checking anything and the funny thing is that a little bit later just a couple of lines later we're",
    "start": "729720",
    "end": "736140"
  },
  {
    "text": "actually checking this point but because uh you know GCC optimizes",
    "start": "736140",
    "end": "742680"
  },
  {
    "text": "this check because you're ready to reference the pointer there is no reason to check something which was already",
    "start": "742680",
    "end": "749579"
  },
  {
    "text": "reference for the compiler it just optimize it out so um there is a huge article explaining",
    "start": "749579",
    "end": "756540"
  },
  {
    "text": "how to get uh some you know um dangerous code and executed in the",
    "start": "756540",
    "end": "763200"
  },
  {
    "text": "kernel so you can like read through it so yeah and this line was like it was",
    "start": "763200",
    "end": "768600"
  },
  {
    "text": "occasionally added so there was a mistake why this line actually appeared in that place so there's a full story in",
    "start": "768600",
    "end": "774779"
  },
  {
    "text": "the article but the reason is that yeah undefined Behavior could do some you",
    "start": "774779",
    "end": "780060"
  },
  {
    "text": "know dangerous stuff to us and we know that and that's why we don't like it um",
    "start": "780060",
    "end": "785579"
  },
  {
    "text": "and yeah even while when we try to protect ourselves compilers which are",
    "start": "785579",
    "end": "790860"
  },
  {
    "text": "smart enough sometimes help in the you know opposite direction it doesn't help actually they",
    "start": "790860",
    "end": "796200"
  },
  {
    "text": "can optimize probably a good Chuck here Okay so why do we need code analysis so we need",
    "start": "796200",
    "end": "803519"
  },
  {
    "text": "it generally to improve the software equality we want to decrease the developer",
    "start": "803519",
    "end": "809519"
  },
  {
    "text": "frustration because no one likes to be frustrated about the code and yeah specifically for C plus plus we",
    "start": "809519",
    "end": "816959"
  },
  {
    "text": "would like to catch and to fix some C plus pinpoints especially like you know undefined Behavior which we all like",
    "start": "816959",
    "end": "825060"
  },
  {
    "text": "okay um one could tell me that okay I just don't need the whole code analysis stuff",
    "start": "825060",
    "end": "831779"
  },
  {
    "text": "I just use freebies so we all V extra the error and",
    "start": "831779",
    "end": "837180"
  },
  {
    "text": "I'm safe but you know um the problem with it is that like",
    "start": "837180",
    "end": "842820"
  },
  {
    "text": "there is a big story that compiler can't catch everything there is a story that",
    "start": "842820",
    "end": "848220"
  },
  {
    "text": "you probably don't want this uh freebies on your code but the Practical side of",
    "start": "848220",
    "end": "853800"
  },
  {
    "text": "the story is that even to use that even if you want to have this be all the extra the error",
    "start": "853800",
    "end": "860459"
  },
  {
    "text": "um you need to find out the way how to do that properly and because you remember this blue part of the",
    "start": "860459",
    "end": "866100"
  },
  {
    "text": "frustration points with the build systems so what is written here is the upper part of the slide is how you do",
    "start": "866100",
    "end": "873720"
  },
  {
    "text": "that in cmake the lower part of the slide is how you do that in make files that's first so",
    "start": "873720",
    "end": "880320"
  },
  {
    "text": "you need to understand which build system you are using to pass this Flex properly then if you're on with msvc you",
    "start": "880320",
    "end": "888240"
  },
  {
    "text": "have this uh V4 and VX where you have this view all the extra V Arrow which is",
    "start": "888240",
    "end": "894720"
  },
  {
    "text": "luckily the same for GCC and Clank if you use some custom compiler maybe you",
    "start": "894720",
    "end": "899880"
  },
  {
    "text": "have other options here as well um so okay you need to find out which build system you're using which compiler",
    "start": "899880",
    "end": "906540"
  },
  {
    "text": "you are using which flags its support and to pass them properly and the trick about the make files because like I was",
    "start": "906540",
    "end": "912899"
  },
  {
    "text": "working in embedded I deal was dealing with make files for three or four plus years uh that's the creepy project model",
    "start": "912899",
    "end": "921660"
  },
  {
    "text": "actually to be honest and I did that mistake when I was",
    "start": "921660",
    "end": "926880"
  },
  {
    "text": "um I would say yeah beginner so I passed this Flex not vrd six six flights but",
    "start": "926880",
    "end": "932760"
  },
  {
    "text": "CPP flex and CPP flux is a flex for preprocessor not for the compiler so don't do that",
    "start": "932760",
    "end": "938820"
  },
  {
    "text": "um anyway the idea of the slide is that even to pass the simple you know to turn",
    "start": "938820",
    "end": "944760"
  },
  {
    "text": "on all the compiler warnings and turn them into errors you need to know how to do that properly in the ecosystem when",
    "start": "944760",
    "end": "951839"
  },
  {
    "text": "we don't have the standard compiler and the standard project model and that could be a challenging task",
    "start": "951839",
    "end": "958019"
  },
  {
    "text": "uh and yeah talking more about the challenging task this is the distribution from some statistical",
    "start": "958019",
    "end": "963959"
  },
  {
    "text": "research to them done by chartbrains this is the developer ecosystem research in 2020 and 2021 I still don't have data",
    "start": "963959",
    "end": "971639"
  },
  {
    "text": "for 2022 it will be available in a couple of months and the foundation for",
    "start": "971639",
    "end": "976800"
  },
  {
    "text": "2021 research anyway uh you see we have lots of project models we do use",
    "start": "976800",
    "end": "984060"
  },
  {
    "text": "uh cmake is kind of growing that we yeah that's um that's what we know it's still",
    "start": "984060",
    "end": "991560"
  },
  {
    "text": "not the standard build system but used by many make files are still very very",
    "start": "991560",
    "end": "996660"
  },
  {
    "text": "popular especially in some you know uh embedded development between Reddit developers I must build like yeah",
    "start": "996660",
    "end": "1003519"
  },
  {
    "text": "Microsoft thing but also very very popular for a Game Dev obviously so they use it a lot so they rely uh on",
    "start": "1003519",
    "end": "1010399"
  },
  {
    "text": "Microsoft Project Model A Lot Like xcode and all that stuff like",
    "start": "1010399",
    "end": "1015800"
  },
  {
    "text": "um there are many things they're also like basil here Mason here there are many many things we are still using so",
    "start": "1015800",
    "end": "1023120"
  },
  {
    "text": "um yeah if you have a task of passing the compiler flag first of all you need to think how to do this properly in your",
    "start": "1023120",
    "end": "1028339"
  },
  {
    "text": "specific ecosystem okay so but maybe we can do better",
    "start": "1028339",
    "end": "1034699"
  },
  {
    "text": "let's see if C plus plus itself can do better if it could actually help us that's the language we're using and when",
    "start": "1034699",
    "end": "1041120"
  },
  {
    "text": "you're using something the language is also a tool when you use something like a tool you want it to be helpful you",
    "start": "1041120",
    "end": "1046520"
  },
  {
    "text": "want it to help you so if you're using C plus plus you want it to help you um like to to",
    "start": "1046520",
    "end": "1052940"
  },
  {
    "text": "uh for those the better quality so uh they're just there will be just a few",
    "start": "1052940",
    "end": "1059480"
  },
  {
    "text": "examples of how simple spouse is actually doing better these days uh this one I really like because I came from",
    "start": "1059480",
    "end": "1066140"
  },
  {
    "text": "the area when I was like logging and trading things uh quite often and I was",
    "start": "1066140",
    "end": "1071900"
  },
  {
    "text": "always doing that with you know macros uh you can't avoid them even though like",
    "start": "1071900",
    "end": "1078260"
  },
  {
    "text": "I'm very skeptical about macros but you can't avoid them in many areas still uh",
    "start": "1078260",
    "end": "1084140"
  },
  {
    "text": "but we are trying I mean like as a community we had fine to make an attempt",
    "start": "1084140",
    "end": "1089780"
  },
  {
    "text": "to somehow avoid them or at least to limit their presence and I think that",
    "start": "1089780",
    "end": "1094820"
  },
  {
    "text": "Source location from C plus plus 20 was a very good um like opportunity for us to avoid at",
    "start": "1094820",
    "end": "1101840"
  },
  {
    "text": "least some parts of our micros I'm sure isn't it so like micro style logging and",
    "start": "1101840",
    "end": "1106940"
  },
  {
    "text": "tracing could be avoided if we use to tours location and",
    "start": "1106940",
    "end": "1112220"
  },
  {
    "text": "yeah so like for example here we we have on the screenshot there is actually a",
    "start": "1112220",
    "end": "1118640"
  },
  {
    "text": "chat by this one early into which actually captures the situation that we have the tracing function and we're",
    "start": "1118640",
    "end": "1124460"
  },
  {
    "text": "using Macross and we better use to Source location and it can even you know help you like you can transform the code",
    "start": "1124460",
    "end": "1132140"
  },
  {
    "text": "in the way that you use uh Source location so it might look longer but",
    "start": "1132140",
    "end": "1137539"
  },
  {
    "text": "believe me in a couple of iterations you'll get used to that and you'll love that much more than the magnets",
    "start": "1137539",
    "end": "1144020"
  },
  {
    "text": "but there are still a lot of macros in the ecosystem but yeah so we we can at least try in some specific Direction",
    "start": "1144020",
    "end": "1152860"
  },
  {
    "text": "um contracts so um I don't have a big slide for corners and that's unfortunate that's because we",
    "start": "1152900",
    "end": "1159500"
  },
  {
    "text": "still don't have them um I have a few proposals linked here from the like recent discussions and I'm",
    "start": "1159500",
    "end": "1166340"
  },
  {
    "text": "really looking forward to that from the perspective of the code analysis because they give a huge opportunity for every",
    "start": "1166340",
    "end": "1174020"
  },
  {
    "text": "code analysis tool to help us because there are all these brain forced conditions there are things which we",
    "start": "1174020",
    "end": "1180320"
  },
  {
    "text": "could check there are things which contracts could help us check um so because they're just this is a way",
    "start": "1180320",
    "end": "1186980"
  },
  {
    "text": "to for the developers to set their expectations from the code and then the tool could help checking it",
    "start": "1186980",
    "end": "1194120"
  },
  {
    "text": "but yeah unfortunately for this slide nothing more than just you know links to the proposals I'm still waiting for us",
    "start": "1194120",
    "end": "1201380"
  },
  {
    "text": "to have them um a little bit more about the lifetime safety because this is what uh borders",
    "start": "1201380",
    "end": "1209240"
  },
  {
    "text": "superclass Developers for a very long while this is the thing we look at when we for example talk about rust this is",
    "start": "1209240",
    "end": "1216020"
  },
  {
    "text": "the things we feel a little bit handy about um and there was this attempt from her",
    "start": "1216020",
    "end": "1222020"
  },
  {
    "text": "website or to introduce this proposal about lifetime safety and uh yeah it",
    "start": "1222020",
    "end": "1228440"
  },
  {
    "text": "actually helps capture the things like in this uh sample with the dangling",
    "start": "1228440",
    "end": "1233840"
  },
  {
    "text": "iterator and it actually happens to Jungle because yeah I have a pushback here so and if the real lock happens",
    "start": "1233840",
    "end": "1240919"
  },
  {
    "text": "then I have a dangling retriever so would it be good if I can you know catch that and actually nowadays",
    "start": "1240919",
    "end": "1247700"
  },
  {
    "text": "um there are a few uh there are a few tools which help us",
    "start": "1247700",
    "end": "1252860"
  },
  {
    "text": "support that so I have the proposal for uh like suggest us to do that there is this",
    "start": "1252860",
    "end": "1258740"
  },
  {
    "text": "concept of owner and the point pointer uh there is a suggestion about the building compiler checks uh there was",
    "start": "1258740",
    "end": "1266900"
  },
  {
    "text": "even like yeah some implementations uh via the GSL Library annotations",
    "start": "1266900",
    "end": "1272539"
  },
  {
    "text": "practically uh what we have is the lvm branch",
    "start": "1272539",
    "end": "1278059"
  },
  {
    "text": "they stayed like the offer state that the overhead is quite small like five",
    "start": "1278059",
    "end": "1283400"
  },
  {
    "text": "percent um you can try it minus V lifetime it",
    "start": "1283400",
    "end": "1288559"
  },
  {
    "text": "doesn't have many checks but at least something so you can like you know see how it works there are also of course",
    "start": "1288559",
    "end": "1295100"
  },
  {
    "text": "the C plus plus core check lifetime rules in visual studio and we also implemented uh some of them in sea lion",
    "start": "1295100",
    "end": "1302120"
  },
  {
    "text": "so there are tools now which can help um like unfortunately I don't think it",
    "start": "1302120",
    "end": "1308120"
  },
  {
    "text": "for now there is more going on yeah for the lifetime safety than this but like",
    "start": "1308120",
    "end": "1314720"
  },
  {
    "text": "let's see how it goes further so at least we have some uh you know",
    "start": "1314720",
    "end": "1319820"
  },
  {
    "text": "um we have some proof of concept that we can do that in C plus plus so maybe",
    "start": "1319820",
    "end": "1324860"
  },
  {
    "text": "we're far from rust but at least we can do something so that's not the problem which is completely unsolvable because",
    "start": "1324860",
    "end": "1330679"
  },
  {
    "text": "sometimes the people say like okay you want the lifetime just give Trust stop stop we can maybe try it in C plus plus",
    "start": "1330679",
    "end": "1338780"
  },
  {
    "text": "um and it's good to see that we are doing these attempts um I know mentioned that in c-line we",
    "start": "1338780",
    "end": "1346220"
  },
  {
    "text": "were implementing the live uh lifetime checks the the data flow analysis and I would like to talk a little bit more in",
    "start": "1346220",
    "end": "1352280"
  },
  {
    "text": "details about the data flow analysis because to my extent that's the thing that's what could help us catch many",
    "start": "1352280",
    "end": "1359480"
  },
  {
    "text": "many errors and it's practically so we did that we implemented data flow",
    "start": "1359480",
    "end": "1365360"
  },
  {
    "text": "analysis into line we know that it's possible we can have more tools supporting the data flow analysis and",
    "start": "1365360",
    "end": "1371900"
  },
  {
    "text": "it's very very powerful so what it does so if you don't know so this is the",
    "start": "1371900",
    "end": "1377120"
  },
  {
    "text": "analysis which takes into account like function parameters and arguments functional recurrent values fields and",
    "start": "1377120",
    "end": "1384140"
  },
  {
    "text": "Global variables and it tries to Output some value ranges for the variables in",
    "start": "1384140",
    "end": "1389840"
  },
  {
    "text": "your code and make some guesses based on these value ranges so what could that what could it actually guess",
    "start": "1389840",
    "end": "1397940"
  },
  {
    "text": "for example if you have some you know local piece of code for example inside the function body so the local data flow",
    "start": "1397940",
    "end": "1404900"
  },
  {
    "text": "analysis can easily capture the dangling pointer so that's easy so uh in these",
    "start": "1404900",
    "end": "1410840"
  },
  {
    "text": "situations like that yeah it can see that you are deleting the pointer so yeah you probably have a pointer to a",
    "start": "1410840",
    "end": "1416480"
  },
  {
    "text": "delegated memory moreover you can do that in the global scope that's also possible so you can",
    "start": "1416480",
    "end": "1422600"
  },
  {
    "text": "write a global data flow analysis it works in the scope of the translation unit you can do the same so even if you",
    "start": "1422600",
    "end": "1429559"
  },
  {
    "text": "are deleting the point or in some other functions and watch that what we usually do so we're not you know if we're",
    "start": "1429559",
    "end": "1435200"
  },
  {
    "text": "deleting the point or inside this the for Loop that's probably just a single piece of code but quite often yeah it's",
    "start": "1435200",
    "end": "1442460"
  },
  {
    "text": "hidden somewhere inside another function in the same translation unit and data flow analysis could actually capture",
    "start": "1442460",
    "end": "1448640"
  },
  {
    "text": "that and it could say that here you're still might have a pointer to a delicated memory because like yeah in",
    "start": "1448640",
    "end": "1454820"
  },
  {
    "text": "that function you were deleting the pointer um apart from dangling pointers data",
    "start": "1454820",
    "end": "1461299"
  },
  {
    "text": "flow analysis could actually capture as many other things so like constant",
    "start": "1461299",
    "end": "1466460"
  },
  {
    "text": "conditions like it could gas through the value ranges and said that this condition is always true or this",
    "start": "1466460",
    "end": "1472100"
  },
  {
    "text": "condition is always false or it could say that this is the dead code like unreachable code or endless Loops which",
    "start": "1472100",
    "end": "1478580"
  },
  {
    "text": "like and those Loops are good sometimes especially if you work you know in the uh for the you write the code for the",
    "start": "1478580",
    "end": "1485419"
  },
  {
    "text": "microcontrollers you often have the often Loops that's okay but you need to understand that you're doing that on purpose sometimes endless loop could be",
    "start": "1485419",
    "end": "1492260"
  },
  {
    "text": "a mistake infinite recursions the same like unused values the preferencing and",
    "start": "1492260",
    "end": "1498500"
  },
  {
    "text": "now dangling pointers and yeah index out of bounds is also possible with the data",
    "start": "1498500",
    "end": "1503840"
  },
  {
    "text": "flow analysis um I want to show a few examples of how it works and as I said we did that we",
    "start": "1503840",
    "end": "1510740"
  },
  {
    "text": "implemented that we know that that's possible and that's the analysis which doesn't decrease significantly the like",
    "start": "1510740",
    "end": "1516380"
  },
  {
    "text": "for example we did that in the IDE we're measuring the performance we know that it doesn't decrease you know your",
    "start": "1516380",
    "end": "1521960"
  },
  {
    "text": "um doesn't affect your typing or how you work with the code in a significant manner so um unreachable code this is",
    "start": "1521960",
    "end": "1528200"
  },
  {
    "text": "the example so I have this function consume um I'm calling it uh with a value",
    "start": "1528200",
    "end": "1535279"
  },
  {
    "text": "processing and idle so the code with the case stop is enrichable and that's what",
    "start": "1535279",
    "end": "1541039"
  },
  {
    "text": "the data flow analysis could capture and show me here um that's just an easy example you can",
    "start": "1541039",
    "end": "1546200"
  },
  {
    "text": "guess that example could be much more complicated and data flow analysis could also capture it you just need to set a",
    "start": "1546200",
    "end": "1552799"
  },
  {
    "text": "proper you know limits sometimes data flow analysis could be long but you need to set the limit that if it's working",
    "start": "1552799",
    "end": "1558860"
  },
  {
    "text": "too long let's stop um so it's not a silver bullet but it",
    "start": "1558860",
    "end": "1564740"
  },
  {
    "text": "could capture a lot of cases actually uh index out of bounds uh I think we",
    "start": "1564740",
    "end": "1570260"
  },
  {
    "text": "tried recently with the data flow analysis and succeeded so that you could actually analyze this and see if you're going",
    "start": "1570260",
    "end": "1578779"
  },
  {
    "text": "um out of the bounds of the array or that could also work with you know with the",
    "start": "1578779",
    "end": "1584120"
  },
  {
    "text": "strings so that easy um again the example is quite simplified",
    "start": "1584120",
    "end": "1589940"
  },
  {
    "text": "but you get the idea so it could be a little bit more complicated than the data one else will still capture it and",
    "start": "1589940",
    "end": "1597500"
  },
  {
    "text": "this is quite a useful check I have to say that while one when we implementing the new checks we're usually running",
    "start": "1597500",
    "end": "1603260"
  },
  {
    "text": "them on our code base and there was never a situation when we haven't captured anything",
    "start": "1603260",
    "end": "1610120"
  },
  {
    "text": "so that means that's a good Chuck I mean uh so yeah talking about the Practical",
    "start": "1610120",
    "end": "1617059"
  },
  {
    "text": "implementation so as I said we did that we know that that's possible so we implemented data flow analysis a long",
    "start": "1617059",
    "end": "1622700"
  },
  {
    "text": "time ago we moved it to Clank who made it Global for translation units and we",
    "start": "1622700",
    "end": "1628580"
  },
  {
    "text": "implemented we keep implementing new stuff on top of the data flow analysis like the index out of bonds with our",
    "start": "1628580",
    "end": "1634340"
  },
  {
    "text": "recent experiment which worked well and there are more things we're trying to create",
    "start": "1634340",
    "end": "1639940"
  },
  {
    "text": "uh the obvious question here would be can I do more like because I was talking",
    "start": "1639940",
    "end": "1645260"
  },
  {
    "text": "about the data flow analysis in the context in the scope of the translation unit actually this is possible uh you",
    "start": "1645260",
    "end": "1652640"
  },
  {
    "text": "can do cross-translation unit analysis there is some approaches how to do that",
    "start": "1652640",
    "end": "1658580"
  },
  {
    "text": "described in the LVN documentation and there is even um proof of concept I would call it like",
    "start": "1658580",
    "end": "1665960"
  },
  {
    "text": "code Checker from Ericsson they damaged it at some lvm meeting several years ago",
    "start": "1665960",
    "end": "1672080"
  },
  {
    "text": "so the code is still on GitHub you still could play with it um",
    "start": "1672080",
    "end": "1677240"
  },
  {
    "text": "it works using the like it could work your two approaches it has two passes so",
    "start": "1677240",
    "end": "1683720"
  },
  {
    "text": "it's either doing the pre-dumped uh pre-compile headers or it generates",
    "start": "1683720",
    "end": "1689059"
  },
  {
    "text": "astion demand it depends on what you are trying to save more memory or CPU so uh",
    "start": "1689059",
    "end": "1696200"
  },
  {
    "text": "but it works uh it's quite heavy in this proof of concept repository it can do",
    "start": "1696200",
    "end": "1702919"
  },
  {
    "text": "some very very simple stuff I mean like the set of checks there is really just the proof of concept so there are no",
    "start": "1702919",
    "end": "1709460"
  },
  {
    "text": "really um complex checks implemented in the repository but it just proves that this",
    "start": "1709460",
    "end": "1715340"
  },
  {
    "text": "this is possible so we can kind of improve it more and I hope that that would be the next step for the code",
    "start": "1715340",
    "end": "1721820"
  },
  {
    "text": "analysis for the data flow analysis with C plus plus that we can actually make the cross translation unit analysis and",
    "start": "1721820",
    "end": "1728120"
  },
  {
    "text": "make it for the whole program um okay data from analysis that was it now I",
    "start": "1728120",
    "end": "1737000"
  },
  {
    "text": "can't talk about the code analysis in more than SQL Plus without talking about",
    "start": "1737000",
    "end": "1742220"
  },
  {
    "text": "cities plus core guidelines that's a very popular topic I'm not going to explain you everything about the core",
    "start": "1742220",
    "end": "1747380"
  },
  {
    "text": "guidelines better get the kids and guys book and read the beautiful C plus plus I have this book it's awesome I really",
    "start": "1747380",
    "end": "1754820"
  },
  {
    "text": "recommend you reading it uh I would maybe like to discuss the core guidelines from the perspective of the",
    "start": "1754820",
    "end": "1762559"
  },
  {
    "text": "people who are creating the tools and how we look at the guidelines because every time we look at the guidelines the",
    "start": "1762559",
    "end": "1768860"
  },
  {
    "text": "first thing which we ask ourselves is if they're toolable and if it makes sense",
    "start": "1768860",
    "end": "1774799"
  },
  {
    "text": "to make them toolable if that makes sense to push them in an automatic way and throw them into developers face",
    "start": "1774799",
    "end": "1781520"
  },
  {
    "text": "because sometimes you don't need that and that's what I'm trying to explain here that's what I'll be trying to do",
    "start": "1781520",
    "end": "1787100"
  },
  {
    "text": "now so first of all there's a big part of the corrugate lines checks which are",
    "start": "1787100",
    "end": "1792799"
  },
  {
    "text": "you easily toolable so they're even written in the way that you can you know just kill them so this just the quote",
    "start": "1792799",
    "end": "1800539"
  },
  {
    "text": "from the core guidelines I maybe swapped a few words just to highlight that it's",
    "start": "1800539",
    "end": "1806179"
  },
  {
    "text": "easily toolable because that's just you know nearly the piece of code um this is just the example",
    "start": "1806179",
    "end": "1813260"
  },
  {
    "text": "um we'll have 16 so for in parameters positively copied typing by values and",
    "start": "1813260",
    "end": "1819020"
  },
  {
    "text": "others by reference to const There Are Rules how to deduct the issue and that there is the",
    "start": "1819020",
    "end": "1826700"
  },
  {
    "text": "rule what to do next so you just Implement that and like yeah you are done you have a check that's that's",
    "start": "1826700",
    "end": "1832279"
  },
  {
    "text": "awesome it's automated you don't need to think about it anymore",
    "start": "1832279",
    "end": "1837159"
  },
  {
    "text": "um there is also a group of jacks which I called abstract um if you were at the uh Kate's abstraction",
    "start": "1837440",
    "end": "1845720"
  },
  {
    "text": "Keynotes today that's about it so there are things which are about the abstractions which are about the things",
    "start": "1845720",
    "end": "1853700"
  },
  {
    "text": "um which is not that easily toolable and I even not sure that it has to be",
    "start": "1853700",
    "end": "1858980"
  },
  {
    "text": "toolable because that's the abstraction and abstraction is something you create and you analyze in your head that's the",
    "start": "1858980",
    "end": "1865399"
  },
  {
    "text": "machine can't easily do that um there are some aspects which can be",
    "start": "1865399",
    "end": "1870440"
  },
  {
    "text": "automated but not all of them for example like there is this rule that you can detect identical and similar lambdas",
    "start": "1870440",
    "end": "1877159"
  },
  {
    "text": "used in different places um I don't know if you ever search for certain duplicates in C plus plus code",
    "start": "1877159",
    "end": "1884360"
  },
  {
    "text": "there are tools which can do that they can even work in a reasonable time they can sort of duplicates even if like you",
    "start": "1884360",
    "end": "1891320"
  },
  {
    "text": "have you know rename the variables and maybe swap a few lines of code they will find the duplicates but they're not",
    "start": "1891320",
    "end": "1898760"
  },
  {
    "text": "ideal they're like just you know even if you copy paste some piece of code they will find it but if that's just the kill",
    "start": "1898760",
    "end": "1905179"
  },
  {
    "text": "greeting in either way they won't be able to do that and remember the example about returning 42. if we're talking",
    "start": "1905179",
    "end": "1912799"
  },
  {
    "text": "about searching for duplicates we have to understand that the code might be written in different ways and that's",
    "start": "1912799",
    "end": "1919580"
  },
  {
    "text": "still the same code and I don't think that there will be tools which could easily detect with the like 100",
    "start": "1919580",
    "end": "1925960"
  },
  {
    "text": "guarantees that this is duplicate given this fact while we have that in that",
    "start": "1925960",
    "end": "1932120"
  },
  {
    "text": "sense yeah I think that these rules are kind of the rules which we still have to apply there are good rules but the",
    "start": "1932120",
    "end": "1938840"
  },
  {
    "text": "tooling can help you with them a lot it can maybe highlight some things that this looks maybe similar in some simple",
    "start": "1938840",
    "end": "1945140"
  },
  {
    "text": "cases or it can say that if you set some heuristics and that's you who is set in",
    "start": "1945140",
    "end": "1950960"
  },
  {
    "text": "this heuristics like because you know when I was starting the university I had",
    "start": "1950960",
    "end": "1956779"
  },
  {
    "text": "from like some old professors I heard that like yeah you can do the functions more than one screen long have they seen",
    "start": "1956779",
    "end": "1964100"
  },
  {
    "text": "how we use the screen nowadays usually they're like Turned 90 degrees I don't think I want to see the function",
    "start": "1964100",
    "end": "1969279"
  },
  {
    "text": "sometimes that long so it depends this is is the heuristic this is number so you have to configure it so if you have",
    "start": "1969279",
    "end": "1976580"
  },
  {
    "text": "a way to configure these heuristics sometimes the tools could help you but they can't fully automate the",
    "start": "1976580",
    "end": "1982580"
  },
  {
    "text": "applicability of this role so that's still the personally um the input from you which is needed",
    "start": "1982580",
    "end": "1988640"
  },
  {
    "text": "here um yeah and that's what I um talk here about is this example because if you're",
    "start": "1988640",
    "end": "1995480"
  },
  {
    "text": "searching for duplicates yeah again this is what could maybe break through you",
    "start": "1995480",
    "end": "2000940"
  },
  {
    "text": "there is also a third group of guidelines which affects interfaces",
    "start": "2000940",
    "end": "2007360"
  },
  {
    "text": "so these are these rules like for example F4 if a function might have to be evaluated with compile time declare",
    "start": "2007360",
    "end": "2013960"
  },
  {
    "text": "it const expert then there is like a rule F5 when to declare inline and F6",
    "start": "2013960",
    "end": "2019960"
  },
  {
    "text": "one to declare no except this might be a good advice but when you're doing that you have to understand",
    "start": "2019960",
    "end": "2026440"
  },
  {
    "text": "that you might be changing the interface and then there might be some reasons for",
    "start": "2026440",
    "end": "2034299"
  },
  {
    "text": "you to have this interface and that there might reason why you have it that way so uh",
    "start": "2034299",
    "end": "2040600"
  },
  {
    "text": "from our perspective and we had lots of you know argues about that inside the team like if we have to push this kind",
    "start": "2040600",
    "end": "2047679"
  },
  {
    "text": "of roles on the developers because if the rules affect the interfaces not",
    "start": "2047679",
    "end": "2052780"
  },
  {
    "text": "all the developers would like to see their tooling like you know pushing this kind of tools in them so in that sense",
    "start": "2052780",
    "end": "2058540"
  },
  {
    "text": "we decided that no so probably we won't be touching the rules which affects interfaces a lot you might you know",
    "start": "2058540",
    "end": "2065020"
  },
  {
    "text": "um suggest some kind of intention when you like press something and it suggests how you it can transform the code but",
    "start": "2065020",
    "end": "2071378"
  },
  {
    "text": "it's not something which is highlighted as an error in the code um okay so like talking about the tools",
    "start": "2071379",
    "end": "2080138"
  },
  {
    "text": "actually I think core guidelines they have a pretty wide range of tools which",
    "start": "2080139",
    "end": "2085300"
  },
  {
    "text": "kind of support them right now so there is this guideline support Library there is a visual studio core guideline",
    "start": "2085300",
    "end": "2092138"
  },
  {
    "text": "Checkers plank tidy has quite a bunch of checks from cpu's plus query guidelines",
    "start": "2092139",
    "end": "2098140"
  },
  {
    "text": "supported sonar tools like in our tools like C liner resharper 6 Plus as well",
    "start": "2098140",
    "end": "2103300"
  },
  {
    "text": "but no single tool to shut them all and probably there are reasons for that so hopefully that that will be the case",
    "start": "2103300",
    "end": "2111160"
  },
  {
    "text": "um so yeah that's about the core guidance",
    "start": "2111160",
    "end": "2116320"
  },
  {
    "text": "let's move forward and talking about the analyzers",
    "start": "2116320",
    "end": "2121980"
  },
  {
    "text": "actually um there are analyzers for General C plus plus for for just the code any of",
    "start": "2122079",
    "end": "2128859"
  },
  {
    "text": "us right but there are also quite nice DSL analyzer so analyzer for some",
    "start": "2128859",
    "end": "2134320"
  },
  {
    "text": "specific domain errors uh which we quite often use it and I think that's that's",
    "start": "2134320",
    "end": "2140440"
  },
  {
    "text": "correct so like there are um Mr and audasr specification for like uh",
    "start": "2140440",
    "end": "2147220"
  },
  {
    "text": "various embedded stuff Automotive stuff there is crazy analyzer for cute there",
    "start": "2147220",
    "end": "2152859"
  },
  {
    "text": "is like for example unreal header to analyze their flying real engine code and much much more so quite often if",
    "start": "2152859",
    "end": "2158980"
  },
  {
    "text": "there is the big area there is some domain there might be some specific domain analyzer for that in addition to",
    "start": "2158980",
    "end": "2166720"
  },
  {
    "text": "you know General C plus plus analyzer so because it knows more about the domain so it can analyze the things beyond the",
    "start": "2166720",
    "end": "2173920"
  },
  {
    "text": "general C plus plus stuff and it can help um and I would like to talk here about",
    "start": "2173920",
    "end": "2179560"
  },
  {
    "text": "uh just one of this case and that's misra um like Mr and Alton sir and about how",
    "start": "2179560",
    "end": "2186280"
  },
  {
    "text": "the how it evolves in our mind through these years because when I was working the",
    "start": "2186280",
    "end": "2191920"
  },
  {
    "text": "embedded area where mystery was mostly like uh go and certify just pass the",
    "start": "2191920",
    "end": "2197500"
  },
  {
    "text": "checks get the certificates done or like fail but now I see more and more",
    "start": "2197500",
    "end": "2202720"
  },
  {
    "text": "developers who do request the mistra during the development stage I mean like they wanted while they're developing the",
    "start": "2202720",
    "end": "2209680"
  },
  {
    "text": "code not when they are going you know to someone to certify their code and that's",
    "start": "2209680",
    "end": "2215740"
  },
  {
    "text": "quite understandable for me and I'm like even surprised that it happens only just maybe I don't know five or six years ago",
    "start": "2215740",
    "end": "2222760"
  },
  {
    "text": "when I started noticing the Strand a lot that there are many developers who need",
    "start": "2222760",
    "end": "2227920"
  },
  {
    "text": "um Miss Randall desire who requests the tooling to support it because when you have these checks at",
    "start": "2227920",
    "end": "2234099"
  },
  {
    "text": "the development stage and not at the stage of certification like you know the cost of the error because if you have to",
    "start": "2234099",
    "end": "2239980"
  },
  {
    "text": "fix something you better fix it right away when you're writing because that's all this also",
    "start": "2239980",
    "end": "2245440"
  },
  {
    "text": "like you can variety the set of checks you are you know running when you're on developing City because when you have",
    "start": "2245440",
    "end": "2251200"
  },
  {
    "text": "this certification you just need to pass some checks which uh you apply to to",
    "start": "2251200",
    "end": "2256540"
  },
  {
    "text": "pass um and it's tricked you can't you know change it but maybe you want to do it in",
    "start": "2256540",
    "end": "2262480"
  },
  {
    "text": "like in several steps maybe you would like to first of all um you know eliminate one group of",
    "start": "2262480",
    "end": "2268480"
  },
  {
    "text": "Chucks while you're just developing the code then focus on something less important and so on and so forth so you",
    "start": "2268480",
    "end": "2274180"
  },
  {
    "text": "can customize the list of checks you're you know using and quite often if you",
    "start": "2274180",
    "end": "2279940"
  },
  {
    "text": "have a tool like uh which is helping you on your development stage quite often it",
    "start": "2279940",
    "end": "2285280"
  },
  {
    "text": "suggests some quick fixes which is also good because you can fix the code immediately while you're developing it",
    "start": "2285280",
    "end": "2290980"
  },
  {
    "text": "and that's probably why the trend to get like mystra on the development stage",
    "start": "2290980",
    "end": "2296500"
  },
  {
    "text": "becomes more and more popular and I see the two supporting Mr more and more the",
    "start": "2296500",
    "end": "2301839"
  },
  {
    "text": "code analyzers the ideas they are bringing mystery to the developers right to their like tooling when they're",
    "start": "2301839",
    "end": "2308140"
  },
  {
    "text": "developing the code um some statistics I got from the tools",
    "start": "2308140",
    "end": "2313240"
  },
  {
    "text": "I know which do support like mastering like the journal tooling there we",
    "start": "2313240",
    "end": "2318339"
  },
  {
    "text": "started supporting mystery in c-line maybe a couple of years ago sonar tools",
    "start": "2318339",
    "end": "2323680"
  },
  {
    "text": "uh like have this like mystery checks PBS Studio I know has some but I haven't",
    "start": "2323680",
    "end": "2329980"
  },
  {
    "text": "I actually failed to find the statistics which exactly checks they do support they don't have a big problem in the",
    "start": "2329980",
    "end": "2335920"
  },
  {
    "text": "documentation so I don't know uh but it's good to see that these numbers",
    "start": "2335920",
    "end": "2341380"
  },
  {
    "text": "actually this slider was updating a lot last night because the numbers are growing and it's good to see because",
    "start": "2341380",
    "end": "2348700"
  },
  {
    "text": "when I'm like I opened this slide yesterday and checked the tools and I saw that like yeah the numbers were",
    "start": "2348700",
    "end": "2353920"
  },
  {
    "text": "growing significantly so I kind of updated them and that's good to know so",
    "start": "2353920",
    "end": "2359020"
  },
  {
    "text": "um the question which I want to ask here is",
    "start": "2359020",
    "end": "2364960"
  },
  {
    "text": "that oh so many rules we talked about the corrugated lines these diesel analyzers there are many many things",
    "start": "2364960",
    "end": "2371560"
  },
  {
    "text": "are they really that different so there is this rules in the core",
    "start": "2371560",
    "end": "2377740"
  },
  {
    "text": "guidelines about the periodic functions there are also these rules in Mishra",
    "start": "2377740",
    "end": "2384700"
  },
  {
    "text": "about the same stuff if you write for the read through them",
    "start": "2384700",
    "end": "2389800"
  },
  {
    "text": "and for example there is also the same rule in the third guidelines so actually",
    "start": "2389800",
    "end": "2395980"
  },
  {
    "text": "these things are quite often about the same and that's interesting to notice",
    "start": "2395980",
    "end": "2401920"
  },
  {
    "text": "because my first impression was while reading through all these different checks implemented in various tooling",
    "start": "2401920",
    "end": "2409180"
  },
  {
    "text": "was like oh wow I have to run so many tools on top of my code but actually you don't so many of them are just you know",
    "start": "2409180",
    "end": "2416980"
  },
  {
    "text": "um about the same stuff so there's maybe just different angles on you and it but",
    "start": "2416980",
    "end": "2422200"
  },
  {
    "text": "there are a lot about the same um when talking about the code analysis",
    "start": "2422200",
    "end": "2427720"
  },
  {
    "text": "and the tools we have and the aspects there are three more aspects which I",
    "start": "2427720",
    "end": "2433060"
  },
  {
    "text": "would like to highlight and they're very important first of all is the formatter because if we talk about the software",
    "start": "2433060",
    "end": "2438940"
  },
  {
    "text": "equality if we talk about the good code the good code is the properly formatted code and in C plus plus somehow I think",
    "start": "2438940",
    "end": "2447040"
  },
  {
    "text": "that we nearly have the standard tool that's the crank format but it it has its issues and you need to use it",
    "start": "2447040",
    "end": "2453820"
  },
  {
    "text": "carefully and understand this issue so from one perspective here it's kind of standard in C plus plus nowadays quite",
    "start": "2453820",
    "end": "2460660"
  },
  {
    "text": "many I guess not maybe all but quite many repositories for example on GitHub if you open you can find the client",
    "start": "2460660",
    "end": "2466900"
  },
  {
    "text": "format config file inside so you know how the community working on this code",
    "start": "2466900",
    "end": "2472420"
  },
  {
    "text": "actually want it to be formatted and that's good for you to apply this you know config if you develop and if you",
    "start": "2472420",
    "end": "2479440"
  },
  {
    "text": "contribute it to this code base um the thing about the clan format is that yeah it's kind of used to break",
    "start": "2479440",
    "end": "2485859"
  },
  {
    "text": "compatibility between versions that's not in only in the terms that it has these quasi parsing so it doesn't use",
    "start": "2485859",
    "end": "2492520"
  },
  {
    "text": "even it like it's called Clank format but it's not using the fully functional",
    "start": "2492520",
    "end": "2498880"
  },
  {
    "text": "Clank parser so it has its own fuzzy parser because that's how it uh that's",
    "start": "2498880",
    "end": "2504820"
  },
  {
    "text": "how it achieves the better performance so it's using the fuzzy parser and it",
    "start": "2504820",
    "end": "2509920"
  },
  {
    "text": "also evolves so it could happen that like the way it parses from version to version the way it formats the code is",
    "start": "2509920",
    "end": "2516880"
  },
  {
    "text": "different because of that because they like also fixing things they are fixing bugs for example but it also breaks",
    "start": "2516880",
    "end": "2522660"
  },
  {
    "text": "compatibility in terms of the parameters in terms of the configuration so their",
    "start": "2522660",
    "end": "2530079"
  },
  {
    "text": "parameters could be renamed or which I have seen quite often is that uh when",
    "start": "2530079",
    "end": "2536260"
  },
  {
    "text": "they change the set of the values I mean for example there was a parameter which",
    "start": "2536260",
    "end": "2541720"
  },
  {
    "text": "has like true and false values and then they change to some innum values so the configuration you have is no longer",
    "start": "2541720",
    "end": "2547660"
  },
  {
    "text": "valid because the set of the values for this parameter has changed",
    "start": "2547660",
    "end": "2552820"
  },
  {
    "text": "so uh you need to think about it you need to have it in your mind so if you're using the tool switch for example",
    "start": "2552820",
    "end": "2559240"
  },
  {
    "text": "are bundling the Clank format it might happen that you are using the different version so you need to be accurate so",
    "start": "2559240",
    "end": "2565540"
  },
  {
    "text": "quite often the teams end up in using some specific version of the Clank format and relying only on it so like",
    "start": "2565540",
    "end": "2572440"
  },
  {
    "text": "either all are using just specific version or calling it on a pre-commit hook to make sure that everyone is on",
    "start": "2572440",
    "end": "2578560"
  },
  {
    "text": "the same page um okay for marrying kind of simple uh",
    "start": "2578560",
    "end": "2585460"
  },
  {
    "text": "if we have this uh specific in mind also there are naming rules and I like I",
    "start": "2585460",
    "end": "2591280"
  },
  {
    "text": "truly believe that naming and proper naming is a part of the software with the good quality it's part of the",
    "start": "2591280",
    "end": "2597579"
  },
  {
    "text": "philosophy for the good quality software so you have to name things properly and you have to agree on the same guidelines",
    "start": "2597579",
    "end": "2603760"
  },
  {
    "text": "inside the team otherwise it's very hard to maintain this code base",
    "start": "2603760",
    "end": "2608800"
  },
  {
    "text": "um there are different styles I like how they name the Styles especially this",
    "start": "2608800",
    "end": "2614079"
  },
  {
    "text": "screaming snake case um it's like yeah I don't like using it",
    "start": "2614079",
    "end": "2619720"
  },
  {
    "text": "but I like how it's called um anyway there are different ways and sometimes the there are different",
    "start": "2619720",
    "end": "2625859"
  },
  {
    "text": "approaches how to do that but the idea is that looking at the code and the name of some entity new code you can quickly",
    "start": "2625859",
    "end": "2634000"
  },
  {
    "text": "uh like understand if it's like a macro or it's a function or it's member",
    "start": "2634000",
    "end": "2639579"
  },
  {
    "text": "function or it's a static function we're using different naming guidelines for that and they help us capture the idea",
    "start": "2639579",
    "end": "2645579"
  },
  {
    "text": "behind the code quickly and um there are different code Styles",
    "start": "2645579",
    "end": "2651040"
  },
  {
    "text": "available there are standard code Styles their code Styles which evolves from that there are different tooling uh for",
    "start": "2651040",
    "end": "2657940"
  },
  {
    "text": "that and the tooling could not just you know um check and throw warnings into you but",
    "start": "2657940",
    "end": "2664119"
  },
  {
    "text": "it can also help the complex aspect is that the challenging aspect is probably that",
    "start": "2664119",
    "end": "2671040"
  },
  {
    "text": "the proper tooling which helps with the naming actually should do the proper rename refactoring because if you want",
    "start": "2671040",
    "end": "2676780"
  },
  {
    "text": "to fix the name never do that by hand I think Kate said that in the morning and",
    "start": "2676780",
    "end": "2681880"
  },
  {
    "text": "I will repeat it to you in the evening never do that by hand I mean like call the proper name refactoring you might",
    "start": "2681880",
    "end": "2687579"
  },
  {
    "text": "have the variable with the same name in the different scope and it is completely unrelated don't touch it the rename",
    "start": "2687579",
    "end": "2694180"
  },
  {
    "text": "refactoring will find that for you usually the proper name refactoring is context to where so it will rename",
    "start": "2694180",
    "end": "2699760"
  },
  {
    "text": "properly so the proper tooling just the proper name refactoring and usually",
    "start": "2699760",
    "end": "2704800"
  },
  {
    "text": "integrates that naming rules into various like other refactorings or code",
    "start": "2704800",
    "end": "2710800"
  },
  {
    "text": "generation abilities so you also have to know about the naming rules",
    "start": "2710800",
    "end": "2716460"
  },
  {
    "text": "um and yeah naming and also there are syndic style",
    "start": "2716560",
    "end": "2721780"
  },
  {
    "text": "rules and syntax style rules that's exactly like again back to this example",
    "start": "2721780",
    "end": "2726819"
  },
  {
    "text": "with returning 42. that's how we write the code we could write we can write C",
    "start": "2726819",
    "end": "2732940"
  },
  {
    "text": "plus plus code in many ways that it's still correct it's compilable it does the job but it looks different",
    "start": "2732940",
    "end": "2739480"
  },
  {
    "text": "and it's good to have one conversion and that's what we're",
    "start": "2739480",
    "end": "2744520"
  },
  {
    "text": "trying actually to do there are lots of conversions sometimes they're controversial uh",
    "start": "2744520",
    "end": "2750040"
  },
  {
    "text": "sometimes we're just you know East constant West Coast like we're all arguing about that also I",
    "start": "2750040",
    "end": "2757660"
  },
  {
    "text": "saw some controversial um like uh guidelines between for example",
    "start": "2757660",
    "end": "2763800"
  },
  {
    "text": "lvm cute style and like Unreal Engine code style uh we surprisingly noticed",
    "start": "2763800",
    "end": "2770260"
  },
  {
    "text": "that the uh contradicting like many aspects here as well but there were reasons for that but still so you have",
    "start": "2770260",
    "end": "2775720"
  },
  {
    "text": "to know about that uh so yeah this syntax style rules usually they're about like how to use Auto like when where to",
    "start": "2775720",
    "end": "2784540"
  },
  {
    "text": "place const or what to use type depths or type aliasis so what about the like",
    "start": "2784540",
    "end": "2790540"
  },
  {
    "text": "uh trailing return types how to use override all these things uh are like in",
    "start": "2790540",
    "end": "2797980"
  },
  {
    "text": "any case the code will be correct so you can write the proper code but you could write it differently and to avoid having",
    "start": "2797980",
    "end": "2804339"
  },
  {
    "text": "like 10 ways of doing one thing in one code base you need to follow the rules we did that attempt to like make it",
    "start": "2804339",
    "end": "2811599"
  },
  {
    "text": "doable to be honest with spend like uh half a year maybe on implementing all",
    "start": "2811599",
    "end": "2817240"
  },
  {
    "text": "these rules in the sharper C plus plus we had made a huge table with settings I",
    "start": "2817240",
    "end": "2823540"
  },
  {
    "text": "don't know if anyone configures it ever but like it's possible and it actually",
    "start": "2823540",
    "end": "2828640"
  },
  {
    "text": "controls the thing and that's quite natural for the Ides because they have the AST so they can control it easily so",
    "start": "2828640",
    "end": "2836560"
  },
  {
    "text": "it doesn't cost them anything so they are anyway parsingly code so they can do that and they can Implement these checks",
    "start": "2836560",
    "end": "2843760"
  },
  {
    "text": "and you can kind of force the syntaxel rules you want to",
    "start": "2843760",
    "end": "2849400"
  },
  {
    "text": "um okay so um some small summary uh about the code",
    "start": "2849400",
    "end": "2855760"
  },
  {
    "text": "analysis and how it goes in the modern C plus plus so first of all we can just",
    "start": "2855760",
    "end": "2860800"
  },
  {
    "text": "use compiler and there's lots of help from it if you cook it properly uh the",
    "start": "2860800",
    "end": "2867040"
  },
  {
    "text": "language evolves and it actually does its best to help us in many aspects which are painful for like help us to",
    "start": "2867040",
    "end": "2874359"
  },
  {
    "text": "limit lots of frustration there is a very powerful data flow analysis",
    "start": "2874359",
    "end": "2880180"
  },
  {
    "text": "Direction and I hope that it will evolve and it will help us to capture more things",
    "start": "2880180",
    "end": "2886060"
  },
  {
    "text": "there is this uh fantastic effort with the core guidelines again if if we cook",
    "start": "2886060",
    "end": "2892420"
  },
  {
    "text": "it properly it could be for the good uh DSL analyzers which which is a must if",
    "start": "2892420",
    "end": "2898780"
  },
  {
    "text": "we're using some specific domain area if we're working in some specific domain area and yeah the style is also",
    "start": "2898780",
    "end": "2904960"
  },
  {
    "text": "important but like I want to ask you here like I was",
    "start": "2904960",
    "end": "2911319"
  },
  {
    "text": "talking about lots of tools which helps us and about the tooling but let's just check how often do we rely on tools for",
    "start": "2911319",
    "end": "2918520"
  },
  {
    "text": "code analysis we actually asked that in our like survey in our developer",
    "start": "2918520",
    "end": "2923560"
  },
  {
    "text": "ecosystem survey um again I have only the answers from 2020 and 2021. uh what do you use for",
    "start": "2923560",
    "end": "2932319"
  },
  {
    "text": "guideline enforcement or other code quality and Analysis and the third of the developers using",
    "start": "2932319",
    "end": "2939940"
  },
  {
    "text": "nothing which is set and I really would like to limit these uh last part to the",
    "start": "2939940",
    "end": "2946960"
  },
  {
    "text": "minimum so that we all are using at least something you see that there is lots of tools from the clangaka system",
    "start": "2946960",
    "end": "2952300"
  },
  {
    "text": "here so the people actually now understand that the Clank is doing some good job for them not only as a compiler",
    "start": "2952300",
    "end": "2958839"
  },
  {
    "text": "but also as a whole ecosystem which helps with code analysis and there are many many people who just uh simply rely",
    "start": "2958839",
    "end": "2965920"
  },
  {
    "text": "on what their IDE suggests and luckily the IDS evolve and they can suggest more so I have some you know small hole that",
    "start": "2965920",
    "end": "2974020"
  },
  {
    "text": "we can limit this last part and make a significantly less than 30 percent of",
    "start": "2974020",
    "end": "2979480"
  },
  {
    "text": "the developers using nothing because as you see that's all for the goods so it",
    "start": "2979480",
    "end": "2985540"
  },
  {
    "text": "actually has some benefit and before I wrap up uh I actually have to say that I",
    "start": "2985540",
    "end": "2993099"
  },
  {
    "text": "haven't talked about many many things here like for example I haven't talked about the code analysis on CI",
    "start": "2993099",
    "end": "2999760"
  },
  {
    "text": "I was mostly talking about the code analysis like while you're typing because there's a very powerful uh area",
    "start": "2999760",
    "end": "3007079"
  },
  {
    "text": "of running decode analysis on CI and I don't know how many of you were yesterday on the Meetup pre-conference",
    "start": "3007079",
    "end": "3014400"
  },
  {
    "text": "Meetup art numbers were talking about the curved reviews and he said that before doing a code review you have to",
    "start": "3014400",
    "end": "3021119"
  },
  {
    "text": "check that like the code in the branch actually compiles and all the tests are green but I have to add but you also",
    "start": "3021119",
    "end": "3027240"
  },
  {
    "text": "have to check that the code analysis the guidelines you agreed on inside the team on this code on CI are also all green",
    "start": "3027240",
    "end": "3033839"
  },
  {
    "text": "and after that you can start with the code review and that's what these tools are for um so I missed that part completely but",
    "start": "3033839",
    "end": "3042060"
  },
  {
    "text": "that's a whole new talk so maybe I'll do that one day so for now",
    "start": "3042060",
    "end": "3047220"
  },
  {
    "text": "just uh like a small sneak peek of the tools which other um in the community personnel",
    "start": "3047220",
    "end": "3054300"
  },
  {
    "text": "and yeah some references if you're interested in um some of the things I",
    "start": "3054300",
    "end": "3059400"
  },
  {
    "text": "was talking here about and that's it questions",
    "start": "3059400",
    "end": "3064640"
  },
  {
    "text": "thank you",
    "start": "3070260",
    "end": "3072980"
  }
]