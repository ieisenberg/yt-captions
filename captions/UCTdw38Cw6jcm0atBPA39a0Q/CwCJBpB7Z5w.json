[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "thank you for coming there are many amazing talks here so I appreciate each and every one of you just to come here",
    "start": "5500",
    "end": "14340"
  },
  {
    "text": "today we're going to talk about generators coatings and a few more",
    "start": "15030",
    "end": "20110"
  },
  {
    "text": "interesting syntactic sugars my name is Adi you can find me on Twitter or my",
    "start": "20110",
    "end": "27669"
  },
  {
    "text": "blog and I want to talk about iterations",
    "start": "27669",
    "end": "32800"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "so say we have a vector that we want to",
    "start": "32800",
    "end": "37989"
  },
  {
    "text": "iterate over we can write a function a regular function call it vector eight",
    "start": "37989",
    "end": "43680"
  },
  {
    "text": "and basically we iterate over the sequence of the vector and then we print",
    "start": "43680",
    "end": "51160"
  },
  {
    "text": "out the elements so we can see that this one function or subroutine the concept",
    "start": "51160",
    "end": "57309"
  },
  {
    "text": "of something actually goes back to the late 40s so it's not very modern and we",
    "start": "57309",
    "end": "63399"
  },
  {
    "text": "can say that we have one function vector that does two things which was already violates one of the principles of good",
    "start": "63399",
    "end": "69970"
  },
  {
    "text": "software design it both iterate over sequence and perform some operation and",
    "start": "69970",
    "end": "76470"
  },
  {
    "text": "the question is let's say we want to do another some other operation maybe we",
    "start": "76470",
    "end": "81730"
  },
  {
    "text": "want to sum the elements maybe we want to sum them and print them or maybe we",
    "start": "81730",
    "end": "87250"
  },
  {
    "text": "can do we want to do some operation which the right whoever wrote this function didn't wasn't aware of so in",
    "start": "87250",
    "end": "94630"
  },
  {
    "text": "that case we would actually need to write a new function which does these extra operations we can think of another",
    "start": "94630",
    "end": "101650"
  },
  {
    "text": "example let's say we want to draw a line on some image or in a device so again we",
    "start": "101650",
    "end": "107350"
  },
  {
    "text": "we can copy or take go to Stack Overflow or any computer graphics book and we",
    "start": "107350",
    "end": "115720"
  },
  {
    "text": "generally see code that looks something like this this is just a partial bresenhem's algorithm for drawing a line",
    "start": "115720",
    "end": "122200"
  },
  {
    "text": "and the thing I'm not going to go into the other into the logic but you can see",
    "start": "122200",
    "end": "127480"
  },
  {
    "text": "that basically it also does these two things it iterates over some values and",
    "start": "127480",
    "end": "132849"
  },
  {
    "text": "it calls this function put pixel to actually draw the line so again we're iterating and performing some of",
    "start": "132849",
    "end": "138430"
  },
  {
    "text": "now by calling this function put pixel we're actually making some very",
    "start": "138430",
    "end": "144790"
  },
  {
    "text": "significant assumptions about this function first of all we're actually assuming that it exists and that we can",
    "start": "144790",
    "end": "151930"
  },
  {
    "text": "actually the compiler can find can find it and the linker will link it right so we were assuming that it's available",
    "start": "151930",
    "end": "158620"
  },
  {
    "text": "we're assuming we're calling it correctly with the correct signature we",
    "start": "158620",
    "end": "163629"
  },
  {
    "text": "are assuming that it actually does what we hope it will do which is a draw draw the pixel and another implicit",
    "start": "163629",
    "end": "171040"
  },
  {
    "text": "assumption that we're making here it is that it will actually return the control to our function because this function is",
    "start": "171040",
    "end": "178090"
  },
  {
    "text": "actually in the middle of computation right so we're saying a mixture of these",
    "start": "178090",
    "end": "183849"
  },
  {
    "text": "two things which are iteration and operation mixed inside two concerns that",
    "start": "183849",
    "end": "190599"
  },
  {
    "text": "are mixed inside a single function so we can summarize this that or at least the",
    "start": "190599",
    "end": "197049"
  },
  {
    "text": "features that we see here is that subroutines are both eager and closed what does that mean eager it means that",
    "start": "197049",
    "end": "203199"
  },
  {
    "text": "they operate on the whole sequence which is passed in as an argument and closed in the sense that we have to",
    "start": "203199",
    "end": "209709"
  },
  {
    "text": "predetermine what operations these functions apply to the elements of our sequence of our sequence right so some",
    "start": "209709",
    "end": "219400"
  },
  {
    "text": "of you might jump up and say yeah you can make put pixel a call back and a",
    "start": "219400",
    "end": "224620"
  },
  {
    "text": "call box a very common way to overcome this some of these limitations but and",
    "start": "224620",
    "end": "230680"
  },
  {
    "text": "you know see process has actually actually has many different mechanisms for using callbacks we can use function",
    "start": "230680",
    "end": "236109"
  },
  {
    "text": "pointers we can use lambdas we can't call about templates or we can use concepts there are many ancient and",
    "start": "236109",
    "end": "242680"
  },
  {
    "text": "advanced modern ways of producing these color balls however a regardless of the",
    "start": "242680",
    "end": "250810"
  },
  {
    "text": "mechanism you're using you still have several problematic issues related to",
    "start": "250810",
    "end": "256539"
  },
  {
    "text": "the two callbacks the first one might be called inversion of control essentially we're letting a library called call",
    "start": "256539",
    "end": "263789"
  },
  {
    "text": "external code that is not necessarily trustworthy or valid or correct and we're still in them in the middle of",
    "start": "263789",
    "end": "270010"
  },
  {
    "text": "computation the second thing is called you can call it callback hell is really when you're",
    "start": "270010",
    "end": "277270"
  },
  {
    "text": "the flow of your algorithm the flow of your program is skipping between decoupled parts of your code so trying",
    "start": "277270",
    "end": "284620"
  },
  {
    "text": "to reason about or debug or understand or maintain your code becomes extremely difficult when the logic is all over the",
    "start": "284620",
    "end": "292389"
  },
  {
    "text": "place sometimes it's not even in the same file and even still the the code is",
    "start": "292389",
    "end": "298990"
  },
  {
    "text": "still eager so we're still calling this external function on the whole sequence and not calling it directly so the",
    "start": "298990",
    "end": "307060"
  },
  {
    "text": "functions are still trying to expect to get to receive the full sequence so you",
    "start": "307060",
    "end": "315610"
  },
  {
    "text": "know the question is if only there was a way to somehow flip these iterating functions I kind of think about it like",
    "start": "315610",
    "end": "322690"
  },
  {
    "text": "inside out so that we can somehow iterate without pre committing to a predetermined operation so that we can",
    "start": "322690",
    "end": "330550"
  },
  {
    "text": "decouple the operations we want to do in the elements from the iteration itself",
    "start": "330550",
    "end": "335759"
  },
  {
    "text": "and the answer is also not very modern it comes from originally I think from",
    "start": "335759",
    "end": "343240"
  },
  {
    "text": "Alexander Stepanov it became part of the C++ the suppressor standard library has",
    "start": "343240",
    "end": "349449"
  },
  {
    "text": "iterated since 1998 and two of the interesting concepts related to",
    "start": "349449",
    "end": "355870"
  },
  {
    "text": "iterators or iterator objects in iterator adapters these are usually standalone types and",
    "start": "355870",
    "end": "366360"
  },
  {
    "text": "frequently they're not very tightly coupled to an actual sequence that means",
    "start": "366360",
    "end": "372610"
  },
  {
    "text": "they're not there sometimes there isn't even an actual sync sequence underneath we can see some example from the C plus",
    "start": "372610",
    "end": "379360"
  },
  {
    "text": "our standard STD I stream iterator is a single pass of iterator that reads",
    "start": "379360",
    "end": "385150"
  },
  {
    "text": "successive objects from our stream and it calls the operator output sorry the",
    "start": "385150",
    "end": "393940"
  },
  {
    "text": "input streaming operator and the actual read operation is performed with the iterator is incremented right not when",
    "start": "393940",
    "end": "400779"
  },
  {
    "text": "it is the reference now as to the reverse iterator is an iterator adapter and it just versus the direction of a given iterator",
    "start": "400779",
    "end": "407440"
  },
  {
    "text": "so plus plus action would actually call - - for example and we have in c plus a",
    "start": "407440",
    "end": "414310"
  },
  {
    "text": "17 we got recursive director iterator which iterates over directory elements of a folder in a recursive manner so it",
    "start": "414310",
    "end": "421810"
  },
  {
    "text": "basically iterate over the whole subtree hierarchy and I bring this example",
    "start": "421810",
    "end": "426850"
  },
  {
    "text": "because here we don't actually have some explicit sequence in the memory of our",
    "start": "426850",
    "end": "432640"
  },
  {
    "text": "program so with the reason of sequence that the sequence we're iterating over is actually the file system it's",
    "start": "432640",
    "end": "440290"
  },
  {
    "text": "external to our program but still this is very convenient a very convenient",
    "start": "440290",
    "end": "446140"
  },
  {
    "text": "type and very nice provides us some very nice abstraction for iteration now",
    "start": "446140",
    "end": "452160"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "another option is to write our own user-defined iterators and I chose this",
    "start": "452160",
    "end": "458160"
  },
  {
    "text": "I work a lot with OpenCV I do a lot of computer vision and image processing and",
    "start": "458160",
    "end": "463560"
  },
  {
    "text": "OpenCV has this iterator class called line iterator basically it creates iterator for line connecting point 1 to",
    "start": "463560",
    "end": "471310"
  },
  {
    "text": "point 2 and gives us the ability to skip from one to iterate across along pixels",
    "start": "471310",
    "end": "477370"
  },
  {
    "text": "along this line so that and the API is",
    "start": "477370",
    "end": "482410"
  },
  {
    "text": "actually very typical for iterator types we can see that well it has I'm going to",
    "start": "482410",
    "end": "488560"
  },
  {
    "text": "go over the methods in a minute but basically the important thing is there is no explicit sequence the iterator",
    "start": "488560",
    "end": "494950"
  },
  {
    "text": "object is actually calculating the line elements one by one as it's the reference sorry as its incremented so",
    "start": "494950",
    "end": "504240"
  },
  {
    "text": "there is no underlying sequence it's it's what's called lazy because it's only calculating the next element",
    "start": "504240",
    "end": "510970"
  },
  {
    "text": "whenever we there's actually a request to get it's on demand and we can see",
    "start": "510970",
    "end": "517780"
  },
  {
    "text": "that it has the operator dereference operator which gives us a pointer to some to the current pixel in the image",
    "start": "517780",
    "end": "523500"
  },
  {
    "text": "the constructor takes the image the two points and some connectivity which defines which which of the line",
    "start": "523500",
    "end": "528970"
  },
  {
    "text": "algorithms is going to choose the increment operator allows us to go up to",
    "start": "528970",
    "end": "534100"
  },
  {
    "text": "the next pixel now and it also has a bunch of public number",
    "start": "534100",
    "end": "539270"
  },
  {
    "text": "okay however oh and the way you use it",
    "start": "539270",
    "end": "545450"
  },
  {
    "text": "it's actually is very simple I'm using I just copied an example from the documentation we can create the line",
    "start": "545450",
    "end": "551780"
  },
  {
    "text": "iterator let's say we want to copy the values the color values of all the pixels inside this along this line into",
    "start": "551780",
    "end": "560240"
  },
  {
    "text": "some vector and so we basically we can run a for loop and our counter I goes",
    "start": "560240",
    "end": "568880"
  },
  {
    "text": "from zero to I T dot count again that global global member count we can",
    "start": "568880",
    "end": "574520"
  },
  {
    "text": "increment both the iterator in the count and then we need to cast the pointer type because the type of the pixel is",
    "start": "574520",
    "end": "582200"
  },
  {
    "text": "not always known at at compile time so there is this ugly cast of I'm not gonna I don't really want to go into too much",
    "start": "582200",
    "end": "589670"
  },
  {
    "text": "criticism over OpenCV line iterator but that's one of the ugly things about it and basically objects that laser lead",
    "start": "589670",
    "end": "598100"
  },
  {
    "text": "generate values are called generators okay so this is important term we're gonna see more of it a little bit later now iteration iterators themselves are",
    "start": "598100",
    "end": "608720"
  },
  {
    "text": "also an imperfect obstruction okay they have they're much there may be better",
    "start": "608720",
    "end": "614210"
  },
  {
    "text": "than what we saw before but they still have several issues that we might want",
    "start": "614210",
    "end": "620240"
  },
  {
    "text": "to see if to see how they affect our code we saw the global members hopefully",
    "start": "620240",
    "end": "628790"
  },
  {
    "text": "we could that some that's fixable by using some axis members and also the",
    "start": "628790",
    "end": "634280"
  },
  {
    "text": "casting we could have made it a template or derived the template from it but the",
    "start": "634280",
    "end": "640520"
  },
  {
    "text": "more severe concerns that i want to talk about are actually relevant for all of the iterator types and those are the",
    "start": "640520",
    "end": "645890"
  },
  {
    "text": "ones they want to talk about in this narrative the first one I'm not sure it",
    "start": "645890",
    "end": "652460"
  },
  {
    "start": "650000",
    "end": "650000"
  },
  {
    "text": "probably has a more formal name I generally call it the awkward coupling problem and it comes from the question",
    "start": "652460",
    "end": "660920"
  },
  {
    "text": "when do we stop incrementing because we have this iterator object and we somehow",
    "start": "660920",
    "end": "666140"
  },
  {
    "text": "need to decide how long we're going to is it allowed to increment or it",
    "start": "666140",
    "end": "673070"
  },
  {
    "text": "two times so for civil an iterator we saw that it has this member called countin we have to check some external",
    "start": "673070",
    "end": "679400"
  },
  {
    "text": "counter against this number and we're not we shouldn't count beyond this value",
    "start": "679400",
    "end": "685420"
  },
  {
    "text": "for I stream iterator there is a default constructed something called the end of",
    "start": "685420",
    "end": "691370"
  },
  {
    "text": "stream iterator which becomes whenever an ice-cream iterator which is the end",
    "start": "691370",
    "end": "698120"
  },
  {
    "text": "it suddenly becomes equal to this global universal ice-cream iterate from the",
    "start": "698120",
    "end": "704120"
  },
  {
    "text": "standard library the reverse iterator must be compared to stop to the",
    "start": "704120",
    "end": "709190"
  },
  {
    "text": "underlying sequences our end iterator and the recursive directory iterator",
    "start": "709190",
    "end": "714580"
  },
  {
    "text": "basically it's checked using by comparing it to calling the free",
    "start": "714580",
    "end": "720560"
  },
  {
    "text": "function s to the end on on data rate itself so maybe this is not the only way",
    "start": "720560",
    "end": "726860"
  },
  {
    "text": "to do that that's one way to do it right so we're saying that there are actually many different methodologies",
    "start": "726860",
    "end": "733540"
  },
  {
    "text": "methodologies or policies for identifying when we want to stop iterating oh and when we have we have to",
    "start": "733540",
    "end": "740300"
  },
  {
    "text": "stop iterating now to make matters worse especially in in cases where we're",
    "start": "740300",
    "end": "748280"
  },
  {
    "text": "comparing our iterator type to another",
    "start": "748280",
    "end": "753920"
  },
  {
    "text": "object is that the user let's say we want to do some kind of call an STL",
    "start": "753920",
    "end": "759440"
  },
  {
    "text": "function that expects a beginning and iterator and let's say we have multiple",
    "start": "759440",
    "end": "764660"
  },
  {
    "text": "such sequences what we're iterating over if we pass the beginning iterator of one",
    "start": "764660",
    "end": "770120"
  },
  {
    "text": "sequence and the end iterator of another sequence the types still match if the underlying are the same types are the",
    "start": "770120",
    "end": "775820"
  },
  {
    "text": "same types but now we have undefined behavior we're actually requiring the user to",
    "start": "775820",
    "end": "781550"
  },
  {
    "text": "make sure that they pass the beginning end iterators of exactly the same",
    "start": "781550",
    "end": "787820"
  },
  {
    "text": "underlying sequence otherwise not other people's problems and that that's an",
    "start": "787820",
    "end": "792860"
  },
  {
    "text": "abstraction problem that can cause undefined behavior so you know in the",
    "start": "792860",
    "end": "799760"
  },
  {
    "text": "best case your code will crash in the worst case it won't and nobody knows when and if it's correct",
    "start": "799760",
    "end": "806960"
  },
  {
    "text": "any questions you know right so begins",
    "start": "806960",
    "end": "816570"
  },
  {
    "text": "the upcoming standards it was 20 we're getting ranges and ranges are amazing an",
    "start": "816570",
    "end": "824010"
  },
  {
    "text": "amazing addition to the library and they're in a kind of an abstraction layer more general concept over",
    "start": "824010",
    "end": "831210"
  },
  {
    "text": "iterators and they're basically the answer to the awkward coupling problem because they cut by creating arranger",
    "start": "831210",
    "end": "839660"
  },
  {
    "text": "coupling this begin and end iterator into a single object and also you can encapsulate not just the beginning end",
    "start": "839660",
    "end": "846600"
  },
  {
    "text": "but the begin iterator in some size or account initially or some other stopping",
    "start": "846600",
    "end": "852210"
  },
  {
    "text": "conditions of sentinels there are different ways to create a range but once we have arranged the range is actually encapsulate all this",
    "start": "852210",
    "end": "859050"
  },
  {
    "text": "information itself and there is no problem where we might mix iterator",
    "start": "859050",
    "end": "864420"
  },
  {
    "text": "types and it also makes STL working with they're still much more powerful it allows us to do composition of multiple",
    "start": "864420",
    "end": "871680"
  },
  {
    "text": "operations we can create pipelines transform values it's actually very very powerful library which I'm not going to",
    "start": "871680",
    "end": "878640"
  },
  {
    "text": "talk about because iterators have another problem another abstraction problem and that's the problem of",
    "start": "878640",
    "end": "885000"
  },
  {
    "text": "distributed logic and ranges don't help us solve this problem actually what I'm",
    "start": "885000",
    "end": "893340"
  },
  {
    "text": "going to talk about in co-routines we're actually going to think about how ranges are built how we can create our own",
    "start": "893340",
    "end": "899550"
  },
  {
    "text": "ranges which are iterable types okay so every generator we're going to create is",
    "start": "899550",
    "end": "905400"
  },
  {
    "text": "actually arranging and these from a user point of view arranged is almost in",
    "start": "905400",
    "end": "911430"
  },
  {
    "text": "terms of usability it's very often indistinguishable from anything else we're going to see so I might be using",
    "start": "911430",
    "end": "917910"
  },
  {
    "text": "these terms alternatively so the problems of distributed logic is kind of",
    "start": "917910",
    "end": "923670"
  },
  {
    "text": "a cousin of the distributed of the callback hell because if we look at the implementation of this line iterator",
    "start": "923670",
    "end": "930810"
  },
  {
    "text": "which we see on the top this is just the same code I showed before and a few of the method implementations",
    "start": "930810",
    "end": "938480"
  },
  {
    "text": "we can see that the okay the the dereference it or operator is trivial it",
    "start": "938560",
    "end": "944499"
  },
  {
    "text": "just return some kind of the value of this member the pointer and the incremental iterator does some kind of",
    "start": "944499",
    "end": "953079"
  },
  {
    "text": "computation a very simple very short computation there are no loops here because remember the iteration is",
    "start": "953079",
    "end": "959920"
  },
  {
    "text": "obstructed is externalized to the user and the the other part of the logic",
    "start": "959920",
    "end": "967059"
  },
  {
    "text": "basically what sets up these values to do the right thing happens in the",
    "start": "967059",
    "end": "972309"
  },
  {
    "text": "constructor which isn't shown here because it's actually longer than this screen okay so it's a whole bunch of",
    "start": "972309",
    "end": "977319"
  },
  {
    "text": "code there's a lot of pre computation to fill in all of these elements and then",
    "start": "977319",
    "end": "982720"
  },
  {
    "text": "we can call the increment operator now this has two problems the first one is",
    "start": "982720",
    "end": "989529"
  },
  {
    "text": "the fact that now if we need to write our own iterator that we need if we're",
    "start": "989529",
    "end": "994600"
  },
  {
    "text": "writing our own algorithm we now have to start thinking about okay let's debug the code that happens here and how does",
    "start": "994600",
    "end": "1000990"
  },
  {
    "text": "this relate to the constructor which may be written in another part of the file maybe we also have a post increment",
    "start": "1000990",
    "end": "1006449"
  },
  {
    "text": "operator maybe we have additional operators and suddenly we are to keep all of this logic distributed logic in",
    "start": "1006449",
    "end": "1013079"
  },
  {
    "text": "our head and and try to track it across the implementation of the iterator type",
    "start": "1013079",
    "end": "1018870"
  },
  {
    "text": "the second problem is centralized state where you can see all of the members are actually stored this member so all of",
    "start": "1018870",
    "end": "1025530"
  },
  {
    "text": "the variables that are needed in here are actually stored as members of the object and this doesn't take any note we",
    "start": "1025530",
    "end": "1035850"
  },
  {
    "text": "kind of kind of living things like consonants and scoping rules and all",
    "start": "1035850",
    "end": "1041610"
  },
  {
    "text": "kind of not all methods actually need to access all of these members so it might",
    "start": "1041610",
    "end": "1047159"
  },
  {
    "text": "also affect the object size and other such considerations so we have we have distributed logic and centralized state",
    "start": "1047159",
    "end": "1054440"
  },
  {
    "text": "some of them are not moving and all of them are mutable by all of the methods at least well if they're publicly owned",
    "start": "1054440",
    "end": "1060630"
  },
  {
    "text": "by anyone but let's assume they're not public so",
    "start": "1060630",
    "end": "1066679"
  },
  {
    "text": "if we want to compare this distributed logic to what we saw before with",
    "start": "1067779",
    "end": "1073929"
  },
  {
    "text": "functions I can just copy this logic into a single function let's say this is",
    "start": "1073929",
    "end": "1079539"
  },
  {
    "start": "1074000",
    "end": "1074000"
  },
  {
    "text": "a it's not a function from OpenCV I just read slide where basically a function called process line it takes the same",
    "start": "1079539",
    "end": "1085779"
  },
  {
    "text": "argument as the constructor sets up all of these members as local variables",
    "start": "1085779",
    "end": "1091889"
  },
  {
    "text": "because the the same logic is the constructor and then we have this internal loop so this is this process",
    "start": "1091889",
    "end": "1099070"
  },
  {
    "text": "line is actually very similar to the draw line method that we saw before and this this has the centralized logic but",
    "start": "1099070",
    "end": "1106629"
  },
  {
    "text": "again the problem that we saw before it's both eager and closed and by working with iterator types we have",
    "start": "1106629",
    "end": "1112179"
  },
  {
    "text": "distributed logic but it's lazy and open so we kind of have to make it seems like",
    "start": "1112179",
    "end": "1117460"
  },
  {
    "text": "we have to make a trade-off between it irritability and laziness and openness and and we're sort of trying to figure",
    "start": "1117460",
    "end": "1125830"
  },
  {
    "text": "out whether we can have both the best of both worlds is there is there a way to",
    "start": "1125830",
    "end": "1132009"
  },
  {
    "text": "write easy code that we can reason about and write our code in a serial manner",
    "start": "1132009",
    "end": "1137559"
  },
  {
    "text": "that we can maintain and debug was still abstracting away the iteration and",
    "start": "1137559",
    "end": "1144179"
  },
  {
    "text": "basically this is where co-routines come from and the simplest definition of a",
    "start": "1144480",
    "end": "1150759"
  },
  {
    "text": "coding basically according is the function that can suspend execution and be resumed later okay so it allows",
    "start": "1150759",
    "end": "1158889"
  },
  {
    "text": "suspending and resuming execution at certain locations and preserves its local states so that when we re-enter it",
    "start": "1158889",
    "end": "1166509"
  },
  {
    "text": "we can reenter it more than once and continue wherever we left off and in",
    "start": "1166509",
    "end": "1173049"
  },
  {
    "text": "contrast to threads it's not this is a it's kind of cooperative yielding",
    "start": "1173049",
    "end": "1181690"
  },
  {
    "text": "basically so it's none it's non pre-emptive so it's not like a thread which is interrupted or scheduled by the",
    "start": "1181690",
    "end": "1188320"
  },
  {
    "text": "operating system or the kernel or or maybe the CPU it's actually the code itself decides when it yields its",
    "start": "1188320",
    "end": "1195730"
  },
  {
    "text": "control flow back to the caller and when and the color can decide to resume it so in a sense",
    "start": "1195730",
    "end": "1201490"
  },
  {
    "text": "the coatings I am going to be speaking about are only synchronous karate okay so again this is not to talk about",
    "start": "1201490",
    "end": "1208300"
  },
  {
    "text": "all of coroutines college is a huge subject the concept goes back to 1959",
    "start": "1208300",
    "end": "1214750"
  },
  {
    "text": "when the term was first coined and in",
    "start": "1214750",
    "end": "1219790"
  },
  {
    "text": "fact boost has already had several curtain libraries since at least 2009 so",
    "start": "1219790",
    "end": "1227350"
  },
  {
    "text": "this is not a new concept and I've seen Korean libraries from see especially for",
    "start": "1227350",
    "end": "1233350"
  },
  {
    "text": "things like generators like we were going to talk about that are essentially",
    "start": "1233350",
    "end": "1239230"
  },
  {
    "text": "before the year 2000 so this is not it's not a new concept and it's not a new solution in the sense that people have",
    "start": "1239230",
    "end": "1245860"
  },
  {
    "text": "known and have worked with coatings before and if we think about the",
    "start": "1245860",
    "end": "1251440"
  },
  {
    "text": "function that can suspend in execution in mid operation return some value to",
    "start": "1251440",
    "end": "1257890"
  },
  {
    "text": "the caller and then whenever the caller requests can resume execution this is",
    "start": "1257890",
    "end": "1263080"
  },
  {
    "text": "very similar to what we were trying to do basically if we look at the process line function that we just wrote before",
    "start": "1263080",
    "end": "1269050"
  },
  {
    "text": "remember here on the left the nice thing",
    "start": "1269050",
    "end": "1274720"
  },
  {
    "text": "about it is that we have this centralized logic very serial code the serial algorithmic code however whenever",
    "start": "1274720",
    "end": "1282850"
  },
  {
    "text": "we get to do something with the pointer what we can do basically is this is",
    "start": "1282850",
    "end": "1289210"
  },
  {
    "text": "where we want to stop and return the value of this pointer just like the civil an iterator did with the reference",
    "start": "1289210",
    "end": "1294550"
  },
  {
    "text": "operator we can say okay let's pause here this is the current value that we're talking about take it do whatever",
    "start": "1294550",
    "end": "1301900"
  },
  {
    "text": "you want if you want the next one just call me again and I'll resume this look okay so and we're going to see how this",
    "start": "1301900",
    "end": "1309130"
  },
  {
    "text": "works now the interesting thing is that",
    "start": "1309130",
    "end": "1315790"
  },
  {
    "text": "operating systems and most modern CPU architectures and even not so modern ones already have support for fibers",
    "start": "1315790",
    "end": "1323860"
  },
  {
    "text": "that's kind of context switching of of such co-routines and that's what the",
    "start": "1323860",
    "end": "1331510"
  },
  {
    "text": "boost coding to library users but we're not going to talk about it",
    "start": "1331510",
    "end": "1336610"
  },
  {
    "text": "although you can use the boost to do that we're not going to talk about because there's a new kid on the block",
    "start": "1336610",
    "end": "1342760"
  },
  {
    "start": "1342000",
    "end": "1342000"
  },
  {
    "text": "and that's steepest was 20 quality so our answer to the distributed logic",
    "start": "1342760",
    "end": "1353710"
  },
  {
    "text": "problem as we saw is a coating and so you might say okay but what is a coating",
    "start": "1353710",
    "end": "1359590"
  },
  {
    "text": "and the answer is the curtain is the function if any of the following is true",
    "start": "1359590",
    "end": "1365760"
  },
  {
    "text": "basically if it uses the Khoa weight keyword keyword or one of them up the",
    "start": "1365760",
    "end": "1373450"
  },
  {
    "text": "co-ed operator or the COI yield and core return keywords and dairy and that's it",
    "start": "1373450",
    "end": "1380679"
  },
  {
    "text": "and the interesting thing is notice that all of these requirements are only on the implementation side so there is",
    "start": "1380679",
    "end": "1388450"
  },
  {
    "text": "actually no way to distinguish a regular function from its prototype from a",
    "start": "1388450",
    "end": "1393940"
  },
  {
    "text": "covert but however you know curtain must return a certain type which satisfies",
    "start": "1393940",
    "end": "1402880"
  },
  {
    "text": "certain requirements by the compilers that the compiler can generate the co-routine code however we can also have",
    "start": "1402880",
    "end": "1409539"
  },
  {
    "text": "a function that returns whatever coroutine call so and that wouldn't be a core it in itself so a colon is actually",
    "start": "1409539",
    "end": "1416649"
  },
  {
    "text": "an implementation detail for creating something like like iterables or ranges",
    "start": "1416649",
    "end": "1422049"
  },
  {
    "text": "it's not something you can see by just examining a header file or forward declarations of our functions now there",
    "start": "1422049",
    "end": "1432610"
  },
  {
    "text": "is a proposal it's P 41:48 v r0 at least",
    "start": "1432610",
    "end": "1438760"
  },
  {
    "text": "it now which suggests adding another keyword async to the end of the definition but",
    "start": "1438760",
    "end": "1444610"
  },
  {
    "text": "again that's not at the declaration and it makes it a context-sensitive keyword",
    "start": "1444610",
    "end": "1450399"
  },
  {
    "text": "I'm not going to go into that you know the Uglies KO await KO yieldco return",
    "start": "1450399",
    "end": "1456130"
  },
  {
    "text": "that whole other discussion about style but that that was what the committee",
    "start": "1456130",
    "end": "1462190"
  },
  {
    "text": "chose so that's what we're going to live with and well I'm only going to be",
    "start": "1462190",
    "end": "1467289"
  },
  {
    "text": "talking about the COI and keywords wanna make this clear I'm only touching a very narrow part of what co-routines",
    "start": "1467289",
    "end": "1472719"
  },
  {
    "text": "can do and my goal here is to talk it's a kind of a motivational using user",
    "start": "1472719",
    "end": "1479339"
  },
  {
    "text": "usage point of view and not I'm not gonna go too deep into how things are",
    "start": "1479339",
    "end": "1484779"
  },
  {
    "text": "actually working underneath and about the magic that the compiler is doing to get us these amazing features so there",
    "start": "1484779",
    "end": "1493329"
  },
  {
    "text": "is a time to see about curry things there are excellent videos about it and",
    "start": "1493329",
    "end": "1498959"
  },
  {
    "text": "we're only gonna touch but I think it's it's it's in enough so now let's see",
    "start": "1498959",
    "end": "1504549"
  },
  {
    "start": "1503000",
    "end": "1503000"
  },
  {
    "text": "some code okay so we have a function I have a question it's not a trick",
    "start": "1504549",
    "end": "1511329"
  },
  {
    "text": "question what is the Zorro return 42",
    "start": "1511329",
    "end": "1517539"
  },
  {
    "text": "yeah and the return type is int is it recording no why exactly right easy okay so now we",
    "start": "1517539",
    "end": "1530559"
  },
  {
    "text": "have this function cool it uses the keyword coil what is it return not 42",
    "start": "1530559",
    "end": "1540899"
  },
  {
    "text": "well what's the return type yes it's a",
    "start": "1540899",
    "end": "1547299"
  },
  {
    "text": "converting right so how do you use it",
    "start": "1547299",
    "end": "1552989"
  },
  {
    "text": "well they're actually several ways to use it the first one this is maybe the more explicit one we can save call gen",
    "start": "1552989",
    "end": "1562029"
  },
  {
    "text": "is the object returned by coral it's a range I'm going to call it a range because it is the sort of range supports",
    "start": "1562029",
    "end": "1568389"
  },
  {
    "text": "the range API and we can get an iterator to the begin and decrement and",
    "start": "1568389",
    "end": "1576839"
  },
  {
    "text": "dereference it to get the actual value or we can just for example print it that way and one of the most common ways to",
    "start": "1576839",
    "end": "1583779"
  },
  {
    "text": "do it is just use a range for loop like at the bottom and I think this is pretty",
    "start": "1583779",
    "end": "1589629"
  },
  {
    "text": "amazing because we have this very linear code here it's extremely linear it's a single",
    "start": "1589629",
    "end": "1596769"
  },
  {
    "text": "line right but but it's linear code that created from by the compiler gives us",
    "start": "1596769",
    "end": "1602199"
  },
  {
    "text": "this whole way to providing all of the API that we saw before that all iterator types must support so if we thought that",
    "start": "1602199",
    "end": "1610120"
  },
  {
    "text": "C++ 11 lambda has brought us some very impressive syntactic sugar in code",
    "start": "1610120",
    "end": "1615250"
  },
  {
    "text": "generation by the compiler we're going to see that Co routines are go like a whole atmosphere above that now of",
    "start": "1615250",
    "end": "1624070"
  },
  {
    "text": "course nobody said that there must be that core teams must be must provide an",
    "start": "1624070",
    "end": "1630850"
  },
  {
    "text": "actual sequence and since they're lazy anyway there's no real reason to not use",
    "start": "1630850",
    "end": "1635980"
  },
  {
    "text": "infinite ranges so in this case I have this function called a according called",
    "start": "1635980",
    "end": "1641470"
  },
  {
    "text": "iota and while and it just loops infinitely and returns the incremental e",
    "start": "1641470",
    "end": "1646600"
  },
  {
    "text": "the values of and for example we can use copy and copy I'm I'm creating the",
    "start": "1646600",
    "end": "1652750"
  },
  {
    "text": "co-written here with the value for the initial value 42 we're calling begin because again I'm using the standard",
    "start": "1652750",
    "end": "1659110"
  },
  {
    "text": "copy an which expects the begin and end iterator then I can say sorry copy and",
    "start": "1659110",
    "end": "1664480"
  },
  {
    "text": "requires an iterator and the number of decrement of the number of increments or",
    "start": "1664480",
    "end": "1669610"
  },
  {
    "text": "in values we want to expect and then we're just printing it to the output stream so I think this is pretty awesome",
    "start": "1669610",
    "end": "1678000"
  },
  {
    "text": "note that because it's unsigned it's actually it's not going to go all the",
    "start": "1678000",
    "end": "1683140"
  },
  {
    "text": "way to an infinite number of values it's actually gonna wrap around but not",
    "start": "1683140",
    "end": "1688600"
  },
  {
    "text": "undefined behavior okay so actually I I lied that's not that code that I show",
    "start": "1688600",
    "end": "1696070"
  },
  {
    "text": "you is not valid C pluses 20 code there are actually several problems with the",
    "start": "1696070",
    "end": "1702070"
  },
  {
    "text": "code it does run by the way all the examples I'm showing you here run on visual studio but it's non-standard and",
    "start": "1702070",
    "end": "1709500"
  },
  {
    "text": "non-conforming but it might might give us a peek into the future and it gives us a sense of its it's much easier to",
    "start": "1709500",
    "end": "1718000"
  },
  {
    "text": "explain so I'm going to stick with it and the first thing is that there is no such thing as the auto return type or a",
    "start": "1718000",
    "end": "1723880"
  },
  {
    "text": "concept return type on on unco routines so the fact that I wrote auto color and",
    "start": "1723880",
    "end": "1729400"
  },
  {
    "text": "ask you what the return type is that that's not that shouldn't compile in pedantic mode in totally conforming",
    "start": "1729400",
    "end": "1737260"
  },
  {
    "text": "compiler because what what in Microsoft Visual Studio with the curtain extension",
    "start": "1737260",
    "end": "1743020"
  },
  {
    "text": "does it actually infers a type called STD experimental generator T whenever I",
    "start": "1743020",
    "end": "1748420"
  },
  {
    "text": "wrote Auto and if can infer that because I used a KO yield to yield an integer so in that case it would be a generator of",
    "start": "1748420",
    "end": "1754750"
  },
  {
    "text": "int which is very convenient makes for very easy to read slides and no need to",
    "start": "1754750",
    "end": "1760750"
  },
  {
    "text": "have a lot of using namespaces but as",
    "start": "1760750",
    "end": "1766000"
  },
  {
    "text": "C++ 2010 that's not valid C person we have to explicitly study the type the",
    "start": "1766000",
    "end": "1773320"
  },
  {
    "text": "more serious problem here is that there is no such type assess the experimental",
    "start": "1773320",
    "end": "1779679"
  },
  {
    "text": "generator there is no standard generator in fact there is no standard library type that does anything with quality",
    "start": "1779679",
    "end": "1786850"
  },
  {
    "text": "there is no support there is no library support for co-routines in c++ 20 and",
    "start": "1786850",
    "end": "1792190"
  },
  {
    "text": "that's unfortunate c plus 20 brings us",
    "start": "1792190",
    "end": "1797799"
  },
  {
    "text": "very very powerful low-level mechanisms that explain how linear serial code",
    "start": "1797799",
    "end": "1805000"
  },
  {
    "text": "using these keywords is transformed into something that generates code generators",
    "start": "1805000",
    "end": "1812890"
  },
  {
    "text": "and other interesting types but it does and it tells the library writer is what",
    "start": "1812890",
    "end": "1818770"
  },
  {
    "text": "the API is of these types should look like but it doesn't actually come with anything like a generator so again I see",
    "start": "1818770",
    "end": "1825669"
  },
  {
    "text": "the experimental generator is actually an extension for Microsoft Visual Studio",
    "start": "1825669",
    "end": "1830970"
  },
  {
    "text": "if you want to use it on and on other platforms then I Luis Baker has a",
    "start": "1830970",
    "end": "1836620"
  },
  {
    "text": "library called CPP Koro which is incredible and you should definitely just go and read the readme it's super",
    "start": "1836620",
    "end": "1843190"
  },
  {
    "text": "readable and it's blunt mind blowing the the code the samples there are really amazing and easy to read so I definitely",
    "start": "1843190",
    "end": "1850570"
  },
  {
    "text": "recommend checking it out so for brevity I will continue using the auto keyword",
    "start": "1850570",
    "end": "1855640"
  },
  {
    "text": "but remember that we kind of in a joint illusion that that's actually",
    "start": "1855640",
    "end": "1861380"
  },
  {
    "text": "the way you ride it so let's see some more examples a few years ago I was",
    "start": "1861380",
    "end": "1868040"
  },
  {
    "text": "right I was working on doing some image processing algorithm and I needed to",
    "start": "1868040",
    "end": "1874550"
  },
  {
    "text": "find to do some processing in a neighborhood around a certain pixel where until I reached the nearest",
    "start": "1874550",
    "end": "1881390"
  },
  {
    "text": "neighbor and I decided to write the algorithm I called it spiral which allows me to take a single pixel I'm",
    "start": "1881390",
    "end": "1887540"
  },
  {
    "text": "just iterate spiral all the way until I reach the nearest pixel that has some",
    "start": "1887540",
    "end": "1895190"
  },
  {
    "text": "interesting property and the code for this cartoon is on the top you can see",
    "start": "1895190",
    "end": "1901490"
  },
  {
    "text": "outer spiral this code works this code generated this graphic and I'm",
    "start": "1901490",
    "end": "1906680"
  },
  {
    "text": "initializing some variables x and x and y to 0 and the first thing I do I'm",
    "start": "1906680",
    "end": "1912140"
  },
  {
    "text": "actually Co yielding the point x and y so basically the origin 0 0 and that's",
    "start": "1912140",
    "end": "1919490"
  },
  {
    "text": "the first value it's indeed the center of the pixel and then whenever the user decides to return and resume the",
    "start": "1919490",
    "end": "1926510"
  },
  {
    "text": "iterator there's some computation I'm not I'm not actually going to explain how the computation works because I",
    "start": "1926510",
    "end": "1932420"
  },
  {
    "text": "think this is probably the simplest way to show it if it was spread across maybe",
    "start": "1932420",
    "end": "1939470"
  },
  {
    "text": "a constructor and different operators it would be even more difficult to understand the logic so there is some",
    "start": "1939470",
    "end": "1946250"
  },
  {
    "text": "logic here it's actually very simple you can take your time later this slide will be online and this function generates",
    "start": "1946250",
    "end": "1952690"
  },
  {
    "text": "infinite and infinite basically it spirals to infinity it",
    "start": "1952690",
    "end": "1957920"
  },
  {
    "text": "doesn't take into account the boundaries of the image or anything like that it just gives us relative pixel values to",
    "start": "1957920",
    "end": "1964310"
  },
  {
    "text": "the center of to the 0 to the origin now to generate these pretty colors I said",
    "start": "1964310",
    "end": "1971630"
  },
  {
    "text": "ok so let's create another generator which well cycles through colors right",
    "start": "1971630",
    "end": "1978280"
  },
  {
    "text": "and cycling through color is actually easier to do in a color space called hue",
    "start": "1978280",
    "end": "1984050"
  },
  {
    "text": "saturation value than in RGB space so I'm using OpenCV to create",
    "start": "1984050",
    "end": "1991059"
  },
  {
    "text": "- 1 pixel images one is our it is going to be RGB the other one is gonna be HSV",
    "start": "1991059",
    "end": "1996220"
  },
  {
    "text": "and I'm just converting from HSV to RGB because our display only knows how to",
    "start": "1996220",
    "end": "2002220"
  },
  {
    "text": "display RGB colors and then a mule I'm converting it to RGB yielding the RGB",
    "start": "2002220",
    "end": "2008190"
  },
  {
    "text": "pixel values which are 3 a triplet of 3 numbers and then only incrementing the",
    "start": "2008190",
    "end": "2013710"
  },
  {
    "text": "HSV which is it's a cyclic Channel again the details are not really important and",
    "start": "2013710",
    "end": "2020100"
  },
  {
    "text": "but you can say that both of these curtains are actually infinite loops especially this one this one is not even",
    "start": "2020100",
    "end": "2027269"
  },
  {
    "text": "going to have any wraparound issues because it's explicitly wrapping around at 255 because that's that's the way the",
    "start": "2027269",
    "end": "2034980"
  },
  {
    "text": "huge channel works it's a circular kind of a cyclic Channel so what we need to",
    "start": "2034980",
    "end": "2042899"
  },
  {
    "text": "do now and to draw is we sort of need to",
    "start": "2042899",
    "end": "2049940"
  },
  {
    "text": "look at these so what we have one",
    "start": "2049940",
    "end": "2062579"
  },
  {
    "text": "generator creating positional values and the other iterator is giving us colors",
    "start": "2062579",
    "end": "2068128"
  },
  {
    "text": "and we want to draw these values onto an image in tandem basically step",
    "start": "2068129",
    "end": "2073950"
  },
  {
    "text": "incrementing both of them in lockstep right and how do we do that maybe you",
    "start": "2073950",
    "end": "2079679"
  },
  {
    "text": "saw the side we're going to zip them together right so we create a new coding",
    "start": "2079679",
    "end": "2087419"
  },
  {
    "text": "which is called zip and this one is actually a template yes co-routines can",
    "start": "2087419",
    "end": "2093148"
  },
  {
    "text": "be templates as well what does zip do it takes two generators takes the beginning",
    "start": "2093149",
    "end": "2102359"
  },
  {
    "text": "writers of both of them and then simply iterates incrementing them one by one",
    "start": "2102359",
    "end": "2107430"
  },
  {
    "text": "and Co yielding a pair of the D reference values so this make pair here",
    "start": "2107430",
    "end": "2113339"
  },
  {
    "text": "is going to return the first one is the reference value basically the position of our pixel and the second one is going",
    "start": "2113339",
    "end": "2120780"
  },
  {
    "text": "to be the cut the current color and actually the Rangers library has a much more",
    "start": "2120780",
    "end": "2127320"
  },
  {
    "text": "powerful zip view implementation which can be this is very naive implementation",
    "start": "2127320",
    "end": "2133650"
  },
  {
    "text": "but I think it's it for me it's actually very easy to figure out and we",
    "start": "2133650",
    "end": "2139260"
  },
  {
    "text": "understand the logic there is no extraneous information and the syntax is",
    "start": "2139260",
    "end": "2144840"
  },
  {
    "text": "relatively obvious and the way we combine them is basically in a range for loop as we can see on the bottom we have",
    "start": "2144840",
    "end": "2152250"
  },
  {
    "text": "a for loop with am using a structured binding for the position in the color and on the right of the column we can",
    "start": "2152250",
    "end": "2160320"
  },
  {
    "text": "see that we're calling zip with the spiral and hue cycle generator and we're",
    "start": "2160320",
    "end": "2166410"
  },
  {
    "text": "getting we're basically getting a position and a color the point we're going to draw on again remember that the",
    "start": "2166410",
    "end": "2173010"
  },
  {
    "text": "spiral only is already is based on around zero so we're going to shift it to the actual pixel that we wanna draw",
    "start": "2173010",
    "end": "2178710"
  },
  {
    "text": "and some conditions of checking when the spiral is outside of the image and when",
    "start": "2178710",
    "end": "2184800"
  },
  {
    "text": "to stop and then we're setting the colors so actually the difference in the animations between this one in this one",
    "start": "2184800",
    "end": "2190050"
  },
  {
    "text": "is that for this one I think I used the value of 10 so that the changing of the",
    "start": "2190050",
    "end": "2195180"
  },
  {
    "text": "hues is actually faster so let's see",
    "start": "2195180",
    "end": "2203040"
  },
  {
    "text": "another example let's say we have a binary tree and we'd like to iterate over its node now we might write",
    "start": "2203040",
    "end": "2209520"
  },
  {
    "text": "something like this you know we all start when we were learning about data structures the first thing you learn",
    "start": "2209520",
    "end": "2216150"
  },
  {
    "text": "about binary trees is that there are three ways to at least three ways well",
    "start": "2216150",
    "end": "2221820"
  },
  {
    "text": "with names that we can iterate over them we have in order in order preorder and",
    "start": "2221820",
    "end": "2228060"
  },
  {
    "text": "postorder and basically they were the way they what they do is they decide",
    "start": "2228060",
    "end": "2233100"
  },
  {
    "text": "whether we're going to print the left the left child first then the root and the right and pre-order is the route",
    "start": "2233100",
    "end": "2239580"
  },
  {
    "text": "left and right and postorder would be the left word important the way we implement them is with recursion so we",
    "start": "2239580",
    "end": "2246000"
  },
  {
    "text": "have a twin node which has some members of the actual value and we can create",
    "start": "2246000",
    "end": "2252390"
  },
  {
    "text": "three methods which are co-routines okay and say I'm looking at in order and in order",
    "start": "2252390",
    "end": "2260380"
  },
  {
    "text": "checks whether we have a left child if we have a left child we're going to iterate over all of the values of the",
    "start": "2260380",
    "end": "2268390"
  },
  {
    "text": "we're going to I'm going to call the recursively call in order over the child",
    "start": "2268390",
    "end": "2273849"
  },
  {
    "text": "the left child and iterate over all the values from that left side coulding them",
    "start": "2273849",
    "end": "2280170"
  },
  {
    "text": "externally and then co Eve the actual value of the node and then again on the",
    "start": "2280170",
    "end": "2285250"
  },
  {
    "text": "right side and pre-order is basically the same type of code only with a different with the preorder and",
    "start": "2285250",
    "end": "2291039"
  },
  {
    "text": "postorder would be the same and we can create another function called order",
    "start": "2291039",
    "end": "2296109"
  },
  {
    "text": "which takes the type of order we want to provide and then use let's say a switch",
    "start": "2296109",
    "end": "2302140"
  },
  {
    "text": "to return the actual generator of the method so what we're saying here we're",
    "start": "2302140",
    "end": "2307660"
  },
  {
    "text": "saying three methods which are co-routines and actually order is returning the",
    "start": "2307660",
    "end": "2313510"
  },
  {
    "text": "return type of the core routine but it's not itself according because it's just a regular method does that make sense yeah",
    "start": "2313510",
    "end": "2323039"
  },
  {
    "text": "and the way we use it basically we can just call the order within order and it would print out the values but there's a",
    "start": "2323039",
    "end": "2333250"
  },
  {
    "text": "nice cool thing in in CPP coral the library for Miss Baker he has something",
    "start": "2333250",
    "end": "2339369"
  },
  {
    "text": "called a recursive generator and it's",
    "start": "2339369",
    "end": "2344559"
  },
  {
    "text": "very similar to the general to the s to the generator we saw before except that it's designed to be more efficient in",
    "start": "2344559",
    "end": "2349750"
  },
  {
    "text": "yielding elements of a nested sequence because in addition to being able to foil the value of type T you can also",
    "start": "2349750",
    "end": "2356769"
  },
  {
    "text": "call in the value of the recursive iterator itself and in that case all the elements of the a lead generator are",
    "start": "2356769",
    "end": "2363039"
  },
  {
    "text": "yielded as elements of the current generator and then the code of let's say in order looks like this if left cohered",
    "start": "2363039",
    "end": "2370059"
  },
  {
    "text": "left in order co involve if right code right I think this is probably the most succinct way you could write such code",
    "start": "2370059",
    "end": "2378339"
  },
  {
    "text": "this is totally transparent how like if you go and read the I don't know the",
    "start": "2378339",
    "end": "2385559"
  },
  {
    "text": "introduction to algorithms and reading about preorder and postorder this is probably even sure",
    "start": "2385559",
    "end": "2390880"
  },
  {
    "text": "than pseudocode and I think this is beautiful this is really super awesome can't get much much simpler than this",
    "start": "2390880",
    "end": "2400920"
  },
  {
    "text": "the generator is recursive is it possible to hide that because it's",
    "start": "2408210",
    "end": "2413350"
  },
  {
    "text": "the recursion itself is sort of an implementation detail I guess from the",
    "start": "2413350",
    "end": "2421270"
  },
  {
    "text": "users perspective you just want to I'm",
    "start": "2421270",
    "end": "2429520"
  },
  {
    "text": "not trying to send the question I was just wondering about the exposing the",
    "start": "2429520",
    "end": "2436830"
  },
  {
    "text": "recursiveness well well well actually",
    "start": "2436830",
    "end": "2443260"
  },
  {
    "text": "here I told you I'm cheating well actually I'm not Valjean is s to the experimental generator right so I'm",
    "start": "2443260",
    "end": "2449350"
  },
  {
    "text": "explicitly stating that this is a generator and here I'm explicitly saying it's another type it's another type well",
    "start": "2449350",
    "end": "2460570"
  },
  {
    "text": "it's an a it's the name of the type I'm just using that the name was just wondering if it was possible to to not",
    "start": "2460570",
    "end": "2466480"
  },
  {
    "text": "expose the I'm not well the diversity of",
    "start": "2466480",
    "end": "2480700"
  },
  {
    "text": "course is just in the in the name of the type right the fact that the function is recursive is an implementation detail",
    "start": "2480700",
    "end": "2487090"
  },
  {
    "text": "but I think you know maybe he could have you might name this type as self",
    "start": "2487090",
    "end": "2494920"
  },
  {
    "text": "fielding generator or something along those lines right so I think we will",
    "start": "2494920",
    "end": "2501100"
  },
  {
    "text": "touch a little bit about that later if we have time okay okay so one of the you know Co routines",
    "start": "2501100",
    "end": "2513910"
  },
  {
    "text": "are rather new and they're not perfect yet they haven't gone into delay well they'll be in the language and they",
    "start": "2513910",
    "end": "2520270"
  },
  {
    "text": "still have a few more months until 2020 so I'm going talk a little bit about pitfalls of",
    "start": "2520270",
    "end": "2527200"
  },
  {
    "text": "using coroutines and the first one is called dangling",
    "start": "2527200",
    "end": "2533020"
  },
  {
    "start": "2530000",
    "end": "2530000"
  },
  {
    "text": "references so I think curtains are super cool but let's look at this Enochian",
    "start": "2533020",
    "end": "2538710"
  },
  {
    "text": "looking code from it's from a blog this",
    "start": "2538710",
    "end": "2544180"
  },
  {
    "text": "one from Arturo is called blog post but it's been discussed a lot on under c++",
    "start": "2544180",
    "end": "2550840"
  },
  {
    "text": "slack and the problem of dangling references are they go way deeper than this one this code looks pretty much",
    "start": "2550840",
    "end": "2559300"
  },
  {
    "text": "harmless basically we're we call we have a function called explode it takes a",
    "start": "2559300",
    "end": "2564870"
  },
  {
    "text": "string and we turn the generator and then it just iterates of yields doing",
    "start": "2564870",
    "end": "2570250"
  },
  {
    "text": "all of the values of the string and externally we take all the values and just print them out and the thing is",
    "start": "2570250",
    "end": "2577510"
  },
  {
    "text": "that this doesn't this explode this doesn't work because we have a problem that we can't actually see in the code",
    "start": "2577510",
    "end": "2584440"
  },
  {
    "text": "so the problem is transparent similar to",
    "start": "2584440",
    "end": "2592410"
  },
  {
    "text": "I'll show that in a minute I'll explain basically we're we have",
    "start": "2599190",
    "end": "2605380"
  },
  {
    "text": "we're passing a literal string literal here which creates a temporary still a",
    "start": "2605380",
    "end": "2610990"
  },
  {
    "text": "student string which is passed to a to the constructor of explode however this",
    "start": "2610990",
    "end": "2618040"
  },
  {
    "text": "temporary string actually remember that the generator itself doesn't actually",
    "start": "2618040",
    "end": "2623230"
  },
  {
    "text": "start running until begin is called and by that time this temporary doesn't",
    "start": "2623230",
    "end": "2630190"
  },
  {
    "text": "exist and and actually the answer is not specific to co-routines this is I took this today this more well an hour ago",
    "start": "2630190",
    "end": "2637330"
  },
  {
    "text": "from cpp reference if you go to range for to the regular page about range for",
    "start": "2637330",
    "end": "2642910"
  },
  {
    "text": "loops and range for loops get basically",
    "start": "2642910",
    "end": "2648160"
  },
  {
    "text": "there is a code generation by the compiler into this type of statement and there is a special another saying",
    "start": "2648160",
    "end": "2655120"
  },
  {
    "text": "temporary range a expression if range expression returns it's lifetime is extending it until the",
    "start": "2655120",
    "end": "2661089"
  },
  {
    "text": "end of the loop so this is what underscore underscore ranges it extends the lifetime of the temporary as",
    "start": "2661089",
    "end": "2669750"
  },
  {
    "text": "indicated by binding to the for doing reference underscore underscore range but beware that the lifetime of any",
    "start": "2669750",
    "end": "2675640"
  },
  {
    "text": "temper within range expression is not extended so this is the general problem which becomes significantly worse with",
    "start": "2675640",
    "end": "2683410"
  },
  {
    "text": "coroutines and this is in this blog post you can see this is like it's called the boring example okay this is like the",
    "start": "2683410",
    "end": "2688869"
  },
  {
    "text": "most basic example and there are many many other examples where co-routines",
    "start": "2688869",
    "end": "2695619"
  },
  {
    "text": "can have dangling references I've actually hit one just last week where",
    "start": "2695619",
    "end": "2702900"
  },
  {
    "text": "because generally the tip is take court in arguments by value so don't don't use references until unless you you are",
    "start": "2702900",
    "end": "2709900"
  },
  {
    "text": "certain that whatever you're passing by reference is not temporary and will outlive the court in itself okay",
    "start": "2709900",
    "end": "2717839"
  },
  {
    "text": "however I noticed that even when you're passing by value let's say I have some",
    "start": "2717839",
    "end": "2723599"
  },
  {
    "text": "variable that I'm passing to a local to co-routine that'll be fine but if I'm sorry to alarm decoding if I'm passing",
    "start": "2723599",
    "end": "2730660"
  },
  {
    "text": "it as an argument by value it works fine if I'm capturing it in a copy capture I",
    "start": "2730660",
    "end": "2736450"
  },
  {
    "text": "get a dangling reference okay so there are many many still many pitfalls and",
    "start": "2736450",
    "end": "2741519"
  },
  {
    "text": "many corners because the again the temporaries are created only later and",
    "start": "2741519",
    "end": "2747720"
  },
  {
    "text": "this is very serious drop so try to keep",
    "start": "2747720",
    "end": "2752950"
  },
  {
    "text": "all of the object you're passing either pass them by copy or make sure they outlived the co-routine yeah oh and by",
    "start": "2752950",
    "end": "2764200"
  },
  {
    "text": "the way one of the ways to get over this is something that we have since c plus 120 which is in its statement for for",
    "start": "2764200",
    "end": "2771789"
  },
  {
    "text": "loops so we can see the example on the bottom again this is not specific to curtains so this properties only somehow make it",
    "start": "2771789",
    "end": "2779410"
  },
  {
    "text": "a little bit more dangerous because it's hiding what is actually happening and things happen beyond the point where",
    "start": "2779410",
    "end": "2789240"
  },
  {
    "text": "just how much so hopefully we get to the",
    "start": "2791119",
    "end": "2802950"
  },
  {
    "text": "initial station right so another problem",
    "start": "2802950",
    "end": "2808109"
  },
  {
    "start": "2803000",
    "end": "2803000"
  },
  {
    "text": "is I don't know if it has the better name I just call it decapitation and it",
    "start": "2808109",
    "end": "2814589"
  },
  {
    "text": "has to do with the fact that quarantines don't actually start execution until you call begin so when a coroutine returns",
    "start": "2814589",
    "end": "2822809"
  },
  {
    "text": "an object of some generator type that generator type is kind of in a state",
    "start": "2822809",
    "end": "2829530"
  },
  {
    "text": "where it hasn't begun execution it it's initially suspended and we have to be",
    "start": "2829530",
    "end": "2834960"
  },
  {
    "text": "very very careful what we're actually going to do with this particular object",
    "start": "2834960",
    "end": "2840329"
  },
  {
    "text": "because let's say we want to create a generator and indicate that it's empty",
    "start": "2840329",
    "end": "2848369"
  },
  {
    "text": "maybe maybe indicate the creation error by creating an empty iterator so the",
    "start": "2848369",
    "end": "2856079"
  },
  {
    "text": "calling function is going to check if the this generator is empty and maybe then try to generate a different to",
    "start": "2856079",
    "end": "2861720"
  },
  {
    "text": "create a different generator however by the fact that we were checking that begin and end are equal we already",
    "start": "2861720",
    "end": "2869099"
  },
  {
    "text": "called begin and we began the execution and now if we do reference data later we already have add value so in the case",
    "start": "2869099",
    "end": "2875220"
  },
  {
    "text": "where the iterator isn't empty and we want to pass it on let's say it's a factory function the user outside our",
    "start": "2875220",
    "end": "2881130"
  },
  {
    "text": "function is actually going to call begin again and the reference it in and in most cases we'll just get it will skip",
    "start": "2881130",
    "end": "2888210"
  },
  {
    "text": "the first value will decapitate the sequence by by not saying the the first value because yes execution by the",
    "start": "2888210",
    "end": "2909119"
  },
  {
    "text": "decapitation well this is decapitation by execution so we remember be very",
    "start": "2909119",
    "end": "2919049"
  },
  {
    "text": "careful when you're handling initially suspended code especially if we have multiple layers of functions",
    "start": "2919049",
    "end": "2924900"
  },
  {
    "text": "like factory functions that are generating them I think about them it's a little bit like moved from object",
    "start": "2924900",
    "end": "2931499"
  },
  {
    "text": "where once you moved the object you have something that you have to be extremely careful to limit what the operations",
    "start": "2931499",
    "end": "2938700"
  },
  {
    "text": "that you're performing on it and of course generators you have to move them and not you cannot I should not copy",
    "start": "2938700",
    "end": "2944009"
  },
  {
    "text": "them I will make a caveat that since we",
    "start": "2944009",
    "end": "2949140"
  },
  {
    "text": "don't actually have a standard court in library support library you could write generator types that have them potent",
    "start": "2949140",
    "end": "2958130"
  },
  {
    "text": "idempotent begin functions so I pathetically some types could have that",
    "start": "2958130",
    "end": "2963240"
  },
  {
    "text": "and then you might be able to get around this I haven't seen this in any of the",
    "start": "2963240",
    "end": "2969480"
  },
  {
    "text": "implementations so again this is a don't count on it and so just be careful when",
    "start": "2969480",
    "end": "2975180"
  },
  {
    "text": "passing them around right so as I said",
    "start": "2975180",
    "end": "2981349"
  },
  {
    "text": "core teens are not perfect they're very new and we saw examples of core teens",
    "start": "2981349",
    "end": "2990150"
  },
  {
    "text": "that are templates we saw examples of qualities that are methods with are examples of core teens that are actually",
    "start": "2990150",
    "end": "2996619"
  },
  {
    "text": "lambdas however they cannot have returned auto return types or concepts",
    "start": "2996619",
    "end": "3003680"
  },
  {
    "text": "and they can't be constant X per at the moment you can't make constructors go",
    "start": "3003680",
    "end": "3009739"
  },
  {
    "text": "routine destructors or actually the main function although I don't even know what",
    "start": "3009739",
    "end": "3014809"
  },
  {
    "text": "that would mean but I'm sure somebody will find a use case but again you know if you find a use case then and don't",
    "start": "3014809",
    "end": "3022009"
  },
  {
    "text": "complain to me okay I do suspect that some of these limitations will be",
    "start": "3022009",
    "end": "3029289"
  },
  {
    "text": "removed may be constructs / I don't know because just like lambdas became",
    "start": "3029289",
    "end": "3034670"
  },
  {
    "text": "incrementally more and more powerful from 11 to 14 to 17 to 20 we'd probably",
    "start": "3034670",
    "end": "3040039"
  },
  {
    "text": "see that kind of progression and of course I'm super hopeful that we will be",
    "start": "3040039",
    "end": "3045319"
  },
  {
    "text": "at one point getting a standard support library there is a problem of quality of",
    "start": "3045319",
    "end": "3054980"
  },
  {
    "text": "implementation of libraries so for example the Microsoft Microsoft version of generator doesn't",
    "start": "3054980",
    "end": "3061250"
  },
  {
    "text": "support reference type of tea but CP pakora does you could get around it with",
    "start": "3061250",
    "end": "3068330"
  },
  {
    "text": "STD ref but still it's not exactly the same code and it's not even it's not",
    "start": "3068330",
    "end": "3074690"
  },
  {
    "text": "something you can complain about because there is no definition of a library so everyone just does whatever they think",
    "start": "3074690",
    "end": "3081500"
  },
  {
    "text": "they deem possible or whatever their experiments bring them to do another",
    "start": "3081500",
    "end": "3087020"
  },
  {
    "text": "problem is that I didn't mention this at the beginning because it's kind of confusing it's the fact that a",
    "start": "3087020",
    "end": "3093470"
  },
  {
    "text": "quarantine must save its internal states somewhere and this is basically it's",
    "start": "3093470",
    "end": "3099560"
  },
  {
    "text": "called the quarantine stuck frame because the stuck frame is external to the calling code stuck for it and in",
    "start": "3099560",
    "end": "3106940"
  },
  {
    "text": "general this is allocated on the heap however especially in the case of synchronous code in the generators it's",
    "start": "3106940",
    "end": "3113450"
  },
  {
    "text": "very often that there is a compiler optimization that actually brings the correcting stuck for him back to the",
    "start": "3113450",
    "end": "3118970"
  },
  {
    "text": "user stack frame but again and that's where it gets confusing because there are stuck full coroutines which is what",
    "start": "3118970",
    "end": "3124550"
  },
  {
    "text": "I just mentioned although there may be allocated on the heap and sort of stuck less coatings and then you have stuck",
    "start": "3124550",
    "end": "3130280"
  },
  {
    "text": "full coroutines which are what the ones using the cpu support for fibers so",
    "start": "3130280",
    "end": "3135380"
  },
  {
    "text": "there's a lot of confusing concepts here and the compiler optimization levels",
    "start": "3135380",
    "end": "3142580"
  },
  {
    "text": "vary significantly between different implementations so I think although a",
    "start": "3142580",
    "end": "3148250"
  },
  {
    "text": "lot of the quarantine proposal came from Microsoft they were working the compiler was mostly working and proof proving",
    "start": "3148250",
    "end": "3155390"
  },
  {
    "text": "that this is doable and does the right thing there BlackBerry at least the beginning was significantly sorry",
    "start": "3155390",
    "end": "3161000"
  },
  {
    "text": "another lab with the compiler did is significantly worse job in the Clank version so but I do believe that these",
    "start": "3161000",
    "end": "3168320"
  },
  {
    "text": "discrepancies will disgrace and we will see code general yes",
    "start": "3168320",
    "end": "3174190"
  },
  {
    "text": "you mean like I think it will be exactly",
    "start": "3184550",
    "end": "3196800"
  },
  {
    "text": "like the regular ranges or any an iterator object it should be at the tree",
    "start": "3196800",
    "end": "3214740"
  },
  {
    "text": "or the three and in direct call to to an",
    "start": "3214740",
    "end": "3230280"
  },
  {
    "text": "either call to whom you mean in this",
    "start": "3230280",
    "end": "3237480"
  },
  {
    "text": "function this is this is just a constructor call when you're moving your",
    "start": "3237480",
    "end": "3245790"
  },
  {
    "text": "lighting it out know why it's the same time I didn't look at the compiled code",
    "start": "3245790",
    "end": "3266750"
  },
  {
    "text": "because I only tried this on one",
    "start": "3266750",
    "end": "3271770"
  },
  {
    "text": "compiler and I didn't have time to actually go into checking but this is I this is actually the point I was making",
    "start": "3271770",
    "end": "3277170"
  },
  {
    "text": "the last point I was trying to make here is that there are a lot of quality of implementation issues so I didn't even",
    "start": "3277170",
    "end": "3284460"
  },
  {
    "text": "want to try to go into that yet because we will see better and better optimizations and compiler religions of",
    "start": "3284460",
    "end": "3292230"
  },
  {
    "text": "all this extraneous code so it's it's certainly a valid concern and you know I",
    "start": "3292230",
    "end": "3298080"
  },
  {
    "text": "wouldn't go running and using coroutines blindly in production code before testing so always measure measure",
    "start": "3298080",
    "end": "3304980"
  },
  {
    "text": "measure when did I hear that today yeah right so a little bit of",
    "start": "3304980",
    "end": "3312160"
  },
  {
    "start": "3310000",
    "end": "3310000"
  },
  {
    "text": "resources and then I'll take some questions there is a massive list of courting resources with videos articles",
    "start": "3312160",
    "end": "3317760"
  },
  {
    "text": "proposals by Matt PD he's very proficient archivist CBP reference has a",
    "start": "3317760",
    "end": "3326170"
  },
  {
    "text": "nice page about curtains the curtains slack channel and on disciplines of slack is very very active and you can",
    "start": "3326170",
    "end": "3331600"
  },
  {
    "text": "basically talk to anyone who's interested in curtains the people are writing the proverb the proposals the",
    "start": "3331600",
    "end": "3336760"
  },
  {
    "text": "people are writing the compilers they're all there an extended version of this",
    "start": "3336760",
    "end": "3341890"
  },
  {
    "text": "talk will be published as blog post on my blog probably in a few weeks maybe I",
    "start": "3341890",
    "end": "3349240"
  },
  {
    "text": "don't know before CP pecan or after silicon yeah and that's it so I'll take",
    "start": "3349240",
    "end": "3354910"
  },
  {
    "text": "some questions yes",
    "start": "3354910",
    "end": "3367140"
  }
]