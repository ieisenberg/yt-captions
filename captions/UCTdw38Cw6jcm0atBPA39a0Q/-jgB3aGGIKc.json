[
  {
    "text": "in his best-selling 2014 book Homo sapiens Yuval Noir Harari discusses a",
    "start": "2600",
    "end": "10679"
  },
  {
    "text": "history of humankind and one of the most important ideas at the core of this book is the",
    "start": "10679",
    "end": "16480"
  },
  {
    "text": "importance of words and stories the words and stories we use as humans are",
    "start": "16480",
    "end": "21840"
  },
  {
    "text": "the master key that unlocked our potential as a species whether that's your religion your nationality or the",
    "start": "21840",
    "end": "28400"
  },
  {
    "text": "company you work for and the mission company has our ability to get each other behind an idea is fundamental to",
    "start": "28400",
    "end": "36280"
  },
  {
    "text": "what has made us as successful as we are now I know some of you are furiously checking your agenda now wondering are",
    "start": "36280",
    "end": "41680"
  },
  {
    "text": "you actually in the right talk and this is going to be a talk about event div an architecture I promise and there's a",
    "start": "41680",
    "end": "47280"
  },
  {
    "text": "link here and the link is that an event driven system lets you tell the story of",
    "start": "47280",
    "end": "54000"
  },
  {
    "text": "your business through its technical implementation the language of your",
    "start": "54000",
    "end": "59440"
  },
  {
    "text": "business is what drives its functionality it's fundamentally a",
    "start": "59440",
    "end": "64838"
  },
  {
    "text": "communication pattern whether that's the communication between two services are",
    "start": "64839",
    "end": "70000"
  },
  {
    "text": "the human communication when you're talking to each other about what it is that your system does and that's what",
    "start": "70000",
    "end": "76640"
  },
  {
    "text": "you're going to learn about in this talk you're here to learn the secrets of event div architecture some of the patterns and practices and some real",
    "start": "76640",
    "end": "83360"
  },
  {
    "text": "tangible and practical things you can take away to build event driven systems",
    "start": "83360",
    "end": "88520"
  },
  {
    "text": "yourselves I'm James East I'm a senior Cloud architect at AWS and for any of",
    "start": "88520",
    "end": "94000"
  },
  {
    "text": "you not working with AWS don't worry this is not going to be death by AWS service icon this is a really simple",
    "start": "94000",
    "end": "100560"
  },
  {
    "text": "talk that's simply about boxes and simply about lines yeah it's one of",
    "start": "100560",
    "end": "106159"
  },
  {
    "text": "those kind of talks and I want to start by being really really honest with you all",
    "start": "106159",
    "end": "111360"
  },
  {
    "text": "actually I've built Event Systems in the past and I've got them horribly horribly",
    "start": "111360",
    "end": "116799"
  },
  {
    "text": "wrong like really badly wrong and that might feel like a really odd way of starting a talk because now I'm up here",
    "start": "116799",
    "end": "122439"
  },
  {
    "text": "on stage telling you all how bad I am at building Event Systems but how many of you have ever",
    "start": "122439",
    "end": "128200"
  },
  {
    "text": "built a system that has gone wrong that has failed it's a safe space you can put your hand up okay cool almost everybody",
    "start": "128200",
    "end": "135640"
  },
  {
    "text": "and how much did you learn from that failure that thing that went wrong because we learned so much more in",
    "start": "135640",
    "end": "141840"
  },
  {
    "text": "Failure than we do in success one of my old mentors always",
    "start": "141840",
    "end": "147000"
  },
  {
    "text": "told me this all the time we used to literally go into sales meetings with customers and say we are going to do this better than you can because we've",
    "start": "147000",
    "end": "153280"
  },
  {
    "text": "got it wrong more times than you have so that's what I want to share with you today some of the things that I've",
    "start": "153280",
    "end": "158720"
  },
  {
    "text": "learned building a renter system so that you don't have to make the same mistakes that I do now there's one thing I love talking",
    "start": "158720",
    "end": "165360"
  },
  {
    "text": "about almost as much as serverless and event driven systems and that is pizza",
    "start": "165360",
    "end": "171720"
  },
  {
    "text": "how many of you here love pizza by the way okay anyone with your hand down",
    "start": "171720",
    "end": "177040"
  },
  {
    "text": "really really so for the rest of this talk you're all now going to be developers as",
    "start": "177040",
    "end": "183560"
  },
  {
    "text": "part of a completely fictional pizza delivery company called plant-based pizza and you're going to take your",
    "start": "183560",
    "end": "189519"
  },
  {
    "text": "existing microservices architecture and you're going to make it event driven and this is a really high level look at what",
    "start": "189519",
    "end": "195720"
  },
  {
    "text": "your system does today you've got this core order processing service this is the core domain this is the thing that",
    "start": "195720",
    "end": "202879"
  },
  {
    "text": "holds all the business logic what of course allows people to place orders and get piz delivered to them but you've got",
    "start": "202879",
    "end": "208799"
  },
  {
    "text": "all these other ancillary services around the outside and all these things have a hard dependency on the order",
    "start": "208799",
    "end": "214760"
  },
  {
    "text": "service and now you need to add a loyalty Point Service as well and to do that of course you need to go and make",
    "start": "214760",
    "end": "220599"
  },
  {
    "text": "changes back to your audit processing service this of course is a form of",
    "start": "220599",
    "end": "226159"
  },
  {
    "text": "coupling all of these services are coupled together in some way to add",
    "start": "226159",
    "end": "231560"
  },
  {
    "text": "loyalty points in the system the order processing service need to make a call to the Loyalty Point service and say here can you add these loyalty points",
    "start": "231560",
    "end": "238480"
  },
  {
    "text": "I'm sure many of you will be familiar with the general rule of thumbing software which is you want to aim for low coupling and high",
    "start": "238480",
    "end": "246319"
  },
  {
    "text": "cohesion and cohesion is a relatively straightforward one you've Al almost kind of solved that already cohesion is",
    "start": "246319",
    "end": "251959"
  },
  {
    "text": "the idea that things that change together should live together and you're already building microservices you've",
    "start": "251959",
    "end": "257400"
  },
  {
    "text": "already got these really nicely contained pieces of business functionality that are split up by",
    "start": "257400",
    "end": "262759"
  },
  {
    "text": "domain coupling is a little bit more difficult though and that's because",
    "start": "262759",
    "end": "268360"
  },
  {
    "text": "coupling is a lot more nuanced there's lots and lots of different types of coupling whether that be technology",
    "start": "268360",
    "end": "274759"
  },
  {
    "text": "coupling are you using net are you using rust are you using Java am I allowed to say Java say that yeah there's location",
    "start": "274759",
    "end": "282560"
  },
  {
    "text": "coupling where is a service that I need to talk to what is the location of it and you've got semantic and data format",
    "start": "282560",
    "end": "289120"
  },
  {
    "text": "coupling are you using binary XML Json how do you handle null values are you using camel case snake case these are",
    "start": "289120",
    "end": "296120"
  },
  {
    "text": "all different types of coupling and it's coupling in a HTT based HTTP based",
    "start": "296120",
    "end": "302160"
  },
  {
    "text": "microservice architecture that can start to cause you issues because primarily you're dealing with runtime and location",
    "start": "302160",
    "end": "308639"
  },
  {
    "text": "coupling at the point your services run you need to know the location of all the",
    "start": "308639",
    "end": "314360"
  },
  {
    "text": "other services that you need to communicate with and not only the location you need to hope that the service you want to talk to is actually",
    "start": "314360",
    "end": "320759"
  },
  {
    "text": "active at the point you need to talk to it coupling isn't all bad though if you",
    "start": "320759",
    "end": "326240"
  },
  {
    "text": "completely decoupled all of your services then no meaningful work would really get done and there's an",
    "start": "326240",
    "end": "332680"
  },
  {
    "text": "appropriate level of coupling to aim for and I love this quote from Gregor if you're not familiar with Gregor's work",
    "start": "332680",
    "end": "337960"
  },
  {
    "text": "Gregor is the author of Enterprise Integration patterns probably one of my favorite books on software actually and",
    "start": "337960",
    "end": "343960"
  },
  {
    "text": "the appropriate level of con coupling you want to aim for is related to the amount of control you have over the end",
    "start": "343960",
    "end": "351039"
  },
  {
    "text": "points and what I think Gregor means here is that if you're a team who are owning maybe two or three different",
    "start": "351039",
    "end": "356720"
  },
  {
    "text": "microservices coupling them Services together tightly might not necessarily cause you as much of a problem because",
    "start": "356720",
    "end": "363120"
  },
  {
    "text": "you own the release Cycles you own the slas you own the schema of these",
    "start": "363120",
    "end": "368639"
  },
  {
    "text": "apis but once you start integrating with a system outside of your control you want to try and reduce that",
    "start": "368639",
    "end": "375319"
  },
  {
    "text": "coupling as much as possible and that might be another team inside your organization that might be a third party API because now you don't control the",
    "start": "375319",
    "end": "383000"
  },
  {
    "text": "release Cycles you don't control the slas you don't control the up",
    "start": "383000",
    "end": "388080"
  },
  {
    "text": "time so if there the challenges that coupling gives us why do we actually want to be event driven what benefit",
    "start": "388080",
    "end": "394960"
  },
  {
    "text": "does that give you all as of right now you need to add this new loyalty Point",
    "start": "394960",
    "end": "400360"
  },
  {
    "text": "service and to do that you need to make changes to the audit processing service because you need the audit processing",
    "start": "400360",
    "end": "405759"
  },
  {
    "text": "service to make that call to tell the service to add the loyality points that means you need to get in the into their",
    "start": "405759",
    "end": "411720"
  },
  {
    "text": "backlog into their Sprint planning and actually you practice safe as an organization so being really agile means",
    "start": "411720",
    "end": "417639"
  },
  {
    "text": "you've got to wait three months for the next X pii planning yes we've all been there doing that so now you need to go",
    "start": "417639",
    "end": "424000"
  },
  {
    "text": "make these changes you need to go make these changes this service actually you don't control but you need it to actually get any meaningful work",
    "start": "424000",
    "end": "430479"
  },
  {
    "text": "done and when you actually think about that is it actually the right thing to",
    "start": "430479",
    "end": "436199"
  },
  {
    "text": "do should the order processing service actually care about the fact people are",
    "start": "436199",
    "end": "441960"
  },
  {
    "text": "collecting loaly points maybe they do maybe they",
    "start": "441960",
    "end": "447199"
  },
  {
    "text": "don't there's another challenge here and that challenges if the Loyalty Point service was to fail and you have this",
    "start": "447199",
    "end": "454440"
  },
  {
    "text": "synchronous coupling and this loyalty Point service is isn't something that's on the core domain it's not something",
    "start": "454440",
    "end": "459960"
  },
  {
    "text": "that means people can or can't get their pizzas but if that was to fail there's the potential this can have the knock on",
    "start": "459960",
    "end": "466400"
  },
  {
    "text": "effect of also causing your a processing service to fail so now a service not on the critical path has caused the failure",
    "start": "466400",
    "end": "474120"
  },
  {
    "text": "to something on your critical path now I realize I'm oversimplifying this massively there are ways you can build",
    "start": "474120",
    "end": "481080"
  },
  {
    "text": "synchronous systems that handle these problems circuit breakers exponential backoff proper error",
    "start": "481080",
    "end": "486960"
  },
  {
    "text": "handling just because you're building a synchronous microservices system doesn't necessarily mean your system is going to",
    "start": "486960",
    "end": "493039"
  },
  {
    "text": "be unstable what it does mean though is that you're responsible for the",
    "start": "493039",
    "end": "498720"
  },
  {
    "text": "constraints that another system has you need to work around the constraints that",
    "start": "498720",
    "end": "503759"
  },
  {
    "text": "the system you're calling imposes upon you so like I said we're going to take this microservices architecture now and",
    "start": "503759",
    "end": "509680"
  },
  {
    "text": "we're going to make it event driven but before we do that I just want to level set to make sure we're all on the same",
    "start": "509680",
    "end": "514800"
  },
  {
    "text": "page with a little bit of theory and then we'll get back into the Practical is anyone here working on an event",
    "start": "514800",
    "end": "519839"
  },
  {
    "text": "driven system today or was built one in the past okay quite a few hands that's good let's level set then just to make",
    "start": "519839",
    "end": "526560"
  },
  {
    "text": "sure we all are agreed on what these terms mean that's where we are so let's start",
    "start": "526560",
    "end": "533839"
  },
  {
    "text": "with an event what is an event if it's events that are driving our system what actually is an an event and an event is",
    "start": "533839",
    "end": "542200"
  },
  {
    "text": "an immutable fact it's something that's happened in the past it's something that cannot be changed it's simply a",
    "start": "542200",
    "end": "549040"
  },
  {
    "text": "notification that something has happened somewhere else if you imagine you're here in Oslo it's the middle of winter",
    "start": "549040",
    "end": "555160"
  },
  {
    "text": "it's dark a lot and you need to get some light into the room that you're in you need to do something in the room so to",
    "start": "555160",
    "end": "561720"
  },
  {
    "text": "do that you're going to hit the light switch and that's going to raise a light switched on event the light is now on",
    "start": "561720",
    "end": "569120"
  },
  {
    "text": "that irrefutable it can't be changed you can't unswitched on a light all you can",
    "start": "569120",
    "end": "575320"
  },
  {
    "text": "do is hit the light switch again and that will raise a light Switched Off event the light switched on the light",
    "start": "575320",
    "end": "581800"
  },
  {
    "text": "switched off these things are irrefutable they've happened they cannot be changed so if that's an event what does",
    "start": "581800",
    "end": "589560"
  },
  {
    "text": "it mean to be event driven and I actually think sometimes there's some terms that can get a little bit confused",
    "start": "589560",
    "end": "596200"
  },
  {
    "text": "here and that's the difference between being event driven and event",
    "start": "596200",
    "end": "601600"
  },
  {
    "text": "based both types of systems both event-driven systems and event based systems are triggering functionality",
    "start": "601600",
    "end": "607600"
  },
  {
    "text": "with events the key difference with an event driven system is that it's the business",
    "start": "607600",
    "end": "614120"
  },
  {
    "text": "events that are triggering business functionality the language of your system is fundamental to the",
    "start": "614120",
    "end": "621320"
  },
  {
    "text": "functionality that happens in that system of course events aren't a new thing in software I started out in net",
    "start": "621320",
    "end": "627880"
  },
  {
    "text": "building windows forms applications button clicked Mouse hovered window",
    "start": "627880",
    "end": "633600"
  },
  {
    "text": "resized and then some functionality happened off the back of that these are all examples of events and even in more",
    "start": "633600",
    "end": "639760"
  },
  {
    "text": "modern ways of Building Systems if I upload a file to an Amazon S3 book",
    "start": "639760",
    "end": "645000"
  },
  {
    "text": "bucket there's your first AWS service name if you keep in count that will raise an S3 object created event and I",
    "start": "645000",
    "end": "652360"
  },
  {
    "text": "can choose to react to that if I want to but these are all examples of technical events this is an event based system an",
    "start": "652360",
    "end": "658880"
  },
  {
    "text": "event Ren system is going to have events that look a little bit something like this order confirmed Pizza boxed staff",
    "start": "658880",
    "end": "666639"
  },
  {
    "text": "member clocked in you could look at two businesses in the exact same domain and they would",
    "start": "666639",
    "end": "673320"
  },
  {
    "text": "probably have a completely different set of business events driving their functionality because the language of",
    "start": "673320",
    "end": "678800"
  },
  {
    "text": "these two businesses are going to be different but they're probably all clicking buttons uploading files and",
    "start": "678800",
    "end": "684680"
  },
  {
    "text": "resizing windows and to come back to the same Point again an event driven architecture let you tell the story of your business",
    "start": "684680",
    "end": "692880"
  },
  {
    "text": "through its technical implementation another thing you probably hear as you start to learn more",
    "start": "692880",
    "end": "698360"
  },
  {
    "text": "about event div systems is that events are first class citizens in your",
    "start": "698360",
    "end": "704040"
  },
  {
    "text": "architecture what does that even mean what does it mean to be a first class citizen in a system how many of you are",
    "start": "704040",
    "end": "710519"
  },
  {
    "text": "familiar with the idea of API first design okay a few hands that's good the",
    "start": "710519",
    "end": "716480"
  },
  {
    "text": "idea of API first design is that as you start to build an API or integrate systems together the first thing you do",
    "start": "716480",
    "end": "722480"
  },
  {
    "text": "is design the API before you write a single line of code you agree on the contract that these two systems are",
    "start": "722480",
    "end": "728639"
  },
  {
    "text": "going to use to communicate with each other and when you're building an event driven system your events that you raise",
    "start": "728639",
    "end": "734199"
  },
  {
    "text": "are your API so therefore to make Events first class citizens you should start to",
    "start": "734199",
    "end": "741279"
  },
  {
    "text": "practice event first design your event schema is the contract",
    "start": "741279",
    "end": "748000"
  },
  {
    "text": "you have between your services it's the language that your services use to talk to each other it's the language of your",
    "start": "748000",
    "end": "754399"
  },
  {
    "text": "business that's driving the functionality and when you're thinking about events it's not as simple as just",
    "start": "754399",
    "end": "759800"
  },
  {
    "text": "flinging around events there's lots of different types of events that you're going to see it's not just these little",
    "start": "759800",
    "end": "766760"
  },
  {
    "text": "packets of Json that are kind of sent around asynchronously and actually events are",
    "start": "766760",
    "end": "772120"
  },
  {
    "text": "just one of the constructs that exist within message driven systems so let's",
    "start": "772120",
    "end": "777199"
  },
  {
    "text": "first talk about the different types of messages commonly you'll have commands you'll",
    "start": "777199",
    "end": "782399"
  },
  {
    "text": "have events and you'll have queries in any system and commands and events are",
    "start": "782399",
    "end": "788279"
  },
  {
    "text": "very similar the difference is mostly just a statement of intent am I telling",
    "start": "788279",
    "end": "793360"
  },
  {
    "text": "a system to do something or am I or am I reacting to something that happened in",
    "start": "793360",
    "end": "799639"
  },
  {
    "text": "another system and then of of course queries are one of the easiest ones a query is all about just reading some",
    "start": "799639",
    "end": "805079"
  },
  {
    "text": "data getting a specific view of the world that a given system has so you've kind of got this over",
    "start": "805079",
    "end": "811519"
  },
  {
    "text": "overarching set of messages and then with ins within events you've got different types of events primarily",
    "start": "811519",
    "end": "818600"
  },
  {
    "text": "there are two different types of events that you're going to see and the first is a notification",
    "start": "818600",
    "end": "824560"
  },
  {
    "text": "event a notification event is a really small really lightweight packet of data",
    "start": "824560",
    "end": "829959"
  },
  {
    "text": "it's simply a notification that something has happened sometimes these are known as thin",
    "start": "829959",
    "end": "835399"
  },
  {
    "text": "events and this is actually where you start as you start to bring your event of an architecture into plant-based",
    "start": "835399",
    "end": "841040"
  },
  {
    "text": "Pizza you focus on this single integration between the order service and the kitchen service so when an order confirmed event",
    "start": "841040",
    "end": "848279"
  },
  {
    "text": "gets raised by the order service that's when you know as the kitchen service you need to start preparing an order so you",
    "start": "848279",
    "end": "854199"
  },
  {
    "text": "receive this order confirmed event this notification event and you're like excellent I've got a pizza to make what is actually on this order the",
    "start": "854199",
    "end": "862880"
  },
  {
    "text": "event doesn't actually contain any contents of the order that's been placed so what you need to do now is you",
    "start": "862880",
    "end": "868920"
  },
  {
    "text": "need need to make a call back you need to reach back into the order processing service to get the details of the",
    "start": "868920",
    "end": "875360"
  },
  {
    "text": "order so you've received this really small notification event and you're going to reach back get more information",
    "start": "875360",
    "end": "880639"
  },
  {
    "text": "and actually all you've really done here is just shifted that synchronous communication around instead of the order service calling the kitchen service the kitchen service now needs to",
    "start": "880639",
    "end": "887680"
  },
  {
    "text": "call the order service so is this really any better maybe it is maybe it isn't the most subtle problem you have",
    "start": "887680",
    "end": "895560"
  },
  {
    "text": "with this though is that because you've now got these events flying around any other system in your organization can",
    "start": "895560",
    "end": "901680"
  },
  {
    "text": "subscribe to these events so maybe you add one more subscriber maybe three more",
    "start": "901680",
    "end": "906880"
  },
  {
    "text": "systems decide that they want to get that event as well they all decide to reach back and then another one and then",
    "start": "906880",
    "end": "912759"
  },
  {
    "text": "another one and then another couple and then eventually your order processing service does",
    "start": "912759",
    "end": "917920"
  },
  {
    "text": "this because you've got now a potentially infinite number of Downstream systems that are all calling",
    "start": "917920",
    "end": "923320"
  },
  {
    "text": "back all trying to get more information about these orders and you'll commonly hear when you",
    "start": "923320",
    "end": "929279"
  },
  {
    "text": "see anything about inventive in architecture services are unaware of their Downstream",
    "start": "929279",
    "end": "934639"
  },
  {
    "text": "consumers and actually I feel like this is a bit of a dangerous statement because although you're unaware of what",
    "start": "934639",
    "end": "940240"
  },
  {
    "text": "Downstream systems are going to do with your events you should be aware of them",
    "start": "940240",
    "end": "945920"
  },
  {
    "text": "because you need to handle these kind of situations where systems might need to reach back but of course you're all incredibly",
    "start": "945920",
    "end": "952560"
  },
  {
    "text": "smart developers and Architects so you think is there a better way of doing this is there a different way we can",
    "start": "952560",
    "end": "958120"
  },
  {
    "text": "handle this and that leads us on to the second type of event that you'll commonly",
    "start": "958120",
    "end": "965199"
  },
  {
    "text": "see and that is event Carriage State transfer otherwise known as a fatter",
    "start": "965199",
    "end": "971199"
  },
  {
    "text": "event so if this is the example of a notification event and as you can see it only includes the order ID this is the",
    "start": "971199",
    "end": "977959"
  },
  {
    "text": "order confirmed event if you were to take this and change this to a fatter event you'd end up with something that",
    "start": "977959",
    "end": "984079"
  },
  {
    "text": "looks a little bit like this and you'll notice now the state of the order is being carried as part of the event",
    "start": "984079",
    "end": "991120"
  },
  {
    "text": "that's being raised so now as the kitchen service you know what items are on the order you no",
    "start": "991120",
    "end": "997720"
  },
  {
    "text": "longer need to make that call back to get more information about the",
    "start": "997720",
    "end": "1002959"
  },
  {
    "text": "order so they're the two primary different types of events before we get a little bit further into the technical",
    "start": "1002959",
    "end": "1008519"
  },
  {
    "text": "details let's just first talk about the ways messages move around in an event",
    "start": "1008519",
    "end": "1013759"
  },
  {
    "text": "system an event rant system is primarily made up of three different components you've got producers or Publishers",
    "start": "1013759",
    "end": "1019880"
  },
  {
    "text": "you've got some kind of message channel in the middle a bus or a topic or a stream and then you've got a consumer or",
    "start": "1019880",
    "end": "1026038"
  },
  {
    "text": "a subscriber at the other side the primary integration pattern at work here",
    "start": "1026039",
    "end": "1031798"
  },
  {
    "text": "is the publish subscribe pattern you're publishing events and then you've got a",
    "start": "1031799",
    "end": "1037480"
  },
  {
    "text": "number of subscribers all subscribing to these events and you have different",
    "start": "1037480",
    "end": "1042839"
  },
  {
    "text": "responsibilities if you're a producer or a consumer as a producer your responsib",
    "start": "1042839",
    "end": "1048919"
  },
  {
    "text": "AB ility is to stick to that contract you agreed when you did that event first design initially you agree to try and",
    "start": "1048919",
    "end": "1055280"
  },
  {
    "text": "stick to that wherever possible to try not to introduce breaking changes where this gets really",
    "start": "1055280",
    "end": "1061840"
  },
  {
    "text": "interesting though when compared to synchronous communication is the things that you're no longer responsible",
    "start": "1061840",
    "end": "1068160"
  },
  {
    "text": "for because now in the event system you're no longer responsible for the constraints that your consumer has if",
    "start": "1068160",
    "end": "1075520"
  },
  {
    "text": "you've ever ever hit rate limiting when calling a synchronous API you no longer need to C about them kind of things that's not your responsibility anymore",
    "start": "1075520",
    "end": "1082360"
  },
  {
    "text": "you don't need to C about the constraints of the systems that you're dealing with you just publish events and as long as you agree to stick to the",
    "start": "1082360",
    "end": "1088120"
  },
  {
    "text": "contract you've agreed you are fulfilling your role in the architecture as a",
    "start": "1088120",
    "end": "1094400"
  },
  {
    "text": "subscriber you now need to protect against this kind of thing because if you just hook yourself directly up to",
    "start": "1094400",
    "end": "1100400"
  },
  {
    "text": "the bus to the message Channel and you now know that producers are just publishing events you need to be really",
    "start": "1100400",
    "end": "1105720"
  },
  {
    "text": "careful about how you handle these events much like when you're building an API you have very little control over",
    "start": "1105720",
    "end": "1110880"
  },
  {
    "text": "how many people are going to call your API but you do Implement things like rate limiting we have these mechanisms",
    "start": "1110880",
    "end": "1116679"
  },
  {
    "text": "in place when building apis to protect ourselves and you can have these same mechanisms when you're building an event",
    "start": "1116679",
    "end": "1123840"
  },
  {
    "text": "driven system and as a subscriber in an event driven system I always recommend",
    "start": "1123840",
    "end": "1129480"
  },
  {
    "text": "introducing some kind of storage layer between your compute between your application and the and the bus",
    "start": "1129480",
    "end": "1136799"
  },
  {
    "text": "itself so you've got this Central event bus that all the events are being published to and instead of hooking your",
    "start": "1136799",
    "end": "1143640"
  },
  {
    "text": "application directly to the bus you're going to hook up some kind of queue and that way the events will come in and",
    "start": "1143640",
    "end": "1148880"
  },
  {
    "text": "they'll just build up and build up in the que and you can work through that Queue at a time that suits you and",
    "start": "1148880",
    "end": "1156080"
  },
  {
    "text": "you'll notice I've drawn the boundaries of the system on here because this queue is something that you control in your team the bus is something shared the",
    "start": "1156080",
    "end": "1163440"
  },
  {
    "text": "queue is something you control and that gives you that durability that way to rate limit events",
    "start": "1163440",
    "end": "1169559"
  },
  {
    "text": "that are coming your way there's another slightly more subtle benefit of event of an",
    "start": "1169559",
    "end": "1176760"
  },
  {
    "text": "architecture because event and systems are built using business events it",
    "start": "1176760",
    "end": "1181960"
  },
  {
    "text": "really simplifies these conversations you can have with business people how many of you have ever built a feature",
    "start": "1181960",
    "end": "1188320"
  },
  {
    "text": "and then you've built that slightly wrong because there was a miscommunication somewhere along the line with the",
    "start": "1188320",
    "end": "1194679"
  },
  {
    "text": "business okay yeah we've all been there where business wants X you build why and then you kind of try and realize why",
    "start": "1194679",
    "end": "1200760"
  },
  {
    "text": "that went wrong but because now you're talking about events you're talking a language that the business people can",
    "start": "1200760",
    "end": "1206440"
  },
  {
    "text": "understand you can easily have these conversations what should happen after an order is cancelled what should happen",
    "start": "1206440",
    "end": "1213240"
  },
  {
    "text": "after an order is confirmed the language you're Now using to drive your functionality is something that",
    "start": "1213240",
    "end": "1218640"
  },
  {
    "text": "everybody understands as opposed to talking about rest and HTTP and soap and all these other technical terms and",
    "start": "1218640",
    "end": "1224840"
  },
  {
    "text": "that's again because Eda is fundamentally a communication pattern it's a way of modeling the integration",
    "start": "1224840",
    "end": "1231320"
  },
  {
    "text": "between systems okay let's get a bit more technical now let's start actually to work through the implementation of this",
    "start": "1231320",
    "end": "1237520"
  },
  {
    "text": "and we'll start with this core order processing flaw this is the bit we're going to make event driven and here's",
    "start": "1237520",
    "end": "1243799"
  },
  {
    "text": "how it works today an order comes in and the order service makes a call to the kitchen at some point later the kitchen",
    "start": "1243799",
    "end": "1250080"
  },
  {
    "text": "is going to make a call back to the order service and say this this kitchen this this order is now ready to be delivered the order processing service",
    "start": "1250080",
    "end": "1256760"
  },
  {
    "text": "will make a call to the delivery service delivery service responds when it's been delivered and then the call goes out to the Loyalty service and the Loyalty",
    "start": "1256760",
    "end": "1263320"
  },
  {
    "text": "service says we've added them points and look at how much coupling you've got how much synchronous communication you've got just for this simple piece of the",
    "start": "1263320",
    "end": "1272120"
  },
  {
    "text": "architecture so this is what you're going to take now and we're going to make this event driven and the first",
    "start": "1272120",
    "end": "1277279"
  },
  {
    "text": "question I normally get asked when I have this conversation is how do I actually understand the events in my",
    "start": "1277279",
    "end": "1284360"
  },
  {
    "text": "system and there's something really useful in this same image that was on screen earlier there's a process that's",
    "start": "1284360",
    "end": "1291400"
  },
  {
    "text": "happening here and that is the idea of event storming who's ever done an event",
    "start": "1291400",
    "end": "1297000"
  },
  {
    "text": "storming Workshop or knows what event storming is okay so we have there actually another session on right now which I'm sure is awesome thank you for",
    "start": "1297000",
    "end": "1303120"
  },
  {
    "text": "being here with me by the way but there's a session on on event storming so catching that on YouTube afterwards is probably going to be a really good thing to do because this isn't going to",
    "start": "1303120",
    "end": "1309159"
  },
  {
    "text": "be a deep dive on event storming but if you're not familiar with event storming what happens in an event storm is you",
    "start": "1309159",
    "end": "1314919"
  },
  {
    "text": "get everybody in the room together all the stakeholders technical non-technical and the point in it is to understand the",
    "start": "1314919",
    "end": "1322000"
  },
  {
    "text": "events that are happening in your business to understand the language of your business and it's really important",
    "start": "1322000",
    "end": "1328520"
  },
  {
    "text": "that it's non-technical and you will always get two developers off in the corner talking about how they're going to implement",
    "start": "1328520",
    "end": "1334440"
  },
  {
    "text": "this with kubernetes the answer is don't use kubernetes by the way but stop that conversation happening this is not a",
    "start": "1334440",
    "end": "1341400"
  },
  {
    "text": "technical discussion this is a discussion where you want to agree the language of the business it was popularized by Alberto",
    "start": "1341400",
    "end": "1349039"
  },
  {
    "text": "brandolini and to quote directly from the event storming website it's a way to design clean and maintainable event",
    "start": "1349039",
    "end": "1356120"
  },
  {
    "text": "driven software to support rapidly evolving businesses and at the end of an event",
    "start": "1356120",
    "end": "1361640"
  },
  {
    "text": "storming session you'll end up with something like this you'll have lots of potic notes on the wall everybody",
    "start": "1361640",
    "end": "1366960"
  },
  {
    "text": "sticking on the events that happen in the business and if you end up with a multiple events that kind of mean the",
    "start": "1366960",
    "end": "1372919"
  },
  {
    "text": "same thing you'll cluster them together and you'll have a discussion about what the right language what the right term is",
    "start": "1372919",
    "end": "1379400"
  },
  {
    "text": "once you have all these events ready you'll organize them by time to understand which event should happen in",
    "start": "1379400",
    "end": "1385600"
  },
  {
    "text": "what order and then you'll also start to put on the things that cause these events to happen the commands that",
    "start": "1385600",
    "end": "1391840"
  },
  {
    "text": "happen that cause an event to be triggered and by the end of it you'll have this big page of potic notes and",
    "start": "1391840",
    "end": "1398520"
  },
  {
    "text": "everybody in the organization technical non-technical everybody understands the language to",
    "start": "1398520",
    "end": "1404440"
  },
  {
    "text": "use in the system and what should understand what should trigger what",
    "start": "1404440",
    "end": "1409799"
  },
  {
    "text": "so another one of the common things you'll hear when you learn about event of Architecture is evolvability this",
    "start": "1409799",
    "end": "1416279"
  },
  {
    "text": "core benefit of Event Systems it makes your systems evolvable and that's kind of true",
    "start": "1416279",
    "end": "1421559"
  },
  {
    "text": "because you've got this Central flaw of events that are flying around that one anybody can choose to hook into them at",
    "start": "1421559",
    "end": "1427720"
  },
  {
    "text": "any time and the member services are unaware of their Downstream consumers but let's actually consider a",
    "start": "1427720",
    "end": "1434480"
  },
  {
    "text": "real scenario here um let's come back to the same fat event again this order confirmed event and now because you've",
    "start": "1434480",
    "end": "1440720"
  },
  {
    "text": "all done such a fantastic job building out this architecture it's scaled and it's gone multi- region so you now need",
    "start": "1440720",
    "end": "1446600"
  },
  {
    "text": "to include the currency as part of this event at the moment it's just got the price a decimal",
    "start": "1446600",
    "end": "1452960"
  },
  {
    "text": "value so you go off and you think well we can just add the currency right we can just change this event so that we",
    "start": "1452960",
    "end": "1458400"
  },
  {
    "text": "add an order value and we change that from being a decimal to be a type that has a value and a currency does anyone",
    "start": "1458400",
    "end": "1465399"
  },
  {
    "text": "see a potential problem with us making that change some hands some hands because remember",
    "start": "1465399",
    "end": "1472399"
  },
  {
    "text": "if anybody's using that order value if anybody's using that decimal value you've now just broken A system that you",
    "start": "1472399",
    "end": "1478720"
  },
  {
    "text": "had no idea existed and you might think well actually it's only the kitchen service that's using this event and they're not going to care about the",
    "start": "1478720",
    "end": "1484600"
  },
  {
    "text": "order value and then you realize that an analytic service has been span up that you didn't know about that's using this",
    "start": "1484600",
    "end": "1490880"
  },
  {
    "text": "event and you just broke on a system you didn't even know existed doesn't sound",
    "start": "1490880",
    "end": "1495919"
  },
  {
    "text": "particularly evolvable right so what do we do now how do we handle",
    "start": "1495919",
    "end": "1501520"
  },
  {
    "text": "this how do we manage this and I'm going to put a word on screen now and I apologize in advance it's a really",
    "start": "1501520",
    "end": "1507520"
  },
  {
    "text": "naughty word it's a horrible world I hate saying it I hate this part of the talk and it won't be there for long I",
    "start": "1507520",
    "end": "1512640"
  },
  {
    "text": "promise and that word is governance yeah hard even to say it sometimes it gives",
    "start": "1512640",
    "end": "1518679"
  },
  {
    "text": "you the feeling of red tape and bureaucracy right it makes you think about these things that you can't do you can't be agile you can't move",
    "start": "1518679",
    "end": "1525640"
  },
  {
    "text": "quickly but actually governance doesn't need to be painful there doesn't need to be red tape to govern your systems and",
    "start": "1525640",
    "end": "1532840"
  },
  {
    "text": "in an event driven system you can use a process that I'm sure many of you are already familiar with and that's the idea of a request for comment or an",
    "start": "1532840",
    "end": "1541120"
  },
  {
    "text": "RFC so whenever you want to make one of these breaking changes to an event you",
    "start": "1541120",
    "end": "1547159"
  },
  {
    "text": "raise an RFC you tag that RFC with the type of event you give everybody else in the organization the chance to comment",
    "start": "1547159",
    "end": "1552960"
  },
  {
    "text": "on the change that you're thinking of making and that keeps you asynchronous it keeps your team working independently",
    "start": "1552960",
    "end": "1560039"
  },
  {
    "text": "but it allows you to collaborate still as and when necessary so that's one way you can add",
    "start": "1560039",
    "end": "1565679"
  },
  {
    "text": "governance but there's another way you can add governance at a technical level down in the actual structure of your",
    "start": "1565679",
    "end": "1571120"
  },
  {
    "text": "events because schema design is incredibly important in an event driven system the highest yes question RFC an",
    "start": "1571120",
    "end": "1579720"
  },
  {
    "text": "EV you raise an event when you raise the RFC potentially yeah new RFC that could",
    "start": "1579720",
    "end": "1585480"
  },
  {
    "text": "work that could work there we are um so at a technical level now you've",
    "start": "1585480",
    "end": "1594880"
  },
  {
    "text": "got this coupling at the schema level the highest form of coupling you'll have in an event system is the schema of the",
    "start": "1594880",
    "end": "1600799"
  },
  {
    "text": "event itself so what you should always do when you're building an event system is adopt",
    "start": "1600799",
    "end": "1606480"
  },
  {
    "text": "some kind of consistent schema with your events and there's actually a",
    "start": "1606480",
    "end": "1612360"
  },
  {
    "text": "specification that exists exactly for this purpose this is an example of the cloud events",
    "start": "1612360",
    "end": "1618840"
  },
  {
    "text": "specification and this is a defined spec for what an event should look like and there's a few really important",
    "start": "1618840",
    "end": "1624720"
  },
  {
    "text": "properties in here the first is the data property the data property is the actual",
    "start": "1624720",
    "end": "1630279"
  },
  {
    "text": "event payload this is what's going to be custom to every single event across your entire",
    "start": "1630279",
    "end": "1635440"
  },
  {
    "text": "system you've got the ID property the ID is a uniquely generated identifier",
    "start": "1635440",
    "end": "1641159"
  },
  {
    "text": "that's generated at the point of publish and this allows Downstream systems to implement things like idem",
    "start": "1641159",
    "end": "1647360"
  },
  {
    "text": "potency they can look at an event and say have I seen this event before yes I have I can drop it I can ignore it and",
    "start": "1647360",
    "end": "1653200"
  },
  {
    "text": "then really importantly on this conversation around breaking changes around evolvability you've got the",
    "start": "1653200",
    "end": "1658440"
  },
  {
    "text": "source and the type property so the source property is where this event came",
    "start": "1658440",
    "end": "1664360"
  },
  {
    "text": "from this is our production order system and then the type property is of course the type of event order",
    "start": "1664360",
    "end": "1670880"
  },
  {
    "text": "created and then you've suffixed that type property with a version number and",
    "start": "1670880",
    "end": "1676559"
  },
  {
    "text": "this is actually part of the cloud event specif ification they recommend to use versioning as part of this and what this allows you to do is",
    "start": "1676559",
    "end": "1684120"
  },
  {
    "text": "to actually introduce breaking changes in a really safe way so at the minute right now you're",
    "start": "1684120",
    "end": "1689679"
  },
  {
    "text": "are publishing version one of this order confirmed event and you want to introduce the breaking",
    "start": "1689679",
    "end": "1694919"
  },
  {
    "text": "change and what you'll do at this point as opposed to completely overwriting that version one you'll publish two",
    "start": "1694919",
    "end": "1700919"
  },
  {
    "text": "versions of the same event at the same time and at the minute version 2 is",
    "start": "1700919",
    "end": "1706000"
  },
  {
    "text": "extremely sad and upset because nobody Cur about it but you'll set a depreciation date on version one and",
    "start": "1706000",
    "end": "1712600"
  },
  {
    "text": "it's really important that you stick to the date that you set because otherwise you'll end up managing lots and lots of versions of events so you'll set a",
    "start": "1712600",
    "end": "1719320"
  },
  {
    "text": "depreciation date and you say on on St so many days or months in the future we're going to stop publishing version",
    "start": "1719320",
    "end": "1724399"
  },
  {
    "text": "one and over time all of your services will migrate over to version two and you",
    "start": "1724399",
    "end": "1730159"
  },
  {
    "text": "can stop publishing version one so thinking about how you're going",
    "start": "1730159",
    "end": "1735679"
  },
  {
    "text": "to evolve your schema over time is really important like I said schema is the highest form of coupling in an event",
    "start": "1735679",
    "end": "1742240"
  },
  {
    "text": "Ren system and that brings us back to this question then should we use these fatter events or should we use these",
    "start": "1742240",
    "end": "1749480"
  },
  {
    "text": "thinner lightweight notification events and at risk of sounding extremely",
    "start": "1749480",
    "end": "1755720"
  },
  {
    "text": "cliched of course as you know it always depends I've gone back and forwards on this question so many times you wouldn't",
    "start": "1755720",
    "end": "1762200"
  },
  {
    "text": "believe because there's benefits to doing both things but as technologists we we love",
    "start": "1762200",
    "end": "1768399"
  },
  {
    "text": "laws don't we we love heuristics we love rules of thumb and there's actually a law that can help us here and that is",
    "start": "1768399",
    "end": "1774000"
  },
  {
    "text": "Pell's law be conservative in what you do be liberal in what you accept it's",
    "start": "1774000",
    "end": "1781600"
  },
  {
    "text": "also known as the robustness principle and I want to focus in on the first part",
    "start": "1781600",
    "end": "1786799"
  },
  {
    "text": "of this law be conservative in what you",
    "start": "1786799",
    "end": "1792279"
  },
  {
    "text": "send the less information you include in your event payload the less coupling you",
    "start": "1792279",
    "end": "1797360"
  },
  {
    "text": "have at a semantic level and if you take this to the absolute extreme we can end up back where we were initially only",
    "start": "1797360",
    "end": "1803960"
  },
  {
    "text": "publishing that order the order ID as part of the event",
    "start": "1803960",
    "end": "1809080"
  },
  {
    "text": "payload and this might sound good in theory we've got the thinnest possible event we're only publishing the order ID",
    "start": "1809080",
    "end": "1816039"
  },
  {
    "text": "but then of course we have that same issue we had earlier where we need to do call backs but there's something in this idea",
    "start": "1816039",
    "end": "1823360"
  },
  {
    "text": "of only publishing identifiers what about if we were to publish an Ever Source slightly",
    "start": "1823360",
    "end": "1828760"
  },
  {
    "text": "fatter event where now we include the order ID the delivery ID and the",
    "start": "1828760",
    "end": "1833919"
  },
  {
    "text": "customer ID and if you actually think about how this would work if you imagine you're on your phone now ordering a",
    "start": "1833919",
    "end": "1839880"
  },
  {
    "text": "pizza I'm really glad this is an after lunch session because otherwise this could go really badly imagine you're on",
    "start": "1839880",
    "end": "1845720"
  },
  {
    "text": "your phone now you're about to order a pizza the first thing you're going to do is add a delivery",
    "start": "1845720",
    "end": "1851080"
  },
  {
    "text": "address and if you think about the principles of microservices each microservice should own its own data so",
    "start": "1851080",
    "end": "1857039"
  },
  {
    "text": "that delivery address information is going to be owned by the delivery service and that delivery service is",
    "start": "1857039",
    "end": "1862840"
  },
  {
    "text": "going to return back some kind of identifier which you can store in session Stat or somewhere in your app",
    "start": "1862840",
    "end": "1869639"
  },
  {
    "text": "and when you submit the order you include that delivery ID as part of the order so the order knows which delivery",
    "start": "1869639",
    "end": "1876600"
  },
  {
    "text": "ID it relates to but it doesn't actually need to know the specifics of the actual",
    "start": "1876600",
    "end": "1881840"
  },
  {
    "text": "address information so when this event gets published the delivery service can consume that event and actually say",
    "start": "1881840",
    "end": "1886880"
  },
  {
    "text": "thank you very much I've got a I know which delivery address I need to use now and there's another really",
    "start": "1886880",
    "end": "1893120"
  },
  {
    "text": "interesting integration pattern that can help us here and that's the claim check",
    "start": "1893120",
    "end": "1898440"
  },
  {
    "text": "integration pattern and the claim check pattern is a way of offloading some of",
    "start": "1898440",
    "end": "1904240"
  },
  {
    "text": "this information and I realize now that says enrich a pattern that is the wrong name that should be claim check pattern",
    "start": "1904240",
    "end": "1910559"
  },
  {
    "text": "and it's a way of potentially avoid avoiding some of these potential overloads that come from Downstream systems so with the claim check pattern",
    "start": "1910559",
    "end": "1917200"
  },
  {
    "text": "at the point of you offload some of this information into a separate location",
    "start": "1917200",
    "end": "1922320"
  },
  {
    "text": "that might be a cache temporarily that might be another API that's built specifically for these callbacks it",
    "start": "1922320",
    "end": "1929440"
  },
  {
    "text": "might equally be a cloud service something like Amazon S3 second a US service name if you're counting by the",
    "start": "1929440",
    "end": "1935000"
  },
  {
    "text": "way something like S3 which is durable it's available it's resilient and you can pass an identifier to whereabouts in",
    "start": "1935000",
    "end": "1942159"
  },
  {
    "text": "S3 that object is so when the consumer receives this event they can process in it and if they don't if they don't need",
    "start": "1942159",
    "end": "1948399"
  },
  {
    "text": "any additional information they can just process it as is as a notification if they do need more",
    "start": "1948399",
    "end": "1954279"
  },
  {
    "text": "information they can reach out and grab that additional information without actually overloading your core",
    "start": "1954279",
    "end": "1961200"
  },
  {
    "text": "service and whichever way you choose to do this fat events thin events always Embrace some kind of defined",
    "start": "1961200",
    "end": "1967960"
  },
  {
    "text": "specification whether that's Cloud events there's another pattern called the metadata data pattern this is becoming the de facto way of defining",
    "start": "1967960",
    "end": "1974440"
  },
  {
    "text": "events in event driven systems so as you've seen seen over some of the last few diagrams one of the things that you need to embrace as you",
    "start": "1974440",
    "end": "1981320"
  },
  {
    "text": "build an event different system is asynchronicity struggle with that",
    "start": "1981320",
    "end": "1986960"
  },
  {
    "text": "sometimes you need to think about every part of your system now as interacting in an asynchronous way and if you're",
    "start": "1986960",
    "end": "1993000"
  },
  {
    "text": "used to using method calls or hat dtp calls these things where you've got request and response this can be a",
    "start": "1993000",
    "end": "1999120"
  },
  {
    "text": "paradigm shift it was for me when I first started doing this because now your service is going to do a piece of",
    "start": "1999120",
    "end": "2004799"
  },
  {
    "text": "work and then it's going to publish in an event and then May hopefully something else that you might want to",
    "start": "2004799",
    "end": "2010000"
  },
  {
    "text": "happen is going to H is going to come back at some point in the future if you think about the same integration we've",
    "start": "2010000",
    "end": "2015080"
  },
  {
    "text": "been talking about the order confirmed event gets published and hopefully probably maybe at some point in the",
    "start": "2015080",
    "end": "2020399"
  },
  {
    "text": "future the order cooked event is going to come back the order's ready to be do something else with it but it might not",
    "start": "2020399",
    "end": "2026200"
  },
  {
    "text": "there's a chance it couldn't and this is actually a problem with",
    "start": "2026200",
    "end": "2031279"
  },
  {
    "text": "consistency and there's two different types of consistency you see in distributed systems there's eventual",
    "start": "2031279",
    "end": "2036399"
  },
  {
    "text": "consistency and strong consistency and to explain the difference between the two I want to",
    "start": "2036399",
    "end": "2042480"
  },
  {
    "text": "take a quick step into another part of plant-based pizza and that's how payments work in plant-based pizza so",
    "start": "2042480",
    "end": "2047960"
  },
  {
    "text": "picture the scene you can close your eyes if you want picture the scene you've just walked into a pizza restaurant to collect your order you can",
    "start": "2047960",
    "end": "2054000"
  },
  {
    "text": "smell it it's hit you in the face you can see the pizz being prepared behind the counter you can see your pizza being",
    "start": "2054000",
    "end": "2060560"
  },
  {
    "text": "put into a box you're ready to take it you're hungry you're salivating and before you can walk away with it there's",
    "start": "2060560",
    "end": "2065800"
  },
  {
    "text": "something you need to do first of of course you need to pay for your order and there's two different ways you",
    "start": "2065800",
    "end": "2072480"
  },
  {
    "text": "can choose to pay for your order one of which is becoming an awful lot less common now the first option you have is to pay with cash you can take your purse",
    "start": "2072480",
    "end": "2078878"
  },
  {
    "text": "or your wallet out you can open it up you can hand over some money to the cashier they'll put that in the tail",
    "start": "2078879",
    "end": "2084398"
  },
  {
    "text": "give you your pizza and you go on your Merry wear that's an example of an of a",
    "start": "2084399",
    "end": "2090200"
  },
  {
    "text": "strongly consistent transaction because at that moment in time you can absolutely guarantee that you no longer",
    "start": "2090200",
    "end": "2096398"
  },
  {
    "text": "have the money and that the piz restaurant has the money it's categoric it's happened it absolutely has happened",
    "start": "2096399",
    "end": "2103200"
  },
  {
    "text": "if you compare that to the other way that you can pay for your order you could pay with a card and if you pay for something with a",
    "start": "2103200",
    "end": "2109720"
  },
  {
    "text": "credit card all you're doing is making a theoretical guarantee that at some point in the future the money is going to",
    "start": "2109720",
    "end": "2116079"
  },
  {
    "text": "leave your bank account and go into their bank account I'm sure you've all been there where you've bought something before it might be a pizza you've walked",
    "start": "2116079",
    "end": "2121800"
  },
  {
    "text": "out and you've checked your bank statement and thought I've just got a free pizza this is wonderful and that's",
    "start": "2121800",
    "end": "2127800"
  },
  {
    "text": "example of an eventually consistent transaction at some point in the future if everything stopped happening if all",
    "start": "2127800",
    "end": "2133200"
  },
  {
    "text": "money everywhere stopped moving for an hour eventually every bank account would converge and have the same view of the",
    "start": "2133200",
    "end": "2139040"
  },
  {
    "text": "world and this is the same with distributed systems if all events stopped publishing",
    "start": "2139040",
    "end": "2144960"
  },
  {
    "text": "eventually all the systems would have the same view of the world and there's",
    "start": "2144960",
    "end": "2150359"
  },
  {
    "text": "not really a solution for this if you're Building aent Systems are distributed systems in general in fact you just need",
    "start": "2150359",
    "end": "2156240"
  },
  {
    "text": "to embrace this idea of eventual consistency as I'm sure many of you are",
    "start": "2156240",
    "end": "2161680"
  },
  {
    "text": "aware architecting systems is simply about balancing this big bag of tradeoffs and this is one of the tradeoffs you'll have to make if you",
    "start": "2161680",
    "end": "2168400"
  },
  {
    "text": "start to adopt an event of system and it's not just events that can",
    "start": "2168400",
    "end": "2173880"
  },
  {
    "text": "be asynchronous commands can also be asynchronous imagine another scenario",
    "start": "2173880",
    "end": "2180720"
  },
  {
    "text": "you need to implement now your order processing service wants to send an email and you could do that using a",
    "start": "2180720",
    "end": "2186680"
  },
  {
    "text": "synchronous request response you could make a call from the audit processing service the email Pro email service",
    "start": "2186680",
    "end": "2192160"
  },
  {
    "text": "would send the email and then respond back again but now you're in that same situation where something that's not",
    "start": "2192160",
    "end": "2198319"
  },
  {
    "text": "core to your business domain sending emails in most systems is an ancillary kind of nice to have and if that email",
    "start": "2198319",
    "end": "2205760"
  },
  {
    "text": "service is offline it has the potential to cause your order processing service to come",
    "start": "2205760",
    "end": "2211280"
  },
  {
    "text": "offline an email is something that doesn't really change very much either you have the same set of properties from",
    "start": "2211280",
    "end": "2216960"
  },
  {
    "text": "two subject so the first way you could implement this in an event system is of",
    "start": "2216960",
    "end": "2223000"
  },
  {
    "text": "course to have your email service react to the different events your order service could publish",
    "start": "2223000",
    "end": "2229119"
  },
  {
    "text": "an order confirmed event and then the email service is going to say I know I need to send an email when I see an order confirmed event and this is a",
    "start": "2229119",
    "end": "2236480"
  },
  {
    "text": "perfectly valid way of building this but then this becomes a problem of responsibility because now your email",
    "start": "2236480",
    "end": "2241680"
  },
  {
    "text": "service needs to know about all the different events that it needs to send an email for and exactly what the",
    "start": "2241680",
    "end": "2248359"
  },
  {
    "text": "contents of that email should be when really the responsibility of the from and the two and the subject of the and",
    "start": "2248359",
    "end": "2254000"
  },
  {
    "text": "the body should really be the responsibility of the service that wants to send the email and this is where asynchronous",
    "start": "2254000",
    "end": "2260160"
  },
  {
    "text": "commands can help because you can send commands you can do these statements of intent in an asynchronous way the email",
    "start": "2260160",
    "end": "2267760"
  },
  {
    "text": "service might expose some kind of endpoint that might be a cue that might be a topic but it's something a message",
    "start": "2267760",
    "end": "2273079"
  },
  {
    "text": "channel that every other service can send a message to and the order processing service is going to send a",
    "start": "2273079",
    "end": "2278920"
  },
  {
    "text": "send email command onto that topic that endpoint exposed by the email service",
    "start": "2278920",
    "end": "2285079"
  },
  {
    "text": "now the order processing service can go on and do something else it can carry on with this day and you'll notice that payload still follows that cloud events",
    "start": "2285079",
    "end": "2294119"
  },
  {
    "text": "specification that then the the email service can take the messages from that channel go off and send the email and",
    "start": "2294119",
    "end": "2300079"
  },
  {
    "text": "you'll notice in that event body there's also a field for the response",
    "start": "2300079",
    "end": "2305560"
  },
  {
    "text": "Channel and a response Chan channel is a way as a producer to get some information back you might Define a Quee",
    "start": "2305560",
    "end": "2313000"
  },
  {
    "text": "or some kind of endpoint that you want the email service to call back to if you need a response from your command so as",
    "start": "2313000",
    "end": "2320000"
  },
  {
    "text": "the service sends the email it can then call back to the response Channel if that is something you need typically in",
    "start": "2320000",
    "end": "2325280"
  },
  {
    "text": "an email scenario you're probably not going to need that response back unless it's an absolutely critical email so",
    "start": "2325280",
    "end": "2331720"
  },
  {
    "text": "commands can be asynchronous as well that does risk offending the pure risks of event of an architecture in the world",
    "start": "2331720",
    "end": "2336880"
  },
  {
    "text": "but it can be an asynchronous thing as well so now you're in this really nice situation you've got this system that is",
    "start": "2336880",
    "end": "2343720"
  },
  {
    "text": "now event driven you've taken all these different points of integration you've moved them from synchronous communication to something more event",
    "start": "2343720",
    "end": "2352160"
  },
  {
    "text": "driven and then your business throws another spanner in the works they say this loyalty Point service that you've",
    "start": "2352480",
    "end": "2358680"
  },
  {
    "text": "put Blood Sweat and Tears into building we now want to replace that with a third party API we want someone else we're",
    "start": "2358680",
    "end": "2365000"
  },
  {
    "text": "going to buy a product that's going to manage a Loy points for us and you get really sad for a little bit and then you think actually how do we integrate with that",
    "start": "2365000",
    "end": "2372240"
  },
  {
    "text": "because all of our systems event driven but now we need to integrate with this API that isn't event driven it's a third",
    "start": "2372240",
    "end": "2379960"
  },
  {
    "text": "party and one of the options here is of course to go back to how you had it originally you could let the order processing service make the calls to the",
    "start": "2379960",
    "end": "2387079"
  },
  {
    "text": "third party API but then you're back in that same situation where you're now dealing with",
    "start": "2387079",
    "end": "2392240"
  },
  {
    "text": "the constraints of that third party so what I always recommend in this scenario is still keeping some element",
    "start": "2392240",
    "end": "2399440"
  },
  {
    "text": "of loyalty Point service you'll keep a small really lightweight service that's",
    "start": "2399440",
    "end": "2404880"
  },
  {
    "text": "simply there just to make these calls to the third party API it will receive the events of your bus and it'll act like a",
    "start": "2404880",
    "end": "2410920"
  },
  {
    "text": "kind of proxy to make the calls out to the third party and it could even",
    "start": "2410920",
    "end": "2415960"
  },
  {
    "text": "publish events back onto the bus if the if the request to the third party is successful or",
    "start": "2415960",
    "end": "2421440"
  },
  {
    "text": "not this is particularly helpful for legacy systems if you're integrating",
    "start": "2421440",
    "end": "2427119"
  },
  {
    "text": "with some kind of Legacy monolith that only exposes a hdtp API you can still",
    "start": "2427119",
    "end": "2432400"
  },
  {
    "text": "start to make other parts of your system event driven and use a pattern like this to add that element of rate limiting",
    "start": "2432400",
    "end": "2438920"
  },
  {
    "text": "because you've got a queue in there and still keep these calls back to your monolithic",
    "start": "2438920",
    "end": "2445240"
  },
  {
    "text": "application another thing to be really careful about with event Ren systems is",
    "start": "2445240",
    "end": "2451280"
  },
  {
    "text": "observability how do you actually work out what the heck is going on when something breaks",
    "start": "2451280",
    "end": "2457920"
  },
  {
    "text": "and there's probably a whole another talk on this topic on observability in event and systems but there's one small",
    "start": "2457920",
    "end": "2464680"
  },
  {
    "text": "change you can make to that event schema to set yourself up for success in this",
    "start": "2464680",
    "end": "2470480"
  },
  {
    "text": "scenario if you come back to that schema designed from earlier and again this is part of the cloud events specification",
    "start": "2470480",
    "end": "2477119"
  },
  {
    "text": "there's two additional properties in here now there's a trace pent and a Trace State this is assuming that you're",
    "start": "2477119",
    "end": "2483839"
  },
  {
    "text": "using open Telemetry in this case you this could equally just be a correlation ID the point is though you're passing a",
    "start": "2483839",
    "end": "2491359"
  },
  {
    "text": "consistent identifier between all of these different events and then you can start to look at",
    "start": "2491359",
    "end": "2497319"
  },
  {
    "text": "cause and effect you can start to look at actually this event happened that then caused this event and this event to happen and you can link that Al together",
    "start": "2497319",
    "end": "2504800"
  },
  {
    "text": "under one single distributed trace the other slightly the other good benefit to this",
    "start": "2504800",
    "end": "2511760"
  },
  {
    "text": "is that coming back to that versioning conversation from earlier if you've got these Trace identifiers being pass",
    "start": "2511760",
    "end": "2517400"
  },
  {
    "text": "around you've implemented distributed tracing you can start to annotate traces with the version number of the event",
    "start": "2517400",
    "end": "2524040"
  },
  {
    "text": "that you've consumed and that way as a producer you can start to look in your observability back end and look at okay how many",
    "start": "2524040",
    "end": "2530520"
  },
  {
    "text": "different systems are still consuming version one of my event who do I need to go and Shout at or hit with a really big",
    "start": "2530520",
    "end": "2536240"
  },
  {
    "text": "stick to make them move to version two so observability is really important and setting yourself up for success in",
    "start": "2536240",
    "end": "2542520"
  },
  {
    "text": "this way is where I would always recommend starting and the final point this now is",
    "start": "2542520",
    "end": "2547680"
  },
  {
    "text": "to talk about boundaries because although you're now prioritizing asynchronous communication at some point",
    "start": "2547680",
    "end": "2554760"
  },
  {
    "text": "somewhere you're probably going to need something synchronous the example that always",
    "start": "2554760",
    "end": "2560119"
  },
  {
    "text": "comes back here is some kind of front end application if you've got a front end that needs to make a call and all of your back end is asynchronous and event",
    "start": "2560119",
    "end": "2565800"
  },
  {
    "text": "driven how do you actually get that working and I'm a really big fan of",
    "start": "2565800",
    "end": "2570880"
  },
  {
    "text": "having these really thin really lightweight synchronous API layers at the boundaries of your system",
    "start": "2570880",
    "end": "2578000"
  },
  {
    "text": "so when this submit order request comes in you're going to do a really small amount of validation maybe you just",
    "start": "2578000",
    "end": "2583160"
  },
  {
    "text": "check that there's more than zero items on the order but you do a little bit of validation just to check that the",
    "start": "2583160",
    "end": "2588359"
  },
  {
    "text": "request that comes in is okay and then you store that in a database and publish an event onto the bus and all of your",
    "start": "2588359",
    "end": "2595520"
  },
  {
    "text": "hard work all the stuff that needs to happen in the background is then happening asynchronous but you've got",
    "start": "2595520",
    "end": "2600680"
  },
  {
    "text": "this really thin synchronous layer that you can use to actually manage this communication with front ends or maybe",
    "start": "2600680",
    "end": "2606160"
  },
  {
    "text": "systems that can't be event driven and The Logical problem that then",
    "start": "2606160",
    "end": "2611240"
  },
  {
    "text": "leads you to ask is how do I then get something back to my front",
    "start": "2611240",
    "end": "2616880"
  },
  {
    "text": "end because if all the business functionality is happening asynchronously in the back end the front end has already had a response from your",
    "start": "2616880",
    "end": "2623559"
  },
  {
    "text": "API it's already doing other things but of course you've still got events flying around after the kitchen",
    "start": "2623559",
    "end": "2630640"
  },
  {
    "text": "service does some work it's going to publish an already prepared event the order's ready the order's been prepared",
    "start": "2630640",
    "end": "2636119"
  },
  {
    "text": "the order is ready to to complete whatever so the order service can of course consume that event that's going",
    "start": "2636119",
    "end": "2641559"
  },
  {
    "text": "to come back and it can use that event to update the state of the order in the database so that means when your",
    "start": "2641559",
    "end": "2647160"
  },
  {
    "text": "frontend then makes another call to get the state of an order it has the most upto-date",
    "start": "2647160",
    "end": "2653359"
  },
  {
    "text": "State the alternate pattern you have here is to use something like signal R websockets some kind of by directional",
    "start": "2653359",
    "end": "2659839"
  },
  {
    "text": "communication so that you can consume these events as they come back in and push them straight out to the front end",
    "start": "2659839",
    "end": "2667359"
  },
  {
    "text": "but this pattern we're talking about here this having your events come back in and updating a view of the world this",
    "start": "2667359",
    "end": "2672680"
  },
  {
    "text": "leads us to another architectural pattern that does work well with Event",
    "start": "2672680",
    "end": "2677720"
  },
  {
    "text": "Systems it's not a necessity when you're building Event Systems and that is command query responsibility segregation",
    "start": "2677720",
    "end": "2684240"
  },
  {
    "text": "or cqrs is everyone familiar is anyone familiar with cqrs everyone has everyone implemented cqrs how well did it",
    "start": "2684240",
    "end": "2692800"
  },
  {
    "text": "go and it's it's a difficult pattern it's it's a challenging pattern to work with and I think it's sometimes used in places that it might",
    "start": "2692800",
    "end": "2699359"
  },
  {
    "text": "not need to be but the idea of cqrs is that you separate the command part of your system the part of your",
    "start": "2699359",
    "end": "2705319"
  },
  {
    "text": "system that handles rights and mutations and you separate that from the query part of your system and these are",
    "start": "2705319",
    "end": "2710599"
  },
  {
    "text": "completely independently Deployable Systems what that might look like is the create order request comes into your API",
    "start": "2710599",
    "end": "2718559"
  },
  {
    "text": "and that gets published onto some kind of bus so the order created event for example and of course all your backend",
    "start": "2718559",
    "end": "2725880"
  },
  {
    "text": "systems are going to go off and start doing work with that order created event but you've also got your query service",
    "start": "2725880",
    "end": "2731040"
  },
  {
    "text": "your order processing query service that's also interested in that order",
    "start": "2731040",
    "end": "2736280"
  },
  {
    "text": "created event and that's going to update a read Model A View a query database and this is a database that's optimized",
    "start": "2736280",
    "end": "2743280"
  },
  {
    "text": "purely for handling queries and of course this sounds in",
    "start": "2743280",
    "end": "2748359"
  },
  {
    "text": "practice like a simple pattern but thinking back to them ideas of consistency of the fact that an event",
    "start": "2748359",
    "end": "2753720"
  },
  {
    "text": "might not get to the place you think it does this can cause you issues it's a pattern that's really intended for when",
    "start": "2753720",
    "end": "2759480"
  },
  {
    "text": "you've got a WR that have a lot of complex business logic if you need to do a lot of work on right but your queries",
    "start": "2759480",
    "end": "2766040"
  },
  {
    "text": "are really simple really easy this can be a good place to start but in a lot of cases it's probably not a pattern that",
    "start": "2766040",
    "end": "2771800"
  },
  {
    "text": "you're going to need but let's actually walk through how this would actually work if you were to adopt this event",
    "start": "2771800",
    "end": "2777480"
  },
  {
    "text": "driven cqrs based system in plant-based pizza so the submit order request comes",
    "start": "2777480",
    "end": "2784680"
  },
  {
    "text": "into your order processing API it publishes an order confirmed event and that order confirmed event is consumed",
    "start": "2784680",
    "end": "2790960"
  },
  {
    "text": "by both the kitchen service and the query service inside your order processing",
    "start": "2790960",
    "end": "2796520"
  },
  {
    "text": "domain after some time the kitchen service is going to finish creating the order and it's going to publish an order prepared event and that order prepared",
    "start": "2796520",
    "end": "2803559"
  },
  {
    "text": "event is then going to be consumed by the delivery service to go off and organize the delivery of the order and",
    "start": "2803559",
    "end": "2809520"
  },
  {
    "text": "also consumed by the query service of the order processing service to then update the state update the view of the",
    "start": "2809520",
    "end": "2816240"
  },
  {
    "text": "world and that means when your get order request comes in that can be really really fast because you've got this view",
    "start": "2816240",
    "end": "2822599"
  },
  {
    "text": "of the world that's been pre-computed there's one last challenge",
    "start": "2822599",
    "end": "2828280"
  },
  {
    "text": "I wanted to touch on with this kind of architecture and it's focused on this piece here because when this post this",
    "start": "2828280",
    "end": "2835480"
  },
  {
    "text": "submit order request comes in the order service is going to store that somewhere it's going to store that order somewhere and then it's going to publish the event",
    "start": "2835480",
    "end": "2842599"
  },
  {
    "text": "to the event bus but what happens in a scenario where your event bus is offline",
    "start": "2842599",
    "end": "2849680"
  },
  {
    "text": "what happens in a scenario where that event can't be published because now your AUD processing database knows about",
    "start": "2849680",
    "end": "2855800"
  },
  {
    "text": "the order but nobody else does because it's never reached the event",
    "start": "2855800",
    "end": "2860920"
  },
  {
    "text": "bus and there's a couple of different patterns that can help you here the first and probably the simplest really",
    "start": "2860920",
    "end": "2866280"
  },
  {
    "text": "is the transactional outbox pattern in an outbox pattern when you",
    "start": "2866280",
    "end": "2872240"
  },
  {
    "text": "write some data to your primary database table you also write it to typically another table table that's called",
    "start": "2872240",
    "end": "2878040"
  },
  {
    "text": "something like outbox and you wrap both of them rights in a transaction so if either one fails neither of them will",
    "start": "2878040",
    "end": "2885280"
  },
  {
    "text": "happen and then you've got some kind of separate service that's simply polling the outbox table it's looking for all",
    "start": "2885280",
    "end": "2892160"
  },
  {
    "text": "the events in that outbox table that haven't yet been published and it will go off and publish them as and when it's",
    "start": "2892160",
    "end": "2898400"
  },
  {
    "text": "ready and this means if your event bus is offline whatever service you're using these events will just build up and",
    "start": "2898400",
    "end": "2904000"
  },
  {
    "text": "build up but can you can even start to have metrics and alarms on the size of your outbox table of your unpublished",
    "start": "2904000",
    "end": "2909760"
  },
  {
    "text": "events to then know if you've got a real problem in your system so this is one way you can manage this you can use a",
    "start": "2909760",
    "end": "2915599"
  },
  {
    "text": "transactional outbox you can also use change data capture to kind of help you here if you are familiar with change",
    "start": "2915599",
    "end": "2923119"
  },
  {
    "text": "data capture that's a place where you can write data to your database and actually stream the changes to your",
    "start": "2923119",
    "end": "2928760"
  },
  {
    "text": "database out the back of your database and then you can hook into that stream of data to actually start publishing",
    "start": "2928760",
    "end": "2936040"
  },
  {
    "text": "these events this is another pattern the outbox is in some cases easier and better to work",
    "start": "2936040",
    "end": "2941280"
  },
  {
    "text": "with really but one of the benefits in working in this way though is that you can make your query model your read",
    "start": "2941280",
    "end": "2948359"
  },
  {
    "text": "model incredibly performant because the create order request is going to come in and that's going to get written to your",
    "start": "2948359",
    "end": "2954200"
  },
  {
    "text": "primary database and importantly this database is the source of truth if",
    "start": "2954200",
    "end": "2959640"
  },
  {
    "text": "you're ever looking at the current state of a system it will always be the database linked to your command system",
    "start": "2959640",
    "end": "2965559"
  },
  {
    "text": "and then that event goes off often that event gets published onto the bus and consumed by your query service and your",
    "start": "2965559",
    "end": "2971599"
  },
  {
    "text": "query service can create this really highly optimized read model this could",
    "start": "2971599",
    "end": "2977799"
  },
  {
    "text": "even be a cache I've built a system in the past where the queries needed to be incredibly high performance and the",
    "start": "2977799",
    "end": "2984119"
  },
  {
    "text": "rights were really complex so instead of having the query system be a database it was simply a",
    "start": "2984119",
    "end": "2989480"
  },
  {
    "text": "cache so when that get order request comes in it responds incredibly quickly",
    "start": "2989480",
    "end": "2995000"
  },
  {
    "text": "and if that was to go away you can simply rehy hydrate that cach from the command database which is your primary",
    "start": "2995000",
    "end": "3000640"
  },
  {
    "text": "data store so to close out we've talked a lot about some theoretical fictional company",
    "start": "3000640",
    "end": "3007040"
  },
  {
    "text": "there right about plant-based Pizza what happens if you actually want to go away now and start building an event system",
    "start": "3007040",
    "end": "3013240"
  },
  {
    "text": "and the advice I always give is to start small don't try and make your entire",
    "start": "3013240",
    "end": "3018599"
  },
  {
    "text": "system event driven overnight pick one area pick one small",
    "start": "3018599",
    "end": "3024000"
  },
  {
    "text": "integration and get that right and don't pick a completely meaningless service that nobody ever uses but equally don't",
    "start": "3024000",
    "end": "3029760"
  },
  {
    "text": "pick your tier zero cannot go offline service pick something kind of in the middle somewhere start with this small",
    "start": "3029760",
    "end": "3035400"
  },
  {
    "text": "integration point and start to add messaging to your system even if you're building a",
    "start": "3035400",
    "end": "3042079"
  },
  {
    "text": "monolithic application today start publishing events when State",
    "start": "3042079",
    "end": "3047720"
  },
  {
    "text": "changes in your system start publishing events and even though nobody's hooking into them today then you have the potential in the",
    "start": "3047720",
    "end": "3054920"
  },
  {
    "text": "future to start making things event driven if you have a new service a new feature a new piece of functionality you",
    "start": "3054920",
    "end": "3060240"
  },
  {
    "text": "have because you've got these events flying around you can then start to hook into them and make things",
    "start": "3060240",
    "end": "3066520"
  },
  {
    "text": "event because remember event diven architecture is fundamentally a communication pattern it's a way of",
    "start": "3066520",
    "end": "3071799"
  },
  {
    "text": "modeling the integration between systems it's a technical communication pattern",
    "start": "3071799",
    "end": "3076920"
  },
  {
    "text": "but it's also a useful communication pattern at a business level the language",
    "start": "3076920",
    "end": "3082280"
  },
  {
    "text": "you use to talk about your system is incredibly important to the success of the system remember language and words",
    "start": "3082280",
    "end": "3089200"
  },
  {
    "text": "are what got us to where we are today as a species and at least for the moment",
    "start": "3089200",
    "end": "3094720"
  },
  {
    "text": "while software development is still a human endeavor these words and stories",
    "start": "3094720",
    "end": "3100079"
  },
  {
    "text": "are incredibly important and event of an architecture allows you to bring them words them stories into your actual",
    "start": "3100079",
    "end": "3107880"
  },
  {
    "text": "system and of course event of an architecture isn't a silver bullet it's not going to solve all of your problems",
    "start": "3107880",
    "end": "3113640"
  },
  {
    "text": "what I hope you've taken from this talk is some really practical advice that you can use to go away and not make the same",
    "start": "3113640",
    "end": "3120119"
  },
  {
    "text": "mistakes that I did thank you all very much for listening",
    "start": "3120119",
    "end": "3125210"
  },
  {
    "text": "[Applause]",
    "start": "3125210",
    "end": "3135420"
  }
]