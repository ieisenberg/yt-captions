[
  {
    "text": "wow let's see it recognizes me even with this fancy mic on so",
    "start": "640",
    "end": "5680"
  },
  {
    "text": "windows hello yay doesn't it or did it just like turn off",
    "start": "5680",
    "end": "12160"
  },
  {
    "text": "it what no it didn't it wants a pin at least it's not showing you my pin there",
    "start": "13360",
    "end": "18400"
  },
  {
    "text": "we go okay this is my intro slide",
    "start": "18400",
    "end": "22960"
  },
  {
    "text": "my name is mas torgersen or mas torsen",
    "start": "24080",
    "end": "29599"
  },
  {
    "text": "or something like that my norwegian friends out there are going to",
    "start": "29599",
    "end": "35280"
  },
  {
    "text": "kill me um they're going to take a blue sharpie to that one after um",
    "start": "35280",
    "end": "41360"
  },
  {
    "text": "so i i work on the c sharp language every day for microsoft um",
    "start": "41360",
    "end": "46960"
  },
  {
    "text": "it's a great job i wish you could all have it but it's mine",
    "start": "46960",
    "end": "51519"
  },
  {
    "text": "so and i've done that for a very long time and so that means i remember things that nobody else remembers",
    "start": "52160",
    "end": "58320"
  },
  {
    "text": "uh almost except for anas anders as we call him um who who was there from the",
    "start": "58320",
    "end": "64320"
  },
  {
    "text": "beginning i was not i i was a latecomer i was i've only been there for 17 years but it is an old language",
    "start": "64320",
    "end": "71360"
  },
  {
    "text": "we are now working on c sharp 11 and there's a whole nother talk about c sharp 11 a little later today",
    "start": "71360",
    "end": "79200"
  },
  {
    "text": "um so i i decided i want to talk about c sharp 1 through 10 today",
    "start": "79200",
    "end": "84840"
  },
  {
    "text": "um it's uh from the angle of how has functional programming influenced",
    "start": "84840",
    "end": "91360"
  },
  {
    "text": "c-sharp over the years and i'm i'm hoping that's interesting to you otherwise that's a lot of people i'll be disappointing today because it's a very",
    "start": "91360",
    "end": "97439"
  },
  {
    "text": "full room i don't know how many are out there but um you can still run without me noticing",
    "start": "97439",
    "end": "102799"
  },
  {
    "text": "unlike these people in here um so uh yeah i think it's interesting because c",
    "start": "102799",
    "end": "108720"
  },
  {
    "text": "sharp started out as a fairly typical of its age",
    "start": "108720",
    "end": "114240"
  },
  {
    "text": "fairly uh straightforward object-oriented imperative programming language that was",
    "start": "114320",
    "end": "119520"
  },
  {
    "text": "how it started they didn't kind of just pull that out of the blue of course there were other languages around at the time that were",
    "start": "119520",
    "end": "125840"
  },
  {
    "text": "similar that c sharp might happen to look a little like",
    "start": "125840",
    "end": "131200"
  },
  {
    "text": "oh by accident but that was sort of like the the game of the day so c-sharp was typical of the",
    "start": "131200",
    "end": "137520"
  },
  {
    "text": "day and kind of pretty much took almost all the functional things in along the way",
    "start": "137520",
    "end": "142879"
  },
  {
    "text": "as they became relevant to how we do programming so um so i'm going to go through that same evolution essentially",
    "start": "142879",
    "end": "149360"
  },
  {
    "text": "today and and point out some of the different ways to try i'll try to make some general points about programming language paradigms and so on along the",
    "start": "149360",
    "end": "155760"
  },
  {
    "text": "way um but it's all going to be a little bit i'm going to do it all in visual studio i'm just going to code along and so and",
    "start": "155760",
    "end": "162879"
  },
  {
    "text": "i and i forgot to print out my you know my demo notes so uh so i might go astray",
    "start": "162879",
    "end": "168959"
  },
  {
    "text": "or it might like it'll be a little bit of a one-off um we do have an hour uh which means that um",
    "start": "168959",
    "end": "176480"
  },
  {
    "text": "there's time for a few questions along the way not like a million but i don't want you to say oh i want to ask",
    "start": "176480",
    "end": "182239"
  },
  {
    "text": "a question about that when he's done talking because by then the code will look different nobody will remember what i",
    "start": "182239",
    "end": "188480"
  },
  {
    "text": "was talking about so if you have a question raise your hand and ask it and i'll try to keep us on track and hopefully i'll",
    "start": "188480",
    "end": "195200"
  },
  {
    "text": "succeed and that might mean that i will have to be a little rude and say sorry no more questions come back after um so",
    "start": "195200",
    "end": "201360"
  },
  {
    "text": "just don't don't be offended when i get to there but until then please um please just um raise a question and ask",
    "start": "201360",
    "end": "208319"
  },
  {
    "text": "um so with that um without much further ado let's start out with the c-sharp one and and just",
    "start": "208319",
    "end": "215120"
  },
  {
    "text": "kind of for those of us who were around remind ourselves of the",
    "start": "215120",
    "end": "221920"
  },
  {
    "text": "the state of the you know the state of the art of programming at least in the industrial space in uh around the year",
    "start": "221920",
    "end": "228560"
  },
  {
    "text": "2000 and for those of you who weren't around you know you can just go",
    "start": "228560",
    "end": "233680"
  },
  {
    "text": "thank god i wasn't around um i mean you're probably around most of you but you maybe you were like still",
    "start": "233680",
    "end": "240080"
  },
  {
    "text": "doing legos or aren't we all really but you know so um [Music]",
    "start": "240080",
    "end": "246159"
  },
  {
    "text": "what i have here is a fairly simple it's a c-sharp one program i'm cheating a little bit because",
    "start": "246159",
    "end": "251519"
  },
  {
    "text": "um when it comes to features that aren't part of this talk that aren't functional i'm just going to use them a little bit",
    "start": "251519",
    "end": "257359"
  },
  {
    "text": "anyway for instance my code is not in a main method you don't need to do that anymore in c sharp and if better fits",
    "start": "257359",
    "end": "263280"
  },
  {
    "text": "better on a screen if i don't so i'm not going to like stick religiously to only c 1 features",
    "start": "263280",
    "end": "269280"
  },
  {
    "text": "but in terms of functionality i am so um one thing to",
    "start": "269280",
    "end": "275040"
  },
  {
    "text": "so talking about functional c sharp started out with just a tiny little hint of",
    "start": "275040",
    "end": "280639"
  },
  {
    "text": "um a tiny little concession to functional programming languages compared to other languages at the time",
    "start": "280639",
    "end": "286960"
  },
  {
    "text": "and uh with something that they slash we call delegates",
    "start": "286960",
    "end": "292080"
  },
  {
    "text": "which is sort of kind of like a function type um they were actually part of some of the",
    "start": "292080",
    "end": "297840"
  },
  {
    "text": "um they were the need for delegates was part of the reason why we couldn't do some other programming languages and got",
    "start": "297840",
    "end": "304160"
  },
  {
    "text": "dragged into court and stuff um so the so ceo back then already had",
    "start": "304160",
    "end": "309440"
  },
  {
    "text": "like a notion of a function called delegate and those are still the ones that we use for function types",
    "start": "309440",
    "end": "314880"
  },
  {
    "text": "they're flawed in various ways but uh you know once you've got something",
    "start": "314880",
    "end": "320320"
  },
  {
    "text": "throughout the whole core libraries and so on you don't go on and change it so delegate types were function types it's like you know this",
    "start": "320320",
    "end": "326960"
  },
  {
    "text": "is the type of a function that takes an end and returns a bool and we it's a name type like a class it is in fact a",
    "start": "326960",
    "end": "333039"
  },
  {
    "text": "class and we call it predicate and now we can use it as a function type",
    "start": "333039",
    "end": "338479"
  },
  {
    "text": "so i can have a method here or function that takes um takes a predicate",
    "start": "338479",
    "end": "344080"
  },
  {
    "text": "and it can call the predicate as the you know according to the function type but and when i want to",
    "start": "344080",
    "end": "350720"
  },
  {
    "text": "pass an argument to it well we don't have anything like lambdas yet that we're going to get to that we",
    "start": "350720",
    "end": "356000"
  },
  {
    "text": "don't have like anonymous functions of any kind but we do have we but you can sort of just mention a function that",
    "start": "356000",
    "end": "362160"
  },
  {
    "text": "happens to have the right signature like gr greater than five",
    "start": "362160",
    "end": "367759"
  },
  {
    "text": "hang on a second is it going to be like this all the way",
    "start": "367759",
    "end": "373199"
  },
  {
    "text": "like how many how many typos are we going to have in here there we go i did get the wordle this morning so i'm",
    "start": "373199",
    "end": "379039"
  },
  {
    "text": "not like totally um there we go um",
    "start": "379039",
    "end": "384160"
  },
  {
    "text": "so um so you kind of have to declare a function then pass it you have to",
    "start": "384160",
    "end": "389520"
  },
  {
    "text": "declare the function type then use it like it's all very nominal and declarative at this point",
    "start": "389520",
    "end": "395120"
  },
  {
    "text": "but it gets the job done like you pass the predicate in of course um there's no such thing as generics yet",
    "start": "395120",
    "end": "401759"
  },
  {
    "text": "they're the first thing we're going to learn from functional programming language in a minute so you know",
    "start": "401759",
    "end": "407520"
  },
  {
    "text": "this was the name of the game right you you uh in order to filter this i need to gather",
    "start": "407520",
    "end": "413520"
  },
  {
    "text": "up the results the only like i really wanted to return an array because that's the only generic",
    "start": "413520",
    "end": "419120"
  },
  {
    "text": "type i have it's the only type that actually has an element type so that's so you kind of and you kind of encourage",
    "start": "419120",
    "end": "424639"
  },
  {
    "text": "to trade in arrays horrible as that is because otherwise you have no type safety but we do have other collections",
    "start": "424639",
    "end": "430240"
  },
  {
    "text": "they just all over object so and and i need to create one of those to",
    "start": "430240",
    "end": "435280"
  },
  {
    "text": "gather up my elements because i don't know how many are going to succeed yet i don't know what size of the array to allocate first i gather them up then you",
    "start": "435280",
    "end": "441840"
  },
  {
    "text": "know i know how many i have then i can allocate an array that's strongly typed to end",
    "start": "441840",
    "end": "447039"
  },
  {
    "text": "then i have to stick all the elements that i found into the array and as i'm doing so i have to cast them",
    "start": "447039",
    "end": "454240"
  },
  {
    "text": "to end because i know their audience but the compiler has no idea it's like you stuck you get you give me a bunch of",
    "start": "454240",
    "end": "459440"
  },
  {
    "text": "stuff you're taking them out all i can see is object um so you know that you die a little",
    "start": "459440",
    "end": "465520"
  },
  {
    "text": "inside every time you have to cast things coming out of collections do how many people in here remember that from like either sharp or some other like",
    "start": "465520",
    "end": "471360"
  },
  {
    "text": "java or yeah ouch yeah um so",
    "start": "471360",
    "end": "477039"
  },
  {
    "text": "what i think what we very quickly felt all of us was um and with c-sharp it was already like",
    "start": "477039",
    "end": "483680"
  },
  {
    "text": "coming to version two which we're coming to version two now um we felt like okay this is not",
    "start": "483680",
    "end": "489520"
  },
  {
    "text": "this is not like a satisfactory state of affairs it's not the abstraction capabilities",
    "start": "489520",
    "end": "494720"
  },
  {
    "text": "aren't good enough here some other languages that had been around for longer it took them a little",
    "start": "494720",
    "end": "499759"
  },
  {
    "text": "longer to get to that point so it ended up that for instance java and c-sharp got generics which is where we're coming",
    "start": "499759",
    "end": "505039"
  },
  {
    "text": "to now at around the same time and i was actually back then i was on the other side of the fence helping out with",
    "start": "505039",
    "end": "510080"
  },
  {
    "text": "generics in java so i i saw it from the other side i still think microsoft and c-sharp did",
    "start": "510080",
    "end": "516399"
  },
  {
    "text": "it better um so um it and this really comes down to",
    "start": "516399",
    "end": "521680"
  },
  {
    "text": "sort of one of the fundamental differences between functional and object-oriented programming it",
    "start": "521680",
    "end": "527920"
  },
  {
    "text": "you know in in classic imperative programming there really is no polymorphism like there's no way that",
    "start": "527920",
    "end": "534000"
  },
  {
    "text": "you can write code that applies to more than one type",
    "start": "534000",
    "end": "539920"
  },
  {
    "text": "objective programming and functional programming to a large degree are two different answers at least when they're typed they're two different answers to",
    "start": "539920",
    "end": "546959"
  },
  {
    "text": "how do you get polymorphism how do you write code that works for more than one kind of thing in object-oriented",
    "start": "546959",
    "end": "552240"
  },
  {
    "text": "programming we went with what's often called subtype polymorphism which means everything is a subtype of something",
    "start": "552240",
    "end": "558800"
  },
  {
    "text": "that's a subtype of something that all you know all goes back up to object so that's what we're seeing here now you",
    "start": "558800",
    "end": "564080"
  },
  {
    "text": "can write a collection like arraylist here that can contain anything so this polymorphism that sent sense and",
    "start": "564080",
    "end": "570640"
  },
  {
    "text": "the great thing about uh subtitle morphs polymorphism is it's very easy to have",
    "start": "570640",
    "end": "575760"
  },
  {
    "text": "heterogeneous collections for instance you can put like all kinds of things in the same collection",
    "start": "575760",
    "end": "581600"
  },
  {
    "text": "as opposed to functional programming they went with what's called parametric polymorphism where",
    "start": "581600",
    "end": "589200"
  },
  {
    "text": "you have you have an extra type parameter on things that that",
    "start": "589200",
    "end": "594800"
  },
  {
    "text": "you know sort of like a placeholder for one type so you don't get to mix and match the",
    "start": "594800",
    "end": "600240"
  },
  {
    "text": "types inside you get to say that this is one type that i'm going to give you later and then it'll work for that type",
    "start": "600240",
    "end": "606880"
  },
  {
    "text": "only but it's still portomorphic because you can give different type arguments in different places",
    "start": "606880",
    "end": "612079"
  },
  {
    "text": "and that has the benefit that you can because that type parameter has a name you can have things sync up so that they",
    "start": "612079",
    "end": "620079"
  },
  {
    "text": "the same type name the same type parameter appears in multiple places and you can sort of say well the same",
    "start": "620079",
    "end": "625360"
  },
  {
    "text": "whatever it is the same kind of thing that comes in is the kind of thing that comes out for instance which is exactly",
    "start": "625360",
    "end": "630480"
  },
  {
    "text": "what we need here right we need a collection for instance that has the same stuff coming in that's coming",
    "start": "630480",
    "end": "637120"
  },
  {
    "text": "out um into generics which is parametric polymorphism",
    "start": "637120",
    "end": "642880"
  },
  {
    "text": "most objective programming languages with types at this point say okay let's embrace that too so we have both kinds",
    "start": "642880",
    "end": "648640"
  },
  {
    "text": "in the language so that's sort of one of the first big imports from the functional space so",
    "start": "648640",
    "end": "654560"
  },
  {
    "text": "let's let's do that now let's see where do we start",
    "start": "654560",
    "end": "660480"
  },
  {
    "text": "um now we can have well instead of arraylist here we could we could now use",
    "start": "660480",
    "end": "666640"
  },
  {
    "text": "the new fancy generic collections that we have i'm i i'm cheating and having the imports in",
    "start": "666640",
    "end": "672560"
  },
  {
    "text": "another file or the using so you don't have to to bother with that so we can say list event here instead",
    "start": "672560",
    "end": "678800"
  },
  {
    "text": "is a new list of ant and now",
    "start": "678800",
    "end": "685920"
  },
  {
    "text": "as i'm gathering things up it should be graying out this i know that my um",
    "start": "686160",
    "end": "691680"
  },
  {
    "text": "uh my destination here is uh is actually a list event and not just a list of",
    "start": "691680",
    "end": "697200"
  },
  {
    "text": "whatever and so i can i can now get rid of this cast of death okay",
    "start": "697200",
    "end": "703839"
  },
  {
    "text": "back in business somebody wrote a generic collection for us we can use it",
    "start": "703839",
    "end": "709200"
  },
  {
    "text": "but of course now there are other i can i can write generic things too maybe i'm maybe i",
    "start": "709200",
    "end": "715600"
  },
  {
    "text": "want my predicate type to be more general or maybe i don't actually want to write new",
    "start": "715600",
    "end": "720639"
  },
  {
    "text": "delegate types for everything all the time so maybe we could say predicate of t",
    "start": "720639",
    "end": "726720"
  },
  {
    "text": "and have it work for all t's and not just for ants it still returns bull but",
    "start": "726720",
    "end": "732320"
  },
  {
    "text": "i can i now have a generic predicate type and i can then here say well it's actually here it's a predicate event",
    "start": "732320",
    "end": "737920"
  },
  {
    "text": "that i want and boom things don't work or we can we could actually go a step further and say well filtering isn't",
    "start": "737920",
    "end": "744639"
  },
  {
    "text": "really particularly about ins is it and now we can write our own generic",
    "start": "744639",
    "end": "750160"
  },
  {
    "text": "function a method that is a filter of t and now we get to say t up t in all the places",
    "start": "750160",
    "end": "757600"
  },
  {
    "text": "it's actually a predicate of t coming in and and an array of t and i'm returning",
    "start": "757600",
    "end": "762639"
  },
  {
    "text": "an array of t and in all the other places where it says int except one so you have to be a",
    "start": "762639",
    "end": "768160"
  },
  {
    "text": "little careful you know here here here",
    "start": "768160",
    "end": "774160"
  },
  {
    "text": "where else the end result of course",
    "start": "774160",
    "end": "780000"
  },
  {
    "text": "and you know so now i've completely generified the thing and this is the end i shouldn't replace because that's the",
    "start": "780000",
    "end": "786240"
  },
  {
    "text": "counter for the uh you know filling out the array so that um so that's why i didn't just do a search replace here um so there we go",
    "start": "786240",
    "end": "793440"
  },
  {
    "text": "now we all of a sudden we generified a thing it's fully strongly typed as if it was for a specific type but now",
    "start": "793440",
    "end": "800800"
  },
  {
    "text": "you can apply it everywhere and the full like generic generification is a strong strong tool um",
    "start": "800800",
    "end": "806560"
  },
  {
    "text": "and um it the there were some like",
    "start": "806560",
    "end": "811680"
  },
  {
    "text": "choices made in the different languages at the time that that actually were imbued with",
    "start": "811680",
    "end": "816800"
  },
  {
    "text": "destiny even much more than we realized at the time in java uh we on the i was",
    "start": "816800",
    "end": "822480"
  },
  {
    "text": "over here in the java side sorry camera person um we we were um",
    "start": "822480",
    "end": "829760"
  },
  {
    "text": "we we decided we couldn't change the jvm the runtime under java because it was um",
    "start": "829760",
    "end": "836000"
  },
  {
    "text": "you know too entrenched and how you couldn't control like what but java runtime they had out there so so all the",
    "start": "836000",
    "end": "841839"
  },
  {
    "text": "generics in java was done in the compiler by erasure which means you know there wasn't any generics at runtime it",
    "start": "841839",
    "end": "848399"
  },
  {
    "text": "was just there in the code for as much type checking as you could get but that meant that there were some",
    "start": "848399",
    "end": "854560"
  },
  {
    "text": "things like reflection and so on that didn't embrace it and there were certain certain holes in the experience",
    "start": "854560",
    "end": "860240"
  },
  {
    "text": "essentially and whereas in in.net and nc sharp we went all out and said yes generics goes",
    "start": "860240",
    "end": "867120"
  },
  {
    "text": "into the runtime and uh is shared across all the languages at target.net and it's a real",
    "start": "867120",
    "end": "873360"
  },
  {
    "text": "runtime thing question",
    "start": "873360",
    "end": "877560"
  },
  {
    "text": "so to repeat the question for the for the mic when did we know that we wanted generics in c sharp",
    "start": "884880",
    "end": "891440"
  },
  {
    "text": "so i wasn't there but i kind of was because in 99 i was an intern",
    "start": "891440",
    "end": "898399"
  },
  {
    "text": "i was doing my phd i was an intern at microsoft research cambridge which is where don simons if anybody's heard of",
    "start": "898399",
    "end": "904560"
  },
  {
    "text": "him the father of f sharp and there were a bunch of language people there so i got actually to be",
    "start": "904560",
    "end": "910560"
  },
  {
    "text": "privy to decisions that were secret for a number of years and i was under nda",
    "start": "910560",
    "end": "915600"
  },
  {
    "text": "until until things came out and they were already talking about net they weren't calling it that at the",
    "start": "915600",
    "end": "920959"
  },
  {
    "text": "time and they were already talking about generics for it and decisions were made that it would take too long",
    "start": "920959",
    "end": "926480"
  },
  {
    "text": "to make it work right um and we should have a version without it first so yeah",
    "start": "926480",
    "end": "932320"
  },
  {
    "text": "that i think that that answers your question precisely so it was always felt that",
    "start": "932320",
    "end": "937839"
  },
  {
    "text": "that we're gonna we're gonna need to do this and indeed generics was was the",
    "start": "937839",
    "end": "944079"
  },
  {
    "text": "pretty much the almost the only and and on last thing the language feature that was added to",
    "start": "944079",
    "end": "950959"
  },
  {
    "text": "the runtime for a very long time because after that the net became popular it was windows component and so we had the same",
    "start": "950959",
    "end": "957360"
  },
  {
    "text": "problem as java as the one causing java to not do it in the runtime which was too many people have it installed we",
    "start": "957360",
    "end": "963680"
  },
  {
    "text": "don't know which version of windows they have we have no way of you know making sure that they have the",
    "start": "963680",
    "end": "969600"
  },
  {
    "text": "right runtime features that we're compiling for so we stopped doing language features in the runtime after",
    "start": "969600",
    "end": "975199"
  },
  {
    "text": "that for a very very long time now we're doing it again and we might get to one at the end so",
    "start": "975199",
    "end": "980399"
  },
  {
    "text": "that's generics um and um",
    "start": "980399",
    "end": "985600"
  },
  {
    "text": "let's see if i can get back on track here so um it's well that's not generic in",
    "start": "985600",
    "end": "992560"
  },
  {
    "text": "that that's not all there is to say about generics because once you get these like very lovely um",
    "start": "992560",
    "end": "999519"
  },
  {
    "text": "generic collections for instance they can have smarter they can have smarter types smarter",
    "start": "999519",
    "end": "1006240"
  },
  {
    "text": "methods as well they can have generic methods so instead of instead of like doing this building this result array myself i could just",
    "start": "1006240",
    "end": "1013519"
  },
  {
    "text": "actually take that dst thing and just call two array on it",
    "start": "1013519",
    "end": "1019440"
  },
  {
    "text": "because now it knows its element type and you can build an array of the right of the right type and namely t",
    "start": "1019440",
    "end": "1025678"
  },
  {
    "text": "um you also notice um so which means i can i can delete these two lines of code i don't need that",
    "start": "1025679",
    "end": "1032160"
  },
  {
    "text": "anymore um so many more utilities now strongly type utilities become available",
    "start": "1032160",
    "end": "1039839"
  },
  {
    "text": "and one last thing to notice is that when i'm calling the generic method here i'm",
    "start": "1040079",
    "end": "1046319"
  },
  {
    "text": "not passing a type argument you need to pass a type argument to to the um to generic types but not your",
    "start": "1046319",
    "end": "1052640"
  },
  {
    "text": "generic methods and that again is a thing that type inference is something that we start stealing from functional",
    "start": "1052640",
    "end": "1058559"
  },
  {
    "text": "programming languages we can't do as much type inference in optic jointer programming languages as you can in a",
    "start": "1058559",
    "end": "1064000"
  },
  {
    "text": "functional language because of the subtype polymorphism it means that you can't actually you can there are many",
    "start": "1064000",
    "end": "1070240"
  },
  {
    "text": "places where you can't know the exact type where you could if you didn't have subtype polymorphism so we can't go all",
    "start": "1070240",
    "end": "1075440"
  },
  {
    "text": "out on on type inference which is probably all the same because it's confusing to a lot of people and it's a quiet taste so so we kind of we we have",
    "start": "1075440",
    "end": "1082559"
  },
  {
    "text": "to strike a balance there but it certainly makes sense here um so with that lovely generics um",
    "start": "1082559",
    "end": "1090720"
  },
  {
    "text": "we um we can also get out of this addiction to to arrays as the um that's kind of like",
    "start": "1090720",
    "end": "1098480"
  },
  {
    "text": "the um the the currency of collections being passed around because arrays are you know they're very low level",
    "start": "1098480",
    "end": "1104880"
  },
  {
    "text": "fixed size they expose too much they're unsafe in various ways because you pass your array",
    "start": "1104880",
    "end": "1111200"
  },
  {
    "text": "to someone and they they're messing with it while you're watching it somewhere else and you know that's just you know nasty so we can start having other uh",
    "start": "1111200",
    "end": "1119200"
  },
  {
    "text": "interfaces for instance that are that are more suitable so enumerable of t",
    "start": "1119200",
    "end": "1125120"
  },
  {
    "text": "is a good one i can return a number of t as well here",
    "start": "1125120",
    "end": "1131039"
  },
  {
    "text": "and and i don't even have to say two array i",
    "start": "1131039",
    "end": "1136160"
  },
  {
    "text": "can but i don't have to say two array because of course a list of t is also an inaudible so you know things get simpler",
    "start": "1136160",
    "end": "1143520"
  },
  {
    "text": "um we could do one better actually um we we also oh",
    "start": "1143520",
    "end": "1151360"
  },
  {
    "text": "oh well it's because i'm saying in the ray here yeah yeah i have to i have to just make all the changes okay",
    "start": "1151360",
    "end": "1158320"
  },
  {
    "text": "so oh int thank you",
    "start": "1158320",
    "end": "1165840"
  },
  {
    "text": "say are you developers or something it's like it's like you it's like you understand what i'm saying",
    "start": "1166320",
    "end": "1172720"
  },
  {
    "text": "hey i also debugged something once you know it's fun so um so um",
    "start": "1172880",
    "end": "1179440"
  },
  {
    "text": "so so far so good we one thing we actually decided was now we have a number of t it's like a very in",
    "start": "1179440",
    "end": "1185679"
  },
  {
    "text": "abstraction over just sequences of data we're going to meet this a lot more in c sharp three but already in c sharp two",
    "start": "1185679",
    "end": "1192240"
  },
  {
    "text": "we were like actually the compiler could help a lot with this kind of work here um of producing enumerables because they",
    "start": "1192240",
    "end": "1199360"
  },
  {
    "text": "don't have to be produced eagerly they don't have to have all the elements precomputed they can actually sort of be lazy and compute things along the way",
    "start": "1199360",
    "end": "1205679"
  },
  {
    "text": "and we can build a language feature to help with that and that's what we call iterators in c sharp they're called",
    "start": "1205679",
    "end": "1210880"
  },
  {
    "text": "generators in some other languages which is essentially you write a function and then once in a while you",
    "start": "1210880",
    "end": "1216400"
  },
  {
    "text": "say oh here's another element for the result and then you compute some more and then or here's another element for the result and it actually gets executed",
    "start": "1216400",
    "end": "1223360"
  },
  {
    "text": "lazily up to every every one of those points you you just pause and and give the result back and then the next time",
    "start": "1223360",
    "end": "1229760"
  },
  {
    "text": "the consumer asks for a result they come you execute some more so that's iterators into sharp that means we don't",
    "start": "1229760",
    "end": "1236000"
  },
  {
    "text": "even need like an accumulator we can just say if that thing you know just",
    "start": "1236000",
    "end": "1242799"
  },
  {
    "text": "yield return the value i'm not super excited about the syntax we chose",
    "start": "1242799",
    "end": "1249760"
  },
  {
    "text": "there i will just say i was not around um we liked keywords a lot still back then",
    "start": "1249760",
    "end": "1256000"
  },
  {
    "text": "we kind of do still a little bit and now i'm you know that's it",
    "start": "1256000",
    "end": "1261360"
  },
  {
    "text": "that's the filter method you know you you use you cycle through you yield",
    "start": "1261360",
    "end": "1266559"
  },
  {
    "text": "return something if you decide that they let me do that and that's it right so boom very nice",
    "start": "1266559",
    "end": "1273840"
  },
  {
    "text": "also in c sharp 2 we're like hey we've heard about lambda expressions",
    "start": "1274080",
    "end": "1279360"
  },
  {
    "text": "let's do not that something similar let's have anonymous",
    "start": "1279360",
    "end": "1285120"
  },
  {
    "text": "functions why do you have to declare all the functions that you want to pass that's just like a pain",
    "start": "1285120",
    "end": "1290559"
  },
  {
    "text": "let's get rid of all these declarations and stuff so instead of saying greater than five here what if i could just",
    "start": "1290559",
    "end": "1296720"
  },
  {
    "text": "write the function with the body and everything in place here so we come up with an elegant syntax saying delegate",
    "start": "1296720",
    "end": "1304720"
  },
  {
    "text": "delegate all the crap there we go",
    "start": "1304720",
    "end": "1309600"
  },
  {
    "text": "beautiful right it's well we can laugh now but you know it's certainly an improvement now",
    "start": "1311200",
    "end": "1317039"
  },
  {
    "text": "now um you know i'm free to just come up with functionality and pass it along and of course the compiler generates",
    "start": "1317039",
    "end": "1323440"
  },
  {
    "text": "something under the hood that's similar to before but hey all languages do do it like that pretty much so so great",
    "start": "1323440",
    "end": "1329200"
  },
  {
    "text": "um our first take on anonymous functions now c sharp three",
    "start": "1329200",
    "end": "1335440"
  },
  {
    "text": "now we have big ambitions this functional thing has really gotten into our blood and this is where i'm starting",
    "start": "1335440",
    "end": "1340480"
  },
  {
    "text": "to be around so i've witnessed more of this firsthand so in c sharp three we",
    "start": "1340480",
    "end": "1345600"
  },
  {
    "text": "we want to we want to solve querying once and for all",
    "start": "1345600",
    "end": "1350799"
  },
  {
    "text": "the functional languages can do it we can do it too so we want to mainstream functional approaches to solving",
    "start": "1350799",
    "end": "1357280"
  },
  {
    "text": "querying let's do that and we have i mean filter is a is a great example like it's it's a it's a",
    "start": "1357280",
    "end": "1363440"
  },
  {
    "text": "function that does querying uh a one one aspect of querying we kind of have the generics in place to do this",
    "start": "1363440",
    "end": "1370400"
  },
  {
    "text": "um why don't we why don't we actually um declare an even more general library",
    "start": "1370400",
    "end": "1377440"
  },
  {
    "text": "of function types and then we also declare a library of of um",
    "start": "1377440",
    "end": "1382559"
  },
  {
    "text": "querying methods and and get all that stuff working",
    "start": "1382559",
    "end": "1388000"
  },
  {
    "text": "um so we um so instead of just having predicate of t",
    "start": "1388000",
    "end": "1394799"
  },
  {
    "text": "we we create a family families have functions called called func and action func for the ones that return stuff um",
    "start": "1394799",
    "end": "1402960"
  },
  {
    "text": "so funk of t1 comma t result or something like that",
    "start": "1402960",
    "end": "1408159"
  },
  {
    "text": "um that take a t and return a t result so that's what the funcs look like take",
    "start": "1408159",
    "end": "1414559"
  },
  {
    "text": "a t1 here and we just declare them in the core library so i don't even have to do it here they're available to everyone",
    "start": "1414559",
    "end": "1420960"
  },
  {
    "text": "who wants to be a little bit functional and uh and we can just uh here actually",
    "start": "1420960",
    "end": "1426640"
  },
  {
    "text": "it doesn't predicate us also actually in the core libraries from from back back way way back when so it doesn't",
    "start": "1426640",
    "end": "1432400"
  },
  {
    "text": "give me a red squiggle here but let's say funk of t comma bool instead",
    "start": "1432400",
    "end": "1438320"
  },
  {
    "text": "to describe the function we're passing in here um and then instead of me writing the the",
    "start": "1438320",
    "end": "1445440"
  },
  {
    "text": "filter method um uh as kind of a one thing that you quickly find out when you want to you",
    "start": "1445440",
    "end": "1452000"
  },
  {
    "text": "want to query things is hey i want to i want to filter some more for instance i want to call query methods on top of query methods so i could call filter",
    "start": "1452000",
    "end": "1458799"
  },
  {
    "text": "twice you know i could say filter on the result of the first filter",
    "start": "1458799",
    "end": "1464880"
  },
  {
    "text": "comma you know some other delegate thing and",
    "start": "1464880",
    "end": "1470559"
  },
  {
    "text": "you know it quickly becomes long um i should probably done lambda at first shouldn't i",
    "start": "1470559",
    "end": "1476240"
  },
  {
    "text": "i'm going to be doing more typing okay hold that thought let me do let me switch to lambdas quickly",
    "start": "1476240",
    "end": "1483440"
  },
  {
    "text": "we get we get better syntax that's actual lambdas you can do this it's a little shorter or",
    "start": "1483440",
    "end": "1489840"
  },
  {
    "text": "we have so there's still a like a statement body there or we can actually do um",
    "start": "1489840",
    "end": "1497279"
  },
  {
    "text": "just an extra single expression and now it starts it starts being a little expression oriented like the like the",
    "start": "1497279",
    "end": "1503440"
  },
  {
    "text": "functional languages that's kind of kind of exciting but but we still have the problem now if i want to filter that one",
    "start": "1503440",
    "end": "1508960"
  },
  {
    "text": "some more i can say int y arrow something stuff um oh it needs to",
    "start": "1508960",
    "end": "1516400"
  },
  {
    "text": "be in parens here um actually does it you know lambda you can act you don't actually have to say the",
    "start": "1516400",
    "end": "1522559"
  },
  {
    "text": "type if it's given from the from context you don't have to say it that's kind of cool um",
    "start": "1522559",
    "end": "1527600"
  },
  {
    "text": "but so why i want to get the ones that are even stupid example but just you know",
    "start": "1527600",
    "end": "1534720"
  },
  {
    "text": "equals zero you know i can i can compose my",
    "start": "1534720",
    "end": "1540799"
  },
  {
    "text": "my query methods but it sucks right i'm composing sort of",
    "start": "1540799",
    "end": "1545919"
  },
  {
    "text": "inside out like this first stuff is in the middle and then i'm slapping stuff on both sides of it and it's completely",
    "start": "1545919",
    "end": "1552080"
  },
  {
    "text": "unreadable well what do the functional people do when they i mean they doing this stuff how do they do it well they have",
    "start": "1552080",
    "end": "1557440"
  },
  {
    "text": "pipelining operators you can call functions like this but you can also pipeline so in a functional language what you would do is you would start out",
    "start": "1557440",
    "end": "1564000"
  },
  {
    "text": "with the array on the left side and then you would um so let me let me do some horrendous uh",
    "start": "1564000",
    "end": "1570640"
  },
  {
    "text": "doctoring here you start out with the array you would have some kind of pipeline operator which we don't have in",
    "start": "1570640",
    "end": "1576000"
  },
  {
    "text": "c sharp and you pass it in to filter filtering the first thing uh and that that's just the implicit",
    "start": "1576000",
    "end": "1582799"
  },
  {
    "text": "first argument for it there and then you'd pipe that into filtering the second thing",
    "start": "1582799",
    "end": "1590480"
  },
  {
    "text": "and now you have things in the right order they're sort of cascading beautifully in the order that you're doing them it's",
    "start": "1590480",
    "end": "1596880"
  },
  {
    "text": "kind of fluent man as we said so um so that's that's",
    "start": "1596880",
    "end": "1602159"
  },
  {
    "text": "can we do something like that into sharpening that's where extension we come up with extension methods which is essentially just to solve this little",
    "start": "1602159",
    "end": "1608720"
  },
  {
    "text": "problem in the beginning they turn out to be like extremely useful in extremely many scenarios we're still being",
    "start": "1608720",
    "end": "1614159"
  },
  {
    "text": "inspired by them and we want to do more with them um where what you're saying is we're just",
    "start": "1614159",
    "end": "1619279"
  },
  {
    "text": "what if you just pretend that the static method or this function is actually like a an and um",
    "start": "1619279",
    "end": "1625760"
  },
  {
    "text": "it's a i can't do it with a um",
    "start": "1625760",
    "end": "1630400"
  },
  {
    "text": "i can't do it with just this uh this method here because it's not actually um it's not declared in a proper space",
    "start": "1630799",
    "end": "1637200"
  },
  {
    "text": "but we can do the syntax is like this uh we just pretend it's an instance method",
    "start": "1637200",
    "end": "1642399"
  },
  {
    "text": "on the first the first argument and now i can go and add method what looks like instance methods to other people's types",
    "start": "1642399",
    "end": "1650720"
  },
  {
    "text": "and that kind of gives you that flow so luckily i don't have to like go and do it properly here because it turns out",
    "start": "1650720",
    "end": "1657360"
  },
  {
    "text": "that method just like filter is being added to the libraries at the same time and now we can just do the where stuff",
    "start": "1657360",
    "end": "1664399"
  },
  {
    "text": "so we can get rid of our own filter method and use the one that's part of the query library that we are now providing",
    "start": "1664399",
    "end": "1670880"
  },
  {
    "text": "okay so we can break it up a little here and now it starts to kind of look decent right",
    "start": "1670880",
    "end": "1677120"
  },
  {
    "text": "now we have a select for projecting because why would we call it project we have um",
    "start": "1677120",
    "end": "1684000"
  },
  {
    "text": "various methods i'll tell you why we call it select that's because another place where you do querying is is in um you know sql which is also kind",
    "start": "1684000",
    "end": "1692080"
  },
  {
    "text": "of functional right it's it's also just i mean you can they're",
    "start": "1692080",
    "end": "1697120"
  },
  {
    "text": "aspects of sql where you can mutate stuff and actually get things into the database but the actual querying is functional too and so we want to provide",
    "start": "1697120",
    "end": "1703919"
  },
  {
    "text": "syntactic sugar for for querying on top of methods like this where you can say",
    "start": "1703919",
    "end": "1710559"
  },
  {
    "text": "from [Music] from value",
    "start": "1710559",
    "end": "1716240"
  },
  {
    "text": "in i just call them x i like x from x in array where",
    "start": "1716240",
    "end": "1721440"
  },
  {
    "text": "the keyword where x is greater than 5",
    "start": "1721440",
    "end": "1728480"
  },
  {
    "text": "and where something else where y",
    "start": "1729279",
    "end": "1734559"
  },
  {
    "text": "let's call it x again then because we are now using the same variable name all the way down",
    "start": "1734559",
    "end": "1739760"
  },
  {
    "text": "select something so we now have query syntax select you know maybe just x",
    "start": "1739760",
    "end": "1747360"
  },
  {
    "text": "so and and the point here is it looks like sql is a little different because in sql they start with a select clause",
    "start": "1747360",
    "end": "1753440"
  },
  {
    "text": "which means we don't like that in programming languages because they start out by describing the result and what",
    "start": "1753440",
    "end": "1759520"
  },
  {
    "text": "you want is to start out by describing the where the the source like where do",
    "start": "1759520",
    "end": "1765120"
  },
  {
    "text": "things come from so you can get types going and have your tooling kind of help you out as you type the code from one",
    "start": "1765120",
    "end": "1770399"
  },
  {
    "text": "end to another so we want to start with the array figure out what this type is get completion in our in our clauses uh",
    "start": "1770399",
    "end": "1777200"
  },
  {
    "text": "and so on so that's that's a programming proper programming language way of doing it sorry sql folks but you you got it",
    "start": "1777200",
    "end": "1783679"
  },
  {
    "text": "wrong and you didn't think about id you didn't think about ides back in 1970 when i was",
    "start": "1783679",
    "end": "1789679"
  },
  {
    "text": "ide focused uh language design that's that's the way that's why we have",
    "start": "1789679",
    "end": "1794880"
  },
  {
    "text": "typescript so um so great but now that actually just",
    "start": "1794880",
    "end": "1800559"
  },
  {
    "text": "queries my in-memory data like wouldn't it be cool if i could actually use the same syntax and",
    "start": "1800559",
    "end": "1806960"
  },
  {
    "text": "both the syntactic sugar and actually also the method called syntax to query actual sql databases that and with this",
    "start": "1806960",
    "end": "1812960"
  },
  {
    "text": "you know no difference in syntax and that's where we get to another functional uh yet another functional uh",
    "start": "1812960",
    "end": "1818880"
  },
  {
    "text": "loan which is um code quotations so",
    "start": "1818880",
    "end": "1824080"
  },
  {
    "text": "uh in lisp for instance it's all based around the fact that code is data like",
    "start": "1824080",
    "end": "1829360"
  },
  {
    "text": "code and data are no different and you can always easily take code and represent it as a data structure",
    "start": "1829360",
    "end": "1835200"
  },
  {
    "text": "well that's kind of cool because then you can do meta programming you can take that data structure and do stuff with it and one of the things you could do with",
    "start": "1835200",
    "end": "1840320"
  },
  {
    "text": "a data structure representing a query is you can translate it to sql and send it to a sql database and have it run a sql",
    "start": "1840320",
    "end": "1847440"
  },
  {
    "text": "and have the result come back and then you do a little translating back and now you have an object oriented",
    "start": "1847440",
    "end": "1852880"
  },
  {
    "text": "an object relational model so if we take that",
    "start": "1852880",
    "end": "1858879"
  },
  {
    "text": "let's just say var here more type inference if we take that array and say",
    "start": "1859600",
    "end": "1866480"
  },
  {
    "text": "um is it too queryable or ask variable listening squarable there you go and say as querable",
    "start": "1866480",
    "end": "1873600"
  },
  {
    "text": "i'm sort of cheating a little i'm representing it as uh now acquirable is like a representative of some other data source",
    "start": "1873600",
    "end": "1881760"
  },
  {
    "text": "that uses quote quotation in order to um to",
    "start": "1881760",
    "end": "1887200"
  },
  {
    "text": "do the querying um so when i do that what changes as well not much you know",
    "start": "1887200",
    "end": "1892240"
  },
  {
    "text": "it's i get an iquerable back instead whoop to do but if we go and um and look at um if you go and look at that query",
    "start": "1892240",
    "end": "1899360"
  },
  {
    "text": "um query dot you can see that it has something inside called an expression and that expression",
    "start": "1899360",
    "end": "1906159"
  },
  {
    "text": "in fact represents the the data structure of all this query",
    "start": "1906159",
    "end": "1912880"
  },
  {
    "text": "okay so we're building up instead of having the code just code that we can run instead we build up a data structure",
    "start": "1912880",
    "end": "1920159"
  },
  {
    "text": "with exactly the same syntax um and now querying of in-memory data and occurring",
    "start": "1920159",
    "end": "1925600"
  },
  {
    "text": "of of um of sql databases looks the same just like you can do in",
    "start": "1925600",
    "end": "1931760"
  },
  {
    "text": "in many functional languages that have code quotation so yet another loan there",
    "start": "1931760",
    "end": "1937039"
  },
  {
    "text": "and i just i just cheated a little bit and showed you var as well which is like the last um",
    "start": "1937039",
    "end": "1944799"
  },
  {
    "text": "one more concession to type inference like very simple one it's like why do i have to say the types all the time it's really bothersome to have to say int can",
    "start": "1944799",
    "end": "1951200"
  },
  {
    "text": "you let me say a three-letter keyword instead obviously that's not the best example",
    "start": "1951200",
    "end": "1957120"
  },
  {
    "text": "this is the best example right i don't wanna have to write iquerable of blah blah blah i wanna",
    "start": "1957120",
    "end": "1962480"
  },
  {
    "text": "i want to just say hey the thing you know give me the thing if it's clear from context that it's",
    "start": "1962480",
    "end": "1968799"
  },
  {
    "text": "what kind of thing it roughly is you know who cares so so that's uh that's functional up until",
    "start": "1968799",
    "end": "1974880"
  },
  {
    "text": "c sharp three it's a good a good time to ask for questions we're about halfway through the story and about halfway through the hour so still on track",
    "start": "1974880",
    "end": "1982399"
  },
  {
    "text": "anything any thoughts coming up here questions meta questions programming questions meta programming",
    "start": "1982399",
    "end": "1988080"
  },
  {
    "text": "questions yes",
    "start": "1988080",
    "end": "1991559"
  },
  {
    "text": "what made me decide anders heilsberg made me decide",
    "start": "1994960",
    "end": "2000960"
  },
  {
    "text": "um it okay a short short version of the story",
    "start": "2000960",
    "end": "2006799"
  },
  {
    "text": "i was i was a professor i wasn't liking it too much i was collaborating with the java team",
    "start": "2006799",
    "end": "2013840"
  },
  {
    "text": "at sun microsystems then had a great time doing real world you know",
    "start": "2013840",
    "end": "2020080"
  },
  {
    "text": "you know real world language design for real customers they got to do it all day i got to do it",
    "start": "2020080",
    "end": "2026559"
  },
  {
    "text": "like whenever i could get away from teaching and stuff and i just like well i have a great time when i'm working",
    "start": "2026559",
    "end": "2032720"
  },
  {
    "text": "with them and they make twice as much money as me at least i think um so it's like maybe",
    "start": "2032720",
    "end": "2038000"
  },
  {
    "text": "i'm not in the right career here and as i was thinking that there was a conference in oahu's",
    "start": "2038000",
    "end": "2044080"
  },
  {
    "text": "anders was there talking about how they were going to do generics in c sharp i was there talking about how we were",
    "start": "2044080",
    "end": "2049440"
  },
  {
    "text": "going to do generics in java you know the rest is history",
    "start": "2049440",
    "end": "2055599"
  },
  {
    "text": "he he had money i didn't so he hired he hired me not the other way around um",
    "start": "2055599",
    "end": "2064000"
  },
  {
    "text": "actually also i liked how he talked about language design whenev when i was involved in java language design it was",
    "start": "2064000",
    "end": "2069440"
  },
  {
    "text": "always like there was always a lot of stop energies like we can't do this because and we can't do this because and",
    "start": "2069440",
    "end": "2074480"
  },
  {
    "text": "he had a bunch of can-do attitude you know a small example the now the the generic",
    "start": "2074480",
    "end": "2081200"
  },
  {
    "text": "method is gone from the screen here but in java they said oh we can't put the type parameter for generic methods after",
    "start": "2081200",
    "end": "2087919"
  },
  {
    "text": "the parameters because that might be a syntactic ambiguity in rare cases and in c sharp when he showed examples",
    "start": "2087919",
    "end": "2095679"
  },
  {
    "text": "that would also be a syntactic ambiguity in rare cases in c sharp because syntax is a little bit alike um but they just",
    "start": "2095679",
    "end": "2102720"
  },
  {
    "text": "put it there anyway and i asked him after like how how do you do that he's like ah we just do some we just do some",
    "start": "2102720",
    "end": "2108560"
  },
  {
    "text": "tricks in the compiler it's not like lr1 or whatever we it's fine we figure it out and you know and and who cares about",
    "start": "2108560",
    "end": "2115040"
  },
  {
    "text": "those rare cases you know we we come up with a rule that works 97 of the time if",
    "start": "2115040",
    "end": "2120240"
  },
  {
    "text": "you run into it and does the right thing mostly and and we're good there was always like we can probably solve that",
    "start": "2120240",
    "end": "2126400"
  },
  {
    "text": "problem attitude and that spoke to me in a way and that's still the case and i that's still why i",
    "start": "2126400",
    "end": "2131680"
  },
  {
    "text": "love being there so oh thanks for that question now i'm going",
    "start": "2131680",
    "end": "2137119"
  },
  {
    "text": "to have a tear in my eye for the rest of the day anything else i want to hear about my childhood",
    "start": "2137119",
    "end": "2145559"
  },
  {
    "text": "why oh great question so why why are the delegate types that",
    "start": "2152720",
    "end": "2159200"
  },
  {
    "text": "have the same shape like the same signature why why aren't they interchangeable um",
    "start": "2159200",
    "end": "2164320"
  },
  {
    "text": "so there's so there used to be predicate of t and then then it turned into we started using funk of",
    "start": "2164320",
    "end": "2172079"
  },
  {
    "text": "t kamabul and they're not actually interchangeable you can pass the same lambdas to them",
    "start": "2172079",
    "end": "2178320"
  },
  {
    "text": "but you can't pat you can't assign one to the other they're not structurally equivalent",
    "start": "2178320",
    "end": "2183599"
  },
  {
    "text": "so and that comes back to you know i kind of hinted that i'm not a super fan of delegates",
    "start": "2183599",
    "end": "2190880"
  },
  {
    "text": "um and one of the problems with them is that they're a nominal type they have a declaration and just like classes that",
    "start": "2190880",
    "end": "2195920"
  },
  {
    "text": "look the same you can't take an object of a class and duct type it to another class that happens to be the same",
    "start": "2195920",
    "end": "2203359"
  },
  {
    "text": "it's all based on the declarations it's very very nominal as we say and the same is true for",
    "start": "2203359",
    "end": "2209839"
  },
  {
    "text": "for the the delegate types there are actually classes and they are nominally tight",
    "start": "2209839",
    "end": "2214880"
  },
  {
    "text": "now in visual basic for instance vb.net",
    "start": "2214880",
    "end": "2221279"
  },
  {
    "text": "they paper over this by inserting implicit like wrapper",
    "start": "2221520",
    "end": "2227680"
  },
  {
    "text": "functions to translate from one to another so there you get the great experience of it all just assigns to",
    "start": "2227680",
    "end": "2233440"
  },
  {
    "text": "each other it looks extremely structural but the problem is it isn't like it comes with a cost like you're rapping",
    "start": "2233440",
    "end": "2238880"
  },
  {
    "text": "more and more if you keep if you if you keep passing back and forth you get like layers and layers of oh here's a",
    "start": "2238880",
    "end": "2244400"
  },
  {
    "text": "predicate of a funk of a predicate of you know all the way so um",
    "start": "2244400",
    "end": "2249440"
  },
  {
    "text": "uh so we don't let you we don't let you go down that rabbit hole in c sharp um",
    "start": "2249440",
    "end": "2254640"
  },
  {
    "text": "we think about it sometimes and we also think about well could we just do better function types",
    "start": "2254640",
    "end": "2260880"
  },
  {
    "text": "but then you have a library that is gigantic and that is using delegates everywhere and you look at",
    "start": "2260880",
    "end": "2267119"
  },
  {
    "text": "that and you go hmm i wonder how we could do this and not mess up a million customers",
    "start": "2267119",
    "end": "2273280"
  },
  {
    "text": "you know or you know we choose not to roll it out in our big library and just make it you know an option for new code",
    "start": "2273280",
    "end": "2280160"
  },
  {
    "text": "and then it doesn't really there's no bang there right you know you don't get enough value so",
    "start": "2280160",
    "end": "2285839"
  },
  {
    "text": "that's a tough problem that you know the problem of legacy code and the problem of of compatibility uh shoots down a lot",
    "start": "2285839",
    "end": "2292560"
  },
  {
    "text": "of good feature ideas and um and uh we haven't found a way around this one we we are it's one of several",
    "start": "2292560",
    "end": "2300400"
  },
  {
    "text": "interestingly uh functional functionally inspired topics that we'll be discussing this summer we're having sort of a",
    "start": "2300400",
    "end": "2306640"
  },
  {
    "text": "series of summer camps on the team where we'll discuss topics that are normally out of bounds because we don't know how to deal with them",
    "start": "2306640",
    "end": "2313680"
  },
  {
    "text": "and this is one of them so maybe one day we'll figure out a way to make that good",
    "start": "2313680",
    "end": "2320400"
  },
  {
    "text": "yeah so the question is um is the um it's a sequel style syntax still in",
    "start": "2334400",
    "end": "2342800"
  },
  {
    "text": "in broad use um and and it's true it does feel very different from the rest of the language",
    "start": "2342800",
    "end": "2348640"
  },
  {
    "text": "it's yeah it's just it's like you enter another world",
    "start": "2348640",
    "end": "2353560"
  },
  {
    "text": "um yeah we have to maintain compatibility with it but also furthermore i think it is still it is still used a bit like a",
    "start": "2355920",
    "end": "2363119"
  },
  {
    "text": "bunch not more than a bit actually a bunch of people actually do prefer the method called syntax even when they are using",
    "start": "2363119",
    "end": "2368800"
  },
  {
    "text": "the query methods i find that if i have to do",
    "start": "2368800",
    "end": "2374960"
  },
  {
    "text": "more than one from from x in blah from y in",
    "start": "2374960",
    "end": "2381440"
  },
  {
    "text": "x dot or something like that then writing the corresponding query with method calls becomes um",
    "start": "2381440",
    "end": "2390240"
  },
  {
    "text": "becomes mind-blowingly hard and you have to use select many and select many is mind-blowing and so",
    "start": "2390400",
    "end": "2397200"
  },
  {
    "text": "uh i always if i have to if i have to like do more than one from if i have to like dig into data with froms i i switch",
    "start": "2397200",
    "end": "2403760"
  },
  {
    "text": "to career syntax and let the compiler figure it out for me because i my brain can't handle it it's all actually",
    "start": "2403760",
    "end": "2409280"
  },
  {
    "text": "it's all down to moan ads so how many people here know about monads",
    "start": "2409280",
    "end": "2414400"
  },
  {
    "text": "yes that's more than i would have expected actually it's this concept that is super central",
    "start": "2414400",
    "end": "2419599"
  },
  {
    "text": "to a bunch of functional type functional programming and nobody understands it a bunch of people claim that they do but they're",
    "start": "2419599",
    "end": "2425760"
  },
  {
    "text": "actually just you know it's it's a collective kind of like it's it's a hoax um they don't",
    "start": "2425760",
    "end": "2432240"
  },
  {
    "text": "not for long anyway i've i've understood it many times and then you know the next day i was like what was it again so",
    "start": "2432240",
    "end": "2437520"
  },
  {
    "text": "maybe i was just streaming it it made it totally makes sense at the time but query query expressions",
    "start": "2437520",
    "end": "2444640"
  },
  {
    "text": "they are a monad they're a language support for a monad and um and when you use more than one from that",
    "start": "2444640",
    "end": "2452160"
  },
  {
    "text": "is where you get into monetic territory where the the select many is the thing that makes them makes them a moan ad and",
    "start": "2452160",
    "end": "2458720"
  },
  {
    "text": "that's that's exactly why it gets mind-blowing to do it directly it's because it's monad and you want syntax",
    "start": "2458720",
    "end": "2464160"
  },
  {
    "text": "for that but other than that people have different styles there are also people who work on low level code they'll be",
    "start": "2464160",
    "end": "2469920"
  },
  {
    "text": "like this is way too inefficient um it does you there's all this laziness right that the iterators are generating things",
    "start": "2469920",
    "end": "2477760"
  },
  {
    "text": "along the way which means you have all this like you have a bunch of structure you have",
    "start": "2477760",
    "end": "2483040"
  },
  {
    "text": "all these it calls through interfaces and so on and so if you're doing performance intensive code one of the",
    "start": "2483040",
    "end": "2488560"
  },
  {
    "text": "things that people look for in code reviews is oh oh you have a query there well fix that",
    "start": "2488560",
    "end": "2494560"
  },
  {
    "text": "you know go back to ugly array-based stuff because then it's going to be faster",
    "start": "2494560",
    "end": "2500160"
  },
  {
    "text": "so i i will say that entity framework",
    "start": "2500160",
    "end": "2505839"
  },
  {
    "text": "alive and kicking offers up you know a query provider implementation",
    "start": "2505839",
    "end": "2511599"
  },
  {
    "text": "and people do use that and they do use the qree syntax when they're interacting with that because it is a database",
    "start": "2511599",
    "end": "2517760"
  },
  {
    "text": "technology outside of that maybe not so much okay",
    "start": "2517760",
    "end": "2523119"
  },
  {
    "text": "all right uh one more time",
    "start": "2523119",
    "end": "2530440"
  },
  {
    "text": "that's true yes",
    "start": "2538160",
    "end": "2542119"
  },
  {
    "text": "so that's a great question because um and we might touch on it a little bit later um",
    "start": "2550720",
    "end": "2557119"
  },
  {
    "text": "so let me repeat again um the uh one thing you can do in the career syntax is you can use let to actually",
    "start": "2557119",
    "end": "2564400"
  },
  {
    "text": "introduce more temporary variables inside of the query i haven't done it in many years actually let's see if we can",
    "start": "2564400",
    "end": "2570079"
  },
  {
    "text": "do that let y equal x times two or something like that",
    "start": "2570079",
    "end": "2575280"
  },
  {
    "text": "yeah it worked at least it compiles so so now so now the rest of the query has access to x and y",
    "start": "2575280",
    "end": "2581760"
  },
  {
    "text": "um and um and that's really useful because you have sort of like variable declaration",
    "start": "2581760",
    "end": "2588160"
  },
  {
    "text": "inside of an expression rather than as a separate statement and that has continued to doggers that statement",
    "start": "2588160",
    "end": "2595359"
  },
  {
    "text": "based um approach to variable declarations has continued to dog us and in later versions of c sharp there are more and",
    "start": "2595359",
    "end": "2602079"
  },
  {
    "text": "more places where you can now declare variables inside of um inside of an expression we haven't done",
    "start": "2602079",
    "end": "2608319"
  },
  {
    "text": "it completely generally we had a proposal for it but we never went that far but there are many situations now where you can declare an inline variable",
    "start": "2608319",
    "end": "2615440"
  },
  {
    "text": "particularly in pattern matching which we're going to get to soon so that even provides like a i could segue for that",
    "start": "2615440",
    "end": "2621200"
  },
  {
    "text": "um so you know at the and another like big difference is",
    "start": "2621200",
    "end": "2627680"
  },
  {
    "text": "functional languages tend to be very expression based typically a function",
    "start": "2627680",
    "end": "2632800"
  },
  {
    "text": "doesn't have side effects right in the pure uh function uh functional uh sense so you don't really need statements you",
    "start": "2632800",
    "end": "2639440"
  },
  {
    "text": "just need an expression saying what the whole thing is you know and then you stick it together you put sub",
    "start": "2639440",
    "end": "2644960"
  },
  {
    "text": "expressions inside and it's all expression based and so you need things like variable declaration to be expression-based",
    "start": "2644960",
    "end": "2650319"
  },
  {
    "text": "and the more expression-based the more we get inspired by that in c-sharp the more of a shortcoming it becomes that",
    "start": "2650319",
    "end": "2655920"
  },
  {
    "text": "variable declaration isn't one of them so great great point and this is a way to sneak it in you can't do that with",
    "start": "2655920",
    "end": "2661520"
  },
  {
    "text": "method call syntax because it does sneaky things under the hood it builds little like tubal-like things to keep",
    "start": "2661520",
    "end": "2667200"
  },
  {
    "text": "track of all the variables under the hood okay yep okay let's uh let's fast forward a",
    "start": "2667200",
    "end": "2674400"
  },
  {
    "text": "little bit then we did dynamic that was certainly not very functional t-sharp four c sharp five we did async which was",
    "start": "2674400",
    "end": "2681280"
  },
  {
    "text": "potentially very functional f sharp already had a solution to async which was also sort of magnetic",
    "start": "2681280",
    "end": "2687359"
  },
  {
    "text": "and which is beautiful but is very ill-suited for a",
    "start": "2687359",
    "end": "2692560"
  },
  {
    "text": "predominantly imperative language so we went in a different direction with async and the",
    "start": "2692560",
    "end": "2698000"
  },
  {
    "text": "f-sharp and the generally functional approach to async is quite different from",
    "start": "2698000",
    "end": "2703440"
  },
  {
    "text": "from the imperative approach that we use in c-sharp essentially they use",
    "start": "2703440",
    "end": "2709280"
  },
  {
    "text": "an approach where they build up the whole control flow of the async ahead of time and then you kind of pull a handle",
    "start": "2709280",
    "end": "2715040"
  },
  {
    "text": "in and and it runs it's like you built all the pipes and then you turn on the water um",
    "start": "2715040",
    "end": "2721440"
  },
  {
    "text": "and in uh and in our async we sort of more like um",
    "start": "2721440",
    "end": "2726480"
  },
  {
    "text": "laying out the pipes as the water is coming it's uh we sometimes call it cold and hot async like we work with tasks",
    "start": "2726480",
    "end": "2732720"
  },
  {
    "text": "which are which are uh that's our currency and async which are things that are already happening things that are",
    "start": "2732720",
    "end": "2740160"
  },
  {
    "text": "already concurrently operating and then you can take a task and then you can say well i'm ready for you are you ready for",
    "start": "2740160",
    "end": "2747119"
  },
  {
    "text": "me and get a result out of them so that's all much more imperative fits better with imperial workflow so there",
    "start": "2747119",
    "end": "2752160"
  },
  {
    "text": "we didn't go the functional way we don't always do it um in c sharp six",
    "start": "2752160",
    "end": "2758640"
  },
  {
    "text": "we started like getting interested in the expression-based stuff again though so i'm going to switch to a different a different file here",
    "start": "2758640",
    "end": "2765359"
  },
  {
    "text": "um so one thing that you know we really like the expression bodies of lambdas",
    "start": "2765359",
    "end": "2770640"
  },
  {
    "text": "we're like why should only lambdas be allowed to have expression bodies why can't all our functions all our function",
    "start": "2770640",
    "end": "2776160"
  },
  {
    "text": "members have expression bodies and we're like okay c sharp six we did kind of half of them and in c7 we did the rest",
    "start": "2776160",
    "end": "2783839"
  },
  {
    "text": "so now all function members in c sharp can have expression bodies where you just put",
    "start": "2783839",
    "end": "2789200"
  },
  {
    "text": "that lambda arrow there the fat arrow as we shouldn't call it um and um",
    "start": "2789200",
    "end": "2795280"
  },
  {
    "text": "and uh you get it you know you don't have to say return if your only statement is return something you know",
    "start": "2795280",
    "end": "2802160"
  },
  {
    "text": "cut the boiler plate but it's just syntactic sugar right um",
    "start": "2802160",
    "end": "2807760"
  },
  {
    "text": "so but coming to c sharp seven uh we're starting to think about more",
    "start": "2807760",
    "end": "2812960"
  },
  {
    "text": "fundamental things again so not not so much in the syntax syntactic sugar you know as a feel kind",
    "start": "2812960",
    "end": "2820319"
  },
  {
    "text": "of of layer but really like oh oh object oriented program is kind of",
    "start": "2820319",
    "end": "2826960"
  },
  {
    "text": "screwed in these new scenarios that are becoming very predominant and and um",
    "start": "2826960",
    "end": "2833119"
  },
  {
    "text": "and widespread essentially when it comes to cloud programming",
    "start": "2833119",
    "end": "2840319"
  },
  {
    "text": "history is on the side of functional programming i'm sorry object-oriented programming is not good for that if you think about and that comes down to how",
    "start": "2840559",
    "end": "2848640"
  },
  {
    "text": "how you describe operations over types of data in",
    "start": "2848640",
    "end": "2854160"
  },
  {
    "text": "in both object-oriented and functional programming there are ways that you can",
    "start": "2854160",
    "end": "2859200"
  },
  {
    "text": "write functions so that they have appropriate behavior for each shape of data for each type but those ways are",
    "start": "2859200",
    "end": "2866240"
  },
  {
    "text": "very different they're like actually i think probably if eric meyer was here",
    "start": "2866240",
    "end": "2871280"
  },
  {
    "text": "he would say that there's a duality like they're completely like um the opposite of each other um what we",
    "start": "2871280",
    "end": "2878400"
  },
  {
    "text": "what we do in in in classic object programming we love encapsulation we love saying the data is actually secret",
    "start": "2878400",
    "end": "2884559"
  },
  {
    "text": "i'm not even i'm not exposing it because then i can change it whenever i like and then i just offer up some functions and",
    "start": "2884559",
    "end": "2890720"
  },
  {
    "text": "i can have a class hierarchy with virtual functions that i can then describe for each type",
    "start": "2890720",
    "end": "2896000"
  },
  {
    "text": "of data what it does so so the super like idiotically simple example here is the",
    "start": "2896000",
    "end": "2901359"
  },
  {
    "text": "two string virtual method right where i'm i'm i am describing the string",
    "start": "2901359",
    "end": "2906400"
  },
  {
    "text": "representation of the object as a by overriding the virtual uh method",
    "start": "2906400",
    "end": "2913040"
  },
  {
    "text": "string great you know that means that whenever",
    "start": "2913040",
    "end": "2918079"
  },
  {
    "text": "i i write a new derived class from person here or from object actually in this",
    "start": "2918079",
    "end": "2923119"
  },
  {
    "text": "case you know i can just override that behavior to suit whatever my shape is and",
    "start": "2923119",
    "end": "2929599"
  },
  {
    "text": "somebody else can call it on the base class and not even know i exist but still get the right behavior",
    "start": "2929599",
    "end": "2935599"
  },
  {
    "text": "um excellent except when you have a world where",
    "start": "2935599",
    "end": "2940720"
  },
  {
    "text": "data is long-lived in the cloud maybe or in databases and whatnot and different",
    "start": "2940720",
    "end": "2945920"
  },
  {
    "text": "people are writing different functionality over the same data models well oops now it's not so good to",
    "start": "2945920",
    "end": "2951440"
  },
  {
    "text": "encapsulate those those behaviors with the data model right they you want to be independently",
    "start": "2951440",
    "end": "2957760"
  },
  {
    "text": "be able to express behaviors over the data model um that",
    "start": "2957760",
    "end": "2963680"
  },
  {
    "text": "that still depend on like it's still type specific but that uh",
    "start": "2963680",
    "end": "2969760"
  },
  {
    "text": "the the original type knows nothing about and that the different domains of of behavior have no idea",
    "start": "2969760",
    "end": "2977040"
  },
  {
    "text": "about each other so encapsulation is dead right you need for those scenarios you need the data to",
    "start": "2977040",
    "end": "2982800"
  },
  {
    "text": "be public and luckily we have you know auto properties to make that easy",
    "start": "2982800",
    "end": "2990000"
  },
  {
    "text": "but you and you need the functions to work from the outside but",
    "start": "2990000",
    "end": "2995119"
  },
  {
    "text": "in a c sharp six setting so let's let's say we're still in six doing something",
    "start": "2995119",
    "end": "3002160"
  },
  {
    "text": "let's say i wanna let's say i wanna write the two string method from the outside that's actually fairly",
    "start": "3002160",
    "end": "3007599"
  },
  {
    "text": "hard that's annoyingly clunky and and that you get back to that dying inside feeling um so uh so but let's try to do it i'm",
    "start": "3007599",
    "end": "3015359"
  },
  {
    "text": "making you all die a little bit inside i'm sorry we'll we'll revive that part and there'll be flowers and it'll be good uh in a minute",
    "start": "3015359",
    "end": "3021599"
  },
  {
    "text": "but you know um so let's say two string string let's call it",
    "start": "3021599",
    "end": "3027760"
  },
  {
    "text": "let's call it something else to render and",
    "start": "3027760",
    "end": "3033119"
  },
  {
    "text": "you take um you take a person it's not even generics involved here you",
    "start": "3033119",
    "end": "3039440"
  },
  {
    "text": "take a person p and then you want to render it according to which kind of you know which person",
    "start": "3039440",
    "end": "3044880"
  },
  {
    "text": "derived class it is um so we could do that we can say you know we have type testing in c sharp we",
    "start": "3044880",
    "end": "3050960"
  },
  {
    "text": "can say if p is a student and that's the only derived class that i actually put",
    "start": "3050960",
    "end": "3056880"
  },
  {
    "text": "in here but you know imagine there are dozens um for each of those you say if p is",
    "start": "3056880",
    "end": "3062319"
  },
  {
    "text": "student then do at least we have expression body members here no i can't do that here",
    "start": "3062319",
    "end": "3068559"
  },
  {
    "text": "return whatever the student does",
    "start": "3068559",
    "end": "3073760"
  },
  {
    "text": "okay i'm cheating a little using interpolated strings here return that",
    "start": "3073760",
    "end": "3079680"
  },
  {
    "text": "except of course um i have to dot my way into that public data no",
    "start": "3079680",
    "end": "3085680"
  },
  {
    "text": "problem but as i get to the student specific property here oh oh you know i",
    "start": "3085680",
    "end": "3092480"
  },
  {
    "text": "i already i just asked but i already forgot that it was a student so i don't get to",
    "start": "3092480",
    "end": "3097760"
  },
  {
    "text": "oh if only we were typescript you know typescript it it has flow-based typing",
    "start": "3097760",
    "end": "3103520"
  },
  {
    "text": "you know a variable you know if you figured out it wasn't something and then this branch then then you know it'll",
    "start": "3103520",
    "end": "3108880"
  },
  {
    "text": "know you're something else and it's beautiful but we can't that's that'll be super breaking in c sharp and also their compiler",
    "start": "3108880",
    "end": "3115280"
  },
  {
    "text": "is uh you know just thank god that they don't promise type safety let me just put it like that so um",
    "start": "3115280",
    "end": "3122480"
  },
  {
    "text": "so that is kind of annoying what to do well you know in c sharp six your best option is to you know cast",
    "start": "3122480",
    "end": "3129760"
  },
  {
    "text": "p to student knowing it will succeed because you're smarter than the compiler um",
    "start": "3129760",
    "end": "3134880"
  },
  {
    "text": "until you maintain your code a little bit and somebody else takes over and they they do a refactoring manually and",
    "start": "3134880",
    "end": "3141440"
  },
  {
    "text": "stuff blows up um but that we can do that and then el does an else you know else return",
    "start": "3141440",
    "end": "3148480"
  },
  {
    "text": "that other stuff let's just get it in there so we can um so we can mutate the code a little bit um return that stuff",
    "start": "3148480",
    "end": "3156960"
  },
  {
    "text": "um and of course there would be else ifs um for every other like derived class",
    "start": "3156960",
    "end": "3162000"
  },
  {
    "text": "here so here we here we get here we get to do p this and p at that so far so good but functional languages they do",
    "start": "3162000",
    "end": "3168319"
  },
  {
    "text": "this all the time and it's interesting to note that",
    "start": "3168319",
    "end": "3174880"
  },
  {
    "text": "there's a fundamental difference in how the um how the um",
    "start": "3174880",
    "end": "3181599"
  },
  {
    "text": "you know what kind of what kind of contract you have here when you use object-oriented programming as i said you can add a new class whenever you",
    "start": "3181599",
    "end": "3187920"
  },
  {
    "text": "want and you can just override that virtual method and everyone's happy right because the code and the class are together if you add a new type",
    "start": "3187920",
    "end": "3195920"
  },
  {
    "text": "like in the in this functional setting you you are explicitly in the function you were mentioning all the different",
    "start": "3195920",
    "end": "3201200"
  },
  {
    "text": "shapes that you care about um and if somebody adds another shape of data and you you know your code is no",
    "start": "3201200",
    "end": "3206800"
  },
  {
    "text": "longer handling that so there's a different you you can't add new data with impunity but you can",
    "start": "3206800",
    "end": "3214000"
  },
  {
    "text": "add new functions with impunity which you can't do in the in the in after you're growing a world",
    "start": "3214000",
    "end": "3219200"
  },
  {
    "text": "you can't go without going back and editing the original right you can't independently add new functions in opti-growing programming but you can add",
    "start": "3219200",
    "end": "3225839"
  },
  {
    "text": "new types in functional programming you can't uh you can't",
    "start": "3225839",
    "end": "3231119"
  },
  {
    "text": "independently add new types but you can add new functions i said well this really is a duality but they do the",
    "start": "3231119",
    "end": "3237359"
  },
  {
    "text": "other thing so well and what is it they do well they do pattern matching so the first step there is let's um",
    "start": "3237359",
    "end": "3243920"
  },
  {
    "text": "um let's actually let you declare a variable inside of this expression you know like after this this expression",
    "start": "3243920",
    "end": "3250640"
  },
  {
    "text": "that's already that's actually let you put a variable name and say okay i just checked can i just get a name for that",
    "start": "3250640",
    "end": "3255920"
  },
  {
    "text": "can i get a receipt um and you and you use that uh throughout here and that is your p",
    "start": "3255920",
    "end": "3262000"
  },
  {
    "text": "typed a student uh with its own name and now we can we can you know we're not dying inside anymore",
    "start": "3262000",
    "end": "3268319"
  },
  {
    "text": "except if i can at least think what oh no um",
    "start": "3268319",
    "end": "3274480"
  },
  {
    "text": "what's that yes it was the wrong parent no",
    "start": "3274480",
    "end": "3280400"
  },
  {
    "text": "yes thank you thank you i'm code blind thank god i only have six minutes left oh my god i only have six",
    "start": "3283599",
    "end": "3290319"
  },
  {
    "text": "minutes left so so what we're getting into is pattern matching and pattern matching is this",
    "start": "3290319",
    "end": "3296240"
  },
  {
    "text": "whole it's a whole new concept that we're adding to c sharp at this point but it's not new in the in global sense",
    "start": "3296240",
    "end": "3301839"
  },
  {
    "text": "it's a well throttled path in in functional programming we just have to adapt it to an object-oriented",
    "start": "3301839",
    "end": "3308079"
  },
  {
    "text": "context and and this is a pattern a pattern is something that that can either succeed or not when you",
    "start": "3308079",
    "end": "3314640"
  },
  {
    "text": "apply it to a value and if it succeeds it can extract some extra information and put it in variables for you that's",
    "start": "3314640",
    "end": "3321040"
  },
  {
    "text": "what a pattern is and we have a few patterns from the beginning and c sharp seven and then we start adding some more",
    "start": "3321040",
    "end": "3326400"
  },
  {
    "text": "along the way and we keep we're still adding patterns to this date like c sharp 11 has list patterns which you will if you go",
    "start": "3326400",
    "end": "3332400"
  },
  {
    "text": "to the other talk you'll get to see those um but it's still like the the the shape of",
    "start": "3332400",
    "end": "3337440"
  },
  {
    "text": "the code like we solved the micro problem but the larger problem of if you know having a very imperative way of",
    "start": "3337440",
    "end": "3342480"
  },
  {
    "text": "checking that's also very like um uh kind of fraught with danger in terms",
    "start": "3342480",
    "end": "3347920"
  },
  {
    "text": "of maintenance and so on what we want along with pattern matching is we want",
    "start": "3347920",
    "end": "3353520"
  },
  {
    "text": "what functional programming often calls matching pattern matching we have a keyword already called switch",
    "start": "3353520",
    "end": "3360079"
  },
  {
    "text": "so we're using that one so let me go and uh let me go and just you know do this again um so",
    "start": "3360079",
    "end": "3366400"
  },
  {
    "text": "i'm gonna do it in a functional way let's just we can we can comment this out",
    "start": "3366400",
    "end": "3373040"
  },
  {
    "text": "so we're gonna do just an expression body we're going to take the person and we're going to switch on them",
    "start": "3373040",
    "end": "3379599"
  },
  {
    "text": "but not with an old-fashioned clunky switch statement from c in the early 60s",
    "start": "3379599",
    "end": "3385280"
  },
  {
    "text": "that we have in c-sharp but with a switch expression you know like the cool kids so this expression body that's a",
    "start": "3385280",
    "end": "3390720"
  },
  {
    "text": "switch expression it's empty right now uh that's actually okay but you get a warning saying you're not handling all",
    "start": "3390720",
    "end": "3396799"
  },
  {
    "text": "the different kinds of input yeah okay thank you um so and now we can write patterns directly here student s arrow",
    "start": "3396799",
    "end": "3405200"
  },
  {
    "text": "and now we can just put an expression for the result that you want in case it's it is a",
    "start": "3405200",
    "end": "3410880"
  },
  {
    "text": "student all right so i can i now have like a a clean structure within which i can just list comma separated patterns",
    "start": "3410880",
    "end": "3417680"
  },
  {
    "text": "and results and i right now i only need the two",
    "start": "3417680",
    "end": "3423760"
  },
  {
    "text": "so we're going to take we're going to just do this and then",
    "start": "3423760",
    "end": "3429839"
  },
  {
    "text": "just quickly touch on the fact that patterns can be pattern matching is smarter right we saw",
    "start": "3429839",
    "end": "3435839"
  },
  {
    "text": "that it said that you were not handling all the cases it still did that when we only had the",
    "start": "3435839",
    "end": "3441040"
  },
  {
    "text": "when we only had the student but when i do a catch-all which i can do with a fancy modern discard um",
    "start": "3441040",
    "end": "3447760"
  },
  {
    "text": "then it says hey you're handling everything you're good no more warning well what if i go the other way like",
    "start": "3447760",
    "end": "3453599"
  },
  {
    "text": "let's just let's just swap the order of these two they are in order then i actually get an error saying hey you",
    "start": "3453599",
    "end": "3459040"
  },
  {
    "text": "handled you handled this case already so so you can see how maintenance of these things becomes much",
    "start": "3459040",
    "end": "3465680"
  },
  {
    "text": "not only is it clear to read but the compiler is helping you much more keep your logic straight so it's beautiful",
    "start": "3465680",
    "end": "3471920"
  },
  {
    "text": "and it's safe that sounds like functional to me um so uh",
    "start": "3471920",
    "end": "3477520"
  },
  {
    "text": "so you can do that but you know i'm you're noticing i'm actually writing out just the first letter of the first name",
    "start": "3477520",
    "end": "3483359"
  },
  {
    "text": "and in this case here well actually what if what if the what if the",
    "start": "3483359",
    "end": "3488480"
  },
  {
    "text": "first name is empty i'm not going to talk about null right now that's a whole other talk but what if it's empty that's",
    "start": "3488480",
    "end": "3494000"
  },
  {
    "text": "kind of you know i should probably do something else if it's empty so let's um let's use just to show an example of",
    "start": "3494000",
    "end": "3500079"
  },
  {
    "text": "a recursive pattern i know now that it's just a person but what if the first name",
    "start": "3500079",
    "end": "3505280"
  },
  {
    "text": "of that person actually is an empty string um i want to do something else then i",
    "start": "3505280",
    "end": "3511440"
  },
  {
    "text": "just want to write out the last name i don't want to like do the whole abbreviation thing",
    "start": "3511440",
    "end": "3517839"
  },
  {
    "text": "p last name um or you know i could actually",
    "start": "3517839",
    "end": "3524720"
  },
  {
    "text": "in so this is a property pattern i can dig out specific properties inside of the pattern and recursively apply a",
    "start": "3524720",
    "end": "3530319"
  },
  {
    "text": "pattern here i'm just applying the pattern are you this constant but i could also say last name",
    "start": "3530319",
    "end": "3536319"
  },
  {
    "text": "colon and then apply a var pattern which always succeeds but which will give you",
    "start": "3536319",
    "end": "3542160"
  },
  {
    "text": "a name so that you let that's your pattern let um it's the var pattern um",
    "start": "3542160",
    "end": "3548079"
  },
  {
    "text": "and um and then instead of saying peter last name here i already dug out the last name and i gave it a name so i can",
    "start": "3548079",
    "end": "3554400"
  },
  {
    "text": "just say l here so and and these things compose you know if i wanted the actual",
    "start": "3554400",
    "end": "3560720"
  },
  {
    "text": "uh if i wanted a new name for the the person object itself i could put it here uh let's call it p2 or whatever so so",
    "start": "3560720",
    "end": "3567839"
  },
  {
    "text": "patterns kind of compose and and over time we've added more and more kinds of them",
    "start": "3567839",
    "end": "3573520"
  },
  {
    "text": "that essentially make them more and more expressive and allow you to put more and more of your logic",
    "start": "3573520",
    "end": "3579920"
  },
  {
    "text": "into patterns so that your shape-dependent code is now as beautiful or some would",
    "start": "3579920",
    "end": "3587119"
  },
  {
    "text": "say even more i i i don't i'm not but um you know it's a great beautiful first",
    "start": "3587119",
    "end": "3594000"
  },
  {
    "text": "class alternative to virtual methods when you when describing the functionality on the outside is what you",
    "start": "3594000",
    "end": "3599440"
  },
  {
    "text": "want to do you do pay something you pay the fact that you can't really nearly add new types",
    "start": "3599440",
    "end": "3606079"
  },
  {
    "text": "you pay the fact that your data has to be public so that it can be operated on from the outside so encapsulation's out",
    "start": "3606079",
    "end": "3611920"
  },
  {
    "text": "the window but you get this other beauty so you know pick your poison depending on the scenario now you have both",
    "start": "3611920",
    "end": "3617440"
  },
  {
    "text": "options in c sharp and i also wanted to mention immutability",
    "start": "3617440",
    "end": "3622799"
  },
  {
    "text": "but i just did we did work for immutability um first we",
    "start": "3622799",
    "end": "3629520"
  },
  {
    "text": "let you have uh auto properties without setters but that wasn't so good for the um for the object initializers now",
    "start": "3629520",
    "end": "3637280"
  },
  {
    "text": "there's a more um that now you have a new kind of setter it's called an emitter which is a setter that can only",
    "start": "3637280",
    "end": "3643520"
  },
  {
    "text": "be called from object initializes and now so that means we made immutable objects more first class you don't need",
    "start": "3643520",
    "end": "3649440"
  },
  {
    "text": "to initialize them with constructors you can use object initializers for those as well immutability is another functional",
    "start": "3649440",
    "end": "3654559"
  },
  {
    "text": "concept that we're we're starting to support more so um",
    "start": "3654559",
    "end": "3660079"
  },
  {
    "text": "i'm gonna stop here um with in the c-sharp sevens um",
    "start": "3660079",
    "end": "3665920"
  },
  {
    "text": "and if you wanna see some c-sharp 11 functional influence uh you know there's another talk in just an hour and a half",
    "start": "3665920",
    "end": "3671119"
  },
  {
    "text": "or whatever and for now thank you very much [Applause]",
    "start": "3671119",
    "end": "3682179"
  },
  {
    "text": "you",
    "start": "3686960",
    "end": "3689040"
  }
]