[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "all right welcome I know it's like thank you for first",
    "start": "10000",
    "end": "15040"
  },
  {
    "text": "thing and is it a little bit much okay okay so yeah thanks for holding out we're",
    "start": "15040",
    "end": "21400"
  },
  {
    "text": "almost done one more session and we'll have that sweet sweet weekend so welcome",
    "start": "21400",
    "end": "26619"
  },
  {
    "text": "to rediscovering fire this the title really alludes to the fact that this is",
    "start": "26619",
    "end": "34000"
  },
  {
    "text": "not really anything new this is more of a curation of the lessons of the things",
    "start": "34000",
    "end": "40000"
  },
  {
    "text": "that learned in a process of the past couple of years but I think the field",
    "start": "40000",
    "end": "46060"
  },
  {
    "text": "overall has known this for a very long time so I'm I said you can say here yes",
    "start": "46060",
    "end": "51490"
  },
  {
    "text": "here I'm here again I work for a queen or as a developer and over the past few",
    "start": "51490",
    "end": "60910"
  },
  {
    "text": "years we've developed quite a few libraries to work in particular with oil old oil and gas industry file formats",
    "start": "60910",
    "end": "67240"
  },
  {
    "text": "they're very often very old they're very crafty and they have a lot of problems",
    "start": "67240",
    "end": "72430"
  },
  {
    "text": "they're not easy to work with and we're trying to sort of leave you at that pain a little bit largely these examples are taken from",
    "start": "72430",
    "end": "79149"
  },
  {
    "text": "seg-y oh but we've applied the same architecture with quite good success to a few couple of others delish I always",
    "start": "79149",
    "end": "85270"
  },
  {
    "text": "won for while logging seg-y which I'm going to talk about is about seismic and",
    "start": "85270",
    "end": "91899"
  },
  {
    "text": "but they all have the same fundamental architecture what I think is rewarding",
    "start": "91899",
    "end": "98409"
  },
  {
    "text": "about this well oh yeah they're all open source so it's very convenient to talk about them because you can actually see",
    "start": "98409",
    "end": "104109"
  },
  {
    "text": "these lessons for yourself so to speak and it's given me a greater appreciation",
    "start": "104109",
    "end": "109569"
  },
  {
    "text": "of why a lot of the libraries that I have interacted with over the earth it's",
    "start": "109569",
    "end": "116560"
  },
  {
    "text": "given me a greater appreciation of why they've done what they have you know you kind of realized oh yes that's why",
    "start": "116560",
    "end": "122350"
  },
  {
    "text": "they're doing it and what the benefit of that is so let's this is the outline",
    "start": "122350",
    "end": "128380"
  },
  {
    "start": "126000",
    "end": "146000"
  },
  {
    "text": "we're talking a little bit about why we're going to briefly cover API NAB is",
    "start": "128380",
    "end": "133740"
  },
  {
    "text": "the design for primitive types on the know allocation policy Corner : core",
    "start": "133740",
    "end": "141909"
  },
  {
    "text": "functions and also how to design primitive functions so all these examples are from Segway oh",
    "start": "141909",
    "end": "148900"
  },
  {
    "start": "146000",
    "end": "204000"
  },
  {
    "text": "it's cement is free software is the LGPL 3 license it's distributed now in Debian",
    "start": "148900",
    "end": "154749"
  },
  {
    "text": "Ubuntu of the big distributions but also mainly on pi PI where most of our users",
    "start": "154749",
    "end": "160569"
  },
  {
    "text": "come from it runs on a see 99 core which",
    "start": "160569",
    "end": "166480"
  },
  {
    "text": "I deeply regret was not written in C++ with the CIT 9 interface it's written in C 99 and for the next time we've sort of",
    "start": "166480",
    "end": "172930"
  },
  {
    "text": "fixed that by running in C++ and currently has phones in C++ 11 Python 2",
    "start": "172930",
    "end": "179260"
  },
  {
    "text": "and 3 and we have some experimental stuff in both C++ and Julia it is in the",
    "start": "179260",
    "end": "186239"
  },
  {
    "text": "sort of open Geoscience community which is getting pretty large now actually this is the de facto library for reading",
    "start": "186239",
    "end": "193629"
  },
  {
    "text": "and writing seismic data and if you ever want to check it out it will be available here on github so um let's",
    "start": "193629",
    "end": "204129"
  },
  {
    "start": "204000",
    "end": "234000"
  },
  {
    "text": "start with oh yeah by the way I checked it out this morning out of curiosity I went to pi PI stats org on the internet",
    "start": "204129",
    "end": "213699"
  },
  {
    "text": "and just looked it up and it turns out we have about 12,000 downloads last month which is pretty staggering",
    "start": "213699",
    "end": "220900"
  },
  {
    "text": "now I think a lot of that are BOTS but it's telling a little bit about its usage in terms of you know how niche",
    "start": "220900",
    "end": "229629"
  },
  {
    "text": "this really is this is pretty huge and we're very proud of that so let's start",
    "start": "229629",
    "end": "234909"
  },
  {
    "start": "234000",
    "end": "341000"
  },
  {
    "text": "with some some wise so we have a pretty",
    "start": "234909",
    "end": "241659"
  },
  {
    "text": "clear goal the goal is to have a single and fast portable core and iMeet",
    "start": "241659",
    "end": "250239"
  },
  {
    "text": "portable in the true sort of old UNIX sense we run on multiple operating systems and multiple CPUs including",
    "start": "250239",
    "end": "257650"
  },
  {
    "text": "s/390 which is an old IBM architecture which I have actually never used myself",
    "start": "257650",
    "end": "262740"
  },
  {
    "text": "but Debian helped us test and run with that we want to be able to support",
    "start": "262740",
    "end": "270159"
  },
  {
    "text": "multiple integrated language phones and why I mean we don't just want simple",
    "start": "270159",
    "end": "276010"
  },
  {
    "text": "language bindings they're pretty awkward it feels like you're calling into some third party",
    "start": "276010",
    "end": "282040"
  },
  {
    "text": "solution by essentially forking out and running a process and just you know parsing the result but we wanted",
    "start": "282040",
    "end": "288070"
  },
  {
    "text": "something that you can actually feel integrated with that would behave as if the whole application was written in the",
    "start": "288070",
    "end": "293680"
  },
  {
    "text": "same language all right we wondered clean upgrade paths so that you",
    "start": "293680",
    "end": "299020"
  },
  {
    "text": "basically if there was an upgrade to the core because there was a bug or some internal you know fix",
    "start": "299020",
    "end": "304870"
  },
  {
    "text": "you could simply replace the shared object and everything should just work and in fact we have done just that by",
    "start": "304870",
    "end": "310750"
  },
  {
    "text": "adding support for more numerical data formats and served the summary of my is",
    "start": "310750",
    "end": "316960"
  },
  {
    "text": "that we wanted to build a library to build libraries right so the goal is not to build a library for the application",
    "start": "316960",
    "end": "323050"
  },
  {
    "text": "developer to use but for the library there oliver to use that distinction is",
    "start": "323050",
    "end": "328620"
  },
  {
    "text": "remarkably important or other has pretty big consequences when you start diving",
    "start": "328620",
    "end": "334540"
  },
  {
    "text": "into the details because the assumption that goes into that are quite different",
    "start": "334540",
    "end": "339600"
  },
  {
    "text": "in short i think it is important that the user-facing library feels right okay",
    "start": "339690",
    "end": "347430"
  },
  {
    "start": "341000",
    "end": "465000"
  },
  {
    "text": "so what i mean by that is not we want more than to just invoke some external",
    "start": "347430",
    "end": "354220"
  },
  {
    "text": "process from in our case largely python but this applies obviously to every language what we want is we want to be",
    "start": "354220",
    "end": "361840"
  },
  {
    "text": "able to manipulate the input and States and parameters from Python as if it was just a native structure and have that be",
    "start": "361840",
    "end": "369040"
  },
  {
    "text": "very affect fall so for instance in the case of different numerical formats you should be able to say you know what this",
    "start": "369040",
    "end": "374980"
  },
  {
    "text": "has this numerical format and please interpret the bytes differently right",
    "start": "374980",
    "end": "380920"
  },
  {
    "text": "so simply copying structures for post-processing is it just it's not enough so a good example I think of that",
    "start": "380920",
    "end": "389860"
  },
  {
    "text": "if you're familiar with Python is numpy nonpoint never really feels like anything but Python but most of numpy is",
    "start": "389860",
    "end": "396670"
  },
  {
    "text": "written in C and Fortran right and you never really feel like it feels pythonic you know you can deal with the",
    "start": "396670",
    "end": "402430"
  },
  {
    "text": "structures internally that way we also want to be able to maintain a lot of the",
    "start": "402430",
    "end": "408040"
  },
  {
    "text": "code to have sort of a single source of truth and authority we're not actually having to change clients and that means",
    "start": "408040",
    "end": "413890"
  },
  {
    "text": "having a core that would be shared when you have multiple language fronts so improvements that happens now that we",
    "start": "413890",
    "end": "419350"
  },
  {
    "text": "detect through Python will immediately benefit our users that come from C++ right and we want to be both forwards",
    "start": "419350",
    "end": "427990"
  },
  {
    "text": "and backwards compatible as much as possible and then there's also much of",
    "start": "427990",
    "end": "435580"
  },
  {
    "text": "style you know Python has a very sort of it has a very opinionated style on what",
    "start": "435580",
    "end": "442750"
  },
  {
    "text": "programs should look like and you should facilitate that but that is not at all compatible with how Haskell programs and",
    "start": "442750",
    "end": "448840"
  },
  {
    "text": "you want to be able to accommodate both and in order to do that you need to be very careful when you're designing something that is supposed to serve both",
    "start": "448840",
    "end": "454900"
  },
  {
    "text": "you can't just design a Python library with C syntax and hope that it will work because it doesn't so let's dive right",
    "start": "454900",
    "end": "462130"
  },
  {
    "text": "into some details and some definitions",
    "start": "462130",
    "end": "467640"
  },
  {
    "start": "465000",
    "end": "549000"
  },
  {
    "text": "because in a lot of languages a lot has",
    "start": "467640",
    "end": "473650"
  },
  {
    "text": "happened here when you talk about your JavaScript and your C sharp right there's really not that much of a",
    "start": "473650",
    "end": "479800"
  },
  {
    "text": "concept of an ABI right there's never any talk of the binary interfaces of things because everything is either",
    "start": "479800",
    "end": "488170"
  },
  {
    "text": "exchanged a source or as is unified",
    "start": "488170",
    "end": "492390"
  },
  {
    "text": "well runtime binary dialect thing that runs on the CLR and then JVM right but",
    "start": "493890",
    "end": "501130"
  },
  {
    "text": "when you're dealing with native code like C++ and Fortran and rust you have",
    "start": "501130",
    "end": "506980"
  },
  {
    "text": "you're calling conventions right you have everything like when you change signatures like that is not something",
    "start": "506980",
    "end": "512110"
  },
  {
    "text": "that is annotated with it and then if you're invoking the same symbol with two",
    "start": "512110",
    "end": "517240"
  },
  {
    "text": "different definitions then it's going to crash hopefully some a lot of the time",
    "start": "517240",
    "end": "522460"
  },
  {
    "text": "you just get very very corrupted results which is actually worse I think maintaining ABI in particular is not",
    "start": "522460",
    "end": "530500"
  },
  {
    "text": "very straightforward it limits the set of changes you can do usually though you",
    "start": "530500",
    "end": "537190"
  },
  {
    "text": "do not for a good reason and I think a stellar example of that is cute they have done that for yo-yo",
    "start": "537190",
    "end": "542620"
  },
  {
    "text": "Sunday very well let's have a quick run-through of the definitions and and what that means",
    "start": "542620",
    "end": "550299"
  },
  {
    "start": "549000",
    "end": "608000"
  },
  {
    "text": "so API is probably the more familiar because that applies everywhere you know it's your application programming",
    "start": "550299",
    "end": "555910"
  },
  {
    "text": "interface and a brief summary of that would really just be what you see here right it's your function signatures and",
    "start": "555910",
    "end": "561910"
  },
  {
    "text": "your types and it's a property of it's about source compatibility right and",
    "start": "561910",
    "end": "567369"
  },
  {
    "text": "it's a compile time property if you're going through the compile step as you do with a lot of languages in short the",
    "start": "567369",
    "end": "573730"
  },
  {
    "text": "effect is that programs that worked with the old version should without sorry",
    "start": "573730",
    "end": "580089"
  },
  {
    "text": "with recompilation work with the new version alright and there are a lot of API compatible changes you were able to",
    "start": "580089",
    "end": "587079"
  },
  {
    "text": "make an example would be to change your integer to a long and promotion would happen and you wouldn't care or you can",
    "start": "587079",
    "end": "593470"
  },
  {
    "text": "add members to a class and no one would know the difference right you can as long as you add them a list at the end",
    "start": "593470",
    "end": "598869"
  },
  {
    "text": "because sometimes there order sensitive both of those cases would violate ABI",
    "start": "598869",
    "end": "606480"
  },
  {
    "text": "compatibility so the ABI is the application binary interface and it governs largely data type size and",
    "start": "606480",
    "end": "613149"
  },
  {
    "start": "608000",
    "end": "680000"
  },
  {
    "text": "alignment alignment is fortunately something that most people never ever",
    "start": "613149",
    "end": "618549"
  },
  {
    "text": "have to think about but when you do it's quite painful and this is a runtime property and really what we're trying to",
    "start": "618549",
    "end": "627790"
  },
  {
    "text": "accomplish is that programs that were compiled against an old version should without modification or recompilation",
    "start": "627790",
    "end": "633189"
  },
  {
    "text": "work against a new version of a library and of course maintaining ABI compatibility will give you a very clean",
    "start": "633189",
    "end": "639399"
  },
  {
    "text": "a great path compatibility has the caveat is sort of imply that you're",
    "start": "639399",
    "end": "645970"
  },
  {
    "text": "running on the same tool chain boundaries are very rarely compatible across compilers of course maintaining",
    "start": "645970",
    "end": "653259"
  },
  {
    "text": "your both ABI in api compatibility makes your clients very happy because it makes",
    "start": "653259",
    "end": "659230"
  },
  {
    "text": "the upgrade path easier and their code never just randomly breaks because now",
    "start": "659230",
    "end": "664779"
  },
  {
    "text": "they can just drop in an idea or an Esso and you're happy and well I mean you",
    "start": "664779",
    "end": "669910"
  },
  {
    "text": "don't break their code right in order to",
    "start": "669910",
    "end": "675220"
  },
  {
    "text": "maintain this there are a few rules you can follow and if you do this you will almost never ever have problems",
    "start": "675220",
    "end": "682379"
  },
  {
    "text": "so you if you never remove functions if you never change arguments that means no",
    "start": "682379",
    "end": "689739"
  },
  {
    "text": "adding no removing and no type changes you never change your structs you should",
    "start": "689739",
    "end": "697209"
  },
  {
    "text": "be fine because you can add whatever you want that doesn't mean remove or change anything with this you should remain",
    "start": "697209",
    "end": "704709"
  },
  {
    "text": "stable but how does not work over time",
    "start": "704709",
    "end": "711609"
  },
  {
    "text": "right well it helps if you design for it",
    "start": "711609",
    "end": "716910"
  },
  {
    "start": "713000",
    "end": "840000"
  },
  {
    "text": "so let's talk about how we accomplish that right so it starts with this emphasis so just so we have it clear",
    "start": "717989",
    "end": "726779"
  },
  {
    "text": "your primitive types there your your in your floats your pointers structs are",
    "start": "726779",
    "end": "735910"
  },
  {
    "text": "not there sometimes also referred to as aggregate types and they're nice in C",
    "start": "735910",
    "end": "742779"
  },
  {
    "text": "for API purposes and you know just keeping things together it's much more convenient passing one value around than",
    "start": "742779",
    "end": "749199"
  },
  {
    "text": "ten but it does put a lot of requirements on the callers the",
    "start": "749199",
    "end": "755769"
  },
  {
    "text": "primitive types are much easier size sizes are known they're very universal",
    "start": "755769",
    "end": "761169"
  },
  {
    "text": "and if we were just in the sea world all-wise or C++ then this wouldn't be so",
    "start": "761169",
    "end": "767379"
  },
  {
    "text": "much of a problem because obviously you can read it because you're native but the structs tend to break down the",
    "start": "767379",
    "end": "774369"
  },
  {
    "text": "second you cross your function or your language boundaries all every F is or",
    "start": "774369",
    "end": "782529"
  },
  {
    "text": "your foreign function interface I'm going to probably abbreviate to FF i from now on but it that means foreign function interface is your procedure of",
    "start": "782529",
    "end": "789129"
  },
  {
    "text": "calling a piece of code written in a different language from your language",
    "start": "789129",
    "end": "794669"
  },
  {
    "text": "see I'm talking about because it's very universal every language has fi to see",
    "start": "794669",
    "end": "800709"
  },
  {
    "text": "but very rarely all the languages stancy largely because c so ubiquitous and",
    "start": "800709",
    "end": "806379"
  },
  {
    "text": "simple well they tend to work well over very well with primitive types but they",
    "start": "806379",
    "end": "811569"
  },
  {
    "text": "have problems with strokes usually with primitives runtimes like Python tend to",
    "start": "811569",
    "end": "818350"
  },
  {
    "text": "be able to convert your primitives automatically but that is not applied to structs then you kind of have to",
    "start": "818350",
    "end": "824080"
  },
  {
    "text": "replicate the fields in the right order with the right alignment and hoping you get that right with no static tracking",
    "start": "824080",
    "end": "829740"
  },
  {
    "text": "and also I know a lot of others or restrictions in your host language so in",
    "start": "829740",
    "end": "835870"
  },
  {
    "text": "order to illustrate that I've created a little example so this is a modified or",
    "start": "835870",
    "end": "843670"
  },
  {
    "start": "840000",
    "end": "907000"
  },
  {
    "text": "simplified address infrastructure from C if you're familiar with this is a standard library and the same struct if",
    "start": "843670",
    "end": "853060"
  },
  {
    "text": "you would have to be compatible with that in Python now in Python and this works this like the it works like this",
    "start": "853060",
    "end": "860110"
  },
  {
    "text": "in most languages I know I think c-sharp looks almost exactly like this you register your variable names their sizes",
    "start": "860110",
    "end": "867940"
  },
  {
    "text": "and alignments in a class or a class like thing in Python used a special",
    "start": "867940",
    "end": "873400"
  },
  {
    "text": "fields member you get when you derive from the C type structure and this is",
    "start": "873400",
    "end": "880750"
  },
  {
    "text": "the output of the get other info function in C as you can see if you",
    "start": "880750",
    "end": "886480"
  },
  {
    "text": "familiar with Python this looks pretty awkward right if this does not look nice it's very much looks alien and of course",
    "start": "886480",
    "end": "892390"
  },
  {
    "text": "you're interacting something that's foreign so that's not so weird usually you would stick this in a",
    "start": "892390",
    "end": "898720"
  },
  {
    "text": "library and you would never really know but still it does so it's not very ergonomic right to call the address info",
    "start": "898720",
    "end": "911589"
  },
  {
    "start": "907000",
    "end": "995000"
  },
  {
    "text": "function from the c standard library you would pretty much have to do something like this in python right you would use",
    "start": "911589",
    "end": "920110"
  },
  {
    "text": "by ref function from C types to obtain a pointer to your address info struct you",
    "start": "920110",
    "end": "926260"
  },
  {
    "text": "would pass that and then you would maybe inspector result if it fails you would have to inspect the error code I'm not",
    "start": "926260",
    "end": "932320"
  },
  {
    "text": "doing that now for simplicity or sorry for brevity but there's of course no",
    "start": "932320",
    "end": "937450"
  },
  {
    "text": "automatic exception happening here you would have to do that manually I mean in effect what you would do is you would",
    "start": "937450",
    "end": "943600"
  },
  {
    "text": "write a see with Python syntax mini language around your your language boundary that",
    "start": "943600",
    "end": "953309"
  },
  {
    "text": "being said this is not so bad okay it does force us to make the compatible",
    "start": "953309",
    "end": "958439"
  },
  {
    "text": "struct which is you need you need to maintain the mirrored structure exactly",
    "start": "958439",
    "end": "965189"
  },
  {
    "text": "as if it was designed in a header it's easy to get wrong and it's very obnoxious to debug but that's usually",
    "start": "965189",
    "end": "973889"
  },
  {
    "text": "don't want so that's not the end of the world but now you still need to make the struct for that function called only you",
    "start": "973889",
    "end": "979709"
  },
  {
    "text": "can't reuse it for anything else and you can't really interact with it directly it definitely does not feel like Python",
    "start": "979709",
    "end": "986849"
  },
  {
    "text": "in Python you would want something like this returned the members are C types",
    "start": "986849",
    "end": "994739"
  },
  {
    "text": "though if you just go back a little bit you can see that the members are the C types C int but we don't want that we",
    "start": "994739",
    "end": "1002299"
  },
  {
    "start": "995000",
    "end": "1005000"
  },
  {
    "text": "want native Python you know we wanted to feel like a Python lot like it's integrated because this is the problem",
    "start": "1002299",
    "end": "1008419"
  },
  {
    "text": "with the C it's not actually an integer it's a memory location and a hint that it's an integer so you can get it with",
    "start": "1008419",
    "end": "1018409"
  },
  {
    "text": "that value and most of us have some detail like that sometimes conversion is",
    "start": "1018409",
    "end": "1023749"
  },
  {
    "text": "automatic sometimes it's not for you certainly to pull it out from though but",
    "start": "1023749",
    "end": "1029298"
  },
  {
    "text": "you can't submit with an integer so you can actually keep it around you need to convert it at some point so we don't",
    "start": "1029299",
    "end": "1036678"
  },
  {
    "text": "want to keep the FFI details around for very long if we instead just use",
    "start": "1036679",
    "end": "1044749"
  },
  {
    "text": "primitive types to communicate this or call it self is a little bit worse and this is even worse because of course we",
    "start": "1044749",
    "end": "1050600"
  },
  {
    "text": "need to get three values out but notice that we have no sort of forced",
    "start": "1050600",
    "end": "1057230"
  },
  {
    "text": "representation or need to keep this around in a struct or in a class anymore so we don't have to make this compatible",
    "start": "1057230",
    "end": "1063649"
  },
  {
    "text": "struck to make our function work but if you wanted to group them together you know not necessarily the incompatible",
    "start": "1063649",
    "end": "1070039"
  },
  {
    "text": "strong that's easy to do you just put it in a class and have these as members and you will be no worse off than you were before but at least now you have the",
    "start": "1070039",
    "end": "1076129"
  },
  {
    "text": "flexibility and in fact when you have multiple",
    "start": "1076129",
    "end": "1082900"
  },
  {
    "text": "values like this this is essentially a struct anyway it's just deconstructed a little bit so it is it's less",
    "start": "1082900",
    "end": "1089409"
  },
  {
    "text": "restrictive building has all the same properties and it's no worse in terms of signatures and binary stability right if",
    "start": "1089409",
    "end": "1097809"
  },
  {
    "text": "if you would do anything for an ABI break here it would also be an ABI break if you use destruct it's no worse off",
    "start": "1097809",
    "end": "1105630"
  },
  {
    "text": "although usually when you pass integers or primitive times by value you can use",
    "start": "1105630",
    "end": "1110830"
  },
  {
    "text": "to go from a Python into a C and in in C types in Python automatically without",
    "start": "1110830",
    "end": "1117220"
  },
  {
    "text": "any issue what's nice - it's not Python always on",
    "start": "1117220",
    "end": "1122260"
  },
  {
    "text": "the variable and there are no lifetime issues with that let's look at another",
    "start": "1122260",
    "end": "1133240"
  },
  {
    "start": "1131000",
    "end": "1247000"
  },
  {
    "text": "example because this is what I have usually seen and we've sort of motivated",
    "start": "1133240",
    "end": "1138789"
  },
  {
    "text": "me in the first place to do this design",
    "start": "1138789",
    "end": "1143940"
  },
  {
    "text": "so we have this function getdata which gets some data from something we don't know exactly and it returns a pointer to",
    "start": "1144029",
    "end": "1150970"
  },
  {
    "text": "our blob or blob is art class with something is our object we don't exactly",
    "start": "1150970",
    "end": "1156370"
  },
  {
    "text": "know what's in there but we know that we can point to it this reads from a huge",
    "start": "1156370",
    "end": "1164169"
  },
  {
    "text": "memory pool and it gives you really something of a size size at some offset",
    "start": "1164169",
    "end": "1170880"
  },
  {
    "text": "now in Python we use this gatita function and we get a pointer to this",
    "start": "1171210",
    "end": "1177549"
  },
  {
    "text": "blob back and we've sort of cheated a little bit and let's assume now that you don't even have to unpack the C pointer",
    "start": "1177549",
    "end": "1183669"
  },
  {
    "text": "and it is immediately gives you back a Python object ish but you add this to your two to two of your graphs who are",
    "start": "1183669",
    "end": "1191110"
  },
  {
    "text": "now responsible for releasing that memory who owns this memory this is not clear anymore because in Python you have",
    "start": "1191110",
    "end": "1197169"
  },
  {
    "text": "no such distinction right there is no such annotation either you cannot distinguish the owners from each other",
    "start": "1197169",
    "end": "1204159"
  },
  {
    "text": "because in Python that concept just doesn't apply and also really you cannot distinguish different kinds of failures",
    "start": "1204159",
    "end": "1211000"
  },
  {
    "text": "this way because all the information you're getting back from your gatita function as if blob is a null pointer or not so",
    "start": "1211000",
    "end": "1218480"
  },
  {
    "text": "you know that it failed we do not know why so it's impossible for Python not to actually report to the user what went",
    "start": "1218480",
    "end": "1224029"
  },
  {
    "text": "wrong which is a pretty glaring design flaw what you can do technically is to",
    "start": "1224029",
    "end": "1230809"
  },
  {
    "text": "hook and register blob as a type and build a hook into your garbage collector",
    "start": "1230809",
    "end": "1235960"
  },
  {
    "text": "but not very indeterministic because you don't know exactly when your garbage collector is going to run with all this",
    "start": "1235960",
    "end": "1249710"
  },
  {
    "text": "focus we're going to come a little bit back to - I'll get this on land but with all these focus on primitive types the",
    "start": "1249710",
    "end": "1257870"
  },
  {
    "text": "most useful of those I think would be int alright and this is something that I noticed happens a lot in the C standard",
    "start": "1257870",
    "end": "1264380"
  },
  {
    "text": "library they use instant for virtually",
    "start": "1264380",
    "end": "1270260"
  },
  {
    "text": "everything and it kind of struck me as clumsy especially if you started",
    "start": "1270260",
    "end": "1275630"
  },
  {
    "text": "programming after the 1990s where you had a lot more sort of structured data types around but C stuck around and the",
    "start": "1275630",
    "end": "1285080"
  },
  {
    "text": "question is why are integers so great well they are so use them for everything",
    "start": "1285080",
    "end": "1292779"
  },
  {
    "text": "they int the integer the number is sorry the fundamental data type both for your CPU and in your language and they're",
    "start": "1292929",
    "end": "1301789"
  },
  {
    "text": "quite powerful when you pair them with conventions and semantics right so for instance in segue Oh",
    "start": "1301789",
    "end": "1308450"
  },
  {
    "text": "virtually all functions return an integer and that's the status code what",
    "start": "1308450",
    "end": "1313520"
  },
  {
    "text": "was the outcome of this operation did it work they did not in case it fell what exactly did fail can you at least shed",
    "start": "1313520",
    "end": "1320600"
  },
  {
    "text": "some light can you at least point me in the right direction and then Convention and documentation tells you what are the",
    "start": "1320600",
    "end": "1326600"
  },
  {
    "text": "state of your output variables from that ins can easily be received and passed",
    "start": "1326600",
    "end": "1332960"
  },
  {
    "text": "along and managed without any particular",
    "start": "1332960",
    "end": "1337720"
  },
  {
    "text": "structure and in fact most run times to optimize heavily for integers with a lot",
    "start": "1338440",
    "end": "1344510"
  },
  {
    "text": "of context they're very wide they're naturally",
    "start": "1344510",
    "end": "1350570"
  },
  {
    "text": "extensible like your integers can typically hold 2 to the power of 32",
    "start": "1350570",
    "end": "1357560"
  },
  {
    "text": "different values which is quite a wide like there's a lot of information you can pack in there if you assign",
    "start": "1357560",
    "end": "1363130"
  },
  {
    "text": "semantics to specific values of the integers",
    "start": "1363130",
    "end": "1367780"
  },
  {
    "text": "don't use balls ever in interfaces they're evil usually things start out",
    "start": "1368170",
    "end": "1375050"
  },
  {
    "text": "being binary and then they turns out there was a third case but now you've limited your two to the power of 32 set",
    "start": "1375050",
    "end": "1381260"
  },
  {
    "text": "of valid values to two but and you're still even using the same storage like",
    "start": "1381260",
    "end": "1387260"
  },
  {
    "text": "just don't ever use balls they don't communicate well they don't behave well don't don't use balls but since you're",
    "start": "1387260",
    "end": "1393920"
  },
  {
    "text": "adding semantics to integers and integers are also always the same you usually want some help and that's where",
    "start": "1393920",
    "end": "1400010"
  },
  {
    "text": "the numerators come in but you don't wanna numerators in signatures because first of all they're difficult to translate and they're integral but not",
    "start": "1400010",
    "end": "1407390"
  },
  {
    "text": "necessarily int and of course we want binary stability and binary sort of you want to be able to predict exactly what",
    "start": "1407390",
    "end": "1413840"
  },
  {
    "text": "to lay out that function exists from your i-45 and integers they know how to",
    "start": "1413840",
    "end": "1419060"
  },
  {
    "text": "deal with but they don't know about your enumerators so use them for that for communication and documentation purposes",
    "start": "1419060",
    "end": "1424100"
  },
  {
    "text": "but don't use them in signatures as name constants are obviously fine enough",
    "start": "1424100",
    "end": "1434660"
  },
  {
    "text": "about ends let's talk about allocations don't do them",
    "start": "1434660",
    "end": "1440740"
  },
  {
    "text": "the problem with allocation is that they introduce a lot of complexity there's a",
    "start": "1443010",
    "end": "1448180"
  },
  {
    "start": "1446000",
    "end": "1574000"
  },
  {
    "text": "lot of questions that arise that are sometimes subtle and sometimes not that if you that you will quickly get bitten",
    "start": "1448180",
    "end": "1454450"
  },
  {
    "text": "by if you allocate a lot and this is obviously from the context of the core library right so the question is when",
    "start": "1454450",
    "end": "1460210"
  },
  {
    "text": "you allocate something like in our blob example who owns that object do you take care of it from the core library do you",
    "start": "1460210",
    "end": "1466090"
  },
  {
    "text": "register it somewhere in your own internal object graph are they responsible for clearing its what if",
    "start": "1466090",
    "end": "1471130"
  },
  {
    "text": "they have a different lifetime semantics than you expected right you can actually know that in advance and the best decision is of",
    "start": "1471130",
    "end": "1477460"
  },
  {
    "text": "course to let the runtime deal with that when I say runtime I mean the next library developer right which might be",
    "start": "1477460",
    "end": "1483250"
  },
  {
    "text": "writing Python they might be writing SQL because run times languages they have",
    "start": "1483250",
    "end": "1488980"
  },
  {
    "text": "different models they are different models of ownership and they have different models of lifetimes and you",
    "start": "1488980",
    "end": "1494530"
  },
  {
    "text": "want to accommodate for for them as we",
    "start": "1494530",
    "end": "1499600"
  },
  {
    "text": "saw in the example earlier when do you actually free write very often you would then have to hook because custom",
    "start": "1499600",
    "end": "1505510"
  },
  {
    "text": "destructors into your own your garbage collector which is deterministic first",
    "start": "1505510",
    "end": "1512440"
  },
  {
    "text": "of all but it's also very clumsy and it forces your callers to to store your pointers then there's also the question",
    "start": "1512440",
    "end": "1521770"
  },
  {
    "text": "of copying right if you just provide a pointer to your structure you also may",
    "start": "1521770",
    "end": "1527500"
  },
  {
    "text": "be sometimes neat well if it's supposed to be Coffeyville which is often a good idea it turns out you wouldn't need to",
    "start": "1527500",
    "end": "1533380"
  },
  {
    "text": "provide a custom copy operation what if you want to reinitialize something what if you want to partially initialize something what if you want multi-faced",
    "start": "1533380",
    "end": "1539380"
  },
  {
    "text": "initialization which is perfectly viable and interesting in a lot of languages",
    "start": "1539380",
    "end": "1544500"
  },
  {
    "text": "and also you know if you're writing Python but you're allocating and see why",
    "start": "1544500",
    "end": "1549700"
  },
  {
    "text": "you're bothering writing Python in the first place if python is not going to deal with the memory for you right then you're just having a very slow program",
    "start": "1549700",
    "end": "1555730"
  },
  {
    "text": "that's basically see you you get all sorts of issues so don't do that and one",
    "start": "1555730",
    "end": "1564430"
  },
  {
    "text": "of the big problems people tend to have with C or unmanaged languages is that it is very easy to League memory but I've",
    "start": "1564430",
    "end": "1569950"
  },
  {
    "text": "solved that problem because it's very easy to not leak memory if you're never allocate",
    "start": "1569950",
    "end": "1575909"
  },
  {
    "start": "1574000",
    "end": "1583000"
  },
  {
    "text": "so don't do that the question and sometimes you still need memory is all lost what's the alternative well you",
    "start": "1575909",
    "end": "1584759"
  },
  {
    "start": "1583000",
    "end": "1736000"
  },
  {
    "text": "provide two functions the first function would be a function for that specific",
    "start": "1584759",
    "end": "1591149"
  },
  {
    "text": "procedure to query design the size so how much memory do I need to provide for",
    "start": "1591149",
    "end": "1596819"
  },
  {
    "text": "this object construction or reading or something to make sense well there is a",
    "start": "1596819",
    "end": "1602639"
  },
  {
    "text": "function for LAN you decide okay so how much memory do I need to allocate and then your client will then allocate his",
    "start": "1602639",
    "end": "1610139"
  },
  {
    "text": "bytes however he feels like it right so it's just creating a buffer and then you",
    "start": "1610139",
    "end": "1616919"
  },
  {
    "text": "take that buffer as an argument to the next function which then writes the data so you sort of disconnect the the",
    "start": "1616919",
    "end": "1622499"
  },
  {
    "text": "allocation from the population of data that's surprisingly easy to work with",
    "start": "1622499",
    "end": "1631739"
  },
  {
    "text": "and it's very comfortable and it has a lot of benefits because this style enable enables paging right so now you",
    "start": "1631739",
    "end": "1639629"
  },
  {
    "text": "can say all right so we're actually going to have to write about 10 gigabytes of memory but you don't need to run allocate at 10 gigabytes array",
    "start": "1639629",
    "end": "1646049"
  },
  {
    "text": "now you can allocate 1 gigabyte at a time and call the same function with different parameters every time to sort",
    "start": "1646049",
    "end": "1652259"
  },
  {
    "text": "of page through your entire source of whatever you're gonna do so it works very well it's frames for instance you",
    "start": "1652259",
    "end": "1659549"
  },
  {
    "text": "can reuse your buffers if you know that you're you really only need to process a",
    "start": "1659549",
    "end": "1664949"
  },
  {
    "text": "few bytes at a time but you need new bytes every time you can now you use the",
    "start": "1664949",
    "end": "1670619"
  },
  {
    "text": "same buffer every time by allocating at once from the outside and just calling the same the function with the same",
    "start": "1670619",
    "end": "1676529"
  },
  {
    "text": "buffer pointer every time you can do multiple writes in a single buffer which",
    "start": "1676529",
    "end": "1681539"
  },
  {
    "text": "is something we use to great success in seg-y l where we read large sometimes",
    "start": "1681539",
    "end": "1687239"
  },
  {
    "text": "even on or actually very related types of sources of data into the same big big",
    "start": "1687239",
    "end": "1695519"
  },
  {
    "text": "right because it's our large in America right and provided sort of different",
    "start": "1695519",
    "end": "1701279"
  },
  {
    "text": "lens on this seismic which is very useful it supports different allocation strategies if you want to use your Arena",
    "start": "1701279",
    "end": "1707429"
  },
  {
    "text": "if you want to have an object pool if you want to have a concurrent allocations this is not possible because",
    "start": "1707429",
    "end": "1712580"
  },
  {
    "text": "you're allowing the library writer to make that call instead of you and of",
    "start": "1712580",
    "end": "1718610"
  },
  {
    "text": "course memory is now always registered with the host which means that there it naturally works with their garbage",
    "start": "1718610",
    "end": "1724190"
  },
  {
    "text": "collector so the question then maybe is",
    "start": "1724190",
    "end": "1729860"
  },
  {
    "text": "what does this actually look like in in practice well what is the consequence in code so this is lifted almost verbatim",
    "start": "1729860",
    "end": "1740270"
  },
  {
    "start": "1736000",
    "end": "1899000"
  },
  {
    "text": "from our source codes I've simplified and cleaned up a few names for the sake",
    "start": "1740270",
    "end": "1746870"
  },
  {
    "text": "of fitting on a slide but this is what looks like from Python so in Python we use numpy and so it's alright so this is",
    "start": "1746870",
    "end": "1753830"
  },
  {
    "text": "the shape of the memory I'm about to need of the data that you use you just asked for and this is its type usually",
    "start": "1753830",
    "end": "1760340"
  },
  {
    "text": "that is a four byte float but not always and then I'm calling this get trace",
    "start": "1760340",
    "end": "1765350"
  },
  {
    "text": "function or get TR function and I'm passing it this buffer that's an argument in the Python extension which",
    "start": "1765350",
    "end": "1773720"
  },
  {
    "text": "is technically written in C++ I actually just lift that buffer from",
    "start": "1773720",
    "end": "1780140"
  },
  {
    "text": "that was now allocated in Python as you can see it's allocated in Python code I got that internal pointer and I passed",
    "start": "1780140",
    "end": "1786230"
  },
  {
    "text": "that in to the core library the corner library never actually doesn't know that",
    "start": "1786230",
    "end": "1791690"
  },
  {
    "text": "python is the one driving it it just sees alright so I had this memory done I'm being given and I'm being asked to",
    "start": "1791690",
    "end": "1797570"
  },
  {
    "text": "get this data and I'm just gonna write it in there because we can assume that",
    "start": "1797570",
    "end": "1803090"
  },
  {
    "text": "our users our library Watchers and I know what they're doing we know we're not checking boundaries we're not",
    "start": "1803090",
    "end": "1808460"
  },
  {
    "text": "checking that these memories actually valid or anything because we assume that they've already dealt with that and of",
    "start": "1808460",
    "end": "1814190"
  },
  {
    "text": "course they have a much easier job of doing that because we're offloading that job to numpy and this actually gives us",
    "start": "1814190",
    "end": "1823610"
  },
  {
    "text": "a lot of opportunities it allows us to",
    "start": "1823610",
    "end": "1828910"
  },
  {
    "text": "now allocate a shape to get a matrix",
    "start": "1828910",
    "end": "1833960"
  },
  {
    "text": "right shape does not now have to be one dimensional it can be two-dimensional we",
    "start": "1833960",
    "end": "1839030"
  },
  {
    "text": "can actually write this into a different table we typically using Empire rice but you could have used something from a blast object you could",
    "start": "1839030",
    "end": "1846090"
  },
  {
    "text": "have used an axe RA or any kind of object really we're not very picky on not an optimization we do is that when",
    "start": "1846090",
    "end": "1853920"
  },
  {
    "text": "we're writing or when we're detecting",
    "start": "1853920",
    "end": "1859980"
  },
  {
    "text": "that we're being used in a for loop which you can in Python by realizing that or recognizing that you're coming",
    "start": "1859980",
    "end": "1865020"
  },
  {
    "text": "from an iterator or the ether call we actually reused the buffer so you use a single buffer even though you're reading",
    "start": "1865020",
    "end": "1871770"
  },
  {
    "text": "the full file so you're using typically maybe two kilobytes of memory to read a",
    "start": "1871770",
    "end": "1878160"
  },
  {
    "text": "10 terabyte file which is quite cool of course this calling style is still very",
    "start": "1878160",
    "end": "1883590"
  },
  {
    "text": "unpaid for neck but as I alluded to before this is still deep inside the library and the user never actually sees",
    "start": "1883590",
    "end": "1889890"
  },
  {
    "text": "this interaction something that isn't",
    "start": "1889890",
    "end": "1897480"
  },
  {
    "text": "very clear from this slide is how we're actually calling the core functions and what does sort of entails so one thing",
    "start": "1897480",
    "end": "1905780"
  },
  {
    "text": "in order to maintain future and backward compatibility I recommend always doing",
    "start": "1905780",
    "end": "1911490"
  },
  {
    "start": "1910000",
    "end": "2053000"
  },
  {
    "text": "this so there is never ever an excuse for not checking the error code if something can go wrong and you want to",
    "start": "1911490",
    "end": "1918000"
  },
  {
    "text": "report it as nicely as you can to your users but sometimes we end up getting more",
    "start": "1918000",
    "end": "1925110"
  },
  {
    "text": "descriptive error codes as time goes on because we discover more edge cases right so what you should do if you're",
    "start": "1925110",
    "end": "1933360"
  },
  {
    "text": "actually wanted to care about it a lot you should switch over your error it's an int so it's of course switching is",
    "start": "1933360",
    "end": "1938910"
  },
  {
    "text": "cheap and the branch predictor is gonna help you along and then you have your",
    "start": "1938910",
    "end": "1946320"
  },
  {
    "text": "okay which is usually okay fine go on and if not then you handle the errors that you know about but always have the",
    "start": "1946320",
    "end": "1952140"
  },
  {
    "text": "default case which is to just propagate the error back up usually in Python we will end up throwing unknown error which",
    "start": "1952140",
    "end": "1959130"
  },
  {
    "text": "is fine but the point is that is still not handled and we never get into the risk of having silently corrupted data",
    "start": "1959130",
    "end": "1964950"
  },
  {
    "text": "but continued execution the shorthand of that is to just check is this nonzero",
    "start": "1964950",
    "end": "1971460"
  },
  {
    "text": "because okay worse or the success code was very carefully chosen to be zero",
    "start": "1971460",
    "end": "1976860"
  },
  {
    "text": "we both to enable the style house because on alleys Intel checking for zero is faster than checking for non",
    "start": "1976860",
    "end": "1982320"
  },
  {
    "text": "zero which is very convenient right so then if there is an error just return it",
    "start": "1982320",
    "end": "1988020"
  },
  {
    "text": "back out we've actually used this before",
    "start": "1988020",
    "end": "1993840"
  },
  {
    "text": "because we have added error codes to functions and then we just use this to",
    "start": "1993840",
    "end": "1999299"
  },
  {
    "text": "discover whenever we were missing a case but at least that code was now not completely broken maybe a little bit",
    "start": "1999299",
    "end": "2005960"
  },
  {
    "text": "less used for error message for a while but over time these tend to converge against better error messages because",
    "start": "2005960",
    "end": "2011179"
  },
  {
    "text": "the runtime the library now has more opportunities to be precise but this is",
    "start": "2011179",
    "end": "2017870"
  },
  {
    "text": "without changing any any code in the runtime you can now handle cases added this is a form of future proofing you",
    "start": "2017870",
    "end": "2024830"
  },
  {
    "text": "could argue that the return value is a part of the binary interface for a",
    "start": "2024830",
    "end": "2029900"
  },
  {
    "text": "certain class of errors that would be a very interesting discussion from this",
    "start": "2029900",
    "end": "2035480"
  },
  {
    "text": "perspective it kind of defines saying you're not allowed to assume that the",
    "start": "2035480",
    "end": "2041120"
  },
  {
    "text": "function will always return the same error across multiple versions in particular because sometimes we add",
    "start": "2041120",
    "end": "2046760"
  },
  {
    "text": "error codes for not supported yet basically this is the slightly",
    "start": "2046760",
    "end": "2055520"
  },
  {
    "start": "2053000",
    "end": "2089000"
  },
  {
    "text": "abbreviated list over the error codes that we can return and we try and describe what exactly went wrong for",
    "start": "2055520",
    "end": "2061220"
  },
  {
    "text": "multiple or for our functions and these are of course reused because you always have the context in which this was",
    "start": "2061220",
    "end": "2066440"
  },
  {
    "text": "returned because you know the name of the function that returned that so invalid field means actually different",
    "start": "2066440",
    "end": "2072138"
  },
  {
    "text": "things a little bit depending on where you're calling it from but that's fine of course the return types are always",
    "start": "2072139",
    "end": "2077960"
  },
  {
    "text": "ents but we're choosing our integers from this table",
    "start": "2077960",
    "end": "2083590"
  },
  {
    "text": "so let's talk about primitive functions because now we know how to call them so",
    "start": "2088899",
    "end": "2097190"
  },
  {
    "start": "2089000",
    "end": "2107000"
  },
  {
    "text": "let's look at how to combine them combine no allocation primitive type signature function lessons into you know",
    "start": "2097190",
    "end": "2104720"
  },
  {
    "text": "the whole the full picture getting up to",
    "start": "2104720",
    "end": "2110660"
  },
  {
    "text": "version 1 it takes a while because what you want to do is to try and identify the set of atoms that would solve your",
    "start": "2110660",
    "end": "2117770"
  },
  {
    "text": "underlying problems you want your core library to always be a part of the decision what something means it means a",
    "start": "2117770",
    "end": "2125510"
  },
  {
    "text": "lot of functions that just look up to a table or return a set of you know predefined strings and that's fine but",
    "start": "2125510",
    "end": "2131900"
  },
  {
    "text": "you want that authority to be within your core of course your run times are",
    "start": "2131900",
    "end": "2137000"
  },
  {
    "text": "free to choose to ignore that when it's convenient but overall you want a list on to be available you want your your",
    "start": "2137000",
    "end": "2146810"
  },
  {
    "text": "runtime libraries your Python library for instance to really only massage arguments and provide an interface to",
    "start": "2146810",
    "end": "2154040"
  },
  {
    "text": "the Python users and have all the actual action happening in the core and really",
    "start": "2154040",
    "end": "2161180"
  },
  {
    "text": "this is just good software design write your functions should have a single responsibility and should be very clear in their contract one thing I have",
    "start": "2161180",
    "end": "2169220"
  },
  {
    "text": "noticed is about saguaro itself actually is that even with our quite low-level",
    "start": "2169220",
    "end": "2176480"
  },
  {
    "text": "interface I really wish it was even lower level sometimes right I would have had even more details to play with",
    "start": "2176480",
    "end": "2183700"
  },
  {
    "text": "because when they don't work they can be augmented but now I need to add more you",
    "start": "2183700",
    "end": "2191270"
  },
  {
    "text": "know clumsy and if different functions [Music] because remember that our users would be",
    "start": "2191270",
    "end": "2199010"
  },
  {
    "text": "other library developers and they want to be able to turn knobs and to make these decisions for themselves because",
    "start": "2199010",
    "end": "2204770"
  },
  {
    "text": "they have the context that they want to apply this in right but ideally if two",
    "start": "2204770",
    "end": "2210470"
  },
  {
    "text": "functions can be combined to produce a results don't add the third function that is just a combination of the two",
    "start": "2210470",
    "end": "2215510"
  },
  {
    "text": "because your users might want to be able to inject something in the middle and they're adults they know how to call",
    "start": "2215510",
    "end": "2221700"
  },
  {
    "text": "multiple functions anyway thanks that's not your issue in order to design",
    "start": "2221700",
    "end": "2229140"
  },
  {
    "text": "them I have a few guidelines and I'm actually very happy with this term",
    "start": "2229140",
    "end": "2235079"
  },
  {
    "text": "outside in wiring that's here because it",
    "start": "2235079",
    "end": "2242280"
  },
  {
    "text": "makes it very clear what state and what data is actually needed to compute write",
    "start": "2242280",
    "end": "2247890"
  },
  {
    "text": "something so for instance we have a function that is called trace ice or",
    "start": "2247890",
    "end": "2253410"
  },
  {
    "text": "something and that takes I think six parameters and by looking at that",
    "start": "2253410",
    "end": "2258809"
  },
  {
    "text": "signature alone you know exactly what data do I need to provide in order to",
    "start": "2258809",
    "end": "2265440"
  },
  {
    "text": "compute the size of a trace trace is a concept from seismic it's a single line",
    "start": "2265440",
    "end": "2270809"
  },
  {
    "text": "of data from the boat usually reflected back from different types of rock so it",
    "start": "2270809",
    "end": "2278430"
  },
  {
    "text": "makes it very clear what data is needed and it allows the consumer your library",
    "start": "2278430",
    "end": "2284010"
  },
  {
    "text": "to initialize and prepare properly maybe they want to sometimes cache maybe they want to load something from desk maybe",
    "start": "2284010",
    "end": "2289859"
  },
  {
    "text": "they want a multi-phase initialize but not choice is now up to them not up to you if you heavily parameterize your",
    "start": "2289859",
    "end": "2296460"
  },
  {
    "text": "functions your features can be your future selection can be done by storing values instead of storing dispatch",
    "start": "2296460",
    "end": "2303000"
  },
  {
    "text": "tables which is very convenient that means you can actually add a set of new",
    "start": "2303000",
    "end": "2310140"
  },
  {
    "text": "algorithms and procedures and you can switch between them with an integer without rather than having to select",
    "start": "2310140",
    "end": "2315539"
  },
  {
    "text": "different foreign functions to call it allows overriding at every step and",
    "start": "2315539",
    "end": "2322160"
  },
  {
    "text": "there's a case internet so for instance let's assume you want to enumerate a lot a lot of data on desk but you know that",
    "start": "2322160",
    "end": "2328559"
  },
  {
    "text": "they're almost the same size always you can of course compute that index with",
    "start": "2328559",
    "end": "2334349"
  },
  {
    "text": "the function that you of course have Lipper amortized and then pass this index as a parameter to every function",
    "start": "2334349",
    "end": "2340470"
  },
  {
    "text": "that actually cares about this right [Music]",
    "start": "2340470",
    "end": "2346700"
  },
  {
    "text": "what you would often do is that you would store this inside a opaque handle or something in C",
    "start": "2346700",
    "end": "2353340"
  },
  {
    "text": "but if you instead pass it as a parameter and actually pass it as an explicit parameter that is basically just a pointer to a lot of integers in a",
    "start": "2353340",
    "end": "2359640"
  },
  {
    "text": "row which are your file offsets then you can manipulate this from Python I only care about the first half of the list or",
    "start": "2359640",
    "end": "2366780"
  },
  {
    "text": "maybe remove some elements that you know are bad and that is something that you might want to actually exploit as a",
    "start": "2366780",
    "end": "2373530"
  },
  {
    "text": "python library writer or whatever your runtime would be in our case is Python which is why I keep mentioning it this",
    "start": "2373530",
    "end": "2382650"
  },
  {
    "text": "wiring this sort of mixing features together is now done from the outside",
    "start": "2382650",
    "end": "2388250"
  },
  {
    "text": "because and because it's at that point you have the context of what you want to do right it's easy to report the error",
    "start": "2388250",
    "end": "2395700"
  },
  {
    "text": "on exactly that's that I fell because you know exactly which function that fell and you know that it only did that one thing and because of course your",
    "start": "2395700",
    "end": "2402960"
  },
  {
    "text": "functions are very small and very explicit on the parameters it can also be emulated and tested very easily so a",
    "start": "2402960",
    "end": "2410760"
  },
  {
    "text": "lot of the time we actually emulate Earth by just passing different parameters making the function behave",
    "start": "2410760",
    "end": "2416730"
  },
  {
    "text": "differently and we observe that that difference is actually happening so it's it goes really well for for testing as",
    "start": "2416730",
    "end": "2424440"
  },
  {
    "text": "well having a lot of functions to do all",
    "start": "2424440",
    "end": "2431850"
  },
  {
    "text": "these things is pretty convenient because it's the assembly of them it's putting them on in order that would",
    "start": "2431850",
    "end": "2439110"
  },
  {
    "text": "solve your problem but it allows you it gives you a lot of flexibility to report and in Python for instance raise the",
    "start": "2439110",
    "end": "2444300"
  },
  {
    "text": "right exception at the right time because of that there is always the temptation of actually solving the problem in Python or in the language",
    "start": "2444300",
    "end": "2451110"
  },
  {
    "text": "you're targeting first that's usually a mistake and then we made that once that",
    "start": "2451110",
    "end": "2457650"
  },
  {
    "text": "was very painful to to unravel so I have a quick example on that this is one of",
    "start": "2457650",
    "end": "2464370"
  },
  {
    "text": "the workhorse functions in segue Oh it reads one of these traces a long list",
    "start": "2464370",
    "end": "2469500"
  },
  {
    "text": "of numbers from desc if you squint a little bit you will see",
    "start": "2469500",
    "end": "2476820"
  },
  {
    "text": "that this is reading a possibly strided column from a matrix because in fact our seismic data format is really just a big",
    "start": "2476820",
    "end": "2484140"
  },
  {
    "text": "matrix so I want to highlight two things I will",
    "start": "2484140",
    "end": "2490670"
  },
  {
    "text": "highlight these three these are your strides and they're modeled after the",
    "start": "2490670",
    "end": "2496070"
  },
  {
    "text": "steps that you would do when you slice lists in Python this is the strided read",
    "start": "2496070",
    "end": "2503080"
  },
  {
    "text": "reading a full column is really just a special case of this where of course you start is your first element your stop is",
    "start": "2503080",
    "end": "2511130"
  },
  {
    "text": "your last element and your step is one so there's actually not a need to have a function dedicated to reading a full",
    "start": "2511130",
    "end": "2517400"
  },
  {
    "text": "column because it's just a special case of destroyed the the caller the other",
    "start": "2517400",
    "end": "2525500"
  },
  {
    "text": "library writer will now be able to dispatch both strided and full colon reads with the same function and it",
    "start": "2525500",
    "end": "2532070"
  },
  {
    "text": "could use runtime parameters to decide which one there is no need to dispatch between this one which could read",
    "start": "2532070",
    "end": "2537680"
  },
  {
    "text": "strided on one that would read the full trace or the full column and then",
    "start": "2537680",
    "end": "2543770"
  },
  {
    "text": "there's these two they're a little bit cryptically named a lot of that comes from the context of the problem that we're trying to solve very so this",
    "start": "2543770",
    "end": "2553220"
  },
  {
    "text": "described where the data in the file starts and how big or rather how long in",
    "start": "2553220",
    "end": "2559580"
  },
  {
    "text": "points each of these columns are usually you would hide this inside the file",
    "start": "2559580",
    "end": "2565790"
  },
  {
    "text": "handle FP right but it has proven very",
    "start": "2565790",
    "end": "2570920"
  },
  {
    "text": "useful to keep passing this apart because that means that we can actually deal with files that aren't completely",
    "start": "2570920",
    "end": "2576530"
  },
  {
    "text": "up to the standard because for instance they were truncated a little bit when they were copied so we can actually recover dealing with broken files by",
    "start": "2576530",
    "end": "2582770"
  },
  {
    "text": "manipulating where exactly the data starts and to be fair these values are",
    "start": "2582770",
    "end": "2593420"
  },
  {
    "text": "usually provided by the library itself we provide functions to get the default and the sign and actually the inferred",
    "start": "2593420",
    "end": "2599840"
  },
  {
    "text": "value of these two parameters but you are able to manipulate them and that is something we have used to to great",
    "start": "2599840",
    "end": "2606170"
  },
  {
    "text": "success usually Python never even inspects them it just passes them along",
    "start": "2606170",
    "end": "2613180"
  },
  {
    "text": "it also powers actually one of the functions where we're trying to read a sort of parallel ghost image of the file",
    "start": "2613180",
    "end": "2618860"
  },
  {
    "text": "which is pretty cool callers",
    "start": "2618860",
    "end": "2624050"
  },
  {
    "text": "the other library Python can I actually reinterpret races since we passed the",
    "start": "2624050",
    "end": "2630860"
  },
  {
    "text": "trace size the size of the column in bytes and allowed us to without any modification to the binary interface",
    "start": "2630860",
    "end": "2637060"
  },
  {
    "text": "support two three and eight bytes numerical values almost no code change",
    "start": "2637060",
    "end": "2643730"
  },
  {
    "text": "in Python I think the entire def is twenty lines and it's just not failing code that was added no actually numerix",
    "start": "2643730",
    "end": "2651080"
  },
  {
    "text": "were were changed this function here is",
    "start": "2651080",
    "end": "2658910"
  },
  {
    "text": "probably the one I'm that have yes the",
    "start": "2658910",
    "end": "2678830"
  },
  {
    "text": "right so the question is if the both pointer there is allocated in Python and",
    "start": "2678830",
    "end": "2685220"
  },
  {
    "text": "what happens if it's no well if it's null then the function crashes or I think it just returns invalid arguments",
    "start": "2685220",
    "end": "2691880"
  },
  {
    "text": "but it is yes it's something that's allocated in Python and in order to figure out how large that should be you",
    "start": "2691880",
    "end": "2698570"
  },
  {
    "text": "have to call a different function that is provided and that is really just inspecting the size the number of",
    "start": "2698570",
    "end": "2703970"
  },
  {
    "text": "samples in or the number of elements in your columns and then the size of each element it's just a simple",
    "start": "2703970",
    "end": "2710030"
  },
  {
    "text": "multiplication you can do it by hand but we provide a function for you in order to know having to deal with that distinction but we never actually",
    "start": "2710030",
    "end": "2717380"
  },
  {
    "text": "inspect a buffer because we know that our users in this case would be library writers and in this case it's me so I",
    "start": "2717380",
    "end": "2724670"
  },
  {
    "text": "knew that I know that the buffers I'm passing are saying and in fact you can assume that because you're not targeting",
    "start": "2724670",
    "end": "2730010"
  },
  {
    "text": "a developer far away joining to build an application for something you're targeting someone that will care about",
    "start": "2730010",
    "end": "2736010"
  },
  {
    "text": "these details so that's fine but of course because this is not something you would do in all libraries you would try",
    "start": "2736010",
    "end": "2741920"
  },
  {
    "text": "and help them with allocations but you shouldn't here for this specific problem",
    "start": "2741920",
    "end": "2747080"
  },
  {
    "start": "2746000",
    "end": "2832000"
  },
  {
    "text": "this is function I'm probably the most happy with",
    "start": "2747080",
    "end": "2751839"
  },
  {
    "text": "so in in seg-y numerix can have a lot of different formats it can be IBM float it",
    "start": "2754690",
    "end": "2761690"
  },
  {
    "text": "can be I Triple E floating both 4 & 8 bytes it can be 1 2 3 4 & 8 bytes signed",
    "start": "2761690",
    "end": "2769670"
  },
  {
    "text": "and unsigned integers in both little and big-endian they're all powered by this",
    "start": "2769670",
    "end": "2775840"
  },
  {
    "text": "interface this function takes a format which is an integer with the gentleman's",
    "start": "2775840",
    "end": "2781250"
  },
  {
    "text": "agreement it takes the size in elements and it's a",
    "start": "2781250",
    "end": "2788990"
  },
  {
    "text": "buffer that it will then change this is not actually something that is something that could have been done inside read",
    "start": "2788990",
    "end": "2796820"
  },
  {
    "text": "sub trace function but in fact it's not it is sort of separated because that",
    "start": "2796820",
    "end": "2802520"
  },
  {
    "text": "allows us to for instance you read in a batch even asynchronously say a hundred",
    "start": "2802520",
    "end": "2809180"
  },
  {
    "text": "columns like a hundred of these tracers and then in a single batch convert them",
    "start": "2809180",
    "end": "2816320"
  },
  {
    "text": "to the CPU native representation so that splitting of responsibilities has proved",
    "start": "2816320",
    "end": "2822590"
  },
  {
    "text": "very very useful and actually it allows us to have sources of data that aren't on desk the alternative to that would",
    "start": "2822590",
    "end": "2831560"
  },
  {
    "text": "very often have been Bessel which in terms of binary stability would of",
    "start": "2831560",
    "end": "2837830"
  },
  {
    "start": "2832000",
    "end": "2876000"
  },
  {
    "text": "course be able to provide the same because we just keep on adding functions but that means that yeah in order to",
    "start": "2837830",
    "end": "2843950"
  },
  {
    "text": "figure out which one to do the Python library would have to know what format it is what format the CPU is and I have",
    "start": "2843950",
    "end": "2852980"
  },
  {
    "text": "all these function pointers to dispatch to now that is done inside the library",
    "start": "2852980",
    "end": "2858440"
  },
  {
    "text": "and although I need to do in Python is to store an integer which the library has conveniently provided for me you're",
    "start": "2858440",
    "end": "2866540"
  },
  {
    "text": "encoding the same information but instead of doing it in a variable you're doing it in function names which are a lot more difficult to work with across",
    "start": "2866540",
    "end": "2873200"
  },
  {
    "text": "language boundaries we've learned to separate i/o from all",
    "start": "2873200",
    "end": "2880779"
  },
  {
    "start": "2876000",
    "end": "2920000"
  },
  {
    "text": "other logic and this is one of those ancient programming advices standstill can easy to mess up in particular",
    "start": "2880779",
    "end": "2889210"
  },
  {
    "text": "because segue io is an i/o library and how well can you actually separate that and it turns out you should even be more",
    "start": "2889210",
    "end": "2896410"
  },
  {
    "text": "than number with it what is the gain of not providing i/o for instance well right now our i/o all our functionality",
    "start": "2896410",
    "end": "2903069"
  },
  {
    "text": "is tied up to our special segue handle right the problem with time is now that",
    "start": "2903069",
    "end": "2909039"
  },
  {
    "text": "we maybe want to work on memory mapped files or even files in the cloud that turn out to actually be a showstopper",
    "start": "2909039",
    "end": "2914769"
  },
  {
    "text": "for a lot of functionality and the thing is what really is io well I would argue",
    "start": "2914769",
    "end": "2921190"
  },
  {
    "start": "2920000",
    "end": "2996000"
  },
  {
    "text": "that this to native function is a type of i/o because we're now doing a memory transaction across the language boundary",
    "start": "2921190",
    "end": "2927960"
  },
  {
    "text": "which is very similar to doing a memory transaction across a physical boundary",
    "start": "2927960",
    "end": "2933190"
  },
  {
    "text": "between the CPU or sorry between the disk and the memory when we maybe half a",
    "start": "2933190",
    "end": "2943989"
  },
  {
    "text": "year ago we added support for another six or seven numerical formats without",
    "start": "2943989",
    "end": "2949749"
  },
  {
    "text": "any change just Python silently accepted more files where it used to crash and now didn't",
    "start": "2949749",
    "end": "2956079"
  },
  {
    "text": "anymore that was all the difference that our users could would notice and this",
    "start": "2956079",
    "end": "2961749"
  },
  {
    "text": "enables I think good integration it",
    "start": "2961749",
    "end": "2971109"
  },
  {
    "text": "allows us to translate partial buffers and it's nice if you just want to say for instance translate half of your",
    "start": "2971109",
    "end": "2977529"
  },
  {
    "text": "buffer or maybe you want to read in in batches and translate in batches and as",
    "start": "2977529",
    "end": "2982930"
  },
  {
    "text": "I mentioned before your source data does not actually have to be seg-y could be read from a from a pipe or something and",
    "start": "2982930",
    "end": "2988479"
  },
  {
    "text": "it would still be able to use this function because it's not tied to the i/o itself and with that I say thank you",
    "start": "2988479",
    "end": "2997089"
  },
  {
    "start": "2996000",
    "end": "3013000"
  },
  {
    "text": "and if there are any questions then I'm happy to take them we already had one",
    "start": "2997089",
    "end": "3003269"
  },
  {
    "text": "any any questions all right thank you very much",
    "start": "3003269",
    "end": "3010869"
  },
  {
    "text": "[Applause]",
    "start": "3011000",
    "end": "3014119"
  }
]