[
  {
    "text": "all right 45 minutes is really short time for a talk so let's get going so we",
    "start": "30",
    "end": "6330"
  },
  {
    "text": "don't get too late Bjorn father I'm here",
    "start": "6330",
    "end": "11639"
  },
  {
    "text": "to talk to you about how are all the functions for ordinary c++ diversity this is not a super advanced talk but it",
    "start": "11639",
    "end": "19050"
  },
  {
    "text": "could be interesting I think simple clothes developers usually don't use",
    "start": "19050",
    "end": "24119"
  },
  {
    "text": "higher order functions very much there they're good historic reasons for this because it's been a pain a bit of",
    "start": "24119",
    "end": "31890"
  },
  {
    "text": "background I guess I'm becoming one of the old beer all the Greybeards in this business writing software has",
    "start": "31890",
    "end": "39600"
  },
  {
    "text": "been my profession since 94 wrote my first C++ program I think 93 I'm not entirely certain know",
    "start": "39600",
    "end": "46980"
  },
  {
    "text": "that most of my career been in embedded systems although a few weeks back I've",
    "start": "46980",
    "end": "53360"
  },
  {
    "text": "started a new career I'm working for a store counter in Stockholm with in-memory databases this talk is not",
    "start": "53360",
    "end": "60719"
  },
  {
    "text": "about databases so higher-order",
    "start": "60719",
    "end": "65760"
  },
  {
    "text": "functions so what I'm going to do now is",
    "start": "65760",
    "end": "72299"
  },
  {
    "text": "I'm going to give you a very brief entry into a higher-order functions and then",
    "start": "72299",
    "end": "78180"
  },
  {
    "text": "I'm getting into an example this example will be from the world because I kind of",
    "start": "78180",
    "end": "86820"
  },
  {
    "text": "guess that is where most of you feel and also because specially in don't like",
    "start": "86820",
    "end": "93380"
  },
  {
    "text": "historically these kind of constructions for fear of bloat and then we're going",
    "start": "93380",
    "end": "101820"
  },
  {
    "text": "to look at simple +17 optional and a really cool extension to it that may or",
    "start": "101820",
    "end": "107729"
  },
  {
    "text": "may not become standard I don't know we'll see so definition higher-order function a",
    "start": "107729",
    "end": "115399"
  },
  {
    "text": "higher-order function is a function that takes other functions as arguments or returns to function as a result within",
    "start": "115399",
    "end": "125460"
  },
  {
    "text": "the scope of this talk whenever I say function I mean anything that is callable it can be it can be a function",
    "start": "125460",
    "end": "133680"
  },
  {
    "text": "or whatever something that is callable",
    "start": "133680",
    "end": "138620"
  },
  {
    "text": "who here has used her functions as per this definition was never you ever few",
    "start": "139519",
    "end": "150269"
  },
  {
    "text": "hands okay you're in for a treat who's written money I was never written a higher-order",
    "start": "150269",
    "end": "157260"
  },
  {
    "text": "function a few hands good you'll go away",
    "start": "157260",
    "end": "163500"
  },
  {
    "text": "from here much wiser in forty minutes cool so here we have an example of a",
    "start": "163500",
    "end": "169829"
  },
  {
    "text": "higher-order function from the standard library student on/off so we're saying",
    "start": "169829",
    "end": "175170"
  },
  {
    "text": "that if none of the elements in the vector match this product is lambda then",
    "start": "175170",
    "end": "185239"
  },
  {
    "text": "we do something and none of is a higher-order function",
    "start": "185239",
    "end": "190980"
  },
  {
    "text": "because it accepts a function in this case a lambda as one of its parameters",
    "start": "190980",
    "end": "196189"
  },
  {
    "text": "so since a few of you had not seen these before or even less written than let's",
    "start": "196189",
    "end": "204480"
  },
  {
    "text": "have a look at how to implement none of it's not very difficult a chip IRA",
    "start": "204480",
    "end": "210449"
  },
  {
    "text": "function is a template so in this case none of takes an iterator pair and a",
    "start": "210449",
    "end": "219349"
  },
  {
    "text": "predicate something that is callable and we iterate over the elements and if the",
    "start": "219349",
    "end": "227129"
  },
  {
    "text": "predicate matches one of the elements we say return false because we the the function is none of not real match and",
    "start": "227129",
    "end": "233879"
  },
  {
    "text": "if we get through the entire loop without the predicate ever agreeing we say true ok nothing fancy you can be",
    "start": "233879",
    "end": "242909"
  },
  {
    "text": "super fancy induce you know stuff to ensure that predicate is actually",
    "start": "242909",
    "end": "247919"
  },
  {
    "text": "callable with the value type of iterator etcetera but standard library doesn't why all we do it",
    "start": "247919",
    "end": "255079"
  },
  {
    "text": "it doesn't really make sense to write none of us you have it in the standard library but just to show how you can do",
    "start": "255310",
    "end": "262630"
  },
  {
    "text": "this and then we continue with our program we write some more stuff we have",
    "start": "262630",
    "end": "268750"
  },
  {
    "text": "another algorithm from the standard libraries that any of also take",
    "start": "268750",
    "end": "274470"
  },
  {
    "text": "something callable in this case a lambda the thing clear so far nothing very",
    "start": "274470",
    "end": "281950"
  },
  {
    "text": "surprising would you be surprised if I say that I really find this code annoying super annoying can you guess",
    "start": "281950",
    "end": "291160"
  },
  {
    "text": "what it is I don't like about it it is",
    "start": "291160",
    "end": "297280"
  },
  {
    "text": "highlighted in boldface hint we have for",
    "start": "297280",
    "end": "302889"
  },
  {
    "text": "all practical purposes the same lambda repeated twice sure one of them has a",
    "start": "302889",
    "end": "308940"
  },
  {
    "text": "hard-coded constant zero the other can compares with the variable num which is",
    "start": "308940",
    "end": "314889"
  },
  {
    "text": "captured but it's essentially the same lambda and this annoys me I don't like",
    "start": "314889",
    "end": "320770"
  },
  {
    "text": "that I don't like it repetition so can we do anything again this repetition one",
    "start": "320770",
    "end": "331750"
  },
  {
    "text": "thing we can do hold on tight now we write a function",
    "start": "331750",
    "end": "338850"
  },
  {
    "text": "seafood verse 14 gave us the auto return type two functions which makes it possible to return lambdas and if there",
    "start": "340250",
    "end": "349050"
  },
  {
    "text": "is only one thing you will remember from this entire talk make it this make it remember to use the order to return type",
    "start": "349050",
    "end": "356880"
  },
  {
    "text": "to return lambdas because that enables so many cool things so now I have my",
    "start": "356880",
    "end": "366090"
  },
  {
    "text": "function equals it returns a lambda so I can get rid of some of the repetition at",
    "start": "366090",
    "end": "372630"
  },
  {
    "text": "this point I receive one horse what about stood function instead of Auto return and these are not really the same",
    "start": "372630",
    "end": "381890"
  },
  {
    "text": "to begin with Stud function does one",
    "start": "381890",
    "end": "387540"
  },
  {
    "text": "other things that it does is typewriter so you don't have to worry about what",
    "start": "387540",
    "end": "392700"
  },
  {
    "text": "what anything is but the typewriter is not for free so coming via still",
    "start": "392700",
    "end": "398730"
  },
  {
    "text": "function is a lot of overhead sometimes that's perfectly okay",
    "start": "398730",
    "end": "404160"
  },
  {
    "text": "sometimes it's not at all acceptable but",
    "start": "404160",
    "end": "409710"
  },
  {
    "text": "let's general why only limit ourselves to an int you can call with anything and",
    "start": "409710",
    "end": "418530"
  },
  {
    "text": "you may this know also that the lambda use is the it's a generic lambda that",
    "start": "418530",
    "end": "426570"
  },
  {
    "text": "uses Auto or its parameters so it can be called with think doesn't have to be the",
    "start": "426570",
    "end": "431730"
  },
  {
    "text": "same type as the keys as long as they are equality compo listed function that",
    "start": "431730",
    "end": "440670"
  },
  {
    "text": "is not the case at all because I cannot say I want to stood function that",
    "start": "440670",
    "end": "446460"
  },
  {
    "text": "returns a bool is callable with anything that satisfies some criteria that is not",
    "start": "446460",
    "end": "452430"
  },
  {
    "text": "known outside so for example if I call",
    "start": "452430",
    "end": "458450"
  },
  {
    "text": "this function equals with a consort or a string literal you will not be able to",
    "start": "458450",
    "end": "465810"
  },
  {
    "text": "call the the returned lambda with or the return stood found",
    "start": "465810",
    "end": "472200"
  },
  {
    "text": "if that is what you use with still string because the string is not a cost",
    "start": "472200",
    "end": "477910"
  },
  {
    "text": "charge door and it's not implicitly convertible so these are not really the",
    "start": "477910",
    "end": "483460"
  },
  {
    "text": "same even if you don't care about the overhead so use you co2 return time to",
    "start": "483460",
    "end": "492370"
  },
  {
    "text": "return lambdas so now I can write code like this if none of the values in the",
    "start": "492370",
    "end": "499750"
  },
  {
    "text": "equals zero and then later on while any of the values in V equals number that is",
    "start": "499750",
    "end": "508150"
  },
  {
    "text": "much easier to read code I think and an advantage of this that you can now have",
    "start": "508150",
    "end": "515140"
  },
  {
    "text": "a an argument with their colleagues about what it should be called should be called a equals they usually get some",
    "start": "515140",
    "end": "522490"
  },
  {
    "text": "nervous giggles when I said that because naming bike-sharing but actually when",
    "start": "522490",
    "end": "530230"
  },
  {
    "text": "you're arguing about what to name something you're arguing you're trying",
    "start": "530230",
    "end": "535690"
  },
  {
    "text": "to build a mental model of what does this thing actually do and how do i best",
    "start": "535690",
    "end": "541420"
  },
  {
    "text": "explain that to someone else I do that white by choosing a descriptive name",
    "start": "541420",
    "end": "548400"
  },
  {
    "text": "you're familiar with Matagorda balls compiler x no repetition",
    "start": "549930",
    "end": "555810"
  },
  {
    "text": "let's have a look Eve horrendous overhead of this construction",
    "start": "555810",
    "end": "563850"
  },
  {
    "text": "I wrote any of here instead of none of but you you recognize it and I have the",
    "start": "564810",
    "end": "574160"
  },
  {
    "text": "equals higher-order function here that captures its template it captures the",
    "start": "574160",
    "end": "579750"
  },
  {
    "text": "number and I'm just returning whether any of the values in this vector",
    "start": "579750",
    "end": "586200"
  },
  {
    "text": "actually so we can you can look at the result we get begin and end compare if they are equal if they are equal we're",
    "start": "586200",
    "end": "591660"
  },
  {
    "text": "done return 0 if they're not equal compare what the iterator points to with",
    "start": "591660",
    "end": "599730"
  },
  {
    "text": "what we got as a parameter if they're equal go to 5 return 1 otherwise add 4",
    "start": "599730",
    "end": "606690"
  },
  {
    "text": "because of an integer see if we're at the end if not one more revolution",
    "start": "606690",
    "end": "611790"
  },
  {
    "text": "there's no overhead in it you cannot write this more efficient so that is",
    "start": "611790",
    "end": "618390"
  },
  {
    "text": "good but let's see what happens if we try stood function instead the table",
    "start": "618390",
    "end": "633410"
  },
  {
    "text": "well it's it's so much exceptions",
    "start": "634400",
    "end": "642470"
  },
  {
    "text": "that function is not for free if you need finally the functionality that it",
    "start": "647089",
    "end": "653629"
  },
  {
    "text": "offers by all means don't be afraid to use it but it's not cheap so prefer if",
    "start": "653629",
    "end": "661790"
  },
  {
    "text": "you can just use the auto return type to return a lambda all clear right let's",
    "start": "661790",
    "end": "673639"
  },
  {
    "text": "get going that was a very very brief intro I hope",
    "start": "673639",
    "end": "679279"
  },
  {
    "text": "you you've got the gist of it so let's get an example I used to work for net",
    "start": "679279",
    "end": "686180"
  },
  {
    "text": "insight in Stockholm that insight makes networking equipment an obvious thing to",
    "start": "686180",
    "end": "692089"
  },
  {
    "text": "have in the networking equipment is to deal with IP addresses so let's have a type for dealing with that I prefer to",
    "start": "692089",
    "end": "699980"
  },
  {
    "text": "have one that I can construct from four bytes because it makes test code much easier to read and of course a",
    "start": "699980",
    "end": "706639"
  },
  {
    "text": "constructor from a full value if you think I'm weird from writing my own type",
    "start": "706639",
    "end": "712160"
  },
  {
    "text": "for an IP address instead just a 32-bit integer come to my type set tomorrow",
    "start": "712160",
    "end": "718120"
  },
  {
    "text": "then we'd need a net mask which is sort of an IP address and I want to be able",
    "start": "718480",
    "end": "724550"
  },
  {
    "text": "to do bit masking with an IP address on an ad mosque not strange so now I can",
    "start": "724550",
    "end": "731959"
  },
  {
    "text": "write a function a higher-order function IP matches that takes the address I'm",
    "start": "731959",
    "end": "737360"
  },
  {
    "text": "searching for and the mosque that defaults to to compare the entire address so I capture the address I'm",
    "start": "737360",
    "end": "748009"
  },
  {
    "text": "searching for with the mosque and it's callable with some other other address and we check if the masked address is",
    "start": "748009",
    "end": "757970"
  },
  {
    "text": "equals to what we were searching for and here's a good time to look at this sheet",
    "start": "757970",
    "end": "766910"
  },
  {
    "text": "rate that Twitter account walnut fox posted be very careful when you write",
    "start": "766910",
    "end": "776689"
  },
  {
    "text": "higher-order functions where the higher-order function take some parameter by value if your",
    "start": "776689",
    "end": "785000"
  },
  {
    "text": "lambda van captured this by reference and you return in the lambda you have a",
    "start": "785000",
    "end": "790700"
  },
  {
    "text": "really good foot gun here because the reference will refer to the parameter",
    "start": "790700",
    "end": "795860"
  },
  {
    "text": "that has long on outer scope you don't want that so if you capture parameters",
    "start": "795860",
    "end": "800870"
  },
  {
    "text": "if your higher your function accepts parameters by value make sure you capture by value this is this is",
    "start": "800870",
    "end": "809810"
  },
  {
    "text": "important all right so with this we can",
    "start": "809810",
    "end": "817700"
  },
  {
    "text": "now use it as in this case I'm just removing all addresses in the 192 168",
    "start": "817700",
    "end": "825110"
  },
  {
    "text": "sub Network this is I think reasonably",
    "start": "825110",
    "end": "831170"
  },
  {
    "text": "readable but then of course in networking equipment we have IP",
    "start": "831170",
    "end": "837290"
  },
  {
    "text": "interfaces so I have this is obviously super simplified but just to illustrate",
    "start": "837290",
    "end": "845090"
  },
  {
    "text": "where we have some state we can have an interface turned over on I can call set",
    "start": "845090",
    "end": "851450"
  },
  {
    "text": "state this must be an outline function because it will communicate with the IP stack",
    "start": "851450",
    "end": "858050"
  },
  {
    "text": "depending on we might actually even talk to hardware but I want to be able to",
    "start": "858050",
    "end": "863810"
  },
  {
    "text": "query the state and this is in line because I'd cache the current value and of course I have functions for getting",
    "start": "863810",
    "end": "871430"
  },
  {
    "text": "its address its netmask its gateway and some other things and now we have a",
    "start": "871430",
    "end": "880690"
  },
  {
    "text": "situation here I showed you just a couple of slides back this higher-order",
    "start": "880690",
    "end": "886400"
  },
  {
    "text": "function for matching IP addresses and here we have an IP interface it has an",
    "start": "886400",
    "end": "894110"
  },
  {
    "text": "address on its own and we also have the Gateway that is an address and maybe I want to be able to match addresses so to",
    "start": "894110",
    "end": "900950"
  },
  {
    "text": "search for at the interface with a certain gateway or whatever so how can I",
    "start": "900950",
    "end": "906830"
  },
  {
    "text": "make this work without writing specific code I should be able to reuse my",
    "start": "906830",
    "end": "912980"
  },
  {
    "text": "my function for a matching IP addresses so this is a generic thing if I if I",
    "start": "912980",
    "end": "920720"
  },
  {
    "text": "have a function f one that takes a while and returns is Ed and I have another function f2 that takes on excellent",
    "start": "920720",
    "end": "926210"
  },
  {
    "text": "returns why I want to be able to compose these to get one function that calls f1",
    "start": "926210",
    "end": "931550"
  },
  {
    "text": "with the result of calling F 2 with X for example if F 1 now is IP matches and",
    "start": "931550",
    "end": "939350"
  },
  {
    "text": "F 2 is some select address function that given an IP interface returns its IP",
    "start": "939350",
    "end": "945230"
  },
  {
    "text": "address how can I do that",
    "start": "945230",
    "end": "950740"
  },
  {
    "text": "this is not difficult again it's a function that takes two function times",
    "start": "950740",
    "end": "958400"
  },
  {
    "text": "f1 and f2 we use the auto return type from simple +14 to return a lambda that",
    "start": "958400",
    "end": "964040"
  },
  {
    "text": "captures these functions and wasn't called with anything we return the",
    "start": "964040",
    "end": "970160"
  },
  {
    "text": "result of calling f1 with f2 event",
    "start": "970160",
    "end": "975279"
  },
  {
    "text": "generalizing this to any number of functions is more difficult but in this",
    "start": "977710",
    "end": "983420"
  },
  {
    "text": "case this is trivial so I cannot use this as such so I want to find something",
    "start": "983420",
    "end": "993680"
  },
  {
    "text": "find an IP interface that is the",
    "start": "993680",
    "end": "999050"
  },
  {
    "text": "composition of IP matches and select address IP mattress you saw earlier and select address is a function that when",
    "start": "999050",
    "end": "1007810"
  },
  {
    "text": "hold within a interface it it calls the dot address member function and returns",
    "start": "1007810",
    "end": "1013300"
  },
  {
    "text": "it so this will in effect for every",
    "start": "1013300",
    "end": "1020050"
  },
  {
    "text": "interface it will call select address to get an address get that address into",
    "start": "1020050",
    "end": "1025890"
  },
  {
    "text": "match IP and we're done and of course I",
    "start": "1025890",
    "end": "1032640"
  },
  {
    "text": "why not take this composition and make it usable in other places so lift it out",
    "start": "1032640",
    "end": "1041530"
  },
  {
    "text": "write a function address matches that takes an IP address in the net mask and with this composition using again the auto",
    "start": "1041530",
    "end": "1048069"
  },
  {
    "text": "return type to do this and then I can just use this new address match this",
    "start": "1048069",
    "end": "1054880"
  },
  {
    "text": "function in in my finder if I think this is neat don't you and then let's go on",
    "start": "1054880",
    "end": "1065799"
  },
  {
    "text": "we can right of course select gateway and the select state and select mask and",
    "start": "1065799",
    "end": "1072370"
  },
  {
    "text": "what have you these are simple things so maybe I want to compare more than one",
    "start": "1072370",
    "end": "1079570"
  },
  {
    "text": "criteria I want to find an IP address an",
    "start": "1079570",
    "end": "1087010"
  },
  {
    "text": "IP interface which has an address in 190 268 sub Network that is off so how do I",
    "start": "1087010",
    "end": "1094779"
  },
  {
    "text": "write a when all to compare all these higher-order functions their results how",
    "start": "1094779",
    "end": "1100450"
  },
  {
    "text": "can I write this in 17 this is really easy 17 and we're done simple source 18",
    "start": "1100450",
    "end": "1107710"
  },
  {
    "text": "now so of course you're all using see below 17 right so I'm using a very attic",
    "start": "1107710",
    "end": "1115480"
  },
  {
    "text": "template with a predicate can be any number and I'm using the fold expression",
    "start": "1115480",
    "end": "1122730"
  },
  {
    "text": "are you familiar with fold expressions or who is not familiar okay I will not",
    "start": "1122730",
    "end": "1129789"
  },
  {
    "text": "make this lecture on how fold expressions work but I can through this particular example the return here in",
    "start": "1129789",
    "end": "1137409"
  },
  {
    "text": "the renewal function when it's parenthesized like this this will expand",
    "start": "1137409",
    "end": "1143230"
  },
  {
    "text": "to PS of x is call of the first predicate and logic and dot dot and dot",
    "start": "1143230",
    "end": "1151179"
  },
  {
    "text": "dot or all the other predicate so if we had three predicates it will be the",
    "start": "1151179",
    "end": "1157029"
  },
  {
    "text": "first predicate of X and the second predictor of X and the third predicate of X and we get the normal logic",
    "start": "1157029",
    "end": "1163409"
  },
  {
    "text": "short-circuiting in this case we have only two PS and PS of X and dr. dot is",
    "start": "1163409",
    "end": "1173789"
  },
  {
    "text": "address mattress logic and state is cool and address matrix you saw before",
    "start": "1173789",
    "end": "1183940"
  },
  {
    "text": "state is it's of course obviously it's you've seen the equals on the very first",
    "start": "1183940",
    "end": "1189340"
  },
  {
    "text": "few slides and select state is obvious and we compose these so we can check if",
    "start": "1189340",
    "end": "1196690"
  },
  {
    "text": "the value returned from calling state on",
    "start": "1196690",
    "end": "1202809"
  },
  {
    "text": "an IP interface is equal to the value we're searching for nothing strange",
    "start": "1202809",
    "end": "1211720"
  },
  {
    "text": "there and we can go a bit further now I'm actually going a little bit too far I'm a bit insane here but it generally",
    "start": "1211720",
    "end": "1219729"
  },
  {
    "text": "don't be insane but but there is a purpose here don't worry so I want to",
    "start": "1219729",
    "end": "1225070"
  },
  {
    "text": "say that for all elements all IP interfaces in this vector V when both",
    "start": "1225070",
    "end": "1234869"
  },
  {
    "text": "the address mattresses are 192 9268 subnetwork and the state is off then I",
    "start": "1234869",
    "end": "1241440"
  },
  {
    "text": "want to turn it off turn it on sorry so I can write an if then you should say",
    "start": "1241440",
    "end": "1251830"
  },
  {
    "text": "you recognize the pattern it's the same as always the function template that takes a predicate and an action we use",
    "start": "1251830",
    "end": "1257649"
  },
  {
    "text": "the auto return type to return a lambda that captures the predicate and action",
    "start": "1257649",
    "end": "1263710"
  },
  {
    "text": "and if the predicate is true that we call call the action in this case maybe",
    "start": "1263710",
    "end": "1269830"
  },
  {
    "text": "I overdid it but why not let the action be a allowed to consume value by perfect",
    "start": "1269830",
    "end": "1277779"
  },
  {
    "text": "forwarding if if it wants do ya see you",
    "start": "1277779",
    "end": "1286659"
  },
  {
    "text": "see what's happening here the the predicate will be this composition of when all and action will be set state",
    "start": "1286659",
    "end": "1292080"
  },
  {
    "text": "and set state is of course also a",
    "start": "1292080",
    "end": "1297239"
  },
  {
    "text": "higher-order function that uses your turn type to return a lambda that captures the state we want to set and",
    "start": "1297239",
    "end": "1303849"
  },
  {
    "text": "when the lambda is called women interface we call the set state remember no need to do this at the value that we",
    "start": "1303849",
    "end": "1309549"
  },
  {
    "text": "want it to have so you're with me or ad it's everything",
    "start": "1309549",
    "end": "1319330"
  },
  {
    "text": "completely weird let's have a look it's",
    "start": "1319330",
    "end": "1324910"
  },
  {
    "text": "this expensive who wants to rent yes",
    "start": "1324910",
    "end": "1330690"
  },
  {
    "text": "huge overhead Dom does higher-order functions templates",
    "start": "1330690",
    "end": "1337590"
  },
  {
    "text": "okay now the equals you saw that before we have an IP address netmask Moscone",
    "start": "1342360",
    "end": "1351670"
  },
  {
    "text": "operator we have the IP matches higher-order function yeah IP interface",
    "start": "1351670",
    "end": "1358480"
  },
  {
    "text": "class select address compose select",
    "start": "1358480",
    "end": "1364870"
  },
  {
    "text": "state set state the address mattress composition state is composition when",
    "start": "1364870",
    "end": "1374200"
  },
  {
    "text": "all a little bit difficult to see young over here but yeah looks the same if",
    "start": "1374200",
    "end": "1380890"
  },
  {
    "text": "then the same so then I have a function",
    "start": "1380890",
    "end": "1385990"
  },
  {
    "text": "here actually I shouldn't do this I should",
    "start": "1385990",
    "end": "1391470"
  },
  {
    "text": "should do like this to make it the same example",
    "start": "1398520",
    "end": "1403929"
  },
  {
    "text": "so we loop over all all elements if address matches it is off then we call",
    "start": "1403929",
    "end": "1412179"
  },
  {
    "text": "set state on ok this function is a bit big so we need to save register values",
    "start": "1412179",
    "end": "1418570"
  },
  {
    "text": "on the stack we get our begin and end if",
    "start": "1418570",
    "end": "1423640"
  },
  {
    "text": "there are equal we're done so that's boring otherwise we get the address",
    "start": "1423640",
    "end": "1431520"
  },
  {
    "text": "compare with them with a mosque if it mattress if it is what we're searching",
    "start": "1431520",
    "end": "1437020"
  },
  {
    "text": "for if it isn't we add 16 that's the",
    "start": "1437020",
    "end": "1442990"
  },
  {
    "text": "size of the struct check if we're at the end if not we take another revolution if",
    "start": "1442990",
    "end": "1449340"
  },
  {
    "text": "on the other hand the address did match we compare offset 14 that is where the",
    "start": "1449340",
    "end": "1456010"
  },
  {
    "text": "state variable is 14 12 of the 12 to get",
    "start": "1456010",
    "end": "1461649"
  },
  {
    "text": "the state variable if it is 0 we jump to 3 what happens at 3 yeah I was at the",
    "start": "1461649",
    "end": "1468159"
  },
  {
    "text": "1/2 ESI and we call such state that is cool then we add 16 again and go another",
    "start": "1468159",
    "end": "1475750"
  },
  {
    "text": "revolution there is no code bloat you cannot write it much more efficient than",
    "start": "1475750",
    "end": "1481659"
  },
  {
    "text": "this that is cool",
    "start": "1481659",
    "end": "1485820"
  },
  {
    "text": "so yeah and at the end of course we need to restore the registers from the stack",
    "start": "1488910",
    "end": "1494850"
  },
  {
    "text": "I think this is neat we we get an enormous expressive power",
    "start": "1494850",
    "end": "1501310"
  },
  {
    "text": "by using functions and composing functions and doesn't cost us anything",
    "start": "1501310",
    "end": "1506800"
  },
  {
    "text": "so don't be afraid to use higher order",
    "start": "1506800",
    "end": "1516280"
  },
  {
    "text": "functions right now we're going to sort",
    "start": "1516280",
    "end": "1522760"
  },
  {
    "text": "of a different stage of this presentation you're familiar with",
    "start": "1522760",
    "end": "1528960"
  },
  {
    "text": "optional T and simpler 13 oh not many",
    "start": "1528960",
    "end": "1534220"
  },
  {
    "text": "hands alright now I'll explain don't",
    "start": "1534220",
    "end": "1540160"
  },
  {
    "text": "worry stood optional T is a closed template the managers of manages a value",
    "start": "1540160",
    "end": "1549550"
  },
  {
    "text": "that may or may not be there so this is like a mentally it came in simple over",
    "start": "1549550",
    "end": "1555550"
  },
  {
    "text": "70 and it or there's nothing simple plus 17 ish about it at all here you can",
    "start": "1555550",
    "end": "1560830"
  },
  {
    "text": "easily write it in simple plus 11 if you want to and there are various open",
    "start": "1560830",
    "end": "1565960"
  },
  {
    "text": "source libraries out there that implements this this is super useful in lookup functions they give me the route",
    "start": "1565960",
    "end": "1573310"
  },
  {
    "text": "for this address sorry I don't know don't have it or actually do have it",
    "start": "1573310",
    "end": "1581910"
  },
  {
    "text": "minor inconvenience is us stood optional",
    "start": "1585520",
    "end": "1590630"
  },
  {
    "text": "is defined in simpler 17t must not be a reference you can get away with it just",
    "start": "1590630",
    "end": "1597560"
  },
  {
    "text": "work around it by saying that you use reference wrapper to TU than Europe and",
    "start": "1597560",
    "end": "1603530"
  },
  {
    "text": "you're good so I'll show you how to use",
    "start": "1603530",
    "end": "1608570"
  },
  {
    "text": "this I have a lookup function here that takes an IP interface under predicate",
    "start": "1608570",
    "end": "1614420"
  },
  {
    "text": "and it returns an optional reference wrapper so that if nothing is fine",
    "start": "1614420",
    "end": "1624020"
  },
  {
    "text": "found we return an optional that doesn't hold anything but if it is found it",
    "start": "1624020",
    "end": "1629110"
  },
  {
    "text": "optional that refers to there the IP interface that we found so that I can",
    "start": "1629110",
    "end": "1635630"
  },
  {
    "text": "call member functions on it so it's use is typically something like this I have",
    "start": "1635630",
    "end": "1641120"
  },
  {
    "text": "I get my variable found from the lookup and say if if it is found do stuff with",
    "start": "1641120",
    "end": "1647960"
  },
  {
    "text": "dot value of it and this is quite useful",
    "start": "1647960",
    "end": "1657100"
  },
  {
    "text": "the cost of this is the still optional",
    "start": "1657100",
    "end": "1662860"
  },
  {
    "text": "contact boolean variable member variable so you get that",
    "start": "1662860",
    "end": "1667990"
  },
  {
    "text": "extremely small overhead enter this",
    "start": "1667990",
    "end": "1673310"
  },
  {
    "text": "young man Simon Brown Totten lama various social media he has his own",
    "start": "1673310",
    "end": "1679910"
  },
  {
    "text": "optional on his github account it builds with the simple past 11 and it actually",
    "start": "1679910",
    "end": "1690290"
  },
  {
    "text": "supports references out of the box by the way the reason that the standard",
    "start": "1690290",
    "end": "1695960"
  },
  {
    "text": "optional does not hold references or does not allow reference types as far as I know is that it can be a bit confusing",
    "start": "1695960",
    "end": "1704420"
  },
  {
    "text": "what it means to assign to it do we mean that we assign a value to the variable",
    "start": "1704420",
    "end": "1709580"
  },
  {
    "text": "that is referred to or do we mean that we rebind the reference to refer to something else",
    "start": "1709580",
    "end": "1716710"
  },
  {
    "text": "Simon's were when you do use it with with the",
    "start": "1717070",
    "end": "1723490"
  },
  {
    "text": "reference is the rebind zit on assignment so they did first do",
    "start": "1723490",
    "end": "1729250"
  },
  {
    "text": "something else but his option also has",
    "start": "1729250",
    "end": "1736030"
  },
  {
    "text": "some functional extensions and that is the reason I want to talk about them because those are neat and he actually",
    "start": "1736030",
    "end": "1741280"
  },
  {
    "text": "wrote a proposal for standardization for this and I understand that he is current",
    "start": "1741280",
    "end": "1747640"
  },
  {
    "text": "writing on I don't know if he's getting",
    "start": "1747640",
    "end": "1753820"
  },
  {
    "text": "an hour one or if it's completely different proposals do you know Tony yeah yeah anyway he's working on a",
    "start": "1753820",
    "end": "1762040"
  },
  {
    "text": "revised edition on his proposal for a functional functional extensions to",
    "start": "1762040",
    "end": "1768340"
  },
  {
    "text": "optional we'll see well that lands personally I hope for this because it's",
    "start": "1768340",
    "end": "1774910"
  },
  {
    "text": "neat but you never know at least I don't the way you use it is this year include",
    "start": "1774910",
    "end": "1782760"
  },
  {
    "text": "TL / optional TL for total Lama and here",
    "start": "1782760",
    "end": "1788230"
  },
  {
    "text": "I can use it with a reference type in reference in this case so when I default",
    "start": "1788230",
    "end": "1793600"
  },
  {
    "text": "constructor it does not hold any value doesn't refer to anything but when I assign it with an int variable it will",
    "start": "1793600",
    "end": "1800130"
  },
  {
    "text": "rebind to refer to I now it has a value and if I'd say the dot value that is a",
    "start": "1800130",
    "end": "1808680"
  },
  {
    "text": "reference to I then we assigned to I if I assign it with another int variable it",
    "start": "1808680",
    "end": "1817360"
  },
  {
    "text": "read binds the reference to refer to the new variable that is not too exciting",
    "start": "1817360",
    "end": "1823510"
  },
  {
    "text": "what is exciting is this this function of a continuation so you can say the dot",
    "start": "1823510",
    "end": "1830080"
  },
  {
    "text": "and then and something that is callable this something that is callable will be",
    "start": "1830080",
    "end": "1838240"
  },
  {
    "text": "called with the value held by the optional if it holds value otherwise it does absolutely nothing at all",
    "start": "1838240",
    "end": "1845280"
  },
  {
    "text": "likewise you can say dot or else which will be called if if it doesn't hold anything",
    "start": "1845280",
    "end": "1851010"
  },
  {
    "text": "in the first case here it this is a void function so the stays undefined and",
    "start": "1851010",
    "end": "1860900"
  },
  {
    "text": "initialize does all the value but it's also possible like in the last line to",
    "start": "1860900",
    "end": "1867290"
  },
  {
    "text": "to return another value another optional that will replace what's in which is",
    "start": "1867290",
    "end": "1876419"
  },
  {
    "text": "super useful because now you can use this in a lookup function say lookup this dot or else that isn't it also it",
    "start": "1876419",
    "end": "1888000"
  },
  {
    "text": "is a little bit neater than this did you notice the difference between these two sides so the here we have three separate",
    "start": "1888000",
    "end": "1898799"
  },
  {
    "text": "statements but by changing changing it to use the dot continuations I say V and",
    "start": "1898799",
    "end": "1906510"
  },
  {
    "text": "then dot or else dot or else so you can change these and the cool thing with",
    "start": "1906510",
    "end": "1913740"
  },
  {
    "text": "that is if something if you have a bunch",
    "start": "1913740",
    "end": "1918900"
  },
  {
    "text": "of and then for example if one in the middle fails then the the ones that",
    "start": "1918900",
    "end": "1924660"
  },
  {
    "text": "follow will not do anything and you will know at the end of no it's the operation",
    "start": "1924660",
    "end": "1930030"
  },
  {
    "text": "failed didn't get what we wanted no you",
    "start": "1930030",
    "end": "1938730"
  },
  {
    "text": "don't okay the question was I have to start with the dot and then no I don't have to you can start with dot or else",
    "start": "1938730",
    "end": "1945210"
  },
  {
    "text": "it I'm not sure it's a very brilliant idea but but you can so let's use this",
    "start": "1945210",
    "end": "1957030"
  },
  {
    "text": "see what happens so change my lookup functions very very slightly so that it",
    "start": "1957030",
    "end": "1962880"
  },
  {
    "text": "returns a talking llama optional of an IP interface reference and we have some",
    "start": "1962880",
    "end": "1968820"
  },
  {
    "text": "or some funk that does something if up succeeded but since we have these",
    "start": "1968820",
    "end": "1976169"
  },
  {
    "text": "continuations we can do this much cooler lookup this into much this interface of",
    "start": "1976169",
    "end": "1983220"
  },
  {
    "text": "matches I mean 9268 1-1 and then doing stuff and like I",
    "start": "1983220",
    "end": "1994320"
  },
  {
    "text": "mentioned we also returned something that a itself isn't not to to be able to",
    "start": "1994320",
    "end": "2003860"
  },
  {
    "text": "fail an operation so I can say that set state and then I've changed set state so",
    "start": "2003860",
    "end": "2012290"
  },
  {
    "text": "that it returns an optional so that it that is its way of signaling that sorry I could not set the state for whatever",
    "start": "2012290",
    "end": "2018679"
  },
  {
    "text": "reason so then I can say or else write",
    "start": "2018679",
    "end": "2024740"
  },
  {
    "text": "an error message or whatever something and this is neat I think it's a very",
    "start": "2024740",
    "end": "2033410"
  },
  {
    "text": "powerful way of composing functionality in a somewhat different from what I'd",
    "start": "2033410",
    "end": "2040190"
  },
  {
    "text": "first about so let's again have a look",
    "start": "2040190",
    "end": "2045500"
  },
  {
    "text": "at the overhead there is actually an overhead in this one but that I think is",
    "start": "2045500",
    "end": "2050600"
  },
  {
    "text": "a missed optimization bug in clang if you agree with me",
    "start": "2050600",
    "end": "2056858"
  },
  {
    "text": "so here I'm including total Lama optional we have the lookup function I",
    "start": "2062529",
    "end": "2074289"
  },
  {
    "text": "change it to use stood puts instead of CR Sierra because it makes much easier",
    "start": "2074289",
    "end": "2081408"
  },
  {
    "text": "code to read in compiler explorer push",
    "start": "2081409",
    "end": "2089059"
  },
  {
    "text": "date get get begin and then see if we are already done this is cool it's",
    "start": "2089059",
    "end": "2095210"
  },
  {
    "text": "already got what this address was if we",
    "start": "2095210",
    "end": "2103010"
  },
  {
    "text": "equal go to four if not add 60 in another resolution then we check if we",
    "start": "2103010",
    "end": "2114020"
  },
  {
    "text": "are at the end if we're at the end who leave then for some reason I cannot really fathom I'm not very good at a x86",
    "start": "2114020",
    "end": "2122119"
  },
  {
    "text": "64 assembly to be honest but as far as I understand this is a null point to check which doesn't make any sense whatsoever",
    "start": "2122119",
    "end": "2128799"
  },
  {
    "text": "because it won't be I'm guessing the reason is that an optional it's an",
    "start": "2128799",
    "end": "2136160"
  },
  {
    "text": "optional to a reference it's actually it has a partial specialization that is",
    "start": "2136160",
    "end": "2142190"
  },
  {
    "text": "implemented in terms of a pointer so it knows if it holds a value if the pointer",
    "start": "2142190",
    "end": "2147619"
  },
  {
    "text": "is not null I think that's where this as far as I can see completely redundant",
    "start": "2147619",
    "end": "2153890"
  },
  {
    "text": "and no point to check is done but if it",
    "start": "2153890",
    "end": "2158900"
  },
  {
    "text": "passes this then we call set state and",
    "start": "2158900",
    "end": "2166838"
  },
  {
    "text": "go to seven where we pop the stack and in the other case is if we are either",
    "start": "2167049",
    "end": "2172609"
  },
  {
    "text": "fail to look up or if well my set state was trivial so it always succeeds so it",
    "start": "2172609",
    "end": "2180799"
  },
  {
    "text": "doesn't have any check on this one if it fails we call puts with this failed of string",
    "start": "2180799",
    "end": "2187210"
  },
  {
    "text": "me day and with this I'm pretty much",
    "start": "2188410",
    "end": "2198530"
  },
  {
    "text": "done where we talked through my extremely long-winded agenda here we saw",
    "start": "2198530",
    "end": "2210230"
  },
  {
    "text": "in the beginning some higher-order functions some are completely generic",
    "start": "2210230",
    "end": "2216590"
  },
  {
    "text": "like a equals and competant them that actually didn't strike me when I first",
    "start": "2216590",
    "end": "2222790"
  },
  {
    "text": "started writing this presentation that they were it was something I noticed while running the presentation that hey",
    "start": "2222790",
    "end": "2229400"
  },
  {
    "text": "these are completely generic library functions and so our domain specific",
    "start": "2229400",
    "end": "2234560"
  },
  {
    "text": "functions IP matches select address states would have you and/or domain",
    "start": "2234560",
    "end": "2240110"
  },
  {
    "text": "specific compositions like address mattress and status and so on when I",
    "start": "2240110",
    "end": "2248390"
  },
  {
    "text": "realized that the ones on the left are completely generic library functions I started scouting the internet for cool",
    "start": "2248390",
    "end": "2256220"
  },
  {
    "text": "libraries for higher-order functions in c++ and to my surprise I did not find a single one I presume my Google foo was",
    "start": "2256220",
    "end": "2264020"
  },
  {
    "text": "failing but that was actually the case I did not find any so I wrote one feel",
    "start": "2264020",
    "end": "2272390"
  },
  {
    "text": "free to use it if you want to be aware though that I may have gone a bit crazy on that one it's fully context poor and",
    "start": "2272390",
    "end": "2284620"
  },
  {
    "text": "fully very addict you can and the functions can take any number of arguments and it's a compiler bug magnet",
    "start": "2284620",
    "end": "2294040"
  },
  {
    "text": "I've filed for compiler bugs on the compose function alone and that's",
    "start": "2294040",
    "end": "2299150"
  },
  {
    "text": "because the only reason it's only four is because I haven't bothered with Visual Studio but by all means if you",
    "start": "2299150",
    "end": "2309290"
  },
  {
    "text": "want to talk tie with it do so but that was true then after in April",
    "start": "2309290",
    "end": "2318920"
  },
  {
    "text": "boost 1.67 was released and it has a library boost HOF higher-order functions",
    "start": "2318920",
    "end": "2326290"
  },
  {
    "text": "which I haven't really worked with so I",
    "start": "2326290",
    "end": "2331520"
  },
  {
    "text": "cannot say that much about how good but it is what I can say is that the overlap",
    "start": "2331520",
    "end": "2340370"
  },
  {
    "text": "between boost half and and my lift library is almost nothing actually it's",
    "start": "2340370",
    "end": "2346340"
  },
  {
    "text": "only a compose that is that is the overlap boost Huff has a number of other",
    "start": "2346340",
    "end": "2354170"
  },
  {
    "text": "really cool stuff for currying functions and rearranging parameter order and",
    "start": "2354170",
    "end": "2359930"
  },
  {
    "text": "whatever in functions also boost 1.68",
    "start": "2359930",
    "end": "2365390"
  },
  {
    "text": "was released just a couple of weeks ago so might be a good idea to look that one up but as far as I could see boost Huff",
    "start": "2365390",
    "end": "2372290"
  },
  {
    "text": "hasn't had any any changing in its functionality maybe there are bug fixes",
    "start": "2372290",
    "end": "2379960"
  },
  {
    "text": "so to summarize key takeaway messages use the auto return type I lost count of",
    "start": "2380530",
    "end": "2388400"
  },
  {
    "text": "how many times I said that I presume you will remember it write functions that use the auto return type to to create",
    "start": "2388400",
    "end": "2394640"
  },
  {
    "text": "lambdas and return them be careful with the capture write capture if your higher-order function takes parameters",
    "start": "2394640",
    "end": "2401300"
  },
  {
    "text": "by value capture by value this is important write functions that access or",
    "start": "2401300",
    "end": "2408470"
  },
  {
    "text": "modify your state like the Select state",
    "start": "2408470",
    "end": "2414950"
  },
  {
    "text": "and set state member functions that are higher-order functions that I showed and",
    "start": "2414950",
    "end": "2420040"
  },
  {
    "text": "compose functions and give these compositions name and yes bikes read the names with your",
    "start": "2420040",
    "end": "2427400"
  },
  {
    "text": "colleagues because that is good for those who will read the code further down the line and the functional",
    "start": "2427400",
    "end": "2435140"
  },
  {
    "text": "extension to optional I really hope we get that in the standard but if not we",
    "start": "2435140",
    "end": "2440750"
  },
  {
    "text": "can use Simon brands implementation and I should mention expected",
    "start": "2440750",
    "end": "2445800"
  },
  {
    "text": "optional is you get a tea or you don't expect it is you get a tea or an excuse",
    "start": "2445800",
    "end": "2452800"
  },
  {
    "text": "efore excuse say why you didn't get a tea so it's sort of like stood variant",
    "start": "2452800",
    "end": "2459490"
  },
  {
    "text": "but but it has an opinion of what what you should have what you should not have",
    "start": "2459490",
    "end": "2464609"
  },
  {
    "text": "expected it's always two types only and",
    "start": "2464609",
    "end": "2470650"
  },
  {
    "text": "that's it there you have again the link to my library should you want to and you",
    "start": "2470650",
    "end": "2475720"
  },
  {
    "text": "have information about how to spam me if that is your thing thank you for your attention",
    "start": "2475720",
    "end": "2480780"
  },
  {
    "text": "[Applause]",
    "start": "2480780",
    "end": "2488520"
  },
  {
    "text": "three minutes for questions okay so",
    "start": "2488520",
    "end": "2519190"
  },
  {
    "text": "higher-order functions that accepts functions as parameters the the the standard library takes them as by value",
    "start": "2519190",
    "end": "2526299"
  },
  {
    "text": "and the question is do we miss optimization opportunities because of",
    "start": "2526299",
    "end": "2531490"
  },
  {
    "text": "this instead of accepting by reference I presume maybe not that I have seen but",
    "start": "2531490",
    "end": "2538990"
  },
  {
    "text": "maybe but there is another thing and that is if your if your higher-order",
    "start": "2538990",
    "end": "2545020"
  },
  {
    "text": "function actually holds a state and it is not copyable say you have a",
    "start": "2545020",
    "end": "2550390"
  },
  {
    "text": "higher-order function that holds a unique pointer then you then it's not",
    "start": "2550390",
    "end": "2556569"
  },
  {
    "text": "copyable then you have to move it okay you can move it sure what I did in my lift library is that all of these are",
    "start": "2556569",
    "end": "2563940"
  },
  {
    "text": "using perfect forwarding so if you if you take the if you pass them by value",
    "start": "2563940",
    "end": "2569799"
  },
  {
    "text": "you get a copy if you do a move you get you get them moved",
    "start": "2569799",
    "end": "2575490"
  },
  {
    "text": "to the specific question of missed opportunities for optimization I have",
    "start": "2577430",
    "end": "2584220"
  },
  {
    "text": "not seen it but that is not a guarantee that it won't happen other questions",
    "start": "2584220",
    "end": "2591980"
  },
  {
    "text": "all right thank you again [Applause]",
    "start": "2593180",
    "end": "2601940"
  }
]